
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001163c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08011780  08011780  00021780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f9c  08011f9c  00030374  2**0
                  CONTENTS
  4 .ARM          00000008  08011f9c  08011f9c  00021f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fa4  08011fa4  00030374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fa4  08011fa4  00021fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fa8  08011fa8  00021fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  08011fac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000374  08012320  00030374  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20001c1c  08012320  00031c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002caea  00000000  00000000  0003039d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005288  00000000  00000000  0005ce87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000203ac  00000000  00000000  0006210f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000824c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006a08  00000000  00000000  00083830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a13f  00000000  00000000  0008a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fc65  00000000  00000000  000a4377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090a6d  00000000  00000000  000d3fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164a49  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c0  00000000  00000000  00164a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000374 	.word	0x20000374
 800015c:	00000000 	.word	0x00000000
 8000160:	08011764 	.word	0x08011764

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000378 	.word	0x20000378
 800017c:	08011764 	.word	0x08011764

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_f2uiz>:
 800118c:	0042      	lsls	r2, r0, #1
 800118e:	d20e      	bcs.n	80011ae <__aeabi_f2uiz+0x22>
 8001190:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001194:	d30b      	bcc.n	80011ae <__aeabi_f2uiz+0x22>
 8001196:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119e:	d409      	bmi.n	80011b4 <__aeabi_f2uiz+0x28>
 80011a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4770      	bx	lr
 80011b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b8:	d101      	bne.n	80011be <__aeabi_f2uiz+0x32>
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	d102      	bne.n	80011c4 <__aeabi_f2uiz+0x38>
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	4770      	bx	lr
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__aeabi_uldivmod>:
 80011cc:	b953      	cbnz	r3, 80011e4 <__aeabi_uldivmod+0x18>
 80011ce:	b94a      	cbnz	r2, 80011e4 <__aeabi_uldivmod+0x18>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	bf08      	it	eq
 80011d4:	2800      	cmpeq	r0, #0
 80011d6:	bf1c      	itt	ne
 80011d8:	f04f 31ff 	movne.w	r1, #4294967295
 80011dc:	f04f 30ff 	movne.w	r0, #4294967295
 80011e0:	f000 b9ae 	b.w	8001540 <__aeabi_idiv0>
 80011e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ec:	f000 f83e 	bl	800126c <__udivmoddi4>
 80011f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <__aeabi_d2lz>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	460c      	mov	r4, r1
 8001202:	2200      	movs	r2, #0
 8001204:	2300      	movs	r3, #0
 8001206:	4628      	mov	r0, r5
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fbef 	bl	80009ec <__aeabi_dcmplt>
 800120e:	b928      	cbnz	r0, 800121c <__aeabi_d2lz+0x20>
 8001210:	4628      	mov	r0, r5
 8001212:	4621      	mov	r1, r4
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b80a 	b.w	8001230 <__aeabi_d2ulz>
 800121c:	4628      	mov	r0, r5
 800121e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001222:	f000 f805 	bl	8001230 <__aeabi_d2ulz>
 8001226:	4240      	negs	r0, r0
 8001228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop

08001230 <__aeabi_d2ulz>:
 8001230:	b5d0      	push	{r4, r6, r7, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__aeabi_d2ulz+0x34>)
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
 800123a:	f7ff f965 	bl	8000508 <__aeabi_dmul>
 800123e:	f7ff fc3b 	bl	8000ab8 <__aeabi_d2uiz>
 8001242:	4604      	mov	r4, r0
 8001244:	f7ff f8e6 	bl	8000414 <__aeabi_ui2d>
 8001248:	2200      	movs	r2, #0
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <__aeabi_d2ulz+0x38>)
 800124c:	f7ff f95c 	bl	8000508 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7fe ff9e 	bl	8000198 <__aeabi_dsub>
 800125c:	f7ff fc2c 	bl	8000ab8 <__aeabi_d2uiz>
 8001260:	4621      	mov	r1, r4
 8001262:	bdd0      	pop	{r4, r6, r7, pc}
 8001264:	3df00000 	.word	0x3df00000
 8001268:	41f00000 	.word	0x41f00000

0800126c <__udivmoddi4>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	9e08      	ldr	r6, [sp, #32]
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	4688      	mov	r8, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d14d      	bne.n	8001318 <__udivmoddi4+0xac>
 800127c:	428a      	cmp	r2, r1
 800127e:	4694      	mov	ip, r2
 8001280:	d968      	bls.n	8001354 <__udivmoddi4+0xe8>
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b152      	cbz	r2, 800129e <__udivmoddi4+0x32>
 8001288:	fa01 f302 	lsl.w	r3, r1, r2
 800128c:	f1c2 0120 	rsb	r1, r2, #32
 8001290:	fa20 f101 	lsr.w	r1, r0, r1
 8001294:	fa0c fc02 	lsl.w	ip, ip, r2
 8001298:	ea41 0803 	orr.w	r8, r1, r3
 800129c:	4094      	lsls	r4, r2
 800129e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012a2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012a6:	fa1f fe8c 	uxth.w	lr, ip
 80012aa:	fb01 8817 	mls	r8, r1, r7, r8
 80012ae:	fb07 f00e 	mul.w	r0, r7, lr
 80012b2:	0c23      	lsrs	r3, r4, #16
 80012b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x66>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f107 35ff 	add.w	r5, r7, #4294967295
 80012c4:	f080 811e 	bcs.w	8001504 <__udivmoddi4+0x298>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	f240 811b 	bls.w	8001504 <__udivmoddi4+0x298>
 80012ce:	3f02      	subs	r7, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1b      	subs	r3, r3, r0
 80012d4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012d8:	fb01 3310 	mls	r3, r1, r0, r3
 80012dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d90a      	bls.n	8001300 <__udivmoddi4+0x94>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f2:	f080 8109 	bcs.w	8001508 <__udivmoddi4+0x29c>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	f240 8106 	bls.w	8001508 <__udivmoddi4+0x29c>
 80012fc:	4464      	add	r4, ip
 80012fe:	3802      	subs	r0, #2
 8001300:	2100      	movs	r1, #0
 8001302:	eba4 040e 	sub.w	r4, r4, lr
 8001306:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa8>
 800130c:	2300      	movs	r3, #0
 800130e:	40d4      	lsrs	r4, r2
 8001310:	e9c6 4300 	strd	r4, r3, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	428b      	cmp	r3, r1
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0xc2>
 800131c:	2e00      	cmp	r6, #0
 800131e:	f000 80ee 	beq.w	80014fe <__udivmoddi4+0x292>
 8001322:	2100      	movs	r1, #0
 8001324:	e9c6 0500 	strd	r0, r5, [r6]
 8001328:	4608      	mov	r0, r1
 800132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132e:	fab3 f183 	clz	r1, r3
 8001332:	2900      	cmp	r1, #0
 8001334:	d14a      	bne.n	80013cc <__udivmoddi4+0x160>
 8001336:	42ab      	cmp	r3, r5
 8001338:	d302      	bcc.n	8001340 <__udivmoddi4+0xd4>
 800133a:	4282      	cmp	r2, r0
 800133c:	f200 80fc 	bhi.w	8001538 <__udivmoddi4+0x2cc>
 8001340:	1a84      	subs	r4, r0, r2
 8001342:	eb65 0303 	sbc.w	r3, r5, r3
 8001346:	2001      	movs	r0, #1
 8001348:	4698      	mov	r8, r3
 800134a:	2e00      	cmp	r6, #0
 800134c:	d0e2      	beq.n	8001314 <__udivmoddi4+0xa8>
 800134e:	e9c6 4800 	strd	r4, r8, [r6]
 8001352:	e7df      	b.n	8001314 <__udivmoddi4+0xa8>
 8001354:	b902      	cbnz	r2, 8001358 <__udivmoddi4+0xec>
 8001356:	deff      	udf	#255	; 0xff
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	2a00      	cmp	r2, #0
 800135e:	f040 8091 	bne.w	8001484 <__udivmoddi4+0x218>
 8001362:	eba1 000c 	sub.w	r0, r1, ip
 8001366:	2101      	movs	r1, #1
 8001368:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136c:	fa1f fe8c 	uxth.w	lr, ip
 8001370:	fbb0 f3f7 	udiv	r3, r0, r7
 8001374:	fb07 0013 	mls	r0, r7, r3, r0
 8001378:	0c25      	lsrs	r5, r4, #16
 800137a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800137e:	fb0e f003 	mul.w	r0, lr, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x12c>
 8001386:	eb1c 0505 	adds.w	r5, ip, r5
 800138a:	f103 38ff 	add.w	r8, r3, #4294967295
 800138e:	d202      	bcs.n	8001396 <__udivmoddi4+0x12a>
 8001390:	42a8      	cmp	r0, r5
 8001392:	f200 80ce 	bhi.w	8001532 <__udivmoddi4+0x2c6>
 8001396:	4643      	mov	r3, r8
 8001398:	1a2d      	subs	r5, r5, r0
 800139a:	fbb5 f0f7 	udiv	r0, r5, r7
 800139e:	fb07 5510 	mls	r5, r7, r0, r5
 80013a2:	fb0e fe00 	mul.w	lr, lr, r0
 80013a6:	b2a4      	uxth	r4, r4
 80013a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013ac:	45a6      	cmp	lr, r4
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x156>
 80013b0:	eb1c 0404 	adds.w	r4, ip, r4
 80013b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x154>
 80013ba:	45a6      	cmp	lr, r4
 80013bc:	f200 80b6 	bhi.w	800152c <__udivmoddi4+0x2c0>
 80013c0:	4628      	mov	r0, r5
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ca:	e79e      	b.n	800130a <__udivmoddi4+0x9e>
 80013cc:	f1c1 0720 	rsb	r7, r1, #32
 80013d0:	408b      	lsls	r3, r1
 80013d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013da:	fa25 fa07 	lsr.w	sl, r5, r7
 80013de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013e2:	fbba f8f9 	udiv	r8, sl, r9
 80013e6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ea:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ee:	408d      	lsls	r5, r1
 80013f0:	fa1f fe8c 	uxth.w	lr, ip
 80013f4:	431d      	orrs	r5, r3
 80013f6:	fa00 f301 	lsl.w	r3, r0, r1
 80013fa:	fb08 f00e 	mul.w	r0, r8, lr
 80013fe:	0c2c      	lsrs	r4, r5, #16
 8001400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001404:	42a0      	cmp	r0, r4
 8001406:	fa02 f201 	lsl.w	r2, r2, r1
 800140a:	d90b      	bls.n	8001424 <__udivmoddi4+0x1b8>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f108 3aff 	add.w	sl, r8, #4294967295
 8001414:	f080 8088 	bcs.w	8001528 <__udivmoddi4+0x2bc>
 8001418:	42a0      	cmp	r0, r4
 800141a:	f240 8085 	bls.w	8001528 <__udivmoddi4+0x2bc>
 800141e:	f1a8 0802 	sub.w	r8, r8, #2
 8001422:	4464      	add	r4, ip
 8001424:	1a24      	subs	r4, r4, r0
 8001426:	fbb4 f0f9 	udiv	r0, r4, r9
 800142a:	fb09 4410 	mls	r4, r9, r0, r4
 800142e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001432:	b2ad      	uxth	r5, r5
 8001434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x1e2>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f100 35ff 	add.w	r5, r0, #4294967295
 8001444:	d26c      	bcs.n	8001520 <__udivmoddi4+0x2b4>
 8001446:	45a6      	cmp	lr, r4
 8001448:	d96a      	bls.n	8001520 <__udivmoddi4+0x2b4>
 800144a:	3802      	subs	r0, #2
 800144c:	4464      	add	r4, ip
 800144e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001452:	fba0 9502 	umull	r9, r5, r0, r2
 8001456:	eba4 040e 	sub.w	r4, r4, lr
 800145a:	42ac      	cmp	r4, r5
 800145c:	46c8      	mov	r8, r9
 800145e:	46ae      	mov	lr, r5
 8001460:	d356      	bcc.n	8001510 <__udivmoddi4+0x2a4>
 8001462:	d053      	beq.n	800150c <__udivmoddi4+0x2a0>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d069      	beq.n	800153c <__udivmoddi4+0x2d0>
 8001468:	ebb3 0208 	subs.w	r2, r3, r8
 800146c:	eb64 040e 	sbc.w	r4, r4, lr
 8001470:	fa22 f301 	lsr.w	r3, r2, r1
 8001474:	fa04 f707 	lsl.w	r7, r4, r7
 8001478:	431f      	orrs	r7, r3
 800147a:	40cc      	lsrs	r4, r1
 800147c:	e9c6 7400 	strd	r7, r4, [r6]
 8001480:	2100      	movs	r1, #0
 8001482:	e747      	b.n	8001314 <__udivmoddi4+0xa8>
 8001484:	fa0c fc02 	lsl.w	ip, ip, r2
 8001488:	f1c2 0120 	rsb	r1, r2, #32
 800148c:	fa25 f301 	lsr.w	r3, r5, r1
 8001490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001494:	fa20 f101 	lsr.w	r1, r0, r1
 8001498:	4095      	lsls	r5, r2
 800149a:	430d      	orrs	r5, r1
 800149c:	fbb3 f1f7 	udiv	r1, r3, r7
 80014a0:	fb07 3311 	mls	r3, r7, r1, r3
 80014a4:	fa1f fe8c 	uxth.w	lr, ip
 80014a8:	0c28      	lsrs	r0, r5, #16
 80014aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014ae:	fb01 f30e 	mul.w	r3, r1, lr
 80014b2:	4283      	cmp	r3, r0
 80014b4:	fa04 f402 	lsl.w	r4, r4, r2
 80014b8:	d908      	bls.n	80014cc <__udivmoddi4+0x260>
 80014ba:	eb1c 0000 	adds.w	r0, ip, r0
 80014be:	f101 38ff 	add.w	r8, r1, #4294967295
 80014c2:	d22f      	bcs.n	8001524 <__udivmoddi4+0x2b8>
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d92d      	bls.n	8001524 <__udivmoddi4+0x2b8>
 80014c8:	3902      	subs	r1, #2
 80014ca:	4460      	add	r0, ip
 80014cc:	1ac0      	subs	r0, r0, r3
 80014ce:	fbb0 f3f7 	udiv	r3, r0, r7
 80014d2:	fb07 0013 	mls	r0, r7, r3, r0
 80014d6:	b2ad      	uxth	r5, r5
 80014d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014dc:	fb03 f00e 	mul.w	r0, r3, lr
 80014e0:	42a8      	cmp	r0, r5
 80014e2:	d908      	bls.n	80014f6 <__udivmoddi4+0x28a>
 80014e4:	eb1c 0505 	adds.w	r5, ip, r5
 80014e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80014ec:	d216      	bcs.n	800151c <__udivmoddi4+0x2b0>
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d914      	bls.n	800151c <__udivmoddi4+0x2b0>
 80014f2:	3b02      	subs	r3, #2
 80014f4:	4465      	add	r5, ip
 80014f6:	1a28      	subs	r0, r5, r0
 80014f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014fc:	e738      	b.n	8001370 <__udivmoddi4+0x104>
 80014fe:	4631      	mov	r1, r6
 8001500:	4630      	mov	r0, r6
 8001502:	e707      	b.n	8001314 <__udivmoddi4+0xa8>
 8001504:	462f      	mov	r7, r5
 8001506:	e6e4      	b.n	80012d2 <__udivmoddi4+0x66>
 8001508:	4618      	mov	r0, r3
 800150a:	e6f9      	b.n	8001300 <__udivmoddi4+0x94>
 800150c:	454b      	cmp	r3, r9
 800150e:	d2a9      	bcs.n	8001464 <__udivmoddi4+0x1f8>
 8001510:	ebb9 0802 	subs.w	r8, r9, r2
 8001514:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001518:	3801      	subs	r0, #1
 800151a:	e7a3      	b.n	8001464 <__udivmoddi4+0x1f8>
 800151c:	4643      	mov	r3, r8
 800151e:	e7ea      	b.n	80014f6 <__udivmoddi4+0x28a>
 8001520:	4628      	mov	r0, r5
 8001522:	e794      	b.n	800144e <__udivmoddi4+0x1e2>
 8001524:	4641      	mov	r1, r8
 8001526:	e7d1      	b.n	80014cc <__udivmoddi4+0x260>
 8001528:	46d0      	mov	r8, sl
 800152a:	e77b      	b.n	8001424 <__udivmoddi4+0x1b8>
 800152c:	4464      	add	r4, ip
 800152e:	3802      	subs	r0, #2
 8001530:	e747      	b.n	80013c2 <__udivmoddi4+0x156>
 8001532:	3b02      	subs	r3, #2
 8001534:	4465      	add	r5, ip
 8001536:	e72f      	b.n	8001398 <__udivmoddi4+0x12c>
 8001538:	4608      	mov	r0, r1
 800153a:	e706      	b.n	800134a <__udivmoddi4+0xde>
 800153c:	4631      	mov	r1, r6
 800153e:	e6e9      	b.n	8001314 <__udivmoddi4+0xa8>

08001540 <__aeabi_idiv0>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001544:	2300      	movs	r3, #0
{
 8001546:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001548:	4c40      	ldr	r4, [pc, #256]	; (800164c <MX_ADC_Init+0x108>)
{
 800154a:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001550:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001554:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001558:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800155c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001564:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800156e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_ADC_Init+0x10c>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001572:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001574:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800157c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800157e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001582:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001584:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001586:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001588:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800158c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800158e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001592:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001594:	f006 fd6c 	bl	8008070 <HAL_ADC_Init>
 8001598:	b108      	cbz	r0, 800159e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <MX_ADC_Init+0x58>
  AnalogWDGConfig.HighThreshold = 4095;
 800159e:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015a2:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015a4:	2302      	movs	r3, #2
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <MX_ADC_Init+0x110>)
  AnalogWDGConfig.LowThreshold = 0;
 80015a8:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80015b2:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015b6:	f007 f861 	bl	800867c <HAL_ADC_AnalogWDGConfig>
 80015ba:	b108      	cbz	r0, 80015c0 <MX_ADC_Init+0x7c>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <MX_ADC_Init+0x7a>
  sConfig.Channel = ADC_CHANNEL_0;
 80015c0:	2200      	movs	r2, #0
 80015c2:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c4:	4669      	mov	r1, sp
 80015c6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80015cc:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ce:	f006 ff89 	bl	80084e4 <HAL_ADC_ConfigChannel>
 80015d2:	b108      	cbz	r0, 80015d8 <MX_ADC_Init+0x94>
 80015d4:	b672      	cpsid	i
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_1;
 80015d8:	2201      	movs	r2, #1
 80015da:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015dc:	4669      	mov	r1, sp
 80015de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80015e0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e4:	f006 ff7e 	bl	80084e4 <HAL_ADC_ConfigChannel>
 80015e8:	b108      	cbz	r0, 80015ee <MX_ADC_Init+0xaa>
 80015ea:	b672      	cpsid	i
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_2;
 80015ee:	2202      	movs	r2, #2
 80015f0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015fa:	f006 ff73 	bl	80084e4 <HAL_ADC_ConfigChannel>
 80015fe:	b108      	cbz	r0, 8001604 <MX_ADC_Init+0xc0>
 8001600:	b672      	cpsid	i
  while (1)
 8001602:	e7fe      	b.n	8001602 <MX_ADC_Init+0xbe>
  sConfig.Channel = ADC_CHANNEL_3;
 8001604:	2203      	movs	r2, #3
 8001606:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001608:	4669      	mov	r1, sp
 800160a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800160c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001610:	f006 ff68 	bl	80084e4 <HAL_ADC_ConfigChannel>
 8001614:	b108      	cbz	r0, 800161a <MX_ADC_Init+0xd6>
 8001616:	b672      	cpsid	i
  while (1)
 8001618:	e7fe      	b.n	8001618 <MX_ADC_Init+0xd4>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800161a:	2211      	movs	r2, #17
 800161c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161e:	4669      	mov	r1, sp
 8001620:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001622:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001626:	f006 ff5d 	bl	80084e4 <HAL_ADC_ConfigChannel>
 800162a:	b108      	cbz	r0, 8001630 <MX_ADC_Init+0xec>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <MX_ADC_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001630:	2210      	movs	r2, #16
 8001632:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001634:	4669      	mov	r1, sp
 8001636:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001638:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800163c:	f006 ff52 	bl	80084e4 <HAL_ADC_ConfigChannel>
 8001640:	b108      	cbz	r0, 8001646 <MX_ADC_Init+0x102>
 8001642:	b672      	cpsid	i
  while (1)
 8001644:	e7fe      	b.n	8001644 <MX_ADC_Init+0x100>
}
 8001646:	b00a      	add	sp, #40	; 0x28
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	20000404 	.word	0x20000404
 8001650:	40012400 	.word	0x40012400
 8001654:	00800200 	.word	0x00800200

08001658 <update_keypad.part.0>:
	else if(num == '.'){
 8001658:	282e      	cmp	r0, #46	; 0x2e
void update_keypad(char num){
 800165a:	b410      	push	{r4}
	else if(num == '.'){
 800165c:	d00f      	beq.n	800167e <update_keypad.part.0+0x26>
	else if(num >= '0' && num <= '9'){
 800165e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8001662:	2b09      	cmp	r3, #9
 8001664:	d809      	bhi.n	800167a <update_keypad.part.0+0x22>
		if(kpenum == V1 || kpenum == V2){
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <update_keypad.part.0+0x1b4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 800166e:	2901      	cmp	r1, #1
 8001670:	d03d      	beq.n	80016ee <update_keypad.part.0+0x96>
		else if(kpenum == A1 || kpenum == A2){
 8001672:	2b02      	cmp	r3, #2
 8001674:	d017      	beq.n	80016a6 <update_keypad.part.0+0x4e>
 8001676:	2b04      	cmp	r3, #4
 8001678:	d015      	beq.n	80016a6 <update_keypad.part.0+0x4e>
}
 800167a:	bc10      	pop	{r4}
 800167c:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800167e:	4a64      	ldr	r2, [pc, #400]	; (8001810 <update_keypad.part.0+0x1b8>)
 8001680:	f992 3000 	ldrsb.w	r3, [r2]
 8001684:	2b01      	cmp	r3, #1
 8001686:	ddf8      	ble.n	800167a <update_keypad.part.0+0x22>
 8001688:	4962      	ldr	r1, [pc, #392]	; (8001814 <update_keypad.part.0+0x1bc>)
 800168a:	780c      	ldrb	r4, [r1, #0]
 800168c:	2c00      	cmp	r4, #0
 800168e:	d1f4      	bne.n	800167a <update_keypad.part.0+0x22>
			keypaditerator--;
 8001690:	3b01      	subs	r3, #1
 8001692:	7013      	strb	r3, [r2, #0]
			keypaddecimal = 1;
 8001694:	2301      	movs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8001696:	4c60      	ldr	r4, [pc, #384]	; (8001818 <update_keypad.part.0+0x1c0>)
			keypaddecimal = 1;
 8001698:	700b      	strb	r3, [r1, #0]
				keypadarr[i-1] = keypadarr[i];
 800169a:	f8d4 2001 	ldr.w	r2, [r4, #1]
			keypadarr[keypadlength-1] = num;
 800169e:	7120      	strb	r0, [r4, #4]
				keypadarr[i-1] = keypadarr[i];
 80016a0:	6022      	str	r2, [r4, #0]
}
 80016a2:	bc10      	pop	{r4}
 80016a4:	4770      	bx	lr
			if(keypaditerator > 3){
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016a8:	f992 3000 	ldrsb.w	r3, [r2]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	dc15      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016b0:	d068      	beq.n	8001784 <update_keypad.part.0+0x12c>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d076      	beq.n	80017a4 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d07f      	beq.n	80017ba <update_keypad.part.0+0x162>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1dd      	bne.n	800167a <update_keypad.part.0+0x22>
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <update_keypad.part.0+0x1c0>)
 80016c0:	7899      	ldrb	r1, [r3, #2]
 80016c2:	292e      	cmp	r1, #46	; 0x2e
 80016c4:	d1d9      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016c6:	785c      	ldrb	r4, [r3, #1]
 80016c8:	7059      	strb	r1, [r3, #1]
 80016ca:	78d9      	ldrb	r1, [r3, #3]
 80016cc:	701c      	strb	r4, [r3, #0]
 80016ce:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80016d0:	21ff      	movs	r1, #255	; 0xff
					keypadarr[i-1] = keypadarr[i];
 80016d2:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 80016d4:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 80016d6:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 80016d8:	70dc      	strb	r4, [r3, #3]
}
 80016da:	e7ce      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016dc:	494e      	ldr	r1, [pc, #312]	; (8001818 <update_keypad.part.0+0x1c0>)
				keypaditerator--;
 80016de:	3b01      	subs	r3, #1
					keypadarr[i-1] = keypadarr[i];
 80016e0:	f8d1 4001 	ldr.w	r4, [r1, #1]
				keypaditerator--;
 80016e4:	7013      	strb	r3, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80016e6:	600c      	str	r4, [r1, #0]
				keypadarr[keypadlength-1] = num;
 80016e8:	7108      	strb	r0, [r1, #4]
}
 80016ea:	bc10      	pop	{r4}
 80016ec:	4770      	bx	lr
			if(keypaditerator > 2){
 80016ee:	4a48      	ldr	r2, [pc, #288]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016f0:	f992 3000 	ldrsb.w	r3, [r2]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dcf1      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016f8:	d023      	beq.n	8001742 <update_keypad.part.0+0xea>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d010      	beq.n	8001720 <update_keypad.part.0+0xc8>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1bb      	bne.n	800167a <update_keypad.part.0+0x22>
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001704:	78d9      	ldrb	r1, [r3, #3]
 8001706:	292e      	cmp	r1, #46	; 0x2e
 8001708:	d1b7      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800170a:	785c      	ldrb	r4, [r3, #1]
 800170c:	701c      	strb	r4, [r3, #0]
 800170e:	789c      	ldrb	r4, [r3, #2]
 8001710:	7099      	strb	r1, [r3, #2]
 8001712:	7919      	ldrb	r1, [r3, #4]
 8001714:	705c      	strb	r4, [r3, #1]
 8001716:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 8001718:	21ff      	movs	r1, #255	; 0xff
				keypadarr[keypadlength-1] = num;
 800171a:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 800171c:	7011      	strb	r1, [r2, #0]
 800171e:	e7ac      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001722:	78d9      	ldrb	r1, [r3, #3]
 8001724:	292e      	cmp	r1, #46	; 0x2e
 8001726:	d05a      	beq.n	80017de <update_keypad.part.0+0x186>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001728:	791c      	ldrb	r4, [r3, #4]
 800172a:	2c2e      	cmp	r4, #46	; 0x2e
 800172c:	d1a5      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800172e:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001730:	2400      	movs	r4, #0
				keypadarr[keypadlength-1] = num;
 8001732:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001734:	7858      	ldrb	r0, [r3, #1]
				keypaditerator--;
 8001736:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001738:	7018      	strb	r0, [r3, #0]
 800173a:	7898      	ldrb	r0, [r3, #2]
 800173c:	7099      	strb	r1, [r3, #2]
 800173e:	7058      	strb	r0, [r3, #1]
				keypaditerator--;
 8001740:	e79b      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001744:	78dc      	ldrb	r4, [r3, #3]
 8001746:	2c2e      	cmp	r4, #46	; 0x2e
 8001748:	d00e      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800174a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800174e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8001752:	d192      	bne.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001754:	7011      	strb	r1, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001756:	7859      	ldrb	r1, [r3, #1]
 8001758:	789a      	ldrb	r2, [r3, #2]
 800175a:	f883 c003 	strb.w	ip, [r3, #3]
				keypadarr[keypadlength-1] = num;
 800175e:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001760:	7019      	strb	r1, [r3, #0]
 8001762:	705a      	strb	r2, [r3, #1]
 8001764:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 8001766:	e788      	b.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001768:	2401      	movs	r4, #1
					keypadarr[i-1] = keypadarr[i];
 800176a:	212e      	movs	r1, #46	; 0x2e
 800176c:	f893 c001 	ldrb.w	ip, [r3, #1]
				keypaditerator--;
 8001770:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001772:	789c      	ldrb	r4, [r3, #2]
 8001774:	791a      	ldrb	r2, [r3, #4]
 8001776:	f883 c000 	strb.w	ip, [r3]
 800177a:	705c      	strb	r4, [r3, #1]
 800177c:	7099      	strb	r1, [r3, #2]
 800177e:	70da      	strb	r2, [r3, #3]
				keypadarr[keypadlength-1] = num;
 8001780:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001782:	e77a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001786:	7919      	ldrb	r1, [r3, #4]
 8001788:	292e      	cmp	r1, #46	; 0x2e
 800178a:	f47f af76 	bne.w	800167a <update_keypad.part.0+0x22>
				keypadarr[keypadlength-1] = num;
 800178e:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001790:	2002      	movs	r0, #2
					keypadarr[i-1] = keypadarr[i];
 8001792:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 8001794:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001796:	701c      	strb	r4, [r3, #0]
 8001798:	789c      	ldrb	r4, [r3, #2]
 800179a:	705c      	strb	r4, [r3, #1]
 800179c:	78dc      	ldrb	r4, [r3, #3]
 800179e:	70d9      	strb	r1, [r3, #3]
 80017a0:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 80017a2:	e76a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017a6:	78d9      	ldrb	r1, [r3, #3]
 80017a8:	292e      	cmp	r1, #46	; 0x2e
 80017aa:	d0dd      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80017ac:	791c      	ldrb	r4, [r3, #4]
 80017ae:	2c2e      	cmp	r4, #46	; 0x2e
 80017b0:	f47f af63 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017b4:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 80017b6:	2401      	movs	r4, #1
 80017b8:	e7bb      	b.n	8001732 <update_keypad.part.0+0xda>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017bc:	7899      	ldrb	r1, [r3, #2]
 80017be:	292e      	cmp	r1, #46	; 0x2e
 80017c0:	d018      	beq.n	80017f4 <update_keypad.part.0+0x19c>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80017c2:	78dc      	ldrb	r4, [r3, #3]
 80017c4:	2c2e      	cmp	r4, #46	; 0x2e
 80017c6:	f47f af58 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017ca:	709c      	strb	r4, [r3, #2]
 80017cc:	791c      	ldrb	r4, [r3, #4]
				keypadarr[keypadlength-1] = num;
 80017ce:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017d0:	2000      	movs	r0, #0
					keypadarr[i-1] = keypadarr[i];
 80017d2:	70dc      	strb	r4, [r3, #3]
 80017d4:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 80017d6:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80017d8:	7059      	strb	r1, [r3, #1]
 80017da:	701c      	strb	r4, [r3, #0]
				keypaditerator--;
 80017dc:	e74d      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017de:	785c      	ldrb	r4, [r3, #1]
 80017e0:	701c      	strb	r4, [r3, #0]
 80017e2:	789c      	ldrb	r4, [r3, #2]
 80017e4:	7099      	strb	r1, [r3, #2]
 80017e6:	7919      	ldrb	r1, [r3, #4]
 80017e8:	705c      	strb	r4, [r3, #1]
 80017ea:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 80017ec:	2100      	movs	r1, #0
				keypadarr[keypadlength-1] = num;
 80017ee:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017f0:	7011      	strb	r1, [r2, #0]
 80017f2:	e742      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017f4:	785c      	ldrb	r4, [r3, #1]
 80017f6:	7059      	strb	r1, [r3, #1]
 80017f8:	78d9      	ldrb	r1, [r3, #3]
 80017fa:	701c      	strb	r4, [r3, #0]
 80017fc:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80017fe:	2100      	movs	r1, #0
					keypadarr[i-1] = keypadarr[i];
 8001800:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 8001802:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 8001804:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001806:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001808:	e737      	b.n	800167a <update_keypad.part.0+0x22>
 800180a:	bf00      	nop
 800180c:	20000759 	.word	0x20000759
 8001810:	20000015 	.word	0x20000015
 8001814:	20000758 	.word	0x20000758
 8001818:	20000010 	.word	0x20000010

0800181c <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <update_keypad.constprop.0+0x40>)
 800181e:	f992 3000 	ldrsb.w	r3, [r2]
 8001822:	2b03      	cmp	r3, #3
 8001824:	dc13      	bgt.n	800184e <update_keypad.constprop.0+0x32>
			if(keypadarr[4] == '.'){
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <update_keypad.constprop.0+0x44>)
 8001828:	7908      	ldrb	r0, [r1, #4]
 800182a:	282e      	cmp	r0, #46	; 0x2e
 800182c:	d010      	beq.n	8001850 <update_keypad.constprop.0+0x34>
			keypadarr[0] = num;
 800182e:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8001830:	f891 c003 	ldrb.w	ip, [r1, #3]
			keypaditerator++;
 8001834:	3301      	adds	r3, #1
 8001836:	7013      	strb	r3, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8001838:	f881 c004 	strb.w	ip, [r1, #4]
 800183c:	784a      	ldrb	r2, [r1, #1]
 800183e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8001842:	780b      	ldrb	r3, [r1, #0]
 8001844:	f881 c003 	strb.w	ip, [r1, #3]
 8001848:	708a      	strb	r2, [r1, #2]
 800184a:	704b      	strb	r3, [r1, #1]
			keypadarr[0] = num;
 800184c:	7008      	strb	r0, [r1, #0]
}
 800184e:	4770      	bx	lr
				keypaddecimal = 0;
 8001850:	f04f 0c00 	mov.w	ip, #0
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <update_keypad.constprop.0+0x48>)
 8001856:	f880 c000 	strb.w	ip, [r0]
 800185a:	e7e8      	b.n	800182e <update_keypad.constprop.0+0x12>
 800185c:	20000015 	.word	0x20000015
 8001860:	20000010 	.word	0x20000010
 8001864:	20000758 	.word	0x20000758

08001868 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001868:	2300      	movs	r3, #0
{
 800186a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001872:	2403      	movs	r4, #3
 8001874:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001876:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001880:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001884:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001888:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800188e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001892:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001896:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800189a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018ba:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f008 fdca 	bl	800a45c <HAL_RCC_OscConfig>
 80018c8:	b108      	cbz	r0, 80018ce <SystemClock_Config+0x66>
 80018ca:	b672      	cpsid	i
  while (1)
 80018cc:	e7fe      	b.n	80018cc <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ce:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	240f      	movs	r4, #15
 80018d2:	2503      	movs	r5, #3
 80018d4:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018da:	4631      	mov	r1, r6
 80018dc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	e9cd 4500 	strd	r4, r5, [sp]
 80018e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e6:	f009 f819 	bl	800a91c <HAL_RCC_ClockConfig>
 80018ea:	b108      	cbz	r0, 80018f0 <SystemClock_Config+0x88>
 80018ec:	b672      	cpsid	i
  while (1)
 80018ee:	e7fe      	b.n	80018ee <SystemClock_Config+0x86>
}
 80018f0:	b014      	add	sp, #80	; 0x50
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <EXTI1_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80018fc:	2207      	movs	r2, #7
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <EXTI1_IRQHandler+0x68>)
{
 8001900:	b530      	push	{r4, r5, lr}
	int8_t tempiter = headiter;
 8001902:	4d19      	ldr	r5, [pc, #100]	; (8001968 <EXTI1_IRQHandler+0x6c>)
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001904:	615a      	str	r2, [r3, #20]
	int8_t tempiter = headiter;
 8001906:	f995 c000 	ldrsb.w	ip, [r5]
	if(tempiter != tailiter){
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <EXTI1_IRQHandler+0x70>)
	tempiter++;
 800190c:	f10c 0e01 	add.w	lr, ip, #1
 8001910:	fa4f fe8e 	sxtb.w	lr, lr
	if(tempiter >= CIRCSIZE){
 8001914:	4596      	cmp	lr, r2
	if(tempiter != tailiter){
 8001916:	f993 3000 	ldrsb.w	r3, [r3]
	if(tempiter >= CIRCSIZE){
 800191a:	dc06      	bgt.n	800192a <EXTI1_IRQHandler+0x2e>
	if(tempiter != tailiter){
 800191c:	4573      	cmp	r3, lr
 800191e:	d01a      	beq.n	8001956 <EXTI1_IRQHandler+0x5a>
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001922:	4c14      	ldr	r4, [pc, #80]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001924:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001928:	e006      	b.n	8001938 <EXTI1_IRQHandler+0x3c>
	if(tempiter != tailiter){
 800192a:	b1a3      	cbz	r3, 8001956 <EXTI1_IRQHandler+0x5a>
			headiter = 0;
 800192c:	f04f 0e00 	mov.w	lr, #0
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001932:	4c10      	ldr	r4, [pc, #64]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001934:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800194a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		headiter++;
 8001952:	f885 e000 	strb.w	lr, [r5]
	memset (usbbuffer, '\0', 64); // clear the buffer
 8001956:	2240      	movs	r2, #64	; 0x40
}
 8001958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memset (usbbuffer, '\0', 64); // clear the buffer
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001960:	f00b bd3e 	b.w	800d3e0 <memset>
 8001964:	40010400 	.word	0x40010400
 8001968:	2000000c 	.word	0x2000000c
 800196c:	200009b4 	.word	0x200009b4
 8001970:	20000764 	.word	0x20000764
 8001974:	20000a38 	.word	0x20000a38

08001978 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001978:	b538      	push	{r3, r4, r5, lr}
	if(val == 0.0){
 800197a:	2100      	movs	r1, #0
void update_ADC_watchdog(float val){
 800197c:	4604      	mov	r4, r0
	if(val == 0.0){
 800197e:	f7ff fbad 	bl	80010dc <__aeabi_fcmpeq>
 8001982:	bb28      	cbnz	r0, 80019d0 <update_ADC_watchdog+0x58>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001984:	4620      	mov	r0, r4
 8001986:	491c      	ldr	r1, [pc, #112]	; (80019f8 <update_ADC_watchdog+0x80>)
 8001988:	f7ff fa14 	bl	8000db4 <__aeabi_fmul>
 800198c:	491b      	ldr	r1, [pc, #108]	; (80019fc <update_ADC_watchdog+0x84>)
 800198e:	f7ff fa11 	bl	8000db4 <__aeabi_fmul>
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <update_ADC_watchdog+0x88>)
 8001994:	f7ff fa0e 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <update_ADC_watchdog+0x8c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800199a:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800199c:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800199e:	8818      	ldrh	r0, [r3, #0]
 80019a0:	f7ff f9b0 	bl	8000d04 <__aeabi_ui2f>
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <update_ADC_watchdog+0x90>)
 80019a6:	4605      	mov	r5, r0
 80019a8:	8918      	ldrh	r0, [r3, #8]
 80019aa:	f7ff f9ab 	bl	8000d04 <__aeabi_ui2f>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fab3 	bl	8000f1c <__aeabi_fdiv>
 80019b6:	4915      	ldr	r1, [pc, #84]	; (8001a0c <update_ADC_watchdog+0x94>)
 80019b8:	f7ff f9fc 	bl	8000db4 <__aeabi_fmul>
 80019bc:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff faac 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <update_ADC_watchdog+0x88>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019c6:	4605      	mov	r5, r0
	else if(amp >= 4095.0){
 80019c8:	f7ff fba6 	bl	8001118 <__aeabi_fcmpge>
 80019cc:	4604      	mov	r4, r0
 80019ce:	b120      	cbz	r0, 80019da <update_ADC_watchdog+0x62>
		ADC1->HTR = 4095;
 80019d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
	else if(amp < 0.0){
 80019da:	4628      	mov	r0, r5
 80019dc:	2100      	movs	r1, #0
 80019de:	f7ff fb87 	bl	80010f0 <__aeabi_fcmplt>
 80019e2:	b928      	cbnz	r0, 80019f0 <update_ADC_watchdog+0x78>
		ADC1->HTR = amp;
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff fbd1 	bl	800118c <__aeabi_f2uiz>
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019ec:	6298      	str	r0, [r3, #40]	; 0x28
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
		ADC1->HTR = 0;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019f2:	629c      	str	r4, [r3, #40]	; 0x28
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop
 80019f8:	3e19999a 	.word	0x3e19999a
 80019fc:	41a00000 	.word	0x41a00000
 8001a00:	457ff000 	.word	0x457ff000
 8001a04:	20000020 	.word	0x20000020
 8001a08:	200003dc 	.word	0x200003dc
 8001a0c:	40400000 	.word	0x40400000
 8001a10:	40012400 	.word	0x40012400

08001a14 <lcd_createChar>:
{
 8001a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a18:	2564      	movs	r5, #100	; 0x64
 8001a1a:	482d      	ldr	r0, [pc, #180]	; (8001ad0 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a1c:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a1e:	4607      	mov	r7, r0
{
 8001a20:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a22:	2304      	movs	r3, #4
 8001a24:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a26:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a28:	9500      	str	r5, [sp, #0]
 8001a2a:	214e      	movs	r1, #78	; 0x4e
 8001a2c:	f007 fc22 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f006 fb0b 	bl	800804c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a38:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a3a:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	2304      	movs	r3, #4
 8001a40:	4c26      	ldr	r4, [pc, #152]	; (8001adc <lcd_createChar+0xc8>)
 8001a42:	9500      	str	r5, [sp, #0]
 8001a44:	aa03      	add	r2, sp, #12
 8001a46:	f007 fc15 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001a50:	f006 fafc 	bl	800804c <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a54:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001a56:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001a5c:	fa02 f103 	lsl.w	r1, r2, r3
 8001a60:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001a62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a66:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a6a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a6e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a72:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a76:	aa03      	add	r2, sp, #12
 8001a78:	214e      	movs	r1, #78	; 0x4e
 8001a7a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a7c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a80:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a84:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a88:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	f007 fbf2 	bl	8009274 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f006 fadb 	bl	800804c <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 8001a96:	42a6      	cmp	r6, r4
 8001a98:	d1dc      	bne.n	8001a54 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a9a:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a9c:	aa03      	add	r2, sp, #12
 8001a9e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001aa0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa2:	9500      	str	r5, [sp, #0]
 8001aa4:	214e      	movs	r1, #78	; 0x4e
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <lcd_createChar+0xbc>)
 8001aa8:	f007 fbe4 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f006 facd 	bl	800804c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab8:	214e      	movs	r1, #78	; 0x4e
 8001aba:	aa03      	add	r2, sp, #12
 8001abc:	9500      	str	r5, [sp, #0]
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <lcd_createChar+0xbc>)
 8001ac0:	f007 fbd8 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
}
 8001ac6:	b005      	add	sp, #20
 8001ac8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8001acc:	f006 babe 	b.w	800804c <HAL_Delay>
 8001ad0:	20000540 	.word	0x20000540
 8001ad4:	080c484c 	.word	0x080c484c
 8001ad8:	080c080c 	.word	0x080c080c
 8001adc:	08011a3b 	.word	0x08011a3b
 8001ae0:	282c080c 	.word	0x282c080c

08001ae4 <lcd_init>:
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
{
 8001ae8:	b085      	sub	sp, #20
	HAL_Delay(100);
 8001aea:	f006 faaf 	bl	800804c <HAL_Delay>
 8001aee:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001af2:	4f2e      	ldr	r7, [pc, #184]	; (8001bac <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af4:	4e2e      	ldr	r6, [pc, #184]	; (8001bb0 <lcd_init+0xcc>)
 8001af6:	2304      	movs	r3, #4
 8001af8:	214e      	movs	r1, #78	; 0x4e
 8001afa:	aa03      	add	r2, sp, #12
 8001afc:	4630      	mov	r0, r6
 8001afe:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b00:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b02:	f007 fbb7 	bl	8009274 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 8001b06:	202d      	movs	r0, #45	; 0x2d
 8001b08:	f006 faa0 	bl	800804c <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001b12:	d1f0      	bne.n	8001af6 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001b14:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b18:	2304      	movs	r3, #4
 8001b1a:	aa03      	add	r2, sp, #12
 8001b1c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b20:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <lcd_init+0xcc>)
 8001b22:	214e      	movs	r1, #78	; 0x4e
 8001b24:	f007 fba6 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f006 fa8f 	bl	800804c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b30:	2304      	movs	r3, #4
 8001b32:	214e      	movs	r1, #78	; 0x4e
 8001b34:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b36:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b38:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <lcd_init+0xcc>)
 8001b3a:	aa03      	add	r2, sp, #12
 8001b3c:	f007 fb9a 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f006 fa83 	bl	800804c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b48:	2304      	movs	r3, #4
 8001b4a:	214e      	movs	r1, #78	; 0x4e
 8001b4c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b4e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b50:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <lcd_init+0xcc>)
 8001b52:	aa03      	add	r2, sp, #12
 8001b54:	f007 fb8e 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f006 fa77 	bl	800804c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b60:	2304      	movs	r3, #4
 8001b62:	214e      	movs	r1, #78	; 0x4e
 8001b64:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b66:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <lcd_init+0xcc>)
 8001b6a:	aa03      	add	r2, sp, #12
 8001b6c:	f007 fb82 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f006 fa6b 	bl	800804c <HAL_Delay>
	lcd_createChar();
 8001b76:	f7ff ff4d 	bl	8001a14 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b7c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b80:	2304      	movs	r3, #4
 8001b82:	214e      	movs	r1, #78	; 0x4e
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <lcd_init+0xcc>)
 8001b86:	aa03      	add	r2, sp, #12
 8001b88:	f007 fb74 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b8e:	4e0e      	ldr	r6, [pc, #56]	; (8001bc8 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b90:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <lcd_init+0xcc>)
 8001b92:	2304      	movs	r3, #4
 8001b94:	214e      	movs	r1, #78	; 0x4e
 8001b96:	4628      	mov	r0, r5
 8001b98:	aa03      	add	r2, sp, #12
 8001b9a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b9c:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b9e:	f007 fb69 	bl	8009274 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 8001ba2:	3c01      	subs	r4, #1
 8001ba4:	d1f5      	bne.n	8001b92 <lcd_init+0xae>
}
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	383c080c 	.word	0x383c080c
 8001bb0:	20000540 	.word	0x20000540
 8001bb4:	282c080c 	.word	0x282c080c
 8001bb8:	888c282c 	.word	0x888c282c
 8001bbc:	c8cc080c 	.word	0xc8cc080c
 8001bc0:	080c888c 	.word	0x080c888c
 8001bc4:	080c080c 	.word	0x080c080c
 8001bc8:	090d292d 	.word	0x090d292d

08001bcc <ourInit>:
void ourInit(void){
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd0:	2201      	movs	r2, #1
void ourInit(void){
 8001bd2:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	486c      	ldr	r0, [pc, #432]	; (8001d88 <ourInit+0x1bc>)
 8001bd8:	f007 fa6a 	bl	80090b0 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001bdc:	486b      	ldr	r0, [pc, #428]	; (8001d8c <ourInit+0x1c0>)
 8001bde:	f006 fb17 	bl	8008210 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001be2:	486b      	ldr	r0, [pc, #428]	; (8001d90 <ourInit+0x1c4>)
 8001be4:	f006 ff66 	bl	8008ab4 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <ourInit+0x1c8>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bec:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bee:	69d9      	ldr	r1, [r3, #28]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf0:	2564      	movs	r5, #100	; 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001bf6:	61d9      	str	r1, [r3, #28]
 8001bf8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfa:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c00:	9307      	str	r3, [sp, #28]
 8001c02:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c04:	f006 fe20 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f006 fe5b 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	200e      	movs	r0, #14
 8001c12:	4611      	mov	r1, r2
 8001c14:	f006 fe18 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c18:	200e      	movs	r0, #14
 8001c1a:	f006 fe53 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	200f      	movs	r0, #15
 8001c22:	4611      	mov	r1, r2
 8001c24:	f006 fe10 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f006 fe4b 	bl	80088c4 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001c2e:	f7ff fc89 	bl	8001544 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001c32:	2206      	movs	r2, #6
 8001c34:	4958      	ldr	r1, [pc, #352]	; (8001d98 <ourInit+0x1cc>)
 8001c36:	4855      	ldr	r0, [pc, #340]	; (8001d8c <ourInit+0x1c0>)
 8001c38:	f006 fd94 	bl	8008764 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4857      	ldr	r0, [pc, #348]	; (8001d9c <ourInit+0x1d0>)
 8001c40:	f006 fe90 	bl	8008964 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c44:	2110      	movs	r1, #16
 8001c46:	4855      	ldr	r0, [pc, #340]	; (8001d9c <ourInit+0x1d0>)
 8001c48:	f006 fe8c 	bl	8008964 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4853      	ldr	r0, [pc, #332]	; (8001d9c <ourInit+0x1d0>)
 8001c50:	461a      	mov	r2, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	f006 feb6 	bl	80089c4 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	484f      	ldr	r0, [pc, #316]	; (8001d9c <ourInit+0x1d0>)
 8001c60:	f006 feb0 	bl	80089c4 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <ourInit+0x1d4>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c68:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001c6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c6e:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c70:	484c      	ldr	r0, [pc, #304]	; (8001da4 <ourInit+0x1d8>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c72:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c74:	f007 f834 	bl	8008ce0 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2007      	movs	r0, #7
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	f006 fde3 	bl	8008848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c82:	2007      	movs	r0, #7
 8001c84:	f006 fe1e 	bl	80088c4 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c8e:	4846      	ldr	r0, [pc, #280]	; (8001da8 <ourInit+0x1dc>)
 8001c90:	f007 fa0e 	bl	80090b0 <HAL_GPIO_WritePin>
	memset (usbbuffer, '\0', 64);  // clear the buffer
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	2100      	movs	r1, #0
 8001c98:	4844      	ldr	r0, [pc, #272]	; (8001dac <ourInit+0x1e0>)
 8001c9a:	f00b fba1 	bl	800d3e0 <memset>
	memset (MSG, '\0', 64);  // clear the buffer
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4843      	ldr	r0, [pc, #268]	; (8001db0 <ourInit+0x1e4>)
 8001ca4:	f00b fb9c 	bl	800d3e0 <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	2100      	movs	r1, #0
 8001cac:	4841      	ldr	r0, [pc, #260]	; (8001db4 <ourInit+0x1e8>)
 8001cae:	f00b fb97 	bl	800d3e0 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4840      	ldr	r0, [pc, #256]	; (8001db8 <ourInit+0x1ec>)
 8001cb8:	f00b fb92 	bl	800d3e0 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	483e      	ldr	r0, [pc, #248]	; (8001dbc <ourInit+0x1f0>)
 8001cc2:	f00b fb8d 	bl	800d3e0 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	493c      	ldr	r1, [pc, #240]	; (8001dbc <ourInit+0x1f0>)
 8001cca:	483d      	ldr	r0, [pc, #244]	; (8001dc0 <ourInit+0x1f4>)
 8001ccc:	f009 fa28 	bl	800b120 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <ourInit+0x1f8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd2:	4e3d      	ldr	r6, [pc, #244]	; (8001dc8 <ourInit+0x1fc>)
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd4:	681f      	ldr	r7, [r3, #0]
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <ourInit+0x200>)
 8001cd8:	4c3d      	ldr	r4, [pc, #244]	; (8001dd0 <ourInit+0x204>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <ourInit+0x208>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	9304      	str	r3, [sp, #16]
 8001ce4:	f7fe fbb8 	bl	8000458 <__aeabi_f2d>
 8001ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cec:	4638      	mov	r0, r7
 8001cee:	f7fe fbb3 	bl	8000458 <__aeabi_f2d>
 8001cf2:	4a39      	ldr	r2, [pc, #228]	; (8001dd8 <ourInit+0x20c>)
 8001cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <ourInit+0x1e8>)
 8001cfc:	f00b ffd8 	bl	800dcb0 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	492c      	ldr	r1, [pc, #176]	; (8001db4 <ourInit+0x1e8>)
 8001d04:	482e      	ldr	r0, [pc, #184]	; (8001dc0 <ourInit+0x1f4>)
 8001d06:	f009 f9cf 	bl	800b0a8 <HAL_UART_Transmit_DMA>
	lcd_init();
 8001d0a:	f7ff feeb 	bl	8001ae4 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <ourInit+0x210>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d10:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d12:	9308      	str	r3, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d14:	4630      	mov	r0, r6
 8001d16:	2304      	movs	r3, #4
 8001d18:	9500      	str	r5, [sp, #0]
 8001d1a:	aa08      	add	r2, sp, #32
 8001d1c:	f007 faaa 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d20:	2334      	movs	r3, #52	; 0x34
	data_l = ((data<<4)&0xf0);
 8001d22:	011a      	lsls	r2, r3, #4
 8001d24:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d2a:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d2e:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d32:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d36:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	214e      	movs	r1, #78	; 0x4e
 8001d3e:	4630      	mov	r0, r6
 8001d40:	aa08      	add	r2, sp, #32
 8001d42:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d44:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d48:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d4c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d50:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d54:	f007 fa8e 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e0      	bne.n	8001d22 <ourInit+0x156>
	HAL_TIM_Base_Start_IT(&htim11);
 8001d60:	481f      	ldr	r0, [pc, #124]	; (8001de0 <ourInit+0x214>)
 8001d62:	f008 ff69 	bl	800ac38 <HAL_TIM_Base_Start_IT>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d66:	4c1f      	ldr	r4, [pc, #124]	; (8001de4 <ourInit+0x218>)
 8001d68:	f504 7500 	add.w	r5, r4, #512	; 0x200
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	4620      	mov	r0, r4
 8001d70:	2100      	movs	r1, #0
	for(int i = 0; i < CIRCSIZE; i++){
 8001d72:	4414      	add	r4, r2
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d74:	f00b fb34 	bl	800d3e0 <memset>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d78:	42a5      	cmp	r5, r4
 8001d7a:	d1f7      	bne.n	8001d6c <ourInit+0x1a0>
	HAL_TIM_Base_Start_IT(&htim3);
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <ourInit+0x21c>)
}
 8001d7e:	b00c      	add	sp, #48	; 0x30
 8001d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8001d84:	f008 bf58 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	20000404 	.word	0x20000404
 8001d90:	2000046c 	.word	0x2000046c
 8001d94:	40023800 	.word	0x40023800
 8001d98:	200003d0 	.word	0x200003d0
 8001d9c:	20000458 	.word	0x20000458
 8001da0:	06000001 	.word	0x06000001
 8001da4:	20000538 	.word	0x20000538
 8001da8:	40020800 	.word	0x40020800
 8001dac:	20000a38 	.word	0x20000a38
 8001db0:	20000390 	.word	0x20000390
 8001db4:	200009b8 	.word	0x200009b8
 8001db8:	200009f8 	.word	0x200009f8
 8001dbc:	20000970 	.word	0x20000970
 8001dc0:	20000714 	.word	0x20000714
 8001dc4:	20000a7c 	.word	0x20000a7c
 8001dc8:	20000540 	.word	0x20000540
 8001dcc:	200003e8 	.word	0x200003e8
 8001dd0:	08011780 	.word	0x08011780
 8001dd4:	200003f5 	.word	0x200003f5
 8001dd8:	08011798 	.word	0x08011798
 8001ddc:	080cc8cc 	.word	0x080cc8cc
 8001de0:	200005d4 	.word	0x200005d4
 8001de4:	20000764 	.word	0x20000764
 8001de8:	20000654 	.word	0x20000654
 8001dec:	00000000 	.word	0x00000000

08001df0 <main>:
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	2400      	movs	r4, #0
{
 8001df6:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8001df8:	f006 f906 	bl	8008008 <HAL_Init>
  SystemClock_Config();
 8001dfc:	f7ff fd34 	bl	8001868 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001e08:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	4dae      	ldr	r5, [pc, #696]	; (80020c8 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	9414      	str	r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e12:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	61eb      	str	r3, [r5, #28]
 8001e1a:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e1c:	48ab      	ldr	r0, [pc, #684]	; (80020cc <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	9309      	str	r3, [sp, #36]	; 0x24
 8001e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	4692      	mov	sl, r2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	61eb      	str	r3, [r5, #28]
 8001e30:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e32:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e40:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61eb      	str	r3, [r5, #28]
 8001e48:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001e4a:	4fa1      	ldr	r7, [pc, #644]	; (80020d0 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	69eb      	ldr	r3, [r5, #28]
 8001e54:	4333      	orrs	r3, r6
 8001e56:	61eb      	str	r3, [r5, #28]
 8001e58:	69eb      	ldr	r3, [r5, #28]
 8001e5a:	4033      	ands	r3, r6
 8001e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8001e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e60:	69eb      	ldr	r3, [r5, #28]
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	61eb      	str	r3, [r5, #28]
 8001e68:	69eb      	ldr	r3, [r5, #28]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8001e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e72:	f007 f91d 	bl	80090b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e76:	4622      	mov	r2, r4
 8001e78:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001e7c:	4895      	ldr	r0, [pc, #596]	; (80020d4 <main+0x2e4>)
 8001e7e:	f007 f917 	bl	80090b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e82:	f64f 420f 	movw	r2, #64527	; 0xfc0f
 8001e86:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	4892      	ldr	r0, [pc, #584]	; (80020d4 <main+0x2e4>)
 8001e8a:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e90:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f006 ff8b 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	488c      	ldr	r0, [pc, #560]	; (80020cc <main+0x2dc>)
 8001e9c:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ea2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f006 ff81 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eaa:	f248 1280 	movw	r2, #33152	; 0x8180
 8001eae:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	4886      	ldr	r0, [pc, #536]	; (80020cc <main+0x2dc>)
 8001eb2:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eb8:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f006 ff77 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ebe:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001ec2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	4883      	ldr	r0, [pc, #524]	; (80020d4 <main+0x2e4>)
 8001ec6:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ec8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ecc:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f006 ff6c 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8001eda:	487f      	ldr	r0, [pc, #508]	; (80020d8 <main+0x2e8>)
 8001edc:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8001ede:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f006 ff61 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001eea:	2202      	movs	r2, #2
 8001eec:	2300      	movs	r3, #0
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001eee:	487a      	ldr	r0, [pc, #488]	; (80020d8 <main+0x2e8>)
 8001ef0:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001ef2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef6:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f006 ff57 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_SW_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin
 8001efe:	f647 4204 	movw	r2, #31748	; 0x7c04
 8001f02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	4874      	ldr	r0, [pc, #464]	; (80020d8 <main+0x2e8>)
 8001f08:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_SW_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin
 8001f0a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f006 ff4b 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f16:	f248 3238 	movw	r2, #33592	; 0x8338
 8001f1a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	486e      	ldr	r0, [pc, #440]	; (80020d8 <main+0x2e8>)
 8001f1e:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f24:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f006 ff41 	bl	8008dac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2204      	movs	r2, #4
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	486b      	ldr	r0, [pc, #428]	; (80020dc <main+0x2ec>)
 8001f30:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f36:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f006 ff38 	bl	8008dac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4621      	mov	r1, r4
 8001f40:	2006      	movs	r0, #6
 8001f42:	f006 fc81 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f46:	2006      	movs	r0, #6
 8001f48:	f006 fcbc 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	4621      	mov	r1, r4
 8001f50:	2008      	movs	r0, #8
 8001f52:	f006 fc79 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f56:	2008      	movs	r0, #8
 8001f58:	f006 fcb4 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4621      	mov	r1, r4
 8001f60:	2028      	movs	r0, #40	; 0x28
 8001f62:	f006 fc71 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f66:	2028      	movs	r0, #40	; 0x28
 8001f68:	f006 fcac 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6c:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f6e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f74:	61eb      	str	r3, [r5, #28]
 8001f76:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f78:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f7e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f80:	9308      	str	r3, [sp, #32]
 8001f82:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f84:	f006 fc60 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f88:	200b      	movs	r0, #11
 8001f8a:	f006 fc9b 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4621      	mov	r1, r4
 8001f92:	200e      	movs	r0, #14
 8001f94:	f006 fc58 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f006 fc93 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f006 fc50 	bl	8008848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fa8:	200f      	movs	r0, #15
 8001faa:	f006 fc8b 	bl	80088c4 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001fae:	f7ff fac9 	bl	8001544 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <main+0x2f0>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fb4:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  hdac.Instance = DAC;
 8001fba:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fbc:	f006 fcbc 	bl	8008938 <HAL_DAC_Init>
 8001fc0:	b108      	cbz	r0, 8001fc6 <main+0x1d6>
 8001fc2:	b672      	cpsid	i
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <main+0x1d4>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	a910      	add	r1, sp, #64	; 0x40
 8001fca:	4638      	mov	r0, r7
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fcc:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fd0:	f006 fd0e 	bl	80089f0 <HAL_DAC_ConfigChannel>
 8001fd4:	b108      	cbz	r0, 8001fda <main+0x1ea>
 8001fd6:	b672      	cpsid	i
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <main+0x1e8>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001fda:	2210      	movs	r2, #16
 8001fdc:	4638      	mov	r0, r7
 8001fde:	a910      	add	r1, sp, #64	; 0x40
 8001fe0:	f006 fd06 	bl	80089f0 <HAL_DAC_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b108      	cbz	r0, 8001fec <main+0x1fc>
 8001fe8:	b672      	cpsid	i
  while (1)
 8001fea:	e7fe      	b.n	8001fea <main+0x1fa>
  hi2c1.Instance = I2C1;
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <main+0x2f4>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fee:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001ff0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001ffe:	4c3a      	ldr	r4, [pc, #232]	; (80020e8 <main+0x2f8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <main+0x2fc>)
 8002006:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800200a:	f007 f86b 	bl	80090e4 <HAL_I2C_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	b9b0      	cbnz	r0, 8002040 <main+0x250>
  huart1.Instance = USART1;
 8002012:	4837      	ldr	r0, [pc, #220]	; (80020f0 <main+0x300>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002014:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 800201e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002022:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002028:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202a:	230c      	movs	r3, #12
 800202c:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <main+0x304>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002030:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 8002032:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002034:	f008 ffae 	bl	800af94 <HAL_UART_Init>
 8002038:	4604      	mov	r4, r0
 800203a:	b118      	cbz	r0, 8002044 <main+0x254>
 800203c:	b672      	cpsid	i
  while (1)
 800203e:	e7fe      	b.n	800203e <main+0x24e>
 8002040:	b672      	cpsid	i
 8002042:	e7fe      	b.n	8002042 <main+0x252>
  MX_USB_DEVICE_Init();
 8002044:	f00a feea 	bl	800ce1c <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8002048:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim2.Instance = TIM2;
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 50;
 8002050:	2332      	movs	r3, #50	; 0x32
  htim2.Instance = TIM2;
 8002052:	4d29      	ldr	r5, [pc, #164]	; (80020f8 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002054:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002058:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8002068:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 50;
 800206a:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 800206c:	606f      	str	r7, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206e:	f008 fd93 	bl	800ab98 <HAL_TIM_Base_Init>
 8002072:	b108      	cbz	r0, 8002078 <main+0x288>
 8002074:	b672      	cpsid	i
  while (1)
 8002076:	e7fe      	b.n	8002076 <main+0x286>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002078:	4628      	mov	r0, r5
 800207a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800207e:	f008 fe1d 	bl	800acbc <HAL_TIM_ConfigClockSource>
 8002082:	b108      	cbz	r0, 8002088 <main+0x298>
 8002084:	b672      	cpsid	i
  while (1)
 8002086:	e7fe      	b.n	8002086 <main+0x296>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002088:	4628      	mov	r0, r5
 800208a:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002090:	f008 ff4e 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	b108      	cbz	r0, 800209a <main+0x2aa>
 8002096:	b672      	cpsid	i
  while (1)
 8002098:	e7fe      	b.n	8002098 <main+0x2a8>
  htim3.Init.Period = 500;
 800209a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 800209e:	4c17      	ldr	r4, [pc, #92]	; (80020fc <main+0x30c>)
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80020a6:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020aa:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	e9c4 7001 	strd	r7, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b6:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 80020b8:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 80020ba:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020bc:	f008 fd6c 	bl	800ab98 <HAL_TIM_Base_Init>
 80020c0:	b300      	cbz	r0, 8002104 <main+0x314>
 80020c2:	b672      	cpsid	i
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <main+0x2d4>
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	20000458 	.word	0x20000458
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40007400 	.word	0x40007400
 80020e4:	20000540 	.word	0x20000540
 80020e8:	40005400 	.word	0x40005400
 80020ec:	000186a0 	.word	0x000186a0
 80020f0:	20000714 	.word	0x20000714
 80020f4:	40013800 	.word	0x40013800
 80020f8:	20000614 	.word	0x20000614
 80020fc:	20000654 	.word	0x20000654
 8002100:	40000400 	.word	0x40000400
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002104:	4620      	mov	r0, r4
 8002106:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800210a:	f008 fdd7 	bl	800acbc <HAL_TIM_ConfigClockSource>
 800210e:	b108      	cbz	r0, 8002114 <main+0x324>
 8002110:	b672      	cpsid	i
  while (1)
 8002112:	e7fe      	b.n	8002112 <main+0x322>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2600      	movs	r6, #0
 8002116:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	484a      	ldr	r0, [pc, #296]	; (8002244 <main+0x454>)
 800211a:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002120:	f008 ff06 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	b108      	cbz	r0, 800212a <main+0x33a>
 8002126:	b672      	cpsid	i
  while (1)
 8002128:	e7fe      	b.n	8002128 <main+0x338>
  htim11.Init.Prescaler = 32000;
 800212a:	f44f 45fa 	mov.w	r5, #32000	; 0x7d00
  htim11.Init.Period = 100;
 800212e:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 8002130:	4c45      	ldr	r4, [pc, #276]	; (8002248 <main+0x458>)
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <main+0x45c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002134:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8002138:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002142:	4620      	mov	r0, r4
  htim11.Init.Period = 100;
 8002144:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = 32000;
 8002146:	6065      	str	r5, [r4, #4]
  htim11.Instance = TIM11;
 8002148:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800214a:	f008 fd25 	bl	800ab98 <HAL_TIM_Base_Init>
 800214e:	b108      	cbz	r0, 8002154 <main+0x364>
 8002150:	b672      	cpsid	i
  while (1)
 8002152:	e7fe      	b.n	8002152 <main+0x362>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002154:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002156:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800215a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800215e:	f008 fdad 	bl	800acbc <HAL_TIM_ConfigClockSource>
 8002162:	b108      	cbz	r0, 8002168 <main+0x378>
 8002164:	b672      	cpsid	i
  while (1)
 8002166:	e7fe      	b.n	8002166 <main+0x376>
  htim9.Init.Period = 200;
 8002168:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 800216a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002250 <main+0x460>
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <main+0x464>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002170:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8002174:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	e9c8 5001 	strd	r5, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002180:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002184:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 8002186:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 800218a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800218e:	f008 fd03 	bl	800ab98 <HAL_TIM_Base_Init>
 8002192:	b108      	cbz	r0, 8002198 <main+0x3a8>
 8002194:	b672      	cpsid	i
  while (1)
 8002196:	e7fe      	b.n	8002196 <main+0x3a6>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002198:	4640      	mov	r0, r8
 800219a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800219e:	f008 fd8d 	bl	800acbc <HAL_TIM_ConfigClockSource>
 80021a2:	b108      	cbz	r0, 80021a8 <main+0x3b8>
 80021a4:	b672      	cpsid	i
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <main+0x3b6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021a8:	4640      	mov	r0, r8
 80021aa:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021b0:	f008 febe 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	b108      	cbz	r0, 80021ba <main+0x3ca>
 80021b6:	b672      	cpsid	i
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <main+0x3c8>
  htim10.Init.Period = 10;
 80021ba:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 80021bc:	4e26      	ldr	r6, [pc, #152]	; (8002258 <main+0x468>)
 80021be:	4b27      	ldr	r3, [pc, #156]	; (800225c <main+0x46c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80021c4:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021cc:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d0:	4630      	mov	r0, r6
  htim10.Init.Period = 10;
 80021d2:	60f2      	str	r2, [r6, #12]
  htim10.Instance = TIM10;
 80021d4:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d6:	f008 fcdf 	bl	800ab98 <HAL_TIM_Base_Init>
 80021da:	b108      	cbz	r0, 80021e0 <main+0x3f0>
 80021dc:	b672      	cpsid	i
  while (1)
 80021de:	e7fe      	b.n	80021de <main+0x3ee>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e0:	4630      	mov	r0, r6
 80021e2:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e6:	f008 fd69 	bl	800acbc <HAL_TIM_ConfigClockSource>
 80021ea:	b108      	cbz	r0, 80021f0 <main+0x400>
 80021ec:	b672      	cpsid	i
  while (1)
 80021ee:	e7fe      	b.n	80021ee <main+0x3fe>
  htim4.Init.Period = 500;
 80021f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim4.Instance = TIM4;
 80021f4:	4e1a      	ldr	r6, [pc, #104]	; (8002260 <main+0x470>)
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <main+0x474>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80021fc:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220c:	4630      	mov	r0, r6
  htim4.Init.Period = 500;
 800220e:	60f2      	str	r2, [r6, #12]
  htim4.Instance = TIM4;
 8002210:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002212:	f008 fcc1 	bl	800ab98 <HAL_TIM_Base_Init>
 8002216:	b108      	cbz	r0, 800221c <main+0x42c>
 8002218:	b672      	cpsid	i
  while (1)
 800221a:	e7fe      	b.n	800221a <main+0x42a>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800221c:	4630      	mov	r0, r6
 800221e:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002222:	f008 fd4b 	bl	800acbc <HAL_TIM_ConfigClockSource>
 8002226:	b108      	cbz	r0, 800222c <main+0x43c>
 8002228:	b672      	cpsid	i
  while (1)
 800222a:	e7fe      	b.n	800222a <main+0x43a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2200      	movs	r2, #0
 800222e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002230:	480b      	ldr	r0, [pc, #44]	; (8002260 <main+0x470>)
 8002232:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002238:	f008 fe7a 	bl	800af30 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	b1a0      	cbz	r0, 8002268 <main+0x478>
 800223e:	b672      	cpsid	i
  while (1)
 8002240:	e7fe      	b.n	8002240 <main+0x450>
 8002242:	bf00      	nop
 8002244:	20000654 	.word	0x20000654
 8002248:	200005d4 	.word	0x200005d4
 800224c:	40011000 	.word	0x40011000
 8002250:	200006d4 	.word	0x200006d4
 8002254:	40010800 	.word	0x40010800
 8002258:	20000594 	.word	0x20000594
 800225c:	40010c00 	.word	0x40010c00
 8002260:	20000694 	.word	0x20000694
 8002264:	40000800 	.word	0x40000800
  float error_previous = 0;
 8002268:	2500      	movs	r5, #0
 800226a:	4ca9      	ldr	r4, [pc, #676]	; (8002510 <main+0x720>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800226c:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8002514 <main+0x724>
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002270:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8002518 <main+0x728>
  float error_previous = 0;
 8002274:	9506      	str	r5, [sp, #24]
  ourInit();
 8002276:	f7ff fca9 	bl	8001bcc <ourInit>
  float integral = 0;
 800227a:	9505      	str	r5, [sp, #20]
	  tempiter++;
 800227c:	4ba7      	ldr	r3, [pc, #668]	; (800251c <main+0x72c>)
 800227e:	781e      	ldrb	r6, [r3, #0]
	  if(tempiter != headiter){
 8002280:	4ba7      	ldr	r3, [pc, #668]	; (8002520 <main+0x730>)
	  tempiter++;
 8002282:	3601      	adds	r6, #1
 8002284:	b276      	sxtb	r6, r6
		  tempiter = 0;
 8002286:	2e08      	cmp	r6, #8
 8002288:	bfa8      	it	ge
 800228a:	2600      	movge	r6, #0
	  if(tempiter != headiter){
 800228c:	f993 3000 	ldrsb.w	r3, [r3]
 8002290:	42b3      	cmp	r3, r6
 8002292:	d05a      	beq.n	800234a <main+0x55a>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 8002294:	4ba3      	ldr	r3, [pc, #652]	; (8002524 <main+0x734>)
 8002296:	220a      	movs	r2, #10
 8002298:	eb03 1686 	add.w	r6, r3, r6, lsl #6
 800229c:	4631      	mov	r1, r6
 800229e:	48a2      	ldr	r0, [pc, #648]	; (8002528 <main+0x738>)
 80022a0:	f00b fd3a 	bl	800dd18 <strncmp>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f000 8248 	beq.w	800273a <main+0x94a>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022aa:	2213      	movs	r2, #19
 80022ac:	4631      	mov	r1, r6
 80022ae:	489f      	ldr	r0, [pc, #636]	; (800252c <main+0x73c>)
 80022b0:	f00b fd32 	bl	800dd18 <strncmp>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 80022b4:	2800      	cmp	r0, #0
 80022b6:	f000 8240 	beq.w	800273a <main+0x94a>
					(strncmp("MEASure:VOLTage?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage?")) == 0)){
 80022ba:	2210      	movs	r2, #16
 80022bc:	4631      	mov	r1, r6
 80022be:	489c      	ldr	r0, [pc, #624]	; (8002530 <main+0x740>)
 80022c0:	f00b fd2a 	bl	800dd18 <strncmp>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022c4:	2800      	cmp	r0, #0
 80022c6:	f000 8238 	beq.w	800273a <main+0x94a>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022ca:	220a      	movs	r2, #10
 80022cc:	4631      	mov	r1, r6
 80022ce:	4899      	ldr	r0, [pc, #612]	; (8002534 <main+0x744>)
 80022d0:	f00b fd22 	bl	800dd18 <strncmp>
 80022d4:	b168      	cbz	r0, 80022f2 <main+0x502>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 80022d6:	2213      	movs	r2, #19
 80022d8:	4631      	mov	r1, r6
 80022da:	4897      	ldr	r0, [pc, #604]	; (8002538 <main+0x748>)
 80022dc:	f00b fd1c 	bl	800dd18 <strncmp>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022e0:	b138      	cbz	r0, 80022f2 <main+0x502>
					(strncmp("MEASure:CURRent?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent?")) == 0)){
 80022e2:	2210      	movs	r2, #16
 80022e4:	4631      	mov	r1, r6
 80022e6:	4895      	ldr	r0, [pc, #596]	; (800253c <main+0x74c>)
 80022e8:	f00b fd16 	bl	800dd18 <strncmp>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 80022ec:	2800      	cmp	r0, #0
 80022ee:	f040 8232 	bne.w	8002756 <main+0x966>
				snprintf((char*)MSG, 64, "%.3f, %.3f\n", cur_num_aux, cur_num);
 80022f2:	4b93      	ldr	r3, [pc, #588]	; (8002540 <main+0x750>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f7fe f8af 	bl	8000458 <__aeabi_f2d>
 80022fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <main+0x754>)
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	f7fe f8a9 	bl	8000458 <__aeabi_f2d>
 8002306:	e9cd 0100 	strd	r0, r1, [sp]
 800230a:	4a8f      	ldr	r2, [pc, #572]	; (8002548 <main+0x758>)
 800230c:	2140      	movs	r1, #64	; 0x40
 800230e:	4880      	ldr	r0, [pc, #512]	; (8002510 <main+0x720>)
 8002310:	f00b fcce 	bl	800dcb0 <sniprintf>
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002314:	487e      	ldr	r0, [pc, #504]	; (8002510 <main+0x720>)
 8002316:	f7fd ff33 	bl	8000180 <strlen>
 800231a:	4601      	mov	r1, r0
 800231c:	487c      	ldr	r0, [pc, #496]	; (8002510 <main+0x720>)
 800231e:	b289      	uxth	r1, r1
 8002320:	f00a fe04 	bl	800cf2c <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	2100      	movs	r1, #0
 8002328:	4879      	ldr	r0, [pc, #484]	; (8002510 <main+0x720>)
 800232a:	f00b f859 	bl	800d3e0 <memset>
			memset (notacircbuff[tempiter], '\0', 64); // clear the buffer
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	4630      	mov	r0, r6
 8002332:	2100      	movs	r1, #0
 8002334:	f00b f854 	bl	800d3e0 <memset>
			tailiter++;
 8002338:	4a78      	ldr	r2, [pc, #480]	; (800251c <main+0x72c>)
 800233a:	7813      	ldrb	r3, [r2, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b25b      	sxtb	r3, r3
			if(tailiter >= CIRCSIZE){
 8002340:	2b07      	cmp	r3, #7
				tailiter = 0;
 8002342:	bfc4      	itt	gt
 8002344:	2300      	movgt	r3, #0
 8002346:	4a75      	ldrgt	r2, [pc, #468]	; (800251c <main+0x72c>)
 8002348:	7013      	strb	r3, [r2, #0]
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800234a:	4b80      	ldr	r3, [pc, #512]	; (800254c <main+0x75c>)
	  op_num_old = (float)op_num;
 800234c:	4a80      	ldr	r2, [pc, #512]	; (8002550 <main+0x760>)
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800234e:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002350:	f8df a200 	ldr.w	sl, [pc, #512]	; 8002554 <main+0x764>
 8002354:	8818      	ldrh	r0, [r3, #0]
	  op_num_old = (float)op_num;
 8002356:	4b80      	ldr	r3, [pc, #512]	; (8002558 <main+0x768>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6013      	str	r3, [r2, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800235c:	f7fe fcd2 	bl	8000d04 <__aeabi_ui2f>
 8002360:	4606      	mov	r6, r0
 8002362:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 8002366:	f7fe fccd 	bl	8000d04 <__aeabi_ui2f>
 800236a:	4607      	mov	r7, r0
 800236c:	4630      	mov	r0, r6
 800236e:	4639      	mov	r1, r7
 8002370:	f7fe fdd4 	bl	8000f1c <__aeabi_fdiv>
 8002374:	4649      	mov	r1, r9
 8002376:	f7fe fd1d 	bl	8000db4 <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800237c:	4659      	mov	r1, fp
 800237e:	4638      	mov	r0, r7
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002380:	9307      	str	r3, [sp, #28]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002382:	f7fe fd17 	bl	8000db4 <__aeabi_fmul>
 8002386:	4680      	mov	r8, r0
 8002388:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 800238c:	f7fe fcba 	bl	8000d04 <__aeabi_ui2f>
 8002390:	4649      	mov	r1, r9
 8002392:	f7fe fd0f 	bl	8000db4 <__aeabi_fmul>
 8002396:	4631      	mov	r1, r6
 8002398:	f7fe fd0c 	bl	8000db4 <__aeabi_fmul>
 800239c:	4641      	mov	r1, r8
 800239e:	f7fe fdbd 	bl	8000f1c <__aeabi_fdiv>
 80023a2:	496e      	ldr	r1, [pc, #440]	; (800255c <main+0x76c>)
 80023a4:	f7fe fdba 	bl	8000f1c <__aeabi_fdiv>
 80023a8:	496d      	ldr	r1, [pc, #436]	; (8002560 <main+0x770>)
 80023aa:	f7fe fdb7 	bl	8000f1c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023ae:	4629      	mov	r1, r5
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80023b0:	4607      	mov	r7, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023b2:	f7fe feb1 	bl	8001118 <__aeabi_fcmpge>
 80023b6:	b900      	cbnz	r0, 80023ba <main+0x5ca>
 80023b8:	462f      	mov	r7, r5
 80023ba:	4b61      	ldr	r3, [pc, #388]	; (8002540 <main+0x750>)
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023bc:	4969      	ldr	r1, [pc, #420]	; (8002564 <main+0x774>)
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023be:	601f      	str	r7, [r3, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023c0:	4638      	mov	r0, r7
 80023c2:	f7fe fcf7 	bl	8000db4 <__aeabi_fmul>
 80023c6:	4682      	mov	sl, r0
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <main+0x764>)
 80023ca:	8818      	ldrh	r0, [r3, #0]
 80023cc:	f7fe fc9a 	bl	8000d04 <__aeabi_ui2f>
 80023d0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80023d4:	f7fe fcee 	bl	8000db4 <__aeabi_fmul>
 80023d8:	4649      	mov	r1, r9
 80023da:	f7fe fceb 	bl	8000db4 <__aeabi_fmul>
 80023de:	4631      	mov	r1, r6
 80023e0:	f7fe fce8 	bl	8000db4 <__aeabi_fmul>
 80023e4:	4641      	mov	r1, r8
 80023e6:	f7fe fd99 	bl	8000f1c <__aeabi_fdiv>
 80023ea:	4651      	mov	r1, sl
 80023ec:	f7fe fbd8 	bl	8000ba0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80023f0:	4629      	mov	r1, r5
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023f2:	4607      	mov	r7, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80023f4:	f7fe fe90 	bl	8001118 <__aeabi_fcmpge>
 80023f8:	b900      	cbnz	r0, 80023fc <main+0x60c>
 80023fa:	462f      	mov	r7, r5
 80023fc:	4b56      	ldr	r3, [pc, #344]	; (8002558 <main+0x768>)
 80023fe:	601f      	str	r7, [r3, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002400:	4b54      	ldr	r3, [pc, #336]	; (8002554 <main+0x764>)
 8002402:	8858      	ldrh	r0, [r3, #2]
 8002404:	f7fe fc7e 	bl	8000d04 <__aeabi_ui2f>
 8002408:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800240c:	f7fe fcd2 	bl	8000db4 <__aeabi_fmul>
 8002410:	4649      	mov	r1, r9
 8002412:	f7fe fccf 	bl	8000db4 <__aeabi_fmul>
 8002416:	4631      	mov	r1, r6
 8002418:	f7fe fccc 	bl	8000db4 <__aeabi_fmul>
 800241c:	4641      	mov	r1, r8
 800241e:	f7fe fd7d 	bl	8000f1c <__aeabi_fdiv>
 8002422:	4651      	mov	r1, sl
 8002424:	f7fe fbbc 	bl	8000ba0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002428:	4629      	mov	r1, r5
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800242a:	4682      	mov	sl, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 800242c:	f7fe fe74 	bl	8001118 <__aeabi_fcmpge>
 8002430:	b900      	cbnz	r0, 8002434 <main+0x644>
 8002432:	46aa      	mov	sl, r5
 8002434:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <main+0x778>)
 8002436:	f8c3 a000 	str.w	sl, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 800243a:	4b46      	ldr	r3, [pc, #280]	; (8002554 <main+0x764>)
 800243c:	88d8      	ldrh	r0, [r3, #6]
 800243e:	f7fe fc61 	bl	8000d04 <__aeabi_ui2f>
 8002442:	494a      	ldr	r1, [pc, #296]	; (800256c <main+0x77c>)
 8002444:	f7fe fcb6 	bl	8000db4 <__aeabi_fmul>
 8002448:	4649      	mov	r1, r9
 800244a:	f7fe fcb3 	bl	8000db4 <__aeabi_fmul>
 800244e:	4631      	mov	r1, r6
 8002450:	f7fe fcb0 	bl	8000db4 <__aeabi_fmul>
 8002454:	4641      	mov	r1, r8
 8002456:	f7fe fd61 	bl	8000f1c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800245a:	4629      	mov	r1, r5
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 800245c:	4606      	mov	r6, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800245e:	f7fe fe5b 	bl	8001118 <__aeabi_fcmpge>
 8002462:	b900      	cbnz	r0, 8002466 <main+0x676>
 8002464:	462e      	mov	r6, r5
 8002466:	4b42      	ldr	r3, [pc, #264]	; (8002570 <main+0x780>)
 8002468:	601e      	str	r6, [r3, #0]
	  if (chstat_main) {
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <main+0x784>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8137 	beq.w	80026e2 <main+0x8f2>
		  error = (float)lin_num - (float)volt_set_main;
 8002474:	4b40      	ldr	r3, [pc, #256]	; (8002578 <main+0x788>)
 8002476:	4650      	mov	r0, sl
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	f7fe fb91 	bl	8000ba0 <__aeabi_fsub>
 800247e:	4606      	mov	r6, r0
		  integral += (float)error;
 8002480:	9805      	ldr	r0, [sp, #20]
 8002482:	4631      	mov	r1, r6
 8002484:	f7fe fb8e 	bl	8000ba4 <__addsf3>
		  if (integral > (float)4095.0) {
 8002488:	4659      	mov	r1, fp
		  integral += (float)error;
 800248a:	4607      	mov	r7, r0
 800248c:	9005      	str	r0, [sp, #20]
		  if (integral > (float)4095.0) {
 800248e:	f7fe fe4d 	bl	800112c <__aeabi_fcmpgt>
 8002492:	2800      	cmp	r0, #0
 8002494:	f040 8122 	bne.w	80026dc <main+0x8ec>
		  } else if (integral < (float)(-4095.0)) {
 8002498:	4638      	mov	r0, r7
 800249a:	4938      	ldr	r1, [pc, #224]	; (800257c <main+0x78c>)
 800249c:	f7fe fe28 	bl	80010f0 <__aeabi_fcmplt>
 80024a0:	b108      	cbz	r0, 80024a6 <main+0x6b6>
			  integral = (float)(-4095.0);
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <main+0x78c>)
 80024a4:	9305      	str	r3, [sp, #20]
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <main+0x790>)
 80024a8:	4630      	mov	r0, r6
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	f7fe fc82 	bl	8000db4 <__aeabi_fmul>
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <main+0x794>)
 80024b2:	4607      	mov	r7, r0
 80024b4:	6819      	ldr	r1, [r3, #0]
		  corrected_volt_set_main = (float)volt_set_main - (float)correction;
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <main+0x788>)
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80024b8:	9805      	ldr	r0, [sp, #20]
		  corrected_volt_set_main = (float)volt_set_main - (float)correction;
 80024ba:	f8d3 8000 	ldr.w	r8, [r3]
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80024be:	f7fe fc79 	bl	8000db4 <__aeabi_fmul>
 80024c2:	4601      	mov	r1, r0
 80024c4:	4638      	mov	r0, r7
 80024c6:	f7fe fb6d 	bl	8000ba4 <__addsf3>
		  derivative = (float)error - (float)error_previous;
 80024ca:	9906      	ldr	r1, [sp, #24]
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80024cc:	4607      	mov	r7, r0
		  derivative = (float)error - (float)error_previous;
 80024ce:	4630      	mov	r0, r6
 80024d0:	f7fe fb66 	bl	8000ba0 <__aeabi_fsub>
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <main+0x798>)
 80024d6:	6819      	ldr	r1, [r3, #0]
 80024d8:	f7fe fc6c 	bl	8000db4 <__aeabi_fmul>
 80024dc:	4601      	mov	r1, r0
 80024de:	4638      	mov	r0, r7
 80024e0:	f7fe fb60 	bl	8000ba4 <__addsf3>
 80024e4:	4601      	mov	r1, r0
		  corrected_volt_set_main = (float)volt_set_main - (float)correction;
 80024e6:	4640      	mov	r0, r8
 80024e8:	f7fe fb5a 	bl	8000ba0 <__aeabi_fsub>
		  tmpv1 = (((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80024ec:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80024f0:	f7fe fc60 	bl	8000db4 <__aeabi_fmul>
 80024f4:	4925      	ldr	r1, [pc, #148]	; (800258c <main+0x79c>)
 80024f6:	f7fe fb55 	bl	8000ba4 <__addsf3>
 80024fa:	4659      	mov	r1, fp
 80024fc:	f7fe fc5a 	bl	8000db4 <__aeabi_fmul>
 8002500:	9907      	ldr	r1, [sp, #28]
 8002502:	f7fe fd0b 	bl	8000f1c <__aeabi_fdiv>
		  if (tmpv1 >= 4094) {
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <main+0x7a0>)
		  tmpv1 = (((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8002508:	4607      	mov	r7, r0
		  if (tmpv1 >= 4094) {
 800250a:	f7fe fe05 	bl	8001118 <__aeabi_fcmpge>
 800250e:	e041      	b.n	8002594 <main+0x7a4>
 8002510:	20000390 	.word	0x20000390
 8002514:	40400000 	.word	0x40400000
 8002518:	457ff000 	.word	0x457ff000
 800251c:	200009b4 	.word	0x200009b4
 8002520:	2000000c 	.word	0x2000000c
 8002524:	20000764 	.word	0x20000764
 8002528:	080117b4 	.word	0x080117b4
 800252c:	080117c0 	.word	0x080117c0
 8002530:	080117d4 	.word	0x080117d4
 8002534:	080117f4 	.word	0x080117f4
 8002538:	08011800 	.word	0x08011800
 800253c:	08011814 	.word	0x08011814
 8002540:	200003f8 	.word	0x200003f8
 8002544:	200003fc 	.word	0x200003fc
 8002548:	08011828 	.word	0x08011828
 800254c:	20000020 	.word	0x20000020
 8002550:	20000968 	.word	0x20000968
 8002554:	200003dc 	.word	0x200003dc
 8002558:	20000964 	.word	0x20000964
 800255c:	41a00000 	.word	0x41a00000
 8002560:	3e19999a 	.word	0x3e19999a
 8002564:	3eb33333 	.word	0x3eb33333
 8002568:	2000075c 	.word	0x2000075c
 800256c:	40a00000 	.word	0x40a00000
 8002570:	200009b0 	.word	0x200009b0
 8002574:	200003f6 	.word	0x200003f6
 8002578:	20000a80 	.word	0x20000a80
 800257c:	c57ff000 	.word	0xc57ff000
 8002580:	20000008 	.word	0x20000008
 8002584:	20000004 	.word	0x20000004
 8002588:	20000000 	.word	0x20000000
 800258c:	3de4d9c9 	.word	0x3de4d9c9
 8002590:	457fe000 	.word	0x457fe000
 8002594:	2800      	cmp	r0, #0
 8002596:	f040 8237 	bne.w	8002a08 <main+0xc18>
		  } else if (tmpv1 <= 1) {
 800259a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800259e:	4638      	mov	r0, r7
 80025a0:	f7fe fdb0 	bl	8001104 <__aeabi_fcmple>
 80025a4:	2800      	cmp	r0, #0
 80025a6:	f040 822c 	bne.w	8002a02 <main+0xc12>
		  v1 = (uint16_t) tmpv1;
 80025aa:	4638      	mov	r0, r7
 80025ac:	f7fe fdee 	bl	800118c <__aeabi_f2uiz>
 80025b0:	4b9c      	ldr	r3, [pc, #624]	; (8002824 <main+0xa34>)
		  error_previous = (float)error;
 80025b2:	9606      	str	r6, [sp, #24]
		  v1 = (uint16_t) tmpv1;
 80025b4:	8018      	strh	r0, [r3, #0]
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)1.0))) * (float)4095 / (float)vddcalc);
 80025b6:	4b9c      	ldr	r3, [pc, #624]	; (8002828 <main+0xa38>)
 80025b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	f7fe faf1 	bl	8000ba4 <__addsf3>
 80025c2:	499a      	ldr	r1, [pc, #616]	; (800282c <main+0xa3c>)
 80025c4:	f7fe fbf6 	bl	8000db4 <__aeabi_fmul>
 80025c8:	4601      	mov	r1, r0
 80025ca:	4899      	ldr	r0, [pc, #612]	; (8002830 <main+0xa40>)
 80025cc:	f7fe fae8 	bl	8000ba0 <__aeabi_fsub>
 80025d0:	4659      	mov	r1, fp
 80025d2:	f7fe fbef 	bl	8000db4 <__aeabi_fmul>
 80025d6:	9907      	ldr	r1, [sp, #28]
 80025d8:	f7fe fca0 	bl	8000f1c <__aeabi_fdiv>
	  if(temp <= 0){
 80025dc:	4629      	mov	r1, r5
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)1.0))) * (float)4095 / (float)vddcalc);
 80025de:	4606      	mov	r6, r0
	  if(temp <= 0){
 80025e0:	f7fe fd90 	bl	8001104 <__aeabi_fcmple>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	f040 8208 	bne.w	80029fa <main+0xc0a>
	  else if(temp >= 4000){
 80025ea:	4630      	mov	r0, r6
 80025ec:	4991      	ldr	r1, [pc, #580]	; (8002834 <main+0xa44>)
 80025ee:	f7fe fd93 	bl	8001118 <__aeabi_fcmpge>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	f000 81fb 	beq.w	80029ee <main+0xbfe>
		  v2 = 4000;
 80025f8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80025fc:	4a8e      	ldr	r2, [pc, #568]	; (8002838 <main+0xa48>)
 80025fe:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 8002600:	4b89      	ldr	r3, [pc, #548]	; (8002828 <main+0xa38>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	4b8d      	ldr	r3, [pc, #564]	; (800283c <main+0xa4c>)
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	f7fe fd90 	bl	800112c <__aeabi_fcmpgt>
 800260c:	4606      	mov	r6, r0
 800260e:	2800      	cmp	r0, #0
 8002610:	f040 8202 	bne.w	8002a18 <main+0xc28>
	  else if(volt_set_main < volt_set_main_old){
 8002614:	4b84      	ldr	r3, [pc, #528]	; (8002828 <main+0xa38>)
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	4b88      	ldr	r3, [pc, #544]	; (800283c <main+0xa4c>)
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	f7fe fd68 	bl	80010f0 <__aeabi_fcmplt>
 8002620:	2800      	cmp	r0, #0
 8002622:	f000 81f9 	beq.w	8002a18 <main+0xc28>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <main+0xa34>)
 8002628:	4632      	mov	r2, r6
 800262a:	4631      	mov	r1, r6
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	4884      	ldr	r0, [pc, #528]	; (8002840 <main+0xa50>)
 8002630:	f006 f9c8 	bl	80089c4 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002634:	4b80      	ldr	r3, [pc, #512]	; (8002838 <main+0xa48>)
 8002636:	4632      	mov	r2, r6
 8002638:	2110      	movs	r1, #16
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	4880      	ldr	r0, [pc, #512]	; (8002840 <main+0xa50>)
 800263e:	f006 f9c1 	bl	80089c4 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 8002642:	4b80      	ldr	r3, [pc, #512]	; (8002844 <main+0xa54>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 81e0 	bne.w	8002a0c <main+0xc1c>
 800264c:	4b7e      	ldr	r3, [pc, #504]	; (8002848 <main+0xa58>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2b04      	cmp	r3, #4
 8002652:	f240 81db 	bls.w	8002a0c <main+0xc1c>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	2140      	movs	r1, #64	; 0x40
 800265a:	487c      	ldr	r0, [pc, #496]	; (800284c <main+0xa5c>)
 800265c:	f006 fd28 	bl	80090b0 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <main+0xa60>)
	if(val == 0.0){
 8002662:	4629      	mov	r1, r5
	  update_ADC_watchdog(amp_set_main);
 8002664:	681e      	ldr	r6, [r3, #0]
	if(val == 0.0){
 8002666:	4630      	mov	r0, r6
 8002668:	f7fe fd38 	bl	80010dc <__aeabi_fcmpeq>
 800266c:	2800      	cmp	r0, #0
 800266e:	f040 81b9 	bne.w	80029e4 <main+0xbf4>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002672:	4630      	mov	r0, r6
 8002674:	4977      	ldr	r1, [pc, #476]	; (8002854 <main+0xa64>)
 8002676:	f7fe fb9d 	bl	8000db4 <__aeabi_fmul>
 800267a:	4977      	ldr	r1, [pc, #476]	; (8002858 <main+0xa68>)
 800267c:	f7fe fb9a 	bl	8000db4 <__aeabi_fmul>
 8002680:	4659      	mov	r1, fp
 8002682:	f7fe fb97 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002686:	4b75      	ldr	r3, [pc, #468]	; (800285c <main+0xa6c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002688:	4606      	mov	r6, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800268a:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800268c:	8818      	ldrh	r0, [r3, #0]
 800268e:	f7fe fb39 	bl	8000d04 <__aeabi_ui2f>
 8002692:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <main+0xa58>)
 8002694:	4607      	mov	r7, r0
 8002696:	8918      	ldrh	r0, [r3, #8]
 8002698:	f7fe fb34 	bl	8000d04 <__aeabi_ui2f>
 800269c:	4601      	mov	r1, r0
 800269e:	4638      	mov	r0, r7
 80026a0:	f7fe fc3c 	bl	8000f1c <__aeabi_fdiv>
 80026a4:	4649      	mov	r1, r9
 80026a6:	f7fe fb85 	bl	8000db4 <__aeabi_fmul>
 80026aa:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80026ac:	4630      	mov	r0, r6
 80026ae:	f7fe fc35 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80026b2:	4659      	mov	r1, fp
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80026b4:	4606      	mov	r6, r0
	else if(amp >= 4095.0){
 80026b6:	f7fe fd2f 	bl	8001118 <__aeabi_fcmpge>
 80026ba:	4607      	mov	r7, r0
 80026bc:	2800      	cmp	r0, #0
 80026be:	f040 8191 	bne.w	80029e4 <main+0xbf4>
	else if(amp < 0.0){
 80026c2:	4629      	mov	r1, r5
 80026c4:	4630      	mov	r0, r6
 80026c6:	f7fe fd13 	bl	80010f0 <__aeabi_fcmplt>
 80026ca:	2800      	cmp	r0, #0
 80026cc:	f040 8187 	bne.w	80029de <main+0xbee>
		ADC1->HTR = amp;
 80026d0:	4630      	mov	r0, r6
 80026d2:	f7fe fd5b 	bl	800118c <__aeabi_f2uiz>
 80026d6:	4a62      	ldr	r2, [pc, #392]	; (8002860 <main+0xa70>)
 80026d8:	6290      	str	r0, [r2, #40]	; 0x28
 80026da:	e5cf      	b.n	800227c <main+0x48c>
			  integral = (float)4095;
 80026dc:	f8cd b014 	str.w	fp, [sp, #20]
 80026e0:	e6e1      	b.n	80024a6 <main+0x6b6>
		  if(op_num > (volt_set_main - 1)){
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <main+0xa38>)
 80026e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f7fe fa59 	bl	8000ba0 <__aeabi_fsub>
 80026ee:	4639      	mov	r1, r7
 80026f0:	f7fe fcfe 	bl	80010f0 <__aeabi_fcmplt>
 80026f4:	b160      	cbz	r0, 8002710 <main+0x920>
			  if(v1 >= 1){
 80026f6:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <main+0xa34>)
 80026f8:	8813      	ldrh	r3, [r2, #0]
 80026fa:	b10b      	cbz	r3, 8002700 <main+0x910>
				  v1--;
 80026fc:	3b01      	subs	r3, #1
 80026fe:	8013      	strh	r3, [r2, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002700:	2200      	movs	r2, #0
 8002702:	4b48      	ldr	r3, [pc, #288]	; (8002824 <main+0xa34>)
 8002704:	4611      	mov	r1, r2
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	484d      	ldr	r0, [pc, #308]	; (8002840 <main+0xa50>)
 800270a:	f006 f95b 	bl	80089c4 <HAL_DAC_SetValue>
 800270e:	e752      	b.n	80025b6 <main+0x7c6>
		  else if(op_num < (volt_set_main - 1)){
 8002710:	4b45      	ldr	r3, [pc, #276]	; (8002828 <main+0xa38>)
 8002712:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f7fe fa42 	bl	8000ba0 <__aeabi_fsub>
 800271c:	4639      	mov	r1, r7
 800271e:	f7fe fd05 	bl	800112c <__aeabi_fcmpgt>
 8002722:	2800      	cmp	r0, #0
 8002724:	f43f af47 	beq.w	80025b6 <main+0x7c6>
			  if(v1 <= 4094){
 8002728:	f640 72fe 	movw	r2, #4094	; 0xffe
 800272c:	493d      	ldr	r1, [pc, #244]	; (8002824 <main+0xa34>)
 800272e:	880b      	ldrh	r3, [r1, #0]
 8002730:	4293      	cmp	r3, r2
				  v1++;
 8002732:	bf9c      	itt	ls
 8002734:	3301      	addls	r3, #1
 8002736:	800b      	strhls	r3, [r1, #0]
 8002738:	e7e2      	b.n	8002700 <main+0x910>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", lin_num_aux, lin_num);
 800273a:	4b4a      	ldr	r3, [pc, #296]	; (8002864 <main+0xa74>)
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	f7fd fe8b 	bl	8000458 <__aeabi_f2d>
 8002742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002746:	4b48      	ldr	r3, [pc, #288]	; (8002868 <main+0xa78>)
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	f7fd fe85 	bl	8000458 <__aeabi_f2d>
 800274e:	4a47      	ldr	r2, [pc, #284]	; (800286c <main+0xa7c>)
 8002750:	e9cd 0100 	strd	r0, r1, [sp]
 8002754:	e5da      	b.n	800230c <main+0x51c>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 8002756:	220b      	movs	r2, #11
 8002758:	4631      	mov	r1, r6
 800275a:	4845      	ldr	r0, [pc, #276]	; (8002870 <main+0xa80>)
 800275c:	f00b fadc 	bl	800dd18 <strncmp>
 8002760:	b128      	cbz	r0, 800276e <main+0x97e>
					(strncmp("OUTP:ONE?", (char*)notacircbuff[tempiter], strlen("OUTP:ONE?")) == 0)){
 8002762:	2209      	movs	r2, #9
 8002764:	4631      	mov	r1, r6
 8002766:	4843      	ldr	r0, [pc, #268]	; (8002874 <main+0xa84>)
 8002768:	f00b fad6 	bl	800dd18 <strncmp>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 800276c:	b940      	cbnz	r0, 8002780 <main+0x990>
				snprintf((char*)MSG, 64, "%d\n", chstat_aux_rx);
 800276e:	4b42      	ldr	r3, [pc, #264]	; (8002878 <main+0xa88>)
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2140      	movs	r1, #64	; 0x40
 8002774:	4a41      	ldr	r2, [pc, #260]	; (800287c <main+0xa8c>)
 8002776:	b25b      	sxtb	r3, r3
 8002778:	4841      	ldr	r0, [pc, #260]	; (8002880 <main+0xa90>)
 800277a:	f00b fa99 	bl	800dcb0 <sniprintf>
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 800277e:	e5c9      	b.n	8002314 <main+0x524>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002780:	220b      	movs	r2, #11
 8002782:	4631      	mov	r1, r6
 8002784:	483f      	ldr	r0, [pc, #252]	; (8002884 <main+0xa94>)
 8002786:	f00b fac7 	bl	800dd18 <strncmp>
 800278a:	b128      	cbz	r0, 8002798 <main+0x9a8>
					(strncmp("OUTP:TWO?", (char*)notacircbuff[tempiter], strlen("OUTP:TWO?")) == 0)){
 800278c:	2209      	movs	r2, #9
 800278e:	4631      	mov	r1, r6
 8002790:	483d      	ldr	r0, [pc, #244]	; (8002888 <main+0xa98>)
 8002792:	f00b fac1 	bl	800dd18 <strncmp>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002796:	b908      	cbnz	r0, 800279c <main+0x9ac>
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <main+0xa54>)
 800279a:	e7e9      	b.n	8002770 <main+0x980>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 800279c:	2210      	movs	r2, #16
 800279e:	4631      	mov	r1, r6
 80027a0:	483a      	ldr	r0, [pc, #232]	; (800288c <main+0xa9c>)
 80027a2:	f00b fab9 	bl	800dd18 <strncmp>
 80027a6:	b128      	cbz	r0, 80027b4 <main+0x9c4>
					(strncmp("OUTP:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:START")) == 0)){
 80027a8:	220e      	movs	r2, #14
 80027aa:	4631      	mov	r1, r6
 80027ac:	4838      	ldr	r0, [pc, #224]	; (8002890 <main+0xaa0>)
 80027ae:	f00b fab3 	bl	800dd18 <strncmp>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 80027b2:	b928      	cbnz	r0, 80027c0 <main+0x9d0>
				chstat_aux_tx = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	4a37      	ldr	r2, [pc, #220]	; (8002894 <main+0xaa4>)
 80027b8:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027ba:	230a      	movs	r3, #10
 80027bc:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80027be:	e5a9      	b.n	8002314 <main+0x524>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027c0:	2210      	movs	r2, #16
 80027c2:	4631      	mov	r1, r6
 80027c4:	4834      	ldr	r0, [pc, #208]	; (8002898 <main+0xaa8>)
 80027c6:	f00b faa7 	bl	800dd18 <strncmp>
 80027ca:	b128      	cbz	r0, 80027d8 <main+0x9e8>
					(strncmp("OUTP:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:START")) == 0)){
 80027cc:	220e      	movs	r2, #14
 80027ce:	4631      	mov	r1, r6
 80027d0:	4832      	ldr	r0, [pc, #200]	; (800289c <main+0xaac>)
 80027d2:	f00b faa1 	bl	800dd18 <strncmp>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027d6:	b928      	cbnz	r0, 80027e4 <main+0x9f4>
				chstat_main = 1;
 80027d8:	2301      	movs	r3, #1
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <main+0xa54>)
 80027dc:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027de:	230a      	movs	r3, #10
 80027e0:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80027e2:	e597      	b.n	8002314 <main+0x524>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027e4:	220f      	movs	r2, #15
 80027e6:	4631      	mov	r1, r6
 80027e8:	482d      	ldr	r0, [pc, #180]	; (80028a0 <main+0xab0>)
 80027ea:	f00b fa95 	bl	800dd18 <strncmp>
 80027ee:	b130      	cbz	r0, 80027fe <main+0xa0e>
					(strncmp("OUTP:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:STOP")) == 0)){
 80027f0:	220d      	movs	r2, #13
 80027f2:	4631      	mov	r1, r6
 80027f4:	482b      	ldr	r0, [pc, #172]	; (80028a4 <main+0xab4>)
 80027f6:	f00b fa8f 	bl	800dd18 <strncmp>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d154      	bne.n	80028a8 <main+0xab8>
				snprintf((char*)MSG, 64, "\n");
 80027fe:	230a      	movs	r3, #10
				chstat_aux_tx = 0;
 8002800:	2700      	movs	r7, #0
				snprintf((char*)MSG, 64, "\n");
 8002802:	8023      	strh	r3, [r4, #0]
				chstat_aux_tx = 0;
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <main+0xaa4>)
 8002806:	701f      	strb	r7, [r3, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002808:	481d      	ldr	r0, [pc, #116]	; (8002880 <main+0xa90>)
 800280a:	f7fd fcb9 	bl	8000180 <strlen>
 800280e:	4601      	mov	r1, r0
 8002810:	481b      	ldr	r0, [pc, #108]	; (8002880 <main+0xa90>)
 8002812:	b289      	uxth	r1, r1
 8002814:	f00a fb8a 	bl	800cf2c <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002818:	4639      	mov	r1, r7
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	4818      	ldr	r0, [pc, #96]	; (8002880 <main+0xa90>)
 800281e:	f00a fddf 	bl	800d3e0 <memset>
 8002822:	e584      	b.n	800232e <main+0x53e>
 8002824:	20000a78 	.word	0x20000a78
 8002828:	20000a80 	.word	0x20000a80
 800282c:	3e75c28f 	.word	0x3e75c28f
 8002830:	40800b78 	.word	0x40800b78
 8002834:	457a0000 	.word	0x457a0000
 8002838:	20000a7a 	.word	0x20000a7a
 800283c:	20000a84 	.word	0x20000a84
 8002840:	20000458 	.word	0x20000458
 8002844:	200003f6 	.word	0x200003f6
 8002848:	200003dc 	.word	0x200003dc
 800284c:	40020000 	.word	0x40020000
 8002850:	200003ec 	.word	0x200003ec
 8002854:	3e19999a 	.word	0x3e19999a
 8002858:	41a00000 	.word	0x41a00000
 800285c:	20000020 	.word	0x20000020
 8002860:	40012400 	.word	0x40012400
 8002864:	2000075c 	.word	0x2000075c
 8002868:	20000760 	.word	0x20000760
 800286c:	080117e8 	.word	0x080117e8
 8002870:	08011834 	.word	0x08011834
 8002874:	08011840 	.word	0x08011840
 8002878:	200003f4 	.word	0x200003f4
 800287c:	0801184c 	.word	0x0801184c
 8002880:	20000390 	.word	0x20000390
 8002884:	08011850 	.word	0x08011850
 8002888:	0801185c 	.word	0x0801185c
 800288c:	08011868 	.word	0x08011868
 8002890:	0801187c 	.word	0x0801187c
 8002894:	200003f5 	.word	0x200003f5
 8002898:	0801188c 	.word	0x0801188c
 800289c:	080118a0 	.word	0x080118a0
 80028a0:	080118b0 	.word	0x080118b0
 80028a4:	080118c0 	.word	0x080118c0
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 80028a8:	220f      	movs	r2, #15
 80028aa:	4631      	mov	r1, r6
 80028ac:	48b4      	ldr	r0, [pc, #720]	; (8002b80 <main+0xd90>)
 80028ae:	f00b fa33 	bl	800dd18 <strncmp>
 80028b2:	b128      	cbz	r0, 80028c0 <main+0xad0>
					(strncmp("OUTP:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:STOP")) == 0)){
 80028b4:	220d      	movs	r2, #13
 80028b6:	4631      	mov	r1, r6
 80028b8:	48b2      	ldr	r0, [pc, #712]	; (8002b84 <main+0xd94>)
 80028ba:	f00b fa2d 	bl	800dd18 <strncmp>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 80028be:	b928      	cbnz	r0, 80028cc <main+0xadc>
				snprintf((char*)MSG, 64, "\n");
 80028c0:	230a      	movs	r3, #10
				chstat_main = 0;
 80028c2:	2700      	movs	r7, #0
				snprintf((char*)MSG, 64, "\n");
 80028c4:	8023      	strh	r3, [r4, #0]
				chstat_main = 0;
 80028c6:	4bb0      	ldr	r3, [pc, #704]	; (8002b88 <main+0xd98>)
 80028c8:	701f      	strb	r7, [r3, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80028ca:	e79d      	b.n	8002808 <main+0xa18>
			else if ((strncmp("VOLTage:ONE:", (char*)notacircbuff[tempiter], strlen("VOLTage:ONE:")) == 0)){
 80028cc:	220c      	movs	r2, #12
 80028ce:	4631      	mov	r1, r6
 80028d0:	48ae      	ldr	r0, [pc, #696]	; (8002b8c <main+0xd9c>)
 80028d2:	f00b fa21 	bl	800dd18 <strncmp>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	f000 81cf 	beq.w	8002c7a <main+0xe8a>
			else if ((strncmp("VOLT:ONE:", (char*)notacircbuff[tempiter], strlen("VOLT:ONE:")) == 0)){
 80028dc:	2209      	movs	r2, #9
 80028de:	4631      	mov	r1, r6
 80028e0:	48ab      	ldr	r0, [pc, #684]	; (8002b90 <main+0xda0>)
 80028e2:	f00b fa19 	bl	800dd18 <strncmp>
 80028e6:	4607      	mov	r7, r0
 80028e8:	2800      	cmp	r0, #0
 80028ea:	f000 8195 	beq.w	8002c18 <main+0xe28>
			else if ((strncmp("VOLTage:TWO:", (char*)notacircbuff[tempiter], strlen("VOLTage:TWO:")) == 0)){
 80028ee:	220c      	movs	r2, #12
 80028f0:	4631      	mov	r1, r6
 80028f2:	48a8      	ldr	r0, [pc, #672]	; (8002b94 <main+0xda4>)
 80028f4:	f00b fa10 	bl	800dd18 <strncmp>
 80028f8:	4607      	mov	r7, r0
 80028fa:	2800      	cmp	r0, #0
 80028fc:	f000 8138 	beq.w	8002b70 <main+0xd80>
			else if ((strncmp("VOLT:TWO:", (char*)notacircbuff[tempiter], strlen("VOLT:TWO:")) == 0)){
 8002900:	2209      	movs	r2, #9
 8002902:	4631      	mov	r1, r6
 8002904:	48a4      	ldr	r0, [pc, #656]	; (8002b98 <main+0xda8>)
 8002906:	f00b fa07 	bl	800dd18 <strncmp>
 800290a:	4607      	mov	r7, r0
 800290c:	2800      	cmp	r0, #0
 800290e:	f000 80fd 	beq.w	8002b0c <main+0xd1c>
			else if ((strncmp("CURRent:ONE:", (char*)notacircbuff[tempiter], strlen("CURRent:ONE:")) == 0)){
 8002912:	220c      	movs	r2, #12
 8002914:	4631      	mov	r1, r6
 8002916:	48a1      	ldr	r0, [pc, #644]	; (8002b9c <main+0xdac>)
 8002918:	f00b f9fe 	bl	800dd18 <strncmp>
 800291c:	4607      	mov	r7, r0
 800291e:	2800      	cmp	r0, #0
 8002920:	f000 81fa 	beq.w	8002d18 <main+0xf28>
			else if ((strncmp("CURR:ONE:", (char*)notacircbuff[tempiter], strlen("CURR:ONE:")) == 0)){
 8002924:	2209      	movs	r2, #9
 8002926:	4631      	mov	r1, r6
 8002928:	489d      	ldr	r0, [pc, #628]	; (8002ba0 <main+0xdb0>)
 800292a:	f00b f9f5 	bl	800dd18 <strncmp>
 800292e:	4607      	mov	r7, r0
 8002930:	2800      	cmp	r0, #0
 8002932:	f000 81bf 	beq.w	8002cb4 <main+0xec4>
			else if ((strncmp("CURRent:TWO:", (char*)notacircbuff[tempiter], strlen("CURRent:TWO:")) == 0)){
 8002936:	220c      	movs	r2, #12
 8002938:	4631      	mov	r1, r6
 800293a:	489a      	ldr	r0, [pc, #616]	; (8002ba4 <main+0xdb4>)
 800293c:	f00b f9ec 	bl	800dd18 <strncmp>
 8002940:	4607      	mov	r7, r0
 8002942:	2800      	cmp	r0, #0
 8002944:	f000 81eb 	beq.w	8002d1e <main+0xf2e>
			else if ((strncmp("CURR:TWO:", (char*)notacircbuff[tempiter], strlen("CURR:TWO:")) == 0)){
 8002948:	2209      	movs	r2, #9
 800294a:	4631      	mov	r1, r6
 800294c:	4896      	ldr	r0, [pc, #600]	; (8002ba8 <main+0xdb8>)
 800294e:	f00b f9e3 	bl	800dd18 <strncmp>
 8002952:	4607      	mov	r7, r0
 8002954:	2800      	cmp	r0, #0
 8002956:	f000 80b4 	beq.w	8002ac2 <main+0xcd2>
			else if ((strncmp("*IDN?", (char*)notacircbuff[tempiter], strlen("*IDN?")) == 0)){
 800295a:	2205      	movs	r2, #5
 800295c:	4631      	mov	r1, r6
 800295e:	4893      	ldr	r0, [pc, #588]	; (8002bac <main+0xdbc>)
 8002960:	f00b f9da 	bl	800dd18 <strncmp>
 8002964:	2800      	cmp	r0, #0
 8002966:	f000 80a7 	beq.w	8002ab8 <main+0xcc8>
			else if ((strncmp("READ?", (char*)notacircbuff[tempiter], strlen("READ?")) == 0)){
 800296a:	2205      	movs	r2, #5
 800296c:	4631      	mov	r1, r6
 800296e:	4890      	ldr	r0, [pc, #576]	; (8002bb0 <main+0xdc0>)
 8002970:	f00b f9d2 	bl	800dd18 <strncmp>
 8002974:	2800      	cmp	r0, #0
 8002976:	f000 809a 	beq.w	8002aae <main+0xcbe>
			else if ((strncmp("DBG:SET:P:", (char*)notacircbuff[tempiter], strlen("DBG:SET:P:")) == 0)){
 800297a:	220a      	movs	r2, #10
 800297c:	4631      	mov	r1, r6
 800297e:	488d      	ldr	r0, [pc, #564]	; (8002bb4 <main+0xdc4>)
 8002980:	f00b f9ca 	bl	800dd18 <strncmp>
 8002984:	2800      	cmp	r0, #0
 8002986:	f000 8087 	beq.w	8002a98 <main+0xca8>
			else if ((strncmp("DBG:SET:I:", (char*)notacircbuff[tempiter], strlen("DBG:SET:I:")) == 0)){
 800298a:	220a      	movs	r2, #10
 800298c:	4631      	mov	r1, r6
 800298e:	488a      	ldr	r0, [pc, #552]	; (8002bb8 <main+0xdc8>)
 8002990:	f00b f9c2 	bl	800dd18 <strncmp>
 8002994:	4607      	mov	r7, r0
 8002996:	2800      	cmp	r0, #0
 8002998:	d073      	beq.n	8002a82 <main+0xc92>
			else if ((strncmp("DBG:SET:D:", (char*)notacircbuff[tempiter], strlen("DBG:SET:D:")) == 0)){
 800299a:	220a      	movs	r2, #10
 800299c:	4631      	mov	r1, r6
 800299e:	4887      	ldr	r0, [pc, #540]	; (8002bbc <main+0xdcc>)
 80029a0:	f00b f9ba 	bl	800dd18 <strncmp>
 80029a4:	4607      	mov	r7, r0
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d060      	beq.n	8002a6c <main+0xc7c>
			else if ((strncmp("DBG:MEAS:DBG?", (char*)notacircbuff[tempiter], strlen("DBG:MEAS:DBG?")) == 0)){
 80029aa:	220d      	movs	r2, #13
 80029ac:	4631      	mov	r1, r6
 80029ae:	4884      	ldr	r0, [pc, #528]	; (8002bc0 <main+0xdd0>)
 80029b0:	f00b f9b2 	bl	800dd18 <strncmp>
 80029b4:	4607      	mov	r7, r0
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d13d      	bne.n	8002a36 <main+0xc46>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", swi_num, op_num);
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <main+0xdd4>)
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f7fd fd4b 	bl	8000458 <__aeabi_f2d>
 80029c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029c6:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <main+0xdd8>)
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f7fd fd45 	bl	8000458 <__aeabi_f2d>
 80029ce:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <main+0xddc>)
 80029d0:	e9cd 0100 	strd	r0, r1, [sp]
 80029d4:	2140      	movs	r1, #64	; 0x40
 80029d6:	487e      	ldr	r0, [pc, #504]	; (8002bd0 <main+0xde0>)
 80029d8:	f00b f96a 	bl	800dcb0 <sniprintf>
 80029dc:	e714      	b.n	8002808 <main+0xa18>
		ADC1->HTR = 0;
 80029de:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <main+0xde4>)
 80029e0:	629f      	str	r7, [r3, #40]	; 0x28
 80029e2:	e44b      	b.n	800227c <main+0x48c>
		ADC1->HTR = 4095;
 80029e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80029e8:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <main+0xde4>)
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
 80029ec:	e446      	b.n	800227c <main+0x48c>
		  v2 = (uint16_t)temp;
 80029ee:	4630      	mov	r0, r6
 80029f0:	f7fe fbcc 	bl	800118c <__aeabi_f2uiz>
 80029f4:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <main+0xde8>)
 80029f6:	8018      	strh	r0, [r3, #0]
 80029f8:	e602      	b.n	8002600 <main+0x810>
		  v2 = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	4a76      	ldr	r2, [pc, #472]	; (8002bd8 <main+0xde8>)
 80029fe:	8013      	strh	r3, [r2, #0]
 8002a00:	e5fe      	b.n	8002600 <main+0x810>
			  tmpv1 = 1;
 8002a02:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8002a06:	e5d0      	b.n	80025aa <main+0x7ba>
			  tmpv1 = 4094;
 8002a08:	4f74      	ldr	r7, [pc, #464]	; (8002bdc <main+0xdec>)
 8002a0a:	e5ce      	b.n	80025aa <main+0x7ba>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2140      	movs	r1, #64	; 0x40
 8002a10:	4873      	ldr	r0, [pc, #460]	; (8002be0 <main+0xdf0>)
 8002a12:	f006 fb4d 	bl	80090b0 <HAL_GPIO_WritePin>
 8002a16:	e623      	b.n	8002660 <main+0x870>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <main+0xde8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	4870      	ldr	r0, [pc, #448]	; (8002be4 <main+0xdf4>)
 8002a22:	f005 ffcf 	bl	80089c4 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002a26:	2200      	movs	r2, #0
 8002a28:	4b6f      	ldr	r3, [pc, #444]	; (8002be8 <main+0xdf8>)
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	486d      	ldr	r0, [pc, #436]	; (8002be4 <main+0xdf4>)
 8002a30:	f005 ffc8 	bl	80089c4 <HAL_DAC_SetValue>
 8002a34:	e605      	b.n	8002642 <main+0x852>
				snprintf((char*)MSG, 64, "ERROR: INVALID COMMAND\n");
 8002a36:	4f66      	ldr	r7, [pc, #408]	; (8002bd0 <main+0xde0>)
 8002a38:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8002bec <main+0xdfc>
 8002a3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002a40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a42:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002a46:	e887 0003 	stmia.w	r7, {r0, r1}
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002a4a:	f1a7 0010 	sub.w	r0, r7, #16
 8002a4e:	f7fd fb97 	bl	8000180 <strlen>
 8002a52:	4601      	mov	r1, r0
 8002a54:	f1a7 0010 	sub.w	r0, r7, #16
 8002a58:	b289      	uxth	r1, r1
 8002a5a:	f00a fa67 	bl	800cf2c <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	2100      	movs	r1, #0
 8002a62:	f1a7 0010 	sub.w	r0, r7, #16
 8002a66:	f00a fcbb 	bl	800d3e0 <memset>
 8002a6a:	e460      	b.n	800232e <main+0x53e>
				D = (float)atof((char*)notacircbuff[tempiter] + 10);
 8002a6c:	f106 000a 	add.w	r0, r6, #10
 8002a70:	f00a fc88 	bl	800d384 <atof>
 8002a74:	f7fe f840 	bl	8000af8 <__aeabi_d2f>
 8002a78:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <main+0xe00>)
 8002a7a:	6018      	str	r0, [r3, #0]
				snprintf((char*)MSG, 64, "\n");
 8002a7c:	230a      	movs	r3, #10
 8002a7e:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002a80:	e6c2      	b.n	8002808 <main+0xa18>
				I = (float)atof((char*)notacircbuff[tempiter] + 10);
 8002a82:	f106 000a 	add.w	r0, r6, #10
 8002a86:	f00a fc7d 	bl	800d384 <atof>
 8002a8a:	f7fe f835 	bl	8000af8 <__aeabi_d2f>
 8002a8e:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <main+0xe04>)
 8002a90:	6018      	str	r0, [r3, #0]
				snprintf((char*)MSG, 64, "\n");
 8002a92:	230a      	movs	r3, #10
 8002a94:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002a96:	e6b7      	b.n	8002808 <main+0xa18>
				P = (float)atof((char*)notacircbuff[tempiter] + 10);
 8002a98:	f106 000a 	add.w	r0, r6, #10
 8002a9c:	f00a fc72 	bl	800d384 <atof>
 8002aa0:	f7fe f82a 	bl	8000af8 <__aeabi_d2f>
 8002aa4:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <main+0xe08>)
 8002aa6:	6018      	str	r0, [r3, #0]
				snprintf((char*)MSG, 64, "\n");
 8002aa8:	230a      	movs	r3, #10
 8002aaa:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002aac:	e432      	b.n	8002314 <main+0x524>
				CDC_Transmit_FS((uint8_t*)"\n", strlen("\n"));
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4852      	ldr	r0, [pc, #328]	; (8002bfc <main+0xe0c>)
 8002ab2:	f00a fa3b 	bl	800cf2c <CDC_Transmit_FS>
 8002ab6:	e43a      	b.n	800232e <main+0x53e>
				CDC_Transmit_FS((uint8_t*)"493 Lab Power Supply\n", strlen("493 Lab Power Supply\n"));
 8002ab8:	2115      	movs	r1, #21
 8002aba:	4851      	ldr	r0, [pc, #324]	; (8002c00 <main+0xe10>)
 8002abc:	f00a fa36 	bl	800cf2c <CDC_Transmit_FS>
 8002ac0:	e435      	b.n	800232e <main+0x53e>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002ac2:	f106 0809 	add.w	r8, r6, #9
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	f00a fc5c 	bl	800d384 <atof>
 8002acc:	2200      	movs	r2, #0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f7fd ffa0 	bl	8000a14 <__aeabi_dcmpge>
 8002ad4:	b150      	cbz	r0, 8002aec <main+0xcfc>
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	f00a fc54 	bl	800d384 <atof>
 8002adc:	a326      	add	r3, pc, #152	; (adr r3, 8002b78 <main+0xd88>)
 8002ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae2:	f7fd ff8d 	bl	8000a00 <__aeabi_dcmple>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	f040 811c 	bne.w	8002d24 <main+0xf34>
					snprintf((char*)MSG, 64, "ERROR: INVALID NUMBER\n");
 8002aec:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8002bd0 <main+0xde0>
 8002af0:	4f44      	ldr	r7, [pc, #272]	; (8002c04 <main+0xe14>)
 8002af2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002af4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002af8:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002afc:	f8ac 1004 	strh.w	r1, [ip, #4]
 8002b00:	0c09      	lsrs	r1, r1, #16
 8002b02:	f8cc 0000 	str.w	r0, [ip]
 8002b06:	f88c 1006 	strb.w	r1, [ip, #6]
 8002b0a:	e403      	b.n	8002314 <main+0x524>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) <= 12.00)){
 8002b0c:	f106 0809 	add.w	r8, r6, #9
 8002b10:	4640      	mov	r0, r8
 8002b12:	f00a fc37 	bl	800d384 <atof>
 8002b16:	2200      	movs	r2, #0
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f7fd ff7b 	bl	8000a14 <__aeabi_dcmpge>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d0e4      	beq.n	8002aec <main+0xcfc>
 8002b22:	4640      	mov	r0, r8
 8002b24:	f00a fc2e 	bl	800d384 <atof>
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <main+0xe18>)
 8002b2c:	f7fd ff68 	bl	8000a00 <__aeabi_dcmple>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d0db      	beq.n	8002aec <main+0xcfc>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b34:	4640      	mov	r0, r8
 8002b36:	f00a fc25 	bl	800d384 <atof>
					uint8_t tempbuff[8] = {0};
 8002b3a:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b3e:	f7fd ffdb 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002b42:	f7fd fc89 	bl	8000458 <__aeabi_f2d>
					volt_set_main_old = volt_set_main;
 8002b46:	4f31      	ldr	r7, [pc, #196]	; (8002c0c <main+0xe1c>)
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002b48:	e9cd 0100 	strd	r0, r1, [sp]
 8002b4c:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <main+0xe20>)
 8002b4e:	2108      	movs	r1, #8
 8002b50:	a810      	add	r0, sp, #64	; 0x40
 8002b52:	f00b f8ad 	bl	800dcb0 <sniprintf>
					volt_set_main_old = volt_set_main;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <main+0xe24>)
					amp_set_main_old = amp_set_main;
 8002b5a:	6013      	str	r3, [r2, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002b5c:	a810      	add	r0, sp, #64	; 0x40
 8002b5e:	f00a fc11 	bl	800d384 <atof>
 8002b62:	f7fd ffc9 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002b66:	230a      	movs	r3, #10
 8002b68:	8023      	strh	r3, [r4, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002b6a:	6038      	str	r0, [r7, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002b6c:	f7ff bbd2 	b.w	8002314 <main+0x524>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) <= 12.00)){
 8002b70:	f106 080c 	add.w	r8, r6, #12
 8002b74:	e7cc      	b.n	8002b10 <main+0xd20>
 8002b76:	bf00      	nop
 8002b78:	9999999a 	.word	0x9999999a
 8002b7c:	3fe99999 	.word	0x3fe99999
 8002b80:	080118d0 	.word	0x080118d0
 8002b84:	080118e0 	.word	0x080118e0
 8002b88:	200003f6 	.word	0x200003f6
 8002b8c:	080118f0 	.word	0x080118f0
 8002b90:	08011920 	.word	0x08011920
 8002b94:	0801192c 	.word	0x0801192c
 8002b98:	0801193c 	.word	0x0801193c
 8002b9c:	08011948 	.word	0x08011948
 8002ba0:	08011960 	.word	0x08011960
 8002ba4:	0801196c 	.word	0x0801196c
 8002ba8:	0801197c 	.word	0x0801197c
 8002bac:	08011988 	.word	0x08011988
 8002bb0:	080119a8 	.word	0x080119a8
 8002bb4:	080119b0 	.word	0x080119b0
 8002bb8:	080119bc 	.word	0x080119bc
 8002bbc:	080119c8 	.word	0x080119c8
 8002bc0:	080119d4 	.word	0x080119d4
 8002bc4:	20000964 	.word	0x20000964
 8002bc8:	200009b0 	.word	0x200009b0
 8002bcc:	080117e8 	.word	0x080117e8
 8002bd0:	20000390 	.word	0x20000390
 8002bd4:	40012400 	.word	0x40012400
 8002bd8:	20000a7a 	.word	0x20000a7a
 8002bdc:	457fe000 	.word	0x457fe000
 8002be0:	40020000 	.word	0x40020000
 8002be4:	20000458 	.word	0x20000458
 8002be8:	20000a78 	.word	0x20000a78
 8002bec:	080119e4 	.word	0x080119e4
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	20000004 	.word	0x20000004
 8002bf8:	20000008 	.word	0x20000008
 8002bfc:	080119a4 	.word	0x080119a4
 8002c00:	08011990 	.word	0x08011990
 8002c04:	08011908 	.word	0x08011908
 8002c08:	40280000 	.word	0x40280000
 8002c0c:	20000a80 	.word	0x20000a80
 8002c10:	08011900 	.word	0x08011900
 8002c14:	20000a84 	.word	0x20000a84
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002c18:	f106 0809 	add.w	r8, r6, #9
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	f00a fbb1 	bl	800d384 <atof>
 8002c22:	2200      	movs	r2, #0
 8002c24:	2300      	movs	r3, #0
 8002c26:	f7fd fef5 	bl	8000a14 <__aeabi_dcmpge>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	f43f af5e 	beq.w	8002aec <main+0xcfc>
 8002c30:	4640      	mov	r0, r8
 8002c32:	f00a fba7 	bl	800d384 <atof>
 8002c36:	2200      	movs	r2, #0
 8002c38:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <main+0xf68>)
 8002c3a:	f7fd fee1 	bl	8000a00 <__aeabi_dcmple>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	f43f af54 	beq.w	8002aec <main+0xcfc>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002c44:	4640      	mov	r0, r8
 8002c46:	f00a fb9d 	bl	800d384 <atof>
					uint8_t tempbuff[8] = {0};
 8002c4a:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002c4e:	f7fd ff53 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002c52:	f7fd fc01 	bl	8000458 <__aeabi_f2d>
 8002c56:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <main+0xf6c>)
 8002c58:	e9cd 0100 	strd	r0, r1, [sp]
 8002c5c:	2108      	movs	r1, #8
 8002c5e:	a810      	add	r0, sp, #64	; 0x40
 8002c60:	f00b f826 	bl	800dcb0 <sniprintf>
					volt_set_aux = (float)atof((char*)tempbuff);
 8002c64:	a810      	add	r0, sp, #64	; 0x40
 8002c66:	f00a fb8d 	bl	800d384 <atof>
 8002c6a:	f7fd ff45 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002c6e:	230a      	movs	r3, #10
					volt_set_aux = (float)atof((char*)tempbuff);
 8002c70:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <main+0xf70>)
					snprintf((char*)MSG, 64, "\n");
 8002c72:	8023      	strh	r3, [r4, #0]
					volt_set_aux = (float)atof((char*)tempbuff);
 8002c74:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002c76:	f7ff bb4d 	b.w	8002314 <main+0x524>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) <= 12.00)){
 8002c7a:	f106 070c 	add.w	r7, r6, #12
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f00a fb80 	bl	800d384 <atof>
 8002c84:	2200      	movs	r2, #0
 8002c86:	2300      	movs	r3, #0
 8002c88:	f7fd fec4 	bl	8000a14 <__aeabi_dcmpge>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	f43f af2d 	beq.w	8002aec <main+0xcfc>
 8002c92:	4638      	mov	r0, r7
 8002c94:	f00a fb76 	bl	800d384 <atof>
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <main+0xf68>)
 8002c9c:	f7fd feb0 	bl	8000a00 <__aeabi_dcmple>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	f43f af23 	beq.w	8002aec <main+0xcfc>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 12);
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	f00a fb6c 	bl	800d384 <atof>
					uint8_t tempbuff[8] = {0};
 8002cac:	2300      	movs	r3, #0
 8002cae:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002cb2:	e7cc      	b.n	8002c4e <main+0xe5e>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002cb4:	f106 0809 	add.w	r8, r6, #9
 8002cb8:	4640      	mov	r0, r8
 8002cba:	f00a fb63 	bl	800d384 <atof>
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f7fd fea7 	bl	8000a14 <__aeabi_dcmpge>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	f43f af10 	beq.w	8002aec <main+0xcfc>
 8002ccc:	4640      	mov	r0, r8
 8002cce:	f00a fb59 	bl	800d384 <atof>
 8002cd2:	a31f      	add	r3, pc, #124	; (adr r3, 8002d50 <main+0xf60>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fe92 	bl	8000a00 <__aeabi_dcmple>
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	f43f af05 	beq.w	8002aec <main+0xcfc>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	f00a fb4e 	bl	800d384 <atof>
					uint8_t tempbuff[8] = {0};
 8002ce8:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002cec:	f7fd ff04 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002cf0:	f7fd fbb2 	bl	8000458 <__aeabi_f2d>
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <main+0xf74>)
 8002cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	a810      	add	r0, sp, #64	; 0x40
 8002cfe:	f00a ffd7 	bl	800dcb0 <sniprintf>
					amp_set_aux = (float)atof((char*)tempbuff);
 8002d02:	a810      	add	r0, sp, #64	; 0x40
 8002d04:	f00a fb3e 	bl	800d384 <atof>
 8002d08:	f7fd fef6 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002d0c:	230a      	movs	r3, #10
					amp_set_aux = (float)atof((char*)tempbuff);
 8002d0e:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <main+0xf78>)
					snprintf((char*)MSG, 64, "\n");
 8002d10:	8023      	strh	r3, [r4, #0]
					amp_set_aux = (float)atof((char*)tempbuff);
 8002d12:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002d14:	f7ff bafe 	b.w	8002314 <main+0x524>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) <= 0.80)){
 8002d18:	f106 080c 	add.w	r8, r6, #12
 8002d1c:	e7cc      	b.n	8002cb8 <main+0xec8>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) <= 0.80)){
 8002d1e:	f106 080c 	add.w	r8, r6, #12
 8002d22:	e6d0      	b.n	8002ac6 <main+0xcd6>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002d24:	4640      	mov	r0, r8
 8002d26:	f00a fb2d 	bl	800d384 <atof>
					uint8_t tempbuff[8] = {0};
 8002d2a:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002d2e:	f7fd fee3 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002d32:	f7fd fb91 	bl	8000458 <__aeabi_f2d>
					amp_set_main_old = amp_set_main;
 8002d36:	4f0d      	ldr	r7, [pc, #52]	; (8002d6c <main+0xf7c>)
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002d38:	e9cd 0100 	strd	r0, r1, [sp]
 8002d3c:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <main+0xf74>)
 8002d3e:	2108      	movs	r1, #8
 8002d40:	a810      	add	r0, sp, #64	; 0x40
 8002d42:	f00a ffb5 	bl	800dcb0 <sniprintf>
					amp_set_main_old = amp_set_main;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <main+0xf80>)
 8002d4a:	e706      	b.n	8002b5a <main+0xd6a>
 8002d4c:	f3af 8000 	nop.w
 8002d50:	9999999a 	.word	0x9999999a
 8002d54:	3fe99999 	.word	0x3fe99999
 8002d58:	40280000 	.word	0x40280000
 8002d5c:	08011900 	.word	0x08011900
 8002d60:	20000a7c 	.word	0x20000a7c
 8002d64:	08011958 	.word	0x08011958
 8002d68:	200003e8 	.word	0x200003e8
 8002d6c:	200003ec 	.word	0x200003ec
 8002d70:	200003f0 	.word	0x200003f0

08002d74 <lcd_psu_init>:
void lcd_psu_init(void){
 8002d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d78:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d7a:	49bb      	ldr	r1, [pc, #748]	; (8003068 <lcd_psu_init+0x2f4>)
void lcd_psu_init(void){
 8002d7c:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d7e:	48bb      	ldr	r0, [pc, #748]	; (800306c <lcd_psu_init+0x2f8>)
 8002d80:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d82:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d84:	aa03      	add	r2, sp, #12
 8002d86:	214e      	movs	r1, #78	; 0x4e
 8002d88:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d8a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d8c:	f006 fa72 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d90:	2356      	movs	r3, #86	; 0x56
 8002d92:	4db7      	ldr	r5, [pc, #732]	; (8003070 <lcd_psu_init+0x2fc>)
	data_l = ((data<<4)&0xf0);
 8002d94:	011a      	lsls	r2, r3, #4
 8002d96:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d9c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002da0:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002da4:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002da8:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dac:	2304      	movs	r3, #4
 8002dae:	214e      	movs	r1, #78	; 0x4e
 8002db0:	4638      	mov	r0, r7
 8002db2:	aa03      	add	r2, sp, #12
 8002db4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002db6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dba:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dbe:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dc2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dc6:	f006 fa55 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002dca:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e0      	bne.n	8002d94 <lcd_psu_init+0x20>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dd2:	49a8      	ldr	r1, [pc, #672]	; (8003074 <lcd_psu_init+0x300>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	aa03      	add	r2, sp, #12
 8002dd8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dda:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ddc:	48a3      	ldr	r0, [pc, #652]	; (800306c <lcd_psu_init+0x2f8>)
 8002dde:	214e      	movs	r1, #78	; 0x4e
 8002de0:	f006 fa48 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002de4:	49a4      	ldr	r1, [pc, #656]	; (8003078 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002de6:	2304      	movs	r3, #4
 8002de8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dea:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dec:	489f      	ldr	r0, [pc, #636]	; (800306c <lcd_psu_init+0x2f8>)
 8002dee:	214e      	movs	r1, #78	; 0x4e
 8002df0:	aa03      	add	r2, sp, #12
 8002df2:	f006 fa3f 	bl	8009274 <HAL_I2C_Master_Transmit>
 8002df6:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002df8:	2356      	movs	r3, #86	; 0x56
 8002dfa:	4da0      	ldr	r5, [pc, #640]	; (800307c <lcd_psu_init+0x308>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dfc:	4f9b      	ldr	r7, [pc, #620]	; (800306c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002dfe:	011a      	lsls	r2, r3, #4
 8002e00:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e06:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e0a:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e0e:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e12:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e16:	2304      	movs	r3, #4
 8002e18:	214e      	movs	r1, #78	; 0x4e
 8002e1a:	4638      	mov	r0, r7
 8002e1c:	aa03      	add	r2, sp, #12
 8002e1e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e20:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e24:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e28:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e2c:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e30:	f006 fa20 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e34:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e0      	bne.n	8002dfe <lcd_psu_init+0x8a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e3c:	4990      	ldr	r1, [pc, #576]	; (8003080 <lcd_psu_init+0x30c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e3e:	2304      	movs	r3, #4
 8002e40:	aa03      	add	r2, sp, #12
 8002e42:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e44:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e46:	4889      	ldr	r0, [pc, #548]	; (800306c <lcd_psu_init+0x2f8>)
 8002e48:	214e      	movs	r1, #78	; 0x4e
 8002e4a:	f006 fa13 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e4e:	498d      	ldr	r1, [pc, #564]	; (8003084 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e50:	2304      	movs	r3, #4
 8002e52:	aa03      	add	r2, sp, #12
 8002e54:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e56:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e58:	4884      	ldr	r0, [pc, #528]	; (800306c <lcd_psu_init+0x2f8>)
 8002e5a:	214e      	movs	r1, #78	; 0x4e
 8002e5c:	f006 fa0a 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e60:	4989      	ldr	r1, [pc, #548]	; (8003088 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e62:	2304      	movs	r3, #4
 8002e64:	aa03      	add	r2, sp, #12
 8002e66:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e68:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e6a:	4880      	ldr	r0, [pc, #512]	; (800306c <lcd_psu_init+0x2f8>)
 8002e6c:	214e      	movs	r1, #78	; 0x4e
 8002e6e:	f006 fa01 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e72:	4986      	ldr	r1, [pc, #536]	; (800308c <lcd_psu_init+0x318>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e74:	2304      	movs	r3, #4
 8002e76:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e78:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e7a:	487c      	ldr	r0, [pc, #496]	; (800306c <lcd_psu_init+0x2f8>)
 8002e7c:	214e      	movs	r1, #78	; 0x4e
 8002e7e:	aa03      	add	r2, sp, #12
 8002e80:	f006 f9f8 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e84:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e86:	2341      	movs	r3, #65	; 0x41
 8002e88:	4d81      	ldr	r5, [pc, #516]	; (8003090 <lcd_psu_init+0x31c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e8a:	4f78      	ldr	r7, [pc, #480]	; (800306c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002e8c:	011a      	lsls	r2, r3, #4
 8002e8e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e94:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e98:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e9c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ea0:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	214e      	movs	r1, #78	; 0x4e
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	aa03      	add	r2, sp, #12
 8002eac:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eae:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002eb2:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eb6:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002eba:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ebe:	f006 f9d9 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ec2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e0      	bne.n	8002e8c <lcd_psu_init+0x118>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002eca:	4972      	ldr	r1, [pc, #456]	; (8003094 <lcd_psu_init+0x320>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ecc:	2304      	movs	r3, #4
 8002ece:	aa03      	add	r2, sp, #12
 8002ed0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ed2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ed4:	4865      	ldr	r0, [pc, #404]	; (800306c <lcd_psu_init+0x2f8>)
 8002ed6:	214e      	movs	r1, #78	; 0x4e
 8002ed8:	f006 f9cc 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002edc:	4966      	ldr	r1, [pc, #408]	; (8003078 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ede:	2304      	movs	r3, #4
 8002ee0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ee2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ee4:	4861      	ldr	r0, [pc, #388]	; (800306c <lcd_psu_init+0x2f8>)
 8002ee6:	214e      	movs	r1, #78	; 0x4e
 8002ee8:	aa03      	add	r2, sp, #12
 8002eea:	f006 f9c3 	bl	8009274 <HAL_I2C_Master_Transmit>
 8002eee:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002ef0:	2341      	movs	r3, #65	; 0x41
 8002ef2:	4d69      	ldr	r5, [pc, #420]	; (8003098 <lcd_psu_init+0x324>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ef4:	4f5d      	ldr	r7, [pc, #372]	; (800306c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002ef6:	011a      	lsls	r2, r3, #4
 8002ef8:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002efe:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f02:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f06:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f0a:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f0e:	2304      	movs	r3, #4
 8002f10:	214e      	movs	r1, #78	; 0x4e
 8002f12:	4638      	mov	r0, r7
 8002f14:	aa03      	add	r2, sp, #12
 8002f16:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f18:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f1c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f20:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f24:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f28:	f006 f9a4 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f2c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e0      	bne.n	8002ef6 <lcd_psu_init+0x182>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f34:	4959      	ldr	r1, [pc, #356]	; (800309c <lcd_psu_init+0x328>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f36:	2304      	movs	r3, #4
 8002f38:	aa03      	add	r2, sp, #12
 8002f3a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f3c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f3e:	484b      	ldr	r0, [pc, #300]	; (800306c <lcd_psu_init+0x2f8>)
 8002f40:	214e      	movs	r1, #78	; 0x4e
 8002f42:	f006 f997 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f46:	494f      	ldr	r1, [pc, #316]	; (8003084 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f48:	2304      	movs	r3, #4
 8002f4a:	aa03      	add	r2, sp, #12
 8002f4c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f4e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f50:	4846      	ldr	r0, [pc, #280]	; (800306c <lcd_psu_init+0x2f8>)
 8002f52:	214e      	movs	r1, #78	; 0x4e
 8002f54:	f006 f98e 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f58:	494b      	ldr	r1, [pc, #300]	; (8003088 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	aa03      	add	r2, sp, #12
 8002f5e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f60:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f62:	4842      	ldr	r0, [pc, #264]	; (800306c <lcd_psu_init+0x2f8>)
 8002f64:	214e      	movs	r1, #78	; 0x4e
 8002f66:	f006 f985 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f6a:	494d      	ldr	r1, [pc, #308]	; (80030a0 <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f70:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f72:	483e      	ldr	r0, [pc, #248]	; (800306c <lcd_psu_init+0x2f8>)
 8002f74:	214e      	movs	r1, #78	; 0x4e
 8002f76:	aa03      	add	r2, sp, #12
 8002f78:	f006 f97c 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f7c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f7e:	2356      	movs	r3, #86	; 0x56
 8002f80:	4d48      	ldr	r5, [pc, #288]	; (80030a4 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f82:	4f3a      	ldr	r7, [pc, #232]	; (800306c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002f84:	011a      	lsls	r2, r3, #4
 8002f86:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f8c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f90:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f94:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f98:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	214e      	movs	r1, #78	; 0x4e
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	aa03      	add	r2, sp, #12
 8002fa4:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fa6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002faa:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fae:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fb2:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fb6:	f006 f95d 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e0      	bne.n	8002f84 <lcd_psu_init+0x210>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fc2:	4939      	ldr	r1, [pc, #228]	; (80030a8 <lcd_psu_init+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	aa03      	add	r2, sp, #12
 8002fc8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fca:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fcc:	4827      	ldr	r0, [pc, #156]	; (800306c <lcd_psu_init+0x2f8>)
 8002fce:	214e      	movs	r1, #78	; 0x4e
 8002fd0:	f006 f950 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fd4:	4928      	ldr	r1, [pc, #160]	; (8003078 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fda:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fdc:	4823      	ldr	r0, [pc, #140]	; (800306c <lcd_psu_init+0x2f8>)
 8002fde:	214e      	movs	r1, #78	; 0x4e
 8002fe0:	aa03      	add	r2, sp, #12
 8002fe2:	f006 f947 	bl	8009274 <HAL_I2C_Master_Transmit>
 8002fe6:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002fe8:	2356      	movs	r3, #86	; 0x56
 8002fea:	4d30      	ldr	r5, [pc, #192]	; (80030ac <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fec:	4f1f      	ldr	r7, [pc, #124]	; (800306c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002fee:	011a      	lsls	r2, r3, #4
 8002ff0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ff6:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ffa:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ffe:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003002:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003006:	2304      	movs	r3, #4
 8003008:	214e      	movs	r1, #78	; 0x4e
 800300a:	4638      	mov	r0, r7
 800300c:	aa03      	add	r2, sp, #12
 800300e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003010:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003014:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003018:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800301c:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003020:	f006 f928 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003024:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e0      	bne.n	8002fee <lcd_psu_init+0x27a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800302c:	4920      	ldr	r1, [pc, #128]	; (80030b0 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800302e:	2304      	movs	r3, #4
 8003030:	aa03      	add	r2, sp, #12
 8003032:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003034:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003036:	480d      	ldr	r0, [pc, #52]	; (800306c <lcd_psu_init+0x2f8>)
 8003038:	214e      	movs	r1, #78	; 0x4e
 800303a:	f006 f91b 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800303e:	4911      	ldr	r1, [pc, #68]	; (8003084 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003040:	2304      	movs	r3, #4
 8003042:	aa03      	add	r2, sp, #12
 8003044:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003046:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003048:	4808      	ldr	r0, [pc, #32]	; (800306c <lcd_psu_init+0x2f8>)
 800304a:	214e      	movs	r1, #78	; 0x4e
 800304c:	f006 f912 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003050:	490d      	ldr	r1, [pc, #52]	; (8003088 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003052:	2304      	movs	r3, #4
 8003054:	aa03      	add	r2, sp, #12
 8003056:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003058:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800305a:	4804      	ldr	r0, [pc, #16]	; (800306c <lcd_psu_init+0x2f8>)
 800305c:	214e      	movs	r1, #78	; 0x4e
 800305e:	f006 f909 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003062:	4914      	ldr	r1, [pc, #80]	; (80030b4 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003064:	2304      	movs	r3, #4
 8003066:	e027      	b.n	80030b8 <lcd_psu_init+0x344>
 8003068:	080c888c 	.word	0x080c888c
 800306c:	20000540 	.word	0x20000540
 8003070:	080119fc 	.word	0x080119fc
 8003074:	989c888c 	.word	0x989c888c
 8003078:	191d090d 	.word	0x191d090d
 800307c:	08011a00 	.word	0x08011a00
 8003080:	c8cc888c 	.word	0xc8cc888c
 8003084:	090d090d 	.word	0x090d090d
 8003088:	a9ad393d 	.word	0xa9ad393d
 800308c:	080cc8cc 	.word	0x080cc8cc
 8003090:	08011a04 	.word	0x08011a04
 8003094:	989cc8cc 	.word	0x989cc8cc
 8003098:	08011a08 	.word	0x08011a08
 800309c:	c8ccc8cc 	.word	0xc8ccc8cc
 80030a0:	484c989c 	.word	0x484c989c
 80030a4:	08011a0c 	.word	0x08011a0c
 80030a8:	d8dc989c 	.word	0xd8dc989c
 80030ac:	08011a10 	.word	0x08011a10
 80030b0:	080ca8ac 	.word	0x080ca8ac
 80030b4:	484cd8dc 	.word	0x484cd8dc
 80030b8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030ba:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030bc:	483d      	ldr	r0, [pc, #244]	; (80031b4 <lcd_psu_init+0x440>)
 80030be:	214e      	movs	r1, #78	; 0x4e
 80030c0:	aa03      	add	r2, sp, #12
 80030c2:	f006 f8d7 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030c6:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80030c8:	2341      	movs	r3, #65	; 0x41
 80030ca:	4d3b      	ldr	r5, [pc, #236]	; (80031b8 <lcd_psu_init+0x444>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030cc:	4f39      	ldr	r7, [pc, #228]	; (80031b4 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 80030ce:	011a      	lsls	r2, r3, #4
 80030d0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80030d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030d6:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030da:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030de:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030e2:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030e6:	2304      	movs	r3, #4
 80030e8:	214e      	movs	r1, #78	; 0x4e
 80030ea:	4638      	mov	r0, r7
 80030ec:	aa03      	add	r2, sp, #12
 80030ee:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030f0:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030f4:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030f8:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030fc:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003100:	f006 f8b8 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003104:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e0      	bne.n	80030ce <lcd_psu_init+0x35a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800310c:	492b      	ldr	r1, [pc, #172]	; (80031bc <lcd_psu_init+0x448>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800310e:	2304      	movs	r3, #4
 8003110:	aa03      	add	r2, sp, #12
 8003112:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003114:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003116:	4827      	ldr	r0, [pc, #156]	; (80031b4 <lcd_psu_init+0x440>)
 8003118:	214e      	movs	r1, #78	; 0x4e
 800311a:	f006 f8ab 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800311e:	4928      	ldr	r1, [pc, #160]	; (80031c0 <lcd_psu_init+0x44c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003120:	2304      	movs	r3, #4
 8003122:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003124:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003126:	4823      	ldr	r0, [pc, #140]	; (80031b4 <lcd_psu_init+0x440>)
 8003128:	214e      	movs	r1, #78	; 0x4e
 800312a:	aa03      	add	r2, sp, #12
 800312c:	f006 f8a2 	bl	8009274 <HAL_I2C_Master_Transmit>
 8003130:	2564      	movs	r5, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8003132:	2341      	movs	r3, #65	; 0x41
 8003134:	4c23      	ldr	r4, [pc, #140]	; (80031c4 <lcd_psu_init+0x450>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003136:	4e1f      	ldr	r6, [pc, #124]	; (80031b4 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 8003138:	011a      	lsls	r2, r3, #4
 800313a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800313c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003140:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003144:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003148:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800314c:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003150:	2304      	movs	r3, #4
 8003152:	214e      	movs	r1, #78	; 0x4e
 8003154:	4630      	mov	r0, r6
 8003156:	aa03      	add	r2, sp, #12
 8003158:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800315a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800315e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003162:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003166:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800316a:	f006 f883 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800316e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e0      	bne.n	8003138 <lcd_psu_init+0x3c4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003176:	4914      	ldr	r1, [pc, #80]	; (80031c8 <lcd_psu_init+0x454>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003178:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800317a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800317c:	2304      	movs	r3, #4
 800317e:	214e      	movs	r1, #78	; 0x4e
 8003180:	9500      	str	r5, [sp, #0]
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <lcd_psu_init+0x440>)
 8003184:	f006 f876 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003188:	4910      	ldr	r1, [pc, #64]	; (80031cc <lcd_psu_init+0x458>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800318a:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800318c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800318e:	2304      	movs	r3, #4
 8003190:	214e      	movs	r1, #78	; 0x4e
 8003192:	9500      	str	r5, [sp, #0]
 8003194:	4807      	ldr	r0, [pc, #28]	; (80031b4 <lcd_psu_init+0x440>)
 8003196:	f006 f86d 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <lcd_psu_init+0x45c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800319c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800319e:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031a0:	214e      	movs	r1, #78	; 0x4e
 80031a2:	aa03      	add	r2, sp, #12
 80031a4:	9500      	str	r5, [sp, #0]
 80031a6:	4803      	ldr	r0, [pc, #12]	; (80031b4 <lcd_psu_init+0x440>)
 80031a8:	f006 f864 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 80031ac:	b004      	add	sp, #16
 80031ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031b2:	bf00      	nop
 80031b4:	20000540 	.word	0x20000540
 80031b8:	08011a14 	.word	0x08011a14
 80031bc:	d8dcd8dc 	.word	0xd8dcd8dc
 80031c0:	191d090d 	.word	0x191d090d
 80031c4:	08011a18 	.word	0x08011a18
 80031c8:	080ce8ec 	.word	0x080ce8ec
 80031cc:	090d090d 	.word	0x090d090d
 80031d0:	a9ad393d 	.word	0xa9ad393d

080031d4 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	4605      	mov	r5, r0
 80031d8:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 80031da:	4608      	mov	r0, r1
 80031dc:	f7fd f93c 	bl	8000458 <__aeabi_f2d>
 80031e0:	4606      	mov	r6, r0
 80031e2:	460f      	mov	r7, r1
 80031e4:	4a9a      	ldr	r2, [pc, #616]	; (8003450 <lcd_update_voltage+0x27c>)
 80031e6:	2106      	movs	r1, #6
 80031e8:	e9cd 6700 	strd	r6, r7, [sp]
 80031ec:	a804      	add	r0, sp, #16
 80031ee:	f00a fd5f 	bl	800dcb0 <sniprintf>
	if(channel == 1){
 80031f2:	2d01      	cmp	r5, #1
 80031f4:	d009      	beq.n	800320a <lcd_update_voltage+0x36>
	else if(channel == 2){
 80031f6:	2d02      	cmp	r5, #2
 80031f8:	f000 80cb 	beq.w	8003392 <lcd_update_voltage+0x1be>
	else if(channel == 3){
 80031fc:	2d03      	cmp	r5, #3
 80031fe:	f000 8135 	beq.w	800346c <lcd_update_voltage+0x298>
	else if(channel == 4){
 8003202:	2d04      	cmp	r5, #4
 8003204:	d068      	beq.n	80032d8 <lcd_update_voltage+0x104>
}
 8003206:	b007      	add	sp, #28
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800320a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800320c:	4a91      	ldr	r2, [pc, #580]	; (8003454 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800320e:	4892      	ldr	r0, [pc, #584]	; (8003458 <lcd_update_voltage+0x284>)
 8003210:	ac03      	add	r4, sp, #12
 8003212:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003214:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003216:	214e      	movs	r1, #78	; 0x4e
 8003218:	4622      	mov	r2, r4
 800321a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800321c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800321e:	f006 f829 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003222:	2320      	movs	r3, #32
 8003224:	4d8d      	ldr	r5, [pc, #564]	; (800345c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003226:	011a      	lsls	r2, r3, #4
 8003228:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800322a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800322e:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003232:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003236:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800323a:	f043 0309 	orr.w	r3, r3, #9
 800323e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003242:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003246:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003248:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800324c:	4622      	mov	r2, r4
 800324e:	214e      	movs	r1, #78	; 0x4e
 8003250:	4638      	mov	r0, r7
 8003252:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003254:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003258:	f006 f80c 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800325c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e0      	bne.n	8003226 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003264:	4a7b      	ldr	r2, [pc, #492]	; (8003454 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003266:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003268:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800326a:	214e      	movs	r1, #78	; 0x4e
 800326c:	4622      	mov	r2, r4
 800326e:	487a      	ldr	r0, [pc, #488]	; (8003458 <lcd_update_voltage+0x284>)
 8003270:	9600      	str	r6, [sp, #0]
 8003272:	f005 ffff 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003276:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800327a:	b30b      	cbz	r3, 80032c0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800327c:	2764      	movs	r7, #100	; 0x64
 800327e:	4e76      	ldr	r6, [pc, #472]	; (8003458 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003280:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8003282:	011a      	lsls	r2, r3, #4
 8003284:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800328a:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800328e:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003292:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003296:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800329a:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800329c:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032a0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032a4:	4622      	mov	r2, r4
 80032a6:	214e      	movs	r1, #78	; 0x4e
 80032a8:	4630      	mov	r0, r6
 80032aa:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032ac:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032b0:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032b4:	f005 ffde 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e0      	bne.n	8003282 <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032c2:	4867      	ldr	r0, [pc, #412]	; (8003460 <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032c6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c8:	4622      	mov	r2, r4
 80032ca:	214e      	movs	r1, #78	; 0x4e
 80032cc:	9500      	str	r5, [sp, #0]
 80032ce:	4862      	ldr	r0, [pc, #392]	; (8003458 <lcd_update_voltage+0x284>)
 80032d0:	f005 ffd0 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 80032d4:	b007      	add	sp, #28
 80032d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032da:	4a62      	ldr	r2, [pc, #392]	; (8003464 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032dc:	485e      	ldr	r0, [pc, #376]	; (8003458 <lcd_update_voltage+0x284>)
 80032de:	ac03      	add	r4, sp, #12
 80032e0:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032e2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032e4:	214e      	movs	r1, #78	; 0x4e
 80032e6:	4622      	mov	r2, r4
 80032e8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032ea:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032ec:	f005 ffc2 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032f0:	2320      	movs	r3, #32
 80032f2:	4d5a      	ldr	r5, [pc, #360]	; (800345c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80032f4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032fa:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80032fe:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003300:	f043 0309 	orr.w	r3, r3, #9
 8003304:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003308:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800330c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003310:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003314:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003318:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800331c:	2304      	movs	r3, #4
 800331e:	4622      	mov	r2, r4
 8003320:	214e      	movs	r1, #78	; 0x4e
 8003322:	4638      	mov	r0, r7
 8003324:	9600      	str	r6, [sp, #0]
 8003326:	f005 ffa5 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800332a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e0      	bne.n	80032f4 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003332:	4a4c      	ldr	r2, [pc, #304]	; (8003464 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003334:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003336:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003338:	214e      	movs	r1, #78	; 0x4e
 800333a:	4622      	mov	r2, r4
 800333c:	4846      	ldr	r0, [pc, #280]	; (8003458 <lcd_update_voltage+0x284>)
 800333e:	9600      	str	r6, [sp, #0]
 8003340:	f005 ff98 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003344:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0b9      	beq.n	80032c0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800334c:	2764      	movs	r7, #100	; 0x64
 800334e:	4e42      	ldr	r6, [pc, #264]	; (8003458 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003350:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8003352:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003358:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800335c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800335e:	f043 0309 	orr.w	r3, r3, #9
 8003362:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003366:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800336a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800336e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003372:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003376:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800337a:	2304      	movs	r3, #4
 800337c:	4622      	mov	r2, r4
 800337e:	214e      	movs	r1, #78	; 0x4e
 8003380:	4630      	mov	r0, r6
 8003382:	9700      	str	r7, [sp, #0]
 8003384:	f005 ff76 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003388:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e0      	bne.n	8003352 <lcd_update_voltage+0x17e>
 8003390:	e796      	b.n	80032c0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003392:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003394:	4a34      	ldr	r2, [pc, #208]	; (8003468 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003396:	4830      	ldr	r0, [pc, #192]	; (8003458 <lcd_update_voltage+0x284>)
 8003398:	ac03      	add	r4, sp, #12
 800339a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800339c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800339e:	214e      	movs	r1, #78	; 0x4e
 80033a0:	4622      	mov	r2, r4
 80033a2:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033a4:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033a6:	f005 ff65 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033aa:	2320      	movs	r3, #32
 80033ac:	4d2b      	ldr	r5, [pc, #172]	; (800345c <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 80033ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033b6:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033ba:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033be:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033c2:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033c6:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033ca:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033ce:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033d2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033d4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033d8:	214e      	movs	r1, #78	; 0x4e
 80033da:	4622      	mov	r2, r4
 80033dc:	4638      	mov	r0, r7
 80033de:	9600      	str	r6, [sp, #0]
 80033e0:	f005 ff48 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e0      	bne.n	80033ae <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033ee:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033f0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033f2:	214e      	movs	r1, #78	; 0x4e
 80033f4:	4622      	mov	r2, r4
 80033f6:	4818      	ldr	r0, [pc, #96]	; (8003458 <lcd_update_voltage+0x284>)
 80033f8:	9600      	str	r6, [sp, #0]
 80033fa:	f005 ff3b 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f43f af5c 	beq.w	80032c0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003408:	2764      	movs	r7, #100	; 0x64
 800340a:	4e13      	ldr	r6, [pc, #76]	; (8003458 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 800340c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800340e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003414:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003416:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800341a:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800341e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003422:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003426:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800342a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800342e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003432:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003434:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003438:	4622      	mov	r2, r4
 800343a:	214e      	movs	r1, #78	; 0x4e
 800343c:	4630      	mov	r0, r6
 800343e:	9700      	str	r7, [sp, #0]
 8003440:	f005 ff18 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003444:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e0      	bne.n	800340e <lcd_update_voltage+0x23a>
 800344c:	e738      	b.n	80032c0 <lcd_update_voltage+0xec>
 800344e:	bf00      	nop
 8003450:	08011900 	.word	0x08011900
 8003454:	383c888c 	.word	0x383c888c
 8003458:	20000540 	.word	0x20000540
 800345c:	08011a1c 	.word	0x08011a1c
 8003460:	696d595d 	.word	0x696d595d
 8003464:	282ca8ac 	.word	0x282ca8ac
 8003468:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800346c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800346e:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003470:	482e      	ldr	r0, [pc, #184]	; (800352c <lcd_update_voltage+0x358>)
 8003472:	ac03      	add	r4, sp, #12
 8003474:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003476:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003478:	214e      	movs	r1, #78	; 0x4e
 800347a:	4622      	mov	r2, r4
 800347c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800347e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003480:	f005 fef8 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003484:	2320      	movs	r3, #32
 8003486:	4d2a      	ldr	r5, [pc, #168]	; (8003530 <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003488:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800348a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800348e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003492:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003494:	f043 0309 	orr.w	r3, r3, #9
 8003498:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800349c:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034a0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034a4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034a8:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034ac:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034b0:	2304      	movs	r3, #4
 80034b2:	4622      	mov	r2, r4
 80034b4:	214e      	movs	r1, #78	; 0x4e
 80034b6:	4638      	mov	r0, r7
 80034b8:	9600      	str	r6, [sp, #0]
 80034ba:	f005 fedb 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034be:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e0      	bne.n	8003488 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034c8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034ca:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034cc:	214e      	movs	r1, #78	; 0x4e
 80034ce:	4622      	mov	r2, r4
 80034d0:	4816      	ldr	r0, [pc, #88]	; (800352c <lcd_update_voltage+0x358>)
 80034d2:	9600      	str	r6, [sp, #0]
 80034d4:	f005 fece 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f43f aeef 	beq.w	80032c0 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034e2:	2764      	movs	r7, #100	; 0x64
 80034e4:	4e11      	ldr	r6, [pc, #68]	; (800352c <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 80034e6:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80034e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034f0:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034f4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034f8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034fc:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003500:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003504:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003508:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800350c:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800350e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003512:	214e      	movs	r1, #78	; 0x4e
 8003514:	4622      	mov	r2, r4
 8003516:	4630      	mov	r0, r6
 8003518:	9700      	str	r7, [sp, #0]
 800351a:	f005 feab 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800351e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e0      	bne.n	80034e8 <lcd_update_voltage+0x314>
 8003526:	e6cb      	b.n	80032c0 <lcd_update_voltage+0xec>
 8003528:	787c989c 	.word	0x787c989c
 800352c:	20000540 	.word	0x20000540
 8003530:	08011a1c 	.word	0x08011a1c

08003534 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8003534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003536:	4605      	mov	r5, r0
 8003538:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 800353a:	4608      	mov	r0, r1
 800353c:	f7fc ff8c 	bl	8000458 <__aeabi_f2d>
 8003540:	4606      	mov	r6, r0
 8003542:	460f      	mov	r7, r1
 8003544:	4a9a      	ldr	r2, [pc, #616]	; (80037b0 <lcd_update_amperage+0x27c>)
 8003546:	2106      	movs	r1, #6
 8003548:	e9cd 6700 	strd	r6, r7, [sp]
 800354c:	a804      	add	r0, sp, #16
 800354e:	f00a fbaf 	bl	800dcb0 <sniprintf>
	if(channel == 1){
 8003552:	2d01      	cmp	r5, #1
 8003554:	d009      	beq.n	800356a <lcd_update_amperage+0x36>
	else if(channel == 2){
 8003556:	2d02      	cmp	r5, #2
 8003558:	f000 80cb 	beq.w	80036f2 <lcd_update_amperage+0x1be>
	else if(channel == 3){
 800355c:	2d03      	cmp	r5, #3
 800355e:	f000 8135 	beq.w	80037cc <lcd_update_amperage+0x298>
	else if(channel == 4){
 8003562:	2d04      	cmp	r5, #4
 8003564:	d068      	beq.n	8003638 <lcd_update_amperage+0x104>
}
 8003566:	b007      	add	sp, #28
 8003568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800356a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800356c:	4a91      	ldr	r2, [pc, #580]	; (80037b4 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800356e:	4892      	ldr	r0, [pc, #584]	; (80037b8 <lcd_update_amperage+0x284>)
 8003570:	ac03      	add	r4, sp, #12
 8003572:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003574:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003576:	214e      	movs	r1, #78	; 0x4e
 8003578:	4622      	mov	r2, r4
 800357a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800357c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800357e:	f005 fe79 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003582:	2320      	movs	r3, #32
 8003584:	4d8d      	ldr	r5, [pc, #564]	; (80037bc <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003586:	011a      	lsls	r2, r3, #4
 8003588:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800358a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800358e:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003592:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003596:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800359a:	f043 0309 	orr.w	r3, r3, #9
 800359e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035a2:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035a6:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035a8:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ac:	4622      	mov	r2, r4
 80035ae:	214e      	movs	r1, #78	; 0x4e
 80035b0:	4638      	mov	r0, r7
 80035b2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035b4:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035b8:	f005 fe5c 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035bc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e0      	bne.n	8003586 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035c4:	4a7b      	ldr	r2, [pc, #492]	; (80037b4 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035c8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ca:	214e      	movs	r1, #78	; 0x4e
 80035cc:	4622      	mov	r2, r4
 80035ce:	487a      	ldr	r0, [pc, #488]	; (80037b8 <lcd_update_amperage+0x284>)
 80035d0:	9600      	str	r6, [sp, #0]
 80035d2:	f005 fe4f 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80035da:	b30b      	cbz	r3, 8003620 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035dc:	2764      	movs	r7, #100	; 0x64
 80035de:	4e76      	ldr	r6, [pc, #472]	; (80037b8 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80035e0:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80035e2:	011a      	lsls	r2, r3, #4
 80035e4:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80035e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035ea:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035ee:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035f2:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035f6:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035fa:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035fc:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003600:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003604:	4622      	mov	r2, r4
 8003606:	214e      	movs	r1, #78	; 0x4e
 8003608:	4630      	mov	r0, r6
 800360a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800360c:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003610:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003614:	f005 fe2e 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003618:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e0      	bne.n	80035e2 <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003620:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003622:	4867      	ldr	r0, [pc, #412]	; (80037c0 <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003624:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003626:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003628:	4622      	mov	r2, r4
 800362a:	214e      	movs	r1, #78	; 0x4e
 800362c:	9500      	str	r5, [sp, #0]
 800362e:	4862      	ldr	r0, [pc, #392]	; (80037b8 <lcd_update_amperage+0x284>)
 8003630:	f005 fe20 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8003634:	b007      	add	sp, #28
 8003636:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003638:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800363a:	4a62      	ldr	r2, [pc, #392]	; (80037c4 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800363c:	485e      	ldr	r0, [pc, #376]	; (80037b8 <lcd_update_amperage+0x284>)
 800363e:	ac03      	add	r4, sp, #12
 8003640:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003642:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003644:	214e      	movs	r1, #78	; 0x4e
 8003646:	4622      	mov	r2, r4
 8003648:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800364a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800364c:	f005 fe12 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003650:	2320      	movs	r3, #32
 8003652:	4d5a      	ldr	r5, [pc, #360]	; (80037bc <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003654:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800365a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800365e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003660:	f043 0309 	orr.w	r3, r3, #9
 8003664:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003668:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800366c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003670:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003674:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003678:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800367c:	2304      	movs	r3, #4
 800367e:	4622      	mov	r2, r4
 8003680:	214e      	movs	r1, #78	; 0x4e
 8003682:	4638      	mov	r0, r7
 8003684:	9600      	str	r6, [sp, #0]
 8003686:	f005 fdf5 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800368a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e0      	bne.n	8003654 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003692:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003694:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003696:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003698:	214e      	movs	r1, #78	; 0x4e
 800369a:	4622      	mov	r2, r4
 800369c:	4846      	ldr	r0, [pc, #280]	; (80037b8 <lcd_update_amperage+0x284>)
 800369e:	9600      	str	r6, [sp, #0]
 80036a0:	f005 fde8 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0b9      	beq.n	8003620 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ac:	2764      	movs	r7, #100	; 0x64
 80036ae:	4e42      	ldr	r6, [pc, #264]	; (80037b8 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80036b0:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80036b2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80036b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036b8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80036bc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036be:	f043 0309 	orr.w	r3, r3, #9
 80036c2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036c6:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036ca:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036ce:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036d2:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036d6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036da:	2304      	movs	r3, #4
 80036dc:	4622      	mov	r2, r4
 80036de:	214e      	movs	r1, #78	; 0x4e
 80036e0:	4630      	mov	r0, r6
 80036e2:	9700      	str	r7, [sp, #0]
 80036e4:	f005 fdc6 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036e8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e0      	bne.n	80036b2 <lcd_update_amperage+0x17e>
 80036f0:	e796      	b.n	8003620 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036f2:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036f4:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036f6:	4830      	ldr	r0, [pc, #192]	; (80037b8 <lcd_update_amperage+0x284>)
 80036f8:	ac03      	add	r4, sp, #12
 80036fa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036fc:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036fe:	214e      	movs	r1, #78	; 0x4e
 8003700:	4622      	mov	r2, r4
 8003702:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003704:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003706:	f005 fdb5 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800370a:	2320      	movs	r3, #32
 800370c:	4d2b      	ldr	r5, [pc, #172]	; (80037bc <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 800370e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003716:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800371a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800371e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003722:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003726:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800372a:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800372e:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003732:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003734:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003738:	214e      	movs	r1, #78	; 0x4e
 800373a:	4622      	mov	r2, r4
 800373c:	4638      	mov	r0, r7
 800373e:	9600      	str	r6, [sp, #0]
 8003740:	f005 fd98 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003744:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e0      	bne.n	800370e <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800374e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003750:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003752:	214e      	movs	r1, #78	; 0x4e
 8003754:	4622      	mov	r2, r4
 8003756:	4818      	ldr	r0, [pc, #96]	; (80037b8 <lcd_update_amperage+0x284>)
 8003758:	9600      	str	r6, [sp, #0]
 800375a:	f005 fd8b 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800375e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f43f af5c 	beq.w	8003620 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003768:	2764      	movs	r7, #100	; 0x64
 800376a:	4e13      	ldr	r6, [pc, #76]	; (80037b8 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800376c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800376e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003774:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003776:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800377a:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800377e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003782:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003786:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800378a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800378e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003792:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003794:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003798:	4622      	mov	r2, r4
 800379a:	214e      	movs	r1, #78	; 0x4e
 800379c:	4630      	mov	r0, r6
 800379e:	9700      	str	r7, [sp, #0]
 80037a0:	f005 fd68 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80037a4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e0      	bne.n	800376e <lcd_update_amperage+0x23a>
 80037ac:	e738      	b.n	8003620 <lcd_update_amperage+0xec>
 80037ae:	bf00      	nop
 80037b0:	08011958 	.word	0x08011958
 80037b4:	383cc8cc 	.word	0x383cc8cc
 80037b8:	20000540 	.word	0x20000540
 80037bc:	08011a1c 	.word	0x08011a1c
 80037c0:	191d494d 	.word	0x191d494d
 80037c4:	282ce8ec 	.word	0x282ce8ec
 80037c8:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037cc:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037ce:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037d0:	482e      	ldr	r0, [pc, #184]	; (800388c <lcd_update_amperage+0x358>)
 80037d2:	ac03      	add	r4, sp, #12
 80037d4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037d6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037d8:	214e      	movs	r1, #78	; 0x4e
 80037da:	4622      	mov	r2, r4
 80037dc:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037de:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037e0:	f005 fd48 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80037e4:	2320      	movs	r3, #32
 80037e6:	4d2a      	ldr	r5, [pc, #168]	; (8003890 <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 80037e8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80037ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037ee:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80037f2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037f4:	f043 0309 	orr.w	r3, r3, #9
 80037f8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037fc:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003800:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003804:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003808:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800380c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003810:	2304      	movs	r3, #4
 8003812:	4622      	mov	r2, r4
 8003814:	214e      	movs	r1, #78	; 0x4e
 8003816:	4638      	mov	r0, r7
 8003818:	9600      	str	r6, [sp, #0]
 800381a:	f005 fd2b 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800381e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e0      	bne.n	80037e8 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003828:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800382a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800382c:	214e      	movs	r1, #78	; 0x4e
 800382e:	4622      	mov	r2, r4
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <lcd_update_amperage+0x358>)
 8003832:	9600      	str	r6, [sp, #0]
 8003834:	f005 fd1e 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003838:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	f43f aeef 	beq.w	8003620 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003842:	2764      	movs	r7, #100	; 0x64
 8003844:	4e11      	ldr	r6, [pc, #68]	; (800388c <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 8003846:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8003848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003850:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003854:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003858:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800385c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003860:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003864:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003868:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800386c:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800386e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003872:	214e      	movs	r1, #78	; 0x4e
 8003874:	4622      	mov	r2, r4
 8003876:	4630      	mov	r0, r6
 8003878:	9700      	str	r7, [sp, #0]
 800387a:	f005 fcfb 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800387e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e0      	bne.n	8003848 <lcd_update_amperage+0x314>
 8003886:	e6cb      	b.n	8003620 <lcd_update_amperage+0xec>
 8003888:	787cd8dc 	.word	0x787cd8dc
 800388c:	20000540 	.word	0x20000540
 8003890:	08011a1c 	.word	0x08011a1c

08003894 <lcd_psu_update>:
void lcd_psu_update(void){
 8003894:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003896:	2464      	movs	r4, #100	; 0x64
void lcd_psu_update(void){
 8003898:	b084      	sub	sp, #16
	lcd_psu_init();
 800389a:	f7ff fa6b 	bl	8002d74 <lcd_psu_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800389e:	49a5      	ldr	r1, [pc, #660]	; (8003b34 <lcd_psu_update+0x2a0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038a0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80038a2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038a4:	48a4      	ldr	r0, [pc, #656]	; (8003b38 <lcd_psu_update+0x2a4>)
 80038a6:	214e      	movs	r1, #78	; 0x4e
 80038a8:	aa03      	add	r2, sp, #12
 80038aa:	9400      	str	r4, [sp, #0]
 80038ac:	f005 fce2 	bl	8009274 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 80038b0:	4ba2      	ldr	r3, [pc, #648]	; (8003b3c <lcd_psu_update+0x2a8>)
 80038b2:	781d      	ldrb	r5, [r3, #0]
 80038b4:	b165      	cbz	r5, 80038d0 <lcd_psu_update+0x3c>
	else if(kpenum == V1){
 80038b6:	2d01      	cmp	r5, #1
 80038b8:	f000 815e 	beq.w	8003b78 <lcd_psu_update+0x2e4>
	else if(kpenum == V2){
 80038bc:	2d03      	cmp	r5, #3
 80038be:	d032      	beq.n	8003926 <lcd_psu_update+0x92>
	else if(kpenum == A1){
 80038c0:	2d02      	cmp	r5, #2
 80038c2:	f000 8299 	beq.w	8003df8 <lcd_psu_update+0x564>
	else if(kpenum == A2){
 80038c6:	2d04      	cmp	r5, #4
 80038c8:	f000 8316 	beq.w	8003ef8 <lcd_psu_update+0x664>
}
 80038cc:	b004      	add	sp, #16
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 80038d0:	4b9b      	ldr	r3, [pc, #620]	; (8003b40 <lcd_psu_update+0x2ac>)
 80038d2:	2001      	movs	r0, #1
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	f7ff fc7d 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80038da:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <lcd_psu_update+0x2b0>)
 80038dc:	2001      	movs	r0, #1
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	f7ff fe28 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80038e4:	4b98      	ldr	r3, [pc, #608]	; (8003b48 <lcd_psu_update+0x2b4>)
 80038e6:	2002      	movs	r0, #2
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	f7ff fc73 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80038ee:	4b97      	ldr	r3, [pc, #604]	; (8003b4c <lcd_psu_update+0x2b8>)
 80038f0:	2002      	movs	r0, #2
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	f7ff fe1e 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80038f8:	4b95      	ldr	r3, [pc, #596]	; (8003b50 <lcd_psu_update+0x2bc>)
 80038fa:	2003      	movs	r0, #3
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	f7ff fc69 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003902:	4b94      	ldr	r3, [pc, #592]	; (8003b54 <lcd_psu_update+0x2c0>)
 8003904:	2003      	movs	r0, #3
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	f7ff fe14 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 800390c:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <lcd_psu_update+0x2c4>)
 800390e:	2004      	movs	r0, #4
 8003910:	6819      	ldr	r1, [r3, #0]
 8003912:	f7ff fc5f 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003916:	2004      	movs	r0, #4
 8003918:	4b90      	ldr	r3, [pc, #576]	; (8003b5c <lcd_psu_update+0x2c8>)
 800391a:	6819      	ldr	r1, [r3, #0]
}
 800391c:	b004      	add	sp, #16
 800391e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 8003922:	f7ff be07 	b.w	8003534 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 8003926:	4b86      	ldr	r3, [pc, #536]	; (8003b40 <lcd_psu_update+0x2ac>)
 8003928:	2001      	movs	r0, #1
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	f7ff fc52 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003930:	4b84      	ldr	r3, [pc, #528]	; (8003b44 <lcd_psu_update+0x2b0>)
 8003932:	2001      	movs	r0, #1
 8003934:	6819      	ldr	r1, [r3, #0]
 8003936:	f7ff fdfd 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 800393a:	4b83      	ldr	r3, [pc, #524]	; (8003b48 <lcd_psu_update+0x2b4>)
 800393c:	2002      	movs	r0, #2
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	f7ff fc48 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003944:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <lcd_psu_update+0x2b8>)
 8003946:	2002      	movs	r0, #2
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	f7ff fdf3 	bl	8003534 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 800394e:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <lcd_psu_update+0x2c0>)
 8003950:	4628      	mov	r0, r5
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	f7ff fdee 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003958:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <lcd_psu_update+0x2c4>)
 800395a:	2004      	movs	r0, #4
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	f7ff fc39 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003962:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <lcd_psu_update+0x2c8>)
 8003964:	2004      	movs	r0, #4
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	f7ff fde4 	bl	8003534 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800396c:	497c      	ldr	r1, [pc, #496]	; (8003b60 <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800396e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003970:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003972:	4871      	ldr	r0, [pc, #452]	; (8003b38 <lcd_psu_update+0x2a4>)
 8003974:	214e      	movs	r1, #78	; 0x4e
 8003976:	aa03      	add	r2, sp, #12
 8003978:	9400      	str	r4, [sp, #0]
 800397a:	f005 fc7b 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800397e:	2320      	movs	r3, #32
 8003980:	4d78      	ldr	r5, [pc, #480]	; (8003b64 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003982:	4e6d      	ldr	r6, [pc, #436]	; (8003b38 <lcd_psu_update+0x2a4>)
	data_l = ((data<<4)&0xf0);
 8003984:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800398a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800398e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003990:	f043 0309 	orr.w	r3, r3, #9
 8003994:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003998:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800399c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039a0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039a4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039a8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039ac:	2304      	movs	r3, #4
 80039ae:	214e      	movs	r1, #78	; 0x4e
 80039b0:	4630      	mov	r0, r6
 80039b2:	9400      	str	r4, [sp, #0]
 80039b4:	aa03      	add	r2, sp, #12
 80039b6:	f005 fc5d 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80039ba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e0      	bne.n	8003984 <lcd_psu_update+0xf0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80039c2:	4967      	ldr	r1, [pc, #412]	; (8003b60 <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039c4:	2304      	movs	r3, #4
 80039c6:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80039c8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039ca:	485b      	ldr	r0, [pc, #364]	; (8003b38 <lcd_psu_update+0x2a4>)
 80039cc:	214e      	movs	r1, #78	; 0x4e
 80039ce:	9400      	str	r4, [sp, #0]
 80039d0:	f005 fc50 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80039d4:	4964      	ldr	r1, [pc, #400]	; (8003b68 <lcd_psu_update+0x2d4>)
		if(keypadarr[0] != 'z'){
 80039d6:	4d65      	ldr	r5, [pc, #404]	; (8003b6c <lcd_psu_update+0x2d8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039d8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80039da:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039dc:	4856      	ldr	r0, [pc, #344]	; (8003b38 <lcd_psu_update+0x2a4>)
 80039de:	214e      	movs	r1, #78	; 0x4e
 80039e0:	aa03      	add	r2, sp, #12
 80039e2:	9400      	str	r4, [sp, #0]
 80039e4:	f005 fc46 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80039e8:	782b      	ldrb	r3, [r5, #0]
 80039ea:	2b7a      	cmp	r3, #122	; 0x7a
 80039ec:	d01a      	beq.n	8003a24 <lcd_psu_update+0x190>
	data_u = (data&0xf0);
 80039ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039f6:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039fa:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039fe:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a02:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a06:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a0a:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a0e:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a12:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a16:	2304      	movs	r3, #4
 8003a18:	214e      	movs	r1, #78	; 0x4e
 8003a1a:	4847      	ldr	r0, [pc, #284]	; (8003b38 <lcd_psu_update+0x2a4>)
 8003a1c:	9400      	str	r4, [sp, #0]
 8003a1e:	aa03      	add	r2, sp, #12
 8003a20:	f005 fc28 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003a24:	786b      	ldrb	r3, [r5, #1]
 8003a26:	2b7a      	cmp	r3, #122	; 0x7a
 8003a28:	d01b      	beq.n	8003a62 <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a2a:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003a2c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a32:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003a36:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a38:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a3c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a40:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a44:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a48:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a4c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a50:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a54:	2304      	movs	r3, #4
 8003a56:	214e      	movs	r1, #78	; 0x4e
 8003a58:	4837      	ldr	r0, [pc, #220]	; (8003b38 <lcd_psu_update+0x2a4>)
 8003a5a:	aa03      	add	r2, sp, #12
 8003a5c:	9400      	str	r4, [sp, #0]
 8003a5e:	f005 fc09 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003a62:	78ab      	ldrb	r3, [r5, #2]
 8003a64:	2b7a      	cmp	r3, #122	; 0x7a
 8003a66:	d01b      	beq.n	8003aa0 <lcd_psu_update+0x20c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a68:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003a6a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a70:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003a74:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a76:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a7a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a7e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a82:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a86:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a8a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a8e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a92:	2304      	movs	r3, #4
 8003a94:	214e      	movs	r1, #78	; 0x4e
 8003a96:	4828      	ldr	r0, [pc, #160]	; (8003b38 <lcd_psu_update+0x2a4>)
 8003a98:	aa03      	add	r2, sp, #12
 8003a9a:	9400      	str	r4, [sp, #0]
 8003a9c:	f005 fbea 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003aa0:	78eb      	ldrb	r3, [r5, #3]
 8003aa2:	2b7a      	cmp	r3, #122	; 0x7a
 8003aa4:	d01b      	beq.n	8003ade <lcd_psu_update+0x24a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003aa6:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003aa8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003aae:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003ab2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ab4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ab8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003abc:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ac0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ac4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ac8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003acc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	214e      	movs	r1, #78	; 0x4e
 8003ad4:	4818      	ldr	r0, [pc, #96]	; (8003b38 <lcd_psu_update+0x2a4>)
 8003ad6:	aa03      	add	r2, sp, #12
 8003ad8:	9400      	str	r4, [sp, #0]
 8003ada:	f005 fbcb 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003ade:	792b      	ldrb	r3, [r5, #4]
 8003ae0:	2b7a      	cmp	r3, #122	; 0x7a
 8003ae2:	d01b      	beq.n	8003b1c <lcd_psu_update+0x288>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ae4:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003ae6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003aec:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003aee:	f043 010d 	orr.w	r1, r3, #13
 8003af2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003af6:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003afa:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003afe:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b02:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b06:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b0a:	9000      	str	r0, [sp, #0]
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	214e      	movs	r1, #78	; 0x4e
 8003b10:	4809      	ldr	r0, [pc, #36]	; (8003b38 <lcd_psu_update+0x2a4>)
 8003b12:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b14:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b18:	f005 fbac 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <lcd_psu_update+0x2dc>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f43f aed3 	beq.w	80038cc <lcd_psu_update+0x38>
			lcd_put_cur(2, 3 + encpos);
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <lcd_psu_update+0x2e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b28:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 8003b2a:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x94;	//0x80|0x14 for row 3 col 2
 8003b2e:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 8003b30:	e127      	b.n	8003d82 <lcd_psu_update+0x4ee>
 8003b32:	bf00      	nop
 8003b34:	c8cc080c 	.word	0xc8cc080c
 8003b38:	20000540 	.word	0x20000540
 8003b3c:	20000759 	.word	0x20000759
 8003b40:	20000a7c 	.word	0x20000a7c
 8003b44:	200003e8 	.word	0x200003e8
 8003b48:	20000760 	.word	0x20000760
 8003b4c:	200003fc 	.word	0x200003fc
 8003b50:	20000a80 	.word	0x20000a80
 8003b54:	200003ec 	.word	0x200003ec
 8003b58:	2000075c 	.word	0x2000075c
 8003b5c:	200003f8 	.word	0x200003f8
 8003b60:	787c989c 	.word	0x787c989c
 8003b64:	08011a1c 	.word	0x08011a1c
 8003b68:	f8fc080c 	.word	0xf8fc080c
 8003b6c:	20000010 	.word	0x20000010
 8003b70:	20000400 	.word	0x20000400
 8003b74:	20000401 	.word	0x20000401
		lcd_update_amperage(1,amp_set_aux);
 8003b78:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <lcd_psu_update+0x52c>)
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	f7ff fcd9 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003b82:	4b90      	ldr	r3, [pc, #576]	; (8003dc4 <lcd_psu_update+0x530>)
 8003b84:	2002      	movs	r0, #2
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	f7ff fb24 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003b8c:	4b8e      	ldr	r3, [pc, #568]	; (8003dc8 <lcd_psu_update+0x534>)
 8003b8e:	2002      	movs	r0, #2
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	f7ff fccf 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003b96:	4b8d      	ldr	r3, [pc, #564]	; (8003dcc <lcd_psu_update+0x538>)
 8003b98:	2003      	movs	r0, #3
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	f7ff fb1a 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003ba0:	4b8b      	ldr	r3, [pc, #556]	; (8003dd0 <lcd_psu_update+0x53c>)
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	f7ff fcc5 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003baa:	4b8a      	ldr	r3, [pc, #552]	; (8003dd4 <lcd_psu_update+0x540>)
 8003bac:	2004      	movs	r0, #4
 8003bae:	6819      	ldr	r1, [r3, #0]
 8003bb0:	f7ff fb10 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003bb4:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <lcd_psu_update+0x544>)
 8003bb6:	2004      	movs	r0, #4
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	f7ff fcbb 	bl	8003534 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bbe:	4987      	ldr	r1, [pc, #540]	; (8003ddc <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bc0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bc2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bc4:	4886      	ldr	r0, [pc, #536]	; (8003de0 <lcd_psu_update+0x54c>)
 8003bc6:	214e      	movs	r1, #78	; 0x4e
 8003bc8:	aa03      	add	r2, sp, #12
 8003bca:	9400      	str	r4, [sp, #0]
 8003bcc:	f005 fb52 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	4d84      	ldr	r5, [pc, #528]	; (8003de4 <lcd_psu_update+0x550>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bd4:	4e82      	ldr	r6, [pc, #520]	; (8003de0 <lcd_psu_update+0x54c>)
	data_u = (data&0xf0);
 8003bd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003bde:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003be2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003be6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bea:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bee:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bf2:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bf6:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bfa:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bfc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c00:	214e      	movs	r1, #78	; 0x4e
 8003c02:	4630      	mov	r0, r6
 8003c04:	9400      	str	r4, [sp, #0]
 8003c06:	aa03      	add	r2, sp, #12
 8003c08:	f005 fb34 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003c0c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e0      	bne.n	8003bd6 <lcd_psu_update+0x342>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c14:	4971      	ldr	r1, [pc, #452]	; (8003ddc <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c16:	2304      	movs	r3, #4
 8003c18:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c1a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c1c:	4870      	ldr	r0, [pc, #448]	; (8003de0 <lcd_psu_update+0x54c>)
 8003c1e:	214e      	movs	r1, #78	; 0x4e
 8003c20:	9400      	str	r4, [sp, #0]
 8003c22:	f005 fb27 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c26:	4970      	ldr	r1, [pc, #448]	; (8003de8 <lcd_psu_update+0x554>)
		if(keypadarr[0] != 'z'){
 8003c28:	4d70      	ldr	r5, [pc, #448]	; (8003dec <lcd_psu_update+0x558>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c2a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c2c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c2e:	486c      	ldr	r0, [pc, #432]	; (8003de0 <lcd_psu_update+0x54c>)
 8003c30:	214e      	movs	r1, #78	; 0x4e
 8003c32:	aa03      	add	r2, sp, #12
 8003c34:	9400      	str	r4, [sp, #0]
 8003c36:	f005 fb1d 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003c3a:	782b      	ldrb	r3, [r5, #0]
 8003c3c:	2b7a      	cmp	r3, #122	; 0x7a
 8003c3e:	d01a      	beq.n	8003c76 <lcd_psu_update+0x3e2>
	data_u = (data&0xf0);
 8003c40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c48:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c4c:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c50:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c54:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c58:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c5c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c60:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c64:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c68:	2304      	movs	r3, #4
 8003c6a:	214e      	movs	r1, #78	; 0x4e
 8003c6c:	485c      	ldr	r0, [pc, #368]	; (8003de0 <lcd_psu_update+0x54c>)
 8003c6e:	9400      	str	r4, [sp, #0]
 8003c70:	aa03      	add	r2, sp, #12
 8003c72:	f005 faff 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003c76:	786b      	ldrb	r3, [r5, #1]
 8003c78:	2b7a      	cmp	r3, #122	; 0x7a
 8003c7a:	d01b      	beq.n	8003cb4 <lcd_psu_update+0x420>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c7c:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003c7e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c84:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003c88:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c8a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c8e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c92:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c96:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c9a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c9e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ca2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	214e      	movs	r1, #78	; 0x4e
 8003caa:	484d      	ldr	r0, [pc, #308]	; (8003de0 <lcd_psu_update+0x54c>)
 8003cac:	aa03      	add	r2, sp, #12
 8003cae:	9400      	str	r4, [sp, #0]
 8003cb0:	f005 fae0 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003cb4:	78ab      	ldrb	r3, [r5, #2]
 8003cb6:	2b7a      	cmp	r3, #122	; 0x7a
 8003cb8:	d01b      	beq.n	8003cf2 <lcd_psu_update+0x45e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cba:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003cbc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003cc2:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003cc6:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003cc8:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ccc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003cd0:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003cd4:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003cd8:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003cdc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ce0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	214e      	movs	r1, #78	; 0x4e
 8003ce8:	483d      	ldr	r0, [pc, #244]	; (8003de0 <lcd_psu_update+0x54c>)
 8003cea:	aa03      	add	r2, sp, #12
 8003cec:	9400      	str	r4, [sp, #0]
 8003cee:	f005 fac1 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003cf2:	78eb      	ldrb	r3, [r5, #3]
 8003cf4:	2b7a      	cmp	r3, #122	; 0x7a
 8003cf6:	d01b      	beq.n	8003d30 <lcd_psu_update+0x49c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cf8:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003cfa:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d00:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003d04:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003d06:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d0a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d0e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d12:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d16:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003d1a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d1e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d22:	2304      	movs	r3, #4
 8003d24:	214e      	movs	r1, #78	; 0x4e
 8003d26:	482e      	ldr	r0, [pc, #184]	; (8003de0 <lcd_psu_update+0x54c>)
 8003d28:	aa03      	add	r2, sp, #12
 8003d2a:	9400      	str	r4, [sp, #0]
 8003d2c:	f005 faa2 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003d30:	792b      	ldrb	r3, [r5, #4]
 8003d32:	2b7a      	cmp	r3, #122	; 0x7a
 8003d34:	d01b      	beq.n	8003d6e <lcd_psu_update+0x4da>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d36:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003d38:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003d3e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d40:	f043 010d 	orr.w	r1, r3, #13
 8003d44:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003d48:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d4c:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d50:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003d54:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d58:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	2304      	movs	r3, #4
 8003d60:	214e      	movs	r1, #78	; 0x4e
 8003d62:	481f      	ldr	r0, [pc, #124]	; (8003de0 <lcd_psu_update+0x54c>)
 8003d64:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d66:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d6a:	f005 fa83 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <lcd_psu_update+0x55c>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f43f adaa 	beq.w	80038cc <lcd_psu_update+0x38>
			lcd_put_cur(0, 3 + encpos);
 8003d78:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <lcd_psu_update+0x560>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d7a:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 8003d7c:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x80;
 8003d80:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d82:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003d84:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003d8a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d8e:	f043 000c 	orr.w	r0, r3, #12
 8003d92:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003d96:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003d9a:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003d9e:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003da2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003da6:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003daa:	2304      	movs	r3, #4
 8003dac:	214e      	movs	r1, #78	; 0x4e
 8003dae:	9400      	str	r4, [sp, #0]
 8003db0:	480b      	ldr	r0, [pc, #44]	; (8003de0 <lcd_psu_update+0x54c>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003db2:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003db6:	f005 fa5d 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200003e8 	.word	0x200003e8
 8003dc4:	20000760 	.word	0x20000760
 8003dc8:	200003fc 	.word	0x200003fc
 8003dcc:	20000a80 	.word	0x20000a80
 8003dd0:	200003ec 	.word	0x200003ec
 8003dd4:	2000075c 	.word	0x2000075c
 8003dd8:	200003f8 	.word	0x200003f8
 8003ddc:	383c888c 	.word	0x383c888c
 8003de0:	20000540 	.word	0x20000540
 8003de4:	08011a1c 	.word	0x08011a1c
 8003de8:	f8fc080c 	.word	0xf8fc080c
 8003dec:	20000010 	.word	0x20000010
 8003df0:	20000400 	.word	0x20000400
 8003df4:	20000401 	.word	0x20000401
		lcd_update_voltage(1,volt_set_aux);
 8003df8:	4bb9      	ldr	r3, [pc, #740]	; (80040e0 <lcd_psu_update+0x84c>)
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	f7ff f9e9 	bl	80031d4 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 8003e02:	4bb8      	ldr	r3, [pc, #736]	; (80040e4 <lcd_psu_update+0x850>)
 8003e04:	4628      	mov	r0, r5
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	f7ff f9e4 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003e0c:	4bb6      	ldr	r3, [pc, #728]	; (80040e8 <lcd_psu_update+0x854>)
 8003e0e:	4628      	mov	r0, r5
 8003e10:	6819      	ldr	r1, [r3, #0]
 8003e12:	f7ff fb8f 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003e16:	4bb5      	ldr	r3, [pc, #724]	; (80040ec <lcd_psu_update+0x858>)
 8003e18:	2003      	movs	r0, #3
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	f7ff f9da 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003e20:	4bb3      	ldr	r3, [pc, #716]	; (80040f0 <lcd_psu_update+0x85c>)
 8003e22:	2003      	movs	r0, #3
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	f7ff fb85 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003e2a:	4bb2      	ldr	r3, [pc, #712]	; (80040f4 <lcd_psu_update+0x860>)
 8003e2c:	2004      	movs	r0, #4
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	f7ff f9d0 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003e34:	4bb0      	ldr	r3, [pc, #704]	; (80040f8 <lcd_psu_update+0x864>)
 8003e36:	2004      	movs	r0, #4
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	f7ff fb7b 	bl	8003534 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e3e:	49af      	ldr	r1, [pc, #700]	; (80040fc <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e40:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e42:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e44:	48ae      	ldr	r0, [pc, #696]	; (8004100 <lcd_psu_update+0x86c>)
 8003e46:	214e      	movs	r1, #78	; 0x4e
 8003e48:	aa03      	add	r2, sp, #12
 8003e4a:	9400      	str	r4, [sp, #0]
 8003e4c:	f005 fa12 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003e50:	2320      	movs	r3, #32
 8003e52:	4dac      	ldr	r5, [pc, #688]	; (8004104 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e54:	4eaa      	ldr	r6, [pc, #680]	; (8004100 <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003e56:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e5c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003e60:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e62:	f043 0309 	orr.w	r3, r3, #9
 8003e66:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e6a:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e6e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e72:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e76:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e7a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e7e:	2304      	movs	r3, #4
 8003e80:	214e      	movs	r1, #78	; 0x4e
 8003e82:	4630      	mov	r0, r6
 8003e84:	9400      	str	r4, [sp, #0]
 8003e86:	aa03      	add	r2, sp, #12
 8003e88:	f005 f9f4 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003e8c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e0      	bne.n	8003e56 <lcd_psu_update+0x5c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e94:	4999      	ldr	r1, [pc, #612]	; (80040fc <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e96:	2304      	movs	r3, #4
 8003e98:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e9a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e9c:	4898      	ldr	r0, [pc, #608]	; (8004100 <lcd_psu_update+0x86c>)
 8003e9e:	214e      	movs	r1, #78	; 0x4e
 8003ea0:	9400      	str	r4, [sp, #0]
 8003ea2:	f005 f9e7 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003ea6:	4998      	ldr	r1, [pc, #608]	; (8004108 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003ea8:	4d98      	ldr	r5, [pc, #608]	; (800410c <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eaa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003eac:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eae:	4894      	ldr	r0, [pc, #592]	; (8004100 <lcd_psu_update+0x86c>)
 8003eb0:	214e      	movs	r1, #78	; 0x4e
 8003eb2:	aa03      	add	r2, sp, #12
 8003eb4:	9400      	str	r4, [sp, #0]
 8003eb6:	f005 f9dd 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003eba:	782b      	ldrb	r3, [r5, #0]
 8003ebc:	2b7a      	cmp	r3, #122	; 0x7a
 8003ebe:	f040 812f 	bne.w	8004120 <lcd_psu_update+0x88c>
		if(keypadarr[1] != 'z'){
 8003ec2:	786b      	ldrb	r3, [r5, #1]
 8003ec4:	2b7a      	cmp	r3, #122	; 0x7a
 8003ec6:	f040 80ee 	bne.w	80040a6 <lcd_psu_update+0x812>
		if(keypadarr[2] != 'z'){
 8003eca:	78ab      	ldrb	r3, [r5, #2]
 8003ecc:	2b7a      	cmp	r3, #122	; 0x7a
 8003ece:	f040 80cd 	bne.w	800406c <lcd_psu_update+0x7d8>
		if(keypadarr[3] != 'z'){
 8003ed2:	78eb      	ldrb	r3, [r5, #3]
 8003ed4:	2b7a      	cmp	r3, #122	; 0x7a
 8003ed6:	f040 80ac 	bne.w	8004032 <lcd_psu_update+0x79e>
		if(keypadarr[4] != 'z'){
 8003eda:	792b      	ldrb	r3, [r5, #4]
 8003edc:	2b7a      	cmp	r3, #122	; 0x7a
 8003ede:	f040 808b 	bne.w	8003ff8 <lcd_psu_update+0x764>
		if(encmode){
 8003ee2:	4b8b      	ldr	r3, [pc, #556]	; (8004110 <lcd_psu_update+0x87c>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f43f acf0 	beq.w	80038cc <lcd_psu_update+0x38>
			lcd_put_cur(1, 3 + encpos);
 8003eec:	4b89      	ldr	r3, [pc, #548]	; (8004114 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eee:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 8003ef0:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xC0;  //C0
 8003ef4:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 8003ef6:	e744      	b.n	8003d82 <lcd_psu_update+0x4ee>
		lcd_update_voltage(1,volt_set_aux);
 8003ef8:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <lcd_psu_update+0x84c>)
 8003efa:	2001      	movs	r0, #1
 8003efc:	6819      	ldr	r1, [r3, #0]
 8003efe:	f7ff f969 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003f02:	4b85      	ldr	r3, [pc, #532]	; (8004118 <lcd_psu_update+0x884>)
 8003f04:	2001      	movs	r0, #1
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	f7ff fb14 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003f0c:	4b75      	ldr	r3, [pc, #468]	; (80040e4 <lcd_psu_update+0x850>)
 8003f0e:	2002      	movs	r0, #2
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	f7ff f95f 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003f16:	4b74      	ldr	r3, [pc, #464]	; (80040e8 <lcd_psu_update+0x854>)
 8003f18:	2002      	movs	r0, #2
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	f7ff fb0a 	bl	8003534 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003f20:	4b72      	ldr	r3, [pc, #456]	; (80040ec <lcd_psu_update+0x858>)
 8003f22:	2003      	movs	r0, #3
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	f7ff f955 	bl	80031d4 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003f2a:	4b72      	ldr	r3, [pc, #456]	; (80040f4 <lcd_psu_update+0x860>)
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	f7ff f950 	bl	80031d4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003f34:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <lcd_psu_update+0x864>)
 8003f36:	4628      	mov	r0, r5
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	f7ff fafb 	bl	8003534 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f3e:	4977      	ldr	r1, [pc, #476]	; (800411c <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f40:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f42:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f44:	486e      	ldr	r0, [pc, #440]	; (8004100 <lcd_psu_update+0x86c>)
 8003f46:	214e      	movs	r1, #78	; 0x4e
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	9400      	str	r4, [sp, #0]
 8003f4c:	f005 f992 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003f50:	2320      	movs	r3, #32
 8003f52:	4d6c      	ldr	r5, [pc, #432]	; (8004104 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f54:	4e6a      	ldr	r6, [pc, #424]	; (8004100 <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003f56:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f5c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f60:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f62:	f043 0309 	orr.w	r3, r3, #9
 8003f66:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f6a:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f6e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f72:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f76:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f7a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f7e:	2304      	movs	r3, #4
 8003f80:	214e      	movs	r1, #78	; 0x4e
 8003f82:	4630      	mov	r0, r6
 8003f84:	9400      	str	r4, [sp, #0]
 8003f86:	aa03      	add	r2, sp, #12
 8003f88:	f005 f974 	bl	8009274 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003f8c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e0      	bne.n	8003f56 <lcd_psu_update+0x6c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f94:	4961      	ldr	r1, [pc, #388]	; (800411c <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f96:	2304      	movs	r3, #4
 8003f98:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f9a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f9c:	4858      	ldr	r0, [pc, #352]	; (8004100 <lcd_psu_update+0x86c>)
 8003f9e:	214e      	movs	r1, #78	; 0x4e
 8003fa0:	9400      	str	r4, [sp, #0]
 8003fa2:	f005 f967 	bl	8009274 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003fa6:	4958      	ldr	r1, [pc, #352]	; (8004108 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003fa8:	4d58      	ldr	r5, [pc, #352]	; (800410c <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003faa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003fac:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fae:	4854      	ldr	r0, [pc, #336]	; (8004100 <lcd_psu_update+0x86c>)
 8003fb0:	214e      	movs	r1, #78	; 0x4e
 8003fb2:	aa03      	add	r2, sp, #12
 8003fb4:	9400      	str	r4, [sp, #0]
 8003fb6:	f005 f95d 	bl	8009274 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003fba:	782b      	ldrb	r3, [r5, #0]
 8003fbc:	2b7a      	cmp	r3, #122	; 0x7a
 8003fbe:	f040 80e8 	bne.w	8004192 <lcd_psu_update+0x8fe>
		if(keypadarr[1] != 'z'){
 8003fc2:	786b      	ldrb	r3, [r5, #1]
 8003fc4:	2b7a      	cmp	r3, #122	; 0x7a
 8003fc6:	f040 80c7 	bne.w	8004158 <lcd_psu_update+0x8c4>
		if(keypadarr[2] != 'z'){
 8003fca:	78ab      	ldrb	r3, [r5, #2]
 8003fcc:	2b7a      	cmp	r3, #122	; 0x7a
 8003fce:	f040 8136 	bne.w	800423e <lcd_psu_update+0x9aa>
		if(keypadarr[3] != 'z'){
 8003fd2:	78eb      	ldrb	r3, [r5, #3]
 8003fd4:	2b7a      	cmp	r3, #122	; 0x7a
 8003fd6:	f040 8115 	bne.w	8004204 <lcd_psu_update+0x970>
		if(keypadarr[4] != 'z'){
 8003fda:	792b      	ldrb	r3, [r5, #4]
 8003fdc:	2b7a      	cmp	r3, #122	; 0x7a
 8003fde:	f040 80f4 	bne.w	80041ca <lcd_psu_update+0x936>
		if(encmode){
 8003fe2:	4b4b      	ldr	r3, [pc, #300]	; (8004110 <lcd_psu_update+0x87c>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f43f ac70 	beq.w	80038cc <lcd_psu_update+0x38>
			lcd_put_cur(3, 3 + encpos);
 8003fec:	4b49      	ldr	r3, [pc, #292]	; (8004114 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fee:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 8003ff0:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xD4;
 8003ff4:	33d7      	adds	r3, #215	; 0xd7
 8003ff6:	e6c4      	b.n	8003d82 <lcd_psu_update+0x4ee>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ff8:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003ffa:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8004000:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004002:	f043 010d 	orr.w	r1, r3, #13
 8004006:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800400a:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800400e:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004012:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004016:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800401a:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800401e:	9000      	str	r0, [sp, #0]
 8004020:	2304      	movs	r3, #4
 8004022:	214e      	movs	r1, #78	; 0x4e
 8004024:	aa03      	add	r2, sp, #12
 8004026:	4836      	ldr	r0, [pc, #216]	; (8004100 <lcd_psu_update+0x86c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004028:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800402c:	f005 f922 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8004030:	e757      	b.n	8003ee2 <lcd_psu_update+0x64e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004032:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004034:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800403a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800403e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004040:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004044:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004048:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800404c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004050:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004054:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004058:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800405c:	2304      	movs	r3, #4
 800405e:	214e      	movs	r1, #78	; 0x4e
 8004060:	aa03      	add	r2, sp, #12
 8004062:	9400      	str	r4, [sp, #0]
 8004064:	4826      	ldr	r0, [pc, #152]	; (8004100 <lcd_psu_update+0x86c>)
 8004066:	f005 f905 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 800406a:	e736      	b.n	8003eda <lcd_psu_update+0x646>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800406c:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800406e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004074:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8004078:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800407a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800407e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004082:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004086:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800408a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800408e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004092:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004096:	2304      	movs	r3, #4
 8004098:	214e      	movs	r1, #78	; 0x4e
 800409a:	aa03      	add	r2, sp, #12
 800409c:	9400      	str	r4, [sp, #0]
 800409e:	4818      	ldr	r0, [pc, #96]	; (8004100 <lcd_psu_update+0x86c>)
 80040a0:	f005 f8e8 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 80040a4:	e715      	b.n	8003ed2 <lcd_psu_update+0x63e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040a6:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80040a8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80040aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040ae:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80040b2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040b4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040b8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040bc:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040c0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040c4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040c8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040cc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040d0:	2304      	movs	r3, #4
 80040d2:	214e      	movs	r1, #78	; 0x4e
 80040d4:	aa03      	add	r2, sp, #12
 80040d6:	9400      	str	r4, [sp, #0]
 80040d8:	4809      	ldr	r0, [pc, #36]	; (8004100 <lcd_psu_update+0x86c>)
 80040da:	f005 f8cb 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 80040de:	e6f4      	b.n	8003eca <lcd_psu_update+0x636>
 80040e0:	20000a7c 	.word	0x20000a7c
 80040e4:	20000760 	.word	0x20000760
 80040e8:	200003fc 	.word	0x200003fc
 80040ec:	20000a80 	.word	0x20000a80
 80040f0:	200003ec 	.word	0x200003ec
 80040f4:	2000075c 	.word	0x2000075c
 80040f8:	200003f8 	.word	0x200003f8
 80040fc:	383cc8cc 	.word	0x383cc8cc
 8004100:	20000540 	.word	0x20000540
 8004104:	08011a1c 	.word	0x08011a1c
 8004108:	f8fc080c 	.word	0xf8fc080c
 800410c:	20000010 	.word	0x20000010
 8004110:	20000400 	.word	0x20000400
 8004114:	20000401 	.word	0x20000401
 8004118:	200003e8 	.word	0x200003e8
 800411c:	787cd8dc 	.word	0x787cd8dc
	data_u = (data&0xf0);
 8004120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004128:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800412c:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004130:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004134:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004138:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800413c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004140:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004144:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004148:	2304      	movs	r3, #4
 800414a:	214e      	movs	r1, #78	; 0x4e
 800414c:	9400      	str	r4, [sp, #0]
 800414e:	aa03      	add	r2, sp, #12
 8004150:	4849      	ldr	r0, [pc, #292]	; (8004278 <lcd_psu_update+0x9e4>)
 8004152:	f005 f88f 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8004156:	e6b4      	b.n	8003ec2 <lcd_psu_update+0x62e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004158:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800415a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800415c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004160:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8004164:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004166:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800416a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800416e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004172:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004176:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800417a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800417e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004182:	2304      	movs	r3, #4
 8004184:	214e      	movs	r1, #78	; 0x4e
 8004186:	aa03      	add	r2, sp, #12
 8004188:	9400      	str	r4, [sp, #0]
 800418a:	483b      	ldr	r0, [pc, #236]	; (8004278 <lcd_psu_update+0x9e4>)
 800418c:	f005 f872 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8004190:	e71b      	b.n	8003fca <lcd_psu_update+0x736>
	data_u = (data&0xf0);
 8004192:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800419a:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800419e:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041a2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80041a6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041aa:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041ae:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041b2:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041b6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041ba:	2304      	movs	r3, #4
 80041bc:	214e      	movs	r1, #78	; 0x4e
 80041be:	9400      	str	r4, [sp, #0]
 80041c0:	aa03      	add	r2, sp, #12
 80041c2:	482d      	ldr	r0, [pc, #180]	; (8004278 <lcd_psu_update+0x9e4>)
 80041c4:	f005 f856 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 80041c8:	e6fb      	b.n	8003fc2 <lcd_psu_update+0x72e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041ca:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80041cc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80041ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80041d2:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80041d4:	f043 010d 	orr.w	r1, r3, #13
 80041d8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041dc:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041e0:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041e4:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041e8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041ec:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041f0:	9000      	str	r0, [sp, #0]
 80041f2:	2304      	movs	r3, #4
 80041f4:	214e      	movs	r1, #78	; 0x4e
 80041f6:	aa03      	add	r2, sp, #12
 80041f8:	481f      	ldr	r0, [pc, #124]	; (8004278 <lcd_psu_update+0x9e4>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041fa:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041fe:	f005 f839 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8004202:	e6ee      	b.n	8003fe2 <lcd_psu_update+0x74e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004204:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004206:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800420c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8004210:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004212:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004216:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800421a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800421e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004222:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004226:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800422a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800422e:	2304      	movs	r3, #4
 8004230:	214e      	movs	r1, #78	; 0x4e
 8004232:	aa03      	add	r2, sp, #12
 8004234:	9400      	str	r4, [sp, #0]
 8004236:	4810      	ldr	r0, [pc, #64]	; (8004278 <lcd_psu_update+0x9e4>)
 8004238:	f005 f81c 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 800423c:	e6cd      	b.n	8003fda <lcd_psu_update+0x746>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800423e:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004240:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004246:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800424a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800424c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004250:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004254:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004258:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800425c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004260:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004264:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004268:	2304      	movs	r3, #4
 800426a:	214e      	movs	r1, #78	; 0x4e
 800426c:	aa03      	add	r2, sp, #12
 800426e:	9400      	str	r4, [sp, #0]
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <lcd_psu_update+0x9e4>)
 8004272:	f004 ffff 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8004276:	e6ac      	b.n	8003fd2 <lcd_psu_update+0x73e>
 8004278:	20000540 	.word	0x20000540

0800427c <translate_keypad>:
float translate_keypad(void){
 800427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(keypadarr[i] == '.'){
 8004280:	4db8      	ldr	r5, [pc, #736]	; (8004564 <translate_keypad+0x2e8>)
 8004282:	f895 8000 	ldrb.w	r8, [r5]
 8004286:	786e      	ldrb	r6, [r5, #1]
 8004288:	f1b8 032e 	subs.w	r3, r8, #46	; 0x2e
 800428c:	78af      	ldrb	r7, [r5, #2]
 800428e:	bf18      	it	ne
 8004290:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 8004294:	2e2e      	cmp	r6, #46	; 0x2e
 8004296:	bf08      	it	eq
 8004298:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 800429a:	2f2e      	cmp	r7, #46	; 0x2e
 800429c:	f000 80e4 	beq.w	8004468 <translate_keypad+0x1ec>
 80042a0:	f895 9003 	ldrb.w	r9, [r5, #3]
 80042a4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80042a8:	d051      	beq.n	800434e <translate_keypad+0xd2>
 80042aa:	7928      	ldrb	r0, [r5, #4]
 80042ac:	282e      	cmp	r0, #46	; 0x2e
 80042ae:	f000 8141 	beq.w	8004534 <translate_keypad+0x2b8>
	if(decimallocation == -1){
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	f040 8141 	bne.w	800453a <translate_keypad+0x2be>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042b8:	3830      	subs	r0, #48	; 0x30
 80042ba:	b2c3      	uxtb	r3, r0
 80042bc:	2b09      	cmp	r3, #9
 80042be:	f240 8127 	bls.w	8004510 <translate_keypad+0x294>
		int count = 1;
 80042c2:	2501      	movs	r5, #1
	float num = 0;
 80042c4:	2400      	movs	r4, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042c6:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 80042ca:	fa5f f389 	uxtb.w	r3, r9
 80042ce:	2b09      	cmp	r3, #9
 80042d0:	d80b      	bhi.n	80042ea <translate_keypad+0x6e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80042d2:	fb05 f009 	mul.w	r0, r5, r9
 80042d6:	f7fc fd19 	bl	8000d0c <__aeabi_i2f>
 80042da:	4601      	mov	r1, r0
 80042dc:	4620      	mov	r0, r4
 80042de:	f7fc fc61 	bl	8000ba4 <__addsf3>
 80042e2:	4604      	mov	r4, r0
				count = count * 10;
 80042e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80042e8:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042ea:	3f30      	subs	r7, #48	; 0x30
 80042ec:	b2fb      	uxtb	r3, r7
 80042ee:	2b09      	cmp	r3, #9
 80042f0:	d80b      	bhi.n	800430a <translate_keypad+0x8e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80042f2:	fb05 f007 	mul.w	r0, r5, r7
 80042f6:	f7fc fd09 	bl	8000d0c <__aeabi_i2f>
 80042fa:	4601      	mov	r1, r0
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7fc fc51 	bl	8000ba4 <__addsf3>
 8004302:	4604      	mov	r4, r0
				count = count * 10;
 8004304:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004308:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800430a:	3e30      	subs	r6, #48	; 0x30
 800430c:	b2f3      	uxtb	r3, r6
 800430e:	2b09      	cmp	r3, #9
 8004310:	d80b      	bhi.n	800432a <translate_keypad+0xae>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004312:	fb05 f006 	mul.w	r0, r5, r6
 8004316:	f7fc fcf9 	bl	8000d0c <__aeabi_i2f>
 800431a:	4601      	mov	r1, r0
 800431c:	4620      	mov	r0, r4
 800431e:	f7fc fc41 	bl	8000ba4 <__addsf3>
 8004322:	4604      	mov	r4, r0
				count = count * 10;
 8004324:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004328:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800432a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800432e:	fa5f f388 	uxtb.w	r3, r8
 8004332:	2b09      	cmp	r3, #9
 8004334:	d808      	bhi.n	8004348 <translate_keypad+0xcc>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004336:	fb05 f008 	mul.w	r0, r5, r8
 800433a:	f7fc fce7 	bl	8000d0c <__aeabi_i2f>
 800433e:	4601      	mov	r1, r0
 8004340:	4620      	mov	r0, r4
 8004342:	f7fc fc2f 	bl	8000ba4 <__addsf3>
 8004346:	4604      	mov	r4, r0
}
 8004348:	4620      	mov	r0, r4
 800434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 800434e:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 8004350:	2b2e      	cmp	r3, #46	; 0x2e
 8004352:	bf0c      	ite	eq
 8004354:	f04f 0904 	moveq.w	r9, #4
 8004358:	f04f 0903 	movne.w	r9, #3
		for(int i = decimallocation-1; i >=0; i--){
 800435c:	f109 37ff 	add.w	r7, r9, #4294967295
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004360:	5de8      	ldrb	r0, [r5, r7]
 8004362:	3830      	subs	r0, #48	; 0x30
 8004364:	b2c3      	uxtb	r3, r0
 8004366:	2b09      	cmp	r3, #9
 8004368:	f240 808b 	bls.w	8004482 <translate_keypad+0x206>
		int count = 1;
 800436c:	2601      	movs	r6, #1
	float num = 0;
 800436e:	2400      	movs	r4, #0
		for(int i = decimallocation-1; i >=0; i--){
 8004370:	1e7b      	subs	r3, r7, #1
 8004372:	2f00      	cmp	r7, #0
 8004374:	f000 80a6 	beq.w	80044c4 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004378:	5ce8      	ldrb	r0, [r5, r3]
 800437a:	3830      	subs	r0, #48	; 0x30
 800437c:	b2c3      	uxtb	r3, r0
 800437e:	2b09      	cmp	r3, #9
 8004380:	d80b      	bhi.n	800439a <translate_keypad+0x11e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004382:	fb06 f000 	mul.w	r0, r6, r0
 8004386:	f7fc fcc1 	bl	8000d0c <__aeabi_i2f>
 800438a:	4601      	mov	r1, r0
 800438c:	4620      	mov	r0, r4
 800438e:	f7fc fc09 	bl	8000ba4 <__addsf3>
 8004392:	4604      	mov	r4, r0
				count = count * 10;
 8004394:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004398:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation-1; i >=0; i--){
 800439a:	2f01      	cmp	r7, #1
 800439c:	f1a7 0a02 	sub.w	sl, r7, #2
 80043a0:	f000 8090 	beq.w	80044c4 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043a4:	f815 000a 	ldrb.w	r0, [r5, sl]
 80043a8:	3830      	subs	r0, #48	; 0x30
 80043aa:	b2c3      	uxtb	r3, r0
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	f240 80a2 	bls.w	80044f6 <translate_keypad+0x27a>
		for(int i = decimallocation-1; i >=0; i--){
 80043b2:	f1ba 0f00 	cmp.w	sl, #0
 80043b6:	f000 8085 	beq.w	80044c4 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043ba:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80043be:	fa5f f388 	uxtb.w	r3, r8
 80043c2:	2b09      	cmp	r3, #9
 80043c4:	f240 80ac 	bls.w	8004520 <translate_keypad+0x2a4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043c8:	f1b9 0f04 	cmp.w	r9, #4
 80043cc:	f109 0701 	add.w	r7, r9, #1
 80043d0:	d0ba      	beq.n	8004348 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043d2:	5de8      	ldrb	r0, [r5, r7]
 80043d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80043d8:	2b09      	cmp	r3, #9
 80043da:	d95c      	bls.n	8004496 <translate_keypad+0x21a>
 80043dc:	260a      	movs	r6, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043de:	2f04      	cmp	r7, #4
 80043e0:	f107 0801 	add.w	r8, r7, #1
 80043e4:	d0b0      	beq.n	8004348 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043e6:	f815 0008 	ldrb.w	r0, [r5, r8]
 80043ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d814      	bhi.n	800441c <translate_keypad+0x1a0>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80043f2:	f7fc fc8b 	bl	8000d0c <__aeabi_i2f>
 80043f6:	495c      	ldr	r1, [pc, #368]	; (8004568 <translate_keypad+0x2ec>)
 80043f8:	f7fc fbd2 	bl	8000ba0 <__aeabi_fsub>
 80043fc:	4607      	mov	r7, r0
 80043fe:	4630      	mov	r0, r6
 8004400:	f7fc fc84 	bl	8000d0c <__aeabi_i2f>
 8004404:	4601      	mov	r1, r0
 8004406:	4638      	mov	r0, r7
 8004408:	f7fc fd88 	bl	8000f1c <__aeabi_fdiv>
 800440c:	4601      	mov	r1, r0
 800440e:	4620      	mov	r0, r4
 8004410:	f7fc fbc8 	bl	8000ba4 <__addsf3>
 8004414:	4604      	mov	r4, r0
				count = count * 10;
 8004416:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800441a:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 800441c:	f1b8 0f04 	cmp.w	r8, #4
 8004420:	f108 0701 	add.w	r7, r8, #1
 8004424:	d090      	beq.n	8004348 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004426:	5de8      	ldrb	r0, [r5, r7]
 8004428:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800442c:	2b09      	cmp	r3, #9
 800442e:	d94c      	bls.n	80044ca <translate_keypad+0x24e>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004430:	2f03      	cmp	r7, #3
 8004432:	d189      	bne.n	8004348 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004434:	7928      	ldrb	r0, [r5, #4]
 8004436:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800443a:	2b09      	cmp	r3, #9
 800443c:	d884      	bhi.n	8004348 <translate_keypad+0xcc>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800443e:	f7fc fc65 	bl	8000d0c <__aeabi_i2f>
 8004442:	4949      	ldr	r1, [pc, #292]	; (8004568 <translate_keypad+0x2ec>)
 8004444:	f7fc fbac 	bl	8000ba0 <__aeabi_fsub>
 8004448:	4605      	mov	r5, r0
 800444a:	4630      	mov	r0, r6
 800444c:	f7fc fc5e 	bl	8000d0c <__aeabi_i2f>
 8004450:	4601      	mov	r1, r0
 8004452:	4628      	mov	r0, r5
 8004454:	f7fc fd62 	bl	8000f1c <__aeabi_fdiv>
 8004458:	4601      	mov	r1, r0
 800445a:	4620      	mov	r0, r4
 800445c:	f7fc fba2 	bl	8000ba4 <__addsf3>
 8004460:	4604      	mov	r4, r0
}
 8004462:	4620      	mov	r0, r4
 8004464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 8004468:	78eb      	ldrb	r3, [r5, #3]
 800446a:	2b2e      	cmp	r3, #46	; 0x2e
 800446c:	f43f af6f 	beq.w	800434e <translate_keypad+0xd2>
 8004470:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 8004472:	2b2e      	cmp	r3, #46	; 0x2e
 8004474:	bf0c      	ite	eq
 8004476:	f04f 0904 	moveq.w	r9, #4
 800447a:	f04f 0902 	movne.w	r9, #2
 800447e:	e76d      	b.n	800435c <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004480:	2700      	movs	r7, #0
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004482:	f7fc fc43 	bl	8000d0c <__aeabi_i2f>
 8004486:	2100      	movs	r1, #0
 8004488:	f7fc fb8c 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800448c:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800448e:	4604      	mov	r4, r0
				count = count * 10;
 8004490:	e76e      	b.n	8004370 <translate_keypad+0xf4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004492:	2701      	movs	r7, #1
	float num = 0;
 8004494:	2400      	movs	r4, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004496:	f7fc fc39 	bl	8000d0c <__aeabi_i2f>
 800449a:	4933      	ldr	r1, [pc, #204]	; (8004568 <translate_keypad+0x2ec>)
 800449c:	f7fc fb80 	bl	8000ba0 <__aeabi_fsub>
 80044a0:	4932      	ldr	r1, [pc, #200]	; (800456c <translate_keypad+0x2f0>)
 80044a2:	f7fc fd3b 	bl	8000f1c <__aeabi_fdiv>
 80044a6:	4601      	mov	r1, r0
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7fc fb7b 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80044ae:	2664      	movs	r6, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80044b0:	4604      	mov	r4, r0
				count = count * 10;
 80044b2:	e794      	b.n	80043de <translate_keypad+0x162>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80044b4:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 80044b8:	b2c3      	uxtb	r3, r0
 80044ba:	2b09      	cmp	r3, #9
 80044bc:	f04f 0901 	mov.w	r9, #1
 80044c0:	d9de      	bls.n	8004480 <translate_keypad+0x204>
	float num = 0;
 80044c2:	2400      	movs	r4, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 80044c4:	f109 0701 	add.w	r7, r9, #1
 80044c8:	e783      	b.n	80043d2 <translate_keypad+0x156>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80044ca:	f7fc fc1f 	bl	8000d0c <__aeabi_i2f>
 80044ce:	4926      	ldr	r1, [pc, #152]	; (8004568 <translate_keypad+0x2ec>)
 80044d0:	f7fc fb66 	bl	8000ba0 <__aeabi_fsub>
 80044d4:	4680      	mov	r8, r0
 80044d6:	4630      	mov	r0, r6
 80044d8:	f7fc fc18 	bl	8000d0c <__aeabi_i2f>
 80044dc:	4601      	mov	r1, r0
 80044de:	4640      	mov	r0, r8
 80044e0:	f7fc fd1c 	bl	8000f1c <__aeabi_fdiv>
 80044e4:	4601      	mov	r1, r0
 80044e6:	4620      	mov	r0, r4
 80044e8:	f7fc fb5c 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80044ec:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80044f0:	4604      	mov	r4, r0
				count = count * 10;
 80044f2:	0076      	lsls	r6, r6, #1
 80044f4:	e79c      	b.n	8004430 <translate_keypad+0x1b4>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80044f6:	fb06 f000 	mul.w	r0, r6, r0
 80044fa:	f7fc fc07 	bl	8000d0c <__aeabi_i2f>
 80044fe:	4601      	mov	r1, r0
 8004500:	4620      	mov	r0, r4
 8004502:	f7fc fb4f 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004506:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800450a:	4604      	mov	r4, r0
				count = count * 10;
 800450c:	0076      	lsls	r6, r6, #1
 800450e:	e750      	b.n	80043b2 <translate_keypad+0x136>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004510:	f7fc fbfc 	bl	8000d0c <__aeabi_i2f>
 8004514:	2100      	movs	r1, #0
 8004516:	f7fc fb45 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800451a:	250a      	movs	r5, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800451c:	4604      	mov	r4, r0
				count = count * 10;
 800451e:	e6d2      	b.n	80042c6 <translate_keypad+0x4a>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004520:	fb06 f008 	mul.w	r0, r6, r8
 8004524:	f7fc fbf2 	bl	8000d0c <__aeabi_i2f>
 8004528:	4601      	mov	r1, r0
 800452a:	4620      	mov	r0, r4
 800452c:	f7fc fb3a 	bl	8000ba4 <__addsf3>
 8004530:	4604      	mov	r4, r0
				count = count * 10;
 8004532:	e749      	b.n	80043c8 <translate_keypad+0x14c>
	for(int i = 0; i < keypadlength; i++){
 8004534:	f04f 0904 	mov.w	r9, #4
 8004538:	e710      	b.n	800435c <translate_keypad+0xe0>
		for(int i = decimallocation-1; i >=0; i--){
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ba      	bne.n	80044b4 <translate_keypad+0x238>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800453e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004542:	2b09      	cmp	r3, #9
 8004544:	4630      	mov	r0, r6
 8004546:	d9a4      	bls.n	8004492 <translate_keypad+0x216>
 8004548:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800454c:	2b09      	cmp	r3, #9
 800454e:	4638      	mov	r0, r7
 8004550:	d804      	bhi.n	800455c <translate_keypad+0x2e0>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004552:	f04f 0802 	mov.w	r8, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004556:	260a      	movs	r6, #10
	float num = 0;
 8004558:	2400      	movs	r4, #0
 800455a:	e74a      	b.n	80043f2 <translate_keypad+0x176>
		for(int i = decimallocation+1; i < keypadlength; i++){
 800455c:	2703      	movs	r7, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800455e:	260a      	movs	r6, #10
	float num = 0;
 8004560:	2400      	movs	r4, #0
 8004562:	e760      	b.n	8004426 <translate_keypad+0x1aa>
 8004564:	20000010 	.word	0x20000010
 8004568:	42400000 	.word	0x42400000
 800456c:	41200000 	.word	0x41200000

08004570 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8004570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(keypaditerator < 4){
 8004574:	4e70      	ldr	r6, [pc, #448]	; (8004738 <fill_keypad+0x1c8>)
void fill_keypad(uint8_t va, float num){
 8004576:	460d      	mov	r5, r1
	while(keypaditerator < 4){
 8004578:	f996 4000 	ldrsb.w	r4, [r6]
 800457c:	2c03      	cmp	r4, #3
 800457e:	dc2d      	bgt.n	80045dc <fill_keypad+0x6c>
 8004580:	496e      	ldr	r1, [pc, #440]	; (800473c <fill_keypad+0x1cc>)
 8004582:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8004740 <fill_keypad+0x1d0>
 8004586:	2700      	movs	r7, #0
			keypadarr[0] = num;
 8004588:	f04f 0b7a 	mov.w	fp, #122	; 0x7a
 800458c:	f891 9004 	ldrb.w	r9, [r1, #4]
 8004590:	f89a 8000 	ldrb.w	r8, [sl]
 8004594:	f891 e003 	ldrb.w	lr, [r1, #3]
 8004598:	788b      	ldrb	r3, [r1, #2]
 800459a:	784a      	ldrb	r2, [r1, #1]
 800459c:	f891 c000 	ldrb.w	ip, [r1]
 80045a0:	b2e4      	uxtb	r4, r4
 80045a2:	e004      	b.n	80045ae <fill_keypad+0x3e>
	while(keypaditerator < 4){
 80045a4:	469e      	mov	lr, r3
 80045a6:	4613      	mov	r3, r2
 80045a8:	4662      	mov	r2, ip
			keypadarr[0] = num;
 80045aa:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
	while(keypaditerator < 4){
 80045ae:	3401      	adds	r4, #1
			if(keypadarr[4] == '.'){
 80045b0:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80045b4:	b2e4      	uxtb	r4, r4
			if(keypadarr[4] == '.'){
 80045b6:	bf04      	itt	eq
 80045b8:	2701      	moveq	r7, #1
 80045ba:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80045be:	2c04      	cmp	r4, #4
 80045c0:	46f1      	mov	r9, lr
 80045c2:	d1ef      	bne.n	80045a4 <fill_keypad+0x34>
 80045c4:	f881 c001 	strb.w	ip, [r1, #1]
 80045c8:	708a      	strb	r2, [r1, #2]
 80045ca:	f881 e004 	strb.w	lr, [r1, #4]
 80045ce:	70cb      	strb	r3, [r1, #3]
 80045d0:	f881 b000 	strb.w	fp, [r1]
 80045d4:	7034      	strb	r4, [r6, #0]
 80045d6:	b10f      	cbz	r7, 80045dc <fill_keypad+0x6c>
 80045d8:	f88a 8000 	strb.w	r8, [sl]
	if(va){
 80045dc:	b370      	cbz	r0, 800463c <fill_keypad+0xcc>
		if(num <= 0.0001){
 80045de:	4628      	mov	r0, r5
 80045e0:	f7fb ff3a 	bl	8000458 <__aeabi_f2d>
 80045e4:	a34c      	add	r3, pc, #304	; (adr r3, 8004718 <fill_keypad+0x1a8>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	4680      	mov	r8, r0
 80045ec:	4689      	mov	r9, r1
 80045ee:	f7fc fa07 	bl	8000a00 <__aeabi_dcmple>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d155      	bne.n	80046a2 <fill_keypad+0x132>
		int temp = (int)(num * 1000);
 80045f6:	4953      	ldr	r1, [pc, #332]	; (8004744 <fill_keypad+0x1d4>)
 80045f8:	4628      	mov	r0, r5
 80045fa:	f7fc fbdb 	bl	8000db4 <__aeabi_fmul>
 80045fe:	f7fc fd9f 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 8004602:	2800      	cmp	r0, #0
 8004604:	d06e      	beq.n	80046e4 <fill_keypad+0x174>
					keypadarr[keypaditerator] = '.';
 8004606:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800460a:	494c      	ldr	r1, [pc, #304]	; (800473c <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 800460c:	4f4e      	ldr	r7, [pc, #312]	; (8004748 <fill_keypad+0x1d8>)
 800460e:	fb87 3500 	smull	r3, r5, r7, r0
 8004612:	17c3      	asrs	r3, r0, #31
 8004614:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8004618:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800461c:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 8004620:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 8004622:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8004624:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 8004626:	b254      	sxtb	r4, r2
				if(keypaditerator == 1){
 8004628:	2c01      	cmp	r4, #1
				temp = temp / 10;
 800462a:	4618      	mov	r0, r3
				if(keypaditerator == 1){
 800462c:	d06a      	beq.n	8004704 <fill_keypad+0x194>
			while(temp != 0 && keypaditerator >= 0){
 800462e:	2b00      	cmp	r3, #0
 8004630:	d055      	beq.n	80046de <fill_keypad+0x16e>
 8004632:	2c00      	cmp	r4, #0
 8004634:	daeb      	bge.n	800460e <fill_keypad+0x9e>
 8004636:	7034      	strb	r4, [r6, #0]
}
 8004638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(num <= 0.001){
 800463c:	4628      	mov	r0, r5
 800463e:	f7fb ff0b 	bl	8000458 <__aeabi_f2d>
 8004642:	a337      	add	r3, pc, #220	; (adr r3, 8004720 <fill_keypad+0x1b0>)
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	4680      	mov	r8, r0
 800464a:	4689      	mov	r9, r1
 800464c:	f7fc f9d8 	bl	8000a00 <__aeabi_dcmple>
 8004650:	b9f0      	cbnz	r0, 8004690 <fill_keypad+0x120>
		int temp = (int)(num * 100);
 8004652:	493e      	ldr	r1, [pc, #248]	; (800474c <fill_keypad+0x1dc>)
 8004654:	4628      	mov	r0, r5
 8004656:	f7fc fbad 	bl	8000db4 <__aeabi_fmul>
 800465a:	f7fc fd71 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 800465e:	b388      	cbz	r0, 80046c4 <fill_keypad+0x154>
					keypadarr[keypaditerator] = '.';
 8004660:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 8004664:	4935      	ldr	r1, [pc, #212]	; (800473c <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8004666:	4f38      	ldr	r7, [pc, #224]	; (8004748 <fill_keypad+0x1d8>)
 8004668:	fb87 3500 	smull	r3, r5, r7, r0
 800466c:	17c3      	asrs	r3, r0, #31
 800466e:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8004672:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8004676:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 800467a:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 800467c:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 800467e:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 8004680:	b254      	sxtb	r4, r2
				if(keypaditerator == 2){
 8004682:	2c02      	cmp	r4, #2
				temp = temp / 10;
 8004684:	4618      	mov	r0, r3
				if(keypaditerator == 2){
 8004686:	d015      	beq.n	80046b4 <fill_keypad+0x144>
			while(temp != 0 && keypaditerator >= 0){
 8004688:	b1cb      	cbz	r3, 80046be <fill_keypad+0x14e>
 800468a:	2c00      	cmp	r4, #0
 800468c:	daec      	bge.n	8004668 <fill_keypad+0xf8>
 800468e:	e7d2      	b.n	8004636 <fill_keypad+0xc6>
			keypadarr[4] = '0';
 8004690:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 8004692:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <fill_keypad+0x1cc>)
 8004696:	482e      	ldr	r0, [pc, #184]	; (8004750 <fill_keypad+0x1e0>)
			keypadarr[4] = '0';
 8004698:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 800469a:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 800469c:	7032      	strb	r2, [r6, #0]
}
 800469e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			keypadarr[4] = '0';
 80046a2:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 80046a4:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 80046a6:	4b25      	ldr	r3, [pc, #148]	; (800473c <fill_keypad+0x1cc>)
 80046a8:	482a      	ldr	r0, [pc, #168]	; (8004754 <fill_keypad+0x1e4>)
			keypadarr[4] = '0';
 80046aa:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 80046ac:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 80046ae:	7032      	strb	r2, [r6, #0]
}
 80046b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 80046b4:	2401      	movs	r4, #1
					keypadarr[keypaditerator] = '.';
 80046b6:	f881 c002 	strb.w	ip, [r1, #2]
			while(temp != 0 && keypaditerator >= 0){
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1d4      	bne.n	8004668 <fill_keypad+0xf8>
			if(keypaditerator >= 0 && num <= 9.999999){
 80046be:	1c62      	adds	r2, r4, #1
 80046c0:	7034      	strb	r4, [r6, #0]
 80046c2:	d0ec      	beq.n	800469e <fill_keypad+0x12e>
 80046c4:	a318      	add	r3, pc, #96	; (adr r3, 8004728 <fill_keypad+0x1b8>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fc f997 	bl	8000a00 <__aeabi_dcmple>
 80046d2:	b138      	cbz	r0, 80046e4 <fill_keypad+0x174>
				keypadarr[keypaditerator] = '0';
 80046d4:	2230      	movs	r2, #48	; 0x30
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <fill_keypad+0x1cc>)
 80046d8:	551a      	strb	r2, [r3, r4]
				keypaditerator--;
 80046da:	3c01      	subs	r4, #1
 80046dc:	b264      	sxtb	r4, r4
			if(keypaditerator >= 0 && num <= 0.999999){
 80046de:	1c63      	adds	r3, r4, #1
				keypaditerator--;
 80046e0:	7034      	strb	r4, [r6, #0]
			if(keypaditerator >= 0 && num <= 0.999999){
 80046e2:	d0dc      	beq.n	800469e <fill_keypad+0x12e>
 80046e4:	a312      	add	r3, pc, #72	; (adr r3, 8004730 <fill_keypad+0x1c0>)
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fc f987 	bl	8000a00 <__aeabi_dcmple>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d0d3      	beq.n	800469e <fill_keypad+0x12e>
				keypadarr[keypaditerator] = '0';
 80046f6:	2230      	movs	r2, #48	; 0x30
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <fill_keypad+0x1cc>)
				keypaditerator--;
 80046fa:	1e61      	subs	r1, r4, #1
 80046fc:	7031      	strb	r1, [r6, #0]
				keypadarr[keypaditerator] = '0';
 80046fe:	551a      	strb	r2, [r3, r4]
}
 8004700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 8004704:	2400      	movs	r4, #0
					keypadarr[keypaditerator] = '.';
 8004706:	f881 c001 	strb.w	ip, [r1, #1]
			while(temp != 0 && keypaditerator >= 0){
 800470a:	2b00      	cmp	r3, #0
 800470c:	f47f af7f 	bne.w	800460e <fill_keypad+0x9e>
 8004710:	e7e5      	b.n	80046de <fill_keypad+0x16e>
 8004712:	bf00      	nop
 8004714:	f3af 8000 	nop.w
 8004718:	eb1c432d 	.word	0xeb1c432d
 800471c:	3f1a36e2 	.word	0x3f1a36e2
 8004720:	d2f1a9fc 	.word	0xd2f1a9fc
 8004724:	3f50624d 	.word	0x3f50624d
 8004728:	de7210bf 	.word	0xde7210bf
 800472c:	4023ffff 	.word	0x4023ffff
 8004730:	e7210be9 	.word	0xe7210be9
 8004734:	3feffffd 	.word	0x3feffffd
 8004738:	20000015 	.word	0x20000015
 800473c:	20000010 	.word	0x20000010
 8004740:	20000758 	.word	0x20000758
 8004744:	447a0000 	.word	0x447a0000
 8004748:	66666667 	.word	0x66666667
 800474c:	42c80000 	.word	0x42c80000
 8004750:	302e3030 	.word	0x302e3030
 8004754:	30302e30 	.word	0x30302e30

08004758 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004758:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 800475a:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 800475c:	bb68      	cbnz	r0, 80047ba <inc_arr_v+0x62>
 800475e:	4c4e      	ldr	r4, [pc, #312]	; (8004898 <inc_arr_v+0x140>)
 8004760:	7822      	ldrb	r2, [r4, #0]
 8004762:	2a31      	cmp	r2, #49	; 0x31
 8004764:	d00c      	beq.n	8004780 <inc_arr_v+0x28>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004766:	2a30      	cmp	r2, #48	; 0x30
 8004768:	d076      	beq.n	8004858 <inc_arr_v+0x100>
			if(keypadarr[pos] < '9'){
 800476a:	5ce2      	ldrb	r2, [r4, r3]
 800476c:	4619      	mov	r1, r3
 800476e:	2a38      	cmp	r2, #56	; 0x38
 8004770:	d90a      	bls.n	8004788 <inc_arr_v+0x30>
				keypadarr[pos] = '0';
 8004772:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 8004774:	1e58      	subs	r0, r3, #1
 8004776:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004778:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 800477a:	f7ff ffed 	bl	8004758 <inc_arr_v>
 800477e:	e005      	b.n	800478c <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004780:	7861      	ldrb	r1, [r4, #1]
 8004782:	292f      	cmp	r1, #47	; 0x2f
 8004784:	d855      	bhi.n	8004832 <inc_arr_v+0xda>
			if(keypadarr[pos] < '9'){
 8004786:	4619      	mov	r1, r3
				keypadarr[pos]++;
 8004788:	3201      	adds	r2, #1
 800478a:	5462      	strb	r2, [r4, r1]
		if(keypadarr[i] != 'z'){
 800478c:	7823      	ldrb	r3, [r4, #0]
 800478e:	2b7a      	cmp	r3, #122	; 0x7a
 8004790:	d10e      	bne.n	80047b0 <inc_arr_v+0x58>
 8004792:	7863      	ldrb	r3, [r4, #1]
 8004794:	2b7a      	cmp	r3, #122	; 0x7a
 8004796:	d16d      	bne.n	8004874 <inc_arr_v+0x11c>
 8004798:	78a3      	ldrb	r3, [r4, #2]
 800479a:	2b7a      	cmp	r3, #122	; 0x7a
 800479c:	d16c      	bne.n	8004878 <inc_arr_v+0x120>
 800479e:	78e3      	ldrb	r3, [r4, #3]
 80047a0:	2b7a      	cmp	r3, #122	; 0x7a
 80047a2:	d16b      	bne.n	800487c <inc_arr_v+0x124>
 80047a4:	7923      	ldrb	r3, [r4, #4]
 80047a6:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80047a8:	bf18      	it	ne
 80047aa:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80047ac:	d101      	bne.n	80047b2 <inc_arr_v+0x5a>
}
 80047ae:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 80047b0:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80047b2:	4a3a      	ldr	r2, [pc, #232]	; (800489c <inc_arr_v+0x144>)
 80047b4:	3b01      	subs	r3, #1
 80047b6:	7013      	strb	r3, [r2, #0]
}
 80047b8:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047ba:	2801      	cmp	r0, #1
 80047bc:	d113      	bne.n	80047e6 <inc_arr_v+0x8e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80047be:	4c36      	ldr	r4, [pc, #216]	; (8004898 <inc_arr_v+0x140>)
 80047c0:	7822      	ldrb	r2, [r4, #0]
 80047c2:	2a31      	cmp	r2, #49	; 0x31
 80047c4:	d1d1      	bne.n	800476a <inc_arr_v+0x12>
 80047c6:	7862      	ldrb	r2, [r4, #1]
 80047c8:	2a32      	cmp	r2, #50	; 0x32
 80047ca:	d027      	beq.n	800481c <inc_arr_v+0xc4>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047cc:	2a31      	cmp	r2, #49	; 0x31
 80047ce:	d1cc      	bne.n	800476a <inc_arr_v+0x12>
 80047d0:	78e1      	ldrb	r1, [r4, #3]
 80047d2:	2930      	cmp	r1, #48	; 0x30
 80047d4:	d802      	bhi.n	80047dc <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047d6:	7921      	ldrb	r1, [r4, #4]
 80047d8:	2930      	cmp	r1, #48	; 0x30
 80047da:	d9d4      	bls.n	8004786 <inc_arr_v+0x2e>
		keypadarr[4] = '0';
 80047dc:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 80047de:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <inc_arr_v+0x148>)
		keypadarr[4] = '0';
 80047e0:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '1';
 80047e2:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 80047e4:	e7d2      	b.n	800478c <inc_arr_v+0x34>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047e6:	2803      	cmp	r0, #3
 80047e8:	d10f      	bne.n	800480a <inc_arr_v+0xb2>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80047ea:	4c2b      	ldr	r4, [pc, #172]	; (8004898 <inc_arr_v+0x140>)
 80047ec:	7822      	ldrb	r2, [r4, #0]
 80047ee:	2a31      	cmp	r2, #49	; 0x31
 80047f0:	d1bb      	bne.n	800476a <inc_arr_v+0x12>
 80047f2:	7862      	ldrb	r2, [r4, #1]
 80047f4:	2a32      	cmp	r2, #50	; 0x32
 80047f6:	d043      	beq.n	8004880 <inc_arr_v+0x128>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80047f8:	2a31      	cmp	r2, #49	; 0x31
 80047fa:	d1b6      	bne.n	800476a <inc_arr_v+0x12>
 80047fc:	78e2      	ldrb	r2, [r4, #3]
 80047fe:	2a39      	cmp	r2, #57	; 0x39
 8004800:	d1b3      	bne.n	800476a <inc_arr_v+0x12>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004802:	7922      	ldrb	r2, [r4, #4]
 8004804:	2a30      	cmp	r2, #48	; 0x30
 8004806:	d9b4      	bls.n	8004772 <inc_arr_v+0x1a>
 8004808:	e7e8      	b.n	80047dc <inc_arr_v+0x84>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800480a:	2804      	cmp	r0, #4
 800480c:	d10d      	bne.n	800482a <inc_arr_v+0xd2>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 800480e:	4c22      	ldr	r4, [pc, #136]	; (8004898 <inc_arr_v+0x140>)
 8004810:	7822      	ldrb	r2, [r4, #0]
 8004812:	2a31      	cmp	r2, #49	; 0x31
 8004814:	d1a9      	bne.n	800476a <inc_arr_v+0x12>
 8004816:	7862      	ldrb	r2, [r4, #1]
 8004818:	2a32      	cmp	r2, #50	; 0x32
 800481a:	d1a6      	bne.n	800476a <inc_arr_v+0x12>
 800481c:	78e2      	ldrb	r2, [r4, #3]
 800481e:	2a30      	cmp	r2, #48	; 0x30
 8004820:	d1a3      	bne.n	800476a <inc_arr_v+0x12>
 8004822:	7922      	ldrb	r2, [r4, #4]
 8004824:	2a30      	cmp	r2, #48	; 0x30
 8004826:	d1a0      	bne.n	800476a <inc_arr_v+0x12>
 8004828:	e7d8      	b.n	80047dc <inc_arr_v+0x84>
		if(pos >= 0 && pos != 2){
 800482a:	2800      	cmp	r0, #0
 800482c:	da0e      	bge.n	800484c <inc_arr_v+0xf4>
 800482e:	4c1a      	ldr	r4, [pc, #104]	; (8004898 <inc_arr_v+0x140>)
 8004830:	e7ac      	b.n	800478c <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004832:	78e0      	ldrb	r0, [r4, #3]
 8004834:	282f      	cmp	r0, #47	; 0x2f
 8004836:	d998      	bls.n	800476a <inc_arr_v+0x12>
 8004838:	7920      	ldrb	r0, [r4, #4]
 800483a:	282f      	cmp	r0, #47	; 0x2f
 800483c:	d8ce      	bhi.n	80047dc <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800483e:	2a30      	cmp	r2, #48	; 0x30
 8004840:	d193      	bne.n	800476a <inc_arr_v+0x12>
 8004842:	2931      	cmp	r1, #49	; 0x31
 8004844:	d80e      	bhi.n	8004864 <inc_arr_v+0x10c>
			if(keypadarr[pos] < '9'){
 8004846:	2100      	movs	r1, #0
 8004848:	7822      	ldrb	r2, [r4, #0]
 800484a:	e79d      	b.n	8004788 <inc_arr_v+0x30>
		if(pos >= 0 && pos != 2){
 800484c:	2802      	cmp	r0, #2
 800484e:	d120      	bne.n	8004892 <inc_arr_v+0x13a>
			inc_arr_v(pos-1);
 8004850:	2001      	movs	r0, #1
 8004852:	f7ff ff81 	bl	8004758 <inc_arr_v>
 8004856:	e7ea      	b.n	800482e <inc_arr_v+0xd6>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004858:	7861      	ldrb	r1, [r4, #1]
 800485a:	2932      	cmp	r1, #50	; 0x32
 800485c:	d9f1      	bls.n	8004842 <inc_arr_v+0xea>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 800485e:	78e0      	ldrb	r0, [r4, #3]
 8004860:	282f      	cmp	r0, #47	; 0x2f
 8004862:	d8e9      	bhi.n	8004838 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004864:	78e2      	ldrb	r2, [r4, #3]
 8004866:	2a30      	cmp	r2, #48	; 0x30
 8004868:	d8b8      	bhi.n	80047dc <inc_arr_v+0x84>
 800486a:	7922      	ldrb	r2, [r4, #4]
 800486c:	2a30      	cmp	r2, #48	; 0x30
 800486e:	f67f af7c 	bls.w	800476a <inc_arr_v+0x12>
 8004872:	e7b3      	b.n	80047dc <inc_arr_v+0x84>
	for(int i = 0; i < keypadlength; i++){
 8004874:	2301      	movs	r3, #1
 8004876:	e79c      	b.n	80047b2 <inc_arr_v+0x5a>
 8004878:	2302      	movs	r3, #2
 800487a:	e79a      	b.n	80047b2 <inc_arr_v+0x5a>
 800487c:	2303      	movs	r3, #3
 800487e:	e798      	b.n	80047b2 <inc_arr_v+0x5a>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004880:	78e2      	ldrb	r2, [r4, #3]
 8004882:	2a30      	cmp	r2, #48	; 0x30
 8004884:	f47f af71 	bne.w	800476a <inc_arr_v+0x12>
 8004888:	7922      	ldrb	r2, [r4, #4]
 800488a:	2a2f      	cmp	r2, #47	; 0x2f
 800488c:	f67f af6d 	bls.w	800476a <inc_arr_v+0x12>
 8004890:	e7a4      	b.n	80047dc <inc_arr_v+0x84>
 8004892:	4c01      	ldr	r4, [pc, #4]	; (8004898 <inc_arr_v+0x140>)
 8004894:	e769      	b.n	800476a <inc_arr_v+0x12>
 8004896:	bf00      	nop
 8004898:	20000010 	.word	0x20000010
 800489c:	20000015 	.word	0x20000015
 80048a0:	302e3231 	.word	0x302e3231

080048a4 <inc_arr_a>:
void inc_arr_a(int8_t pos){
 80048a4:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 80048a6:	b9b0      	cbnz	r0, 80048d6 <inc_arr_a+0x32>
 80048a8:	4c40      	ldr	r4, [pc, #256]	; (80049ac <inc_arr_a+0x108>)
		keypadarr[4] = '0';
 80048aa:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 80048ac:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <inc_arr_a+0x10c>)
		keypadarr[4] = '0';
 80048ae:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 80048b0:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 80048b2:	7823      	ldrb	r3, [r4, #0]
 80048b4:	2b7a      	cmp	r3, #122	; 0x7a
 80048b6:	d118      	bne.n	80048ea <inc_arr_a+0x46>
 80048b8:	7863      	ldrb	r3, [r4, #1]
 80048ba:	2b7a      	cmp	r3, #122	; 0x7a
 80048bc:	d15f      	bne.n	800497e <inc_arr_a+0xda>
 80048be:	78a3      	ldrb	r3, [r4, #2]
 80048c0:	2b7a      	cmp	r3, #122	; 0x7a
 80048c2:	d16c      	bne.n	800499e <inc_arr_a+0xfa>
 80048c4:	78e3      	ldrb	r3, [r4, #3]
 80048c6:	2b7a      	cmp	r3, #122	; 0x7a
 80048c8:	d16b      	bne.n	80049a2 <inc_arr_a+0xfe>
 80048ca:	7923      	ldrb	r3, [r4, #4]
 80048cc:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80048ce:	bf18      	it	ne
 80048d0:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80048d2:	d10b      	bne.n	80048ec <inc_arr_a+0x48>
}
 80048d4:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 80048d6:	2802      	cmp	r0, #2
 80048d8:	d00c      	beq.n	80048f4 <inc_arr_a+0x50>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80048da:	2803      	cmp	r0, #3
 80048dc:	d01b      	beq.n	8004916 <inc_arr_a+0x72>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80048de:	2804      	cmp	r0, #4
 80048e0:	d031      	beq.n	8004946 <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 80048e2:	2800      	cmp	r0, #0
 80048e4:	da11      	bge.n	800490a <inc_arr_a+0x66>
 80048e6:	4c31      	ldr	r4, [pc, #196]	; (80049ac <inc_arr_a+0x108>)
 80048e8:	e7e3      	b.n	80048b2 <inc_arr_a+0xe>
	for(int i = 0; i < keypadlength; i++){
 80048ea:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80048ec:	4a31      	ldr	r2, [pc, #196]	; (80049b4 <inc_arr_a+0x110>)
 80048ee:	3b01      	subs	r3, #1
 80048f0:	7013      	strb	r3, [r2, #0]
}
 80048f2:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80048f4:	4c2d      	ldr	r4, [pc, #180]	; (80049ac <inc_arr_a+0x108>)
 80048f6:	7823      	ldrb	r3, [r4, #0]
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d032      	beq.n	8004962 <inc_arr_a+0xbe>
			if(keypadarr[pos] < '9'){
 80048fc:	5c23      	ldrb	r3, [r4, r0]
 80048fe:	4602      	mov	r2, r0
 8004900:	2b38      	cmp	r3, #56	; 0x38
 8004902:	d819      	bhi.n	8004938 <inc_arr_a+0x94>
				keypadarr[pos]++;
 8004904:	3301      	adds	r3, #1
 8004906:	54a3      	strb	r3, [r4, r2]
 8004908:	e7d3      	b.n	80048b2 <inc_arr_a+0xe>
		if(pos >= 0 && pos != 1){
 800490a:	2801      	cmp	r0, #1
 800490c:	d14b      	bne.n	80049a6 <inc_arr_a+0x102>
			inc_arr_a(pos-1);
 800490e:	2000      	movs	r0, #0
 8004910:	f7ff ffc8 	bl	80048a4 <inc_arr_a>
 8004914:	e7e7      	b.n	80048e6 <inc_arr_a+0x42>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004916:	4c25      	ldr	r4, [pc, #148]	; (80049ac <inc_arr_a+0x108>)
 8004918:	7823      	ldrb	r3, [r4, #0]
 800491a:	2b30      	cmp	r3, #48	; 0x30
 800491c:	d1ee      	bne.n	80048fc <inc_arr_a+0x58>
 800491e:	78a3      	ldrb	r3, [r4, #2]
 8004920:	2b38      	cmp	r3, #56	; 0x38
 8004922:	d035      	beq.n	8004990 <inc_arr_a+0xec>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004924:	78a3      	ldrb	r3, [r4, #2]
 8004926:	2b37      	cmp	r3, #55	; 0x37
 8004928:	d1e8      	bne.n	80048fc <inc_arr_a+0x58>
 800492a:	78e3      	ldrb	r3, [r4, #3]
 800492c:	2b39      	cmp	r3, #57	; 0x39
 800492e:	d1e5      	bne.n	80048fc <inc_arr_a+0x58>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004930:	7923      	ldrb	r3, [r4, #4]
 8004932:	2b30      	cmp	r3, #48	; 0x30
 8004934:	d8b9      	bhi.n	80048aa <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 8004936:	2203      	movs	r2, #3
				keypadarr[pos] = '0';
 8004938:	2330      	movs	r3, #48	; 0x30
				inc_arr_a(pos-1);
 800493a:	3801      	subs	r0, #1
 800493c:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 800493e:	54a3      	strb	r3, [r4, r2]
				inc_arr_a(pos-1);
 8004940:	f7ff ffb0 	bl	80048a4 <inc_arr_a>
 8004944:	e7b5      	b.n	80048b2 <inc_arr_a+0xe>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004946:	4c19      	ldr	r4, [pc, #100]	; (80049ac <inc_arr_a+0x108>)
 8004948:	7823      	ldrb	r3, [r4, #0]
 800494a:	2b30      	cmp	r3, #48	; 0x30
 800494c:	d1d6      	bne.n	80048fc <inc_arr_a+0x58>
 800494e:	78a3      	ldrb	r3, [r4, #2]
 8004950:	2b38      	cmp	r3, #56	; 0x38
 8004952:	d1d3      	bne.n	80048fc <inc_arr_a+0x58>
 8004954:	78e3      	ldrb	r3, [r4, #3]
 8004956:	2b30      	cmp	r3, #48	; 0x30
 8004958:	d1d0      	bne.n	80048fc <inc_arr_a+0x58>
 800495a:	7923      	ldrb	r3, [r4, #4]
 800495c:	2b30      	cmp	r3, #48	; 0x30
 800495e:	d1cd      	bne.n	80048fc <inc_arr_a+0x58>
 8004960:	e7a3      	b.n	80048aa <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004962:	78a3      	ldrb	r3, [r4, #2]
 8004964:	2b38      	cmp	r3, #56	; 0x38
 8004966:	d00c      	beq.n	8004982 <inc_arr_a+0xde>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004968:	78a3      	ldrb	r3, [r4, #2]
 800496a:	2b37      	cmp	r3, #55	; 0x37
 800496c:	d1c6      	bne.n	80048fc <inc_arr_a+0x58>
 800496e:	78e2      	ldrb	r2, [r4, #3]
 8004970:	2a30      	cmp	r2, #48	; 0x30
 8004972:	d89a      	bhi.n	80048aa <inc_arr_a+0x6>
 8004974:	7922      	ldrb	r2, [r4, #4]
 8004976:	2a30      	cmp	r2, #48	; 0x30
 8004978:	d897      	bhi.n	80048aa <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 800497a:	2202      	movs	r2, #2
 800497c:	e7c2      	b.n	8004904 <inc_arr_a+0x60>
	for(int i = 0; i < keypadlength; i++){
 800497e:	2301      	movs	r3, #1
 8004980:	e7b4      	b.n	80048ec <inc_arr_a+0x48>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004982:	78e3      	ldrb	r3, [r4, #3]
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	d1ef      	bne.n	8004968 <inc_arr_a+0xc4>
 8004988:	7923      	ldrb	r3, [r4, #4]
 800498a:	2b30      	cmp	r3, #48	; 0x30
 800498c:	d1ec      	bne.n	8004968 <inc_arr_a+0xc4>
 800498e:	e78c      	b.n	80048aa <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004990:	78e3      	ldrb	r3, [r4, #3]
 8004992:	2b30      	cmp	r3, #48	; 0x30
 8004994:	d1c6      	bne.n	8004924 <inc_arr_a+0x80>
 8004996:	7923      	ldrb	r3, [r4, #4]
 8004998:	2b2f      	cmp	r3, #47	; 0x2f
 800499a:	d886      	bhi.n	80048aa <inc_arr_a+0x6>
 800499c:	e7c2      	b.n	8004924 <inc_arr_a+0x80>
	for(int i = 0; i < keypadlength; i++){
 800499e:	2302      	movs	r3, #2
 80049a0:	e7a4      	b.n	80048ec <inc_arr_a+0x48>
 80049a2:	2303      	movs	r3, #3
 80049a4:	e7a2      	b.n	80048ec <inc_arr_a+0x48>
 80049a6:	4c01      	ldr	r4, [pc, #4]	; (80049ac <inc_arr_a+0x108>)
 80049a8:	e7a8      	b.n	80048fc <inc_arr_a+0x58>
 80049aa:	bf00      	nop
 80049ac:	20000010 	.word	0x20000010
 80049b0:	30382e30 	.word	0x30382e30
 80049b4:	20000015 	.word	0x20000015

080049b8 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 80049b8:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80049ba:	4603      	mov	r3, r0
 80049bc:	4c45      	ldr	r4, [pc, #276]	; (8004ad4 <dec_arr_v+0x11c>)
 80049be:	b9c8      	cbnz	r0, 80049f4 <dec_arr_v+0x3c>
 80049c0:	7822      	ldrb	r2, [r4, #0]
 80049c2:	2a30      	cmp	r2, #48	; 0x30
 80049c4:	d01e      	beq.n	8004a04 <dec_arr_v+0x4c>
			if(keypadarr[pos] > '0'){
 80049c6:	5ce2      	ldrb	r2, [r4, r3]
 80049c8:	2a30      	cmp	r2, #48	; 0x30
 80049ca:	d960      	bls.n	8004a8e <dec_arr_v+0xd6>
				keypadarr[pos]--;
 80049cc:	3a01      	subs	r2, #1
 80049ce:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 80049d0:	7823      	ldrb	r3, [r4, #0]
 80049d2:	2b7a      	cmp	r3, #122	; 0x7a
 80049d4:	d156      	bne.n	8004a84 <dec_arr_v+0xcc>
 80049d6:	7863      	ldrb	r3, [r4, #1]
 80049d8:	2b7a      	cmp	r3, #122	; 0x7a
 80049da:	d15f      	bne.n	8004a9c <dec_arr_v+0xe4>
 80049dc:	78a3      	ldrb	r3, [r4, #2]
 80049de:	2b7a      	cmp	r3, #122	; 0x7a
 80049e0:	d15e      	bne.n	8004aa0 <dec_arr_v+0xe8>
 80049e2:	78e3      	ldrb	r3, [r4, #3]
 80049e4:	2b7a      	cmp	r3, #122	; 0x7a
 80049e6:	d15d      	bne.n	8004aa4 <dec_arr_v+0xec>
 80049e8:	7923      	ldrb	r3, [r4, #4]
 80049ea:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80049ec:	bf18      	it	ne
 80049ee:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80049f0:	d149      	bne.n	8004a86 <dec_arr_v+0xce>
}
 80049f2:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80049f4:	2801      	cmp	r0, #1
 80049f6:	d10a      	bne.n	8004a0e <dec_arr_v+0x56>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80049f8:	7822      	ldrb	r2, [r4, #0]
 80049fa:	2a30      	cmp	r2, #48	; 0x30
 80049fc:	d1e3      	bne.n	80049c6 <dec_arr_v+0xe>
 80049fe:	7862      	ldrb	r2, [r4, #1]
 8004a00:	2a30      	cmp	r2, #48	; 0x30
 8004a02:	d1e0      	bne.n	80049c6 <dec_arr_v+0xe>
		keypadarr[4] = '0';
 8004a04:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 8004a06:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <dec_arr_v+0x120>)
		keypadarr[4] = '0';
 8004a08:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004a0a:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 8004a0c:	e7e0      	b.n	80049d0 <dec_arr_v+0x18>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004a0e:	2803      	cmp	r0, #3
 8004a10:	d02e      	beq.n	8004a70 <dec_arr_v+0xb8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004a12:	2804      	cmp	r0, #4
 8004a14:	d10c      	bne.n	8004a30 <dec_arr_v+0x78>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004a16:	7822      	ldrb	r2, [r4, #0]
 8004a18:	2a30      	cmp	r2, #48	; 0x30
 8004a1a:	d1d4      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a1c:	7862      	ldrb	r2, [r4, #1]
 8004a1e:	2a30      	cmp	r2, #48	; 0x30
 8004a20:	d1d1      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a22:	78e2      	ldrb	r2, [r4, #3]
 8004a24:	2a30      	cmp	r2, #48	; 0x30
 8004a26:	d1ce      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a28:	7922      	ldrb	r2, [r4, #4]
 8004a2a:	2a30      	cmp	r2, #48	; 0x30
 8004a2c:	d1cb      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a2e:	e7e9      	b.n	8004a04 <dec_arr_v+0x4c>
		if(pos <= 4 && pos != 2){
 8004a30:	dcce      	bgt.n	80049d0 <dec_arr_v+0x18>
 8004a32:	2802      	cmp	r0, #2
 8004a34:	d1c7      	bne.n	80049c6 <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004a36:	7823      	ldrb	r3, [r4, #0]
 8004a38:	2b30      	cmp	r3, #48	; 0x30
 8004a3a:	7863      	ldrb	r3, [r4, #1]
 8004a3c:	d034      	beq.n	8004aa8 <dec_arr_v+0xf0>
			if(keypadarr[pos] > '0'){
 8004a3e:	2b30      	cmp	r3, #48	; 0x30
 8004a40:	d93a      	bls.n	8004ab8 <dec_arr_v+0x100>
				keypadarr[pos]--;
 8004a42:	3b01      	subs	r3, #1
 8004a44:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004a46:	7823      	ldrb	r3, [r4, #0]
 8004a48:	2b7a      	cmp	r3, #122	; 0x7a
 8004a4a:	d141      	bne.n	8004ad0 <dec_arr_v+0x118>
 8004a4c:	7863      	ldrb	r3, [r4, #1]
 8004a4e:	2b7a      	cmp	r3, #122	; 0x7a
 8004a50:	d138      	bne.n	8004ac4 <dec_arr_v+0x10c>
 8004a52:	78a3      	ldrb	r3, [r4, #2]
 8004a54:	2b7a      	cmp	r3, #122	; 0x7a
 8004a56:	d137      	bne.n	8004ac8 <dec_arr_v+0x110>
 8004a58:	78e3      	ldrb	r3, [r4, #3]
 8004a5a:	2b7a      	cmp	r3, #122	; 0x7a
 8004a5c:	d136      	bne.n	8004acc <dec_arr_v+0x114>
 8004a5e:	7923      	ldrb	r3, [r4, #4]
 8004a60:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004a62:	bf18      	it	ne
 8004a64:	2204      	movne	r2, #4
		if(keypadarr[i] != 'z'){
 8004a66:	d0b6      	beq.n	80049d6 <dec_arr_v+0x1e>
			keypaditerator = i - 1;
 8004a68:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <dec_arr_v+0x124>)
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
			break;
 8004a6e:	e7af      	b.n	80049d0 <dec_arr_v+0x18>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004a70:	7822      	ldrb	r2, [r4, #0]
 8004a72:	2a30      	cmp	r2, #48	; 0x30
 8004a74:	d1a7      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a76:	7862      	ldrb	r2, [r4, #1]
 8004a78:	2a30      	cmp	r2, #48	; 0x30
 8004a7a:	d1a4      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a7c:	78e2      	ldrb	r2, [r4, #3]
 8004a7e:	2a30      	cmp	r2, #48	; 0x30
 8004a80:	d1a1      	bne.n	80049c6 <dec_arr_v+0xe>
 8004a82:	e7bf      	b.n	8004a04 <dec_arr_v+0x4c>
	for(int i = 0; i < keypadlength; i++){
 8004a84:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <dec_arr_v+0x124>)
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	7013      	strb	r3, [r2, #0]
}
 8004a8c:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 8004a8e:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 8004a90:	1e58      	subs	r0, r3, #1
 8004a92:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004a94:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 8004a96:	f7ff ff8f 	bl	80049b8 <dec_arr_v>
 8004a9a:	e799      	b.n	80049d0 <dec_arr_v+0x18>
	for(int i = 0; i < keypadlength; i++){
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e7f2      	b.n	8004a86 <dec_arr_v+0xce>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e7f0      	b.n	8004a86 <dec_arr_v+0xce>
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e7ee      	b.n	8004a86 <dec_arr_v+0xce>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004aa8:	2b30      	cmp	r3, #48	; 0x30
 8004aaa:	d1c8      	bne.n	8004a3e <dec_arr_v+0x86>
		keypadarr[2] = '.';
 8004aac:	f243 012e 	movw	r1, #12334	; 0x302e
	for(int i = 0; i < keypadlength; i++){
 8004ab0:	2200      	movs	r2, #0
		keypadarr[4] = '0';
 8004ab2:	7123      	strb	r3, [r4, #4]
		keypadarr[2] = '.';
 8004ab4:	8061      	strh	r1, [r4, #2]
		if(keypadarr[i] != 'z'){
 8004ab6:	e7d7      	b.n	8004a68 <dec_arr_v+0xb0>
				keypadarr[pos] = '9';
 8004ab8:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 8004aba:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 8004abc:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 8004abe:	f7ff ff7b 	bl	80049b8 <dec_arr_v>
 8004ac2:	e7c0      	b.n	8004a46 <dec_arr_v+0x8e>
	for(int i = 0; i < keypadlength; i++){
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	e7cf      	b.n	8004a68 <dec_arr_v+0xb0>
 8004ac8:	2202      	movs	r2, #2
 8004aca:	e7cd      	b.n	8004a68 <dec_arr_v+0xb0>
 8004acc:	2203      	movs	r2, #3
 8004ace:	e7cb      	b.n	8004a68 <dec_arr_v+0xb0>
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	e7c9      	b.n	8004a68 <dec_arr_v+0xb0>
 8004ad4:	20000010 	.word	0x20000010
 8004ad8:	302e3030 	.word	0x302e3030
 8004adc:	20000015 	.word	0x20000015

08004ae0 <dec_arr_a>:
void dec_arr_a(int8_t pos){
 8004ae0:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4c43      	ldr	r4, [pc, #268]	; (8004bf4 <dec_arr_a+0x114>)
 8004ae6:	b940      	cbnz	r0, 8004afa <dec_arr_a+0x1a>
 8004ae8:	7822      	ldrb	r2, [r4, #0]
 8004aea:	2a30      	cmp	r2, #48	; 0x30
 8004aec:	d035      	beq.n	8004b5a <dec_arr_a+0x7a>
			if(keypadarr[pos] > '0'){
 8004aee:	5ce2      	ldrb	r2, [r4, r3]
 8004af0:	2a30      	cmp	r2, #48	; 0x30
 8004af2:	d95d      	bls.n	8004bb0 <dec_arr_a+0xd0>
				keypadarr[pos]--;
 8004af4:	3a01      	subs	r2, #1
 8004af6:	54e2      	strb	r2, [r4, r3]
 8004af8:	e033      	b.n	8004b62 <dec_arr_a+0x82>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004afa:	2801      	cmp	r0, #1
 8004afc:	d11d      	bne.n	8004b3a <dec_arr_a+0x5a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004afe:	7823      	ldrb	r3, [r4, #0]
 8004b00:	2b30      	cmp	r3, #48	; 0x30
 8004b02:	d051      	beq.n	8004ba8 <dec_arr_a+0xc8>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004b04:	7823      	ldrb	r3, [r4, #0]
 8004b06:	2b30      	cmp	r3, #48	; 0x30
 8004b08:	d066      	beq.n	8004bd8 <dec_arr_a+0xf8>
			if(keypadarr[pos] > '0'){
 8004b0a:	d95a      	bls.n	8004bc2 <dec_arr_a+0xe2>
				keypadarr[pos]--;
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004b10:	7823      	ldrb	r3, [r4, #0]
 8004b12:	2b7a      	cmp	r3, #122	; 0x7a
 8004b14:	d16b      	bne.n	8004bee <dec_arr_a+0x10e>
 8004b16:	7863      	ldrb	r3, [r4, #1]
 8004b18:	2b7a      	cmp	r3, #122	; 0x7a
 8004b1a:	d162      	bne.n	8004be2 <dec_arr_a+0x102>
 8004b1c:	78a3      	ldrb	r3, [r4, #2]
 8004b1e:	2b7a      	cmp	r3, #122	; 0x7a
 8004b20:	d161      	bne.n	8004be6 <dec_arr_a+0x106>
 8004b22:	78e3      	ldrb	r3, [r4, #3]
 8004b24:	2b7a      	cmp	r3, #122	; 0x7a
 8004b26:	d160      	bne.n	8004bea <dec_arr_a+0x10a>
 8004b28:	7923      	ldrb	r3, [r4, #4]
 8004b2a:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004b2c:	bf18      	it	ne
 8004b2e:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004b30:	d01a      	beq.n	8004b68 <dec_arr_a+0x88>
			keypaditerator = i - 1;
 8004b32:	4a31      	ldr	r2, [pc, #196]	; (8004bf8 <dec_arr_a+0x118>)
 8004b34:	3b01      	subs	r3, #1
 8004b36:	7013      	strb	r3, [r2, #0]
			break;
 8004b38:	e013      	b.n	8004b62 <dec_arr_a+0x82>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004b3a:	2803      	cmp	r0, #3
 8004b3c:	d023      	beq.n	8004b86 <dec_arr_a+0xa6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004b3e:	2804      	cmp	r0, #4
 8004b40:	d130      	bne.n	8004ba4 <dec_arr_a+0xc4>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004b42:	7822      	ldrb	r2, [r4, #0]
 8004b44:	2a30      	cmp	r2, #48	; 0x30
 8004b46:	d1d2      	bne.n	8004aee <dec_arr_a+0xe>
 8004b48:	78a2      	ldrb	r2, [r4, #2]
 8004b4a:	2a30      	cmp	r2, #48	; 0x30
 8004b4c:	d1cf      	bne.n	8004aee <dec_arr_a+0xe>
 8004b4e:	78e2      	ldrb	r2, [r4, #3]
 8004b50:	2a30      	cmp	r2, #48	; 0x30
 8004b52:	d1cc      	bne.n	8004aee <dec_arr_a+0xe>
 8004b54:	7922      	ldrb	r2, [r4, #4]
 8004b56:	2a30      	cmp	r2, #48	; 0x30
 8004b58:	d1c9      	bne.n	8004aee <dec_arr_a+0xe>
		keypadarr[4] = '0';
 8004b5a:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 8004b5c:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <dec_arr_a+0x11c>)
		keypadarr[4] = '0';
 8004b5e:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004b60:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004b62:	7823      	ldrb	r3, [r4, #0]
 8004b64:	2b7a      	cmp	r3, #122	; 0x7a
 8004b66:	d118      	bne.n	8004b9a <dec_arr_a+0xba>
 8004b68:	7863      	ldrb	r3, [r4, #1]
 8004b6a:	2b7a      	cmp	r3, #122	; 0x7a
 8004b6c:	d127      	bne.n	8004bbe <dec_arr_a+0xde>
 8004b6e:	78a3      	ldrb	r3, [r4, #2]
 8004b70:	2b7a      	cmp	r3, #122	; 0x7a
 8004b72:	d12d      	bne.n	8004bd0 <dec_arr_a+0xf0>
 8004b74:	78e3      	ldrb	r3, [r4, #3]
 8004b76:	2b7a      	cmp	r3, #122	; 0x7a
 8004b78:	d12c      	bne.n	8004bd4 <dec_arr_a+0xf4>
 8004b7a:	7923      	ldrb	r3, [r4, #4]
 8004b7c:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004b7e:	bf18      	it	ne
 8004b80:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004b82:	d10b      	bne.n	8004b9c <dec_arr_a+0xbc>
}
 8004b84:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004b86:	7822      	ldrb	r2, [r4, #0]
 8004b88:	2a30      	cmp	r2, #48	; 0x30
 8004b8a:	d1b0      	bne.n	8004aee <dec_arr_a+0xe>
 8004b8c:	78a2      	ldrb	r2, [r4, #2]
 8004b8e:	2a30      	cmp	r2, #48	; 0x30
 8004b90:	d1ad      	bne.n	8004aee <dec_arr_a+0xe>
 8004b92:	78e2      	ldrb	r2, [r4, #3]
 8004b94:	2a30      	cmp	r2, #48	; 0x30
 8004b96:	d1aa      	bne.n	8004aee <dec_arr_a+0xe>
 8004b98:	e7df      	b.n	8004b5a <dec_arr_a+0x7a>
	for(int i = 0; i < keypadlength; i++){
 8004b9a:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004b9c:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <dec_arr_a+0x118>)
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	7013      	strb	r3, [r2, #0]
}
 8004ba2:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 8004ba4:	dcdd      	bgt.n	8004b62 <dec_arr_a+0x82>
 8004ba6:	e7a2      	b.n	8004aee <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004ba8:	78a3      	ldrb	r3, [r4, #2]
 8004baa:	2b30      	cmp	r3, #48	; 0x30
 8004bac:	d1aa      	bne.n	8004b04 <dec_arr_a+0x24>
 8004bae:	e7d4      	b.n	8004b5a <dec_arr_a+0x7a>
				keypadarr[pos] = '9';
 8004bb0:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004bb6:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 8004bb8:	f7ff ff92 	bl	8004ae0 <dec_arr_a>
 8004bbc:	e7d1      	b.n	8004b62 <dec_arr_a+0x82>
	for(int i = 0; i < keypadlength; i++){
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e7ec      	b.n	8004b9c <dec_arr_a+0xbc>
				keypadarr[pos] = '9';
 8004bc2:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 8004bc8:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 8004bca:	f7ff ff89 	bl	8004ae0 <dec_arr_a>
 8004bce:	e79f      	b.n	8004b10 <dec_arr_a+0x30>
	for(int i = 0; i < keypadlength; i++){
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e7e3      	b.n	8004b9c <dec_arr_a+0xbc>
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e7e1      	b.n	8004b9c <dec_arr_a+0xbc>
		keypadarr[1] = '.';
 8004bd8:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <dec_arr_a+0x120>)
	for(int i = 0; i < keypadlength; i++){
 8004bda:	2300      	movs	r3, #0
		keypadarr[1] = '.';
 8004bdc:	f8c4 2001 	str.w	r2, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004be0:	e7a7      	b.n	8004b32 <dec_arr_a+0x52>
	for(int i = 0; i < keypadlength; i++){
 8004be2:	2301      	movs	r3, #1
 8004be4:	e7a5      	b.n	8004b32 <dec_arr_a+0x52>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e7a3      	b.n	8004b32 <dec_arr_a+0x52>
 8004bea:	2303      	movs	r3, #3
 8004bec:	e7a1      	b.n	8004b32 <dec_arr_a+0x52>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e79f      	b.n	8004b32 <dec_arr_a+0x52>
 8004bf2:	bf00      	nop
 8004bf4:	20000010 	.word	0x20000010
 8004bf8:	20000015 	.word	0x20000015
 8004bfc:	30302e30 	.word	0x30302e30
 8004c00:	3030302e 	.word	0x3030302e
 8004c04:	00000000 	.word	0x00000000

08004c08 <keypad_sm>:
void keypad_sm(char num){
 8004c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(kpenum == WAIT){
 8004c0c:	4caa      	ldr	r4, [pc, #680]	; (8004eb8 <keypad_sm+0x2b0>)
 8004c0e:	7822      	ldrb	r2, [r4, #0]
 8004c10:	b9da      	cbnz	r2, 8004c4a <keypad_sm+0x42>
		if(num == 'A'){
 8004c12:	2841      	cmp	r0, #65	; 0x41
 8004c14:	d075      	beq.n	8004d02 <keypad_sm+0xfa>
		else if(num == 'B'){
 8004c16:	2842      	cmp	r0, #66	; 0x42
 8004c18:	f000 811a 	beq.w	8004e50 <keypad_sm+0x248>
		else if(num == 'C'){
 8004c1c:	2843      	cmp	r0, #67	; 0x43
 8004c1e:	f000 80e3 	beq.w	8004de8 <keypad_sm+0x1e0>
		else if(num == 'D'){
 8004c22:	2844      	cmp	r0, #68	; 0x44
 8004c24:	f000 833b 	beq.w	800529e <keypad_sm+0x696>
		else if(num == '*'){
 8004c28:	282a      	cmp	r0, #42	; 0x2a
 8004c2a:	f000 83bd 	beq.w	80053a8 <keypad_sm+0x7a0>
		else if(num == '/'){
 8004c2e:	282f      	cmp	r0, #47	; 0x2f
 8004c30:	d116      	bne.n	8004c60 <keypad_sm+0x58>
			if(toggle_chstat_main_tim){
 8004c32:	4ba2      	ldr	r3, [pc, #648]	; (8004ebc <keypad_sm+0x2b4>)
 8004c34:	7819      	ldrb	r1, [r3, #0]
 8004c36:	b199      	cbz	r1, 8004c60 <keypad_sm+0x58>
				toggle_chstat_main = 1;
 8004c38:	2401      	movs	r4, #1
 8004c3a:	49a1      	ldr	r1, [pc, #644]	; (8004ec0 <keypad_sm+0x2b8>)
				toggle_chstat_main_tim = 0;
 8004c3c:	701a      	strb	r2, [r3, #0]
				toggle_chstat_main = 1;
 8004c3e:	700c      	strb	r4, [r1, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 8004c40:	48a0      	ldr	r0, [pc, #640]	; (8004ec4 <keypad_sm+0x2bc>)
}
 8004c42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				HAL_TIM_Base_Start_IT(&htim4);
 8004c46:	f005 bff7 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
	else if(kpenum == V1){
 8004c4a:	2a01      	cmp	r2, #1
 8004c4c:	d00a      	beq.n	8004c64 <keypad_sm+0x5c>
	else if(kpenum == A1){
 8004c4e:	2a02      	cmp	r2, #2
 8004c50:	f000 8142 	beq.w	8004ed8 <keypad_sm+0x2d0>
	else if(kpenum == V2){
 8004c54:	2a03      	cmp	r2, #3
 8004c56:	f000 8087 	beq.w	8004d68 <keypad_sm+0x160>
	else if(kpenum == A2){
 8004c5a:	2a04      	cmp	r2, #4
 8004c5c:	f000 8353 	beq.w	8005306 <keypad_sm+0x6fe>
}
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004c64:	4f98      	ldr	r7, [pc, #608]	; (8004ec8 <keypad_sm+0x2c0>)
 8004c66:	783a      	ldrb	r2, [r7, #0]
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	f000 8185 	beq.w	8004f78 <keypad_sm+0x370>
			if(num == 'A'){
 8004c6e:	2841      	cmp	r0, #65	; 0x41
 8004c70:	f000 83a2 	beq.w	80053b8 <keypad_sm+0x7b0>
			else if(num == 'B'){
 8004c74:	2842      	cmp	r0, #66	; 0x42
 8004c76:	f000 822b 	beq.w	80050d0 <keypad_sm+0x4c8>
			else if(num == 'C'){
 8004c7a:	2843      	cmp	r0, #67	; 0x43
 8004c7c:	f000 855a 	beq.w	8005734 <keypad_sm+0xb2c>
			else if(num == 'D'){
 8004c80:	2844      	cmp	r0, #68	; 0x44
 8004c82:	f000 86d1 	beq.w	8005a28 <keypad_sm+0xe20>
			else if(num == '.'){
 8004c86:	282e      	cmp	r0, #46	; 0x2e
 8004c88:	f000 87e6 	beq.w	8005c58 <keypad_sm+0x1050>
			else if(num >= '0' && num <= '9'){
 8004c8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004c90:	2b09      	cmp	r3, #9
 8004c92:	f201 8167 	bhi.w	8005f64 <keypad_sm+0x135c>
	while(keypaditerator < 4){
 8004c96:	4d8d      	ldr	r5, [pc, #564]	; (8004ecc <keypad_sm+0x2c4>)
 8004c98:	f995 2000 	ldrsb.w	r2, [r5]
 8004c9c:	2a03      	cmp	r2, #3
 8004c9e:	f300 824c 	bgt.w	800513a <keypad_sm+0x532>
 8004ca2:	4b8b      	ldr	r3, [pc, #556]	; (8004ed0 <keypad_sm+0x2c8>)
 8004ca4:	4e8b      	ldr	r6, [pc, #556]	; (8004ed4 <keypad_sm+0x2cc>)
 8004ca6:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004caa:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004cae:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004cb2:	f896 e000 	ldrb.w	lr, [r6]
 8004cb6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004cba:	789c      	ldrb	r4, [r3, #2]
 8004cbc:	7858      	ldrb	r0, [r3, #1]
 8004cbe:	7819      	ldrb	r1, [r3, #0]
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	e003      	b.n	8004ccc <keypad_sm+0xc4>
	while(keypaditerator < 4){
 8004cc4:	46a4      	mov	ip, r4
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004cca:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004ccc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004cce:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004cd2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004cd4:	bf04      	itt	eq
 8004cd6:	f04f 0801 	moveq.w	r8, #1
 8004cda:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004cde:	2a04      	cmp	r2, #4
 8004ce0:	46e1      	mov	r9, ip
 8004ce2:	d1ef      	bne.n	8004cc4 <keypad_sm+0xbc>
 8004ce4:	702a      	strb	r2, [r5, #0]
 8004ce6:	f883 c004 	strb.w	ip, [r3, #4]
 8004cea:	70dc      	strb	r4, [r3, #3]
 8004cec:	7098      	strb	r0, [r3, #2]
 8004cee:	7059      	strb	r1, [r3, #1]
 8004cf0:	f883 a000 	strb.w	sl, [r3]
 8004cf4:	f1b8 0f00 	cmp.w	r8, #0
 8004cf8:	f000 821f 	beq.w	800513a <keypad_sm+0x532>
 8004cfc:	f886 e000 	strb.w	lr, [r6]
 8004d00:	e21b      	b.n	800513a <keypad_sm+0x532>
			kpenum = V1;
 8004d02:	2301      	movs	r3, #1
	while(keypaditerator < 4){
 8004d04:	4d71      	ldr	r5, [pc, #452]	; (8004ecc <keypad_sm+0x2c4>)
			kpenum = V1;
 8004d06:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004d08:	f995 1000 	ldrsb.w	r1, [r5]
 8004d0c:	2903      	cmp	r1, #3
 8004d0e:	dca7      	bgt.n	8004c60 <keypad_sm+0x58>
 8004d10:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <keypad_sm+0x2c8>)
 8004d12:	4e70      	ldr	r6, [pc, #448]	; (8004ed4 <keypad_sm+0x2cc>)
			keypadarr[0] = num;
 8004d14:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004d18:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004d1c:	7837      	ldrb	r7, [r6, #0]
 8004d1e:	78dc      	ldrb	r4, [r3, #3]
 8004d20:	f893 e002 	ldrb.w	lr, [r3, #2]
 8004d24:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004d28:	7818      	ldrb	r0, [r3, #0]
 8004d2a:	b2c9      	uxtb	r1, r1
 8004d2c:	e003      	b.n	8004d36 <keypad_sm+0x12e>
	while(keypaditerator < 4){
 8004d2e:	4674      	mov	r4, lr
 8004d30:	46e6      	mov	lr, ip
 8004d32:	4684      	mov	ip, r0
			keypadarr[0] = num;
 8004d34:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004d36:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004d38:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004d3c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004d3e:	bf04      	itt	eq
 8004d40:	2700      	moveq	r7, #0
 8004d42:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004d44:	2904      	cmp	r1, #4
 8004d46:	46a0      	mov	r8, r4
 8004d48:	d1f1      	bne.n	8004d2e <keypad_sm+0x126>
 8004d4a:	7029      	strb	r1, [r5, #0]
 8004d4c:	711c      	strb	r4, [r3, #4]
 8004d4e:	f883 e003 	strb.w	lr, [r3, #3]
 8004d52:	f883 c002 	strb.w	ip, [r3, #2]
 8004d56:	7058      	strb	r0, [r3, #1]
 8004d58:	f883 9000 	strb.w	r9, [r3]
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	f43f af7f 	beq.w	8004c60 <keypad_sm+0x58>
 8004d62:	7037      	strb	r7, [r6, #0]
}
 8004d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004d68:	4f57      	ldr	r7, [pc, #348]	; (8004ec8 <keypad_sm+0x2c0>)
 8004d6a:	783a      	ldrb	r2, [r7, #0]
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	f040 8165 	bne.w	800503c <keypad_sm+0x434>
			if(num == 'A'){
 8004d72:	2841      	cmp	r0, #65	; 0x41
 8004d74:	f000 84a8 	beq.w	80056c8 <keypad_sm+0xac0>
			else if(num == 'B'){
 8004d78:	2842      	cmp	r0, #66	; 0x42
 8004d7a:	f000 8701 	beq.w	8005b80 <keypad_sm+0xf78>
			else if(num == 'C'){
 8004d7e:	2843      	cmp	r0, #67	; 0x43
 8004d80:	f000 87d7 	beq.w	8005d32 <keypad_sm+0x112a>
			else if(num == 'D'){
 8004d84:	2844      	cmp	r0, #68	; 0x44
 8004d86:	f001 81b5 	beq.w	80060f4 <keypad_sm+0x14ec>
			else if(num == '.'){
 8004d8a:	282e      	cmp	r0, #46	; 0x2e
 8004d8c:	f000 8553 	beq.w	8005836 <keypad_sm+0xc2e>
			else if(num >= '0' && num <= '9'){
 8004d90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	f240 854f 	bls.w	8005838 <keypad_sm+0xc30>
			else if(num == '#'){
 8004d9a:	2823      	cmp	r0, #35	; 0x23
 8004d9c:	f001 84ec 	beq.w	8006778 <keypad_sm+0x1b70>
			else if(num == '+'){
 8004da0:	282b      	cmp	r0, #43	; 0x2b
 8004da2:	f001 84ed 	beq.w	8006780 <keypad_sm+0x1b78>
			else if(num == '-'){
 8004da6:	282d      	cmp	r0, #45	; 0x2d
 8004da8:	f001 87d0 	beq.w	8006d4c <keypad_sm+0x2144>
			else if(num == 's'){
 8004dac:	2873      	cmp	r0, #115	; 0x73
 8004dae:	f002 8136 	beq.w	800701e <keypad_sm+0x2416>
			else if(num == '['){
 8004db2:	285b      	cmp	r0, #91	; 0x5b
 8004db4:	f43f af54 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == ']'){
 8004db8:	285d      	cmp	r0, #93	; 0x5d
 8004dba:	f43f af51 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == '*'){
 8004dbe:	282a      	cmp	r0, #42	; 0x2a
 8004dc0:	f002 8188 	beq.w	80070d4 <keypad_sm+0x24cc>
			else if(num == '/'){
 8004dc4:	282f      	cmp	r0, #47	; 0x2f
 8004dc6:	f47f af4b 	bne.w	8004c60 <keypad_sm+0x58>
				if(toggle_chstat_main_tim){
 8004dca:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <keypad_sm+0x2b4>)
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	f43f af46 	beq.w	8004c60 <keypad_sm+0x58>
					toggle_chstat_main_tim = 0;
 8004dd4:	2400      	movs	r4, #0
					toggle_chstat_main = 1;
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4a39      	ldr	r2, [pc, #228]	; (8004ec0 <keypad_sm+0x2b8>)
					toggle_chstat_main_tim = 0;
 8004dda:	701c      	strb	r4, [r3, #0]
					toggle_chstat_main = 1;
 8004ddc:	7011      	strb	r1, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim4);
 8004dde:	4839      	ldr	r0, [pc, #228]	; (8004ec4 <keypad_sm+0x2bc>)
}
 8004de0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					HAL_TIM_Base_Start_IT(&htim4);
 8004de4:	f005 bf28 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
			kpenum = V2;
 8004de8:	2303      	movs	r3, #3
	while(keypaditerator < 4){
 8004dea:	4d38      	ldr	r5, [pc, #224]	; (8004ecc <keypad_sm+0x2c4>)
			kpenum = V2;
 8004dec:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004dee:	f995 1000 	ldrsb.w	r1, [r5]
 8004df2:	4299      	cmp	r1, r3
 8004df4:	f73f af34 	bgt.w	8004c60 <keypad_sm+0x58>
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <keypad_sm+0x2c8>)
 8004dfa:	4e36      	ldr	r6, [pc, #216]	; (8004ed4 <keypad_sm+0x2cc>)
			keypadarr[0] = num;
 8004dfc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004e00:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004e04:	f896 e000 	ldrb.w	lr, [r6]
 8004e08:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004e0c:	789f      	ldrb	r7, [r3, #2]
 8004e0e:	785c      	ldrb	r4, [r3, #1]
 8004e10:	7818      	ldrb	r0, [r3, #0]
 8004e12:	b2c9      	uxtb	r1, r1
 8004e14:	e003      	b.n	8004e1e <keypad_sm+0x216>
	while(keypaditerator < 4){
 8004e16:	46bc      	mov	ip, r7
 8004e18:	4627      	mov	r7, r4
 8004e1a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004e1c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004e1e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004e20:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004e24:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004e26:	bf04      	itt	eq
 8004e28:	f04f 0e00 	moveq.w	lr, #0
 8004e2c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004e2e:	2904      	cmp	r1, #4
 8004e30:	46e0      	mov	r8, ip
 8004e32:	d1f0      	bne.n	8004e16 <keypad_sm+0x20e>
 8004e34:	7029      	strb	r1, [r5, #0]
 8004e36:	f883 c004 	strb.w	ip, [r3, #4]
 8004e3a:	70df      	strb	r7, [r3, #3]
 8004e3c:	709c      	strb	r4, [r3, #2]
 8004e3e:	7058      	strb	r0, [r3, #1]
 8004e40:	f883 9000 	strb.w	r9, [r3]
 8004e44:	2a00      	cmp	r2, #0
 8004e46:	f43f af0b 	beq.w	8004c60 <keypad_sm+0x58>
 8004e4a:	f886 e000 	strb.w	lr, [r6]
 8004e4e:	e707      	b.n	8004c60 <keypad_sm+0x58>
			kpenum = A1;
 8004e50:	2302      	movs	r3, #2
	while(keypaditerator < 4){
 8004e52:	4d1e      	ldr	r5, [pc, #120]	; (8004ecc <keypad_sm+0x2c4>)
			kpenum = A1;
 8004e54:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004e56:	f995 1000 	ldrsb.w	r1, [r5]
 8004e5a:	2903      	cmp	r1, #3
 8004e5c:	f73f af00 	bgt.w	8004c60 <keypad_sm+0x58>
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <keypad_sm+0x2c8>)
 8004e62:	4e1c      	ldr	r6, [pc, #112]	; (8004ed4 <keypad_sm+0x2cc>)
			keypadarr[0] = num;
 8004e64:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004e68:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004e6c:	f896 e000 	ldrb.w	lr, [r6]
 8004e70:	78df      	ldrb	r7, [r3, #3]
 8004e72:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004e76:	785c      	ldrb	r4, [r3, #1]
 8004e78:	7818      	ldrb	r0, [r3, #0]
 8004e7a:	b2c9      	uxtb	r1, r1
 8004e7c:	e003      	b.n	8004e86 <keypad_sm+0x27e>
	while(keypaditerator < 4){
 8004e7e:	4667      	mov	r7, ip
 8004e80:	46a4      	mov	ip, r4
 8004e82:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004e84:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004e86:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004e88:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004e8c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004e8e:	bf04      	itt	eq
 8004e90:	f04f 0e00 	moveq.w	lr, #0
 8004e94:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004e96:	2904      	cmp	r1, #4
 8004e98:	46b8      	mov	r8, r7
 8004e9a:	d1f0      	bne.n	8004e7e <keypad_sm+0x276>
 8004e9c:	7029      	strb	r1, [r5, #0]
 8004e9e:	711f      	strb	r7, [r3, #4]
 8004ea0:	f883 c003 	strb.w	ip, [r3, #3]
 8004ea4:	709c      	strb	r4, [r3, #2]
 8004ea6:	7058      	strb	r0, [r3, #1]
 8004ea8:	f883 9000 	strb.w	r9, [r3]
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	f43f aed7 	beq.w	8004c60 <keypad_sm+0x58>
 8004eb2:	f886 e000 	strb.w	lr, [r6]
 8004eb6:	e6d3      	b.n	8004c60 <keypad_sm+0x58>
 8004eb8:	20000759 	.word	0x20000759
 8004ebc:	2000001c 	.word	0x2000001c
 8004ec0:	200009b6 	.word	0x200009b6
 8004ec4:	20000694 	.word	0x20000694
 8004ec8:	20000400 	.word	0x20000400
 8004ecc:	20000015 	.word	0x20000015
 8004ed0:	20000010 	.word	0x20000010
 8004ed4:	20000758 	.word	0x20000758
		if(encmode){
 8004ed8:	4fb5      	ldr	r7, [pc, #724]	; (80051b0 <keypad_sm+0x5a8>)
 8004eda:	783a      	ldrb	r2, [r7, #0]
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d07c      	beq.n	8004fda <keypad_sm+0x3d2>
			if(num == 'A'){
 8004ee0:	2841      	cmp	r0, #65	; 0x41
 8004ee2:	f000 8173 	beq.w	80051cc <keypad_sm+0x5c4>
			else if(num == 'B'){
 8004ee6:	2842      	cmp	r0, #66	; 0x42
 8004ee8:	f000 8338 	beq.w	800555c <keypad_sm+0x954>
			else if(num == 'C'){
 8004eec:	2843      	cmp	r0, #67	; 0x43
 8004eee:	f000 852c 	beq.w	800594a <keypad_sm+0xd42>
			else if(num == 'D'){
 8004ef2:	2844      	cmp	r0, #68	; 0x44
 8004ef4:	f000 87fd 	beq.w	8005ef2 <keypad_sm+0x12ea>
			else if(num == '.'){
 8004ef8:	282e      	cmp	r0, #46	; 0x2e
 8004efa:	f001 80c2 	beq.w	8006082 <keypad_sm+0x147a>
			else if(num >= '0' && num <= '9'){
 8004efe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004f02:	2b09      	cmp	r3, #9
 8004f04:	f201 8173 	bhi.w	80061ee <keypad_sm+0x15e6>
	while(keypaditerator < 4){
 8004f08:	4daa      	ldr	r5, [pc, #680]	; (80051b4 <keypad_sm+0x5ac>)
 8004f0a:	f995 2000 	ldrsb.w	r2, [r5]
 8004f0e:	2a03      	cmp	r2, #3
 8004f10:	f300 8113 	bgt.w	800513a <keypad_sm+0x532>
 8004f14:	4ba8      	ldr	r3, [pc, #672]	; (80051b8 <keypad_sm+0x5b0>)
 8004f16:	4ea9      	ldr	r6, [pc, #676]	; (80051bc <keypad_sm+0x5b4>)
 8004f18:	3201      	adds	r2, #1
 8004f1a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004f1e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004f22:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004f26:	f896 e000 	ldrb.w	lr, [r6]
 8004f2a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004f2e:	789c      	ldrb	r4, [r3, #2]
 8004f30:	7858      	ldrb	r0, [r3, #1]
 8004f32:	7819      	ldrb	r1, [r3, #0]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	e003      	b.n	8004f40 <keypad_sm+0x338>
	while(keypaditerator < 4){
 8004f38:	46a4      	mov	ip, r4
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004f3e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004f40:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004f42:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004f46:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004f48:	bf04      	itt	eq
 8004f4a:	f04f 0801 	moveq.w	r8, #1
 8004f4e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004f52:	2a05      	cmp	r2, #5
 8004f54:	46e1      	mov	r9, ip
 8004f56:	d1ef      	bne.n	8004f38 <keypad_sm+0x330>
 8004f58:	f883 c004 	strb.w	ip, [r3, #4]
 8004f5c:	70dc      	strb	r4, [r3, #3]
 8004f5e:	7098      	strb	r0, [r3, #2]
 8004f60:	7059      	strb	r1, [r3, #1]
 8004f62:	f883 a000 	strb.w	sl, [r3]
 8004f66:	2304      	movs	r3, #4
 8004f68:	702b      	strb	r3, [r5, #0]
 8004f6a:	f1b8 0f00 	cmp.w	r8, #0
 8004f6e:	f000 80e4 	beq.w	800513a <keypad_sm+0x532>
 8004f72:	f886 e000 	strb.w	lr, [r6]
 8004f76:	e0e0      	b.n	800513a <keypad_sm+0x532>
			if(num == 'A'){
 8004f78:	2841      	cmp	r0, #65	; 0x41
 8004f7a:	f000 8265 	beq.w	8005448 <keypad_sm+0x840>
			else if(num == 'B'){
 8004f7e:	2842      	cmp	r0, #66	; 0x42
 8004f80:	f000 80e1 	beq.w	8005146 <keypad_sm+0x53e>
			else if(num == 'C'){
 8004f84:	2843      	cmp	r0, #67	; 0x43
 8004f86:	f000 836b 	beq.w	8005660 <keypad_sm+0xa58>
			else if(num == 'D'){
 8004f8a:	2844      	cmp	r0, #68	; 0x44
 8004f8c:	f000 85bd 	beq.w	8005b0a <keypad_sm+0xf02>
			else if(num == '.'){
 8004f90:	282e      	cmp	r0, #46	; 0x2e
 8004f92:	f001 814a 	beq.w	800622a <keypad_sm+0x1622>
			else if(num >= '0' && num <= '9'){
 8004f96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	f240 844c 	bls.w	8005838 <keypad_sm+0xc30>
			else if(num == '#'){
 8004fa0:	2823      	cmp	r0, #35	; 0x23
 8004fa2:	f001 82f8 	beq.w	8006596 <keypad_sm+0x198e>
			else if(num == '+'){
 8004fa6:	282b      	cmp	r0, #43	; 0x2b
 8004fa8:	f001 8156 	beq.w	8006258 <keypad_sm+0x1650>
			else if(num == '-'){
 8004fac:	282d      	cmp	r0, #45	; 0x2d
 8004fae:	f001 838d 	beq.w	80066cc <keypad_sm+0x1ac4>
			else if(num == 's'){
 8004fb2:	2873      	cmp	r0, #115	; 0x73
 8004fb4:	f001 855f 	beq.w	8006a76 <keypad_sm+0x1e6e>
			else if(num == '['){
 8004fb8:	285b      	cmp	r0, #91	; 0x5b
 8004fba:	f43f ae51 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == ']'){
 8004fbe:	285d      	cmp	r0, #93	; 0x5d
 8004fc0:	f43f ae4e 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == '*'){
 8004fc4:	282a      	cmp	r0, #42	; 0x2a
 8004fc6:	f47f aefd 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8004fca:	4b7d      	ldr	r3, [pc, #500]	; (80051c0 <keypad_sm+0x5b8>)
 8004fcc:	4a7d      	ldr	r2, [pc, #500]	; (80051c4 <keypad_sm+0x5bc>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	7013      	strb	r3, [r2, #0]
 8004fd8:	e642      	b.n	8004c60 <keypad_sm+0x58>
			if(num == 'A'){
 8004fda:	2841      	cmp	r0, #65	; 0x41
 8004fdc:	f000 812c 	beq.w	8005238 <keypad_sm+0x630>
			else if(num == 'B'){
 8004fe0:	2842      	cmp	r0, #66	; 0x42
 8004fe2:	f000 83df 	beq.w	80057a4 <keypad_sm+0xb9c>
			else if(num == 'C'){
 8004fe6:	2843      	cmp	r0, #67	; 0x43
 8004fe8:	f000 8559 	beq.w	8005a9e <keypad_sm+0xe96>
			else if(num == 'D'){
 8004fec:	2844      	cmp	r0, #68	; 0x44
 8004fee:	f000 866c 	beq.w	8005cca <keypad_sm+0x10c2>
			else if(num == '.'){
 8004ff2:	282e      	cmp	r0, #46	; 0x2e
 8004ff4:	f001 8267 	beq.w	80064c6 <keypad_sm+0x18be>
			else if(num >= '0' && num <= '9'){
 8004ff8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004ffc:	2b09      	cmp	r3, #9
 8004ffe:	f240 841b 	bls.w	8005838 <keypad_sm+0xc30>
			else if(num == '#'){
 8005002:	2823      	cmp	r0, #35	; 0x23
 8005004:	f001 8456 	beq.w	80068b4 <keypad_sm+0x1cac>
			else if(num == '+'){
 8005008:	282b      	cmp	r0, #43	; 0x2b
 800500a:	f001 8318 	beq.w	800663e <keypad_sm+0x1a36>
			else if(num == '-'){
 800500e:	282d      	cmp	r0, #45	; 0x2d
 8005010:	f001 8418 	beq.w	8006844 <keypad_sm+0x1c3c>
			else if(num == 's'){
 8005014:	2873      	cmp	r0, #115	; 0x73
 8005016:	f001 8772 	beq.w	8006efe <keypad_sm+0x22f6>
			else if(num == '['){
 800501a:	285b      	cmp	r0, #91	; 0x5b
 800501c:	f43f ae20 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == ']'){
 8005020:	285d      	cmp	r0, #93	; 0x5d
 8005022:	f43f ae1d 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == '*'){
 8005026:	282a      	cmp	r0, #42	; 0x2a
 8005028:	f47f aecc 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 800502c:	4b64      	ldr	r3, [pc, #400]	; (80051c0 <keypad_sm+0x5b8>)
 800502e:	4a65      	ldr	r2, [pc, #404]	; (80051c4 <keypad_sm+0x5bc>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	7013      	strb	r3, [r2, #0]
 800503a:	e611      	b.n	8004c60 <keypad_sm+0x58>
			if(num == 'A'){
 800503c:	2841      	cmp	r0, #65	; 0x41
 800503e:	f000 82d5 	beq.w	80055ec <keypad_sm+0x9e4>
			else if(num == 'B'){
 8005042:	2842      	cmp	r0, #66	; 0x42
 8005044:	f000 8448 	beq.w	80058d8 <keypad_sm+0xcd0>
			else if(num == 'C'){
 8005048:	2843      	cmp	r0, #67	; 0x43
 800504a:	f000 86bc 	beq.w	8005dc6 <keypad_sm+0x11be>
			else if(num == 'D'){
 800504e:	2844      	cmp	r0, #68	; 0x44
 8005050:	f001 8088 	beq.w	8006164 <keypad_sm+0x155c>
			else if(num == '.'){
 8005054:	282e      	cmp	r0, #46	; 0x2e
 8005056:	f001 81ff 	beq.w	8006458 <keypad_sm+0x1850>
			else if(num >= '0' && num <= '9'){
 800505a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800505e:	2b09      	cmp	r3, #9
 8005060:	f201 81dc 	bhi.w	800641c <keypad_sm+0x1814>
	while(keypaditerator < 4){
 8005064:	4d53      	ldr	r5, [pc, #332]	; (80051b4 <keypad_sm+0x5ac>)
 8005066:	f995 2000 	ldrsb.w	r2, [r5]
 800506a:	2a03      	cmp	r2, #3
 800506c:	dc65      	bgt.n	800513a <keypad_sm+0x532>
 800506e:	4b52      	ldr	r3, [pc, #328]	; (80051b8 <keypad_sm+0x5b0>)
 8005070:	4e52      	ldr	r6, [pc, #328]	; (80051bc <keypad_sm+0x5b4>)
 8005072:	3201      	adds	r2, #1
 8005074:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005078:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800507c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005080:	f896 e000 	ldrb.w	lr, [r6]
 8005084:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005088:	789c      	ldrb	r4, [r3, #2]
 800508a:	7858      	ldrb	r0, [r3, #1]
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	e003      	b.n	800509a <keypad_sm+0x492>
	while(keypaditerator < 4){
 8005092:	46a4      	mov	ip, r4
 8005094:	4604      	mov	r4, r0
 8005096:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005098:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800509a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800509c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80050a0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80050a2:	bf04      	itt	eq
 80050a4:	f04f 0801 	moveq.w	r8, #1
 80050a8:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80050ac:	2a05      	cmp	r2, #5
 80050ae:	46e1      	mov	r9, ip
 80050b0:	d1ef      	bne.n	8005092 <keypad_sm+0x48a>
 80050b2:	f883 c004 	strb.w	ip, [r3, #4]
 80050b6:	70dc      	strb	r4, [r3, #3]
 80050b8:	7098      	strb	r0, [r3, #2]
 80050ba:	7059      	strb	r1, [r3, #1]
 80050bc:	f883 a000 	strb.w	sl, [r3]
 80050c0:	2304      	movs	r3, #4
 80050c2:	702b      	strb	r3, [r5, #0]
 80050c4:	f1b8 0f00 	cmp.w	r8, #0
 80050c8:	d037      	beq.n	800513a <keypad_sm+0x532>
 80050ca:	f886 e000 	strb.w	lr, [r6]
 80050ce:	e034      	b.n	800513a <keypad_sm+0x532>
				kpenum = WAIT;
 80050d0:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80050d4:	4d37      	ldr	r5, [pc, #220]	; (80051b4 <keypad_sm+0x5ac>)
				kpenum = WAIT;
 80050d6:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80050da:	f995 2000 	ldrsb.w	r2, [r5]
 80050de:	2a03      	cmp	r2, #3
 80050e0:	dc2b      	bgt.n	800513a <keypad_sm+0x532>
 80050e2:	4b35      	ldr	r3, [pc, #212]	; (80051b8 <keypad_sm+0x5b0>)
 80050e4:	4e35      	ldr	r6, [pc, #212]	; (80051bc <keypad_sm+0x5b4>)
			keypadarr[0] = num;
 80050e6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80050ea:	f893 9004 	ldrb.w	r9, [r3, #4]
 80050ee:	f896 8000 	ldrb.w	r8, [r6]
 80050f2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80050f6:	789c      	ldrb	r4, [r3, #2]
 80050f8:	7858      	ldrb	r0, [r3, #1]
 80050fa:	7819      	ldrb	r1, [r3, #0]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	e003      	b.n	8005108 <keypad_sm+0x500>
	while(keypaditerator < 4){
 8005100:	46a4      	mov	ip, r4
 8005102:	4604      	mov	r4, r0
 8005104:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005106:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005108:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800510a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800510e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005110:	bf04      	itt	eq
 8005112:	f04f 0e01 	moveq.w	lr, #1
 8005116:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800511a:	2a04      	cmp	r2, #4
 800511c:	46e1      	mov	r9, ip
 800511e:	d1ef      	bne.n	8005100 <keypad_sm+0x4f8>
 8005120:	702a      	strb	r2, [r5, #0]
 8005122:	f883 c004 	strb.w	ip, [r3, #4]
 8005126:	70dc      	strb	r4, [r3, #3]
 8005128:	7098      	strb	r0, [r3, #2]
 800512a:	7059      	strb	r1, [r3, #1]
 800512c:	f883 a000 	strb.w	sl, [r3]
 8005130:	f1be 0f00 	cmp.w	lr, #0
 8005134:	d001      	beq.n	800513a <keypad_sm+0x532>
 8005136:	f886 8000 	strb.w	r8, [r6]
				encmode = 0;
 800513a:	2300      	movs	r3, #0
				encpos = 0;
 800513c:	4a22      	ldr	r2, [pc, #136]	; (80051c8 <keypad_sm+0x5c0>)
				encmode = 0;
 800513e:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 8005140:	7013      	strb	r3, [r2, #0]
}
 8005142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while(keypaditerator < 4){
 8005146:	4d1b      	ldr	r5, [pc, #108]	; (80051b4 <keypad_sm+0x5ac>)
				kpenum = WAIT;
 8005148:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800514a:	f995 1000 	ldrsb.w	r1, [r5]
 800514e:	2903      	cmp	r1, #3
 8005150:	f73f ad86 	bgt.w	8004c60 <keypad_sm+0x58>
 8005154:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <keypad_sm+0x5b0>)
 8005156:	4e19      	ldr	r6, [pc, #100]	; (80051bc <keypad_sm+0x5b4>)
 8005158:	3101      	adds	r1, #1
			keypadarr[0] = num;
 800515a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800515e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005162:	f896 e000 	ldrb.w	lr, [r6]
 8005166:	f893 c003 	ldrb.w	ip, [r3, #3]
 800516a:	789f      	ldrb	r7, [r3, #2]
 800516c:	785c      	ldrb	r4, [r3, #1]
 800516e:	7818      	ldrb	r0, [r3, #0]
 8005170:	b2c9      	uxtb	r1, r1
 8005172:	e003      	b.n	800517c <keypad_sm+0x574>
	while(keypaditerator < 4){
 8005174:	46bc      	mov	ip, r7
 8005176:	4627      	mov	r7, r4
 8005178:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800517a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800517c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800517e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005182:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005184:	bf04      	itt	eq
 8005186:	f04f 0e00 	moveq.w	lr, #0
 800518a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800518c:	2905      	cmp	r1, #5
 800518e:	46e0      	mov	r8, ip
 8005190:	d1f0      	bne.n	8005174 <keypad_sm+0x56c>
 8005192:	f883 c004 	strb.w	ip, [r3, #4]
 8005196:	70df      	strb	r7, [r3, #3]
 8005198:	709c      	strb	r4, [r3, #2]
 800519a:	7058      	strb	r0, [r3, #1]
 800519c:	f883 9000 	strb.w	r9, [r3]
 80051a0:	2304      	movs	r3, #4
 80051a2:	702b      	strb	r3, [r5, #0]
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	f43f ad5b 	beq.w	8004c60 <keypad_sm+0x58>
 80051aa:	f886 e000 	strb.w	lr, [r6]
 80051ae:	e557      	b.n	8004c60 <keypad_sm+0x58>
 80051b0:	20000400 	.word	0x20000400
 80051b4:	20000015 	.word	0x20000015
 80051b8:	20000010 	.word	0x20000010
 80051bc:	20000758 	.word	0x20000758
 80051c0:	200003f4 	.word	0x200003f4
 80051c4:	200003f5 	.word	0x200003f5
 80051c8:	20000401 	.word	0x20000401
				kpenum = WAIT;
 80051cc:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80051d0:	4db1      	ldr	r5, [pc, #708]	; (8005498 <keypad_sm+0x890>)
				kpenum = WAIT;
 80051d2:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80051d6:	f995 2000 	ldrsb.w	r2, [r5]
 80051da:	2a03      	cmp	r2, #3
 80051dc:	dcad      	bgt.n	800513a <keypad_sm+0x532>
 80051de:	4baf      	ldr	r3, [pc, #700]	; (800549c <keypad_sm+0x894>)
 80051e0:	4eaf      	ldr	r6, [pc, #700]	; (80054a0 <keypad_sm+0x898>)
			keypadarr[0] = num;
 80051e2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80051e6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80051ea:	f896 8000 	ldrb.w	r8, [r6]
 80051ee:	f893 c003 	ldrb.w	ip, [r3, #3]
 80051f2:	789c      	ldrb	r4, [r3, #2]
 80051f4:	7858      	ldrb	r0, [r3, #1]
 80051f6:	7819      	ldrb	r1, [r3, #0]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	e003      	b.n	8005204 <keypad_sm+0x5fc>
	while(keypaditerator < 4){
 80051fc:	46a4      	mov	ip, r4
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005202:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005204:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005206:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800520a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800520c:	bf04      	itt	eq
 800520e:	f04f 0e01 	moveq.w	lr, #1
 8005212:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005216:	2a04      	cmp	r2, #4
 8005218:	46e1      	mov	r9, ip
 800521a:	d1ef      	bne.n	80051fc <keypad_sm+0x5f4>
 800521c:	702a      	strb	r2, [r5, #0]
 800521e:	f883 c004 	strb.w	ip, [r3, #4]
 8005222:	70dc      	strb	r4, [r3, #3]
 8005224:	7098      	strb	r0, [r3, #2]
 8005226:	7059      	strb	r1, [r3, #1]
 8005228:	f883 a000 	strb.w	sl, [r3]
 800522c:	f1be 0f00 	cmp.w	lr, #0
 8005230:	d083      	beq.n	800513a <keypad_sm+0x532>
 8005232:	f886 8000 	strb.w	r8, [r6]
 8005236:	e780      	b.n	800513a <keypad_sm+0x532>
 8005238:	4d97      	ldr	r5, [pc, #604]	; (8005498 <keypad_sm+0x890>)
				kpenum = WAIT;
 800523a:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800523c:	f995 1000 	ldrsb.w	r1, [r5]
 8005240:	2903      	cmp	r1, #3
 8005242:	f73f ad0d 	bgt.w	8004c60 <keypad_sm+0x58>
 8005246:	4b95      	ldr	r3, [pc, #596]	; (800549c <keypad_sm+0x894>)
 8005248:	4e95      	ldr	r6, [pc, #596]	; (80054a0 <keypad_sm+0x898>)
			keypadarr[0] = num;
 800524a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800524e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005252:	f896 e000 	ldrb.w	lr, [r6]
 8005256:	f893 c003 	ldrb.w	ip, [r3, #3]
 800525a:	789f      	ldrb	r7, [r3, #2]
 800525c:	785c      	ldrb	r4, [r3, #1]
 800525e:	7818      	ldrb	r0, [r3, #0]
 8005260:	b2c9      	uxtb	r1, r1
 8005262:	e003      	b.n	800526c <keypad_sm+0x664>
	while(keypaditerator < 4){
 8005264:	46bc      	mov	ip, r7
 8005266:	4627      	mov	r7, r4
 8005268:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800526a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800526c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800526e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005272:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005274:	bf04      	itt	eq
 8005276:	f04f 0e00 	moveq.w	lr, #0
 800527a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800527c:	2904      	cmp	r1, #4
 800527e:	46e0      	mov	r8, ip
 8005280:	d1f0      	bne.n	8005264 <keypad_sm+0x65c>
 8005282:	7029      	strb	r1, [r5, #0]
 8005284:	f883 c004 	strb.w	ip, [r3, #4]
 8005288:	70df      	strb	r7, [r3, #3]
 800528a:	709c      	strb	r4, [r3, #2]
 800528c:	7058      	strb	r0, [r3, #1]
 800528e:	f883 9000 	strb.w	r9, [r3]
 8005292:	2a00      	cmp	r2, #0
 8005294:	f43f ace4 	beq.w	8004c60 <keypad_sm+0x58>
 8005298:	f886 e000 	strb.w	lr, [r6]
 800529c:	e4e0      	b.n	8004c60 <keypad_sm+0x58>
			kpenum = A2;
 800529e:	2304      	movs	r3, #4
	while(keypaditerator < 4){
 80052a0:	4d7d      	ldr	r5, [pc, #500]	; (8005498 <keypad_sm+0x890>)
			kpenum = A2;
 80052a2:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 80052a4:	f995 1000 	ldrsb.w	r1, [r5]
 80052a8:	2903      	cmp	r1, #3
 80052aa:	f73f acd9 	bgt.w	8004c60 <keypad_sm+0x58>
 80052ae:	4b7b      	ldr	r3, [pc, #492]	; (800549c <keypad_sm+0x894>)
 80052b0:	4e7b      	ldr	r6, [pc, #492]	; (80054a0 <keypad_sm+0x898>)
			keypadarr[0] = num;
 80052b2:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80052b6:	f893 8004 	ldrb.w	r8, [r3, #4]
 80052ba:	f896 e000 	ldrb.w	lr, [r6]
 80052be:	f893 c003 	ldrb.w	ip, [r3, #3]
 80052c2:	789f      	ldrb	r7, [r3, #2]
 80052c4:	785c      	ldrb	r4, [r3, #1]
 80052c6:	7818      	ldrb	r0, [r3, #0]
 80052c8:	b2c9      	uxtb	r1, r1
 80052ca:	e003      	b.n	80052d4 <keypad_sm+0x6cc>
	while(keypaditerator < 4){
 80052cc:	46bc      	mov	ip, r7
 80052ce:	4627      	mov	r7, r4
 80052d0:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80052d2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80052d4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80052d6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80052da:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80052dc:	bf04      	itt	eq
 80052de:	f04f 0e00 	moveq.w	lr, #0
 80052e2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80052e4:	2904      	cmp	r1, #4
 80052e6:	46e0      	mov	r8, ip
 80052e8:	d1f0      	bne.n	80052cc <keypad_sm+0x6c4>
 80052ea:	7029      	strb	r1, [r5, #0]
 80052ec:	f883 c004 	strb.w	ip, [r3, #4]
 80052f0:	70df      	strb	r7, [r3, #3]
 80052f2:	709c      	strb	r4, [r3, #2]
 80052f4:	7058      	strb	r0, [r3, #1]
 80052f6:	f883 9000 	strb.w	r9, [r3]
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	f43f acb0 	beq.w	8004c60 <keypad_sm+0x58>
 8005300:	f886 e000 	strb.w	lr, [r6]
 8005304:	e4ac      	b.n	8004c60 <keypad_sm+0x58>
		if(encmode){
 8005306:	4f67      	ldr	r7, [pc, #412]	; (80054a4 <keypad_sm+0x89c>)
 8005308:	783a      	ldrb	r2, [r7, #0]
 800530a:	2a00      	cmp	r2, #0
 800530c:	f000 80f4 	beq.w	80054f8 <keypad_sm+0x8f0>
			if(num == 'A'){
 8005310:	2841      	cmp	r0, #65	; 0x41
 8005312:	f000 82a7 	beq.w	8005864 <keypad_sm+0xc5c>
			else if(num == 'B'){
 8005316:	2842      	cmp	r0, #66	; 0x42
 8005318:	f000 85b0 	beq.w	8005e7c <keypad_sm+0x1274>
			else if(num == 'C'){
 800531c:	2843      	cmp	r0, #67	; 0x43
 800531e:	f000 8677 	beq.w	8006010 <keypad_sm+0x1408>
			else if(num == 'D'){
 8005322:	2844      	cmp	r0, #68	; 0x44
 8005324:	f000 87dd 	beq.w	80062e2 <keypad_sm+0x16da>
			else if(num == '.'){
 8005328:	282e      	cmp	r0, #46	; 0x2e
 800532a:	f001 80fb 	beq.w	8006524 <keypad_sm+0x191c>
			else if(num >= '0' && num <= '9'){
 800532e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005332:	2b09      	cmp	r3, #9
 8005334:	f201 8202 	bhi.w	800673c <keypad_sm+0x1b34>
	while(keypaditerator < 4){
 8005338:	4d57      	ldr	r5, [pc, #348]	; (8005498 <keypad_sm+0x890>)
 800533a:	f995 2000 	ldrsb.w	r2, [r5]
 800533e:	2a03      	cmp	r2, #3
 8005340:	f73f aefb 	bgt.w	800513a <keypad_sm+0x532>
 8005344:	4b55      	ldr	r3, [pc, #340]	; (800549c <keypad_sm+0x894>)
 8005346:	4e56      	ldr	r6, [pc, #344]	; (80054a0 <keypad_sm+0x898>)
 8005348:	3201      	adds	r2, #1
 800534a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800534e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005352:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005356:	f896 e000 	ldrb.w	lr, [r6]
 800535a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800535e:	789c      	ldrb	r4, [r3, #2]
 8005360:	7858      	ldrb	r0, [r3, #1]
 8005362:	7819      	ldrb	r1, [r3, #0]
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	e003      	b.n	8005370 <keypad_sm+0x768>
	while(keypaditerator < 4){
 8005368:	46a4      	mov	ip, r4
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800536e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005370:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005372:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005376:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005378:	bf04      	itt	eq
 800537a:	f04f 0801 	moveq.w	r8, #1
 800537e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005382:	2a05      	cmp	r2, #5
 8005384:	46e1      	mov	r9, ip
 8005386:	d1ef      	bne.n	8005368 <keypad_sm+0x760>
 8005388:	f883 c004 	strb.w	ip, [r3, #4]
 800538c:	70dc      	strb	r4, [r3, #3]
 800538e:	7098      	strb	r0, [r3, #2]
 8005390:	7059      	strb	r1, [r3, #1]
 8005392:	f883 a000 	strb.w	sl, [r3]
 8005396:	2304      	movs	r3, #4
 8005398:	702b      	strb	r3, [r5, #0]
 800539a:	f1b8 0f00 	cmp.w	r8, #0
 800539e:	f43f aecc 	beq.w	800513a <keypad_sm+0x532>
 80053a2:	f886 e000 	strb.w	lr, [r6]
 80053a6:	e6c8      	b.n	800513a <keypad_sm+0x532>
			chstat_aux_tx = !chstat_aux_rx;
 80053a8:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <keypad_sm+0x8a0>)
 80053aa:	4a40      	ldr	r2, [pc, #256]	; (80054ac <keypad_sm+0x8a4>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	7013      	strb	r3, [r2, #0]
 80053b6:	e453      	b.n	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 80053b8:	f7fe ff60 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80053bc:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80053be:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80053c0:	f7fb feaa 	bl	8001118 <__aeabi_fcmpge>
 80053c4:	b130      	cbz	r0, 80053d4 <keypad_sm+0x7cc>
 80053c6:	4628      	mov	r0, r5
 80053c8:	4939      	ldr	r1, [pc, #228]	; (80054b0 <keypad_sm+0x8a8>)
 80053ca:	f7fb fe9b 	bl	8001104 <__aeabi_fcmple>
 80053ce:	b108      	cbz	r0, 80053d4 <keypad_sm+0x7cc>
					volt_set_aux = translate_keypad();
 80053d0:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <keypad_sm+0x8ac>)
 80053d2:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80053d4:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80053d8:	4d2f      	ldr	r5, [pc, #188]	; (8005498 <keypad_sm+0x890>)
				kpenum = WAIT;
 80053da:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80053de:	f995 2000 	ldrsb.w	r2, [r5]
 80053e2:	2a03      	cmp	r2, #3
 80053e4:	f73f aea9 	bgt.w	800513a <keypad_sm+0x532>
 80053e8:	4b2c      	ldr	r3, [pc, #176]	; (800549c <keypad_sm+0x894>)
 80053ea:	4e2d      	ldr	r6, [pc, #180]	; (80054a0 <keypad_sm+0x898>)
 80053ec:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80053ee:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80053f2:	f893 9004 	ldrb.w	r9, [r3, #4]
 80053f6:	f896 8000 	ldrb.w	r8, [r6]
 80053fa:	f893 c003 	ldrb.w	ip, [r3, #3]
 80053fe:	789c      	ldrb	r4, [r3, #2]
 8005400:	7858      	ldrb	r0, [r3, #1]
 8005402:	7819      	ldrb	r1, [r3, #0]
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	e003      	b.n	8005410 <keypad_sm+0x808>
	while(keypaditerator < 4){
 8005408:	46a4      	mov	ip, r4
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800540e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005410:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005412:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005416:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005418:	bf04      	itt	eq
 800541a:	f04f 0e01 	moveq.w	lr, #1
 800541e:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005422:	2a05      	cmp	r2, #5
 8005424:	46e1      	mov	r9, ip
 8005426:	d1ef      	bne.n	8005408 <keypad_sm+0x800>
 8005428:	f883 c004 	strb.w	ip, [r3, #4]
 800542c:	70dc      	strb	r4, [r3, #3]
 800542e:	7098      	strb	r0, [r3, #2]
 8005430:	7059      	strb	r1, [r3, #1]
 8005432:	f883 a000 	strb.w	sl, [r3]
 8005436:	2304      	movs	r3, #4
 8005438:	702b      	strb	r3, [r5, #0]
 800543a:	f1be 0f00 	cmp.w	lr, #0
 800543e:	f43f ae7c 	beq.w	800513a <keypad_sm+0x532>
 8005442:	f886 8000 	strb.w	r8, [r6]
 8005446:	e678      	b.n	800513a <keypad_sm+0x532>
	float temp = translate_keypad();
 8005448:	f7fe ff18 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800544c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800544e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005450:	f7fb fe62 	bl	8001118 <__aeabi_fcmpge>
 8005454:	b130      	cbz	r0, 8005464 <keypad_sm+0x85c>
 8005456:	4628      	mov	r0, r5
 8005458:	4915      	ldr	r1, [pc, #84]	; (80054b0 <keypad_sm+0x8a8>)
 800545a:	f7fb fe53 	bl	8001104 <__aeabi_fcmple>
 800545e:	b108      	cbz	r0, 8005464 <keypad_sm+0x85c>
					volt_set_aux = translate_keypad();
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <keypad_sm+0x8ac>)
 8005462:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005464:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005468:	4d0b      	ldr	r5, [pc, #44]	; (8005498 <keypad_sm+0x890>)
				kpenum = WAIT;
 800546a:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 800546e:	f995 2000 	ldrsb.w	r2, [r5]
 8005472:	2a03      	cmp	r2, #3
 8005474:	f73f abf4 	bgt.w	8004c60 <keypad_sm+0x58>
 8005478:	4b08      	ldr	r3, [pc, #32]	; (800549c <keypad_sm+0x894>)
 800547a:	4e09      	ldr	r6, [pc, #36]	; (80054a0 <keypad_sm+0x898>)
 800547c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800547e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005482:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005486:	f896 e000 	ldrb.w	lr, [r6]
 800548a:	78df      	ldrb	r7, [r3, #3]
 800548c:	789c      	ldrb	r4, [r3, #2]
 800548e:	7858      	ldrb	r0, [r3, #1]
 8005490:	7819      	ldrb	r1, [r3, #0]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	e014      	b.n	80054c0 <keypad_sm+0x8b8>
 8005496:	bf00      	nop
 8005498:	20000015 	.word	0x20000015
 800549c:	20000010 	.word	0x20000010
 80054a0:	20000758 	.word	0x20000758
 80054a4:	20000400 	.word	0x20000400
 80054a8:	200003f4 	.word	0x200003f4
 80054ac:	200003f5 	.word	0x200003f5
 80054b0:	41400000 	.word	0x41400000
 80054b4:	20000a7c 	.word	0x20000a7c
	while(keypaditerator < 4){
 80054b8:	4627      	mov	r7, r4
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80054be:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80054c0:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80054c2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80054c6:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80054c8:	bf04      	itt	eq
 80054ca:	f04f 0e00 	moveq.w	lr, #0
 80054ce:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 80054d2:	2a05      	cmp	r2, #5
 80054d4:	46b8      	mov	r8, r7
 80054d6:	d1ef      	bne.n	80054b8 <keypad_sm+0x8b0>
 80054d8:	711f      	strb	r7, [r3, #4]
 80054da:	70dc      	strb	r4, [r3, #3]
 80054dc:	7098      	strb	r0, [r3, #2]
 80054de:	7059      	strb	r1, [r3, #1]
 80054e0:	f883 9000 	strb.w	r9, [r3]
 80054e4:	2304      	movs	r3, #4
 80054e6:	702b      	strb	r3, [r5, #0]
 80054e8:	f1bc 0f00 	cmp.w	ip, #0
 80054ec:	f43f abb8 	beq.w	8004c60 <keypad_sm+0x58>
 80054f0:	f886 e000 	strb.w	lr, [r6]
 80054f4:	f7ff bbb4 	b.w	8004c60 <keypad_sm+0x58>
			if(num == 'A'){
 80054f8:	2841      	cmp	r0, #65	; 0x41
 80054fa:	f000 8261 	beq.w	80059c0 <keypad_sm+0xdb8>
			else if(num == 'B'){
 80054fe:	2842      	cmp	r0, #66	; 0x42
 8005500:	f000 8374 	beq.w	8005bec <keypad_sm+0xfe4>
			else if(num == 'C'){
 8005504:	2843      	cmp	r0, #67	; 0x43
 8005506:	f000 854b 	beq.w	8005fa0 <keypad_sm+0x1398>
			else if(num == 'D'){
 800550a:	2844      	cmp	r0, #68	; 0x44
 800550c:	f000 8737 	beq.w	800637e <keypad_sm+0x1776>
			else if(num == '.'){
 8005510:	282e      	cmp	r0, #46	; 0x2e
 8005512:	f000 8190 	beq.w	8005836 <keypad_sm+0xc2e>
			else if(num >= '0' && num <= '9'){
 8005516:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800551a:	2b09      	cmp	r3, #9
 800551c:	f240 818c 	bls.w	8005838 <keypad_sm+0xc30>
			else if(num == '#'){
 8005520:	2823      	cmp	r0, #35	; 0x23
 8005522:	f001 8129 	beq.w	8006778 <keypad_sm+0x1b70>
			else if(num == '+'){
 8005526:	282b      	cmp	r0, #43	; 0x2b
 8005528:	f001 8302 	beq.w	8006b30 <keypad_sm+0x1f28>
			else if(num == '-'){
 800552c:	282d      	cmp	r0, #45	; 0x2d
 800552e:	f001 84f2 	beq.w	8006f16 <keypad_sm+0x230e>
			else if(num == 's'){
 8005532:	2873      	cmp	r0, #115	; 0x73
 8005534:	f001 857f 	beq.w	8007036 <keypad_sm+0x242e>
			else if(num == '['){
 8005538:	285b      	cmp	r0, #91	; 0x5b
 800553a:	f43f ab91 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == ']'){
 800553e:	285d      	cmp	r0, #93	; 0x5d
 8005540:	f43f ab8e 	beq.w	8004c60 <keypad_sm+0x58>
			else if(num == '*'){
 8005544:	282a      	cmp	r0, #42	; 0x2a
 8005546:	f47f ac3d 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 800554a:	4bbf      	ldr	r3, [pc, #764]	; (8005848 <keypad_sm+0xc40>)
 800554c:	4abf      	ldr	r2, [pc, #764]	; (800584c <keypad_sm+0xc44>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	7013      	strb	r3, [r2, #0]
 8005558:	f7ff bb82 	b.w	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 800555c:	f7fe fe8e 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005560:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005562:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005564:	f7fb fdd8 	bl	8001118 <__aeabi_fcmpge>
 8005568:	b130      	cbz	r0, 8005578 <keypad_sm+0x970>
 800556a:	4628      	mov	r0, r5
 800556c:	49b8      	ldr	r1, [pc, #736]	; (8005850 <keypad_sm+0xc48>)
 800556e:	f7fb fdc9 	bl	8001104 <__aeabi_fcmple>
 8005572:	b108      	cbz	r0, 8005578 <keypad_sm+0x970>
					amp_set_aux = translate_keypad();
 8005574:	4bb7      	ldr	r3, [pc, #732]	; (8005854 <keypad_sm+0xc4c>)
 8005576:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005578:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800557c:	4db6      	ldr	r5, [pc, #728]	; (8005858 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800557e:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005582:	f995 2000 	ldrsb.w	r2, [r5]
 8005586:	2a03      	cmp	r2, #3
 8005588:	f73f add7 	bgt.w	800513a <keypad_sm+0x532>
 800558c:	4bb3      	ldr	r3, [pc, #716]	; (800585c <keypad_sm+0xc54>)
 800558e:	4eb4      	ldr	r6, [pc, #720]	; (8005860 <keypad_sm+0xc58>)
 8005590:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005592:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005596:	f893 8004 	ldrb.w	r8, [r3, #4]
 800559a:	f896 9000 	ldrb.w	r9, [r6]
 800559e:	f893 c003 	ldrb.w	ip, [r3, #3]
 80055a2:	789c      	ldrb	r4, [r3, #2]
 80055a4:	7858      	ldrb	r0, [r3, #1]
 80055a6:	7819      	ldrb	r1, [r3, #0]
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	e003      	b.n	80055b4 <keypad_sm+0x9ac>
	while(keypaditerator < 4){
 80055ac:	46a4      	mov	ip, r4
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80055b2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80055b4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80055b6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80055ba:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80055bc:	bf04      	itt	eq
 80055be:	f04f 0e01 	moveq.w	lr, #1
 80055c2:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80055c6:	2a05      	cmp	r2, #5
 80055c8:	46e0      	mov	r8, ip
 80055ca:	d1ef      	bne.n	80055ac <keypad_sm+0x9a4>
 80055cc:	f883 c004 	strb.w	ip, [r3, #4]
 80055d0:	70dc      	strb	r4, [r3, #3]
 80055d2:	7098      	strb	r0, [r3, #2]
 80055d4:	7059      	strb	r1, [r3, #1]
 80055d6:	f883 a000 	strb.w	sl, [r3]
 80055da:	2304      	movs	r3, #4
 80055dc:	702b      	strb	r3, [r5, #0]
 80055de:	f1be 0f00 	cmp.w	lr, #0
 80055e2:	f43f adaa 	beq.w	800513a <keypad_sm+0x532>
 80055e6:	f886 9000 	strb.w	r9, [r6]
 80055ea:	e5a6      	b.n	800513a <keypad_sm+0x532>
				kpenum = WAIT;
 80055ec:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80055f0:	4d99      	ldr	r5, [pc, #612]	; (8005858 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80055f2:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80055f6:	f995 2000 	ldrsb.w	r2, [r5]
 80055fa:	2a03      	cmp	r2, #3
 80055fc:	f73f ad9d 	bgt.w	800513a <keypad_sm+0x532>
 8005600:	4b96      	ldr	r3, [pc, #600]	; (800585c <keypad_sm+0xc54>)
 8005602:	4e97      	ldr	r6, [pc, #604]	; (8005860 <keypad_sm+0xc58>)
 8005604:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005606:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800560a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800560e:	f896 9000 	ldrb.w	r9, [r6]
 8005612:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005616:	789c      	ldrb	r4, [r3, #2]
 8005618:	7858      	ldrb	r0, [r3, #1]
 800561a:	7819      	ldrb	r1, [r3, #0]
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	e003      	b.n	8005628 <keypad_sm+0xa20>
	while(keypaditerator < 4){
 8005620:	46a4      	mov	ip, r4
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005626:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005628:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800562a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800562e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005630:	bf04      	itt	eq
 8005632:	f04f 0e01 	moveq.w	lr, #1
 8005636:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 800563a:	2a05      	cmp	r2, #5
 800563c:	46e0      	mov	r8, ip
 800563e:	d1ef      	bne.n	8005620 <keypad_sm+0xa18>
 8005640:	f883 c004 	strb.w	ip, [r3, #4]
 8005644:	70dc      	strb	r4, [r3, #3]
 8005646:	7098      	strb	r0, [r3, #2]
 8005648:	7059      	strb	r1, [r3, #1]
 800564a:	f883 a000 	strb.w	sl, [r3]
 800564e:	2304      	movs	r3, #4
 8005650:	702b      	strb	r3, [r5, #0]
 8005652:	f1be 0f00 	cmp.w	lr, #0
 8005656:	f43f ad70 	beq.w	800513a <keypad_sm+0x532>
 800565a:	f886 9000 	strb.w	r9, [r6]
 800565e:	e56c      	b.n	800513a <keypad_sm+0x532>
 8005660:	4d7d      	ldr	r5, [pc, #500]	; (8005858 <keypad_sm+0xc50>)
				kpenum = WAIT;
 8005662:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005664:	f995 1000 	ldrsb.w	r1, [r5]
 8005668:	2903      	cmp	r1, #3
 800566a:	f73f aaf9 	bgt.w	8004c60 <keypad_sm+0x58>
 800566e:	4b7b      	ldr	r3, [pc, #492]	; (800585c <keypad_sm+0xc54>)
 8005670:	4e7b      	ldr	r6, [pc, #492]	; (8005860 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 8005672:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005676:	f893 8004 	ldrb.w	r8, [r3, #4]
 800567a:	f896 e000 	ldrb.w	lr, [r6]
 800567e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005682:	789f      	ldrb	r7, [r3, #2]
 8005684:	785c      	ldrb	r4, [r3, #1]
 8005686:	7818      	ldrb	r0, [r3, #0]
 8005688:	b2c9      	uxtb	r1, r1
 800568a:	e003      	b.n	8005694 <keypad_sm+0xa8c>
	while(keypaditerator < 4){
 800568c:	46bc      	mov	ip, r7
 800568e:	4627      	mov	r7, r4
 8005690:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005692:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005694:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005696:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800569a:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800569c:	bf04      	itt	eq
 800569e:	f04f 0e00 	moveq.w	lr, #0
 80056a2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80056a4:	2904      	cmp	r1, #4
 80056a6:	46e0      	mov	r8, ip
 80056a8:	d1f0      	bne.n	800568c <keypad_sm+0xa84>
 80056aa:	7029      	strb	r1, [r5, #0]
 80056ac:	f883 c004 	strb.w	ip, [r3, #4]
 80056b0:	70df      	strb	r7, [r3, #3]
 80056b2:	709c      	strb	r4, [r3, #2]
 80056b4:	7058      	strb	r0, [r3, #1]
 80056b6:	f883 9000 	strb.w	r9, [r3]
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	f43f aad0 	beq.w	8004c60 <keypad_sm+0x58>
 80056c0:	f886 e000 	strb.w	lr, [r6]
 80056c4:	f7ff bacc 	b.w	8004c60 <keypad_sm+0x58>
 80056c8:	4d63      	ldr	r5, [pc, #396]	; (8005858 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80056ca:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80056cc:	f995 1000 	ldrsb.w	r1, [r5]
 80056d0:	2903      	cmp	r1, #3
 80056d2:	f73f aac5 	bgt.w	8004c60 <keypad_sm+0x58>
 80056d6:	4b61      	ldr	r3, [pc, #388]	; (800585c <keypad_sm+0xc54>)
 80056d8:	4e61      	ldr	r6, [pc, #388]	; (8005860 <keypad_sm+0xc58>)
 80056da:	3101      	adds	r1, #1
			keypadarr[0] = num;
 80056dc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80056e0:	f893 8004 	ldrb.w	r8, [r3, #4]
 80056e4:	f896 e000 	ldrb.w	lr, [r6]
 80056e8:	f893 c003 	ldrb.w	ip, [r3, #3]
 80056ec:	789f      	ldrb	r7, [r3, #2]
 80056ee:	785c      	ldrb	r4, [r3, #1]
 80056f0:	7818      	ldrb	r0, [r3, #0]
 80056f2:	b2c9      	uxtb	r1, r1
 80056f4:	e003      	b.n	80056fe <keypad_sm+0xaf6>
	while(keypaditerator < 4){
 80056f6:	46bc      	mov	ip, r7
 80056f8:	4627      	mov	r7, r4
 80056fa:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80056fc:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80056fe:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005700:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005704:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005706:	bf04      	itt	eq
 8005708:	f04f 0e00 	moveq.w	lr, #0
 800570c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800570e:	2905      	cmp	r1, #5
 8005710:	46e0      	mov	r8, ip
 8005712:	d1f0      	bne.n	80056f6 <keypad_sm+0xaee>
 8005714:	f883 c004 	strb.w	ip, [r3, #4]
 8005718:	70df      	strb	r7, [r3, #3]
 800571a:	709c      	strb	r4, [r3, #2]
 800571c:	7058      	strb	r0, [r3, #1]
 800571e:	f883 9000 	strb.w	r9, [r3]
 8005722:	2304      	movs	r3, #4
 8005724:	702b      	strb	r3, [r5, #0]
 8005726:	2a00      	cmp	r2, #0
 8005728:	f43f aa9a 	beq.w	8004c60 <keypad_sm+0x58>
 800572c:	f886 e000 	strb.w	lr, [r6]
 8005730:	f7ff ba96 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8005734:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005738:	4d47      	ldr	r5, [pc, #284]	; (8005858 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800573a:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800573e:	f995 2000 	ldrsb.w	r2, [r5]
 8005742:	2a03      	cmp	r2, #3
 8005744:	f73f acf9 	bgt.w	800513a <keypad_sm+0x532>
 8005748:	4b44      	ldr	r3, [pc, #272]	; (800585c <keypad_sm+0xc54>)
 800574a:	4e45      	ldr	r6, [pc, #276]	; (8005860 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 800574c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005750:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005754:	f896 8000 	ldrb.w	r8, [r6]
 8005758:	f893 c003 	ldrb.w	ip, [r3, #3]
 800575c:	789c      	ldrb	r4, [r3, #2]
 800575e:	7858      	ldrb	r0, [r3, #1]
 8005760:	7819      	ldrb	r1, [r3, #0]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	e003      	b.n	800576e <keypad_sm+0xb66>
	while(keypaditerator < 4){
 8005766:	46a4      	mov	ip, r4
 8005768:	4604      	mov	r4, r0
 800576a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800576c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800576e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005770:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005774:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005776:	bf04      	itt	eq
 8005778:	f04f 0e01 	moveq.w	lr, #1
 800577c:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005780:	2a04      	cmp	r2, #4
 8005782:	46e1      	mov	r9, ip
 8005784:	d1ef      	bne.n	8005766 <keypad_sm+0xb5e>
 8005786:	702a      	strb	r2, [r5, #0]
 8005788:	f883 c004 	strb.w	ip, [r3, #4]
 800578c:	70dc      	strb	r4, [r3, #3]
 800578e:	7098      	strb	r0, [r3, #2]
 8005790:	7059      	strb	r1, [r3, #1]
 8005792:	f883 a000 	strb.w	sl, [r3]
 8005796:	f1be 0f00 	cmp.w	lr, #0
 800579a:	f43f acce 	beq.w	800513a <keypad_sm+0x532>
 800579e:	f886 8000 	strb.w	r8, [r6]
 80057a2:	e4ca      	b.n	800513a <keypad_sm+0x532>
	float temp = translate_keypad();
 80057a4:	f7fe fd6a 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80057a8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80057aa:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80057ac:	f7fb fcb4 	bl	8001118 <__aeabi_fcmpge>
 80057b0:	b150      	cbz	r0, 80057c8 <keypad_sm+0xbc0>
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7fa fe50 	bl	8000458 <__aeabi_f2d>
 80057b8:	a321      	add	r3, pc, #132	; (adr r3, 8005840 <keypad_sm+0xc38>)
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fb f91f 	bl	8000a00 <__aeabi_dcmple>
 80057c2:	b108      	cbz	r0, 80057c8 <keypad_sm+0xbc0>
					amp_set_aux = translate_keypad();
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <keypad_sm+0xc4c>)
 80057c6:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80057c8:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 80057cc:	4d22      	ldr	r5, [pc, #136]	; (8005858 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80057ce:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 80057d2:	f995 2000 	ldrsb.w	r2, [r5]
 80057d6:	2a03      	cmp	r2, #3
 80057d8:	f73f aa42 	bgt.w	8004c60 <keypad_sm+0x58>
 80057dc:	4b1f      	ldr	r3, [pc, #124]	; (800585c <keypad_sm+0xc54>)
 80057de:	4e20      	ldr	r6, [pc, #128]	; (8005860 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 80057e0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80057e4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80057e8:	f896 e000 	ldrb.w	lr, [r6]
 80057ec:	78df      	ldrb	r7, [r3, #3]
 80057ee:	789c      	ldrb	r4, [r3, #2]
 80057f0:	7858      	ldrb	r0, [r3, #1]
 80057f2:	7819      	ldrb	r1, [r3, #0]
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	e003      	b.n	8005800 <keypad_sm+0xbf8>
	while(keypaditerator < 4){
 80057f8:	4627      	mov	r7, r4
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80057fe:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005800:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005802:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005806:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005808:	bf04      	itt	eq
 800580a:	f04f 0e00 	moveq.w	lr, #0
 800580e:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005812:	2a04      	cmp	r2, #4
 8005814:	46b8      	mov	r8, r7
 8005816:	d1ef      	bne.n	80057f8 <keypad_sm+0xbf0>
 8005818:	702a      	strb	r2, [r5, #0]
 800581a:	711f      	strb	r7, [r3, #4]
 800581c:	70dc      	strb	r4, [r3, #3]
 800581e:	7098      	strb	r0, [r3, #2]
 8005820:	7059      	strb	r1, [r3, #1]
 8005822:	f883 9000 	strb.w	r9, [r3]
 8005826:	f1bc 0f00 	cmp.w	ip, #0
 800582a:	f43f aa19 	beq.w	8004c60 <keypad_sm+0x58>
 800582e:	f886 e000 	strb.w	lr, [r6]
 8005832:	f7ff ba15 	b.w	8004c60 <keypad_sm+0x58>
	if(num == 'z'){
 8005836:	202e      	movs	r0, #46	; 0x2e
}
 8005838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	f7fb bf0c 	b.w	8001658 <update_keypad.part.0>
 8005840:	50b0f27c 	.word	0x50b0f27c
 8005844:	3fe99a6b 	.word	0x3fe99a6b
 8005848:	200003f4 	.word	0x200003f4
 800584c:	200003f5 	.word	0x200003f5
 8005850:	41400000 	.word	0x41400000
 8005854:	200003e8 	.word	0x200003e8
 8005858:	20000015 	.word	0x20000015
 800585c:	20000010 	.word	0x20000010
 8005860:	20000758 	.word	0x20000758
				kpenum = WAIT;
 8005864:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005868:	4dc2      	ldr	r5, [pc, #776]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 800586a:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800586e:	f995 2000 	ldrsb.w	r2, [r5]
 8005872:	2a03      	cmp	r2, #3
 8005874:	f73f ac61 	bgt.w	800513a <keypad_sm+0x532>
 8005878:	4bbf      	ldr	r3, [pc, #764]	; (8005b78 <keypad_sm+0xf70>)
 800587a:	4ec0      	ldr	r6, [pc, #768]	; (8005b7c <keypad_sm+0xf74>)
 800587c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800587e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005882:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005886:	f896 9000 	ldrb.w	r9, [r6]
 800588a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800588e:	789c      	ldrb	r4, [r3, #2]
 8005890:	7858      	ldrb	r0, [r3, #1]
 8005892:	7819      	ldrb	r1, [r3, #0]
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	e003      	b.n	80058a0 <keypad_sm+0xc98>
	while(keypaditerator < 4){
 8005898:	46a4      	mov	ip, r4
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800589e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80058a0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80058a2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80058a6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80058a8:	bf04      	itt	eq
 80058aa:	f04f 0e01 	moveq.w	lr, #1
 80058ae:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80058b2:	2a05      	cmp	r2, #5
 80058b4:	46e0      	mov	r8, ip
 80058b6:	d1ef      	bne.n	8005898 <keypad_sm+0xc90>
 80058b8:	f883 c004 	strb.w	ip, [r3, #4]
 80058bc:	70dc      	strb	r4, [r3, #3]
 80058be:	7098      	strb	r0, [r3, #2]
 80058c0:	7059      	strb	r1, [r3, #1]
 80058c2:	f883 a000 	strb.w	sl, [r3]
 80058c6:	2304      	movs	r3, #4
 80058c8:	702b      	strb	r3, [r5, #0]
 80058ca:	f1be 0f00 	cmp.w	lr, #0
 80058ce:	f43f ac34 	beq.w	800513a <keypad_sm+0x532>
 80058d2:	f886 9000 	strb.w	r9, [r6]
 80058d6:	e430      	b.n	800513a <keypad_sm+0x532>
				kpenum = WAIT;
 80058d8:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80058dc:	4da5      	ldr	r5, [pc, #660]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 80058de:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80058e2:	f995 2000 	ldrsb.w	r2, [r5]
 80058e6:	2a03      	cmp	r2, #3
 80058e8:	f73f ac27 	bgt.w	800513a <keypad_sm+0x532>
 80058ec:	4ba2      	ldr	r3, [pc, #648]	; (8005b78 <keypad_sm+0xf70>)
 80058ee:	4ea3      	ldr	r6, [pc, #652]	; (8005b7c <keypad_sm+0xf74>)
			keypadarr[0] = num;
 80058f0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80058f4:	f893 9004 	ldrb.w	r9, [r3, #4]
 80058f8:	f896 8000 	ldrb.w	r8, [r6]
 80058fc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005900:	789c      	ldrb	r4, [r3, #2]
 8005902:	7858      	ldrb	r0, [r3, #1]
 8005904:	7819      	ldrb	r1, [r3, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	e003      	b.n	8005912 <keypad_sm+0xd0a>
	while(keypaditerator < 4){
 800590a:	46a4      	mov	ip, r4
 800590c:	4604      	mov	r4, r0
 800590e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005910:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005912:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005914:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005918:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800591a:	bf04      	itt	eq
 800591c:	f04f 0e01 	moveq.w	lr, #1
 8005920:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005924:	2a04      	cmp	r2, #4
 8005926:	46e1      	mov	r9, ip
 8005928:	d1ef      	bne.n	800590a <keypad_sm+0xd02>
 800592a:	702a      	strb	r2, [r5, #0]
 800592c:	f883 c004 	strb.w	ip, [r3, #4]
 8005930:	70dc      	strb	r4, [r3, #3]
 8005932:	7098      	strb	r0, [r3, #2]
 8005934:	7059      	strb	r1, [r3, #1]
 8005936:	f883 a000 	strb.w	sl, [r3]
 800593a:	f1be 0f00 	cmp.w	lr, #0
 800593e:	f43f abfc 	beq.w	800513a <keypad_sm+0x532>
 8005942:	f886 8000 	strb.w	r8, [r6]
 8005946:	f7ff bbf8 	b.w	800513a <keypad_sm+0x532>
				kpenum = WAIT;
 800594a:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800594e:	4d89      	ldr	r5, [pc, #548]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005950:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005954:	f995 2000 	ldrsb.w	r2, [r5]
 8005958:	2a03      	cmp	r2, #3
 800595a:	f73f abee 	bgt.w	800513a <keypad_sm+0x532>
 800595e:	4b86      	ldr	r3, [pc, #536]	; (8005b78 <keypad_sm+0xf70>)
 8005960:	4e86      	ldr	r6, [pc, #536]	; (8005b7c <keypad_sm+0xf74>)
 8005962:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005964:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005968:	f893 8004 	ldrb.w	r8, [r3, #4]
 800596c:	f896 9000 	ldrb.w	r9, [r6]
 8005970:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005974:	789c      	ldrb	r4, [r3, #2]
 8005976:	7858      	ldrb	r0, [r3, #1]
 8005978:	7819      	ldrb	r1, [r3, #0]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	e003      	b.n	8005986 <keypad_sm+0xd7e>
	while(keypaditerator < 4){
 800597e:	46a4      	mov	ip, r4
 8005980:	4604      	mov	r4, r0
 8005982:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005984:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005986:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005988:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800598c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800598e:	bf04      	itt	eq
 8005990:	f04f 0e01 	moveq.w	lr, #1
 8005994:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005998:	2a05      	cmp	r2, #5
 800599a:	46e0      	mov	r8, ip
 800599c:	d1ef      	bne.n	800597e <keypad_sm+0xd76>
 800599e:	f883 c004 	strb.w	ip, [r3, #4]
 80059a2:	70dc      	strb	r4, [r3, #3]
 80059a4:	7098      	strb	r0, [r3, #2]
 80059a6:	7059      	strb	r1, [r3, #1]
 80059a8:	f883 a000 	strb.w	sl, [r3]
 80059ac:	2304      	movs	r3, #4
 80059ae:	702b      	strb	r3, [r5, #0]
 80059b0:	f1be 0f00 	cmp.w	lr, #0
 80059b4:	f43f abc1 	beq.w	800513a <keypad_sm+0x532>
 80059b8:	f886 9000 	strb.w	r9, [r6]
 80059bc:	f7ff bbbd 	b.w	800513a <keypad_sm+0x532>
 80059c0:	4d6c      	ldr	r5, [pc, #432]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 80059c2:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80059c4:	f995 1000 	ldrsb.w	r1, [r5]
 80059c8:	2903      	cmp	r1, #3
 80059ca:	f73f a949 	bgt.w	8004c60 <keypad_sm+0x58>
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <keypad_sm+0xf70>)
 80059d0:	4e6a      	ldr	r6, [pc, #424]	; (8005b7c <keypad_sm+0xf74>)
			keypadarr[0] = num;
 80059d2:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80059d6:	f893 8004 	ldrb.w	r8, [r3, #4]
 80059da:	f896 e000 	ldrb.w	lr, [r6]
 80059de:	f893 c003 	ldrb.w	ip, [r3, #3]
 80059e2:	789f      	ldrb	r7, [r3, #2]
 80059e4:	785c      	ldrb	r4, [r3, #1]
 80059e6:	7818      	ldrb	r0, [r3, #0]
 80059e8:	b2c9      	uxtb	r1, r1
 80059ea:	e003      	b.n	80059f4 <keypad_sm+0xdec>
	while(keypaditerator < 4){
 80059ec:	46bc      	mov	ip, r7
 80059ee:	4627      	mov	r7, r4
 80059f0:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80059f2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80059f4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80059f6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80059fa:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80059fc:	bf04      	itt	eq
 80059fe:	f04f 0e00 	moveq.w	lr, #0
 8005a02:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005a04:	2904      	cmp	r1, #4
 8005a06:	46e0      	mov	r8, ip
 8005a08:	d1f0      	bne.n	80059ec <keypad_sm+0xde4>
 8005a0a:	7029      	strb	r1, [r5, #0]
 8005a0c:	f883 c004 	strb.w	ip, [r3, #4]
 8005a10:	70df      	strb	r7, [r3, #3]
 8005a12:	709c      	strb	r4, [r3, #2]
 8005a14:	7058      	strb	r0, [r3, #1]
 8005a16:	f883 9000 	strb.w	r9, [r3]
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	f43f a920 	beq.w	8004c60 <keypad_sm+0x58>
 8005a20:	f886 e000 	strb.w	lr, [r6]
 8005a24:	f7ff b91c 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8005a28:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005a2c:	4d51      	ldr	r5, [pc, #324]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005a2e:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005a32:	f995 2000 	ldrsb.w	r2, [r5]
 8005a36:	2a03      	cmp	r2, #3
 8005a38:	f73f ab7f 	bgt.w	800513a <keypad_sm+0x532>
 8005a3c:	4b4e      	ldr	r3, [pc, #312]	; (8005b78 <keypad_sm+0xf70>)
 8005a3e:	4e4f      	ldr	r6, [pc, #316]	; (8005b7c <keypad_sm+0xf74>)
 8005a40:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005a42:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005a46:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005a4a:	f896 8000 	ldrb.w	r8, [r6]
 8005a4e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005a52:	789c      	ldrb	r4, [r3, #2]
 8005a54:	7858      	ldrb	r0, [r3, #1]
 8005a56:	7819      	ldrb	r1, [r3, #0]
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	e003      	b.n	8005a64 <keypad_sm+0xe5c>
	while(keypaditerator < 4){
 8005a5c:	46a4      	mov	ip, r4
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005a62:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005a64:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005a66:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005a6a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005a6c:	bf04      	itt	eq
 8005a6e:	f04f 0e01 	moveq.w	lr, #1
 8005a72:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005a76:	2a05      	cmp	r2, #5
 8005a78:	46e1      	mov	r9, ip
 8005a7a:	d1ef      	bne.n	8005a5c <keypad_sm+0xe54>
 8005a7c:	f883 c004 	strb.w	ip, [r3, #4]
 8005a80:	70dc      	strb	r4, [r3, #3]
 8005a82:	7098      	strb	r0, [r3, #2]
 8005a84:	7059      	strb	r1, [r3, #1]
 8005a86:	f883 a000 	strb.w	sl, [r3]
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	702b      	strb	r3, [r5, #0]
 8005a8e:	f1be 0f00 	cmp.w	lr, #0
 8005a92:	f43f ab52 	beq.w	800513a <keypad_sm+0x532>
 8005a96:	f886 8000 	strb.w	r8, [r6]
 8005a9a:	f7ff bb4e 	b.w	800513a <keypad_sm+0x532>
 8005a9e:	4d35      	ldr	r5, [pc, #212]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005aa0:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005aa2:	f995 1000 	ldrsb.w	r1, [r5]
 8005aa6:	2903      	cmp	r1, #3
 8005aa8:	f73f a8da 	bgt.w	8004c60 <keypad_sm+0x58>
 8005aac:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <keypad_sm+0xf70>)
 8005aae:	4e33      	ldr	r6, [pc, #204]	; (8005b7c <keypad_sm+0xf74>)
 8005ab0:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005ab2:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005ab6:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005aba:	f896 e000 	ldrb.w	lr, [r6]
 8005abe:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005ac2:	789f      	ldrb	r7, [r3, #2]
 8005ac4:	785c      	ldrb	r4, [r3, #1]
 8005ac6:	7818      	ldrb	r0, [r3, #0]
 8005ac8:	b2c9      	uxtb	r1, r1
 8005aca:	e003      	b.n	8005ad4 <keypad_sm+0xecc>
	while(keypaditerator < 4){
 8005acc:	46bc      	mov	ip, r7
 8005ace:	4627      	mov	r7, r4
 8005ad0:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005ad2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005ad4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005ad6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005ada:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005adc:	bf04      	itt	eq
 8005ade:	f04f 0e00 	moveq.w	lr, #0
 8005ae2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005ae4:	2905      	cmp	r1, #5
 8005ae6:	46e0      	mov	r8, ip
 8005ae8:	d1f0      	bne.n	8005acc <keypad_sm+0xec4>
 8005aea:	f883 c004 	strb.w	ip, [r3, #4]
 8005aee:	70df      	strb	r7, [r3, #3]
 8005af0:	709c      	strb	r4, [r3, #2]
 8005af2:	7058      	strb	r0, [r3, #1]
 8005af4:	f883 9000 	strb.w	r9, [r3]
 8005af8:	2304      	movs	r3, #4
 8005afa:	702b      	strb	r3, [r5, #0]
 8005afc:	2a00      	cmp	r2, #0
 8005afe:	f43f a8af 	beq.w	8004c60 <keypad_sm+0x58>
 8005b02:	f886 e000 	strb.w	lr, [r6]
 8005b06:	f7ff b8ab 	b.w	8004c60 <keypad_sm+0x58>
 8005b0a:	4d1a      	ldr	r5, [pc, #104]	; (8005b74 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005b0c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005b0e:	f995 1000 	ldrsb.w	r1, [r5]
 8005b12:	2903      	cmp	r1, #3
 8005b14:	f73f a8a4 	bgt.w	8004c60 <keypad_sm+0x58>
 8005b18:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <keypad_sm+0xf70>)
 8005b1a:	4e18      	ldr	r6, [pc, #96]	; (8005b7c <keypad_sm+0xf74>)
			keypadarr[0] = num;
 8005b1c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005b20:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005b24:	f896 e000 	ldrb.w	lr, [r6]
 8005b28:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b2c:	789f      	ldrb	r7, [r3, #2]
 8005b2e:	785c      	ldrb	r4, [r3, #1]
 8005b30:	7818      	ldrb	r0, [r3, #0]
 8005b32:	b2c9      	uxtb	r1, r1
 8005b34:	e003      	b.n	8005b3e <keypad_sm+0xf36>
	while(keypaditerator < 4){
 8005b36:	46bc      	mov	ip, r7
 8005b38:	4627      	mov	r7, r4
 8005b3a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005b3c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005b3e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005b40:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005b44:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005b46:	bf04      	itt	eq
 8005b48:	f04f 0e00 	moveq.w	lr, #0
 8005b4c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005b4e:	2904      	cmp	r1, #4
 8005b50:	46e0      	mov	r8, ip
 8005b52:	d1f0      	bne.n	8005b36 <keypad_sm+0xf2e>
 8005b54:	7029      	strb	r1, [r5, #0]
 8005b56:	f883 c004 	strb.w	ip, [r3, #4]
 8005b5a:	70df      	strb	r7, [r3, #3]
 8005b5c:	709c      	strb	r4, [r3, #2]
 8005b5e:	7058      	strb	r0, [r3, #1]
 8005b60:	f883 9000 	strb.w	r9, [r3]
 8005b64:	2a00      	cmp	r2, #0
 8005b66:	f43f a87b 	beq.w	8004c60 <keypad_sm+0x58>
 8005b6a:	f886 e000 	strb.w	lr, [r6]
 8005b6e:	f7ff b877 	b.w	8004c60 <keypad_sm+0x58>
 8005b72:	bf00      	nop
 8005b74:	20000015 	.word	0x20000015
 8005b78:	20000010 	.word	0x20000010
 8005b7c:	20000758 	.word	0x20000758
 8005b80:	4db8      	ldr	r5, [pc, #736]	; (8005e64 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005b82:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005b84:	f995 1000 	ldrsb.w	r1, [r5]
 8005b88:	2903      	cmp	r1, #3
 8005b8a:	f73f a869 	bgt.w	8004c60 <keypad_sm+0x58>
 8005b8e:	4bb6      	ldr	r3, [pc, #728]	; (8005e68 <keypad_sm+0x1260>)
 8005b90:	4eb6      	ldr	r6, [pc, #728]	; (8005e6c <keypad_sm+0x1264>)
 8005b92:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005b94:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005b98:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005b9c:	f896 e000 	ldrb.w	lr, [r6]
 8005ba0:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005ba4:	789f      	ldrb	r7, [r3, #2]
 8005ba6:	785c      	ldrb	r4, [r3, #1]
 8005ba8:	7818      	ldrb	r0, [r3, #0]
 8005baa:	b2c9      	uxtb	r1, r1
 8005bac:	e003      	b.n	8005bb6 <keypad_sm+0xfae>
	while(keypaditerator < 4){
 8005bae:	46bc      	mov	ip, r7
 8005bb0:	4627      	mov	r7, r4
 8005bb2:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005bb4:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005bb6:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005bb8:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005bbc:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005bbe:	bf04      	itt	eq
 8005bc0:	f04f 0e00 	moveq.w	lr, #0
 8005bc4:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005bc6:	2905      	cmp	r1, #5
 8005bc8:	46e0      	mov	r8, ip
 8005bca:	d1f0      	bne.n	8005bae <keypad_sm+0xfa6>
 8005bcc:	f883 c004 	strb.w	ip, [r3, #4]
 8005bd0:	70df      	strb	r7, [r3, #3]
 8005bd2:	709c      	strb	r4, [r3, #2]
 8005bd4:	7058      	strb	r0, [r3, #1]
 8005bd6:	f883 9000 	strb.w	r9, [r3]
 8005bda:	2304      	movs	r3, #4
 8005bdc:	702b      	strb	r3, [r5, #0]
 8005bde:	2a00      	cmp	r2, #0
 8005be0:	f43f a83e 	beq.w	8004c60 <keypad_sm+0x58>
 8005be4:	f886 e000 	strb.w	lr, [r6]
 8005be8:	f7ff b83a 	b.w	8004c60 <keypad_sm+0x58>
 8005bec:	4d9d      	ldr	r5, [pc, #628]	; (8005e64 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005bee:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005bf0:	f995 1000 	ldrsb.w	r1, [r5]
 8005bf4:	2903      	cmp	r1, #3
 8005bf6:	f73f a833 	bgt.w	8004c60 <keypad_sm+0x58>
 8005bfa:	4b9b      	ldr	r3, [pc, #620]	; (8005e68 <keypad_sm+0x1260>)
 8005bfc:	4e9b      	ldr	r6, [pc, #620]	; (8005e6c <keypad_sm+0x1264>)
 8005bfe:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005c00:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005c04:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005c08:	f896 e000 	ldrb.w	lr, [r6]
 8005c0c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005c10:	789f      	ldrb	r7, [r3, #2]
 8005c12:	785c      	ldrb	r4, [r3, #1]
 8005c14:	7818      	ldrb	r0, [r3, #0]
 8005c16:	b2c9      	uxtb	r1, r1
 8005c18:	e003      	b.n	8005c22 <keypad_sm+0x101a>
	while(keypaditerator < 4){
 8005c1a:	46bc      	mov	ip, r7
 8005c1c:	4627      	mov	r7, r4
 8005c1e:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005c20:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005c22:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005c24:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005c28:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005c2a:	bf04      	itt	eq
 8005c2c:	f04f 0e00 	moveq.w	lr, #0
 8005c30:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005c32:	2905      	cmp	r1, #5
 8005c34:	46e0      	mov	r8, ip
 8005c36:	d1f0      	bne.n	8005c1a <keypad_sm+0x1012>
 8005c38:	f883 c004 	strb.w	ip, [r3, #4]
 8005c3c:	70df      	strb	r7, [r3, #3]
 8005c3e:	709c      	strb	r4, [r3, #2]
 8005c40:	7058      	strb	r0, [r3, #1]
 8005c42:	f883 9000 	strb.w	r9, [r3]
 8005c46:	2304      	movs	r3, #4
 8005c48:	702b      	strb	r3, [r5, #0]
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	f43f a808 	beq.w	8004c60 <keypad_sm+0x58>
 8005c50:	f886 e000 	strb.w	lr, [r6]
 8005c54:	f7ff b804 	b.w	8004c60 <keypad_sm+0x58>
 8005c58:	4d82      	ldr	r5, [pc, #520]	; (8005e64 <keypad_sm+0x125c>)
 8005c5a:	f995 2000 	ldrsb.w	r2, [r5]
 8005c5e:	2a03      	cmp	r2, #3
 8005c60:	f73f aa6b 	bgt.w	800513a <keypad_sm+0x532>
 8005c64:	4b80      	ldr	r3, [pc, #512]	; (8005e68 <keypad_sm+0x1260>)
 8005c66:	4e81      	ldr	r6, [pc, #516]	; (8005e6c <keypad_sm+0x1264>)
 8005c68:	3201      	adds	r2, #1
 8005c6a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005c6e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005c72:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005c76:	f896 e000 	ldrb.w	lr, [r6]
 8005c7a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005c7e:	789c      	ldrb	r4, [r3, #2]
 8005c80:	7858      	ldrb	r0, [r3, #1]
 8005c82:	7819      	ldrb	r1, [r3, #0]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	e003      	b.n	8005c90 <keypad_sm+0x1088>
	while(keypaditerator < 4){
 8005c88:	46a4      	mov	ip, r4
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005c8e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005c90:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005c92:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005c96:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005c98:	bf04      	itt	eq
 8005c9a:	f04f 0801 	moveq.w	r8, #1
 8005c9e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005ca2:	2a05      	cmp	r2, #5
 8005ca4:	46e1      	mov	r9, ip
 8005ca6:	d1ef      	bne.n	8005c88 <keypad_sm+0x1080>
 8005ca8:	f883 c004 	strb.w	ip, [r3, #4]
 8005cac:	70dc      	strb	r4, [r3, #3]
 8005cae:	7098      	strb	r0, [r3, #2]
 8005cb0:	7059      	strb	r1, [r3, #1]
 8005cb2:	f883 a000 	strb.w	sl, [r3]
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	702b      	strb	r3, [r5, #0]
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	f43f aa3c 	beq.w	800513a <keypad_sm+0x532>
 8005cc2:	f886 e000 	strb.w	lr, [r6]
 8005cc6:	f7ff ba38 	b.w	800513a <keypad_sm+0x532>
 8005cca:	4d66      	ldr	r5, [pc, #408]	; (8005e64 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005ccc:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005cce:	f995 1000 	ldrsb.w	r1, [r5]
 8005cd2:	2903      	cmp	r1, #3
 8005cd4:	f73e afc4 	bgt.w	8004c60 <keypad_sm+0x58>
 8005cd8:	4b63      	ldr	r3, [pc, #396]	; (8005e68 <keypad_sm+0x1260>)
 8005cda:	4e64      	ldr	r6, [pc, #400]	; (8005e6c <keypad_sm+0x1264>)
			keypadarr[0] = num;
 8005cdc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005ce0:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005ce4:	f896 e000 	ldrb.w	lr, [r6]
 8005ce8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005cec:	789f      	ldrb	r7, [r3, #2]
 8005cee:	785c      	ldrb	r4, [r3, #1]
 8005cf0:	7818      	ldrb	r0, [r3, #0]
 8005cf2:	b2c9      	uxtb	r1, r1
 8005cf4:	e003      	b.n	8005cfe <keypad_sm+0x10f6>
	while(keypaditerator < 4){
 8005cf6:	46bc      	mov	ip, r7
 8005cf8:	4627      	mov	r7, r4
 8005cfa:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005cfc:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005cfe:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005d00:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005d04:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005d06:	bf04      	itt	eq
 8005d08:	f04f 0e00 	moveq.w	lr, #0
 8005d0c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005d0e:	2904      	cmp	r1, #4
 8005d10:	46e0      	mov	r8, ip
 8005d12:	d1f0      	bne.n	8005cf6 <keypad_sm+0x10ee>
 8005d14:	7029      	strb	r1, [r5, #0]
 8005d16:	f883 c004 	strb.w	ip, [r3, #4]
 8005d1a:	70df      	strb	r7, [r3, #3]
 8005d1c:	709c      	strb	r4, [r3, #2]
 8005d1e:	7058      	strb	r0, [r3, #1]
 8005d20:	f883 9000 	strb.w	r9, [r3]
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f43e af9b 	beq.w	8004c60 <keypad_sm+0x58>
 8005d2a:	f886 e000 	strb.w	lr, [r6]
 8005d2e:	f7fe bf97 	b.w	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 8005d32:	f7fe faa3 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d36:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d38:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d3a:	f7fb f9ed 	bl	8001118 <__aeabi_fcmpge>
 8005d3e:	b158      	cbz	r0, 8005d58 <keypad_sm+0x1150>
 8005d40:	4628      	mov	r0, r5
 8005d42:	494b      	ldr	r1, [pc, #300]	; (8005e70 <keypad_sm+0x1268>)
 8005d44:	f7fb f9de 	bl	8001104 <__aeabi_fcmple>
 8005d48:	b130      	cbz	r0, 8005d58 <keypad_sm+0x1150>
					volt_set_main_old = volt_set_main;
 8005d4a:	4d4a      	ldr	r5, [pc, #296]	; (8005e74 <keypad_sm+0x126c>)
 8005d4c:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <keypad_sm+0x1270>)
 8005d4e:	682a      	ldr	r2, [r5, #0]
 8005d50:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005d52:	f7fe fa93 	bl	800427c <translate_keypad>
 8005d56:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005d58:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005d5c:	4d41      	ldr	r5, [pc, #260]	; (8005e64 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005d5e:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 8005d62:	f995 2000 	ldrsb.w	r2, [r5]
 8005d66:	2a03      	cmp	r2, #3
 8005d68:	f73e af7a 	bgt.w	8004c60 <keypad_sm+0x58>
 8005d6c:	4b3e      	ldr	r3, [pc, #248]	; (8005e68 <keypad_sm+0x1260>)
 8005d6e:	4e3f      	ldr	r6, [pc, #252]	; (8005e6c <keypad_sm+0x1264>)
			keypadarr[0] = num;
 8005d70:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005d74:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005d78:	f896 e000 	ldrb.w	lr, [r6]
 8005d7c:	78df      	ldrb	r7, [r3, #3]
 8005d7e:	789c      	ldrb	r4, [r3, #2]
 8005d80:	7858      	ldrb	r0, [r3, #1]
 8005d82:	7819      	ldrb	r1, [r3, #0]
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	e003      	b.n	8005d90 <keypad_sm+0x1188>
	while(keypaditerator < 4){
 8005d88:	4627      	mov	r7, r4
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005d8e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005d90:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005d92:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005d96:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005d98:	bf04      	itt	eq
 8005d9a:	f04f 0e00 	moveq.w	lr, #0
 8005d9e:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005da2:	2a04      	cmp	r2, #4
 8005da4:	46b8      	mov	r8, r7
 8005da6:	d1ef      	bne.n	8005d88 <keypad_sm+0x1180>
 8005da8:	702a      	strb	r2, [r5, #0]
 8005daa:	711f      	strb	r7, [r3, #4]
 8005dac:	70dc      	strb	r4, [r3, #3]
 8005dae:	7098      	strb	r0, [r3, #2]
 8005db0:	7059      	strb	r1, [r3, #1]
 8005db2:	f883 9000 	strb.w	r9, [r3]
 8005db6:	f1bc 0f00 	cmp.w	ip, #0
 8005dba:	f43e af51 	beq.w	8004c60 <keypad_sm+0x58>
 8005dbe:	f886 e000 	strb.w	lr, [r6]
 8005dc2:	f7fe bf4d 	b.w	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 8005dc6:	f7fe fa59 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005dca:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005dcc:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005dce:	f7fb f9a3 	bl	8001118 <__aeabi_fcmpge>
 8005dd2:	b158      	cbz	r0, 8005dec <keypad_sm+0x11e4>
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	4926      	ldr	r1, [pc, #152]	; (8005e70 <keypad_sm+0x1268>)
 8005dd8:	f7fb f994 	bl	8001104 <__aeabi_fcmple>
 8005ddc:	b130      	cbz	r0, 8005dec <keypad_sm+0x11e4>
					volt_set_main_old = volt_set_main;
 8005dde:	4d25      	ldr	r5, [pc, #148]	; (8005e74 <keypad_sm+0x126c>)
 8005de0:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <keypad_sm+0x1270>)
 8005de2:	682a      	ldr	r2, [r5, #0]
 8005de4:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005de6:	f7fe fa49 	bl	800427c <translate_keypad>
 8005dea:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005dec:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005df0:	4d1c      	ldr	r5, [pc, #112]	; (8005e64 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005df2:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005df6:	f995 2000 	ldrsb.w	r2, [r5]
 8005dfa:	2a03      	cmp	r2, #3
 8005dfc:	f73f a99d 	bgt.w	800513a <keypad_sm+0x532>
 8005e00:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <keypad_sm+0x1260>)
 8005e02:	4e1a      	ldr	r6, [pc, #104]	; (8005e6c <keypad_sm+0x1264>)
 8005e04:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005e06:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005e0a:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005e0e:	f896 9000 	ldrb.w	r9, [r6]
 8005e12:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005e16:	789c      	ldrb	r4, [r3, #2]
 8005e18:	7858      	ldrb	r0, [r3, #1]
 8005e1a:	7819      	ldrb	r1, [r3, #0]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	e003      	b.n	8005e28 <keypad_sm+0x1220>
	while(keypaditerator < 4){
 8005e20:	46a4      	mov	ip, r4
 8005e22:	4604      	mov	r4, r0
 8005e24:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005e26:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005e28:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005e2a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005e2e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005e30:	bf04      	itt	eq
 8005e32:	f04f 0e01 	moveq.w	lr, #1
 8005e36:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005e3a:	2a05      	cmp	r2, #5
 8005e3c:	46e0      	mov	r8, ip
 8005e3e:	d1ef      	bne.n	8005e20 <keypad_sm+0x1218>
 8005e40:	f883 c004 	strb.w	ip, [r3, #4]
 8005e44:	70dc      	strb	r4, [r3, #3]
 8005e46:	7098      	strb	r0, [r3, #2]
 8005e48:	7059      	strb	r1, [r3, #1]
 8005e4a:	f883 a000 	strb.w	sl, [r3]
 8005e4e:	2304      	movs	r3, #4
 8005e50:	702b      	strb	r3, [r5, #0]
 8005e52:	f1be 0f00 	cmp.w	lr, #0
 8005e56:	f43f a970 	beq.w	800513a <keypad_sm+0x532>
 8005e5a:	f886 9000 	strb.w	r9, [r6]
 8005e5e:	f7ff b96c 	b.w	800513a <keypad_sm+0x532>
 8005e62:	bf00      	nop
 8005e64:	20000015 	.word	0x20000015
 8005e68:	20000010 	.word	0x20000010
 8005e6c:	20000758 	.word	0x20000758
 8005e70:	41400000 	.word	0x41400000
 8005e74:	20000a80 	.word	0x20000a80
 8005e78:	20000a84 	.word	0x20000a84
				kpenum = WAIT;
 8005e7c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005e80:	4dc5      	ldr	r5, [pc, #788]	; (8006198 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005e82:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005e86:	f995 2000 	ldrsb.w	r2, [r5]
 8005e8a:	2a03      	cmp	r2, #3
 8005e8c:	f73f a955 	bgt.w	800513a <keypad_sm+0x532>
 8005e90:	4bc2      	ldr	r3, [pc, #776]	; (800619c <keypad_sm+0x1594>)
 8005e92:	4ec3      	ldr	r6, [pc, #780]	; (80061a0 <keypad_sm+0x1598>)
 8005e94:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005e96:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005e9a:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005e9e:	f896 9000 	ldrb.w	r9, [r6]
 8005ea2:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005ea6:	789c      	ldrb	r4, [r3, #2]
 8005ea8:	7858      	ldrb	r0, [r3, #1]
 8005eaa:	7819      	ldrb	r1, [r3, #0]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	e003      	b.n	8005eb8 <keypad_sm+0x12b0>
	while(keypaditerator < 4){
 8005eb0:	46a4      	mov	ip, r4
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005eb6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005eb8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005eba:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005ebe:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005ec0:	bf04      	itt	eq
 8005ec2:	f04f 0e01 	moveq.w	lr, #1
 8005ec6:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005eca:	2a05      	cmp	r2, #5
 8005ecc:	46e0      	mov	r8, ip
 8005ece:	d1ef      	bne.n	8005eb0 <keypad_sm+0x12a8>
 8005ed0:	f883 c004 	strb.w	ip, [r3, #4]
 8005ed4:	70dc      	strb	r4, [r3, #3]
 8005ed6:	7098      	strb	r0, [r3, #2]
 8005ed8:	7059      	strb	r1, [r3, #1]
 8005eda:	f883 a000 	strb.w	sl, [r3]
 8005ede:	2304      	movs	r3, #4
 8005ee0:	702b      	strb	r3, [r5, #0]
 8005ee2:	f1be 0f00 	cmp.w	lr, #0
 8005ee6:	f43f a928 	beq.w	800513a <keypad_sm+0x532>
 8005eea:	f886 9000 	strb.w	r9, [r6]
 8005eee:	f7ff b924 	b.w	800513a <keypad_sm+0x532>
				kpenum = WAIT;
 8005ef2:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005ef6:	4da8      	ldr	r5, [pc, #672]	; (8006198 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005ef8:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005efc:	f995 2000 	ldrsb.w	r2, [r5]
 8005f00:	2a03      	cmp	r2, #3
 8005f02:	f73f a91a 	bgt.w	800513a <keypad_sm+0x532>
 8005f06:	4ba5      	ldr	r3, [pc, #660]	; (800619c <keypad_sm+0x1594>)
 8005f08:	4ea5      	ldr	r6, [pc, #660]	; (80061a0 <keypad_sm+0x1598>)
			keypadarr[0] = num;
 8005f0a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005f0e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005f12:	f896 8000 	ldrb.w	r8, [r6]
 8005f16:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005f1a:	789c      	ldrb	r4, [r3, #2]
 8005f1c:	7858      	ldrb	r0, [r3, #1]
 8005f1e:	7819      	ldrb	r1, [r3, #0]
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	e003      	b.n	8005f2c <keypad_sm+0x1324>
	while(keypaditerator < 4){
 8005f24:	46a4      	mov	ip, r4
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005f2a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005f2c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005f2e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005f32:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005f34:	bf04      	itt	eq
 8005f36:	f04f 0e01 	moveq.w	lr, #1
 8005f3a:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005f3e:	2a04      	cmp	r2, #4
 8005f40:	46e1      	mov	r9, ip
 8005f42:	d1ef      	bne.n	8005f24 <keypad_sm+0x131c>
 8005f44:	702a      	strb	r2, [r5, #0]
 8005f46:	f883 c004 	strb.w	ip, [r3, #4]
 8005f4a:	70dc      	strb	r4, [r3, #3]
 8005f4c:	7098      	strb	r0, [r3, #2]
 8005f4e:	7059      	strb	r1, [r3, #1]
 8005f50:	f883 a000 	strb.w	sl, [r3]
 8005f54:	f1be 0f00 	cmp.w	lr, #0
 8005f58:	f43f a8ef 	beq.w	800513a <keypad_sm+0x532>
 8005f5c:	f886 8000 	strb.w	r8, [r6]
 8005f60:	f7ff b8eb 	b.w	800513a <keypad_sm+0x532>
			else if(num == '#'){
 8005f64:	2823      	cmp	r0, #35	; 0x23
 8005f66:	f000 8331 	beq.w	80065cc <keypad_sm+0x19c4>
			else if(num == '+'){
 8005f6a:	282b      	cmp	r0, #43	; 0x2b
 8005f6c:	f000 84bd 	beq.w	80068ea <keypad_sm+0x1ce2>
			else if(num == '-'){
 8005f70:	282d      	cmp	r0, #45	; 0x2d
 8005f72:	f000 8599 	beq.w	8006aa8 <keypad_sm+0x1ea0>
			else if(num == 's'){
 8005f76:	2873      	cmp	r0, #115	; 0x73
 8005f78:	f000 8589 	beq.w	8006a8e <keypad_sm+0x1e86>
			else if(num == '['){
 8005f7c:	285b      	cmp	r0, #91	; 0x5b
 8005f7e:	f000 87b3 	beq.w	8006ee8 <keypad_sm+0x22e0>
			else if(num == ']'){
 8005f82:	285d      	cmp	r0, #93	; 0x5d
 8005f84:	f001 80e3 	beq.w	800714e <keypad_sm+0x2546>
			else if(num == '*'){
 8005f88:	282a      	cmp	r0, #42	; 0x2a
 8005f8a:	f47e af1b 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8005f8e:	4b85      	ldr	r3, [pc, #532]	; (80061a4 <keypad_sm+0x159c>)
 8005f90:	4a85      	ldr	r2, [pc, #532]	; (80061a8 <keypad_sm+0x15a0>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	fab3 f383 	clz	r3, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	7013      	strb	r3, [r2, #0]
 8005f9c:	f7fe be60 	b.w	8004c60 <keypad_sm+0x58>
	while(keypaditerator < 4){
 8005fa0:	4d7d      	ldr	r5, [pc, #500]	; (8006198 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005fa2:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005fa4:	f995 2000 	ldrsb.w	r2, [r5]
 8005fa8:	2a03      	cmp	r2, #3
 8005faa:	f73e ae59 	bgt.w	8004c60 <keypad_sm+0x58>
 8005fae:	4b7b      	ldr	r3, [pc, #492]	; (800619c <keypad_sm+0x1594>)
 8005fb0:	4e7b      	ldr	r6, [pc, #492]	; (80061a0 <keypad_sm+0x1598>)
 8005fb2:	3201      	adds	r2, #1
 8005fb4:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005fb8:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005fbc:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005fc0:	f896 c000 	ldrb.w	ip, [r6]
 8005fc4:	78df      	ldrb	r7, [r3, #3]
 8005fc6:	789c      	ldrb	r4, [r3, #2]
 8005fc8:	7858      	ldrb	r0, [r3, #1]
 8005fca:	7819      	ldrb	r1, [r3, #0]
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	e003      	b.n	8005fd8 <keypad_sm+0x13d0>
	while(keypaditerator < 4){
 8005fd0:	4627      	mov	r7, r4
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005fd6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005fd8:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005fda:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005fde:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005fe0:	bf04      	itt	eq
 8005fe2:	f04f 0c00 	moveq.w	ip, #0
 8005fe6:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005fea:	2a05      	cmp	r2, #5
 8005fec:	46b8      	mov	r8, r7
 8005fee:	d1ef      	bne.n	8005fd0 <keypad_sm+0x13c8>
 8005ff0:	711f      	strb	r7, [r3, #4]
 8005ff2:	70dc      	strb	r4, [r3, #3]
 8005ff4:	7098      	strb	r0, [r3, #2]
 8005ff6:	7059      	strb	r1, [r3, #1]
 8005ff8:	f883 9000 	strb.w	r9, [r3]
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	702b      	strb	r3, [r5, #0]
 8006000:	f1be 0f00 	cmp.w	lr, #0
 8006004:	f43e ae2c 	beq.w	8004c60 <keypad_sm+0x58>
 8006008:	f886 c000 	strb.w	ip, [r6]
 800600c:	f7fe be28 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8006010:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8006012:	4d61      	ldr	r5, [pc, #388]	; (8006198 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8006014:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8006016:	f995 2000 	ldrsb.w	r2, [r5]
 800601a:	2a03      	cmp	r2, #3
 800601c:	f73f a88d 	bgt.w	800513a <keypad_sm+0x532>
 8006020:	4b5e      	ldr	r3, [pc, #376]	; (800619c <keypad_sm+0x1594>)
 8006022:	4e5f      	ldr	r6, [pc, #380]	; (80061a0 <keypad_sm+0x1598>)
 8006024:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006028:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800602c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006030:	f896 e000 	ldrb.w	lr, [r6]
 8006034:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006038:	789c      	ldrb	r4, [r3, #2]
 800603a:	7858      	ldrb	r0, [r3, #1]
 800603c:	7819      	ldrb	r1, [r3, #0]
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	e003      	b.n	800604a <keypad_sm+0x1442>
	while(keypaditerator < 4){
 8006042:	46a4      	mov	ip, r4
 8006044:	4604      	mov	r4, r0
 8006046:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006048:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800604a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800604c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006050:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006052:	bf04      	itt	eq
 8006054:	f04f 0801 	moveq.w	r8, #1
 8006058:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800605c:	2a04      	cmp	r2, #4
 800605e:	46e1      	mov	r9, ip
 8006060:	d1ef      	bne.n	8006042 <keypad_sm+0x143a>
 8006062:	702a      	strb	r2, [r5, #0]
 8006064:	f883 c004 	strb.w	ip, [r3, #4]
 8006068:	70dc      	strb	r4, [r3, #3]
 800606a:	7098      	strb	r0, [r3, #2]
 800606c:	7059      	strb	r1, [r3, #1]
 800606e:	f883 a000 	strb.w	sl, [r3]
 8006072:	f1b8 0f00 	cmp.w	r8, #0
 8006076:	f43f a860 	beq.w	800513a <keypad_sm+0x532>
 800607a:	f886 e000 	strb.w	lr, [r6]
 800607e:	f7ff b85c 	b.w	800513a <keypad_sm+0x532>
 8006082:	4d45      	ldr	r5, [pc, #276]	; (8006198 <keypad_sm+0x1590>)
 8006084:	f995 2000 	ldrsb.w	r2, [r5]
 8006088:	2a03      	cmp	r2, #3
 800608a:	f73f a856 	bgt.w	800513a <keypad_sm+0x532>
 800608e:	4b43      	ldr	r3, [pc, #268]	; (800619c <keypad_sm+0x1594>)
 8006090:	4e43      	ldr	r6, [pc, #268]	; (80061a0 <keypad_sm+0x1598>)
 8006092:	3201      	adds	r2, #1
 8006094:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006098:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800609c:	f893 9004 	ldrb.w	r9, [r3, #4]
 80060a0:	f896 e000 	ldrb.w	lr, [r6]
 80060a4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80060a8:	789c      	ldrb	r4, [r3, #2]
 80060aa:	7858      	ldrb	r0, [r3, #1]
 80060ac:	7819      	ldrb	r1, [r3, #0]
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	e003      	b.n	80060ba <keypad_sm+0x14b2>
	while(keypaditerator < 4){
 80060b2:	46a4      	mov	ip, r4
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80060b8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80060ba:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80060bc:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80060c0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80060c2:	bf04      	itt	eq
 80060c4:	f04f 0801 	moveq.w	r8, #1
 80060c8:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80060cc:	2a05      	cmp	r2, #5
 80060ce:	46e1      	mov	r9, ip
 80060d0:	d1ef      	bne.n	80060b2 <keypad_sm+0x14aa>
 80060d2:	f883 c004 	strb.w	ip, [r3, #4]
 80060d6:	70dc      	strb	r4, [r3, #3]
 80060d8:	7098      	strb	r0, [r3, #2]
 80060da:	7059      	strb	r1, [r3, #1]
 80060dc:	f883 a000 	strb.w	sl, [r3]
 80060e0:	2304      	movs	r3, #4
 80060e2:	702b      	strb	r3, [r5, #0]
 80060e4:	f1b8 0f00 	cmp.w	r8, #0
 80060e8:	f43f a827 	beq.w	800513a <keypad_sm+0x532>
 80060ec:	f886 e000 	strb.w	lr, [r6]
 80060f0:	f7ff b823 	b.w	800513a <keypad_sm+0x532>
 80060f4:	4d28      	ldr	r5, [pc, #160]	; (8006198 <keypad_sm+0x1590>)
				kpenum = WAIT;
 80060f6:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80060f8:	f995 2000 	ldrsb.w	r2, [r5]
 80060fc:	2a03      	cmp	r2, #3
 80060fe:	f73e adaf 	bgt.w	8004c60 <keypad_sm+0x58>
 8006102:	4b26      	ldr	r3, [pc, #152]	; (800619c <keypad_sm+0x1594>)
 8006104:	4e26      	ldr	r6, [pc, #152]	; (80061a0 <keypad_sm+0x1598>)
 8006106:	3201      	adds	r2, #1
 8006108:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 800610c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006110:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006114:	f896 c000 	ldrb.w	ip, [r6]
 8006118:	78df      	ldrb	r7, [r3, #3]
 800611a:	789c      	ldrb	r4, [r3, #2]
 800611c:	7858      	ldrb	r0, [r3, #1]
 800611e:	7819      	ldrb	r1, [r3, #0]
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	e003      	b.n	800612c <keypad_sm+0x1524>
	while(keypaditerator < 4){
 8006124:	4627      	mov	r7, r4
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800612a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800612c:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800612e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006132:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006134:	bf04      	itt	eq
 8006136:	f04f 0c00 	moveq.w	ip, #0
 800613a:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 800613e:	2a05      	cmp	r2, #5
 8006140:	46b8      	mov	r8, r7
 8006142:	d1ef      	bne.n	8006124 <keypad_sm+0x151c>
 8006144:	711f      	strb	r7, [r3, #4]
 8006146:	70dc      	strb	r4, [r3, #3]
 8006148:	7098      	strb	r0, [r3, #2]
 800614a:	7059      	strb	r1, [r3, #1]
 800614c:	f883 9000 	strb.w	r9, [r3]
 8006150:	2304      	movs	r3, #4
 8006152:	702b      	strb	r3, [r5, #0]
 8006154:	f1be 0f00 	cmp.w	lr, #0
 8006158:	f43e ad82 	beq.w	8004c60 <keypad_sm+0x58>
 800615c:	f886 c000 	strb.w	ip, [r6]
 8006160:	f7fe bd7e 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8006164:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8006166:	4d0c      	ldr	r5, [pc, #48]	; (8006198 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8006168:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 800616a:	f995 2000 	ldrsb.w	r2, [r5]
 800616e:	2a03      	cmp	r2, #3
 8006170:	f73e afe3 	bgt.w	800513a <keypad_sm+0x532>
 8006174:	4b09      	ldr	r3, [pc, #36]	; (800619c <keypad_sm+0x1594>)
 8006176:	4e0a      	ldr	r6, [pc, #40]	; (80061a0 <keypad_sm+0x1598>)
 8006178:	3201      	adds	r2, #1
 800617a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800617e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006182:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006186:	f896 e000 	ldrb.w	lr, [r6]
 800618a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800618e:	789c      	ldrb	r4, [r3, #2]
 8006190:	7858      	ldrb	r0, [r3, #1]
 8006192:	7819      	ldrb	r1, [r3, #0]
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	e00d      	b.n	80061b4 <keypad_sm+0x15ac>
 8006198:	20000015 	.word	0x20000015
 800619c:	20000010 	.word	0x20000010
 80061a0:	20000758 	.word	0x20000758
 80061a4:	200003f4 	.word	0x200003f4
 80061a8:	200003f5 	.word	0x200003f5
	while(keypaditerator < 4){
 80061ac:	46a4      	mov	ip, r4
 80061ae:	4604      	mov	r4, r0
 80061b0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80061b2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80061b4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80061b6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80061ba:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80061bc:	bf04      	itt	eq
 80061be:	f04f 0801 	moveq.w	r8, #1
 80061c2:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80061c6:	2a05      	cmp	r2, #5
 80061c8:	46e1      	mov	r9, ip
 80061ca:	d1ef      	bne.n	80061ac <keypad_sm+0x15a4>
 80061cc:	f883 c004 	strb.w	ip, [r3, #4]
 80061d0:	70dc      	strb	r4, [r3, #3]
 80061d2:	7098      	strb	r0, [r3, #2]
 80061d4:	7059      	strb	r1, [r3, #1]
 80061d6:	f883 a000 	strb.w	sl, [r3]
 80061da:	2304      	movs	r3, #4
 80061dc:	702b      	strb	r3, [r5, #0]
 80061de:	f1b8 0f00 	cmp.w	r8, #0
 80061e2:	f43e afaa 	beq.w	800513a <keypad_sm+0x532>
 80061e6:	f886 e000 	strb.w	lr, [r6]
 80061ea:	f7fe bfa6 	b.w	800513a <keypad_sm+0x532>
			else if(num == '#'){
 80061ee:	2823      	cmp	r0, #35	; 0x23
 80061f0:	f000 83c2 	beq.w	8006978 <keypad_sm+0x1d70>
			else if(num == '+'){
 80061f4:	282b      	cmp	r0, #43	; 0x2b
 80061f6:	f000 83f6 	beq.w	80069e6 <keypad_sm+0x1dde>
			else if(num == '-'){
 80061fa:	282d      	cmp	r0, #45	; 0x2d
 80061fc:	f000 84e6 	beq.w	8006bcc <keypad_sm+0x1fc4>
			else if(num == 's'){
 8006200:	2873      	cmp	r0, #115	; 0x73
 8006202:	f000 86f6 	beq.w	8006ff2 <keypad_sm+0x23ea>
			else if(num == '['){
 8006206:	285b      	cmp	r0, #91	; 0x5b
 8006208:	f000 87dd 	beq.w	80071c6 <keypad_sm+0x25be>
			else if(num == ']'){
 800620c:	285d      	cmp	r0, #93	; 0x5d
 800620e:	f000 87cf 	beq.w	80071b0 <keypad_sm+0x25a8>
			else if(num == '*'){
 8006212:	282a      	cmp	r0, #42	; 0x2a
 8006214:	f47e add6 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8006218:	4bb9      	ldr	r3, [pc, #740]	; (8006500 <keypad_sm+0x18f8>)
 800621a:	4aba      	ldr	r2, [pc, #744]	; (8006504 <keypad_sm+0x18fc>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	fab3 f383 	clz	r3, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	7013      	strb	r3, [r2, #0]
 8006226:	f7fe bd1b 	b.w	8004c60 <keypad_sm+0x58>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800622a:	4db7      	ldr	r5, [pc, #732]	; (8006508 <keypad_sm+0x1900>)
 800622c:	f995 3000 	ldrsb.w	r3, [r5]
 8006230:	2b01      	cmp	r3, #1
 8006232:	f77e ad15 	ble.w	8004c60 <keypad_sm+0x58>
 8006236:	4eb5      	ldr	r6, [pc, #724]	; (800650c <keypad_sm+0x1904>)
 8006238:	7832      	ldrb	r2, [r6, #0]
 800623a:	2a00      	cmp	r2, #0
 800623c:	f47e ad10 	bne.w	8004c60 <keypad_sm+0x58>
				keypadarr[i-1] = keypadarr[i];
 8006240:	4ab3      	ldr	r2, [pc, #716]	; (8006510 <keypad_sm+0x1908>)
			keypaditerator--;
 8006242:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8006244:	f8d2 1001 	ldr.w	r1, [r2, #1]
			keypaditerator--;
 8006248:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 800624a:	6011      	str	r1, [r2, #0]
			keypaddecimal = 1;
 800624c:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 800624e:	212e      	movs	r1, #46	; 0x2e
			keypaddecimal = 1;
 8006250:	7033      	strb	r3, [r6, #0]
			keypadarr[keypadlength-1] = num;
 8006252:	7111      	strb	r1, [r2, #4]
			keypaditerator--;
 8006254:	f7fe bd04 	b.w	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 8006258:	f7fe f810 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800625c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800625e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006260:	f7fa ff5a 	bl	8001118 <__aeabi_fcmpge>
 8006264:	b130      	cbz	r0, 8006274 <keypad_sm+0x166c>
 8006266:	4628      	mov	r0, r5
 8006268:	49aa      	ldr	r1, [pc, #680]	; (8006514 <keypad_sm+0x190c>)
 800626a:	f7fa ff4b 	bl	8001104 <__aeabi_fcmple>
 800626e:	b108      	cbz	r0, 8006274 <keypad_sm+0x166c>
					volt_set_aux = translate_keypad();
 8006270:	4ba9      	ldr	r3, [pc, #676]	; (8006518 <keypad_sm+0x1910>)
 8006272:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006274:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006276:	4da4      	ldr	r5, [pc, #656]	; (8006508 <keypad_sm+0x1900>)
				kpenum = WAIT;
 8006278:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 800627a:	f995 2000 	ldrsb.w	r2, [r5]
 800627e:	2a03      	cmp	r2, #3
 8006280:	f73e acee 	bgt.w	8004c60 <keypad_sm+0x58>
 8006284:	4ba2      	ldr	r3, [pc, #648]	; (8006510 <keypad_sm+0x1908>)
 8006286:	4ea1      	ldr	r6, [pc, #644]	; (800650c <keypad_sm+0x1904>)
 8006288:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800628a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800628e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006292:	f896 e000 	ldrb.w	lr, [r6]
 8006296:	f893 c003 	ldrb.w	ip, [r3, #3]
 800629a:	789c      	ldrb	r4, [r3, #2]
 800629c:	7858      	ldrb	r0, [r3, #1]
 800629e:	7819      	ldrb	r1, [r3, #0]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	e003      	b.n	80062ac <keypad_sm+0x16a4>
	while(keypaditerator < 4){
 80062a4:	46a4      	mov	ip, r4
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80062aa:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80062ac:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80062ae:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80062b2:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80062b4:	bf04      	itt	eq
 80062b6:	f04f 0e00 	moveq.w	lr, #0
 80062ba:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 80062bc:	2a05      	cmp	r2, #5
 80062be:	46e0      	mov	r8, ip
 80062c0:	d1f0      	bne.n	80062a4 <keypad_sm+0x169c>
 80062c2:	f883 c004 	strb.w	ip, [r3, #4]
 80062c6:	70dc      	strb	r4, [r3, #3]
 80062c8:	7098      	strb	r0, [r3, #2]
 80062ca:	7059      	strb	r1, [r3, #1]
 80062cc:	f883 9000 	strb.w	r9, [r3]
 80062d0:	2304      	movs	r3, #4
 80062d2:	702b      	strb	r3, [r5, #0]
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	f43e acc3 	beq.w	8004c60 <keypad_sm+0x58>
 80062da:	f886 e000 	strb.w	lr, [r6]
 80062de:	f7fe bcbf 	b.w	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 80062e2:	f7fd ffcb 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062e6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80062e8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062ea:	f7fa ff15 	bl	8001118 <__aeabi_fcmpge>
 80062ee:	b170      	cbz	r0, 800630e <keypad_sm+0x1706>
 80062f0:	4628      	mov	r0, r5
 80062f2:	4988      	ldr	r1, [pc, #544]	; (8006514 <keypad_sm+0x190c>)
 80062f4:	f7fa ff06 	bl	8001104 <__aeabi_fcmple>
 80062f8:	b148      	cbz	r0, 800630e <keypad_sm+0x1706>
					amp_set_main_old = amp_set_main;
 80062fa:	4d88      	ldr	r5, [pc, #544]	; (800651c <keypad_sm+0x1914>)
 80062fc:	4b88      	ldr	r3, [pc, #544]	; (8006520 <keypad_sm+0x1918>)
 80062fe:	682a      	ldr	r2, [r5, #0]
 8006300:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006302:	f7fd ffbb 	bl	800427c <translate_keypad>
 8006306:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006308:	6828      	ldr	r0, [r5, #0]
 800630a:	f7fb fb35 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 800630e:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006310:	4d7d      	ldr	r5, [pc, #500]	; (8006508 <keypad_sm+0x1900>)
				kpenum = WAIT;
 8006312:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006314:	f995 2000 	ldrsb.w	r2, [r5]
 8006318:	2a03      	cmp	r2, #3
 800631a:	f73e af0e 	bgt.w	800513a <keypad_sm+0x532>
 800631e:	4b7c      	ldr	r3, [pc, #496]	; (8006510 <keypad_sm+0x1908>)
 8006320:	4e7a      	ldr	r6, [pc, #488]	; (800650c <keypad_sm+0x1904>)
 8006322:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006324:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006328:	f893 8004 	ldrb.w	r8, [r3, #4]
 800632c:	f896 e000 	ldrb.w	lr, [r6]
 8006330:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006334:	789c      	ldrb	r4, [r3, #2]
 8006336:	7858      	ldrb	r0, [r3, #1]
 8006338:	7819      	ldrb	r1, [r3, #0]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	e003      	b.n	8006346 <keypad_sm+0x173e>
	while(keypaditerator < 4){
 800633e:	46a4      	mov	ip, r4
 8006340:	4604      	mov	r4, r0
 8006342:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006344:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006346:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006348:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800634c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800634e:	bf04      	itt	eq
 8006350:	f04f 0901 	moveq.w	r9, #1
 8006354:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006358:	2a04      	cmp	r2, #4
 800635a:	46e0      	mov	r8, ip
 800635c:	d1ef      	bne.n	800633e <keypad_sm+0x1736>
 800635e:	702a      	strb	r2, [r5, #0]
 8006360:	f883 c004 	strb.w	ip, [r3, #4]
 8006364:	70dc      	strb	r4, [r3, #3]
 8006366:	7098      	strb	r0, [r3, #2]
 8006368:	7059      	strb	r1, [r3, #1]
 800636a:	f883 a000 	strb.w	sl, [r3]
 800636e:	f1b9 0f00 	cmp.w	r9, #0
 8006372:	f43e aee2 	beq.w	800513a <keypad_sm+0x532>
 8006376:	f886 e000 	strb.w	lr, [r6]
 800637a:	f7fe bede 	b.w	800513a <keypad_sm+0x532>
	float temp = translate_keypad();
 800637e:	f7fd ff7d 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006382:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006384:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006386:	f7fa fec7 	bl	8001118 <__aeabi_fcmpge>
 800638a:	b190      	cbz	r0, 80063b2 <keypad_sm+0x17aa>
 800638c:	4628      	mov	r0, r5
 800638e:	f7fa f863 	bl	8000458 <__aeabi_f2d>
 8006392:	a359      	add	r3, pc, #356	; (adr r3, 80064f8 <keypad_sm+0x18f0>)
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f7fa fb32 	bl	8000a00 <__aeabi_dcmple>
 800639c:	b148      	cbz	r0, 80063b2 <keypad_sm+0x17aa>
					amp_set_main_old = amp_set_main;
 800639e:	4d5f      	ldr	r5, [pc, #380]	; (800651c <keypad_sm+0x1914>)
 80063a0:	4b5f      	ldr	r3, [pc, #380]	; (8006520 <keypad_sm+0x1918>)
 80063a2:	682a      	ldr	r2, [r5, #0]
 80063a4:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80063a6:	f7fd ff69 	bl	800427c <translate_keypad>
 80063aa:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 80063ac:	6828      	ldr	r0, [r5, #0]
 80063ae:	f7fb fae3 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 80063b2:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 80063b4:	4d54      	ldr	r5, [pc, #336]	; (8006508 <keypad_sm+0x1900>)
				kpenum = WAIT;
 80063b6:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 80063b8:	f995 2000 	ldrsb.w	r2, [r5]
 80063bc:	2a03      	cmp	r2, #3
 80063be:	f73e ac4f 	bgt.w	8004c60 <keypad_sm+0x58>
 80063c2:	4b53      	ldr	r3, [pc, #332]	; (8006510 <keypad_sm+0x1908>)
 80063c4:	4e51      	ldr	r6, [pc, #324]	; (800650c <keypad_sm+0x1904>)
			keypadarr[0] = num;
 80063c6:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80063ca:	f893 8004 	ldrb.w	r8, [r3, #4]
 80063ce:	f896 e000 	ldrb.w	lr, [r6]
 80063d2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80063d6:	789c      	ldrb	r4, [r3, #2]
 80063d8:	7858      	ldrb	r0, [r3, #1]
 80063da:	7819      	ldrb	r1, [r3, #0]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	e003      	b.n	80063e8 <keypad_sm+0x17e0>
	while(keypaditerator < 4){
 80063e0:	46a4      	mov	ip, r4
 80063e2:	4604      	mov	r4, r0
 80063e4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80063e6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80063e8:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80063ea:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80063ee:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80063f0:	bf04      	itt	eq
 80063f2:	f04f 0e00 	moveq.w	lr, #0
 80063f6:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 80063f8:	2a04      	cmp	r2, #4
 80063fa:	46e0      	mov	r8, ip
 80063fc:	d1f0      	bne.n	80063e0 <keypad_sm+0x17d8>
 80063fe:	702a      	strb	r2, [r5, #0]
 8006400:	f883 c004 	strb.w	ip, [r3, #4]
 8006404:	70dc      	strb	r4, [r3, #3]
 8006406:	7098      	strb	r0, [r3, #2]
 8006408:	7059      	strb	r1, [r3, #1]
 800640a:	f883 9000 	strb.w	r9, [r3]
 800640e:	2f00      	cmp	r7, #0
 8006410:	f43e ac26 	beq.w	8004c60 <keypad_sm+0x58>
 8006414:	f886 e000 	strb.w	lr, [r6]
 8006418:	f7fe bc22 	b.w	8004c60 <keypad_sm+0x58>
			else if(num == '#'){
 800641c:	2823      	cmp	r0, #35	; 0x23
 800641e:	f000 845c 	beq.w	8006cda <keypad_sm+0x20d2>
			else if(num == '+'){
 8006422:	282b      	cmp	r0, #43	; 0x2b
 8006424:	f000 840c 	beq.w	8006c40 <keypad_sm+0x2038>
			else if(num == '-'){
 8006428:	282d      	cmp	r0, #45	; 0x2d
 800642a:	f000 8618 	beq.w	800705e <keypad_sm+0x2456>
			else if(num == 's'){
 800642e:	2873      	cmp	r0, #115	; 0x73
 8006430:	f000 85ea 	beq.w	8007008 <keypad_sm+0x2400>
			else if(num == '['){
 8006434:	285b      	cmp	r0, #91	; 0x5b
 8006436:	f000 867c 	beq.w	8007132 <keypad_sm+0x252a>
			else if(num == ']'){
 800643a:	285d      	cmp	r0, #93	; 0x5d
 800643c:	f000 866b 	beq.w	8007116 <keypad_sm+0x250e>
			else if(num == '*'){
 8006440:	282a      	cmp	r0, #42	; 0x2a
 8006442:	f47e acbf 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8006446:	4b2e      	ldr	r3, [pc, #184]	; (8006500 <keypad_sm+0x18f8>)
 8006448:	4a2e      	ldr	r2, [pc, #184]	; (8006504 <keypad_sm+0x18fc>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	fab3 f383 	clz	r3, r3
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	7013      	strb	r3, [r2, #0]
 8006454:	f7fe bc04 	b.w	8004c60 <keypad_sm+0x58>
	while(keypaditerator < 4){
 8006458:	4d2b      	ldr	r5, [pc, #172]	; (8006508 <keypad_sm+0x1900>)
 800645a:	f995 2000 	ldrsb.w	r2, [r5]
 800645e:	2a03      	cmp	r2, #3
 8006460:	f73e ae6b 	bgt.w	800513a <keypad_sm+0x532>
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <keypad_sm+0x1908>)
 8006466:	4e29      	ldr	r6, [pc, #164]	; (800650c <keypad_sm+0x1904>)
 8006468:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800646c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006470:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006474:	f896 e000 	ldrb.w	lr, [r6]
 8006478:	f893 c003 	ldrb.w	ip, [r3, #3]
 800647c:	789c      	ldrb	r4, [r3, #2]
 800647e:	7858      	ldrb	r0, [r3, #1]
 8006480:	7819      	ldrb	r1, [r3, #0]
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	e003      	b.n	800648e <keypad_sm+0x1886>
	while(keypaditerator < 4){
 8006486:	46a4      	mov	ip, r4
 8006488:	4604      	mov	r4, r0
 800648a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800648c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800648e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006490:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006494:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006496:	bf04      	itt	eq
 8006498:	f04f 0801 	moveq.w	r8, #1
 800649c:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80064a0:	2a04      	cmp	r2, #4
 80064a2:	46e1      	mov	r9, ip
 80064a4:	d1ef      	bne.n	8006486 <keypad_sm+0x187e>
 80064a6:	702a      	strb	r2, [r5, #0]
 80064a8:	f883 c004 	strb.w	ip, [r3, #4]
 80064ac:	70dc      	strb	r4, [r3, #3]
 80064ae:	7098      	strb	r0, [r3, #2]
 80064b0:	7059      	strb	r1, [r3, #1]
 80064b2:	f883 a000 	strb.w	sl, [r3]
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	f43e ae3e 	beq.w	800513a <keypad_sm+0x532>
 80064be:	f886 e000 	strb.w	lr, [r6]
 80064c2:	f7fe be3a 	b.w	800513a <keypad_sm+0x532>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80064c6:	4d10      	ldr	r5, [pc, #64]	; (8006508 <keypad_sm+0x1900>)
 80064c8:	f995 3000 	ldrsb.w	r3, [r5]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	f77e abc7 	ble.w	8004c60 <keypad_sm+0x58>
 80064d2:	490e      	ldr	r1, [pc, #56]	; (800650c <keypad_sm+0x1904>)
 80064d4:	780a      	ldrb	r2, [r1, #0]
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	f47e abc2 	bne.w	8004c60 <keypad_sm+0x58>
				keypadarr[i-1] = keypadarr[i];
 80064dc:	4a0c      	ldr	r2, [pc, #48]	; (8006510 <keypad_sm+0x1908>)
			keypaditerator--;
 80064de:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 80064e0:	f8d2 0001 	ldr.w	r0, [r2, #1]
			keypaditerator--;
 80064e4:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 80064e6:	6010      	str	r0, [r2, #0]
			keypaddecimal = 1;
 80064e8:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 80064ea:	202e      	movs	r0, #46	; 0x2e
			keypaddecimal = 1;
 80064ec:	700b      	strb	r3, [r1, #0]
			keypadarr[keypadlength-1] = num;
 80064ee:	7110      	strb	r0, [r2, #4]
			keypaditerator--;
 80064f0:	f7fe bbb6 	b.w	8004c60 <keypad_sm+0x58>
 80064f4:	f3af 8000 	nop.w
 80064f8:	50b0f27c 	.word	0x50b0f27c
 80064fc:	3fe99a6b 	.word	0x3fe99a6b
 8006500:	200003f4 	.word	0x200003f4
 8006504:	200003f5 	.word	0x200003f5
 8006508:	20000015 	.word	0x20000015
 800650c:	20000758 	.word	0x20000758
 8006510:	20000010 	.word	0x20000010
 8006514:	41400000 	.word	0x41400000
 8006518:	20000a7c 	.word	0x20000a7c
 800651c:	200003ec 	.word	0x200003ec
 8006520:	200003f0 	.word	0x200003f0
	while(keypaditerator < 4){
 8006524:	4dbe      	ldr	r5, [pc, #760]	; (8006820 <keypad_sm+0x1c18>)
 8006526:	f995 2000 	ldrsb.w	r2, [r5]
 800652a:	2a03      	cmp	r2, #3
 800652c:	f73e ae05 	bgt.w	800513a <keypad_sm+0x532>
 8006530:	4bbc      	ldr	r3, [pc, #752]	; (8006824 <keypad_sm+0x1c1c>)
 8006532:	4ebd      	ldr	r6, [pc, #756]	; (8006828 <keypad_sm+0x1c20>)
 8006534:	3201      	adds	r2, #1
 8006536:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800653a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800653e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006542:	f896 e000 	ldrb.w	lr, [r6]
 8006546:	f893 c003 	ldrb.w	ip, [r3, #3]
 800654a:	789c      	ldrb	r4, [r3, #2]
 800654c:	7858      	ldrb	r0, [r3, #1]
 800654e:	7819      	ldrb	r1, [r3, #0]
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	e003      	b.n	800655c <keypad_sm+0x1954>
	while(keypaditerator < 4){
 8006554:	46a4      	mov	ip, r4
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800655a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800655c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800655e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006562:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006564:	bf04      	itt	eq
 8006566:	f04f 0801 	moveq.w	r8, #1
 800656a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800656e:	2a05      	cmp	r2, #5
 8006570:	46e1      	mov	r9, ip
 8006572:	d1ef      	bne.n	8006554 <keypad_sm+0x194c>
 8006574:	f883 c004 	strb.w	ip, [r3, #4]
 8006578:	70dc      	strb	r4, [r3, #3]
 800657a:	7098      	strb	r0, [r3, #2]
 800657c:	7059      	strb	r1, [r3, #1]
 800657e:	f883 a000 	strb.w	sl, [r3]
 8006582:	2304      	movs	r3, #4
 8006584:	702b      	strb	r3, [r5, #0]
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	f43e add6 	beq.w	800513a <keypad_sm+0x532>
 800658e:	f886 e000 	strb.w	lr, [r6]
 8006592:	f7fe bdd2 	b.w	800513a <keypad_sm+0x532>
		if(keypaditerator < keypadlength-1){
 8006596:	4da2      	ldr	r5, [pc, #648]	; (8006820 <keypad_sm+0x1c18>)
 8006598:	f995 2000 	ldrsb.w	r2, [r5]
 800659c:	2a03      	cmp	r2, #3
 800659e:	f73e ab5f 	bgt.w	8004c60 <keypad_sm+0x58>
			if(keypadarr[4] == '.'){
 80065a2:	4ba0      	ldr	r3, [pc, #640]	; (8006824 <keypad_sm+0x1c1c>)
 80065a4:	7919      	ldrb	r1, [r3, #4]
 80065a6:	292e      	cmp	r1, #46	; 0x2e
 80065a8:	d102      	bne.n	80065b0 <keypad_sm+0x19a8>
				keypaddecimal = 0;
 80065aa:	2000      	movs	r0, #0
 80065ac:	499e      	ldr	r1, [pc, #632]	; (8006828 <keypad_sm+0x1c20>)
 80065ae:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80065b0:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80065b2:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 80065b4:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 80065b6:	7118      	strb	r0, [r3, #4]
 80065b8:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 80065ba:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80065bc:	70d8      	strb	r0, [r3, #3]
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 80065c2:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 80065c4:	7098      	strb	r0, [r3, #2]
 80065c6:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 80065c8:	f7fe bb4a 	b.w	8004c60 <keypad_sm+0x58>
	while(keypaditerator < 4){
 80065cc:	4d94      	ldr	r5, [pc, #592]	; (8006820 <keypad_sm+0x1c18>)
 80065ce:	f995 2000 	ldrsb.w	r2, [r5]
 80065d2:	2a03      	cmp	r2, #3
 80065d4:	f73e adb1 	bgt.w	800513a <keypad_sm+0x532>
 80065d8:	4b92      	ldr	r3, [pc, #584]	; (8006824 <keypad_sm+0x1c1c>)
 80065da:	4e93      	ldr	r6, [pc, #588]	; (8006828 <keypad_sm+0x1c20>)
 80065dc:	3201      	adds	r2, #1
 80065de:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80065e2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80065e6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80065ea:	f896 e000 	ldrb.w	lr, [r6]
 80065ee:	f893 c003 	ldrb.w	ip, [r3, #3]
 80065f2:	789c      	ldrb	r4, [r3, #2]
 80065f4:	7858      	ldrb	r0, [r3, #1]
 80065f6:	7819      	ldrb	r1, [r3, #0]
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	e003      	b.n	8006604 <keypad_sm+0x19fc>
	while(keypaditerator < 4){
 80065fc:	46a4      	mov	ip, r4
 80065fe:	4604      	mov	r4, r0
 8006600:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006602:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006604:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006606:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800660a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800660c:	bf04      	itt	eq
 800660e:	f04f 0801 	moveq.w	r8, #1
 8006612:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006616:	2a05      	cmp	r2, #5
 8006618:	46e1      	mov	r9, ip
 800661a:	d1ef      	bne.n	80065fc <keypad_sm+0x19f4>
 800661c:	f883 c004 	strb.w	ip, [r3, #4]
 8006620:	70dc      	strb	r4, [r3, #3]
 8006622:	7098      	strb	r0, [r3, #2]
 8006624:	7059      	strb	r1, [r3, #1]
 8006626:	f883 a000 	strb.w	sl, [r3]
 800662a:	2304      	movs	r3, #4
 800662c:	702b      	strb	r3, [r5, #0]
 800662e:	f1b8 0f00 	cmp.w	r8, #0
 8006632:	f43e ad82 	beq.w	800513a <keypad_sm+0x532>
 8006636:	f886 e000 	strb.w	lr, [r6]
 800663a:	f7fe bd7e 	b.w	800513a <keypad_sm+0x532>
	float temp = translate_keypad();
 800663e:	f7fd fe1d 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006642:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006644:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006646:	f7fa fd67 	bl	8001118 <__aeabi_fcmpge>
 800664a:	b150      	cbz	r0, 8006662 <keypad_sm+0x1a5a>
 800664c:	4628      	mov	r0, r5
 800664e:	f7f9 ff03 	bl	8000458 <__aeabi_f2d>
 8006652:	a371      	add	r3, pc, #452	; (adr r3, 8006818 <keypad_sm+0x1c10>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7fa f9d2 	bl	8000a00 <__aeabi_dcmple>
 800665c:	b108      	cbz	r0, 8006662 <keypad_sm+0x1a5a>
					amp_set_aux = translate_keypad();
 800665e:	4b73      	ldr	r3, [pc, #460]	; (800682c <keypad_sm+0x1c24>)
 8006660:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006662:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006664:	4d6e      	ldr	r5, [pc, #440]	; (8006820 <keypad_sm+0x1c18>)
				kpenum = WAIT;
 8006666:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 8006668:	f995 2000 	ldrsb.w	r2, [r5]
 800666c:	2a03      	cmp	r2, #3
 800666e:	f73e aaf7 	bgt.w	8004c60 <keypad_sm+0x58>
 8006672:	4b6c      	ldr	r3, [pc, #432]	; (8006824 <keypad_sm+0x1c1c>)
 8006674:	4e6c      	ldr	r6, [pc, #432]	; (8006828 <keypad_sm+0x1c20>)
			keypadarr[0] = num;
 8006676:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800667a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800667e:	f896 e000 	ldrb.w	lr, [r6]
 8006682:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006686:	789c      	ldrb	r4, [r3, #2]
 8006688:	7858      	ldrb	r0, [r3, #1]
 800668a:	7819      	ldrb	r1, [r3, #0]
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	e003      	b.n	8006698 <keypad_sm+0x1a90>
	while(keypaditerator < 4){
 8006690:	46a4      	mov	ip, r4
 8006692:	4604      	mov	r4, r0
 8006694:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006696:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006698:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800669a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800669e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80066a0:	bf04      	itt	eq
 80066a2:	f04f 0e00 	moveq.w	lr, #0
 80066a6:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 80066a8:	2a04      	cmp	r2, #4
 80066aa:	46e0      	mov	r8, ip
 80066ac:	d1f0      	bne.n	8006690 <keypad_sm+0x1a88>
 80066ae:	702a      	strb	r2, [r5, #0]
 80066b0:	f883 c004 	strb.w	ip, [r3, #4]
 80066b4:	70dc      	strb	r4, [r3, #3]
 80066b6:	7098      	strb	r0, [r3, #2]
 80066b8:	7059      	strb	r1, [r3, #1]
 80066ba:	f883 9000 	strb.w	r9, [r3]
 80066be:	2f00      	cmp	r7, #0
 80066c0:	f43e aace 	beq.w	8004c60 <keypad_sm+0x58>
 80066c4:	f886 e000 	strb.w	lr, [r6]
 80066c8:	f7fe baca 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 80066cc:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80066ce:	4d54      	ldr	r5, [pc, #336]	; (8006820 <keypad_sm+0x1c18>)
				kpenum = WAIT;
 80066d0:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80066d2:	f995 2000 	ldrsb.w	r2, [r5]
 80066d6:	2a03      	cmp	r2, #3
 80066d8:	f73e aac2 	bgt.w	8004c60 <keypad_sm+0x58>
 80066dc:	4b51      	ldr	r3, [pc, #324]	; (8006824 <keypad_sm+0x1c1c>)
 80066de:	4e52      	ldr	r6, [pc, #328]	; (8006828 <keypad_sm+0x1c20>)
 80066e0:	3201      	adds	r2, #1
 80066e2:	4688      	mov	r8, r1
			keypadarr[0] = num;
 80066e4:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80066e8:	f893 e004 	ldrb.w	lr, [r3, #4]
 80066ec:	f896 c000 	ldrb.w	ip, [r6]
 80066f0:	78df      	ldrb	r7, [r3, #3]
 80066f2:	789c      	ldrb	r4, [r3, #2]
 80066f4:	7858      	ldrb	r0, [r3, #1]
 80066f6:	7819      	ldrb	r1, [r3, #0]
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	e003      	b.n	8006704 <keypad_sm+0x1afc>
	while(keypaditerator < 4){
 80066fc:	4627      	mov	r7, r4
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006702:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006704:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006706:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 800670a:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 800670c:	bf04      	itt	eq
 800670e:	f04f 0c00 	moveq.w	ip, #0
 8006712:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006716:	2a05      	cmp	r2, #5
 8006718:	46be      	mov	lr, r7
 800671a:	d1ef      	bne.n	80066fc <keypad_sm+0x1af4>
 800671c:	711f      	strb	r7, [r3, #4]
 800671e:	70dc      	strb	r4, [r3, #3]
 8006720:	7098      	strb	r0, [r3, #2]
 8006722:	7059      	strb	r1, [r3, #1]
 8006724:	f883 9000 	strb.w	r9, [r3]
 8006728:	2304      	movs	r3, #4
 800672a:	702b      	strb	r3, [r5, #0]
 800672c:	f1b8 0f00 	cmp.w	r8, #0
 8006730:	f43e aa96 	beq.w	8004c60 <keypad_sm+0x58>
 8006734:	f886 c000 	strb.w	ip, [r6]
 8006738:	f7fe ba92 	b.w	8004c60 <keypad_sm+0x58>
			else if(num == '#'){
 800673c:	2823      	cmp	r0, #35	; 0x23
 800673e:	f000 8339 	beq.w	8006db4 <keypad_sm+0x21ac>
			else if(num == '+'){
 8006742:	282b      	cmp	r0, #43	; 0x2b
 8006744:	f000 8380 	beq.w	8006e48 <keypad_sm+0x2240>
			else if(num == '-'){
 8006748:	282d      	cmp	r0, #45	; 0x2d
 800674a:	f000 841b 	beq.w	8006f84 <keypad_sm+0x237c>
			else if(num == 's'){
 800674e:	2873      	cmp	r0, #115	; 0x73
 8006750:	f000 8522 	beq.w	8007198 <keypad_sm+0x2590>
			else if(num == '['){
 8006754:	285b      	cmp	r0, #91	; 0x5b
 8006756:	f000 84d7 	beq.w	8007108 <keypad_sm+0x2500>
			else if(num == ']'){
 800675a:	285d      	cmp	r0, #93	; 0x5d
 800675c:	f000 84c3 	beq.w	80070e6 <keypad_sm+0x24de>
			else if(num == '*'){
 8006760:	282a      	cmp	r0, #42	; 0x2a
 8006762:	f47e ab2f 	bne.w	8004dc4 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8006766:	4b32      	ldr	r3, [pc, #200]	; (8006830 <keypad_sm+0x1c28>)
 8006768:	4a32      	ldr	r2, [pc, #200]	; (8006834 <keypad_sm+0x1c2c>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	fab3 f383 	clz	r3, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	7013      	strb	r3, [r2, #0]
 8006774:	f7fe ba74 	b.w	8004c60 <keypad_sm+0x58>
}
 8006778:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_keypad('z');
 800677c:	f7fb b84e 	b.w	800181c <update_keypad.constprop.0>
	float temp = translate_keypad();
 8006780:	f7fd fd7c 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006784:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006786:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006788:	f7fa fcc6 	bl	8001118 <__aeabi_fcmpge>
 800678c:	b158      	cbz	r0, 80067a6 <keypad_sm+0x1b9e>
 800678e:	4628      	mov	r0, r5
 8006790:	4929      	ldr	r1, [pc, #164]	; (8006838 <keypad_sm+0x1c30>)
 8006792:	f7fa fcb7 	bl	8001104 <__aeabi_fcmple>
 8006796:	b130      	cbz	r0, 80067a6 <keypad_sm+0x1b9e>
					volt_set_main_old = volt_set_main;
 8006798:	4d28      	ldr	r5, [pc, #160]	; (800683c <keypad_sm+0x1c34>)
 800679a:	4b29      	ldr	r3, [pc, #164]	; (8006840 <keypad_sm+0x1c38>)
 800679c:	682a      	ldr	r2, [r5, #0]
 800679e:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 80067a0:	f7fd fd6c 	bl	800427c <translate_keypad>
 80067a4:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 80067a6:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80067a8:	4d1d      	ldr	r5, [pc, #116]	; (8006820 <keypad_sm+0x1c18>)
				kpenum = WAIT;
 80067aa:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80067ac:	f995 2000 	ldrsb.w	r2, [r5]
 80067b0:	2a03      	cmp	r2, #3
 80067b2:	f73e aa55 	bgt.w	8004c60 <keypad_sm+0x58>
 80067b6:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <keypad_sm+0x1c1c>)
 80067b8:	4e1b      	ldr	r6, [pc, #108]	; (8006828 <keypad_sm+0x1c20>)
 80067ba:	3201      	adds	r2, #1
 80067bc:	4688      	mov	r8, r1
			keypadarr[0] = num;
 80067be:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80067c2:	f893 e004 	ldrb.w	lr, [r3, #4]
 80067c6:	f896 c000 	ldrb.w	ip, [r6]
 80067ca:	78df      	ldrb	r7, [r3, #3]
 80067cc:	789c      	ldrb	r4, [r3, #2]
 80067ce:	7858      	ldrb	r0, [r3, #1]
 80067d0:	7819      	ldrb	r1, [r3, #0]
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	e003      	b.n	80067de <keypad_sm+0x1bd6>
	while(keypaditerator < 4){
 80067d6:	4627      	mov	r7, r4
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80067dc:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80067de:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80067e0:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 80067e4:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80067e6:	bf04      	itt	eq
 80067e8:	f04f 0c00 	moveq.w	ip, #0
 80067ec:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 80067f0:	2a05      	cmp	r2, #5
 80067f2:	46be      	mov	lr, r7
 80067f4:	d1ef      	bne.n	80067d6 <keypad_sm+0x1bce>
 80067f6:	711f      	strb	r7, [r3, #4]
 80067f8:	70dc      	strb	r4, [r3, #3]
 80067fa:	7098      	strb	r0, [r3, #2]
 80067fc:	7059      	strb	r1, [r3, #1]
 80067fe:	f883 9000 	strb.w	r9, [r3]
 8006802:	2304      	movs	r3, #4
 8006804:	702b      	strb	r3, [r5, #0]
 8006806:	f1b8 0f00 	cmp.w	r8, #0
 800680a:	f43e aa29 	beq.w	8004c60 <keypad_sm+0x58>
 800680e:	f886 c000 	strb.w	ip, [r6]
 8006812:	f7fe ba25 	b.w	8004c60 <keypad_sm+0x58>
 8006816:	bf00      	nop
 8006818:	50b0f27c 	.word	0x50b0f27c
 800681c:	3fe99a6b 	.word	0x3fe99a6b
 8006820:	20000015 	.word	0x20000015
 8006824:	20000010 	.word	0x20000010
 8006828:	20000758 	.word	0x20000758
 800682c:	200003e8 	.word	0x200003e8
 8006830:	200003f4 	.word	0x200003f4
 8006834:	200003f5 	.word	0x200003f5
 8006838:	41400000 	.word	0x41400000
 800683c:	20000a80 	.word	0x20000a80
 8006840:	20000a84 	.word	0x20000a84
				kpenum = WAIT;
 8006844:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006846:	4db3      	ldr	r5, [pc, #716]	; (8006b14 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 8006848:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800684a:	f995 2000 	ldrsb.w	r2, [r5]
 800684e:	2a03      	cmp	r2, #3
 8006850:	f73e aa06 	bgt.w	8004c60 <keypad_sm+0x58>
 8006854:	4bb0      	ldr	r3, [pc, #704]	; (8006b18 <keypad_sm+0x1f10>)
 8006856:	4eb1      	ldr	r6, [pc, #708]	; (8006b1c <keypad_sm+0x1f14>)
 8006858:	3201      	adds	r2, #1
 800685a:	4688      	mov	r8, r1
			keypadarr[0] = num;
 800685c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006860:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006864:	f896 c000 	ldrb.w	ip, [r6]
 8006868:	78df      	ldrb	r7, [r3, #3]
 800686a:	789c      	ldrb	r4, [r3, #2]
 800686c:	7858      	ldrb	r0, [r3, #1]
 800686e:	7819      	ldrb	r1, [r3, #0]
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	e003      	b.n	800687c <keypad_sm+0x1c74>
	while(keypaditerator < 4){
 8006874:	4627      	mov	r7, r4
 8006876:	4604      	mov	r4, r0
 8006878:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800687a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800687c:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800687e:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006882:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006884:	bf04      	itt	eq
 8006886:	f04f 0c00 	moveq.w	ip, #0
 800688a:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 800688e:	2a05      	cmp	r2, #5
 8006890:	46be      	mov	lr, r7
 8006892:	d1ef      	bne.n	8006874 <keypad_sm+0x1c6c>
 8006894:	711f      	strb	r7, [r3, #4]
 8006896:	70dc      	strb	r4, [r3, #3]
 8006898:	7098      	strb	r0, [r3, #2]
 800689a:	7059      	strb	r1, [r3, #1]
 800689c:	f883 9000 	strb.w	r9, [r3]
 80068a0:	2304      	movs	r3, #4
 80068a2:	702b      	strb	r3, [r5, #0]
 80068a4:	f1b8 0f00 	cmp.w	r8, #0
 80068a8:	f43e a9da 	beq.w	8004c60 <keypad_sm+0x58>
 80068ac:	f886 c000 	strb.w	ip, [r6]
 80068b0:	f7fe b9d6 	b.w	8004c60 <keypad_sm+0x58>
		if(keypaditerator < keypadlength-1){
 80068b4:	4d97      	ldr	r5, [pc, #604]	; (8006b14 <keypad_sm+0x1f0c>)
 80068b6:	f995 2000 	ldrsb.w	r2, [r5]
 80068ba:	2a03      	cmp	r2, #3
 80068bc:	f73e a9d0 	bgt.w	8004c60 <keypad_sm+0x58>
			if(keypadarr[4] == '.'){
 80068c0:	4b95      	ldr	r3, [pc, #596]	; (8006b18 <keypad_sm+0x1f10>)
 80068c2:	7919      	ldrb	r1, [r3, #4]
 80068c4:	292e      	cmp	r1, #46	; 0x2e
 80068c6:	d102      	bne.n	80068ce <keypad_sm+0x1cc6>
				keypaddecimal = 0;
 80068c8:	2000      	movs	r0, #0
 80068ca:	4994      	ldr	r1, [pc, #592]	; (8006b1c <keypad_sm+0x1f14>)
 80068cc:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80068ce:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80068d0:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 80068d2:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 80068d4:	7118      	strb	r0, [r3, #4]
 80068d6:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 80068d8:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80068da:	70d8      	strb	r0, [r3, #3]
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 80068e0:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 80068e2:	7098      	strb	r0, [r3, #2]
 80068e4:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 80068e6:	f7fe b9bb 	b.w	8004c60 <keypad_sm+0x58>
	float temp = translate_keypad();
 80068ea:	f7fd fcc7 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80068ee:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80068f0:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80068f2:	f7fa fc11 	bl	8001118 <__aeabi_fcmpge>
 80068f6:	b130      	cbz	r0, 8006906 <keypad_sm+0x1cfe>
 80068f8:	4628      	mov	r0, r5
 80068fa:	4989      	ldr	r1, [pc, #548]	; (8006b20 <keypad_sm+0x1f18>)
 80068fc:	f7fa fc02 	bl	8001104 <__aeabi_fcmple>
 8006900:	b108      	cbz	r0, 8006906 <keypad_sm+0x1cfe>
					volt_set_aux = translate_keypad();
 8006902:	4b88      	ldr	r3, [pc, #544]	; (8006b24 <keypad_sm+0x1f1c>)
 8006904:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006906:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006908:	4d82      	ldr	r5, [pc, #520]	; (8006b14 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 800690a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800690c:	f995 2000 	ldrsb.w	r2, [r5]
 8006910:	2a03      	cmp	r2, #3
 8006912:	f73e ac12 	bgt.w	800513a <keypad_sm+0x532>
 8006916:	4b80      	ldr	r3, [pc, #512]	; (8006b18 <keypad_sm+0x1f10>)
 8006918:	4e80      	ldr	r6, [pc, #512]	; (8006b1c <keypad_sm+0x1f14>)
 800691a:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800691c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006920:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006924:	f896 8000 	ldrb.w	r8, [r6]
 8006928:	f893 e003 	ldrb.w	lr, [r3, #3]
 800692c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006930:	785c      	ldrb	r4, [r3, #1]
 8006932:	7818      	ldrb	r0, [r3, #0]
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	e003      	b.n	8006940 <keypad_sm+0x1d38>
	while(keypaditerator < 4){
 8006938:	46e6      	mov	lr, ip
 800693a:	46a4      	mov	ip, r4
 800693c:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800693e:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006940:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006942:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006946:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006948:	bf04      	itt	eq
 800694a:	2101      	moveq	r1, #1
 800694c:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8006950:	2a05      	cmp	r2, #5
 8006952:	46f1      	mov	r9, lr
 8006954:	d1f0      	bne.n	8006938 <keypad_sm+0x1d30>
 8006956:	f883 e004 	strb.w	lr, [r3, #4]
 800695a:	f883 c003 	strb.w	ip, [r3, #3]
 800695e:	709c      	strb	r4, [r3, #2]
 8006960:	7058      	strb	r0, [r3, #1]
 8006962:	f883 a000 	strb.w	sl, [r3]
 8006966:	2304      	movs	r3, #4
 8006968:	702b      	strb	r3, [r5, #0]
 800696a:	2900      	cmp	r1, #0
 800696c:	f43e abe5 	beq.w	800513a <keypad_sm+0x532>
 8006970:	f886 8000 	strb.w	r8, [r6]
 8006974:	f7fe bbe1 	b.w	800513a <keypad_sm+0x532>
 8006978:	4d66      	ldr	r5, [pc, #408]	; (8006b14 <keypad_sm+0x1f0c>)
 800697a:	f995 2000 	ldrsb.w	r2, [r5]
 800697e:	2a03      	cmp	r2, #3
 8006980:	f73e abdb 	bgt.w	800513a <keypad_sm+0x532>
 8006984:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <keypad_sm+0x1f10>)
 8006986:	4e65      	ldr	r6, [pc, #404]	; (8006b1c <keypad_sm+0x1f14>)
 8006988:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800698c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006990:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006994:	f896 e000 	ldrb.w	lr, [r6]
 8006998:	f893 c003 	ldrb.w	ip, [r3, #3]
 800699c:	789c      	ldrb	r4, [r3, #2]
 800699e:	7858      	ldrb	r0, [r3, #1]
 80069a0:	7819      	ldrb	r1, [r3, #0]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	e003      	b.n	80069ae <keypad_sm+0x1da6>
	while(keypaditerator < 4){
 80069a6:	46a4      	mov	ip, r4
 80069a8:	4604      	mov	r4, r0
 80069aa:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80069ac:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80069ae:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80069b0:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80069b4:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80069b6:	bf04      	itt	eq
 80069b8:	f04f 0801 	moveq.w	r8, #1
 80069bc:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80069c0:	2a04      	cmp	r2, #4
 80069c2:	46e1      	mov	r9, ip
 80069c4:	d1ef      	bne.n	80069a6 <keypad_sm+0x1d9e>
 80069c6:	702a      	strb	r2, [r5, #0]
 80069c8:	f883 c004 	strb.w	ip, [r3, #4]
 80069cc:	70dc      	strb	r4, [r3, #3]
 80069ce:	7098      	strb	r0, [r3, #2]
 80069d0:	7059      	strb	r1, [r3, #1]
 80069d2:	f883 a000 	strb.w	sl, [r3]
 80069d6:	f1b8 0f00 	cmp.w	r8, #0
 80069da:	f43e abae 	beq.w	800513a <keypad_sm+0x532>
 80069de:	f886 e000 	strb.w	lr, [r6]
 80069e2:	f7fe bbaa 	b.w	800513a <keypad_sm+0x532>
	float temp = translate_keypad();
 80069e6:	f7fd fc49 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80069ea:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80069ec:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80069ee:	f7fa fb93 	bl	8001118 <__aeabi_fcmpge>
 80069f2:	b130      	cbz	r0, 8006a02 <keypad_sm+0x1dfa>
 80069f4:	4628      	mov	r0, r5
 80069f6:	494a      	ldr	r1, [pc, #296]	; (8006b20 <keypad_sm+0x1f18>)
 80069f8:	f7fa fb84 	bl	8001104 <__aeabi_fcmple>
 80069fc:	b108      	cbz	r0, 8006a02 <keypad_sm+0x1dfa>
					amp_set_aux = translate_keypad();
 80069fe:	4b4a      	ldr	r3, [pc, #296]	; (8006b28 <keypad_sm+0x1f20>)
 8006a00:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006a02:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006a04:	4d43      	ldr	r5, [pc, #268]	; (8006b14 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 8006a06:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006a08:	f995 2000 	ldrsb.w	r2, [r5]
 8006a0c:	2a03      	cmp	r2, #3
 8006a0e:	f73e ab94 	bgt.w	800513a <keypad_sm+0x532>
 8006a12:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <keypad_sm+0x1f10>)
 8006a14:	4e41      	ldr	r6, [pc, #260]	; (8006b1c <keypad_sm+0x1f14>)
 8006a16:	3201      	adds	r2, #1
 8006a18:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006a1a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006a1e:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006a22:	f896 9000 	ldrb.w	r9, [r6]
 8006a26:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006a2a:	789c      	ldrb	r4, [r3, #2]
 8006a2c:	7858      	ldrb	r0, [r3, #1]
 8006a2e:	7819      	ldrb	r1, [r3, #0]
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	e003      	b.n	8006a3c <keypad_sm+0x1e34>
	while(keypaditerator < 4){
 8006a34:	46a4      	mov	ip, r4
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006a3a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006a3c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006a3e:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006a42:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006a44:	bf04      	itt	eq
 8006a46:	f04f 0801 	moveq.w	r8, #1
 8006a4a:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006a4e:	2a05      	cmp	r2, #5
 8006a50:	46e6      	mov	lr, ip
 8006a52:	d1ef      	bne.n	8006a34 <keypad_sm+0x1e2c>
 8006a54:	f883 c004 	strb.w	ip, [r3, #4]
 8006a58:	70dc      	strb	r4, [r3, #3]
 8006a5a:	7098      	strb	r0, [r3, #2]
 8006a5c:	7059      	strb	r1, [r3, #1]
 8006a5e:	f883 a000 	strb.w	sl, [r3]
 8006a62:	2304      	movs	r3, #4
 8006a64:	702b      	strb	r3, [r5, #0]
 8006a66:	f1b8 0f00 	cmp.w	r8, #0
 8006a6a:	f43e ab66 	beq.w	800513a <keypad_sm+0x532>
 8006a6e:	f886 9000 	strb.w	r9, [r6]
 8006a72:	f7fe bb62 	b.w	800513a <keypad_sm+0x532>
				fill_keypad(0, volt_set_aux);
 8006a76:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <keypad_sm+0x1f1c>)
 8006a78:	2000      	movs	r0, #0
 8006a7a:	6819      	ldr	r1, [r3, #0]
 8006a7c:	f7fd fd78 	bl	8004570 <fill_keypad>
				encmode = 1;
 8006a80:	2101      	movs	r1, #1
				encpos = 0;
 8006a82:	2200      	movs	r2, #0
 8006a84:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <keypad_sm+0x1f24>)
				encmode = 1;
 8006a86:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	f7fe b8e9 	b.w	8004c60 <keypad_sm+0x58>
				if(encpos == 1){
 8006a8e:	4b27      	ldr	r3, [pc, #156]	; (8006b2c <keypad_sm+0x1f24>)
 8006a90:	f993 2000 	ldrsb.w	r2, [r3]
 8006a94:	2a01      	cmp	r2, #1
 8006a96:	f000 82de 	beq.w	8007056 <keypad_sm+0x244e>
				else if(encpos < 4){
 8006a9a:	2a03      	cmp	r2, #3
 8006a9c:	f300 82d7 	bgt.w	800704e <keypad_sm+0x2446>
					encpos++;
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	f7fe b8dc 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8006aa8:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006aaa:	4d1a      	ldr	r5, [pc, #104]	; (8006b14 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 8006aac:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006aae:	f995 2000 	ldrsb.w	r2, [r5]
 8006ab2:	2a03      	cmp	r2, #3
 8006ab4:	f73e ab41 	bgt.w	800513a <keypad_sm+0x532>
 8006ab8:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <keypad_sm+0x1f10>)
 8006aba:	4e18      	ldr	r6, [pc, #96]	; (8006b1c <keypad_sm+0x1f14>)
			keypadarr[0] = num;
 8006abc:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006ac0:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006ac4:	7830      	ldrb	r0, [r6, #0]
 8006ac6:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006aca:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006ace:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006ad2:	781c      	ldrb	r4, [r3, #0]
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	e003      	b.n	8006ae0 <keypad_sm+0x1ed8>
	while(keypaditerator < 4){
 8006ad8:	46f0      	mov	r8, lr
 8006ada:	46e6      	mov	lr, ip
 8006adc:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8006ade:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006ae0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006ae2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006ae6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006ae8:	bf04      	itt	eq
 8006aea:	2101      	moveq	r1, #1
 8006aec:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 8006aee:	2a04      	cmp	r2, #4
 8006af0:	46c1      	mov	r9, r8
 8006af2:	d1f1      	bne.n	8006ad8 <keypad_sm+0x1ed0>
 8006af4:	702a      	strb	r2, [r5, #0]
 8006af6:	f883 8004 	strb.w	r8, [r3, #4]
 8006afa:	f883 e003 	strb.w	lr, [r3, #3]
 8006afe:	f883 c002 	strb.w	ip, [r3, #2]
 8006b02:	705c      	strb	r4, [r3, #1]
 8006b04:	f883 a000 	strb.w	sl, [r3]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	f43e ab16 	beq.w	800513a <keypad_sm+0x532>
 8006b0e:	7030      	strb	r0, [r6, #0]
 8006b10:	f7fe bb13 	b.w	800513a <keypad_sm+0x532>
 8006b14:	20000015 	.word	0x20000015
 8006b18:	20000010 	.word	0x20000010
 8006b1c:	20000758 	.word	0x20000758
 8006b20:	41400000 	.word	0x41400000
 8006b24:	20000a7c 	.word	0x20000a7c
 8006b28:	200003e8 	.word	0x200003e8
 8006b2c:	20000401 	.word	0x20000401
	float temp = translate_keypad();
 8006b30:	f7fd fba4 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b34:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006b36:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b38:	f7fa faee 	bl	8001118 <__aeabi_fcmpge>
 8006b3c:	b190      	cbz	r0, 8006b64 <keypad_sm+0x1f5c>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f7f9 fc8a 	bl	8000458 <__aeabi_f2d>
 8006b44:	a3b6      	add	r3, pc, #728	; (adr r3, 8006e20 <keypad_sm+0x2218>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 ff59 	bl	8000a00 <__aeabi_dcmple>
 8006b4e:	b148      	cbz	r0, 8006b64 <keypad_sm+0x1f5c>
					amp_set_main_old = amp_set_main;
 8006b50:	4db5      	ldr	r5, [pc, #724]	; (8006e28 <keypad_sm+0x2220>)
 8006b52:	4bb6      	ldr	r3, [pc, #728]	; (8006e2c <keypad_sm+0x2224>)
 8006b54:	682a      	ldr	r2, [r5, #0]
 8006b56:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006b58:	f7fd fb90 	bl	800427c <translate_keypad>
 8006b5c:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006b5e:	6828      	ldr	r0, [r5, #0]
 8006b60:	f7fa ff0a 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006b64:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006b66:	4db2      	ldr	r5, [pc, #712]	; (8006e30 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006b68:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006b6a:	f995 2000 	ldrsb.w	r2, [r5]
 8006b6e:	2a03      	cmp	r2, #3
 8006b70:	f73e a876 	bgt.w	8004c60 <keypad_sm+0x58>
 8006b74:	4baf      	ldr	r3, [pc, #700]	; (8006e34 <keypad_sm+0x222c>)
 8006b76:	4eb0      	ldr	r6, [pc, #704]	; (8006e38 <keypad_sm+0x2230>)
			keypadarr[0] = num;
 8006b78:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006b7c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006b80:	7830      	ldrb	r0, [r6, #0]
 8006b82:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006b86:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006b8a:	785f      	ldrb	r7, [r3, #1]
 8006b8c:	781c      	ldrb	r4, [r3, #0]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	e003      	b.n	8006b9a <keypad_sm+0x1f92>
	while(keypaditerator < 4){
 8006b92:	46e6      	mov	lr, ip
 8006b94:	46bc      	mov	ip, r7
 8006b96:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006b98:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006b9a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006b9c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006ba0:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006ba2:	bf04      	itt	eq
 8006ba4:	2000      	moveq	r0, #0
 8006ba6:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006ba8:	2a04      	cmp	r2, #4
 8006baa:	46f0      	mov	r8, lr
 8006bac:	d1f1      	bne.n	8006b92 <keypad_sm+0x1f8a>
 8006bae:	702a      	strb	r2, [r5, #0]
 8006bb0:	f883 e004 	strb.w	lr, [r3, #4]
 8006bb4:	f883 c003 	strb.w	ip, [r3, #3]
 8006bb8:	709f      	strb	r7, [r3, #2]
 8006bba:	705c      	strb	r4, [r3, #1]
 8006bbc:	f883 9000 	strb.w	r9, [r3]
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	f43e a84d 	beq.w	8004c60 <keypad_sm+0x58>
 8006bc6:	7030      	strb	r0, [r6, #0]
 8006bc8:	f7fe b84a 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8006bcc:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006bce:	4d98      	ldr	r5, [pc, #608]	; (8006e30 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006bd0:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006bd2:	f995 2000 	ldrsb.w	r2, [r5]
 8006bd6:	2a03      	cmp	r2, #3
 8006bd8:	f73e aaaf 	bgt.w	800513a <keypad_sm+0x532>
 8006bdc:	4b95      	ldr	r3, [pc, #596]	; (8006e34 <keypad_sm+0x222c>)
 8006bde:	4e96      	ldr	r6, [pc, #600]	; (8006e38 <keypad_sm+0x2230>)
 8006be0:	3201      	adds	r2, #1
 8006be2:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006be4:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006be8:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006bec:	f896 9000 	ldrb.w	r9, [r6]
 8006bf0:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006bf4:	789c      	ldrb	r4, [r3, #2]
 8006bf6:	7858      	ldrb	r0, [r3, #1]
 8006bf8:	7819      	ldrb	r1, [r3, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	e003      	b.n	8006c06 <keypad_sm+0x1ffe>
	while(keypaditerator < 4){
 8006bfe:	46a4      	mov	ip, r4
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006c04:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006c06:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c08:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006c0c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c0e:	bf04      	itt	eq
 8006c10:	f04f 0801 	moveq.w	r8, #1
 8006c14:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006c18:	2a05      	cmp	r2, #5
 8006c1a:	46e6      	mov	lr, ip
 8006c1c:	d1ef      	bne.n	8006bfe <keypad_sm+0x1ff6>
 8006c1e:	f883 c004 	strb.w	ip, [r3, #4]
 8006c22:	70dc      	strb	r4, [r3, #3]
 8006c24:	7098      	strb	r0, [r3, #2]
 8006c26:	7059      	strb	r1, [r3, #1]
 8006c28:	f883 a000 	strb.w	sl, [r3]
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	702b      	strb	r3, [r5, #0]
 8006c30:	f1b8 0f00 	cmp.w	r8, #0
 8006c34:	f43e aa81 	beq.w	800513a <keypad_sm+0x532>
 8006c38:	f886 9000 	strb.w	r9, [r6]
 8006c3c:	f7fe ba7d 	b.w	800513a <keypad_sm+0x532>
	float temp = translate_keypad();
 8006c40:	f7fd fb1c 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006c44:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006c46:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006c48:	f7fa fa66 	bl	8001118 <__aeabi_fcmpge>
 8006c4c:	b158      	cbz	r0, 8006c66 <keypad_sm+0x205e>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	497a      	ldr	r1, [pc, #488]	; (8006e3c <keypad_sm+0x2234>)
 8006c52:	f7fa fa57 	bl	8001104 <__aeabi_fcmple>
 8006c56:	b130      	cbz	r0, 8006c66 <keypad_sm+0x205e>
					volt_set_main_old = volt_set_main;
 8006c58:	4d79      	ldr	r5, [pc, #484]	; (8006e40 <keypad_sm+0x2238>)
 8006c5a:	4b7a      	ldr	r3, [pc, #488]	; (8006e44 <keypad_sm+0x223c>)
 8006c5c:	682a      	ldr	r2, [r5, #0]
 8006c5e:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006c60:	f7fd fb0c 	bl	800427c <translate_keypad>
 8006c64:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8006c66:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006c68:	4d71      	ldr	r5, [pc, #452]	; (8006e30 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006c6a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006c6c:	f995 2000 	ldrsb.w	r2, [r5]
 8006c70:	2a03      	cmp	r2, #3
 8006c72:	f73e aa62 	bgt.w	800513a <keypad_sm+0x532>
 8006c76:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <keypad_sm+0x222c>)
 8006c78:	4e6f      	ldr	r6, [pc, #444]	; (8006e38 <keypad_sm+0x2230>)
 8006c7a:	3201      	adds	r2, #1
 8006c7c:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006c7e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006c82:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006c86:	f896 9000 	ldrb.w	r9, [r6]
 8006c8a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006c8e:	789c      	ldrb	r4, [r3, #2]
 8006c90:	7858      	ldrb	r0, [r3, #1]
 8006c92:	7819      	ldrb	r1, [r3, #0]
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	e003      	b.n	8006ca0 <keypad_sm+0x2098>
	while(keypaditerator < 4){
 8006c98:	46a4      	mov	ip, r4
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006c9e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006ca0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006ca2:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006ca6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006ca8:	bf04      	itt	eq
 8006caa:	f04f 0801 	moveq.w	r8, #1
 8006cae:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006cb2:	2a05      	cmp	r2, #5
 8006cb4:	46e6      	mov	lr, ip
 8006cb6:	d1ef      	bne.n	8006c98 <keypad_sm+0x2090>
 8006cb8:	f883 c004 	strb.w	ip, [r3, #4]
 8006cbc:	70dc      	strb	r4, [r3, #3]
 8006cbe:	7098      	strb	r0, [r3, #2]
 8006cc0:	7059      	strb	r1, [r3, #1]
 8006cc2:	f883 a000 	strb.w	sl, [r3]
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	702b      	strb	r3, [r5, #0]
 8006cca:	f1b8 0f00 	cmp.w	r8, #0
 8006cce:	f43e aa34 	beq.w	800513a <keypad_sm+0x532>
 8006cd2:	f886 9000 	strb.w	r9, [r6]
 8006cd6:	f7fe ba30 	b.w	800513a <keypad_sm+0x532>
 8006cda:	4d55      	ldr	r5, [pc, #340]	; (8006e30 <keypad_sm+0x2228>)
 8006cdc:	f995 2000 	ldrsb.w	r2, [r5]
 8006ce0:	2a03      	cmp	r2, #3
 8006ce2:	f73e aa2a 	bgt.w	800513a <keypad_sm+0x532>
 8006ce6:	4b53      	ldr	r3, [pc, #332]	; (8006e34 <keypad_sm+0x222c>)
 8006ce8:	4e53      	ldr	r6, [pc, #332]	; (8006e38 <keypad_sm+0x2230>)
 8006cea:	3201      	adds	r2, #1
 8006cec:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006cf0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006cf4:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006cf8:	f896 e000 	ldrb.w	lr, [r6]
 8006cfc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006d00:	789c      	ldrb	r4, [r3, #2]
 8006d02:	7858      	ldrb	r0, [r3, #1]
 8006d04:	7819      	ldrb	r1, [r3, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	e003      	b.n	8006d12 <keypad_sm+0x210a>
	while(keypaditerator < 4){
 8006d0a:	46a4      	mov	ip, r4
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006d10:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006d12:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006d14:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006d18:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006d1a:	bf04      	itt	eq
 8006d1c:	f04f 0801 	moveq.w	r8, #1
 8006d20:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006d24:	2a05      	cmp	r2, #5
 8006d26:	46e1      	mov	r9, ip
 8006d28:	d1ef      	bne.n	8006d0a <keypad_sm+0x2102>
 8006d2a:	f883 c004 	strb.w	ip, [r3, #4]
 8006d2e:	70dc      	strb	r4, [r3, #3]
 8006d30:	7098      	strb	r0, [r3, #2]
 8006d32:	7059      	strb	r1, [r3, #1]
 8006d34:	f883 a000 	strb.w	sl, [r3]
 8006d38:	2304      	movs	r3, #4
 8006d3a:	702b      	strb	r3, [r5, #0]
 8006d3c:	f1b8 0f00 	cmp.w	r8, #0
 8006d40:	f43e a9fb 	beq.w	800513a <keypad_sm+0x532>
 8006d44:	f886 e000 	strb.w	lr, [r6]
 8006d48:	f7fe b9f7 	b.w	800513a <keypad_sm+0x532>
				kpenum = WAIT;
 8006d4c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006d4e:	4d38      	ldr	r5, [pc, #224]	; (8006e30 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006d50:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006d52:	f995 2000 	ldrsb.w	r2, [r5]
 8006d56:	2a03      	cmp	r2, #3
 8006d58:	f73d af82 	bgt.w	8004c60 <keypad_sm+0x58>
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <keypad_sm+0x222c>)
 8006d5e:	4e36      	ldr	r6, [pc, #216]	; (8006e38 <keypad_sm+0x2230>)
			keypadarr[0] = num;
 8006d60:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006d64:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006d68:	7830      	ldrb	r0, [r6, #0]
 8006d6a:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006d6e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006d72:	785f      	ldrb	r7, [r3, #1]
 8006d74:	781c      	ldrb	r4, [r3, #0]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	e003      	b.n	8006d82 <keypad_sm+0x217a>
	while(keypaditerator < 4){
 8006d7a:	46e6      	mov	lr, ip
 8006d7c:	46bc      	mov	ip, r7
 8006d7e:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006d80:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006d82:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006d84:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006d88:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006d8a:	bf04      	itt	eq
 8006d8c:	2000      	moveq	r0, #0
 8006d8e:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006d90:	2a04      	cmp	r2, #4
 8006d92:	46f0      	mov	r8, lr
 8006d94:	d1f1      	bne.n	8006d7a <keypad_sm+0x2172>
 8006d96:	702a      	strb	r2, [r5, #0]
 8006d98:	f883 e004 	strb.w	lr, [r3, #4]
 8006d9c:	f883 c003 	strb.w	ip, [r3, #3]
 8006da0:	709f      	strb	r7, [r3, #2]
 8006da2:	705c      	strb	r4, [r3, #1]
 8006da4:	f883 9000 	strb.w	r9, [r3]
 8006da8:	2900      	cmp	r1, #0
 8006daa:	f43d af59 	beq.w	8004c60 <keypad_sm+0x58>
 8006dae:	7030      	strb	r0, [r6, #0]
 8006db0:	f7fd bf56 	b.w	8004c60 <keypad_sm+0x58>
 8006db4:	4d1e      	ldr	r5, [pc, #120]	; (8006e30 <keypad_sm+0x2228>)
 8006db6:	f995 2000 	ldrsb.w	r2, [r5]
 8006dba:	2a03      	cmp	r2, #3
 8006dbc:	f73e a9bd 	bgt.w	800513a <keypad_sm+0x532>
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	; (8006e34 <keypad_sm+0x222c>)
 8006dc2:	4e1d      	ldr	r6, [pc, #116]	; (8006e38 <keypad_sm+0x2230>)
 8006dc4:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8006dc6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006dca:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006dce:	7831      	ldrb	r1, [r6, #0]
 8006dd0:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006dd4:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006dd8:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006ddc:	781c      	ldrb	r4, [r3, #0]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	e003      	b.n	8006dea <keypad_sm+0x21e2>
	while(keypaditerator < 4){
 8006de2:	46f0      	mov	r8, lr
 8006de4:	46e6      	mov	lr, ip
 8006de6:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8006de8:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006dea:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006dec:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006df0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006df2:	bf04      	itt	eq
 8006df4:	2001      	moveq	r0, #1
 8006df6:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006df8:	2a04      	cmp	r2, #4
 8006dfa:	46c1      	mov	r9, r8
 8006dfc:	d1f1      	bne.n	8006de2 <keypad_sm+0x21da>
 8006dfe:	702a      	strb	r2, [r5, #0]
 8006e00:	f883 8004 	strb.w	r8, [r3, #4]
 8006e04:	f883 e003 	strb.w	lr, [r3, #3]
 8006e08:	f883 c002 	strb.w	ip, [r3, #2]
 8006e0c:	705c      	strb	r4, [r3, #1]
 8006e0e:	f883 a000 	strb.w	sl, [r3]
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f43e a991 	beq.w	800513a <keypad_sm+0x532>
 8006e18:	7031      	strb	r1, [r6, #0]
 8006e1a:	f7fe b98e 	b.w	800513a <keypad_sm+0x532>
 8006e1e:	bf00      	nop
 8006e20:	50b0f27c 	.word	0x50b0f27c
 8006e24:	3fe99a6b 	.word	0x3fe99a6b
 8006e28:	200003ec 	.word	0x200003ec
 8006e2c:	200003f0 	.word	0x200003f0
 8006e30:	20000015 	.word	0x20000015
 8006e34:	20000010 	.word	0x20000010
 8006e38:	20000758 	.word	0x20000758
 8006e3c:	41400000 	.word	0x41400000
 8006e40:	20000a80 	.word	0x20000a80
 8006e44:	20000a84 	.word	0x20000a84
	float temp = translate_keypad();
 8006e48:	f7fd fa18 	bl	800427c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006e4c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006e4e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006e50:	f7fa f962 	bl	8001118 <__aeabi_fcmpge>
 8006e54:	b170      	cbz	r0, 8006e74 <keypad_sm+0x226c>
 8006e56:	4628      	mov	r0, r5
 8006e58:	49c2      	ldr	r1, [pc, #776]	; (8007164 <keypad_sm+0x255c>)
 8006e5a:	f7fa f953 	bl	8001104 <__aeabi_fcmple>
 8006e5e:	b148      	cbz	r0, 8006e74 <keypad_sm+0x226c>
					amp_set_main_old = amp_set_main;
 8006e60:	4dc1      	ldr	r5, [pc, #772]	; (8007168 <keypad_sm+0x2560>)
 8006e62:	4bc2      	ldr	r3, [pc, #776]	; (800716c <keypad_sm+0x2564>)
 8006e64:	682a      	ldr	r2, [r5, #0]
 8006e66:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006e68:	f7fd fa08 	bl	800427c <translate_keypad>
 8006e6c:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006e6e:	6828      	ldr	r0, [r5, #0]
 8006e70:	f7fa fd82 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006e74:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006e76:	4dbe      	ldr	r5, [pc, #760]	; (8007170 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8006e78:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006e7a:	f995 2000 	ldrsb.w	r2, [r5]
 8006e7e:	2a03      	cmp	r2, #3
 8006e80:	f73e a95b 	bgt.w	800513a <keypad_sm+0x532>
 8006e84:	4bbb      	ldr	r3, [pc, #748]	; (8007174 <keypad_sm+0x256c>)
 8006e86:	4ebc      	ldr	r6, [pc, #752]	; (8007178 <keypad_sm+0x2570>)
 8006e88:	3201      	adds	r2, #1
 8006e8a:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006e8c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006e90:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006e94:	f896 9000 	ldrb.w	r9, [r6]
 8006e98:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006e9c:	789c      	ldrb	r4, [r3, #2]
 8006e9e:	7858      	ldrb	r0, [r3, #1]
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	e003      	b.n	8006eae <keypad_sm+0x22a6>
	while(keypaditerator < 4){
 8006ea6:	46a4      	mov	ip, r4
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006eac:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006eae:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006eb0:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006eb4:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006eb6:	bf04      	itt	eq
 8006eb8:	f04f 0801 	moveq.w	r8, #1
 8006ebc:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006ec0:	2a05      	cmp	r2, #5
 8006ec2:	46e6      	mov	lr, ip
 8006ec4:	d1ef      	bne.n	8006ea6 <keypad_sm+0x229e>
 8006ec6:	f883 c004 	strb.w	ip, [r3, #4]
 8006eca:	70dc      	strb	r4, [r3, #3]
 8006ecc:	7098      	strb	r0, [r3, #2]
 8006ece:	7059      	strb	r1, [r3, #1]
 8006ed0:	f883 a000 	strb.w	sl, [r3]
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	702b      	strb	r3, [r5, #0]
 8006ed8:	f1b8 0f00 	cmp.w	r8, #0
 8006edc:	f43e a92d 	beq.w	800513a <keypad_sm+0x532>
 8006ee0:	f886 9000 	strb.w	r9, [r6]
 8006ee4:	f7fe b929 	b.w	800513a <keypad_sm+0x532>
				dec_arr_v(encpos);
 8006ee8:	4ba4      	ldr	r3, [pc, #656]	; (800717c <keypad_sm+0x2574>)
 8006eea:	f993 0000 	ldrsb.w	r0, [r3]
 8006eee:	f7fd fd63 	bl	80049b8 <dec_arr_v>
				volt_set_aux = translate_keypad();
 8006ef2:	f7fd f9c3 	bl	800427c <translate_keypad>
 8006ef6:	4aa2      	ldr	r2, [pc, #648]	; (8007180 <keypad_sm+0x2578>)
 8006ef8:	6010      	str	r0, [r2, #0]
 8006efa:	f7fd beb1 	b.w	8004c60 <keypad_sm+0x58>
				fill_keypad(1, amp_set_aux);
 8006efe:	4ba1      	ldr	r3, [pc, #644]	; (8007184 <keypad_sm+0x257c>)
 8006f00:	2001      	movs	r0, #1
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	f7fd fb34 	bl	8004570 <fill_keypad>
				encmode = 1;
 8006f08:	2101      	movs	r1, #1
				encpos = 0;
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	4b9b      	ldr	r3, [pc, #620]	; (800717c <keypad_sm+0x2574>)
				encmode = 1;
 8006f0e:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	f7fd bea5 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8006f16:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006f18:	4d95      	ldr	r5, [pc, #596]	; (8007170 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8006f1a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006f1c:	f995 2000 	ldrsb.w	r2, [r5]
 8006f20:	2a03      	cmp	r2, #3
 8006f22:	f73d ae9d 	bgt.w	8004c60 <keypad_sm+0x58>
 8006f26:	4b93      	ldr	r3, [pc, #588]	; (8007174 <keypad_sm+0x256c>)
 8006f28:	4e93      	ldr	r6, [pc, #588]	; (8007178 <keypad_sm+0x2570>)
 8006f2a:	3201      	adds	r2, #1
 8006f2c:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006f2e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006f32:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006f36:	7831      	ldrb	r1, [r6, #0]
 8006f38:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006f3c:	789f      	ldrb	r7, [r3, #2]
 8006f3e:	785c      	ldrb	r4, [r3, #1]
 8006f40:	7818      	ldrb	r0, [r3, #0]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	e003      	b.n	8006f4e <keypad_sm+0x2346>
	while(keypaditerator < 4){
 8006f46:	46bc      	mov	ip, r7
 8006f48:	4627      	mov	r7, r4
 8006f4a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006f4c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006f4e:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006f50:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006f54:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006f56:	bf04      	itt	eq
 8006f58:	2100      	moveq	r1, #0
 8006f5a:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006f5e:	2a05      	cmp	r2, #5
 8006f60:	46e6      	mov	lr, ip
 8006f62:	d1f0      	bne.n	8006f46 <keypad_sm+0x233e>
 8006f64:	f883 c004 	strb.w	ip, [r3, #4]
 8006f68:	70df      	strb	r7, [r3, #3]
 8006f6a:	709c      	strb	r4, [r3, #2]
 8006f6c:	7058      	strb	r0, [r3, #1]
 8006f6e:	f883 9000 	strb.w	r9, [r3]
 8006f72:	2304      	movs	r3, #4
 8006f74:	702b      	strb	r3, [r5, #0]
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	f43d ae71 	beq.w	8004c60 <keypad_sm+0x58>
 8006f7e:	7031      	strb	r1, [r6, #0]
 8006f80:	f7fd be6e 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 8006f84:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006f86:	4d7a      	ldr	r5, [pc, #488]	; (8007170 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8006f88:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006f8a:	f995 2000 	ldrsb.w	r2, [r5]
 8006f8e:	2a03      	cmp	r2, #3
 8006f90:	f73e a8d3 	bgt.w	800513a <keypad_sm+0x532>
 8006f94:	4b77      	ldr	r3, [pc, #476]	; (8007174 <keypad_sm+0x256c>)
 8006f96:	4e78      	ldr	r6, [pc, #480]	; (8007178 <keypad_sm+0x2570>)
 8006f98:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006f9a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006f9e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006fa2:	7831      	ldrb	r1, [r6, #0]
 8006fa4:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006fa8:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006fac:	785c      	ldrb	r4, [r3, #1]
 8006fae:	7818      	ldrb	r0, [r3, #0]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	e003      	b.n	8006fbc <keypad_sm+0x23b4>
	while(keypaditerator < 4){
 8006fb4:	46e6      	mov	lr, ip
 8006fb6:	46a4      	mov	ip, r4
 8006fb8:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006fba:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006fbc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006fbe:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006fc2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006fc4:	bf04      	itt	eq
 8006fc6:	f04f 0901 	moveq.w	r9, #1
 8006fca:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006fcc:	2a04      	cmp	r2, #4
 8006fce:	46f0      	mov	r8, lr
 8006fd0:	d1f0      	bne.n	8006fb4 <keypad_sm+0x23ac>
 8006fd2:	702a      	strb	r2, [r5, #0]
 8006fd4:	f883 e004 	strb.w	lr, [r3, #4]
 8006fd8:	f883 c003 	strb.w	ip, [r3, #3]
 8006fdc:	709c      	strb	r4, [r3, #2]
 8006fde:	7058      	strb	r0, [r3, #1]
 8006fe0:	f883 a000 	strb.w	sl, [r3]
 8006fe4:	f1b9 0f00 	cmp.w	r9, #0
 8006fe8:	f43e a8a7 	beq.w	800513a <keypad_sm+0x532>
 8006fec:	7031      	strb	r1, [r6, #0]
 8006fee:	f7fe b8a4 	b.w	800513a <keypad_sm+0x532>
				if(encpos == 0){
 8006ff2:	4b62      	ldr	r3, [pc, #392]	; (800717c <keypad_sm+0x2574>)
 8006ff4:	f993 2000 	ldrsb.w	r2, [r3]
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	d067      	beq.n	80070cc <keypad_sm+0x24c4>
				else if(encpos < 4){
 8006ffc:	2a03      	cmp	r2, #3
 8006ffe:	dc26      	bgt.n	800704e <keypad_sm+0x2446>
					encpos++;
 8007000:	3201      	adds	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	f7fd be2c 	b.w	8004c60 <keypad_sm+0x58>
				if(encpos == 1){
 8007008:	4b5c      	ldr	r3, [pc, #368]	; (800717c <keypad_sm+0x2574>)
 800700a:	f993 2000 	ldrsb.w	r2, [r3]
 800700e:	2a01      	cmp	r2, #1
 8007010:	d021      	beq.n	8007056 <keypad_sm+0x244e>
				else if(encpos < 4){
 8007012:	2a03      	cmp	r2, #3
 8007014:	dc1b      	bgt.n	800704e <keypad_sm+0x2446>
					encpos++;
 8007016:	3201      	adds	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	f7fd be21 	b.w	8004c60 <keypad_sm+0x58>
				fill_keypad(0, volt_set_main);
 800701e:	4b5a      	ldr	r3, [pc, #360]	; (8007188 <keypad_sm+0x2580>)
 8007020:	2000      	movs	r0, #0
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	f7fd faa4 	bl	8004570 <fill_keypad>
				encmode = 1;
 8007028:	2101      	movs	r1, #1
				encpos = 0;
 800702a:	2200      	movs	r2, #0
 800702c:	4b53      	ldr	r3, [pc, #332]	; (800717c <keypad_sm+0x2574>)
				encmode = 1;
 800702e:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	f7fd be15 	b.w	8004c60 <keypad_sm+0x58>
				fill_keypad(1, amp_set_main);
 8007036:	4b4c      	ldr	r3, [pc, #304]	; (8007168 <keypad_sm+0x2560>)
 8007038:	2001      	movs	r0, #1
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	f7fd fa98 	bl	8004570 <fill_keypad>
				encmode = 1;
 8007040:	2101      	movs	r1, #1
				encpos = 0;
 8007042:	2200      	movs	r2, #0
 8007044:	4b4d      	ldr	r3, [pc, #308]	; (800717c <keypad_sm+0x2574>)
				encmode = 1;
 8007046:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	f7fd be09 	b.w	8004c60 <keypad_sm+0x58>
					encpos = 0;
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	f7fd be05 	b.w	8004c60 <keypad_sm+0x58>
					encpos++;
 8007056:	2203      	movs	r2, #3
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	f7fd be01 	b.w	8004c60 <keypad_sm+0x58>
				kpenum = WAIT;
 800705e:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8007060:	4d43      	ldr	r5, [pc, #268]	; (8007170 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8007062:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8007064:	f995 2000 	ldrsb.w	r2, [r5]
 8007068:	2a03      	cmp	r2, #3
 800706a:	f73e a866 	bgt.w	800513a <keypad_sm+0x532>
 800706e:	4b41      	ldr	r3, [pc, #260]	; (8007174 <keypad_sm+0x256c>)
 8007070:	4e41      	ldr	r6, [pc, #260]	; (8007178 <keypad_sm+0x2570>)
 8007072:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8007074:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8007078:	f893 8004 	ldrb.w	r8, [r3, #4]
 800707c:	7831      	ldrb	r1, [r6, #0]
 800707e:	f893 e003 	ldrb.w	lr, [r3, #3]
 8007082:	f893 c002 	ldrb.w	ip, [r3, #2]
 8007086:	785c      	ldrb	r4, [r3, #1]
 8007088:	7818      	ldrb	r0, [r3, #0]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	e003      	b.n	8007096 <keypad_sm+0x248e>
	while(keypaditerator < 4){
 800708e:	46e6      	mov	lr, ip
 8007090:	46a4      	mov	ip, r4
 8007092:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8007094:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8007096:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8007098:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800709c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800709e:	bf04      	itt	eq
 80070a0:	f04f 0901 	moveq.w	r9, #1
 80070a4:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 80070a6:	2a04      	cmp	r2, #4
 80070a8:	46f0      	mov	r8, lr
 80070aa:	d1f0      	bne.n	800708e <keypad_sm+0x2486>
 80070ac:	702a      	strb	r2, [r5, #0]
 80070ae:	f883 e004 	strb.w	lr, [r3, #4]
 80070b2:	f883 c003 	strb.w	ip, [r3, #3]
 80070b6:	709c      	strb	r4, [r3, #2]
 80070b8:	7058      	strb	r0, [r3, #1]
 80070ba:	f883 a000 	strb.w	sl, [r3]
 80070be:	f1b9 0f00 	cmp.w	r9, #0
 80070c2:	f43e a83a 	beq.w	800513a <keypad_sm+0x532>
 80070c6:	7031      	strb	r1, [r6, #0]
 80070c8:	f7fe b837 	b.w	800513a <keypad_sm+0x532>
					encpos++;
 80070cc:	2202      	movs	r2, #2
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	f7fd bdc6 	b.w	8004c60 <keypad_sm+0x58>
				chstat_aux_tx = !chstat_aux_rx;
 80070d4:	4b2d      	ldr	r3, [pc, #180]	; (800718c <keypad_sm+0x2584>)
 80070d6:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <keypad_sm+0x2588>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	fab3 f383 	clz	r3, r3
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	7013      	strb	r3, [r2, #0]
 80070e2:	f7fd bdbd 	b.w	8004c60 <keypad_sm+0x58>
				inc_arr_a(encpos);
 80070e6:	4b25      	ldr	r3, [pc, #148]	; (800717c <keypad_sm+0x2574>)
				amp_set_main_old = amp_set_main;
 80070e8:	4c1f      	ldr	r4, [pc, #124]	; (8007168 <keypad_sm+0x2560>)
				inc_arr_a(encpos);
 80070ea:	f993 0000 	ldrsb.w	r0, [r3]
 80070ee:	f7fd fbd9 	bl	80048a4 <inc_arr_a>
				amp_set_main_old = amp_set_main;
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	4b1d      	ldr	r3, [pc, #116]	; (800716c <keypad_sm+0x2564>)
 80070f6:	601a      	str	r2, [r3, #0]
				amp_set_main = translate_keypad();
 80070f8:	f7fd f8c0 	bl	800427c <translate_keypad>
 80070fc:	6020      	str	r0, [r4, #0]
				update_ADC_watchdog(amp_set_main);
 80070fe:	6820      	ldr	r0, [r4, #0]
}
 8007100:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_ADC_watchdog(amp_set_main);
 8007104:	f7fa bc38 	b.w	8001978 <update_ADC_watchdog>
				dec_arr_a(encpos);
 8007108:	4b1c      	ldr	r3, [pc, #112]	; (800717c <keypad_sm+0x2574>)
				amp_set_main_old = amp_set_main;
 800710a:	4c17      	ldr	r4, [pc, #92]	; (8007168 <keypad_sm+0x2560>)
				dec_arr_a(encpos);
 800710c:	f993 0000 	ldrsb.w	r0, [r3]
 8007110:	f7fd fce6 	bl	8004ae0 <dec_arr_a>
				amp_set_main_old = amp_set_main;
 8007114:	e7ed      	b.n	80070f2 <keypad_sm+0x24ea>
				inc_arr_v(encpos);
 8007116:	4b19      	ldr	r3, [pc, #100]	; (800717c <keypad_sm+0x2574>)
				volt_set_main_old = volt_set_main;
 8007118:	4c1b      	ldr	r4, [pc, #108]	; (8007188 <keypad_sm+0x2580>)
				inc_arr_v(encpos);
 800711a:	f993 0000 	ldrsb.w	r0, [r3]
 800711e:	f7fd fb1b 	bl	8004758 <inc_arr_v>
				volt_set_main_old = volt_set_main;
 8007122:	6822      	ldr	r2, [r4, #0]
 8007124:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <keypad_sm+0x258c>)
 8007126:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 8007128:	f7fd f8a8 	bl	800427c <translate_keypad>
 800712c:	6020      	str	r0, [r4, #0]
 800712e:	f7fd bd97 	b.w	8004c60 <keypad_sm+0x58>
				dec_arr_v(encpos);
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <keypad_sm+0x2574>)
				volt_set_main_old = volt_set_main;
 8007134:	4c14      	ldr	r4, [pc, #80]	; (8007188 <keypad_sm+0x2580>)
				dec_arr_v(encpos);
 8007136:	f993 0000 	ldrsb.w	r0, [r3]
 800713a:	f7fd fc3d 	bl	80049b8 <dec_arr_v>
				volt_set_main_old = volt_set_main;
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	4b14      	ldr	r3, [pc, #80]	; (8007194 <keypad_sm+0x258c>)
 8007142:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 8007144:	f7fd f89a 	bl	800427c <translate_keypad>
 8007148:	6020      	str	r0, [r4, #0]
 800714a:	f7fd bd89 	b.w	8004c60 <keypad_sm+0x58>
				inc_arr_v(encpos);
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <keypad_sm+0x2574>)
 8007150:	f993 0000 	ldrsb.w	r0, [r3]
 8007154:	f7fd fb00 	bl	8004758 <inc_arr_v>
				volt_set_aux = translate_keypad();
 8007158:	f7fd f890 	bl	800427c <translate_keypad>
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <keypad_sm+0x2578>)
 800715e:	6010      	str	r0, [r2, #0]
 8007160:	f7fd bd7e 	b.w	8004c60 <keypad_sm+0x58>
 8007164:	41400000 	.word	0x41400000
 8007168:	200003ec 	.word	0x200003ec
 800716c:	200003f0 	.word	0x200003f0
 8007170:	20000015 	.word	0x20000015
 8007174:	20000010 	.word	0x20000010
 8007178:	20000758 	.word	0x20000758
 800717c:	20000401 	.word	0x20000401
 8007180:	20000a7c 	.word	0x20000a7c
 8007184:	200003e8 	.word	0x200003e8
 8007188:	20000a80 	.word	0x20000a80
 800718c:	200003f4 	.word	0x200003f4
 8007190:	200003f5 	.word	0x200003f5
 8007194:	20000a84 	.word	0x20000a84
				if(encpos == 0){
 8007198:	4b10      	ldr	r3, [pc, #64]	; (80071dc <keypad_sm+0x25d4>)
 800719a:	f993 2000 	ldrsb.w	r2, [r3]
 800719e:	2a00      	cmp	r2, #0
 80071a0:	d094      	beq.n	80070cc <keypad_sm+0x24c4>
				else if(encpos < 4){
 80071a2:	2a03      	cmp	r2, #3
 80071a4:	f73f af53 	bgt.w	800704e <keypad_sm+0x2446>
					encpos++;
 80071a8:	3201      	adds	r2, #1
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	f7fd bd58 	b.w	8004c60 <keypad_sm+0x58>
				inc_arr_a(encpos);
 80071b0:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <keypad_sm+0x25d4>)
 80071b2:	f993 0000 	ldrsb.w	r0, [r3]
 80071b6:	f7fd fb75 	bl	80048a4 <inc_arr_a>
				amp_set_aux = translate_keypad();
 80071ba:	f7fd f85f 	bl	800427c <translate_keypad>
 80071be:	4a08      	ldr	r2, [pc, #32]	; (80071e0 <keypad_sm+0x25d8>)
 80071c0:	6010      	str	r0, [r2, #0]
 80071c2:	f7fd bd4d 	b.w	8004c60 <keypad_sm+0x58>
				dec_arr_a(encpos);
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <keypad_sm+0x25d4>)
 80071c8:	f993 0000 	ldrsb.w	r0, [r3]
 80071cc:	f7fd fc88 	bl	8004ae0 <dec_arr_a>
				amp_set_aux = translate_keypad();
 80071d0:	f7fd f854 	bl	800427c <translate_keypad>
 80071d4:	4a02      	ldr	r2, [pc, #8]	; (80071e0 <keypad_sm+0x25d8>)
 80071d6:	6010      	str	r0, [r2, #0]
 80071d8:	f7fd bd42 	b.w	8004c60 <keypad_sm+0x58>
 80071dc:	20000401 	.word	0x20000401
 80071e0:	200003e8 	.word	0x200003e8

080071e4 <row_input>:
void row_input(void){
 80071e4:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e6:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80071e8:	4e38      	ldr	r6, [pc, #224]	; (80072cc <row_input+0xe8>)
void row_input(void){
 80071ea:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80071ec:	4630      	mov	r0, r6
 80071ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f2:	e9cd 4400 	strd	r4, r4, [sp]
 80071f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80071fa:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80071fc:	f001 fec0 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8007200:	4630      	mov	r0, r6
 8007202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007206:	f001 febb 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800720a:	4630      	mov	r0, r6
 800720c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007210:	4d2f      	ldr	r5, [pc, #188]	; (80072d0 <row_input+0xec>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8007212:	f001 feb5 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8007216:	4630      	mov	r0, r6
 8007218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800721c:	f001 feb0 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8007220:	4630      	mov	r0, r6
 8007222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007226:	f001 feab 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800722a:	4628      	mov	r0, r5
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f001 fea7 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8007232:	4628      	mov	r0, r5
 8007234:	2180      	movs	r1, #128	; 0x80
 8007236:	f001 fea3 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 800723a:	4628      	mov	r0, r5
 800723c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007240:	f001 fe9e 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8007244:	4628      	mov	r0, r5
 8007246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800724a:	f001 fe99 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800724e:	4622      	mov	r2, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007256:	f001 ff2b 	bl	80090b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800725a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800725e:	2301      	movs	r3, #1
 8007260:	e9cd 2300 	strd	r2, r3, [sp]
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007268:	4669      	mov	r1, sp
 800726a:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800726c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007270:	f001 fd9c 	bl	8008dac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007274:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8007278:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800727c:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007280:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007282:	4669      	mov	r1, sp
 8007284:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007286:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007288:	f001 fd90 	bl	8008dac <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800728c:	4628      	mov	r0, r5
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 800728e:	f44f 6580 	mov.w	r5, #1024	; 0x400
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8007292:	4622      	mov	r2, r4
 8007294:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007298:	f001 ff0a 	bl	80090b0 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 800729c:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <row_input+0xf0>)
	__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 800729e:	f44f 6000 	mov.w	r0, #2048	; 0x800
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80072a2:	615d      	str	r5, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 80072a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 80072a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 80072ac:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 80072b0:	6158      	str	r0, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 80072b2:	6159      	str	r1, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80072b4:	2028      	movs	r0, #40	; 0x28
	__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 80072b6:	615a      	str	r2, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80072b8:	4621      	mov	r1, r4
 80072ba:	4622      	mov	r2, r4
	__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 80072bc:	615d      	str	r5, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80072be:	f001 fac3 	bl	8008848 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 80072c2:	2028      	movs	r0, #40	; 0x28
 80072c4:	f001 fafe 	bl	80088c4 <HAL_NVIC_EnableIRQ>
}
 80072c8:	b006      	add	sp, #24
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	40020400 	.word	0x40020400
 80072d0:	40020800 	.word	0x40020800
 80072d4:	40010400 	.word	0x40010400

080072d8 <column_input>:
void column_input(void){
 80072d8:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072da:	2500      	movs	r5, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80072dc:	4c2c      	ldr	r4, [pc, #176]	; (8007390 <column_input+0xb8>)
void column_input(void){
 80072de:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80072e0:	4620      	mov	r0, r4
 80072e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e6:	e9cd 5500 	strd	r5, r5, [sp]
 80072ea:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80072ee:	9504      	str	r5, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80072f0:	f001 fe46 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80072f4:	4620      	mov	r0, r4
 80072f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072fa:	f001 fe41 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80072fe:	4620      	mov	r0, r4
 8007300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007304:	f001 fe3c 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007308:	4e22      	ldr	r6, [pc, #136]	; (8007394 <column_input+0xbc>)
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 800730a:	4620      	mov	r0, r4
 800730c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007310:	f001 fe36 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8007314:	4620      	mov	r0, r4
 8007316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800731a:	f001 fe31 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800731e:	4630      	mov	r0, r6
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	f001 fe2d 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8007326:	4630      	mov	r0, r6
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	f001 fe29 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 800732e:	4630      	mov	r0, r6
 8007330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007334:	f001 fe24 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8007338:	4630      	mov	r0, r6
 800733a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800733e:	f001 fe1f 	bl	8008f80 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8007342:	462a      	mov	r2, r5
 8007344:	4620      	mov	r0, r4
 8007346:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 800734a:	f001 feb1 	bl	80090b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 800734e:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8007352:	2301      	movs	r3, #1
 8007354:	e9cd 2300 	strd	r2, r3, [sp]
 8007358:	2200      	movs	r2, #0
 800735a:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800735c:	4669      	mov	r1, sp
 800735e:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007360:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007364:	f001 fd22 	bl	8008dac <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8007368:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800736c:	2300      	movs	r3, #0
 800736e:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007372:	2301      	movs	r3, #1
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007374:	4669      	mov	r1, sp
 8007376:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007378:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800737a:	f001 fd17 	bl	8008dac <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 800737e:	462a      	mov	r2, r5
 8007380:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8007384:	4620      	mov	r0, r4
 8007386:	f001 fe93 	bl	80090b0 <HAL_GPIO_WritePin>
}
 800738a:	b006      	add	sp, #24
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	bf00      	nop
 8007390:	40020400 	.word	0x40020400
 8007394:	40020800 	.word	0x40020800

08007398 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007398:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 80073a0:	d010      	beq.n	80073c4 <HAL_GPIO_EXTI_Callback+0x2c>
 80073a2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80073a6:	d00d      	beq.n	80073c4 <HAL_GPIO_EXTI_Callback+0x2c>
 80073a8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80073ac:	d00a      	beq.n	80073c4 <HAL_GPIO_EXTI_Callback+0x2c>
 80073ae:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80073b2:	d007      	beq.n	80073c4 <HAL_GPIO_EXTI_Callback+0x2c>
 80073b4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80073b8:	d004      	beq.n	80073c4 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 80073ba:	2804      	cmp	r0, #4
 80073bc:	d02c      	beq.n	8007418 <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Rot_CLK_Pin){
 80073be:	2801      	cmp	r0, #1
 80073c0:	d00f      	beq.n	80073e2 <HAL_GPIO_EXTI_Callback+0x4a>
}
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
		HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 80073c4:	2028      	movs	r0, #40	; 0x28
 80073c6:	f001 fa8b 	bl	80088e0 <HAL_NVIC_DisableIRQ>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 80073ca:	4621      	mov	r1, r4
 80073cc:	4816      	ldr	r0, [pc, #88]	; (8007428 <HAL_GPIO_EXTI_Callback+0x90>)
 80073ce:	f001 fe69 	bl	80090a4 <HAL_GPIO_ReadPin>
 80073d2:	b908      	cbnz	r0, 80073d8 <HAL_GPIO_EXTI_Callback+0x40>
			rowpin = GPIO_Pin;
 80073d4:	4b15      	ldr	r3, [pc, #84]	; (800742c <HAL_GPIO_EXTI_Callback+0x94>)
 80073d6:	601c      	str	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 80073d8:	4815      	ldr	r0, [pc, #84]	; (8007430 <HAL_GPIO_EXTI_Callback+0x98>)
}
 80073da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim2);
 80073de:	f003 bc2b 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 80073e2:	4d14      	ldr	r5, [pc, #80]	; (8007434 <HAL_GPIO_EXTI_Callback+0x9c>)
 80073e4:	782b      	ldrb	r3, [r5, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1eb      	bne.n	80073c2 <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 80073ea:	2006      	movs	r0, #6
 80073ec:	f001 fa78 	bl	80088e0 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80073f0:	4621      	mov	r1, r4
 80073f2:	480d      	ldr	r0, [pc, #52]	; (8007428 <HAL_GPIO_EXTI_Callback+0x90>)
 80073f4:	f001 fe56 	bl	80090a4 <HAL_GPIO_ReadPin>
 80073f8:	2102      	movs	r1, #2
 80073fa:	4604      	mov	r4, r0
 80073fc:	480a      	ldr	r0, [pc, #40]	; (8007428 <HAL_GPIO_EXTI_Callback+0x90>)
 80073fe:	f001 fe51 	bl	80090a4 <HAL_GPIO_ReadPin>
 8007402:	4603      	mov	r3, r0
 8007404:	429c      	cmp	r4, r3
 8007406:	bf0c      	ite	eq
 8007408:	2401      	moveq	r4, #1
 800740a:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 800740c:	480a      	ldr	r0, [pc, #40]	; (8007438 <HAL_GPIO_EXTI_Callback+0xa0>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 800740e:	702c      	strb	r4, [r5, #0]
}
 8007410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 8007414:	f003 bc10 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8007418:	2008      	movs	r0, #8
 800741a:	f001 fa61 	bl	80088e0 <HAL_NVIC_DisableIRQ>
}
 800741e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim9);
 8007422:	4806      	ldr	r0, [pc, #24]	; (800743c <HAL_GPIO_EXTI_Callback+0xa4>)
 8007424:	f003 bc08 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
 8007428:	40020400 	.word	0x40020400
 800742c:	20000018 	.word	0x20000018
 8007430:	20000614 	.word	0x20000614
 8007434:	2000096c 	.word	0x2000096c
 8007438:	20000594 	.word	0x20000594
 800743c:	200006d4 	.word	0x200006d4

08007440 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8007440:	4a7b      	ldr	r2, [pc, #492]	; (8007630 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
{
 8007442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim == &htim2){
 8007444:	4290      	cmp	r0, r2
 8007446:	d045      	beq.n	80074d4 <HAL_TIM_PeriodElapsedCallback+0x94>
	else if(htim == &htim3){
 8007448:	4a7a      	ldr	r2, [pc, #488]	; (8007634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800744a:	4290      	cmp	r0, r2
 800744c:	d05f      	beq.n	800750e <HAL_TIM_PeriodElapsedCallback+0xce>
	else if(htim == &htim4){
 800744e:	4a7a      	ldr	r2, [pc, #488]	; (8007638 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8007450:	4290      	cmp	r0, r2
 8007452:	d069      	beq.n	8007528 <HAL_TIM_PeriodElapsedCallback+0xe8>
	else if(htim == &htim9){
 8007454:	4a79      	ldr	r2, [pc, #484]	; (800763c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8007456:	4290      	cmp	r0, r2
 8007458:	d006      	beq.n	8007468 <HAL_TIM_PeriodElapsedCallback+0x28>
	else if(htim == &htim10){
 800745a:	4a79      	ldr	r2, [pc, #484]	; (8007640 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800745c:	4290      	cmp	r0, r2
 800745e:	d075      	beq.n	800754c <HAL_TIM_PeriodElapsedCallback+0x10c>
	else if(htim == &htim11){
 8007460:	4a78      	ldr	r2, [pc, #480]	; (8007644 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8007462:	4290      	cmp	r0, r2
 8007464:	d012      	beq.n	800748c <HAL_TIM_PeriodElapsedCallback+0x4c>
}
 8007466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 8007468:	f003 fc12 	bl	800ac90 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 800746c:	2073      	movs	r0, #115	; 0x73
 800746e:	f7fd fbcb 	bl	8004c08 <keypad_sm>
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 8007472:	2404      	movs	r4, #4
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 8007474:	2200      	movs	r2, #0
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 8007476:	4b74      	ldr	r3, [pc, #464]	; (8007648 <HAL_TIM_PeriodElapsedCallback+0x208>)
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 8007478:	2008      	movs	r0, #8
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 800747a:	615c      	str	r4, [r3, #20]
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 800747c:	4611      	mov	r1, r2
 800747e:	f001 f9e3 	bl	8008848 <HAL_NVIC_SetPriority>
}
 8007482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 8007486:	2008      	movs	r0, #8
 8007488:	f001 ba1c 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 800748c:	f003 fc00 	bl	800ac90 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 8007490:	4b6e      	ldr	r3, [pc, #440]	; (800764c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8007492:	7819      	ldrb	r1, [r3, #0]
 8007494:	b24a      	sxtb	r2, r1
 8007496:	2900      	cmp	r1, #0
 8007498:	f000 8088 	beq.w	80075ac <HAL_TIM_PeriodElapsedCallback+0x16c>
		else if(chstat_main == 1){
 800749c:	7819      	ldrb	r1, [r3, #0]
 800749e:	2901      	cmp	r1, #1
 80074a0:	b24a      	sxtb	r2, r1
 80074a2:	f000 8083 	beq.w	80075ac <HAL_TIM_PeriodElapsedCallback+0x16c>
		else if(chstat_main == 2){
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	f000 80b1 	beq.w	8007610 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		if(chstat_aux_rx == 0){
 80074ae:	4b68      	ldr	r3, [pc, #416]	; (8007650 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	b24a      	sxtb	r2, r1
 80074b4:	2900      	cmp	r1, #0
 80074b6:	f000 8081 	beq.w	80075bc <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_aux_rx == 1){
 80074ba:	7819      	ldrb	r1, [r3, #0]
 80074bc:	2901      	cmp	r1, #1
 80074be:	b24a      	sxtb	r2, r1
 80074c0:	d07c      	beq.n	80075bc <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_aux_rx == 2){
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	f000 80a8 	beq.w	800761a <HAL_TIM_PeriodElapsedCallback+0x1da>
}
 80074ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 80074ce:	485d      	ldr	r0, [pc, #372]	; (8007644 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80074d0:	f003 bbb2 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
		if(rowpin != -1){
 80074d4:	4f5f      	ldr	r7, [pc, #380]	; (8007654 <HAL_TIM_PeriodElapsedCallback+0x214>)
		HAL_TIM_Base_Stop_IT(&htim2);
 80074d6:	f003 fbdb 	bl	800ac90 <HAL_TIM_Base_Stop_IT>
		if(rowpin != -1){
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	d04b      	beq.n	8007578 <HAL_TIM_PeriodElapsedCallback+0x138>
			column_input();
 80074e0:	f7ff fefa 	bl	80072d8 <column_input>
			for(int i = 0; i < 4; i++){
 80074e4:	2400      	movs	r4, #0
 80074e6:	4e5c      	ldr	r6, [pc, #368]	; (8007658 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80074e8:	4d5c      	ldr	r5, [pc, #368]	; (800765c <HAL_TIM_PeriodElapsedCallback+0x21c>)
				if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 80074ea:	f835 1b02 	ldrh.w	r1, [r5], #2
 80074ee:	f856 0b04 	ldr.w	r0, [r6], #4
 80074f2:	f001 fdd7 	bl	80090a4 <HAL_GPIO_ReadPin>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d065      	beq.n	80075c6 <HAL_TIM_PeriodElapsedCallback+0x186>
			for(int i = 0; i < 4; i++){
 80074fa:	3401      	adds	r4, #1
 80074fc:	2c04      	cmp	r4, #4
 80074fe:	d1f4      	bne.n	80074ea <HAL_TIM_PeriodElapsedCallback+0xaa>
			rowpin = -1;
 8007500:	f04f 33ff 	mov.w	r3, #4294967295
 8007504:	603b      	str	r3, [r7, #0]
}
 8007506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			row_input();
 800750a:	f7ff be6b 	b.w	80071e4 <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 800750e:	f003 fbbf 	bl	800ac90 <HAL_TIM_Base_Stop_IT>
		if(timercounter < 5){
 8007512:	4a53      	ldr	r2, [pc, #332]	; (8007660 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8007514:	7813      	ldrb	r3, [r2, #0]
 8007516:	2b04      	cmp	r3, #4
 8007518:	d84d      	bhi.n	80075b6 <HAL_TIM_PeriodElapsedCallback+0x176>
			timercounter++;
 800751a:	3301      	adds	r3, #1
 800751c:	7013      	strb	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 800751e:	4845      	ldr	r0, [pc, #276]	; (8007634 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
}
 8007520:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 8007524:	f003 bb88 	b.w	800ac38 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8007528:	f003 fbb2 	bl	800ac90 <HAL_TIM_Base_Stop_IT>
		if(toggle_chstat_main){
 800752c:	4a4d      	ldr	r2, [pc, #308]	; (8007664 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800752e:	7813      	ldrb	r3, [r2, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d098      	beq.n	8007466 <HAL_TIM_PeriodElapsedCallback+0x26>
			chstat_main = !chstat_main;
 8007534:	4945      	ldr	r1, [pc, #276]	; (800764c <HAL_TIM_PeriodElapsedCallback+0x20c>)
			toggle_chstat_main = 0;
 8007536:	2500      	movs	r5, #0
			chstat_main = !chstat_main;
 8007538:	780b      	ldrb	r3, [r1, #0]
			toggle_chstat_main_tim = 1;
 800753a:	2401      	movs	r4, #1
			chstat_main = !chstat_main;
 800753c:	fab3 f383 	clz	r3, r3
			toggle_chstat_main_tim = 1;
 8007540:	4849      	ldr	r0, [pc, #292]	; (8007668 <HAL_TIM_PeriodElapsedCallback+0x228>)
			chstat_main = !chstat_main;
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	700b      	strb	r3, [r1, #0]
			toggle_chstat_main = 0;
 8007546:	7015      	strb	r5, [r2, #0]
			toggle_chstat_main_tim = 1;
 8007548:	7004      	strb	r4, [r0, #0]
}
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(rotenum == CWTURN){
 800754c:	4c47      	ldr	r4, [pc, #284]	; (800766c <HAL_TIM_PeriodElapsedCallback+0x22c>)
		HAL_TIM_Base_Stop_IT(&htim10);
 800754e:	f003 fb9f 	bl	800ac90 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 8007552:	7823      	ldrb	r3, [r4, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d053      	beq.n	8007600 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		else if(rotenum == CCWTURN){
 8007558:	2b02      	cmp	r3, #2
 800755a:	d055      	beq.n	8007608 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		rotenum = NOTURN;
 800755c:	2200      	movs	r2, #0
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_CLK_Pin);
 800755e:	2501      	movs	r5, #1
 8007560:	4b39      	ldr	r3, [pc, #228]	; (8007648 <HAL_TIM_PeriodElapsedCallback+0x208>)
		rotenum = NOTURN;
 8007562:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 8007564:	2006      	movs	r0, #6
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_CLK_Pin);
 8007566:	615d      	str	r5, [r3, #20]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 8007568:	4611      	mov	r1, r2
 800756a:	f001 f96d 	bl	8008848 <HAL_NVIC_SetPriority>
}
 800756e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8007572:	2006      	movs	r0, #6
 8007574:	f001 b9a6 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007578:	f44f 6580 	mov.w	r5, #1024	; 0x400
			__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 800757c:	f44f 6400 	mov.w	r4, #2048	; 0x800
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007580:	4b31      	ldr	r3, [pc, #196]	; (8007648 <HAL_TIM_PeriodElapsedCallback+0x208>)
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007582:	2200      	movs	r2, #0
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007584:	615d      	str	r5, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 8007586:	f44f 5080 	mov.w	r0, #4096	; 0x1000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 800758a:	615c      	str	r4, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 800758c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 8007590:	f44f 4480 	mov.w	r4, #16384	; 0x4000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 8007594:	6158      	str	r0, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 8007596:	6159      	str	r1, [r3, #20]
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007598:	2028      	movs	r0, #40	; 0x28
			__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 800759a:	615c      	str	r4, [r3, #20]
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 800759c:	4611      	mov	r1, r2
 800759e:	f001 f953 	bl	8008848 <HAL_NVIC_SetPriority>
}
 80075a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 80075a6:	2028      	movs	r0, #40	; 0x28
 80075a8:	f001 b98c 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
			HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 80075ac:	2120      	movs	r1, #32
 80075ae:	4830      	ldr	r0, [pc, #192]	; (8007670 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80075b0:	f001 fd7e 	bl	80090b0 <HAL_GPIO_WritePin>
 80075b4:	e77b      	b.n	80074ae <HAL_TIM_PeriodElapsedCallback+0x6e>
			lcd_psu_update();
 80075b6:	f7fc f96d 	bl	8003894 <lcd_psu_update>
 80075ba:	e7b0      	b.n	800751e <HAL_TIM_PeriodElapsedCallback+0xde>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 80075bc:	2110      	movs	r1, #16
 80075be:	482c      	ldr	r0, [pc, #176]	; (8007670 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80075c0:	f001 fd76 	bl	80090b0 <HAL_GPIO_WritePin>
 80075c4:	e781      	b.n	80074ca <HAL_TIM_PeriodElapsedCallback+0x8a>
						if(rowpin == row_pins[j]){
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075cc:	d011      	beq.n	80075f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d026      	beq.n	8007624 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075dc:	d026      	beq.n	800762c <HAL_TIM_PeriodElapsedCallback+0x1ec>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e4:	d020      	beq.n	8007628 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
					for(int j = 0; j < 5; j++){
 80075ec:	bf08      	it	eq
 80075ee:	2004      	moveq	r0, #4
						if(rowpin == row_pins[j]){
 80075f0:	d186      	bne.n	8007500 <HAL_TIM_PeriodElapsedCallback+0xc0>
							keypad_sm(keypad_labels[j][i]);
 80075f2:	4b20      	ldr	r3, [pc, #128]	; (8007674 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80075f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075f8:	5d00      	ldrb	r0, [r0, r4]
 80075fa:	f7fd fb05 	bl	8004c08 <keypad_sm>
							break;
 80075fe:	e77f      	b.n	8007500 <HAL_TIM_PeriodElapsedCallback+0xc0>
			keypad_sm(']');//right bracket for CW
 8007600:	205d      	movs	r0, #93	; 0x5d
 8007602:	f7fd fb01 	bl	8004c08 <keypad_sm>
 8007606:	e7a9      	b.n	800755c <HAL_TIM_PeriodElapsedCallback+0x11c>
			keypad_sm('[');//left bracket for CCW
 8007608:	205b      	movs	r0, #91	; 0x5b
 800760a:	f7fd fafd 	bl	8004c08 <keypad_sm>
 800760e:	e7a5      	b.n	800755c <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8007610:	2120      	movs	r1, #32
 8007612:	4817      	ldr	r0, [pc, #92]	; (8007670 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8007614:	f001 fd50 	bl	80090b8 <HAL_GPIO_TogglePin>
 8007618:	e749      	b.n	80074ae <HAL_TIM_PeriodElapsedCallback+0x6e>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 800761a:	2110      	movs	r1, #16
 800761c:	4814      	ldr	r0, [pc, #80]	; (8007670 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800761e:	f001 fd4b 	bl	80090b8 <HAL_GPIO_TogglePin>
 8007622:	e752      	b.n	80074ca <HAL_TIM_PeriodElapsedCallback+0x8a>
					for(int j = 0; j < 5; j++){
 8007624:	2001      	movs	r0, #1
 8007626:	e7e4      	b.n	80075f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8007628:	2003      	movs	r0, #3
 800762a:	e7e2      	b.n	80075f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 800762c:	2002      	movs	r0, #2
 800762e:	e7e0      	b.n	80075f2 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8007630:	20000614 	.word	0x20000614
 8007634:	20000654 	.word	0x20000654
 8007638:	20000694 	.word	0x20000694
 800763c:	200006d4 	.word	0x200006d4
 8007640:	20000594 	.word	0x20000594
 8007644:	200005d4 	.word	0x200005d4
 8007648:	40010400 	.word	0x40010400
 800764c:	200003f6 	.word	0x200003f6
 8007650:	200003f4 	.word	0x200003f4
 8007654:	20000018 	.word	0x20000018
 8007658:	08011a2c 	.word	0x08011a2c
 800765c:	08011a24 	.word	0x08011a24
 8007660:	200009b5 	.word	0x200009b5
 8007664:	200009b6 	.word	0x200009b6
 8007668:	2000001c 	.word	0x2000001c
 800766c:	2000096c 	.word	0x2000096c
 8007670:	40020800 	.word	0x40020800
 8007674:	08011a7c 	.word	0x08011a7c

08007678 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8007678:	4a04      	ldr	r2, [pc, #16]	; (800768c <HAL_ADC_ConvHalfCpltCallback+0x14>)
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800767c:	8810      	ldrh	r0, [r2, #0]
	adc_values_cpy[1] = adc_values[1];
 800767e:	8851      	ldrh	r1, [r2, #2]
	adc_values_cpy[2] = adc_values[2];
 8007680:	8892      	ldrh	r2, [r2, #4]
	adc_values_cpy[0] = adc_values[0];
 8007682:	8018      	strh	r0, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8007684:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8007686:	809a      	strh	r2, [r3, #4]
}
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	200003d0 	.word	0x200003d0
 8007690:	200003dc 	.word	0x200003dc

08007694 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8007694:	4a04      	ldr	r2, [pc, #16]	; (80076a8 <HAL_ADC_ConvCpltCallback+0x14>)
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <HAL_ADC_ConvCpltCallback+0x18>)
 8007698:	88d0      	ldrh	r0, [r2, #6]
	adc_values_cpy[4] = adc_values[4];
 800769a:	8911      	ldrh	r1, [r2, #8]
	adc_values_cpy[5] = adc_values[5];
 800769c:	8952      	ldrh	r2, [r2, #10]
	adc_values_cpy[3] = adc_values[3];
 800769e:	80d8      	strh	r0, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 80076a0:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 80076a2:	815a      	strh	r2, [r3, #10]
}
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	200003d0 	.word	0x200003d0
 80076ac:	200003dc 	.word	0x200003dc

080076b0 <HAL_ADC_LevelOutOfWindowCallback>:
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80076b0:	2201      	movs	r2, #1
{
 80076b2:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80076b4:	2140      	movs	r1, #64	; 0x40
 80076b6:	4803      	ldr	r0, [pc, #12]	; (80076c4 <HAL_ADC_LevelOutOfWindowCallback+0x14>)
 80076b8:	f001 fcfa 	bl	80090b0 <HAL_GPIO_WritePin>
	chstat_main = 2;
 80076bc:	2202      	movs	r2, #2
 80076be:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 80076c0:	701a      	strb	r2, [r3, #0]
}
 80076c2:	bd08      	pop	{r3, pc}
 80076c4:	40020000 	.word	0x40020000
 80076c8:	200003f6 	.word	0x200003f6

080076cc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80076cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d0:	4e84      	ldr	r6, [pc, #528]	; (80078e4 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 80076d2:	2400      	movs	r4, #0
 80076d4:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80076d6:	b08b      	sub	sp, #44	; 0x2c
 80076d8:	e003      	b.n	80076e2 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 80076da:	3401      	adds	r4, #1
 80076dc:	2c40      	cmp	r4, #64	; 0x40
 80076de:	f000 80fd 	beq.w	80078dc <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 80076e2:	f813 5b01 	ldrb.w	r5, [r3], #1
 80076e6:	2d2a      	cmp	r5, #42	; 0x2a
 80076e8:	d1f7      	bne.n	80076da <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 80076ea:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 80076ec:	2220      	movs	r2, #32
 80076ee:	2100      	movs	r1, #0
 80076f0:	a802      	add	r0, sp, #8
 80076f2:	f005 fe75 	bl	800d3e0 <memset>
	for(int i = 0; i < 25; i++){
 80076f6:	f10d 0307 	add.w	r3, sp, #7
 80076fa:	aa08      	add	r2, sp, #32
 80076fc:	e000      	b.n	8007700 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 80076fe:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8007700:	3401      	adds	r4, #1
 8007702:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8007704:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 8007706:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 800770a:	bf28      	it	cs
 800770c:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 800770e:	429a      	cmp	r2, r3
 8007710:	d1f5      	bne.n	80076fe <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8007712:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007716:	2b2a      	cmp	r3, #42	; 0x2a
 8007718:	d00c      	beq.n	8007734 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 800771a:	2240      	movs	r2, #64	; 0x40
 800771c:	2100      	movs	r1, #0
 800771e:	4871      	ldr	r0, [pc, #452]	; (80078e4 <HAL_UART_RxCpltCallback+0x218>)
 8007720:	f005 fe5e 	bl	800d3e0 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8007724:	2240      	movs	r2, #64	; 0x40
 8007726:	496f      	ldr	r1, [pc, #444]	; (80078e4 <HAL_UART_RxCpltCallback+0x218>)
 8007728:	486f      	ldr	r0, [pc, #444]	; (80078e8 <HAL_UART_RxCpltCallback+0x21c>)
}
 800772a:	b00b      	add	sp, #44	; 0x2c
 800772c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8007730:	f003 bcf6 	b.w	800b120 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8007734:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007738:	2b53      	cmp	r3, #83	; 0x53
 800773a:	d1ee      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 800773c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007740:	2b54      	cmp	r3, #84	; 0x54
 8007742:	d1ea      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 8007744:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007748:	2b52      	cmp	r3, #82	; 0x52
 800774a:	d1e6      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 800774c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007750:	2b54      	cmp	r3, #84	; 0x54
 8007752:	d1e2      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 8007754:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007758:	2b46      	cmp	r3, #70	; 0x46
 800775a:	d1de      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 800775c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8007760:	2b4e      	cmp	r3, #78	; 0x4e
 8007762:	d1da      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 8007764:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8007768:	2b53      	cmp	r3, #83	; 0x53
 800776a:	d1d6      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 800776c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007770:	2b48      	cmp	r3, #72	; 0x48
 8007772:	d1d2      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 8007774:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007778:	2b21      	cmp	r3, #33	; 0x21
 800777a:	d1ce      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 800777c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007780:	2b2c      	cmp	r3, #44	; 0x2c
 8007782:	d1ca      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007784:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007788:	2b2c      	cmp	r3, #44	; 0x2c
 800778a:	d1c6      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 800778c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007790:	2b2c      	cmp	r3, #44	; 0x2c
 8007792:	d1c2      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 8007794:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007798:	2b2c      	cmp	r3, #44	; 0x2c
 800779a:	d1be      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800779c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80077a0:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 80077a2:	b2c3      	uxtb	r3, r0
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d8b8      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80077a8:	f89d b00f 	ldrb.w	fp, [sp, #15]
 80077ac:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 80077b0:	fa5f f38b 	uxtb.w	r3, fp
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	d8b0      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 80077b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80077bc:	2b2e      	cmp	r3, #46	; 0x2e
 80077be:	d1ac      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 80077c0:	f89d a011 	ldrb.w	sl, [sp, #17]
 80077c4:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80077c8:	fa5f f38a 	uxtb.w	r3, sl
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d8a4      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 80077d0:	f89d 6012 	ldrb.w	r6, [sp, #18]
 80077d4:	3e30      	subs	r6, #48	; 0x30
 80077d6:	b2f3      	uxtb	r3, r6
 80077d8:	2b09      	cmp	r3, #9
 80077da:	d89e      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80077dc:	f89d 9014 	ldrb.w	r9, [sp, #20]
 80077e0:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 80077e4:	fa5f f389 	uxtb.w	r3, r9
 80077e8:	2b09      	cmp	r3, #9
 80077ea:	d896      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80077ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80077f0:	2b2e      	cmp	r3, #46	; 0x2e
 80077f2:	d192      	bne.n	800771a <HAL_UART_RxCpltCallback+0x4e>
 80077f4:	f89d 8016 	ldrb.w	r8, [sp, #22]
 80077f8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80077fc:	fa5f f388 	uxtb.w	r3, r8
 8007800:	2b09      	cmp	r3, #9
 8007802:	d88a      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8007804:	f89d 7017 	ldrb.w	r7, [sp, #23]
 8007808:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800780a:	b2fb      	uxtb	r3, r7
 800780c:	2b09      	cmp	r3, #9
 800780e:	d884      	bhi.n	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8007810:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8007814:	3d30      	subs	r5, #48	; 0x30
 8007816:	b2eb      	uxtb	r3, r5
 8007818:	2b09      	cmp	r3, #9
 800781a:	f63f af7e 	bhi.w	800771a <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 800781e:	f89d 401a 	ldrb.w	r4, [sp, #26]
 8007822:	3c30      	subs	r4, #48	; 0x30
 8007824:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8007826:	2c02      	cmp	r4, #2
 8007828:	f63f af77 	bhi.w	800771a <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 800782c:	f7f9 fa6e 	bl	8000d0c <__aeabi_i2f>
 8007830:	492e      	ldr	r1, [pc, #184]	; (80078ec <HAL_UART_RxCpltCallback+0x220>)
 8007832:	f7f9 fabf 	bl	8000db4 <__aeabi_fmul>
 8007836:	2100      	movs	r1, #0
 8007838:	f7f9 f9b4 	bl	8000ba4 <__addsf3>
 800783c:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 800783e:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8007840:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8007842:	f7f9 fa63 	bl	8000d0c <__aeabi_i2f>
 8007846:	9901      	ldr	r1, [sp, #4]
 8007848:	f7f9 f9ac 	bl	8000ba4 <__addsf3>
 800784c:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 800784e:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8007850:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8007852:	f7f9 fa5b 	bl	8000d0c <__aeabi_i2f>
 8007856:	4925      	ldr	r1, [pc, #148]	; (80078ec <HAL_UART_RxCpltCallback+0x220>)
 8007858:	f7f9 fb60 	bl	8000f1c <__aeabi_fdiv>
 800785c:	4651      	mov	r1, sl
 800785e:	f7f9 f9a1 	bl	8000ba4 <__addsf3>
 8007862:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007864:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8007866:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007868:	f7f9 fa50 	bl	8000d0c <__aeabi_i2f>
 800786c:	2100      	movs	r1, #0
 800786e:	f7f9 f999 	bl	8000ba4 <__addsf3>
 8007872:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007874:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007876:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007878:	f7f9 fa48 	bl	8000d0c <__aeabi_i2f>
 800787c:	491b      	ldr	r1, [pc, #108]	; (80078ec <HAL_UART_RxCpltCallback+0x220>)
 800787e:	f7f9 fb4d 	bl	8000f1c <__aeabi_fdiv>
 8007882:	4641      	mov	r1, r8
 8007884:	f7f9 f98e 	bl	8000ba4 <__addsf3>
 8007888:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800788a:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800788c:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800788e:	f7f9 fa3d 	bl	8000d0c <__aeabi_i2f>
 8007892:	4917      	ldr	r1, [pc, #92]	; (80078f0 <HAL_UART_RxCpltCallback+0x224>)
 8007894:	f7f9 fb42 	bl	8000f1c <__aeabi_fdiv>
 8007898:	4639      	mov	r1, r7
 800789a:	f7f9 f983 	bl	8000ba4 <__addsf3>
 800789e:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80078a0:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80078a2:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80078a4:	f7f9 fa32 	bl	8000d0c <__aeabi_i2f>
 80078a8:	4911      	ldr	r1, [pc, #68]	; (80078f0 <HAL_UART_RxCpltCallback+0x224>)
 80078aa:	f7f9 fb37 	bl	8000f1c <__aeabi_fdiv>
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f9 f978 	bl	8000ba4 <__addsf3>
 80078b4:	4602      	mov	r2, r0
		lin_num_aux = tempv2;
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <HAL_UART_RxCpltCallback+0x228>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80078b8:	4628      	mov	r0, r5
		lin_num_aux = tempv2;
 80078ba:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80078bc:	f7f9 fa26 	bl	8000d0c <__aeabi_i2f>
 80078c0:	490d      	ldr	r1, [pc, #52]	; (80078f8 <HAL_UART_RxCpltCallback+0x22c>)
 80078c2:	f7f9 fb2b 	bl	8000f1c <__aeabi_fdiv>
 80078c6:	4631      	mov	r1, r6
 80078c8:	f7f9 f96c 	bl	8000ba4 <__addsf3>
		cur_num_aux = tempa2;
 80078cc:	f8df b02c 	ldr.w	fp, [pc, #44]	; 80078fc <HAL_UART_RxCpltCallback+0x230>
		chstat_aux_rx = rxbuffercpy[18]-48;
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <HAL_UART_RxCpltCallback+0x234>)
 80078d2:	b264      	sxtb	r4, r4
 80078d4:	701c      	strb	r4, [r3, #0]
		cur_num_aux = tempa2;
 80078d6:	f8cb 0000 	str.w	r0, [fp]
		chstat_aux_rx = rxbuffercpy[18]-48;
 80078da:	e71e      	b.n	800771a <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 80078dc:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 80078de:	7835      	ldrb	r5, [r6, #0]
 80078e0:	e704      	b.n	80076ec <HAL_UART_RxCpltCallback+0x20>
 80078e2:	bf00      	nop
 80078e4:	20000970 	.word	0x20000970
 80078e8:	20000714 	.word	0x20000714
 80078ec:	41200000 	.word	0x41200000
 80078f0:	42c80000 	.word	0x42c80000
 80078f4:	20000760 	.word	0x20000760
 80078f8:	447a0000 	.word	0x447a0000
 80078fc:	200003fc 	.word	0x200003fc
 8007900:	200003f4 	.word	0x200003f4

08007904 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 8007904:	2240      	movs	r2, #64	; 0x40
 8007906:	4902      	ldr	r1, [pc, #8]	; (8007910 <HAL_UART_ErrorCallback+0xc>)
 8007908:	4802      	ldr	r0, [pc, #8]	; (8007914 <HAL_UART_ErrorCallback+0x10>)
 800790a:	f003 bc09 	b.w	800b120 <HAL_UART_Receive_DMA>
 800790e:	bf00      	nop
 8007910:	20000970 	.word	0x20000970
 8007914:	20000714 	.word	0x20000714

08007918 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8007918:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 800791a:	4c07      	ldr	r4, [pc, #28]	; (8007938 <HAL_UART_TxHalfCpltCallback+0x20>)
 800791c:	4d07      	ldr	r5, [pc, #28]	; (800793c <HAL_UART_TxHalfCpltCallback+0x24>)
 800791e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800792a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800792e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007932:	bc30      	pop	{r4, r5}
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200009b8 	.word	0x200009b8
 800793c:	200009f8 	.word	0x200009f8

08007940 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8007940:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8007942:	4c11      	ldr	r4, [pc, #68]	; (8007988 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8007944:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8007946:	2240      	movs	r2, #64	; 0x40
 8007948:	2100      	movs	r1, #0
 800794a:	4620      	mov	r0, r4
 800794c:	f005 fd48 	bl	800d3e0 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8007950:	4a0e      	ldr	r2, [pc, #56]	; (800798c <HAL_UART_TxCpltCallback+0x4c>)
 8007952:	490f      	ldr	r1, [pc, #60]	; (8007990 <HAL_UART_TxCpltCallback+0x50>)
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <HAL_UART_TxCpltCallback+0x54>)
 8007956:	680e      	ldr	r6, [r1, #0]
 8007958:	6810      	ldr	r0, [r2, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	b25b      	sxtb	r3, r3
 800795e:	9304      	str	r3, [sp, #16]
 8007960:	f7f8 fd7a 	bl	8000458 <__aeabi_f2d>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	4630      	mov	r0, r6
 800796a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800796e:	f7f8 fd73 	bl	8000458 <__aeabi_f2d>
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	4620      	mov	r0, r4
 8007978:	2120      	movs	r1, #32
 800797a:	e9cd 6700 	strd	r6, r7, [sp]
 800797e:	4a06      	ldr	r2, [pc, #24]	; (8007998 <HAL_UART_TxCpltCallback+0x58>)
 8007980:	f006 f996 	bl	800dcb0 <sniprintf>
}
 8007984:	b006      	add	sp, #24
 8007986:	bdd0      	pop	{r4, r6, r7, pc}
 8007988:	200009f8 	.word	0x200009f8
 800798c:	200003e8 	.word	0x200003e8
 8007990:	20000a7c 	.word	0x20000a7c
 8007994:	200003f5 	.word	0x200003f5
 8007998:	08011798 	.word	0x08011798

0800799c <Error_Handler>:
 800799c:	b672      	cpsid	i
  while (1)
 800799e:	e7fe      	b.n	800799e <Error_Handler+0x2>

080079a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <HAL_MspInit+0x40>)
{
 80079a2:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 80079a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24
 80079ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80079b2:	9201      	str	r2, [sp, #4]
 80079b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079b6:	6a1a      	ldr	r2, [r3, #32]
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	621a      	str	r2, [r3, #32]
 80079be:	6a1a      	ldr	r2, [r3, #32]
 80079c0:	f002 0201 	and.w	r2, r2, #1
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079da:	b004      	add	sp, #16
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40023800 	.word	0x40023800

080079e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80079e4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e6:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80079e8:	4b25      	ldr	r3, [pc, #148]	; (8007a80 <HAL_ADC_MspInit+0x9c>)
 80079ea:	6802      	ldr	r2, [r0, #0]
{
 80079ec:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 80079ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80079f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80079f8:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 80079fa:	d001      	beq.n	8007a00 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80079fc:	b008      	add	sp, #32
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007a00:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8007a04:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a06:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a0c:	621a      	str	r2, [r3, #32]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	4605      	mov	r5, r0
 8007a12:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007a16:	9200      	str	r2, [sp, #0]
 8007a18:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1a:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8007a1c:	4e19      	ldr	r6, [pc, #100]	; (8007a84 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	61da      	str	r2, [r3, #28]
 8007a24:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007a26:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007a2e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a30:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a32:	4815      	ldr	r0, [pc, #84]	; (8007a88 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a38:	f001 f9b8 	bl	8008dac <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007a3c:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8007a3e:	4913      	ldr	r1, [pc, #76]	; (8007a8c <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007a40:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a44:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007a48:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8007a4e:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8007a50:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a52:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8007a54:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007a56:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007a58:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8007a5a:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8007a5c:	f000 fff2 	bl	8008a44 <HAL_DMA_Init>
 8007a60:	b958      	cbnz	r0, 8007a7a <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2012      	movs	r0, #18
 8007a66:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8007a68:	646e      	str	r6, [r5, #68]	; 0x44
 8007a6a:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8007a6c:	f000 feec 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8007a70:	2012      	movs	r0, #18
 8007a72:	f000 ff27 	bl	80088c4 <HAL_NVIC_EnableIRQ>
}
 8007a76:	b008      	add	sp, #32
 8007a78:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007a7a:	f7ff ff8f 	bl	800799c <Error_Handler>
 8007a7e:	e7f0      	b.n	8007a62 <HAL_ADC_MspInit+0x7e>
 8007a80:	40012400 	.word	0x40012400
 8007a84:	2000046c 	.word	0x2000046c
 8007a88:	40020000 	.word	0x40020000
 8007a8c:	40026008 	.word	0x40026008

08007a90 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <HAL_ADC_MspDeInit+0x30>)
 8007a92:	6802      	ldr	r2, [r0, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d000      	beq.n	8007a9a <HAL_ADC_MspDeInit+0xa>
 8007a98:	4770      	bx	lr
{
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007a9e:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007aa0:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007aa2:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007aa4:	4808      	ldr	r0, [pc, #32]	; (8007ac8 <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007aa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aaa:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007aac:	f001 fa68 	bl	8008f80 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8007ab0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007ab2:	f000 ffff 	bl	8008ab4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8007ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8007aba:	2012      	movs	r0, #18
 8007abc:	f000 bf10 	b.w	80088e0 <HAL_NVIC_DisableIRQ>
 8007ac0:	40012400 	.word	0x40012400
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	40020000 	.word	0x40020000

08007acc <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007acc:	2300      	movs	r3, #0
{
 8007ace:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8007ad0:	4a14      	ldr	r2, [pc, #80]	; (8007b24 <HAL_DAC_MspInit+0x58>)
 8007ad2:	6801      	ldr	r1, [r0, #0]
{
 8007ad4:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8007ad6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007adc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007ae0:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8007ae2:	d001      	beq.n	8007ae8 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8007ae4:	b009      	add	sp, #36	; 0x24
 8007ae6:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007ae8:	2430      	movs	r4, #48	; 0x30
 8007aea:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8007aec:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aee:	480f      	ldr	r0, [pc, #60]	; (8007b2c <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8007af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007af2:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8007af4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24
 8007afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007afc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8007b00:	9200      	str	r2, [sp, #0]
 8007b02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b04:	69da      	ldr	r2, [r3, #28]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	61da      	str	r2, [r3, #28]
 8007b0c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007b0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b1a:	f001 f947 	bl	8008dac <HAL_GPIO_Init>
}
 8007b1e:	b009      	add	sp, #36	; 0x24
 8007b20:	bd30      	pop	{r4, r5, pc}
 8007b22:	bf00      	nop
 8007b24:	40007400 	.word	0x40007400
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	40020000 	.word	0x40020000

08007b30 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b30:	2300      	movs	r3, #0
{
 8007b32:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8007b34:	4a16      	ldr	r2, [pc, #88]	; (8007b90 <HAL_I2C_MspInit+0x60>)
 8007b36:	6801      	ldr	r1, [r0, #0]
{
 8007b38:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8007b3a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007b44:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8007b46:	d001      	beq.n	8007b4c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007b48:	b008      	add	sp, #32
 8007b4a:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b4c:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b4e:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b50:	26c0      	movs	r6, #192	; 0xc0
 8007b52:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b54:	4c0f      	ldr	r4, [pc, #60]	; (8007b94 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b56:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b58:	69e3      	ldr	r3, [r4, #28]
 8007b5a:	f043 0302 	orr.w	r3, r3, #2
 8007b5e:	61e3      	str	r3, [r4, #28]
 8007b60:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b62:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b6a:	480b      	ldr	r0, [pc, #44]	; (8007b98 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b6c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b72:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b74:	f001 f91a 	bl	8008dac <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b7e:	6263      	str	r3, [r4, #36]	; 0x24
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	9b01      	ldr	r3, [sp, #4]
}
 8007b8a:	b008      	add	sp, #32
 8007b8c:	bdd0      	pop	{r4, r6, r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40005400 	.word	0x40005400
 8007b94:	40023800 	.word	0x40023800
 8007b98:	40020400 	.word	0x40020400

08007b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b9c:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8007b9e:	6803      	ldr	r3, [r0, #0]
{
 8007ba0:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8007ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba6:	d026      	beq.n	8007bf6 <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8007ba8:	4a44      	ldr	r2, [pc, #272]	; (8007cbc <HAL_TIM_Base_MspInit+0x120>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d039      	beq.n	8007c22 <HAL_TIM_Base_MspInit+0x86>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007bae:	4a44      	ldr	r2, [pc, #272]	; (8007cc0 <HAL_TIM_Base_MspInit+0x124>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d04b      	beq.n	8007c4c <HAL_TIM_Base_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8007bb4:	4a43      	ldr	r2, [pc, #268]	; (8007cc4 <HAL_TIM_Base_MspInit+0x128>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d008      	beq.n	8007bcc <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8007bba:	4a43      	ldr	r2, [pc, #268]	; (8007cc8 <HAL_TIM_Base_MspInit+0x12c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d05a      	beq.n	8007c76 <HAL_TIM_Base_MspInit+0xda>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8007bc0:	4a42      	ldr	r2, [pc, #264]	; (8007ccc <HAL_TIM_Base_MspInit+0x130>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d068      	beq.n	8007c98 <HAL_TIM_Base_MspInit+0xfc>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8007bc6:	b007      	add	sp, #28
 8007bc8:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007bcc:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007bce:	4b40      	ldr	r3, [pc, #256]	; (8007cd0 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007bd0:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007bd2:	6a19      	ldr	r1, [r3, #32]
 8007bd4:	f041 0104 	orr.w	r1, r1, #4
 8007bd8:	6219      	str	r1, [r3, #32]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007bdc:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007be6:	f000 fe2f 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8007bea:	2019      	movs	r0, #25
}
 8007bec:	b007      	add	sp, #28
 8007bee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007bf2:	f000 be67 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007bf6:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007bf8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007bfc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007bfe:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c00:	f041 0101 	orr.w	r1, r1, #1
 8007c04:	6259      	str	r1, [r3, #36]	; 0x24
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007c08:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007c12:	f000 fe19 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007c16:	201c      	movs	r0, #28
}
 8007c18:	b007      	add	sp, #28
 8007c1a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007c1e:	f000 be51 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c22:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c24:	4b2a      	ldr	r3, [pc, #168]	; (8007cd0 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c26:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c2a:	f041 0102 	orr.w	r1, r1, #2
 8007c2e:	6259      	str	r1, [r3, #36]	; 0x24
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c32:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007c3c:	f000 fe04 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007c40:	201d      	movs	r0, #29
}
 8007c42:	b007      	add	sp, #28
 8007c44:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007c48:	f000 be3c 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007c4c:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007c50:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007c54:	f041 0104 	orr.w	r1, r1, #4
 8007c58:	6259      	str	r1, [r3, #36]	; 0x24
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007c5c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c5e:	f003 0304 	and.w	r3, r3, #4
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007c66:	f000 fdef 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007c6a:	201e      	movs	r0, #30
}
 8007c6c:	b007      	add	sp, #28
 8007c6e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007c72:	f000 be27 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c76:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c7a:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c7c:	6a19      	ldr	r1, [r3, #32]
 8007c7e:	f041 0108 	orr.w	r1, r1, #8
 8007c82:	6219      	str	r1, [r3, #32]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c86:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c90:	f000 fdda 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8007c94:	201a      	movs	r0, #26
 8007c96:	e7a9      	b.n	8007bec <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007c98:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007c9c:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007c9e:	6a19      	ldr	r1, [r3, #32]
 8007ca0:	f041 0110 	orr.w	r1, r1, #16
 8007ca4:	6219      	str	r1, [r3, #32]
 8007ca6:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007ca8:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007caa:	f003 0310 	and.w	r3, r3, #16
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007cb2:	f000 fdc9 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007cb6:	201b      	movs	r0, #27
 8007cb8:	e798      	b.n	8007bec <HAL_TIM_Base_MspInit+0x50>
 8007cba:	bf00      	nop
 8007cbc:	40000400 	.word	0x40000400
 8007cc0:	40000800 	.word	0x40000800
 8007cc4:	40010800 	.word	0x40010800
 8007cc8:	40010c00 	.word	0x40010c00
 8007ccc:	40011000 	.word	0x40011000
 8007cd0:	40023800 	.word	0x40023800

08007cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cd4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cd6:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8007cd8:	4b31      	ldr	r3, [pc, #196]	; (8007da0 <HAL_UART_MspInit+0xcc>)
 8007cda:	6802      	ldr	r2, [r0, #0]
{
 8007cdc:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8007cde:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ce0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007ce4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007ce8:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8007cea:	d001      	beq.n	8007cf0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007cec:	b008      	add	sp, #32
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8007cf0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007cf4:	6a1a      	ldr	r2, [r3, #32]
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfc:	621a      	str	r2, [r3, #32]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d00:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007d06:	9200      	str	r2, [sp, #0]
 8007d08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d0a:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007d0c:	4e25      	ldr	r6, [pc, #148]	; (8007da4 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	61da      	str	r2, [r3, #28]
 8007d14:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d16:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d20:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d22:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d24:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007d2a:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d2c:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d2e:	481e      	ldr	r0, [pc, #120]	; (8007da8 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007d30:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d32:	f001 f83b 	bl	8008dac <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d36:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007d38:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007d3a:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007d3c:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d40:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007d44:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d48:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007d4a:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007d4c:	f000 fe7a 	bl	8008a44 <HAL_DMA_Init>
 8007d50:	b9f8      	cbnz	r0, 8007d92 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d52:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d54:	4c16      	ldr	r4, [pc, #88]	; (8007db0 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d56:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d58:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d5a:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007d5c:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d5e:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d62:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d66:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d68:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007d6a:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007d6c:	63ae      	str	r6, [r5, #56]	; 0x38
 8007d6e:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d70:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007d72:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007d74:	f000 fe66 	bl	8008a44 <HAL_DMA_Init>
 8007d78:	b970      	cbnz	r0, 8007d98 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2025      	movs	r0, #37	; 0x25
 8007d7e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007d80:	636c      	str	r4, [r5, #52]	; 0x34
 8007d82:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d84:	f000 fd60 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d88:	2025      	movs	r0, #37	; 0x25
 8007d8a:	f000 fd9b 	bl	80088c4 <HAL_NVIC_EnableIRQ>
}
 8007d8e:	b008      	add	sp, #32
 8007d90:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007d92:	f7ff fe03 	bl	800799c <Error_Handler>
 8007d96:	e7dc      	b.n	8007d52 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8007d98:	f7ff fe00 	bl	800799c <Error_Handler>
 8007d9c:	e7ed      	b.n	8007d7a <HAL_UART_MspInit+0xa6>
 8007d9e:	bf00      	nop
 8007da0:	40013800 	.word	0x40013800
 8007da4:	200004b0 	.word	0x200004b0
 8007da8:	40020000 	.word	0x40020000
 8007dac:	40026058 	.word	0x40026058
 8007db0:	200004f4 	.word	0x200004f4
 8007db4:	40026044 	.word	0x40026044

08007db8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007db8:	e7fe      	b.n	8007db8 <NMI_Handler>
 8007dba:	bf00      	nop

08007dbc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007dbc:	e7fe      	b.n	8007dbc <HardFault_Handler>
 8007dbe:	bf00      	nop

08007dc0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dc0:	e7fe      	b.n	8007dc0 <MemManage_Handler>
 8007dc2:	bf00      	nop

08007dc4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dc4:	e7fe      	b.n	8007dc4 <BusFault_Handler>
 8007dc6:	bf00      	nop

08007dc8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007dc8:	e7fe      	b.n	8007dc8 <UsageFault_Handler>
 8007dca:	bf00      	nop

08007dcc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop

08007dd0 <DebugMon_Handler>:
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop

08007dd4 <PendSV_Handler>:
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop

08007dd8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007dd8:	f000 b926 	b.w	8008028 <HAL_IncTick>

08007ddc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8007ddc:	2001      	movs	r0, #1
 8007dde:	f001 b975 	b.w	80090cc <HAL_GPIO_EXTI_IRQHandler>
 8007de2:	bf00      	nop

08007de4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8007de4:	2004      	movs	r0, #4
 8007de6:	f001 b971 	b.w	80090cc <HAL_GPIO_EXTI_IRQHandler>
 8007dea:	bf00      	nop

08007dec <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <DMA1_Channel1_IRQHandler+0x8>)
 8007dee:	f000 bf29 	b.w	8008c44 <HAL_DMA_IRQHandler>
 8007df2:	bf00      	nop
 8007df4:	2000046c 	.word	0x2000046c

08007df8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <DMA1_Channel4_IRQHandler+0x8>)
 8007dfa:	f000 bf23 	b.w	8008c44 <HAL_DMA_IRQHandler>
 8007dfe:	bf00      	nop
 8007e00:	200004f4 	.word	0x200004f4

08007e04 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <DMA1_Channel5_IRQHandler+0x8>)
 8007e06:	f000 bf1d 	b.w	8008c44 <HAL_DMA_IRQHandler>
 8007e0a:	bf00      	nop
 8007e0c:	200004b0 	.word	0x200004b0

08007e10 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <ADC1_IRQHandler+0x8>)
 8007e12:	f000 bad1 	b.w	80083b8 <HAL_ADC_IRQHandler>
 8007e16:	bf00      	nop
 8007e18:	20000404 	.word	0x20000404

08007e1c <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <USB_LP_IRQHandler+0x8>)
 8007e1e:	f001 bc3b 	b.w	8009698 <HAL_PCD_IRQHandler>
 8007e22:	bf00      	nop
 8007e24:	20001700 	.word	0x20001700

08007e28 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007e28:	4801      	ldr	r0, [pc, #4]	; (8007e30 <TIM9_IRQHandler+0x8>)
 8007e2a:	f002 bff5 	b.w	800ae18 <HAL_TIM_IRQHandler>
 8007e2e:	bf00      	nop
 8007e30:	200006d4 	.word	0x200006d4

08007e34 <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <TIM10_IRQHandler+0x8>)
 8007e36:	f002 bfef 	b.w	800ae18 <HAL_TIM_IRQHandler>
 8007e3a:	bf00      	nop
 8007e3c:	20000594 	.word	0x20000594

08007e40 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <TIM11_IRQHandler+0x8>)
 8007e42:	f002 bfe9 	b.w	800ae18 <HAL_TIM_IRQHandler>
 8007e46:	bf00      	nop
 8007e48:	200005d4 	.word	0x200005d4

08007e4c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <TIM2_IRQHandler+0x8>)
 8007e4e:	f002 bfe3 	b.w	800ae18 <HAL_TIM_IRQHandler>
 8007e52:	bf00      	nop
 8007e54:	20000614 	.word	0x20000614

08007e58 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <TIM3_IRQHandler+0x8>)
 8007e5a:	f002 bfdd 	b.w	800ae18 <HAL_TIM_IRQHandler>
 8007e5e:	bf00      	nop
 8007e60:	20000654 	.word	0x20000654

08007e64 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007e64:	4801      	ldr	r0, [pc, #4]	; (8007e6c <TIM4_IRQHandler+0x8>)
 8007e66:	f002 bfd7 	b.w	800ae18 <HAL_TIM_IRQHandler>
 8007e6a:	bf00      	nop
 8007e6c:	20000694 	.word	0x20000694

08007e70 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007e70:	4801      	ldr	r0, [pc, #4]	; (8007e78 <USART1_IRQHandler+0x8>)
 8007e72:	f003 ba9f 	b.w	800b3b4 <HAL_UART_IRQHandler>
 8007e76:	bf00      	nop
 8007e78:	20000714 	.word	0x20000714

08007e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8007e7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e82:	f001 f923 	bl	80090cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8007e86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e8a:	f001 f91f 	bl	80090cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8007e8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e92:	f001 f91b 	bl	80090cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8007e96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e9a:	f001 f917 	bl	80090cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8007ea2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ea6:	f001 b911 	b.w	80090cc <HAL_GPIO_EXTI_IRQHandler>
 8007eaa:	bf00      	nop

08007eac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007eac:	2001      	movs	r0, #1
 8007eae:	4770      	bx	lr

08007eb0 <_kill>:

int _kill(int pid, int sig)
{
 8007eb0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007eb2:	f005 fa6b 	bl	800d38c <__errno>
 8007eb6:	2216      	movs	r2, #22
 8007eb8:	4603      	mov	r3, r0
	return -1;
}
 8007eba:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8007ebe:	601a      	str	r2, [r3, #0]
}
 8007ec0:	bd08      	pop	{r3, pc}
 8007ec2:	bf00      	nop

08007ec4 <_exit>:

void _exit (int status)
{
 8007ec4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007ec6:	f005 fa61 	bl	800d38c <__errno>
 8007eca:	2316      	movs	r3, #22
 8007ecc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8007ece:	e7fe      	b.n	8007ece <_exit+0xa>

08007ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ed0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ed2:	1e16      	subs	r6, r2, #0
 8007ed4:	dd07      	ble.n	8007ee6 <_read+0x16>
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8007eda:	f3af 8000 	nop.w
 8007ede:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ee2:	42a5      	cmp	r5, r4
 8007ee4:	d1f9      	bne.n	8007eda <_read+0xa>
	}

return len;
}
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	bf00      	nop

08007eec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007eec:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eee:	1e16      	subs	r6, r2, #0
 8007ef0:	dd07      	ble.n	8007f02 <_write+0x16>
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8007ef6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007efa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007efe:	42ac      	cmp	r4, r5
 8007f00:	d1f9      	bne.n	8007ef6 <_write+0xa>
	}
	return len;
}
 8007f02:	4630      	mov	r0, r6
 8007f04:	bd70      	pop	{r4, r5, r6, pc}
 8007f06:	bf00      	nop

08007f08 <_close>:

int _close(int file)
{
	return -1;
}
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007f14:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007f16:	604b      	str	r3, [r1, #4]
}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	4770      	bx	lr

08007f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007f20:	2000      	movs	r0, #0
 8007f22:	4770      	bx	lr

08007f24 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f24:	490d      	ldr	r1, [pc, #52]	; (8007f5c <_sbrk+0x38>)
{
 8007f26:	4603      	mov	r3, r0
 8007f28:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f2a:	4a0d      	ldr	r2, [pc, #52]	; (8007f60 <_sbrk+0x3c>)
 8007f2c:	4c0d      	ldr	r4, [pc, #52]	; (8007f64 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8007f2e:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f30:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8007f32:	b120      	cbz	r0, 8007f3e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f34:	4403      	add	r3, r0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d807      	bhi.n	8007f4a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007f3a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8007f3c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007f3e:	4c0a      	ldr	r4, [pc, #40]	; (8007f68 <_sbrk+0x44>)
 8007f40:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8007f42:	4403      	add	r3, r0
 8007f44:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8007f46:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8007f48:	d9f7      	bls.n	8007f3a <_sbrk+0x16>
    errno = ENOMEM;
 8007f4a:	f005 fa1f 	bl	800d38c <__errno>
 8007f4e:	220c      	movs	r2, #12
 8007f50:	4603      	mov	r3, r0
    return (void *)-1;
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8007f56:	601a      	str	r2, [r3, #0]
}
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000a88 	.word	0x20000a88
 8007f60:	20008000 	.word	0x20008000
 8007f64:	00002000 	.word	0x00002000
 8007f68:	20001c20 	.word	0x20001c20

08007f6c <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f70:	480c      	ldr	r0, [pc, #48]	; (8007fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007f72:	490d      	ldr	r1, [pc, #52]	; (8007fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007f74:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f78:	e002      	b.n	8007f80 <LoopCopyDataInit>

08007f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f7e:	3304      	adds	r3, #4

08007f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f84:	d3f9      	bcc.n	8007f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f86:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007f88:	4c0a      	ldr	r4, [pc, #40]	; (8007fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f8c:	e001      	b.n	8007f92 <LoopFillZerobss>

08007f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f90:	3204      	adds	r2, #4

08007f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f94:	d3fb      	bcc.n	8007f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f96:	f7ff ffe9 	bl	8007f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f9a:	f005 f9fd 	bl	800d398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007f9e:	f7f9 ff27 	bl	8001df0 <main>
  bx lr
 8007fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8007fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007fa8:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 8007fac:	08011fac 	.word	0x08011fac
  ldr r2, =_sbss
 8007fb0:	20000374 	.word	0x20000374
  ldr r4, =_ebss
 8007fb4:	20001c1c 	.word	0x20001c1c

08007fb8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007fb8:	e7fe      	b.n	8007fb8 <COMP_IRQHandler>
	...

08007fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fbc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <HAL_InitTick+0x40>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	b90b      	cbnz	r3, 8007fc8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007fc4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	490b      	ldr	r1, [pc, #44]	; (8008000 <HAL_InitTick+0x44>)
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8007fda:	f000 fc95 	bl	8008908 <HAL_SYSTICK_Config>
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d1ef      	bne.n	8007fc4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007fe4:	2d0f      	cmp	r5, #15
 8007fe6:	d8ed      	bhi.n	8007fc4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007fe8:	4602      	mov	r2, r0
 8007fea:	4629      	mov	r1, r5
 8007fec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff0:	f000 fc2a 	bl	8008848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007ff4:	4b03      	ldr	r3, [pc, #12]	; (8008004 <HAL_InitTick+0x48>)
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	601d      	str	r5, [r3, #0]
}
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20000028 	.word	0x20000028
 8008000:	20000024 	.word	0x20000024
 8008004:	2000002c 	.word	0x2000002c

08008008 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008008:	2003      	movs	r0, #3
{
 800800a:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800800c:	f000 fc0a 	bl	8008824 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008010:	200f      	movs	r0, #15
 8008012:	f7ff ffd3 	bl	8007fbc <HAL_InitTick>
 8008016:	b110      	cbz	r0, 800801e <HAL_Init+0x16>
    status = HAL_ERROR;
 8008018:	2401      	movs	r4, #1
}
 800801a:	4620      	mov	r0, r4
 800801c:	bd10      	pop	{r4, pc}
 800801e:	4604      	mov	r4, r0
    HAL_MspInit();
 8008020:	f7ff fcbe 	bl	80079a0 <HAL_MspInit>
}
 8008024:	4620      	mov	r0, r4
 8008026:	bd10      	pop	{r4, pc}

08008028 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008028:	4a03      	ldr	r2, [pc, #12]	; (8008038 <HAL_IncTick+0x10>)
 800802a:	4904      	ldr	r1, [pc, #16]	; (800803c <HAL_IncTick+0x14>)
 800802c:	6813      	ldr	r3, [r2, #0]
 800802e:	6809      	ldr	r1, [r1, #0]
 8008030:	440b      	add	r3, r1
 8008032:	6013      	str	r3, [r2, #0]
}
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000a8c 	.word	0x20000a8c
 800803c:	20000028 	.word	0x20000028

08008040 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008040:	4b01      	ldr	r3, [pc, #4]	; (8008048 <HAL_GetTick+0x8>)
 8008042:	6818      	ldr	r0, [r3, #0]
}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000a8c 	.word	0x20000a8c

0800804c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008050:	f7ff fff6 	bl	8008040 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008054:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8008056:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8008058:	d002      	beq.n	8008060 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800805a:	4b04      	ldr	r3, [pc, #16]	; (800806c <HAL_Delay+0x20>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008060:	f7ff ffee 	bl	8008040 <HAL_GetTick>
 8008064:	1b40      	subs	r0, r0, r5
 8008066:	42a0      	cmp	r0, r4
 8008068:	d3fa      	bcc.n	8008060 <HAL_Delay+0x14>
  {
  }
}
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	20000028 	.word	0x20000028

08008070 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008070:	2800      	cmp	r0, #0
 8008072:	f000 80a9 	beq.w	80081c8 <HAL_ADC_Init+0x158>
{
 8008076:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008078:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800807a:	4604      	mov	r4, r0
{
 800807c:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 800807e:	2b00      	cmp	r3, #0
 8008080:	d078      	beq.n	8008174 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008082:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008084:	06d8      	lsls	r0, r3, #27
 8008086:	d453      	bmi.n	8008130 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008088:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800808a:	4a5c      	ldr	r2, [pc, #368]	; (80081fc <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 800808c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008090:	f023 0302 	bic.w	r3, r3, #2
 8008094:	f043 0302 	orr.w	r3, r3, #2
 8008098:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800809a:	6853      	ldr	r3, [r2, #4]
 800809c:	6861      	ldr	r1, [r4, #4]
 800809e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80080a2:	430b      	orrs	r3, r1
 80080a4:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80080aa:	fa91 f1a1 	rbit	r1, r1
 80080ae:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80080b0:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80080b4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80080b8:	fa93 f3a3 	rbit	r3, r3
 80080bc:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80080c0:	6965      	ldr	r5, [r4, #20]
 80080c2:	68e2      	ldr	r2, [r4, #12]
 80080c4:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 80080c8:	432a      	orrs	r2, r5
 80080ca:	6a25      	ldr	r5, [r4, #32]
 80080cc:	fa0c f101 	lsl.w	r1, ip, r1
 80080d0:	432a      	orrs	r2, r5
 80080d2:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80080d6:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080da:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 80080dc:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80080e0:	d002      	beq.n	80080e8 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80080e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080e4:	4311      	orrs	r1, r2
 80080e6:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80080e8:	6822      	ldr	r2, [r4, #0]
 80080ea:	6811      	ldr	r1, [r2, #0]
 80080ec:	0649      	lsls	r1, r1, #25
 80080ee:	d551      	bpl.n	8008194 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80080f0:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80080f2:	6890      	ldr	r0, [r2, #8]
 80080f4:	4942      	ldr	r1, [pc, #264]	; (8008200 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80080f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80080fa:	ea01 0100 	and.w	r1, r1, r0
 80080fe:	ea41 0103 	orr.w	r1, r1, r3
 8008102:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008104:	d017      	beq.n	8008136 <HAL_ADC_Init+0xc6>
 8008106:	2d01      	cmp	r5, #1
 8008108:	d015      	beq.n	8008136 <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800810a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800810c:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 8008110:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8008112:	6891      	ldr	r1, [r2, #8]
 8008114:	4a3b      	ldr	r2, [pc, #236]	; (8008204 <HAL_ADC_Init+0x194>)
 8008116:	400a      	ands	r2, r1
 8008118:	429a      	cmp	r2, r3
 800811a:	d11f      	bne.n	800815c <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800811c:	2000      	movs	r0, #0
 800811e:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8008120:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800812c:	b003      	add	sp, #12
 800812e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008130:	2001      	movs	r0, #1
}
 8008132:	b003      	add	sp, #12
 8008134:	bd30      	pop	{r4, r5, pc}
 8008136:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800813a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800813c:	fa91 f1a1 	rbit	r1, r1
 8008140:	fab1 f081 	clz	r0, r1
 8008144:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008146:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 800814a:	3901      	subs	r1, #1
 800814c:	4081      	lsls	r1, r0
 800814e:	4329      	orrs	r1, r5
 8008150:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8008152:	6891      	ldr	r1, [r2, #8]
 8008154:	4a2b      	ldr	r2, [pc, #172]	; (8008204 <HAL_ADC_Init+0x194>)
 8008156:	400a      	ands	r2, r1
 8008158:	429a      	cmp	r2, r3
 800815a:	d0df      	beq.n	800811c <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 800815c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800815e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008160:	f023 0312 	bic.w	r3, r3, #18
 8008164:	f043 0310 	orr.w	r3, r3, #16
 8008168:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800816a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800816c:	4303      	orrs	r3, r0
 800816e:	6523      	str	r3, [r4, #80]	; 0x50
}
 8008170:	b003      	add	sp, #12
 8008172:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008174:	4a24      	ldr	r2, [pc, #144]	; (8008208 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 8008176:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8008178:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800817c:	6a13      	ldr	r3, [r2, #32]
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6213      	str	r3, [r2, #32]
 8008184:	6a13      	ldr	r3, [r2, #32]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 800818e:	f7ff fc29 	bl	80079e4 <HAL_ADC_MspInit>
 8008192:	e776      	b.n	8008082 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8008194:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8008196:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8008198:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800819a:	69e1      	ldr	r1, [r4, #28]
 800819c:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80081a0:	6925      	ldr	r5, [r4, #16]
 80081a2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80081a6:	d00c      	beq.n	80081c2 <HAL_ADC_Init+0x152>
 80081a8:	2d01      	cmp	r5, #1
 80081aa:	d00a      	beq.n	80081c2 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80081ac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80081b0:	2901      	cmp	r1, #1
 80081b2:	d00b      	beq.n	80081cc <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 80081b4:	6850      	ldr	r0, [r2, #4]
 80081b6:	4915      	ldr	r1, [pc, #84]	; (800820c <HAL_ADC_Init+0x19c>)
 80081b8:	4001      	ands	r1, r0
 80081ba:	ea41 010c 	orr.w	r1, r1, ip
 80081be:	6051      	str	r1, [r2, #4]
 80081c0:	e797      	b.n	80080f2 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 80081c2:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 80081c6:	e7f1      	b.n	80081ac <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 80081c8:	2001      	movs	r0, #1
}
 80081ca:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80081cc:	b968      	cbnz	r0, 80081ea <HAL_ADC_Init+0x17a>
 80081ce:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80081d2:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80081d6:	fab1 f081 	clz	r0, r1
 80081da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80081dc:	3901      	subs	r1, #1
 80081de:	4081      	lsls	r1, r0
 80081e0:	ea41 010c 	orr.w	r1, r1, ip
 80081e4:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 80081e8:	e7e4      	b.n	80081b4 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80081ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80081ec:	f041 0120 	orr.w	r1, r1, #32
 80081f0:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80081f4:	f041 0101 	orr.w	r1, r1, #1
 80081f8:	6521      	str	r1, [r4, #80]	; 0x50
 80081fa:	e7db      	b.n	80081b4 <HAL_ADC_Init+0x144>
 80081fc:	40012700 	.word	0x40012700
 8008200:	c0fff18d 	.word	0xc0fff18d
 8008204:	bf80fffe 	.word	0xbf80fffe
 8008208:	40023800 	.word	0x40023800
 800820c:	fcfc16ff 	.word	0xfcfc16ff

08008210 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008210:	2800      	cmp	r0, #0
 8008212:	d075      	beq.n	8008300 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8008214:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 8008216:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8008218:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800821c:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800821e:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4604      	mov	r4, r0
 8008224:	0655      	lsls	r5, r2, #25
 8008226:	d453      	bmi.n	80082d0 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8008228:	f06f 001f 	mvn.w	r0, #31
 800822c:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 800822e:	6858      	ldr	r0, [r3, #4]
 8008230:	4939      	ldr	r1, [pc, #228]	; (8008318 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 8008232:	4a3a      	ldr	r2, [pc, #232]	; (800831c <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8008234:	4001      	ands	r1, r0
 8008236:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 8008238:	6899      	ldr	r1, [r3, #8]
 800823a:	400a      	ands	r2, r1
 800823c:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 800823e:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 8008240:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8008242:	4a37      	ldr	r2, [pc, #220]	; (8008320 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 8008244:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8008246:	4837      	ldr	r0, [pc, #220]	; (8008324 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 8008248:	0d49      	lsrs	r1, r1, #21
 800824a:	0549      	lsls	r1, r1, #21
 800824c:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 800824e:	6919      	ldr	r1, [r3, #16]
 8008250:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8008254:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8008256:	6959      	ldr	r1, [r3, #20]
 8008258:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800825c:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800825e:	6999      	ldr	r1, [r3, #24]
 8008260:	4011      	ands	r1, r2
 8008262:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8008264:	69d9      	ldr	r1, [r3, #28]
 8008266:	4011      	ands	r1, r2
 8008268:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800826a:	6a19      	ldr	r1, [r3, #32]
 800826c:	4011      	ands	r1, r2
 800826e:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8008270:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008272:	4011      	ands	r1, r2
 8008274:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8008276:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008278:	4011      	ands	r1, r2
 800827a:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 800827c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800827e:	400a      	ands	r2, r1
 8008280:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8008282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8008284:	4928      	ldr	r1, [pc, #160]	; (8008328 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8008286:	4010      	ands	r0, r2
 8008288:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800828a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 800828c:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800828e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008292:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8008294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008296:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800829a:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 800829c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800829e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80082a2:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 80082a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082a6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80082aa:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 80082ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ae:	0d92      	lsrs	r2, r2, #22
 80082b0:	0592      	lsls	r2, r2, #22
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80082b4:	684b      	ldr	r3, [r1, #4]
 80082b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082ba:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 80082bc:	f7ff fbe8 	bl	8007a90 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80082c0:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 80082c2:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 80082c4:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 80082c6:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 80082c8:	2300      	movs	r3, #0
 80082ca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	f022 0201 	bic.w	r2, r2, #1
 80082d6:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80082d8:	f7ff feb2 	bl	8008040 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80082dc:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80082de:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	0650      	lsls	r0, r2, #25
 80082e4:	d5a0      	bpl.n	8008228 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80082e6:	f7ff feab 	bl	8008040 <HAL_GetTick>
 80082ea:	1b40      	subs	r0, r0, r5
 80082ec:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80082ee:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80082f0:	d902      	bls.n	80082f8 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	0651      	lsls	r1, r2, #25
 80082f6:	d405      	bmi.n	8008304 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	0652      	lsls	r2, r2, #25
 80082fc:	d4f3      	bmi.n	80082e6 <HAL_ADC_DeInit+0xd6>
 80082fe:	e793      	b.n	8008228 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 8008300:	2001      	movs	r0, #1
}
 8008302:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008304:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008306:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008308:	f043 0310 	orr.w	r3, r3, #16
 800830c:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800830e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008310:	4303      	orrs	r3, r0
 8008312:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8008314:	e7d8      	b.n	80082c8 <HAL_ADC_DeInit+0xb8>
 8008316:	bf00      	nop
 8008318:	f83c0000 	.word	0xf83c0000
 800831c:	8080f08c 	.word	0x8080f08c
 8008320:	fffff000 	.word	0xfffff000
 8008324:	fe0f8000 	.word	0xfe0f8000
 8008328:	40012700 	.word	0x40012700

0800832c <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800832c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800832e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008330:	f012 0f50 	tst.w	r2, #80	; 0x50
 8008334:	d126      	bne.n	8008384 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008338:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800833a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800833e:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008340:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008342:	688a      	ldr	r2, [r1, #8]
 8008344:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008348:	d118      	bne.n	800837c <ADC_DMAConvCplt+0x50>
 800834a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800834e:	b9aa      	cbnz	r2, 800837c <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008350:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008352:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8008356:	d002      	beq.n	800835e <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008358:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800835a:	0550      	lsls	r0, r2, #21
 800835c:	d40e      	bmi.n	800837c <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800835e:	684a      	ldr	r2, [r1, #4]
 8008360:	f022 0220 	bic.w	r2, r2, #32
 8008364:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800836c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800836e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008370:	04d2      	lsls	r2, r2, #19
 8008372:	d403      	bmi.n	800837c <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff f989 	bl	8007694 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008382:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	4718      	bx	r3
 800838a:	bf00      	nop

0800838c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800838c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800838e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008390:	f7ff f972 	bl	8007678 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008394:	bd08      	pop	{r3, pc}
 8008396:	bf00      	nop

08008398 <HAL_ADC_ErrorCallback>:
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop

0800839c <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800839c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800839e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80083a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80083a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a6:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80083a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80083aa:	f043 0304 	orr.w	r3, r3, #4
 80083ae:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80083b0:	f7ff fff2 	bl	8008398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80083b4:	bd08      	pop	{r3, pc}
 80083b6:	bf00      	nop

080083b8 <HAL_ADC_IRQHandler>:
{
 80083b8:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80083ba:	6803      	ldr	r3, [r0, #0]
{
 80083bc:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	0691      	lsls	r1, r2, #26
 80083c2:	d502      	bpl.n	80083ca <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	0792      	lsls	r2, r2, #30
 80083c8:	d445      	bmi.n	8008456 <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	0612      	lsls	r2, r2, #24
 80083ce:	d502      	bpl.n	80083d6 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	0755      	lsls	r5, r2, #29
 80083d4:	d40c      	bmi.n	80083f0 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	0655      	lsls	r5, r2, #25
 80083da:	d502      	bpl.n	80083e2 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	07d0      	lsls	r0, r2, #31
 80083e0:	d46f      	bmi.n	80084c2 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	d502      	bpl.n	80083ee <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	0692      	lsls	r2, r2, #26
 80083ec:	d45c      	bmi.n	80084a8 <HAL_ADC_IRQHandler+0xf0>
}
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80083f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80083f2:	06d0      	lsls	r0, r2, #27
 80083f4:	d403      	bmi.n	80083fe <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80083f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80083f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083fc:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008404:	d11f      	bne.n	8008446 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008408:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800840c:	d002      	beq.n	8008414 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800840e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008410:	0551      	lsls	r1, r2, #21
 8008412:	d418      	bmi.n	8008446 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008414:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008416:	0552      	lsls	r2, r2, #21
 8008418:	d415      	bmi.n	8008446 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800841a:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800841c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008420:	d111      	bne.n	8008446 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008422:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008426:	b972      	cbnz	r2, 8008446 <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800842e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008430:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008436:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008438:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800843a:	05db      	lsls	r3, r3, #23
 800843c:	d403      	bmi.n	8008446 <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800843e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008446:	4620      	mov	r0, r4
 8008448:	f000 f9ea 	bl	8008820 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800844c:	f06f 020c 	mvn.w	r2, #12
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	e7bf      	b.n	80083d6 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008456:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008458:	06d5      	lsls	r5, r2, #27
 800845a:	d403      	bmi.n	8008464 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800845c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800845e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008462:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800846a:	d115      	bne.n	8008498 <HAL_ADC_IRQHandler+0xe0>
 800846c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008470:	b992      	cbnz	r2, 8008498 <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008474:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8008478:	d12f      	bne.n	80084da <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	f022 0220 	bic.w	r2, r2, #32
 8008480:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008482:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008488:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800848a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800848c:	04d9      	lsls	r1, r3, #19
 800848e:	d403      	bmi.n	8008498 <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008490:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 8008498:	4620      	mov	r0, r4
 800849a:	f7ff f8fb 	bl	8007694 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800849e:	f06f 0212 	mvn.w	r2, #18
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e790      	b.n	80083ca <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80084a8:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80084ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 80084ae:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80084b0:	f042 0202 	orr.w	r2, r2, #2
 80084b4:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80084b6:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80084b8:	f7ff ff6e 	bl	8008398 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	601d      	str	r5, [r3, #0]
}
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80084c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80084c4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80084c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ca:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80084cc:	f7ff f8f0 	bl	80076b0 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80084d0:	f06f 0201 	mvn.w	r2, #1
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	e783      	b.n	80083e2 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80084da:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80084dc:	0550      	lsls	r0, r2, #21
 80084de:	d4db      	bmi.n	8008498 <HAL_ADC_IRQHandler+0xe0>
 80084e0:	e7cb      	b.n	800847a <HAL_ADC_IRQHandler+0xc2>
 80084e2:	bf00      	nop

080084e4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80084e4:	2300      	movs	r3, #0
{
 80084e6:	b530      	push	{r4, r5, lr}
 80084e8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80084ea:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80084ec:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	f000 80aa 	beq.w	800864a <HAL_ADC_ConfigChannel+0x166>
 80084f6:	2301      	movs	r3, #1
 80084f8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 80084fc:	684b      	ldr	r3, [r1, #4]
 80084fe:	4602      	mov	r2, r0
 8008500:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8008502:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8008504:	d924      	bls.n	8008550 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 8008506:	2b0c      	cmp	r3, #12
 8008508:	d866      	bhi.n	80085d8 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 800850a:	f04f 0c1f 	mov.w	ip, #31
 800850e:	680c      	ldr	r4, [r1, #0]
 8008510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008514:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8008516:	3b23      	subs	r3, #35	; 0x23
 8008518:	fa04 fe03 	lsl.w	lr, r4, r3
 800851c:	fa0c f303 	lsl.w	r3, ip, r3
 8008520:	ea25 0303 	bic.w	r3, r5, r3
 8008524:	ea43 030e 	orr.w	r3, r3, lr
 8008528:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 800852a:	2c09      	cmp	r4, #9
 800852c:	d822      	bhi.n	8008574 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 800852e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8008532:	2407      	movs	r4, #7
 8008534:	6943      	ldr	r3, [r0, #20]
 8008536:	6889      	ldr	r1, [r1, #8]
 8008538:	40ac      	lsls	r4, r5
 800853a:	40a9      	lsls	r1, r5
 800853c:	ea23 0404 	bic.w	r4, r3, r4
 8008540:	430c      	orrs	r4, r1
 8008542:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8008544:	2300      	movs	r3, #0
  return tmp_hal_status;
 8008546:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8008548:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 800854c:	b003      	add	sp, #12
 800854e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 8008550:	f04f 0c1f 	mov.w	ip, #31
 8008554:	680c      	ldr	r4, [r1, #0]
 8008556:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800855a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800855c:	3b05      	subs	r3, #5
 800855e:	fa04 fe03 	lsl.w	lr, r4, r3
 8008562:	fa0c f303 	lsl.w	r3, ip, r3
 8008566:	ea25 0303 	bic.w	r3, r5, r3
 800856a:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 800856e:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8008570:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8008572:	d9dc      	bls.n	800852e <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8008574:	2c13      	cmp	r4, #19
 8008576:	d844      	bhi.n	8008602 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8008578:	f04f 0c07 	mov.w	ip, #7
 800857c:	688d      	ldr	r5, [r1, #8]
 800857e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008582:	6903      	ldr	r3, [r0, #16]
 8008584:	391e      	subs	r1, #30
 8008586:	408d      	lsls	r5, r1
 8008588:	fa0c f101 	lsl.w	r1, ip, r1
 800858c:	ea23 0301 	bic.w	r3, r3, r1
 8008590:	432b      	orrs	r3, r5
 8008592:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008594:	f1a4 0310 	sub.w	r3, r4, #16
 8008598:	2b01      	cmp	r3, #1
 800859a:	d8d3      	bhi.n	8008544 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800859c:	4b34      	ldr	r3, [pc, #208]	; (8008670 <HAL_ADC_ConfigChannel+0x18c>)
 800859e:	6859      	ldr	r1, [r3, #4]
 80085a0:	0209      	lsls	r1, r1, #8
 80085a2:	d4cf      	bmi.n	8008544 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80085a4:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085a6:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80085a8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80085ac:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80085ae:	d1c9      	bne.n	8008544 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80085b0:	4b30      	ldr	r3, [pc, #192]	; (8008674 <HAL_ADC_ConfigChannel+0x190>)
 80085b2:	4931      	ldr	r1, [pc, #196]	; (8008678 <HAL_ADC_ConfigChannel+0x194>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	fba1 1303 	umull	r1, r3, r1, r3
 80085ba:	0c9b      	lsrs	r3, r3, #18
 80085bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0bc      	beq.n	8008544 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80085ca:	9b01      	ldr	r3, [sp, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f9      	bne.n	80085ca <HAL_ADC_ConfigChannel+0xe6>
 80085d6:	e7b5      	b.n	8008544 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 80085d8:	2b12      	cmp	r3, #18
 80085da:	d925      	bls.n	8008628 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 80085dc:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 80085de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 80085e2:	d835      	bhi.n	8008650 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 80085e4:	f04f 0c1f 	mov.w	ip, #31
 80085e8:	680c      	ldr	r4, [r1, #0]
 80085ea:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80085ec:	3b5f      	subs	r3, #95	; 0x5f
 80085ee:	fa04 fe03 	lsl.w	lr, r4, r3
 80085f2:	fa0c f303 	lsl.w	r3, ip, r3
 80085f6:	ea25 0303 	bic.w	r3, r5, r3
 80085fa:	ea43 030e 	orr.w	r3, r3, lr
 80085fe:	6343      	str	r3, [r0, #52]	; 0x34
 8008600:	e793      	b.n	800852a <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8008602:	2c1a      	cmp	r4, #26
 8008604:	d80d      	bhi.n	8008622 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8008606:	2507      	movs	r5, #7
 8008608:	6889      	ldr	r1, [r1, #8]
 800860a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800860e:	68c3      	ldr	r3, [r0, #12]
 8008610:	3c3c      	subs	r4, #60	; 0x3c
 8008612:	40a1      	lsls	r1, r4
 8008614:	fa05 f404 	lsl.w	r4, r5, r4
 8008618:	ea23 0304 	bic.w	r3, r3, r4
 800861c:	430b      	orrs	r3, r1
 800861e:	60c3      	str	r3, [r0, #12]
 8008620:	e790      	b.n	8008544 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8008622:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008624:	680c      	ldr	r4, [r1, #0]
 8008626:	e7b5      	b.n	8008594 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8008628:	f04f 0c1f 	mov.w	ip, #31
 800862c:	680c      	ldr	r4, [r1, #0]
 800862e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008632:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008634:	3b41      	subs	r3, #65	; 0x41
 8008636:	fa04 fe03 	lsl.w	lr, r4, r3
 800863a:	fa0c f303 	lsl.w	r3, ip, r3
 800863e:	ea25 0303 	bic.w	r3, r5, r3
 8008642:	ea43 030e 	orr.w	r3, r3, lr
 8008646:	6383      	str	r3, [r0, #56]	; 0x38
 8008648:	e76f      	b.n	800852a <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 800864a:	2002      	movs	r0, #2
}
 800864c:	b003      	add	sp, #12
 800864e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8008650:	f04f 0c1f 	mov.w	ip, #31
 8008654:	680c      	ldr	r4, [r1, #0]
 8008656:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8008658:	3b7d      	subs	r3, #125	; 0x7d
 800865a:	fa04 fe03 	lsl.w	lr, r4, r3
 800865e:	fa0c f303 	lsl.w	r3, ip, r3
 8008662:	ea25 0303 	bic.w	r3, r5, r3
 8008666:	ea43 030e 	orr.w	r3, r3, lr
 800866a:	6303      	str	r3, [r0, #48]	; 0x30
 800866c:	e75d      	b.n	800852a <HAL_ADC_ConfigChannel+0x46>
 800866e:	bf00      	nop
 8008670:	40012700 	.word	0x40012700
 8008674:	20000024 	.word	0x20000024
 8008678:	431bde83 	.word	0x431bde83

0800867c <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 800867c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008680:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8008682:	2b01      	cmp	r3, #1
 8008684:	d024      	beq.n	80086d0 <HAL_ADC_AnalogWDGConfig+0x54>
 8008686:	2301      	movs	r3, #1
{
 8008688:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800868a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 800868e:	7a0b      	ldrb	r3, [r1, #8]
 8008690:	4686      	mov	lr, r0
 8008692:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8008694:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 8008696:	d016      	beq.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8008698:	685c      	ldr	r4, [r3, #4]
 800869a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800869e:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 80086a0:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 80086a4:	6858      	ldr	r0, [r3, #4]
 80086a6:	4c0b      	ldr	r4, [pc, #44]	; (80086d4 <HAL_ADC_AnalogWDGConfig+0x58>)
 80086a8:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 80086aa:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 80086ac:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 80086ae:	4302      	orrs	r2, r0
 80086b0:	6858      	ldr	r0, [r3, #4]
 80086b2:	4302      	orrs	r2, r0
 80086b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80086b6:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80086ba:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80086bc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 80086be:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 80086c2:	4660      	mov	r0, ip
}
 80086c4:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80086c6:	6858      	ldr	r0, [r3, #4]
 80086c8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80086cc:	6058      	str	r0, [r3, #4]
 80086ce:	e7e7      	b.n	80086a0 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 80086d0:	2002      	movs	r0, #2
}
 80086d2:	4770      	bx	lr
 80086d4:	ff3ffde0 	.word	0xff3ffde0

080086d8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 80086d8:	2300      	movs	r3, #0
{
 80086da:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80086dc:	6802      	ldr	r2, [r0, #0]
{
 80086de:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80086e0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80086e2:	6813      	ldr	r3, [r2, #0]
 80086e4:	0659      	lsls	r1, r3, #25
 80086e6:	d429      	bmi.n	800873c <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80086e8:	4b1c      	ldr	r3, [pc, #112]	; (800875c <ADC_Enable+0x84>)
 80086ea:	4604      	mov	r4, r0
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	481c      	ldr	r0, [pc, #112]	; (8008760 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 80086f0:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80086f2:	fba0 0303 	umull	r0, r3, r0, r3
 80086f6:	0c9b      	lsrs	r3, r3, #18
 80086f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 80086fc:	f041 0101 	orr.w	r1, r1, #1
 8008700:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008702:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	b12b      	cbz	r3, 8008714 <ADC_Enable+0x3c>
      wait_loop_index--;
 8008708:	9b01      	ldr	r3, [sp, #4]
 800870a:	3b01      	subs	r3, #1
 800870c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f9      	bne.n	8008708 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8008714:	f7ff fc94 	bl	8008040 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008718:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 800871a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	065a      	lsls	r2, r3, #25
 8008720:	d40c      	bmi.n	800873c <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8008722:	f7ff fc8d 	bl	8008040 <HAL_GetTick>
 8008726:	1b43      	subs	r3, r0, r5
 8008728:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800872a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800872c:	d903      	bls.n	8008736 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8008734:	d005      	beq.n	8008742 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	065b      	lsls	r3, r3, #25
 800873a:	d5f2      	bpl.n	8008722 <ADC_Enable+0x4a>
  return HAL_OK;
 800873c:	2000      	movs	r0, #0
}
 800873e:	b003      	add	sp, #12
 8008740:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8008742:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008744:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8008746:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800874a:	f043 0310 	orr.w	r3, r3, #16
 800874e:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008750:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008752:	4303      	orrs	r3, r0
 8008754:	6523      	str	r3, [r4, #80]	; 0x50
}
 8008756:	b003      	add	sp, #12
 8008758:	bd30      	pop	{r4, r5, pc}
 800875a:	bf00      	nop
 800875c:	20000024 	.word	0x20000024
 8008760:	431bde83 	.word	0x431bde83

08008764 <HAL_ADC_Start_DMA>:
{
 8008764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8008768:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 800876c:	2d01      	cmp	r5, #1
 800876e:	d04c      	beq.n	800880a <HAL_ADC_Start_DMA+0xa6>
 8008770:	2301      	movs	r3, #1
 8008772:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8008776:	4604      	mov	r4, r0
 8008778:	4688      	mov	r8, r1
 800877a:	4617      	mov	r7, r2
 800877c:	f7ff ffac 	bl	80086d8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8008780:	4605      	mov	r5, r0
 8008782:	2800      	cmp	r0, #0
 8008784:	d13e      	bne.n	8008804 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8008786:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008788:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800878a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800878e:	f020 0001 	bic.w	r0, r0, #1
 8008792:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008796:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008798:	6873      	ldr	r3, [r6, #4]
 800879a:	055b      	lsls	r3, r3, #21
 800879c:	d505      	bpl.n	80087aa <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800879e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80087a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087a8:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 80087aa:	2100      	movs	r1, #0
 80087ac:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80087b0:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80087b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087b8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087bc:	bf18      	it	ne
 80087be:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80087c0:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087c2:	bf18      	it	ne
 80087c4:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80087c8:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80087ca:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80087cc:	4f11      	ldr	r7, [pc, #68]	; (8008814 <HAL_ADC_Start_DMA+0xb0>)
 80087ce:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80087d0:	4f11      	ldr	r7, [pc, #68]	; (8008818 <HAL_ADC_Start_DMA+0xb4>)
 80087d2:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80087d4:	4f11      	ldr	r7, [pc, #68]	; (800881c <HAL_ADC_Start_DMA+0xb8>)
 80087d6:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80087d8:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80087da:	6871      	ldr	r1, [r6, #4]
 80087dc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80087e0:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80087e2:	68b1      	ldr	r1, [r6, #8]
 80087e4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80087e8:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80087ea:	f106 0158 	add.w	r1, r6, #88	; 0x58
 80087ee:	f000 f98f 	bl	8008b10 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80087fa:	d103      	bne.n	8008804 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008802:	609a      	str	r2, [r3, #8]
}
 8008804:	4628      	mov	r0, r5
 8008806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800880a:	2502      	movs	r5, #2
}
 800880c:	4628      	mov	r0, r5
 800880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008812:	bf00      	nop
 8008814:	0800832d 	.word	0x0800832d
 8008818:	0800838d 	.word	0x0800838d
 800881c:	0800839d 	.word	0x0800839d

08008820 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008824:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008828:	4906      	ldr	r1, [pc, #24]	; (8008844 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800882a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800882c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800882e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008832:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800883c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008840:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008842:	4770      	bx	lr
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800884a:	b500      	push	{lr}
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008852:	f1c3 0e07 	rsb	lr, r3, #7
 8008856:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800885a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800885e:	bf28      	it	cs
 8008860:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008864:	f1bc 0f06 	cmp.w	ip, #6
 8008868:	d91b      	bls.n	80088a2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800886a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800886e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008870:	fa0c fc03 	lsl.w	ip, ip, r3
 8008874:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008878:	f04f 3cff 	mov.w	ip, #4294967295
 800887c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008880:	ea21 010c 	bic.w	r1, r1, ip
 8008884:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8008886:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008888:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800888c:	db0c      	blt.n	80088a8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800888e:	0109      	lsls	r1, r1, #4
 8008890:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008894:	b2c9      	uxtb	r1, r1
 8008896:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800889a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800889e:	f85d fb04 	ldr.w	pc, [sp], #4
 80088a2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088a4:	4613      	mov	r3, r2
 80088a6:	e7e7      	b.n	8008878 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088a8:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <HAL_NVIC_SetPriority+0x78>)
 80088aa:	f000 000f 	and.w	r0, r0, #15
 80088ae:	0109      	lsls	r1, r1, #4
 80088b0:	b2c9      	uxtb	r1, r1
 80088b2:	4403      	add	r3, r0
 80088b4:	7619      	strb	r1, [r3, #24]
 80088b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80088ba:	bf00      	nop
 80088bc:	e000ed00 	.word	0xe000ed00
 80088c0:	e000ecfc 	.word	0xe000ecfc

080088c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80088c4:	2800      	cmp	r0, #0
 80088c6:	db07      	blt.n	80088d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088c8:	2301      	movs	r3, #1
 80088ca:	f000 011f 	and.w	r1, r0, #31
 80088ce:	4a03      	ldr	r2, [pc, #12]	; (80088dc <HAL_NVIC_EnableIRQ+0x18>)
 80088d0:	0940      	lsrs	r0, r0, #5
 80088d2:	408b      	lsls	r3, r1
 80088d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	e000e100 	.word	0xe000e100

080088e0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80088e0:	2800      	cmp	r0, #0
 80088e2:	db0d      	blt.n	8008900 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088e4:	2201      	movs	r2, #1
 80088e6:	4907      	ldr	r1, [pc, #28]	; (8008904 <HAL_NVIC_DisableIRQ+0x24>)
 80088e8:	0943      	lsrs	r3, r0, #5
 80088ea:	f000 001f 	and.w	r0, r0, #31
 80088ee:	3320      	adds	r3, #32
 80088f0:	fa02 f000 	lsl.w	r0, r2, r0
 80088f4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80088f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80088fc:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	e000e100 	.word	0xe000e100

08008908 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008908:	3801      	subs	r0, #1
 800890a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800890e:	d20f      	bcs.n	8008930 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008910:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008914:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008918:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800891a:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800891c:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891e:	4c05      	ldr	r4, [pc, #20]	; (8008934 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008920:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008922:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008926:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008928:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800892a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800892c:	6119      	str	r1, [r3, #16]
 800892e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008930:	2001      	movs	r0, #1
 8008932:	4770      	bx	lr
 8008934:	e000ed00 	.word	0xe000ed00

08008938 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008938:	b188      	cbz	r0, 800895e <HAL_DAC_Init+0x26>
{
 800893a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800893c:	7903      	ldrb	r3, [r0, #4]
 800893e:	4604      	mov	r4, r0
 8008940:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008944:	b13b      	cbz	r3, 8008956 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008946:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008948:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800894a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800894c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800894e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008950:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008952:	4618      	mov	r0, r3
}
 8008954:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8008956:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8008958:	f7ff f8b8 	bl	8007acc <HAL_DAC_MspInit>
 800895c:	e7f3      	b.n	8008946 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800895e:	2001      	movs	r0, #1
}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop

08008964 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008964:	7942      	ldrb	r2, [r0, #5]
 8008966:	2a01      	cmp	r2, #1
 8008968:	d02a      	beq.n	80089c0 <HAL_DAC_Start+0x5c>
{
 800896a:	b410      	push	{r4}
 800896c:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800896e:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008970:	2201      	movs	r2, #1
 8008972:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008974:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8008976:	6804      	ldr	r4, [r0, #0]
 8008978:	f001 0c10 	and.w	ip, r1, #16
 800897c:	fa02 f20c 	lsl.w	r2, r2, ip
 8008980:	4322      	orrs	r2, r4
 8008982:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8008984:	b979      	cbnz	r1, 80089a6 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008986:	6802      	ldr	r2, [r0, #0]
 8008988:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800898c:	2a3c      	cmp	r2, #60	; 0x3c
 800898e:	d103      	bne.n	8008998 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008990:	6842      	ldr	r2, [r0, #4]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008998:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 800899a:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 800899c:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 800899e:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80089a0:	4610      	mov	r0, r2
}
 80089a2:	bc10      	pop	{r4}
 80089a4:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80089a6:	223c      	movs	r2, #60	; 0x3c
 80089a8:	6801      	ldr	r1, [r0, #0]
 80089aa:	fa02 fc0c 	lsl.w	ip, r2, ip
 80089ae:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 80089b2:	4561      	cmp	r1, ip
 80089b4:	d1f0      	bne.n	8008998 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80089b6:	6842      	ldr	r2, [r0, #4]
 80089b8:	f042 0202 	orr.w	r2, r2, #2
 80089bc:	6042      	str	r2, [r0, #4]
 80089be:	e7eb      	b.n	8008998 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80089c0:	2002      	movs	r0, #2
}
 80089c2:	4770      	bx	lr

080089c4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80089c4:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 80089c6:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80089c8:	6800      	ldr	r0, [r0, #0]
{
 80089ca:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80089cc:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80089ce:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80089d0:	b949      	cbnz	r1, 80089e6 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80089d2:	9901      	ldr	r1, [sp, #4]
 80089d4:	3108      	adds	r1, #8
 80089d6:	440a      	add	r2, r1
 80089d8:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 80089da:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80089dc:	9a01      	ldr	r2, [sp, #4]
 80089de:	6013      	str	r3, [r2, #0]
}
 80089e0:	b003      	add	sp, #12
 80089e2:	bc10      	pop	{r4}
 80089e4:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80089e6:	9901      	ldr	r1, [sp, #4]
 80089e8:	3114      	adds	r1, #20
 80089ea:	440a      	add	r2, r1
 80089ec:	9201      	str	r2, [sp, #4]
 80089ee:	e7f4      	b.n	80089da <HAL_DAC_SetValue+0x16>

080089f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80089f0:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80089f2:	7940      	ldrb	r0, [r0, #5]
 80089f4:	2801      	cmp	r0, #1
 80089f6:	d022      	beq.n	8008a3e <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80089f8:	2002      	movs	r0, #2
{
 80089fa:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80089fc:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a00:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008a04:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008a08:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a0a:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8008a0c:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a12:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008a16:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a18:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008a1a:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a1e:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8008a22:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8008a24:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a26:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a2a:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8008a2c:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008a2e:	6822      	ldr	r2, [r4, #0]
 8008a30:	ea22 020c 	bic.w	r2, r2, ip
 8008a34:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008a36:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8008a38:	f883 e005 	strb.w	lr, [r3, #5]
}
 8008a3c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8008a3e:	2002      	movs	r0, #2
}
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop

08008a44 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008a44:	b370      	cbz	r0, 8008aa4 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a46:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a48:	2202      	movs	r2, #2
{
 8008a4a:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008a4c:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a50:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a52:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8008a58:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a5a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8008a5c:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8008a60:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8008a64:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a66:	4910      	ldr	r1, [pc, #64]	; (8008aa8 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a68:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a6a:	4d10      	ldr	r5, [pc, #64]	; (8008aac <HAL_DMA_Init+0x68>)
 8008a6c:	4401      	add	r1, r0
 8008a6e:	fba5 5101 	umull	r5, r1, r5, r1
 8008a72:	0909      	lsrs	r1, r1, #4
 8008a74:	0089      	lsls	r1, r1, #2
 8008a76:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a78:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8008a7a:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a7e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a80:	6959      	ldr	r1, [r3, #20]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	6999      	ldr	r1, [r3, #24]
 8008a86:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a88:	69d9      	ldr	r1, [r3, #28]
 8008a8a:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8008a8c:	4908      	ldr	r1, [pc, #32]	; (8008ab0 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8008a8e:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8008a92:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8008a94:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a96:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a98:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8008a9c:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8008aa0:	4620      	mov	r0, r4
}
 8008aa2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008aa4:	2001      	movs	r0, #1
}
 8008aa6:	4770      	bx	lr
 8008aa8:	bffd9ff8 	.word	0xbffd9ff8
 8008aac:	cccccccd 	.word	0xcccccccd
 8008ab0:	40026000 	.word	0x40026000

08008ab4 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8008ab4:	b320      	cbz	r0, 8008b00 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008ab6:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ab8:	2101      	movs	r1, #1
{
 8008aba:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8008abc:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8008abe:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008ac0:	4810      	ldr	r0, [pc, #64]	; (8008b04 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8008ac2:	682a      	ldr	r2, [r5, #0]
 8008ac4:	f022 0201 	bic.w	r2, r2, #1
 8008ac8:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008aca:	4a0f      	ldr	r2, [pc, #60]	; (8008b08 <HAL_DMA_DeInit+0x54>)
 8008acc:	442a      	add	r2, r5
 8008ace:	fba0 0202 	umull	r0, r2, r0, r2
 8008ad2:	0912      	lsrs	r2, r2, #4
 8008ad4:	0092      	lsls	r2, r2, #2
 8008ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ad8:	f002 021c 	and.w	r2, r2, #28
 8008adc:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8008ae0:	490a      	ldr	r1, [pc, #40]	; (8008b0c <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8008ae2:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8008ae4:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8008ae6:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ae8:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008aea:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8008aec:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8008af0:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8008af4:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8008af8:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8008afc:	bc30      	pop	{r4, r5}
 8008afe:	4770      	bx	lr
    return HAL_ERROR;
 8008b00:	2001      	movs	r0, #1
}
 8008b02:	4770      	bx	lr
 8008b04:	cccccccd 	.word	0xcccccccd
 8008b08:	bffd9ff8 	.word	0xbffd9ff8
 8008b0c:	40026000 	.word	0x40026000

08008b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b10:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008b12:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008b16:	2801      	cmp	r0, #1
 8008b18:	d042      	beq.n	8008ba0 <HAL_DMA_Start_IT+0x90>
{
 8008b1a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8008b1c:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8008b1e:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8008b22:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b26:	42a0      	cmp	r0, r4
 8008b28:	fa5f fe80 	uxtb.w	lr, r0
 8008b2c:	d004      	beq.n	8008b38 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008b34:	2002      	movs	r0, #2
  }
  return status;
}
 8008b36:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b38:	2002      	movs	r0, #2
 8008b3a:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b3e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008b40:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b44:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8008b48:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b4a:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8008b4e:	f025 0501 	bic.w	r5, r5, #1
 8008b52:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b54:	f000 001c 	and.w	r0, r0, #28
 8008b58:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8008b5c:	fa0e f000 	lsl.w	r0, lr, r0
 8008b60:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b62:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b64:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008b68:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8008b6a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b6e:	bf0b      	itete	eq
 8008b70:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008b72:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008b74:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008b76:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8008b78:	b14b      	cbz	r3, 8008b8e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	f043 030e 	orr.w	r3, r3, #14
 8008b80:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008b82:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b84:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	6023      	str	r3, [r4, #0]
}
 8008b8c:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f023 0304 	bic.w	r3, r3, #4
 8008b94:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	f043 030a 	orr.w	r3, r3, #10
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	e7f0      	b.n	8008b82 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8008ba0:	2002      	movs	r0, #2
}
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ba4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8008ba8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008baa:	2a02      	cmp	r2, #2
 8008bac:	d006      	beq.n	8008bbc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bae:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8008bb0:	2200      	movs	r2, #0
    return HAL_ERROR;
 8008bb2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bb4:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8008bb6:	f883 2020 	strb.w	r2, [r3, #32]
}
 8008bba:	4770      	bx	lr
{
 8008bbc:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bbe:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8008bc2:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bc6:	6802      	ldr	r2, [r0, #0]
 8008bc8:	6811      	ldr	r1, [r2, #0]
 8008bca:	f021 010e 	bic.w	r1, r1, #14
 8008bce:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	f021 0101 	bic.w	r1, r1, #1
 8008bd6:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bd8:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8008bdc:	f002 021c 	and.w	r2, r2, #28
 8008be0:	fa0e f202 	lsl.w	r2, lr, r2
 8008be4:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008be6:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008bea:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8008bee:	4660      	mov	r0, ip
}
 8008bf0:	f85d fb04 	ldr.w	pc, [sp], #4

08008bf4 <HAL_DMA_Abort_IT>:
{
 8008bf4:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008bf6:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8008bfa:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008bfc:	2a02      	cmp	r2, #2
 8008bfe:	d003      	beq.n	8008c08 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c00:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8008c02:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c04:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c08:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c0a:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c0e:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c10:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c12:	f024 040e 	bic.w	r4, r4, #14
 8008c16:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8008c18:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8008c1a:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c1c:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8008c20:	f025 0501 	bic.w	r5, r5, #1
 8008c24:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c26:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8008c28:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c2a:	fa0c f202 	lsl.w	r2, ip, r2
 8008c2e:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008c30:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008c34:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008c38:	b111      	cbz	r1, 8008c40 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8008c3a:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8008c3c:	4620      	mov	r0, r4
}
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8008c40:	4608      	mov	r0, r1
}
 8008c42:	bd38      	pop	{r3, r4, r5, pc}

08008c44 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008c44:	2204      	movs	r2, #4
{
 8008c46:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008c48:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008c4a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008c4c:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008c50:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008c52:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008c54:	409a      	lsls	r2, r3
 8008c56:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8008c58:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008c5a:	d00e      	beq.n	8008c7a <HAL_DMA_IRQHandler+0x36>
 8008c5c:	f014 0f04 	tst.w	r4, #4
 8008c60:	d00b      	beq.n	8008c7a <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	069b      	lsls	r3, r3, #26
 8008c66:	d403      	bmi.n	8008c70 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	f023 0304 	bic.w	r3, r3, #4
 8008c6e:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8008c70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008c72:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008c74:	b1cb      	cbz	r3, 8008caa <HAL_DMA_IRQHandler+0x66>
}
 8008c76:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8008c78:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	409a      	lsls	r2, r3
 8008c7e:	420a      	tst	r2, r1
 8008c80:	d015      	beq.n	8008cae <HAL_DMA_IRQHandler+0x6a>
 8008c82:	f014 0f02 	tst.w	r4, #2
 8008c86:	d012      	beq.n	8008cae <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	0699      	lsls	r1, r3, #26
 8008c8c:	d406      	bmi.n	8008c9c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	f023 030a 	bic.w	r3, r3, #10
 8008c94:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008c9c:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8008c9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ca0:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8008ca2:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <HAL_DMA_IRQHandler+0x32>
}
 8008caa:	bc70      	pop	{r4, r5, r6}
 8008cac:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008cae:	2208      	movs	r2, #8
 8008cb0:	409a      	lsls	r2, r3
 8008cb2:	420a      	tst	r2, r1
 8008cb4:	d0f9      	beq.n	8008caa <HAL_DMA_IRQHandler+0x66>
 8008cb6:	0722      	lsls	r2, r4, #28
 8008cb8:	d5f7      	bpl.n	8008caa <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cba:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8008cbc:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cbe:	f022 020e 	bic.w	r2, r2, #14
 8008cc2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cc4:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8008cc6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008cce:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8008cd0:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8008cd4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d0e6      	beq.n	8008caa <HAL_DMA_IRQHandler+0x66>
}
 8008cdc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8008cde:	4708      	bx	r1

08008ce0 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d041      	beq.n	8008d68 <HAL_EXTI_SetConfigLine+0x88>
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	d03f      	beq.n	8008d68 <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8008ce8:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8008cec:	680b      	ldr	r3, [r1, #0]
{
 8008cee:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8008cf0:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8008cf4:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008cf6:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8008cf8:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008cfc:	d519      	bpl.n	8008d32 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8008cfe:	4d25      	ldr	r5, [pc, #148]	; (8008d94 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008d00:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8008d02:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008d04:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8008d08:	bf14      	ite	ne
 8008d0a:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8008d0e:	ea24 040c 	biceq.w	r4, r4, ip
 8008d12:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8008d14:	4c1f      	ldr	r4, [pc, #124]	; (8008d94 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8008d16:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8008d1a:	68e0      	ldr	r0, [r4, #12]
 8008d1c:	bf14      	ite	ne
 8008d1e:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8008d22:	ea20 000c 	biceq.w	r0, r0, ip
 8008d26:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8008d28:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8008d2c:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8008d30:	d01c      	beq.n	8008d6c <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8008d32:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008d34:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8008d36:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008d38:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8008d3a:	bf4c      	ite	mi
 8008d3c:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8008d40:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008d44:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8008d48:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8008d4a:	4a12      	ldr	r2, [pc, #72]	; (8008d94 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008d4c:	d105      	bne.n	8008d5a <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8008d4e:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8008d50:	6853      	ldr	r3, [r2, #4]
 8008d52:	ea23 030c 	bic.w	r3, r3, ip
 8008d56:	6053      	str	r3, [r2, #4]
}
 8008d58:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8008d5a:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8008d5c:	2000      	movs	r0, #0
}
 8008d5e:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8008d60:	ea43 030c 	orr.w	r3, r3, ip
 8008d64:	6053      	str	r3, [r2, #4]
}
 8008d66:	4770      	bx	lr
    return HAL_ERROR;
 8008d68:	2001      	movs	r0, #1
}
 8008d6a:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d6c:	250f      	movs	r5, #15
 8008d6e:	f002 021c 	and.w	r2, r2, #28
 8008d72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d76:	68c8      	ldr	r0, [r1, #12]
 8008d78:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d7c:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8008d80:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d82:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d84:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d86:	fa05 f303 	lsl.w	r3, r5, r3
 8008d8a:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d8e:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8008d90:	6090      	str	r0, [r2, #8]
 8008d92:	e7ce      	b.n	8008d32 <HAL_EXTI_SetConfigLine+0x52>
 8008d94:	40010400 	.word	0x40010400

08008d98 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008d98:	2301      	movs	r3, #1
 8008d9a:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8008d9c:	4902      	ldr	r1, [pc, #8]	; (8008da8 <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008d9e:	f002 021f 	and.w	r2, r2, #31
 8008da2:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8008da4:	610b      	str	r3, [r1, #16]
}
 8008da6:	4770      	bx	lr
 8008da8:	40010400 	.word	0x40010400

08008dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008db0:	680c      	ldr	r4, [r1, #0]
{
 8008db2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8008db4:	2c00      	cmp	r4, #0
 8008db6:	d07c      	beq.n	8008eb2 <HAL_GPIO_Init+0x106>
 8008db8:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008dbc:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8008dc0:	4673      	mov	r3, lr
 8008dc2:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008dc4:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8008dc8:	ea15 0a04 	ands.w	sl, r5, r4
 8008dcc:	d06b      	beq.n	8008ea6 <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008dce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008dd2:	f001 0203 	and.w	r2, r1, #3
 8008dd6:	1e57      	subs	r7, r2, #1
 8008dd8:	2f01      	cmp	r7, #1
 8008dda:	d96d      	bls.n	8008eb8 <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ddc:	2a03      	cmp	r2, #3
 8008dde:	f040 80ae 	bne.w	8008f3e <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008de2:	fa02 f20e 	lsl.w	r2, r2, lr
 8008de6:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008de8:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008dea:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8008dee:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008df2:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8008df6:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008df8:	d055      	beq.n	8008ea6 <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008dfa:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dfc:	4d5a      	ldr	r5, [pc, #360]	; (8008f68 <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008dfe:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e02:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008e04:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	622a      	str	r2, [r5, #32]
 8008e0c:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008e0e:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e12:	f002 0201 	and.w	r2, r2, #1
 8008e16:	9203      	str	r2, [sp, #12]
 8008e18:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8008e1a:	f023 0203 	bic.w	r2, r3, #3
 8008e1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008e22:	4e52      	ldr	r6, [pc, #328]	; (8008f6c <HAL_GPIO_Init+0x1c0>)
 8008e24:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8008e28:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008e2a:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008e2c:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008e30:	d015      	beq.n	8008e5e <HAL_GPIO_Init+0xb2>
 8008e32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008e36:	42b0      	cmp	r0, r6
 8008e38:	f000 808c 	beq.w	8008f54 <HAL_GPIO_Init+0x1a8>
 8008e3c:	4e4c      	ldr	r6, [pc, #304]	; (8008f70 <HAL_GPIO_Init+0x1c4>)
 8008e3e:	42b0      	cmp	r0, r6
 8008e40:	f000 808c 	beq.w	8008f5c <HAL_GPIO_Init+0x1b0>
 8008e44:	4e4b      	ldr	r6, [pc, #300]	; (8008f74 <HAL_GPIO_Init+0x1c8>)
 8008e46:	42b0      	cmp	r0, r6
 8008e48:	d07e      	beq.n	8008f48 <HAL_GPIO_Init+0x19c>
 8008e4a:	4e4b      	ldr	r6, [pc, #300]	; (8008f78 <HAL_GPIO_Init+0x1cc>)
 8008e4c:	42b0      	cmp	r0, r6
 8008e4e:	bf0c      	ite	eq
 8008e50:	f04f 0804 	moveq.w	r8, #4
 8008e54:	f04f 0805 	movne.w	r8, #5
 8008e58:	fa08 f707 	lsl.w	r7, r8, r7
 8008e5c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e5e:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8008e62:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8008e64:	4a45      	ldr	r2, [pc, #276]	; (8008f7c <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e66:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8008e68:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8008e6a:	4d44      	ldr	r5, [pc, #272]	; (8008f7c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e6c:	bf54      	ite	pl
 8008e6e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008e70:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8008e74:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8008e76:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e78:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8008e7a:	4a40      	ldr	r2, [pc, #256]	; (8008f7c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e7c:	bf54      	ite	pl
 8008e7e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008e80:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8008e84:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e86:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e88:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8008e8a:	4a3c      	ldr	r2, [pc, #240]	; (8008f7c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e8c:	bf54      	ite	pl
 8008e8e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008e90:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8008e94:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8008e96:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e98:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8008e9a:	4938      	ldr	r1, [pc, #224]	; (8008f7c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e9c:	bf54      	ite	pl
 8008e9e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008ea0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8008ea4:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8008ea6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8008ea8:	fa34 f203 	lsrs.w	r2, r4, r3
 8008eac:	f10e 0e02 	add.w	lr, lr, #2
 8008eb0:	d188      	bne.n	8008dc4 <HAL_GPIO_Init+0x18>
  }
}
 8008eb2:	b005      	add	sp, #20
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008eb8:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8008ebc:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008ebe:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ec2:	fa09 f90e 	lsl.w	r9, r9, lr
 8008ec6:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008eca:	fa07 f70e 	lsl.w	r7, r7, lr
 8008ece:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8008ed0:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ed2:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8008ed6:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008eda:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8008ede:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8008ee2:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ee6:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8008eea:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8008eec:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008eee:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008ef0:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8008ef4:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008ef8:	fa02 f20e 	lsl.w	r2, r2, lr
 8008efc:	fa05 f50e 	lsl.w	r5, r5, lr
 8008f00:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8008f04:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f06:	f47f af6f 	bne.w	8008de8 <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008f0a:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008f0e:	f003 0807 	and.w	r8, r3, #7
 8008f12:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008f16:	fa05 f508 	lsl.w	r5, r5, r8
 8008f1a:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008f1c:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8008f1e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008f22:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008f26:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008f2a:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008f2e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008f30:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008f34:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8008f38:	f8c9 5020 	str.w	r5, [r9, #32]
 8008f3c:	e754      	b.n	8008de8 <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f3e:	2703      	movs	r7, #3
 8008f40:	fa07 f70e 	lsl.w	r7, r7, lr
 8008f44:	43ff      	mvns	r7, r7
 8008f46:	e7d1      	b.n	8008eec <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008f48:	f04f 0803 	mov.w	r8, #3
 8008f4c:	fa08 f707 	lsl.w	r7, r8, r7
 8008f50:	433d      	orrs	r5, r7
 8008f52:	e784      	b.n	8008e5e <HAL_GPIO_Init+0xb2>
 8008f54:	fa0b f707 	lsl.w	r7, fp, r7
 8008f58:	433d      	orrs	r5, r7
 8008f5a:	e780      	b.n	8008e5e <HAL_GPIO_Init+0xb2>
 8008f5c:	f04f 0802 	mov.w	r8, #2
 8008f60:	fa08 f707 	lsl.w	r7, r8, r7
 8008f64:	433d      	orrs	r5, r7
 8008f66:	e77a      	b.n	8008e5e <HAL_GPIO_Init+0xb2>
 8008f68:	40023800 	.word	0x40023800
 8008f6c:	40020000 	.word	0x40020000
 8008f70:	40020800 	.word	0x40020800
 8008f74:	40020c00 	.word	0x40020c00
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	40010400 	.word	0x40010400

08008f80 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008f80:	2900      	cmp	r1, #0
 8008f82:	f000 8083 	beq.w	800908c <HAL_GPIO_DeInit+0x10c>
{
 8008f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8008f8a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008f8c:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008f8e:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008f92:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008f96:	4e3e      	ldr	r6, [pc, #248]	; (8009090 <HAL_GPIO_DeInit+0x110>)
 8008f98:	e051      	b.n	800903e <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008f9a:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008f9e:	4558      	cmp	r0, fp
 8008fa0:	d069      	beq.n	8009076 <HAL_GPIO_DeInit+0xf6>
 8008fa2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8009094 <HAL_GPIO_DeInit+0x114>
 8008fa6:	4558      	cmp	r0, fp
 8008fa8:	d068      	beq.n	800907c <HAL_GPIO_DeInit+0xfc>
 8008faa:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009098 <HAL_GPIO_DeInit+0x118>
 8008fae:	4558      	cmp	r0, fp
 8008fb0:	d069      	beq.n	8009086 <HAL_GPIO_DeInit+0x106>
 8008fb2:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800909c <HAL_GPIO_DeInit+0x11c>
 8008fb6:	4558      	cmp	r0, fp
 8008fb8:	bf14      	ite	ne
 8008fba:	f04f 0b05 	movne.w	fp, #5
 8008fbe:	f04f 0b04 	moveq.w	fp, #4
 8008fc2:	fa0b f404 	lsl.w	r4, fp, r4
 8008fc6:	45a4      	cmp	ip, r4
 8008fc8:	d113      	bne.n	8008ff2 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008fca:	6834      	ldr	r4, [r6, #0]
 8008fcc:	ea24 040e 	bic.w	r4, r4, lr
 8008fd0:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008fd2:	6874      	ldr	r4, [r6, #4]
 8008fd4:	ea24 040e 	bic.w	r4, r4, lr
 8008fd8:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008fda:	68b4      	ldr	r4, [r6, #8]
 8008fdc:	ea24 040e 	bic.w	r4, r4, lr
 8008fe0:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008fe2:	68f4      	ldr	r4, [r6, #12]
 8008fe4:	ea24 040e 	bic.w	r4, r4, lr
 8008fe8:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	ea24 0408 	bic.w	r4, r4, r8
 8008ff0:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008ff2:	6805      	ldr	r5, [r0, #0]
 8008ff4:	005c      	lsls	r4, r3, #1
 8008ff6:	fa0a f404 	lsl.w	r4, sl, r4
 8008ffa:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008ffe:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8009002:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8009004:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009008:	f003 0507 	and.w	r5, r3, #7
 800900c:	f8dc e020 	ldr.w	lr, [ip, #32]
 8009010:	00ad      	lsls	r5, r5, #2
 8009012:	fa09 f505 	lsl.w	r5, r9, r5
 8009016:	ea2e 0505 	bic.w	r5, lr, r5
 800901a:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800901e:	68c5      	ldr	r5, [r0, #12]
 8009020:	ea25 0504 	bic.w	r5, r5, r4
 8009024:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8009026:	6845      	ldr	r5, [r0, #4]
 8009028:	ea25 0202 	bic.w	r2, r5, r2
 800902c:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800902e:	6882      	ldr	r2, [r0, #8]
 8009030:	ea22 0404 	bic.w	r4, r2, r4
 8009034:	6084      	str	r4, [r0, #8]
    }

    position++;
 8009036:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8009038:	fa31 f203 	lsrs.w	r2, r1, r3
 800903c:	d019      	beq.n	8009072 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 800903e:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8009042:	ea12 0e01 	ands.w	lr, r2, r1
 8009046:	d0f6      	beq.n	8009036 <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 8009048:	f023 0503 	bic.w	r5, r3, #3
 800904c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009050:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80090a0 <HAL_GPIO_DeInit+0x120>
 8009054:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8009058:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 800905c:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8009060:	00a4      	lsls	r4, r4, #2
 8009062:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009066:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8009068:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800906c:	d195      	bne.n	8008f9a <HAL_GPIO_DeInit+0x1a>
 800906e:	2400      	movs	r4, #0
 8009070:	e7a9      	b.n	8008fc6 <HAL_GPIO_DeInit+0x46>
  }
}
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009076:	fa07 f404 	lsl.w	r4, r7, r4
 800907a:	e7a4      	b.n	8008fc6 <HAL_GPIO_DeInit+0x46>
 800907c:	f04f 0b02 	mov.w	fp, #2
 8009080:	fa0b f404 	lsl.w	r4, fp, r4
 8009084:	e79f      	b.n	8008fc6 <HAL_GPIO_DeInit+0x46>
 8009086:	fa0a f404 	lsl.w	r4, sl, r4
 800908a:	e79c      	b.n	8008fc6 <HAL_GPIO_DeInit+0x46>
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40010400 	.word	0x40010400
 8009094:	40020800 	.word	0x40020800
 8009098:	40020c00 	.word	0x40020c00
 800909c:	40021000 	.word	0x40021000
 80090a0:	40020000 	.word	0x40020000

080090a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80090a4:	6903      	ldr	r3, [r0, #16]
 80090a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80090a8:	bf14      	ite	ne
 80090aa:	2001      	movne	r0, #1
 80090ac:	2000      	moveq	r0, #0
 80090ae:	4770      	bx	lr

080090b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090b0:	b902      	cbnz	r2, 80090b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80090b2:	0409      	lsls	r1, r1, #16
 80090b4:	6181      	str	r1, [r0, #24]
  }
}
 80090b6:	4770      	bx	lr

080090b8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80090b8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090ba:	ea01 0203 	and.w	r2, r1, r3
 80090be:	ea21 0103 	bic.w	r1, r1, r3
 80090c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090c6:	6181      	str	r1, [r0, #24]
}
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop

080090cc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090cc:	4a04      	ldr	r2, [pc, #16]	; (80090e0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80090ce:	6951      	ldr	r1, [r2, #20]
 80090d0:	4201      	tst	r1, r0
 80090d2:	d100      	bne.n	80090d6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80090d4:	4770      	bx	lr
{
 80090d6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090d8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090da:	f7fe f95d 	bl	8007398 <HAL_GPIO_EXTI_Callback>
  }
}
 80090de:	bd08      	pop	{r3, pc}
 80090e0:	40010400 	.word	0x40010400

080090e4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090e4:	2800      	cmp	r0, #0
 80090e6:	f000 80b9 	beq.w	800925c <HAL_I2C_Init+0x178>
{
 80090ea:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80090f0:	4604      	mov	r4, r0
 80090f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 8098 	beq.w	800922c <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090fc:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090fe:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009100:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	f022 0201 	bic.w	r2, r2, #1
 800910a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800911a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800911c:	f001 fd1c 	bl	800ab58 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009120:	6863      	ldr	r3, [r4, #4]
 8009122:	494f      	ldr	r1, [pc, #316]	; (8009260 <HAL_I2C_Init+0x17c>)
 8009124:	428b      	cmp	r3, r1
 8009126:	d84f      	bhi.n	80091c8 <HAL_I2C_Init+0xe4>
 8009128:	4a4e      	ldr	r2, [pc, #312]	; (8009264 <HAL_I2C_Init+0x180>)
 800912a:	4290      	cmp	r0, r2
 800912c:	d97c      	bls.n	8009228 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800912e:	4d4e      	ldr	r5, [pc, #312]	; (8009268 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009130:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8009132:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009136:	1e43      	subs	r3, r0, #1
 8009138:	fbb3 f3f2 	udiv	r3, r3, r2
 800913c:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009140:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8009142:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009144:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009146:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800914a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800914e:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8009152:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009154:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009156:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009158:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800915c:	ea41 010c 	orr.w	r1, r1, ip
 8009160:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009162:	69d1      	ldr	r1, [r2, #28]
 8009164:	ea13 0f0e 	tst.w	r3, lr
 8009168:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800916c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009170:	d161      	bne.n	8009236 <HAL_I2C_Init+0x152>
 8009172:	2304      	movs	r3, #4
 8009174:	430b      	orrs	r3, r1
 8009176:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009178:	6811      	ldr	r1, [r2, #0]
 800917a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800917e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8009182:	4303      	orrs	r3, r0
 8009184:	430b      	orrs	r3, r1
 8009186:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009188:	6891      	ldr	r1, [r2, #8]
 800918a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800918e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8009192:	4303      	orrs	r3, r0
 8009194:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009198:	430b      	orrs	r3, r1
 800919a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800919c:	68d0      	ldr	r0, [r2, #12]
 800919e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80091a2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80091a6:	430b      	orrs	r3, r1
 80091a8:	4303      	orrs	r3, r0
 80091aa:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091ac:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ae:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80091b0:	f043 0301 	orr.w	r3, r3, #1
 80091b4:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80091b6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091b8:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091be:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 80091c4:	4608      	mov	r0, r1
}
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80091c8:	4a28      	ldr	r2, [pc, #160]	; (800926c <HAL_I2C_Init+0x188>)
 80091ca:	4290      	cmp	r0, r2
 80091cc:	d92c      	bls.n	8009228 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80091ce:	4d26      	ldr	r5, [pc, #152]	; (8009268 <HAL_I2C_Init+0x184>)
 80091d0:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80091d8:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091dc:	fb02 f101 	mul.w	r1, r2, r1
 80091e0:	4d23      	ldr	r5, [pc, #140]	; (8009270 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091e2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091e4:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091e8:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091ea:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091ec:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80091f0:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80091f4:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091f6:	6a15      	ldr	r5, [r2, #32]
 80091f8:	3101      	adds	r1, #1
 80091fa:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80091fe:	4329      	orrs	r1, r5
 8009200:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009202:	69d1      	ldr	r1, [r2, #28]
 8009204:	68a5      	ldr	r5, [r4, #8]
 8009206:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800920a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800920e:	b9ad      	cbnz	r5, 800923c <HAL_I2C_Init+0x158>
 8009210:	3801      	subs	r0, #1
 8009212:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009216:	fbb0 f3f3 	udiv	r3, r0, r3
 800921a:	3301      	adds	r3, #1
 800921c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009220:	b1d3      	cbz	r3, 8009258 <HAL_I2C_Init+0x174>
 8009222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009226:	e7a5      	b.n	8009174 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8009228:	2001      	movs	r0, #1
}
 800922a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800922c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8009230:	f7fe fc7e 	bl	8007b30 <HAL_I2C_MspInit>
 8009234:	e762      	b.n	80090fc <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800923a:	e79b      	b.n	8009174 <HAL_I2C_Init+0x90>
 800923c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009240:	3801      	subs	r0, #1
 8009242:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009246:	fbb0 f3f3 	udiv	r3, r0, r3
 800924a:	3301      	adds	r3, #1
 800924c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009250:	b113      	cbz	r3, 8009258 <HAL_I2C_Init+0x174>
 8009252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009256:	e78d      	b.n	8009174 <HAL_I2C_Init+0x90>
 8009258:	2301      	movs	r3, #1
 800925a:	e78b      	b.n	8009174 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800925c:	2001      	movs	r0, #1
}
 800925e:	4770      	bx	lr
 8009260:	000186a0 	.word	0x000186a0
 8009264:	001e847f 	.word	0x001e847f
 8009268:	431bde83 	.word	0x431bde83
 800926c:	003d08ff 	.word	0x003d08ff
 8009270:	10624dd3 	.word	0x10624dd3

08009274 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4605      	mov	r5, r0
 800927a:	b083      	sub	sp, #12
 800927c:	4699      	mov	r9, r3
 800927e:	4688      	mov	r8, r1
 8009280:	4692      	mov	sl, r2
 8009282:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009284:	f7fe fedc 	bl	8008040 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009288:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800928c:	2b20      	cmp	r3, #32
 800928e:	d003      	beq.n	8009298 <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8009290:	2002      	movs	r0, #2
  }
}
 8009292:	b003      	add	sp, #12
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	4606      	mov	r6, r0
 800929a:	e005      	b.n	80092a8 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929c:	f7fe fed0 	bl	8008040 <HAL_GetTick>
 80092a0:	1b80      	subs	r0, r0, r6
 80092a2:	2819      	cmp	r0, #25
 80092a4:	f200 80f8 	bhi.w	8009498 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a8:	682c      	ldr	r4, [r5, #0]
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	ea6f 0c03 	mvn.w	ip, r3
 80092b0:	f01c 0b02 	ands.w	fp, ip, #2
 80092b4:	d0f2      	beq.n	800929c <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80092b6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d0e8      	beq.n	8009290 <HAL_I2C_Master_Transmit+0x1c>
 80092be:	2301      	movs	r3, #1
 80092c0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	d571      	bpl.n	80093ae <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80092ca:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80092cc:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80092ce:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092d6:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80092d8:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80092dc:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80092e0:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80092e2:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092e6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092e8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80092ec:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80092ee:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80092f2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d006      	beq.n	8009308 <HAL_I2C_Master_Transmit+0x94>
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d004      	beq.n	8009308 <HAL_I2C_Master_Transmit+0x94>
 80092fe:	4293      	cmp	r3, r2
 8009300:	d002      	beq.n	8009308 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009302:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009304:	2b12      	cmp	r3, #18
 8009306:	d103      	bne.n	8009310 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800930e:	6023      	str	r3, [r4, #0]
 8009310:	1c7b      	adds	r3, r7, #1
 8009312:	d13e      	bne.n	8009392 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009314:	6963      	ldr	r3, [r4, #20]
 8009316:	07d8      	lsls	r0, r3, #31
 8009318:	d5fc      	bpl.n	8009314 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800931a:	692b      	ldr	r3, [r5, #16]
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009320:	d14a      	bne.n	80093b8 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009322:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8009326:	6121      	str	r1, [r4, #16]
 8009328:	1c78      	adds	r0, r7, #1
 800932a:	d004      	beq.n	8009336 <HAL_I2C_Master_Transmit+0xc2>
 800932c:	e0dd      	b.n	80094ea <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800932e:	6963      	ldr	r3, [r4, #20]
 8009330:	055a      	lsls	r2, r3, #21
 8009332:	f100 80c2 	bmi.w	80094ba <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009336:	6963      	ldr	r3, [r4, #20]
 8009338:	0799      	lsls	r1, r3, #30
 800933a:	d5f8      	bpl.n	800932e <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800933c:	2200      	movs	r2, #0
 800933e:	9201      	str	r2, [sp, #4]
 8009340:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8009342:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009344:	9201      	str	r2, [sp, #4]
 8009346:	69a2      	ldr	r2, [r4, #24]
 8009348:	9201      	str	r2, [sp, #4]
 800934a:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800934c:	2b00      	cmp	r3, #0
 800934e:	d075      	beq.n	800943c <HAL_I2C_Master_Transmit+0x1c8>
 8009350:	1c79      	adds	r1, r7, #1
 8009352:	f040 8081 	bne.w	8009458 <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009356:	6963      	ldr	r3, [r4, #20]
 8009358:	061a      	lsls	r2, r3, #24
 800935a:	d441      	bmi.n	80093e0 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	055b      	lsls	r3, r3, #21
 8009360:	d5f9      	bpl.n	8009356 <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009362:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8009364:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009366:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800936a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800936c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800936e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009372:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009376:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009378:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800937c:	f043 0304 	orr.w	r3, r3, #4
 8009380:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009382:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009384:	2b04      	cmp	r3, #4
 8009386:	f000 80e6 	beq.w	8009556 <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800938a:	2001      	movs	r0, #1
}
 800938c:	b003      	add	sp, #12
 800938e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009392:	6963      	ldr	r3, [r4, #20]
 8009394:	07d9      	lsls	r1, r3, #31
 8009396:	d4c0      	bmi.n	800931a <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009398:	f7fe fe52 	bl	8008040 <HAL_GetTick>
 800939c:	1b80      	subs	r0, r0, r6
 800939e:	4287      	cmp	r7, r0
 80093a0:	f0c0 80b3 	bcc.w	800950a <HAL_I2C_Master_Transmit+0x296>
 80093a4:	2f00      	cmp	r7, #0
 80093a6:	f000 80b0 	beq.w	800950a <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093aa:	682c      	ldr	r4, [r5, #0]
 80093ac:	e7b0      	b.n	8009310 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f043 0301 	orr.w	r3, r3, #1
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	e788      	b.n	80092ca <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80093b8:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80093bc:	f003 0306 	and.w	r3, r3, #6
 80093c0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80093c4:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80093c6:	1c7b      	adds	r3, r7, #1
 80093c8:	d003      	beq.n	80093d2 <HAL_I2C_Master_Transmit+0x15e>
 80093ca:	e0b5      	b.n	8009538 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093cc:	6963      	ldr	r3, [r4, #20]
 80093ce:	0559      	lsls	r1, r3, #21
 80093d0:	d473      	bmi.n	80094ba <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093d2:	6963      	ldr	r3, [r4, #20]
 80093d4:	0718      	lsls	r0, r3, #28
 80093d6:	d5f9      	bpl.n	80093cc <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80093d8:	fa5f f388 	uxtb.w	r3, r8
 80093dc:	6123      	str	r3, [r4, #16]
 80093de:	e7a3      	b.n	8009328 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80093e2:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093e6:	4601      	mov	r1, r0
 80093e8:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80093ec:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093f0:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80093f2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80093f4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80093fc:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 80093fe:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009400:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8009402:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009404:	d50c      	bpl.n	8009420 <HAL_I2C_Master_Transmit+0x1ac>
 8009406:	b15a      	cbz	r2, 8009420 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009408:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800940a:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800940e:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8009410:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8009412:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8009414:	3b01      	subs	r3, #1
 8009416:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8009418:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800941c:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800941e:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8009420:	1c78      	adds	r0, r7, #1
 8009422:	d129      	bne.n	8009478 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009424:	6963      	ldr	r3, [r4, #20]
 8009426:	0759      	lsls	r1, r3, #29
 8009428:	d405      	bmi.n	8009436 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	055a      	lsls	r2, r3, #21
 800942e:	d498      	bmi.n	8009362 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009430:	6963      	ldr	r3, [r4, #20]
 8009432:	0759      	lsls	r1, r3, #29
 8009434:	d5f9      	bpl.n	800942a <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8009436:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009438:	2b00      	cmp	r3, #0
 800943a:	d189      	bne.n	8009350 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800943c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800943e:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009440:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8009442:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009448:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800944a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800944e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009452:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 8009456:	e71c      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009458:	6963      	ldr	r3, [r4, #20]
 800945a:	0618      	lsls	r0, r3, #24
 800945c:	d4c0      	bmi.n	80093e0 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800945e:	6963      	ldr	r3, [r4, #20]
 8009460:	0558      	lsls	r0, r3, #21
 8009462:	f53f af7e 	bmi.w	8009362 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009466:	f7fe fdeb 	bl	8008040 <HAL_GetTick>
 800946a:	1b80      	subs	r0, r0, r6
 800946c:	4287      	cmp	r7, r0
 800946e:	d379      	bcc.n	8009564 <HAL_I2C_Master_Transmit+0x2f0>
 8009470:	2f00      	cmp	r7, #0
 8009472:	d077      	beq.n	8009564 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009474:	682c      	ldr	r4, [r5, #0]
 8009476:	e76b      	b.n	8009350 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009478:	6963      	ldr	r3, [r4, #20]
 800947a:	075b      	lsls	r3, r3, #29
 800947c:	d4db      	bmi.n	8009436 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800947e:	6963      	ldr	r3, [r4, #20]
 8009480:	055b      	lsls	r3, r3, #21
 8009482:	f53f af6e 	bmi.w	8009362 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009486:	f7fe fddb 	bl	8008040 <HAL_GetTick>
 800948a:	1b80      	subs	r0, r0, r6
 800948c:	4287      	cmp	r7, r0
 800948e:	d369      	bcc.n	8009564 <HAL_I2C_Master_Transmit+0x2f0>
 8009490:	2f00      	cmp	r7, #0
 8009492:	d067      	beq.n	8009564 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009494:	682c      	ldr	r4, [r5, #0]
 8009496:	e7c3      	b.n	8009420 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8009498:	2320      	movs	r3, #32
      return HAL_BUSY;
 800949a:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 800949c:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094a0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094a4:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80094aa:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094ae:	f043 0320 	orr.w	r3, r3, #32
 80094b2:	642b      	str	r3, [r5, #64]	; 0x40
}
 80094b4:	b003      	add	sp, #12
 80094b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80094ba:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094bc:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80094c0:	2120      	movs	r1, #32
      return HAL_ERROR;
 80094c2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094c4:	6823      	ldr	r3, [r4, #0]
 80094c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094ca:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094cc:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80094ce:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094d0:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094d4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094d8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80094da:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094de:	f043 0304 	orr.w	r3, r3, #4
 80094e2:	642b      	str	r3, [r5, #64]	; 0x40
}
 80094e4:	b003      	add	sp, #12
 80094e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094ea:	6963      	ldr	r3, [r4, #20]
 80094ec:	079b      	lsls	r3, r3, #30
 80094ee:	f53f af25 	bmi.w	800933c <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094f2:	6963      	ldr	r3, [r4, #20]
 80094f4:	055b      	lsls	r3, r3, #21
 80094f6:	d4e0      	bmi.n	80094ba <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f8:	f7fe fda2 	bl	8008040 <HAL_GetTick>
 80094fc:	1b80      	subs	r0, r0, r6
 80094fe:	4287      	cmp	r7, r0
 8009500:	d33e      	bcc.n	8009580 <HAL_I2C_Master_Transmit+0x30c>
 8009502:	2f00      	cmp	r7, #0
 8009504:	d03c      	beq.n	8009580 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009506:	682c      	ldr	r4, [r5, #0]
 8009508:	e70e      	b.n	8009328 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800950a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800950c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800950e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009510:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009514:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009518:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800951a:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800951c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8009520:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009524:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009526:	680b      	ldr	r3, [r1, #0]
 8009528:	05da      	lsls	r2, r3, #23
 800952a:	f57f af2e 	bpl.w	800938a <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800952e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8009532:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009534:	642b      	str	r3, [r5, #64]	; 0x40
 8009536:	e6ac      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009538:	6963      	ldr	r3, [r4, #20]
 800953a:	071a      	lsls	r2, r3, #28
 800953c:	f53f af4c 	bmi.w	80093d8 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009540:	6963      	ldr	r3, [r4, #20]
 8009542:	055a      	lsls	r2, r3, #21
 8009544:	d4b9      	bmi.n	80094ba <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009546:	f7fe fd7b 	bl	8008040 <HAL_GetTick>
 800954a:	1b83      	subs	r3, r0, r6
 800954c:	429f      	cmp	r7, r3
 800954e:	d317      	bcc.n	8009580 <HAL_I2C_Master_Transmit+0x30c>
 8009550:	b1b7      	cbz	r7, 8009580 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009552:	682c      	ldr	r4, [r5, #0]
 8009554:	e737      	b.n	80093c6 <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009556:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 8009558:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009560:	6013      	str	r3, [r2, #0]
 8009562:	e696      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009564:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8009566:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009568:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800956a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800956e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009572:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8009574:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009578:	f043 0320 	orr.w	r3, r3, #32
 800957c:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800957e:	e700      	b.n	8009382 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009580:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8009582:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009584:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009586:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800958a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800958e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8009590:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009592:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8009596:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800959a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800959c:	e679      	b.n	8009292 <HAL_I2C_Master_Transmit+0x1e>
 800959e:	bf00      	nop

080095a0 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d05d      	beq.n	8009660 <HAL_PCD_Init+0xc0>
{
 80095a4:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80095a6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80095aa:	4604      	mov	r4, r0
{
 80095ac:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80095ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d04f      	beq.n	8009656 <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80095b6:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80095b8:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80095ba:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80095be:	f002 f831 	bl	800b624 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095c2:	6860      	ldr	r0, [r4, #4]
 80095c4:	b368      	cbz	r0, 8009622 <HAL_PCD_Init+0x82>
 80095c6:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095c8:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80095cc:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 80095ce:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80095d2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095d6:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80095da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80095de:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095e0:	fa5f f28c 	uxtb.w	r2, ip
 80095e4:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 80095e6:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80095ea:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80095ee:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80095f2:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095f4:	d3eb      	bcc.n	80095ce <HAL_PCD_Init+0x2e>
 80095f6:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80095f8:	4611      	mov	r1, r2
 80095fa:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80095fe:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009602:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 8009606:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800960a:	fa5f f28c 	uxtb.w	r2, ip
 800960e:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009610:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8009614:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009618:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800961c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009620:	d3eb      	bcc.n	80095fa <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009622:	46a4      	mov	ip, r4
 8009624:	46ee      	mov	lr, sp
 8009626:	f85c 6b10 	ldr.w	r6, [ip], #16
 800962a:	1d25      	adds	r5, r4, #4
 800962c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009630:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009634:	f8dc 3000 	ldr.w	r3, [ip]
 8009638:	4630      	mov	r0, r6
 800963a:	f8ce 3000 	str.w	r3, [lr]
 800963e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009642:	f001 fff9 	bl	800b638 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009646:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8009648:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800964a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800964e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8009652:	b006      	add	sp, #24
 8009654:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8009656:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800965a:	f003 fd59 	bl	800d110 <HAL_PCD_MspInit>
 800965e:	e7aa      	b.n	80095b6 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8009660:	2001      	movs	r0, #1
}
 8009662:	4770      	bx	lr

08009664 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009664:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8009666:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800966a:	2b01      	cmp	r3, #1
 800966c:	d012      	beq.n	8009694 <HAL_PCD_Start+0x30>
 800966e:	4604      	mov	r4, r0
 8009670:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8009672:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009674:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8009678:	f001 ffca 	bl	800b610 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800967c:	4629      	mov	r1, r5
 800967e:	4620      	mov	r0, r4
 8009680:	f003 fd3a 	bl	800d0f8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	f002 fdc7 	bl	800c218 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800968a:	2300      	movs	r3, #0
 800968c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8009690:	4618      	mov	r0, r3
}
 8009692:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8009694:	2002      	movs	r0, #2
}
 8009696:	bd38      	pop	{r3, r4, r5, pc}

08009698 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800969e:	6800      	ldr	r0, [r0, #0]
 80096a0:	f002 fdbc 	bl	800c21c <USB_ReadInterrupts>
 80096a4:	0406      	lsls	r6, r0, #16
 80096a6:	d443      	bmi.n	8009730 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80096a8:	6820      	ldr	r0, [r4, #0]
 80096aa:	f002 fdb7 	bl	800c21c <USB_ReadInterrupts>
 80096ae:	0545      	lsls	r5, r0, #21
 80096b0:	f100 8180 	bmi.w	80099b4 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80096b4:	6820      	ldr	r0, [r4, #0]
 80096b6:	f002 fdb1 	bl	800c21c <USB_ReadInterrupts>
 80096ba:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80096be:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80096c0:	d007      	beq.n	80096d2 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80096c2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80096c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ca:	041b      	lsls	r3, r3, #16
 80096cc:	0c1b      	lsrs	r3, r3, #16
 80096ce:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80096d2:	f002 fda3 	bl	800c21c <USB_ReadInterrupts>
 80096d6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80096da:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80096dc:	d007      	beq.n	80096ee <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80096de:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80096e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	0c1b      	lsrs	r3, r3, #16
 80096ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80096ee:	f002 fd95 	bl	800c21c <USB_ReadInterrupts>
 80096f2:	04c0      	lsls	r0, r0, #19
 80096f4:	f100 81f6 	bmi.w	8009ae4 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80096f8:	6820      	ldr	r0, [r4, #0]
 80096fa:	f002 fd8f 	bl	800c21c <USB_ReadInterrupts>
 80096fe:	0501      	lsls	r1, r0, #20
 8009700:	f100 81d5 	bmi.w	8009aae <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	f002 fd89 	bl	800c21c <USB_ReadInterrupts>
 800970a:	0582      	lsls	r2, r0, #22
 800970c:	f100 81c2 	bmi.w	8009a94 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8009710:	6820      	ldr	r0, [r4, #0]
 8009712:	f002 fd83 	bl	800c21c <USB_ReadInterrupts>
 8009716:	05c3      	lsls	r3, r0, #23
 8009718:	d508      	bpl.n	800972c <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	0c1b      	lsrs	r3, r3, #16
 8009728:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800972c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009736:	4610      	mov	r0, r2
 8009738:	041d      	lsls	r5, r3, #16
 800973a:	d5b6      	bpl.n	80096aa <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800973c:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8009a8c <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009740:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8009a90 <HAL_PCD_IRQHandler+0x3f8>
 8009744:	e011      	b.n	800976a <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009746:	f011 0110 	ands.w	r1, r1, #16
 800974a:	f000 8151 	beq.w	80099f0 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800974e:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009750:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009754:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009756:	f040 8176 	bne.w	8009a46 <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800975a:	0419      	lsls	r1, r3, #16
 800975c:	f100 821b 	bmi.w	8009b96 <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009760:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009764:	041e      	lsls	r6, r3, #16
 8009766:	f140 811f 	bpl.w	80099a8 <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 800976a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800976e:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8009770:	f015 050f 	ands.w	r5, r5, #15
 8009774:	d0e7      	beq.n	8009746 <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009776:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800977a:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800977c:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800977e:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009782:	f100 80a0 	bmi.w	80098c6 <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009786:	f018 0f80 	tst.w	r8, #128	; 0x80
 800978a:	d0e9      	beq.n	8009760 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800978c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8009790:	1977      	adds	r7, r6, r5
 8009792:	b29b      	uxth	r3, r3
 8009794:	ea03 0309 	and.w	r3, r3, r9
 8009798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800979c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80097a0:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80097a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	f000 80d0 	beq.w	800994e <HAL_PCD_IRQHandler+0x2b6>
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80cd 	beq.w	800994e <HAL_PCD_IRQHandler+0x2b6>
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d103      	bne.n	80097c0 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80097b8:	f418 7f80 	tst.w	r8, #256	; 0x100
 80097bc:	f000 80c7 	beq.w	800994e <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80097c4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80097ce:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80097d6:	f000 8255 	beq.w	8009c84 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 80097da:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097de:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 80097e2:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80097e6:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 80097ee:	459e      	cmp	lr, r3
 80097f0:	f240 834b 	bls.w	8009e8a <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 80097f4:	ebae 0e03 	sub.w	lr, lr, r3
 80097f8:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80097fc:	f1be 0f00 	cmp.w	lr, #0
 8009800:	f000 8346 	beq.w	8009e90 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009804:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009808:	d00f      	beq.n	800982a <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800980a:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 800980e:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8009812:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8009816:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800981a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800981e:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8009822:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8009826:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800982a:	eb06 0e05 	add.w	lr, r6, r5
 800982e:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8009832:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 8009836:	f1bc 0f01 	cmp.w	ip, #1
 800983a:	f040 8316 	bne.w	8009e6a <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 800983e:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8009842:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8009846:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 800984a:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800984e:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8009852:	441a      	add	r2, r3
 8009854:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8009858:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 800985c:	4542      	cmp	r2, r8
 800985e:	f0c0 83e4 	bcc.w	800a02a <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 8009862:	eba2 0208 	sub.w	r2, r2, r8
 8009866:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800986a:	fa1f f388 	uxth.w	r3, r8
 800986e:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009872:	f1be 0f00 	cmp.w	lr, #0
 8009876:	f040 83cb 	bne.w	800a010 <HAL_PCD_IRQHandler+0x978>
 800987a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800987e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009882:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8009886:	b292      	uxth	r2, r2
 8009888:	eb0e 0102 	add.w	r1, lr, r2
 800988c:	f1b8 0f00 	cmp.w	r8, #0
 8009890:	f040 83f8 	bne.w	800a084 <HAL_PCD_IRQHandler+0x9ec>
 8009894:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8009898:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800989c:	0409      	lsls	r1, r1, #16
 800989e:	0c09      	lsrs	r1, r1, #16
 80098a0:	f82e 1002 	strh.w	r1, [lr, r2]
 80098a4:	f83e 1002 	ldrh.w	r1, [lr, r2]
 80098a8:	b289      	uxth	r1, r1
 80098aa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80098ae:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80098b2:	1972      	adds	r2, r6, r5
 80098b4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80098b8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80098ba:	4661      	mov	r1, ip
 80098bc:	f002 fcb2 	bl	800c224 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	4602      	mov	r2, r0
 80098c4:	e2d1      	b.n	8009e6a <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80098c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80098ca:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80098ce:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80098d0:	4013      	ands	r3, r2
 80098d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d6:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80098da:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80098de:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f040 811c 	bne.w	8009b20 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80098e8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80098ec:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	3306      	adds	r3, #6
 80098f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80098fc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009900:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009904:	461f      	mov	r7, r3
          if (count != 0U)
 8009906:	2b00      	cmp	r3, #0
 8009908:	f040 81ac 	bne.w	8009c64 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 800990c:	1971      	adds	r1, r6, r5
 800990e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8009912:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8009916:	00c9      	lsls	r1, r1, #3
 8009918:	443a      	add	r2, r7
 800991a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800991e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009922:	443a      	add	r2, r7
 8009924:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009928:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800992c:	b122      	cbz	r2, 8009938 <HAL_PCD_IRQHandler+0x2a0>
 800992e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009932:	42bb      	cmp	r3, r7
 8009934:	f240 819d 	bls.w	8009c72 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009938:	1973      	adds	r3, r6, r5
 800993a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800993e:	4620      	mov	r0, r4
 8009940:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8009944:	f003 fc0c 	bl	800d160 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800994c:	e71b      	b.n	8009786 <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800994e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009952:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009956:	b29b      	uxth	r3, r3
 8009958:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 800995c:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800995e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009962:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8009966:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800996a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800996c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009970:	429a      	cmp	r2, r3
 8009972:	f240 8108 	bls.w	8009b86 <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8009976:	1ad2      	subs	r2, r2, r3
 8009978:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800997a:	2a00      	cmp	r2, #0
 800997c:	f000 8105 	beq.w	8009b8a <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8009980:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8009982:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8009984:	441a      	add	r2, r3
 8009986:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8009988:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800998a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 800998e:	4413      	add	r3, r2
 8009990:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009992:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009996:	f002 f8b7 	bl	800bb08 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800999a:	6820      	ldr	r0, [r4, #0]
 800999c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80099a0:	4602      	mov	r2, r0
 80099a2:	041e      	lsls	r6, r3, #16
 80099a4:	f53f aee1 	bmi.w	800976a <HAL_PCD_IRQHandler+0xd2>
 80099a8:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80099aa:	f002 fc37 	bl	800c21c <USB_ReadInterrupts>
 80099ae:	0545      	lsls	r5, r0, #21
 80099b0:	f57f ae80 	bpl.w	80096b4 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80099b4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80099b6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80099b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80099bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099c0:	041b      	lsls	r3, r3, #16
 80099c2:	0c1b      	lsrs	r3, r3, #16
 80099c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80099c8:	f003 fbe2 	bl	800d190 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80099cc:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	f43f ae6f 	beq.w	80096b4 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 80099d6:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80099d8:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80099da:	4629      	mov	r1, r5
 80099dc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80099de:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80099e2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80099e6:	f002 fc11 	bl	800c20c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80099ea:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 80099ee:	e661      	b.n	80096b4 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80099f0:	8803      	ldrh	r3, [r0, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	ea03 0309 	and.w	r3, r3, r9
 80099f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099fc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80099fe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009a02:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009a10:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8009a14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009a16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a1a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8009a1c:	4413      	add	r3, r2
 8009a1e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009a20:	4620      	mov	r0, r4
 8009a22:	f003 fba7 	bl	800d174 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009a26:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009a2a:	b363      	cbz	r3, 8009a86 <HAL_PCD_IRQHandler+0x3ee>
 8009a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a2e:	bb53      	cbnz	r3, 8009a86 <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009a30:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009a3a:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8009a3e:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8009a40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8009a44:	e68c      	b.n	8009760 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009a4a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009a58:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009a5c:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009a64:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009a68:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8009a6c:	f002 fbea 	bl	800c244 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009a74:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009a76:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a78:	8811      	ldrh	r1, [r2, #0]
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a80:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009a82:	f003 fb65 	bl	800d150 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009a86:	6820      	ldr	r0, [r4, #0]
 8009a88:	4602      	mov	r2, r0
 8009a8a:	e669      	b.n	8009760 <HAL_PCD_IRQHandler+0xc8>
 8009a8c:	ffff8f0f 	.word	0xffff8f0f
 8009a90:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009a94:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8009a96:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009a98:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	0c1b      	lsrs	r3, r3, #16
 8009aa4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009aa8:	f003 fb6e 	bl	800d188 <HAL_PCD_SOFCallback>
 8009aac:	e630      	b.n	8009710 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009aae:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8009ab0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009ab2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	f043 0308 	orr.w	r3, r3, #8
 8009abc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009ac0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ac8:	041b      	lsls	r3, r3, #16
 8009aca:	0c1b      	lsrs	r3, r3, #16
 8009acc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009ad0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	f043 0304 	orr.w	r3, r3, #4
 8009ada:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8009ade:	f003 fb69 	bl	800d1b4 <HAL_PCD_SuspendCallback>
 8009ae2:	e60f      	b.n	8009704 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009ae4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8009ae6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009ae8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009aec:	f023 0304 	bic.w	r3, r3, #4
 8009af0:	041b      	lsls	r3, r3, #16
 8009af2:	0c1b      	lsrs	r3, r3, #16
 8009af4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009af8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009afc:	f023 0308 	bic.w	r3, r3, #8
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009b08:	f003 fb64 	bl	800d1d4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b16:	041b      	lsls	r3, r3, #16
 8009b18:	0c1b      	lsrs	r3, r3, #16
 8009b1a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8009b1e:	e5ec      	b.n	80096fa <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8009b20:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	f000 8120 	beq.w	8009d6a <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009b2a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009b2e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	0c1b      	lsrs	r3, r3, #16
 8009b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b46:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009b4a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009b4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009b52:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009b56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b5a:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009b5c:	d06e      	beq.n	8009c3c <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009b5e:	3302      	adds	r3, #2
 8009b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b68:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009b70:	461f      	mov	r7, r3
              if (count != 0U)
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f43f aeca 	beq.w	800990c <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009b78:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009b7c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009b80:	f002 fb60 	bl	800c244 <USB_ReadPMA>
 8009b84:	e6c2      	b.n	800990c <HAL_PCD_IRQHandler+0x274>
 8009b86:	2300      	movs	r3, #0
 8009b88:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f003 faf2 	bl	800d174 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009b90:	6820      	ldr	r0, [r4, #0]
 8009b92:	4602      	mov	r2, r0
 8009b94:	e5e4      	b.n	8009760 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009b9a:	8802      	ldrh	r2, [r0, #0]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ba4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009ba8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009bb6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bbe:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009bc2:	b193      	cbz	r3, 8009bea <HAL_PCD_IRQHandler+0x552>
 8009bc4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8009bc8:	b179      	cbz	r1, 8009bea <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009bca:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009bce:	f002 fb39 	bl	800c244 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8009bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bd6:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009bda:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8009bdc:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009bde:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8009be0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009be4:	f003 fabc 	bl	800d160 <HAL_PCD_DataOutStageCallback>
 8009be8:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009bea:	8803      	ldrh	r3, [r0, #0]
 8009bec:	4602      	mov	r2, r0
 8009bee:	051b      	lsls	r3, r3, #20
 8009bf0:	f53f adb6 	bmi.w	8009760 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009bf4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009bf8:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8009c02:	2900      	cmp	r1, #0
 8009c04:	f040 80a6 	bne.w	8009d54 <HAL_PCD_IRQHandler+0x6bc>
 8009c08:	5ae9      	ldrh	r1, [r5, r3]
 8009c0a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009c0e:	0409      	lsls	r1, r1, #16
 8009c10:	0c09      	lsrs	r1, r1, #16
 8009c12:	52e9      	strh	r1, [r5, r3]
 8009c14:	5ae9      	ldrh	r1, [r5, r3]
 8009c16:	b289      	uxth	r1, r1
 8009c18:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009c1c:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009c1e:	8803      	ldrh	r3, [r0, #0]
 8009c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c28:	041b      	lsls	r3, r3, #16
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c38:	8003      	strh	r3, [r0, #0]
 8009c3a:	e591      	b.n	8009760 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c3c:	3306      	adds	r3, #6
 8009c3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c46:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009c4e:	461f      	mov	r7, r3
              if (count != 0U)
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f43f ae5b 	beq.w	800990c <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009c56:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009c5a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c5e:	f002 faf1 	bl	800c244 <USB_ReadPMA>
 8009c62:	e653      	b.n	800990c <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009c64:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009c68:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c6c:	f002 faea 	bl	800c244 <USB_ReadPMA>
 8009c70:	e64c      	b.n	800990c <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8009c72:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009c76:	6820      	ldr	r0, [r4, #0]
 8009c78:	4421      	add	r1, r4
 8009c7a:	f001 ff45 	bl	800bb08 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	4602      	mov	r2, r0
 8009c82:	e580      	b.n	8009786 <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c84:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8009c88:	1973      	adds	r3, r6, r5
 8009c8a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009c8e:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c92:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8009c96:	45f3      	cmp	fp, lr
 8009c98:	f0c0 80a5 	bcc.w	8009de6 <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8009c9c:	ebab 0c0e 	sub.w	ip, fp, lr
 8009ca0:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8009ca4:	f1bc 0f00 	cmp.w	ip, #0
 8009ca8:	f000 809f 	beq.w	8009dea <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009cac:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009cb0:	d10d      	bne.n	8009cce <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009cb2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbe:	041b      	lsls	r3, r3, #16
 8009cc0:	0c1b      	lsrs	r3, r3, #16
 8009cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8009cce:	1973      	adds	r3, r6, r5
 8009cd0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009cd4:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8009cd8:	f1bc 0f01 	cmp.w	ip, #1
 8009cdc:	f040 80c5 	bne.w	8009e6a <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8009ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8009ce2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8009ce6:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8009cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8009cec:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8009cf0:	4472      	add	r2, lr
 8009cf2:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8009cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cf6:	4542      	cmp	r2, r8
 8009cf8:	f0c0 81ab 	bcc.w	800a052 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8009cfc:	eba2 0208 	sub.w	r2, r2, r8
 8009d00:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009d02:	fa1f fe88 	uxth.w	lr, r8
 8009d06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f040 8194 	bne.w	800a038 <HAL_PCD_IRQHandler+0x9a0>
 8009d10:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009d14:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009d18:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009d1c:	b292      	uxth	r2, r2
 8009d1e:	188b      	adds	r3, r1, r2
 8009d20:	f1b8 0f00 	cmp.w	r8, #0
 8009d24:	f040 81d0 	bne.w	800a0c8 <HAL_PCD_IRQHandler+0xa30>
 8009d28:	5a8b      	ldrh	r3, [r1, r2]
 8009d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d2e:	041b      	lsls	r3, r3, #16
 8009d30:	0c1b      	lsrs	r3, r3, #16
 8009d32:	528b      	strh	r3, [r1, r2]
 8009d34:	5a8b      	ldrh	r3, [r1, r2]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d3c:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009d3e:	1972      	adds	r2, r6, r5
 8009d40:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009d44:	4673      	mov	r3, lr
 8009d46:	4661      	mov	r1, ip
 8009d48:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009d4a:	f002 fa6b 	bl	800c224 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009d4e:	6820      	ldr	r0, [r4, #0]
 8009d50:	4602      	mov	r2, r0
 8009d52:	e08a      	b.n	8009e6a <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009d54:	293e      	cmp	r1, #62	; 0x3e
 8009d56:	f200 80cb 	bhi.w	8009ef0 <HAL_PCD_IRQHandler+0x858>
 8009d5a:	084e      	lsrs	r6, r1, #1
 8009d5c:	07cf      	lsls	r7, r1, #31
 8009d5e:	bf48      	it	mi
 8009d60:	3601      	addmi	r6, #1
 8009d62:	02b1      	lsls	r1, r6, #10
 8009d64:	b289      	uxth	r1, r1
 8009d66:	52e9      	strh	r1, [r5, r3]
 8009d68:	e759      	b.n	8009c1e <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d6a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d6e:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d72:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d74:	f000 80c7 	beq.w	8009f06 <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d78:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009d86:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009d8a:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009d92:	459c      	cmp	ip, r3
 8009d94:	461f      	mov	r7, r3
 8009d96:	f0c0 8112 	bcc.w	8009fbe <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8009d9a:	ebac 0c03 	sub.w	ip, ip, r3
 8009d9e:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009da2:	f1bc 0f00 	cmp.w	ip, #0
 8009da6:	f000 810e 	beq.w	8009fc6 <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009daa:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009dae:	d00d      	beq.n	8009dcc <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009db0:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009db4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009db8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009dbc:	0409      	lsls	r1, r1, #16
 8009dbe:	0c09      	lsrs	r1, r1, #16
 8009dc0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009dc4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009dc8:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f000 80c3 	beq.w	8009f58 <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009dd2:	1971      	adds	r1, r6, r5
 8009dd4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009dd8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009ddc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009de0:	f002 fa30 	bl	800c244 <USB_ReadPMA>
 8009de4:	e592      	b.n	800990c <HAL_PCD_IRQHandler+0x274>
 8009de6:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009dea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f040 80be 	bne.w	8009f70 <HAL_PCD_IRQHandler+0x8d8>
 8009df4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009df8:	010b      	lsls	r3, r1, #4
 8009dfa:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009dfe:	4406      	add	r6, r0
 8009e00:	b2ad      	uxth	r5, r5
 8009e02:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e08:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009e0c:	0412      	lsls	r2, r2, #16
 8009e0e:	0c12      	lsrs	r2, r2, #16
 8009e10:	5372      	strh	r2, [r6, r5]
 8009e12:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e14:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e16:	b292      	uxth	r2, r2
 8009e18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e1c:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e1e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009e22:	b280      	uxth	r0, r0
 8009e24:	5a1a      	ldrh	r2, [r3, r0]
 8009e26:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009e2a:	0412      	lsls	r2, r2, #16
 8009e2c:	0c12      	lsrs	r2, r2, #16
 8009e2e:	521a      	strh	r2, [r3, r0]
 8009e30:	5a1a      	ldrh	r2, [r3, r0]
 8009e32:	b292      	uxth	r2, r2
 8009e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e38:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f003 f99a 	bl	800d174 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009e40:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009e44:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009e46:	d183      	bne.n	8009d50 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009e48:	4602      	mov	r2, r0
 8009e4a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009e4e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	0c1b      	lsrs	r3, r3, #16
 8009e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e66:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009e6a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009e6e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	ea03 030a 	and.w	r3, r3, sl
 8009e78:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e84:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8009e88:	e46a      	b.n	8009760 <HAL_PCD_IRQHandler+0xc8>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d17f      	bne.n	8009f98 <HAL_PCD_IRQHandler+0x900>
 8009e98:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009e9c:	010b      	lsls	r3, r1, #4
 8009e9e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009ea2:	4406      	add	r6, r0
 8009ea4:	b2ad      	uxth	r5, r5
 8009ea6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009eac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009eb0:	0412      	lsls	r2, r2, #16
 8009eb2:	0c12      	lsrs	r2, r2, #16
 8009eb4:	5372      	strh	r2, [r6, r5]
 8009eb6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009eb8:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009eba:	b292      	uxth	r2, r2
 8009ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ec0:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ec2:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009ec6:	b280      	uxth	r0, r0
 8009ec8:	5a1a      	ldrh	r2, [r3, r0]
 8009eca:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009ece:	0412      	lsls	r2, r2, #16
 8009ed0:	0c12      	lsrs	r2, r2, #16
 8009ed2:	521a      	strh	r2, [r3, r0]
 8009ed4:	5a1a      	ldrh	r2, [r3, r0]
 8009ed6:	b292      	uxth	r2, r2
 8009ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009edc:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f003 f948 	bl	800d174 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009ee4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009ee8:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009eea:	d1ad      	bne.n	8009e48 <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009eec:	4602      	mov	r2, r0
 8009eee:	e7bc      	b.n	8009e6a <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009ef0:	094e      	lsrs	r6, r1, #5
 8009ef2:	06c9      	lsls	r1, r1, #27
 8009ef4:	4989      	ldr	r1, [pc, #548]	; (800a11c <HAL_PCD_IRQHandler+0xa84>)
 8009ef6:	bf08      	it	eq
 8009ef8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009efc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009f00:	b289      	uxth	r1, r1
 8009f02:	52e9      	strh	r1, [r5, r3]
 8009f04:	e68b      	b.n	8009c1e <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009f06:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009f0a:	3306      	adds	r3, #6
 8009f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009f14:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009f18:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009f20:	459e      	cmp	lr, r3
 8009f22:	461f      	mov	r7, r3
 8009f24:	d360      	bcc.n	8009fe8 <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8009f26:	ebae 0e03 	sub.w	lr, lr, r3
 8009f2a:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009f2e:	f1be 0f00 	cmp.w	lr, #0
 8009f32:	d05b      	beq.n	8009fec <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009f34:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009f38:	d10d      	bne.n	8009f56 <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009f3a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009f3e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009f42:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009f46:	0409      	lsls	r1, r1, #16
 8009f48:	0c09      	lsrs	r1, r1, #16
 8009f4a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009f4e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009f52:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009f56:	b90b      	cbnz	r3, 8009f5c <HAL_PCD_IRQHandler+0x8c4>
 8009f58:	461f      	mov	r7, r3
 8009f5a:	e4d7      	b.n	800990c <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009f5c:	1971      	adds	r1, r6, r5
 8009f5e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009f62:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009f66:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009f6a:	f002 f96b 	bl	800c244 <USB_ReadPMA>
 8009f6e:	e4cd      	b.n	800990c <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	f47f af62 	bne.w	8009e3a <HAL_PCD_IRQHandler+0x7a2>
 8009f76:	2500      	movs	r5, #0
 8009f78:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f7c:	010b      	lsls	r3, r1, #4
 8009f7e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009f82:	b292      	uxth	r2, r2
 8009f84:	4406      	add	r6, r0
 8009f86:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f88:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f90:	4403      	add	r3, r0
 8009f92:	b292      	uxth	r2, r2
 8009f94:	529d      	strh	r5, [r3, r2]
 8009f96:	e750      	b.n	8009e3a <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d1a0      	bne.n	8009ede <HAL_PCD_IRQHandler+0x846>
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009fa2:	010b      	lsls	r3, r1, #4
 8009fa4:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009fa8:	b292      	uxth	r2, r2
 8009faa:	4406      	add	r6, r0
 8009fac:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009fae:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fb6:	4403      	add	r3, r0
 8009fb8:	b292      	uxth	r2, r2
 8009fba:	529d      	strh	r5, [r3, r2]
 8009fbc:	e78f      	b.n	8009ede <HAL_PCD_IRQHandler+0x846>
 8009fbe:	f04f 0c00 	mov.w	ip, #0
 8009fc2:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009fc6:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009fca:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009fce:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009fd2:	0409      	lsls	r1, r1, #16
 8009fd4:	0c09      	lsrs	r1, r1, #16
 8009fd6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009fda:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009fde:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009fe2:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009fe6:	e6e0      	b.n	8009daa <HAL_PCD_IRQHandler+0x712>
 8009fe8:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009fec:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009ff0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009ff4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009ff8:	0409      	lsls	r1, r1, #16
 8009ffa:	0c09      	lsrs	r1, r1, #16
 8009ffc:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800a000:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a004:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a008:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 800a00c:	e792      	b.n	8009f34 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a00e:	b293      	uxth	r3, r2
 800a010:	f1be 0f01 	cmp.w	lr, #1
 800a014:	f47f ac4d 	bne.w	80098b2 <HAL_PCD_IRQHandler+0x21a>
 800a018:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a01c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a020:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800a024:	b292      	uxth	r2, r2
 800a026:	528b      	strh	r3, [r1, r2]
 800a028:	e443      	b.n	80098b2 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 800a02a:	b9ba      	cbnz	r2, 800a05c <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 800a02c:	4698      	mov	r8, r3
 800a02e:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 800a032:	e41c      	b.n	800986e <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a034:	fa1f fe82 	uxth.w	lr, r2
 800a038:	2b01      	cmp	r3, #1
 800a03a:	f47f ae80 	bne.w	8009d3e <HAL_PCD_IRQHandler+0x6a6>
 800a03e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a042:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800a046:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	f822 e003 	strh.w	lr, [r2, r3]
 800a050:	e675      	b.n	8009d3e <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 800a052:	bb22      	cbnz	r2, 800a09e <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 800a054:	46f0      	mov	r8, lr
 800a056:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800a05a:	e654      	b.n	8009d06 <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800a062:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a066:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 800a06a:	f1be 0f00 	cmp.w	lr, #0
 800a06e:	d1ce      	bne.n	800a00e <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a070:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a072:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a076:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800a080:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a082:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a084:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a088:	d82b      	bhi.n	800a0e2 <HAL_PCD_IRQHandler+0xa4a>
 800a08a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a08e:	f018 0f01 	tst.w	r8, #1
 800a092:	bf18      	it	ne
 800a094:	3201      	addne	r2, #1
 800a096:	0292      	lsls	r2, r2, #10
 800a098:	b292      	uxth	r2, r2
 800a09a:	800a      	strh	r2, [r1, #0]
 800a09c:	e409      	b.n	80098b2 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 800a09e:	f04f 0e00 	mov.w	lr, #0
 800a0a2:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800a0a6:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1c0      	bne.n	800a034 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a0b2:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a0b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a0bc:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a0c4:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0c8:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a0cc:	d818      	bhi.n	800a100 <HAL_PCD_IRQHandler+0xa68>
 800a0ce:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a0d2:	f018 0f01 	tst.w	r8, #1
 800a0d6:	bf18      	it	ne
 800a0d8:	3201      	addne	r2, #1
 800a0da:	0292      	lsls	r2, r2, #10
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	801a      	strh	r2, [r3, #0]
 800a0e0:	e62d      	b.n	8009d3e <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0e2:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a0e6:	f8df e034 	ldr.w	lr, [pc, #52]	; 800a11c <HAL_PCD_IRQHandler+0xa84>
 800a0ea:	f018 0f1f 	tst.w	r8, #31
 800a0ee:	bf08      	it	eq
 800a0f0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a0f4:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800a0f8:	b292      	uxth	r2, r2
 800a0fa:	800a      	strh	r2, [r1, #0]
 800a0fc:	f7ff bbd9 	b.w	80098b2 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a100:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a104:	4905      	ldr	r1, [pc, #20]	; (800a11c <HAL_PCD_IRQHandler+0xa84>)
 800a106:	f018 0f1f 	tst.w	r8, #31
 800a10a:	bf08      	it	eq
 800a10c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a110:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 800a114:	b292      	uxth	r2, r2
 800a116:	801a      	strh	r2, [r3, #0]
 800a118:	e611      	b.n	8009d3e <HAL_PCD_IRQHandler+0x6a6>
 800a11a:	bf00      	nop
 800a11c:	ffff8000 	.word	0xffff8000

0800a120 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800a120:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800a124:	2a01      	cmp	r2, #1
 800a126:	d00e      	beq.n	800a146 <HAL_PCD_SetAddress+0x26>
{
 800a128:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800a12a:	2201      	movs	r2, #1
 800a12c:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a12e:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800a130:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800a134:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a138:	f002 f868 	bl	800c20c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a13c:	2300      	movs	r3, #0
 800a13e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a142:	4618      	mov	r0, r3
}
 800a144:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800a146:	2002      	movs	r0, #2
}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop

0800a14c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a14c:	f001 0c07 	and.w	ip, r1, #7
 800a150:	0609      	lsls	r1, r1, #24
{
 800a152:	b510      	push	{r4, lr}
 800a154:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a156:	d425      	bmi.n	800a1a4 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 800a158:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a15c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800a160:	00c0      	lsls	r0, r0, #3
 800a162:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800a166:	4420      	add	r0, r4
 800a168:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a16c:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 800a16e:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800a170:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a172:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 800a176:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800a178:	b10a      	cbz	r2, 800a17e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800a17a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800a17e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800a180:	bf04      	itt	eq
 800a182:	2300      	moveq	r3, #0
 800a184:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800a186:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d019      	beq.n	800a1c2 <HAL_PCD_EP_Open+0x76>
 800a18e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a190:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a192:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a196:	f001 fa63 	bl	800b660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a19a:	2300      	movs	r3, #0
 800a19c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 800a1a0:	4618      	mov	r0, r3
}
 800a1a2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1a4:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800a1a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a1ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1b4:	eb0c 0100 	add.w	r1, ip, r0
 800a1b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a1bc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800a1c0:	e7d5      	b.n	800a16e <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800a1c2:	2002      	movs	r0, #2
}
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	bf00      	nop

0800a1c8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a1c8:	060b      	lsls	r3, r1, #24
{
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a1ce:	d41b      	bmi.n	800a208 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1d0:	f001 0307 	and.w	r3, r1, #7
 800a1d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a1d8:	00d2      	lsls	r2, r2, #3
 800a1da:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a1de:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a1e0:	4402      	add	r2, r0
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a1e8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a1ea:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d019      	beq.n	800a226 <HAL_PCD_EP_Close+0x5e>
 800a1f2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a1f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a1f6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a1fa:	f001 fba5 	bl	800b948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a1fe:	2300      	movs	r3, #0
 800a200:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a204:	4618      	mov	r0, r3
}
 800a206:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a208:	2001      	movs	r0, #1
 800a20a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a20e:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a210:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a214:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a218:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800a21a:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a21c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a21e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a222:	2b01      	cmp	r3, #1
 800a224:	d1e5      	bne.n	800a1f2 <HAL_PCD_EP_Close+0x2a>
 800a226:	2002      	movs	r0, #2
}
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	bf00      	nop

0800a22c <HAL_PCD_EP_Receive>:
{
 800a22c:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 800a22e:	2400      	movs	r4, #0
 800a230:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800a234:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800a238:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 800a23c:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a240:	6800      	ldr	r0, [r0, #0]
 800a242:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800a246:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800a24a:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a24e:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a252:	f001 fc59 	bl	800bb08 <USB_EPStartXfer>
}
 800a256:	4620      	mov	r0, r4
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	bf00      	nop

0800a25c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a25c:	f001 0107 	and.w	r1, r1, #7
 800a260:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a264:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800a268:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop

0800a270 <HAL_PCD_EP_Transmit>:
{
 800a270:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 800a272:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800a274:	2500      	movs	r5, #0
{
 800a276:	4604      	mov	r4, r0
 800a278:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800a27c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a280:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 800a284:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a288:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 800a28c:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 800a290:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 800a294:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800a298:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 800a29c:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 800a2a0:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 800a2a4:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2a8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f001 fc2b 	bl	800bb08 <USB_EPStartXfer>
}
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
 800a2b6:	bf00      	nop

0800a2b8 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a2b8:	6843      	ldr	r3, [r0, #4]
{
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a2c2:	4298      	cmp	r0, r3
 800a2c4:	d82d      	bhi.n	800a322 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800a2c6:	060b      	lsls	r3, r1, #24
 800a2c8:	d41a      	bmi.n	800a300 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 800a2ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a2ce:	00c9      	lsls	r1, r1, #3
 800a2d0:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 800a2d4:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800a2d6:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800a2de:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2e0:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a2e2:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a2e4:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d018      	beq.n	800a31e <HAL_PCD_EP_SetStall+0x66>
 800a2ec:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	f001 ff13 	bl	800c11c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a2fc:	4618      	mov	r0, r3
}
 800a2fe:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a300:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a302:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 800a304:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a308:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a30c:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a30e:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 800a310:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a312:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a314:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a316:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d1e6      	bne.n	800a2ec <HAL_PCD_EP_SetStall+0x34>
 800a31e:	2002      	movs	r0, #2
}
 800a320:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a322:	2001      	movs	r0, #1
}
 800a324:	bd10      	pop	{r4, pc}
 800a326:	bf00      	nop

0800a328 <HAL_PCD_EP_ClrStall>:
{
 800a328:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a32a:	6843      	ldr	r3, [r0, #4]
 800a32c:	f001 020f 	and.w	r2, r1, #15
 800a330:	429a      	cmp	r2, r3
 800a332:	d832      	bhi.n	800a39a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800a334:	060b      	lsls	r3, r1, #24
 800a336:	4604      	mov	r4, r0
 800a338:	d41c      	bmi.n	800a374 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a33a:	f001 0307 	and.w	r3, r1, #7
 800a33e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a342:	00d2      	lsls	r2, r2, #3
 800a344:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a348:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a34a:	4402      	add	r2, r0
  ep->is_stall = 0U;
 800a34c:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800a34e:	2000      	movs	r0, #0
 800a350:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a354:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a356:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a358:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d01a      	beq.n	800a396 <HAL_PCD_EP_ClrStall+0x6e>
 800a360:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a362:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a364:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a368:	f001 ff00 	bl	800c16c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a36c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a370:	4628      	mov	r0, r5
}
 800a372:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800a374:	2001      	movs	r0, #1
 800a376:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a37a:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a37c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a380:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a384:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800a386:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800a388:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a38a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a38c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a38e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a392:	2b01      	cmp	r3, #1
 800a394:	d1e4      	bne.n	800a360 <HAL_PCD_EP_ClrStall+0x38>
 800a396:	2002      	movs	r0, #2
}
 800a398:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a39a:	2001      	movs	r0, #1
}
 800a39c:	bd38      	pop	{r3, r4, r5, pc}
 800a39e:	bf00      	nop

0800a3a0 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a3a0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a3a4:	d00b      	beq.n	800a3be <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3a6:	f001 0107 	and.w	r1, r1, #7
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a3b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a3b4:	b95a      	cbnz	r2, 800a3ce <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800a3b6:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800a3b8:	80cb      	strh	r3, [r1, #6]
 800a3ba:	730a      	strb	r2, [r1, #12]
}
 800a3bc:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800a3be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a3c2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a3c6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	d0f3      	beq.n	800a3b6 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 800a3ce:	2201      	movs	r2, #1
}
 800a3d0:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a3d2:	608b      	str	r3, [r1, #8]
 800a3d4:	730a      	strb	r2, [r1, #12]
}
 800a3d6:	4770      	bx	lr

0800a3d8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a3d8:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 800a3da:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800a3e2:	d116      	bne.n	800a412 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3e6:	00d2      	lsls	r2, r2, #3
 800a3e8:	d420      	bmi.n	800a42c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a3ec:	4919      	ldr	r1, [pc, #100]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a3f2:	625a      	str	r2, [r3, #36]	; 0x24
 800a3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a3fa:	9201      	str	r2, [sp, #4]
 800a3fc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a3fe:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a400:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a402:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a406:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a40a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a40e:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a410:	d013      	beq.n	800a43a <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a412:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a414:	4a10      	ldr	r2, [pc, #64]	; (800a458 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	f023 0301 	bic.w	r3, r3, #1
 800a41c:	4303      	orrs	r3, r0
 800a41e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a420:	6813      	ldr	r3, [r2, #0]
 800a422:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a426:	4058      	eors	r0, r3
 800a428:	b002      	add	sp, #8
 800a42a:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a434:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a438:	d1eb      	bne.n	800a412 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a43a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800a43e:	d1e8      	bne.n	800a412 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 800a440:	4a05      	ldr	r2, [pc, #20]	; (800a458 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800a442:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 800a444:	6813      	ldr	r3, [r2, #0]
 800a446:	f043 0304 	orr.w	r3, r3, #4
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	e7e2      	b.n	800a414 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800a44e:	bf00      	nop
 800a450:	40023800 	.word	0x40023800
 800a454:	40007000 	.word	0x40007000
 800a458:	40023c00 	.word	0x40023c00

0800a45c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f000 81f8 	beq.w	800a852 <HAL_RCC_OscConfig+0x3f6>
{
 800a462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a466:	4aa2      	ldr	r2, [pc, #648]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a468:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a46a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a46c:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a46e:	07d9      	lsls	r1, r3, #31
 800a470:	4604      	mov	r4, r0
{
 800a472:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a474:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a478:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a47c:	d52e      	bpl.n	800a4dc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a47e:	2d08      	cmp	r5, #8
 800a480:	f000 8128 	beq.w	800a6d4 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a484:	2d0c      	cmp	r5, #12
 800a486:	f000 8122 	beq.w	800a6ce <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a48a:	6863      	ldr	r3, [r4, #4]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d00f      	beq.n	800a4b0 <HAL_RCC_OscConfig+0x54>
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 8180 	beq.w	800a796 <HAL_RCC_OscConfig+0x33a>
 800a496:	2b05      	cmp	r3, #5
 800a498:	4b95      	ldr	r3, [pc, #596]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	f000 81db 	beq.w	800a856 <HAL_RCC_OscConfig+0x3fa>
 800a4a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e004      	b.n	800a4ba <HAL_RCC_OscConfig+0x5e>
 800a4b0:	4a8f      	ldr	r2, [pc, #572]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a4ba:	f7fd fdc1 	bl	8008040 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4be:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800a6f0 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 800a4c2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4c4:	e005      	b.n	800a4d2 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4c6:	f7fd fdbb 	bl	8008040 <HAL_GetTick>
 800a4ca:	1bc0      	subs	r0, r0, r7
 800a4cc:	2864      	cmp	r0, #100	; 0x64
 800a4ce:	f200 815e 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d6:	039b      	lsls	r3, r3, #14
 800a4d8:	d5f5      	bpl.n	800a4c6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	0799      	lsls	r1, r3, #30
 800a4de:	d522      	bpl.n	800a526 <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a4e0:	2d04      	cmp	r5, #4
 800a4e2:	f000 8114 	beq.w	800a70e <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a4e6:	2d0c      	cmp	r5, #12
 800a4e8:	f000 810e 	beq.w	800a708 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a4ec:	68e3      	ldr	r3, [r4, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 8179 	beq.w	800a7e6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	4b7f      	ldr	r3, [pc, #508]	; (800a6f4 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4f8:	4f7d      	ldr	r7, [pc, #500]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 800a4fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a4fc:	f7fd fda0 	bl	8008040 <HAL_GetTick>
 800a500:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a502:	e005      	b.n	800a510 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a504:	f7fd fd9c 	bl	8008040 <HAL_GetTick>
 800a508:	1b80      	subs	r0, r0, r6
 800a50a:	2802      	cmp	r0, #2
 800a50c:	f200 813f 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	079b      	lsls	r3, r3, #30
 800a514:	d5f6      	bpl.n	800a504 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a51e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a522:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	06d9      	lsls	r1, r3, #27
 800a528:	d525      	bpl.n	800a576 <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	f000 8098 	beq.w	800a660 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a530:	69a3      	ldr	r3, [r4, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 816a 	beq.w	800a80c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 800a538:	2201      	movs	r2, #1
 800a53a:	4b6e      	ldr	r3, [pc, #440]	; (800a6f4 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a53c:	4e6c      	ldr	r6, [pc, #432]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 800a53e:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800a540:	f7fd fd7e 	bl	8008040 <HAL_GetTick>
 800a544:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a546:	e005      	b.n	800a554 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a548:	f7fd fd7a 	bl	8008040 <HAL_GetTick>
 800a54c:	1bc0      	subs	r0, r0, r7
 800a54e:	2802      	cmp	r0, #2
 800a550:	f200 811d 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	059b      	lsls	r3, r3, #22
 800a558:	d5f6      	bpl.n	800a548 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a55a:	6873      	ldr	r3, [r6, #4]
 800a55c:	6a22      	ldr	r2, [r4, #32]
 800a55e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a562:	4313      	orrs	r3, r2
 800a564:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a566:	6873      	ldr	r3, [r6, #4]
 800a568:	69e2      	ldr	r2, [r4, #28]
 800a56a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a56e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a572:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	0719      	lsls	r1, r3, #28
 800a578:	d516      	bpl.n	800a5a8 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a57a:	6963      	ldr	r3, [r4, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8121 	beq.w	800a7c4 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800a582:	2201      	movs	r2, #1
 800a584:	4b5b      	ldr	r3, [pc, #364]	; (800a6f4 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a586:	4f5a      	ldr	r7, [pc, #360]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 800a588:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a58c:	f7fd fd58 	bl	8008040 <HAL_GetTick>
 800a590:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a592:	e005      	b.n	800a5a0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a594:	f7fd fd54 	bl	8008040 <HAL_GetTick>
 800a598:	1b80      	subs	r0, r0, r6
 800a59a:	2802      	cmp	r0, #2
 800a59c:	f200 80f7 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a2:	079a      	lsls	r2, r3, #30
 800a5a4:	d5f6      	bpl.n	800a594 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	075e      	lsls	r6, r3, #29
 800a5aa:	d53b      	bpl.n	800a624 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5ac:	4b50      	ldr	r3, [pc, #320]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5b0:	00d0      	lsls	r0, r2, #3
 800a5b2:	f100 8129 	bmi.w	800a808 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800a5b6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a5be:	625a      	str	r2, [r3, #36]	; 0x24
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5ca:	4f4b      	ldr	r7, [pc, #300]	; (800a6f8 <HAL_RCC_OscConfig+0x29c>)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	05d9      	lsls	r1, r3, #23
 800a5d0:	f140 80cc 	bpl.w	800a76c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5d4:	68a3      	ldr	r3, [r4, #8]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	f000 8175 	beq.w	800a8c6 <HAL_RCC_OscConfig+0x46a>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f000 80a9 	beq.w	800a734 <HAL_RCC_OscConfig+0x2d8>
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	4b42      	ldr	r3, [pc, #264]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e8:	f000 818b 	beq.w	800a902 <HAL_RCC_OscConfig+0x4a6>
 800a5ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5f0:	635a      	str	r2, [r3, #52]	; 0x34
 800a5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5f8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a5fa:	f7fd fd21 	bl	8008040 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5fe:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a602:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a604:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a6f0 <HAL_RCC_OscConfig+0x294>
 800a608:	e005      	b.n	800a616 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a60a:	f7fd fd19 	bl	8008040 <HAL_GetTick>
 800a60e:	1bc0      	subs	r0, r0, r7
 800a610:	4548      	cmp	r0, r9
 800a612:	f200 80bc 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a616:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a61a:	059b      	lsls	r3, r3, #22
 800a61c:	d5f5      	bpl.n	800a60a <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 800a61e:	2e00      	cmp	r6, #0
 800a620:	f040 814b 	bne.w	800a8ba <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a624:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a626:	b1b8      	cbz	r0, 800a658 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a628:	2d0c      	cmp	r5, #12
 800a62a:	f000 8152 	beq.w	800a8d2 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a62e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a630:	f04f 0200 	mov.w	r2, #0
 800a634:	4b2f      	ldr	r3, [pc, #188]	; (800a6f4 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a636:	f000 8116 	beq.w	800a866 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800a63a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a63c:	f7fd fd00 	bl	8008040 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a640:	4d2b      	ldr	r5, [pc, #172]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800a642:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a644:	e005      	b.n	800a652 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a646:	f7fd fcfb 	bl	8008040 <HAL_GetTick>
 800a64a:	1b00      	subs	r0, r0, r4
 800a64c:	2802      	cmp	r0, #2
 800a64e:	f200 809e 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a652:	682b      	ldr	r3, [r5, #0]
 800a654:	019b      	lsls	r3, r3, #6
 800a656:	d4f6      	bmi.n	800a646 <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 800a658:	2000      	movs	r0, #0
}
 800a65a:	b003      	add	sp, #12
 800a65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a660:	4b23      	ldr	r3, [pc, #140]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	059a      	lsls	r2, r3, #22
 800a666:	d502      	bpl.n	800a66e <HAL_RCC_OscConfig+0x212>
 800a668:	69a3      	ldr	r3, [r4, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d03b      	beq.n	800a6e6 <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a66e:	4e20      	ldr	r6, [pc, #128]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a670:	6a20      	ldr	r0, [r4, #32]
 800a672:	6873      	ldr	r3, [r6, #4]
 800a674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a678:	4298      	cmp	r0, r3
 800a67a:	f240 80d7 	bls.w	800a82c <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a67e:	f7ff feab 	bl	800a3d8 <RCC_SetFlashLatencyFromMSIRange>
 800a682:	2800      	cmp	r0, #0
 800a684:	d12f      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a686:	6872      	ldr	r2, [r6, #4]
 800a688:	6a23      	ldr	r3, [r4, #32]
 800a68a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a68e:	431a      	orrs	r2, r3
 800a690:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a692:	6872      	ldr	r2, [r6, #4]
 800a694:	69e1      	ldr	r1, [r4, #28]
 800a696:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a69a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a69e:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a6a0:	4a13      	ldr	r2, [pc, #76]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a6a2:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a6a4:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a6a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a6b0:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <HAL_RCC_OscConfig+0x2a0>)
 800a6b2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800a6b6:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a6b8:	4811      	ldr	r0, [pc, #68]	; (800a700 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a6ba:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 800a6bc:	4a11      	ldr	r2, [pc, #68]	; (800a704 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a6be:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 800a6c0:	6810      	ldr	r0, [r2, #0]
 800a6c2:	f7fd fc7b 	bl	8007fbc <HAL_InitTick>
        if(status != HAL_OK)
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d1c7      	bne.n	800a65a <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	e753      	b.n	800a576 <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	f43f aedb 	beq.w	800a48a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6d4:	4a06      	ldr	r2, [pc, #24]	; (800a6f0 <HAL_RCC_OscConfig+0x294>)
 800a6d6:	6812      	ldr	r2, [r2, #0]
 800a6d8:	0392      	lsls	r2, r2, #14
 800a6da:	f57f aeff 	bpl.w	800a4dc <HAL_RCC_OscConfig+0x80>
 800a6de:	6862      	ldr	r2, [r4, #4]
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	f47f aefb 	bne.w	800a4dc <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800a6e6:	2001      	movs	r0, #1
}
 800a6e8:	b003      	add	sp, #12
 800a6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40023800 	.word	0x40023800
 800a6f4:	42470000 	.word	0x42470000
 800a6f8:	40007000 	.word	0x40007000
 800a6fc:	08011a90 	.word	0x08011a90
 800a700:	20000024 	.word	0x20000024
 800a704:	2000002c 	.word	0x2000002c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a708:	2e00      	cmp	r6, #0
 800a70a:	f47f aeef 	bne.w	800a4ec <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a70e:	4a81      	ldr	r2, [pc, #516]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	0792      	lsls	r2, r2, #30
 800a714:	d502      	bpl.n	800a71c <HAL_RCC_OscConfig+0x2c0>
 800a716:	68e2      	ldr	r2, [r4, #12]
 800a718:	2a01      	cmp	r2, #1
 800a71a:	d1e4      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a71c:	497d      	ldr	r1, [pc, #500]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
 800a71e:	6920      	ldr	r0, [r4, #16]
 800a720:	684a      	ldr	r2, [r1, #4]
 800a722:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800a726:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a72a:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a72c:	06d9      	lsls	r1, r3, #27
 800a72e:	f57f af22 	bpl.w	800a576 <HAL_RCC_OscConfig+0x11a>
 800a732:	e6fa      	b.n	800a52a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a734:	4f77      	ldr	r7, [pc, #476]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a736:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a74a:	f7fd fc79 	bl	8008040 <HAL_GetTick>
 800a74e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a750:	e005      	b.n	800a75e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a752:	f7fd fc75 	bl	8008040 <HAL_GetTick>
 800a756:	eba0 0008 	sub.w	r0, r0, r8
 800a75a:	4548      	cmp	r0, r9
 800a75c:	d817      	bhi.n	800a78e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a760:	0598      	lsls	r0, r3, #22
 800a762:	d4f6      	bmi.n	800a752 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 800a764:	2e00      	cmp	r6, #0
 800a766:	f43f af5d 	beq.w	800a624 <HAL_RCC_OscConfig+0x1c8>
 800a76a:	e0a6      	b.n	800a8ba <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a772:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a774:	f7fd fc64 	bl	8008040 <HAL_GetTick>
 800a778:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	05da      	lsls	r2, r3, #23
 800a77e:	f53f af29 	bmi.w	800a5d4 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a782:	f7fd fc5d 	bl	8008040 <HAL_GetTick>
 800a786:	eba0 0008 	sub.w	r0, r0, r8
 800a78a:	2864      	cmp	r0, #100	; 0x64
 800a78c:	d9f5      	bls.n	800a77a <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800a78e:	2003      	movs	r0, #3
}
 800a790:	b003      	add	sp, #12
 800a792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a796:	4f5f      	ldr	r7, [pc, #380]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7a6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800a7a8:	f7fd fc4a 	bl	8008040 <HAL_GetTick>
 800a7ac:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7ae:	e005      	b.n	800a7bc <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7b0:	f7fd fc46 	bl	8008040 <HAL_GetTick>
 800a7b4:	eba0 0008 	sub.w	r0, r0, r8
 800a7b8:	2864      	cmp	r0, #100	; 0x64
 800a7ba:	d8e8      	bhi.n	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	0398      	lsls	r0, r3, #14
 800a7c0:	d4f6      	bmi.n	800a7b0 <HAL_RCC_OscConfig+0x354>
 800a7c2:	e68a      	b.n	800a4da <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 800a7c4:	4a54      	ldr	r2, [pc, #336]	; (800a918 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7c6:	4f53      	ldr	r7, [pc, #332]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 800a7c8:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a7cc:	f7fd fc38 	bl	8008040 <HAL_GetTick>
 800a7d0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7d2:	e004      	b.n	800a7de <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a7d4:	f7fd fc34 	bl	8008040 <HAL_GetTick>
 800a7d8:	1b80      	subs	r0, r0, r6
 800a7da:	2802      	cmp	r0, #2
 800a7dc:	d8d7      	bhi.n	800a78e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	079b      	lsls	r3, r3, #30
 800a7e2:	d4f7      	bmi.n	800a7d4 <HAL_RCC_OscConfig+0x378>
 800a7e4:	e6df      	b.n	800a5a6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800a7e6:	4a4c      	ldr	r2, [pc, #304]	; (800a918 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7e8:	4f4a      	ldr	r7, [pc, #296]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 800a7ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a7ec:	f7fd fc28 	bl	8008040 <HAL_GetTick>
 800a7f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7f2:	e004      	b.n	800a7fe <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a7f4:	f7fd fc24 	bl	8008040 <HAL_GetTick>
 800a7f8:	1b80      	subs	r0, r0, r6
 800a7fa:	2802      	cmp	r0, #2
 800a7fc:	d8c7      	bhi.n	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	0798      	lsls	r0, r3, #30
 800a802:	d4f7      	bmi.n	800a7f4 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	e68e      	b.n	800a526 <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 800a808:	2600      	movs	r6, #0
 800a80a:	e6de      	b.n	800a5ca <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 800a80c:	4a42      	ldr	r2, [pc, #264]	; (800a918 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a80e:	4f41      	ldr	r7, [pc, #260]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 800a810:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800a812:	f7fd fc15 	bl	8008040 <HAL_GetTick>
 800a816:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a818:	e004      	b.n	800a824 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a81a:	f7fd fc11 	bl	8008040 <HAL_GetTick>
 800a81e:	1b80      	subs	r0, r0, r6
 800a820:	2802      	cmp	r0, #2
 800a822:	d8b4      	bhi.n	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	0598      	lsls	r0, r3, #22
 800a828:	d4f7      	bmi.n	800a81a <HAL_RCC_OscConfig+0x3be>
 800a82a:	e74e      	b.n	800a6ca <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a82c:	6873      	ldr	r3, [r6, #4]
 800a82e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a832:	4303      	orrs	r3, r0
 800a834:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a836:	6873      	ldr	r3, [r6, #4]
 800a838:	69e2      	ldr	r2, [r4, #28]
 800a83a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a83e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a842:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a844:	f7ff fdc8 	bl	800a3d8 <RCC_SetFlashLatencyFromMSIRange>
 800a848:	2800      	cmp	r0, #0
 800a84a:	f47f af4c 	bne.w	800a6e6 <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a84e:	6a23      	ldr	r3, [r4, #32]
 800a850:	e726      	b.n	800a6a0 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 800a852:	2001      	movs	r0, #1
}
 800a854:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a856:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e629      	b.n	800a4ba <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 800a866:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a868:	f7fd fbea 	bl	8008040 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a86c:	4e29      	ldr	r6, [pc, #164]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a86e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a870:	e004      	b.n	800a87c <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a872:	f7fd fbe5 	bl	8008040 <HAL_GetTick>
 800a876:	1b40      	subs	r0, r0, r5
 800a878:	2802      	cmp	r0, #2
 800a87a:	d888      	bhi.n	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a87c:	6833      	ldr	r3, [r6, #0]
 800a87e:	0199      	lsls	r1, r3, #6
 800a880:	d4f7      	bmi.n	800a872 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a882:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800a886:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 800a888:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a88a:	68b2      	ldr	r2, [r6, #8]
 800a88c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a88e:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800a892:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800a894:	4a20      	ldr	r2, [pc, #128]	; (800a918 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a896:	4303      	orrs	r3, r0
 800a898:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 800a89a:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a89c:	f7fd fbd0 	bl	8008040 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8a0:	4d1c      	ldr	r5, [pc, #112]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a8a2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8a4:	e005      	b.n	800a8b2 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8a6:	f7fd fbcb 	bl	8008040 <HAL_GetTick>
 800a8aa:	1b00      	subs	r0, r0, r4
 800a8ac:	2802      	cmp	r0, #2
 800a8ae:	f63f af6e 	bhi.w	800a78e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a8b2:	682b      	ldr	r3, [r5, #0]
 800a8b4:	019a      	lsls	r2, r3, #6
 800a8b6:	d5f6      	bpl.n	800a8a6 <HAL_RCC_OscConfig+0x44a>
 800a8b8:	e6ce      	b.n	800a658 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8ba:	4a16      	ldr	r2, [pc, #88]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
 800a8bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a8be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8c2:	6253      	str	r3, [r2, #36]	; 0x24
 800a8c4:	e6ae      	b.n	800a624 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8c6:	4a13      	ldr	r2, [pc, #76]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
 800a8c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a8ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ce:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a8d0:	e693      	b.n	800a5fa <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8d2:	2801      	cmp	r0, #1
 800a8d4:	f43f aec1 	beq.w	800a65a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 800a8dc:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8de:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a8e2:	4291      	cmp	r1, r2
 800a8e4:	f47f aeff 	bne.w	800a6e6 <HAL_RCC_OscConfig+0x28a>
 800a8e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a8ea:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8ee:	4291      	cmp	r1, r2
 800a8f0:	f47f aef9 	bne.w	800a6e6 <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a8f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a8f6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 800a8fa:	1a18      	subs	r0, r3, r0
 800a8fc:	bf18      	it	ne
 800a8fe:	2001      	movne	r0, #1
 800a900:	e6ab      	b.n	800a65a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a902:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a906:	635a      	str	r2, [r3, #52]	; 0x34
 800a908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a90a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a90e:	635a      	str	r2, [r3, #52]	; 0x34
 800a910:	e673      	b.n	800a5fa <HAL_RCC_OscConfig+0x19e>
 800a912:	bf00      	nop
 800a914:	40023800 	.word	0x40023800
 800a918:	42470000 	.word	0x42470000

0800a91c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f000 80c2 	beq.w	800aaa6 <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a922:	4a85      	ldr	r2, [pc, #532]	; (800ab38 <HAL_RCC_ClockConfig+0x21c>)
{
 800a924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a928:	6813      	ldr	r3, [r2, #0]
 800a92a:	4604      	mov	r4, r0
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	428b      	cmp	r3, r1
 800a932:	460d      	mov	r5, r1
 800a934:	d213      	bcs.n	800a95e <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a936:	2901      	cmp	r1, #1
 800a938:	d103      	bne.n	800a942 <HAL_RCC_ClockConfig+0x26>
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	f043 0304 	orr.w	r3, r3, #4
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	4a7d      	ldr	r2, [pc, #500]	; (800ab38 <HAL_RCC_ClockConfig+0x21c>)
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	f023 0301 	bic.w	r3, r3, #1
 800a94a:	432b      	orrs	r3, r5
 800a94c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	42ab      	cmp	r3, r5
 800a956:	d002      	beq.n	800a95e <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 800a958:	2001      	movs	r0, #1
}
 800a95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	0799      	lsls	r1, r3, #30
 800a962:	d506      	bpl.n	800a972 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a964:	4975      	ldr	r1, [pc, #468]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
 800a966:	68a0      	ldr	r0, [r4, #8]
 800a968:	688a      	ldr	r2, [r1, #8]
 800a96a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a96e:	4302      	orrs	r2, r0
 800a970:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a972:	07da      	lsls	r2, r3, #31
 800a974:	d529      	bpl.n	800a9ca <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a976:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a978:	4b70      	ldr	r3, [pc, #448]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a97a:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a97c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a97e:	f000 808e 	beq.w	800aa9e <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a982:	2a03      	cmp	r2, #3
 800a984:	f000 8085 	beq.w	800aa92 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a988:	2a01      	cmp	r2, #1
 800a98a:	f000 80d1 	beq.w	800ab30 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a98e:	0598      	lsls	r0, r3, #22
 800a990:	d5e2      	bpl.n	800a958 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a992:	4e6a      	ldr	r6, [pc, #424]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a994:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a998:	68b3      	ldr	r3, [r6, #8]
 800a99a:	f023 0303 	bic.w	r3, r3, #3
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800a9a2:	f7fd fb4d 	bl	8008040 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9a6:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800a9a8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d055      	beq.n	800aa5a <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d05e      	beq.n	800aa70 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d105      	bne.n	800a9c2 <HAL_RCC_ClockConfig+0xa6>
 800a9b6:	e066      	b.n	800aa86 <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9b8:	f7fd fb42 	bl	8008040 <HAL_GetTick>
 800a9bc:	1bc0      	subs	r0, r0, r7
 800a9be:	4540      	cmp	r0, r8
 800a9c0:	d873      	bhi.n	800aaaa <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a9c2:	68b3      	ldr	r3, [r6, #8]
 800a9c4:	f013 0f0c 	tst.w	r3, #12
 800a9c8:	d1f6      	bne.n	800a9b8 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9ca:	4a5b      	ldr	r2, [pc, #364]	; (800ab38 <HAL_RCC_ClockConfig+0x21c>)
 800a9cc:	6813      	ldr	r3, [r2, #0]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	42ab      	cmp	r3, r5
 800a9d4:	d906      	bls.n	800a9e4 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	f023 0301 	bic.w	r3, r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	07da      	lsls	r2, r3, #31
 800a9e2:	d4b9      	bmi.n	800a958 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	0759      	lsls	r1, r3, #29
 800a9e8:	d506      	bpl.n	800a9f8 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9ea:	4954      	ldr	r1, [pc, #336]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
 800a9ec:	68e0      	ldr	r0, [r4, #12]
 800a9ee:	688a      	ldr	r2, [r1, #8]
 800a9f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a9f4:	4302      	orrs	r2, r0
 800a9f6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9f8:	071b      	lsls	r3, r3, #28
 800a9fa:	d420      	bmi.n	800aa3e <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 800a9fc:	494f      	ldr	r1, [pc, #316]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
 800a9fe:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800aa00:	f002 030c 	and.w	r3, r2, #12
 800aa04:	2b08      	cmp	r3, #8
 800aa06:	d079      	beq.n	800aafc <HAL_RCC_ClockConfig+0x1e0>
 800aa08:	2b0c      	cmp	r3, #12
 800aa0a:	d050      	beq.n	800aaae <HAL_RCC_ClockConfig+0x192>
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d044      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800aa10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800aa14:	684b      	ldr	r3, [r1, #4]
 800aa16:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa1e:	4b47      	ldr	r3, [pc, #284]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
 800aa20:	4a47      	ldr	r2, [pc, #284]	; (800ab40 <HAL_RCC_ClockConfig+0x224>)
 800aa22:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 800aa24:	4947      	ldr	r1, [pc, #284]	; (800ab44 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aa2a:	5cd3      	ldrb	r3, [r2, r3]
 800aa2c:	4a46      	ldr	r2, [pc, #280]	; (800ab48 <HAL_RCC_ClockConfig+0x22c>)
 800aa2e:	fa20 f303 	lsr.w	r3, r0, r3
}
 800aa32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800aa36:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa38:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800aa3a:	f7fd babf 	b.w	8007fbc <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa3e:	4a3f      	ldr	r2, [pc, #252]	; (800ab3c <HAL_RCC_ClockConfig+0x220>)
 800aa40:	6921      	ldr	r1, [r4, #16]
 800aa42:	6893      	ldr	r3, [r2, #8]
 800aa44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800aa48:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aa4c:	6093      	str	r3, [r2, #8]
 800aa4e:	e7d5      	b.n	800a9fc <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa50:	f7fd faf6 	bl	8008040 <HAL_GetTick>
 800aa54:	1bc3      	subs	r3, r0, r7
 800aa56:	4543      	cmp	r3, r8
 800aa58:	d827      	bhi.n	800aaaa <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aa5a:	68b3      	ldr	r3, [r6, #8]
 800aa5c:	f003 030c 	and.w	r3, r3, #12
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	d1f5      	bne.n	800aa50 <HAL_RCC_ClockConfig+0x134>
 800aa64:	e7b1      	b.n	800a9ca <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa66:	f7fd faeb 	bl	8008040 <HAL_GetTick>
 800aa6a:	1bc0      	subs	r0, r0, r7
 800aa6c:	4540      	cmp	r0, r8
 800aa6e:	d81c      	bhi.n	800aaaa <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa70:	68b3      	ldr	r3, [r6, #8]
 800aa72:	f003 030c 	and.w	r3, r3, #12
 800aa76:	2b0c      	cmp	r3, #12
 800aa78:	d1f5      	bne.n	800aa66 <HAL_RCC_ClockConfig+0x14a>
 800aa7a:	e7a6      	b.n	800a9ca <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa7c:	f7fd fae0 	bl	8008040 <HAL_GetTick>
 800aa80:	1bc0      	subs	r0, r0, r7
 800aa82:	4540      	cmp	r0, r8
 800aa84:	d811      	bhi.n	800aaaa <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa86:	68b3      	ldr	r3, [r6, #8]
 800aa88:	f003 030c 	and.w	r3, r3, #12
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	d1f5      	bne.n	800aa7c <HAL_RCC_ClockConfig+0x160>
 800aa90:	e79b      	b.n	800a9ca <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa92:	019f      	lsls	r7, r3, #6
 800aa94:	f53f af7d 	bmi.w	800a992 <HAL_RCC_ClockConfig+0x76>
 800aa98:	e75e      	b.n	800a958 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 800aa9a:	482c      	ldr	r0, [pc, #176]	; (800ab4c <HAL_RCC_ClockConfig+0x230>)
 800aa9c:	e7bf      	b.n	800aa1e <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa9e:	039b      	lsls	r3, r3, #14
 800aaa0:	f53f af77 	bmi.w	800a992 <HAL_RCC_ClockConfig+0x76>
 800aaa4:	e758      	b.n	800a958 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 800aaa6:	2001      	movs	r0, #1
}
 800aaa8:	4770      	bx	lr
          return HAL_TIMEOUT;
 800aaaa:	2003      	movs	r0, #3
 800aaac:	e755      	b.n	800a95a <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800aaae:	4828      	ldr	r0, [pc, #160]	; (800ab50 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aab0:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800aab2:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800aab6:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800aab8:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aabc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800aac0:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800aac4:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aac8:	d01a      	beq.n	800ab00 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800aaca:	1b09      	subs	r1, r1, r4
 800aacc:	eb65 0505 	sbc.w	r5, r5, r5
 800aad0:	01ab      	lsls	r3, r5, #6
 800aad2:	0188      	lsls	r0, r1, #6
 800aad4:	1a40      	subs	r0, r0, r1
 800aad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aada:	eb63 0305 	sbc.w	r3, r3, r5
 800aade:	00c1      	lsls	r1, r0, #3
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	190c      	adds	r4, r1, r4
 800aae4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800aae8:	f143 0300 	adc.w	r3, r3, #0
 800aaec:	0259      	lsls	r1, r3, #9
 800aaee:	0260      	lsls	r0, r4, #9
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 800aaf6:	f7f6 fb69 	bl	80011cc <__aeabi_uldivmod>
 800aafa:	e790      	b.n	800aa1e <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 800aafc:	4815      	ldr	r0, [pc, #84]	; (800ab54 <HAL_RCC_ClockConfig+0x238>)
 800aafe:	e78e      	b.n	800aa1e <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ab00:	1b0d      	subs	r5, r1, r4
 800ab02:	eb66 0606 	sbc.w	r6, r6, r6
 800ab06:	01b0      	lsls	r0, r6, #6
 800ab08:	01a9      	lsls	r1, r5, #6
 800ab0a:	1b49      	subs	r1, r1, r5
 800ab0c:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 800ab10:	eb60 0006 	sbc.w	r0, r0, r6
 800ab14:	00c0      	lsls	r0, r0, #3
 800ab16:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 800ab1a:	00c9      	lsls	r1, r1, #3
 800ab1c:	190c      	adds	r4, r1, r4
 800ab1e:	f140 0000 	adc.w	r0, r0, #0
 800ab22:	0281      	lsls	r1, r0, #10
 800ab24:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800ab28:	02a0      	lsls	r0, r4, #10
 800ab2a:	f7f6 fb4f 	bl	80011cc <__aeabi_uldivmod>
 800ab2e:	e776      	b.n	800aa1e <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab30:	079e      	lsls	r6, r3, #30
 800ab32:	f53f af2e 	bmi.w	800a992 <HAL_RCC_ClockConfig+0x76>
 800ab36:	e70f      	b.n	800a958 <HAL_RCC_ClockConfig+0x3c>
 800ab38:	40023c00 	.word	0x40023c00
 800ab3c:	40023800 	.word	0x40023800
 800ab40:	08011a90 	.word	0x08011a90
 800ab44:	2000002c 	.word	0x2000002c
 800ab48:	20000024 	.word	0x20000024
 800ab4c:	00f42400 	.word	0x00f42400
 800ab50:	08011aa8 	.word	0x08011aa8
 800ab54:	007a1200 	.word	0x007a1200

0800ab58 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800ab5a:	4a05      	ldr	r2, [pc, #20]	; (800ab70 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	4905      	ldr	r1, [pc, #20]	; (800ab74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ab60:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ab64:	5ccb      	ldrb	r3, [r1, r3]
 800ab66:	6810      	ldr	r0, [r2, #0]
}
 800ab68:	40d8      	lsrs	r0, r3
 800ab6a:	4770      	bx	lr
 800ab6c:	40023800 	.word	0x40023800
 800ab70:	20000024 	.word	0x20000024
 800ab74:	08011aa0 	.word	0x08011aa0

0800ab78 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ab7a:	4a05      	ldr	r2, [pc, #20]	; (800ab90 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	4905      	ldr	r1, [pc, #20]	; (800ab94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ab80:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ab84:	5ccb      	ldrb	r3, [r1, r3]
 800ab86:	6810      	ldr	r0, [r2, #0]
}
 800ab88:	40d8      	lsrs	r0, r3
 800ab8a:	4770      	bx	lr
 800ab8c:	40023800 	.word	0x40023800
 800ab90:	20000024 	.word	0x20000024
 800ab94:	08011aa0 	.word	0x08011aa0

0800ab98 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d049      	beq.n	800ac30 <HAL_TIM_Base_Init+0x98>
{
 800ab9c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800aba2:	4604      	mov	r4, r0
 800aba4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d03c      	beq.n	800ac26 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abac:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abae:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abb4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800abb8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800abba:	d013      	beq.n	800abe4 <HAL_TIM_Base_Init+0x4c>
 800abbc:	491d      	ldr	r1, [pc, #116]	; (800ac34 <HAL_TIM_Base_Init+0x9c>)
 800abbe:	428a      	cmp	r2, r1
 800abc0:	d010      	beq.n	800abe4 <HAL_TIM_Base_Init+0x4c>
 800abc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abc6:	428a      	cmp	r2, r1
 800abc8:	d00c      	beq.n	800abe4 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abca:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800abce:	428a      	cmp	r2, r1
 800abd0:	d00c      	beq.n	800abec <HAL_TIM_Base_Init+0x54>
 800abd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abd6:	428a      	cmp	r2, r1
 800abd8:	d008      	beq.n	800abec <HAL_TIM_Base_Init+0x54>
 800abda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800abde:	428a      	cmp	r2, r1
 800abe0:	d108      	bne.n	800abf4 <HAL_TIM_Base_Init+0x5c>
 800abe2:	e003      	b.n	800abec <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 800abe4:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800abea:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abec:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800abee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abf2:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abf4:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abf6:	6960      	ldr	r0, [r4, #20]
 800abf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abfc:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abfe:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800ac00:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800ac02:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac04:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ac06:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800ac08:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac0a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac0e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800ac12:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800ac16:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800ac1a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800ac1e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 800ac22:	2000      	movs	r0, #0
}
 800ac24:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ac26:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800ac2a:	f7fc ffb7 	bl	8007b9c <HAL_TIM_Base_MspInit>
 800ac2e:	e7bd      	b.n	800abac <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800ac30:	2001      	movs	r0, #1
}
 800ac32:	4770      	bx	lr
 800ac34:	40000400 	.word	0x40000400

0800ac38 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800ac38:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d120      	bne.n	800ac82 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ac40:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac42:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ac44:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac48:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac4e:	f042 0201 	orr.w	r2, r2, #1
 800ac52:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac54:	d00a      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x34>
 800ac56:	4a0d      	ldr	r2, [pc, #52]	; (800ac8c <HAL_TIM_Base_Start_IT+0x54>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d007      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x34>
 800ac5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d003      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x34>
 800ac64:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d104      	bne.n	800ac76 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac6c:	689a      	ldr	r2, [r3, #8]
 800ac6e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac72:	2a06      	cmp	r2, #6
 800ac74:	d007      	beq.n	800ac86 <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800ac76:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800ac78:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	4770      	bx	lr
    return HAL_ERROR;
 800ac82:	2001      	movs	r0, #1
 800ac84:	4770      	bx	lr
  return HAL_OK;
 800ac86:	2000      	movs	r0, #0
}
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	40000400 	.word	0x40000400

0800ac90 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 800ac90:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac94:	6802      	ldr	r2, [r0, #0]
{
 800ac96:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac98:	68d1      	ldr	r1, [r2, #12]
 800ac9a:	f021 0101 	bic.w	r1, r1, #1
 800ac9e:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800aca0:	6a11      	ldr	r1, [r2, #32]
 800aca2:	ea11 0f0c 	tst.w	r1, ip
 800aca6:	d103      	bne.n	800acb0 <HAL_TIM_Base_Stop_IT+0x20>
 800aca8:	6811      	ldr	r1, [r2, #0]
 800acaa:	f021 0101 	bic.w	r1, r1, #1
 800acae:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800acb0:	2201      	movs	r2, #1
}
 800acb2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800acb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop

0800acbc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800acbc:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800acc0:	2a01      	cmp	r2, #1
 800acc2:	d075      	beq.n	800adb0 <HAL_TIM_ConfigClockSource+0xf4>
{
 800acc4:	b430      	push	{r4, r5}
 800acc6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800acc8:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800acca:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800accc:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800acce:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800acd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800acd6:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800acd8:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acda:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800acde:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800ace2:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800ace4:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800ace6:	d065      	beq.n	800adb4 <HAL_TIM_ConfigClockSource+0xf8>
 800ace8:	d831      	bhi.n	800ad4e <HAL_TIM_ConfigClockSource+0x92>
 800acea:	2a40      	cmp	r2, #64	; 0x40
 800acec:	d048      	beq.n	800ad80 <HAL_TIM_ConfigClockSource+0xc4>
 800acee:	d921      	bls.n	800ad34 <HAL_TIM_ConfigClockSource+0x78>
 800acf0:	2a50      	cmp	r2, #80	; 0x50
 800acf2:	d116      	bne.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acf4:	684c      	ldr	r4, [r1, #4]
 800acf6:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acf8:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800acfa:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800acfe:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad00:	6a04      	ldr	r4, [r0, #32]
 800ad02:	f024 0401 	bic.w	r4, r4, #1
 800ad06:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad08:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad0e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad12:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ad14:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad16:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad1c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad20:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800ad22:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800ad24:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800ad26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800ad2a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 800ad2e:	4610      	mov	r0, r2
}
 800ad30:	bc30      	pop	{r4, r5}
 800ad32:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800ad34:	2a20      	cmp	r2, #32
 800ad36:	d002      	beq.n	800ad3e <HAL_TIM_ConfigClockSource+0x82>
 800ad38:	d91e      	bls.n	800ad78 <HAL_TIM_ConfigClockSource+0xbc>
 800ad3a:	2a30      	cmp	r2, #48	; 0x30
 800ad3c:	d1f1      	bne.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 800ad3e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad40:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad44:	430a      	orrs	r2, r1
 800ad46:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800ad4a:	6082      	str	r2, [r0, #8]
}
 800ad4c:	e7e9      	b.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800ad4e:	2a70      	cmp	r2, #112	; 0x70
 800ad50:	d049      	beq.n	800ade6 <HAL_TIM_ConfigClockSource+0x12a>
 800ad52:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ad56:	d1e4      	bne.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad58:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ad5c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad5e:	432a      	orrs	r2, r5
 800ad60:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad62:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ad6a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad6c:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad6e:	6882      	ldr	r2, [r0, #8]
 800ad70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad74:	6082      	str	r2, [r0, #8]
      break;
 800ad76:	e7d4      	b.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800ad78:	f032 0110 	bics.w	r1, r2, #16
 800ad7c:	d1d1      	bne.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
 800ad7e:	e7de      	b.n	800ad3e <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad80:	684c      	ldr	r4, [r1, #4]
 800ad82:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800ad84:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad86:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ad8a:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad8c:	6a04      	ldr	r4, [r0, #32]
 800ad8e:	f024 0401 	bic.w	r4, r4, #1
 800ad92:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad94:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad9a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ad9e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ada0:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ada2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ada4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ada8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800adac:	6082      	str	r2, [r0, #8]
}
 800adae:	e7b8      	b.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800adb0:	2002      	movs	r0, #2
}
 800adb2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adb4:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800adb6:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adb8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800adbc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adbe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc0:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adc2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adc6:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800adca:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800adcc:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800add2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 800add6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800add8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800adda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adde:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ade2:	6082      	str	r2, [r0, #8]
}
 800ade4:	e79d      	b.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ade6:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800adea:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adec:	432a      	orrs	r2, r5
 800adee:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adf0:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adf4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800adf8:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800adfa:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800adfc:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adfe:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ae02:	6082      	str	r2, [r0, #8]
      break;
 800ae04:	e78d      	b.n	800ad22 <HAL_TIM_ConfigClockSource+0x66>
 800ae06:	bf00      	nop

0800ae08 <HAL_TIM_OC_DelayElapsedCallback>:
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop

0800ae0c <HAL_TIM_IC_CaptureCallback>:
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop

0800ae10 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop

0800ae14 <HAL_TIM_TriggerCallback>:
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop

0800ae18 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae18:	6803      	ldr	r3, [r0, #0]
{
 800ae1a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae1c:	691a      	ldr	r2, [r3, #16]
{
 800ae1e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae20:	0791      	lsls	r1, r2, #30
 800ae22:	d502      	bpl.n	800ae2a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	0792      	lsls	r2, r2, #30
 800ae28:	d450      	bmi.n	800aecc <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	0752      	lsls	r2, r2, #29
 800ae2e:	d502      	bpl.n	800ae36 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae30:	68da      	ldr	r2, [r3, #12]
 800ae32:	0750      	lsls	r0, r2, #29
 800ae34:	d437      	bmi.n	800aea6 <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae36:	691a      	ldr	r2, [r3, #16]
 800ae38:	0711      	lsls	r1, r2, #28
 800ae3a:	d502      	bpl.n	800ae42 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	0712      	lsls	r2, r2, #28
 800ae40:	d422      	bmi.n	800ae88 <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	06d0      	lsls	r0, r2, #27
 800ae46:	d502      	bpl.n	800ae4e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae48:	68da      	ldr	r2, [r3, #12]
 800ae4a:	06d1      	lsls	r1, r2, #27
 800ae4c:	d40c      	bmi.n	800ae68 <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae4e:	691a      	ldr	r2, [r3, #16]
 800ae50:	07d2      	lsls	r2, r2, #31
 800ae52:	d502      	bpl.n	800ae5a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	07d0      	lsls	r0, r2, #31
 800ae58:	d450      	bmi.n	800aefc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae5a:	691a      	ldr	r2, [r3, #16]
 800ae5c:	0651      	lsls	r1, r2, #25
 800ae5e:	d502      	bpl.n	800ae66 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae60:	68da      	ldr	r2, [r3, #12]
 800ae62:	0652      	lsls	r2, r2, #25
 800ae64:	d443      	bmi.n	800aeee <HAL_TIM_IRQHandler+0xd6>
}
 800ae66:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae68:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae6c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae6e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae70:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae72:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800ae74:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae76:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ae7a:	d047      	beq.n	800af0c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800ae7c:	f7ff ffc6 	bl	800ae0c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae80:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae82:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae84:	7622      	strb	r2, [r4, #24]
 800ae86:	e7e2      	b.n	800ae4e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae88:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae8c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae8e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae90:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae92:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800ae94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae96:	079b      	lsls	r3, r3, #30
 800ae98:	d044      	beq.n	800af24 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800ae9a:	f7ff ffb7 	bl	800ae0c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae9e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aea0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aea2:	7622      	strb	r2, [r4, #24]
 800aea4:	e7cd      	b.n	800ae42 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aea6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeaa:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aeac:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeae:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeb0:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeb4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800aeb8:	d131      	bne.n	800af1e <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeba:	f7ff ffa5 	bl	800ae08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aebe:	4620      	mov	r0, r4
 800aec0:	f7ff ffa6 	bl	800ae10 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aec6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec8:	7622      	strb	r2, [r4, #24]
 800aeca:	e7b4      	b.n	800ae36 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aecc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aed0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aed2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aed4:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	0799      	lsls	r1, r3, #30
 800aeda:	d11d      	bne.n	800af18 <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aedc:	f7ff ff94 	bl	800ae08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff ff95 	bl	800ae10 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aee8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeea:	7622      	strb	r2, [r4, #24]
 800aeec:	e79d      	b.n	800ae2a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aeee:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800aef2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aef4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800aef6:	f7ff ff8d 	bl	800ae14 <HAL_TIM_TriggerCallback>
}
 800aefa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aefc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800af00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af02:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800af04:	f7fc fa9c 	bl	8007440 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	e7a6      	b.n	800ae5a <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af0c:	f7ff ff7c 	bl	800ae08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af10:	4620      	mov	r0, r4
 800af12:	f7ff ff7d 	bl	800ae10 <HAL_TIM_PWM_PulseFinishedCallback>
 800af16:	e7b3      	b.n	800ae80 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 800af18:	f7ff ff78 	bl	800ae0c <HAL_TIM_IC_CaptureCallback>
 800af1c:	e7e3      	b.n	800aee6 <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 800af1e:	f7ff ff75 	bl	800ae0c <HAL_TIM_IC_CaptureCallback>
 800af22:	e7cf      	b.n	800aec4 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af24:	f7ff ff70 	bl	800ae08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af28:	4620      	mov	r0, r4
 800af2a:	f7ff ff71 	bl	800ae10 <HAL_TIM_PWM_PulseFinishedCallback>
 800af2e:	e7b6      	b.n	800ae9e <HAL_TIM_IRQHandler+0x86>

0800af30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af30:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800af34:	2a01      	cmp	r2, #1
 800af36:	d028      	beq.n	800af8a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800af38:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af3a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af3c:	681a      	ldr	r2, [r3, #0]
{
 800af3e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800af40:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800af44:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af46:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800af48:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af4c:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af4e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800af52:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800af54:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af56:	d00a      	beq.n	800af6e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800af58:	480d      	ldr	r0, [pc, #52]	; (800af90 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800af5a:	4282      	cmp	r2, r0
 800af5c:	d007      	beq.n	800af6e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800af5e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800af62:	4282      	cmp	r2, r0
 800af64:	d003      	beq.n	800af6e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800af66:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800af6a:	4282      	cmp	r2, r0
 800af6c:	d104      	bne.n	800af78 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af6e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af70:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af74:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af76:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800af78:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800af7a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800af7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800af80:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800af84:	4610      	mov	r0, r2
}
 800af86:	bc30      	pop	{r4, r5}
 800af88:	4770      	bx	lr
  __HAL_LOCK(htim);
 800af8a:	2002      	movs	r0, #2
}
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	40000400 	.word	0x40000400

0800af94 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af94:	2800      	cmp	r0, #0
 800af96:	f000 8081 	beq.w	800b09c <HAL_UART_Init+0x108>
{
 800af9a:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af9c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800afa0:	4604      	mov	r4, r0
 800afa2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d070      	beq.n	800b08c <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afaa:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800afae:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afb0:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800afb2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afb4:	4302      	orrs	r2, r0
 800afb6:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800afb8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800afbc:	4302      	orrs	r2, r0
 800afbe:	69e0      	ldr	r0, [r4, #28]
 800afc0:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800afc2:	68d8      	ldr	r0, [r3, #12]
 800afc4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800afc8:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afca:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afcc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afce:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800afd2:	4329      	orrs	r1, r5
 800afd4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800afd6:	68d9      	ldr	r1, [r3, #12]
 800afd8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800afdc:	f021 010c 	bic.w	r1, r1, #12
 800afe0:	430a      	orrs	r2, r1
 800afe2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afe4:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800afe6:	492e      	ldr	r1, [pc, #184]	; (800b0a0 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afe8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800afec:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800afee:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aff0:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800aff2:	d050      	beq.n	800b096 <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800aff4:	f7ff fdb0 	bl	800ab58 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aff8:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800affa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800affe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b002:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b006:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b008:	d027      	beq.n	800b05a <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b010:	2564      	movs	r5, #100	; 0x64
 800b012:	4824      	ldr	r0, [pc, #144]	; (800b0a4 <HAL_UART_Init+0x110>)
 800b014:	6822      	ldr	r2, [r4, #0]
 800b016:	fba0 6103 	umull	r6, r1, r0, r3
 800b01a:	0949      	lsrs	r1, r1, #5
 800b01c:	fb05 3311 	mls	r3, r5, r1, r3
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	3332      	adds	r3, #50	; 0x32
 800b024:	fba0 0303 	umull	r0, r3, r0, r3
 800b028:	0109      	lsls	r1, r1, #4
 800b02a:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800b02e:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b030:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800b032:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b034:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800b036:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b038:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b03c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b03e:	6953      	ldr	r3, [r2, #20]
 800b040:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800b044:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800b046:	68d3      	ldr	r3, [r2, #12]
 800b048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b04c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04e:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b050:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b054:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800b058:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	fbb0 f0f3 	udiv	r0, r0, r3
 800b060:	2364      	movs	r3, #100	; 0x64
 800b062:	4e10      	ldr	r6, [pc, #64]	; (800b0a4 <HAL_UART_Init+0x110>)
 800b064:	6822      	ldr	r2, [r4, #0]
 800b066:	fba6 5100 	umull	r5, r1, r6, r0
 800b06a:	094d      	lsrs	r5, r1, #5
 800b06c:	fb03 0315 	mls	r3, r3, r5, r0
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	3332      	adds	r3, #50	; 0x32
 800b074:	fba6 1303 	umull	r1, r3, r6, r3
 800b078:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800b07c:	091b      	lsrs	r3, r3, #4
 800b07e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b082:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b086:	440b      	add	r3, r1
 800b088:	6093      	str	r3, [r2, #8]
 800b08a:	e7d1      	b.n	800b030 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800b08c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800b090:	f7fc fe20 	bl	8007cd4 <HAL_UART_MspInit>
 800b094:	e789      	b.n	800afaa <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800b096:	f7ff fd6f 	bl	800ab78 <HAL_RCC_GetPCLK2Freq>
 800b09a:	e7ad      	b.n	800aff8 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800b09c:	2001      	movs	r0, #1
}
 800b09e:	4770      	bx	lr
 800b0a0:	40013800 	.word	0x40013800
 800b0a4:	51eb851f 	.word	0x51eb851f

0800b0a8 <HAL_UART_Transmit_DMA>:
{
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800b0ac:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800b0b0:	2820      	cmp	r0, #32
 800b0b2:	d12d      	bne.n	800b110 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800b0b4:	b351      	cbz	r1, 800b10c <HAL_UART_Transmit_DMA+0x64>
 800b0b6:	b34a      	cbz	r2, 800b10c <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800b0b8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800b0bc:	2801      	cmp	r0, #1
 800b0be:	d027      	beq.n	800b110 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b0c2:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0c6:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b0ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b0cc:	4f11      	ldr	r7, [pc, #68]	; (800b114 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0ce:	4e12      	ldr	r6, [pc, #72]	; (800b118 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800b0d0:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800b0d2:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d4:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800b0d6:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800b0d8:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0dc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0e4:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b0e8:	4e0c      	ldr	r6, [pc, #48]	; (800b11c <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b0ea:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800b0ec:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b0ee:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b0f0:	f7fd fd0e 	bl	8008b10 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b0f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0f8:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800b0fa:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b0fc:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800b0fe:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b102:	695a      	ldr	r2, [r3, #20]
 800b104:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b108:	615a      	str	r2, [r3, #20]
}
 800b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800b10c:	2001      	movs	r0, #1
}
 800b10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b110:	2002      	movs	r0, #2
}
 800b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b114:	0800b1c1 	.word	0x0800b1c1
 800b118:	0800b1ed 	.word	0x0800b1ed
 800b11c:	0800b1fd 	.word	0x0800b1fd

0800b120 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b120:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b124:	2b20      	cmp	r3, #32
 800b126:	d13f      	bne.n	800b1a8 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b128:	2900      	cmp	r1, #0
 800b12a:	d03b      	beq.n	800b1a4 <HAL_UART_Receive_DMA+0x84>
 800b12c:	2a00      	cmp	r2, #0
 800b12e:	d039      	beq.n	800b1a4 <HAL_UART_Receive_DMA+0x84>
{
 800b130:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800b132:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b136:	4604      	mov	r4, r0
 800b138:	2b01      	cmp	r3, #1
{
 800b13a:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800b13c:	d036      	beq.n	800b1ac <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13e:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b140:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b144:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800b148:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800b14a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b14c:	4f19      	ldr	r7, [pc, #100]	; (800b1b4 <HAL_UART_Receive_DMA+0x94>)
 800b14e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b150:	4e19      	ldr	r6, [pc, #100]	; (800b1b8 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b152:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800b154:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b158:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b15a:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b15c:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b160:	460a      	mov	r2, r1
 800b162:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b164:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b168:	4e14      	ldr	r6, [pc, #80]	; (800b1bc <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b16a:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800b16c:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b16e:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b170:	f7fd fcce 	bl	8008b10 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800b174:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	9501      	str	r5, [sp, #4]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	9201      	str	r2, [sp, #4]
 800b17e:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800b180:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b184:	9201      	str	r2, [sp, #4]
 800b186:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b188:	68da      	ldr	r2, [r3, #12]
 800b18a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b18e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b190:	695a      	ldr	r2, [r3, #20]
 800b192:	f042 0201 	orr.w	r2, r2, #1
 800b196:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b198:	695a      	ldr	r2, [r3, #20]
 800b19a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b19e:	615a      	str	r2, [r3, #20]
}
 800b1a0:	b003      	add	sp, #12
 800b1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800b1a4:	2001      	movs	r0, #1
}
 800b1a6:	4770      	bx	lr
    return HAL_BUSY;
 800b1a8:	2002      	movs	r0, #2
 800b1aa:	4770      	bx	lr
 800b1ac:	2002      	movs	r0, #2
}
 800b1ae:	b003      	add	sp, #12
 800b1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	0800b2a9 	.word	0x0800b2a9
 800b1b8:	0800b28d 	.word	0x0800b28d
 800b1bc:	0800b1fd 	.word	0x0800b1fd

0800b1c0 <UART_DMATransmitCplt>:
{
 800b1c0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b1c2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f013 0320 	ands.w	r3, r3, #32
 800b1cc:	d10a      	bne.n	800b1e4 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1ce:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800b1d0:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1d2:	6953      	ldr	r3, [r2, #20]
 800b1d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1d8:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1da:	68d3      	ldr	r3, [r2, #12]
 800b1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e0:	60d3      	str	r3, [r2, #12]
}
 800b1e2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b1e4:	f7fc fbac 	bl	8007940 <HAL_UART_TxCpltCallback>
}
 800b1e8:	bd08      	pop	{r3, pc}
 800b1ea:	bf00      	nop

0800b1ec <UART_DMATxHalfCplt>:
{
 800b1ec:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800b1ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b1f0:	f7fc fb92 	bl	8007918 <HAL_UART_TxHalfCpltCallback>
}
 800b1f4:	bd08      	pop	{r3, pc}
 800b1f6:	bf00      	nop

0800b1f8 <HAL_UART_RxHalfCpltCallback>:
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop

0800b1fc <UART_DMAError>:
{
 800b1fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b200:	6803      	ldr	r3, [r0, #0]
 800b202:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b204:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800b208:	2a21      	cmp	r2, #33	; 0x21
 800b20a:	d00b      	beq.n	800b224 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b20c:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b20e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b212:	2a22      	cmp	r2, #34	; 0x22
 800b214:	d016      	beq.n	800b244 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b216:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b218:	f043 0310 	orr.w	r3, r3, #16
 800b21c:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800b21e:	f7fc fb71 	bl	8007904 <HAL_UART_ErrorCallback>
}
 800b222:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b224:	0609      	lsls	r1, r1, #24
 800b226:	d5f1      	bpl.n	800b20c <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800b228:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800b22a:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800b22c:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b234:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b236:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b23a:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b23c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b240:	2a22      	cmp	r2, #34	; 0x22
 800b242:	d1e8      	bne.n	800b216 <UART_DMAError+0x1a>
 800b244:	064a      	lsls	r2, r1, #25
 800b246:	d5e6      	bpl.n	800b216 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800b248:	2200      	movs	r2, #0
 800b24a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b252:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b254:	695a      	ldr	r2, [r3, #20]
 800b256:	f022 0201 	bic.w	r2, r2, #1
 800b25a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b25c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b25e:	2a01      	cmp	r2, #1
 800b260:	d103      	bne.n	800b26a <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b262:	68da      	ldr	r2, [r3, #12]
 800b264:	f022 0210 	bic.w	r2, r2, #16
 800b268:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800b26a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b26c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b26e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b272:	6303      	str	r3, [r0, #48]	; 0x30
}
 800b274:	e7cf      	b.n	800b216 <UART_DMAError+0x1a>
 800b276:	bf00      	nop

0800b278 <UART_DMAAbortOnError>:
{
 800b278:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800b27a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b27c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800b27e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b280:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800b282:	f7fc fb3f 	bl	8007904 <HAL_UART_ErrorCallback>
}
 800b286:	bd08      	pop	{r3, pc}

0800b288 <HAL_UARTEx_RxEventCallback>:
}
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop

0800b28c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b28c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800b28e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b290:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b292:	2b01      	cmp	r3, #1
 800b294:	d002      	beq.n	800b29c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800b296:	f7ff ffaf 	bl	800b1f8 <HAL_UART_RxHalfCpltCallback>
}
 800b29a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b29c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b29e:	0849      	lsrs	r1, r1, #1
 800b2a0:	f7ff fff2 	bl	800b288 <HAL_UARTEx_RxEventCallback>
}
 800b2a4:	bd08      	pop	{r3, pc}
 800b2a6:	bf00      	nop

0800b2a8 <UART_DMAReceiveCplt>:
{
 800b2a8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b2aa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f013 0320 	ands.w	r3, r3, #32
 800b2b4:	d113      	bne.n	800b2de <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800b2b6:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b8:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800b2ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2bc:	68d3      	ldr	r3, [r2, #12]
 800b2be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2c2:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c4:	6953      	ldr	r3, [r2, #20]
 800b2c6:	f023 0301 	bic.w	r3, r3, #1
 800b2ca:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2cc:	6953      	ldr	r3, [r2, #20]
 800b2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2d2:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800b2d4:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d009      	beq.n	800b2f2 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d002      	beq.n	800b2ea <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800b2e4:	f7fc f9f2 	bl	80076cc <HAL_UART_RxCpltCallback>
}
 800b2e8:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b2ec:	f7ff ffcc 	bl	800b288 <HAL_UARTEx_RxEventCallback>
}
 800b2f0:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f2:	68d3      	ldr	r3, [r2, #12]
 800b2f4:	f023 0310 	bic.w	r3, r3, #16
 800b2f8:	60d3      	str	r3, [r2, #12]
 800b2fa:	e7f0      	b.n	800b2de <UART_DMAReceiveCplt+0x36>

0800b2fc <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2fc:	6883      	ldr	r3, [r0, #8]
 800b2fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b302:	d03b      	beq.n	800b37c <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b304:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b306:	2b00      	cmp	r3, #0
 800b308:	d030      	beq.n	800b36c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b30a:	6803      	ldr	r3, [r0, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b312:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800b314:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b316:	3301      	adds	r3, #1
 800b318:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800b31a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b29b      	uxth	r3, r3
 800b320:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b322:	bb53      	cbnz	r3, 800b37a <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800b324:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b328:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b32a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b32c:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b32e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b330:	f021 0120 	bic.w	r1, r1, #32
 800b334:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b336:	68d1      	ldr	r1, [r2, #12]
 800b338:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b33c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b33e:	6951      	ldr	r1, [r2, #20]
 800b340:	f021 0101 	bic.w	r1, r1, #1
 800b344:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800b346:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b34a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b34c:	2901      	cmp	r1, #1
 800b34e:	d120      	bne.n	800b392 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b350:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b352:	68d1      	ldr	r1, [r2, #12]
 800b354:	f021 0110 	bic.w	r1, r1, #16
 800b358:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b35a:	6811      	ldr	r1, [r2, #0]
 800b35c:	06c9      	lsls	r1, r1, #27
 800b35e:	d422      	bmi.n	800b3a6 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b360:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b362:	f7ff ff91 	bl	800b288 <HAL_UARTEx_RxEventCallback>
}
 800b366:	b003      	add	sp, #12
 800b368:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b36c:	6903      	ldr	r3, [r0, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1cb      	bne.n	800b30a <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b372:	6803      	ldr	r3, [r0, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	7013      	strb	r3, [r2, #0]
 800b378:	e7cc      	b.n	800b314 <UART_Receive_IT.part.0.isra.0+0x18>
 800b37a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b37c:	6903      	ldr	r3, [r0, #16]
 800b37e:	b96b      	cbnz	r3, 800b39c <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b380:	6802      	ldr	r2, [r0, #0]
 800b382:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b384:	6852      	ldr	r2, [r2, #4]
 800b386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b38a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800b38e:	6283      	str	r3, [r0, #40]	; 0x28
 800b390:	e7c3      	b.n	800b31a <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800b392:	f7fc f99b 	bl	80076cc <HAL_UART_RxCpltCallback>
}
 800b396:	b003      	add	sp, #12
 800b398:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b39c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b39e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	7013      	strb	r3, [r2, #0]
 800b3a4:	e7b6      	b.n	800b314 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	6813      	ldr	r3, [r2, #0]
 800b3aa:	9301      	str	r3, [sp, #4]
 800b3ac:	6853      	ldr	r3, [r2, #4]
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	e7d5      	b.n	800b360 <UART_Receive_IT.part.0.isra.0+0x64>

0800b3b4 <HAL_UART_IRQHandler>:
{
 800b3b4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b3b6:	6803      	ldr	r3, [r0, #0]
{
 800b3b8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b3ba:	681a      	ldr	r2, [r3, #0]
{
 800b3bc:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800b3be:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3c2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3c4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800b3c6:	d14e      	bne.n	800b466 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3c8:	0695      	lsls	r5, r2, #26
 800b3ca:	d502      	bpl.n	800b3d2 <HAL_UART_IRQHandler+0x1e>
 800b3cc:	068d      	lsls	r5, r1, #26
 800b3ce:	f100 8090 	bmi.w	800b4f2 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b3d4:	2801      	cmp	r0, #1
 800b3d6:	d00b      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b3d8:	0610      	lsls	r0, r2, #24
 800b3da:	d502      	bpl.n	800b3e2 <HAL_UART_IRQHandler+0x2e>
 800b3dc:	060d      	lsls	r5, r1, #24
 800b3de:	f100 8092 	bmi.w	800b506 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b3e2:	0650      	lsls	r0, r2, #25
 800b3e4:	d502      	bpl.n	800b3ec <HAL_UART_IRQHandler+0x38>
 800b3e6:	064a      	lsls	r2, r1, #25
 800b3e8:	f100 80ab 	bmi.w	800b542 <HAL_UART_IRQHandler+0x18e>
}
 800b3ec:	b003      	add	sp, #12
 800b3ee:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b3f0:	06d0      	lsls	r0, r2, #27
 800b3f2:	d5f1      	bpl.n	800b3d8 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b3f4:	06cd      	lsls	r5, r1, #27
 800b3f6:	d5ef      	bpl.n	800b3d8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	9101      	str	r1, [sp, #4]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	9201      	str	r2, [sp, #4]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	9201      	str	r2, [sp, #4]
 800b404:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b406:	695a      	ldr	r2, [r3, #20]
 800b408:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800b40c:	f000 80d2 	beq.w	800b5b4 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b410:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b412:	6802      	ldr	r2, [r0, #0]
 800b414:	6852      	ldr	r2, [r2, #4]
 800b416:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800b418:	2a00      	cmp	r2, #0
 800b41a:	d0e7      	beq.n	800b3ec <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b41c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b41e:	4295      	cmp	r5, r2
 800b420:	d9e4      	bls.n	800b3ec <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800b422:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b424:	6982      	ldr	r2, [r0, #24]
 800b426:	2a20      	cmp	r2, #32
 800b428:	d016      	beq.n	800b458 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b430:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b432:	695a      	ldr	r2, [r3, #20]
 800b434:	f022 0201 	bic.w	r2, r2, #1
 800b438:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b43a:	695a      	ldr	r2, [r3, #20]
 800b43c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b440:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800b442:	2220      	movs	r2, #32
 800b444:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b448:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b44a:	68da      	ldr	r2, [r3, #12]
 800b44c:	f022 0210 	bic.w	r2, r2, #16
 800b450:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b452:	f7fd fba7 	bl	8008ba4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b456:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b458:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800b45a:	4620      	mov	r0, r4
 800b45c:	1a69      	subs	r1, r5, r1
 800b45e:	b289      	uxth	r1, r1
 800b460:	f7ff ff12 	bl	800b288 <HAL_UARTEx_RxEventCallback>
 800b464:	e7c2      	b.n	800b3ec <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b466:	f005 0501 	and.w	r5, r5, #1
 800b46a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800b46e:	4328      	orrs	r0, r5
 800b470:	d0af      	beq.n	800b3d2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b472:	07d0      	lsls	r0, r2, #31
 800b474:	d505      	bpl.n	800b482 <HAL_UART_IRQHandler+0xce>
 800b476:	05c8      	lsls	r0, r1, #23
 800b478:	d503      	bpl.n	800b482 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b47a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b47c:	f040 0001 	orr.w	r0, r0, #1
 800b480:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b482:	0750      	lsls	r0, r2, #29
 800b484:	d530      	bpl.n	800b4e8 <HAL_UART_IRQHandler+0x134>
 800b486:	b14d      	cbz	r5, 800b49c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b488:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b48a:	f040 0002 	orr.w	r0, r0, #2
 800b48e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b490:	0790      	lsls	r0, r2, #30
 800b492:	d503      	bpl.n	800b49c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b494:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b496:	f040 0004 	orr.w	r0, r0, #4
 800b49a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b49c:	0710      	lsls	r0, r2, #28
 800b49e:	d507      	bpl.n	800b4b0 <HAL_UART_IRQHandler+0xfc>
 800b4a0:	f001 0020 	and.w	r0, r1, #32
 800b4a4:	4328      	orrs	r0, r5
 800b4a6:	d003      	beq.n	800b4b0 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b4aa:	f040 0008 	orr.w	r0, r0, #8
 800b4ae:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d09a      	beq.n	800b3ec <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4b6:	0690      	lsls	r0, r2, #26
 800b4b8:	d509      	bpl.n	800b4ce <HAL_UART_IRQHandler+0x11a>
 800b4ba:	068a      	lsls	r2, r1, #26
 800b4bc:	d507      	bpl.n	800b4ce <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4be:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800b4c2:	2a22      	cmp	r2, #34	; 0x22
 800b4c4:	d103      	bne.n	800b4ce <HAL_UART_IRQHandler+0x11a>
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f7ff ff18 	bl	800b2fc <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4cc:	6823      	ldr	r3, [r4, #0]
 800b4ce:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4d0:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4d2:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4d6:	f005 0508 	and.w	r5, r5, #8
 800b4da:	4315      	orrs	r5, r2
 800b4dc:	d13c      	bne.n	800b558 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f7fc fa10 	bl	8007904 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e4:	6425      	str	r5, [r4, #64]	; 0x40
 800b4e6:	e781      	b.n	800b3ec <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b4e8:	0790      	lsls	r0, r2, #30
 800b4ea:	d5d7      	bpl.n	800b49c <HAL_UART_IRQHandler+0xe8>
 800b4ec:	2d00      	cmp	r5, #0
 800b4ee:	d1d1      	bne.n	800b494 <HAL_UART_IRQHandler+0xe0>
 800b4f0:	e7d4      	b.n	800b49c <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4f2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b4f6:	2b22      	cmp	r3, #34	; 0x22
 800b4f8:	f47f af78 	bne.w	800b3ec <HAL_UART_IRQHandler+0x38>
}
 800b4fc:	b003      	add	sp, #12
 800b4fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b502:	f7ff befb 	b.w	800b2fc <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b506:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b50a:	2a21      	cmp	r2, #33	; 0x21
 800b50c:	f47f af6e 	bne.w	800b3ec <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b510:	68a2      	ldr	r2, [r4, #8]
 800b512:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b516:	d06e      	beq.n	800b5f6 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b518:	6a22      	ldr	r2, [r4, #32]
 800b51a:	1c51      	adds	r1, r2, #1
 800b51c:	6221      	str	r1, [r4, #32]
 800b51e:	7812      	ldrb	r2, [r2, #0]
 800b520:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800b522:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800b524:	3a01      	subs	r2, #1
 800b526:	b292      	uxth	r2, r2
 800b528:	84e2      	strh	r2, [r4, #38]	; 0x26
 800b52a:	2a00      	cmp	r2, #0
 800b52c:	f47f af5e 	bne.w	800b3ec <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b536:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b538:	68da      	ldr	r2, [r3, #12]
 800b53a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b53e:	60da      	str	r2, [r3, #12]
 800b540:	e754      	b.n	800b3ec <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800b542:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b544:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800b546:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b54c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b54e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800b552:	f7fc f9f5 	bl	8007940 <HAL_UART_TxCpltCallback>
    return;
 800b556:	e749      	b.n	800b3ec <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b558:	68da      	ldr	r2, [r3, #12]
 800b55a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b55e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b560:	695a      	ldr	r2, [r3, #20]
 800b562:	f022 0201 	bic.w	r2, r2, #1
 800b566:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b568:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b56a:	2a01      	cmp	r2, #1
 800b56c:	d103      	bne.n	800b576 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b56e:	68da      	ldr	r2, [r3, #12]
 800b570:	f022 0210 	bic.w	r2, r2, #16
 800b574:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b576:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b578:	2120      	movs	r1, #32
 800b57a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b580:	695a      	ldr	r2, [r3, #20]
 800b582:	0655      	lsls	r5, r2, #25
 800b584:	d512      	bpl.n	800b5ac <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b586:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b588:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b58a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b58e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b590:	b160      	cbz	r0, 800b5ac <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b592:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <HAL_UART_IRQHandler+0x258>)
 800b594:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b596:	f7fd fb2d 	bl	8008bf4 <HAL_DMA_Abort_IT>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f43f af26 	beq.w	800b3ec <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b5a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800b5a4:	b003      	add	sp, #12
 800b5a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5aa:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7fc f9a9 	bl	8007904 <HAL_UART_ErrorCallback>
 800b5b2:	e71b      	b.n	800b3ec <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5b4:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800b5b6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5b8:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800b5ba:	b289      	uxth	r1, r1
 800b5bc:	2900      	cmp	r1, #0
 800b5be:	f43f af15 	beq.w	800b3ec <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5c2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b5c4:	1a08      	subs	r0, r1, r0
 800b5c6:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	f43f af0f 	beq.w	800b3ec <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800b5ce:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5d0:	68d8      	ldr	r0, [r3, #12]
 800b5d2:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800b5d6:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5d8:	6958      	ldr	r0, [r3, #20]
 800b5da:	f020 0001 	bic.w	r0, r0, #1
 800b5de:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800b5e0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e6:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5e8:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ea:	f022 0210 	bic.w	r2, r2, #16
 800b5ee:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5f0:	f7ff fe4a 	bl	800b288 <HAL_UARTEx_RxEventCallback>
 800b5f4:	e6fa      	b.n	800b3ec <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5f6:	6922      	ldr	r2, [r4, #16]
 800b5f8:	2a00      	cmp	r2, #0
 800b5fa:	d18d      	bne.n	800b518 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5fc:	6a22      	ldr	r2, [r4, #32]
 800b5fe:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b602:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b606:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b608:	6222      	str	r2, [r4, #32]
 800b60a:	e78a      	b.n	800b522 <HAL_UART_IRQHandler+0x16e>
 800b60c:	0800b279 	.word	0x0800b279

0800b610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b610:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b612:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b614:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800b618:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800b61c:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800b61e:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b622:	4770      	bx	lr

0800b624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b624:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b626:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800b62a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800b62e:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b630:	400a      	ands	r2, r1
 800b632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800b636:	4770      	bx	lr

0800b638 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b638:	b084      	sub	sp, #16
 800b63a:	f10d 0c04 	add.w	ip, sp, #4
 800b63e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800b642:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b644:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b646:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800b648:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b64a:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b64e:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800b650:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800b654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800b658:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop

0800b660 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b660:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b662:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800b664:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b668:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800b66c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b66e:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800b672:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b676:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800b67a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800b67e:	f1be 0f03 	cmp.w	lr, #3
 800b682:	f200 815a 	bhi.w	800b93a <USB_ActivateEndpoint+0x2da>
 800b686:	e8df f00e 	tbb	[pc, lr]
 800b68a:	4e52      	.short	0x4e52
 800b68c:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b68e:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800b692:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b694:	f248 0580 	movw	r5, #32896	; 0x8080
 800b698:	ea4c 0c05 	orr.w	ip, ip, r5
 800b69c:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b6a0:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b6a4:	4ca6      	ldr	r4, [pc, #664]	; (800b940 <USB_ActivateEndpoint+0x2e0>)
 800b6a6:	fa1f fc8c 	uxth.w	ip, ip
 800b6aa:	ea0c 0c04 	and.w	ip, ip, r4
 800b6ae:	ea4c 0c02 	orr.w	ip, ip, r2
 800b6b2:	ea45 050c 	orr.w	r5, r5, ip
 800b6b6:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800b6ba:	7b0d      	ldrb	r5, [r1, #12]
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	d17e      	bne.n	800b7be <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800b6c0:	784d      	ldrb	r5, [r1, #1]
 800b6c2:	2d00      	cmp	r5, #0
 800b6c4:	f000 80dd 	beq.w	800b882 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b6c8:	88c9      	ldrh	r1, [r1, #6]
 800b6ca:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b6ce:	0849      	lsrs	r1, r1, #1
 800b6d0:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800b6d4:	0049      	lsls	r1, r1, #1
 800b6d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b6da:	b2ad      	uxth	r5, r5
 800b6dc:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6e2:	064e      	lsls	r6, r1, #25
 800b6e4:	d509      	bpl.n	800b6fa <USB_ActivateEndpoint+0x9a>
 800b6e6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6ea:	b289      	uxth	r1, r1
 800b6ec:	400c      	ands	r4, r1
 800b6ee:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800b6f2:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800b6f6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b6fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b6fe:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b702:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b706:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b70a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b70e:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800b712:	d04d      	beq.n	800b7b0 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b714:	f081 0120 	eor.w	r1, r1, #32
 800b718:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b71c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b720:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800b724:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800b726:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b728:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800b72c:	e7b2      	b.n	800b694 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800b72e:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800b730:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800b734:	e7ae      	b.n	800b694 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b736:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b73a:	044d      	lsls	r5, r1, #17
 800b73c:	d509      	bpl.n	800b752 <USB_ActivateEndpoint+0xf2>
 800b73e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b742:	b289      	uxth	r1, r1
 800b744:	400c      	ands	r4, r1
 800b746:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b74a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b74e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b752:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b756:	0649      	lsls	r1, r1, #25
 800b758:	d50d      	bpl.n	800b776 <USB_ActivateEndpoint+0x116>
 800b75a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b75e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b762:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b766:	0409      	lsls	r1, r1, #16
 800b768:	0c09      	lsrs	r1, r1, #16
 800b76a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b76e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b772:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b776:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b77a:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b77e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b782:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b786:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b78a:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b78e:	bf18      	it	ne
 800b790:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b794:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b798:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b79c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7a4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b7a8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b7ac:	0409      	lsls	r1, r1, #16
 800b7ae:	0c09      	lsrs	r1, r1, #16
 800b7b0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b7b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b7b8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b7be:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b7c2:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b7c6:	fa1f fc8c 	uxth.w	ip, ip
 800b7ca:	ea0c 0c04 	and.w	ip, ip, r4
 800b7ce:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800b7d2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800b7d6:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b7da:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800b7de:	890e      	ldrh	r6, [r1, #8]
 800b7e0:	fa1f fc8c 	uxth.w	ip, ip
 800b7e4:	0876      	lsrs	r6, r6, #1
 800b7e6:	44bc      	add	ip, r7
 800b7e8:	0076      	lsls	r6, r6, #1
 800b7ea:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800b7ee:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800b7f2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b7f6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b7fa:	b2ad      	uxth	r5, r5
 800b7fc:	443d      	add	r5, r7
 800b7fe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b802:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800b806:	7849      	ldrb	r1, [r1, #1]
 800b808:	2900      	cmp	r1, #0
 800b80a:	d194      	bne.n	800b736 <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b80c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b810:	044f      	lsls	r7, r1, #17
 800b812:	d509      	bpl.n	800b828 <USB_ActivateEndpoint+0x1c8>
 800b814:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b818:	b289      	uxth	r1, r1
 800b81a:	400c      	ands	r4, r1
 800b81c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b820:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b824:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b828:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b82c:	064e      	lsls	r6, r1, #25
 800b82e:	d50d      	bpl.n	800b84c <USB_ActivateEndpoint+0x1ec>
 800b830:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b834:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b838:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b83c:	0409      	lsls	r1, r1, #16
 800b83e:	0c09      	lsrs	r1, r1, #16
 800b840:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b844:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b848:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b84c:	f248 0480 	movw	r4, #32896	; 0x8080
 800b850:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b854:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b858:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b85c:	0409      	lsls	r1, r1, #16
 800b85e:	0c09      	lsrs	r1, r1, #16
 800b860:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b864:	4321      	orrs	r1, r4
 800b866:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b86a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b86e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b872:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b876:	0409      	lsls	r1, r1, #16
 800b878:	0c09      	lsrs	r1, r1, #16
 800b87a:	4321      	orrs	r1, r4
 800b87c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b880:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b882:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800b886:	88cd      	ldrh	r5, [r1, #6]
 800b888:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b88c:	b2a4      	uxth	r4, r4
 800b88e:	086d      	lsrs	r5, r5, #1
 800b890:	006d      	lsls	r5, r5, #1
 800b892:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b894:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b896:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b89a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800b89e:	b289      	uxth	r1, r1
 800b8a0:	4439      	add	r1, r7
 800b8a2:	b366      	cbz	r6, 800b8fe <USB_ActivateEndpoint+0x29e>
 800b8a4:	2e3e      	cmp	r6, #62	; 0x3e
 800b8a6:	d83c      	bhi.n	800b922 <USB_ActivateEndpoint+0x2c2>
 800b8a8:	0874      	lsrs	r4, r6, #1
 800b8aa:	07f5      	lsls	r5, r6, #31
 800b8ac:	bf48      	it	mi
 800b8ae:	3401      	addmi	r4, #1
 800b8b0:	02a4      	lsls	r4, r4, #10
 800b8b2:	b2a4      	uxth	r4, r4
 800b8b4:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b8b8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8bc:	0449      	lsls	r1, r1, #17
 800b8be:	d50d      	bpl.n	800b8dc <USB_ActivateEndpoint+0x27c>
 800b8c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8c4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b8c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b8cc:	0409      	lsls	r1, r1, #16
 800b8ce:	0c09      	lsrs	r1, r1, #16
 800b8d0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800b8d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b8d8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8dc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8e0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b8e4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b8e8:	0409      	lsls	r1, r1, #16
 800b8ea:	0c09      	lsrs	r1, r1, #16
 800b8ec:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b8f0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b8f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b8f8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b8fe:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b902:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b906:	0424      	lsls	r4, r4, #16
 800b908:	0c24      	lsrs	r4, r4, #16
 800b90a:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b90e:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b912:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b916:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b91a:	b2a4      	uxth	r4, r4
 800b91c:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b920:	e7ca      	b.n	800b8b8 <USB_ActivateEndpoint+0x258>
 800b922:	0975      	lsrs	r5, r6, #5
 800b924:	06f4      	lsls	r4, r6, #27
 800b926:	4c07      	ldr	r4, [pc, #28]	; (800b944 <USB_ActivateEndpoint+0x2e4>)
 800b928:	bf08      	it	eq
 800b92a:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800b92e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b932:	b2a4      	uxth	r4, r4
 800b934:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b938:	e7be      	b.n	800b8b8 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800b93a:	2001      	movs	r0, #1
 800b93c:	e6aa      	b.n	800b694 <USB_ActivateEndpoint+0x34>
 800b93e:	bf00      	nop
 800b940:	ffff8f8f 	.word	0xffff8f8f
 800b944:	ffff8000 	.word	0xffff8000

0800b948 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800b948:	7b0b      	ldrb	r3, [r1, #12]
 800b94a:	b9cb      	cbnz	r3, 800b980 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800b94c:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b94e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80b1 	beq.w	800bab8 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b956:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b95a:	0659      	lsls	r1, r3, #25
 800b95c:	f100 80c5 	bmi.w	800baea <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b960:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b96c:	041b      	lsls	r3, r3, #16
 800b96e:	0c1b      	lsrs	r3, r3, #16
 800b970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b978:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800b97c:	2000      	movs	r0, #0
 800b97e:	4770      	bx	lr
    if (ep->is_in == 0U)
 800b980:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b982:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800b984:	2b00      	cmp	r3, #0
 800b986:	d14b      	bne.n	800ba20 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b988:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b98c:	0459      	lsls	r1, r3, #17
 800b98e:	d50d      	bpl.n	800b9ac <USB_DeactivateEndpoint+0x64>
 800b990:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b99c:	041b      	lsls	r3, r3, #16
 800b99e:	0c1b      	lsrs	r3, r3, #16
 800b9a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9b0:	065b      	lsls	r3, r3, #25
 800b9b2:	d50d      	bpl.n	800b9d0 <USB_DeactivateEndpoint+0x88>
 800b9b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c0:	041b      	lsls	r3, r3, #16
 800b9c2:	0c1b      	lsrs	r3, r3, #16
 800b9c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b9d0:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800b9d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9e0:	041b      	lsls	r3, r3, #16
 800b9e2:	0c1b      	lsrs	r3, r3, #16
 800b9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b9f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fc:	041b      	lsls	r3, r3, #16
 800b9fe:	0c1b      	lsrs	r3, r3, #16
 800ba00:	430b      	orrs	r3, r1
 800ba02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba12:	041b      	lsls	r3, r3, #16
 800ba14:	0c1b      	lsrs	r3, r3, #16
 800ba16:	430b      	orrs	r3, r1
 800ba18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba24:	0459      	lsls	r1, r3, #17
 800ba26:	d50d      	bpl.n	800ba44 <USB_DeactivateEndpoint+0xfc>
 800ba28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba34:	041b      	lsls	r3, r3, #16
 800ba36:	0c1b      	lsrs	r3, r3, #16
 800ba38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba48:	065b      	lsls	r3, r3, #25
 800ba4a:	d50d      	bpl.n	800ba68 <USB_DeactivateEndpoint+0x120>
 800ba4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba58:	041b      	lsls	r3, r3, #16
 800ba5a:	0c1b      	lsrs	r3, r3, #16
 800ba5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba64:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba68:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800ba6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba78:	041b      	lsls	r3, r3, #16
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	0c1b      	lsrs	r3, r3, #16
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800baa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800baa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baaa:	041b      	lsls	r3, r3, #16
 800baac:	0c1b      	lsrs	r3, r3, #16
 800baae:	430b      	orrs	r3, r1
 800bab0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800bab4:	2000      	movs	r0, #0
 800bab6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bab8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800babc:	045b      	lsls	r3, r3, #17
 800babe:	d50d      	bpl.n	800badc <USB_DeactivateEndpoint+0x194>
 800bac0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bacc:	041b      	lsls	r3, r3, #16
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800badc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae8:	e740      	b.n	800b96c <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800baea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800baee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf6:	041b      	lsls	r3, r3, #16
 800baf8:	0c1b      	lsrs	r3, r3, #16
 800bafa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bafe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800bb06:	e72b      	b.n	800b960 <USB_DeactivateEndpoint+0x18>

0800bb08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb0c:	784b      	ldrb	r3, [r1, #1]
{
 800bb0e:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d06b      	beq.n	800bbec <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bb14:	7b08      	ldrb	r0, [r1, #12]
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d037      	beq.n	800bb8a <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bb1a:	78c8      	ldrb	r0, [r1, #3]
 800bb1c:	2802      	cmp	r0, #2
 800bb1e:	f000 812d 	beq.w	800bd7c <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bb22:	2801      	cmp	r0, #1
 800bb24:	f040 810a 	bne.w	800bd3c <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bb28:	6988      	ldr	r0, [r1, #24]
 800bb2a:	690c      	ldr	r4, [r1, #16]
 800bb2c:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800bb2e:	bf94      	ite	ls
 800bb30:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800bb32:	1b05      	subhi	r5, r0, r4
 800bb34:	618d      	str	r5, [r1, #24]
 800bb36:	bf88      	it	hi
 800bb38:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f040 811b 	bne.w	800bd76 <USB_EPStartXfer+0x26e>
 800bb40:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bb44:	780b      	ldrb	r3, [r1, #0]
 800bb46:	b2a4      	uxth	r4, r4
 800bb48:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	442c      	add	r4, r5
 800bb50:	2800      	cmp	r0, #0
 800bb52:	f000 8251 	beq.w	800bff8 <USB_EPStartXfer+0x4f0>
 800bb56:	283e      	cmp	r0, #62	; 0x3e
 800bb58:	f200 80f3 	bhi.w	800bd42 <USB_EPStartXfer+0x23a>
 800bb5c:	0845      	lsrs	r5, r0, #1
 800bb5e:	462e      	mov	r6, r5
 800bb60:	f010 0001 	ands.w	r0, r0, #1
 800bb64:	bf18      	it	ne
 800bb66:	1c6e      	addne	r6, r5, #1
 800bb68:	02b6      	lsls	r6, r6, #10
 800bb6a:	b2b6      	uxth	r6, r6
 800bb6c:	52e6      	strh	r6, [r4, r3]
 800bb6e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bb72:	b2a6      	uxth	r6, r4
 800bb74:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bb78:	4434      	add	r4, r6
 800bb7a:	b100      	cbz	r0, 800bb7e <USB_EPStartXfer+0x76>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	02ad      	lsls	r5, r5, #10
 800bb80:	b2a8      	uxth	r0, r5
 800bb82:	52e0      	strh	r0, [r4, r3]
 800bb84:	f891 c000 	ldrb.w	ip, [r1]
 800bb88:	e01d      	b.n	800bbc6 <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800bb8a:	698c      	ldr	r4, [r1, #24]
 800bb8c:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb8e:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800bb90:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800bb92:	bf84      	itt	hi
 800bb94:	1ae0      	subhi	r0, r4, r3
 800bb96:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb98:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bb9c:	6188      	str	r0, [r1, #24]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bba4:	012d      	lsls	r5, r5, #4
 800bba6:	4403      	add	r3, r0
 800bba8:	2c00      	cmp	r4, #0
 800bbaa:	f000 80b7 	beq.w	800bd1c <USB_EPStartXfer+0x214>
 800bbae:	2c3e      	cmp	r4, #62	; 0x3e
 800bbb0:	f200 8129 	bhi.w	800be06 <USB_EPStartXfer+0x2fe>
 800bbb4:	0860      	lsrs	r0, r4, #1
 800bbb6:	07e4      	lsls	r4, r4, #31
 800bbb8:	bf48      	it	mi
 800bbba:	3001      	addmi	r0, #1
 800bbbc:	0280      	lsls	r0, r0, #10
 800bbbe:	b280      	uxth	r0, r0
 800bbc0:	52e8      	strh	r0, [r5, r3]
 800bbc2:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bbc6:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800bbca:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bbcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd4:	041b      	lsls	r3, r3, #16
 800bbd6:	0c1b      	lsrs	r3, r3, #16
 800bbd8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bbdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbe4:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800bbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800bbec:	690d      	ldr	r5, [r1, #16]
 800bbee:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800bbf0:	7b0b      	ldrb	r3, [r1, #12]
 800bbf2:	42a8      	cmp	r0, r5
 800bbf4:	bf28      	it	cs
 800bbf6:	4628      	movcs	r0, r5
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d05d      	beq.n	800bcb8 <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800bbfc:	78cb      	ldrb	r3, [r1, #3]
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	f000 810e 	beq.w	800be20 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bc04:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800bc08:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bc0a:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800bc0e:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bc10:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800bc14:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800bc18:	0424      	lsls	r4, r4, #16
 800bc1a:	0c24      	lsrs	r4, r4, #16
 800bc1c:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800bc20:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800bc24:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc28:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800bc2c:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc2e:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc32:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bc36:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800bc3a:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bc3c:	f000 814a 	beq.w	800bed4 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc40:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bc44:	4434      	add	r4, r6
 800bc46:	b286      	uxth	r6, r0
 800bc48:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc4c:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc4e:	3601      	adds	r6, #1
 800bc50:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800bc54:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc56:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc5a:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800bc5e:	d008      	beq.n	800bc72 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800bc60:	46cc      	mov	ip, r9
 800bc62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800bc66:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800bc6a:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800bc6e:	42a6      	cmp	r6, r4
 800bc70:	d1f9      	bne.n	800bc66 <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800bc72:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bc76:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bc78:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bc7a:	f0c0 81b7 	bcc.w	800bfec <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800bc7e:	2500      	movs	r5, #0
 800bc80:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d036      	beq.n	800bcf4 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc86:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bc8a:	b285      	uxth	r5, r0
 800bc8c:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bc90:	4428      	add	r0, r5
 800bc92:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc94:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc96:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc9a:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc9c:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bc9e:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bca0:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bca4:	d026      	beq.n	800bcf4 <USB_EPStartXfer+0x1ec>
 800bca6:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800bcaa:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bcae:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800bcb2:	4285      	cmp	r5, r0
 800bcb4:	d1f9      	bne.n	800bcaa <USB_EPStartXfer+0x1a2>
 800bcb6:	e01d      	b.n	800bcf4 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bcb8:	b284      	uxth	r4, r0
 800bcba:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcbc:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bcbe:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcc2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bcc6:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcca:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800bcce:	bf18      	it	ne
 800bcd0:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800bcd4:	d005      	beq.n	800bce2 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800bcd6:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800bcda:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800bcdc:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800bce0:	d1f9      	bne.n	800bcd6 <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bce2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bce6:	7808      	ldrb	r0, [r1, #0]
 800bce8:	b29d      	uxth	r5, r3
 800bcea:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bcee:	0100      	lsls	r0, r0, #4
 800bcf0:	442b      	add	r3, r5
 800bcf2:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bcf4:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800bcf6:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bcf8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bcfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd04:	041b      	lsls	r3, r3, #16
 800bd06:	0c1b      	lsrs	r3, r3, #16
 800bd08:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bd0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd14:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bd1c:	5ae8      	ldrh	r0, [r5, r3]
 800bd1e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bd22:	0400      	lsls	r0, r0, #16
 800bd24:	0c00      	lsrs	r0, r0, #16
 800bd26:	52e8      	strh	r0, [r5, r3]
 800bd28:	5ae8      	ldrh	r0, [r5, r3]
 800bd2a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800bd2e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800bd32:	b280      	uxth	r0, r0
 800bd34:	52e8      	strh	r0, [r5, r3]
 800bd36:	f891 c000 	ldrb.w	ip, [r1]
 800bd3a:	e744      	b.n	800bbc6 <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800bd3c:	2001      	movs	r0, #1
}
 800bd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bd42:	0945      	lsrs	r5, r0, #5
 800bd44:	462f      	mov	r7, r5
 800bd46:	f010 001f 	ands.w	r0, r0, #31
 800bd4a:	bf08      	it	eq
 800bd4c:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800bd50:	462e      	mov	r6, r5
 800bd52:	4dbb      	ldr	r5, [pc, #748]	; (800c040 <USB_EPStartXfer+0x538>)
 800bd54:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800bd58:	b2ad      	uxth	r5, r5
 800bd5a:	52e5      	strh	r5, [r4, r3]
 800bd5c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bd60:	b2a5      	uxth	r5, r4
 800bd62:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bd66:	442c      	add	r4, r5
 800bd68:	b900      	cbnz	r0, 800bd6c <USB_EPStartXfer+0x264>
 800bd6a:	3e01      	subs	r6, #1
 800bd6c:	48b4      	ldr	r0, [pc, #720]	; (800c040 <USB_EPStartXfer+0x538>)
 800bd6e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800bd72:	b280      	uxth	r0, r0
 800bd74:	52e0      	strh	r0, [r4, r3]
 800bd76:	f891 c000 	ldrb.w	ip, [r1]
 800bd7a:	e724      	b.n	800bbc6 <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bd7c:	bb13      	cbnz	r3, 800bdc4 <USB_EPStartXfer+0x2bc>
 800bd7e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bd82:	780b      	ldrb	r3, [r1, #0]
 800bd84:	b284      	uxth	r4, r0
 800bd86:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bd8a:	4420      	add	r0, r4
 800bd8c:	690c      	ldr	r4, [r1, #16]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	2c00      	cmp	r4, #0
 800bd92:	f000 8109 	beq.w	800bfa8 <USB_EPStartXfer+0x4a0>
 800bd96:	2c3e      	cmp	r4, #62	; 0x3e
 800bd98:	f200 818e 	bhi.w	800c0b8 <USB_EPStartXfer+0x5b0>
 800bd9c:	0865      	lsrs	r5, r4, #1
 800bd9e:	462e      	mov	r6, r5
 800bda0:	f014 0401 	ands.w	r4, r4, #1
 800bda4:	bf18      	it	ne
 800bda6:	1c6e      	addne	r6, r5, #1
 800bda8:	02b6      	lsls	r6, r6, #10
 800bdaa:	b2b6      	uxth	r6, r6
 800bdac:	52c6      	strh	r6, [r0, r3]
 800bdae:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bdb2:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800bdb6:	b280      	uxth	r0, r0
 800bdb8:	4406      	add	r6, r0
 800bdba:	b104      	cbz	r4, 800bdbe <USB_EPStartXfer+0x2b6>
 800bdbc:	3501      	adds	r5, #1
 800bdbe:	02ad      	lsls	r5, r5, #10
 800bdc0:	b2a8      	uxth	r0, r5
 800bdc2:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800bdc4:	69cb      	ldr	r3, [r1, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0d5      	beq.n	800bd76 <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bdca:	f244 0340 	movw	r3, #16448	; 0x4040
 800bdce:	f891 c000 	ldrb.w	ip, [r1]
 800bdd2:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bdd6:	ea03 0400 	and.w	r4, r3, r0
 800bdda:	4383      	bics	r3, r0
 800bddc:	d002      	beq.n	800bde4 <USB_EPStartXfer+0x2dc>
 800bdde:	2c00      	cmp	r4, #0
 800bde0:	f47f aef1 	bne.w	800bbc6 <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bde4:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800bde8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdf0:	041b      	lsls	r3, r3, #16
 800bdf2:	0c1b      	lsrs	r3, r3, #16
 800bdf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bdfc:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800be00:	f891 c000 	ldrb.w	ip, [r1]
 800be04:	e6df      	b.n	800bbc6 <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800be06:	0966      	lsrs	r6, r4, #5
 800be08:	06e0      	lsls	r0, r4, #27
 800be0a:	488d      	ldr	r0, [pc, #564]	; (800c040 <USB_EPStartXfer+0x538>)
 800be0c:	bf08      	it	eq
 800be0e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800be12:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800be16:	b280      	uxth	r0, r0
 800be18:	52e8      	strh	r0, [r5, r3]
 800be1a:	f891 c000 	ldrb.w	ip, [r1]
 800be1e:	e6d2      	b.n	800bbc6 <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800be20:	6a0c      	ldr	r4, [r1, #32]
 800be22:	42a5      	cmp	r5, r4
 800be24:	f080 8094 	bcs.w	800bf50 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800be28:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800be2a:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800be2c:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be30:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800be34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3c:	041b      	lsls	r3, r3, #16
 800be3e:	0c1b      	lsrs	r3, r3, #16
 800be40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800be44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be48:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be4c:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800be50:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be52:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be56:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800be5a:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800be5c:	f000 80f2 	beq.w	800c044 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800be60:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800be64:	4433      	add	r3, r6
 800be66:	fa1f fa80 	uxth.w	sl, r0
 800be6a:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be6e:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be70:	f10a 0801 	add.w	r8, sl, #1
 800be74:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800be78:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be7c:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be7e:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800be82:	d008      	beq.n	800be96 <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800be84:	46bc      	mov	ip, r7
 800be86:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800be8a:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800be8e:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800be92:	45b3      	cmp	fp, r6
 800be94:	d1f9      	bne.n	800be8a <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800be96:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800be98:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800be9a:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800be9c:	f080 8127 	bcs.w	800c0ee <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800bea0:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bea2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bea6:	620c      	str	r4, [r1, #32]
 800bea8:	b284      	uxth	r4, r0
 800beaa:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800beae:	4420      	add	r0, r4
 800beb0:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800beb4:	8908      	ldrh	r0, [r1, #8]
 800beb6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800beba:	f1b8 0f00 	cmp.w	r8, #0
 800bebe:	f43f af19 	beq.w	800bcf4 <USB_EPStartXfer+0x1ec>
 800bec2:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800bec6:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800beca:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800bece:	429c      	cmp	r4, r3
 800bed0:	d1f9      	bne.n	800bec6 <USB_EPStartXfer+0x3be>
 800bed2:	e70f      	b.n	800bcf4 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bed4:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800bed8:	4434      	add	r4, r6
 800beda:	b286      	uxth	r6, r0
 800bedc:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bee0:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bee4:	3601      	adds	r6, #1
 800bee6:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800beea:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800beec:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bef0:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800bef4:	d008      	beq.n	800bf08 <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800bef6:	464c      	mov	r4, r9
 800bef8:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800befc:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800bf00:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800bf02:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800bf06:	d1f9      	bne.n	800befc <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800bf08:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bf0c:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bf0e:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bf10:	d36f      	bcc.n	800bff2 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800bf12:	2500      	movs	r5, #0
 800bf14:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f43f aeec 	beq.w	800bcf4 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf1c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bf20:	b285      	uxth	r5, r0
 800bf22:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bf26:	4428      	add	r0, r5
 800bf28:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf2a:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf2c:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf30:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf32:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bf34:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf36:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bf3a:	f43f aedb 	beq.w	800bcf4 <USB_EPStartXfer+0x1ec>
 800bf3e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800bf42:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bf46:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800bf4a:	429f      	cmp	r7, r3
 800bf4c:	d1f9      	bne.n	800bf42 <USB_EPStartXfer+0x43a>
 800bf4e:	e6d1      	b.n	800bcf4 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bf50:	7808      	ldrb	r0, [r1, #0]
 800bf52:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800bf56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bf5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	0c1b      	lsrs	r3, r3, #16
 800bf62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf6a:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bf6e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bf72:	0100      	lsls	r0, r0, #4
 800bf74:	b29d      	uxth	r5, r3
 800bf76:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bf7a:	442b      	add	r3, r5
 800bf7c:	b2a5      	uxth	r5, r4
 800bf7e:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf80:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf82:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf84:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf86:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bf8a:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf8c:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf8e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800bf92:	f43f aeaf 	beq.w	800bcf4 <USB_EPStartXfer+0x1ec>
 800bf96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800bf9a:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bf9e:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800bfa2:	4298      	cmp	r0, r3
 800bfa4:	d1f9      	bne.n	800bf9a <USB_EPStartXfer+0x492>
 800bfa6:	e6a5      	b.n	800bcf4 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bfa8:	5ac4      	ldrh	r4, [r0, r3]
 800bfaa:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bfae:	0424      	lsls	r4, r4, #16
 800bfb0:	0c24      	lsrs	r4, r4, #16
 800bfb2:	52c4      	strh	r4, [r0, r3]
 800bfb4:	5ac5      	ldrh	r5, [r0, r3]
 800bfb6:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bfba:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bfbe:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bfc2:	b2ad      	uxth	r5, r5
 800bfc4:	52c5      	strh	r5, [r0, r3]
 800bfc6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bfca:	b285      	uxth	r5, r0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	4428      	add	r0, r5
 800bfd0:	5ac4      	ldrh	r4, [r0, r3]
 800bfd2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bfd6:	0424      	lsls	r4, r4, #16
 800bfd8:	0c24      	lsrs	r4, r4, #16
 800bfda:	52c4      	strh	r4, [r0, r3]
 800bfdc:	5ac4      	ldrh	r4, [r0, r3]
 800bfde:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bfe2:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bfe6:	b2a4      	uxth	r4, r4
 800bfe8:	52c4      	strh	r4, [r0, r3]
 800bfea:	e6eb      	b.n	800bdc4 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800bfec:	1a1d      	subs	r5, r3, r0
 800bfee:	4603      	mov	r3, r0
 800bff0:	e646      	b.n	800bc80 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800bff2:	1a1d      	subs	r5, r3, r0
 800bff4:	4603      	mov	r3, r0
 800bff6:	e78d      	b.n	800bf14 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bff8:	5ae0      	ldrh	r0, [r4, r3]
 800bffa:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bffe:	0400      	lsls	r0, r0, #16
 800c000:	0c00      	lsrs	r0, r0, #16
 800c002:	52e0      	strh	r0, [r4, r3]
 800c004:	5ae5      	ldrh	r5, [r4, r3]
 800c006:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800c00a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800c00e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800c012:	b2ad      	uxth	r5, r5
 800c014:	52e5      	strh	r5, [r4, r3]
 800c016:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800c01a:	b2a4      	uxth	r4, r4
 800c01c:	4420      	add	r0, r4
 800c01e:	5ac4      	ldrh	r4, [r0, r3]
 800c020:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800c024:	0424      	lsls	r4, r4, #16
 800c026:	0c24      	lsrs	r4, r4, #16
 800c028:	52c4      	strh	r4, [r0, r3]
 800c02a:	5ac4      	ldrh	r4, [r0, r3]
 800c02c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800c030:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800c034:	b2a4      	uxth	r4, r4
 800c036:	52c4      	strh	r4, [r0, r3]
 800c038:	f891 c000 	ldrb.w	ip, [r1]
 800c03c:	e5c3      	b.n	800bbc6 <USB_EPStartXfer+0xbe>
 800c03e:	bf00      	nop
 800c040:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c044:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800c048:	4433      	add	r3, r6
 800c04a:	fa1f fa80 	uxth.w	sl, r0
 800c04e:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c052:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c056:	f10a 0801 	add.w	r8, sl, #1
 800c05a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c05e:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c062:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c064:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800c068:	d008      	beq.n	800c07c <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800c06a:	463e      	mov	r6, r7
 800c06c:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800c070:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800c074:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800c076:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800c07a:	d1f9      	bne.n	800c070 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800c07c:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800c07e:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800c080:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800c082:	d23e      	bcs.n	800c102 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800c084:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c086:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c08a:	620c      	str	r4, [r1, #32]
 800c08c:	b284      	uxth	r4, r0
 800c08e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800c092:	4420      	add	r0, r4
 800c094:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c098:	8948      	ldrh	r0, [r1, #10]
 800c09a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800c09e:	f1b8 0f00 	cmp.w	r8, #0
 800c0a2:	f43f ae27 	beq.w	800bcf4 <USB_EPStartXfer+0x1ec>
 800c0a6:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800c0aa:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800c0ae:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800c0b2:	429c      	cmp	r4, r3
 800c0b4:	d1f9      	bne.n	800c0aa <USB_EPStartXfer+0x5a2>
 800c0b6:	e61d      	b.n	800bcf4 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c0b8:	0965      	lsrs	r5, r4, #5
 800c0ba:	462f      	mov	r7, r5
 800c0bc:	f014 041f 	ands.w	r4, r4, #31
 800c0c0:	bf08      	it	eq
 800c0c2:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800c0c6:	462e      	mov	r6, r5
 800c0c8:	4d13      	ldr	r5, [pc, #76]	; (800c118 <USB_EPStartXfer+0x610>)
 800c0ca:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800c0ce:	b2ad      	uxth	r5, r5
 800c0d0:	52c5      	strh	r5, [r0, r3]
 800c0d2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c0d6:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800c0da:	b280      	uxth	r0, r0
 800c0dc:	4405      	add	r5, r0
 800c0de:	b904      	cbnz	r4, 800c0e2 <USB_EPStartXfer+0x5da>
 800c0e0:	3e01      	subs	r6, #1
 800c0e2:	480d      	ldr	r0, [pc, #52]	; (800c118 <USB_EPStartXfer+0x610>)
 800c0e4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800c0e8:	b280      	uxth	r0, r0
 800c0ea:	52e8      	strh	r0, [r5, r3]
 800c0ec:	e66a      	b.n	800bdc4 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c0ee:	fa1f f884 	uxth.w	r8, r4
 800c0f2:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0f6:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c0fa:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800c0fe:	2400      	movs	r4, #0
 800c100:	e6cf      	b.n	800bea2 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c102:	fa1f f884 	uxth.w	r8, r4
 800c106:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c10a:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c10e:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800c112:	2400      	movs	r4, #0
 800c114:	e7b7      	b.n	800c086 <USB_EPStartXfer+0x57e>
 800c116:	bf00      	nop
 800c118:	ffff8000 	.word	0xffff8000

0800c11c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800c11c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c11e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800c120:	b18b      	cbz	r3, 800c146 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c122:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c12a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c12e:	041b      	lsls	r3, r3, #16
 800c130:	0c1b      	lsrs	r3, r3, #16
 800c132:	f083 0310 	eor.w	r3, r3, #16
 800c136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c13e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c142:	2000      	movs	r0, #0
 800c144:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c146:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c14a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c152:	041b      	lsls	r3, r3, #16
 800c154:	0c1b      	lsrs	r3, r3, #16
 800c156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c15a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c162:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c166:	2000      	movs	r0, #0
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop

0800c16c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800c16c:	7b0b      	ldrb	r3, [r1, #12]
 800c16e:	bb3b      	cbnz	r3, 800c1c0 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800c170:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c172:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800c174:	b333      	cbz	r3, 800c1c4 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c176:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c17a:	065b      	lsls	r3, r3, #25
 800c17c:	d50d      	bpl.n	800c19a <USB_EPClearStall+0x2e>
 800c17e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c18a:	041b      	lsls	r3, r3, #16
 800c18c:	0c1b      	lsrs	r3, r3, #16
 800c18e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c196:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800c19a:	78cb      	ldrb	r3, [r1, #3]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d00f      	beq.n	800c1c0 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c1a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c1a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ac:	041b      	lsls	r3, r3, #16
 800c1ae:	0c1b      	lsrs	r3, r3, #16
 800c1b0:	f083 0320 	eor.w	r3, r3, #32
 800c1b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c1c8:	045b      	lsls	r3, r3, #17
 800c1ca:	d50d      	bpl.n	800c1e8 <USB_EPClearStall+0x7c>
 800c1cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1d8:	041b      	lsls	r3, r3, #16
 800c1da:	0c1b      	lsrs	r3, r3, #16
 800c1dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c1e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c1ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1f4:	041b      	lsls	r3, r3, #16
 800c1f6:	0c1b      	lsrs	r3, r3, #16
 800c1f8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c1fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c204:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c208:	2000      	movs	r0, #0
 800c20a:	4770      	bx	lr

0800c20c <USB_SetDevAddress>:
  if (address == 0U)
 800c20c:	b911      	cbnz	r1, 800c214 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c20e:	2380      	movs	r3, #128	; 0x80
 800c210:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800c214:	2000      	movs	r0, #0
 800c216:	4770      	bx	lr

0800c218 <USB_DevConnect>:
}
 800c218:	2000      	movs	r0, #0
 800c21a:	4770      	bx	lr

0800c21c <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800c21c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800c220:	b280      	uxth	r0, r0
 800c222:	4770      	bx	lr

0800c224 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c224:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c226:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800c22a:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c22c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c230:	d007      	beq.n	800c242 <USB_WritePMA+0x1e>
 800c232:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c236:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800c23a:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800c23e:	4282      	cmp	r2, r0
 800c240:	d1f9      	bne.n	800c236 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800c242:	4770      	bx	lr

0800c244 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c244:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c246:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800c24a:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c24c:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c250:	d012      	beq.n	800c278 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c252:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800c254:	46b4      	mov	ip, r6
 800c256:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c258:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800c25c:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800c25e:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c260:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800c262:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c266:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c26a:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800c26e:	d1f3      	bne.n	800c258 <USB_ReadPMA+0x14>
    pBuf++;
 800c270:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800c274:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c278:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800c27a:	bf44      	itt	mi
 800c27c:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c27e:	700b      	strbmi	r3, [r1, #0]
  }
}
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	bf00      	nop

0800c284 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c284:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c288:	b183      	cbz	r3, 800c2ac <USBD_CDC_EP0_RxReady+0x28>
{
 800c28a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c28c:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c290:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c294:	28ff      	cmp	r0, #255	; 0xff
 800c296:	d007      	beq.n	800c2a8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	4621      	mov	r1, r4
 800c29c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c2a0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800c2a2:	23ff      	movs	r3, #255	; 0xff
 800c2a4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	bd10      	pop	{r4, pc}
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	4770      	bx	lr

0800c2b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c2b0:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c2b2:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c2b6:	801a      	strh	r2, [r3, #0]
}
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	20000068 	.word	0x20000068

0800c2c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c2c0:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c2c2:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 800c2c4:	4801      	ldr	r0, [pc, #4]	; (800c2cc <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c2c6:	801a      	strh	r2, [r3, #0]
}
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	200000ac 	.word	0x200000ac

0800c2d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c2d0:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c2d2:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c2d6:	801a      	strh	r2, [r3, #0]
}
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	200000fc 	.word	0x200000fc

0800c2e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c2e0:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c2e2:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 800c2e4:	4801      	ldr	r0, [pc, #4]	; (800c2ec <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c2e6:	801a      	strh	r2, [r3, #0]
}
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	200000f0 	.word	0x200000f0

0800c2f0 <USBD_CDC_DataOut>:
{
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c2f4:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c2f8:	f001 f83a 	bl	800d370 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800c2fc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c300:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800c304:	b14b      	cbz	r3, 800c31a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c306:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c30a:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c314:	4798      	blx	r3
    return USBD_OK;
 800c316:	2000      	movs	r0, #0
}
 800c318:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c31a:	2002      	movs	r0, #2
}
 800c31c:	bd38      	pop	{r3, r4, r5, pc}
 800c31e:	bf00      	nop

0800c320 <USBD_CDC_DataIn>:
{
 800c320:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c322:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800c326:	b1ed      	cbz	r5, 800c364 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c328:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c32c:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800c330:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800c334:	b14a      	cbz	r2, 800c34a <USBD_CDC_DataIn+0x2a>
 800c336:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800c33a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c33e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c340:	fbb2 f3f4 	udiv	r3, r2, r4
 800c344:	fb04 2413 	mls	r4, r4, r3, r2
 800c348:	b124      	cbz	r4, 800c354 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800c34a:	2300      	movs	r3, #0
    return USBD_OK;
 800c34c:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800c34e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800c352:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c354:	4623      	mov	r3, r4
 800c356:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800c358:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c35c:	f000 ffec 	bl	800d338 <USBD_LL_Transmit>
    return USBD_OK;
 800c360:	4620      	mov	r0, r4
}
 800c362:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c364:	2002      	movs	r0, #2
}
 800c366:	bd38      	pop	{r3, r4, r5, pc}

0800c368 <USBD_CDC_Setup>:
{
 800c368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800c36c:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c36e:	780b      	ldrb	r3, [r1, #0]
{
 800c370:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c372:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800c376:	460c      	mov	r4, r1
 800c378:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c37a:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800c37e:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800c382:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c386:	d013      	beq.n	800c3b0 <USBD_CDC_Setup+0x48>
 800c388:	2e20      	cmp	r6, #32
 800c38a:	d117      	bne.n	800c3bc <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800c38c:	88ce      	ldrh	r6, [r1, #6]
 800c38e:	b1f6      	cbz	r6, 800c3ce <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800c390:	061b      	lsls	r3, r3, #24
 800c392:	d53f      	bpl.n	800c414 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c394:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c398:	4632      	mov	r2, r6
 800c39a:	4641      	mov	r1, r8
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	7860      	ldrb	r0, [r4, #1]
 800c3a0:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 800c3a8:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c3aa:	f000 fcef 	bl	800cd8c <USBD_CtlSendData>
 800c3ae:	e00a      	b.n	800c3c6 <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 800c3b0:	784b      	ldrb	r3, [r1, #1]
 800c3b2:	2b0a      	cmp	r3, #10
 800c3b4:	d01f      	beq.n	800c3f6 <USBD_CDC_Setup+0x8e>
 800c3b6:	2b0b      	cmp	r3, #11
 800c3b8:	d027      	beq.n	800c40a <USBD_CDC_Setup+0xa2>
 800c3ba:	b193      	cbz	r3, 800c3e2 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 fcae 	bl	800cd20 <USBD_CtlError>
      ret = USBD_FAIL;
 800c3c4:	2602      	movs	r6, #2
}
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	b002      	add	sp, #8
 800c3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c3ce:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	7848      	ldrb	r0, [r1, #1]
 800c3d8:	4798      	blx	r3
}
 800c3da:	4630      	mov	r0, r6
 800c3dc:	b002      	add	sp, #8
 800c3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d1e8      	bne.n	800c3bc <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	f10d 0106 	add.w	r1, sp, #6
 800c3f0:	f000 fccc 	bl	800cd8c <USBD_CtlSendData>
 800c3f4:	e7e7      	b.n	800c3c6 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d1de      	bne.n	800c3bc <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c3fe:	2201      	movs	r2, #1
 800c400:	f10d 0105 	add.w	r1, sp, #5
 800c404:	f000 fcc2 	bl	800cd8c <USBD_CtlSendData>
 800c408:	e7dd      	b.n	800c3c6 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c40a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d0d9      	beq.n	800c3c6 <USBD_CDC_Setup+0x5e>
 800c412:	e7d3      	b.n	800c3bc <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800c414:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c416:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c418:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c41c:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800c41e:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c422:	f000 fccb 	bl	800cdbc <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800c426:	463e      	mov	r6, r7
 800c428:	e7cd      	b.n	800c3c6 <USBD_CDC_Setup+0x5e>
 800c42a:	bf00      	nop

0800c42c <USBD_CDC_DeInit>:
{
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c430:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c432:	2181      	movs	r1, #129	; 0x81
 800c434:	f000 ff34 	bl	800d2a0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c438:	2101      	movs	r1, #1
 800c43a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c43c:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c43e:	f000 ff2f 	bl	800d2a0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c442:	2182      	movs	r1, #130	; 0x82
 800c444:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c446:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c44a:	f000 ff29 	bl	800d2a0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800c44e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c452:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800c454:	b14b      	cbz	r3, 800c46a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c456:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c45e:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800c462:	f000 ff8d 	bl	800d380 <USBD_static_free>
    pdev->pClassData = NULL;
 800c466:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800c46a:	2000      	movs	r0, #0
 800c46c:	bd38      	pop	{r3, r4, r5, pc}
 800c46e:	bf00      	nop

0800c470 <USBD_CDC_Init>:
{
 800c470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c474:	7c03      	ldrb	r3, [r0, #16]
{
 800c476:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c478:	bbbb      	cbnz	r3, 800c4ea <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c47a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c47e:	2202      	movs	r2, #2
 800c480:	2181      	movs	r1, #129	; 0x81
 800c482:	f000 fefd 	bl	800d280 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c486:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c488:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c48c:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c48e:	4629      	mov	r1, r5
 800c490:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c492:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c494:	4620      	mov	r0, r4
 800c496:	f000 fef3 	bl	800d280 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c49a:	2308      	movs	r3, #8
 800c49c:	2203      	movs	r2, #3
 800c49e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c4a0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 feeb 	bl	800d280 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c4aa:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c4ae:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c4b0:	f000 ff62 	bl	800d378 <USBD_static_malloc>
 800c4b4:	4605      	mov	r5, r0
 800c4b6:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800c4ba:	b348      	cbz	r0, 800c510 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 800c4bc:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c4c0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4798      	blx	r3
    hcdc->TxState = 0U;
 800c4c8:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800c4cc:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c4d0:	7c26      	ldrb	r6, [r4, #16]
 800c4d2:	b196      	cbz	r6, 800c4fa <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 800c4d4:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c4d6:	2340      	movs	r3, #64	; 0x40
 800c4d8:	4639      	mov	r1, r7
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c4e0:	f000 ff38 	bl	800d354 <USBD_LL_PrepareReceive>
}
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c4ea:	2340      	movs	r3, #64	; 0x40
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	2181      	movs	r1, #129	; 0x81
 800c4f0:	f000 fec6 	bl	800d280 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c4f4:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c4f6:	2340      	movs	r3, #64	; 0x40
 800c4f8:	e7c8      	b.n	800c48c <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c4fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4fe:	4639      	mov	r1, r7
 800c500:	4620      	mov	r0, r4
 800c502:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c506:	f000 ff25 	bl	800d354 <USBD_LL_PrepareReceive>
}
 800c50a:	4630      	mov	r0, r6
 800c50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800c510:	463e      	mov	r6, r7
}
 800c512:	4630      	mov	r0, r6
 800c514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c518 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c518:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800c51a:	b119      	cbz	r1, 800c524 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 800c51c:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800c51e:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c522:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800c524:	2002      	movs	r0, #2
  }

  return ret;
}
 800c526:	4770      	bx	lr

0800c528 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c528:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c52a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800c52e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800c530:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c534:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop

0800c53c <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c53c:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800c53e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800c542:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800c544:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop

0800c54c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c54e:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 800c552:	b195      	cbz	r5, 800c57a <USBD_CDC_TransmitPacket+0x2e>
  {
    if(hcdc->TxState == 0U)
 800c554:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800c558:	b10c      	cbz	r4, 800c55e <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800c55a:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800c55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 1U;
 800c55e:	2701      	movs	r7, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c560:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c564:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
      hcdc->TxState = 1U;
 800c568:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c56c:	2181      	movs	r1, #129	; 0x81
 800c56e:	b2b3      	uxth	r3, r6
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c570:	6306      	str	r6, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c572:	f000 fee1 	bl	800d338 <USBD_LL_Transmit>
      return USBD_OK;
 800c576:	4620      	mov	r0, r4
}
 800c578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800c57a:	2002      	movs	r0, #2
}
 800c57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c57e:	bf00      	nop

0800c580 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c580:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800c584:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c586:	b19a      	cbz	r2, 800c5b0 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c588:	7c04      	ldrb	r4, [r0, #16]
 800c58a:	b144      	cbz	r4, 800c59e <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c58c:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 800c58e:	2340      	movs	r3, #64	; 0x40
 800c590:	2101      	movs	r1, #1
 800c592:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c596:	f000 fedd 	bl	800d354 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800c59a:	4620      	mov	r0, r4
 800c59c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800c59e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c5a8:	f000 fed4 	bl	800d354 <USBD_LL_PrepareReceive>
}
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c5b0:	2402      	movs	r4, #2
}
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	bd10      	pop	{r4, pc}
 800c5b6:	bf00      	nop

0800c5b8 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c5b8:	b188      	cbz	r0, 800c5de <USBD_Init+0x26>
{
 800c5ba:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c5bc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c5c0:	b113      	cbz	r3, 800c5c8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c5c8:	b109      	cbz	r1, 800c5ce <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c5ca:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c5ce:	2301      	movs	r3, #1
  pdev->id = id;
 800c5d0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c5d2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c5d6:	f000 fe01 	bl	800d1dc <USBD_LL_Init>

  return USBD_OK;
 800c5da:	2000      	movs	r0, #0
}
 800c5dc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c5de:	2002      	movs	r0, #2
}
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop

0800c5e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c5e4:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800c5e6:	b119      	cbz	r1, 800c5f0 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800c5e8:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800c5ea:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c5ee:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c5f0:	2002      	movs	r0, #2
  }

  return status;
}
 800c5f2:	4770      	bx	lr

0800c5f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c5f4:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c5f6:	f000 fe35 	bl	800d264 <USBD_LL_Start>

  return USBD_OK;
}
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	bd08      	pop	{r3, pc}
 800c5fe:	bf00      	nop

0800c600 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c600:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800c602:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c606:	b11b      	cbz	r3, 800c610 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4798      	blx	r3
 800c60c:	b900      	cbnz	r0, 800c610 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800c60e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c610:	2002      	movs	r0, #2
}
 800c612:	bd08      	pop	{r3, pc}

0800c614 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c614:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c616:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	4798      	blx	r3
  return USBD_OK;
}
 800c61e:	2000      	movs	r0, #0
 800c620:	bd08      	pop	{r3, pc}
 800c622:	bf00      	nop

0800c624 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c628:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800c62c:	4628      	mov	r0, r5
 800c62e:	f000 fb63 	bl	800ccf8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c632:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800c634:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 800c638:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800c63c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800c640:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800c644:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800c646:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800c64a:	d009      	beq.n	800c660 <USBD_LL_SetupStage+0x3c>
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	d013      	beq.n	800c678 <USBD_LL_SetupStage+0x54>
 800c650:	b163      	cbz	r3, 800c66c <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c652:	4620      	mov	r0, r4
 800c654:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c658:	f000 fe30 	bl	800d2bc <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800c65c:	2000      	movs	r0, #0
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800c660:	4629      	mov	r1, r5
 800c662:	4620      	mov	r0, r4
 800c664:	f000 fa78 	bl	800cb58 <USBD_StdItfReq>
}
 800c668:	2000      	movs	r0, #0
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800c66c:	4629      	mov	r1, r5
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 f8f8 	bl	800c864 <USBD_StdDevReq>
}
 800c674:	2000      	movs	r0, #0
 800c676:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800c678:	4629      	mov	r1, r5
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 faa0 	bl	800cbc0 <USBD_StdEPReq>
}
 800c680:	2000      	movs	r0, #0
 800c682:	bd38      	pop	{r3, r4, r5, pc}

0800c684 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c688:	b969      	cbnz	r1, 800c6a6 <USBD_LL_DataOutStage+0x22>
 800c68a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c68c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800c690:	2a03      	cmp	r2, #3
 800c692:	d015      	beq.n	800c6c0 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c694:	2a05      	cmp	r2, #5
 800c696:	460c      	mov	r4, r1
 800c698:	d10e      	bne.n	800c6b8 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c69a:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c69e:	f000 fe0d 	bl	800d2bc <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800c6a2:	4620      	mov	r0, r4
}
 800c6a4:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800c6a6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c6aa:	699b      	ldr	r3, [r3, #24]
 800c6ac:	b133      	cbz	r3, 800c6bc <USBD_LL_DataOutStage+0x38>
 800c6ae:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c6b2:	2a03      	cmp	r2, #3
 800c6b4:	d102      	bne.n	800c6bc <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800c6b6:	4798      	blx	r3
  return USBD_OK;
 800c6b8:	2000      	movs	r0, #0
}
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c6bc:	2002      	movs	r0, #2
}
 800c6be:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 800c6c0:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800c6c4:	4291      	cmp	r1, r2
 800c6c6:	d90c      	bls.n	800c6e2 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 800c6c8:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 800c6ca:	428a      	cmp	r2, r1
 800c6cc:	bf88      	it	hi
 800c6ce:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 800c6d0:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800c6d4:	bf98      	it	ls
 800c6d6:	b292      	uxthls	r2, r2
 800c6d8:	4619      	mov	r1, r3
 800c6da:	f000 fb7d 	bl	800cdd8 <USBD_CtlContinueRx>
  return USBD_OK;
 800c6de:	2000      	movs	r0, #0
}
 800c6e0:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6e2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	b11b      	cbz	r3, 800c6f2 <USBD_LL_DataOutStage+0x6e>
 800c6ea:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c6ee:	2a03      	cmp	r2, #3
 800c6f0:	d004      	beq.n	800c6fc <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f000 fb7a 	bl	800cdec <USBD_CtlSendStatus>
  return USBD_OK;
 800c6f8:	2000      	movs	r0, #0
}
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800c6fc:	4798      	blx	r3
 800c6fe:	e7f8      	b.n	800c6f2 <USBD_LL_DataOutStage+0x6e>

0800c700 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c704:	b961      	cbnz	r1, 800c720 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c706:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d015      	beq.n	800c73a <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c70e:	f033 0304 	bics.w	r3, r3, #4
 800c712:	d02e      	beq.n	800c772 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c714:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d031      	beq.n	800c780 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800c71c:	2000      	movs	r0, #0
}
 800c71e:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800c720:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	b133      	cbz	r3, 800c736 <USBD_LL_DataInStage+0x36>
 800c728:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c72c:	2a03      	cmp	r2, #3
 800c72e:	d102      	bne.n	800c736 <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 800c730:	4798      	blx	r3
  return USBD_OK;
 800c732:	2000      	movs	r0, #0
}
 800c734:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c736:	2002      	movs	r0, #2
}
 800c738:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800c73a:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800c73e:	429e      	cmp	r6, r3
 800c740:	d833      	bhi.n	800c7aa <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c742:	69c2      	ldr	r2, [r0, #28]
 800c744:	fbb2 f5f3 	udiv	r5, r2, r3
 800c748:	fb03 2515 	mls	r5, r3, r5, r2
 800c74c:	b9ed      	cbnz	r5, 800c78a <USBD_LL_DataInStage+0x8a>
 800c74e:	4293      	cmp	r3, r2
 800c750:	d81b      	bhi.n	800c78a <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800c752:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800c756:	429a      	cmp	r2, r3
 800c758:	d217      	bcs.n	800c78a <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c75a:	462a      	mov	r2, r5
 800c75c:	f000 fb24 	bl	800cda8 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c760:	462b      	mov	r3, r5
 800c762:	462a      	mov	r2, r5
 800c764:	4629      	mov	r1, r5
 800c766:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800c768:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c76c:	f000 fdf2 	bl	800d354 <USBD_LL_PrepareReceive>
 800c770:	e7d0      	b.n	800c714 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800c772:	2180      	movs	r1, #128	; 0x80
 800c774:	f000 fda2 	bl	800d2bc <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800c778:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d1cd      	bne.n	800c71c <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 800c780:	2300      	movs	r3, #0
 800c782:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800c786:	4618      	mov	r0, r3
}
 800c788:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c78a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	b11b      	cbz	r3, 800c79a <USBD_LL_DataInStage+0x9a>
 800c792:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800c796:	2a03      	cmp	r2, #3
 800c798:	d015      	beq.n	800c7c6 <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800c79a:	2180      	movs	r1, #128	; 0x80
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fd8d 	bl	800d2bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 fb2e 	bl	800ce04 <USBD_CtlReceiveStatus>
 800c7a8:	e7b4      	b.n	800c714 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c7ae:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c7b0:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	f000 faf8 	bl	800cda8 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	462a      	mov	r2, r5
 800c7bc:	4629      	mov	r1, r5
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 fdc8 	bl	800d354 <USBD_LL_PrepareReceive>
 800c7c4:	e7a6      	b.n	800c714 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4798      	blx	r3
 800c7ca:	e7e6      	b.n	800c79a <USBD_LL_DataInStage+0x9a>

0800c7cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c7cc:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ce:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7d0:	2640      	movs	r6, #64	; 0x40
{
 800c7d2:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7d4:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	4633      	mov	r3, r6
 800c7da:	f000 fd51 	bl	800d280 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7de:	4633      	mov	r3, r6
 800c7e0:	2180      	movs	r1, #128	; 0x80
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7e6:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7ea:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ee:	f000 fd47 	bl	800d280 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c7f2:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800c7f4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7f8:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7fa:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7fc:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c800:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c804:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800c806:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800c80a:	b123      	cbz	r3, 800c816 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c80c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c810:	4620      	mov	r0, r4
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c816:	2000      	movs	r0, #0
 800c818:	bd70      	pop	{r4, r5, r6, pc}
 800c81a:	bf00      	nop

0800c81c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c81c:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800c81e:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c820:	7419      	strb	r1, [r3, #16]
}
 800c822:	4770      	bx	lr

0800c824 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c824:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c826:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800c828:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 800c82c:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c82e:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800c832:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800c836:	4770      	bx	lr

0800c838 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c838:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 800c83a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 800c83e:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800c840:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop

0800c848 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c848:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c84c:	2a03      	cmp	r2, #3
 800c84e:	d001      	beq.n	800c854 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800c850:	2000      	movs	r0, #0
 800c852:	4770      	bx	lr
{
 800c854:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800c856:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c85a:	69db      	ldr	r3, [r3, #28]
 800c85c:	b103      	cbz	r3, 800c860 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800c85e:	4798      	blx	r3
}
 800c860:	2000      	movs	r0, #0
 800c862:	bd08      	pop	{r3, pc}

0800c864 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c864:	b530      	push	{r4, r5, lr}
 800c866:	780b      	ldrb	r3, [r1, #0]
 800c868:	460d      	mov	r5, r1
 800c86a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c86e:	2b20      	cmp	r3, #32
{
 800c870:	4604      	mov	r4, r0
 800c872:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c874:	d00d      	beq.n	800c892 <USBD_StdDevReq+0x2e>
 800c876:	2b40      	cmp	r3, #64	; 0x40
 800c878:	d00b      	beq.n	800c892 <USBD_StdDevReq+0x2e>
 800c87a:	b19b      	cbz	r3, 800c8a4 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800c87c:	2180      	movs	r1, #128	; 0x80
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 fd1c 	bl	800d2bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c884:	2100      	movs	r1, #0
 800c886:	4620      	mov	r0, r4
 800c888:	f000 fd18 	bl	800d2bc <USBD_LL_StallEP>
}
 800c88c:	2000      	movs	r0, #0
 800c88e:	b003      	add	sp, #12
 800c890:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800c892:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c896:	4629      	mov	r1, r5
 800c898:	4620      	mov	r0, r4
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	4798      	blx	r3
}
 800c89e:	2000      	movs	r0, #0
 800c8a0:	b003      	add	sp, #12
 800c8a2:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800c8a4:	784b      	ldrb	r3, [r1, #1]
 800c8a6:	2b09      	cmp	r3, #9
 800c8a8:	d8e8      	bhi.n	800c87c <USBD_StdDevReq+0x18>
 800c8aa:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <USBD_StdDevReq+0x4c>)
 800c8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b0:	0800c90b 	.word	0x0800c90b
 800c8b4:	0800c937 	.word	0x0800c937
 800c8b8:	0800c87d 	.word	0x0800c87d
 800c8bc:	0800c955 	.word	0x0800c955
 800c8c0:	0800c87d 	.word	0x0800c87d
 800c8c4:	0800c95d 	.word	0x0800c95d
 800c8c8:	0800c995 	.word	0x0800c995
 800c8cc:	0800c87d 	.word	0x0800c87d
 800c8d0:	0800c9c5 	.word	0x0800c9c5
 800c8d4:	0800c8d9 	.word	0x0800c8d9
  cfgidx = (uint8_t)(req->wValue);
 800c8d8:	7889      	ldrb	r1, [r1, #2]
 800c8da:	4d9e      	ldr	r5, [pc, #632]	; (800cb54 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8dc:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c8de:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8e0:	d8cc      	bhi.n	800c87c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c8e2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	f000 8111 	beq.w	800cb0e <USBD_StdDevReq+0x2aa>
 800c8ec:	2b03      	cmp	r3, #3
 800c8ee:	f000 80ff 	beq.w	800caf0 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 800c8f2:	2180      	movs	r1, #128	; 0x80
 800c8f4:	f000 fce2 	bl	800d2bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 fcde 	bl	800d2bc <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c900:	4620      	mov	r0, r4
 800c902:	7829      	ldrb	r1, [r5, #0]
 800c904:	f7ff fe86 	bl	800c614 <USBD_ClrClassConfig>
      break;
 800c908:	e7c0      	b.n	800c88c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c90a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c90e:	3b01      	subs	r3, #1
 800c910:	2b02      	cmp	r3, #2
 800c912:	d8b3      	bhi.n	800c87c <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800c914:	88cb      	ldrh	r3, [r1, #6]
 800c916:	2b02      	cmp	r3, #2
 800c918:	d1b0      	bne.n	800c87c <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c91a:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 800c91c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c920:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800c922:	b10b      	cbz	r3, 800c928 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c924:	2303      	movs	r3, #3
 800c926:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c928:	2202      	movs	r2, #2
 800c92a:	4620      	mov	r0, r4
 800c92c:	f104 010c 	add.w	r1, r4, #12
 800c930:	f000 fa2c 	bl	800cd8c <USBD_CtlSendData>
    break;
 800c934:	e7aa      	b.n	800c88c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c936:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c93a:	3b01      	subs	r3, #1
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d89d      	bhi.n	800c87c <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c940:	884b      	ldrh	r3, [r1, #2]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d1a2      	bne.n	800c88c <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800c946:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 800c948:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 800c94a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c94e:	f000 fa4d 	bl	800cdec <USBD_CtlSendStatus>
 800c952:	e79b      	b.n	800c88c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c954:	884b      	ldrh	r3, [r1, #2]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d198      	bne.n	800c88c <USBD_StdDevReq+0x28>
 800c95a:	e7f5      	b.n	800c948 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c95c:	888b      	ldrh	r3, [r1, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d18c      	bne.n	800c87c <USBD_StdDevReq+0x18>
 800c962:	88cb      	ldrh	r3, [r1, #6]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d189      	bne.n	800c87c <USBD_StdDevReq+0x18>
 800c968:	884d      	ldrh	r5, [r1, #2]
 800c96a:	2d7f      	cmp	r5, #127	; 0x7f
 800c96c:	d886      	bhi.n	800c87c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c96e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c972:	2b03      	cmp	r3, #3
 800c974:	d082      	beq.n	800c87c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c976:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800c978:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c97c:	f000 fcce 	bl	800d31c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c980:	4620      	mov	r0, r4
 800c982:	f000 fa33 	bl	800cdec <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c986:	2d00      	cmp	r5, #0
 800c988:	f000 80df 	beq.w	800cb4a <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c98c:	2302      	movs	r3, #2
 800c98e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800c992:	e77b      	b.n	800c88c <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800c994:	884a      	ldrh	r2, [r1, #2]
 800c996:	0a13      	lsrs	r3, r2, #8
 800c998:	3b01      	subs	r3, #1
 800c99a:	2b06      	cmp	r3, #6
 800c99c:	f63f af6e 	bhi.w	800c87c <USBD_StdDevReq+0x18>
 800c9a0:	a101      	add	r1, pc, #4	; (adr r1, 800c9a8 <USBD_StdDevReq+0x144>)
 800c9a2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9a6:	bf00      	nop
 800c9a8:	0800ca57 	.word	0x0800ca57
 800c9ac:	0800ca3f 	.word	0x0800ca3f
 800c9b0:	0800ca2d 	.word	0x0800ca2d
 800c9b4:	0800c87d 	.word	0x0800c87d
 800c9b8:	0800c87d 	.word	0x0800c87d
 800c9bc:	0800ca17 	.word	0x0800ca17
 800c9c0:	0800c9e9 	.word	0x0800c9e9
  if (req->wLength != 1U)
 800c9c4:	88ca      	ldrh	r2, [r1, #6]
 800c9c6:	2a01      	cmp	r2, #1
 800c9c8:	f47f af58 	bne.w	800c87c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c9cc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d878      	bhi.n	800cac6 <USBD_StdDevReq+0x262>
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f43f af51 	beq.w	800c87c <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800c9da:	4601      	mov	r1, r0
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c9e2:	f000 f9d3 	bl	800cd8c <USBD_CtlSendData>
      break;
 800c9e6:	e751      	b.n	800c88c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c9e8:	7c03      	ldrb	r3, [r0, #16]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f47f af46 	bne.w	800c87c <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c9f0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c9f4:	f10d 0006 	add.w	r0, sp, #6
 800c9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9fa:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9fc:	2307      	movs	r3, #7
 800c9fe:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 800ca00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca04:	2a00      	cmp	r2, #0
 800ca06:	d06e      	beq.n	800cae6 <USBD_StdDevReq+0x282>
 800ca08:	88eb      	ldrh	r3, [r5, #6]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d162      	bne.n	800cad4 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 f9ec 	bl	800cdec <USBD_CtlSendStatus>
 800ca14:	e73a      	b.n	800c88c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ca16:	7c03      	ldrb	r3, [r0, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f47f af2f 	bne.w	800c87c <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ca1e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ca22:	f10d 0006 	add.w	r0, sp, #6
 800ca26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca28:	4798      	blx	r3
      break;
 800ca2a:	e7e9      	b.n	800ca00 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 800ca2c:	b2d2      	uxtb	r2, r2
 800ca2e:	2a05      	cmp	r2, #5
 800ca30:	f63f af24 	bhi.w	800c87c <USBD_StdDevReq+0x18>
 800ca34:	e8df f002 	tbb	[pc, r2]
 800ca38:	272f373f 	.word	0x272f373f
 800ca3c:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ca3e:	7c03      	ldrb	r3, [r0, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d172      	bne.n	800cb2a <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ca44:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ca48:	f10d 0006 	add.w	r0, sp, #6
 800ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca50:	2302      	movs	r3, #2
 800ca52:	7043      	strb	r3, [r0, #1]
 800ca54:	e7d4      	b.n	800ca00 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca56:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca5a:	f10d 0106 	add.w	r1, sp, #6
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	7c00      	ldrb	r0, [r0, #16]
 800ca62:	4798      	blx	r3
    break;
 800ca64:	e7cc      	b.n	800ca00 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca66:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca6a:	f10d 0106 	add.w	r1, sp, #6
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	7c00      	ldrb	r0, [r0, #16]
 800ca72:	4798      	blx	r3
      break;
 800ca74:	e7c4      	b.n	800ca00 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca76:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca7a:	f10d 0106 	add.w	r1, sp, #6
 800ca7e:	695b      	ldr	r3, [r3, #20]
 800ca80:	7c00      	ldrb	r0, [r0, #16]
 800ca82:	4798      	blx	r3
      break;
 800ca84:	e7bc      	b.n	800ca00 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca86:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca8a:	f10d 0106 	add.w	r1, sp, #6
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	7c00      	ldrb	r0, [r0, #16]
 800ca92:	4798      	blx	r3
      break;
 800ca94:	e7b4      	b.n	800ca00 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca96:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca9a:	f10d 0106 	add.w	r1, sp, #6
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	7c00      	ldrb	r0, [r0, #16]
 800caa2:	4798      	blx	r3
      break;
 800caa4:	e7ac      	b.n	800ca00 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800caa6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800caaa:	f10d 0106 	add.w	r1, sp, #6
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	7c00      	ldrb	r0, [r0, #16]
 800cab2:	4798      	blx	r3
      break;
 800cab4:	e7a4      	b.n	800ca00 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cab6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800caba:	f10d 0106 	add.w	r1, sp, #6
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	7c00      	ldrb	r0, [r0, #16]
 800cac2:	4798      	blx	r3
      break;
 800cac4:	e79c      	b.n	800ca00 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 800cac6:	2b03      	cmp	r3, #3
 800cac8:	f47f aed8 	bne.w	800c87c <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cacc:	1d01      	adds	r1, r0, #4
 800cace:	f000 f95d 	bl	800cd8c <USBD_CtlSendData>
      break;
 800cad2:	e6db      	b.n	800c88c <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 800cad4:	429a      	cmp	r2, r3
 800cad6:	bf28      	it	cs
 800cad8:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800cada:	4601      	mov	r1, r0
 800cadc:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800cade:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800cae2:	f000 f953 	bl	800cd8c <USBD_CtlSendData>
  if(req->wLength == 0U)
 800cae6:	88eb      	ldrh	r3, [r5, #6]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f47f aecf 	bne.w	800c88c <USBD_StdDevReq+0x28>
 800caee:	e78e      	b.n	800ca0e <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 800caf0:	b321      	cbz	r1, 800cb3c <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800caf2:	6841      	ldr	r1, [r0, #4]
 800caf4:	2901      	cmp	r1, #1
 800caf6:	d08a      	beq.n	800ca0e <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caf8:	b2c9      	uxtb	r1, r1
 800cafa:	f7ff fd8b 	bl	800c614 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cafe:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cb00:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800cb02:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cb04:	f7ff fd7c 	bl	800c600 <USBD_SetClassConfig>
 800cb08:	2802      	cmp	r0, #2
 800cb0a:	d180      	bne.n	800ca0e <USBD_StdDevReq+0x1aa>
 800cb0c:	e6b6      	b.n	800c87c <USBD_StdDevReq+0x18>
      if (cfgidx)
 800cb0e:	2900      	cmp	r1, #0
 800cb10:	f43f af7d 	beq.w	800ca0e <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 800cb14:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb16:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800cb18:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb1a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cb1e:	f7ff fd6f 	bl	800c600 <USBD_SetClassConfig>
 800cb22:	2802      	cmp	r0, #2
 800cb24:	f47f af73 	bne.w	800ca0e <USBD_StdDevReq+0x1aa>
 800cb28:	e6a8      	b.n	800c87c <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cb2a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800cb2e:	f10d 0006 	add.w	r0, sp, #6
 800cb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb34:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb36:	2302      	movs	r3, #2
 800cb38:	7043      	strb	r3, [r0, #1]
 800cb3a:	e761      	b.n	800ca00 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb3c:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800cb3e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb40:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800cb44:	f7ff fd66 	bl	800c614 <USBD_ClrClassConfig>
 800cb48:	e761      	b.n	800ca0e <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800cb50:	e69c      	b.n	800c88c <USBD_StdDevReq+0x28>
 800cb52:	bf00      	nop
 800cb54:	20000a90 	.word	0x20000a90

0800cb58 <USBD_StdItfReq>:
{
 800cb58:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb5a:	780b      	ldrb	r3, [r1, #0]
{
 800cb5c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb5e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800cb62:	2a40      	cmp	r2, #64	; 0x40
{
 800cb64:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb66:	d00a      	beq.n	800cb7e <USBD_StdItfReq+0x26>
 800cb68:	065b      	lsls	r3, r3, #25
 800cb6a:	d508      	bpl.n	800cb7e <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800cb6c:	2180      	movs	r1, #128	; 0x80
 800cb6e:	f000 fba5 	bl	800d2bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cb72:	2100      	movs	r1, #0
 800cb74:	4620      	mov	r0, r4
 800cb76:	f000 fba1 	bl	800d2bc <USBD_LL_StallEP>
}
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800cb7e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800cb82:	3b01      	subs	r3, #1
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d811      	bhi.n	800cbac <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb88:	792b      	ldrb	r3, [r5, #4]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d80e      	bhi.n	800cbac <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cb8e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cb92:	4629      	mov	r1, r5
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	4620      	mov	r0, r4
 800cb98:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb9a:	88eb      	ldrh	r3, [r5, #6]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1ec      	bne.n	800cb7a <USBD_StdItfReq+0x22>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	d1ea      	bne.n	800cb7a <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 f921 	bl	800cdec <USBD_CtlSendStatus>
 800cbaa:	e7e6      	b.n	800cb7a <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800cbac:	2180      	movs	r1, #128	; 0x80
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 fb84 	bl	800d2bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f000 fb80 	bl	800d2bc <USBD_LL_StallEP>
}
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	bd38      	pop	{r3, r4, r5, pc}

0800cbc0 <USBD_StdEPReq>:
{
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	780b      	ldrb	r3, [r1, #0]
 800cbc4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbca:	2b20      	cmp	r3, #32
 800cbcc:	d00c      	beq.n	800cbe8 <USBD_StdEPReq+0x28>
 800cbce:	2b40      	cmp	r3, #64	; 0x40
 800cbd0:	d00a      	beq.n	800cbe8 <USBD_StdEPReq+0x28>
 800cbd2:	b183      	cbz	r3, 800cbf6 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800cbd4:	2180      	movs	r1, #128	; 0x80
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 fb70 	bl	800d2bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 fb6c 	bl	800d2bc <USBD_LL_StallEP>
}
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800cbe8:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cbec:	4620      	mov	r0, r4
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	4798      	blx	r3
}
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800cbf6:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800cbf8:	888a      	ldrh	r2, [r1, #4]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800cc00:	d03e      	beq.n	800cc80 <USBD_StdEPReq+0xc0>
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d02a      	beq.n	800cc5c <USBD_StdEPReq+0x9c>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e4      	bne.n	800cbd4 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800cc0a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d051      	beq.n	800ccb6 <USBD_StdEPReq+0xf6>
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d1de      	bne.n	800cbd4 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc16:	f00c 030f 	and.w	r3, ip, #15
 800cc1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800cc1e:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800cc24:	d456      	bmi.n	800ccd4 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc26:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0d2      	beq.n	800cbd4 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cc2e:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cc32:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800cc36:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cc3a:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc3e:	b133      	cbz	r3, 800cc4e <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cc40:	4661      	mov	r1, ip
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fb56 	bl	800d2f4 <USBD_LL_IsStallEP>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d04f      	beq.n	800ccec <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc50:	2202      	movs	r2, #2
 800cc52:	4629      	mov	r1, r5
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 f899 	bl	800cd8c <USBD_CtlSendData>
          break;
 800cc5a:	e7c3      	b.n	800cbe4 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800cc5c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d01d      	beq.n	800cca0 <USBD_StdEPReq+0xe0>
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d1b5      	bne.n	800cbd4 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc68:	884b      	ldrh	r3, [r1, #2]
 800cc6a:	b92b      	cbnz	r3, 800cc78 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc6c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc70:	d002      	beq.n	800cc78 <USBD_StdEPReq+0xb8>
 800cc72:	88cb      	ldrh	r3, [r1, #6]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d03b      	beq.n	800ccf0 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f8b7 	bl	800cdec <USBD_CtlSendStatus>
        break;
 800cc7e:	e7b1      	b.n	800cbe4 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800cc80:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d00b      	beq.n	800cca0 <USBD_StdEPReq+0xe0>
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d1a3      	bne.n	800cbd4 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc8c:	884b      	ldrh	r3, [r1, #2]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1a8      	bne.n	800cbe4 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800cc92:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc96:	d0ef      	beq.n	800cc78 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc98:	4661      	mov	r1, ip
 800cc9a:	f000 fb1d 	bl	800d2d8 <USBD_LL_ClearStallEP>
 800cc9e:	e7eb      	b.n	800cc78 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cca0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cca4:	d096      	beq.n	800cbd4 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800cca6:	4661      	mov	r1, ip
 800cca8:	f000 fb08 	bl	800d2bc <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ccac:	2180      	movs	r1, #128	; 0x80
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f000 fb04 	bl	800d2bc <USBD_LL_StallEP>
 800ccb4:	e796      	b.n	800cbe4 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccb6:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800ccba:	d18b      	bne.n	800cbd4 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800ccbc:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ccbe:	0611      	lsls	r1, r2, #24
 800ccc0:	bf4c      	ite	mi
 800ccc2:	f100 0114 	addmi.w	r1, r0, #20
 800ccc6:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ccca:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800cccc:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ccce:	f000 f85d 	bl	800cd8c <USBD_CtlSendData>
          break;
 800ccd2:	e787      	b.n	800cbe4 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f43f af7c 	beq.w	800cbd4 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ccdc:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cce0:	1c5d      	adds	r5, r3, #1
 800cce2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cce6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ccea:	e7a8      	b.n	800cc3e <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800ccec:	6028      	str	r0, [r5, #0]
 800ccee:	e7af      	b.n	800cc50 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800ccf0:	4661      	mov	r1, ip
 800ccf2:	f000 fae3 	bl	800d2bc <USBD_LL_StallEP>
 800ccf6:	e7bf      	b.n	800cc78 <USBD_StdEPReq+0xb8>

0800ccf8 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ccf8:	780b      	ldrb	r3, [r1, #0]
 800ccfa:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800ccfc:	784b      	ldrb	r3, [r1, #1]
 800ccfe:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cd00:	78ca      	ldrb	r2, [r1, #3]
 800cd02:	788b      	ldrb	r3, [r1, #2]
 800cd04:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cd08:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cd0a:	794a      	ldrb	r2, [r1, #5]
 800cd0c:	790b      	ldrb	r3, [r1, #4]
 800cd0e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cd12:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cd14:	79ca      	ldrb	r2, [r1, #7]
 800cd16:	798b      	ldrb	r3, [r1, #6]
 800cd18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cd1c:	80c3      	strh	r3, [r0, #6]
}
 800cd1e:	4770      	bx	lr

0800cd20 <USBD_CtlError>:
{
 800cd20:	b510      	push	{r4, lr}
 800cd22:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800cd24:	2180      	movs	r1, #128	; 0x80
 800cd26:	f000 fac9 	bl	800d2bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cd2a:	4620      	mov	r0, r4
}
 800cd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800cd30:	2100      	movs	r1, #0
 800cd32:	f000 bac3 	b.w	800d2bc <USBD_LL_StallEP>
 800cd36:	bf00      	nop

0800cd38 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800cd38:	b318      	cbz	r0, 800cd82 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800cd3a:	7803      	ldrb	r3, [r0, #0]
{
 800cd3c:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800cd3e:	b30b      	cbz	r3, 800cd84 <USBD_GetString+0x4c>
 800cd40:	4604      	mov	r4, r0
 800cd42:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800cd46:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800cd4a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	d1f8      	bne.n	800cd46 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cd54:	3301      	adds	r3, #1
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	b2dc      	uxtb	r4, r3
 800cd5a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cd5c:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cd5e:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cd60:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800cd62:	7804      	ldrb	r4, [r0, #0]
 800cd64:	b15c      	cbz	r4, 800cd7e <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cd66:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800cd68:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	b2d2      	uxtb	r2, r2
 800cd6e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800cd70:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800cd72:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800cd76:	3302      	adds	r3, #2
 800cd78:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	d1f5      	bne.n	800cd6a <USBD_GetString+0x32>
}
 800cd7e:	bc30      	pop	{r4, r5}
 800cd80:	4770      	bx	lr
 800cd82:	4770      	bx	lr
    while (*buf != '\0')
 800cd84:	2402      	movs	r4, #2
 800cd86:	4623      	mov	r3, r4
 800cd88:	e7e7      	b.n	800cd5a <USBD_GetString+0x22>
 800cd8a:	bf00      	nop

0800cd8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800cd8c:	b510      	push	{r4, lr}
 800cd8e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd90:	2402      	movs	r4, #2
{
 800cd92:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800cd94:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd98:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd9a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd9e:	f000 facb 	bl	800d338 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cda2:	2000      	movs	r0, #0
 800cda4:	bd10      	pop	{r4, pc}
 800cda6:	bf00      	nop

0800cda8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800cda8:	468c      	mov	ip, r1
 800cdaa:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cdac:	2100      	movs	r1, #0
{
 800cdae:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cdb0:	4662      	mov	r2, ip
 800cdb2:	f000 fac1 	bl	800d338 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	bd08      	pop	{r3, pc}
 800cdba:	bf00      	nop

0800cdbc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdc0:	2403      	movs	r4, #3
{
 800cdc2:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800cdc4:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cdc8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdca:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cdce:	f000 fac1 	bl	800d354 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	bf00      	nop

0800cdd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800cdd8:	468c      	mov	ip, r1
 800cdda:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cddc:	2100      	movs	r1, #0
{
 800cdde:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cde0:	4662      	mov	r2, ip
 800cde2:	f000 fab7 	bl	800d354 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cde6:	2000      	movs	r0, #0
 800cde8:	bd08      	pop	{r3, pc}
 800cdea:	bf00      	nop

0800cdec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800cdec:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdee:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdf0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cdf2:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	f000 fa9d 	bl	800d338 <USBD_LL_Transmit>

  return USBD_OK;
}
 800cdfe:	2000      	movs	r0, #0
 800ce00:	bd08      	pop	{r3, pc}
 800ce02:	bf00      	nop

0800ce04 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800ce04:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce06:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ce08:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce0a:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ce0e:	461a      	mov	r2, r3
 800ce10:	4619      	mov	r1, r3
 800ce12:	f000 fa9f 	bl	800d354 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ce16:	2000      	movs	r0, #0
 800ce18:	bd08      	pop	{r3, pc}
 800ce1a:	bf00      	nop

0800ce1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4917      	ldr	r1, [pc, #92]	; (800ce80 <MX_USB_DEVICE_Init+0x64>)
 800ce22:	4818      	ldr	r0, [pc, #96]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce24:	f7ff fbc8 	bl	800c5b8 <USBD_Init>
 800ce28:	b970      	cbnz	r0, 800ce48 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce2a:	4917      	ldr	r1, [pc, #92]	; (800ce88 <MX_USB_DEVICE_Init+0x6c>)
 800ce2c:	4815      	ldr	r0, [pc, #84]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce2e:	f7ff fbd9 	bl	800c5e4 <USBD_RegisterClass>
 800ce32:	b988      	cbnz	r0, 800ce58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce34:	4915      	ldr	r1, [pc, #84]	; (800ce8c <MX_USB_DEVICE_Init+0x70>)
 800ce36:	4813      	ldr	r0, [pc, #76]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce38:	f7ff fb6e 	bl	800c518 <USBD_CDC_RegisterInterface>
 800ce3c:	b9a0      	cbnz	r0, 800ce68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce3e:	4811      	ldr	r0, [pc, #68]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce40:	f7ff fbd8 	bl	800c5f4 <USBD_Start>
 800ce44:	b9b8      	cbnz	r0, 800ce76 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce46:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ce48:	f7fa fda8 	bl	800799c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce4c:	490e      	ldr	r1, [pc, #56]	; (800ce88 <MX_USB_DEVICE_Init+0x6c>)
 800ce4e:	480d      	ldr	r0, [pc, #52]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce50:	f7ff fbc8 	bl	800c5e4 <USBD_RegisterClass>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d0ed      	beq.n	800ce34 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800ce58:	f7fa fda0 	bl	800799c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce5c:	490b      	ldr	r1, [pc, #44]	; (800ce8c <MX_USB_DEVICE_Init+0x70>)
 800ce5e:	4809      	ldr	r0, [pc, #36]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce60:	f7ff fb5a 	bl	800c518 <USBD_CDC_RegisterInterface>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d0ea      	beq.n	800ce3e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800ce68:	f7fa fd98 	bl	800799c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce6c:	4805      	ldr	r0, [pc, #20]	; (800ce84 <MX_USB_DEVICE_Init+0x68>)
 800ce6e:	f7ff fbc1 	bl	800c5f4 <USBD_Start>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d0e7      	beq.n	800ce46 <MX_USB_DEVICE_Init+0x2a>
}
 800ce76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ce7a:	f7fa bd8f 	b.w	800799c <Error_Handler>
 800ce7e:	bf00      	nop
 800ce80:	20000150 	.word	0x20000150
 800ce84:	20000a94 	.word	0x20000a94
 800ce88:	20000030 	.word	0x20000030
 800ce8c:	20000140 	.word	0x20000140

0800ce90 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800ce90:	2000      	movs	r0, #0
 800ce92:	4770      	bx	lr

0800ce94 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800ce94:	2000      	movs	r0, #0
 800ce96:	4770      	bx	lr

0800ce98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce9e:	4816      	ldr	r0, [pc, #88]	; (800cef8 <CDC_Receive_FS+0x60>)
 800cea0:	4621      	mov	r1, r4
 800cea2:	f7ff fb4b 	bl	800c53c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cea6:	4814      	ldr	r0, [pc, #80]	; (800cef8 <CDC_Receive_FS+0x60>)
 800cea8:	f7ff fb6a 	bl	800c580 <USBD_CDC_ReceivePacket>

	memset (usbbuffer, '\0', 64);  // clear the buffer
 800ceac:	2240      	movs	r2, #64	; 0x40
 800ceae:	2100      	movs	r1, #0
 800ceb0:	4812      	ldr	r0, [pc, #72]	; (800cefc <CDC_Receive_FS+0x64>)
 800ceb2:	f000 fa95 	bl	800d3e0 <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, 64);  // copy the data to the buffer
 800ceb6:	4623      	mov	r3, r4
	uint8_t len = (uint8_t)*Len;
 800ceb8:	682a      	ldr	r2, [r5, #0]
	memcpy(usbbuffer, Buf, 64);  // copy the data to the buffer
 800ceba:	4910      	ldr	r1, [pc, #64]	; (800cefc <CDC_Receive_FS+0x64>)
 800cebc:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800cec0:	681e      	ldr	r6, [r3, #0]
 800cec2:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800cec6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800ceca:	68dd      	ldr	r5, [r3, #12]
 800cecc:	3310      	adds	r3, #16
 800cece:	4283      	cmp	r3, r0
 800ced0:	600e      	str	r6, [r1, #0]
 800ced2:	f8c1 e004 	str.w	lr, [r1, #4]
 800ced6:	f8c1 c008 	str.w	ip, [r1, #8]
 800ceda:	60cd      	str	r5, [r1, #12]
 800cedc:	f101 0110 	add.w	r1, r1, #16
 800cee0:	d1ee      	bne.n	800cec0 <CDC_Receive_FS+0x28>
	memset(Buf, '\0', len);   // clear the Buf also
 800cee2:	2100      	movs	r1, #0
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fa7a 	bl	800d3e0 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800ceec:	4804      	ldr	r0, [pc, #16]	; (800cf00 <CDC_Receive_FS+0x68>)
 800ceee:	f7fb ff53 	bl	8008d98 <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800cef2:	2000      	movs	r0, #0
 800cef4:	bd70      	pop	{r4, r5, r6, pc}
 800cef6:	bf00      	nop
 800cef8:	20000a94 	.word	0x20000a94
 800cefc:	20000a38 	.word	0x20000a38
 800cf00:	20000538 	.word	0x20000538

0800cf04 <CDC_Init_FS>:
{
 800cf04:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf06:	4c06      	ldr	r4, [pc, #24]	; (800cf20 <CDC_Init_FS+0x1c>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	4905      	ldr	r1, [pc, #20]	; (800cf24 <CDC_Init_FS+0x20>)
 800cf0e:	f7ff fb0b 	bl	800c528 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cf12:	4620      	mov	r0, r4
 800cf14:	4904      	ldr	r1, [pc, #16]	; (800cf28 <CDC_Init_FS+0x24>)
 800cf16:	f7ff fb11 	bl	800c53c <USBD_CDC_SetRxBuffer>
}
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	bf00      	nop
 800cf20:	20000a94 	.word	0x20000a94
 800cf24:	20001118 	.word	0x20001118
 800cf28:	20000d30 	.word	0x20000d30

0800cf2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf2c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf2e:	4c09      	ldr	r4, [pc, #36]	; (800cf54 <CDC_Transmit_FS+0x28>)
 800cf30:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 800cf34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf38:	b10b      	cbz	r3, 800cf3e <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf3e:	460a      	mov	r2, r1
 800cf40:	4601      	mov	r1, r0
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7ff faf0 	bl	800c528 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf48:	4620      	mov	r0, r4
}
 800cf4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf4e:	f7ff bafd 	b.w	800c54c <USBD_CDC_TransmitPacket>
 800cf52:	bf00      	nop
 800cf54:	20000a94 	.word	0x20000a94

0800cf58 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf58:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800cf5a:	4801      	ldr	r0, [pc, #4]	; (800cf60 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf5c:	800b      	strh	r3, [r1, #0]
}
 800cf5e:	4770      	bx	lr
 800cf60:	2000016c 	.word	0x2000016c

0800cf64 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf64:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800cf66:	4801      	ldr	r0, [pc, #4]	; (800cf6c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800cf68:	800b      	strh	r3, [r1, #0]
}
 800cf6a:	4770      	bx	lr
 800cf6c:	20000180 	.word	0x20000180

0800cf70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf72:	4c04      	ldr	r4, [pc, #16]	; (800cf84 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800cf74:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf76:	4804      	ldr	r0, [pc, #16]	; (800cf88 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cf78:	4621      	mov	r1, r4
 800cf7a:	f7ff fedd 	bl	800cd38 <USBD_GetString>
  return USBD_StrDesc;
}
 800cf7e:	4620      	mov	r0, r4
 800cf80:	bd10      	pop	{r4, pc}
 800cf82:	bf00      	nop
 800cf84:	20001500 	.word	0x20001500
 800cf88:	08011ab4 	.word	0x08011ab4

0800cf8c <USBD_FS_ProductStrDescriptor>:
{
 800cf8c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf8e:	4c04      	ldr	r4, [pc, #16]	; (800cfa0 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800cf90:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf92:	4804      	ldr	r0, [pc, #16]	; (800cfa4 <USBD_FS_ProductStrDescriptor+0x18>)
 800cf94:	4621      	mov	r1, r4
 800cf96:	f7ff fecf 	bl	800cd38 <USBD_GetString>
}
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	bd10      	pop	{r4, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20001500 	.word	0x20001500
 800cfa4:	08011ac8 	.word	0x08011ac8

0800cfa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfaa:	4c04      	ldr	r4, [pc, #16]	; (800cfbc <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800cfac:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfae:	4804      	ldr	r0, [pc, #16]	; (800cfc0 <USBD_FS_ConfigStrDescriptor+0x18>)
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	f7ff fec1 	bl	800cd38 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	bd10      	pop	{r4, pc}
 800cfba:	bf00      	nop
 800cfbc:	20001500 	.word	0x20001500
 800cfc0:	08011ae0 	.word	0x08011ae0

0800cfc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfc4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfc6:	4c04      	ldr	r4, [pc, #16]	; (800cfd8 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800cfc8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfca:	4804      	ldr	r0, [pc, #16]	; (800cfdc <USBD_FS_InterfaceStrDescriptor+0x18>)
 800cfcc:	4621      	mov	r1, r4
 800cfce:	f7ff feb3 	bl	800cd38 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	bf00      	nop
 800cfd8:	20001500 	.word	0x20001500
 800cfdc:	08011aec 	.word	0x08011aec

0800cfe0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800cfe0:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cfe4:	4a42      	ldr	r2, [pc, #264]	; (800d0f0 <USBD_FS_SerialStrDescriptor+0x110>)
 800cfe6:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800cfe8:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800cfea:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800cfee:	18c3      	adds	r3, r0, r3
 800cff0:	d101      	bne.n	800cff6 <USBD_FS_SerialStrDescriptor+0x16>
}
 800cff2:	4840      	ldr	r0, [pc, #256]	; (800d0f4 <USBD_FS_SerialStrDescriptor+0x114>)
 800cff4:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800cff6:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cffa:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800cffc:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800cffe:	4a3d      	ldr	r2, [pc, #244]	; (800d0f4 <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800d000:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d004:	bf2c      	ite	cs
 800d006:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d008:	3030      	addcc	r0, #48	; 0x30
 800d00a:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800d00c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800d010:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d012:	bf8c      	ite	hi
 800d014:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d016:	3030      	addls	r0, #48	; 0x30
 800d018:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800d01a:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800d01e:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d020:	bf8c      	ite	hi
 800d022:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d024:	3030      	addls	r0, #48	; 0x30
 800d026:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800d028:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800d02c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d02e:	bf8c      	ite	hi
 800d030:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d032:	3030      	addls	r0, #48	; 0x30
 800d034:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800d036:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800d03a:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d03c:	bf8c      	ite	hi
 800d03e:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d040:	3030      	addls	r0, #48	; 0x30
 800d042:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800d044:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800d048:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d04a:	bf8c      	ite	hi
 800d04c:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d04e:	3030      	addls	r0, #48	; 0x30
 800d050:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800d052:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800d056:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d058:	bf8c      	ite	hi
 800d05a:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d05c:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d05e:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800d062:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800d064:	f04f 0c00 	mov.w	ip, #0
 800d068:	2000      	movs	r0, #0
 800d06a:	f882 c005 	strb.w	ip, [r2, #5]
 800d06e:	73d0      	strb	r0, [r2, #15]
 800d070:	f04f 0c00 	mov.w	ip, #0
 800d074:	2000      	movs	r0, #0
 800d076:	f882 c007 	strb.w	ip, [r2, #7]
 800d07a:	7450      	strb	r0, [r2, #17]
 800d07c:	f04f 0c00 	mov.w	ip, #0
 800d080:	2000      	movs	r0, #0
 800d082:	f882 c009 	strb.w	ip, [r2, #9]
 800d086:	74d0      	strb	r0, [r2, #19]
 800d088:	f04f 0c00 	mov.w	ip, #0
 800d08c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800d08e:	f003 030f 	and.w	r3, r3, #15
 800d092:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d094:	bf94      	ite	ls
 800d096:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d098:	3337      	addhi	r3, #55	; 0x37
 800d09a:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800d09c:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800d0a0:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0a4:	bf2c      	ite	cs
 800d0a6:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0a8:	3330      	addcc	r3, #48	; 0x30
 800d0aa:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800d0ac:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800d0b0:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0b2:	bf8c      	ite	hi
 800d0b4:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0b6:	3330      	addls	r3, #48	; 0x30
 800d0b8:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800d0ba:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800d0be:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0c0:	bf8c      	ite	hi
 800d0c2:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0c4:	3330      	addls	r3, #48	; 0x30
 800d0c6:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800d0c8:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800d0cc:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0ce:	bf94      	ite	ls
 800d0d0:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0d2:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800d0d4:	f882 c00b 	strb.w	ip, [r2, #11]
 800d0d8:	7550      	strb	r0, [r2, #21]
 800d0da:	f04f 0c00 	mov.w	ip, #0
 800d0de:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0e0:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	75d0      	strb	r0, [r2, #23]
 800d0e6:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800d0ea:	4802      	ldr	r0, [pc, #8]	; (800d0f4 <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800d0ec:	7653      	strb	r3, [r2, #25]
}
 800d0ee:	4770      	bx	lr
 800d0f0:	1ff80000 	.word	0x1ff80000
 800d0f4:	20000184 	.word	0x20000184

0800d0f8 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d0f8:	4a04      	ldr	r2, [pc, #16]	; (800d10c <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800d0fa:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d0fc:	6853      	ldr	r3, [r2, #4]
 800d0fe:	bf0c      	ite	eq
 800d100:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800d104:	f023 0301 	bicne.w	r3, r3, #1
 800d108:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800d10a:	4770      	bx	lr
 800d10c:	40010000 	.word	0x40010000

0800d110 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800d110:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <HAL_PCD_MspInit+0x3c>)
 800d112:	6802      	ldr	r2, [r0, #0]
 800d114:	429a      	cmp	r2, r3
 800d116:	d000      	beq.n	800d11a <HAL_PCD_MspInit+0xa>
 800d118:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d11a:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800d11c:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800d120:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800d122:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800d124:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800d128:	6259      	str	r1, [r3, #36]	; 0x24
 800d12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800d12c:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800d12e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d132:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d134:	2014      	movs	r0, #20
 800d136:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800d138:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d13a:	f7fb fb85 	bl	8008848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d13e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d140:	b003      	add	sp, #12
 800d142:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d146:	f7fb bbbd 	b.w	80088c4 <HAL_NVIC_EnableIRQ>
 800d14a:	bf00      	nop
 800d14c:	40005c00 	.word	0x40005c00

0800d150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d150:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d152:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d156:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800d15a:	f7ff ba63 	b.w	800c624 <USBD_LL_SetupStage>
 800d15e:	bf00      	nop

0800d160 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d160:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d164:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d168:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800d16c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d170:	f7ff ba88 	b.w	800c684 <USBD_LL_DataOutStage>

0800d174 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d174:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d178:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d17c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d17e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d182:	f7ff babd 	b.w	800c700 <USBD_LL_DataInStage>
 800d186:	bf00      	nop

0800d188 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d188:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d18c:	f7ff bb5c 	b.w	800c848 <USBD_LL_SOF>

0800d190 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d190:	6883      	ldr	r3, [r0, #8]
{
 800d192:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d194:	2b02      	cmp	r3, #2
{
 800d196:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d198:	d001      	beq.n	800d19e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800d19a:	f7fa fbff 	bl	800799c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d19e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	f7ff fb3a 	bl	800c81c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1a8:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800d1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1b0:	f7ff bb0c 	b.w	800c7cc <USBD_LL_Reset>

0800d1b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1b8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d1bc:	f7ff fb32 	bl	800c824 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1c0:	69a3      	ldr	r3, [r4, #24]
 800d1c2:	b123      	cbz	r3, 800d1ce <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1c4:	4a02      	ldr	r2, [pc, #8]	; (800d1d0 <HAL_PCD_SuspendCallback+0x1c>)
 800d1c6:	6913      	ldr	r3, [r2, #16]
 800d1c8:	f043 0306 	orr.w	r3, r3, #6
 800d1cc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1ce:	bd10      	pop	{r4, pc}
 800d1d0:	e000ed00 	.word	0xe000ed00

0800d1d4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1d4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d1d8:	f7ff bb2e 	b.w	800c838 <USBD_LL_Resume>

0800d1dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1dc:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d1de:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800d1e0:	4b1e      	ldr	r3, [pc, #120]	; (800d25c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d1e2:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d1e4:	605c      	str	r4, [r3, #4]
{
 800d1e6:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d1e8:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d1ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d1ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800d1ee:	4a1c      	ldr	r2, [pc, #112]	; (800d260 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800d1f0:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d1f4:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800d1f6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d1fa:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d1fc:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800d1fe:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d200:	f7fc f9ce 	bl	80095a0 <HAL_PCD_Init>
 800d204:	bb30      	cbnz	r0, 800d254 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d206:	2200      	movs	r2, #0
 800d208:	2318      	movs	r3, #24
 800d20a:	4611      	mov	r1, r2
 800d20c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d210:	f7fd f8c6 	bl	800a3a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d214:	2358      	movs	r3, #88	; 0x58
 800d216:	2200      	movs	r2, #0
 800d218:	2180      	movs	r1, #128	; 0x80
 800d21a:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d21e:	f7fd f8bf 	bl	800a3a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d222:	23c0      	movs	r3, #192	; 0xc0
 800d224:	2200      	movs	r2, #0
 800d226:	2181      	movs	r1, #129	; 0x81
 800d228:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d22c:	f7fd f8b8 	bl	800a3a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d230:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d234:	2200      	movs	r2, #0
 800d236:	2101      	movs	r1, #1
 800d238:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d23c:	f7fd f8b0 	bl	800a3a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d240:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d244:	2200      	movs	r2, #0
 800d246:	2182      	movs	r1, #130	; 0x82
 800d248:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d24c:	f7fd f8a8 	bl	800a3a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800d250:	2000      	movs	r0, #0
 800d252:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d254:	f7fa fba2 	bl	800799c <Error_Handler>
 800d258:	e7d5      	b.n	800d206 <USBD_LL_Init+0x2a>
 800d25a:	bf00      	nop
 800d25c:	20001700 	.word	0x20001700
 800d260:	40005c00 	.word	0x40005c00

0800d264 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d264:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800d266:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d26a:	f7fc f9fb 	bl	8009664 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d26e:	2803      	cmp	r0, #3
 800d270:	bf96      	itet	ls
 800d272:	4b02      	ldrls	r3, [pc, #8]	; (800d27c <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800d274:	2002      	movhi	r0, #2
 800d276:	5c18      	ldrbls	r0, [r3, r0]
}
 800d278:	bd08      	pop	{r3, pc}
 800d27a:	bf00      	nop
 800d27c:	08011afc 	.word	0x08011afc

0800d280 <USBD_LL_OpenEP>:
{
 800d280:	4694      	mov	ip, r2
 800d282:	b508      	push	{r3, lr}
 800d284:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d286:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d28a:	4663      	mov	r3, ip
 800d28c:	f7fc ff5e 	bl	800a14c <HAL_PCD_EP_Open>
  switch (hal_status)
 800d290:	2803      	cmp	r0, #3
 800d292:	bf96      	itet	ls
 800d294:	4b01      	ldrls	r3, [pc, #4]	; (800d29c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d296:	2002      	movhi	r0, #2
 800d298:	5c18      	ldrbls	r0, [r3, r0]
}
 800d29a:	bd08      	pop	{r3, pc}
 800d29c:	08011afc 	.word	0x08011afc

0800d2a0 <USBD_LL_CloseEP>:
{
 800d2a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2a2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2a6:	f7fc ff8f 	bl	800a1c8 <HAL_PCD_EP_Close>
  switch (hal_status)
 800d2aa:	2803      	cmp	r0, #3
 800d2ac:	bf96      	itet	ls
 800d2ae:	4b02      	ldrls	r3, [pc, #8]	; (800d2b8 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2b0:	2002      	movhi	r0, #2
 800d2b2:	5c18      	ldrbls	r0, [r3, r0]
}
 800d2b4:	bd08      	pop	{r3, pc}
 800d2b6:	bf00      	nop
 800d2b8:	08011afc 	.word	0x08011afc

0800d2bc <USBD_LL_StallEP>:
{
 800d2bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2be:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2c2:	f7fc fff9 	bl	800a2b8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800d2c6:	2803      	cmp	r0, #3
 800d2c8:	bf96      	itet	ls
 800d2ca:	4b02      	ldrls	r3, [pc, #8]	; (800d2d4 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2cc:	2002      	movhi	r0, #2
 800d2ce:	5c18      	ldrbls	r0, [r3, r0]
}
 800d2d0:	bd08      	pop	{r3, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08011afc 	.word	0x08011afc

0800d2d8 <USBD_LL_ClearStallEP>:
{
 800d2d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d2da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2de:	f7fd f823 	bl	800a328 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800d2e2:	2803      	cmp	r0, #3
 800d2e4:	bf96      	itet	ls
 800d2e6:	4b02      	ldrls	r3, [pc, #8]	; (800d2f0 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d2e8:	2002      	movhi	r0, #2
 800d2ea:	5c18      	ldrbls	r0, [r3, r0]
}
 800d2ec:	bd08      	pop	{r3, pc}
 800d2ee:	bf00      	nop
 800d2f0:	08011afc 	.word	0x08011afc

0800d2f4 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d2f4:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2f6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800d2fa:	d406      	bmi.n	800d30a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d300:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d304:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800d308:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d30a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d30e:	3101      	adds	r1, #1
 800d310:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d314:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d318:	7888      	ldrb	r0, [r1, #2]
 800d31a:	4770      	bx	lr

0800d31c <USBD_LL_SetUSBAddress>:
{
 800d31c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d31e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d322:	f7fc fefd 	bl	800a120 <HAL_PCD_SetAddress>
  switch (hal_status)
 800d326:	2803      	cmp	r0, #3
 800d328:	bf96      	itet	ls
 800d32a:	4b02      	ldrls	r3, [pc, #8]	; (800d334 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d32c:	2002      	movhi	r0, #2
 800d32e:	5c18      	ldrbls	r0, [r3, r0]
}
 800d330:	bd08      	pop	{r3, pc}
 800d332:	bf00      	nop
 800d334:	08011afc 	.word	0x08011afc

0800d338 <USBD_LL_Transmit>:
{
 800d338:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d33a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d33e:	f7fc ff97 	bl	800a270 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800d342:	2803      	cmp	r0, #3
 800d344:	bf96      	itet	ls
 800d346:	4b02      	ldrls	r3, [pc, #8]	; (800d350 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d348:	2002      	movhi	r0, #2
 800d34a:	5c18      	ldrbls	r0, [r3, r0]
}
 800d34c:	bd08      	pop	{r3, pc}
 800d34e:	bf00      	nop
 800d350:	08011afc 	.word	0x08011afc

0800d354 <USBD_LL_PrepareReceive>:
{
 800d354:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d356:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d35a:	f7fc ff67 	bl	800a22c <HAL_PCD_EP_Receive>
  switch (hal_status)
 800d35e:	2803      	cmp	r0, #3
 800d360:	bf96      	itet	ls
 800d362:	4b02      	ldrls	r3, [pc, #8]	; (800d36c <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d364:	2002      	movhi	r0, #2
 800d366:	5c18      	ldrbls	r0, [r3, r0]
}
 800d368:	bd08      	pop	{r3, pc}
 800d36a:	bf00      	nop
 800d36c:	08011afc 	.word	0x08011afc

0800d370 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d370:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d374:	f7fc bf72 	b.w	800a25c <HAL_PCD_EP_GetRxCount>

0800d378 <USBD_static_malloc>:
}
 800d378:	4800      	ldr	r0, [pc, #0]	; (800d37c <USBD_static_malloc+0x4>)
 800d37a:	4770      	bx	lr
 800d37c:	200019ec 	.word	0x200019ec

0800d380 <USBD_static_free>:
}
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop

0800d384 <atof>:
 800d384:	2100      	movs	r1, #0
 800d386:	f001 bae7 	b.w	800e958 <strtod>
	...

0800d38c <__errno>:
 800d38c:	4b01      	ldr	r3, [pc, #4]	; (800d394 <__errno+0x8>)
 800d38e:	6818      	ldr	r0, [r3, #0]
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	200001a0 	.word	0x200001a0

0800d398 <__libc_init_array>:
 800d398:	b570      	push	{r4, r5, r6, lr}
 800d39a:	2600      	movs	r6, #0
 800d39c:	4d0c      	ldr	r5, [pc, #48]	; (800d3d0 <__libc_init_array+0x38>)
 800d39e:	4c0d      	ldr	r4, [pc, #52]	; (800d3d4 <__libc_init_array+0x3c>)
 800d3a0:	1b64      	subs	r4, r4, r5
 800d3a2:	10a4      	asrs	r4, r4, #2
 800d3a4:	42a6      	cmp	r6, r4
 800d3a6:	d109      	bne.n	800d3bc <__libc_init_array+0x24>
 800d3a8:	f004 f9dc 	bl	8011764 <_init>
 800d3ac:	2600      	movs	r6, #0
 800d3ae:	4d0a      	ldr	r5, [pc, #40]	; (800d3d8 <__libc_init_array+0x40>)
 800d3b0:	4c0a      	ldr	r4, [pc, #40]	; (800d3dc <__libc_init_array+0x44>)
 800d3b2:	1b64      	subs	r4, r4, r5
 800d3b4:	10a4      	asrs	r4, r4, #2
 800d3b6:	42a6      	cmp	r6, r4
 800d3b8:	d105      	bne.n	800d3c6 <__libc_init_array+0x2e>
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}
 800d3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3c0:	4798      	blx	r3
 800d3c2:	3601      	adds	r6, #1
 800d3c4:	e7ee      	b.n	800d3a4 <__libc_init_array+0xc>
 800d3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ca:	4798      	blx	r3
 800d3cc:	3601      	adds	r6, #1
 800d3ce:	e7f2      	b.n	800d3b6 <__libc_init_array+0x1e>
 800d3d0:	08011fa4 	.word	0x08011fa4
 800d3d4:	08011fa4 	.word	0x08011fa4
 800d3d8:	08011fa4 	.word	0x08011fa4
 800d3dc:	08011fa8 	.word	0x08011fa8

0800d3e0 <memset>:
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4402      	add	r2, r0
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d100      	bne.n	800d3ea <memset+0xa>
 800d3e8:	4770      	bx	lr
 800d3ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ee:	e7f9      	b.n	800d3e4 <memset+0x4>

0800d3f0 <__cvt>:
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f6:	461f      	mov	r7, r3
 800d3f8:	bfbb      	ittet	lt
 800d3fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d3fe:	461f      	movlt	r7, r3
 800d400:	2300      	movge	r3, #0
 800d402:	232d      	movlt	r3, #45	; 0x2d
 800d404:	b088      	sub	sp, #32
 800d406:	4614      	mov	r4, r2
 800d408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d40a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d40c:	7013      	strb	r3, [r2, #0]
 800d40e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d410:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d414:	f023 0820 	bic.w	r8, r3, #32
 800d418:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d41c:	d005      	beq.n	800d42a <__cvt+0x3a>
 800d41e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d422:	d100      	bne.n	800d426 <__cvt+0x36>
 800d424:	3501      	adds	r5, #1
 800d426:	2302      	movs	r3, #2
 800d428:	e000      	b.n	800d42c <__cvt+0x3c>
 800d42a:	2303      	movs	r3, #3
 800d42c:	aa07      	add	r2, sp, #28
 800d42e:	9204      	str	r2, [sp, #16]
 800d430:	aa06      	add	r2, sp, #24
 800d432:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d436:	e9cd 3500 	strd	r3, r5, [sp]
 800d43a:	4622      	mov	r2, r4
 800d43c:	463b      	mov	r3, r7
 800d43e:	f001 fb23 	bl	800ea88 <_dtoa_r>
 800d442:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d446:	4606      	mov	r6, r0
 800d448:	d102      	bne.n	800d450 <__cvt+0x60>
 800d44a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d44c:	07db      	lsls	r3, r3, #31
 800d44e:	d522      	bpl.n	800d496 <__cvt+0xa6>
 800d450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d454:	eb06 0905 	add.w	r9, r6, r5
 800d458:	d110      	bne.n	800d47c <__cvt+0x8c>
 800d45a:	7833      	ldrb	r3, [r6, #0]
 800d45c:	2b30      	cmp	r3, #48	; 0x30
 800d45e:	d10a      	bne.n	800d476 <__cvt+0x86>
 800d460:	2200      	movs	r2, #0
 800d462:	2300      	movs	r3, #0
 800d464:	4620      	mov	r0, r4
 800d466:	4639      	mov	r1, r7
 800d468:	f7f3 fab6 	bl	80009d8 <__aeabi_dcmpeq>
 800d46c:	b918      	cbnz	r0, 800d476 <__cvt+0x86>
 800d46e:	f1c5 0501 	rsb	r5, r5, #1
 800d472:	f8ca 5000 	str.w	r5, [sl]
 800d476:	f8da 3000 	ldr.w	r3, [sl]
 800d47a:	4499      	add	r9, r3
 800d47c:	2200      	movs	r2, #0
 800d47e:	2300      	movs	r3, #0
 800d480:	4620      	mov	r0, r4
 800d482:	4639      	mov	r1, r7
 800d484:	f7f3 faa8 	bl	80009d8 <__aeabi_dcmpeq>
 800d488:	b108      	cbz	r0, 800d48e <__cvt+0x9e>
 800d48a:	f8cd 901c 	str.w	r9, [sp, #28]
 800d48e:	2230      	movs	r2, #48	; 0x30
 800d490:	9b07      	ldr	r3, [sp, #28]
 800d492:	454b      	cmp	r3, r9
 800d494:	d307      	bcc.n	800d4a6 <__cvt+0xb6>
 800d496:	4630      	mov	r0, r6
 800d498:	9b07      	ldr	r3, [sp, #28]
 800d49a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d49c:	1b9b      	subs	r3, r3, r6
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	b008      	add	sp, #32
 800d4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a6:	1c59      	adds	r1, r3, #1
 800d4a8:	9107      	str	r1, [sp, #28]
 800d4aa:	701a      	strb	r2, [r3, #0]
 800d4ac:	e7f0      	b.n	800d490 <__cvt+0xa0>

0800d4ae <__exponent>:
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4b2:	2900      	cmp	r1, #0
 800d4b4:	f803 2b02 	strb.w	r2, [r3], #2
 800d4b8:	bfb6      	itet	lt
 800d4ba:	222d      	movlt	r2, #45	; 0x2d
 800d4bc:	222b      	movge	r2, #43	; 0x2b
 800d4be:	4249      	neglt	r1, r1
 800d4c0:	2909      	cmp	r1, #9
 800d4c2:	7042      	strb	r2, [r0, #1]
 800d4c4:	dd2b      	ble.n	800d51e <__exponent+0x70>
 800d4c6:	f10d 0407 	add.w	r4, sp, #7
 800d4ca:	46a4      	mov	ip, r4
 800d4cc:	270a      	movs	r7, #10
 800d4ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800d4d2:	460a      	mov	r2, r1
 800d4d4:	46a6      	mov	lr, r4
 800d4d6:	fb07 1516 	mls	r5, r7, r6, r1
 800d4da:	2a63      	cmp	r2, #99	; 0x63
 800d4dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d4e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d4ea:	dcf0      	bgt.n	800d4ce <__exponent+0x20>
 800d4ec:	3130      	adds	r1, #48	; 0x30
 800d4ee:	f1ae 0502 	sub.w	r5, lr, #2
 800d4f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	1c44      	adds	r4, r0, #1
 800d4fa:	4561      	cmp	r1, ip
 800d4fc:	d30a      	bcc.n	800d514 <__exponent+0x66>
 800d4fe:	f10d 0209 	add.w	r2, sp, #9
 800d502:	eba2 020e 	sub.w	r2, r2, lr
 800d506:	4565      	cmp	r5, ip
 800d508:	bf88      	it	hi
 800d50a:	2200      	movhi	r2, #0
 800d50c:	4413      	add	r3, r2
 800d50e:	1a18      	subs	r0, r3, r0
 800d510:	b003      	add	sp, #12
 800d512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d514:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d518:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d51c:	e7ed      	b.n	800d4fa <__exponent+0x4c>
 800d51e:	2330      	movs	r3, #48	; 0x30
 800d520:	3130      	adds	r1, #48	; 0x30
 800d522:	7083      	strb	r3, [r0, #2]
 800d524:	70c1      	strb	r1, [r0, #3]
 800d526:	1d03      	adds	r3, r0, #4
 800d528:	e7f1      	b.n	800d50e <__exponent+0x60>
	...

0800d52c <_printf_float>:
 800d52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	b091      	sub	sp, #68	; 0x44
 800d532:	460c      	mov	r4, r1
 800d534:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d538:	4616      	mov	r6, r2
 800d53a:	461f      	mov	r7, r3
 800d53c:	4605      	mov	r5, r0
 800d53e:	f002 fbf7 	bl	800fd30 <_localeconv_r>
 800d542:	6803      	ldr	r3, [r0, #0]
 800d544:	4618      	mov	r0, r3
 800d546:	9309      	str	r3, [sp, #36]	; 0x24
 800d548:	f7f2 fe1a 	bl	8000180 <strlen>
 800d54c:	2300      	movs	r3, #0
 800d54e:	930e      	str	r3, [sp, #56]	; 0x38
 800d550:	f8d8 3000 	ldr.w	r3, [r8]
 800d554:	900a      	str	r0, [sp, #40]	; 0x28
 800d556:	3307      	adds	r3, #7
 800d558:	f023 0307 	bic.w	r3, r3, #7
 800d55c:	f103 0208 	add.w	r2, r3, #8
 800d560:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d564:	f8d4 b000 	ldr.w	fp, [r4]
 800d568:	f8c8 2000 	str.w	r2, [r8]
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d574:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d578:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d57c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295
 800d582:	4640      	mov	r0, r8
 800d584:	4b9c      	ldr	r3, [pc, #624]	; (800d7f8 <_printf_float+0x2cc>)
 800d586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d588:	f7f3 fa58 	bl	8000a3c <__aeabi_dcmpun>
 800d58c:	bb70      	cbnz	r0, 800d5ec <_printf_float+0xc0>
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	4640      	mov	r0, r8
 800d594:	4b98      	ldr	r3, [pc, #608]	; (800d7f8 <_printf_float+0x2cc>)
 800d596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d598:	f7f3 fa32 	bl	8000a00 <__aeabi_dcmple>
 800d59c:	bb30      	cbnz	r0, 800d5ec <_printf_float+0xc0>
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4640      	mov	r0, r8
 800d5a4:	4651      	mov	r1, sl
 800d5a6:	f7f3 fa21 	bl	80009ec <__aeabi_dcmplt>
 800d5aa:	b110      	cbz	r0, 800d5b2 <_printf_float+0x86>
 800d5ac:	232d      	movs	r3, #45	; 0x2d
 800d5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5b2:	4b92      	ldr	r3, [pc, #584]	; (800d7fc <_printf_float+0x2d0>)
 800d5b4:	4892      	ldr	r0, [pc, #584]	; (800d800 <_printf_float+0x2d4>)
 800d5b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d5ba:	bf94      	ite	ls
 800d5bc:	4698      	movls	r8, r3
 800d5be:	4680      	movhi	r8, r0
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	f04f 0a00 	mov.w	sl, #0
 800d5c6:	6123      	str	r3, [r4, #16]
 800d5c8:	f02b 0304 	bic.w	r3, fp, #4
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	4633      	mov	r3, r6
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	9700      	str	r7, [sp, #0]
 800d5d6:	aa0f      	add	r2, sp, #60	; 0x3c
 800d5d8:	f000 f9d4 	bl	800d984 <_printf_common>
 800d5dc:	3001      	adds	r0, #1
 800d5de:	f040 8090 	bne.w	800d702 <_printf_float+0x1d6>
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	b011      	add	sp, #68	; 0x44
 800d5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	4653      	mov	r3, sl
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	4651      	mov	r1, sl
 800d5f4:	f7f3 fa22 	bl	8000a3c <__aeabi_dcmpun>
 800d5f8:	b148      	cbz	r0, 800d60e <_printf_float+0xe2>
 800d5fa:	f1ba 0f00 	cmp.w	sl, #0
 800d5fe:	bfb8      	it	lt
 800d600:	232d      	movlt	r3, #45	; 0x2d
 800d602:	4880      	ldr	r0, [pc, #512]	; (800d804 <_printf_float+0x2d8>)
 800d604:	bfb8      	it	lt
 800d606:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d60a:	4b7f      	ldr	r3, [pc, #508]	; (800d808 <_printf_float+0x2dc>)
 800d60c:	e7d3      	b.n	800d5b6 <_printf_float+0x8a>
 800d60e:	6863      	ldr	r3, [r4, #4]
 800d610:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	d142      	bne.n	800d69e <_printf_float+0x172>
 800d618:	2306      	movs	r3, #6
 800d61a:	6063      	str	r3, [r4, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	9206      	str	r2, [sp, #24]
 800d620:	aa0e      	add	r2, sp, #56	; 0x38
 800d622:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d626:	aa0d      	add	r2, sp, #52	; 0x34
 800d628:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d62c:	9203      	str	r2, [sp, #12]
 800d62e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d632:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	6863      	ldr	r3, [r4, #4]
 800d63a:	4642      	mov	r2, r8
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	4628      	mov	r0, r5
 800d640:	4653      	mov	r3, sl
 800d642:	910b      	str	r1, [sp, #44]	; 0x2c
 800d644:	f7ff fed4 	bl	800d3f0 <__cvt>
 800d648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d64a:	4680      	mov	r8, r0
 800d64c:	2947      	cmp	r1, #71	; 0x47
 800d64e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d650:	d108      	bne.n	800d664 <_printf_float+0x138>
 800d652:	1cc8      	adds	r0, r1, #3
 800d654:	db02      	blt.n	800d65c <_printf_float+0x130>
 800d656:	6863      	ldr	r3, [r4, #4]
 800d658:	4299      	cmp	r1, r3
 800d65a:	dd40      	ble.n	800d6de <_printf_float+0x1b2>
 800d65c:	f1a9 0902 	sub.w	r9, r9, #2
 800d660:	fa5f f989 	uxtb.w	r9, r9
 800d664:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d668:	d81f      	bhi.n	800d6aa <_printf_float+0x17e>
 800d66a:	464a      	mov	r2, r9
 800d66c:	3901      	subs	r1, #1
 800d66e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d672:	910d      	str	r1, [sp, #52]	; 0x34
 800d674:	f7ff ff1b 	bl	800d4ae <__exponent>
 800d678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d67a:	4682      	mov	sl, r0
 800d67c:	1813      	adds	r3, r2, r0
 800d67e:	2a01      	cmp	r2, #1
 800d680:	6123      	str	r3, [r4, #16]
 800d682:	dc02      	bgt.n	800d68a <_printf_float+0x15e>
 800d684:	6822      	ldr	r2, [r4, #0]
 800d686:	07d2      	lsls	r2, r2, #31
 800d688:	d501      	bpl.n	800d68e <_printf_float+0x162>
 800d68a:	3301      	adds	r3, #1
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d692:	2b00      	cmp	r3, #0
 800d694:	d09b      	beq.n	800d5ce <_printf_float+0xa2>
 800d696:	232d      	movs	r3, #45	; 0x2d
 800d698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d69c:	e797      	b.n	800d5ce <_printf_float+0xa2>
 800d69e:	2947      	cmp	r1, #71	; 0x47
 800d6a0:	d1bc      	bne.n	800d61c <_printf_float+0xf0>
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1ba      	bne.n	800d61c <_printf_float+0xf0>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e7b7      	b.n	800d61a <_printf_float+0xee>
 800d6aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d6ae:	d118      	bne.n	800d6e2 <_printf_float+0x1b6>
 800d6b0:	2900      	cmp	r1, #0
 800d6b2:	6863      	ldr	r3, [r4, #4]
 800d6b4:	dd0b      	ble.n	800d6ce <_printf_float+0x1a2>
 800d6b6:	6121      	str	r1, [r4, #16]
 800d6b8:	b913      	cbnz	r3, 800d6c0 <_printf_float+0x194>
 800d6ba:	6822      	ldr	r2, [r4, #0]
 800d6bc:	07d0      	lsls	r0, r2, #31
 800d6be:	d502      	bpl.n	800d6c6 <_printf_float+0x19a>
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	440b      	add	r3, r1
 800d6c4:	6123      	str	r3, [r4, #16]
 800d6c6:	f04f 0a00 	mov.w	sl, #0
 800d6ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800d6cc:	e7df      	b.n	800d68e <_printf_float+0x162>
 800d6ce:	b913      	cbnz	r3, 800d6d6 <_printf_float+0x1aa>
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	07d2      	lsls	r2, r2, #31
 800d6d4:	d501      	bpl.n	800d6da <_printf_float+0x1ae>
 800d6d6:	3302      	adds	r3, #2
 800d6d8:	e7f4      	b.n	800d6c4 <_printf_float+0x198>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e7f2      	b.n	800d6c4 <_printf_float+0x198>
 800d6de:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6e4:	4299      	cmp	r1, r3
 800d6e6:	db05      	blt.n	800d6f4 <_printf_float+0x1c8>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	6121      	str	r1, [r4, #16]
 800d6ec:	07d8      	lsls	r0, r3, #31
 800d6ee:	d5ea      	bpl.n	800d6c6 <_printf_float+0x19a>
 800d6f0:	1c4b      	adds	r3, r1, #1
 800d6f2:	e7e7      	b.n	800d6c4 <_printf_float+0x198>
 800d6f4:	2900      	cmp	r1, #0
 800d6f6:	bfcc      	ite	gt
 800d6f8:	2201      	movgt	r2, #1
 800d6fa:	f1c1 0202 	rsble	r2, r1, #2
 800d6fe:	4413      	add	r3, r2
 800d700:	e7e0      	b.n	800d6c4 <_printf_float+0x198>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	055a      	lsls	r2, r3, #21
 800d706:	d407      	bmi.n	800d718 <_printf_float+0x1ec>
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	4642      	mov	r2, r8
 800d70c:	4631      	mov	r1, r6
 800d70e:	4628      	mov	r0, r5
 800d710:	47b8      	blx	r7
 800d712:	3001      	adds	r0, #1
 800d714:	d12b      	bne.n	800d76e <_printf_float+0x242>
 800d716:	e764      	b.n	800d5e2 <_printf_float+0xb6>
 800d718:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d71c:	f240 80dd 	bls.w	800d8da <_printf_float+0x3ae>
 800d720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d724:	2200      	movs	r2, #0
 800d726:	2300      	movs	r3, #0
 800d728:	f7f3 f956 	bl	80009d8 <__aeabi_dcmpeq>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d033      	beq.n	800d798 <_printf_float+0x26c>
 800d730:	2301      	movs	r3, #1
 800d732:	4631      	mov	r1, r6
 800d734:	4628      	mov	r0, r5
 800d736:	4a35      	ldr	r2, [pc, #212]	; (800d80c <_printf_float+0x2e0>)
 800d738:	47b8      	blx	r7
 800d73a:	3001      	adds	r0, #1
 800d73c:	f43f af51 	beq.w	800d5e2 <_printf_float+0xb6>
 800d740:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d744:	429a      	cmp	r2, r3
 800d746:	db02      	blt.n	800d74e <_printf_float+0x222>
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	07d8      	lsls	r0, r3, #31
 800d74c:	d50f      	bpl.n	800d76e <_printf_float+0x242>
 800d74e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d752:	4631      	mov	r1, r6
 800d754:	4628      	mov	r0, r5
 800d756:	47b8      	blx	r7
 800d758:	3001      	adds	r0, #1
 800d75a:	f43f af42 	beq.w	800d5e2 <_printf_float+0xb6>
 800d75e:	f04f 0800 	mov.w	r8, #0
 800d762:	f104 091a 	add.w	r9, r4, #26
 800d766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d768:	3b01      	subs	r3, #1
 800d76a:	4543      	cmp	r3, r8
 800d76c:	dc09      	bgt.n	800d782 <_printf_float+0x256>
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	079b      	lsls	r3, r3, #30
 800d772:	f100 8102 	bmi.w	800d97a <_printf_float+0x44e>
 800d776:	68e0      	ldr	r0, [r4, #12]
 800d778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d77a:	4298      	cmp	r0, r3
 800d77c:	bfb8      	it	lt
 800d77e:	4618      	movlt	r0, r3
 800d780:	e731      	b.n	800d5e6 <_printf_float+0xba>
 800d782:	2301      	movs	r3, #1
 800d784:	464a      	mov	r2, r9
 800d786:	4631      	mov	r1, r6
 800d788:	4628      	mov	r0, r5
 800d78a:	47b8      	blx	r7
 800d78c:	3001      	adds	r0, #1
 800d78e:	f43f af28 	beq.w	800d5e2 <_printf_float+0xb6>
 800d792:	f108 0801 	add.w	r8, r8, #1
 800d796:	e7e6      	b.n	800d766 <_printf_float+0x23a>
 800d798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dc38      	bgt.n	800d810 <_printf_float+0x2e4>
 800d79e:	2301      	movs	r3, #1
 800d7a0:	4631      	mov	r1, r6
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	4a19      	ldr	r2, [pc, #100]	; (800d80c <_printf_float+0x2e0>)
 800d7a6:	47b8      	blx	r7
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	f43f af1a 	beq.w	800d5e2 <_printf_float+0xb6>
 800d7ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	d102      	bne.n	800d7bc <_printf_float+0x290>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	07d9      	lsls	r1, r3, #31
 800d7ba:	d5d8      	bpl.n	800d76e <_printf_float+0x242>
 800d7bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	47b8      	blx	r7
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	f43f af0b 	beq.w	800d5e2 <_printf_float+0xb6>
 800d7cc:	f04f 0900 	mov.w	r9, #0
 800d7d0:	f104 0a1a 	add.w	sl, r4, #26
 800d7d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7d6:	425b      	negs	r3, r3
 800d7d8:	454b      	cmp	r3, r9
 800d7da:	dc01      	bgt.n	800d7e0 <_printf_float+0x2b4>
 800d7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7de:	e794      	b.n	800d70a <_printf_float+0x1de>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	4652      	mov	r2, sl
 800d7e4:	4631      	mov	r1, r6
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	47b8      	blx	r7
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	f43f aef9 	beq.w	800d5e2 <_printf_float+0xb6>
 800d7f0:	f109 0901 	add.w	r9, r9, #1
 800d7f4:	e7ee      	b.n	800d7d4 <_printf_float+0x2a8>
 800d7f6:	bf00      	nop
 800d7f8:	7fefffff 	.word	0x7fefffff
 800d7fc:	08011b04 	.word	0x08011b04
 800d800:	08011b08 	.word	0x08011b08
 800d804:	08011b10 	.word	0x08011b10
 800d808:	08011b0c 	.word	0x08011b0c
 800d80c:	08011b14 	.word	0x08011b14
 800d810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d812:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d814:	429a      	cmp	r2, r3
 800d816:	bfa8      	it	ge
 800d818:	461a      	movge	r2, r3
 800d81a:	2a00      	cmp	r2, #0
 800d81c:	4691      	mov	r9, r2
 800d81e:	dc37      	bgt.n	800d890 <_printf_float+0x364>
 800d820:	f04f 0b00 	mov.w	fp, #0
 800d824:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d828:	f104 021a 	add.w	r2, r4, #26
 800d82c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d830:	ebaa 0309 	sub.w	r3, sl, r9
 800d834:	455b      	cmp	r3, fp
 800d836:	dc33      	bgt.n	800d8a0 <_printf_float+0x374>
 800d838:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d83c:	429a      	cmp	r2, r3
 800d83e:	db3b      	blt.n	800d8b8 <_printf_float+0x38c>
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	07da      	lsls	r2, r3, #31
 800d844:	d438      	bmi.n	800d8b8 <_printf_float+0x38c>
 800d846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d848:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d84a:	eba3 020a 	sub.w	r2, r3, sl
 800d84e:	eba3 0901 	sub.w	r9, r3, r1
 800d852:	4591      	cmp	r9, r2
 800d854:	bfa8      	it	ge
 800d856:	4691      	movge	r9, r2
 800d858:	f1b9 0f00 	cmp.w	r9, #0
 800d85c:	dc34      	bgt.n	800d8c8 <_printf_float+0x39c>
 800d85e:	f04f 0800 	mov.w	r8, #0
 800d862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d866:	f104 0a1a 	add.w	sl, r4, #26
 800d86a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d86e:	1a9b      	subs	r3, r3, r2
 800d870:	eba3 0309 	sub.w	r3, r3, r9
 800d874:	4543      	cmp	r3, r8
 800d876:	f77f af7a 	ble.w	800d76e <_printf_float+0x242>
 800d87a:	2301      	movs	r3, #1
 800d87c:	4652      	mov	r2, sl
 800d87e:	4631      	mov	r1, r6
 800d880:	4628      	mov	r0, r5
 800d882:	47b8      	blx	r7
 800d884:	3001      	adds	r0, #1
 800d886:	f43f aeac 	beq.w	800d5e2 <_printf_float+0xb6>
 800d88a:	f108 0801 	add.w	r8, r8, #1
 800d88e:	e7ec      	b.n	800d86a <_printf_float+0x33e>
 800d890:	4613      	mov	r3, r2
 800d892:	4631      	mov	r1, r6
 800d894:	4642      	mov	r2, r8
 800d896:	4628      	mov	r0, r5
 800d898:	47b8      	blx	r7
 800d89a:	3001      	adds	r0, #1
 800d89c:	d1c0      	bne.n	800d820 <_printf_float+0x2f4>
 800d89e:	e6a0      	b.n	800d5e2 <_printf_float+0xb6>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	920b      	str	r2, [sp, #44]	; 0x2c
 800d8a8:	47b8      	blx	r7
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	f43f ae99 	beq.w	800d5e2 <_printf_float+0xb6>
 800d8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8b2:	f10b 0b01 	add.w	fp, fp, #1
 800d8b6:	e7b9      	b.n	800d82c <_printf_float+0x300>
 800d8b8:	4631      	mov	r1, r6
 800d8ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8be:	4628      	mov	r0, r5
 800d8c0:	47b8      	blx	r7
 800d8c2:	3001      	adds	r0, #1
 800d8c4:	d1bf      	bne.n	800d846 <_printf_float+0x31a>
 800d8c6:	e68c      	b.n	800d5e2 <_printf_float+0xb6>
 800d8c8:	464b      	mov	r3, r9
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	eb08 020a 	add.w	r2, r8, sl
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1c2      	bne.n	800d85e <_printf_float+0x332>
 800d8d8:	e683      	b.n	800d5e2 <_printf_float+0xb6>
 800d8da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8dc:	2a01      	cmp	r2, #1
 800d8de:	dc01      	bgt.n	800d8e4 <_printf_float+0x3b8>
 800d8e0:	07db      	lsls	r3, r3, #31
 800d8e2:	d537      	bpl.n	800d954 <_printf_float+0x428>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	4642      	mov	r2, r8
 800d8e8:	4631      	mov	r1, r6
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	47b8      	blx	r7
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	f43f ae77 	beq.w	800d5e2 <_printf_float+0xb6>
 800d8f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8f8:	4631      	mov	r1, r6
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	47b8      	blx	r7
 800d8fe:	3001      	adds	r0, #1
 800d900:	f43f ae6f 	beq.w	800d5e2 <_printf_float+0xb6>
 800d904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d908:	2200      	movs	r2, #0
 800d90a:	2300      	movs	r3, #0
 800d90c:	f7f3 f864 	bl	80009d8 <__aeabi_dcmpeq>
 800d910:	b9d8      	cbnz	r0, 800d94a <_printf_float+0x41e>
 800d912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d914:	f108 0201 	add.w	r2, r8, #1
 800d918:	3b01      	subs	r3, #1
 800d91a:	4631      	mov	r1, r6
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b8      	blx	r7
 800d920:	3001      	adds	r0, #1
 800d922:	d10e      	bne.n	800d942 <_printf_float+0x416>
 800d924:	e65d      	b.n	800d5e2 <_printf_float+0xb6>
 800d926:	2301      	movs	r3, #1
 800d928:	464a      	mov	r2, r9
 800d92a:	4631      	mov	r1, r6
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b8      	blx	r7
 800d930:	3001      	adds	r0, #1
 800d932:	f43f ae56 	beq.w	800d5e2 <_printf_float+0xb6>
 800d936:	f108 0801 	add.w	r8, r8, #1
 800d93a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d93c:	3b01      	subs	r3, #1
 800d93e:	4543      	cmp	r3, r8
 800d940:	dcf1      	bgt.n	800d926 <_printf_float+0x3fa>
 800d942:	4653      	mov	r3, sl
 800d944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d948:	e6e0      	b.n	800d70c <_printf_float+0x1e0>
 800d94a:	f04f 0800 	mov.w	r8, #0
 800d94e:	f104 091a 	add.w	r9, r4, #26
 800d952:	e7f2      	b.n	800d93a <_printf_float+0x40e>
 800d954:	2301      	movs	r3, #1
 800d956:	4642      	mov	r2, r8
 800d958:	e7df      	b.n	800d91a <_printf_float+0x3ee>
 800d95a:	2301      	movs	r3, #1
 800d95c:	464a      	mov	r2, r9
 800d95e:	4631      	mov	r1, r6
 800d960:	4628      	mov	r0, r5
 800d962:	47b8      	blx	r7
 800d964:	3001      	adds	r0, #1
 800d966:	f43f ae3c 	beq.w	800d5e2 <_printf_float+0xb6>
 800d96a:	f108 0801 	add.w	r8, r8, #1
 800d96e:	68e3      	ldr	r3, [r4, #12]
 800d970:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d972:	1a5b      	subs	r3, r3, r1
 800d974:	4543      	cmp	r3, r8
 800d976:	dcf0      	bgt.n	800d95a <_printf_float+0x42e>
 800d978:	e6fd      	b.n	800d776 <_printf_float+0x24a>
 800d97a:	f04f 0800 	mov.w	r8, #0
 800d97e:	f104 0919 	add.w	r9, r4, #25
 800d982:	e7f4      	b.n	800d96e <_printf_float+0x442>

0800d984 <_printf_common>:
 800d984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d988:	4616      	mov	r6, r2
 800d98a:	4699      	mov	r9, r3
 800d98c:	688a      	ldr	r2, [r1, #8]
 800d98e:	690b      	ldr	r3, [r1, #16]
 800d990:	4607      	mov	r7, r0
 800d992:	4293      	cmp	r3, r2
 800d994:	bfb8      	it	lt
 800d996:	4613      	movlt	r3, r2
 800d998:	6033      	str	r3, [r6, #0]
 800d99a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d99e:	460c      	mov	r4, r1
 800d9a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9a4:	b10a      	cbz	r2, 800d9aa <_printf_common+0x26>
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	6033      	str	r3, [r6, #0]
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	0699      	lsls	r1, r3, #26
 800d9ae:	bf42      	ittt	mi
 800d9b0:	6833      	ldrmi	r3, [r6, #0]
 800d9b2:	3302      	addmi	r3, #2
 800d9b4:	6033      	strmi	r3, [r6, #0]
 800d9b6:	6825      	ldr	r5, [r4, #0]
 800d9b8:	f015 0506 	ands.w	r5, r5, #6
 800d9bc:	d106      	bne.n	800d9cc <_printf_common+0x48>
 800d9be:	f104 0a19 	add.w	sl, r4, #25
 800d9c2:	68e3      	ldr	r3, [r4, #12]
 800d9c4:	6832      	ldr	r2, [r6, #0]
 800d9c6:	1a9b      	subs	r3, r3, r2
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	dc28      	bgt.n	800da1e <_printf_common+0x9a>
 800d9cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9d0:	1e13      	subs	r3, r2, #0
 800d9d2:	6822      	ldr	r2, [r4, #0]
 800d9d4:	bf18      	it	ne
 800d9d6:	2301      	movne	r3, #1
 800d9d8:	0692      	lsls	r2, r2, #26
 800d9da:	d42d      	bmi.n	800da38 <_printf_common+0xb4>
 800d9dc:	4649      	mov	r1, r9
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9e4:	47c0      	blx	r8
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	d020      	beq.n	800da2c <_printf_common+0xa8>
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	68e5      	ldr	r5, [r4, #12]
 800d9ee:	f003 0306 	and.w	r3, r3, #6
 800d9f2:	2b04      	cmp	r3, #4
 800d9f4:	bf18      	it	ne
 800d9f6:	2500      	movne	r5, #0
 800d9f8:	6832      	ldr	r2, [r6, #0]
 800d9fa:	f04f 0600 	mov.w	r6, #0
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	bf08      	it	eq
 800da02:	1aad      	subeq	r5, r5, r2
 800da04:	6922      	ldr	r2, [r4, #16]
 800da06:	bf08      	it	eq
 800da08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da0c:	4293      	cmp	r3, r2
 800da0e:	bfc4      	itt	gt
 800da10:	1a9b      	subgt	r3, r3, r2
 800da12:	18ed      	addgt	r5, r5, r3
 800da14:	341a      	adds	r4, #26
 800da16:	42b5      	cmp	r5, r6
 800da18:	d11a      	bne.n	800da50 <_printf_common+0xcc>
 800da1a:	2000      	movs	r0, #0
 800da1c:	e008      	b.n	800da30 <_printf_common+0xac>
 800da1e:	2301      	movs	r3, #1
 800da20:	4652      	mov	r2, sl
 800da22:	4649      	mov	r1, r9
 800da24:	4638      	mov	r0, r7
 800da26:	47c0      	blx	r8
 800da28:	3001      	adds	r0, #1
 800da2a:	d103      	bne.n	800da34 <_printf_common+0xb0>
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da34:	3501      	adds	r5, #1
 800da36:	e7c4      	b.n	800d9c2 <_printf_common+0x3e>
 800da38:	2030      	movs	r0, #48	; 0x30
 800da3a:	18e1      	adds	r1, r4, r3
 800da3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da40:	1c5a      	adds	r2, r3, #1
 800da42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da46:	4422      	add	r2, r4
 800da48:	3302      	adds	r3, #2
 800da4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da4e:	e7c5      	b.n	800d9dc <_printf_common+0x58>
 800da50:	2301      	movs	r3, #1
 800da52:	4622      	mov	r2, r4
 800da54:	4649      	mov	r1, r9
 800da56:	4638      	mov	r0, r7
 800da58:	47c0      	blx	r8
 800da5a:	3001      	adds	r0, #1
 800da5c:	d0e6      	beq.n	800da2c <_printf_common+0xa8>
 800da5e:	3601      	adds	r6, #1
 800da60:	e7d9      	b.n	800da16 <_printf_common+0x92>
	...

0800da64 <_printf_i>:
 800da64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da68:	7e0f      	ldrb	r7, [r1, #24]
 800da6a:	4691      	mov	r9, r2
 800da6c:	2f78      	cmp	r7, #120	; 0x78
 800da6e:	4680      	mov	r8, r0
 800da70:	460c      	mov	r4, r1
 800da72:	469a      	mov	sl, r3
 800da74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da7a:	d807      	bhi.n	800da8c <_printf_i+0x28>
 800da7c:	2f62      	cmp	r7, #98	; 0x62
 800da7e:	d80a      	bhi.n	800da96 <_printf_i+0x32>
 800da80:	2f00      	cmp	r7, #0
 800da82:	f000 80d9 	beq.w	800dc38 <_printf_i+0x1d4>
 800da86:	2f58      	cmp	r7, #88	; 0x58
 800da88:	f000 80a4 	beq.w	800dbd4 <_printf_i+0x170>
 800da8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da94:	e03a      	b.n	800db0c <_printf_i+0xa8>
 800da96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da9a:	2b15      	cmp	r3, #21
 800da9c:	d8f6      	bhi.n	800da8c <_printf_i+0x28>
 800da9e:	a101      	add	r1, pc, #4	; (adr r1, 800daa4 <_printf_i+0x40>)
 800daa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daa4:	0800dafd 	.word	0x0800dafd
 800daa8:	0800db11 	.word	0x0800db11
 800daac:	0800da8d 	.word	0x0800da8d
 800dab0:	0800da8d 	.word	0x0800da8d
 800dab4:	0800da8d 	.word	0x0800da8d
 800dab8:	0800da8d 	.word	0x0800da8d
 800dabc:	0800db11 	.word	0x0800db11
 800dac0:	0800da8d 	.word	0x0800da8d
 800dac4:	0800da8d 	.word	0x0800da8d
 800dac8:	0800da8d 	.word	0x0800da8d
 800dacc:	0800da8d 	.word	0x0800da8d
 800dad0:	0800dc1f 	.word	0x0800dc1f
 800dad4:	0800db41 	.word	0x0800db41
 800dad8:	0800dc01 	.word	0x0800dc01
 800dadc:	0800da8d 	.word	0x0800da8d
 800dae0:	0800da8d 	.word	0x0800da8d
 800dae4:	0800dc41 	.word	0x0800dc41
 800dae8:	0800da8d 	.word	0x0800da8d
 800daec:	0800db41 	.word	0x0800db41
 800daf0:	0800da8d 	.word	0x0800da8d
 800daf4:	0800da8d 	.word	0x0800da8d
 800daf8:	0800dc09 	.word	0x0800dc09
 800dafc:	682b      	ldr	r3, [r5, #0]
 800dafe:	1d1a      	adds	r2, r3, #4
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	602a      	str	r2, [r5, #0]
 800db04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db0c:	2301      	movs	r3, #1
 800db0e:	e0a4      	b.n	800dc5a <_printf_i+0x1f6>
 800db10:	6820      	ldr	r0, [r4, #0]
 800db12:	6829      	ldr	r1, [r5, #0]
 800db14:	0606      	lsls	r6, r0, #24
 800db16:	f101 0304 	add.w	r3, r1, #4
 800db1a:	d50a      	bpl.n	800db32 <_printf_i+0xce>
 800db1c:	680e      	ldr	r6, [r1, #0]
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	2e00      	cmp	r6, #0
 800db22:	da03      	bge.n	800db2c <_printf_i+0xc8>
 800db24:	232d      	movs	r3, #45	; 0x2d
 800db26:	4276      	negs	r6, r6
 800db28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db2c:	230a      	movs	r3, #10
 800db2e:	485e      	ldr	r0, [pc, #376]	; (800dca8 <_printf_i+0x244>)
 800db30:	e019      	b.n	800db66 <_printf_i+0x102>
 800db32:	680e      	ldr	r6, [r1, #0]
 800db34:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db38:	602b      	str	r3, [r5, #0]
 800db3a:	bf18      	it	ne
 800db3c:	b236      	sxthne	r6, r6
 800db3e:	e7ef      	b.n	800db20 <_printf_i+0xbc>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1d19      	adds	r1, r3, #4
 800db46:	6029      	str	r1, [r5, #0]
 800db48:	0601      	lsls	r1, r0, #24
 800db4a:	d501      	bpl.n	800db50 <_printf_i+0xec>
 800db4c:	681e      	ldr	r6, [r3, #0]
 800db4e:	e002      	b.n	800db56 <_printf_i+0xf2>
 800db50:	0646      	lsls	r6, r0, #25
 800db52:	d5fb      	bpl.n	800db4c <_printf_i+0xe8>
 800db54:	881e      	ldrh	r6, [r3, #0]
 800db56:	2f6f      	cmp	r7, #111	; 0x6f
 800db58:	bf0c      	ite	eq
 800db5a:	2308      	moveq	r3, #8
 800db5c:	230a      	movne	r3, #10
 800db5e:	4852      	ldr	r0, [pc, #328]	; (800dca8 <_printf_i+0x244>)
 800db60:	2100      	movs	r1, #0
 800db62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db66:	6865      	ldr	r5, [r4, #4]
 800db68:	2d00      	cmp	r5, #0
 800db6a:	bfa8      	it	ge
 800db6c:	6821      	ldrge	r1, [r4, #0]
 800db6e:	60a5      	str	r5, [r4, #8]
 800db70:	bfa4      	itt	ge
 800db72:	f021 0104 	bicge.w	r1, r1, #4
 800db76:	6021      	strge	r1, [r4, #0]
 800db78:	b90e      	cbnz	r6, 800db7e <_printf_i+0x11a>
 800db7a:	2d00      	cmp	r5, #0
 800db7c:	d04d      	beq.n	800dc1a <_printf_i+0x1b6>
 800db7e:	4615      	mov	r5, r2
 800db80:	fbb6 f1f3 	udiv	r1, r6, r3
 800db84:	fb03 6711 	mls	r7, r3, r1, r6
 800db88:	5dc7      	ldrb	r7, [r0, r7]
 800db8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db8e:	4637      	mov	r7, r6
 800db90:	42bb      	cmp	r3, r7
 800db92:	460e      	mov	r6, r1
 800db94:	d9f4      	bls.n	800db80 <_printf_i+0x11c>
 800db96:	2b08      	cmp	r3, #8
 800db98:	d10b      	bne.n	800dbb2 <_printf_i+0x14e>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	07de      	lsls	r6, r3, #31
 800db9e:	d508      	bpl.n	800dbb2 <_printf_i+0x14e>
 800dba0:	6923      	ldr	r3, [r4, #16]
 800dba2:	6861      	ldr	r1, [r4, #4]
 800dba4:	4299      	cmp	r1, r3
 800dba6:	bfde      	ittt	le
 800dba8:	2330      	movle	r3, #48	; 0x30
 800dbaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbb2:	1b52      	subs	r2, r2, r5
 800dbb4:	6122      	str	r2, [r4, #16]
 800dbb6:	464b      	mov	r3, r9
 800dbb8:	4621      	mov	r1, r4
 800dbba:	4640      	mov	r0, r8
 800dbbc:	f8cd a000 	str.w	sl, [sp]
 800dbc0:	aa03      	add	r2, sp, #12
 800dbc2:	f7ff fedf 	bl	800d984 <_printf_common>
 800dbc6:	3001      	adds	r0, #1
 800dbc8:	d14c      	bne.n	800dc64 <_printf_i+0x200>
 800dbca:	f04f 30ff 	mov.w	r0, #4294967295
 800dbce:	b004      	add	sp, #16
 800dbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd4:	4834      	ldr	r0, [pc, #208]	; (800dca8 <_printf_i+0x244>)
 800dbd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dbda:	6829      	ldr	r1, [r5, #0]
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbe2:	6029      	str	r1, [r5, #0]
 800dbe4:	061d      	lsls	r5, r3, #24
 800dbe6:	d514      	bpl.n	800dc12 <_printf_i+0x1ae>
 800dbe8:	07df      	lsls	r7, r3, #31
 800dbea:	bf44      	itt	mi
 800dbec:	f043 0320 	orrmi.w	r3, r3, #32
 800dbf0:	6023      	strmi	r3, [r4, #0]
 800dbf2:	b91e      	cbnz	r6, 800dbfc <_printf_i+0x198>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	f023 0320 	bic.w	r3, r3, #32
 800dbfa:	6023      	str	r3, [r4, #0]
 800dbfc:	2310      	movs	r3, #16
 800dbfe:	e7af      	b.n	800db60 <_printf_i+0xfc>
 800dc00:	6823      	ldr	r3, [r4, #0]
 800dc02:	f043 0320 	orr.w	r3, r3, #32
 800dc06:	6023      	str	r3, [r4, #0]
 800dc08:	2378      	movs	r3, #120	; 0x78
 800dc0a:	4828      	ldr	r0, [pc, #160]	; (800dcac <_printf_i+0x248>)
 800dc0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc10:	e7e3      	b.n	800dbda <_printf_i+0x176>
 800dc12:	0659      	lsls	r1, r3, #25
 800dc14:	bf48      	it	mi
 800dc16:	b2b6      	uxthmi	r6, r6
 800dc18:	e7e6      	b.n	800dbe8 <_printf_i+0x184>
 800dc1a:	4615      	mov	r5, r2
 800dc1c:	e7bb      	b.n	800db96 <_printf_i+0x132>
 800dc1e:	682b      	ldr	r3, [r5, #0]
 800dc20:	6826      	ldr	r6, [r4, #0]
 800dc22:	1d18      	adds	r0, r3, #4
 800dc24:	6961      	ldr	r1, [r4, #20]
 800dc26:	6028      	str	r0, [r5, #0]
 800dc28:	0635      	lsls	r5, r6, #24
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	d501      	bpl.n	800dc32 <_printf_i+0x1ce>
 800dc2e:	6019      	str	r1, [r3, #0]
 800dc30:	e002      	b.n	800dc38 <_printf_i+0x1d4>
 800dc32:	0670      	lsls	r0, r6, #25
 800dc34:	d5fb      	bpl.n	800dc2e <_printf_i+0x1ca>
 800dc36:	8019      	strh	r1, [r3, #0]
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4615      	mov	r5, r2
 800dc3c:	6123      	str	r3, [r4, #16]
 800dc3e:	e7ba      	b.n	800dbb6 <_printf_i+0x152>
 800dc40:	682b      	ldr	r3, [r5, #0]
 800dc42:	2100      	movs	r1, #0
 800dc44:	1d1a      	adds	r2, r3, #4
 800dc46:	602a      	str	r2, [r5, #0]
 800dc48:	681d      	ldr	r5, [r3, #0]
 800dc4a:	6862      	ldr	r2, [r4, #4]
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f002 f88d 	bl	800fd6c <memchr>
 800dc52:	b108      	cbz	r0, 800dc58 <_printf_i+0x1f4>
 800dc54:	1b40      	subs	r0, r0, r5
 800dc56:	6060      	str	r0, [r4, #4]
 800dc58:	6863      	ldr	r3, [r4, #4]
 800dc5a:	6123      	str	r3, [r4, #16]
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc62:	e7a8      	b.n	800dbb6 <_printf_i+0x152>
 800dc64:	462a      	mov	r2, r5
 800dc66:	4649      	mov	r1, r9
 800dc68:	4640      	mov	r0, r8
 800dc6a:	6923      	ldr	r3, [r4, #16]
 800dc6c:	47d0      	blx	sl
 800dc6e:	3001      	adds	r0, #1
 800dc70:	d0ab      	beq.n	800dbca <_printf_i+0x166>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	079b      	lsls	r3, r3, #30
 800dc76:	d413      	bmi.n	800dca0 <_printf_i+0x23c>
 800dc78:	68e0      	ldr	r0, [r4, #12]
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	4298      	cmp	r0, r3
 800dc7e:	bfb8      	it	lt
 800dc80:	4618      	movlt	r0, r3
 800dc82:	e7a4      	b.n	800dbce <_printf_i+0x16a>
 800dc84:	2301      	movs	r3, #1
 800dc86:	4632      	mov	r2, r6
 800dc88:	4649      	mov	r1, r9
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	47d0      	blx	sl
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d09b      	beq.n	800dbca <_printf_i+0x166>
 800dc92:	3501      	adds	r5, #1
 800dc94:	68e3      	ldr	r3, [r4, #12]
 800dc96:	9903      	ldr	r1, [sp, #12]
 800dc98:	1a5b      	subs	r3, r3, r1
 800dc9a:	42ab      	cmp	r3, r5
 800dc9c:	dcf2      	bgt.n	800dc84 <_printf_i+0x220>
 800dc9e:	e7eb      	b.n	800dc78 <_printf_i+0x214>
 800dca0:	2500      	movs	r5, #0
 800dca2:	f104 0619 	add.w	r6, r4, #25
 800dca6:	e7f5      	b.n	800dc94 <_printf_i+0x230>
 800dca8:	08011b16 	.word	0x08011b16
 800dcac:	08011b27 	.word	0x08011b27

0800dcb0 <sniprintf>:
 800dcb0:	b40c      	push	{r2, r3}
 800dcb2:	b530      	push	{r4, r5, lr}
 800dcb4:	4b17      	ldr	r3, [pc, #92]	; (800dd14 <sniprintf+0x64>)
 800dcb6:	1e0c      	subs	r4, r1, #0
 800dcb8:	681d      	ldr	r5, [r3, #0]
 800dcba:	b09d      	sub	sp, #116	; 0x74
 800dcbc:	da08      	bge.n	800dcd0 <sniprintf+0x20>
 800dcbe:	238b      	movs	r3, #139	; 0x8b
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	b01d      	add	sp, #116	; 0x74
 800dcc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dccc:	b002      	add	sp, #8
 800dcce:	4770      	bx	lr
 800dcd0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dcd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dcd8:	bf0c      	ite	eq
 800dcda:	4623      	moveq	r3, r4
 800dcdc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	9307      	str	r3, [sp, #28]
 800dce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dce8:	9002      	str	r0, [sp, #8]
 800dcea:	9006      	str	r0, [sp, #24]
 800dcec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	ab21      	add	r3, sp, #132	; 0x84
 800dcf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dcf6:	a902      	add	r1, sp, #8
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	f002 fe57 	bl	80109ac <_svfiprintf_r>
 800dcfe:	1c43      	adds	r3, r0, #1
 800dd00:	bfbc      	itt	lt
 800dd02:	238b      	movlt	r3, #139	; 0x8b
 800dd04:	602b      	strlt	r3, [r5, #0]
 800dd06:	2c00      	cmp	r4, #0
 800dd08:	d0dd      	beq.n	800dcc6 <sniprintf+0x16>
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	9b02      	ldr	r3, [sp, #8]
 800dd0e:	701a      	strb	r2, [r3, #0]
 800dd10:	e7d9      	b.n	800dcc6 <sniprintf+0x16>
 800dd12:	bf00      	nop
 800dd14:	200001a0 	.word	0x200001a0

0800dd18 <strncmp>:
 800dd18:	4603      	mov	r3, r0
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	b172      	cbz	r2, 800dd3c <strncmp+0x24>
 800dd1e:	3901      	subs	r1, #1
 800dd20:	1884      	adds	r4, r0, r2
 800dd22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd2a:	4290      	cmp	r0, r2
 800dd2c:	d101      	bne.n	800dd32 <strncmp+0x1a>
 800dd2e:	42a3      	cmp	r3, r4
 800dd30:	d101      	bne.n	800dd36 <strncmp+0x1e>
 800dd32:	1a80      	subs	r0, r0, r2
 800dd34:	bd10      	pop	{r4, pc}
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d1f3      	bne.n	800dd22 <strncmp+0xa>
 800dd3a:	e7fa      	b.n	800dd32 <strncmp+0x1a>
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	e7f9      	b.n	800dd34 <strncmp+0x1c>

0800dd40 <sulp>:
 800dd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd44:	460f      	mov	r7, r1
 800dd46:	4690      	mov	r8, r2
 800dd48:	f002 fb9c 	bl	8010484 <__ulp>
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	460d      	mov	r5, r1
 800dd50:	f1b8 0f00 	cmp.w	r8, #0
 800dd54:	d011      	beq.n	800dd7a <sulp+0x3a>
 800dd56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dd5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	dd0b      	ble.n	800dd7a <sulp+0x3a>
 800dd62:	2400      	movs	r4, #0
 800dd64:	051b      	lsls	r3, r3, #20
 800dd66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dd6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dd6e:	4622      	mov	r2, r4
 800dd70:	462b      	mov	r3, r5
 800dd72:	f7f2 fbc9 	bl	8000508 <__aeabi_dmul>
 800dd76:	4604      	mov	r4, r0
 800dd78:	460d      	mov	r5, r1
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd82:	0000      	movs	r0, r0
 800dd84:	0000      	movs	r0, r0
	...

0800dd88 <_strtod_l>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	469b      	mov	fp, r3
 800dd8e:	2300      	movs	r3, #0
 800dd90:	b09f      	sub	sp, #124	; 0x7c
 800dd92:	931a      	str	r3, [sp, #104]	; 0x68
 800dd94:	4b9e      	ldr	r3, [pc, #632]	; (800e010 <_strtod_l+0x288>)
 800dd96:	4682      	mov	sl, r0
 800dd98:	681f      	ldr	r7, [r3, #0]
 800dd9a:	460e      	mov	r6, r1
 800dd9c:	4638      	mov	r0, r7
 800dd9e:	9215      	str	r2, [sp, #84]	; 0x54
 800dda0:	f7f2 f9ee 	bl	8000180 <strlen>
 800dda4:	f04f 0800 	mov.w	r8, #0
 800dda8:	4604      	mov	r4, r0
 800ddaa:	f04f 0900 	mov.w	r9, #0
 800ddae:	9619      	str	r6, [sp, #100]	; 0x64
 800ddb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddb2:	781a      	ldrb	r2, [r3, #0]
 800ddb4:	2a2b      	cmp	r2, #43	; 0x2b
 800ddb6:	d04c      	beq.n	800de52 <_strtod_l+0xca>
 800ddb8:	d83a      	bhi.n	800de30 <_strtod_l+0xa8>
 800ddba:	2a0d      	cmp	r2, #13
 800ddbc:	d833      	bhi.n	800de26 <_strtod_l+0x9e>
 800ddbe:	2a08      	cmp	r2, #8
 800ddc0:	d833      	bhi.n	800de2a <_strtod_l+0xa2>
 800ddc2:	2a00      	cmp	r2, #0
 800ddc4:	d03d      	beq.n	800de42 <_strtod_l+0xba>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ddcc:	782b      	ldrb	r3, [r5, #0]
 800ddce:	2b30      	cmp	r3, #48	; 0x30
 800ddd0:	f040 80aa 	bne.w	800df28 <_strtod_l+0x1a0>
 800ddd4:	786b      	ldrb	r3, [r5, #1]
 800ddd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ddda:	2b58      	cmp	r3, #88	; 0x58
 800dddc:	d166      	bne.n	800deac <_strtod_l+0x124>
 800ddde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde0:	4650      	mov	r0, sl
 800dde2:	9301      	str	r3, [sp, #4]
 800dde4:	ab1a      	add	r3, sp, #104	; 0x68
 800dde6:	9300      	str	r3, [sp, #0]
 800dde8:	4a8a      	ldr	r2, [pc, #552]	; (800e014 <_strtod_l+0x28c>)
 800ddea:	f8cd b008 	str.w	fp, [sp, #8]
 800ddee:	ab1b      	add	r3, sp, #108	; 0x6c
 800ddf0:	a919      	add	r1, sp, #100	; 0x64
 800ddf2:	f001 fc9f 	bl	800f734 <__gethex>
 800ddf6:	f010 0607 	ands.w	r6, r0, #7
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	d005      	beq.n	800de0a <_strtod_l+0x82>
 800ddfe:	2e06      	cmp	r6, #6
 800de00:	d129      	bne.n	800de56 <_strtod_l+0xce>
 800de02:	2300      	movs	r3, #0
 800de04:	3501      	adds	r5, #1
 800de06:	9519      	str	r5, [sp, #100]	; 0x64
 800de08:	930a      	str	r3, [sp, #40]	; 0x28
 800de0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f040 858a 	bne.w	800e926 <_strtod_l+0xb9e>
 800de12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de14:	b1d3      	cbz	r3, 800de4c <_strtod_l+0xc4>
 800de16:	4642      	mov	r2, r8
 800de18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de1c:	4610      	mov	r0, r2
 800de1e:	4619      	mov	r1, r3
 800de20:	b01f      	add	sp, #124	; 0x7c
 800de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	2a20      	cmp	r2, #32
 800de28:	d1cd      	bne.n	800ddc6 <_strtod_l+0x3e>
 800de2a:	3301      	adds	r3, #1
 800de2c:	9319      	str	r3, [sp, #100]	; 0x64
 800de2e:	e7bf      	b.n	800ddb0 <_strtod_l+0x28>
 800de30:	2a2d      	cmp	r2, #45	; 0x2d
 800de32:	d1c8      	bne.n	800ddc6 <_strtod_l+0x3e>
 800de34:	2201      	movs	r2, #1
 800de36:	920a      	str	r2, [sp, #40]	; 0x28
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	9219      	str	r2, [sp, #100]	; 0x64
 800de3c:	785b      	ldrb	r3, [r3, #1]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1c3      	bne.n	800ddca <_strtod_l+0x42>
 800de42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de44:	9619      	str	r6, [sp, #100]	; 0x64
 800de46:	2b00      	cmp	r3, #0
 800de48:	f040 856b 	bne.w	800e922 <_strtod_l+0xb9a>
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	e7e4      	b.n	800de1c <_strtod_l+0x94>
 800de52:	2200      	movs	r2, #0
 800de54:	e7ef      	b.n	800de36 <_strtod_l+0xae>
 800de56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de58:	b13a      	cbz	r2, 800de6a <_strtod_l+0xe2>
 800de5a:	2135      	movs	r1, #53	; 0x35
 800de5c:	a81c      	add	r0, sp, #112	; 0x70
 800de5e:	f002 fc15 	bl	801068c <__copybits>
 800de62:	4650      	mov	r0, sl
 800de64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800de66:	f001 ffdd 	bl	800fe24 <_Bfree>
 800de6a:	3e01      	subs	r6, #1
 800de6c:	2e04      	cmp	r6, #4
 800de6e:	d806      	bhi.n	800de7e <_strtod_l+0xf6>
 800de70:	e8df f006 	tbb	[pc, r6]
 800de74:	1714030a 	.word	0x1714030a
 800de78:	0a          	.byte	0x0a
 800de79:	00          	.byte	0x00
 800de7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800de7e:	0721      	lsls	r1, r4, #28
 800de80:	d5c3      	bpl.n	800de0a <_strtod_l+0x82>
 800de82:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800de86:	e7c0      	b.n	800de0a <_strtod_l+0x82>
 800de88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de8a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800de8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800de92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800de96:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800de9a:	e7f0      	b.n	800de7e <_strtod_l+0xf6>
 800de9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e018 <_strtod_l+0x290>
 800dea0:	e7ed      	b.n	800de7e <_strtod_l+0xf6>
 800dea2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dea6:	f04f 38ff 	mov.w	r8, #4294967295
 800deaa:	e7e8      	b.n	800de7e <_strtod_l+0xf6>
 800deac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	9219      	str	r2, [sp, #100]	; 0x64
 800deb2:	785b      	ldrb	r3, [r3, #1]
 800deb4:	2b30      	cmp	r3, #48	; 0x30
 800deb6:	d0f9      	beq.n	800deac <_strtod_l+0x124>
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d0a6      	beq.n	800de0a <_strtod_l+0x82>
 800debc:	2301      	movs	r3, #1
 800debe:	9307      	str	r3, [sp, #28]
 800dec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dec2:	220a      	movs	r2, #10
 800dec4:	9308      	str	r3, [sp, #32]
 800dec6:	2300      	movs	r3, #0
 800dec8:	469b      	mov	fp, r3
 800deca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800dece:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ded0:	7805      	ldrb	r5, [r0, #0]
 800ded2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ded6:	b2d9      	uxtb	r1, r3
 800ded8:	2909      	cmp	r1, #9
 800deda:	d927      	bls.n	800df2c <_strtod_l+0x1a4>
 800dedc:	4622      	mov	r2, r4
 800dede:	4639      	mov	r1, r7
 800dee0:	f7ff ff1a 	bl	800dd18 <strncmp>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d033      	beq.n	800df50 <_strtod_l+0x1c8>
 800dee8:	2000      	movs	r0, #0
 800deea:	462a      	mov	r2, r5
 800deec:	465c      	mov	r4, fp
 800deee:	4603      	mov	r3, r0
 800def0:	9004      	str	r0, [sp, #16]
 800def2:	2a65      	cmp	r2, #101	; 0x65
 800def4:	d001      	beq.n	800defa <_strtod_l+0x172>
 800def6:	2a45      	cmp	r2, #69	; 0x45
 800def8:	d114      	bne.n	800df24 <_strtod_l+0x19c>
 800defa:	b91c      	cbnz	r4, 800df04 <_strtod_l+0x17c>
 800defc:	9a07      	ldr	r2, [sp, #28]
 800defe:	4302      	orrs	r2, r0
 800df00:	d09f      	beq.n	800de42 <_strtod_l+0xba>
 800df02:	2400      	movs	r4, #0
 800df04:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800df06:	1c72      	adds	r2, r6, #1
 800df08:	9219      	str	r2, [sp, #100]	; 0x64
 800df0a:	7872      	ldrb	r2, [r6, #1]
 800df0c:	2a2b      	cmp	r2, #43	; 0x2b
 800df0e:	d079      	beq.n	800e004 <_strtod_l+0x27c>
 800df10:	2a2d      	cmp	r2, #45	; 0x2d
 800df12:	f000 8083 	beq.w	800e01c <_strtod_l+0x294>
 800df16:	2700      	movs	r7, #0
 800df18:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800df1c:	2909      	cmp	r1, #9
 800df1e:	f240 8083 	bls.w	800e028 <_strtod_l+0x2a0>
 800df22:	9619      	str	r6, [sp, #100]	; 0x64
 800df24:	2500      	movs	r5, #0
 800df26:	e09f      	b.n	800e068 <_strtod_l+0x2e0>
 800df28:	2300      	movs	r3, #0
 800df2a:	e7c8      	b.n	800debe <_strtod_l+0x136>
 800df2c:	f1bb 0f08 	cmp.w	fp, #8
 800df30:	bfd5      	itete	le
 800df32:	9906      	ldrle	r1, [sp, #24]
 800df34:	9905      	ldrgt	r1, [sp, #20]
 800df36:	fb02 3301 	mlale	r3, r2, r1, r3
 800df3a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800df3e:	f100 0001 	add.w	r0, r0, #1
 800df42:	bfd4      	ite	le
 800df44:	9306      	strle	r3, [sp, #24]
 800df46:	9305      	strgt	r3, [sp, #20]
 800df48:	f10b 0b01 	add.w	fp, fp, #1
 800df4c:	9019      	str	r0, [sp, #100]	; 0x64
 800df4e:	e7be      	b.n	800dece <_strtod_l+0x146>
 800df50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df52:	191a      	adds	r2, r3, r4
 800df54:	9219      	str	r2, [sp, #100]	; 0x64
 800df56:	5d1a      	ldrb	r2, [r3, r4]
 800df58:	f1bb 0f00 	cmp.w	fp, #0
 800df5c:	d036      	beq.n	800dfcc <_strtod_l+0x244>
 800df5e:	465c      	mov	r4, fp
 800df60:	9004      	str	r0, [sp, #16]
 800df62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800df66:	2b09      	cmp	r3, #9
 800df68:	d912      	bls.n	800df90 <_strtod_l+0x208>
 800df6a:	2301      	movs	r3, #1
 800df6c:	e7c1      	b.n	800def2 <_strtod_l+0x16a>
 800df6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df70:	3001      	adds	r0, #1
 800df72:	1c5a      	adds	r2, r3, #1
 800df74:	9219      	str	r2, [sp, #100]	; 0x64
 800df76:	785a      	ldrb	r2, [r3, #1]
 800df78:	2a30      	cmp	r2, #48	; 0x30
 800df7a:	d0f8      	beq.n	800df6e <_strtod_l+0x1e6>
 800df7c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800df80:	2b08      	cmp	r3, #8
 800df82:	f200 84d5 	bhi.w	800e930 <_strtod_l+0xba8>
 800df86:	9004      	str	r0, [sp, #16]
 800df88:	2000      	movs	r0, #0
 800df8a:	4604      	mov	r4, r0
 800df8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df8e:	9308      	str	r3, [sp, #32]
 800df90:	3a30      	subs	r2, #48	; 0x30
 800df92:	f100 0301 	add.w	r3, r0, #1
 800df96:	d013      	beq.n	800dfc0 <_strtod_l+0x238>
 800df98:	9904      	ldr	r1, [sp, #16]
 800df9a:	1905      	adds	r5, r0, r4
 800df9c:	4419      	add	r1, r3
 800df9e:	9104      	str	r1, [sp, #16]
 800dfa0:	4623      	mov	r3, r4
 800dfa2:	210a      	movs	r1, #10
 800dfa4:	42ab      	cmp	r3, r5
 800dfa6:	d113      	bne.n	800dfd0 <_strtod_l+0x248>
 800dfa8:	1823      	adds	r3, r4, r0
 800dfaa:	2b08      	cmp	r3, #8
 800dfac:	f104 0401 	add.w	r4, r4, #1
 800dfb0:	4404      	add	r4, r0
 800dfb2:	dc1b      	bgt.n	800dfec <_strtod_l+0x264>
 800dfb4:	230a      	movs	r3, #10
 800dfb6:	9906      	ldr	r1, [sp, #24]
 800dfb8:	fb03 2301 	mla	r3, r3, r1, r2
 800dfbc:	9306      	str	r3, [sp, #24]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	1c51      	adds	r1, r2, #1
 800dfc6:	9119      	str	r1, [sp, #100]	; 0x64
 800dfc8:	7852      	ldrb	r2, [r2, #1]
 800dfca:	e7ca      	b.n	800df62 <_strtod_l+0x1da>
 800dfcc:	4658      	mov	r0, fp
 800dfce:	e7d3      	b.n	800df78 <_strtod_l+0x1f0>
 800dfd0:	2b08      	cmp	r3, #8
 800dfd2:	dc04      	bgt.n	800dfde <_strtod_l+0x256>
 800dfd4:	9f06      	ldr	r7, [sp, #24]
 800dfd6:	434f      	muls	r7, r1
 800dfd8:	9706      	str	r7, [sp, #24]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	e7e2      	b.n	800dfa4 <_strtod_l+0x21c>
 800dfde:	1c5f      	adds	r7, r3, #1
 800dfe0:	2f10      	cmp	r7, #16
 800dfe2:	bfde      	ittt	le
 800dfe4:	9f05      	ldrle	r7, [sp, #20]
 800dfe6:	434f      	mulle	r7, r1
 800dfe8:	9705      	strle	r7, [sp, #20]
 800dfea:	e7f6      	b.n	800dfda <_strtod_l+0x252>
 800dfec:	2c10      	cmp	r4, #16
 800dfee:	bfdf      	itttt	le
 800dff0:	230a      	movle	r3, #10
 800dff2:	9905      	ldrle	r1, [sp, #20]
 800dff4:	fb03 2301 	mlale	r3, r3, r1, r2
 800dff8:	9305      	strle	r3, [sp, #20]
 800dffa:	e7e0      	b.n	800dfbe <_strtod_l+0x236>
 800dffc:	2300      	movs	r3, #0
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	2301      	movs	r3, #1
 800e002:	e77b      	b.n	800defc <_strtod_l+0x174>
 800e004:	2700      	movs	r7, #0
 800e006:	1cb2      	adds	r2, r6, #2
 800e008:	9219      	str	r2, [sp, #100]	; 0x64
 800e00a:	78b2      	ldrb	r2, [r6, #2]
 800e00c:	e784      	b.n	800df18 <_strtod_l+0x190>
 800e00e:	bf00      	nop
 800e010:	08011c80 	.word	0x08011c80
 800e014:	08011b38 	.word	0x08011b38
 800e018:	7ff00000 	.word	0x7ff00000
 800e01c:	2701      	movs	r7, #1
 800e01e:	e7f2      	b.n	800e006 <_strtod_l+0x27e>
 800e020:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e022:	1c51      	adds	r1, r2, #1
 800e024:	9119      	str	r1, [sp, #100]	; 0x64
 800e026:	7852      	ldrb	r2, [r2, #1]
 800e028:	2a30      	cmp	r2, #48	; 0x30
 800e02a:	d0f9      	beq.n	800e020 <_strtod_l+0x298>
 800e02c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e030:	2908      	cmp	r1, #8
 800e032:	f63f af77 	bhi.w	800df24 <_strtod_l+0x19c>
 800e036:	f04f 0e0a 	mov.w	lr, #10
 800e03a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e03e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e040:	9209      	str	r2, [sp, #36]	; 0x24
 800e042:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e044:	1c51      	adds	r1, r2, #1
 800e046:	9119      	str	r1, [sp, #100]	; 0x64
 800e048:	7852      	ldrb	r2, [r2, #1]
 800e04a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e04e:	2d09      	cmp	r5, #9
 800e050:	d935      	bls.n	800e0be <_strtod_l+0x336>
 800e052:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e054:	1b49      	subs	r1, r1, r5
 800e056:	2908      	cmp	r1, #8
 800e058:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e05c:	dc02      	bgt.n	800e064 <_strtod_l+0x2dc>
 800e05e:	4565      	cmp	r5, ip
 800e060:	bfa8      	it	ge
 800e062:	4665      	movge	r5, ip
 800e064:	b107      	cbz	r7, 800e068 <_strtod_l+0x2e0>
 800e066:	426d      	negs	r5, r5
 800e068:	2c00      	cmp	r4, #0
 800e06a:	d14c      	bne.n	800e106 <_strtod_l+0x37e>
 800e06c:	9907      	ldr	r1, [sp, #28]
 800e06e:	4301      	orrs	r1, r0
 800e070:	f47f aecb 	bne.w	800de0a <_strtod_l+0x82>
 800e074:	2b00      	cmp	r3, #0
 800e076:	f47f aee4 	bne.w	800de42 <_strtod_l+0xba>
 800e07a:	2a69      	cmp	r2, #105	; 0x69
 800e07c:	d026      	beq.n	800e0cc <_strtod_l+0x344>
 800e07e:	dc23      	bgt.n	800e0c8 <_strtod_l+0x340>
 800e080:	2a49      	cmp	r2, #73	; 0x49
 800e082:	d023      	beq.n	800e0cc <_strtod_l+0x344>
 800e084:	2a4e      	cmp	r2, #78	; 0x4e
 800e086:	f47f aedc 	bne.w	800de42 <_strtod_l+0xba>
 800e08a:	499d      	ldr	r1, [pc, #628]	; (800e300 <_strtod_l+0x578>)
 800e08c:	a819      	add	r0, sp, #100	; 0x64
 800e08e:	f001 fd9f 	bl	800fbd0 <__match>
 800e092:	2800      	cmp	r0, #0
 800e094:	f43f aed5 	beq.w	800de42 <_strtod_l+0xba>
 800e098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b28      	cmp	r3, #40	; 0x28
 800e09e:	d12c      	bne.n	800e0fa <_strtod_l+0x372>
 800e0a0:	4998      	ldr	r1, [pc, #608]	; (800e304 <_strtod_l+0x57c>)
 800e0a2:	aa1c      	add	r2, sp, #112	; 0x70
 800e0a4:	a819      	add	r0, sp, #100	; 0x64
 800e0a6:	f001 fda7 	bl	800fbf8 <__hexnan>
 800e0aa:	2805      	cmp	r0, #5
 800e0ac:	d125      	bne.n	800e0fa <_strtod_l+0x372>
 800e0ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e0b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e0b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e0bc:	e6a5      	b.n	800de0a <_strtod_l+0x82>
 800e0be:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e0c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e0c6:	e7bc      	b.n	800e042 <_strtod_l+0x2ba>
 800e0c8:	2a6e      	cmp	r2, #110	; 0x6e
 800e0ca:	e7dc      	b.n	800e086 <_strtod_l+0x2fe>
 800e0cc:	498e      	ldr	r1, [pc, #568]	; (800e308 <_strtod_l+0x580>)
 800e0ce:	a819      	add	r0, sp, #100	; 0x64
 800e0d0:	f001 fd7e 	bl	800fbd0 <__match>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	f43f aeb4 	beq.w	800de42 <_strtod_l+0xba>
 800e0da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0dc:	498b      	ldr	r1, [pc, #556]	; (800e30c <_strtod_l+0x584>)
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	a819      	add	r0, sp, #100	; 0x64
 800e0e2:	9319      	str	r3, [sp, #100]	; 0x64
 800e0e4:	f001 fd74 	bl	800fbd0 <__match>
 800e0e8:	b910      	cbnz	r0, 800e0f0 <_strtod_l+0x368>
 800e0ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	9319      	str	r3, [sp, #100]	; 0x64
 800e0f0:	f04f 0800 	mov.w	r8, #0
 800e0f4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e310 <_strtod_l+0x588>
 800e0f8:	e687      	b.n	800de0a <_strtod_l+0x82>
 800e0fa:	4886      	ldr	r0, [pc, #536]	; (800e314 <_strtod_l+0x58c>)
 800e0fc:	f002 fd56 	bl	8010bac <nan>
 800e100:	4680      	mov	r8, r0
 800e102:	4689      	mov	r9, r1
 800e104:	e681      	b.n	800de0a <_strtod_l+0x82>
 800e106:	9b04      	ldr	r3, [sp, #16]
 800e108:	f1bb 0f00 	cmp.w	fp, #0
 800e10c:	bf08      	it	eq
 800e10e:	46a3      	moveq	fp, r4
 800e110:	1aeb      	subs	r3, r5, r3
 800e112:	2c10      	cmp	r4, #16
 800e114:	9806      	ldr	r0, [sp, #24]
 800e116:	4626      	mov	r6, r4
 800e118:	9307      	str	r3, [sp, #28]
 800e11a:	bfa8      	it	ge
 800e11c:	2610      	movge	r6, #16
 800e11e:	f7f2 f979 	bl	8000414 <__aeabi_ui2d>
 800e122:	2c09      	cmp	r4, #9
 800e124:	4680      	mov	r8, r0
 800e126:	4689      	mov	r9, r1
 800e128:	dd13      	ble.n	800e152 <_strtod_l+0x3ca>
 800e12a:	4b7b      	ldr	r3, [pc, #492]	; (800e318 <_strtod_l+0x590>)
 800e12c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e130:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e134:	f7f2 f9e8 	bl	8000508 <__aeabi_dmul>
 800e138:	4680      	mov	r8, r0
 800e13a:	9805      	ldr	r0, [sp, #20]
 800e13c:	4689      	mov	r9, r1
 800e13e:	f7f2 f969 	bl	8000414 <__aeabi_ui2d>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4640      	mov	r0, r8
 800e148:	4649      	mov	r1, r9
 800e14a:	f7f2 f827 	bl	800019c <__adddf3>
 800e14e:	4680      	mov	r8, r0
 800e150:	4689      	mov	r9, r1
 800e152:	2c0f      	cmp	r4, #15
 800e154:	dc36      	bgt.n	800e1c4 <_strtod_l+0x43c>
 800e156:	9b07      	ldr	r3, [sp, #28]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f43f ae56 	beq.w	800de0a <_strtod_l+0x82>
 800e15e:	dd22      	ble.n	800e1a6 <_strtod_l+0x41e>
 800e160:	2b16      	cmp	r3, #22
 800e162:	dc09      	bgt.n	800e178 <_strtod_l+0x3f0>
 800e164:	496c      	ldr	r1, [pc, #432]	; (800e318 <_strtod_l+0x590>)
 800e166:	4642      	mov	r2, r8
 800e168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e16c:	464b      	mov	r3, r9
 800e16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e172:	f7f2 f9c9 	bl	8000508 <__aeabi_dmul>
 800e176:	e7c3      	b.n	800e100 <_strtod_l+0x378>
 800e178:	9a07      	ldr	r2, [sp, #28]
 800e17a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e17e:	4293      	cmp	r3, r2
 800e180:	db20      	blt.n	800e1c4 <_strtod_l+0x43c>
 800e182:	4d65      	ldr	r5, [pc, #404]	; (800e318 <_strtod_l+0x590>)
 800e184:	f1c4 040f 	rsb	r4, r4, #15
 800e188:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e18c:	4642      	mov	r2, r8
 800e18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e192:	464b      	mov	r3, r9
 800e194:	f7f2 f9b8 	bl	8000508 <__aeabi_dmul>
 800e198:	9b07      	ldr	r3, [sp, #28]
 800e19a:	1b1c      	subs	r4, r3, r4
 800e19c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e1a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1a4:	e7e5      	b.n	800e172 <_strtod_l+0x3ea>
 800e1a6:	9b07      	ldr	r3, [sp, #28]
 800e1a8:	3316      	adds	r3, #22
 800e1aa:	db0b      	blt.n	800e1c4 <_strtod_l+0x43c>
 800e1ac:	9b04      	ldr	r3, [sp, #16]
 800e1ae:	4640      	mov	r0, r8
 800e1b0:	1b5d      	subs	r5, r3, r5
 800e1b2:	4b59      	ldr	r3, [pc, #356]	; (800e318 <_strtod_l+0x590>)
 800e1b4:	4649      	mov	r1, r9
 800e1b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e1ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1be:	f7f2 facd 	bl	800075c <__aeabi_ddiv>
 800e1c2:	e79d      	b.n	800e100 <_strtod_l+0x378>
 800e1c4:	9b07      	ldr	r3, [sp, #28]
 800e1c6:	1ba6      	subs	r6, r4, r6
 800e1c8:	441e      	add	r6, r3
 800e1ca:	2e00      	cmp	r6, #0
 800e1cc:	dd74      	ble.n	800e2b8 <_strtod_l+0x530>
 800e1ce:	f016 030f 	ands.w	r3, r6, #15
 800e1d2:	d00a      	beq.n	800e1ea <_strtod_l+0x462>
 800e1d4:	4950      	ldr	r1, [pc, #320]	; (800e318 <_strtod_l+0x590>)
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1e0:	464b      	mov	r3, r9
 800e1e2:	f7f2 f991 	bl	8000508 <__aeabi_dmul>
 800e1e6:	4680      	mov	r8, r0
 800e1e8:	4689      	mov	r9, r1
 800e1ea:	f036 060f 	bics.w	r6, r6, #15
 800e1ee:	d052      	beq.n	800e296 <_strtod_l+0x50e>
 800e1f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e1f4:	dd27      	ble.n	800e246 <_strtod_l+0x4be>
 800e1f6:	f04f 0b00 	mov.w	fp, #0
 800e1fa:	f8cd b010 	str.w	fp, [sp, #16]
 800e1fe:	f8cd b020 	str.w	fp, [sp, #32]
 800e202:	f8cd b018 	str.w	fp, [sp, #24]
 800e206:	2322      	movs	r3, #34	; 0x22
 800e208:	f04f 0800 	mov.w	r8, #0
 800e20c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e310 <_strtod_l+0x588>
 800e210:	f8ca 3000 	str.w	r3, [sl]
 800e214:	9b08      	ldr	r3, [sp, #32]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f43f adf7 	beq.w	800de0a <_strtod_l+0x82>
 800e21c:	4650      	mov	r0, sl
 800e21e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e220:	f001 fe00 	bl	800fe24 <_Bfree>
 800e224:	4650      	mov	r0, sl
 800e226:	9906      	ldr	r1, [sp, #24]
 800e228:	f001 fdfc 	bl	800fe24 <_Bfree>
 800e22c:	4650      	mov	r0, sl
 800e22e:	9904      	ldr	r1, [sp, #16]
 800e230:	f001 fdf8 	bl	800fe24 <_Bfree>
 800e234:	4650      	mov	r0, sl
 800e236:	9908      	ldr	r1, [sp, #32]
 800e238:	f001 fdf4 	bl	800fe24 <_Bfree>
 800e23c:	4659      	mov	r1, fp
 800e23e:	4650      	mov	r0, sl
 800e240:	f001 fdf0 	bl	800fe24 <_Bfree>
 800e244:	e5e1      	b.n	800de0a <_strtod_l+0x82>
 800e246:	4b35      	ldr	r3, [pc, #212]	; (800e31c <_strtod_l+0x594>)
 800e248:	4640      	mov	r0, r8
 800e24a:	9305      	str	r3, [sp, #20]
 800e24c:	2300      	movs	r3, #0
 800e24e:	4649      	mov	r1, r9
 800e250:	461f      	mov	r7, r3
 800e252:	1136      	asrs	r6, r6, #4
 800e254:	2e01      	cmp	r6, #1
 800e256:	dc21      	bgt.n	800e29c <_strtod_l+0x514>
 800e258:	b10b      	cbz	r3, 800e25e <_strtod_l+0x4d6>
 800e25a:	4680      	mov	r8, r0
 800e25c:	4689      	mov	r9, r1
 800e25e:	4b2f      	ldr	r3, [pc, #188]	; (800e31c <_strtod_l+0x594>)
 800e260:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e264:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e268:	4642      	mov	r2, r8
 800e26a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e26e:	464b      	mov	r3, r9
 800e270:	f7f2 f94a 	bl	8000508 <__aeabi_dmul>
 800e274:	4b26      	ldr	r3, [pc, #152]	; (800e310 <_strtod_l+0x588>)
 800e276:	460a      	mov	r2, r1
 800e278:	400b      	ands	r3, r1
 800e27a:	4929      	ldr	r1, [pc, #164]	; (800e320 <_strtod_l+0x598>)
 800e27c:	4680      	mov	r8, r0
 800e27e:	428b      	cmp	r3, r1
 800e280:	d8b9      	bhi.n	800e1f6 <_strtod_l+0x46e>
 800e282:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e286:	428b      	cmp	r3, r1
 800e288:	bf86      	itte	hi
 800e28a:	f04f 38ff 	movhi.w	r8, #4294967295
 800e28e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e324 <_strtod_l+0x59c>
 800e292:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e296:	2300      	movs	r3, #0
 800e298:	9305      	str	r3, [sp, #20]
 800e29a:	e07f      	b.n	800e39c <_strtod_l+0x614>
 800e29c:	07f2      	lsls	r2, r6, #31
 800e29e:	d505      	bpl.n	800e2ac <_strtod_l+0x524>
 800e2a0:	9b05      	ldr	r3, [sp, #20]
 800e2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a6:	f7f2 f92f 	bl	8000508 <__aeabi_dmul>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	9a05      	ldr	r2, [sp, #20]
 800e2ae:	3701      	adds	r7, #1
 800e2b0:	3208      	adds	r2, #8
 800e2b2:	1076      	asrs	r6, r6, #1
 800e2b4:	9205      	str	r2, [sp, #20]
 800e2b6:	e7cd      	b.n	800e254 <_strtod_l+0x4cc>
 800e2b8:	d0ed      	beq.n	800e296 <_strtod_l+0x50e>
 800e2ba:	4276      	negs	r6, r6
 800e2bc:	f016 020f 	ands.w	r2, r6, #15
 800e2c0:	d00a      	beq.n	800e2d8 <_strtod_l+0x550>
 800e2c2:	4b15      	ldr	r3, [pc, #84]	; (800e318 <_strtod_l+0x590>)
 800e2c4:	4640      	mov	r0, r8
 800e2c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	f7f2 fa44 	bl	800075c <__aeabi_ddiv>
 800e2d4:	4680      	mov	r8, r0
 800e2d6:	4689      	mov	r9, r1
 800e2d8:	1136      	asrs	r6, r6, #4
 800e2da:	d0dc      	beq.n	800e296 <_strtod_l+0x50e>
 800e2dc:	2e1f      	cmp	r6, #31
 800e2de:	dd23      	ble.n	800e328 <_strtod_l+0x5a0>
 800e2e0:	f04f 0b00 	mov.w	fp, #0
 800e2e4:	f8cd b010 	str.w	fp, [sp, #16]
 800e2e8:	f8cd b020 	str.w	fp, [sp, #32]
 800e2ec:	f8cd b018 	str.w	fp, [sp, #24]
 800e2f0:	2322      	movs	r3, #34	; 0x22
 800e2f2:	f04f 0800 	mov.w	r8, #0
 800e2f6:	f04f 0900 	mov.w	r9, #0
 800e2fa:	f8ca 3000 	str.w	r3, [sl]
 800e2fe:	e789      	b.n	800e214 <_strtod_l+0x48c>
 800e300:	08011b11 	.word	0x08011b11
 800e304:	08011b4c 	.word	0x08011b4c
 800e308:	08011b09 	.word	0x08011b09
 800e30c:	08011b8b 	.word	0x08011b8b
 800e310:	7ff00000 	.word	0x7ff00000
 800e314:	08011e38 	.word	0x08011e38
 800e318:	08011d18 	.word	0x08011d18
 800e31c:	08011cf0 	.word	0x08011cf0
 800e320:	7ca00000 	.word	0x7ca00000
 800e324:	7fefffff 	.word	0x7fefffff
 800e328:	f016 0310 	ands.w	r3, r6, #16
 800e32c:	bf18      	it	ne
 800e32e:	236a      	movne	r3, #106	; 0x6a
 800e330:	4640      	mov	r0, r8
 800e332:	9305      	str	r3, [sp, #20]
 800e334:	4649      	mov	r1, r9
 800e336:	2300      	movs	r3, #0
 800e338:	4fb0      	ldr	r7, [pc, #704]	; (800e5fc <_strtod_l+0x874>)
 800e33a:	07f2      	lsls	r2, r6, #31
 800e33c:	d504      	bpl.n	800e348 <_strtod_l+0x5c0>
 800e33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e342:	f7f2 f8e1 	bl	8000508 <__aeabi_dmul>
 800e346:	2301      	movs	r3, #1
 800e348:	1076      	asrs	r6, r6, #1
 800e34a:	f107 0708 	add.w	r7, r7, #8
 800e34e:	d1f4      	bne.n	800e33a <_strtod_l+0x5b2>
 800e350:	b10b      	cbz	r3, 800e356 <_strtod_l+0x5ce>
 800e352:	4680      	mov	r8, r0
 800e354:	4689      	mov	r9, r1
 800e356:	9b05      	ldr	r3, [sp, #20]
 800e358:	b1c3      	cbz	r3, 800e38c <_strtod_l+0x604>
 800e35a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e35e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e362:	2b00      	cmp	r3, #0
 800e364:	4649      	mov	r1, r9
 800e366:	dd11      	ble.n	800e38c <_strtod_l+0x604>
 800e368:	2b1f      	cmp	r3, #31
 800e36a:	f340 8127 	ble.w	800e5bc <_strtod_l+0x834>
 800e36e:	2b34      	cmp	r3, #52	; 0x34
 800e370:	bfd8      	it	le
 800e372:	f04f 33ff 	movle.w	r3, #4294967295
 800e376:	f04f 0800 	mov.w	r8, #0
 800e37a:	bfcf      	iteee	gt
 800e37c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e380:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e384:	fa03 f202 	lslle.w	r2, r3, r2
 800e388:	ea02 0901 	andle.w	r9, r2, r1
 800e38c:	2200      	movs	r2, #0
 800e38e:	2300      	movs	r3, #0
 800e390:	4640      	mov	r0, r8
 800e392:	4649      	mov	r1, r9
 800e394:	f7f2 fb20 	bl	80009d8 <__aeabi_dcmpeq>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d1a1      	bne.n	800e2e0 <_strtod_l+0x558>
 800e39c:	9b06      	ldr	r3, [sp, #24]
 800e39e:	465a      	mov	r2, fp
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	4650      	mov	r0, sl
 800e3a4:	4623      	mov	r3, r4
 800e3a6:	9908      	ldr	r1, [sp, #32]
 800e3a8:	f001 fda4 	bl	800fef4 <__s2b>
 800e3ac:	9008      	str	r0, [sp, #32]
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	f43f af21 	beq.w	800e1f6 <_strtod_l+0x46e>
 800e3b4:	9b04      	ldr	r3, [sp, #16]
 800e3b6:	f04f 0b00 	mov.w	fp, #0
 800e3ba:	1b5d      	subs	r5, r3, r5
 800e3bc:	9b07      	ldr	r3, [sp, #28]
 800e3be:	f8cd b010 	str.w	fp, [sp, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	bfb4      	ite	lt
 800e3c6:	462b      	movlt	r3, r5
 800e3c8:	2300      	movge	r3, #0
 800e3ca:	930e      	str	r3, [sp, #56]	; 0x38
 800e3cc:	9b07      	ldr	r3, [sp, #28]
 800e3ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e3d2:	9314      	str	r3, [sp, #80]	; 0x50
 800e3d4:	9b08      	ldr	r3, [sp, #32]
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	6859      	ldr	r1, [r3, #4]
 800e3da:	f001 fce3 	bl	800fda4 <_Balloc>
 800e3de:	9006      	str	r0, [sp, #24]
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	f43f af10 	beq.w	800e206 <_strtod_l+0x47e>
 800e3e6:	9b08      	ldr	r3, [sp, #32]
 800e3e8:	300c      	adds	r0, #12
 800e3ea:	691a      	ldr	r2, [r3, #16]
 800e3ec:	f103 010c 	add.w	r1, r3, #12
 800e3f0:	3202      	adds	r2, #2
 800e3f2:	0092      	lsls	r2, r2, #2
 800e3f4:	f001 fcc8 	bl	800fd88 <memcpy>
 800e3f8:	ab1c      	add	r3, sp, #112	; 0x70
 800e3fa:	9301      	str	r3, [sp, #4]
 800e3fc:	ab1b      	add	r3, sp, #108	; 0x6c
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	4642      	mov	r2, r8
 800e402:	464b      	mov	r3, r9
 800e404:	4650      	mov	r0, sl
 800e406:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e40a:	f002 f8b5 	bl	8010578 <__d2b>
 800e40e:	901a      	str	r0, [sp, #104]	; 0x68
 800e410:	2800      	cmp	r0, #0
 800e412:	f43f aef8 	beq.w	800e206 <_strtod_l+0x47e>
 800e416:	2101      	movs	r1, #1
 800e418:	4650      	mov	r0, sl
 800e41a:	f001 fe03 	bl	8010024 <__i2b>
 800e41e:	4603      	mov	r3, r0
 800e420:	9004      	str	r0, [sp, #16]
 800e422:	2800      	cmp	r0, #0
 800e424:	f43f aeef 	beq.w	800e206 <_strtod_l+0x47e>
 800e428:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e42a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e42c:	2d00      	cmp	r5, #0
 800e42e:	bfab      	itete	ge
 800e430:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e432:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e434:	18ee      	addge	r6, r5, r3
 800e436:	1b5c      	sublt	r4, r3, r5
 800e438:	9b05      	ldr	r3, [sp, #20]
 800e43a:	bfa8      	it	ge
 800e43c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e43e:	eba5 0503 	sub.w	r5, r5, r3
 800e442:	4415      	add	r5, r2
 800e444:	4b6e      	ldr	r3, [pc, #440]	; (800e600 <_strtod_l+0x878>)
 800e446:	f105 35ff 	add.w	r5, r5, #4294967295
 800e44a:	bfb8      	it	lt
 800e44c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e44e:	429d      	cmp	r5, r3
 800e450:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e454:	f280 80c4 	bge.w	800e5e0 <_strtod_l+0x858>
 800e458:	1b5b      	subs	r3, r3, r5
 800e45a:	2b1f      	cmp	r3, #31
 800e45c:	f04f 0701 	mov.w	r7, #1
 800e460:	eba2 0203 	sub.w	r2, r2, r3
 800e464:	f300 80b1 	bgt.w	800e5ca <_strtod_l+0x842>
 800e468:	2500      	movs	r5, #0
 800e46a:	fa07 f303 	lsl.w	r3, r7, r3
 800e46e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e470:	18b7      	adds	r7, r6, r2
 800e472:	9b05      	ldr	r3, [sp, #20]
 800e474:	42be      	cmp	r6, r7
 800e476:	4414      	add	r4, r2
 800e478:	441c      	add	r4, r3
 800e47a:	4633      	mov	r3, r6
 800e47c:	bfa8      	it	ge
 800e47e:	463b      	movge	r3, r7
 800e480:	42a3      	cmp	r3, r4
 800e482:	bfa8      	it	ge
 800e484:	4623      	movge	r3, r4
 800e486:	2b00      	cmp	r3, #0
 800e488:	bfc2      	ittt	gt
 800e48a:	1aff      	subgt	r7, r7, r3
 800e48c:	1ae4      	subgt	r4, r4, r3
 800e48e:	1af6      	subgt	r6, r6, r3
 800e490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e492:	2b00      	cmp	r3, #0
 800e494:	dd17      	ble.n	800e4c6 <_strtod_l+0x73e>
 800e496:	461a      	mov	r2, r3
 800e498:	4650      	mov	r0, sl
 800e49a:	9904      	ldr	r1, [sp, #16]
 800e49c:	f001 fe80 	bl	80101a0 <__pow5mult>
 800e4a0:	9004      	str	r0, [sp, #16]
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f43f aeaf 	beq.w	800e206 <_strtod_l+0x47e>
 800e4a8:	4601      	mov	r1, r0
 800e4aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e4ac:	4650      	mov	r0, sl
 800e4ae:	f001 fdcf 	bl	8010050 <__multiply>
 800e4b2:	9009      	str	r0, [sp, #36]	; 0x24
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f43f aea6 	beq.w	800e206 <_strtod_l+0x47e>
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e4be:	f001 fcb1 	bl	800fe24 <_Bfree>
 800e4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4c4:	931a      	str	r3, [sp, #104]	; 0x68
 800e4c6:	2f00      	cmp	r7, #0
 800e4c8:	f300 808e 	bgt.w	800e5e8 <_strtod_l+0x860>
 800e4cc:	9b07      	ldr	r3, [sp, #28]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dd08      	ble.n	800e4e4 <_strtod_l+0x75c>
 800e4d2:	4650      	mov	r0, sl
 800e4d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4d6:	9906      	ldr	r1, [sp, #24]
 800e4d8:	f001 fe62 	bl	80101a0 <__pow5mult>
 800e4dc:	9006      	str	r0, [sp, #24]
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	f43f ae91 	beq.w	800e206 <_strtod_l+0x47e>
 800e4e4:	2c00      	cmp	r4, #0
 800e4e6:	dd08      	ble.n	800e4fa <_strtod_l+0x772>
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	4650      	mov	r0, sl
 800e4ec:	9906      	ldr	r1, [sp, #24]
 800e4ee:	f001 feb1 	bl	8010254 <__lshift>
 800e4f2:	9006      	str	r0, [sp, #24]
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	f43f ae86 	beq.w	800e206 <_strtod_l+0x47e>
 800e4fa:	2e00      	cmp	r6, #0
 800e4fc:	dd08      	ble.n	800e510 <_strtod_l+0x788>
 800e4fe:	4632      	mov	r2, r6
 800e500:	4650      	mov	r0, sl
 800e502:	9904      	ldr	r1, [sp, #16]
 800e504:	f001 fea6 	bl	8010254 <__lshift>
 800e508:	9004      	str	r0, [sp, #16]
 800e50a:	2800      	cmp	r0, #0
 800e50c:	f43f ae7b 	beq.w	800e206 <_strtod_l+0x47e>
 800e510:	4650      	mov	r0, sl
 800e512:	9a06      	ldr	r2, [sp, #24]
 800e514:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e516:	f001 ff29 	bl	801036c <__mdiff>
 800e51a:	4683      	mov	fp, r0
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f43f ae72 	beq.w	800e206 <_strtod_l+0x47e>
 800e522:	2400      	movs	r4, #0
 800e524:	68c3      	ldr	r3, [r0, #12]
 800e526:	9904      	ldr	r1, [sp, #16]
 800e528:	60c4      	str	r4, [r0, #12]
 800e52a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e52c:	f001 ff02 	bl	8010334 <__mcmp>
 800e530:	42a0      	cmp	r0, r4
 800e532:	da6b      	bge.n	800e60c <_strtod_l+0x884>
 800e534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e536:	ea53 0308 	orrs.w	r3, r3, r8
 800e53a:	f040 8091 	bne.w	800e660 <_strtod_l+0x8d8>
 800e53e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e542:	2b00      	cmp	r3, #0
 800e544:	f040 808c 	bne.w	800e660 <_strtod_l+0x8d8>
 800e548:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e54c:	0d1b      	lsrs	r3, r3, #20
 800e54e:	051b      	lsls	r3, r3, #20
 800e550:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e554:	f240 8084 	bls.w	800e660 <_strtod_l+0x8d8>
 800e558:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e55c:	b91b      	cbnz	r3, 800e566 <_strtod_l+0x7de>
 800e55e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e562:	2b01      	cmp	r3, #1
 800e564:	dd7c      	ble.n	800e660 <_strtod_l+0x8d8>
 800e566:	4659      	mov	r1, fp
 800e568:	2201      	movs	r2, #1
 800e56a:	4650      	mov	r0, sl
 800e56c:	f001 fe72 	bl	8010254 <__lshift>
 800e570:	9904      	ldr	r1, [sp, #16]
 800e572:	4683      	mov	fp, r0
 800e574:	f001 fede 	bl	8010334 <__mcmp>
 800e578:	2800      	cmp	r0, #0
 800e57a:	dd71      	ble.n	800e660 <_strtod_l+0x8d8>
 800e57c:	9905      	ldr	r1, [sp, #20]
 800e57e:	464b      	mov	r3, r9
 800e580:	4a20      	ldr	r2, [pc, #128]	; (800e604 <_strtod_l+0x87c>)
 800e582:	2900      	cmp	r1, #0
 800e584:	f000 808c 	beq.w	800e6a0 <_strtod_l+0x918>
 800e588:	ea02 0109 	and.w	r1, r2, r9
 800e58c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e590:	f300 8086 	bgt.w	800e6a0 <_strtod_l+0x918>
 800e594:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e598:	f77f aeaa 	ble.w	800e2f0 <_strtod_l+0x568>
 800e59c:	4640      	mov	r0, r8
 800e59e:	4649      	mov	r1, r9
 800e5a0:	4b19      	ldr	r3, [pc, #100]	; (800e608 <_strtod_l+0x880>)
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f7f1 ffb0 	bl	8000508 <__aeabi_dmul>
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	4303      	orrs	r3, r0
 800e5ac:	bf08      	it	eq
 800e5ae:	2322      	moveq	r3, #34	; 0x22
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	4689      	mov	r9, r1
 800e5b4:	bf08      	it	eq
 800e5b6:	f8ca 3000 	streq.w	r3, [sl]
 800e5ba:	e62f      	b.n	800e21c <_strtod_l+0x494>
 800e5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800e5c4:	ea03 0808 	and.w	r8, r3, r8
 800e5c8:	e6e0      	b.n	800e38c <_strtod_l+0x604>
 800e5ca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e5ce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e5d2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e5d6:	35e2      	adds	r5, #226	; 0xe2
 800e5d8:	fa07 f505 	lsl.w	r5, r7, r5
 800e5dc:	970f      	str	r7, [sp, #60]	; 0x3c
 800e5de:	e747      	b.n	800e470 <_strtod_l+0x6e8>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	2500      	movs	r5, #0
 800e5e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5e6:	e743      	b.n	800e470 <_strtod_l+0x6e8>
 800e5e8:	463a      	mov	r2, r7
 800e5ea:	4650      	mov	r0, sl
 800e5ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e5ee:	f001 fe31 	bl	8010254 <__lshift>
 800e5f2:	901a      	str	r0, [sp, #104]	; 0x68
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	f47f af69 	bne.w	800e4cc <_strtod_l+0x744>
 800e5fa:	e604      	b.n	800e206 <_strtod_l+0x47e>
 800e5fc:	08011b60 	.word	0x08011b60
 800e600:	fffffc02 	.word	0xfffffc02
 800e604:	7ff00000 	.word	0x7ff00000
 800e608:	39500000 	.word	0x39500000
 800e60c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e610:	d165      	bne.n	800e6de <_strtod_l+0x956>
 800e612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e614:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e618:	b35a      	cbz	r2, 800e672 <_strtod_l+0x8ea>
 800e61a:	4a99      	ldr	r2, [pc, #612]	; (800e880 <_strtod_l+0xaf8>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d12b      	bne.n	800e678 <_strtod_l+0x8f0>
 800e620:	9b05      	ldr	r3, [sp, #20]
 800e622:	4641      	mov	r1, r8
 800e624:	b303      	cbz	r3, 800e668 <_strtod_l+0x8e0>
 800e626:	464a      	mov	r2, r9
 800e628:	4b96      	ldr	r3, [pc, #600]	; (800e884 <_strtod_l+0xafc>)
 800e62a:	4013      	ands	r3, r2
 800e62c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e630:	f04f 32ff 	mov.w	r2, #4294967295
 800e634:	d81b      	bhi.n	800e66e <_strtod_l+0x8e6>
 800e636:	0d1b      	lsrs	r3, r3, #20
 800e638:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e63c:	fa02 f303 	lsl.w	r3, r2, r3
 800e640:	4299      	cmp	r1, r3
 800e642:	d119      	bne.n	800e678 <_strtod_l+0x8f0>
 800e644:	4b90      	ldr	r3, [pc, #576]	; (800e888 <_strtod_l+0xb00>)
 800e646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e648:	429a      	cmp	r2, r3
 800e64a:	d102      	bne.n	800e652 <_strtod_l+0x8ca>
 800e64c:	3101      	adds	r1, #1
 800e64e:	f43f adda 	beq.w	800e206 <_strtod_l+0x47e>
 800e652:	f04f 0800 	mov.w	r8, #0
 800e656:	4b8b      	ldr	r3, [pc, #556]	; (800e884 <_strtod_l+0xafc>)
 800e658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e65a:	401a      	ands	r2, r3
 800e65c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e660:	9b05      	ldr	r3, [sp, #20]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d19a      	bne.n	800e59c <_strtod_l+0x814>
 800e666:	e5d9      	b.n	800e21c <_strtod_l+0x494>
 800e668:	f04f 33ff 	mov.w	r3, #4294967295
 800e66c:	e7e8      	b.n	800e640 <_strtod_l+0x8b8>
 800e66e:	4613      	mov	r3, r2
 800e670:	e7e6      	b.n	800e640 <_strtod_l+0x8b8>
 800e672:	ea53 0308 	orrs.w	r3, r3, r8
 800e676:	d081      	beq.n	800e57c <_strtod_l+0x7f4>
 800e678:	b1e5      	cbz	r5, 800e6b4 <_strtod_l+0x92c>
 800e67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e67c:	421d      	tst	r5, r3
 800e67e:	d0ef      	beq.n	800e660 <_strtod_l+0x8d8>
 800e680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e682:	4640      	mov	r0, r8
 800e684:	4649      	mov	r1, r9
 800e686:	9a05      	ldr	r2, [sp, #20]
 800e688:	b1c3      	cbz	r3, 800e6bc <_strtod_l+0x934>
 800e68a:	f7ff fb59 	bl	800dd40 <sulp>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e696:	f7f1 fd81 	bl	800019c <__adddf3>
 800e69a:	4680      	mov	r8, r0
 800e69c:	4689      	mov	r9, r1
 800e69e:	e7df      	b.n	800e660 <_strtod_l+0x8d8>
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e6a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e6aa:	f04f 38ff 	mov.w	r8, #4294967295
 800e6ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e6b2:	e7d5      	b.n	800e660 <_strtod_l+0x8d8>
 800e6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6b6:	ea13 0f08 	tst.w	r3, r8
 800e6ba:	e7e0      	b.n	800e67e <_strtod_l+0x8f6>
 800e6bc:	f7ff fb40 	bl	800dd40 <sulp>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e6c8:	f7f1 fd66 	bl	8000198 <__aeabi_dsub>
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4680      	mov	r8, r0
 800e6d2:	4689      	mov	r9, r1
 800e6d4:	f7f2 f980 	bl	80009d8 <__aeabi_dcmpeq>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d0c1      	beq.n	800e660 <_strtod_l+0x8d8>
 800e6dc:	e608      	b.n	800e2f0 <_strtod_l+0x568>
 800e6de:	4658      	mov	r0, fp
 800e6e0:	9904      	ldr	r1, [sp, #16]
 800e6e2:	f001 ffa5 	bl	8010630 <__ratio>
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e6ec:	4606      	mov	r6, r0
 800e6ee:	460f      	mov	r7, r1
 800e6f0:	f7f2 f986 	bl	8000a00 <__aeabi_dcmple>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d070      	beq.n	800e7da <_strtod_l+0xa52>
 800e6f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d042      	beq.n	800e784 <_strtod_l+0x9fc>
 800e6fe:	2600      	movs	r6, #0
 800e700:	4f62      	ldr	r7, [pc, #392]	; (800e88c <_strtod_l+0xb04>)
 800e702:	4d62      	ldr	r5, [pc, #392]	; (800e88c <_strtod_l+0xb04>)
 800e704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e70a:	0d1b      	lsrs	r3, r3, #20
 800e70c:	051b      	lsls	r3, r3, #20
 800e70e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e712:	4b5f      	ldr	r3, [pc, #380]	; (800e890 <_strtod_l+0xb08>)
 800e714:	429a      	cmp	r2, r3
 800e716:	f040 80c3 	bne.w	800e8a0 <_strtod_l+0xb18>
 800e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71c:	4640      	mov	r0, r8
 800e71e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e722:	4649      	mov	r1, r9
 800e724:	f001 feae 	bl	8010484 <__ulp>
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4630      	mov	r0, r6
 800e72e:	4639      	mov	r1, r7
 800e730:	f7f1 feea 	bl	8000508 <__aeabi_dmul>
 800e734:	4642      	mov	r2, r8
 800e736:	464b      	mov	r3, r9
 800e738:	f7f1 fd30 	bl	800019c <__adddf3>
 800e73c:	460b      	mov	r3, r1
 800e73e:	4951      	ldr	r1, [pc, #324]	; (800e884 <_strtod_l+0xafc>)
 800e740:	4a54      	ldr	r2, [pc, #336]	; (800e894 <_strtod_l+0xb0c>)
 800e742:	4019      	ands	r1, r3
 800e744:	4291      	cmp	r1, r2
 800e746:	4680      	mov	r8, r0
 800e748:	d95d      	bls.n	800e806 <_strtod_l+0xa7e>
 800e74a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e74c:	4b4e      	ldr	r3, [pc, #312]	; (800e888 <_strtod_l+0xb00>)
 800e74e:	429a      	cmp	r2, r3
 800e750:	d103      	bne.n	800e75a <_strtod_l+0x9d2>
 800e752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e754:	3301      	adds	r3, #1
 800e756:	f43f ad56 	beq.w	800e206 <_strtod_l+0x47e>
 800e75a:	f04f 38ff 	mov.w	r8, #4294967295
 800e75e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e888 <_strtod_l+0xb00>
 800e762:	4650      	mov	r0, sl
 800e764:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e766:	f001 fb5d 	bl	800fe24 <_Bfree>
 800e76a:	4650      	mov	r0, sl
 800e76c:	9906      	ldr	r1, [sp, #24]
 800e76e:	f001 fb59 	bl	800fe24 <_Bfree>
 800e772:	4650      	mov	r0, sl
 800e774:	9904      	ldr	r1, [sp, #16]
 800e776:	f001 fb55 	bl	800fe24 <_Bfree>
 800e77a:	4659      	mov	r1, fp
 800e77c:	4650      	mov	r0, sl
 800e77e:	f001 fb51 	bl	800fe24 <_Bfree>
 800e782:	e627      	b.n	800e3d4 <_strtod_l+0x64c>
 800e784:	f1b8 0f00 	cmp.w	r8, #0
 800e788:	d119      	bne.n	800e7be <_strtod_l+0xa36>
 800e78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e790:	b9e3      	cbnz	r3, 800e7cc <_strtod_l+0xa44>
 800e792:	2200      	movs	r2, #0
 800e794:	4630      	mov	r0, r6
 800e796:	4639      	mov	r1, r7
 800e798:	4b3c      	ldr	r3, [pc, #240]	; (800e88c <_strtod_l+0xb04>)
 800e79a:	f7f2 f927 	bl	80009ec <__aeabi_dcmplt>
 800e79e:	b9c8      	cbnz	r0, 800e7d4 <_strtod_l+0xa4c>
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	4b3c      	ldr	r3, [pc, #240]	; (800e898 <_strtod_l+0xb10>)
 800e7a8:	f7f1 feae 	bl	8000508 <__aeabi_dmul>
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	460d      	mov	r5, r1
 800e7b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e7b4:	9416      	str	r4, [sp, #88]	; 0x58
 800e7b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800e7b8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e7bc:	e7a2      	b.n	800e704 <_strtod_l+0x97c>
 800e7be:	f1b8 0f01 	cmp.w	r8, #1
 800e7c2:	d103      	bne.n	800e7cc <_strtod_l+0xa44>
 800e7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f43f ad92 	beq.w	800e2f0 <_strtod_l+0x568>
 800e7cc:	2600      	movs	r6, #0
 800e7ce:	2400      	movs	r4, #0
 800e7d0:	4f32      	ldr	r7, [pc, #200]	; (800e89c <_strtod_l+0xb14>)
 800e7d2:	e796      	b.n	800e702 <_strtod_l+0x97a>
 800e7d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e7d6:	4d30      	ldr	r5, [pc, #192]	; (800e898 <_strtod_l+0xb10>)
 800e7d8:	e7ea      	b.n	800e7b0 <_strtod_l+0xa28>
 800e7da:	4b2f      	ldr	r3, [pc, #188]	; (800e898 <_strtod_l+0xb10>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	4630      	mov	r0, r6
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7f1 fe91 	bl	8000508 <__aeabi_dmul>
 800e7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	460d      	mov	r5, r1
 800e7ec:	b933      	cbnz	r3, 800e7fc <_strtod_l+0xa74>
 800e7ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7f2:	9010      	str	r0, [sp, #64]	; 0x40
 800e7f4:	9311      	str	r3, [sp, #68]	; 0x44
 800e7f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e7fa:	e783      	b.n	800e704 <_strtod_l+0x97c>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e804:	e7f7      	b.n	800e7f6 <_strtod_l+0xa6e>
 800e806:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d1a8      	bne.n	800e762 <_strtod_l+0x9da>
 800e810:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e816:	0d1b      	lsrs	r3, r3, #20
 800e818:	051b      	lsls	r3, r3, #20
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d1a1      	bne.n	800e762 <_strtod_l+0x9da>
 800e81e:	4620      	mov	r0, r4
 800e820:	4629      	mov	r1, r5
 800e822:	f7f2 fceb 	bl	80011fc <__aeabi_d2lz>
 800e826:	f7f1 fe41 	bl	80004ac <__aeabi_l2d>
 800e82a:	4602      	mov	r2, r0
 800e82c:	460b      	mov	r3, r1
 800e82e:	4620      	mov	r0, r4
 800e830:	4629      	mov	r1, r5
 800e832:	f7f1 fcb1 	bl	8000198 <__aeabi_dsub>
 800e836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e83c:	ea43 0308 	orr.w	r3, r3, r8
 800e840:	4313      	orrs	r3, r2
 800e842:	4604      	mov	r4, r0
 800e844:	460d      	mov	r5, r1
 800e846:	d066      	beq.n	800e916 <_strtod_l+0xb8e>
 800e848:	a309      	add	r3, pc, #36	; (adr r3, 800e870 <_strtod_l+0xae8>)
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	f7f2 f8cd 	bl	80009ec <__aeabi_dcmplt>
 800e852:	2800      	cmp	r0, #0
 800e854:	f47f ace2 	bne.w	800e21c <_strtod_l+0x494>
 800e858:	a307      	add	r3, pc, #28	; (adr r3, 800e878 <_strtod_l+0xaf0>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	4620      	mov	r0, r4
 800e860:	4629      	mov	r1, r5
 800e862:	f7f2 f8e1 	bl	8000a28 <__aeabi_dcmpgt>
 800e866:	2800      	cmp	r0, #0
 800e868:	f43f af7b 	beq.w	800e762 <_strtod_l+0x9da>
 800e86c:	e4d6      	b.n	800e21c <_strtod_l+0x494>
 800e86e:	bf00      	nop
 800e870:	94a03595 	.word	0x94a03595
 800e874:	3fdfffff 	.word	0x3fdfffff
 800e878:	35afe535 	.word	0x35afe535
 800e87c:	3fe00000 	.word	0x3fe00000
 800e880:	000fffff 	.word	0x000fffff
 800e884:	7ff00000 	.word	0x7ff00000
 800e888:	7fefffff 	.word	0x7fefffff
 800e88c:	3ff00000 	.word	0x3ff00000
 800e890:	7fe00000 	.word	0x7fe00000
 800e894:	7c9fffff 	.word	0x7c9fffff
 800e898:	3fe00000 	.word	0x3fe00000
 800e89c:	bff00000 	.word	0xbff00000
 800e8a0:	9b05      	ldr	r3, [sp, #20]
 800e8a2:	b313      	cbz	r3, 800e8ea <_strtod_l+0xb62>
 800e8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e8aa:	d81e      	bhi.n	800e8ea <_strtod_l+0xb62>
 800e8ac:	a326      	add	r3, pc, #152	; (adr r3, 800e948 <_strtod_l+0xbc0>)
 800e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	4629      	mov	r1, r5
 800e8b6:	f7f2 f8a3 	bl	8000a00 <__aeabi_dcmple>
 800e8ba:	b190      	cbz	r0, 800e8e2 <_strtod_l+0xb5a>
 800e8bc:	4629      	mov	r1, r5
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f7f2 f8fa 	bl	8000ab8 <__aeabi_d2uiz>
 800e8c4:	2801      	cmp	r0, #1
 800e8c6:	bf38      	it	cc
 800e8c8:	2001      	movcc	r0, #1
 800e8ca:	f7f1 fda3 	bl	8000414 <__aeabi_ui2d>
 800e8ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	460d      	mov	r5, r1
 800e8d4:	b9d3      	cbnz	r3, 800e90c <_strtod_l+0xb84>
 800e8d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8da:	9012      	str	r0, [sp, #72]	; 0x48
 800e8dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e8e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e8e8:	1a9f      	subs	r7, r3, r2
 800e8ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8ee:	f001 fdc9 	bl	8010484 <__ulp>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	f7f1 fe05 	bl	8000508 <__aeabi_dmul>
 800e8fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e902:	f7f1 fc4b 	bl	800019c <__adddf3>
 800e906:	4680      	mov	r8, r0
 800e908:	4689      	mov	r9, r1
 800e90a:	e77e      	b.n	800e80a <_strtod_l+0xa82>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e914:	e7e3      	b.n	800e8de <_strtod_l+0xb56>
 800e916:	a30e      	add	r3, pc, #56	; (adr r3, 800e950 <_strtod_l+0xbc8>)
 800e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91c:	f7f2 f866 	bl	80009ec <__aeabi_dcmplt>
 800e920:	e7a1      	b.n	800e866 <_strtod_l+0xade>
 800e922:	2300      	movs	r3, #0
 800e924:	930a      	str	r3, [sp, #40]	; 0x28
 800e926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e92a:	6013      	str	r3, [r2, #0]
 800e92c:	f7ff ba71 	b.w	800de12 <_strtod_l+0x8a>
 800e930:	2a65      	cmp	r2, #101	; 0x65
 800e932:	f43f ab63 	beq.w	800dffc <_strtod_l+0x274>
 800e936:	2a45      	cmp	r2, #69	; 0x45
 800e938:	f43f ab60 	beq.w	800dffc <_strtod_l+0x274>
 800e93c:	2301      	movs	r3, #1
 800e93e:	f7ff bb95 	b.w	800e06c <_strtod_l+0x2e4>
 800e942:	bf00      	nop
 800e944:	f3af 8000 	nop.w
 800e948:	ffc00000 	.word	0xffc00000
 800e94c:	41dfffff 	.word	0x41dfffff
 800e950:	94a03595 	.word	0x94a03595
 800e954:	3fcfffff 	.word	0x3fcfffff

0800e958 <strtod>:
 800e958:	460a      	mov	r2, r1
 800e95a:	4601      	mov	r1, r0
 800e95c:	4802      	ldr	r0, [pc, #8]	; (800e968 <strtod+0x10>)
 800e95e:	4b03      	ldr	r3, [pc, #12]	; (800e96c <strtod+0x14>)
 800e960:	6800      	ldr	r0, [r0, #0]
 800e962:	f7ff ba11 	b.w	800dd88 <_strtod_l>
 800e966:	bf00      	nop
 800e968:	200001a0 	.word	0x200001a0
 800e96c:	20000208 	.word	0x20000208

0800e970 <quorem>:
 800e970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	6903      	ldr	r3, [r0, #16]
 800e976:	690c      	ldr	r4, [r1, #16]
 800e978:	4607      	mov	r7, r0
 800e97a:	42a3      	cmp	r3, r4
 800e97c:	f2c0 8082 	blt.w	800ea84 <quorem+0x114>
 800e980:	3c01      	subs	r4, #1
 800e982:	f100 0514 	add.w	r5, r0, #20
 800e986:	f101 0814 	add.w	r8, r1, #20
 800e98a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e98e:	9301      	str	r3, [sp, #4]
 800e990:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e998:	3301      	adds	r3, #1
 800e99a:	429a      	cmp	r2, r3
 800e99c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e9a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e9a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e9a8:	d331      	bcc.n	800ea0e <quorem+0x9e>
 800e9aa:	f04f 0e00 	mov.w	lr, #0
 800e9ae:	4640      	mov	r0, r8
 800e9b0:	46ac      	mov	ip, r5
 800e9b2:	46f2      	mov	sl, lr
 800e9b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e9b8:	b293      	uxth	r3, r2
 800e9ba:	fb06 e303 	mla	r3, r6, r3, lr
 800e9be:	0c12      	lsrs	r2, r2, #16
 800e9c0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	fb06 e202 	mla	r2, r6, r2, lr
 800e9ca:	ebaa 0303 	sub.w	r3, sl, r3
 800e9ce:	f8dc a000 	ldr.w	sl, [ip]
 800e9d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e9d6:	fa1f fa8a 	uxth.w	sl, sl
 800e9da:	4453      	add	r3, sl
 800e9dc:	f8dc a000 	ldr.w	sl, [ip]
 800e9e0:	b292      	uxth	r2, r2
 800e9e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e9e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9f0:	4581      	cmp	r9, r0
 800e9f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e9f6:	f84c 3b04 	str.w	r3, [ip], #4
 800e9fa:	d2db      	bcs.n	800e9b4 <quorem+0x44>
 800e9fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800ea00:	b92b      	cbnz	r3, 800ea0e <quorem+0x9e>
 800ea02:	9b01      	ldr	r3, [sp, #4]
 800ea04:	3b04      	subs	r3, #4
 800ea06:	429d      	cmp	r5, r3
 800ea08:	461a      	mov	r2, r3
 800ea0a:	d32f      	bcc.n	800ea6c <quorem+0xfc>
 800ea0c:	613c      	str	r4, [r7, #16]
 800ea0e:	4638      	mov	r0, r7
 800ea10:	f001 fc90 	bl	8010334 <__mcmp>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	db25      	blt.n	800ea64 <quorem+0xf4>
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f04f 0c00 	mov.w	ip, #0
 800ea1e:	3601      	adds	r6, #1
 800ea20:	f858 1b04 	ldr.w	r1, [r8], #4
 800ea24:	f8d0 e000 	ldr.w	lr, [r0]
 800ea28:	b28b      	uxth	r3, r1
 800ea2a:	ebac 0303 	sub.w	r3, ip, r3
 800ea2e:	fa1f f28e 	uxth.w	r2, lr
 800ea32:	4413      	add	r3, r2
 800ea34:	0c0a      	lsrs	r2, r1, #16
 800ea36:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea44:	45c1      	cmp	r9, r8
 800ea46:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ea4a:	f840 3b04 	str.w	r3, [r0], #4
 800ea4e:	d2e7      	bcs.n	800ea20 <quorem+0xb0>
 800ea50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea58:	b922      	cbnz	r2, 800ea64 <quorem+0xf4>
 800ea5a:	3b04      	subs	r3, #4
 800ea5c:	429d      	cmp	r5, r3
 800ea5e:	461a      	mov	r2, r3
 800ea60:	d30a      	bcc.n	800ea78 <quorem+0x108>
 800ea62:	613c      	str	r4, [r7, #16]
 800ea64:	4630      	mov	r0, r6
 800ea66:	b003      	add	sp, #12
 800ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6c:	6812      	ldr	r2, [r2, #0]
 800ea6e:	3b04      	subs	r3, #4
 800ea70:	2a00      	cmp	r2, #0
 800ea72:	d1cb      	bne.n	800ea0c <quorem+0x9c>
 800ea74:	3c01      	subs	r4, #1
 800ea76:	e7c6      	b.n	800ea06 <quorem+0x96>
 800ea78:	6812      	ldr	r2, [r2, #0]
 800ea7a:	3b04      	subs	r3, #4
 800ea7c:	2a00      	cmp	r2, #0
 800ea7e:	d1f0      	bne.n	800ea62 <quorem+0xf2>
 800ea80:	3c01      	subs	r4, #1
 800ea82:	e7eb      	b.n	800ea5c <quorem+0xec>
 800ea84:	2000      	movs	r0, #0
 800ea86:	e7ee      	b.n	800ea66 <quorem+0xf6>

0800ea88 <_dtoa_r>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	4616      	mov	r6, r2
 800ea8e:	461f      	mov	r7, r3
 800ea90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea92:	b099      	sub	sp, #100	; 0x64
 800ea94:	4605      	mov	r5, r0
 800ea96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ea9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ea9e:	b974      	cbnz	r4, 800eabe <_dtoa_r+0x36>
 800eaa0:	2010      	movs	r0, #16
 800eaa2:	f001 f949 	bl	800fd38 <malloc>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	6268      	str	r0, [r5, #36]	; 0x24
 800eaaa:	b920      	cbnz	r0, 800eab6 <_dtoa_r+0x2e>
 800eaac:	21ea      	movs	r1, #234	; 0xea
 800eaae:	4ba8      	ldr	r3, [pc, #672]	; (800ed50 <_dtoa_r+0x2c8>)
 800eab0:	48a8      	ldr	r0, [pc, #672]	; (800ed54 <_dtoa_r+0x2cc>)
 800eab2:	f002 f89f 	bl	8010bf4 <__assert_func>
 800eab6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eaba:	6004      	str	r4, [r0, #0]
 800eabc:	60c4      	str	r4, [r0, #12]
 800eabe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eac0:	6819      	ldr	r1, [r3, #0]
 800eac2:	b151      	cbz	r1, 800eada <_dtoa_r+0x52>
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	2301      	movs	r3, #1
 800eac8:	4093      	lsls	r3, r2
 800eaca:	604a      	str	r2, [r1, #4]
 800eacc:	608b      	str	r3, [r1, #8]
 800eace:	4628      	mov	r0, r5
 800ead0:	f001 f9a8 	bl	800fe24 <_Bfree>
 800ead4:	2200      	movs	r2, #0
 800ead6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	1e3b      	subs	r3, r7, #0
 800eadc:	bfaf      	iteee	ge
 800eade:	2300      	movge	r3, #0
 800eae0:	2201      	movlt	r2, #1
 800eae2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eae6:	9305      	strlt	r3, [sp, #20]
 800eae8:	bfa8      	it	ge
 800eaea:	f8c8 3000 	strge.w	r3, [r8]
 800eaee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800eaf2:	4b99      	ldr	r3, [pc, #612]	; (800ed58 <_dtoa_r+0x2d0>)
 800eaf4:	bfb8      	it	lt
 800eaf6:	f8c8 2000 	strlt.w	r2, [r8]
 800eafa:	ea33 0309 	bics.w	r3, r3, r9
 800eafe:	d119      	bne.n	800eb34 <_dtoa_r+0xac>
 800eb00:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb0c:	4333      	orrs	r3, r6
 800eb0e:	f000 857f 	beq.w	800f610 <_dtoa_r+0xb88>
 800eb12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb14:	b953      	cbnz	r3, 800eb2c <_dtoa_r+0xa4>
 800eb16:	4b91      	ldr	r3, [pc, #580]	; (800ed5c <_dtoa_r+0x2d4>)
 800eb18:	e022      	b.n	800eb60 <_dtoa_r+0xd8>
 800eb1a:	4b91      	ldr	r3, [pc, #580]	; (800ed60 <_dtoa_r+0x2d8>)
 800eb1c:	9303      	str	r3, [sp, #12]
 800eb1e:	3308      	adds	r3, #8
 800eb20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eb22:	6013      	str	r3, [r2, #0]
 800eb24:	9803      	ldr	r0, [sp, #12]
 800eb26:	b019      	add	sp, #100	; 0x64
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2c:	4b8b      	ldr	r3, [pc, #556]	; (800ed5c <_dtoa_r+0x2d4>)
 800eb2e:	9303      	str	r3, [sp, #12]
 800eb30:	3303      	adds	r3, #3
 800eb32:	e7f5      	b.n	800eb20 <_dtoa_r+0x98>
 800eb34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eb38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800eb3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb40:	2200      	movs	r2, #0
 800eb42:	2300      	movs	r3, #0
 800eb44:	f7f1 ff48 	bl	80009d8 <__aeabi_dcmpeq>
 800eb48:	4680      	mov	r8, r0
 800eb4a:	b158      	cbz	r0, 800eb64 <_dtoa_r+0xdc>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eb50:	6013      	str	r3, [r2, #0]
 800eb52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f000 8558 	beq.w	800f60a <_dtoa_r+0xb82>
 800eb5a:	4882      	ldr	r0, [pc, #520]	; (800ed64 <_dtoa_r+0x2dc>)
 800eb5c:	6018      	str	r0, [r3, #0]
 800eb5e:	1e43      	subs	r3, r0, #1
 800eb60:	9303      	str	r3, [sp, #12]
 800eb62:	e7df      	b.n	800eb24 <_dtoa_r+0x9c>
 800eb64:	ab16      	add	r3, sp, #88	; 0x58
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	ab17      	add	r3, sp, #92	; 0x5c
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb72:	f001 fd01 	bl	8010578 <__d2b>
 800eb76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eb7a:	4683      	mov	fp, r0
 800eb7c:	2c00      	cmp	r4, #0
 800eb7e:	d07f      	beq.n	800ec80 <_dtoa_r+0x1f8>
 800eb80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800eb8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800eb92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eb96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	4b72      	ldr	r3, [pc, #456]	; (800ed68 <_dtoa_r+0x2e0>)
 800eb9e:	f7f1 fafb 	bl	8000198 <__aeabi_dsub>
 800eba2:	a365      	add	r3, pc, #404	; (adr r3, 800ed38 <_dtoa_r+0x2b0>)
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	f7f1 fcae 	bl	8000508 <__aeabi_dmul>
 800ebac:	a364      	add	r3, pc, #400	; (adr r3, 800ed40 <_dtoa_r+0x2b8>)
 800ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb2:	f7f1 faf3 	bl	800019c <__adddf3>
 800ebb6:	4606      	mov	r6, r0
 800ebb8:	4620      	mov	r0, r4
 800ebba:	460f      	mov	r7, r1
 800ebbc:	f7f1 fc3a 	bl	8000434 <__aeabi_i2d>
 800ebc0:	a361      	add	r3, pc, #388	; (adr r3, 800ed48 <_dtoa_r+0x2c0>)
 800ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc6:	f7f1 fc9f 	bl	8000508 <__aeabi_dmul>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 fae3 	bl	800019c <__adddf3>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	460f      	mov	r7, r1
 800ebda:	f7f1 ff45 	bl	8000a68 <__aeabi_d2iz>
 800ebde:	2200      	movs	r2, #0
 800ebe0:	4682      	mov	sl, r0
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	f7f1 ff00 	bl	80009ec <__aeabi_dcmplt>
 800ebec:	b148      	cbz	r0, 800ec02 <_dtoa_r+0x17a>
 800ebee:	4650      	mov	r0, sl
 800ebf0:	f7f1 fc20 	bl	8000434 <__aeabi_i2d>
 800ebf4:	4632      	mov	r2, r6
 800ebf6:	463b      	mov	r3, r7
 800ebf8:	f7f1 feee 	bl	80009d8 <__aeabi_dcmpeq>
 800ebfc:	b908      	cbnz	r0, 800ec02 <_dtoa_r+0x17a>
 800ebfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec02:	f1ba 0f16 	cmp.w	sl, #22
 800ec06:	d858      	bhi.n	800ecba <_dtoa_r+0x232>
 800ec08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec0c:	4b57      	ldr	r3, [pc, #348]	; (800ed6c <_dtoa_r+0x2e4>)
 800ec0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec16:	f7f1 fee9 	bl	80009ec <__aeabi_dcmplt>
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d04f      	beq.n	800ecbe <_dtoa_r+0x236>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec24:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ec28:	1b1c      	subs	r4, r3, r4
 800ec2a:	1e63      	subs	r3, r4, #1
 800ec2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec2e:	bf49      	itett	mi
 800ec30:	f1c4 0301 	rsbmi	r3, r4, #1
 800ec34:	2300      	movpl	r3, #0
 800ec36:	9306      	strmi	r3, [sp, #24]
 800ec38:	2300      	movmi	r3, #0
 800ec3a:	bf54      	ite	pl
 800ec3c:	9306      	strpl	r3, [sp, #24]
 800ec3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ec40:	f1ba 0f00 	cmp.w	sl, #0
 800ec44:	db3d      	blt.n	800ecc2 <_dtoa_r+0x23a>
 800ec46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ec4c:	4453      	add	r3, sl
 800ec4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec50:	2300      	movs	r3, #0
 800ec52:	930a      	str	r3, [sp, #40]	; 0x28
 800ec54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec56:	2b09      	cmp	r3, #9
 800ec58:	f200 808c 	bhi.w	800ed74 <_dtoa_r+0x2ec>
 800ec5c:	2b05      	cmp	r3, #5
 800ec5e:	bfc4      	itt	gt
 800ec60:	3b04      	subgt	r3, #4
 800ec62:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ec64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec66:	bfc8      	it	gt
 800ec68:	2400      	movgt	r4, #0
 800ec6a:	f1a3 0302 	sub.w	r3, r3, #2
 800ec6e:	bfd8      	it	le
 800ec70:	2401      	movle	r4, #1
 800ec72:	2b03      	cmp	r3, #3
 800ec74:	f200 808a 	bhi.w	800ed8c <_dtoa_r+0x304>
 800ec78:	e8df f003 	tbb	[pc, r3]
 800ec7c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ec80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ec84:	441c      	add	r4, r3
 800ec86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ec8a:	2b20      	cmp	r3, #32
 800ec8c:	bfc3      	ittte	gt
 800ec8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ec96:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec9a:	f1c3 0320 	rsble	r3, r3, #32
 800ec9e:	bfc6      	itte	gt
 800eca0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eca4:	4318      	orrgt	r0, r3
 800eca6:	fa06 f003 	lslle.w	r0, r6, r3
 800ecaa:	f7f1 fbb3 	bl	8000414 <__aeabi_ui2d>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ecb4:	3c01      	subs	r4, #1
 800ecb6:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecb8:	e76f      	b.n	800eb9a <_dtoa_r+0x112>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	e7b2      	b.n	800ec24 <_dtoa_r+0x19c>
 800ecbe:	900f      	str	r0, [sp, #60]	; 0x3c
 800ecc0:	e7b1      	b.n	800ec26 <_dtoa_r+0x19e>
 800ecc2:	9b06      	ldr	r3, [sp, #24]
 800ecc4:	eba3 030a 	sub.w	r3, r3, sl
 800ecc8:	9306      	str	r3, [sp, #24]
 800ecca:	f1ca 0300 	rsb	r3, sl, #0
 800ecce:	930a      	str	r3, [sp, #40]	; 0x28
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	930e      	str	r3, [sp, #56]	; 0x38
 800ecd4:	e7be      	b.n	800ec54 <_dtoa_r+0x1cc>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dc58      	bgt.n	800ed92 <_dtoa_r+0x30a>
 800ece0:	f04f 0901 	mov.w	r9, #1
 800ece4:	464b      	mov	r3, r9
 800ece6:	f8cd 9020 	str.w	r9, [sp, #32]
 800ecea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ecee:	2200      	movs	r2, #0
 800ecf0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ecf2:	6042      	str	r2, [r0, #4]
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	f102 0614 	add.w	r6, r2, #20
 800ecfa:	429e      	cmp	r6, r3
 800ecfc:	6841      	ldr	r1, [r0, #4]
 800ecfe:	d94e      	bls.n	800ed9e <_dtoa_r+0x316>
 800ed00:	4628      	mov	r0, r5
 800ed02:	f001 f84f 	bl	800fda4 <_Balloc>
 800ed06:	9003      	str	r0, [sp, #12]
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	d14c      	bne.n	800eda6 <_dtoa_r+0x31e>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ed12:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <_dtoa_r+0x2e8>)
 800ed14:	e6cc      	b.n	800eab0 <_dtoa_r+0x28>
 800ed16:	2301      	movs	r3, #1
 800ed18:	e7de      	b.n	800ecd8 <_dtoa_r+0x250>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed20:	eb0a 0903 	add.w	r9, sl, r3
 800ed24:	f109 0301 	add.w	r3, r9, #1
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	9308      	str	r3, [sp, #32]
 800ed2c:	bfb8      	it	lt
 800ed2e:	2301      	movlt	r3, #1
 800ed30:	e7dd      	b.n	800ecee <_dtoa_r+0x266>
 800ed32:	2301      	movs	r3, #1
 800ed34:	e7f2      	b.n	800ed1c <_dtoa_r+0x294>
 800ed36:	bf00      	nop
 800ed38:	636f4361 	.word	0x636f4361
 800ed3c:	3fd287a7 	.word	0x3fd287a7
 800ed40:	8b60c8b3 	.word	0x8b60c8b3
 800ed44:	3fc68a28 	.word	0x3fc68a28
 800ed48:	509f79fb 	.word	0x509f79fb
 800ed4c:	3fd34413 	.word	0x3fd34413
 800ed50:	08011b95 	.word	0x08011b95
 800ed54:	08011bac 	.word	0x08011bac
 800ed58:	7ff00000 	.word	0x7ff00000
 800ed5c:	08011b91 	.word	0x08011b91
 800ed60:	08011b88 	.word	0x08011b88
 800ed64:	08011b15 	.word	0x08011b15
 800ed68:	3ff80000 	.word	0x3ff80000
 800ed6c:	08011d18 	.word	0x08011d18
 800ed70:	08011c07 	.word	0x08011c07
 800ed74:	2401      	movs	r4, #1
 800ed76:	2300      	movs	r3, #0
 800ed78:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed7a:	9322      	str	r3, [sp, #136]	; 0x88
 800ed7c:	f04f 39ff 	mov.w	r9, #4294967295
 800ed80:	2200      	movs	r2, #0
 800ed82:	2312      	movs	r3, #18
 800ed84:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed88:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed8a:	e7b0      	b.n	800ecee <_dtoa_r+0x266>
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed90:	e7f4      	b.n	800ed7c <_dtoa_r+0x2f4>
 800ed92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ed96:	464b      	mov	r3, r9
 800ed98:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed9c:	e7a7      	b.n	800ecee <_dtoa_r+0x266>
 800ed9e:	3101      	adds	r1, #1
 800eda0:	6041      	str	r1, [r0, #4]
 800eda2:	0052      	lsls	r2, r2, #1
 800eda4:	e7a7      	b.n	800ecf6 <_dtoa_r+0x26e>
 800eda6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eda8:	9a03      	ldr	r2, [sp, #12]
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	9b08      	ldr	r3, [sp, #32]
 800edae:	2b0e      	cmp	r3, #14
 800edb0:	f200 80a8 	bhi.w	800ef04 <_dtoa_r+0x47c>
 800edb4:	2c00      	cmp	r4, #0
 800edb6:	f000 80a5 	beq.w	800ef04 <_dtoa_r+0x47c>
 800edba:	f1ba 0f00 	cmp.w	sl, #0
 800edbe:	dd34      	ble.n	800ee2a <_dtoa_r+0x3a2>
 800edc0:	4a9a      	ldr	r2, [pc, #616]	; (800f02c <_dtoa_r+0x5a4>)
 800edc2:	f00a 030f 	and.w	r3, sl, #15
 800edc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800edca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800edce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800edd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800edd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800edda:	d016      	beq.n	800ee0a <_dtoa_r+0x382>
 800eddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ede0:	4b93      	ldr	r3, [pc, #588]	; (800f030 <_dtoa_r+0x5a8>)
 800ede2:	2703      	movs	r7, #3
 800ede4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ede8:	f7f1 fcb8 	bl	800075c <__aeabi_ddiv>
 800edec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edf0:	f004 040f 	and.w	r4, r4, #15
 800edf4:	4e8e      	ldr	r6, [pc, #568]	; (800f030 <_dtoa_r+0x5a8>)
 800edf6:	b954      	cbnz	r4, 800ee0e <_dtoa_r+0x386>
 800edf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800edfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee00:	f7f1 fcac 	bl	800075c <__aeabi_ddiv>
 800ee04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee08:	e029      	b.n	800ee5e <_dtoa_r+0x3d6>
 800ee0a:	2702      	movs	r7, #2
 800ee0c:	e7f2      	b.n	800edf4 <_dtoa_r+0x36c>
 800ee0e:	07e1      	lsls	r1, r4, #31
 800ee10:	d508      	bpl.n	800ee24 <_dtoa_r+0x39c>
 800ee12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee16:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ee1a:	f7f1 fb75 	bl	8000508 <__aeabi_dmul>
 800ee1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee22:	3701      	adds	r7, #1
 800ee24:	1064      	asrs	r4, r4, #1
 800ee26:	3608      	adds	r6, #8
 800ee28:	e7e5      	b.n	800edf6 <_dtoa_r+0x36e>
 800ee2a:	f000 80a5 	beq.w	800ef78 <_dtoa_r+0x4f0>
 800ee2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee32:	f1ca 0400 	rsb	r4, sl, #0
 800ee36:	4b7d      	ldr	r3, [pc, #500]	; (800f02c <_dtoa_r+0x5a4>)
 800ee38:	f004 020f 	and.w	r2, r4, #15
 800ee3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	f7f1 fb60 	bl	8000508 <__aeabi_dmul>
 800ee48:	2702      	movs	r7, #2
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee50:	4e77      	ldr	r6, [pc, #476]	; (800f030 <_dtoa_r+0x5a8>)
 800ee52:	1124      	asrs	r4, r4, #4
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	f040 8084 	bne.w	800ef62 <_dtoa_r+0x4da>
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1d2      	bne.n	800ee04 <_dtoa_r+0x37c>
 800ee5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	f000 808b 	beq.w	800ef7c <_dtoa_r+0x4f4>
 800ee66:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ee6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ee6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee72:	2200      	movs	r2, #0
 800ee74:	4b6f      	ldr	r3, [pc, #444]	; (800f034 <_dtoa_r+0x5ac>)
 800ee76:	f7f1 fdb9 	bl	80009ec <__aeabi_dcmplt>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d07e      	beq.n	800ef7c <_dtoa_r+0x4f4>
 800ee7e:	9b08      	ldr	r3, [sp, #32]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d07b      	beq.n	800ef7c <_dtoa_r+0x4f4>
 800ee84:	f1b9 0f00 	cmp.w	r9, #0
 800ee88:	dd38      	ble.n	800eefc <_dtoa_r+0x474>
 800ee8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee8e:	2200      	movs	r2, #0
 800ee90:	4b69      	ldr	r3, [pc, #420]	; (800f038 <_dtoa_r+0x5b0>)
 800ee92:	f7f1 fb39 	bl	8000508 <__aeabi_dmul>
 800ee96:	464c      	mov	r4, r9
 800ee98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee9c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800eea0:	3701      	adds	r7, #1
 800eea2:	4638      	mov	r0, r7
 800eea4:	f7f1 fac6 	bl	8000434 <__aeabi_i2d>
 800eea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eeac:	f7f1 fb2c 	bl	8000508 <__aeabi_dmul>
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	4b62      	ldr	r3, [pc, #392]	; (800f03c <_dtoa_r+0x5b4>)
 800eeb4:	f7f1 f972 	bl	800019c <__adddf3>
 800eeb8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eebc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eec0:	9611      	str	r6, [sp, #68]	; 0x44
 800eec2:	2c00      	cmp	r4, #0
 800eec4:	d15d      	bne.n	800ef82 <_dtoa_r+0x4fa>
 800eec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeca:	2200      	movs	r2, #0
 800eecc:	4b5c      	ldr	r3, [pc, #368]	; (800f040 <_dtoa_r+0x5b8>)
 800eece:	f7f1 f963 	bl	8000198 <__aeabi_dsub>
 800eed2:	4602      	mov	r2, r0
 800eed4:	460b      	mov	r3, r1
 800eed6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eeda:	4633      	mov	r3, r6
 800eedc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eede:	f7f1 fda3 	bl	8000a28 <__aeabi_dcmpgt>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	f040 829c 	bne.w	800f420 <_dtoa_r+0x998>
 800eee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eeee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eef2:	f7f1 fd7b 	bl	80009ec <__aeabi_dcmplt>
 800eef6:	2800      	cmp	r0, #0
 800eef8:	f040 8290 	bne.w	800f41c <_dtoa_r+0x994>
 800eefc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ef00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ef04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f2c0 8152 	blt.w	800f1b0 <_dtoa_r+0x728>
 800ef0c:	f1ba 0f0e 	cmp.w	sl, #14
 800ef10:	f300 814e 	bgt.w	800f1b0 <_dtoa_r+0x728>
 800ef14:	4b45      	ldr	r3, [pc, #276]	; (800f02c <_dtoa_r+0x5a4>)
 800ef16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ef1e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ef22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f280 80db 	bge.w	800f0e0 <_dtoa_r+0x658>
 800ef2a:	9b08      	ldr	r3, [sp, #32]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f300 80d7 	bgt.w	800f0e0 <_dtoa_r+0x658>
 800ef32:	f040 8272 	bne.w	800f41a <_dtoa_r+0x992>
 800ef36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	4b40      	ldr	r3, [pc, #256]	; (800f040 <_dtoa_r+0x5b8>)
 800ef3e:	f7f1 fae3 	bl	8000508 <__aeabi_dmul>
 800ef42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef46:	f7f1 fd65 	bl	8000a14 <__aeabi_dcmpge>
 800ef4a:	9c08      	ldr	r4, [sp, #32]
 800ef4c:	4626      	mov	r6, r4
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	f040 8248 	bne.w	800f3e4 <_dtoa_r+0x95c>
 800ef54:	2331      	movs	r3, #49	; 0x31
 800ef56:	9f03      	ldr	r7, [sp, #12]
 800ef58:	f10a 0a01 	add.w	sl, sl, #1
 800ef5c:	f807 3b01 	strb.w	r3, [r7], #1
 800ef60:	e244      	b.n	800f3ec <_dtoa_r+0x964>
 800ef62:	07e2      	lsls	r2, r4, #31
 800ef64:	d505      	bpl.n	800ef72 <_dtoa_r+0x4ea>
 800ef66:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef6a:	f7f1 facd 	bl	8000508 <__aeabi_dmul>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	3701      	adds	r7, #1
 800ef72:	1064      	asrs	r4, r4, #1
 800ef74:	3608      	adds	r6, #8
 800ef76:	e76d      	b.n	800ee54 <_dtoa_r+0x3cc>
 800ef78:	2702      	movs	r7, #2
 800ef7a:	e770      	b.n	800ee5e <_dtoa_r+0x3d6>
 800ef7c:	46d0      	mov	r8, sl
 800ef7e:	9c08      	ldr	r4, [sp, #32]
 800ef80:	e78f      	b.n	800eea2 <_dtoa_r+0x41a>
 800ef82:	9903      	ldr	r1, [sp, #12]
 800ef84:	4b29      	ldr	r3, [pc, #164]	; (800f02c <_dtoa_r+0x5a4>)
 800ef86:	4421      	add	r1, r4
 800ef88:	9112      	str	r1, [sp, #72]	; 0x48
 800ef8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef90:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ef94:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef98:	2900      	cmp	r1, #0
 800ef9a:	d055      	beq.n	800f048 <_dtoa_r+0x5c0>
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	4929      	ldr	r1, [pc, #164]	; (800f044 <_dtoa_r+0x5bc>)
 800efa0:	f7f1 fbdc 	bl	800075c <__aeabi_ddiv>
 800efa4:	463b      	mov	r3, r7
 800efa6:	4632      	mov	r2, r6
 800efa8:	f7f1 f8f6 	bl	8000198 <__aeabi_dsub>
 800efac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efb0:	9f03      	ldr	r7, [sp, #12]
 800efb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efb6:	f7f1 fd57 	bl	8000a68 <__aeabi_d2iz>
 800efba:	4604      	mov	r4, r0
 800efbc:	f7f1 fa3a 	bl	8000434 <__aeabi_i2d>
 800efc0:	4602      	mov	r2, r0
 800efc2:	460b      	mov	r3, r1
 800efc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efc8:	f7f1 f8e6 	bl	8000198 <__aeabi_dsub>
 800efcc:	4602      	mov	r2, r0
 800efce:	460b      	mov	r3, r1
 800efd0:	3430      	adds	r4, #48	; 0x30
 800efd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800efd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800efda:	f807 4b01 	strb.w	r4, [r7], #1
 800efde:	f7f1 fd05 	bl	80009ec <__aeabi_dcmplt>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d174      	bne.n	800f0d0 <_dtoa_r+0x648>
 800efe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efea:	2000      	movs	r0, #0
 800efec:	4911      	ldr	r1, [pc, #68]	; (800f034 <_dtoa_r+0x5ac>)
 800efee:	f7f1 f8d3 	bl	8000198 <__aeabi_dsub>
 800eff2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eff6:	f7f1 fcf9 	bl	80009ec <__aeabi_dcmplt>
 800effa:	2800      	cmp	r0, #0
 800effc:	f040 80b7 	bne.w	800f16e <_dtoa_r+0x6e6>
 800f000:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f002:	429f      	cmp	r7, r3
 800f004:	f43f af7a 	beq.w	800eefc <_dtoa_r+0x474>
 800f008:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f00c:	2200      	movs	r2, #0
 800f00e:	4b0a      	ldr	r3, [pc, #40]	; (800f038 <_dtoa_r+0x5b0>)
 800f010:	f7f1 fa7a 	bl	8000508 <__aeabi_dmul>
 800f014:	2200      	movs	r2, #0
 800f016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f01e:	4b06      	ldr	r3, [pc, #24]	; (800f038 <_dtoa_r+0x5b0>)
 800f020:	f7f1 fa72 	bl	8000508 <__aeabi_dmul>
 800f024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f028:	e7c3      	b.n	800efb2 <_dtoa_r+0x52a>
 800f02a:	bf00      	nop
 800f02c:	08011d18 	.word	0x08011d18
 800f030:	08011cf0 	.word	0x08011cf0
 800f034:	3ff00000 	.word	0x3ff00000
 800f038:	40240000 	.word	0x40240000
 800f03c:	401c0000 	.word	0x401c0000
 800f040:	40140000 	.word	0x40140000
 800f044:	3fe00000 	.word	0x3fe00000
 800f048:	4630      	mov	r0, r6
 800f04a:	4639      	mov	r1, r7
 800f04c:	f7f1 fa5c 	bl	8000508 <__aeabi_dmul>
 800f050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f052:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f056:	9c03      	ldr	r4, [sp, #12]
 800f058:	9314      	str	r3, [sp, #80]	; 0x50
 800f05a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f05e:	f7f1 fd03 	bl	8000a68 <__aeabi_d2iz>
 800f062:	9015      	str	r0, [sp, #84]	; 0x54
 800f064:	f7f1 f9e6 	bl	8000434 <__aeabi_i2d>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f070:	f7f1 f892 	bl	8000198 <__aeabi_dsub>
 800f074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f076:	4606      	mov	r6, r0
 800f078:	3330      	adds	r3, #48	; 0x30
 800f07a:	f804 3b01 	strb.w	r3, [r4], #1
 800f07e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f080:	460f      	mov	r7, r1
 800f082:	429c      	cmp	r4, r3
 800f084:	f04f 0200 	mov.w	r2, #0
 800f088:	d124      	bne.n	800f0d4 <_dtoa_r+0x64c>
 800f08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f08e:	4bb0      	ldr	r3, [pc, #704]	; (800f350 <_dtoa_r+0x8c8>)
 800f090:	f7f1 f884 	bl	800019c <__adddf3>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	4630      	mov	r0, r6
 800f09a:	4639      	mov	r1, r7
 800f09c:	f7f1 fcc4 	bl	8000a28 <__aeabi_dcmpgt>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	d163      	bne.n	800f16c <_dtoa_r+0x6e4>
 800f0a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	49a9      	ldr	r1, [pc, #676]	; (800f350 <_dtoa_r+0x8c8>)
 800f0ac:	f7f1 f874 	bl	8000198 <__aeabi_dsub>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	4639      	mov	r1, r7
 800f0b8:	f7f1 fc98 	bl	80009ec <__aeabi_dcmplt>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	f43f af1d 	beq.w	800eefc <_dtoa_r+0x474>
 800f0c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f0c4:	1e7b      	subs	r3, r7, #1
 800f0c6:	9314      	str	r3, [sp, #80]	; 0x50
 800f0c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f0cc:	2b30      	cmp	r3, #48	; 0x30
 800f0ce:	d0f8      	beq.n	800f0c2 <_dtoa_r+0x63a>
 800f0d0:	46c2      	mov	sl, r8
 800f0d2:	e03b      	b.n	800f14c <_dtoa_r+0x6c4>
 800f0d4:	4b9f      	ldr	r3, [pc, #636]	; (800f354 <_dtoa_r+0x8cc>)
 800f0d6:	f7f1 fa17 	bl	8000508 <__aeabi_dmul>
 800f0da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0de:	e7bc      	b.n	800f05a <_dtoa_r+0x5d2>
 800f0e0:	9f03      	ldr	r7, [sp, #12]
 800f0e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f0e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	4649      	mov	r1, r9
 800f0ee:	f7f1 fb35 	bl	800075c <__aeabi_ddiv>
 800f0f2:	f7f1 fcb9 	bl	8000a68 <__aeabi_d2iz>
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	f7f1 f99c 	bl	8000434 <__aeabi_i2d>
 800f0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f100:	f7f1 fa02 	bl	8000508 <__aeabi_dmul>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4640      	mov	r0, r8
 800f10a:	4649      	mov	r1, r9
 800f10c:	f7f1 f844 	bl	8000198 <__aeabi_dsub>
 800f110:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f114:	f807 6b01 	strb.w	r6, [r7], #1
 800f118:	9e03      	ldr	r6, [sp, #12]
 800f11a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f11e:	1bbe      	subs	r6, r7, r6
 800f120:	45b4      	cmp	ip, r6
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	d136      	bne.n	800f196 <_dtoa_r+0x70e>
 800f128:	f7f1 f838 	bl	800019c <__adddf3>
 800f12c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f130:	4680      	mov	r8, r0
 800f132:	4689      	mov	r9, r1
 800f134:	f7f1 fc78 	bl	8000a28 <__aeabi_dcmpgt>
 800f138:	bb58      	cbnz	r0, 800f192 <_dtoa_r+0x70a>
 800f13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f1 fc49 	bl	80009d8 <__aeabi_dcmpeq>
 800f146:	b108      	cbz	r0, 800f14c <_dtoa_r+0x6c4>
 800f148:	07e1      	lsls	r1, r4, #31
 800f14a:	d422      	bmi.n	800f192 <_dtoa_r+0x70a>
 800f14c:	4628      	mov	r0, r5
 800f14e:	4659      	mov	r1, fp
 800f150:	f000 fe68 	bl	800fe24 <_Bfree>
 800f154:	2300      	movs	r3, #0
 800f156:	703b      	strb	r3, [r7, #0]
 800f158:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f15a:	f10a 0001 	add.w	r0, sl, #1
 800f15e:	6018      	str	r0, [r3, #0]
 800f160:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f162:	2b00      	cmp	r3, #0
 800f164:	f43f acde 	beq.w	800eb24 <_dtoa_r+0x9c>
 800f168:	601f      	str	r7, [r3, #0]
 800f16a:	e4db      	b.n	800eb24 <_dtoa_r+0x9c>
 800f16c:	4627      	mov	r7, r4
 800f16e:	463b      	mov	r3, r7
 800f170:	461f      	mov	r7, r3
 800f172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f176:	2a39      	cmp	r2, #57	; 0x39
 800f178:	d107      	bne.n	800f18a <_dtoa_r+0x702>
 800f17a:	9a03      	ldr	r2, [sp, #12]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d1f7      	bne.n	800f170 <_dtoa_r+0x6e8>
 800f180:	2230      	movs	r2, #48	; 0x30
 800f182:	9903      	ldr	r1, [sp, #12]
 800f184:	f108 0801 	add.w	r8, r8, #1
 800f188:	700a      	strb	r2, [r1, #0]
 800f18a:	781a      	ldrb	r2, [r3, #0]
 800f18c:	3201      	adds	r2, #1
 800f18e:	701a      	strb	r2, [r3, #0]
 800f190:	e79e      	b.n	800f0d0 <_dtoa_r+0x648>
 800f192:	46d0      	mov	r8, sl
 800f194:	e7eb      	b.n	800f16e <_dtoa_r+0x6e6>
 800f196:	2200      	movs	r2, #0
 800f198:	4b6e      	ldr	r3, [pc, #440]	; (800f354 <_dtoa_r+0x8cc>)
 800f19a:	f7f1 f9b5 	bl	8000508 <__aeabi_dmul>
 800f19e:	2200      	movs	r2, #0
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	4680      	mov	r8, r0
 800f1a4:	4689      	mov	r9, r1
 800f1a6:	f7f1 fc17 	bl	80009d8 <__aeabi_dcmpeq>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d09b      	beq.n	800f0e6 <_dtoa_r+0x65e>
 800f1ae:	e7cd      	b.n	800f14c <_dtoa_r+0x6c4>
 800f1b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1b2:	2a00      	cmp	r2, #0
 800f1b4:	f000 80d0 	beq.w	800f358 <_dtoa_r+0x8d0>
 800f1b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f1ba:	2a01      	cmp	r2, #1
 800f1bc:	f300 80ae 	bgt.w	800f31c <_dtoa_r+0x894>
 800f1c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1c2:	2a00      	cmp	r2, #0
 800f1c4:	f000 80a6 	beq.w	800f314 <_dtoa_r+0x88c>
 800f1c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f1cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f1ce:	9f06      	ldr	r7, [sp, #24]
 800f1d0:	9a06      	ldr	r2, [sp, #24]
 800f1d2:	2101      	movs	r1, #1
 800f1d4:	441a      	add	r2, r3
 800f1d6:	9206      	str	r2, [sp, #24]
 800f1d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1da:	4628      	mov	r0, r5
 800f1dc:	441a      	add	r2, r3
 800f1de:	9209      	str	r2, [sp, #36]	; 0x24
 800f1e0:	f000 ff20 	bl	8010024 <__i2b>
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	2f00      	cmp	r7, #0
 800f1e8:	dd0c      	ble.n	800f204 <_dtoa_r+0x77c>
 800f1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	dd09      	ble.n	800f204 <_dtoa_r+0x77c>
 800f1f0:	42bb      	cmp	r3, r7
 800f1f2:	bfa8      	it	ge
 800f1f4:	463b      	movge	r3, r7
 800f1f6:	9a06      	ldr	r2, [sp, #24]
 800f1f8:	1aff      	subs	r7, r7, r3
 800f1fa:	1ad2      	subs	r2, r2, r3
 800f1fc:	9206      	str	r2, [sp, #24]
 800f1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	9309      	str	r3, [sp, #36]	; 0x24
 800f204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f206:	b1f3      	cbz	r3, 800f246 <_dtoa_r+0x7be>
 800f208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 80a8 	beq.w	800f360 <_dtoa_r+0x8d8>
 800f210:	2c00      	cmp	r4, #0
 800f212:	dd10      	ble.n	800f236 <_dtoa_r+0x7ae>
 800f214:	4631      	mov	r1, r6
 800f216:	4622      	mov	r2, r4
 800f218:	4628      	mov	r0, r5
 800f21a:	f000 ffc1 	bl	80101a0 <__pow5mult>
 800f21e:	465a      	mov	r2, fp
 800f220:	4601      	mov	r1, r0
 800f222:	4606      	mov	r6, r0
 800f224:	4628      	mov	r0, r5
 800f226:	f000 ff13 	bl	8010050 <__multiply>
 800f22a:	4680      	mov	r8, r0
 800f22c:	4659      	mov	r1, fp
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 fdf8 	bl	800fe24 <_Bfree>
 800f234:	46c3      	mov	fp, r8
 800f236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f238:	1b1a      	subs	r2, r3, r4
 800f23a:	d004      	beq.n	800f246 <_dtoa_r+0x7be>
 800f23c:	4659      	mov	r1, fp
 800f23e:	4628      	mov	r0, r5
 800f240:	f000 ffae 	bl	80101a0 <__pow5mult>
 800f244:	4683      	mov	fp, r0
 800f246:	2101      	movs	r1, #1
 800f248:	4628      	mov	r0, r5
 800f24a:	f000 feeb 	bl	8010024 <__i2b>
 800f24e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f250:	4604      	mov	r4, r0
 800f252:	2b00      	cmp	r3, #0
 800f254:	f340 8086 	ble.w	800f364 <_dtoa_r+0x8dc>
 800f258:	461a      	mov	r2, r3
 800f25a:	4601      	mov	r1, r0
 800f25c:	4628      	mov	r0, r5
 800f25e:	f000 ff9f 	bl	80101a0 <__pow5mult>
 800f262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f264:	4604      	mov	r4, r0
 800f266:	2b01      	cmp	r3, #1
 800f268:	dd7f      	ble.n	800f36a <_dtoa_r+0x8e2>
 800f26a:	f04f 0800 	mov.w	r8, #0
 800f26e:	6923      	ldr	r3, [r4, #16]
 800f270:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f274:	6918      	ldr	r0, [r3, #16]
 800f276:	f000 fe87 	bl	800ff88 <__hi0bits>
 800f27a:	f1c0 0020 	rsb	r0, r0, #32
 800f27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f280:	4418      	add	r0, r3
 800f282:	f010 001f 	ands.w	r0, r0, #31
 800f286:	f000 8092 	beq.w	800f3ae <_dtoa_r+0x926>
 800f28a:	f1c0 0320 	rsb	r3, r0, #32
 800f28e:	2b04      	cmp	r3, #4
 800f290:	f340 808a 	ble.w	800f3a8 <_dtoa_r+0x920>
 800f294:	f1c0 001c 	rsb	r0, r0, #28
 800f298:	9b06      	ldr	r3, [sp, #24]
 800f29a:	4407      	add	r7, r0
 800f29c:	4403      	add	r3, r0
 800f29e:	9306      	str	r3, [sp, #24]
 800f2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a2:	4403      	add	r3, r0
 800f2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a6:	9b06      	ldr	r3, [sp, #24]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	dd05      	ble.n	800f2b8 <_dtoa_r+0x830>
 800f2ac:	4659      	mov	r1, fp
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	f000 ffcf 	bl	8010254 <__lshift>
 800f2b6:	4683      	mov	fp, r0
 800f2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	dd05      	ble.n	800f2ca <_dtoa_r+0x842>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f000 ffc6 	bl	8010254 <__lshift>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d070      	beq.n	800f3b2 <_dtoa_r+0x92a>
 800f2d0:	4621      	mov	r1, r4
 800f2d2:	4658      	mov	r0, fp
 800f2d4:	f001 f82e 	bl	8010334 <__mcmp>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	da6a      	bge.n	800f3b2 <_dtoa_r+0x92a>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	4659      	mov	r1, fp
 800f2e0:	220a      	movs	r2, #10
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f000 fdc0 	bl	800fe68 <__multadd>
 800f2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2ea:	4683      	mov	fp, r0
 800f2ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 8194 	beq.w	800f61e <_dtoa_r+0xb96>
 800f2f6:	4631      	mov	r1, r6
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	220a      	movs	r2, #10
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f000 fdb3 	bl	800fe68 <__multadd>
 800f302:	f1b9 0f00 	cmp.w	r9, #0
 800f306:	4606      	mov	r6, r0
 800f308:	f300 8093 	bgt.w	800f432 <_dtoa_r+0x9aa>
 800f30c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f30e:	2b02      	cmp	r3, #2
 800f310:	dc57      	bgt.n	800f3c2 <_dtoa_r+0x93a>
 800f312:	e08e      	b.n	800f432 <_dtoa_r+0x9aa>
 800f314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f31a:	e757      	b.n	800f1cc <_dtoa_r+0x744>
 800f31c:	9b08      	ldr	r3, [sp, #32]
 800f31e:	1e5c      	subs	r4, r3, #1
 800f320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f322:	42a3      	cmp	r3, r4
 800f324:	bfb7      	itett	lt
 800f326:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f328:	1b1c      	subge	r4, r3, r4
 800f32a:	1ae2      	sublt	r2, r4, r3
 800f32c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f32e:	bfbe      	ittt	lt
 800f330:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f332:	189b      	addlt	r3, r3, r2
 800f334:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f336:	9b08      	ldr	r3, [sp, #32]
 800f338:	bfb8      	it	lt
 800f33a:	2400      	movlt	r4, #0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	bfbb      	ittet	lt
 800f340:	9b06      	ldrlt	r3, [sp, #24]
 800f342:	9a08      	ldrlt	r2, [sp, #32]
 800f344:	9f06      	ldrge	r7, [sp, #24]
 800f346:	1a9f      	sublt	r7, r3, r2
 800f348:	bfac      	ite	ge
 800f34a:	9b08      	ldrge	r3, [sp, #32]
 800f34c:	2300      	movlt	r3, #0
 800f34e:	e73f      	b.n	800f1d0 <_dtoa_r+0x748>
 800f350:	3fe00000 	.word	0x3fe00000
 800f354:	40240000 	.word	0x40240000
 800f358:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f35a:	9f06      	ldr	r7, [sp, #24]
 800f35c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f35e:	e742      	b.n	800f1e6 <_dtoa_r+0x75e>
 800f360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f362:	e76b      	b.n	800f23c <_dtoa_r+0x7b4>
 800f364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f366:	2b01      	cmp	r3, #1
 800f368:	dc19      	bgt.n	800f39e <_dtoa_r+0x916>
 800f36a:	9b04      	ldr	r3, [sp, #16]
 800f36c:	b9bb      	cbnz	r3, 800f39e <_dtoa_r+0x916>
 800f36e:	9b05      	ldr	r3, [sp, #20]
 800f370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f374:	b99b      	cbnz	r3, 800f39e <_dtoa_r+0x916>
 800f376:	9b05      	ldr	r3, [sp, #20]
 800f378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f37c:	0d1b      	lsrs	r3, r3, #20
 800f37e:	051b      	lsls	r3, r3, #20
 800f380:	b183      	cbz	r3, 800f3a4 <_dtoa_r+0x91c>
 800f382:	f04f 0801 	mov.w	r8, #1
 800f386:	9b06      	ldr	r3, [sp, #24]
 800f388:	3301      	adds	r3, #1
 800f38a:	9306      	str	r3, [sp, #24]
 800f38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38e:	3301      	adds	r3, #1
 800f390:	9309      	str	r3, [sp, #36]	; 0x24
 800f392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f394:	2b00      	cmp	r3, #0
 800f396:	f47f af6a 	bne.w	800f26e <_dtoa_r+0x7e6>
 800f39a:	2001      	movs	r0, #1
 800f39c:	e76f      	b.n	800f27e <_dtoa_r+0x7f6>
 800f39e:	f04f 0800 	mov.w	r8, #0
 800f3a2:	e7f6      	b.n	800f392 <_dtoa_r+0x90a>
 800f3a4:	4698      	mov	r8, r3
 800f3a6:	e7f4      	b.n	800f392 <_dtoa_r+0x90a>
 800f3a8:	f43f af7d 	beq.w	800f2a6 <_dtoa_r+0x81e>
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	301c      	adds	r0, #28
 800f3b0:	e772      	b.n	800f298 <_dtoa_r+0x810>
 800f3b2:	9b08      	ldr	r3, [sp, #32]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	dc36      	bgt.n	800f426 <_dtoa_r+0x99e>
 800f3b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	dd33      	ble.n	800f426 <_dtoa_r+0x99e>
 800f3be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3c2:	f1b9 0f00 	cmp.w	r9, #0
 800f3c6:	d10d      	bne.n	800f3e4 <_dtoa_r+0x95c>
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	464b      	mov	r3, r9
 800f3cc:	2205      	movs	r2, #5
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f000 fd4a 	bl	800fe68 <__multadd>
 800f3d4:	4601      	mov	r1, r0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4658      	mov	r0, fp
 800f3da:	f000 ffab 	bl	8010334 <__mcmp>
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	f73f adb8 	bgt.w	800ef54 <_dtoa_r+0x4cc>
 800f3e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3e6:	9f03      	ldr	r7, [sp, #12]
 800f3e8:	ea6f 0a03 	mvn.w	sl, r3
 800f3ec:	f04f 0800 	mov.w	r8, #0
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f000 fd16 	bl	800fe24 <_Bfree>
 800f3f8:	2e00      	cmp	r6, #0
 800f3fa:	f43f aea7 	beq.w	800f14c <_dtoa_r+0x6c4>
 800f3fe:	f1b8 0f00 	cmp.w	r8, #0
 800f402:	d005      	beq.n	800f410 <_dtoa_r+0x988>
 800f404:	45b0      	cmp	r8, r6
 800f406:	d003      	beq.n	800f410 <_dtoa_r+0x988>
 800f408:	4641      	mov	r1, r8
 800f40a:	4628      	mov	r0, r5
 800f40c:	f000 fd0a 	bl	800fe24 <_Bfree>
 800f410:	4631      	mov	r1, r6
 800f412:	4628      	mov	r0, r5
 800f414:	f000 fd06 	bl	800fe24 <_Bfree>
 800f418:	e698      	b.n	800f14c <_dtoa_r+0x6c4>
 800f41a:	2400      	movs	r4, #0
 800f41c:	4626      	mov	r6, r4
 800f41e:	e7e1      	b.n	800f3e4 <_dtoa_r+0x95c>
 800f420:	46c2      	mov	sl, r8
 800f422:	4626      	mov	r6, r4
 800f424:	e596      	b.n	800ef54 <_dtoa_r+0x4cc>
 800f426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f000 80fd 	beq.w	800f62c <_dtoa_r+0xba4>
 800f432:	2f00      	cmp	r7, #0
 800f434:	dd05      	ble.n	800f442 <_dtoa_r+0x9ba>
 800f436:	4631      	mov	r1, r6
 800f438:	463a      	mov	r2, r7
 800f43a:	4628      	mov	r0, r5
 800f43c:	f000 ff0a 	bl	8010254 <__lshift>
 800f440:	4606      	mov	r6, r0
 800f442:	f1b8 0f00 	cmp.w	r8, #0
 800f446:	d05c      	beq.n	800f502 <_dtoa_r+0xa7a>
 800f448:	4628      	mov	r0, r5
 800f44a:	6871      	ldr	r1, [r6, #4]
 800f44c:	f000 fcaa 	bl	800fda4 <_Balloc>
 800f450:	4607      	mov	r7, r0
 800f452:	b928      	cbnz	r0, 800f460 <_dtoa_r+0x9d8>
 800f454:	4602      	mov	r2, r0
 800f456:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f45a:	4b7f      	ldr	r3, [pc, #508]	; (800f658 <_dtoa_r+0xbd0>)
 800f45c:	f7ff bb28 	b.w	800eab0 <_dtoa_r+0x28>
 800f460:	6932      	ldr	r2, [r6, #16]
 800f462:	f106 010c 	add.w	r1, r6, #12
 800f466:	3202      	adds	r2, #2
 800f468:	0092      	lsls	r2, r2, #2
 800f46a:	300c      	adds	r0, #12
 800f46c:	f000 fc8c 	bl	800fd88 <memcpy>
 800f470:	2201      	movs	r2, #1
 800f472:	4639      	mov	r1, r7
 800f474:	4628      	mov	r0, r5
 800f476:	f000 feed 	bl	8010254 <__lshift>
 800f47a:	46b0      	mov	r8, r6
 800f47c:	4606      	mov	r6, r0
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	3301      	adds	r3, #1
 800f482:	9308      	str	r3, [sp, #32]
 800f484:	9b03      	ldr	r3, [sp, #12]
 800f486:	444b      	add	r3, r9
 800f488:	930a      	str	r3, [sp, #40]	; 0x28
 800f48a:	9b04      	ldr	r3, [sp, #16]
 800f48c:	f003 0301 	and.w	r3, r3, #1
 800f490:	9309      	str	r3, [sp, #36]	; 0x24
 800f492:	9b08      	ldr	r3, [sp, #32]
 800f494:	4621      	mov	r1, r4
 800f496:	3b01      	subs	r3, #1
 800f498:	4658      	mov	r0, fp
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	f7ff fa68 	bl	800e970 <quorem>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	4641      	mov	r1, r8
 800f4a4:	3330      	adds	r3, #48	; 0x30
 800f4a6:	9006      	str	r0, [sp, #24]
 800f4a8:	4658      	mov	r0, fp
 800f4aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4ac:	f000 ff42 	bl	8010334 <__mcmp>
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	4681      	mov	r9, r0
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 ff58 	bl	801036c <__mdiff>
 800f4bc:	68c2      	ldr	r2, [r0, #12]
 800f4be:	4607      	mov	r7, r0
 800f4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4c2:	bb02      	cbnz	r2, 800f506 <_dtoa_r+0xa7e>
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	4658      	mov	r0, fp
 800f4c8:	f000 ff34 	bl	8010334 <__mcmp>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f4d8:	f000 fca4 	bl	800fe24 <_Bfree>
 800f4dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f4de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4e0:	9f08      	ldr	r7, [sp, #32]
 800f4e2:	ea43 0102 	orr.w	r1, r3, r2
 800f4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e8:	430b      	orrs	r3, r1
 800f4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4ec:	d10d      	bne.n	800f50a <_dtoa_r+0xa82>
 800f4ee:	2b39      	cmp	r3, #57	; 0x39
 800f4f0:	d029      	beq.n	800f546 <_dtoa_r+0xabe>
 800f4f2:	f1b9 0f00 	cmp.w	r9, #0
 800f4f6:	dd01      	ble.n	800f4fc <_dtoa_r+0xa74>
 800f4f8:	9b06      	ldr	r3, [sp, #24]
 800f4fa:	3331      	adds	r3, #49	; 0x31
 800f4fc:	9a04      	ldr	r2, [sp, #16]
 800f4fe:	7013      	strb	r3, [r2, #0]
 800f500:	e776      	b.n	800f3f0 <_dtoa_r+0x968>
 800f502:	4630      	mov	r0, r6
 800f504:	e7b9      	b.n	800f47a <_dtoa_r+0x9f2>
 800f506:	2201      	movs	r2, #1
 800f508:	e7e2      	b.n	800f4d0 <_dtoa_r+0xa48>
 800f50a:	f1b9 0f00 	cmp.w	r9, #0
 800f50e:	db06      	blt.n	800f51e <_dtoa_r+0xa96>
 800f510:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f512:	ea41 0909 	orr.w	r9, r1, r9
 800f516:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f518:	ea59 0101 	orrs.w	r1, r9, r1
 800f51c:	d120      	bne.n	800f560 <_dtoa_r+0xad8>
 800f51e:	2a00      	cmp	r2, #0
 800f520:	ddec      	ble.n	800f4fc <_dtoa_r+0xa74>
 800f522:	4659      	mov	r1, fp
 800f524:	2201      	movs	r2, #1
 800f526:	4628      	mov	r0, r5
 800f528:	9308      	str	r3, [sp, #32]
 800f52a:	f000 fe93 	bl	8010254 <__lshift>
 800f52e:	4621      	mov	r1, r4
 800f530:	4683      	mov	fp, r0
 800f532:	f000 feff 	bl	8010334 <__mcmp>
 800f536:	2800      	cmp	r0, #0
 800f538:	9b08      	ldr	r3, [sp, #32]
 800f53a:	dc02      	bgt.n	800f542 <_dtoa_r+0xaba>
 800f53c:	d1de      	bne.n	800f4fc <_dtoa_r+0xa74>
 800f53e:	07da      	lsls	r2, r3, #31
 800f540:	d5dc      	bpl.n	800f4fc <_dtoa_r+0xa74>
 800f542:	2b39      	cmp	r3, #57	; 0x39
 800f544:	d1d8      	bne.n	800f4f8 <_dtoa_r+0xa70>
 800f546:	2339      	movs	r3, #57	; 0x39
 800f548:	9a04      	ldr	r2, [sp, #16]
 800f54a:	7013      	strb	r3, [r2, #0]
 800f54c:	463b      	mov	r3, r7
 800f54e:	461f      	mov	r7, r3
 800f550:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f554:	3b01      	subs	r3, #1
 800f556:	2a39      	cmp	r2, #57	; 0x39
 800f558:	d050      	beq.n	800f5fc <_dtoa_r+0xb74>
 800f55a:	3201      	adds	r2, #1
 800f55c:	701a      	strb	r2, [r3, #0]
 800f55e:	e747      	b.n	800f3f0 <_dtoa_r+0x968>
 800f560:	2a00      	cmp	r2, #0
 800f562:	dd03      	ble.n	800f56c <_dtoa_r+0xae4>
 800f564:	2b39      	cmp	r3, #57	; 0x39
 800f566:	d0ee      	beq.n	800f546 <_dtoa_r+0xabe>
 800f568:	3301      	adds	r3, #1
 800f56a:	e7c7      	b.n	800f4fc <_dtoa_r+0xa74>
 800f56c:	9a08      	ldr	r2, [sp, #32]
 800f56e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f570:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f574:	428a      	cmp	r2, r1
 800f576:	d02a      	beq.n	800f5ce <_dtoa_r+0xb46>
 800f578:	4659      	mov	r1, fp
 800f57a:	2300      	movs	r3, #0
 800f57c:	220a      	movs	r2, #10
 800f57e:	4628      	mov	r0, r5
 800f580:	f000 fc72 	bl	800fe68 <__multadd>
 800f584:	45b0      	cmp	r8, r6
 800f586:	4683      	mov	fp, r0
 800f588:	f04f 0300 	mov.w	r3, #0
 800f58c:	f04f 020a 	mov.w	r2, #10
 800f590:	4641      	mov	r1, r8
 800f592:	4628      	mov	r0, r5
 800f594:	d107      	bne.n	800f5a6 <_dtoa_r+0xb1e>
 800f596:	f000 fc67 	bl	800fe68 <__multadd>
 800f59a:	4680      	mov	r8, r0
 800f59c:	4606      	mov	r6, r0
 800f59e:	9b08      	ldr	r3, [sp, #32]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	9308      	str	r3, [sp, #32]
 800f5a4:	e775      	b.n	800f492 <_dtoa_r+0xa0a>
 800f5a6:	f000 fc5f 	bl	800fe68 <__multadd>
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	4680      	mov	r8, r0
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	220a      	movs	r2, #10
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f000 fc58 	bl	800fe68 <__multadd>
 800f5b8:	4606      	mov	r6, r0
 800f5ba:	e7f0      	b.n	800f59e <_dtoa_r+0xb16>
 800f5bc:	f1b9 0f00 	cmp.w	r9, #0
 800f5c0:	bfcc      	ite	gt
 800f5c2:	464f      	movgt	r7, r9
 800f5c4:	2701      	movle	r7, #1
 800f5c6:	f04f 0800 	mov.w	r8, #0
 800f5ca:	9a03      	ldr	r2, [sp, #12]
 800f5cc:	4417      	add	r7, r2
 800f5ce:	4659      	mov	r1, fp
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	9308      	str	r3, [sp, #32]
 800f5d6:	f000 fe3d 	bl	8010254 <__lshift>
 800f5da:	4621      	mov	r1, r4
 800f5dc:	4683      	mov	fp, r0
 800f5de:	f000 fea9 	bl	8010334 <__mcmp>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	dcb2      	bgt.n	800f54c <_dtoa_r+0xac4>
 800f5e6:	d102      	bne.n	800f5ee <_dtoa_r+0xb66>
 800f5e8:	9b08      	ldr	r3, [sp, #32]
 800f5ea:	07db      	lsls	r3, r3, #31
 800f5ec:	d4ae      	bmi.n	800f54c <_dtoa_r+0xac4>
 800f5ee:	463b      	mov	r3, r7
 800f5f0:	461f      	mov	r7, r3
 800f5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5f6:	2a30      	cmp	r2, #48	; 0x30
 800f5f8:	d0fa      	beq.n	800f5f0 <_dtoa_r+0xb68>
 800f5fa:	e6f9      	b.n	800f3f0 <_dtoa_r+0x968>
 800f5fc:	9a03      	ldr	r2, [sp, #12]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d1a5      	bne.n	800f54e <_dtoa_r+0xac6>
 800f602:	2331      	movs	r3, #49	; 0x31
 800f604:	f10a 0a01 	add.w	sl, sl, #1
 800f608:	e779      	b.n	800f4fe <_dtoa_r+0xa76>
 800f60a:	4b14      	ldr	r3, [pc, #80]	; (800f65c <_dtoa_r+0xbd4>)
 800f60c:	f7ff baa8 	b.w	800eb60 <_dtoa_r+0xd8>
 800f610:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f612:	2b00      	cmp	r3, #0
 800f614:	f47f aa81 	bne.w	800eb1a <_dtoa_r+0x92>
 800f618:	4b11      	ldr	r3, [pc, #68]	; (800f660 <_dtoa_r+0xbd8>)
 800f61a:	f7ff baa1 	b.w	800eb60 <_dtoa_r+0xd8>
 800f61e:	f1b9 0f00 	cmp.w	r9, #0
 800f622:	dc03      	bgt.n	800f62c <_dtoa_r+0xba4>
 800f624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f626:	2b02      	cmp	r3, #2
 800f628:	f73f aecb 	bgt.w	800f3c2 <_dtoa_r+0x93a>
 800f62c:	9f03      	ldr	r7, [sp, #12]
 800f62e:	4621      	mov	r1, r4
 800f630:	4658      	mov	r0, fp
 800f632:	f7ff f99d 	bl	800e970 <quorem>
 800f636:	9a03      	ldr	r2, [sp, #12]
 800f638:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f63c:	f807 3b01 	strb.w	r3, [r7], #1
 800f640:	1aba      	subs	r2, r7, r2
 800f642:	4591      	cmp	r9, r2
 800f644:	ddba      	ble.n	800f5bc <_dtoa_r+0xb34>
 800f646:	4659      	mov	r1, fp
 800f648:	2300      	movs	r3, #0
 800f64a:	220a      	movs	r2, #10
 800f64c:	4628      	mov	r0, r5
 800f64e:	f000 fc0b 	bl	800fe68 <__multadd>
 800f652:	4683      	mov	fp, r0
 800f654:	e7eb      	b.n	800f62e <_dtoa_r+0xba6>
 800f656:	bf00      	nop
 800f658:	08011c07 	.word	0x08011c07
 800f65c:	08011b14 	.word	0x08011b14
 800f660:	08011b88 	.word	0x08011b88

0800f664 <rshift>:
 800f664:	6903      	ldr	r3, [r0, #16]
 800f666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f66a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f66e:	f100 0414 	add.w	r4, r0, #20
 800f672:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f676:	dd46      	ble.n	800f706 <rshift+0xa2>
 800f678:	f011 011f 	ands.w	r1, r1, #31
 800f67c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f680:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f684:	d10c      	bne.n	800f6a0 <rshift+0x3c>
 800f686:	4629      	mov	r1, r5
 800f688:	f100 0710 	add.w	r7, r0, #16
 800f68c:	42b1      	cmp	r1, r6
 800f68e:	d335      	bcc.n	800f6fc <rshift+0x98>
 800f690:	1a9b      	subs	r3, r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	1eea      	subs	r2, r5, #3
 800f696:	4296      	cmp	r6, r2
 800f698:	bf38      	it	cc
 800f69a:	2300      	movcc	r3, #0
 800f69c:	4423      	add	r3, r4
 800f69e:	e015      	b.n	800f6cc <rshift+0x68>
 800f6a0:	46a1      	mov	r9, r4
 800f6a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f6a6:	f1c1 0820 	rsb	r8, r1, #32
 800f6aa:	40cf      	lsrs	r7, r1
 800f6ac:	f105 0e04 	add.w	lr, r5, #4
 800f6b0:	4576      	cmp	r6, lr
 800f6b2:	46f4      	mov	ip, lr
 800f6b4:	d816      	bhi.n	800f6e4 <rshift+0x80>
 800f6b6:	1a9a      	subs	r2, r3, r2
 800f6b8:	0092      	lsls	r2, r2, #2
 800f6ba:	3a04      	subs	r2, #4
 800f6bc:	3501      	adds	r5, #1
 800f6be:	42ae      	cmp	r6, r5
 800f6c0:	bf38      	it	cc
 800f6c2:	2200      	movcc	r2, #0
 800f6c4:	18a3      	adds	r3, r4, r2
 800f6c6:	50a7      	str	r7, [r4, r2]
 800f6c8:	b107      	cbz	r7, 800f6cc <rshift+0x68>
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	eba3 0204 	sub.w	r2, r3, r4
 800f6d2:	bf08      	it	eq
 800f6d4:	2300      	moveq	r3, #0
 800f6d6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f6da:	6102      	str	r2, [r0, #16]
 800f6dc:	bf08      	it	eq
 800f6de:	6143      	streq	r3, [r0, #20]
 800f6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6e4:	f8dc c000 	ldr.w	ip, [ip]
 800f6e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800f6ec:	ea4c 0707 	orr.w	r7, ip, r7
 800f6f0:	f849 7b04 	str.w	r7, [r9], #4
 800f6f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f6f8:	40cf      	lsrs	r7, r1
 800f6fa:	e7d9      	b.n	800f6b0 <rshift+0x4c>
 800f6fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800f700:	f847 cf04 	str.w	ip, [r7, #4]!
 800f704:	e7c2      	b.n	800f68c <rshift+0x28>
 800f706:	4623      	mov	r3, r4
 800f708:	e7e0      	b.n	800f6cc <rshift+0x68>

0800f70a <__hexdig_fun>:
 800f70a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f70e:	2b09      	cmp	r3, #9
 800f710:	d802      	bhi.n	800f718 <__hexdig_fun+0xe>
 800f712:	3820      	subs	r0, #32
 800f714:	b2c0      	uxtb	r0, r0
 800f716:	4770      	bx	lr
 800f718:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f71c:	2b05      	cmp	r3, #5
 800f71e:	d801      	bhi.n	800f724 <__hexdig_fun+0x1a>
 800f720:	3847      	subs	r0, #71	; 0x47
 800f722:	e7f7      	b.n	800f714 <__hexdig_fun+0xa>
 800f724:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f728:	2b05      	cmp	r3, #5
 800f72a:	d801      	bhi.n	800f730 <__hexdig_fun+0x26>
 800f72c:	3827      	subs	r0, #39	; 0x27
 800f72e:	e7f1      	b.n	800f714 <__hexdig_fun+0xa>
 800f730:	2000      	movs	r0, #0
 800f732:	4770      	bx	lr

0800f734 <__gethex>:
 800f734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	b08b      	sub	sp, #44	; 0x2c
 800f73a:	9305      	str	r3, [sp, #20]
 800f73c:	4bb2      	ldr	r3, [pc, #712]	; (800fa08 <__gethex+0x2d4>)
 800f73e:	9002      	str	r0, [sp, #8]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	468b      	mov	fp, r1
 800f744:	4618      	mov	r0, r3
 800f746:	4690      	mov	r8, r2
 800f748:	9303      	str	r3, [sp, #12]
 800f74a:	f7f0 fd19 	bl	8000180 <strlen>
 800f74e:	4682      	mov	sl, r0
 800f750:	9b03      	ldr	r3, [sp, #12]
 800f752:	f8db 2000 	ldr.w	r2, [fp]
 800f756:	4403      	add	r3, r0
 800f758:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f75c:	9306      	str	r3, [sp, #24]
 800f75e:	1c93      	adds	r3, r2, #2
 800f760:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f764:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f768:	32fe      	adds	r2, #254	; 0xfe
 800f76a:	18d1      	adds	r1, r2, r3
 800f76c:	461f      	mov	r7, r3
 800f76e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f772:	9101      	str	r1, [sp, #4]
 800f774:	2830      	cmp	r0, #48	; 0x30
 800f776:	d0f8      	beq.n	800f76a <__gethex+0x36>
 800f778:	f7ff ffc7 	bl	800f70a <__hexdig_fun>
 800f77c:	4604      	mov	r4, r0
 800f77e:	2800      	cmp	r0, #0
 800f780:	d13a      	bne.n	800f7f8 <__gethex+0xc4>
 800f782:	4652      	mov	r2, sl
 800f784:	4638      	mov	r0, r7
 800f786:	9903      	ldr	r1, [sp, #12]
 800f788:	f7fe fac6 	bl	800dd18 <strncmp>
 800f78c:	4605      	mov	r5, r0
 800f78e:	2800      	cmp	r0, #0
 800f790:	d166      	bne.n	800f860 <__gethex+0x12c>
 800f792:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f796:	eb07 060a 	add.w	r6, r7, sl
 800f79a:	f7ff ffb6 	bl	800f70a <__hexdig_fun>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d060      	beq.n	800f864 <__gethex+0x130>
 800f7a2:	4633      	mov	r3, r6
 800f7a4:	7818      	ldrb	r0, [r3, #0]
 800f7a6:	461f      	mov	r7, r3
 800f7a8:	2830      	cmp	r0, #48	; 0x30
 800f7aa:	f103 0301 	add.w	r3, r3, #1
 800f7ae:	d0f9      	beq.n	800f7a4 <__gethex+0x70>
 800f7b0:	f7ff ffab 	bl	800f70a <__hexdig_fun>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	fab0 f480 	clz	r4, r0
 800f7ba:	4635      	mov	r5, r6
 800f7bc:	0964      	lsrs	r4, r4, #5
 800f7be:	9301      	str	r3, [sp, #4]
 800f7c0:	463a      	mov	r2, r7
 800f7c2:	4616      	mov	r6, r2
 800f7c4:	7830      	ldrb	r0, [r6, #0]
 800f7c6:	3201      	adds	r2, #1
 800f7c8:	f7ff ff9f 	bl	800f70a <__hexdig_fun>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d1f8      	bne.n	800f7c2 <__gethex+0x8e>
 800f7d0:	4652      	mov	r2, sl
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	9903      	ldr	r1, [sp, #12]
 800f7d6:	f7fe fa9f 	bl	800dd18 <strncmp>
 800f7da:	b980      	cbnz	r0, 800f7fe <__gethex+0xca>
 800f7dc:	b94d      	cbnz	r5, 800f7f2 <__gethex+0xbe>
 800f7de:	eb06 050a 	add.w	r5, r6, sl
 800f7e2:	462a      	mov	r2, r5
 800f7e4:	4616      	mov	r6, r2
 800f7e6:	7830      	ldrb	r0, [r6, #0]
 800f7e8:	3201      	adds	r2, #1
 800f7ea:	f7ff ff8e 	bl	800f70a <__hexdig_fun>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d1f8      	bne.n	800f7e4 <__gethex+0xb0>
 800f7f2:	1bad      	subs	r5, r5, r6
 800f7f4:	00ad      	lsls	r5, r5, #2
 800f7f6:	e004      	b.n	800f802 <__gethex+0xce>
 800f7f8:	2400      	movs	r4, #0
 800f7fa:	4625      	mov	r5, r4
 800f7fc:	e7e0      	b.n	800f7c0 <__gethex+0x8c>
 800f7fe:	2d00      	cmp	r5, #0
 800f800:	d1f7      	bne.n	800f7f2 <__gethex+0xbe>
 800f802:	7833      	ldrb	r3, [r6, #0]
 800f804:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f808:	2b50      	cmp	r3, #80	; 0x50
 800f80a:	d139      	bne.n	800f880 <__gethex+0x14c>
 800f80c:	7873      	ldrb	r3, [r6, #1]
 800f80e:	2b2b      	cmp	r3, #43	; 0x2b
 800f810:	d02a      	beq.n	800f868 <__gethex+0x134>
 800f812:	2b2d      	cmp	r3, #45	; 0x2d
 800f814:	d02c      	beq.n	800f870 <__gethex+0x13c>
 800f816:	f04f 0900 	mov.w	r9, #0
 800f81a:	1c71      	adds	r1, r6, #1
 800f81c:	7808      	ldrb	r0, [r1, #0]
 800f81e:	f7ff ff74 	bl	800f70a <__hexdig_fun>
 800f822:	1e43      	subs	r3, r0, #1
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b18      	cmp	r3, #24
 800f828:	d82a      	bhi.n	800f880 <__gethex+0x14c>
 800f82a:	f1a0 0210 	sub.w	r2, r0, #16
 800f82e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f832:	f7ff ff6a 	bl	800f70a <__hexdig_fun>
 800f836:	1e43      	subs	r3, r0, #1
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b18      	cmp	r3, #24
 800f83c:	d91b      	bls.n	800f876 <__gethex+0x142>
 800f83e:	f1b9 0f00 	cmp.w	r9, #0
 800f842:	d000      	beq.n	800f846 <__gethex+0x112>
 800f844:	4252      	negs	r2, r2
 800f846:	4415      	add	r5, r2
 800f848:	f8cb 1000 	str.w	r1, [fp]
 800f84c:	b1d4      	cbz	r4, 800f884 <__gethex+0x150>
 800f84e:	9b01      	ldr	r3, [sp, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	bf14      	ite	ne
 800f854:	2700      	movne	r7, #0
 800f856:	2706      	moveq	r7, #6
 800f858:	4638      	mov	r0, r7
 800f85a:	b00b      	add	sp, #44	; 0x2c
 800f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f860:	463e      	mov	r6, r7
 800f862:	4625      	mov	r5, r4
 800f864:	2401      	movs	r4, #1
 800f866:	e7cc      	b.n	800f802 <__gethex+0xce>
 800f868:	f04f 0900 	mov.w	r9, #0
 800f86c:	1cb1      	adds	r1, r6, #2
 800f86e:	e7d5      	b.n	800f81c <__gethex+0xe8>
 800f870:	f04f 0901 	mov.w	r9, #1
 800f874:	e7fa      	b.n	800f86c <__gethex+0x138>
 800f876:	230a      	movs	r3, #10
 800f878:	fb03 0202 	mla	r2, r3, r2, r0
 800f87c:	3a10      	subs	r2, #16
 800f87e:	e7d6      	b.n	800f82e <__gethex+0xfa>
 800f880:	4631      	mov	r1, r6
 800f882:	e7e1      	b.n	800f848 <__gethex+0x114>
 800f884:	4621      	mov	r1, r4
 800f886:	1bf3      	subs	r3, r6, r7
 800f888:	3b01      	subs	r3, #1
 800f88a:	2b07      	cmp	r3, #7
 800f88c:	dc0a      	bgt.n	800f8a4 <__gethex+0x170>
 800f88e:	9802      	ldr	r0, [sp, #8]
 800f890:	f000 fa88 	bl	800fda4 <_Balloc>
 800f894:	4604      	mov	r4, r0
 800f896:	b940      	cbnz	r0, 800f8aa <__gethex+0x176>
 800f898:	4602      	mov	r2, r0
 800f89a:	21de      	movs	r1, #222	; 0xde
 800f89c:	4b5b      	ldr	r3, [pc, #364]	; (800fa0c <__gethex+0x2d8>)
 800f89e:	485c      	ldr	r0, [pc, #368]	; (800fa10 <__gethex+0x2dc>)
 800f8a0:	f001 f9a8 	bl	8010bf4 <__assert_func>
 800f8a4:	3101      	adds	r1, #1
 800f8a6:	105b      	asrs	r3, r3, #1
 800f8a8:	e7ef      	b.n	800f88a <__gethex+0x156>
 800f8aa:	f04f 0b00 	mov.w	fp, #0
 800f8ae:	f100 0914 	add.w	r9, r0, #20
 800f8b2:	f1ca 0301 	rsb	r3, sl, #1
 800f8b6:	f8cd 9010 	str.w	r9, [sp, #16]
 800f8ba:	f8cd b004 	str.w	fp, [sp, #4]
 800f8be:	9308      	str	r3, [sp, #32]
 800f8c0:	42b7      	cmp	r7, r6
 800f8c2:	d33f      	bcc.n	800f944 <__gethex+0x210>
 800f8c4:	9f04      	ldr	r7, [sp, #16]
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	f847 3b04 	str.w	r3, [r7], #4
 800f8cc:	eba7 0709 	sub.w	r7, r7, r9
 800f8d0:	10bf      	asrs	r7, r7, #2
 800f8d2:	6127      	str	r7, [r4, #16]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 fb57 	bl	800ff88 <__hi0bits>
 800f8da:	017f      	lsls	r7, r7, #5
 800f8dc:	f8d8 6000 	ldr.w	r6, [r8]
 800f8e0:	1a3f      	subs	r7, r7, r0
 800f8e2:	42b7      	cmp	r7, r6
 800f8e4:	dd62      	ble.n	800f9ac <__gethex+0x278>
 800f8e6:	1bbf      	subs	r7, r7, r6
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 fef1 	bl	80106d2 <__any_on>
 800f8f0:	4682      	mov	sl, r0
 800f8f2:	b1a8      	cbz	r0, 800f920 <__gethex+0x1ec>
 800f8f4:	f04f 0a01 	mov.w	sl, #1
 800f8f8:	1e7b      	subs	r3, r7, #1
 800f8fa:	1159      	asrs	r1, r3, #5
 800f8fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f900:	f003 021f 	and.w	r2, r3, #31
 800f904:	fa0a f202 	lsl.w	r2, sl, r2
 800f908:	420a      	tst	r2, r1
 800f90a:	d009      	beq.n	800f920 <__gethex+0x1ec>
 800f90c:	4553      	cmp	r3, sl
 800f90e:	dd05      	ble.n	800f91c <__gethex+0x1e8>
 800f910:	4620      	mov	r0, r4
 800f912:	1eb9      	subs	r1, r7, #2
 800f914:	f000 fedd 	bl	80106d2 <__any_on>
 800f918:	2800      	cmp	r0, #0
 800f91a:	d144      	bne.n	800f9a6 <__gethex+0x272>
 800f91c:	f04f 0a02 	mov.w	sl, #2
 800f920:	4639      	mov	r1, r7
 800f922:	4620      	mov	r0, r4
 800f924:	f7ff fe9e 	bl	800f664 <rshift>
 800f928:	443d      	add	r5, r7
 800f92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f92e:	42ab      	cmp	r3, r5
 800f930:	da4a      	bge.n	800f9c8 <__gethex+0x294>
 800f932:	4621      	mov	r1, r4
 800f934:	9802      	ldr	r0, [sp, #8]
 800f936:	f000 fa75 	bl	800fe24 <_Bfree>
 800f93a:	2300      	movs	r3, #0
 800f93c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f93e:	27a3      	movs	r7, #163	; 0xa3
 800f940:	6013      	str	r3, [r2, #0]
 800f942:	e789      	b.n	800f858 <__gethex+0x124>
 800f944:	1e73      	subs	r3, r6, #1
 800f946:	9a06      	ldr	r2, [sp, #24]
 800f948:	9307      	str	r3, [sp, #28]
 800f94a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f94e:	4293      	cmp	r3, r2
 800f950:	d019      	beq.n	800f986 <__gethex+0x252>
 800f952:	f1bb 0f20 	cmp.w	fp, #32
 800f956:	d107      	bne.n	800f968 <__gethex+0x234>
 800f958:	9b04      	ldr	r3, [sp, #16]
 800f95a:	9a01      	ldr	r2, [sp, #4]
 800f95c:	f843 2b04 	str.w	r2, [r3], #4
 800f960:	9304      	str	r3, [sp, #16]
 800f962:	2300      	movs	r3, #0
 800f964:	469b      	mov	fp, r3
 800f966:	9301      	str	r3, [sp, #4]
 800f968:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f96c:	f7ff fecd 	bl	800f70a <__hexdig_fun>
 800f970:	9b01      	ldr	r3, [sp, #4]
 800f972:	f000 000f 	and.w	r0, r0, #15
 800f976:	fa00 f00b 	lsl.w	r0, r0, fp
 800f97a:	4303      	orrs	r3, r0
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	f10b 0b04 	add.w	fp, fp, #4
 800f982:	9b07      	ldr	r3, [sp, #28]
 800f984:	e00d      	b.n	800f9a2 <__gethex+0x26e>
 800f986:	9a08      	ldr	r2, [sp, #32]
 800f988:	1e73      	subs	r3, r6, #1
 800f98a:	4413      	add	r3, r2
 800f98c:	42bb      	cmp	r3, r7
 800f98e:	d3e0      	bcc.n	800f952 <__gethex+0x21e>
 800f990:	4618      	mov	r0, r3
 800f992:	4652      	mov	r2, sl
 800f994:	9903      	ldr	r1, [sp, #12]
 800f996:	9309      	str	r3, [sp, #36]	; 0x24
 800f998:	f7fe f9be 	bl	800dd18 <strncmp>
 800f99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d1d7      	bne.n	800f952 <__gethex+0x21e>
 800f9a2:	461e      	mov	r6, r3
 800f9a4:	e78c      	b.n	800f8c0 <__gethex+0x18c>
 800f9a6:	f04f 0a03 	mov.w	sl, #3
 800f9aa:	e7b9      	b.n	800f920 <__gethex+0x1ec>
 800f9ac:	da09      	bge.n	800f9c2 <__gethex+0x28e>
 800f9ae:	1bf7      	subs	r7, r6, r7
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	463a      	mov	r2, r7
 800f9b4:	9802      	ldr	r0, [sp, #8]
 800f9b6:	f000 fc4d 	bl	8010254 <__lshift>
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	1bed      	subs	r5, r5, r7
 800f9be:	f100 0914 	add.w	r9, r0, #20
 800f9c2:	f04f 0a00 	mov.w	sl, #0
 800f9c6:	e7b0      	b.n	800f92a <__gethex+0x1f6>
 800f9c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f9cc:	42a8      	cmp	r0, r5
 800f9ce:	dd72      	ble.n	800fab6 <__gethex+0x382>
 800f9d0:	1b45      	subs	r5, r0, r5
 800f9d2:	42ae      	cmp	r6, r5
 800f9d4:	dc35      	bgt.n	800fa42 <__gethex+0x30e>
 800f9d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f9da:	2b02      	cmp	r3, #2
 800f9dc:	d029      	beq.n	800fa32 <__gethex+0x2fe>
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	d02b      	beq.n	800fa3a <__gethex+0x306>
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d11c      	bne.n	800fa20 <__gethex+0x2ec>
 800f9e6:	42ae      	cmp	r6, r5
 800f9e8:	d11a      	bne.n	800fa20 <__gethex+0x2ec>
 800f9ea:	2e01      	cmp	r6, #1
 800f9ec:	d112      	bne.n	800fa14 <__gethex+0x2e0>
 800f9ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f9f2:	9a05      	ldr	r2, [sp, #20]
 800f9f4:	2762      	movs	r7, #98	; 0x62
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	6123      	str	r3, [r4, #16]
 800f9fc:	f8c9 3000 	str.w	r3, [r9]
 800fa00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa02:	601c      	str	r4, [r3, #0]
 800fa04:	e728      	b.n	800f858 <__gethex+0x124>
 800fa06:	bf00      	nop
 800fa08:	08011c80 	.word	0x08011c80
 800fa0c:	08011c07 	.word	0x08011c07
 800fa10:	08011c18 	.word	0x08011c18
 800fa14:	4620      	mov	r0, r4
 800fa16:	1e71      	subs	r1, r6, #1
 800fa18:	f000 fe5b 	bl	80106d2 <__any_on>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d1e6      	bne.n	800f9ee <__gethex+0x2ba>
 800fa20:	4621      	mov	r1, r4
 800fa22:	9802      	ldr	r0, [sp, #8]
 800fa24:	f000 f9fe 	bl	800fe24 <_Bfree>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa2c:	2750      	movs	r7, #80	; 0x50
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	e712      	b.n	800f858 <__gethex+0x124>
 800fa32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d1f3      	bne.n	800fa20 <__gethex+0x2ec>
 800fa38:	e7d9      	b.n	800f9ee <__gethex+0x2ba>
 800fa3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1d6      	bne.n	800f9ee <__gethex+0x2ba>
 800fa40:	e7ee      	b.n	800fa20 <__gethex+0x2ec>
 800fa42:	1e6f      	subs	r7, r5, #1
 800fa44:	f1ba 0f00 	cmp.w	sl, #0
 800fa48:	d132      	bne.n	800fab0 <__gethex+0x37c>
 800fa4a:	b127      	cbz	r7, 800fa56 <__gethex+0x322>
 800fa4c:	4639      	mov	r1, r7
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f000 fe3f 	bl	80106d2 <__any_on>
 800fa54:	4682      	mov	sl, r0
 800fa56:	2101      	movs	r1, #1
 800fa58:	117b      	asrs	r3, r7, #5
 800fa5a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fa5e:	f007 071f 	and.w	r7, r7, #31
 800fa62:	fa01 f707 	lsl.w	r7, r1, r7
 800fa66:	421f      	tst	r7, r3
 800fa68:	f04f 0702 	mov.w	r7, #2
 800fa6c:	4629      	mov	r1, r5
 800fa6e:	4620      	mov	r0, r4
 800fa70:	bf18      	it	ne
 800fa72:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa76:	1b76      	subs	r6, r6, r5
 800fa78:	f7ff fdf4 	bl	800f664 <rshift>
 800fa7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fa80:	f1ba 0f00 	cmp.w	sl, #0
 800fa84:	d048      	beq.n	800fb18 <__gethex+0x3e4>
 800fa86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d015      	beq.n	800faba <__gethex+0x386>
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d017      	beq.n	800fac2 <__gethex+0x38e>
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d109      	bne.n	800faaa <__gethex+0x376>
 800fa96:	f01a 0f02 	tst.w	sl, #2
 800fa9a:	d006      	beq.n	800faaa <__gethex+0x376>
 800fa9c:	f8d9 0000 	ldr.w	r0, [r9]
 800faa0:	ea4a 0a00 	orr.w	sl, sl, r0
 800faa4:	f01a 0f01 	tst.w	sl, #1
 800faa8:	d10e      	bne.n	800fac8 <__gethex+0x394>
 800faaa:	f047 0710 	orr.w	r7, r7, #16
 800faae:	e033      	b.n	800fb18 <__gethex+0x3e4>
 800fab0:	f04f 0a01 	mov.w	sl, #1
 800fab4:	e7cf      	b.n	800fa56 <__gethex+0x322>
 800fab6:	2701      	movs	r7, #1
 800fab8:	e7e2      	b.n	800fa80 <__gethex+0x34c>
 800faba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fabc:	f1c3 0301 	rsb	r3, r3, #1
 800fac0:	9315      	str	r3, [sp, #84]	; 0x54
 800fac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d0f0      	beq.n	800faaa <__gethex+0x376>
 800fac8:	f04f 0c00 	mov.w	ip, #0
 800facc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fad0:	f104 0314 	add.w	r3, r4, #20
 800fad4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fad8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fadc:	4618      	mov	r0, r3
 800fade:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fae6:	d01c      	beq.n	800fb22 <__gethex+0x3ee>
 800fae8:	3201      	adds	r2, #1
 800faea:	6002      	str	r2, [r0, #0]
 800faec:	2f02      	cmp	r7, #2
 800faee:	f104 0314 	add.w	r3, r4, #20
 800faf2:	d13d      	bne.n	800fb70 <__gethex+0x43c>
 800faf4:	f8d8 2000 	ldr.w	r2, [r8]
 800faf8:	3a01      	subs	r2, #1
 800fafa:	42b2      	cmp	r2, r6
 800fafc:	d10a      	bne.n	800fb14 <__gethex+0x3e0>
 800fafe:	2201      	movs	r2, #1
 800fb00:	1171      	asrs	r1, r6, #5
 800fb02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb06:	f006 061f 	and.w	r6, r6, #31
 800fb0a:	fa02 f606 	lsl.w	r6, r2, r6
 800fb0e:	421e      	tst	r6, r3
 800fb10:	bf18      	it	ne
 800fb12:	4617      	movne	r7, r2
 800fb14:	f047 0720 	orr.w	r7, r7, #32
 800fb18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb1a:	601c      	str	r4, [r3, #0]
 800fb1c:	9b05      	ldr	r3, [sp, #20]
 800fb1e:	601d      	str	r5, [r3, #0]
 800fb20:	e69a      	b.n	800f858 <__gethex+0x124>
 800fb22:	4299      	cmp	r1, r3
 800fb24:	f843 cc04 	str.w	ip, [r3, #-4]
 800fb28:	d8d8      	bhi.n	800fadc <__gethex+0x3a8>
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	459b      	cmp	fp, r3
 800fb2e:	db17      	blt.n	800fb60 <__gethex+0x42c>
 800fb30:	6861      	ldr	r1, [r4, #4]
 800fb32:	9802      	ldr	r0, [sp, #8]
 800fb34:	3101      	adds	r1, #1
 800fb36:	f000 f935 	bl	800fda4 <_Balloc>
 800fb3a:	4681      	mov	r9, r0
 800fb3c:	b918      	cbnz	r0, 800fb46 <__gethex+0x412>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	2184      	movs	r1, #132	; 0x84
 800fb42:	4b19      	ldr	r3, [pc, #100]	; (800fba8 <__gethex+0x474>)
 800fb44:	e6ab      	b.n	800f89e <__gethex+0x16a>
 800fb46:	6922      	ldr	r2, [r4, #16]
 800fb48:	f104 010c 	add.w	r1, r4, #12
 800fb4c:	3202      	adds	r2, #2
 800fb4e:	0092      	lsls	r2, r2, #2
 800fb50:	300c      	adds	r0, #12
 800fb52:	f000 f919 	bl	800fd88 <memcpy>
 800fb56:	4621      	mov	r1, r4
 800fb58:	9802      	ldr	r0, [sp, #8]
 800fb5a:	f000 f963 	bl	800fe24 <_Bfree>
 800fb5e:	464c      	mov	r4, r9
 800fb60:	6923      	ldr	r3, [r4, #16]
 800fb62:	1c5a      	adds	r2, r3, #1
 800fb64:	6122      	str	r2, [r4, #16]
 800fb66:	2201      	movs	r2, #1
 800fb68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb6c:	615a      	str	r2, [r3, #20]
 800fb6e:	e7bd      	b.n	800faec <__gethex+0x3b8>
 800fb70:	6922      	ldr	r2, [r4, #16]
 800fb72:	455a      	cmp	r2, fp
 800fb74:	dd0b      	ble.n	800fb8e <__gethex+0x45a>
 800fb76:	2101      	movs	r1, #1
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f7ff fd73 	bl	800f664 <rshift>
 800fb7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb82:	3501      	adds	r5, #1
 800fb84:	42ab      	cmp	r3, r5
 800fb86:	f6ff aed4 	blt.w	800f932 <__gethex+0x1fe>
 800fb8a:	2701      	movs	r7, #1
 800fb8c:	e7c2      	b.n	800fb14 <__gethex+0x3e0>
 800fb8e:	f016 061f 	ands.w	r6, r6, #31
 800fb92:	d0fa      	beq.n	800fb8a <__gethex+0x456>
 800fb94:	4453      	add	r3, sl
 800fb96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fb9a:	f000 f9f5 	bl	800ff88 <__hi0bits>
 800fb9e:	f1c6 0620 	rsb	r6, r6, #32
 800fba2:	42b0      	cmp	r0, r6
 800fba4:	dbe7      	blt.n	800fb76 <__gethex+0x442>
 800fba6:	e7f0      	b.n	800fb8a <__gethex+0x456>
 800fba8:	08011c07 	.word	0x08011c07

0800fbac <L_shift>:
 800fbac:	f1c2 0208 	rsb	r2, r2, #8
 800fbb0:	0092      	lsls	r2, r2, #2
 800fbb2:	b570      	push	{r4, r5, r6, lr}
 800fbb4:	f1c2 0620 	rsb	r6, r2, #32
 800fbb8:	6843      	ldr	r3, [r0, #4]
 800fbba:	6804      	ldr	r4, [r0, #0]
 800fbbc:	fa03 f506 	lsl.w	r5, r3, r6
 800fbc0:	432c      	orrs	r4, r5
 800fbc2:	40d3      	lsrs	r3, r2
 800fbc4:	6004      	str	r4, [r0, #0]
 800fbc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fbca:	4288      	cmp	r0, r1
 800fbcc:	d3f4      	bcc.n	800fbb8 <L_shift+0xc>
 800fbce:	bd70      	pop	{r4, r5, r6, pc}

0800fbd0 <__match>:
 800fbd0:	b530      	push	{r4, r5, lr}
 800fbd2:	6803      	ldr	r3, [r0, #0]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbda:	b914      	cbnz	r4, 800fbe2 <__match+0x12>
 800fbdc:	6003      	str	r3, [r0, #0]
 800fbde:	2001      	movs	r0, #1
 800fbe0:	bd30      	pop	{r4, r5, pc}
 800fbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fbea:	2d19      	cmp	r5, #25
 800fbec:	bf98      	it	ls
 800fbee:	3220      	addls	r2, #32
 800fbf0:	42a2      	cmp	r2, r4
 800fbf2:	d0f0      	beq.n	800fbd6 <__match+0x6>
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	e7f3      	b.n	800fbe0 <__match+0x10>

0800fbf8 <__hexnan>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	2500      	movs	r5, #0
 800fbfe:	680b      	ldr	r3, [r1, #0]
 800fc00:	4682      	mov	sl, r0
 800fc02:	115e      	asrs	r6, r3, #5
 800fc04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fc08:	f013 031f 	ands.w	r3, r3, #31
 800fc0c:	bf18      	it	ne
 800fc0e:	3604      	addne	r6, #4
 800fc10:	1f37      	subs	r7, r6, #4
 800fc12:	46b9      	mov	r9, r7
 800fc14:	463c      	mov	r4, r7
 800fc16:	46ab      	mov	fp, r5
 800fc18:	b087      	sub	sp, #28
 800fc1a:	4690      	mov	r8, r2
 800fc1c:	6802      	ldr	r2, [r0, #0]
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	f846 5c04 	str.w	r5, [r6, #-4]
 800fc24:	9502      	str	r5, [sp, #8]
 800fc26:	7851      	ldrb	r1, [r2, #1]
 800fc28:	1c53      	adds	r3, r2, #1
 800fc2a:	9303      	str	r3, [sp, #12]
 800fc2c:	b341      	cbz	r1, 800fc80 <__hexnan+0x88>
 800fc2e:	4608      	mov	r0, r1
 800fc30:	9205      	str	r2, [sp, #20]
 800fc32:	9104      	str	r1, [sp, #16]
 800fc34:	f7ff fd69 	bl	800f70a <__hexdig_fun>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d14f      	bne.n	800fcdc <__hexnan+0xe4>
 800fc3c:	9904      	ldr	r1, [sp, #16]
 800fc3e:	9a05      	ldr	r2, [sp, #20]
 800fc40:	2920      	cmp	r1, #32
 800fc42:	d818      	bhi.n	800fc76 <__hexnan+0x7e>
 800fc44:	9b02      	ldr	r3, [sp, #8]
 800fc46:	459b      	cmp	fp, r3
 800fc48:	dd13      	ble.n	800fc72 <__hexnan+0x7a>
 800fc4a:	454c      	cmp	r4, r9
 800fc4c:	d206      	bcs.n	800fc5c <__hexnan+0x64>
 800fc4e:	2d07      	cmp	r5, #7
 800fc50:	dc04      	bgt.n	800fc5c <__hexnan+0x64>
 800fc52:	462a      	mov	r2, r5
 800fc54:	4649      	mov	r1, r9
 800fc56:	4620      	mov	r0, r4
 800fc58:	f7ff ffa8 	bl	800fbac <L_shift>
 800fc5c:	4544      	cmp	r4, r8
 800fc5e:	d950      	bls.n	800fd02 <__hexnan+0x10a>
 800fc60:	2300      	movs	r3, #0
 800fc62:	f1a4 0904 	sub.w	r9, r4, #4
 800fc66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc6a:	461d      	mov	r5, r3
 800fc6c:	464c      	mov	r4, r9
 800fc6e:	f8cd b008 	str.w	fp, [sp, #8]
 800fc72:	9a03      	ldr	r2, [sp, #12]
 800fc74:	e7d7      	b.n	800fc26 <__hexnan+0x2e>
 800fc76:	2929      	cmp	r1, #41	; 0x29
 800fc78:	d156      	bne.n	800fd28 <__hexnan+0x130>
 800fc7a:	3202      	adds	r2, #2
 800fc7c:	f8ca 2000 	str.w	r2, [sl]
 800fc80:	f1bb 0f00 	cmp.w	fp, #0
 800fc84:	d050      	beq.n	800fd28 <__hexnan+0x130>
 800fc86:	454c      	cmp	r4, r9
 800fc88:	d206      	bcs.n	800fc98 <__hexnan+0xa0>
 800fc8a:	2d07      	cmp	r5, #7
 800fc8c:	dc04      	bgt.n	800fc98 <__hexnan+0xa0>
 800fc8e:	462a      	mov	r2, r5
 800fc90:	4649      	mov	r1, r9
 800fc92:	4620      	mov	r0, r4
 800fc94:	f7ff ff8a 	bl	800fbac <L_shift>
 800fc98:	4544      	cmp	r4, r8
 800fc9a:	d934      	bls.n	800fd06 <__hexnan+0x10e>
 800fc9c:	4623      	mov	r3, r4
 800fc9e:	f1a8 0204 	sub.w	r2, r8, #4
 800fca2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fca6:	429f      	cmp	r7, r3
 800fca8:	f842 1f04 	str.w	r1, [r2, #4]!
 800fcac:	d2f9      	bcs.n	800fca2 <__hexnan+0xaa>
 800fcae:	1b3b      	subs	r3, r7, r4
 800fcb0:	f023 0303 	bic.w	r3, r3, #3
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	3401      	adds	r4, #1
 800fcb8:	3e03      	subs	r6, #3
 800fcba:	42b4      	cmp	r4, r6
 800fcbc:	bf88      	it	hi
 800fcbe:	2304      	movhi	r3, #4
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	4443      	add	r3, r8
 800fcc4:	f843 2b04 	str.w	r2, [r3], #4
 800fcc8:	429f      	cmp	r7, r3
 800fcca:	d2fb      	bcs.n	800fcc4 <__hexnan+0xcc>
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	b91b      	cbnz	r3, 800fcd8 <__hexnan+0xe0>
 800fcd0:	4547      	cmp	r7, r8
 800fcd2:	d127      	bne.n	800fd24 <__hexnan+0x12c>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	603b      	str	r3, [r7, #0]
 800fcd8:	2005      	movs	r0, #5
 800fcda:	e026      	b.n	800fd2a <__hexnan+0x132>
 800fcdc:	3501      	adds	r5, #1
 800fcde:	2d08      	cmp	r5, #8
 800fce0:	f10b 0b01 	add.w	fp, fp, #1
 800fce4:	dd06      	ble.n	800fcf4 <__hexnan+0xfc>
 800fce6:	4544      	cmp	r4, r8
 800fce8:	d9c3      	bls.n	800fc72 <__hexnan+0x7a>
 800fcea:	2300      	movs	r3, #0
 800fcec:	2501      	movs	r5, #1
 800fcee:	f844 3c04 	str.w	r3, [r4, #-4]
 800fcf2:	3c04      	subs	r4, #4
 800fcf4:	6822      	ldr	r2, [r4, #0]
 800fcf6:	f000 000f 	and.w	r0, r0, #15
 800fcfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fcfe:	6022      	str	r2, [r4, #0]
 800fd00:	e7b7      	b.n	800fc72 <__hexnan+0x7a>
 800fd02:	2508      	movs	r5, #8
 800fd04:	e7b5      	b.n	800fc72 <__hexnan+0x7a>
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d0df      	beq.n	800fccc <__hexnan+0xd4>
 800fd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd10:	f1c3 0320 	rsb	r3, r3, #32
 800fd14:	fa22 f303 	lsr.w	r3, r2, r3
 800fd18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fd1c:	401a      	ands	r2, r3
 800fd1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800fd22:	e7d3      	b.n	800fccc <__hexnan+0xd4>
 800fd24:	3f04      	subs	r7, #4
 800fd26:	e7d1      	b.n	800fccc <__hexnan+0xd4>
 800fd28:	2004      	movs	r0, #4
 800fd2a:	b007      	add	sp, #28
 800fd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd30 <_localeconv_r>:
 800fd30:	4800      	ldr	r0, [pc, #0]	; (800fd34 <_localeconv_r+0x4>)
 800fd32:	4770      	bx	lr
 800fd34:	200002f8 	.word	0x200002f8

0800fd38 <malloc>:
 800fd38:	4b02      	ldr	r3, [pc, #8]	; (800fd44 <malloc+0xc>)
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	6818      	ldr	r0, [r3, #0]
 800fd3e:	f000 bd65 	b.w	801080c <_malloc_r>
 800fd42:	bf00      	nop
 800fd44:	200001a0 	.word	0x200001a0

0800fd48 <__ascii_mbtowc>:
 800fd48:	b082      	sub	sp, #8
 800fd4a:	b901      	cbnz	r1, 800fd4e <__ascii_mbtowc+0x6>
 800fd4c:	a901      	add	r1, sp, #4
 800fd4e:	b142      	cbz	r2, 800fd62 <__ascii_mbtowc+0x1a>
 800fd50:	b14b      	cbz	r3, 800fd66 <__ascii_mbtowc+0x1e>
 800fd52:	7813      	ldrb	r3, [r2, #0]
 800fd54:	600b      	str	r3, [r1, #0]
 800fd56:	7812      	ldrb	r2, [r2, #0]
 800fd58:	1e10      	subs	r0, r2, #0
 800fd5a:	bf18      	it	ne
 800fd5c:	2001      	movne	r0, #1
 800fd5e:	b002      	add	sp, #8
 800fd60:	4770      	bx	lr
 800fd62:	4610      	mov	r0, r2
 800fd64:	e7fb      	b.n	800fd5e <__ascii_mbtowc+0x16>
 800fd66:	f06f 0001 	mvn.w	r0, #1
 800fd6a:	e7f8      	b.n	800fd5e <__ascii_mbtowc+0x16>

0800fd6c <memchr>:
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b510      	push	{r4, lr}
 800fd70:	b2c9      	uxtb	r1, r1
 800fd72:	4402      	add	r2, r0
 800fd74:	4293      	cmp	r3, r2
 800fd76:	4618      	mov	r0, r3
 800fd78:	d101      	bne.n	800fd7e <memchr+0x12>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	e003      	b.n	800fd86 <memchr+0x1a>
 800fd7e:	7804      	ldrb	r4, [r0, #0]
 800fd80:	3301      	adds	r3, #1
 800fd82:	428c      	cmp	r4, r1
 800fd84:	d1f6      	bne.n	800fd74 <memchr+0x8>
 800fd86:	bd10      	pop	{r4, pc}

0800fd88 <memcpy>:
 800fd88:	440a      	add	r2, r1
 800fd8a:	4291      	cmp	r1, r2
 800fd8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd90:	d100      	bne.n	800fd94 <memcpy+0xc>
 800fd92:	4770      	bx	lr
 800fd94:	b510      	push	{r4, lr}
 800fd96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd9a:	4291      	cmp	r1, r2
 800fd9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fda0:	d1f9      	bne.n	800fd96 <memcpy+0xe>
 800fda2:	bd10      	pop	{r4, pc}

0800fda4 <_Balloc>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fda8:	4604      	mov	r4, r0
 800fdaa:	460d      	mov	r5, r1
 800fdac:	b976      	cbnz	r6, 800fdcc <_Balloc+0x28>
 800fdae:	2010      	movs	r0, #16
 800fdb0:	f7ff ffc2 	bl	800fd38 <malloc>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	6260      	str	r0, [r4, #36]	; 0x24
 800fdb8:	b920      	cbnz	r0, 800fdc4 <_Balloc+0x20>
 800fdba:	2166      	movs	r1, #102	; 0x66
 800fdbc:	4b17      	ldr	r3, [pc, #92]	; (800fe1c <_Balloc+0x78>)
 800fdbe:	4818      	ldr	r0, [pc, #96]	; (800fe20 <_Balloc+0x7c>)
 800fdc0:	f000 ff18 	bl	8010bf4 <__assert_func>
 800fdc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdc8:	6006      	str	r6, [r0, #0]
 800fdca:	60c6      	str	r6, [r0, #12]
 800fdcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fdce:	68f3      	ldr	r3, [r6, #12]
 800fdd0:	b183      	cbz	r3, 800fdf4 <_Balloc+0x50>
 800fdd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdda:	b9b8      	cbnz	r0, 800fe0c <_Balloc+0x68>
 800fddc:	2101      	movs	r1, #1
 800fdde:	fa01 f605 	lsl.w	r6, r1, r5
 800fde2:	1d72      	adds	r2, r6, #5
 800fde4:	4620      	mov	r0, r4
 800fde6:	0092      	lsls	r2, r2, #2
 800fde8:	f000 fc94 	bl	8010714 <_calloc_r>
 800fdec:	b160      	cbz	r0, 800fe08 <_Balloc+0x64>
 800fdee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fdf2:	e00e      	b.n	800fe12 <_Balloc+0x6e>
 800fdf4:	2221      	movs	r2, #33	; 0x21
 800fdf6:	2104      	movs	r1, #4
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 fc8b 	bl	8010714 <_calloc_r>
 800fdfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe00:	60f0      	str	r0, [r6, #12]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1e4      	bne.n	800fdd2 <_Balloc+0x2e>
 800fe08:	2000      	movs	r0, #0
 800fe0a:	bd70      	pop	{r4, r5, r6, pc}
 800fe0c:	6802      	ldr	r2, [r0, #0]
 800fe0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe12:	2300      	movs	r3, #0
 800fe14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe18:	e7f7      	b.n	800fe0a <_Balloc+0x66>
 800fe1a:	bf00      	nop
 800fe1c:	08011b95 	.word	0x08011b95
 800fe20:	08011c94 	.word	0x08011c94

0800fe24 <_Bfree>:
 800fe24:	b570      	push	{r4, r5, r6, lr}
 800fe26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe28:	4605      	mov	r5, r0
 800fe2a:	460c      	mov	r4, r1
 800fe2c:	b976      	cbnz	r6, 800fe4c <_Bfree+0x28>
 800fe2e:	2010      	movs	r0, #16
 800fe30:	f7ff ff82 	bl	800fd38 <malloc>
 800fe34:	4602      	mov	r2, r0
 800fe36:	6268      	str	r0, [r5, #36]	; 0x24
 800fe38:	b920      	cbnz	r0, 800fe44 <_Bfree+0x20>
 800fe3a:	218a      	movs	r1, #138	; 0x8a
 800fe3c:	4b08      	ldr	r3, [pc, #32]	; (800fe60 <_Bfree+0x3c>)
 800fe3e:	4809      	ldr	r0, [pc, #36]	; (800fe64 <_Bfree+0x40>)
 800fe40:	f000 fed8 	bl	8010bf4 <__assert_func>
 800fe44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe48:	6006      	str	r6, [r0, #0]
 800fe4a:	60c6      	str	r6, [r0, #12]
 800fe4c:	b13c      	cbz	r4, 800fe5e <_Bfree+0x3a>
 800fe4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe50:	6862      	ldr	r2, [r4, #4]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe58:	6021      	str	r1, [r4, #0]
 800fe5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
 800fe60:	08011b95 	.word	0x08011b95
 800fe64:	08011c94 	.word	0x08011c94

0800fe68 <__multadd>:
 800fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6c:	4607      	mov	r7, r0
 800fe6e:	460c      	mov	r4, r1
 800fe70:	461e      	mov	r6, r3
 800fe72:	2000      	movs	r0, #0
 800fe74:	690d      	ldr	r5, [r1, #16]
 800fe76:	f101 0c14 	add.w	ip, r1, #20
 800fe7a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe7e:	3001      	adds	r0, #1
 800fe80:	b299      	uxth	r1, r3
 800fe82:	fb02 6101 	mla	r1, r2, r1, r6
 800fe86:	0c1e      	lsrs	r6, r3, #16
 800fe88:	0c0b      	lsrs	r3, r1, #16
 800fe8a:	fb02 3306 	mla	r3, r2, r6, r3
 800fe8e:	b289      	uxth	r1, r1
 800fe90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe94:	4285      	cmp	r5, r0
 800fe96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe9a:	f84c 1b04 	str.w	r1, [ip], #4
 800fe9e:	dcec      	bgt.n	800fe7a <__multadd+0x12>
 800fea0:	b30e      	cbz	r6, 800fee6 <__multadd+0x7e>
 800fea2:	68a3      	ldr	r3, [r4, #8]
 800fea4:	42ab      	cmp	r3, r5
 800fea6:	dc19      	bgt.n	800fedc <__multadd+0x74>
 800fea8:	6861      	ldr	r1, [r4, #4]
 800feaa:	4638      	mov	r0, r7
 800feac:	3101      	adds	r1, #1
 800feae:	f7ff ff79 	bl	800fda4 <_Balloc>
 800feb2:	4680      	mov	r8, r0
 800feb4:	b928      	cbnz	r0, 800fec2 <__multadd+0x5a>
 800feb6:	4602      	mov	r2, r0
 800feb8:	21b5      	movs	r1, #181	; 0xb5
 800feba:	4b0c      	ldr	r3, [pc, #48]	; (800feec <__multadd+0x84>)
 800febc:	480c      	ldr	r0, [pc, #48]	; (800fef0 <__multadd+0x88>)
 800febe:	f000 fe99 	bl	8010bf4 <__assert_func>
 800fec2:	6922      	ldr	r2, [r4, #16]
 800fec4:	f104 010c 	add.w	r1, r4, #12
 800fec8:	3202      	adds	r2, #2
 800feca:	0092      	lsls	r2, r2, #2
 800fecc:	300c      	adds	r0, #12
 800fece:	f7ff ff5b 	bl	800fd88 <memcpy>
 800fed2:	4621      	mov	r1, r4
 800fed4:	4638      	mov	r0, r7
 800fed6:	f7ff ffa5 	bl	800fe24 <_Bfree>
 800feda:	4644      	mov	r4, r8
 800fedc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fee0:	3501      	adds	r5, #1
 800fee2:	615e      	str	r6, [r3, #20]
 800fee4:	6125      	str	r5, [r4, #16]
 800fee6:	4620      	mov	r0, r4
 800fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feec:	08011c07 	.word	0x08011c07
 800fef0:	08011c94 	.word	0x08011c94

0800fef4 <__s2b>:
 800fef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef8:	4615      	mov	r5, r2
 800fefa:	2209      	movs	r2, #9
 800fefc:	461f      	mov	r7, r3
 800fefe:	3308      	adds	r3, #8
 800ff00:	460c      	mov	r4, r1
 800ff02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff06:	4606      	mov	r6, r0
 800ff08:	2201      	movs	r2, #1
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	db09      	blt.n	800ff24 <__s2b+0x30>
 800ff10:	4630      	mov	r0, r6
 800ff12:	f7ff ff47 	bl	800fda4 <_Balloc>
 800ff16:	b940      	cbnz	r0, 800ff2a <__s2b+0x36>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	21ce      	movs	r1, #206	; 0xce
 800ff1c:	4b18      	ldr	r3, [pc, #96]	; (800ff80 <__s2b+0x8c>)
 800ff1e:	4819      	ldr	r0, [pc, #100]	; (800ff84 <__s2b+0x90>)
 800ff20:	f000 fe68 	bl	8010bf4 <__assert_func>
 800ff24:	0052      	lsls	r2, r2, #1
 800ff26:	3101      	adds	r1, #1
 800ff28:	e7f0      	b.n	800ff0c <__s2b+0x18>
 800ff2a:	9b08      	ldr	r3, [sp, #32]
 800ff2c:	2d09      	cmp	r5, #9
 800ff2e:	6143      	str	r3, [r0, #20]
 800ff30:	f04f 0301 	mov.w	r3, #1
 800ff34:	6103      	str	r3, [r0, #16]
 800ff36:	dd16      	ble.n	800ff66 <__s2b+0x72>
 800ff38:	f104 0909 	add.w	r9, r4, #9
 800ff3c:	46c8      	mov	r8, r9
 800ff3e:	442c      	add	r4, r5
 800ff40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff44:	4601      	mov	r1, r0
 800ff46:	220a      	movs	r2, #10
 800ff48:	4630      	mov	r0, r6
 800ff4a:	3b30      	subs	r3, #48	; 0x30
 800ff4c:	f7ff ff8c 	bl	800fe68 <__multadd>
 800ff50:	45a0      	cmp	r8, r4
 800ff52:	d1f5      	bne.n	800ff40 <__s2b+0x4c>
 800ff54:	f1a5 0408 	sub.w	r4, r5, #8
 800ff58:	444c      	add	r4, r9
 800ff5a:	1b2d      	subs	r5, r5, r4
 800ff5c:	1963      	adds	r3, r4, r5
 800ff5e:	42bb      	cmp	r3, r7
 800ff60:	db04      	blt.n	800ff6c <__s2b+0x78>
 800ff62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff66:	2509      	movs	r5, #9
 800ff68:	340a      	adds	r4, #10
 800ff6a:	e7f6      	b.n	800ff5a <__s2b+0x66>
 800ff6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff70:	4601      	mov	r1, r0
 800ff72:	220a      	movs	r2, #10
 800ff74:	4630      	mov	r0, r6
 800ff76:	3b30      	subs	r3, #48	; 0x30
 800ff78:	f7ff ff76 	bl	800fe68 <__multadd>
 800ff7c:	e7ee      	b.n	800ff5c <__s2b+0x68>
 800ff7e:	bf00      	nop
 800ff80:	08011c07 	.word	0x08011c07
 800ff84:	08011c94 	.word	0x08011c94

0800ff88 <__hi0bits>:
 800ff88:	0c02      	lsrs	r2, r0, #16
 800ff8a:	0412      	lsls	r2, r2, #16
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	b9ca      	cbnz	r2, 800ffc4 <__hi0bits+0x3c>
 800ff90:	0403      	lsls	r3, r0, #16
 800ff92:	2010      	movs	r0, #16
 800ff94:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ff98:	bf04      	itt	eq
 800ff9a:	021b      	lsleq	r3, r3, #8
 800ff9c:	3008      	addeq	r0, #8
 800ff9e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ffa2:	bf04      	itt	eq
 800ffa4:	011b      	lsleq	r3, r3, #4
 800ffa6:	3004      	addeq	r0, #4
 800ffa8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ffac:	bf04      	itt	eq
 800ffae:	009b      	lsleq	r3, r3, #2
 800ffb0:	3002      	addeq	r0, #2
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	db05      	blt.n	800ffc2 <__hi0bits+0x3a>
 800ffb6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ffba:	f100 0001 	add.w	r0, r0, #1
 800ffbe:	bf08      	it	eq
 800ffc0:	2020      	moveq	r0, #32
 800ffc2:	4770      	bx	lr
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	e7e5      	b.n	800ff94 <__hi0bits+0xc>

0800ffc8 <__lo0bits>:
 800ffc8:	6803      	ldr	r3, [r0, #0]
 800ffca:	4602      	mov	r2, r0
 800ffcc:	f013 0007 	ands.w	r0, r3, #7
 800ffd0:	d00b      	beq.n	800ffea <__lo0bits+0x22>
 800ffd2:	07d9      	lsls	r1, r3, #31
 800ffd4:	d421      	bmi.n	801001a <__lo0bits+0x52>
 800ffd6:	0798      	lsls	r0, r3, #30
 800ffd8:	bf49      	itett	mi
 800ffda:	085b      	lsrmi	r3, r3, #1
 800ffdc:	089b      	lsrpl	r3, r3, #2
 800ffde:	2001      	movmi	r0, #1
 800ffe0:	6013      	strmi	r3, [r2, #0]
 800ffe2:	bf5c      	itt	pl
 800ffe4:	2002      	movpl	r0, #2
 800ffe6:	6013      	strpl	r3, [r2, #0]
 800ffe8:	4770      	bx	lr
 800ffea:	b299      	uxth	r1, r3
 800ffec:	b909      	cbnz	r1, 800fff2 <__lo0bits+0x2a>
 800ffee:	2010      	movs	r0, #16
 800fff0:	0c1b      	lsrs	r3, r3, #16
 800fff2:	b2d9      	uxtb	r1, r3
 800fff4:	b909      	cbnz	r1, 800fffa <__lo0bits+0x32>
 800fff6:	3008      	adds	r0, #8
 800fff8:	0a1b      	lsrs	r3, r3, #8
 800fffa:	0719      	lsls	r1, r3, #28
 800fffc:	bf04      	itt	eq
 800fffe:	091b      	lsreq	r3, r3, #4
 8010000:	3004      	addeq	r0, #4
 8010002:	0799      	lsls	r1, r3, #30
 8010004:	bf04      	itt	eq
 8010006:	089b      	lsreq	r3, r3, #2
 8010008:	3002      	addeq	r0, #2
 801000a:	07d9      	lsls	r1, r3, #31
 801000c:	d403      	bmi.n	8010016 <__lo0bits+0x4e>
 801000e:	085b      	lsrs	r3, r3, #1
 8010010:	f100 0001 	add.w	r0, r0, #1
 8010014:	d003      	beq.n	801001e <__lo0bits+0x56>
 8010016:	6013      	str	r3, [r2, #0]
 8010018:	4770      	bx	lr
 801001a:	2000      	movs	r0, #0
 801001c:	4770      	bx	lr
 801001e:	2020      	movs	r0, #32
 8010020:	4770      	bx	lr
	...

08010024 <__i2b>:
 8010024:	b510      	push	{r4, lr}
 8010026:	460c      	mov	r4, r1
 8010028:	2101      	movs	r1, #1
 801002a:	f7ff febb 	bl	800fda4 <_Balloc>
 801002e:	4602      	mov	r2, r0
 8010030:	b928      	cbnz	r0, 801003e <__i2b+0x1a>
 8010032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010036:	4b04      	ldr	r3, [pc, #16]	; (8010048 <__i2b+0x24>)
 8010038:	4804      	ldr	r0, [pc, #16]	; (801004c <__i2b+0x28>)
 801003a:	f000 fddb 	bl	8010bf4 <__assert_func>
 801003e:	2301      	movs	r3, #1
 8010040:	6144      	str	r4, [r0, #20]
 8010042:	6103      	str	r3, [r0, #16]
 8010044:	bd10      	pop	{r4, pc}
 8010046:	bf00      	nop
 8010048:	08011c07 	.word	0x08011c07
 801004c:	08011c94 	.word	0x08011c94

08010050 <__multiply>:
 8010050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	4691      	mov	r9, r2
 8010056:	690a      	ldr	r2, [r1, #16]
 8010058:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801005c:	460c      	mov	r4, r1
 801005e:	429a      	cmp	r2, r3
 8010060:	bfbe      	ittt	lt
 8010062:	460b      	movlt	r3, r1
 8010064:	464c      	movlt	r4, r9
 8010066:	4699      	movlt	r9, r3
 8010068:	6927      	ldr	r7, [r4, #16]
 801006a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	6861      	ldr	r1, [r4, #4]
 8010072:	eb07 060a 	add.w	r6, r7, sl
 8010076:	42b3      	cmp	r3, r6
 8010078:	b085      	sub	sp, #20
 801007a:	bfb8      	it	lt
 801007c:	3101      	addlt	r1, #1
 801007e:	f7ff fe91 	bl	800fda4 <_Balloc>
 8010082:	b930      	cbnz	r0, 8010092 <__multiply+0x42>
 8010084:	4602      	mov	r2, r0
 8010086:	f240 115d 	movw	r1, #349	; 0x15d
 801008a:	4b43      	ldr	r3, [pc, #268]	; (8010198 <__multiply+0x148>)
 801008c:	4843      	ldr	r0, [pc, #268]	; (801019c <__multiply+0x14c>)
 801008e:	f000 fdb1 	bl	8010bf4 <__assert_func>
 8010092:	f100 0514 	add.w	r5, r0, #20
 8010096:	462b      	mov	r3, r5
 8010098:	2200      	movs	r2, #0
 801009a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801009e:	4543      	cmp	r3, r8
 80100a0:	d321      	bcc.n	80100e6 <__multiply+0x96>
 80100a2:	f104 0314 	add.w	r3, r4, #20
 80100a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80100aa:	f109 0314 	add.w	r3, r9, #20
 80100ae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80100b2:	9202      	str	r2, [sp, #8]
 80100b4:	1b3a      	subs	r2, r7, r4
 80100b6:	3a15      	subs	r2, #21
 80100b8:	f022 0203 	bic.w	r2, r2, #3
 80100bc:	3204      	adds	r2, #4
 80100be:	f104 0115 	add.w	r1, r4, #21
 80100c2:	428f      	cmp	r7, r1
 80100c4:	bf38      	it	cc
 80100c6:	2204      	movcc	r2, #4
 80100c8:	9201      	str	r2, [sp, #4]
 80100ca:	9a02      	ldr	r2, [sp, #8]
 80100cc:	9303      	str	r3, [sp, #12]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d80c      	bhi.n	80100ec <__multiply+0x9c>
 80100d2:	2e00      	cmp	r6, #0
 80100d4:	dd03      	ble.n	80100de <__multiply+0x8e>
 80100d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d059      	beq.n	8010192 <__multiply+0x142>
 80100de:	6106      	str	r6, [r0, #16]
 80100e0:	b005      	add	sp, #20
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e6:	f843 2b04 	str.w	r2, [r3], #4
 80100ea:	e7d8      	b.n	801009e <__multiply+0x4e>
 80100ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80100f0:	f1ba 0f00 	cmp.w	sl, #0
 80100f4:	d023      	beq.n	801013e <__multiply+0xee>
 80100f6:	46a9      	mov	r9, r5
 80100f8:	f04f 0c00 	mov.w	ip, #0
 80100fc:	f104 0e14 	add.w	lr, r4, #20
 8010100:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010104:	f8d9 1000 	ldr.w	r1, [r9]
 8010108:	fa1f fb82 	uxth.w	fp, r2
 801010c:	b289      	uxth	r1, r1
 801010e:	fb0a 110b 	mla	r1, sl, fp, r1
 8010112:	4461      	add	r1, ip
 8010114:	f8d9 c000 	ldr.w	ip, [r9]
 8010118:	0c12      	lsrs	r2, r2, #16
 801011a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801011e:	fb0a c202 	mla	r2, sl, r2, ip
 8010122:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010126:	b289      	uxth	r1, r1
 8010128:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801012c:	4577      	cmp	r7, lr
 801012e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010132:	f849 1b04 	str.w	r1, [r9], #4
 8010136:	d8e3      	bhi.n	8010100 <__multiply+0xb0>
 8010138:	9a01      	ldr	r2, [sp, #4]
 801013a:	f845 c002 	str.w	ip, [r5, r2]
 801013e:	9a03      	ldr	r2, [sp, #12]
 8010140:	3304      	adds	r3, #4
 8010142:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010146:	f1b9 0f00 	cmp.w	r9, #0
 801014a:	d020      	beq.n	801018e <__multiply+0x13e>
 801014c:	46ae      	mov	lr, r5
 801014e:	f04f 0a00 	mov.w	sl, #0
 8010152:	6829      	ldr	r1, [r5, #0]
 8010154:	f104 0c14 	add.w	ip, r4, #20
 8010158:	f8bc b000 	ldrh.w	fp, [ip]
 801015c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010160:	b289      	uxth	r1, r1
 8010162:	fb09 220b 	mla	r2, r9, fp, r2
 8010166:	4492      	add	sl, r2
 8010168:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801016c:	f84e 1b04 	str.w	r1, [lr], #4
 8010170:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010174:	f8be 1000 	ldrh.w	r1, [lr]
 8010178:	0c12      	lsrs	r2, r2, #16
 801017a:	fb09 1102 	mla	r1, r9, r2, r1
 801017e:	4567      	cmp	r7, ip
 8010180:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010184:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010188:	d8e6      	bhi.n	8010158 <__multiply+0x108>
 801018a:	9a01      	ldr	r2, [sp, #4]
 801018c:	50a9      	str	r1, [r5, r2]
 801018e:	3504      	adds	r5, #4
 8010190:	e79b      	b.n	80100ca <__multiply+0x7a>
 8010192:	3e01      	subs	r6, #1
 8010194:	e79d      	b.n	80100d2 <__multiply+0x82>
 8010196:	bf00      	nop
 8010198:	08011c07 	.word	0x08011c07
 801019c:	08011c94 	.word	0x08011c94

080101a0 <__pow5mult>:
 80101a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101a4:	4615      	mov	r5, r2
 80101a6:	f012 0203 	ands.w	r2, r2, #3
 80101aa:	4606      	mov	r6, r0
 80101ac:	460f      	mov	r7, r1
 80101ae:	d007      	beq.n	80101c0 <__pow5mult+0x20>
 80101b0:	4c25      	ldr	r4, [pc, #148]	; (8010248 <__pow5mult+0xa8>)
 80101b2:	3a01      	subs	r2, #1
 80101b4:	2300      	movs	r3, #0
 80101b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101ba:	f7ff fe55 	bl	800fe68 <__multadd>
 80101be:	4607      	mov	r7, r0
 80101c0:	10ad      	asrs	r5, r5, #2
 80101c2:	d03d      	beq.n	8010240 <__pow5mult+0xa0>
 80101c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80101c6:	b97c      	cbnz	r4, 80101e8 <__pow5mult+0x48>
 80101c8:	2010      	movs	r0, #16
 80101ca:	f7ff fdb5 	bl	800fd38 <malloc>
 80101ce:	4602      	mov	r2, r0
 80101d0:	6270      	str	r0, [r6, #36]	; 0x24
 80101d2:	b928      	cbnz	r0, 80101e0 <__pow5mult+0x40>
 80101d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80101d8:	4b1c      	ldr	r3, [pc, #112]	; (801024c <__pow5mult+0xac>)
 80101da:	481d      	ldr	r0, [pc, #116]	; (8010250 <__pow5mult+0xb0>)
 80101dc:	f000 fd0a 	bl	8010bf4 <__assert_func>
 80101e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101e4:	6004      	str	r4, [r0, #0]
 80101e6:	60c4      	str	r4, [r0, #12]
 80101e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80101ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101f0:	b94c      	cbnz	r4, 8010206 <__pow5mult+0x66>
 80101f2:	f240 2171 	movw	r1, #625	; 0x271
 80101f6:	4630      	mov	r0, r6
 80101f8:	f7ff ff14 	bl	8010024 <__i2b>
 80101fc:	2300      	movs	r3, #0
 80101fe:	4604      	mov	r4, r0
 8010200:	f8c8 0008 	str.w	r0, [r8, #8]
 8010204:	6003      	str	r3, [r0, #0]
 8010206:	f04f 0900 	mov.w	r9, #0
 801020a:	07eb      	lsls	r3, r5, #31
 801020c:	d50a      	bpl.n	8010224 <__pow5mult+0x84>
 801020e:	4639      	mov	r1, r7
 8010210:	4622      	mov	r2, r4
 8010212:	4630      	mov	r0, r6
 8010214:	f7ff ff1c 	bl	8010050 <__multiply>
 8010218:	4680      	mov	r8, r0
 801021a:	4639      	mov	r1, r7
 801021c:	4630      	mov	r0, r6
 801021e:	f7ff fe01 	bl	800fe24 <_Bfree>
 8010222:	4647      	mov	r7, r8
 8010224:	106d      	asrs	r5, r5, #1
 8010226:	d00b      	beq.n	8010240 <__pow5mult+0xa0>
 8010228:	6820      	ldr	r0, [r4, #0]
 801022a:	b938      	cbnz	r0, 801023c <__pow5mult+0x9c>
 801022c:	4622      	mov	r2, r4
 801022e:	4621      	mov	r1, r4
 8010230:	4630      	mov	r0, r6
 8010232:	f7ff ff0d 	bl	8010050 <__multiply>
 8010236:	6020      	str	r0, [r4, #0]
 8010238:	f8c0 9000 	str.w	r9, [r0]
 801023c:	4604      	mov	r4, r0
 801023e:	e7e4      	b.n	801020a <__pow5mult+0x6a>
 8010240:	4638      	mov	r0, r7
 8010242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010246:	bf00      	nop
 8010248:	08011de0 	.word	0x08011de0
 801024c:	08011b95 	.word	0x08011b95
 8010250:	08011c94 	.word	0x08011c94

08010254 <__lshift>:
 8010254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010258:	460c      	mov	r4, r1
 801025a:	4607      	mov	r7, r0
 801025c:	4691      	mov	r9, r2
 801025e:	6923      	ldr	r3, [r4, #16]
 8010260:	6849      	ldr	r1, [r1, #4]
 8010262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010266:	68a3      	ldr	r3, [r4, #8]
 8010268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801026c:	f108 0601 	add.w	r6, r8, #1
 8010270:	42b3      	cmp	r3, r6
 8010272:	db0b      	blt.n	801028c <__lshift+0x38>
 8010274:	4638      	mov	r0, r7
 8010276:	f7ff fd95 	bl	800fda4 <_Balloc>
 801027a:	4605      	mov	r5, r0
 801027c:	b948      	cbnz	r0, 8010292 <__lshift+0x3e>
 801027e:	4602      	mov	r2, r0
 8010280:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010284:	4b29      	ldr	r3, [pc, #164]	; (801032c <__lshift+0xd8>)
 8010286:	482a      	ldr	r0, [pc, #168]	; (8010330 <__lshift+0xdc>)
 8010288:	f000 fcb4 	bl	8010bf4 <__assert_func>
 801028c:	3101      	adds	r1, #1
 801028e:	005b      	lsls	r3, r3, #1
 8010290:	e7ee      	b.n	8010270 <__lshift+0x1c>
 8010292:	2300      	movs	r3, #0
 8010294:	f100 0114 	add.w	r1, r0, #20
 8010298:	f100 0210 	add.w	r2, r0, #16
 801029c:	4618      	mov	r0, r3
 801029e:	4553      	cmp	r3, sl
 80102a0:	db37      	blt.n	8010312 <__lshift+0xbe>
 80102a2:	6920      	ldr	r0, [r4, #16]
 80102a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102a8:	f104 0314 	add.w	r3, r4, #20
 80102ac:	f019 091f 	ands.w	r9, r9, #31
 80102b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80102b8:	d02f      	beq.n	801031a <__lshift+0xc6>
 80102ba:	468a      	mov	sl, r1
 80102bc:	f04f 0c00 	mov.w	ip, #0
 80102c0:	f1c9 0e20 	rsb	lr, r9, #32
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	fa02 f209 	lsl.w	r2, r2, r9
 80102ca:	ea42 020c 	orr.w	r2, r2, ip
 80102ce:	f84a 2b04 	str.w	r2, [sl], #4
 80102d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102d6:	4298      	cmp	r0, r3
 80102d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80102dc:	d8f2      	bhi.n	80102c4 <__lshift+0x70>
 80102de:	1b03      	subs	r3, r0, r4
 80102e0:	3b15      	subs	r3, #21
 80102e2:	f023 0303 	bic.w	r3, r3, #3
 80102e6:	3304      	adds	r3, #4
 80102e8:	f104 0215 	add.w	r2, r4, #21
 80102ec:	4290      	cmp	r0, r2
 80102ee:	bf38      	it	cc
 80102f0:	2304      	movcc	r3, #4
 80102f2:	f841 c003 	str.w	ip, [r1, r3]
 80102f6:	f1bc 0f00 	cmp.w	ip, #0
 80102fa:	d001      	beq.n	8010300 <__lshift+0xac>
 80102fc:	f108 0602 	add.w	r6, r8, #2
 8010300:	3e01      	subs	r6, #1
 8010302:	4638      	mov	r0, r7
 8010304:	4621      	mov	r1, r4
 8010306:	612e      	str	r6, [r5, #16]
 8010308:	f7ff fd8c 	bl	800fe24 <_Bfree>
 801030c:	4628      	mov	r0, r5
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	f842 0f04 	str.w	r0, [r2, #4]!
 8010316:	3301      	adds	r3, #1
 8010318:	e7c1      	b.n	801029e <__lshift+0x4a>
 801031a:	3904      	subs	r1, #4
 801031c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010320:	4298      	cmp	r0, r3
 8010322:	f841 2f04 	str.w	r2, [r1, #4]!
 8010326:	d8f9      	bhi.n	801031c <__lshift+0xc8>
 8010328:	e7ea      	b.n	8010300 <__lshift+0xac>
 801032a:	bf00      	nop
 801032c:	08011c07 	.word	0x08011c07
 8010330:	08011c94 	.word	0x08011c94

08010334 <__mcmp>:
 8010334:	4603      	mov	r3, r0
 8010336:	690a      	ldr	r2, [r1, #16]
 8010338:	6900      	ldr	r0, [r0, #16]
 801033a:	b530      	push	{r4, r5, lr}
 801033c:	1a80      	subs	r0, r0, r2
 801033e:	d10d      	bne.n	801035c <__mcmp+0x28>
 8010340:	3314      	adds	r3, #20
 8010342:	3114      	adds	r1, #20
 8010344:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010348:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801034c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010350:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010354:	4295      	cmp	r5, r2
 8010356:	d002      	beq.n	801035e <__mcmp+0x2a>
 8010358:	d304      	bcc.n	8010364 <__mcmp+0x30>
 801035a:	2001      	movs	r0, #1
 801035c:	bd30      	pop	{r4, r5, pc}
 801035e:	42a3      	cmp	r3, r4
 8010360:	d3f4      	bcc.n	801034c <__mcmp+0x18>
 8010362:	e7fb      	b.n	801035c <__mcmp+0x28>
 8010364:	f04f 30ff 	mov.w	r0, #4294967295
 8010368:	e7f8      	b.n	801035c <__mcmp+0x28>
	...

0801036c <__mdiff>:
 801036c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010370:	460d      	mov	r5, r1
 8010372:	4607      	mov	r7, r0
 8010374:	4611      	mov	r1, r2
 8010376:	4628      	mov	r0, r5
 8010378:	4614      	mov	r4, r2
 801037a:	f7ff ffdb 	bl	8010334 <__mcmp>
 801037e:	1e06      	subs	r6, r0, #0
 8010380:	d111      	bne.n	80103a6 <__mdiff+0x3a>
 8010382:	4631      	mov	r1, r6
 8010384:	4638      	mov	r0, r7
 8010386:	f7ff fd0d 	bl	800fda4 <_Balloc>
 801038a:	4602      	mov	r2, r0
 801038c:	b928      	cbnz	r0, 801039a <__mdiff+0x2e>
 801038e:	f240 2132 	movw	r1, #562	; 0x232
 8010392:	4b3a      	ldr	r3, [pc, #232]	; (801047c <__mdiff+0x110>)
 8010394:	483a      	ldr	r0, [pc, #232]	; (8010480 <__mdiff+0x114>)
 8010396:	f000 fc2d 	bl	8010bf4 <__assert_func>
 801039a:	2301      	movs	r3, #1
 801039c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80103a0:	4610      	mov	r0, r2
 80103a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a6:	bfa4      	itt	ge
 80103a8:	4623      	movge	r3, r4
 80103aa:	462c      	movge	r4, r5
 80103ac:	4638      	mov	r0, r7
 80103ae:	6861      	ldr	r1, [r4, #4]
 80103b0:	bfa6      	itte	ge
 80103b2:	461d      	movge	r5, r3
 80103b4:	2600      	movge	r6, #0
 80103b6:	2601      	movlt	r6, #1
 80103b8:	f7ff fcf4 	bl	800fda4 <_Balloc>
 80103bc:	4602      	mov	r2, r0
 80103be:	b918      	cbnz	r0, 80103c8 <__mdiff+0x5c>
 80103c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80103c4:	4b2d      	ldr	r3, [pc, #180]	; (801047c <__mdiff+0x110>)
 80103c6:	e7e5      	b.n	8010394 <__mdiff+0x28>
 80103c8:	f102 0814 	add.w	r8, r2, #20
 80103cc:	46c2      	mov	sl, r8
 80103ce:	f04f 0c00 	mov.w	ip, #0
 80103d2:	6927      	ldr	r7, [r4, #16]
 80103d4:	60c6      	str	r6, [r0, #12]
 80103d6:	692e      	ldr	r6, [r5, #16]
 80103d8:	f104 0014 	add.w	r0, r4, #20
 80103dc:	f105 0914 	add.w	r9, r5, #20
 80103e0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80103e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80103e8:	3410      	adds	r4, #16
 80103ea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80103ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80103f2:	fa1f f18b 	uxth.w	r1, fp
 80103f6:	448c      	add	ip, r1
 80103f8:	b299      	uxth	r1, r3
 80103fa:	0c1b      	lsrs	r3, r3, #16
 80103fc:	ebac 0101 	sub.w	r1, ip, r1
 8010400:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010404:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010408:	b289      	uxth	r1, r1
 801040a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801040e:	454e      	cmp	r6, r9
 8010410:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010414:	f84a 3b04 	str.w	r3, [sl], #4
 8010418:	d8e7      	bhi.n	80103ea <__mdiff+0x7e>
 801041a:	1b73      	subs	r3, r6, r5
 801041c:	3b15      	subs	r3, #21
 801041e:	f023 0303 	bic.w	r3, r3, #3
 8010422:	3515      	adds	r5, #21
 8010424:	3304      	adds	r3, #4
 8010426:	42ae      	cmp	r6, r5
 8010428:	bf38      	it	cc
 801042a:	2304      	movcc	r3, #4
 801042c:	4418      	add	r0, r3
 801042e:	4443      	add	r3, r8
 8010430:	461e      	mov	r6, r3
 8010432:	4605      	mov	r5, r0
 8010434:	4575      	cmp	r5, lr
 8010436:	d30e      	bcc.n	8010456 <__mdiff+0xea>
 8010438:	f10e 0103 	add.w	r1, lr, #3
 801043c:	1a09      	subs	r1, r1, r0
 801043e:	f021 0103 	bic.w	r1, r1, #3
 8010442:	3803      	subs	r0, #3
 8010444:	4586      	cmp	lr, r0
 8010446:	bf38      	it	cc
 8010448:	2100      	movcc	r1, #0
 801044a:	4419      	add	r1, r3
 801044c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010450:	b18b      	cbz	r3, 8010476 <__mdiff+0x10a>
 8010452:	6117      	str	r7, [r2, #16]
 8010454:	e7a4      	b.n	80103a0 <__mdiff+0x34>
 8010456:	f855 8b04 	ldr.w	r8, [r5], #4
 801045a:	fa1f f188 	uxth.w	r1, r8
 801045e:	4461      	add	r1, ip
 8010460:	140c      	asrs	r4, r1, #16
 8010462:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010466:	b289      	uxth	r1, r1
 8010468:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801046c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010470:	f846 1b04 	str.w	r1, [r6], #4
 8010474:	e7de      	b.n	8010434 <__mdiff+0xc8>
 8010476:	3f01      	subs	r7, #1
 8010478:	e7e8      	b.n	801044c <__mdiff+0xe0>
 801047a:	bf00      	nop
 801047c:	08011c07 	.word	0x08011c07
 8010480:	08011c94 	.word	0x08011c94

08010484 <__ulp>:
 8010484:	4b11      	ldr	r3, [pc, #68]	; (80104cc <__ulp+0x48>)
 8010486:	400b      	ands	r3, r1
 8010488:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801048c:	2b00      	cmp	r3, #0
 801048e:	dd02      	ble.n	8010496 <__ulp+0x12>
 8010490:	2000      	movs	r0, #0
 8010492:	4619      	mov	r1, r3
 8010494:	4770      	bx	lr
 8010496:	425b      	negs	r3, r3
 8010498:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801049c:	f04f 0000 	mov.w	r0, #0
 80104a0:	f04f 0100 	mov.w	r1, #0
 80104a4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104a8:	da04      	bge.n	80104b4 <__ulp+0x30>
 80104aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80104ae:	fa43 f102 	asr.w	r1, r3, r2
 80104b2:	4770      	bx	lr
 80104b4:	f1a2 0314 	sub.w	r3, r2, #20
 80104b8:	2b1e      	cmp	r3, #30
 80104ba:	bfd6      	itet	le
 80104bc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80104c0:	2301      	movgt	r3, #1
 80104c2:	fa22 f303 	lsrle.w	r3, r2, r3
 80104c6:	4618      	mov	r0, r3
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	7ff00000 	.word	0x7ff00000

080104d0 <__b2d>:
 80104d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d4:	6907      	ldr	r7, [r0, #16]
 80104d6:	f100 0914 	add.w	r9, r0, #20
 80104da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80104de:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80104e2:	f1a7 0804 	sub.w	r8, r7, #4
 80104e6:	4630      	mov	r0, r6
 80104e8:	f7ff fd4e 	bl	800ff88 <__hi0bits>
 80104ec:	f1c0 0320 	rsb	r3, r0, #32
 80104f0:	280a      	cmp	r0, #10
 80104f2:	600b      	str	r3, [r1, #0]
 80104f4:	491f      	ldr	r1, [pc, #124]	; (8010574 <__b2d+0xa4>)
 80104f6:	dc17      	bgt.n	8010528 <__b2d+0x58>
 80104f8:	45c1      	cmp	r9, r8
 80104fa:	bf28      	it	cs
 80104fc:	2200      	movcs	r2, #0
 80104fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8010502:	fa26 f30c 	lsr.w	r3, r6, ip
 8010506:	bf38      	it	cc
 8010508:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801050c:	ea43 0501 	orr.w	r5, r3, r1
 8010510:	f100 0315 	add.w	r3, r0, #21
 8010514:	fa06 f303 	lsl.w	r3, r6, r3
 8010518:	fa22 f20c 	lsr.w	r2, r2, ip
 801051c:	ea43 0402 	orr.w	r4, r3, r2
 8010520:	4620      	mov	r0, r4
 8010522:	4629      	mov	r1, r5
 8010524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010528:	45c1      	cmp	r9, r8
 801052a:	bf2e      	itee	cs
 801052c:	2200      	movcs	r2, #0
 801052e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010532:	f1a7 0808 	subcc.w	r8, r7, #8
 8010536:	f1b0 030b 	subs.w	r3, r0, #11
 801053a:	d016      	beq.n	801056a <__b2d+0x9a>
 801053c:	f1c3 0720 	rsb	r7, r3, #32
 8010540:	fa22 f107 	lsr.w	r1, r2, r7
 8010544:	45c8      	cmp	r8, r9
 8010546:	fa06 f603 	lsl.w	r6, r6, r3
 801054a:	ea46 0601 	orr.w	r6, r6, r1
 801054e:	bf94      	ite	ls
 8010550:	2100      	movls	r1, #0
 8010552:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010556:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801055a:	fa02 f003 	lsl.w	r0, r2, r3
 801055e:	40f9      	lsrs	r1, r7
 8010560:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010564:	ea40 0401 	orr.w	r4, r0, r1
 8010568:	e7da      	b.n	8010520 <__b2d+0x50>
 801056a:	4614      	mov	r4, r2
 801056c:	ea46 0501 	orr.w	r5, r6, r1
 8010570:	e7d6      	b.n	8010520 <__b2d+0x50>
 8010572:	bf00      	nop
 8010574:	3ff00000 	.word	0x3ff00000

08010578 <__d2b>:
 8010578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801057c:	2101      	movs	r1, #1
 801057e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010582:	4690      	mov	r8, r2
 8010584:	461d      	mov	r5, r3
 8010586:	f7ff fc0d 	bl	800fda4 <_Balloc>
 801058a:	4604      	mov	r4, r0
 801058c:	b930      	cbnz	r0, 801059c <__d2b+0x24>
 801058e:	4602      	mov	r2, r0
 8010590:	f240 310a 	movw	r1, #778	; 0x30a
 8010594:	4b24      	ldr	r3, [pc, #144]	; (8010628 <__d2b+0xb0>)
 8010596:	4825      	ldr	r0, [pc, #148]	; (801062c <__d2b+0xb4>)
 8010598:	f000 fb2c 	bl	8010bf4 <__assert_func>
 801059c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80105a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80105a4:	bb2d      	cbnz	r5, 80105f2 <__d2b+0x7a>
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	f1b8 0300 	subs.w	r3, r8, #0
 80105ac:	d026      	beq.n	80105fc <__d2b+0x84>
 80105ae:	4668      	mov	r0, sp
 80105b0:	9300      	str	r3, [sp, #0]
 80105b2:	f7ff fd09 	bl	800ffc8 <__lo0bits>
 80105b6:	9900      	ldr	r1, [sp, #0]
 80105b8:	b1f0      	cbz	r0, 80105f8 <__d2b+0x80>
 80105ba:	9a01      	ldr	r2, [sp, #4]
 80105bc:	f1c0 0320 	rsb	r3, r0, #32
 80105c0:	fa02 f303 	lsl.w	r3, r2, r3
 80105c4:	430b      	orrs	r3, r1
 80105c6:	40c2      	lsrs	r2, r0
 80105c8:	6163      	str	r3, [r4, #20]
 80105ca:	9201      	str	r2, [sp, #4]
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	bf14      	ite	ne
 80105d2:	2102      	movne	r1, #2
 80105d4:	2101      	moveq	r1, #1
 80105d6:	61a3      	str	r3, [r4, #24]
 80105d8:	6121      	str	r1, [r4, #16]
 80105da:	b1c5      	cbz	r5, 801060e <__d2b+0x96>
 80105dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80105e0:	4405      	add	r5, r0
 80105e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80105e6:	603d      	str	r5, [r7, #0]
 80105e8:	6030      	str	r0, [r6, #0]
 80105ea:	4620      	mov	r0, r4
 80105ec:	b002      	add	sp, #8
 80105ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105f6:	e7d6      	b.n	80105a6 <__d2b+0x2e>
 80105f8:	6161      	str	r1, [r4, #20]
 80105fa:	e7e7      	b.n	80105cc <__d2b+0x54>
 80105fc:	a801      	add	r0, sp, #4
 80105fe:	f7ff fce3 	bl	800ffc8 <__lo0bits>
 8010602:	2101      	movs	r1, #1
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	6121      	str	r1, [r4, #16]
 8010608:	6163      	str	r3, [r4, #20]
 801060a:	3020      	adds	r0, #32
 801060c:	e7e5      	b.n	80105da <__d2b+0x62>
 801060e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010612:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010616:	6038      	str	r0, [r7, #0]
 8010618:	6918      	ldr	r0, [r3, #16]
 801061a:	f7ff fcb5 	bl	800ff88 <__hi0bits>
 801061e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010622:	6031      	str	r1, [r6, #0]
 8010624:	e7e1      	b.n	80105ea <__d2b+0x72>
 8010626:	bf00      	nop
 8010628:	08011c07 	.word	0x08011c07
 801062c:	08011c94 	.word	0x08011c94

08010630 <__ratio>:
 8010630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	4688      	mov	r8, r1
 8010636:	4669      	mov	r1, sp
 8010638:	4681      	mov	r9, r0
 801063a:	f7ff ff49 	bl	80104d0 <__b2d>
 801063e:	460f      	mov	r7, r1
 8010640:	4604      	mov	r4, r0
 8010642:	460d      	mov	r5, r1
 8010644:	4640      	mov	r0, r8
 8010646:	a901      	add	r1, sp, #4
 8010648:	f7ff ff42 	bl	80104d0 <__b2d>
 801064c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010650:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010654:	468b      	mov	fp, r1
 8010656:	eba3 0c02 	sub.w	ip, r3, r2
 801065a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801065e:	1a9b      	subs	r3, r3, r2
 8010660:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010664:	2b00      	cmp	r3, #0
 8010666:	bfd5      	itete	le
 8010668:	460a      	movle	r2, r1
 801066a:	462a      	movgt	r2, r5
 801066c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010670:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010674:	bfd8      	it	le
 8010676:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801067a:	465b      	mov	r3, fp
 801067c:	4602      	mov	r2, r0
 801067e:	4639      	mov	r1, r7
 8010680:	4620      	mov	r0, r4
 8010682:	f7f0 f86b 	bl	800075c <__aeabi_ddiv>
 8010686:	b003      	add	sp, #12
 8010688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801068c <__copybits>:
 801068c:	3901      	subs	r1, #1
 801068e:	b570      	push	{r4, r5, r6, lr}
 8010690:	1149      	asrs	r1, r1, #5
 8010692:	6914      	ldr	r4, [r2, #16]
 8010694:	3101      	adds	r1, #1
 8010696:	f102 0314 	add.w	r3, r2, #20
 801069a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801069e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106a2:	1f05      	subs	r5, r0, #4
 80106a4:	42a3      	cmp	r3, r4
 80106a6:	d30c      	bcc.n	80106c2 <__copybits+0x36>
 80106a8:	1aa3      	subs	r3, r4, r2
 80106aa:	3b11      	subs	r3, #17
 80106ac:	f023 0303 	bic.w	r3, r3, #3
 80106b0:	3211      	adds	r2, #17
 80106b2:	42a2      	cmp	r2, r4
 80106b4:	bf88      	it	hi
 80106b6:	2300      	movhi	r3, #0
 80106b8:	4418      	add	r0, r3
 80106ba:	2300      	movs	r3, #0
 80106bc:	4288      	cmp	r0, r1
 80106be:	d305      	bcc.n	80106cc <__copybits+0x40>
 80106c0:	bd70      	pop	{r4, r5, r6, pc}
 80106c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80106c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80106ca:	e7eb      	b.n	80106a4 <__copybits+0x18>
 80106cc:	f840 3b04 	str.w	r3, [r0], #4
 80106d0:	e7f4      	b.n	80106bc <__copybits+0x30>

080106d2 <__any_on>:
 80106d2:	f100 0214 	add.w	r2, r0, #20
 80106d6:	6900      	ldr	r0, [r0, #16]
 80106d8:	114b      	asrs	r3, r1, #5
 80106da:	4298      	cmp	r0, r3
 80106dc:	b510      	push	{r4, lr}
 80106de:	db11      	blt.n	8010704 <__any_on+0x32>
 80106e0:	dd0a      	ble.n	80106f8 <__any_on+0x26>
 80106e2:	f011 011f 	ands.w	r1, r1, #31
 80106e6:	d007      	beq.n	80106f8 <__any_on+0x26>
 80106e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80106ec:	fa24 f001 	lsr.w	r0, r4, r1
 80106f0:	fa00 f101 	lsl.w	r1, r0, r1
 80106f4:	428c      	cmp	r4, r1
 80106f6:	d10b      	bne.n	8010710 <__any_on+0x3e>
 80106f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d803      	bhi.n	8010708 <__any_on+0x36>
 8010700:	2000      	movs	r0, #0
 8010702:	bd10      	pop	{r4, pc}
 8010704:	4603      	mov	r3, r0
 8010706:	e7f7      	b.n	80106f8 <__any_on+0x26>
 8010708:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801070c:	2900      	cmp	r1, #0
 801070e:	d0f5      	beq.n	80106fc <__any_on+0x2a>
 8010710:	2001      	movs	r0, #1
 8010712:	e7f6      	b.n	8010702 <__any_on+0x30>

08010714 <_calloc_r>:
 8010714:	b570      	push	{r4, r5, r6, lr}
 8010716:	fba1 5402 	umull	r5, r4, r1, r2
 801071a:	b934      	cbnz	r4, 801072a <_calloc_r+0x16>
 801071c:	4629      	mov	r1, r5
 801071e:	f000 f875 	bl	801080c <_malloc_r>
 8010722:	4606      	mov	r6, r0
 8010724:	b928      	cbnz	r0, 8010732 <_calloc_r+0x1e>
 8010726:	4630      	mov	r0, r6
 8010728:	bd70      	pop	{r4, r5, r6, pc}
 801072a:	220c      	movs	r2, #12
 801072c:	2600      	movs	r6, #0
 801072e:	6002      	str	r2, [r0, #0]
 8010730:	e7f9      	b.n	8010726 <_calloc_r+0x12>
 8010732:	462a      	mov	r2, r5
 8010734:	4621      	mov	r1, r4
 8010736:	f7fc fe53 	bl	800d3e0 <memset>
 801073a:	e7f4      	b.n	8010726 <_calloc_r+0x12>

0801073c <_free_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	4605      	mov	r5, r0
 8010740:	2900      	cmp	r1, #0
 8010742:	d040      	beq.n	80107c6 <_free_r+0x8a>
 8010744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010748:	1f0c      	subs	r4, r1, #4
 801074a:	2b00      	cmp	r3, #0
 801074c:	bfb8      	it	lt
 801074e:	18e4      	addlt	r4, r4, r3
 8010750:	f000 fa9a 	bl	8010c88 <__malloc_lock>
 8010754:	4a1c      	ldr	r2, [pc, #112]	; (80107c8 <_free_r+0x8c>)
 8010756:	6813      	ldr	r3, [r2, #0]
 8010758:	b933      	cbnz	r3, 8010768 <_free_r+0x2c>
 801075a:	6063      	str	r3, [r4, #4]
 801075c:	6014      	str	r4, [r2, #0]
 801075e:	4628      	mov	r0, r5
 8010760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010764:	f000 ba96 	b.w	8010c94 <__malloc_unlock>
 8010768:	42a3      	cmp	r3, r4
 801076a:	d908      	bls.n	801077e <_free_r+0x42>
 801076c:	6820      	ldr	r0, [r4, #0]
 801076e:	1821      	adds	r1, r4, r0
 8010770:	428b      	cmp	r3, r1
 8010772:	bf01      	itttt	eq
 8010774:	6819      	ldreq	r1, [r3, #0]
 8010776:	685b      	ldreq	r3, [r3, #4]
 8010778:	1809      	addeq	r1, r1, r0
 801077a:	6021      	streq	r1, [r4, #0]
 801077c:	e7ed      	b.n	801075a <_free_r+0x1e>
 801077e:	461a      	mov	r2, r3
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	b10b      	cbz	r3, 8010788 <_free_r+0x4c>
 8010784:	42a3      	cmp	r3, r4
 8010786:	d9fa      	bls.n	801077e <_free_r+0x42>
 8010788:	6811      	ldr	r1, [r2, #0]
 801078a:	1850      	adds	r0, r2, r1
 801078c:	42a0      	cmp	r0, r4
 801078e:	d10b      	bne.n	80107a8 <_free_r+0x6c>
 8010790:	6820      	ldr	r0, [r4, #0]
 8010792:	4401      	add	r1, r0
 8010794:	1850      	adds	r0, r2, r1
 8010796:	4283      	cmp	r3, r0
 8010798:	6011      	str	r1, [r2, #0]
 801079a:	d1e0      	bne.n	801075e <_free_r+0x22>
 801079c:	6818      	ldr	r0, [r3, #0]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	4401      	add	r1, r0
 80107a2:	6011      	str	r1, [r2, #0]
 80107a4:	6053      	str	r3, [r2, #4]
 80107a6:	e7da      	b.n	801075e <_free_r+0x22>
 80107a8:	d902      	bls.n	80107b0 <_free_r+0x74>
 80107aa:	230c      	movs	r3, #12
 80107ac:	602b      	str	r3, [r5, #0]
 80107ae:	e7d6      	b.n	801075e <_free_r+0x22>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	1821      	adds	r1, r4, r0
 80107b4:	428b      	cmp	r3, r1
 80107b6:	bf01      	itttt	eq
 80107b8:	6819      	ldreq	r1, [r3, #0]
 80107ba:	685b      	ldreq	r3, [r3, #4]
 80107bc:	1809      	addeq	r1, r1, r0
 80107be:	6021      	streq	r1, [r4, #0]
 80107c0:	6063      	str	r3, [r4, #4]
 80107c2:	6054      	str	r4, [r2, #4]
 80107c4:	e7cb      	b.n	801075e <_free_r+0x22>
 80107c6:	bd38      	pop	{r3, r4, r5, pc}
 80107c8:	20001c0c 	.word	0x20001c0c

080107cc <sbrk_aligned>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	4e0e      	ldr	r6, [pc, #56]	; (8010808 <sbrk_aligned+0x3c>)
 80107d0:	460c      	mov	r4, r1
 80107d2:	6831      	ldr	r1, [r6, #0]
 80107d4:	4605      	mov	r5, r0
 80107d6:	b911      	cbnz	r1, 80107de <sbrk_aligned+0x12>
 80107d8:	f000 f9ee 	bl	8010bb8 <_sbrk_r>
 80107dc:	6030      	str	r0, [r6, #0]
 80107de:	4621      	mov	r1, r4
 80107e0:	4628      	mov	r0, r5
 80107e2:	f000 f9e9 	bl	8010bb8 <_sbrk_r>
 80107e6:	1c43      	adds	r3, r0, #1
 80107e8:	d00a      	beq.n	8010800 <sbrk_aligned+0x34>
 80107ea:	1cc4      	adds	r4, r0, #3
 80107ec:	f024 0403 	bic.w	r4, r4, #3
 80107f0:	42a0      	cmp	r0, r4
 80107f2:	d007      	beq.n	8010804 <sbrk_aligned+0x38>
 80107f4:	1a21      	subs	r1, r4, r0
 80107f6:	4628      	mov	r0, r5
 80107f8:	f000 f9de 	bl	8010bb8 <_sbrk_r>
 80107fc:	3001      	adds	r0, #1
 80107fe:	d101      	bne.n	8010804 <sbrk_aligned+0x38>
 8010800:	f04f 34ff 	mov.w	r4, #4294967295
 8010804:	4620      	mov	r0, r4
 8010806:	bd70      	pop	{r4, r5, r6, pc}
 8010808:	20001c10 	.word	0x20001c10

0801080c <_malloc_r>:
 801080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010810:	1ccd      	adds	r5, r1, #3
 8010812:	f025 0503 	bic.w	r5, r5, #3
 8010816:	3508      	adds	r5, #8
 8010818:	2d0c      	cmp	r5, #12
 801081a:	bf38      	it	cc
 801081c:	250c      	movcc	r5, #12
 801081e:	2d00      	cmp	r5, #0
 8010820:	4607      	mov	r7, r0
 8010822:	db01      	blt.n	8010828 <_malloc_r+0x1c>
 8010824:	42a9      	cmp	r1, r5
 8010826:	d905      	bls.n	8010834 <_malloc_r+0x28>
 8010828:	230c      	movs	r3, #12
 801082a:	2600      	movs	r6, #0
 801082c:	603b      	str	r3, [r7, #0]
 801082e:	4630      	mov	r0, r6
 8010830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010834:	4e2e      	ldr	r6, [pc, #184]	; (80108f0 <_malloc_r+0xe4>)
 8010836:	f000 fa27 	bl	8010c88 <__malloc_lock>
 801083a:	6833      	ldr	r3, [r6, #0]
 801083c:	461c      	mov	r4, r3
 801083e:	bb34      	cbnz	r4, 801088e <_malloc_r+0x82>
 8010840:	4629      	mov	r1, r5
 8010842:	4638      	mov	r0, r7
 8010844:	f7ff ffc2 	bl	80107cc <sbrk_aligned>
 8010848:	1c43      	adds	r3, r0, #1
 801084a:	4604      	mov	r4, r0
 801084c:	d14d      	bne.n	80108ea <_malloc_r+0xde>
 801084e:	6834      	ldr	r4, [r6, #0]
 8010850:	4626      	mov	r6, r4
 8010852:	2e00      	cmp	r6, #0
 8010854:	d140      	bne.n	80108d8 <_malloc_r+0xcc>
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	4631      	mov	r1, r6
 801085a:	4638      	mov	r0, r7
 801085c:	eb04 0803 	add.w	r8, r4, r3
 8010860:	f000 f9aa 	bl	8010bb8 <_sbrk_r>
 8010864:	4580      	cmp	r8, r0
 8010866:	d13a      	bne.n	80108de <_malloc_r+0xd2>
 8010868:	6821      	ldr	r1, [r4, #0]
 801086a:	3503      	adds	r5, #3
 801086c:	1a6d      	subs	r5, r5, r1
 801086e:	f025 0503 	bic.w	r5, r5, #3
 8010872:	3508      	adds	r5, #8
 8010874:	2d0c      	cmp	r5, #12
 8010876:	bf38      	it	cc
 8010878:	250c      	movcc	r5, #12
 801087a:	4638      	mov	r0, r7
 801087c:	4629      	mov	r1, r5
 801087e:	f7ff ffa5 	bl	80107cc <sbrk_aligned>
 8010882:	3001      	adds	r0, #1
 8010884:	d02b      	beq.n	80108de <_malloc_r+0xd2>
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	442b      	add	r3, r5
 801088a:	6023      	str	r3, [r4, #0]
 801088c:	e00e      	b.n	80108ac <_malloc_r+0xa0>
 801088e:	6822      	ldr	r2, [r4, #0]
 8010890:	1b52      	subs	r2, r2, r5
 8010892:	d41e      	bmi.n	80108d2 <_malloc_r+0xc6>
 8010894:	2a0b      	cmp	r2, #11
 8010896:	d916      	bls.n	80108c6 <_malloc_r+0xba>
 8010898:	1961      	adds	r1, r4, r5
 801089a:	42a3      	cmp	r3, r4
 801089c:	6025      	str	r5, [r4, #0]
 801089e:	bf18      	it	ne
 80108a0:	6059      	strne	r1, [r3, #4]
 80108a2:	6863      	ldr	r3, [r4, #4]
 80108a4:	bf08      	it	eq
 80108a6:	6031      	streq	r1, [r6, #0]
 80108a8:	5162      	str	r2, [r4, r5]
 80108aa:	604b      	str	r3, [r1, #4]
 80108ac:	4638      	mov	r0, r7
 80108ae:	f104 060b 	add.w	r6, r4, #11
 80108b2:	f000 f9ef 	bl	8010c94 <__malloc_unlock>
 80108b6:	f026 0607 	bic.w	r6, r6, #7
 80108ba:	1d23      	adds	r3, r4, #4
 80108bc:	1af2      	subs	r2, r6, r3
 80108be:	d0b6      	beq.n	801082e <_malloc_r+0x22>
 80108c0:	1b9b      	subs	r3, r3, r6
 80108c2:	50a3      	str	r3, [r4, r2]
 80108c4:	e7b3      	b.n	801082e <_malloc_r+0x22>
 80108c6:	6862      	ldr	r2, [r4, #4]
 80108c8:	42a3      	cmp	r3, r4
 80108ca:	bf0c      	ite	eq
 80108cc:	6032      	streq	r2, [r6, #0]
 80108ce:	605a      	strne	r2, [r3, #4]
 80108d0:	e7ec      	b.n	80108ac <_malloc_r+0xa0>
 80108d2:	4623      	mov	r3, r4
 80108d4:	6864      	ldr	r4, [r4, #4]
 80108d6:	e7b2      	b.n	801083e <_malloc_r+0x32>
 80108d8:	4634      	mov	r4, r6
 80108da:	6876      	ldr	r6, [r6, #4]
 80108dc:	e7b9      	b.n	8010852 <_malloc_r+0x46>
 80108de:	230c      	movs	r3, #12
 80108e0:	4638      	mov	r0, r7
 80108e2:	603b      	str	r3, [r7, #0]
 80108e4:	f000 f9d6 	bl	8010c94 <__malloc_unlock>
 80108e8:	e7a1      	b.n	801082e <_malloc_r+0x22>
 80108ea:	6025      	str	r5, [r4, #0]
 80108ec:	e7de      	b.n	80108ac <_malloc_r+0xa0>
 80108ee:	bf00      	nop
 80108f0:	20001c0c 	.word	0x20001c0c

080108f4 <__ssputs_r>:
 80108f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108f8:	688e      	ldr	r6, [r1, #8]
 80108fa:	4682      	mov	sl, r0
 80108fc:	429e      	cmp	r6, r3
 80108fe:	460c      	mov	r4, r1
 8010900:	4690      	mov	r8, r2
 8010902:	461f      	mov	r7, r3
 8010904:	d838      	bhi.n	8010978 <__ssputs_r+0x84>
 8010906:	898a      	ldrh	r2, [r1, #12]
 8010908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801090c:	d032      	beq.n	8010974 <__ssputs_r+0x80>
 801090e:	6825      	ldr	r5, [r4, #0]
 8010910:	6909      	ldr	r1, [r1, #16]
 8010912:	3301      	adds	r3, #1
 8010914:	eba5 0901 	sub.w	r9, r5, r1
 8010918:	6965      	ldr	r5, [r4, #20]
 801091a:	444b      	add	r3, r9
 801091c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010924:	106d      	asrs	r5, r5, #1
 8010926:	429d      	cmp	r5, r3
 8010928:	bf38      	it	cc
 801092a:	461d      	movcc	r5, r3
 801092c:	0553      	lsls	r3, r2, #21
 801092e:	d531      	bpl.n	8010994 <__ssputs_r+0xa0>
 8010930:	4629      	mov	r1, r5
 8010932:	f7ff ff6b 	bl	801080c <_malloc_r>
 8010936:	4606      	mov	r6, r0
 8010938:	b950      	cbnz	r0, 8010950 <__ssputs_r+0x5c>
 801093a:	230c      	movs	r3, #12
 801093c:	f04f 30ff 	mov.w	r0, #4294967295
 8010940:	f8ca 3000 	str.w	r3, [sl]
 8010944:	89a3      	ldrh	r3, [r4, #12]
 8010946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801094a:	81a3      	strh	r3, [r4, #12]
 801094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010950:	464a      	mov	r2, r9
 8010952:	6921      	ldr	r1, [r4, #16]
 8010954:	f7ff fa18 	bl	800fd88 <memcpy>
 8010958:	89a3      	ldrh	r3, [r4, #12]
 801095a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801095e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010962:	81a3      	strh	r3, [r4, #12]
 8010964:	6126      	str	r6, [r4, #16]
 8010966:	444e      	add	r6, r9
 8010968:	6026      	str	r6, [r4, #0]
 801096a:	463e      	mov	r6, r7
 801096c:	6165      	str	r5, [r4, #20]
 801096e:	eba5 0509 	sub.w	r5, r5, r9
 8010972:	60a5      	str	r5, [r4, #8]
 8010974:	42be      	cmp	r6, r7
 8010976:	d900      	bls.n	801097a <__ssputs_r+0x86>
 8010978:	463e      	mov	r6, r7
 801097a:	4632      	mov	r2, r6
 801097c:	4641      	mov	r1, r8
 801097e:	6820      	ldr	r0, [r4, #0]
 8010980:	f000 f968 	bl	8010c54 <memmove>
 8010984:	68a3      	ldr	r3, [r4, #8]
 8010986:	2000      	movs	r0, #0
 8010988:	1b9b      	subs	r3, r3, r6
 801098a:	60a3      	str	r3, [r4, #8]
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	4433      	add	r3, r6
 8010990:	6023      	str	r3, [r4, #0]
 8010992:	e7db      	b.n	801094c <__ssputs_r+0x58>
 8010994:	462a      	mov	r2, r5
 8010996:	f000 f983 	bl	8010ca0 <_realloc_r>
 801099a:	4606      	mov	r6, r0
 801099c:	2800      	cmp	r0, #0
 801099e:	d1e1      	bne.n	8010964 <__ssputs_r+0x70>
 80109a0:	4650      	mov	r0, sl
 80109a2:	6921      	ldr	r1, [r4, #16]
 80109a4:	f7ff feca 	bl	801073c <_free_r>
 80109a8:	e7c7      	b.n	801093a <__ssputs_r+0x46>
	...

080109ac <_svfiprintf_r>:
 80109ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	4698      	mov	r8, r3
 80109b2:	898b      	ldrh	r3, [r1, #12]
 80109b4:	4607      	mov	r7, r0
 80109b6:	061b      	lsls	r3, r3, #24
 80109b8:	460d      	mov	r5, r1
 80109ba:	4614      	mov	r4, r2
 80109bc:	b09d      	sub	sp, #116	; 0x74
 80109be:	d50e      	bpl.n	80109de <_svfiprintf_r+0x32>
 80109c0:	690b      	ldr	r3, [r1, #16]
 80109c2:	b963      	cbnz	r3, 80109de <_svfiprintf_r+0x32>
 80109c4:	2140      	movs	r1, #64	; 0x40
 80109c6:	f7ff ff21 	bl	801080c <_malloc_r>
 80109ca:	6028      	str	r0, [r5, #0]
 80109cc:	6128      	str	r0, [r5, #16]
 80109ce:	b920      	cbnz	r0, 80109da <_svfiprintf_r+0x2e>
 80109d0:	230c      	movs	r3, #12
 80109d2:	603b      	str	r3, [r7, #0]
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	e0d1      	b.n	8010b7e <_svfiprintf_r+0x1d2>
 80109da:	2340      	movs	r3, #64	; 0x40
 80109dc:	616b      	str	r3, [r5, #20]
 80109de:	2300      	movs	r3, #0
 80109e0:	9309      	str	r3, [sp, #36]	; 0x24
 80109e2:	2320      	movs	r3, #32
 80109e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109e8:	2330      	movs	r3, #48	; 0x30
 80109ea:	f04f 0901 	mov.w	r9, #1
 80109ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80109f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b98 <_svfiprintf_r+0x1ec>
 80109f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109fa:	4623      	mov	r3, r4
 80109fc:	469a      	mov	sl, r3
 80109fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a02:	b10a      	cbz	r2, 8010a08 <_svfiprintf_r+0x5c>
 8010a04:	2a25      	cmp	r2, #37	; 0x25
 8010a06:	d1f9      	bne.n	80109fc <_svfiprintf_r+0x50>
 8010a08:	ebba 0b04 	subs.w	fp, sl, r4
 8010a0c:	d00b      	beq.n	8010a26 <_svfiprintf_r+0x7a>
 8010a0e:	465b      	mov	r3, fp
 8010a10:	4622      	mov	r2, r4
 8010a12:	4629      	mov	r1, r5
 8010a14:	4638      	mov	r0, r7
 8010a16:	f7ff ff6d 	bl	80108f4 <__ssputs_r>
 8010a1a:	3001      	adds	r0, #1
 8010a1c:	f000 80aa 	beq.w	8010b74 <_svfiprintf_r+0x1c8>
 8010a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a22:	445a      	add	r2, fp
 8010a24:	9209      	str	r2, [sp, #36]	; 0x24
 8010a26:	f89a 3000 	ldrb.w	r3, [sl]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 80a2 	beq.w	8010b74 <_svfiprintf_r+0x1c8>
 8010a30:	2300      	movs	r3, #0
 8010a32:	f04f 32ff 	mov.w	r2, #4294967295
 8010a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a3a:	f10a 0a01 	add.w	sl, sl, #1
 8010a3e:	9304      	str	r3, [sp, #16]
 8010a40:	9307      	str	r3, [sp, #28]
 8010a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a46:	931a      	str	r3, [sp, #104]	; 0x68
 8010a48:	4654      	mov	r4, sl
 8010a4a:	2205      	movs	r2, #5
 8010a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a50:	4851      	ldr	r0, [pc, #324]	; (8010b98 <_svfiprintf_r+0x1ec>)
 8010a52:	f7ff f98b 	bl	800fd6c <memchr>
 8010a56:	9a04      	ldr	r2, [sp, #16]
 8010a58:	b9d8      	cbnz	r0, 8010a92 <_svfiprintf_r+0xe6>
 8010a5a:	06d0      	lsls	r0, r2, #27
 8010a5c:	bf44      	itt	mi
 8010a5e:	2320      	movmi	r3, #32
 8010a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a64:	0711      	lsls	r1, r2, #28
 8010a66:	bf44      	itt	mi
 8010a68:	232b      	movmi	r3, #43	; 0x2b
 8010a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8010a72:	2b2a      	cmp	r3, #42	; 0x2a
 8010a74:	d015      	beq.n	8010aa2 <_svfiprintf_r+0xf6>
 8010a76:	4654      	mov	r4, sl
 8010a78:	2000      	movs	r0, #0
 8010a7a:	f04f 0c0a 	mov.w	ip, #10
 8010a7e:	9a07      	ldr	r2, [sp, #28]
 8010a80:	4621      	mov	r1, r4
 8010a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a86:	3b30      	subs	r3, #48	; 0x30
 8010a88:	2b09      	cmp	r3, #9
 8010a8a:	d94e      	bls.n	8010b2a <_svfiprintf_r+0x17e>
 8010a8c:	b1b0      	cbz	r0, 8010abc <_svfiprintf_r+0x110>
 8010a8e:	9207      	str	r2, [sp, #28]
 8010a90:	e014      	b.n	8010abc <_svfiprintf_r+0x110>
 8010a92:	eba0 0308 	sub.w	r3, r0, r8
 8010a96:	fa09 f303 	lsl.w	r3, r9, r3
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	46a2      	mov	sl, r4
 8010a9e:	9304      	str	r3, [sp, #16]
 8010aa0:	e7d2      	b.n	8010a48 <_svfiprintf_r+0x9c>
 8010aa2:	9b03      	ldr	r3, [sp, #12]
 8010aa4:	1d19      	adds	r1, r3, #4
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	9103      	str	r1, [sp, #12]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	bfbb      	ittet	lt
 8010aae:	425b      	neglt	r3, r3
 8010ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8010ab4:	9307      	strge	r3, [sp, #28]
 8010ab6:	9307      	strlt	r3, [sp, #28]
 8010ab8:	bfb8      	it	lt
 8010aba:	9204      	strlt	r2, [sp, #16]
 8010abc:	7823      	ldrb	r3, [r4, #0]
 8010abe:	2b2e      	cmp	r3, #46	; 0x2e
 8010ac0:	d10c      	bne.n	8010adc <_svfiprintf_r+0x130>
 8010ac2:	7863      	ldrb	r3, [r4, #1]
 8010ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ac6:	d135      	bne.n	8010b34 <_svfiprintf_r+0x188>
 8010ac8:	9b03      	ldr	r3, [sp, #12]
 8010aca:	3402      	adds	r4, #2
 8010acc:	1d1a      	adds	r2, r3, #4
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	9203      	str	r2, [sp, #12]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	bfb8      	it	lt
 8010ad6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ada:	9305      	str	r3, [sp, #20]
 8010adc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010b9c <_svfiprintf_r+0x1f0>
 8010ae0:	2203      	movs	r2, #3
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	7821      	ldrb	r1, [r4, #0]
 8010ae6:	f7ff f941 	bl	800fd6c <memchr>
 8010aea:	b140      	cbz	r0, 8010afe <_svfiprintf_r+0x152>
 8010aec:	2340      	movs	r3, #64	; 0x40
 8010aee:	eba0 000a 	sub.w	r0, r0, sl
 8010af2:	fa03 f000 	lsl.w	r0, r3, r0
 8010af6:	9b04      	ldr	r3, [sp, #16]
 8010af8:	3401      	adds	r4, #1
 8010afa:	4303      	orrs	r3, r0
 8010afc:	9304      	str	r3, [sp, #16]
 8010afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b02:	2206      	movs	r2, #6
 8010b04:	4826      	ldr	r0, [pc, #152]	; (8010ba0 <_svfiprintf_r+0x1f4>)
 8010b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010b0a:	f7ff f92f 	bl	800fd6c <memchr>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	d038      	beq.n	8010b84 <_svfiprintf_r+0x1d8>
 8010b12:	4b24      	ldr	r3, [pc, #144]	; (8010ba4 <_svfiprintf_r+0x1f8>)
 8010b14:	bb1b      	cbnz	r3, 8010b5e <_svfiprintf_r+0x1b2>
 8010b16:	9b03      	ldr	r3, [sp, #12]
 8010b18:	3307      	adds	r3, #7
 8010b1a:	f023 0307 	bic.w	r3, r3, #7
 8010b1e:	3308      	adds	r3, #8
 8010b20:	9303      	str	r3, [sp, #12]
 8010b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b24:	4433      	add	r3, r6
 8010b26:	9309      	str	r3, [sp, #36]	; 0x24
 8010b28:	e767      	b.n	80109fa <_svfiprintf_r+0x4e>
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	2001      	movs	r0, #1
 8010b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b32:	e7a5      	b.n	8010a80 <_svfiprintf_r+0xd4>
 8010b34:	2300      	movs	r3, #0
 8010b36:	f04f 0c0a 	mov.w	ip, #10
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	3401      	adds	r4, #1
 8010b3e:	9305      	str	r3, [sp, #20]
 8010b40:	4620      	mov	r0, r4
 8010b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b46:	3a30      	subs	r2, #48	; 0x30
 8010b48:	2a09      	cmp	r2, #9
 8010b4a:	d903      	bls.n	8010b54 <_svfiprintf_r+0x1a8>
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d0c5      	beq.n	8010adc <_svfiprintf_r+0x130>
 8010b50:	9105      	str	r1, [sp, #20]
 8010b52:	e7c3      	b.n	8010adc <_svfiprintf_r+0x130>
 8010b54:	4604      	mov	r4, r0
 8010b56:	2301      	movs	r3, #1
 8010b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b5c:	e7f0      	b.n	8010b40 <_svfiprintf_r+0x194>
 8010b5e:	ab03      	add	r3, sp, #12
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	462a      	mov	r2, r5
 8010b64:	4638      	mov	r0, r7
 8010b66:	4b10      	ldr	r3, [pc, #64]	; (8010ba8 <_svfiprintf_r+0x1fc>)
 8010b68:	a904      	add	r1, sp, #16
 8010b6a:	f7fc fcdf 	bl	800d52c <_printf_float>
 8010b6e:	1c42      	adds	r2, r0, #1
 8010b70:	4606      	mov	r6, r0
 8010b72:	d1d6      	bne.n	8010b22 <_svfiprintf_r+0x176>
 8010b74:	89ab      	ldrh	r3, [r5, #12]
 8010b76:	065b      	lsls	r3, r3, #25
 8010b78:	f53f af2c 	bmi.w	80109d4 <_svfiprintf_r+0x28>
 8010b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b7e:	b01d      	add	sp, #116	; 0x74
 8010b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b84:	ab03      	add	r3, sp, #12
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	462a      	mov	r2, r5
 8010b8a:	4638      	mov	r0, r7
 8010b8c:	4b06      	ldr	r3, [pc, #24]	; (8010ba8 <_svfiprintf_r+0x1fc>)
 8010b8e:	a904      	add	r1, sp, #16
 8010b90:	f7fc ff68 	bl	800da64 <_printf_i>
 8010b94:	e7eb      	b.n	8010b6e <_svfiprintf_r+0x1c2>
 8010b96:	bf00      	nop
 8010b98:	08011dec 	.word	0x08011dec
 8010b9c:	08011df2 	.word	0x08011df2
 8010ba0:	08011df6 	.word	0x08011df6
 8010ba4:	0800d52d 	.word	0x0800d52d
 8010ba8:	080108f5 	.word	0x080108f5

08010bac <nan>:
 8010bac:	2000      	movs	r0, #0
 8010bae:	4901      	ldr	r1, [pc, #4]	; (8010bb4 <nan+0x8>)
 8010bb0:	4770      	bx	lr
 8010bb2:	bf00      	nop
 8010bb4:	7ff80000 	.word	0x7ff80000

08010bb8 <_sbrk_r>:
 8010bb8:	b538      	push	{r3, r4, r5, lr}
 8010bba:	2300      	movs	r3, #0
 8010bbc:	4d05      	ldr	r5, [pc, #20]	; (8010bd4 <_sbrk_r+0x1c>)
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	4608      	mov	r0, r1
 8010bc2:	602b      	str	r3, [r5, #0]
 8010bc4:	f7f7 f9ae 	bl	8007f24 <_sbrk>
 8010bc8:	1c43      	adds	r3, r0, #1
 8010bca:	d102      	bne.n	8010bd2 <_sbrk_r+0x1a>
 8010bcc:	682b      	ldr	r3, [r5, #0]
 8010bce:	b103      	cbz	r3, 8010bd2 <_sbrk_r+0x1a>
 8010bd0:	6023      	str	r3, [r4, #0]
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	20001c14 	.word	0x20001c14

08010bd8 <__ascii_wctomb>:
 8010bd8:	4603      	mov	r3, r0
 8010bda:	4608      	mov	r0, r1
 8010bdc:	b141      	cbz	r1, 8010bf0 <__ascii_wctomb+0x18>
 8010bde:	2aff      	cmp	r2, #255	; 0xff
 8010be0:	d904      	bls.n	8010bec <__ascii_wctomb+0x14>
 8010be2:	228a      	movs	r2, #138	; 0x8a
 8010be4:	f04f 30ff 	mov.w	r0, #4294967295
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	4770      	bx	lr
 8010bec:	2001      	movs	r0, #1
 8010bee:	700a      	strb	r2, [r1, #0]
 8010bf0:	4770      	bx	lr
	...

08010bf4 <__assert_func>:
 8010bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010bf6:	4614      	mov	r4, r2
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4b09      	ldr	r3, [pc, #36]	; (8010c20 <__assert_func+0x2c>)
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	68d8      	ldr	r0, [r3, #12]
 8010c02:	b14c      	cbz	r4, 8010c18 <__assert_func+0x24>
 8010c04:	4b07      	ldr	r3, [pc, #28]	; (8010c24 <__assert_func+0x30>)
 8010c06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c0a:	9100      	str	r1, [sp, #0]
 8010c0c:	462b      	mov	r3, r5
 8010c0e:	4906      	ldr	r1, [pc, #24]	; (8010c28 <__assert_func+0x34>)
 8010c10:	f000 f80e 	bl	8010c30 <fiprintf>
 8010c14:	f000 fa8a 	bl	801112c <abort>
 8010c18:	4b04      	ldr	r3, [pc, #16]	; (8010c2c <__assert_func+0x38>)
 8010c1a:	461c      	mov	r4, r3
 8010c1c:	e7f3      	b.n	8010c06 <__assert_func+0x12>
 8010c1e:	bf00      	nop
 8010c20:	200001a0 	.word	0x200001a0
 8010c24:	08011dfd 	.word	0x08011dfd
 8010c28:	08011e0a 	.word	0x08011e0a
 8010c2c:	08011e38 	.word	0x08011e38

08010c30 <fiprintf>:
 8010c30:	b40e      	push	{r1, r2, r3}
 8010c32:	b503      	push	{r0, r1, lr}
 8010c34:	4601      	mov	r1, r0
 8010c36:	ab03      	add	r3, sp, #12
 8010c38:	4805      	ldr	r0, [pc, #20]	; (8010c50 <fiprintf+0x20>)
 8010c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c3e:	6800      	ldr	r0, [r0, #0]
 8010c40:	9301      	str	r3, [sp, #4]
 8010c42:	f000 f883 	bl	8010d4c <_vfiprintf_r>
 8010c46:	b002      	add	sp, #8
 8010c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c4c:	b003      	add	sp, #12
 8010c4e:	4770      	bx	lr
 8010c50:	200001a0 	.word	0x200001a0

08010c54 <memmove>:
 8010c54:	4288      	cmp	r0, r1
 8010c56:	b510      	push	{r4, lr}
 8010c58:	eb01 0402 	add.w	r4, r1, r2
 8010c5c:	d902      	bls.n	8010c64 <memmove+0x10>
 8010c5e:	4284      	cmp	r4, r0
 8010c60:	4623      	mov	r3, r4
 8010c62:	d807      	bhi.n	8010c74 <memmove+0x20>
 8010c64:	1e43      	subs	r3, r0, #1
 8010c66:	42a1      	cmp	r1, r4
 8010c68:	d008      	beq.n	8010c7c <memmove+0x28>
 8010c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c72:	e7f8      	b.n	8010c66 <memmove+0x12>
 8010c74:	4601      	mov	r1, r0
 8010c76:	4402      	add	r2, r0
 8010c78:	428a      	cmp	r2, r1
 8010c7a:	d100      	bne.n	8010c7e <memmove+0x2a>
 8010c7c:	bd10      	pop	{r4, pc}
 8010c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c86:	e7f7      	b.n	8010c78 <memmove+0x24>

08010c88 <__malloc_lock>:
 8010c88:	4801      	ldr	r0, [pc, #4]	; (8010c90 <__malloc_lock+0x8>)
 8010c8a:	f000 bc0b 	b.w	80114a4 <__retarget_lock_acquire_recursive>
 8010c8e:	bf00      	nop
 8010c90:	20001c18 	.word	0x20001c18

08010c94 <__malloc_unlock>:
 8010c94:	4801      	ldr	r0, [pc, #4]	; (8010c9c <__malloc_unlock+0x8>)
 8010c96:	f000 bc06 	b.w	80114a6 <__retarget_lock_release_recursive>
 8010c9a:	bf00      	nop
 8010c9c:	20001c18 	.word	0x20001c18

08010ca0 <_realloc_r>:
 8010ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca4:	4680      	mov	r8, r0
 8010ca6:	4614      	mov	r4, r2
 8010ca8:	460e      	mov	r6, r1
 8010caa:	b921      	cbnz	r1, 8010cb6 <_realloc_r+0x16>
 8010cac:	4611      	mov	r1, r2
 8010cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb2:	f7ff bdab 	b.w	801080c <_malloc_r>
 8010cb6:	b92a      	cbnz	r2, 8010cc4 <_realloc_r+0x24>
 8010cb8:	f7ff fd40 	bl	801073c <_free_r>
 8010cbc:	4625      	mov	r5, r4
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc4:	f000 fc56 	bl	8011574 <_malloc_usable_size_r>
 8010cc8:	4284      	cmp	r4, r0
 8010cca:	4607      	mov	r7, r0
 8010ccc:	d802      	bhi.n	8010cd4 <_realloc_r+0x34>
 8010cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010cd2:	d812      	bhi.n	8010cfa <_realloc_r+0x5a>
 8010cd4:	4621      	mov	r1, r4
 8010cd6:	4640      	mov	r0, r8
 8010cd8:	f7ff fd98 	bl	801080c <_malloc_r>
 8010cdc:	4605      	mov	r5, r0
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d0ed      	beq.n	8010cbe <_realloc_r+0x1e>
 8010ce2:	42bc      	cmp	r4, r7
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	4631      	mov	r1, r6
 8010ce8:	bf28      	it	cs
 8010cea:	463a      	movcs	r2, r7
 8010cec:	f7ff f84c 	bl	800fd88 <memcpy>
 8010cf0:	4631      	mov	r1, r6
 8010cf2:	4640      	mov	r0, r8
 8010cf4:	f7ff fd22 	bl	801073c <_free_r>
 8010cf8:	e7e1      	b.n	8010cbe <_realloc_r+0x1e>
 8010cfa:	4635      	mov	r5, r6
 8010cfc:	e7df      	b.n	8010cbe <_realloc_r+0x1e>

08010cfe <__sfputc_r>:
 8010cfe:	6893      	ldr	r3, [r2, #8]
 8010d00:	b410      	push	{r4}
 8010d02:	3b01      	subs	r3, #1
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	6093      	str	r3, [r2, #8]
 8010d08:	da07      	bge.n	8010d1a <__sfputc_r+0x1c>
 8010d0a:	6994      	ldr	r4, [r2, #24]
 8010d0c:	42a3      	cmp	r3, r4
 8010d0e:	db01      	blt.n	8010d14 <__sfputc_r+0x16>
 8010d10:	290a      	cmp	r1, #10
 8010d12:	d102      	bne.n	8010d1a <__sfputc_r+0x1c>
 8010d14:	bc10      	pop	{r4}
 8010d16:	f000 b949 	b.w	8010fac <__swbuf_r>
 8010d1a:	6813      	ldr	r3, [r2, #0]
 8010d1c:	1c58      	adds	r0, r3, #1
 8010d1e:	6010      	str	r0, [r2, #0]
 8010d20:	7019      	strb	r1, [r3, #0]
 8010d22:	4608      	mov	r0, r1
 8010d24:	bc10      	pop	{r4}
 8010d26:	4770      	bx	lr

08010d28 <__sfputs_r>:
 8010d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	460f      	mov	r7, r1
 8010d2e:	4614      	mov	r4, r2
 8010d30:	18d5      	adds	r5, r2, r3
 8010d32:	42ac      	cmp	r4, r5
 8010d34:	d101      	bne.n	8010d3a <__sfputs_r+0x12>
 8010d36:	2000      	movs	r0, #0
 8010d38:	e007      	b.n	8010d4a <__sfputs_r+0x22>
 8010d3a:	463a      	mov	r2, r7
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d42:	f7ff ffdc 	bl	8010cfe <__sfputc_r>
 8010d46:	1c43      	adds	r3, r0, #1
 8010d48:	d1f3      	bne.n	8010d32 <__sfputs_r+0xa>
 8010d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010d4c <_vfiprintf_r>:
 8010d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d50:	460d      	mov	r5, r1
 8010d52:	4614      	mov	r4, r2
 8010d54:	4698      	mov	r8, r3
 8010d56:	4606      	mov	r6, r0
 8010d58:	b09d      	sub	sp, #116	; 0x74
 8010d5a:	b118      	cbz	r0, 8010d64 <_vfiprintf_r+0x18>
 8010d5c:	6983      	ldr	r3, [r0, #24]
 8010d5e:	b90b      	cbnz	r3, 8010d64 <_vfiprintf_r+0x18>
 8010d60:	f000 fb02 	bl	8011368 <__sinit>
 8010d64:	4b89      	ldr	r3, [pc, #548]	; (8010f8c <_vfiprintf_r+0x240>)
 8010d66:	429d      	cmp	r5, r3
 8010d68:	d11b      	bne.n	8010da2 <_vfiprintf_r+0x56>
 8010d6a:	6875      	ldr	r5, [r6, #4]
 8010d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d6e:	07d9      	lsls	r1, r3, #31
 8010d70:	d405      	bmi.n	8010d7e <_vfiprintf_r+0x32>
 8010d72:	89ab      	ldrh	r3, [r5, #12]
 8010d74:	059a      	lsls	r2, r3, #22
 8010d76:	d402      	bmi.n	8010d7e <_vfiprintf_r+0x32>
 8010d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d7a:	f000 fb93 	bl	80114a4 <__retarget_lock_acquire_recursive>
 8010d7e:	89ab      	ldrh	r3, [r5, #12]
 8010d80:	071b      	lsls	r3, r3, #28
 8010d82:	d501      	bpl.n	8010d88 <_vfiprintf_r+0x3c>
 8010d84:	692b      	ldr	r3, [r5, #16]
 8010d86:	b9eb      	cbnz	r3, 8010dc4 <_vfiprintf_r+0x78>
 8010d88:	4629      	mov	r1, r5
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f000 f960 	bl	8011050 <__swsetup_r>
 8010d90:	b1c0      	cbz	r0, 8010dc4 <_vfiprintf_r+0x78>
 8010d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d94:	07dc      	lsls	r4, r3, #31
 8010d96:	d50e      	bpl.n	8010db6 <_vfiprintf_r+0x6a>
 8010d98:	f04f 30ff 	mov.w	r0, #4294967295
 8010d9c:	b01d      	add	sp, #116	; 0x74
 8010d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da2:	4b7b      	ldr	r3, [pc, #492]	; (8010f90 <_vfiprintf_r+0x244>)
 8010da4:	429d      	cmp	r5, r3
 8010da6:	d101      	bne.n	8010dac <_vfiprintf_r+0x60>
 8010da8:	68b5      	ldr	r5, [r6, #8]
 8010daa:	e7df      	b.n	8010d6c <_vfiprintf_r+0x20>
 8010dac:	4b79      	ldr	r3, [pc, #484]	; (8010f94 <_vfiprintf_r+0x248>)
 8010dae:	429d      	cmp	r5, r3
 8010db0:	bf08      	it	eq
 8010db2:	68f5      	ldreq	r5, [r6, #12]
 8010db4:	e7da      	b.n	8010d6c <_vfiprintf_r+0x20>
 8010db6:	89ab      	ldrh	r3, [r5, #12]
 8010db8:	0598      	lsls	r0, r3, #22
 8010dba:	d4ed      	bmi.n	8010d98 <_vfiprintf_r+0x4c>
 8010dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010dbe:	f000 fb72 	bl	80114a6 <__retarget_lock_release_recursive>
 8010dc2:	e7e9      	b.n	8010d98 <_vfiprintf_r+0x4c>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8010dc8:	2320      	movs	r3, #32
 8010dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010dce:	2330      	movs	r3, #48	; 0x30
 8010dd0:	f04f 0901 	mov.w	r9, #1
 8010dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010dd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010f98 <_vfiprintf_r+0x24c>
 8010ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010de0:	4623      	mov	r3, r4
 8010de2:	469a      	mov	sl, r3
 8010de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010de8:	b10a      	cbz	r2, 8010dee <_vfiprintf_r+0xa2>
 8010dea:	2a25      	cmp	r2, #37	; 0x25
 8010dec:	d1f9      	bne.n	8010de2 <_vfiprintf_r+0x96>
 8010dee:	ebba 0b04 	subs.w	fp, sl, r4
 8010df2:	d00b      	beq.n	8010e0c <_vfiprintf_r+0xc0>
 8010df4:	465b      	mov	r3, fp
 8010df6:	4622      	mov	r2, r4
 8010df8:	4629      	mov	r1, r5
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7ff ff94 	bl	8010d28 <__sfputs_r>
 8010e00:	3001      	adds	r0, #1
 8010e02:	f000 80aa 	beq.w	8010f5a <_vfiprintf_r+0x20e>
 8010e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e08:	445a      	add	r2, fp
 8010e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8010e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 80a2 	beq.w	8010f5a <_vfiprintf_r+0x20e>
 8010e16:	2300      	movs	r3, #0
 8010e18:	f04f 32ff 	mov.w	r2, #4294967295
 8010e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e20:	f10a 0a01 	add.w	sl, sl, #1
 8010e24:	9304      	str	r3, [sp, #16]
 8010e26:	9307      	str	r3, [sp, #28]
 8010e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8010e2e:	4654      	mov	r4, sl
 8010e30:	2205      	movs	r2, #5
 8010e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e36:	4858      	ldr	r0, [pc, #352]	; (8010f98 <_vfiprintf_r+0x24c>)
 8010e38:	f7fe ff98 	bl	800fd6c <memchr>
 8010e3c:	9a04      	ldr	r2, [sp, #16]
 8010e3e:	b9d8      	cbnz	r0, 8010e78 <_vfiprintf_r+0x12c>
 8010e40:	06d1      	lsls	r1, r2, #27
 8010e42:	bf44      	itt	mi
 8010e44:	2320      	movmi	r3, #32
 8010e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e4a:	0713      	lsls	r3, r2, #28
 8010e4c:	bf44      	itt	mi
 8010e4e:	232b      	movmi	r3, #43	; 0x2b
 8010e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e54:	f89a 3000 	ldrb.w	r3, [sl]
 8010e58:	2b2a      	cmp	r3, #42	; 0x2a
 8010e5a:	d015      	beq.n	8010e88 <_vfiprintf_r+0x13c>
 8010e5c:	4654      	mov	r4, sl
 8010e5e:	2000      	movs	r0, #0
 8010e60:	f04f 0c0a 	mov.w	ip, #10
 8010e64:	9a07      	ldr	r2, [sp, #28]
 8010e66:	4621      	mov	r1, r4
 8010e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e6c:	3b30      	subs	r3, #48	; 0x30
 8010e6e:	2b09      	cmp	r3, #9
 8010e70:	d94e      	bls.n	8010f10 <_vfiprintf_r+0x1c4>
 8010e72:	b1b0      	cbz	r0, 8010ea2 <_vfiprintf_r+0x156>
 8010e74:	9207      	str	r2, [sp, #28]
 8010e76:	e014      	b.n	8010ea2 <_vfiprintf_r+0x156>
 8010e78:	eba0 0308 	sub.w	r3, r0, r8
 8010e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8010e80:	4313      	orrs	r3, r2
 8010e82:	46a2      	mov	sl, r4
 8010e84:	9304      	str	r3, [sp, #16]
 8010e86:	e7d2      	b.n	8010e2e <_vfiprintf_r+0xe2>
 8010e88:	9b03      	ldr	r3, [sp, #12]
 8010e8a:	1d19      	adds	r1, r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	9103      	str	r1, [sp, #12]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	bfbb      	ittet	lt
 8010e94:	425b      	neglt	r3, r3
 8010e96:	f042 0202 	orrlt.w	r2, r2, #2
 8010e9a:	9307      	strge	r3, [sp, #28]
 8010e9c:	9307      	strlt	r3, [sp, #28]
 8010e9e:	bfb8      	it	lt
 8010ea0:	9204      	strlt	r2, [sp, #16]
 8010ea2:	7823      	ldrb	r3, [r4, #0]
 8010ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8010ea6:	d10c      	bne.n	8010ec2 <_vfiprintf_r+0x176>
 8010ea8:	7863      	ldrb	r3, [r4, #1]
 8010eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8010eac:	d135      	bne.n	8010f1a <_vfiprintf_r+0x1ce>
 8010eae:	9b03      	ldr	r3, [sp, #12]
 8010eb0:	3402      	adds	r4, #2
 8010eb2:	1d1a      	adds	r2, r3, #4
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	9203      	str	r2, [sp, #12]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	bfb8      	it	lt
 8010ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ec0:	9305      	str	r3, [sp, #20]
 8010ec2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010f9c <_vfiprintf_r+0x250>
 8010ec6:	2203      	movs	r2, #3
 8010ec8:	4650      	mov	r0, sl
 8010eca:	7821      	ldrb	r1, [r4, #0]
 8010ecc:	f7fe ff4e 	bl	800fd6c <memchr>
 8010ed0:	b140      	cbz	r0, 8010ee4 <_vfiprintf_r+0x198>
 8010ed2:	2340      	movs	r3, #64	; 0x40
 8010ed4:	eba0 000a 	sub.w	r0, r0, sl
 8010ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8010edc:	9b04      	ldr	r3, [sp, #16]
 8010ede:	3401      	adds	r4, #1
 8010ee0:	4303      	orrs	r3, r0
 8010ee2:	9304      	str	r3, [sp, #16]
 8010ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee8:	2206      	movs	r2, #6
 8010eea:	482d      	ldr	r0, [pc, #180]	; (8010fa0 <_vfiprintf_r+0x254>)
 8010eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ef0:	f7fe ff3c 	bl	800fd6c <memchr>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d03f      	beq.n	8010f78 <_vfiprintf_r+0x22c>
 8010ef8:	4b2a      	ldr	r3, [pc, #168]	; (8010fa4 <_vfiprintf_r+0x258>)
 8010efa:	bb1b      	cbnz	r3, 8010f44 <_vfiprintf_r+0x1f8>
 8010efc:	9b03      	ldr	r3, [sp, #12]
 8010efe:	3307      	adds	r3, #7
 8010f00:	f023 0307 	bic.w	r3, r3, #7
 8010f04:	3308      	adds	r3, #8
 8010f06:	9303      	str	r3, [sp, #12]
 8010f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f0a:	443b      	add	r3, r7
 8010f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010f0e:	e767      	b.n	8010de0 <_vfiprintf_r+0x94>
 8010f10:	460c      	mov	r4, r1
 8010f12:	2001      	movs	r0, #1
 8010f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f18:	e7a5      	b.n	8010e66 <_vfiprintf_r+0x11a>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f04f 0c0a 	mov.w	ip, #10
 8010f20:	4619      	mov	r1, r3
 8010f22:	3401      	adds	r4, #1
 8010f24:	9305      	str	r3, [sp, #20]
 8010f26:	4620      	mov	r0, r4
 8010f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f2c:	3a30      	subs	r2, #48	; 0x30
 8010f2e:	2a09      	cmp	r2, #9
 8010f30:	d903      	bls.n	8010f3a <_vfiprintf_r+0x1ee>
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0c5      	beq.n	8010ec2 <_vfiprintf_r+0x176>
 8010f36:	9105      	str	r1, [sp, #20]
 8010f38:	e7c3      	b.n	8010ec2 <_vfiprintf_r+0x176>
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f42:	e7f0      	b.n	8010f26 <_vfiprintf_r+0x1da>
 8010f44:	ab03      	add	r3, sp, #12
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	462a      	mov	r2, r5
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4b16      	ldr	r3, [pc, #88]	; (8010fa8 <_vfiprintf_r+0x25c>)
 8010f4e:	a904      	add	r1, sp, #16
 8010f50:	f7fc faec 	bl	800d52c <_printf_float>
 8010f54:	4607      	mov	r7, r0
 8010f56:	1c78      	adds	r0, r7, #1
 8010f58:	d1d6      	bne.n	8010f08 <_vfiprintf_r+0x1bc>
 8010f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f5c:	07d9      	lsls	r1, r3, #31
 8010f5e:	d405      	bmi.n	8010f6c <_vfiprintf_r+0x220>
 8010f60:	89ab      	ldrh	r3, [r5, #12]
 8010f62:	059a      	lsls	r2, r3, #22
 8010f64:	d402      	bmi.n	8010f6c <_vfiprintf_r+0x220>
 8010f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f68:	f000 fa9d 	bl	80114a6 <__retarget_lock_release_recursive>
 8010f6c:	89ab      	ldrh	r3, [r5, #12]
 8010f6e:	065b      	lsls	r3, r3, #25
 8010f70:	f53f af12 	bmi.w	8010d98 <_vfiprintf_r+0x4c>
 8010f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f76:	e711      	b.n	8010d9c <_vfiprintf_r+0x50>
 8010f78:	ab03      	add	r3, sp, #12
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	462a      	mov	r2, r5
 8010f7e:	4630      	mov	r0, r6
 8010f80:	4b09      	ldr	r3, [pc, #36]	; (8010fa8 <_vfiprintf_r+0x25c>)
 8010f82:	a904      	add	r1, sp, #16
 8010f84:	f7fc fd6e 	bl	800da64 <_printf_i>
 8010f88:	e7e4      	b.n	8010f54 <_vfiprintf_r+0x208>
 8010f8a:	bf00      	nop
 8010f8c:	08011f5c 	.word	0x08011f5c
 8010f90:	08011f7c 	.word	0x08011f7c
 8010f94:	08011f3c 	.word	0x08011f3c
 8010f98:	08011dec 	.word	0x08011dec
 8010f9c:	08011df2 	.word	0x08011df2
 8010fa0:	08011df6 	.word	0x08011df6
 8010fa4:	0800d52d 	.word	0x0800d52d
 8010fa8:	08010d29 	.word	0x08010d29

08010fac <__swbuf_r>:
 8010fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fae:	460e      	mov	r6, r1
 8010fb0:	4614      	mov	r4, r2
 8010fb2:	4605      	mov	r5, r0
 8010fb4:	b118      	cbz	r0, 8010fbe <__swbuf_r+0x12>
 8010fb6:	6983      	ldr	r3, [r0, #24]
 8010fb8:	b90b      	cbnz	r3, 8010fbe <__swbuf_r+0x12>
 8010fba:	f000 f9d5 	bl	8011368 <__sinit>
 8010fbe:	4b21      	ldr	r3, [pc, #132]	; (8011044 <__swbuf_r+0x98>)
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	d12b      	bne.n	801101c <__swbuf_r+0x70>
 8010fc4:	686c      	ldr	r4, [r5, #4]
 8010fc6:	69a3      	ldr	r3, [r4, #24]
 8010fc8:	60a3      	str	r3, [r4, #8]
 8010fca:	89a3      	ldrh	r3, [r4, #12]
 8010fcc:	071a      	lsls	r2, r3, #28
 8010fce:	d52f      	bpl.n	8011030 <__swbuf_r+0x84>
 8010fd0:	6923      	ldr	r3, [r4, #16]
 8010fd2:	b36b      	cbz	r3, 8011030 <__swbuf_r+0x84>
 8010fd4:	6923      	ldr	r3, [r4, #16]
 8010fd6:	6820      	ldr	r0, [r4, #0]
 8010fd8:	b2f6      	uxtb	r6, r6
 8010fda:	1ac0      	subs	r0, r0, r3
 8010fdc:	6963      	ldr	r3, [r4, #20]
 8010fde:	4637      	mov	r7, r6
 8010fe0:	4283      	cmp	r3, r0
 8010fe2:	dc04      	bgt.n	8010fee <__swbuf_r+0x42>
 8010fe4:	4621      	mov	r1, r4
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	f000 f92a 	bl	8011240 <_fflush_r>
 8010fec:	bb30      	cbnz	r0, 801103c <__swbuf_r+0x90>
 8010fee:	68a3      	ldr	r3, [r4, #8]
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	3b01      	subs	r3, #1
 8010ff4:	60a3      	str	r3, [r4, #8]
 8010ff6:	6823      	ldr	r3, [r4, #0]
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	6022      	str	r2, [r4, #0]
 8010ffc:	701e      	strb	r6, [r3, #0]
 8010ffe:	6963      	ldr	r3, [r4, #20]
 8011000:	4283      	cmp	r3, r0
 8011002:	d004      	beq.n	801100e <__swbuf_r+0x62>
 8011004:	89a3      	ldrh	r3, [r4, #12]
 8011006:	07db      	lsls	r3, r3, #31
 8011008:	d506      	bpl.n	8011018 <__swbuf_r+0x6c>
 801100a:	2e0a      	cmp	r6, #10
 801100c:	d104      	bne.n	8011018 <__swbuf_r+0x6c>
 801100e:	4621      	mov	r1, r4
 8011010:	4628      	mov	r0, r5
 8011012:	f000 f915 	bl	8011240 <_fflush_r>
 8011016:	b988      	cbnz	r0, 801103c <__swbuf_r+0x90>
 8011018:	4638      	mov	r0, r7
 801101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801101c:	4b0a      	ldr	r3, [pc, #40]	; (8011048 <__swbuf_r+0x9c>)
 801101e:	429c      	cmp	r4, r3
 8011020:	d101      	bne.n	8011026 <__swbuf_r+0x7a>
 8011022:	68ac      	ldr	r4, [r5, #8]
 8011024:	e7cf      	b.n	8010fc6 <__swbuf_r+0x1a>
 8011026:	4b09      	ldr	r3, [pc, #36]	; (801104c <__swbuf_r+0xa0>)
 8011028:	429c      	cmp	r4, r3
 801102a:	bf08      	it	eq
 801102c:	68ec      	ldreq	r4, [r5, #12]
 801102e:	e7ca      	b.n	8010fc6 <__swbuf_r+0x1a>
 8011030:	4621      	mov	r1, r4
 8011032:	4628      	mov	r0, r5
 8011034:	f000 f80c 	bl	8011050 <__swsetup_r>
 8011038:	2800      	cmp	r0, #0
 801103a:	d0cb      	beq.n	8010fd4 <__swbuf_r+0x28>
 801103c:	f04f 37ff 	mov.w	r7, #4294967295
 8011040:	e7ea      	b.n	8011018 <__swbuf_r+0x6c>
 8011042:	bf00      	nop
 8011044:	08011f5c 	.word	0x08011f5c
 8011048:	08011f7c 	.word	0x08011f7c
 801104c:	08011f3c 	.word	0x08011f3c

08011050 <__swsetup_r>:
 8011050:	4b32      	ldr	r3, [pc, #200]	; (801111c <__swsetup_r+0xcc>)
 8011052:	b570      	push	{r4, r5, r6, lr}
 8011054:	681d      	ldr	r5, [r3, #0]
 8011056:	4606      	mov	r6, r0
 8011058:	460c      	mov	r4, r1
 801105a:	b125      	cbz	r5, 8011066 <__swsetup_r+0x16>
 801105c:	69ab      	ldr	r3, [r5, #24]
 801105e:	b913      	cbnz	r3, 8011066 <__swsetup_r+0x16>
 8011060:	4628      	mov	r0, r5
 8011062:	f000 f981 	bl	8011368 <__sinit>
 8011066:	4b2e      	ldr	r3, [pc, #184]	; (8011120 <__swsetup_r+0xd0>)
 8011068:	429c      	cmp	r4, r3
 801106a:	d10f      	bne.n	801108c <__swsetup_r+0x3c>
 801106c:	686c      	ldr	r4, [r5, #4]
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011074:	0719      	lsls	r1, r3, #28
 8011076:	d42c      	bmi.n	80110d2 <__swsetup_r+0x82>
 8011078:	06dd      	lsls	r5, r3, #27
 801107a:	d411      	bmi.n	80110a0 <__swsetup_r+0x50>
 801107c:	2309      	movs	r3, #9
 801107e:	6033      	str	r3, [r6, #0]
 8011080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011084:	f04f 30ff 	mov.w	r0, #4294967295
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	e03e      	b.n	801110a <__swsetup_r+0xba>
 801108c:	4b25      	ldr	r3, [pc, #148]	; (8011124 <__swsetup_r+0xd4>)
 801108e:	429c      	cmp	r4, r3
 8011090:	d101      	bne.n	8011096 <__swsetup_r+0x46>
 8011092:	68ac      	ldr	r4, [r5, #8]
 8011094:	e7eb      	b.n	801106e <__swsetup_r+0x1e>
 8011096:	4b24      	ldr	r3, [pc, #144]	; (8011128 <__swsetup_r+0xd8>)
 8011098:	429c      	cmp	r4, r3
 801109a:	bf08      	it	eq
 801109c:	68ec      	ldreq	r4, [r5, #12]
 801109e:	e7e6      	b.n	801106e <__swsetup_r+0x1e>
 80110a0:	0758      	lsls	r0, r3, #29
 80110a2:	d512      	bpl.n	80110ca <__swsetup_r+0x7a>
 80110a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110a6:	b141      	cbz	r1, 80110ba <__swsetup_r+0x6a>
 80110a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ac:	4299      	cmp	r1, r3
 80110ae:	d002      	beq.n	80110b6 <__swsetup_r+0x66>
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7ff fb43 	bl	801073c <_free_r>
 80110b6:	2300      	movs	r3, #0
 80110b8:	6363      	str	r3, [r4, #52]	; 0x34
 80110ba:	89a3      	ldrh	r3, [r4, #12]
 80110bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110c0:	81a3      	strh	r3, [r4, #12]
 80110c2:	2300      	movs	r3, #0
 80110c4:	6063      	str	r3, [r4, #4]
 80110c6:	6923      	ldr	r3, [r4, #16]
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	89a3      	ldrh	r3, [r4, #12]
 80110cc:	f043 0308 	orr.w	r3, r3, #8
 80110d0:	81a3      	strh	r3, [r4, #12]
 80110d2:	6923      	ldr	r3, [r4, #16]
 80110d4:	b94b      	cbnz	r3, 80110ea <__swsetup_r+0x9a>
 80110d6:	89a3      	ldrh	r3, [r4, #12]
 80110d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110e0:	d003      	beq.n	80110ea <__swsetup_r+0x9a>
 80110e2:	4621      	mov	r1, r4
 80110e4:	4630      	mov	r0, r6
 80110e6:	f000 fa05 	bl	80114f4 <__smakebuf_r>
 80110ea:	89a0      	ldrh	r0, [r4, #12]
 80110ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110f0:	f010 0301 	ands.w	r3, r0, #1
 80110f4:	d00a      	beq.n	801110c <__swsetup_r+0xbc>
 80110f6:	2300      	movs	r3, #0
 80110f8:	60a3      	str	r3, [r4, #8]
 80110fa:	6963      	ldr	r3, [r4, #20]
 80110fc:	425b      	negs	r3, r3
 80110fe:	61a3      	str	r3, [r4, #24]
 8011100:	6923      	ldr	r3, [r4, #16]
 8011102:	b943      	cbnz	r3, 8011116 <__swsetup_r+0xc6>
 8011104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011108:	d1ba      	bne.n	8011080 <__swsetup_r+0x30>
 801110a:	bd70      	pop	{r4, r5, r6, pc}
 801110c:	0781      	lsls	r1, r0, #30
 801110e:	bf58      	it	pl
 8011110:	6963      	ldrpl	r3, [r4, #20]
 8011112:	60a3      	str	r3, [r4, #8]
 8011114:	e7f4      	b.n	8011100 <__swsetup_r+0xb0>
 8011116:	2000      	movs	r0, #0
 8011118:	e7f7      	b.n	801110a <__swsetup_r+0xba>
 801111a:	bf00      	nop
 801111c:	200001a0 	.word	0x200001a0
 8011120:	08011f5c 	.word	0x08011f5c
 8011124:	08011f7c 	.word	0x08011f7c
 8011128:	08011f3c 	.word	0x08011f3c

0801112c <abort>:
 801112c:	2006      	movs	r0, #6
 801112e:	b508      	push	{r3, lr}
 8011130:	f000 fa50 	bl	80115d4 <raise>
 8011134:	2001      	movs	r0, #1
 8011136:	f7f6 fec5 	bl	8007ec4 <_exit>
	...

0801113c <__sflush_r>:
 801113c:	898a      	ldrh	r2, [r1, #12]
 801113e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011140:	4605      	mov	r5, r0
 8011142:	0710      	lsls	r0, r2, #28
 8011144:	460c      	mov	r4, r1
 8011146:	d457      	bmi.n	80111f8 <__sflush_r+0xbc>
 8011148:	684b      	ldr	r3, [r1, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	dc04      	bgt.n	8011158 <__sflush_r+0x1c>
 801114e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011150:	2b00      	cmp	r3, #0
 8011152:	dc01      	bgt.n	8011158 <__sflush_r+0x1c>
 8011154:	2000      	movs	r0, #0
 8011156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801115a:	2e00      	cmp	r6, #0
 801115c:	d0fa      	beq.n	8011154 <__sflush_r+0x18>
 801115e:	2300      	movs	r3, #0
 8011160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011164:	682f      	ldr	r7, [r5, #0]
 8011166:	602b      	str	r3, [r5, #0]
 8011168:	d032      	beq.n	80111d0 <__sflush_r+0x94>
 801116a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801116c:	89a3      	ldrh	r3, [r4, #12]
 801116e:	075a      	lsls	r2, r3, #29
 8011170:	d505      	bpl.n	801117e <__sflush_r+0x42>
 8011172:	6863      	ldr	r3, [r4, #4]
 8011174:	1ac0      	subs	r0, r0, r3
 8011176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011178:	b10b      	cbz	r3, 801117e <__sflush_r+0x42>
 801117a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801117c:	1ac0      	subs	r0, r0, r3
 801117e:	2300      	movs	r3, #0
 8011180:	4602      	mov	r2, r0
 8011182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011184:	4628      	mov	r0, r5
 8011186:	6a21      	ldr	r1, [r4, #32]
 8011188:	47b0      	blx	r6
 801118a:	1c43      	adds	r3, r0, #1
 801118c:	89a3      	ldrh	r3, [r4, #12]
 801118e:	d106      	bne.n	801119e <__sflush_r+0x62>
 8011190:	6829      	ldr	r1, [r5, #0]
 8011192:	291d      	cmp	r1, #29
 8011194:	d82c      	bhi.n	80111f0 <__sflush_r+0xb4>
 8011196:	4a29      	ldr	r2, [pc, #164]	; (801123c <__sflush_r+0x100>)
 8011198:	40ca      	lsrs	r2, r1
 801119a:	07d6      	lsls	r6, r2, #31
 801119c:	d528      	bpl.n	80111f0 <__sflush_r+0xb4>
 801119e:	2200      	movs	r2, #0
 80111a0:	6062      	str	r2, [r4, #4]
 80111a2:	6922      	ldr	r2, [r4, #16]
 80111a4:	04d9      	lsls	r1, r3, #19
 80111a6:	6022      	str	r2, [r4, #0]
 80111a8:	d504      	bpl.n	80111b4 <__sflush_r+0x78>
 80111aa:	1c42      	adds	r2, r0, #1
 80111ac:	d101      	bne.n	80111b2 <__sflush_r+0x76>
 80111ae:	682b      	ldr	r3, [r5, #0]
 80111b0:	b903      	cbnz	r3, 80111b4 <__sflush_r+0x78>
 80111b2:	6560      	str	r0, [r4, #84]	; 0x54
 80111b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111b6:	602f      	str	r7, [r5, #0]
 80111b8:	2900      	cmp	r1, #0
 80111ba:	d0cb      	beq.n	8011154 <__sflush_r+0x18>
 80111bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111c0:	4299      	cmp	r1, r3
 80111c2:	d002      	beq.n	80111ca <__sflush_r+0x8e>
 80111c4:	4628      	mov	r0, r5
 80111c6:	f7ff fab9 	bl	801073c <_free_r>
 80111ca:	2000      	movs	r0, #0
 80111cc:	6360      	str	r0, [r4, #52]	; 0x34
 80111ce:	e7c2      	b.n	8011156 <__sflush_r+0x1a>
 80111d0:	6a21      	ldr	r1, [r4, #32]
 80111d2:	2301      	movs	r3, #1
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b0      	blx	r6
 80111d8:	1c41      	adds	r1, r0, #1
 80111da:	d1c7      	bne.n	801116c <__sflush_r+0x30>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0c4      	beq.n	801116c <__sflush_r+0x30>
 80111e2:	2b1d      	cmp	r3, #29
 80111e4:	d001      	beq.n	80111ea <__sflush_r+0xae>
 80111e6:	2b16      	cmp	r3, #22
 80111e8:	d101      	bne.n	80111ee <__sflush_r+0xb2>
 80111ea:	602f      	str	r7, [r5, #0]
 80111ec:	e7b2      	b.n	8011154 <__sflush_r+0x18>
 80111ee:	89a3      	ldrh	r3, [r4, #12]
 80111f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111f4:	81a3      	strh	r3, [r4, #12]
 80111f6:	e7ae      	b.n	8011156 <__sflush_r+0x1a>
 80111f8:	690f      	ldr	r7, [r1, #16]
 80111fa:	2f00      	cmp	r7, #0
 80111fc:	d0aa      	beq.n	8011154 <__sflush_r+0x18>
 80111fe:	0793      	lsls	r3, r2, #30
 8011200:	bf18      	it	ne
 8011202:	2300      	movne	r3, #0
 8011204:	680e      	ldr	r6, [r1, #0]
 8011206:	bf08      	it	eq
 8011208:	694b      	ldreq	r3, [r1, #20]
 801120a:	1bf6      	subs	r6, r6, r7
 801120c:	600f      	str	r7, [r1, #0]
 801120e:	608b      	str	r3, [r1, #8]
 8011210:	2e00      	cmp	r6, #0
 8011212:	dd9f      	ble.n	8011154 <__sflush_r+0x18>
 8011214:	4633      	mov	r3, r6
 8011216:	463a      	mov	r2, r7
 8011218:	4628      	mov	r0, r5
 801121a:	6a21      	ldr	r1, [r4, #32]
 801121c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8011220:	47e0      	blx	ip
 8011222:	2800      	cmp	r0, #0
 8011224:	dc06      	bgt.n	8011234 <__sflush_r+0xf8>
 8011226:	89a3      	ldrh	r3, [r4, #12]
 8011228:	f04f 30ff 	mov.w	r0, #4294967295
 801122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011230:	81a3      	strh	r3, [r4, #12]
 8011232:	e790      	b.n	8011156 <__sflush_r+0x1a>
 8011234:	4407      	add	r7, r0
 8011236:	1a36      	subs	r6, r6, r0
 8011238:	e7ea      	b.n	8011210 <__sflush_r+0xd4>
 801123a:	bf00      	nop
 801123c:	20400001 	.word	0x20400001

08011240 <_fflush_r>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	690b      	ldr	r3, [r1, #16]
 8011244:	4605      	mov	r5, r0
 8011246:	460c      	mov	r4, r1
 8011248:	b913      	cbnz	r3, 8011250 <_fflush_r+0x10>
 801124a:	2500      	movs	r5, #0
 801124c:	4628      	mov	r0, r5
 801124e:	bd38      	pop	{r3, r4, r5, pc}
 8011250:	b118      	cbz	r0, 801125a <_fflush_r+0x1a>
 8011252:	6983      	ldr	r3, [r0, #24]
 8011254:	b90b      	cbnz	r3, 801125a <_fflush_r+0x1a>
 8011256:	f000 f887 	bl	8011368 <__sinit>
 801125a:	4b14      	ldr	r3, [pc, #80]	; (80112ac <_fflush_r+0x6c>)
 801125c:	429c      	cmp	r4, r3
 801125e:	d11b      	bne.n	8011298 <_fflush_r+0x58>
 8011260:	686c      	ldr	r4, [r5, #4]
 8011262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d0ef      	beq.n	801124a <_fflush_r+0xa>
 801126a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801126c:	07d0      	lsls	r0, r2, #31
 801126e:	d404      	bmi.n	801127a <_fflush_r+0x3a>
 8011270:	0599      	lsls	r1, r3, #22
 8011272:	d402      	bmi.n	801127a <_fflush_r+0x3a>
 8011274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011276:	f000 f915 	bl	80114a4 <__retarget_lock_acquire_recursive>
 801127a:	4628      	mov	r0, r5
 801127c:	4621      	mov	r1, r4
 801127e:	f7ff ff5d 	bl	801113c <__sflush_r>
 8011282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011284:	4605      	mov	r5, r0
 8011286:	07da      	lsls	r2, r3, #31
 8011288:	d4e0      	bmi.n	801124c <_fflush_r+0xc>
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	059b      	lsls	r3, r3, #22
 801128e:	d4dd      	bmi.n	801124c <_fflush_r+0xc>
 8011290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011292:	f000 f908 	bl	80114a6 <__retarget_lock_release_recursive>
 8011296:	e7d9      	b.n	801124c <_fflush_r+0xc>
 8011298:	4b05      	ldr	r3, [pc, #20]	; (80112b0 <_fflush_r+0x70>)
 801129a:	429c      	cmp	r4, r3
 801129c:	d101      	bne.n	80112a2 <_fflush_r+0x62>
 801129e:	68ac      	ldr	r4, [r5, #8]
 80112a0:	e7df      	b.n	8011262 <_fflush_r+0x22>
 80112a2:	4b04      	ldr	r3, [pc, #16]	; (80112b4 <_fflush_r+0x74>)
 80112a4:	429c      	cmp	r4, r3
 80112a6:	bf08      	it	eq
 80112a8:	68ec      	ldreq	r4, [r5, #12]
 80112aa:	e7da      	b.n	8011262 <_fflush_r+0x22>
 80112ac:	08011f5c 	.word	0x08011f5c
 80112b0:	08011f7c 	.word	0x08011f7c
 80112b4:	08011f3c 	.word	0x08011f3c

080112b8 <std>:
 80112b8:	2300      	movs	r3, #0
 80112ba:	b510      	push	{r4, lr}
 80112bc:	4604      	mov	r4, r0
 80112be:	e9c0 3300 	strd	r3, r3, [r0]
 80112c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112c6:	6083      	str	r3, [r0, #8]
 80112c8:	8181      	strh	r1, [r0, #12]
 80112ca:	6643      	str	r3, [r0, #100]	; 0x64
 80112cc:	81c2      	strh	r2, [r0, #14]
 80112ce:	6183      	str	r3, [r0, #24]
 80112d0:	4619      	mov	r1, r3
 80112d2:	2208      	movs	r2, #8
 80112d4:	305c      	adds	r0, #92	; 0x5c
 80112d6:	f7fc f883 	bl	800d3e0 <memset>
 80112da:	4b05      	ldr	r3, [pc, #20]	; (80112f0 <std+0x38>)
 80112dc:	6224      	str	r4, [r4, #32]
 80112de:	6263      	str	r3, [r4, #36]	; 0x24
 80112e0:	4b04      	ldr	r3, [pc, #16]	; (80112f4 <std+0x3c>)
 80112e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80112e4:	4b04      	ldr	r3, [pc, #16]	; (80112f8 <std+0x40>)
 80112e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112e8:	4b04      	ldr	r3, [pc, #16]	; (80112fc <std+0x44>)
 80112ea:	6323      	str	r3, [r4, #48]	; 0x30
 80112ec:	bd10      	pop	{r4, pc}
 80112ee:	bf00      	nop
 80112f0:	0801160d 	.word	0x0801160d
 80112f4:	0801162f 	.word	0x0801162f
 80112f8:	08011667 	.word	0x08011667
 80112fc:	0801168b 	.word	0x0801168b

08011300 <_cleanup_r>:
 8011300:	4901      	ldr	r1, [pc, #4]	; (8011308 <_cleanup_r+0x8>)
 8011302:	f000 b8af 	b.w	8011464 <_fwalk_reent>
 8011306:	bf00      	nop
 8011308:	08011241 	.word	0x08011241

0801130c <__sfmoreglue>:
 801130c:	2268      	movs	r2, #104	; 0x68
 801130e:	b570      	push	{r4, r5, r6, lr}
 8011310:	1e4d      	subs	r5, r1, #1
 8011312:	4355      	muls	r5, r2
 8011314:	460e      	mov	r6, r1
 8011316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801131a:	f7ff fa77 	bl	801080c <_malloc_r>
 801131e:	4604      	mov	r4, r0
 8011320:	b140      	cbz	r0, 8011334 <__sfmoreglue+0x28>
 8011322:	2100      	movs	r1, #0
 8011324:	e9c0 1600 	strd	r1, r6, [r0]
 8011328:	300c      	adds	r0, #12
 801132a:	60a0      	str	r0, [r4, #8]
 801132c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011330:	f7fc f856 	bl	800d3e0 <memset>
 8011334:	4620      	mov	r0, r4
 8011336:	bd70      	pop	{r4, r5, r6, pc}

08011338 <__sfp_lock_acquire>:
 8011338:	4801      	ldr	r0, [pc, #4]	; (8011340 <__sfp_lock_acquire+0x8>)
 801133a:	f000 b8b3 	b.w	80114a4 <__retarget_lock_acquire_recursive>
 801133e:	bf00      	nop
 8011340:	20001c19 	.word	0x20001c19

08011344 <__sfp_lock_release>:
 8011344:	4801      	ldr	r0, [pc, #4]	; (801134c <__sfp_lock_release+0x8>)
 8011346:	f000 b8ae 	b.w	80114a6 <__retarget_lock_release_recursive>
 801134a:	bf00      	nop
 801134c:	20001c19 	.word	0x20001c19

08011350 <__sinit_lock_acquire>:
 8011350:	4801      	ldr	r0, [pc, #4]	; (8011358 <__sinit_lock_acquire+0x8>)
 8011352:	f000 b8a7 	b.w	80114a4 <__retarget_lock_acquire_recursive>
 8011356:	bf00      	nop
 8011358:	20001c1a 	.word	0x20001c1a

0801135c <__sinit_lock_release>:
 801135c:	4801      	ldr	r0, [pc, #4]	; (8011364 <__sinit_lock_release+0x8>)
 801135e:	f000 b8a2 	b.w	80114a6 <__retarget_lock_release_recursive>
 8011362:	bf00      	nop
 8011364:	20001c1a 	.word	0x20001c1a

08011368 <__sinit>:
 8011368:	b510      	push	{r4, lr}
 801136a:	4604      	mov	r4, r0
 801136c:	f7ff fff0 	bl	8011350 <__sinit_lock_acquire>
 8011370:	69a3      	ldr	r3, [r4, #24]
 8011372:	b11b      	cbz	r3, 801137c <__sinit+0x14>
 8011374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011378:	f7ff bff0 	b.w	801135c <__sinit_lock_release>
 801137c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011380:	6523      	str	r3, [r4, #80]	; 0x50
 8011382:	4b13      	ldr	r3, [pc, #76]	; (80113d0 <__sinit+0x68>)
 8011384:	4a13      	ldr	r2, [pc, #76]	; (80113d4 <__sinit+0x6c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	62a2      	str	r2, [r4, #40]	; 0x28
 801138a:	42a3      	cmp	r3, r4
 801138c:	bf08      	it	eq
 801138e:	2301      	moveq	r3, #1
 8011390:	4620      	mov	r0, r4
 8011392:	bf08      	it	eq
 8011394:	61a3      	streq	r3, [r4, #24]
 8011396:	f000 f81f 	bl	80113d8 <__sfp>
 801139a:	6060      	str	r0, [r4, #4]
 801139c:	4620      	mov	r0, r4
 801139e:	f000 f81b 	bl	80113d8 <__sfp>
 80113a2:	60a0      	str	r0, [r4, #8]
 80113a4:	4620      	mov	r0, r4
 80113a6:	f000 f817 	bl	80113d8 <__sfp>
 80113aa:	2200      	movs	r2, #0
 80113ac:	2104      	movs	r1, #4
 80113ae:	60e0      	str	r0, [r4, #12]
 80113b0:	6860      	ldr	r0, [r4, #4]
 80113b2:	f7ff ff81 	bl	80112b8 <std>
 80113b6:	2201      	movs	r2, #1
 80113b8:	2109      	movs	r1, #9
 80113ba:	68a0      	ldr	r0, [r4, #8]
 80113bc:	f7ff ff7c 	bl	80112b8 <std>
 80113c0:	2202      	movs	r2, #2
 80113c2:	2112      	movs	r1, #18
 80113c4:	68e0      	ldr	r0, [r4, #12]
 80113c6:	f7ff ff77 	bl	80112b8 <std>
 80113ca:	2301      	movs	r3, #1
 80113cc:	61a3      	str	r3, [r4, #24]
 80113ce:	e7d1      	b.n	8011374 <__sinit+0xc>
 80113d0:	08011b00 	.word	0x08011b00
 80113d4:	08011301 	.word	0x08011301

080113d8 <__sfp>:
 80113d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113da:	4607      	mov	r7, r0
 80113dc:	f7ff ffac 	bl	8011338 <__sfp_lock_acquire>
 80113e0:	4b1e      	ldr	r3, [pc, #120]	; (801145c <__sfp+0x84>)
 80113e2:	681e      	ldr	r6, [r3, #0]
 80113e4:	69b3      	ldr	r3, [r6, #24]
 80113e6:	b913      	cbnz	r3, 80113ee <__sfp+0x16>
 80113e8:	4630      	mov	r0, r6
 80113ea:	f7ff ffbd 	bl	8011368 <__sinit>
 80113ee:	3648      	adds	r6, #72	; 0x48
 80113f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	d503      	bpl.n	8011400 <__sfp+0x28>
 80113f8:	6833      	ldr	r3, [r6, #0]
 80113fa:	b30b      	cbz	r3, 8011440 <__sfp+0x68>
 80113fc:	6836      	ldr	r6, [r6, #0]
 80113fe:	e7f7      	b.n	80113f0 <__sfp+0x18>
 8011400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011404:	b9d5      	cbnz	r5, 801143c <__sfp+0x64>
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <__sfp+0x88>)
 8011408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801140c:	60e3      	str	r3, [r4, #12]
 801140e:	6665      	str	r5, [r4, #100]	; 0x64
 8011410:	f000 f847 	bl	80114a2 <__retarget_lock_init_recursive>
 8011414:	f7ff ff96 	bl	8011344 <__sfp_lock_release>
 8011418:	2208      	movs	r2, #8
 801141a:	4629      	mov	r1, r5
 801141c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011420:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011424:	6025      	str	r5, [r4, #0]
 8011426:	61a5      	str	r5, [r4, #24]
 8011428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801142c:	f7fb ffd8 	bl	800d3e0 <memset>
 8011430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011438:	4620      	mov	r0, r4
 801143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143c:	3468      	adds	r4, #104	; 0x68
 801143e:	e7d9      	b.n	80113f4 <__sfp+0x1c>
 8011440:	2104      	movs	r1, #4
 8011442:	4638      	mov	r0, r7
 8011444:	f7ff ff62 	bl	801130c <__sfmoreglue>
 8011448:	4604      	mov	r4, r0
 801144a:	6030      	str	r0, [r6, #0]
 801144c:	2800      	cmp	r0, #0
 801144e:	d1d5      	bne.n	80113fc <__sfp+0x24>
 8011450:	f7ff ff78 	bl	8011344 <__sfp_lock_release>
 8011454:	230c      	movs	r3, #12
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	e7ee      	b.n	8011438 <__sfp+0x60>
 801145a:	bf00      	nop
 801145c:	08011b00 	.word	0x08011b00
 8011460:	ffff0001 	.word	0xffff0001

08011464 <_fwalk_reent>:
 8011464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011468:	4606      	mov	r6, r0
 801146a:	4688      	mov	r8, r1
 801146c:	2700      	movs	r7, #0
 801146e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011476:	f1b9 0901 	subs.w	r9, r9, #1
 801147a:	d505      	bpl.n	8011488 <_fwalk_reent+0x24>
 801147c:	6824      	ldr	r4, [r4, #0]
 801147e:	2c00      	cmp	r4, #0
 8011480:	d1f7      	bne.n	8011472 <_fwalk_reent+0xe>
 8011482:	4638      	mov	r0, r7
 8011484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011488:	89ab      	ldrh	r3, [r5, #12]
 801148a:	2b01      	cmp	r3, #1
 801148c:	d907      	bls.n	801149e <_fwalk_reent+0x3a>
 801148e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011492:	3301      	adds	r3, #1
 8011494:	d003      	beq.n	801149e <_fwalk_reent+0x3a>
 8011496:	4629      	mov	r1, r5
 8011498:	4630      	mov	r0, r6
 801149a:	47c0      	blx	r8
 801149c:	4307      	orrs	r7, r0
 801149e:	3568      	adds	r5, #104	; 0x68
 80114a0:	e7e9      	b.n	8011476 <_fwalk_reent+0x12>

080114a2 <__retarget_lock_init_recursive>:
 80114a2:	4770      	bx	lr

080114a4 <__retarget_lock_acquire_recursive>:
 80114a4:	4770      	bx	lr

080114a6 <__retarget_lock_release_recursive>:
 80114a6:	4770      	bx	lr

080114a8 <__swhatbuf_r>:
 80114a8:	b570      	push	{r4, r5, r6, lr}
 80114aa:	460e      	mov	r6, r1
 80114ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114b0:	4614      	mov	r4, r2
 80114b2:	2900      	cmp	r1, #0
 80114b4:	461d      	mov	r5, r3
 80114b6:	b096      	sub	sp, #88	; 0x58
 80114b8:	da08      	bge.n	80114cc <__swhatbuf_r+0x24>
 80114ba:	2200      	movs	r2, #0
 80114bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80114c0:	602a      	str	r2, [r5, #0]
 80114c2:	061a      	lsls	r2, r3, #24
 80114c4:	d410      	bmi.n	80114e8 <__swhatbuf_r+0x40>
 80114c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114ca:	e00e      	b.n	80114ea <__swhatbuf_r+0x42>
 80114cc:	466a      	mov	r2, sp
 80114ce:	f000 f903 	bl	80116d8 <_fstat_r>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	dbf1      	blt.n	80114ba <__swhatbuf_r+0x12>
 80114d6:	9a01      	ldr	r2, [sp, #4]
 80114d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80114dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80114e0:	425a      	negs	r2, r3
 80114e2:	415a      	adcs	r2, r3
 80114e4:	602a      	str	r2, [r5, #0]
 80114e6:	e7ee      	b.n	80114c6 <__swhatbuf_r+0x1e>
 80114e8:	2340      	movs	r3, #64	; 0x40
 80114ea:	2000      	movs	r0, #0
 80114ec:	6023      	str	r3, [r4, #0]
 80114ee:	b016      	add	sp, #88	; 0x58
 80114f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080114f4 <__smakebuf_r>:
 80114f4:	898b      	ldrh	r3, [r1, #12]
 80114f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114f8:	079d      	lsls	r5, r3, #30
 80114fa:	4606      	mov	r6, r0
 80114fc:	460c      	mov	r4, r1
 80114fe:	d507      	bpl.n	8011510 <__smakebuf_r+0x1c>
 8011500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011504:	6023      	str	r3, [r4, #0]
 8011506:	6123      	str	r3, [r4, #16]
 8011508:	2301      	movs	r3, #1
 801150a:	6163      	str	r3, [r4, #20]
 801150c:	b002      	add	sp, #8
 801150e:	bd70      	pop	{r4, r5, r6, pc}
 8011510:	466a      	mov	r2, sp
 8011512:	ab01      	add	r3, sp, #4
 8011514:	f7ff ffc8 	bl	80114a8 <__swhatbuf_r>
 8011518:	9900      	ldr	r1, [sp, #0]
 801151a:	4605      	mov	r5, r0
 801151c:	4630      	mov	r0, r6
 801151e:	f7ff f975 	bl	801080c <_malloc_r>
 8011522:	b948      	cbnz	r0, 8011538 <__smakebuf_r+0x44>
 8011524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011528:	059a      	lsls	r2, r3, #22
 801152a:	d4ef      	bmi.n	801150c <__smakebuf_r+0x18>
 801152c:	f023 0303 	bic.w	r3, r3, #3
 8011530:	f043 0302 	orr.w	r3, r3, #2
 8011534:	81a3      	strh	r3, [r4, #12]
 8011536:	e7e3      	b.n	8011500 <__smakebuf_r+0xc>
 8011538:	4b0d      	ldr	r3, [pc, #52]	; (8011570 <__smakebuf_r+0x7c>)
 801153a:	62b3      	str	r3, [r6, #40]	; 0x28
 801153c:	89a3      	ldrh	r3, [r4, #12]
 801153e:	6020      	str	r0, [r4, #0]
 8011540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011544:	81a3      	strh	r3, [r4, #12]
 8011546:	9b00      	ldr	r3, [sp, #0]
 8011548:	6120      	str	r0, [r4, #16]
 801154a:	6163      	str	r3, [r4, #20]
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	b15b      	cbz	r3, 8011568 <__smakebuf_r+0x74>
 8011550:	4630      	mov	r0, r6
 8011552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011556:	f000 f8d1 	bl	80116fc <_isatty_r>
 801155a:	b128      	cbz	r0, 8011568 <__smakebuf_r+0x74>
 801155c:	89a3      	ldrh	r3, [r4, #12]
 801155e:	f023 0303 	bic.w	r3, r3, #3
 8011562:	f043 0301 	orr.w	r3, r3, #1
 8011566:	81a3      	strh	r3, [r4, #12]
 8011568:	89a0      	ldrh	r0, [r4, #12]
 801156a:	4305      	orrs	r5, r0
 801156c:	81a5      	strh	r5, [r4, #12]
 801156e:	e7cd      	b.n	801150c <__smakebuf_r+0x18>
 8011570:	08011301 	.word	0x08011301

08011574 <_malloc_usable_size_r>:
 8011574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011578:	1f18      	subs	r0, r3, #4
 801157a:	2b00      	cmp	r3, #0
 801157c:	bfbc      	itt	lt
 801157e:	580b      	ldrlt	r3, [r1, r0]
 8011580:	18c0      	addlt	r0, r0, r3
 8011582:	4770      	bx	lr

08011584 <_raise_r>:
 8011584:	291f      	cmp	r1, #31
 8011586:	b538      	push	{r3, r4, r5, lr}
 8011588:	4604      	mov	r4, r0
 801158a:	460d      	mov	r5, r1
 801158c:	d904      	bls.n	8011598 <_raise_r+0x14>
 801158e:	2316      	movs	r3, #22
 8011590:	6003      	str	r3, [r0, #0]
 8011592:	f04f 30ff 	mov.w	r0, #4294967295
 8011596:	bd38      	pop	{r3, r4, r5, pc}
 8011598:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801159a:	b112      	cbz	r2, 80115a2 <_raise_r+0x1e>
 801159c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115a0:	b94b      	cbnz	r3, 80115b6 <_raise_r+0x32>
 80115a2:	4620      	mov	r0, r4
 80115a4:	f000 f830 	bl	8011608 <_getpid_r>
 80115a8:	462a      	mov	r2, r5
 80115aa:	4601      	mov	r1, r0
 80115ac:	4620      	mov	r0, r4
 80115ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115b2:	f000 b817 	b.w	80115e4 <_kill_r>
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	d00a      	beq.n	80115d0 <_raise_r+0x4c>
 80115ba:	1c59      	adds	r1, r3, #1
 80115bc:	d103      	bne.n	80115c6 <_raise_r+0x42>
 80115be:	2316      	movs	r3, #22
 80115c0:	6003      	str	r3, [r0, #0]
 80115c2:	2001      	movs	r0, #1
 80115c4:	e7e7      	b.n	8011596 <_raise_r+0x12>
 80115c6:	2400      	movs	r4, #0
 80115c8:	4628      	mov	r0, r5
 80115ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80115ce:	4798      	blx	r3
 80115d0:	2000      	movs	r0, #0
 80115d2:	e7e0      	b.n	8011596 <_raise_r+0x12>

080115d4 <raise>:
 80115d4:	4b02      	ldr	r3, [pc, #8]	; (80115e0 <raise+0xc>)
 80115d6:	4601      	mov	r1, r0
 80115d8:	6818      	ldr	r0, [r3, #0]
 80115da:	f7ff bfd3 	b.w	8011584 <_raise_r>
 80115de:	bf00      	nop
 80115e0:	200001a0 	.word	0x200001a0

080115e4 <_kill_r>:
 80115e4:	b538      	push	{r3, r4, r5, lr}
 80115e6:	2300      	movs	r3, #0
 80115e8:	4d06      	ldr	r5, [pc, #24]	; (8011604 <_kill_r+0x20>)
 80115ea:	4604      	mov	r4, r0
 80115ec:	4608      	mov	r0, r1
 80115ee:	4611      	mov	r1, r2
 80115f0:	602b      	str	r3, [r5, #0]
 80115f2:	f7f6 fc5d 	bl	8007eb0 <_kill>
 80115f6:	1c43      	adds	r3, r0, #1
 80115f8:	d102      	bne.n	8011600 <_kill_r+0x1c>
 80115fa:	682b      	ldr	r3, [r5, #0]
 80115fc:	b103      	cbz	r3, 8011600 <_kill_r+0x1c>
 80115fe:	6023      	str	r3, [r4, #0]
 8011600:	bd38      	pop	{r3, r4, r5, pc}
 8011602:	bf00      	nop
 8011604:	20001c14 	.word	0x20001c14

08011608 <_getpid_r>:
 8011608:	f7f6 bc50 	b.w	8007eac <_getpid>

0801160c <__sread>:
 801160c:	b510      	push	{r4, lr}
 801160e:	460c      	mov	r4, r1
 8011610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011614:	f000 f894 	bl	8011740 <_read_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	bfab      	itete	ge
 801161c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801161e:	89a3      	ldrhlt	r3, [r4, #12]
 8011620:	181b      	addge	r3, r3, r0
 8011622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011626:	bfac      	ite	ge
 8011628:	6563      	strge	r3, [r4, #84]	; 0x54
 801162a:	81a3      	strhlt	r3, [r4, #12]
 801162c:	bd10      	pop	{r4, pc}

0801162e <__swrite>:
 801162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011632:	461f      	mov	r7, r3
 8011634:	898b      	ldrh	r3, [r1, #12]
 8011636:	4605      	mov	r5, r0
 8011638:	05db      	lsls	r3, r3, #23
 801163a:	460c      	mov	r4, r1
 801163c:	4616      	mov	r6, r2
 801163e:	d505      	bpl.n	801164c <__swrite+0x1e>
 8011640:	2302      	movs	r3, #2
 8011642:	2200      	movs	r2, #0
 8011644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011648:	f000 f868 	bl	801171c <_lseek_r>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	4632      	mov	r2, r6
 8011650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011654:	81a3      	strh	r3, [r4, #12]
 8011656:	4628      	mov	r0, r5
 8011658:	463b      	mov	r3, r7
 801165a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801165e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011662:	f000 b817 	b.w	8011694 <_write_r>

08011666 <__sseek>:
 8011666:	b510      	push	{r4, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801166e:	f000 f855 	bl	801171c <_lseek_r>
 8011672:	1c43      	adds	r3, r0, #1
 8011674:	89a3      	ldrh	r3, [r4, #12]
 8011676:	bf15      	itete	ne
 8011678:	6560      	strne	r0, [r4, #84]	; 0x54
 801167a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801167e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011682:	81a3      	strheq	r3, [r4, #12]
 8011684:	bf18      	it	ne
 8011686:	81a3      	strhne	r3, [r4, #12]
 8011688:	bd10      	pop	{r4, pc}

0801168a <__sclose>:
 801168a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801168e:	f000 b813 	b.w	80116b8 <_close_r>
	...

08011694 <_write_r>:
 8011694:	b538      	push	{r3, r4, r5, lr}
 8011696:	4604      	mov	r4, r0
 8011698:	4608      	mov	r0, r1
 801169a:	4611      	mov	r1, r2
 801169c:	2200      	movs	r2, #0
 801169e:	4d05      	ldr	r5, [pc, #20]	; (80116b4 <_write_r+0x20>)
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f7f6 fc22 	bl	8007eec <_write>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_write_r+0x1e>
 80116ac:	682b      	ldr	r3, [r5, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_write_r+0x1e>
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	20001c14 	.word	0x20001c14

080116b8 <_close_r>:
 80116b8:	b538      	push	{r3, r4, r5, lr}
 80116ba:	2300      	movs	r3, #0
 80116bc:	4d05      	ldr	r5, [pc, #20]	; (80116d4 <_close_r+0x1c>)
 80116be:	4604      	mov	r4, r0
 80116c0:	4608      	mov	r0, r1
 80116c2:	602b      	str	r3, [r5, #0]
 80116c4:	f7f6 fc20 	bl	8007f08 <_close>
 80116c8:	1c43      	adds	r3, r0, #1
 80116ca:	d102      	bne.n	80116d2 <_close_r+0x1a>
 80116cc:	682b      	ldr	r3, [r5, #0]
 80116ce:	b103      	cbz	r3, 80116d2 <_close_r+0x1a>
 80116d0:	6023      	str	r3, [r4, #0]
 80116d2:	bd38      	pop	{r3, r4, r5, pc}
 80116d4:	20001c14 	.word	0x20001c14

080116d8 <_fstat_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	2300      	movs	r3, #0
 80116dc:	4d06      	ldr	r5, [pc, #24]	; (80116f8 <_fstat_r+0x20>)
 80116de:	4604      	mov	r4, r0
 80116e0:	4608      	mov	r0, r1
 80116e2:	4611      	mov	r1, r2
 80116e4:	602b      	str	r3, [r5, #0]
 80116e6:	f7f6 fc13 	bl	8007f10 <_fstat>
 80116ea:	1c43      	adds	r3, r0, #1
 80116ec:	d102      	bne.n	80116f4 <_fstat_r+0x1c>
 80116ee:	682b      	ldr	r3, [r5, #0]
 80116f0:	b103      	cbz	r3, 80116f4 <_fstat_r+0x1c>
 80116f2:	6023      	str	r3, [r4, #0]
 80116f4:	bd38      	pop	{r3, r4, r5, pc}
 80116f6:	bf00      	nop
 80116f8:	20001c14 	.word	0x20001c14

080116fc <_isatty_r>:
 80116fc:	b538      	push	{r3, r4, r5, lr}
 80116fe:	2300      	movs	r3, #0
 8011700:	4d05      	ldr	r5, [pc, #20]	; (8011718 <_isatty_r+0x1c>)
 8011702:	4604      	mov	r4, r0
 8011704:	4608      	mov	r0, r1
 8011706:	602b      	str	r3, [r5, #0]
 8011708:	f7f6 fc08 	bl	8007f1c <_isatty>
 801170c:	1c43      	adds	r3, r0, #1
 801170e:	d102      	bne.n	8011716 <_isatty_r+0x1a>
 8011710:	682b      	ldr	r3, [r5, #0]
 8011712:	b103      	cbz	r3, 8011716 <_isatty_r+0x1a>
 8011714:	6023      	str	r3, [r4, #0]
 8011716:	bd38      	pop	{r3, r4, r5, pc}
 8011718:	20001c14 	.word	0x20001c14

0801171c <_lseek_r>:
 801171c:	b538      	push	{r3, r4, r5, lr}
 801171e:	4604      	mov	r4, r0
 8011720:	4608      	mov	r0, r1
 8011722:	4611      	mov	r1, r2
 8011724:	2200      	movs	r2, #0
 8011726:	4d05      	ldr	r5, [pc, #20]	; (801173c <_lseek_r+0x20>)
 8011728:	602a      	str	r2, [r5, #0]
 801172a:	461a      	mov	r2, r3
 801172c:	f7f6 fbf8 	bl	8007f20 <_lseek>
 8011730:	1c43      	adds	r3, r0, #1
 8011732:	d102      	bne.n	801173a <_lseek_r+0x1e>
 8011734:	682b      	ldr	r3, [r5, #0]
 8011736:	b103      	cbz	r3, 801173a <_lseek_r+0x1e>
 8011738:	6023      	str	r3, [r4, #0]
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	20001c14 	.word	0x20001c14

08011740 <_read_r>:
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	4604      	mov	r4, r0
 8011744:	4608      	mov	r0, r1
 8011746:	4611      	mov	r1, r2
 8011748:	2200      	movs	r2, #0
 801174a:	4d05      	ldr	r5, [pc, #20]	; (8011760 <_read_r+0x20>)
 801174c:	602a      	str	r2, [r5, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	f7f6 fbbe 	bl	8007ed0 <_read>
 8011754:	1c43      	adds	r3, r0, #1
 8011756:	d102      	bne.n	801175e <_read_r+0x1e>
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	b103      	cbz	r3, 801175e <_read_r+0x1e>
 801175c:	6023      	str	r3, [r4, #0]
 801175e:	bd38      	pop	{r3, r4, r5, pc}
 8011760:	20001c14 	.word	0x20001c14

08011764 <_init>:
 8011764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011766:	bf00      	nop
 8011768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801176a:	bc08      	pop	{r3}
 801176c:	469e      	mov	lr, r3
 801176e:	4770      	bx	lr

08011770 <_fini>:
 8011770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011772:	bf00      	nop
 8011774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011776:	bc08      	pop	{r3}
 8011778:	469e      	mov	lr, r3
 801177a:	4770      	bx	lr
