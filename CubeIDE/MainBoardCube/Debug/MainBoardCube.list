
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116dc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08011820  08011820  00021820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801200c  0801200c  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801200c  0801200c  0002200c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012014  08012014  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012014  08012014  00022014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012018  08012018  00022018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0801201c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  2000036c  08012388  0003036c  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20001c10  08012388  00031c10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c96f  00000000  00000000  00030395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005299  00000000  00000000  0005cd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002034b  00000000  00000000  00061f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000822e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006a10  00000000  00000000  00083658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a151  00000000  00000000  0008a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fe4b  00000000  00000000  000a41b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090a7b  00000000  00000000  000d4004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164a7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a0  00000000  00000000  00164ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000036c 	.word	0x2000036c
 800015c:	00000000 	.word	0x00000000
 8000160:	08011804 	.word	0x08011804

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000370 	.word	0x20000370
 800017c:	08011804 	.word	0x08011804

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_f2uiz>:
 800118c:	0042      	lsls	r2, r0, #1
 800118e:	d20e      	bcs.n	80011ae <__aeabi_f2uiz+0x22>
 8001190:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001194:	d30b      	bcc.n	80011ae <__aeabi_f2uiz+0x22>
 8001196:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119e:	d409      	bmi.n	80011b4 <__aeabi_f2uiz+0x28>
 80011a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4770      	bx	lr
 80011b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b8:	d101      	bne.n	80011be <__aeabi_f2uiz+0x32>
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	d102      	bne.n	80011c4 <__aeabi_f2uiz+0x38>
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	4770      	bx	lr
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__aeabi_uldivmod>:
 80011cc:	b953      	cbnz	r3, 80011e4 <__aeabi_uldivmod+0x18>
 80011ce:	b94a      	cbnz	r2, 80011e4 <__aeabi_uldivmod+0x18>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	bf08      	it	eq
 80011d4:	2800      	cmpeq	r0, #0
 80011d6:	bf1c      	itt	ne
 80011d8:	f04f 31ff 	movne.w	r1, #4294967295
 80011dc:	f04f 30ff 	movne.w	r0, #4294967295
 80011e0:	f000 b9ae 	b.w	8001540 <__aeabi_idiv0>
 80011e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ec:	f000 f83e 	bl	800126c <__udivmoddi4>
 80011f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <__aeabi_d2lz>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	460c      	mov	r4, r1
 8001202:	2200      	movs	r2, #0
 8001204:	2300      	movs	r3, #0
 8001206:	4628      	mov	r0, r5
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fbef 	bl	80009ec <__aeabi_dcmplt>
 800120e:	b928      	cbnz	r0, 800121c <__aeabi_d2lz+0x20>
 8001210:	4628      	mov	r0, r5
 8001212:	4621      	mov	r1, r4
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b80a 	b.w	8001230 <__aeabi_d2ulz>
 800121c:	4628      	mov	r0, r5
 800121e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001222:	f000 f805 	bl	8001230 <__aeabi_d2ulz>
 8001226:	4240      	negs	r0, r0
 8001228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop

08001230 <__aeabi_d2ulz>:
 8001230:	b5d0      	push	{r4, r6, r7, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__aeabi_d2ulz+0x34>)
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
 800123a:	f7ff f965 	bl	8000508 <__aeabi_dmul>
 800123e:	f7ff fc3b 	bl	8000ab8 <__aeabi_d2uiz>
 8001242:	4604      	mov	r4, r0
 8001244:	f7ff f8e6 	bl	8000414 <__aeabi_ui2d>
 8001248:	2200      	movs	r2, #0
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <__aeabi_d2ulz+0x38>)
 800124c:	f7ff f95c 	bl	8000508 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7fe ff9e 	bl	8000198 <__aeabi_dsub>
 800125c:	f7ff fc2c 	bl	8000ab8 <__aeabi_d2uiz>
 8001260:	4621      	mov	r1, r4
 8001262:	bdd0      	pop	{r4, r6, r7, pc}
 8001264:	3df00000 	.word	0x3df00000
 8001268:	41f00000 	.word	0x41f00000

0800126c <__udivmoddi4>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	9e08      	ldr	r6, [sp, #32]
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	4688      	mov	r8, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d14d      	bne.n	8001318 <__udivmoddi4+0xac>
 800127c:	428a      	cmp	r2, r1
 800127e:	4694      	mov	ip, r2
 8001280:	d968      	bls.n	8001354 <__udivmoddi4+0xe8>
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b152      	cbz	r2, 800129e <__udivmoddi4+0x32>
 8001288:	fa01 f302 	lsl.w	r3, r1, r2
 800128c:	f1c2 0120 	rsb	r1, r2, #32
 8001290:	fa20 f101 	lsr.w	r1, r0, r1
 8001294:	fa0c fc02 	lsl.w	ip, ip, r2
 8001298:	ea41 0803 	orr.w	r8, r1, r3
 800129c:	4094      	lsls	r4, r2
 800129e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012a2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012a6:	fa1f fe8c 	uxth.w	lr, ip
 80012aa:	fb01 8817 	mls	r8, r1, r7, r8
 80012ae:	fb07 f00e 	mul.w	r0, r7, lr
 80012b2:	0c23      	lsrs	r3, r4, #16
 80012b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x66>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f107 35ff 	add.w	r5, r7, #4294967295
 80012c4:	f080 811e 	bcs.w	8001504 <__udivmoddi4+0x298>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	f240 811b 	bls.w	8001504 <__udivmoddi4+0x298>
 80012ce:	3f02      	subs	r7, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1b      	subs	r3, r3, r0
 80012d4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012d8:	fb01 3310 	mls	r3, r1, r0, r3
 80012dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d90a      	bls.n	8001300 <__udivmoddi4+0x94>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f2:	f080 8109 	bcs.w	8001508 <__udivmoddi4+0x29c>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	f240 8106 	bls.w	8001508 <__udivmoddi4+0x29c>
 80012fc:	4464      	add	r4, ip
 80012fe:	3802      	subs	r0, #2
 8001300:	2100      	movs	r1, #0
 8001302:	eba4 040e 	sub.w	r4, r4, lr
 8001306:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa8>
 800130c:	2300      	movs	r3, #0
 800130e:	40d4      	lsrs	r4, r2
 8001310:	e9c6 4300 	strd	r4, r3, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	428b      	cmp	r3, r1
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0xc2>
 800131c:	2e00      	cmp	r6, #0
 800131e:	f000 80ee 	beq.w	80014fe <__udivmoddi4+0x292>
 8001322:	2100      	movs	r1, #0
 8001324:	e9c6 0500 	strd	r0, r5, [r6]
 8001328:	4608      	mov	r0, r1
 800132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132e:	fab3 f183 	clz	r1, r3
 8001332:	2900      	cmp	r1, #0
 8001334:	d14a      	bne.n	80013cc <__udivmoddi4+0x160>
 8001336:	42ab      	cmp	r3, r5
 8001338:	d302      	bcc.n	8001340 <__udivmoddi4+0xd4>
 800133a:	4282      	cmp	r2, r0
 800133c:	f200 80fc 	bhi.w	8001538 <__udivmoddi4+0x2cc>
 8001340:	1a84      	subs	r4, r0, r2
 8001342:	eb65 0303 	sbc.w	r3, r5, r3
 8001346:	2001      	movs	r0, #1
 8001348:	4698      	mov	r8, r3
 800134a:	2e00      	cmp	r6, #0
 800134c:	d0e2      	beq.n	8001314 <__udivmoddi4+0xa8>
 800134e:	e9c6 4800 	strd	r4, r8, [r6]
 8001352:	e7df      	b.n	8001314 <__udivmoddi4+0xa8>
 8001354:	b902      	cbnz	r2, 8001358 <__udivmoddi4+0xec>
 8001356:	deff      	udf	#255	; 0xff
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	2a00      	cmp	r2, #0
 800135e:	f040 8091 	bne.w	8001484 <__udivmoddi4+0x218>
 8001362:	eba1 000c 	sub.w	r0, r1, ip
 8001366:	2101      	movs	r1, #1
 8001368:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136c:	fa1f fe8c 	uxth.w	lr, ip
 8001370:	fbb0 f3f7 	udiv	r3, r0, r7
 8001374:	fb07 0013 	mls	r0, r7, r3, r0
 8001378:	0c25      	lsrs	r5, r4, #16
 800137a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800137e:	fb0e f003 	mul.w	r0, lr, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x12c>
 8001386:	eb1c 0505 	adds.w	r5, ip, r5
 800138a:	f103 38ff 	add.w	r8, r3, #4294967295
 800138e:	d202      	bcs.n	8001396 <__udivmoddi4+0x12a>
 8001390:	42a8      	cmp	r0, r5
 8001392:	f200 80ce 	bhi.w	8001532 <__udivmoddi4+0x2c6>
 8001396:	4643      	mov	r3, r8
 8001398:	1a2d      	subs	r5, r5, r0
 800139a:	fbb5 f0f7 	udiv	r0, r5, r7
 800139e:	fb07 5510 	mls	r5, r7, r0, r5
 80013a2:	fb0e fe00 	mul.w	lr, lr, r0
 80013a6:	b2a4      	uxth	r4, r4
 80013a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013ac:	45a6      	cmp	lr, r4
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x156>
 80013b0:	eb1c 0404 	adds.w	r4, ip, r4
 80013b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x154>
 80013ba:	45a6      	cmp	lr, r4
 80013bc:	f200 80b6 	bhi.w	800152c <__udivmoddi4+0x2c0>
 80013c0:	4628      	mov	r0, r5
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ca:	e79e      	b.n	800130a <__udivmoddi4+0x9e>
 80013cc:	f1c1 0720 	rsb	r7, r1, #32
 80013d0:	408b      	lsls	r3, r1
 80013d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013da:	fa25 fa07 	lsr.w	sl, r5, r7
 80013de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013e2:	fbba f8f9 	udiv	r8, sl, r9
 80013e6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ea:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ee:	408d      	lsls	r5, r1
 80013f0:	fa1f fe8c 	uxth.w	lr, ip
 80013f4:	431d      	orrs	r5, r3
 80013f6:	fa00 f301 	lsl.w	r3, r0, r1
 80013fa:	fb08 f00e 	mul.w	r0, r8, lr
 80013fe:	0c2c      	lsrs	r4, r5, #16
 8001400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001404:	42a0      	cmp	r0, r4
 8001406:	fa02 f201 	lsl.w	r2, r2, r1
 800140a:	d90b      	bls.n	8001424 <__udivmoddi4+0x1b8>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f108 3aff 	add.w	sl, r8, #4294967295
 8001414:	f080 8088 	bcs.w	8001528 <__udivmoddi4+0x2bc>
 8001418:	42a0      	cmp	r0, r4
 800141a:	f240 8085 	bls.w	8001528 <__udivmoddi4+0x2bc>
 800141e:	f1a8 0802 	sub.w	r8, r8, #2
 8001422:	4464      	add	r4, ip
 8001424:	1a24      	subs	r4, r4, r0
 8001426:	fbb4 f0f9 	udiv	r0, r4, r9
 800142a:	fb09 4410 	mls	r4, r9, r0, r4
 800142e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001432:	b2ad      	uxth	r5, r5
 8001434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x1e2>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f100 35ff 	add.w	r5, r0, #4294967295
 8001444:	d26c      	bcs.n	8001520 <__udivmoddi4+0x2b4>
 8001446:	45a6      	cmp	lr, r4
 8001448:	d96a      	bls.n	8001520 <__udivmoddi4+0x2b4>
 800144a:	3802      	subs	r0, #2
 800144c:	4464      	add	r4, ip
 800144e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001452:	fba0 9502 	umull	r9, r5, r0, r2
 8001456:	eba4 040e 	sub.w	r4, r4, lr
 800145a:	42ac      	cmp	r4, r5
 800145c:	46c8      	mov	r8, r9
 800145e:	46ae      	mov	lr, r5
 8001460:	d356      	bcc.n	8001510 <__udivmoddi4+0x2a4>
 8001462:	d053      	beq.n	800150c <__udivmoddi4+0x2a0>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d069      	beq.n	800153c <__udivmoddi4+0x2d0>
 8001468:	ebb3 0208 	subs.w	r2, r3, r8
 800146c:	eb64 040e 	sbc.w	r4, r4, lr
 8001470:	fa22 f301 	lsr.w	r3, r2, r1
 8001474:	fa04 f707 	lsl.w	r7, r4, r7
 8001478:	431f      	orrs	r7, r3
 800147a:	40cc      	lsrs	r4, r1
 800147c:	e9c6 7400 	strd	r7, r4, [r6]
 8001480:	2100      	movs	r1, #0
 8001482:	e747      	b.n	8001314 <__udivmoddi4+0xa8>
 8001484:	fa0c fc02 	lsl.w	ip, ip, r2
 8001488:	f1c2 0120 	rsb	r1, r2, #32
 800148c:	fa25 f301 	lsr.w	r3, r5, r1
 8001490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001494:	fa20 f101 	lsr.w	r1, r0, r1
 8001498:	4095      	lsls	r5, r2
 800149a:	430d      	orrs	r5, r1
 800149c:	fbb3 f1f7 	udiv	r1, r3, r7
 80014a0:	fb07 3311 	mls	r3, r7, r1, r3
 80014a4:	fa1f fe8c 	uxth.w	lr, ip
 80014a8:	0c28      	lsrs	r0, r5, #16
 80014aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014ae:	fb01 f30e 	mul.w	r3, r1, lr
 80014b2:	4283      	cmp	r3, r0
 80014b4:	fa04 f402 	lsl.w	r4, r4, r2
 80014b8:	d908      	bls.n	80014cc <__udivmoddi4+0x260>
 80014ba:	eb1c 0000 	adds.w	r0, ip, r0
 80014be:	f101 38ff 	add.w	r8, r1, #4294967295
 80014c2:	d22f      	bcs.n	8001524 <__udivmoddi4+0x2b8>
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d92d      	bls.n	8001524 <__udivmoddi4+0x2b8>
 80014c8:	3902      	subs	r1, #2
 80014ca:	4460      	add	r0, ip
 80014cc:	1ac0      	subs	r0, r0, r3
 80014ce:	fbb0 f3f7 	udiv	r3, r0, r7
 80014d2:	fb07 0013 	mls	r0, r7, r3, r0
 80014d6:	b2ad      	uxth	r5, r5
 80014d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014dc:	fb03 f00e 	mul.w	r0, r3, lr
 80014e0:	42a8      	cmp	r0, r5
 80014e2:	d908      	bls.n	80014f6 <__udivmoddi4+0x28a>
 80014e4:	eb1c 0505 	adds.w	r5, ip, r5
 80014e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80014ec:	d216      	bcs.n	800151c <__udivmoddi4+0x2b0>
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d914      	bls.n	800151c <__udivmoddi4+0x2b0>
 80014f2:	3b02      	subs	r3, #2
 80014f4:	4465      	add	r5, ip
 80014f6:	1a28      	subs	r0, r5, r0
 80014f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014fc:	e738      	b.n	8001370 <__udivmoddi4+0x104>
 80014fe:	4631      	mov	r1, r6
 8001500:	4630      	mov	r0, r6
 8001502:	e707      	b.n	8001314 <__udivmoddi4+0xa8>
 8001504:	462f      	mov	r7, r5
 8001506:	e6e4      	b.n	80012d2 <__udivmoddi4+0x66>
 8001508:	4618      	mov	r0, r3
 800150a:	e6f9      	b.n	8001300 <__udivmoddi4+0x94>
 800150c:	454b      	cmp	r3, r9
 800150e:	d2a9      	bcs.n	8001464 <__udivmoddi4+0x1f8>
 8001510:	ebb9 0802 	subs.w	r8, r9, r2
 8001514:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001518:	3801      	subs	r0, #1
 800151a:	e7a3      	b.n	8001464 <__udivmoddi4+0x1f8>
 800151c:	4643      	mov	r3, r8
 800151e:	e7ea      	b.n	80014f6 <__udivmoddi4+0x28a>
 8001520:	4628      	mov	r0, r5
 8001522:	e794      	b.n	800144e <__udivmoddi4+0x1e2>
 8001524:	4641      	mov	r1, r8
 8001526:	e7d1      	b.n	80014cc <__udivmoddi4+0x260>
 8001528:	46d0      	mov	r8, sl
 800152a:	e77b      	b.n	8001424 <__udivmoddi4+0x1b8>
 800152c:	4464      	add	r4, ip
 800152e:	3802      	subs	r0, #2
 8001530:	e747      	b.n	80013c2 <__udivmoddi4+0x156>
 8001532:	3b02      	subs	r3, #2
 8001534:	4465      	add	r5, ip
 8001536:	e72f      	b.n	8001398 <__udivmoddi4+0x12c>
 8001538:	4608      	mov	r0, r1
 800153a:	e706      	b.n	800134a <__udivmoddi4+0xde>
 800153c:	4631      	mov	r1, r6
 800153e:	e6e9      	b.n	8001314 <__udivmoddi4+0xa8>

08001540 <__aeabi_idiv0>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001544:	2300      	movs	r3, #0
{
 8001546:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001548:	4c40      	ldr	r4, [pc, #256]	; (800164c <MX_ADC_Init+0x108>)
{
 800154a:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001550:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001554:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001558:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800155c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001564:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800156e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_ADC_Init+0x10c>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001572:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001574:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800157c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800157e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001582:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001584:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001586:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001588:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800158c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800158e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001592:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001594:	f006 fdbc 	bl	8008110 <HAL_ADC_Init>
 8001598:	b108      	cbz	r0, 800159e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <MX_ADC_Init+0x58>
  AnalogWDGConfig.HighThreshold = 4095;
 800159e:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015a2:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015a4:	2302      	movs	r3, #2
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <MX_ADC_Init+0x110>)
  AnalogWDGConfig.LowThreshold = 0;
 80015a8:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80015b2:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015b6:	f007 f8b1 	bl	800871c <HAL_ADC_AnalogWDGConfig>
 80015ba:	b108      	cbz	r0, 80015c0 <MX_ADC_Init+0x7c>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <MX_ADC_Init+0x7a>
  sConfig.Channel = ADC_CHANNEL_0;
 80015c0:	2200      	movs	r2, #0
 80015c2:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c4:	4669      	mov	r1, sp
 80015c6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80015cc:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ce:	f006 ffd9 	bl	8008584 <HAL_ADC_ConfigChannel>
 80015d2:	b108      	cbz	r0, 80015d8 <MX_ADC_Init+0x94>
 80015d4:	b672      	cpsid	i
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_1;
 80015d8:	2201      	movs	r2, #1
 80015da:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015dc:	4669      	mov	r1, sp
 80015de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80015e0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e4:	f006 ffce 	bl	8008584 <HAL_ADC_ConfigChannel>
 80015e8:	b108      	cbz	r0, 80015ee <MX_ADC_Init+0xaa>
 80015ea:	b672      	cpsid	i
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_2;
 80015ee:	2202      	movs	r2, #2
 80015f0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015fa:	f006 ffc3 	bl	8008584 <HAL_ADC_ConfigChannel>
 80015fe:	b108      	cbz	r0, 8001604 <MX_ADC_Init+0xc0>
 8001600:	b672      	cpsid	i
  while (1)
 8001602:	e7fe      	b.n	8001602 <MX_ADC_Init+0xbe>
  sConfig.Channel = ADC_CHANNEL_3;
 8001604:	2203      	movs	r2, #3
 8001606:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001608:	4669      	mov	r1, sp
 800160a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800160c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001610:	f006 ffb8 	bl	8008584 <HAL_ADC_ConfigChannel>
 8001614:	b108      	cbz	r0, 800161a <MX_ADC_Init+0xd6>
 8001616:	b672      	cpsid	i
  while (1)
 8001618:	e7fe      	b.n	8001618 <MX_ADC_Init+0xd4>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800161a:	2211      	movs	r2, #17
 800161c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161e:	4669      	mov	r1, sp
 8001620:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001622:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001626:	f006 ffad 	bl	8008584 <HAL_ADC_ConfigChannel>
 800162a:	b108      	cbz	r0, 8001630 <MX_ADC_Init+0xec>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <MX_ADC_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001630:	2210      	movs	r2, #16
 8001632:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001634:	4669      	mov	r1, sp
 8001636:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001638:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800163c:	f006 ffa2 	bl	8008584 <HAL_ADC_ConfigChannel>
 8001640:	b108      	cbz	r0, 8001646 <MX_ADC_Init+0x102>
 8001642:	b672      	cpsid	i
  while (1)
 8001644:	e7fe      	b.n	8001644 <MX_ADC_Init+0x100>
}
 8001646:	b00a      	add	sp, #40	; 0x28
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	200003f8 	.word	0x200003f8
 8001650:	40012400 	.word	0x40012400
 8001654:	00800200 	.word	0x00800200

08001658 <update_keypad.part.0>:
	else if(num == '.'){
 8001658:	282e      	cmp	r0, #46	; 0x2e
void update_keypad(char num){
 800165a:	b410      	push	{r4}
	else if(num == '.'){
 800165c:	d00f      	beq.n	800167e <update_keypad.part.0+0x26>
	else if(num >= '0' && num <= '9'){
 800165e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8001662:	2b09      	cmp	r3, #9
 8001664:	d809      	bhi.n	800167a <update_keypad.part.0+0x22>
		if(kpenum == V1 || kpenum == V2){
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <update_keypad.part.0+0x1b4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 800166e:	2901      	cmp	r1, #1
 8001670:	d03d      	beq.n	80016ee <update_keypad.part.0+0x96>
		else if(kpenum == A1 || kpenum == A2){
 8001672:	2b02      	cmp	r3, #2
 8001674:	d017      	beq.n	80016a6 <update_keypad.part.0+0x4e>
 8001676:	2b04      	cmp	r3, #4
 8001678:	d015      	beq.n	80016a6 <update_keypad.part.0+0x4e>
}
 800167a:	bc10      	pop	{r4}
 800167c:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800167e:	4a64      	ldr	r2, [pc, #400]	; (8001810 <update_keypad.part.0+0x1b8>)
 8001680:	f992 3000 	ldrsb.w	r3, [r2]
 8001684:	2b01      	cmp	r3, #1
 8001686:	ddf8      	ble.n	800167a <update_keypad.part.0+0x22>
 8001688:	4962      	ldr	r1, [pc, #392]	; (8001814 <update_keypad.part.0+0x1bc>)
 800168a:	780c      	ldrb	r4, [r1, #0]
 800168c:	2c00      	cmp	r4, #0
 800168e:	d1f4      	bne.n	800167a <update_keypad.part.0+0x22>
			keypaditerator--;
 8001690:	3b01      	subs	r3, #1
 8001692:	7013      	strb	r3, [r2, #0]
			keypaddecimal = 1;
 8001694:	2301      	movs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8001696:	4c60      	ldr	r4, [pc, #384]	; (8001818 <update_keypad.part.0+0x1c0>)
			keypaddecimal = 1;
 8001698:	700b      	strb	r3, [r1, #0]
				keypadarr[i-1] = keypadarr[i];
 800169a:	f8d4 2001 	ldr.w	r2, [r4, #1]
			keypadarr[keypadlength-1] = num;
 800169e:	7120      	strb	r0, [r4, #4]
				keypadarr[i-1] = keypadarr[i];
 80016a0:	6022      	str	r2, [r4, #0]
}
 80016a2:	bc10      	pop	{r4}
 80016a4:	4770      	bx	lr
			if(keypaditerator > 3){
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016a8:	f992 3000 	ldrsb.w	r3, [r2]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	dc15      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016b0:	d068      	beq.n	8001784 <update_keypad.part.0+0x12c>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d076      	beq.n	80017a4 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d07f      	beq.n	80017ba <update_keypad.part.0+0x162>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1dd      	bne.n	800167a <update_keypad.part.0+0x22>
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <update_keypad.part.0+0x1c0>)
 80016c0:	7899      	ldrb	r1, [r3, #2]
 80016c2:	292e      	cmp	r1, #46	; 0x2e
 80016c4:	d1d9      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016c6:	785c      	ldrb	r4, [r3, #1]
 80016c8:	7059      	strb	r1, [r3, #1]
 80016ca:	78d9      	ldrb	r1, [r3, #3]
 80016cc:	701c      	strb	r4, [r3, #0]
 80016ce:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80016d0:	21ff      	movs	r1, #255	; 0xff
					keypadarr[i-1] = keypadarr[i];
 80016d2:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 80016d4:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 80016d6:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 80016d8:	70dc      	strb	r4, [r3, #3]
}
 80016da:	e7ce      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016dc:	494e      	ldr	r1, [pc, #312]	; (8001818 <update_keypad.part.0+0x1c0>)
				keypaditerator--;
 80016de:	3b01      	subs	r3, #1
					keypadarr[i-1] = keypadarr[i];
 80016e0:	f8d1 4001 	ldr.w	r4, [r1, #1]
				keypaditerator--;
 80016e4:	7013      	strb	r3, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80016e6:	600c      	str	r4, [r1, #0]
				keypadarr[keypadlength-1] = num;
 80016e8:	7108      	strb	r0, [r1, #4]
}
 80016ea:	bc10      	pop	{r4}
 80016ec:	4770      	bx	lr
			if(keypaditerator > 2){
 80016ee:	4a48      	ldr	r2, [pc, #288]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016f0:	f992 3000 	ldrsb.w	r3, [r2]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dcf1      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016f8:	d023      	beq.n	8001742 <update_keypad.part.0+0xea>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d010      	beq.n	8001720 <update_keypad.part.0+0xc8>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1bb      	bne.n	800167a <update_keypad.part.0+0x22>
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001704:	78d9      	ldrb	r1, [r3, #3]
 8001706:	292e      	cmp	r1, #46	; 0x2e
 8001708:	d1b7      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800170a:	785c      	ldrb	r4, [r3, #1]
 800170c:	701c      	strb	r4, [r3, #0]
 800170e:	789c      	ldrb	r4, [r3, #2]
 8001710:	7099      	strb	r1, [r3, #2]
 8001712:	7919      	ldrb	r1, [r3, #4]
 8001714:	705c      	strb	r4, [r3, #1]
 8001716:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 8001718:	21ff      	movs	r1, #255	; 0xff
				keypadarr[keypadlength-1] = num;
 800171a:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 800171c:	7011      	strb	r1, [r2, #0]
 800171e:	e7ac      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001722:	78d9      	ldrb	r1, [r3, #3]
 8001724:	292e      	cmp	r1, #46	; 0x2e
 8001726:	d05a      	beq.n	80017de <update_keypad.part.0+0x186>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001728:	791c      	ldrb	r4, [r3, #4]
 800172a:	2c2e      	cmp	r4, #46	; 0x2e
 800172c:	d1a5      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800172e:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001730:	2400      	movs	r4, #0
				keypadarr[keypadlength-1] = num;
 8001732:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001734:	7858      	ldrb	r0, [r3, #1]
				keypaditerator--;
 8001736:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001738:	7018      	strb	r0, [r3, #0]
 800173a:	7898      	ldrb	r0, [r3, #2]
 800173c:	7099      	strb	r1, [r3, #2]
 800173e:	7058      	strb	r0, [r3, #1]
				keypaditerator--;
 8001740:	e79b      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001744:	78dc      	ldrb	r4, [r3, #3]
 8001746:	2c2e      	cmp	r4, #46	; 0x2e
 8001748:	d00e      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800174a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800174e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8001752:	d192      	bne.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001754:	7011      	strb	r1, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001756:	7859      	ldrb	r1, [r3, #1]
 8001758:	789a      	ldrb	r2, [r3, #2]
 800175a:	f883 c003 	strb.w	ip, [r3, #3]
				keypadarr[keypadlength-1] = num;
 800175e:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001760:	7019      	strb	r1, [r3, #0]
 8001762:	705a      	strb	r2, [r3, #1]
 8001764:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 8001766:	e788      	b.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001768:	2401      	movs	r4, #1
					keypadarr[i-1] = keypadarr[i];
 800176a:	212e      	movs	r1, #46	; 0x2e
 800176c:	f893 c001 	ldrb.w	ip, [r3, #1]
				keypaditerator--;
 8001770:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001772:	789c      	ldrb	r4, [r3, #2]
 8001774:	791a      	ldrb	r2, [r3, #4]
 8001776:	f883 c000 	strb.w	ip, [r3]
 800177a:	705c      	strb	r4, [r3, #1]
 800177c:	7099      	strb	r1, [r3, #2]
 800177e:	70da      	strb	r2, [r3, #3]
				keypadarr[keypadlength-1] = num;
 8001780:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001782:	e77a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001786:	7919      	ldrb	r1, [r3, #4]
 8001788:	292e      	cmp	r1, #46	; 0x2e
 800178a:	f47f af76 	bne.w	800167a <update_keypad.part.0+0x22>
				keypadarr[keypadlength-1] = num;
 800178e:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001790:	2002      	movs	r0, #2
					keypadarr[i-1] = keypadarr[i];
 8001792:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 8001794:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001796:	701c      	strb	r4, [r3, #0]
 8001798:	789c      	ldrb	r4, [r3, #2]
 800179a:	705c      	strb	r4, [r3, #1]
 800179c:	78dc      	ldrb	r4, [r3, #3]
 800179e:	70d9      	strb	r1, [r3, #3]
 80017a0:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 80017a2:	e76a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017a6:	78d9      	ldrb	r1, [r3, #3]
 80017a8:	292e      	cmp	r1, #46	; 0x2e
 80017aa:	d0dd      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80017ac:	791c      	ldrb	r4, [r3, #4]
 80017ae:	2c2e      	cmp	r4, #46	; 0x2e
 80017b0:	f47f af63 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017b4:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 80017b6:	2401      	movs	r4, #1
 80017b8:	e7bb      	b.n	8001732 <update_keypad.part.0+0xda>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017bc:	7899      	ldrb	r1, [r3, #2]
 80017be:	292e      	cmp	r1, #46	; 0x2e
 80017c0:	d018      	beq.n	80017f4 <update_keypad.part.0+0x19c>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80017c2:	78dc      	ldrb	r4, [r3, #3]
 80017c4:	2c2e      	cmp	r4, #46	; 0x2e
 80017c6:	f47f af58 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017ca:	709c      	strb	r4, [r3, #2]
 80017cc:	791c      	ldrb	r4, [r3, #4]
				keypadarr[keypadlength-1] = num;
 80017ce:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017d0:	2000      	movs	r0, #0
					keypadarr[i-1] = keypadarr[i];
 80017d2:	70dc      	strb	r4, [r3, #3]
 80017d4:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 80017d6:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80017d8:	7059      	strb	r1, [r3, #1]
 80017da:	701c      	strb	r4, [r3, #0]
				keypaditerator--;
 80017dc:	e74d      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017de:	785c      	ldrb	r4, [r3, #1]
 80017e0:	701c      	strb	r4, [r3, #0]
 80017e2:	789c      	ldrb	r4, [r3, #2]
 80017e4:	7099      	strb	r1, [r3, #2]
 80017e6:	7919      	ldrb	r1, [r3, #4]
 80017e8:	705c      	strb	r4, [r3, #1]
 80017ea:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 80017ec:	2100      	movs	r1, #0
				keypadarr[keypadlength-1] = num;
 80017ee:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017f0:	7011      	strb	r1, [r2, #0]
 80017f2:	e742      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017f4:	785c      	ldrb	r4, [r3, #1]
 80017f6:	7059      	strb	r1, [r3, #1]
 80017f8:	78d9      	ldrb	r1, [r3, #3]
 80017fa:	701c      	strb	r4, [r3, #0]
 80017fc:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80017fe:	2100      	movs	r1, #0
					keypadarr[i-1] = keypadarr[i];
 8001800:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 8001802:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 8001804:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001806:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001808:	e737      	b.n	800167a <update_keypad.part.0+0x22>
 800180a:	bf00      	nop
 800180c:	2000074d 	.word	0x2000074d
 8001810:	2000000d 	.word	0x2000000d
 8001814:	2000074c 	.word	0x2000074c
 8001818:	20000008 	.word	0x20000008

0800181c <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <update_keypad.constprop.0+0x40>)
 800181e:	f992 3000 	ldrsb.w	r3, [r2]
 8001822:	2b03      	cmp	r3, #3
 8001824:	dc13      	bgt.n	800184e <update_keypad.constprop.0+0x32>
			if(keypadarr[4] == '.'){
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <update_keypad.constprop.0+0x44>)
 8001828:	7908      	ldrb	r0, [r1, #4]
 800182a:	282e      	cmp	r0, #46	; 0x2e
 800182c:	d010      	beq.n	8001850 <update_keypad.constprop.0+0x34>
			keypadarr[0] = num;
 800182e:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8001830:	f891 c003 	ldrb.w	ip, [r1, #3]
			keypaditerator++;
 8001834:	3301      	adds	r3, #1
 8001836:	7013      	strb	r3, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8001838:	f881 c004 	strb.w	ip, [r1, #4]
 800183c:	784a      	ldrb	r2, [r1, #1]
 800183e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8001842:	780b      	ldrb	r3, [r1, #0]
 8001844:	f881 c003 	strb.w	ip, [r1, #3]
 8001848:	708a      	strb	r2, [r1, #2]
 800184a:	704b      	strb	r3, [r1, #1]
			keypadarr[0] = num;
 800184c:	7008      	strb	r0, [r1, #0]
}
 800184e:	4770      	bx	lr
				keypaddecimal = 0;
 8001850:	f04f 0c00 	mov.w	ip, #0
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <update_keypad.constprop.0+0x48>)
 8001856:	f880 c000 	strb.w	ip, [r0]
 800185a:	e7e8      	b.n	800182e <update_keypad.constprop.0+0x12>
 800185c:	2000000d 	.word	0x2000000d
 8001860:	20000008 	.word	0x20000008
 8001864:	2000074c 	.word	0x2000074c

08001868 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001868:	2300      	movs	r3, #0
{
 800186a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001872:	2403      	movs	r4, #3
 8001874:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001876:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001880:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001884:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001888:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800188e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001892:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001896:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800189a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018ba:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f008 fe1a 	bl	800a4fc <HAL_RCC_OscConfig>
 80018c8:	b108      	cbz	r0, 80018ce <SystemClock_Config+0x66>
 80018ca:	b672      	cpsid	i
  while (1)
 80018cc:	e7fe      	b.n	80018cc <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ce:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	240f      	movs	r4, #15
 80018d2:	2503      	movs	r5, #3
 80018d4:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018da:	4631      	mov	r1, r6
 80018dc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	e9cd 4500 	strd	r4, r5, [sp]
 80018e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e6:	f009 f869 	bl	800a9bc <HAL_RCC_ClockConfig>
 80018ea:	b108      	cbz	r0, 80018f0 <SystemClock_Config+0x88>
 80018ec:	b672      	cpsid	i
  while (1)
 80018ee:	e7fe      	b.n	80018ee <SystemClock_Config+0x86>
}
 80018f0:	b014      	add	sp, #80	; 0x50
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <EXTI1_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80018fc:	2207      	movs	r2, #7
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <EXTI1_IRQHandler+0x68>)
{
 8001900:	b530      	push	{r4, r5, lr}
	int8_t tempiter = headiter;
 8001902:	4d19      	ldr	r5, [pc, #100]	; (8001968 <EXTI1_IRQHandler+0x6c>)
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001904:	615a      	str	r2, [r3, #20]
	int8_t tempiter = headiter;
 8001906:	f995 c000 	ldrsb.w	ip, [r5]
	if(tempiter != tailiter){
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <EXTI1_IRQHandler+0x70>)
	tempiter++;
 800190c:	f10c 0e01 	add.w	lr, ip, #1
 8001910:	fa4f fe8e 	sxtb.w	lr, lr
	if(tempiter >= CIRCSIZE){
 8001914:	4596      	cmp	lr, r2
	if(tempiter != tailiter){
 8001916:	f993 3000 	ldrsb.w	r3, [r3]
	if(tempiter >= CIRCSIZE){
 800191a:	dc06      	bgt.n	800192a <EXTI1_IRQHandler+0x2e>
	if(tempiter != tailiter){
 800191c:	4573      	cmp	r3, lr
 800191e:	d01a      	beq.n	8001956 <EXTI1_IRQHandler+0x5a>
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001922:	4c14      	ldr	r4, [pc, #80]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001924:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001928:	e006      	b.n	8001938 <EXTI1_IRQHandler+0x3c>
	if(tempiter != tailiter){
 800192a:	b1a3      	cbz	r3, 8001956 <EXTI1_IRQHandler+0x5a>
			headiter = 0;
 800192c:	f04f 0e00 	mov.w	lr, #0
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001932:	4c10      	ldr	r4, [pc, #64]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001934:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800194a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		headiter++;
 8001952:	f885 e000 	strb.w	lr, [r5]
	memset (usbbuffer, '\0', 64); // clear the buffer
 8001956:	2240      	movs	r2, #64	; 0x40
}
 8001958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memset (usbbuffer, '\0', 64); // clear the buffer
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001960:	f00b bd8e 	b.w	800d480 <memset>
 8001964:	40010400 	.word	0x40010400
 8001968:	20000004 	.word	0x20000004
 800196c:	200009a8 	.word	0x200009a8
 8001970:	20000758 	.word	0x20000758
 8001974:	20000a2c 	.word	0x20000a2c

08001978 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001978:	b538      	push	{r3, r4, r5, lr}
	if(val == 0.0){
 800197a:	2100      	movs	r1, #0
void update_ADC_watchdog(float val){
 800197c:	4604      	mov	r4, r0
	if(val == 0.0){
 800197e:	f7ff fbad 	bl	80010dc <__aeabi_fcmpeq>
 8001982:	bb28      	cbnz	r0, 80019d0 <update_ADC_watchdog+0x58>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001984:	4620      	mov	r0, r4
 8001986:	491c      	ldr	r1, [pc, #112]	; (80019f8 <update_ADC_watchdog+0x80>)
 8001988:	f7ff fa14 	bl	8000db4 <__aeabi_fmul>
 800198c:	491b      	ldr	r1, [pc, #108]	; (80019fc <update_ADC_watchdog+0x84>)
 800198e:	f7ff fa11 	bl	8000db4 <__aeabi_fmul>
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <update_ADC_watchdog+0x88>)
 8001994:	f7ff fa0e 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <update_ADC_watchdog+0x8c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800199a:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800199c:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800199e:	8818      	ldrh	r0, [r3, #0]
 80019a0:	f7ff f9b0 	bl	8000d04 <__aeabi_ui2f>
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <update_ADC_watchdog+0x90>)
 80019a6:	4605      	mov	r5, r0
 80019a8:	8918      	ldrh	r0, [r3, #8]
 80019aa:	f7ff f9ab 	bl	8000d04 <__aeabi_ui2f>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fab3 	bl	8000f1c <__aeabi_fdiv>
 80019b6:	4915      	ldr	r1, [pc, #84]	; (8001a0c <update_ADC_watchdog+0x94>)
 80019b8:	f7ff f9fc 	bl	8000db4 <__aeabi_fmul>
 80019bc:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff faac 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <update_ADC_watchdog+0x88>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019c6:	4605      	mov	r5, r0
	else if(amp >= 4095.0){
 80019c8:	f7ff fba6 	bl	8001118 <__aeabi_fcmpge>
 80019cc:	4604      	mov	r4, r0
 80019ce:	b120      	cbz	r0, 80019da <update_ADC_watchdog+0x62>
		ADC1->HTR = 4095;
 80019d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
	else if(amp < 0.0){
 80019da:	4628      	mov	r0, r5
 80019dc:	2100      	movs	r1, #0
 80019de:	f7ff fb87 	bl	80010f0 <__aeabi_fcmplt>
 80019e2:	b928      	cbnz	r0, 80019f0 <update_ADC_watchdog+0x78>
		ADC1->HTR = amp;
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff fbd1 	bl	800118c <__aeabi_f2uiz>
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019ec:	6298      	str	r0, [r3, #40]	; 0x28
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
		ADC1->HTR = 0;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019f2:	629c      	str	r4, [r3, #40]	; 0x28
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop
 80019f8:	3e19999a 	.word	0x3e19999a
 80019fc:	41a00000 	.word	0x41a00000
 8001a00:	457ff000 	.word	0x457ff000
 8001a04:	20000018 	.word	0x20000018
 8001a08:	200003d4 	.word	0x200003d4
 8001a0c:	40400000 	.word	0x40400000
 8001a10:	40012400 	.word	0x40012400

08001a14 <lcd_createChar>:
{
 8001a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a18:	2564      	movs	r5, #100	; 0x64
 8001a1a:	482d      	ldr	r0, [pc, #180]	; (8001ad0 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a1c:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a1e:	4607      	mov	r7, r0
{
 8001a20:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a22:	2304      	movs	r3, #4
 8001a24:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a26:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a28:	9500      	str	r5, [sp, #0]
 8001a2a:	214e      	movs	r1, #78	; 0x4e
 8001a2c:	f007 fc72 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f006 fb5b 	bl	80080ec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a38:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a3a:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	2304      	movs	r3, #4
 8001a40:	4c26      	ldr	r4, [pc, #152]	; (8001adc <lcd_createChar+0xc8>)
 8001a42:	9500      	str	r5, [sp, #0]
 8001a44:	aa03      	add	r2, sp, #12
 8001a46:	f007 fc65 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001a50:	f006 fb4c 	bl	80080ec <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a54:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001a56:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001a5c:	fa02 f103 	lsl.w	r1, r2, r3
 8001a60:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001a62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a66:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a6a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a6e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a72:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a76:	aa03      	add	r2, sp, #12
 8001a78:	214e      	movs	r1, #78	; 0x4e
 8001a7a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a7c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a80:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a84:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a88:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	f007 fc42 	bl	8009314 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f006 fb2b 	bl	80080ec <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 8001a96:	42a6      	cmp	r6, r4
 8001a98:	d1dc      	bne.n	8001a54 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a9a:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a9c:	aa03      	add	r2, sp, #12
 8001a9e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001aa0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa2:	9500      	str	r5, [sp, #0]
 8001aa4:	214e      	movs	r1, #78	; 0x4e
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <lcd_createChar+0xbc>)
 8001aa8:	f007 fc34 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f006 fb1d 	bl	80080ec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab8:	214e      	movs	r1, #78	; 0x4e
 8001aba:	aa03      	add	r2, sp, #12
 8001abc:	9500      	str	r5, [sp, #0]
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <lcd_createChar+0xbc>)
 8001ac0:	f007 fc28 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
}
 8001ac6:	b005      	add	sp, #20
 8001ac8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8001acc:	f006 bb0e 	b.w	80080ec <HAL_Delay>
 8001ad0:	20000534 	.word	0x20000534
 8001ad4:	080c484c 	.word	0x080c484c
 8001ad8:	080c080c 	.word	0x080c080c
 8001adc:	08011aa7 	.word	0x08011aa7
 8001ae0:	282c080c 	.word	0x282c080c

08001ae4 <lcd_init>:
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
{
 8001ae8:	b085      	sub	sp, #20
	HAL_Delay(100);
 8001aea:	f006 faff 	bl	80080ec <HAL_Delay>
 8001aee:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001af2:	4f2e      	ldr	r7, [pc, #184]	; (8001bac <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af4:	4e2e      	ldr	r6, [pc, #184]	; (8001bb0 <lcd_init+0xcc>)
 8001af6:	2304      	movs	r3, #4
 8001af8:	214e      	movs	r1, #78	; 0x4e
 8001afa:	aa03      	add	r2, sp, #12
 8001afc:	4630      	mov	r0, r6
 8001afe:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b00:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b02:	f007 fc07 	bl	8009314 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 8001b06:	202d      	movs	r0, #45	; 0x2d
 8001b08:	f006 faf0 	bl	80080ec <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001b12:	d1f0      	bne.n	8001af6 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001b14:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b18:	2304      	movs	r3, #4
 8001b1a:	aa03      	add	r2, sp, #12
 8001b1c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b20:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <lcd_init+0xcc>)
 8001b22:	214e      	movs	r1, #78	; 0x4e
 8001b24:	f007 fbf6 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f006 fadf 	bl	80080ec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b30:	2304      	movs	r3, #4
 8001b32:	214e      	movs	r1, #78	; 0x4e
 8001b34:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b36:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b38:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <lcd_init+0xcc>)
 8001b3a:	aa03      	add	r2, sp, #12
 8001b3c:	f007 fbea 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f006 fad3 	bl	80080ec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b48:	2304      	movs	r3, #4
 8001b4a:	214e      	movs	r1, #78	; 0x4e
 8001b4c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b4e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b50:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <lcd_init+0xcc>)
 8001b52:	aa03      	add	r2, sp, #12
 8001b54:	f007 fbde 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f006 fac7 	bl	80080ec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b60:	2304      	movs	r3, #4
 8001b62:	214e      	movs	r1, #78	; 0x4e
 8001b64:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b66:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <lcd_init+0xcc>)
 8001b6a:	aa03      	add	r2, sp, #12
 8001b6c:	f007 fbd2 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f006 fabb 	bl	80080ec <HAL_Delay>
	lcd_createChar();
 8001b76:	f7ff ff4d 	bl	8001a14 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b7c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b80:	2304      	movs	r3, #4
 8001b82:	214e      	movs	r1, #78	; 0x4e
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <lcd_init+0xcc>)
 8001b86:	aa03      	add	r2, sp, #12
 8001b88:	f007 fbc4 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b8e:	4e0e      	ldr	r6, [pc, #56]	; (8001bc8 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b90:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <lcd_init+0xcc>)
 8001b92:	2304      	movs	r3, #4
 8001b94:	214e      	movs	r1, #78	; 0x4e
 8001b96:	4628      	mov	r0, r5
 8001b98:	aa03      	add	r2, sp, #12
 8001b9a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b9c:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b9e:	f007 fbb9 	bl	8009314 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 8001ba2:	3c01      	subs	r4, #1
 8001ba4:	d1f5      	bne.n	8001b92 <lcd_init+0xae>
}
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	383c080c 	.word	0x383c080c
 8001bb0:	20000534 	.word	0x20000534
 8001bb4:	282c080c 	.word	0x282c080c
 8001bb8:	888c282c 	.word	0x888c282c
 8001bbc:	c8cc080c 	.word	0xc8cc080c
 8001bc0:	080c888c 	.word	0x080c888c
 8001bc4:	080c080c 	.word	0x080c080c
 8001bc8:	090d292d 	.word	0x090d292d

08001bcc <ourInit>:
void ourInit(void){
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd0:	2201      	movs	r2, #1
void ourInit(void){
 8001bd2:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	486c      	ldr	r0, [pc, #432]	; (8001d88 <ourInit+0x1bc>)
 8001bd8:	f007 faba 	bl	8009150 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001bdc:	486b      	ldr	r0, [pc, #428]	; (8001d8c <ourInit+0x1c0>)
 8001bde:	f006 fb67 	bl	80082b0 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001be2:	486b      	ldr	r0, [pc, #428]	; (8001d90 <ourInit+0x1c4>)
 8001be4:	f006 ffb6 	bl	8008b54 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <ourInit+0x1c8>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bec:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bee:	69d9      	ldr	r1, [r3, #28]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf0:	2564      	movs	r5, #100	; 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001bf6:	61d9      	str	r1, [r3, #28]
 8001bf8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfa:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c00:	9307      	str	r3, [sp, #28]
 8001c02:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c04:	f006 fe70 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f006 feab 	bl	8008964 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	200e      	movs	r0, #14
 8001c12:	4611      	mov	r1, r2
 8001c14:	f006 fe68 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c18:	200e      	movs	r0, #14
 8001c1a:	f006 fea3 	bl	8008964 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	200f      	movs	r0, #15
 8001c22:	4611      	mov	r1, r2
 8001c24:	f006 fe60 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f006 fe9b 	bl	8008964 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001c2e:	f7ff fc89 	bl	8001544 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001c32:	2206      	movs	r2, #6
 8001c34:	4958      	ldr	r1, [pc, #352]	; (8001d98 <ourInit+0x1cc>)
 8001c36:	4855      	ldr	r0, [pc, #340]	; (8001d8c <ourInit+0x1c0>)
 8001c38:	f006 fde4 	bl	8008804 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4857      	ldr	r0, [pc, #348]	; (8001d9c <ourInit+0x1d0>)
 8001c40:	f006 fee0 	bl	8008a04 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c44:	2110      	movs	r1, #16
 8001c46:	4855      	ldr	r0, [pc, #340]	; (8001d9c <ourInit+0x1d0>)
 8001c48:	f006 fedc 	bl	8008a04 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4853      	ldr	r0, [pc, #332]	; (8001d9c <ourInit+0x1d0>)
 8001c50:	461a      	mov	r2, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	f006 ff06 	bl	8008a64 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	484f      	ldr	r0, [pc, #316]	; (8001d9c <ourInit+0x1d0>)
 8001c60:	f006 ff00 	bl	8008a64 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <ourInit+0x1d4>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c68:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001c6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c6e:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c70:	484c      	ldr	r0, [pc, #304]	; (8001da4 <ourInit+0x1d8>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c72:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c74:	f007 f884 	bl	8008d80 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2007      	movs	r0, #7
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	f006 fe33 	bl	80088e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c82:	2007      	movs	r0, #7
 8001c84:	f006 fe6e 	bl	8008964 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c8e:	4846      	ldr	r0, [pc, #280]	; (8001da8 <ourInit+0x1dc>)
 8001c90:	f007 fa5e 	bl	8009150 <HAL_GPIO_WritePin>
	memset (usbbuffer, '\0', 64);  // clear the buffer
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	2100      	movs	r1, #0
 8001c98:	4844      	ldr	r0, [pc, #272]	; (8001dac <ourInit+0x1e0>)
 8001c9a:	f00b fbf1 	bl	800d480 <memset>
	memset (MSG, '\0', 64);  // clear the buffer
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4843      	ldr	r0, [pc, #268]	; (8001db0 <ourInit+0x1e4>)
 8001ca4:	f00b fbec 	bl	800d480 <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	2100      	movs	r1, #0
 8001cac:	4841      	ldr	r0, [pc, #260]	; (8001db4 <ourInit+0x1e8>)
 8001cae:	f00b fbe7 	bl	800d480 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4840      	ldr	r0, [pc, #256]	; (8001db8 <ourInit+0x1ec>)
 8001cb8:	f00b fbe2 	bl	800d480 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	483e      	ldr	r0, [pc, #248]	; (8001dbc <ourInit+0x1f0>)
 8001cc2:	f00b fbdd 	bl	800d480 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	493c      	ldr	r1, [pc, #240]	; (8001dbc <ourInit+0x1f0>)
 8001cca:	483d      	ldr	r0, [pc, #244]	; (8001dc0 <ourInit+0x1f4>)
 8001ccc:	f009 fa78 	bl	800b1c0 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <ourInit+0x1f8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd2:	4e3d      	ldr	r6, [pc, #244]	; (8001dc8 <ourInit+0x1fc>)
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd4:	681f      	ldr	r7, [r3, #0]
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <ourInit+0x200>)
 8001cd8:	4c3d      	ldr	r4, [pc, #244]	; (8001dd0 <ourInit+0x204>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <ourInit+0x208>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	9304      	str	r3, [sp, #16]
 8001ce4:	f7fe fbb8 	bl	8000458 <__aeabi_f2d>
 8001ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cec:	4638      	mov	r0, r7
 8001cee:	f7fe fbb3 	bl	8000458 <__aeabi_f2d>
 8001cf2:	4a39      	ldr	r2, [pc, #228]	; (8001dd8 <ourInit+0x20c>)
 8001cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <ourInit+0x1e8>)
 8001cfc:	f00c f828 	bl	800dd50 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	492c      	ldr	r1, [pc, #176]	; (8001db4 <ourInit+0x1e8>)
 8001d04:	482e      	ldr	r0, [pc, #184]	; (8001dc0 <ourInit+0x1f4>)
 8001d06:	f009 fa1f 	bl	800b148 <HAL_UART_Transmit_DMA>
	lcd_init();
 8001d0a:	f7ff feeb 	bl	8001ae4 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <ourInit+0x210>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d10:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d12:	9308      	str	r3, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d14:	4630      	mov	r0, r6
 8001d16:	2304      	movs	r3, #4
 8001d18:	9500      	str	r5, [sp, #0]
 8001d1a:	aa08      	add	r2, sp, #32
 8001d1c:	f007 fafa 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d20:	2334      	movs	r3, #52	; 0x34
	data_l = ((data<<4)&0xf0);
 8001d22:	011a      	lsls	r2, r3, #4
 8001d24:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d2a:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d2e:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d32:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d36:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	214e      	movs	r1, #78	; 0x4e
 8001d3e:	4630      	mov	r0, r6
 8001d40:	aa08      	add	r2, sp, #32
 8001d42:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d44:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d48:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d4c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d50:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d54:	f007 fade 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e0      	bne.n	8001d22 <ourInit+0x156>
	HAL_TIM_Base_Start_IT(&htim11);
 8001d60:	481f      	ldr	r0, [pc, #124]	; (8001de0 <ourInit+0x214>)
 8001d62:	f008 ffb9 	bl	800acd8 <HAL_TIM_Base_Start_IT>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d66:	4c1f      	ldr	r4, [pc, #124]	; (8001de4 <ourInit+0x218>)
 8001d68:	f504 7500 	add.w	r5, r4, #512	; 0x200
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	4620      	mov	r0, r4
 8001d70:	2100      	movs	r1, #0
	for(int i = 0; i < CIRCSIZE; i++){
 8001d72:	4414      	add	r4, r2
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d74:	f00b fb84 	bl	800d480 <memset>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d78:	42a5      	cmp	r5, r4
 8001d7a:	d1f7      	bne.n	8001d6c <ourInit+0x1a0>
	HAL_TIM_Base_Start_IT(&htim4);
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <ourInit+0x21c>)
}
 8001d7e:	b00c      	add	sp, #48	; 0x30
 8001d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_Base_Start_IT(&htim4);
 8001d84:	f008 bfa8 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	200003f8 	.word	0x200003f8
 8001d90:	20000460 	.word	0x20000460
 8001d94:	40023800 	.word	0x40023800
 8001d98:	200003c8 	.word	0x200003c8
 8001d9c:	2000044c 	.word	0x2000044c
 8001da0:	06000001 	.word	0x06000001
 8001da4:	2000052c 	.word	0x2000052c
 8001da8:	40020800 	.word	0x40020800
 8001dac:	20000a2c 	.word	0x20000a2c
 8001db0:	20000388 	.word	0x20000388
 8001db4:	200009ac 	.word	0x200009ac
 8001db8:	200009ec 	.word	0x200009ec
 8001dbc:	20000960 	.word	0x20000960
 8001dc0:	20000708 	.word	0x20000708
 8001dc4:	20000a70 	.word	0x20000a70
 8001dc8:	20000534 	.word	0x20000534
 8001dcc:	200003e0 	.word	0x200003e0
 8001dd0:	08011820 	.word	0x08011820
 8001dd4:	200003ea 	.word	0x200003ea
 8001dd8:	08011838 	.word	0x08011838
 8001ddc:	080cc8cc 	.word	0x080cc8cc
 8001de0:	200005c8 	.word	0x200005c8
 8001de4:	20000758 	.word	0x20000758
 8001de8:	20000688 	.word	0x20000688
 8001dec:	00000000 	.word	0x00000000

08001df0 <main>:
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	2400      	movs	r4, #0
{
 8001df6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001df8:	f006 f956 	bl	80080a8 <HAL_Init>
  SystemClock_Config();
 8001dfc:	f7ff fd34 	bl	8001868 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001e08:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	4dac      	ldr	r5, [pc, #688]	; (80020c0 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e12:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	61eb      	str	r3, [r5, #28]
 8001e1a:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e1c:	48a9      	ldr	r0, [pc, #676]	; (80020c4 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	9307      	str	r3, [sp, #28]
 8001e24:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	4692      	mov	sl, r2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	61eb      	str	r3, [r5, #28]
 8001e30:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e32:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	9308      	str	r3, [sp, #32]
 8001e3c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e40:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61eb      	str	r3, [r5, #28]
 8001e48:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001e4a:	4f9f      	ldr	r7, [pc, #636]	; (80020c8 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	69eb      	ldr	r3, [r5, #28]
 8001e54:	4333      	orrs	r3, r6
 8001e56:	61eb      	str	r3, [r5, #28]
 8001e58:	69eb      	ldr	r3, [r5, #28]
 8001e5a:	4033      	ands	r3, r6
 8001e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8001e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e60:	69eb      	ldr	r3, [r5, #28]
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	61eb      	str	r3, [r5, #28]
 8001e68:	69eb      	ldr	r3, [r5, #28]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e72:	f007 f96d 	bl	8009150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e76:	4622      	mov	r2, r4
 8001e78:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001e7c:	4893      	ldr	r0, [pc, #588]	; (80020cc <main+0x2dc>)
 8001e7e:	f007 f967 	bl	8009150 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e82:	f64f 420f 	movw	r2, #64527	; 0xfc0f
 8001e86:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	4890      	ldr	r0, [pc, #576]	; (80020cc <main+0x2dc>)
 8001e8a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e90:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f006 ffdb 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	488a      	ldr	r0, [pc, #552]	; (80020c4 <main+0x2d4>)
 8001e9c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e9e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001ea2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f006 ffd1 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eaa:	f248 1280 	movw	r2, #33152	; 0x8180
 8001eae:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	4884      	ldr	r0, [pc, #528]	; (80020c4 <main+0x2d4>)
 8001eb2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eb8:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f006 ffc7 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ebe:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001ec2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	4881      	ldr	r0, [pc, #516]	; (80020cc <main+0x2dc>)
 8001ec6:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ec8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001ecc:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f006 ffbc 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001ed4:	f647 4205 	movw	r2, #31749	; 0x7c05
 8001ed8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	487c      	ldr	r0, [pc, #496]	; (80020d0 <main+0x2e0>)
 8001ede:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001ee0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f006 ffb0 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001eec:	2202      	movs	r2, #2
 8001eee:	2300      	movs	r3, #0
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	4877      	ldr	r0, [pc, #476]	; (80020d0 <main+0x2e0>)
 8001ef2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001ef4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f006 ffa6 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f00:	f248 3238 	movw	r2, #33592	; 0x8338
 8001f04:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	4872      	ldr	r0, [pc, #456]	; (80020d0 <main+0x2e0>)
 8001f08:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f0a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f0e:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f006 ff9c 	bl	8008e4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f14:	2300      	movs	r3, #0
 8001f16:	2204      	movs	r2, #4
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f18:	486e      	ldr	r0, [pc, #440]	; (80020d4 <main+0x2e4>)
 8001f1a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f20:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f006 ff93 	bl	8008e4c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f26:	4622      	mov	r2, r4
 8001f28:	4621      	mov	r1, r4
 8001f2a:	2006      	movs	r0, #6
 8001f2c:	f006 fcdc 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f30:	2006      	movs	r0, #6
 8001f32:	f006 fd17 	bl	8008964 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f36:	4622      	mov	r2, r4
 8001f38:	4621      	mov	r1, r4
 8001f3a:	2008      	movs	r0, #8
 8001f3c:	f006 fcd4 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f40:	2008      	movs	r0, #8
 8001f42:	f006 fd0f 	bl	8008964 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f46:	4622      	mov	r2, r4
 8001f48:	4621      	mov	r1, r4
 8001f4a:	2028      	movs	r0, #40	; 0x28
 8001f4c:	f006 fccc 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f50:	2028      	movs	r0, #40	; 0x28
 8001f52:	f006 fd07 	bl	8008964 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f56:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f58:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5e:	61eb      	str	r3, [r5, #28]
 8001f60:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f62:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f68:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6a:	9306      	str	r3, [sp, #24]
 8001f6c:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f6e:	f006 fcbb 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f72:	200b      	movs	r0, #11
 8001f74:	f006 fcf6 	bl	8008964 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f78:	4622      	mov	r2, r4
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	200e      	movs	r0, #14
 8001f7e:	f006 fcb3 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f82:	200e      	movs	r0, #14
 8001f84:	f006 fcee 	bl	8008964 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f88:	4622      	mov	r2, r4
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	200f      	movs	r0, #15
 8001f8e:	f006 fcab 	bl	80088e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f92:	200f      	movs	r0, #15
 8001f94:	f006 fce6 	bl	8008964 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001f98:	f7ff fad4 	bl	8001544 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <main+0x2e8>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f9e:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8001fa0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hdac.Instance = DAC;
 8001fa4:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fa6:	f006 fd17 	bl	80089d8 <HAL_DAC_Init>
 8001faa:	b108      	cbz	r0, 8001fb0 <main+0x1c0>
 8001fac:	b672      	cpsid	i
  while (1)
 8001fae:	e7fe      	b.n	8001fae <main+0x1be>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	a90e      	add	r1, sp, #56	; 0x38
 8001fb4:	4638      	mov	r0, r7
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fb6:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fba:	f006 fd69 	bl	8008a90 <HAL_DAC_ConfigChannel>
 8001fbe:	b108      	cbz	r0, 8001fc4 <main+0x1d4>
 8001fc0:	b672      	cpsid	i
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <main+0x1d2>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	a90e      	add	r1, sp, #56	; 0x38
 8001fca:	f006 fd61 	bl	8008a90 <HAL_DAC_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b108      	cbz	r0, 8001fd6 <main+0x1e6>
 8001fd2:	b672      	cpsid	i
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <main+0x1e4>
  hi2c1.Instance = I2C1;
 8001fd6:	4841      	ldr	r0, [pc, #260]	; (80020dc <main+0x2ec>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001fda:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fde:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001fe8:	4c3d      	ldr	r4, [pc, #244]	; (80020e0 <main+0x2f0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fea:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <main+0x2f4>)
 8001ff0:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff4:	f007 f8c6 	bl	8009184 <HAL_I2C_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b9b0      	cbnz	r0, 800202a <main+0x23a>
  huart1.Instance = USART1;
 8001ffc:	483a      	ldr	r0, [pc, #232]	; (80020e8 <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001ffe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002002:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002006:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 8002008:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800200c:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 800200e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002012:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002014:	230c      	movs	r3, #12
 8002016:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <main+0x2fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800201a:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 800201c:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	f009 f809 	bl	800b034 <HAL_UART_Init>
 8002022:	4604      	mov	r4, r0
 8002024:	b118      	cbz	r0, 800202e <main+0x23e>
 8002026:	b672      	cpsid	i
  while (1)
 8002028:	e7fe      	b.n	8002028 <main+0x238>
 800202a:	b672      	cpsid	i
 800202c:	e7fe      	b.n	800202c <main+0x23c>
  MX_USB_DEVICE_Init();
 800202e:	f00a ff45 	bl	800cebc <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8002032:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim2.Instance = TIM2;
 8002036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 20;
 800203a:	2314      	movs	r3, #20
  htim2.Instance = TIM2;
 800203c:	4d2c      	ldr	r5, [pc, #176]	; (80020f0 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002042:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002044:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002048:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8002052:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 20;
 8002054:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 8002056:	606f      	str	r7, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002058:	f008 fdee 	bl	800ac38 <HAL_TIM_Base_Init>
 800205c:	b108      	cbz	r0, 8002062 <main+0x272>
 800205e:	b672      	cpsid	i
  while (1)
 8002060:	e7fe      	b.n	8002060 <main+0x270>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002062:	4628      	mov	r0, r5
 8002064:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002066:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002068:	f008 fe78 	bl	800ad5c <HAL_TIM_ConfigClockSource>
 800206c:	b108      	cbz	r0, 8002072 <main+0x282>
 800206e:	b672      	cpsid	i
  while (1)
 8002070:	e7fe      	b.n	8002070 <main+0x280>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002072:	4628      	mov	r0, r5
 8002074:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800207a:	f008 ffa9 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 800207e:	b108      	cbz	r0, 8002084 <main+0x294>
 8002080:	b672      	cpsid	i
  while (1)
 8002082:	e7fe      	b.n	8002082 <main+0x292>
  htim3.Init.Period = 500;
 8002084:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 8002088:	4c1a      	ldr	r4, [pc, #104]	; (80020f4 <main+0x304>)
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002090:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	e9c4 7001 	strd	r7, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020a0:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 80020a2:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 80020a4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020a6:	f008 fdc7 	bl	800ac38 <HAL_TIM_Base_Init>
 80020aa:	b108      	cbz	r0, 80020b0 <main+0x2c0>
 80020ac:	b672      	cpsid	i
  while (1)
 80020ae:	e7fe      	b.n	80020ae <main+0x2be>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b0:	4620      	mov	r0, r4
 80020b2:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b4:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020b6:	f008 fe51 	bl	800ad5c <HAL_TIM_ConfigClockSource>
 80020ba:	b1f8      	cbz	r0, 80020fc <main+0x30c>
 80020bc:	b672      	cpsid	i
  while (1)
 80020be:	e7fe      	b.n	80020be <main+0x2ce>
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	2000044c 	.word	0x2000044c
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40007400 	.word	0x40007400
 80020dc:	20000534 	.word	0x20000534
 80020e0:	40005400 	.word	0x40005400
 80020e4:	000186a0 	.word	0x000186a0
 80020e8:	20000708 	.word	0x20000708
 80020ec:	40013800 	.word	0x40013800
 80020f0:	20000608 	.word	0x20000608
 80020f4:	20000648 	.word	0x20000648
 80020f8:	40000400 	.word	0x40000400
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2600      	movs	r6, #0
 80020fe:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002100:	484a      	ldr	r0, [pc, #296]	; (800222c <main+0x43c>)
 8002102:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002108:	f008 ff62 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	b108      	cbz	r0, 8002112 <main+0x322>
 800210e:	b672      	cpsid	i
  while (1)
 8002110:	e7fe      	b.n	8002110 <main+0x320>
  htim11.Init.Prescaler = 32000;
 8002112:	f44f 45fa 	mov.w	r5, #32000	; 0x7d00
  htim11.Init.Period = 100;
 8002116:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 8002118:	4c45      	ldr	r4, [pc, #276]	; (8002230 <main+0x440>)
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <main+0x444>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002120:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800212a:	4620      	mov	r0, r4
  htim11.Init.Period = 100;
 800212c:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = 32000;
 800212e:	6065      	str	r5, [r4, #4]
  htim11.Instance = TIM11;
 8002130:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002132:	f008 fd81 	bl	800ac38 <HAL_TIM_Base_Init>
 8002136:	b108      	cbz	r0, 800213c <main+0x34c>
 8002138:	b672      	cpsid	i
  while (1)
 800213a:	e7fe      	b.n	800213a <main+0x34a>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800213c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002142:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002146:	f008 fe09 	bl	800ad5c <HAL_TIM_ConfigClockSource>
 800214a:	b108      	cbz	r0, 8002150 <main+0x360>
 800214c:	b672      	cpsid	i
  while (1)
 800214e:	e7fe      	b.n	800214e <main+0x35e>
  htim9.Init.Period = 200;
 8002150:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 8002152:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002238 <main+0x448>
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <main+0x44c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002158:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 800215c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	e9c8 5001 	strd	r5, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800216c:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 800216e:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 8002172:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002176:	f008 fd5f 	bl	800ac38 <HAL_TIM_Base_Init>
 800217a:	b108      	cbz	r0, 8002180 <main+0x390>
 800217c:	b672      	cpsid	i
  while (1)
 800217e:	e7fe      	b.n	800217e <main+0x38e>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002180:	4640      	mov	r0, r8
 8002182:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002186:	f008 fde9 	bl	800ad5c <HAL_TIM_ConfigClockSource>
 800218a:	b108      	cbz	r0, 8002190 <main+0x3a0>
 800218c:	b672      	cpsid	i
  while (1)
 800218e:	e7fe      	b.n	800218e <main+0x39e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002190:	4640      	mov	r0, r8
 8002192:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002194:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002198:	f008 ff1a 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 800219c:	b108      	cbz	r0, 80021a2 <main+0x3b2>
 800219e:	b672      	cpsid	i
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <main+0x3b0>
  htim10.Init.Period = 10;
 80021a2:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 80021a4:	4e26      	ldr	r6, [pc, #152]	; (8002240 <main+0x450>)
 80021a6:	4b27      	ldr	r3, [pc, #156]	; (8002244 <main+0x454>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80021ac:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021b8:	4630      	mov	r0, r6
  htim10.Init.Period = 10;
 80021ba:	60f2      	str	r2, [r6, #12]
  htim10.Instance = TIM10;
 80021bc:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021be:	f008 fd3b 	bl	800ac38 <HAL_TIM_Base_Init>
 80021c2:	b108      	cbz	r0, 80021c8 <main+0x3d8>
 80021c4:	b672      	cpsid	i
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <main+0x3d6>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021c8:	4630      	mov	r0, r6
 80021ca:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021cc:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021ce:	f008 fdc5 	bl	800ad5c <HAL_TIM_ConfigClockSource>
 80021d2:	b108      	cbz	r0, 80021d8 <main+0x3e8>
 80021d4:	b672      	cpsid	i
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <main+0x3e6>
  htim4.Init.Period = 2500;
 80021d8:	f640 12c4 	movw	r2, #2500	; 0x9c4
  htim4.Instance = TIM4;
 80021dc:	4e1a      	ldr	r6, [pc, #104]	; (8002248 <main+0x458>)
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <main+0x45c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e0:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80021e4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021f4:	4630      	mov	r0, r6
  htim4.Init.Period = 2500;
 80021f6:	60f2      	str	r2, [r6, #12]
  htim4.Instance = TIM4;
 80021f8:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021fa:	f008 fd1d 	bl	800ac38 <HAL_TIM_Base_Init>
 80021fe:	b108      	cbz	r0, 8002204 <main+0x414>
 8002200:	b672      	cpsid	i
  while (1)
 8002202:	e7fe      	b.n	8002202 <main+0x412>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002204:	4630      	mov	r0, r6
 8002206:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002208:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800220a:	f008 fda7 	bl	800ad5c <HAL_TIM_ConfigClockSource>
 800220e:	b108      	cbz	r0, 8002214 <main+0x424>
 8002210:	b672      	cpsid	i
  while (1)
 8002212:	e7fe      	b.n	8002212 <main+0x422>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002214:	2200      	movs	r2, #0
 8002216:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <main+0x458>)
 800221a:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002220:	f008 fed6 	bl	800afd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	b1a0      	cbz	r0, 8002250 <main+0x460>
 8002226:	b672      	cpsid	i
  while (1)
 8002228:	e7fe      	b.n	8002228 <main+0x438>
 800222a:	bf00      	nop
 800222c:	20000648 	.word	0x20000648
 8002230:	200005c8 	.word	0x200005c8
 8002234:	40011000 	.word	0x40011000
 8002238:	200006c8 	.word	0x200006c8
 800223c:	40010800 	.word	0x40010800
 8002240:	20000588 	.word	0x20000588
 8002244:	40010c00 	.word	0x40010c00
 8002248:	20000688 	.word	0x20000688
 800224c:	40000800 	.word	0x40000800
  ourInit();
 8002250:	f7ff fcbc 	bl	8001bcc <ourInit>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8002254:	2400      	movs	r4, #0
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002256:	2600      	movs	r6, #0
 8002258:	2700      	movs	r7, #0
 800225a:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8002520 <main+0x730>
 800225e:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8002524 <main+0x734>
	  tempiter++;
 8002262:	4bb1      	ldr	r3, [pc, #708]	; (8002528 <main+0x738>)
 8002264:	781d      	ldrb	r5, [r3, #0]
	  if(tempiter != headiter){
 8002266:	4bb1      	ldr	r3, [pc, #708]	; (800252c <main+0x73c>)
	  tempiter++;
 8002268:	3501      	adds	r5, #1
 800226a:	b26d      	sxtb	r5, r5
		  tempiter = 0;
 800226c:	2d08      	cmp	r5, #8
 800226e:	bfa8      	it	ge
 8002270:	2500      	movge	r5, #0
	  if(tempiter != headiter){
 8002272:	f993 3000 	ldrsb.w	r3, [r3]
 8002276:	42ab      	cmp	r3, r5
 8002278:	d062      	beq.n	8002340 <main+0x550>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 800227a:	4bad      	ldr	r3, [pc, #692]	; (8002530 <main+0x740>)
 800227c:	220a      	movs	r2, #10
 800227e:	eb03 1585 	add.w	r5, r3, r5, lsl #6
 8002282:	4629      	mov	r1, r5
 8002284:	48ab      	ldr	r0, [pc, #684]	; (8002534 <main+0x744>)
 8002286:	f00b fd97 	bl	800ddb8 <strncmp>
 800228a:	2800      	cmp	r0, #0
 800228c:	f000 823d 	beq.w	800270a <main+0x91a>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 8002290:	2213      	movs	r2, #19
 8002292:	4629      	mov	r1, r5
 8002294:	48a8      	ldr	r0, [pc, #672]	; (8002538 <main+0x748>)
 8002296:	f00b fd8f 	bl	800ddb8 <strncmp>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 800229a:	2800      	cmp	r0, #0
 800229c:	f000 8235 	beq.w	800270a <main+0x91a>
					(strncmp("MEASure:VOLTage?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage?")) == 0)){
 80022a0:	2210      	movs	r2, #16
 80022a2:	4629      	mov	r1, r5
 80022a4:	48a5      	ldr	r0, [pc, #660]	; (800253c <main+0x74c>)
 80022a6:	f00b fd87 	bl	800ddb8 <strncmp>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022aa:	2800      	cmp	r0, #0
 80022ac:	f000 822d 	beq.w	800270a <main+0x91a>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022b0:	220a      	movs	r2, #10
 80022b2:	4629      	mov	r1, r5
 80022b4:	48a2      	ldr	r0, [pc, #648]	; (8002540 <main+0x750>)
 80022b6:	f00b fd7f 	bl	800ddb8 <strncmp>
 80022ba:	b168      	cbz	r0, 80022d8 <main+0x4e8>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 80022bc:	2213      	movs	r2, #19
 80022be:	4629      	mov	r1, r5
 80022c0:	48a0      	ldr	r0, [pc, #640]	; (8002544 <main+0x754>)
 80022c2:	f00b fd79 	bl	800ddb8 <strncmp>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022c6:	b138      	cbz	r0, 80022d8 <main+0x4e8>
					(strncmp("MEASure:CURRent?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent?")) == 0)){
 80022c8:	2210      	movs	r2, #16
 80022ca:	4629      	mov	r1, r5
 80022cc:	489e      	ldr	r0, [pc, #632]	; (8002548 <main+0x758>)
 80022ce:	f00b fd73 	bl	800ddb8 <strncmp>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 80022d2:	2800      	cmp	r0, #0
 80022d4:	f040 8227 	bne.w	8002726 <main+0x936>
				snprintf((char*)MSG, 64, "%.3f, %.3f\n", cur_num_aux, cur_num);
 80022d8:	4b9c      	ldr	r3, [pc, #624]	; (800254c <main+0x75c>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	f7fe f8bc 	bl	8000458 <__aeabi_f2d>
 80022e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022e4:	4b9a      	ldr	r3, [pc, #616]	; (8002550 <main+0x760>)
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	f7fe f8b6 	bl	8000458 <__aeabi_f2d>
 80022ec:	e9cd 0100 	strd	r0, r1, [sp]
 80022f0:	4a98      	ldr	r2, [pc, #608]	; (8002554 <main+0x764>)
 80022f2:	2140      	movs	r1, #64	; 0x40
 80022f4:	488a      	ldr	r0, [pc, #552]	; (8002520 <main+0x730>)
 80022f6:	f00b fd2b 	bl	800dd50 <sniprintf>
				CDC_Transmit_FS(MSG, 64);
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	4888      	ldr	r0, [pc, #544]	; (8002520 <main+0x730>)
 80022fe:	f00a fe65 	bl	800cfcc <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002302:	2240      	movs	r2, #64	; 0x40
 8002304:	2100      	movs	r1, #0
 8002306:	4886      	ldr	r0, [pc, #536]	; (8002520 <main+0x730>)
 8002308:	f00b f8ba 	bl	800d480 <memset>
			if ((strncmp("READ?", (char*)notacircbuff[tempiter], strlen("READ?")) == 0)){
 800230c:	2205      	movs	r2, #5
 800230e:	4629      	mov	r1, r5
 8002310:	4891      	ldr	r0, [pc, #580]	; (8002558 <main+0x768>)
 8002312:	f00b fd51 	bl	800ddb8 <strncmp>
 8002316:	2800      	cmp	r0, #0
 8002318:	f040 821a 	bne.w	8002750 <main+0x960>
				CDC_Transmit_FS((uint8_t*)"\n", strlen("\n"));
 800231c:	2101      	movs	r1, #1
 800231e:	488f      	ldr	r0, [pc, #572]	; (800255c <main+0x76c>)
 8002320:	f00a fe54 	bl	800cfcc <CDC_Transmit_FS>
			memset (notacircbuff[tempiter], '\0', 64); // clear the buffer
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	4628      	mov	r0, r5
 8002328:	2100      	movs	r1, #0
 800232a:	f00b f8a9 	bl	800d480 <memset>
			tailiter++;
 800232e:	4a7e      	ldr	r2, [pc, #504]	; (8002528 <main+0x738>)
 8002330:	7813      	ldrb	r3, [r2, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b25b      	sxtb	r3, r3
			if(tailiter >= CIRCSIZE){
 8002336:	2b07      	cmp	r3, #7
				tailiter = 0;
 8002338:	bfc4      	itt	gt
 800233a:	2300      	movgt	r3, #0
 800233c:	4a7a      	ldrgt	r2, [pc, #488]	; (8002528 <main+0x738>)
 800233e:	7013      	strb	r3, [r2, #0]
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002340:	4b87      	ldr	r3, [pc, #540]	; (8002560 <main+0x770>)
 8002342:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002344:	8818      	ldrh	r0, [r3, #0]
 8002346:	f7fe fcdd 	bl	8000d04 <__aeabi_ui2f>
 800234a:	4b86      	ldr	r3, [pc, #536]	; (8002564 <main+0x774>)
 800234c:	4605      	mov	r5, r0
 800234e:	8918      	ldrh	r0, [r3, #8]
 8002350:	f7fe fcd8 	bl	8000d04 <__aeabi_ui2f>
 8002354:	4680      	mov	r8, r0
 8002356:	4628      	mov	r0, r5
 8002358:	4641      	mov	r1, r8
 800235a:	f7fe fddf 	bl	8000f1c <__aeabi_fdiv>
 800235e:	4982      	ldr	r1, [pc, #520]	; (8002568 <main+0x778>)
 8002360:	f7fe fd28 	bl	8000db4 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002366:	4981      	ldr	r1, [pc, #516]	; (800256c <main+0x77c>)
 8002368:	4640      	mov	r0, r8
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800236a:	9305      	str	r3, [sp, #20]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800236c:	f7fe fd22 	bl	8000db4 <__aeabi_fmul>
 8002370:	4681      	mov	r9, r0
 8002372:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <main+0x774>)
 8002374:	8898      	ldrh	r0, [r3, #4]
 8002376:	f7fe fcc5 	bl	8000d04 <__aeabi_ui2f>
 800237a:	497b      	ldr	r1, [pc, #492]	; (8002568 <main+0x778>)
 800237c:	f7fe fd1a 	bl	8000db4 <__aeabi_fmul>
 8002380:	4629      	mov	r1, r5
 8002382:	f7fe fd17 	bl	8000db4 <__aeabi_fmul>
 8002386:	4649      	mov	r1, r9
 8002388:	f7fe fdc8 	bl	8000f1c <__aeabi_fdiv>
 800238c:	4978      	ldr	r1, [pc, #480]	; (8002570 <main+0x780>)
 800238e:	f7fe fdc5 	bl	8000f1c <__aeabi_fdiv>
 8002392:	4978      	ldr	r1, [pc, #480]	; (8002574 <main+0x784>)
 8002394:	f7fe fdc2 	bl	8000f1c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8002398:	4621      	mov	r1, r4
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800239a:	4680      	mov	r8, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 800239c:	f7fe febc 	bl	8001118 <__aeabi_fcmpge>
 80023a0:	b900      	cbnz	r0, 80023a4 <main+0x5b4>
 80023a2:	46a0      	mov	r8, r4
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <main+0x75c>)
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023a6:	4974      	ldr	r1, [pc, #464]	; (8002578 <main+0x788>)
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023a8:	f8c3 8000 	str.w	r8, [r3]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023ac:	4640      	mov	r0, r8
 80023ae:	f7fe fd01 	bl	8000db4 <__aeabi_fmul>
 80023b2:	4680      	mov	r8, r0
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <main+0x774>)
 80023b6:	8818      	ldrh	r0, [r3, #0]
 80023b8:	f7fe fca4 	bl	8000d04 <__aeabi_ui2f>
 80023bc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80023c0:	f7fe fcf8 	bl	8000db4 <__aeabi_fmul>
 80023c4:	4968      	ldr	r1, [pc, #416]	; (8002568 <main+0x778>)
 80023c6:	f7fe fcf5 	bl	8000db4 <__aeabi_fmul>
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fe fcf2 	bl	8000db4 <__aeabi_fmul>
 80023d0:	4649      	mov	r1, r9
 80023d2:	f7fe fda3 	bl	8000f1c <__aeabi_fdiv>
 80023d6:	4641      	mov	r1, r8
 80023d8:	f7fe fbe2 	bl	8000ba0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80023dc:	4621      	mov	r1, r4
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023de:	9004      	str	r0, [sp, #16]
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80023e0:	f7fe fe9a 	bl	8001118 <__aeabi_fcmpge>
 80023e4:	b900      	cbnz	r0, 80023e8 <main+0x5f8>
 80023e6:	9404      	str	r4, [sp, #16]
 80023e8:	9a04      	ldr	r2, [sp, #16]
 80023ea:	4b64      	ldr	r3, [pc, #400]	; (800257c <main+0x78c>)
 80023ec:	601a      	str	r2, [r3, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <main+0x774>)
 80023f0:	8858      	ldrh	r0, [r3, #2]
 80023f2:	f7fe fc87 	bl	8000d04 <__aeabi_ui2f>
 80023f6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80023fa:	f7fe fcdb 	bl	8000db4 <__aeabi_fmul>
 80023fe:	495a      	ldr	r1, [pc, #360]	; (8002568 <main+0x778>)
 8002400:	f7fe fcd8 	bl	8000db4 <__aeabi_fmul>
 8002404:	4629      	mov	r1, r5
 8002406:	f7fe fcd5 	bl	8000db4 <__aeabi_fmul>
 800240a:	4649      	mov	r1, r9
 800240c:	f7fe fd86 	bl	8000f1c <__aeabi_fdiv>
 8002410:	4641      	mov	r1, r8
 8002412:	f7fe fbc5 	bl	8000ba0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002416:	4621      	mov	r1, r4
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002418:	4680      	mov	r8, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 800241a:	f7fe fe7d 	bl	8001118 <__aeabi_fcmpge>
 800241e:	b900      	cbnz	r0, 8002422 <main+0x632>
 8002420:	46a0      	mov	r8, r4
 8002422:	4b57      	ldr	r3, [pc, #348]	; (8002580 <main+0x790>)
 8002424:	f8c3 8000 	str.w	r8, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002428:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <main+0x774>)
 800242a:	88d8      	ldrh	r0, [r3, #6]
 800242c:	f7fe fc6a 	bl	8000d04 <__aeabi_ui2f>
 8002430:	4954      	ldr	r1, [pc, #336]	; (8002584 <main+0x794>)
 8002432:	f7fe fcbf 	bl	8000db4 <__aeabi_fmul>
 8002436:	494c      	ldr	r1, [pc, #304]	; (8002568 <main+0x778>)
 8002438:	f7fe fcbc 	bl	8000db4 <__aeabi_fmul>
 800243c:	4629      	mov	r1, r5
 800243e:	f7fe fcb9 	bl	8000db4 <__aeabi_fmul>
 8002442:	4649      	mov	r1, r9
 8002444:	f7fe fd6a 	bl	8000f1c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002448:	4621      	mov	r1, r4
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 800244a:	4605      	mov	r5, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800244c:	f7fe fe64 	bl	8001118 <__aeabi_fcmpge>
 8002450:	b900      	cbnz	r0, 8002454 <main+0x664>
 8002452:	4625      	mov	r5, r4
 8002454:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <main+0x798>)
 8002456:	601d      	str	r5, [r3, #0]
	  if(chstat_main == 1){
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <main+0x79c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	f000 813e 	beq.w	80026de <main+0x8ee>
		  if(op_num > (volt_set_main - 0.5) + margin){
 8002462:	9804      	ldr	r0, [sp, #16]
 8002464:	f7fd fff8 	bl	8000458 <__aeabi_f2d>
 8002468:	4b49      	ldr	r3, [pc, #292]	; (8002590 <main+0x7a0>)
 800246a:	4680      	mov	r8, r0
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	4689      	mov	r9, r1
 8002470:	f7fd fff2 	bl	8000458 <__aeabi_f2d>
 8002474:	2200      	movs	r2, #0
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <main+0x7a4>)
 8002478:	f7fd fe8e 	bl	8000198 <__aeabi_dsub>
 800247c:	a326      	add	r3, pc, #152	; (adr r3, 8002518 <main+0x728>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fd fe8b 	bl	800019c <__adddf3>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4640      	mov	r0, r8
 800248c:	4649      	mov	r1, r9
 800248e:	f7fe facb 	bl	8000a28 <__aeabi_dcmpgt>
 8002492:	2800      	cmp	r0, #0
 8002494:	f040 80f2 	bne.w	800267c <main+0x88c>
		  else if(op_num < (volt_set_main - 0.5) - margin){
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <main+0x7a0>)
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	f7fd ffdc 	bl	8000458 <__aeabi_f2d>
 80024a0:	2200      	movs	r2, #0
 80024a2:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <main+0x7a4>)
 80024a4:	f7fd fe78 	bl	8000198 <__aeabi_dsub>
 80024a8:	a31b      	add	r3, pc, #108	; (adr r3, 8002518 <main+0x728>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fd fe73 	bl	8000198 <__aeabi_dsub>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4640      	mov	r0, r8
 80024b8:	4649      	mov	r1, r9
 80024ba:	f7fe fa97 	bl	80009ec <__aeabi_dcmplt>
 80024be:	b178      	cbz	r0, 80024e0 <main+0x6f0>
			  if(v1 <= 4094){
 80024c0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024c4:	f8ba 3000 	ldrh.w	r3, [sl]
 80024c8:	4293      	cmp	r3, r2
				  v1++;
 80024ca:	bf9c      	itt	ls
 80024cc:	3301      	addls	r3, #1
 80024ce:	f8aa 3000 	strhls.w	r3, [sl]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8ba 3000 	ldrh.w	r3, [sl]
 80024d8:	4611      	mov	r1, r2
 80024da:	482f      	ldr	r0, [pc, #188]	; (8002598 <main+0x7a8>)
 80024dc:	f006 fac2 	bl	8008a64 <HAL_DAC_SetValue>
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.75))) * (float)4095 / (float)vddcalc);
 80024e0:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <main+0x7a0>)
 80024e2:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	f7fe fb5c 	bl	8000ba4 <__addsf3>
 80024ec:	492b      	ldr	r1, [pc, #172]	; (800259c <main+0x7ac>)
 80024ee:	f7fe fc61 	bl	8000db4 <__aeabi_fmul>
 80024f2:	4601      	mov	r1, r0
 80024f4:	482a      	ldr	r0, [pc, #168]	; (80025a0 <main+0x7b0>)
 80024f6:	f7fe fb53 	bl	8000ba0 <__aeabi_fsub>
 80024fa:	491c      	ldr	r1, [pc, #112]	; (800256c <main+0x77c>)
 80024fc:	f7fe fc5a 	bl	8000db4 <__aeabi_fmul>
 8002500:	9905      	ldr	r1, [sp, #20]
 8002502:	f7fe fd0b 	bl	8000f1c <__aeabi_fdiv>
	  if(temp <= 0){
 8002506:	4621      	mov	r1, r4
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.75))) * (float)4095 / (float)vddcalc);
 8002508:	4605      	mov	r5, r0
	  if(temp <= 0){
 800250a:	f7fe fdfb 	bl	8001104 <__aeabi_fcmple>
 800250e:	2800      	cmp	r0, #0
 8002510:	f040 80e1 	bne.w	80026d6 <main+0x8e6>
 8002514:	e046      	b.n	80025a4 <main+0x7b4>
 8002516:	bf00      	nop
 8002518:	e0000000 	.word	0xe0000000
 800251c:	3f60624d 	.word	0x3f60624d
 8002520:	20000388 	.word	0x20000388
 8002524:	20000a6c 	.word	0x20000a6c
 8002528:	200009a8 	.word	0x200009a8
 800252c:	20000004 	.word	0x20000004
 8002530:	20000758 	.word	0x20000758
 8002534:	08011854 	.word	0x08011854
 8002538:	08011860 	.word	0x08011860
 800253c:	08011874 	.word	0x08011874
 8002540:	08011894 	.word	0x08011894
 8002544:	080118a0 	.word	0x080118a0
 8002548:	080118b4 	.word	0x080118b4
 800254c:	200003ec 	.word	0x200003ec
 8002550:	200003f0 	.word	0x200003f0
 8002554:	080118c8 	.word	0x080118c8
 8002558:	08011a48 	.word	0x08011a48
 800255c:	08011a44 	.word	0x08011a44
 8002560:	20000018 	.word	0x20000018
 8002564:	200003d4 	.word	0x200003d4
 8002568:	40400000 	.word	0x40400000
 800256c:	457ff000 	.word	0x457ff000
 8002570:	41a00000 	.word	0x41a00000
 8002574:	3e19999a 	.word	0x3e19999a
 8002578:	3eb33333 	.word	0x3eb33333
 800257c:	20000958 	.word	0x20000958
 8002580:	20000750 	.word	0x20000750
 8002584:	40a00000 	.word	0x40a00000
 8002588:	200009a4 	.word	0x200009a4
 800258c:	200003eb 	.word	0x200003eb
 8002590:	20000a74 	.word	0x20000a74
 8002594:	3fe00000 	.word	0x3fe00000
 8002598:	2000044c 	.word	0x2000044c
 800259c:	3e75c28f 	.word	0x3e75c28f
 80025a0:	40800b78 	.word	0x40800b78
	  else if(temp >= 4095){
 80025a4:	4628      	mov	r0, r5
 80025a6:	49a0      	ldr	r1, [pc, #640]	; (8002828 <main+0xa38>)
 80025a8:	f7fe fdb6 	bl	8001118 <__aeabi_fcmpge>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	f000 808c 	beq.w	80026ca <main+0x8da>
		  v2 = 4095;
 80025b2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80025b6:	4a9d      	ldr	r2, [pc, #628]	; (800282c <main+0xa3c>)
 80025b8:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 80025ba:	4b9d      	ldr	r3, [pc, #628]	; (8002830 <main+0xa40>)
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	4b9d      	ldr	r3, [pc, #628]	; (8002834 <main+0xa44>)
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	f7fe fdb3 	bl	800112c <__aeabi_fcmpgt>
 80025c6:	4605      	mov	r5, r0
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d16f      	bne.n	80026ac <main+0x8bc>
	  else if(volt_set_main < volt_set_main_old){
 80025cc:	4b98      	ldr	r3, [pc, #608]	; (8002830 <main+0xa40>)
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80025ce:	4602      	mov	r2, r0
	  else if(volt_set_main < volt_set_main_old){
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4b98      	ldr	r3, [pc, #608]	; (8002834 <main+0xa44>)
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80025d4:	4601      	mov	r1, r0
	  else if(volt_set_main < volt_set_main_old){
 80025d6:	681b      	ldr	r3, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80025d8:	4897      	ldr	r0, [pc, #604]	; (8002838 <main+0xa48>)
 80025da:	f8ba 3000 	ldrh.w	r3, [sl]
 80025de:	f006 fa41 	bl	8008a64 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80025e2:	4b92      	ldr	r3, [pc, #584]	; (800282c <main+0xa3c>)
 80025e4:	462a      	mov	r2, r5
 80025e6:	2110      	movs	r1, #16
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	4893      	ldr	r0, [pc, #588]	; (8002838 <main+0xa48>)
 80025ec:	f006 fa3a 	bl	8008a64 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 80025f0:	4b92      	ldr	r3, [pc, #584]	; (800283c <main+0xa4c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d153      	bne.n	80026a0 <main+0x8b0>
 80025f8:	4b91      	ldr	r3, [pc, #580]	; (8002840 <main+0xa50>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d94f      	bls.n	80026a0 <main+0x8b0>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	488f      	ldr	r0, [pc, #572]	; (8002844 <main+0xa54>)
 8002606:	f006 fda3 	bl	8009150 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 800260a:	4b8f      	ldr	r3, [pc, #572]	; (8002848 <main+0xa58>)
	if(val == 0.0){
 800260c:	4621      	mov	r1, r4
	  update_ADC_watchdog(amp_set_main);
 800260e:	681d      	ldr	r5, [r3, #0]
	if(val == 0.0){
 8002610:	4628      	mov	r0, r5
 8002612:	f7fe fd63 	bl	80010dc <__aeabi_fcmpeq>
 8002616:	2800      	cmp	r0, #0
 8002618:	d13d      	bne.n	8002696 <main+0x8a6>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800261a:	4628      	mov	r0, r5
 800261c:	498b      	ldr	r1, [pc, #556]	; (800284c <main+0xa5c>)
 800261e:	f7fe fbc9 	bl	8000db4 <__aeabi_fmul>
 8002622:	498b      	ldr	r1, [pc, #556]	; (8002850 <main+0xa60>)
 8002624:	f7fe fbc6 	bl	8000db4 <__aeabi_fmul>
 8002628:	497f      	ldr	r1, [pc, #508]	; (8002828 <main+0xa38>)
 800262a:	f7fe fbc3 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800262e:	4b89      	ldr	r3, [pc, #548]	; (8002854 <main+0xa64>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002630:	4605      	mov	r5, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002632:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002634:	8818      	ldrh	r0, [r3, #0]
 8002636:	f7fe fb65 	bl	8000d04 <__aeabi_ui2f>
 800263a:	4b81      	ldr	r3, [pc, #516]	; (8002840 <main+0xa50>)
 800263c:	4680      	mov	r8, r0
 800263e:	8918      	ldrh	r0, [r3, #8]
 8002640:	f7fe fb60 	bl	8000d04 <__aeabi_ui2f>
 8002644:	4601      	mov	r1, r0
 8002646:	4640      	mov	r0, r8
 8002648:	f7fe fc68 	bl	8000f1c <__aeabi_fdiv>
 800264c:	4982      	ldr	r1, [pc, #520]	; (8002858 <main+0xa68>)
 800264e:	f7fe fbb1 	bl	8000db4 <__aeabi_fmul>
 8002652:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002654:	4628      	mov	r0, r5
 8002656:	f7fe fc61 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 800265a:	4973      	ldr	r1, [pc, #460]	; (8002828 <main+0xa38>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800265c:	4605      	mov	r5, r0
	else if(amp >= 4095.0){
 800265e:	f7fe fd5b 	bl	8001118 <__aeabi_fcmpge>
 8002662:	4680      	mov	r8, r0
 8002664:	b9b8      	cbnz	r0, 8002696 <main+0x8a6>
	else if(amp < 0.0){
 8002666:	4621      	mov	r1, r4
 8002668:	4628      	mov	r0, r5
 800266a:	f7fe fd41 	bl	80010f0 <__aeabi_fcmplt>
 800266e:	b970      	cbnz	r0, 800268e <main+0x89e>
		ADC1->HTR = amp;
 8002670:	4628      	mov	r0, r5
 8002672:	f7fe fd8b 	bl	800118c <__aeabi_f2uiz>
 8002676:	4a79      	ldr	r2, [pc, #484]	; (800285c <main+0xa6c>)
 8002678:	6290      	str	r0, [r2, #40]	; 0x28
 800267a:	e5f2      	b.n	8002262 <main+0x472>
			  if(v1 >= 1){
 800267c:	f8ba 3000 	ldrh.w	r3, [sl]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f43f af26 	beq.w	80024d2 <main+0x6e2>
				  v1--;
 8002686:	3b01      	subs	r3, #1
 8002688:	f8aa 3000 	strh.w	r3, [sl]
 800268c:	e721      	b.n	80024d2 <main+0x6e2>
		ADC1->HTR = 0;
 800268e:	4b73      	ldr	r3, [pc, #460]	; (800285c <main+0xa6c>)
 8002690:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
 8002694:	e5e5      	b.n	8002262 <main+0x472>
		ADC1->HTR = 4095;
 8002696:	f640 72ff 	movw	r2, #4095	; 0xfff
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <main+0xa6c>)
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
 800269e:	e5e0      	b.n	8002262 <main+0x472>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2140      	movs	r1, #64	; 0x40
 80026a4:	4867      	ldr	r0, [pc, #412]	; (8002844 <main+0xa54>)
 80026a6:	f006 fd53 	bl	8009150 <HAL_GPIO_WritePin>
 80026aa:	e7ae      	b.n	800260a <main+0x81a>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 80026ac:	4b5f      	ldr	r3, [pc, #380]	; (800282c <main+0xa3c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	2110      	movs	r1, #16
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	4860      	ldr	r0, [pc, #384]	; (8002838 <main+0xa48>)
 80026b6:	f006 f9d5 	bl	8008a64 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8ba 3000 	ldrh.w	r3, [sl]
 80026c0:	4611      	mov	r1, r2
 80026c2:	485d      	ldr	r0, [pc, #372]	; (8002838 <main+0xa48>)
 80026c4:	f006 f9ce 	bl	8008a64 <HAL_DAC_SetValue>
 80026c8:	e792      	b.n	80025f0 <main+0x800>
		  v2 = (uint16_t)temp;
 80026ca:	4628      	mov	r0, r5
 80026cc:	f7fe fd5e 	bl	800118c <__aeabi_f2uiz>
 80026d0:	4b56      	ldr	r3, [pc, #344]	; (800282c <main+0xa3c>)
 80026d2:	8018      	strh	r0, [r3, #0]
 80026d4:	e771      	b.n	80025ba <main+0x7ca>
		  v2 = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	4a54      	ldr	r2, [pc, #336]	; (800282c <main+0xa3c>)
 80026da:	8013      	strh	r3, [r2, #0]
 80026dc:	e76d      	b.n	80025ba <main+0x7ca>
		  if(lin_num > volt_set_main + margin){
 80026de:	4b54      	ldr	r3, [pc, #336]	; (8002830 <main+0xa40>)
 80026e0:	495f      	ldr	r1, [pc, #380]	; (8002860 <main+0xa70>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f7fe fa5e 	bl	8000ba4 <__addsf3>
 80026e8:	4641      	mov	r1, r8
 80026ea:	f7fe fd01 	bl	80010f0 <__aeabi_fcmplt>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d1c4      	bne.n	800267c <main+0x88c>
		  else if(lin_num < volt_set_main - margin){
 80026f2:	4b4f      	ldr	r3, [pc, #316]	; (8002830 <main+0xa40>)
 80026f4:	495a      	ldr	r1, [pc, #360]	; (8002860 <main+0xa70>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	f7fe fa52 	bl	8000ba0 <__aeabi_fsub>
 80026fc:	4641      	mov	r1, r8
 80026fe:	f7fe fd15 	bl	800112c <__aeabi_fcmpgt>
 8002702:	2800      	cmp	r0, #0
 8002704:	f43f aeec 	beq.w	80024e0 <main+0x6f0>
 8002708:	e6da      	b.n	80024c0 <main+0x6d0>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", lin_num_aux, lin_num);
 800270a:	4b56      	ldr	r3, [pc, #344]	; (8002864 <main+0xa74>)
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	f7fd fea3 	bl	8000458 <__aeabi_f2d>
 8002712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002716:	4b54      	ldr	r3, [pc, #336]	; (8002868 <main+0xa78>)
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f7fd fe9d 	bl	8000458 <__aeabi_f2d>
 800271e:	4a53      	ldr	r2, [pc, #332]	; (800286c <main+0xa7c>)
 8002720:	e9cd 0100 	strd	r0, r1, [sp]
 8002724:	e5e5      	b.n	80022f2 <main+0x502>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 8002726:	220b      	movs	r2, #11
 8002728:	4629      	mov	r1, r5
 800272a:	4851      	ldr	r0, [pc, #324]	; (8002870 <main+0xa80>)
 800272c:	f00b fb44 	bl	800ddb8 <strncmp>
 8002730:	b128      	cbz	r0, 800273e <main+0x94e>
					(strncmp("OUTP:ONE?", (char*)notacircbuff[tempiter], strlen("OUTP:ONE?")) == 0)){
 8002732:	2209      	movs	r2, #9
 8002734:	4629      	mov	r1, r5
 8002736:	484f      	ldr	r0, [pc, #316]	; (8002874 <main+0xa84>)
 8002738:	f00b fb3e 	bl	800ddb8 <strncmp>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 800273c:	bb00      	cbnz	r0, 8002780 <main+0x990>
				snprintf((char*)MSG, 64, "%d\n", chstat_aux_rx);
 800273e:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <main+0xa88>)
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <main+0xa8c>)
 8002746:	b25b      	sxtb	r3, r3
 8002748:	484d      	ldr	r0, [pc, #308]	; (8002880 <main+0xa90>)
 800274a:	f00b fb01 	bl	800dd50 <sniprintf>
				CDC_Transmit_FS(MSG, 64);
 800274e:	e5d4      	b.n	80022fa <main+0x50a>
				snprintf((char*)MSG, 64, "ERROR: INVALID COMMAND\n");
 8002750:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8002880 <main+0xa90>
 8002754:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8002884 <main+0xa94>
 8002758:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800275c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8002760:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002764:	e888 0003 	stmia.w	r8, {r0, r1}
				CDC_Transmit_FS(MSG, 64);
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	f1a8 0010 	sub.w	r0, r8, #16
 800276e:	f00a fc2d 	bl	800cfcc <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	2100      	movs	r1, #0
 8002776:	f1a8 0010 	sub.w	r0, r8, #16
 800277a:	f00a fe81 	bl	800d480 <memset>
 800277e:	e5d1      	b.n	8002324 <main+0x534>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002780:	220b      	movs	r2, #11
 8002782:	4629      	mov	r1, r5
 8002784:	4840      	ldr	r0, [pc, #256]	; (8002888 <main+0xa98>)
 8002786:	f00b fb17 	bl	800ddb8 <strncmp>
 800278a:	b128      	cbz	r0, 8002798 <main+0x9a8>
					(strncmp("OUTP:TWO?", (char*)notacircbuff[tempiter], strlen("OUTP:TWO?")) == 0)){
 800278c:	2209      	movs	r2, #9
 800278e:	4629      	mov	r1, r5
 8002790:	483e      	ldr	r0, [pc, #248]	; (800288c <main+0xa9c>)
 8002792:	f00b fb11 	bl	800ddb8 <strncmp>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002796:	b908      	cbnz	r0, 800279c <main+0x9ac>
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <main+0xa4c>)
 800279a:	e7d1      	b.n	8002740 <main+0x950>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 800279c:	2210      	movs	r2, #16
 800279e:	4629      	mov	r1, r5
 80027a0:	483b      	ldr	r0, [pc, #236]	; (8002890 <main+0xaa0>)
 80027a2:	f00b fb09 	bl	800ddb8 <strncmp>
 80027a6:	b128      	cbz	r0, 80027b4 <main+0x9c4>
					(strncmp("OUTP:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:START")) == 0)){
 80027a8:	220e      	movs	r2, #14
 80027aa:	4629      	mov	r1, r5
 80027ac:	4839      	ldr	r0, [pc, #228]	; (8002894 <main+0xaa4>)
 80027ae:	f00b fb03 	bl	800ddb8 <strncmp>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 80027b2:	b930      	cbnz	r0, 80027c2 <main+0x9d2>
				chstat_aux_tx = 1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	4a38      	ldr	r2, [pc, #224]	; (8002898 <main+0xaa8>)
 80027b8:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027ba:	230a      	movs	r3, #10
 80027bc:	f8ab 3000 	strh.w	r3, [fp]
				CDC_Transmit_FS(MSG, 64);
 80027c0:	e59b      	b.n	80022fa <main+0x50a>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027c2:	2210      	movs	r2, #16
 80027c4:	4629      	mov	r1, r5
 80027c6:	4835      	ldr	r0, [pc, #212]	; (800289c <main+0xaac>)
 80027c8:	f00b faf6 	bl	800ddb8 <strncmp>
 80027cc:	b128      	cbz	r0, 80027da <main+0x9ea>
					(strncmp("OUTP:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:START")) == 0)){
 80027ce:	220e      	movs	r2, #14
 80027d0:	4629      	mov	r1, r5
 80027d2:	4833      	ldr	r0, [pc, #204]	; (80028a0 <main+0xab0>)
 80027d4:	f00b faf0 	bl	800ddb8 <strncmp>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027d8:	b930      	cbnz	r0, 80027e8 <main+0x9f8>
				chstat_main = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <main+0xa4c>)
 80027de:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027e0:	230a      	movs	r3, #10
 80027e2:	f8ab 3000 	strh.w	r3, [fp]
				CDC_Transmit_FS(MSG, 64);
 80027e6:	e588      	b.n	80022fa <main+0x50a>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027e8:	220f      	movs	r2, #15
 80027ea:	4629      	mov	r1, r5
 80027ec:	482d      	ldr	r0, [pc, #180]	; (80028a4 <main+0xab4>)
 80027ee:	f00b fae3 	bl	800ddb8 <strncmp>
 80027f2:	b130      	cbz	r0, 8002802 <main+0xa12>
					(strncmp("OUTP:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:STOP")) == 0)){
 80027f4:	220d      	movs	r2, #13
 80027f6:	4629      	mov	r1, r5
 80027f8:	482b      	ldr	r0, [pc, #172]	; (80028a8 <main+0xab8>)
 80027fa:	f00b fadd 	bl	800ddb8 <strncmp>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027fe:	2800      	cmp	r0, #0
 8002800:	d154      	bne.n	80028ac <main+0xabc>
				snprintf((char*)MSG, 64, "\n");
 8002802:	230a      	movs	r3, #10
				chstat_aux_tx = 0;
 8002804:	f04f 0800 	mov.w	r8, #0
				snprintf((char*)MSG, 64, "\n");
 8002808:	f8ab 3000 	strh.w	r3, [fp]
				chstat_aux_tx = 0;
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <main+0xaa8>)
				CDC_Transmit_FS(MSG, 64);
 800280e:	2140      	movs	r1, #64	; 0x40
				chstat_main = 0;
 8002810:	f883 8000 	strb.w	r8, [r3]
				CDC_Transmit_FS(MSG, 64);
 8002814:	481a      	ldr	r0, [pc, #104]	; (8002880 <main+0xa90>)
 8002816:	f00a fbd9 	bl	800cfcc <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 800281a:	4641      	mov	r1, r8
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	4818      	ldr	r0, [pc, #96]	; (8002880 <main+0xa90>)
 8002820:	f00a fe2e 	bl	800d480 <memset>
 8002824:	e572      	b.n	800230c <main+0x51c>
 8002826:	bf00      	nop
 8002828:	457ff000 	.word	0x457ff000
 800282c:	20000a6e 	.word	0x20000a6e
 8002830:	20000a74 	.word	0x20000a74
 8002834:	20000a78 	.word	0x20000a78
 8002838:	2000044c 	.word	0x2000044c
 800283c:	200003eb 	.word	0x200003eb
 8002840:	200003d4 	.word	0x200003d4
 8002844:	40020000 	.word	0x40020000
 8002848:	200003e4 	.word	0x200003e4
 800284c:	3e19999a 	.word	0x3e19999a
 8002850:	41a00000 	.word	0x41a00000
 8002854:	20000018 	.word	0x20000018
 8002858:	40400000 	.word	0x40400000
 800285c:	40012400 	.word	0x40012400
 8002860:	3b03126f 	.word	0x3b03126f
 8002864:	20000750 	.word	0x20000750
 8002868:	20000754 	.word	0x20000754
 800286c:	08011888 	.word	0x08011888
 8002870:	080118d4 	.word	0x080118d4
 8002874:	080118e0 	.word	0x080118e0
 8002878:	200003e9 	.word	0x200003e9
 800287c:	080118ec 	.word	0x080118ec
 8002880:	20000388 	.word	0x20000388
 8002884:	08011a50 	.word	0x08011a50
 8002888:	080118f0 	.word	0x080118f0
 800288c:	080118fc 	.word	0x080118fc
 8002890:	08011908 	.word	0x08011908
 8002894:	0801191c 	.word	0x0801191c
 8002898:	200003ea 	.word	0x200003ea
 800289c:	0801192c 	.word	0x0801192c
 80028a0:	08011940 	.word	0x08011940
 80028a4:	08011950 	.word	0x08011950
 80028a8:	08011960 	.word	0x08011960
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 80028ac:	220f      	movs	r2, #15
 80028ae:	4629      	mov	r1, r5
 80028b0:	48af      	ldr	r0, [pc, #700]	; (8002b70 <main+0xd80>)
 80028b2:	f00b fa81 	bl	800ddb8 <strncmp>
 80028b6:	b128      	cbz	r0, 80028c4 <main+0xad4>
					(strncmp("OUTP:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:STOP")) == 0)){
 80028b8:	220d      	movs	r2, #13
 80028ba:	4629      	mov	r1, r5
 80028bc:	48ad      	ldr	r0, [pc, #692]	; (8002b74 <main+0xd84>)
 80028be:	f00b fa7b 	bl	800ddb8 <strncmp>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 80028c2:	b930      	cbnz	r0, 80028d2 <main+0xae2>
				snprintf((char*)MSG, 64, "\n");
 80028c4:	230a      	movs	r3, #10
				chstat_main = 0;
 80028c6:	f04f 0800 	mov.w	r8, #0
				snprintf((char*)MSG, 64, "\n");
 80028ca:	f8ab 3000 	strh.w	r3, [fp]
				chstat_main = 0;
 80028ce:	4baa      	ldr	r3, [pc, #680]	; (8002b78 <main+0xd88>)
 80028d0:	e79d      	b.n	800280e <main+0xa1e>
			else if ((strncmp("VOLTage:ONE:", (char*)notacircbuff[tempiter], strlen("VOLTage:ONE:")) == 0)){
 80028d2:	220c      	movs	r2, #12
 80028d4:	4629      	mov	r1, r5
 80028d6:	48a9      	ldr	r0, [pc, #676]	; (8002b7c <main+0xd8c>)
 80028d8:	f00b fa6e 	bl	800ddb8 <strncmp>
 80028dc:	2800      	cmp	r0, #0
 80028de:	d04a      	beq.n	8002976 <main+0xb86>
			else if ((strncmp("VOLT:ONE:", (char*)notacircbuff[tempiter], strlen("VOLT:ONE:")) == 0)){
 80028e0:	2209      	movs	r2, #9
 80028e2:	4629      	mov	r1, r5
 80028e4:	48a6      	ldr	r0, [pc, #664]	; (8002b80 <main+0xd90>)
 80028e6:	f00b fa67 	bl	800ddb8 <strncmp>
 80028ea:	4680      	mov	r8, r0
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f000 80d0 	beq.w	8002a92 <main+0xca2>
			else if ((strncmp("VOLTage:TWO:", (char*)notacircbuff[tempiter], strlen("VOLTage:TWO:")) == 0)){
 80028f2:	220c      	movs	r2, #12
 80028f4:	4629      	mov	r1, r5
 80028f6:	48a3      	ldr	r0, [pc, #652]	; (8002b84 <main+0xd94>)
 80028f8:	f00b fa5e 	bl	800ddb8 <strncmp>
 80028fc:	4680      	mov	r8, r0
 80028fe:	2800      	cmp	r0, #0
 8002900:	f000 80c4 	beq.w	8002a8c <main+0xc9c>
			else if ((strncmp("VOLT:TWO:", (char*)notacircbuff[tempiter], strlen("VOLT:TWO:")) == 0)){
 8002904:	2209      	movs	r2, #9
 8002906:	4629      	mov	r1, r5
 8002908:	489f      	ldr	r0, [pc, #636]	; (8002b88 <main+0xd98>)
 800290a:	f00b fa55 	bl	800ddb8 <strncmp>
 800290e:	4680      	mov	r8, r0
 8002910:	2800      	cmp	r0, #0
 8002912:	f000 8086 	beq.w	8002a22 <main+0xc32>
			else if ((strncmp("CURRent:ONE:", (char*)notacircbuff[tempiter], strlen("CURRent:ONE:")) == 0)){
 8002916:	220c      	movs	r2, #12
 8002918:	4629      	mov	r1, r5
 800291a:	489c      	ldr	r0, [pc, #624]	; (8002b8c <main+0xd9c>)
 800291c:	f00b fa4c 	bl	800ddb8 <strncmp>
 8002920:	4680      	mov	r8, r0
 8002922:	2800      	cmp	r0, #0
 8002924:	d04d      	beq.n	80029c2 <main+0xbd2>
			else if ((strncmp("CURR:ONE:", (char*)notacircbuff[tempiter], strlen("CURR:ONE:")) == 0)){
 8002926:	2209      	movs	r2, #9
 8002928:	4629      	mov	r1, r5
 800292a:	4899      	ldr	r0, [pc, #612]	; (8002b90 <main+0xda0>)
 800292c:	f00b fa44 	bl	800ddb8 <strncmp>
 8002930:	4680      	mov	r8, r0
 8002932:	2800      	cmp	r0, #0
 8002934:	f000 810b 	beq.w	8002b4e <main+0xd5e>
			else if ((strncmp("CURRent:TWO:", (char*)notacircbuff[tempiter], strlen("CURRent:TWO:")) == 0)){
 8002938:	220c      	movs	r2, #12
 800293a:	4629      	mov	r1, r5
 800293c:	4895      	ldr	r0, [pc, #596]	; (8002b94 <main+0xda4>)
 800293e:	f00b fa3b 	bl	800ddb8 <strncmp>
 8002942:	4680      	mov	r8, r0
 8002944:	2800      	cmp	r0, #0
 8002946:	f000 80d5 	beq.w	8002af4 <main+0xd04>
			else if ((strncmp("CURR:TWO:", (char*)notacircbuff[tempiter], strlen("CURR:TWO:")) == 0)){
 800294a:	2209      	movs	r2, #9
 800294c:	4629      	mov	r1, r5
 800294e:	4892      	ldr	r0, [pc, #584]	; (8002b98 <main+0xda8>)
 8002950:	f00b fa32 	bl	800ddb8 <strncmp>
 8002954:	4680      	mov	r8, r0
 8002956:	2800      	cmp	r0, #0
 8002958:	f000 80fc 	beq.w	8002b54 <main+0xd64>
			else if ((strncmp("*IDN?", (char*)notacircbuff[tempiter], strlen("*IDN?")) == 0)){
 800295c:	2205      	movs	r2, #5
 800295e:	4629      	mov	r1, r5
 8002960:	488e      	ldr	r0, [pc, #568]	; (8002b9c <main+0xdac>)
 8002962:	f00b fa29 	bl	800ddb8 <strncmp>
 8002966:	2800      	cmp	r0, #0
 8002968:	f47f acd0 	bne.w	800230c <main+0x51c>
				CDC_Transmit_FS((uint8_t*)"493 Lab Power Supply\n", strlen("493 Lab Power Supply\n"));
 800296c:	2115      	movs	r1, #21
 800296e:	488c      	ldr	r0, [pc, #560]	; (8002ba0 <main+0xdb0>)
 8002970:	f00a fb2c 	bl	800cfcc <CDC_Transmit_FS>
 8002974:	e4ca      	b.n	800230c <main+0x51c>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) <= 12.00)){
 8002976:	f105 080c 	add.w	r8, r5, #12
 800297a:	4640      	mov	r0, r8
 800297c:	f00a fd52 	bl	800d424 <atof>
 8002980:	4632      	mov	r2, r6
 8002982:	463b      	mov	r3, r7
 8002984:	f7fe f846 	bl	8000a14 <__aeabi_dcmpge>
 8002988:	b148      	cbz	r0, 800299e <main+0xbae>
 800298a:	4640      	mov	r0, r8
 800298c:	f00a fd4a 	bl	800d424 <atof>
 8002990:	2200      	movs	r2, #0
 8002992:	4b84      	ldr	r3, [pc, #528]	; (8002ba4 <main+0xdb4>)
 8002994:	f7fe f834 	bl	8000a00 <__aeabi_dcmple>
 8002998:	2800      	cmp	r0, #0
 800299a:	f040 80de 	bne.w	8002b5a <main+0xd6a>
					snprintf((char*)MSG, 64, "ERROR: INVALID NUMBER\n");
 800299e:	f8df e208 	ldr.w	lr, [pc, #520]	; 8002ba8 <main+0xdb8>
 80029a2:	f8df c208 	ldr.w	ip, [pc, #520]	; 8002bac <main+0xdbc>
 80029a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80029aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80029ae:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80029b2:	f8ae 1004 	strh.w	r1, [lr, #4]
 80029b6:	0c09      	lsrs	r1, r1, #16
 80029b8:	f8ce 0000 	str.w	r0, [lr]
 80029bc:	f88e 1006 	strb.w	r1, [lr, #6]
				CDC_Transmit_FS(MSG, 64);
 80029c0:	e49b      	b.n	80022fa <main+0x50a>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) <= 0.80)){
 80029c2:	f105 090c 	add.w	r9, r5, #12
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 80029c6:	4648      	mov	r0, r9
 80029c8:	f00a fd2c 	bl	800d424 <atof>
 80029cc:	4632      	mov	r2, r6
 80029ce:	463b      	mov	r3, r7
 80029d0:	f7fe f820 	bl	8000a14 <__aeabi_dcmpge>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d0e2      	beq.n	800299e <main+0xbae>
 80029d8:	4648      	mov	r0, r9
 80029da:	f00a fd23 	bl	800d424 <atof>
 80029de:	a362      	add	r3, pc, #392	; (adr r3, 8002b68 <main+0xd78>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fe f80c 	bl	8000a00 <__aeabi_dcmple>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d0d8      	beq.n	800299e <main+0xbae>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 80029ec:	4648      	mov	r0, r9
 80029ee:	f00a fd19 	bl	800d424 <atof>
					uint8_t tempbuff[8] = {0};
 80029f2:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 80029f6:	f7fe f87f 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 80029fa:	f7fd fd2d 	bl	8000458 <__aeabi_f2d>
 80029fe:	4a6c      	ldr	r2, [pc, #432]	; (8002bb0 <main+0xdc0>)
 8002a00:	e9cd 0100 	strd	r0, r1, [sp]
 8002a04:	2108      	movs	r1, #8
 8002a06:	a80e      	add	r0, sp, #56	; 0x38
 8002a08:	f00b f9a2 	bl	800dd50 <sniprintf>
					amp_set_aux = (float)atof((char*)tempbuff);
 8002a0c:	a80e      	add	r0, sp, #56	; 0x38
 8002a0e:	f00a fd09 	bl	800d424 <atof>
 8002a12:	f7fe f871 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002a16:	230a      	movs	r3, #10
					amp_set_aux = (float)atof((char*)tempbuff);
 8002a18:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <main+0xdc4>)
					snprintf((char*)MSG, 64, "\n");
 8002a1a:	f8ab 3000 	strh.w	r3, [fp]
					amp_set_aux = (float)atof((char*)tempbuff);
 8002a1e:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002a20:	e46b      	b.n	80022fa <main+0x50a>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) <= 12.00)){
 8002a22:	f105 0909 	add.w	r9, r5, #9
 8002a26:	4648      	mov	r0, r9
 8002a28:	f00a fcfc 	bl	800d424 <atof>
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	463b      	mov	r3, r7
 8002a30:	f7fd fff0 	bl	8000a14 <__aeabi_dcmpge>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d0b2      	beq.n	800299e <main+0xbae>
 8002a38:	4648      	mov	r0, r9
 8002a3a:	f00a fcf3 	bl	800d424 <atof>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <main+0xdb4>)
 8002a42:	f7fd ffdd 	bl	8000a00 <__aeabi_dcmple>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d0a9      	beq.n	800299e <main+0xbae>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a4a:	4648      	mov	r0, r9
 8002a4c:	f00a fcea 	bl	800d424 <atof>
					uint8_t tempbuff[8] = {0};
 8002a50:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a54:	f7fe f850 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002a58:	f7fd fcfe 	bl	8000458 <__aeabi_f2d>
					volt_set_main_old = volt_set_main;
 8002a5c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8002bb8 <main+0xdc8>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002a60:	e9cd 0100 	strd	r0, r1, [sp]
 8002a64:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <main+0xdcc>)
 8002a66:	2108      	movs	r1, #8
 8002a68:	a80e      	add	r0, sp, #56	; 0x38
 8002a6a:	f00b f971 	bl	800dd50 <sniprintf>
					volt_set_main_old = volt_set_main;
 8002a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002a72:	4a53      	ldr	r2, [pc, #332]	; (8002bc0 <main+0xdd0>)
					amp_set_main_old = amp_set_main;
 8002a74:	6013      	str	r3, [r2, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002a76:	a80e      	add	r0, sp, #56	; 0x38
 8002a78:	f00a fcd4 	bl	800d424 <atof>
 8002a7c:	f7fe f83c 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002a80:	230a      	movs	r3, #10
 8002a82:	f8ab 3000 	strh.w	r3, [fp]
					amp_set_main = (float)atof((char*)tempbuff);
 8002a86:	f8c8 0000 	str.w	r0, [r8]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002a8a:	e436      	b.n	80022fa <main+0x50a>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) <= 12.00)){
 8002a8c:	f105 090c 	add.w	r9, r5, #12
 8002a90:	e7c9      	b.n	8002a26 <main+0xc36>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002a92:	f105 0909 	add.w	r9, r5, #9
 8002a96:	4648      	mov	r0, r9
 8002a98:	f00a fcc4 	bl	800d424 <atof>
 8002a9c:	4632      	mov	r2, r6
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	f7fd ffb8 	bl	8000a14 <__aeabi_dcmpge>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	f43f af7a 	beq.w	800299e <main+0xbae>
 8002aaa:	4648      	mov	r0, r9
 8002aac:	f00a fcba 	bl	800d424 <atof>
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <main+0xdb4>)
 8002ab4:	f7fd ffa4 	bl	8000a00 <__aeabi_dcmple>
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	f43f af70 	beq.w	800299e <main+0xbae>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002abe:	4648      	mov	r0, r9
 8002ac0:	f00a fcb0 	bl	800d424 <atof>
					uint8_t tempbuff[8] = {0};
 8002ac4:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002ac8:	f7fe f816 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002acc:	f7fd fcc4 	bl	8000458 <__aeabi_f2d>
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	; (8002bbc <main+0xdcc>)
 8002ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8002ad6:	2108      	movs	r1, #8
 8002ad8:	a80e      	add	r0, sp, #56	; 0x38
 8002ada:	f00b f939 	bl	800dd50 <sniprintf>
					volt_set_aux = (float)atof((char*)tempbuff);
 8002ade:	a80e      	add	r0, sp, #56	; 0x38
 8002ae0:	f00a fca0 	bl	800d424 <atof>
 8002ae4:	f7fe f808 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002ae8:	230a      	movs	r3, #10
					volt_set_aux = (float)atof((char*)tempbuff);
 8002aea:	4a36      	ldr	r2, [pc, #216]	; (8002bc4 <main+0xdd4>)
					snprintf((char*)MSG, 64, "\n");
 8002aec:	f8ab 3000 	strh.w	r3, [fp]
					volt_set_aux = (float)atof((char*)tempbuff);
 8002af0:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002af2:	e402      	b.n	80022fa <main+0x50a>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) <= 0.80)){
 8002af4:	f105 090c 	add.w	r9, r5, #12
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002af8:	4648      	mov	r0, r9
 8002afa:	f00a fc93 	bl	800d424 <atof>
 8002afe:	4632      	mov	r2, r6
 8002b00:	463b      	mov	r3, r7
 8002b02:	f7fd ff87 	bl	8000a14 <__aeabi_dcmpge>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f43f af49 	beq.w	800299e <main+0xbae>
 8002b0c:	4648      	mov	r0, r9
 8002b0e:	f00a fc89 	bl	800d424 <atof>
 8002b12:	a315      	add	r3, pc, #84	; (adr r3, 8002b68 <main+0xd78>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f7fd ff72 	bl	8000a00 <__aeabi_dcmple>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	f43f af3e 	beq.w	800299e <main+0xbae>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b22:	4648      	mov	r0, r9
 8002b24:	f00a fc7e 	bl	800d424 <atof>
					uint8_t tempbuff[8] = {0};
 8002b28:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b2c:	f7fd ffe4 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b30:	f7fd fc92 	bl	8000458 <__aeabi_f2d>
					amp_set_main_old = amp_set_main;
 8002b34:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002bc8 <main+0xdd8>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b38:	e9cd 0100 	strd	r0, r1, [sp]
 8002b3c:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <main+0xdc0>)
 8002b3e:	2108      	movs	r1, #8
 8002b40:	a80e      	add	r0, sp, #56	; 0x38
 8002b42:	f00b f905 	bl	800dd50 <sniprintf>
					amp_set_main_old = amp_set_main;
 8002b46:	f8d8 3000 	ldr.w	r3, [r8]
 8002b4a:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <main+0xddc>)
 8002b4c:	e792      	b.n	8002a74 <main+0xc84>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002b4e:	f105 0909 	add.w	r9, r5, #9
 8002b52:	e738      	b.n	80029c6 <main+0xbd6>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002b54:	f105 0909 	add.w	r9, r5, #9
 8002b58:	e7ce      	b.n	8002af8 <main+0xd08>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 12);
 8002b5a:	4640      	mov	r0, r8
 8002b5c:	f00a fc62 	bl	800d424 <atof>
					uint8_t tempbuff[8] = {0};
 8002b60:	2300      	movs	r3, #0
 8002b62:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002b66:	e7af      	b.n	8002ac8 <main+0xcd8>
 8002b68:	9999999a 	.word	0x9999999a
 8002b6c:	3fe99999 	.word	0x3fe99999
 8002b70:	08011970 	.word	0x08011970
 8002b74:	08011980 	.word	0x08011980
 8002b78:	200003eb 	.word	0x200003eb
 8002b7c:	08011990 	.word	0x08011990
 8002b80:	080119c0 	.word	0x080119c0
 8002b84:	080119cc 	.word	0x080119cc
 8002b88:	080119dc 	.word	0x080119dc
 8002b8c:	080119e8 	.word	0x080119e8
 8002b90:	08011a00 	.word	0x08011a00
 8002b94:	08011a0c 	.word	0x08011a0c
 8002b98:	08011a1c 	.word	0x08011a1c
 8002b9c:	08011a28 	.word	0x08011a28
 8002ba0:	08011a30 	.word	0x08011a30
 8002ba4:	40280000 	.word	0x40280000
 8002ba8:	20000388 	.word	0x20000388
 8002bac:	080119a8 	.word	0x080119a8
 8002bb0:	080119f8 	.word	0x080119f8
 8002bb4:	200003e0 	.word	0x200003e0
 8002bb8:	20000a74 	.word	0x20000a74
 8002bbc:	080119a0 	.word	0x080119a0
 8002bc0:	20000a78 	.word	0x20000a78
 8002bc4:	20000a70 	.word	0x20000a70
 8002bc8:	200003e4 	.word	0x200003e4
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <lcd_psu_init>:
void lcd_psu_init(void){
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bd4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bd6:	49bb      	ldr	r1, [pc, #748]	; (8002ec4 <lcd_psu_init+0x2f4>)
void lcd_psu_init(void){
 8002bd8:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bda:	48bb      	ldr	r0, [pc, #748]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002bdc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bde:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be0:	aa03      	add	r2, sp, #12
 8002be2:	214e      	movs	r1, #78	; 0x4e
 8002be4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be8:	f006 fb94 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bec:	2356      	movs	r3, #86	; 0x56
 8002bee:	4db7      	ldr	r5, [pc, #732]	; (8002ecc <lcd_psu_init+0x2fc>)
	data_l = ((data<<4)&0xf0);
 8002bf0:	011a      	lsls	r2, r3, #4
 8002bf2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bf8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bfc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c00:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c04:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c08:	2304      	movs	r3, #4
 8002c0a:	214e      	movs	r1, #78	; 0x4e
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	aa03      	add	r2, sp, #12
 8002c10:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c12:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c16:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c1a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c1e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c22:	f006 fb77 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c26:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e0      	bne.n	8002bf0 <lcd_psu_init+0x20>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c2e:	49a8      	ldr	r1, [pc, #672]	; (8002ed0 <lcd_psu_init+0x300>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c30:	2304      	movs	r3, #4
 8002c32:	aa03      	add	r2, sp, #12
 8002c34:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c36:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c38:	48a3      	ldr	r0, [pc, #652]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002c3a:	214e      	movs	r1, #78	; 0x4e
 8002c3c:	f006 fb6a 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c40:	49a4      	ldr	r1, [pc, #656]	; (8002ed4 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c42:	2304      	movs	r3, #4
 8002c44:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c46:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c48:	489f      	ldr	r0, [pc, #636]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002c4a:	214e      	movs	r1, #78	; 0x4e
 8002c4c:	aa03      	add	r2, sp, #12
 8002c4e:	f006 fb61 	bl	8009314 <HAL_I2C_Master_Transmit>
 8002c52:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002c54:	2356      	movs	r3, #86	; 0x56
 8002c56:	4da0      	ldr	r5, [pc, #640]	; (8002ed8 <lcd_psu_init+0x308>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c58:	4f9b      	ldr	r7, [pc, #620]	; (8002ec8 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002c5a:	011a      	lsls	r2, r3, #4
 8002c5c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c62:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c66:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c6a:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c6e:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c72:	2304      	movs	r3, #4
 8002c74:	214e      	movs	r1, #78	; 0x4e
 8002c76:	4638      	mov	r0, r7
 8002c78:	aa03      	add	r2, sp, #12
 8002c7a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c7c:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c80:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c84:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c88:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c8c:	f006 fb42 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c90:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e0      	bne.n	8002c5a <lcd_psu_init+0x8a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c98:	4990      	ldr	r1, [pc, #576]	; (8002edc <lcd_psu_init+0x30c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	aa03      	add	r2, sp, #12
 8002c9e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ca0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca2:	4889      	ldr	r0, [pc, #548]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002ca4:	214e      	movs	r1, #78	; 0x4e
 8002ca6:	f006 fb35 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002caa:	498d      	ldr	r1, [pc, #564]	; (8002ee0 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cac:	2304      	movs	r3, #4
 8002cae:	aa03      	add	r2, sp, #12
 8002cb0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cb2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cb4:	4884      	ldr	r0, [pc, #528]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002cb6:	214e      	movs	r1, #78	; 0x4e
 8002cb8:	f006 fb2c 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cbc:	4989      	ldr	r1, [pc, #548]	; (8002ee4 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	aa03      	add	r2, sp, #12
 8002cc2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cc4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cc6:	4880      	ldr	r0, [pc, #512]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002cc8:	214e      	movs	r1, #78	; 0x4e
 8002cca:	f006 fb23 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002cce:	4986      	ldr	r1, [pc, #536]	; (8002ee8 <lcd_psu_init+0x318>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002cd4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cd6:	487c      	ldr	r0, [pc, #496]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002cd8:	214e      	movs	r1, #78	; 0x4e
 8002cda:	aa03      	add	r2, sp, #12
 8002cdc:	f006 fb1a 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002ce2:	2341      	movs	r3, #65	; 0x41
 8002ce4:	4d81      	ldr	r5, [pc, #516]	; (8002eec <lcd_psu_init+0x31c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce6:	4f78      	ldr	r7, [pc, #480]	; (8002ec8 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002ce8:	011a      	lsls	r2, r3, #4
 8002cea:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cf0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cf4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cf8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cfc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d00:	2304      	movs	r3, #4
 8002d02:	214e      	movs	r1, #78	; 0x4e
 8002d04:	4638      	mov	r0, r7
 8002d06:	aa03      	add	r2, sp, #12
 8002d08:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d0a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d0e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d12:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d16:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d1a:	f006 fafb 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d1e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e0      	bne.n	8002ce8 <lcd_psu_init+0x118>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d26:	4972      	ldr	r1, [pc, #456]	; (8002ef0 <lcd_psu_init+0x320>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d28:	2304      	movs	r3, #4
 8002d2a:	aa03      	add	r2, sp, #12
 8002d2c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d2e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d30:	4865      	ldr	r0, [pc, #404]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002d32:	214e      	movs	r1, #78	; 0x4e
 8002d34:	f006 faee 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d38:	4966      	ldr	r1, [pc, #408]	; (8002ed4 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d3e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d40:	4861      	ldr	r0, [pc, #388]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002d42:	214e      	movs	r1, #78	; 0x4e
 8002d44:	aa03      	add	r2, sp, #12
 8002d46:	f006 fae5 	bl	8009314 <HAL_I2C_Master_Transmit>
 8002d4a:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002d4c:	2341      	movs	r3, #65	; 0x41
 8002d4e:	4d69      	ldr	r5, [pc, #420]	; (8002ef4 <lcd_psu_init+0x324>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d50:	4f5d      	ldr	r7, [pc, #372]	; (8002ec8 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002d52:	011a      	lsls	r2, r3, #4
 8002d54:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d5a:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d5e:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d62:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d66:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	214e      	movs	r1, #78	; 0x4e
 8002d6e:	4638      	mov	r0, r7
 8002d70:	aa03      	add	r2, sp, #12
 8002d72:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d74:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d78:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d7c:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d80:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d84:	f006 fac6 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d88:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e0      	bne.n	8002d52 <lcd_psu_init+0x182>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d90:	4959      	ldr	r1, [pc, #356]	; (8002ef8 <lcd_psu_init+0x328>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d92:	2304      	movs	r3, #4
 8002d94:	aa03      	add	r2, sp, #12
 8002d96:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d98:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d9a:	484b      	ldr	r0, [pc, #300]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002d9c:	214e      	movs	r1, #78	; 0x4e
 8002d9e:	f006 fab9 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002da2:	494f      	ldr	r1, [pc, #316]	; (8002ee0 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da4:	2304      	movs	r3, #4
 8002da6:	aa03      	add	r2, sp, #12
 8002da8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002daa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dac:	4846      	ldr	r0, [pc, #280]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002dae:	214e      	movs	r1, #78	; 0x4e
 8002db0:	f006 fab0 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002db4:	494b      	ldr	r1, [pc, #300]	; (8002ee4 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db6:	2304      	movs	r3, #4
 8002db8:	aa03      	add	r2, sp, #12
 8002dba:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dbc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dbe:	4842      	ldr	r0, [pc, #264]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002dc0:	214e      	movs	r1, #78	; 0x4e
 8002dc2:	f006 faa7 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dc6:	494d      	ldr	r1, [pc, #308]	; (8002efc <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dc8:	2304      	movs	r3, #4
 8002dca:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dcc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dce:	483e      	ldr	r0, [pc, #248]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002dd0:	214e      	movs	r1, #78	; 0x4e
 8002dd2:	aa03      	add	r2, sp, #12
 8002dd4:	f006 fa9e 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dd8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002dda:	2356      	movs	r3, #86	; 0x56
 8002ddc:	4d48      	ldr	r5, [pc, #288]	; (8002f00 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dde:	4f3a      	ldr	r7, [pc, #232]	; (8002ec8 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002de0:	011a      	lsls	r2, r3, #4
 8002de2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002de8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dec:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002df0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002df4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df8:	2304      	movs	r3, #4
 8002dfa:	214e      	movs	r1, #78	; 0x4e
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	aa03      	add	r2, sp, #12
 8002e00:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e02:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e06:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e0a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e0e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e12:	f006 fa7f 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e16:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e0      	bne.n	8002de0 <lcd_psu_init+0x210>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e1e:	4939      	ldr	r1, [pc, #228]	; (8002f04 <lcd_psu_init+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e20:	2304      	movs	r3, #4
 8002e22:	aa03      	add	r2, sp, #12
 8002e24:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e26:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e28:	4827      	ldr	r0, [pc, #156]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002e2a:	214e      	movs	r1, #78	; 0x4e
 8002e2c:	f006 fa72 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e30:	4928      	ldr	r1, [pc, #160]	; (8002ed4 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e32:	2304      	movs	r3, #4
 8002e34:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e36:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e38:	4823      	ldr	r0, [pc, #140]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002e3a:	214e      	movs	r1, #78	; 0x4e
 8002e3c:	aa03      	add	r2, sp, #12
 8002e3e:	f006 fa69 	bl	8009314 <HAL_I2C_Master_Transmit>
 8002e42:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e44:	2356      	movs	r3, #86	; 0x56
 8002e46:	4d30      	ldr	r5, [pc, #192]	; (8002f08 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e48:	4f1f      	ldr	r7, [pc, #124]	; (8002ec8 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002e4a:	011a      	lsls	r2, r3, #4
 8002e4c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e52:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e56:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e5a:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e5e:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e62:	2304      	movs	r3, #4
 8002e64:	214e      	movs	r1, #78	; 0x4e
 8002e66:	4638      	mov	r0, r7
 8002e68:	aa03      	add	r2, sp, #12
 8002e6a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e6c:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e70:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e74:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e78:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e7c:	f006 fa4a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e80:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e0      	bne.n	8002e4a <lcd_psu_init+0x27a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e88:	4920      	ldr	r1, [pc, #128]	; (8002f0c <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	aa03      	add	r2, sp, #12
 8002e8e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e90:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e92:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002e94:	214e      	movs	r1, #78	; 0x4e
 8002e96:	f006 fa3d 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e9a:	4911      	ldr	r1, [pc, #68]	; (8002ee0 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	aa03      	add	r2, sp, #12
 8002ea0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ea2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea4:	4808      	ldr	r0, [pc, #32]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002ea6:	214e      	movs	r1, #78	; 0x4e
 8002ea8:	f006 fa34 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eac:	490d      	ldr	r1, [pc, #52]	; (8002ee4 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eae:	2304      	movs	r3, #4
 8002eb0:	aa03      	add	r2, sp, #12
 8002eb2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eb4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eb6:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <lcd_psu_init+0x2f8>)
 8002eb8:	214e      	movs	r1, #78	; 0x4e
 8002eba:	f006 fa2b 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ebe:	4914      	ldr	r1, [pc, #80]	; (8002f10 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	e027      	b.n	8002f14 <lcd_psu_init+0x344>
 8002ec4:	080c888c 	.word	0x080c888c
 8002ec8:	20000534 	.word	0x20000534
 8002ecc:	08011a68 	.word	0x08011a68
 8002ed0:	989c888c 	.word	0x989c888c
 8002ed4:	191d090d 	.word	0x191d090d
 8002ed8:	08011a6c 	.word	0x08011a6c
 8002edc:	c8cc888c 	.word	0xc8cc888c
 8002ee0:	090d090d 	.word	0x090d090d
 8002ee4:	a9ad393d 	.word	0xa9ad393d
 8002ee8:	080cc8cc 	.word	0x080cc8cc
 8002eec:	08011a70 	.word	0x08011a70
 8002ef0:	989cc8cc 	.word	0x989cc8cc
 8002ef4:	08011a74 	.word	0x08011a74
 8002ef8:	c8ccc8cc 	.word	0xc8ccc8cc
 8002efc:	484c989c 	.word	0x484c989c
 8002f00:	08011a78 	.word	0x08011a78
 8002f04:	d8dc989c 	.word	0xd8dc989c
 8002f08:	08011a7c 	.word	0x08011a7c
 8002f0c:	080ca8ac 	.word	0x080ca8ac
 8002f10:	484cd8dc 	.word	0x484cd8dc
 8002f14:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f16:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f18:	483d      	ldr	r0, [pc, #244]	; (8003010 <lcd_psu_init+0x440>)
 8002f1a:	214e      	movs	r1, #78	; 0x4e
 8002f1c:	aa03      	add	r2, sp, #12
 8002f1e:	f006 f9f9 	bl	8009314 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f22:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f24:	2341      	movs	r3, #65	; 0x41
 8002f26:	4d3b      	ldr	r5, [pc, #236]	; (8003014 <lcd_psu_init+0x444>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f28:	4f39      	ldr	r7, [pc, #228]	; (8003010 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 8002f2a:	011a      	lsls	r2, r3, #4
 8002f2c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f32:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f36:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f3a:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f3e:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f42:	2304      	movs	r3, #4
 8002f44:	214e      	movs	r1, #78	; 0x4e
 8002f46:	4638      	mov	r0, r7
 8002f48:	aa03      	add	r2, sp, #12
 8002f4a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f4c:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f50:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f54:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f58:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f5c:	f006 f9da 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f60:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e0      	bne.n	8002f2a <lcd_psu_init+0x35a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f68:	492b      	ldr	r1, [pc, #172]	; (8003018 <lcd_psu_init+0x448>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	aa03      	add	r2, sp, #12
 8002f6e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f70:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f72:	4827      	ldr	r0, [pc, #156]	; (8003010 <lcd_psu_init+0x440>)
 8002f74:	214e      	movs	r1, #78	; 0x4e
 8002f76:	f006 f9cd 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f7a:	4928      	ldr	r1, [pc, #160]	; (800301c <lcd_psu_init+0x44c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f80:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f82:	4823      	ldr	r0, [pc, #140]	; (8003010 <lcd_psu_init+0x440>)
 8002f84:	214e      	movs	r1, #78	; 0x4e
 8002f86:	aa03      	add	r2, sp, #12
 8002f88:	f006 f9c4 	bl	8009314 <HAL_I2C_Master_Transmit>
 8002f8c:	2564      	movs	r5, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f8e:	2341      	movs	r3, #65	; 0x41
 8002f90:	4c23      	ldr	r4, [pc, #140]	; (8003020 <lcd_psu_init+0x450>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f92:	4e1f      	ldr	r6, [pc, #124]	; (8003010 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 8002f94:	011a      	lsls	r2, r3, #4
 8002f96:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f9c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fa0:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fa4:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fa8:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fac:	2304      	movs	r3, #4
 8002fae:	214e      	movs	r1, #78	; 0x4e
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	aa03      	add	r2, sp, #12
 8002fb4:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fb6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fba:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fbe:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fc2:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fc6:	f006 f9a5 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e0      	bne.n	8002f94 <lcd_psu_init+0x3c4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fd2:	4914      	ldr	r1, [pc, #80]	; (8003024 <lcd_psu_init+0x454>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd4:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fd6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd8:	2304      	movs	r3, #4
 8002fda:	214e      	movs	r1, #78	; 0x4e
 8002fdc:	9500      	str	r5, [sp, #0]
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <lcd_psu_init+0x440>)
 8002fe0:	f006 f998 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fe4:	4910      	ldr	r1, [pc, #64]	; (8003028 <lcd_psu_init+0x458>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe6:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fe8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fea:	2304      	movs	r3, #4
 8002fec:	214e      	movs	r1, #78	; 0x4e
 8002fee:	9500      	str	r5, [sp, #0]
 8002ff0:	4807      	ldr	r0, [pc, #28]	; (8003010 <lcd_psu_init+0x440>)
 8002ff2:	f006 f98f 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ff6:	480d      	ldr	r0, [pc, #52]	; (800302c <lcd_psu_init+0x45c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ff8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ffa:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ffc:	214e      	movs	r1, #78	; 0x4e
 8002ffe:	aa03      	add	r2, sp, #12
 8003000:	9500      	str	r5, [sp, #0]
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <lcd_psu_init+0x440>)
 8003004:	f006 f986 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003008:	b004      	add	sp, #16
 800300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800300e:	bf00      	nop
 8003010:	20000534 	.word	0x20000534
 8003014:	08011a80 	.word	0x08011a80
 8003018:	d8dcd8dc 	.word	0xd8dcd8dc
 800301c:	191d090d 	.word	0x191d090d
 8003020:	08011a84 	.word	0x08011a84
 8003024:	080ce8ec 	.word	0x080ce8ec
 8003028:	090d090d 	.word	0x090d090d
 800302c:	a9ad393d 	.word	0xa9ad393d

08003030 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	4605      	mov	r5, r0
 8003034:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 8003036:	4608      	mov	r0, r1
 8003038:	f7fd fa0e 	bl	8000458 <__aeabi_f2d>
 800303c:	4606      	mov	r6, r0
 800303e:	460f      	mov	r7, r1
 8003040:	4a9a      	ldr	r2, [pc, #616]	; (80032ac <lcd_update_voltage+0x27c>)
 8003042:	2106      	movs	r1, #6
 8003044:	e9cd 6700 	strd	r6, r7, [sp]
 8003048:	a804      	add	r0, sp, #16
 800304a:	f00a fe81 	bl	800dd50 <sniprintf>
	if(channel == 1){
 800304e:	2d01      	cmp	r5, #1
 8003050:	d009      	beq.n	8003066 <lcd_update_voltage+0x36>
	else if(channel == 2){
 8003052:	2d02      	cmp	r5, #2
 8003054:	f000 80cb 	beq.w	80031ee <lcd_update_voltage+0x1be>
	else if(channel == 3){
 8003058:	2d03      	cmp	r5, #3
 800305a:	f000 8135 	beq.w	80032c8 <lcd_update_voltage+0x298>
	else if(channel == 4){
 800305e:	2d04      	cmp	r5, #4
 8003060:	d068      	beq.n	8003134 <lcd_update_voltage+0x104>
}
 8003062:	b007      	add	sp, #28
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003066:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003068:	4a91      	ldr	r2, [pc, #580]	; (80032b0 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800306a:	4892      	ldr	r0, [pc, #584]	; (80032b4 <lcd_update_voltage+0x284>)
 800306c:	ac03      	add	r4, sp, #12
 800306e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003070:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003072:	214e      	movs	r1, #78	; 0x4e
 8003074:	4622      	mov	r2, r4
 8003076:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003078:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800307a:	f006 f94b 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800307e:	2320      	movs	r3, #32
 8003080:	4d8d      	ldr	r5, [pc, #564]	; (80032b8 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003082:	011a      	lsls	r2, r3, #4
 8003084:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800308a:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800308e:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003092:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003096:	f043 0309 	orr.w	r3, r3, #9
 800309a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800309e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030a2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030a4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030a8:	4622      	mov	r2, r4
 80030aa:	214e      	movs	r1, #78	; 0x4e
 80030ac:	4638      	mov	r0, r7
 80030ae:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030b0:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030b4:	f006 f92e 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e0      	bne.n	8003082 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030c0:	4a7b      	ldr	r2, [pc, #492]	; (80032b0 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030c2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030c4:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030c6:	214e      	movs	r1, #78	; 0x4e
 80030c8:	4622      	mov	r2, r4
 80030ca:	487a      	ldr	r0, [pc, #488]	; (80032b4 <lcd_update_voltage+0x284>)
 80030cc:	9600      	str	r6, [sp, #0]
 80030ce:	f006 f921 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80030d6:	b30b      	cbz	r3, 800311c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030d8:	2764      	movs	r7, #100	; 0x64
 80030da:	4e76      	ldr	r6, [pc, #472]	; (80032b4 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80030dc:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80030de:	011a      	lsls	r2, r3, #4
 80030e0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80030e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030e6:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030ea:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030ee:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030f2:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030f6:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030f8:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030fc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003100:	4622      	mov	r2, r4
 8003102:	214e      	movs	r1, #78	; 0x4e
 8003104:	4630      	mov	r0, r6
 8003106:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003108:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800310c:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003110:	f006 f900 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003114:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e0      	bne.n	80030de <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800311c:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800311e:	4867      	ldr	r0, [pc, #412]	; (80032bc <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003120:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003122:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003124:	4622      	mov	r2, r4
 8003126:	214e      	movs	r1, #78	; 0x4e
 8003128:	9500      	str	r5, [sp, #0]
 800312a:	4862      	ldr	r0, [pc, #392]	; (80032b4 <lcd_update_voltage+0x284>)
 800312c:	f006 f8f2 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003130:	b007      	add	sp, #28
 8003132:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003134:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003136:	4a62      	ldr	r2, [pc, #392]	; (80032c0 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003138:	485e      	ldr	r0, [pc, #376]	; (80032b4 <lcd_update_voltage+0x284>)
 800313a:	ac03      	add	r4, sp, #12
 800313c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800313e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003140:	214e      	movs	r1, #78	; 0x4e
 8003142:	4622      	mov	r2, r4
 8003144:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003146:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003148:	f006 f8e4 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800314c:	2320      	movs	r3, #32
 800314e:	4d5a      	ldr	r5, [pc, #360]	; (80032b8 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003150:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003156:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800315a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800315c:	f043 0309 	orr.w	r3, r3, #9
 8003160:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003164:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003168:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800316c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003170:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003174:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003178:	2304      	movs	r3, #4
 800317a:	4622      	mov	r2, r4
 800317c:	214e      	movs	r1, #78	; 0x4e
 800317e:	4638      	mov	r0, r7
 8003180:	9600      	str	r6, [sp, #0]
 8003182:	f006 f8c7 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003186:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e0      	bne.n	8003150 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800318e:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003190:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003192:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003194:	214e      	movs	r1, #78	; 0x4e
 8003196:	4622      	mov	r2, r4
 8003198:	4846      	ldr	r0, [pc, #280]	; (80032b4 <lcd_update_voltage+0x284>)
 800319a:	9600      	str	r6, [sp, #0]
 800319c:	f006 f8ba 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0b9      	beq.n	800311c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031a8:	2764      	movs	r7, #100	; 0x64
 80031aa:	4e42      	ldr	r6, [pc, #264]	; (80032b4 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80031ac:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80031ae:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031b4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80031b8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031ba:	f043 0309 	orr.w	r3, r3, #9
 80031be:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031c2:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031c6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031ca:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031ce:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031d2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031d6:	2304      	movs	r3, #4
 80031d8:	4622      	mov	r2, r4
 80031da:	214e      	movs	r1, #78	; 0x4e
 80031dc:	4630      	mov	r0, r6
 80031de:	9700      	str	r7, [sp, #0]
 80031e0:	f006 f898 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e0      	bne.n	80031ae <lcd_update_voltage+0x17e>
 80031ec:	e796      	b.n	800311c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031ee:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031f0:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031f2:	4830      	ldr	r0, [pc, #192]	; (80032b4 <lcd_update_voltage+0x284>)
 80031f4:	ac03      	add	r4, sp, #12
 80031f6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031f8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031fa:	214e      	movs	r1, #78	; 0x4e
 80031fc:	4622      	mov	r2, r4
 80031fe:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003200:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003202:	f006 f887 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003206:	2320      	movs	r3, #32
 8003208:	4d2b      	ldr	r5, [pc, #172]	; (80032b8 <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 800320a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003212:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003216:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800321a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800321e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003222:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003226:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800322a:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800322e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003230:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003234:	214e      	movs	r1, #78	; 0x4e
 8003236:	4622      	mov	r2, r4
 8003238:	4638      	mov	r0, r7
 800323a:	9600      	str	r6, [sp, #0]
 800323c:	f006 f86a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003240:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e0      	bne.n	800320a <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003248:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800324a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800324c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800324e:	214e      	movs	r1, #78	; 0x4e
 8003250:	4622      	mov	r2, r4
 8003252:	4818      	ldr	r0, [pc, #96]	; (80032b4 <lcd_update_voltage+0x284>)
 8003254:	9600      	str	r6, [sp, #0]
 8003256:	f006 f85d 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800325a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f43f af5c 	beq.w	800311c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003264:	2764      	movs	r7, #100	; 0x64
 8003266:	4e13      	ldr	r6, [pc, #76]	; (80032b4 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003268:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800326a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800326c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003270:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003272:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003276:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800327a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800327e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003282:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003286:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800328a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800328e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003290:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003294:	4622      	mov	r2, r4
 8003296:	214e      	movs	r1, #78	; 0x4e
 8003298:	4630      	mov	r0, r6
 800329a:	9700      	str	r7, [sp, #0]
 800329c:	f006 f83a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e0      	bne.n	800326a <lcd_update_voltage+0x23a>
 80032a8:	e738      	b.n	800311c <lcd_update_voltage+0xec>
 80032aa:	bf00      	nop
 80032ac:	080119a0 	.word	0x080119a0
 80032b0:	383c888c 	.word	0x383c888c
 80032b4:	20000534 	.word	0x20000534
 80032b8:	08011a88 	.word	0x08011a88
 80032bc:	696d595d 	.word	0x696d595d
 80032c0:	282ca8ac 	.word	0x282ca8ac
 80032c4:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032ca:	4a2e      	ldr	r2, [pc, #184]	; (8003384 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032cc:	482e      	ldr	r0, [pc, #184]	; (8003388 <lcd_update_voltage+0x358>)
 80032ce:	ac03      	add	r4, sp, #12
 80032d0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032d2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d4:	214e      	movs	r1, #78	; 0x4e
 80032d6:	4622      	mov	r2, r4
 80032d8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032da:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032dc:	f006 f81a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032e0:	2320      	movs	r3, #32
 80032e2:	4d2a      	ldr	r5, [pc, #168]	; (800338c <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 80032e4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032ea:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80032ee:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032f0:	f043 0309 	orr.w	r3, r3, #9
 80032f4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032f8:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032fc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003300:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003304:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003308:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800330c:	2304      	movs	r3, #4
 800330e:	4622      	mov	r2, r4
 8003310:	214e      	movs	r1, #78	; 0x4e
 8003312:	4638      	mov	r0, r7
 8003314:	9600      	str	r6, [sp, #0]
 8003316:	f005 fffd 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800331a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e0      	bne.n	80032e4 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003324:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003326:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003328:	214e      	movs	r1, #78	; 0x4e
 800332a:	4622      	mov	r2, r4
 800332c:	4816      	ldr	r0, [pc, #88]	; (8003388 <lcd_update_voltage+0x358>)
 800332e:	9600      	str	r6, [sp, #0]
 8003330:	f005 fff0 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003334:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f43f aeef 	beq.w	800311c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800333e:	2764      	movs	r7, #100	; 0x64
 8003340:	4e11      	ldr	r6, [pc, #68]	; (8003388 <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 8003342:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8003344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800334c:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003350:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003354:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003358:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800335c:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003360:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003364:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003368:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800336a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800336e:	214e      	movs	r1, #78	; 0x4e
 8003370:	4622      	mov	r2, r4
 8003372:	4630      	mov	r0, r6
 8003374:	9700      	str	r7, [sp, #0]
 8003376:	f005 ffcd 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800337a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e0      	bne.n	8003344 <lcd_update_voltage+0x314>
 8003382:	e6cb      	b.n	800311c <lcd_update_voltage+0xec>
 8003384:	787c989c 	.word	0x787c989c
 8003388:	20000534 	.word	0x20000534
 800338c:	08011a88 	.word	0x08011a88

08003390 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	4605      	mov	r5, r0
 8003394:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 8003396:	4608      	mov	r0, r1
 8003398:	f7fd f85e 	bl	8000458 <__aeabi_f2d>
 800339c:	4606      	mov	r6, r0
 800339e:	460f      	mov	r7, r1
 80033a0:	4a9a      	ldr	r2, [pc, #616]	; (800360c <lcd_update_amperage+0x27c>)
 80033a2:	2106      	movs	r1, #6
 80033a4:	e9cd 6700 	strd	r6, r7, [sp]
 80033a8:	a804      	add	r0, sp, #16
 80033aa:	f00a fcd1 	bl	800dd50 <sniprintf>
	if(channel == 1){
 80033ae:	2d01      	cmp	r5, #1
 80033b0:	d009      	beq.n	80033c6 <lcd_update_amperage+0x36>
	else if(channel == 2){
 80033b2:	2d02      	cmp	r5, #2
 80033b4:	f000 80cb 	beq.w	800354e <lcd_update_amperage+0x1be>
	else if(channel == 3){
 80033b8:	2d03      	cmp	r5, #3
 80033ba:	f000 8135 	beq.w	8003628 <lcd_update_amperage+0x298>
	else if(channel == 4){
 80033be:	2d04      	cmp	r5, #4
 80033c0:	d068      	beq.n	8003494 <lcd_update_amperage+0x104>
}
 80033c2:	b007      	add	sp, #28
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033c6:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033c8:	4a91      	ldr	r2, [pc, #580]	; (8003610 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033ca:	4892      	ldr	r0, [pc, #584]	; (8003614 <lcd_update_amperage+0x284>)
 80033cc:	ac03      	add	r4, sp, #12
 80033ce:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033d0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033d2:	214e      	movs	r1, #78	; 0x4e
 80033d4:	4622      	mov	r2, r4
 80033d6:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033d8:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033da:	f005 ff9b 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033de:	2320      	movs	r3, #32
 80033e0:	4d8d      	ldr	r5, [pc, #564]	; (8003618 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 80033e2:	011a      	lsls	r2, r3, #4
 80033e4:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80033e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033ea:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033ee:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033f2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033f6:	f043 0309 	orr.w	r3, r3, #9
 80033fa:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033fe:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003402:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003404:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003408:	4622      	mov	r2, r4
 800340a:	214e      	movs	r1, #78	; 0x4e
 800340c:	4638      	mov	r0, r7
 800340e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003410:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003414:	f005 ff7e 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003418:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e0      	bne.n	80033e2 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003420:	4a7b      	ldr	r2, [pc, #492]	; (8003610 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003422:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003424:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003426:	214e      	movs	r1, #78	; 0x4e
 8003428:	4622      	mov	r2, r4
 800342a:	487a      	ldr	r0, [pc, #488]	; (8003614 <lcd_update_amperage+0x284>)
 800342c:	9600      	str	r6, [sp, #0]
 800342e:	f005 ff71 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003432:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003436:	b30b      	cbz	r3, 800347c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003438:	2764      	movs	r7, #100	; 0x64
 800343a:	4e76      	ldr	r6, [pc, #472]	; (8003614 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800343c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800343e:	011a      	lsls	r2, r3, #4
 8003440:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003446:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800344a:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800344e:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003452:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003456:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003458:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800345c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003460:	4622      	mov	r2, r4
 8003462:	214e      	movs	r1, #78	; 0x4e
 8003464:	4630      	mov	r0, r6
 8003466:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003468:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800346c:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003470:	f005 ff50 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003474:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e0      	bne.n	800343e <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800347c:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800347e:	4867      	ldr	r0, [pc, #412]	; (800361c <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003480:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003482:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003484:	4622      	mov	r2, r4
 8003486:	214e      	movs	r1, #78	; 0x4e
 8003488:	9500      	str	r5, [sp, #0]
 800348a:	4862      	ldr	r0, [pc, #392]	; (8003614 <lcd_update_amperage+0x284>)
 800348c:	f005 ff42 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003490:	b007      	add	sp, #28
 8003492:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003494:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003496:	4a62      	ldr	r2, [pc, #392]	; (8003620 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003498:	485e      	ldr	r0, [pc, #376]	; (8003614 <lcd_update_amperage+0x284>)
 800349a:	ac03      	add	r4, sp, #12
 800349c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800349e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034a0:	214e      	movs	r1, #78	; 0x4e
 80034a2:	4622      	mov	r2, r4
 80034a4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034a6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034a8:	f005 ff34 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034ac:	2320      	movs	r3, #32
 80034ae:	4d5a      	ldr	r5, [pc, #360]	; (8003618 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 80034b0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80034b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034b6:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80034ba:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034bc:	f043 0309 	orr.w	r3, r3, #9
 80034c0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034c4:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034c8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034cc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034d0:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034d4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034d8:	2304      	movs	r3, #4
 80034da:	4622      	mov	r2, r4
 80034dc:	214e      	movs	r1, #78	; 0x4e
 80034de:	4638      	mov	r0, r7
 80034e0:	9600      	str	r6, [sp, #0]
 80034e2:	f005 ff17 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034e6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e0      	bne.n	80034b0 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034ee:	4a4c      	ldr	r2, [pc, #304]	; (8003620 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034f2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f4:	214e      	movs	r1, #78	; 0x4e
 80034f6:	4622      	mov	r2, r4
 80034f8:	4846      	ldr	r0, [pc, #280]	; (8003614 <lcd_update_amperage+0x284>)
 80034fa:	9600      	str	r6, [sp, #0]
 80034fc:	f005 ff0a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003500:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0b9      	beq.n	800347c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003508:	2764      	movs	r7, #100	; 0x64
 800350a:	4e42      	ldr	r6, [pc, #264]	; (8003614 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800350c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800350e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003514:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003518:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800351a:	f043 0309 	orr.w	r3, r3, #9
 800351e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003522:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003526:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800352a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800352e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003532:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003536:	2304      	movs	r3, #4
 8003538:	4622      	mov	r2, r4
 800353a:	214e      	movs	r1, #78	; 0x4e
 800353c:	4630      	mov	r0, r6
 800353e:	9700      	str	r7, [sp, #0]
 8003540:	f005 fee8 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003544:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e0      	bne.n	800350e <lcd_update_amperage+0x17e>
 800354c:	e796      	b.n	800347c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800354e:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003550:	4a34      	ldr	r2, [pc, #208]	; (8003624 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003552:	4830      	ldr	r0, [pc, #192]	; (8003614 <lcd_update_amperage+0x284>)
 8003554:	ac03      	add	r4, sp, #12
 8003556:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003558:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800355a:	214e      	movs	r1, #78	; 0x4e
 800355c:	4622      	mov	r2, r4
 800355e:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003560:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003562:	f005 fed7 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003566:	2320      	movs	r3, #32
 8003568:	4d2b      	ldr	r5, [pc, #172]	; (8003618 <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 800356a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003572:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003576:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800357a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800357e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003582:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003586:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800358a:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800358e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003590:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003594:	214e      	movs	r1, #78	; 0x4e
 8003596:	4622      	mov	r2, r4
 8003598:	4638      	mov	r0, r7
 800359a:	9600      	str	r6, [sp, #0]
 800359c:	f005 feba 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e0      	bne.n	800356a <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035a8:	4a1e      	ldr	r2, [pc, #120]	; (8003624 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035aa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035ac:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ae:	214e      	movs	r1, #78	; 0x4e
 80035b0:	4622      	mov	r2, r4
 80035b2:	4818      	ldr	r0, [pc, #96]	; (8003614 <lcd_update_amperage+0x284>)
 80035b4:	9600      	str	r6, [sp, #0]
 80035b6:	f005 fead 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035ba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f43f af5c 	beq.w	800347c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c4:	2764      	movs	r7, #100	; 0x64
 80035c6:	4e13      	ldr	r6, [pc, #76]	; (8003614 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80035c8:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80035ca:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80035cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80035d0:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035d2:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035d6:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035da:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035de:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035e2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035e6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035ea:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ee:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035f0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035f4:	4622      	mov	r2, r4
 80035f6:	214e      	movs	r1, #78	; 0x4e
 80035f8:	4630      	mov	r0, r6
 80035fa:	9700      	str	r7, [sp, #0]
 80035fc:	f005 fe8a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003600:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e0      	bne.n	80035ca <lcd_update_amperage+0x23a>
 8003608:	e738      	b.n	800347c <lcd_update_amperage+0xec>
 800360a:	bf00      	nop
 800360c:	080119f8 	.word	0x080119f8
 8003610:	383cc8cc 	.word	0x383cc8cc
 8003614:	20000534 	.word	0x20000534
 8003618:	08011a88 	.word	0x08011a88
 800361c:	191d494d 	.word	0x191d494d
 8003620:	282ce8ec 	.word	0x282ce8ec
 8003624:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003628:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800362c:	482e      	ldr	r0, [pc, #184]	; (80036e8 <lcd_update_amperage+0x358>)
 800362e:	ac03      	add	r4, sp, #12
 8003630:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003632:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003634:	214e      	movs	r1, #78	; 0x4e
 8003636:	4622      	mov	r2, r4
 8003638:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800363a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800363c:	f005 fe6a 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003640:	2320      	movs	r3, #32
 8003642:	4d2a      	ldr	r5, [pc, #168]	; (80036ec <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003644:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800364a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800364e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003650:	f043 0309 	orr.w	r3, r3, #9
 8003654:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003658:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800365c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003660:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003664:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003668:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800366c:	2304      	movs	r3, #4
 800366e:	4622      	mov	r2, r4
 8003670:	214e      	movs	r1, #78	; 0x4e
 8003672:	4638      	mov	r0, r7
 8003674:	9600      	str	r6, [sp, #0]
 8003676:	f005 fe4d 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800367a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e0      	bne.n	8003644 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003684:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003686:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003688:	214e      	movs	r1, #78	; 0x4e
 800368a:	4622      	mov	r2, r4
 800368c:	4816      	ldr	r0, [pc, #88]	; (80036e8 <lcd_update_amperage+0x358>)
 800368e:	9600      	str	r6, [sp, #0]
 8003690:	f005 fe40 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003694:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f43f aeef 	beq.w	800347c <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800369e:	2764      	movs	r7, #100	; 0x64
 80036a0:	4e11      	ldr	r6, [pc, #68]	; (80036e8 <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 80036a2:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80036a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036ac:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036b0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036b4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036b8:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036bc:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036c0:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036c4:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036c8:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036ca:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ce:	214e      	movs	r1, #78	; 0x4e
 80036d0:	4622      	mov	r2, r4
 80036d2:	4630      	mov	r0, r6
 80036d4:	9700      	str	r7, [sp, #0]
 80036d6:	f005 fe1d 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036da:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e0      	bne.n	80036a4 <lcd_update_amperage+0x314>
 80036e2:	e6cb      	b.n	800347c <lcd_update_amperage+0xec>
 80036e4:	787cd8dc 	.word	0x787cd8dc
 80036e8:	20000534 	.word	0x20000534
 80036ec:	08011a88 	.word	0x08011a88

080036f0 <lcd_psu_update>:
void lcd_psu_update(void){
 80036f0:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036f2:	2464      	movs	r4, #100	; 0x64
void lcd_psu_update(void){
 80036f4:	b084      	sub	sp, #16
	lcd_psu_init();
 80036f6:	f7ff fa6b 	bl	8002bd0 <lcd_psu_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036fa:	49a5      	ldr	r1, [pc, #660]	; (8003990 <lcd_psu_update+0x2a0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036fc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036fe:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003700:	48a4      	ldr	r0, [pc, #656]	; (8003994 <lcd_psu_update+0x2a4>)
 8003702:	214e      	movs	r1, #78	; 0x4e
 8003704:	aa03      	add	r2, sp, #12
 8003706:	9400      	str	r4, [sp, #0]
 8003708:	f005 fe04 	bl	8009314 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 800370c:	4ba2      	ldr	r3, [pc, #648]	; (8003998 <lcd_psu_update+0x2a8>)
 800370e:	781d      	ldrb	r5, [r3, #0]
 8003710:	b165      	cbz	r5, 800372c <lcd_psu_update+0x3c>
	else if(kpenum == V1){
 8003712:	2d01      	cmp	r5, #1
 8003714:	f000 815e 	beq.w	80039d4 <lcd_psu_update+0x2e4>
	else if(kpenum == V2){
 8003718:	2d03      	cmp	r5, #3
 800371a:	d032      	beq.n	8003782 <lcd_psu_update+0x92>
	else if(kpenum == A1){
 800371c:	2d02      	cmp	r5, #2
 800371e:	f000 8299 	beq.w	8003c54 <lcd_psu_update+0x564>
	else if(kpenum == A2){
 8003722:	2d04      	cmp	r5, #4
 8003724:	f000 8316 	beq.w	8003d54 <lcd_psu_update+0x664>
}
 8003728:	b004      	add	sp, #16
 800372a:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 800372c:	4b9b      	ldr	r3, [pc, #620]	; (800399c <lcd_psu_update+0x2ac>)
 800372e:	2001      	movs	r0, #1
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	f7ff fc7d 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003736:	4b9a      	ldr	r3, [pc, #616]	; (80039a0 <lcd_psu_update+0x2b0>)
 8003738:	2001      	movs	r0, #1
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	f7ff fe28 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003740:	4b98      	ldr	r3, [pc, #608]	; (80039a4 <lcd_psu_update+0x2b4>)
 8003742:	2002      	movs	r0, #2
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	f7ff fc73 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 800374a:	4b97      	ldr	r3, [pc, #604]	; (80039a8 <lcd_psu_update+0x2b8>)
 800374c:	2002      	movs	r0, #2
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	f7ff fe1e 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003754:	4b95      	ldr	r3, [pc, #596]	; (80039ac <lcd_psu_update+0x2bc>)
 8003756:	2003      	movs	r0, #3
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	f7ff fc69 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 800375e:	4b94      	ldr	r3, [pc, #592]	; (80039b0 <lcd_psu_update+0x2c0>)
 8003760:	2003      	movs	r0, #3
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	f7ff fe14 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003768:	4b92      	ldr	r3, [pc, #584]	; (80039b4 <lcd_psu_update+0x2c4>)
 800376a:	2004      	movs	r0, #4
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	f7ff fc5f 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003772:	2004      	movs	r0, #4
 8003774:	4b90      	ldr	r3, [pc, #576]	; (80039b8 <lcd_psu_update+0x2c8>)
 8003776:	6819      	ldr	r1, [r3, #0]
}
 8003778:	b004      	add	sp, #16
 800377a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 800377e:	f7ff be07 	b.w	8003390 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 8003782:	4b86      	ldr	r3, [pc, #536]	; (800399c <lcd_psu_update+0x2ac>)
 8003784:	2001      	movs	r0, #1
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	f7ff fc52 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <lcd_psu_update+0x2b0>)
 800378e:	2001      	movs	r0, #1
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	f7ff fdfd 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003796:	4b83      	ldr	r3, [pc, #524]	; (80039a4 <lcd_psu_update+0x2b4>)
 8003798:	2002      	movs	r0, #2
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	f7ff fc48 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <lcd_psu_update+0x2b8>)
 80037a2:	2002      	movs	r0, #2
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	f7ff fdf3 	bl	8003390 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 80037aa:	4b81      	ldr	r3, [pc, #516]	; (80039b0 <lcd_psu_update+0x2c0>)
 80037ac:	4628      	mov	r0, r5
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	f7ff fdee 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80037b4:	4b7f      	ldr	r3, [pc, #508]	; (80039b4 <lcd_psu_update+0x2c4>)
 80037b6:	2004      	movs	r0, #4
 80037b8:	6819      	ldr	r1, [r3, #0]
 80037ba:	f7ff fc39 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80037be:	4b7e      	ldr	r3, [pc, #504]	; (80039b8 <lcd_psu_update+0x2c8>)
 80037c0:	2004      	movs	r0, #4
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	f7ff fde4 	bl	8003390 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037c8:	497c      	ldr	r1, [pc, #496]	; (80039bc <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037ca:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037cc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037ce:	4871      	ldr	r0, [pc, #452]	; (8003994 <lcd_psu_update+0x2a4>)
 80037d0:	214e      	movs	r1, #78	; 0x4e
 80037d2:	aa03      	add	r2, sp, #12
 80037d4:	9400      	str	r4, [sp, #0]
 80037d6:	f005 fd9d 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80037da:	2320      	movs	r3, #32
 80037dc:	4d78      	ldr	r5, [pc, #480]	; (80039c0 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037de:	4e6d      	ldr	r6, [pc, #436]	; (8003994 <lcd_psu_update+0x2a4>)
	data_l = ((data<<4)&0xf0);
 80037e0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80037e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037e6:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80037ea:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037ec:	f043 0309 	orr.w	r3, r3, #9
 80037f0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037f4:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80037f8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037fc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003800:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003804:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003808:	2304      	movs	r3, #4
 800380a:	214e      	movs	r1, #78	; 0x4e
 800380c:	4630      	mov	r0, r6
 800380e:	9400      	str	r4, [sp, #0]
 8003810:	aa03      	add	r2, sp, #12
 8003812:	f005 fd7f 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003816:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e0      	bne.n	80037e0 <lcd_psu_update+0xf0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800381e:	4967      	ldr	r1, [pc, #412]	; (80039bc <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003820:	2304      	movs	r3, #4
 8003822:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003824:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003826:	485b      	ldr	r0, [pc, #364]	; (8003994 <lcd_psu_update+0x2a4>)
 8003828:	214e      	movs	r1, #78	; 0x4e
 800382a:	9400      	str	r4, [sp, #0]
 800382c:	f005 fd72 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003830:	4964      	ldr	r1, [pc, #400]	; (80039c4 <lcd_psu_update+0x2d4>)
		if(keypadarr[0] != 'z'){
 8003832:	4d65      	ldr	r5, [pc, #404]	; (80039c8 <lcd_psu_update+0x2d8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003834:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003836:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003838:	4856      	ldr	r0, [pc, #344]	; (8003994 <lcd_psu_update+0x2a4>)
 800383a:	214e      	movs	r1, #78	; 0x4e
 800383c:	aa03      	add	r2, sp, #12
 800383e:	9400      	str	r4, [sp, #0]
 8003840:	f005 fd68 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003844:	782b      	ldrb	r3, [r5, #0]
 8003846:	2b7a      	cmp	r3, #122	; 0x7a
 8003848:	d01a      	beq.n	8003880 <lcd_psu_update+0x190>
	data_u = (data&0xf0);
 800384a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003852:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003856:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800385a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800385e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003862:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003866:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800386a:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800386e:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003872:	2304      	movs	r3, #4
 8003874:	214e      	movs	r1, #78	; 0x4e
 8003876:	4847      	ldr	r0, [pc, #284]	; (8003994 <lcd_psu_update+0x2a4>)
 8003878:	9400      	str	r4, [sp, #0]
 800387a:	aa03      	add	r2, sp, #12
 800387c:	f005 fd4a 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003880:	786b      	ldrb	r3, [r5, #1]
 8003882:	2b7a      	cmp	r3, #122	; 0x7a
 8003884:	d01b      	beq.n	80038be <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003886:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003888:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800388a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800388e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003892:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003894:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003898:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800389c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038a0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038a4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038a8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038ac:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038b0:	2304      	movs	r3, #4
 80038b2:	214e      	movs	r1, #78	; 0x4e
 80038b4:	4837      	ldr	r0, [pc, #220]	; (8003994 <lcd_psu_update+0x2a4>)
 80038b6:	aa03      	add	r2, sp, #12
 80038b8:	9400      	str	r4, [sp, #0]
 80038ba:	f005 fd2b 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 80038be:	78ab      	ldrb	r3, [r5, #2]
 80038c0:	2b7a      	cmp	r3, #122	; 0x7a
 80038c2:	d01b      	beq.n	80038fc <lcd_psu_update+0x20c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038c4:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80038c6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80038c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038cc:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80038d0:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038d2:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038d6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038da:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038de:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038e2:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038e6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038ea:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038ee:	2304      	movs	r3, #4
 80038f0:	214e      	movs	r1, #78	; 0x4e
 80038f2:	4828      	ldr	r0, [pc, #160]	; (8003994 <lcd_psu_update+0x2a4>)
 80038f4:	aa03      	add	r2, sp, #12
 80038f6:	9400      	str	r4, [sp, #0]
 80038f8:	f005 fd0c 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 80038fc:	78eb      	ldrb	r3, [r5, #3]
 80038fe:	2b7a      	cmp	r3, #122	; 0x7a
 8003900:	d01b      	beq.n	800393a <lcd_psu_update+0x24a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003902:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003904:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800390a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800390e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003910:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003914:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003918:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800391c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003920:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003924:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003928:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800392c:	2304      	movs	r3, #4
 800392e:	214e      	movs	r1, #78	; 0x4e
 8003930:	4818      	ldr	r0, [pc, #96]	; (8003994 <lcd_psu_update+0x2a4>)
 8003932:	aa03      	add	r2, sp, #12
 8003934:	9400      	str	r4, [sp, #0]
 8003936:	f005 fced 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 800393a:	792b      	ldrb	r3, [r5, #4]
 800393c:	2b7a      	cmp	r3, #122	; 0x7a
 800393e:	d01b      	beq.n	8003978 <lcd_psu_update+0x288>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003940:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003942:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003948:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800394a:	f043 010d 	orr.w	r1, r3, #13
 800394e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003952:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003956:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800395a:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800395e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003962:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003966:	9000      	str	r0, [sp, #0]
 8003968:	2304      	movs	r3, #4
 800396a:	214e      	movs	r1, #78	; 0x4e
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <lcd_psu_update+0x2a4>)
 800396e:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003970:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003974:	f005 fcce 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003978:	4b14      	ldr	r3, [pc, #80]	; (80039cc <lcd_psu_update+0x2dc>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f43f aed3 	beq.w	8003728 <lcd_psu_update+0x38>
			lcd_put_cur(2, 3 + encpos);
 8003982:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <lcd_psu_update+0x2e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003984:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 8003986:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x94;	//0x80|0x14 for row 3 col 2
 800398a:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 800398c:	e127      	b.n	8003bde <lcd_psu_update+0x4ee>
 800398e:	bf00      	nop
 8003990:	c8cc080c 	.word	0xc8cc080c
 8003994:	20000534 	.word	0x20000534
 8003998:	2000074d 	.word	0x2000074d
 800399c:	20000a70 	.word	0x20000a70
 80039a0:	200003e0 	.word	0x200003e0
 80039a4:	20000754 	.word	0x20000754
 80039a8:	200003f0 	.word	0x200003f0
 80039ac:	20000a74 	.word	0x20000a74
 80039b0:	200003e4 	.word	0x200003e4
 80039b4:	20000750 	.word	0x20000750
 80039b8:	200003ec 	.word	0x200003ec
 80039bc:	787c989c 	.word	0x787c989c
 80039c0:	08011a88 	.word	0x08011a88
 80039c4:	f8fc080c 	.word	0xf8fc080c
 80039c8:	20000008 	.word	0x20000008
 80039cc:	200003f4 	.word	0x200003f4
 80039d0:	200003f5 	.word	0x200003f5
		lcd_update_amperage(1,amp_set_aux);
 80039d4:	4b91      	ldr	r3, [pc, #580]	; (8003c1c <lcd_psu_update+0x52c>)
 80039d6:	4628      	mov	r0, r5
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	f7ff fcd9 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80039de:	4b90      	ldr	r3, [pc, #576]	; (8003c20 <lcd_psu_update+0x530>)
 80039e0:	2002      	movs	r0, #2
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	f7ff fb24 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80039e8:	4b8e      	ldr	r3, [pc, #568]	; (8003c24 <lcd_psu_update+0x534>)
 80039ea:	2002      	movs	r0, #2
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	f7ff fccf 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80039f2:	4b8d      	ldr	r3, [pc, #564]	; (8003c28 <lcd_psu_update+0x538>)
 80039f4:	2003      	movs	r0, #3
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	f7ff fb1a 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 80039fc:	4b8b      	ldr	r3, [pc, #556]	; (8003c2c <lcd_psu_update+0x53c>)
 80039fe:	2003      	movs	r0, #3
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	f7ff fcc5 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003a06:	4b8a      	ldr	r3, [pc, #552]	; (8003c30 <lcd_psu_update+0x540>)
 8003a08:	2004      	movs	r0, #4
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	f7ff fb10 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003a10:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <lcd_psu_update+0x544>)
 8003a12:	2004      	movs	r0, #4
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	f7ff fcbb 	bl	8003390 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a1a:	4987      	ldr	r1, [pc, #540]	; (8003c38 <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a1c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a20:	4886      	ldr	r0, [pc, #536]	; (8003c3c <lcd_psu_update+0x54c>)
 8003a22:	214e      	movs	r1, #78	; 0x4e
 8003a24:	aa03      	add	r2, sp, #12
 8003a26:	9400      	str	r4, [sp, #0]
 8003a28:	f005 fc74 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	4d84      	ldr	r5, [pc, #528]	; (8003c40 <lcd_psu_update+0x550>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a30:	4e82      	ldr	r6, [pc, #520]	; (8003c3c <lcd_psu_update+0x54c>)
	data_u = (data&0xf0);
 8003a32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a3a:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a3e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a42:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a46:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a4a:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a4e:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a52:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a56:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a58:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a5c:	214e      	movs	r1, #78	; 0x4e
 8003a5e:	4630      	mov	r0, r6
 8003a60:	9400      	str	r4, [sp, #0]
 8003a62:	aa03      	add	r2, sp, #12
 8003a64:	f005 fc56 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003a68:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e0      	bne.n	8003a32 <lcd_psu_update+0x342>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a70:	4971      	ldr	r1, [pc, #452]	; (8003c38 <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a72:	2304      	movs	r3, #4
 8003a74:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a76:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a78:	4870      	ldr	r0, [pc, #448]	; (8003c3c <lcd_psu_update+0x54c>)
 8003a7a:	214e      	movs	r1, #78	; 0x4e
 8003a7c:	9400      	str	r4, [sp, #0]
 8003a7e:	f005 fc49 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a82:	4970      	ldr	r1, [pc, #448]	; (8003c44 <lcd_psu_update+0x554>)
		if(keypadarr[0] != 'z'){
 8003a84:	4d70      	ldr	r5, [pc, #448]	; (8003c48 <lcd_psu_update+0x558>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a86:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a88:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a8a:	486c      	ldr	r0, [pc, #432]	; (8003c3c <lcd_psu_update+0x54c>)
 8003a8c:	214e      	movs	r1, #78	; 0x4e
 8003a8e:	aa03      	add	r2, sp, #12
 8003a90:	9400      	str	r4, [sp, #0]
 8003a92:	f005 fc3f 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003a96:	782b      	ldrb	r3, [r5, #0]
 8003a98:	2b7a      	cmp	r3, #122	; 0x7a
 8003a9a:	d01a      	beq.n	8003ad2 <lcd_psu_update+0x3e2>
	data_u = (data&0xf0);
 8003a9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003aa4:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003aa8:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003aac:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ab0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ab4:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ab8:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003abc:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ac0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	214e      	movs	r1, #78	; 0x4e
 8003ac8:	485c      	ldr	r0, [pc, #368]	; (8003c3c <lcd_psu_update+0x54c>)
 8003aca:	9400      	str	r4, [sp, #0]
 8003acc:	aa03      	add	r2, sp, #12
 8003ace:	f005 fc21 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003ad2:	786b      	ldrb	r3, [r5, #1]
 8003ad4:	2b7a      	cmp	r3, #122	; 0x7a
 8003ad6:	d01b      	beq.n	8003b10 <lcd_psu_update+0x420>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ad8:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003ada:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ae0:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003ae4:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ae6:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003aea:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003aee:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003af2:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003af6:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003afa:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003afe:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b02:	2304      	movs	r3, #4
 8003b04:	214e      	movs	r1, #78	; 0x4e
 8003b06:	484d      	ldr	r0, [pc, #308]	; (8003c3c <lcd_psu_update+0x54c>)
 8003b08:	aa03      	add	r2, sp, #12
 8003b0a:	9400      	str	r4, [sp, #0]
 8003b0c:	f005 fc02 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003b10:	78ab      	ldrb	r3, [r5, #2]
 8003b12:	2b7a      	cmp	r3, #122	; 0x7a
 8003b14:	d01b      	beq.n	8003b4e <lcd_psu_update+0x45e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b16:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b18:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b1e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b22:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b24:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b28:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b2c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b30:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b34:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b38:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b3c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b40:	2304      	movs	r3, #4
 8003b42:	214e      	movs	r1, #78	; 0x4e
 8003b44:	483d      	ldr	r0, [pc, #244]	; (8003c3c <lcd_psu_update+0x54c>)
 8003b46:	aa03      	add	r2, sp, #12
 8003b48:	9400      	str	r4, [sp, #0]
 8003b4a:	f005 fbe3 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003b4e:	78eb      	ldrb	r3, [r5, #3]
 8003b50:	2b7a      	cmp	r3, #122	; 0x7a
 8003b52:	d01b      	beq.n	8003b8c <lcd_psu_update+0x49c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b54:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b56:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b5c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b60:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b62:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b66:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b6a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b6e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b72:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b76:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b7a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b7e:	2304      	movs	r3, #4
 8003b80:	214e      	movs	r1, #78	; 0x4e
 8003b82:	482e      	ldr	r0, [pc, #184]	; (8003c3c <lcd_psu_update+0x54c>)
 8003b84:	aa03      	add	r2, sp, #12
 8003b86:	9400      	str	r4, [sp, #0]
 8003b88:	f005 fbc4 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003b8c:	792b      	ldrb	r3, [r5, #4]
 8003b8e:	2b7a      	cmp	r3, #122	; 0x7a
 8003b90:	d01b      	beq.n	8003bca <lcd_psu_update+0x4da>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b92:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b94:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003b9a:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b9c:	f043 010d 	orr.w	r1, r3, #13
 8003ba0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ba4:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ba8:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bac:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bb0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bb4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bb8:	9000      	str	r0, [sp, #0]
 8003bba:	2304      	movs	r3, #4
 8003bbc:	214e      	movs	r1, #78	; 0x4e
 8003bbe:	481f      	ldr	r0, [pc, #124]	; (8003c3c <lcd_psu_update+0x54c>)
 8003bc0:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bc2:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bc6:	f005 fba5 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <lcd_psu_update+0x55c>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f43f adaa 	beq.w	8003728 <lcd_psu_update+0x38>
			lcd_put_cur(0, 3 + encpos);
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <lcd_psu_update+0x560>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bd6:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 8003bd8:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x80;
 8003bdc:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bde:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003be0:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003be6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bea:	f043 000c 	orr.w	r0, r3, #12
 8003bee:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003bf2:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003bf6:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003bfa:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003bfe:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003c02:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c06:	2304      	movs	r3, #4
 8003c08:	214e      	movs	r1, #78	; 0x4e
 8003c0a:	9400      	str	r4, [sp, #0]
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <lcd_psu_update+0x54c>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003c0e:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c12:	f005 fb7f 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003c16:	b004      	add	sp, #16
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200003e0 	.word	0x200003e0
 8003c20:	20000754 	.word	0x20000754
 8003c24:	200003f0 	.word	0x200003f0
 8003c28:	20000a74 	.word	0x20000a74
 8003c2c:	200003e4 	.word	0x200003e4
 8003c30:	20000750 	.word	0x20000750
 8003c34:	200003ec 	.word	0x200003ec
 8003c38:	383c888c 	.word	0x383c888c
 8003c3c:	20000534 	.word	0x20000534
 8003c40:	08011a88 	.word	0x08011a88
 8003c44:	f8fc080c 	.word	0xf8fc080c
 8003c48:	20000008 	.word	0x20000008
 8003c4c:	200003f4 	.word	0x200003f4
 8003c50:	200003f5 	.word	0x200003f5
		lcd_update_voltage(1,volt_set_aux);
 8003c54:	4bb9      	ldr	r3, [pc, #740]	; (8003f3c <lcd_psu_update+0x84c>)
 8003c56:	2001      	movs	r0, #1
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	f7ff f9e9 	bl	8003030 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 8003c5e:	4bb8      	ldr	r3, [pc, #736]	; (8003f40 <lcd_psu_update+0x850>)
 8003c60:	4628      	mov	r0, r5
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	f7ff f9e4 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003c68:	4bb6      	ldr	r3, [pc, #728]	; (8003f44 <lcd_psu_update+0x854>)
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	6819      	ldr	r1, [r3, #0]
 8003c6e:	f7ff fb8f 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003c72:	4bb5      	ldr	r3, [pc, #724]	; (8003f48 <lcd_psu_update+0x858>)
 8003c74:	2003      	movs	r0, #3
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	f7ff f9da 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003c7c:	4bb3      	ldr	r3, [pc, #716]	; (8003f4c <lcd_psu_update+0x85c>)
 8003c7e:	2003      	movs	r0, #3
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	f7ff fb85 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003c86:	4bb2      	ldr	r3, [pc, #712]	; (8003f50 <lcd_psu_update+0x860>)
 8003c88:	2004      	movs	r0, #4
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	f7ff f9d0 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003c90:	4bb0      	ldr	r3, [pc, #704]	; (8003f54 <lcd_psu_update+0x864>)
 8003c92:	2004      	movs	r0, #4
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	f7ff fb7b 	bl	8003390 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c9a:	49af      	ldr	r1, [pc, #700]	; (8003f58 <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c9c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c9e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ca0:	48ae      	ldr	r0, [pc, #696]	; (8003f5c <lcd_psu_update+0x86c>)
 8003ca2:	214e      	movs	r1, #78	; 0x4e
 8003ca4:	aa03      	add	r2, sp, #12
 8003ca6:	9400      	str	r4, [sp, #0]
 8003ca8:	f005 fb34 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003cac:	2320      	movs	r3, #32
 8003cae:	4dac      	ldr	r5, [pc, #688]	; (8003f60 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cb0:	4eaa      	ldr	r6, [pc, #680]	; (8003f5c <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003cb2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003cb8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003cbc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003cbe:	f043 0309 	orr.w	r3, r3, #9
 8003cc2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003cc6:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003cca:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003cce:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003cd2:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003cd6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cda:	2304      	movs	r3, #4
 8003cdc:	214e      	movs	r1, #78	; 0x4e
 8003cde:	4630      	mov	r0, r6
 8003ce0:	9400      	str	r4, [sp, #0]
 8003ce2:	aa03      	add	r2, sp, #12
 8003ce4:	f005 fb16 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003ce8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e0      	bne.n	8003cb2 <lcd_psu_update+0x5c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003cf0:	4999      	ldr	r1, [pc, #612]	; (8003f58 <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003cf6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cf8:	4898      	ldr	r0, [pc, #608]	; (8003f5c <lcd_psu_update+0x86c>)
 8003cfa:	214e      	movs	r1, #78	; 0x4e
 8003cfc:	9400      	str	r4, [sp, #0]
 8003cfe:	f005 fb09 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d02:	4998      	ldr	r1, [pc, #608]	; (8003f64 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003d04:	4d98      	ldr	r5, [pc, #608]	; (8003f68 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d06:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d08:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d0a:	4894      	ldr	r0, [pc, #592]	; (8003f5c <lcd_psu_update+0x86c>)
 8003d0c:	214e      	movs	r1, #78	; 0x4e
 8003d0e:	aa03      	add	r2, sp, #12
 8003d10:	9400      	str	r4, [sp, #0]
 8003d12:	f005 faff 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003d16:	782b      	ldrb	r3, [r5, #0]
 8003d18:	2b7a      	cmp	r3, #122	; 0x7a
 8003d1a:	f040 812f 	bne.w	8003f7c <lcd_psu_update+0x88c>
		if(keypadarr[1] != 'z'){
 8003d1e:	786b      	ldrb	r3, [r5, #1]
 8003d20:	2b7a      	cmp	r3, #122	; 0x7a
 8003d22:	f040 80ee 	bne.w	8003f02 <lcd_psu_update+0x812>
		if(keypadarr[2] != 'z'){
 8003d26:	78ab      	ldrb	r3, [r5, #2]
 8003d28:	2b7a      	cmp	r3, #122	; 0x7a
 8003d2a:	f040 80cd 	bne.w	8003ec8 <lcd_psu_update+0x7d8>
		if(keypadarr[3] != 'z'){
 8003d2e:	78eb      	ldrb	r3, [r5, #3]
 8003d30:	2b7a      	cmp	r3, #122	; 0x7a
 8003d32:	f040 80ac 	bne.w	8003e8e <lcd_psu_update+0x79e>
		if(keypadarr[4] != 'z'){
 8003d36:	792b      	ldrb	r3, [r5, #4]
 8003d38:	2b7a      	cmp	r3, #122	; 0x7a
 8003d3a:	f040 808b 	bne.w	8003e54 <lcd_psu_update+0x764>
		if(encmode){
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <lcd_psu_update+0x87c>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f43f acf0 	beq.w	8003728 <lcd_psu_update+0x38>
			lcd_put_cur(1, 3 + encpos);
 8003d48:	4b89      	ldr	r3, [pc, #548]	; (8003f70 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d4a:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 8003d4c:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xC0;  //C0
 8003d50:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 8003d52:	e744      	b.n	8003bde <lcd_psu_update+0x4ee>
		lcd_update_voltage(1,volt_set_aux);
 8003d54:	4b79      	ldr	r3, [pc, #484]	; (8003f3c <lcd_psu_update+0x84c>)
 8003d56:	2001      	movs	r0, #1
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	f7ff f969 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003d5e:	4b85      	ldr	r3, [pc, #532]	; (8003f74 <lcd_psu_update+0x884>)
 8003d60:	2001      	movs	r0, #1
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	f7ff fb14 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003d68:	4b75      	ldr	r3, [pc, #468]	; (8003f40 <lcd_psu_update+0x850>)
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	f7ff f95f 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003d72:	4b74      	ldr	r3, [pc, #464]	; (8003f44 <lcd_psu_update+0x854>)
 8003d74:	2002      	movs	r0, #2
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	f7ff fb0a 	bl	8003390 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003d7c:	4b72      	ldr	r3, [pc, #456]	; (8003f48 <lcd_psu_update+0x858>)
 8003d7e:	2003      	movs	r0, #3
 8003d80:	6819      	ldr	r1, [r3, #0]
 8003d82:	f7ff f955 	bl	8003030 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003d86:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <lcd_psu_update+0x860>)
 8003d88:	4628      	mov	r0, r5
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	f7ff f950 	bl	8003030 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003d90:	4b70      	ldr	r3, [pc, #448]	; (8003f54 <lcd_psu_update+0x864>)
 8003d92:	4628      	mov	r0, r5
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	f7ff fafb 	bl	8003390 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d9a:	4977      	ldr	r1, [pc, #476]	; (8003f78 <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d9c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d9e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003da0:	486e      	ldr	r0, [pc, #440]	; (8003f5c <lcd_psu_update+0x86c>)
 8003da2:	214e      	movs	r1, #78	; 0x4e
 8003da4:	aa03      	add	r2, sp, #12
 8003da6:	9400      	str	r4, [sp, #0]
 8003da8:	f005 fab4 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003dac:	2320      	movs	r3, #32
 8003dae:	4d6c      	ldr	r5, [pc, #432]	; (8003f60 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003db0:	4e6a      	ldr	r6, [pc, #424]	; (8003f5c <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003db2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003db8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003dbc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003dbe:	f043 0309 	orr.w	r3, r3, #9
 8003dc2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003dc6:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003dca:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003dce:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003dd2:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003dd6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003dda:	2304      	movs	r3, #4
 8003ddc:	214e      	movs	r1, #78	; 0x4e
 8003dde:	4630      	mov	r0, r6
 8003de0:	9400      	str	r4, [sp, #0]
 8003de2:	aa03      	add	r2, sp, #12
 8003de4:	f005 fa96 	bl	8009314 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003de8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e0      	bne.n	8003db2 <lcd_psu_update+0x6c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003df0:	4961      	ldr	r1, [pc, #388]	; (8003f78 <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003df2:	2304      	movs	r3, #4
 8003df4:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003df6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003df8:	4858      	ldr	r0, [pc, #352]	; (8003f5c <lcd_psu_update+0x86c>)
 8003dfa:	214e      	movs	r1, #78	; 0x4e
 8003dfc:	9400      	str	r4, [sp, #0]
 8003dfe:	f005 fa89 	bl	8009314 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e02:	4958      	ldr	r1, [pc, #352]	; (8003f64 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003e04:	4d58      	ldr	r5, [pc, #352]	; (8003f68 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e06:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e08:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e0a:	4854      	ldr	r0, [pc, #336]	; (8003f5c <lcd_psu_update+0x86c>)
 8003e0c:	214e      	movs	r1, #78	; 0x4e
 8003e0e:	aa03      	add	r2, sp, #12
 8003e10:	9400      	str	r4, [sp, #0]
 8003e12:	f005 fa7f 	bl	8009314 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003e16:	782b      	ldrb	r3, [r5, #0]
 8003e18:	2b7a      	cmp	r3, #122	; 0x7a
 8003e1a:	f040 80e8 	bne.w	8003fee <lcd_psu_update+0x8fe>
		if(keypadarr[1] != 'z'){
 8003e1e:	786b      	ldrb	r3, [r5, #1]
 8003e20:	2b7a      	cmp	r3, #122	; 0x7a
 8003e22:	f040 80c7 	bne.w	8003fb4 <lcd_psu_update+0x8c4>
		if(keypadarr[2] != 'z'){
 8003e26:	78ab      	ldrb	r3, [r5, #2]
 8003e28:	2b7a      	cmp	r3, #122	; 0x7a
 8003e2a:	f040 8136 	bne.w	800409a <lcd_psu_update+0x9aa>
		if(keypadarr[3] != 'z'){
 8003e2e:	78eb      	ldrb	r3, [r5, #3]
 8003e30:	2b7a      	cmp	r3, #122	; 0x7a
 8003e32:	f040 8115 	bne.w	8004060 <lcd_psu_update+0x970>
		if(keypadarr[4] != 'z'){
 8003e36:	792b      	ldrb	r3, [r5, #4]
 8003e38:	2b7a      	cmp	r3, #122	; 0x7a
 8003e3a:	f040 80f4 	bne.w	8004026 <lcd_psu_update+0x936>
		if(encmode){
 8003e3e:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <lcd_psu_update+0x87c>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f43f ac70 	beq.w	8003728 <lcd_psu_update+0x38>
			lcd_put_cur(3, 3 + encpos);
 8003e48:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e4a:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 8003e4c:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xD4;
 8003e50:	33d7      	adds	r3, #215	; 0xd7
 8003e52:	e6c4      	b.n	8003bde <lcd_psu_update+0x4ee>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e54:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003e56:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003e5c:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e5e:	f043 010d 	orr.w	r1, r3, #13
 8003e62:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e66:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e6a:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e6e:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e72:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e76:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e7a:	9000      	str	r0, [sp, #0]
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	214e      	movs	r1, #78	; 0x4e
 8003e80:	aa03      	add	r2, sp, #12
 8003e82:	4836      	ldr	r0, [pc, #216]	; (8003f5c <lcd_psu_update+0x86c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e84:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e88:	f005 fa44 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003e8c:	e757      	b.n	8003d3e <lcd_psu_update+0x64e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e8e:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003e90:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e96:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003e9a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e9c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ea0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ea4:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ea8:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003eac:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003eb0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003eb4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eb8:	2304      	movs	r3, #4
 8003eba:	214e      	movs	r1, #78	; 0x4e
 8003ebc:	aa03      	add	r2, sp, #12
 8003ebe:	9400      	str	r4, [sp, #0]
 8003ec0:	4826      	ldr	r0, [pc, #152]	; (8003f5c <lcd_psu_update+0x86c>)
 8003ec2:	f005 fa27 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003ec6:	e736      	b.n	8003d36 <lcd_psu_update+0x646>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ec8:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003eca:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ed0:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003ed4:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ed6:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003eda:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ede:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ee2:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ee6:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003eea:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003eee:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	214e      	movs	r1, #78	; 0x4e
 8003ef6:	aa03      	add	r2, sp, #12
 8003ef8:	9400      	str	r4, [sp, #0]
 8003efa:	4818      	ldr	r0, [pc, #96]	; (8003f5c <lcd_psu_update+0x86c>)
 8003efc:	f005 fa0a 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003f00:	e715      	b.n	8003d2e <lcd_psu_update+0x63e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f02:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f04:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f0a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f0e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f10:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f14:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f18:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f1c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f20:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f24:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f28:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	214e      	movs	r1, #78	; 0x4e
 8003f30:	aa03      	add	r2, sp, #12
 8003f32:	9400      	str	r4, [sp, #0]
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <lcd_psu_update+0x86c>)
 8003f36:	f005 f9ed 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003f3a:	e6f4      	b.n	8003d26 <lcd_psu_update+0x636>
 8003f3c:	20000a70 	.word	0x20000a70
 8003f40:	20000754 	.word	0x20000754
 8003f44:	200003f0 	.word	0x200003f0
 8003f48:	20000a74 	.word	0x20000a74
 8003f4c:	200003e4 	.word	0x200003e4
 8003f50:	20000750 	.word	0x20000750
 8003f54:	200003ec 	.word	0x200003ec
 8003f58:	383cc8cc 	.word	0x383cc8cc
 8003f5c:	20000534 	.word	0x20000534
 8003f60:	08011a88 	.word	0x08011a88
 8003f64:	f8fc080c 	.word	0xf8fc080c
 8003f68:	20000008 	.word	0x20000008
 8003f6c:	200003f4 	.word	0x200003f4
 8003f70:	200003f5 	.word	0x200003f5
 8003f74:	200003e0 	.word	0x200003e0
 8003f78:	787cd8dc 	.word	0x787cd8dc
	data_u = (data&0xf0);
 8003f7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f84:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f88:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f8c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f90:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f94:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f98:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f9c:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fa0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fa4:	2304      	movs	r3, #4
 8003fa6:	214e      	movs	r1, #78	; 0x4e
 8003fa8:	9400      	str	r4, [sp, #0]
 8003faa:	aa03      	add	r2, sp, #12
 8003fac:	4849      	ldr	r0, [pc, #292]	; (80040d4 <lcd_psu_update+0x9e4>)
 8003fae:	f005 f9b1 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003fb2:	e6b4      	b.n	8003d1e <lcd_psu_update+0x62e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fb4:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003fb6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fbc:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003fc0:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fc2:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fc6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fca:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fce:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fd2:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fd6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fda:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fde:	2304      	movs	r3, #4
 8003fe0:	214e      	movs	r1, #78	; 0x4e
 8003fe2:	aa03      	add	r2, sp, #12
 8003fe4:	9400      	str	r4, [sp, #0]
 8003fe6:	483b      	ldr	r0, [pc, #236]	; (80040d4 <lcd_psu_update+0x9e4>)
 8003fe8:	f005 f994 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8003fec:	e71b      	b.n	8003e26 <lcd_psu_update+0x736>
	data_u = (data&0xf0);
 8003fee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ff6:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ffa:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ffe:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004002:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004006:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800400a:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800400e:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004012:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004016:	2304      	movs	r3, #4
 8004018:	214e      	movs	r1, #78	; 0x4e
 800401a:	9400      	str	r4, [sp, #0]
 800401c:	aa03      	add	r2, sp, #12
 800401e:	482d      	ldr	r0, [pc, #180]	; (80040d4 <lcd_psu_update+0x9e4>)
 8004020:	f005 f978 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8004024:	e6fb      	b.n	8003e1e <lcd_psu_update+0x72e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004026:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004028:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800402a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800402e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004030:	f043 010d 	orr.w	r1, r3, #13
 8004034:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004038:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800403c:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004040:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004044:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004048:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800404c:	9000      	str	r0, [sp, #0]
 800404e:	2304      	movs	r3, #4
 8004050:	214e      	movs	r1, #78	; 0x4e
 8004052:	aa03      	add	r2, sp, #12
 8004054:	481f      	ldr	r0, [pc, #124]	; (80040d4 <lcd_psu_update+0x9e4>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004056:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800405a:	f005 f95b 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 800405e:	e6ee      	b.n	8003e3e <lcd_psu_update+0x74e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004060:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004062:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004068:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800406c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800406e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004072:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004076:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800407a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800407e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004082:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004086:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800408a:	2304      	movs	r3, #4
 800408c:	214e      	movs	r1, #78	; 0x4e
 800408e:	aa03      	add	r2, sp, #12
 8004090:	9400      	str	r4, [sp, #0]
 8004092:	4810      	ldr	r0, [pc, #64]	; (80040d4 <lcd_psu_update+0x9e4>)
 8004094:	f005 f93e 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 8004098:	e6cd      	b.n	8003e36 <lcd_psu_update+0x746>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800409a:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800409c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800409e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040a2:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80040a6:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040a8:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040ac:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040b0:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040b4:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040b8:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040bc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040c0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040c4:	2304      	movs	r3, #4
 80040c6:	214e      	movs	r1, #78	; 0x4e
 80040c8:	aa03      	add	r2, sp, #12
 80040ca:	9400      	str	r4, [sp, #0]
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <lcd_psu_update+0x9e4>)
 80040ce:	f005 f921 	bl	8009314 <HAL_I2C_Master_Transmit>
}
 80040d2:	e6ac      	b.n	8003e2e <lcd_psu_update+0x73e>
 80040d4:	20000534 	.word	0x20000534

080040d8 <translate_keypad>:
float translate_keypad(void){
 80040d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(keypadarr[i] == '.'){
 80040dc:	4db8      	ldr	r5, [pc, #736]	; (80043c0 <translate_keypad+0x2e8>)
 80040de:	f895 8000 	ldrb.w	r8, [r5]
 80040e2:	786e      	ldrb	r6, [r5, #1]
 80040e4:	f1b8 032e 	subs.w	r3, r8, #46	; 0x2e
 80040e8:	78af      	ldrb	r7, [r5, #2]
 80040ea:	bf18      	it	ne
 80040ec:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 80040f0:	2e2e      	cmp	r6, #46	; 0x2e
 80040f2:	bf08      	it	eq
 80040f4:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 80040f6:	2f2e      	cmp	r7, #46	; 0x2e
 80040f8:	f000 80e4 	beq.w	80042c4 <translate_keypad+0x1ec>
 80040fc:	f895 9003 	ldrb.w	r9, [r5, #3]
 8004100:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004104:	d051      	beq.n	80041aa <translate_keypad+0xd2>
 8004106:	7928      	ldrb	r0, [r5, #4]
 8004108:	282e      	cmp	r0, #46	; 0x2e
 800410a:	f000 8141 	beq.w	8004390 <translate_keypad+0x2b8>
	if(decimallocation == -1){
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	f040 8141 	bne.w	8004396 <translate_keypad+0x2be>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004114:	3830      	subs	r0, #48	; 0x30
 8004116:	b2c3      	uxtb	r3, r0
 8004118:	2b09      	cmp	r3, #9
 800411a:	f240 8127 	bls.w	800436c <translate_keypad+0x294>
		int count = 1;
 800411e:	2501      	movs	r5, #1
	float num = 0;
 8004120:	2400      	movs	r4, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004122:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8004126:	fa5f f389 	uxtb.w	r3, r9
 800412a:	2b09      	cmp	r3, #9
 800412c:	d80b      	bhi.n	8004146 <translate_keypad+0x6e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800412e:	fb05 f009 	mul.w	r0, r5, r9
 8004132:	f7fc fdeb 	bl	8000d0c <__aeabi_i2f>
 8004136:	4601      	mov	r1, r0
 8004138:	4620      	mov	r0, r4
 800413a:	f7fc fd33 	bl	8000ba4 <__addsf3>
 800413e:	4604      	mov	r4, r0
				count = count * 10;
 8004140:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004144:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004146:	3f30      	subs	r7, #48	; 0x30
 8004148:	b2fb      	uxtb	r3, r7
 800414a:	2b09      	cmp	r3, #9
 800414c:	d80b      	bhi.n	8004166 <translate_keypad+0x8e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800414e:	fb05 f007 	mul.w	r0, r5, r7
 8004152:	f7fc fddb 	bl	8000d0c <__aeabi_i2f>
 8004156:	4601      	mov	r1, r0
 8004158:	4620      	mov	r0, r4
 800415a:	f7fc fd23 	bl	8000ba4 <__addsf3>
 800415e:	4604      	mov	r4, r0
				count = count * 10;
 8004160:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004164:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004166:	3e30      	subs	r6, #48	; 0x30
 8004168:	b2f3      	uxtb	r3, r6
 800416a:	2b09      	cmp	r3, #9
 800416c:	d80b      	bhi.n	8004186 <translate_keypad+0xae>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800416e:	fb05 f006 	mul.w	r0, r5, r6
 8004172:	f7fc fdcb 	bl	8000d0c <__aeabi_i2f>
 8004176:	4601      	mov	r1, r0
 8004178:	4620      	mov	r0, r4
 800417a:	f7fc fd13 	bl	8000ba4 <__addsf3>
 800417e:	4604      	mov	r4, r0
				count = count * 10;
 8004180:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004184:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004186:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800418a:	fa5f f388 	uxtb.w	r3, r8
 800418e:	2b09      	cmp	r3, #9
 8004190:	d808      	bhi.n	80041a4 <translate_keypad+0xcc>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004192:	fb05 f008 	mul.w	r0, r5, r8
 8004196:	f7fc fdb9 	bl	8000d0c <__aeabi_i2f>
 800419a:	4601      	mov	r1, r0
 800419c:	4620      	mov	r0, r4
 800419e:	f7fc fd01 	bl	8000ba4 <__addsf3>
 80041a2:	4604      	mov	r4, r0
}
 80041a4:	4620      	mov	r0, r4
 80041a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 80041aa:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 80041ac:	2b2e      	cmp	r3, #46	; 0x2e
 80041ae:	bf0c      	ite	eq
 80041b0:	f04f 0904 	moveq.w	r9, #4
 80041b4:	f04f 0903 	movne.w	r9, #3
		for(int i = decimallocation-1; i >=0; i--){
 80041b8:	f109 37ff 	add.w	r7, r9, #4294967295
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041bc:	5de8      	ldrb	r0, [r5, r7]
 80041be:	3830      	subs	r0, #48	; 0x30
 80041c0:	b2c3      	uxtb	r3, r0
 80041c2:	2b09      	cmp	r3, #9
 80041c4:	f240 808b 	bls.w	80042de <translate_keypad+0x206>
		int count = 1;
 80041c8:	2601      	movs	r6, #1
	float num = 0;
 80041ca:	2400      	movs	r4, #0
		for(int i = decimallocation-1; i >=0; i--){
 80041cc:	1e7b      	subs	r3, r7, #1
 80041ce:	2f00      	cmp	r7, #0
 80041d0:	f000 80a6 	beq.w	8004320 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041d4:	5ce8      	ldrb	r0, [r5, r3]
 80041d6:	3830      	subs	r0, #48	; 0x30
 80041d8:	b2c3      	uxtb	r3, r0
 80041da:	2b09      	cmp	r3, #9
 80041dc:	d80b      	bhi.n	80041f6 <translate_keypad+0x11e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80041de:	fb06 f000 	mul.w	r0, r6, r0
 80041e2:	f7fc fd93 	bl	8000d0c <__aeabi_i2f>
 80041e6:	4601      	mov	r1, r0
 80041e8:	4620      	mov	r0, r4
 80041ea:	f7fc fcdb 	bl	8000ba4 <__addsf3>
 80041ee:	4604      	mov	r4, r0
				count = count * 10;
 80041f0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80041f4:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation-1; i >=0; i--){
 80041f6:	2f01      	cmp	r7, #1
 80041f8:	f1a7 0a02 	sub.w	sl, r7, #2
 80041fc:	f000 8090 	beq.w	8004320 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004200:	f815 000a 	ldrb.w	r0, [r5, sl]
 8004204:	3830      	subs	r0, #48	; 0x30
 8004206:	b2c3      	uxtb	r3, r0
 8004208:	2b09      	cmp	r3, #9
 800420a:	f240 80a2 	bls.w	8004352 <translate_keypad+0x27a>
		for(int i = decimallocation-1; i >=0; i--){
 800420e:	f1ba 0f00 	cmp.w	sl, #0
 8004212:	f000 8085 	beq.w	8004320 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004216:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800421a:	fa5f f388 	uxtb.w	r3, r8
 800421e:	2b09      	cmp	r3, #9
 8004220:	f240 80ac 	bls.w	800437c <translate_keypad+0x2a4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004224:	f1b9 0f04 	cmp.w	r9, #4
 8004228:	f109 0701 	add.w	r7, r9, #1
 800422c:	d0ba      	beq.n	80041a4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800422e:	5de8      	ldrb	r0, [r5, r7]
 8004230:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004234:	2b09      	cmp	r3, #9
 8004236:	d95c      	bls.n	80042f2 <translate_keypad+0x21a>
 8004238:	260a      	movs	r6, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 800423a:	2f04      	cmp	r7, #4
 800423c:	f107 0801 	add.w	r8, r7, #1
 8004240:	d0b0      	beq.n	80041a4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004242:	f815 0008 	ldrb.w	r0, [r5, r8]
 8004246:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800424a:	2b09      	cmp	r3, #9
 800424c:	d814      	bhi.n	8004278 <translate_keypad+0x1a0>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800424e:	f7fc fd5d 	bl	8000d0c <__aeabi_i2f>
 8004252:	495c      	ldr	r1, [pc, #368]	; (80043c4 <translate_keypad+0x2ec>)
 8004254:	f7fc fca4 	bl	8000ba0 <__aeabi_fsub>
 8004258:	4607      	mov	r7, r0
 800425a:	4630      	mov	r0, r6
 800425c:	f7fc fd56 	bl	8000d0c <__aeabi_i2f>
 8004260:	4601      	mov	r1, r0
 8004262:	4638      	mov	r0, r7
 8004264:	f7fc fe5a 	bl	8000f1c <__aeabi_fdiv>
 8004268:	4601      	mov	r1, r0
 800426a:	4620      	mov	r0, r4
 800426c:	f7fc fc9a 	bl	8000ba4 <__addsf3>
 8004270:	4604      	mov	r4, r0
				count = count * 10;
 8004272:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004276:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004278:	f1b8 0f04 	cmp.w	r8, #4
 800427c:	f108 0701 	add.w	r7, r8, #1
 8004280:	d090      	beq.n	80041a4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004282:	5de8      	ldrb	r0, [r5, r7]
 8004284:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004288:	2b09      	cmp	r3, #9
 800428a:	d94c      	bls.n	8004326 <translate_keypad+0x24e>
		for(int i = decimallocation+1; i < keypadlength; i++){
 800428c:	2f03      	cmp	r7, #3
 800428e:	d189      	bne.n	80041a4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004290:	7928      	ldrb	r0, [r5, #4]
 8004292:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004296:	2b09      	cmp	r3, #9
 8004298:	d884      	bhi.n	80041a4 <translate_keypad+0xcc>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800429a:	f7fc fd37 	bl	8000d0c <__aeabi_i2f>
 800429e:	4949      	ldr	r1, [pc, #292]	; (80043c4 <translate_keypad+0x2ec>)
 80042a0:	f7fc fc7e 	bl	8000ba0 <__aeabi_fsub>
 80042a4:	4605      	mov	r5, r0
 80042a6:	4630      	mov	r0, r6
 80042a8:	f7fc fd30 	bl	8000d0c <__aeabi_i2f>
 80042ac:	4601      	mov	r1, r0
 80042ae:	4628      	mov	r0, r5
 80042b0:	f7fc fe34 	bl	8000f1c <__aeabi_fdiv>
 80042b4:	4601      	mov	r1, r0
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7fc fc74 	bl	8000ba4 <__addsf3>
 80042bc:	4604      	mov	r4, r0
}
 80042be:	4620      	mov	r0, r4
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 80042c4:	78eb      	ldrb	r3, [r5, #3]
 80042c6:	2b2e      	cmp	r3, #46	; 0x2e
 80042c8:	f43f af6f 	beq.w	80041aa <translate_keypad+0xd2>
 80042cc:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 80042ce:	2b2e      	cmp	r3, #46	; 0x2e
 80042d0:	bf0c      	ite	eq
 80042d2:	f04f 0904 	moveq.w	r9, #4
 80042d6:	f04f 0902 	movne.w	r9, #2
 80042da:	e76d      	b.n	80041b8 <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042dc:	2700      	movs	r7, #0
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80042de:	f7fc fd15 	bl	8000d0c <__aeabi_i2f>
 80042e2:	2100      	movs	r1, #0
 80042e4:	f7fc fc5e 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80042e8:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80042ea:	4604      	mov	r4, r0
				count = count * 10;
 80042ec:	e76e      	b.n	80041cc <translate_keypad+0xf4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80042ee:	2701      	movs	r7, #1
	float num = 0;
 80042f0:	2400      	movs	r4, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80042f2:	f7fc fd0b 	bl	8000d0c <__aeabi_i2f>
 80042f6:	4933      	ldr	r1, [pc, #204]	; (80043c4 <translate_keypad+0x2ec>)
 80042f8:	f7fc fc52 	bl	8000ba0 <__aeabi_fsub>
 80042fc:	4932      	ldr	r1, [pc, #200]	; (80043c8 <translate_keypad+0x2f0>)
 80042fe:	f7fc fe0d 	bl	8000f1c <__aeabi_fdiv>
 8004302:	4601      	mov	r1, r0
 8004304:	4620      	mov	r0, r4
 8004306:	f7fc fc4d 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800430a:	2664      	movs	r6, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800430c:	4604      	mov	r4, r0
				count = count * 10;
 800430e:	e794      	b.n	800423a <translate_keypad+0x162>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004310:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 8004314:	b2c3      	uxtb	r3, r0
 8004316:	2b09      	cmp	r3, #9
 8004318:	f04f 0901 	mov.w	r9, #1
 800431c:	d9de      	bls.n	80042dc <translate_keypad+0x204>
	float num = 0;
 800431e:	2400      	movs	r4, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004320:	f109 0701 	add.w	r7, r9, #1
 8004324:	e783      	b.n	800422e <translate_keypad+0x156>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004326:	f7fc fcf1 	bl	8000d0c <__aeabi_i2f>
 800432a:	4926      	ldr	r1, [pc, #152]	; (80043c4 <translate_keypad+0x2ec>)
 800432c:	f7fc fc38 	bl	8000ba0 <__aeabi_fsub>
 8004330:	4680      	mov	r8, r0
 8004332:	4630      	mov	r0, r6
 8004334:	f7fc fcea 	bl	8000d0c <__aeabi_i2f>
 8004338:	4601      	mov	r1, r0
 800433a:	4640      	mov	r0, r8
 800433c:	f7fc fdee 	bl	8000f1c <__aeabi_fdiv>
 8004340:	4601      	mov	r1, r0
 8004342:	4620      	mov	r0, r4
 8004344:	f7fc fc2e 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004348:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800434c:	4604      	mov	r4, r0
				count = count * 10;
 800434e:	0076      	lsls	r6, r6, #1
 8004350:	e79c      	b.n	800428c <translate_keypad+0x1b4>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004352:	fb06 f000 	mul.w	r0, r6, r0
 8004356:	f7fc fcd9 	bl	8000d0c <__aeabi_i2f>
 800435a:	4601      	mov	r1, r0
 800435c:	4620      	mov	r0, r4
 800435e:	f7fc fc21 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004362:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004366:	4604      	mov	r4, r0
				count = count * 10;
 8004368:	0076      	lsls	r6, r6, #1
 800436a:	e750      	b.n	800420e <translate_keypad+0x136>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800436c:	f7fc fcce 	bl	8000d0c <__aeabi_i2f>
 8004370:	2100      	movs	r1, #0
 8004372:	f7fc fc17 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004376:	250a      	movs	r5, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004378:	4604      	mov	r4, r0
				count = count * 10;
 800437a:	e6d2      	b.n	8004122 <translate_keypad+0x4a>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800437c:	fb06 f008 	mul.w	r0, r6, r8
 8004380:	f7fc fcc4 	bl	8000d0c <__aeabi_i2f>
 8004384:	4601      	mov	r1, r0
 8004386:	4620      	mov	r0, r4
 8004388:	f7fc fc0c 	bl	8000ba4 <__addsf3>
 800438c:	4604      	mov	r4, r0
				count = count * 10;
 800438e:	e749      	b.n	8004224 <translate_keypad+0x14c>
	for(int i = 0; i < keypadlength; i++){
 8004390:	f04f 0904 	mov.w	r9, #4
 8004394:	e710      	b.n	80041b8 <translate_keypad+0xe0>
		for(int i = decimallocation-1; i >=0; i--){
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1ba      	bne.n	8004310 <translate_keypad+0x238>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800439a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800439e:	2b09      	cmp	r3, #9
 80043a0:	4630      	mov	r0, r6
 80043a2:	d9a4      	bls.n	80042ee <translate_keypad+0x216>
 80043a4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	4638      	mov	r0, r7
 80043ac:	d804      	bhi.n	80043b8 <translate_keypad+0x2e0>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043ae:	f04f 0802 	mov.w	r8, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043b2:	260a      	movs	r6, #10
	float num = 0;
 80043b4:	2400      	movs	r4, #0
 80043b6:	e74a      	b.n	800424e <translate_keypad+0x176>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043b8:	2703      	movs	r7, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043ba:	260a      	movs	r6, #10
	float num = 0;
 80043bc:	2400      	movs	r4, #0
 80043be:	e760      	b.n	8004282 <translate_keypad+0x1aa>
 80043c0:	20000008 	.word	0x20000008
 80043c4:	42400000 	.word	0x42400000
 80043c8:	41200000 	.word	0x41200000
 80043cc:	00000000 	.word	0x00000000

080043d0 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 80043d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(keypaditerator < 4){
 80043d4:	4e70      	ldr	r6, [pc, #448]	; (8004598 <fill_keypad+0x1c8>)
void fill_keypad(uint8_t va, float num){
 80043d6:	460d      	mov	r5, r1
	while(keypaditerator < 4){
 80043d8:	f996 4000 	ldrsb.w	r4, [r6]
 80043dc:	2c03      	cmp	r4, #3
 80043de:	dc2d      	bgt.n	800443c <fill_keypad+0x6c>
 80043e0:	496e      	ldr	r1, [pc, #440]	; (800459c <fill_keypad+0x1cc>)
 80043e2:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 80045a0 <fill_keypad+0x1d0>
 80043e6:	2700      	movs	r7, #0
			keypadarr[0] = num;
 80043e8:	f04f 0b7a 	mov.w	fp, #122	; 0x7a
 80043ec:	f891 9004 	ldrb.w	r9, [r1, #4]
 80043f0:	f89a 8000 	ldrb.w	r8, [sl]
 80043f4:	f891 e003 	ldrb.w	lr, [r1, #3]
 80043f8:	788b      	ldrb	r3, [r1, #2]
 80043fa:	784a      	ldrb	r2, [r1, #1]
 80043fc:	f891 c000 	ldrb.w	ip, [r1]
 8004400:	b2e4      	uxtb	r4, r4
 8004402:	e004      	b.n	800440e <fill_keypad+0x3e>
	while(keypaditerator < 4){
 8004404:	469e      	mov	lr, r3
 8004406:	4613      	mov	r3, r2
 8004408:	4662      	mov	r2, ip
			keypadarr[0] = num;
 800440a:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
	while(keypaditerator < 4){
 800440e:	3401      	adds	r4, #1
			if(keypadarr[4] == '.'){
 8004410:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004414:	b2e4      	uxtb	r4, r4
			if(keypadarr[4] == '.'){
 8004416:	bf04      	itt	eq
 8004418:	2701      	moveq	r7, #1
 800441a:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800441e:	2c04      	cmp	r4, #4
 8004420:	46f1      	mov	r9, lr
 8004422:	d1ef      	bne.n	8004404 <fill_keypad+0x34>
 8004424:	f881 c001 	strb.w	ip, [r1, #1]
 8004428:	708a      	strb	r2, [r1, #2]
 800442a:	f881 e004 	strb.w	lr, [r1, #4]
 800442e:	70cb      	strb	r3, [r1, #3]
 8004430:	f881 b000 	strb.w	fp, [r1]
 8004434:	7034      	strb	r4, [r6, #0]
 8004436:	b10f      	cbz	r7, 800443c <fill_keypad+0x6c>
 8004438:	f88a 8000 	strb.w	r8, [sl]
	if(va){
 800443c:	b370      	cbz	r0, 800449c <fill_keypad+0xcc>
		if(num <= 0.0001){
 800443e:	4628      	mov	r0, r5
 8004440:	f7fc f80a 	bl	8000458 <__aeabi_f2d>
 8004444:	a34c      	add	r3, pc, #304	; (adr r3, 8004578 <fill_keypad+0x1a8>)
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	4680      	mov	r8, r0
 800444c:	4689      	mov	r9, r1
 800444e:	f7fc fad7 	bl	8000a00 <__aeabi_dcmple>
 8004452:	2800      	cmp	r0, #0
 8004454:	d155      	bne.n	8004502 <fill_keypad+0x132>
		int temp = (int)(num * 1000);
 8004456:	4953      	ldr	r1, [pc, #332]	; (80045a4 <fill_keypad+0x1d4>)
 8004458:	4628      	mov	r0, r5
 800445a:	f7fc fcab 	bl	8000db4 <__aeabi_fmul>
 800445e:	f7fc fe6f 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 8004462:	2800      	cmp	r0, #0
 8004464:	d06e      	beq.n	8004544 <fill_keypad+0x174>
					keypadarr[keypaditerator] = '.';
 8004466:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800446a:	494c      	ldr	r1, [pc, #304]	; (800459c <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 800446c:	4f4e      	ldr	r7, [pc, #312]	; (80045a8 <fill_keypad+0x1d8>)
 800446e:	fb87 3500 	smull	r3, r5, r7, r0
 8004472:	17c3      	asrs	r3, r0, #31
 8004474:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8004478:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800447c:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 8004480:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 8004482:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8004484:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 8004486:	b254      	sxtb	r4, r2
				if(keypaditerator == 1){
 8004488:	2c01      	cmp	r4, #1
				temp = temp / 10;
 800448a:	4618      	mov	r0, r3
				if(keypaditerator == 1){
 800448c:	d06a      	beq.n	8004564 <fill_keypad+0x194>
			while(temp != 0 && keypaditerator >= 0){
 800448e:	2b00      	cmp	r3, #0
 8004490:	d055      	beq.n	800453e <fill_keypad+0x16e>
 8004492:	2c00      	cmp	r4, #0
 8004494:	daeb      	bge.n	800446e <fill_keypad+0x9e>
 8004496:	7034      	strb	r4, [r6, #0]
}
 8004498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(num <= 0.001){
 800449c:	4628      	mov	r0, r5
 800449e:	f7fb ffdb 	bl	8000458 <__aeabi_f2d>
 80044a2:	a337      	add	r3, pc, #220	; (adr r3, 8004580 <fill_keypad+0x1b0>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	4680      	mov	r8, r0
 80044aa:	4689      	mov	r9, r1
 80044ac:	f7fc faa8 	bl	8000a00 <__aeabi_dcmple>
 80044b0:	b9f0      	cbnz	r0, 80044f0 <fill_keypad+0x120>
		int temp = (int)(num * 100);
 80044b2:	493e      	ldr	r1, [pc, #248]	; (80045ac <fill_keypad+0x1dc>)
 80044b4:	4628      	mov	r0, r5
 80044b6:	f7fc fc7d 	bl	8000db4 <__aeabi_fmul>
 80044ba:	f7fc fe41 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 80044be:	b388      	cbz	r0, 8004524 <fill_keypad+0x154>
					keypadarr[keypaditerator] = '.';
 80044c0:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80044c4:	4935      	ldr	r1, [pc, #212]	; (800459c <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044c6:	4f38      	ldr	r7, [pc, #224]	; (80045a8 <fill_keypad+0x1d8>)
 80044c8:	fb87 3500 	smull	r3, r5, r7, r0
 80044cc:	17c3      	asrs	r3, r0, #31
 80044ce:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 80044d2:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80044d6:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 80044da:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 80044dc:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044de:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 80044e0:	b254      	sxtb	r4, r2
				if(keypaditerator == 2){
 80044e2:	2c02      	cmp	r4, #2
				temp = temp / 10;
 80044e4:	4618      	mov	r0, r3
				if(keypaditerator == 2){
 80044e6:	d015      	beq.n	8004514 <fill_keypad+0x144>
			while(temp != 0 && keypaditerator >= 0){
 80044e8:	b1cb      	cbz	r3, 800451e <fill_keypad+0x14e>
 80044ea:	2c00      	cmp	r4, #0
 80044ec:	daec      	bge.n	80044c8 <fill_keypad+0xf8>
 80044ee:	e7d2      	b.n	8004496 <fill_keypad+0xc6>
			keypadarr[4] = '0';
 80044f0:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 80044f2:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <fill_keypad+0x1cc>)
 80044f6:	482e      	ldr	r0, [pc, #184]	; (80045b0 <fill_keypad+0x1e0>)
			keypadarr[4] = '0';
 80044f8:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 80044fa:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 80044fc:	7032      	strb	r2, [r6, #0]
}
 80044fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			keypadarr[4] = '0';
 8004502:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 8004504:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 8004506:	4b25      	ldr	r3, [pc, #148]	; (800459c <fill_keypad+0x1cc>)
 8004508:	482a      	ldr	r0, [pc, #168]	; (80045b4 <fill_keypad+0x1e4>)
			keypadarr[4] = '0';
 800450a:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 800450c:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 800450e:	7032      	strb	r2, [r6, #0]
}
 8004510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 8004514:	2401      	movs	r4, #1
					keypadarr[keypaditerator] = '.';
 8004516:	f881 c002 	strb.w	ip, [r1, #2]
			while(temp != 0 && keypaditerator >= 0){
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1d4      	bne.n	80044c8 <fill_keypad+0xf8>
			if(keypaditerator >= 0 && num <= 9.999999){
 800451e:	1c62      	adds	r2, r4, #1
 8004520:	7034      	strb	r4, [r6, #0]
 8004522:	d0ec      	beq.n	80044fe <fill_keypad+0x12e>
 8004524:	a318      	add	r3, pc, #96	; (adr r3, 8004588 <fill_keypad+0x1b8>)
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	4640      	mov	r0, r8
 800452c:	4649      	mov	r1, r9
 800452e:	f7fc fa67 	bl	8000a00 <__aeabi_dcmple>
 8004532:	b138      	cbz	r0, 8004544 <fill_keypad+0x174>
				keypadarr[keypaditerator] = '0';
 8004534:	2230      	movs	r2, #48	; 0x30
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <fill_keypad+0x1cc>)
 8004538:	551a      	strb	r2, [r3, r4]
				keypaditerator--;
 800453a:	3c01      	subs	r4, #1
 800453c:	b264      	sxtb	r4, r4
			if(keypaditerator >= 0 && num <= 0.999999){
 800453e:	1c63      	adds	r3, r4, #1
				keypaditerator--;
 8004540:	7034      	strb	r4, [r6, #0]
			if(keypaditerator >= 0 && num <= 0.999999){
 8004542:	d0dc      	beq.n	80044fe <fill_keypad+0x12e>
 8004544:	a312      	add	r3, pc, #72	; (adr r3, 8004590 <fill_keypad+0x1c0>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	4640      	mov	r0, r8
 800454c:	4649      	mov	r1, r9
 800454e:	f7fc fa57 	bl	8000a00 <__aeabi_dcmple>
 8004552:	2800      	cmp	r0, #0
 8004554:	d0d3      	beq.n	80044fe <fill_keypad+0x12e>
				keypadarr[keypaditerator] = '0';
 8004556:	2230      	movs	r2, #48	; 0x30
 8004558:	4b10      	ldr	r3, [pc, #64]	; (800459c <fill_keypad+0x1cc>)
				keypaditerator--;
 800455a:	1e61      	subs	r1, r4, #1
 800455c:	7031      	strb	r1, [r6, #0]
				keypadarr[keypaditerator] = '0';
 800455e:	551a      	strb	r2, [r3, r4]
}
 8004560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 8004564:	2400      	movs	r4, #0
					keypadarr[keypaditerator] = '.';
 8004566:	f881 c001 	strb.w	ip, [r1, #1]
			while(temp != 0 && keypaditerator >= 0){
 800456a:	2b00      	cmp	r3, #0
 800456c:	f47f af7f 	bne.w	800446e <fill_keypad+0x9e>
 8004570:	e7e5      	b.n	800453e <fill_keypad+0x16e>
 8004572:	bf00      	nop
 8004574:	f3af 8000 	nop.w
 8004578:	eb1c432d 	.word	0xeb1c432d
 800457c:	3f1a36e2 	.word	0x3f1a36e2
 8004580:	d2f1a9fc 	.word	0xd2f1a9fc
 8004584:	3f50624d 	.word	0x3f50624d
 8004588:	de7210bf 	.word	0xde7210bf
 800458c:	4023ffff 	.word	0x4023ffff
 8004590:	e7210be9 	.word	0xe7210be9
 8004594:	3feffffd 	.word	0x3feffffd
 8004598:	2000000d 	.word	0x2000000d
 800459c:	20000008 	.word	0x20000008
 80045a0:	2000074c 	.word	0x2000074c
 80045a4:	447a0000 	.word	0x447a0000
 80045a8:	66666667 	.word	0x66666667
 80045ac:	42c80000 	.word	0x42c80000
 80045b0:	302e3030 	.word	0x302e3030
 80045b4:	30302e30 	.word	0x30302e30

080045b8 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045b8:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 80045ba:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045bc:	bb68      	cbnz	r0, 800461a <inc_arr_v+0x62>
 80045be:	4c4e      	ldr	r4, [pc, #312]	; (80046f8 <inc_arr_v+0x140>)
 80045c0:	7822      	ldrb	r2, [r4, #0]
 80045c2:	2a31      	cmp	r2, #49	; 0x31
 80045c4:	d00c      	beq.n	80045e0 <inc_arr_v+0x28>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045c6:	2a30      	cmp	r2, #48	; 0x30
 80045c8:	d076      	beq.n	80046b8 <inc_arr_v+0x100>
			if(keypadarr[pos] < '9'){
 80045ca:	5ce2      	ldrb	r2, [r4, r3]
 80045cc:	4619      	mov	r1, r3
 80045ce:	2a38      	cmp	r2, #56	; 0x38
 80045d0:	d90a      	bls.n	80045e8 <inc_arr_v+0x30>
				keypadarr[pos] = '0';
 80045d2:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 80045d4:	1e58      	subs	r0, r3, #1
 80045d6:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 80045d8:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 80045da:	f7ff ffed 	bl	80045b8 <inc_arr_v>
 80045de:	e005      	b.n	80045ec <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045e0:	7861      	ldrb	r1, [r4, #1]
 80045e2:	292f      	cmp	r1, #47	; 0x2f
 80045e4:	d855      	bhi.n	8004692 <inc_arr_v+0xda>
			if(keypadarr[pos] < '9'){
 80045e6:	4619      	mov	r1, r3
				keypadarr[pos]++;
 80045e8:	3201      	adds	r2, #1
 80045ea:	5462      	strb	r2, [r4, r1]
		if(keypadarr[i] != 'z'){
 80045ec:	7823      	ldrb	r3, [r4, #0]
 80045ee:	2b7a      	cmp	r3, #122	; 0x7a
 80045f0:	d10e      	bne.n	8004610 <inc_arr_v+0x58>
 80045f2:	7863      	ldrb	r3, [r4, #1]
 80045f4:	2b7a      	cmp	r3, #122	; 0x7a
 80045f6:	d16d      	bne.n	80046d4 <inc_arr_v+0x11c>
 80045f8:	78a3      	ldrb	r3, [r4, #2]
 80045fa:	2b7a      	cmp	r3, #122	; 0x7a
 80045fc:	d16c      	bne.n	80046d8 <inc_arr_v+0x120>
 80045fe:	78e3      	ldrb	r3, [r4, #3]
 8004600:	2b7a      	cmp	r3, #122	; 0x7a
 8004602:	d16b      	bne.n	80046dc <inc_arr_v+0x124>
 8004604:	7923      	ldrb	r3, [r4, #4]
 8004606:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004608:	bf18      	it	ne
 800460a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800460c:	d101      	bne.n	8004612 <inc_arr_v+0x5a>
}
 800460e:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 8004610:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004612:	4a3a      	ldr	r2, [pc, #232]	; (80046fc <inc_arr_v+0x144>)
 8004614:	3b01      	subs	r3, #1
 8004616:	7013      	strb	r3, [r2, #0]
}
 8004618:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800461a:	2801      	cmp	r0, #1
 800461c:	d113      	bne.n	8004646 <inc_arr_v+0x8e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 800461e:	4c36      	ldr	r4, [pc, #216]	; (80046f8 <inc_arr_v+0x140>)
 8004620:	7822      	ldrb	r2, [r4, #0]
 8004622:	2a31      	cmp	r2, #49	; 0x31
 8004624:	d1d1      	bne.n	80045ca <inc_arr_v+0x12>
 8004626:	7862      	ldrb	r2, [r4, #1]
 8004628:	2a32      	cmp	r2, #50	; 0x32
 800462a:	d027      	beq.n	800467c <inc_arr_v+0xc4>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800462c:	2a31      	cmp	r2, #49	; 0x31
 800462e:	d1cc      	bne.n	80045ca <inc_arr_v+0x12>
 8004630:	78e1      	ldrb	r1, [r4, #3]
 8004632:	2930      	cmp	r1, #48	; 0x30
 8004634:	d802      	bhi.n	800463c <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004636:	7921      	ldrb	r1, [r4, #4]
 8004638:	2930      	cmp	r1, #48	; 0x30
 800463a:	d9d4      	bls.n	80045e6 <inc_arr_v+0x2e>
		keypadarr[4] = '0';
 800463c:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 800463e:	4a30      	ldr	r2, [pc, #192]	; (8004700 <inc_arr_v+0x148>)
		keypadarr[4] = '0';
 8004640:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '1';
 8004642:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 8004644:	e7d2      	b.n	80045ec <inc_arr_v+0x34>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004646:	2803      	cmp	r0, #3
 8004648:	d10f      	bne.n	800466a <inc_arr_v+0xb2>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 800464a:	4c2b      	ldr	r4, [pc, #172]	; (80046f8 <inc_arr_v+0x140>)
 800464c:	7822      	ldrb	r2, [r4, #0]
 800464e:	2a31      	cmp	r2, #49	; 0x31
 8004650:	d1bb      	bne.n	80045ca <inc_arr_v+0x12>
 8004652:	7862      	ldrb	r2, [r4, #1]
 8004654:	2a32      	cmp	r2, #50	; 0x32
 8004656:	d043      	beq.n	80046e0 <inc_arr_v+0x128>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004658:	2a31      	cmp	r2, #49	; 0x31
 800465a:	d1b6      	bne.n	80045ca <inc_arr_v+0x12>
 800465c:	78e2      	ldrb	r2, [r4, #3]
 800465e:	2a39      	cmp	r2, #57	; 0x39
 8004660:	d1b3      	bne.n	80045ca <inc_arr_v+0x12>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004662:	7922      	ldrb	r2, [r4, #4]
 8004664:	2a30      	cmp	r2, #48	; 0x30
 8004666:	d9b4      	bls.n	80045d2 <inc_arr_v+0x1a>
 8004668:	e7e8      	b.n	800463c <inc_arr_v+0x84>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800466a:	2804      	cmp	r0, #4
 800466c:	d10d      	bne.n	800468a <inc_arr_v+0xd2>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 800466e:	4c22      	ldr	r4, [pc, #136]	; (80046f8 <inc_arr_v+0x140>)
 8004670:	7822      	ldrb	r2, [r4, #0]
 8004672:	2a31      	cmp	r2, #49	; 0x31
 8004674:	d1a9      	bne.n	80045ca <inc_arr_v+0x12>
 8004676:	7862      	ldrb	r2, [r4, #1]
 8004678:	2a32      	cmp	r2, #50	; 0x32
 800467a:	d1a6      	bne.n	80045ca <inc_arr_v+0x12>
 800467c:	78e2      	ldrb	r2, [r4, #3]
 800467e:	2a30      	cmp	r2, #48	; 0x30
 8004680:	d1a3      	bne.n	80045ca <inc_arr_v+0x12>
 8004682:	7922      	ldrb	r2, [r4, #4]
 8004684:	2a30      	cmp	r2, #48	; 0x30
 8004686:	d1a0      	bne.n	80045ca <inc_arr_v+0x12>
 8004688:	e7d8      	b.n	800463c <inc_arr_v+0x84>
		if(pos >= 0 && pos != 2){
 800468a:	2800      	cmp	r0, #0
 800468c:	da0e      	bge.n	80046ac <inc_arr_v+0xf4>
 800468e:	4c1a      	ldr	r4, [pc, #104]	; (80046f8 <inc_arr_v+0x140>)
 8004690:	e7ac      	b.n	80045ec <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004692:	78e0      	ldrb	r0, [r4, #3]
 8004694:	282f      	cmp	r0, #47	; 0x2f
 8004696:	d998      	bls.n	80045ca <inc_arr_v+0x12>
 8004698:	7920      	ldrb	r0, [r4, #4]
 800469a:	282f      	cmp	r0, #47	; 0x2f
 800469c:	d8ce      	bhi.n	800463c <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800469e:	2a30      	cmp	r2, #48	; 0x30
 80046a0:	d193      	bne.n	80045ca <inc_arr_v+0x12>
 80046a2:	2931      	cmp	r1, #49	; 0x31
 80046a4:	d80e      	bhi.n	80046c4 <inc_arr_v+0x10c>
			if(keypadarr[pos] < '9'){
 80046a6:	2100      	movs	r1, #0
 80046a8:	7822      	ldrb	r2, [r4, #0]
 80046aa:	e79d      	b.n	80045e8 <inc_arr_v+0x30>
		if(pos >= 0 && pos != 2){
 80046ac:	2802      	cmp	r0, #2
 80046ae:	d120      	bne.n	80046f2 <inc_arr_v+0x13a>
			inc_arr_v(pos-1);
 80046b0:	2001      	movs	r0, #1
 80046b2:	f7ff ff81 	bl	80045b8 <inc_arr_v>
 80046b6:	e7ea      	b.n	800468e <inc_arr_v+0xd6>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046b8:	7861      	ldrb	r1, [r4, #1]
 80046ba:	2932      	cmp	r1, #50	; 0x32
 80046bc:	d9f1      	bls.n	80046a2 <inc_arr_v+0xea>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046be:	78e0      	ldrb	r0, [r4, #3]
 80046c0:	282f      	cmp	r0, #47	; 0x2f
 80046c2:	d8e9      	bhi.n	8004698 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80046c4:	78e2      	ldrb	r2, [r4, #3]
 80046c6:	2a30      	cmp	r2, #48	; 0x30
 80046c8:	d8b8      	bhi.n	800463c <inc_arr_v+0x84>
 80046ca:	7922      	ldrb	r2, [r4, #4]
 80046cc:	2a30      	cmp	r2, #48	; 0x30
 80046ce:	f67f af7c 	bls.w	80045ca <inc_arr_v+0x12>
 80046d2:	e7b3      	b.n	800463c <inc_arr_v+0x84>
	for(int i = 0; i < keypadlength; i++){
 80046d4:	2301      	movs	r3, #1
 80046d6:	e79c      	b.n	8004612 <inc_arr_v+0x5a>
 80046d8:	2302      	movs	r3, #2
 80046da:	e79a      	b.n	8004612 <inc_arr_v+0x5a>
 80046dc:	2303      	movs	r3, #3
 80046de:	e798      	b.n	8004612 <inc_arr_v+0x5a>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80046e0:	78e2      	ldrb	r2, [r4, #3]
 80046e2:	2a30      	cmp	r2, #48	; 0x30
 80046e4:	f47f af71 	bne.w	80045ca <inc_arr_v+0x12>
 80046e8:	7922      	ldrb	r2, [r4, #4]
 80046ea:	2a2f      	cmp	r2, #47	; 0x2f
 80046ec:	f67f af6d 	bls.w	80045ca <inc_arr_v+0x12>
 80046f0:	e7a4      	b.n	800463c <inc_arr_v+0x84>
 80046f2:	4c01      	ldr	r4, [pc, #4]	; (80046f8 <inc_arr_v+0x140>)
 80046f4:	e769      	b.n	80045ca <inc_arr_v+0x12>
 80046f6:	bf00      	nop
 80046f8:	20000008 	.word	0x20000008
 80046fc:	2000000d 	.word	0x2000000d
 8004700:	302e3231 	.word	0x302e3231

08004704 <inc_arr_a>:
void inc_arr_a(int8_t pos){
 8004704:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8004706:	b9b0      	cbnz	r0, 8004736 <inc_arr_a+0x32>
 8004708:	4c40      	ldr	r4, [pc, #256]	; (800480c <inc_arr_a+0x108>)
		keypadarr[4] = '0';
 800470a:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 800470c:	4a40      	ldr	r2, [pc, #256]	; (8004810 <inc_arr_a+0x10c>)
		keypadarr[4] = '0';
 800470e:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004710:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004712:	7823      	ldrb	r3, [r4, #0]
 8004714:	2b7a      	cmp	r3, #122	; 0x7a
 8004716:	d118      	bne.n	800474a <inc_arr_a+0x46>
 8004718:	7863      	ldrb	r3, [r4, #1]
 800471a:	2b7a      	cmp	r3, #122	; 0x7a
 800471c:	d15f      	bne.n	80047de <inc_arr_a+0xda>
 800471e:	78a3      	ldrb	r3, [r4, #2]
 8004720:	2b7a      	cmp	r3, #122	; 0x7a
 8004722:	d16c      	bne.n	80047fe <inc_arr_a+0xfa>
 8004724:	78e3      	ldrb	r3, [r4, #3]
 8004726:	2b7a      	cmp	r3, #122	; 0x7a
 8004728:	d16b      	bne.n	8004802 <inc_arr_a+0xfe>
 800472a:	7923      	ldrb	r3, [r4, #4]
 800472c:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 800472e:	bf18      	it	ne
 8004730:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004732:	d10b      	bne.n	800474c <inc_arr_a+0x48>
}
 8004734:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8004736:	2802      	cmp	r0, #2
 8004738:	d00c      	beq.n	8004754 <inc_arr_a+0x50>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800473a:	2803      	cmp	r0, #3
 800473c:	d01b      	beq.n	8004776 <inc_arr_a+0x72>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800473e:	2804      	cmp	r0, #4
 8004740:	d031      	beq.n	80047a6 <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 8004742:	2800      	cmp	r0, #0
 8004744:	da11      	bge.n	800476a <inc_arr_a+0x66>
 8004746:	4c31      	ldr	r4, [pc, #196]	; (800480c <inc_arr_a+0x108>)
 8004748:	e7e3      	b.n	8004712 <inc_arr_a+0xe>
	for(int i = 0; i < keypadlength; i++){
 800474a:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 800474c:	4a31      	ldr	r2, [pc, #196]	; (8004814 <inc_arr_a+0x110>)
 800474e:	3b01      	subs	r3, #1
 8004750:	7013      	strb	r3, [r2, #0]
}
 8004752:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004754:	4c2d      	ldr	r4, [pc, #180]	; (800480c <inc_arr_a+0x108>)
 8004756:	7823      	ldrb	r3, [r4, #0]
 8004758:	2b30      	cmp	r3, #48	; 0x30
 800475a:	d032      	beq.n	80047c2 <inc_arr_a+0xbe>
			if(keypadarr[pos] < '9'){
 800475c:	5c23      	ldrb	r3, [r4, r0]
 800475e:	4602      	mov	r2, r0
 8004760:	2b38      	cmp	r3, #56	; 0x38
 8004762:	d819      	bhi.n	8004798 <inc_arr_a+0x94>
				keypadarr[pos]++;
 8004764:	3301      	adds	r3, #1
 8004766:	54a3      	strb	r3, [r4, r2]
 8004768:	e7d3      	b.n	8004712 <inc_arr_a+0xe>
		if(pos >= 0 && pos != 1){
 800476a:	2801      	cmp	r0, #1
 800476c:	d14b      	bne.n	8004806 <inc_arr_a+0x102>
			inc_arr_a(pos-1);
 800476e:	2000      	movs	r0, #0
 8004770:	f7ff ffc8 	bl	8004704 <inc_arr_a>
 8004774:	e7e7      	b.n	8004746 <inc_arr_a+0x42>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004776:	4c25      	ldr	r4, [pc, #148]	; (800480c <inc_arr_a+0x108>)
 8004778:	7823      	ldrb	r3, [r4, #0]
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d1ee      	bne.n	800475c <inc_arr_a+0x58>
 800477e:	78a3      	ldrb	r3, [r4, #2]
 8004780:	2b38      	cmp	r3, #56	; 0x38
 8004782:	d035      	beq.n	80047f0 <inc_arr_a+0xec>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004784:	78a3      	ldrb	r3, [r4, #2]
 8004786:	2b37      	cmp	r3, #55	; 0x37
 8004788:	d1e8      	bne.n	800475c <inc_arr_a+0x58>
 800478a:	78e3      	ldrb	r3, [r4, #3]
 800478c:	2b39      	cmp	r3, #57	; 0x39
 800478e:	d1e5      	bne.n	800475c <inc_arr_a+0x58>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004790:	7923      	ldrb	r3, [r4, #4]
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d8b9      	bhi.n	800470a <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 8004796:	2203      	movs	r2, #3
				keypadarr[pos] = '0';
 8004798:	2330      	movs	r3, #48	; 0x30
				inc_arr_a(pos-1);
 800479a:	3801      	subs	r0, #1
 800479c:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 800479e:	54a3      	strb	r3, [r4, r2]
				inc_arr_a(pos-1);
 80047a0:	f7ff ffb0 	bl	8004704 <inc_arr_a>
 80047a4:	e7b5      	b.n	8004712 <inc_arr_a+0xe>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80047a6:	4c19      	ldr	r4, [pc, #100]	; (800480c <inc_arr_a+0x108>)
 80047a8:	7823      	ldrb	r3, [r4, #0]
 80047aa:	2b30      	cmp	r3, #48	; 0x30
 80047ac:	d1d6      	bne.n	800475c <inc_arr_a+0x58>
 80047ae:	78a3      	ldrb	r3, [r4, #2]
 80047b0:	2b38      	cmp	r3, #56	; 0x38
 80047b2:	d1d3      	bne.n	800475c <inc_arr_a+0x58>
 80047b4:	78e3      	ldrb	r3, [r4, #3]
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d1d0      	bne.n	800475c <inc_arr_a+0x58>
 80047ba:	7923      	ldrb	r3, [r4, #4]
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d1cd      	bne.n	800475c <inc_arr_a+0x58>
 80047c0:	e7a3      	b.n	800470a <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80047c2:	78a3      	ldrb	r3, [r4, #2]
 80047c4:	2b38      	cmp	r3, #56	; 0x38
 80047c6:	d00c      	beq.n	80047e2 <inc_arr_a+0xde>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047c8:	78a3      	ldrb	r3, [r4, #2]
 80047ca:	2b37      	cmp	r3, #55	; 0x37
 80047cc:	d1c6      	bne.n	800475c <inc_arr_a+0x58>
 80047ce:	78e2      	ldrb	r2, [r4, #3]
 80047d0:	2a30      	cmp	r2, #48	; 0x30
 80047d2:	d89a      	bhi.n	800470a <inc_arr_a+0x6>
 80047d4:	7922      	ldrb	r2, [r4, #4]
 80047d6:	2a30      	cmp	r2, #48	; 0x30
 80047d8:	d897      	bhi.n	800470a <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 80047da:	2202      	movs	r2, #2
 80047dc:	e7c2      	b.n	8004764 <inc_arr_a+0x60>
	for(int i = 0; i < keypadlength; i++){
 80047de:	2301      	movs	r3, #1
 80047e0:	e7b4      	b.n	800474c <inc_arr_a+0x48>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80047e2:	78e3      	ldrb	r3, [r4, #3]
 80047e4:	2b30      	cmp	r3, #48	; 0x30
 80047e6:	d1ef      	bne.n	80047c8 <inc_arr_a+0xc4>
 80047e8:	7923      	ldrb	r3, [r4, #4]
 80047ea:	2b30      	cmp	r3, #48	; 0x30
 80047ec:	d1ec      	bne.n	80047c8 <inc_arr_a+0xc4>
 80047ee:	e78c      	b.n	800470a <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80047f0:	78e3      	ldrb	r3, [r4, #3]
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d1c6      	bne.n	8004784 <inc_arr_a+0x80>
 80047f6:	7923      	ldrb	r3, [r4, #4]
 80047f8:	2b2f      	cmp	r3, #47	; 0x2f
 80047fa:	d886      	bhi.n	800470a <inc_arr_a+0x6>
 80047fc:	e7c2      	b.n	8004784 <inc_arr_a+0x80>
	for(int i = 0; i < keypadlength; i++){
 80047fe:	2302      	movs	r3, #2
 8004800:	e7a4      	b.n	800474c <inc_arr_a+0x48>
 8004802:	2303      	movs	r3, #3
 8004804:	e7a2      	b.n	800474c <inc_arr_a+0x48>
 8004806:	4c01      	ldr	r4, [pc, #4]	; (800480c <inc_arr_a+0x108>)
 8004808:	e7a8      	b.n	800475c <inc_arr_a+0x58>
 800480a:	bf00      	nop
 800480c:	20000008 	.word	0x20000008
 8004810:	30382e30 	.word	0x30382e30
 8004814:	2000000d 	.word	0x2000000d

08004818 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 8004818:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800481a:	4603      	mov	r3, r0
 800481c:	4c45      	ldr	r4, [pc, #276]	; (8004934 <dec_arr_v+0x11c>)
 800481e:	b9c8      	cbnz	r0, 8004854 <dec_arr_v+0x3c>
 8004820:	7822      	ldrb	r2, [r4, #0]
 8004822:	2a30      	cmp	r2, #48	; 0x30
 8004824:	d01e      	beq.n	8004864 <dec_arr_v+0x4c>
			if(keypadarr[pos] > '0'){
 8004826:	5ce2      	ldrb	r2, [r4, r3]
 8004828:	2a30      	cmp	r2, #48	; 0x30
 800482a:	d960      	bls.n	80048ee <dec_arr_v+0xd6>
				keypadarr[pos]--;
 800482c:	3a01      	subs	r2, #1
 800482e:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 8004830:	7823      	ldrb	r3, [r4, #0]
 8004832:	2b7a      	cmp	r3, #122	; 0x7a
 8004834:	d156      	bne.n	80048e4 <dec_arr_v+0xcc>
 8004836:	7863      	ldrb	r3, [r4, #1]
 8004838:	2b7a      	cmp	r3, #122	; 0x7a
 800483a:	d15f      	bne.n	80048fc <dec_arr_v+0xe4>
 800483c:	78a3      	ldrb	r3, [r4, #2]
 800483e:	2b7a      	cmp	r3, #122	; 0x7a
 8004840:	d15e      	bne.n	8004900 <dec_arr_v+0xe8>
 8004842:	78e3      	ldrb	r3, [r4, #3]
 8004844:	2b7a      	cmp	r3, #122	; 0x7a
 8004846:	d15d      	bne.n	8004904 <dec_arr_v+0xec>
 8004848:	7923      	ldrb	r3, [r4, #4]
 800484a:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 800484c:	bf18      	it	ne
 800484e:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004850:	d149      	bne.n	80048e6 <dec_arr_v+0xce>
}
 8004852:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004854:	2801      	cmp	r0, #1
 8004856:	d10a      	bne.n	800486e <dec_arr_v+0x56>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004858:	7822      	ldrb	r2, [r4, #0]
 800485a:	2a30      	cmp	r2, #48	; 0x30
 800485c:	d1e3      	bne.n	8004826 <dec_arr_v+0xe>
 800485e:	7862      	ldrb	r2, [r4, #1]
 8004860:	2a30      	cmp	r2, #48	; 0x30
 8004862:	d1e0      	bne.n	8004826 <dec_arr_v+0xe>
		keypadarr[4] = '0';
 8004864:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 8004866:	4a34      	ldr	r2, [pc, #208]	; (8004938 <dec_arr_v+0x120>)
		keypadarr[4] = '0';
 8004868:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 800486a:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 800486c:	e7e0      	b.n	8004830 <dec_arr_v+0x18>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 800486e:	2803      	cmp	r0, #3
 8004870:	d02e      	beq.n	80048d0 <dec_arr_v+0xb8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004872:	2804      	cmp	r0, #4
 8004874:	d10c      	bne.n	8004890 <dec_arr_v+0x78>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004876:	7822      	ldrb	r2, [r4, #0]
 8004878:	2a30      	cmp	r2, #48	; 0x30
 800487a:	d1d4      	bne.n	8004826 <dec_arr_v+0xe>
 800487c:	7862      	ldrb	r2, [r4, #1]
 800487e:	2a30      	cmp	r2, #48	; 0x30
 8004880:	d1d1      	bne.n	8004826 <dec_arr_v+0xe>
 8004882:	78e2      	ldrb	r2, [r4, #3]
 8004884:	2a30      	cmp	r2, #48	; 0x30
 8004886:	d1ce      	bne.n	8004826 <dec_arr_v+0xe>
 8004888:	7922      	ldrb	r2, [r4, #4]
 800488a:	2a30      	cmp	r2, #48	; 0x30
 800488c:	d1cb      	bne.n	8004826 <dec_arr_v+0xe>
 800488e:	e7e9      	b.n	8004864 <dec_arr_v+0x4c>
		if(pos <= 4 && pos != 2){
 8004890:	dcce      	bgt.n	8004830 <dec_arr_v+0x18>
 8004892:	2802      	cmp	r0, #2
 8004894:	d1c7      	bne.n	8004826 <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004896:	7823      	ldrb	r3, [r4, #0]
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	7863      	ldrb	r3, [r4, #1]
 800489c:	d034      	beq.n	8004908 <dec_arr_v+0xf0>
			if(keypadarr[pos] > '0'){
 800489e:	2b30      	cmp	r3, #48	; 0x30
 80048a0:	d93a      	bls.n	8004918 <dec_arr_v+0x100>
				keypadarr[pos]--;
 80048a2:	3b01      	subs	r3, #1
 80048a4:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 80048a6:	7823      	ldrb	r3, [r4, #0]
 80048a8:	2b7a      	cmp	r3, #122	; 0x7a
 80048aa:	d141      	bne.n	8004930 <dec_arr_v+0x118>
 80048ac:	7863      	ldrb	r3, [r4, #1]
 80048ae:	2b7a      	cmp	r3, #122	; 0x7a
 80048b0:	d138      	bne.n	8004924 <dec_arr_v+0x10c>
 80048b2:	78a3      	ldrb	r3, [r4, #2]
 80048b4:	2b7a      	cmp	r3, #122	; 0x7a
 80048b6:	d137      	bne.n	8004928 <dec_arr_v+0x110>
 80048b8:	78e3      	ldrb	r3, [r4, #3]
 80048ba:	2b7a      	cmp	r3, #122	; 0x7a
 80048bc:	d136      	bne.n	800492c <dec_arr_v+0x114>
 80048be:	7923      	ldrb	r3, [r4, #4]
 80048c0:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80048c2:	bf18      	it	ne
 80048c4:	2204      	movne	r2, #4
		if(keypadarr[i] != 'z'){
 80048c6:	d0b6      	beq.n	8004836 <dec_arr_v+0x1e>
			keypaditerator = i - 1;
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <dec_arr_v+0x124>)
 80048ca:	3a01      	subs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
			break;
 80048ce:	e7af      	b.n	8004830 <dec_arr_v+0x18>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 80048d0:	7822      	ldrb	r2, [r4, #0]
 80048d2:	2a30      	cmp	r2, #48	; 0x30
 80048d4:	d1a7      	bne.n	8004826 <dec_arr_v+0xe>
 80048d6:	7862      	ldrb	r2, [r4, #1]
 80048d8:	2a30      	cmp	r2, #48	; 0x30
 80048da:	d1a4      	bne.n	8004826 <dec_arr_v+0xe>
 80048dc:	78e2      	ldrb	r2, [r4, #3]
 80048de:	2a30      	cmp	r2, #48	; 0x30
 80048e0:	d1a1      	bne.n	8004826 <dec_arr_v+0xe>
 80048e2:	e7bf      	b.n	8004864 <dec_arr_v+0x4c>
	for(int i = 0; i < keypadlength; i++){
 80048e4:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80048e6:	4a15      	ldr	r2, [pc, #84]	; (800493c <dec_arr_v+0x124>)
 80048e8:	3b01      	subs	r3, #1
 80048ea:	7013      	strb	r3, [r2, #0]
}
 80048ec:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 80048ee:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 80048f0:	1e58      	subs	r0, r3, #1
 80048f2:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 80048f4:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 80048f6:	f7ff ff8f 	bl	8004818 <dec_arr_v>
 80048fa:	e799      	b.n	8004830 <dec_arr_v+0x18>
	for(int i = 0; i < keypadlength; i++){
 80048fc:	2301      	movs	r3, #1
 80048fe:	e7f2      	b.n	80048e6 <dec_arr_v+0xce>
 8004900:	2302      	movs	r3, #2
 8004902:	e7f0      	b.n	80048e6 <dec_arr_v+0xce>
 8004904:	2303      	movs	r3, #3
 8004906:	e7ee      	b.n	80048e6 <dec_arr_v+0xce>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004908:	2b30      	cmp	r3, #48	; 0x30
 800490a:	d1c8      	bne.n	800489e <dec_arr_v+0x86>
		keypadarr[2] = '.';
 800490c:	f243 012e 	movw	r1, #12334	; 0x302e
	for(int i = 0; i < keypadlength; i++){
 8004910:	2200      	movs	r2, #0
		keypadarr[4] = '0';
 8004912:	7123      	strb	r3, [r4, #4]
		keypadarr[2] = '.';
 8004914:	8061      	strh	r1, [r4, #2]
		if(keypadarr[i] != 'z'){
 8004916:	e7d7      	b.n	80048c8 <dec_arr_v+0xb0>
				keypadarr[pos] = '9';
 8004918:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 800491a:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 800491c:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 800491e:	f7ff ff7b 	bl	8004818 <dec_arr_v>
 8004922:	e7c0      	b.n	80048a6 <dec_arr_v+0x8e>
	for(int i = 0; i < keypadlength; i++){
 8004924:	2201      	movs	r2, #1
 8004926:	e7cf      	b.n	80048c8 <dec_arr_v+0xb0>
 8004928:	2202      	movs	r2, #2
 800492a:	e7cd      	b.n	80048c8 <dec_arr_v+0xb0>
 800492c:	2203      	movs	r2, #3
 800492e:	e7cb      	b.n	80048c8 <dec_arr_v+0xb0>
 8004930:	2200      	movs	r2, #0
 8004932:	e7c9      	b.n	80048c8 <dec_arr_v+0xb0>
 8004934:	20000008 	.word	0x20000008
 8004938:	302e3030 	.word	0x302e3030
 800493c:	2000000d 	.word	0x2000000d

08004940 <dec_arr_a>:
void dec_arr_a(int8_t pos){
 8004940:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004942:	4603      	mov	r3, r0
 8004944:	4c43      	ldr	r4, [pc, #268]	; (8004a54 <dec_arr_a+0x114>)
 8004946:	b940      	cbnz	r0, 800495a <dec_arr_a+0x1a>
 8004948:	7822      	ldrb	r2, [r4, #0]
 800494a:	2a30      	cmp	r2, #48	; 0x30
 800494c:	d035      	beq.n	80049ba <dec_arr_a+0x7a>
			if(keypadarr[pos] > '0'){
 800494e:	5ce2      	ldrb	r2, [r4, r3]
 8004950:	2a30      	cmp	r2, #48	; 0x30
 8004952:	d95d      	bls.n	8004a10 <dec_arr_a+0xd0>
				keypadarr[pos]--;
 8004954:	3a01      	subs	r2, #1
 8004956:	54e2      	strb	r2, [r4, r3]
 8004958:	e033      	b.n	80049c2 <dec_arr_a+0x82>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800495a:	2801      	cmp	r0, #1
 800495c:	d11d      	bne.n	800499a <dec_arr_a+0x5a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 800495e:	7823      	ldrb	r3, [r4, #0]
 8004960:	2b30      	cmp	r3, #48	; 0x30
 8004962:	d051      	beq.n	8004a08 <dec_arr_a+0xc8>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004964:	7823      	ldrb	r3, [r4, #0]
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d066      	beq.n	8004a38 <dec_arr_a+0xf8>
			if(keypadarr[pos] > '0'){
 800496a:	d95a      	bls.n	8004a22 <dec_arr_a+0xe2>
				keypadarr[pos]--;
 800496c:	3b01      	subs	r3, #1
 800496e:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004970:	7823      	ldrb	r3, [r4, #0]
 8004972:	2b7a      	cmp	r3, #122	; 0x7a
 8004974:	d16b      	bne.n	8004a4e <dec_arr_a+0x10e>
 8004976:	7863      	ldrb	r3, [r4, #1]
 8004978:	2b7a      	cmp	r3, #122	; 0x7a
 800497a:	d162      	bne.n	8004a42 <dec_arr_a+0x102>
 800497c:	78a3      	ldrb	r3, [r4, #2]
 800497e:	2b7a      	cmp	r3, #122	; 0x7a
 8004980:	d161      	bne.n	8004a46 <dec_arr_a+0x106>
 8004982:	78e3      	ldrb	r3, [r4, #3]
 8004984:	2b7a      	cmp	r3, #122	; 0x7a
 8004986:	d160      	bne.n	8004a4a <dec_arr_a+0x10a>
 8004988:	7923      	ldrb	r3, [r4, #4]
 800498a:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 800498c:	bf18      	it	ne
 800498e:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004990:	d01a      	beq.n	80049c8 <dec_arr_a+0x88>
			keypaditerator = i - 1;
 8004992:	4a31      	ldr	r2, [pc, #196]	; (8004a58 <dec_arr_a+0x118>)
 8004994:	3b01      	subs	r3, #1
 8004996:	7013      	strb	r3, [r2, #0]
			break;
 8004998:	e013      	b.n	80049c2 <dec_arr_a+0x82>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 800499a:	2803      	cmp	r0, #3
 800499c:	d023      	beq.n	80049e6 <dec_arr_a+0xa6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 800499e:	2804      	cmp	r0, #4
 80049a0:	d130      	bne.n	8004a04 <dec_arr_a+0xc4>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80049a2:	7822      	ldrb	r2, [r4, #0]
 80049a4:	2a30      	cmp	r2, #48	; 0x30
 80049a6:	d1d2      	bne.n	800494e <dec_arr_a+0xe>
 80049a8:	78a2      	ldrb	r2, [r4, #2]
 80049aa:	2a30      	cmp	r2, #48	; 0x30
 80049ac:	d1cf      	bne.n	800494e <dec_arr_a+0xe>
 80049ae:	78e2      	ldrb	r2, [r4, #3]
 80049b0:	2a30      	cmp	r2, #48	; 0x30
 80049b2:	d1cc      	bne.n	800494e <dec_arr_a+0xe>
 80049b4:	7922      	ldrb	r2, [r4, #4]
 80049b6:	2a30      	cmp	r2, #48	; 0x30
 80049b8:	d1c9      	bne.n	800494e <dec_arr_a+0xe>
		keypadarr[4] = '0';
 80049ba:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <dec_arr_a+0x11c>)
		keypadarr[4] = '0';
 80049be:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 80049c0:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 80049c2:	7823      	ldrb	r3, [r4, #0]
 80049c4:	2b7a      	cmp	r3, #122	; 0x7a
 80049c6:	d118      	bne.n	80049fa <dec_arr_a+0xba>
 80049c8:	7863      	ldrb	r3, [r4, #1]
 80049ca:	2b7a      	cmp	r3, #122	; 0x7a
 80049cc:	d127      	bne.n	8004a1e <dec_arr_a+0xde>
 80049ce:	78a3      	ldrb	r3, [r4, #2]
 80049d0:	2b7a      	cmp	r3, #122	; 0x7a
 80049d2:	d12d      	bne.n	8004a30 <dec_arr_a+0xf0>
 80049d4:	78e3      	ldrb	r3, [r4, #3]
 80049d6:	2b7a      	cmp	r3, #122	; 0x7a
 80049d8:	d12c      	bne.n	8004a34 <dec_arr_a+0xf4>
 80049da:	7923      	ldrb	r3, [r4, #4]
 80049dc:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80049de:	bf18      	it	ne
 80049e0:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80049e2:	d10b      	bne.n	80049fc <dec_arr_a+0xbc>
}
 80049e4:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 80049e6:	7822      	ldrb	r2, [r4, #0]
 80049e8:	2a30      	cmp	r2, #48	; 0x30
 80049ea:	d1b0      	bne.n	800494e <dec_arr_a+0xe>
 80049ec:	78a2      	ldrb	r2, [r4, #2]
 80049ee:	2a30      	cmp	r2, #48	; 0x30
 80049f0:	d1ad      	bne.n	800494e <dec_arr_a+0xe>
 80049f2:	78e2      	ldrb	r2, [r4, #3]
 80049f4:	2a30      	cmp	r2, #48	; 0x30
 80049f6:	d1aa      	bne.n	800494e <dec_arr_a+0xe>
 80049f8:	e7df      	b.n	80049ba <dec_arr_a+0x7a>
	for(int i = 0; i < keypadlength; i++){
 80049fa:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80049fc:	4a16      	ldr	r2, [pc, #88]	; (8004a58 <dec_arr_a+0x118>)
 80049fe:	3b01      	subs	r3, #1
 8004a00:	7013      	strb	r3, [r2, #0]
}
 8004a02:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 8004a04:	dcdd      	bgt.n	80049c2 <dec_arr_a+0x82>
 8004a06:	e7a2      	b.n	800494e <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004a08:	78a3      	ldrb	r3, [r4, #2]
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d1aa      	bne.n	8004964 <dec_arr_a+0x24>
 8004a0e:	e7d4      	b.n	80049ba <dec_arr_a+0x7a>
				keypadarr[pos] = '9';
 8004a10:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 8004a12:	1e58      	subs	r0, r3, #1
 8004a14:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004a16:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 8004a18:	f7ff ff92 	bl	8004940 <dec_arr_a>
 8004a1c:	e7d1      	b.n	80049c2 <dec_arr_a+0x82>
	for(int i = 0; i < keypadlength; i++){
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e7ec      	b.n	80049fc <dec_arr_a+0xbc>
				keypadarr[pos] = '9';
 8004a22:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 8004a28:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 8004a2a:	f7ff ff89 	bl	8004940 <dec_arr_a>
 8004a2e:	e79f      	b.n	8004970 <dec_arr_a+0x30>
	for(int i = 0; i < keypadlength; i++){
 8004a30:	2302      	movs	r3, #2
 8004a32:	e7e3      	b.n	80049fc <dec_arr_a+0xbc>
 8004a34:	2303      	movs	r3, #3
 8004a36:	e7e1      	b.n	80049fc <dec_arr_a+0xbc>
		keypadarr[1] = '.';
 8004a38:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <dec_arr_a+0x120>)
	for(int i = 0; i < keypadlength; i++){
 8004a3a:	2300      	movs	r3, #0
		keypadarr[1] = '.';
 8004a3c:	f8c4 2001 	str.w	r2, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004a40:	e7a7      	b.n	8004992 <dec_arr_a+0x52>
	for(int i = 0; i < keypadlength; i++){
 8004a42:	2301      	movs	r3, #1
 8004a44:	e7a5      	b.n	8004992 <dec_arr_a+0x52>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e7a3      	b.n	8004992 <dec_arr_a+0x52>
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e7a1      	b.n	8004992 <dec_arr_a+0x52>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e79f      	b.n	8004992 <dec_arr_a+0x52>
 8004a52:	bf00      	nop
 8004a54:	20000008 	.word	0x20000008
 8004a58:	2000000d 	.word	0x2000000d
 8004a5c:	30302e30 	.word	0x30302e30
 8004a60:	3030302e 	.word	0x3030302e
 8004a64:	00000000 	.word	0x00000000

08004a68 <keypad_sm>:
void keypad_sm(char num){
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(kpenum == WAIT){
 8004a6c:	4ca4      	ldr	r4, [pc, #656]	; (8004d00 <keypad_sm+0x298>)
 8004a6e:	7822      	ldrb	r2, [r4, #0]
 8004a70:	b9b2      	cbnz	r2, 8004aa0 <keypad_sm+0x38>
		if(num == 'A'){
 8004a72:	2841      	cmp	r0, #65	; 0x41
 8004a74:	d070      	beq.n	8004b58 <keypad_sm+0xf0>
		else if(num == 'B'){
 8004a76:	2842      	cmp	r0, #66	; 0x42
 8004a78:	f000 810e 	beq.w	8004c98 <keypad_sm+0x230>
		else if(num == 'C'){
 8004a7c:	2843      	cmp	r0, #67	; 0x43
 8004a7e:	f000 80d7 	beq.w	8004c30 <keypad_sm+0x1c8>
		else if(num == 'D'){
 8004a82:	2844      	cmp	r0, #68	; 0x44
 8004a84:	f000 8330 	beq.w	80050e8 <keypad_sm+0x680>
		else if(num == '*'){
 8004a88:	282a      	cmp	r0, #42	; 0x2a
 8004a8a:	f000 83b1 	beq.w	80051f0 <keypad_sm+0x788>
		else if(num == '/'){
 8004a8e:	282f      	cmp	r0, #47	; 0x2f
 8004a90:	d111      	bne.n	8004ab6 <keypad_sm+0x4e>
			if(chstat_main){
 8004a92:	4b9c      	ldr	r3, [pc, #624]	; (8004d04 <keypad_sm+0x29c>)
 8004a94:	7819      	ldrb	r1, [r3, #0]
 8004a96:	2900      	cmp	r1, #0
 8004a98:	f000 85fb 	beq.w	8005692 <keypad_sm+0xc2a>
				chstat_main = 0;
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e00a      	b.n	8004ab6 <keypad_sm+0x4e>
	else if(kpenum == V1){
 8004aa0:	2a01      	cmp	r2, #1
 8004aa2:	d00a      	beq.n	8004aba <keypad_sm+0x52>
	else if(kpenum == A1){
 8004aa4:	2a02      	cmp	r2, #2
 8004aa6:	f000 8137 	beq.w	8004d18 <keypad_sm+0x2b0>
	else if(kpenum == V2){
 8004aaa:	2a03      	cmp	r2, #3
 8004aac:	f000 8087 	beq.w	8004bbe <keypad_sm+0x156>
	else if(kpenum == A2){
 8004ab0:	2a04      	cmp	r2, #4
 8004ab2:	f000 834d 	beq.w	8005150 <keypad_sm+0x6e8>
}
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004aba:	4f93      	ldr	r7, [pc, #588]	; (8004d08 <keypad_sm+0x2a0>)
 8004abc:	783a      	ldrb	r2, [r7, #0]
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	f000 817a 	beq.w	8004db8 <keypad_sm+0x350>
			if(num == 'A'){
 8004ac4:	2841      	cmp	r0, #65	; 0x41
 8004ac6:	f000 839b 	beq.w	8005200 <keypad_sm+0x798>
			else if(num == 'B'){
 8004aca:	2842      	cmp	r0, #66	; 0x42
 8004acc:	f000 8258 	beq.w	8004f80 <keypad_sm+0x518>
			else if(num == 'C'){
 8004ad0:	2843      	cmp	r0, #67	; 0x43
 8004ad2:	f000 84a7 	beq.w	8005424 <keypad_sm+0x9bc>
			else if(num == 'D'){
 8004ad6:	2844      	cmp	r0, #68	; 0x44
 8004ad8:	f000 86d6 	beq.w	8005888 <keypad_sm+0xe20>
			else if(num == '.'){
 8004adc:	282e      	cmp	r0, #46	; 0x2e
 8004ade:	f000 87ff 	beq.w	8005ae0 <keypad_sm+0x1078>
			else if(num >= '0' && num <= '9'){
 8004ae2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004ae6:	2b09      	cmp	r3, #9
 8004ae8:	f201 816b 	bhi.w	8005dc2 <keypad_sm+0x135a>
	while(keypaditerator < 4){
 8004aec:	4d87      	ldr	r5, [pc, #540]	; (8004d0c <keypad_sm+0x2a4>)
 8004aee:	f995 2000 	ldrsb.w	r2, [r5]
 8004af2:	2a03      	cmp	r2, #3
 8004af4:	f300 82f2 	bgt.w	80050dc <keypad_sm+0x674>
 8004af8:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <keypad_sm+0x2a8>)
 8004afa:	4e86      	ldr	r6, [pc, #536]	; (8004d14 <keypad_sm+0x2ac>)
 8004afc:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004b00:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004b04:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004b08:	f896 e000 	ldrb.w	lr, [r6]
 8004b0c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004b10:	789c      	ldrb	r4, [r3, #2]
 8004b12:	7858      	ldrb	r0, [r3, #1]
 8004b14:	7819      	ldrb	r1, [r3, #0]
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	e003      	b.n	8004b22 <keypad_sm+0xba>
	while(keypaditerator < 4){
 8004b1a:	46a4      	mov	ip, r4
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004b20:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004b22:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004b24:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004b28:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004b2a:	bf04      	itt	eq
 8004b2c:	f04f 0801 	moveq.w	r8, #1
 8004b30:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004b34:	2a04      	cmp	r2, #4
 8004b36:	46e1      	mov	r9, ip
 8004b38:	d1ef      	bne.n	8004b1a <keypad_sm+0xb2>
 8004b3a:	702a      	strb	r2, [r5, #0]
 8004b3c:	f883 c004 	strb.w	ip, [r3, #4]
 8004b40:	70dc      	strb	r4, [r3, #3]
 8004b42:	7098      	strb	r0, [r3, #2]
 8004b44:	7059      	strb	r1, [r3, #1]
 8004b46:	f883 a000 	strb.w	sl, [r3]
 8004b4a:	f1b8 0f00 	cmp.w	r8, #0
 8004b4e:	f000 82c5 	beq.w	80050dc <keypad_sm+0x674>
 8004b52:	f886 e000 	strb.w	lr, [r6]
 8004b56:	e2c1      	b.n	80050dc <keypad_sm+0x674>
			kpenum = V1;
 8004b58:	2301      	movs	r3, #1
	while(keypaditerator < 4){
 8004b5a:	4d6c      	ldr	r5, [pc, #432]	; (8004d0c <keypad_sm+0x2a4>)
			kpenum = V1;
 8004b5c:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004b5e:	f995 1000 	ldrsb.w	r1, [r5]
 8004b62:	2903      	cmp	r1, #3
 8004b64:	dca7      	bgt.n	8004ab6 <keypad_sm+0x4e>
 8004b66:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <keypad_sm+0x2a8>)
 8004b68:	4e6a      	ldr	r6, [pc, #424]	; (8004d14 <keypad_sm+0x2ac>)
			keypadarr[0] = num;
 8004b6a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004b6e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004b72:	7837      	ldrb	r7, [r6, #0]
 8004b74:	78dc      	ldrb	r4, [r3, #3]
 8004b76:	f893 e002 	ldrb.w	lr, [r3, #2]
 8004b7a:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004b7e:	7818      	ldrb	r0, [r3, #0]
 8004b80:	b2c9      	uxtb	r1, r1
 8004b82:	e003      	b.n	8004b8c <keypad_sm+0x124>
	while(keypaditerator < 4){
 8004b84:	4674      	mov	r4, lr
 8004b86:	46e6      	mov	lr, ip
 8004b88:	4684      	mov	ip, r0
			keypadarr[0] = num;
 8004b8a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004b8c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004b8e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004b92:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004b94:	bf04      	itt	eq
 8004b96:	2700      	moveq	r7, #0
 8004b98:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004b9a:	2904      	cmp	r1, #4
 8004b9c:	46a0      	mov	r8, r4
 8004b9e:	d1f1      	bne.n	8004b84 <keypad_sm+0x11c>
 8004ba0:	7029      	strb	r1, [r5, #0]
 8004ba2:	711c      	strb	r4, [r3, #4]
 8004ba4:	f883 e003 	strb.w	lr, [r3, #3]
 8004ba8:	f883 c002 	strb.w	ip, [r3, #2]
 8004bac:	7058      	strb	r0, [r3, #1]
 8004bae:	f883 9000 	strb.w	r9, [r3]
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	f43f af7f 	beq.w	8004ab6 <keypad_sm+0x4e>
 8004bb8:	7037      	strb	r7, [r6, #0]
}
 8004bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004bbe:	4f52      	ldr	r7, [pc, #328]	; (8004d08 <keypad_sm+0x2a0>)
 8004bc0:	783a      	ldrb	r2, [r7, #0]
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	f040 815f 	bne.w	8004e86 <keypad_sm+0x41e>
			if(num == 'A'){
 8004bc8:	2841      	cmp	r0, #65	; 0x41
 8004bca:	f000 83f5 	beq.w	80053b8 <keypad_sm+0x950>
			else if(num == 'B'){
 8004bce:	2842      	cmp	r0, #66	; 0x42
 8004bd0:	f000 8624 	beq.w	800581c <keypad_sm+0xdb4>
			else if(num == 'C'){
 8004bd4:	2843      	cmp	r0, #67	; 0x43
 8004bd6:	f000 8739 	beq.w	8005a4c <keypad_sm+0xfe4>
			else if(num == 'D'){
 8004bda:	2844      	cmp	r0, #68	; 0x44
 8004bdc:	f001 81f9 	beq.w	8005fd2 <keypad_sm+0x156a>
			else if(num == '.'){
 8004be0:	282e      	cmp	r0, #46	; 0x2e
 8004be2:	f000 855a 	beq.w	800569a <keypad_sm+0xc32>
			else if(num >= '0' && num <= '9'){
 8004be6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	f240 8556 	bls.w	800569c <keypad_sm+0xc34>
			else if(num == '#'){
 8004bf0:	2823      	cmp	r0, #35	; 0x23
 8004bf2:	f001 8502 	beq.w	80065fa <keypad_sm+0x1b92>
			else if(num == '+'){
 8004bf6:	282b      	cmp	r0, #43	; 0x2b
 8004bf8:	f001 8503 	beq.w	8006602 <keypad_sm+0x1b9a>
			else if(num == '-'){
 8004bfc:	282d      	cmp	r0, #45	; 0x2d
 8004bfe:	f001 863c 	beq.w	800687a <keypad_sm+0x1e12>
			else if(num == 's'){
 8004c02:	2873      	cmp	r0, #115	; 0x73
 8004c04:	f002 8208 	beq.w	8007018 <keypad_sm+0x25b0>
			else if(num == '['){
 8004c08:	285b      	cmp	r0, #91	; 0x5b
 8004c0a:	f002 81f9 	beq.w	8007000 <keypad_sm+0x2598>
			else if(num == ']'){
 8004c0e:	285d      	cmp	r0, #93	; 0x5d
 8004c10:	f002 82b6 	beq.w	8007180 <keypad_sm+0x2718>
			else if(num == '*'){
 8004c14:	282a      	cmp	r0, #42	; 0x2a
 8004c16:	f002 81e9 	beq.w	8006fec <keypad_sm+0x2584>
			else if(num == '/'){
 8004c1a:	282f      	cmp	r0, #47	; 0x2f
 8004c1c:	f47f af4b 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 8004c20:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <keypad_sm+0x29c>)
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	f002 82a7 	beq.w	8007178 <keypad_sm+0x2710>
					chstat_main = 0;
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e742      	b.n	8004ab6 <keypad_sm+0x4e>
			kpenum = V2;
 8004c30:	2303      	movs	r3, #3
	while(keypaditerator < 4){
 8004c32:	4d36      	ldr	r5, [pc, #216]	; (8004d0c <keypad_sm+0x2a4>)
			kpenum = V2;
 8004c34:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004c36:	f995 1000 	ldrsb.w	r1, [r5]
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	f73f af3b 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8004c40:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <keypad_sm+0x2a8>)
 8004c42:	4e34      	ldr	r6, [pc, #208]	; (8004d14 <keypad_sm+0x2ac>)
			keypadarr[0] = num;
 8004c44:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004c48:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004c4c:	f896 e000 	ldrb.w	lr, [r6]
 8004c50:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004c54:	789f      	ldrb	r7, [r3, #2]
 8004c56:	785c      	ldrb	r4, [r3, #1]
 8004c58:	7818      	ldrb	r0, [r3, #0]
 8004c5a:	b2c9      	uxtb	r1, r1
 8004c5c:	e003      	b.n	8004c66 <keypad_sm+0x1fe>
	while(keypaditerator < 4){
 8004c5e:	46bc      	mov	ip, r7
 8004c60:	4627      	mov	r7, r4
 8004c62:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004c64:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004c66:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004c68:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004c6c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004c6e:	bf04      	itt	eq
 8004c70:	f04f 0e00 	moveq.w	lr, #0
 8004c74:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004c76:	2904      	cmp	r1, #4
 8004c78:	46e0      	mov	r8, ip
 8004c7a:	d1f0      	bne.n	8004c5e <keypad_sm+0x1f6>
 8004c7c:	7029      	strb	r1, [r5, #0]
 8004c7e:	f883 c004 	strb.w	ip, [r3, #4]
 8004c82:	70df      	strb	r7, [r3, #3]
 8004c84:	709c      	strb	r4, [r3, #2]
 8004c86:	7058      	strb	r0, [r3, #1]
 8004c88:	f883 9000 	strb.w	r9, [r3]
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	f43f af12 	beq.w	8004ab6 <keypad_sm+0x4e>
 8004c92:	f886 e000 	strb.w	lr, [r6]
 8004c96:	e70e      	b.n	8004ab6 <keypad_sm+0x4e>
			kpenum = A1;
 8004c98:	2302      	movs	r3, #2
	while(keypaditerator < 4){
 8004c9a:	4d1c      	ldr	r5, [pc, #112]	; (8004d0c <keypad_sm+0x2a4>)
			kpenum = A1;
 8004c9c:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004c9e:	f995 1000 	ldrsb.w	r1, [r5]
 8004ca2:	2903      	cmp	r1, #3
 8004ca4:	f73f af07 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <keypad_sm+0x2a8>)
 8004caa:	4e1a      	ldr	r6, [pc, #104]	; (8004d14 <keypad_sm+0x2ac>)
			keypadarr[0] = num;
 8004cac:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004cb0:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004cb4:	f896 e000 	ldrb.w	lr, [r6]
 8004cb8:	78df      	ldrb	r7, [r3, #3]
 8004cba:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004cbe:	785c      	ldrb	r4, [r3, #1]
 8004cc0:	7818      	ldrb	r0, [r3, #0]
 8004cc2:	b2c9      	uxtb	r1, r1
 8004cc4:	e003      	b.n	8004cce <keypad_sm+0x266>
	while(keypaditerator < 4){
 8004cc6:	4667      	mov	r7, ip
 8004cc8:	46a4      	mov	ip, r4
 8004cca:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004ccc:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004cce:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004cd0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004cd4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004cd6:	bf04      	itt	eq
 8004cd8:	f04f 0e00 	moveq.w	lr, #0
 8004cdc:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004cde:	2904      	cmp	r1, #4
 8004ce0:	46b8      	mov	r8, r7
 8004ce2:	d1f0      	bne.n	8004cc6 <keypad_sm+0x25e>
 8004ce4:	7029      	strb	r1, [r5, #0]
 8004ce6:	711f      	strb	r7, [r3, #4]
 8004ce8:	f883 c003 	strb.w	ip, [r3, #3]
 8004cec:	709c      	strb	r4, [r3, #2]
 8004cee:	7058      	strb	r0, [r3, #1]
 8004cf0:	f883 9000 	strb.w	r9, [r3]
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	f43f aede 	beq.w	8004ab6 <keypad_sm+0x4e>
 8004cfa:	f886 e000 	strb.w	lr, [r6]
 8004cfe:	e6da      	b.n	8004ab6 <keypad_sm+0x4e>
 8004d00:	2000074d 	.word	0x2000074d
 8004d04:	200003eb 	.word	0x200003eb
 8004d08:	200003f4 	.word	0x200003f4
 8004d0c:	2000000d 	.word	0x2000000d
 8004d10:	20000008 	.word	0x20000008
 8004d14:	2000074c 	.word	0x2000074c
		if(encmode){
 8004d18:	4fb6      	ldr	r7, [pc, #728]	; (8004ff4 <keypad_sm+0x58c>)
 8004d1a:	783a      	ldrb	r2, [r7, #0]
 8004d1c:	2a00      	cmp	r2, #0
 8004d1e:	d07f      	beq.n	8004e20 <keypad_sm+0x3b8>
			if(num == 'A'){
 8004d20:	2841      	cmp	r0, #65	; 0x41
 8004d22:	f000 81a6 	beq.w	8005072 <keypad_sm+0x60a>
			else if(num == 'B'){
 8004d26:	2842      	cmp	r0, #66	; 0x42
 8004d28:	f000 83fd 	beq.w	8005526 <keypad_sm+0xabe>
			else if(num == 'C'){
 8004d2c:	2843      	cmp	r0, #67	; 0x43
 8004d2e:	f000 8503 	beq.w	8005738 <keypad_sm+0xcd0>
			else if(num == 'D'){
 8004d32:	2844      	cmp	r0, #68	; 0x44
 8004d34:	f000 877e 	beq.w	8005c34 <keypad_sm+0x11cc>
			else if(num == '.'){
 8004d38:	282e      	cmp	r0, #46	; 0x2e
 8004d3a:	f001 8063 	beq.w	8005e04 <keypad_sm+0x139c>
			else if(num >= '0' && num <= '9'){
 8004d3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	f201 818c 	bhi.w	8006060 <keypad_sm+0x15f8>
	while(keypaditerator < 4){
 8004d48:	4dab      	ldr	r5, [pc, #684]	; (8004ff8 <keypad_sm+0x590>)
 8004d4a:	f995 2000 	ldrsb.w	r2, [r5]
 8004d4e:	2a03      	cmp	r2, #3
 8004d50:	f300 81c4 	bgt.w	80050dc <keypad_sm+0x674>
 8004d54:	4ba9      	ldr	r3, [pc, #676]	; (8004ffc <keypad_sm+0x594>)
 8004d56:	4eaa      	ldr	r6, [pc, #680]	; (8005000 <keypad_sm+0x598>)
 8004d58:	3201      	adds	r2, #1
 8004d5a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004d5e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004d62:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004d66:	f896 e000 	ldrb.w	lr, [r6]
 8004d6a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004d6e:	789c      	ldrb	r4, [r3, #2]
 8004d70:	7858      	ldrb	r0, [r3, #1]
 8004d72:	7819      	ldrb	r1, [r3, #0]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	e003      	b.n	8004d80 <keypad_sm+0x318>
	while(keypaditerator < 4){
 8004d78:	46a4      	mov	ip, r4
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004d7e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004d80:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004d82:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004d86:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004d88:	bf04      	itt	eq
 8004d8a:	f04f 0801 	moveq.w	r8, #1
 8004d8e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004d92:	2a05      	cmp	r2, #5
 8004d94:	46e1      	mov	r9, ip
 8004d96:	d1ef      	bne.n	8004d78 <keypad_sm+0x310>
 8004d98:	f883 c004 	strb.w	ip, [r3, #4]
 8004d9c:	70dc      	strb	r4, [r3, #3]
 8004d9e:	7098      	strb	r0, [r3, #2]
 8004da0:	7059      	strb	r1, [r3, #1]
 8004da2:	f883 a000 	strb.w	sl, [r3]
 8004da6:	2304      	movs	r3, #4
 8004da8:	702b      	strb	r3, [r5, #0]
 8004daa:	f1b8 0f00 	cmp.w	r8, #0
 8004dae:	f000 8195 	beq.w	80050dc <keypad_sm+0x674>
 8004db2:	f886 e000 	strb.w	lr, [r6]
 8004db6:	e191      	b.n	80050dc <keypad_sm+0x674>
			if(num == 'A'){
 8004db8:	2841      	cmp	r0, #65	; 0x41
 8004dba:	f000 8269 	beq.w	8005290 <keypad_sm+0x828>
			else if(num == 'B'){
 8004dbe:	2842      	cmp	r0, #66	; 0x42
 8004dc0:	f000 8122 	beq.w	8005008 <keypad_sm+0x5a0>
			else if(num == 'C'){
 8004dc4:	2843      	cmp	r0, #67	; 0x43
 8004dc6:	f000 8430 	beq.w	800562a <keypad_sm+0xbc2>
			else if(num == 'D'){
 8004dca:	2844      	cmp	r0, #68	; 0x44
 8004dcc:	f000 85d0 	beq.w	8005970 <keypad_sm+0xf08>
			else if(num == '.'){
 8004dd0:	282e      	cmp	r0, #46	; 0x2e
 8004dd2:	f001 8166 	beq.w	80060a2 <keypad_sm+0x163a>
			else if(num >= '0' && num <= '9'){
 8004dd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004dda:	2b09      	cmp	r3, #9
 8004ddc:	f240 845e 	bls.w	800569c <keypad_sm+0xc34>
			else if(num == '#'){
 8004de0:	2823      	cmp	r0, #35	; 0x23
 8004de2:	f001 8316 	beq.w	8006412 <keypad_sm+0x19aa>
			else if(num == '+'){
 8004de6:	282b      	cmp	r0, #43	; 0x2b
 8004de8:	f001 8269 	beq.w	80062be <keypad_sm+0x1856>
			else if(num == '-'){
 8004dec:	282d      	cmp	r0, #45	; 0x2d
 8004dee:	f001 8385 	beq.w	80064fc <keypad_sm+0x1a94>
			else if(num == 's'){
 8004df2:	2873      	cmp	r0, #115	; 0x73
 8004df4:	f001 8535 	beq.w	8006862 <keypad_sm+0x1dfa>
			else if(num == '['){
 8004df8:	285b      	cmp	r0, #91	; 0x5b
 8004dfa:	f002 80d7 	beq.w	8006fac <keypad_sm+0x2544>
			else if(num == ']'){
 8004dfe:	285d      	cmp	r0, #93	; 0x5d
 8004e00:	f002 8080 	beq.w	8006f04 <keypad_sm+0x249c>
			else if(num == '*'){
 8004e04:	282a      	cmp	r0, #42	; 0x2a
 8004e06:	f001 856c 	beq.w	80068e2 <keypad_sm+0x1e7a>
			else if(num == '/'){
 8004e0a:	282f      	cmp	r0, #47	; 0x2f
 8004e0c:	f47f ae53 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 8004e10:	4b7c      	ldr	r3, [pc, #496]	; (8005004 <keypad_sm+0x59c>)
 8004e12:	781a      	ldrb	r2, [r3, #0]
 8004e14:	2a00      	cmp	r2, #0
 8004e16:	f002 819f 	beq.w	8007158 <keypad_sm+0x26f0>
					chstat_main = 0;
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e64a      	b.n	8004ab6 <keypad_sm+0x4e>
			if(num == 'A'){
 8004e20:	2841      	cmp	r0, #65	; 0x41
 8004e22:	d07a      	beq.n	8004f1a <keypad_sm+0x4b2>
			else if(num == 'B'){
 8004e24:	2842      	cmp	r0, #66	; 0x42
 8004e26:	f000 8335 	beq.w	8005494 <keypad_sm+0xa2c>
			else if(num == 'C'){
 8004e2a:	2843      	cmp	r0, #67	; 0x43
 8004e2c:	f000 844e 	beq.w	80056cc <keypad_sm+0xc64>
			else if(num == 'D'){
 8004e30:	2844      	cmp	r0, #68	; 0x44
 8004e32:	f000 8738 	beq.w	8005ca6 <keypad_sm+0x123e>
			else if(num == '.'){
 8004e36:	282e      	cmp	r0, #46	; 0x2e
 8004e38:	f001 8286 	beq.w	8006348 <keypad_sm+0x18e0>
			else if(num >= '0' && num <= '9'){
 8004e3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e40:	2b09      	cmp	r3, #9
 8004e42:	f240 842b 	bls.w	800569c <keypad_sm+0xc34>
			else if(num == '#'){
 8004e46:	2823      	cmp	r0, #35	; 0x23
 8004e48:	f001 8481 	beq.w	800674e <keypad_sm+0x1ce6>
			else if(num == '+'){
 8004e4c:	282b      	cmp	r0, #43	; 0x2b
 8004e4e:	f001 838d 	beq.w	800656c <keypad_sm+0x1b04>
			else if(num == '-'){
 8004e52:	282d      	cmp	r0, #45	; 0x2d
 8004e54:	f001 8496 	beq.w	8006784 <keypad_sm+0x1d1c>
			else if(num == 's'){
 8004e58:	2873      	cmp	r0, #115	; 0x73
 8004e5a:	f001 872b 	beq.w	8006cb4 <keypad_sm+0x224c>
			else if(num == '['){
 8004e5e:	285b      	cmp	r0, #91	; 0x5b
 8004e60:	f002 80b8 	beq.w	8006fd4 <keypad_sm+0x256c>
			else if(num == ']'){
 8004e64:	285d      	cmp	r0, #93	; 0x5d
 8004e66:	f002 8041 	beq.w	8006eec <keypad_sm+0x2484>
			else if(num == '*'){
 8004e6a:	282a      	cmp	r0, #42	; 0x2a
 8004e6c:	f002 8034 	beq.w	8006ed8 <keypad_sm+0x2470>
			else if(num == '/'){
 8004e70:	282f      	cmp	r0, #47	; 0x2f
 8004e72:	f47f ae20 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 8004e76:	4b63      	ldr	r3, [pc, #396]	; (8005004 <keypad_sm+0x59c>)
 8004e78:	781a      	ldrb	r2, [r3, #0]
 8004e7a:	2a00      	cmp	r2, #0
 8004e7c:	f002 80d8 	beq.w	8007030 <keypad_sm+0x25c8>
					chstat_main = 0;
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	e617      	b.n	8004ab6 <keypad_sm+0x4e>
			if(num == 'A'){
 8004e86:	2841      	cmp	r0, #65	; 0x41
 8004e88:	f000 8395 	beq.w	80055b6 <keypad_sm+0xb4e>
			else if(num == 'B'){
 8004e8c:	2842      	cmp	r0, #66	; 0x42
 8004e8e:	f000 8536 	beq.w	80058fe <keypad_sm+0xe96>
			else if(num == 'C'){
 8004e92:	2843      	cmp	r0, #67	; 0x43
 8004e94:	f000 8749 	beq.w	8005d2a <keypad_sm+0x12c2>
			else if(num == 'D'){
 8004e98:	2844      	cmp	r0, #68	; 0x44
 8004e9a:	f001 805f 	beq.w	8005f5c <keypad_sm+0x14f4>
			else if(num == '.'){
 8004e9e:	282e      	cmp	r0, #46	; 0x2e
 8004ea0:	f001 81d4 	beq.w	800624c <keypad_sm+0x17e4>
			else if(num >= '0' && num <= '9'){
 8004ea4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004ea8:	2b09      	cmp	r3, #9
 8004eaa:	f201 81ae 	bhi.w	800620a <keypad_sm+0x17a2>
	while(keypaditerator < 4){
 8004eae:	4d52      	ldr	r5, [pc, #328]	; (8004ff8 <keypad_sm+0x590>)
 8004eb0:	f995 2000 	ldrsb.w	r2, [r5]
 8004eb4:	2a03      	cmp	r2, #3
 8004eb6:	f300 8111 	bgt.w	80050dc <keypad_sm+0x674>
 8004eba:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <keypad_sm+0x594>)
 8004ebc:	4e50      	ldr	r6, [pc, #320]	; (8005000 <keypad_sm+0x598>)
 8004ebe:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004ec2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004ec6:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004eca:	f896 e000 	ldrb.w	lr, [r6]
 8004ece:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004ed2:	789c      	ldrb	r4, [r3, #2]
 8004ed4:	7858      	ldrb	r0, [r3, #1]
 8004ed6:	7819      	ldrb	r1, [r3, #0]
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	e003      	b.n	8004ee4 <keypad_sm+0x47c>
	while(keypaditerator < 4){
 8004edc:	46a4      	mov	ip, r4
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004ee2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004ee4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004ee6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004eea:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004eec:	bf04      	itt	eq
 8004eee:	f04f 0801 	moveq.w	r8, #1
 8004ef2:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004ef6:	2a04      	cmp	r2, #4
 8004ef8:	46e1      	mov	r9, ip
 8004efa:	d1ef      	bne.n	8004edc <keypad_sm+0x474>
 8004efc:	702a      	strb	r2, [r5, #0]
 8004efe:	f883 c004 	strb.w	ip, [r3, #4]
 8004f02:	70dc      	strb	r4, [r3, #3]
 8004f04:	7098      	strb	r0, [r3, #2]
 8004f06:	7059      	strb	r1, [r3, #1]
 8004f08:	f883 a000 	strb.w	sl, [r3]
 8004f0c:	f1b8 0f00 	cmp.w	r8, #0
 8004f10:	f000 80e4 	beq.w	80050dc <keypad_sm+0x674>
 8004f14:	f886 e000 	strb.w	lr, [r6]
 8004f18:	e0e0      	b.n	80050dc <keypad_sm+0x674>
 8004f1a:	4d37      	ldr	r5, [pc, #220]	; (8004ff8 <keypad_sm+0x590>)
				kpenum = WAIT;
 8004f1c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8004f1e:	f995 1000 	ldrsb.w	r1, [r5]
 8004f22:	2903      	cmp	r1, #3
 8004f24:	f73f adc7 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8004f28:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <keypad_sm+0x594>)
 8004f2a:	4e35      	ldr	r6, [pc, #212]	; (8005000 <keypad_sm+0x598>)
			keypadarr[0] = num;
 8004f2c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004f30:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004f34:	f896 e000 	ldrb.w	lr, [r6]
 8004f38:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004f3c:	789f      	ldrb	r7, [r3, #2]
 8004f3e:	785c      	ldrb	r4, [r3, #1]
 8004f40:	7818      	ldrb	r0, [r3, #0]
 8004f42:	b2c9      	uxtb	r1, r1
 8004f44:	e003      	b.n	8004f4e <keypad_sm+0x4e6>
	while(keypaditerator < 4){
 8004f46:	46bc      	mov	ip, r7
 8004f48:	4627      	mov	r7, r4
 8004f4a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004f4c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004f4e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004f50:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004f54:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004f56:	bf04      	itt	eq
 8004f58:	f04f 0e00 	moveq.w	lr, #0
 8004f5c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004f5e:	2904      	cmp	r1, #4
 8004f60:	46e0      	mov	r8, ip
 8004f62:	d1f0      	bne.n	8004f46 <keypad_sm+0x4de>
 8004f64:	7029      	strb	r1, [r5, #0]
 8004f66:	f883 c004 	strb.w	ip, [r3, #4]
 8004f6a:	70df      	strb	r7, [r3, #3]
 8004f6c:	709c      	strb	r4, [r3, #2]
 8004f6e:	7058      	strb	r0, [r3, #1]
 8004f70:	f883 9000 	strb.w	r9, [r3]
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	f43f ad9e 	beq.w	8004ab6 <keypad_sm+0x4e>
 8004f7a:	f886 e000 	strb.w	lr, [r6]
 8004f7e:	e59a      	b.n	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8004f80:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8004f84:	4d1c      	ldr	r5, [pc, #112]	; (8004ff8 <keypad_sm+0x590>)
				kpenum = WAIT;
 8004f86:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8004f8a:	f995 2000 	ldrsb.w	r2, [r5]
 8004f8e:	2a03      	cmp	r2, #3
 8004f90:	f300 80a4 	bgt.w	80050dc <keypad_sm+0x674>
 8004f94:	4b19      	ldr	r3, [pc, #100]	; (8004ffc <keypad_sm+0x594>)
 8004f96:	4e1a      	ldr	r6, [pc, #104]	; (8005000 <keypad_sm+0x598>)
 8004f98:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8004f9a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004f9e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004fa2:	f896 8000 	ldrb.w	r8, [r6]
 8004fa6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004faa:	789c      	ldrb	r4, [r3, #2]
 8004fac:	7858      	ldrb	r0, [r3, #1]
 8004fae:	7819      	ldrb	r1, [r3, #0]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	e003      	b.n	8004fbc <keypad_sm+0x554>
	while(keypaditerator < 4){
 8004fb4:	46a4      	mov	ip, r4
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004fba:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004fbc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004fbe:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004fc2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004fc4:	bf04      	itt	eq
 8004fc6:	f04f 0e01 	moveq.w	lr, #1
 8004fca:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8004fce:	2a05      	cmp	r2, #5
 8004fd0:	46e1      	mov	r9, ip
 8004fd2:	d1ef      	bne.n	8004fb4 <keypad_sm+0x54c>
 8004fd4:	f883 c004 	strb.w	ip, [r3, #4]
 8004fd8:	70dc      	strb	r4, [r3, #3]
 8004fda:	7098      	strb	r0, [r3, #2]
 8004fdc:	7059      	strb	r1, [r3, #1]
 8004fde:	f883 a000 	strb.w	sl, [r3]
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	702b      	strb	r3, [r5, #0]
 8004fe6:	f1be 0f00 	cmp.w	lr, #0
 8004fea:	d077      	beq.n	80050dc <keypad_sm+0x674>
 8004fec:	f886 8000 	strb.w	r8, [r6]
 8004ff0:	e074      	b.n	80050dc <keypad_sm+0x674>
 8004ff2:	bf00      	nop
 8004ff4:	200003f4 	.word	0x200003f4
 8004ff8:	2000000d 	.word	0x2000000d
 8004ffc:	20000008 	.word	0x20000008
 8005000:	2000074c 	.word	0x2000074c
 8005004:	200003eb 	.word	0x200003eb
 8005008:	4db5      	ldr	r5, [pc, #724]	; (80052e0 <keypad_sm+0x878>)
				kpenum = WAIT;
 800500a:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800500c:	f995 1000 	ldrsb.w	r1, [r5]
 8005010:	2903      	cmp	r1, #3
 8005012:	f73f ad50 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005016:	4bb3      	ldr	r3, [pc, #716]	; (80052e4 <keypad_sm+0x87c>)
 8005018:	4eb3      	ldr	r6, [pc, #716]	; (80052e8 <keypad_sm+0x880>)
 800501a:	3101      	adds	r1, #1
			keypadarr[0] = num;
 800501c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005020:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005024:	f896 e000 	ldrb.w	lr, [r6]
 8005028:	f893 c003 	ldrb.w	ip, [r3, #3]
 800502c:	789f      	ldrb	r7, [r3, #2]
 800502e:	785c      	ldrb	r4, [r3, #1]
 8005030:	7818      	ldrb	r0, [r3, #0]
 8005032:	b2c9      	uxtb	r1, r1
 8005034:	e003      	b.n	800503e <keypad_sm+0x5d6>
	while(keypaditerator < 4){
 8005036:	46bc      	mov	ip, r7
 8005038:	4627      	mov	r7, r4
 800503a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800503c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800503e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005040:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005044:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005046:	bf04      	itt	eq
 8005048:	f04f 0e00 	moveq.w	lr, #0
 800504c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800504e:	2905      	cmp	r1, #5
 8005050:	46e0      	mov	r8, ip
 8005052:	d1f0      	bne.n	8005036 <keypad_sm+0x5ce>
 8005054:	f883 c004 	strb.w	ip, [r3, #4]
 8005058:	70df      	strb	r7, [r3, #3]
 800505a:	709c      	strb	r4, [r3, #2]
 800505c:	7058      	strb	r0, [r3, #1]
 800505e:	f883 9000 	strb.w	r9, [r3]
 8005062:	2304      	movs	r3, #4
 8005064:	702b      	strb	r3, [r5, #0]
 8005066:	2a00      	cmp	r2, #0
 8005068:	f43f ad25 	beq.w	8004ab6 <keypad_sm+0x4e>
 800506c:	f886 e000 	strb.w	lr, [r6]
 8005070:	e521      	b.n	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005072:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005076:	4d9a      	ldr	r5, [pc, #616]	; (80052e0 <keypad_sm+0x878>)
				kpenum = WAIT;
 8005078:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800507c:	f995 2000 	ldrsb.w	r2, [r5]
 8005080:	2a03      	cmp	r2, #3
 8005082:	dc2b      	bgt.n	80050dc <keypad_sm+0x674>
 8005084:	4b97      	ldr	r3, [pc, #604]	; (80052e4 <keypad_sm+0x87c>)
 8005086:	4e98      	ldr	r6, [pc, #608]	; (80052e8 <keypad_sm+0x880>)
			keypadarr[0] = num;
 8005088:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800508c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005090:	f896 8000 	ldrb.w	r8, [r6]
 8005094:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005098:	789c      	ldrb	r4, [r3, #2]
 800509a:	7858      	ldrb	r0, [r3, #1]
 800509c:	7819      	ldrb	r1, [r3, #0]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	e003      	b.n	80050aa <keypad_sm+0x642>
	while(keypaditerator < 4){
 80050a2:	46a4      	mov	ip, r4
 80050a4:	4604      	mov	r4, r0
 80050a6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80050a8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80050aa:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80050ac:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80050b0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80050b2:	bf04      	itt	eq
 80050b4:	f04f 0e01 	moveq.w	lr, #1
 80050b8:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80050bc:	2a04      	cmp	r2, #4
 80050be:	46e1      	mov	r9, ip
 80050c0:	d1ef      	bne.n	80050a2 <keypad_sm+0x63a>
 80050c2:	702a      	strb	r2, [r5, #0]
 80050c4:	f883 c004 	strb.w	ip, [r3, #4]
 80050c8:	70dc      	strb	r4, [r3, #3]
 80050ca:	7098      	strb	r0, [r3, #2]
 80050cc:	7059      	strb	r1, [r3, #1]
 80050ce:	f883 a000 	strb.w	sl, [r3]
 80050d2:	f1be 0f00 	cmp.w	lr, #0
 80050d6:	d001      	beq.n	80050dc <keypad_sm+0x674>
 80050d8:	f886 8000 	strb.w	r8, [r6]
				encmode = 0;
 80050dc:	2300      	movs	r3, #0
				encpos = 0;
 80050de:	4a83      	ldr	r2, [pc, #524]	; (80052ec <keypad_sm+0x884>)
				encmode = 0;
 80050e0:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 80050e2:	7013      	strb	r3, [r2, #0]
}
 80050e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			kpenum = A2;
 80050e8:	2304      	movs	r3, #4
	while(keypaditerator < 4){
 80050ea:	4d7d      	ldr	r5, [pc, #500]	; (80052e0 <keypad_sm+0x878>)
			kpenum = A2;
 80050ec:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 80050ee:	f995 1000 	ldrsb.w	r1, [r5]
 80050f2:	2903      	cmp	r1, #3
 80050f4:	f73f acdf 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80050f8:	4b7a      	ldr	r3, [pc, #488]	; (80052e4 <keypad_sm+0x87c>)
 80050fa:	4e7b      	ldr	r6, [pc, #492]	; (80052e8 <keypad_sm+0x880>)
			keypadarr[0] = num;
 80050fc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005100:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005104:	f896 e000 	ldrb.w	lr, [r6]
 8005108:	f893 c003 	ldrb.w	ip, [r3, #3]
 800510c:	789f      	ldrb	r7, [r3, #2]
 800510e:	785c      	ldrb	r4, [r3, #1]
 8005110:	7818      	ldrb	r0, [r3, #0]
 8005112:	b2c9      	uxtb	r1, r1
 8005114:	e003      	b.n	800511e <keypad_sm+0x6b6>
	while(keypaditerator < 4){
 8005116:	46bc      	mov	ip, r7
 8005118:	4627      	mov	r7, r4
 800511a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800511c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800511e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005120:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005124:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005126:	bf04      	itt	eq
 8005128:	f04f 0e00 	moveq.w	lr, #0
 800512c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800512e:	2904      	cmp	r1, #4
 8005130:	46e0      	mov	r8, ip
 8005132:	d1f0      	bne.n	8005116 <keypad_sm+0x6ae>
 8005134:	7029      	strb	r1, [r5, #0]
 8005136:	f883 c004 	strb.w	ip, [r3, #4]
 800513a:	70df      	strb	r7, [r3, #3]
 800513c:	709c      	strb	r4, [r3, #2]
 800513e:	7058      	strb	r0, [r3, #1]
 8005140:	f883 9000 	strb.w	r9, [r3]
 8005144:	2a00      	cmp	r2, #0
 8005146:	f43f acb6 	beq.w	8004ab6 <keypad_sm+0x4e>
 800514a:	f886 e000 	strb.w	lr, [r6]
 800514e:	e4b2      	b.n	8004ab6 <keypad_sm+0x4e>
		if(encmode){
 8005150:	4f67      	ldr	r7, [pc, #412]	; (80052f0 <keypad_sm+0x888>)
 8005152:	783a      	ldrb	r2, [r7, #0]
 8005154:	2a00      	cmp	r2, #0
 8005156:	f000 80f5 	beq.w	8005344 <keypad_sm+0x8dc>
			if(num == 'A'){
 800515a:	2841      	cmp	r0, #65	; 0x41
 800515c:	f000 8326 	beq.w	80057ac <keypad_sm+0xd44>
			else if(num == 'B'){
 8005160:	2842      	cmp	r0, #66	; 0x42
 8005162:	f000 852c 	beq.w	8005bbe <keypad_sm+0x1156>
			else if(num == 'C'){
 8005166:	2843      	cmp	r0, #67	; 0x43
 8005168:	f000 86bd 	beq.w	8005ee6 <keypad_sm+0x147e>
			else if(num == 'D'){
 800516c:	2844      	cmp	r0, #68	; 0x44
 800516e:	f000 87fe 	beq.w	800616e <keypad_sm+0x1706>
			else if(num == '.'){
 8005172:	282e      	cmp	r0, #46	; 0x2e
 8005174:	f001 8168 	beq.w	8006448 <keypad_sm+0x19e0>
			else if(num >= '0' && num <= '9'){
 8005178:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800517c:	2b09      	cmp	r3, #9
 800517e:	f201 819c 	bhi.w	80064ba <keypad_sm+0x1a52>
	while(keypaditerator < 4){
 8005182:	4d57      	ldr	r5, [pc, #348]	; (80052e0 <keypad_sm+0x878>)
 8005184:	f995 2000 	ldrsb.w	r2, [r5]
 8005188:	2a03      	cmp	r2, #3
 800518a:	dca7      	bgt.n	80050dc <keypad_sm+0x674>
 800518c:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <keypad_sm+0x87c>)
 800518e:	4e56      	ldr	r6, [pc, #344]	; (80052e8 <keypad_sm+0x880>)
 8005190:	3201      	adds	r2, #1
 8005192:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005196:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800519a:	f893 9004 	ldrb.w	r9, [r3, #4]
 800519e:	f896 e000 	ldrb.w	lr, [r6]
 80051a2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80051a6:	789c      	ldrb	r4, [r3, #2]
 80051a8:	7858      	ldrb	r0, [r3, #1]
 80051aa:	7819      	ldrb	r1, [r3, #0]
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	e003      	b.n	80051b8 <keypad_sm+0x750>
	while(keypaditerator < 4){
 80051b0:	46a4      	mov	ip, r4
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80051b6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80051b8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80051ba:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80051be:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80051c0:	bf04      	itt	eq
 80051c2:	f04f 0801 	moveq.w	r8, #1
 80051c6:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80051ca:	2a05      	cmp	r2, #5
 80051cc:	46e1      	mov	r9, ip
 80051ce:	d1ef      	bne.n	80051b0 <keypad_sm+0x748>
 80051d0:	f883 c004 	strb.w	ip, [r3, #4]
 80051d4:	70dc      	strb	r4, [r3, #3]
 80051d6:	7098      	strb	r0, [r3, #2]
 80051d8:	7059      	strb	r1, [r3, #1]
 80051da:	f883 a000 	strb.w	sl, [r3]
 80051de:	2304      	movs	r3, #4
 80051e0:	702b      	strb	r3, [r5, #0]
 80051e2:	f1b8 0f00 	cmp.w	r8, #0
 80051e6:	f43f af79 	beq.w	80050dc <keypad_sm+0x674>
 80051ea:	f886 e000 	strb.w	lr, [r6]
 80051ee:	e775      	b.n	80050dc <keypad_sm+0x674>
			if(chstat_aux_rx){
 80051f0:	4b40      	ldr	r3, [pc, #256]	; (80052f4 <keypad_sm+0x88c>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80da 	beq.w	80053ae <keypad_sm+0x946>
				chstat_aux_tx = 0;
 80051fa:	4b3f      	ldr	r3, [pc, #252]	; (80052f8 <keypad_sm+0x890>)
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e45a      	b.n	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8005200:	f7fe ff6a 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005204:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005206:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005208:	f7fb ff86 	bl	8001118 <__aeabi_fcmpge>
 800520c:	b130      	cbz	r0, 800521c <keypad_sm+0x7b4>
 800520e:	4628      	mov	r0, r5
 8005210:	493a      	ldr	r1, [pc, #232]	; (80052fc <keypad_sm+0x894>)
 8005212:	f7fb ff77 	bl	8001104 <__aeabi_fcmple>
 8005216:	b108      	cbz	r0, 800521c <keypad_sm+0x7b4>
					volt_set_aux = translate_keypad();
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <keypad_sm+0x898>)
 800521a:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 800521c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005220:	4d2f      	ldr	r5, [pc, #188]	; (80052e0 <keypad_sm+0x878>)
				kpenum = WAIT;
 8005222:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005226:	f995 2000 	ldrsb.w	r2, [r5]
 800522a:	2a03      	cmp	r2, #3
 800522c:	f73f af56 	bgt.w	80050dc <keypad_sm+0x674>
 8005230:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <keypad_sm+0x87c>)
 8005232:	4e2d      	ldr	r6, [pc, #180]	; (80052e8 <keypad_sm+0x880>)
 8005234:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005236:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800523a:	f893 9004 	ldrb.w	r9, [r3, #4]
 800523e:	f896 8000 	ldrb.w	r8, [r6]
 8005242:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005246:	789c      	ldrb	r4, [r3, #2]
 8005248:	7858      	ldrb	r0, [r3, #1]
 800524a:	7819      	ldrb	r1, [r3, #0]
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	e003      	b.n	8005258 <keypad_sm+0x7f0>
	while(keypaditerator < 4){
 8005250:	46a4      	mov	ip, r4
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005256:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005258:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800525a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800525e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005260:	bf04      	itt	eq
 8005262:	f04f 0e01 	moveq.w	lr, #1
 8005266:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800526a:	2a05      	cmp	r2, #5
 800526c:	46e1      	mov	r9, ip
 800526e:	d1ef      	bne.n	8005250 <keypad_sm+0x7e8>
 8005270:	f883 c004 	strb.w	ip, [r3, #4]
 8005274:	70dc      	strb	r4, [r3, #3]
 8005276:	7098      	strb	r0, [r3, #2]
 8005278:	7059      	strb	r1, [r3, #1]
 800527a:	f883 a000 	strb.w	sl, [r3]
 800527e:	2304      	movs	r3, #4
 8005280:	702b      	strb	r3, [r5, #0]
 8005282:	f1be 0f00 	cmp.w	lr, #0
 8005286:	f43f af29 	beq.w	80050dc <keypad_sm+0x674>
 800528a:	f886 8000 	strb.w	r8, [r6]
 800528e:	e725      	b.n	80050dc <keypad_sm+0x674>
	float temp = translate_keypad();
 8005290:	f7fe ff22 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005294:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005296:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005298:	f7fb ff3e 	bl	8001118 <__aeabi_fcmpge>
 800529c:	b130      	cbz	r0, 80052ac <keypad_sm+0x844>
 800529e:	4628      	mov	r0, r5
 80052a0:	4916      	ldr	r1, [pc, #88]	; (80052fc <keypad_sm+0x894>)
 80052a2:	f7fb ff2f 	bl	8001104 <__aeabi_fcmple>
 80052a6:	b108      	cbz	r0, 80052ac <keypad_sm+0x844>
					volt_set_aux = translate_keypad();
 80052a8:	4b15      	ldr	r3, [pc, #84]	; (8005300 <keypad_sm+0x898>)
 80052aa:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80052ac:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 80052b0:	4d0b      	ldr	r5, [pc, #44]	; (80052e0 <keypad_sm+0x878>)
				kpenum = WAIT;
 80052b2:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 80052b6:	f995 2000 	ldrsb.w	r2, [r5]
 80052ba:	2a03      	cmp	r2, #3
 80052bc:	f73f abfb 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80052c0:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <keypad_sm+0x87c>)
 80052c2:	4e09      	ldr	r6, [pc, #36]	; (80052e8 <keypad_sm+0x880>)
 80052c4:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80052c6:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80052ca:	f893 8004 	ldrb.w	r8, [r3, #4]
 80052ce:	f896 e000 	ldrb.w	lr, [r6]
 80052d2:	78df      	ldrb	r7, [r3, #3]
 80052d4:	789c      	ldrb	r4, [r3, #2]
 80052d6:	7858      	ldrb	r0, [r3, #1]
 80052d8:	7819      	ldrb	r1, [r3, #0]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	e016      	b.n	800530c <keypad_sm+0x8a4>
 80052de:	bf00      	nop
 80052e0:	2000000d 	.word	0x2000000d
 80052e4:	20000008 	.word	0x20000008
 80052e8:	2000074c 	.word	0x2000074c
 80052ec:	200003f5 	.word	0x200003f5
 80052f0:	200003f4 	.word	0x200003f4
 80052f4:	200003e9 	.word	0x200003e9
 80052f8:	200003ea 	.word	0x200003ea
 80052fc:	41400000 	.word	0x41400000
 8005300:	20000a70 	.word	0x20000a70
	while(keypaditerator < 4){
 8005304:	4627      	mov	r7, r4
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800530a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800530c:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800530e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005312:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005314:	bf04      	itt	eq
 8005316:	f04f 0e00 	moveq.w	lr, #0
 800531a:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 800531e:	2a05      	cmp	r2, #5
 8005320:	46b8      	mov	r8, r7
 8005322:	d1ef      	bne.n	8005304 <keypad_sm+0x89c>
 8005324:	711f      	strb	r7, [r3, #4]
 8005326:	70dc      	strb	r4, [r3, #3]
 8005328:	7098      	strb	r0, [r3, #2]
 800532a:	7059      	strb	r1, [r3, #1]
 800532c:	f883 9000 	strb.w	r9, [r3]
 8005330:	2304      	movs	r3, #4
 8005332:	702b      	strb	r3, [r5, #0]
 8005334:	f1bc 0f00 	cmp.w	ip, #0
 8005338:	f43f abbd 	beq.w	8004ab6 <keypad_sm+0x4e>
 800533c:	f886 e000 	strb.w	lr, [r6]
 8005340:	f7ff bbb9 	b.w	8004ab6 <keypad_sm+0x4e>
			if(num == 'A'){
 8005344:	2841      	cmp	r0, #65	; 0x41
 8005346:	f000 834d 	beq.w	80059e4 <keypad_sm+0xf7c>
			else if(num == 'B'){
 800534a:	2842      	cmp	r0, #66	; 0x42
 800534c:	f000 8401 	beq.w	8005b52 <keypad_sm+0x10ea>
			else if(num == 'C'){
 8005350:	2843      	cmp	r0, #67	; 0x43
 8005352:	f000 8590 	beq.w	8005e76 <keypad_sm+0x140e>
			else if(num == 'D'){
 8005356:	2844      	cmp	r0, #68	; 0x44
 8005358:	f000 86ba 	beq.w	80060d0 <keypad_sm+0x1668>
			else if(num == '.'){
 800535c:	282e      	cmp	r0, #46	; 0x2e
 800535e:	f000 819c 	beq.w	800569a <keypad_sm+0xc32>
			else if(num >= '0' && num <= '9'){
 8005362:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005366:	2b09      	cmp	r3, #9
 8005368:	f240 8198 	bls.w	800569c <keypad_sm+0xc34>
			else if(num == '#'){
 800536c:	2823      	cmp	r0, #35	; 0x23
 800536e:	f001 8144 	beq.w	80065fa <keypad_sm+0x1b92>
			else if(num == '+'){
 8005372:	282b      	cmp	r0, #43	; 0x2b
 8005374:	f001 83d8 	beq.w	8006b28 <keypad_sm+0x20c0>
			else if(num == '-'){
 8005378:	282d      	cmp	r0, #45	; 0x2d
 800537a:	f001 84ef 	beq.w	8006d5c <keypad_sm+0x22f4>
			else if(num == 's'){
 800537e:	2873      	cmp	r0, #115	; 0x73
 8005380:	f001 84ae 	beq.w	8006ce0 <keypad_sm+0x2278>
			else if(num == '['){
 8005384:	285b      	cmp	r0, #91	; 0x5b
 8005386:	f001 86b4 	beq.w	80070f2 <keypad_sm+0x268a>
			else if(num == ']'){
 800538a:	285d      	cmp	r0, #93	; 0x5d
 800538c:	f001 8660 	beq.w	8007050 <keypad_sm+0x25e8>
			else if(num == '*'){
 8005390:	282a      	cmp	r0, #42	; 0x2a
 8005392:	f001 8655 	beq.w	8007040 <keypad_sm+0x25d8>
			else if(num == '/'){
 8005396:	282f      	cmp	r0, #47	; 0x2f
 8005398:	f47f ab8d 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 800539c:	4bc4      	ldr	r3, [pc, #784]	; (80056b0 <keypad_sm+0xc48>)
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	2a00      	cmp	r2, #0
 80053a2:	f001 86d5 	beq.w	8007150 <keypad_sm+0x26e8>
					chstat_main = 0;
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	f7ff bb84 	b.w	8004ab6 <keypad_sm+0x4e>
				chstat_aux_tx = 1;
 80053ae:	2201      	movs	r2, #1
 80053b0:	4bc0      	ldr	r3, [pc, #768]	; (80056b4 <keypad_sm+0xc4c>)
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	f7ff bb7f 	b.w	8004ab6 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 80053b8:	4dbf      	ldr	r5, [pc, #764]	; (80056b8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80053ba:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80053bc:	f995 1000 	ldrsb.w	r1, [r5]
 80053c0:	2903      	cmp	r1, #3
 80053c2:	f73f ab78 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80053c6:	4bbd      	ldr	r3, [pc, #756]	; (80056bc <keypad_sm+0xc54>)
 80053c8:	4ebd      	ldr	r6, [pc, #756]	; (80056c0 <keypad_sm+0xc58>)
 80053ca:	3101      	adds	r1, #1
			keypadarr[0] = num;
 80053cc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80053d0:	f893 8004 	ldrb.w	r8, [r3, #4]
 80053d4:	f896 e000 	ldrb.w	lr, [r6]
 80053d8:	f893 c003 	ldrb.w	ip, [r3, #3]
 80053dc:	789f      	ldrb	r7, [r3, #2]
 80053de:	785c      	ldrb	r4, [r3, #1]
 80053e0:	7818      	ldrb	r0, [r3, #0]
 80053e2:	b2c9      	uxtb	r1, r1
 80053e4:	e003      	b.n	80053ee <keypad_sm+0x986>
	while(keypaditerator < 4){
 80053e6:	46bc      	mov	ip, r7
 80053e8:	4627      	mov	r7, r4
 80053ea:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80053ec:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80053ee:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80053f0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80053f4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80053f6:	bf04      	itt	eq
 80053f8:	f04f 0e00 	moveq.w	lr, #0
 80053fc:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80053fe:	2905      	cmp	r1, #5
 8005400:	46e0      	mov	r8, ip
 8005402:	d1f0      	bne.n	80053e6 <keypad_sm+0x97e>
 8005404:	f883 c004 	strb.w	ip, [r3, #4]
 8005408:	70df      	strb	r7, [r3, #3]
 800540a:	709c      	strb	r4, [r3, #2]
 800540c:	7058      	strb	r0, [r3, #1]
 800540e:	f883 9000 	strb.w	r9, [r3]
 8005412:	2304      	movs	r3, #4
 8005414:	702b      	strb	r3, [r5, #0]
 8005416:	2a00      	cmp	r2, #0
 8005418:	f43f ab4d 	beq.w	8004ab6 <keypad_sm+0x4e>
 800541c:	f886 e000 	strb.w	lr, [r6]
 8005420:	f7ff bb49 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005424:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005428:	4da3      	ldr	r5, [pc, #652]	; (80056b8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800542a:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800542e:	f995 2000 	ldrsb.w	r2, [r5]
 8005432:	2a03      	cmp	r2, #3
 8005434:	f73f ae52 	bgt.w	80050dc <keypad_sm+0x674>
 8005438:	4ba0      	ldr	r3, [pc, #640]	; (80056bc <keypad_sm+0xc54>)
 800543a:	4ea1      	ldr	r6, [pc, #644]	; (80056c0 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 800543c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005440:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005444:	f896 8000 	ldrb.w	r8, [r6]
 8005448:	f893 c003 	ldrb.w	ip, [r3, #3]
 800544c:	789c      	ldrb	r4, [r3, #2]
 800544e:	7858      	ldrb	r0, [r3, #1]
 8005450:	7819      	ldrb	r1, [r3, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	e003      	b.n	800545e <keypad_sm+0x9f6>
	while(keypaditerator < 4){
 8005456:	46a4      	mov	ip, r4
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800545c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800545e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005460:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005464:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005466:	bf04      	itt	eq
 8005468:	f04f 0e01 	moveq.w	lr, #1
 800546c:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005470:	2a04      	cmp	r2, #4
 8005472:	46e1      	mov	r9, ip
 8005474:	d1ef      	bne.n	8005456 <keypad_sm+0x9ee>
 8005476:	702a      	strb	r2, [r5, #0]
 8005478:	f883 c004 	strb.w	ip, [r3, #4]
 800547c:	70dc      	strb	r4, [r3, #3]
 800547e:	7098      	strb	r0, [r3, #2]
 8005480:	7059      	strb	r1, [r3, #1]
 8005482:	f883 a000 	strb.w	sl, [r3]
 8005486:	f1be 0f00 	cmp.w	lr, #0
 800548a:	f43f ae27 	beq.w	80050dc <keypad_sm+0x674>
 800548e:	f886 8000 	strb.w	r8, [r6]
 8005492:	e623      	b.n	80050dc <keypad_sm+0x674>
	float temp = translate_keypad();
 8005494:	f7fe fe20 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005498:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800549a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800549c:	f7fb fe3c 	bl	8001118 <__aeabi_fcmpge>
 80054a0:	b150      	cbz	r0, 80054b8 <keypad_sm+0xa50>
 80054a2:	4628      	mov	r0, r5
 80054a4:	f7fa ffd8 	bl	8000458 <__aeabi_f2d>
 80054a8:	a37f      	add	r3, pc, #508	; (adr r3, 80056a8 <keypad_sm+0xc40>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fb faa7 	bl	8000a00 <__aeabi_dcmple>
 80054b2:	b108      	cbz	r0, 80054b8 <keypad_sm+0xa50>
					amp_set_aux = translate_keypad();
 80054b4:	4b83      	ldr	r3, [pc, #524]	; (80056c4 <keypad_sm+0xc5c>)
 80054b6:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80054b8:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 80054bc:	4d7e      	ldr	r5, [pc, #504]	; (80056b8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80054be:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 80054c2:	f995 2000 	ldrsb.w	r2, [r5]
 80054c6:	2a03      	cmp	r2, #3
 80054c8:	f73f aaf5 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80054cc:	4b7b      	ldr	r3, [pc, #492]	; (80056bc <keypad_sm+0xc54>)
 80054ce:	4e7c      	ldr	r6, [pc, #496]	; (80056c0 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 80054d0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80054d4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80054d8:	f896 e000 	ldrb.w	lr, [r6]
 80054dc:	78df      	ldrb	r7, [r3, #3]
 80054de:	789c      	ldrb	r4, [r3, #2]
 80054e0:	7858      	ldrb	r0, [r3, #1]
 80054e2:	7819      	ldrb	r1, [r3, #0]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	e003      	b.n	80054f0 <keypad_sm+0xa88>
	while(keypaditerator < 4){
 80054e8:	4627      	mov	r7, r4
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80054ee:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80054f0:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80054f2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80054f6:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80054f8:	bf04      	itt	eq
 80054fa:	f04f 0e00 	moveq.w	lr, #0
 80054fe:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005502:	2a04      	cmp	r2, #4
 8005504:	46b8      	mov	r8, r7
 8005506:	d1ef      	bne.n	80054e8 <keypad_sm+0xa80>
 8005508:	702a      	strb	r2, [r5, #0]
 800550a:	711f      	strb	r7, [r3, #4]
 800550c:	70dc      	strb	r4, [r3, #3]
 800550e:	7098      	strb	r0, [r3, #2]
 8005510:	7059      	strb	r1, [r3, #1]
 8005512:	f883 9000 	strb.w	r9, [r3]
 8005516:	f1bc 0f00 	cmp.w	ip, #0
 800551a:	f43f aacc 	beq.w	8004ab6 <keypad_sm+0x4e>
 800551e:	f886 e000 	strb.w	lr, [r6]
 8005522:	f7ff bac8 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8005526:	f7fe fdd7 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800552a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800552c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800552e:	f7fb fdf3 	bl	8001118 <__aeabi_fcmpge>
 8005532:	b130      	cbz	r0, 8005542 <keypad_sm+0xada>
 8005534:	4628      	mov	r0, r5
 8005536:	4964      	ldr	r1, [pc, #400]	; (80056c8 <keypad_sm+0xc60>)
 8005538:	f7fb fde4 	bl	8001104 <__aeabi_fcmple>
 800553c:	b108      	cbz	r0, 8005542 <keypad_sm+0xada>
					amp_set_aux = translate_keypad();
 800553e:	4b61      	ldr	r3, [pc, #388]	; (80056c4 <keypad_sm+0xc5c>)
 8005540:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005542:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005546:	4d5c      	ldr	r5, [pc, #368]	; (80056b8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 8005548:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800554c:	f995 2000 	ldrsb.w	r2, [r5]
 8005550:	2a03      	cmp	r2, #3
 8005552:	f73f adc3 	bgt.w	80050dc <keypad_sm+0x674>
 8005556:	4b59      	ldr	r3, [pc, #356]	; (80056bc <keypad_sm+0xc54>)
 8005558:	4e59      	ldr	r6, [pc, #356]	; (80056c0 <keypad_sm+0xc58>)
 800555a:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800555c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005560:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005564:	f896 9000 	ldrb.w	r9, [r6]
 8005568:	f893 c003 	ldrb.w	ip, [r3, #3]
 800556c:	789c      	ldrb	r4, [r3, #2]
 800556e:	7858      	ldrb	r0, [r3, #1]
 8005570:	7819      	ldrb	r1, [r3, #0]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	e003      	b.n	800557e <keypad_sm+0xb16>
	while(keypaditerator < 4){
 8005576:	46a4      	mov	ip, r4
 8005578:	4604      	mov	r4, r0
 800557a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800557c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800557e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005580:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005584:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005586:	bf04      	itt	eq
 8005588:	f04f 0e01 	moveq.w	lr, #1
 800558c:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005590:	2a05      	cmp	r2, #5
 8005592:	46e0      	mov	r8, ip
 8005594:	d1ef      	bne.n	8005576 <keypad_sm+0xb0e>
 8005596:	f883 c004 	strb.w	ip, [r3, #4]
 800559a:	70dc      	strb	r4, [r3, #3]
 800559c:	7098      	strb	r0, [r3, #2]
 800559e:	7059      	strb	r1, [r3, #1]
 80055a0:	f883 a000 	strb.w	sl, [r3]
 80055a4:	2304      	movs	r3, #4
 80055a6:	702b      	strb	r3, [r5, #0]
 80055a8:	f1be 0f00 	cmp.w	lr, #0
 80055ac:	f43f ad96 	beq.w	80050dc <keypad_sm+0x674>
 80055b0:	f886 9000 	strb.w	r9, [r6]
 80055b4:	e592      	b.n	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 80055b6:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80055ba:	4d3f      	ldr	r5, [pc, #252]	; (80056b8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80055bc:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80055c0:	f995 2000 	ldrsb.w	r2, [r5]
 80055c4:	2a03      	cmp	r2, #3
 80055c6:	f73f ad89 	bgt.w	80050dc <keypad_sm+0x674>
 80055ca:	4b3c      	ldr	r3, [pc, #240]	; (80056bc <keypad_sm+0xc54>)
 80055cc:	4e3c      	ldr	r6, [pc, #240]	; (80056c0 <keypad_sm+0xc58>)
 80055ce:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80055d0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80055d4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80055d8:	f896 9000 	ldrb.w	r9, [r6]
 80055dc:	f893 c003 	ldrb.w	ip, [r3, #3]
 80055e0:	789c      	ldrb	r4, [r3, #2]
 80055e2:	7858      	ldrb	r0, [r3, #1]
 80055e4:	7819      	ldrb	r1, [r3, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	e003      	b.n	80055f2 <keypad_sm+0xb8a>
	while(keypaditerator < 4){
 80055ea:	46a4      	mov	ip, r4
 80055ec:	4604      	mov	r4, r0
 80055ee:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80055f0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80055f2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80055f4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80055f8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80055fa:	bf04      	itt	eq
 80055fc:	f04f 0e01 	moveq.w	lr, #1
 8005600:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005604:	2a05      	cmp	r2, #5
 8005606:	46e0      	mov	r8, ip
 8005608:	d1ef      	bne.n	80055ea <keypad_sm+0xb82>
 800560a:	f883 c004 	strb.w	ip, [r3, #4]
 800560e:	70dc      	strb	r4, [r3, #3]
 8005610:	7098      	strb	r0, [r3, #2]
 8005612:	7059      	strb	r1, [r3, #1]
 8005614:	f883 a000 	strb.w	sl, [r3]
 8005618:	2304      	movs	r3, #4
 800561a:	702b      	strb	r3, [r5, #0]
 800561c:	f1be 0f00 	cmp.w	lr, #0
 8005620:	f43f ad5c 	beq.w	80050dc <keypad_sm+0x674>
 8005624:	f886 9000 	strb.w	r9, [r6]
 8005628:	e558      	b.n	80050dc <keypad_sm+0x674>
 800562a:	4d23      	ldr	r5, [pc, #140]	; (80056b8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800562c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800562e:	f995 1000 	ldrsb.w	r1, [r5]
 8005632:	2903      	cmp	r1, #3
 8005634:	f73f aa3f 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005638:	4b20      	ldr	r3, [pc, #128]	; (80056bc <keypad_sm+0xc54>)
 800563a:	4e21      	ldr	r6, [pc, #132]	; (80056c0 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 800563c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005640:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005644:	f896 e000 	ldrb.w	lr, [r6]
 8005648:	f893 c003 	ldrb.w	ip, [r3, #3]
 800564c:	789f      	ldrb	r7, [r3, #2]
 800564e:	785c      	ldrb	r4, [r3, #1]
 8005650:	7818      	ldrb	r0, [r3, #0]
 8005652:	b2c9      	uxtb	r1, r1
 8005654:	e003      	b.n	800565e <keypad_sm+0xbf6>
	while(keypaditerator < 4){
 8005656:	46bc      	mov	ip, r7
 8005658:	4627      	mov	r7, r4
 800565a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800565c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800565e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005660:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005664:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005666:	bf04      	itt	eq
 8005668:	f04f 0e00 	moveq.w	lr, #0
 800566c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800566e:	2904      	cmp	r1, #4
 8005670:	46e0      	mov	r8, ip
 8005672:	d1f0      	bne.n	8005656 <keypad_sm+0xbee>
 8005674:	7029      	strb	r1, [r5, #0]
 8005676:	f883 c004 	strb.w	ip, [r3, #4]
 800567a:	70df      	strb	r7, [r3, #3]
 800567c:	709c      	strb	r4, [r3, #2]
 800567e:	7058      	strb	r0, [r3, #1]
 8005680:	f883 9000 	strb.w	r9, [r3]
 8005684:	2a00      	cmp	r2, #0
 8005686:	f43f aa16 	beq.w	8004ab6 <keypad_sm+0x4e>
 800568a:	f886 e000 	strb.w	lr, [r6]
 800568e:	f7ff ba12 	b.w	8004ab6 <keypad_sm+0x4e>
				chstat_main = 1;
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	f7ff ba0e 	b.w	8004ab6 <keypad_sm+0x4e>
	if(num == 'z'){
 800569a:	202e      	movs	r0, #46	; 0x2e
}
 800569c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	f7fb bfda 	b.w	8001658 <update_keypad.part.0>
 80056a4:	f3af 8000 	nop.w
 80056a8:	50b0f27c 	.word	0x50b0f27c
 80056ac:	3fe99a6b 	.word	0x3fe99a6b
 80056b0:	200003eb 	.word	0x200003eb
 80056b4:	200003ea 	.word	0x200003ea
 80056b8:	2000000d 	.word	0x2000000d
 80056bc:	20000008 	.word	0x20000008
 80056c0:	2000074c 	.word	0x2000074c
 80056c4:	200003e0 	.word	0x200003e0
 80056c8:	41400000 	.word	0x41400000
	while(keypaditerator < 4){
 80056cc:	4dc2      	ldr	r5, [pc, #776]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 80056ce:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80056d0:	f995 1000 	ldrsb.w	r1, [r5]
 80056d4:	2903      	cmp	r1, #3
 80056d6:	f73f a9ee 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80056da:	4bc0      	ldr	r3, [pc, #768]	; (80059dc <keypad_sm+0xf74>)
 80056dc:	4ec0      	ldr	r6, [pc, #768]	; (80059e0 <keypad_sm+0xf78>)
 80056de:	3101      	adds	r1, #1
			keypadarr[0] = num;
 80056e0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80056e4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80056e8:	f896 e000 	ldrb.w	lr, [r6]
 80056ec:	f893 c003 	ldrb.w	ip, [r3, #3]
 80056f0:	789f      	ldrb	r7, [r3, #2]
 80056f2:	785c      	ldrb	r4, [r3, #1]
 80056f4:	7818      	ldrb	r0, [r3, #0]
 80056f6:	b2c9      	uxtb	r1, r1
 80056f8:	e003      	b.n	8005702 <keypad_sm+0xc9a>
	while(keypaditerator < 4){
 80056fa:	46bc      	mov	ip, r7
 80056fc:	4627      	mov	r7, r4
 80056fe:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005700:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005702:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005704:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005708:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800570a:	bf04      	itt	eq
 800570c:	f04f 0e00 	moveq.w	lr, #0
 8005710:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005712:	2905      	cmp	r1, #5
 8005714:	46e0      	mov	r8, ip
 8005716:	d1f0      	bne.n	80056fa <keypad_sm+0xc92>
 8005718:	f883 c004 	strb.w	ip, [r3, #4]
 800571c:	70df      	strb	r7, [r3, #3]
 800571e:	709c      	strb	r4, [r3, #2]
 8005720:	7058      	strb	r0, [r3, #1]
 8005722:	f883 9000 	strb.w	r9, [r3]
 8005726:	2304      	movs	r3, #4
 8005728:	702b      	strb	r3, [r5, #0]
 800572a:	2a00      	cmp	r2, #0
 800572c:	f43f a9c3 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005730:	f886 e000 	strb.w	lr, [r6]
 8005734:	f7ff b9bf 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005738:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800573c:	4da6      	ldr	r5, [pc, #664]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 800573e:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005742:	f995 2000 	ldrsb.w	r2, [r5]
 8005746:	2a03      	cmp	r2, #3
 8005748:	f73f acc8 	bgt.w	80050dc <keypad_sm+0x674>
 800574c:	4ba3      	ldr	r3, [pc, #652]	; (80059dc <keypad_sm+0xf74>)
 800574e:	4ea4      	ldr	r6, [pc, #656]	; (80059e0 <keypad_sm+0xf78>)
 8005750:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005752:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005756:	f893 8004 	ldrb.w	r8, [r3, #4]
 800575a:	f896 9000 	ldrb.w	r9, [r6]
 800575e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005762:	789c      	ldrb	r4, [r3, #2]
 8005764:	7858      	ldrb	r0, [r3, #1]
 8005766:	7819      	ldrb	r1, [r3, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	e003      	b.n	8005774 <keypad_sm+0xd0c>
	while(keypaditerator < 4){
 800576c:	46a4      	mov	ip, r4
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005772:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005774:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005776:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800577a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800577c:	bf04      	itt	eq
 800577e:	f04f 0e01 	moveq.w	lr, #1
 8005782:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005786:	2a05      	cmp	r2, #5
 8005788:	46e0      	mov	r8, ip
 800578a:	d1ef      	bne.n	800576c <keypad_sm+0xd04>
 800578c:	f883 c004 	strb.w	ip, [r3, #4]
 8005790:	70dc      	strb	r4, [r3, #3]
 8005792:	7098      	strb	r0, [r3, #2]
 8005794:	7059      	strb	r1, [r3, #1]
 8005796:	f883 a000 	strb.w	sl, [r3]
 800579a:	2304      	movs	r3, #4
 800579c:	702b      	strb	r3, [r5, #0]
 800579e:	f1be 0f00 	cmp.w	lr, #0
 80057a2:	f43f ac9b 	beq.w	80050dc <keypad_sm+0x674>
 80057a6:	f886 9000 	strb.w	r9, [r6]
 80057aa:	e497      	b.n	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 80057ac:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80057b0:	4d89      	ldr	r5, [pc, #548]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 80057b2:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80057b6:	f995 2000 	ldrsb.w	r2, [r5]
 80057ba:	2a03      	cmp	r2, #3
 80057bc:	f73f ac8e 	bgt.w	80050dc <keypad_sm+0x674>
 80057c0:	4b86      	ldr	r3, [pc, #536]	; (80059dc <keypad_sm+0xf74>)
 80057c2:	4e87      	ldr	r6, [pc, #540]	; (80059e0 <keypad_sm+0xf78>)
			keypadarr[0] = num;
 80057c4:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80057c8:	f893 9004 	ldrb.w	r9, [r3, #4]
 80057cc:	f896 8000 	ldrb.w	r8, [r6]
 80057d0:	f893 c003 	ldrb.w	ip, [r3, #3]
 80057d4:	789c      	ldrb	r4, [r3, #2]
 80057d6:	7858      	ldrb	r0, [r3, #1]
 80057d8:	7819      	ldrb	r1, [r3, #0]
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	e003      	b.n	80057e6 <keypad_sm+0xd7e>
	while(keypaditerator < 4){
 80057de:	46a4      	mov	ip, r4
 80057e0:	4604      	mov	r4, r0
 80057e2:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80057e4:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80057e6:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80057e8:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80057ec:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80057ee:	bf04      	itt	eq
 80057f0:	f04f 0e01 	moveq.w	lr, #1
 80057f4:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80057f8:	2a04      	cmp	r2, #4
 80057fa:	46e1      	mov	r9, ip
 80057fc:	d1ef      	bne.n	80057de <keypad_sm+0xd76>
 80057fe:	702a      	strb	r2, [r5, #0]
 8005800:	f883 c004 	strb.w	ip, [r3, #4]
 8005804:	70dc      	strb	r4, [r3, #3]
 8005806:	7098      	strb	r0, [r3, #2]
 8005808:	7059      	strb	r1, [r3, #1]
 800580a:	f883 a000 	strb.w	sl, [r3]
 800580e:	f1be 0f00 	cmp.w	lr, #0
 8005812:	f43f ac63 	beq.w	80050dc <keypad_sm+0x674>
 8005816:	f886 8000 	strb.w	r8, [r6]
 800581a:	e45f      	b.n	80050dc <keypad_sm+0x674>
 800581c:	4d6e      	ldr	r5, [pc, #440]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 800581e:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005820:	f995 1000 	ldrsb.w	r1, [r5]
 8005824:	2903      	cmp	r1, #3
 8005826:	f73f a946 	bgt.w	8004ab6 <keypad_sm+0x4e>
 800582a:	4b6c      	ldr	r3, [pc, #432]	; (80059dc <keypad_sm+0xf74>)
 800582c:	4e6c      	ldr	r6, [pc, #432]	; (80059e0 <keypad_sm+0xf78>)
 800582e:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005830:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005834:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005838:	f896 e000 	ldrb.w	lr, [r6]
 800583c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005840:	789f      	ldrb	r7, [r3, #2]
 8005842:	785c      	ldrb	r4, [r3, #1]
 8005844:	7818      	ldrb	r0, [r3, #0]
 8005846:	b2c9      	uxtb	r1, r1
 8005848:	e003      	b.n	8005852 <keypad_sm+0xdea>
	while(keypaditerator < 4){
 800584a:	46bc      	mov	ip, r7
 800584c:	4627      	mov	r7, r4
 800584e:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005850:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005852:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005854:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005858:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800585a:	bf04      	itt	eq
 800585c:	f04f 0e00 	moveq.w	lr, #0
 8005860:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005862:	2905      	cmp	r1, #5
 8005864:	46e0      	mov	r8, ip
 8005866:	d1f0      	bne.n	800584a <keypad_sm+0xde2>
 8005868:	f883 c004 	strb.w	ip, [r3, #4]
 800586c:	70df      	strb	r7, [r3, #3]
 800586e:	709c      	strb	r4, [r3, #2]
 8005870:	7058      	strb	r0, [r3, #1]
 8005872:	f883 9000 	strb.w	r9, [r3]
 8005876:	2304      	movs	r3, #4
 8005878:	702b      	strb	r3, [r5, #0]
 800587a:	2a00      	cmp	r2, #0
 800587c:	f43f a91b 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005880:	f886 e000 	strb.w	lr, [r6]
 8005884:	f7ff b917 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005888:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800588c:	4d52      	ldr	r5, [pc, #328]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 800588e:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005892:	f995 2000 	ldrsb.w	r2, [r5]
 8005896:	2a03      	cmp	r2, #3
 8005898:	f73f ac20 	bgt.w	80050dc <keypad_sm+0x674>
 800589c:	4b4f      	ldr	r3, [pc, #316]	; (80059dc <keypad_sm+0xf74>)
 800589e:	4e50      	ldr	r6, [pc, #320]	; (80059e0 <keypad_sm+0xf78>)
 80058a0:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80058a2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80058a6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80058aa:	f896 8000 	ldrb.w	r8, [r6]
 80058ae:	f893 c003 	ldrb.w	ip, [r3, #3]
 80058b2:	789c      	ldrb	r4, [r3, #2]
 80058b4:	7858      	ldrb	r0, [r3, #1]
 80058b6:	7819      	ldrb	r1, [r3, #0]
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	e003      	b.n	80058c4 <keypad_sm+0xe5c>
	while(keypaditerator < 4){
 80058bc:	46a4      	mov	ip, r4
 80058be:	4604      	mov	r4, r0
 80058c0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80058c2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80058c4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80058c6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80058ca:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80058cc:	bf04      	itt	eq
 80058ce:	f04f 0e01 	moveq.w	lr, #1
 80058d2:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80058d6:	2a05      	cmp	r2, #5
 80058d8:	46e1      	mov	r9, ip
 80058da:	d1ef      	bne.n	80058bc <keypad_sm+0xe54>
 80058dc:	f883 c004 	strb.w	ip, [r3, #4]
 80058e0:	70dc      	strb	r4, [r3, #3]
 80058e2:	7098      	strb	r0, [r3, #2]
 80058e4:	7059      	strb	r1, [r3, #1]
 80058e6:	f883 a000 	strb.w	sl, [r3]
 80058ea:	2304      	movs	r3, #4
 80058ec:	702b      	strb	r3, [r5, #0]
 80058ee:	f1be 0f00 	cmp.w	lr, #0
 80058f2:	f43f abf3 	beq.w	80050dc <keypad_sm+0x674>
 80058f6:	f886 8000 	strb.w	r8, [r6]
 80058fa:	f7ff bbef 	b.w	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 80058fe:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005902:	4d35      	ldr	r5, [pc, #212]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 8005904:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005908:	f995 2000 	ldrsb.w	r2, [r5]
 800590c:	2a03      	cmp	r2, #3
 800590e:	f73f abe5 	bgt.w	80050dc <keypad_sm+0x674>
 8005912:	4b32      	ldr	r3, [pc, #200]	; (80059dc <keypad_sm+0xf74>)
 8005914:	4e32      	ldr	r6, [pc, #200]	; (80059e0 <keypad_sm+0xf78>)
			keypadarr[0] = num;
 8005916:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800591a:	f893 9004 	ldrb.w	r9, [r3, #4]
 800591e:	f896 8000 	ldrb.w	r8, [r6]
 8005922:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005926:	789c      	ldrb	r4, [r3, #2]
 8005928:	7858      	ldrb	r0, [r3, #1]
 800592a:	7819      	ldrb	r1, [r3, #0]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	e003      	b.n	8005938 <keypad_sm+0xed0>
	while(keypaditerator < 4){
 8005930:	46a4      	mov	ip, r4
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005936:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005938:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800593a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800593e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005940:	bf04      	itt	eq
 8005942:	f04f 0e01 	moveq.w	lr, #1
 8005946:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800594a:	2a04      	cmp	r2, #4
 800594c:	46e1      	mov	r9, ip
 800594e:	d1ef      	bne.n	8005930 <keypad_sm+0xec8>
 8005950:	702a      	strb	r2, [r5, #0]
 8005952:	f883 c004 	strb.w	ip, [r3, #4]
 8005956:	70dc      	strb	r4, [r3, #3]
 8005958:	7098      	strb	r0, [r3, #2]
 800595a:	7059      	strb	r1, [r3, #1]
 800595c:	f883 a000 	strb.w	sl, [r3]
 8005960:	f1be 0f00 	cmp.w	lr, #0
 8005964:	f43f abba 	beq.w	80050dc <keypad_sm+0x674>
 8005968:	f886 8000 	strb.w	r8, [r6]
 800596c:	f7ff bbb6 	b.w	80050dc <keypad_sm+0x674>
 8005970:	4d19      	ldr	r5, [pc, #100]	; (80059d8 <keypad_sm+0xf70>)
				kpenum = WAIT;
 8005972:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005974:	f995 1000 	ldrsb.w	r1, [r5]
 8005978:	2903      	cmp	r1, #3
 800597a:	f73f a89c 	bgt.w	8004ab6 <keypad_sm+0x4e>
 800597e:	4b17      	ldr	r3, [pc, #92]	; (80059dc <keypad_sm+0xf74>)
 8005980:	4e17      	ldr	r6, [pc, #92]	; (80059e0 <keypad_sm+0xf78>)
			keypadarr[0] = num;
 8005982:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005986:	f893 8004 	ldrb.w	r8, [r3, #4]
 800598a:	f896 e000 	ldrb.w	lr, [r6]
 800598e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005992:	789f      	ldrb	r7, [r3, #2]
 8005994:	785c      	ldrb	r4, [r3, #1]
 8005996:	7818      	ldrb	r0, [r3, #0]
 8005998:	b2c9      	uxtb	r1, r1
 800599a:	e003      	b.n	80059a4 <keypad_sm+0xf3c>
	while(keypaditerator < 4){
 800599c:	46bc      	mov	ip, r7
 800599e:	4627      	mov	r7, r4
 80059a0:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80059a2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80059a4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80059a6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80059aa:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80059ac:	bf04      	itt	eq
 80059ae:	f04f 0e00 	moveq.w	lr, #0
 80059b2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80059b4:	2904      	cmp	r1, #4
 80059b6:	46e0      	mov	r8, ip
 80059b8:	d1f0      	bne.n	800599c <keypad_sm+0xf34>
 80059ba:	7029      	strb	r1, [r5, #0]
 80059bc:	f883 c004 	strb.w	ip, [r3, #4]
 80059c0:	70df      	strb	r7, [r3, #3]
 80059c2:	709c      	strb	r4, [r3, #2]
 80059c4:	7058      	strb	r0, [r3, #1]
 80059c6:	f883 9000 	strb.w	r9, [r3]
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	f43f a873 	beq.w	8004ab6 <keypad_sm+0x4e>
 80059d0:	f886 e000 	strb.w	lr, [r6]
 80059d4:	f7ff b86f 	b.w	8004ab6 <keypad_sm+0x4e>
 80059d8:	2000000d 	.word	0x2000000d
 80059dc:	20000008 	.word	0x20000008
 80059e0:	2000074c 	.word	0x2000074c
 80059e4:	4dbb      	ldr	r5, [pc, #748]	; (8005cd4 <keypad_sm+0x126c>)
				kpenum = WAIT;
 80059e6:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80059e8:	f995 1000 	ldrsb.w	r1, [r5]
 80059ec:	2903      	cmp	r1, #3
 80059ee:	f73f a862 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80059f2:	4bb9      	ldr	r3, [pc, #740]	; (8005cd8 <keypad_sm+0x1270>)
 80059f4:	4eb9      	ldr	r6, [pc, #740]	; (8005cdc <keypad_sm+0x1274>)
			keypadarr[0] = num;
 80059f6:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80059fa:	f893 8004 	ldrb.w	r8, [r3, #4]
 80059fe:	f896 e000 	ldrb.w	lr, [r6]
 8005a02:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005a06:	789f      	ldrb	r7, [r3, #2]
 8005a08:	785c      	ldrb	r4, [r3, #1]
 8005a0a:	7818      	ldrb	r0, [r3, #0]
 8005a0c:	b2c9      	uxtb	r1, r1
 8005a0e:	e003      	b.n	8005a18 <keypad_sm+0xfb0>
	while(keypaditerator < 4){
 8005a10:	46bc      	mov	ip, r7
 8005a12:	4627      	mov	r7, r4
 8005a14:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005a16:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005a18:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005a1a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005a1e:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005a20:	bf04      	itt	eq
 8005a22:	f04f 0e00 	moveq.w	lr, #0
 8005a26:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005a28:	2904      	cmp	r1, #4
 8005a2a:	46e0      	mov	r8, ip
 8005a2c:	d1f0      	bne.n	8005a10 <keypad_sm+0xfa8>
 8005a2e:	7029      	strb	r1, [r5, #0]
 8005a30:	f883 c004 	strb.w	ip, [r3, #4]
 8005a34:	70df      	strb	r7, [r3, #3]
 8005a36:	709c      	strb	r4, [r3, #2]
 8005a38:	7058      	strb	r0, [r3, #1]
 8005a3a:	f883 9000 	strb.w	r9, [r3]
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	f43f a839 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005a44:	f886 e000 	strb.w	lr, [r6]
 8005a48:	f7ff b835 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8005a4c:	f7fe fb44 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005a50:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005a52:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005a54:	f7fb fb60 	bl	8001118 <__aeabi_fcmpge>
 8005a58:	b158      	cbz	r0, 8005a72 <keypad_sm+0x100a>
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	49a0      	ldr	r1, [pc, #640]	; (8005ce0 <keypad_sm+0x1278>)
 8005a5e:	f7fb fb51 	bl	8001104 <__aeabi_fcmple>
 8005a62:	b130      	cbz	r0, 8005a72 <keypad_sm+0x100a>
					volt_set_main_old = volt_set_main;
 8005a64:	4d9f      	ldr	r5, [pc, #636]	; (8005ce4 <keypad_sm+0x127c>)
 8005a66:	4ba0      	ldr	r3, [pc, #640]	; (8005ce8 <keypad_sm+0x1280>)
 8005a68:	682a      	ldr	r2, [r5, #0]
 8005a6a:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005a6c:	f7fe fb34 	bl	80040d8 <translate_keypad>
 8005a70:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005a72:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005a76:	4d97      	ldr	r5, [pc, #604]	; (8005cd4 <keypad_sm+0x126c>)
				kpenum = WAIT;
 8005a78:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 8005a7c:	f995 2000 	ldrsb.w	r2, [r5]
 8005a80:	2a03      	cmp	r2, #3
 8005a82:	f73f a818 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005a86:	4b94      	ldr	r3, [pc, #592]	; (8005cd8 <keypad_sm+0x1270>)
 8005a88:	4e94      	ldr	r6, [pc, #592]	; (8005cdc <keypad_sm+0x1274>)
			keypadarr[0] = num;
 8005a8a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005a8e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005a92:	f896 e000 	ldrb.w	lr, [r6]
 8005a96:	78df      	ldrb	r7, [r3, #3]
 8005a98:	789c      	ldrb	r4, [r3, #2]
 8005a9a:	7858      	ldrb	r0, [r3, #1]
 8005a9c:	7819      	ldrb	r1, [r3, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	e003      	b.n	8005aaa <keypad_sm+0x1042>
	while(keypaditerator < 4){
 8005aa2:	4627      	mov	r7, r4
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005aa8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005aaa:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005aac:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005ab0:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005ab2:	bf04      	itt	eq
 8005ab4:	f04f 0e00 	moveq.w	lr, #0
 8005ab8:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005abc:	2a04      	cmp	r2, #4
 8005abe:	46b8      	mov	r8, r7
 8005ac0:	d1ef      	bne.n	8005aa2 <keypad_sm+0x103a>
 8005ac2:	702a      	strb	r2, [r5, #0]
 8005ac4:	711f      	strb	r7, [r3, #4]
 8005ac6:	70dc      	strb	r4, [r3, #3]
 8005ac8:	7098      	strb	r0, [r3, #2]
 8005aca:	7059      	strb	r1, [r3, #1]
 8005acc:	f883 9000 	strb.w	r9, [r3]
 8005ad0:	f1bc 0f00 	cmp.w	ip, #0
 8005ad4:	f43e afef 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005ad8:	f886 e000 	strb.w	lr, [r6]
 8005adc:	f7fe bfeb 	b.w	8004ab6 <keypad_sm+0x4e>
 8005ae0:	4d7c      	ldr	r5, [pc, #496]	; (8005cd4 <keypad_sm+0x126c>)
 8005ae2:	f995 2000 	ldrsb.w	r2, [r5]
 8005ae6:	2a03      	cmp	r2, #3
 8005ae8:	f73f aaf8 	bgt.w	80050dc <keypad_sm+0x674>
 8005aec:	4b7a      	ldr	r3, [pc, #488]	; (8005cd8 <keypad_sm+0x1270>)
 8005aee:	4e7b      	ldr	r6, [pc, #492]	; (8005cdc <keypad_sm+0x1274>)
 8005af0:	3201      	adds	r2, #1
 8005af2:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005af6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005afa:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005afe:	f896 e000 	ldrb.w	lr, [r6]
 8005b02:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b06:	789c      	ldrb	r4, [r3, #2]
 8005b08:	7858      	ldrb	r0, [r3, #1]
 8005b0a:	7819      	ldrb	r1, [r3, #0]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	e003      	b.n	8005b18 <keypad_sm+0x10b0>
	while(keypaditerator < 4){
 8005b10:	46a4      	mov	ip, r4
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005b16:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005b18:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005b1a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005b1e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005b20:	bf04      	itt	eq
 8005b22:	f04f 0801 	moveq.w	r8, #1
 8005b26:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005b2a:	2a05      	cmp	r2, #5
 8005b2c:	46e1      	mov	r9, ip
 8005b2e:	d1ef      	bne.n	8005b10 <keypad_sm+0x10a8>
 8005b30:	f883 c004 	strb.w	ip, [r3, #4]
 8005b34:	70dc      	strb	r4, [r3, #3]
 8005b36:	7098      	strb	r0, [r3, #2]
 8005b38:	7059      	strb	r1, [r3, #1]
 8005b3a:	f883 a000 	strb.w	sl, [r3]
 8005b3e:	2304      	movs	r3, #4
 8005b40:	702b      	strb	r3, [r5, #0]
 8005b42:	f1b8 0f00 	cmp.w	r8, #0
 8005b46:	f43f aac9 	beq.w	80050dc <keypad_sm+0x674>
 8005b4a:	f886 e000 	strb.w	lr, [r6]
 8005b4e:	f7ff bac5 	b.w	80050dc <keypad_sm+0x674>
 8005b52:	4d60      	ldr	r5, [pc, #384]	; (8005cd4 <keypad_sm+0x126c>)
				kpenum = WAIT;
 8005b54:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005b56:	f995 1000 	ldrsb.w	r1, [r5]
 8005b5a:	2903      	cmp	r1, #3
 8005b5c:	f73e afab 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005b60:	4b5d      	ldr	r3, [pc, #372]	; (8005cd8 <keypad_sm+0x1270>)
 8005b62:	4e5e      	ldr	r6, [pc, #376]	; (8005cdc <keypad_sm+0x1274>)
 8005b64:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005b66:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005b6a:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005b6e:	f896 e000 	ldrb.w	lr, [r6]
 8005b72:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b76:	789f      	ldrb	r7, [r3, #2]
 8005b78:	785c      	ldrb	r4, [r3, #1]
 8005b7a:	7818      	ldrb	r0, [r3, #0]
 8005b7c:	b2c9      	uxtb	r1, r1
 8005b7e:	e003      	b.n	8005b88 <keypad_sm+0x1120>
	while(keypaditerator < 4){
 8005b80:	46bc      	mov	ip, r7
 8005b82:	4627      	mov	r7, r4
 8005b84:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005b86:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005b88:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005b8a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005b8e:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005b90:	bf04      	itt	eq
 8005b92:	f04f 0e00 	moveq.w	lr, #0
 8005b96:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005b98:	2905      	cmp	r1, #5
 8005b9a:	46e0      	mov	r8, ip
 8005b9c:	d1f0      	bne.n	8005b80 <keypad_sm+0x1118>
 8005b9e:	f883 c004 	strb.w	ip, [r3, #4]
 8005ba2:	70df      	strb	r7, [r3, #3]
 8005ba4:	709c      	strb	r4, [r3, #2]
 8005ba6:	7058      	strb	r0, [r3, #1]
 8005ba8:	f883 9000 	strb.w	r9, [r3]
 8005bac:	2304      	movs	r3, #4
 8005bae:	702b      	strb	r3, [r5, #0]
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	f43e af80 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005bb6:	f886 e000 	strb.w	lr, [r6]
 8005bba:	f7fe bf7c 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005bbe:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005bc2:	4d44      	ldr	r5, [pc, #272]	; (8005cd4 <keypad_sm+0x126c>)
				kpenum = WAIT;
 8005bc4:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005bc8:	f995 2000 	ldrsb.w	r2, [r5]
 8005bcc:	2a03      	cmp	r2, #3
 8005bce:	f73f aa85 	bgt.w	80050dc <keypad_sm+0x674>
 8005bd2:	4b41      	ldr	r3, [pc, #260]	; (8005cd8 <keypad_sm+0x1270>)
 8005bd4:	4e41      	ldr	r6, [pc, #260]	; (8005cdc <keypad_sm+0x1274>)
 8005bd6:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005bd8:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005bdc:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005be0:	f896 9000 	ldrb.w	r9, [r6]
 8005be4:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005be8:	789c      	ldrb	r4, [r3, #2]
 8005bea:	7858      	ldrb	r0, [r3, #1]
 8005bec:	7819      	ldrb	r1, [r3, #0]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	e003      	b.n	8005bfa <keypad_sm+0x1192>
	while(keypaditerator < 4){
 8005bf2:	46a4      	mov	ip, r4
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005bf8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005bfa:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005bfc:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005c00:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005c02:	bf04      	itt	eq
 8005c04:	f04f 0e01 	moveq.w	lr, #1
 8005c08:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005c0c:	2a05      	cmp	r2, #5
 8005c0e:	46e0      	mov	r8, ip
 8005c10:	d1ef      	bne.n	8005bf2 <keypad_sm+0x118a>
 8005c12:	f883 c004 	strb.w	ip, [r3, #4]
 8005c16:	70dc      	strb	r4, [r3, #3]
 8005c18:	7098      	strb	r0, [r3, #2]
 8005c1a:	7059      	strb	r1, [r3, #1]
 8005c1c:	f883 a000 	strb.w	sl, [r3]
 8005c20:	2304      	movs	r3, #4
 8005c22:	702b      	strb	r3, [r5, #0]
 8005c24:	f1be 0f00 	cmp.w	lr, #0
 8005c28:	f43f aa58 	beq.w	80050dc <keypad_sm+0x674>
 8005c2c:	f886 9000 	strb.w	r9, [r6]
 8005c30:	f7ff ba54 	b.w	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 8005c34:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005c38:	4d26      	ldr	r5, [pc, #152]	; (8005cd4 <keypad_sm+0x126c>)
				kpenum = WAIT;
 8005c3a:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005c3e:	f995 2000 	ldrsb.w	r2, [r5]
 8005c42:	2a03      	cmp	r2, #3
 8005c44:	f73f aa4a 	bgt.w	80050dc <keypad_sm+0x674>
 8005c48:	4b23      	ldr	r3, [pc, #140]	; (8005cd8 <keypad_sm+0x1270>)
 8005c4a:	4e24      	ldr	r6, [pc, #144]	; (8005cdc <keypad_sm+0x1274>)
			keypadarr[0] = num;
 8005c4c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005c50:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005c54:	f896 8000 	ldrb.w	r8, [r6]
 8005c58:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005c5c:	789c      	ldrb	r4, [r3, #2]
 8005c5e:	7858      	ldrb	r0, [r3, #1]
 8005c60:	7819      	ldrb	r1, [r3, #0]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	e003      	b.n	8005c6e <keypad_sm+0x1206>
	while(keypaditerator < 4){
 8005c66:	46a4      	mov	ip, r4
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005c6c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005c6e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005c70:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005c74:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005c76:	bf04      	itt	eq
 8005c78:	f04f 0e01 	moveq.w	lr, #1
 8005c7c:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005c80:	2a04      	cmp	r2, #4
 8005c82:	46e1      	mov	r9, ip
 8005c84:	d1ef      	bne.n	8005c66 <keypad_sm+0x11fe>
 8005c86:	702a      	strb	r2, [r5, #0]
 8005c88:	f883 c004 	strb.w	ip, [r3, #4]
 8005c8c:	70dc      	strb	r4, [r3, #3]
 8005c8e:	7098      	strb	r0, [r3, #2]
 8005c90:	7059      	strb	r1, [r3, #1]
 8005c92:	f883 a000 	strb.w	sl, [r3]
 8005c96:	f1be 0f00 	cmp.w	lr, #0
 8005c9a:	f43f aa1f 	beq.w	80050dc <keypad_sm+0x674>
 8005c9e:	f886 8000 	strb.w	r8, [r6]
 8005ca2:	f7ff ba1b 	b.w	80050dc <keypad_sm+0x674>
 8005ca6:	4d0b      	ldr	r5, [pc, #44]	; (8005cd4 <keypad_sm+0x126c>)
				kpenum = WAIT;
 8005ca8:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005caa:	f995 1000 	ldrsb.w	r1, [r5]
 8005cae:	2903      	cmp	r1, #3
 8005cb0:	f73e af01 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005cb4:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <keypad_sm+0x1270>)
 8005cb6:	4e09      	ldr	r6, [pc, #36]	; (8005cdc <keypad_sm+0x1274>)
 8005cb8:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005cba:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005cbe:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005cc2:	f896 e000 	ldrb.w	lr, [r6]
 8005cc6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005cca:	789f      	ldrb	r7, [r3, #2]
 8005ccc:	785c      	ldrb	r4, [r3, #1]
 8005cce:	7818      	ldrb	r0, [r3, #0]
 8005cd0:	b2c9      	uxtb	r1, r1
 8005cd2:	e00f      	b.n	8005cf4 <keypad_sm+0x128c>
 8005cd4:	2000000d 	.word	0x2000000d
 8005cd8:	20000008 	.word	0x20000008
 8005cdc:	2000074c 	.word	0x2000074c
 8005ce0:	41400000 	.word	0x41400000
 8005ce4:	20000a74 	.word	0x20000a74
 8005ce8:	20000a78 	.word	0x20000a78
	while(keypaditerator < 4){
 8005cec:	46bc      	mov	ip, r7
 8005cee:	4627      	mov	r7, r4
 8005cf0:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005cf2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005cf4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005cf6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005cfa:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005cfc:	bf04      	itt	eq
 8005cfe:	f04f 0e00 	moveq.w	lr, #0
 8005d02:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005d04:	2905      	cmp	r1, #5
 8005d06:	46e0      	mov	r8, ip
 8005d08:	d1f0      	bne.n	8005cec <keypad_sm+0x1284>
 8005d0a:	f883 c004 	strb.w	ip, [r3, #4]
 8005d0e:	70df      	strb	r7, [r3, #3]
 8005d10:	709c      	strb	r4, [r3, #2]
 8005d12:	7058      	strb	r0, [r3, #1]
 8005d14:	f883 9000 	strb.w	r9, [r3]
 8005d18:	2304      	movs	r3, #4
 8005d1a:	702b      	strb	r3, [r5, #0]
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	f43e aeca 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005d22:	f886 e000 	strb.w	lr, [r6]
 8005d26:	f7fe bec6 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8005d2a:	f7fe f9d5 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d2e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d30:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d32:	f7fb f9f1 	bl	8001118 <__aeabi_fcmpge>
 8005d36:	b158      	cbz	r0, 8005d50 <keypad_sm+0x12e8>
 8005d38:	4628      	mov	r0, r5
 8005d3a:	49c2      	ldr	r1, [pc, #776]	; (8006044 <keypad_sm+0x15dc>)
 8005d3c:	f7fb f9e2 	bl	8001104 <__aeabi_fcmple>
 8005d40:	b130      	cbz	r0, 8005d50 <keypad_sm+0x12e8>
					volt_set_main_old = volt_set_main;
 8005d42:	4dc1      	ldr	r5, [pc, #772]	; (8006048 <keypad_sm+0x15e0>)
 8005d44:	4bc1      	ldr	r3, [pc, #772]	; (800604c <keypad_sm+0x15e4>)
 8005d46:	682a      	ldr	r2, [r5, #0]
 8005d48:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005d4a:	f7fe f9c5 	bl	80040d8 <translate_keypad>
 8005d4e:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005d50:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005d54:	4dbe      	ldr	r5, [pc, #760]	; (8006050 <keypad_sm+0x15e8>)
				kpenum = WAIT;
 8005d56:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005d5a:	f995 2000 	ldrsb.w	r2, [r5]
 8005d5e:	2a03      	cmp	r2, #3
 8005d60:	f73f a9bc 	bgt.w	80050dc <keypad_sm+0x674>
 8005d64:	4bbb      	ldr	r3, [pc, #748]	; (8006054 <keypad_sm+0x15ec>)
 8005d66:	4ebc      	ldr	r6, [pc, #752]	; (8006058 <keypad_sm+0x15f0>)
			keypadarr[0] = num;
 8005d68:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005d6c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005d70:	f896 8000 	ldrb.w	r8, [r6]
 8005d74:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005d78:	789c      	ldrb	r4, [r3, #2]
 8005d7a:	7858      	ldrb	r0, [r3, #1]
 8005d7c:	7819      	ldrb	r1, [r3, #0]
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	e003      	b.n	8005d8a <keypad_sm+0x1322>
	while(keypaditerator < 4){
 8005d82:	46a4      	mov	ip, r4
 8005d84:	4604      	mov	r4, r0
 8005d86:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005d88:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005d8a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005d8c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005d90:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005d92:	bf04      	itt	eq
 8005d94:	f04f 0e01 	moveq.w	lr, #1
 8005d98:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005d9c:	2a04      	cmp	r2, #4
 8005d9e:	46e1      	mov	r9, ip
 8005da0:	d1ef      	bne.n	8005d82 <keypad_sm+0x131a>
 8005da2:	702a      	strb	r2, [r5, #0]
 8005da4:	f883 c004 	strb.w	ip, [r3, #4]
 8005da8:	70dc      	strb	r4, [r3, #3]
 8005daa:	7098      	strb	r0, [r3, #2]
 8005dac:	7059      	strb	r1, [r3, #1]
 8005dae:	f883 a000 	strb.w	sl, [r3]
 8005db2:	f1be 0f00 	cmp.w	lr, #0
 8005db6:	f43f a991 	beq.w	80050dc <keypad_sm+0x674>
 8005dba:	f886 8000 	strb.w	r8, [r6]
 8005dbe:	f7ff b98d 	b.w	80050dc <keypad_sm+0x674>
			else if(num == '#'){
 8005dc2:	2823      	cmp	r0, #35	; 0x23
 8005dc4:	f000 82ec 	beq.w	80063a0 <keypad_sm+0x1938>
			else if(num == '+'){
 8005dc8:	282b      	cmp	r0, #43	; 0x2b
 8005dca:	f000 8479 	beq.w	80066c0 <keypad_sm+0x1c58>
			else if(num == '-'){
 8005dce:	282d      	cmp	r0, #45	; 0x2d
 8005dd0:	f000 8705 	beq.w	8006bde <keypad_sm+0x2176>
			else if(num == 's'){
 8005dd4:	2873      	cmp	r0, #115	; 0x73
 8005dd6:	f000 86f5 	beq.w	8006bc4 <keypad_sm+0x215c>
			else if(num == '['){
 8005dda:	285b      	cmp	r0, #91	; 0x5b
 8005ddc:	f000 8796 	beq.w	8006d0c <keypad_sm+0x22a4>
			else if(num == ']'){
 8005de0:	285d      	cmp	r0, #93	; 0x5d
 8005de2:	f001 8199 	beq.w	8007118 <keypad_sm+0x26b0>
			else if(num == '*'){
 8005de6:	282a      	cmp	r0, #42	; 0x2a
 8005de8:	f000 8786 	beq.w	8006cf8 <keypad_sm+0x2290>
			else if(num == '/'){
 8005dec:	282f      	cmp	r0, #47	; 0x2f
 8005dee:	f47e ae62 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 8005df2:	4b9a      	ldr	r3, [pc, #616]	; (800605c <keypad_sm+0x15f4>)
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	f001 819e 	beq.w	8007138 <keypad_sm+0x26d0>
					chstat_main = 0;
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	f7fe be59 	b.w	8004ab6 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 8005e04:	4d92      	ldr	r5, [pc, #584]	; (8006050 <keypad_sm+0x15e8>)
 8005e06:	f995 2000 	ldrsb.w	r2, [r5]
 8005e0a:	2a03      	cmp	r2, #3
 8005e0c:	f73f a966 	bgt.w	80050dc <keypad_sm+0x674>
 8005e10:	4b90      	ldr	r3, [pc, #576]	; (8006054 <keypad_sm+0x15ec>)
 8005e12:	4e91      	ldr	r6, [pc, #580]	; (8006058 <keypad_sm+0x15f0>)
 8005e14:	3201      	adds	r2, #1
 8005e16:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005e1a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005e1e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005e22:	f896 e000 	ldrb.w	lr, [r6]
 8005e26:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005e2a:	789c      	ldrb	r4, [r3, #2]
 8005e2c:	7858      	ldrb	r0, [r3, #1]
 8005e2e:	7819      	ldrb	r1, [r3, #0]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	e003      	b.n	8005e3c <keypad_sm+0x13d4>
	while(keypaditerator < 4){
 8005e34:	46a4      	mov	ip, r4
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005e3a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005e3c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005e3e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005e42:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005e44:	bf04      	itt	eq
 8005e46:	f04f 0801 	moveq.w	r8, #1
 8005e4a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005e4e:	2a05      	cmp	r2, #5
 8005e50:	46e1      	mov	r9, ip
 8005e52:	d1ef      	bne.n	8005e34 <keypad_sm+0x13cc>
 8005e54:	f883 c004 	strb.w	ip, [r3, #4]
 8005e58:	70dc      	strb	r4, [r3, #3]
 8005e5a:	7098      	strb	r0, [r3, #2]
 8005e5c:	7059      	strb	r1, [r3, #1]
 8005e5e:	f883 a000 	strb.w	sl, [r3]
 8005e62:	2304      	movs	r3, #4
 8005e64:	702b      	strb	r3, [r5, #0]
 8005e66:	f1b8 0f00 	cmp.w	r8, #0
 8005e6a:	f43f a937 	beq.w	80050dc <keypad_sm+0x674>
 8005e6e:	f886 e000 	strb.w	lr, [r6]
 8005e72:	f7ff b933 	b.w	80050dc <keypad_sm+0x674>
 8005e76:	4d76      	ldr	r5, [pc, #472]	; (8006050 <keypad_sm+0x15e8>)
				kpenum = WAIT;
 8005e78:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005e7a:	f995 2000 	ldrsb.w	r2, [r5]
 8005e7e:	2a03      	cmp	r2, #3
 8005e80:	f73e ae19 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005e84:	4b73      	ldr	r3, [pc, #460]	; (8006054 <keypad_sm+0x15ec>)
 8005e86:	4e74      	ldr	r6, [pc, #464]	; (8006058 <keypad_sm+0x15f0>)
 8005e88:	3201      	adds	r2, #1
 8005e8a:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005e8e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005e92:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005e96:	f896 c000 	ldrb.w	ip, [r6]
 8005e9a:	78df      	ldrb	r7, [r3, #3]
 8005e9c:	789c      	ldrb	r4, [r3, #2]
 8005e9e:	7858      	ldrb	r0, [r3, #1]
 8005ea0:	7819      	ldrb	r1, [r3, #0]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	e003      	b.n	8005eae <keypad_sm+0x1446>
	while(keypaditerator < 4){
 8005ea6:	4627      	mov	r7, r4
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005eac:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005eae:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005eb0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005eb4:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005eb6:	bf04      	itt	eq
 8005eb8:	f04f 0c00 	moveq.w	ip, #0
 8005ebc:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005ec0:	2a05      	cmp	r2, #5
 8005ec2:	46b8      	mov	r8, r7
 8005ec4:	d1ef      	bne.n	8005ea6 <keypad_sm+0x143e>
 8005ec6:	711f      	strb	r7, [r3, #4]
 8005ec8:	70dc      	strb	r4, [r3, #3]
 8005eca:	7098      	strb	r0, [r3, #2]
 8005ecc:	7059      	strb	r1, [r3, #1]
 8005ece:	f883 9000 	strb.w	r9, [r3]
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	702b      	strb	r3, [r5, #0]
 8005ed6:	f1be 0f00 	cmp.w	lr, #0
 8005eda:	f43e adec 	beq.w	8004ab6 <keypad_sm+0x4e>
 8005ede:	f886 c000 	strb.w	ip, [r6]
 8005ee2:	f7fe bde8 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005ee6:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8005ee8:	4d59      	ldr	r5, [pc, #356]	; (8006050 <keypad_sm+0x15e8>)
				kpenum = WAIT;
 8005eea:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005eec:	f995 2000 	ldrsb.w	r2, [r5]
 8005ef0:	2a03      	cmp	r2, #3
 8005ef2:	f73f a8f3 	bgt.w	80050dc <keypad_sm+0x674>
 8005ef6:	4b57      	ldr	r3, [pc, #348]	; (8006054 <keypad_sm+0x15ec>)
 8005ef8:	4e57      	ldr	r6, [pc, #348]	; (8006058 <keypad_sm+0x15f0>)
 8005efa:	3201      	adds	r2, #1
 8005efc:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005f00:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005f04:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005f08:	f896 e000 	ldrb.w	lr, [r6]
 8005f0c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005f10:	789c      	ldrb	r4, [r3, #2]
 8005f12:	7858      	ldrb	r0, [r3, #1]
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	e003      	b.n	8005f22 <keypad_sm+0x14ba>
	while(keypaditerator < 4){
 8005f1a:	46a4      	mov	ip, r4
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005f20:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005f22:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005f24:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005f28:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005f2a:	bf04      	itt	eq
 8005f2c:	f04f 0801 	moveq.w	r8, #1
 8005f30:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005f34:	2a05      	cmp	r2, #5
 8005f36:	46e1      	mov	r9, ip
 8005f38:	d1ef      	bne.n	8005f1a <keypad_sm+0x14b2>
 8005f3a:	f883 c004 	strb.w	ip, [r3, #4]
 8005f3e:	70dc      	strb	r4, [r3, #3]
 8005f40:	7098      	strb	r0, [r3, #2]
 8005f42:	7059      	strb	r1, [r3, #1]
 8005f44:	f883 a000 	strb.w	sl, [r3]
 8005f48:	2304      	movs	r3, #4
 8005f4a:	702b      	strb	r3, [r5, #0]
 8005f4c:	f1b8 0f00 	cmp.w	r8, #0
 8005f50:	f43f a8c4 	beq.w	80050dc <keypad_sm+0x674>
 8005f54:	f886 e000 	strb.w	lr, [r6]
 8005f58:	f7ff b8c0 	b.w	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 8005f5c:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8005f5e:	4d3c      	ldr	r5, [pc, #240]	; (8006050 <keypad_sm+0x15e8>)
				kpenum = WAIT;
 8005f60:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005f62:	f995 2000 	ldrsb.w	r2, [r5]
 8005f66:	2a03      	cmp	r2, #3
 8005f68:	f73f a8b8 	bgt.w	80050dc <keypad_sm+0x674>
 8005f6c:	4b39      	ldr	r3, [pc, #228]	; (8006054 <keypad_sm+0x15ec>)
 8005f6e:	4e3a      	ldr	r6, [pc, #232]	; (8006058 <keypad_sm+0x15f0>)
 8005f70:	3201      	adds	r2, #1
 8005f72:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005f76:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005f7a:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005f7e:	f896 e000 	ldrb.w	lr, [r6]
 8005f82:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005f86:	789c      	ldrb	r4, [r3, #2]
 8005f88:	7858      	ldrb	r0, [r3, #1]
 8005f8a:	7819      	ldrb	r1, [r3, #0]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	e003      	b.n	8005f98 <keypad_sm+0x1530>
	while(keypaditerator < 4){
 8005f90:	46a4      	mov	ip, r4
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005f96:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005f98:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005f9a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005f9e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005fa0:	bf04      	itt	eq
 8005fa2:	f04f 0801 	moveq.w	r8, #1
 8005fa6:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005faa:	2a05      	cmp	r2, #5
 8005fac:	46e1      	mov	r9, ip
 8005fae:	d1ef      	bne.n	8005f90 <keypad_sm+0x1528>
 8005fb0:	f883 c004 	strb.w	ip, [r3, #4]
 8005fb4:	70dc      	strb	r4, [r3, #3]
 8005fb6:	7098      	strb	r0, [r3, #2]
 8005fb8:	7059      	strb	r1, [r3, #1]
 8005fba:	f883 a000 	strb.w	sl, [r3]
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	702b      	strb	r3, [r5, #0]
 8005fc2:	f1b8 0f00 	cmp.w	r8, #0
 8005fc6:	f43f a889 	beq.w	80050dc <keypad_sm+0x674>
 8005fca:	f886 e000 	strb.w	lr, [r6]
 8005fce:	f7ff b885 	b.w	80050dc <keypad_sm+0x674>
 8005fd2:	4d1f      	ldr	r5, [pc, #124]	; (8006050 <keypad_sm+0x15e8>)
				kpenum = WAIT;
 8005fd4:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005fd6:	f995 2000 	ldrsb.w	r2, [r5]
 8005fda:	2a03      	cmp	r2, #3
 8005fdc:	f73e ad6b 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <keypad_sm+0x15ec>)
 8005fe2:	4e1d      	ldr	r6, [pc, #116]	; (8006058 <keypad_sm+0x15f0>)
 8005fe4:	3201      	adds	r2, #1
 8005fe6:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005fea:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005fee:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005ff2:	f896 c000 	ldrb.w	ip, [r6]
 8005ff6:	78df      	ldrb	r7, [r3, #3]
 8005ff8:	789c      	ldrb	r4, [r3, #2]
 8005ffa:	7858      	ldrb	r0, [r3, #1]
 8005ffc:	7819      	ldrb	r1, [r3, #0]
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	e003      	b.n	800600a <keypad_sm+0x15a2>
	while(keypaditerator < 4){
 8006002:	4627      	mov	r7, r4
 8006004:	4604      	mov	r4, r0
 8006006:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006008:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800600a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800600c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006010:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006012:	bf04      	itt	eq
 8006014:	f04f 0c00 	moveq.w	ip, #0
 8006018:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 800601c:	2a05      	cmp	r2, #5
 800601e:	46b8      	mov	r8, r7
 8006020:	d1ef      	bne.n	8006002 <keypad_sm+0x159a>
 8006022:	711f      	strb	r7, [r3, #4]
 8006024:	70dc      	strb	r4, [r3, #3]
 8006026:	7098      	strb	r0, [r3, #2]
 8006028:	7059      	strb	r1, [r3, #1]
 800602a:	f883 9000 	strb.w	r9, [r3]
 800602e:	2304      	movs	r3, #4
 8006030:	702b      	strb	r3, [r5, #0]
 8006032:	f1be 0f00 	cmp.w	lr, #0
 8006036:	f43e ad3e 	beq.w	8004ab6 <keypad_sm+0x4e>
 800603a:	f886 c000 	strb.w	ip, [r6]
 800603e:	f7fe bd3a 	b.w	8004ab6 <keypad_sm+0x4e>
 8006042:	bf00      	nop
 8006044:	41400000 	.word	0x41400000
 8006048:	20000a74 	.word	0x20000a74
 800604c:	20000a78 	.word	0x20000a78
 8006050:	2000000d 	.word	0x2000000d
 8006054:	20000008 	.word	0x20000008
 8006058:	2000074c 	.word	0x2000074c
 800605c:	200003eb 	.word	0x200003eb
			else if(num == '#'){
 8006060:	2823      	cmp	r0, #35	; 0x23
 8006062:	f000 83c7 	beq.w	80067f4 <keypad_sm+0x1d8c>
			else if(num == '+'){
 8006066:	282b      	cmp	r0, #43	; 0x2b
 8006068:	f000 84df 	beq.w	8006a2a <keypad_sm+0x1fc2>
			else if(num == '-'){
 800606c:	282d      	cmp	r0, #45	; 0x2d
 800606e:	f000 8521 	beq.w	8006ab4 <keypad_sm+0x204c>
			else if(num == 's'){
 8006072:	2873      	cmp	r0, #115	; 0x73
 8006074:	f000 862a 	beq.w	8006ccc <keypad_sm+0x2264>
			else if(num == '['){
 8006078:	285b      	cmp	r0, #91	; 0x5b
 800607a:	f001 802a 	beq.w	80070d2 <keypad_sm+0x266a>
			else if(num == ']'){
 800607e:	285d      	cmp	r0, #93	; 0x5d
 8006080:	f001 801c 	beq.w	80070bc <keypad_sm+0x2654>
			else if(num == '*'){
 8006084:	282a      	cmp	r0, #42	; 0x2a
 8006086:	f001 8011 	beq.w	80070ac <keypad_sm+0x2644>
			else if(num == '/'){
 800608a:	282f      	cmp	r0, #47	; 0x2f
 800608c:	f47e ad13 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 8006090:	4bbb      	ldr	r3, [pc, #748]	; (8006380 <keypad_sm+0x1918>)
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	2a00      	cmp	r2, #0
 8006096:	f001 8005 	beq.w	80070a4 <keypad_sm+0x263c>
					chstat_main = 0;
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	f7fe bd0a 	b.w	8004ab6 <keypad_sm+0x4e>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80060a2:	4db8      	ldr	r5, [pc, #736]	; (8006384 <keypad_sm+0x191c>)
 80060a4:	f995 3000 	ldrsb.w	r3, [r5]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	f77e ad04 	ble.w	8004ab6 <keypad_sm+0x4e>
 80060ae:	4eb6      	ldr	r6, [pc, #728]	; (8006388 <keypad_sm+0x1920>)
 80060b0:	7832      	ldrb	r2, [r6, #0]
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	f47e acff 	bne.w	8004ab6 <keypad_sm+0x4e>
				keypadarr[i-1] = keypadarr[i];
 80060b8:	4ab4      	ldr	r2, [pc, #720]	; (800638c <keypad_sm+0x1924>)
			keypaditerator--;
 80060ba:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 80060bc:	f8d2 1001 	ldr.w	r1, [r2, #1]
			keypaditerator--;
 80060c0:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 80060c2:	6011      	str	r1, [r2, #0]
			keypaddecimal = 1;
 80060c4:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 80060c6:	212e      	movs	r1, #46	; 0x2e
			keypaddecimal = 1;
 80060c8:	7033      	strb	r3, [r6, #0]
			keypadarr[keypadlength-1] = num;
 80060ca:	7111      	strb	r1, [r2, #4]
			keypaditerator--;
 80060cc:	f7fe bcf3 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 80060d0:	f7fe f802 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80060d4:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80060d6:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80060d8:	f7fb f81e 	bl	8001118 <__aeabi_fcmpge>
 80060dc:	b190      	cbz	r0, 8006104 <keypad_sm+0x169c>
 80060de:	4628      	mov	r0, r5
 80060e0:	f7fa f9ba 	bl	8000458 <__aeabi_f2d>
 80060e4:	a3a4      	add	r3, pc, #656	; (adr r3, 8006378 <keypad_sm+0x1910>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa fc89 	bl	8000a00 <__aeabi_dcmple>
 80060ee:	b148      	cbz	r0, 8006104 <keypad_sm+0x169c>
					amp_set_main_old = amp_set_main;
 80060f0:	4da7      	ldr	r5, [pc, #668]	; (8006390 <keypad_sm+0x1928>)
 80060f2:	4ba8      	ldr	r3, [pc, #672]	; (8006394 <keypad_sm+0x192c>)
 80060f4:	682a      	ldr	r2, [r5, #0]
 80060f6:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80060f8:	f7fd ffee 	bl	80040d8 <translate_keypad>
 80060fc:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 80060fe:	6828      	ldr	r0, [r5, #0]
 8006100:	f7fb fc3a 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006104:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006106:	4d9f      	ldr	r5, [pc, #636]	; (8006384 <keypad_sm+0x191c>)
				kpenum = WAIT;
 8006108:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 800610a:	f995 2000 	ldrsb.w	r2, [r5]
 800610e:	2a03      	cmp	r2, #3
 8006110:	f73e acd1 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8006114:	4b9d      	ldr	r3, [pc, #628]	; (800638c <keypad_sm+0x1924>)
 8006116:	4e9c      	ldr	r6, [pc, #624]	; (8006388 <keypad_sm+0x1920>)
			keypadarr[0] = num;
 8006118:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800611c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006120:	f896 e000 	ldrb.w	lr, [r6]
 8006124:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006128:	789c      	ldrb	r4, [r3, #2]
 800612a:	7858      	ldrb	r0, [r3, #1]
 800612c:	7819      	ldrb	r1, [r3, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	e003      	b.n	800613a <keypad_sm+0x16d2>
	while(keypaditerator < 4){
 8006132:	46a4      	mov	ip, r4
 8006134:	4604      	mov	r4, r0
 8006136:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006138:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800613a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800613c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006140:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006142:	bf04      	itt	eq
 8006144:	f04f 0e00 	moveq.w	lr, #0
 8006148:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 800614a:	2a04      	cmp	r2, #4
 800614c:	46e0      	mov	r8, ip
 800614e:	d1f0      	bne.n	8006132 <keypad_sm+0x16ca>
 8006150:	702a      	strb	r2, [r5, #0]
 8006152:	f883 c004 	strb.w	ip, [r3, #4]
 8006156:	70dc      	strb	r4, [r3, #3]
 8006158:	7098      	strb	r0, [r3, #2]
 800615a:	7059      	strb	r1, [r3, #1]
 800615c:	f883 9000 	strb.w	r9, [r3]
 8006160:	2f00      	cmp	r7, #0
 8006162:	f43e aca8 	beq.w	8004ab6 <keypad_sm+0x4e>
 8006166:	f886 e000 	strb.w	lr, [r6]
 800616a:	f7fe bca4 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 800616e:	f7fd ffb3 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006172:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006174:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006176:	f7fa ffcf 	bl	8001118 <__aeabi_fcmpge>
 800617a:	b170      	cbz	r0, 800619a <keypad_sm+0x1732>
 800617c:	4628      	mov	r0, r5
 800617e:	4986      	ldr	r1, [pc, #536]	; (8006398 <keypad_sm+0x1930>)
 8006180:	f7fa ffc0 	bl	8001104 <__aeabi_fcmple>
 8006184:	b148      	cbz	r0, 800619a <keypad_sm+0x1732>
					amp_set_main_old = amp_set_main;
 8006186:	4d82      	ldr	r5, [pc, #520]	; (8006390 <keypad_sm+0x1928>)
 8006188:	4b82      	ldr	r3, [pc, #520]	; (8006394 <keypad_sm+0x192c>)
 800618a:	682a      	ldr	r2, [r5, #0]
 800618c:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 800618e:	f7fd ffa3 	bl	80040d8 <translate_keypad>
 8006192:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006194:	6828      	ldr	r0, [r5, #0]
 8006196:	f7fb fbef 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 800619a:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800619c:	4d79      	ldr	r5, [pc, #484]	; (8006384 <keypad_sm+0x191c>)
				kpenum = WAIT;
 800619e:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80061a0:	f995 2000 	ldrsb.w	r2, [r5]
 80061a4:	2a03      	cmp	r2, #3
 80061a6:	f73e af99 	bgt.w	80050dc <keypad_sm+0x674>
 80061aa:	4b78      	ldr	r3, [pc, #480]	; (800638c <keypad_sm+0x1924>)
 80061ac:	4e76      	ldr	r6, [pc, #472]	; (8006388 <keypad_sm+0x1920>)
 80061ae:	4689      	mov	r9, r1
			keypadarr[0] = num;
 80061b0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80061b4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80061b8:	f896 e000 	ldrb.w	lr, [r6]
 80061bc:	f893 c003 	ldrb.w	ip, [r3, #3]
 80061c0:	789c      	ldrb	r4, [r3, #2]
 80061c2:	7858      	ldrb	r0, [r3, #1]
 80061c4:	7819      	ldrb	r1, [r3, #0]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	e003      	b.n	80061d2 <keypad_sm+0x176a>
	while(keypaditerator < 4){
 80061ca:	46a4      	mov	ip, r4
 80061cc:	4604      	mov	r4, r0
 80061ce:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80061d0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80061d2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80061d4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80061d8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80061da:	bf04      	itt	eq
 80061dc:	f04f 0901 	moveq.w	r9, #1
 80061e0:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80061e4:	2a04      	cmp	r2, #4
 80061e6:	46e0      	mov	r8, ip
 80061e8:	d1ef      	bne.n	80061ca <keypad_sm+0x1762>
 80061ea:	702a      	strb	r2, [r5, #0]
 80061ec:	f883 c004 	strb.w	ip, [r3, #4]
 80061f0:	70dc      	strb	r4, [r3, #3]
 80061f2:	7098      	strb	r0, [r3, #2]
 80061f4:	7059      	strb	r1, [r3, #1]
 80061f6:	f883 a000 	strb.w	sl, [r3]
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	f43e af6d 	beq.w	80050dc <keypad_sm+0x674>
 8006202:	f886 e000 	strb.w	lr, [r6]
 8006206:	f7fe bf69 	b.w	80050dc <keypad_sm+0x674>
			else if(num == '#'){
 800620a:	2823      	cmp	r0, #35	; 0x23
 800620c:	f000 83c0 	beq.w	8006990 <keypad_sm+0x1f28>
			else if(num == '+'){
 8006210:	282b      	cmp	r0, #43	; 0x2b
 8006212:	f000 8370 	beq.w	80068f6 <keypad_sm+0x1e8e>
			else if(num == '-'){
 8006216:	282d      	cmp	r0, #45	; 0x2d
 8006218:	f000 8691 	beq.w	8006f3e <keypad_sm+0x24d6>
			else if(num == 's'){
 800621c:	2873      	cmp	r0, #115	; 0x73
 800621e:	f000 8682 	beq.w	8006f26 <keypad_sm+0x24be>
			else if(num == '['){
 8006222:	285b      	cmp	r0, #91	; 0x5b
 8006224:	f001 8000 	beq.w	8007228 <keypad_sm+0x27c0>
			else if(num == ']'){
 8006228:	285d      	cmp	r0, #93	; 0x5d
 800622a:	f000 87ef 	beq.w	800720c <keypad_sm+0x27a4>
			else if(num == '*'){
 800622e:	282a      	cmp	r0, #42	; 0x2a
 8006230:	f000 87e4 	beq.w	80071fc <keypad_sm+0x2794>
			else if(num == '/'){
 8006234:	282f      	cmp	r0, #47	; 0x2f
 8006236:	f47e ac3e 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 800623a:	4b51      	ldr	r3, [pc, #324]	; (8006380 <keypad_sm+0x1918>)
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	2a00      	cmp	r2, #0
 8006240:	f000 87d8 	beq.w	80071f4 <keypad_sm+0x278c>
					chstat_main = 0;
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	f7fe bc35 	b.w	8004ab6 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 800624c:	4d4d      	ldr	r5, [pc, #308]	; (8006384 <keypad_sm+0x191c>)
 800624e:	f995 2000 	ldrsb.w	r2, [r5]
 8006252:	2a03      	cmp	r2, #3
 8006254:	f73e af42 	bgt.w	80050dc <keypad_sm+0x674>
 8006258:	4b4c      	ldr	r3, [pc, #304]	; (800638c <keypad_sm+0x1924>)
 800625a:	4e4b      	ldr	r6, [pc, #300]	; (8006388 <keypad_sm+0x1920>)
 800625c:	3201      	adds	r2, #1
 800625e:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006262:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006266:	f893 9004 	ldrb.w	r9, [r3, #4]
 800626a:	f896 e000 	ldrb.w	lr, [r6]
 800626e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006272:	789c      	ldrb	r4, [r3, #2]
 8006274:	7858      	ldrb	r0, [r3, #1]
 8006276:	7819      	ldrb	r1, [r3, #0]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	e003      	b.n	8006284 <keypad_sm+0x181c>
	while(keypaditerator < 4){
 800627c:	46a4      	mov	ip, r4
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006282:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006284:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006286:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800628a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800628c:	bf04      	itt	eq
 800628e:	f04f 0801 	moveq.w	r8, #1
 8006292:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006296:	2a05      	cmp	r2, #5
 8006298:	46e1      	mov	r9, ip
 800629a:	d1ef      	bne.n	800627c <keypad_sm+0x1814>
 800629c:	f883 c004 	strb.w	ip, [r3, #4]
 80062a0:	70dc      	strb	r4, [r3, #3]
 80062a2:	7098      	strb	r0, [r3, #2]
 80062a4:	7059      	strb	r1, [r3, #1]
 80062a6:	f883 a000 	strb.w	sl, [r3]
 80062aa:	2304      	movs	r3, #4
 80062ac:	702b      	strb	r3, [r5, #0]
 80062ae:	f1b8 0f00 	cmp.w	r8, #0
 80062b2:	f43e af13 	beq.w	80050dc <keypad_sm+0x674>
 80062b6:	f886 e000 	strb.w	lr, [r6]
 80062ba:	f7fe bf0f 	b.w	80050dc <keypad_sm+0x674>
	float temp = translate_keypad();
 80062be:	f7fd ff0b 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062c2:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80062c4:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062c6:	f7fa ff27 	bl	8001118 <__aeabi_fcmpge>
 80062ca:	b130      	cbz	r0, 80062da <keypad_sm+0x1872>
 80062cc:	4628      	mov	r0, r5
 80062ce:	4932      	ldr	r1, [pc, #200]	; (8006398 <keypad_sm+0x1930>)
 80062d0:	f7fa ff18 	bl	8001104 <__aeabi_fcmple>
 80062d4:	b108      	cbz	r0, 80062da <keypad_sm+0x1872>
					volt_set_aux = translate_keypad();
 80062d6:	4b31      	ldr	r3, [pc, #196]	; (800639c <keypad_sm+0x1934>)
 80062d8:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80062da:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 80062dc:	4d29      	ldr	r5, [pc, #164]	; (8006384 <keypad_sm+0x191c>)
				kpenum = WAIT;
 80062de:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 80062e0:	f995 2000 	ldrsb.w	r2, [r5]
 80062e4:	2a03      	cmp	r2, #3
 80062e6:	f73e abe6 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80062ea:	4b28      	ldr	r3, [pc, #160]	; (800638c <keypad_sm+0x1924>)
 80062ec:	4e26      	ldr	r6, [pc, #152]	; (8006388 <keypad_sm+0x1920>)
 80062ee:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80062f0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80062f4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80062f8:	f896 e000 	ldrb.w	lr, [r6]
 80062fc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006300:	789c      	ldrb	r4, [r3, #2]
 8006302:	7858      	ldrb	r0, [r3, #1]
 8006304:	7819      	ldrb	r1, [r3, #0]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	e003      	b.n	8006312 <keypad_sm+0x18aa>
	while(keypaditerator < 4){
 800630a:	46a4      	mov	ip, r4
 800630c:	4604      	mov	r4, r0
 800630e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006310:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006312:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006314:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006318:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 800631a:	bf04      	itt	eq
 800631c:	f04f 0e00 	moveq.w	lr, #0
 8006320:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 8006322:	2a05      	cmp	r2, #5
 8006324:	46e0      	mov	r8, ip
 8006326:	d1f0      	bne.n	800630a <keypad_sm+0x18a2>
 8006328:	f883 c004 	strb.w	ip, [r3, #4]
 800632c:	70dc      	strb	r4, [r3, #3]
 800632e:	7098      	strb	r0, [r3, #2]
 8006330:	7059      	strb	r1, [r3, #1]
 8006332:	f883 9000 	strb.w	r9, [r3]
 8006336:	2304      	movs	r3, #4
 8006338:	702b      	strb	r3, [r5, #0]
 800633a:	2f00      	cmp	r7, #0
 800633c:	f43e abbb 	beq.w	8004ab6 <keypad_sm+0x4e>
 8006340:	f886 e000 	strb.w	lr, [r6]
 8006344:	f7fe bbb7 	b.w	8004ab6 <keypad_sm+0x4e>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8006348:	4d0e      	ldr	r5, [pc, #56]	; (8006384 <keypad_sm+0x191c>)
 800634a:	f995 3000 	ldrsb.w	r3, [r5]
 800634e:	2b01      	cmp	r3, #1
 8006350:	f77e abb1 	ble.w	8004ab6 <keypad_sm+0x4e>
 8006354:	490c      	ldr	r1, [pc, #48]	; (8006388 <keypad_sm+0x1920>)
 8006356:	780a      	ldrb	r2, [r1, #0]
 8006358:	2a00      	cmp	r2, #0
 800635a:	f47e abac 	bne.w	8004ab6 <keypad_sm+0x4e>
				keypadarr[i-1] = keypadarr[i];
 800635e:	4a0b      	ldr	r2, [pc, #44]	; (800638c <keypad_sm+0x1924>)
			keypaditerator--;
 8006360:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8006362:	f8d2 0001 	ldr.w	r0, [r2, #1]
			keypaditerator--;
 8006366:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 8006368:	6010      	str	r0, [r2, #0]
			keypaddecimal = 1;
 800636a:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 800636c:	202e      	movs	r0, #46	; 0x2e
			keypaddecimal = 1;
 800636e:	700b      	strb	r3, [r1, #0]
			keypadarr[keypadlength-1] = num;
 8006370:	7110      	strb	r0, [r2, #4]
			keypaditerator--;
 8006372:	f7fe bba0 	b.w	8004ab6 <keypad_sm+0x4e>
 8006376:	bf00      	nop
 8006378:	50b0f27c 	.word	0x50b0f27c
 800637c:	3fe99a6b 	.word	0x3fe99a6b
 8006380:	200003eb 	.word	0x200003eb
 8006384:	2000000d 	.word	0x2000000d
 8006388:	2000074c 	.word	0x2000074c
 800638c:	20000008 	.word	0x20000008
 8006390:	200003e4 	.word	0x200003e4
 8006394:	20000000 	.word	0x20000000
 8006398:	41400000 	.word	0x41400000
 800639c:	20000a70 	.word	0x20000a70
	while(keypaditerator < 4){
 80063a0:	4dbf      	ldr	r5, [pc, #764]	; (80066a0 <keypad_sm+0x1c38>)
 80063a2:	f995 2000 	ldrsb.w	r2, [r5]
 80063a6:	2a03      	cmp	r2, #3
 80063a8:	f73e ae98 	bgt.w	80050dc <keypad_sm+0x674>
 80063ac:	4bbd      	ldr	r3, [pc, #756]	; (80066a4 <keypad_sm+0x1c3c>)
 80063ae:	4ebe      	ldr	r6, [pc, #760]	; (80066a8 <keypad_sm+0x1c40>)
 80063b0:	3201      	adds	r2, #1
 80063b2:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80063b6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80063ba:	f893 9004 	ldrb.w	r9, [r3, #4]
 80063be:	f896 e000 	ldrb.w	lr, [r6]
 80063c2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80063c6:	789c      	ldrb	r4, [r3, #2]
 80063c8:	7858      	ldrb	r0, [r3, #1]
 80063ca:	7819      	ldrb	r1, [r3, #0]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	e003      	b.n	80063d8 <keypad_sm+0x1970>
	while(keypaditerator < 4){
 80063d0:	46a4      	mov	ip, r4
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80063d6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80063d8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80063da:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80063de:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80063e0:	bf04      	itt	eq
 80063e2:	f04f 0801 	moveq.w	r8, #1
 80063e6:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80063ea:	2a05      	cmp	r2, #5
 80063ec:	46e1      	mov	r9, ip
 80063ee:	d1ef      	bne.n	80063d0 <keypad_sm+0x1968>
 80063f0:	f883 c004 	strb.w	ip, [r3, #4]
 80063f4:	70dc      	strb	r4, [r3, #3]
 80063f6:	7098      	strb	r0, [r3, #2]
 80063f8:	7059      	strb	r1, [r3, #1]
 80063fa:	f883 a000 	strb.w	sl, [r3]
 80063fe:	2304      	movs	r3, #4
 8006400:	702b      	strb	r3, [r5, #0]
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	f43e ae69 	beq.w	80050dc <keypad_sm+0x674>
 800640a:	f886 e000 	strb.w	lr, [r6]
 800640e:	f7fe be65 	b.w	80050dc <keypad_sm+0x674>
		if(keypaditerator < keypadlength-1){
 8006412:	4da3      	ldr	r5, [pc, #652]	; (80066a0 <keypad_sm+0x1c38>)
 8006414:	f995 2000 	ldrsb.w	r2, [r5]
 8006418:	2a03      	cmp	r2, #3
 800641a:	f73e ab4c 	bgt.w	8004ab6 <keypad_sm+0x4e>
			if(keypadarr[4] == '.'){
 800641e:	4ba1      	ldr	r3, [pc, #644]	; (80066a4 <keypad_sm+0x1c3c>)
 8006420:	7919      	ldrb	r1, [r3, #4]
 8006422:	292e      	cmp	r1, #46	; 0x2e
 8006424:	d102      	bne.n	800642c <keypad_sm+0x19c4>
				keypaddecimal = 0;
 8006426:	2000      	movs	r0, #0
 8006428:	499f      	ldr	r1, [pc, #636]	; (80066a8 <keypad_sm+0x1c40>)
 800642a:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 800642c:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800642e:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 8006430:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 8006432:	7118      	strb	r0, [r3, #4]
 8006434:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 8006436:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8006438:	70d8      	strb	r0, [r3, #3]
 800643a:	781a      	ldrb	r2, [r3, #0]
 800643c:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 800643e:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 8006440:	7098      	strb	r0, [r3, #2]
 8006442:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 8006444:	f7fe bb37 	b.w	8004ab6 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 8006448:	4d95      	ldr	r5, [pc, #596]	; (80066a0 <keypad_sm+0x1c38>)
 800644a:	f995 2000 	ldrsb.w	r2, [r5]
 800644e:	2a03      	cmp	r2, #3
 8006450:	f73e ae44 	bgt.w	80050dc <keypad_sm+0x674>
 8006454:	4b93      	ldr	r3, [pc, #588]	; (80066a4 <keypad_sm+0x1c3c>)
 8006456:	4e94      	ldr	r6, [pc, #592]	; (80066a8 <keypad_sm+0x1c40>)
 8006458:	3201      	adds	r2, #1
 800645a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800645e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006462:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006466:	f896 e000 	ldrb.w	lr, [r6]
 800646a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800646e:	789c      	ldrb	r4, [r3, #2]
 8006470:	7858      	ldrb	r0, [r3, #1]
 8006472:	7819      	ldrb	r1, [r3, #0]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	e003      	b.n	8006480 <keypad_sm+0x1a18>
	while(keypaditerator < 4){
 8006478:	46a4      	mov	ip, r4
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800647e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006480:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006482:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006486:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006488:	bf04      	itt	eq
 800648a:	f04f 0801 	moveq.w	r8, #1
 800648e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006492:	2a05      	cmp	r2, #5
 8006494:	46e1      	mov	r9, ip
 8006496:	d1ef      	bne.n	8006478 <keypad_sm+0x1a10>
 8006498:	f883 c004 	strb.w	ip, [r3, #4]
 800649c:	70dc      	strb	r4, [r3, #3]
 800649e:	7098      	strb	r0, [r3, #2]
 80064a0:	7059      	strb	r1, [r3, #1]
 80064a2:	f883 a000 	strb.w	sl, [r3]
 80064a6:	2304      	movs	r3, #4
 80064a8:	702b      	strb	r3, [r5, #0]
 80064aa:	f1b8 0f00 	cmp.w	r8, #0
 80064ae:	f43e ae15 	beq.w	80050dc <keypad_sm+0x674>
 80064b2:	f886 e000 	strb.w	lr, [r6]
 80064b6:	f7fe be11 	b.w	80050dc <keypad_sm+0x674>
			else if(num == '#'){
 80064ba:	2823      	cmp	r0, #35	; 0x23
 80064bc:	f000 83c5 	beq.w	8006c4a <keypad_sm+0x21e2>
			else if(num == '+'){
 80064c0:	282b      	cmp	r0, #43	; 0x2b
 80064c2:	f000 8482 	beq.w	8006dca <keypad_sm+0x2362>
			else if(num == '-'){
 80064c6:	282d      	cmp	r0, #45	; 0x2d
 80064c8:	f000 84cf 	beq.w	8006e6a <keypad_sm+0x2402>
			else if(num == 's'){
 80064cc:	2873      	cmp	r0, #115	; 0x73
 80064ce:	f000 8637 	beq.w	8007140 <keypad_sm+0x26d8>
			else if(num == '['){
 80064d2:	285b      	cmp	r0, #91	; 0x5b
 80064d4:	f000 8682 	beq.w	80071dc <keypad_sm+0x2774>
			else if(num == ']'){
 80064d8:	285d      	cmp	r0, #93	; 0x5d
 80064da:	f000 866e 	beq.w	80071ba <keypad_sm+0x2752>
			else if(num == '*'){
 80064de:	282a      	cmp	r0, #42	; 0x2a
 80064e0:	f000 8663 	beq.w	80071aa <keypad_sm+0x2742>
			else if(num == '/'){
 80064e4:	282f      	cmp	r0, #47	; 0x2f
 80064e6:	f47e aae6 	bne.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_main){
 80064ea:	4b70      	ldr	r3, [pc, #448]	; (80066ac <keypad_sm+0x1c44>)
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	f000 8657 	beq.w	80071a2 <keypad_sm+0x273a>
					chstat_main = 0;
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	f7fe badd 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 80064fc:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80064fe:	4d68      	ldr	r5, [pc, #416]	; (80066a0 <keypad_sm+0x1c38>)
				kpenum = WAIT;
 8006500:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006502:	f995 2000 	ldrsb.w	r2, [r5]
 8006506:	2a03      	cmp	r2, #3
 8006508:	f73e aad5 	bgt.w	8004ab6 <keypad_sm+0x4e>
 800650c:	4b65      	ldr	r3, [pc, #404]	; (80066a4 <keypad_sm+0x1c3c>)
 800650e:	4e66      	ldr	r6, [pc, #408]	; (80066a8 <keypad_sm+0x1c40>)
 8006510:	3201      	adds	r2, #1
 8006512:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006514:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006518:	f893 e004 	ldrb.w	lr, [r3, #4]
 800651c:	f896 c000 	ldrb.w	ip, [r6]
 8006520:	78df      	ldrb	r7, [r3, #3]
 8006522:	789c      	ldrb	r4, [r3, #2]
 8006524:	7858      	ldrb	r0, [r3, #1]
 8006526:	7819      	ldrb	r1, [r3, #0]
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	e003      	b.n	8006534 <keypad_sm+0x1acc>
	while(keypaditerator < 4){
 800652c:	4627      	mov	r7, r4
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006532:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006534:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006536:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 800653a:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 800653c:	bf04      	itt	eq
 800653e:	f04f 0c00 	moveq.w	ip, #0
 8006542:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006546:	2a05      	cmp	r2, #5
 8006548:	46be      	mov	lr, r7
 800654a:	d1ef      	bne.n	800652c <keypad_sm+0x1ac4>
 800654c:	711f      	strb	r7, [r3, #4]
 800654e:	70dc      	strb	r4, [r3, #3]
 8006550:	7098      	strb	r0, [r3, #2]
 8006552:	7059      	strb	r1, [r3, #1]
 8006554:	f883 9000 	strb.w	r9, [r3]
 8006558:	2304      	movs	r3, #4
 800655a:	702b      	strb	r3, [r5, #0]
 800655c:	f1b8 0f00 	cmp.w	r8, #0
 8006560:	f43e aaa9 	beq.w	8004ab6 <keypad_sm+0x4e>
 8006564:	f886 c000 	strb.w	ip, [r6]
 8006568:	f7fe baa5 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 800656c:	f7fd fdb4 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006570:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006572:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006574:	f7fa fdd0 	bl	8001118 <__aeabi_fcmpge>
 8006578:	b150      	cbz	r0, 8006590 <keypad_sm+0x1b28>
 800657a:	4628      	mov	r0, r5
 800657c:	f7f9 ff6c 	bl	8000458 <__aeabi_f2d>
 8006580:	a345      	add	r3, pc, #276	; (adr r3, 8006698 <keypad_sm+0x1c30>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f7fa fa3b 	bl	8000a00 <__aeabi_dcmple>
 800658a:	b108      	cbz	r0, 8006590 <keypad_sm+0x1b28>
					amp_set_aux = translate_keypad();
 800658c:	4b48      	ldr	r3, [pc, #288]	; (80066b0 <keypad_sm+0x1c48>)
 800658e:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006590:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006592:	4d43      	ldr	r5, [pc, #268]	; (80066a0 <keypad_sm+0x1c38>)
				kpenum = WAIT;
 8006594:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 8006596:	f995 2000 	ldrsb.w	r2, [r5]
 800659a:	2a03      	cmp	r2, #3
 800659c:	f73e aa8b 	bgt.w	8004ab6 <keypad_sm+0x4e>
 80065a0:	4b40      	ldr	r3, [pc, #256]	; (80066a4 <keypad_sm+0x1c3c>)
 80065a2:	4e41      	ldr	r6, [pc, #260]	; (80066a8 <keypad_sm+0x1c40>)
			keypadarr[0] = num;
 80065a4:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80065a8:	f893 8004 	ldrb.w	r8, [r3, #4]
 80065ac:	f896 e000 	ldrb.w	lr, [r6]
 80065b0:	f893 c003 	ldrb.w	ip, [r3, #3]
 80065b4:	789c      	ldrb	r4, [r3, #2]
 80065b6:	7858      	ldrb	r0, [r3, #1]
 80065b8:	7819      	ldrb	r1, [r3, #0]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	e003      	b.n	80065c6 <keypad_sm+0x1b5e>
	while(keypaditerator < 4){
 80065be:	46a4      	mov	ip, r4
 80065c0:	4604      	mov	r4, r0
 80065c2:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80065c4:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80065c6:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80065c8:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80065cc:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80065ce:	bf04      	itt	eq
 80065d0:	f04f 0e00 	moveq.w	lr, #0
 80065d4:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 80065d6:	2a04      	cmp	r2, #4
 80065d8:	46e0      	mov	r8, ip
 80065da:	d1f0      	bne.n	80065be <keypad_sm+0x1b56>
 80065dc:	702a      	strb	r2, [r5, #0]
 80065de:	f883 c004 	strb.w	ip, [r3, #4]
 80065e2:	70dc      	strb	r4, [r3, #3]
 80065e4:	7098      	strb	r0, [r3, #2]
 80065e6:	7059      	strb	r1, [r3, #1]
 80065e8:	f883 9000 	strb.w	r9, [r3]
 80065ec:	2f00      	cmp	r7, #0
 80065ee:	f43e aa62 	beq.w	8004ab6 <keypad_sm+0x4e>
 80065f2:	f886 e000 	strb.w	lr, [r6]
 80065f6:	f7fe ba5e 	b.w	8004ab6 <keypad_sm+0x4e>
}
 80065fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_keypad('z');
 80065fe:	f7fb b90d 	b.w	800181c <update_keypad.constprop.0>
	float temp = translate_keypad();
 8006602:	f7fd fd69 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006606:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006608:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800660a:	f7fa fd85 	bl	8001118 <__aeabi_fcmpge>
 800660e:	b158      	cbz	r0, 8006628 <keypad_sm+0x1bc0>
 8006610:	4628      	mov	r0, r5
 8006612:	4928      	ldr	r1, [pc, #160]	; (80066b4 <keypad_sm+0x1c4c>)
 8006614:	f7fa fd76 	bl	8001104 <__aeabi_fcmple>
 8006618:	b130      	cbz	r0, 8006628 <keypad_sm+0x1bc0>
					volt_set_main_old = volt_set_main;
 800661a:	4d27      	ldr	r5, [pc, #156]	; (80066b8 <keypad_sm+0x1c50>)
 800661c:	4b27      	ldr	r3, [pc, #156]	; (80066bc <keypad_sm+0x1c54>)
 800661e:	682a      	ldr	r2, [r5, #0]
 8006620:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006622:	f7fd fd59 	bl	80040d8 <translate_keypad>
 8006626:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8006628:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800662a:	4d1d      	ldr	r5, [pc, #116]	; (80066a0 <keypad_sm+0x1c38>)
				kpenum = WAIT;
 800662c:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800662e:	f995 2000 	ldrsb.w	r2, [r5]
 8006632:	2a03      	cmp	r2, #3
 8006634:	f73e aa3f 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8006638:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <keypad_sm+0x1c3c>)
 800663a:	4e1b      	ldr	r6, [pc, #108]	; (80066a8 <keypad_sm+0x1c40>)
 800663c:	3201      	adds	r2, #1
 800663e:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006640:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006644:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006648:	f896 c000 	ldrb.w	ip, [r6]
 800664c:	78df      	ldrb	r7, [r3, #3]
 800664e:	789c      	ldrb	r4, [r3, #2]
 8006650:	7858      	ldrb	r0, [r3, #1]
 8006652:	7819      	ldrb	r1, [r3, #0]
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	e003      	b.n	8006660 <keypad_sm+0x1bf8>
	while(keypaditerator < 4){
 8006658:	4627      	mov	r7, r4
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800665e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006660:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006662:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006666:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006668:	bf04      	itt	eq
 800666a:	f04f 0c00 	moveq.w	ip, #0
 800666e:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006672:	2a05      	cmp	r2, #5
 8006674:	46be      	mov	lr, r7
 8006676:	d1ef      	bne.n	8006658 <keypad_sm+0x1bf0>
 8006678:	711f      	strb	r7, [r3, #4]
 800667a:	70dc      	strb	r4, [r3, #3]
 800667c:	7098      	strb	r0, [r3, #2]
 800667e:	7059      	strb	r1, [r3, #1]
 8006680:	f883 9000 	strb.w	r9, [r3]
 8006684:	2304      	movs	r3, #4
 8006686:	702b      	strb	r3, [r5, #0]
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	f43e aa13 	beq.w	8004ab6 <keypad_sm+0x4e>
 8006690:	f886 c000 	strb.w	ip, [r6]
 8006694:	f7fe ba0f 	b.w	8004ab6 <keypad_sm+0x4e>
 8006698:	50b0f27c 	.word	0x50b0f27c
 800669c:	3fe99a6b 	.word	0x3fe99a6b
 80066a0:	2000000d 	.word	0x2000000d
 80066a4:	20000008 	.word	0x20000008
 80066a8:	2000074c 	.word	0x2000074c
 80066ac:	200003eb 	.word	0x200003eb
 80066b0:	200003e0 	.word	0x200003e0
 80066b4:	41400000 	.word	0x41400000
 80066b8:	20000a74 	.word	0x20000a74
 80066bc:	20000a78 	.word	0x20000a78
	float temp = translate_keypad();
 80066c0:	f7fd fd0a 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80066c4:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80066c6:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80066c8:	f7fa fd26 	bl	8001118 <__aeabi_fcmpge>
 80066cc:	b130      	cbz	r0, 80066dc <keypad_sm+0x1c74>
 80066ce:	4628      	mov	r0, r5
 80066d0:	49bb      	ldr	r1, [pc, #748]	; (80069c0 <keypad_sm+0x1f58>)
 80066d2:	f7fa fd17 	bl	8001104 <__aeabi_fcmple>
 80066d6:	b108      	cbz	r0, 80066dc <keypad_sm+0x1c74>
					volt_set_aux = translate_keypad();
 80066d8:	4bba      	ldr	r3, [pc, #744]	; (80069c4 <keypad_sm+0x1f5c>)
 80066da:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80066dc:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80066de:	4dba      	ldr	r5, [pc, #744]	; (80069c8 <keypad_sm+0x1f60>)
				kpenum = WAIT;
 80066e0:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80066e2:	f995 2000 	ldrsb.w	r2, [r5]
 80066e6:	2a03      	cmp	r2, #3
 80066e8:	f73e acf8 	bgt.w	80050dc <keypad_sm+0x674>
 80066ec:	4bb7      	ldr	r3, [pc, #732]	; (80069cc <keypad_sm+0x1f64>)
 80066ee:	4eb8      	ldr	r6, [pc, #736]	; (80069d0 <keypad_sm+0x1f68>)
 80066f0:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80066f2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80066f6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80066fa:	f896 8000 	ldrb.w	r8, [r6]
 80066fe:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006702:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006706:	785c      	ldrb	r4, [r3, #1]
 8006708:	7818      	ldrb	r0, [r3, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	e003      	b.n	8006716 <keypad_sm+0x1cae>
	while(keypaditerator < 4){
 800670e:	46e6      	mov	lr, ip
 8006710:	46a4      	mov	ip, r4
 8006712:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006714:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006716:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006718:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800671c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800671e:	bf04      	itt	eq
 8006720:	2101      	moveq	r1, #1
 8006722:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8006726:	2a05      	cmp	r2, #5
 8006728:	46f1      	mov	r9, lr
 800672a:	d1f0      	bne.n	800670e <keypad_sm+0x1ca6>
 800672c:	f883 e004 	strb.w	lr, [r3, #4]
 8006730:	f883 c003 	strb.w	ip, [r3, #3]
 8006734:	709c      	strb	r4, [r3, #2]
 8006736:	7058      	strb	r0, [r3, #1]
 8006738:	f883 a000 	strb.w	sl, [r3]
 800673c:	2304      	movs	r3, #4
 800673e:	702b      	strb	r3, [r5, #0]
 8006740:	2900      	cmp	r1, #0
 8006742:	f43e accb 	beq.w	80050dc <keypad_sm+0x674>
 8006746:	f886 8000 	strb.w	r8, [r6]
 800674a:	f7fe bcc7 	b.w	80050dc <keypad_sm+0x674>
		if(keypaditerator < keypadlength-1){
 800674e:	4d9e      	ldr	r5, [pc, #632]	; (80069c8 <keypad_sm+0x1f60>)
 8006750:	f995 2000 	ldrsb.w	r2, [r5]
 8006754:	2a03      	cmp	r2, #3
 8006756:	f73e a9ae 	bgt.w	8004ab6 <keypad_sm+0x4e>
			if(keypadarr[4] == '.'){
 800675a:	4b9c      	ldr	r3, [pc, #624]	; (80069cc <keypad_sm+0x1f64>)
 800675c:	7919      	ldrb	r1, [r3, #4]
 800675e:	292e      	cmp	r1, #46	; 0x2e
 8006760:	d102      	bne.n	8006768 <keypad_sm+0x1d00>
				keypaddecimal = 0;
 8006762:	2000      	movs	r0, #0
 8006764:	499a      	ldr	r1, [pc, #616]	; (80069d0 <keypad_sm+0x1f68>)
 8006766:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8006768:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800676a:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 800676c:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 800676e:	7118      	strb	r0, [r3, #4]
 8006770:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 8006772:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8006774:	70d8      	strb	r0, [r3, #3]
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 800677a:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 800677c:	7098      	strb	r0, [r3, #2]
 800677e:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 8006780:	f7fe b999 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006784:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006786:	4d90      	ldr	r5, [pc, #576]	; (80069c8 <keypad_sm+0x1f60>)
				kpenum = WAIT;
 8006788:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800678a:	f995 2000 	ldrsb.w	r2, [r5]
 800678e:	2a03      	cmp	r2, #3
 8006790:	f73e a991 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8006794:	4b8d      	ldr	r3, [pc, #564]	; (80069cc <keypad_sm+0x1f64>)
 8006796:	4e8e      	ldr	r6, [pc, #568]	; (80069d0 <keypad_sm+0x1f68>)
 8006798:	3201      	adds	r2, #1
 800679a:	4688      	mov	r8, r1
			keypadarr[0] = num;
 800679c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80067a0:	f893 e004 	ldrb.w	lr, [r3, #4]
 80067a4:	f896 c000 	ldrb.w	ip, [r6]
 80067a8:	78df      	ldrb	r7, [r3, #3]
 80067aa:	789c      	ldrb	r4, [r3, #2]
 80067ac:	7858      	ldrb	r0, [r3, #1]
 80067ae:	7819      	ldrb	r1, [r3, #0]
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	e003      	b.n	80067bc <keypad_sm+0x1d54>
	while(keypaditerator < 4){
 80067b4:	4627      	mov	r7, r4
 80067b6:	4604      	mov	r4, r0
 80067b8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80067ba:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80067bc:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80067be:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 80067c2:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80067c4:	bf04      	itt	eq
 80067c6:	f04f 0c00 	moveq.w	ip, #0
 80067ca:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 80067ce:	2a05      	cmp	r2, #5
 80067d0:	46be      	mov	lr, r7
 80067d2:	d1ef      	bne.n	80067b4 <keypad_sm+0x1d4c>
 80067d4:	711f      	strb	r7, [r3, #4]
 80067d6:	70dc      	strb	r4, [r3, #3]
 80067d8:	7098      	strb	r0, [r3, #2]
 80067da:	7059      	strb	r1, [r3, #1]
 80067dc:	f883 9000 	strb.w	r9, [r3]
 80067e0:	2304      	movs	r3, #4
 80067e2:	702b      	strb	r3, [r5, #0]
 80067e4:	f1b8 0f00 	cmp.w	r8, #0
 80067e8:	f43e a965 	beq.w	8004ab6 <keypad_sm+0x4e>
 80067ec:	f886 c000 	strb.w	ip, [r6]
 80067f0:	f7fe b961 	b.w	8004ab6 <keypad_sm+0x4e>
 80067f4:	4d74      	ldr	r5, [pc, #464]	; (80069c8 <keypad_sm+0x1f60>)
 80067f6:	f995 2000 	ldrsb.w	r2, [r5]
 80067fa:	2a03      	cmp	r2, #3
 80067fc:	f73e ac6e 	bgt.w	80050dc <keypad_sm+0x674>
 8006800:	4b72      	ldr	r3, [pc, #456]	; (80069cc <keypad_sm+0x1f64>)
 8006802:	4e73      	ldr	r6, [pc, #460]	; (80069d0 <keypad_sm+0x1f68>)
 8006804:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006808:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800680c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006810:	f896 e000 	ldrb.w	lr, [r6]
 8006814:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006818:	789c      	ldrb	r4, [r3, #2]
 800681a:	7858      	ldrb	r0, [r3, #1]
 800681c:	7819      	ldrb	r1, [r3, #0]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	e003      	b.n	800682a <keypad_sm+0x1dc2>
	while(keypaditerator < 4){
 8006822:	46a4      	mov	ip, r4
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006828:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800682a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800682c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006830:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006832:	bf04      	itt	eq
 8006834:	f04f 0801 	moveq.w	r8, #1
 8006838:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800683c:	2a04      	cmp	r2, #4
 800683e:	46e1      	mov	r9, ip
 8006840:	d1ef      	bne.n	8006822 <keypad_sm+0x1dba>
 8006842:	702a      	strb	r2, [r5, #0]
 8006844:	f883 c004 	strb.w	ip, [r3, #4]
 8006848:	70dc      	strb	r4, [r3, #3]
 800684a:	7098      	strb	r0, [r3, #2]
 800684c:	7059      	strb	r1, [r3, #1]
 800684e:	f883 a000 	strb.w	sl, [r3]
 8006852:	f1b8 0f00 	cmp.w	r8, #0
 8006856:	f43e ac41 	beq.w	80050dc <keypad_sm+0x674>
 800685a:	f886 e000 	strb.w	lr, [r6]
 800685e:	f7fe bc3d 	b.w	80050dc <keypad_sm+0x674>
				fill_keypad(0, volt_set_aux);
 8006862:	4b58      	ldr	r3, [pc, #352]	; (80069c4 <keypad_sm+0x1f5c>)
 8006864:	2000      	movs	r0, #0
 8006866:	6819      	ldr	r1, [r3, #0]
 8006868:	f7fd fdb2 	bl	80043d0 <fill_keypad>
				encmode = 1;
 800686c:	2101      	movs	r1, #1
				encpos = 0;
 800686e:	2200      	movs	r2, #0
 8006870:	4b58      	ldr	r3, [pc, #352]	; (80069d4 <keypad_sm+0x1f6c>)
				encmode = 1;
 8006872:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	f7fe b91e 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 800687a:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800687c:	4d52      	ldr	r5, [pc, #328]	; (80069c8 <keypad_sm+0x1f60>)
				kpenum = WAIT;
 800687e:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006880:	f995 2000 	ldrsb.w	r2, [r5]
 8006884:	2a03      	cmp	r2, #3
 8006886:	f73e a916 	bgt.w	8004ab6 <keypad_sm+0x4e>
 800688a:	4b50      	ldr	r3, [pc, #320]	; (80069cc <keypad_sm+0x1f64>)
 800688c:	4e50      	ldr	r6, [pc, #320]	; (80069d0 <keypad_sm+0x1f68>)
			keypadarr[0] = num;
 800688e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006892:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006896:	7830      	ldrb	r0, [r6, #0]
 8006898:	f893 e003 	ldrb.w	lr, [r3, #3]
 800689c:	f893 c002 	ldrb.w	ip, [r3, #2]
 80068a0:	785f      	ldrb	r7, [r3, #1]
 80068a2:	781c      	ldrb	r4, [r3, #0]
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	e003      	b.n	80068b0 <keypad_sm+0x1e48>
	while(keypaditerator < 4){
 80068a8:	46e6      	mov	lr, ip
 80068aa:	46bc      	mov	ip, r7
 80068ac:	4627      	mov	r7, r4
			keypadarr[0] = num;
 80068ae:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 80068b0:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80068b2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80068b6:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80068b8:	bf04      	itt	eq
 80068ba:	2000      	moveq	r0, #0
 80068bc:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 80068be:	2a04      	cmp	r2, #4
 80068c0:	46f0      	mov	r8, lr
 80068c2:	d1f1      	bne.n	80068a8 <keypad_sm+0x1e40>
 80068c4:	702a      	strb	r2, [r5, #0]
 80068c6:	f883 e004 	strb.w	lr, [r3, #4]
 80068ca:	f883 c003 	strb.w	ip, [r3, #3]
 80068ce:	709f      	strb	r7, [r3, #2]
 80068d0:	705c      	strb	r4, [r3, #1]
 80068d2:	f883 9000 	strb.w	r9, [r3]
 80068d6:	2900      	cmp	r1, #0
 80068d8:	f43e a8ed 	beq.w	8004ab6 <keypad_sm+0x4e>
 80068dc:	7030      	strb	r0, [r6, #0]
 80068de:	f7fe b8ea 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 80068e2:	4b3d      	ldr	r3, [pc, #244]	; (80069d8 <keypad_sm+0x1f70>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8318 	beq.w	8006f1c <keypad_sm+0x24b4>
					chstat_aux_tx = 0;
 80068ec:	2200      	movs	r2, #0
 80068ee:	4b3b      	ldr	r3, [pc, #236]	; (80069dc <keypad_sm+0x1f74>)
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	f7fe b8e0 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 80068f6:	f7fd fbef 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80068fa:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80068fc:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80068fe:	f7fa fc0b 	bl	8001118 <__aeabi_fcmpge>
 8006902:	b158      	cbz	r0, 800691c <keypad_sm+0x1eb4>
 8006904:	4628      	mov	r0, r5
 8006906:	492e      	ldr	r1, [pc, #184]	; (80069c0 <keypad_sm+0x1f58>)
 8006908:	f7fa fbfc 	bl	8001104 <__aeabi_fcmple>
 800690c:	b130      	cbz	r0, 800691c <keypad_sm+0x1eb4>
					volt_set_main_old = volt_set_main;
 800690e:	4d34      	ldr	r5, [pc, #208]	; (80069e0 <keypad_sm+0x1f78>)
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <keypad_sm+0x1f7c>)
 8006912:	682a      	ldr	r2, [r5, #0]
 8006914:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006916:	f7fd fbdf 	bl	80040d8 <translate_keypad>
 800691a:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 800691c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800691e:	4d2a      	ldr	r5, [pc, #168]	; (80069c8 <keypad_sm+0x1f60>)
				kpenum = WAIT;
 8006920:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006922:	f995 2000 	ldrsb.w	r2, [r5]
 8006926:	2a03      	cmp	r2, #3
 8006928:	f73e abd8 	bgt.w	80050dc <keypad_sm+0x674>
 800692c:	4b27      	ldr	r3, [pc, #156]	; (80069cc <keypad_sm+0x1f64>)
 800692e:	4e28      	ldr	r6, [pc, #160]	; (80069d0 <keypad_sm+0x1f68>)
 8006930:	3201      	adds	r2, #1
 8006932:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006934:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006938:	f893 e004 	ldrb.w	lr, [r3, #4]
 800693c:	f896 9000 	ldrb.w	r9, [r6]
 8006940:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006944:	789c      	ldrb	r4, [r3, #2]
 8006946:	7858      	ldrb	r0, [r3, #1]
 8006948:	7819      	ldrb	r1, [r3, #0]
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	e003      	b.n	8006956 <keypad_sm+0x1eee>
	while(keypaditerator < 4){
 800694e:	46a4      	mov	ip, r4
 8006950:	4604      	mov	r4, r0
 8006952:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006954:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006956:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006958:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 800695c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800695e:	bf04      	itt	eq
 8006960:	f04f 0801 	moveq.w	r8, #1
 8006964:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006968:	2a05      	cmp	r2, #5
 800696a:	46e6      	mov	lr, ip
 800696c:	d1ef      	bne.n	800694e <keypad_sm+0x1ee6>
 800696e:	f883 c004 	strb.w	ip, [r3, #4]
 8006972:	70dc      	strb	r4, [r3, #3]
 8006974:	7098      	strb	r0, [r3, #2]
 8006976:	7059      	strb	r1, [r3, #1]
 8006978:	f883 a000 	strb.w	sl, [r3]
 800697c:	2304      	movs	r3, #4
 800697e:	702b      	strb	r3, [r5, #0]
 8006980:	f1b8 0f00 	cmp.w	r8, #0
 8006984:	f43e abaa 	beq.w	80050dc <keypad_sm+0x674>
 8006988:	f886 9000 	strb.w	r9, [r6]
 800698c:	f7fe bba6 	b.w	80050dc <keypad_sm+0x674>
 8006990:	4d0d      	ldr	r5, [pc, #52]	; (80069c8 <keypad_sm+0x1f60>)
 8006992:	f995 2000 	ldrsb.w	r2, [r5]
 8006996:	2a03      	cmp	r2, #3
 8006998:	f73e aba0 	bgt.w	80050dc <keypad_sm+0x674>
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <keypad_sm+0x1f64>)
 800699e:	4e0c      	ldr	r6, [pc, #48]	; (80069d0 <keypad_sm+0x1f68>)
 80069a0:	3201      	adds	r2, #1
 80069a2:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80069a6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80069aa:	f893 9004 	ldrb.w	r9, [r3, #4]
 80069ae:	f896 e000 	ldrb.w	lr, [r6]
 80069b2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80069b6:	789c      	ldrb	r4, [r3, #2]
 80069b8:	7858      	ldrb	r0, [r3, #1]
 80069ba:	7819      	ldrb	r1, [r3, #0]
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	e017      	b.n	80069f0 <keypad_sm+0x1f88>
 80069c0:	41400000 	.word	0x41400000
 80069c4:	20000a70 	.word	0x20000a70
 80069c8:	2000000d 	.word	0x2000000d
 80069cc:	20000008 	.word	0x20000008
 80069d0:	2000074c 	.word	0x2000074c
 80069d4:	200003f5 	.word	0x200003f5
 80069d8:	200003e9 	.word	0x200003e9
 80069dc:	200003ea 	.word	0x200003ea
 80069e0:	20000a74 	.word	0x20000a74
 80069e4:	20000a78 	.word	0x20000a78
	while(keypaditerator < 4){
 80069e8:	46a4      	mov	ip, r4
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80069ee:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80069f0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80069f2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80069f6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80069f8:	bf04      	itt	eq
 80069fa:	f04f 0801 	moveq.w	r8, #1
 80069fe:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006a02:	2a05      	cmp	r2, #5
 8006a04:	46e1      	mov	r9, ip
 8006a06:	d1ef      	bne.n	80069e8 <keypad_sm+0x1f80>
 8006a08:	f883 c004 	strb.w	ip, [r3, #4]
 8006a0c:	70dc      	strb	r4, [r3, #3]
 8006a0e:	7098      	strb	r0, [r3, #2]
 8006a10:	7059      	strb	r1, [r3, #1]
 8006a12:	f883 a000 	strb.w	sl, [r3]
 8006a16:	2304      	movs	r3, #4
 8006a18:	702b      	strb	r3, [r5, #0]
 8006a1a:	f1b8 0f00 	cmp.w	r8, #0
 8006a1e:	f43e ab5d 	beq.w	80050dc <keypad_sm+0x674>
 8006a22:	f886 e000 	strb.w	lr, [r6]
 8006a26:	f7fe bb59 	b.w	80050dc <keypad_sm+0x674>
	float temp = translate_keypad();
 8006a2a:	f7fd fb55 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006a2e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006a30:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006a32:	f7fa fb71 	bl	8001118 <__aeabi_fcmpge>
 8006a36:	b130      	cbz	r0, 8006a46 <keypad_sm+0x1fde>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	49bd      	ldr	r1, [pc, #756]	; (8006d30 <keypad_sm+0x22c8>)
 8006a3c:	f7fa fb62 	bl	8001104 <__aeabi_fcmple>
 8006a40:	b108      	cbz	r0, 8006a46 <keypad_sm+0x1fde>
					amp_set_aux = translate_keypad();
 8006a42:	4bbc      	ldr	r3, [pc, #752]	; (8006d34 <keypad_sm+0x22cc>)
 8006a44:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006a46:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006a48:	4dbb      	ldr	r5, [pc, #748]	; (8006d38 <keypad_sm+0x22d0>)
				kpenum = WAIT;
 8006a4a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006a4c:	f995 2000 	ldrsb.w	r2, [r5]
 8006a50:	2a03      	cmp	r2, #3
 8006a52:	f73e ab43 	bgt.w	80050dc <keypad_sm+0x674>
 8006a56:	4bb9      	ldr	r3, [pc, #740]	; (8006d3c <keypad_sm+0x22d4>)
 8006a58:	4eb9      	ldr	r6, [pc, #740]	; (8006d40 <keypad_sm+0x22d8>)
 8006a5a:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006a5c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006a60:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006a64:	7831      	ldrb	r1, [r6, #0]
 8006a66:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006a6a:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006a6e:	785c      	ldrb	r4, [r3, #1]
 8006a70:	7818      	ldrb	r0, [r3, #0]
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	e003      	b.n	8006a7e <keypad_sm+0x2016>
	while(keypaditerator < 4){
 8006a76:	46e6      	mov	lr, ip
 8006a78:	46a4      	mov	ip, r4
 8006a7a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006a7c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006a7e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006a80:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006a84:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006a86:	bf04      	itt	eq
 8006a88:	f04f 0901 	moveq.w	r9, #1
 8006a8c:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006a8e:	2a04      	cmp	r2, #4
 8006a90:	46f0      	mov	r8, lr
 8006a92:	d1f0      	bne.n	8006a76 <keypad_sm+0x200e>
 8006a94:	702a      	strb	r2, [r5, #0]
 8006a96:	f883 e004 	strb.w	lr, [r3, #4]
 8006a9a:	f883 c003 	strb.w	ip, [r3, #3]
 8006a9e:	709c      	strb	r4, [r3, #2]
 8006aa0:	7058      	strb	r0, [r3, #1]
 8006aa2:	f883 a000 	strb.w	sl, [r3]
 8006aa6:	f1b9 0f00 	cmp.w	r9, #0
 8006aaa:	f43e ab17 	beq.w	80050dc <keypad_sm+0x674>
 8006aae:	7031      	strb	r1, [r6, #0]
 8006ab0:	f7fe bb14 	b.w	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 8006ab4:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006ab6:	4da0      	ldr	r5, [pc, #640]	; (8006d38 <keypad_sm+0x22d0>)
				kpenum = WAIT;
 8006ab8:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006aba:	f995 2000 	ldrsb.w	r2, [r5]
 8006abe:	2a03      	cmp	r2, #3
 8006ac0:	f73e ab0c 	bgt.w	80050dc <keypad_sm+0x674>
 8006ac4:	4b9d      	ldr	r3, [pc, #628]	; (8006d3c <keypad_sm+0x22d4>)
 8006ac6:	4e9e      	ldr	r6, [pc, #632]	; (8006d40 <keypad_sm+0x22d8>)
 8006ac8:	3201      	adds	r2, #1
 8006aca:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006acc:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006ad0:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006ad4:	f896 9000 	ldrb.w	r9, [r6]
 8006ad8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006adc:	789c      	ldrb	r4, [r3, #2]
 8006ade:	7858      	ldrb	r0, [r3, #1]
 8006ae0:	7819      	ldrb	r1, [r3, #0]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	e003      	b.n	8006aee <keypad_sm+0x2086>
	while(keypaditerator < 4){
 8006ae6:	46a4      	mov	ip, r4
 8006ae8:	4604      	mov	r4, r0
 8006aea:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006aec:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006aee:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006af0:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006af4:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006af6:	bf04      	itt	eq
 8006af8:	f04f 0801 	moveq.w	r8, #1
 8006afc:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006b00:	2a05      	cmp	r2, #5
 8006b02:	46e6      	mov	lr, ip
 8006b04:	d1ef      	bne.n	8006ae6 <keypad_sm+0x207e>
 8006b06:	f883 c004 	strb.w	ip, [r3, #4]
 8006b0a:	70dc      	strb	r4, [r3, #3]
 8006b0c:	7098      	strb	r0, [r3, #2]
 8006b0e:	7059      	strb	r1, [r3, #1]
 8006b10:	f883 a000 	strb.w	sl, [r3]
 8006b14:	2304      	movs	r3, #4
 8006b16:	702b      	strb	r3, [r5, #0]
 8006b18:	f1b8 0f00 	cmp.w	r8, #0
 8006b1c:	f43e aade 	beq.w	80050dc <keypad_sm+0x674>
 8006b20:	f886 9000 	strb.w	r9, [r6]
 8006b24:	f7fe bada 	b.w	80050dc <keypad_sm+0x674>
	float temp = translate_keypad();
 8006b28:	f7fd fad6 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b2c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006b2e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b30:	f7fa faf2 	bl	8001118 <__aeabi_fcmpge>
 8006b34:	b190      	cbz	r0, 8006b5c <keypad_sm+0x20f4>
 8006b36:	4628      	mov	r0, r5
 8006b38:	f7f9 fc8e 	bl	8000458 <__aeabi_f2d>
 8006b3c:	a37a      	add	r3, pc, #488	; (adr r3, 8006d28 <keypad_sm+0x22c0>)
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 ff5d 	bl	8000a00 <__aeabi_dcmple>
 8006b46:	b148      	cbz	r0, 8006b5c <keypad_sm+0x20f4>
					amp_set_main_old = amp_set_main;
 8006b48:	4d7e      	ldr	r5, [pc, #504]	; (8006d44 <keypad_sm+0x22dc>)
 8006b4a:	4b7f      	ldr	r3, [pc, #508]	; (8006d48 <keypad_sm+0x22e0>)
 8006b4c:	682a      	ldr	r2, [r5, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006b50:	f7fd fac2 	bl	80040d8 <translate_keypad>
 8006b54:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006b56:	6828      	ldr	r0, [r5, #0]
 8006b58:	f7fa ff0e 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006b5c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006b5e:	4d76      	ldr	r5, [pc, #472]	; (8006d38 <keypad_sm+0x22d0>)
				kpenum = WAIT;
 8006b60:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006b62:	f995 2000 	ldrsb.w	r2, [r5]
 8006b66:	2a03      	cmp	r2, #3
 8006b68:	f73d afa5 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8006b6c:	4b73      	ldr	r3, [pc, #460]	; (8006d3c <keypad_sm+0x22d4>)
 8006b6e:	4e74      	ldr	r6, [pc, #464]	; (8006d40 <keypad_sm+0x22d8>)
			keypadarr[0] = num;
 8006b70:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006b74:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006b78:	7830      	ldrb	r0, [r6, #0]
 8006b7a:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006b7e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006b82:	785f      	ldrb	r7, [r3, #1]
 8006b84:	781c      	ldrb	r4, [r3, #0]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	e003      	b.n	8006b92 <keypad_sm+0x212a>
	while(keypaditerator < 4){
 8006b8a:	46e6      	mov	lr, ip
 8006b8c:	46bc      	mov	ip, r7
 8006b8e:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006b90:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006b92:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006b94:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006b98:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006b9a:	bf04      	itt	eq
 8006b9c:	2000      	moveq	r0, #0
 8006b9e:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006ba0:	2a04      	cmp	r2, #4
 8006ba2:	46f0      	mov	r8, lr
 8006ba4:	d1f1      	bne.n	8006b8a <keypad_sm+0x2122>
 8006ba6:	702a      	strb	r2, [r5, #0]
 8006ba8:	f883 e004 	strb.w	lr, [r3, #4]
 8006bac:	f883 c003 	strb.w	ip, [r3, #3]
 8006bb0:	709f      	strb	r7, [r3, #2]
 8006bb2:	705c      	strb	r4, [r3, #1]
 8006bb4:	f883 9000 	strb.w	r9, [r3]
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	f43d af7c 	beq.w	8004ab6 <keypad_sm+0x4e>
 8006bbe:	7030      	strb	r0, [r6, #0]
 8006bc0:	f7fd bf79 	b.w	8004ab6 <keypad_sm+0x4e>
				if(encpos == 1){
 8006bc4:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <keypad_sm+0x22e4>)
 8006bc6:	f993 2000 	ldrsb.w	r2, [r3]
 8006bca:	2a01      	cmp	r2, #1
 8006bcc:	f000 81fe 	beq.w	8006fcc <keypad_sm+0x2564>
				else if(encpos < 4){
 8006bd0:	2a03      	cmp	r2, #3
 8006bd2:	f300 81f7 	bgt.w	8006fc4 <keypad_sm+0x255c>
					encpos++;
 8006bd6:	3201      	adds	r2, #1
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	f7fd bf6c 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006bde:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006be0:	4d55      	ldr	r5, [pc, #340]	; (8006d38 <keypad_sm+0x22d0>)
				kpenum = WAIT;
 8006be2:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006be4:	f995 2000 	ldrsb.w	r2, [r5]
 8006be8:	2a03      	cmp	r2, #3
 8006bea:	f73e aa77 	bgt.w	80050dc <keypad_sm+0x674>
 8006bee:	4b53      	ldr	r3, [pc, #332]	; (8006d3c <keypad_sm+0x22d4>)
 8006bf0:	4e53      	ldr	r6, [pc, #332]	; (8006d40 <keypad_sm+0x22d8>)
			keypadarr[0] = num;
 8006bf2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006bf6:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006bfa:	7830      	ldrb	r0, [r6, #0]
 8006bfc:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006c00:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006c04:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006c08:	781c      	ldrb	r4, [r3, #0]
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	e003      	b.n	8006c16 <keypad_sm+0x21ae>
	while(keypaditerator < 4){
 8006c0e:	46f0      	mov	r8, lr
 8006c10:	46e6      	mov	lr, ip
 8006c12:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8006c14:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006c16:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c18:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006c1c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c1e:	bf04      	itt	eq
 8006c20:	2101      	moveq	r1, #1
 8006c22:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 8006c24:	2a04      	cmp	r2, #4
 8006c26:	46c1      	mov	r9, r8
 8006c28:	d1f1      	bne.n	8006c0e <keypad_sm+0x21a6>
 8006c2a:	702a      	strb	r2, [r5, #0]
 8006c2c:	f883 8004 	strb.w	r8, [r3, #4]
 8006c30:	f883 e003 	strb.w	lr, [r3, #3]
 8006c34:	f883 c002 	strb.w	ip, [r3, #2]
 8006c38:	705c      	strb	r4, [r3, #1]
 8006c3a:	f883 a000 	strb.w	sl, [r3]
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	f43e aa4c 	beq.w	80050dc <keypad_sm+0x674>
 8006c44:	7030      	strb	r0, [r6, #0]
 8006c46:	f7fe ba49 	b.w	80050dc <keypad_sm+0x674>
 8006c4a:	4d3b      	ldr	r5, [pc, #236]	; (8006d38 <keypad_sm+0x22d0>)
 8006c4c:	f995 2000 	ldrsb.w	r2, [r5]
 8006c50:	2a03      	cmp	r2, #3
 8006c52:	f73e aa43 	bgt.w	80050dc <keypad_sm+0x674>
 8006c56:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <keypad_sm+0x22d4>)
 8006c58:	4e39      	ldr	r6, [pc, #228]	; (8006d40 <keypad_sm+0x22d8>)
 8006c5a:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8006c5c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006c60:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006c64:	7831      	ldrb	r1, [r6, #0]
 8006c66:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006c6a:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006c6e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006c72:	781c      	ldrb	r4, [r3, #0]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	e003      	b.n	8006c80 <keypad_sm+0x2218>
	while(keypaditerator < 4){
 8006c78:	46f0      	mov	r8, lr
 8006c7a:	46e6      	mov	lr, ip
 8006c7c:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8006c7e:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006c80:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c82:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006c86:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c88:	bf04      	itt	eq
 8006c8a:	2001      	moveq	r0, #1
 8006c8c:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006c8e:	2a04      	cmp	r2, #4
 8006c90:	46c1      	mov	r9, r8
 8006c92:	d1f1      	bne.n	8006c78 <keypad_sm+0x2210>
 8006c94:	702a      	strb	r2, [r5, #0]
 8006c96:	f883 8004 	strb.w	r8, [r3, #4]
 8006c9a:	f883 e003 	strb.w	lr, [r3, #3]
 8006c9e:	f883 c002 	strb.w	ip, [r3, #2]
 8006ca2:	705c      	strb	r4, [r3, #1]
 8006ca4:	f883 a000 	strb.w	sl, [r3]
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f43e aa17 	beq.w	80050dc <keypad_sm+0x674>
 8006cae:	7031      	strb	r1, [r6, #0]
 8006cb0:	f7fe ba14 	b.w	80050dc <keypad_sm+0x674>
				fill_keypad(1, amp_set_aux);
 8006cb4:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <keypad_sm+0x22cc>)
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	f7fd fb89 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8006cbe:	2101      	movs	r1, #1
				encpos = 0;
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <keypad_sm+0x22e4>)
				encmode = 1;
 8006cc4:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	f7fd bef5 	b.w	8004ab6 <keypad_sm+0x4e>
				if(encpos == 0){
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <keypad_sm+0x22e4>)
 8006cce:	f993 2000 	ldrsb.w	r2, [r3]
 8006cd2:	2a00      	cmp	r2, #0
 8006cd4:	f040 8219 	bne.w	800710a <keypad_sm+0x26a2>
					encpos++;
 8006cd8:	2202      	movs	r2, #2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	f7fd beeb 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_main);
 8006ce0:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <keypad_sm+0x22dc>)
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	6819      	ldr	r1, [r3, #0]
 8006ce6:	f7fd fb73 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8006cea:	2101      	movs	r1, #1
				encpos = 0;
 8006cec:	2200      	movs	r2, #0
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <keypad_sm+0x22e4>)
				encmode = 1;
 8006cf0:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	f7fd bedf 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <keypad_sm+0x22e8>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8216 	beq.w	800712e <keypad_sm+0x26c6>
					chstat_aux_tx = 0;
 8006d02:	2200      	movs	r2, #0
 8006d04:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <keypad_sm+0x22ec>)
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	f7fd bed5 	b.w	8004ab6 <keypad_sm+0x4e>
				dec_arr_v(encpos);
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <keypad_sm+0x22e4>)
 8006d0e:	f993 0000 	ldrsb.w	r0, [r3]
 8006d12:	f7fd fd81 	bl	8004818 <dec_arr_v>
				volt_set_aux = translate_keypad();
 8006d16:	f7fd f9df 	bl	80040d8 <translate_keypad>
 8006d1a:	4a0f      	ldr	r2, [pc, #60]	; (8006d58 <keypad_sm+0x22f0>)
 8006d1c:	6010      	str	r0, [r2, #0]
 8006d1e:	f7fd beca 	b.w	8004ab6 <keypad_sm+0x4e>
 8006d22:	bf00      	nop
 8006d24:	f3af 8000 	nop.w
 8006d28:	50b0f27c 	.word	0x50b0f27c
 8006d2c:	3fe99a6b 	.word	0x3fe99a6b
 8006d30:	41400000 	.word	0x41400000
 8006d34:	200003e0 	.word	0x200003e0
 8006d38:	2000000d 	.word	0x2000000d
 8006d3c:	20000008 	.word	0x20000008
 8006d40:	2000074c 	.word	0x2000074c
 8006d44:	200003e4 	.word	0x200003e4
 8006d48:	20000000 	.word	0x20000000
 8006d4c:	200003f5 	.word	0x200003f5
 8006d50:	200003e9 	.word	0x200003e9
 8006d54:	200003ea 	.word	0x200003ea
 8006d58:	20000a70 	.word	0x20000a70
				kpenum = WAIT;
 8006d5c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006d5e:	4dc5      	ldr	r5, [pc, #788]	; (8007074 <keypad_sm+0x260c>)
				kpenum = WAIT;
 8006d60:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006d62:	f995 2000 	ldrsb.w	r2, [r5]
 8006d66:	2a03      	cmp	r2, #3
 8006d68:	f73d aea5 	bgt.w	8004ab6 <keypad_sm+0x4e>
 8006d6c:	4bc2      	ldr	r3, [pc, #776]	; (8007078 <keypad_sm+0x2610>)
 8006d6e:	4ec3      	ldr	r6, [pc, #780]	; (800707c <keypad_sm+0x2614>)
 8006d70:	3201      	adds	r2, #1
 8006d72:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006d74:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006d78:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006d7c:	7831      	ldrb	r1, [r6, #0]
 8006d7e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006d82:	789f      	ldrb	r7, [r3, #2]
 8006d84:	785c      	ldrb	r4, [r3, #1]
 8006d86:	7818      	ldrb	r0, [r3, #0]
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	e003      	b.n	8006d94 <keypad_sm+0x232c>
	while(keypaditerator < 4){
 8006d8c:	46bc      	mov	ip, r7
 8006d8e:	4627      	mov	r7, r4
 8006d90:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006d92:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006d94:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006d96:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006d9a:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006d9c:	bf04      	itt	eq
 8006d9e:	2100      	moveq	r1, #0
 8006da0:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006da4:	2a05      	cmp	r2, #5
 8006da6:	46e6      	mov	lr, ip
 8006da8:	d1f0      	bne.n	8006d8c <keypad_sm+0x2324>
 8006daa:	f883 c004 	strb.w	ip, [r3, #4]
 8006dae:	70df      	strb	r7, [r3, #3]
 8006db0:	709c      	strb	r4, [r3, #2]
 8006db2:	7058      	strb	r0, [r3, #1]
 8006db4:	f883 9000 	strb.w	r9, [r3]
 8006db8:	2304      	movs	r3, #4
 8006dba:	702b      	strb	r3, [r5, #0]
 8006dbc:	f1b8 0f00 	cmp.w	r8, #0
 8006dc0:	f43d ae79 	beq.w	8004ab6 <keypad_sm+0x4e>
 8006dc4:	7031      	strb	r1, [r6, #0]
 8006dc6:	f7fd be76 	b.w	8004ab6 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8006dca:	f7fd f985 	bl	80040d8 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006dce:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006dd0:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006dd2:	f7fa f9a1 	bl	8001118 <__aeabi_fcmpge>
 8006dd6:	b170      	cbz	r0, 8006df6 <keypad_sm+0x238e>
 8006dd8:	4628      	mov	r0, r5
 8006dda:	49a9      	ldr	r1, [pc, #676]	; (8007080 <keypad_sm+0x2618>)
 8006ddc:	f7fa f992 	bl	8001104 <__aeabi_fcmple>
 8006de0:	b148      	cbz	r0, 8006df6 <keypad_sm+0x238e>
					amp_set_main_old = amp_set_main;
 8006de2:	4da8      	ldr	r5, [pc, #672]	; (8007084 <keypad_sm+0x261c>)
 8006de4:	4ba8      	ldr	r3, [pc, #672]	; (8007088 <keypad_sm+0x2620>)
 8006de6:	682a      	ldr	r2, [r5, #0]
 8006de8:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006dea:	f7fd f975 	bl	80040d8 <translate_keypad>
 8006dee:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006df0:	6828      	ldr	r0, [r5, #0]
 8006df2:	f7fa fdc1 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006df6:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006df8:	4d9e      	ldr	r5, [pc, #632]	; (8007074 <keypad_sm+0x260c>)
				kpenum = WAIT;
 8006dfa:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006dfc:	f995 2000 	ldrsb.w	r2, [r5]
 8006e00:	2a03      	cmp	r2, #3
 8006e02:	f73e a96b 	bgt.w	80050dc <keypad_sm+0x674>
 8006e06:	4b9c      	ldr	r3, [pc, #624]	; (8007078 <keypad_sm+0x2610>)
 8006e08:	4e9c      	ldr	r6, [pc, #624]	; (800707c <keypad_sm+0x2614>)
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006e0e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006e12:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006e16:	f896 9000 	ldrb.w	r9, [r6]
 8006e1a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006e1e:	789c      	ldrb	r4, [r3, #2]
 8006e20:	7858      	ldrb	r0, [r3, #1]
 8006e22:	7819      	ldrb	r1, [r3, #0]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	e003      	b.n	8006e30 <keypad_sm+0x23c8>
	while(keypaditerator < 4){
 8006e28:	46a4      	mov	ip, r4
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006e2e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006e30:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006e32:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006e36:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006e38:	bf04      	itt	eq
 8006e3a:	f04f 0801 	moveq.w	r8, #1
 8006e3e:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006e42:	2a05      	cmp	r2, #5
 8006e44:	46e6      	mov	lr, ip
 8006e46:	d1ef      	bne.n	8006e28 <keypad_sm+0x23c0>
 8006e48:	f883 c004 	strb.w	ip, [r3, #4]
 8006e4c:	70dc      	strb	r4, [r3, #3]
 8006e4e:	7098      	strb	r0, [r3, #2]
 8006e50:	7059      	strb	r1, [r3, #1]
 8006e52:	f883 a000 	strb.w	sl, [r3]
 8006e56:	2304      	movs	r3, #4
 8006e58:	702b      	strb	r3, [r5, #0]
 8006e5a:	f1b8 0f00 	cmp.w	r8, #0
 8006e5e:	f43e a93d 	beq.w	80050dc <keypad_sm+0x674>
 8006e62:	f886 9000 	strb.w	r9, [r6]
 8006e66:	f7fe b939 	b.w	80050dc <keypad_sm+0x674>
				kpenum = WAIT;
 8006e6a:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006e6c:	4d81      	ldr	r5, [pc, #516]	; (8007074 <keypad_sm+0x260c>)
				kpenum = WAIT;
 8006e6e:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006e70:	f995 2000 	ldrsb.w	r2, [r5]
 8006e74:	2a03      	cmp	r2, #3
 8006e76:	f73e a931 	bgt.w	80050dc <keypad_sm+0x674>
 8006e7a:	4b7f      	ldr	r3, [pc, #508]	; (8007078 <keypad_sm+0x2610>)
 8006e7c:	4e7f      	ldr	r6, [pc, #508]	; (800707c <keypad_sm+0x2614>)
 8006e7e:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006e80:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006e84:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006e88:	7831      	ldrb	r1, [r6, #0]
 8006e8a:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006e8e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006e92:	785c      	ldrb	r4, [r3, #1]
 8006e94:	7818      	ldrb	r0, [r3, #0]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	e003      	b.n	8006ea2 <keypad_sm+0x243a>
	while(keypaditerator < 4){
 8006e9a:	46e6      	mov	lr, ip
 8006e9c:	46a4      	mov	ip, r4
 8006e9e:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006ea0:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006ea2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006ea4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006ea8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006eaa:	bf04      	itt	eq
 8006eac:	f04f 0901 	moveq.w	r9, #1
 8006eb0:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006eb2:	2a04      	cmp	r2, #4
 8006eb4:	46f0      	mov	r8, lr
 8006eb6:	d1f0      	bne.n	8006e9a <keypad_sm+0x2432>
 8006eb8:	702a      	strb	r2, [r5, #0]
 8006eba:	f883 e004 	strb.w	lr, [r3, #4]
 8006ebe:	f883 c003 	strb.w	ip, [r3, #3]
 8006ec2:	709c      	strb	r4, [r3, #2]
 8006ec4:	7058      	strb	r0, [r3, #1]
 8006ec6:	f883 a000 	strb.w	sl, [r3]
 8006eca:	f1b9 0f00 	cmp.w	r9, #0
 8006ece:	f43e a905 	beq.w	80050dc <keypad_sm+0x674>
 8006ed2:	7031      	strb	r1, [r6, #0]
 8006ed4:	f7fe b902 	b.w	80050dc <keypad_sm+0x674>
				if(chstat_aux_rx){
 8006ed8:	4b6c      	ldr	r3, [pc, #432]	; (800708c <keypad_sm+0x2624>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8146 	beq.w	800716e <keypad_sm+0x2706>
					chstat_aux_tx = 0;
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4b6a      	ldr	r3, [pc, #424]	; (8007090 <keypad_sm+0x2628>)
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	f7fd bde5 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_aux);
 8006eec:	4b69      	ldr	r3, [pc, #420]	; (8007094 <keypad_sm+0x262c>)
 8006eee:	2001      	movs	r0, #1
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	f7fd fa6d 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8006ef6:	2101      	movs	r1, #1
				encpos = 0;
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b67      	ldr	r3, [pc, #412]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8006efc:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	f7fd bdd9 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(0, volt_set_aux);
 8006f04:	4b65      	ldr	r3, [pc, #404]	; (800709c <keypad_sm+0x2634>)
 8006f06:	2000      	movs	r0, #0
 8006f08:	6819      	ldr	r1, [r3, #0]
 8006f0a:	f7fd fa61 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8006f0e:	2101      	movs	r1, #1
				encpos = 0;
 8006f10:	2200      	movs	r2, #0
 8006f12:	4b61      	ldr	r3, [pc, #388]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8006f14:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006f16:	701a      	strb	r2, [r3, #0]
 8006f18:	f7fd bdcd 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4b5c      	ldr	r3, [pc, #368]	; (8007090 <keypad_sm+0x2628>)
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	f7fd bdc8 	b.w	8004ab6 <keypad_sm+0x4e>
				if(encpos == 1){
 8006f26:	4b5c      	ldr	r3, [pc, #368]	; (8007098 <keypad_sm+0x2630>)
 8006f28:	f993 2000 	ldrsb.w	r2, [r3]
 8006f2c:	2a01      	cmp	r2, #1
 8006f2e:	f000 8083 	beq.w	8007038 <keypad_sm+0x25d0>
				else if(encpos < 4){
 8006f32:	2a03      	cmp	r2, #3
 8006f34:	dc46      	bgt.n	8006fc4 <keypad_sm+0x255c>
					encpos++;
 8006f36:	3201      	adds	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	f7fd bdbc 	b.w	8004ab6 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006f3e:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006f40:	4d4c      	ldr	r5, [pc, #304]	; (8007074 <keypad_sm+0x260c>)
				kpenum = WAIT;
 8006f42:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006f44:	f995 2000 	ldrsb.w	r2, [r5]
 8006f48:	2a03      	cmp	r2, #3
 8006f4a:	f73e a8c7 	bgt.w	80050dc <keypad_sm+0x674>
 8006f4e:	4b4a      	ldr	r3, [pc, #296]	; (8007078 <keypad_sm+0x2610>)
 8006f50:	4e4a      	ldr	r6, [pc, #296]	; (800707c <keypad_sm+0x2614>)
 8006f52:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006f54:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006f58:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006f5c:	7831      	ldrb	r1, [r6, #0]
 8006f5e:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006f62:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006f66:	785c      	ldrb	r4, [r3, #1]
 8006f68:	7818      	ldrb	r0, [r3, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	e003      	b.n	8006f76 <keypad_sm+0x250e>
	while(keypaditerator < 4){
 8006f6e:	46e6      	mov	lr, ip
 8006f70:	46a4      	mov	ip, r4
 8006f72:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006f74:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006f76:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006f78:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006f7c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006f7e:	bf04      	itt	eq
 8006f80:	f04f 0901 	moveq.w	r9, #1
 8006f84:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006f86:	2a04      	cmp	r2, #4
 8006f88:	46f0      	mov	r8, lr
 8006f8a:	d1f0      	bne.n	8006f6e <keypad_sm+0x2506>
 8006f8c:	702a      	strb	r2, [r5, #0]
 8006f8e:	f883 e004 	strb.w	lr, [r3, #4]
 8006f92:	f883 c003 	strb.w	ip, [r3, #3]
 8006f96:	709c      	strb	r4, [r3, #2]
 8006f98:	7058      	strb	r0, [r3, #1]
 8006f9a:	f883 a000 	strb.w	sl, [r3]
 8006f9e:	f1b9 0f00 	cmp.w	r9, #0
 8006fa2:	f43e a89b 	beq.w	80050dc <keypad_sm+0x674>
 8006fa6:	7031      	strb	r1, [r6, #0]
 8006fa8:	f7fe b898 	b.w	80050dc <keypad_sm+0x674>
				fill_keypad(0, volt_set_aux);
 8006fac:	4b3b      	ldr	r3, [pc, #236]	; (800709c <keypad_sm+0x2634>)
 8006fae:	2000      	movs	r0, #0
 8006fb0:	6819      	ldr	r1, [r3, #0]
 8006fb2:	f7fd fa0d 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8006fb6:	2101      	movs	r1, #1
				encpos = 0;
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b37      	ldr	r3, [pc, #220]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8006fbc:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	f7fd bd79 	b.w	8004ab6 <keypad_sm+0x4e>
					encpos = 0;
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	f7fd bd75 	b.w	8004ab6 <keypad_sm+0x4e>
					encpos++;
 8006fcc:	2203      	movs	r2, #3
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	f7fd bd71 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_aux);
 8006fd4:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <keypad_sm+0x262c>)
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	f7fd f9f9 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8006fde:	2101      	movs	r1, #1
				encpos = 0;
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4b2d      	ldr	r3, [pc, #180]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8006fe4:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	f7fd bd65 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <keypad_sm+0x2624>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80d1 	beq.w	8007198 <keypad_sm+0x2730>
					chstat_aux_tx = 0;
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	4b25      	ldr	r3, [pc, #148]	; (8007090 <keypad_sm+0x2628>)
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	f7fd bd5b 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(0, volt_set_main);
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <keypad_sm+0x2638>)
 8007002:	2000      	movs	r0, #0
 8007004:	6819      	ldr	r1, [r3, #0]
 8007006:	f7fd f9e3 	bl	80043d0 <fill_keypad>
				encmode = 1;
 800700a:	2101      	movs	r1, #1
				encpos = 0;
 800700c:	2200      	movs	r2, #0
 800700e:	4b22      	ldr	r3, [pc, #136]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8007010:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	f7fd bd4f 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(0, volt_set_main);
 8007018:	4b21      	ldr	r3, [pc, #132]	; (80070a0 <keypad_sm+0x2638>)
 800701a:	2000      	movs	r0, #0
 800701c:	6819      	ldr	r1, [r3, #0]
 800701e:	f7fd f9d7 	bl	80043d0 <fill_keypad>
				encmode = 1;
 8007022:	2101      	movs	r1, #1
				encpos = 0;
 8007024:	2200      	movs	r2, #0
 8007026:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8007028:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	f7fd bd43 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 8007030:	2201      	movs	r2, #1
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	f7fd bd3f 	b.w	8004ab6 <keypad_sm+0x4e>
					encpos++;
 8007038:	2203      	movs	r2, #3
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	f7fd bd3b 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <keypad_sm+0x2624>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	b183      	cbz	r3, 8007068 <keypad_sm+0x2600>
					chstat_aux_tx = 0;
 8007046:	2200      	movs	r2, #0
 8007048:	4b11      	ldr	r3, [pc, #68]	; (8007090 <keypad_sm+0x2628>)
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	f7fd bd33 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_main);
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <keypad_sm+0x261c>)
 8007052:	2001      	movs	r0, #1
 8007054:	6819      	ldr	r1, [r3, #0]
 8007056:	f7fd f9bb 	bl	80043d0 <fill_keypad>
				encmode = 1;
 800705a:	2101      	movs	r1, #1
				encpos = 0;
 800705c:	2200      	movs	r2, #0
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <keypad_sm+0x2630>)
				encmode = 1;
 8007060:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	f7fd bd27 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 8007068:	2201      	movs	r2, #1
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <keypad_sm+0x2628>)
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	f7fd bd22 	b.w	8004ab6 <keypad_sm+0x4e>
 8007072:	bf00      	nop
 8007074:	2000000d 	.word	0x2000000d
 8007078:	20000008 	.word	0x20000008
 800707c:	2000074c 	.word	0x2000074c
 8007080:	41400000 	.word	0x41400000
 8007084:	200003e4 	.word	0x200003e4
 8007088:	20000000 	.word	0x20000000
 800708c:	200003e9 	.word	0x200003e9
 8007090:	200003ea 	.word	0x200003ea
 8007094:	200003e0 	.word	0x200003e0
 8007098:	200003f5 	.word	0x200003f5
 800709c:	20000a70 	.word	0x20000a70
 80070a0:	20000a74 	.word	0x20000a74
					chstat_main = 1;
 80070a4:	2201      	movs	r2, #1
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	f7fd bd05 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 80070ac:	4b68      	ldr	r3, [pc, #416]	; (8007250 <keypad_sm+0x27e8>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b1d3      	cbz	r3, 80070e8 <keypad_sm+0x2680>
					chstat_aux_tx = 0;
 80070b2:	2200      	movs	r2, #0
 80070b4:	4b67      	ldr	r3, [pc, #412]	; (8007254 <keypad_sm+0x27ec>)
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	f7fd bcfd 	b.w	8004ab6 <keypad_sm+0x4e>
				inc_arr_a(encpos);
 80070bc:	4b66      	ldr	r3, [pc, #408]	; (8007258 <keypad_sm+0x27f0>)
 80070be:	f993 0000 	ldrsb.w	r0, [r3]
 80070c2:	f7fd fb1f 	bl	8004704 <inc_arr_a>
				amp_set_aux = translate_keypad();
 80070c6:	f7fd f807 	bl	80040d8 <translate_keypad>
 80070ca:	4a64      	ldr	r2, [pc, #400]	; (800725c <keypad_sm+0x27f4>)
 80070cc:	6010      	str	r0, [r2, #0]
 80070ce:	f7fd bcf2 	b.w	8004ab6 <keypad_sm+0x4e>
				dec_arr_a(encpos);
 80070d2:	4b61      	ldr	r3, [pc, #388]	; (8007258 <keypad_sm+0x27f0>)
 80070d4:	f993 0000 	ldrsb.w	r0, [r3]
 80070d8:	f7fd fc32 	bl	8004940 <dec_arr_a>
				amp_set_aux = translate_keypad();
 80070dc:	f7fc fffc 	bl	80040d8 <translate_keypad>
 80070e0:	4a5e      	ldr	r2, [pc, #376]	; (800725c <keypad_sm+0x27f4>)
 80070e2:	6010      	str	r0, [r2, #0]
 80070e4:	f7fd bce7 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 80070e8:	2201      	movs	r2, #1
 80070ea:	4b5a      	ldr	r3, [pc, #360]	; (8007254 <keypad_sm+0x27ec>)
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	f7fd bce2 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_main);
 80070f2:	4b5b      	ldr	r3, [pc, #364]	; (8007260 <keypad_sm+0x27f8>)
 80070f4:	2001      	movs	r0, #1
 80070f6:	6819      	ldr	r1, [r3, #0]
 80070f8:	f7fd f96a 	bl	80043d0 <fill_keypad>
				encmode = 1;
 80070fc:	2101      	movs	r1, #1
				encpos = 0;
 80070fe:	2200      	movs	r2, #0
 8007100:	4b55      	ldr	r3, [pc, #340]	; (8007258 <keypad_sm+0x27f0>)
				encmode = 1;
 8007102:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	f7fd bcd6 	b.w	8004ab6 <keypad_sm+0x4e>
				else if(encpos < 4){
 800710a:	2a03      	cmp	r2, #3
 800710c:	f73f af5a 	bgt.w	8006fc4 <keypad_sm+0x255c>
					encpos++;
 8007110:	3201      	adds	r2, #1
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	f7fd bccf 	b.w	8004ab6 <keypad_sm+0x4e>
				inc_arr_v(encpos);
 8007118:	4b4f      	ldr	r3, [pc, #316]	; (8007258 <keypad_sm+0x27f0>)
 800711a:	f993 0000 	ldrsb.w	r0, [r3]
 800711e:	f7fd fa4b 	bl	80045b8 <inc_arr_v>
				volt_set_aux = translate_keypad();
 8007122:	f7fc ffd9 	bl	80040d8 <translate_keypad>
 8007126:	4a4f      	ldr	r2, [pc, #316]	; (8007264 <keypad_sm+0x27fc>)
 8007128:	6010      	str	r0, [r2, #0]
 800712a:	f7fd bcc4 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 800712e:	2201      	movs	r2, #1
 8007130:	4b48      	ldr	r3, [pc, #288]	; (8007254 <keypad_sm+0x27ec>)
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	f7fd bcbf 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 8007138:	2201      	movs	r2, #1
 800713a:	701a      	strb	r2, [r3, #0]
 800713c:	f7fd bcbb 	b.w	8004ab6 <keypad_sm+0x4e>
				if(encpos == 0){
 8007140:	4b45      	ldr	r3, [pc, #276]	; (8007258 <keypad_sm+0x27f0>)
 8007142:	f993 2000 	ldrsb.w	r2, [r3]
 8007146:	b95a      	cbnz	r2, 8007160 <keypad_sm+0x26f8>
					encpos++;
 8007148:	2202      	movs	r2, #2
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	f7fd bcb3 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 8007150:	2201      	movs	r2, #1
 8007152:	701a      	strb	r2, [r3, #0]
}
 8007154:	f7fd bcaf 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 8007158:	2201      	movs	r2, #1
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	f7fd bcab 	b.w	8004ab6 <keypad_sm+0x4e>
				else if(encpos < 4){
 8007160:	2a03      	cmp	r2, #3
 8007162:	f73f af2f 	bgt.w	8006fc4 <keypad_sm+0x255c>
					encpos++;
 8007166:	3201      	adds	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	f7fd bca4 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 800716e:	2201      	movs	r2, #1
 8007170:	4b38      	ldr	r3, [pc, #224]	; (8007254 <keypad_sm+0x27ec>)
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	f7fd bc9f 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 8007178:	2201      	movs	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	f7fd bc9b 	b.w	8004ab6 <keypad_sm+0x4e>
				fill_keypad(0, volt_set_main);
 8007180:	4b39      	ldr	r3, [pc, #228]	; (8007268 <keypad_sm+0x2800>)
 8007182:	2000      	movs	r0, #0
 8007184:	6819      	ldr	r1, [r3, #0]
 8007186:	f7fd f923 	bl	80043d0 <fill_keypad>
				encmode = 1;
 800718a:	2101      	movs	r1, #1
				encpos = 0;
 800718c:	2200      	movs	r2, #0
 800718e:	4b32      	ldr	r3, [pc, #200]	; (8007258 <keypad_sm+0x27f0>)
				encmode = 1;
 8007190:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	f7fd bc8f 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 8007198:	2201      	movs	r2, #1
 800719a:	4b2e      	ldr	r3, [pc, #184]	; (8007254 <keypad_sm+0x27ec>)
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	f7fd bc8a 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	f7fd bc86 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 80071aa:	4b29      	ldr	r3, [pc, #164]	; (8007250 <keypad_sm+0x27e8>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	b1e3      	cbz	r3, 80071ea <keypad_sm+0x2782>
					chstat_aux_tx = 0;
 80071b0:	2200      	movs	r2, #0
 80071b2:	4b28      	ldr	r3, [pc, #160]	; (8007254 <keypad_sm+0x27ec>)
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	f7fd bc7e 	b.w	8004ab6 <keypad_sm+0x4e>
				inc_arr_a(encpos);
 80071ba:	4b27      	ldr	r3, [pc, #156]	; (8007258 <keypad_sm+0x27f0>)
				amp_set_main_old = amp_set_main;
 80071bc:	4c28      	ldr	r4, [pc, #160]	; (8007260 <keypad_sm+0x27f8>)
				inc_arr_a(encpos);
 80071be:	f993 0000 	ldrsb.w	r0, [r3]
 80071c2:	f7fd fa9f 	bl	8004704 <inc_arr_a>
				amp_set_main_old = amp_set_main;
 80071c6:	6822      	ldr	r2, [r4, #0]
 80071c8:	4b28      	ldr	r3, [pc, #160]	; (800726c <keypad_sm+0x2804>)
 80071ca:	601a      	str	r2, [r3, #0]
				amp_set_main = translate_keypad();
 80071cc:	f7fc ff84 	bl	80040d8 <translate_keypad>
 80071d0:	6020      	str	r0, [r4, #0]
				update_ADC_watchdog(amp_set_main);
 80071d2:	6820      	ldr	r0, [r4, #0]
}
 80071d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_ADC_watchdog(amp_set_main);
 80071d8:	f7fa bbce 	b.w	8001978 <update_ADC_watchdog>
				dec_arr_a(encpos);
 80071dc:	4b1e      	ldr	r3, [pc, #120]	; (8007258 <keypad_sm+0x27f0>)
				amp_set_main_old = amp_set_main;
 80071de:	4c20      	ldr	r4, [pc, #128]	; (8007260 <keypad_sm+0x27f8>)
				dec_arr_a(encpos);
 80071e0:	f993 0000 	ldrsb.w	r0, [r3]
 80071e4:	f7fd fbac 	bl	8004940 <dec_arr_a>
				amp_set_main_old = amp_set_main;
 80071e8:	e7ed      	b.n	80071c6 <keypad_sm+0x275e>
					chstat_aux_tx = 1;
 80071ea:	2201      	movs	r2, #1
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <keypad_sm+0x27ec>)
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	f7fd bc61 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_main = 1;
 80071f4:	2201      	movs	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	f7fd bc5d 	b.w	8004ab6 <keypad_sm+0x4e>
				if(chstat_aux_rx){
 80071fc:	4b14      	ldr	r3, [pc, #80]	; (8007250 <keypad_sm+0x27e8>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b303      	cbz	r3, 8007244 <keypad_sm+0x27dc>
					chstat_aux_tx = 0;
 8007202:	2200      	movs	r2, #0
 8007204:	4b13      	ldr	r3, [pc, #76]	; (8007254 <keypad_sm+0x27ec>)
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	f7fd bc55 	b.w	8004ab6 <keypad_sm+0x4e>
				inc_arr_v(encpos);
 800720c:	4b12      	ldr	r3, [pc, #72]	; (8007258 <keypad_sm+0x27f0>)
				volt_set_main_old = volt_set_main;
 800720e:	4c16      	ldr	r4, [pc, #88]	; (8007268 <keypad_sm+0x2800>)
				inc_arr_v(encpos);
 8007210:	f993 0000 	ldrsb.w	r0, [r3]
 8007214:	f7fd f9d0 	bl	80045b8 <inc_arr_v>
				volt_set_main_old = volt_set_main;
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <keypad_sm+0x2808>)
 800721c:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 800721e:	f7fc ff5b 	bl	80040d8 <translate_keypad>
 8007222:	6020      	str	r0, [r4, #0]
 8007224:	f7fd bc47 	b.w	8004ab6 <keypad_sm+0x4e>
				dec_arr_v(encpos);
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <keypad_sm+0x27f0>)
				volt_set_main_old = volt_set_main;
 800722a:	4c0f      	ldr	r4, [pc, #60]	; (8007268 <keypad_sm+0x2800>)
				dec_arr_v(encpos);
 800722c:	f993 0000 	ldrsb.w	r0, [r3]
 8007230:	f7fd faf2 	bl	8004818 <dec_arr_v>
				volt_set_main_old = volt_set_main;
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <keypad_sm+0x2808>)
 8007238:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 800723a:	f7fc ff4d 	bl	80040d8 <translate_keypad>
 800723e:	6020      	str	r0, [r4, #0]
 8007240:	f7fd bc39 	b.w	8004ab6 <keypad_sm+0x4e>
					chstat_aux_tx = 1;
 8007244:	2201      	movs	r2, #1
 8007246:	4b03      	ldr	r3, [pc, #12]	; (8007254 <keypad_sm+0x27ec>)
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	f7fd bc34 	b.w	8004ab6 <keypad_sm+0x4e>
 800724e:	bf00      	nop
 8007250:	200003e9 	.word	0x200003e9
 8007254:	200003ea 	.word	0x200003ea
 8007258:	200003f5 	.word	0x200003f5
 800725c:	200003e0 	.word	0x200003e0
 8007260:	200003e4 	.word	0x200003e4
 8007264:	20000a70 	.word	0x20000a70
 8007268:	20000a74 	.word	0x20000a74
 800726c:	20000000 	.word	0x20000000
 8007270:	20000a78 	.word	0x20000a78

08007274 <row_input>:
void row_input(void){
 8007274:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007276:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007278:	4e30      	ldr	r6, [pc, #192]	; (800733c <row_input+0xc8>)
void row_input(void){
 800727a:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800727c:	4630      	mov	r0, r6
 800727e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007282:	e9cd 4400 	strd	r4, r4, [sp]
 8007286:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800728a:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800728c:	f001 fec8 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8007290:	4630      	mov	r0, r6
 8007292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007296:	f001 fec3 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800729a:	4630      	mov	r0, r6
 800729c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80072a0:	4d27      	ldr	r5, [pc, #156]	; (8007340 <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80072a2:	f001 febd 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80072a6:	4630      	mov	r0, r6
 80072a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072ac:	f001 feb8 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80072b0:	4630      	mov	r0, r6
 80072b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072b6:	f001 feb3 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80072ba:	4628      	mov	r0, r5
 80072bc:	2140      	movs	r1, #64	; 0x40
 80072be:	f001 feaf 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80072c2:	4628      	mov	r0, r5
 80072c4:	2180      	movs	r1, #128	; 0x80
 80072c6:	f001 feab 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80072ca:	4628      	mov	r0, r5
 80072cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072d0:	f001 fea6 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80072d4:	4628      	mov	r0, r5
 80072d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072da:	f001 fea1 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80072de:	4622      	mov	r2, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80072e6:	f001 ff33 	bl	8009150 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80072ea:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80072ee:	2301      	movs	r3, #1
 80072f0:	e9cd 2300 	strd	r2, r3, [sp]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80072f8:	4669      	mov	r1, sp
 80072fa:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80072fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007300:	f001 fda4 	bl	8008e4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007304:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8007308:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800730c:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007310:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007312:	4669      	mov	r1, sp
 8007314:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007316:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007318:	f001 fd98 	bl	8008e4c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800731c:	4622      	mov	r2, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007324:	f001 ff14 	bl	8009150 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007328:	4622      	mov	r2, r4
 800732a:	4621      	mov	r1, r4
 800732c:	2028      	movs	r0, #40	; 0x28
 800732e:	f001 fadb 	bl	80088e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 8007332:	2028      	movs	r0, #40	; 0x28
 8007334:	f001 fb16 	bl	8008964 <HAL_NVIC_EnableIRQ>
}
 8007338:	b006      	add	sp, #24
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	40020400 	.word	0x40020400
 8007340:	40020800 	.word	0x40020800

08007344 <column_input>:
void column_input(void){
 8007344:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007346:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007348:	4d2d      	ldr	r5, [pc, #180]	; (8007400 <column_input+0xbc>)
void column_input(void){
 800734a:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 800734c:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800734e:	e9cd 4400 	strd	r4, r4, [sp]
 8007352:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007356:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8007358:	f001 fb12 	bl	8008980 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800735c:	4628      	mov	r0, r5
 800735e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007362:	f001 fe5d 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8007366:	4628      	mov	r0, r5
 8007368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800736c:	f001 fe58 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8007370:	4628      	mov	r0, r5
 8007372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007376:	4e23      	ldr	r6, [pc, #140]	; (8007404 <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8007378:	f001 fe52 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 800737c:	4628      	mov	r0, r5
 800737e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007382:	f001 fe4d 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8007386:	4628      	mov	r0, r5
 8007388:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800738c:	f001 fe48 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007390:	4630      	mov	r0, r6
 8007392:	2140      	movs	r1, #64	; 0x40
 8007394:	f001 fe44 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8007398:	4630      	mov	r0, r6
 800739a:	2180      	movs	r1, #128	; 0x80
 800739c:	f001 fe40 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80073a0:	4630      	mov	r0, r6
 80073a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073a6:	f001 fe3b 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80073aa:	4630      	mov	r0, r6
 80073ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073b0:	f001 fe36 	bl	8009020 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80073b4:	4622      	mov	r2, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80073bc:	f001 fec8 	bl	8009150 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80073c0:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80073c4:	2301      	movs	r3, #1
 80073c6:	e9cd 2300 	strd	r2, r3, [sp]
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80073ce:	4628      	mov	r0, r5
 80073d0:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80073d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80073d6:	f001 fd39 	bl	8008e4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073da:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80073dc:	2300      	movs	r3, #0
 80073de:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80073e2:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073e4:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80073e6:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80073e8:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80073ec:	f001 fd2e 	bl	8008e4c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80073f0:	4622      	mov	r2, r4
 80073f2:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80073f6:	4630      	mov	r0, r6
 80073f8:	f001 feaa 	bl	8009150 <HAL_GPIO_WritePin>
}
 80073fc:	b006      	add	sp, #24
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	40020400 	.word	0x40020400
 8007404:	40020800 	.word	0x40020800

08007408 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007408:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007410:	d010      	beq.n	8007434 <HAL_GPIO_EXTI_Callback+0x2c>
 8007412:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007416:	d00d      	beq.n	8007434 <HAL_GPIO_EXTI_Callback+0x2c>
 8007418:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800741c:	d00a      	beq.n	8007434 <HAL_GPIO_EXTI_Callback+0x2c>
 800741e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8007422:	d007      	beq.n	8007434 <HAL_GPIO_EXTI_Callback+0x2c>
 8007424:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007428:	d004      	beq.n	8007434 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 800742a:	2804      	cmp	r0, #4
 800742c:	d036      	beq.n	800749c <HAL_GPIO_EXTI_Callback+0x94>
	else if(GPIO_Pin == Rot_CLK_Pin){
 800742e:	2801      	cmp	r0, #1
 8007430:	d019      	beq.n	8007466 <HAL_GPIO_EXTI_Callback+0x5e>
}
 8007432:	bd38      	pop	{r3, r4, r5, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 8007434:	4621      	mov	r1, r4
 8007436:	4825      	ldr	r0, [pc, #148]	; (80074cc <HAL_GPIO_EXTI_Callback+0xc4>)
 8007438:	f001 fe84 	bl	8009144 <HAL_GPIO_ReadPin>
 800743c:	4603      	mov	r3, r0
 800743e:	b130      	cbz	r0, 800744e <HAL_GPIO_EXTI_Callback+0x46>
			if(kpedge != 1){
 8007440:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	2a01      	cmp	r2, #1
 8007446:	d0f4      	beq.n	8007432 <HAL_GPIO_EXTI_Callback+0x2a>
				swedge = 1;
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
}
 800744c:	bd38      	pop	{r3, r4, r5, pc}
			if(kpedge != 0){
 800744e:	4a20      	ldr	r2, [pc, #128]	; (80074d0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8007450:	7811      	ldrb	r1, [r2, #0]
 8007452:	2900      	cmp	r1, #0
 8007454:	d0ed      	beq.n	8007432 <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = GPIO_Pin;
 8007456:	491f      	ldr	r1, [pc, #124]	; (80074d4 <HAL_GPIO_EXTI_Callback+0xcc>)
				kpedge = 0;
 8007458:	7013      	strb	r3, [r2, #0]
				rowpin = GPIO_Pin;
 800745a:	600c      	str	r4, [r1, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 800745c:	481e      	ldr	r0, [pc, #120]	; (80074d8 <HAL_GPIO_EXTI_Callback+0xd0>)
}
 800745e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim2);
 8007462:	f003 bc39 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 8007466:	4d1d      	ldr	r5, [pc, #116]	; (80074dc <HAL_GPIO_EXTI_Callback+0xd4>)
 8007468:	782b      	ldrb	r3, [r5, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e1      	bne.n	8007432 <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 800746e:	2006      	movs	r0, #6
 8007470:	f001 fa86 	bl	8008980 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8007474:	4621      	mov	r1, r4
 8007476:	4815      	ldr	r0, [pc, #84]	; (80074cc <HAL_GPIO_EXTI_Callback+0xc4>)
 8007478:	f001 fe64 	bl	8009144 <HAL_GPIO_ReadPin>
 800747c:	2102      	movs	r1, #2
 800747e:	4604      	mov	r4, r0
 8007480:	4812      	ldr	r0, [pc, #72]	; (80074cc <HAL_GPIO_EXTI_Callback+0xc4>)
 8007482:	f001 fe5f 	bl	8009144 <HAL_GPIO_ReadPin>
 8007486:	4603      	mov	r3, r0
 8007488:	429c      	cmp	r4, r3
 800748a:	bf0c      	ite	eq
 800748c:	2401      	moveq	r4, #1
 800748e:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 8007490:	4813      	ldr	r0, [pc, #76]	; (80074e0 <HAL_GPIO_EXTI_Callback+0xd8>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8007492:	702c      	strb	r4, [r5, #0]
}
 8007494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 8007498:	f003 bc1e 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == 0){
 800749c:	4601      	mov	r1, r0
 800749e:	480b      	ldr	r0, [pc, #44]	; (80074cc <HAL_GPIO_EXTI_Callback+0xc4>)
 80074a0:	f001 fe50 	bl	8009144 <HAL_GPIO_ReadPin>
 80074a4:	4603      	mov	r3, r0
 80074a6:	b960      	cbnz	r0, 80074c2 <HAL_GPIO_EXTI_Callback+0xba>
			if(swedge != 0){
 80074a8:	4a0e      	ldr	r2, [pc, #56]	; (80074e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 80074aa:	7811      	ldrb	r1, [r2, #0]
 80074ac:	2900      	cmp	r1, #0
 80074ae:	d0c0      	beq.n	8007432 <HAL_GPIO_EXTI_Callback+0x2a>
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80074b0:	2008      	movs	r0, #8
				swedge = 0;
 80074b2:	7013      	strb	r3, [r2, #0]
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80074b4:	f001 fa64 	bl	8008980 <HAL_NVIC_DisableIRQ>
}
 80074b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim9);
 80074bc:	480a      	ldr	r0, [pc, #40]	; (80074e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 80074be:	f003 bc0b 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
			if(swedge != 1){
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	2a01      	cmp	r2, #1
 80074c8:	d1be      	bne.n	8007448 <HAL_GPIO_EXTI_Callback+0x40>
}
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	40020400 	.word	0x40020400
 80074d0:	2000000e 	.word	0x2000000e
 80074d4:	20000010 	.word	0x20000010
 80074d8:	20000608 	.word	0x20000608
 80074dc:	2000095c 	.word	0x2000095c
 80074e0:	20000588 	.word	0x20000588
 80074e4:	20000014 	.word	0x20000014
 80074e8:	200006c8 	.word	0x200006c8

080074ec <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 80074ec:	4b79      	ldr	r3, [pc, #484]	; (80076d4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
{
 80074ee:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim2){
 80074f0:	4298      	cmp	r0, r3
 80074f2:	d01f      	beq.n	8007534 <HAL_TIM_PeriodElapsedCallback+0x48>
	else if(htim == &htim3){
 80074f4:	4d78      	ldr	r5, [pc, #480]	; (80076d8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80074f6:	4604      	mov	r4, r0
 80074f8:	42a8      	cmp	r0, r5
 80074fa:	d031      	beq.n	8007560 <HAL_TIM_PeriodElapsedCallback+0x74>
	else if(htim == &htim4){
 80074fc:	4b77      	ldr	r3, [pc, #476]	; (80076dc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80074fe:	4298      	cmp	r0, r3
 8007500:	d037      	beq.n	8007572 <HAL_TIM_PeriodElapsedCallback+0x86>
	else if(htim == &htim9){
 8007502:	4b77      	ldr	r3, [pc, #476]	; (80076e0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8007504:	4298      	cmp	r0, r3
 8007506:	d006      	beq.n	8007516 <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == &htim10){
 8007508:	4b76      	ldr	r3, [pc, #472]	; (80076e4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800750a:	4298      	cmp	r0, r3
 800750c:	d03e      	beq.n	800758c <HAL_TIM_PeriodElapsedCallback+0xa0>
	else if(htim == &htim11){
 800750e:	4b76      	ldr	r3, [pc, #472]	; (80076e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8007510:	4298      	cmp	r0, r3
 8007512:	d04e      	beq.n	80075b2 <HAL_TIM_PeriodElapsedCallback+0xc6>
}
 8007514:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 8007516:	f003 fc0b 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 800751a:	2073      	movs	r0, #115	; 0x73
 800751c:	f7fd faa4 	bl	8004a68 <keypad_sm>
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 8007520:	2200      	movs	r2, #0
 8007522:	2008      	movs	r0, #8
 8007524:	4611      	mov	r1, r2
 8007526:	f001 f9df 	bl	80088e8 <HAL_NVIC_SetPriority>
}
 800752a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 800752e:	2008      	movs	r0, #8
 8007530:	f001 ba18 	b.w	8008964 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8007534:	f003 fbfc 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
		for(int i = 0; i < 4; i++){
 8007538:	2400      	movs	r4, #0
		column_input();
 800753a:	f7ff ff03 	bl	8007344 <column_input>
		for(int i = 0; i < 4; i++){
 800753e:	4e6b      	ldr	r6, [pc, #428]	; (80076ec <HAL_TIM_PeriodElapsedCallback+0x200>)
 8007540:	4d6b      	ldr	r5, [pc, #428]	; (80076f0 <HAL_TIM_PeriodElapsedCallback+0x204>)
			if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 8007542:	f835 1b02 	ldrh.w	r1, [r5], #2
 8007546:	f856 0b04 	ldr.w	r0, [r6], #4
 800754a:	f001 fdfb 	bl	8009144 <HAL_GPIO_ReadPin>
 800754e:	2800      	cmp	r0, #0
 8007550:	d060      	beq.n	8007614 <HAL_TIM_PeriodElapsedCallback+0x128>
		for(int i = 0; i < 4; i++){
 8007552:	3401      	adds	r4, #1
 8007554:	2c04      	cmp	r4, #4
 8007556:	d1f4      	bne.n	8007542 <HAL_TIM_PeriodElapsedCallback+0x56>
}
 8007558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		row_input();
 800755c:	f7ff be8a 	b.w	8007274 <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 8007560:	f003 fbe6 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8007564:	f7fc f8c4 	bl	80036f0 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8007568:	4620      	mov	r0, r4
}
 800756a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 800756e:	f003 bbb3 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8007572:	f003 fbdd 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
		if(!startmessage){
 8007576:	4b5f      	ldr	r3, [pc, #380]	; (80076f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8007578:	781a      	ldrb	r2, [r3, #0]
 800757a:	2a00      	cmp	r2, #0
 800757c:	d136      	bne.n	80075ec <HAL_TIM_PeriodElapsedCallback+0x100>
			startmessage = 1;
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 8007582:	4620      	mov	r0, r4
}
 8007584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim4);
 8007588:	f003 bba6 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
		if(rotenum == CWTURN){
 800758c:	4c5a      	ldr	r4, [pc, #360]	; (80076f8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
		HAL_TIM_Base_Stop_IT(&htim10);
 800758e:	f003 fbcf 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 8007592:	7823      	ldrb	r3, [r4, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d05f      	beq.n	8007658 <HAL_TIM_PeriodElapsedCallback+0x16c>
		else if(rotenum == CCWTURN){
 8007598:	2b02      	cmp	r3, #2
 800759a:	d061      	beq.n	8007660 <HAL_TIM_PeriodElapsedCallback+0x174>
		rotenum = NOTURN;
 800759c:	2200      	movs	r2, #0
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 800759e:	2006      	movs	r0, #6
 80075a0:	4611      	mov	r1, r2
		rotenum = NOTURN;
 80075a2:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 80075a4:	f001 f9a0 	bl	80088e8 <HAL_NVIC_SetPriority>
}
 80075a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 80075ac:	2006      	movs	r0, #6
 80075ae:	f001 b9d9 	b.w	8008964 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 80075b2:	f003 fbbd 	bl	800ad30 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 80075b6:	4b51      	ldr	r3, [pc, #324]	; (80076fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	b1e2      	cbz	r2, 80075f6 <HAL_TIM_PeriodElapsedCallback+0x10a>
		else if(chstat_main == 1){
 80075bc:	7819      	ldrb	r1, [r3, #0]
 80075be:	2901      	cmp	r1, #1
 80075c0:	b24a      	sxtb	r2, r1
 80075c2:	d051      	beq.n	8007668 <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_main == 2){
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d05d      	beq.n	8007686 <HAL_TIM_PeriodElapsedCallback+0x19a>
		if(chstat_aux_rx == 0){
 80075ca:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80075cc:	7819      	ldrb	r1, [r3, #0]
 80075ce:	b24a      	sxtb	r2, r1
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d03c      	beq.n	800764e <HAL_TIM_PeriodElapsedCallback+0x162>
		else if(chstat_aux_rx == 1){
 80075d4:	7819      	ldrb	r1, [r3, #0]
 80075d6:	2901      	cmp	r1, #1
 80075d8:	b24a      	sxtb	r2, r1
 80075da:	d038      	beq.n	800764e <HAL_TIM_PeriodElapsedCallback+0x162>
		else if(chstat_aux_rx == 2){
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d05c      	beq.n	800769c <HAL_TIM_PeriodElapsedCallback+0x1b0>
}
 80075e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 80075e6:	4840      	ldr	r0, [pc, #256]	; (80076e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80075e8:	f003 bb76 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80075ec:	4628      	mov	r0, r5
}
 80075ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim3);
 80075f2:	f003 bb71 	b.w	800acd8 <HAL_TIM_Base_Start_IT>
			if(!timercounter){
 80075f6:	4c43      	ldr	r4, [pc, #268]	; (8007704 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80075f8:	7822      	ldrb	r2, [r4, #0]
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d03d      	beq.n	800767a <HAL_TIM_PeriodElapsedCallback+0x18e>
			timercounter++;
 80075fe:	3201      	adds	r2, #1
 8007600:	b2d2      	uxtb	r2, r2
			if(timercounter >= 7){
 8007602:	2a06      	cmp	r2, #6
			timercounter++;
 8007604:	7022      	strb	r2, [r4, #0]
			if(timercounter >= 7){
 8007606:	d901      	bls.n	800760c <HAL_TIM_PeriodElapsedCallback+0x120>
				timercounter = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	7023      	strb	r3, [r4, #0]
			blink = 0;
 800760c:	2200      	movs	r2, #0
 800760e:	4b3e      	ldr	r3, [pc, #248]	; (8007708 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e7da      	b.n	80075ca <HAL_TIM_PeriodElapsedCallback+0xde>
					if(rowpin == row_pins[j]){
 8007614:	4d3d      	ldr	r5, [pc, #244]	; (800770c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d00d      	beq.n	800763a <HAL_TIM_PeriodElapsedCallback+0x14e>
 800761e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007622:	d050      	beq.n	80076c6 <HAL_TIM_PeriodElapsedCallback+0x1da>
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d051      	beq.n	80076ce <HAL_TIM_PeriodElapsedCallback+0x1e2>
 800762a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762e:	d04c      	beq.n	80076ca <HAL_TIM_PeriodElapsedCallback+0x1de>
 8007630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				for(int j = 0; j < 5; j++){
 8007634:	bf08      	it	eq
 8007636:	2004      	moveq	r0, #4
					if(rowpin == row_pins[j]){
 8007638:	d18e      	bne.n	8007558 <HAL_TIM_PeriodElapsedCallback+0x6c>
						keypad_sm(keypad_labels[j][i]);
 800763a:	4b35      	ldr	r3, [pc, #212]	; (8007710 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800763c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007640:	5d00      	ldrb	r0, [r0, r4]
 8007642:	f7fd fa11 	bl	8004a68 <keypad_sm>
						rowpin = -1;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	602b      	str	r3, [r5, #0]
						break;
 800764c:	e784      	b.n	8007558 <HAL_TIM_PeriodElapsedCallback+0x6c>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 800764e:	2110      	movs	r1, #16
 8007650:	4830      	ldr	r0, [pc, #192]	; (8007714 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8007652:	f001 fd7d 	bl	8009150 <HAL_GPIO_WritePin>
 8007656:	e7c4      	b.n	80075e2 <HAL_TIM_PeriodElapsedCallback+0xf6>
			keypad_sm(']');//right bracket for CW
 8007658:	205d      	movs	r0, #93	; 0x5d
 800765a:	f7fd fa05 	bl	8004a68 <keypad_sm>
 800765e:	e79d      	b.n	800759c <HAL_TIM_PeriodElapsedCallback+0xb0>
			keypad_sm('[');//left bracket for CCW
 8007660:	205b      	movs	r0, #91	; 0x5b
 8007662:	f7fd fa01 	bl	8004a68 <keypad_sm>
 8007666:	e799      	b.n	800759c <HAL_TIM_PeriodElapsedCallback+0xb0>
			if(!timercounter){
 8007668:	4c26      	ldr	r4, [pc, #152]	; (8007704 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800766a:	7823      	ldrb	r3, [r4, #0]
 800766c:	b1db      	cbz	r3, 80076a6 <HAL_TIM_PeriodElapsedCallback+0x1ba>
			timercounter++;
 800766e:	3301      	adds	r3, #1
 8007670:	b2db      	uxtb	r3, r3
			if(timercounter >= 7){
 8007672:	2b06      	cmp	r3, #6
			timercounter++;
 8007674:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 8007676:	d8c7      	bhi.n	8007608 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8007678:	e7c8      	b.n	800760c <HAL_TIM_PeriodElapsedCallback+0x120>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_RESET);
 800767a:	2120      	movs	r1, #32
 800767c:	4825      	ldr	r0, [pc, #148]	; (8007714 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800767e:	f001 fd67 	bl	8009150 <HAL_GPIO_WritePin>
			timercounter++;
 8007682:	7822      	ldrb	r2, [r4, #0]
 8007684:	e7bb      	b.n	80075fe <HAL_TIM_PeriodElapsedCallback+0x112>
			if(blink){
 8007686:	4c20      	ldr	r4, [pc, #128]	; (8007708 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8007688:	7823      	ldrb	r3, [r4, #0]
 800768a:	b9bb      	cbnz	r3, 80076bc <HAL_TIM_PeriodElapsedCallback+0x1d0>
			timercounter++;
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800768e:	7813      	ldrb	r3, [r2, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	b2db      	uxtb	r3, r3
			if(timercounter >= 7){
 8007694:	2b06      	cmp	r3, #6
 8007696:	d80c      	bhi.n	80076b2 <HAL_TIM_PeriodElapsedCallback+0x1c6>
			timercounter++;
 8007698:	7013      	strb	r3, [r2, #0]
 800769a:	e796      	b.n	80075ca <HAL_TIM_PeriodElapsedCallback+0xde>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 800769c:	2110      	movs	r1, #16
 800769e:	481d      	ldr	r0, [pc, #116]	; (8007714 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80076a0:	f001 fd5a 	bl	8009158 <HAL_GPIO_TogglePin>
 80076a4:	e79d      	b.n	80075e2 <HAL_TIM_PeriodElapsedCallback+0xf6>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 80076a6:	2120      	movs	r1, #32
 80076a8:	481a      	ldr	r0, [pc, #104]	; (8007714 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80076aa:	f001 fd51 	bl	8009150 <HAL_GPIO_WritePin>
			timercounter++;
 80076ae:	7823      	ldrb	r3, [r4, #0]
 80076b0:	e7dd      	b.n	800766e <HAL_TIM_PeriodElapsedCallback+0x182>
				timercounter = 0;
 80076b2:	2100      	movs	r1, #0
				blink = 1;
 80076b4:	2301      	movs	r3, #1
				timercounter = 0;
 80076b6:	7011      	strb	r1, [r2, #0]
				blink = 1;
 80076b8:	7023      	strb	r3, [r4, #0]
 80076ba:	e786      	b.n	80075ca <HAL_TIM_PeriodElapsedCallback+0xde>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80076bc:	2120      	movs	r1, #32
 80076be:	4815      	ldr	r0, [pc, #84]	; (8007714 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80076c0:	f001 fd4a 	bl	8009158 <HAL_GPIO_TogglePin>
 80076c4:	e7e2      	b.n	800768c <HAL_TIM_PeriodElapsedCallback+0x1a0>
				for(int j = 0; j < 5; j++){
 80076c6:	2001      	movs	r0, #1
 80076c8:	e7b7      	b.n	800763a <HAL_TIM_PeriodElapsedCallback+0x14e>
 80076ca:	2003      	movs	r0, #3
 80076cc:	e7b5      	b.n	800763a <HAL_TIM_PeriodElapsedCallback+0x14e>
 80076ce:	2002      	movs	r0, #2
 80076d0:	e7b3      	b.n	800763a <HAL_TIM_PeriodElapsedCallback+0x14e>
 80076d2:	bf00      	nop
 80076d4:	20000608 	.word	0x20000608
 80076d8:	20000648 	.word	0x20000648
 80076dc:	20000688 	.word	0x20000688
 80076e0:	200006c8 	.word	0x200006c8
 80076e4:	20000588 	.word	0x20000588
 80076e8:	200005c8 	.word	0x200005c8
 80076ec:	08011a98 	.word	0x08011a98
 80076f0:	08011a90 	.word	0x08011a90
 80076f4:	200009a0 	.word	0x200009a0
 80076f8:	2000095c 	.word	0x2000095c
 80076fc:	200003eb 	.word	0x200003eb
 8007700:	200003e9 	.word	0x200003e9
 8007704:	200009a9 	.word	0x200009a9
 8007708:	200003e8 	.word	0x200003e8
 800770c:	20000010 	.word	0x20000010
 8007710:	08011ae8 	.word	0x08011ae8
 8007714:	40020800 	.word	0x40020800

08007718 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <HAL_ADC_ConvHalfCpltCallback+0x14>)
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800771c:	8810      	ldrh	r0, [r2, #0]
	adc_values_cpy[1] = adc_values[1];
 800771e:	8851      	ldrh	r1, [r2, #2]
	adc_values_cpy[2] = adc_values[2];
 8007720:	8892      	ldrh	r2, [r2, #4]
	adc_values_cpy[0] = adc_values[0];
 8007722:	8018      	strh	r0, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8007724:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8007726:	809a      	strh	r2, [r3, #4]
}
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	200003c8 	.word	0x200003c8
 8007730:	200003d4 	.word	0x200003d4

08007734 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8007734:	4a04      	ldr	r2, [pc, #16]	; (8007748 <HAL_ADC_ConvCpltCallback+0x14>)
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <HAL_ADC_ConvCpltCallback+0x18>)
 8007738:	88d0      	ldrh	r0, [r2, #6]
	adc_values_cpy[4] = adc_values[4];
 800773a:	8911      	ldrh	r1, [r2, #8]
	adc_values_cpy[5] = adc_values[5];
 800773c:	8952      	ldrh	r2, [r2, #10]
	adc_values_cpy[3] = adc_values[3];
 800773e:	80d8      	strh	r0, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8007740:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8007742:	815a      	strh	r2, [r3, #10]
}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	200003c8 	.word	0x200003c8
 800774c:	200003d4 	.word	0x200003d4

08007750 <HAL_ADC_LevelOutOfWindowCallback>:
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8007750:	2201      	movs	r2, #1
{
 8007752:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8007754:	2140      	movs	r1, #64	; 0x40
 8007756:	4803      	ldr	r0, [pc, #12]	; (8007764 <HAL_ADC_LevelOutOfWindowCallback+0x14>)
 8007758:	f001 fcfa 	bl	8009150 <HAL_GPIO_WritePin>
	chstat_main = 2;
 800775c:	2202      	movs	r2, #2
 800775e:	4b02      	ldr	r3, [pc, #8]	; (8007768 <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 8007760:	701a      	strb	r2, [r3, #0]
}
 8007762:	bd08      	pop	{r3, pc}
 8007764:	40020000 	.word	0x40020000
 8007768:	200003eb 	.word	0x200003eb

0800776c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	4e84      	ldr	r6, [pc, #528]	; (8007984 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 8007772:	2400      	movs	r4, #0
 8007774:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007776:	b08b      	sub	sp, #44	; 0x2c
 8007778:	e003      	b.n	8007782 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 800777a:	3401      	adds	r4, #1
 800777c:	2c40      	cmp	r4, #64	; 0x40
 800777e:	f000 80fd 	beq.w	800797c <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 8007782:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007786:	2d2a      	cmp	r5, #42	; 0x2a
 8007788:	d1f7      	bne.n	800777a <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 800778a:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 800778c:	2220      	movs	r2, #32
 800778e:	2100      	movs	r1, #0
 8007790:	a802      	add	r0, sp, #8
 8007792:	f005 fe75 	bl	800d480 <memset>
	for(int i = 0; i < 25; i++){
 8007796:	f10d 0307 	add.w	r3, sp, #7
 800779a:	aa08      	add	r2, sp, #32
 800779c:	e000      	b.n	80077a0 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 800779e:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 80077a0:	3401      	adds	r4, #1
 80077a2:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 80077a4:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 80077a6:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 80077aa:	bf28      	it	cs
 80077ac:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d1f5      	bne.n	800779e <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 80077b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80077b6:	2b2a      	cmp	r3, #42	; 0x2a
 80077b8:	d00c      	beq.n	80077d4 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	2100      	movs	r1, #0
 80077be:	4871      	ldr	r0, [pc, #452]	; (8007984 <HAL_UART_RxCpltCallback+0x218>)
 80077c0:	f005 fe5e 	bl	800d480 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	496f      	ldr	r1, [pc, #444]	; (8007984 <HAL_UART_RxCpltCallback+0x218>)
 80077c8:	486f      	ldr	r0, [pc, #444]	; (8007988 <HAL_UART_RxCpltCallback+0x21c>)
}
 80077ca:	b00b      	add	sp, #44	; 0x2c
 80077cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80077d0:	f003 bcf6 	b.w	800b1c0 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 80077d4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80077d8:	2b53      	cmp	r3, #83	; 0x53
 80077da:	d1ee      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 80077dc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80077e0:	2b54      	cmp	r3, #84	; 0x54
 80077e2:	d1ea      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 80077e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80077e8:	2b52      	cmp	r3, #82	; 0x52
 80077ea:	d1e6      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 80077ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80077f0:	2b54      	cmp	r3, #84	; 0x54
 80077f2:	d1e2      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 80077f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80077f8:	2b46      	cmp	r3, #70	; 0x46
 80077fa:	d1de      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 80077fc:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8007800:	2b4e      	cmp	r3, #78	; 0x4e
 8007802:	d1da      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 8007804:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8007808:	2b53      	cmp	r3, #83	; 0x53
 800780a:	d1d6      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 800780c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007810:	2b48      	cmp	r3, #72	; 0x48
 8007812:	d1d2      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 8007814:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007818:	2b21      	cmp	r3, #33	; 0x21
 800781a:	d1ce      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 800781c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007820:	2b2c      	cmp	r3, #44	; 0x2c
 8007822:	d1ca      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007824:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007828:	2b2c      	cmp	r3, #44	; 0x2c
 800782a:	d1c6      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 800782c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007830:	2b2c      	cmp	r3, #44	; 0x2c
 8007832:	d1c2      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 8007834:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007838:	2b2c      	cmp	r3, #44	; 0x2c
 800783a:	d1be      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800783c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8007840:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007842:	b2c3      	uxtb	r3, r0
 8007844:	2b09      	cmp	r3, #9
 8007846:	d8b8      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8007848:	f89d b00f 	ldrb.w	fp, [sp, #15]
 800784c:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8007850:	fa5f f38b 	uxtb.w	r3, fp
 8007854:	2b09      	cmp	r3, #9
 8007856:	d8b0      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 8007858:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800785c:	2b2e      	cmp	r3, #46	; 0x2e
 800785e:	d1ac      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007860:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007864:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8007868:	fa5f f38a 	uxtb.w	r3, sl
 800786c:	2b09      	cmp	r3, #9
 800786e:	d8a4      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007870:	f89d 6012 	ldrb.w	r6, [sp, #18]
 8007874:	3e30      	subs	r6, #48	; 0x30
 8007876:	b2f3      	uxtb	r3, r6
 8007878:	2b09      	cmp	r3, #9
 800787a:	d89e      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800787c:	f89d 9014 	ldrb.w	r9, [sp, #20]
 8007880:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007884:	fa5f f389 	uxtb.w	r3, r9
 8007888:	2b09      	cmp	r3, #9
 800788a:	d896      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800788c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d192      	bne.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
 8007894:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8007898:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800789c:	fa5f f388 	uxtb.w	r3, r8
 80078a0:	2b09      	cmp	r3, #9
 80078a2:	d88a      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80078a4:	f89d 7017 	ldrb.w	r7, [sp, #23]
 80078a8:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80078aa:	b2fb      	uxtb	r3, r7
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d884      	bhi.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80078b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80078b4:	3d30      	subs	r5, #48	; 0x30
 80078b6:	b2eb      	uxtb	r3, r5
 80078b8:	2b09      	cmp	r3, #9
 80078ba:	f63f af7e 	bhi.w	80077ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 80078be:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80078c2:	3c30      	subs	r4, #48	; 0x30
 80078c4:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80078c6:	2c02      	cmp	r4, #2
 80078c8:	f63f af77 	bhi.w	80077ba <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80078cc:	f7f9 fa1e 	bl	8000d0c <__aeabi_i2f>
 80078d0:	492e      	ldr	r1, [pc, #184]	; (800798c <HAL_UART_RxCpltCallback+0x220>)
 80078d2:	f7f9 fa6f 	bl	8000db4 <__aeabi_fmul>
 80078d6:	2100      	movs	r1, #0
 80078d8:	f7f9 f964 	bl	8000ba4 <__addsf3>
 80078dc:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80078de:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80078e0:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80078e2:	f7f9 fa13 	bl	8000d0c <__aeabi_i2f>
 80078e6:	9901      	ldr	r1, [sp, #4]
 80078e8:	f7f9 f95c 	bl	8000ba4 <__addsf3>
 80078ec:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80078ee:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80078f0:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80078f2:	f7f9 fa0b 	bl	8000d0c <__aeabi_i2f>
 80078f6:	4925      	ldr	r1, [pc, #148]	; (800798c <HAL_UART_RxCpltCallback+0x220>)
 80078f8:	f7f9 fb10 	bl	8000f1c <__aeabi_fdiv>
 80078fc:	4651      	mov	r1, sl
 80078fe:	f7f9 f951 	bl	8000ba4 <__addsf3>
 8007902:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007904:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8007906:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007908:	f7f9 fa00 	bl	8000d0c <__aeabi_i2f>
 800790c:	2100      	movs	r1, #0
 800790e:	f7f9 f949 	bl	8000ba4 <__addsf3>
 8007912:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007914:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007916:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007918:	f7f9 f9f8 	bl	8000d0c <__aeabi_i2f>
 800791c:	491b      	ldr	r1, [pc, #108]	; (800798c <HAL_UART_RxCpltCallback+0x220>)
 800791e:	f7f9 fafd 	bl	8000f1c <__aeabi_fdiv>
 8007922:	4641      	mov	r1, r8
 8007924:	f7f9 f93e 	bl	8000ba4 <__addsf3>
 8007928:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800792a:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800792c:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800792e:	f7f9 f9ed 	bl	8000d0c <__aeabi_i2f>
 8007932:	4917      	ldr	r1, [pc, #92]	; (8007990 <HAL_UART_RxCpltCallback+0x224>)
 8007934:	f7f9 faf2 	bl	8000f1c <__aeabi_fdiv>
 8007938:	4639      	mov	r1, r7
 800793a:	f7f9 f933 	bl	8000ba4 <__addsf3>
 800793e:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8007940:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8007942:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8007944:	f7f9 f9e2 	bl	8000d0c <__aeabi_i2f>
 8007948:	4911      	ldr	r1, [pc, #68]	; (8007990 <HAL_UART_RxCpltCallback+0x224>)
 800794a:	f7f9 fae7 	bl	8000f1c <__aeabi_fdiv>
 800794e:	4649      	mov	r1, r9
 8007950:	f7f9 f928 	bl	8000ba4 <__addsf3>
 8007954:	4602      	mov	r2, r0
		lin_num_aux = tempv2;
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <HAL_UART_RxCpltCallback+0x228>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8007958:	4628      	mov	r0, r5
		lin_num_aux = tempv2;
 800795a:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800795c:	f7f9 f9d6 	bl	8000d0c <__aeabi_i2f>
 8007960:	490d      	ldr	r1, [pc, #52]	; (8007998 <HAL_UART_RxCpltCallback+0x22c>)
 8007962:	f7f9 fadb 	bl	8000f1c <__aeabi_fdiv>
 8007966:	4631      	mov	r1, r6
 8007968:	f7f9 f91c 	bl	8000ba4 <__addsf3>
		cur_num_aux = tempa2;
 800796c:	f8df b02c 	ldr.w	fp, [pc, #44]	; 800799c <HAL_UART_RxCpltCallback+0x230>
		chstat_aux_rx = rxbuffercpy[18]-48;
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <HAL_UART_RxCpltCallback+0x234>)
 8007972:	b264      	sxtb	r4, r4
 8007974:	701c      	strb	r4, [r3, #0]
		cur_num_aux = tempa2;
 8007976:	f8cb 0000 	str.w	r0, [fp]
		chstat_aux_rx = rxbuffercpy[18]-48;
 800797a:	e71e      	b.n	80077ba <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 800797c:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 800797e:	7835      	ldrb	r5, [r6, #0]
 8007980:	e704      	b.n	800778c <HAL_UART_RxCpltCallback+0x20>
 8007982:	bf00      	nop
 8007984:	20000960 	.word	0x20000960
 8007988:	20000708 	.word	0x20000708
 800798c:	41200000 	.word	0x41200000
 8007990:	42c80000 	.word	0x42c80000
 8007994:	20000754 	.word	0x20000754
 8007998:	447a0000 	.word	0x447a0000
 800799c:	200003f0 	.word	0x200003f0
 80079a0:	200003e9 	.word	0x200003e9

080079a4 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 80079a4:	2240      	movs	r2, #64	; 0x40
 80079a6:	4902      	ldr	r1, [pc, #8]	; (80079b0 <HAL_UART_ErrorCallback+0xc>)
 80079a8:	4802      	ldr	r0, [pc, #8]	; (80079b4 <HAL_UART_ErrorCallback+0x10>)
 80079aa:	f003 bc09 	b.w	800b1c0 <HAL_UART_Receive_DMA>
 80079ae:	bf00      	nop
 80079b0:	20000960 	.word	0x20000960
 80079b4:	20000708 	.word	0x20000708

080079b8 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 80079b8:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 80079ba:	4c07      	ldr	r4, [pc, #28]	; (80079d8 <HAL_UART_TxHalfCpltCallback+0x20>)
 80079bc:	4d07      	ldr	r5, [pc, #28]	; (80079dc <HAL_UART_TxHalfCpltCallback+0x24>)
 80079be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80079d2:	bc30      	pop	{r4, r5}
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	200009ac 	.word	0x200009ac
 80079dc:	200009ec 	.word	0x200009ec

080079e0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80079e0:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80079e2:	4c11      	ldr	r4, [pc, #68]	; (8007a28 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80079e4:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80079e6:	2240      	movs	r2, #64	; 0x40
 80079e8:	2100      	movs	r1, #0
 80079ea:	4620      	mov	r0, r4
 80079ec:	f005 fd48 	bl	800d480 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 80079f0:	4a0e      	ldr	r2, [pc, #56]	; (8007a2c <HAL_UART_TxCpltCallback+0x4c>)
 80079f2:	490f      	ldr	r1, [pc, #60]	; (8007a30 <HAL_UART_TxCpltCallback+0x50>)
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <HAL_UART_TxCpltCallback+0x54>)
 80079f6:	680e      	ldr	r6, [r1, #0]
 80079f8:	6810      	ldr	r0, [r2, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b25b      	sxtb	r3, r3
 80079fe:	9304      	str	r3, [sp, #16]
 8007a00:	f7f8 fd2a 	bl	8000458 <__aeabi_f2d>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a0e:	f7f8 fd23 	bl	8000458 <__aeabi_f2d>
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	4620      	mov	r0, r4
 8007a18:	2120      	movs	r1, #32
 8007a1a:	e9cd 6700 	strd	r6, r7, [sp]
 8007a1e:	4a06      	ldr	r2, [pc, #24]	; (8007a38 <HAL_UART_TxCpltCallback+0x58>)
 8007a20:	f006 f996 	bl	800dd50 <sniprintf>
}
 8007a24:	b006      	add	sp, #24
 8007a26:	bdd0      	pop	{r4, r6, r7, pc}
 8007a28:	200009ec 	.word	0x200009ec
 8007a2c:	200003e0 	.word	0x200003e0
 8007a30:	20000a70 	.word	0x20000a70
 8007a34:	200003ea 	.word	0x200003ea
 8007a38:	08011838 	.word	0x08011838

08007a3c <Error_Handler>:
 8007a3c:	b672      	cpsid	i
  while (1)
 8007a3e:	e7fe      	b.n	8007a3e <Error_Handler+0x2>

08007a40 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <HAL_MspInit+0x40>)
{
 8007a42:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8007a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007a52:	9201      	str	r2, [sp, #4]
 8007a54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a56:	6a1a      	ldr	r2, [r3, #32]
 8007a58:	f042 0201 	orr.w	r2, r2, #1
 8007a5c:	621a      	str	r2, [r3, #32]
 8007a5e:	6a1a      	ldr	r2, [r3, #32]
 8007a60:	f002 0201 	and.w	r2, r2, #1
 8007a64:	9202      	str	r2, [sp, #8]
 8007a66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a7a:	b004      	add	sp, #16
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800

08007a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007a84:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a86:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8007a88:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <HAL_ADC_MspInit+0x9c>)
 8007a8a:	6802      	ldr	r2, [r0, #0]
{
 8007a8c:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8007a8e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a90:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007a94:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007a98:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8007a9a:	d001      	beq.n	8007aa0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007a9c:	b008      	add	sp, #32
 8007a9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007aa0:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aa6:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aac:	621a      	str	r2, [r3, #32]
 8007aae:	6a1a      	ldr	r2, [r3, #32]
 8007ab0:	4605      	mov	r5, r0
 8007ab2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007ab6:	9200      	str	r2, [sp, #0]
 8007ab8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aba:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8007abc:	4e19      	ldr	r6, [pc, #100]	; (8007b24 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007abe:	f042 0201 	orr.w	r2, r2, #1
 8007ac2:	61da      	str	r2, [r3, #28]
 8007ac4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007ac6:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007ace:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ad0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ad2:	4815      	ldr	r0, [pc, #84]	; (8007b28 <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8007ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ad8:	f001 f9b8 	bl	8008e4c <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007adc:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8007ade:	4913      	ldr	r1, [pc, #76]	; (8007b2c <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ae4:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8007ae8:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8007aee:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8007af0:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8007af2:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8007af4:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007af6:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007af8:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8007afa:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8007afc:	f000 fff2 	bl	8008ae4 <HAL_DMA_Init>
 8007b00:	b958      	cbnz	r0, 8007b1a <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8007b02:	2200      	movs	r2, #0
 8007b04:	2012      	movs	r0, #18
 8007b06:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8007b08:	646e      	str	r6, [r5, #68]	; 0x44
 8007b0a:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8007b0c:	f000 feec 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8007b10:	2012      	movs	r0, #18
 8007b12:	f000 ff27 	bl	8008964 <HAL_NVIC_EnableIRQ>
}
 8007b16:	b008      	add	sp, #32
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007b1a:	f7ff ff8f 	bl	8007a3c <Error_Handler>
 8007b1e:	e7f0      	b.n	8007b02 <HAL_ADC_MspInit+0x7e>
 8007b20:	40012400 	.word	0x40012400
 8007b24:	20000460 	.word	0x20000460
 8007b28:	40020000 	.word	0x40020000
 8007b2c:	40026008 	.word	0x40026008

08007b30 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <HAL_ADC_MspDeInit+0x30>)
 8007b32:	6802      	ldr	r2, [r0, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d000      	beq.n	8007b3a <HAL_ADC_MspDeInit+0xa>
 8007b38:	4770      	bx	lr
{
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007b3e:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007b40:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007b42:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007b44:	4808      	ldr	r0, [pc, #32]	; (8007b68 <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007b46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b4a:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007b4c:	f001 fa68 	bl	8009020 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8007b50:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007b52:	f000 ffff 	bl	8008b54 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8007b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8007b5a:	2012      	movs	r0, #18
 8007b5c:	f000 bf10 	b.w	8008980 <HAL_NVIC_DisableIRQ>
 8007b60:	40012400 	.word	0x40012400
 8007b64:	40023800 	.word	0x40023800
 8007b68:	40020000 	.word	0x40020000

08007b6c <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b6c:	2300      	movs	r3, #0
{
 8007b6e:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8007b70:	4a14      	ldr	r2, [pc, #80]	; (8007bc4 <HAL_DAC_MspInit+0x58>)
 8007b72:	6801      	ldr	r1, [r0, #0]
{
 8007b74:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8007b76:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007b80:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8007b82:	d001      	beq.n	8007b88 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8007b84:	b009      	add	sp, #36	; 0x24
 8007b86:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007b88:	2430      	movs	r4, #48	; 0x30
 8007b8a:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8e:	480f      	ldr	r0, [pc, #60]	; (8007bcc <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8007b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b92:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8007b94:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007b98:	625a      	str	r2, [r3, #36]	; 0x24
 8007b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b9c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8007ba0:	9200      	str	r2, [sp, #0]
 8007ba2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ba4:	69da      	ldr	r2, [r3, #28]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	61da      	str	r2, [r3, #28]
 8007bac:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007bae:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bba:	f001 f947 	bl	8008e4c <HAL_GPIO_Init>
}
 8007bbe:	b009      	add	sp, #36	; 0x24
 8007bc0:	bd30      	pop	{r4, r5, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40007400 	.word	0x40007400
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	40020000 	.word	0x40020000

08007bd0 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd0:	2300      	movs	r3, #0
{
 8007bd2:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8007bd4:	4a16      	ldr	r2, [pc, #88]	; (8007c30 <HAL_I2C_MspInit+0x60>)
 8007bd6:	6801      	ldr	r1, [r0, #0]
{
 8007bd8:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8007bda:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bdc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007be0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007be4:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8007be6:	d001      	beq.n	8007bec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007be8:	b008      	add	sp, #32
 8007bea:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bec:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007bee:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007bf0:	26c0      	movs	r6, #192	; 0xc0
 8007bf2:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bf4:	4c0f      	ldr	r4, [pc, #60]	; (8007c34 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bf6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bf8:	69e3      	ldr	r3, [r4, #28]
 8007bfa:	f043 0302 	orr.w	r3, r3, #2
 8007bfe:	61e3      	str	r3, [r4, #28]
 8007c00:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c02:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c0a:	480b      	ldr	r0, [pc, #44]	; (8007c38 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c0c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c12:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c14:	f001 f91a 	bl	8008e4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c1e:	6263      	str	r3, [r4, #36]	; 0x24
 8007c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	9b01      	ldr	r3, [sp, #4]
}
 8007c2a:	b008      	add	sp, #32
 8007c2c:	bdd0      	pop	{r4, r6, r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40005400 	.word	0x40005400
 8007c34:	40023800 	.word	0x40023800
 8007c38:	40020400 	.word	0x40020400

08007c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c3c:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8007c3e:	6803      	ldr	r3, [r0, #0]
{
 8007c40:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d026      	beq.n	8007c96 <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8007c48:	4a44      	ldr	r2, [pc, #272]	; (8007d5c <HAL_TIM_Base_MspInit+0x120>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d039      	beq.n	8007cc2 <HAL_TIM_Base_MspInit+0x86>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007c4e:	4a44      	ldr	r2, [pc, #272]	; (8007d60 <HAL_TIM_Base_MspInit+0x124>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d04b      	beq.n	8007cec <HAL_TIM_Base_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8007c54:	4a43      	ldr	r2, [pc, #268]	; (8007d64 <HAL_TIM_Base_MspInit+0x128>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d008      	beq.n	8007c6c <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8007c5a:	4a43      	ldr	r2, [pc, #268]	; (8007d68 <HAL_TIM_Base_MspInit+0x12c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d05a      	beq.n	8007d16 <HAL_TIM_Base_MspInit+0xda>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8007c60:	4a42      	ldr	r2, [pc, #264]	; (8007d6c <HAL_TIM_Base_MspInit+0x130>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d068      	beq.n	8007d38 <HAL_TIM_Base_MspInit+0xfc>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8007c66:	b007      	add	sp, #28
 8007c68:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007c6c:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007c6e:	4b40      	ldr	r3, [pc, #256]	; (8007d70 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007c70:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007c72:	6a19      	ldr	r1, [r3, #32]
 8007c74:	f041 0104 	orr.w	r1, r1, #4
 8007c78:	6219      	str	r1, [r3, #32]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007c7c:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007c86:	f000 fe2f 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8007c8a:	2019      	movs	r0, #25
}
 8007c8c:	b007      	add	sp, #28
 8007c8e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007c92:	f000 be67 	b.w	8008964 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007c96:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c98:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007c9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007c9e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007ca0:	f041 0101 	orr.w	r1, r1, #1
 8007ca4:	6259      	str	r1, [r3, #36]	; 0x24
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007ca8:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007cb2:	f000 fe19 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007cb6:	201c      	movs	r0, #28
}
 8007cb8:	b007      	add	sp, #28
 8007cba:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007cbe:	f000 be51 	b.w	8008964 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007cc2:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007cc4:	4b2a      	ldr	r3, [pc, #168]	; (8007d70 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007cc6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007cc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007cca:	f041 0102 	orr.w	r1, r1, #2
 8007cce:	6259      	str	r1, [r3, #36]	; 0x24
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007cd2:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007cdc:	f000 fe04 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007ce0:	201d      	movs	r0, #29
}
 8007ce2:	b007      	add	sp, #28
 8007ce4:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007ce8:	f000 be3c 	b.w	8008964 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007cec:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007cee:	4b20      	ldr	r3, [pc, #128]	; (8007d70 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007cf0:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007cf2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007cf4:	f041 0104 	orr.w	r1, r1, #4
 8007cf8:	6259      	str	r1, [r3, #36]	; 0x24
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007cfc:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007d06:	f000 fdef 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007d0a:	201e      	movs	r0, #30
}
 8007d0c:	b007      	add	sp, #28
 8007d0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007d12:	f000 be27 	b.w	8008964 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007d16:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007d18:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007d1a:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007d1c:	6a19      	ldr	r1, [r3, #32]
 8007d1e:	f041 0108 	orr.w	r1, r1, #8
 8007d22:	6219      	str	r1, [r3, #32]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007d26:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007d30:	f000 fdda 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8007d34:	201a      	movs	r0, #26
 8007d36:	e7a9      	b.n	8007c8c <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007d38:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007d3c:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007d3e:	6a19      	ldr	r1, [r3, #32]
 8007d40:	f041 0110 	orr.w	r1, r1, #16
 8007d44:	6219      	str	r1, [r3, #32]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007d48:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	9305      	str	r3, [sp, #20]
 8007d50:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007d52:	f000 fdc9 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007d56:	201b      	movs	r0, #27
 8007d58:	e798      	b.n	8007c8c <HAL_TIM_Base_MspInit+0x50>
 8007d5a:	bf00      	nop
 8007d5c:	40000400 	.word	0x40000400
 8007d60:	40000800 	.word	0x40000800
 8007d64:	40010800 	.word	0x40010800
 8007d68:	40010c00 	.word	0x40010c00
 8007d6c:	40011000 	.word	0x40011000
 8007d70:	40023800 	.word	0x40023800

08007d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d74:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d76:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8007d78:	4b31      	ldr	r3, [pc, #196]	; (8007e40 <HAL_UART_MspInit+0xcc>)
 8007d7a:	6802      	ldr	r2, [r0, #0]
{
 8007d7c:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8007d7e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d80:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007d84:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007d88:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8007d8a:	d001      	beq.n	8007d90 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007d8c:	b008      	add	sp, #32
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	4605      	mov	r5, r0
 8007d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d9c:	621a      	str	r2, [r3, #32]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8007da2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007da6:	9200      	str	r2, [sp, #0]
 8007da8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007daa:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007dac:	4e25      	ldr	r6, [pc, #148]	; (8007e44 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dae:	f042 0201 	orr.w	r2, r2, #1
 8007db2:	61da      	str	r2, [r3, #28]
 8007db4:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007db6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007dc0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc2:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dc4:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007dc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007dca:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dcc:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dce:	481e      	ldr	r0, [pc, #120]	; (8007e48 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007dd0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd2:	f001 f83b 	bl	8008e4c <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007dd6:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007dd8:	4a1c      	ldr	r2, [pc, #112]	; (8007e4c <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007dda:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007ddc:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007de0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007de4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007de8:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007dea:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007dec:	f000 fe7a 	bl	8008ae4 <HAL_DMA_Init>
 8007df0:	b9f8      	cbnz	r0, 8007e32 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007df2:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007df4:	4c16      	ldr	r4, [pc, #88]	; (8007e50 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007df6:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007df8:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007dfa:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007dfc:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007dfe:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e02:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007e06:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007e0a:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007e0c:	63ae      	str	r6, [r5, #56]	; 0x38
 8007e0e:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007e10:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007e12:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007e14:	f000 fe66 	bl	8008ae4 <HAL_DMA_Init>
 8007e18:	b970      	cbnz	r0, 8007e38 <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2025      	movs	r0, #37	; 0x25
 8007e1e:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007e20:	636c      	str	r4, [r5, #52]	; 0x34
 8007e22:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007e24:	f000 fd60 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007e28:	2025      	movs	r0, #37	; 0x25
 8007e2a:	f000 fd9b 	bl	8008964 <HAL_NVIC_EnableIRQ>
}
 8007e2e:	b008      	add	sp, #32
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007e32:	f7ff fe03 	bl	8007a3c <Error_Handler>
 8007e36:	e7dc      	b.n	8007df2 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8007e38:	f7ff fe00 	bl	8007a3c <Error_Handler>
 8007e3c:	e7ed      	b.n	8007e1a <HAL_UART_MspInit+0xa6>
 8007e3e:	bf00      	nop
 8007e40:	40013800 	.word	0x40013800
 8007e44:	200004a4 	.word	0x200004a4
 8007e48:	40020000 	.word	0x40020000
 8007e4c:	40026058 	.word	0x40026058
 8007e50:	200004e8 	.word	0x200004e8
 8007e54:	40026044 	.word	0x40026044

08007e58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007e58:	e7fe      	b.n	8007e58 <NMI_Handler>
 8007e5a:	bf00      	nop

08007e5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e5c:	e7fe      	b.n	8007e5c <HardFault_Handler>
 8007e5e:	bf00      	nop

08007e60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e60:	e7fe      	b.n	8007e60 <MemManage_Handler>
 8007e62:	bf00      	nop

08007e64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e64:	e7fe      	b.n	8007e64 <BusFault_Handler>
 8007e66:	bf00      	nop

08007e68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e68:	e7fe      	b.n	8007e68 <UsageFault_Handler>
 8007e6a:	bf00      	nop

08007e6c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop

08007e70 <DebugMon_Handler>:
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop

08007e74 <PendSV_Handler>:
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e78:	f000 b926 	b.w	80080c8 <HAL_IncTick>

08007e7c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	f001 b975 	b.w	800916c <HAL_GPIO_EXTI_IRQHandler>
 8007e82:	bf00      	nop

08007e84 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8007e84:	2004      	movs	r0, #4
 8007e86:	f001 b971 	b.w	800916c <HAL_GPIO_EXTI_IRQHandler>
 8007e8a:	bf00      	nop

08007e8c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <DMA1_Channel1_IRQHandler+0x8>)
 8007e8e:	f000 bf29 	b.w	8008ce4 <HAL_DMA_IRQHandler>
 8007e92:	bf00      	nop
 8007e94:	20000460 	.word	0x20000460

08007e98 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <DMA1_Channel4_IRQHandler+0x8>)
 8007e9a:	f000 bf23 	b.w	8008ce4 <HAL_DMA_IRQHandler>
 8007e9e:	bf00      	nop
 8007ea0:	200004e8 	.word	0x200004e8

08007ea4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <DMA1_Channel5_IRQHandler+0x8>)
 8007ea6:	f000 bf1d 	b.w	8008ce4 <HAL_DMA_IRQHandler>
 8007eaa:	bf00      	nop
 8007eac:	200004a4 	.word	0x200004a4

08007eb0 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <ADC1_IRQHandler+0x8>)
 8007eb2:	f000 bad1 	b.w	8008458 <HAL_ADC_IRQHandler>
 8007eb6:	bf00      	nop
 8007eb8:	200003f8 	.word	0x200003f8

08007ebc <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <USB_LP_IRQHandler+0x8>)
 8007ebe:	f001 bc3b 	b.w	8009738 <HAL_PCD_IRQHandler>
 8007ec2:	bf00      	nop
 8007ec4:	200016f4 	.word	0x200016f4

08007ec8 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007ec8:	4801      	ldr	r0, [pc, #4]	; (8007ed0 <TIM9_IRQHandler+0x8>)
 8007eca:	f002 bff5 	b.w	800aeb8 <HAL_TIM_IRQHandler>
 8007ece:	bf00      	nop
 8007ed0:	200006c8 	.word	0x200006c8

08007ed4 <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <TIM10_IRQHandler+0x8>)
 8007ed6:	f002 bfef 	b.w	800aeb8 <HAL_TIM_IRQHandler>
 8007eda:	bf00      	nop
 8007edc:	20000588 	.word	0x20000588

08007ee0 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <TIM11_IRQHandler+0x8>)
 8007ee2:	f002 bfe9 	b.w	800aeb8 <HAL_TIM_IRQHandler>
 8007ee6:	bf00      	nop
 8007ee8:	200005c8 	.word	0x200005c8

08007eec <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <TIM2_IRQHandler+0x8>)
 8007eee:	f002 bfe3 	b.w	800aeb8 <HAL_TIM_IRQHandler>
 8007ef2:	bf00      	nop
 8007ef4:	20000608 	.word	0x20000608

08007ef8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <TIM3_IRQHandler+0x8>)
 8007efa:	f002 bfdd 	b.w	800aeb8 <HAL_TIM_IRQHandler>
 8007efe:	bf00      	nop
 8007f00:	20000648 	.word	0x20000648

08007f04 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <TIM4_IRQHandler+0x8>)
 8007f06:	f002 bfd7 	b.w	800aeb8 <HAL_TIM_IRQHandler>
 8007f0a:	bf00      	nop
 8007f0c:	20000688 	.word	0x20000688

08007f10 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <USART1_IRQHandler+0x8>)
 8007f12:	f003 ba9f 	b.w	800b454 <HAL_UART_IRQHandler>
 8007f16:	bf00      	nop
 8007f18:	20000708 	.word	0x20000708

08007f1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007f1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8007f1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007f22:	f001 f923 	bl	800916c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8007f26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f2a:	f001 f91f 	bl	800916c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8007f2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007f32:	f001 f91b 	bl	800916c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8007f36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007f3a:	f001 f917 	bl	800916c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8007f42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007f46:	f001 b911 	b.w	800916c <HAL_GPIO_EXTI_IRQHandler>
 8007f4a:	bf00      	nop

08007f4c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	4770      	bx	lr

08007f50 <_kill>:

int _kill(int pid, int sig)
{
 8007f50:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007f52:	f005 fa6b 	bl	800d42c <__errno>
 8007f56:	2216      	movs	r2, #22
 8007f58:	4603      	mov	r3, r0
	return -1;
}
 8007f5a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8007f5e:	601a      	str	r2, [r3, #0]
}
 8007f60:	bd08      	pop	{r3, pc}
 8007f62:	bf00      	nop

08007f64 <_exit>:

void _exit (int status)
{
 8007f64:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007f66:	f005 fa61 	bl	800d42c <__errno>
 8007f6a:	2316      	movs	r3, #22
 8007f6c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8007f6e:	e7fe      	b.n	8007f6e <_exit+0xa>

08007f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f70:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f72:	1e16      	subs	r6, r2, #0
 8007f74:	dd07      	ble.n	8007f86 <_read+0x16>
 8007f76:	460c      	mov	r4, r1
 8007f78:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8007f7a:	f3af 8000 	nop.w
 8007f7e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f82:	42a5      	cmp	r5, r4
 8007f84:	d1f9      	bne.n	8007f7a <_read+0xa>
	}

return len;
}
 8007f86:	4630      	mov	r0, r6
 8007f88:	bd70      	pop	{r4, r5, r6, pc}
 8007f8a:	bf00      	nop

08007f8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f8c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f8e:	1e16      	subs	r6, r2, #0
 8007f90:	dd07      	ble.n	8007fa2 <_write+0x16>
 8007f92:	460c      	mov	r4, r1
 8007f94:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8007f96:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f9e:	42ac      	cmp	r4, r5
 8007fa0:	d1f9      	bne.n	8007f96 <_write+0xa>
	}
	return len;
}
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
 8007fa6:	bf00      	nop

08007fa8 <_close>:

int _close(int file)
{
	return -1;
}
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007fb4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007fb6:	604b      	str	r3, [r1, #4]
}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	4770      	bx	lr

08007fc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	4770      	bx	lr

08007fc4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fc4:	490d      	ldr	r1, [pc, #52]	; (8007ffc <_sbrk+0x38>)
{
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fca:	4a0d      	ldr	r2, [pc, #52]	; (8008000 <_sbrk+0x3c>)
 8007fcc:	4c0d      	ldr	r4, [pc, #52]	; (8008004 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8007fce:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fd0:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8007fd2:	b120      	cbz	r0, 8007fde <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fd4:	4403      	add	r3, r0
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d807      	bhi.n	8007fea <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007fda:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8007fdc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007fde:	4c0a      	ldr	r4, [pc, #40]	; (8008008 <_sbrk+0x44>)
 8007fe0:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8007fe2:	4403      	add	r3, r0
 8007fe4:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8007fe6:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8007fe8:	d9f7      	bls.n	8007fda <_sbrk+0x16>
    errno = ENOMEM;
 8007fea:	f005 fa1f 	bl	800d42c <__errno>
 8007fee:	220c      	movs	r2, #12
 8007ff0:	4603      	mov	r3, r0
    return (void *)-1;
 8007ff2:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8007ff6:	601a      	str	r2, [r3, #0]
}
 8007ff8:	bd10      	pop	{r4, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000a7c 	.word	0x20000a7c
 8008000:	20008000 	.word	0x20008000
 8008004:	00002000 	.word	0x00002000
 8008008:	20001c10 	.word	0x20001c10

0800800c <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop

08008010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008010:	480c      	ldr	r0, [pc, #48]	; (8008044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008012:	490d      	ldr	r1, [pc, #52]	; (8008048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008014:	4a0d      	ldr	r2, [pc, #52]	; (800804c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008018:	e002      	b.n	8008020 <LoopCopyDataInit>

0800801a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800801a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800801c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800801e:	3304      	adds	r3, #4

08008020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008024:	d3f9      	bcc.n	800801a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008026:	4a0a      	ldr	r2, [pc, #40]	; (8008050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008028:	4c0a      	ldr	r4, [pc, #40]	; (8008054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800802a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800802c:	e001      	b.n	8008032 <LoopFillZerobss>

0800802e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800802e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008030:	3204      	adds	r2, #4

08008032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008034:	d3fb      	bcc.n	800802e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008036:	f7ff ffe9 	bl	800800c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800803a:	f005 f9fd 	bl	800d438 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800803e:	f7f9 fed7 	bl	8001df0 <main>
  bx lr
 8008042:	4770      	bx	lr
  ldr r0, =_sdata
 8008044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008048:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 800804c:	0801201c 	.word	0x0801201c
  ldr r2, =_sbss
 8008050:	2000036c 	.word	0x2000036c
  ldr r4, =_ebss
 8008054:	20001c10 	.word	0x20001c10

08008058 <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008058:	e7fe      	b.n	8008058 <COMP_IRQHandler>
	...

0800805c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800805c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <HAL_InitTick+0x40>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	b90b      	cbnz	r3, 8008068 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8008064:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8008066:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	490b      	ldr	r1, [pc, #44]	; (80080a0 <HAL_InitTick+0x44>)
 8008072:	4605      	mov	r5, r0
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	fbb0 f0f3 	udiv	r0, r0, r3
 800807a:	f000 fc95 	bl	80089a8 <HAL_SYSTICK_Config>
 800807e:	4604      	mov	r4, r0
 8008080:	2800      	cmp	r0, #0
 8008082:	d1ef      	bne.n	8008064 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008084:	2d0f      	cmp	r5, #15
 8008086:	d8ed      	bhi.n	8008064 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008088:	4602      	mov	r2, r0
 800808a:	4629      	mov	r1, r5
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	f000 fc2a 	bl	80088e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <HAL_InitTick+0x48>)
 8008096:	4620      	mov	r0, r4
 8008098:	601d      	str	r5, [r3, #0]
}
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	20000020 	.word	0x20000020
 80080a0:	2000001c 	.word	0x2000001c
 80080a4:	20000024 	.word	0x20000024

080080a8 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080a8:	2003      	movs	r0, #3
{
 80080aa:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080ac:	f000 fc0a 	bl	80088c4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80080b0:	200f      	movs	r0, #15
 80080b2:	f7ff ffd3 	bl	800805c <HAL_InitTick>
 80080b6:	b110      	cbz	r0, 80080be <HAL_Init+0x16>
    status = HAL_ERROR;
 80080b8:	2401      	movs	r4, #1
}
 80080ba:	4620      	mov	r0, r4
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	4604      	mov	r4, r0
    HAL_MspInit();
 80080c0:	f7ff fcbe 	bl	8007a40 <HAL_MspInit>
}
 80080c4:	4620      	mov	r0, r4
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80080c8:	4a03      	ldr	r2, [pc, #12]	; (80080d8 <HAL_IncTick+0x10>)
 80080ca:	4904      	ldr	r1, [pc, #16]	; (80080dc <HAL_IncTick+0x14>)
 80080cc:	6813      	ldr	r3, [r2, #0]
 80080ce:	6809      	ldr	r1, [r1, #0]
 80080d0:	440b      	add	r3, r1
 80080d2:	6013      	str	r3, [r2, #0]
}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20000a80 	.word	0x20000a80
 80080dc:	20000020 	.word	0x20000020

080080e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80080e0:	4b01      	ldr	r3, [pc, #4]	; (80080e8 <HAL_GetTick+0x8>)
 80080e2:	6818      	ldr	r0, [r3, #0]
}
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20000a80 	.word	0x20000a80

080080ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80080f0:	f7ff fff6 	bl	80080e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80080f6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80080f8:	d002      	beq.n	8008100 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <HAL_Delay+0x20>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008100:	f7ff ffee 	bl	80080e0 <HAL_GetTick>
 8008104:	1b40      	subs	r0, r0, r5
 8008106:	42a0      	cmp	r0, r4
 8008108:	d3fa      	bcc.n	8008100 <HAL_Delay+0x14>
  {
  }
}
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	20000020 	.word	0x20000020

08008110 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008110:	2800      	cmp	r0, #0
 8008112:	f000 80a9 	beq.w	8008268 <HAL_ADC_Init+0x158>
{
 8008116:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008118:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800811a:	4604      	mov	r4, r0
{
 800811c:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 800811e:	2b00      	cmp	r3, #0
 8008120:	d078      	beq.n	8008214 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008122:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008124:	06d8      	lsls	r0, r3, #27
 8008126:	d453      	bmi.n	80081d0 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008128:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800812a:	4a5c      	ldr	r2, [pc, #368]	; (800829c <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 800812c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008130:	f023 0302 	bic.w	r3, r3, #2
 8008134:	f043 0302 	orr.w	r3, r3, #2
 8008138:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800813a:	6853      	ldr	r3, [r2, #4]
 800813c:	6861      	ldr	r1, [r4, #4]
 800813e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008142:	430b      	orrs	r3, r1
 8008144:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800814a:	fa91 f1a1 	rbit	r1, r1
 800814e:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008150:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8008154:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8008158:	fa93 f3a3 	rbit	r3, r3
 800815c:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008160:	6965      	ldr	r5, [r4, #20]
 8008162:	68e2      	ldr	r2, [r4, #12]
 8008164:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 8008168:	432a      	orrs	r2, r5
 800816a:	6a25      	ldr	r5, [r4, #32]
 800816c:	fa0c f101 	lsl.w	r1, ip, r1
 8008170:	432a      	orrs	r2, r5
 8008172:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008174:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8008176:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800817a:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 800817c:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008180:	d002      	beq.n	8008188 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8008182:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008184:	4311      	orrs	r1, r2
 8008186:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	6811      	ldr	r1, [r2, #0]
 800818c:	0649      	lsls	r1, r1, #25
 800818e:	d551      	bpl.n	8008234 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8008190:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8008192:	6890      	ldr	r0, [r2, #8]
 8008194:	4942      	ldr	r1, [pc, #264]	; (80082a0 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008196:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800819a:	ea01 0100 	and.w	r1, r1, r0
 800819e:	ea41 0103 	orr.w	r1, r1, r3
 80081a2:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80081a4:	d017      	beq.n	80081d6 <HAL_ADC_Init+0xc6>
 80081a6:	2d01      	cmp	r5, #1
 80081a8:	d015      	beq.n	80081d6 <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80081aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80081ac:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80081b0:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80081b2:	6891      	ldr	r1, [r2, #8]
 80081b4:	4a3b      	ldr	r2, [pc, #236]	; (80082a4 <HAL_ADC_Init+0x194>)
 80081b6:	400a      	ands	r2, r1
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d11f      	bne.n	80081fc <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80081bc:	2000      	movs	r0, #0
 80081be:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80081c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80081cc:	b003      	add	sp, #12
 80081ce:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80081d0:	2001      	movs	r0, #1
}
 80081d2:	b003      	add	sp, #12
 80081d4:	bd30      	pop	{r4, r5, pc}
 80081d6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80081da:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80081dc:	fa91 f1a1 	rbit	r1, r1
 80081e0:	fab1 f081 	clz	r0, r1
 80081e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80081e6:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80081ea:	3901      	subs	r1, #1
 80081ec:	4081      	lsls	r1, r0
 80081ee:	4329      	orrs	r1, r5
 80081f0:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80081f2:	6891      	ldr	r1, [r2, #8]
 80081f4:	4a2b      	ldr	r2, [pc, #172]	; (80082a4 <HAL_ADC_Init+0x194>)
 80081f6:	400a      	ands	r2, r1
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d0df      	beq.n	80081bc <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 80081fc:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80081fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008200:	f023 0312 	bic.w	r3, r3, #18
 8008204:	f043 0310 	orr.w	r3, r3, #16
 8008208:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800820a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800820c:	4303      	orrs	r3, r0
 800820e:	6523      	str	r3, [r4, #80]	; 0x50
}
 8008210:	b003      	add	sp, #12
 8008212:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008214:	4a24      	ldr	r2, [pc, #144]	; (80082a8 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 8008216:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8008218:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800821c:	6a13      	ldr	r3, [r2, #32]
 800821e:	f043 0301 	orr.w	r3, r3, #1
 8008222:	6213      	str	r3, [r2, #32]
 8008224:	6a13      	ldr	r3, [r2, #32]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 800822e:	f7ff fc29 	bl	8007a84 <HAL_ADC_MspInit>
 8008232:	e776      	b.n	8008122 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8008234:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8008236:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8008238:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800823a:	69e1      	ldr	r1, [r4, #28]
 800823c:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8008240:	6925      	ldr	r5, [r4, #16]
 8008242:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008246:	d00c      	beq.n	8008262 <HAL_ADC_Init+0x152>
 8008248:	2d01      	cmp	r5, #1
 800824a:	d00a      	beq.n	8008262 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800824c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8008250:	2901      	cmp	r1, #1
 8008252:	d00b      	beq.n	800826c <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8008254:	6850      	ldr	r0, [r2, #4]
 8008256:	4915      	ldr	r1, [pc, #84]	; (80082ac <HAL_ADC_Init+0x19c>)
 8008258:	4001      	ands	r1, r0
 800825a:	ea41 010c 	orr.w	r1, r1, ip
 800825e:	6051      	str	r1, [r2, #4]
 8008260:	e797      	b.n	8008192 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8008262:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8008266:	e7f1      	b.n	800824c <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 8008268:	2001      	movs	r0, #1
}
 800826a:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800826c:	b968      	cbnz	r0, 800828a <HAL_ADC_Init+0x17a>
 800826e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8008272:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008276:	fab1 f081 	clz	r0, r1
 800827a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800827c:	3901      	subs	r1, #1
 800827e:	4081      	lsls	r1, r0
 8008280:	ea41 010c 	orr.w	r1, r1, ip
 8008284:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 8008288:	e7e4      	b.n	8008254 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800828a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800828c:	f041 0120 	orr.w	r1, r1, #32
 8008290:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008292:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008294:	f041 0101 	orr.w	r1, r1, #1
 8008298:	6521      	str	r1, [r4, #80]	; 0x50
 800829a:	e7db      	b.n	8008254 <HAL_ADC_Init+0x144>
 800829c:	40012700 	.word	0x40012700
 80082a0:	c0fff18d 	.word	0xc0fff18d
 80082a4:	bf80fffe 	.word	0xbf80fffe
 80082a8:	40023800 	.word	0x40023800
 80082ac:	fcfc16ff 	.word	0xfcfc16ff

080082b0 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d075      	beq.n	80083a0 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80082b4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80082b6:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80082b8:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80082bc:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80082be:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4604      	mov	r4, r0
 80082c4:	0655      	lsls	r5, r2, #25
 80082c6:	d453      	bmi.n	8008370 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80082c8:	f06f 001f 	mvn.w	r0, #31
 80082cc:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80082ce:	6858      	ldr	r0, [r3, #4]
 80082d0:	4939      	ldr	r1, [pc, #228]	; (80083b8 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80082d2:	4a3a      	ldr	r2, [pc, #232]	; (80083bc <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80082d4:	4001      	ands	r1, r0
 80082d6:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80082d8:	6899      	ldr	r1, [r3, #8]
 80082da:	400a      	ands	r2, r1
 80082dc:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80082de:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80082e0:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80082e2:	4a37      	ldr	r2, [pc, #220]	; (80083c0 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80082e4:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80082e6:	4837      	ldr	r0, [pc, #220]	; (80083c4 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80082e8:	0d49      	lsrs	r1, r1, #21
 80082ea:	0549      	lsls	r1, r1, #21
 80082ec:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80082ee:	6919      	ldr	r1, [r3, #16]
 80082f0:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80082f4:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80082f6:	6959      	ldr	r1, [r3, #20]
 80082f8:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80082fc:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80082fe:	6999      	ldr	r1, [r3, #24]
 8008300:	4011      	ands	r1, r2
 8008302:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8008304:	69d9      	ldr	r1, [r3, #28]
 8008306:	4011      	ands	r1, r2
 8008308:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800830a:	6a19      	ldr	r1, [r3, #32]
 800830c:	4011      	ands	r1, r2
 800830e:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8008310:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008312:	4011      	ands	r1, r2
 8008314:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8008316:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008318:	4011      	ands	r1, r2
 800831a:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 800831c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800831e:	400a      	ands	r2, r1
 8008320:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8008322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8008324:	4928      	ldr	r1, [pc, #160]	; (80083c8 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8008326:	4010      	ands	r0, r2
 8008328:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800832a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 800832c:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800832e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008332:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8008334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008336:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800833a:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 800833c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008342:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8008344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008346:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800834a:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 800834c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800834e:	0d92      	lsrs	r2, r2, #22
 8008350:	0592      	lsls	r2, r2, #22
 8008352:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8008354:	684b      	ldr	r3, [r1, #4]
 8008356:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800835a:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 800835c:	f7ff fbe8 	bl	8007b30 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008360:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8008362:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8008364:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 8008366:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 8008368:	2300      	movs	r3, #0
 800836a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 800836e:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008378:	f7ff feb2 	bl	80080e0 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 800837c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800837e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	0650      	lsls	r0, r2, #25
 8008384:	d5a0      	bpl.n	80082c8 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8008386:	f7ff feab 	bl	80080e0 <HAL_GetTick>
 800838a:	1b40      	subs	r0, r0, r5
 800838c:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800838e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8008390:	d902      	bls.n	8008398 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	0651      	lsls	r1, r2, #25
 8008396:	d405      	bmi.n	80083a4 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	0652      	lsls	r2, r2, #25
 800839c:	d4f3      	bmi.n	8008386 <HAL_ADC_DeInit+0xd6>
 800839e:	e793      	b.n	80082c8 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 80083a0:	2001      	movs	r0, #1
}
 80083a2:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083a4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083a8:	f043 0310 	orr.w	r3, r3, #16
 80083ac:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80083b0:	4303      	orrs	r3, r0
 80083b2:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 80083b4:	e7d8      	b.n	8008368 <HAL_ADC_DeInit+0xb8>
 80083b6:	bf00      	nop
 80083b8:	f83c0000 	.word	0xf83c0000
 80083bc:	8080f08c 	.word	0x8080f08c
 80083c0:	fffff000 	.word	0xfffff000
 80083c4:	fe0f8000 	.word	0xfe0f8000
 80083c8:	40012700 	.word	0x40012700

080083cc <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80083cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80083ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083d0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80083d4:	d126      	bne.n	8008424 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80083d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80083d8:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80083da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80083de:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80083e0:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80083e2:	688a      	ldr	r2, [r1, #8]
 80083e4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80083e8:	d118      	bne.n	800841c <ADC_DMAConvCplt+0x50>
 80083ea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80083ee:	b9aa      	cbnz	r2, 800841c <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80083f0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80083f2:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80083f6:	d002      	beq.n	80083fe <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80083f8:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80083fa:	0550      	lsls	r0, r2, #21
 80083fc:	d40e      	bmi.n	800841c <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80083fe:	684a      	ldr	r2, [r1, #4]
 8008400:	f022 0220 	bic.w	r2, r2, #32
 8008404:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800840c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800840e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008410:	04d2      	lsls	r2, r2, #19
 8008412:	d403      	bmi.n	800841c <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008414:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff f989 	bl	8007734 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008422:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	4718      	bx	r3
 800842a:	bf00      	nop

0800842c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800842c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800842e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008430:	f7ff f972 	bl	8007718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008434:	bd08      	pop	{r3, pc}
 8008436:	bf00      	nop

08008438 <HAL_ADC_ErrorCallback>:
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop

0800843c <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800843c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800843e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008440:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008446:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008448:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800844a:	f043 0304 	orr.w	r3, r3, #4
 800844e:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008450:	f7ff fff2 	bl	8008438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008454:	bd08      	pop	{r3, pc}
 8008456:	bf00      	nop

08008458 <HAL_ADC_IRQHandler>:
{
 8008458:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800845a:	6803      	ldr	r3, [r0, #0]
{
 800845c:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	0691      	lsls	r1, r2, #26
 8008462:	d502      	bpl.n	800846a <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	0792      	lsls	r2, r2, #30
 8008468:	d445      	bmi.n	80084f6 <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	0612      	lsls	r2, r2, #24
 800846e:	d502      	bpl.n	8008476 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	0755      	lsls	r5, r2, #29
 8008474:	d40c      	bmi.n	8008490 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	0655      	lsls	r5, r2, #25
 800847a:	d502      	bpl.n	8008482 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	07d0      	lsls	r0, r2, #31
 8008480:	d46f      	bmi.n	8008562 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	0151      	lsls	r1, r2, #5
 8008486:	d502      	bpl.n	800848e <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	0692      	lsls	r2, r2, #26
 800848c:	d45c      	bmi.n	8008548 <HAL_ADC_IRQHandler+0xf0>
}
 800848e:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008490:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008492:	06d0      	lsls	r0, r2, #27
 8008494:	d403      	bmi.n	800849e <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008496:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800849c:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80084a4:	d11f      	bne.n	80084e6 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80084a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80084a8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80084ac:	d002      	beq.n	80084b4 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80084ae:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80084b0:	0551      	lsls	r1, r2, #21
 80084b2:	d418      	bmi.n	80084e6 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80084b4:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80084b6:	0552      	lsls	r2, r2, #21
 80084b8:	d415      	bmi.n	80084e6 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80084ba:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80084bc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80084c0:	d111      	bne.n	80084e6 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80084c2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80084c6:	b972      	cbnz	r2, 80084e6 <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ce:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80084d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084d6:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80084d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084da:	05db      	lsls	r3, r3, #23
 80084dc:	d403      	bmi.n	80084e6 <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084e0:	f043 0301 	orr.w	r3, r3, #1
 80084e4:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 f9ea 	bl	80088c0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80084ec:	f06f 020c 	mvn.w	r2, #12
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e7bf      	b.n	8008476 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80084f6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80084f8:	06d5      	lsls	r5, r2, #27
 80084fa:	d403      	bmi.n	8008504 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80084fc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80084fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008502:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800850a:	d115      	bne.n	8008538 <HAL_ADC_IRQHandler+0xe0>
 800850c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008510:	b992      	cbnz	r2, 8008538 <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008514:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8008518:	d12f      	bne.n	800857a <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	f022 0220 	bic.w	r2, r2, #32
 8008520:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008522:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008528:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800852a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800852c:	04d9      	lsls	r1, r3, #19
 800852e:	d403      	bmi.n	8008538 <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008530:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 8008538:	4620      	mov	r0, r4
 800853a:	f7ff f8fb 	bl	8007734 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800853e:	f06f 0212 	mvn.w	r2, #18
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	e790      	b.n	800846a <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008548:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800854c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 800854e:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008550:	f042 0202 	orr.w	r2, r2, #2
 8008554:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008556:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008558:	f7ff ff6e 	bl	8008438 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	601d      	str	r5, [r3, #0]
}
 8008560:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008562:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008564:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800856a:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800856c:	f7ff f8f0 	bl	8007750 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008570:	f06f 0201 	mvn.w	r2, #1
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	e783      	b.n	8008482 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800857a:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800857c:	0550      	lsls	r0, r2, #21
 800857e:	d4db      	bmi.n	8008538 <HAL_ADC_IRQHandler+0xe0>
 8008580:	e7cb      	b.n	800851a <HAL_ADC_IRQHandler+0xc2>
 8008582:	bf00      	nop

08008584 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8008584:	2300      	movs	r3, #0
{
 8008586:	b530      	push	{r4, r5, lr}
 8008588:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800858a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800858c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8008590:	2b01      	cmp	r3, #1
 8008592:	f000 80aa 	beq.w	80086ea <HAL_ADC_ConfigChannel+0x166>
 8008596:	2301      	movs	r3, #1
 8008598:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 800859c:	684b      	ldr	r3, [r1, #4]
 800859e:	4602      	mov	r2, r0
 80085a0:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 80085a2:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 80085a4:	d924      	bls.n	80085f0 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 80085a6:	2b0c      	cmp	r3, #12
 80085a8:	d866      	bhi.n	8008678 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 80085aa:	f04f 0c1f 	mov.w	ip, #31
 80085ae:	680c      	ldr	r4, [r1, #0]
 80085b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085b4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80085b6:	3b23      	subs	r3, #35	; 0x23
 80085b8:	fa04 fe03 	lsl.w	lr, r4, r3
 80085bc:	fa0c f303 	lsl.w	r3, ip, r3
 80085c0:	ea25 0303 	bic.w	r3, r5, r3
 80085c4:	ea43 030e 	orr.w	r3, r3, lr
 80085c8:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 80085ca:	2c09      	cmp	r4, #9
 80085cc:	d822      	bhi.n	8008614 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 80085ce:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80085d2:	2407      	movs	r4, #7
 80085d4:	6943      	ldr	r3, [r0, #20]
 80085d6:	6889      	ldr	r1, [r1, #8]
 80085d8:	40ac      	lsls	r4, r5
 80085da:	40a9      	lsls	r1, r5
 80085dc:	ea23 0404 	bic.w	r4, r3, r4
 80085e0:	430c      	orrs	r4, r1
 80085e2:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 80085e4:	2300      	movs	r3, #0
  return tmp_hal_status;
 80085e6:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80085e8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 80085ec:	b003      	add	sp, #12
 80085ee:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 80085f0:	f04f 0c1f 	mov.w	ip, #31
 80085f4:	680c      	ldr	r4, [r1, #0]
 80085f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80085fc:	3b05      	subs	r3, #5
 80085fe:	fa04 fe03 	lsl.w	lr, r4, r3
 8008602:	fa0c f303 	lsl.w	r3, ip, r3
 8008606:	ea25 0303 	bic.w	r3, r5, r3
 800860a:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 800860e:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8008610:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8008612:	d9dc      	bls.n	80085ce <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8008614:	2c13      	cmp	r4, #19
 8008616:	d844      	bhi.n	80086a2 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8008618:	f04f 0c07 	mov.w	ip, #7
 800861c:	688d      	ldr	r5, [r1, #8]
 800861e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008622:	6903      	ldr	r3, [r0, #16]
 8008624:	391e      	subs	r1, #30
 8008626:	408d      	lsls	r5, r1
 8008628:	fa0c f101 	lsl.w	r1, ip, r1
 800862c:	ea23 0301 	bic.w	r3, r3, r1
 8008630:	432b      	orrs	r3, r5
 8008632:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008634:	f1a4 0310 	sub.w	r3, r4, #16
 8008638:	2b01      	cmp	r3, #1
 800863a:	d8d3      	bhi.n	80085e4 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800863c:	4b34      	ldr	r3, [pc, #208]	; (8008710 <HAL_ADC_ConfigChannel+0x18c>)
 800863e:	6859      	ldr	r1, [r3, #4]
 8008640:	0209      	lsls	r1, r1, #8
 8008642:	d4cf      	bmi.n	80085e4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8008644:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008646:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8008648:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800864c:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800864e:	d1c9      	bne.n	80085e4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008650:	4b30      	ldr	r3, [pc, #192]	; (8008714 <HAL_ADC_ConfigChannel+0x190>)
 8008652:	4931      	ldr	r1, [pc, #196]	; (8008718 <HAL_ADC_ConfigChannel+0x194>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	fba1 1303 	umull	r1, r3, r1, r3
 800865a:	0c9b      	lsrs	r3, r3, #18
 800865c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8008664:	9b01      	ldr	r3, [sp, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0bc      	beq.n	80085e4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800866a:	9b01      	ldr	r3, [sp, #4]
 800866c:	3b01      	subs	r3, #1
 800866e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8008670:	9b01      	ldr	r3, [sp, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f9      	bne.n	800866a <HAL_ADC_ConfigChannel+0xe6>
 8008676:	e7b5      	b.n	80085e4 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 8008678:	2b12      	cmp	r3, #18
 800867a:	d925      	bls.n	80086c8 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 800867c:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 800867e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8008682:	d835      	bhi.n	80086f0 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8008684:	f04f 0c1f 	mov.w	ip, #31
 8008688:	680c      	ldr	r4, [r1, #0]
 800868a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800868c:	3b5f      	subs	r3, #95	; 0x5f
 800868e:	fa04 fe03 	lsl.w	lr, r4, r3
 8008692:	fa0c f303 	lsl.w	r3, ip, r3
 8008696:	ea25 0303 	bic.w	r3, r5, r3
 800869a:	ea43 030e 	orr.w	r3, r3, lr
 800869e:	6343      	str	r3, [r0, #52]	; 0x34
 80086a0:	e793      	b.n	80085ca <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80086a2:	2c1a      	cmp	r4, #26
 80086a4:	d80d      	bhi.n	80086c2 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 80086a6:	2507      	movs	r5, #7
 80086a8:	6889      	ldr	r1, [r1, #8]
 80086aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80086ae:	68c3      	ldr	r3, [r0, #12]
 80086b0:	3c3c      	subs	r4, #60	; 0x3c
 80086b2:	40a1      	lsls	r1, r4
 80086b4:	fa05 f404 	lsl.w	r4, r5, r4
 80086b8:	ea23 0304 	bic.w	r3, r3, r4
 80086bc:	430b      	orrs	r3, r1
 80086be:	60c3      	str	r3, [r0, #12]
 80086c0:	e790      	b.n	80085e4 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80086c2:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80086c4:	680c      	ldr	r4, [r1, #0]
 80086c6:	e7b5      	b.n	8008634 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 80086c8:	f04f 0c1f 	mov.w	ip, #31
 80086cc:	680c      	ldr	r4, [r1, #0]
 80086ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80086d2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80086d4:	3b41      	subs	r3, #65	; 0x41
 80086d6:	fa04 fe03 	lsl.w	lr, r4, r3
 80086da:	fa0c f303 	lsl.w	r3, ip, r3
 80086de:	ea25 0303 	bic.w	r3, r5, r3
 80086e2:	ea43 030e 	orr.w	r3, r3, lr
 80086e6:	6383      	str	r3, [r0, #56]	; 0x38
 80086e8:	e76f      	b.n	80085ca <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 80086ea:	2002      	movs	r0, #2
}
 80086ec:	b003      	add	sp, #12
 80086ee:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 80086f0:	f04f 0c1f 	mov.w	ip, #31
 80086f4:	680c      	ldr	r4, [r1, #0]
 80086f6:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80086f8:	3b7d      	subs	r3, #125	; 0x7d
 80086fa:	fa04 fe03 	lsl.w	lr, r4, r3
 80086fe:	fa0c f303 	lsl.w	r3, ip, r3
 8008702:	ea25 0303 	bic.w	r3, r5, r3
 8008706:	ea43 030e 	orr.w	r3, r3, lr
 800870a:	6303      	str	r3, [r0, #48]	; 0x30
 800870c:	e75d      	b.n	80085ca <HAL_ADC_ConfigChannel+0x46>
 800870e:	bf00      	nop
 8008710:	40012700 	.word	0x40012700
 8008714:	2000001c 	.word	0x2000001c
 8008718:	431bde83 	.word	0x431bde83

0800871c <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 800871c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008720:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8008722:	2b01      	cmp	r3, #1
 8008724:	d024      	beq.n	8008770 <HAL_ADC_AnalogWDGConfig+0x54>
 8008726:	2301      	movs	r3, #1
{
 8008728:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800872a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 800872e:	7a0b      	ldrb	r3, [r1, #8]
 8008730:	4686      	mov	lr, r0
 8008732:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8008734:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 8008736:	d016      	beq.n	8008766 <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8008738:	685c      	ldr	r4, [r3, #4]
 800873a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800873e:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8008740:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8008744:	6858      	ldr	r0, [r3, #4]
 8008746:	4c0b      	ldr	r4, [pc, #44]	; (8008774 <HAL_ADC_AnalogWDGConfig+0x58>)
 8008748:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800874a:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 800874c:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800874e:	4302      	orrs	r2, r0
 8008750:	6858      	ldr	r0, [r3, #4]
 8008752:	4302      	orrs	r2, r0
 8008754:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8008756:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800875a:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800875c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 800875e:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8008762:	4660      	mov	r0, ip
}
 8008764:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8008766:	6858      	ldr	r0, [r3, #4]
 8008768:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800876c:	6058      	str	r0, [r3, #4]
 800876e:	e7e7      	b.n	8008740 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8008770:	2002      	movs	r0, #2
}
 8008772:	4770      	bx	lr
 8008774:	ff3ffde0 	.word	0xff3ffde0

08008778 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8008778:	2300      	movs	r3, #0
{
 800877a:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800877c:	6802      	ldr	r2, [r0, #0]
{
 800877e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8008780:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	0659      	lsls	r1, r3, #25
 8008786:	d429      	bmi.n	80087dc <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008788:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <ADC_Enable+0x84>)
 800878a:	4604      	mov	r4, r0
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	481c      	ldr	r0, [pc, #112]	; (8008800 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8008790:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008792:	fba0 0303 	umull	r0, r3, r0, r3
 8008796:	0c9b      	lsrs	r3, r3, #18
 8008798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800879c:	f041 0101 	orr.w	r1, r1, #1
 80087a0:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80087a2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80087a4:	9b01      	ldr	r3, [sp, #4]
 80087a6:	b12b      	cbz	r3, 80087b4 <ADC_Enable+0x3c>
      wait_loop_index--;
 80087a8:	9b01      	ldr	r3, [sp, #4]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f9      	bne.n	80087a8 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 80087b4:	f7ff fc94 	bl	80080e0 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80087b8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 80087ba:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	065a      	lsls	r2, r3, #25
 80087c0:	d40c      	bmi.n	80087dc <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80087c2:	f7ff fc8d 	bl	80080e0 <HAL_GetTick>
 80087c6:	1b43      	subs	r3, r0, r5
 80087c8:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80087ca:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80087cc:	d903      	bls.n	80087d6 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80087d4:	d005      	beq.n	80087e2 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	065b      	lsls	r3, r3, #25
 80087da:	d5f2      	bpl.n	80087c2 <ADC_Enable+0x4a>
  return HAL_OK;
 80087dc:	2000      	movs	r0, #0
}
 80087de:	b003      	add	sp, #12
 80087e0:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 80087e2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 80087e6:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087ea:	f043 0310 	orr.w	r3, r3, #16
 80087ee:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80087f2:	4303      	orrs	r3, r0
 80087f4:	6523      	str	r3, [r4, #80]	; 0x50
}
 80087f6:	b003      	add	sp, #12
 80087f8:	bd30      	pop	{r4, r5, pc}
 80087fa:	bf00      	nop
 80087fc:	2000001c 	.word	0x2000001c
 8008800:	431bde83 	.word	0x431bde83

08008804 <HAL_ADC_Start_DMA>:
{
 8008804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8008808:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 800880c:	2d01      	cmp	r5, #1
 800880e:	d04c      	beq.n	80088aa <HAL_ADC_Start_DMA+0xa6>
 8008810:	2301      	movs	r3, #1
 8008812:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8008816:	4604      	mov	r4, r0
 8008818:	4688      	mov	r8, r1
 800881a:	4617      	mov	r7, r2
 800881c:	f7ff ffac 	bl	8008778 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8008820:	4605      	mov	r5, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	d13e      	bne.n	80088a4 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8008826:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008828:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800882a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800882e:	f020 0001 	bic.w	r0, r0, #1
 8008832:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008836:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008838:	6873      	ldr	r3, [r6, #4]
 800883a:	055b      	lsls	r3, r3, #21
 800883c:	d505      	bpl.n	800884a <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800883e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008840:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008844:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008848:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 800884a:	2100      	movs	r1, #0
 800884c:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008850:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008854:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008856:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008858:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800885c:	bf18      	it	ne
 800885e:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008860:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008862:	bf18      	it	ne
 8008864:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8008868:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800886a:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800886c:	4f11      	ldr	r7, [pc, #68]	; (80088b4 <HAL_ADC_Start_DMA+0xb0>)
 800886e:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008870:	4f11      	ldr	r7, [pc, #68]	; (80088b8 <HAL_ADC_Start_DMA+0xb4>)
 8008872:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008874:	4f11      	ldr	r7, [pc, #68]	; (80088bc <HAL_ADC_Start_DMA+0xb8>)
 8008876:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008878:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800887a:	6871      	ldr	r1, [r6, #4]
 800887c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008880:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008882:	68b1      	ldr	r1, [r6, #8]
 8008884:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008888:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800888a:	f106 0158 	add.w	r1, r6, #88	; 0x58
 800888e:	f000 f98f 	bl	8008bb0 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800889a:	d103      	bne.n	80088a4 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80088a2:	609a      	str	r2, [r3, #8]
}
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 80088aa:	2502      	movs	r5, #2
}
 80088ac:	4628      	mov	r0, r5
 80088ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b2:	bf00      	nop
 80088b4:	080083cd 	.word	0x080083cd
 80088b8:	0800842d 	.word	0x0800842d
 80088bc:	0800843d 	.word	0x0800843d

080088c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop

080088c4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088c4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088c8:	4906      	ldr	r1, [pc, #24]	; (80088e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80088ca:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088cc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80088ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088d2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80088e0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80088e2:	4770      	bx	lr
 80088e4:	e000ed00 	.word	0xe000ed00

080088e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088e8:	4b1c      	ldr	r3, [pc, #112]	; (800895c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088ea:	b500      	push	{lr}
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088f2:	f1c3 0e07 	rsb	lr, r3, #7
 80088f6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088fe:	bf28      	it	cs
 8008900:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008904:	f1bc 0f06 	cmp.w	ip, #6
 8008908:	d91b      	bls.n	8008942 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800890a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800890e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008910:	fa0c fc03 	lsl.w	ip, ip, r3
 8008914:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008918:	f04f 3cff 	mov.w	ip, #4294967295
 800891c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008920:	ea21 010c 	bic.w	r1, r1, ip
 8008924:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8008926:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008928:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800892c:	db0c      	blt.n	8008948 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800892e:	0109      	lsls	r1, r1, #4
 8008930:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008934:	b2c9      	uxtb	r1, r1
 8008936:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800893a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800893e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008942:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008944:	4613      	mov	r3, r2
 8008946:	e7e7      	b.n	8008918 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008948:	4b05      	ldr	r3, [pc, #20]	; (8008960 <HAL_NVIC_SetPriority+0x78>)
 800894a:	f000 000f 	and.w	r0, r0, #15
 800894e:	0109      	lsls	r1, r1, #4
 8008950:	b2c9      	uxtb	r1, r1
 8008952:	4403      	add	r3, r0
 8008954:	7619      	strb	r1, [r3, #24]
 8008956:	f85d fb04 	ldr.w	pc, [sp], #4
 800895a:	bf00      	nop
 800895c:	e000ed00 	.word	0xe000ed00
 8008960:	e000ecfc 	.word	0xe000ecfc

08008964 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008964:	2800      	cmp	r0, #0
 8008966:	db07      	blt.n	8008978 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008968:	2301      	movs	r3, #1
 800896a:	f000 011f 	and.w	r1, r0, #31
 800896e:	4a03      	ldr	r2, [pc, #12]	; (800897c <HAL_NVIC_EnableIRQ+0x18>)
 8008970:	0940      	lsrs	r0, r0, #5
 8008972:	408b      	lsls	r3, r1
 8008974:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	e000e100 	.word	0xe000e100

08008980 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008980:	2800      	cmp	r0, #0
 8008982:	db0d      	blt.n	80089a0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008984:	2201      	movs	r2, #1
 8008986:	4907      	ldr	r1, [pc, #28]	; (80089a4 <HAL_NVIC_DisableIRQ+0x24>)
 8008988:	0943      	lsrs	r3, r0, #5
 800898a:	f000 001f 	and.w	r0, r0, #31
 800898e:	3320      	adds	r3, #32
 8008990:	fa02 f000 	lsl.w	r0, r2, r0
 8008994:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800899c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	e000e100 	.word	0xe000e100

080089a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089a8:	3801      	subs	r0, #1
 80089aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80089ae:	d20f      	bcs.n	80089d0 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089b4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089b8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089ba:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089bc:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089be:	4c05      	ldr	r4, [pc, #20]	; (80089d4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089c6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089c8:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80089ca:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089cc:	6119      	str	r1, [r3, #16]
 80089ce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80089d0:	2001      	movs	r0, #1
 80089d2:	4770      	bx	lr
 80089d4:	e000ed00 	.word	0xe000ed00

080089d8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80089d8:	b188      	cbz	r0, 80089fe <HAL_DAC_Init+0x26>
{
 80089da:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80089dc:	7903      	ldrb	r3, [r0, #4]
 80089de:	4604      	mov	r4, r0
 80089e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089e4:	b13b      	cbz	r3, 80089f6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80089e6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80089e8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80089ea:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80089ec:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80089ee:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80089f0:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80089f2:	4618      	mov	r0, r3
}
 80089f4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80089f6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80089f8:	f7ff f8b8 	bl	8007b6c <HAL_DAC_MspInit>
 80089fc:	e7f3      	b.n	80089e6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80089fe:	2001      	movs	r0, #1
}
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop

08008a04 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008a04:	7942      	ldrb	r2, [r0, #5]
 8008a06:	2a01      	cmp	r2, #1
 8008a08:	d02a      	beq.n	8008a60 <HAL_DAC_Start+0x5c>
{
 8008a0a:	b410      	push	{r4}
 8008a0c:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a0e:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008a10:	2201      	movs	r2, #1
 8008a12:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a14:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8008a16:	6804      	ldr	r4, [r0, #0]
 8008a18:	f001 0c10 	and.w	ip, r1, #16
 8008a1c:	fa02 f20c 	lsl.w	r2, r2, ip
 8008a20:	4322      	orrs	r2, r4
 8008a22:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8008a24:	b979      	cbnz	r1, 8008a46 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008a26:	6802      	ldr	r2, [r0, #0]
 8008a28:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8008a2c:	2a3c      	cmp	r2, #60	; 0x3c
 8008a2e:	d103      	bne.n	8008a38 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008a30:	6842      	ldr	r2, [r0, #4]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008a38:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008a3a:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8008a3c:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8008a3e:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008a40:	4610      	mov	r0, r2
}
 8008a42:	bc10      	pop	{r4}
 8008a44:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008a46:	223c      	movs	r2, #60	; 0x3c
 8008a48:	6801      	ldr	r1, [r0, #0]
 8008a4a:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008a4e:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8008a52:	4561      	cmp	r1, ip
 8008a54:	d1f0      	bne.n	8008a38 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008a56:	6842      	ldr	r2, [r0, #4]
 8008a58:	f042 0202 	orr.w	r2, r2, #2
 8008a5c:	6042      	str	r2, [r0, #4]
 8008a5e:	e7eb      	b.n	8008a38 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8008a60:	2002      	movs	r0, #2
}
 8008a62:	4770      	bx	lr

08008a64 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008a64:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8008a66:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008a68:	6800      	ldr	r0, [r0, #0]
{
 8008a6a:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008a6c:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8008a6e:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8008a70:	b949      	cbnz	r1, 8008a86 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008a72:	9901      	ldr	r1, [sp, #4]
 8008a74:	3108      	adds	r1, #8
 8008a76:	440a      	add	r2, r1
 8008a78:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8008a7a:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8008a7c:	9a01      	ldr	r2, [sp, #4]
 8008a7e:	6013      	str	r3, [r2, #0]
}
 8008a80:	b003      	add	sp, #12
 8008a82:	bc10      	pop	{r4}
 8008a84:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	3114      	adds	r1, #20
 8008a8a:	440a      	add	r2, r1
 8008a8c:	9201      	str	r2, [sp, #4]
 8008a8e:	e7f4      	b.n	8008a7a <HAL_DAC_SetValue+0x16>

08008a90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008a90:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008a92:	7940      	ldrb	r0, [r0, #5]
 8008a94:	2801      	cmp	r0, #1
 8008a96:	d022      	beq.n	8008ade <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a98:	2002      	movs	r0, #2
{
 8008a9a:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008a9c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008aa0:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008aa4:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008aa8:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008aaa:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8008aac:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008aae:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008ab2:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008ab6:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008ab8:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008aba:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008abe:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8008ac2:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8008ac4:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008ac6:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008aca:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8008acc:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	ea22 020c 	bic.w	r2, r2, ip
 8008ad4:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008ad6:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8008ad8:	f883 e005 	strb.w	lr, [r3, #5]
}
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8008ade:	2002      	movs	r0, #2
}
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop

08008ae4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008ae4:	b370      	cbz	r0, 8008b44 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008ae6:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ae8:	2202      	movs	r2, #2
{
 8008aea:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008aec:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008af0:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008af2:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8008af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8008af8:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008afa:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8008afc:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8008b00:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8008b04:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008b06:	4910      	ldr	r1, [pc, #64]	; (8008b48 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b08:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008b0a:	4d10      	ldr	r5, [pc, #64]	; (8008b4c <HAL_DMA_Init+0x68>)
 8008b0c:	4401      	add	r1, r0
 8008b0e:	fba5 5101 	umull	r5, r1, r5, r1
 8008b12:	0909      	lsrs	r1, r1, #4
 8008b14:	0089      	lsls	r1, r1, #2
 8008b16:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b18:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8008b1a:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b1e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b20:	6959      	ldr	r1, [r3, #20]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	6999      	ldr	r1, [r3, #24]
 8008b26:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b28:	69d9      	ldr	r1, [r3, #28]
 8008b2a:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8008b2c:	4908      	ldr	r1, [pc, #32]	; (8008b50 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8008b2e:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8008b32:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8008b34:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b36:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008b38:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8008b3c:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8008b40:	4620      	mov	r0, r4
}
 8008b42:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008b44:	2001      	movs	r0, #1
}
 8008b46:	4770      	bx	lr
 8008b48:	bffd9ff8 	.word	0xbffd9ff8
 8008b4c:	cccccccd 	.word	0xcccccccd
 8008b50:	40026000 	.word	0x40026000

08008b54 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8008b54:	b320      	cbz	r0, 8008ba0 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008b56:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b58:	2101      	movs	r1, #1
{
 8008b5a:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8008b5c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8008b5e:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008b60:	4810      	ldr	r0, [pc, #64]	; (8008ba4 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8008b62:	682a      	ldr	r2, [r5, #0]
 8008b64:	f022 0201 	bic.w	r2, r2, #1
 8008b68:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008b6a:	4a0f      	ldr	r2, [pc, #60]	; (8008ba8 <HAL_DMA_DeInit+0x54>)
 8008b6c:	442a      	add	r2, r5
 8008b6e:	fba0 0202 	umull	r0, r2, r0, r2
 8008b72:	0912      	lsrs	r2, r2, #4
 8008b74:	0092      	lsls	r2, r2, #2
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b78:	f002 021c 	and.w	r2, r2, #28
 8008b7c:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8008b80:	490a      	ldr	r1, [pc, #40]	; (8008bac <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8008b82:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8008b84:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8008b86:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b88:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b8a:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8008b8c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8008b90:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8008b94:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8008b98:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8008b9c:	bc30      	pop	{r4, r5}
 8008b9e:	4770      	bx	lr
    return HAL_ERROR;
 8008ba0:	2001      	movs	r0, #1
}
 8008ba2:	4770      	bx	lr
 8008ba4:	cccccccd 	.word	0xcccccccd
 8008ba8:	bffd9ff8 	.word	0xbffd9ff8
 8008bac:	40026000 	.word	0x40026000

08008bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bb0:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008bb2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008bb6:	2801      	cmp	r0, #1
 8008bb8:	d042      	beq.n	8008c40 <HAL_DMA_Start_IT+0x90>
{
 8008bba:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8008bbc:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8008bbe:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8008bc2:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bc6:	42a0      	cmp	r0, r4
 8008bc8:	fa5f fe80 	uxtb.w	lr, r0
 8008bcc:	d004      	beq.n	8008bd8 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008bd4:	2002      	movs	r0, #2
  }
  return status;
}
 8008bd6:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bd8:	2002      	movs	r0, #2
 8008bda:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bde:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008be0:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008be4:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8008be8:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bea:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8008bee:	f025 0501 	bic.w	r5, r5, #1
 8008bf2:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bf4:	f000 001c 	and.w	r0, r0, #28
 8008bf8:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8008bfc:	fa0e f000 	lsl.w	r0, lr, r0
 8008c00:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008c02:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c04:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008c08:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8008c0a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008c0e:	bf0b      	itete	eq
 8008c10:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008c12:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008c14:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008c16:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8008c18:	b14b      	cbz	r3, 8008c2e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	f043 030e 	orr.w	r3, r3, #14
 8008c20:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008c22:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c24:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	6023      	str	r3, [r4, #0]
}
 8008c2c:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	f023 0304 	bic.w	r3, r3, #4
 8008c34:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	f043 030a 	orr.w	r3, r3, #10
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	e7f0      	b.n	8008c22 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8008c40:	2002      	movs	r0, #2
}
 8008c42:	4770      	bx	lr

08008c44 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c44:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8008c48:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c4a:	2a02      	cmp	r2, #2
 8008c4c:	d006      	beq.n	8008c5c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c4e:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8008c50:	2200      	movs	r2, #0
    return HAL_ERROR;
 8008c52:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c54:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8008c56:	f883 2020 	strb.w	r2, [r3, #32]
}
 8008c5a:	4770      	bx	lr
{
 8008c5c:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c5e:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8008c62:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c66:	6802      	ldr	r2, [r0, #0]
 8008c68:	6811      	ldr	r1, [r2, #0]
 8008c6a:	f021 010e 	bic.w	r1, r1, #14
 8008c6e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008c70:	6811      	ldr	r1, [r2, #0]
 8008c72:	f021 0101 	bic.w	r1, r1, #1
 8008c76:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c78:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8008c7c:	f002 021c 	and.w	r2, r2, #28
 8008c80:	fa0e f202 	lsl.w	r2, lr, r2
 8008c84:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008c86:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008c8a:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8008c8e:	4660      	mov	r0, ip
}
 8008c90:	f85d fb04 	ldr.w	pc, [sp], #4

08008c94 <HAL_DMA_Abort_IT>:
{
 8008c94:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c96:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8008c9a:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c9c:	2a02      	cmp	r2, #2
 8008c9e:	d003      	beq.n	8008ca8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca0:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8008ca2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ca8:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008caa:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cae:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cb2:	f024 040e 	bic.w	r4, r4, #14
 8008cb6:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8008cb8:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8008cba:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cbc:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8008cc0:	f025 0501 	bic.w	r5, r5, #1
 8008cc4:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cc6:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8008cc8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cca:	fa0c f202 	lsl.w	r2, ip, r2
 8008cce:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008cd0:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008cd4:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008cd8:	b111      	cbz	r1, 8008ce0 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8008cda:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8008cdc:	4620      	mov	r0, r4
}
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8008ce0:	4608      	mov	r0, r1
}
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}

08008ce4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008ce4:	2204      	movs	r2, #4
{
 8008ce6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008ce8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008cea:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008cec:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008cf0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008cf2:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8008cf8:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008cfa:	d00e      	beq.n	8008d1a <HAL_DMA_IRQHandler+0x36>
 8008cfc:	f014 0f04 	tst.w	r4, #4
 8008d00:	d00b      	beq.n	8008d1a <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	069b      	lsls	r3, r3, #26
 8008d06:	d403      	bmi.n	8008d10 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	f023 0304 	bic.w	r3, r3, #4
 8008d0e:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8008d10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008d12:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008d14:	b1cb      	cbz	r3, 8008d4a <HAL_DMA_IRQHandler+0x66>
}
 8008d16:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8008d18:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	409a      	lsls	r2, r3
 8008d1e:	420a      	tst	r2, r1
 8008d20:	d015      	beq.n	8008d4e <HAL_DMA_IRQHandler+0x6a>
 8008d22:	f014 0f02 	tst.w	r4, #2
 8008d26:	d012      	beq.n	8008d4e <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	0699      	lsls	r1, r3, #26
 8008d2c:	d406      	bmi.n	8008d3c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	f023 030a 	bic.w	r3, r3, #10
 8008d34:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008d3c:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8008d3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d40:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8008d42:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e5      	bne.n	8008d16 <HAL_DMA_IRQHandler+0x32>
}
 8008d4a:	bc70      	pop	{r4, r5, r6}
 8008d4c:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008d4e:	2208      	movs	r2, #8
 8008d50:	409a      	lsls	r2, r3
 8008d52:	420a      	tst	r2, r1
 8008d54:	d0f9      	beq.n	8008d4a <HAL_DMA_IRQHandler+0x66>
 8008d56:	0722      	lsls	r2, r4, #28
 8008d58:	d5f7      	bpl.n	8008d4a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d5a:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8008d5c:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d5e:	f022 020e 	bic.w	r2, r2, #14
 8008d62:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d64:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8008d66:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d6e:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8008d70:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8008d74:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	d0e6      	beq.n	8008d4a <HAL_DMA_IRQHandler+0x66>
}
 8008d7c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8008d7e:	4708      	bx	r1

08008d80 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d041      	beq.n	8008e08 <HAL_EXTI_SetConfigLine+0x88>
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d03f      	beq.n	8008e08 <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8008d88:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8008d8c:	680b      	ldr	r3, [r1, #0]
{
 8008d8e:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8008d90:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8008d94:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008d96:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8008d98:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008d9c:	d519      	bpl.n	8008dd2 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8008d9e:	4d25      	ldr	r5, [pc, #148]	; (8008e34 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008da0:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8008da2:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008da4:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8008da8:	bf14      	ite	ne
 8008daa:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8008dae:	ea24 040c 	biceq.w	r4, r4, ip
 8008db2:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8008db4:	4c1f      	ldr	r4, [pc, #124]	; (8008e34 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8008db6:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8008dba:	68e0      	ldr	r0, [r4, #12]
 8008dbc:	bf14      	ite	ne
 8008dbe:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8008dc2:	ea20 000c 	biceq.w	r0, r0, ip
 8008dc6:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8008dc8:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8008dcc:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8008dd0:	d01c      	beq.n	8008e0c <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8008dd2:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008dd4:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8008dd6:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008dd8:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8008dda:	bf4c      	ite	mi
 8008ddc:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8008de0:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008de4:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8008de8:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8008dea:	4a12      	ldr	r2, [pc, #72]	; (8008e34 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008dec:	d105      	bne.n	8008dfa <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8008dee:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8008df0:	6853      	ldr	r3, [r2, #4]
 8008df2:	ea23 030c 	bic.w	r3, r3, ip
 8008df6:	6053      	str	r3, [r2, #4]
}
 8008df8:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8008dfa:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8008dfc:	2000      	movs	r0, #0
}
 8008dfe:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8008e00:	ea43 030c 	orr.w	r3, r3, ip
 8008e04:	6053      	str	r3, [r2, #4]
}
 8008e06:	4770      	bx	lr
    return HAL_ERROR;
 8008e08:	2001      	movs	r0, #1
}
 8008e0a:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e0c:	250f      	movs	r5, #15
 8008e0e:	f002 021c 	and.w	r2, r2, #28
 8008e12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e16:	68c8      	ldr	r0, [r1, #12]
 8008e18:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e1c:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8008e20:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e22:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e24:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e26:	fa05 f303 	lsl.w	r3, r5, r3
 8008e2a:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008e2e:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8008e30:	6090      	str	r0, [r2, #8]
 8008e32:	e7ce      	b.n	8008dd2 <HAL_EXTI_SetConfigLine+0x52>
 8008e34:	40010400 	.word	0x40010400

08008e38 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008e38:	2301      	movs	r3, #1
 8008e3a:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8008e3c:	4902      	ldr	r1, [pc, #8]	; (8008e48 <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008e3e:	f002 021f 	and.w	r2, r2, #31
 8008e42:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8008e44:	610b      	str	r3, [r1, #16]
}
 8008e46:	4770      	bx	lr
 8008e48:	40010400 	.word	0x40010400

08008e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008e50:	680c      	ldr	r4, [r1, #0]
{
 8008e52:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	d07c      	beq.n	8008f52 <HAL_GPIO_Init+0x106>
 8008e58:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008e5c:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8008e60:	4673      	mov	r3, lr
 8008e62:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008e64:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8008e68:	ea15 0a04 	ands.w	sl, r5, r4
 8008e6c:	d06b      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008e6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008e72:	f001 0203 	and.w	r2, r1, #3
 8008e76:	1e57      	subs	r7, r2, #1
 8008e78:	2f01      	cmp	r7, #1
 8008e7a:	d96d      	bls.n	8008f58 <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e7c:	2a03      	cmp	r2, #3
 8008e7e:	f040 80ae 	bne.w	8008fde <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008e82:	fa02 f20e 	lsl.w	r2, r2, lr
 8008e86:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e88:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e8a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8008e8e:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008e92:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8008e96:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e98:	d055      	beq.n	8008f46 <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008e9a:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e9c:	4d5a      	ldr	r5, [pc, #360]	; (8009008 <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008e9e:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ea2:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008ea4:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ea6:	f042 0201 	orr.w	r2, r2, #1
 8008eaa:	622a      	str	r2, [r5, #32]
 8008eac:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008eae:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008eb2:	f002 0201 	and.w	r2, r2, #1
 8008eb6:	9203      	str	r2, [sp, #12]
 8008eb8:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8008eba:	f023 0203 	bic.w	r2, r3, #3
 8008ebe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008ec2:	4e52      	ldr	r6, [pc, #328]	; (800900c <HAL_GPIO_Init+0x1c0>)
 8008ec4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8008ec8:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008eca:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008ecc:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008ed0:	d015      	beq.n	8008efe <HAL_GPIO_Init+0xb2>
 8008ed2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008ed6:	42b0      	cmp	r0, r6
 8008ed8:	f000 808c 	beq.w	8008ff4 <HAL_GPIO_Init+0x1a8>
 8008edc:	4e4c      	ldr	r6, [pc, #304]	; (8009010 <HAL_GPIO_Init+0x1c4>)
 8008ede:	42b0      	cmp	r0, r6
 8008ee0:	f000 808c 	beq.w	8008ffc <HAL_GPIO_Init+0x1b0>
 8008ee4:	4e4b      	ldr	r6, [pc, #300]	; (8009014 <HAL_GPIO_Init+0x1c8>)
 8008ee6:	42b0      	cmp	r0, r6
 8008ee8:	d07e      	beq.n	8008fe8 <HAL_GPIO_Init+0x19c>
 8008eea:	4e4b      	ldr	r6, [pc, #300]	; (8009018 <HAL_GPIO_Init+0x1cc>)
 8008eec:	42b0      	cmp	r0, r6
 8008eee:	bf0c      	ite	eq
 8008ef0:	f04f 0804 	moveq.w	r8, #4
 8008ef4:	f04f 0805 	movne.w	r8, #5
 8008ef8:	fa08 f707 	lsl.w	r7, r8, r7
 8008efc:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008efe:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8008f02:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8008f04:	4a45      	ldr	r2, [pc, #276]	; (800901c <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f06:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8008f08:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8008f0a:	4d44      	ldr	r5, [pc, #272]	; (800901c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008f0c:	bf54      	ite	pl
 8008f0e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008f10:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8008f14:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8008f16:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f18:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8008f1a:	4a40      	ldr	r2, [pc, #256]	; (800901c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008f1c:	bf54      	ite	pl
 8008f1e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008f20:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8008f24:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f26:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f28:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8008f2a:	4a3c      	ldr	r2, [pc, #240]	; (800901c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008f2c:	bf54      	ite	pl
 8008f2e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008f30:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8008f34:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8008f36:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f38:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8008f3a:	4938      	ldr	r1, [pc, #224]	; (800901c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008f3c:	bf54      	ite	pl
 8008f3e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008f40:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8008f44:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8008f46:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8008f48:	fa34 f203 	lsrs.w	r2, r4, r3
 8008f4c:	f10e 0e02 	add.w	lr, lr, #2
 8008f50:	d188      	bne.n	8008e64 <HAL_GPIO_Init+0x18>
  }
}
 8008f52:	b005      	add	sp, #20
 8008f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f58:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8008f5c:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008f5e:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f62:	fa09 f90e 	lsl.w	r9, r9, lr
 8008f66:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008f6a:	fa07 f70e 	lsl.w	r7, r7, lr
 8008f6e:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8008f70:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f72:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8008f76:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f7a:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8008f7e:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8008f82:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f86:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8008f8a:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8008f8c:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f8e:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008f90:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8008f94:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008f98:	fa02 f20e 	lsl.w	r2, r2, lr
 8008f9c:	fa05 f50e 	lsl.w	r5, r5, lr
 8008fa0:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8008fa4:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fa6:	f47f af6f 	bne.w	8008e88 <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008faa:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008fae:	f003 0807 	and.w	r8, r3, #7
 8008fb2:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008fb6:	fa05 f508 	lsl.w	r5, r5, r8
 8008fba:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008fbc:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8008fbe:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008fc2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008fc6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008fca:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008fce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008fd0:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008fd4:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8008fd8:	f8c9 5020 	str.w	r5, [r9, #32]
 8008fdc:	e754      	b.n	8008e88 <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008fde:	2703      	movs	r7, #3
 8008fe0:	fa07 f70e 	lsl.w	r7, r7, lr
 8008fe4:	43ff      	mvns	r7, r7
 8008fe6:	e7d1      	b.n	8008f8c <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008fe8:	f04f 0803 	mov.w	r8, #3
 8008fec:	fa08 f707 	lsl.w	r7, r8, r7
 8008ff0:	433d      	orrs	r5, r7
 8008ff2:	e784      	b.n	8008efe <HAL_GPIO_Init+0xb2>
 8008ff4:	fa0b f707 	lsl.w	r7, fp, r7
 8008ff8:	433d      	orrs	r5, r7
 8008ffa:	e780      	b.n	8008efe <HAL_GPIO_Init+0xb2>
 8008ffc:	f04f 0802 	mov.w	r8, #2
 8009000:	fa08 f707 	lsl.w	r7, r8, r7
 8009004:	433d      	orrs	r5, r7
 8009006:	e77a      	b.n	8008efe <HAL_GPIO_Init+0xb2>
 8009008:	40023800 	.word	0x40023800
 800900c:	40020000 	.word	0x40020000
 8009010:	40020800 	.word	0x40020800
 8009014:	40020c00 	.word	0x40020c00
 8009018:	40021000 	.word	0x40021000
 800901c:	40010400 	.word	0x40010400

08009020 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8009020:	2900      	cmp	r1, #0
 8009022:	f000 8083 	beq.w	800912c <HAL_GPIO_DeInit+0x10c>
{
 8009026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 800902a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800902c:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800902e:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8009032:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009036:	4e3e      	ldr	r6, [pc, #248]	; (8009130 <HAL_GPIO_DeInit+0x110>)
 8009038:	e051      	b.n	80090de <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800903a:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 800903e:	4558      	cmp	r0, fp
 8009040:	d069      	beq.n	8009116 <HAL_GPIO_DeInit+0xf6>
 8009042:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8009134 <HAL_GPIO_DeInit+0x114>
 8009046:	4558      	cmp	r0, fp
 8009048:	d068      	beq.n	800911c <HAL_GPIO_DeInit+0xfc>
 800904a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009138 <HAL_GPIO_DeInit+0x118>
 800904e:	4558      	cmp	r0, fp
 8009050:	d069      	beq.n	8009126 <HAL_GPIO_DeInit+0x106>
 8009052:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800913c <HAL_GPIO_DeInit+0x11c>
 8009056:	4558      	cmp	r0, fp
 8009058:	bf14      	ite	ne
 800905a:	f04f 0b05 	movne.w	fp, #5
 800905e:	f04f 0b04 	moveq.w	fp, #4
 8009062:	fa0b f404 	lsl.w	r4, fp, r4
 8009066:	45a4      	cmp	ip, r4
 8009068:	d113      	bne.n	8009092 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800906a:	6834      	ldr	r4, [r6, #0]
 800906c:	ea24 040e 	bic.w	r4, r4, lr
 8009070:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009072:	6874      	ldr	r4, [r6, #4]
 8009074:	ea24 040e 	bic.w	r4, r4, lr
 8009078:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800907a:	68b4      	ldr	r4, [r6, #8]
 800907c:	ea24 040e 	bic.w	r4, r4, lr
 8009080:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009082:	68f4      	ldr	r4, [r6, #12]
 8009084:	ea24 040e 	bic.w	r4, r4, lr
 8009088:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800908a:	68ac      	ldr	r4, [r5, #8]
 800908c:	ea24 0408 	bic.w	r4, r4, r8
 8009090:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8009092:	6805      	ldr	r5, [r0, #0]
 8009094:	005c      	lsls	r4, r3, #1
 8009096:	fa0a f404 	lsl.w	r4, sl, r4
 800909a:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800909e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80090a2:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80090a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80090a8:	f003 0507 	and.w	r5, r3, #7
 80090ac:	f8dc e020 	ldr.w	lr, [ip, #32]
 80090b0:	00ad      	lsls	r5, r5, #2
 80090b2:	fa09 f505 	lsl.w	r5, r9, r5
 80090b6:	ea2e 0505 	bic.w	r5, lr, r5
 80090ba:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80090be:	68c5      	ldr	r5, [r0, #12]
 80090c0:	ea25 0504 	bic.w	r5, r5, r4
 80090c4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80090c6:	6845      	ldr	r5, [r0, #4]
 80090c8:	ea25 0202 	bic.w	r2, r5, r2
 80090cc:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80090ce:	6882      	ldr	r2, [r0, #8]
 80090d0:	ea22 0404 	bic.w	r4, r2, r4
 80090d4:	6084      	str	r4, [r0, #8]
    }

    position++;
 80090d6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 80090d8:	fa31 f203 	lsrs.w	r2, r1, r3
 80090dc:	d019      	beq.n	8009112 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 80090de:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 80090e2:	ea12 0e01 	ands.w	lr, r2, r1
 80090e6:	d0f6      	beq.n	80090d6 <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 80090e8:	f023 0503 	bic.w	r5, r3, #3
 80090ec:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80090f0:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8009140 <HAL_GPIO_DeInit+0x120>
 80090f4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80090f8:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 80090fc:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8009100:	00a4      	lsls	r4, r4, #2
 8009102:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009106:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8009108:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800910c:	d195      	bne.n	800903a <HAL_GPIO_DeInit+0x1a>
 800910e:	2400      	movs	r4, #0
 8009110:	e7a9      	b.n	8009066 <HAL_GPIO_DeInit+0x46>
  }
}
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009116:	fa07 f404 	lsl.w	r4, r7, r4
 800911a:	e7a4      	b.n	8009066 <HAL_GPIO_DeInit+0x46>
 800911c:	f04f 0b02 	mov.w	fp, #2
 8009120:	fa0b f404 	lsl.w	r4, fp, r4
 8009124:	e79f      	b.n	8009066 <HAL_GPIO_DeInit+0x46>
 8009126:	fa0a f404 	lsl.w	r4, sl, r4
 800912a:	e79c      	b.n	8009066 <HAL_GPIO_DeInit+0x46>
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010400 	.word	0x40010400
 8009134:	40020800 	.word	0x40020800
 8009138:	40020c00 	.word	0x40020c00
 800913c:	40021000 	.word	0x40021000
 8009140:	40020000 	.word	0x40020000

08009144 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009144:	6903      	ldr	r3, [r0, #16]
 8009146:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009148:	bf14      	ite	ne
 800914a:	2001      	movne	r0, #1
 800914c:	2000      	moveq	r0, #0
 800914e:	4770      	bx	lr

08009150 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009150:	b902      	cbnz	r2, 8009154 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8009152:	0409      	lsls	r1, r1, #16
 8009154:	6181      	str	r1, [r0, #24]
  }
}
 8009156:	4770      	bx	lr

08009158 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009158:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800915a:	ea01 0203 	and.w	r2, r1, r3
 800915e:	ea21 0103 	bic.w	r1, r1, r3
 8009162:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009166:	6181      	str	r1, [r0, #24]
}
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop

0800916c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800916c:	4a04      	ldr	r2, [pc, #16]	; (8009180 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800916e:	6951      	ldr	r1, [r2, #20]
 8009170:	4201      	tst	r1, r0
 8009172:	d100      	bne.n	8009176 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8009174:	4770      	bx	lr
{
 8009176:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009178:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800917a:	f7fe f945 	bl	8007408 <HAL_GPIO_EXTI_Callback>
  }
}
 800917e:	bd08      	pop	{r3, pc}
 8009180:	40010400 	.word	0x40010400

08009184 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009184:	2800      	cmp	r0, #0
 8009186:	f000 80b9 	beq.w	80092fc <HAL_I2C_Init+0x178>
{
 800918a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800918c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009190:	4604      	mov	r4, r0
 8009192:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 8098 	beq.w	80092cc <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800919c:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800919e:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80091a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	f022 0201 	bic.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80091bc:	f001 fd1c 	bl	800abf8 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80091c0:	6863      	ldr	r3, [r4, #4]
 80091c2:	494f      	ldr	r1, [pc, #316]	; (8009300 <HAL_I2C_Init+0x17c>)
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d84f      	bhi.n	8009268 <HAL_I2C_Init+0xe4>
 80091c8:	4a4e      	ldr	r2, [pc, #312]	; (8009304 <HAL_I2C_Init+0x180>)
 80091ca:	4290      	cmp	r0, r2
 80091cc:	d97c      	bls.n	80092c8 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80091ce:	4d4e      	ldr	r5, [pc, #312]	; (8009308 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091d0:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80091d2:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091d6:	1e43      	subs	r3, r0, #1
 80091d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091dc:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091e0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80091e2:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091e4:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091e6:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091ea:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80091ee:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80091f2:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091f4:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091f6:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091f8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80091fc:	ea41 010c 	orr.w	r1, r1, ip
 8009200:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009202:	69d1      	ldr	r1, [r2, #28]
 8009204:	ea13 0f0e 	tst.w	r3, lr
 8009208:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800920c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009210:	d161      	bne.n	80092d6 <HAL_I2C_Init+0x152>
 8009212:	2304      	movs	r3, #4
 8009214:	430b      	orrs	r3, r1
 8009216:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009218:	6811      	ldr	r1, [r2, #0]
 800921a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800921e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8009222:	4303      	orrs	r3, r0
 8009224:	430b      	orrs	r3, r1
 8009226:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009228:	6891      	ldr	r1, [r2, #8]
 800922a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800922e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8009232:	4303      	orrs	r3, r0
 8009234:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009238:	430b      	orrs	r3, r1
 800923a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800923c:	68d0      	ldr	r0, [r2, #12]
 800923e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009242:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8009246:	430b      	orrs	r3, r1
 8009248:	4303      	orrs	r3, r0
 800924a:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800924c:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800924e:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8009250:	f043 0301 	orr.w	r3, r3, #1
 8009254:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8009256:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009258:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800925a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800925e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009260:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8009264:	4608      	mov	r0, r1
}
 8009266:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009268:	4a28      	ldr	r2, [pc, #160]	; (800930c <HAL_I2C_Init+0x188>)
 800926a:	4290      	cmp	r0, r2
 800926c:	d92c      	bls.n	80092c8 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800926e:	4d26      	ldr	r5, [pc, #152]	; (8009308 <HAL_I2C_Init+0x184>)
 8009270:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009274:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8009278:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800927c:	fb02 f101 	mul.w	r1, r2, r1
 8009280:	4d23      	ldr	r5, [pc, #140]	; (8009310 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009282:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009284:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009288:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800928a:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800928c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8009290:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8009294:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009296:	6a15      	ldr	r5, [r2, #32]
 8009298:	3101      	adds	r1, #1
 800929a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800929e:	4329      	orrs	r1, r5
 80092a0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80092a2:	69d1      	ldr	r1, [r2, #28]
 80092a4:	68a5      	ldr	r5, [r4, #8]
 80092a6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80092aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80092ae:	b9ad      	cbnz	r5, 80092dc <HAL_I2C_Init+0x158>
 80092b0:	3801      	subs	r0, #1
 80092b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80092b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ba:	3301      	adds	r3, #1
 80092bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c0:	b1d3      	cbz	r3, 80092f8 <HAL_I2C_Init+0x174>
 80092c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c6:	e7a5      	b.n	8009214 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80092c8:	2001      	movs	r0, #1
}
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80092cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80092d0:	f7fe fc7e 	bl	8007bd0 <HAL_I2C_MspInit>
 80092d4:	e762      	b.n	800919c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80092d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092da:	e79b      	b.n	8009214 <HAL_I2C_Init+0x90>
 80092dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092e0:	3801      	subs	r0, #1
 80092e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80092e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ea:	3301      	adds	r3, #1
 80092ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092f0:	b113      	cbz	r3, 80092f8 <HAL_I2C_Init+0x174>
 80092f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092f6:	e78d      	b.n	8009214 <HAL_I2C_Init+0x90>
 80092f8:	2301      	movs	r3, #1
 80092fa:	e78b      	b.n	8009214 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80092fc:	2001      	movs	r0, #1
}
 80092fe:	4770      	bx	lr
 8009300:	000186a0 	.word	0x000186a0
 8009304:	001e847f 	.word	0x001e847f
 8009308:	431bde83 	.word	0x431bde83
 800930c:	003d08ff 	.word	0x003d08ff
 8009310:	10624dd3 	.word	0x10624dd3

08009314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	4605      	mov	r5, r0
 800931a:	b083      	sub	sp, #12
 800931c:	4699      	mov	r9, r3
 800931e:	4688      	mov	r8, r1
 8009320:	4692      	mov	sl, r2
 8009322:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009324:	f7fe fedc 	bl	80080e0 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009328:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800932c:	2b20      	cmp	r3, #32
 800932e:	d003      	beq.n	8009338 <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8009330:	2002      	movs	r0, #2
  }
}
 8009332:	b003      	add	sp, #12
 8009334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009338:	4606      	mov	r6, r0
 800933a:	e005      	b.n	8009348 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800933c:	f7fe fed0 	bl	80080e0 <HAL_GetTick>
 8009340:	1b80      	subs	r0, r0, r6
 8009342:	2819      	cmp	r0, #25
 8009344:	f200 80f8 	bhi.w	8009538 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009348:	682c      	ldr	r4, [r5, #0]
 800934a:	69a3      	ldr	r3, [r4, #24]
 800934c:	ea6f 0c03 	mvn.w	ip, r3
 8009350:	f01c 0b02 	ands.w	fp, ip, #2
 8009354:	d0f2      	beq.n	800933c <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8009356:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d0e8      	beq.n	8009330 <HAL_I2C_Master_Transmit+0x1c>
 800935e:	2301      	movs	r3, #1
 8009360:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	07d9      	lsls	r1, r3, #31
 8009368:	d571      	bpl.n	800944e <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800936a:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800936c:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800936e:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009376:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009378:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800937c:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009380:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8009382:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009386:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009388:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800938c:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800938e:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009390:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8009392:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009396:	2b08      	cmp	r3, #8
 8009398:	d006      	beq.n	80093a8 <HAL_I2C_Master_Transmit+0x94>
 800939a:	2b01      	cmp	r3, #1
 800939c:	d004      	beq.n	80093a8 <HAL_I2C_Master_Transmit+0x94>
 800939e:	4293      	cmp	r3, r2
 80093a0:	d002      	beq.n	80093a8 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80093a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80093a4:	2b12      	cmp	r3, #18
 80093a6:	d103      	bne.n	80093b0 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	1c7b      	adds	r3, r7, #1
 80093b2:	d13e      	bne.n	8009432 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093b4:	6963      	ldr	r3, [r4, #20]
 80093b6:	07d8      	lsls	r0, r3, #31
 80093b8:	d5fc      	bpl.n	80093b4 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093ba:	692b      	ldr	r3, [r5, #16]
 80093bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c0:	d14a      	bne.n	8009458 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093c2:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80093c6:	6121      	str	r1, [r4, #16]
 80093c8:	1c78      	adds	r0, r7, #1
 80093ca:	d004      	beq.n	80093d6 <HAL_I2C_Master_Transmit+0xc2>
 80093cc:	e0dd      	b.n	800958a <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093ce:	6963      	ldr	r3, [r4, #20]
 80093d0:	055a      	lsls	r2, r3, #21
 80093d2:	f100 80c2 	bmi.w	800955a <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093d6:	6963      	ldr	r3, [r4, #20]
 80093d8:	0799      	lsls	r1, r3, #30
 80093da:	d5f8      	bpl.n	80093ce <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093dc:	2200      	movs	r2, #0
 80093de:	9201      	str	r2, [sp, #4]
 80093e0:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 80093e2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093e4:	9201      	str	r2, [sp, #4]
 80093e6:	69a2      	ldr	r2, [r4, #24]
 80093e8:	9201      	str	r2, [sp, #4]
 80093ea:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d075      	beq.n	80094dc <HAL_I2C_Master_Transmit+0x1c8>
 80093f0:	1c79      	adds	r1, r7, #1
 80093f2:	f040 8081 	bne.w	80094f8 <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093f6:	6963      	ldr	r3, [r4, #20]
 80093f8:	061a      	lsls	r2, r3, #24
 80093fa:	d441      	bmi.n	8009480 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093fc:	6963      	ldr	r3, [r4, #20]
 80093fe:	055b      	lsls	r3, r3, #21
 8009400:	d5f9      	bpl.n	80093f6 <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009402:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8009404:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009406:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800940a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800940c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800940e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009412:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009416:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009418:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800941c:	f043 0304 	orr.w	r3, r3, #4
 8009420:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009422:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009424:	2b04      	cmp	r3, #4
 8009426:	f000 80e6 	beq.w	80095f6 <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800942a:	2001      	movs	r0, #1
}
 800942c:	b003      	add	sp, #12
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009432:	6963      	ldr	r3, [r4, #20]
 8009434:	07d9      	lsls	r1, r3, #31
 8009436:	d4c0      	bmi.n	80093ba <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009438:	f7fe fe52 	bl	80080e0 <HAL_GetTick>
 800943c:	1b80      	subs	r0, r0, r6
 800943e:	4287      	cmp	r7, r0
 8009440:	f0c0 80b3 	bcc.w	80095aa <HAL_I2C_Master_Transmit+0x296>
 8009444:	2f00      	cmp	r7, #0
 8009446:	f000 80b0 	beq.w	80095aa <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800944a:	682c      	ldr	r4, [r5, #0]
 800944c:	e7b0      	b.n	80093b0 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	e788      	b.n	800936a <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009458:	ea4f 13e8 	mov.w	r3, r8, asr #7
 800945c:	f003 0306 	and.w	r3, r3, #6
 8009460:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8009464:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8009466:	1c7b      	adds	r3, r7, #1
 8009468:	d003      	beq.n	8009472 <HAL_I2C_Master_Transmit+0x15e>
 800946a:	e0b5      	b.n	80095d8 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800946c:	6963      	ldr	r3, [r4, #20]
 800946e:	0559      	lsls	r1, r3, #21
 8009470:	d473      	bmi.n	800955a <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009472:	6963      	ldr	r3, [r4, #20]
 8009474:	0718      	lsls	r0, r3, #28
 8009476:	d5f9      	bpl.n	800946c <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009478:	fa5f f388 	uxtb.w	r3, r8
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	e7a3      	b.n	80093c8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009480:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8009482:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009486:	4601      	mov	r1, r0
 8009488:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800948c:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009490:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8009492:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8009494:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009496:	3b01      	subs	r3, #1
 8009498:	b29b      	uxth	r3, r3
 800949a:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800949c:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 800949e:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094a0:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 80094a2:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094a4:	d50c      	bpl.n	80094c0 <HAL_I2C_Master_Transmit+0x1ac>
 80094a6:	b15a      	cbz	r2, 80094c0 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094a8:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 80094aa:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094ae:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 80094b0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80094b2:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80094b4:	3b01      	subs	r3, #1
 80094b6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80094b8:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80094bc:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80094be:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80094c0:	1c78      	adds	r0, r7, #1
 80094c2:	d129      	bne.n	8009518 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094c4:	6963      	ldr	r3, [r4, #20]
 80094c6:	0759      	lsls	r1, r3, #29
 80094c8:	d405      	bmi.n	80094d6 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094ca:	6963      	ldr	r3, [r4, #20]
 80094cc:	055a      	lsls	r2, r3, #21
 80094ce:	d498      	bmi.n	8009402 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80094d0:	6963      	ldr	r3, [r4, #20]
 80094d2:	0759      	lsls	r1, r3, #29
 80094d4:	d5f9      	bpl.n	80094ca <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 80094d6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d189      	bne.n	80093f0 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094dc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80094de:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e0:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80094e2:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e8:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80094ea:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80094ee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 80094f6:	e71c      	b.n	8009332 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094f8:	6963      	ldr	r3, [r4, #20]
 80094fa:	0618      	lsls	r0, r3, #24
 80094fc:	d4c0      	bmi.n	8009480 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094fe:	6963      	ldr	r3, [r4, #20]
 8009500:	0558      	lsls	r0, r3, #21
 8009502:	f53f af7e 	bmi.w	8009402 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009506:	f7fe fdeb 	bl	80080e0 <HAL_GetTick>
 800950a:	1b80      	subs	r0, r0, r6
 800950c:	4287      	cmp	r7, r0
 800950e:	d379      	bcc.n	8009604 <HAL_I2C_Master_Transmit+0x2f0>
 8009510:	2f00      	cmp	r7, #0
 8009512:	d077      	beq.n	8009604 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009514:	682c      	ldr	r4, [r5, #0]
 8009516:	e76b      	b.n	80093f0 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009518:	6963      	ldr	r3, [r4, #20]
 800951a:	075b      	lsls	r3, r3, #29
 800951c:	d4db      	bmi.n	80094d6 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800951e:	6963      	ldr	r3, [r4, #20]
 8009520:	055b      	lsls	r3, r3, #21
 8009522:	f53f af6e 	bmi.w	8009402 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009526:	f7fe fddb 	bl	80080e0 <HAL_GetTick>
 800952a:	1b80      	subs	r0, r0, r6
 800952c:	4287      	cmp	r7, r0
 800952e:	d369      	bcc.n	8009604 <HAL_I2C_Master_Transmit+0x2f0>
 8009530:	2f00      	cmp	r7, #0
 8009532:	d067      	beq.n	8009604 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009534:	682c      	ldr	r4, [r5, #0]
 8009536:	e7c3      	b.n	80094c0 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8009538:	2320      	movs	r3, #32
      return HAL_BUSY;
 800953a:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 800953c:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009540:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009544:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009548:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800954a:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800954e:	f043 0320 	orr.w	r3, r3, #32
 8009552:	642b      	str	r3, [r5, #64]	; 0x40
}
 8009554:	b003      	add	sp, #12
 8009556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800955a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800955c:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8009560:	2120      	movs	r1, #32
      return HAL_ERROR;
 8009562:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800956a:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800956c:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800956e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009570:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009574:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009578:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800957a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800957e:	f043 0304 	orr.w	r3, r3, #4
 8009582:	642b      	str	r3, [r5, #64]	; 0x40
}
 8009584:	b003      	add	sp, #12
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800958a:	6963      	ldr	r3, [r4, #20]
 800958c:	079b      	lsls	r3, r3, #30
 800958e:	f53f af25 	bmi.w	80093dc <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009592:	6963      	ldr	r3, [r4, #20]
 8009594:	055b      	lsls	r3, r3, #21
 8009596:	d4e0      	bmi.n	800955a <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009598:	f7fe fda2 	bl	80080e0 <HAL_GetTick>
 800959c:	1b80      	subs	r0, r0, r6
 800959e:	4287      	cmp	r7, r0
 80095a0:	d33e      	bcc.n	8009620 <HAL_I2C_Master_Transmit+0x30c>
 80095a2:	2f00      	cmp	r7, #0
 80095a4:	d03c      	beq.n	8009620 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095a6:	682c      	ldr	r4, [r5, #0]
 80095a8:	e70e      	b.n	80093c8 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80095aa:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80095ac:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80095ae:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80095b0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80095b4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80095b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095ba:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80095bc:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80095c0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80095c4:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095c6:	680b      	ldr	r3, [r1, #0]
 80095c8:	05da      	lsls	r2, r3, #23
 80095ca:	f57f af2e 	bpl.w	800942a <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095ce:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80095d2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095d4:	642b      	str	r3, [r5, #64]	; 0x40
 80095d6:	e6ac      	b.n	8009332 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095d8:	6963      	ldr	r3, [r4, #20]
 80095da:	071a      	lsls	r2, r3, #28
 80095dc:	f53f af4c 	bmi.w	8009478 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095e0:	6963      	ldr	r3, [r4, #20]
 80095e2:	055a      	lsls	r2, r3, #21
 80095e4:	d4b9      	bmi.n	800955a <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095e6:	f7fe fd7b 	bl	80080e0 <HAL_GetTick>
 80095ea:	1b83      	subs	r3, r0, r6
 80095ec:	429f      	cmp	r7, r3
 80095ee:	d317      	bcc.n	8009620 <HAL_I2C_Master_Transmit+0x30c>
 80095f0:	b1b7      	cbz	r7, 8009620 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095f2:	682c      	ldr	r4, [r5, #0]
 80095f4:	e737      	b.n	8009466 <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f6:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 80095f8:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095fa:	6813      	ldr	r3, [r2, #0]
 80095fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	e696      	b.n	8009332 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009604:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8009606:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009608:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800960a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800960e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009612:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8009614:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009618:	f043 0320 	orr.w	r3, r3, #32
 800961c:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800961e:	e700      	b.n	8009422 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009620:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8009622:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009624:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009626:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800962a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800962e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8009630:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009632:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8009636:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800963a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800963c:	e679      	b.n	8009332 <HAL_I2C_Master_Transmit+0x1e>
 800963e:	bf00      	nop

08009640 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009640:	2800      	cmp	r0, #0
 8009642:	d05d      	beq.n	8009700 <HAL_PCD_Init+0xc0>
{
 8009644:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009646:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800964a:	4604      	mov	r4, r0
{
 800964c:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800964e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009652:	2b00      	cmp	r3, #0
 8009654:	d04f      	beq.n	80096f6 <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009656:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009658:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800965a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800965e:	f002 f831 	bl	800b6c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009662:	6860      	ldr	r0, [r4, #4]
 8009664:	b368      	cbz	r0, 80096c2 <HAL_PCD_Init+0x82>
 8009666:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009668:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800966c:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 800966e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009672:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009676:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800967a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800967e:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009680:	fa5f f28c 	uxtb.w	r2, ip
 8009684:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009686:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800968a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800968e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8009692:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009694:	d3eb      	bcc.n	800966e <HAL_PCD_Init+0x2e>
 8009696:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009698:	4611      	mov	r1, r2
 800969a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800969e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096a2:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 80096a6:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096aa:	fa5f f28c 	uxtb.w	r2, ip
 80096ae:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80096b0:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80096b4:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096b8:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096bc:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096c0:	d3eb      	bcc.n	800969a <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80096c2:	46a4      	mov	ip, r4
 80096c4:	46ee      	mov	lr, sp
 80096c6:	f85c 6b10 	ldr.w	r6, [ip], #16
 80096ca:	1d25      	adds	r5, r4, #4
 80096cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80096d4:	f8dc 3000 	ldr.w	r3, [ip]
 80096d8:	4630      	mov	r0, r6
 80096da:	f8ce 3000 	str.w	r3, [lr]
 80096de:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80096e2:	f001 fff9 	bl	800b6d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80096e6:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80096e8:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80096ea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80096ee:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80096f2:	b006      	add	sp, #24
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80096f6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80096fa:	f003 fd59 	bl	800d1b0 <HAL_PCD_MspInit>
 80096fe:	e7aa      	b.n	8009656 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8009700:	2001      	movs	r0, #1
}
 8009702:	4770      	bx	lr

08009704 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009704:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8009706:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800970a:	2b01      	cmp	r3, #1
 800970c:	d012      	beq.n	8009734 <HAL_PCD_Start+0x30>
 800970e:	4604      	mov	r4, r0
 8009710:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8009712:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009714:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8009718:	f001 ffca 	bl	800b6b0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800971c:	4629      	mov	r1, r5
 800971e:	4620      	mov	r0, r4
 8009720:	f003 fd3a 	bl	800d198 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8009724:	6820      	ldr	r0, [r4, #0]
 8009726:	f002 fdc7 	bl	800c2b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800972a:	2300      	movs	r3, #0
 800972c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8009730:	4618      	mov	r0, r3
}
 8009732:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8009734:	2002      	movs	r0, #2
}
 8009736:	bd38      	pop	{r3, r4, r5, pc}

08009738 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800973e:	6800      	ldr	r0, [r0, #0]
 8009740:	f002 fdbc 	bl	800c2bc <USB_ReadInterrupts>
 8009744:	0406      	lsls	r6, r0, #16
 8009746:	d443      	bmi.n	80097d0 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8009748:	6820      	ldr	r0, [r4, #0]
 800974a:	f002 fdb7 	bl	800c2bc <USB_ReadInterrupts>
 800974e:	0545      	lsls	r5, r0, #21
 8009750:	f100 8180 	bmi.w	8009a54 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	f002 fdb1 	bl	800c2bc <USB_ReadInterrupts>
 800975a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800975e:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009760:	d007      	beq.n	8009772 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009762:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	0c1b      	lsrs	r3, r3, #16
 800976e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8009772:	f002 fda3 	bl	800c2bc <USB_ReadInterrupts>
 8009776:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800977a:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800977c:	d007      	beq.n	800978e <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800977e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009786:	041b      	lsls	r3, r3, #16
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800978e:	f002 fd95 	bl	800c2bc <USB_ReadInterrupts>
 8009792:	04c0      	lsls	r0, r0, #19
 8009794:	f100 81f6 	bmi.w	8009b84 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	f002 fd8f 	bl	800c2bc <USB_ReadInterrupts>
 800979e:	0501      	lsls	r1, r0, #20
 80097a0:	f100 81d5 	bmi.w	8009b4e <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	f002 fd89 	bl	800c2bc <USB_ReadInterrupts>
 80097aa:	0582      	lsls	r2, r0, #22
 80097ac:	f100 81c2 	bmi.w	8009b34 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	f002 fd83 	bl	800c2bc <USB_ReadInterrupts>
 80097b6:	05c3      	lsls	r3, r0, #23
 80097b8:	d508      	bpl.n	80097cc <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80097c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097c4:	041b      	lsls	r3, r3, #16
 80097c6:	0c1b      	lsrs	r3, r3, #16
 80097c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80097cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80097d0:	6822      	ldr	r2, [r4, #0]
 80097d2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80097d6:	4610      	mov	r0, r2
 80097d8:	041d      	lsls	r5, r3, #16
 80097da:	d5b6      	bpl.n	800974a <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80097dc:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8009b2c <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80097e0:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8009b30 <HAL_PCD_IRQHandler+0x3f8>
 80097e4:	e011      	b.n	800980a <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80097e6:	f011 0110 	ands.w	r1, r1, #16
 80097ea:	f000 8151 	beq.w	8009a90 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80097ee:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80097f0:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80097f4:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80097f6:	f040 8176 	bne.w	8009ae6 <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80097fa:	0419      	lsls	r1, r3, #16
 80097fc:	f100 821b 	bmi.w	8009c36 <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009800:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009804:	041e      	lsls	r6, r3, #16
 8009806:	f140 811f 	bpl.w	8009a48 <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 800980a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800980e:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8009810:	f015 050f 	ands.w	r5, r5, #15
 8009814:	d0e7      	beq.n	80097e6 <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009816:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800981a:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800981c:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800981e:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009822:	f100 80a0 	bmi.w	8009966 <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009826:	f018 0f80 	tst.w	r8, #128	; 0x80
 800982a:	d0e9      	beq.n	8009800 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800982c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8009830:	1977      	adds	r7, r6, r5
 8009832:	b29b      	uxth	r3, r3
 8009834:	ea03 0309 	and.w	r3, r3, r9
 8009838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8009840:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8009844:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009848:	2b03      	cmp	r3, #3
 800984a:	f000 80d0 	beq.w	80099ee <HAL_PCD_IRQHandler+0x2b6>
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 80cd 	beq.w	80099ee <HAL_PCD_IRQHandler+0x2b6>
 8009854:	2b02      	cmp	r3, #2
 8009856:	d103      	bne.n	8009860 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8009858:	f418 7f80 	tst.w	r8, #256	; 0x100
 800985c:	f000 80c7 	beq.w	80099ee <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009860:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009864:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009868:	b29b      	uxth	r3, r3
 800986a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800986e:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009872:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009876:	f000 8255 	beq.w	8009d24 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 800987a:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800987e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8009882:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8009886:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800988a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 800988e:	459e      	cmp	lr, r3
 8009890:	f240 834b 	bls.w	8009f2a <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8009894:	ebae 0e03 	sub.w	lr, lr, r3
 8009898:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800989c:	f1be 0f00 	cmp.w	lr, #0
 80098a0:	f000 8346 	beq.w	8009f30 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80098a4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 80098a8:	d00f      	beq.n	80098ca <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80098aa:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 80098ae:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 80098b2:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 80098b6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80098ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80098be:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 80098c2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80098c6:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80098ca:	eb06 0e05 	add.w	lr, r6, r5
 80098ce:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 80098d2:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 80098d6:	f1bc 0f01 	cmp.w	ip, #1
 80098da:	f040 8316 	bne.w	8009f0a <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 80098de:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80098e2:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80098e6:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 80098ea:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80098ee:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80098f2:	441a      	add	r2, r3
 80098f4:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80098f8:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 80098fc:	4542      	cmp	r2, r8
 80098fe:	f0c0 83e4 	bcc.w	800a0ca <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 8009902:	eba2 0208 	sub.w	r2, r2, r8
 8009906:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800990a:	fa1f f388 	uxth.w	r3, r8
 800990e:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009912:	f1be 0f00 	cmp.w	lr, #0
 8009916:	f040 83cb 	bne.w	800a0b0 <HAL_PCD_IRQHandler+0x978>
 800991a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800991e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009922:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8009926:	b292      	uxth	r2, r2
 8009928:	eb0e 0102 	add.w	r1, lr, r2
 800992c:	f1b8 0f00 	cmp.w	r8, #0
 8009930:	f040 83f8 	bne.w	800a124 <HAL_PCD_IRQHandler+0x9ec>
 8009934:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8009938:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800993c:	0409      	lsls	r1, r1, #16
 800993e:	0c09      	lsrs	r1, r1, #16
 8009940:	f82e 1002 	strh.w	r1, [lr, r2]
 8009944:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8009948:	b289      	uxth	r1, r1
 800994a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800994e:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009952:	1972      	adds	r2, r6, r5
 8009954:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009958:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800995a:	4661      	mov	r1, ip
 800995c:	f002 fcb2 	bl	800c2c4 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	4602      	mov	r2, r0
 8009964:	e2d1      	b.n	8009f0a <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009966:	f640 738f 	movw	r3, #3983	; 0xf8f
 800996a:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800996e:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009970:	4013      	ands	r3, r2
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800997a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800997e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 811c 	bne.w	8009bc0 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009988:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800998c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009990:	b29b      	uxth	r3, r3
 8009992:	3306      	adds	r3, #6
 8009994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009998:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800999c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80099a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 80099a4:	461f      	mov	r7, r3
          if (count != 0U)
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f040 81ac 	bne.w	8009d04 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 80099ac:	1971      	adds	r1, r6, r5
 80099ae:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80099b2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80099b6:	00c9      	lsls	r1, r1, #3
 80099b8:	443a      	add	r2, r7
 80099ba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80099be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80099c2:	443a      	add	r2, r7
 80099c4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80099c8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80099cc:	b122      	cbz	r2, 80099d8 <HAL_PCD_IRQHandler+0x2a0>
 80099ce:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80099d2:	42bb      	cmp	r3, r7
 80099d4:	f240 819d 	bls.w	8009d12 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80099d8:	1973      	adds	r3, r6, r5
 80099da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80099de:	4620      	mov	r0, r4
 80099e0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80099e4:	f003 fc0c 	bl	800d200 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80099e8:	6820      	ldr	r0, [r4, #0]
 80099ea:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80099ec:	e71b      	b.n	8009826 <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80099ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80099f2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 80099fc:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80099fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009a02:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8009a06:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8009a0a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8009a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a10:	429a      	cmp	r2, r3
 8009a12:	f240 8108 	bls.w	8009c26 <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	f000 8105 	beq.w	8009c2a <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8009a20:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8009a22:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8009a24:	441a      	add	r2, r3
 8009a26:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8009a28:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8009a2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8009a2e:	4413      	add	r3, r2
 8009a30:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a32:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a36:	f002 f8b7 	bl	800bba8 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009a3a:	6820      	ldr	r0, [r4, #0]
 8009a3c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009a40:	4602      	mov	r2, r0
 8009a42:	041e      	lsls	r6, r3, #16
 8009a44:	f53f aee1 	bmi.w	800980a <HAL_PCD_IRQHandler+0xd2>
 8009a48:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8009a4a:	f002 fc37 	bl	800c2bc <USB_ReadInterrupts>
 8009a4e:	0545      	lsls	r5, r0, #21
 8009a50:	f57f ae80 	bpl.w	8009754 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009a54:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8009a56:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009a58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a60:	041b      	lsls	r3, r3, #16
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8009a68:	f003 fbe2 	bl	800d230 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8009a6c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	f43f ae6f 	beq.w	8009754 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8009a76:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8009a78:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009a7e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009a82:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a86:	f002 fc11 	bl	800c2ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a8a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009a8e:	e661      	b.n	8009754 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a90:	8803      	ldrh	r3, [r0, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea03 0309 	and.w	r3, r3, r9
 8009a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a9c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009a9e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009aa2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009ab0:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8009ab4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aba:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8009abc:	4413      	add	r3, r2
 8009abe:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f003 fba7 	bl	800d214 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009ac6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009aca:	b363      	cbz	r3, 8009b26 <HAL_PCD_IRQHandler+0x3ee>
 8009acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ace:	bb53      	cbnz	r3, 8009b26 <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009ad0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8009ad4:	6820      	ldr	r0, [r4, #0]
 8009ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ada:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8009ade:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8009ae0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8009ae4:	e68c      	b.n	8009800 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009ae6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009aea:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009af8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009afc:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b04:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009b08:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8009b0c:	f002 fbea 	bl	800c2e4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009b14:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009b16:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b18:	8811      	ldrh	r1, [r2, #0]
 8009b1a:	400b      	ands	r3, r1
 8009b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b20:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009b22:	f003 fb65 	bl	800d1f0 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	4602      	mov	r2, r0
 8009b2a:	e669      	b.n	8009800 <HAL_PCD_IRQHandler+0xc8>
 8009b2c:	ffff8f0f 	.word	0xffff8f0f
 8009b30:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009b34:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8009b36:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009b38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	0c1b      	lsrs	r3, r3, #16
 8009b44:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009b48:	f003 fb6e 	bl	800d228 <HAL_PCD_SOFCallback>
 8009b4c:	e630      	b.n	80097b0 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009b4e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8009b50:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009b52:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f043 0308 	orr.w	r3, r3, #8
 8009b5c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009b60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009b70:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f043 0304 	orr.w	r3, r3, #4
 8009b7a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8009b7e:	f003 fb69 	bl	800d254 <HAL_PCD_SuspendCallback>
 8009b82:	e60f      	b.n	80097a4 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009b84:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8009b86:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009b88:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009b8c:	f023 0304 	bic.w	r3, r3, #4
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	0c1b      	lsrs	r3, r3, #16
 8009b94:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009b98:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009b9c:	f023 0308 	bic.w	r3, r3, #8
 8009ba0:	041b      	lsls	r3, r3, #16
 8009ba2:	0c1b      	lsrs	r3, r3, #16
 8009ba4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009ba8:	f003 fb64 	bl	800d274 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bb6:	041b      	lsls	r3, r3, #16
 8009bb8:	0c1b      	lsrs	r3, r3, #16
 8009bba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8009bbe:	e5ec      	b.n	800979a <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8009bc0:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	f000 8120 	beq.w	8009e0a <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009bca:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009bce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009be6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009bea:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009bee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009bf2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bf6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009bfa:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009bfc:	d06e      	beq.n	8009cdc <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bfe:	3302      	adds	r3, #2
 8009c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c08:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009c0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009c10:	461f      	mov	r7, r3
              if (count != 0U)
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f43f aeca 	beq.w	80099ac <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009c18:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009c1c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c20:	f002 fb60 	bl	800c2e4 <USB_ReadPMA>
 8009c24:	e6c2      	b.n	80099ac <HAL_PCD_IRQHandler+0x274>
 8009c26:	2300      	movs	r3, #0
 8009c28:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f003 faf2 	bl	800d214 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	4602      	mov	r2, r0
 8009c34:	e5e4      	b.n	8009800 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009c36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009c3a:	8802      	ldrh	r2, [r0, #0]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c42:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009c48:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c5e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009c62:	b193      	cbz	r3, 8009c8a <HAL_PCD_IRQHandler+0x552>
 8009c64:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8009c68:	b179      	cbz	r1, 8009c8a <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009c6a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009c6e:	f002 fb39 	bl	800c2e4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8009c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c76:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009c7a:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8009c7c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009c7e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8009c80:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009c84:	f003 fabc 	bl	800d200 <HAL_PCD_DataOutStageCallback>
 8009c88:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009c8a:	8803      	ldrh	r3, [r0, #0]
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	051b      	lsls	r3, r3, #20
 8009c90:	f53f adb6 	bmi.w	8009800 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009c94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009c98:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	f040 80a6 	bne.w	8009df4 <HAL_PCD_IRQHandler+0x6bc>
 8009ca8:	5ae9      	ldrh	r1, [r5, r3]
 8009caa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009cae:	0409      	lsls	r1, r1, #16
 8009cb0:	0c09      	lsrs	r1, r1, #16
 8009cb2:	52e9      	strh	r1, [r5, r3]
 8009cb4:	5ae9      	ldrh	r1, [r5, r3]
 8009cb6:	b289      	uxth	r1, r1
 8009cb8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009cbc:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009cbe:	8803      	ldrh	r3, [r0, #0]
 8009cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cc8:	041b      	lsls	r3, r3, #16
 8009cca:	0c1b      	lsrs	r3, r3, #16
 8009ccc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd8:	8003      	strh	r3, [r0, #0]
 8009cda:	e591      	b.n	8009800 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009cdc:	3306      	adds	r3, #6
 8009cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009ce6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009cee:	461f      	mov	r7, r3
              if (count != 0U)
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f43f ae5b 	beq.w	80099ac <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009cf6:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009cfa:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009cfe:	f002 faf1 	bl	800c2e4 <USB_ReadPMA>
 8009d02:	e653      	b.n	80099ac <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009d04:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009d08:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009d0c:	f002 faea 	bl	800c2e4 <USB_ReadPMA>
 8009d10:	e64c      	b.n	80099ac <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8009d12:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009d16:	6820      	ldr	r0, [r4, #0]
 8009d18:	4421      	add	r1, r4
 8009d1a:	f001 ff45 	bl	800bba8 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009d1e:	6820      	ldr	r0, [r4, #0]
 8009d20:	4602      	mov	r2, r0
 8009d22:	e580      	b.n	8009826 <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009d24:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8009d28:	1973      	adds	r3, r6, r5
 8009d2a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009d2e:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009d32:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8009d36:	45f3      	cmp	fp, lr
 8009d38:	f0c0 80a5 	bcc.w	8009e86 <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8009d3c:	ebab 0c0e 	sub.w	ip, fp, lr
 8009d40:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8009d44:	f1bc 0f00 	cmp.w	ip, #0
 8009d48:	f000 809f 	beq.w	8009e8a <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d4c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009d50:	d10d      	bne.n	8009d6e <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009d52:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5e:	041b      	lsls	r3, r3, #16
 8009d60:	0c1b      	lsrs	r3, r3, #16
 8009d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8009d6e:	1973      	adds	r3, r6, r5
 8009d70:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009d74:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8009d78:	f1bc 0f01 	cmp.w	ip, #1
 8009d7c:	f040 80c5 	bne.w	8009f0a <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8009d80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8009d82:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8009d86:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8009d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8009d8c:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8009d90:	4472      	add	r2, lr
 8009d92:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8009d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d96:	4542      	cmp	r2, r8
 8009d98:	f0c0 81ab 	bcc.w	800a0f2 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8009d9c:	eba2 0208 	sub.w	r2, r2, r8
 8009da0:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009da2:	fa1f fe88 	uxth.w	lr, r8
 8009da6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 8194 	bne.w	800a0d8 <HAL_PCD_IRQHandler+0x9a0>
 8009db0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009db4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009db8:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009dbc:	b292      	uxth	r2, r2
 8009dbe:	188b      	adds	r3, r1, r2
 8009dc0:	f1b8 0f00 	cmp.w	r8, #0
 8009dc4:	f040 81d0 	bne.w	800a168 <HAL_PCD_IRQHandler+0xa30>
 8009dc8:	5a8b      	ldrh	r3, [r1, r2]
 8009dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	0c1b      	lsrs	r3, r3, #16
 8009dd2:	528b      	strh	r3, [r1, r2]
 8009dd4:	5a8b      	ldrh	r3, [r1, r2]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ddc:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009dde:	1972      	adds	r2, r6, r5
 8009de0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009de4:	4673      	mov	r3, lr
 8009de6:	4661      	mov	r1, ip
 8009de8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009dea:	f002 fa6b 	bl	800c2c4 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009dee:	6820      	ldr	r0, [r4, #0]
 8009df0:	4602      	mov	r2, r0
 8009df2:	e08a      	b.n	8009f0a <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009df4:	293e      	cmp	r1, #62	; 0x3e
 8009df6:	f200 80cb 	bhi.w	8009f90 <HAL_PCD_IRQHandler+0x858>
 8009dfa:	084e      	lsrs	r6, r1, #1
 8009dfc:	07cf      	lsls	r7, r1, #31
 8009dfe:	bf48      	it	mi
 8009e00:	3601      	addmi	r6, #1
 8009e02:	02b1      	lsls	r1, r6, #10
 8009e04:	b289      	uxth	r1, r1
 8009e06:	52e9      	strh	r1, [r5, r3]
 8009e08:	e759      	b.n	8009cbe <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e0e:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e12:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e14:	f000 80c7 	beq.w	8009fa6 <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e18:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009e1c:	3302      	adds	r3, #2
 8009e1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009e26:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009e2a:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009e32:	459c      	cmp	ip, r3
 8009e34:	461f      	mov	r7, r3
 8009e36:	f0c0 8112 	bcc.w	800a05e <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8009e3a:	ebac 0c03 	sub.w	ip, ip, r3
 8009e3e:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009e42:	f1bc 0f00 	cmp.w	ip, #0
 8009e46:	f000 810e 	beq.w	800a066 <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009e4a:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009e4e:	d00d      	beq.n	8009e6c <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009e50:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009e54:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009e58:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009e5c:	0409      	lsls	r1, r1, #16
 8009e5e:	0c09      	lsrs	r1, r1, #16
 8009e60:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009e64:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009e68:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 80c3 	beq.w	8009ff8 <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009e72:	1971      	adds	r1, r6, r5
 8009e74:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009e78:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009e7c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009e80:	f002 fa30 	bl	800c2e4 <USB_ReadPMA>
 8009e84:	e592      	b.n	80099ac <HAL_PCD_IRQHandler+0x274>
 8009e86:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f040 80be 	bne.w	800a010 <HAL_PCD_IRQHandler+0x8d8>
 8009e94:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009e98:	010b      	lsls	r3, r1, #4
 8009e9a:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009e9e:	4406      	add	r6, r0
 8009ea0:	b2ad      	uxth	r5, r5
 8009ea2:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ea4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ea8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009eac:	0412      	lsls	r2, r2, #16
 8009eae:	0c12      	lsrs	r2, r2, #16
 8009eb0:	5372      	strh	r2, [r6, r5]
 8009eb2:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009eb4:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009eb6:	b292      	uxth	r2, r2
 8009eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ebc:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ebe:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009ec2:	b280      	uxth	r0, r0
 8009ec4:	5a1a      	ldrh	r2, [r3, r0]
 8009ec6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009eca:	0412      	lsls	r2, r2, #16
 8009ecc:	0c12      	lsrs	r2, r2, #16
 8009ece:	521a      	strh	r2, [r3, r0]
 8009ed0:	5a1a      	ldrh	r2, [r3, r0]
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ed8:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009eda:	4620      	mov	r0, r4
 8009edc:	f003 f99a 	bl	800d214 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009ee0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009ee4:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009ee6:	d183      	bne.n	8009df0 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009ee8:	4602      	mov	r2, r0
 8009eea:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009eee:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	041b      	lsls	r3, r3, #16
 8009efc:	0c1b      	lsrs	r3, r3, #16
 8009efe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f06:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009f0a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009f0e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	ea03 030a 	and.w	r3, r3, sl
 8009f18:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f24:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8009f28:	e46a      	b.n	8009800 <HAL_PCD_IRQHandler+0xc8>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f30:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d17f      	bne.n	800a038 <HAL_PCD_IRQHandler+0x900>
 8009f38:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009f3c:	010b      	lsls	r3, r1, #4
 8009f3e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009f42:	4406      	add	r6, r0
 8009f44:	b2ad      	uxth	r5, r5
 8009f46:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f4c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009f50:	0412      	lsls	r2, r2, #16
 8009f52:	0c12      	lsrs	r2, r2, #16
 8009f54:	5372      	strh	r2, [r6, r5]
 8009f56:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f58:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f5a:	b292      	uxth	r2, r2
 8009f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f60:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f62:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009f66:	b280      	uxth	r0, r0
 8009f68:	5a1a      	ldrh	r2, [r3, r0]
 8009f6a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009f6e:	0412      	lsls	r2, r2, #16
 8009f70:	0c12      	lsrs	r2, r2, #16
 8009f72:	521a      	strh	r2, [r3, r0]
 8009f74:	5a1a      	ldrh	r2, [r3, r0]
 8009f76:	b292      	uxth	r2, r2
 8009f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f7c:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f003 f948 	bl	800d214 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009f84:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009f88:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009f8a:	d1ad      	bne.n	8009ee8 <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	e7bc      	b.n	8009f0a <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009f90:	094e      	lsrs	r6, r1, #5
 8009f92:	06c9      	lsls	r1, r1, #27
 8009f94:	4989      	ldr	r1, [pc, #548]	; (800a1bc <HAL_PCD_IRQHandler+0xa84>)
 8009f96:	bf08      	it	eq
 8009f98:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009f9c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009fa0:	b289      	uxth	r1, r1
 8009fa2:	52e9      	strh	r1, [r5, r3]
 8009fa4:	e68b      	b.n	8009cbe <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009fa6:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009faa:	3306      	adds	r3, #6
 8009fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009fb4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009fb8:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009fc0:	459e      	cmp	lr, r3
 8009fc2:	461f      	mov	r7, r3
 8009fc4:	d360      	bcc.n	800a088 <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8009fc6:	ebae 0e03 	sub.w	lr, lr, r3
 8009fca:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009fce:	f1be 0f00 	cmp.w	lr, #0
 8009fd2:	d05b      	beq.n	800a08c <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009fd4:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009fd8:	d10d      	bne.n	8009ff6 <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009fda:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009fde:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009fe2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009fe6:	0409      	lsls	r1, r1, #16
 8009fe8:	0c09      	lsrs	r1, r1, #16
 8009fea:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009fee:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009ff2:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009ff6:	b90b      	cbnz	r3, 8009ffc <HAL_PCD_IRQHandler+0x8c4>
 8009ff8:	461f      	mov	r7, r3
 8009ffa:	e4d7      	b.n	80099ac <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ffc:	1971      	adds	r1, r6, r5
 8009ffe:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a002:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800a006:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800a00a:	f002 f96b 	bl	800c2e4 <USB_ReadPMA>
 800a00e:	e4cd      	b.n	80099ac <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a010:	2b01      	cmp	r3, #1
 800a012:	f47f af62 	bne.w	8009eda <HAL_PCD_IRQHandler+0x7a2>
 800a016:	2500      	movs	r5, #0
 800a018:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a01c:	010b      	lsls	r3, r1, #4
 800a01e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800a022:	b292      	uxth	r2, r2
 800a024:	4406      	add	r6, r0
 800a026:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a028:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a02c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a030:	4403      	add	r3, r0
 800a032:	b292      	uxth	r2, r2
 800a034:	529d      	strh	r5, [r3, r2]
 800a036:	e750      	b.n	8009eda <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d1a0      	bne.n	8009f7e <HAL_PCD_IRQHandler+0x846>
 800a03c:	2500      	movs	r5, #0
 800a03e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a042:	010b      	lsls	r3, r1, #4
 800a044:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800a048:	b292      	uxth	r2, r2
 800a04a:	4406      	add	r6, r0
 800a04c:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a04e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a052:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a056:	4403      	add	r3, r0
 800a058:	b292      	uxth	r2, r2
 800a05a:	529d      	strh	r5, [r3, r2]
 800a05c:	e78f      	b.n	8009f7e <HAL_PCD_IRQHandler+0x846>
 800a05e:	f04f 0c00 	mov.w	ip, #0
 800a062:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a066:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800a06a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a06e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a072:	0409      	lsls	r1, r1, #16
 800a074:	0c09      	lsrs	r1, r1, #16
 800a076:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800a07a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a07e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a082:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 800a086:	e6e0      	b.n	8009e4a <HAL_PCD_IRQHandler+0x712>
 800a088:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a08c:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 800a090:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800a094:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800a098:	0409      	lsls	r1, r1, #16
 800a09a:	0c09      	lsrs	r1, r1, #16
 800a09c:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800a0a0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a0a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a0a8:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 800a0ac:	e792      	b.n	8009fd4 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0ae:	b293      	uxth	r3, r2
 800a0b0:	f1be 0f01 	cmp.w	lr, #1
 800a0b4:	f47f ac4d 	bne.w	8009952 <HAL_PCD_IRQHandler+0x21a>
 800a0b8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800a0bc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a0c0:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800a0c4:	b292      	uxth	r2, r2
 800a0c6:	528b      	strh	r3, [r1, r2]
 800a0c8:	e443      	b.n	8009952 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 800a0ca:	b9ba      	cbnz	r2, 800a0fc <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 800a0cc:	4698      	mov	r8, r3
 800a0ce:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 800a0d2:	e41c      	b.n	800990e <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a0d4:	fa1f fe82 	uxth.w	lr, r2
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	f47f ae80 	bne.w	8009dde <HAL_PCD_IRQHandler+0x6a6>
 800a0de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a0e2:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800a0e6:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	f822 e003 	strh.w	lr, [r2, r3]
 800a0f0:	e675      	b.n	8009dde <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 800a0f2:	bb22      	cbnz	r2, 800a13e <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 800a0f4:	46f0      	mov	r8, lr
 800a0f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800a0fa:	e654      	b.n	8009da6 <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800a102:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a106:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 800a10a:	f1be 0f00 	cmp.w	lr, #0
 800a10e:	d1ce      	bne.n	800a0ae <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a110:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a112:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a116:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800a120:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a122:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a124:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a128:	d82b      	bhi.n	800a182 <HAL_PCD_IRQHandler+0xa4a>
 800a12a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a12e:	f018 0f01 	tst.w	r8, #1
 800a132:	bf18      	it	ne
 800a134:	3201      	addne	r2, #1
 800a136:	0292      	lsls	r2, r2, #10
 800a138:	b292      	uxth	r2, r2
 800a13a:	800a      	strh	r2, [r1, #0]
 800a13c:	e409      	b.n	8009952 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 800a13e:	f04f 0e00 	mov.w	lr, #0
 800a142:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800a146:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a14a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1c0      	bne.n	800a0d4 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a152:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a154:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a158:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a15c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 800a160:	b29b      	uxth	r3, r3
 800a162:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a164:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a168:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a16c:	d818      	bhi.n	800a1a0 <HAL_PCD_IRQHandler+0xa68>
 800a16e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a172:	f018 0f01 	tst.w	r8, #1
 800a176:	bf18      	it	ne
 800a178:	3201      	addne	r2, #1
 800a17a:	0292      	lsls	r2, r2, #10
 800a17c:	b292      	uxth	r2, r2
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	e62d      	b.n	8009dde <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a182:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a186:	f8df e034 	ldr.w	lr, [pc, #52]	; 800a1bc <HAL_PCD_IRQHandler+0xa84>
 800a18a:	f018 0f1f 	tst.w	r8, #31
 800a18e:	bf08      	it	eq
 800a190:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a194:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800a198:	b292      	uxth	r2, r2
 800a19a:	800a      	strh	r2, [r1, #0]
 800a19c:	f7ff bbd9 	b.w	8009952 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a1a0:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a1a4:	4905      	ldr	r1, [pc, #20]	; (800a1bc <HAL_PCD_IRQHandler+0xa84>)
 800a1a6:	f018 0f1f 	tst.w	r8, #31
 800a1aa:	bf08      	it	eq
 800a1ac:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a1b0:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 800a1b4:	b292      	uxth	r2, r2
 800a1b6:	801a      	strh	r2, [r3, #0]
 800a1b8:	e611      	b.n	8009dde <HAL_PCD_IRQHandler+0x6a6>
 800a1ba:	bf00      	nop
 800a1bc:	ffff8000 	.word	0xffff8000

0800a1c0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800a1c0:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800a1c4:	2a01      	cmp	r2, #1
 800a1c6:	d00e      	beq.n	800a1e6 <HAL_PCD_SetAddress+0x26>
{
 800a1c8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a1ce:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800a1d0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800a1d4:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a1d8:	f002 f868 	bl	800c2ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a1e2:	4618      	mov	r0, r3
}
 800a1e4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800a1e6:	2002      	movs	r0, #2
}
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop

0800a1ec <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a1ec:	f001 0c07 	and.w	ip, r1, #7
 800a1f0:	0609      	lsls	r1, r1, #24
{
 800a1f2:	b510      	push	{r4, lr}
 800a1f4:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a1f6:	d425      	bmi.n	800a244 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 800a1f8:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a1fc:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800a200:	00c0      	lsls	r0, r0, #3
 800a202:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800a206:	4420      	add	r0, r4
 800a208:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a20c:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 800a20e:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800a210:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a212:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 800a216:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800a218:	b10a      	cbz	r2, 800a21e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800a21a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800a21e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800a220:	bf04      	itt	eq
 800a222:	2300      	moveq	r3, #0
 800a224:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800a226:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d019      	beq.n	800a262 <HAL_PCD_EP_Open+0x76>
 800a22e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a230:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a232:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a236:	f001 fa63 	bl	800b700 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a23a:	2300      	movs	r3, #0
 800a23c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 800a240:	4618      	mov	r0, r3
}
 800a242:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a244:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800a248:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a24c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a250:	2001      	movs	r0, #1
 800a252:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a254:	eb0c 0100 	add.w	r1, ip, r0
 800a258:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a25c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800a260:	e7d5      	b.n	800a20e <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800a262:	2002      	movs	r0, #2
}
 800a264:	bd10      	pop	{r4, pc}
 800a266:	bf00      	nop

0800a268 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a268:	060b      	lsls	r3, r1, #24
{
 800a26a:	b510      	push	{r4, lr}
 800a26c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a26e:	d41b      	bmi.n	800a2a8 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a270:	f001 0307 	and.w	r3, r1, #7
 800a274:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a278:	00d2      	lsls	r2, r2, #3
 800a27a:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a27e:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a280:	4402      	add	r2, r0
 800a282:	2000      	movs	r0, #0
 800a284:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a288:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a28a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d019      	beq.n	800a2c6 <HAL_PCD_EP_Close+0x5e>
 800a292:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a294:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a296:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a29a:	f001 fba5 	bl	800b9e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a2a4:	4618      	mov	r0, r3
}
 800a2a6:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a2a8:	2001      	movs	r0, #1
 800a2aa:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2ae:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a2b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a2b4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2b8:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800a2ba:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a2bc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a2be:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d1e5      	bne.n	800a292 <HAL_PCD_EP_Close+0x2a>
 800a2c6:	2002      	movs	r0, #2
}
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	bf00      	nop

0800a2cc <HAL_PCD_EP_Receive>:
{
 800a2cc:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 800a2ce:	2400      	movs	r4, #0
 800a2d0:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800a2d4:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800a2d8:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 800a2dc:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2e0:	6800      	ldr	r0, [r0, #0]
 800a2e2:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800a2e6:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800a2ea:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2ee:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2f2:	f001 fc59 	bl	800bba8 <USB_EPStartXfer>
}
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop

0800a2fc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a2fc:	f001 0107 	and.w	r1, r1, #7
 800a300:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a304:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800a308:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop

0800a310 <HAL_PCD_EP_Transmit>:
{
 800a310:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 800a312:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800a314:	2500      	movs	r5, #0
{
 800a316:	4604      	mov	r4, r0
 800a318:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800a31c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a320:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 800a324:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a328:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 800a32c:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 800a330:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 800a334:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800a338:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 800a33c:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 800a340:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 800a344:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a348:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a34c:	6800      	ldr	r0, [r0, #0]
 800a34e:	f001 fc2b 	bl	800bba8 <USB_EPStartXfer>
}
 800a352:	4628      	mov	r0, r5
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	bf00      	nop

0800a358 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a358:	6843      	ldr	r3, [r0, #4]
{
 800a35a:	b510      	push	{r4, lr}
 800a35c:	4604      	mov	r4, r0
 800a35e:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a362:	4298      	cmp	r0, r3
 800a364:	d82d      	bhi.n	800a3c2 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800a366:	060b      	lsls	r3, r1, #24
 800a368:	d41a      	bmi.n	800a3a0 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 800a36a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a36e:	00c9      	lsls	r1, r1, #3
 800a370:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 800a374:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800a376:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800a37e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a380:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a382:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a384:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a388:	429a      	cmp	r2, r3
 800a38a:	d018      	beq.n	800a3be <HAL_PCD_EP_SetStall+0x66>
 800a38c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a390:	6820      	ldr	r0, [r4, #0]
 800a392:	f001 ff13 	bl	800c1bc <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a396:	2300      	movs	r3, #0
 800a398:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a39c:	4618      	mov	r0, r3
}
 800a39e:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a3a0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3a2:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 800a3a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a3a8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a3ac:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ae:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 800a3b0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3b2:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a3b4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a3b6:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d1e6      	bne.n	800a38c <HAL_PCD_EP_SetStall+0x34>
 800a3be:	2002      	movs	r0, #2
}
 800a3c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a3c2:	2001      	movs	r0, #1
}
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	bf00      	nop

0800a3c8 <HAL_PCD_EP_ClrStall>:
{
 800a3c8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3ca:	6843      	ldr	r3, [r0, #4]
 800a3cc:	f001 020f 	and.w	r2, r1, #15
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d832      	bhi.n	800a43a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800a3d4:	060b      	lsls	r3, r1, #24
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	d41c      	bmi.n	800a414 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3da:	f001 0307 	and.w	r3, r1, #7
 800a3de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a3e2:	00d2      	lsls	r2, r2, #3
 800a3e4:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a3e8:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a3ea:	4402      	add	r2, r0
  ep->is_stall = 0U;
 800a3ec:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3f4:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a3f6:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a3f8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d01a      	beq.n	800a436 <HAL_PCD_EP_ClrStall+0x6e>
 800a400:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a402:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a404:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a408:	f001 ff00 	bl	800c20c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a40c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a410:	4628      	mov	r0, r5
}
 800a412:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800a414:	2001      	movs	r0, #1
 800a416:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a41a:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a41c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a420:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a424:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800a426:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800a428:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a42a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a42c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a42e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a432:	2b01      	cmp	r3, #1
 800a434:	d1e4      	bne.n	800a400 <HAL_PCD_EP_ClrStall+0x38>
 800a436:	2002      	movs	r0, #2
}
 800a438:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a43a:	2001      	movs	r0, #1
}
 800a43c:	bd38      	pop	{r3, r4, r5, pc}
 800a43e:	bf00      	nop

0800a440 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a440:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a444:	d00b      	beq.n	800a45e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a446:	f001 0107 	and.w	r1, r1, #7
 800a44a:	3101      	adds	r1, #1
 800a44c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a450:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a454:	b95a      	cbnz	r2, 800a46e <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800a456:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800a458:	80cb      	strh	r3, [r1, #6]
 800a45a:	730a      	strb	r2, [r1, #12]
}
 800a45c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800a45e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a462:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a466:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	d0f3      	beq.n	800a456 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 800a46e:	2201      	movs	r2, #1
}
 800a470:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a472:	608b      	str	r3, [r1, #8]
 800a474:	730a      	strb	r2, [r1, #12]
}
 800a476:	4770      	bx	lr

0800a478 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a478:	4b1d      	ldr	r3, [pc, #116]	; (800a4f0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 800a47a:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a47c:	689a      	ldr	r2, [r3, #8]
 800a47e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800a482:	d116      	bne.n	800a4b2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a486:	00d2      	lsls	r2, r2, #3
 800a488:	d420      	bmi.n	800a4cc <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a48a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a48c:	4919      	ldr	r1, [pc, #100]	; (800a4f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800a48e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a492:	625a      	str	r2, [r3, #36]	; 0x24
 800a494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a496:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a49a:	9201      	str	r2, [sp, #4]
 800a49c:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a49e:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a4a2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4a6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a4aa:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4ae:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a4b0:	d013      	beq.n	800a4da <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a4b2:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a4b4:	4a10      	ldr	r2, [pc, #64]	; (800a4f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a4b6:	6813      	ldr	r3, [r2, #0]
 800a4b8:	f023 0301 	bic.w	r3, r3, #1
 800a4bc:	4303      	orrs	r3, r0
 800a4be:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a4c0:	6813      	ldr	r3, [r2, #0]
 800a4c2:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a4c6:	4058      	eors	r0, r3
 800a4c8:	b002      	add	sp, #8
 800a4ca:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a4cc:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a4d4:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a4d8:	d1eb      	bne.n	800a4b2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a4da:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800a4de:	d1e8      	bne.n	800a4b2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 800a4e0:	4a05      	ldr	r2, [pc, #20]	; (800a4f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800a4e2:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 800a4e4:	6813      	ldr	r3, [r2, #0]
 800a4e6:	f043 0304 	orr.w	r3, r3, #4
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	e7e2      	b.n	800a4b4 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800a4ee:	bf00      	nop
 800a4f0:	40023800 	.word	0x40023800
 800a4f4:	40007000 	.word	0x40007000
 800a4f8:	40023c00 	.word	0x40023c00

0800a4fc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f000 81f8 	beq.w	800a8f2 <HAL_RCC_OscConfig+0x3f6>
{
 800a502:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a506:	4aa2      	ldr	r2, [pc, #648]	; (800a790 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a508:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a50a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a50c:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a50e:	07d9      	lsls	r1, r3, #31
 800a510:	4604      	mov	r4, r0
{
 800a512:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a514:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a518:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a51c:	d52e      	bpl.n	800a57c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a51e:	2d08      	cmp	r5, #8
 800a520:	f000 8128 	beq.w	800a774 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a524:	2d0c      	cmp	r5, #12
 800a526:	f000 8122 	beq.w	800a76e <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a52a:	6863      	ldr	r3, [r4, #4]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d00f      	beq.n	800a550 <HAL_RCC_OscConfig+0x54>
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8180 	beq.w	800a836 <HAL_RCC_OscConfig+0x33a>
 800a536:	2b05      	cmp	r3, #5
 800a538:	4b95      	ldr	r3, [pc, #596]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	f000 81db 	beq.w	800a8f6 <HAL_RCC_OscConfig+0x3fa>
 800a540:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e004      	b.n	800a55a <HAL_RCC_OscConfig+0x5e>
 800a550:	4a8f      	ldr	r2, [pc, #572]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a558:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a55a:	f7fd fdc1 	bl	80080e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a55e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800a790 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 800a562:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a564:	e005      	b.n	800a572 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a566:	f7fd fdbb 	bl	80080e0 <HAL_GetTick>
 800a56a:	1bc0      	subs	r0, r0, r7
 800a56c:	2864      	cmp	r0, #100	; 0x64
 800a56e:	f200 815e 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a572:	f8d8 3000 	ldr.w	r3, [r8]
 800a576:	039b      	lsls	r3, r3, #14
 800a578:	d5f5      	bpl.n	800a566 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	0799      	lsls	r1, r3, #30
 800a57e:	d522      	bpl.n	800a5c6 <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a580:	2d04      	cmp	r5, #4
 800a582:	f000 8114 	beq.w	800a7ae <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a586:	2d0c      	cmp	r5, #12
 800a588:	f000 810e 	beq.w	800a7a8 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a58c:	68e3      	ldr	r3, [r4, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 8179 	beq.w	800a886 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 800a594:	2201      	movs	r2, #1
 800a596:	4b7f      	ldr	r3, [pc, #508]	; (800a794 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a598:	4f7d      	ldr	r7, [pc, #500]	; (800a790 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 800a59a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a59c:	f7fd fda0 	bl	80080e0 <HAL_GetTick>
 800a5a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5a2:	e005      	b.n	800a5b0 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5a4:	f7fd fd9c 	bl	80080e0 <HAL_GetTick>
 800a5a8:	1b80      	subs	r0, r0, r6
 800a5aa:	2802      	cmp	r0, #2
 800a5ac:	f200 813f 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	079b      	lsls	r3, r3, #30
 800a5b4:	d5f6      	bpl.n	800a5a4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6922      	ldr	r2, [r4, #16]
 800a5ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a5be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5c2:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	06d9      	lsls	r1, r3, #27
 800a5c8:	d525      	bpl.n	800a616 <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	f000 8098 	beq.w	800a700 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a5d0:	69a3      	ldr	r3, [r4, #24]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 816a 	beq.w	800a8ac <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 800a5d8:	2201      	movs	r2, #1
 800a5da:	4b6e      	ldr	r3, [pc, #440]	; (800a794 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a5dc:	4e6c      	ldr	r6, [pc, #432]	; (800a790 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 800a5de:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800a5e0:	f7fd fd7e 	bl	80080e0 <HAL_GetTick>
 800a5e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a5e6:	e005      	b.n	800a5f4 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5e8:	f7fd fd7a 	bl	80080e0 <HAL_GetTick>
 800a5ec:	1bc0      	subs	r0, r0, r7
 800a5ee:	2802      	cmp	r0, #2
 800a5f0:	f200 811d 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a5f4:	6833      	ldr	r3, [r6, #0]
 800a5f6:	059b      	lsls	r3, r3, #22
 800a5f8:	d5f6      	bpl.n	800a5e8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5fa:	6873      	ldr	r3, [r6, #4]
 800a5fc:	6a22      	ldr	r2, [r4, #32]
 800a5fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a602:	4313      	orrs	r3, r2
 800a604:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a606:	6873      	ldr	r3, [r6, #4]
 800a608:	69e2      	ldr	r2, [r4, #28]
 800a60a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a60e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a612:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	0719      	lsls	r1, r3, #28
 800a618:	d516      	bpl.n	800a648 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a61a:	6963      	ldr	r3, [r4, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8121 	beq.w	800a864 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800a622:	2201      	movs	r2, #1
 800a624:	4b5b      	ldr	r3, [pc, #364]	; (800a794 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a626:	4f5a      	ldr	r7, [pc, #360]	; (800a790 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 800a628:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a62c:	f7fd fd58 	bl	80080e0 <HAL_GetTick>
 800a630:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a632:	e005      	b.n	800a640 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a634:	f7fd fd54 	bl	80080e0 <HAL_GetTick>
 800a638:	1b80      	subs	r0, r0, r6
 800a63a:	2802      	cmp	r0, #2
 800a63c:	f200 80f7 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a642:	079a      	lsls	r2, r3, #30
 800a644:	d5f6      	bpl.n	800a634 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	075e      	lsls	r6, r3, #29
 800a64a:	d53b      	bpl.n	800a6c4 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a64c:	4b50      	ldr	r3, [pc, #320]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a64e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a650:	00d0      	lsls	r0, r2, #3
 800a652:	f100 8129 	bmi.w	800a8a8 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800a656:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a65a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a65e:	625a      	str	r2, [r3, #36]	; 0x24
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a66a:	4f4b      	ldr	r7, [pc, #300]	; (800a798 <HAL_RCC_OscConfig+0x29c>)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	05d9      	lsls	r1, r3, #23
 800a670:	f140 80cc 	bpl.w	800a80c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a674:	68a3      	ldr	r3, [r4, #8]
 800a676:	2b01      	cmp	r3, #1
 800a678:	f000 8175 	beq.w	800a966 <HAL_RCC_OscConfig+0x46a>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80a9 	beq.w	800a7d4 <HAL_RCC_OscConfig+0x2d8>
 800a682:	2b05      	cmp	r3, #5
 800a684:	4b42      	ldr	r3, [pc, #264]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a688:	f000 818b 	beq.w	800a9a2 <HAL_RCC_OscConfig+0x4a6>
 800a68c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a690:	635a      	str	r2, [r3, #52]	; 0x34
 800a692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a698:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a69a:	f7fd fd21 	bl	80080e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a69e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a6a2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6a4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a790 <HAL_RCC_OscConfig+0x294>
 800a6a8:	e005      	b.n	800a6b6 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6aa:	f7fd fd19 	bl	80080e0 <HAL_GetTick>
 800a6ae:	1bc0      	subs	r0, r0, r7
 800a6b0:	4548      	cmp	r0, r9
 800a6b2:	f200 80bc 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6b6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a6ba:	059b      	lsls	r3, r3, #22
 800a6bc:	d5f5      	bpl.n	800a6aa <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 800a6be:	2e00      	cmp	r6, #0
 800a6c0:	f040 814b 	bne.w	800a95a <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6c6:	b1b8      	cbz	r0, 800a6f8 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a6c8:	2d0c      	cmp	r5, #12
 800a6ca:	f000 8152 	beq.w	800a972 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6ce:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a6d0:	f04f 0200 	mov.w	r2, #0
 800a6d4:	4b2f      	ldr	r3, [pc, #188]	; (800a794 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6d6:	f000 8116 	beq.w	800a906 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800a6da:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a6dc:	f7fd fd00 	bl	80080e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6e0:	4d2b      	ldr	r5, [pc, #172]	; (800a790 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800a6e2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6e4:	e005      	b.n	800a6f2 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6e6:	f7fd fcfb 	bl	80080e0 <HAL_GetTick>
 800a6ea:	1b00      	subs	r0, r0, r4
 800a6ec:	2802      	cmp	r0, #2
 800a6ee:	f200 809e 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6f2:	682b      	ldr	r3, [r5, #0]
 800a6f4:	019b      	lsls	r3, r3, #6
 800a6f6:	d4f6      	bmi.n	800a6e6 <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 800a6f8:	2000      	movs	r0, #0
}
 800a6fa:	b003      	add	sp, #12
 800a6fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a700:	4b23      	ldr	r3, [pc, #140]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	059a      	lsls	r2, r3, #22
 800a706:	d502      	bpl.n	800a70e <HAL_RCC_OscConfig+0x212>
 800a708:	69a3      	ldr	r3, [r4, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d03b      	beq.n	800a786 <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a70e:	4e20      	ldr	r6, [pc, #128]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a710:	6a20      	ldr	r0, [r4, #32]
 800a712:	6873      	ldr	r3, [r6, #4]
 800a714:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a718:	4298      	cmp	r0, r3
 800a71a:	f240 80d7 	bls.w	800a8cc <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a71e:	f7ff feab 	bl	800a478 <RCC_SetFlashLatencyFromMSIRange>
 800a722:	2800      	cmp	r0, #0
 800a724:	d12f      	bne.n	800a786 <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a726:	6872      	ldr	r2, [r6, #4]
 800a728:	6a23      	ldr	r3, [r4, #32]
 800a72a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a72e:	431a      	orrs	r2, r3
 800a730:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a732:	6872      	ldr	r2, [r6, #4]
 800a734:	69e1      	ldr	r1, [r4, #28]
 800a736:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a73a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a73e:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a740:	4a13      	ldr	r2, [pc, #76]	; (800a790 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a742:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a744:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a746:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a74a:	3301      	adds	r3, #1
 800a74c:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a750:	4a12      	ldr	r2, [pc, #72]	; (800a79c <HAL_RCC_OscConfig+0x2a0>)
 800a752:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800a756:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a758:	4811      	ldr	r0, [pc, #68]	; (800a7a0 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a75a:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 800a75c:	4a11      	ldr	r2, [pc, #68]	; (800a7a4 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a75e:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 800a760:	6810      	ldr	r0, [r2, #0]
 800a762:	f7fd fc7b 	bl	800805c <HAL_InitTick>
        if(status != HAL_OK)
 800a766:	2800      	cmp	r0, #0
 800a768:	d1c7      	bne.n	800a6fa <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	e753      	b.n	800a616 <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a76e:	2e00      	cmp	r6, #0
 800a770:	f43f aedb 	beq.w	800a52a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a774:	4a06      	ldr	r2, [pc, #24]	; (800a790 <HAL_RCC_OscConfig+0x294>)
 800a776:	6812      	ldr	r2, [r2, #0]
 800a778:	0392      	lsls	r2, r2, #14
 800a77a:	f57f aeff 	bpl.w	800a57c <HAL_RCC_OscConfig+0x80>
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	2a00      	cmp	r2, #0
 800a782:	f47f aefb 	bne.w	800a57c <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800a786:	2001      	movs	r0, #1
}
 800a788:	b003      	add	sp, #12
 800a78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a78e:	bf00      	nop
 800a790:	40023800 	.word	0x40023800
 800a794:	42470000 	.word	0x42470000
 800a798:	40007000 	.word	0x40007000
 800a79c:	08011afc 	.word	0x08011afc
 800a7a0:	2000001c 	.word	0x2000001c
 800a7a4:	20000024 	.word	0x20000024
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a7a8:	2e00      	cmp	r6, #0
 800a7aa:	f47f aeef 	bne.w	800a58c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7ae:	4a81      	ldr	r2, [pc, #516]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	0792      	lsls	r2, r2, #30
 800a7b4:	d502      	bpl.n	800a7bc <HAL_RCC_OscConfig+0x2c0>
 800a7b6:	68e2      	ldr	r2, [r4, #12]
 800a7b8:	2a01      	cmp	r2, #1
 800a7ba:	d1e4      	bne.n	800a786 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7bc:	497d      	ldr	r1, [pc, #500]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
 800a7be:	6920      	ldr	r0, [r4, #16]
 800a7c0:	684a      	ldr	r2, [r1, #4]
 800a7c2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800a7c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a7ca:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a7cc:	06d9      	lsls	r1, r3, #27
 800a7ce:	f57f af22 	bpl.w	800a616 <HAL_RCC_OscConfig+0x11a>
 800a7d2:	e6fa      	b.n	800a5ca <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7d4:	4f77      	ldr	r7, [pc, #476]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7d6:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7e8:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a7ea:	f7fd fc79 	bl	80080e0 <HAL_GetTick>
 800a7ee:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7f0:	e005      	b.n	800a7fe <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7f2:	f7fd fc75 	bl	80080e0 <HAL_GetTick>
 800a7f6:	eba0 0008 	sub.w	r0, r0, r8
 800a7fa:	4548      	cmp	r0, r9
 800a7fc:	d817      	bhi.n	800a82e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a800:	0598      	lsls	r0, r3, #22
 800a802:	d4f6      	bmi.n	800a7f2 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 800a804:	2e00      	cmp	r6, #0
 800a806:	f43f af5d 	beq.w	800a6c4 <HAL_RCC_OscConfig+0x1c8>
 800a80a:	e0a6      	b.n	800a95a <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a812:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a814:	f7fd fc64 	bl	80080e0 <HAL_GetTick>
 800a818:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	05da      	lsls	r2, r3, #23
 800a81e:	f53f af29 	bmi.w	800a674 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a822:	f7fd fc5d 	bl	80080e0 <HAL_GetTick>
 800a826:	eba0 0008 	sub.w	r0, r0, r8
 800a82a:	2864      	cmp	r0, #100	; 0x64
 800a82c:	d9f5      	bls.n	800a81a <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800a82e:	2003      	movs	r0, #3
}
 800a830:	b003      	add	sp, #12
 800a832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a836:	4f5f      	ldr	r7, [pc, #380]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a846:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800a848:	f7fd fc4a 	bl	80080e0 <HAL_GetTick>
 800a84c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a84e:	e005      	b.n	800a85c <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a850:	f7fd fc46 	bl	80080e0 <HAL_GetTick>
 800a854:	eba0 0008 	sub.w	r0, r0, r8
 800a858:	2864      	cmp	r0, #100	; 0x64
 800a85a:	d8e8      	bhi.n	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	0398      	lsls	r0, r3, #14
 800a860:	d4f6      	bmi.n	800a850 <HAL_RCC_OscConfig+0x354>
 800a862:	e68a      	b.n	800a57a <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 800a864:	4a54      	ldr	r2, [pc, #336]	; (800a9b8 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a866:	4f53      	ldr	r7, [pc, #332]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 800a868:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a86c:	f7fd fc38 	bl	80080e0 <HAL_GetTick>
 800a870:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a872:	e004      	b.n	800a87e <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a874:	f7fd fc34 	bl	80080e0 <HAL_GetTick>
 800a878:	1b80      	subs	r0, r0, r6
 800a87a:	2802      	cmp	r0, #2
 800a87c:	d8d7      	bhi.n	800a82e <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	079b      	lsls	r3, r3, #30
 800a882:	d4f7      	bmi.n	800a874 <HAL_RCC_OscConfig+0x378>
 800a884:	e6df      	b.n	800a646 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800a886:	4a4c      	ldr	r2, [pc, #304]	; (800a9b8 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a888:	4f4a      	ldr	r7, [pc, #296]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 800a88a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a88c:	f7fd fc28 	bl	80080e0 <HAL_GetTick>
 800a890:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a892:	e004      	b.n	800a89e <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a894:	f7fd fc24 	bl	80080e0 <HAL_GetTick>
 800a898:	1b80      	subs	r0, r0, r6
 800a89a:	2802      	cmp	r0, #2
 800a89c:	d8c7      	bhi.n	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	0798      	lsls	r0, r3, #30
 800a8a2:	d4f7      	bmi.n	800a894 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	e68e      	b.n	800a5c6 <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 800a8a8:	2600      	movs	r6, #0
 800a8aa:	e6de      	b.n	800a66a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 800a8ac:	4a42      	ldr	r2, [pc, #264]	; (800a9b8 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a8ae:	4f41      	ldr	r7, [pc, #260]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 800a8b0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800a8b2:	f7fd fc15 	bl	80080e0 <HAL_GetTick>
 800a8b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a8b8:	e004      	b.n	800a8c4 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8ba:	f7fd fc11 	bl	80080e0 <HAL_GetTick>
 800a8be:	1b80      	subs	r0, r0, r6
 800a8c0:	2802      	cmp	r0, #2
 800a8c2:	d8b4      	bhi.n	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	0598      	lsls	r0, r3, #22
 800a8c8:	d4f7      	bmi.n	800a8ba <HAL_RCC_OscConfig+0x3be>
 800a8ca:	e74e      	b.n	800a76a <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8cc:	6873      	ldr	r3, [r6, #4]
 800a8ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a8d2:	4303      	orrs	r3, r0
 800a8d4:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8d6:	6873      	ldr	r3, [r6, #4]
 800a8d8:	69e2      	ldr	r2, [r4, #28]
 800a8da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a8de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a8e2:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a8e4:	f7ff fdc8 	bl	800a478 <RCC_SetFlashLatencyFromMSIRange>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f47f af4c 	bne.w	800a786 <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a8ee:	6a23      	ldr	r3, [r4, #32]
 800a8f0:	e726      	b.n	800a740 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 800a8f2:	2001      	movs	r0, #1
}
 800a8f4:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	e629      	b.n	800a55a <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 800a906:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a908:	f7fd fbea 	bl	80080e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a90c:	4e29      	ldr	r6, [pc, #164]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a90e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a910:	e004      	b.n	800a91c <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a912:	f7fd fbe5 	bl	80080e0 <HAL_GetTick>
 800a916:	1b40      	subs	r0, r0, r5
 800a918:	2802      	cmp	r0, #2
 800a91a:	d888      	bhi.n	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a91c:	6833      	ldr	r3, [r6, #0]
 800a91e:	0199      	lsls	r1, r3, #6
 800a920:	d4f7      	bmi.n	800a912 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a922:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800a926:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 800a928:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a92a:	68b2      	ldr	r2, [r6, #8]
 800a92c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a92e:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800a932:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800a934:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a936:	4303      	orrs	r3, r0
 800a938:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 800a93a:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a93c:	f7fd fbd0 	bl	80080e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a940:	4d1c      	ldr	r5, [pc, #112]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a942:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a944:	e005      	b.n	800a952 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a946:	f7fd fbcb 	bl	80080e0 <HAL_GetTick>
 800a94a:	1b00      	subs	r0, r0, r4
 800a94c:	2802      	cmp	r0, #2
 800a94e:	f63f af6e 	bhi.w	800a82e <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	019a      	lsls	r2, r3, #6
 800a956:	d5f6      	bpl.n	800a946 <HAL_RCC_OscConfig+0x44a>
 800a958:	e6ce      	b.n	800a6f8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a95a:	4a16      	ldr	r2, [pc, #88]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
 800a95c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a95e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a962:	6253      	str	r3, [r2, #36]	; 0x24
 800a964:	e6ae      	b.n	800a6c4 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a966:	4a13      	ldr	r2, [pc, #76]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
 800a968:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a96a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a96e:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a970:	e693      	b.n	800a69a <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a972:	2801      	cmp	r0, #1
 800a974:	f43f aec1 	beq.w	800a6fa <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800a978:	4b0e      	ldr	r3, [pc, #56]	; (800a9b4 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a97a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 800a97c:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a97e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a982:	4291      	cmp	r1, r2
 800a984:	f47f aeff 	bne.w	800a786 <HAL_RCC_OscConfig+0x28a>
 800a988:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a98a:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a98e:	4291      	cmp	r1, r2
 800a990:	f47f aef9 	bne.w	800a786 <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a994:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a996:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 800a99a:	1a18      	subs	r0, r3, r0
 800a99c:	bf18      	it	ne
 800a99e:	2001      	movne	r0, #1
 800a9a0:	e6ab      	b.n	800a6fa <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9a6:	635a      	str	r2, [r3, #52]	; 0x34
 800a9a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ae:	635a      	str	r2, [r3, #52]	; 0x34
 800a9b0:	e673      	b.n	800a69a <HAL_RCC_OscConfig+0x19e>
 800a9b2:	bf00      	nop
 800a9b4:	40023800 	.word	0x40023800
 800a9b8:	42470000 	.word	0x42470000

0800a9bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f000 80c2 	beq.w	800ab46 <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a9c2:	4a85      	ldr	r2, [pc, #532]	; (800abd8 <HAL_RCC_ClockConfig+0x21c>)
{
 800a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a9c8:	6813      	ldr	r3, [r2, #0]
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	428b      	cmp	r3, r1
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	d213      	bcs.n	800a9fe <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9d6:	2901      	cmp	r1, #1
 800a9d8:	d103      	bne.n	800a9e2 <HAL_RCC_ClockConfig+0x26>
 800a9da:	6813      	ldr	r3, [r2, #0]
 800a9dc:	f043 0304 	orr.w	r3, r3, #4
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	4a7d      	ldr	r2, [pc, #500]	; (800abd8 <HAL_RCC_ClockConfig+0x21c>)
 800a9e4:	6813      	ldr	r3, [r2, #0]
 800a9e6:	f023 0301 	bic.w	r3, r3, #1
 800a9ea:	432b      	orrs	r3, r5
 800a9ec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ee:	6813      	ldr	r3, [r2, #0]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	d002      	beq.n	800a9fe <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 800a9f8:	2001      	movs	r0, #1
}
 800a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	0799      	lsls	r1, r3, #30
 800aa02:	d506      	bpl.n	800aa12 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa04:	4975      	ldr	r1, [pc, #468]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
 800aa06:	68a0      	ldr	r0, [r4, #8]
 800aa08:	688a      	ldr	r2, [r1, #8]
 800aa0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800aa0e:	4302      	orrs	r2, r0
 800aa10:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa12:	07da      	lsls	r2, r3, #31
 800aa14:	d529      	bpl.n	800aa6a <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa16:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa18:	4b70      	ldr	r3, [pc, #448]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa1a:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa1c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa1e:	f000 808e 	beq.w	800ab3e <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa22:	2a03      	cmp	r2, #3
 800aa24:	f000 8085 	beq.w	800ab32 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800aa28:	2a01      	cmp	r2, #1
 800aa2a:	f000 80d1 	beq.w	800abd0 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800aa2e:	0598      	lsls	r0, r3, #22
 800aa30:	d5e2      	bpl.n	800a9f8 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa32:	4e6a      	ldr	r6, [pc, #424]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa34:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa38:	68b3      	ldr	r3, [r6, #8]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800aa42:	f7fd fb4d 	bl	80080e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa46:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800aa48:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d055      	beq.n	800aafa <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d05e      	beq.n	800ab10 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d105      	bne.n	800aa62 <HAL_RCC_ClockConfig+0xa6>
 800aa56:	e066      	b.n	800ab26 <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa58:	f7fd fb42 	bl	80080e0 <HAL_GetTick>
 800aa5c:	1bc0      	subs	r0, r0, r7
 800aa5e:	4540      	cmp	r0, r8
 800aa60:	d873      	bhi.n	800ab4a <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800aa62:	68b3      	ldr	r3, [r6, #8]
 800aa64:	f013 0f0c 	tst.w	r3, #12
 800aa68:	d1f6      	bne.n	800aa58 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa6a:	4a5b      	ldr	r2, [pc, #364]	; (800abd8 <HAL_RCC_ClockConfig+0x21c>)
 800aa6c:	6813      	ldr	r3, [r2, #0]
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	42ab      	cmp	r3, r5
 800aa74:	d906      	bls.n	800aa84 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa76:	6813      	ldr	r3, [r2, #0]
 800aa78:	f023 0301 	bic.w	r3, r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa7e:	6813      	ldr	r3, [r2, #0]
 800aa80:	07da      	lsls	r2, r3, #31
 800aa82:	d4b9      	bmi.n	800a9f8 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	0759      	lsls	r1, r3, #29
 800aa88:	d506      	bpl.n	800aa98 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa8a:	4954      	ldr	r1, [pc, #336]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
 800aa8c:	68e0      	ldr	r0, [r4, #12]
 800aa8e:	688a      	ldr	r2, [r1, #8]
 800aa90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aa94:	4302      	orrs	r2, r0
 800aa96:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa98:	071b      	lsls	r3, r3, #28
 800aa9a:	d420      	bmi.n	800aade <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 800aa9c:	494f      	ldr	r1, [pc, #316]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
 800aa9e:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800aaa0:	f002 030c 	and.w	r3, r2, #12
 800aaa4:	2b08      	cmp	r3, #8
 800aaa6:	d079      	beq.n	800ab9c <HAL_RCC_ClockConfig+0x1e0>
 800aaa8:	2b0c      	cmp	r3, #12
 800aaaa:	d050      	beq.n	800ab4e <HAL_RCC_ClockConfig+0x192>
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d044      	beq.n	800ab3a <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800aab0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800aab4:	684b      	ldr	r3, [r1, #4]
 800aab6:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800aaba:	3301      	adds	r3, #1
 800aabc:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aabe:	4b47      	ldr	r3, [pc, #284]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
 800aac0:	4a47      	ldr	r2, [pc, #284]	; (800abe0 <HAL_RCC_ClockConfig+0x224>)
 800aac2:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 800aac4:	4947      	ldr	r1, [pc, #284]	; (800abe4 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aac6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aaca:	5cd3      	ldrb	r3, [r2, r3]
 800aacc:	4a46      	ldr	r2, [pc, #280]	; (800abe8 <HAL_RCC_ClockConfig+0x22c>)
 800aace:	fa20 f303 	lsr.w	r3, r0, r3
}
 800aad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800aad6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aad8:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800aada:	f7fd babf 	b.w	800805c <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aade:	4a3f      	ldr	r2, [pc, #252]	; (800abdc <HAL_RCC_ClockConfig+0x220>)
 800aae0:	6921      	ldr	r1, [r4, #16]
 800aae2:	6893      	ldr	r3, [r2, #8]
 800aae4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800aae8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aaec:	6093      	str	r3, [r2, #8]
 800aaee:	e7d5      	b.n	800aa9c <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaf0:	f7fd faf6 	bl	80080e0 <HAL_GetTick>
 800aaf4:	1bc3      	subs	r3, r0, r7
 800aaf6:	4543      	cmp	r3, r8
 800aaf8:	d827      	bhi.n	800ab4a <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800aafa:	68b3      	ldr	r3, [r6, #8]
 800aafc:	f003 030c 	and.w	r3, r3, #12
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d1f5      	bne.n	800aaf0 <HAL_RCC_ClockConfig+0x134>
 800ab04:	e7b1      	b.n	800aa6a <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab06:	f7fd faeb 	bl	80080e0 <HAL_GetTick>
 800ab0a:	1bc0      	subs	r0, r0, r7
 800ab0c:	4540      	cmp	r0, r8
 800ab0e:	d81c      	bhi.n	800ab4a <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab10:	68b3      	ldr	r3, [r6, #8]
 800ab12:	f003 030c 	and.w	r3, r3, #12
 800ab16:	2b0c      	cmp	r3, #12
 800ab18:	d1f5      	bne.n	800ab06 <HAL_RCC_ClockConfig+0x14a>
 800ab1a:	e7a6      	b.n	800aa6a <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab1c:	f7fd fae0 	bl	80080e0 <HAL_GetTick>
 800ab20:	1bc0      	subs	r0, r0, r7
 800ab22:	4540      	cmp	r0, r8
 800ab24:	d811      	bhi.n	800ab4a <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab26:	68b3      	ldr	r3, [r6, #8]
 800ab28:	f003 030c 	and.w	r3, r3, #12
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d1f5      	bne.n	800ab1c <HAL_RCC_ClockConfig+0x160>
 800ab30:	e79b      	b.n	800aa6a <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab32:	019f      	lsls	r7, r3, #6
 800ab34:	f53f af7d 	bmi.w	800aa32 <HAL_RCC_ClockConfig+0x76>
 800ab38:	e75e      	b.n	800a9f8 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 800ab3a:	482c      	ldr	r0, [pc, #176]	; (800abec <HAL_RCC_ClockConfig+0x230>)
 800ab3c:	e7bf      	b.n	800aabe <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab3e:	039b      	lsls	r3, r3, #14
 800ab40:	f53f af77 	bmi.w	800aa32 <HAL_RCC_ClockConfig+0x76>
 800ab44:	e758      	b.n	800a9f8 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 800ab46:	2001      	movs	r0, #1
}
 800ab48:	4770      	bx	lr
          return HAL_TIMEOUT;
 800ab4a:	2003      	movs	r0, #3
 800ab4c:	e755      	b.n	800a9fa <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800ab4e:	4828      	ldr	r0, [pc, #160]	; (800abf0 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab50:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800ab52:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800ab56:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800ab58:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab5c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800ab60:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ab64:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab68:	d01a      	beq.n	800aba0 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800ab6a:	1b09      	subs	r1, r1, r4
 800ab6c:	eb65 0505 	sbc.w	r5, r5, r5
 800ab70:	01ab      	lsls	r3, r5, #6
 800ab72:	0188      	lsls	r0, r1, #6
 800ab74:	1a40      	subs	r0, r0, r1
 800ab76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ab7a:	eb63 0305 	sbc.w	r3, r3, r5
 800ab7e:	00c1      	lsls	r1, r0, #3
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	190c      	adds	r4, r1, r4
 800ab84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ab88:	f143 0300 	adc.w	r3, r3, #0
 800ab8c:	0259      	lsls	r1, r3, #9
 800ab8e:	0260      	lsls	r0, r4, #9
 800ab90:	2300      	movs	r3, #0
 800ab92:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 800ab96:	f7f6 fb19 	bl	80011cc <__aeabi_uldivmod>
 800ab9a:	e790      	b.n	800aabe <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 800ab9c:	4815      	ldr	r0, [pc, #84]	; (800abf4 <HAL_RCC_ClockConfig+0x238>)
 800ab9e:	e78e      	b.n	800aabe <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800aba0:	1b0d      	subs	r5, r1, r4
 800aba2:	eb66 0606 	sbc.w	r6, r6, r6
 800aba6:	01b0      	lsls	r0, r6, #6
 800aba8:	01a9      	lsls	r1, r5, #6
 800abaa:	1b49      	subs	r1, r1, r5
 800abac:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 800abb0:	eb60 0006 	sbc.w	r0, r0, r6
 800abb4:	00c0      	lsls	r0, r0, #3
 800abb6:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 800abba:	00c9      	lsls	r1, r1, #3
 800abbc:	190c      	adds	r4, r1, r4
 800abbe:	f140 0000 	adc.w	r0, r0, #0
 800abc2:	0281      	lsls	r1, r0, #10
 800abc4:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800abc8:	02a0      	lsls	r0, r4, #10
 800abca:	f7f6 faff 	bl	80011cc <__aeabi_uldivmod>
 800abce:	e776      	b.n	800aabe <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abd0:	079e      	lsls	r6, r3, #30
 800abd2:	f53f af2e 	bmi.w	800aa32 <HAL_RCC_ClockConfig+0x76>
 800abd6:	e70f      	b.n	800a9f8 <HAL_RCC_ClockConfig+0x3c>
 800abd8:	40023c00 	.word	0x40023c00
 800abdc:	40023800 	.word	0x40023800
 800abe0:	08011afc 	.word	0x08011afc
 800abe4:	20000024 	.word	0x20000024
 800abe8:	2000001c 	.word	0x2000001c
 800abec:	00f42400 	.word	0x00f42400
 800abf0:	08011b14 	.word	0x08011b14
 800abf4:	007a1200 	.word	0x007a1200

0800abf8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800abf8:	4b04      	ldr	r3, [pc, #16]	; (800ac0c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800abfa:	4a05      	ldr	r2, [pc, #20]	; (800ac10 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	4905      	ldr	r1, [pc, #20]	; (800ac14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ac00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ac04:	5ccb      	ldrb	r3, [r1, r3]
 800ac06:	6810      	ldr	r0, [r2, #0]
}
 800ac08:	40d8      	lsrs	r0, r3
 800ac0a:	4770      	bx	lr
 800ac0c:	40023800 	.word	0x40023800
 800ac10:	2000001c 	.word	0x2000001c
 800ac14:	08011b0c 	.word	0x08011b0c

0800ac18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ac1a:	4a05      	ldr	r2, [pc, #20]	; (800ac30 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	4905      	ldr	r1, [pc, #20]	; (800ac34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ac20:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ac24:	5ccb      	ldrb	r3, [r1, r3]
 800ac26:	6810      	ldr	r0, [r2, #0]
}
 800ac28:	40d8      	lsrs	r0, r3
 800ac2a:	4770      	bx	lr
 800ac2c:	40023800 	.word	0x40023800
 800ac30:	2000001c 	.word	0x2000001c
 800ac34:	08011b0c 	.word	0x08011b0c

0800ac38 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d049      	beq.n	800acd0 <HAL_TIM_Base_Init+0x98>
{
 800ac3c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ac42:	4604      	mov	r4, r0
 800ac44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d03c      	beq.n	800acc6 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac4c:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac4e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ac50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800ac58:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac5a:	d013      	beq.n	800ac84 <HAL_TIM_Base_Init+0x4c>
 800ac5c:	491d      	ldr	r1, [pc, #116]	; (800acd4 <HAL_TIM_Base_Init+0x9c>)
 800ac5e:	428a      	cmp	r2, r1
 800ac60:	d010      	beq.n	800ac84 <HAL_TIM_Base_Init+0x4c>
 800ac62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac66:	428a      	cmp	r2, r1
 800ac68:	d00c      	beq.n	800ac84 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac6a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800ac6e:	428a      	cmp	r2, r1
 800ac70:	d00c      	beq.n	800ac8c <HAL_TIM_Base_Init+0x54>
 800ac72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac76:	428a      	cmp	r2, r1
 800ac78:	d008      	beq.n	800ac8c <HAL_TIM_Base_Init+0x54>
 800ac7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac7e:	428a      	cmp	r2, r1
 800ac80:	d108      	bne.n	800ac94 <HAL_TIM_Base_Init+0x5c>
 800ac82:	e003      	b.n	800ac8c <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 800ac84:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ac8a:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac8c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac92:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac94:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac96:	6960      	ldr	r0, [r4, #20]
 800ac98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac9c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac9e:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800aca0:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800aca2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aca4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800aca6:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800aca8:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acaa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acae:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800acb2:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800acb6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800acba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800acbe:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 800acc2:	2000      	movs	r0, #0
}
 800acc4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800acc6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800acca:	f7fc ffb7 	bl	8007c3c <HAL_TIM_Base_MspInit>
 800acce:	e7bd      	b.n	800ac4c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800acd0:	2001      	movs	r0, #1
}
 800acd2:	4770      	bx	lr
 800acd4:	40000400 	.word	0x40000400

0800acd8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800acd8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d120      	bne.n	800ad22 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800ace0:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ace2:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ace4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ace8:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acf4:	d00a      	beq.n	800ad0c <HAL_TIM_Base_Start_IT+0x34>
 800acf6:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <HAL_TIM_Base_Start_IT+0x54>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d007      	beq.n	800ad0c <HAL_TIM_Base_Start_IT+0x34>
 800acfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d003      	beq.n	800ad0c <HAL_TIM_Base_Start_IT+0x34>
 800ad04:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d104      	bne.n	800ad16 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad0c:	689a      	ldr	r2, [r3, #8]
 800ad0e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad12:	2a06      	cmp	r2, #6
 800ad14:	d007      	beq.n	800ad26 <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800ad16:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800ad18:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	4770      	bx	lr
    return HAL_ERROR;
 800ad22:	2001      	movs	r0, #1
 800ad24:	4770      	bx	lr
  return HAL_OK;
 800ad26:	2000      	movs	r0, #0
}
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40000400 	.word	0x40000400

0800ad30 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 800ad30:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ad34:	6802      	ldr	r2, [r0, #0]
{
 800ad36:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ad38:	68d1      	ldr	r1, [r2, #12]
 800ad3a:	f021 0101 	bic.w	r1, r1, #1
 800ad3e:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800ad40:	6a11      	ldr	r1, [r2, #32]
 800ad42:	ea11 0f0c 	tst.w	r1, ip
 800ad46:	d103      	bne.n	800ad50 <HAL_TIM_Base_Stop_IT+0x20>
 800ad48:	6811      	ldr	r1, [r2, #0]
 800ad4a:	f021 0101 	bic.w	r1, r1, #1
 800ad4e:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800ad50:	2201      	movs	r2, #1
}
 800ad52:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ad54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop

0800ad5c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800ad5c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ad60:	2a01      	cmp	r2, #1
 800ad62:	d075      	beq.n	800ae50 <HAL_TIM_ConfigClockSource+0xf4>
{
 800ad64:	b430      	push	{r4, r5}
 800ad66:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800ad68:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800ad6a:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800ad6c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800ad6e:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800ad72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800ad76:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800ad78:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad7a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800ad7e:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800ad82:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800ad84:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800ad86:	d065      	beq.n	800ae54 <HAL_TIM_ConfigClockSource+0xf8>
 800ad88:	d831      	bhi.n	800adee <HAL_TIM_ConfigClockSource+0x92>
 800ad8a:	2a40      	cmp	r2, #64	; 0x40
 800ad8c:	d048      	beq.n	800ae20 <HAL_TIM_ConfigClockSource+0xc4>
 800ad8e:	d921      	bls.n	800add4 <HAL_TIM_ConfigClockSource+0x78>
 800ad90:	2a50      	cmp	r2, #80	; 0x50
 800ad92:	d116      	bne.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad94:	684c      	ldr	r4, [r1, #4]
 800ad96:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad98:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad9a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ad9e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ada0:	6a04      	ldr	r4, [r0, #32]
 800ada2:	f024 0401 	bic.w	r4, r4, #1
 800ada6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ada8:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adaa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800adae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adb2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800adb4:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adb6:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adbc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adc0:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800adc2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800adc4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800adc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800adca:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 800adce:	4610      	mov	r0, r2
}
 800add0:	bc30      	pop	{r4, r5}
 800add2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800add4:	2a20      	cmp	r2, #32
 800add6:	d002      	beq.n	800adde <HAL_TIM_ConfigClockSource+0x82>
 800add8:	d91e      	bls.n	800ae18 <HAL_TIM_ConfigClockSource+0xbc>
 800adda:	2a30      	cmp	r2, #48	; 0x30
 800addc:	d1f1      	bne.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 800adde:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ade0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ade4:	430a      	orrs	r2, r1
 800ade6:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800adea:	6082      	str	r2, [r0, #8]
}
 800adec:	e7e9      	b.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800adee:	2a70      	cmp	r2, #112	; 0x70
 800adf0:	d049      	beq.n	800ae86 <HAL_TIM_ConfigClockSource+0x12a>
 800adf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800adf6:	d1e4      	bne.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adf8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800adfc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adfe:	432a      	orrs	r2, r5
 800ae00:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae02:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ae0a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae0c:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae0e:	6882      	ldr	r2, [r0, #8]
 800ae10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae14:	6082      	str	r2, [r0, #8]
      break;
 800ae16:	e7d4      	b.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800ae18:	f032 0110 	bics.w	r1, r2, #16
 800ae1c:	d1d1      	bne.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
 800ae1e:	e7de      	b.n	800adde <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae20:	684c      	ldr	r4, [r1, #4]
 800ae22:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800ae24:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae26:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ae2a:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2c:	6a04      	ldr	r4, [r0, #32]
 800ae2e:	f024 0401 	bic.w	r4, r4, #1
 800ae32:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae34:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae3a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ae3e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ae40:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ae42:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae48:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800ae4c:	6082      	str	r2, [r0, #8]
}
 800ae4e:	e7b8      	b.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800ae50:	2002      	movs	r0, #2
}
 800ae52:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae54:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae56:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae58:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae5c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae5e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae60:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae62:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae66:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800ae6a:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800ae6c:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae72:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 800ae76:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ae78:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae7e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ae82:	6082      	str	r2, [r0, #8]
}
 800ae84:	e79d      	b.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae86:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ae8a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae8c:	432a      	orrs	r2, r5
 800ae8e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae90:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae94:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ae98:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800ae9a:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ae9c:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae9e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800aea2:	6082      	str	r2, [r0, #8]
      break;
 800aea4:	e78d      	b.n	800adc2 <HAL_TIM_ConfigClockSource+0x66>
 800aea6:	bf00      	nop

0800aea8 <HAL_TIM_OC_DelayElapsedCallback>:
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop

0800aeac <HAL_TIM_IC_CaptureCallback>:
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop

0800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <HAL_TIM_TriggerCallback>:
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop

0800aeb8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aeb8:	6803      	ldr	r3, [r0, #0]
{
 800aeba:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aebc:	691a      	ldr	r2, [r3, #16]
{
 800aebe:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aec0:	0791      	lsls	r1, r2, #30
 800aec2:	d502      	bpl.n	800aeca <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	0792      	lsls	r2, r2, #30
 800aec8:	d450      	bmi.n	800af6c <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	0752      	lsls	r2, r2, #29
 800aece:	d502      	bpl.n	800aed6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	0750      	lsls	r0, r2, #29
 800aed4:	d437      	bmi.n	800af46 <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aed6:	691a      	ldr	r2, [r3, #16]
 800aed8:	0711      	lsls	r1, r2, #28
 800aeda:	d502      	bpl.n	800aee2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	0712      	lsls	r2, r2, #28
 800aee0:	d422      	bmi.n	800af28 <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aee2:	691a      	ldr	r2, [r3, #16]
 800aee4:	06d0      	lsls	r0, r2, #27
 800aee6:	d502      	bpl.n	800aeee <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aee8:	68da      	ldr	r2, [r3, #12]
 800aeea:	06d1      	lsls	r1, r2, #27
 800aeec:	d40c      	bmi.n	800af08 <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	07d2      	lsls	r2, r2, #31
 800aef2:	d502      	bpl.n	800aefa <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aef4:	68da      	ldr	r2, [r3, #12]
 800aef6:	07d0      	lsls	r0, r2, #31
 800aef8:	d450      	bmi.n	800af9c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aefa:	691a      	ldr	r2, [r3, #16]
 800aefc:	0651      	lsls	r1, r2, #25
 800aefe:	d502      	bpl.n	800af06 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	0652      	lsls	r2, r2, #25
 800af04:	d443      	bmi.n	800af8e <HAL_TIM_IRQHandler+0xd6>
}
 800af06:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af08:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af0c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af0e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af10:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af12:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800af14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af16:	f413 7f40 	tst.w	r3, #768	; 0x300
 800af1a:	d047      	beq.n	800afac <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800af1c:	f7ff ffc6 	bl	800aeac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af20:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af22:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af24:	7622      	strb	r2, [r4, #24]
 800af26:	e7e2      	b.n	800aeee <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af28:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af2c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af2e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af30:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af32:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800af34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af36:	079b      	lsls	r3, r3, #30
 800af38:	d044      	beq.n	800afc4 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800af3a:	f7ff ffb7 	bl	800aeac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af3e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af40:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af42:	7622      	strb	r2, [r4, #24]
 800af44:	e7cd      	b.n	800aee2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af46:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af4a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af4c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af4e:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af50:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800af52:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af54:	f413 7f40 	tst.w	r3, #768	; 0x300
 800af58:	d131      	bne.n	800afbe <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af5a:	f7ff ffa5 	bl	800aea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af5e:	4620      	mov	r0, r4
 800af60:	f7ff ffa6 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af64:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af66:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af68:	7622      	strb	r2, [r4, #24]
 800af6a:	e7b4      	b.n	800aed6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af6c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af70:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af72:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af74:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	0799      	lsls	r1, r3, #30
 800af7a:	d11d      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af7c:	f7ff ff94 	bl	800aea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af80:	4620      	mov	r0, r4
 800af82:	f7ff ff95 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af86:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af88:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af8a:	7622      	strb	r2, [r4, #24]
 800af8c:	e79d      	b.n	800aeca <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800af92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af94:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800af96:	f7ff ff8d 	bl	800aeb4 <HAL_TIM_TriggerCallback>
}
 800af9a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af9c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800afa0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afa2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800afa4:	f7fc faa2 	bl	80074ec <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	e7a6      	b.n	800aefa <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afac:	f7ff ff7c 	bl	800aea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afb0:	4620      	mov	r0, r4
 800afb2:	f7ff ff7d 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
 800afb6:	e7b3      	b.n	800af20 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 800afb8:	f7ff ff78 	bl	800aeac <HAL_TIM_IC_CaptureCallback>
 800afbc:	e7e3      	b.n	800af86 <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 800afbe:	f7ff ff75 	bl	800aeac <HAL_TIM_IC_CaptureCallback>
 800afc2:	e7cf      	b.n	800af64 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc4:	f7ff ff70 	bl	800aea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afc8:	4620      	mov	r0, r4
 800afca:	f7ff ff71 	bl	800aeb0 <HAL_TIM_PWM_PulseFinishedCallback>
 800afce:	e7b6      	b.n	800af3e <HAL_TIM_IRQHandler+0x86>

0800afd0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afd0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800afd4:	2a01      	cmp	r2, #1
 800afd6:	d028      	beq.n	800b02a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800afd8:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afda:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afdc:	681a      	ldr	r2, [r3, #0]
{
 800afde:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800afe0:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800afe4:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afe6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800afe8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afec:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800aff2:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800aff4:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aff6:	d00a      	beq.n	800b00e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800aff8:	480d      	ldr	r0, [pc, #52]	; (800b030 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800affa:	4282      	cmp	r2, r0
 800affc:	d007      	beq.n	800b00e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800affe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800b002:	4282      	cmp	r2, r0
 800b004:	d003      	beq.n	800b00e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800b006:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800b00a:	4282      	cmp	r2, r0
 800b00c:	d104      	bne.n	800b018 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b00e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b010:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b014:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b016:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800b018:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800b01a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800b01c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800b020:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800b024:	4610      	mov	r0, r2
}
 800b026:	bc30      	pop	{r4, r5}
 800b028:	4770      	bx	lr
  __HAL_LOCK(htim);
 800b02a:	2002      	movs	r0, #2
}
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40000400 	.word	0x40000400

0800b034 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b034:	2800      	cmp	r0, #0
 800b036:	f000 8081 	beq.w	800b13c <HAL_UART_Init+0x108>
{
 800b03a:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b03c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b040:	4604      	mov	r4, r0
 800b042:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b046:	2b00      	cmp	r3, #0
 800b048:	d070      	beq.n	800b12c <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b04a:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800b04e:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b050:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800b052:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b054:	4302      	orrs	r2, r0
 800b056:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800b058:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b05c:	4302      	orrs	r2, r0
 800b05e:	69e0      	ldr	r0, [r4, #28]
 800b060:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800b062:	68d8      	ldr	r0, [r3, #12]
 800b064:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800b068:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b06a:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b06c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b06e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800b072:	4329      	orrs	r1, r5
 800b074:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800b076:	68d9      	ldr	r1, [r3, #12]
 800b078:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800b07c:	f021 010c 	bic.w	r1, r1, #12
 800b080:	430a      	orrs	r2, r1
 800b082:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b084:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800b086:	492e      	ldr	r1, [pc, #184]	; (800b140 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b088:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b08c:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800b08e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b090:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800b092:	d050      	beq.n	800b136 <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b094:	f7ff fdb0 	bl	800abf8 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b098:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b09a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b09e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b0a6:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0a8:	d027      	beq.n	800b0fa <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0b0:	2564      	movs	r5, #100	; 0x64
 800b0b2:	4824      	ldr	r0, [pc, #144]	; (800b144 <HAL_UART_Init+0x110>)
 800b0b4:	6822      	ldr	r2, [r4, #0]
 800b0b6:	fba0 6103 	umull	r6, r1, r0, r3
 800b0ba:	0949      	lsrs	r1, r1, #5
 800b0bc:	fb05 3311 	mls	r3, r5, r1, r3
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	3332      	adds	r3, #50	; 0x32
 800b0c4:	fba0 0303 	umull	r0, r3, r0, r3
 800b0c8:	0109      	lsls	r1, r1, #4
 800b0ca:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800b0ce:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d0:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800b0d2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0d4:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800b0d6:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800b0dc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0de:	6953      	ldr	r3, [r2, #20]
 800b0e0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800b0e4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800b0e6:	68d3      	ldr	r3, [r2, #12]
 800b0e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b0ec:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ee:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b0f0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b0f4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	fbb0 f0f3 	udiv	r0, r0, r3
 800b100:	2364      	movs	r3, #100	; 0x64
 800b102:	4e10      	ldr	r6, [pc, #64]	; (800b144 <HAL_UART_Init+0x110>)
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	fba6 5100 	umull	r5, r1, r6, r0
 800b10a:	094d      	lsrs	r5, r1, #5
 800b10c:	fb03 0315 	mls	r3, r3, r5, r0
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	3332      	adds	r3, #50	; 0x32
 800b114:	fba6 1303 	umull	r1, r3, r6, r3
 800b118:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800b11c:	091b      	lsrs	r3, r3, #4
 800b11e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b122:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b126:	440b      	add	r3, r1
 800b128:	6093      	str	r3, [r2, #8]
 800b12a:	e7d1      	b.n	800b0d0 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800b12c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800b130:	f7fc fe20 	bl	8007d74 <HAL_UART_MspInit>
 800b134:	e789      	b.n	800b04a <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800b136:	f7ff fd6f 	bl	800ac18 <HAL_RCC_GetPCLK2Freq>
 800b13a:	e7ad      	b.n	800b098 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800b13c:	2001      	movs	r0, #1
}
 800b13e:	4770      	bx	lr
 800b140:	40013800 	.word	0x40013800
 800b144:	51eb851f 	.word	0x51eb851f

0800b148 <HAL_UART_Transmit_DMA>:
{
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800b14c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800b150:	2820      	cmp	r0, #32
 800b152:	d12d      	bne.n	800b1b0 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800b154:	b351      	cbz	r1, 800b1ac <HAL_UART_Transmit_DMA+0x64>
 800b156:	b34a      	cbz	r2, 800b1ac <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800b158:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800b15c:	2801      	cmp	r0, #1
 800b15e:	d027      	beq.n	800b1b0 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b160:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b162:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b166:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b16a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b16c:	4f11      	ldr	r7, [pc, #68]	; (800b1b4 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b16e:	4e12      	ldr	r6, [pc, #72]	; (800b1b8 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800b170:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800b172:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b174:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800b176:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800b178:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b17c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b180:	4613      	mov	r3, r2
 800b182:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b184:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b188:	4e0c      	ldr	r6, [pc, #48]	; (800b1bc <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b18a:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800b18c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b18e:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b190:	f7fd fd0e 	bl	8008bb0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b198:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800b19a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b19c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800b19e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1a2:	695a      	ldr	r2, [r3, #20]
 800b1a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b1a8:	615a      	str	r2, [r3, #20]
}
 800b1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800b1ac:	2001      	movs	r0, #1
}
 800b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b1b0:	2002      	movs	r0, #2
}
 800b1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1b4:	0800b261 	.word	0x0800b261
 800b1b8:	0800b28d 	.word	0x0800b28d
 800b1bc:	0800b29d 	.word	0x0800b29d

0800b1c0 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	d13f      	bne.n	800b248 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	d03b      	beq.n	800b244 <HAL_UART_Receive_DMA+0x84>
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	d039      	beq.n	800b244 <HAL_UART_Receive_DMA+0x84>
{
 800b1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800b1d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	2b01      	cmp	r3, #1
{
 800b1da:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800b1dc:	d036      	beq.n	800b24c <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1de:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b1e0:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1e4:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800b1e8:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1ea:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1ec:	4f19      	ldr	r7, [pc, #100]	; (800b254 <HAL_UART_Receive_DMA+0x94>)
 800b1ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1f0:	4e19      	ldr	r6, [pc, #100]	; (800b258 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1f2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800b1f4:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f8:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1fa:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1fc:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b200:	460a      	mov	r2, r1
 800b202:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b204:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b208:	4e14      	ldr	r6, [pc, #80]	; (800b25c <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b20a:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800b20c:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b20e:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b210:	f7fd fcce 	bl	8008bb0 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800b214:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	9501      	str	r5, [sp, #4]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	9201      	str	r2, [sp, #4]
 800b21e:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800b220:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b224:	9201      	str	r2, [sp, #4]
 800b226:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b22e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	f042 0201 	orr.w	r2, r2, #1
 800b236:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b238:	695a      	ldr	r2, [r3, #20]
 800b23a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b23e:	615a      	str	r2, [r3, #20]
}
 800b240:	b003      	add	sp, #12
 800b242:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800b244:	2001      	movs	r0, #1
}
 800b246:	4770      	bx	lr
    return HAL_BUSY;
 800b248:	2002      	movs	r0, #2
 800b24a:	4770      	bx	lr
 800b24c:	2002      	movs	r0, #2
}
 800b24e:	b003      	add	sp, #12
 800b250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b252:	bf00      	nop
 800b254:	0800b349 	.word	0x0800b349
 800b258:	0800b32d 	.word	0x0800b32d
 800b25c:	0800b29d 	.word	0x0800b29d

0800b260 <UART_DMATransmitCplt>:
{
 800b260:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b262:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b264:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f013 0320 	ands.w	r3, r3, #32
 800b26c:	d10a      	bne.n	800b284 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b26e:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800b270:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b272:	6953      	ldr	r3, [r2, #20]
 800b274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b278:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b27a:	68d3      	ldr	r3, [r2, #12]
 800b27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b280:	60d3      	str	r3, [r2, #12]
}
 800b282:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b284:	f7fc fbac 	bl	80079e0 <HAL_UART_TxCpltCallback>
}
 800b288:	bd08      	pop	{r3, pc}
 800b28a:	bf00      	nop

0800b28c <UART_DMATxHalfCplt>:
{
 800b28c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800b28e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b290:	f7fc fb92 	bl	80079b8 <HAL_UART_TxHalfCpltCallback>
}
 800b294:	bd08      	pop	{r3, pc}
 800b296:	bf00      	nop

0800b298 <HAL_UART_RxHalfCpltCallback>:
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop

0800b29c <UART_DMAError>:
{
 800b29c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b29e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b2a0:	6803      	ldr	r3, [r0, #0]
 800b2a2:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b2a4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800b2a8:	2a21      	cmp	r2, #33	; 0x21
 800b2aa:	d00b      	beq.n	800b2c4 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ac:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b2ae:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b2b2:	2a22      	cmp	r2, #34	; 0x22
 800b2b4:	d016      	beq.n	800b2e4 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b2b8:	f043 0310 	orr.w	r3, r3, #16
 800b2bc:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800b2be:	f7fc fb71 	bl	80079a4 <HAL_UART_ErrorCallback>
}
 800b2c2:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b2c4:	0609      	lsls	r1, r1, #24
 800b2c6:	d5f1      	bpl.n	800b2ac <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800b2c8:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800b2ca:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800b2cc:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b2d4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b2d6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2da:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b2dc:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b2e0:	2a22      	cmp	r2, #34	; 0x22
 800b2e2:	d1e8      	bne.n	800b2b6 <UART_DMAError+0x1a>
 800b2e4:	064a      	lsls	r2, r1, #25
 800b2e6:	d5e6      	bpl.n	800b2b6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f4:	695a      	ldr	r2, [r3, #20]
 800b2f6:	f022 0201 	bic.w	r2, r2, #1
 800b2fa:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b2fe:	2a01      	cmp	r2, #1
 800b300:	d103      	bne.n	800b30a <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b302:	68da      	ldr	r2, [r3, #12]
 800b304:	f022 0210 	bic.w	r2, r2, #16
 800b308:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800b30a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b30c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b30e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b312:	6303      	str	r3, [r0, #48]	; 0x30
}
 800b314:	e7cf      	b.n	800b2b6 <UART_DMAError+0x1a>
 800b316:	bf00      	nop

0800b318 <UART_DMAAbortOnError>:
{
 800b318:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800b31a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b31c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800b31e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b320:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800b322:	f7fc fb3f 	bl	80079a4 <HAL_UART_ErrorCallback>
}
 800b326:	bd08      	pop	{r3, pc}

0800b328 <HAL_UARTEx_RxEventCallback>:
}
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b32c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800b32e:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b330:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b332:	2b01      	cmp	r3, #1
 800b334:	d002      	beq.n	800b33c <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800b336:	f7ff ffaf 	bl	800b298 <HAL_UART_RxHalfCpltCallback>
}
 800b33a:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b33c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b33e:	0849      	lsrs	r1, r1, #1
 800b340:	f7ff fff2 	bl	800b328 <HAL_UARTEx_RxEventCallback>
}
 800b344:	bd08      	pop	{r3, pc}
 800b346:	bf00      	nop

0800b348 <UART_DMAReceiveCplt>:
{
 800b348:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b34a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b34c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f013 0320 	ands.w	r3, r3, #32
 800b354:	d113      	bne.n	800b37e <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800b356:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b358:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800b35a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b35c:	68d3      	ldr	r3, [r2, #12]
 800b35e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b362:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b364:	6953      	ldr	r3, [r2, #20]
 800b366:	f023 0301 	bic.w	r3, r3, #1
 800b36a:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b36c:	6953      	ldr	r3, [r2, #20]
 800b36e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b372:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800b374:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b378:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d009      	beq.n	800b392 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b37e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b380:	2b01      	cmp	r3, #1
 800b382:	d002      	beq.n	800b38a <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800b384:	f7fc f9f2 	bl	800776c <HAL_UART_RxCpltCallback>
}
 800b388:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b38a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b38c:	f7ff ffcc 	bl	800b328 <HAL_UARTEx_RxEventCallback>
}
 800b390:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b392:	68d3      	ldr	r3, [r2, #12]
 800b394:	f023 0310 	bic.w	r3, r3, #16
 800b398:	60d3      	str	r3, [r2, #12]
 800b39a:	e7f0      	b.n	800b37e <UART_DMAReceiveCplt+0x36>

0800b39c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b39c:	6883      	ldr	r3, [r0, #8]
 800b39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a2:	d03b      	beq.n	800b41c <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b3a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d030      	beq.n	800b40c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b3aa:	6803      	ldr	r3, [r0, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800b3b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800b3ba:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b3c2:	bb53      	cbnz	r3, 800b41a <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800b3c4:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3c8:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b3ca:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3cc:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b3ce:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3d0:	f021 0120 	bic.w	r1, r1, #32
 800b3d4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3d6:	68d1      	ldr	r1, [r2, #12]
 800b3d8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b3dc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3de:	6951      	ldr	r1, [r2, #20]
 800b3e0:	f021 0101 	bic.w	r1, r1, #1
 800b3e4:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800b3e6:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b3ec:	2901      	cmp	r1, #1
 800b3ee:	d120      	bne.n	800b432 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f0:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3f2:	68d1      	ldr	r1, [r2, #12]
 800b3f4:	f021 0110 	bic.w	r1, r1, #16
 800b3f8:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b3fa:	6811      	ldr	r1, [r2, #0]
 800b3fc:	06c9      	lsls	r1, r1, #27
 800b3fe:	d422      	bmi.n	800b446 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b400:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b402:	f7ff ff91 	bl	800b328 <HAL_UARTEx_RxEventCallback>
}
 800b406:	b003      	add	sp, #12
 800b408:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b40c:	6903      	ldr	r3, [r0, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1cb      	bne.n	800b3aa <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b412:	6803      	ldr	r3, [r0, #0]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	7013      	strb	r3, [r2, #0]
 800b418:	e7cc      	b.n	800b3b4 <UART_Receive_IT.part.0.isra.0+0x18>
 800b41a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b41c:	6903      	ldr	r3, [r0, #16]
 800b41e:	b96b      	cbnz	r3, 800b43c <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b420:	6802      	ldr	r2, [r0, #0]
 800b422:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b424:	6852      	ldr	r2, [r2, #4]
 800b426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b42a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800b42e:	6283      	str	r3, [r0, #40]	; 0x28
 800b430:	e7c3      	b.n	800b3ba <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800b432:	f7fc f99b 	bl	800776c <HAL_UART_RxCpltCallback>
}
 800b436:	b003      	add	sp, #12
 800b438:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b43c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b43e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	7013      	strb	r3, [r2, #0]
 800b444:	e7b6      	b.n	800b3b4 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	6813      	ldr	r3, [r2, #0]
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	6853      	ldr	r3, [r2, #4]
 800b44e:	9301      	str	r3, [sp, #4]
 800b450:	9b01      	ldr	r3, [sp, #4]
 800b452:	e7d5      	b.n	800b400 <UART_Receive_IT.part.0.isra.0+0x64>

0800b454 <HAL_UART_IRQHandler>:
{
 800b454:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b456:	6803      	ldr	r3, [r0, #0]
{
 800b458:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b45a:	681a      	ldr	r2, [r3, #0]
{
 800b45c:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800b45e:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b462:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b464:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800b466:	d14e      	bne.n	800b506 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b468:	0695      	lsls	r5, r2, #26
 800b46a:	d502      	bpl.n	800b472 <HAL_UART_IRQHandler+0x1e>
 800b46c:	068d      	lsls	r5, r1, #26
 800b46e:	f100 8090 	bmi.w	800b592 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b472:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b474:	2801      	cmp	r0, #1
 800b476:	d00b      	beq.n	800b490 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b478:	0610      	lsls	r0, r2, #24
 800b47a:	d502      	bpl.n	800b482 <HAL_UART_IRQHandler+0x2e>
 800b47c:	060d      	lsls	r5, r1, #24
 800b47e:	f100 8092 	bmi.w	800b5a6 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b482:	0650      	lsls	r0, r2, #25
 800b484:	d502      	bpl.n	800b48c <HAL_UART_IRQHandler+0x38>
 800b486:	064a      	lsls	r2, r1, #25
 800b488:	f100 80ab 	bmi.w	800b5e2 <HAL_UART_IRQHandler+0x18e>
}
 800b48c:	b003      	add	sp, #12
 800b48e:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b490:	06d0      	lsls	r0, r2, #27
 800b492:	d5f1      	bpl.n	800b478 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b494:	06cd      	lsls	r5, r1, #27
 800b496:	d5ef      	bpl.n	800b478 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b498:	2100      	movs	r1, #0
 800b49a:	9101      	str	r1, [sp, #4]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	9201      	str	r2, [sp, #4]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	9201      	str	r2, [sp, #4]
 800b4a4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a6:	695a      	ldr	r2, [r3, #20]
 800b4a8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800b4ac:	f000 80d2 	beq.w	800b654 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b4b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b4b2:	6802      	ldr	r2, [r0, #0]
 800b4b4:	6852      	ldr	r2, [r2, #4]
 800b4b6:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	d0e7      	beq.n	800b48c <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b4bc:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b4be:	4295      	cmp	r5, r2
 800b4c0:	d9e4      	bls.n	800b48c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800b4c2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4c4:	6982      	ldr	r2, [r0, #24]
 800b4c6:	2a20      	cmp	r2, #32
 800b4c8:	d016      	beq.n	800b4f8 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4d0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d2:	695a      	ldr	r2, [r3, #20]
 800b4d4:	f022 0201 	bic.w	r2, r2, #1
 800b4d8:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	695a      	ldr	r2, [r3, #20]
 800b4dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4e0:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e8:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ea:	68da      	ldr	r2, [r3, #12]
 800b4ec:	f022 0210 	bic.w	r2, r2, #16
 800b4f0:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4f2:	f7fd fba7 	bl	8008c44 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4f6:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b4f8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	1a69      	subs	r1, r5, r1
 800b4fe:	b289      	uxth	r1, r1
 800b500:	f7ff ff12 	bl	800b328 <HAL_UARTEx_RxEventCallback>
 800b504:	e7c2      	b.n	800b48c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b506:	f005 0501 	and.w	r5, r5, #1
 800b50a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800b50e:	4328      	orrs	r0, r5
 800b510:	d0af      	beq.n	800b472 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b512:	07d0      	lsls	r0, r2, #31
 800b514:	d505      	bpl.n	800b522 <HAL_UART_IRQHandler+0xce>
 800b516:	05c8      	lsls	r0, r1, #23
 800b518:	d503      	bpl.n	800b522 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b51a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b51c:	f040 0001 	orr.w	r0, r0, #1
 800b520:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b522:	0750      	lsls	r0, r2, #29
 800b524:	d530      	bpl.n	800b588 <HAL_UART_IRQHandler+0x134>
 800b526:	b14d      	cbz	r5, 800b53c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b528:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b52a:	f040 0002 	orr.w	r0, r0, #2
 800b52e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b530:	0790      	lsls	r0, r2, #30
 800b532:	d503      	bpl.n	800b53c <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b534:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b536:	f040 0004 	orr.w	r0, r0, #4
 800b53a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b53c:	0710      	lsls	r0, r2, #28
 800b53e:	d507      	bpl.n	800b550 <HAL_UART_IRQHandler+0xfc>
 800b540:	f001 0020 	and.w	r0, r1, #32
 800b544:	4328      	orrs	r0, r5
 800b546:	d003      	beq.n	800b550 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b548:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b54a:	f040 0008 	orr.w	r0, r0, #8
 800b54e:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b550:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b552:	2800      	cmp	r0, #0
 800b554:	d09a      	beq.n	800b48c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b556:	0690      	lsls	r0, r2, #26
 800b558:	d509      	bpl.n	800b56e <HAL_UART_IRQHandler+0x11a>
 800b55a:	068a      	lsls	r2, r1, #26
 800b55c:	d507      	bpl.n	800b56e <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b55e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800b562:	2a22      	cmp	r2, #34	; 0x22
 800b564:	d103      	bne.n	800b56e <HAL_UART_IRQHandler+0x11a>
 800b566:	4620      	mov	r0, r4
 800b568:	f7ff ff18 	bl	800b39c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b570:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b572:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b576:	f005 0508 	and.w	r5, r5, #8
 800b57a:	4315      	orrs	r5, r2
 800b57c:	d13c      	bne.n	800b5f8 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800b57e:	4620      	mov	r0, r4
 800b580:	f7fc fa10 	bl	80079a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b584:	6425      	str	r5, [r4, #64]	; 0x40
 800b586:	e781      	b.n	800b48c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b588:	0790      	lsls	r0, r2, #30
 800b58a:	d5d7      	bpl.n	800b53c <HAL_UART_IRQHandler+0xe8>
 800b58c:	2d00      	cmp	r5, #0
 800b58e:	d1d1      	bne.n	800b534 <HAL_UART_IRQHandler+0xe0>
 800b590:	e7d4      	b.n	800b53c <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b592:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b596:	2b22      	cmp	r3, #34	; 0x22
 800b598:	f47f af78 	bne.w	800b48c <HAL_UART_IRQHandler+0x38>
}
 800b59c:	b003      	add	sp, #12
 800b59e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5a2:	f7ff befb 	b.w	800b39c <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5a6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b5aa:	2a21      	cmp	r2, #33	; 0x21
 800b5ac:	f47f af6e 	bne.w	800b48c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5b0:	68a2      	ldr	r2, [r4, #8]
 800b5b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b5b6:	d06e      	beq.n	800b696 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5b8:	6a22      	ldr	r2, [r4, #32]
 800b5ba:	1c51      	adds	r1, r2, #1
 800b5bc:	6221      	str	r1, [r4, #32]
 800b5be:	7812      	ldrb	r2, [r2, #0]
 800b5c0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800b5c2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800b5c4:	3a01      	subs	r2, #1
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	84e2      	strh	r2, [r4, #38]	; 0x26
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	f47f af5e 	bne.w	800b48c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5d0:	68da      	ldr	r2, [r3, #12]
 800b5d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5d6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5d8:	68da      	ldr	r2, [r3, #12]
 800b5da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5de:	60da      	str	r2, [r3, #12]
 800b5e0:	e754      	b.n	800b48c <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800b5e2:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5e4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800b5e6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ec:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b5ee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800b5f2:	f7fc f9f5 	bl	80079e0 <HAL_UART_TxCpltCallback>
    return;
 800b5f6:	e749      	b.n	800b48c <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5f8:	68da      	ldr	r2, [r3, #12]
 800b5fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b5fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b600:	695a      	ldr	r2, [r3, #20]
 800b602:	f022 0201 	bic.w	r2, r2, #1
 800b606:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b608:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b60a:	2a01      	cmp	r2, #1
 800b60c:	d103      	bne.n	800b616 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	f022 0210 	bic.w	r2, r2, #16
 800b614:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b616:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b618:	2120      	movs	r1, #32
 800b61a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b61e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b620:	695a      	ldr	r2, [r3, #20]
 800b622:	0655      	lsls	r5, r2, #25
 800b624:	d512      	bpl.n	800b64c <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b626:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b628:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b62e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b630:	b160      	cbz	r0, 800b64c <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b632:	4b1e      	ldr	r3, [pc, #120]	; (800b6ac <HAL_UART_IRQHandler+0x258>)
 800b634:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b636:	f7fd fb2d 	bl	8008c94 <HAL_DMA_Abort_IT>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f43f af26 	beq.w	800b48c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b640:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b642:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800b644:	b003      	add	sp, #12
 800b646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b64a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800b64c:	4620      	mov	r0, r4
 800b64e:	f7fc f9a9 	bl	80079a4 <HAL_UART_ErrorCallback>
 800b652:	e71b      	b.n	800b48c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b654:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800b656:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b658:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800b65a:	b289      	uxth	r1, r1
 800b65c:	2900      	cmp	r1, #0
 800b65e:	f43f af15 	beq.w	800b48c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b662:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b664:	1a08      	subs	r0, r1, r0
 800b666:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800b668:	2900      	cmp	r1, #0
 800b66a:	f43f af0f 	beq.w	800b48c <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800b66e:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b670:	68d8      	ldr	r0, [r3, #12]
 800b672:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800b676:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b678:	6958      	ldr	r0, [r3, #20]
 800b67a:	f020 0001 	bic.w	r0, r0, #1
 800b67e:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800b680:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b684:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b686:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b688:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b68a:	f022 0210 	bic.w	r2, r2, #16
 800b68e:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b690:	f7ff fe4a 	bl	800b328 <HAL_UARTEx_RxEventCallback>
 800b694:	e6fa      	b.n	800b48c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b696:	6922      	ldr	r2, [r4, #16]
 800b698:	2a00      	cmp	r2, #0
 800b69a:	d18d      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b69c:	6a22      	ldr	r2, [r4, #32]
 800b69e:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b6a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b6a6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b6a8:	6222      	str	r2, [r4, #32]
 800b6aa:	e78a      	b.n	800b5c2 <HAL_UART_IRQHandler+0x16e>
 800b6ac:	0800b319 	.word	0x0800b319

0800b6b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b6b0:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b6b2:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b6b4:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800b6b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800b6bc:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800b6be:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b6c2:	4770      	bx	lr

0800b6c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b6c4:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b6c6:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800b6ca:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800b6ce:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b6d0:	400a      	ands	r2, r1
 800b6d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800b6d6:	4770      	bx	lr

0800b6d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b6d8:	b084      	sub	sp, #16
 800b6da:	f10d 0c04 	add.w	ip, sp, #4
 800b6de:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800b6e2:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b6e4:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b6e6:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800b6e8:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b6ea:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b6ee:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800b6f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800b6f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800b6f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop

0800b700 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b700:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b702:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800b704:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b708:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800b70c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b70e:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800b712:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b716:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800b71a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800b71e:	f1be 0f03 	cmp.w	lr, #3
 800b722:	f200 815a 	bhi.w	800b9da <USB_ActivateEndpoint+0x2da>
 800b726:	e8df f00e 	tbb	[pc, lr]
 800b72a:	4e52      	.short	0x4e52
 800b72c:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b72e:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800b732:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b734:	f248 0580 	movw	r5, #32896	; 0x8080
 800b738:	ea4c 0c05 	orr.w	ip, ip, r5
 800b73c:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b740:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b744:	4ca6      	ldr	r4, [pc, #664]	; (800b9e0 <USB_ActivateEndpoint+0x2e0>)
 800b746:	fa1f fc8c 	uxth.w	ip, ip
 800b74a:	ea0c 0c04 	and.w	ip, ip, r4
 800b74e:	ea4c 0c02 	orr.w	ip, ip, r2
 800b752:	ea45 050c 	orr.w	r5, r5, ip
 800b756:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800b75a:	7b0d      	ldrb	r5, [r1, #12]
 800b75c:	2d00      	cmp	r5, #0
 800b75e:	d17e      	bne.n	800b85e <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800b760:	784d      	ldrb	r5, [r1, #1]
 800b762:	2d00      	cmp	r5, #0
 800b764:	f000 80dd 	beq.w	800b922 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b768:	88c9      	ldrh	r1, [r1, #6]
 800b76a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b76e:	0849      	lsrs	r1, r1, #1
 800b770:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800b774:	0049      	lsls	r1, r1, #1
 800b776:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b77a:	b2ad      	uxth	r5, r5
 800b77c:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b77e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b782:	064e      	lsls	r6, r1, #25
 800b784:	d509      	bpl.n	800b79a <USB_ActivateEndpoint+0x9a>
 800b786:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b78a:	b289      	uxth	r1, r1
 800b78c:	400c      	ands	r4, r1
 800b78e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800b792:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800b796:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b79a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b79e:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7a2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b7a6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b7aa:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b7ae:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800b7b2:	d04d      	beq.n	800b850 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b7b4:	f081 0120 	eor.w	r1, r1, #32
 800b7b8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b7bc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b7c0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7c6:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b7c8:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800b7cc:	e7b2      	b.n	800b734 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800b7ce:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800b7d0:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800b7d4:	e7ae      	b.n	800b734 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7d6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7da:	044d      	lsls	r5, r1, #17
 800b7dc:	d509      	bpl.n	800b7f2 <USB_ActivateEndpoint+0xf2>
 800b7de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7e2:	b289      	uxth	r1, r1
 800b7e4:	400c      	ands	r4, r1
 800b7e6:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b7ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b7ee:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7f6:	0649      	lsls	r1, r1, #25
 800b7f8:	d50d      	bpl.n	800b816 <USB_ActivateEndpoint+0x116>
 800b7fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7fe:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b802:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b806:	0409      	lsls	r1, r1, #16
 800b808:	0c09      	lsrs	r1, r1, #16
 800b80a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b80e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b812:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b816:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b81a:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b81e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b822:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b826:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b82a:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b82e:	bf18      	it	ne
 800b830:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b834:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b838:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b83c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b840:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b844:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b848:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b84c:	0409      	lsls	r1, r1, #16
 800b84e:	0c09      	lsrs	r1, r1, #16
 800b850:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b854:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b858:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b85e:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b862:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b866:	fa1f fc8c 	uxth.w	ip, ip
 800b86a:	ea0c 0c04 	and.w	ip, ip, r4
 800b86e:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800b872:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800b876:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b87a:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800b87e:	890e      	ldrh	r6, [r1, #8]
 800b880:	fa1f fc8c 	uxth.w	ip, ip
 800b884:	0876      	lsrs	r6, r6, #1
 800b886:	44bc      	add	ip, r7
 800b888:	0076      	lsls	r6, r6, #1
 800b88a:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800b88e:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800b892:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b896:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b89a:	b2ad      	uxth	r5, r5
 800b89c:	443d      	add	r5, r7
 800b89e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b8a2:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800b8a6:	7849      	ldrb	r1, [r1, #1]
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d194      	bne.n	800b7d6 <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b8ac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8b0:	044f      	lsls	r7, r1, #17
 800b8b2:	d509      	bpl.n	800b8c8 <USB_ActivateEndpoint+0x1c8>
 800b8b4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8b8:	b289      	uxth	r1, r1
 800b8ba:	400c      	ands	r4, r1
 800b8bc:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b8c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b8c4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8c8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8cc:	064e      	lsls	r6, r1, #25
 800b8ce:	d50d      	bpl.n	800b8ec <USB_ActivateEndpoint+0x1ec>
 800b8d0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8d4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b8d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b8dc:	0409      	lsls	r1, r1, #16
 800b8de:	0c09      	lsrs	r1, r1, #16
 800b8e0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b8e4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b8e8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8ec:	f248 0480 	movw	r4, #32896	; 0x8080
 800b8f0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b8f4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b8f8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b8fc:	0409      	lsls	r1, r1, #16
 800b8fe:	0c09      	lsrs	r1, r1, #16
 800b900:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b904:	4321      	orrs	r1, r4
 800b906:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b90a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b90e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b912:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b916:	0409      	lsls	r1, r1, #16
 800b918:	0c09      	lsrs	r1, r1, #16
 800b91a:	4321      	orrs	r1, r4
 800b91c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b920:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b922:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800b926:	88cd      	ldrh	r5, [r1, #6]
 800b928:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b92c:	b2a4      	uxth	r4, r4
 800b92e:	086d      	lsrs	r5, r5, #1
 800b930:	006d      	lsls	r5, r5, #1
 800b932:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b934:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b936:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b93a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800b93e:	b289      	uxth	r1, r1
 800b940:	4439      	add	r1, r7
 800b942:	b366      	cbz	r6, 800b99e <USB_ActivateEndpoint+0x29e>
 800b944:	2e3e      	cmp	r6, #62	; 0x3e
 800b946:	d83c      	bhi.n	800b9c2 <USB_ActivateEndpoint+0x2c2>
 800b948:	0874      	lsrs	r4, r6, #1
 800b94a:	07f5      	lsls	r5, r6, #31
 800b94c:	bf48      	it	mi
 800b94e:	3401      	addmi	r4, #1
 800b950:	02a4      	lsls	r4, r4, #10
 800b952:	b2a4      	uxth	r4, r4
 800b954:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b958:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b95c:	0449      	lsls	r1, r1, #17
 800b95e:	d50d      	bpl.n	800b97c <USB_ActivateEndpoint+0x27c>
 800b960:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b964:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b968:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b96c:	0409      	lsls	r1, r1, #16
 800b96e:	0c09      	lsrs	r1, r1, #16
 800b970:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800b974:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b978:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b97c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b980:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b984:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b988:	0409      	lsls	r1, r1, #16
 800b98a:	0c09      	lsrs	r1, r1, #16
 800b98c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b990:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b994:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b998:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b99e:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b9a2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b9a6:	0424      	lsls	r4, r4, #16
 800b9a8:	0c24      	lsrs	r4, r4, #16
 800b9aa:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b9ae:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b9b2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b9b6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b9ba:	b2a4      	uxth	r4, r4
 800b9bc:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b9c0:	e7ca      	b.n	800b958 <USB_ActivateEndpoint+0x258>
 800b9c2:	0975      	lsrs	r5, r6, #5
 800b9c4:	06f4      	lsls	r4, r6, #27
 800b9c6:	4c07      	ldr	r4, [pc, #28]	; (800b9e4 <USB_ActivateEndpoint+0x2e4>)
 800b9c8:	bf08      	it	eq
 800b9ca:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800b9ce:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b9d2:	b2a4      	uxth	r4, r4
 800b9d4:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b9d8:	e7be      	b.n	800b958 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800b9da:	2001      	movs	r0, #1
 800b9dc:	e6aa      	b.n	800b734 <USB_ActivateEndpoint+0x34>
 800b9de:	bf00      	nop
 800b9e0:	ffff8f8f 	.word	0xffff8f8f
 800b9e4:	ffff8000 	.word	0xffff8000

0800b9e8 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800b9e8:	7b0b      	ldrb	r3, [r1, #12]
 800b9ea:	b9cb      	cbnz	r3, 800ba20 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800b9ec:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9ee:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 80b1 	beq.w	800bb58 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9fa:	0659      	lsls	r1, r3, #25
 800b9fc:	f100 80c5 	bmi.w	800bb8a <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	0c1b      	lsrs	r3, r3, #16
 800ba10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	4770      	bx	lr
    if (ep->is_in == 0U)
 800ba20:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba22:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d14b      	bne.n	800bac0 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba2c:	0459      	lsls	r1, r3, #17
 800ba2e:	d50d      	bpl.n	800ba4c <USB_DeactivateEndpoint+0x64>
 800ba30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3c:	041b      	lsls	r3, r3, #16
 800ba3e:	0c1b      	lsrs	r3, r3, #16
 800ba40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba50:	065b      	lsls	r3, r3, #25
 800ba52:	d50d      	bpl.n	800ba70 <USB_DeactivateEndpoint+0x88>
 800ba54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba60:	041b      	lsls	r3, r3, #16
 800ba62:	0c1b      	lsrs	r3, r3, #16
 800ba64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba70:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800ba74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba80:	041b      	lsls	r3, r3, #16
 800ba82:	0c1b      	lsrs	r3, r3, #16
 800ba84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba9c:	041b      	lsls	r3, r3, #16
 800ba9e:	0c1b      	lsrs	r3, r3, #16
 800baa0:	430b      	orrs	r3, r1
 800baa2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800baa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800baaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bab2:	041b      	lsls	r3, r3, #16
 800bab4:	0c1b      	lsrs	r3, r3, #16
 800bab6:	430b      	orrs	r3, r1
 800bab8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800babc:	2000      	movs	r0, #0
 800babe:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bac0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bac4:	0459      	lsls	r1, r3, #17
 800bac6:	d50d      	bpl.n	800bae4 <USB_DeactivateEndpoint+0xfc>
 800bac8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bacc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bad4:	041b      	lsls	r3, r3, #16
 800bad6:	0c1b      	lsrs	r3, r3, #16
 800bad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800badc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bae4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bae8:	065b      	lsls	r3, r3, #25
 800baea:	d50d      	bpl.n	800bb08 <USB_DeactivateEndpoint+0x120>
 800baec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800baf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800baf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf8:	041b      	lsls	r3, r3, #16
 800bafa:	0c1b      	lsrs	r3, r3, #16
 800bafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb08:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800bb0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb18:	041b      	lsls	r3, r3, #16
 800bb1a:	0c1b      	lsrs	r3, r3, #16
 800bb1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb34:	041b      	lsls	r3, r3, #16
 800bb36:	0c1b      	lsrs	r3, r3, #16
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb4a:	041b      	lsls	r3, r3, #16
 800bb4c:	0c1b      	lsrs	r3, r3, #16
 800bb4e:	430b      	orrs	r3, r1
 800bb50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800bb54:	2000      	movs	r0, #0
 800bb56:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb5c:	045b      	lsls	r3, r3, #17
 800bb5e:	d50d      	bpl.n	800bb7c <USB_DeactivateEndpoint+0x194>
 800bb60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb6c:	041b      	lsls	r3, r3, #16
 800bb6e:	0c1b      	lsrs	r3, r3, #16
 800bb70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb88:	e740      	b.n	800ba0c <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bb8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb96:	041b      	lsls	r3, r3, #16
 800bb98:	0c1b      	lsrs	r3, r3, #16
 800bb9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bba2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800bba6:	e72b      	b.n	800ba00 <USB_DeactivateEndpoint+0x18>

0800bba8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbac:	784b      	ldrb	r3, [r1, #1]
{
 800bbae:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d06b      	beq.n	800bc8c <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bbb4:	7b08      	ldrb	r0, [r1, #12]
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d037      	beq.n	800bc2a <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bbba:	78c8      	ldrb	r0, [r1, #3]
 800bbbc:	2802      	cmp	r0, #2
 800bbbe:	f000 812d 	beq.w	800be1c <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bbc2:	2801      	cmp	r0, #1
 800bbc4:	f040 810a 	bne.w	800bddc <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bbc8:	6988      	ldr	r0, [r1, #24]
 800bbca:	690c      	ldr	r4, [r1, #16]
 800bbcc:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800bbce:	bf94      	ite	ls
 800bbd0:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800bbd2:	1b05      	subhi	r5, r0, r4
 800bbd4:	618d      	str	r5, [r1, #24]
 800bbd6:	bf88      	it	hi
 800bbd8:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 811b 	bne.w	800be16 <USB_EPStartXfer+0x26e>
 800bbe0:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bbe4:	780b      	ldrb	r3, [r1, #0]
 800bbe6:	b2a4      	uxth	r4, r4
 800bbe8:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800bbec:	011b      	lsls	r3, r3, #4
 800bbee:	442c      	add	r4, r5
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	f000 8251 	beq.w	800c098 <USB_EPStartXfer+0x4f0>
 800bbf6:	283e      	cmp	r0, #62	; 0x3e
 800bbf8:	f200 80f3 	bhi.w	800bde2 <USB_EPStartXfer+0x23a>
 800bbfc:	0845      	lsrs	r5, r0, #1
 800bbfe:	462e      	mov	r6, r5
 800bc00:	f010 0001 	ands.w	r0, r0, #1
 800bc04:	bf18      	it	ne
 800bc06:	1c6e      	addne	r6, r5, #1
 800bc08:	02b6      	lsls	r6, r6, #10
 800bc0a:	b2b6      	uxth	r6, r6
 800bc0c:	52e6      	strh	r6, [r4, r3]
 800bc0e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bc12:	b2a6      	uxth	r6, r4
 800bc14:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bc18:	4434      	add	r4, r6
 800bc1a:	b100      	cbz	r0, 800bc1e <USB_EPStartXfer+0x76>
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	02ad      	lsls	r5, r5, #10
 800bc20:	b2a8      	uxth	r0, r5
 800bc22:	52e0      	strh	r0, [r4, r3]
 800bc24:	f891 c000 	ldrb.w	ip, [r1]
 800bc28:	e01d      	b.n	800bc66 <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800bc2a:	698c      	ldr	r4, [r1, #24]
 800bc2c:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bc2e:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800bc30:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800bc32:	bf84      	itt	hi
 800bc34:	1ae0      	subhi	r0, r4, r3
 800bc36:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bc38:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bc3c:	6188      	str	r0, [r1, #24]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bc44:	012d      	lsls	r5, r5, #4
 800bc46:	4403      	add	r3, r0
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	f000 80b7 	beq.w	800bdbc <USB_EPStartXfer+0x214>
 800bc4e:	2c3e      	cmp	r4, #62	; 0x3e
 800bc50:	f200 8129 	bhi.w	800bea6 <USB_EPStartXfer+0x2fe>
 800bc54:	0860      	lsrs	r0, r4, #1
 800bc56:	07e4      	lsls	r4, r4, #31
 800bc58:	bf48      	it	mi
 800bc5a:	3001      	addmi	r0, #1
 800bc5c:	0280      	lsls	r0, r0, #10
 800bc5e:	b280      	uxth	r0, r0
 800bc60:	52e8      	strh	r0, [r5, r3]
 800bc62:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc66:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800bc6a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc74:	041b      	lsls	r3, r3, #16
 800bc76:	0c1b      	lsrs	r3, r3, #16
 800bc78:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bc7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc84:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800bc8c:	690d      	ldr	r5, [r1, #16]
 800bc8e:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800bc90:	7b0b      	ldrb	r3, [r1, #12]
 800bc92:	42a8      	cmp	r0, r5
 800bc94:	bf28      	it	cs
 800bc96:	4628      	movcs	r0, r5
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d05d      	beq.n	800bd58 <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800bc9c:	78cb      	ldrb	r3, [r1, #3]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	f000 810e 	beq.w	800bec0 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bca4:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800bca8:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bcaa:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800bcae:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bcb0:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800bcb4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800bcb8:	0424      	lsls	r4, r4, #16
 800bcba:	0c24      	lsrs	r4, r4, #16
 800bcbc:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800bcc0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800bcc4:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bcc8:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800bccc:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bcce:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bcd2:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bcd6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800bcda:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bcdc:	f000 814a 	beq.w	800bf74 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bce0:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bce4:	4434      	add	r4, r6
 800bce6:	b286      	uxth	r6, r0
 800bce8:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcec:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bcee:	3601      	adds	r6, #1
 800bcf0:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800bcf4:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcf6:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcfa:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800bcfe:	d008      	beq.n	800bd12 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800bd00:	46cc      	mov	ip, r9
 800bd02:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800bd06:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800bd0a:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800bd0e:	42a6      	cmp	r6, r4
 800bd10:	d1f9      	bne.n	800bd06 <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800bd12:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bd16:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bd18:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bd1a:	f0c0 81b7 	bcc.w	800c08c <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800bd1e:	2500      	movs	r5, #0
 800bd20:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d036      	beq.n	800bd94 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bd26:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bd2a:	b285      	uxth	r5, r0
 800bd2c:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bd30:	4428      	add	r0, r5
 800bd32:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd34:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bd36:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd3a:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd3c:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bd3e:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd40:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bd44:	d026      	beq.n	800bd94 <USB_EPStartXfer+0x1ec>
 800bd46:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800bd4a:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bd4e:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800bd52:	4285      	cmp	r5, r0
 800bd54:	d1f9      	bne.n	800bd4a <USB_EPStartXfer+0x1a2>
 800bd56:	e01d      	b.n	800bd94 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bd58:	b284      	uxth	r4, r0
 800bd5a:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd5c:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd5e:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd62:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bd66:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd6a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800bd6e:	bf18      	it	ne
 800bd70:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800bd74:	d005      	beq.n	800bd82 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800bd76:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800bd7a:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800bd7c:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800bd80:	d1f9      	bne.n	800bd76 <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bd82:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bd86:	7808      	ldrb	r0, [r1, #0]
 800bd88:	b29d      	uxth	r5, r3
 800bd8a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bd8e:	0100      	lsls	r0, r0, #4
 800bd90:	442b      	add	r3, r5
 800bd92:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd94:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800bd96:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd98:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bd9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bda0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda4:	041b      	lsls	r3, r3, #16
 800bda6:	0c1b      	lsrs	r3, r3, #16
 800bda8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bdac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bdbc:	5ae8      	ldrh	r0, [r5, r3]
 800bdbe:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bdc2:	0400      	lsls	r0, r0, #16
 800bdc4:	0c00      	lsrs	r0, r0, #16
 800bdc6:	52e8      	strh	r0, [r5, r3]
 800bdc8:	5ae8      	ldrh	r0, [r5, r3]
 800bdca:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800bdce:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800bdd2:	b280      	uxth	r0, r0
 800bdd4:	52e8      	strh	r0, [r5, r3]
 800bdd6:	f891 c000 	ldrb.w	ip, [r1]
 800bdda:	e744      	b.n	800bc66 <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800bddc:	2001      	movs	r0, #1
}
 800bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bde2:	0945      	lsrs	r5, r0, #5
 800bde4:	462f      	mov	r7, r5
 800bde6:	f010 001f 	ands.w	r0, r0, #31
 800bdea:	bf08      	it	eq
 800bdec:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800bdf0:	462e      	mov	r6, r5
 800bdf2:	4dbb      	ldr	r5, [pc, #748]	; (800c0e0 <USB_EPStartXfer+0x538>)
 800bdf4:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800bdf8:	b2ad      	uxth	r5, r5
 800bdfa:	52e5      	strh	r5, [r4, r3]
 800bdfc:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800be00:	b2a5      	uxth	r5, r4
 800be02:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800be06:	442c      	add	r4, r5
 800be08:	b900      	cbnz	r0, 800be0c <USB_EPStartXfer+0x264>
 800be0a:	3e01      	subs	r6, #1
 800be0c:	48b4      	ldr	r0, [pc, #720]	; (800c0e0 <USB_EPStartXfer+0x538>)
 800be0e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800be12:	b280      	uxth	r0, r0
 800be14:	52e0      	strh	r0, [r4, r3]
 800be16:	f891 c000 	ldrb.w	ip, [r1]
 800be1a:	e724      	b.n	800bc66 <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800be1c:	bb13      	cbnz	r3, 800be64 <USB_EPStartXfer+0x2bc>
 800be1e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800be22:	780b      	ldrb	r3, [r1, #0]
 800be24:	b284      	uxth	r4, r0
 800be26:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800be2a:	4420      	add	r0, r4
 800be2c:	690c      	ldr	r4, [r1, #16]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	2c00      	cmp	r4, #0
 800be32:	f000 8109 	beq.w	800c048 <USB_EPStartXfer+0x4a0>
 800be36:	2c3e      	cmp	r4, #62	; 0x3e
 800be38:	f200 818e 	bhi.w	800c158 <USB_EPStartXfer+0x5b0>
 800be3c:	0865      	lsrs	r5, r4, #1
 800be3e:	462e      	mov	r6, r5
 800be40:	f014 0401 	ands.w	r4, r4, #1
 800be44:	bf18      	it	ne
 800be46:	1c6e      	addne	r6, r5, #1
 800be48:	02b6      	lsls	r6, r6, #10
 800be4a:	b2b6      	uxth	r6, r6
 800be4c:	52c6      	strh	r6, [r0, r3]
 800be4e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800be52:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800be56:	b280      	uxth	r0, r0
 800be58:	4406      	add	r6, r0
 800be5a:	b104      	cbz	r4, 800be5e <USB_EPStartXfer+0x2b6>
 800be5c:	3501      	adds	r5, #1
 800be5e:	02ad      	lsls	r5, r5, #10
 800be60:	b2a8      	uxth	r0, r5
 800be62:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800be64:	69cb      	ldr	r3, [r1, #28]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0d5      	beq.n	800be16 <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800be6a:	f244 0340 	movw	r3, #16448	; 0x4040
 800be6e:	f891 c000 	ldrb.w	ip, [r1]
 800be72:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800be76:	ea03 0400 	and.w	r4, r3, r0
 800be7a:	4383      	bics	r3, r0
 800be7c:	d002      	beq.n	800be84 <USB_EPStartXfer+0x2dc>
 800be7e:	2c00      	cmp	r4, #0
 800be80:	f47f aef1 	bne.w	800bc66 <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800be84:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800be88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	0c1b      	lsrs	r3, r3, #16
 800be94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be9c:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800bea0:	f891 c000 	ldrb.w	ip, [r1]
 800bea4:	e6df      	b.n	800bc66 <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bea6:	0966      	lsrs	r6, r4, #5
 800bea8:	06e0      	lsls	r0, r4, #27
 800beaa:	488d      	ldr	r0, [pc, #564]	; (800c0e0 <USB_EPStartXfer+0x538>)
 800beac:	bf08      	it	eq
 800beae:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800beb2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800beb6:	b280      	uxth	r0, r0
 800beb8:	52e8      	strh	r0, [r5, r3]
 800beba:	f891 c000 	ldrb.w	ip, [r1]
 800bebe:	e6d2      	b.n	800bc66 <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800bec0:	6a0c      	ldr	r4, [r1, #32]
 800bec2:	42a5      	cmp	r5, r4
 800bec4:	f080 8094 	bcs.w	800bff0 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bec8:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800beca:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800becc:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bed0:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bedc:	041b      	lsls	r3, r3, #16
 800bede:	0c1b      	lsrs	r3, r3, #16
 800bee0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee8:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800beec:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800bef0:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bef2:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bef6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800befa:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800befc:	f000 80f2 	beq.w	800c0e4 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf00:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800bf04:	4433      	add	r3, r6
 800bf06:	fa1f fa80 	uxth.w	sl, r0
 800bf0a:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf0e:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf10:	f10a 0801 	add.w	r8, sl, #1
 800bf14:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bf18:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf1c:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf1e:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800bf22:	d008      	beq.n	800bf36 <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800bf24:	46bc      	mov	ip, r7
 800bf26:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800bf2a:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800bf2e:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800bf32:	45b3      	cmp	fp, r6
 800bf34:	d1f9      	bne.n	800bf2a <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800bf36:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800bf38:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800bf3a:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800bf3c:	f080 8127 	bcs.w	800c18e <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800bf40:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf42:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bf46:	620c      	str	r4, [r1, #32]
 800bf48:	b284      	uxth	r4, r0
 800bf4a:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bf4e:	4420      	add	r0, r4
 800bf50:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf54:	8908      	ldrh	r0, [r1, #8]
 800bf56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bf5a:	f1b8 0f00 	cmp.w	r8, #0
 800bf5e:	f43f af19 	beq.w	800bd94 <USB_EPStartXfer+0x1ec>
 800bf62:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800bf66:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800bf6a:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800bf6e:	429c      	cmp	r4, r3
 800bf70:	d1f9      	bne.n	800bf66 <USB_EPStartXfer+0x3be>
 800bf72:	e70f      	b.n	800bd94 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf74:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800bf78:	4434      	add	r4, r6
 800bf7a:	b286      	uxth	r6, r0
 800bf7c:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf80:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf84:	3601      	adds	r6, #1
 800bf86:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bf8a:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf8c:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf90:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800bf94:	d008      	beq.n	800bfa8 <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800bf96:	464c      	mov	r4, r9
 800bf98:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800bf9c:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800bfa0:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800bfa2:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800bfa6:	d1f9      	bne.n	800bf9c <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800bfa8:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bfac:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bfae:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bfb0:	d36f      	bcc.n	800c092 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800bfb2:	2500      	movs	r5, #0
 800bfb4:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f43f aeec 	beq.w	800bd94 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bfbc:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bfc0:	b285      	uxth	r5, r0
 800bfc2:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bfc6:	4428      	add	r0, r5
 800bfc8:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bfca:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bfcc:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bfd0:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bfd2:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bfd4:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bfd6:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bfda:	f43f aedb 	beq.w	800bd94 <USB_EPStartXfer+0x1ec>
 800bfde:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800bfe2:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bfe6:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800bfea:	429f      	cmp	r7, r3
 800bfec:	d1f9      	bne.n	800bfe2 <USB_EPStartXfer+0x43a>
 800bfee:	e6d1      	b.n	800bd94 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bff0:	7808      	ldrb	r0, [r1, #0]
 800bff2:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800bff6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bffe:	041b      	lsls	r3, r3, #16
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c00a:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c00e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800c012:	0100      	lsls	r0, r0, #4
 800c014:	b29d      	uxth	r5, r3
 800c016:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800c01a:	442b      	add	r3, r5
 800c01c:	b2a5      	uxth	r5, r4
 800c01e:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c020:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c022:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c024:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c026:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c02a:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c02c:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c02e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800c032:	f43f aeaf 	beq.w	800bd94 <USB_EPStartXfer+0x1ec>
 800c036:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800c03a:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800c03e:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800c042:	4298      	cmp	r0, r3
 800c044:	d1f9      	bne.n	800c03a <USB_EPStartXfer+0x492>
 800c046:	e6a5      	b.n	800bd94 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c048:	5ac4      	ldrh	r4, [r0, r3]
 800c04a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800c04e:	0424      	lsls	r4, r4, #16
 800c050:	0c24      	lsrs	r4, r4, #16
 800c052:	52c4      	strh	r4, [r0, r3]
 800c054:	5ac5      	ldrh	r5, [r0, r3]
 800c056:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800c05a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800c05e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800c062:	b2ad      	uxth	r5, r5
 800c064:	52c5      	strh	r5, [r0, r3]
 800c066:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c06a:	b285      	uxth	r5, r0
 800c06c:	4620      	mov	r0, r4
 800c06e:	4428      	add	r0, r5
 800c070:	5ac4      	ldrh	r4, [r0, r3]
 800c072:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800c076:	0424      	lsls	r4, r4, #16
 800c078:	0c24      	lsrs	r4, r4, #16
 800c07a:	52c4      	strh	r4, [r0, r3]
 800c07c:	5ac4      	ldrh	r4, [r0, r3]
 800c07e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800c082:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800c086:	b2a4      	uxth	r4, r4
 800c088:	52c4      	strh	r4, [r0, r3]
 800c08a:	e6eb      	b.n	800be64 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800c08c:	1a1d      	subs	r5, r3, r0
 800c08e:	4603      	mov	r3, r0
 800c090:	e646      	b.n	800bd20 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800c092:	1a1d      	subs	r5, r3, r0
 800c094:	4603      	mov	r3, r0
 800c096:	e78d      	b.n	800bfb4 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c098:	5ae0      	ldrh	r0, [r4, r3]
 800c09a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800c09e:	0400      	lsls	r0, r0, #16
 800c0a0:	0c00      	lsrs	r0, r0, #16
 800c0a2:	52e0      	strh	r0, [r4, r3]
 800c0a4:	5ae5      	ldrh	r5, [r4, r3]
 800c0a6:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800c0aa:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800c0ae:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800c0b2:	b2ad      	uxth	r5, r5
 800c0b4:	52e5      	strh	r5, [r4, r3]
 800c0b6:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800c0ba:	b2a4      	uxth	r4, r4
 800c0bc:	4420      	add	r0, r4
 800c0be:	5ac4      	ldrh	r4, [r0, r3]
 800c0c0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800c0c4:	0424      	lsls	r4, r4, #16
 800c0c6:	0c24      	lsrs	r4, r4, #16
 800c0c8:	52c4      	strh	r4, [r0, r3]
 800c0ca:	5ac4      	ldrh	r4, [r0, r3]
 800c0cc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800c0d0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800c0d4:	b2a4      	uxth	r4, r4
 800c0d6:	52c4      	strh	r4, [r0, r3]
 800c0d8:	f891 c000 	ldrb.w	ip, [r1]
 800c0dc:	e5c3      	b.n	800bc66 <USB_EPStartXfer+0xbe>
 800c0de:	bf00      	nop
 800c0e0:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0e4:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800c0e8:	4433      	add	r3, r6
 800c0ea:	fa1f fa80 	uxth.w	sl, r0
 800c0ee:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c0f2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c0f6:	f10a 0801 	add.w	r8, sl, #1
 800c0fa:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c0fe:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c102:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c104:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800c108:	d008      	beq.n	800c11c <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800c10a:	463e      	mov	r6, r7
 800c10c:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800c110:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800c114:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800c116:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800c11a:	d1f9      	bne.n	800c110 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800c11c:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800c11e:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800c120:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800c122:	d23e      	bcs.n	800c1a2 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800c124:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c126:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c12a:	620c      	str	r4, [r1, #32]
 800c12c:	b284      	uxth	r4, r0
 800c12e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800c132:	4420      	add	r0, r4
 800c134:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c138:	8948      	ldrh	r0, [r1, #10]
 800c13a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800c13e:	f1b8 0f00 	cmp.w	r8, #0
 800c142:	f43f ae27 	beq.w	800bd94 <USB_EPStartXfer+0x1ec>
 800c146:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800c14a:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800c14e:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800c152:	429c      	cmp	r4, r3
 800c154:	d1f9      	bne.n	800c14a <USB_EPStartXfer+0x5a2>
 800c156:	e61d      	b.n	800bd94 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c158:	0965      	lsrs	r5, r4, #5
 800c15a:	462f      	mov	r7, r5
 800c15c:	f014 041f 	ands.w	r4, r4, #31
 800c160:	bf08      	it	eq
 800c162:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800c166:	462e      	mov	r6, r5
 800c168:	4d13      	ldr	r5, [pc, #76]	; (800c1b8 <USB_EPStartXfer+0x610>)
 800c16a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800c16e:	b2ad      	uxth	r5, r5
 800c170:	52c5      	strh	r5, [r0, r3]
 800c172:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c176:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800c17a:	b280      	uxth	r0, r0
 800c17c:	4405      	add	r5, r0
 800c17e:	b904      	cbnz	r4, 800c182 <USB_EPStartXfer+0x5da>
 800c180:	3e01      	subs	r6, #1
 800c182:	480d      	ldr	r0, [pc, #52]	; (800c1b8 <USB_EPStartXfer+0x610>)
 800c184:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800c188:	b280      	uxth	r0, r0
 800c18a:	52e8      	strh	r0, [r5, r3]
 800c18c:	e66a      	b.n	800be64 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c18e:	fa1f f884 	uxth.w	r8, r4
 800c192:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c196:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c19a:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800c19e:	2400      	movs	r4, #0
 800c1a0:	e6cf      	b.n	800bf42 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c1a2:	fa1f f884 	uxth.w	r8, r4
 800c1a6:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c1aa:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c1ae:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800c1b2:	2400      	movs	r4, #0
 800c1b4:	e7b7      	b.n	800c126 <USB_EPStartXfer+0x57e>
 800c1b6:	bf00      	nop
 800c1b8:	ffff8000 	.word	0xffff8000

0800c1bc <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800c1bc:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c1be:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800c1c0:	b18b      	cbz	r3, 800c1e6 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c1c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c1c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ce:	041b      	lsls	r3, r3, #16
 800c1d0:	0c1b      	lsrs	r3, r3, #16
 800c1d2:	f083 0310 	eor.w	r3, r3, #16
 800c1d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c1e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c1ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1f2:	041b      	lsls	r3, r3, #16
 800c1f4:	0c1b      	lsrs	r3, r3, #16
 800c1f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c1fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c202:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c206:	2000      	movs	r0, #0
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop

0800c20c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800c20c:	7b0b      	ldrb	r3, [r1, #12]
 800c20e:	bb3b      	cbnz	r3, 800c260 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800c210:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c212:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800c214:	b333      	cbz	r3, 800c264 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c216:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c21a:	065b      	lsls	r3, r3, #25
 800c21c:	d50d      	bpl.n	800c23a <USB_EPClearStall+0x2e>
 800c21e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c22a:	041b      	lsls	r3, r3, #16
 800c22c:	0c1b      	lsrs	r3, r3, #16
 800c22e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c236:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800c23a:	78cb      	ldrb	r3, [r1, #3]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d00f      	beq.n	800c260 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c240:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c24c:	041b      	lsls	r3, r3, #16
 800c24e:	0c1b      	lsrs	r3, r3, #16
 800c250:	f083 0320 	eor.w	r3, r3, #32
 800c254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c25c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c260:	2000      	movs	r0, #0
 800c262:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c264:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c268:	045b      	lsls	r3, r3, #17
 800c26a:	d50d      	bpl.n	800c288 <USB_EPClearStall+0x7c>
 800c26c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c278:	041b      	lsls	r3, r3, #16
 800c27a:	0c1b      	lsrs	r3, r3, #16
 800c27c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c284:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c288:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c28c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c294:	041b      	lsls	r3, r3, #16
 800c296:	0c1b      	lsrs	r3, r3, #16
 800c298:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c29c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	4770      	bx	lr

0800c2ac <USB_SetDevAddress>:
  if (address == 0U)
 800c2ac:	b911      	cbnz	r1, 800c2b4 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c2ae:	2380      	movs	r3, #128	; 0x80
 800c2b0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	4770      	bx	lr

0800c2b8 <USB_DevConnect>:
}
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	4770      	bx	lr

0800c2bc <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800c2bc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800c2c0:	b280      	uxth	r0, r0
 800c2c2:	4770      	bx	lr

0800c2c4 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c2c4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800c2ca:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c2d0:	d007      	beq.n	800c2e2 <USB_WritePMA+0x1e>
 800c2d2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c2d6:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800c2da:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800c2de:	4282      	cmp	r2, r0
 800c2e0:	d1f9      	bne.n	800c2d6 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800c2e2:	4770      	bx	lr

0800c2e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c2e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800c2ea:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2ec:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c2f0:	d012      	beq.n	800c318 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c2f2:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800c2f4:	46b4      	mov	ip, r6
 800c2f6:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c2f8:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800c2fc:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800c2fe:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c300:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800c302:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c306:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c30a:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800c30e:	d1f3      	bne.n	800c2f8 <USB_ReadPMA+0x14>
    pBuf++;
 800c310:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800c314:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c318:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800c31a:	bf44      	itt	mi
 800c31c:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c31e:	700b      	strbmi	r3, [r1, #0]
  }
}
 800c320:	bd70      	pop	{r4, r5, r6, pc}
 800c322:	bf00      	nop

0800c324 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c324:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c328:	b183      	cbz	r3, 800c34c <USBD_CDC_EP0_RxReady+0x28>
{
 800c32a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c32c:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c330:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c334:	28ff      	cmp	r0, #255	; 0xff
 800c336:	d007      	beq.n	800c348 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	4621      	mov	r1, r4
 800c33c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c340:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800c342:	23ff      	movs	r3, #255	; 0xff
 800c344:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800c348:	2000      	movs	r0, #0
 800c34a:	bd10      	pop	{r4, pc}
 800c34c:	2000      	movs	r0, #0
 800c34e:	4770      	bx	lr

0800c350 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c350:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c352:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 800c354:	4801      	ldr	r0, [pc, #4]	; (800c35c <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c356:	801a      	strh	r2, [r3, #0]
}
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	20000060 	.word	0x20000060

0800c360 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c360:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c362:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 800c364:	4801      	ldr	r0, [pc, #4]	; (800c36c <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c366:	801a      	strh	r2, [r3, #0]
}
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	200000a4 	.word	0x200000a4

0800c370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c370:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c372:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c374:	4801      	ldr	r0, [pc, #4]	; (800c37c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c376:	801a      	strh	r2, [r3, #0]
}
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	200000f4 	.word	0x200000f4

0800c380 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c380:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c382:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 800c384:	4801      	ldr	r0, [pc, #4]	; (800c38c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c386:	801a      	strh	r2, [r3, #0]
}
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	200000e8 	.word	0x200000e8

0800c390 <USBD_CDC_DataOut>:
{
 800c390:	b538      	push	{r3, r4, r5, lr}
 800c392:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c394:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c398:	f001 f83a 	bl	800d410 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800c39c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c3a0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800c3a4:	b14b      	cbz	r3, 800c3ba <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3a6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c3aa:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c3b4:	4798      	blx	r3
    return USBD_OK;
 800c3b6:	2000      	movs	r0, #0
}
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c3ba:	2002      	movs	r0, #2
}
 800c3bc:	bd38      	pop	{r3, r4, r5, pc}
 800c3be:	bf00      	nop

0800c3c0 <USBD_CDC_DataIn>:
{
 800c3c0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c3c2:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800c3c6:	b1ed      	cbz	r5, 800c404 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c3c8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c3cc:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800c3d0:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800c3d4:	b14a      	cbz	r2, 800c3ea <USBD_CDC_DataIn+0x2a>
 800c3d6:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800c3da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c3de:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c3e0:	fbb2 f3f4 	udiv	r3, r2, r4
 800c3e4:	fb04 2413 	mls	r4, r4, r3, r2
 800c3e8:	b124      	cbz	r4, 800c3f4 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800c3ea:	2300      	movs	r3, #0
    return USBD_OK;
 800c3ec:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800c3ee:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c3f4:	4623      	mov	r3, r4
 800c3f6:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800c3f8:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c3fc:	f000 ffec 	bl	800d3d8 <USBD_LL_Transmit>
    return USBD_OK;
 800c400:	4620      	mov	r0, r4
}
 800c402:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c404:	2002      	movs	r0, #2
}
 800c406:	bd38      	pop	{r3, r4, r5, pc}

0800c408 <USBD_CDC_Setup>:
{
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800c40c:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c40e:	780b      	ldrb	r3, [r1, #0]
{
 800c410:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c412:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800c416:	460c      	mov	r4, r1
 800c418:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c41a:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800c41e:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800c422:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c426:	d013      	beq.n	800c450 <USBD_CDC_Setup+0x48>
 800c428:	2e20      	cmp	r6, #32
 800c42a:	d117      	bne.n	800c45c <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800c42c:	88ce      	ldrh	r6, [r1, #6]
 800c42e:	b1f6      	cbz	r6, 800c46e <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800c430:	061b      	lsls	r3, r3, #24
 800c432:	d53f      	bpl.n	800c4b4 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c434:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c438:	4632      	mov	r2, r6
 800c43a:	4641      	mov	r1, r8
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	7860      	ldrb	r0, [r4, #1]
 800c440:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c442:	4641      	mov	r1, r8
 800c444:	4628      	mov	r0, r5
 800c446:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 800c448:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c44a:	f000 fcef 	bl	800ce2c <USBD_CtlSendData>
 800c44e:	e00a      	b.n	800c466 <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 800c450:	784b      	ldrb	r3, [r1, #1]
 800c452:	2b0a      	cmp	r3, #10
 800c454:	d01f      	beq.n	800c496 <USBD_CDC_Setup+0x8e>
 800c456:	2b0b      	cmp	r3, #11
 800c458:	d027      	beq.n	800c4aa <USBD_CDC_Setup+0xa2>
 800c45a:	b193      	cbz	r3, 800c482 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 800c45c:	4621      	mov	r1, r4
 800c45e:	4628      	mov	r0, r5
 800c460:	f000 fcae 	bl	800cdc0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c464:	2602      	movs	r6, #2
}
 800c466:	4630      	mov	r0, r6
 800c468:	b002      	add	sp, #8
 800c46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c46e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c472:	4632      	mov	r2, r6
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	7848      	ldrb	r0, [r1, #1]
 800c478:	4798      	blx	r3
}
 800c47a:	4630      	mov	r0, r6
 800c47c:	b002      	add	sp, #8
 800c47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c482:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c486:	2b03      	cmp	r3, #3
 800c488:	d1e8      	bne.n	800c45c <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c48a:	2202      	movs	r2, #2
 800c48c:	f10d 0106 	add.w	r1, sp, #6
 800c490:	f000 fccc 	bl	800ce2c <USBD_CtlSendData>
 800c494:	e7e7      	b.n	800c466 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c496:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d1de      	bne.n	800c45c <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f10d 0105 	add.w	r1, sp, #5
 800c4a4:	f000 fcc2 	bl	800ce2c <USBD_CtlSendData>
 800c4a8:	e7dd      	b.n	800c466 <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c4aa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d0d9      	beq.n	800c466 <USBD_CDC_Setup+0x5e>
 800c4b2:	e7d3      	b.n	800c45c <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800c4b4:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4b6:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c4b8:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4bc:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800c4be:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4c2:	f000 fccb 	bl	800ce5c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800c4c6:	463e      	mov	r6, r7
 800c4c8:	e7cd      	b.n	800c466 <USBD_CDC_Setup+0x5e>
 800c4ca:	bf00      	nop

0800c4cc <USBD_CDC_DeInit>:
{
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c4d0:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c4d2:	2181      	movs	r1, #129	; 0x81
 800c4d4:	f000 ff34 	bl	800d340 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c4d8:	2101      	movs	r1, #1
 800c4da:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c4dc:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c4de:	f000 ff2f 	bl	800d340 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c4e2:	2182      	movs	r1, #130	; 0x82
 800c4e4:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c4e6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c4ea:	f000 ff29 	bl	800d340 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800c4ee:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c4f2:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800c4f4:	b14b      	cbz	r3, 800c50a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c4f6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c4fe:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800c502:	f000 ff8d 	bl	800d420 <USBD_static_free>
    pdev->pClassData = NULL;
 800c506:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800c50a:	2000      	movs	r0, #0
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
 800c50e:	bf00      	nop

0800c510 <USBD_CDC_Init>:
{
 800c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c514:	7c03      	ldrb	r3, [r0, #16]
{
 800c516:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c518:	bbbb      	cbnz	r3, 800c58a <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c51a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51e:	2202      	movs	r2, #2
 800c520:	2181      	movs	r1, #129	; 0x81
 800c522:	f000 fefd 	bl	800d320 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c526:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c528:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c52c:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c52e:	4629      	mov	r1, r5
 800c530:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c532:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c534:	4620      	mov	r0, r4
 800c536:	f000 fef3 	bl	800d320 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c53a:	2308      	movs	r3, #8
 800c53c:	2203      	movs	r2, #3
 800c53e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c540:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c544:	4620      	mov	r0, r4
 800c546:	f000 feeb 	bl	800d320 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c54a:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c54e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c550:	f000 ff62 	bl	800d418 <USBD_static_malloc>
 800c554:	4605      	mov	r5, r0
 800c556:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800c55a:	b348      	cbz	r0, 800c5b0 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 800c55c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c560:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4798      	blx	r3
    hcdc->TxState = 0U;
 800c568:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800c56c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c570:	7c26      	ldrb	r6, [r4, #16]
 800c572:	b196      	cbz	r6, 800c59a <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 800c574:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c576:	2340      	movs	r3, #64	; 0x40
 800c578:	4639      	mov	r1, r7
 800c57a:	4620      	mov	r0, r4
 800c57c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c580:	f000 ff38 	bl	800d3f4 <USBD_LL_PrepareReceive>
}
 800c584:	4630      	mov	r0, r6
 800c586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c58a:	2340      	movs	r3, #64	; 0x40
 800c58c:	2202      	movs	r2, #2
 800c58e:	2181      	movs	r1, #129	; 0x81
 800c590:	f000 fec6 	bl	800d320 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c594:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c596:	2340      	movs	r3, #64	; 0x40
 800c598:	e7c8      	b.n	800c52c <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c59a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c59e:	4639      	mov	r1, r7
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c5a6:	f000 ff25 	bl	800d3f4 <USBD_LL_PrepareReceive>
}
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800c5b0:	463e      	mov	r6, r7
}
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c5b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c5b8:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800c5ba:	b119      	cbz	r1, 800c5c4 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 800c5bc:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800c5be:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c5c2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800c5c4:	2002      	movs	r0, #2
  }

  return ret;
}
 800c5c6:	4770      	bx	lr

0800c5c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c5c8:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c5ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800c5ce:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800c5d0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c5d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop

0800c5dc <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c5dc:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800c5de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800c5e2:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800c5e4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop

0800c5ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c5ee:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 800c5f2:	b195      	cbz	r5, 800c61a <USBD_CDC_TransmitPacket+0x2e>
  {
    if(hcdc->TxState == 0U)
 800c5f4:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800c5f8:	b10c      	cbz	r4, 800c5fe <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800c5fa:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800c5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 1U;
 800c5fe:	2701      	movs	r7, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c600:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c604:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
      hcdc->TxState = 1U;
 800c608:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c60c:	2181      	movs	r1, #129	; 0x81
 800c60e:	b2b3      	uxth	r3, r6
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c610:	6306      	str	r6, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c612:	f000 fee1 	bl	800d3d8 <USBD_LL_Transmit>
      return USBD_OK;
 800c616:	4620      	mov	r0, r4
}
 800c618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800c61a:	2002      	movs	r0, #2
}
 800c61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c61e:	bf00      	nop

0800c620 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c620:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800c624:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c626:	b19a      	cbz	r2, 800c650 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c628:	7c04      	ldrb	r4, [r0, #16]
 800c62a:	b144      	cbz	r4, 800c63e <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c62c:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	2101      	movs	r1, #1
 800c632:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c636:	f000 fedd 	bl	800d3f4 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800c63a:	4620      	mov	r0, r4
 800c63c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800c63e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c642:	2101      	movs	r1, #1
 800c644:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c648:	f000 fed4 	bl	800d3f4 <USBD_LL_PrepareReceive>
}
 800c64c:	4620      	mov	r0, r4
 800c64e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c650:	2402      	movs	r4, #2
}
 800c652:	4620      	mov	r0, r4
 800c654:	bd10      	pop	{r4, pc}
 800c656:	bf00      	nop

0800c658 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c658:	b188      	cbz	r0, 800c67e <USBD_Init+0x26>
{
 800c65a:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c65c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c660:	b113      	cbz	r3, 800c668 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c668:	b109      	cbz	r1, 800c66e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c66a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c66e:	2301      	movs	r3, #1
  pdev->id = id;
 800c670:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c672:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c676:	f000 fe01 	bl	800d27c <USBD_LL_Init>

  return USBD_OK;
 800c67a:	2000      	movs	r0, #0
}
 800c67c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c67e:	2002      	movs	r0, #2
}
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop

0800c684 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c684:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800c686:	b119      	cbz	r1, 800c690 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800c688:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800c68a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c68e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c690:	2002      	movs	r0, #2
  }

  return status;
}
 800c692:	4770      	bx	lr

0800c694 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c694:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c696:	f000 fe35 	bl	800d304 <USBD_LL_Start>

  return USBD_OK;
}
 800c69a:	2000      	movs	r0, #0
 800c69c:	bd08      	pop	{r3, pc}
 800c69e:	bf00      	nop

0800c6a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c6a0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800c6a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c6a6:	b11b      	cbz	r3, 800c6b0 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4798      	blx	r3
 800c6ac:	b900      	cbnz	r0, 800c6b0 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800c6ae:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c6b0:	2002      	movs	r0, #2
}
 800c6b2:	bd08      	pop	{r3, pc}

0800c6b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c6b4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c6b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	4798      	blx	r3
  return USBD_OK;
}
 800c6be:	2000      	movs	r0, #0
 800c6c0:	bd08      	pop	{r3, pc}
 800c6c2:	bf00      	nop

0800c6c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c6c8:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f000 fb63 	bl	800cd98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c6d2:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800c6d4:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 800c6d8:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800c6dc:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800c6e0:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800c6e4:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800c6e6:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800c6ea:	d009      	beq.n	800c700 <USBD_LL_SetupStage+0x3c>
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d013      	beq.n	800c718 <USBD_LL_SetupStage+0x54>
 800c6f0:	b163      	cbz	r3, 800c70c <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c6f8:	f000 fe30 	bl	800d35c <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800c700:	4629      	mov	r1, r5
 800c702:	4620      	mov	r0, r4
 800c704:	f000 fa78 	bl	800cbf8 <USBD_StdItfReq>
}
 800c708:	2000      	movs	r0, #0
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800c70c:	4629      	mov	r1, r5
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 f8f8 	bl	800c904 <USBD_StdDevReq>
}
 800c714:	2000      	movs	r0, #0
 800c716:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800c718:	4629      	mov	r1, r5
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 faa0 	bl	800cc60 <USBD_StdEPReq>
}
 800c720:	2000      	movs	r0, #0
 800c722:	bd38      	pop	{r3, r4, r5, pc}

0800c724 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c728:	b969      	cbnz	r1, 800c746 <USBD_LL_DataOutStage+0x22>
 800c72a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c72c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800c730:	2a03      	cmp	r2, #3
 800c732:	d015      	beq.n	800c760 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c734:	2a05      	cmp	r2, #5
 800c736:	460c      	mov	r4, r1
 800c738:	d10e      	bne.n	800c758 <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c73a:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c73e:	f000 fe0d 	bl	800d35c <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800c742:	4620      	mov	r0, r4
}
 800c744:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800c746:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	b133      	cbz	r3, 800c75c <USBD_LL_DataOutStage+0x38>
 800c74e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c752:	2a03      	cmp	r2, #3
 800c754:	d102      	bne.n	800c75c <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800c756:	4798      	blx	r3
  return USBD_OK;
 800c758:	2000      	movs	r0, #0
}
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c75c:	2002      	movs	r0, #2
}
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 800c760:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800c764:	4291      	cmp	r1, r2
 800c766:	d90c      	bls.n	800c782 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 800c768:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 800c76a:	428a      	cmp	r2, r1
 800c76c:	bf88      	it	hi
 800c76e:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 800c770:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800c774:	bf98      	it	ls
 800c776:	b292      	uxthls	r2, r2
 800c778:	4619      	mov	r1, r3
 800c77a:	f000 fb7d 	bl	800ce78 <USBD_CtlContinueRx>
  return USBD_OK;
 800c77e:	2000      	movs	r0, #0
}
 800c780:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c782:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	b11b      	cbz	r3, 800c792 <USBD_LL_DataOutStage+0x6e>
 800c78a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c78e:	2a03      	cmp	r2, #3
 800c790:	d004      	beq.n	800c79c <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800c792:	4628      	mov	r0, r5
 800c794:	f000 fb7a 	bl	800ce8c <USBD_CtlSendStatus>
  return USBD_OK;
 800c798:	2000      	movs	r0, #0
}
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800c79c:	4798      	blx	r3
 800c79e:	e7f8      	b.n	800c792 <USBD_LL_DataOutStage+0x6e>

0800c7a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c7a4:	b961      	cbnz	r1, 800c7c0 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c7a6:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d015      	beq.n	800c7da <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c7ae:	f033 0304 	bics.w	r3, r3, #4
 800c7b2:	d02e      	beq.n	800c812 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c7b4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d031      	beq.n	800c820 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800c7bc:	2000      	movs	r0, #0
}
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800c7c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	b133      	cbz	r3, 800c7d6 <USBD_LL_DataInStage+0x36>
 800c7c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c7cc:	2a03      	cmp	r2, #3
 800c7ce:	d102      	bne.n	800c7d6 <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 800c7d0:	4798      	blx	r3
  return USBD_OK;
 800c7d2:	2000      	movs	r0, #0
}
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c7d6:	2002      	movs	r0, #2
}
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800c7da:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800c7de:	429e      	cmp	r6, r3
 800c7e0:	d833      	bhi.n	800c84a <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c7e2:	69c2      	ldr	r2, [r0, #28]
 800c7e4:	fbb2 f5f3 	udiv	r5, r2, r3
 800c7e8:	fb03 2515 	mls	r5, r3, r5, r2
 800c7ec:	b9ed      	cbnz	r5, 800c82a <USBD_LL_DataInStage+0x8a>
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d81b      	bhi.n	800c82a <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800c7f2:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d217      	bcs.n	800c82a <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	f000 fb24 	bl	800ce48 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c800:	462b      	mov	r3, r5
 800c802:	462a      	mov	r2, r5
 800c804:	4629      	mov	r1, r5
 800c806:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800c808:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c80c:	f000 fdf2 	bl	800d3f4 <USBD_LL_PrepareReceive>
 800c810:	e7d0      	b.n	800c7b4 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800c812:	2180      	movs	r1, #128	; 0x80
 800c814:	f000 fda2 	bl	800d35c <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800c818:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d1cd      	bne.n	800c7bc <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800c826:	4618      	mov	r0, r3
}
 800c828:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c82a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	b11b      	cbz	r3, 800c83a <USBD_LL_DataInStage+0x9a>
 800c832:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800c836:	2a03      	cmp	r2, #3
 800c838:	d015      	beq.n	800c866 <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800c83a:	2180      	movs	r1, #128	; 0x80
 800c83c:	4620      	mov	r0, r4
 800c83e:	f000 fd8d 	bl	800d35c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c842:	4620      	mov	r0, r4
 800c844:	f000 fb2e 	bl	800cea4 <USBD_CtlReceiveStatus>
 800c848:	e7b4      	b.n	800c7b4 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c84a:	460d      	mov	r5, r1
 800c84c:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c84e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c850:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c852:	b29a      	uxth	r2, r3
 800c854:	f000 faf8 	bl	800ce48 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c858:	462b      	mov	r3, r5
 800c85a:	462a      	mov	r2, r5
 800c85c:	4629      	mov	r1, r5
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 fdc8 	bl	800d3f4 <USBD_LL_PrepareReceive>
 800c864:	e7a6      	b.n	800c7b4 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800c866:	4620      	mov	r0, r4
 800c868:	4798      	blx	r3
 800c86a:	e7e6      	b.n	800c83a <USBD_LL_DataInStage+0x9a>

0800c86c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c86c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c86e:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c870:	2640      	movs	r6, #64	; 0x40
{
 800c872:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c874:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c876:	4611      	mov	r1, r2
 800c878:	4633      	mov	r3, r6
 800c87a:	f000 fd51 	bl	800d320 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c87e:	4633      	mov	r3, r6
 800c880:	2180      	movs	r1, #128	; 0x80
 800c882:	2200      	movs	r2, #0
 800c884:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c886:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c88a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c88e:	f000 fd47 	bl	800d320 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c892:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800c894:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c898:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c89a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c89c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8a0:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c8a4:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8a6:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800c8aa:	b123      	cbz	r3, 800c8b6 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8ac:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ba:	bf00      	nop

0800c8bc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c8bc:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800c8be:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c8c0:	7419      	strb	r1, [r3, #16]
}
 800c8c2:	4770      	bx	lr

0800c8c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c8c4:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c8c6:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800c8c8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 800c8cc:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c8ce:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800c8d2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800c8d6:	4770      	bx	lr

0800c8d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c8d8:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 800c8da:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 800c8de:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800c8e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop

0800c8e8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c8ec:	2a03      	cmp	r2, #3
 800c8ee:	d001      	beq.n	800c8f4 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	4770      	bx	lr
{
 800c8f4:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800c8f6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c8fa:	69db      	ldr	r3, [r3, #28]
 800c8fc:	b103      	cbz	r3, 800c900 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800c8fe:	4798      	blx	r3
}
 800c900:	2000      	movs	r0, #0
 800c902:	bd08      	pop	{r3, pc}

0800c904 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c904:	b530      	push	{r4, r5, lr}
 800c906:	780b      	ldrb	r3, [r1, #0]
 800c908:	460d      	mov	r5, r1
 800c90a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c90e:	2b20      	cmp	r3, #32
{
 800c910:	4604      	mov	r4, r0
 800c912:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c914:	d00d      	beq.n	800c932 <USBD_StdDevReq+0x2e>
 800c916:	2b40      	cmp	r3, #64	; 0x40
 800c918:	d00b      	beq.n	800c932 <USBD_StdDevReq+0x2e>
 800c91a:	b19b      	cbz	r3, 800c944 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800c91c:	2180      	movs	r1, #128	; 0x80
 800c91e:	4620      	mov	r0, r4
 800c920:	f000 fd1c 	bl	800d35c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c924:	2100      	movs	r1, #0
 800c926:	4620      	mov	r0, r4
 800c928:	f000 fd18 	bl	800d35c <USBD_LL_StallEP>
}
 800c92c:	2000      	movs	r0, #0
 800c92e:	b003      	add	sp, #12
 800c930:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800c932:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c936:	4629      	mov	r1, r5
 800c938:	4620      	mov	r0, r4
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	4798      	blx	r3
}
 800c93e:	2000      	movs	r0, #0
 800c940:	b003      	add	sp, #12
 800c942:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800c944:	784b      	ldrb	r3, [r1, #1]
 800c946:	2b09      	cmp	r3, #9
 800c948:	d8e8      	bhi.n	800c91c <USBD_StdDevReq+0x18>
 800c94a:	a201      	add	r2, pc, #4	; (adr r2, 800c950 <USBD_StdDevReq+0x4c>)
 800c94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c950:	0800c9ab 	.word	0x0800c9ab
 800c954:	0800c9d7 	.word	0x0800c9d7
 800c958:	0800c91d 	.word	0x0800c91d
 800c95c:	0800c9f5 	.word	0x0800c9f5
 800c960:	0800c91d 	.word	0x0800c91d
 800c964:	0800c9fd 	.word	0x0800c9fd
 800c968:	0800ca35 	.word	0x0800ca35
 800c96c:	0800c91d 	.word	0x0800c91d
 800c970:	0800ca65 	.word	0x0800ca65
 800c974:	0800c979 	.word	0x0800c979
  cfgidx = (uint8_t)(req->wValue);
 800c978:	7889      	ldrb	r1, [r1, #2]
 800c97a:	4d9e      	ldr	r5, [pc, #632]	; (800cbf4 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c97c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c97e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c980:	d8cc      	bhi.n	800c91c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c982:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c986:	2b02      	cmp	r3, #2
 800c988:	f000 8111 	beq.w	800cbae <USBD_StdDevReq+0x2aa>
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	f000 80ff 	beq.w	800cb90 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 800c992:	2180      	movs	r1, #128	; 0x80
 800c994:	f000 fce2 	bl	800d35c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c998:	2100      	movs	r1, #0
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fcde 	bl	800d35c <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	7829      	ldrb	r1, [r5, #0]
 800c9a4:	f7ff fe86 	bl	800c6b4 <USBD_ClrClassConfig>
      break;
 800c9a8:	e7c0      	b.n	800c92c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c9aa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d8b3      	bhi.n	800c91c <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800c9b4:	88cb      	ldrh	r3, [r1, #6]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d1b0      	bne.n	800c91c <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9ba:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 800c9bc:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c9c0:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800c9c2:	b10b      	cbz	r3, 800c9c8 <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f104 010c 	add.w	r1, r4, #12
 800c9d0:	f000 fa2c 	bl	800ce2c <USBD_CtlSendData>
    break;
 800c9d4:	e7aa      	b.n	800c92c <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c9d6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d89d      	bhi.n	800c91c <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9e0:	884b      	ldrh	r3, [r1, #2]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d1a2      	bne.n	800c92c <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800c9e6:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 800c9e8:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 800c9ea:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c9ee:	f000 fa4d 	bl	800ce8c <USBD_CtlSendStatus>
 800c9f2:	e79b      	b.n	800c92c <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9f4:	884b      	ldrh	r3, [r1, #2]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d198      	bne.n	800c92c <USBD_StdDevReq+0x28>
 800c9fa:	e7f5      	b.n	800c9e8 <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9fc:	888b      	ldrh	r3, [r1, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d18c      	bne.n	800c91c <USBD_StdDevReq+0x18>
 800ca02:	88cb      	ldrh	r3, [r1, #6]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d189      	bne.n	800c91c <USBD_StdDevReq+0x18>
 800ca08:	884d      	ldrh	r5, [r1, #2]
 800ca0a:	2d7f      	cmp	r5, #127	; 0x7f
 800ca0c:	d886      	bhi.n	800c91c <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d082      	beq.n	800c91c <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca16:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800ca18:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca1c:	f000 fcce 	bl	800d3bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 fa33 	bl	800ce8c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	f000 80df 	beq.w	800cbea <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800ca32:	e77b      	b.n	800c92c <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800ca34:	884a      	ldrh	r2, [r1, #2]
 800ca36:	0a13      	lsrs	r3, r2, #8
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	2b06      	cmp	r3, #6
 800ca3c:	f63f af6e 	bhi.w	800c91c <USBD_StdDevReq+0x18>
 800ca40:	a101      	add	r1, pc, #4	; (adr r1, 800ca48 <USBD_StdDevReq+0x144>)
 800ca42:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca46:	bf00      	nop
 800ca48:	0800caf7 	.word	0x0800caf7
 800ca4c:	0800cadf 	.word	0x0800cadf
 800ca50:	0800cacd 	.word	0x0800cacd
 800ca54:	0800c91d 	.word	0x0800c91d
 800ca58:	0800c91d 	.word	0x0800c91d
 800ca5c:	0800cab7 	.word	0x0800cab7
 800ca60:	0800ca89 	.word	0x0800ca89
  if (req->wLength != 1U)
 800ca64:	88ca      	ldrh	r2, [r1, #6]
 800ca66:	2a01      	cmp	r2, #1
 800ca68:	f47f af58 	bne.w	800c91c <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800ca6c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d878      	bhi.n	800cb66 <USBD_StdDevReq+0x262>
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f43f af51 	beq.w	800c91c <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ca82:	f000 f9d3 	bl	800ce2c <USBD_CtlSendData>
      break;
 800ca86:	e751      	b.n	800c92c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ca88:	7c03      	ldrb	r3, [r0, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f47f af46 	bne.w	800c91c <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ca90:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800ca94:	f10d 0006 	add.w	r0, sp, #6
 800ca98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca9c:	2307      	movs	r3, #7
 800ca9e:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 800caa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800caa4:	2a00      	cmp	r2, #0
 800caa6:	d06e      	beq.n	800cb86 <USBD_StdDevReq+0x282>
 800caa8:	88eb      	ldrh	r3, [r5, #6]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d162      	bne.n	800cb74 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 f9ec 	bl	800ce8c <USBD_CtlSendStatus>
 800cab4:	e73a      	b.n	800c92c <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cab6:	7c03      	ldrb	r3, [r0, #16]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f47f af2f 	bne.w	800c91c <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cabe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800cac2:	f10d 0006 	add.w	r0, sp, #6
 800cac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac8:	4798      	blx	r3
      break;
 800caca:	e7e9      	b.n	800caa0 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 800cacc:	b2d2      	uxtb	r2, r2
 800cace:	2a05      	cmp	r2, #5
 800cad0:	f63f af24 	bhi.w	800c91c <USBD_StdDevReq+0x18>
 800cad4:	e8df f002 	tbb	[pc, r2]
 800cad8:	272f373f 	.word	0x272f373f
 800cadc:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800cade:	7c03      	ldrb	r3, [r0, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d172      	bne.n	800cbca <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cae4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800cae8:	f10d 0006 	add.w	r0, sp, #6
 800caec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caee:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caf0:	2302      	movs	r3, #2
 800caf2:	7043      	strb	r3, [r0, #1]
 800caf4:	e7d4      	b.n	800caa0 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800caf6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cafa:	f10d 0106 	add.w	r1, sp, #6
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	7c00      	ldrb	r0, [r0, #16]
 800cb02:	4798      	blx	r3
    break;
 800cb04:	e7cc      	b.n	800caa0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cb06:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cb0a:	f10d 0106 	add.w	r1, sp, #6
 800cb0e:	699b      	ldr	r3, [r3, #24]
 800cb10:	7c00      	ldrb	r0, [r0, #16]
 800cb12:	4798      	blx	r3
      break;
 800cb14:	e7c4      	b.n	800caa0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb16:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cb1a:	f10d 0106 	add.w	r1, sp, #6
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	7c00      	ldrb	r0, [r0, #16]
 800cb22:	4798      	blx	r3
      break;
 800cb24:	e7bc      	b.n	800caa0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb26:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cb2a:	f10d 0106 	add.w	r1, sp, #6
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	7c00      	ldrb	r0, [r0, #16]
 800cb32:	4798      	blx	r3
      break;
 800cb34:	e7b4      	b.n	800caa0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb36:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cb3a:	f10d 0106 	add.w	r1, sp, #6
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	7c00      	ldrb	r0, [r0, #16]
 800cb42:	4798      	blx	r3
      break;
 800cb44:	e7ac      	b.n	800caa0 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cb46:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cb4a:	f10d 0106 	add.w	r1, sp, #6
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	7c00      	ldrb	r0, [r0, #16]
 800cb52:	4798      	blx	r3
      break;
 800cb54:	e7a4      	b.n	800caa0 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb56:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800cb5a:	f10d 0106 	add.w	r1, sp, #6
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	7c00      	ldrb	r0, [r0, #16]
 800cb62:	4798      	blx	r3
      break;
 800cb64:	e79c      	b.n	800caa0 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 800cb66:	2b03      	cmp	r3, #3
 800cb68:	f47f aed8 	bne.w	800c91c <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cb6c:	1d01      	adds	r1, r0, #4
 800cb6e:	f000 f95d 	bl	800ce2c <USBD_CtlSendData>
      break;
 800cb72:	e6db      	b.n	800c92c <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 800cb74:	429a      	cmp	r2, r3
 800cb76:	bf28      	it	cs
 800cb78:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800cb7e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800cb82:	f000 f953 	bl	800ce2c <USBD_CtlSendData>
  if(req->wLength == 0U)
 800cb86:	88eb      	ldrh	r3, [r5, #6]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f47f aecf 	bne.w	800c92c <USBD_StdDevReq+0x28>
 800cb8e:	e78e      	b.n	800caae <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 800cb90:	b321      	cbz	r1, 800cbdc <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800cb92:	6841      	ldr	r1, [r0, #4]
 800cb94:	2901      	cmp	r1, #1
 800cb96:	d08a      	beq.n	800caae <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb98:	b2c9      	uxtb	r1, r1
 800cb9a:	f7ff fd8b 	bl	800c6b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb9e:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cba0:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800cba2:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cba4:	f7ff fd7c 	bl	800c6a0 <USBD_SetClassConfig>
 800cba8:	2802      	cmp	r0, #2
 800cbaa:	d180      	bne.n	800caae <USBD_StdDevReq+0x1aa>
 800cbac:	e6b6      	b.n	800c91c <USBD_StdDevReq+0x18>
      if (cfgidx)
 800cbae:	2900      	cmp	r1, #0
 800cbb0:	f43f af7d 	beq.w	800caae <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 800cbb4:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbb6:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800cbb8:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbba:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cbbe:	f7ff fd6f 	bl	800c6a0 <USBD_SetClassConfig>
 800cbc2:	2802      	cmp	r0, #2
 800cbc4:	f47f af73 	bne.w	800caae <USBD_StdDevReq+0x1aa>
 800cbc8:	e6a8      	b.n	800c91c <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cbca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800cbce:	f10d 0006 	add.w	r0, sp, #6
 800cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	7043      	strb	r3, [r0, #1]
 800cbda:	e761      	b.n	800caa0 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbdc:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800cbde:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbe0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800cbe4:	f7ff fd66 	bl	800c6b4 <USBD_ClrClassConfig>
 800cbe8:	e761      	b.n	800caae <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cbea:	2301      	movs	r3, #1
 800cbec:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800cbf0:	e69c      	b.n	800c92c <USBD_StdDevReq+0x28>
 800cbf2:	bf00      	nop
 800cbf4:	20000a84 	.word	0x20000a84

0800cbf8 <USBD_StdItfReq>:
{
 800cbf8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbfa:	780b      	ldrb	r3, [r1, #0]
{
 800cbfc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbfe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800cc02:	2a40      	cmp	r2, #64	; 0x40
{
 800cc04:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc06:	d00a      	beq.n	800cc1e <USBD_StdItfReq+0x26>
 800cc08:	065b      	lsls	r3, r3, #25
 800cc0a:	d508      	bpl.n	800cc1e <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800cc0c:	2180      	movs	r1, #128	; 0x80
 800cc0e:	f000 fba5 	bl	800d35c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cc12:	2100      	movs	r1, #0
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 fba1 	bl	800d35c <USBD_LL_StallEP>
}
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800cc1e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800cc22:	3b01      	subs	r3, #1
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d811      	bhi.n	800cc4c <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc28:	792b      	ldrb	r3, [r5, #4]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d80e      	bhi.n	800cc4c <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cc2e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cc32:	4629      	mov	r1, r5
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	4620      	mov	r0, r4
 800cc38:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc3a:	88eb      	ldrh	r3, [r5, #6]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d1ec      	bne.n	800cc1a <USBD_StdItfReq+0x22>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d1ea      	bne.n	800cc1a <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800cc44:	4620      	mov	r0, r4
 800cc46:	f000 f921 	bl	800ce8c <USBD_CtlSendStatus>
 800cc4a:	e7e6      	b.n	800cc1a <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800cc4c:	2180      	movs	r1, #128	; 0x80
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 fb84 	bl	800d35c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cc54:	2100      	movs	r1, #0
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 fb80 	bl	800d35c <USBD_LL_StallEP>
}
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}

0800cc60 <USBD_StdEPReq>:
{
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	780b      	ldrb	r3, [r1, #0]
 800cc64:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc6a:	2b20      	cmp	r3, #32
 800cc6c:	d00c      	beq.n	800cc88 <USBD_StdEPReq+0x28>
 800cc6e:	2b40      	cmp	r3, #64	; 0x40
 800cc70:	d00a      	beq.n	800cc88 <USBD_StdEPReq+0x28>
 800cc72:	b183      	cbz	r3, 800cc96 <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800cc74:	2180      	movs	r1, #128	; 0x80
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fb70 	bl	800d35c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f000 fb6c 	bl	800d35c <USBD_LL_StallEP>
}
 800cc84:	2000      	movs	r0, #0
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800cc88:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	4798      	blx	r3
}
 800cc92:	2000      	movs	r0, #0
 800cc94:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800cc96:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800cc98:	888a      	ldrh	r2, [r1, #4]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800cca0:	d03e      	beq.n	800cd20 <USBD_StdEPReq+0xc0>
 800cca2:	2b03      	cmp	r3, #3
 800cca4:	d02a      	beq.n	800ccfc <USBD_StdEPReq+0x9c>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e4      	bne.n	800cc74 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800ccaa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d051      	beq.n	800cd56 <USBD_StdEPReq+0xf6>
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d1de      	bne.n	800cc74 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccb6:	f00c 030f 	and.w	r3, ip, #15
 800ccba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800ccbe:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ccc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800ccc4:	d456      	bmi.n	800cd74 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ccc6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0d2      	beq.n	800cc74 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ccce:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800ccd2:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800ccd6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ccda:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ccde:	b133      	cbz	r3, 800ccee <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cce0:	4661      	mov	r1, ip
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fb56 	bl	800d394 <USBD_LL_IsStallEP>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d04f      	beq.n	800cd8c <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800ccec:	2301      	movs	r3, #1
 800ccee:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 f899 	bl	800ce2c <USBD_CtlSendData>
          break;
 800ccfa:	e7c3      	b.n	800cc84 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800ccfc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d01d      	beq.n	800cd40 <USBD_StdEPReq+0xe0>
 800cd04:	2b03      	cmp	r3, #3
 800cd06:	d1b5      	bne.n	800cc74 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cd08:	884b      	ldrh	r3, [r1, #2]
 800cd0a:	b92b      	cbnz	r3, 800cd18 <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd0c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cd10:	d002      	beq.n	800cd18 <USBD_StdEPReq+0xb8>
 800cd12:	88cb      	ldrh	r3, [r1, #6]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d03b      	beq.n	800cd90 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800cd18:	4620      	mov	r0, r4
 800cd1a:	f000 f8b7 	bl	800ce8c <USBD_CtlSendStatus>
        break;
 800cd1e:	e7b1      	b.n	800cc84 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800cd20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d00b      	beq.n	800cd40 <USBD_StdEPReq+0xe0>
 800cd28:	2b03      	cmp	r3, #3
 800cd2a:	d1a3      	bne.n	800cc74 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cd2c:	884b      	ldrh	r3, [r1, #2]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1a8      	bne.n	800cc84 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800cd32:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cd36:	d0ef      	beq.n	800cd18 <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd38:	4661      	mov	r1, ip
 800cd3a:	f000 fb1d 	bl	800d378 <USBD_LL_ClearStallEP>
 800cd3e:	e7eb      	b.n	800cd18 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd40:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cd44:	d096      	beq.n	800cc74 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800cd46:	4661      	mov	r1, ip
 800cd48:	f000 fb08 	bl	800d35c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cd4c:	2180      	movs	r1, #128	; 0x80
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 fb04 	bl	800d35c <USBD_LL_StallEP>
 800cd54:	e796      	b.n	800cc84 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd56:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cd5a:	d18b      	bne.n	800cc74 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800cd5c:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd5e:	0611      	lsls	r1, r2, #24
 800cd60:	bf4c      	ite	mi
 800cd62:	f100 0114 	addmi.w	r1, r0, #20
 800cd66:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd6a:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800cd6c:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd6e:	f000 f85d 	bl	800ce2c <USBD_CtlSendData>
          break;
 800cd72:	e787      	b.n	800cc84 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd74:	699b      	ldr	r3, [r3, #24]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f43f af7c 	beq.w	800cc74 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd7c:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cd80:	1c5d      	adds	r5, r3, #1
 800cd82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cd86:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cd8a:	e7a8      	b.n	800ccde <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800cd8c:	6028      	str	r0, [r5, #0]
 800cd8e:	e7af      	b.n	800ccf0 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800cd90:	4661      	mov	r1, ip
 800cd92:	f000 fae3 	bl	800d35c <USBD_LL_StallEP>
 800cd96:	e7bf      	b.n	800cd18 <USBD_StdEPReq+0xb8>

0800cd98 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cd98:	780b      	ldrb	r3, [r1, #0]
 800cd9a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cd9c:	784b      	ldrb	r3, [r1, #1]
 800cd9e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cda0:	78ca      	ldrb	r2, [r1, #3]
 800cda2:	788b      	ldrb	r3, [r1, #2]
 800cda4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cda8:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cdaa:	794a      	ldrb	r2, [r1, #5]
 800cdac:	790b      	ldrb	r3, [r1, #4]
 800cdae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cdb2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cdb4:	79ca      	ldrb	r2, [r1, #7]
 800cdb6:	798b      	ldrb	r3, [r1, #6]
 800cdb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cdbc:	80c3      	strh	r3, [r0, #6]
}
 800cdbe:	4770      	bx	lr

0800cdc0 <USBD_CtlError>:
{
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800cdc4:	2180      	movs	r1, #128	; 0x80
 800cdc6:	f000 fac9 	bl	800d35c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cdca:	4620      	mov	r0, r4
}
 800cdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	f000 bac3 	b.w	800d35c <USBD_LL_StallEP>
 800cdd6:	bf00      	nop

0800cdd8 <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800cdd8:	b318      	cbz	r0, 800ce22 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800cdda:	7803      	ldrb	r3, [r0, #0]
{
 800cddc:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800cdde:	b30b      	cbz	r3, 800ce24 <USBD_GetString+0x4c>
 800cde0:	4604      	mov	r4, r0
 800cde2:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800cde6:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800cdea:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	d1f8      	bne.n	800cde6 <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	005b      	lsls	r3, r3, #1
 800cdf8:	b2dc      	uxtb	r4, r3
 800cdfa:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cdfc:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cdfe:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ce00:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800ce02:	7804      	ldrb	r4, [r0, #0]
 800ce04:	b15c      	cbz	r4, 800ce1e <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ce06:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800ce08:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	b2d2      	uxtb	r2, r2
 800ce0e:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800ce10:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800ce12:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800ce16:	3302      	adds	r3, #2
 800ce18:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800ce1a:	2c00      	cmp	r4, #0
 800ce1c:	d1f5      	bne.n	800ce0a <USBD_GetString+0x32>
}
 800ce1e:	bc30      	pop	{r4, r5}
 800ce20:	4770      	bx	lr
 800ce22:	4770      	bx	lr
    while (*buf != '\0')
 800ce24:	2402      	movs	r4, #2
 800ce26:	4623      	mov	r3, r4
 800ce28:	e7e7      	b.n	800cdfa <USBD_GetString+0x22>
 800ce2a:	bf00      	nop

0800ce2c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce30:	2402      	movs	r4, #2
{
 800ce32:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800ce34:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ce38:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce3a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ce3e:	f000 facb 	bl	800d3d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ce42:	2000      	movs	r0, #0
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	bf00      	nop

0800ce48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800ce48:	468c      	mov	ip, r1
 800ce4a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ce4c:	2100      	movs	r1, #0
{
 800ce4e:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800ce50:	4662      	mov	r2, ip
 800ce52:	f000 fac1 	bl	800d3d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ce56:	2000      	movs	r0, #0
 800ce58:	bd08      	pop	{r3, pc}
 800ce5a:	bf00      	nop

0800ce5c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce60:	2403      	movs	r4, #3
{
 800ce62:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800ce64:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800ce68:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce6a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800ce6e:	f000 fac1 	bl	800d3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ce72:	2000      	movs	r0, #0
 800ce74:	bd10      	pop	{r4, pc}
 800ce76:	bf00      	nop

0800ce78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800ce78:	468c      	mov	ip, r1
 800ce7a:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce7c:	2100      	movs	r1, #0
{
 800ce7e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce80:	4662      	mov	r2, ip
 800ce82:	f000 fab7 	bl	800d3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ce86:	2000      	movs	r0, #0
 800ce88:	bd08      	pop	{r3, pc}
 800ce8a:	bf00      	nop

0800ce8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800ce8c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce8e:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce90:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce92:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce96:	461a      	mov	r2, r3
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f000 fa9d 	bl	800d3d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ce9e:	2000      	movs	r0, #0
 800cea0:	bd08      	pop	{r3, pc}
 800cea2:	bf00      	nop

0800cea4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800cea4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cea6:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cea8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ceaa:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ceae:	461a      	mov	r2, r3
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	f000 fa9f 	bl	800d3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	bd08      	pop	{r3, pc}
 800ceba:	bf00      	nop

0800cebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cebe:	2200      	movs	r2, #0
 800cec0:	4917      	ldr	r1, [pc, #92]	; (800cf20 <MX_USB_DEVICE_Init+0x64>)
 800cec2:	4818      	ldr	r0, [pc, #96]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800cec4:	f7ff fbc8 	bl	800c658 <USBD_Init>
 800cec8:	b970      	cbnz	r0, 800cee8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ceca:	4917      	ldr	r1, [pc, #92]	; (800cf28 <MX_USB_DEVICE_Init+0x6c>)
 800cecc:	4815      	ldr	r0, [pc, #84]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800cece:	f7ff fbd9 	bl	800c684 <USBD_RegisterClass>
 800ced2:	b988      	cbnz	r0, 800cef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ced4:	4915      	ldr	r1, [pc, #84]	; (800cf2c <MX_USB_DEVICE_Init+0x70>)
 800ced6:	4813      	ldr	r0, [pc, #76]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800ced8:	f7ff fb6e 	bl	800c5b8 <USBD_CDC_RegisterInterface>
 800cedc:	b9a0      	cbnz	r0, 800cf08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cede:	4811      	ldr	r0, [pc, #68]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800cee0:	f7ff fbd8 	bl	800c694 <USBD_Start>
 800cee4:	b9b8      	cbnz	r0, 800cf16 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cee6:	bd08      	pop	{r3, pc}
    Error_Handler();
 800cee8:	f7fa fda8 	bl	8007a3c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ceec:	490e      	ldr	r1, [pc, #56]	; (800cf28 <MX_USB_DEVICE_Init+0x6c>)
 800ceee:	480d      	ldr	r0, [pc, #52]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800cef0:	f7ff fbc8 	bl	800c684 <USBD_RegisterClass>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d0ed      	beq.n	800ced4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800cef8:	f7fa fda0 	bl	8007a3c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cefc:	490b      	ldr	r1, [pc, #44]	; (800cf2c <MX_USB_DEVICE_Init+0x70>)
 800cefe:	4809      	ldr	r0, [pc, #36]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800cf00:	f7ff fb5a 	bl	800c5b8 <USBD_CDC_RegisterInterface>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d0ea      	beq.n	800cede <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800cf08:	f7fa fd98 	bl	8007a3c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf0c:	4805      	ldr	r0, [pc, #20]	; (800cf24 <MX_USB_DEVICE_Init+0x68>)
 800cf0e:	f7ff fbc1 	bl	800c694 <USBD_Start>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d0e7      	beq.n	800cee6 <MX_USB_DEVICE_Init+0x2a>
}
 800cf16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800cf1a:	f7fa bd8f 	b.w	8007a3c <Error_Handler>
 800cf1e:	bf00      	nop
 800cf20:	20000148 	.word	0x20000148
 800cf24:	20000a88 	.word	0x20000a88
 800cf28:	20000028 	.word	0x20000028
 800cf2c:	20000138 	.word	0x20000138

0800cf30 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800cf30:	2000      	movs	r0, #0
 800cf32:	4770      	bx	lr

0800cf34 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800cf34:	2000      	movs	r0, #0
 800cf36:	4770      	bx	lr

0800cf38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf3e:	4816      	ldr	r0, [pc, #88]	; (800cf98 <CDC_Receive_FS+0x60>)
 800cf40:	4621      	mov	r1, r4
 800cf42:	f7ff fb4b 	bl	800c5dc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf46:	4814      	ldr	r0, [pc, #80]	; (800cf98 <CDC_Receive_FS+0x60>)
 800cf48:	f7ff fb6a 	bl	800c620 <USBD_CDC_ReceivePacket>

	memset (usbbuffer, '\0', 64);  // clear the buffer
 800cf4c:	2240      	movs	r2, #64	; 0x40
 800cf4e:	2100      	movs	r1, #0
 800cf50:	4812      	ldr	r0, [pc, #72]	; (800cf9c <CDC_Receive_FS+0x64>)
 800cf52:	f000 fa95 	bl	800d480 <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, 64);  // copy the data to the buffer
 800cf56:	4623      	mov	r3, r4
	uint8_t len = (uint8_t)*Len;
 800cf58:	682a      	ldr	r2, [r5, #0]
	memcpy(usbbuffer, Buf, 64);  // copy the data to the buffer
 800cf5a:	4910      	ldr	r1, [pc, #64]	; (800cf9c <CDC_Receive_FS+0x64>)
 800cf5c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800cf60:	681e      	ldr	r6, [r3, #0]
 800cf62:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800cf66:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800cf6a:	68dd      	ldr	r5, [r3, #12]
 800cf6c:	3310      	adds	r3, #16
 800cf6e:	4283      	cmp	r3, r0
 800cf70:	600e      	str	r6, [r1, #0]
 800cf72:	f8c1 e004 	str.w	lr, [r1, #4]
 800cf76:	f8c1 c008 	str.w	ip, [r1, #8]
 800cf7a:	60cd      	str	r5, [r1, #12]
 800cf7c:	f101 0110 	add.w	r1, r1, #16
 800cf80:	d1ee      	bne.n	800cf60 <CDC_Receive_FS+0x28>
	memset(Buf, '\0', len);   // clear the Buf also
 800cf82:	2100      	movs	r1, #0
 800cf84:	b2d2      	uxtb	r2, r2
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 fa7a 	bl	800d480 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800cf8c:	4804      	ldr	r0, [pc, #16]	; (800cfa0 <CDC_Receive_FS+0x68>)
 800cf8e:	f7fb ff53 	bl	8008e38 <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800cf92:	2000      	movs	r0, #0
 800cf94:	bd70      	pop	{r4, r5, r6, pc}
 800cf96:	bf00      	nop
 800cf98:	20000a88 	.word	0x20000a88
 800cf9c:	20000a2c 	.word	0x20000a2c
 800cfa0:	2000052c 	.word	0x2000052c

0800cfa4 <CDC_Init_FS>:
{
 800cfa4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cfa6:	4c06      	ldr	r4, [pc, #24]	; (800cfc0 <CDC_Init_FS+0x1c>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	4620      	mov	r0, r4
 800cfac:	4905      	ldr	r1, [pc, #20]	; (800cfc4 <CDC_Init_FS+0x20>)
 800cfae:	f7ff fb0b 	bl	800c5c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	4904      	ldr	r1, [pc, #16]	; (800cfc8 <CDC_Init_FS+0x24>)
 800cfb6:	f7ff fb11 	bl	800c5dc <USBD_CDC_SetRxBuffer>
}
 800cfba:	2000      	movs	r0, #0
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20000a88 	.word	0x20000a88
 800cfc4:	2000110c 	.word	0x2000110c
 800cfc8:	20000d24 	.word	0x20000d24

0800cfcc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cfcc:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cfce:	4c09      	ldr	r4, [pc, #36]	; (800cff4 <CDC_Transmit_FS+0x28>)
 800cfd0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 800cfd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfd8:	b10b      	cbz	r3, 800cfde <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800cfda:	2001      	movs	r0, #1
 800cfdc:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cfde:	460a      	mov	r2, r1
 800cfe0:	4601      	mov	r1, r0
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f7ff faf0 	bl	800c5c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cfe8:	4620      	mov	r0, r4
}
 800cfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cfee:	f7ff bafd 	b.w	800c5ec <USBD_CDC_TransmitPacket>
 800cff2:	bf00      	nop
 800cff4:	20000a88 	.word	0x20000a88

0800cff8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cff8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800cffa:	4801      	ldr	r0, [pc, #4]	; (800d000 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800cffc:	800b      	strh	r3, [r1, #0]
}
 800cffe:	4770      	bx	lr
 800d000:	20000164 	.word	0x20000164

0800d004 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d004:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800d006:	4801      	ldr	r0, [pc, #4]	; (800d00c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800d008:	800b      	strh	r3, [r1, #0]
}
 800d00a:	4770      	bx	lr
 800d00c:	20000178 	.word	0x20000178

0800d010 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d010:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d012:	4c04      	ldr	r4, [pc, #16]	; (800d024 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800d014:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d016:	4804      	ldr	r0, [pc, #16]	; (800d028 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800d018:	4621      	mov	r1, r4
 800d01a:	f7ff fedd 	bl	800cdd8 <USBD_GetString>
  return USBD_StrDesc;
}
 800d01e:	4620      	mov	r0, r4
 800d020:	bd10      	pop	{r4, pc}
 800d022:	bf00      	nop
 800d024:	200014f4 	.word	0x200014f4
 800d028:	08011b20 	.word	0x08011b20

0800d02c <USBD_FS_ProductStrDescriptor>:
{
 800d02c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d02e:	4c04      	ldr	r4, [pc, #16]	; (800d040 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800d030:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d032:	4804      	ldr	r0, [pc, #16]	; (800d044 <USBD_FS_ProductStrDescriptor+0x18>)
 800d034:	4621      	mov	r1, r4
 800d036:	f7ff fecf 	bl	800cdd8 <USBD_GetString>
}
 800d03a:	4620      	mov	r0, r4
 800d03c:	bd10      	pop	{r4, pc}
 800d03e:	bf00      	nop
 800d040:	200014f4 	.word	0x200014f4
 800d044:	08011b34 	.word	0x08011b34

0800d048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d048:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d04a:	4c04      	ldr	r4, [pc, #16]	; (800d05c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800d04c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d04e:	4804      	ldr	r0, [pc, #16]	; (800d060 <USBD_FS_ConfigStrDescriptor+0x18>)
 800d050:	4621      	mov	r1, r4
 800d052:	f7ff fec1 	bl	800cdd8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800d056:	4620      	mov	r0, r4
 800d058:	bd10      	pop	{r4, pc}
 800d05a:	bf00      	nop
 800d05c:	200014f4 	.word	0x200014f4
 800d060:	08011b4c 	.word	0x08011b4c

0800d064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d064:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d066:	4c04      	ldr	r4, [pc, #16]	; (800d078 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800d068:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d06a:	4804      	ldr	r0, [pc, #16]	; (800d07c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800d06c:	4621      	mov	r1, r4
 800d06e:	f7ff feb3 	bl	800cdd8 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800d072:	4620      	mov	r0, r4
 800d074:	bd10      	pop	{r4, pc}
 800d076:	bf00      	nop
 800d078:	200014f4 	.word	0x200014f4
 800d07c:	08011b58 	.word	0x08011b58

0800d080 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800d080:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d084:	4a42      	ldr	r2, [pc, #264]	; (800d190 <USBD_FS_SerialStrDescriptor+0x110>)
 800d086:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800d088:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800d08a:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800d08e:	18c3      	adds	r3, r0, r3
 800d090:	d101      	bne.n	800d096 <USBD_FS_SerialStrDescriptor+0x16>
}
 800d092:	4840      	ldr	r0, [pc, #256]	; (800d194 <USBD_FS_SerialStrDescriptor+0x114>)
 800d094:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800d096:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d09a:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800d09c:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800d09e:	4a3d      	ldr	r2, [pc, #244]	; (800d194 <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800d0a0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0a4:	bf2c      	ite	cs
 800d0a6:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0a8:	3030      	addcc	r0, #48	; 0x30
 800d0aa:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800d0ac:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800d0b0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0b2:	bf8c      	ite	hi
 800d0b4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0b6:	3030      	addls	r0, #48	; 0x30
 800d0b8:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800d0ba:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800d0be:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0c0:	bf8c      	ite	hi
 800d0c2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0c4:	3030      	addls	r0, #48	; 0x30
 800d0c6:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800d0c8:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800d0cc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0ce:	bf8c      	ite	hi
 800d0d0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0d2:	3030      	addls	r0, #48	; 0x30
 800d0d4:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800d0d6:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800d0da:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0dc:	bf8c      	ite	hi
 800d0de:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0e0:	3030      	addls	r0, #48	; 0x30
 800d0e2:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800d0e4:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800d0e8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0ea:	bf8c      	ite	hi
 800d0ec:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0ee:	3030      	addls	r0, #48	; 0x30
 800d0f0:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800d0f2:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800d0f6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0f8:	bf8c      	ite	hi
 800d0fa:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0fc:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800d0fe:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800d102:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800d104:	f04f 0c00 	mov.w	ip, #0
 800d108:	2000      	movs	r0, #0
 800d10a:	f882 c005 	strb.w	ip, [r2, #5]
 800d10e:	73d0      	strb	r0, [r2, #15]
 800d110:	f04f 0c00 	mov.w	ip, #0
 800d114:	2000      	movs	r0, #0
 800d116:	f882 c007 	strb.w	ip, [r2, #7]
 800d11a:	7450      	strb	r0, [r2, #17]
 800d11c:	f04f 0c00 	mov.w	ip, #0
 800d120:	2000      	movs	r0, #0
 800d122:	f882 c009 	strb.w	ip, [r2, #9]
 800d126:	74d0      	strb	r0, [r2, #19]
 800d128:	f04f 0c00 	mov.w	ip, #0
 800d12c:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800d12e:	f003 030f 	and.w	r3, r3, #15
 800d132:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d134:	bf94      	ite	ls
 800d136:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d138:	3337      	addhi	r3, #55	; 0x37
 800d13a:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800d13c:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800d140:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d144:	bf2c      	ite	cs
 800d146:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d148:	3330      	addcc	r3, #48	; 0x30
 800d14a:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800d14c:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800d150:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d152:	bf8c      	ite	hi
 800d154:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d156:	3330      	addls	r3, #48	; 0x30
 800d158:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800d15a:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800d15e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d160:	bf8c      	ite	hi
 800d162:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d164:	3330      	addls	r3, #48	; 0x30
 800d166:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800d168:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800d16c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d16e:	bf94      	ite	ls
 800d170:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d172:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800d174:	f882 c00b 	strb.w	ip, [r2, #11]
 800d178:	7550      	strb	r0, [r2, #21]
 800d17a:	f04f 0c00 	mov.w	ip, #0
 800d17e:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d180:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	75d0      	strb	r0, [r2, #23]
 800d186:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800d18a:	4802      	ldr	r0, [pc, #8]	; (800d194 <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800d18c:	7653      	strb	r3, [r2, #25]
}
 800d18e:	4770      	bx	lr
 800d190:	1ff80000 	.word	0x1ff80000
 800d194:	2000017c 	.word	0x2000017c

0800d198 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d198:	4a04      	ldr	r2, [pc, #16]	; (800d1ac <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800d19a:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d19c:	6853      	ldr	r3, [r2, #4]
 800d19e:	bf0c      	ite	eq
 800d1a0:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800d1a4:	f023 0301 	bicne.w	r3, r3, #1
 800d1a8:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800d1aa:	4770      	bx	lr
 800d1ac:	40010000 	.word	0x40010000

0800d1b0 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800d1b0:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <HAL_PCD_MspInit+0x3c>)
 800d1b2:	6802      	ldr	r2, [r0, #0]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d000      	beq.n	800d1ba <HAL_PCD_MspInit+0xa>
 800d1b8:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d1ba:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800d1bc:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800d1c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800d1c2:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800d1c4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800d1c8:	6259      	str	r1, [r3, #36]	; 0x24
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800d1cc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800d1ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1d2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d1d4:	2014      	movs	r0, #20
 800d1d6:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800d1d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d1da:	f7fb fb85 	bl	80088e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d1de:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d1e0:	b003      	add	sp, #12
 800d1e2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d1e6:	f7fb bbbd 	b.w	8008964 <HAL_NVIC_EnableIRQ>
 800d1ea:	bf00      	nop
 800d1ec:	40005c00 	.word	0x40005c00

0800d1f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f0:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1f2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d1f6:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800d1fa:	f7ff ba63 	b.w	800c6c4 <USBD_LL_SetupStage>
 800d1fe:	bf00      	nop

0800d200 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d200:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d204:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d208:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800d20c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d210:	f7ff ba88 	b.w	800c724 <USBD_LL_DataOutStage>

0800d214 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d214:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d218:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d21c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d21e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d222:	f7ff babd 	b.w	800c7a0 <USBD_LL_DataInStage>
 800d226:	bf00      	nop

0800d228 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d228:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d22c:	f7ff bb5c 	b.w	800c8e8 <USBD_LL_SOF>

0800d230 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d230:	6883      	ldr	r3, [r0, #8]
{
 800d232:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d234:	2b02      	cmp	r3, #2
{
 800d236:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d238:	d001      	beq.n	800d23e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800d23a:	f7fa fbff 	bl	8007a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d23e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800d242:	2101      	movs	r1, #1
 800d244:	f7ff fb3a 	bl	800c8bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d248:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800d24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	f7ff bb0c 	b.w	800c86c <USBD_LL_Reset>

0800d254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d254:	b510      	push	{r4, lr}
 800d256:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d258:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d25c:	f7ff fb32 	bl	800c8c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d260:	69a3      	ldr	r3, [r4, #24]
 800d262:	b123      	cbz	r3, 800d26e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d264:	4a02      	ldr	r2, [pc, #8]	; (800d270 <HAL_PCD_SuspendCallback+0x1c>)
 800d266:	6913      	ldr	r3, [r2, #16]
 800d268:	f043 0306 	orr.w	r3, r3, #6
 800d26c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d26e:	bd10      	pop	{r4, pc}
 800d270:	e000ed00 	.word	0xe000ed00

0800d274 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d274:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d278:	f7ff bb2e 	b.w	800c8d8 <USBD_LL_Resume>

0800d27c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d27c:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d27e:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800d280:	4b1e      	ldr	r3, [pc, #120]	; (800d2fc <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d282:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d284:	605c      	str	r4, [r3, #4]
{
 800d286:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d288:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d28a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d28c:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800d28e:	4a1c      	ldr	r2, [pc, #112]	; (800d300 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800d290:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d294:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800d296:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d29a:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d29c:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800d29e:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d2a0:	f7fc f9ce 	bl	8009640 <HAL_PCD_Init>
 800d2a4:	bb30      	cbnz	r0, 800d2f4 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2318      	movs	r3, #24
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d2b0:	f7fd f8c6 	bl	800a440 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d2b4:	2358      	movs	r3, #88	; 0x58
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2180      	movs	r1, #128	; 0x80
 800d2ba:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d2be:	f7fd f8bf 	bl	800a440 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d2c2:	23c0      	movs	r3, #192	; 0xc0
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2181      	movs	r1, #129	; 0x81
 800d2c8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d2cc:	f7fd f8b8 	bl	800a440 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d2dc:	f7fd f8b0 	bl	800a440 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2182      	movs	r1, #130	; 0x82
 800d2e8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d2ec:	f7fd f8a8 	bl	800a440 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d2f4:	f7fa fba2 	bl	8007a3c <Error_Handler>
 800d2f8:	e7d5      	b.n	800d2a6 <USBD_LL_Init+0x2a>
 800d2fa:	bf00      	nop
 800d2fc:	200016f4 	.word	0x200016f4
 800d300:	40005c00 	.word	0x40005c00

0800d304 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d304:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800d306:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d30a:	f7fc f9fb 	bl	8009704 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d30e:	2803      	cmp	r0, #3
 800d310:	bf96      	itet	ls
 800d312:	4b02      	ldrls	r3, [pc, #8]	; (800d31c <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800d314:	2002      	movhi	r0, #2
 800d316:	5c18      	ldrbls	r0, [r3, r0]
}
 800d318:	bd08      	pop	{r3, pc}
 800d31a:	bf00      	nop
 800d31c:	08011b68 	.word	0x08011b68

0800d320 <USBD_LL_OpenEP>:
{
 800d320:	4694      	mov	ip, r2
 800d322:	b508      	push	{r3, lr}
 800d324:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d326:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d32a:	4663      	mov	r3, ip
 800d32c:	f7fc ff5e 	bl	800a1ec <HAL_PCD_EP_Open>
  switch (hal_status)
 800d330:	2803      	cmp	r0, #3
 800d332:	bf96      	itet	ls
 800d334:	4b01      	ldrls	r3, [pc, #4]	; (800d33c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d336:	2002      	movhi	r0, #2
 800d338:	5c18      	ldrbls	r0, [r3, r0]
}
 800d33a:	bd08      	pop	{r3, pc}
 800d33c:	08011b68 	.word	0x08011b68

0800d340 <USBD_LL_CloseEP>:
{
 800d340:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d342:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d346:	f7fc ff8f 	bl	800a268 <HAL_PCD_EP_Close>
  switch (hal_status)
 800d34a:	2803      	cmp	r0, #3
 800d34c:	bf96      	itet	ls
 800d34e:	4b02      	ldrls	r3, [pc, #8]	; (800d358 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d350:	2002      	movhi	r0, #2
 800d352:	5c18      	ldrbls	r0, [r3, r0]
}
 800d354:	bd08      	pop	{r3, pc}
 800d356:	bf00      	nop
 800d358:	08011b68 	.word	0x08011b68

0800d35c <USBD_LL_StallEP>:
{
 800d35c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d35e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d362:	f7fc fff9 	bl	800a358 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800d366:	2803      	cmp	r0, #3
 800d368:	bf96      	itet	ls
 800d36a:	4b02      	ldrls	r3, [pc, #8]	; (800d374 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d36c:	2002      	movhi	r0, #2
 800d36e:	5c18      	ldrbls	r0, [r3, r0]
}
 800d370:	bd08      	pop	{r3, pc}
 800d372:	bf00      	nop
 800d374:	08011b68 	.word	0x08011b68

0800d378 <USBD_LL_ClearStallEP>:
{
 800d378:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d37a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d37e:	f7fd f823 	bl	800a3c8 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800d382:	2803      	cmp	r0, #3
 800d384:	bf96      	itet	ls
 800d386:	4b02      	ldrls	r3, [pc, #8]	; (800d390 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d388:	2002      	movhi	r0, #2
 800d38a:	5c18      	ldrbls	r0, [r3, r0]
}
 800d38c:	bd08      	pop	{r3, pc}
 800d38e:	bf00      	nop
 800d390:	08011b68 	.word	0x08011b68

0800d394 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d394:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d396:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800d39a:	d406      	bmi.n	800d3aa <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d39c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d3a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d3a4:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800d3a8:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d3ae:	3101      	adds	r1, #1
 800d3b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d3b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d3b8:	7888      	ldrb	r0, [r1, #2]
 800d3ba:	4770      	bx	lr

0800d3bc <USBD_LL_SetUSBAddress>:
{
 800d3bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3be:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d3c2:	f7fc fefd 	bl	800a1c0 <HAL_PCD_SetAddress>
  switch (hal_status)
 800d3c6:	2803      	cmp	r0, #3
 800d3c8:	bf96      	itet	ls
 800d3ca:	4b02      	ldrls	r3, [pc, #8]	; (800d3d4 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3cc:	2002      	movhi	r0, #2
 800d3ce:	5c18      	ldrbls	r0, [r3, r0]
}
 800d3d0:	bd08      	pop	{r3, pc}
 800d3d2:	bf00      	nop
 800d3d4:	08011b68 	.word	0x08011b68

0800d3d8 <USBD_LL_Transmit>:
{
 800d3d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d3de:	f7fc ff97 	bl	800a310 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800d3e2:	2803      	cmp	r0, #3
 800d3e4:	bf96      	itet	ls
 800d3e6:	4b02      	ldrls	r3, [pc, #8]	; (800d3f0 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3e8:	2002      	movhi	r0, #2
 800d3ea:	5c18      	ldrbls	r0, [r3, r0]
}
 800d3ec:	bd08      	pop	{r3, pc}
 800d3ee:	bf00      	nop
 800d3f0:	08011b68 	.word	0x08011b68

0800d3f4 <USBD_LL_PrepareReceive>:
{
 800d3f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d3fa:	f7fc ff67 	bl	800a2cc <HAL_PCD_EP_Receive>
  switch (hal_status)
 800d3fe:	2803      	cmp	r0, #3
 800d400:	bf96      	itet	ls
 800d402:	4b02      	ldrls	r3, [pc, #8]	; (800d40c <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d404:	2002      	movhi	r0, #2
 800d406:	5c18      	ldrbls	r0, [r3, r0]
}
 800d408:	bd08      	pop	{r3, pc}
 800d40a:	bf00      	nop
 800d40c:	08011b68 	.word	0x08011b68

0800d410 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d410:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d414:	f7fc bf72 	b.w	800a2fc <HAL_PCD_EP_GetRxCount>

0800d418 <USBD_static_malloc>:
}
 800d418:	4800      	ldr	r0, [pc, #0]	; (800d41c <USBD_static_malloc+0x4>)
 800d41a:	4770      	bx	lr
 800d41c:	200019e0 	.word	0x200019e0

0800d420 <USBD_static_free>:
}
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop

0800d424 <atof>:
 800d424:	2100      	movs	r1, #0
 800d426:	f001 bae7 	b.w	800e9f8 <strtod>
	...

0800d42c <__errno>:
 800d42c:	4b01      	ldr	r3, [pc, #4]	; (800d434 <__errno+0x8>)
 800d42e:	6818      	ldr	r0, [r3, #0]
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20000198 	.word	0x20000198

0800d438 <__libc_init_array>:
 800d438:	b570      	push	{r4, r5, r6, lr}
 800d43a:	2600      	movs	r6, #0
 800d43c:	4d0c      	ldr	r5, [pc, #48]	; (800d470 <__libc_init_array+0x38>)
 800d43e:	4c0d      	ldr	r4, [pc, #52]	; (800d474 <__libc_init_array+0x3c>)
 800d440:	1b64      	subs	r4, r4, r5
 800d442:	10a4      	asrs	r4, r4, #2
 800d444:	42a6      	cmp	r6, r4
 800d446:	d109      	bne.n	800d45c <__libc_init_array+0x24>
 800d448:	f004 f9dc 	bl	8011804 <_init>
 800d44c:	2600      	movs	r6, #0
 800d44e:	4d0a      	ldr	r5, [pc, #40]	; (800d478 <__libc_init_array+0x40>)
 800d450:	4c0a      	ldr	r4, [pc, #40]	; (800d47c <__libc_init_array+0x44>)
 800d452:	1b64      	subs	r4, r4, r5
 800d454:	10a4      	asrs	r4, r4, #2
 800d456:	42a6      	cmp	r6, r4
 800d458:	d105      	bne.n	800d466 <__libc_init_array+0x2e>
 800d45a:	bd70      	pop	{r4, r5, r6, pc}
 800d45c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d460:	4798      	blx	r3
 800d462:	3601      	adds	r6, #1
 800d464:	e7ee      	b.n	800d444 <__libc_init_array+0xc>
 800d466:	f855 3b04 	ldr.w	r3, [r5], #4
 800d46a:	4798      	blx	r3
 800d46c:	3601      	adds	r6, #1
 800d46e:	e7f2      	b.n	800d456 <__libc_init_array+0x1e>
 800d470:	08012014 	.word	0x08012014
 800d474:	08012014 	.word	0x08012014
 800d478:	08012014 	.word	0x08012014
 800d47c:	08012018 	.word	0x08012018

0800d480 <memset>:
 800d480:	4603      	mov	r3, r0
 800d482:	4402      	add	r2, r0
 800d484:	4293      	cmp	r3, r2
 800d486:	d100      	bne.n	800d48a <memset+0xa>
 800d488:	4770      	bx	lr
 800d48a:	f803 1b01 	strb.w	r1, [r3], #1
 800d48e:	e7f9      	b.n	800d484 <memset+0x4>

0800d490 <__cvt>:
 800d490:	2b00      	cmp	r3, #0
 800d492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d496:	461f      	mov	r7, r3
 800d498:	bfbb      	ittet	lt
 800d49a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d49e:	461f      	movlt	r7, r3
 800d4a0:	2300      	movge	r3, #0
 800d4a2:	232d      	movlt	r3, #45	; 0x2d
 800d4a4:	b088      	sub	sp, #32
 800d4a6:	4614      	mov	r4, r2
 800d4a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d4ac:	7013      	strb	r3, [r2, #0]
 800d4ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d4b4:	f023 0820 	bic.w	r8, r3, #32
 800d4b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4bc:	d005      	beq.n	800d4ca <__cvt+0x3a>
 800d4be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d4c2:	d100      	bne.n	800d4c6 <__cvt+0x36>
 800d4c4:	3501      	adds	r5, #1
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e000      	b.n	800d4cc <__cvt+0x3c>
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	aa07      	add	r2, sp, #28
 800d4ce:	9204      	str	r2, [sp, #16]
 800d4d0:	aa06      	add	r2, sp, #24
 800d4d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d4d6:	e9cd 3500 	strd	r3, r5, [sp]
 800d4da:	4622      	mov	r2, r4
 800d4dc:	463b      	mov	r3, r7
 800d4de:	f001 fb23 	bl	800eb28 <_dtoa_r>
 800d4e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d4e6:	4606      	mov	r6, r0
 800d4e8:	d102      	bne.n	800d4f0 <__cvt+0x60>
 800d4ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4ec:	07db      	lsls	r3, r3, #31
 800d4ee:	d522      	bpl.n	800d536 <__cvt+0xa6>
 800d4f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4f4:	eb06 0905 	add.w	r9, r6, r5
 800d4f8:	d110      	bne.n	800d51c <__cvt+0x8c>
 800d4fa:	7833      	ldrb	r3, [r6, #0]
 800d4fc:	2b30      	cmp	r3, #48	; 0x30
 800d4fe:	d10a      	bne.n	800d516 <__cvt+0x86>
 800d500:	2200      	movs	r2, #0
 800d502:	2300      	movs	r3, #0
 800d504:	4620      	mov	r0, r4
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 fa66 	bl	80009d8 <__aeabi_dcmpeq>
 800d50c:	b918      	cbnz	r0, 800d516 <__cvt+0x86>
 800d50e:	f1c5 0501 	rsb	r5, r5, #1
 800d512:	f8ca 5000 	str.w	r5, [sl]
 800d516:	f8da 3000 	ldr.w	r3, [sl]
 800d51a:	4499      	add	r9, r3
 800d51c:	2200      	movs	r2, #0
 800d51e:	2300      	movs	r3, #0
 800d520:	4620      	mov	r0, r4
 800d522:	4639      	mov	r1, r7
 800d524:	f7f3 fa58 	bl	80009d8 <__aeabi_dcmpeq>
 800d528:	b108      	cbz	r0, 800d52e <__cvt+0x9e>
 800d52a:	f8cd 901c 	str.w	r9, [sp, #28]
 800d52e:	2230      	movs	r2, #48	; 0x30
 800d530:	9b07      	ldr	r3, [sp, #28]
 800d532:	454b      	cmp	r3, r9
 800d534:	d307      	bcc.n	800d546 <__cvt+0xb6>
 800d536:	4630      	mov	r0, r6
 800d538:	9b07      	ldr	r3, [sp, #28]
 800d53a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d53c:	1b9b      	subs	r3, r3, r6
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	b008      	add	sp, #32
 800d542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d546:	1c59      	adds	r1, r3, #1
 800d548:	9107      	str	r1, [sp, #28]
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	e7f0      	b.n	800d530 <__cvt+0xa0>

0800d54e <__exponent>:
 800d54e:	4603      	mov	r3, r0
 800d550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d552:	2900      	cmp	r1, #0
 800d554:	f803 2b02 	strb.w	r2, [r3], #2
 800d558:	bfb6      	itet	lt
 800d55a:	222d      	movlt	r2, #45	; 0x2d
 800d55c:	222b      	movge	r2, #43	; 0x2b
 800d55e:	4249      	neglt	r1, r1
 800d560:	2909      	cmp	r1, #9
 800d562:	7042      	strb	r2, [r0, #1]
 800d564:	dd2b      	ble.n	800d5be <__exponent+0x70>
 800d566:	f10d 0407 	add.w	r4, sp, #7
 800d56a:	46a4      	mov	ip, r4
 800d56c:	270a      	movs	r7, #10
 800d56e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d572:	460a      	mov	r2, r1
 800d574:	46a6      	mov	lr, r4
 800d576:	fb07 1516 	mls	r5, r7, r6, r1
 800d57a:	2a63      	cmp	r2, #99	; 0x63
 800d57c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d580:	4631      	mov	r1, r6
 800d582:	f104 34ff 	add.w	r4, r4, #4294967295
 800d586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d58a:	dcf0      	bgt.n	800d56e <__exponent+0x20>
 800d58c:	3130      	adds	r1, #48	; 0x30
 800d58e:	f1ae 0502 	sub.w	r5, lr, #2
 800d592:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d596:	4629      	mov	r1, r5
 800d598:	1c44      	adds	r4, r0, #1
 800d59a:	4561      	cmp	r1, ip
 800d59c:	d30a      	bcc.n	800d5b4 <__exponent+0x66>
 800d59e:	f10d 0209 	add.w	r2, sp, #9
 800d5a2:	eba2 020e 	sub.w	r2, r2, lr
 800d5a6:	4565      	cmp	r5, ip
 800d5a8:	bf88      	it	hi
 800d5aa:	2200      	movhi	r2, #0
 800d5ac:	4413      	add	r3, r2
 800d5ae:	1a18      	subs	r0, r3, r0
 800d5b0:	b003      	add	sp, #12
 800d5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5bc:	e7ed      	b.n	800d59a <__exponent+0x4c>
 800d5be:	2330      	movs	r3, #48	; 0x30
 800d5c0:	3130      	adds	r1, #48	; 0x30
 800d5c2:	7083      	strb	r3, [r0, #2]
 800d5c4:	70c1      	strb	r1, [r0, #3]
 800d5c6:	1d03      	adds	r3, r0, #4
 800d5c8:	e7f1      	b.n	800d5ae <__exponent+0x60>
	...

0800d5cc <_printf_float>:
 800d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	b091      	sub	sp, #68	; 0x44
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d5d8:	4616      	mov	r6, r2
 800d5da:	461f      	mov	r7, r3
 800d5dc:	4605      	mov	r5, r0
 800d5de:	f002 fbf7 	bl	800fdd0 <_localeconv_r>
 800d5e2:	6803      	ldr	r3, [r0, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e8:	f7f2 fdca 	bl	8000180 <strlen>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	930e      	str	r3, [sp, #56]	; 0x38
 800d5f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d5f4:	900a      	str	r0, [sp, #40]	; 0x28
 800d5f6:	3307      	adds	r3, #7
 800d5f8:	f023 0307 	bic.w	r3, r3, #7
 800d5fc:	f103 0208 	add.w	r2, r3, #8
 800d600:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d604:	f8d4 b000 	ldr.w	fp, [r4]
 800d608:	f8c8 2000 	str.w	r2, [r8]
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d614:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d618:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d61c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d61e:	f04f 32ff 	mov.w	r2, #4294967295
 800d622:	4640      	mov	r0, r8
 800d624:	4b9c      	ldr	r3, [pc, #624]	; (800d898 <_printf_float+0x2cc>)
 800d626:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d628:	f7f3 fa08 	bl	8000a3c <__aeabi_dcmpun>
 800d62c:	bb70      	cbnz	r0, 800d68c <_printf_float+0xc0>
 800d62e:	f04f 32ff 	mov.w	r2, #4294967295
 800d632:	4640      	mov	r0, r8
 800d634:	4b98      	ldr	r3, [pc, #608]	; (800d898 <_printf_float+0x2cc>)
 800d636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d638:	f7f3 f9e2 	bl	8000a00 <__aeabi_dcmple>
 800d63c:	bb30      	cbnz	r0, 800d68c <_printf_float+0xc0>
 800d63e:	2200      	movs	r2, #0
 800d640:	2300      	movs	r3, #0
 800d642:	4640      	mov	r0, r8
 800d644:	4651      	mov	r1, sl
 800d646:	f7f3 f9d1 	bl	80009ec <__aeabi_dcmplt>
 800d64a:	b110      	cbz	r0, 800d652 <_printf_float+0x86>
 800d64c:	232d      	movs	r3, #45	; 0x2d
 800d64e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d652:	4b92      	ldr	r3, [pc, #584]	; (800d89c <_printf_float+0x2d0>)
 800d654:	4892      	ldr	r0, [pc, #584]	; (800d8a0 <_printf_float+0x2d4>)
 800d656:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d65a:	bf94      	ite	ls
 800d65c:	4698      	movls	r8, r3
 800d65e:	4680      	movhi	r8, r0
 800d660:	2303      	movs	r3, #3
 800d662:	f04f 0a00 	mov.w	sl, #0
 800d666:	6123      	str	r3, [r4, #16]
 800d668:	f02b 0304 	bic.w	r3, fp, #4
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	4633      	mov	r3, r6
 800d670:	4621      	mov	r1, r4
 800d672:	4628      	mov	r0, r5
 800d674:	9700      	str	r7, [sp, #0]
 800d676:	aa0f      	add	r2, sp, #60	; 0x3c
 800d678:	f000 f9d4 	bl	800da24 <_printf_common>
 800d67c:	3001      	adds	r0, #1
 800d67e:	f040 8090 	bne.w	800d7a2 <_printf_float+0x1d6>
 800d682:	f04f 30ff 	mov.w	r0, #4294967295
 800d686:	b011      	add	sp, #68	; 0x44
 800d688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68c:	4642      	mov	r2, r8
 800d68e:	4653      	mov	r3, sl
 800d690:	4640      	mov	r0, r8
 800d692:	4651      	mov	r1, sl
 800d694:	f7f3 f9d2 	bl	8000a3c <__aeabi_dcmpun>
 800d698:	b148      	cbz	r0, 800d6ae <_printf_float+0xe2>
 800d69a:	f1ba 0f00 	cmp.w	sl, #0
 800d69e:	bfb8      	it	lt
 800d6a0:	232d      	movlt	r3, #45	; 0x2d
 800d6a2:	4880      	ldr	r0, [pc, #512]	; (800d8a4 <_printf_float+0x2d8>)
 800d6a4:	bfb8      	it	lt
 800d6a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6aa:	4b7f      	ldr	r3, [pc, #508]	; (800d8a8 <_printf_float+0x2dc>)
 800d6ac:	e7d3      	b.n	800d656 <_printf_float+0x8a>
 800d6ae:	6863      	ldr	r3, [r4, #4]
 800d6b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	d142      	bne.n	800d73e <_printf_float+0x172>
 800d6b8:	2306      	movs	r3, #6
 800d6ba:	6063      	str	r3, [r4, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	9206      	str	r2, [sp, #24]
 800d6c0:	aa0e      	add	r2, sp, #56	; 0x38
 800d6c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d6c6:	aa0d      	add	r2, sp, #52	; 0x34
 800d6c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d6cc:	9203      	str	r2, [sp, #12]
 800d6ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d6d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d6d6:	6023      	str	r3, [r4, #0]
 800d6d8:	6863      	ldr	r3, [r4, #4]
 800d6da:	4642      	mov	r2, r8
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	4628      	mov	r0, r5
 800d6e0:	4653      	mov	r3, sl
 800d6e2:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6e4:	f7ff fed4 	bl	800d490 <__cvt>
 800d6e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6ea:	4680      	mov	r8, r0
 800d6ec:	2947      	cmp	r1, #71	; 0x47
 800d6ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d6f0:	d108      	bne.n	800d704 <_printf_float+0x138>
 800d6f2:	1cc8      	adds	r0, r1, #3
 800d6f4:	db02      	blt.n	800d6fc <_printf_float+0x130>
 800d6f6:	6863      	ldr	r3, [r4, #4]
 800d6f8:	4299      	cmp	r1, r3
 800d6fa:	dd40      	ble.n	800d77e <_printf_float+0x1b2>
 800d6fc:	f1a9 0902 	sub.w	r9, r9, #2
 800d700:	fa5f f989 	uxtb.w	r9, r9
 800d704:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d708:	d81f      	bhi.n	800d74a <_printf_float+0x17e>
 800d70a:	464a      	mov	r2, r9
 800d70c:	3901      	subs	r1, #1
 800d70e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d712:	910d      	str	r1, [sp, #52]	; 0x34
 800d714:	f7ff ff1b 	bl	800d54e <__exponent>
 800d718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d71a:	4682      	mov	sl, r0
 800d71c:	1813      	adds	r3, r2, r0
 800d71e:	2a01      	cmp	r2, #1
 800d720:	6123      	str	r3, [r4, #16]
 800d722:	dc02      	bgt.n	800d72a <_printf_float+0x15e>
 800d724:	6822      	ldr	r2, [r4, #0]
 800d726:	07d2      	lsls	r2, r2, #31
 800d728:	d501      	bpl.n	800d72e <_printf_float+0x162>
 800d72a:	3301      	adds	r3, #1
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d732:	2b00      	cmp	r3, #0
 800d734:	d09b      	beq.n	800d66e <_printf_float+0xa2>
 800d736:	232d      	movs	r3, #45	; 0x2d
 800d738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d73c:	e797      	b.n	800d66e <_printf_float+0xa2>
 800d73e:	2947      	cmp	r1, #71	; 0x47
 800d740:	d1bc      	bne.n	800d6bc <_printf_float+0xf0>
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1ba      	bne.n	800d6bc <_printf_float+0xf0>
 800d746:	2301      	movs	r3, #1
 800d748:	e7b7      	b.n	800d6ba <_printf_float+0xee>
 800d74a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d74e:	d118      	bne.n	800d782 <_printf_float+0x1b6>
 800d750:	2900      	cmp	r1, #0
 800d752:	6863      	ldr	r3, [r4, #4]
 800d754:	dd0b      	ble.n	800d76e <_printf_float+0x1a2>
 800d756:	6121      	str	r1, [r4, #16]
 800d758:	b913      	cbnz	r3, 800d760 <_printf_float+0x194>
 800d75a:	6822      	ldr	r2, [r4, #0]
 800d75c:	07d0      	lsls	r0, r2, #31
 800d75e:	d502      	bpl.n	800d766 <_printf_float+0x19a>
 800d760:	3301      	adds	r3, #1
 800d762:	440b      	add	r3, r1
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	f04f 0a00 	mov.w	sl, #0
 800d76a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d76c:	e7df      	b.n	800d72e <_printf_float+0x162>
 800d76e:	b913      	cbnz	r3, 800d776 <_printf_float+0x1aa>
 800d770:	6822      	ldr	r2, [r4, #0]
 800d772:	07d2      	lsls	r2, r2, #31
 800d774:	d501      	bpl.n	800d77a <_printf_float+0x1ae>
 800d776:	3302      	adds	r3, #2
 800d778:	e7f4      	b.n	800d764 <_printf_float+0x198>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e7f2      	b.n	800d764 <_printf_float+0x198>
 800d77e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d784:	4299      	cmp	r1, r3
 800d786:	db05      	blt.n	800d794 <_printf_float+0x1c8>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	6121      	str	r1, [r4, #16]
 800d78c:	07d8      	lsls	r0, r3, #31
 800d78e:	d5ea      	bpl.n	800d766 <_printf_float+0x19a>
 800d790:	1c4b      	adds	r3, r1, #1
 800d792:	e7e7      	b.n	800d764 <_printf_float+0x198>
 800d794:	2900      	cmp	r1, #0
 800d796:	bfcc      	ite	gt
 800d798:	2201      	movgt	r2, #1
 800d79a:	f1c1 0202 	rsble	r2, r1, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	e7e0      	b.n	800d764 <_printf_float+0x198>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	055a      	lsls	r2, r3, #21
 800d7a6:	d407      	bmi.n	800d7b8 <_printf_float+0x1ec>
 800d7a8:	6923      	ldr	r3, [r4, #16]
 800d7aa:	4642      	mov	r2, r8
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b8      	blx	r7
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	d12b      	bne.n	800d80e <_printf_float+0x242>
 800d7b6:	e764      	b.n	800d682 <_printf_float+0xb6>
 800d7b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7bc:	f240 80dd 	bls.w	800d97a <_printf_float+0x3ae>
 800d7c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f7f3 f906 	bl	80009d8 <__aeabi_dcmpeq>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d033      	beq.n	800d838 <_printf_float+0x26c>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	4631      	mov	r1, r6
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	4a35      	ldr	r2, [pc, #212]	; (800d8ac <_printf_float+0x2e0>)
 800d7d8:	47b8      	blx	r7
 800d7da:	3001      	adds	r0, #1
 800d7dc:	f43f af51 	beq.w	800d682 <_printf_float+0xb6>
 800d7e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	db02      	blt.n	800d7ee <_printf_float+0x222>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	07d8      	lsls	r0, r3, #31
 800d7ec:	d50f      	bpl.n	800d80e <_printf_float+0x242>
 800d7ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	47b8      	blx	r7
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	f43f af42 	beq.w	800d682 <_printf_float+0xb6>
 800d7fe:	f04f 0800 	mov.w	r8, #0
 800d802:	f104 091a 	add.w	r9, r4, #26
 800d806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d808:	3b01      	subs	r3, #1
 800d80a:	4543      	cmp	r3, r8
 800d80c:	dc09      	bgt.n	800d822 <_printf_float+0x256>
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	079b      	lsls	r3, r3, #30
 800d812:	f100 8102 	bmi.w	800da1a <_printf_float+0x44e>
 800d816:	68e0      	ldr	r0, [r4, #12]
 800d818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d81a:	4298      	cmp	r0, r3
 800d81c:	bfb8      	it	lt
 800d81e:	4618      	movlt	r0, r3
 800d820:	e731      	b.n	800d686 <_printf_float+0xba>
 800d822:	2301      	movs	r3, #1
 800d824:	464a      	mov	r2, r9
 800d826:	4631      	mov	r1, r6
 800d828:	4628      	mov	r0, r5
 800d82a:	47b8      	blx	r7
 800d82c:	3001      	adds	r0, #1
 800d82e:	f43f af28 	beq.w	800d682 <_printf_float+0xb6>
 800d832:	f108 0801 	add.w	r8, r8, #1
 800d836:	e7e6      	b.n	800d806 <_printf_float+0x23a>
 800d838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	dc38      	bgt.n	800d8b0 <_printf_float+0x2e4>
 800d83e:	2301      	movs	r3, #1
 800d840:	4631      	mov	r1, r6
 800d842:	4628      	mov	r0, r5
 800d844:	4a19      	ldr	r2, [pc, #100]	; (800d8ac <_printf_float+0x2e0>)
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f af1a 	beq.w	800d682 <_printf_float+0xb6>
 800d84e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d852:	4313      	orrs	r3, r2
 800d854:	d102      	bne.n	800d85c <_printf_float+0x290>
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	07d9      	lsls	r1, r3, #31
 800d85a:	d5d8      	bpl.n	800d80e <_printf_float+0x242>
 800d85c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d860:	4631      	mov	r1, r6
 800d862:	4628      	mov	r0, r5
 800d864:	47b8      	blx	r7
 800d866:	3001      	adds	r0, #1
 800d868:	f43f af0b 	beq.w	800d682 <_printf_float+0xb6>
 800d86c:	f04f 0900 	mov.w	r9, #0
 800d870:	f104 0a1a 	add.w	sl, r4, #26
 800d874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d876:	425b      	negs	r3, r3
 800d878:	454b      	cmp	r3, r9
 800d87a:	dc01      	bgt.n	800d880 <_printf_float+0x2b4>
 800d87c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d87e:	e794      	b.n	800d7aa <_printf_float+0x1de>
 800d880:	2301      	movs	r3, #1
 800d882:	4652      	mov	r2, sl
 800d884:	4631      	mov	r1, r6
 800d886:	4628      	mov	r0, r5
 800d888:	47b8      	blx	r7
 800d88a:	3001      	adds	r0, #1
 800d88c:	f43f aef9 	beq.w	800d682 <_printf_float+0xb6>
 800d890:	f109 0901 	add.w	r9, r9, #1
 800d894:	e7ee      	b.n	800d874 <_printf_float+0x2a8>
 800d896:	bf00      	nop
 800d898:	7fefffff 	.word	0x7fefffff
 800d89c:	08011b70 	.word	0x08011b70
 800d8a0:	08011b74 	.word	0x08011b74
 800d8a4:	08011b7c 	.word	0x08011b7c
 800d8a8:	08011b78 	.word	0x08011b78
 800d8ac:	08011b80 	.word	0x08011b80
 800d8b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	bfa8      	it	ge
 800d8b8:	461a      	movge	r2, r3
 800d8ba:	2a00      	cmp	r2, #0
 800d8bc:	4691      	mov	r9, r2
 800d8be:	dc37      	bgt.n	800d930 <_printf_float+0x364>
 800d8c0:	f04f 0b00 	mov.w	fp, #0
 800d8c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8c8:	f104 021a 	add.w	r2, r4, #26
 800d8cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d8d0:	ebaa 0309 	sub.w	r3, sl, r9
 800d8d4:	455b      	cmp	r3, fp
 800d8d6:	dc33      	bgt.n	800d940 <_printf_float+0x374>
 800d8d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	db3b      	blt.n	800d958 <_printf_float+0x38c>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	07da      	lsls	r2, r3, #31
 800d8e4:	d438      	bmi.n	800d958 <_printf_float+0x38c>
 800d8e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d8ea:	eba3 020a 	sub.w	r2, r3, sl
 800d8ee:	eba3 0901 	sub.w	r9, r3, r1
 800d8f2:	4591      	cmp	r9, r2
 800d8f4:	bfa8      	it	ge
 800d8f6:	4691      	movge	r9, r2
 800d8f8:	f1b9 0f00 	cmp.w	r9, #0
 800d8fc:	dc34      	bgt.n	800d968 <_printf_float+0x39c>
 800d8fe:	f04f 0800 	mov.w	r8, #0
 800d902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d906:	f104 0a1a 	add.w	sl, r4, #26
 800d90a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	eba3 0309 	sub.w	r3, r3, r9
 800d914:	4543      	cmp	r3, r8
 800d916:	f77f af7a 	ble.w	800d80e <_printf_float+0x242>
 800d91a:	2301      	movs	r3, #1
 800d91c:	4652      	mov	r2, sl
 800d91e:	4631      	mov	r1, r6
 800d920:	4628      	mov	r0, r5
 800d922:	47b8      	blx	r7
 800d924:	3001      	adds	r0, #1
 800d926:	f43f aeac 	beq.w	800d682 <_printf_float+0xb6>
 800d92a:	f108 0801 	add.w	r8, r8, #1
 800d92e:	e7ec      	b.n	800d90a <_printf_float+0x33e>
 800d930:	4613      	mov	r3, r2
 800d932:	4631      	mov	r1, r6
 800d934:	4642      	mov	r2, r8
 800d936:	4628      	mov	r0, r5
 800d938:	47b8      	blx	r7
 800d93a:	3001      	adds	r0, #1
 800d93c:	d1c0      	bne.n	800d8c0 <_printf_float+0x2f4>
 800d93e:	e6a0      	b.n	800d682 <_printf_float+0xb6>
 800d940:	2301      	movs	r3, #1
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	920b      	str	r2, [sp, #44]	; 0x2c
 800d948:	47b8      	blx	r7
 800d94a:	3001      	adds	r0, #1
 800d94c:	f43f ae99 	beq.w	800d682 <_printf_float+0xb6>
 800d950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d952:	f10b 0b01 	add.w	fp, fp, #1
 800d956:	e7b9      	b.n	800d8cc <_printf_float+0x300>
 800d958:	4631      	mov	r1, r6
 800d95a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d95e:	4628      	mov	r0, r5
 800d960:	47b8      	blx	r7
 800d962:	3001      	adds	r0, #1
 800d964:	d1bf      	bne.n	800d8e6 <_printf_float+0x31a>
 800d966:	e68c      	b.n	800d682 <_printf_float+0xb6>
 800d968:	464b      	mov	r3, r9
 800d96a:	4631      	mov	r1, r6
 800d96c:	4628      	mov	r0, r5
 800d96e:	eb08 020a 	add.w	r2, r8, sl
 800d972:	47b8      	blx	r7
 800d974:	3001      	adds	r0, #1
 800d976:	d1c2      	bne.n	800d8fe <_printf_float+0x332>
 800d978:	e683      	b.n	800d682 <_printf_float+0xb6>
 800d97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d97c:	2a01      	cmp	r2, #1
 800d97e:	dc01      	bgt.n	800d984 <_printf_float+0x3b8>
 800d980:	07db      	lsls	r3, r3, #31
 800d982:	d537      	bpl.n	800d9f4 <_printf_float+0x428>
 800d984:	2301      	movs	r3, #1
 800d986:	4642      	mov	r2, r8
 800d988:	4631      	mov	r1, r6
 800d98a:	4628      	mov	r0, r5
 800d98c:	47b8      	blx	r7
 800d98e:	3001      	adds	r0, #1
 800d990:	f43f ae77 	beq.w	800d682 <_printf_float+0xb6>
 800d994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d998:	4631      	mov	r1, r6
 800d99a:	4628      	mov	r0, r5
 800d99c:	47b8      	blx	r7
 800d99e:	3001      	adds	r0, #1
 800d9a0:	f43f ae6f 	beq.w	800d682 <_printf_float+0xb6>
 800d9a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f7f3 f814 	bl	80009d8 <__aeabi_dcmpeq>
 800d9b0:	b9d8      	cbnz	r0, 800d9ea <_printf_float+0x41e>
 800d9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9b4:	f108 0201 	add.w	r2, r8, #1
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b8      	blx	r7
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	d10e      	bne.n	800d9e2 <_printf_float+0x416>
 800d9c4:	e65d      	b.n	800d682 <_printf_float+0xb6>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	464a      	mov	r2, r9
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	47b8      	blx	r7
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	f43f ae56 	beq.w	800d682 <_printf_float+0xb6>
 800d9d6:	f108 0801 	add.w	r8, r8, #1
 800d9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	4543      	cmp	r3, r8
 800d9e0:	dcf1      	bgt.n	800d9c6 <_printf_float+0x3fa>
 800d9e2:	4653      	mov	r3, sl
 800d9e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9e8:	e6e0      	b.n	800d7ac <_printf_float+0x1e0>
 800d9ea:	f04f 0800 	mov.w	r8, #0
 800d9ee:	f104 091a 	add.w	r9, r4, #26
 800d9f2:	e7f2      	b.n	800d9da <_printf_float+0x40e>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	4642      	mov	r2, r8
 800d9f8:	e7df      	b.n	800d9ba <_printf_float+0x3ee>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	464a      	mov	r2, r9
 800d9fe:	4631      	mov	r1, r6
 800da00:	4628      	mov	r0, r5
 800da02:	47b8      	blx	r7
 800da04:	3001      	adds	r0, #1
 800da06:	f43f ae3c 	beq.w	800d682 <_printf_float+0xb6>
 800da0a:	f108 0801 	add.w	r8, r8, #1
 800da0e:	68e3      	ldr	r3, [r4, #12]
 800da10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da12:	1a5b      	subs	r3, r3, r1
 800da14:	4543      	cmp	r3, r8
 800da16:	dcf0      	bgt.n	800d9fa <_printf_float+0x42e>
 800da18:	e6fd      	b.n	800d816 <_printf_float+0x24a>
 800da1a:	f04f 0800 	mov.w	r8, #0
 800da1e:	f104 0919 	add.w	r9, r4, #25
 800da22:	e7f4      	b.n	800da0e <_printf_float+0x442>

0800da24 <_printf_common>:
 800da24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da28:	4616      	mov	r6, r2
 800da2a:	4699      	mov	r9, r3
 800da2c:	688a      	ldr	r2, [r1, #8]
 800da2e:	690b      	ldr	r3, [r1, #16]
 800da30:	4607      	mov	r7, r0
 800da32:	4293      	cmp	r3, r2
 800da34:	bfb8      	it	lt
 800da36:	4613      	movlt	r3, r2
 800da38:	6033      	str	r3, [r6, #0]
 800da3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da3e:	460c      	mov	r4, r1
 800da40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da44:	b10a      	cbz	r2, 800da4a <_printf_common+0x26>
 800da46:	3301      	adds	r3, #1
 800da48:	6033      	str	r3, [r6, #0]
 800da4a:	6823      	ldr	r3, [r4, #0]
 800da4c:	0699      	lsls	r1, r3, #26
 800da4e:	bf42      	ittt	mi
 800da50:	6833      	ldrmi	r3, [r6, #0]
 800da52:	3302      	addmi	r3, #2
 800da54:	6033      	strmi	r3, [r6, #0]
 800da56:	6825      	ldr	r5, [r4, #0]
 800da58:	f015 0506 	ands.w	r5, r5, #6
 800da5c:	d106      	bne.n	800da6c <_printf_common+0x48>
 800da5e:	f104 0a19 	add.w	sl, r4, #25
 800da62:	68e3      	ldr	r3, [r4, #12]
 800da64:	6832      	ldr	r2, [r6, #0]
 800da66:	1a9b      	subs	r3, r3, r2
 800da68:	42ab      	cmp	r3, r5
 800da6a:	dc28      	bgt.n	800dabe <_printf_common+0x9a>
 800da6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da70:	1e13      	subs	r3, r2, #0
 800da72:	6822      	ldr	r2, [r4, #0]
 800da74:	bf18      	it	ne
 800da76:	2301      	movne	r3, #1
 800da78:	0692      	lsls	r2, r2, #26
 800da7a:	d42d      	bmi.n	800dad8 <_printf_common+0xb4>
 800da7c:	4649      	mov	r1, r9
 800da7e:	4638      	mov	r0, r7
 800da80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da84:	47c0      	blx	r8
 800da86:	3001      	adds	r0, #1
 800da88:	d020      	beq.n	800dacc <_printf_common+0xa8>
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	68e5      	ldr	r5, [r4, #12]
 800da8e:	f003 0306 	and.w	r3, r3, #6
 800da92:	2b04      	cmp	r3, #4
 800da94:	bf18      	it	ne
 800da96:	2500      	movne	r5, #0
 800da98:	6832      	ldr	r2, [r6, #0]
 800da9a:	f04f 0600 	mov.w	r6, #0
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	bf08      	it	eq
 800daa2:	1aad      	subeq	r5, r5, r2
 800daa4:	6922      	ldr	r2, [r4, #16]
 800daa6:	bf08      	it	eq
 800daa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daac:	4293      	cmp	r3, r2
 800daae:	bfc4      	itt	gt
 800dab0:	1a9b      	subgt	r3, r3, r2
 800dab2:	18ed      	addgt	r5, r5, r3
 800dab4:	341a      	adds	r4, #26
 800dab6:	42b5      	cmp	r5, r6
 800dab8:	d11a      	bne.n	800daf0 <_printf_common+0xcc>
 800daba:	2000      	movs	r0, #0
 800dabc:	e008      	b.n	800dad0 <_printf_common+0xac>
 800dabe:	2301      	movs	r3, #1
 800dac0:	4652      	mov	r2, sl
 800dac2:	4649      	mov	r1, r9
 800dac4:	4638      	mov	r0, r7
 800dac6:	47c0      	blx	r8
 800dac8:	3001      	adds	r0, #1
 800daca:	d103      	bne.n	800dad4 <_printf_common+0xb0>
 800dacc:	f04f 30ff 	mov.w	r0, #4294967295
 800dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad4:	3501      	adds	r5, #1
 800dad6:	e7c4      	b.n	800da62 <_printf_common+0x3e>
 800dad8:	2030      	movs	r0, #48	; 0x30
 800dada:	18e1      	adds	r1, r4, r3
 800dadc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dae6:	4422      	add	r2, r4
 800dae8:	3302      	adds	r3, #2
 800daea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800daee:	e7c5      	b.n	800da7c <_printf_common+0x58>
 800daf0:	2301      	movs	r3, #1
 800daf2:	4622      	mov	r2, r4
 800daf4:	4649      	mov	r1, r9
 800daf6:	4638      	mov	r0, r7
 800daf8:	47c0      	blx	r8
 800dafa:	3001      	adds	r0, #1
 800dafc:	d0e6      	beq.n	800dacc <_printf_common+0xa8>
 800dafe:	3601      	adds	r6, #1
 800db00:	e7d9      	b.n	800dab6 <_printf_common+0x92>
	...

0800db04 <_printf_i>:
 800db04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db08:	7e0f      	ldrb	r7, [r1, #24]
 800db0a:	4691      	mov	r9, r2
 800db0c:	2f78      	cmp	r7, #120	; 0x78
 800db0e:	4680      	mov	r8, r0
 800db10:	460c      	mov	r4, r1
 800db12:	469a      	mov	sl, r3
 800db14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db1a:	d807      	bhi.n	800db2c <_printf_i+0x28>
 800db1c:	2f62      	cmp	r7, #98	; 0x62
 800db1e:	d80a      	bhi.n	800db36 <_printf_i+0x32>
 800db20:	2f00      	cmp	r7, #0
 800db22:	f000 80d9 	beq.w	800dcd8 <_printf_i+0x1d4>
 800db26:	2f58      	cmp	r7, #88	; 0x58
 800db28:	f000 80a4 	beq.w	800dc74 <_printf_i+0x170>
 800db2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db34:	e03a      	b.n	800dbac <_printf_i+0xa8>
 800db36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db3a:	2b15      	cmp	r3, #21
 800db3c:	d8f6      	bhi.n	800db2c <_printf_i+0x28>
 800db3e:	a101      	add	r1, pc, #4	; (adr r1, 800db44 <_printf_i+0x40>)
 800db40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db44:	0800db9d 	.word	0x0800db9d
 800db48:	0800dbb1 	.word	0x0800dbb1
 800db4c:	0800db2d 	.word	0x0800db2d
 800db50:	0800db2d 	.word	0x0800db2d
 800db54:	0800db2d 	.word	0x0800db2d
 800db58:	0800db2d 	.word	0x0800db2d
 800db5c:	0800dbb1 	.word	0x0800dbb1
 800db60:	0800db2d 	.word	0x0800db2d
 800db64:	0800db2d 	.word	0x0800db2d
 800db68:	0800db2d 	.word	0x0800db2d
 800db6c:	0800db2d 	.word	0x0800db2d
 800db70:	0800dcbf 	.word	0x0800dcbf
 800db74:	0800dbe1 	.word	0x0800dbe1
 800db78:	0800dca1 	.word	0x0800dca1
 800db7c:	0800db2d 	.word	0x0800db2d
 800db80:	0800db2d 	.word	0x0800db2d
 800db84:	0800dce1 	.word	0x0800dce1
 800db88:	0800db2d 	.word	0x0800db2d
 800db8c:	0800dbe1 	.word	0x0800dbe1
 800db90:	0800db2d 	.word	0x0800db2d
 800db94:	0800db2d 	.word	0x0800db2d
 800db98:	0800dca9 	.word	0x0800dca9
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	1d1a      	adds	r2, r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	602a      	str	r2, [r5, #0]
 800dba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbac:	2301      	movs	r3, #1
 800dbae:	e0a4      	b.n	800dcfa <_printf_i+0x1f6>
 800dbb0:	6820      	ldr	r0, [r4, #0]
 800dbb2:	6829      	ldr	r1, [r5, #0]
 800dbb4:	0606      	lsls	r6, r0, #24
 800dbb6:	f101 0304 	add.w	r3, r1, #4
 800dbba:	d50a      	bpl.n	800dbd2 <_printf_i+0xce>
 800dbbc:	680e      	ldr	r6, [r1, #0]
 800dbbe:	602b      	str	r3, [r5, #0]
 800dbc0:	2e00      	cmp	r6, #0
 800dbc2:	da03      	bge.n	800dbcc <_printf_i+0xc8>
 800dbc4:	232d      	movs	r3, #45	; 0x2d
 800dbc6:	4276      	negs	r6, r6
 800dbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbcc:	230a      	movs	r3, #10
 800dbce:	485e      	ldr	r0, [pc, #376]	; (800dd48 <_printf_i+0x244>)
 800dbd0:	e019      	b.n	800dc06 <_printf_i+0x102>
 800dbd2:	680e      	ldr	r6, [r1, #0]
 800dbd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbd8:	602b      	str	r3, [r5, #0]
 800dbda:	bf18      	it	ne
 800dbdc:	b236      	sxthne	r6, r6
 800dbde:	e7ef      	b.n	800dbc0 <_printf_i+0xbc>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	6820      	ldr	r0, [r4, #0]
 800dbe4:	1d19      	adds	r1, r3, #4
 800dbe6:	6029      	str	r1, [r5, #0]
 800dbe8:	0601      	lsls	r1, r0, #24
 800dbea:	d501      	bpl.n	800dbf0 <_printf_i+0xec>
 800dbec:	681e      	ldr	r6, [r3, #0]
 800dbee:	e002      	b.n	800dbf6 <_printf_i+0xf2>
 800dbf0:	0646      	lsls	r6, r0, #25
 800dbf2:	d5fb      	bpl.n	800dbec <_printf_i+0xe8>
 800dbf4:	881e      	ldrh	r6, [r3, #0]
 800dbf6:	2f6f      	cmp	r7, #111	; 0x6f
 800dbf8:	bf0c      	ite	eq
 800dbfa:	2308      	moveq	r3, #8
 800dbfc:	230a      	movne	r3, #10
 800dbfe:	4852      	ldr	r0, [pc, #328]	; (800dd48 <_printf_i+0x244>)
 800dc00:	2100      	movs	r1, #0
 800dc02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc06:	6865      	ldr	r5, [r4, #4]
 800dc08:	2d00      	cmp	r5, #0
 800dc0a:	bfa8      	it	ge
 800dc0c:	6821      	ldrge	r1, [r4, #0]
 800dc0e:	60a5      	str	r5, [r4, #8]
 800dc10:	bfa4      	itt	ge
 800dc12:	f021 0104 	bicge.w	r1, r1, #4
 800dc16:	6021      	strge	r1, [r4, #0]
 800dc18:	b90e      	cbnz	r6, 800dc1e <_printf_i+0x11a>
 800dc1a:	2d00      	cmp	r5, #0
 800dc1c:	d04d      	beq.n	800dcba <_printf_i+0x1b6>
 800dc1e:	4615      	mov	r5, r2
 800dc20:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc24:	fb03 6711 	mls	r7, r3, r1, r6
 800dc28:	5dc7      	ldrb	r7, [r0, r7]
 800dc2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc2e:	4637      	mov	r7, r6
 800dc30:	42bb      	cmp	r3, r7
 800dc32:	460e      	mov	r6, r1
 800dc34:	d9f4      	bls.n	800dc20 <_printf_i+0x11c>
 800dc36:	2b08      	cmp	r3, #8
 800dc38:	d10b      	bne.n	800dc52 <_printf_i+0x14e>
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	07de      	lsls	r6, r3, #31
 800dc3e:	d508      	bpl.n	800dc52 <_printf_i+0x14e>
 800dc40:	6923      	ldr	r3, [r4, #16]
 800dc42:	6861      	ldr	r1, [r4, #4]
 800dc44:	4299      	cmp	r1, r3
 800dc46:	bfde      	ittt	le
 800dc48:	2330      	movle	r3, #48	; 0x30
 800dc4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc52:	1b52      	subs	r2, r2, r5
 800dc54:	6122      	str	r2, [r4, #16]
 800dc56:	464b      	mov	r3, r9
 800dc58:	4621      	mov	r1, r4
 800dc5a:	4640      	mov	r0, r8
 800dc5c:	f8cd a000 	str.w	sl, [sp]
 800dc60:	aa03      	add	r2, sp, #12
 800dc62:	f7ff fedf 	bl	800da24 <_printf_common>
 800dc66:	3001      	adds	r0, #1
 800dc68:	d14c      	bne.n	800dd04 <_printf_i+0x200>
 800dc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6e:	b004      	add	sp, #16
 800dc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc74:	4834      	ldr	r0, [pc, #208]	; (800dd48 <_printf_i+0x244>)
 800dc76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc7a:	6829      	ldr	r1, [r5, #0]
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc82:	6029      	str	r1, [r5, #0]
 800dc84:	061d      	lsls	r5, r3, #24
 800dc86:	d514      	bpl.n	800dcb2 <_printf_i+0x1ae>
 800dc88:	07df      	lsls	r7, r3, #31
 800dc8a:	bf44      	itt	mi
 800dc8c:	f043 0320 	orrmi.w	r3, r3, #32
 800dc90:	6023      	strmi	r3, [r4, #0]
 800dc92:	b91e      	cbnz	r6, 800dc9c <_printf_i+0x198>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	f023 0320 	bic.w	r3, r3, #32
 800dc9a:	6023      	str	r3, [r4, #0]
 800dc9c:	2310      	movs	r3, #16
 800dc9e:	e7af      	b.n	800dc00 <_printf_i+0xfc>
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	f043 0320 	orr.w	r3, r3, #32
 800dca6:	6023      	str	r3, [r4, #0]
 800dca8:	2378      	movs	r3, #120	; 0x78
 800dcaa:	4828      	ldr	r0, [pc, #160]	; (800dd4c <_printf_i+0x248>)
 800dcac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcb0:	e7e3      	b.n	800dc7a <_printf_i+0x176>
 800dcb2:	0659      	lsls	r1, r3, #25
 800dcb4:	bf48      	it	mi
 800dcb6:	b2b6      	uxthmi	r6, r6
 800dcb8:	e7e6      	b.n	800dc88 <_printf_i+0x184>
 800dcba:	4615      	mov	r5, r2
 800dcbc:	e7bb      	b.n	800dc36 <_printf_i+0x132>
 800dcbe:	682b      	ldr	r3, [r5, #0]
 800dcc0:	6826      	ldr	r6, [r4, #0]
 800dcc2:	1d18      	adds	r0, r3, #4
 800dcc4:	6961      	ldr	r1, [r4, #20]
 800dcc6:	6028      	str	r0, [r5, #0]
 800dcc8:	0635      	lsls	r5, r6, #24
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	d501      	bpl.n	800dcd2 <_printf_i+0x1ce>
 800dcce:	6019      	str	r1, [r3, #0]
 800dcd0:	e002      	b.n	800dcd8 <_printf_i+0x1d4>
 800dcd2:	0670      	lsls	r0, r6, #25
 800dcd4:	d5fb      	bpl.n	800dcce <_printf_i+0x1ca>
 800dcd6:	8019      	strh	r1, [r3, #0]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	4615      	mov	r5, r2
 800dcdc:	6123      	str	r3, [r4, #16]
 800dcde:	e7ba      	b.n	800dc56 <_printf_i+0x152>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	2100      	movs	r1, #0
 800dce4:	1d1a      	adds	r2, r3, #4
 800dce6:	602a      	str	r2, [r5, #0]
 800dce8:	681d      	ldr	r5, [r3, #0]
 800dcea:	6862      	ldr	r2, [r4, #4]
 800dcec:	4628      	mov	r0, r5
 800dcee:	f002 f88d 	bl	800fe0c <memchr>
 800dcf2:	b108      	cbz	r0, 800dcf8 <_printf_i+0x1f4>
 800dcf4:	1b40      	subs	r0, r0, r5
 800dcf6:	6060      	str	r0, [r4, #4]
 800dcf8:	6863      	ldr	r3, [r4, #4]
 800dcfa:	6123      	str	r3, [r4, #16]
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd02:	e7a8      	b.n	800dc56 <_printf_i+0x152>
 800dd04:	462a      	mov	r2, r5
 800dd06:	4649      	mov	r1, r9
 800dd08:	4640      	mov	r0, r8
 800dd0a:	6923      	ldr	r3, [r4, #16]
 800dd0c:	47d0      	blx	sl
 800dd0e:	3001      	adds	r0, #1
 800dd10:	d0ab      	beq.n	800dc6a <_printf_i+0x166>
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	079b      	lsls	r3, r3, #30
 800dd16:	d413      	bmi.n	800dd40 <_printf_i+0x23c>
 800dd18:	68e0      	ldr	r0, [r4, #12]
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	4298      	cmp	r0, r3
 800dd1e:	bfb8      	it	lt
 800dd20:	4618      	movlt	r0, r3
 800dd22:	e7a4      	b.n	800dc6e <_printf_i+0x16a>
 800dd24:	2301      	movs	r3, #1
 800dd26:	4632      	mov	r2, r6
 800dd28:	4649      	mov	r1, r9
 800dd2a:	4640      	mov	r0, r8
 800dd2c:	47d0      	blx	sl
 800dd2e:	3001      	adds	r0, #1
 800dd30:	d09b      	beq.n	800dc6a <_printf_i+0x166>
 800dd32:	3501      	adds	r5, #1
 800dd34:	68e3      	ldr	r3, [r4, #12]
 800dd36:	9903      	ldr	r1, [sp, #12]
 800dd38:	1a5b      	subs	r3, r3, r1
 800dd3a:	42ab      	cmp	r3, r5
 800dd3c:	dcf2      	bgt.n	800dd24 <_printf_i+0x220>
 800dd3e:	e7eb      	b.n	800dd18 <_printf_i+0x214>
 800dd40:	2500      	movs	r5, #0
 800dd42:	f104 0619 	add.w	r6, r4, #25
 800dd46:	e7f5      	b.n	800dd34 <_printf_i+0x230>
 800dd48:	08011b82 	.word	0x08011b82
 800dd4c:	08011b93 	.word	0x08011b93

0800dd50 <sniprintf>:
 800dd50:	b40c      	push	{r2, r3}
 800dd52:	b530      	push	{r4, r5, lr}
 800dd54:	4b17      	ldr	r3, [pc, #92]	; (800ddb4 <sniprintf+0x64>)
 800dd56:	1e0c      	subs	r4, r1, #0
 800dd58:	681d      	ldr	r5, [r3, #0]
 800dd5a:	b09d      	sub	sp, #116	; 0x74
 800dd5c:	da08      	bge.n	800dd70 <sniprintf+0x20>
 800dd5e:	238b      	movs	r3, #139	; 0x8b
 800dd60:	f04f 30ff 	mov.w	r0, #4294967295
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	b01d      	add	sp, #116	; 0x74
 800dd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd6c:	b002      	add	sp, #8
 800dd6e:	4770      	bx	lr
 800dd70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dd74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd78:	bf0c      	ite	eq
 800dd7a:	4623      	moveq	r3, r4
 800dd7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd80:	9304      	str	r3, [sp, #16]
 800dd82:	9307      	str	r3, [sp, #28]
 800dd84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd88:	9002      	str	r0, [sp, #8]
 800dd8a:	9006      	str	r0, [sp, #24]
 800dd8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd90:	4628      	mov	r0, r5
 800dd92:	ab21      	add	r3, sp, #132	; 0x84
 800dd94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd96:	a902      	add	r1, sp, #8
 800dd98:	9301      	str	r3, [sp, #4]
 800dd9a:	f002 fe57 	bl	8010a4c <_svfiprintf_r>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	bfbc      	itt	lt
 800dda2:	238b      	movlt	r3, #139	; 0x8b
 800dda4:	602b      	strlt	r3, [r5, #0]
 800dda6:	2c00      	cmp	r4, #0
 800dda8:	d0dd      	beq.n	800dd66 <sniprintf+0x16>
 800ddaa:	2200      	movs	r2, #0
 800ddac:	9b02      	ldr	r3, [sp, #8]
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	e7d9      	b.n	800dd66 <sniprintf+0x16>
 800ddb2:	bf00      	nop
 800ddb4:	20000198 	.word	0x20000198

0800ddb8 <strncmp>:
 800ddb8:	4603      	mov	r3, r0
 800ddba:	b510      	push	{r4, lr}
 800ddbc:	b172      	cbz	r2, 800dddc <strncmp+0x24>
 800ddbe:	3901      	subs	r1, #1
 800ddc0:	1884      	adds	r4, r0, r2
 800ddc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ddc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ddca:	4290      	cmp	r0, r2
 800ddcc:	d101      	bne.n	800ddd2 <strncmp+0x1a>
 800ddce:	42a3      	cmp	r3, r4
 800ddd0:	d101      	bne.n	800ddd6 <strncmp+0x1e>
 800ddd2:	1a80      	subs	r0, r0, r2
 800ddd4:	bd10      	pop	{r4, pc}
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d1f3      	bne.n	800ddc2 <strncmp+0xa>
 800ddda:	e7fa      	b.n	800ddd2 <strncmp+0x1a>
 800dddc:	4610      	mov	r0, r2
 800ddde:	e7f9      	b.n	800ddd4 <strncmp+0x1c>

0800dde0 <sulp>:
 800dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde4:	460f      	mov	r7, r1
 800dde6:	4690      	mov	r8, r2
 800dde8:	f002 fb9c 	bl	8010524 <__ulp>
 800ddec:	4604      	mov	r4, r0
 800ddee:	460d      	mov	r5, r1
 800ddf0:	f1b8 0f00 	cmp.w	r8, #0
 800ddf4:	d011      	beq.n	800de1a <sulp+0x3a>
 800ddf6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ddfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	dd0b      	ble.n	800de1a <sulp+0x3a>
 800de02:	2400      	movs	r4, #0
 800de04:	051b      	lsls	r3, r3, #20
 800de06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800de0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800de0e:	4622      	mov	r2, r4
 800de10:	462b      	mov	r3, r5
 800de12:	f7f2 fb79 	bl	8000508 <__aeabi_dmul>
 800de16:	4604      	mov	r4, r0
 800de18:	460d      	mov	r5, r1
 800de1a:	4620      	mov	r0, r4
 800de1c:	4629      	mov	r1, r5
 800de1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de22:	0000      	movs	r0, r0
 800de24:	0000      	movs	r0, r0
	...

0800de28 <_strtod_l>:
 800de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2c:	469b      	mov	fp, r3
 800de2e:	2300      	movs	r3, #0
 800de30:	b09f      	sub	sp, #124	; 0x7c
 800de32:	931a      	str	r3, [sp, #104]	; 0x68
 800de34:	4b9e      	ldr	r3, [pc, #632]	; (800e0b0 <_strtod_l+0x288>)
 800de36:	4682      	mov	sl, r0
 800de38:	681f      	ldr	r7, [r3, #0]
 800de3a:	460e      	mov	r6, r1
 800de3c:	4638      	mov	r0, r7
 800de3e:	9215      	str	r2, [sp, #84]	; 0x54
 800de40:	f7f2 f99e 	bl	8000180 <strlen>
 800de44:	f04f 0800 	mov.w	r8, #0
 800de48:	4604      	mov	r4, r0
 800de4a:	f04f 0900 	mov.w	r9, #0
 800de4e:	9619      	str	r6, [sp, #100]	; 0x64
 800de50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de52:	781a      	ldrb	r2, [r3, #0]
 800de54:	2a2b      	cmp	r2, #43	; 0x2b
 800de56:	d04c      	beq.n	800def2 <_strtod_l+0xca>
 800de58:	d83a      	bhi.n	800ded0 <_strtod_l+0xa8>
 800de5a:	2a0d      	cmp	r2, #13
 800de5c:	d833      	bhi.n	800dec6 <_strtod_l+0x9e>
 800de5e:	2a08      	cmp	r2, #8
 800de60:	d833      	bhi.n	800deca <_strtod_l+0xa2>
 800de62:	2a00      	cmp	r2, #0
 800de64:	d03d      	beq.n	800dee2 <_strtod_l+0xba>
 800de66:	2300      	movs	r3, #0
 800de68:	930a      	str	r3, [sp, #40]	; 0x28
 800de6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800de6c:	782b      	ldrb	r3, [r5, #0]
 800de6e:	2b30      	cmp	r3, #48	; 0x30
 800de70:	f040 80aa 	bne.w	800dfc8 <_strtod_l+0x1a0>
 800de74:	786b      	ldrb	r3, [r5, #1]
 800de76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de7a:	2b58      	cmp	r3, #88	; 0x58
 800de7c:	d166      	bne.n	800df4c <_strtod_l+0x124>
 800de7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de80:	4650      	mov	r0, sl
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	ab1a      	add	r3, sp, #104	; 0x68
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	4a8a      	ldr	r2, [pc, #552]	; (800e0b4 <_strtod_l+0x28c>)
 800de8a:	f8cd b008 	str.w	fp, [sp, #8]
 800de8e:	ab1b      	add	r3, sp, #108	; 0x6c
 800de90:	a919      	add	r1, sp, #100	; 0x64
 800de92:	f001 fc9f 	bl	800f7d4 <__gethex>
 800de96:	f010 0607 	ands.w	r6, r0, #7
 800de9a:	4604      	mov	r4, r0
 800de9c:	d005      	beq.n	800deaa <_strtod_l+0x82>
 800de9e:	2e06      	cmp	r6, #6
 800dea0:	d129      	bne.n	800def6 <_strtod_l+0xce>
 800dea2:	2300      	movs	r3, #0
 800dea4:	3501      	adds	r5, #1
 800dea6:	9519      	str	r5, [sp, #100]	; 0x64
 800dea8:	930a      	str	r3, [sp, #40]	; 0x28
 800deaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800deac:	2b00      	cmp	r3, #0
 800deae:	f040 858a 	bne.w	800e9c6 <_strtod_l+0xb9e>
 800deb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb4:	b1d3      	cbz	r3, 800deec <_strtod_l+0xc4>
 800deb6:	4642      	mov	r2, r8
 800deb8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800debc:	4610      	mov	r0, r2
 800debe:	4619      	mov	r1, r3
 800dec0:	b01f      	add	sp, #124	; 0x7c
 800dec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec6:	2a20      	cmp	r2, #32
 800dec8:	d1cd      	bne.n	800de66 <_strtod_l+0x3e>
 800deca:	3301      	adds	r3, #1
 800decc:	9319      	str	r3, [sp, #100]	; 0x64
 800dece:	e7bf      	b.n	800de50 <_strtod_l+0x28>
 800ded0:	2a2d      	cmp	r2, #45	; 0x2d
 800ded2:	d1c8      	bne.n	800de66 <_strtod_l+0x3e>
 800ded4:	2201      	movs	r2, #1
 800ded6:	920a      	str	r2, [sp, #40]	; 0x28
 800ded8:	1c5a      	adds	r2, r3, #1
 800deda:	9219      	str	r2, [sp, #100]	; 0x64
 800dedc:	785b      	ldrb	r3, [r3, #1]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d1c3      	bne.n	800de6a <_strtod_l+0x42>
 800dee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee4:	9619      	str	r6, [sp, #100]	; 0x64
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f040 856b 	bne.w	800e9c2 <_strtod_l+0xb9a>
 800deec:	4642      	mov	r2, r8
 800deee:	464b      	mov	r3, r9
 800def0:	e7e4      	b.n	800debc <_strtod_l+0x94>
 800def2:	2200      	movs	r2, #0
 800def4:	e7ef      	b.n	800ded6 <_strtod_l+0xae>
 800def6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800def8:	b13a      	cbz	r2, 800df0a <_strtod_l+0xe2>
 800defa:	2135      	movs	r1, #53	; 0x35
 800defc:	a81c      	add	r0, sp, #112	; 0x70
 800defe:	f002 fc15 	bl	801072c <__copybits>
 800df02:	4650      	mov	r0, sl
 800df04:	991a      	ldr	r1, [sp, #104]	; 0x68
 800df06:	f001 ffdd 	bl	800fec4 <_Bfree>
 800df0a:	3e01      	subs	r6, #1
 800df0c:	2e04      	cmp	r6, #4
 800df0e:	d806      	bhi.n	800df1e <_strtod_l+0xf6>
 800df10:	e8df f006 	tbb	[pc, r6]
 800df14:	1714030a 	.word	0x1714030a
 800df18:	0a          	.byte	0x0a
 800df19:	00          	.byte	0x00
 800df1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800df1e:	0721      	lsls	r1, r4, #28
 800df20:	d5c3      	bpl.n	800deaa <_strtod_l+0x82>
 800df22:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800df26:	e7c0      	b.n	800deaa <_strtod_l+0x82>
 800df28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800df2a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800df2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800df32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800df36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800df3a:	e7f0      	b.n	800df1e <_strtod_l+0xf6>
 800df3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e0b8 <_strtod_l+0x290>
 800df40:	e7ed      	b.n	800df1e <_strtod_l+0xf6>
 800df42:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800df46:	f04f 38ff 	mov.w	r8, #4294967295
 800df4a:	e7e8      	b.n	800df1e <_strtod_l+0xf6>
 800df4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df4e:	1c5a      	adds	r2, r3, #1
 800df50:	9219      	str	r2, [sp, #100]	; 0x64
 800df52:	785b      	ldrb	r3, [r3, #1]
 800df54:	2b30      	cmp	r3, #48	; 0x30
 800df56:	d0f9      	beq.n	800df4c <_strtod_l+0x124>
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d0a6      	beq.n	800deaa <_strtod_l+0x82>
 800df5c:	2301      	movs	r3, #1
 800df5e:	9307      	str	r3, [sp, #28]
 800df60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df62:	220a      	movs	r2, #10
 800df64:	9308      	str	r3, [sp, #32]
 800df66:	2300      	movs	r3, #0
 800df68:	469b      	mov	fp, r3
 800df6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800df6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800df70:	7805      	ldrb	r5, [r0, #0]
 800df72:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800df76:	b2d9      	uxtb	r1, r3
 800df78:	2909      	cmp	r1, #9
 800df7a:	d927      	bls.n	800dfcc <_strtod_l+0x1a4>
 800df7c:	4622      	mov	r2, r4
 800df7e:	4639      	mov	r1, r7
 800df80:	f7ff ff1a 	bl	800ddb8 <strncmp>
 800df84:	2800      	cmp	r0, #0
 800df86:	d033      	beq.n	800dff0 <_strtod_l+0x1c8>
 800df88:	2000      	movs	r0, #0
 800df8a:	462a      	mov	r2, r5
 800df8c:	465c      	mov	r4, fp
 800df8e:	4603      	mov	r3, r0
 800df90:	9004      	str	r0, [sp, #16]
 800df92:	2a65      	cmp	r2, #101	; 0x65
 800df94:	d001      	beq.n	800df9a <_strtod_l+0x172>
 800df96:	2a45      	cmp	r2, #69	; 0x45
 800df98:	d114      	bne.n	800dfc4 <_strtod_l+0x19c>
 800df9a:	b91c      	cbnz	r4, 800dfa4 <_strtod_l+0x17c>
 800df9c:	9a07      	ldr	r2, [sp, #28]
 800df9e:	4302      	orrs	r2, r0
 800dfa0:	d09f      	beq.n	800dee2 <_strtod_l+0xba>
 800dfa2:	2400      	movs	r4, #0
 800dfa4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dfa6:	1c72      	adds	r2, r6, #1
 800dfa8:	9219      	str	r2, [sp, #100]	; 0x64
 800dfaa:	7872      	ldrb	r2, [r6, #1]
 800dfac:	2a2b      	cmp	r2, #43	; 0x2b
 800dfae:	d079      	beq.n	800e0a4 <_strtod_l+0x27c>
 800dfb0:	2a2d      	cmp	r2, #45	; 0x2d
 800dfb2:	f000 8083 	beq.w	800e0bc <_strtod_l+0x294>
 800dfb6:	2700      	movs	r7, #0
 800dfb8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dfbc:	2909      	cmp	r1, #9
 800dfbe:	f240 8083 	bls.w	800e0c8 <_strtod_l+0x2a0>
 800dfc2:	9619      	str	r6, [sp, #100]	; 0x64
 800dfc4:	2500      	movs	r5, #0
 800dfc6:	e09f      	b.n	800e108 <_strtod_l+0x2e0>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	e7c8      	b.n	800df5e <_strtod_l+0x136>
 800dfcc:	f1bb 0f08 	cmp.w	fp, #8
 800dfd0:	bfd5      	itete	le
 800dfd2:	9906      	ldrle	r1, [sp, #24]
 800dfd4:	9905      	ldrgt	r1, [sp, #20]
 800dfd6:	fb02 3301 	mlale	r3, r2, r1, r3
 800dfda:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dfde:	f100 0001 	add.w	r0, r0, #1
 800dfe2:	bfd4      	ite	le
 800dfe4:	9306      	strle	r3, [sp, #24]
 800dfe6:	9305      	strgt	r3, [sp, #20]
 800dfe8:	f10b 0b01 	add.w	fp, fp, #1
 800dfec:	9019      	str	r0, [sp, #100]	; 0x64
 800dfee:	e7be      	b.n	800df6e <_strtod_l+0x146>
 800dff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dff2:	191a      	adds	r2, r3, r4
 800dff4:	9219      	str	r2, [sp, #100]	; 0x64
 800dff6:	5d1a      	ldrb	r2, [r3, r4]
 800dff8:	f1bb 0f00 	cmp.w	fp, #0
 800dffc:	d036      	beq.n	800e06c <_strtod_l+0x244>
 800dffe:	465c      	mov	r4, fp
 800e000:	9004      	str	r0, [sp, #16]
 800e002:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e006:	2b09      	cmp	r3, #9
 800e008:	d912      	bls.n	800e030 <_strtod_l+0x208>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e7c1      	b.n	800df92 <_strtod_l+0x16a>
 800e00e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e010:	3001      	adds	r0, #1
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	9219      	str	r2, [sp, #100]	; 0x64
 800e016:	785a      	ldrb	r2, [r3, #1]
 800e018:	2a30      	cmp	r2, #48	; 0x30
 800e01a:	d0f8      	beq.n	800e00e <_strtod_l+0x1e6>
 800e01c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e020:	2b08      	cmp	r3, #8
 800e022:	f200 84d5 	bhi.w	800e9d0 <_strtod_l+0xba8>
 800e026:	9004      	str	r0, [sp, #16]
 800e028:	2000      	movs	r0, #0
 800e02a:	4604      	mov	r4, r0
 800e02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e02e:	9308      	str	r3, [sp, #32]
 800e030:	3a30      	subs	r2, #48	; 0x30
 800e032:	f100 0301 	add.w	r3, r0, #1
 800e036:	d013      	beq.n	800e060 <_strtod_l+0x238>
 800e038:	9904      	ldr	r1, [sp, #16]
 800e03a:	1905      	adds	r5, r0, r4
 800e03c:	4419      	add	r1, r3
 800e03e:	9104      	str	r1, [sp, #16]
 800e040:	4623      	mov	r3, r4
 800e042:	210a      	movs	r1, #10
 800e044:	42ab      	cmp	r3, r5
 800e046:	d113      	bne.n	800e070 <_strtod_l+0x248>
 800e048:	1823      	adds	r3, r4, r0
 800e04a:	2b08      	cmp	r3, #8
 800e04c:	f104 0401 	add.w	r4, r4, #1
 800e050:	4404      	add	r4, r0
 800e052:	dc1b      	bgt.n	800e08c <_strtod_l+0x264>
 800e054:	230a      	movs	r3, #10
 800e056:	9906      	ldr	r1, [sp, #24]
 800e058:	fb03 2301 	mla	r3, r3, r1, r2
 800e05c:	9306      	str	r3, [sp, #24]
 800e05e:	2300      	movs	r3, #0
 800e060:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e062:	4618      	mov	r0, r3
 800e064:	1c51      	adds	r1, r2, #1
 800e066:	9119      	str	r1, [sp, #100]	; 0x64
 800e068:	7852      	ldrb	r2, [r2, #1]
 800e06a:	e7ca      	b.n	800e002 <_strtod_l+0x1da>
 800e06c:	4658      	mov	r0, fp
 800e06e:	e7d3      	b.n	800e018 <_strtod_l+0x1f0>
 800e070:	2b08      	cmp	r3, #8
 800e072:	dc04      	bgt.n	800e07e <_strtod_l+0x256>
 800e074:	9f06      	ldr	r7, [sp, #24]
 800e076:	434f      	muls	r7, r1
 800e078:	9706      	str	r7, [sp, #24]
 800e07a:	3301      	adds	r3, #1
 800e07c:	e7e2      	b.n	800e044 <_strtod_l+0x21c>
 800e07e:	1c5f      	adds	r7, r3, #1
 800e080:	2f10      	cmp	r7, #16
 800e082:	bfde      	ittt	le
 800e084:	9f05      	ldrle	r7, [sp, #20]
 800e086:	434f      	mulle	r7, r1
 800e088:	9705      	strle	r7, [sp, #20]
 800e08a:	e7f6      	b.n	800e07a <_strtod_l+0x252>
 800e08c:	2c10      	cmp	r4, #16
 800e08e:	bfdf      	itttt	le
 800e090:	230a      	movle	r3, #10
 800e092:	9905      	ldrle	r1, [sp, #20]
 800e094:	fb03 2301 	mlale	r3, r3, r1, r2
 800e098:	9305      	strle	r3, [sp, #20]
 800e09a:	e7e0      	b.n	800e05e <_strtod_l+0x236>
 800e09c:	2300      	movs	r3, #0
 800e09e:	9304      	str	r3, [sp, #16]
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e77b      	b.n	800df9c <_strtod_l+0x174>
 800e0a4:	2700      	movs	r7, #0
 800e0a6:	1cb2      	adds	r2, r6, #2
 800e0a8:	9219      	str	r2, [sp, #100]	; 0x64
 800e0aa:	78b2      	ldrb	r2, [r6, #2]
 800e0ac:	e784      	b.n	800dfb8 <_strtod_l+0x190>
 800e0ae:	bf00      	nop
 800e0b0:	08011cf0 	.word	0x08011cf0
 800e0b4:	08011ba4 	.word	0x08011ba4
 800e0b8:	7ff00000 	.word	0x7ff00000
 800e0bc:	2701      	movs	r7, #1
 800e0be:	e7f2      	b.n	800e0a6 <_strtod_l+0x27e>
 800e0c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0c2:	1c51      	adds	r1, r2, #1
 800e0c4:	9119      	str	r1, [sp, #100]	; 0x64
 800e0c6:	7852      	ldrb	r2, [r2, #1]
 800e0c8:	2a30      	cmp	r2, #48	; 0x30
 800e0ca:	d0f9      	beq.n	800e0c0 <_strtod_l+0x298>
 800e0cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e0d0:	2908      	cmp	r1, #8
 800e0d2:	f63f af77 	bhi.w	800dfc4 <_strtod_l+0x19c>
 800e0d6:	f04f 0e0a 	mov.w	lr, #10
 800e0da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e0de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0e0:	9209      	str	r2, [sp, #36]	; 0x24
 800e0e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e0e4:	1c51      	adds	r1, r2, #1
 800e0e6:	9119      	str	r1, [sp, #100]	; 0x64
 800e0e8:	7852      	ldrb	r2, [r2, #1]
 800e0ea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e0ee:	2d09      	cmp	r5, #9
 800e0f0:	d935      	bls.n	800e15e <_strtod_l+0x336>
 800e0f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e0f4:	1b49      	subs	r1, r1, r5
 800e0f6:	2908      	cmp	r1, #8
 800e0f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e0fc:	dc02      	bgt.n	800e104 <_strtod_l+0x2dc>
 800e0fe:	4565      	cmp	r5, ip
 800e100:	bfa8      	it	ge
 800e102:	4665      	movge	r5, ip
 800e104:	b107      	cbz	r7, 800e108 <_strtod_l+0x2e0>
 800e106:	426d      	negs	r5, r5
 800e108:	2c00      	cmp	r4, #0
 800e10a:	d14c      	bne.n	800e1a6 <_strtod_l+0x37e>
 800e10c:	9907      	ldr	r1, [sp, #28]
 800e10e:	4301      	orrs	r1, r0
 800e110:	f47f aecb 	bne.w	800deaa <_strtod_l+0x82>
 800e114:	2b00      	cmp	r3, #0
 800e116:	f47f aee4 	bne.w	800dee2 <_strtod_l+0xba>
 800e11a:	2a69      	cmp	r2, #105	; 0x69
 800e11c:	d026      	beq.n	800e16c <_strtod_l+0x344>
 800e11e:	dc23      	bgt.n	800e168 <_strtod_l+0x340>
 800e120:	2a49      	cmp	r2, #73	; 0x49
 800e122:	d023      	beq.n	800e16c <_strtod_l+0x344>
 800e124:	2a4e      	cmp	r2, #78	; 0x4e
 800e126:	f47f aedc 	bne.w	800dee2 <_strtod_l+0xba>
 800e12a:	499d      	ldr	r1, [pc, #628]	; (800e3a0 <_strtod_l+0x578>)
 800e12c:	a819      	add	r0, sp, #100	; 0x64
 800e12e:	f001 fd9f 	bl	800fc70 <__match>
 800e132:	2800      	cmp	r0, #0
 800e134:	f43f aed5 	beq.w	800dee2 <_strtod_l+0xba>
 800e138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	2b28      	cmp	r3, #40	; 0x28
 800e13e:	d12c      	bne.n	800e19a <_strtod_l+0x372>
 800e140:	4998      	ldr	r1, [pc, #608]	; (800e3a4 <_strtod_l+0x57c>)
 800e142:	aa1c      	add	r2, sp, #112	; 0x70
 800e144:	a819      	add	r0, sp, #100	; 0x64
 800e146:	f001 fda7 	bl	800fc98 <__hexnan>
 800e14a:	2805      	cmp	r0, #5
 800e14c:	d125      	bne.n	800e19a <_strtod_l+0x372>
 800e14e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e150:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e154:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e158:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e15c:	e6a5      	b.n	800deaa <_strtod_l+0x82>
 800e15e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e162:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e166:	e7bc      	b.n	800e0e2 <_strtod_l+0x2ba>
 800e168:	2a6e      	cmp	r2, #110	; 0x6e
 800e16a:	e7dc      	b.n	800e126 <_strtod_l+0x2fe>
 800e16c:	498e      	ldr	r1, [pc, #568]	; (800e3a8 <_strtod_l+0x580>)
 800e16e:	a819      	add	r0, sp, #100	; 0x64
 800e170:	f001 fd7e 	bl	800fc70 <__match>
 800e174:	2800      	cmp	r0, #0
 800e176:	f43f aeb4 	beq.w	800dee2 <_strtod_l+0xba>
 800e17a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e17c:	498b      	ldr	r1, [pc, #556]	; (800e3ac <_strtod_l+0x584>)
 800e17e:	3b01      	subs	r3, #1
 800e180:	a819      	add	r0, sp, #100	; 0x64
 800e182:	9319      	str	r3, [sp, #100]	; 0x64
 800e184:	f001 fd74 	bl	800fc70 <__match>
 800e188:	b910      	cbnz	r0, 800e190 <_strtod_l+0x368>
 800e18a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e18c:	3301      	adds	r3, #1
 800e18e:	9319      	str	r3, [sp, #100]	; 0x64
 800e190:	f04f 0800 	mov.w	r8, #0
 800e194:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e3b0 <_strtod_l+0x588>
 800e198:	e687      	b.n	800deaa <_strtod_l+0x82>
 800e19a:	4886      	ldr	r0, [pc, #536]	; (800e3b4 <_strtod_l+0x58c>)
 800e19c:	f002 fd56 	bl	8010c4c <nan>
 800e1a0:	4680      	mov	r8, r0
 800e1a2:	4689      	mov	r9, r1
 800e1a4:	e681      	b.n	800deaa <_strtod_l+0x82>
 800e1a6:	9b04      	ldr	r3, [sp, #16]
 800e1a8:	f1bb 0f00 	cmp.w	fp, #0
 800e1ac:	bf08      	it	eq
 800e1ae:	46a3      	moveq	fp, r4
 800e1b0:	1aeb      	subs	r3, r5, r3
 800e1b2:	2c10      	cmp	r4, #16
 800e1b4:	9806      	ldr	r0, [sp, #24]
 800e1b6:	4626      	mov	r6, r4
 800e1b8:	9307      	str	r3, [sp, #28]
 800e1ba:	bfa8      	it	ge
 800e1bc:	2610      	movge	r6, #16
 800e1be:	f7f2 f929 	bl	8000414 <__aeabi_ui2d>
 800e1c2:	2c09      	cmp	r4, #9
 800e1c4:	4680      	mov	r8, r0
 800e1c6:	4689      	mov	r9, r1
 800e1c8:	dd13      	ble.n	800e1f2 <_strtod_l+0x3ca>
 800e1ca:	4b7b      	ldr	r3, [pc, #492]	; (800e3b8 <_strtod_l+0x590>)
 800e1cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e1d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e1d4:	f7f2 f998 	bl	8000508 <__aeabi_dmul>
 800e1d8:	4680      	mov	r8, r0
 800e1da:	9805      	ldr	r0, [sp, #20]
 800e1dc:	4689      	mov	r9, r1
 800e1de:	f7f2 f919 	bl	8000414 <__aeabi_ui2d>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	f7f1 ffd7 	bl	800019c <__adddf3>
 800e1ee:	4680      	mov	r8, r0
 800e1f0:	4689      	mov	r9, r1
 800e1f2:	2c0f      	cmp	r4, #15
 800e1f4:	dc36      	bgt.n	800e264 <_strtod_l+0x43c>
 800e1f6:	9b07      	ldr	r3, [sp, #28]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f43f ae56 	beq.w	800deaa <_strtod_l+0x82>
 800e1fe:	dd22      	ble.n	800e246 <_strtod_l+0x41e>
 800e200:	2b16      	cmp	r3, #22
 800e202:	dc09      	bgt.n	800e218 <_strtod_l+0x3f0>
 800e204:	496c      	ldr	r1, [pc, #432]	; (800e3b8 <_strtod_l+0x590>)
 800e206:	4642      	mov	r2, r8
 800e208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e20c:	464b      	mov	r3, r9
 800e20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e212:	f7f2 f979 	bl	8000508 <__aeabi_dmul>
 800e216:	e7c3      	b.n	800e1a0 <_strtod_l+0x378>
 800e218:	9a07      	ldr	r2, [sp, #28]
 800e21a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e21e:	4293      	cmp	r3, r2
 800e220:	db20      	blt.n	800e264 <_strtod_l+0x43c>
 800e222:	4d65      	ldr	r5, [pc, #404]	; (800e3b8 <_strtod_l+0x590>)
 800e224:	f1c4 040f 	rsb	r4, r4, #15
 800e228:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e22c:	4642      	mov	r2, r8
 800e22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e232:	464b      	mov	r3, r9
 800e234:	f7f2 f968 	bl	8000508 <__aeabi_dmul>
 800e238:	9b07      	ldr	r3, [sp, #28]
 800e23a:	1b1c      	subs	r4, r3, r4
 800e23c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e240:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e244:	e7e5      	b.n	800e212 <_strtod_l+0x3ea>
 800e246:	9b07      	ldr	r3, [sp, #28]
 800e248:	3316      	adds	r3, #22
 800e24a:	db0b      	blt.n	800e264 <_strtod_l+0x43c>
 800e24c:	9b04      	ldr	r3, [sp, #16]
 800e24e:	4640      	mov	r0, r8
 800e250:	1b5d      	subs	r5, r3, r5
 800e252:	4b59      	ldr	r3, [pc, #356]	; (800e3b8 <_strtod_l+0x590>)
 800e254:	4649      	mov	r1, r9
 800e256:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e25a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e25e:	f7f2 fa7d 	bl	800075c <__aeabi_ddiv>
 800e262:	e79d      	b.n	800e1a0 <_strtod_l+0x378>
 800e264:	9b07      	ldr	r3, [sp, #28]
 800e266:	1ba6      	subs	r6, r4, r6
 800e268:	441e      	add	r6, r3
 800e26a:	2e00      	cmp	r6, #0
 800e26c:	dd74      	ble.n	800e358 <_strtod_l+0x530>
 800e26e:	f016 030f 	ands.w	r3, r6, #15
 800e272:	d00a      	beq.n	800e28a <_strtod_l+0x462>
 800e274:	4950      	ldr	r1, [pc, #320]	; (800e3b8 <_strtod_l+0x590>)
 800e276:	4642      	mov	r2, r8
 800e278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e27c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e280:	464b      	mov	r3, r9
 800e282:	f7f2 f941 	bl	8000508 <__aeabi_dmul>
 800e286:	4680      	mov	r8, r0
 800e288:	4689      	mov	r9, r1
 800e28a:	f036 060f 	bics.w	r6, r6, #15
 800e28e:	d052      	beq.n	800e336 <_strtod_l+0x50e>
 800e290:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e294:	dd27      	ble.n	800e2e6 <_strtod_l+0x4be>
 800e296:	f04f 0b00 	mov.w	fp, #0
 800e29a:	f8cd b010 	str.w	fp, [sp, #16]
 800e29e:	f8cd b020 	str.w	fp, [sp, #32]
 800e2a2:	f8cd b018 	str.w	fp, [sp, #24]
 800e2a6:	2322      	movs	r3, #34	; 0x22
 800e2a8:	f04f 0800 	mov.w	r8, #0
 800e2ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e3b0 <_strtod_l+0x588>
 800e2b0:	f8ca 3000 	str.w	r3, [sl]
 800e2b4:	9b08      	ldr	r3, [sp, #32]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f43f adf7 	beq.w	800deaa <_strtod_l+0x82>
 800e2bc:	4650      	mov	r0, sl
 800e2be:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e2c0:	f001 fe00 	bl	800fec4 <_Bfree>
 800e2c4:	4650      	mov	r0, sl
 800e2c6:	9906      	ldr	r1, [sp, #24]
 800e2c8:	f001 fdfc 	bl	800fec4 <_Bfree>
 800e2cc:	4650      	mov	r0, sl
 800e2ce:	9904      	ldr	r1, [sp, #16]
 800e2d0:	f001 fdf8 	bl	800fec4 <_Bfree>
 800e2d4:	4650      	mov	r0, sl
 800e2d6:	9908      	ldr	r1, [sp, #32]
 800e2d8:	f001 fdf4 	bl	800fec4 <_Bfree>
 800e2dc:	4659      	mov	r1, fp
 800e2de:	4650      	mov	r0, sl
 800e2e0:	f001 fdf0 	bl	800fec4 <_Bfree>
 800e2e4:	e5e1      	b.n	800deaa <_strtod_l+0x82>
 800e2e6:	4b35      	ldr	r3, [pc, #212]	; (800e3bc <_strtod_l+0x594>)
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	9305      	str	r3, [sp, #20]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	461f      	mov	r7, r3
 800e2f2:	1136      	asrs	r6, r6, #4
 800e2f4:	2e01      	cmp	r6, #1
 800e2f6:	dc21      	bgt.n	800e33c <_strtod_l+0x514>
 800e2f8:	b10b      	cbz	r3, 800e2fe <_strtod_l+0x4d6>
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	4689      	mov	r9, r1
 800e2fe:	4b2f      	ldr	r3, [pc, #188]	; (800e3bc <_strtod_l+0x594>)
 800e300:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e304:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e308:	4642      	mov	r2, r8
 800e30a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e30e:	464b      	mov	r3, r9
 800e310:	f7f2 f8fa 	bl	8000508 <__aeabi_dmul>
 800e314:	4b26      	ldr	r3, [pc, #152]	; (800e3b0 <_strtod_l+0x588>)
 800e316:	460a      	mov	r2, r1
 800e318:	400b      	ands	r3, r1
 800e31a:	4929      	ldr	r1, [pc, #164]	; (800e3c0 <_strtod_l+0x598>)
 800e31c:	4680      	mov	r8, r0
 800e31e:	428b      	cmp	r3, r1
 800e320:	d8b9      	bhi.n	800e296 <_strtod_l+0x46e>
 800e322:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e326:	428b      	cmp	r3, r1
 800e328:	bf86      	itte	hi
 800e32a:	f04f 38ff 	movhi.w	r8, #4294967295
 800e32e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e3c4 <_strtod_l+0x59c>
 800e332:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e336:	2300      	movs	r3, #0
 800e338:	9305      	str	r3, [sp, #20]
 800e33a:	e07f      	b.n	800e43c <_strtod_l+0x614>
 800e33c:	07f2      	lsls	r2, r6, #31
 800e33e:	d505      	bpl.n	800e34c <_strtod_l+0x524>
 800e340:	9b05      	ldr	r3, [sp, #20]
 800e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e346:	f7f2 f8df 	bl	8000508 <__aeabi_dmul>
 800e34a:	2301      	movs	r3, #1
 800e34c:	9a05      	ldr	r2, [sp, #20]
 800e34e:	3701      	adds	r7, #1
 800e350:	3208      	adds	r2, #8
 800e352:	1076      	asrs	r6, r6, #1
 800e354:	9205      	str	r2, [sp, #20]
 800e356:	e7cd      	b.n	800e2f4 <_strtod_l+0x4cc>
 800e358:	d0ed      	beq.n	800e336 <_strtod_l+0x50e>
 800e35a:	4276      	negs	r6, r6
 800e35c:	f016 020f 	ands.w	r2, r6, #15
 800e360:	d00a      	beq.n	800e378 <_strtod_l+0x550>
 800e362:	4b15      	ldr	r3, [pc, #84]	; (800e3b8 <_strtod_l+0x590>)
 800e364:	4640      	mov	r0, r8
 800e366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e36a:	4649      	mov	r1, r9
 800e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e370:	f7f2 f9f4 	bl	800075c <__aeabi_ddiv>
 800e374:	4680      	mov	r8, r0
 800e376:	4689      	mov	r9, r1
 800e378:	1136      	asrs	r6, r6, #4
 800e37a:	d0dc      	beq.n	800e336 <_strtod_l+0x50e>
 800e37c:	2e1f      	cmp	r6, #31
 800e37e:	dd23      	ble.n	800e3c8 <_strtod_l+0x5a0>
 800e380:	f04f 0b00 	mov.w	fp, #0
 800e384:	f8cd b010 	str.w	fp, [sp, #16]
 800e388:	f8cd b020 	str.w	fp, [sp, #32]
 800e38c:	f8cd b018 	str.w	fp, [sp, #24]
 800e390:	2322      	movs	r3, #34	; 0x22
 800e392:	f04f 0800 	mov.w	r8, #0
 800e396:	f04f 0900 	mov.w	r9, #0
 800e39a:	f8ca 3000 	str.w	r3, [sl]
 800e39e:	e789      	b.n	800e2b4 <_strtod_l+0x48c>
 800e3a0:	08011b7d 	.word	0x08011b7d
 800e3a4:	08011bb8 	.word	0x08011bb8
 800e3a8:	08011b75 	.word	0x08011b75
 800e3ac:	08011bfb 	.word	0x08011bfb
 800e3b0:	7ff00000 	.word	0x7ff00000
 800e3b4:	08011ea8 	.word	0x08011ea8
 800e3b8:	08011d88 	.word	0x08011d88
 800e3bc:	08011d60 	.word	0x08011d60
 800e3c0:	7ca00000 	.word	0x7ca00000
 800e3c4:	7fefffff 	.word	0x7fefffff
 800e3c8:	f016 0310 	ands.w	r3, r6, #16
 800e3cc:	bf18      	it	ne
 800e3ce:	236a      	movne	r3, #106	; 0x6a
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	9305      	str	r3, [sp, #20]
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	4fb0      	ldr	r7, [pc, #704]	; (800e69c <_strtod_l+0x874>)
 800e3da:	07f2      	lsls	r2, r6, #31
 800e3dc:	d504      	bpl.n	800e3e8 <_strtod_l+0x5c0>
 800e3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3e2:	f7f2 f891 	bl	8000508 <__aeabi_dmul>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	1076      	asrs	r6, r6, #1
 800e3ea:	f107 0708 	add.w	r7, r7, #8
 800e3ee:	d1f4      	bne.n	800e3da <_strtod_l+0x5b2>
 800e3f0:	b10b      	cbz	r3, 800e3f6 <_strtod_l+0x5ce>
 800e3f2:	4680      	mov	r8, r0
 800e3f4:	4689      	mov	r9, r1
 800e3f6:	9b05      	ldr	r3, [sp, #20]
 800e3f8:	b1c3      	cbz	r3, 800e42c <_strtod_l+0x604>
 800e3fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e3fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e402:	2b00      	cmp	r3, #0
 800e404:	4649      	mov	r1, r9
 800e406:	dd11      	ble.n	800e42c <_strtod_l+0x604>
 800e408:	2b1f      	cmp	r3, #31
 800e40a:	f340 8127 	ble.w	800e65c <_strtod_l+0x834>
 800e40e:	2b34      	cmp	r3, #52	; 0x34
 800e410:	bfd8      	it	le
 800e412:	f04f 33ff 	movle.w	r3, #4294967295
 800e416:	f04f 0800 	mov.w	r8, #0
 800e41a:	bfcf      	iteee	gt
 800e41c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e420:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e424:	fa03 f202 	lslle.w	r2, r3, r2
 800e428:	ea02 0901 	andle.w	r9, r2, r1
 800e42c:	2200      	movs	r2, #0
 800e42e:	2300      	movs	r3, #0
 800e430:	4640      	mov	r0, r8
 800e432:	4649      	mov	r1, r9
 800e434:	f7f2 fad0 	bl	80009d8 <__aeabi_dcmpeq>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d1a1      	bne.n	800e380 <_strtod_l+0x558>
 800e43c:	9b06      	ldr	r3, [sp, #24]
 800e43e:	465a      	mov	r2, fp
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	4650      	mov	r0, sl
 800e444:	4623      	mov	r3, r4
 800e446:	9908      	ldr	r1, [sp, #32]
 800e448:	f001 fda4 	bl	800ff94 <__s2b>
 800e44c:	9008      	str	r0, [sp, #32]
 800e44e:	2800      	cmp	r0, #0
 800e450:	f43f af21 	beq.w	800e296 <_strtod_l+0x46e>
 800e454:	9b04      	ldr	r3, [sp, #16]
 800e456:	f04f 0b00 	mov.w	fp, #0
 800e45a:	1b5d      	subs	r5, r3, r5
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	f8cd b010 	str.w	fp, [sp, #16]
 800e462:	2b00      	cmp	r3, #0
 800e464:	bfb4      	ite	lt
 800e466:	462b      	movlt	r3, r5
 800e468:	2300      	movge	r3, #0
 800e46a:	930e      	str	r3, [sp, #56]	; 0x38
 800e46c:	9b07      	ldr	r3, [sp, #28]
 800e46e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e472:	9314      	str	r3, [sp, #80]	; 0x50
 800e474:	9b08      	ldr	r3, [sp, #32]
 800e476:	4650      	mov	r0, sl
 800e478:	6859      	ldr	r1, [r3, #4]
 800e47a:	f001 fce3 	bl	800fe44 <_Balloc>
 800e47e:	9006      	str	r0, [sp, #24]
 800e480:	2800      	cmp	r0, #0
 800e482:	f43f af10 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e486:	9b08      	ldr	r3, [sp, #32]
 800e488:	300c      	adds	r0, #12
 800e48a:	691a      	ldr	r2, [r3, #16]
 800e48c:	f103 010c 	add.w	r1, r3, #12
 800e490:	3202      	adds	r2, #2
 800e492:	0092      	lsls	r2, r2, #2
 800e494:	f001 fcc8 	bl	800fe28 <memcpy>
 800e498:	ab1c      	add	r3, sp, #112	; 0x70
 800e49a:	9301      	str	r3, [sp, #4]
 800e49c:	ab1b      	add	r3, sp, #108	; 0x6c
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	4642      	mov	r2, r8
 800e4a2:	464b      	mov	r3, r9
 800e4a4:	4650      	mov	r0, sl
 800e4a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e4aa:	f002 f8b5 	bl	8010618 <__d2b>
 800e4ae:	901a      	str	r0, [sp, #104]	; 0x68
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	f43f aef8 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e4b6:	2101      	movs	r1, #1
 800e4b8:	4650      	mov	r0, sl
 800e4ba:	f001 fe03 	bl	80100c4 <__i2b>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	9004      	str	r0, [sp, #16]
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	f43f aeef 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e4c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e4ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e4cc:	2d00      	cmp	r5, #0
 800e4ce:	bfab      	itete	ge
 800e4d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e4d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e4d4:	18ee      	addge	r6, r5, r3
 800e4d6:	1b5c      	sublt	r4, r3, r5
 800e4d8:	9b05      	ldr	r3, [sp, #20]
 800e4da:	bfa8      	it	ge
 800e4dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e4de:	eba5 0503 	sub.w	r5, r5, r3
 800e4e2:	4415      	add	r5, r2
 800e4e4:	4b6e      	ldr	r3, [pc, #440]	; (800e6a0 <_strtod_l+0x878>)
 800e4e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800e4ea:	bfb8      	it	lt
 800e4ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e4ee:	429d      	cmp	r5, r3
 800e4f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e4f4:	f280 80c4 	bge.w	800e680 <_strtod_l+0x858>
 800e4f8:	1b5b      	subs	r3, r3, r5
 800e4fa:	2b1f      	cmp	r3, #31
 800e4fc:	f04f 0701 	mov.w	r7, #1
 800e500:	eba2 0203 	sub.w	r2, r2, r3
 800e504:	f300 80b1 	bgt.w	800e66a <_strtod_l+0x842>
 800e508:	2500      	movs	r5, #0
 800e50a:	fa07 f303 	lsl.w	r3, r7, r3
 800e50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e510:	18b7      	adds	r7, r6, r2
 800e512:	9b05      	ldr	r3, [sp, #20]
 800e514:	42be      	cmp	r6, r7
 800e516:	4414      	add	r4, r2
 800e518:	441c      	add	r4, r3
 800e51a:	4633      	mov	r3, r6
 800e51c:	bfa8      	it	ge
 800e51e:	463b      	movge	r3, r7
 800e520:	42a3      	cmp	r3, r4
 800e522:	bfa8      	it	ge
 800e524:	4623      	movge	r3, r4
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfc2      	ittt	gt
 800e52a:	1aff      	subgt	r7, r7, r3
 800e52c:	1ae4      	subgt	r4, r4, r3
 800e52e:	1af6      	subgt	r6, r6, r3
 800e530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e532:	2b00      	cmp	r3, #0
 800e534:	dd17      	ble.n	800e566 <_strtod_l+0x73e>
 800e536:	461a      	mov	r2, r3
 800e538:	4650      	mov	r0, sl
 800e53a:	9904      	ldr	r1, [sp, #16]
 800e53c:	f001 fe80 	bl	8010240 <__pow5mult>
 800e540:	9004      	str	r0, [sp, #16]
 800e542:	2800      	cmp	r0, #0
 800e544:	f43f aeaf 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e548:	4601      	mov	r1, r0
 800e54a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e54c:	4650      	mov	r0, sl
 800e54e:	f001 fdcf 	bl	80100f0 <__multiply>
 800e552:	9009      	str	r0, [sp, #36]	; 0x24
 800e554:	2800      	cmp	r0, #0
 800e556:	f43f aea6 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e55a:	4650      	mov	r0, sl
 800e55c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e55e:	f001 fcb1 	bl	800fec4 <_Bfree>
 800e562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e564:	931a      	str	r3, [sp, #104]	; 0x68
 800e566:	2f00      	cmp	r7, #0
 800e568:	f300 808e 	bgt.w	800e688 <_strtod_l+0x860>
 800e56c:	9b07      	ldr	r3, [sp, #28]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dd08      	ble.n	800e584 <_strtod_l+0x75c>
 800e572:	4650      	mov	r0, sl
 800e574:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e576:	9906      	ldr	r1, [sp, #24]
 800e578:	f001 fe62 	bl	8010240 <__pow5mult>
 800e57c:	9006      	str	r0, [sp, #24]
 800e57e:	2800      	cmp	r0, #0
 800e580:	f43f ae91 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e584:	2c00      	cmp	r4, #0
 800e586:	dd08      	ble.n	800e59a <_strtod_l+0x772>
 800e588:	4622      	mov	r2, r4
 800e58a:	4650      	mov	r0, sl
 800e58c:	9906      	ldr	r1, [sp, #24]
 800e58e:	f001 feb1 	bl	80102f4 <__lshift>
 800e592:	9006      	str	r0, [sp, #24]
 800e594:	2800      	cmp	r0, #0
 800e596:	f43f ae86 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e59a:	2e00      	cmp	r6, #0
 800e59c:	dd08      	ble.n	800e5b0 <_strtod_l+0x788>
 800e59e:	4632      	mov	r2, r6
 800e5a0:	4650      	mov	r0, sl
 800e5a2:	9904      	ldr	r1, [sp, #16]
 800e5a4:	f001 fea6 	bl	80102f4 <__lshift>
 800e5a8:	9004      	str	r0, [sp, #16]
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	f43f ae7b 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e5b0:	4650      	mov	r0, sl
 800e5b2:	9a06      	ldr	r2, [sp, #24]
 800e5b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e5b6:	f001 ff29 	bl	801040c <__mdiff>
 800e5ba:	4683      	mov	fp, r0
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	f43f ae72 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	68c3      	ldr	r3, [r0, #12]
 800e5c6:	9904      	ldr	r1, [sp, #16]
 800e5c8:	60c4      	str	r4, [r0, #12]
 800e5ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5cc:	f001 ff02 	bl	80103d4 <__mcmp>
 800e5d0:	42a0      	cmp	r0, r4
 800e5d2:	da6b      	bge.n	800e6ac <_strtod_l+0x884>
 800e5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5d6:	ea53 0308 	orrs.w	r3, r3, r8
 800e5da:	f040 8091 	bne.w	800e700 <_strtod_l+0x8d8>
 800e5de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 808c 	bne.w	800e700 <_strtod_l+0x8d8>
 800e5e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5ec:	0d1b      	lsrs	r3, r3, #20
 800e5ee:	051b      	lsls	r3, r3, #20
 800e5f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e5f4:	f240 8084 	bls.w	800e700 <_strtod_l+0x8d8>
 800e5f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e5fc:	b91b      	cbnz	r3, 800e606 <_strtod_l+0x7de>
 800e5fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e602:	2b01      	cmp	r3, #1
 800e604:	dd7c      	ble.n	800e700 <_strtod_l+0x8d8>
 800e606:	4659      	mov	r1, fp
 800e608:	2201      	movs	r2, #1
 800e60a:	4650      	mov	r0, sl
 800e60c:	f001 fe72 	bl	80102f4 <__lshift>
 800e610:	9904      	ldr	r1, [sp, #16]
 800e612:	4683      	mov	fp, r0
 800e614:	f001 fede 	bl	80103d4 <__mcmp>
 800e618:	2800      	cmp	r0, #0
 800e61a:	dd71      	ble.n	800e700 <_strtod_l+0x8d8>
 800e61c:	9905      	ldr	r1, [sp, #20]
 800e61e:	464b      	mov	r3, r9
 800e620:	4a20      	ldr	r2, [pc, #128]	; (800e6a4 <_strtod_l+0x87c>)
 800e622:	2900      	cmp	r1, #0
 800e624:	f000 808c 	beq.w	800e740 <_strtod_l+0x918>
 800e628:	ea02 0109 	and.w	r1, r2, r9
 800e62c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e630:	f300 8086 	bgt.w	800e740 <_strtod_l+0x918>
 800e634:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e638:	f77f aeaa 	ble.w	800e390 <_strtod_l+0x568>
 800e63c:	4640      	mov	r0, r8
 800e63e:	4649      	mov	r1, r9
 800e640:	4b19      	ldr	r3, [pc, #100]	; (800e6a8 <_strtod_l+0x880>)
 800e642:	2200      	movs	r2, #0
 800e644:	f7f1 ff60 	bl	8000508 <__aeabi_dmul>
 800e648:	460b      	mov	r3, r1
 800e64a:	4303      	orrs	r3, r0
 800e64c:	bf08      	it	eq
 800e64e:	2322      	moveq	r3, #34	; 0x22
 800e650:	4680      	mov	r8, r0
 800e652:	4689      	mov	r9, r1
 800e654:	bf08      	it	eq
 800e656:	f8ca 3000 	streq.w	r3, [sl]
 800e65a:	e62f      	b.n	800e2bc <_strtod_l+0x494>
 800e65c:	f04f 32ff 	mov.w	r2, #4294967295
 800e660:	fa02 f303 	lsl.w	r3, r2, r3
 800e664:	ea03 0808 	and.w	r8, r3, r8
 800e668:	e6e0      	b.n	800e42c <_strtod_l+0x604>
 800e66a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e66e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e672:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e676:	35e2      	adds	r5, #226	; 0xe2
 800e678:	fa07 f505 	lsl.w	r5, r7, r5
 800e67c:	970f      	str	r7, [sp, #60]	; 0x3c
 800e67e:	e747      	b.n	800e510 <_strtod_l+0x6e8>
 800e680:	2301      	movs	r3, #1
 800e682:	2500      	movs	r5, #0
 800e684:	930f      	str	r3, [sp, #60]	; 0x3c
 800e686:	e743      	b.n	800e510 <_strtod_l+0x6e8>
 800e688:	463a      	mov	r2, r7
 800e68a:	4650      	mov	r0, sl
 800e68c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e68e:	f001 fe31 	bl	80102f4 <__lshift>
 800e692:	901a      	str	r0, [sp, #104]	; 0x68
 800e694:	2800      	cmp	r0, #0
 800e696:	f47f af69 	bne.w	800e56c <_strtod_l+0x744>
 800e69a:	e604      	b.n	800e2a6 <_strtod_l+0x47e>
 800e69c:	08011bd0 	.word	0x08011bd0
 800e6a0:	fffffc02 	.word	0xfffffc02
 800e6a4:	7ff00000 	.word	0x7ff00000
 800e6a8:	39500000 	.word	0x39500000
 800e6ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e6b0:	d165      	bne.n	800e77e <_strtod_l+0x956>
 800e6b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6b8:	b35a      	cbz	r2, 800e712 <_strtod_l+0x8ea>
 800e6ba:	4a99      	ldr	r2, [pc, #612]	; (800e920 <_strtod_l+0xaf8>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d12b      	bne.n	800e718 <_strtod_l+0x8f0>
 800e6c0:	9b05      	ldr	r3, [sp, #20]
 800e6c2:	4641      	mov	r1, r8
 800e6c4:	b303      	cbz	r3, 800e708 <_strtod_l+0x8e0>
 800e6c6:	464a      	mov	r2, r9
 800e6c8:	4b96      	ldr	r3, [pc, #600]	; (800e924 <_strtod_l+0xafc>)
 800e6ca:	4013      	ands	r3, r2
 800e6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d4:	d81b      	bhi.n	800e70e <_strtod_l+0x8e6>
 800e6d6:	0d1b      	lsrs	r3, r3, #20
 800e6d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e0:	4299      	cmp	r1, r3
 800e6e2:	d119      	bne.n	800e718 <_strtod_l+0x8f0>
 800e6e4:	4b90      	ldr	r3, [pc, #576]	; (800e928 <_strtod_l+0xb00>)
 800e6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d102      	bne.n	800e6f2 <_strtod_l+0x8ca>
 800e6ec:	3101      	adds	r1, #1
 800e6ee:	f43f adda 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e6f2:	f04f 0800 	mov.w	r8, #0
 800e6f6:	4b8b      	ldr	r3, [pc, #556]	; (800e924 <_strtod_l+0xafc>)
 800e6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6fa:	401a      	ands	r2, r3
 800e6fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e700:	9b05      	ldr	r3, [sp, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d19a      	bne.n	800e63c <_strtod_l+0x814>
 800e706:	e5d9      	b.n	800e2bc <_strtod_l+0x494>
 800e708:	f04f 33ff 	mov.w	r3, #4294967295
 800e70c:	e7e8      	b.n	800e6e0 <_strtod_l+0x8b8>
 800e70e:	4613      	mov	r3, r2
 800e710:	e7e6      	b.n	800e6e0 <_strtod_l+0x8b8>
 800e712:	ea53 0308 	orrs.w	r3, r3, r8
 800e716:	d081      	beq.n	800e61c <_strtod_l+0x7f4>
 800e718:	b1e5      	cbz	r5, 800e754 <_strtod_l+0x92c>
 800e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71c:	421d      	tst	r5, r3
 800e71e:	d0ef      	beq.n	800e700 <_strtod_l+0x8d8>
 800e720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e722:	4640      	mov	r0, r8
 800e724:	4649      	mov	r1, r9
 800e726:	9a05      	ldr	r2, [sp, #20]
 800e728:	b1c3      	cbz	r3, 800e75c <_strtod_l+0x934>
 800e72a:	f7ff fb59 	bl	800dde0 <sulp>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e736:	f7f1 fd31 	bl	800019c <__adddf3>
 800e73a:	4680      	mov	r8, r0
 800e73c:	4689      	mov	r9, r1
 800e73e:	e7df      	b.n	800e700 <_strtod_l+0x8d8>
 800e740:	4013      	ands	r3, r2
 800e742:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e746:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e74a:	f04f 38ff 	mov.w	r8, #4294967295
 800e74e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e752:	e7d5      	b.n	800e700 <_strtod_l+0x8d8>
 800e754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e756:	ea13 0f08 	tst.w	r3, r8
 800e75a:	e7e0      	b.n	800e71e <_strtod_l+0x8f6>
 800e75c:	f7ff fb40 	bl	800dde0 <sulp>
 800e760:	4602      	mov	r2, r0
 800e762:	460b      	mov	r3, r1
 800e764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e768:	f7f1 fd16 	bl	8000198 <__aeabi_dsub>
 800e76c:	2200      	movs	r2, #0
 800e76e:	2300      	movs	r3, #0
 800e770:	4680      	mov	r8, r0
 800e772:	4689      	mov	r9, r1
 800e774:	f7f2 f930 	bl	80009d8 <__aeabi_dcmpeq>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d0c1      	beq.n	800e700 <_strtod_l+0x8d8>
 800e77c:	e608      	b.n	800e390 <_strtod_l+0x568>
 800e77e:	4658      	mov	r0, fp
 800e780:	9904      	ldr	r1, [sp, #16]
 800e782:	f001 ffa5 	bl	80106d0 <__ratio>
 800e786:	2200      	movs	r2, #0
 800e788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e78c:	4606      	mov	r6, r0
 800e78e:	460f      	mov	r7, r1
 800e790:	f7f2 f936 	bl	8000a00 <__aeabi_dcmple>
 800e794:	2800      	cmp	r0, #0
 800e796:	d070      	beq.n	800e87a <_strtod_l+0xa52>
 800e798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d042      	beq.n	800e824 <_strtod_l+0x9fc>
 800e79e:	2600      	movs	r6, #0
 800e7a0:	4f62      	ldr	r7, [pc, #392]	; (800e92c <_strtod_l+0xb04>)
 800e7a2:	4d62      	ldr	r5, [pc, #392]	; (800e92c <_strtod_l+0xb04>)
 800e7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7aa:	0d1b      	lsrs	r3, r3, #20
 800e7ac:	051b      	lsls	r3, r3, #20
 800e7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7b2:	4b5f      	ldr	r3, [pc, #380]	; (800e930 <_strtod_l+0xb08>)
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	f040 80c3 	bne.w	800e940 <_strtod_l+0xb18>
 800e7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7bc:	4640      	mov	r0, r8
 800e7be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	f001 feae 	bl	8010524 <__ulp>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	4639      	mov	r1, r7
 800e7d0:	f7f1 fe9a 	bl	8000508 <__aeabi_dmul>
 800e7d4:	4642      	mov	r2, r8
 800e7d6:	464b      	mov	r3, r9
 800e7d8:	f7f1 fce0 	bl	800019c <__adddf3>
 800e7dc:	460b      	mov	r3, r1
 800e7de:	4951      	ldr	r1, [pc, #324]	; (800e924 <_strtod_l+0xafc>)
 800e7e0:	4a54      	ldr	r2, [pc, #336]	; (800e934 <_strtod_l+0xb0c>)
 800e7e2:	4019      	ands	r1, r3
 800e7e4:	4291      	cmp	r1, r2
 800e7e6:	4680      	mov	r8, r0
 800e7e8:	d95d      	bls.n	800e8a6 <_strtod_l+0xa7e>
 800e7ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7ec:	4b4e      	ldr	r3, [pc, #312]	; (800e928 <_strtod_l+0xb00>)
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d103      	bne.n	800e7fa <_strtod_l+0x9d2>
 800e7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	f43f ad56 	beq.w	800e2a6 <_strtod_l+0x47e>
 800e7fa:	f04f 38ff 	mov.w	r8, #4294967295
 800e7fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e928 <_strtod_l+0xb00>
 800e802:	4650      	mov	r0, sl
 800e804:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e806:	f001 fb5d 	bl	800fec4 <_Bfree>
 800e80a:	4650      	mov	r0, sl
 800e80c:	9906      	ldr	r1, [sp, #24]
 800e80e:	f001 fb59 	bl	800fec4 <_Bfree>
 800e812:	4650      	mov	r0, sl
 800e814:	9904      	ldr	r1, [sp, #16]
 800e816:	f001 fb55 	bl	800fec4 <_Bfree>
 800e81a:	4659      	mov	r1, fp
 800e81c:	4650      	mov	r0, sl
 800e81e:	f001 fb51 	bl	800fec4 <_Bfree>
 800e822:	e627      	b.n	800e474 <_strtod_l+0x64c>
 800e824:	f1b8 0f00 	cmp.w	r8, #0
 800e828:	d119      	bne.n	800e85e <_strtod_l+0xa36>
 800e82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e830:	b9e3      	cbnz	r3, 800e86c <_strtod_l+0xa44>
 800e832:	2200      	movs	r2, #0
 800e834:	4630      	mov	r0, r6
 800e836:	4639      	mov	r1, r7
 800e838:	4b3c      	ldr	r3, [pc, #240]	; (800e92c <_strtod_l+0xb04>)
 800e83a:	f7f2 f8d7 	bl	80009ec <__aeabi_dcmplt>
 800e83e:	b9c8      	cbnz	r0, 800e874 <_strtod_l+0xa4c>
 800e840:	2200      	movs	r2, #0
 800e842:	4630      	mov	r0, r6
 800e844:	4639      	mov	r1, r7
 800e846:	4b3c      	ldr	r3, [pc, #240]	; (800e938 <_strtod_l+0xb10>)
 800e848:	f7f1 fe5e 	bl	8000508 <__aeabi_dmul>
 800e84c:	4604      	mov	r4, r0
 800e84e:	460d      	mov	r5, r1
 800e850:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e854:	9416      	str	r4, [sp, #88]	; 0x58
 800e856:	9317      	str	r3, [sp, #92]	; 0x5c
 800e858:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e85c:	e7a2      	b.n	800e7a4 <_strtod_l+0x97c>
 800e85e:	f1b8 0f01 	cmp.w	r8, #1
 800e862:	d103      	bne.n	800e86c <_strtod_l+0xa44>
 800e864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e866:	2b00      	cmp	r3, #0
 800e868:	f43f ad92 	beq.w	800e390 <_strtod_l+0x568>
 800e86c:	2600      	movs	r6, #0
 800e86e:	2400      	movs	r4, #0
 800e870:	4f32      	ldr	r7, [pc, #200]	; (800e93c <_strtod_l+0xb14>)
 800e872:	e796      	b.n	800e7a2 <_strtod_l+0x97a>
 800e874:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e876:	4d30      	ldr	r5, [pc, #192]	; (800e938 <_strtod_l+0xb10>)
 800e878:	e7ea      	b.n	800e850 <_strtod_l+0xa28>
 800e87a:	4b2f      	ldr	r3, [pc, #188]	; (800e938 <_strtod_l+0xb10>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	4630      	mov	r0, r6
 800e880:	4639      	mov	r1, r7
 800e882:	f7f1 fe41 	bl	8000508 <__aeabi_dmul>
 800e886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e888:	4604      	mov	r4, r0
 800e88a:	460d      	mov	r5, r1
 800e88c:	b933      	cbnz	r3, 800e89c <_strtod_l+0xa74>
 800e88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e892:	9010      	str	r0, [sp, #64]	; 0x40
 800e894:	9311      	str	r3, [sp, #68]	; 0x44
 800e896:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e89a:	e783      	b.n	800e7a4 <_strtod_l+0x97c>
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e8a4:	e7f7      	b.n	800e896 <_strtod_l+0xa6e>
 800e8a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e8aa:	9b05      	ldr	r3, [sp, #20]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1a8      	bne.n	800e802 <_strtod_l+0x9da>
 800e8b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e8b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8b6:	0d1b      	lsrs	r3, r3, #20
 800e8b8:	051b      	lsls	r3, r3, #20
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d1a1      	bne.n	800e802 <_strtod_l+0x9da>
 800e8be:	4620      	mov	r0, r4
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	f7f2 fc9b 	bl	80011fc <__aeabi_d2lz>
 800e8c6:	f7f1 fdf1 	bl	80004ac <__aeabi_l2d>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f1 fc61 	bl	8000198 <__aeabi_dsub>
 800e8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8dc:	ea43 0308 	orr.w	r3, r3, r8
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	460d      	mov	r5, r1
 800e8e6:	d066      	beq.n	800e9b6 <_strtod_l+0xb8e>
 800e8e8:	a309      	add	r3, pc, #36	; (adr r3, 800e910 <_strtod_l+0xae8>)
 800e8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ee:	f7f2 f87d 	bl	80009ec <__aeabi_dcmplt>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	f47f ace2 	bne.w	800e2bc <_strtod_l+0x494>
 800e8f8:	a307      	add	r3, pc, #28	; (adr r3, 800e918 <_strtod_l+0xaf0>)
 800e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f2 f891 	bl	8000a28 <__aeabi_dcmpgt>
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f af7b 	beq.w	800e802 <_strtod_l+0x9da>
 800e90c:	e4d6      	b.n	800e2bc <_strtod_l+0x494>
 800e90e:	bf00      	nop
 800e910:	94a03595 	.word	0x94a03595
 800e914:	3fdfffff 	.word	0x3fdfffff
 800e918:	35afe535 	.word	0x35afe535
 800e91c:	3fe00000 	.word	0x3fe00000
 800e920:	000fffff 	.word	0x000fffff
 800e924:	7ff00000 	.word	0x7ff00000
 800e928:	7fefffff 	.word	0x7fefffff
 800e92c:	3ff00000 	.word	0x3ff00000
 800e930:	7fe00000 	.word	0x7fe00000
 800e934:	7c9fffff 	.word	0x7c9fffff
 800e938:	3fe00000 	.word	0x3fe00000
 800e93c:	bff00000 	.word	0xbff00000
 800e940:	9b05      	ldr	r3, [sp, #20]
 800e942:	b313      	cbz	r3, 800e98a <_strtod_l+0xb62>
 800e944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e946:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e94a:	d81e      	bhi.n	800e98a <_strtod_l+0xb62>
 800e94c:	a326      	add	r3, pc, #152	; (adr r3, 800e9e8 <_strtod_l+0xbc0>)
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	4620      	mov	r0, r4
 800e954:	4629      	mov	r1, r5
 800e956:	f7f2 f853 	bl	8000a00 <__aeabi_dcmple>
 800e95a:	b190      	cbz	r0, 800e982 <_strtod_l+0xb5a>
 800e95c:	4629      	mov	r1, r5
 800e95e:	4620      	mov	r0, r4
 800e960:	f7f2 f8aa 	bl	8000ab8 <__aeabi_d2uiz>
 800e964:	2801      	cmp	r0, #1
 800e966:	bf38      	it	cc
 800e968:	2001      	movcc	r0, #1
 800e96a:	f7f1 fd53 	bl	8000414 <__aeabi_ui2d>
 800e96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e970:	4604      	mov	r4, r0
 800e972:	460d      	mov	r5, r1
 800e974:	b9d3      	cbnz	r3, 800e9ac <_strtod_l+0xb84>
 800e976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e97a:	9012      	str	r0, [sp, #72]	; 0x48
 800e97c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e97e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e982:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e984:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e988:	1a9f      	subs	r7, r3, r2
 800e98a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e98e:	f001 fdc9 	bl	8010524 <__ulp>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	4630      	mov	r0, r6
 800e998:	4639      	mov	r1, r7
 800e99a:	f7f1 fdb5 	bl	8000508 <__aeabi_dmul>
 800e99e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e9a2:	f7f1 fbfb 	bl	800019c <__adddf3>
 800e9a6:	4680      	mov	r8, r0
 800e9a8:	4689      	mov	r9, r1
 800e9aa:	e77e      	b.n	800e8aa <_strtod_l+0xa82>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e9b4:	e7e3      	b.n	800e97e <_strtod_l+0xb56>
 800e9b6:	a30e      	add	r3, pc, #56	; (adr r3, 800e9f0 <_strtod_l+0xbc8>)
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	f7f2 f816 	bl	80009ec <__aeabi_dcmplt>
 800e9c0:	e7a1      	b.n	800e906 <_strtod_l+0xade>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	930a      	str	r3, [sp, #40]	; 0x28
 800e9c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e9c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	f7ff ba71 	b.w	800deb2 <_strtod_l+0x8a>
 800e9d0:	2a65      	cmp	r2, #101	; 0x65
 800e9d2:	f43f ab63 	beq.w	800e09c <_strtod_l+0x274>
 800e9d6:	2a45      	cmp	r2, #69	; 0x45
 800e9d8:	f43f ab60 	beq.w	800e09c <_strtod_l+0x274>
 800e9dc:	2301      	movs	r3, #1
 800e9de:	f7ff bb95 	b.w	800e10c <_strtod_l+0x2e4>
 800e9e2:	bf00      	nop
 800e9e4:	f3af 8000 	nop.w
 800e9e8:	ffc00000 	.word	0xffc00000
 800e9ec:	41dfffff 	.word	0x41dfffff
 800e9f0:	94a03595 	.word	0x94a03595
 800e9f4:	3fcfffff 	.word	0x3fcfffff

0800e9f8 <strtod>:
 800e9f8:	460a      	mov	r2, r1
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	4802      	ldr	r0, [pc, #8]	; (800ea08 <strtod+0x10>)
 800e9fe:	4b03      	ldr	r3, [pc, #12]	; (800ea0c <strtod+0x14>)
 800ea00:	6800      	ldr	r0, [r0, #0]
 800ea02:	f7ff ba11 	b.w	800de28 <_strtod_l>
 800ea06:	bf00      	nop
 800ea08:	20000198 	.word	0x20000198
 800ea0c:	20000200 	.word	0x20000200

0800ea10 <quorem>:
 800ea10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	6903      	ldr	r3, [r0, #16]
 800ea16:	690c      	ldr	r4, [r1, #16]
 800ea18:	4607      	mov	r7, r0
 800ea1a:	42a3      	cmp	r3, r4
 800ea1c:	f2c0 8082 	blt.w	800eb24 <quorem+0x114>
 800ea20:	3c01      	subs	r4, #1
 800ea22:	f100 0514 	add.w	r5, r0, #20
 800ea26:	f101 0814 	add.w	r8, r1, #20
 800ea2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea2e:	9301      	str	r3, [sp, #4]
 800ea30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea48:	d331      	bcc.n	800eaae <quorem+0x9e>
 800ea4a:	f04f 0e00 	mov.w	lr, #0
 800ea4e:	4640      	mov	r0, r8
 800ea50:	46ac      	mov	ip, r5
 800ea52:	46f2      	mov	sl, lr
 800ea54:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea58:	b293      	uxth	r3, r2
 800ea5a:	fb06 e303 	mla	r3, r6, r3, lr
 800ea5e:	0c12      	lsrs	r2, r2, #16
 800ea60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	fb06 e202 	mla	r2, r6, r2, lr
 800ea6a:	ebaa 0303 	sub.w	r3, sl, r3
 800ea6e:	f8dc a000 	ldr.w	sl, [ip]
 800ea72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea76:	fa1f fa8a 	uxth.w	sl, sl
 800ea7a:	4453      	add	r3, sl
 800ea7c:	f8dc a000 	ldr.w	sl, [ip]
 800ea80:	b292      	uxth	r2, r2
 800ea82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ea86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea90:	4581      	cmp	r9, r0
 800ea92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ea96:	f84c 3b04 	str.w	r3, [ip], #4
 800ea9a:	d2db      	bcs.n	800ea54 <quorem+0x44>
 800ea9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800eaa0:	b92b      	cbnz	r3, 800eaae <quorem+0x9e>
 800eaa2:	9b01      	ldr	r3, [sp, #4]
 800eaa4:	3b04      	subs	r3, #4
 800eaa6:	429d      	cmp	r5, r3
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	d32f      	bcc.n	800eb0c <quorem+0xfc>
 800eaac:	613c      	str	r4, [r7, #16]
 800eaae:	4638      	mov	r0, r7
 800eab0:	f001 fc90 	bl	80103d4 <__mcmp>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	db25      	blt.n	800eb04 <quorem+0xf4>
 800eab8:	4628      	mov	r0, r5
 800eaba:	f04f 0c00 	mov.w	ip, #0
 800eabe:	3601      	adds	r6, #1
 800eac0:	f858 1b04 	ldr.w	r1, [r8], #4
 800eac4:	f8d0 e000 	ldr.w	lr, [r0]
 800eac8:	b28b      	uxth	r3, r1
 800eaca:	ebac 0303 	sub.w	r3, ip, r3
 800eace:	fa1f f28e 	uxth.w	r2, lr
 800ead2:	4413      	add	r3, r2
 800ead4:	0c0a      	lsrs	r2, r1, #16
 800ead6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eada:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eade:	b29b      	uxth	r3, r3
 800eae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eae4:	45c1      	cmp	r9, r8
 800eae6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eaea:	f840 3b04 	str.w	r3, [r0], #4
 800eaee:	d2e7      	bcs.n	800eac0 <quorem+0xb0>
 800eaf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eaf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eaf8:	b922      	cbnz	r2, 800eb04 <quorem+0xf4>
 800eafa:	3b04      	subs	r3, #4
 800eafc:	429d      	cmp	r5, r3
 800eafe:	461a      	mov	r2, r3
 800eb00:	d30a      	bcc.n	800eb18 <quorem+0x108>
 800eb02:	613c      	str	r4, [r7, #16]
 800eb04:	4630      	mov	r0, r6
 800eb06:	b003      	add	sp, #12
 800eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0c:	6812      	ldr	r2, [r2, #0]
 800eb0e:	3b04      	subs	r3, #4
 800eb10:	2a00      	cmp	r2, #0
 800eb12:	d1cb      	bne.n	800eaac <quorem+0x9c>
 800eb14:	3c01      	subs	r4, #1
 800eb16:	e7c6      	b.n	800eaa6 <quorem+0x96>
 800eb18:	6812      	ldr	r2, [r2, #0]
 800eb1a:	3b04      	subs	r3, #4
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	d1f0      	bne.n	800eb02 <quorem+0xf2>
 800eb20:	3c01      	subs	r4, #1
 800eb22:	e7eb      	b.n	800eafc <quorem+0xec>
 800eb24:	2000      	movs	r0, #0
 800eb26:	e7ee      	b.n	800eb06 <quorem+0xf6>

0800eb28 <_dtoa_r>:
 800eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2c:	4616      	mov	r6, r2
 800eb2e:	461f      	mov	r7, r3
 800eb30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800eb32:	b099      	sub	sp, #100	; 0x64
 800eb34:	4605      	mov	r5, r0
 800eb36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800eb3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800eb3e:	b974      	cbnz	r4, 800eb5e <_dtoa_r+0x36>
 800eb40:	2010      	movs	r0, #16
 800eb42:	f001 f949 	bl	800fdd8 <malloc>
 800eb46:	4602      	mov	r2, r0
 800eb48:	6268      	str	r0, [r5, #36]	; 0x24
 800eb4a:	b920      	cbnz	r0, 800eb56 <_dtoa_r+0x2e>
 800eb4c:	21ea      	movs	r1, #234	; 0xea
 800eb4e:	4ba8      	ldr	r3, [pc, #672]	; (800edf0 <_dtoa_r+0x2c8>)
 800eb50:	48a8      	ldr	r0, [pc, #672]	; (800edf4 <_dtoa_r+0x2cc>)
 800eb52:	f002 f89f 	bl	8010c94 <__assert_func>
 800eb56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb5a:	6004      	str	r4, [r0, #0]
 800eb5c:	60c4      	str	r4, [r0, #12]
 800eb5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb60:	6819      	ldr	r1, [r3, #0]
 800eb62:	b151      	cbz	r1, 800eb7a <_dtoa_r+0x52>
 800eb64:	685a      	ldr	r2, [r3, #4]
 800eb66:	2301      	movs	r3, #1
 800eb68:	4093      	lsls	r3, r2
 800eb6a:	604a      	str	r2, [r1, #4]
 800eb6c:	608b      	str	r3, [r1, #8]
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f001 f9a8 	bl	800fec4 <_Bfree>
 800eb74:	2200      	movs	r2, #0
 800eb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	1e3b      	subs	r3, r7, #0
 800eb7c:	bfaf      	iteee	ge
 800eb7e:	2300      	movge	r3, #0
 800eb80:	2201      	movlt	r2, #1
 800eb82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb86:	9305      	strlt	r3, [sp, #20]
 800eb88:	bfa8      	it	ge
 800eb8a:	f8c8 3000 	strge.w	r3, [r8]
 800eb8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800eb92:	4b99      	ldr	r3, [pc, #612]	; (800edf8 <_dtoa_r+0x2d0>)
 800eb94:	bfb8      	it	lt
 800eb96:	f8c8 2000 	strlt.w	r2, [r8]
 800eb9a:	ea33 0309 	bics.w	r3, r3, r9
 800eb9e:	d119      	bne.n	800ebd4 <_dtoa_r+0xac>
 800eba0:	f242 730f 	movw	r3, #9999	; 0x270f
 800eba4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebac:	4333      	orrs	r3, r6
 800ebae:	f000 857f 	beq.w	800f6b0 <_dtoa_r+0xb88>
 800ebb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ebb4:	b953      	cbnz	r3, 800ebcc <_dtoa_r+0xa4>
 800ebb6:	4b91      	ldr	r3, [pc, #580]	; (800edfc <_dtoa_r+0x2d4>)
 800ebb8:	e022      	b.n	800ec00 <_dtoa_r+0xd8>
 800ebba:	4b91      	ldr	r3, [pc, #580]	; (800ee00 <_dtoa_r+0x2d8>)
 800ebbc:	9303      	str	r3, [sp, #12]
 800ebbe:	3308      	adds	r3, #8
 800ebc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ebc2:	6013      	str	r3, [r2, #0]
 800ebc4:	9803      	ldr	r0, [sp, #12]
 800ebc6:	b019      	add	sp, #100	; 0x64
 800ebc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebcc:	4b8b      	ldr	r3, [pc, #556]	; (800edfc <_dtoa_r+0x2d4>)
 800ebce:	9303      	str	r3, [sp, #12]
 800ebd0:	3303      	adds	r3, #3
 800ebd2:	e7f5      	b.n	800ebc0 <_dtoa_r+0x98>
 800ebd4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ebd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ebdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f7f1 fef8 	bl	80009d8 <__aeabi_dcmpeq>
 800ebe8:	4680      	mov	r8, r0
 800ebea:	b158      	cbz	r0, 800ec04 <_dtoa_r+0xdc>
 800ebec:	2301      	movs	r3, #1
 800ebee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 8558 	beq.w	800f6aa <_dtoa_r+0xb82>
 800ebfa:	4882      	ldr	r0, [pc, #520]	; (800ee04 <_dtoa_r+0x2dc>)
 800ebfc:	6018      	str	r0, [r3, #0]
 800ebfe:	1e43      	subs	r3, r0, #1
 800ec00:	9303      	str	r3, [sp, #12]
 800ec02:	e7df      	b.n	800ebc4 <_dtoa_r+0x9c>
 800ec04:	ab16      	add	r3, sp, #88	; 0x58
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	ab17      	add	r3, sp, #92	; 0x5c
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec12:	f001 fd01 	bl	8010618 <__d2b>
 800ec16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ec1a:	4683      	mov	fp, r0
 800ec1c:	2c00      	cmp	r4, #0
 800ec1e:	d07f      	beq.n	800ed20 <_dtoa_r+0x1f8>
 800ec20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ec2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ec32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ec36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	4b72      	ldr	r3, [pc, #456]	; (800ee08 <_dtoa_r+0x2e0>)
 800ec3e:	f7f1 faab 	bl	8000198 <__aeabi_dsub>
 800ec42:	a365      	add	r3, pc, #404	; (adr r3, 800edd8 <_dtoa_r+0x2b0>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f7f1 fc5e 	bl	8000508 <__aeabi_dmul>
 800ec4c:	a364      	add	r3, pc, #400	; (adr r3, 800ede0 <_dtoa_r+0x2b8>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	f7f1 faa3 	bl	800019c <__adddf3>
 800ec56:	4606      	mov	r6, r0
 800ec58:	4620      	mov	r0, r4
 800ec5a:	460f      	mov	r7, r1
 800ec5c:	f7f1 fbea 	bl	8000434 <__aeabi_i2d>
 800ec60:	a361      	add	r3, pc, #388	; (adr r3, 800ede8 <_dtoa_r+0x2c0>)
 800ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec66:	f7f1 fc4f 	bl	8000508 <__aeabi_dmul>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	4630      	mov	r0, r6
 800ec70:	4639      	mov	r1, r7
 800ec72:	f7f1 fa93 	bl	800019c <__adddf3>
 800ec76:	4606      	mov	r6, r0
 800ec78:	460f      	mov	r7, r1
 800ec7a:	f7f1 fef5 	bl	8000a68 <__aeabi_d2iz>
 800ec7e:	2200      	movs	r2, #0
 800ec80:	4682      	mov	sl, r0
 800ec82:	2300      	movs	r3, #0
 800ec84:	4630      	mov	r0, r6
 800ec86:	4639      	mov	r1, r7
 800ec88:	f7f1 feb0 	bl	80009ec <__aeabi_dcmplt>
 800ec8c:	b148      	cbz	r0, 800eca2 <_dtoa_r+0x17a>
 800ec8e:	4650      	mov	r0, sl
 800ec90:	f7f1 fbd0 	bl	8000434 <__aeabi_i2d>
 800ec94:	4632      	mov	r2, r6
 800ec96:	463b      	mov	r3, r7
 800ec98:	f7f1 fe9e 	bl	80009d8 <__aeabi_dcmpeq>
 800ec9c:	b908      	cbnz	r0, 800eca2 <_dtoa_r+0x17a>
 800ec9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eca2:	f1ba 0f16 	cmp.w	sl, #22
 800eca6:	d858      	bhi.n	800ed5a <_dtoa_r+0x232>
 800eca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecac:	4b57      	ldr	r3, [pc, #348]	; (800ee0c <_dtoa_r+0x2e4>)
 800ecae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7f1 fe99 	bl	80009ec <__aeabi_dcmplt>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d04f      	beq.n	800ed5e <_dtoa_r+0x236>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ecc8:	1b1c      	subs	r4, r3, r4
 800ecca:	1e63      	subs	r3, r4, #1
 800eccc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecce:	bf49      	itett	mi
 800ecd0:	f1c4 0301 	rsbmi	r3, r4, #1
 800ecd4:	2300      	movpl	r3, #0
 800ecd6:	9306      	strmi	r3, [sp, #24]
 800ecd8:	2300      	movmi	r3, #0
 800ecda:	bf54      	ite	pl
 800ecdc:	9306      	strpl	r3, [sp, #24]
 800ecde:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ece0:	f1ba 0f00 	cmp.w	sl, #0
 800ece4:	db3d      	blt.n	800ed62 <_dtoa_r+0x23a>
 800ece6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ecec:	4453      	add	r3, sl
 800ecee:	9309      	str	r3, [sp, #36]	; 0x24
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	930a      	str	r3, [sp, #40]	; 0x28
 800ecf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ecf6:	2b09      	cmp	r3, #9
 800ecf8:	f200 808c 	bhi.w	800ee14 <_dtoa_r+0x2ec>
 800ecfc:	2b05      	cmp	r3, #5
 800ecfe:	bfc4      	itt	gt
 800ed00:	3b04      	subgt	r3, #4
 800ed02:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ed04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed06:	bfc8      	it	gt
 800ed08:	2400      	movgt	r4, #0
 800ed0a:	f1a3 0302 	sub.w	r3, r3, #2
 800ed0e:	bfd8      	it	le
 800ed10:	2401      	movle	r4, #1
 800ed12:	2b03      	cmp	r3, #3
 800ed14:	f200 808a 	bhi.w	800ee2c <_dtoa_r+0x304>
 800ed18:	e8df f003 	tbb	[pc, r3]
 800ed1c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ed20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ed24:	441c      	add	r4, r3
 800ed26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ed2a:	2b20      	cmp	r3, #32
 800ed2c:	bfc3      	ittte	gt
 800ed2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ed36:	fa09 f303 	lslgt.w	r3, r9, r3
 800ed3a:	f1c3 0320 	rsble	r3, r3, #32
 800ed3e:	bfc6      	itte	gt
 800ed40:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ed44:	4318      	orrgt	r0, r3
 800ed46:	fa06 f003 	lslle.w	r0, r6, r3
 800ed4a:	f7f1 fb63 	bl	8000414 <__aeabi_ui2d>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ed54:	3c01      	subs	r4, #1
 800ed56:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed58:	e76f      	b.n	800ec3a <_dtoa_r+0x112>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e7b2      	b.n	800ecc4 <_dtoa_r+0x19c>
 800ed5e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ed60:	e7b1      	b.n	800ecc6 <_dtoa_r+0x19e>
 800ed62:	9b06      	ldr	r3, [sp, #24]
 800ed64:	eba3 030a 	sub.w	r3, r3, sl
 800ed68:	9306      	str	r3, [sp, #24]
 800ed6a:	f1ca 0300 	rsb	r3, sl, #0
 800ed6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ed70:	2300      	movs	r3, #0
 800ed72:	930e      	str	r3, [sp, #56]	; 0x38
 800ed74:	e7be      	b.n	800ecf4 <_dtoa_r+0x1cc>
 800ed76:	2300      	movs	r3, #0
 800ed78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	dc58      	bgt.n	800ee32 <_dtoa_r+0x30a>
 800ed80:	f04f 0901 	mov.w	r9, #1
 800ed84:	464b      	mov	r3, r9
 800ed86:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ed8e:	2200      	movs	r2, #0
 800ed90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ed92:	6042      	str	r2, [r0, #4]
 800ed94:	2204      	movs	r2, #4
 800ed96:	f102 0614 	add.w	r6, r2, #20
 800ed9a:	429e      	cmp	r6, r3
 800ed9c:	6841      	ldr	r1, [r0, #4]
 800ed9e:	d94e      	bls.n	800ee3e <_dtoa_r+0x316>
 800eda0:	4628      	mov	r0, r5
 800eda2:	f001 f84f 	bl	800fe44 <_Balloc>
 800eda6:	9003      	str	r0, [sp, #12]
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d14c      	bne.n	800ee46 <_dtoa_r+0x31e>
 800edac:	4602      	mov	r2, r0
 800edae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800edb2:	4b17      	ldr	r3, [pc, #92]	; (800ee10 <_dtoa_r+0x2e8>)
 800edb4:	e6cc      	b.n	800eb50 <_dtoa_r+0x28>
 800edb6:	2301      	movs	r3, #1
 800edb8:	e7de      	b.n	800ed78 <_dtoa_r+0x250>
 800edba:	2300      	movs	r3, #0
 800edbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800edbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800edc0:	eb0a 0903 	add.w	r9, sl, r3
 800edc4:	f109 0301 	add.w	r3, r9, #1
 800edc8:	2b01      	cmp	r3, #1
 800edca:	9308      	str	r3, [sp, #32]
 800edcc:	bfb8      	it	lt
 800edce:	2301      	movlt	r3, #1
 800edd0:	e7dd      	b.n	800ed8e <_dtoa_r+0x266>
 800edd2:	2301      	movs	r3, #1
 800edd4:	e7f2      	b.n	800edbc <_dtoa_r+0x294>
 800edd6:	bf00      	nop
 800edd8:	636f4361 	.word	0x636f4361
 800eddc:	3fd287a7 	.word	0x3fd287a7
 800ede0:	8b60c8b3 	.word	0x8b60c8b3
 800ede4:	3fc68a28 	.word	0x3fc68a28
 800ede8:	509f79fb 	.word	0x509f79fb
 800edec:	3fd34413 	.word	0x3fd34413
 800edf0:	08011c05 	.word	0x08011c05
 800edf4:	08011c1c 	.word	0x08011c1c
 800edf8:	7ff00000 	.word	0x7ff00000
 800edfc:	08011c01 	.word	0x08011c01
 800ee00:	08011bf8 	.word	0x08011bf8
 800ee04:	08011b81 	.word	0x08011b81
 800ee08:	3ff80000 	.word	0x3ff80000
 800ee0c:	08011d88 	.word	0x08011d88
 800ee10:	08011c77 	.word	0x08011c77
 800ee14:	2401      	movs	r4, #1
 800ee16:	2300      	movs	r3, #0
 800ee18:	940b      	str	r4, [sp, #44]	; 0x2c
 800ee1a:	9322      	str	r3, [sp, #136]	; 0x88
 800ee1c:	f04f 39ff 	mov.w	r9, #4294967295
 800ee20:	2200      	movs	r2, #0
 800ee22:	2312      	movs	r3, #18
 800ee24:	f8cd 9020 	str.w	r9, [sp, #32]
 800ee28:	9223      	str	r2, [sp, #140]	; 0x8c
 800ee2a:	e7b0      	b.n	800ed8e <_dtoa_r+0x266>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee30:	e7f4      	b.n	800ee1c <_dtoa_r+0x2f4>
 800ee32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ee36:	464b      	mov	r3, r9
 800ee38:	f8cd 9020 	str.w	r9, [sp, #32]
 800ee3c:	e7a7      	b.n	800ed8e <_dtoa_r+0x266>
 800ee3e:	3101      	adds	r1, #1
 800ee40:	6041      	str	r1, [r0, #4]
 800ee42:	0052      	lsls	r2, r2, #1
 800ee44:	e7a7      	b.n	800ed96 <_dtoa_r+0x26e>
 800ee46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ee48:	9a03      	ldr	r2, [sp, #12]
 800ee4a:	601a      	str	r2, [r3, #0]
 800ee4c:	9b08      	ldr	r3, [sp, #32]
 800ee4e:	2b0e      	cmp	r3, #14
 800ee50:	f200 80a8 	bhi.w	800efa4 <_dtoa_r+0x47c>
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	f000 80a5 	beq.w	800efa4 <_dtoa_r+0x47c>
 800ee5a:	f1ba 0f00 	cmp.w	sl, #0
 800ee5e:	dd34      	ble.n	800eeca <_dtoa_r+0x3a2>
 800ee60:	4a9a      	ldr	r2, [pc, #616]	; (800f0cc <_dtoa_r+0x5a4>)
 800ee62:	f00a 030f 	and.w	r3, sl, #15
 800ee66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ee6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ee72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ee76:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ee7a:	d016      	beq.n	800eeaa <_dtoa_r+0x382>
 800ee7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ee80:	4b93      	ldr	r3, [pc, #588]	; (800f0d0 <_dtoa_r+0x5a8>)
 800ee82:	2703      	movs	r7, #3
 800ee84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee88:	f7f1 fc68 	bl	800075c <__aeabi_ddiv>
 800ee8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee90:	f004 040f 	and.w	r4, r4, #15
 800ee94:	4e8e      	ldr	r6, [pc, #568]	; (800f0d0 <_dtoa_r+0x5a8>)
 800ee96:	b954      	cbnz	r4, 800eeae <_dtoa_r+0x386>
 800ee98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eea0:	f7f1 fc5c 	bl	800075c <__aeabi_ddiv>
 800eea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eea8:	e029      	b.n	800eefe <_dtoa_r+0x3d6>
 800eeaa:	2702      	movs	r7, #2
 800eeac:	e7f2      	b.n	800ee94 <_dtoa_r+0x36c>
 800eeae:	07e1      	lsls	r1, r4, #31
 800eeb0:	d508      	bpl.n	800eec4 <_dtoa_r+0x39c>
 800eeb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eeb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eeba:	f7f1 fb25 	bl	8000508 <__aeabi_dmul>
 800eebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eec2:	3701      	adds	r7, #1
 800eec4:	1064      	asrs	r4, r4, #1
 800eec6:	3608      	adds	r6, #8
 800eec8:	e7e5      	b.n	800ee96 <_dtoa_r+0x36e>
 800eeca:	f000 80a5 	beq.w	800f018 <_dtoa_r+0x4f0>
 800eece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eed2:	f1ca 0400 	rsb	r4, sl, #0
 800eed6:	4b7d      	ldr	r3, [pc, #500]	; (800f0cc <_dtoa_r+0x5a4>)
 800eed8:	f004 020f 	and.w	r2, r4, #15
 800eedc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 fb10 	bl	8000508 <__aeabi_dmul>
 800eee8:	2702      	movs	r7, #2
 800eeea:	2300      	movs	r3, #0
 800eeec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eef0:	4e77      	ldr	r6, [pc, #476]	; (800f0d0 <_dtoa_r+0x5a8>)
 800eef2:	1124      	asrs	r4, r4, #4
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	f040 8084 	bne.w	800f002 <_dtoa_r+0x4da>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1d2      	bne.n	800eea4 <_dtoa_r+0x37c>
 800eefe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	f000 808b 	beq.w	800f01c <_dtoa_r+0x4f4>
 800ef06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ef0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ef0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ef12:	2200      	movs	r2, #0
 800ef14:	4b6f      	ldr	r3, [pc, #444]	; (800f0d4 <_dtoa_r+0x5ac>)
 800ef16:	f7f1 fd69 	bl	80009ec <__aeabi_dcmplt>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d07e      	beq.n	800f01c <_dtoa_r+0x4f4>
 800ef1e:	9b08      	ldr	r3, [sp, #32]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d07b      	beq.n	800f01c <_dtoa_r+0x4f4>
 800ef24:	f1b9 0f00 	cmp.w	r9, #0
 800ef28:	dd38      	ble.n	800ef9c <_dtoa_r+0x474>
 800ef2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ef2e:	2200      	movs	r2, #0
 800ef30:	4b69      	ldr	r3, [pc, #420]	; (800f0d8 <_dtoa_r+0x5b0>)
 800ef32:	f7f1 fae9 	bl	8000508 <__aeabi_dmul>
 800ef36:	464c      	mov	r4, r9
 800ef38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ef40:	3701      	adds	r7, #1
 800ef42:	4638      	mov	r0, r7
 800ef44:	f7f1 fa76 	bl	8000434 <__aeabi_i2d>
 800ef48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef4c:	f7f1 fadc 	bl	8000508 <__aeabi_dmul>
 800ef50:	2200      	movs	r2, #0
 800ef52:	4b62      	ldr	r3, [pc, #392]	; (800f0dc <_dtoa_r+0x5b4>)
 800ef54:	f7f1 f922 	bl	800019c <__adddf3>
 800ef58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ef5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef60:	9611      	str	r6, [sp, #68]	; 0x44
 800ef62:	2c00      	cmp	r4, #0
 800ef64:	d15d      	bne.n	800f022 <_dtoa_r+0x4fa>
 800ef66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	4b5c      	ldr	r3, [pc, #368]	; (800f0e0 <_dtoa_r+0x5b8>)
 800ef6e:	f7f1 f913 	bl	8000198 <__aeabi_dsub>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef7a:	4633      	mov	r3, r6
 800ef7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef7e:	f7f1 fd53 	bl	8000a28 <__aeabi_dcmpgt>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	f040 829c 	bne.w	800f4c0 <_dtoa_r+0x998>
 800ef88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ef92:	f7f1 fd2b 	bl	80009ec <__aeabi_dcmplt>
 800ef96:	2800      	cmp	r0, #0
 800ef98:	f040 8290 	bne.w	800f4bc <_dtoa_r+0x994>
 800ef9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800efa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800efa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f2c0 8152 	blt.w	800f250 <_dtoa_r+0x728>
 800efac:	f1ba 0f0e 	cmp.w	sl, #14
 800efb0:	f300 814e 	bgt.w	800f250 <_dtoa_r+0x728>
 800efb4:	4b45      	ldr	r3, [pc, #276]	; (800f0cc <_dtoa_r+0x5a4>)
 800efb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800efba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800efbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800efc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f280 80db 	bge.w	800f180 <_dtoa_r+0x658>
 800efca:	9b08      	ldr	r3, [sp, #32]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f300 80d7 	bgt.w	800f180 <_dtoa_r+0x658>
 800efd2:	f040 8272 	bne.w	800f4ba <_dtoa_r+0x992>
 800efd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efda:	2200      	movs	r2, #0
 800efdc:	4b40      	ldr	r3, [pc, #256]	; (800f0e0 <_dtoa_r+0x5b8>)
 800efde:	f7f1 fa93 	bl	8000508 <__aeabi_dmul>
 800efe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efe6:	f7f1 fd15 	bl	8000a14 <__aeabi_dcmpge>
 800efea:	9c08      	ldr	r4, [sp, #32]
 800efec:	4626      	mov	r6, r4
 800efee:	2800      	cmp	r0, #0
 800eff0:	f040 8248 	bne.w	800f484 <_dtoa_r+0x95c>
 800eff4:	2331      	movs	r3, #49	; 0x31
 800eff6:	9f03      	ldr	r7, [sp, #12]
 800eff8:	f10a 0a01 	add.w	sl, sl, #1
 800effc:	f807 3b01 	strb.w	r3, [r7], #1
 800f000:	e244      	b.n	800f48c <_dtoa_r+0x964>
 800f002:	07e2      	lsls	r2, r4, #31
 800f004:	d505      	bpl.n	800f012 <_dtoa_r+0x4ea>
 800f006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f00a:	f7f1 fa7d 	bl	8000508 <__aeabi_dmul>
 800f00e:	2301      	movs	r3, #1
 800f010:	3701      	adds	r7, #1
 800f012:	1064      	asrs	r4, r4, #1
 800f014:	3608      	adds	r6, #8
 800f016:	e76d      	b.n	800eef4 <_dtoa_r+0x3cc>
 800f018:	2702      	movs	r7, #2
 800f01a:	e770      	b.n	800eefe <_dtoa_r+0x3d6>
 800f01c:	46d0      	mov	r8, sl
 800f01e:	9c08      	ldr	r4, [sp, #32]
 800f020:	e78f      	b.n	800ef42 <_dtoa_r+0x41a>
 800f022:	9903      	ldr	r1, [sp, #12]
 800f024:	4b29      	ldr	r3, [pc, #164]	; (800f0cc <_dtoa_r+0x5a4>)
 800f026:	4421      	add	r1, r4
 800f028:	9112      	str	r1, [sp, #72]	; 0x48
 800f02a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f02c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f030:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800f034:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f038:	2900      	cmp	r1, #0
 800f03a:	d055      	beq.n	800f0e8 <_dtoa_r+0x5c0>
 800f03c:	2000      	movs	r0, #0
 800f03e:	4929      	ldr	r1, [pc, #164]	; (800f0e4 <_dtoa_r+0x5bc>)
 800f040:	f7f1 fb8c 	bl	800075c <__aeabi_ddiv>
 800f044:	463b      	mov	r3, r7
 800f046:	4632      	mov	r2, r6
 800f048:	f7f1 f8a6 	bl	8000198 <__aeabi_dsub>
 800f04c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f050:	9f03      	ldr	r7, [sp, #12]
 800f052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f056:	f7f1 fd07 	bl	8000a68 <__aeabi_d2iz>
 800f05a:	4604      	mov	r4, r0
 800f05c:	f7f1 f9ea 	bl	8000434 <__aeabi_i2d>
 800f060:	4602      	mov	r2, r0
 800f062:	460b      	mov	r3, r1
 800f064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f068:	f7f1 f896 	bl	8000198 <__aeabi_dsub>
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	3430      	adds	r4, #48	; 0x30
 800f072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f07a:	f807 4b01 	strb.w	r4, [r7], #1
 800f07e:	f7f1 fcb5 	bl	80009ec <__aeabi_dcmplt>
 800f082:	2800      	cmp	r0, #0
 800f084:	d174      	bne.n	800f170 <_dtoa_r+0x648>
 800f086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f08a:	2000      	movs	r0, #0
 800f08c:	4911      	ldr	r1, [pc, #68]	; (800f0d4 <_dtoa_r+0x5ac>)
 800f08e:	f7f1 f883 	bl	8000198 <__aeabi_dsub>
 800f092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f096:	f7f1 fca9 	bl	80009ec <__aeabi_dcmplt>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	f040 80b7 	bne.w	800f20e <_dtoa_r+0x6e6>
 800f0a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0a2:	429f      	cmp	r7, r3
 800f0a4:	f43f af7a 	beq.w	800ef9c <_dtoa_r+0x474>
 800f0a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	4b0a      	ldr	r3, [pc, #40]	; (800f0d8 <_dtoa_r+0x5b0>)
 800f0b0:	f7f1 fa2a 	bl	8000508 <__aeabi_dmul>
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f0ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0be:	4b06      	ldr	r3, [pc, #24]	; (800f0d8 <_dtoa_r+0x5b0>)
 800f0c0:	f7f1 fa22 	bl	8000508 <__aeabi_dmul>
 800f0c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0c8:	e7c3      	b.n	800f052 <_dtoa_r+0x52a>
 800f0ca:	bf00      	nop
 800f0cc:	08011d88 	.word	0x08011d88
 800f0d0:	08011d60 	.word	0x08011d60
 800f0d4:	3ff00000 	.word	0x3ff00000
 800f0d8:	40240000 	.word	0x40240000
 800f0dc:	401c0000 	.word	0x401c0000
 800f0e0:	40140000 	.word	0x40140000
 800f0e4:	3fe00000 	.word	0x3fe00000
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	4639      	mov	r1, r7
 800f0ec:	f7f1 fa0c 	bl	8000508 <__aeabi_dmul>
 800f0f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800f0f6:	9c03      	ldr	r4, [sp, #12]
 800f0f8:	9314      	str	r3, [sp, #80]	; 0x50
 800f0fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0fe:	f7f1 fcb3 	bl	8000a68 <__aeabi_d2iz>
 800f102:	9015      	str	r0, [sp, #84]	; 0x54
 800f104:	f7f1 f996 	bl	8000434 <__aeabi_i2d>
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f110:	f7f1 f842 	bl	8000198 <__aeabi_dsub>
 800f114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f116:	4606      	mov	r6, r0
 800f118:	3330      	adds	r3, #48	; 0x30
 800f11a:	f804 3b01 	strb.w	r3, [r4], #1
 800f11e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f120:	460f      	mov	r7, r1
 800f122:	429c      	cmp	r4, r3
 800f124:	f04f 0200 	mov.w	r2, #0
 800f128:	d124      	bne.n	800f174 <_dtoa_r+0x64c>
 800f12a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f12e:	4bb0      	ldr	r3, [pc, #704]	; (800f3f0 <_dtoa_r+0x8c8>)
 800f130:	f7f1 f834 	bl	800019c <__adddf3>
 800f134:	4602      	mov	r2, r0
 800f136:	460b      	mov	r3, r1
 800f138:	4630      	mov	r0, r6
 800f13a:	4639      	mov	r1, r7
 800f13c:	f7f1 fc74 	bl	8000a28 <__aeabi_dcmpgt>
 800f140:	2800      	cmp	r0, #0
 800f142:	d163      	bne.n	800f20c <_dtoa_r+0x6e4>
 800f144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f148:	2000      	movs	r0, #0
 800f14a:	49a9      	ldr	r1, [pc, #676]	; (800f3f0 <_dtoa_r+0x8c8>)
 800f14c:	f7f1 f824 	bl	8000198 <__aeabi_dsub>
 800f150:	4602      	mov	r2, r0
 800f152:	460b      	mov	r3, r1
 800f154:	4630      	mov	r0, r6
 800f156:	4639      	mov	r1, r7
 800f158:	f7f1 fc48 	bl	80009ec <__aeabi_dcmplt>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	f43f af1d 	beq.w	800ef9c <_dtoa_r+0x474>
 800f162:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f164:	1e7b      	subs	r3, r7, #1
 800f166:	9314      	str	r3, [sp, #80]	; 0x50
 800f168:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f16c:	2b30      	cmp	r3, #48	; 0x30
 800f16e:	d0f8      	beq.n	800f162 <_dtoa_r+0x63a>
 800f170:	46c2      	mov	sl, r8
 800f172:	e03b      	b.n	800f1ec <_dtoa_r+0x6c4>
 800f174:	4b9f      	ldr	r3, [pc, #636]	; (800f3f4 <_dtoa_r+0x8cc>)
 800f176:	f7f1 f9c7 	bl	8000508 <__aeabi_dmul>
 800f17a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f17e:	e7bc      	b.n	800f0fa <_dtoa_r+0x5d2>
 800f180:	9f03      	ldr	r7, [sp, #12]
 800f182:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f18a:	4640      	mov	r0, r8
 800f18c:	4649      	mov	r1, r9
 800f18e:	f7f1 fae5 	bl	800075c <__aeabi_ddiv>
 800f192:	f7f1 fc69 	bl	8000a68 <__aeabi_d2iz>
 800f196:	4604      	mov	r4, r0
 800f198:	f7f1 f94c 	bl	8000434 <__aeabi_i2d>
 800f19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1a0:	f7f1 f9b2 	bl	8000508 <__aeabi_dmul>
 800f1a4:	4602      	mov	r2, r0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	4649      	mov	r1, r9
 800f1ac:	f7f0 fff4 	bl	8000198 <__aeabi_dsub>
 800f1b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f1b4:	f807 6b01 	strb.w	r6, [r7], #1
 800f1b8:	9e03      	ldr	r6, [sp, #12]
 800f1ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f1be:	1bbe      	subs	r6, r7, r6
 800f1c0:	45b4      	cmp	ip, r6
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	d136      	bne.n	800f236 <_dtoa_r+0x70e>
 800f1c8:	f7f0 ffe8 	bl	800019c <__adddf3>
 800f1cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1d0:	4680      	mov	r8, r0
 800f1d2:	4689      	mov	r9, r1
 800f1d4:	f7f1 fc28 	bl	8000a28 <__aeabi_dcmpgt>
 800f1d8:	bb58      	cbnz	r0, 800f232 <_dtoa_r+0x70a>
 800f1da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1de:	4640      	mov	r0, r8
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	f7f1 fbf9 	bl	80009d8 <__aeabi_dcmpeq>
 800f1e6:	b108      	cbz	r0, 800f1ec <_dtoa_r+0x6c4>
 800f1e8:	07e1      	lsls	r1, r4, #31
 800f1ea:	d422      	bmi.n	800f232 <_dtoa_r+0x70a>
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	4659      	mov	r1, fp
 800f1f0:	f000 fe68 	bl	800fec4 <_Bfree>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	703b      	strb	r3, [r7, #0]
 800f1f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f1fa:	f10a 0001 	add.w	r0, sl, #1
 800f1fe:	6018      	str	r0, [r3, #0]
 800f200:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f202:	2b00      	cmp	r3, #0
 800f204:	f43f acde 	beq.w	800ebc4 <_dtoa_r+0x9c>
 800f208:	601f      	str	r7, [r3, #0]
 800f20a:	e4db      	b.n	800ebc4 <_dtoa_r+0x9c>
 800f20c:	4627      	mov	r7, r4
 800f20e:	463b      	mov	r3, r7
 800f210:	461f      	mov	r7, r3
 800f212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f216:	2a39      	cmp	r2, #57	; 0x39
 800f218:	d107      	bne.n	800f22a <_dtoa_r+0x702>
 800f21a:	9a03      	ldr	r2, [sp, #12]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d1f7      	bne.n	800f210 <_dtoa_r+0x6e8>
 800f220:	2230      	movs	r2, #48	; 0x30
 800f222:	9903      	ldr	r1, [sp, #12]
 800f224:	f108 0801 	add.w	r8, r8, #1
 800f228:	700a      	strb	r2, [r1, #0]
 800f22a:	781a      	ldrb	r2, [r3, #0]
 800f22c:	3201      	adds	r2, #1
 800f22e:	701a      	strb	r2, [r3, #0]
 800f230:	e79e      	b.n	800f170 <_dtoa_r+0x648>
 800f232:	46d0      	mov	r8, sl
 800f234:	e7eb      	b.n	800f20e <_dtoa_r+0x6e6>
 800f236:	2200      	movs	r2, #0
 800f238:	4b6e      	ldr	r3, [pc, #440]	; (800f3f4 <_dtoa_r+0x8cc>)
 800f23a:	f7f1 f965 	bl	8000508 <__aeabi_dmul>
 800f23e:	2200      	movs	r2, #0
 800f240:	2300      	movs	r3, #0
 800f242:	4680      	mov	r8, r0
 800f244:	4689      	mov	r9, r1
 800f246:	f7f1 fbc7 	bl	80009d8 <__aeabi_dcmpeq>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d09b      	beq.n	800f186 <_dtoa_r+0x65e>
 800f24e:	e7cd      	b.n	800f1ec <_dtoa_r+0x6c4>
 800f250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f252:	2a00      	cmp	r2, #0
 800f254:	f000 80d0 	beq.w	800f3f8 <_dtoa_r+0x8d0>
 800f258:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f25a:	2a01      	cmp	r2, #1
 800f25c:	f300 80ae 	bgt.w	800f3bc <_dtoa_r+0x894>
 800f260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f262:	2a00      	cmp	r2, #0
 800f264:	f000 80a6 	beq.w	800f3b4 <_dtoa_r+0x88c>
 800f268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f26c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f26e:	9f06      	ldr	r7, [sp, #24]
 800f270:	9a06      	ldr	r2, [sp, #24]
 800f272:	2101      	movs	r1, #1
 800f274:	441a      	add	r2, r3
 800f276:	9206      	str	r2, [sp, #24]
 800f278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f27a:	4628      	mov	r0, r5
 800f27c:	441a      	add	r2, r3
 800f27e:	9209      	str	r2, [sp, #36]	; 0x24
 800f280:	f000 ff20 	bl	80100c4 <__i2b>
 800f284:	4606      	mov	r6, r0
 800f286:	2f00      	cmp	r7, #0
 800f288:	dd0c      	ble.n	800f2a4 <_dtoa_r+0x77c>
 800f28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dd09      	ble.n	800f2a4 <_dtoa_r+0x77c>
 800f290:	42bb      	cmp	r3, r7
 800f292:	bfa8      	it	ge
 800f294:	463b      	movge	r3, r7
 800f296:	9a06      	ldr	r2, [sp, #24]
 800f298:	1aff      	subs	r7, r7, r3
 800f29a:	1ad2      	subs	r2, r2, r3
 800f29c:	9206      	str	r2, [sp, #24]
 800f29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a6:	b1f3      	cbz	r3, 800f2e6 <_dtoa_r+0x7be>
 800f2a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 80a8 	beq.w	800f400 <_dtoa_r+0x8d8>
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	dd10      	ble.n	800f2d6 <_dtoa_r+0x7ae>
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	f000 ffc1 	bl	8010240 <__pow5mult>
 800f2be:	465a      	mov	r2, fp
 800f2c0:	4601      	mov	r1, r0
 800f2c2:	4606      	mov	r6, r0
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	f000 ff13 	bl	80100f0 <__multiply>
 800f2ca:	4680      	mov	r8, r0
 800f2cc:	4659      	mov	r1, fp
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f000 fdf8 	bl	800fec4 <_Bfree>
 800f2d4:	46c3      	mov	fp, r8
 800f2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2d8:	1b1a      	subs	r2, r3, r4
 800f2da:	d004      	beq.n	800f2e6 <_dtoa_r+0x7be>
 800f2dc:	4659      	mov	r1, fp
 800f2de:	4628      	mov	r0, r5
 800f2e0:	f000 ffae 	bl	8010240 <__pow5mult>
 800f2e4:	4683      	mov	fp, r0
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f000 feeb 	bl	80100c4 <__i2b>
 800f2ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f340 8086 	ble.w	800f404 <_dtoa_r+0x8dc>
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	4601      	mov	r1, r0
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f000 ff9f 	bl	8010240 <__pow5mult>
 800f302:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f304:	4604      	mov	r4, r0
 800f306:	2b01      	cmp	r3, #1
 800f308:	dd7f      	ble.n	800f40a <_dtoa_r+0x8e2>
 800f30a:	f04f 0800 	mov.w	r8, #0
 800f30e:	6923      	ldr	r3, [r4, #16]
 800f310:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f314:	6918      	ldr	r0, [r3, #16]
 800f316:	f000 fe87 	bl	8010028 <__hi0bits>
 800f31a:	f1c0 0020 	rsb	r0, r0, #32
 800f31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f320:	4418      	add	r0, r3
 800f322:	f010 001f 	ands.w	r0, r0, #31
 800f326:	f000 8092 	beq.w	800f44e <_dtoa_r+0x926>
 800f32a:	f1c0 0320 	rsb	r3, r0, #32
 800f32e:	2b04      	cmp	r3, #4
 800f330:	f340 808a 	ble.w	800f448 <_dtoa_r+0x920>
 800f334:	f1c0 001c 	rsb	r0, r0, #28
 800f338:	9b06      	ldr	r3, [sp, #24]
 800f33a:	4407      	add	r7, r0
 800f33c:	4403      	add	r3, r0
 800f33e:	9306      	str	r3, [sp, #24]
 800f340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f342:	4403      	add	r3, r0
 800f344:	9309      	str	r3, [sp, #36]	; 0x24
 800f346:	9b06      	ldr	r3, [sp, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dd05      	ble.n	800f358 <_dtoa_r+0x830>
 800f34c:	4659      	mov	r1, fp
 800f34e:	461a      	mov	r2, r3
 800f350:	4628      	mov	r0, r5
 800f352:	f000 ffcf 	bl	80102f4 <__lshift>
 800f356:	4683      	mov	fp, r0
 800f358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dd05      	ble.n	800f36a <_dtoa_r+0x842>
 800f35e:	4621      	mov	r1, r4
 800f360:	461a      	mov	r2, r3
 800f362:	4628      	mov	r0, r5
 800f364:	f000 ffc6 	bl	80102f4 <__lshift>
 800f368:	4604      	mov	r4, r0
 800f36a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d070      	beq.n	800f452 <_dtoa_r+0x92a>
 800f370:	4621      	mov	r1, r4
 800f372:	4658      	mov	r0, fp
 800f374:	f001 f82e 	bl	80103d4 <__mcmp>
 800f378:	2800      	cmp	r0, #0
 800f37a:	da6a      	bge.n	800f452 <_dtoa_r+0x92a>
 800f37c:	2300      	movs	r3, #0
 800f37e:	4659      	mov	r1, fp
 800f380:	220a      	movs	r2, #10
 800f382:	4628      	mov	r0, r5
 800f384:	f000 fdc0 	bl	800ff08 <__multadd>
 800f388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f38a:	4683      	mov	fp, r0
 800f38c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 8194 	beq.w	800f6be <_dtoa_r+0xb96>
 800f396:	4631      	mov	r1, r6
 800f398:	2300      	movs	r3, #0
 800f39a:	220a      	movs	r2, #10
 800f39c:	4628      	mov	r0, r5
 800f39e:	f000 fdb3 	bl	800ff08 <__multadd>
 800f3a2:	f1b9 0f00 	cmp.w	r9, #0
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	f300 8093 	bgt.w	800f4d2 <_dtoa_r+0x9aa>
 800f3ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	dc57      	bgt.n	800f462 <_dtoa_r+0x93a>
 800f3b2:	e08e      	b.n	800f4d2 <_dtoa_r+0x9aa>
 800f3b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f3b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f3ba:	e757      	b.n	800f26c <_dtoa_r+0x744>
 800f3bc:	9b08      	ldr	r3, [sp, #32]
 800f3be:	1e5c      	subs	r4, r3, #1
 800f3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c2:	42a3      	cmp	r3, r4
 800f3c4:	bfb7      	itett	lt
 800f3c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f3c8:	1b1c      	subge	r4, r3, r4
 800f3ca:	1ae2      	sublt	r2, r4, r3
 800f3cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f3ce:	bfbe      	ittt	lt
 800f3d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f3d2:	189b      	addlt	r3, r3, r2
 800f3d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f3d6:	9b08      	ldr	r3, [sp, #32]
 800f3d8:	bfb8      	it	lt
 800f3da:	2400      	movlt	r4, #0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	bfbb      	ittet	lt
 800f3e0:	9b06      	ldrlt	r3, [sp, #24]
 800f3e2:	9a08      	ldrlt	r2, [sp, #32]
 800f3e4:	9f06      	ldrge	r7, [sp, #24]
 800f3e6:	1a9f      	sublt	r7, r3, r2
 800f3e8:	bfac      	ite	ge
 800f3ea:	9b08      	ldrge	r3, [sp, #32]
 800f3ec:	2300      	movlt	r3, #0
 800f3ee:	e73f      	b.n	800f270 <_dtoa_r+0x748>
 800f3f0:	3fe00000 	.word	0x3fe00000
 800f3f4:	40240000 	.word	0x40240000
 800f3f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f3fa:	9f06      	ldr	r7, [sp, #24]
 800f3fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f3fe:	e742      	b.n	800f286 <_dtoa_r+0x75e>
 800f400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f402:	e76b      	b.n	800f2dc <_dtoa_r+0x7b4>
 800f404:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f406:	2b01      	cmp	r3, #1
 800f408:	dc19      	bgt.n	800f43e <_dtoa_r+0x916>
 800f40a:	9b04      	ldr	r3, [sp, #16]
 800f40c:	b9bb      	cbnz	r3, 800f43e <_dtoa_r+0x916>
 800f40e:	9b05      	ldr	r3, [sp, #20]
 800f410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f414:	b99b      	cbnz	r3, 800f43e <_dtoa_r+0x916>
 800f416:	9b05      	ldr	r3, [sp, #20]
 800f418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f41c:	0d1b      	lsrs	r3, r3, #20
 800f41e:	051b      	lsls	r3, r3, #20
 800f420:	b183      	cbz	r3, 800f444 <_dtoa_r+0x91c>
 800f422:	f04f 0801 	mov.w	r8, #1
 800f426:	9b06      	ldr	r3, [sp, #24]
 800f428:	3301      	adds	r3, #1
 800f42a:	9306      	str	r3, [sp, #24]
 800f42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42e:	3301      	adds	r3, #1
 800f430:	9309      	str	r3, [sp, #36]	; 0x24
 800f432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f434:	2b00      	cmp	r3, #0
 800f436:	f47f af6a 	bne.w	800f30e <_dtoa_r+0x7e6>
 800f43a:	2001      	movs	r0, #1
 800f43c:	e76f      	b.n	800f31e <_dtoa_r+0x7f6>
 800f43e:	f04f 0800 	mov.w	r8, #0
 800f442:	e7f6      	b.n	800f432 <_dtoa_r+0x90a>
 800f444:	4698      	mov	r8, r3
 800f446:	e7f4      	b.n	800f432 <_dtoa_r+0x90a>
 800f448:	f43f af7d 	beq.w	800f346 <_dtoa_r+0x81e>
 800f44c:	4618      	mov	r0, r3
 800f44e:	301c      	adds	r0, #28
 800f450:	e772      	b.n	800f338 <_dtoa_r+0x810>
 800f452:	9b08      	ldr	r3, [sp, #32]
 800f454:	2b00      	cmp	r3, #0
 800f456:	dc36      	bgt.n	800f4c6 <_dtoa_r+0x99e>
 800f458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	dd33      	ble.n	800f4c6 <_dtoa_r+0x99e>
 800f45e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f462:	f1b9 0f00 	cmp.w	r9, #0
 800f466:	d10d      	bne.n	800f484 <_dtoa_r+0x95c>
 800f468:	4621      	mov	r1, r4
 800f46a:	464b      	mov	r3, r9
 800f46c:	2205      	movs	r2, #5
 800f46e:	4628      	mov	r0, r5
 800f470:	f000 fd4a 	bl	800ff08 <__multadd>
 800f474:	4601      	mov	r1, r0
 800f476:	4604      	mov	r4, r0
 800f478:	4658      	mov	r0, fp
 800f47a:	f000 ffab 	bl	80103d4 <__mcmp>
 800f47e:	2800      	cmp	r0, #0
 800f480:	f73f adb8 	bgt.w	800eff4 <_dtoa_r+0x4cc>
 800f484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f486:	9f03      	ldr	r7, [sp, #12]
 800f488:	ea6f 0a03 	mvn.w	sl, r3
 800f48c:	f04f 0800 	mov.w	r8, #0
 800f490:	4621      	mov	r1, r4
 800f492:	4628      	mov	r0, r5
 800f494:	f000 fd16 	bl	800fec4 <_Bfree>
 800f498:	2e00      	cmp	r6, #0
 800f49a:	f43f aea7 	beq.w	800f1ec <_dtoa_r+0x6c4>
 800f49e:	f1b8 0f00 	cmp.w	r8, #0
 800f4a2:	d005      	beq.n	800f4b0 <_dtoa_r+0x988>
 800f4a4:	45b0      	cmp	r8, r6
 800f4a6:	d003      	beq.n	800f4b0 <_dtoa_r+0x988>
 800f4a8:	4641      	mov	r1, r8
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	f000 fd0a 	bl	800fec4 <_Bfree>
 800f4b0:	4631      	mov	r1, r6
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	f000 fd06 	bl	800fec4 <_Bfree>
 800f4b8:	e698      	b.n	800f1ec <_dtoa_r+0x6c4>
 800f4ba:	2400      	movs	r4, #0
 800f4bc:	4626      	mov	r6, r4
 800f4be:	e7e1      	b.n	800f484 <_dtoa_r+0x95c>
 800f4c0:	46c2      	mov	sl, r8
 800f4c2:	4626      	mov	r6, r4
 800f4c4:	e596      	b.n	800eff4 <_dtoa_r+0x4cc>
 800f4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 80fd 	beq.w	800f6cc <_dtoa_r+0xba4>
 800f4d2:	2f00      	cmp	r7, #0
 800f4d4:	dd05      	ble.n	800f4e2 <_dtoa_r+0x9ba>
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	463a      	mov	r2, r7
 800f4da:	4628      	mov	r0, r5
 800f4dc:	f000 ff0a 	bl	80102f4 <__lshift>
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	f1b8 0f00 	cmp.w	r8, #0
 800f4e6:	d05c      	beq.n	800f5a2 <_dtoa_r+0xa7a>
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	6871      	ldr	r1, [r6, #4]
 800f4ec:	f000 fcaa 	bl	800fe44 <_Balloc>
 800f4f0:	4607      	mov	r7, r0
 800f4f2:	b928      	cbnz	r0, 800f500 <_dtoa_r+0x9d8>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f4fa:	4b7f      	ldr	r3, [pc, #508]	; (800f6f8 <_dtoa_r+0xbd0>)
 800f4fc:	f7ff bb28 	b.w	800eb50 <_dtoa_r+0x28>
 800f500:	6932      	ldr	r2, [r6, #16]
 800f502:	f106 010c 	add.w	r1, r6, #12
 800f506:	3202      	adds	r2, #2
 800f508:	0092      	lsls	r2, r2, #2
 800f50a:	300c      	adds	r0, #12
 800f50c:	f000 fc8c 	bl	800fe28 <memcpy>
 800f510:	2201      	movs	r2, #1
 800f512:	4639      	mov	r1, r7
 800f514:	4628      	mov	r0, r5
 800f516:	f000 feed 	bl	80102f4 <__lshift>
 800f51a:	46b0      	mov	r8, r6
 800f51c:	4606      	mov	r6, r0
 800f51e:	9b03      	ldr	r3, [sp, #12]
 800f520:	3301      	adds	r3, #1
 800f522:	9308      	str	r3, [sp, #32]
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	444b      	add	r3, r9
 800f528:	930a      	str	r3, [sp, #40]	; 0x28
 800f52a:	9b04      	ldr	r3, [sp, #16]
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	9309      	str	r3, [sp, #36]	; 0x24
 800f532:	9b08      	ldr	r3, [sp, #32]
 800f534:	4621      	mov	r1, r4
 800f536:	3b01      	subs	r3, #1
 800f538:	4658      	mov	r0, fp
 800f53a:	9304      	str	r3, [sp, #16]
 800f53c:	f7ff fa68 	bl	800ea10 <quorem>
 800f540:	4603      	mov	r3, r0
 800f542:	4641      	mov	r1, r8
 800f544:	3330      	adds	r3, #48	; 0x30
 800f546:	9006      	str	r0, [sp, #24]
 800f548:	4658      	mov	r0, fp
 800f54a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f54c:	f000 ff42 	bl	80103d4 <__mcmp>
 800f550:	4632      	mov	r2, r6
 800f552:	4681      	mov	r9, r0
 800f554:	4621      	mov	r1, r4
 800f556:	4628      	mov	r0, r5
 800f558:	f000 ff58 	bl	801040c <__mdiff>
 800f55c:	68c2      	ldr	r2, [r0, #12]
 800f55e:	4607      	mov	r7, r0
 800f560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f562:	bb02      	cbnz	r2, 800f5a6 <_dtoa_r+0xa7e>
 800f564:	4601      	mov	r1, r0
 800f566:	4658      	mov	r0, fp
 800f568:	f000 ff34 	bl	80103d4 <__mcmp>
 800f56c:	4602      	mov	r2, r0
 800f56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f570:	4639      	mov	r1, r7
 800f572:	4628      	mov	r0, r5
 800f574:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f578:	f000 fca4 	bl	800fec4 <_Bfree>
 800f57c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f57e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f580:	9f08      	ldr	r7, [sp, #32]
 800f582:	ea43 0102 	orr.w	r1, r3, r2
 800f586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f588:	430b      	orrs	r3, r1
 800f58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f58c:	d10d      	bne.n	800f5aa <_dtoa_r+0xa82>
 800f58e:	2b39      	cmp	r3, #57	; 0x39
 800f590:	d029      	beq.n	800f5e6 <_dtoa_r+0xabe>
 800f592:	f1b9 0f00 	cmp.w	r9, #0
 800f596:	dd01      	ble.n	800f59c <_dtoa_r+0xa74>
 800f598:	9b06      	ldr	r3, [sp, #24]
 800f59a:	3331      	adds	r3, #49	; 0x31
 800f59c:	9a04      	ldr	r2, [sp, #16]
 800f59e:	7013      	strb	r3, [r2, #0]
 800f5a0:	e776      	b.n	800f490 <_dtoa_r+0x968>
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	e7b9      	b.n	800f51a <_dtoa_r+0x9f2>
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	e7e2      	b.n	800f570 <_dtoa_r+0xa48>
 800f5aa:	f1b9 0f00 	cmp.w	r9, #0
 800f5ae:	db06      	blt.n	800f5be <_dtoa_r+0xa96>
 800f5b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f5b2:	ea41 0909 	orr.w	r9, r1, r9
 800f5b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5b8:	ea59 0101 	orrs.w	r1, r9, r1
 800f5bc:	d120      	bne.n	800f600 <_dtoa_r+0xad8>
 800f5be:	2a00      	cmp	r2, #0
 800f5c0:	ddec      	ble.n	800f59c <_dtoa_r+0xa74>
 800f5c2:	4659      	mov	r1, fp
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	9308      	str	r3, [sp, #32]
 800f5ca:	f000 fe93 	bl	80102f4 <__lshift>
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4683      	mov	fp, r0
 800f5d2:	f000 feff 	bl	80103d4 <__mcmp>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	9b08      	ldr	r3, [sp, #32]
 800f5da:	dc02      	bgt.n	800f5e2 <_dtoa_r+0xaba>
 800f5dc:	d1de      	bne.n	800f59c <_dtoa_r+0xa74>
 800f5de:	07da      	lsls	r2, r3, #31
 800f5e0:	d5dc      	bpl.n	800f59c <_dtoa_r+0xa74>
 800f5e2:	2b39      	cmp	r3, #57	; 0x39
 800f5e4:	d1d8      	bne.n	800f598 <_dtoa_r+0xa70>
 800f5e6:	2339      	movs	r3, #57	; 0x39
 800f5e8:	9a04      	ldr	r2, [sp, #16]
 800f5ea:	7013      	strb	r3, [r2, #0]
 800f5ec:	463b      	mov	r3, r7
 800f5ee:	461f      	mov	r7, r3
 800f5f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f5f4:	3b01      	subs	r3, #1
 800f5f6:	2a39      	cmp	r2, #57	; 0x39
 800f5f8:	d050      	beq.n	800f69c <_dtoa_r+0xb74>
 800f5fa:	3201      	adds	r2, #1
 800f5fc:	701a      	strb	r2, [r3, #0]
 800f5fe:	e747      	b.n	800f490 <_dtoa_r+0x968>
 800f600:	2a00      	cmp	r2, #0
 800f602:	dd03      	ble.n	800f60c <_dtoa_r+0xae4>
 800f604:	2b39      	cmp	r3, #57	; 0x39
 800f606:	d0ee      	beq.n	800f5e6 <_dtoa_r+0xabe>
 800f608:	3301      	adds	r3, #1
 800f60a:	e7c7      	b.n	800f59c <_dtoa_r+0xa74>
 800f60c:	9a08      	ldr	r2, [sp, #32]
 800f60e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f610:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f614:	428a      	cmp	r2, r1
 800f616:	d02a      	beq.n	800f66e <_dtoa_r+0xb46>
 800f618:	4659      	mov	r1, fp
 800f61a:	2300      	movs	r3, #0
 800f61c:	220a      	movs	r2, #10
 800f61e:	4628      	mov	r0, r5
 800f620:	f000 fc72 	bl	800ff08 <__multadd>
 800f624:	45b0      	cmp	r8, r6
 800f626:	4683      	mov	fp, r0
 800f628:	f04f 0300 	mov.w	r3, #0
 800f62c:	f04f 020a 	mov.w	r2, #10
 800f630:	4641      	mov	r1, r8
 800f632:	4628      	mov	r0, r5
 800f634:	d107      	bne.n	800f646 <_dtoa_r+0xb1e>
 800f636:	f000 fc67 	bl	800ff08 <__multadd>
 800f63a:	4680      	mov	r8, r0
 800f63c:	4606      	mov	r6, r0
 800f63e:	9b08      	ldr	r3, [sp, #32]
 800f640:	3301      	adds	r3, #1
 800f642:	9308      	str	r3, [sp, #32]
 800f644:	e775      	b.n	800f532 <_dtoa_r+0xa0a>
 800f646:	f000 fc5f 	bl	800ff08 <__multadd>
 800f64a:	4631      	mov	r1, r6
 800f64c:	4680      	mov	r8, r0
 800f64e:	2300      	movs	r3, #0
 800f650:	220a      	movs	r2, #10
 800f652:	4628      	mov	r0, r5
 800f654:	f000 fc58 	bl	800ff08 <__multadd>
 800f658:	4606      	mov	r6, r0
 800f65a:	e7f0      	b.n	800f63e <_dtoa_r+0xb16>
 800f65c:	f1b9 0f00 	cmp.w	r9, #0
 800f660:	bfcc      	ite	gt
 800f662:	464f      	movgt	r7, r9
 800f664:	2701      	movle	r7, #1
 800f666:	f04f 0800 	mov.w	r8, #0
 800f66a:	9a03      	ldr	r2, [sp, #12]
 800f66c:	4417      	add	r7, r2
 800f66e:	4659      	mov	r1, fp
 800f670:	2201      	movs	r2, #1
 800f672:	4628      	mov	r0, r5
 800f674:	9308      	str	r3, [sp, #32]
 800f676:	f000 fe3d 	bl	80102f4 <__lshift>
 800f67a:	4621      	mov	r1, r4
 800f67c:	4683      	mov	fp, r0
 800f67e:	f000 fea9 	bl	80103d4 <__mcmp>
 800f682:	2800      	cmp	r0, #0
 800f684:	dcb2      	bgt.n	800f5ec <_dtoa_r+0xac4>
 800f686:	d102      	bne.n	800f68e <_dtoa_r+0xb66>
 800f688:	9b08      	ldr	r3, [sp, #32]
 800f68a:	07db      	lsls	r3, r3, #31
 800f68c:	d4ae      	bmi.n	800f5ec <_dtoa_r+0xac4>
 800f68e:	463b      	mov	r3, r7
 800f690:	461f      	mov	r7, r3
 800f692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f696:	2a30      	cmp	r2, #48	; 0x30
 800f698:	d0fa      	beq.n	800f690 <_dtoa_r+0xb68>
 800f69a:	e6f9      	b.n	800f490 <_dtoa_r+0x968>
 800f69c:	9a03      	ldr	r2, [sp, #12]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d1a5      	bne.n	800f5ee <_dtoa_r+0xac6>
 800f6a2:	2331      	movs	r3, #49	; 0x31
 800f6a4:	f10a 0a01 	add.w	sl, sl, #1
 800f6a8:	e779      	b.n	800f59e <_dtoa_r+0xa76>
 800f6aa:	4b14      	ldr	r3, [pc, #80]	; (800f6fc <_dtoa_r+0xbd4>)
 800f6ac:	f7ff baa8 	b.w	800ec00 <_dtoa_r+0xd8>
 800f6b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f47f aa81 	bne.w	800ebba <_dtoa_r+0x92>
 800f6b8:	4b11      	ldr	r3, [pc, #68]	; (800f700 <_dtoa_r+0xbd8>)
 800f6ba:	f7ff baa1 	b.w	800ec00 <_dtoa_r+0xd8>
 800f6be:	f1b9 0f00 	cmp.w	r9, #0
 800f6c2:	dc03      	bgt.n	800f6cc <_dtoa_r+0xba4>
 800f6c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f6c6:	2b02      	cmp	r3, #2
 800f6c8:	f73f aecb 	bgt.w	800f462 <_dtoa_r+0x93a>
 800f6cc:	9f03      	ldr	r7, [sp, #12]
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	4658      	mov	r0, fp
 800f6d2:	f7ff f99d 	bl	800ea10 <quorem>
 800f6d6:	9a03      	ldr	r2, [sp, #12]
 800f6d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f6dc:	f807 3b01 	strb.w	r3, [r7], #1
 800f6e0:	1aba      	subs	r2, r7, r2
 800f6e2:	4591      	cmp	r9, r2
 800f6e4:	ddba      	ble.n	800f65c <_dtoa_r+0xb34>
 800f6e6:	4659      	mov	r1, fp
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	220a      	movs	r2, #10
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	f000 fc0b 	bl	800ff08 <__multadd>
 800f6f2:	4683      	mov	fp, r0
 800f6f4:	e7eb      	b.n	800f6ce <_dtoa_r+0xba6>
 800f6f6:	bf00      	nop
 800f6f8:	08011c77 	.word	0x08011c77
 800f6fc:	08011b80 	.word	0x08011b80
 800f700:	08011bf8 	.word	0x08011bf8

0800f704 <rshift>:
 800f704:	6903      	ldr	r3, [r0, #16]
 800f706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f70a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f70e:	f100 0414 	add.w	r4, r0, #20
 800f712:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f716:	dd46      	ble.n	800f7a6 <rshift+0xa2>
 800f718:	f011 011f 	ands.w	r1, r1, #31
 800f71c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f720:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f724:	d10c      	bne.n	800f740 <rshift+0x3c>
 800f726:	4629      	mov	r1, r5
 800f728:	f100 0710 	add.w	r7, r0, #16
 800f72c:	42b1      	cmp	r1, r6
 800f72e:	d335      	bcc.n	800f79c <rshift+0x98>
 800f730:	1a9b      	subs	r3, r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	1eea      	subs	r2, r5, #3
 800f736:	4296      	cmp	r6, r2
 800f738:	bf38      	it	cc
 800f73a:	2300      	movcc	r3, #0
 800f73c:	4423      	add	r3, r4
 800f73e:	e015      	b.n	800f76c <rshift+0x68>
 800f740:	46a1      	mov	r9, r4
 800f742:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f746:	f1c1 0820 	rsb	r8, r1, #32
 800f74a:	40cf      	lsrs	r7, r1
 800f74c:	f105 0e04 	add.w	lr, r5, #4
 800f750:	4576      	cmp	r6, lr
 800f752:	46f4      	mov	ip, lr
 800f754:	d816      	bhi.n	800f784 <rshift+0x80>
 800f756:	1a9a      	subs	r2, r3, r2
 800f758:	0092      	lsls	r2, r2, #2
 800f75a:	3a04      	subs	r2, #4
 800f75c:	3501      	adds	r5, #1
 800f75e:	42ae      	cmp	r6, r5
 800f760:	bf38      	it	cc
 800f762:	2200      	movcc	r2, #0
 800f764:	18a3      	adds	r3, r4, r2
 800f766:	50a7      	str	r7, [r4, r2]
 800f768:	b107      	cbz	r7, 800f76c <rshift+0x68>
 800f76a:	3304      	adds	r3, #4
 800f76c:	42a3      	cmp	r3, r4
 800f76e:	eba3 0204 	sub.w	r2, r3, r4
 800f772:	bf08      	it	eq
 800f774:	2300      	moveq	r3, #0
 800f776:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f77a:	6102      	str	r2, [r0, #16]
 800f77c:	bf08      	it	eq
 800f77e:	6143      	streq	r3, [r0, #20]
 800f780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f784:	f8dc c000 	ldr.w	ip, [ip]
 800f788:	fa0c fc08 	lsl.w	ip, ip, r8
 800f78c:	ea4c 0707 	orr.w	r7, ip, r7
 800f790:	f849 7b04 	str.w	r7, [r9], #4
 800f794:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f798:	40cf      	lsrs	r7, r1
 800f79a:	e7d9      	b.n	800f750 <rshift+0x4c>
 800f79c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f7a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800f7a4:	e7c2      	b.n	800f72c <rshift+0x28>
 800f7a6:	4623      	mov	r3, r4
 800f7a8:	e7e0      	b.n	800f76c <rshift+0x68>

0800f7aa <__hexdig_fun>:
 800f7aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f7ae:	2b09      	cmp	r3, #9
 800f7b0:	d802      	bhi.n	800f7b8 <__hexdig_fun+0xe>
 800f7b2:	3820      	subs	r0, #32
 800f7b4:	b2c0      	uxtb	r0, r0
 800f7b6:	4770      	bx	lr
 800f7b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f7bc:	2b05      	cmp	r3, #5
 800f7be:	d801      	bhi.n	800f7c4 <__hexdig_fun+0x1a>
 800f7c0:	3847      	subs	r0, #71	; 0x47
 800f7c2:	e7f7      	b.n	800f7b4 <__hexdig_fun+0xa>
 800f7c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f7c8:	2b05      	cmp	r3, #5
 800f7ca:	d801      	bhi.n	800f7d0 <__hexdig_fun+0x26>
 800f7cc:	3827      	subs	r0, #39	; 0x27
 800f7ce:	e7f1      	b.n	800f7b4 <__hexdig_fun+0xa>
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	4770      	bx	lr

0800f7d4 <__gethex>:
 800f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d8:	b08b      	sub	sp, #44	; 0x2c
 800f7da:	9305      	str	r3, [sp, #20]
 800f7dc:	4bb2      	ldr	r3, [pc, #712]	; (800faa8 <__gethex+0x2d4>)
 800f7de:	9002      	str	r0, [sp, #8]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	468b      	mov	fp, r1
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	4690      	mov	r8, r2
 800f7e8:	9303      	str	r3, [sp, #12]
 800f7ea:	f7f0 fcc9 	bl	8000180 <strlen>
 800f7ee:	4682      	mov	sl, r0
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	f8db 2000 	ldr.w	r2, [fp]
 800f7f6:	4403      	add	r3, r0
 800f7f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f7fc:	9306      	str	r3, [sp, #24]
 800f7fe:	1c93      	adds	r3, r2, #2
 800f800:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f804:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f808:	32fe      	adds	r2, #254	; 0xfe
 800f80a:	18d1      	adds	r1, r2, r3
 800f80c:	461f      	mov	r7, r3
 800f80e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f812:	9101      	str	r1, [sp, #4]
 800f814:	2830      	cmp	r0, #48	; 0x30
 800f816:	d0f8      	beq.n	800f80a <__gethex+0x36>
 800f818:	f7ff ffc7 	bl	800f7aa <__hexdig_fun>
 800f81c:	4604      	mov	r4, r0
 800f81e:	2800      	cmp	r0, #0
 800f820:	d13a      	bne.n	800f898 <__gethex+0xc4>
 800f822:	4652      	mov	r2, sl
 800f824:	4638      	mov	r0, r7
 800f826:	9903      	ldr	r1, [sp, #12]
 800f828:	f7fe fac6 	bl	800ddb8 <strncmp>
 800f82c:	4605      	mov	r5, r0
 800f82e:	2800      	cmp	r0, #0
 800f830:	d166      	bne.n	800f900 <__gethex+0x12c>
 800f832:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f836:	eb07 060a 	add.w	r6, r7, sl
 800f83a:	f7ff ffb6 	bl	800f7aa <__hexdig_fun>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d060      	beq.n	800f904 <__gethex+0x130>
 800f842:	4633      	mov	r3, r6
 800f844:	7818      	ldrb	r0, [r3, #0]
 800f846:	461f      	mov	r7, r3
 800f848:	2830      	cmp	r0, #48	; 0x30
 800f84a:	f103 0301 	add.w	r3, r3, #1
 800f84e:	d0f9      	beq.n	800f844 <__gethex+0x70>
 800f850:	f7ff ffab 	bl	800f7aa <__hexdig_fun>
 800f854:	2301      	movs	r3, #1
 800f856:	fab0 f480 	clz	r4, r0
 800f85a:	4635      	mov	r5, r6
 800f85c:	0964      	lsrs	r4, r4, #5
 800f85e:	9301      	str	r3, [sp, #4]
 800f860:	463a      	mov	r2, r7
 800f862:	4616      	mov	r6, r2
 800f864:	7830      	ldrb	r0, [r6, #0]
 800f866:	3201      	adds	r2, #1
 800f868:	f7ff ff9f 	bl	800f7aa <__hexdig_fun>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	d1f8      	bne.n	800f862 <__gethex+0x8e>
 800f870:	4652      	mov	r2, sl
 800f872:	4630      	mov	r0, r6
 800f874:	9903      	ldr	r1, [sp, #12]
 800f876:	f7fe fa9f 	bl	800ddb8 <strncmp>
 800f87a:	b980      	cbnz	r0, 800f89e <__gethex+0xca>
 800f87c:	b94d      	cbnz	r5, 800f892 <__gethex+0xbe>
 800f87e:	eb06 050a 	add.w	r5, r6, sl
 800f882:	462a      	mov	r2, r5
 800f884:	4616      	mov	r6, r2
 800f886:	7830      	ldrb	r0, [r6, #0]
 800f888:	3201      	adds	r2, #1
 800f88a:	f7ff ff8e 	bl	800f7aa <__hexdig_fun>
 800f88e:	2800      	cmp	r0, #0
 800f890:	d1f8      	bne.n	800f884 <__gethex+0xb0>
 800f892:	1bad      	subs	r5, r5, r6
 800f894:	00ad      	lsls	r5, r5, #2
 800f896:	e004      	b.n	800f8a2 <__gethex+0xce>
 800f898:	2400      	movs	r4, #0
 800f89a:	4625      	mov	r5, r4
 800f89c:	e7e0      	b.n	800f860 <__gethex+0x8c>
 800f89e:	2d00      	cmp	r5, #0
 800f8a0:	d1f7      	bne.n	800f892 <__gethex+0xbe>
 800f8a2:	7833      	ldrb	r3, [r6, #0]
 800f8a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f8a8:	2b50      	cmp	r3, #80	; 0x50
 800f8aa:	d139      	bne.n	800f920 <__gethex+0x14c>
 800f8ac:	7873      	ldrb	r3, [r6, #1]
 800f8ae:	2b2b      	cmp	r3, #43	; 0x2b
 800f8b0:	d02a      	beq.n	800f908 <__gethex+0x134>
 800f8b2:	2b2d      	cmp	r3, #45	; 0x2d
 800f8b4:	d02c      	beq.n	800f910 <__gethex+0x13c>
 800f8b6:	f04f 0900 	mov.w	r9, #0
 800f8ba:	1c71      	adds	r1, r6, #1
 800f8bc:	7808      	ldrb	r0, [r1, #0]
 800f8be:	f7ff ff74 	bl	800f7aa <__hexdig_fun>
 800f8c2:	1e43      	subs	r3, r0, #1
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	2b18      	cmp	r3, #24
 800f8c8:	d82a      	bhi.n	800f920 <__gethex+0x14c>
 800f8ca:	f1a0 0210 	sub.w	r2, r0, #16
 800f8ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f8d2:	f7ff ff6a 	bl	800f7aa <__hexdig_fun>
 800f8d6:	1e43      	subs	r3, r0, #1
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b18      	cmp	r3, #24
 800f8dc:	d91b      	bls.n	800f916 <__gethex+0x142>
 800f8de:	f1b9 0f00 	cmp.w	r9, #0
 800f8e2:	d000      	beq.n	800f8e6 <__gethex+0x112>
 800f8e4:	4252      	negs	r2, r2
 800f8e6:	4415      	add	r5, r2
 800f8e8:	f8cb 1000 	str.w	r1, [fp]
 800f8ec:	b1d4      	cbz	r4, 800f924 <__gethex+0x150>
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	bf14      	ite	ne
 800f8f4:	2700      	movne	r7, #0
 800f8f6:	2706      	moveq	r7, #6
 800f8f8:	4638      	mov	r0, r7
 800f8fa:	b00b      	add	sp, #44	; 0x2c
 800f8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f900:	463e      	mov	r6, r7
 800f902:	4625      	mov	r5, r4
 800f904:	2401      	movs	r4, #1
 800f906:	e7cc      	b.n	800f8a2 <__gethex+0xce>
 800f908:	f04f 0900 	mov.w	r9, #0
 800f90c:	1cb1      	adds	r1, r6, #2
 800f90e:	e7d5      	b.n	800f8bc <__gethex+0xe8>
 800f910:	f04f 0901 	mov.w	r9, #1
 800f914:	e7fa      	b.n	800f90c <__gethex+0x138>
 800f916:	230a      	movs	r3, #10
 800f918:	fb03 0202 	mla	r2, r3, r2, r0
 800f91c:	3a10      	subs	r2, #16
 800f91e:	e7d6      	b.n	800f8ce <__gethex+0xfa>
 800f920:	4631      	mov	r1, r6
 800f922:	e7e1      	b.n	800f8e8 <__gethex+0x114>
 800f924:	4621      	mov	r1, r4
 800f926:	1bf3      	subs	r3, r6, r7
 800f928:	3b01      	subs	r3, #1
 800f92a:	2b07      	cmp	r3, #7
 800f92c:	dc0a      	bgt.n	800f944 <__gethex+0x170>
 800f92e:	9802      	ldr	r0, [sp, #8]
 800f930:	f000 fa88 	bl	800fe44 <_Balloc>
 800f934:	4604      	mov	r4, r0
 800f936:	b940      	cbnz	r0, 800f94a <__gethex+0x176>
 800f938:	4602      	mov	r2, r0
 800f93a:	21de      	movs	r1, #222	; 0xde
 800f93c:	4b5b      	ldr	r3, [pc, #364]	; (800faac <__gethex+0x2d8>)
 800f93e:	485c      	ldr	r0, [pc, #368]	; (800fab0 <__gethex+0x2dc>)
 800f940:	f001 f9a8 	bl	8010c94 <__assert_func>
 800f944:	3101      	adds	r1, #1
 800f946:	105b      	asrs	r3, r3, #1
 800f948:	e7ef      	b.n	800f92a <__gethex+0x156>
 800f94a:	f04f 0b00 	mov.w	fp, #0
 800f94e:	f100 0914 	add.w	r9, r0, #20
 800f952:	f1ca 0301 	rsb	r3, sl, #1
 800f956:	f8cd 9010 	str.w	r9, [sp, #16]
 800f95a:	f8cd b004 	str.w	fp, [sp, #4]
 800f95e:	9308      	str	r3, [sp, #32]
 800f960:	42b7      	cmp	r7, r6
 800f962:	d33f      	bcc.n	800f9e4 <__gethex+0x210>
 800f964:	9f04      	ldr	r7, [sp, #16]
 800f966:	9b01      	ldr	r3, [sp, #4]
 800f968:	f847 3b04 	str.w	r3, [r7], #4
 800f96c:	eba7 0709 	sub.w	r7, r7, r9
 800f970:	10bf      	asrs	r7, r7, #2
 800f972:	6127      	str	r7, [r4, #16]
 800f974:	4618      	mov	r0, r3
 800f976:	f000 fb57 	bl	8010028 <__hi0bits>
 800f97a:	017f      	lsls	r7, r7, #5
 800f97c:	f8d8 6000 	ldr.w	r6, [r8]
 800f980:	1a3f      	subs	r7, r7, r0
 800f982:	42b7      	cmp	r7, r6
 800f984:	dd62      	ble.n	800fa4c <__gethex+0x278>
 800f986:	1bbf      	subs	r7, r7, r6
 800f988:	4639      	mov	r1, r7
 800f98a:	4620      	mov	r0, r4
 800f98c:	f000 fef1 	bl	8010772 <__any_on>
 800f990:	4682      	mov	sl, r0
 800f992:	b1a8      	cbz	r0, 800f9c0 <__gethex+0x1ec>
 800f994:	f04f 0a01 	mov.w	sl, #1
 800f998:	1e7b      	subs	r3, r7, #1
 800f99a:	1159      	asrs	r1, r3, #5
 800f99c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f9a0:	f003 021f 	and.w	r2, r3, #31
 800f9a4:	fa0a f202 	lsl.w	r2, sl, r2
 800f9a8:	420a      	tst	r2, r1
 800f9aa:	d009      	beq.n	800f9c0 <__gethex+0x1ec>
 800f9ac:	4553      	cmp	r3, sl
 800f9ae:	dd05      	ble.n	800f9bc <__gethex+0x1e8>
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	1eb9      	subs	r1, r7, #2
 800f9b4:	f000 fedd 	bl	8010772 <__any_on>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d144      	bne.n	800fa46 <__gethex+0x272>
 800f9bc:	f04f 0a02 	mov.w	sl, #2
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f7ff fe9e 	bl	800f704 <rshift>
 800f9c8:	443d      	add	r5, r7
 800f9ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9ce:	42ab      	cmp	r3, r5
 800f9d0:	da4a      	bge.n	800fa68 <__gethex+0x294>
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	9802      	ldr	r0, [sp, #8]
 800f9d6:	f000 fa75 	bl	800fec4 <_Bfree>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f9de:	27a3      	movs	r7, #163	; 0xa3
 800f9e0:	6013      	str	r3, [r2, #0]
 800f9e2:	e789      	b.n	800f8f8 <__gethex+0x124>
 800f9e4:	1e73      	subs	r3, r6, #1
 800f9e6:	9a06      	ldr	r2, [sp, #24]
 800f9e8:	9307      	str	r3, [sp, #28]
 800f9ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d019      	beq.n	800fa26 <__gethex+0x252>
 800f9f2:	f1bb 0f20 	cmp.w	fp, #32
 800f9f6:	d107      	bne.n	800fa08 <__gethex+0x234>
 800f9f8:	9b04      	ldr	r3, [sp, #16]
 800f9fa:	9a01      	ldr	r2, [sp, #4]
 800f9fc:	f843 2b04 	str.w	r2, [r3], #4
 800fa00:	9304      	str	r3, [sp, #16]
 800fa02:	2300      	movs	r3, #0
 800fa04:	469b      	mov	fp, r3
 800fa06:	9301      	str	r3, [sp, #4]
 800fa08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fa0c:	f7ff fecd 	bl	800f7aa <__hexdig_fun>
 800fa10:	9b01      	ldr	r3, [sp, #4]
 800fa12:	f000 000f 	and.w	r0, r0, #15
 800fa16:	fa00 f00b 	lsl.w	r0, r0, fp
 800fa1a:	4303      	orrs	r3, r0
 800fa1c:	9301      	str	r3, [sp, #4]
 800fa1e:	f10b 0b04 	add.w	fp, fp, #4
 800fa22:	9b07      	ldr	r3, [sp, #28]
 800fa24:	e00d      	b.n	800fa42 <__gethex+0x26e>
 800fa26:	9a08      	ldr	r2, [sp, #32]
 800fa28:	1e73      	subs	r3, r6, #1
 800fa2a:	4413      	add	r3, r2
 800fa2c:	42bb      	cmp	r3, r7
 800fa2e:	d3e0      	bcc.n	800f9f2 <__gethex+0x21e>
 800fa30:	4618      	mov	r0, r3
 800fa32:	4652      	mov	r2, sl
 800fa34:	9903      	ldr	r1, [sp, #12]
 800fa36:	9309      	str	r3, [sp, #36]	; 0x24
 800fa38:	f7fe f9be 	bl	800ddb8 <strncmp>
 800fa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d1d7      	bne.n	800f9f2 <__gethex+0x21e>
 800fa42:	461e      	mov	r6, r3
 800fa44:	e78c      	b.n	800f960 <__gethex+0x18c>
 800fa46:	f04f 0a03 	mov.w	sl, #3
 800fa4a:	e7b9      	b.n	800f9c0 <__gethex+0x1ec>
 800fa4c:	da09      	bge.n	800fa62 <__gethex+0x28e>
 800fa4e:	1bf7      	subs	r7, r6, r7
 800fa50:	4621      	mov	r1, r4
 800fa52:	463a      	mov	r2, r7
 800fa54:	9802      	ldr	r0, [sp, #8]
 800fa56:	f000 fc4d 	bl	80102f4 <__lshift>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	1bed      	subs	r5, r5, r7
 800fa5e:	f100 0914 	add.w	r9, r0, #20
 800fa62:	f04f 0a00 	mov.w	sl, #0
 800fa66:	e7b0      	b.n	800f9ca <__gethex+0x1f6>
 800fa68:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fa6c:	42a8      	cmp	r0, r5
 800fa6e:	dd72      	ble.n	800fb56 <__gethex+0x382>
 800fa70:	1b45      	subs	r5, r0, r5
 800fa72:	42ae      	cmp	r6, r5
 800fa74:	dc35      	bgt.n	800fae2 <__gethex+0x30e>
 800fa76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa7a:	2b02      	cmp	r3, #2
 800fa7c:	d029      	beq.n	800fad2 <__gethex+0x2fe>
 800fa7e:	2b03      	cmp	r3, #3
 800fa80:	d02b      	beq.n	800fada <__gethex+0x306>
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d11c      	bne.n	800fac0 <__gethex+0x2ec>
 800fa86:	42ae      	cmp	r6, r5
 800fa88:	d11a      	bne.n	800fac0 <__gethex+0x2ec>
 800fa8a:	2e01      	cmp	r6, #1
 800fa8c:	d112      	bne.n	800fab4 <__gethex+0x2e0>
 800fa8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa92:	9a05      	ldr	r2, [sp, #20]
 800fa94:	2762      	movs	r7, #98	; 0x62
 800fa96:	6013      	str	r3, [r2, #0]
 800fa98:	2301      	movs	r3, #1
 800fa9a:	6123      	str	r3, [r4, #16]
 800fa9c:	f8c9 3000 	str.w	r3, [r9]
 800faa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faa2:	601c      	str	r4, [r3, #0]
 800faa4:	e728      	b.n	800f8f8 <__gethex+0x124>
 800faa6:	bf00      	nop
 800faa8:	08011cf0 	.word	0x08011cf0
 800faac:	08011c77 	.word	0x08011c77
 800fab0:	08011c88 	.word	0x08011c88
 800fab4:	4620      	mov	r0, r4
 800fab6:	1e71      	subs	r1, r6, #1
 800fab8:	f000 fe5b 	bl	8010772 <__any_on>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d1e6      	bne.n	800fa8e <__gethex+0x2ba>
 800fac0:	4621      	mov	r1, r4
 800fac2:	9802      	ldr	r0, [sp, #8]
 800fac4:	f000 f9fe 	bl	800fec4 <_Bfree>
 800fac8:	2300      	movs	r3, #0
 800faca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800facc:	2750      	movs	r7, #80	; 0x50
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	e712      	b.n	800f8f8 <__gethex+0x124>
 800fad2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d1f3      	bne.n	800fac0 <__gethex+0x2ec>
 800fad8:	e7d9      	b.n	800fa8e <__gethex+0x2ba>
 800fada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1d6      	bne.n	800fa8e <__gethex+0x2ba>
 800fae0:	e7ee      	b.n	800fac0 <__gethex+0x2ec>
 800fae2:	1e6f      	subs	r7, r5, #1
 800fae4:	f1ba 0f00 	cmp.w	sl, #0
 800fae8:	d132      	bne.n	800fb50 <__gethex+0x37c>
 800faea:	b127      	cbz	r7, 800faf6 <__gethex+0x322>
 800faec:	4639      	mov	r1, r7
 800faee:	4620      	mov	r0, r4
 800faf0:	f000 fe3f 	bl	8010772 <__any_on>
 800faf4:	4682      	mov	sl, r0
 800faf6:	2101      	movs	r1, #1
 800faf8:	117b      	asrs	r3, r7, #5
 800fafa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fafe:	f007 071f 	and.w	r7, r7, #31
 800fb02:	fa01 f707 	lsl.w	r7, r1, r7
 800fb06:	421f      	tst	r7, r3
 800fb08:	f04f 0702 	mov.w	r7, #2
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	4620      	mov	r0, r4
 800fb10:	bf18      	it	ne
 800fb12:	f04a 0a02 	orrne.w	sl, sl, #2
 800fb16:	1b76      	subs	r6, r6, r5
 800fb18:	f7ff fdf4 	bl	800f704 <rshift>
 800fb1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fb20:	f1ba 0f00 	cmp.w	sl, #0
 800fb24:	d048      	beq.n	800fbb8 <__gethex+0x3e4>
 800fb26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d015      	beq.n	800fb5a <__gethex+0x386>
 800fb2e:	2b03      	cmp	r3, #3
 800fb30:	d017      	beq.n	800fb62 <__gethex+0x38e>
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d109      	bne.n	800fb4a <__gethex+0x376>
 800fb36:	f01a 0f02 	tst.w	sl, #2
 800fb3a:	d006      	beq.n	800fb4a <__gethex+0x376>
 800fb3c:	f8d9 0000 	ldr.w	r0, [r9]
 800fb40:	ea4a 0a00 	orr.w	sl, sl, r0
 800fb44:	f01a 0f01 	tst.w	sl, #1
 800fb48:	d10e      	bne.n	800fb68 <__gethex+0x394>
 800fb4a:	f047 0710 	orr.w	r7, r7, #16
 800fb4e:	e033      	b.n	800fbb8 <__gethex+0x3e4>
 800fb50:	f04f 0a01 	mov.w	sl, #1
 800fb54:	e7cf      	b.n	800faf6 <__gethex+0x322>
 800fb56:	2701      	movs	r7, #1
 800fb58:	e7e2      	b.n	800fb20 <__gethex+0x34c>
 800fb5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb5c:	f1c3 0301 	rsb	r3, r3, #1
 800fb60:	9315      	str	r3, [sp, #84]	; 0x54
 800fb62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0f0      	beq.n	800fb4a <__gethex+0x376>
 800fb68:	f04f 0c00 	mov.w	ip, #0
 800fb6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fb70:	f104 0314 	add.w	r3, r4, #20
 800fb74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fb78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fb86:	d01c      	beq.n	800fbc2 <__gethex+0x3ee>
 800fb88:	3201      	adds	r2, #1
 800fb8a:	6002      	str	r2, [r0, #0]
 800fb8c:	2f02      	cmp	r7, #2
 800fb8e:	f104 0314 	add.w	r3, r4, #20
 800fb92:	d13d      	bne.n	800fc10 <__gethex+0x43c>
 800fb94:	f8d8 2000 	ldr.w	r2, [r8]
 800fb98:	3a01      	subs	r2, #1
 800fb9a:	42b2      	cmp	r2, r6
 800fb9c:	d10a      	bne.n	800fbb4 <__gethex+0x3e0>
 800fb9e:	2201      	movs	r2, #1
 800fba0:	1171      	asrs	r1, r6, #5
 800fba2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fba6:	f006 061f 	and.w	r6, r6, #31
 800fbaa:	fa02 f606 	lsl.w	r6, r2, r6
 800fbae:	421e      	tst	r6, r3
 800fbb0:	bf18      	it	ne
 800fbb2:	4617      	movne	r7, r2
 800fbb4:	f047 0720 	orr.w	r7, r7, #32
 800fbb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbba:	601c      	str	r4, [r3, #0]
 800fbbc:	9b05      	ldr	r3, [sp, #20]
 800fbbe:	601d      	str	r5, [r3, #0]
 800fbc0:	e69a      	b.n	800f8f8 <__gethex+0x124>
 800fbc2:	4299      	cmp	r1, r3
 800fbc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fbc8:	d8d8      	bhi.n	800fb7c <__gethex+0x3a8>
 800fbca:	68a3      	ldr	r3, [r4, #8]
 800fbcc:	459b      	cmp	fp, r3
 800fbce:	db17      	blt.n	800fc00 <__gethex+0x42c>
 800fbd0:	6861      	ldr	r1, [r4, #4]
 800fbd2:	9802      	ldr	r0, [sp, #8]
 800fbd4:	3101      	adds	r1, #1
 800fbd6:	f000 f935 	bl	800fe44 <_Balloc>
 800fbda:	4681      	mov	r9, r0
 800fbdc:	b918      	cbnz	r0, 800fbe6 <__gethex+0x412>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	2184      	movs	r1, #132	; 0x84
 800fbe2:	4b19      	ldr	r3, [pc, #100]	; (800fc48 <__gethex+0x474>)
 800fbe4:	e6ab      	b.n	800f93e <__gethex+0x16a>
 800fbe6:	6922      	ldr	r2, [r4, #16]
 800fbe8:	f104 010c 	add.w	r1, r4, #12
 800fbec:	3202      	adds	r2, #2
 800fbee:	0092      	lsls	r2, r2, #2
 800fbf0:	300c      	adds	r0, #12
 800fbf2:	f000 f919 	bl	800fe28 <memcpy>
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	9802      	ldr	r0, [sp, #8]
 800fbfa:	f000 f963 	bl	800fec4 <_Bfree>
 800fbfe:	464c      	mov	r4, r9
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	1c5a      	adds	r2, r3, #1
 800fc04:	6122      	str	r2, [r4, #16]
 800fc06:	2201      	movs	r2, #1
 800fc08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc0c:	615a      	str	r2, [r3, #20]
 800fc0e:	e7bd      	b.n	800fb8c <__gethex+0x3b8>
 800fc10:	6922      	ldr	r2, [r4, #16]
 800fc12:	455a      	cmp	r2, fp
 800fc14:	dd0b      	ble.n	800fc2e <__gethex+0x45a>
 800fc16:	2101      	movs	r1, #1
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f7ff fd73 	bl	800f704 <rshift>
 800fc1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc22:	3501      	adds	r5, #1
 800fc24:	42ab      	cmp	r3, r5
 800fc26:	f6ff aed4 	blt.w	800f9d2 <__gethex+0x1fe>
 800fc2a:	2701      	movs	r7, #1
 800fc2c:	e7c2      	b.n	800fbb4 <__gethex+0x3e0>
 800fc2e:	f016 061f 	ands.w	r6, r6, #31
 800fc32:	d0fa      	beq.n	800fc2a <__gethex+0x456>
 800fc34:	4453      	add	r3, sl
 800fc36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fc3a:	f000 f9f5 	bl	8010028 <__hi0bits>
 800fc3e:	f1c6 0620 	rsb	r6, r6, #32
 800fc42:	42b0      	cmp	r0, r6
 800fc44:	dbe7      	blt.n	800fc16 <__gethex+0x442>
 800fc46:	e7f0      	b.n	800fc2a <__gethex+0x456>
 800fc48:	08011c77 	.word	0x08011c77

0800fc4c <L_shift>:
 800fc4c:	f1c2 0208 	rsb	r2, r2, #8
 800fc50:	0092      	lsls	r2, r2, #2
 800fc52:	b570      	push	{r4, r5, r6, lr}
 800fc54:	f1c2 0620 	rsb	r6, r2, #32
 800fc58:	6843      	ldr	r3, [r0, #4]
 800fc5a:	6804      	ldr	r4, [r0, #0]
 800fc5c:	fa03 f506 	lsl.w	r5, r3, r6
 800fc60:	432c      	orrs	r4, r5
 800fc62:	40d3      	lsrs	r3, r2
 800fc64:	6004      	str	r4, [r0, #0]
 800fc66:	f840 3f04 	str.w	r3, [r0, #4]!
 800fc6a:	4288      	cmp	r0, r1
 800fc6c:	d3f4      	bcc.n	800fc58 <L_shift+0xc>
 800fc6e:	bd70      	pop	{r4, r5, r6, pc}

0800fc70 <__match>:
 800fc70:	b530      	push	{r4, r5, lr}
 800fc72:	6803      	ldr	r3, [r0, #0]
 800fc74:	3301      	adds	r3, #1
 800fc76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc7a:	b914      	cbnz	r4, 800fc82 <__match+0x12>
 800fc7c:	6003      	str	r3, [r0, #0]
 800fc7e:	2001      	movs	r0, #1
 800fc80:	bd30      	pop	{r4, r5, pc}
 800fc82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fc8a:	2d19      	cmp	r5, #25
 800fc8c:	bf98      	it	ls
 800fc8e:	3220      	addls	r2, #32
 800fc90:	42a2      	cmp	r2, r4
 800fc92:	d0f0      	beq.n	800fc76 <__match+0x6>
 800fc94:	2000      	movs	r0, #0
 800fc96:	e7f3      	b.n	800fc80 <__match+0x10>

0800fc98 <__hexnan>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	2500      	movs	r5, #0
 800fc9e:	680b      	ldr	r3, [r1, #0]
 800fca0:	4682      	mov	sl, r0
 800fca2:	115e      	asrs	r6, r3, #5
 800fca4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fca8:	f013 031f 	ands.w	r3, r3, #31
 800fcac:	bf18      	it	ne
 800fcae:	3604      	addne	r6, #4
 800fcb0:	1f37      	subs	r7, r6, #4
 800fcb2:	46b9      	mov	r9, r7
 800fcb4:	463c      	mov	r4, r7
 800fcb6:	46ab      	mov	fp, r5
 800fcb8:	b087      	sub	sp, #28
 800fcba:	4690      	mov	r8, r2
 800fcbc:	6802      	ldr	r2, [r0, #0]
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	f846 5c04 	str.w	r5, [r6, #-4]
 800fcc4:	9502      	str	r5, [sp, #8]
 800fcc6:	7851      	ldrb	r1, [r2, #1]
 800fcc8:	1c53      	adds	r3, r2, #1
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	b341      	cbz	r1, 800fd20 <__hexnan+0x88>
 800fcce:	4608      	mov	r0, r1
 800fcd0:	9205      	str	r2, [sp, #20]
 800fcd2:	9104      	str	r1, [sp, #16]
 800fcd4:	f7ff fd69 	bl	800f7aa <__hexdig_fun>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d14f      	bne.n	800fd7c <__hexnan+0xe4>
 800fcdc:	9904      	ldr	r1, [sp, #16]
 800fcde:	9a05      	ldr	r2, [sp, #20]
 800fce0:	2920      	cmp	r1, #32
 800fce2:	d818      	bhi.n	800fd16 <__hexnan+0x7e>
 800fce4:	9b02      	ldr	r3, [sp, #8]
 800fce6:	459b      	cmp	fp, r3
 800fce8:	dd13      	ble.n	800fd12 <__hexnan+0x7a>
 800fcea:	454c      	cmp	r4, r9
 800fcec:	d206      	bcs.n	800fcfc <__hexnan+0x64>
 800fcee:	2d07      	cmp	r5, #7
 800fcf0:	dc04      	bgt.n	800fcfc <__hexnan+0x64>
 800fcf2:	462a      	mov	r2, r5
 800fcf4:	4649      	mov	r1, r9
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f7ff ffa8 	bl	800fc4c <L_shift>
 800fcfc:	4544      	cmp	r4, r8
 800fcfe:	d950      	bls.n	800fda2 <__hexnan+0x10a>
 800fd00:	2300      	movs	r3, #0
 800fd02:	f1a4 0904 	sub.w	r9, r4, #4
 800fd06:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd0a:	461d      	mov	r5, r3
 800fd0c:	464c      	mov	r4, r9
 800fd0e:	f8cd b008 	str.w	fp, [sp, #8]
 800fd12:	9a03      	ldr	r2, [sp, #12]
 800fd14:	e7d7      	b.n	800fcc6 <__hexnan+0x2e>
 800fd16:	2929      	cmp	r1, #41	; 0x29
 800fd18:	d156      	bne.n	800fdc8 <__hexnan+0x130>
 800fd1a:	3202      	adds	r2, #2
 800fd1c:	f8ca 2000 	str.w	r2, [sl]
 800fd20:	f1bb 0f00 	cmp.w	fp, #0
 800fd24:	d050      	beq.n	800fdc8 <__hexnan+0x130>
 800fd26:	454c      	cmp	r4, r9
 800fd28:	d206      	bcs.n	800fd38 <__hexnan+0xa0>
 800fd2a:	2d07      	cmp	r5, #7
 800fd2c:	dc04      	bgt.n	800fd38 <__hexnan+0xa0>
 800fd2e:	462a      	mov	r2, r5
 800fd30:	4649      	mov	r1, r9
 800fd32:	4620      	mov	r0, r4
 800fd34:	f7ff ff8a 	bl	800fc4c <L_shift>
 800fd38:	4544      	cmp	r4, r8
 800fd3a:	d934      	bls.n	800fda6 <__hexnan+0x10e>
 800fd3c:	4623      	mov	r3, r4
 800fd3e:	f1a8 0204 	sub.w	r2, r8, #4
 800fd42:	f853 1b04 	ldr.w	r1, [r3], #4
 800fd46:	429f      	cmp	r7, r3
 800fd48:	f842 1f04 	str.w	r1, [r2, #4]!
 800fd4c:	d2f9      	bcs.n	800fd42 <__hexnan+0xaa>
 800fd4e:	1b3b      	subs	r3, r7, r4
 800fd50:	f023 0303 	bic.w	r3, r3, #3
 800fd54:	3304      	adds	r3, #4
 800fd56:	3401      	adds	r4, #1
 800fd58:	3e03      	subs	r6, #3
 800fd5a:	42b4      	cmp	r4, r6
 800fd5c:	bf88      	it	hi
 800fd5e:	2304      	movhi	r3, #4
 800fd60:	2200      	movs	r2, #0
 800fd62:	4443      	add	r3, r8
 800fd64:	f843 2b04 	str.w	r2, [r3], #4
 800fd68:	429f      	cmp	r7, r3
 800fd6a:	d2fb      	bcs.n	800fd64 <__hexnan+0xcc>
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	b91b      	cbnz	r3, 800fd78 <__hexnan+0xe0>
 800fd70:	4547      	cmp	r7, r8
 800fd72:	d127      	bne.n	800fdc4 <__hexnan+0x12c>
 800fd74:	2301      	movs	r3, #1
 800fd76:	603b      	str	r3, [r7, #0]
 800fd78:	2005      	movs	r0, #5
 800fd7a:	e026      	b.n	800fdca <__hexnan+0x132>
 800fd7c:	3501      	adds	r5, #1
 800fd7e:	2d08      	cmp	r5, #8
 800fd80:	f10b 0b01 	add.w	fp, fp, #1
 800fd84:	dd06      	ble.n	800fd94 <__hexnan+0xfc>
 800fd86:	4544      	cmp	r4, r8
 800fd88:	d9c3      	bls.n	800fd12 <__hexnan+0x7a>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	2501      	movs	r5, #1
 800fd8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd92:	3c04      	subs	r4, #4
 800fd94:	6822      	ldr	r2, [r4, #0]
 800fd96:	f000 000f 	and.w	r0, r0, #15
 800fd9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fd9e:	6022      	str	r2, [r4, #0]
 800fda0:	e7b7      	b.n	800fd12 <__hexnan+0x7a>
 800fda2:	2508      	movs	r5, #8
 800fda4:	e7b5      	b.n	800fd12 <__hexnan+0x7a>
 800fda6:	9b01      	ldr	r3, [sp, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d0df      	beq.n	800fd6c <__hexnan+0xd4>
 800fdac:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb0:	f1c3 0320 	rsb	r3, r3, #32
 800fdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800fdb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fdbc:	401a      	ands	r2, r3
 800fdbe:	f846 2c04 	str.w	r2, [r6, #-4]
 800fdc2:	e7d3      	b.n	800fd6c <__hexnan+0xd4>
 800fdc4:	3f04      	subs	r7, #4
 800fdc6:	e7d1      	b.n	800fd6c <__hexnan+0xd4>
 800fdc8:	2004      	movs	r0, #4
 800fdca:	b007      	add	sp, #28
 800fdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdd0 <_localeconv_r>:
 800fdd0:	4800      	ldr	r0, [pc, #0]	; (800fdd4 <_localeconv_r+0x4>)
 800fdd2:	4770      	bx	lr
 800fdd4:	200002f0 	.word	0x200002f0

0800fdd8 <malloc>:
 800fdd8:	4b02      	ldr	r3, [pc, #8]	; (800fde4 <malloc+0xc>)
 800fdda:	4601      	mov	r1, r0
 800fddc:	6818      	ldr	r0, [r3, #0]
 800fdde:	f000 bd65 	b.w	80108ac <_malloc_r>
 800fde2:	bf00      	nop
 800fde4:	20000198 	.word	0x20000198

0800fde8 <__ascii_mbtowc>:
 800fde8:	b082      	sub	sp, #8
 800fdea:	b901      	cbnz	r1, 800fdee <__ascii_mbtowc+0x6>
 800fdec:	a901      	add	r1, sp, #4
 800fdee:	b142      	cbz	r2, 800fe02 <__ascii_mbtowc+0x1a>
 800fdf0:	b14b      	cbz	r3, 800fe06 <__ascii_mbtowc+0x1e>
 800fdf2:	7813      	ldrb	r3, [r2, #0]
 800fdf4:	600b      	str	r3, [r1, #0]
 800fdf6:	7812      	ldrb	r2, [r2, #0]
 800fdf8:	1e10      	subs	r0, r2, #0
 800fdfa:	bf18      	it	ne
 800fdfc:	2001      	movne	r0, #1
 800fdfe:	b002      	add	sp, #8
 800fe00:	4770      	bx	lr
 800fe02:	4610      	mov	r0, r2
 800fe04:	e7fb      	b.n	800fdfe <__ascii_mbtowc+0x16>
 800fe06:	f06f 0001 	mvn.w	r0, #1
 800fe0a:	e7f8      	b.n	800fdfe <__ascii_mbtowc+0x16>

0800fe0c <memchr>:
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	b510      	push	{r4, lr}
 800fe10:	b2c9      	uxtb	r1, r1
 800fe12:	4402      	add	r2, r0
 800fe14:	4293      	cmp	r3, r2
 800fe16:	4618      	mov	r0, r3
 800fe18:	d101      	bne.n	800fe1e <memchr+0x12>
 800fe1a:	2000      	movs	r0, #0
 800fe1c:	e003      	b.n	800fe26 <memchr+0x1a>
 800fe1e:	7804      	ldrb	r4, [r0, #0]
 800fe20:	3301      	adds	r3, #1
 800fe22:	428c      	cmp	r4, r1
 800fe24:	d1f6      	bne.n	800fe14 <memchr+0x8>
 800fe26:	bd10      	pop	{r4, pc}

0800fe28 <memcpy>:
 800fe28:	440a      	add	r2, r1
 800fe2a:	4291      	cmp	r1, r2
 800fe2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe30:	d100      	bne.n	800fe34 <memcpy+0xc>
 800fe32:	4770      	bx	lr
 800fe34:	b510      	push	{r4, lr}
 800fe36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe3a:	4291      	cmp	r1, r2
 800fe3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe40:	d1f9      	bne.n	800fe36 <memcpy+0xe>
 800fe42:	bd10      	pop	{r4, pc}

0800fe44 <_Balloc>:
 800fe44:	b570      	push	{r4, r5, r6, lr}
 800fe46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fe48:	4604      	mov	r4, r0
 800fe4a:	460d      	mov	r5, r1
 800fe4c:	b976      	cbnz	r6, 800fe6c <_Balloc+0x28>
 800fe4e:	2010      	movs	r0, #16
 800fe50:	f7ff ffc2 	bl	800fdd8 <malloc>
 800fe54:	4602      	mov	r2, r0
 800fe56:	6260      	str	r0, [r4, #36]	; 0x24
 800fe58:	b920      	cbnz	r0, 800fe64 <_Balloc+0x20>
 800fe5a:	2166      	movs	r1, #102	; 0x66
 800fe5c:	4b17      	ldr	r3, [pc, #92]	; (800febc <_Balloc+0x78>)
 800fe5e:	4818      	ldr	r0, [pc, #96]	; (800fec0 <_Balloc+0x7c>)
 800fe60:	f000 ff18 	bl	8010c94 <__assert_func>
 800fe64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe68:	6006      	str	r6, [r0, #0]
 800fe6a:	60c6      	str	r6, [r0, #12]
 800fe6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fe6e:	68f3      	ldr	r3, [r6, #12]
 800fe70:	b183      	cbz	r3, 800fe94 <_Balloc+0x50>
 800fe72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe7a:	b9b8      	cbnz	r0, 800feac <_Balloc+0x68>
 800fe7c:	2101      	movs	r1, #1
 800fe7e:	fa01 f605 	lsl.w	r6, r1, r5
 800fe82:	1d72      	adds	r2, r6, #5
 800fe84:	4620      	mov	r0, r4
 800fe86:	0092      	lsls	r2, r2, #2
 800fe88:	f000 fc94 	bl	80107b4 <_calloc_r>
 800fe8c:	b160      	cbz	r0, 800fea8 <_Balloc+0x64>
 800fe8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe92:	e00e      	b.n	800feb2 <_Balloc+0x6e>
 800fe94:	2221      	movs	r2, #33	; 0x21
 800fe96:	2104      	movs	r1, #4
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fc8b 	bl	80107b4 <_calloc_r>
 800fe9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fea0:	60f0      	str	r0, [r6, #12]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1e4      	bne.n	800fe72 <_Balloc+0x2e>
 800fea8:	2000      	movs	r0, #0
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	6802      	ldr	r2, [r0, #0]
 800feae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feb2:	2300      	movs	r3, #0
 800feb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800feb8:	e7f7      	b.n	800feaa <_Balloc+0x66>
 800feba:	bf00      	nop
 800febc:	08011c05 	.word	0x08011c05
 800fec0:	08011d04 	.word	0x08011d04

0800fec4 <_Bfree>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fec8:	4605      	mov	r5, r0
 800feca:	460c      	mov	r4, r1
 800fecc:	b976      	cbnz	r6, 800feec <_Bfree+0x28>
 800fece:	2010      	movs	r0, #16
 800fed0:	f7ff ff82 	bl	800fdd8 <malloc>
 800fed4:	4602      	mov	r2, r0
 800fed6:	6268      	str	r0, [r5, #36]	; 0x24
 800fed8:	b920      	cbnz	r0, 800fee4 <_Bfree+0x20>
 800feda:	218a      	movs	r1, #138	; 0x8a
 800fedc:	4b08      	ldr	r3, [pc, #32]	; (800ff00 <_Bfree+0x3c>)
 800fede:	4809      	ldr	r0, [pc, #36]	; (800ff04 <_Bfree+0x40>)
 800fee0:	f000 fed8 	bl	8010c94 <__assert_func>
 800fee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fee8:	6006      	str	r6, [r0, #0]
 800feea:	60c6      	str	r6, [r0, #12]
 800feec:	b13c      	cbz	r4, 800fefe <_Bfree+0x3a>
 800feee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fef0:	6862      	ldr	r2, [r4, #4]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fef8:	6021      	str	r1, [r4, #0]
 800fefa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fefe:	bd70      	pop	{r4, r5, r6, pc}
 800ff00:	08011c05 	.word	0x08011c05
 800ff04:	08011d04 	.word	0x08011d04

0800ff08 <__multadd>:
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	4607      	mov	r7, r0
 800ff0e:	460c      	mov	r4, r1
 800ff10:	461e      	mov	r6, r3
 800ff12:	2000      	movs	r0, #0
 800ff14:	690d      	ldr	r5, [r1, #16]
 800ff16:	f101 0c14 	add.w	ip, r1, #20
 800ff1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ff1e:	3001      	adds	r0, #1
 800ff20:	b299      	uxth	r1, r3
 800ff22:	fb02 6101 	mla	r1, r2, r1, r6
 800ff26:	0c1e      	lsrs	r6, r3, #16
 800ff28:	0c0b      	lsrs	r3, r1, #16
 800ff2a:	fb02 3306 	mla	r3, r2, r6, r3
 800ff2e:	b289      	uxth	r1, r1
 800ff30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff34:	4285      	cmp	r5, r0
 800ff36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff3a:	f84c 1b04 	str.w	r1, [ip], #4
 800ff3e:	dcec      	bgt.n	800ff1a <__multadd+0x12>
 800ff40:	b30e      	cbz	r6, 800ff86 <__multadd+0x7e>
 800ff42:	68a3      	ldr	r3, [r4, #8]
 800ff44:	42ab      	cmp	r3, r5
 800ff46:	dc19      	bgt.n	800ff7c <__multadd+0x74>
 800ff48:	6861      	ldr	r1, [r4, #4]
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	3101      	adds	r1, #1
 800ff4e:	f7ff ff79 	bl	800fe44 <_Balloc>
 800ff52:	4680      	mov	r8, r0
 800ff54:	b928      	cbnz	r0, 800ff62 <__multadd+0x5a>
 800ff56:	4602      	mov	r2, r0
 800ff58:	21b5      	movs	r1, #181	; 0xb5
 800ff5a:	4b0c      	ldr	r3, [pc, #48]	; (800ff8c <__multadd+0x84>)
 800ff5c:	480c      	ldr	r0, [pc, #48]	; (800ff90 <__multadd+0x88>)
 800ff5e:	f000 fe99 	bl	8010c94 <__assert_func>
 800ff62:	6922      	ldr	r2, [r4, #16]
 800ff64:	f104 010c 	add.w	r1, r4, #12
 800ff68:	3202      	adds	r2, #2
 800ff6a:	0092      	lsls	r2, r2, #2
 800ff6c:	300c      	adds	r0, #12
 800ff6e:	f7ff ff5b 	bl	800fe28 <memcpy>
 800ff72:	4621      	mov	r1, r4
 800ff74:	4638      	mov	r0, r7
 800ff76:	f7ff ffa5 	bl	800fec4 <_Bfree>
 800ff7a:	4644      	mov	r4, r8
 800ff7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff80:	3501      	adds	r5, #1
 800ff82:	615e      	str	r6, [r3, #20]
 800ff84:	6125      	str	r5, [r4, #16]
 800ff86:	4620      	mov	r0, r4
 800ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8c:	08011c77 	.word	0x08011c77
 800ff90:	08011d04 	.word	0x08011d04

0800ff94 <__s2b>:
 800ff94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff98:	4615      	mov	r5, r2
 800ff9a:	2209      	movs	r2, #9
 800ff9c:	461f      	mov	r7, r3
 800ff9e:	3308      	adds	r3, #8
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ffa6:	4606      	mov	r6, r0
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	2100      	movs	r1, #0
 800ffac:	429a      	cmp	r2, r3
 800ffae:	db09      	blt.n	800ffc4 <__s2b+0x30>
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	f7ff ff47 	bl	800fe44 <_Balloc>
 800ffb6:	b940      	cbnz	r0, 800ffca <__s2b+0x36>
 800ffb8:	4602      	mov	r2, r0
 800ffba:	21ce      	movs	r1, #206	; 0xce
 800ffbc:	4b18      	ldr	r3, [pc, #96]	; (8010020 <__s2b+0x8c>)
 800ffbe:	4819      	ldr	r0, [pc, #100]	; (8010024 <__s2b+0x90>)
 800ffc0:	f000 fe68 	bl	8010c94 <__assert_func>
 800ffc4:	0052      	lsls	r2, r2, #1
 800ffc6:	3101      	adds	r1, #1
 800ffc8:	e7f0      	b.n	800ffac <__s2b+0x18>
 800ffca:	9b08      	ldr	r3, [sp, #32]
 800ffcc:	2d09      	cmp	r5, #9
 800ffce:	6143      	str	r3, [r0, #20]
 800ffd0:	f04f 0301 	mov.w	r3, #1
 800ffd4:	6103      	str	r3, [r0, #16]
 800ffd6:	dd16      	ble.n	8010006 <__s2b+0x72>
 800ffd8:	f104 0909 	add.w	r9, r4, #9
 800ffdc:	46c8      	mov	r8, r9
 800ffde:	442c      	add	r4, r5
 800ffe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ffe4:	4601      	mov	r1, r0
 800ffe6:	220a      	movs	r2, #10
 800ffe8:	4630      	mov	r0, r6
 800ffea:	3b30      	subs	r3, #48	; 0x30
 800ffec:	f7ff ff8c 	bl	800ff08 <__multadd>
 800fff0:	45a0      	cmp	r8, r4
 800fff2:	d1f5      	bne.n	800ffe0 <__s2b+0x4c>
 800fff4:	f1a5 0408 	sub.w	r4, r5, #8
 800fff8:	444c      	add	r4, r9
 800fffa:	1b2d      	subs	r5, r5, r4
 800fffc:	1963      	adds	r3, r4, r5
 800fffe:	42bb      	cmp	r3, r7
 8010000:	db04      	blt.n	801000c <__s2b+0x78>
 8010002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010006:	2509      	movs	r5, #9
 8010008:	340a      	adds	r4, #10
 801000a:	e7f6      	b.n	800fffa <__s2b+0x66>
 801000c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010010:	4601      	mov	r1, r0
 8010012:	220a      	movs	r2, #10
 8010014:	4630      	mov	r0, r6
 8010016:	3b30      	subs	r3, #48	; 0x30
 8010018:	f7ff ff76 	bl	800ff08 <__multadd>
 801001c:	e7ee      	b.n	800fffc <__s2b+0x68>
 801001e:	bf00      	nop
 8010020:	08011c77 	.word	0x08011c77
 8010024:	08011d04 	.word	0x08011d04

08010028 <__hi0bits>:
 8010028:	0c02      	lsrs	r2, r0, #16
 801002a:	0412      	lsls	r2, r2, #16
 801002c:	4603      	mov	r3, r0
 801002e:	b9ca      	cbnz	r2, 8010064 <__hi0bits+0x3c>
 8010030:	0403      	lsls	r3, r0, #16
 8010032:	2010      	movs	r0, #16
 8010034:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010038:	bf04      	itt	eq
 801003a:	021b      	lsleq	r3, r3, #8
 801003c:	3008      	addeq	r0, #8
 801003e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010042:	bf04      	itt	eq
 8010044:	011b      	lsleq	r3, r3, #4
 8010046:	3004      	addeq	r0, #4
 8010048:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801004c:	bf04      	itt	eq
 801004e:	009b      	lsleq	r3, r3, #2
 8010050:	3002      	addeq	r0, #2
 8010052:	2b00      	cmp	r3, #0
 8010054:	db05      	blt.n	8010062 <__hi0bits+0x3a>
 8010056:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801005a:	f100 0001 	add.w	r0, r0, #1
 801005e:	bf08      	it	eq
 8010060:	2020      	moveq	r0, #32
 8010062:	4770      	bx	lr
 8010064:	2000      	movs	r0, #0
 8010066:	e7e5      	b.n	8010034 <__hi0bits+0xc>

08010068 <__lo0bits>:
 8010068:	6803      	ldr	r3, [r0, #0]
 801006a:	4602      	mov	r2, r0
 801006c:	f013 0007 	ands.w	r0, r3, #7
 8010070:	d00b      	beq.n	801008a <__lo0bits+0x22>
 8010072:	07d9      	lsls	r1, r3, #31
 8010074:	d421      	bmi.n	80100ba <__lo0bits+0x52>
 8010076:	0798      	lsls	r0, r3, #30
 8010078:	bf49      	itett	mi
 801007a:	085b      	lsrmi	r3, r3, #1
 801007c:	089b      	lsrpl	r3, r3, #2
 801007e:	2001      	movmi	r0, #1
 8010080:	6013      	strmi	r3, [r2, #0]
 8010082:	bf5c      	itt	pl
 8010084:	2002      	movpl	r0, #2
 8010086:	6013      	strpl	r3, [r2, #0]
 8010088:	4770      	bx	lr
 801008a:	b299      	uxth	r1, r3
 801008c:	b909      	cbnz	r1, 8010092 <__lo0bits+0x2a>
 801008e:	2010      	movs	r0, #16
 8010090:	0c1b      	lsrs	r3, r3, #16
 8010092:	b2d9      	uxtb	r1, r3
 8010094:	b909      	cbnz	r1, 801009a <__lo0bits+0x32>
 8010096:	3008      	adds	r0, #8
 8010098:	0a1b      	lsrs	r3, r3, #8
 801009a:	0719      	lsls	r1, r3, #28
 801009c:	bf04      	itt	eq
 801009e:	091b      	lsreq	r3, r3, #4
 80100a0:	3004      	addeq	r0, #4
 80100a2:	0799      	lsls	r1, r3, #30
 80100a4:	bf04      	itt	eq
 80100a6:	089b      	lsreq	r3, r3, #2
 80100a8:	3002      	addeq	r0, #2
 80100aa:	07d9      	lsls	r1, r3, #31
 80100ac:	d403      	bmi.n	80100b6 <__lo0bits+0x4e>
 80100ae:	085b      	lsrs	r3, r3, #1
 80100b0:	f100 0001 	add.w	r0, r0, #1
 80100b4:	d003      	beq.n	80100be <__lo0bits+0x56>
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	4770      	bx	lr
 80100ba:	2000      	movs	r0, #0
 80100bc:	4770      	bx	lr
 80100be:	2020      	movs	r0, #32
 80100c0:	4770      	bx	lr
	...

080100c4 <__i2b>:
 80100c4:	b510      	push	{r4, lr}
 80100c6:	460c      	mov	r4, r1
 80100c8:	2101      	movs	r1, #1
 80100ca:	f7ff febb 	bl	800fe44 <_Balloc>
 80100ce:	4602      	mov	r2, r0
 80100d0:	b928      	cbnz	r0, 80100de <__i2b+0x1a>
 80100d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80100d6:	4b04      	ldr	r3, [pc, #16]	; (80100e8 <__i2b+0x24>)
 80100d8:	4804      	ldr	r0, [pc, #16]	; (80100ec <__i2b+0x28>)
 80100da:	f000 fddb 	bl	8010c94 <__assert_func>
 80100de:	2301      	movs	r3, #1
 80100e0:	6144      	str	r4, [r0, #20]
 80100e2:	6103      	str	r3, [r0, #16]
 80100e4:	bd10      	pop	{r4, pc}
 80100e6:	bf00      	nop
 80100e8:	08011c77 	.word	0x08011c77
 80100ec:	08011d04 	.word	0x08011d04

080100f0 <__multiply>:
 80100f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f4:	4691      	mov	r9, r2
 80100f6:	690a      	ldr	r2, [r1, #16]
 80100f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100fc:	460c      	mov	r4, r1
 80100fe:	429a      	cmp	r2, r3
 8010100:	bfbe      	ittt	lt
 8010102:	460b      	movlt	r3, r1
 8010104:	464c      	movlt	r4, r9
 8010106:	4699      	movlt	r9, r3
 8010108:	6927      	ldr	r7, [r4, #16]
 801010a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801010e:	68a3      	ldr	r3, [r4, #8]
 8010110:	6861      	ldr	r1, [r4, #4]
 8010112:	eb07 060a 	add.w	r6, r7, sl
 8010116:	42b3      	cmp	r3, r6
 8010118:	b085      	sub	sp, #20
 801011a:	bfb8      	it	lt
 801011c:	3101      	addlt	r1, #1
 801011e:	f7ff fe91 	bl	800fe44 <_Balloc>
 8010122:	b930      	cbnz	r0, 8010132 <__multiply+0x42>
 8010124:	4602      	mov	r2, r0
 8010126:	f240 115d 	movw	r1, #349	; 0x15d
 801012a:	4b43      	ldr	r3, [pc, #268]	; (8010238 <__multiply+0x148>)
 801012c:	4843      	ldr	r0, [pc, #268]	; (801023c <__multiply+0x14c>)
 801012e:	f000 fdb1 	bl	8010c94 <__assert_func>
 8010132:	f100 0514 	add.w	r5, r0, #20
 8010136:	462b      	mov	r3, r5
 8010138:	2200      	movs	r2, #0
 801013a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801013e:	4543      	cmp	r3, r8
 8010140:	d321      	bcc.n	8010186 <__multiply+0x96>
 8010142:	f104 0314 	add.w	r3, r4, #20
 8010146:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801014a:	f109 0314 	add.w	r3, r9, #20
 801014e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010152:	9202      	str	r2, [sp, #8]
 8010154:	1b3a      	subs	r2, r7, r4
 8010156:	3a15      	subs	r2, #21
 8010158:	f022 0203 	bic.w	r2, r2, #3
 801015c:	3204      	adds	r2, #4
 801015e:	f104 0115 	add.w	r1, r4, #21
 8010162:	428f      	cmp	r7, r1
 8010164:	bf38      	it	cc
 8010166:	2204      	movcc	r2, #4
 8010168:	9201      	str	r2, [sp, #4]
 801016a:	9a02      	ldr	r2, [sp, #8]
 801016c:	9303      	str	r3, [sp, #12]
 801016e:	429a      	cmp	r2, r3
 8010170:	d80c      	bhi.n	801018c <__multiply+0x9c>
 8010172:	2e00      	cmp	r6, #0
 8010174:	dd03      	ble.n	801017e <__multiply+0x8e>
 8010176:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801017a:	2b00      	cmp	r3, #0
 801017c:	d059      	beq.n	8010232 <__multiply+0x142>
 801017e:	6106      	str	r6, [r0, #16]
 8010180:	b005      	add	sp, #20
 8010182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010186:	f843 2b04 	str.w	r2, [r3], #4
 801018a:	e7d8      	b.n	801013e <__multiply+0x4e>
 801018c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010190:	f1ba 0f00 	cmp.w	sl, #0
 8010194:	d023      	beq.n	80101de <__multiply+0xee>
 8010196:	46a9      	mov	r9, r5
 8010198:	f04f 0c00 	mov.w	ip, #0
 801019c:	f104 0e14 	add.w	lr, r4, #20
 80101a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80101a4:	f8d9 1000 	ldr.w	r1, [r9]
 80101a8:	fa1f fb82 	uxth.w	fp, r2
 80101ac:	b289      	uxth	r1, r1
 80101ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80101b2:	4461      	add	r1, ip
 80101b4:	f8d9 c000 	ldr.w	ip, [r9]
 80101b8:	0c12      	lsrs	r2, r2, #16
 80101ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80101be:	fb0a c202 	mla	r2, sl, r2, ip
 80101c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80101c6:	b289      	uxth	r1, r1
 80101c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80101cc:	4577      	cmp	r7, lr
 80101ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101d2:	f849 1b04 	str.w	r1, [r9], #4
 80101d6:	d8e3      	bhi.n	80101a0 <__multiply+0xb0>
 80101d8:	9a01      	ldr	r2, [sp, #4]
 80101da:	f845 c002 	str.w	ip, [r5, r2]
 80101de:	9a03      	ldr	r2, [sp, #12]
 80101e0:	3304      	adds	r3, #4
 80101e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80101e6:	f1b9 0f00 	cmp.w	r9, #0
 80101ea:	d020      	beq.n	801022e <__multiply+0x13e>
 80101ec:	46ae      	mov	lr, r5
 80101ee:	f04f 0a00 	mov.w	sl, #0
 80101f2:	6829      	ldr	r1, [r5, #0]
 80101f4:	f104 0c14 	add.w	ip, r4, #20
 80101f8:	f8bc b000 	ldrh.w	fp, [ip]
 80101fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010200:	b289      	uxth	r1, r1
 8010202:	fb09 220b 	mla	r2, r9, fp, r2
 8010206:	4492      	add	sl, r2
 8010208:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801020c:	f84e 1b04 	str.w	r1, [lr], #4
 8010210:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010214:	f8be 1000 	ldrh.w	r1, [lr]
 8010218:	0c12      	lsrs	r2, r2, #16
 801021a:	fb09 1102 	mla	r1, r9, r2, r1
 801021e:	4567      	cmp	r7, ip
 8010220:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010224:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010228:	d8e6      	bhi.n	80101f8 <__multiply+0x108>
 801022a:	9a01      	ldr	r2, [sp, #4]
 801022c:	50a9      	str	r1, [r5, r2]
 801022e:	3504      	adds	r5, #4
 8010230:	e79b      	b.n	801016a <__multiply+0x7a>
 8010232:	3e01      	subs	r6, #1
 8010234:	e79d      	b.n	8010172 <__multiply+0x82>
 8010236:	bf00      	nop
 8010238:	08011c77 	.word	0x08011c77
 801023c:	08011d04 	.word	0x08011d04

08010240 <__pow5mult>:
 8010240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010244:	4615      	mov	r5, r2
 8010246:	f012 0203 	ands.w	r2, r2, #3
 801024a:	4606      	mov	r6, r0
 801024c:	460f      	mov	r7, r1
 801024e:	d007      	beq.n	8010260 <__pow5mult+0x20>
 8010250:	4c25      	ldr	r4, [pc, #148]	; (80102e8 <__pow5mult+0xa8>)
 8010252:	3a01      	subs	r2, #1
 8010254:	2300      	movs	r3, #0
 8010256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801025a:	f7ff fe55 	bl	800ff08 <__multadd>
 801025e:	4607      	mov	r7, r0
 8010260:	10ad      	asrs	r5, r5, #2
 8010262:	d03d      	beq.n	80102e0 <__pow5mult+0xa0>
 8010264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010266:	b97c      	cbnz	r4, 8010288 <__pow5mult+0x48>
 8010268:	2010      	movs	r0, #16
 801026a:	f7ff fdb5 	bl	800fdd8 <malloc>
 801026e:	4602      	mov	r2, r0
 8010270:	6270      	str	r0, [r6, #36]	; 0x24
 8010272:	b928      	cbnz	r0, 8010280 <__pow5mult+0x40>
 8010274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010278:	4b1c      	ldr	r3, [pc, #112]	; (80102ec <__pow5mult+0xac>)
 801027a:	481d      	ldr	r0, [pc, #116]	; (80102f0 <__pow5mult+0xb0>)
 801027c:	f000 fd0a 	bl	8010c94 <__assert_func>
 8010280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010284:	6004      	str	r4, [r0, #0]
 8010286:	60c4      	str	r4, [r0, #12]
 8010288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801028c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010290:	b94c      	cbnz	r4, 80102a6 <__pow5mult+0x66>
 8010292:	f240 2171 	movw	r1, #625	; 0x271
 8010296:	4630      	mov	r0, r6
 8010298:	f7ff ff14 	bl	80100c4 <__i2b>
 801029c:	2300      	movs	r3, #0
 801029e:	4604      	mov	r4, r0
 80102a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80102a4:	6003      	str	r3, [r0, #0]
 80102a6:	f04f 0900 	mov.w	r9, #0
 80102aa:	07eb      	lsls	r3, r5, #31
 80102ac:	d50a      	bpl.n	80102c4 <__pow5mult+0x84>
 80102ae:	4639      	mov	r1, r7
 80102b0:	4622      	mov	r2, r4
 80102b2:	4630      	mov	r0, r6
 80102b4:	f7ff ff1c 	bl	80100f0 <__multiply>
 80102b8:	4680      	mov	r8, r0
 80102ba:	4639      	mov	r1, r7
 80102bc:	4630      	mov	r0, r6
 80102be:	f7ff fe01 	bl	800fec4 <_Bfree>
 80102c2:	4647      	mov	r7, r8
 80102c4:	106d      	asrs	r5, r5, #1
 80102c6:	d00b      	beq.n	80102e0 <__pow5mult+0xa0>
 80102c8:	6820      	ldr	r0, [r4, #0]
 80102ca:	b938      	cbnz	r0, 80102dc <__pow5mult+0x9c>
 80102cc:	4622      	mov	r2, r4
 80102ce:	4621      	mov	r1, r4
 80102d0:	4630      	mov	r0, r6
 80102d2:	f7ff ff0d 	bl	80100f0 <__multiply>
 80102d6:	6020      	str	r0, [r4, #0]
 80102d8:	f8c0 9000 	str.w	r9, [r0]
 80102dc:	4604      	mov	r4, r0
 80102de:	e7e4      	b.n	80102aa <__pow5mult+0x6a>
 80102e0:	4638      	mov	r0, r7
 80102e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102e6:	bf00      	nop
 80102e8:	08011e50 	.word	0x08011e50
 80102ec:	08011c05 	.word	0x08011c05
 80102f0:	08011d04 	.word	0x08011d04

080102f4 <__lshift>:
 80102f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f8:	460c      	mov	r4, r1
 80102fa:	4607      	mov	r7, r0
 80102fc:	4691      	mov	r9, r2
 80102fe:	6923      	ldr	r3, [r4, #16]
 8010300:	6849      	ldr	r1, [r1, #4]
 8010302:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010306:	68a3      	ldr	r3, [r4, #8]
 8010308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801030c:	f108 0601 	add.w	r6, r8, #1
 8010310:	42b3      	cmp	r3, r6
 8010312:	db0b      	blt.n	801032c <__lshift+0x38>
 8010314:	4638      	mov	r0, r7
 8010316:	f7ff fd95 	bl	800fe44 <_Balloc>
 801031a:	4605      	mov	r5, r0
 801031c:	b948      	cbnz	r0, 8010332 <__lshift+0x3e>
 801031e:	4602      	mov	r2, r0
 8010320:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010324:	4b29      	ldr	r3, [pc, #164]	; (80103cc <__lshift+0xd8>)
 8010326:	482a      	ldr	r0, [pc, #168]	; (80103d0 <__lshift+0xdc>)
 8010328:	f000 fcb4 	bl	8010c94 <__assert_func>
 801032c:	3101      	adds	r1, #1
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	e7ee      	b.n	8010310 <__lshift+0x1c>
 8010332:	2300      	movs	r3, #0
 8010334:	f100 0114 	add.w	r1, r0, #20
 8010338:	f100 0210 	add.w	r2, r0, #16
 801033c:	4618      	mov	r0, r3
 801033e:	4553      	cmp	r3, sl
 8010340:	db37      	blt.n	80103b2 <__lshift+0xbe>
 8010342:	6920      	ldr	r0, [r4, #16]
 8010344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010348:	f104 0314 	add.w	r3, r4, #20
 801034c:	f019 091f 	ands.w	r9, r9, #31
 8010350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010358:	d02f      	beq.n	80103ba <__lshift+0xc6>
 801035a:	468a      	mov	sl, r1
 801035c:	f04f 0c00 	mov.w	ip, #0
 8010360:	f1c9 0e20 	rsb	lr, r9, #32
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	fa02 f209 	lsl.w	r2, r2, r9
 801036a:	ea42 020c 	orr.w	r2, r2, ip
 801036e:	f84a 2b04 	str.w	r2, [sl], #4
 8010372:	f853 2b04 	ldr.w	r2, [r3], #4
 8010376:	4298      	cmp	r0, r3
 8010378:	fa22 fc0e 	lsr.w	ip, r2, lr
 801037c:	d8f2      	bhi.n	8010364 <__lshift+0x70>
 801037e:	1b03      	subs	r3, r0, r4
 8010380:	3b15      	subs	r3, #21
 8010382:	f023 0303 	bic.w	r3, r3, #3
 8010386:	3304      	adds	r3, #4
 8010388:	f104 0215 	add.w	r2, r4, #21
 801038c:	4290      	cmp	r0, r2
 801038e:	bf38      	it	cc
 8010390:	2304      	movcc	r3, #4
 8010392:	f841 c003 	str.w	ip, [r1, r3]
 8010396:	f1bc 0f00 	cmp.w	ip, #0
 801039a:	d001      	beq.n	80103a0 <__lshift+0xac>
 801039c:	f108 0602 	add.w	r6, r8, #2
 80103a0:	3e01      	subs	r6, #1
 80103a2:	4638      	mov	r0, r7
 80103a4:	4621      	mov	r1, r4
 80103a6:	612e      	str	r6, [r5, #16]
 80103a8:	f7ff fd8c 	bl	800fec4 <_Bfree>
 80103ac:	4628      	mov	r0, r5
 80103ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80103b6:	3301      	adds	r3, #1
 80103b8:	e7c1      	b.n	801033e <__lshift+0x4a>
 80103ba:	3904      	subs	r1, #4
 80103bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c0:	4298      	cmp	r0, r3
 80103c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80103c6:	d8f9      	bhi.n	80103bc <__lshift+0xc8>
 80103c8:	e7ea      	b.n	80103a0 <__lshift+0xac>
 80103ca:	bf00      	nop
 80103cc:	08011c77 	.word	0x08011c77
 80103d0:	08011d04 	.word	0x08011d04

080103d4 <__mcmp>:
 80103d4:	4603      	mov	r3, r0
 80103d6:	690a      	ldr	r2, [r1, #16]
 80103d8:	6900      	ldr	r0, [r0, #16]
 80103da:	b530      	push	{r4, r5, lr}
 80103dc:	1a80      	subs	r0, r0, r2
 80103de:	d10d      	bne.n	80103fc <__mcmp+0x28>
 80103e0:	3314      	adds	r3, #20
 80103e2:	3114      	adds	r1, #20
 80103e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80103e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80103ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80103f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80103f4:	4295      	cmp	r5, r2
 80103f6:	d002      	beq.n	80103fe <__mcmp+0x2a>
 80103f8:	d304      	bcc.n	8010404 <__mcmp+0x30>
 80103fa:	2001      	movs	r0, #1
 80103fc:	bd30      	pop	{r4, r5, pc}
 80103fe:	42a3      	cmp	r3, r4
 8010400:	d3f4      	bcc.n	80103ec <__mcmp+0x18>
 8010402:	e7fb      	b.n	80103fc <__mcmp+0x28>
 8010404:	f04f 30ff 	mov.w	r0, #4294967295
 8010408:	e7f8      	b.n	80103fc <__mcmp+0x28>
	...

0801040c <__mdiff>:
 801040c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	460d      	mov	r5, r1
 8010412:	4607      	mov	r7, r0
 8010414:	4611      	mov	r1, r2
 8010416:	4628      	mov	r0, r5
 8010418:	4614      	mov	r4, r2
 801041a:	f7ff ffdb 	bl	80103d4 <__mcmp>
 801041e:	1e06      	subs	r6, r0, #0
 8010420:	d111      	bne.n	8010446 <__mdiff+0x3a>
 8010422:	4631      	mov	r1, r6
 8010424:	4638      	mov	r0, r7
 8010426:	f7ff fd0d 	bl	800fe44 <_Balloc>
 801042a:	4602      	mov	r2, r0
 801042c:	b928      	cbnz	r0, 801043a <__mdiff+0x2e>
 801042e:	f240 2132 	movw	r1, #562	; 0x232
 8010432:	4b3a      	ldr	r3, [pc, #232]	; (801051c <__mdiff+0x110>)
 8010434:	483a      	ldr	r0, [pc, #232]	; (8010520 <__mdiff+0x114>)
 8010436:	f000 fc2d 	bl	8010c94 <__assert_func>
 801043a:	2301      	movs	r3, #1
 801043c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010440:	4610      	mov	r0, r2
 8010442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010446:	bfa4      	itt	ge
 8010448:	4623      	movge	r3, r4
 801044a:	462c      	movge	r4, r5
 801044c:	4638      	mov	r0, r7
 801044e:	6861      	ldr	r1, [r4, #4]
 8010450:	bfa6      	itte	ge
 8010452:	461d      	movge	r5, r3
 8010454:	2600      	movge	r6, #0
 8010456:	2601      	movlt	r6, #1
 8010458:	f7ff fcf4 	bl	800fe44 <_Balloc>
 801045c:	4602      	mov	r2, r0
 801045e:	b918      	cbnz	r0, 8010468 <__mdiff+0x5c>
 8010460:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010464:	4b2d      	ldr	r3, [pc, #180]	; (801051c <__mdiff+0x110>)
 8010466:	e7e5      	b.n	8010434 <__mdiff+0x28>
 8010468:	f102 0814 	add.w	r8, r2, #20
 801046c:	46c2      	mov	sl, r8
 801046e:	f04f 0c00 	mov.w	ip, #0
 8010472:	6927      	ldr	r7, [r4, #16]
 8010474:	60c6      	str	r6, [r0, #12]
 8010476:	692e      	ldr	r6, [r5, #16]
 8010478:	f104 0014 	add.w	r0, r4, #20
 801047c:	f105 0914 	add.w	r9, r5, #20
 8010480:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010484:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010488:	3410      	adds	r4, #16
 801048a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801048e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010492:	fa1f f18b 	uxth.w	r1, fp
 8010496:	448c      	add	ip, r1
 8010498:	b299      	uxth	r1, r3
 801049a:	0c1b      	lsrs	r3, r3, #16
 801049c:	ebac 0101 	sub.w	r1, ip, r1
 80104a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80104a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80104a8:	b289      	uxth	r1, r1
 80104aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80104ae:	454e      	cmp	r6, r9
 80104b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80104b4:	f84a 3b04 	str.w	r3, [sl], #4
 80104b8:	d8e7      	bhi.n	801048a <__mdiff+0x7e>
 80104ba:	1b73      	subs	r3, r6, r5
 80104bc:	3b15      	subs	r3, #21
 80104be:	f023 0303 	bic.w	r3, r3, #3
 80104c2:	3515      	adds	r5, #21
 80104c4:	3304      	adds	r3, #4
 80104c6:	42ae      	cmp	r6, r5
 80104c8:	bf38      	it	cc
 80104ca:	2304      	movcc	r3, #4
 80104cc:	4418      	add	r0, r3
 80104ce:	4443      	add	r3, r8
 80104d0:	461e      	mov	r6, r3
 80104d2:	4605      	mov	r5, r0
 80104d4:	4575      	cmp	r5, lr
 80104d6:	d30e      	bcc.n	80104f6 <__mdiff+0xea>
 80104d8:	f10e 0103 	add.w	r1, lr, #3
 80104dc:	1a09      	subs	r1, r1, r0
 80104de:	f021 0103 	bic.w	r1, r1, #3
 80104e2:	3803      	subs	r0, #3
 80104e4:	4586      	cmp	lr, r0
 80104e6:	bf38      	it	cc
 80104e8:	2100      	movcc	r1, #0
 80104ea:	4419      	add	r1, r3
 80104ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80104f0:	b18b      	cbz	r3, 8010516 <__mdiff+0x10a>
 80104f2:	6117      	str	r7, [r2, #16]
 80104f4:	e7a4      	b.n	8010440 <__mdiff+0x34>
 80104f6:	f855 8b04 	ldr.w	r8, [r5], #4
 80104fa:	fa1f f188 	uxth.w	r1, r8
 80104fe:	4461      	add	r1, ip
 8010500:	140c      	asrs	r4, r1, #16
 8010502:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010506:	b289      	uxth	r1, r1
 8010508:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801050c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010510:	f846 1b04 	str.w	r1, [r6], #4
 8010514:	e7de      	b.n	80104d4 <__mdiff+0xc8>
 8010516:	3f01      	subs	r7, #1
 8010518:	e7e8      	b.n	80104ec <__mdiff+0xe0>
 801051a:	bf00      	nop
 801051c:	08011c77 	.word	0x08011c77
 8010520:	08011d04 	.word	0x08011d04

08010524 <__ulp>:
 8010524:	4b11      	ldr	r3, [pc, #68]	; (801056c <__ulp+0x48>)
 8010526:	400b      	ands	r3, r1
 8010528:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801052c:	2b00      	cmp	r3, #0
 801052e:	dd02      	ble.n	8010536 <__ulp+0x12>
 8010530:	2000      	movs	r0, #0
 8010532:	4619      	mov	r1, r3
 8010534:	4770      	bx	lr
 8010536:	425b      	negs	r3, r3
 8010538:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801053c:	f04f 0000 	mov.w	r0, #0
 8010540:	f04f 0100 	mov.w	r1, #0
 8010544:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010548:	da04      	bge.n	8010554 <__ulp+0x30>
 801054a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801054e:	fa43 f102 	asr.w	r1, r3, r2
 8010552:	4770      	bx	lr
 8010554:	f1a2 0314 	sub.w	r3, r2, #20
 8010558:	2b1e      	cmp	r3, #30
 801055a:	bfd6      	itet	le
 801055c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010560:	2301      	movgt	r3, #1
 8010562:	fa22 f303 	lsrle.w	r3, r2, r3
 8010566:	4618      	mov	r0, r3
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	7ff00000 	.word	0x7ff00000

08010570 <__b2d>:
 8010570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010574:	6907      	ldr	r7, [r0, #16]
 8010576:	f100 0914 	add.w	r9, r0, #20
 801057a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801057e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010582:	f1a7 0804 	sub.w	r8, r7, #4
 8010586:	4630      	mov	r0, r6
 8010588:	f7ff fd4e 	bl	8010028 <__hi0bits>
 801058c:	f1c0 0320 	rsb	r3, r0, #32
 8010590:	280a      	cmp	r0, #10
 8010592:	600b      	str	r3, [r1, #0]
 8010594:	491f      	ldr	r1, [pc, #124]	; (8010614 <__b2d+0xa4>)
 8010596:	dc17      	bgt.n	80105c8 <__b2d+0x58>
 8010598:	45c1      	cmp	r9, r8
 801059a:	bf28      	it	cs
 801059c:	2200      	movcs	r2, #0
 801059e:	f1c0 0c0b 	rsb	ip, r0, #11
 80105a2:	fa26 f30c 	lsr.w	r3, r6, ip
 80105a6:	bf38      	it	cc
 80105a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80105ac:	ea43 0501 	orr.w	r5, r3, r1
 80105b0:	f100 0315 	add.w	r3, r0, #21
 80105b4:	fa06 f303 	lsl.w	r3, r6, r3
 80105b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80105bc:	ea43 0402 	orr.w	r4, r3, r2
 80105c0:	4620      	mov	r0, r4
 80105c2:	4629      	mov	r1, r5
 80105c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c8:	45c1      	cmp	r9, r8
 80105ca:	bf2e      	itee	cs
 80105cc:	2200      	movcs	r2, #0
 80105ce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80105d2:	f1a7 0808 	subcc.w	r8, r7, #8
 80105d6:	f1b0 030b 	subs.w	r3, r0, #11
 80105da:	d016      	beq.n	801060a <__b2d+0x9a>
 80105dc:	f1c3 0720 	rsb	r7, r3, #32
 80105e0:	fa22 f107 	lsr.w	r1, r2, r7
 80105e4:	45c8      	cmp	r8, r9
 80105e6:	fa06 f603 	lsl.w	r6, r6, r3
 80105ea:	ea46 0601 	orr.w	r6, r6, r1
 80105ee:	bf94      	ite	ls
 80105f0:	2100      	movls	r1, #0
 80105f2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80105f6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80105fa:	fa02 f003 	lsl.w	r0, r2, r3
 80105fe:	40f9      	lsrs	r1, r7
 8010600:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010604:	ea40 0401 	orr.w	r4, r0, r1
 8010608:	e7da      	b.n	80105c0 <__b2d+0x50>
 801060a:	4614      	mov	r4, r2
 801060c:	ea46 0501 	orr.w	r5, r6, r1
 8010610:	e7d6      	b.n	80105c0 <__b2d+0x50>
 8010612:	bf00      	nop
 8010614:	3ff00000 	.word	0x3ff00000

08010618 <__d2b>:
 8010618:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801061c:	2101      	movs	r1, #1
 801061e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010622:	4690      	mov	r8, r2
 8010624:	461d      	mov	r5, r3
 8010626:	f7ff fc0d 	bl	800fe44 <_Balloc>
 801062a:	4604      	mov	r4, r0
 801062c:	b930      	cbnz	r0, 801063c <__d2b+0x24>
 801062e:	4602      	mov	r2, r0
 8010630:	f240 310a 	movw	r1, #778	; 0x30a
 8010634:	4b24      	ldr	r3, [pc, #144]	; (80106c8 <__d2b+0xb0>)
 8010636:	4825      	ldr	r0, [pc, #148]	; (80106cc <__d2b+0xb4>)
 8010638:	f000 fb2c 	bl	8010c94 <__assert_func>
 801063c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010640:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010644:	bb2d      	cbnz	r5, 8010692 <__d2b+0x7a>
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	f1b8 0300 	subs.w	r3, r8, #0
 801064c:	d026      	beq.n	801069c <__d2b+0x84>
 801064e:	4668      	mov	r0, sp
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	f7ff fd09 	bl	8010068 <__lo0bits>
 8010656:	9900      	ldr	r1, [sp, #0]
 8010658:	b1f0      	cbz	r0, 8010698 <__d2b+0x80>
 801065a:	9a01      	ldr	r2, [sp, #4]
 801065c:	f1c0 0320 	rsb	r3, r0, #32
 8010660:	fa02 f303 	lsl.w	r3, r2, r3
 8010664:	430b      	orrs	r3, r1
 8010666:	40c2      	lsrs	r2, r0
 8010668:	6163      	str	r3, [r4, #20]
 801066a:	9201      	str	r2, [sp, #4]
 801066c:	9b01      	ldr	r3, [sp, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	bf14      	ite	ne
 8010672:	2102      	movne	r1, #2
 8010674:	2101      	moveq	r1, #1
 8010676:	61a3      	str	r3, [r4, #24]
 8010678:	6121      	str	r1, [r4, #16]
 801067a:	b1c5      	cbz	r5, 80106ae <__d2b+0x96>
 801067c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010680:	4405      	add	r5, r0
 8010682:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010686:	603d      	str	r5, [r7, #0]
 8010688:	6030      	str	r0, [r6, #0]
 801068a:	4620      	mov	r0, r4
 801068c:	b002      	add	sp, #8
 801068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010696:	e7d6      	b.n	8010646 <__d2b+0x2e>
 8010698:	6161      	str	r1, [r4, #20]
 801069a:	e7e7      	b.n	801066c <__d2b+0x54>
 801069c:	a801      	add	r0, sp, #4
 801069e:	f7ff fce3 	bl	8010068 <__lo0bits>
 80106a2:	2101      	movs	r1, #1
 80106a4:	9b01      	ldr	r3, [sp, #4]
 80106a6:	6121      	str	r1, [r4, #16]
 80106a8:	6163      	str	r3, [r4, #20]
 80106aa:	3020      	adds	r0, #32
 80106ac:	e7e5      	b.n	801067a <__d2b+0x62>
 80106ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80106b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80106b6:	6038      	str	r0, [r7, #0]
 80106b8:	6918      	ldr	r0, [r3, #16]
 80106ba:	f7ff fcb5 	bl	8010028 <__hi0bits>
 80106be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80106c2:	6031      	str	r1, [r6, #0]
 80106c4:	e7e1      	b.n	801068a <__d2b+0x72>
 80106c6:	bf00      	nop
 80106c8:	08011c77 	.word	0x08011c77
 80106cc:	08011d04 	.word	0x08011d04

080106d0 <__ratio>:
 80106d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d4:	4688      	mov	r8, r1
 80106d6:	4669      	mov	r1, sp
 80106d8:	4681      	mov	r9, r0
 80106da:	f7ff ff49 	bl	8010570 <__b2d>
 80106de:	460f      	mov	r7, r1
 80106e0:	4604      	mov	r4, r0
 80106e2:	460d      	mov	r5, r1
 80106e4:	4640      	mov	r0, r8
 80106e6:	a901      	add	r1, sp, #4
 80106e8:	f7ff ff42 	bl	8010570 <__b2d>
 80106ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80106f4:	468b      	mov	fp, r1
 80106f6:	eba3 0c02 	sub.w	ip, r3, r2
 80106fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80106fe:	1a9b      	subs	r3, r3, r2
 8010700:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfd5      	itete	le
 8010708:	460a      	movle	r2, r1
 801070a:	462a      	movgt	r2, r5
 801070c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010710:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010714:	bfd8      	it	le
 8010716:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801071a:	465b      	mov	r3, fp
 801071c:	4602      	mov	r2, r0
 801071e:	4639      	mov	r1, r7
 8010720:	4620      	mov	r0, r4
 8010722:	f7f0 f81b 	bl	800075c <__aeabi_ddiv>
 8010726:	b003      	add	sp, #12
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801072c <__copybits>:
 801072c:	3901      	subs	r1, #1
 801072e:	b570      	push	{r4, r5, r6, lr}
 8010730:	1149      	asrs	r1, r1, #5
 8010732:	6914      	ldr	r4, [r2, #16]
 8010734:	3101      	adds	r1, #1
 8010736:	f102 0314 	add.w	r3, r2, #20
 801073a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801073e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010742:	1f05      	subs	r5, r0, #4
 8010744:	42a3      	cmp	r3, r4
 8010746:	d30c      	bcc.n	8010762 <__copybits+0x36>
 8010748:	1aa3      	subs	r3, r4, r2
 801074a:	3b11      	subs	r3, #17
 801074c:	f023 0303 	bic.w	r3, r3, #3
 8010750:	3211      	adds	r2, #17
 8010752:	42a2      	cmp	r2, r4
 8010754:	bf88      	it	hi
 8010756:	2300      	movhi	r3, #0
 8010758:	4418      	add	r0, r3
 801075a:	2300      	movs	r3, #0
 801075c:	4288      	cmp	r0, r1
 801075e:	d305      	bcc.n	801076c <__copybits+0x40>
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	f853 6b04 	ldr.w	r6, [r3], #4
 8010766:	f845 6f04 	str.w	r6, [r5, #4]!
 801076a:	e7eb      	b.n	8010744 <__copybits+0x18>
 801076c:	f840 3b04 	str.w	r3, [r0], #4
 8010770:	e7f4      	b.n	801075c <__copybits+0x30>

08010772 <__any_on>:
 8010772:	f100 0214 	add.w	r2, r0, #20
 8010776:	6900      	ldr	r0, [r0, #16]
 8010778:	114b      	asrs	r3, r1, #5
 801077a:	4298      	cmp	r0, r3
 801077c:	b510      	push	{r4, lr}
 801077e:	db11      	blt.n	80107a4 <__any_on+0x32>
 8010780:	dd0a      	ble.n	8010798 <__any_on+0x26>
 8010782:	f011 011f 	ands.w	r1, r1, #31
 8010786:	d007      	beq.n	8010798 <__any_on+0x26>
 8010788:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801078c:	fa24 f001 	lsr.w	r0, r4, r1
 8010790:	fa00 f101 	lsl.w	r1, r0, r1
 8010794:	428c      	cmp	r4, r1
 8010796:	d10b      	bne.n	80107b0 <__any_on+0x3e>
 8010798:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801079c:	4293      	cmp	r3, r2
 801079e:	d803      	bhi.n	80107a8 <__any_on+0x36>
 80107a0:	2000      	movs	r0, #0
 80107a2:	bd10      	pop	{r4, pc}
 80107a4:	4603      	mov	r3, r0
 80107a6:	e7f7      	b.n	8010798 <__any_on+0x26>
 80107a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107ac:	2900      	cmp	r1, #0
 80107ae:	d0f5      	beq.n	801079c <__any_on+0x2a>
 80107b0:	2001      	movs	r0, #1
 80107b2:	e7f6      	b.n	80107a2 <__any_on+0x30>

080107b4 <_calloc_r>:
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	fba1 5402 	umull	r5, r4, r1, r2
 80107ba:	b934      	cbnz	r4, 80107ca <_calloc_r+0x16>
 80107bc:	4629      	mov	r1, r5
 80107be:	f000 f875 	bl	80108ac <_malloc_r>
 80107c2:	4606      	mov	r6, r0
 80107c4:	b928      	cbnz	r0, 80107d2 <_calloc_r+0x1e>
 80107c6:	4630      	mov	r0, r6
 80107c8:	bd70      	pop	{r4, r5, r6, pc}
 80107ca:	220c      	movs	r2, #12
 80107cc:	2600      	movs	r6, #0
 80107ce:	6002      	str	r2, [r0, #0]
 80107d0:	e7f9      	b.n	80107c6 <_calloc_r+0x12>
 80107d2:	462a      	mov	r2, r5
 80107d4:	4621      	mov	r1, r4
 80107d6:	f7fc fe53 	bl	800d480 <memset>
 80107da:	e7f4      	b.n	80107c6 <_calloc_r+0x12>

080107dc <_free_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4605      	mov	r5, r0
 80107e0:	2900      	cmp	r1, #0
 80107e2:	d040      	beq.n	8010866 <_free_r+0x8a>
 80107e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107e8:	1f0c      	subs	r4, r1, #4
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	bfb8      	it	lt
 80107ee:	18e4      	addlt	r4, r4, r3
 80107f0:	f000 fa9a 	bl	8010d28 <__malloc_lock>
 80107f4:	4a1c      	ldr	r2, [pc, #112]	; (8010868 <_free_r+0x8c>)
 80107f6:	6813      	ldr	r3, [r2, #0]
 80107f8:	b933      	cbnz	r3, 8010808 <_free_r+0x2c>
 80107fa:	6063      	str	r3, [r4, #4]
 80107fc:	6014      	str	r4, [r2, #0]
 80107fe:	4628      	mov	r0, r5
 8010800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010804:	f000 ba96 	b.w	8010d34 <__malloc_unlock>
 8010808:	42a3      	cmp	r3, r4
 801080a:	d908      	bls.n	801081e <_free_r+0x42>
 801080c:	6820      	ldr	r0, [r4, #0]
 801080e:	1821      	adds	r1, r4, r0
 8010810:	428b      	cmp	r3, r1
 8010812:	bf01      	itttt	eq
 8010814:	6819      	ldreq	r1, [r3, #0]
 8010816:	685b      	ldreq	r3, [r3, #4]
 8010818:	1809      	addeq	r1, r1, r0
 801081a:	6021      	streq	r1, [r4, #0]
 801081c:	e7ed      	b.n	80107fa <_free_r+0x1e>
 801081e:	461a      	mov	r2, r3
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	b10b      	cbz	r3, 8010828 <_free_r+0x4c>
 8010824:	42a3      	cmp	r3, r4
 8010826:	d9fa      	bls.n	801081e <_free_r+0x42>
 8010828:	6811      	ldr	r1, [r2, #0]
 801082a:	1850      	adds	r0, r2, r1
 801082c:	42a0      	cmp	r0, r4
 801082e:	d10b      	bne.n	8010848 <_free_r+0x6c>
 8010830:	6820      	ldr	r0, [r4, #0]
 8010832:	4401      	add	r1, r0
 8010834:	1850      	adds	r0, r2, r1
 8010836:	4283      	cmp	r3, r0
 8010838:	6011      	str	r1, [r2, #0]
 801083a:	d1e0      	bne.n	80107fe <_free_r+0x22>
 801083c:	6818      	ldr	r0, [r3, #0]
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	4401      	add	r1, r0
 8010842:	6011      	str	r1, [r2, #0]
 8010844:	6053      	str	r3, [r2, #4]
 8010846:	e7da      	b.n	80107fe <_free_r+0x22>
 8010848:	d902      	bls.n	8010850 <_free_r+0x74>
 801084a:	230c      	movs	r3, #12
 801084c:	602b      	str	r3, [r5, #0]
 801084e:	e7d6      	b.n	80107fe <_free_r+0x22>
 8010850:	6820      	ldr	r0, [r4, #0]
 8010852:	1821      	adds	r1, r4, r0
 8010854:	428b      	cmp	r3, r1
 8010856:	bf01      	itttt	eq
 8010858:	6819      	ldreq	r1, [r3, #0]
 801085a:	685b      	ldreq	r3, [r3, #4]
 801085c:	1809      	addeq	r1, r1, r0
 801085e:	6021      	streq	r1, [r4, #0]
 8010860:	6063      	str	r3, [r4, #4]
 8010862:	6054      	str	r4, [r2, #4]
 8010864:	e7cb      	b.n	80107fe <_free_r+0x22>
 8010866:	bd38      	pop	{r3, r4, r5, pc}
 8010868:	20001c00 	.word	0x20001c00

0801086c <sbrk_aligned>:
 801086c:	b570      	push	{r4, r5, r6, lr}
 801086e:	4e0e      	ldr	r6, [pc, #56]	; (80108a8 <sbrk_aligned+0x3c>)
 8010870:	460c      	mov	r4, r1
 8010872:	6831      	ldr	r1, [r6, #0]
 8010874:	4605      	mov	r5, r0
 8010876:	b911      	cbnz	r1, 801087e <sbrk_aligned+0x12>
 8010878:	f000 f9ee 	bl	8010c58 <_sbrk_r>
 801087c:	6030      	str	r0, [r6, #0]
 801087e:	4621      	mov	r1, r4
 8010880:	4628      	mov	r0, r5
 8010882:	f000 f9e9 	bl	8010c58 <_sbrk_r>
 8010886:	1c43      	adds	r3, r0, #1
 8010888:	d00a      	beq.n	80108a0 <sbrk_aligned+0x34>
 801088a:	1cc4      	adds	r4, r0, #3
 801088c:	f024 0403 	bic.w	r4, r4, #3
 8010890:	42a0      	cmp	r0, r4
 8010892:	d007      	beq.n	80108a4 <sbrk_aligned+0x38>
 8010894:	1a21      	subs	r1, r4, r0
 8010896:	4628      	mov	r0, r5
 8010898:	f000 f9de 	bl	8010c58 <_sbrk_r>
 801089c:	3001      	adds	r0, #1
 801089e:	d101      	bne.n	80108a4 <sbrk_aligned+0x38>
 80108a0:	f04f 34ff 	mov.w	r4, #4294967295
 80108a4:	4620      	mov	r0, r4
 80108a6:	bd70      	pop	{r4, r5, r6, pc}
 80108a8:	20001c04 	.word	0x20001c04

080108ac <_malloc_r>:
 80108ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b0:	1ccd      	adds	r5, r1, #3
 80108b2:	f025 0503 	bic.w	r5, r5, #3
 80108b6:	3508      	adds	r5, #8
 80108b8:	2d0c      	cmp	r5, #12
 80108ba:	bf38      	it	cc
 80108bc:	250c      	movcc	r5, #12
 80108be:	2d00      	cmp	r5, #0
 80108c0:	4607      	mov	r7, r0
 80108c2:	db01      	blt.n	80108c8 <_malloc_r+0x1c>
 80108c4:	42a9      	cmp	r1, r5
 80108c6:	d905      	bls.n	80108d4 <_malloc_r+0x28>
 80108c8:	230c      	movs	r3, #12
 80108ca:	2600      	movs	r6, #0
 80108cc:	603b      	str	r3, [r7, #0]
 80108ce:	4630      	mov	r0, r6
 80108d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d4:	4e2e      	ldr	r6, [pc, #184]	; (8010990 <_malloc_r+0xe4>)
 80108d6:	f000 fa27 	bl	8010d28 <__malloc_lock>
 80108da:	6833      	ldr	r3, [r6, #0]
 80108dc:	461c      	mov	r4, r3
 80108de:	bb34      	cbnz	r4, 801092e <_malloc_r+0x82>
 80108e0:	4629      	mov	r1, r5
 80108e2:	4638      	mov	r0, r7
 80108e4:	f7ff ffc2 	bl	801086c <sbrk_aligned>
 80108e8:	1c43      	adds	r3, r0, #1
 80108ea:	4604      	mov	r4, r0
 80108ec:	d14d      	bne.n	801098a <_malloc_r+0xde>
 80108ee:	6834      	ldr	r4, [r6, #0]
 80108f0:	4626      	mov	r6, r4
 80108f2:	2e00      	cmp	r6, #0
 80108f4:	d140      	bne.n	8010978 <_malloc_r+0xcc>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	4631      	mov	r1, r6
 80108fa:	4638      	mov	r0, r7
 80108fc:	eb04 0803 	add.w	r8, r4, r3
 8010900:	f000 f9aa 	bl	8010c58 <_sbrk_r>
 8010904:	4580      	cmp	r8, r0
 8010906:	d13a      	bne.n	801097e <_malloc_r+0xd2>
 8010908:	6821      	ldr	r1, [r4, #0]
 801090a:	3503      	adds	r5, #3
 801090c:	1a6d      	subs	r5, r5, r1
 801090e:	f025 0503 	bic.w	r5, r5, #3
 8010912:	3508      	adds	r5, #8
 8010914:	2d0c      	cmp	r5, #12
 8010916:	bf38      	it	cc
 8010918:	250c      	movcc	r5, #12
 801091a:	4638      	mov	r0, r7
 801091c:	4629      	mov	r1, r5
 801091e:	f7ff ffa5 	bl	801086c <sbrk_aligned>
 8010922:	3001      	adds	r0, #1
 8010924:	d02b      	beq.n	801097e <_malloc_r+0xd2>
 8010926:	6823      	ldr	r3, [r4, #0]
 8010928:	442b      	add	r3, r5
 801092a:	6023      	str	r3, [r4, #0]
 801092c:	e00e      	b.n	801094c <_malloc_r+0xa0>
 801092e:	6822      	ldr	r2, [r4, #0]
 8010930:	1b52      	subs	r2, r2, r5
 8010932:	d41e      	bmi.n	8010972 <_malloc_r+0xc6>
 8010934:	2a0b      	cmp	r2, #11
 8010936:	d916      	bls.n	8010966 <_malloc_r+0xba>
 8010938:	1961      	adds	r1, r4, r5
 801093a:	42a3      	cmp	r3, r4
 801093c:	6025      	str	r5, [r4, #0]
 801093e:	bf18      	it	ne
 8010940:	6059      	strne	r1, [r3, #4]
 8010942:	6863      	ldr	r3, [r4, #4]
 8010944:	bf08      	it	eq
 8010946:	6031      	streq	r1, [r6, #0]
 8010948:	5162      	str	r2, [r4, r5]
 801094a:	604b      	str	r3, [r1, #4]
 801094c:	4638      	mov	r0, r7
 801094e:	f104 060b 	add.w	r6, r4, #11
 8010952:	f000 f9ef 	bl	8010d34 <__malloc_unlock>
 8010956:	f026 0607 	bic.w	r6, r6, #7
 801095a:	1d23      	adds	r3, r4, #4
 801095c:	1af2      	subs	r2, r6, r3
 801095e:	d0b6      	beq.n	80108ce <_malloc_r+0x22>
 8010960:	1b9b      	subs	r3, r3, r6
 8010962:	50a3      	str	r3, [r4, r2]
 8010964:	e7b3      	b.n	80108ce <_malloc_r+0x22>
 8010966:	6862      	ldr	r2, [r4, #4]
 8010968:	42a3      	cmp	r3, r4
 801096a:	bf0c      	ite	eq
 801096c:	6032      	streq	r2, [r6, #0]
 801096e:	605a      	strne	r2, [r3, #4]
 8010970:	e7ec      	b.n	801094c <_malloc_r+0xa0>
 8010972:	4623      	mov	r3, r4
 8010974:	6864      	ldr	r4, [r4, #4]
 8010976:	e7b2      	b.n	80108de <_malloc_r+0x32>
 8010978:	4634      	mov	r4, r6
 801097a:	6876      	ldr	r6, [r6, #4]
 801097c:	e7b9      	b.n	80108f2 <_malloc_r+0x46>
 801097e:	230c      	movs	r3, #12
 8010980:	4638      	mov	r0, r7
 8010982:	603b      	str	r3, [r7, #0]
 8010984:	f000 f9d6 	bl	8010d34 <__malloc_unlock>
 8010988:	e7a1      	b.n	80108ce <_malloc_r+0x22>
 801098a:	6025      	str	r5, [r4, #0]
 801098c:	e7de      	b.n	801094c <_malloc_r+0xa0>
 801098e:	bf00      	nop
 8010990:	20001c00 	.word	0x20001c00

08010994 <__ssputs_r>:
 8010994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010998:	688e      	ldr	r6, [r1, #8]
 801099a:	4682      	mov	sl, r0
 801099c:	429e      	cmp	r6, r3
 801099e:	460c      	mov	r4, r1
 80109a0:	4690      	mov	r8, r2
 80109a2:	461f      	mov	r7, r3
 80109a4:	d838      	bhi.n	8010a18 <__ssputs_r+0x84>
 80109a6:	898a      	ldrh	r2, [r1, #12]
 80109a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109ac:	d032      	beq.n	8010a14 <__ssputs_r+0x80>
 80109ae:	6825      	ldr	r5, [r4, #0]
 80109b0:	6909      	ldr	r1, [r1, #16]
 80109b2:	3301      	adds	r3, #1
 80109b4:	eba5 0901 	sub.w	r9, r5, r1
 80109b8:	6965      	ldr	r5, [r4, #20]
 80109ba:	444b      	add	r3, r9
 80109bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109c4:	106d      	asrs	r5, r5, #1
 80109c6:	429d      	cmp	r5, r3
 80109c8:	bf38      	it	cc
 80109ca:	461d      	movcc	r5, r3
 80109cc:	0553      	lsls	r3, r2, #21
 80109ce:	d531      	bpl.n	8010a34 <__ssputs_r+0xa0>
 80109d0:	4629      	mov	r1, r5
 80109d2:	f7ff ff6b 	bl	80108ac <_malloc_r>
 80109d6:	4606      	mov	r6, r0
 80109d8:	b950      	cbnz	r0, 80109f0 <__ssputs_r+0x5c>
 80109da:	230c      	movs	r3, #12
 80109dc:	f04f 30ff 	mov.w	r0, #4294967295
 80109e0:	f8ca 3000 	str.w	r3, [sl]
 80109e4:	89a3      	ldrh	r3, [r4, #12]
 80109e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ea:	81a3      	strh	r3, [r4, #12]
 80109ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109f0:	464a      	mov	r2, r9
 80109f2:	6921      	ldr	r1, [r4, #16]
 80109f4:	f7ff fa18 	bl	800fe28 <memcpy>
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80109fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a02:	81a3      	strh	r3, [r4, #12]
 8010a04:	6126      	str	r6, [r4, #16]
 8010a06:	444e      	add	r6, r9
 8010a08:	6026      	str	r6, [r4, #0]
 8010a0a:	463e      	mov	r6, r7
 8010a0c:	6165      	str	r5, [r4, #20]
 8010a0e:	eba5 0509 	sub.w	r5, r5, r9
 8010a12:	60a5      	str	r5, [r4, #8]
 8010a14:	42be      	cmp	r6, r7
 8010a16:	d900      	bls.n	8010a1a <__ssputs_r+0x86>
 8010a18:	463e      	mov	r6, r7
 8010a1a:	4632      	mov	r2, r6
 8010a1c:	4641      	mov	r1, r8
 8010a1e:	6820      	ldr	r0, [r4, #0]
 8010a20:	f000 f968 	bl	8010cf4 <memmove>
 8010a24:	68a3      	ldr	r3, [r4, #8]
 8010a26:	2000      	movs	r0, #0
 8010a28:	1b9b      	subs	r3, r3, r6
 8010a2a:	60a3      	str	r3, [r4, #8]
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	4433      	add	r3, r6
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	e7db      	b.n	80109ec <__ssputs_r+0x58>
 8010a34:	462a      	mov	r2, r5
 8010a36:	f000 f983 	bl	8010d40 <_realloc_r>
 8010a3a:	4606      	mov	r6, r0
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d1e1      	bne.n	8010a04 <__ssputs_r+0x70>
 8010a40:	4650      	mov	r0, sl
 8010a42:	6921      	ldr	r1, [r4, #16]
 8010a44:	f7ff feca 	bl	80107dc <_free_r>
 8010a48:	e7c7      	b.n	80109da <__ssputs_r+0x46>
	...

08010a4c <_svfiprintf_r>:
 8010a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a50:	4698      	mov	r8, r3
 8010a52:	898b      	ldrh	r3, [r1, #12]
 8010a54:	4607      	mov	r7, r0
 8010a56:	061b      	lsls	r3, r3, #24
 8010a58:	460d      	mov	r5, r1
 8010a5a:	4614      	mov	r4, r2
 8010a5c:	b09d      	sub	sp, #116	; 0x74
 8010a5e:	d50e      	bpl.n	8010a7e <_svfiprintf_r+0x32>
 8010a60:	690b      	ldr	r3, [r1, #16]
 8010a62:	b963      	cbnz	r3, 8010a7e <_svfiprintf_r+0x32>
 8010a64:	2140      	movs	r1, #64	; 0x40
 8010a66:	f7ff ff21 	bl	80108ac <_malloc_r>
 8010a6a:	6028      	str	r0, [r5, #0]
 8010a6c:	6128      	str	r0, [r5, #16]
 8010a6e:	b920      	cbnz	r0, 8010a7a <_svfiprintf_r+0x2e>
 8010a70:	230c      	movs	r3, #12
 8010a72:	603b      	str	r3, [r7, #0]
 8010a74:	f04f 30ff 	mov.w	r0, #4294967295
 8010a78:	e0d1      	b.n	8010c1e <_svfiprintf_r+0x1d2>
 8010a7a:	2340      	movs	r3, #64	; 0x40
 8010a7c:	616b      	str	r3, [r5, #20]
 8010a7e:	2300      	movs	r3, #0
 8010a80:	9309      	str	r3, [sp, #36]	; 0x24
 8010a82:	2320      	movs	r3, #32
 8010a84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010a88:	2330      	movs	r3, #48	; 0x30
 8010a8a:	f04f 0901 	mov.w	r9, #1
 8010a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010c38 <_svfiprintf_r+0x1ec>
 8010a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010a9a:	4623      	mov	r3, r4
 8010a9c:	469a      	mov	sl, r3
 8010a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aa2:	b10a      	cbz	r2, 8010aa8 <_svfiprintf_r+0x5c>
 8010aa4:	2a25      	cmp	r2, #37	; 0x25
 8010aa6:	d1f9      	bne.n	8010a9c <_svfiprintf_r+0x50>
 8010aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8010aac:	d00b      	beq.n	8010ac6 <_svfiprintf_r+0x7a>
 8010aae:	465b      	mov	r3, fp
 8010ab0:	4622      	mov	r2, r4
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff ff6d 	bl	8010994 <__ssputs_r>
 8010aba:	3001      	adds	r0, #1
 8010abc:	f000 80aa 	beq.w	8010c14 <_svfiprintf_r+0x1c8>
 8010ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ac2:	445a      	add	r2, fp
 8010ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f000 80a2 	beq.w	8010c14 <_svfiprintf_r+0x1c8>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ada:	f10a 0a01 	add.w	sl, sl, #1
 8010ade:	9304      	str	r3, [sp, #16]
 8010ae0:	9307      	str	r3, [sp, #28]
 8010ae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ae6:	931a      	str	r3, [sp, #104]	; 0x68
 8010ae8:	4654      	mov	r4, sl
 8010aea:	2205      	movs	r2, #5
 8010aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af0:	4851      	ldr	r0, [pc, #324]	; (8010c38 <_svfiprintf_r+0x1ec>)
 8010af2:	f7ff f98b 	bl	800fe0c <memchr>
 8010af6:	9a04      	ldr	r2, [sp, #16]
 8010af8:	b9d8      	cbnz	r0, 8010b32 <_svfiprintf_r+0xe6>
 8010afa:	06d0      	lsls	r0, r2, #27
 8010afc:	bf44      	itt	mi
 8010afe:	2320      	movmi	r3, #32
 8010b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b04:	0711      	lsls	r1, r2, #28
 8010b06:	bf44      	itt	mi
 8010b08:	232b      	movmi	r3, #43	; 0x2b
 8010b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b12:	2b2a      	cmp	r3, #42	; 0x2a
 8010b14:	d015      	beq.n	8010b42 <_svfiprintf_r+0xf6>
 8010b16:	4654      	mov	r4, sl
 8010b18:	2000      	movs	r0, #0
 8010b1a:	f04f 0c0a 	mov.w	ip, #10
 8010b1e:	9a07      	ldr	r2, [sp, #28]
 8010b20:	4621      	mov	r1, r4
 8010b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b26:	3b30      	subs	r3, #48	; 0x30
 8010b28:	2b09      	cmp	r3, #9
 8010b2a:	d94e      	bls.n	8010bca <_svfiprintf_r+0x17e>
 8010b2c:	b1b0      	cbz	r0, 8010b5c <_svfiprintf_r+0x110>
 8010b2e:	9207      	str	r2, [sp, #28]
 8010b30:	e014      	b.n	8010b5c <_svfiprintf_r+0x110>
 8010b32:	eba0 0308 	sub.w	r3, r0, r8
 8010b36:	fa09 f303 	lsl.w	r3, r9, r3
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	46a2      	mov	sl, r4
 8010b3e:	9304      	str	r3, [sp, #16]
 8010b40:	e7d2      	b.n	8010ae8 <_svfiprintf_r+0x9c>
 8010b42:	9b03      	ldr	r3, [sp, #12]
 8010b44:	1d19      	adds	r1, r3, #4
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	9103      	str	r1, [sp, #12]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	bfbb      	ittet	lt
 8010b4e:	425b      	neglt	r3, r3
 8010b50:	f042 0202 	orrlt.w	r2, r2, #2
 8010b54:	9307      	strge	r3, [sp, #28]
 8010b56:	9307      	strlt	r3, [sp, #28]
 8010b58:	bfb8      	it	lt
 8010b5a:	9204      	strlt	r2, [sp, #16]
 8010b5c:	7823      	ldrb	r3, [r4, #0]
 8010b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8010b60:	d10c      	bne.n	8010b7c <_svfiprintf_r+0x130>
 8010b62:	7863      	ldrb	r3, [r4, #1]
 8010b64:	2b2a      	cmp	r3, #42	; 0x2a
 8010b66:	d135      	bne.n	8010bd4 <_svfiprintf_r+0x188>
 8010b68:	9b03      	ldr	r3, [sp, #12]
 8010b6a:	3402      	adds	r4, #2
 8010b6c:	1d1a      	adds	r2, r3, #4
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	9203      	str	r2, [sp, #12]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	bfb8      	it	lt
 8010b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8010b7a:	9305      	str	r3, [sp, #20]
 8010b7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010c3c <_svfiprintf_r+0x1f0>
 8010b80:	2203      	movs	r2, #3
 8010b82:	4650      	mov	r0, sl
 8010b84:	7821      	ldrb	r1, [r4, #0]
 8010b86:	f7ff f941 	bl	800fe0c <memchr>
 8010b8a:	b140      	cbz	r0, 8010b9e <_svfiprintf_r+0x152>
 8010b8c:	2340      	movs	r3, #64	; 0x40
 8010b8e:	eba0 000a 	sub.w	r0, r0, sl
 8010b92:	fa03 f000 	lsl.w	r0, r3, r0
 8010b96:	9b04      	ldr	r3, [sp, #16]
 8010b98:	3401      	adds	r4, #1
 8010b9a:	4303      	orrs	r3, r0
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba2:	2206      	movs	r2, #6
 8010ba4:	4826      	ldr	r0, [pc, #152]	; (8010c40 <_svfiprintf_r+0x1f4>)
 8010ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010baa:	f7ff f92f 	bl	800fe0c <memchr>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d038      	beq.n	8010c24 <_svfiprintf_r+0x1d8>
 8010bb2:	4b24      	ldr	r3, [pc, #144]	; (8010c44 <_svfiprintf_r+0x1f8>)
 8010bb4:	bb1b      	cbnz	r3, 8010bfe <_svfiprintf_r+0x1b2>
 8010bb6:	9b03      	ldr	r3, [sp, #12]
 8010bb8:	3307      	adds	r3, #7
 8010bba:	f023 0307 	bic.w	r3, r3, #7
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	9303      	str	r3, [sp, #12]
 8010bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bc4:	4433      	add	r3, r6
 8010bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8010bc8:	e767      	b.n	8010a9a <_svfiprintf_r+0x4e>
 8010bca:	460c      	mov	r4, r1
 8010bcc:	2001      	movs	r0, #1
 8010bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bd2:	e7a5      	b.n	8010b20 <_svfiprintf_r+0xd4>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f04f 0c0a 	mov.w	ip, #10
 8010bda:	4619      	mov	r1, r3
 8010bdc:	3401      	adds	r4, #1
 8010bde:	9305      	str	r3, [sp, #20]
 8010be0:	4620      	mov	r0, r4
 8010be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010be6:	3a30      	subs	r2, #48	; 0x30
 8010be8:	2a09      	cmp	r2, #9
 8010bea:	d903      	bls.n	8010bf4 <_svfiprintf_r+0x1a8>
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d0c5      	beq.n	8010b7c <_svfiprintf_r+0x130>
 8010bf0:	9105      	str	r1, [sp, #20]
 8010bf2:	e7c3      	b.n	8010b7c <_svfiprintf_r+0x130>
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bfc:	e7f0      	b.n	8010be0 <_svfiprintf_r+0x194>
 8010bfe:	ab03      	add	r3, sp, #12
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	462a      	mov	r2, r5
 8010c04:	4638      	mov	r0, r7
 8010c06:	4b10      	ldr	r3, [pc, #64]	; (8010c48 <_svfiprintf_r+0x1fc>)
 8010c08:	a904      	add	r1, sp, #16
 8010c0a:	f7fc fcdf 	bl	800d5cc <_printf_float>
 8010c0e:	1c42      	adds	r2, r0, #1
 8010c10:	4606      	mov	r6, r0
 8010c12:	d1d6      	bne.n	8010bc2 <_svfiprintf_r+0x176>
 8010c14:	89ab      	ldrh	r3, [r5, #12]
 8010c16:	065b      	lsls	r3, r3, #25
 8010c18:	f53f af2c 	bmi.w	8010a74 <_svfiprintf_r+0x28>
 8010c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c1e:	b01d      	add	sp, #116	; 0x74
 8010c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c24:	ab03      	add	r3, sp, #12
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	462a      	mov	r2, r5
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	4b06      	ldr	r3, [pc, #24]	; (8010c48 <_svfiprintf_r+0x1fc>)
 8010c2e:	a904      	add	r1, sp, #16
 8010c30:	f7fc ff68 	bl	800db04 <_printf_i>
 8010c34:	e7eb      	b.n	8010c0e <_svfiprintf_r+0x1c2>
 8010c36:	bf00      	nop
 8010c38:	08011e5c 	.word	0x08011e5c
 8010c3c:	08011e62 	.word	0x08011e62
 8010c40:	08011e66 	.word	0x08011e66
 8010c44:	0800d5cd 	.word	0x0800d5cd
 8010c48:	08010995 	.word	0x08010995

08010c4c <nan>:
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	4901      	ldr	r1, [pc, #4]	; (8010c54 <nan+0x8>)
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	7ff80000 	.word	0x7ff80000

08010c58 <_sbrk_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	4d05      	ldr	r5, [pc, #20]	; (8010c74 <_sbrk_r+0x1c>)
 8010c5e:	4604      	mov	r4, r0
 8010c60:	4608      	mov	r0, r1
 8010c62:	602b      	str	r3, [r5, #0]
 8010c64:	f7f7 f9ae 	bl	8007fc4 <_sbrk>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	d102      	bne.n	8010c72 <_sbrk_r+0x1a>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b103      	cbz	r3, 8010c72 <_sbrk_r+0x1a>
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	bd38      	pop	{r3, r4, r5, pc}
 8010c74:	20001c08 	.word	0x20001c08

08010c78 <__ascii_wctomb>:
 8010c78:	4603      	mov	r3, r0
 8010c7a:	4608      	mov	r0, r1
 8010c7c:	b141      	cbz	r1, 8010c90 <__ascii_wctomb+0x18>
 8010c7e:	2aff      	cmp	r2, #255	; 0xff
 8010c80:	d904      	bls.n	8010c8c <__ascii_wctomb+0x14>
 8010c82:	228a      	movs	r2, #138	; 0x8a
 8010c84:	f04f 30ff 	mov.w	r0, #4294967295
 8010c88:	601a      	str	r2, [r3, #0]
 8010c8a:	4770      	bx	lr
 8010c8c:	2001      	movs	r0, #1
 8010c8e:	700a      	strb	r2, [r1, #0]
 8010c90:	4770      	bx	lr
	...

08010c94 <__assert_func>:
 8010c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c96:	4614      	mov	r4, r2
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4b09      	ldr	r3, [pc, #36]	; (8010cc0 <__assert_func+0x2c>)
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	68d8      	ldr	r0, [r3, #12]
 8010ca2:	b14c      	cbz	r4, 8010cb8 <__assert_func+0x24>
 8010ca4:	4b07      	ldr	r3, [pc, #28]	; (8010cc4 <__assert_func+0x30>)
 8010ca6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010caa:	9100      	str	r1, [sp, #0]
 8010cac:	462b      	mov	r3, r5
 8010cae:	4906      	ldr	r1, [pc, #24]	; (8010cc8 <__assert_func+0x34>)
 8010cb0:	f000 f80e 	bl	8010cd0 <fiprintf>
 8010cb4:	f000 fa8a 	bl	80111cc <abort>
 8010cb8:	4b04      	ldr	r3, [pc, #16]	; (8010ccc <__assert_func+0x38>)
 8010cba:	461c      	mov	r4, r3
 8010cbc:	e7f3      	b.n	8010ca6 <__assert_func+0x12>
 8010cbe:	bf00      	nop
 8010cc0:	20000198 	.word	0x20000198
 8010cc4:	08011e6d 	.word	0x08011e6d
 8010cc8:	08011e7a 	.word	0x08011e7a
 8010ccc:	08011ea8 	.word	0x08011ea8

08010cd0 <fiprintf>:
 8010cd0:	b40e      	push	{r1, r2, r3}
 8010cd2:	b503      	push	{r0, r1, lr}
 8010cd4:	4601      	mov	r1, r0
 8010cd6:	ab03      	add	r3, sp, #12
 8010cd8:	4805      	ldr	r0, [pc, #20]	; (8010cf0 <fiprintf+0x20>)
 8010cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cde:	6800      	ldr	r0, [r0, #0]
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	f000 f883 	bl	8010dec <_vfiprintf_r>
 8010ce6:	b002      	add	sp, #8
 8010ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cec:	b003      	add	sp, #12
 8010cee:	4770      	bx	lr
 8010cf0:	20000198 	.word	0x20000198

08010cf4 <memmove>:
 8010cf4:	4288      	cmp	r0, r1
 8010cf6:	b510      	push	{r4, lr}
 8010cf8:	eb01 0402 	add.w	r4, r1, r2
 8010cfc:	d902      	bls.n	8010d04 <memmove+0x10>
 8010cfe:	4284      	cmp	r4, r0
 8010d00:	4623      	mov	r3, r4
 8010d02:	d807      	bhi.n	8010d14 <memmove+0x20>
 8010d04:	1e43      	subs	r3, r0, #1
 8010d06:	42a1      	cmp	r1, r4
 8010d08:	d008      	beq.n	8010d1c <memmove+0x28>
 8010d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d12:	e7f8      	b.n	8010d06 <memmove+0x12>
 8010d14:	4601      	mov	r1, r0
 8010d16:	4402      	add	r2, r0
 8010d18:	428a      	cmp	r2, r1
 8010d1a:	d100      	bne.n	8010d1e <memmove+0x2a>
 8010d1c:	bd10      	pop	{r4, pc}
 8010d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d26:	e7f7      	b.n	8010d18 <memmove+0x24>

08010d28 <__malloc_lock>:
 8010d28:	4801      	ldr	r0, [pc, #4]	; (8010d30 <__malloc_lock+0x8>)
 8010d2a:	f000 bc0b 	b.w	8011544 <__retarget_lock_acquire_recursive>
 8010d2e:	bf00      	nop
 8010d30:	20001c0c 	.word	0x20001c0c

08010d34 <__malloc_unlock>:
 8010d34:	4801      	ldr	r0, [pc, #4]	; (8010d3c <__malloc_unlock+0x8>)
 8010d36:	f000 bc06 	b.w	8011546 <__retarget_lock_release_recursive>
 8010d3a:	bf00      	nop
 8010d3c:	20001c0c 	.word	0x20001c0c

08010d40 <_realloc_r>:
 8010d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d44:	4680      	mov	r8, r0
 8010d46:	4614      	mov	r4, r2
 8010d48:	460e      	mov	r6, r1
 8010d4a:	b921      	cbnz	r1, 8010d56 <_realloc_r+0x16>
 8010d4c:	4611      	mov	r1, r2
 8010d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d52:	f7ff bdab 	b.w	80108ac <_malloc_r>
 8010d56:	b92a      	cbnz	r2, 8010d64 <_realloc_r+0x24>
 8010d58:	f7ff fd40 	bl	80107dc <_free_r>
 8010d5c:	4625      	mov	r5, r4
 8010d5e:	4628      	mov	r0, r5
 8010d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d64:	f000 fc56 	bl	8011614 <_malloc_usable_size_r>
 8010d68:	4284      	cmp	r4, r0
 8010d6a:	4607      	mov	r7, r0
 8010d6c:	d802      	bhi.n	8010d74 <_realloc_r+0x34>
 8010d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010d72:	d812      	bhi.n	8010d9a <_realloc_r+0x5a>
 8010d74:	4621      	mov	r1, r4
 8010d76:	4640      	mov	r0, r8
 8010d78:	f7ff fd98 	bl	80108ac <_malloc_r>
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d0ed      	beq.n	8010d5e <_realloc_r+0x1e>
 8010d82:	42bc      	cmp	r4, r7
 8010d84:	4622      	mov	r2, r4
 8010d86:	4631      	mov	r1, r6
 8010d88:	bf28      	it	cs
 8010d8a:	463a      	movcs	r2, r7
 8010d8c:	f7ff f84c 	bl	800fe28 <memcpy>
 8010d90:	4631      	mov	r1, r6
 8010d92:	4640      	mov	r0, r8
 8010d94:	f7ff fd22 	bl	80107dc <_free_r>
 8010d98:	e7e1      	b.n	8010d5e <_realloc_r+0x1e>
 8010d9a:	4635      	mov	r5, r6
 8010d9c:	e7df      	b.n	8010d5e <_realloc_r+0x1e>

08010d9e <__sfputc_r>:
 8010d9e:	6893      	ldr	r3, [r2, #8]
 8010da0:	b410      	push	{r4}
 8010da2:	3b01      	subs	r3, #1
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	6093      	str	r3, [r2, #8]
 8010da8:	da07      	bge.n	8010dba <__sfputc_r+0x1c>
 8010daa:	6994      	ldr	r4, [r2, #24]
 8010dac:	42a3      	cmp	r3, r4
 8010dae:	db01      	blt.n	8010db4 <__sfputc_r+0x16>
 8010db0:	290a      	cmp	r1, #10
 8010db2:	d102      	bne.n	8010dba <__sfputc_r+0x1c>
 8010db4:	bc10      	pop	{r4}
 8010db6:	f000 b949 	b.w	801104c <__swbuf_r>
 8010dba:	6813      	ldr	r3, [r2, #0]
 8010dbc:	1c58      	adds	r0, r3, #1
 8010dbe:	6010      	str	r0, [r2, #0]
 8010dc0:	7019      	strb	r1, [r3, #0]
 8010dc2:	4608      	mov	r0, r1
 8010dc4:	bc10      	pop	{r4}
 8010dc6:	4770      	bx	lr

08010dc8 <__sfputs_r>:
 8010dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dca:	4606      	mov	r6, r0
 8010dcc:	460f      	mov	r7, r1
 8010dce:	4614      	mov	r4, r2
 8010dd0:	18d5      	adds	r5, r2, r3
 8010dd2:	42ac      	cmp	r4, r5
 8010dd4:	d101      	bne.n	8010dda <__sfputs_r+0x12>
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	e007      	b.n	8010dea <__sfputs_r+0x22>
 8010dda:	463a      	mov	r2, r7
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010de2:	f7ff ffdc 	bl	8010d9e <__sfputc_r>
 8010de6:	1c43      	adds	r3, r0, #1
 8010de8:	d1f3      	bne.n	8010dd2 <__sfputs_r+0xa>
 8010dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010dec <_vfiprintf_r>:
 8010dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df0:	460d      	mov	r5, r1
 8010df2:	4614      	mov	r4, r2
 8010df4:	4698      	mov	r8, r3
 8010df6:	4606      	mov	r6, r0
 8010df8:	b09d      	sub	sp, #116	; 0x74
 8010dfa:	b118      	cbz	r0, 8010e04 <_vfiprintf_r+0x18>
 8010dfc:	6983      	ldr	r3, [r0, #24]
 8010dfe:	b90b      	cbnz	r3, 8010e04 <_vfiprintf_r+0x18>
 8010e00:	f000 fb02 	bl	8011408 <__sinit>
 8010e04:	4b89      	ldr	r3, [pc, #548]	; (801102c <_vfiprintf_r+0x240>)
 8010e06:	429d      	cmp	r5, r3
 8010e08:	d11b      	bne.n	8010e42 <_vfiprintf_r+0x56>
 8010e0a:	6875      	ldr	r5, [r6, #4]
 8010e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e0e:	07d9      	lsls	r1, r3, #31
 8010e10:	d405      	bmi.n	8010e1e <_vfiprintf_r+0x32>
 8010e12:	89ab      	ldrh	r3, [r5, #12]
 8010e14:	059a      	lsls	r2, r3, #22
 8010e16:	d402      	bmi.n	8010e1e <_vfiprintf_r+0x32>
 8010e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e1a:	f000 fb93 	bl	8011544 <__retarget_lock_acquire_recursive>
 8010e1e:	89ab      	ldrh	r3, [r5, #12]
 8010e20:	071b      	lsls	r3, r3, #28
 8010e22:	d501      	bpl.n	8010e28 <_vfiprintf_r+0x3c>
 8010e24:	692b      	ldr	r3, [r5, #16]
 8010e26:	b9eb      	cbnz	r3, 8010e64 <_vfiprintf_r+0x78>
 8010e28:	4629      	mov	r1, r5
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	f000 f960 	bl	80110f0 <__swsetup_r>
 8010e30:	b1c0      	cbz	r0, 8010e64 <_vfiprintf_r+0x78>
 8010e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e34:	07dc      	lsls	r4, r3, #31
 8010e36:	d50e      	bpl.n	8010e56 <_vfiprintf_r+0x6a>
 8010e38:	f04f 30ff 	mov.w	r0, #4294967295
 8010e3c:	b01d      	add	sp, #116	; 0x74
 8010e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e42:	4b7b      	ldr	r3, [pc, #492]	; (8011030 <_vfiprintf_r+0x244>)
 8010e44:	429d      	cmp	r5, r3
 8010e46:	d101      	bne.n	8010e4c <_vfiprintf_r+0x60>
 8010e48:	68b5      	ldr	r5, [r6, #8]
 8010e4a:	e7df      	b.n	8010e0c <_vfiprintf_r+0x20>
 8010e4c:	4b79      	ldr	r3, [pc, #484]	; (8011034 <_vfiprintf_r+0x248>)
 8010e4e:	429d      	cmp	r5, r3
 8010e50:	bf08      	it	eq
 8010e52:	68f5      	ldreq	r5, [r6, #12]
 8010e54:	e7da      	b.n	8010e0c <_vfiprintf_r+0x20>
 8010e56:	89ab      	ldrh	r3, [r5, #12]
 8010e58:	0598      	lsls	r0, r3, #22
 8010e5a:	d4ed      	bmi.n	8010e38 <_vfiprintf_r+0x4c>
 8010e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e5e:	f000 fb72 	bl	8011546 <__retarget_lock_release_recursive>
 8010e62:	e7e9      	b.n	8010e38 <_vfiprintf_r+0x4c>
 8010e64:	2300      	movs	r3, #0
 8010e66:	9309      	str	r3, [sp, #36]	; 0x24
 8010e68:	2320      	movs	r3, #32
 8010e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e6e:	2330      	movs	r3, #48	; 0x30
 8010e70:	f04f 0901 	mov.w	r9, #1
 8010e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011038 <_vfiprintf_r+0x24c>
 8010e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e80:	4623      	mov	r3, r4
 8010e82:	469a      	mov	sl, r3
 8010e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e88:	b10a      	cbz	r2, 8010e8e <_vfiprintf_r+0xa2>
 8010e8a:	2a25      	cmp	r2, #37	; 0x25
 8010e8c:	d1f9      	bne.n	8010e82 <_vfiprintf_r+0x96>
 8010e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8010e92:	d00b      	beq.n	8010eac <_vfiprintf_r+0xc0>
 8010e94:	465b      	mov	r3, fp
 8010e96:	4622      	mov	r2, r4
 8010e98:	4629      	mov	r1, r5
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f7ff ff94 	bl	8010dc8 <__sfputs_r>
 8010ea0:	3001      	adds	r0, #1
 8010ea2:	f000 80aa 	beq.w	8010ffa <_vfiprintf_r+0x20e>
 8010ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ea8:	445a      	add	r2, fp
 8010eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8010eac:	f89a 3000 	ldrb.w	r3, [sl]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f000 80a2 	beq.w	8010ffa <_vfiprintf_r+0x20e>
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ec0:	f10a 0a01 	add.w	sl, sl, #1
 8010ec4:	9304      	str	r3, [sp, #16]
 8010ec6:	9307      	str	r3, [sp, #28]
 8010ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8010ece:	4654      	mov	r4, sl
 8010ed0:	2205      	movs	r2, #5
 8010ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ed6:	4858      	ldr	r0, [pc, #352]	; (8011038 <_vfiprintf_r+0x24c>)
 8010ed8:	f7fe ff98 	bl	800fe0c <memchr>
 8010edc:	9a04      	ldr	r2, [sp, #16]
 8010ede:	b9d8      	cbnz	r0, 8010f18 <_vfiprintf_r+0x12c>
 8010ee0:	06d1      	lsls	r1, r2, #27
 8010ee2:	bf44      	itt	mi
 8010ee4:	2320      	movmi	r3, #32
 8010ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010eea:	0713      	lsls	r3, r2, #28
 8010eec:	bf44      	itt	mi
 8010eee:	232b      	movmi	r3, #43	; 0x2b
 8010ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8010efa:	d015      	beq.n	8010f28 <_vfiprintf_r+0x13c>
 8010efc:	4654      	mov	r4, sl
 8010efe:	2000      	movs	r0, #0
 8010f00:	f04f 0c0a 	mov.w	ip, #10
 8010f04:	9a07      	ldr	r2, [sp, #28]
 8010f06:	4621      	mov	r1, r4
 8010f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f0c:	3b30      	subs	r3, #48	; 0x30
 8010f0e:	2b09      	cmp	r3, #9
 8010f10:	d94e      	bls.n	8010fb0 <_vfiprintf_r+0x1c4>
 8010f12:	b1b0      	cbz	r0, 8010f42 <_vfiprintf_r+0x156>
 8010f14:	9207      	str	r2, [sp, #28]
 8010f16:	e014      	b.n	8010f42 <_vfiprintf_r+0x156>
 8010f18:	eba0 0308 	sub.w	r3, r0, r8
 8010f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f20:	4313      	orrs	r3, r2
 8010f22:	46a2      	mov	sl, r4
 8010f24:	9304      	str	r3, [sp, #16]
 8010f26:	e7d2      	b.n	8010ece <_vfiprintf_r+0xe2>
 8010f28:	9b03      	ldr	r3, [sp, #12]
 8010f2a:	1d19      	adds	r1, r3, #4
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	9103      	str	r1, [sp, #12]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	bfbb      	ittet	lt
 8010f34:	425b      	neglt	r3, r3
 8010f36:	f042 0202 	orrlt.w	r2, r2, #2
 8010f3a:	9307      	strge	r3, [sp, #28]
 8010f3c:	9307      	strlt	r3, [sp, #28]
 8010f3e:	bfb8      	it	lt
 8010f40:	9204      	strlt	r2, [sp, #16]
 8010f42:	7823      	ldrb	r3, [r4, #0]
 8010f44:	2b2e      	cmp	r3, #46	; 0x2e
 8010f46:	d10c      	bne.n	8010f62 <_vfiprintf_r+0x176>
 8010f48:	7863      	ldrb	r3, [r4, #1]
 8010f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010f4c:	d135      	bne.n	8010fba <_vfiprintf_r+0x1ce>
 8010f4e:	9b03      	ldr	r3, [sp, #12]
 8010f50:	3402      	adds	r4, #2
 8010f52:	1d1a      	adds	r2, r3, #4
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	9203      	str	r2, [sp, #12]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	bfb8      	it	lt
 8010f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f60:	9305      	str	r3, [sp, #20]
 8010f62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801103c <_vfiprintf_r+0x250>
 8010f66:	2203      	movs	r2, #3
 8010f68:	4650      	mov	r0, sl
 8010f6a:	7821      	ldrb	r1, [r4, #0]
 8010f6c:	f7fe ff4e 	bl	800fe0c <memchr>
 8010f70:	b140      	cbz	r0, 8010f84 <_vfiprintf_r+0x198>
 8010f72:	2340      	movs	r3, #64	; 0x40
 8010f74:	eba0 000a 	sub.w	r0, r0, sl
 8010f78:	fa03 f000 	lsl.w	r0, r3, r0
 8010f7c:	9b04      	ldr	r3, [sp, #16]
 8010f7e:	3401      	adds	r4, #1
 8010f80:	4303      	orrs	r3, r0
 8010f82:	9304      	str	r3, [sp, #16]
 8010f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f88:	2206      	movs	r2, #6
 8010f8a:	482d      	ldr	r0, [pc, #180]	; (8011040 <_vfiprintf_r+0x254>)
 8010f8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f90:	f7fe ff3c 	bl	800fe0c <memchr>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d03f      	beq.n	8011018 <_vfiprintf_r+0x22c>
 8010f98:	4b2a      	ldr	r3, [pc, #168]	; (8011044 <_vfiprintf_r+0x258>)
 8010f9a:	bb1b      	cbnz	r3, 8010fe4 <_vfiprintf_r+0x1f8>
 8010f9c:	9b03      	ldr	r3, [sp, #12]
 8010f9e:	3307      	adds	r3, #7
 8010fa0:	f023 0307 	bic.w	r3, r3, #7
 8010fa4:	3308      	adds	r3, #8
 8010fa6:	9303      	str	r3, [sp, #12]
 8010fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010faa:	443b      	add	r3, r7
 8010fac:	9309      	str	r3, [sp, #36]	; 0x24
 8010fae:	e767      	b.n	8010e80 <_vfiprintf_r+0x94>
 8010fb0:	460c      	mov	r4, r1
 8010fb2:	2001      	movs	r0, #1
 8010fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fb8:	e7a5      	b.n	8010f06 <_vfiprintf_r+0x11a>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f04f 0c0a 	mov.w	ip, #10
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	3401      	adds	r4, #1
 8010fc4:	9305      	str	r3, [sp, #20]
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fcc:	3a30      	subs	r2, #48	; 0x30
 8010fce:	2a09      	cmp	r2, #9
 8010fd0:	d903      	bls.n	8010fda <_vfiprintf_r+0x1ee>
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d0c5      	beq.n	8010f62 <_vfiprintf_r+0x176>
 8010fd6:	9105      	str	r1, [sp, #20]
 8010fd8:	e7c3      	b.n	8010f62 <_vfiprintf_r+0x176>
 8010fda:	4604      	mov	r4, r0
 8010fdc:	2301      	movs	r3, #1
 8010fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fe2:	e7f0      	b.n	8010fc6 <_vfiprintf_r+0x1da>
 8010fe4:	ab03      	add	r3, sp, #12
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	462a      	mov	r2, r5
 8010fea:	4630      	mov	r0, r6
 8010fec:	4b16      	ldr	r3, [pc, #88]	; (8011048 <_vfiprintf_r+0x25c>)
 8010fee:	a904      	add	r1, sp, #16
 8010ff0:	f7fc faec 	bl	800d5cc <_printf_float>
 8010ff4:	4607      	mov	r7, r0
 8010ff6:	1c78      	adds	r0, r7, #1
 8010ff8:	d1d6      	bne.n	8010fa8 <_vfiprintf_r+0x1bc>
 8010ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ffc:	07d9      	lsls	r1, r3, #31
 8010ffe:	d405      	bmi.n	801100c <_vfiprintf_r+0x220>
 8011000:	89ab      	ldrh	r3, [r5, #12]
 8011002:	059a      	lsls	r2, r3, #22
 8011004:	d402      	bmi.n	801100c <_vfiprintf_r+0x220>
 8011006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011008:	f000 fa9d 	bl	8011546 <__retarget_lock_release_recursive>
 801100c:	89ab      	ldrh	r3, [r5, #12]
 801100e:	065b      	lsls	r3, r3, #25
 8011010:	f53f af12 	bmi.w	8010e38 <_vfiprintf_r+0x4c>
 8011014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011016:	e711      	b.n	8010e3c <_vfiprintf_r+0x50>
 8011018:	ab03      	add	r3, sp, #12
 801101a:	9300      	str	r3, [sp, #0]
 801101c:	462a      	mov	r2, r5
 801101e:	4630      	mov	r0, r6
 8011020:	4b09      	ldr	r3, [pc, #36]	; (8011048 <_vfiprintf_r+0x25c>)
 8011022:	a904      	add	r1, sp, #16
 8011024:	f7fc fd6e 	bl	800db04 <_printf_i>
 8011028:	e7e4      	b.n	8010ff4 <_vfiprintf_r+0x208>
 801102a:	bf00      	nop
 801102c:	08011fcc 	.word	0x08011fcc
 8011030:	08011fec 	.word	0x08011fec
 8011034:	08011fac 	.word	0x08011fac
 8011038:	08011e5c 	.word	0x08011e5c
 801103c:	08011e62 	.word	0x08011e62
 8011040:	08011e66 	.word	0x08011e66
 8011044:	0800d5cd 	.word	0x0800d5cd
 8011048:	08010dc9 	.word	0x08010dc9

0801104c <__swbuf_r>:
 801104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104e:	460e      	mov	r6, r1
 8011050:	4614      	mov	r4, r2
 8011052:	4605      	mov	r5, r0
 8011054:	b118      	cbz	r0, 801105e <__swbuf_r+0x12>
 8011056:	6983      	ldr	r3, [r0, #24]
 8011058:	b90b      	cbnz	r3, 801105e <__swbuf_r+0x12>
 801105a:	f000 f9d5 	bl	8011408 <__sinit>
 801105e:	4b21      	ldr	r3, [pc, #132]	; (80110e4 <__swbuf_r+0x98>)
 8011060:	429c      	cmp	r4, r3
 8011062:	d12b      	bne.n	80110bc <__swbuf_r+0x70>
 8011064:	686c      	ldr	r4, [r5, #4]
 8011066:	69a3      	ldr	r3, [r4, #24]
 8011068:	60a3      	str	r3, [r4, #8]
 801106a:	89a3      	ldrh	r3, [r4, #12]
 801106c:	071a      	lsls	r2, r3, #28
 801106e:	d52f      	bpl.n	80110d0 <__swbuf_r+0x84>
 8011070:	6923      	ldr	r3, [r4, #16]
 8011072:	b36b      	cbz	r3, 80110d0 <__swbuf_r+0x84>
 8011074:	6923      	ldr	r3, [r4, #16]
 8011076:	6820      	ldr	r0, [r4, #0]
 8011078:	b2f6      	uxtb	r6, r6
 801107a:	1ac0      	subs	r0, r0, r3
 801107c:	6963      	ldr	r3, [r4, #20]
 801107e:	4637      	mov	r7, r6
 8011080:	4283      	cmp	r3, r0
 8011082:	dc04      	bgt.n	801108e <__swbuf_r+0x42>
 8011084:	4621      	mov	r1, r4
 8011086:	4628      	mov	r0, r5
 8011088:	f000 f92a 	bl	80112e0 <_fflush_r>
 801108c:	bb30      	cbnz	r0, 80110dc <__swbuf_r+0x90>
 801108e:	68a3      	ldr	r3, [r4, #8]
 8011090:	3001      	adds	r0, #1
 8011092:	3b01      	subs	r3, #1
 8011094:	60a3      	str	r3, [r4, #8]
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	6022      	str	r2, [r4, #0]
 801109c:	701e      	strb	r6, [r3, #0]
 801109e:	6963      	ldr	r3, [r4, #20]
 80110a0:	4283      	cmp	r3, r0
 80110a2:	d004      	beq.n	80110ae <__swbuf_r+0x62>
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	07db      	lsls	r3, r3, #31
 80110a8:	d506      	bpl.n	80110b8 <__swbuf_r+0x6c>
 80110aa:	2e0a      	cmp	r6, #10
 80110ac:	d104      	bne.n	80110b8 <__swbuf_r+0x6c>
 80110ae:	4621      	mov	r1, r4
 80110b0:	4628      	mov	r0, r5
 80110b2:	f000 f915 	bl	80112e0 <_fflush_r>
 80110b6:	b988      	cbnz	r0, 80110dc <__swbuf_r+0x90>
 80110b8:	4638      	mov	r0, r7
 80110ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110bc:	4b0a      	ldr	r3, [pc, #40]	; (80110e8 <__swbuf_r+0x9c>)
 80110be:	429c      	cmp	r4, r3
 80110c0:	d101      	bne.n	80110c6 <__swbuf_r+0x7a>
 80110c2:	68ac      	ldr	r4, [r5, #8]
 80110c4:	e7cf      	b.n	8011066 <__swbuf_r+0x1a>
 80110c6:	4b09      	ldr	r3, [pc, #36]	; (80110ec <__swbuf_r+0xa0>)
 80110c8:	429c      	cmp	r4, r3
 80110ca:	bf08      	it	eq
 80110cc:	68ec      	ldreq	r4, [r5, #12]
 80110ce:	e7ca      	b.n	8011066 <__swbuf_r+0x1a>
 80110d0:	4621      	mov	r1, r4
 80110d2:	4628      	mov	r0, r5
 80110d4:	f000 f80c 	bl	80110f0 <__swsetup_r>
 80110d8:	2800      	cmp	r0, #0
 80110da:	d0cb      	beq.n	8011074 <__swbuf_r+0x28>
 80110dc:	f04f 37ff 	mov.w	r7, #4294967295
 80110e0:	e7ea      	b.n	80110b8 <__swbuf_r+0x6c>
 80110e2:	bf00      	nop
 80110e4:	08011fcc 	.word	0x08011fcc
 80110e8:	08011fec 	.word	0x08011fec
 80110ec:	08011fac 	.word	0x08011fac

080110f0 <__swsetup_r>:
 80110f0:	4b32      	ldr	r3, [pc, #200]	; (80111bc <__swsetup_r+0xcc>)
 80110f2:	b570      	push	{r4, r5, r6, lr}
 80110f4:	681d      	ldr	r5, [r3, #0]
 80110f6:	4606      	mov	r6, r0
 80110f8:	460c      	mov	r4, r1
 80110fa:	b125      	cbz	r5, 8011106 <__swsetup_r+0x16>
 80110fc:	69ab      	ldr	r3, [r5, #24]
 80110fe:	b913      	cbnz	r3, 8011106 <__swsetup_r+0x16>
 8011100:	4628      	mov	r0, r5
 8011102:	f000 f981 	bl	8011408 <__sinit>
 8011106:	4b2e      	ldr	r3, [pc, #184]	; (80111c0 <__swsetup_r+0xd0>)
 8011108:	429c      	cmp	r4, r3
 801110a:	d10f      	bne.n	801112c <__swsetup_r+0x3c>
 801110c:	686c      	ldr	r4, [r5, #4]
 801110e:	89a3      	ldrh	r3, [r4, #12]
 8011110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011114:	0719      	lsls	r1, r3, #28
 8011116:	d42c      	bmi.n	8011172 <__swsetup_r+0x82>
 8011118:	06dd      	lsls	r5, r3, #27
 801111a:	d411      	bmi.n	8011140 <__swsetup_r+0x50>
 801111c:	2309      	movs	r3, #9
 801111e:	6033      	str	r3, [r6, #0]
 8011120:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011124:	f04f 30ff 	mov.w	r0, #4294967295
 8011128:	81a3      	strh	r3, [r4, #12]
 801112a:	e03e      	b.n	80111aa <__swsetup_r+0xba>
 801112c:	4b25      	ldr	r3, [pc, #148]	; (80111c4 <__swsetup_r+0xd4>)
 801112e:	429c      	cmp	r4, r3
 8011130:	d101      	bne.n	8011136 <__swsetup_r+0x46>
 8011132:	68ac      	ldr	r4, [r5, #8]
 8011134:	e7eb      	b.n	801110e <__swsetup_r+0x1e>
 8011136:	4b24      	ldr	r3, [pc, #144]	; (80111c8 <__swsetup_r+0xd8>)
 8011138:	429c      	cmp	r4, r3
 801113a:	bf08      	it	eq
 801113c:	68ec      	ldreq	r4, [r5, #12]
 801113e:	e7e6      	b.n	801110e <__swsetup_r+0x1e>
 8011140:	0758      	lsls	r0, r3, #29
 8011142:	d512      	bpl.n	801116a <__swsetup_r+0x7a>
 8011144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011146:	b141      	cbz	r1, 801115a <__swsetup_r+0x6a>
 8011148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801114c:	4299      	cmp	r1, r3
 801114e:	d002      	beq.n	8011156 <__swsetup_r+0x66>
 8011150:	4630      	mov	r0, r6
 8011152:	f7ff fb43 	bl	80107dc <_free_r>
 8011156:	2300      	movs	r3, #0
 8011158:	6363      	str	r3, [r4, #52]	; 0x34
 801115a:	89a3      	ldrh	r3, [r4, #12]
 801115c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011160:	81a3      	strh	r3, [r4, #12]
 8011162:	2300      	movs	r3, #0
 8011164:	6063      	str	r3, [r4, #4]
 8011166:	6923      	ldr	r3, [r4, #16]
 8011168:	6023      	str	r3, [r4, #0]
 801116a:	89a3      	ldrh	r3, [r4, #12]
 801116c:	f043 0308 	orr.w	r3, r3, #8
 8011170:	81a3      	strh	r3, [r4, #12]
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	b94b      	cbnz	r3, 801118a <__swsetup_r+0x9a>
 8011176:	89a3      	ldrh	r3, [r4, #12]
 8011178:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801117c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011180:	d003      	beq.n	801118a <__swsetup_r+0x9a>
 8011182:	4621      	mov	r1, r4
 8011184:	4630      	mov	r0, r6
 8011186:	f000 fa05 	bl	8011594 <__smakebuf_r>
 801118a:	89a0      	ldrh	r0, [r4, #12]
 801118c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011190:	f010 0301 	ands.w	r3, r0, #1
 8011194:	d00a      	beq.n	80111ac <__swsetup_r+0xbc>
 8011196:	2300      	movs	r3, #0
 8011198:	60a3      	str	r3, [r4, #8]
 801119a:	6963      	ldr	r3, [r4, #20]
 801119c:	425b      	negs	r3, r3
 801119e:	61a3      	str	r3, [r4, #24]
 80111a0:	6923      	ldr	r3, [r4, #16]
 80111a2:	b943      	cbnz	r3, 80111b6 <__swsetup_r+0xc6>
 80111a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80111a8:	d1ba      	bne.n	8011120 <__swsetup_r+0x30>
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	0781      	lsls	r1, r0, #30
 80111ae:	bf58      	it	pl
 80111b0:	6963      	ldrpl	r3, [r4, #20]
 80111b2:	60a3      	str	r3, [r4, #8]
 80111b4:	e7f4      	b.n	80111a0 <__swsetup_r+0xb0>
 80111b6:	2000      	movs	r0, #0
 80111b8:	e7f7      	b.n	80111aa <__swsetup_r+0xba>
 80111ba:	bf00      	nop
 80111bc:	20000198 	.word	0x20000198
 80111c0:	08011fcc 	.word	0x08011fcc
 80111c4:	08011fec 	.word	0x08011fec
 80111c8:	08011fac 	.word	0x08011fac

080111cc <abort>:
 80111cc:	2006      	movs	r0, #6
 80111ce:	b508      	push	{r3, lr}
 80111d0:	f000 fa50 	bl	8011674 <raise>
 80111d4:	2001      	movs	r0, #1
 80111d6:	f7f6 fec5 	bl	8007f64 <_exit>
	...

080111dc <__sflush_r>:
 80111dc:	898a      	ldrh	r2, [r1, #12]
 80111de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e0:	4605      	mov	r5, r0
 80111e2:	0710      	lsls	r0, r2, #28
 80111e4:	460c      	mov	r4, r1
 80111e6:	d457      	bmi.n	8011298 <__sflush_r+0xbc>
 80111e8:	684b      	ldr	r3, [r1, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dc04      	bgt.n	80111f8 <__sflush_r+0x1c>
 80111ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dc01      	bgt.n	80111f8 <__sflush_r+0x1c>
 80111f4:	2000      	movs	r0, #0
 80111f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80111fa:	2e00      	cmp	r6, #0
 80111fc:	d0fa      	beq.n	80111f4 <__sflush_r+0x18>
 80111fe:	2300      	movs	r3, #0
 8011200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011204:	682f      	ldr	r7, [r5, #0]
 8011206:	602b      	str	r3, [r5, #0]
 8011208:	d032      	beq.n	8011270 <__sflush_r+0x94>
 801120a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801120c:	89a3      	ldrh	r3, [r4, #12]
 801120e:	075a      	lsls	r2, r3, #29
 8011210:	d505      	bpl.n	801121e <__sflush_r+0x42>
 8011212:	6863      	ldr	r3, [r4, #4]
 8011214:	1ac0      	subs	r0, r0, r3
 8011216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011218:	b10b      	cbz	r3, 801121e <__sflush_r+0x42>
 801121a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801121c:	1ac0      	subs	r0, r0, r3
 801121e:	2300      	movs	r3, #0
 8011220:	4602      	mov	r2, r0
 8011222:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011224:	4628      	mov	r0, r5
 8011226:	6a21      	ldr	r1, [r4, #32]
 8011228:	47b0      	blx	r6
 801122a:	1c43      	adds	r3, r0, #1
 801122c:	89a3      	ldrh	r3, [r4, #12]
 801122e:	d106      	bne.n	801123e <__sflush_r+0x62>
 8011230:	6829      	ldr	r1, [r5, #0]
 8011232:	291d      	cmp	r1, #29
 8011234:	d82c      	bhi.n	8011290 <__sflush_r+0xb4>
 8011236:	4a29      	ldr	r2, [pc, #164]	; (80112dc <__sflush_r+0x100>)
 8011238:	40ca      	lsrs	r2, r1
 801123a:	07d6      	lsls	r6, r2, #31
 801123c:	d528      	bpl.n	8011290 <__sflush_r+0xb4>
 801123e:	2200      	movs	r2, #0
 8011240:	6062      	str	r2, [r4, #4]
 8011242:	6922      	ldr	r2, [r4, #16]
 8011244:	04d9      	lsls	r1, r3, #19
 8011246:	6022      	str	r2, [r4, #0]
 8011248:	d504      	bpl.n	8011254 <__sflush_r+0x78>
 801124a:	1c42      	adds	r2, r0, #1
 801124c:	d101      	bne.n	8011252 <__sflush_r+0x76>
 801124e:	682b      	ldr	r3, [r5, #0]
 8011250:	b903      	cbnz	r3, 8011254 <__sflush_r+0x78>
 8011252:	6560      	str	r0, [r4, #84]	; 0x54
 8011254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011256:	602f      	str	r7, [r5, #0]
 8011258:	2900      	cmp	r1, #0
 801125a:	d0cb      	beq.n	80111f4 <__sflush_r+0x18>
 801125c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011260:	4299      	cmp	r1, r3
 8011262:	d002      	beq.n	801126a <__sflush_r+0x8e>
 8011264:	4628      	mov	r0, r5
 8011266:	f7ff fab9 	bl	80107dc <_free_r>
 801126a:	2000      	movs	r0, #0
 801126c:	6360      	str	r0, [r4, #52]	; 0x34
 801126e:	e7c2      	b.n	80111f6 <__sflush_r+0x1a>
 8011270:	6a21      	ldr	r1, [r4, #32]
 8011272:	2301      	movs	r3, #1
 8011274:	4628      	mov	r0, r5
 8011276:	47b0      	blx	r6
 8011278:	1c41      	adds	r1, r0, #1
 801127a:	d1c7      	bne.n	801120c <__sflush_r+0x30>
 801127c:	682b      	ldr	r3, [r5, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d0c4      	beq.n	801120c <__sflush_r+0x30>
 8011282:	2b1d      	cmp	r3, #29
 8011284:	d001      	beq.n	801128a <__sflush_r+0xae>
 8011286:	2b16      	cmp	r3, #22
 8011288:	d101      	bne.n	801128e <__sflush_r+0xb2>
 801128a:	602f      	str	r7, [r5, #0]
 801128c:	e7b2      	b.n	80111f4 <__sflush_r+0x18>
 801128e:	89a3      	ldrh	r3, [r4, #12]
 8011290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011294:	81a3      	strh	r3, [r4, #12]
 8011296:	e7ae      	b.n	80111f6 <__sflush_r+0x1a>
 8011298:	690f      	ldr	r7, [r1, #16]
 801129a:	2f00      	cmp	r7, #0
 801129c:	d0aa      	beq.n	80111f4 <__sflush_r+0x18>
 801129e:	0793      	lsls	r3, r2, #30
 80112a0:	bf18      	it	ne
 80112a2:	2300      	movne	r3, #0
 80112a4:	680e      	ldr	r6, [r1, #0]
 80112a6:	bf08      	it	eq
 80112a8:	694b      	ldreq	r3, [r1, #20]
 80112aa:	1bf6      	subs	r6, r6, r7
 80112ac:	600f      	str	r7, [r1, #0]
 80112ae:	608b      	str	r3, [r1, #8]
 80112b0:	2e00      	cmp	r6, #0
 80112b2:	dd9f      	ble.n	80111f4 <__sflush_r+0x18>
 80112b4:	4633      	mov	r3, r6
 80112b6:	463a      	mov	r2, r7
 80112b8:	4628      	mov	r0, r5
 80112ba:	6a21      	ldr	r1, [r4, #32]
 80112bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80112c0:	47e0      	blx	ip
 80112c2:	2800      	cmp	r0, #0
 80112c4:	dc06      	bgt.n	80112d4 <__sflush_r+0xf8>
 80112c6:	89a3      	ldrh	r3, [r4, #12]
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112d0:	81a3      	strh	r3, [r4, #12]
 80112d2:	e790      	b.n	80111f6 <__sflush_r+0x1a>
 80112d4:	4407      	add	r7, r0
 80112d6:	1a36      	subs	r6, r6, r0
 80112d8:	e7ea      	b.n	80112b0 <__sflush_r+0xd4>
 80112da:	bf00      	nop
 80112dc:	20400001 	.word	0x20400001

080112e0 <_fflush_r>:
 80112e0:	b538      	push	{r3, r4, r5, lr}
 80112e2:	690b      	ldr	r3, [r1, #16]
 80112e4:	4605      	mov	r5, r0
 80112e6:	460c      	mov	r4, r1
 80112e8:	b913      	cbnz	r3, 80112f0 <_fflush_r+0x10>
 80112ea:	2500      	movs	r5, #0
 80112ec:	4628      	mov	r0, r5
 80112ee:	bd38      	pop	{r3, r4, r5, pc}
 80112f0:	b118      	cbz	r0, 80112fa <_fflush_r+0x1a>
 80112f2:	6983      	ldr	r3, [r0, #24]
 80112f4:	b90b      	cbnz	r3, 80112fa <_fflush_r+0x1a>
 80112f6:	f000 f887 	bl	8011408 <__sinit>
 80112fa:	4b14      	ldr	r3, [pc, #80]	; (801134c <_fflush_r+0x6c>)
 80112fc:	429c      	cmp	r4, r3
 80112fe:	d11b      	bne.n	8011338 <_fflush_r+0x58>
 8011300:	686c      	ldr	r4, [r5, #4]
 8011302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d0ef      	beq.n	80112ea <_fflush_r+0xa>
 801130a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801130c:	07d0      	lsls	r0, r2, #31
 801130e:	d404      	bmi.n	801131a <_fflush_r+0x3a>
 8011310:	0599      	lsls	r1, r3, #22
 8011312:	d402      	bmi.n	801131a <_fflush_r+0x3a>
 8011314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011316:	f000 f915 	bl	8011544 <__retarget_lock_acquire_recursive>
 801131a:	4628      	mov	r0, r5
 801131c:	4621      	mov	r1, r4
 801131e:	f7ff ff5d 	bl	80111dc <__sflush_r>
 8011322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011324:	4605      	mov	r5, r0
 8011326:	07da      	lsls	r2, r3, #31
 8011328:	d4e0      	bmi.n	80112ec <_fflush_r+0xc>
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	059b      	lsls	r3, r3, #22
 801132e:	d4dd      	bmi.n	80112ec <_fflush_r+0xc>
 8011330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011332:	f000 f908 	bl	8011546 <__retarget_lock_release_recursive>
 8011336:	e7d9      	b.n	80112ec <_fflush_r+0xc>
 8011338:	4b05      	ldr	r3, [pc, #20]	; (8011350 <_fflush_r+0x70>)
 801133a:	429c      	cmp	r4, r3
 801133c:	d101      	bne.n	8011342 <_fflush_r+0x62>
 801133e:	68ac      	ldr	r4, [r5, #8]
 8011340:	e7df      	b.n	8011302 <_fflush_r+0x22>
 8011342:	4b04      	ldr	r3, [pc, #16]	; (8011354 <_fflush_r+0x74>)
 8011344:	429c      	cmp	r4, r3
 8011346:	bf08      	it	eq
 8011348:	68ec      	ldreq	r4, [r5, #12]
 801134a:	e7da      	b.n	8011302 <_fflush_r+0x22>
 801134c:	08011fcc 	.word	0x08011fcc
 8011350:	08011fec 	.word	0x08011fec
 8011354:	08011fac 	.word	0x08011fac

08011358 <std>:
 8011358:	2300      	movs	r3, #0
 801135a:	b510      	push	{r4, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	e9c0 3300 	strd	r3, r3, [r0]
 8011362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011366:	6083      	str	r3, [r0, #8]
 8011368:	8181      	strh	r1, [r0, #12]
 801136a:	6643      	str	r3, [r0, #100]	; 0x64
 801136c:	81c2      	strh	r2, [r0, #14]
 801136e:	6183      	str	r3, [r0, #24]
 8011370:	4619      	mov	r1, r3
 8011372:	2208      	movs	r2, #8
 8011374:	305c      	adds	r0, #92	; 0x5c
 8011376:	f7fc f883 	bl	800d480 <memset>
 801137a:	4b05      	ldr	r3, [pc, #20]	; (8011390 <std+0x38>)
 801137c:	6224      	str	r4, [r4, #32]
 801137e:	6263      	str	r3, [r4, #36]	; 0x24
 8011380:	4b04      	ldr	r3, [pc, #16]	; (8011394 <std+0x3c>)
 8011382:	62a3      	str	r3, [r4, #40]	; 0x28
 8011384:	4b04      	ldr	r3, [pc, #16]	; (8011398 <std+0x40>)
 8011386:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011388:	4b04      	ldr	r3, [pc, #16]	; (801139c <std+0x44>)
 801138a:	6323      	str	r3, [r4, #48]	; 0x30
 801138c:	bd10      	pop	{r4, pc}
 801138e:	bf00      	nop
 8011390:	080116ad 	.word	0x080116ad
 8011394:	080116cf 	.word	0x080116cf
 8011398:	08011707 	.word	0x08011707
 801139c:	0801172b 	.word	0x0801172b

080113a0 <_cleanup_r>:
 80113a0:	4901      	ldr	r1, [pc, #4]	; (80113a8 <_cleanup_r+0x8>)
 80113a2:	f000 b8af 	b.w	8011504 <_fwalk_reent>
 80113a6:	bf00      	nop
 80113a8:	080112e1 	.word	0x080112e1

080113ac <__sfmoreglue>:
 80113ac:	2268      	movs	r2, #104	; 0x68
 80113ae:	b570      	push	{r4, r5, r6, lr}
 80113b0:	1e4d      	subs	r5, r1, #1
 80113b2:	4355      	muls	r5, r2
 80113b4:	460e      	mov	r6, r1
 80113b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80113ba:	f7ff fa77 	bl	80108ac <_malloc_r>
 80113be:	4604      	mov	r4, r0
 80113c0:	b140      	cbz	r0, 80113d4 <__sfmoreglue+0x28>
 80113c2:	2100      	movs	r1, #0
 80113c4:	e9c0 1600 	strd	r1, r6, [r0]
 80113c8:	300c      	adds	r0, #12
 80113ca:	60a0      	str	r0, [r4, #8]
 80113cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113d0:	f7fc f856 	bl	800d480 <memset>
 80113d4:	4620      	mov	r0, r4
 80113d6:	bd70      	pop	{r4, r5, r6, pc}

080113d8 <__sfp_lock_acquire>:
 80113d8:	4801      	ldr	r0, [pc, #4]	; (80113e0 <__sfp_lock_acquire+0x8>)
 80113da:	f000 b8b3 	b.w	8011544 <__retarget_lock_acquire_recursive>
 80113de:	bf00      	nop
 80113e0:	20001c0d 	.word	0x20001c0d

080113e4 <__sfp_lock_release>:
 80113e4:	4801      	ldr	r0, [pc, #4]	; (80113ec <__sfp_lock_release+0x8>)
 80113e6:	f000 b8ae 	b.w	8011546 <__retarget_lock_release_recursive>
 80113ea:	bf00      	nop
 80113ec:	20001c0d 	.word	0x20001c0d

080113f0 <__sinit_lock_acquire>:
 80113f0:	4801      	ldr	r0, [pc, #4]	; (80113f8 <__sinit_lock_acquire+0x8>)
 80113f2:	f000 b8a7 	b.w	8011544 <__retarget_lock_acquire_recursive>
 80113f6:	bf00      	nop
 80113f8:	20001c0e 	.word	0x20001c0e

080113fc <__sinit_lock_release>:
 80113fc:	4801      	ldr	r0, [pc, #4]	; (8011404 <__sinit_lock_release+0x8>)
 80113fe:	f000 b8a2 	b.w	8011546 <__retarget_lock_release_recursive>
 8011402:	bf00      	nop
 8011404:	20001c0e 	.word	0x20001c0e

08011408 <__sinit>:
 8011408:	b510      	push	{r4, lr}
 801140a:	4604      	mov	r4, r0
 801140c:	f7ff fff0 	bl	80113f0 <__sinit_lock_acquire>
 8011410:	69a3      	ldr	r3, [r4, #24]
 8011412:	b11b      	cbz	r3, 801141c <__sinit+0x14>
 8011414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011418:	f7ff bff0 	b.w	80113fc <__sinit_lock_release>
 801141c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011420:	6523      	str	r3, [r4, #80]	; 0x50
 8011422:	4b13      	ldr	r3, [pc, #76]	; (8011470 <__sinit+0x68>)
 8011424:	4a13      	ldr	r2, [pc, #76]	; (8011474 <__sinit+0x6c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	62a2      	str	r2, [r4, #40]	; 0x28
 801142a:	42a3      	cmp	r3, r4
 801142c:	bf08      	it	eq
 801142e:	2301      	moveq	r3, #1
 8011430:	4620      	mov	r0, r4
 8011432:	bf08      	it	eq
 8011434:	61a3      	streq	r3, [r4, #24]
 8011436:	f000 f81f 	bl	8011478 <__sfp>
 801143a:	6060      	str	r0, [r4, #4]
 801143c:	4620      	mov	r0, r4
 801143e:	f000 f81b 	bl	8011478 <__sfp>
 8011442:	60a0      	str	r0, [r4, #8]
 8011444:	4620      	mov	r0, r4
 8011446:	f000 f817 	bl	8011478 <__sfp>
 801144a:	2200      	movs	r2, #0
 801144c:	2104      	movs	r1, #4
 801144e:	60e0      	str	r0, [r4, #12]
 8011450:	6860      	ldr	r0, [r4, #4]
 8011452:	f7ff ff81 	bl	8011358 <std>
 8011456:	2201      	movs	r2, #1
 8011458:	2109      	movs	r1, #9
 801145a:	68a0      	ldr	r0, [r4, #8]
 801145c:	f7ff ff7c 	bl	8011358 <std>
 8011460:	2202      	movs	r2, #2
 8011462:	2112      	movs	r1, #18
 8011464:	68e0      	ldr	r0, [r4, #12]
 8011466:	f7ff ff77 	bl	8011358 <std>
 801146a:	2301      	movs	r3, #1
 801146c:	61a3      	str	r3, [r4, #24]
 801146e:	e7d1      	b.n	8011414 <__sinit+0xc>
 8011470:	08011b6c 	.word	0x08011b6c
 8011474:	080113a1 	.word	0x080113a1

08011478 <__sfp>:
 8011478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801147a:	4607      	mov	r7, r0
 801147c:	f7ff ffac 	bl	80113d8 <__sfp_lock_acquire>
 8011480:	4b1e      	ldr	r3, [pc, #120]	; (80114fc <__sfp+0x84>)
 8011482:	681e      	ldr	r6, [r3, #0]
 8011484:	69b3      	ldr	r3, [r6, #24]
 8011486:	b913      	cbnz	r3, 801148e <__sfp+0x16>
 8011488:	4630      	mov	r0, r6
 801148a:	f7ff ffbd 	bl	8011408 <__sinit>
 801148e:	3648      	adds	r6, #72	; 0x48
 8011490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011494:	3b01      	subs	r3, #1
 8011496:	d503      	bpl.n	80114a0 <__sfp+0x28>
 8011498:	6833      	ldr	r3, [r6, #0]
 801149a:	b30b      	cbz	r3, 80114e0 <__sfp+0x68>
 801149c:	6836      	ldr	r6, [r6, #0]
 801149e:	e7f7      	b.n	8011490 <__sfp+0x18>
 80114a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80114a4:	b9d5      	cbnz	r5, 80114dc <__sfp+0x64>
 80114a6:	4b16      	ldr	r3, [pc, #88]	; (8011500 <__sfp+0x88>)
 80114a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80114ac:	60e3      	str	r3, [r4, #12]
 80114ae:	6665      	str	r5, [r4, #100]	; 0x64
 80114b0:	f000 f847 	bl	8011542 <__retarget_lock_init_recursive>
 80114b4:	f7ff ff96 	bl	80113e4 <__sfp_lock_release>
 80114b8:	2208      	movs	r2, #8
 80114ba:	4629      	mov	r1, r5
 80114bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80114c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80114c4:	6025      	str	r5, [r4, #0]
 80114c6:	61a5      	str	r5, [r4, #24]
 80114c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80114cc:	f7fb ffd8 	bl	800d480 <memset>
 80114d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80114d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80114d8:	4620      	mov	r0, r4
 80114da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114dc:	3468      	adds	r4, #104	; 0x68
 80114de:	e7d9      	b.n	8011494 <__sfp+0x1c>
 80114e0:	2104      	movs	r1, #4
 80114e2:	4638      	mov	r0, r7
 80114e4:	f7ff ff62 	bl	80113ac <__sfmoreglue>
 80114e8:	4604      	mov	r4, r0
 80114ea:	6030      	str	r0, [r6, #0]
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d1d5      	bne.n	801149c <__sfp+0x24>
 80114f0:	f7ff ff78 	bl	80113e4 <__sfp_lock_release>
 80114f4:	230c      	movs	r3, #12
 80114f6:	603b      	str	r3, [r7, #0]
 80114f8:	e7ee      	b.n	80114d8 <__sfp+0x60>
 80114fa:	bf00      	nop
 80114fc:	08011b6c 	.word	0x08011b6c
 8011500:	ffff0001 	.word	0xffff0001

08011504 <_fwalk_reent>:
 8011504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011508:	4606      	mov	r6, r0
 801150a:	4688      	mov	r8, r1
 801150c:	2700      	movs	r7, #0
 801150e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011516:	f1b9 0901 	subs.w	r9, r9, #1
 801151a:	d505      	bpl.n	8011528 <_fwalk_reent+0x24>
 801151c:	6824      	ldr	r4, [r4, #0]
 801151e:	2c00      	cmp	r4, #0
 8011520:	d1f7      	bne.n	8011512 <_fwalk_reent+0xe>
 8011522:	4638      	mov	r0, r7
 8011524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011528:	89ab      	ldrh	r3, [r5, #12]
 801152a:	2b01      	cmp	r3, #1
 801152c:	d907      	bls.n	801153e <_fwalk_reent+0x3a>
 801152e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011532:	3301      	adds	r3, #1
 8011534:	d003      	beq.n	801153e <_fwalk_reent+0x3a>
 8011536:	4629      	mov	r1, r5
 8011538:	4630      	mov	r0, r6
 801153a:	47c0      	blx	r8
 801153c:	4307      	orrs	r7, r0
 801153e:	3568      	adds	r5, #104	; 0x68
 8011540:	e7e9      	b.n	8011516 <_fwalk_reent+0x12>

08011542 <__retarget_lock_init_recursive>:
 8011542:	4770      	bx	lr

08011544 <__retarget_lock_acquire_recursive>:
 8011544:	4770      	bx	lr

08011546 <__retarget_lock_release_recursive>:
 8011546:	4770      	bx	lr

08011548 <__swhatbuf_r>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	460e      	mov	r6, r1
 801154c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011550:	4614      	mov	r4, r2
 8011552:	2900      	cmp	r1, #0
 8011554:	461d      	mov	r5, r3
 8011556:	b096      	sub	sp, #88	; 0x58
 8011558:	da08      	bge.n	801156c <__swhatbuf_r+0x24>
 801155a:	2200      	movs	r2, #0
 801155c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011560:	602a      	str	r2, [r5, #0]
 8011562:	061a      	lsls	r2, r3, #24
 8011564:	d410      	bmi.n	8011588 <__swhatbuf_r+0x40>
 8011566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801156a:	e00e      	b.n	801158a <__swhatbuf_r+0x42>
 801156c:	466a      	mov	r2, sp
 801156e:	f000 f903 	bl	8011778 <_fstat_r>
 8011572:	2800      	cmp	r0, #0
 8011574:	dbf1      	blt.n	801155a <__swhatbuf_r+0x12>
 8011576:	9a01      	ldr	r2, [sp, #4]
 8011578:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801157c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011580:	425a      	negs	r2, r3
 8011582:	415a      	adcs	r2, r3
 8011584:	602a      	str	r2, [r5, #0]
 8011586:	e7ee      	b.n	8011566 <__swhatbuf_r+0x1e>
 8011588:	2340      	movs	r3, #64	; 0x40
 801158a:	2000      	movs	r0, #0
 801158c:	6023      	str	r3, [r4, #0]
 801158e:	b016      	add	sp, #88	; 0x58
 8011590:	bd70      	pop	{r4, r5, r6, pc}
	...

08011594 <__smakebuf_r>:
 8011594:	898b      	ldrh	r3, [r1, #12]
 8011596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011598:	079d      	lsls	r5, r3, #30
 801159a:	4606      	mov	r6, r0
 801159c:	460c      	mov	r4, r1
 801159e:	d507      	bpl.n	80115b0 <__smakebuf_r+0x1c>
 80115a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115a4:	6023      	str	r3, [r4, #0]
 80115a6:	6123      	str	r3, [r4, #16]
 80115a8:	2301      	movs	r3, #1
 80115aa:	6163      	str	r3, [r4, #20]
 80115ac:	b002      	add	sp, #8
 80115ae:	bd70      	pop	{r4, r5, r6, pc}
 80115b0:	466a      	mov	r2, sp
 80115b2:	ab01      	add	r3, sp, #4
 80115b4:	f7ff ffc8 	bl	8011548 <__swhatbuf_r>
 80115b8:	9900      	ldr	r1, [sp, #0]
 80115ba:	4605      	mov	r5, r0
 80115bc:	4630      	mov	r0, r6
 80115be:	f7ff f975 	bl	80108ac <_malloc_r>
 80115c2:	b948      	cbnz	r0, 80115d8 <__smakebuf_r+0x44>
 80115c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c8:	059a      	lsls	r2, r3, #22
 80115ca:	d4ef      	bmi.n	80115ac <__smakebuf_r+0x18>
 80115cc:	f023 0303 	bic.w	r3, r3, #3
 80115d0:	f043 0302 	orr.w	r3, r3, #2
 80115d4:	81a3      	strh	r3, [r4, #12]
 80115d6:	e7e3      	b.n	80115a0 <__smakebuf_r+0xc>
 80115d8:	4b0d      	ldr	r3, [pc, #52]	; (8011610 <__smakebuf_r+0x7c>)
 80115da:	62b3      	str	r3, [r6, #40]	; 0x28
 80115dc:	89a3      	ldrh	r3, [r4, #12]
 80115de:	6020      	str	r0, [r4, #0]
 80115e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115e4:	81a3      	strh	r3, [r4, #12]
 80115e6:	9b00      	ldr	r3, [sp, #0]
 80115e8:	6120      	str	r0, [r4, #16]
 80115ea:	6163      	str	r3, [r4, #20]
 80115ec:	9b01      	ldr	r3, [sp, #4]
 80115ee:	b15b      	cbz	r3, 8011608 <__smakebuf_r+0x74>
 80115f0:	4630      	mov	r0, r6
 80115f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115f6:	f000 f8d1 	bl	801179c <_isatty_r>
 80115fa:	b128      	cbz	r0, 8011608 <__smakebuf_r+0x74>
 80115fc:	89a3      	ldrh	r3, [r4, #12]
 80115fe:	f023 0303 	bic.w	r3, r3, #3
 8011602:	f043 0301 	orr.w	r3, r3, #1
 8011606:	81a3      	strh	r3, [r4, #12]
 8011608:	89a0      	ldrh	r0, [r4, #12]
 801160a:	4305      	orrs	r5, r0
 801160c:	81a5      	strh	r5, [r4, #12]
 801160e:	e7cd      	b.n	80115ac <__smakebuf_r+0x18>
 8011610:	080113a1 	.word	0x080113a1

08011614 <_malloc_usable_size_r>:
 8011614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011618:	1f18      	subs	r0, r3, #4
 801161a:	2b00      	cmp	r3, #0
 801161c:	bfbc      	itt	lt
 801161e:	580b      	ldrlt	r3, [r1, r0]
 8011620:	18c0      	addlt	r0, r0, r3
 8011622:	4770      	bx	lr

08011624 <_raise_r>:
 8011624:	291f      	cmp	r1, #31
 8011626:	b538      	push	{r3, r4, r5, lr}
 8011628:	4604      	mov	r4, r0
 801162a:	460d      	mov	r5, r1
 801162c:	d904      	bls.n	8011638 <_raise_r+0x14>
 801162e:	2316      	movs	r3, #22
 8011630:	6003      	str	r3, [r0, #0]
 8011632:	f04f 30ff 	mov.w	r0, #4294967295
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801163a:	b112      	cbz	r2, 8011642 <_raise_r+0x1e>
 801163c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011640:	b94b      	cbnz	r3, 8011656 <_raise_r+0x32>
 8011642:	4620      	mov	r0, r4
 8011644:	f000 f830 	bl	80116a8 <_getpid_r>
 8011648:	462a      	mov	r2, r5
 801164a:	4601      	mov	r1, r0
 801164c:	4620      	mov	r0, r4
 801164e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011652:	f000 b817 	b.w	8011684 <_kill_r>
 8011656:	2b01      	cmp	r3, #1
 8011658:	d00a      	beq.n	8011670 <_raise_r+0x4c>
 801165a:	1c59      	adds	r1, r3, #1
 801165c:	d103      	bne.n	8011666 <_raise_r+0x42>
 801165e:	2316      	movs	r3, #22
 8011660:	6003      	str	r3, [r0, #0]
 8011662:	2001      	movs	r0, #1
 8011664:	e7e7      	b.n	8011636 <_raise_r+0x12>
 8011666:	2400      	movs	r4, #0
 8011668:	4628      	mov	r0, r5
 801166a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801166e:	4798      	blx	r3
 8011670:	2000      	movs	r0, #0
 8011672:	e7e0      	b.n	8011636 <_raise_r+0x12>

08011674 <raise>:
 8011674:	4b02      	ldr	r3, [pc, #8]	; (8011680 <raise+0xc>)
 8011676:	4601      	mov	r1, r0
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	f7ff bfd3 	b.w	8011624 <_raise_r>
 801167e:	bf00      	nop
 8011680:	20000198 	.word	0x20000198

08011684 <_kill_r>:
 8011684:	b538      	push	{r3, r4, r5, lr}
 8011686:	2300      	movs	r3, #0
 8011688:	4d06      	ldr	r5, [pc, #24]	; (80116a4 <_kill_r+0x20>)
 801168a:	4604      	mov	r4, r0
 801168c:	4608      	mov	r0, r1
 801168e:	4611      	mov	r1, r2
 8011690:	602b      	str	r3, [r5, #0]
 8011692:	f7f6 fc5d 	bl	8007f50 <_kill>
 8011696:	1c43      	adds	r3, r0, #1
 8011698:	d102      	bne.n	80116a0 <_kill_r+0x1c>
 801169a:	682b      	ldr	r3, [r5, #0]
 801169c:	b103      	cbz	r3, 80116a0 <_kill_r+0x1c>
 801169e:	6023      	str	r3, [r4, #0]
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop
 80116a4:	20001c08 	.word	0x20001c08

080116a8 <_getpid_r>:
 80116a8:	f7f6 bc50 	b.w	8007f4c <_getpid>

080116ac <__sread>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	460c      	mov	r4, r1
 80116b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116b4:	f000 f894 	bl	80117e0 <_read_r>
 80116b8:	2800      	cmp	r0, #0
 80116ba:	bfab      	itete	ge
 80116bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116be:	89a3      	ldrhlt	r3, [r4, #12]
 80116c0:	181b      	addge	r3, r3, r0
 80116c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116c6:	bfac      	ite	ge
 80116c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80116ca:	81a3      	strhlt	r3, [r4, #12]
 80116cc:	bd10      	pop	{r4, pc}

080116ce <__swrite>:
 80116ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d2:	461f      	mov	r7, r3
 80116d4:	898b      	ldrh	r3, [r1, #12]
 80116d6:	4605      	mov	r5, r0
 80116d8:	05db      	lsls	r3, r3, #23
 80116da:	460c      	mov	r4, r1
 80116dc:	4616      	mov	r6, r2
 80116de:	d505      	bpl.n	80116ec <__swrite+0x1e>
 80116e0:	2302      	movs	r3, #2
 80116e2:	2200      	movs	r2, #0
 80116e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e8:	f000 f868 	bl	80117bc <_lseek_r>
 80116ec:	89a3      	ldrh	r3, [r4, #12]
 80116ee:	4632      	mov	r2, r6
 80116f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116f4:	81a3      	strh	r3, [r4, #12]
 80116f6:	4628      	mov	r0, r5
 80116f8:	463b      	mov	r3, r7
 80116fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011702:	f000 b817 	b.w	8011734 <_write_r>

08011706 <__sseek>:
 8011706:	b510      	push	{r4, lr}
 8011708:	460c      	mov	r4, r1
 801170a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801170e:	f000 f855 	bl	80117bc <_lseek_r>
 8011712:	1c43      	adds	r3, r0, #1
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	bf15      	itete	ne
 8011718:	6560      	strne	r0, [r4, #84]	; 0x54
 801171a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801171e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011722:	81a3      	strheq	r3, [r4, #12]
 8011724:	bf18      	it	ne
 8011726:	81a3      	strhne	r3, [r4, #12]
 8011728:	bd10      	pop	{r4, pc}

0801172a <__sclose>:
 801172a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801172e:	f000 b813 	b.w	8011758 <_close_r>
	...

08011734 <_write_r>:
 8011734:	b538      	push	{r3, r4, r5, lr}
 8011736:	4604      	mov	r4, r0
 8011738:	4608      	mov	r0, r1
 801173a:	4611      	mov	r1, r2
 801173c:	2200      	movs	r2, #0
 801173e:	4d05      	ldr	r5, [pc, #20]	; (8011754 <_write_r+0x20>)
 8011740:	602a      	str	r2, [r5, #0]
 8011742:	461a      	mov	r2, r3
 8011744:	f7f6 fc22 	bl	8007f8c <_write>
 8011748:	1c43      	adds	r3, r0, #1
 801174a:	d102      	bne.n	8011752 <_write_r+0x1e>
 801174c:	682b      	ldr	r3, [r5, #0]
 801174e:	b103      	cbz	r3, 8011752 <_write_r+0x1e>
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	bd38      	pop	{r3, r4, r5, pc}
 8011754:	20001c08 	.word	0x20001c08

08011758 <_close_r>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	2300      	movs	r3, #0
 801175c:	4d05      	ldr	r5, [pc, #20]	; (8011774 <_close_r+0x1c>)
 801175e:	4604      	mov	r4, r0
 8011760:	4608      	mov	r0, r1
 8011762:	602b      	str	r3, [r5, #0]
 8011764:	f7f6 fc20 	bl	8007fa8 <_close>
 8011768:	1c43      	adds	r3, r0, #1
 801176a:	d102      	bne.n	8011772 <_close_r+0x1a>
 801176c:	682b      	ldr	r3, [r5, #0]
 801176e:	b103      	cbz	r3, 8011772 <_close_r+0x1a>
 8011770:	6023      	str	r3, [r4, #0]
 8011772:	bd38      	pop	{r3, r4, r5, pc}
 8011774:	20001c08 	.word	0x20001c08

08011778 <_fstat_r>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	2300      	movs	r3, #0
 801177c:	4d06      	ldr	r5, [pc, #24]	; (8011798 <_fstat_r+0x20>)
 801177e:	4604      	mov	r4, r0
 8011780:	4608      	mov	r0, r1
 8011782:	4611      	mov	r1, r2
 8011784:	602b      	str	r3, [r5, #0]
 8011786:	f7f6 fc13 	bl	8007fb0 <_fstat>
 801178a:	1c43      	adds	r3, r0, #1
 801178c:	d102      	bne.n	8011794 <_fstat_r+0x1c>
 801178e:	682b      	ldr	r3, [r5, #0]
 8011790:	b103      	cbz	r3, 8011794 <_fstat_r+0x1c>
 8011792:	6023      	str	r3, [r4, #0]
 8011794:	bd38      	pop	{r3, r4, r5, pc}
 8011796:	bf00      	nop
 8011798:	20001c08 	.word	0x20001c08

0801179c <_isatty_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	2300      	movs	r3, #0
 80117a0:	4d05      	ldr	r5, [pc, #20]	; (80117b8 <_isatty_r+0x1c>)
 80117a2:	4604      	mov	r4, r0
 80117a4:	4608      	mov	r0, r1
 80117a6:	602b      	str	r3, [r5, #0]
 80117a8:	f7f6 fc08 	bl	8007fbc <_isatty>
 80117ac:	1c43      	adds	r3, r0, #1
 80117ae:	d102      	bne.n	80117b6 <_isatty_r+0x1a>
 80117b0:	682b      	ldr	r3, [r5, #0]
 80117b2:	b103      	cbz	r3, 80117b6 <_isatty_r+0x1a>
 80117b4:	6023      	str	r3, [r4, #0]
 80117b6:	bd38      	pop	{r3, r4, r5, pc}
 80117b8:	20001c08 	.word	0x20001c08

080117bc <_lseek_r>:
 80117bc:	b538      	push	{r3, r4, r5, lr}
 80117be:	4604      	mov	r4, r0
 80117c0:	4608      	mov	r0, r1
 80117c2:	4611      	mov	r1, r2
 80117c4:	2200      	movs	r2, #0
 80117c6:	4d05      	ldr	r5, [pc, #20]	; (80117dc <_lseek_r+0x20>)
 80117c8:	602a      	str	r2, [r5, #0]
 80117ca:	461a      	mov	r2, r3
 80117cc:	f7f6 fbf8 	bl	8007fc0 <_lseek>
 80117d0:	1c43      	adds	r3, r0, #1
 80117d2:	d102      	bne.n	80117da <_lseek_r+0x1e>
 80117d4:	682b      	ldr	r3, [r5, #0]
 80117d6:	b103      	cbz	r3, 80117da <_lseek_r+0x1e>
 80117d8:	6023      	str	r3, [r4, #0]
 80117da:	bd38      	pop	{r3, r4, r5, pc}
 80117dc:	20001c08 	.word	0x20001c08

080117e0 <_read_r>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4604      	mov	r4, r0
 80117e4:	4608      	mov	r0, r1
 80117e6:	4611      	mov	r1, r2
 80117e8:	2200      	movs	r2, #0
 80117ea:	4d05      	ldr	r5, [pc, #20]	; (8011800 <_read_r+0x20>)
 80117ec:	602a      	str	r2, [r5, #0]
 80117ee:	461a      	mov	r2, r3
 80117f0:	f7f6 fbbe 	bl	8007f70 <_read>
 80117f4:	1c43      	adds	r3, r0, #1
 80117f6:	d102      	bne.n	80117fe <_read_r+0x1e>
 80117f8:	682b      	ldr	r3, [r5, #0]
 80117fa:	b103      	cbz	r3, 80117fe <_read_r+0x1e>
 80117fc:	6023      	str	r3, [r4, #0]
 80117fe:	bd38      	pop	{r3, r4, r5, pc}
 8011800:	20001c08 	.word	0x20001c08

08011804 <_init>:
 8011804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011806:	bf00      	nop
 8011808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801180a:	bc08      	pop	{r3}
 801180c:	469e      	mov	lr, r3
 801180e:	4770      	bx	lr

08011810 <_fini>:
 8011810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011812:	bf00      	nop
 8011814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011816:	bc08      	pop	{r3}
 8011818:	469e      	mov	lr, r3
 801181a:	4770      	bx	lr
