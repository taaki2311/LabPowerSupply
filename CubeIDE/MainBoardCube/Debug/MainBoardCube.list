
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115cc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08011710  08011710  00021710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011efc  08011efc  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  08011efc  08011efc  00021efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f04  08011f04  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f04  08011f04  00021f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f08  08011f08  00021f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08011f0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a4  20000368  08012274  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20001c0c  08012274  00031c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c979  00000000  00000000  00030391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005288  00000000  00000000  0005cd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002056b  00000000  00000000  00061f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00082500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006a08  00000000  00000000  00083870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a151  00000000  00000000  0008a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fcb7  00000000  00000000  000a43c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090a56  00000000  00000000  000d4080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164ad6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056b8  00000000  00000000  00164b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000368 	.word	0x20000368
 800015c:	00000000 	.word	0x00000000
 8000160:	080116f4 	.word	0x080116f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000036c 	.word	0x2000036c
 800017c:	080116f4 	.word	0x080116f4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_f2uiz>:
 800118c:	0042      	lsls	r2, r0, #1
 800118e:	d20e      	bcs.n	80011ae <__aeabi_f2uiz+0x22>
 8001190:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001194:	d30b      	bcc.n	80011ae <__aeabi_f2uiz+0x22>
 8001196:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119e:	d409      	bmi.n	80011b4 <__aeabi_f2uiz+0x28>
 80011a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4770      	bx	lr
 80011b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b8:	d101      	bne.n	80011be <__aeabi_f2uiz+0x32>
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	d102      	bne.n	80011c4 <__aeabi_f2uiz+0x38>
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	4770      	bx	lr
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__aeabi_uldivmod>:
 80011cc:	b953      	cbnz	r3, 80011e4 <__aeabi_uldivmod+0x18>
 80011ce:	b94a      	cbnz	r2, 80011e4 <__aeabi_uldivmod+0x18>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	bf08      	it	eq
 80011d4:	2800      	cmpeq	r0, #0
 80011d6:	bf1c      	itt	ne
 80011d8:	f04f 31ff 	movne.w	r1, #4294967295
 80011dc:	f04f 30ff 	movne.w	r0, #4294967295
 80011e0:	f000 b9ae 	b.w	8001540 <__aeabi_idiv0>
 80011e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ec:	f000 f83e 	bl	800126c <__udivmoddi4>
 80011f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <__aeabi_d2lz>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	460c      	mov	r4, r1
 8001202:	2200      	movs	r2, #0
 8001204:	2300      	movs	r3, #0
 8001206:	4628      	mov	r0, r5
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fbef 	bl	80009ec <__aeabi_dcmplt>
 800120e:	b928      	cbnz	r0, 800121c <__aeabi_d2lz+0x20>
 8001210:	4628      	mov	r0, r5
 8001212:	4621      	mov	r1, r4
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b80a 	b.w	8001230 <__aeabi_d2ulz>
 800121c:	4628      	mov	r0, r5
 800121e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001222:	f000 f805 	bl	8001230 <__aeabi_d2ulz>
 8001226:	4240      	negs	r0, r0
 8001228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop

08001230 <__aeabi_d2ulz>:
 8001230:	b5d0      	push	{r4, r6, r7, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__aeabi_d2ulz+0x34>)
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
 800123a:	f7ff f965 	bl	8000508 <__aeabi_dmul>
 800123e:	f7ff fc3b 	bl	8000ab8 <__aeabi_d2uiz>
 8001242:	4604      	mov	r4, r0
 8001244:	f7ff f8e6 	bl	8000414 <__aeabi_ui2d>
 8001248:	2200      	movs	r2, #0
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <__aeabi_d2ulz+0x38>)
 800124c:	f7ff f95c 	bl	8000508 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7fe ff9e 	bl	8000198 <__aeabi_dsub>
 800125c:	f7ff fc2c 	bl	8000ab8 <__aeabi_d2uiz>
 8001260:	4621      	mov	r1, r4
 8001262:	bdd0      	pop	{r4, r6, r7, pc}
 8001264:	3df00000 	.word	0x3df00000
 8001268:	41f00000 	.word	0x41f00000

0800126c <__udivmoddi4>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	9e08      	ldr	r6, [sp, #32]
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	4688      	mov	r8, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d14d      	bne.n	8001318 <__udivmoddi4+0xac>
 800127c:	428a      	cmp	r2, r1
 800127e:	4694      	mov	ip, r2
 8001280:	d968      	bls.n	8001354 <__udivmoddi4+0xe8>
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b152      	cbz	r2, 800129e <__udivmoddi4+0x32>
 8001288:	fa01 f302 	lsl.w	r3, r1, r2
 800128c:	f1c2 0120 	rsb	r1, r2, #32
 8001290:	fa20 f101 	lsr.w	r1, r0, r1
 8001294:	fa0c fc02 	lsl.w	ip, ip, r2
 8001298:	ea41 0803 	orr.w	r8, r1, r3
 800129c:	4094      	lsls	r4, r2
 800129e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012a2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012a6:	fa1f fe8c 	uxth.w	lr, ip
 80012aa:	fb01 8817 	mls	r8, r1, r7, r8
 80012ae:	fb07 f00e 	mul.w	r0, r7, lr
 80012b2:	0c23      	lsrs	r3, r4, #16
 80012b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x66>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f107 35ff 	add.w	r5, r7, #4294967295
 80012c4:	f080 811e 	bcs.w	8001504 <__udivmoddi4+0x298>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	f240 811b 	bls.w	8001504 <__udivmoddi4+0x298>
 80012ce:	3f02      	subs	r7, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1b      	subs	r3, r3, r0
 80012d4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012d8:	fb01 3310 	mls	r3, r1, r0, r3
 80012dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d90a      	bls.n	8001300 <__udivmoddi4+0x94>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f2:	f080 8109 	bcs.w	8001508 <__udivmoddi4+0x29c>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	f240 8106 	bls.w	8001508 <__udivmoddi4+0x29c>
 80012fc:	4464      	add	r4, ip
 80012fe:	3802      	subs	r0, #2
 8001300:	2100      	movs	r1, #0
 8001302:	eba4 040e 	sub.w	r4, r4, lr
 8001306:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa8>
 800130c:	2300      	movs	r3, #0
 800130e:	40d4      	lsrs	r4, r2
 8001310:	e9c6 4300 	strd	r4, r3, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	428b      	cmp	r3, r1
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0xc2>
 800131c:	2e00      	cmp	r6, #0
 800131e:	f000 80ee 	beq.w	80014fe <__udivmoddi4+0x292>
 8001322:	2100      	movs	r1, #0
 8001324:	e9c6 0500 	strd	r0, r5, [r6]
 8001328:	4608      	mov	r0, r1
 800132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132e:	fab3 f183 	clz	r1, r3
 8001332:	2900      	cmp	r1, #0
 8001334:	d14a      	bne.n	80013cc <__udivmoddi4+0x160>
 8001336:	42ab      	cmp	r3, r5
 8001338:	d302      	bcc.n	8001340 <__udivmoddi4+0xd4>
 800133a:	4282      	cmp	r2, r0
 800133c:	f200 80fc 	bhi.w	8001538 <__udivmoddi4+0x2cc>
 8001340:	1a84      	subs	r4, r0, r2
 8001342:	eb65 0303 	sbc.w	r3, r5, r3
 8001346:	2001      	movs	r0, #1
 8001348:	4698      	mov	r8, r3
 800134a:	2e00      	cmp	r6, #0
 800134c:	d0e2      	beq.n	8001314 <__udivmoddi4+0xa8>
 800134e:	e9c6 4800 	strd	r4, r8, [r6]
 8001352:	e7df      	b.n	8001314 <__udivmoddi4+0xa8>
 8001354:	b902      	cbnz	r2, 8001358 <__udivmoddi4+0xec>
 8001356:	deff      	udf	#255	; 0xff
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	2a00      	cmp	r2, #0
 800135e:	f040 8091 	bne.w	8001484 <__udivmoddi4+0x218>
 8001362:	eba1 000c 	sub.w	r0, r1, ip
 8001366:	2101      	movs	r1, #1
 8001368:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136c:	fa1f fe8c 	uxth.w	lr, ip
 8001370:	fbb0 f3f7 	udiv	r3, r0, r7
 8001374:	fb07 0013 	mls	r0, r7, r3, r0
 8001378:	0c25      	lsrs	r5, r4, #16
 800137a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800137e:	fb0e f003 	mul.w	r0, lr, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x12c>
 8001386:	eb1c 0505 	adds.w	r5, ip, r5
 800138a:	f103 38ff 	add.w	r8, r3, #4294967295
 800138e:	d202      	bcs.n	8001396 <__udivmoddi4+0x12a>
 8001390:	42a8      	cmp	r0, r5
 8001392:	f200 80ce 	bhi.w	8001532 <__udivmoddi4+0x2c6>
 8001396:	4643      	mov	r3, r8
 8001398:	1a2d      	subs	r5, r5, r0
 800139a:	fbb5 f0f7 	udiv	r0, r5, r7
 800139e:	fb07 5510 	mls	r5, r7, r0, r5
 80013a2:	fb0e fe00 	mul.w	lr, lr, r0
 80013a6:	b2a4      	uxth	r4, r4
 80013a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013ac:	45a6      	cmp	lr, r4
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x156>
 80013b0:	eb1c 0404 	adds.w	r4, ip, r4
 80013b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x154>
 80013ba:	45a6      	cmp	lr, r4
 80013bc:	f200 80b6 	bhi.w	800152c <__udivmoddi4+0x2c0>
 80013c0:	4628      	mov	r0, r5
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ca:	e79e      	b.n	800130a <__udivmoddi4+0x9e>
 80013cc:	f1c1 0720 	rsb	r7, r1, #32
 80013d0:	408b      	lsls	r3, r1
 80013d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013da:	fa25 fa07 	lsr.w	sl, r5, r7
 80013de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013e2:	fbba f8f9 	udiv	r8, sl, r9
 80013e6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ea:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ee:	408d      	lsls	r5, r1
 80013f0:	fa1f fe8c 	uxth.w	lr, ip
 80013f4:	431d      	orrs	r5, r3
 80013f6:	fa00 f301 	lsl.w	r3, r0, r1
 80013fa:	fb08 f00e 	mul.w	r0, r8, lr
 80013fe:	0c2c      	lsrs	r4, r5, #16
 8001400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001404:	42a0      	cmp	r0, r4
 8001406:	fa02 f201 	lsl.w	r2, r2, r1
 800140a:	d90b      	bls.n	8001424 <__udivmoddi4+0x1b8>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f108 3aff 	add.w	sl, r8, #4294967295
 8001414:	f080 8088 	bcs.w	8001528 <__udivmoddi4+0x2bc>
 8001418:	42a0      	cmp	r0, r4
 800141a:	f240 8085 	bls.w	8001528 <__udivmoddi4+0x2bc>
 800141e:	f1a8 0802 	sub.w	r8, r8, #2
 8001422:	4464      	add	r4, ip
 8001424:	1a24      	subs	r4, r4, r0
 8001426:	fbb4 f0f9 	udiv	r0, r4, r9
 800142a:	fb09 4410 	mls	r4, r9, r0, r4
 800142e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001432:	b2ad      	uxth	r5, r5
 8001434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x1e2>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f100 35ff 	add.w	r5, r0, #4294967295
 8001444:	d26c      	bcs.n	8001520 <__udivmoddi4+0x2b4>
 8001446:	45a6      	cmp	lr, r4
 8001448:	d96a      	bls.n	8001520 <__udivmoddi4+0x2b4>
 800144a:	3802      	subs	r0, #2
 800144c:	4464      	add	r4, ip
 800144e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001452:	fba0 9502 	umull	r9, r5, r0, r2
 8001456:	eba4 040e 	sub.w	r4, r4, lr
 800145a:	42ac      	cmp	r4, r5
 800145c:	46c8      	mov	r8, r9
 800145e:	46ae      	mov	lr, r5
 8001460:	d356      	bcc.n	8001510 <__udivmoddi4+0x2a4>
 8001462:	d053      	beq.n	800150c <__udivmoddi4+0x2a0>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d069      	beq.n	800153c <__udivmoddi4+0x2d0>
 8001468:	ebb3 0208 	subs.w	r2, r3, r8
 800146c:	eb64 040e 	sbc.w	r4, r4, lr
 8001470:	fa22 f301 	lsr.w	r3, r2, r1
 8001474:	fa04 f707 	lsl.w	r7, r4, r7
 8001478:	431f      	orrs	r7, r3
 800147a:	40cc      	lsrs	r4, r1
 800147c:	e9c6 7400 	strd	r7, r4, [r6]
 8001480:	2100      	movs	r1, #0
 8001482:	e747      	b.n	8001314 <__udivmoddi4+0xa8>
 8001484:	fa0c fc02 	lsl.w	ip, ip, r2
 8001488:	f1c2 0120 	rsb	r1, r2, #32
 800148c:	fa25 f301 	lsr.w	r3, r5, r1
 8001490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001494:	fa20 f101 	lsr.w	r1, r0, r1
 8001498:	4095      	lsls	r5, r2
 800149a:	430d      	orrs	r5, r1
 800149c:	fbb3 f1f7 	udiv	r1, r3, r7
 80014a0:	fb07 3311 	mls	r3, r7, r1, r3
 80014a4:	fa1f fe8c 	uxth.w	lr, ip
 80014a8:	0c28      	lsrs	r0, r5, #16
 80014aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014ae:	fb01 f30e 	mul.w	r3, r1, lr
 80014b2:	4283      	cmp	r3, r0
 80014b4:	fa04 f402 	lsl.w	r4, r4, r2
 80014b8:	d908      	bls.n	80014cc <__udivmoddi4+0x260>
 80014ba:	eb1c 0000 	adds.w	r0, ip, r0
 80014be:	f101 38ff 	add.w	r8, r1, #4294967295
 80014c2:	d22f      	bcs.n	8001524 <__udivmoddi4+0x2b8>
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d92d      	bls.n	8001524 <__udivmoddi4+0x2b8>
 80014c8:	3902      	subs	r1, #2
 80014ca:	4460      	add	r0, ip
 80014cc:	1ac0      	subs	r0, r0, r3
 80014ce:	fbb0 f3f7 	udiv	r3, r0, r7
 80014d2:	fb07 0013 	mls	r0, r7, r3, r0
 80014d6:	b2ad      	uxth	r5, r5
 80014d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014dc:	fb03 f00e 	mul.w	r0, r3, lr
 80014e0:	42a8      	cmp	r0, r5
 80014e2:	d908      	bls.n	80014f6 <__udivmoddi4+0x28a>
 80014e4:	eb1c 0505 	adds.w	r5, ip, r5
 80014e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80014ec:	d216      	bcs.n	800151c <__udivmoddi4+0x2b0>
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d914      	bls.n	800151c <__udivmoddi4+0x2b0>
 80014f2:	3b02      	subs	r3, #2
 80014f4:	4465      	add	r5, ip
 80014f6:	1a28      	subs	r0, r5, r0
 80014f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014fc:	e738      	b.n	8001370 <__udivmoddi4+0x104>
 80014fe:	4631      	mov	r1, r6
 8001500:	4630      	mov	r0, r6
 8001502:	e707      	b.n	8001314 <__udivmoddi4+0xa8>
 8001504:	462f      	mov	r7, r5
 8001506:	e6e4      	b.n	80012d2 <__udivmoddi4+0x66>
 8001508:	4618      	mov	r0, r3
 800150a:	e6f9      	b.n	8001300 <__udivmoddi4+0x94>
 800150c:	454b      	cmp	r3, r9
 800150e:	d2a9      	bcs.n	8001464 <__udivmoddi4+0x1f8>
 8001510:	ebb9 0802 	subs.w	r8, r9, r2
 8001514:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001518:	3801      	subs	r0, #1
 800151a:	e7a3      	b.n	8001464 <__udivmoddi4+0x1f8>
 800151c:	4643      	mov	r3, r8
 800151e:	e7ea      	b.n	80014f6 <__udivmoddi4+0x28a>
 8001520:	4628      	mov	r0, r5
 8001522:	e794      	b.n	800144e <__udivmoddi4+0x1e2>
 8001524:	4641      	mov	r1, r8
 8001526:	e7d1      	b.n	80014cc <__udivmoddi4+0x260>
 8001528:	46d0      	mov	r8, sl
 800152a:	e77b      	b.n	8001424 <__udivmoddi4+0x1b8>
 800152c:	4464      	add	r4, ip
 800152e:	3802      	subs	r0, #2
 8001530:	e747      	b.n	80013c2 <__udivmoddi4+0x156>
 8001532:	3b02      	subs	r3, #2
 8001534:	4465      	add	r5, ip
 8001536:	e72f      	b.n	8001398 <__udivmoddi4+0x12c>
 8001538:	4608      	mov	r0, r1
 800153a:	e706      	b.n	800134a <__udivmoddi4+0xde>
 800153c:	4631      	mov	r1, r6
 800153e:	e6e9      	b.n	8001314 <__udivmoddi4+0xa8>

08001540 <__aeabi_idiv0>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001544:	2300      	movs	r3, #0
{
 8001546:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001548:	4c40      	ldr	r4, [pc, #256]	; (800164c <MX_ADC_Init+0x108>)
{
 800154a:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001550:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001554:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001558:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800155c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001564:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800156e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_ADC_Init+0x10c>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001572:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001574:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800157c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800157e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001582:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001584:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001586:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001588:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800158c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800158e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001592:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001594:	f006 fd36 	bl	8008004 <HAL_ADC_Init>
 8001598:	b108      	cbz	r0, 800159e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <MX_ADC_Init+0x58>
  AnalogWDGConfig.HighThreshold = 4095;
 800159e:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015a2:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015a4:	2302      	movs	r3, #2
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <MX_ADC_Init+0x110>)
  AnalogWDGConfig.LowThreshold = 0;
 80015a8:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80015b2:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015b6:	f007 f82b 	bl	8008610 <HAL_ADC_AnalogWDGConfig>
 80015ba:	b108      	cbz	r0, 80015c0 <MX_ADC_Init+0x7c>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <MX_ADC_Init+0x7a>
  sConfig.Channel = ADC_CHANNEL_0;
 80015c0:	2200      	movs	r2, #0
 80015c2:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c4:	4669      	mov	r1, sp
 80015c6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80015cc:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ce:	f006 ff53 	bl	8008478 <HAL_ADC_ConfigChannel>
 80015d2:	b108      	cbz	r0, 80015d8 <MX_ADC_Init+0x94>
 80015d4:	b672      	cpsid	i
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_1;
 80015d8:	2201      	movs	r2, #1
 80015da:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015dc:	4669      	mov	r1, sp
 80015de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80015e0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e4:	f006 ff48 	bl	8008478 <HAL_ADC_ConfigChannel>
 80015e8:	b108      	cbz	r0, 80015ee <MX_ADC_Init+0xaa>
 80015ea:	b672      	cpsid	i
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_2;
 80015ee:	2202      	movs	r2, #2
 80015f0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015fa:	f006 ff3d 	bl	8008478 <HAL_ADC_ConfigChannel>
 80015fe:	b108      	cbz	r0, 8001604 <MX_ADC_Init+0xc0>
 8001600:	b672      	cpsid	i
  while (1)
 8001602:	e7fe      	b.n	8001602 <MX_ADC_Init+0xbe>
  sConfig.Channel = ADC_CHANNEL_3;
 8001604:	2203      	movs	r2, #3
 8001606:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001608:	4669      	mov	r1, sp
 800160a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800160c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001610:	f006 ff32 	bl	8008478 <HAL_ADC_ConfigChannel>
 8001614:	b108      	cbz	r0, 800161a <MX_ADC_Init+0xd6>
 8001616:	b672      	cpsid	i
  while (1)
 8001618:	e7fe      	b.n	8001618 <MX_ADC_Init+0xd4>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800161a:	2211      	movs	r2, #17
 800161c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161e:	4669      	mov	r1, sp
 8001620:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001622:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001626:	f006 ff27 	bl	8008478 <HAL_ADC_ConfigChannel>
 800162a:	b108      	cbz	r0, 8001630 <MX_ADC_Init+0xec>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <MX_ADC_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001630:	2210      	movs	r2, #16
 8001632:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001634:	4669      	mov	r1, sp
 8001636:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001638:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800163c:	f006 ff1c 	bl	8008478 <HAL_ADC_ConfigChannel>
 8001640:	b108      	cbz	r0, 8001646 <MX_ADC_Init+0x102>
 8001642:	b672      	cpsid	i
  while (1)
 8001644:	e7fe      	b.n	8001644 <MX_ADC_Init+0x100>
}
 8001646:	b00a      	add	sp, #40	; 0x28
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	200003f4 	.word	0x200003f4
 8001650:	40012400 	.word	0x40012400
 8001654:	00800200 	.word	0x00800200

08001658 <update_keypad.part.0>:
	else if(num == '.'){
 8001658:	282e      	cmp	r0, #46	; 0x2e
void update_keypad(char num){
 800165a:	b410      	push	{r4}
	else if(num == '.'){
 800165c:	d00f      	beq.n	800167e <update_keypad.part.0+0x26>
	else if(num >= '0' && num <= '9'){
 800165e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8001662:	2b09      	cmp	r3, #9
 8001664:	d809      	bhi.n	800167a <update_keypad.part.0+0x22>
		if(kpenum == V1 || kpenum == V2){
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <update_keypad.part.0+0x1b4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 800166e:	2901      	cmp	r1, #1
 8001670:	d03d      	beq.n	80016ee <update_keypad.part.0+0x96>
		else if(kpenum == A1 || kpenum == A2){
 8001672:	2b02      	cmp	r3, #2
 8001674:	d017      	beq.n	80016a6 <update_keypad.part.0+0x4e>
 8001676:	2b04      	cmp	r3, #4
 8001678:	d015      	beq.n	80016a6 <update_keypad.part.0+0x4e>
}
 800167a:	bc10      	pop	{r4}
 800167c:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800167e:	4a64      	ldr	r2, [pc, #400]	; (8001810 <update_keypad.part.0+0x1b8>)
 8001680:	f992 3000 	ldrsb.w	r3, [r2]
 8001684:	2b01      	cmp	r3, #1
 8001686:	ddf8      	ble.n	800167a <update_keypad.part.0+0x22>
 8001688:	4962      	ldr	r1, [pc, #392]	; (8001814 <update_keypad.part.0+0x1bc>)
 800168a:	780c      	ldrb	r4, [r1, #0]
 800168c:	2c00      	cmp	r4, #0
 800168e:	d1f4      	bne.n	800167a <update_keypad.part.0+0x22>
			keypaditerator--;
 8001690:	3b01      	subs	r3, #1
 8001692:	7013      	strb	r3, [r2, #0]
			keypaddecimal = 1;
 8001694:	2301      	movs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8001696:	4c60      	ldr	r4, [pc, #384]	; (8001818 <update_keypad.part.0+0x1c0>)
			keypaddecimal = 1;
 8001698:	700b      	strb	r3, [r1, #0]
				keypadarr[i-1] = keypadarr[i];
 800169a:	f8d4 2001 	ldr.w	r2, [r4, #1]
			keypadarr[keypadlength-1] = num;
 800169e:	7120      	strb	r0, [r4, #4]
				keypadarr[i-1] = keypadarr[i];
 80016a0:	6022      	str	r2, [r4, #0]
}
 80016a2:	bc10      	pop	{r4}
 80016a4:	4770      	bx	lr
			if(keypaditerator > 3){
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016a8:	f992 3000 	ldrsb.w	r3, [r2]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	dc15      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016b0:	d068      	beq.n	8001784 <update_keypad.part.0+0x12c>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d076      	beq.n	80017a4 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d07f      	beq.n	80017ba <update_keypad.part.0+0x162>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1dd      	bne.n	800167a <update_keypad.part.0+0x22>
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <update_keypad.part.0+0x1c0>)
 80016c0:	7899      	ldrb	r1, [r3, #2]
 80016c2:	292e      	cmp	r1, #46	; 0x2e
 80016c4:	d1d9      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016c6:	785c      	ldrb	r4, [r3, #1]
 80016c8:	7059      	strb	r1, [r3, #1]
 80016ca:	78d9      	ldrb	r1, [r3, #3]
 80016cc:	701c      	strb	r4, [r3, #0]
 80016ce:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80016d0:	21ff      	movs	r1, #255	; 0xff
					keypadarr[i-1] = keypadarr[i];
 80016d2:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 80016d4:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 80016d6:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 80016d8:	70dc      	strb	r4, [r3, #3]
}
 80016da:	e7ce      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016dc:	494e      	ldr	r1, [pc, #312]	; (8001818 <update_keypad.part.0+0x1c0>)
				keypaditerator--;
 80016de:	3b01      	subs	r3, #1
					keypadarr[i-1] = keypadarr[i];
 80016e0:	f8d1 4001 	ldr.w	r4, [r1, #1]
				keypaditerator--;
 80016e4:	7013      	strb	r3, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80016e6:	600c      	str	r4, [r1, #0]
				keypadarr[keypadlength-1] = num;
 80016e8:	7108      	strb	r0, [r1, #4]
}
 80016ea:	bc10      	pop	{r4}
 80016ec:	4770      	bx	lr
			if(keypaditerator > 2){
 80016ee:	4a48      	ldr	r2, [pc, #288]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016f0:	f992 3000 	ldrsb.w	r3, [r2]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dcf1      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016f8:	d023      	beq.n	8001742 <update_keypad.part.0+0xea>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d010      	beq.n	8001720 <update_keypad.part.0+0xc8>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1bb      	bne.n	800167a <update_keypad.part.0+0x22>
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001704:	78d9      	ldrb	r1, [r3, #3]
 8001706:	292e      	cmp	r1, #46	; 0x2e
 8001708:	d1b7      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800170a:	785c      	ldrb	r4, [r3, #1]
 800170c:	701c      	strb	r4, [r3, #0]
 800170e:	789c      	ldrb	r4, [r3, #2]
 8001710:	7099      	strb	r1, [r3, #2]
 8001712:	7919      	ldrb	r1, [r3, #4]
 8001714:	705c      	strb	r4, [r3, #1]
 8001716:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 8001718:	21ff      	movs	r1, #255	; 0xff
				keypadarr[keypadlength-1] = num;
 800171a:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 800171c:	7011      	strb	r1, [r2, #0]
 800171e:	e7ac      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001722:	78d9      	ldrb	r1, [r3, #3]
 8001724:	292e      	cmp	r1, #46	; 0x2e
 8001726:	d05a      	beq.n	80017de <update_keypad.part.0+0x186>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001728:	791c      	ldrb	r4, [r3, #4]
 800172a:	2c2e      	cmp	r4, #46	; 0x2e
 800172c:	d1a5      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800172e:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001730:	2400      	movs	r4, #0
				keypadarr[keypadlength-1] = num;
 8001732:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001734:	7858      	ldrb	r0, [r3, #1]
				keypaditerator--;
 8001736:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001738:	7018      	strb	r0, [r3, #0]
 800173a:	7898      	ldrb	r0, [r3, #2]
 800173c:	7099      	strb	r1, [r3, #2]
 800173e:	7058      	strb	r0, [r3, #1]
				keypaditerator--;
 8001740:	e79b      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001744:	78dc      	ldrb	r4, [r3, #3]
 8001746:	2c2e      	cmp	r4, #46	; 0x2e
 8001748:	d00e      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800174a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800174e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8001752:	d192      	bne.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001754:	7011      	strb	r1, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001756:	7859      	ldrb	r1, [r3, #1]
 8001758:	789a      	ldrb	r2, [r3, #2]
 800175a:	f883 c003 	strb.w	ip, [r3, #3]
				keypadarr[keypadlength-1] = num;
 800175e:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001760:	7019      	strb	r1, [r3, #0]
 8001762:	705a      	strb	r2, [r3, #1]
 8001764:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 8001766:	e788      	b.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001768:	2401      	movs	r4, #1
					keypadarr[i-1] = keypadarr[i];
 800176a:	212e      	movs	r1, #46	; 0x2e
 800176c:	f893 c001 	ldrb.w	ip, [r3, #1]
				keypaditerator--;
 8001770:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001772:	789c      	ldrb	r4, [r3, #2]
 8001774:	791a      	ldrb	r2, [r3, #4]
 8001776:	f883 c000 	strb.w	ip, [r3]
 800177a:	705c      	strb	r4, [r3, #1]
 800177c:	7099      	strb	r1, [r3, #2]
 800177e:	70da      	strb	r2, [r3, #3]
				keypadarr[keypadlength-1] = num;
 8001780:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001782:	e77a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001786:	7919      	ldrb	r1, [r3, #4]
 8001788:	292e      	cmp	r1, #46	; 0x2e
 800178a:	f47f af76 	bne.w	800167a <update_keypad.part.0+0x22>
				keypadarr[keypadlength-1] = num;
 800178e:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001790:	2002      	movs	r0, #2
					keypadarr[i-1] = keypadarr[i];
 8001792:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 8001794:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001796:	701c      	strb	r4, [r3, #0]
 8001798:	789c      	ldrb	r4, [r3, #2]
 800179a:	705c      	strb	r4, [r3, #1]
 800179c:	78dc      	ldrb	r4, [r3, #3]
 800179e:	70d9      	strb	r1, [r3, #3]
 80017a0:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 80017a2:	e76a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017a6:	78d9      	ldrb	r1, [r3, #3]
 80017a8:	292e      	cmp	r1, #46	; 0x2e
 80017aa:	d0dd      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80017ac:	791c      	ldrb	r4, [r3, #4]
 80017ae:	2c2e      	cmp	r4, #46	; 0x2e
 80017b0:	f47f af63 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017b4:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 80017b6:	2401      	movs	r4, #1
 80017b8:	e7bb      	b.n	8001732 <update_keypad.part.0+0xda>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017bc:	7899      	ldrb	r1, [r3, #2]
 80017be:	292e      	cmp	r1, #46	; 0x2e
 80017c0:	d018      	beq.n	80017f4 <update_keypad.part.0+0x19c>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80017c2:	78dc      	ldrb	r4, [r3, #3]
 80017c4:	2c2e      	cmp	r4, #46	; 0x2e
 80017c6:	f47f af58 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017ca:	709c      	strb	r4, [r3, #2]
 80017cc:	791c      	ldrb	r4, [r3, #4]
				keypadarr[keypadlength-1] = num;
 80017ce:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017d0:	2000      	movs	r0, #0
					keypadarr[i-1] = keypadarr[i];
 80017d2:	70dc      	strb	r4, [r3, #3]
 80017d4:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 80017d6:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80017d8:	7059      	strb	r1, [r3, #1]
 80017da:	701c      	strb	r4, [r3, #0]
				keypaditerator--;
 80017dc:	e74d      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017de:	785c      	ldrb	r4, [r3, #1]
 80017e0:	701c      	strb	r4, [r3, #0]
 80017e2:	789c      	ldrb	r4, [r3, #2]
 80017e4:	7099      	strb	r1, [r3, #2]
 80017e6:	7919      	ldrb	r1, [r3, #4]
 80017e8:	705c      	strb	r4, [r3, #1]
 80017ea:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 80017ec:	2100      	movs	r1, #0
				keypadarr[keypadlength-1] = num;
 80017ee:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017f0:	7011      	strb	r1, [r2, #0]
 80017f2:	e742      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017f4:	785c      	ldrb	r4, [r3, #1]
 80017f6:	7059      	strb	r1, [r3, #1]
 80017f8:	78d9      	ldrb	r1, [r3, #3]
 80017fa:	701c      	strb	r4, [r3, #0]
 80017fc:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80017fe:	2100      	movs	r1, #0
					keypadarr[i-1] = keypadarr[i];
 8001800:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 8001802:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 8001804:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001806:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001808:	e737      	b.n	800167a <update_keypad.part.0+0x22>
 800180a:	bf00      	nop
 800180c:	20000749 	.word	0x20000749
 8001810:	2000000d 	.word	0x2000000d
 8001814:	20000748 	.word	0x20000748
 8001818:	20000008 	.word	0x20000008

0800181c <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <update_keypad.constprop.0+0x40>)
 800181e:	f992 3000 	ldrsb.w	r3, [r2]
 8001822:	2b03      	cmp	r3, #3
 8001824:	dc13      	bgt.n	800184e <update_keypad.constprop.0+0x32>
			if(keypadarr[4] == '.'){
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <update_keypad.constprop.0+0x44>)
 8001828:	7908      	ldrb	r0, [r1, #4]
 800182a:	282e      	cmp	r0, #46	; 0x2e
 800182c:	d010      	beq.n	8001850 <update_keypad.constprop.0+0x34>
			keypadarr[0] = num;
 800182e:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8001830:	f891 c003 	ldrb.w	ip, [r1, #3]
			keypaditerator++;
 8001834:	3301      	adds	r3, #1
 8001836:	7013      	strb	r3, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8001838:	f881 c004 	strb.w	ip, [r1, #4]
 800183c:	784a      	ldrb	r2, [r1, #1]
 800183e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8001842:	780b      	ldrb	r3, [r1, #0]
 8001844:	f881 c003 	strb.w	ip, [r1, #3]
 8001848:	708a      	strb	r2, [r1, #2]
 800184a:	704b      	strb	r3, [r1, #1]
			keypadarr[0] = num;
 800184c:	7008      	strb	r0, [r1, #0]
}
 800184e:	4770      	bx	lr
				keypaddecimal = 0;
 8001850:	f04f 0c00 	mov.w	ip, #0
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <update_keypad.constprop.0+0x48>)
 8001856:	f880 c000 	strb.w	ip, [r0]
 800185a:	e7e8      	b.n	800182e <update_keypad.constprop.0+0x12>
 800185c:	2000000d 	.word	0x2000000d
 8001860:	20000008 	.word	0x20000008
 8001864:	20000748 	.word	0x20000748

08001868 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001868:	2300      	movs	r3, #0
{
 800186a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001872:	2403      	movs	r4, #3
 8001874:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001876:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001880:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001884:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001888:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800188e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001892:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001896:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800189a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018ba:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f008 fd94 	bl	800a3f0 <HAL_RCC_OscConfig>
 80018c8:	b108      	cbz	r0, 80018ce <SystemClock_Config+0x66>
 80018ca:	b672      	cpsid	i
  while (1)
 80018cc:	e7fe      	b.n	80018cc <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ce:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	240f      	movs	r4, #15
 80018d2:	2503      	movs	r5, #3
 80018d4:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018da:	4631      	mov	r1, r6
 80018dc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	e9cd 4500 	strd	r4, r5, [sp]
 80018e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e6:	f008 ffe3 	bl	800a8b0 <HAL_RCC_ClockConfig>
 80018ea:	b108      	cbz	r0, 80018f0 <SystemClock_Config+0x88>
 80018ec:	b672      	cpsid	i
  while (1)
 80018ee:	e7fe      	b.n	80018ee <SystemClock_Config+0x86>
}
 80018f0:	b014      	add	sp, #80	; 0x50
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <EXTI1_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80018fc:	2207      	movs	r2, #7
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <EXTI1_IRQHandler+0x68>)
{
 8001900:	b530      	push	{r4, r5, lr}
	int8_t tempiter = headiter;
 8001902:	4d19      	ldr	r5, [pc, #100]	; (8001968 <EXTI1_IRQHandler+0x6c>)
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001904:	615a      	str	r2, [r3, #20]
	int8_t tempiter = headiter;
 8001906:	f995 c000 	ldrsb.w	ip, [r5]
	if(tempiter != tailiter){
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <EXTI1_IRQHandler+0x70>)
	tempiter++;
 800190c:	f10c 0e01 	add.w	lr, ip, #1
 8001910:	fa4f fe8e 	sxtb.w	lr, lr
	if(tempiter >= CIRCSIZE){
 8001914:	4596      	cmp	lr, r2
	if(tempiter != tailiter){
 8001916:	f993 3000 	ldrsb.w	r3, [r3]
	if(tempiter >= CIRCSIZE){
 800191a:	dc06      	bgt.n	800192a <EXTI1_IRQHandler+0x2e>
	if(tempiter != tailiter){
 800191c:	4573      	cmp	r3, lr
 800191e:	d01a      	beq.n	8001956 <EXTI1_IRQHandler+0x5a>
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001922:	4c14      	ldr	r4, [pc, #80]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001924:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001928:	e006      	b.n	8001938 <EXTI1_IRQHandler+0x3c>
	if(tempiter != tailiter){
 800192a:	b1a3      	cbz	r3, 8001956 <EXTI1_IRQHandler+0x5a>
			headiter = 0;
 800192c:	f04f 0e00 	mov.w	lr, #0
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001932:	4c10      	ldr	r4, [pc, #64]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001934:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800194a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		headiter++;
 8001952:	f885 e000 	strb.w	lr, [r5]
	memset (usbbuffer, '\0', 64); // clear the buffer
 8001956:	2240      	movs	r2, #64	; 0x40
}
 8001958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memset (usbbuffer, '\0', 64); // clear the buffer
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001960:	f00b bd08 	b.w	800d374 <memset>
 8001964:	40010400 	.word	0x40010400
 8001968:	20000004 	.word	0x20000004
 800196c:	200009a4 	.word	0x200009a4
 8001970:	20000754 	.word	0x20000754
 8001974:	20000a28 	.word	0x20000a28

08001978 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001978:	b538      	push	{r3, r4, r5, lr}
	if(val == 0.0){
 800197a:	2100      	movs	r1, #0
void update_ADC_watchdog(float val){
 800197c:	4604      	mov	r4, r0
	if(val == 0.0){
 800197e:	f7ff fbad 	bl	80010dc <__aeabi_fcmpeq>
 8001982:	bb28      	cbnz	r0, 80019d0 <update_ADC_watchdog+0x58>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001984:	4620      	mov	r0, r4
 8001986:	491c      	ldr	r1, [pc, #112]	; (80019f8 <update_ADC_watchdog+0x80>)
 8001988:	f7ff fa14 	bl	8000db4 <__aeabi_fmul>
 800198c:	491b      	ldr	r1, [pc, #108]	; (80019fc <update_ADC_watchdog+0x84>)
 800198e:	f7ff fa11 	bl	8000db4 <__aeabi_fmul>
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <update_ADC_watchdog+0x88>)
 8001994:	f7ff fa0e 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <update_ADC_watchdog+0x8c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800199a:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800199c:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800199e:	8818      	ldrh	r0, [r3, #0]
 80019a0:	f7ff f9b0 	bl	8000d04 <__aeabi_ui2f>
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <update_ADC_watchdog+0x90>)
 80019a6:	4605      	mov	r5, r0
 80019a8:	8918      	ldrh	r0, [r3, #8]
 80019aa:	f7ff f9ab 	bl	8000d04 <__aeabi_ui2f>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fab3 	bl	8000f1c <__aeabi_fdiv>
 80019b6:	4915      	ldr	r1, [pc, #84]	; (8001a0c <update_ADC_watchdog+0x94>)
 80019b8:	f7ff f9fc 	bl	8000db4 <__aeabi_fmul>
 80019bc:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff faac 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <update_ADC_watchdog+0x88>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019c6:	4605      	mov	r5, r0
	else if(amp >= 4095.0){
 80019c8:	f7ff fba6 	bl	8001118 <__aeabi_fcmpge>
 80019cc:	4604      	mov	r4, r0
 80019ce:	b120      	cbz	r0, 80019da <update_ADC_watchdog+0x62>
		ADC1->HTR = 4095;
 80019d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
	else if(amp < 0.0){
 80019da:	4628      	mov	r0, r5
 80019dc:	2100      	movs	r1, #0
 80019de:	f7ff fb87 	bl	80010f0 <__aeabi_fcmplt>
 80019e2:	b928      	cbnz	r0, 80019f0 <update_ADC_watchdog+0x78>
		ADC1->HTR = amp;
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff fbd1 	bl	800118c <__aeabi_f2uiz>
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019ec:	6298      	str	r0, [r3, #40]	; 0x28
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
		ADC1->HTR = 0;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019f2:	629c      	str	r4, [r3, #40]	; 0x28
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop
 80019f8:	3e19999a 	.word	0x3e19999a
 80019fc:	41a00000 	.word	0x41a00000
 8001a00:	457ff000 	.word	0x457ff000
 8001a04:	20000014 	.word	0x20000014
 8001a08:	200003d0 	.word	0x200003d0
 8001a0c:	40400000 	.word	0x40400000
 8001a10:	40012400 	.word	0x40012400

08001a14 <lcd_createChar>:
{
 8001a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a18:	2564      	movs	r5, #100	; 0x64
 8001a1a:	482d      	ldr	r0, [pc, #180]	; (8001ad0 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a1c:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a1e:	4607      	mov	r7, r0
{
 8001a20:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a22:	2304      	movs	r3, #4
 8001a24:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a26:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a28:	9500      	str	r5, [sp, #0]
 8001a2a:	214e      	movs	r1, #78	; 0x4e
 8001a2c:	f007 fbec 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f006 fad5 	bl	8007fe0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a38:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a3a:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	2304      	movs	r3, #4
 8001a40:	4c26      	ldr	r4, [pc, #152]	; (8001adc <lcd_createChar+0xc8>)
 8001a42:	9500      	str	r5, [sp, #0]
 8001a44:	aa03      	add	r2, sp, #12
 8001a46:	f007 fbdf 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001a50:	f006 fac6 	bl	8007fe0 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a54:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001a56:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001a5c:	fa02 f103 	lsl.w	r1, r2, r3
 8001a60:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001a62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a66:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a6a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a6e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a72:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a76:	aa03      	add	r2, sp, #12
 8001a78:	214e      	movs	r1, #78	; 0x4e
 8001a7a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a7c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a80:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a84:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a88:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	f007 fbbc 	bl	8009208 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f006 faa5 	bl	8007fe0 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 8001a96:	42a6      	cmp	r6, r4
 8001a98:	d1dc      	bne.n	8001a54 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a9a:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a9c:	aa03      	add	r2, sp, #12
 8001a9e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001aa0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa2:	9500      	str	r5, [sp, #0]
 8001aa4:	214e      	movs	r1, #78	; 0x4e
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <lcd_createChar+0xbc>)
 8001aa8:	f007 fbae 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f006 fa97 	bl	8007fe0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab8:	214e      	movs	r1, #78	; 0x4e
 8001aba:	aa03      	add	r2, sp, #12
 8001abc:	9500      	str	r5, [sp, #0]
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <lcd_createChar+0xbc>)
 8001ac0:	f007 fba2 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
}
 8001ac6:	b005      	add	sp, #20
 8001ac8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8001acc:	f006 ba88 	b.w	8007fe0 <HAL_Delay>
 8001ad0:	20000530 	.word	0x20000530
 8001ad4:	080c484c 	.word	0x080c484c
 8001ad8:	080c080c 	.word	0x080c080c
 8001adc:	08011997 	.word	0x08011997
 8001ae0:	282c080c 	.word	0x282c080c

08001ae4 <lcd_init>:
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
{
 8001ae8:	b085      	sub	sp, #20
	HAL_Delay(100);
 8001aea:	f006 fa79 	bl	8007fe0 <HAL_Delay>
 8001aee:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001af2:	4f2e      	ldr	r7, [pc, #184]	; (8001bac <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af4:	4e2e      	ldr	r6, [pc, #184]	; (8001bb0 <lcd_init+0xcc>)
 8001af6:	2304      	movs	r3, #4
 8001af8:	214e      	movs	r1, #78	; 0x4e
 8001afa:	aa03      	add	r2, sp, #12
 8001afc:	4630      	mov	r0, r6
 8001afe:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b00:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b02:	f007 fb81 	bl	8009208 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 8001b06:	202d      	movs	r0, #45	; 0x2d
 8001b08:	f006 fa6a 	bl	8007fe0 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001b12:	d1f0      	bne.n	8001af6 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001b14:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b18:	2304      	movs	r3, #4
 8001b1a:	aa03      	add	r2, sp, #12
 8001b1c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b20:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <lcd_init+0xcc>)
 8001b22:	214e      	movs	r1, #78	; 0x4e
 8001b24:	f007 fb70 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f006 fa59 	bl	8007fe0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b30:	2304      	movs	r3, #4
 8001b32:	214e      	movs	r1, #78	; 0x4e
 8001b34:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b36:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b38:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <lcd_init+0xcc>)
 8001b3a:	aa03      	add	r2, sp, #12
 8001b3c:	f007 fb64 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f006 fa4d 	bl	8007fe0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b48:	2304      	movs	r3, #4
 8001b4a:	214e      	movs	r1, #78	; 0x4e
 8001b4c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b4e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b50:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <lcd_init+0xcc>)
 8001b52:	aa03      	add	r2, sp, #12
 8001b54:	f007 fb58 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f006 fa41 	bl	8007fe0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b60:	2304      	movs	r3, #4
 8001b62:	214e      	movs	r1, #78	; 0x4e
 8001b64:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b66:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <lcd_init+0xcc>)
 8001b6a:	aa03      	add	r2, sp, #12
 8001b6c:	f007 fb4c 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f006 fa35 	bl	8007fe0 <HAL_Delay>
	lcd_createChar();
 8001b76:	f7ff ff4d 	bl	8001a14 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b7c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b80:	2304      	movs	r3, #4
 8001b82:	214e      	movs	r1, #78	; 0x4e
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <lcd_init+0xcc>)
 8001b86:	aa03      	add	r2, sp, #12
 8001b88:	f007 fb3e 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b8e:	4e0e      	ldr	r6, [pc, #56]	; (8001bc8 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b90:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <lcd_init+0xcc>)
 8001b92:	2304      	movs	r3, #4
 8001b94:	214e      	movs	r1, #78	; 0x4e
 8001b96:	4628      	mov	r0, r5
 8001b98:	aa03      	add	r2, sp, #12
 8001b9a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b9c:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b9e:	f007 fb33 	bl	8009208 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 8001ba2:	3c01      	subs	r4, #1
 8001ba4:	d1f5      	bne.n	8001b92 <lcd_init+0xae>
}
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	383c080c 	.word	0x383c080c
 8001bb0:	20000530 	.word	0x20000530
 8001bb4:	282c080c 	.word	0x282c080c
 8001bb8:	888c282c 	.word	0x888c282c
 8001bbc:	c8cc080c 	.word	0xc8cc080c
 8001bc0:	080c888c 	.word	0x080c888c
 8001bc4:	080c080c 	.word	0x080c080c
 8001bc8:	090d292d 	.word	0x090d292d

08001bcc <ourInit>:
void ourInit(void){
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd0:	2201      	movs	r2, #1
void ourInit(void){
 8001bd2:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	486c      	ldr	r0, [pc, #432]	; (8001d88 <ourInit+0x1bc>)
 8001bd8:	f007 fa34 	bl	8009044 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001bdc:	486b      	ldr	r0, [pc, #428]	; (8001d8c <ourInit+0x1c0>)
 8001bde:	f006 fae1 	bl	80081a4 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001be2:	486b      	ldr	r0, [pc, #428]	; (8001d90 <ourInit+0x1c4>)
 8001be4:	f006 ff30 	bl	8008a48 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bea:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <ourInit+0x1c8>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bec:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bee:	69d9      	ldr	r1, [r3, #28]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf0:	2564      	movs	r5, #100	; 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001bf6:	61d9      	str	r1, [r3, #28]
 8001bf8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfa:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c00:	9307      	str	r3, [sp, #28]
 8001c02:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c04:	f006 fdea 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f006 fe25 	bl	8008858 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	200e      	movs	r0, #14
 8001c12:	4611      	mov	r1, r2
 8001c14:	f006 fde2 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c18:	200e      	movs	r0, #14
 8001c1a:	f006 fe1d 	bl	8008858 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	200f      	movs	r0, #15
 8001c22:	4611      	mov	r1, r2
 8001c24:	f006 fdda 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f006 fe15 	bl	8008858 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001c2e:	f7ff fc89 	bl	8001544 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001c32:	2206      	movs	r2, #6
 8001c34:	4958      	ldr	r1, [pc, #352]	; (8001d98 <ourInit+0x1cc>)
 8001c36:	4855      	ldr	r0, [pc, #340]	; (8001d8c <ourInit+0x1c0>)
 8001c38:	f006 fd5e 	bl	80086f8 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4857      	ldr	r0, [pc, #348]	; (8001d9c <ourInit+0x1d0>)
 8001c40:	f006 fe5a 	bl	80088f8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c44:	2110      	movs	r1, #16
 8001c46:	4855      	ldr	r0, [pc, #340]	; (8001d9c <ourInit+0x1d0>)
 8001c48:	f006 fe56 	bl	80088f8 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4853      	ldr	r0, [pc, #332]	; (8001d9c <ourInit+0x1d0>)
 8001c50:	461a      	mov	r2, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	f006 fe80 	bl	8008958 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	484f      	ldr	r0, [pc, #316]	; (8001d9c <ourInit+0x1d0>)
 8001c60:	f006 fe7a 	bl	8008958 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	4a4e      	ldr	r2, [pc, #312]	; (8001da0 <ourInit+0x1d4>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c68:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001c6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c6e:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c70:	484c      	ldr	r0, [pc, #304]	; (8001da4 <ourInit+0x1d8>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c72:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c74:	f006 fffe 	bl	8008c74 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2007      	movs	r0, #7
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	f006 fdad 	bl	80087dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c82:	2007      	movs	r0, #7
 8001c84:	f006 fde8 	bl	8008858 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c8e:	4846      	ldr	r0, [pc, #280]	; (8001da8 <ourInit+0x1dc>)
 8001c90:	f007 f9d8 	bl	8009044 <HAL_GPIO_WritePin>
	memset (usbbuffer, '\0', 64);  // clear the buffer
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	2100      	movs	r1, #0
 8001c98:	4844      	ldr	r0, [pc, #272]	; (8001dac <ourInit+0x1e0>)
 8001c9a:	f00b fb6b 	bl	800d374 <memset>
	memset (MSG, '\0', 64);  // clear the buffer
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4843      	ldr	r0, [pc, #268]	; (8001db0 <ourInit+0x1e4>)
 8001ca4:	f00b fb66 	bl	800d374 <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	2100      	movs	r1, #0
 8001cac:	4841      	ldr	r0, [pc, #260]	; (8001db4 <ourInit+0x1e8>)
 8001cae:	f00b fb61 	bl	800d374 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4840      	ldr	r0, [pc, #256]	; (8001db8 <ourInit+0x1ec>)
 8001cb8:	f00b fb5c 	bl	800d374 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	483e      	ldr	r0, [pc, #248]	; (8001dbc <ourInit+0x1f0>)
 8001cc2:	f00b fb57 	bl	800d374 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	493c      	ldr	r1, [pc, #240]	; (8001dbc <ourInit+0x1f0>)
 8001cca:	483d      	ldr	r0, [pc, #244]	; (8001dc0 <ourInit+0x1f4>)
 8001ccc:	f009 f9f2 	bl	800b0b4 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <ourInit+0x1f8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd2:	4e3d      	ldr	r6, [pc, #244]	; (8001dc8 <ourInit+0x1fc>)
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd4:	681f      	ldr	r7, [r3, #0]
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <ourInit+0x200>)
 8001cd8:	4c3d      	ldr	r4, [pc, #244]	; (8001dd0 <ourInit+0x204>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <ourInit+0x208>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	9304      	str	r3, [sp, #16]
 8001ce4:	f7fe fbb8 	bl	8000458 <__aeabi_f2d>
 8001ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cec:	4638      	mov	r0, r7
 8001cee:	f7fe fbb3 	bl	8000458 <__aeabi_f2d>
 8001cf2:	4a39      	ldr	r2, [pc, #228]	; (8001dd8 <ourInit+0x20c>)
 8001cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <ourInit+0x1e8>)
 8001cfc:	f00b ffa2 	bl	800dc44 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d00:	2240      	movs	r2, #64	; 0x40
 8001d02:	492c      	ldr	r1, [pc, #176]	; (8001db4 <ourInit+0x1e8>)
 8001d04:	482e      	ldr	r0, [pc, #184]	; (8001dc0 <ourInit+0x1f4>)
 8001d06:	f009 f999 	bl	800b03c <HAL_UART_Transmit_DMA>
	lcd_init();
 8001d0a:	f7ff feeb 	bl	8001ae4 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <ourInit+0x210>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d10:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d12:	9308      	str	r3, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d14:	4630      	mov	r0, r6
 8001d16:	2304      	movs	r3, #4
 8001d18:	9500      	str	r5, [sp, #0]
 8001d1a:	aa08      	add	r2, sp, #32
 8001d1c:	f007 fa74 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d20:	2334      	movs	r3, #52	; 0x34
	data_l = ((data<<4)&0xf0);
 8001d22:	011a      	lsls	r2, r3, #4
 8001d24:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d2a:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d2e:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d32:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d36:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	214e      	movs	r1, #78	; 0x4e
 8001d3e:	4630      	mov	r0, r6
 8001d40:	aa08      	add	r2, sp, #32
 8001d42:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d44:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d48:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d4c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d50:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d54:	f007 fa58 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e0      	bne.n	8001d22 <ourInit+0x156>
	HAL_TIM_Base_Start_IT(&htim11);
 8001d60:	481f      	ldr	r0, [pc, #124]	; (8001de0 <ourInit+0x214>)
 8001d62:	f008 ff33 	bl	800abcc <HAL_TIM_Base_Start_IT>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d66:	4c1f      	ldr	r4, [pc, #124]	; (8001de4 <ourInit+0x218>)
 8001d68:	f504 7500 	add.w	r5, r4, #512	; 0x200
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	4620      	mov	r0, r4
 8001d70:	2100      	movs	r1, #0
	for(int i = 0; i < CIRCSIZE; i++){
 8001d72:	4414      	add	r4, r2
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d74:	f00b fafe 	bl	800d374 <memset>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d78:	42a5      	cmp	r5, r4
 8001d7a:	d1f7      	bne.n	8001d6c <ourInit+0x1a0>
	HAL_TIM_Base_Start_IT(&htim4);
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <ourInit+0x21c>)
}
 8001d7e:	b00c      	add	sp, #48	; 0x30
 8001d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_Base_Start_IT(&htim4);
 8001d84:	f008 bf22 	b.w	800abcc <HAL_TIM_Base_Start_IT>
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	200003f4 	.word	0x200003f4
 8001d90:	2000045c 	.word	0x2000045c
 8001d94:	40023800 	.word	0x40023800
 8001d98:	200003c4 	.word	0x200003c4
 8001d9c:	20000448 	.word	0x20000448
 8001da0:	06000001 	.word	0x06000001
 8001da4:	20000528 	.word	0x20000528
 8001da8:	40020800 	.word	0x40020800
 8001dac:	20000a28 	.word	0x20000a28
 8001db0:	20000384 	.word	0x20000384
 8001db4:	200009a8 	.word	0x200009a8
 8001db8:	200009e8 	.word	0x200009e8
 8001dbc:	2000095c 	.word	0x2000095c
 8001dc0:	20000704 	.word	0x20000704
 8001dc4:	20000a6c 	.word	0x20000a6c
 8001dc8:	20000530 	.word	0x20000530
 8001dcc:	200003dc 	.word	0x200003dc
 8001dd0:	08011710 	.word	0x08011710
 8001dd4:	200003e6 	.word	0x200003e6
 8001dd8:	08011728 	.word	0x08011728
 8001ddc:	080cc8cc 	.word	0x080cc8cc
 8001de0:	200005c4 	.word	0x200005c4
 8001de4:	20000754 	.word	0x20000754
 8001de8:	20000684 	.word	0x20000684
 8001dec:	00000000 	.word	0x00000000

08001df0 <main>:
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	2400      	movs	r4, #0
{
 8001df6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001df8:	f006 f8d0 	bl	8007f9c <HAL_Init>
  SystemClock_Config();
 8001dfc:	f7ff fd34 	bl	8001868 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001e08:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	4dae      	ldr	r5, [pc, #696]	; (80020c8 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e12:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	61eb      	str	r3, [r5, #28]
 8001e1a:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e1c:	48ab      	ldr	r0, [pc, #684]	; (80020cc <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	9307      	str	r3, [sp, #28]
 8001e24:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	4692      	mov	sl, r2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	61eb      	str	r3, [r5, #28]
 8001e30:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e32:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	9308      	str	r3, [sp, #32]
 8001e3c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e40:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61eb      	str	r3, [r5, #28]
 8001e48:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001e4a:	4fa1      	ldr	r7, [pc, #644]	; (80020d0 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	69eb      	ldr	r3, [r5, #28]
 8001e54:	4333      	orrs	r3, r6
 8001e56:	61eb      	str	r3, [r5, #28]
 8001e58:	69eb      	ldr	r3, [r5, #28]
 8001e5a:	4033      	ands	r3, r6
 8001e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8001e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e60:	69eb      	ldr	r3, [r5, #28]
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	61eb      	str	r3, [r5, #28]
 8001e68:	69eb      	ldr	r3, [r5, #28]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e72:	f007 f8e7 	bl	8009044 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e76:	4622      	mov	r2, r4
 8001e78:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001e7c:	4895      	ldr	r0, [pc, #596]	; (80020d4 <main+0x2e4>)
 8001e7e:	f007 f8e1 	bl	8009044 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e82:	f64f 420f 	movw	r2, #64527	; 0xfc0f
 8001e86:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	4892      	ldr	r0, [pc, #584]	; (80020d4 <main+0x2e4>)
 8001e8a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e90:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f006 ff55 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	488c      	ldr	r0, [pc, #560]	; (80020cc <main+0x2dc>)
 8001e9c:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e9e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001ea2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f006 ff4b 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eaa:	f248 1280 	movw	r2, #33152	; 0x8180
 8001eae:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	4886      	ldr	r0, [pc, #536]	; (80020cc <main+0x2dc>)
 8001eb2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eb8:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f006 ff41 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ebe:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001ec2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	4883      	ldr	r0, [pc, #524]	; (80020d4 <main+0x2e4>)
 8001ec6:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ec8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001ecc:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f006 ff36 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8001eda:	487f      	ldr	r0, [pc, #508]	; (80020d8 <main+0x2e8>)
 8001edc:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8001ede:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f006 ff2b 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001eea:	2202      	movs	r2, #2
 8001eec:	2300      	movs	r3, #0
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001eee:	487a      	ldr	r0, [pc, #488]	; (80020d8 <main+0x2e8>)
 8001ef0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001ef2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef6:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f006 ff21 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_SW_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin
 8001efe:	f647 4204 	movw	r2, #31748	; 0x7c04
 8001f02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	4874      	ldr	r0, [pc, #464]	; (80020d8 <main+0x2e8>)
 8001f08:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_SW_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin
 8001f0a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f006 ff15 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f16:	f248 3238 	movw	r2, #33592	; 0x8338
 8001f1a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	486e      	ldr	r0, [pc, #440]	; (80020d8 <main+0x2e8>)
 8001f1e:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f24:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f006 ff0b 	bl	8008d40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2204      	movs	r2, #4
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	486b      	ldr	r0, [pc, #428]	; (80020dc <main+0x2ec>)
 8001f30:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f32:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f36:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f006 ff02 	bl	8008d40 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4621      	mov	r1, r4
 8001f40:	2006      	movs	r0, #6
 8001f42:	f006 fc4b 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f46:	2006      	movs	r0, #6
 8001f48:	f006 fc86 	bl	8008858 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	4621      	mov	r1, r4
 8001f50:	2008      	movs	r0, #8
 8001f52:	f006 fc43 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f56:	2008      	movs	r0, #8
 8001f58:	f006 fc7e 	bl	8008858 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4621      	mov	r1, r4
 8001f60:	2028      	movs	r0, #40	; 0x28
 8001f62:	f006 fc3b 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f66:	2028      	movs	r0, #40	; 0x28
 8001f68:	f006 fc76 	bl	8008858 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6c:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f6e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f74:	61eb      	str	r3, [r5, #28]
 8001f76:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f78:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f7e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f80:	9306      	str	r3, [sp, #24]
 8001f82:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f84:	f006 fc2a 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f88:	200b      	movs	r0, #11
 8001f8a:	f006 fc65 	bl	8008858 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4621      	mov	r1, r4
 8001f92:	200e      	movs	r0, #14
 8001f94:	f006 fc22 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f006 fc5d 	bl	8008858 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f006 fc1a 	bl	80087dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fa8:	200f      	movs	r0, #15
 8001faa:	f006 fc55 	bl	8008858 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001fae:	f7ff fac9 	bl	8001544 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <main+0x2f0>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fb4:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hdac.Instance = DAC;
 8001fba:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fbc:	f006 fc86 	bl	80088cc <HAL_DAC_Init>
 8001fc0:	b108      	cbz	r0, 8001fc6 <main+0x1d6>
 8001fc2:	b672      	cpsid	i
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <main+0x1d4>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	a90e      	add	r1, sp, #56	; 0x38
 8001fca:	4638      	mov	r0, r7
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fd0:	f006 fcd8 	bl	8008984 <HAL_DAC_ConfigChannel>
 8001fd4:	b108      	cbz	r0, 8001fda <main+0x1ea>
 8001fd6:	b672      	cpsid	i
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <main+0x1e8>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001fda:	2210      	movs	r2, #16
 8001fdc:	4638      	mov	r0, r7
 8001fde:	a90e      	add	r1, sp, #56	; 0x38
 8001fe0:	f006 fcd0 	bl	8008984 <HAL_DAC_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b108      	cbz	r0, 8001fec <main+0x1fc>
 8001fe8:	b672      	cpsid	i
  while (1)
 8001fea:	e7fe      	b.n	8001fea <main+0x1fa>
  hi2c1.Instance = I2C1;
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <main+0x2f4>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fee:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001ff0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001ffe:	4c3a      	ldr	r4, [pc, #232]	; (80020e8 <main+0x2f8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <main+0x2fc>)
 8002006:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800200a:	f007 f835 	bl	8009078 <HAL_I2C_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	b9b0      	cbnz	r0, 8002040 <main+0x250>
  huart1.Instance = USART1;
 8002012:	4837      	ldr	r0, [pc, #220]	; (80020f0 <main+0x300>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002014:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 800201e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002022:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002028:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202a:	230c      	movs	r3, #12
 800202c:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <main+0x304>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002030:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 8002032:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002034:	f008 ff78 	bl	800af28 <HAL_UART_Init>
 8002038:	4604      	mov	r4, r0
 800203a:	b118      	cbz	r0, 8002044 <main+0x254>
 800203c:	b672      	cpsid	i
  while (1)
 800203e:	e7fe      	b.n	800203e <main+0x24e>
 8002040:	b672      	cpsid	i
 8002042:	e7fe      	b.n	8002042 <main+0x252>
  MX_USB_DEVICE_Init();
 8002044:	f00a feb4 	bl	800cdb0 <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8002048:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim2.Instance = TIM2;
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 20;
 8002050:	2314      	movs	r3, #20
  htim2.Instance = TIM2;
 8002052:	4d29      	ldr	r5, [pc, #164]	; (80020f8 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002054:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002058:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8002068:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 20;
 800206a:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 800206c:	606f      	str	r7, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206e:	f008 fd5d 	bl	800ab2c <HAL_TIM_Base_Init>
 8002072:	b108      	cbz	r0, 8002078 <main+0x288>
 8002074:	b672      	cpsid	i
  while (1)
 8002076:	e7fe      	b.n	8002076 <main+0x286>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002078:	4628      	mov	r0, r5
 800207a:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800207e:	f008 fde7 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 8002082:	b108      	cbz	r0, 8002088 <main+0x298>
 8002084:	b672      	cpsid	i
  while (1)
 8002086:	e7fe      	b.n	8002086 <main+0x296>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002088:	4628      	mov	r0, r5
 800208a:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002090:	f008 ff18 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	b108      	cbz	r0, 800209a <main+0x2aa>
 8002096:	b672      	cpsid	i
  while (1)
 8002098:	e7fe      	b.n	8002098 <main+0x2a8>
  htim3.Init.Period = 500;
 800209a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 800209e:	4c17      	ldr	r4, [pc, #92]	; (80020fc <main+0x30c>)
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80020a6:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020aa:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	e9c4 7001 	strd	r7, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b6:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 80020b8:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 80020ba:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020bc:	f008 fd36 	bl	800ab2c <HAL_TIM_Base_Init>
 80020c0:	b300      	cbz	r0, 8002104 <main+0x314>
 80020c2:	b672      	cpsid	i
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <main+0x2d4>
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	20000448 	.word	0x20000448
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40007400 	.word	0x40007400
 80020e4:	20000530 	.word	0x20000530
 80020e8:	40005400 	.word	0x40005400
 80020ec:	000186a0 	.word	0x000186a0
 80020f0:	20000704 	.word	0x20000704
 80020f4:	40013800 	.word	0x40013800
 80020f8:	20000604 	.word	0x20000604
 80020fc:	20000644 	.word	0x20000644
 8002100:	40000400 	.word	0x40000400
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002104:	4620      	mov	r0, r4
 8002106:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800210a:	f008 fda1 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 800210e:	b108      	cbz	r0, 8002114 <main+0x324>
 8002110:	b672      	cpsid	i
  while (1)
 8002112:	e7fe      	b.n	8002112 <main+0x322>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2600      	movs	r6, #0
 8002116:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	484a      	ldr	r0, [pc, #296]	; (8002244 <main+0x454>)
 800211a:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002120:	f008 fed0 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	b108      	cbz	r0, 800212a <main+0x33a>
 8002126:	b672      	cpsid	i
  while (1)
 8002128:	e7fe      	b.n	8002128 <main+0x338>
  htim11.Init.Prescaler = 32000;
 800212a:	f44f 45fa 	mov.w	r5, #32000	; 0x7d00
  htim11.Init.Period = 100;
 800212e:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 8002130:	4c45      	ldr	r4, [pc, #276]	; (8002248 <main+0x458>)
 8002132:	4b46      	ldr	r3, [pc, #280]	; (800224c <main+0x45c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002134:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002138:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002142:	4620      	mov	r0, r4
  htim11.Init.Period = 100;
 8002144:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = 32000;
 8002146:	6065      	str	r5, [r4, #4]
  htim11.Instance = TIM11;
 8002148:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800214a:	f008 fcef 	bl	800ab2c <HAL_TIM_Base_Init>
 800214e:	b108      	cbz	r0, 8002154 <main+0x364>
 8002150:	b672      	cpsid	i
  while (1)
 8002152:	e7fe      	b.n	8002152 <main+0x362>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002154:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002156:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800215a:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800215e:	f008 fd77 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 8002162:	b108      	cbz	r0, 8002168 <main+0x378>
 8002164:	b672      	cpsid	i
  while (1)
 8002166:	e7fe      	b.n	8002166 <main+0x376>
  htim9.Init.Period = 200;
 8002168:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 800216a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002250 <main+0x460>
 800216e:	4b39      	ldr	r3, [pc, #228]	; (8002254 <main+0x464>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002170:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002174:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	e9c8 5001 	strd	r5, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002180:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002184:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 8002186:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 800218a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800218e:	f008 fccd 	bl	800ab2c <HAL_TIM_Base_Init>
 8002192:	b108      	cbz	r0, 8002198 <main+0x3a8>
 8002194:	b672      	cpsid	i
  while (1)
 8002196:	e7fe      	b.n	8002196 <main+0x3a6>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002198:	4640      	mov	r0, r8
 800219a:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800219e:	f008 fd57 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 80021a2:	b108      	cbz	r0, 80021a8 <main+0x3b8>
 80021a4:	b672      	cpsid	i
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <main+0x3b6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021a8:	4640      	mov	r0, r8
 80021aa:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021b0:	f008 fe88 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	b108      	cbz	r0, 80021ba <main+0x3ca>
 80021b6:	b672      	cpsid	i
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <main+0x3c8>
  htim10.Init.Period = 10;
 80021ba:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 80021bc:	4e26      	ldr	r6, [pc, #152]	; (8002258 <main+0x468>)
 80021be:	4b27      	ldr	r3, [pc, #156]	; (800225c <main+0x46c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c0:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80021c4:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021cc:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d0:	4630      	mov	r0, r6
  htim10.Init.Period = 10;
 80021d2:	60f2      	str	r2, [r6, #12]
  htim10.Instance = TIM10;
 80021d4:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d6:	f008 fca9 	bl	800ab2c <HAL_TIM_Base_Init>
 80021da:	b108      	cbz	r0, 80021e0 <main+0x3f0>
 80021dc:	b672      	cpsid	i
  while (1)
 80021de:	e7fe      	b.n	80021de <main+0x3ee>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e0:	4630      	mov	r0, r6
 80021e2:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e6:	f008 fd33 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 80021ea:	b108      	cbz	r0, 80021f0 <main+0x400>
 80021ec:	b672      	cpsid	i
  while (1)
 80021ee:	e7fe      	b.n	80021ee <main+0x3fe>
  htim4.Init.Period = 2500;
 80021f0:	f640 12c4 	movw	r2, #2500	; 0x9c4
  htim4.Instance = TIM4;
 80021f4:	4e1a      	ldr	r6, [pc, #104]	; (8002260 <main+0x470>)
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <main+0x474>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80021fc:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220c:	4630      	mov	r0, r6
  htim4.Init.Period = 2500;
 800220e:	60f2      	str	r2, [r6, #12]
  htim4.Instance = TIM4;
 8002210:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002212:	f008 fc8b 	bl	800ab2c <HAL_TIM_Base_Init>
 8002216:	b108      	cbz	r0, 800221c <main+0x42c>
 8002218:	b672      	cpsid	i
  while (1)
 800221a:	e7fe      	b.n	800221a <main+0x42a>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800221c:	4630      	mov	r0, r6
 800221e:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002222:	f008 fd15 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 8002226:	b108      	cbz	r0, 800222c <main+0x43c>
 8002228:	b672      	cpsid	i
  while (1)
 800222a:	e7fe      	b.n	800222a <main+0x43a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2200      	movs	r2, #0
 800222e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002230:	480b      	ldr	r0, [pc, #44]	; (8002260 <main+0x470>)
 8002232:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002238:	f008 fe44 	bl	800aec4 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	b1a0      	cbz	r0, 8002268 <main+0x478>
 800223e:	b672      	cpsid	i
  while (1)
 8002240:	e7fe      	b.n	8002240 <main+0x450>
 8002242:	bf00      	nop
 8002244:	20000644 	.word	0x20000644
 8002248:	200005c4 	.word	0x200005c4
 800224c:	40011000 	.word	0x40011000
 8002250:	200006c4 	.word	0x200006c4
 8002254:	40010800 	.word	0x40010800
 8002258:	20000584 	.word	0x20000584
 800225c:	40010c00 	.word	0x40010c00
 8002260:	20000684 	.word	0x20000684
 8002264:	40000800 	.word	0x40000800
  float error_previous = 0;
 8002268:	2400      	movs	r4, #0
 800226a:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 8002538 <main+0x748>
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800226e:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 800253c <main+0x74c>
  float error_previous = 0;
 8002272:	9405      	str	r4, [sp, #20]
  ourInit();
 8002274:	f7ff fcaa 	bl	8001bcc <ourInit>
  float integral = 0;
 8002278:	9404      	str	r4, [sp, #16]
	  tempiter++;
 800227a:	4bb1      	ldr	r3, [pc, #708]	; (8002540 <main+0x750>)
 800227c:	781d      	ldrb	r5, [r3, #0]
	  if(tempiter != headiter){
 800227e:	4bb1      	ldr	r3, [pc, #708]	; (8002544 <main+0x754>)
	  tempiter++;
 8002280:	3501      	adds	r5, #1
 8002282:	b26d      	sxtb	r5, r5
		  tempiter = 0;
 8002284:	2d08      	cmp	r5, #8
 8002286:	bfa8      	it	ge
 8002288:	2500      	movge	r5, #0
	  if(tempiter != headiter){
 800228a:	f993 3000 	ldrsb.w	r3, [r3]
 800228e:	42ab      	cmp	r3, r5
 8002290:	d062      	beq.n	8002358 <main+0x568>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 8002292:	4bad      	ldr	r3, [pc, #692]	; (8002548 <main+0x758>)
 8002294:	220a      	movs	r2, #10
 8002296:	eb03 1585 	add.w	r5, r3, r5, lsl #6
 800229a:	4629      	mov	r1, r5
 800229c:	48ab      	ldr	r0, [pc, #684]	; (800254c <main+0x75c>)
 800229e:	f00b fd05 	bl	800dcac <strncmp>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	f000 827b 	beq.w	800279e <main+0x9ae>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022a8:	2213      	movs	r2, #19
 80022aa:	4629      	mov	r1, r5
 80022ac:	48a8      	ldr	r0, [pc, #672]	; (8002550 <main+0x760>)
 80022ae:	f00b fcfd 	bl	800dcac <strncmp>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 80022b2:	2800      	cmp	r0, #0
 80022b4:	f000 8273 	beq.w	800279e <main+0x9ae>
					(strncmp("MEASure:VOLTage?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage?")) == 0)){
 80022b8:	2210      	movs	r2, #16
 80022ba:	4629      	mov	r1, r5
 80022bc:	48a5      	ldr	r0, [pc, #660]	; (8002554 <main+0x764>)
 80022be:	f00b fcf5 	bl	800dcac <strncmp>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022c2:	2800      	cmp	r0, #0
 80022c4:	f000 826b 	beq.w	800279e <main+0x9ae>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022c8:	220a      	movs	r2, #10
 80022ca:	4629      	mov	r1, r5
 80022cc:	48a2      	ldr	r0, [pc, #648]	; (8002558 <main+0x768>)
 80022ce:	f00b fced 	bl	800dcac <strncmp>
 80022d2:	b168      	cbz	r0, 80022f0 <main+0x500>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 80022d4:	2213      	movs	r2, #19
 80022d6:	4629      	mov	r1, r5
 80022d8:	48a0      	ldr	r0, [pc, #640]	; (800255c <main+0x76c>)
 80022da:	f00b fce7 	bl	800dcac <strncmp>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022de:	b138      	cbz	r0, 80022f0 <main+0x500>
					(strncmp("MEASure:CURRent?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent?")) == 0)){
 80022e0:	2210      	movs	r2, #16
 80022e2:	4629      	mov	r1, r5
 80022e4:	489e      	ldr	r0, [pc, #632]	; (8002560 <main+0x770>)
 80022e6:	f00b fce1 	bl	800dcac <strncmp>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 80022ea:	2800      	cmp	r0, #0
 80022ec:	f040 8265 	bne.w	80027ba <main+0x9ca>
				snprintf((char*)MSG, 64, "%.3f, %.3f\n", cur_num_aux, cur_num);
 80022f0:	4b9c      	ldr	r3, [pc, #624]	; (8002564 <main+0x774>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f7fe f8b0 	bl	8000458 <__aeabi_f2d>
 80022f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022fc:	4b9a      	ldr	r3, [pc, #616]	; (8002568 <main+0x778>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	f7fe f8aa 	bl	8000458 <__aeabi_f2d>
 8002304:	e9cd 0100 	strd	r0, r1, [sp]
 8002308:	4a98      	ldr	r2, [pc, #608]	; (800256c <main+0x77c>)
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	488a      	ldr	r0, [pc, #552]	; (8002538 <main+0x748>)
 800230e:	f00b fc99 	bl	800dc44 <sniprintf>
				CDC_Transmit_FS(MSG, 64);
 8002312:	2140      	movs	r1, #64	; 0x40
 8002314:	4888      	ldr	r0, [pc, #544]	; (8002538 <main+0x748>)
 8002316:	f00a fdd3 	bl	800cec0 <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	2100      	movs	r1, #0
 800231e:	4886      	ldr	r0, [pc, #536]	; (8002538 <main+0x748>)
 8002320:	f00b f828 	bl	800d374 <memset>
			if ((strncmp("READ?", (char*)notacircbuff[tempiter], strlen("READ?")) == 0)){
 8002324:	2205      	movs	r2, #5
 8002326:	4629      	mov	r1, r5
 8002328:	4891      	ldr	r0, [pc, #580]	; (8002570 <main+0x780>)
 800232a:	f00b fcbf 	bl	800dcac <strncmp>
 800232e:	2800      	cmp	r0, #0
 8002330:	f040 8258 	bne.w	80027e4 <main+0x9f4>
				CDC_Transmit_FS((uint8_t*)"\n", strlen("\n"));
 8002334:	2101      	movs	r1, #1
 8002336:	488f      	ldr	r0, [pc, #572]	; (8002574 <main+0x784>)
 8002338:	f00a fdc2 	bl	800cec0 <CDC_Transmit_FS>
			memset (notacircbuff[tempiter], '\0', 64); // clear the buffer
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	4628      	mov	r0, r5
 8002340:	2100      	movs	r1, #0
 8002342:	f00b f817 	bl	800d374 <memset>
			tailiter++;
 8002346:	4a7e      	ldr	r2, [pc, #504]	; (8002540 <main+0x750>)
 8002348:	7813      	ldrb	r3, [r2, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b25b      	sxtb	r3, r3
			if(tailiter >= CIRCSIZE){
 800234e:	2b07      	cmp	r3, #7
				tailiter = 0;
 8002350:	bfc4      	itt	gt
 8002352:	2300      	movgt	r3, #0
 8002354:	4a7a      	ldrgt	r2, [pc, #488]	; (8002540 <main+0x750>)
 8002356:	7013      	strb	r3, [r2, #0]
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002358:	4b87      	ldr	r3, [pc, #540]	; (8002578 <main+0x788>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800235a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800257c <main+0x78c>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800235e:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002360:	8818      	ldrh	r0, [r3, #0]
 8002362:	f7fe fccf 	bl	8000d04 <__aeabi_ui2f>
 8002366:	4605      	mov	r5, r0
 8002368:	f8b9 0008 	ldrh.w	r0, [r9, #8]
 800236c:	f7fe fcca 	bl	8000d04 <__aeabi_ui2f>
 8002370:	4606      	mov	r6, r0
 8002372:	4628      	mov	r0, r5
 8002374:	4631      	mov	r1, r6
 8002376:	f7fe fdd1 	bl	8000f1c <__aeabi_fdiv>
 800237a:	4981      	ldr	r1, [pc, #516]	; (8002580 <main+0x790>)
 800237c:	f7fe fd1a 	bl	8000db4 <__aeabi_fmul>
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002380:	4651      	mov	r1, sl
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002382:	4680      	mov	r8, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 8002384:	4630      	mov	r0, r6
 8002386:	f7fe fd15 	bl	8000db4 <__aeabi_fmul>
 800238a:	4607      	mov	r7, r0
 800238c:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8002390:	f7fe fcb8 	bl	8000d04 <__aeabi_ui2f>
 8002394:	497a      	ldr	r1, [pc, #488]	; (8002580 <main+0x790>)
 8002396:	f7fe fd0d 	bl	8000db4 <__aeabi_fmul>
 800239a:	4629      	mov	r1, r5
 800239c:	f7fe fd0a 	bl	8000db4 <__aeabi_fmul>
 80023a0:	4639      	mov	r1, r7
 80023a2:	f7fe fdbb 	bl	8000f1c <__aeabi_fdiv>
 80023a6:	4977      	ldr	r1, [pc, #476]	; (8002584 <main+0x794>)
 80023a8:	f7fe fdb8 	bl	8000f1c <__aeabi_fdiv>
 80023ac:	4976      	ldr	r1, [pc, #472]	; (8002588 <main+0x798>)
 80023ae:	f7fe fdb5 	bl	8000f1c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023b2:	4621      	mov	r1, r4
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80023b4:	4606      	mov	r6, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023b6:	f7fe feaf 	bl	8001118 <__aeabi_fcmpge>
 80023ba:	b900      	cbnz	r0, 80023be <main+0x5ce>
 80023bc:	4626      	mov	r6, r4
 80023be:	4b69      	ldr	r3, [pc, #420]	; (8002564 <main+0x774>)
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023c0:	4972      	ldr	r1, [pc, #456]	; (800258c <main+0x79c>)
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023c2:	601e      	str	r6, [r3, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023c4:	4630      	mov	r0, r6
 80023c6:	f7fe fcf5 	bl	8000db4 <__aeabi_fmul>
 80023ca:	4681      	mov	r9, r0
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <main+0x78c>)
 80023ce:	8818      	ldrh	r0, [r3, #0]
 80023d0:	f7fe fc98 	bl	8000d04 <__aeabi_ui2f>
 80023d4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80023d8:	f7fe fcec 	bl	8000db4 <__aeabi_fmul>
 80023dc:	4968      	ldr	r1, [pc, #416]	; (8002580 <main+0x790>)
 80023de:	f7fe fce9 	bl	8000db4 <__aeabi_fmul>
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fe fce6 	bl	8000db4 <__aeabi_fmul>
 80023e8:	4639      	mov	r1, r7
 80023ea:	f7fe fd97 	bl	8000f1c <__aeabi_fdiv>
 80023ee:	4649      	mov	r1, r9
 80023f0:	f7fe fbd6 	bl	8000ba0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80023f4:	4621      	mov	r1, r4
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023f6:	4606      	mov	r6, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80023f8:	f7fe fe8e 	bl	8001118 <__aeabi_fcmpge>
 80023fc:	b900      	cbnz	r0, 8002400 <main+0x610>
 80023fe:	4626      	mov	r6, r4
 8002400:	4b63      	ldr	r3, [pc, #396]	; (8002590 <main+0x7a0>)
 8002402:	601e      	str	r6, [r3, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002404:	4b5d      	ldr	r3, [pc, #372]	; (800257c <main+0x78c>)
 8002406:	8858      	ldrh	r0, [r3, #2]
 8002408:	f7fe fc7c 	bl	8000d04 <__aeabi_ui2f>
 800240c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002410:	f7fe fcd0 	bl	8000db4 <__aeabi_fmul>
 8002414:	495a      	ldr	r1, [pc, #360]	; (8002580 <main+0x790>)
 8002416:	f7fe fccd 	bl	8000db4 <__aeabi_fmul>
 800241a:	4629      	mov	r1, r5
 800241c:	f7fe fcca 	bl	8000db4 <__aeabi_fmul>
 8002420:	4639      	mov	r1, r7
 8002422:	f7fe fd7b 	bl	8000f1c <__aeabi_fdiv>
 8002426:	4649      	mov	r1, r9
 8002428:	f7fe fbba 	bl	8000ba0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 800242c:	4621      	mov	r1, r4
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800242e:	4681      	mov	r9, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002430:	f7fe fe72 	bl	8001118 <__aeabi_fcmpge>
 8002434:	b900      	cbnz	r0, 8002438 <main+0x648>
 8002436:	46a1      	mov	r9, r4
 8002438:	4b56      	ldr	r3, [pc, #344]	; (8002594 <main+0x7a4>)
 800243a:	f8c3 9000 	str.w	r9, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 800243e:	4b4f      	ldr	r3, [pc, #316]	; (800257c <main+0x78c>)
 8002440:	88d8      	ldrh	r0, [r3, #6]
 8002442:	f7fe fc5f 	bl	8000d04 <__aeabi_ui2f>
 8002446:	4954      	ldr	r1, [pc, #336]	; (8002598 <main+0x7a8>)
 8002448:	f7fe fcb4 	bl	8000db4 <__aeabi_fmul>
 800244c:	494c      	ldr	r1, [pc, #304]	; (8002580 <main+0x790>)
 800244e:	f7fe fcb1 	bl	8000db4 <__aeabi_fmul>
 8002452:	4629      	mov	r1, r5
 8002454:	f7fe fcae 	bl	8000db4 <__aeabi_fmul>
 8002458:	4639      	mov	r1, r7
 800245a:	f7fe fd5f 	bl	8000f1c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800245e:	4621      	mov	r1, r4
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002460:	4605      	mov	r5, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002462:	f7fe fe59 	bl	8001118 <__aeabi_fcmpge>
 8002466:	b900      	cbnz	r0, 800246a <main+0x67a>
 8002468:	4625      	mov	r5, r4
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <main+0x7ac>)
 800246c:	601d      	str	r5, [r3, #0]
	  if (chstat_main) {
 800246e:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <main+0x7b0>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8167 	beq.w	8002746 <main+0x956>
		  error = lin_num - volt_set_main;
 8002478:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <main+0x7b4>)
 800247a:	4648      	mov	r0, r9
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	f7fe fb8f 	bl	8000ba0 <__aeabi_fsub>
 8002482:	4605      	mov	r5, r0
		  integral += error;
 8002484:	9804      	ldr	r0, [sp, #16]
 8002486:	4629      	mov	r1, r5
 8002488:	f7fe fb8c 	bl	8000ba4 <__addsf3>
		  if (integral > (float)4095.0) {
 800248c:	4651      	mov	r1, sl
		  integral += error;
 800248e:	4606      	mov	r6, r0
 8002490:	9004      	str	r0, [sp, #16]
		  if (integral > (float)4095.0) {
 8002492:	f7fe fe4b 	bl	800112c <__aeabi_fcmpgt>
 8002496:	2800      	cmp	r0, #0
 8002498:	f040 8127 	bne.w	80026ea <main+0x8fa>
		  } else if (integral < (float)(-4095.0)) {
 800249c:	4630      	mov	r0, r6
 800249e:	4942      	ldr	r1, [pc, #264]	; (80025a8 <main+0x7b8>)
 80024a0:	f7fe fe26 	bl	80010f0 <__aeabi_fcmplt>
 80024a4:	b108      	cbz	r0, 80024aa <main+0x6ba>
			  integral = (float)(-4095.0);
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <main+0x7b8>)
 80024a8:	9304      	str	r3, [sp, #16]
		  correction = P * error + I * integral + D * derivative;
 80024aa:	4628      	mov	r0, r5
 80024ac:	f7fd ffd4 	bl	8000458 <__aeabi_f2d>
		  corrected_volt_set_main = volt_set_main - correction;
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <main+0x7b4>)
 80024b2:	f8d3 9000 	ldr.w	r9, [r3]
		  correction = P * error + I * integral + D * derivative;
 80024b6:	a31c      	add	r3, pc, #112	; (adr r3, 8002528 <main+0x738>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f824 	bl	8000508 <__aeabi_dmul>
 80024c0:	4606      	mov	r6, r0
 80024c2:	9804      	ldr	r0, [sp, #16]
 80024c4:	460f      	mov	r7, r1
 80024c6:	f7fd ffc7 	bl	8000458 <__aeabi_f2d>
 80024ca:	a317      	add	r3, pc, #92	; (adr r3, 8002528 <main+0x738>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	f7fe f81a 	bl	8000508 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4630      	mov	r0, r6
 80024da:	4639      	mov	r1, r7
 80024dc:	f7fd fe5e 	bl	800019c <__adddf3>
 80024e0:	4606      	mov	r6, r0
 80024e2:	460f      	mov	r7, r1
		  derivative = error - error_previous;
 80024e4:	4628      	mov	r0, r5
 80024e6:	9905      	ldr	r1, [sp, #20]
 80024e8:	f7fe fb5a 	bl	8000ba0 <__aeabi_fsub>
		  correction = P * error + I * integral + D * derivative;
 80024ec:	f7fd ffb4 	bl	8000458 <__aeabi_f2d>
 80024f0:	a30f      	add	r3, pc, #60	; (adr r3, 8002530 <main+0x740>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f807 	bl	8000508 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4630      	mov	r0, r6
 8002500:	4639      	mov	r1, r7
 8002502:	f7fd fe4b 	bl	800019c <__adddf3>
 8002506:	f7fe faf7 	bl	8000af8 <__aeabi_d2f>
 800250a:	4601      	mov	r1, r0
		  corrected_volt_set_main = volt_set_main - correction;
 800250c:	4648      	mov	r0, r9
 800250e:	f7fe fb47 	bl	8000ba0 <__aeabi_fsub>
		  tmpv1 = (((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8002512:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002516:	f7fe fc4d 	bl	8000db4 <__aeabi_fmul>
 800251a:	4924      	ldr	r1, [pc, #144]	; (80025ac <main+0x7bc>)
 800251c:	f7fe fb42 	bl	8000ba4 <__addsf3>
 8002520:	4651      	mov	r1, sl
 8002522:	f7fe fc47 	bl	8000db4 <__aeabi_fmul>
 8002526:	e043      	b.n	80025b0 <main+0x7c0>
 8002528:	33333333 	.word	0x33333333
 800252c:	3fc33333 	.word	0x3fc33333
 8002530:	9999999a 	.word	0x9999999a
 8002534:	3fc99999 	.word	0x3fc99999
 8002538:	20000384 	.word	0x20000384
 800253c:	457ff000 	.word	0x457ff000
 8002540:	200009a4 	.word	0x200009a4
 8002544:	20000004 	.word	0x20000004
 8002548:	20000754 	.word	0x20000754
 800254c:	08011744 	.word	0x08011744
 8002550:	08011750 	.word	0x08011750
 8002554:	08011764 	.word	0x08011764
 8002558:	08011784 	.word	0x08011784
 800255c:	08011790 	.word	0x08011790
 8002560:	080117a4 	.word	0x080117a4
 8002564:	200003e8 	.word	0x200003e8
 8002568:	200003ec 	.word	0x200003ec
 800256c:	080117b8 	.word	0x080117b8
 8002570:	08011938 	.word	0x08011938
 8002574:	08011934 	.word	0x08011934
 8002578:	20000014 	.word	0x20000014
 800257c:	200003d0 	.word	0x200003d0
 8002580:	40400000 	.word	0x40400000
 8002584:	41a00000 	.word	0x41a00000
 8002588:	3e19999a 	.word	0x3e19999a
 800258c:	3eb33333 	.word	0x3eb33333
 8002590:	20000954 	.word	0x20000954
 8002594:	2000074c 	.word	0x2000074c
 8002598:	40a00000 	.word	0x40a00000
 800259c:	200009a0 	.word	0x200009a0
 80025a0:	200003e7 	.word	0x200003e7
 80025a4:	20000a70 	.word	0x20000a70
 80025a8:	c57ff000 	.word	0xc57ff000
 80025ac:	3de4d9c9 	.word	0x3de4d9c9
 80025b0:	4641      	mov	r1, r8
 80025b2:	f7fe fcb3 	bl	8000f1c <__aeabi_fdiv>
		  if (tmpv1 > 4095) {
 80025b6:	4651      	mov	r1, sl
		  tmpv1 = (((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80025b8:	4606      	mov	r6, r0
		  if (tmpv1 > 4095) {
 80025ba:	f7fe fdb7 	bl	800112c <__aeabi_fcmpgt>
 80025be:	2800      	cmp	r0, #0
 80025c0:	f040 80bf 	bne.w	8002742 <main+0x952>
		  } else if (tmpv1 < 0) {
 80025c4:	4621      	mov	r1, r4
 80025c6:	4630      	mov	r0, r6
 80025c8:	f7fe fd92 	bl	80010f0 <__aeabi_fcmplt>
 80025cc:	2800      	cmp	r0, #0
 80025ce:	f040 80b6 	bne.w	800273e <main+0x94e>
		  v1 = (uint16_t) tmpv1;
 80025d2:	4630      	mov	r0, r6
 80025d4:	f7fe fdda 	bl	800118c <__aeabi_f2uiz>
 80025d8:	4b9d      	ldr	r3, [pc, #628]	; (8002850 <main+0xa60>)
		  error_previous = error;
 80025da:	9505      	str	r5, [sp, #20]
		  v1 = (uint16_t) tmpv1;
 80025dc:	8018      	strh	r0, [r3, #0]
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 80025de:	4b9d      	ldr	r3, [pc, #628]	; (8002854 <main+0xa64>)
 80025e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	f7fe fadd 	bl	8000ba4 <__addsf3>
 80025ea:	499b      	ldr	r1, [pc, #620]	; (8002858 <main+0xa68>)
 80025ec:	f7fe fbe2 	bl	8000db4 <__aeabi_fmul>
 80025f0:	4601      	mov	r1, r0
 80025f2:	489a      	ldr	r0, [pc, #616]	; (800285c <main+0xa6c>)
 80025f4:	f7fe fad4 	bl	8000ba0 <__aeabi_fsub>
 80025f8:	4651      	mov	r1, sl
 80025fa:	f7fe fbdb 	bl	8000db4 <__aeabi_fmul>
 80025fe:	4641      	mov	r1, r8
 8002600:	f7fe fc8c 	bl	8000f1c <__aeabi_fdiv>
	  if(temp <= 0){
 8002604:	4621      	mov	r1, r4
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.5))) * (float)4095 / (float)vddcalc);
 8002606:	4605      	mov	r5, r0
	  if(temp <= 0){
 8002608:	f7fe fd7c 	bl	8001104 <__aeabi_fcmple>
 800260c:	2800      	cmp	r0, #0
 800260e:	f040 8092 	bne.w	8002736 <main+0x946>
	  else if(temp >= 4095){
 8002612:	4651      	mov	r1, sl
 8002614:	4628      	mov	r0, r5
 8002616:	f7fe fd7f 	bl	8001118 <__aeabi_fcmpge>
 800261a:	2800      	cmp	r0, #0
 800261c:	f000 8085 	beq.w	800272a <main+0x93a>
		  v2 = 4095;
 8002620:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002624:	4a8e      	ldr	r2, [pc, #568]	; (8002860 <main+0xa70>)
 8002626:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 8002628:	4b8a      	ldr	r3, [pc, #552]	; (8002854 <main+0xa64>)
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	4b8d      	ldr	r3, [pc, #564]	; (8002864 <main+0xa74>)
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	f7fe fd7c 	bl	800112c <__aeabi_fcmpgt>
 8002634:	4605      	mov	r5, r0
 8002636:	2800      	cmp	r0, #0
 8002638:	d168      	bne.n	800270c <main+0x91c>
	  else if(volt_set_main < volt_set_main_old){
 800263a:	4b86      	ldr	r3, [pc, #536]	; (8002854 <main+0xa64>)
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800263c:	4602      	mov	r2, r0
	  else if(volt_set_main < volt_set_main_old){
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4b88      	ldr	r3, [pc, #544]	; (8002864 <main+0xa74>)
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002642:	4601      	mov	r1, r0
	  else if(volt_set_main < volt_set_main_old){
 8002644:	681b      	ldr	r3, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002646:	4b82      	ldr	r3, [pc, #520]	; (8002850 <main+0xa60>)
 8002648:	4887      	ldr	r0, [pc, #540]	; (8002868 <main+0xa78>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f006 f984 	bl	8008958 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002650:	4b83      	ldr	r3, [pc, #524]	; (8002860 <main+0xa70>)
 8002652:	462a      	mov	r2, r5
 8002654:	2110      	movs	r1, #16
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	4883      	ldr	r0, [pc, #524]	; (8002868 <main+0xa78>)
 800265a:	f006 f97d 	bl	8008958 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <main+0xa7c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d14c      	bne.n	8002700 <main+0x910>
 8002666:	4b82      	ldr	r3, [pc, #520]	; (8002870 <main+0xa80>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d948      	bls.n	8002700 <main+0x910>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	4880      	ldr	r0, [pc, #512]	; (8002874 <main+0xa84>)
 8002674:	f006 fce6 	bl	8009044 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 8002678:	4b7f      	ldr	r3, [pc, #508]	; (8002878 <main+0xa88>)
	if(val == 0.0){
 800267a:	4621      	mov	r1, r4
	  update_ADC_watchdog(amp_set_main);
 800267c:	681d      	ldr	r5, [r3, #0]
	if(val == 0.0){
 800267e:	4628      	mov	r0, r5
 8002680:	f7fe fd2c 	bl	80010dc <__aeabi_fcmpeq>
 8002684:	2800      	cmp	r0, #0
 8002686:	d136      	bne.n	80026f6 <main+0x906>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002688:	4628      	mov	r0, r5
 800268a:	497c      	ldr	r1, [pc, #496]	; (800287c <main+0xa8c>)
 800268c:	f7fe fb92 	bl	8000db4 <__aeabi_fmul>
 8002690:	497b      	ldr	r1, [pc, #492]	; (8002880 <main+0xa90>)
 8002692:	f7fe fb8f 	bl	8000db4 <__aeabi_fmul>
 8002696:	4651      	mov	r1, sl
 8002698:	f7fe fb8c 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800269c:	4b79      	ldr	r3, [pc, #484]	; (8002884 <main+0xa94>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800269e:	4605      	mov	r5, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 80026a0:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80026a2:	8818      	ldrh	r0, [r3, #0]
 80026a4:	f7fe fb2e 	bl	8000d04 <__aeabi_ui2f>
 80026a8:	4b71      	ldr	r3, [pc, #452]	; (8002870 <main+0xa80>)
 80026aa:	4606      	mov	r6, r0
 80026ac:	8918      	ldrh	r0, [r3, #8]
 80026ae:	f7fe fb29 	bl	8000d04 <__aeabi_ui2f>
 80026b2:	4601      	mov	r1, r0
 80026b4:	4630      	mov	r0, r6
 80026b6:	f7fe fc31 	bl	8000f1c <__aeabi_fdiv>
 80026ba:	4973      	ldr	r1, [pc, #460]	; (8002888 <main+0xa98>)
 80026bc:	f7fe fb7a 	bl	8000db4 <__aeabi_fmul>
 80026c0:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80026c2:	4628      	mov	r0, r5
 80026c4:	f7fe fc2a 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80026c8:	4651      	mov	r1, sl
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80026ca:	4605      	mov	r5, r0
	else if(amp >= 4095.0){
 80026cc:	f7fe fd24 	bl	8001118 <__aeabi_fcmpge>
 80026d0:	4606      	mov	r6, r0
 80026d2:	b980      	cbnz	r0, 80026f6 <main+0x906>
	else if(amp < 0.0){
 80026d4:	4621      	mov	r1, r4
 80026d6:	4628      	mov	r0, r5
 80026d8:	f7fe fd0a 	bl	80010f0 <__aeabi_fcmplt>
 80026dc:	b940      	cbnz	r0, 80026f0 <main+0x900>
		ADC1->HTR = amp;
 80026de:	4628      	mov	r0, r5
 80026e0:	f7fe fd54 	bl	800118c <__aeabi_f2uiz>
 80026e4:	4a69      	ldr	r2, [pc, #420]	; (800288c <main+0xa9c>)
 80026e6:	6290      	str	r0, [r2, #40]	; 0x28
 80026e8:	e5c7      	b.n	800227a <main+0x48a>
			  integral = 4095;
 80026ea:	f8cd a010 	str.w	sl, [sp, #16]
 80026ee:	e6dc      	b.n	80024aa <main+0x6ba>
		ADC1->HTR = 0;
 80026f0:	4b66      	ldr	r3, [pc, #408]	; (800288c <main+0xa9c>)
 80026f2:	629e      	str	r6, [r3, #40]	; 0x28
 80026f4:	e5c1      	b.n	800227a <main+0x48a>
		ADC1->HTR = 4095;
 80026f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <main+0xa9c>)
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
 80026fe:	e5bc      	b.n	800227a <main+0x48a>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2140      	movs	r1, #64	; 0x40
 8002704:	485b      	ldr	r0, [pc, #364]	; (8002874 <main+0xa84>)
 8002706:	f006 fc9d 	bl	8009044 <HAL_GPIO_WritePin>
 800270a:	e7b5      	b.n	8002678 <main+0x888>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800270c:	4b54      	ldr	r3, [pc, #336]	; (8002860 <main+0xa70>)
 800270e:	2200      	movs	r2, #0
 8002710:	2110      	movs	r1, #16
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	4854      	ldr	r0, [pc, #336]	; (8002868 <main+0xa78>)
 8002716:	f006 f91f 	bl	8008958 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800271a:	2200      	movs	r2, #0
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <main+0xa60>)
 800271e:	4611      	mov	r1, r2
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	4851      	ldr	r0, [pc, #324]	; (8002868 <main+0xa78>)
 8002724:	f006 f918 	bl	8008958 <HAL_DAC_SetValue>
 8002728:	e799      	b.n	800265e <main+0x86e>
		  v2 = (uint16_t)temp;
 800272a:	4628      	mov	r0, r5
 800272c:	f7fe fd2e 	bl	800118c <__aeabi_f2uiz>
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <main+0xa70>)
 8002732:	8018      	strh	r0, [r3, #0]
 8002734:	e778      	b.n	8002628 <main+0x838>
		  v2 = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	4a49      	ldr	r2, [pc, #292]	; (8002860 <main+0xa70>)
 800273a:	8013      	strh	r3, [r2, #0]
 800273c:	e774      	b.n	8002628 <main+0x838>
			  tmpv1 = 0;
 800273e:	4626      	mov	r6, r4
 8002740:	e747      	b.n	80025d2 <main+0x7e2>
			  tmpv1 = 4095;
 8002742:	4656      	mov	r6, sl
 8002744:	e745      	b.n	80025d2 <main+0x7e2>
		  if(op_num > (volt_set_main - 1)){
 8002746:	4b43      	ldr	r3, [pc, #268]	; (8002854 <main+0xa64>)
 8002748:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	f7fe fa27 	bl	8000ba0 <__aeabi_fsub>
 8002752:	4631      	mov	r1, r6
 8002754:	f7fe fccc 	bl	80010f0 <__aeabi_fcmplt>
 8002758:	b160      	cbz	r0, 8002774 <main+0x984>
			  if(v1 >= 1){
 800275a:	4a3d      	ldr	r2, [pc, #244]	; (8002850 <main+0xa60>)
 800275c:	8813      	ldrh	r3, [r2, #0]
 800275e:	b10b      	cbz	r3, 8002764 <main+0x974>
				  v1--;
 8002760:	3b01      	subs	r3, #1
 8002762:	8013      	strh	r3, [r2, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002764:	2200      	movs	r2, #0
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <main+0xa60>)
 8002768:	4611      	mov	r1, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	483e      	ldr	r0, [pc, #248]	; (8002868 <main+0xa78>)
 800276e:	f006 f8f3 	bl	8008958 <HAL_DAC_SetValue>
 8002772:	e734      	b.n	80025de <main+0x7ee>
		  else if(op_num < (volt_set_main - 1)){
 8002774:	4b37      	ldr	r3, [pc, #220]	; (8002854 <main+0xa64>)
 8002776:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	f7fe fa10 	bl	8000ba0 <__aeabi_fsub>
 8002780:	4631      	mov	r1, r6
 8002782:	f7fe fcd3 	bl	800112c <__aeabi_fcmpgt>
 8002786:	2800      	cmp	r0, #0
 8002788:	f43f af29 	beq.w	80025de <main+0x7ee>
			  if(v1 <= 4094){
 800278c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002790:	492f      	ldr	r1, [pc, #188]	; (8002850 <main+0xa60>)
 8002792:	880b      	ldrh	r3, [r1, #0]
 8002794:	4293      	cmp	r3, r2
				  v1++;
 8002796:	bf9c      	itt	ls
 8002798:	3301      	addls	r3, #1
 800279a:	800b      	strhls	r3, [r1, #0]
 800279c:	e7e2      	b.n	8002764 <main+0x974>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", lin_num_aux, lin_num);
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <main+0xaa0>)
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	f7fd fe59 	bl	8000458 <__aeabi_f2d>
 80027a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <main+0xaa4>)
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	f7fd fe53 	bl	8000458 <__aeabi_f2d>
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <main+0xaa8>)
 80027b4:	e9cd 0100 	strd	r0, r1, [sp]
 80027b8:	e5a7      	b.n	800230a <main+0x51a>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 80027ba:	220b      	movs	r2, #11
 80027bc:	4629      	mov	r1, r5
 80027be:	4837      	ldr	r0, [pc, #220]	; (800289c <main+0xaac>)
 80027c0:	f00b fa74 	bl	800dcac <strncmp>
 80027c4:	b128      	cbz	r0, 80027d2 <main+0x9e2>
					(strncmp("OUTP:ONE?", (char*)notacircbuff[tempiter], strlen("OUTP:ONE?")) == 0)){
 80027c6:	2209      	movs	r2, #9
 80027c8:	4629      	mov	r1, r5
 80027ca:	4835      	ldr	r0, [pc, #212]	; (80028a0 <main+0xab0>)
 80027cc:	f00b fa6e 	bl	800dcac <strncmp>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 80027d0:	b9e0      	cbnz	r0, 800280c <main+0xa1c>
				snprintf((char*)MSG, 64, "%d\n", chstat_aux_rx);
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <main+0xab4>)
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2140      	movs	r1, #64	; 0x40
 80027d8:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <main+0xab8>)
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	4833      	ldr	r0, [pc, #204]	; (80028ac <main+0xabc>)
 80027de:	f00b fa31 	bl	800dc44 <sniprintf>
				CDC_Transmit_FS(MSG, 64);
 80027e2:	e596      	b.n	8002312 <main+0x522>
				snprintf((char*)MSG, 64, "ERROR: INVALID COMMAND\n");
 80027e4:	4e31      	ldr	r6, [pc, #196]	; (80028ac <main+0xabc>)
 80027e6:	4f32      	ldr	r7, [pc, #200]	; (80028b0 <main+0xac0>)
 80027e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80027ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027ec:	e897 0003 	ldmia.w	r7, {r0, r1}
 80027f0:	e886 0003 	stmia.w	r6, {r0, r1}
				CDC_Transmit_FS(MSG, 64);
 80027f4:	2140      	movs	r1, #64	; 0x40
 80027f6:	f1a6 0010 	sub.w	r0, r6, #16
 80027fa:	f00a fb61 	bl	800cec0 <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	2100      	movs	r1, #0
 8002802:	f1a6 0010 	sub.w	r0, r6, #16
 8002806:	f00a fdb5 	bl	800d374 <memset>
 800280a:	e597      	b.n	800233c <main+0x54c>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 800280c:	220b      	movs	r2, #11
 800280e:	4629      	mov	r1, r5
 8002810:	4828      	ldr	r0, [pc, #160]	; (80028b4 <main+0xac4>)
 8002812:	f00b fa4b 	bl	800dcac <strncmp>
 8002816:	b128      	cbz	r0, 8002824 <main+0xa34>
					(strncmp("OUTP:TWO?", (char*)notacircbuff[tempiter], strlen("OUTP:TWO?")) == 0)){
 8002818:	2209      	movs	r2, #9
 800281a:	4629      	mov	r1, r5
 800281c:	4826      	ldr	r0, [pc, #152]	; (80028b8 <main+0xac8>)
 800281e:	f00b fa45 	bl	800dcac <strncmp>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002822:	b908      	cbnz	r0, 8002828 <main+0xa38>
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <main+0xa7c>)
 8002826:	e7d5      	b.n	80027d4 <main+0x9e4>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 8002828:	2210      	movs	r2, #16
 800282a:	4629      	mov	r1, r5
 800282c:	4823      	ldr	r0, [pc, #140]	; (80028bc <main+0xacc>)
 800282e:	f00b fa3d 	bl	800dcac <strncmp>
 8002832:	b130      	cbz	r0, 8002842 <main+0xa52>
					(strncmp("OUTP:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:START")) == 0)){
 8002834:	220e      	movs	r2, #14
 8002836:	4629      	mov	r1, r5
 8002838:	4821      	ldr	r0, [pc, #132]	; (80028c0 <main+0xad0>)
 800283a:	f00b fa37 	bl	800dcac <strncmp>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 800283e:	2800      	cmp	r0, #0
 8002840:	d142      	bne.n	80028c8 <main+0xad8>
				chstat_aux_tx = 1;
 8002842:	2301      	movs	r3, #1
 8002844:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <main+0xad4>)
 8002846:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 8002848:	230a      	movs	r3, #10
 800284a:	f8ab 3000 	strh.w	r3, [fp]
				CDC_Transmit_FS(MSG, 64);
 800284e:	e560      	b.n	8002312 <main+0x522>
 8002850:	20000a68 	.word	0x20000a68
 8002854:	20000a70 	.word	0x20000a70
 8002858:	3e75c28f 	.word	0x3e75c28f
 800285c:	40800b78 	.word	0x40800b78
 8002860:	20000a6a 	.word	0x20000a6a
 8002864:	20000a74 	.word	0x20000a74
 8002868:	20000448 	.word	0x20000448
 800286c:	200003e7 	.word	0x200003e7
 8002870:	200003d0 	.word	0x200003d0
 8002874:	40020000 	.word	0x40020000
 8002878:	200003e0 	.word	0x200003e0
 800287c:	3e19999a 	.word	0x3e19999a
 8002880:	41a00000 	.word	0x41a00000
 8002884:	20000014 	.word	0x20000014
 8002888:	40400000 	.word	0x40400000
 800288c:	40012400 	.word	0x40012400
 8002890:	2000074c 	.word	0x2000074c
 8002894:	20000750 	.word	0x20000750
 8002898:	08011778 	.word	0x08011778
 800289c:	080117c4 	.word	0x080117c4
 80028a0:	080117d0 	.word	0x080117d0
 80028a4:	200003e5 	.word	0x200003e5
 80028a8:	080117dc 	.word	0x080117dc
 80028ac:	20000384 	.word	0x20000384
 80028b0:	08011940 	.word	0x08011940
 80028b4:	080117e0 	.word	0x080117e0
 80028b8:	080117ec 	.word	0x080117ec
 80028bc:	080117f8 	.word	0x080117f8
 80028c0:	0801180c 	.word	0x0801180c
 80028c4:	200003e6 	.word	0x200003e6
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80028c8:	2210      	movs	r2, #16
 80028ca:	4629      	mov	r1, r5
 80028cc:	48bc      	ldr	r0, [pc, #752]	; (8002bc0 <main+0xdd0>)
 80028ce:	f00b f9ed 	bl	800dcac <strncmp>
 80028d2:	b128      	cbz	r0, 80028e0 <main+0xaf0>
					(strncmp("OUTP:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:START")) == 0)){
 80028d4:	220e      	movs	r2, #14
 80028d6:	4629      	mov	r1, r5
 80028d8:	48ba      	ldr	r0, [pc, #744]	; (8002bc4 <main+0xdd4>)
 80028da:	f00b f9e7 	bl	800dcac <strncmp>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80028de:	b930      	cbnz	r0, 80028ee <main+0xafe>
				chstat_main = 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	4ab9      	ldr	r2, [pc, #740]	; (8002bc8 <main+0xdd8>)
 80028e4:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80028e6:	230a      	movs	r3, #10
 80028e8:	f8ab 3000 	strh.w	r3, [fp]
				CDC_Transmit_FS(MSG, 64);
 80028ec:	e511      	b.n	8002312 <main+0x522>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80028ee:	220f      	movs	r2, #15
 80028f0:	4629      	mov	r1, r5
 80028f2:	48b6      	ldr	r0, [pc, #728]	; (8002bcc <main+0xddc>)
 80028f4:	f00b f9da 	bl	800dcac <strncmp>
 80028f8:	b128      	cbz	r0, 8002906 <main+0xb16>
					(strncmp("OUTP:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:STOP")) == 0)){
 80028fa:	220d      	movs	r2, #13
 80028fc:	4629      	mov	r1, r5
 80028fe:	48b4      	ldr	r0, [pc, #720]	; (8002bd0 <main+0xde0>)
 8002900:	f00b f9d4 	bl	800dcac <strncmp>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 8002904:	b978      	cbnz	r0, 8002926 <main+0xb36>
				snprintf((char*)MSG, 64, "\n");
 8002906:	230a      	movs	r3, #10
				chstat_aux_tx = 0;
 8002908:	2600      	movs	r6, #0
				snprintf((char*)MSG, 64, "\n");
 800290a:	f8ab 3000 	strh.w	r3, [fp]
				chstat_aux_tx = 0;
 800290e:	4bb1      	ldr	r3, [pc, #708]	; (8002bd4 <main+0xde4>)
				CDC_Transmit_FS(MSG, 64);
 8002910:	2140      	movs	r1, #64	; 0x40
				chstat_main = 0;
 8002912:	701e      	strb	r6, [r3, #0]
				CDC_Transmit_FS(MSG, 64);
 8002914:	48b0      	ldr	r0, [pc, #704]	; (8002bd8 <main+0xde8>)
 8002916:	f00a fad3 	bl	800cec0 <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 800291a:	4631      	mov	r1, r6
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	48ae      	ldr	r0, [pc, #696]	; (8002bd8 <main+0xde8>)
 8002920:	f00a fd28 	bl	800d374 <memset>
 8002924:	e4fe      	b.n	8002324 <main+0x534>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 8002926:	220f      	movs	r2, #15
 8002928:	4629      	mov	r1, r5
 800292a:	48ac      	ldr	r0, [pc, #688]	; (8002bdc <main+0xdec>)
 800292c:	f00b f9be 	bl	800dcac <strncmp>
 8002930:	b128      	cbz	r0, 800293e <main+0xb4e>
					(strncmp("OUTP:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:STOP")) == 0)){
 8002932:	220d      	movs	r2, #13
 8002934:	4629      	mov	r1, r5
 8002936:	48aa      	ldr	r0, [pc, #680]	; (8002be0 <main+0xdf0>)
 8002938:	f00b f9b8 	bl	800dcac <strncmp>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 800293c:	b928      	cbnz	r0, 800294a <main+0xb5a>
				snprintf((char*)MSG, 64, "\n");
 800293e:	230a      	movs	r3, #10
				chstat_main = 0;
 8002940:	2600      	movs	r6, #0
				snprintf((char*)MSG, 64, "\n");
 8002942:	f8ab 3000 	strh.w	r3, [fp]
				chstat_main = 0;
 8002946:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <main+0xdd8>)
 8002948:	e7e2      	b.n	8002910 <main+0xb20>
			else if ((strncmp("VOLTage:ONE:", (char*)notacircbuff[tempiter], strlen("VOLTage:ONE:")) == 0)){
 800294a:	220c      	movs	r2, #12
 800294c:	4629      	mov	r1, r5
 800294e:	48a5      	ldr	r0, [pc, #660]	; (8002be4 <main+0xdf4>)
 8002950:	f00b f9ac 	bl	800dcac <strncmp>
 8002954:	2800      	cmp	r0, #0
 8002956:	d049      	beq.n	80029ec <main+0xbfc>
			else if ((strncmp("VOLT:ONE:", (char*)notacircbuff[tempiter], strlen("VOLT:ONE:")) == 0)){
 8002958:	2209      	movs	r2, #9
 800295a:	4629      	mov	r1, r5
 800295c:	48a2      	ldr	r0, [pc, #648]	; (8002be8 <main+0xdf8>)
 800295e:	f00b f9a5 	bl	800dcac <strncmp>
 8002962:	4606      	mov	r6, r0
 8002964:	2800      	cmp	r0, #0
 8002966:	f000 80c5 	beq.w	8002af4 <main+0xd04>
			else if ((strncmp("VOLTage:TWO:", (char*)notacircbuff[tempiter], strlen("VOLTage:TWO:")) == 0)){
 800296a:	220c      	movs	r2, #12
 800296c:	4629      	mov	r1, r5
 800296e:	489f      	ldr	r0, [pc, #636]	; (8002bec <main+0xdfc>)
 8002970:	f00b f99c 	bl	800dcac <strncmp>
 8002974:	4606      	mov	r6, r0
 8002976:	2800      	cmp	r0, #0
 8002978:	f000 80b9 	beq.w	8002aee <main+0xcfe>
			else if ((strncmp("VOLT:TWO:", (char*)notacircbuff[tempiter], strlen("VOLT:TWO:")) == 0)){
 800297c:	2209      	movs	r2, #9
 800297e:	4629      	mov	r1, r5
 8002980:	489b      	ldr	r0, [pc, #620]	; (8002bf0 <main+0xe00>)
 8002982:	f00b f993 	bl	800dcac <strncmp>
 8002986:	4606      	mov	r6, r0
 8002988:	2800      	cmp	r0, #0
 800298a:	d07e      	beq.n	8002a8a <main+0xc9a>
			else if ((strncmp("CURRent:ONE:", (char*)notacircbuff[tempiter], strlen("CURRent:ONE:")) == 0)){
 800298c:	220c      	movs	r2, #12
 800298e:	4629      	mov	r1, r5
 8002990:	4898      	ldr	r0, [pc, #608]	; (8002bf4 <main+0xe04>)
 8002992:	f00b f98b 	bl	800dcac <strncmp>
 8002996:	4606      	mov	r6, r0
 8002998:	2800      	cmp	r0, #0
 800299a:	d046      	beq.n	8002a2a <main+0xc3a>
			else if ((strncmp("CURR:ONE:", (char*)notacircbuff[tempiter], strlen("CURR:ONE:")) == 0)){
 800299c:	2209      	movs	r2, #9
 800299e:	4629      	mov	r1, r5
 80029a0:	4895      	ldr	r0, [pc, #596]	; (8002bf8 <main+0xe08>)
 80029a2:	f00b f983 	bl	800dcac <strncmp>
 80029a6:	4606      	mov	r6, r0
 80029a8:	2800      	cmp	r0, #0
 80029aa:	f000 80ff 	beq.w	8002bac <main+0xdbc>
			else if ((strncmp("CURRent:TWO:", (char*)notacircbuff[tempiter], strlen("CURRent:TWO:")) == 0)){
 80029ae:	220c      	movs	r2, #12
 80029b0:	4629      	mov	r1, r5
 80029b2:	4892      	ldr	r0, [pc, #584]	; (8002bfc <main+0xe0c>)
 80029b4:	f00b f97a 	bl	800dcac <strncmp>
 80029b8:	4606      	mov	r6, r0
 80029ba:	2800      	cmp	r0, #0
 80029bc:	f000 80cb 	beq.w	8002b56 <main+0xd66>
			else if ((strncmp("CURR:TWO:", (char*)notacircbuff[tempiter], strlen("CURR:TWO:")) == 0)){
 80029c0:	2209      	movs	r2, #9
 80029c2:	4629      	mov	r1, r5
 80029c4:	488e      	ldr	r0, [pc, #568]	; (8002c00 <main+0xe10>)
 80029c6:	f00b f971 	bl	800dcac <strncmp>
 80029ca:	4606      	mov	r6, r0
 80029cc:	2800      	cmp	r0, #0
 80029ce:	f000 80f0 	beq.w	8002bb2 <main+0xdc2>
			else if ((strncmp("*IDN?", (char*)notacircbuff[tempiter], strlen("*IDN?")) == 0)){
 80029d2:	2205      	movs	r2, #5
 80029d4:	4629      	mov	r1, r5
 80029d6:	488b      	ldr	r0, [pc, #556]	; (8002c04 <main+0xe14>)
 80029d8:	f00b f968 	bl	800dcac <strncmp>
 80029dc:	2800      	cmp	r0, #0
 80029de:	f47f aca1 	bne.w	8002324 <main+0x534>
				CDC_Transmit_FS((uint8_t*)"493 Lab Power Supply\n", strlen("493 Lab Power Supply\n"));
 80029e2:	2115      	movs	r1, #21
 80029e4:	4888      	ldr	r0, [pc, #544]	; (8002c08 <main+0xe18>)
 80029e6:	f00a fa6b 	bl	800cec0 <CDC_Transmit_FS>
 80029ea:	e49b      	b.n	8002324 <main+0x534>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) <= 12.00)){
 80029ec:	f105 060c 	add.w	r6, r5, #12
 80029f0:	4630      	mov	r0, r6
 80029f2:	f00a fc91 	bl	800d318 <atof>
 80029f6:	2200      	movs	r2, #0
 80029f8:	2300      	movs	r3, #0
 80029fa:	f7fe f80b 	bl	8000a14 <__aeabi_dcmpge>
 80029fe:	b148      	cbz	r0, 8002a14 <main+0xc24>
 8002a00:	4630      	mov	r0, r6
 8002a02:	f00a fc89 	bl	800d318 <atof>
 8002a06:	2200      	movs	r2, #0
 8002a08:	4b80      	ldr	r3, [pc, #512]	; (8002c0c <main+0xe1c>)
 8002a0a:	f7fd fff9 	bl	8000a00 <__aeabi_dcmple>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	f040 8110 	bne.w	8002c34 <main+0xe44>
					snprintf((char*)MSG, 64, "ERROR: INVALID NUMBER\n");
 8002a14:	4f70      	ldr	r7, [pc, #448]	; (8002bd8 <main+0xde8>)
 8002a16:	4e7e      	ldr	r6, [pc, #504]	; (8002c10 <main+0xe20>)
 8002a18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a1a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002a20:	80b9      	strh	r1, [r7, #4]
 8002a22:	0c09      	lsrs	r1, r1, #16
 8002a24:	6038      	str	r0, [r7, #0]
 8002a26:	71b9      	strb	r1, [r7, #6]
				CDC_Transmit_FS(MSG, 64);
 8002a28:	e473      	b.n	8002312 <main+0x522>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) <= 0.80)){
 8002a2a:	f105 070c 	add.w	r7, r5, #12
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002a2e:	4638      	mov	r0, r7
 8002a30:	f00a fc72 	bl	800d318 <atof>
 8002a34:	2200      	movs	r2, #0
 8002a36:	2300      	movs	r3, #0
 8002a38:	f7fd ffec 	bl	8000a14 <__aeabi_dcmpge>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d0e9      	beq.n	8002a14 <main+0xc24>
 8002a40:	4638      	mov	r0, r7
 8002a42:	f00a fc69 	bl	800d318 <atof>
 8002a46:	a35c      	add	r3, pc, #368	; (adr r3, 8002bb8 <main+0xdc8>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd ffd8 	bl	8000a00 <__aeabi_dcmple>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d0df      	beq.n	8002a14 <main+0xc24>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a54:	4638      	mov	r0, r7
 8002a56:	f00a fc5f 	bl	800d318 <atof>
					uint8_t tempbuff[8] = {0};
 8002a5a:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a5e:	f7fe f84b 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002a62:	f7fd fcf9 	bl	8000458 <__aeabi_f2d>
 8002a66:	4a6b      	ldr	r2, [pc, #428]	; (8002c14 <main+0xe24>)
 8002a68:	e9cd 0100 	strd	r0, r1, [sp]
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	a80e      	add	r0, sp, #56	; 0x38
 8002a70:	f00b f8e8 	bl	800dc44 <sniprintf>
					amp_set_aux = (float)atof((char*)tempbuff);
 8002a74:	a80e      	add	r0, sp, #56	; 0x38
 8002a76:	f00a fc4f 	bl	800d318 <atof>
 8002a7a:	f7fe f83d 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002a7e:	230a      	movs	r3, #10
					amp_set_aux = (float)atof((char*)tempbuff);
 8002a80:	4a65      	ldr	r2, [pc, #404]	; (8002c18 <main+0xe28>)
					snprintf((char*)MSG, 64, "\n");
 8002a82:	f8ab 3000 	strh.w	r3, [fp]
					amp_set_aux = (float)atof((char*)tempbuff);
 8002a86:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002a88:	e443      	b.n	8002312 <main+0x522>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) <= 12.00)){
 8002a8a:	f105 0709 	add.w	r7, r5, #9
 8002a8e:	4638      	mov	r0, r7
 8002a90:	f00a fc42 	bl	800d318 <atof>
 8002a94:	2200      	movs	r2, #0
 8002a96:	2300      	movs	r3, #0
 8002a98:	f7fd ffbc 	bl	8000a14 <__aeabi_dcmpge>
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d0b9      	beq.n	8002a14 <main+0xc24>
 8002aa0:	4638      	mov	r0, r7
 8002aa2:	f00a fc39 	bl	800d318 <atof>
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <main+0xe1c>)
 8002aaa:	f7fd ffa9 	bl	8000a00 <__aeabi_dcmple>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d0b0      	beq.n	8002a14 <main+0xc24>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f00a fc30 	bl	800d318 <atof>
					uint8_t tempbuff[8] = {0};
 8002ab8:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002abc:	f7fe f81c 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002ac0:	f7fd fcca 	bl	8000458 <__aeabi_f2d>
					volt_set_main_old = volt_set_main;
 8002ac4:	4e55      	ldr	r6, [pc, #340]	; (8002c1c <main+0xe2c>)
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002ac6:	e9cd 0100 	strd	r0, r1, [sp]
 8002aca:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <main+0xe30>)
 8002acc:	2108      	movs	r1, #8
 8002ace:	a80e      	add	r0, sp, #56	; 0x38
 8002ad0:	f00b f8b8 	bl	800dc44 <sniprintf>
					volt_set_main_old = volt_set_main;
 8002ad4:	6833      	ldr	r3, [r6, #0]
 8002ad6:	4a53      	ldr	r2, [pc, #332]	; (8002c24 <main+0xe34>)
					amp_set_main_old = amp_set_main;
 8002ad8:	6013      	str	r3, [r2, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002ada:	a80e      	add	r0, sp, #56	; 0x38
 8002adc:	f00a fc1c 	bl	800d318 <atof>
 8002ae0:	f7fe f80a 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	f8ab 3000 	strh.w	r3, [fp]
					amp_set_main = (float)atof((char*)tempbuff);
 8002aea:	6030      	str	r0, [r6, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002aec:	e411      	b.n	8002312 <main+0x522>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) <= 12.00)){
 8002aee:	f105 070c 	add.w	r7, r5, #12
 8002af2:	e7cc      	b.n	8002a8e <main+0xc9e>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002af4:	f105 0709 	add.w	r7, r5, #9
 8002af8:	4638      	mov	r0, r7
 8002afa:	f00a fc0d 	bl	800d318 <atof>
 8002afe:	2200      	movs	r2, #0
 8002b00:	2300      	movs	r3, #0
 8002b02:	f7fd ff87 	bl	8000a14 <__aeabi_dcmpge>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d084      	beq.n	8002a14 <main+0xc24>
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	f00a fc04 	bl	800d318 <atof>
 8002b10:	2200      	movs	r2, #0
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <main+0xe1c>)
 8002b14:	f7fd ff74 	bl	8000a00 <__aeabi_dcmple>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	f43f af7b 	beq.w	8002a14 <main+0xc24>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b1e:	4638      	mov	r0, r7
 8002b20:	f00a fbfa 	bl	800d318 <atof>
					uint8_t tempbuff[8] = {0};
 8002b24:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b28:	f7fd ffe6 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002b2c:	f7fd fc94 	bl	8000458 <__aeabi_f2d>
 8002b30:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <main+0xe30>)
 8002b32:	e9cd 0100 	strd	r0, r1, [sp]
 8002b36:	2108      	movs	r1, #8
 8002b38:	a80e      	add	r0, sp, #56	; 0x38
 8002b3a:	f00b f883 	bl	800dc44 <sniprintf>
					volt_set_aux = (float)atof((char*)tempbuff);
 8002b3e:	a80e      	add	r0, sp, #56	; 0x38
 8002b40:	f00a fbea 	bl	800d318 <atof>
 8002b44:	f7fd ffd8 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002b48:	230a      	movs	r3, #10
					volt_set_aux = (float)atof((char*)tempbuff);
 8002b4a:	4a37      	ldr	r2, [pc, #220]	; (8002c28 <main+0xe38>)
					snprintf((char*)MSG, 64, "\n");
 8002b4c:	f8ab 3000 	strh.w	r3, [fp]
					volt_set_aux = (float)atof((char*)tempbuff);
 8002b50:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002b52:	f7ff bbde 	b.w	8002312 <main+0x522>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) <= 0.80)){
 8002b56:	f105 070c 	add.w	r7, r5, #12
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	f00a fbdc 	bl	800d318 <atof>
 8002b60:	2200      	movs	r2, #0
 8002b62:	2300      	movs	r3, #0
 8002b64:	f7fd ff56 	bl	8000a14 <__aeabi_dcmpge>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	f43f af53 	beq.w	8002a14 <main+0xc24>
 8002b6e:	4638      	mov	r0, r7
 8002b70:	f00a fbd2 	bl	800d318 <atof>
 8002b74:	a310      	add	r3, pc, #64	; (adr r3, 8002bb8 <main+0xdc8>)
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f7fd ff41 	bl	8000a00 <__aeabi_dcmple>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	f43f af48 	beq.w	8002a14 <main+0xc24>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b84:	4638      	mov	r0, r7
 8002b86:	f00a fbc7 	bl	800d318 <atof>
					uint8_t tempbuff[8] = {0};
 8002b8a:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b8e:	f7fd ffb3 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b92:	f7fd fc61 	bl	8000458 <__aeabi_f2d>
					amp_set_main_old = amp_set_main;
 8002b96:	4e25      	ldr	r6, [pc, #148]	; (8002c2c <main+0xe3c>)
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b98:	e9cd 0100 	strd	r0, r1, [sp]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <main+0xe24>)
 8002b9e:	2108      	movs	r1, #8
 8002ba0:	a80e      	add	r0, sp, #56	; 0x38
 8002ba2:	f00b f84f 	bl	800dc44 <sniprintf>
					amp_set_main_old = amp_set_main;
 8002ba6:	6833      	ldr	r3, [r6, #0]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <main+0xe40>)
 8002baa:	e795      	b.n	8002ad8 <main+0xce8>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002bac:	f105 0709 	add.w	r7, r5, #9
 8002bb0:	e73d      	b.n	8002a2e <main+0xc3e>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002bb2:	f105 0709 	add.w	r7, r5, #9
 8002bb6:	e7d0      	b.n	8002b5a <main+0xd6a>
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	3fe99999 	.word	0x3fe99999
 8002bc0:	0801181c 	.word	0x0801181c
 8002bc4:	08011830 	.word	0x08011830
 8002bc8:	200003e7 	.word	0x200003e7
 8002bcc:	08011840 	.word	0x08011840
 8002bd0:	08011850 	.word	0x08011850
 8002bd4:	200003e6 	.word	0x200003e6
 8002bd8:	20000384 	.word	0x20000384
 8002bdc:	08011860 	.word	0x08011860
 8002be0:	08011870 	.word	0x08011870
 8002be4:	08011880 	.word	0x08011880
 8002be8:	080118b0 	.word	0x080118b0
 8002bec:	080118bc 	.word	0x080118bc
 8002bf0:	080118cc 	.word	0x080118cc
 8002bf4:	080118d8 	.word	0x080118d8
 8002bf8:	080118f0 	.word	0x080118f0
 8002bfc:	080118fc 	.word	0x080118fc
 8002c00:	0801190c 	.word	0x0801190c
 8002c04:	08011918 	.word	0x08011918
 8002c08:	08011920 	.word	0x08011920
 8002c0c:	40280000 	.word	0x40280000
 8002c10:	08011898 	.word	0x08011898
 8002c14:	080118e8 	.word	0x080118e8
 8002c18:	200003dc 	.word	0x200003dc
 8002c1c:	20000a70 	.word	0x20000a70
 8002c20:	08011890 	.word	0x08011890
 8002c24:	20000a74 	.word	0x20000a74
 8002c28:	20000a6c 	.word	0x20000a6c
 8002c2c:	200003e0 	.word	0x200003e0
 8002c30:	20000000 	.word	0x20000000
					float temp = (float)atof((char*)notacircbuff[tempiter] + 12);
 8002c34:	4630      	mov	r0, r6
 8002c36:	f00a fb6f 	bl	800d318 <atof>
					uint8_t tempbuff[8] = {0};
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002c40:	e772      	b.n	8002b28 <main+0xd38>
 8002c42:	bf00      	nop

08002c44 <lcd_psu_init>:
void lcd_psu_init(void){
 8002c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c48:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c4a:	49bb      	ldr	r1, [pc, #748]	; (8002f38 <lcd_psu_init+0x2f4>)
void lcd_psu_init(void){
 8002c4c:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c4e:	48bb      	ldr	r0, [pc, #748]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002c50:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002c52:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c54:	aa03      	add	r2, sp, #12
 8002c56:	214e      	movs	r1, #78	; 0x4e
 8002c58:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c5a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c5c:	f006 fad4 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c60:	2356      	movs	r3, #86	; 0x56
 8002c62:	4db7      	ldr	r5, [pc, #732]	; (8002f40 <lcd_psu_init+0x2fc>)
	data_l = ((data<<4)&0xf0);
 8002c64:	011a      	lsls	r2, r3, #4
 8002c66:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c6c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c70:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c74:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c78:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	214e      	movs	r1, #78	; 0x4e
 8002c80:	4638      	mov	r0, r7
 8002c82:	aa03      	add	r2, sp, #12
 8002c84:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c86:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c8a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c8e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c92:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c96:	f006 fab7 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c9a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e0      	bne.n	8002c64 <lcd_psu_init+0x20>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ca2:	49a8      	ldr	r1, [pc, #672]	; (8002f44 <lcd_psu_init+0x300>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	aa03      	add	r2, sp, #12
 8002ca8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002caa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cac:	48a3      	ldr	r0, [pc, #652]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002cae:	214e      	movs	r1, #78	; 0x4e
 8002cb0:	f006 faaa 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cb4:	49a4      	ldr	r1, [pc, #656]	; (8002f48 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cba:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cbc:	489f      	ldr	r0, [pc, #636]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002cbe:	214e      	movs	r1, #78	; 0x4e
 8002cc0:	aa03      	add	r2, sp, #12
 8002cc2:	f006 faa1 	bl	8009208 <HAL_I2C_Master_Transmit>
 8002cc6:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002cc8:	2356      	movs	r3, #86	; 0x56
 8002cca:	4da0      	ldr	r5, [pc, #640]	; (8002f4c <lcd_psu_init+0x308>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ccc:	4f9b      	ldr	r7, [pc, #620]	; (8002f3c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002cce:	011a      	lsls	r2, r3, #4
 8002cd0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cd6:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cda:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cde:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ce2:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	214e      	movs	r1, #78	; 0x4e
 8002cea:	4638      	mov	r0, r7
 8002cec:	aa03      	add	r2, sp, #12
 8002cee:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cf0:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cf4:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cf8:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cfc:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d00:	f006 fa82 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d04:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e0      	bne.n	8002cce <lcd_psu_init+0x8a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d0c:	4990      	ldr	r1, [pc, #576]	; (8002f50 <lcd_psu_init+0x30c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d0e:	2304      	movs	r3, #4
 8002d10:	aa03      	add	r2, sp, #12
 8002d12:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d14:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d16:	4889      	ldr	r0, [pc, #548]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002d18:	214e      	movs	r1, #78	; 0x4e
 8002d1a:	f006 fa75 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d1e:	498d      	ldr	r1, [pc, #564]	; (8002f54 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d20:	2304      	movs	r3, #4
 8002d22:	aa03      	add	r2, sp, #12
 8002d24:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d26:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d28:	4884      	ldr	r0, [pc, #528]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002d2a:	214e      	movs	r1, #78	; 0x4e
 8002d2c:	f006 fa6c 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d30:	4989      	ldr	r1, [pc, #548]	; (8002f58 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d32:	2304      	movs	r3, #4
 8002d34:	aa03      	add	r2, sp, #12
 8002d36:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d38:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d3a:	4880      	ldr	r0, [pc, #512]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002d3c:	214e      	movs	r1, #78	; 0x4e
 8002d3e:	f006 fa63 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d42:	4986      	ldr	r1, [pc, #536]	; (8002f5c <lcd_psu_init+0x318>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d44:	2304      	movs	r3, #4
 8002d46:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d48:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d4a:	487c      	ldr	r0, [pc, #496]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002d4c:	214e      	movs	r1, #78	; 0x4e
 8002d4e:	aa03      	add	r2, sp, #12
 8002d50:	f006 fa5a 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d54:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002d56:	2341      	movs	r3, #65	; 0x41
 8002d58:	4d81      	ldr	r5, [pc, #516]	; (8002f60 <lcd_psu_init+0x31c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d5a:	4f78      	ldr	r7, [pc, #480]	; (8002f3c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002d5c:	011a      	lsls	r2, r3, #4
 8002d5e:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d64:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d68:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d6c:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d70:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d74:	2304      	movs	r3, #4
 8002d76:	214e      	movs	r1, #78	; 0x4e
 8002d78:	4638      	mov	r0, r7
 8002d7a:	aa03      	add	r2, sp, #12
 8002d7c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d7e:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d82:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d86:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d8a:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d8e:	f006 fa3b 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e0      	bne.n	8002d5c <lcd_psu_init+0x118>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d9a:	4972      	ldr	r1, [pc, #456]	; (8002f64 <lcd_psu_init+0x320>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	aa03      	add	r2, sp, #12
 8002da0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002da2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002da4:	4865      	ldr	r0, [pc, #404]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002da6:	214e      	movs	r1, #78	; 0x4e
 8002da8:	f006 fa2e 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dac:	4966      	ldr	r1, [pc, #408]	; (8002f48 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dae:	2304      	movs	r3, #4
 8002db0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002db2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db4:	4861      	ldr	r0, [pc, #388]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002db6:	214e      	movs	r1, #78	; 0x4e
 8002db8:	aa03      	add	r2, sp, #12
 8002dba:	f006 fa25 	bl	8009208 <HAL_I2C_Master_Transmit>
 8002dbe:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002dc0:	2341      	movs	r3, #65	; 0x41
 8002dc2:	4d69      	ldr	r5, [pc, #420]	; (8002f68 <lcd_psu_init+0x324>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dc4:	4f5d      	ldr	r7, [pc, #372]	; (8002f3c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002dc6:	011a      	lsls	r2, r3, #4
 8002dc8:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dce:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dd2:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dd6:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dda:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dde:	2304      	movs	r3, #4
 8002de0:	214e      	movs	r1, #78	; 0x4e
 8002de2:	4638      	mov	r0, r7
 8002de4:	aa03      	add	r2, sp, #12
 8002de6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002de8:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dec:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002df0:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002df4:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df8:	f006 fa06 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002dfc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e0      	bne.n	8002dc6 <lcd_psu_init+0x182>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e04:	4959      	ldr	r1, [pc, #356]	; (8002f6c <lcd_psu_init+0x328>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e06:	2304      	movs	r3, #4
 8002e08:	aa03      	add	r2, sp, #12
 8002e0a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e0c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e0e:	484b      	ldr	r0, [pc, #300]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002e10:	214e      	movs	r1, #78	; 0x4e
 8002e12:	f006 f9f9 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e16:	494f      	ldr	r1, [pc, #316]	; (8002f54 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e18:	2304      	movs	r3, #4
 8002e1a:	aa03      	add	r2, sp, #12
 8002e1c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e20:	4846      	ldr	r0, [pc, #280]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002e22:	214e      	movs	r1, #78	; 0x4e
 8002e24:	f006 f9f0 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e28:	494b      	ldr	r1, [pc, #300]	; (8002f58 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	aa03      	add	r2, sp, #12
 8002e2e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e30:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e32:	4842      	ldr	r0, [pc, #264]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002e34:	214e      	movs	r1, #78	; 0x4e
 8002e36:	f006 f9e7 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e3a:	494d      	ldr	r1, [pc, #308]	; (8002f70 <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e40:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e42:	483e      	ldr	r0, [pc, #248]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002e44:	214e      	movs	r1, #78	; 0x4e
 8002e46:	aa03      	add	r2, sp, #12
 8002e48:	f006 f9de 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e4c:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e4e:	2356      	movs	r3, #86	; 0x56
 8002e50:	4d48      	ldr	r5, [pc, #288]	; (8002f74 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e52:	4f3a      	ldr	r7, [pc, #232]	; (8002f3c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002e54:	011a      	lsls	r2, r3, #4
 8002e56:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e5c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e60:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e64:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e68:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	214e      	movs	r1, #78	; 0x4e
 8002e70:	4638      	mov	r0, r7
 8002e72:	aa03      	add	r2, sp, #12
 8002e74:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e76:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e7a:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e7e:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e82:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e86:	f006 f9bf 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e8a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e0      	bne.n	8002e54 <lcd_psu_init+0x210>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e92:	4939      	ldr	r1, [pc, #228]	; (8002f78 <lcd_psu_init+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e94:	2304      	movs	r3, #4
 8002e96:	aa03      	add	r2, sp, #12
 8002e98:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e9a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e9c:	4827      	ldr	r0, [pc, #156]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002e9e:	214e      	movs	r1, #78	; 0x4e
 8002ea0:	f006 f9b2 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ea4:	4928      	ldr	r1, [pc, #160]	; (8002f48 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eaa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eac:	4823      	ldr	r0, [pc, #140]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002eae:	214e      	movs	r1, #78	; 0x4e
 8002eb0:	aa03      	add	r2, sp, #12
 8002eb2:	f006 f9a9 	bl	8009208 <HAL_I2C_Master_Transmit>
 8002eb6:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002eb8:	2356      	movs	r3, #86	; 0x56
 8002eba:	4d30      	ldr	r5, [pc, #192]	; (8002f7c <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ebc:	4f1f      	ldr	r7, [pc, #124]	; (8002f3c <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002ebe:	011a      	lsls	r2, r3, #4
 8002ec0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ec6:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eca:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ece:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ed2:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	214e      	movs	r1, #78	; 0x4e
 8002eda:	4638      	mov	r0, r7
 8002edc:	aa03      	add	r2, sp, #12
 8002ede:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ee0:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ee4:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ee8:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002eec:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ef0:	f006 f98a 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ef4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e0      	bne.n	8002ebe <lcd_psu_init+0x27a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002efc:	4920      	ldr	r1, [pc, #128]	; (8002f80 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002efe:	2304      	movs	r3, #4
 8002f00:	aa03      	add	r2, sp, #12
 8002f02:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f04:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f06:	480d      	ldr	r0, [pc, #52]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002f08:	214e      	movs	r1, #78	; 0x4e
 8002f0a:	f006 f97d 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f0e:	4911      	ldr	r1, [pc, #68]	; (8002f54 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f10:	2304      	movs	r3, #4
 8002f12:	aa03      	add	r2, sp, #12
 8002f14:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f16:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f18:	4808      	ldr	r0, [pc, #32]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002f1a:	214e      	movs	r1, #78	; 0x4e
 8002f1c:	f006 f974 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f20:	490d      	ldr	r1, [pc, #52]	; (8002f58 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f22:	2304      	movs	r3, #4
 8002f24:	aa03      	add	r2, sp, #12
 8002f26:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f28:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f2a:	4804      	ldr	r0, [pc, #16]	; (8002f3c <lcd_psu_init+0x2f8>)
 8002f2c:	214e      	movs	r1, #78	; 0x4e
 8002f2e:	f006 f96b 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f32:	4914      	ldr	r1, [pc, #80]	; (8002f84 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f34:	2304      	movs	r3, #4
 8002f36:	e027      	b.n	8002f88 <lcd_psu_init+0x344>
 8002f38:	080c888c 	.word	0x080c888c
 8002f3c:	20000530 	.word	0x20000530
 8002f40:	08011958 	.word	0x08011958
 8002f44:	989c888c 	.word	0x989c888c
 8002f48:	191d090d 	.word	0x191d090d
 8002f4c:	0801195c 	.word	0x0801195c
 8002f50:	c8cc888c 	.word	0xc8cc888c
 8002f54:	090d090d 	.word	0x090d090d
 8002f58:	a9ad393d 	.word	0xa9ad393d
 8002f5c:	080cc8cc 	.word	0x080cc8cc
 8002f60:	08011960 	.word	0x08011960
 8002f64:	989cc8cc 	.word	0x989cc8cc
 8002f68:	08011964 	.word	0x08011964
 8002f6c:	c8ccc8cc 	.word	0xc8ccc8cc
 8002f70:	484c989c 	.word	0x484c989c
 8002f74:	08011968 	.word	0x08011968
 8002f78:	d8dc989c 	.word	0xd8dc989c
 8002f7c:	0801196c 	.word	0x0801196c
 8002f80:	080ca8ac 	.word	0x080ca8ac
 8002f84:	484cd8dc 	.word	0x484cd8dc
 8002f88:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f8a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f8c:	483d      	ldr	r0, [pc, #244]	; (8003084 <lcd_psu_init+0x440>)
 8002f8e:	214e      	movs	r1, #78	; 0x4e
 8002f90:	aa03      	add	r2, sp, #12
 8002f92:	f006 f939 	bl	8009208 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f96:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f98:	2341      	movs	r3, #65	; 0x41
 8002f9a:	4d3b      	ldr	r5, [pc, #236]	; (8003088 <lcd_psu_init+0x444>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f9c:	4f39      	ldr	r7, [pc, #228]	; (8003084 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 8002f9e:	011a      	lsls	r2, r3, #4
 8002fa0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fa6:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002faa:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fae:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fb2:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	214e      	movs	r1, #78	; 0x4e
 8002fba:	4638      	mov	r0, r7
 8002fbc:	aa03      	add	r2, sp, #12
 8002fbe:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fc0:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fc4:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fc8:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fcc:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd0:	f006 f91a 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fd4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e0      	bne.n	8002f9e <lcd_psu_init+0x35a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fdc:	492b      	ldr	r1, [pc, #172]	; (800308c <lcd_psu_init+0x448>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fde:	2304      	movs	r3, #4
 8002fe0:	aa03      	add	r2, sp, #12
 8002fe2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fe4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe6:	4827      	ldr	r0, [pc, #156]	; (8003084 <lcd_psu_init+0x440>)
 8002fe8:	214e      	movs	r1, #78	; 0x4e
 8002fea:	f006 f90d 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fee:	4928      	ldr	r1, [pc, #160]	; (8003090 <lcd_psu_init+0x44c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ff4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ff6:	4823      	ldr	r0, [pc, #140]	; (8003084 <lcd_psu_init+0x440>)
 8002ff8:	214e      	movs	r1, #78	; 0x4e
 8002ffa:	aa03      	add	r2, sp, #12
 8002ffc:	f006 f904 	bl	8009208 <HAL_I2C_Master_Transmit>
 8003000:	2564      	movs	r5, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8003002:	2341      	movs	r3, #65	; 0x41
 8003004:	4c23      	ldr	r4, [pc, #140]	; (8003094 <lcd_psu_init+0x450>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003006:	4e1f      	ldr	r6, [pc, #124]	; (8003084 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 8003008:	011a      	lsls	r2, r3, #4
 800300a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800300c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003010:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003014:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003018:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800301c:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003020:	2304      	movs	r3, #4
 8003022:	214e      	movs	r1, #78	; 0x4e
 8003024:	4630      	mov	r0, r6
 8003026:	aa03      	add	r2, sp, #12
 8003028:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800302a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800302e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003032:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003036:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800303a:	f006 f8e5 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800303e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e0      	bne.n	8003008 <lcd_psu_init+0x3c4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003046:	4914      	ldr	r1, [pc, #80]	; (8003098 <lcd_psu_init+0x454>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003048:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800304a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800304c:	2304      	movs	r3, #4
 800304e:	214e      	movs	r1, #78	; 0x4e
 8003050:	9500      	str	r5, [sp, #0]
 8003052:	480c      	ldr	r0, [pc, #48]	; (8003084 <lcd_psu_init+0x440>)
 8003054:	f006 f8d8 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003058:	4910      	ldr	r1, [pc, #64]	; (800309c <lcd_psu_init+0x458>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800305a:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800305c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800305e:	2304      	movs	r3, #4
 8003060:	214e      	movs	r1, #78	; 0x4e
 8003062:	9500      	str	r5, [sp, #0]
 8003064:	4807      	ldr	r0, [pc, #28]	; (8003084 <lcd_psu_init+0x440>)
 8003066:	f006 f8cf 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800306a:	480d      	ldr	r0, [pc, #52]	; (80030a0 <lcd_psu_init+0x45c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800306c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800306e:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003070:	214e      	movs	r1, #78	; 0x4e
 8003072:	aa03      	add	r2, sp, #12
 8003074:	9500      	str	r5, [sp, #0]
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <lcd_psu_init+0x440>)
 8003078:	f006 f8c6 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 800307c:	b004      	add	sp, #16
 800307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003082:	bf00      	nop
 8003084:	20000530 	.word	0x20000530
 8003088:	08011970 	.word	0x08011970
 800308c:	d8dcd8dc 	.word	0xd8dcd8dc
 8003090:	191d090d 	.word	0x191d090d
 8003094:	08011974 	.word	0x08011974
 8003098:	080ce8ec 	.word	0x080ce8ec
 800309c:	090d090d 	.word	0x090d090d
 80030a0:	a9ad393d 	.word	0xa9ad393d

080030a4 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a6:	4605      	mov	r5, r0
 80030a8:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 80030aa:	4608      	mov	r0, r1
 80030ac:	f7fd f9d4 	bl	8000458 <__aeabi_f2d>
 80030b0:	4606      	mov	r6, r0
 80030b2:	460f      	mov	r7, r1
 80030b4:	4a9a      	ldr	r2, [pc, #616]	; (8003320 <lcd_update_voltage+0x27c>)
 80030b6:	2106      	movs	r1, #6
 80030b8:	e9cd 6700 	strd	r6, r7, [sp]
 80030bc:	a804      	add	r0, sp, #16
 80030be:	f00a fdc1 	bl	800dc44 <sniprintf>
	if(channel == 1){
 80030c2:	2d01      	cmp	r5, #1
 80030c4:	d009      	beq.n	80030da <lcd_update_voltage+0x36>
	else if(channel == 2){
 80030c6:	2d02      	cmp	r5, #2
 80030c8:	f000 80cb 	beq.w	8003262 <lcd_update_voltage+0x1be>
	else if(channel == 3){
 80030cc:	2d03      	cmp	r5, #3
 80030ce:	f000 8135 	beq.w	800333c <lcd_update_voltage+0x298>
	else if(channel == 4){
 80030d2:	2d04      	cmp	r5, #4
 80030d4:	d068      	beq.n	80031a8 <lcd_update_voltage+0x104>
}
 80030d6:	b007      	add	sp, #28
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030da:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030dc:	4a91      	ldr	r2, [pc, #580]	; (8003324 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030de:	4892      	ldr	r0, [pc, #584]	; (8003328 <lcd_update_voltage+0x284>)
 80030e0:	ac03      	add	r4, sp, #12
 80030e2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030e4:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030e6:	214e      	movs	r1, #78	; 0x4e
 80030e8:	4622      	mov	r2, r4
 80030ea:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030ec:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030ee:	f006 f88b 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030f2:	2320      	movs	r3, #32
 80030f4:	4d8d      	ldr	r5, [pc, #564]	; (800332c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80030f6:	011a      	lsls	r2, r3, #4
 80030f8:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80030fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030fe:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003102:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003106:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800310a:	f043 0309 	orr.w	r3, r3, #9
 800310e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003112:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003116:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003118:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800311c:	4622      	mov	r2, r4
 800311e:	214e      	movs	r1, #78	; 0x4e
 8003120:	4638      	mov	r0, r7
 8003122:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003124:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003128:	f006 f86e 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800312c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e0      	bne.n	80030f6 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003134:	4a7b      	ldr	r2, [pc, #492]	; (8003324 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003136:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003138:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800313a:	214e      	movs	r1, #78	; 0x4e
 800313c:	4622      	mov	r2, r4
 800313e:	487a      	ldr	r0, [pc, #488]	; (8003328 <lcd_update_voltage+0x284>)
 8003140:	9600      	str	r6, [sp, #0]
 8003142:	f006 f861 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003146:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800314a:	b30b      	cbz	r3, 8003190 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800314c:	2764      	movs	r7, #100	; 0x64
 800314e:	4e76      	ldr	r6, [pc, #472]	; (8003328 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003150:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8003152:	011a      	lsls	r2, r3, #4
 8003154:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800315a:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800315e:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003162:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003166:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800316a:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800316c:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003170:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003174:	4622      	mov	r2, r4
 8003176:	214e      	movs	r1, #78	; 0x4e
 8003178:	4630      	mov	r0, r6
 800317a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800317c:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003180:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003184:	f006 f840 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003188:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e0      	bne.n	8003152 <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003190:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003192:	4867      	ldr	r0, [pc, #412]	; (8003330 <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003194:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003196:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003198:	4622      	mov	r2, r4
 800319a:	214e      	movs	r1, #78	; 0x4e
 800319c:	9500      	str	r5, [sp, #0]
 800319e:	4862      	ldr	r0, [pc, #392]	; (8003328 <lcd_update_voltage+0x284>)
 80031a0:	f006 f832 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 80031a4:	b007      	add	sp, #28
 80031a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031a8:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031aa:	4a62      	ldr	r2, [pc, #392]	; (8003334 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031ac:	485e      	ldr	r0, [pc, #376]	; (8003328 <lcd_update_voltage+0x284>)
 80031ae:	ac03      	add	r4, sp, #12
 80031b0:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031b2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031b4:	214e      	movs	r1, #78	; 0x4e
 80031b6:	4622      	mov	r2, r4
 80031b8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031ba:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031bc:	f006 f824 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031c0:	2320      	movs	r3, #32
 80031c2:	4d5a      	ldr	r5, [pc, #360]	; (800332c <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80031c4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80031c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031ca:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80031ce:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031d0:	f043 0309 	orr.w	r3, r3, #9
 80031d4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031d8:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031dc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031e0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031e4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031e8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031ec:	2304      	movs	r3, #4
 80031ee:	4622      	mov	r2, r4
 80031f0:	214e      	movs	r1, #78	; 0x4e
 80031f2:	4638      	mov	r0, r7
 80031f4:	9600      	str	r6, [sp, #0]
 80031f6:	f006 f807 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031fa:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e0      	bne.n	80031c4 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003202:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003204:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003206:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003208:	214e      	movs	r1, #78	; 0x4e
 800320a:	4622      	mov	r2, r4
 800320c:	4846      	ldr	r0, [pc, #280]	; (8003328 <lcd_update_voltage+0x284>)
 800320e:	9600      	str	r6, [sp, #0]
 8003210:	f005 fffa 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003214:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0b9      	beq.n	8003190 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800321c:	2764      	movs	r7, #100	; 0x64
 800321e:	4e42      	ldr	r6, [pc, #264]	; (8003328 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003220:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8003222:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003228:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800322c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800322e:	f043 0309 	orr.w	r3, r3, #9
 8003232:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003236:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800323a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800323e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003242:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003246:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800324a:	2304      	movs	r3, #4
 800324c:	4622      	mov	r2, r4
 800324e:	214e      	movs	r1, #78	; 0x4e
 8003250:	4630      	mov	r0, r6
 8003252:	9700      	str	r7, [sp, #0]
 8003254:	f005 ffd8 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003258:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e0      	bne.n	8003222 <lcd_update_voltage+0x17e>
 8003260:	e796      	b.n	8003190 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003262:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003264:	4a34      	ldr	r2, [pc, #208]	; (8003338 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003266:	4830      	ldr	r0, [pc, #192]	; (8003328 <lcd_update_voltage+0x284>)
 8003268:	ac03      	add	r4, sp, #12
 800326a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800326c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800326e:	214e      	movs	r1, #78	; 0x4e
 8003270:	4622      	mov	r2, r4
 8003272:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003274:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003276:	f005 ffc7 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800327a:	2320      	movs	r3, #32
 800327c:	4d2b      	ldr	r5, [pc, #172]	; (800332c <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 800327e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003286:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800328a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800328e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003292:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003296:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800329a:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800329e:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032a2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032a4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032a8:	214e      	movs	r1, #78	; 0x4e
 80032aa:	4622      	mov	r2, r4
 80032ac:	4638      	mov	r0, r7
 80032ae:	9600      	str	r6, [sp, #0]
 80032b0:	f005 ffaa 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e0      	bne.n	800327e <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032be:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032c0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c2:	214e      	movs	r1, #78	; 0x4e
 80032c4:	4622      	mov	r2, r4
 80032c6:	4818      	ldr	r0, [pc, #96]	; (8003328 <lcd_update_voltage+0x284>)
 80032c8:	9600      	str	r6, [sp, #0]
 80032ca:	f005 ff9d 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032ce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f af5c 	beq.w	8003190 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d8:	2764      	movs	r7, #100	; 0x64
 80032da:	4e13      	ldr	r6, [pc, #76]	; (8003328 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80032dc:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80032de:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80032e4:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032e6:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032ea:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032ee:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032f2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032f6:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032fa:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032fe:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003302:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003304:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003308:	4622      	mov	r2, r4
 800330a:	214e      	movs	r1, #78	; 0x4e
 800330c:	4630      	mov	r0, r6
 800330e:	9700      	str	r7, [sp, #0]
 8003310:	f005 ff7a 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003314:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e0      	bne.n	80032de <lcd_update_voltage+0x23a>
 800331c:	e738      	b.n	8003190 <lcd_update_voltage+0xec>
 800331e:	bf00      	nop
 8003320:	08011890 	.word	0x08011890
 8003324:	383c888c 	.word	0x383c888c
 8003328:	20000530 	.word	0x20000530
 800332c:	08011978 	.word	0x08011978
 8003330:	696d595d 	.word	0x696d595d
 8003334:	282ca8ac 	.word	0x282ca8ac
 8003338:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800333c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800333e:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003340:	482e      	ldr	r0, [pc, #184]	; (80033fc <lcd_update_voltage+0x358>)
 8003342:	ac03      	add	r4, sp, #12
 8003344:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003346:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003348:	214e      	movs	r1, #78	; 0x4e
 800334a:	4622      	mov	r2, r4
 800334c:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800334e:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003350:	f005 ff5a 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003354:	2320      	movs	r3, #32
 8003356:	4d2a      	ldr	r5, [pc, #168]	; (8003400 <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003358:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800335a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800335e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003362:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003364:	f043 0309 	orr.w	r3, r3, #9
 8003368:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800336c:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003370:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003374:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003378:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800337c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003380:	2304      	movs	r3, #4
 8003382:	4622      	mov	r2, r4
 8003384:	214e      	movs	r1, #78	; 0x4e
 8003386:	4638      	mov	r0, r7
 8003388:	9600      	str	r6, [sp, #0]
 800338a:	f005 ff3d 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800338e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e0      	bne.n	8003358 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003398:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800339a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800339c:	214e      	movs	r1, #78	; 0x4e
 800339e:	4622      	mov	r2, r4
 80033a0:	4816      	ldr	r0, [pc, #88]	; (80033fc <lcd_update_voltage+0x358>)
 80033a2:	9600      	str	r6, [sp, #0]
 80033a4:	f005 ff30 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f43f aeef 	beq.w	8003190 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033b2:	2764      	movs	r7, #100	; 0x64
 80033b4:	4e11      	ldr	r6, [pc, #68]	; (80033fc <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 80033b6:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80033b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033c0:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033c4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033c8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033cc:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033d0:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033d4:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033d8:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033dc:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033de:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033e2:	214e      	movs	r1, #78	; 0x4e
 80033e4:	4622      	mov	r2, r4
 80033e6:	4630      	mov	r0, r6
 80033e8:	9700      	str	r7, [sp, #0]
 80033ea:	f005 ff0d 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e0      	bne.n	80033b8 <lcd_update_voltage+0x314>
 80033f6:	e6cb      	b.n	8003190 <lcd_update_voltage+0xec>
 80033f8:	787c989c 	.word	0x787c989c
 80033fc:	20000530 	.word	0x20000530
 8003400:	08011978 	.word	0x08011978

08003404 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	4605      	mov	r5, r0
 8003408:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 800340a:	4608      	mov	r0, r1
 800340c:	f7fd f824 	bl	8000458 <__aeabi_f2d>
 8003410:	4606      	mov	r6, r0
 8003412:	460f      	mov	r7, r1
 8003414:	4a9a      	ldr	r2, [pc, #616]	; (8003680 <lcd_update_amperage+0x27c>)
 8003416:	2106      	movs	r1, #6
 8003418:	e9cd 6700 	strd	r6, r7, [sp]
 800341c:	a804      	add	r0, sp, #16
 800341e:	f00a fc11 	bl	800dc44 <sniprintf>
	if(channel == 1){
 8003422:	2d01      	cmp	r5, #1
 8003424:	d009      	beq.n	800343a <lcd_update_amperage+0x36>
	else if(channel == 2){
 8003426:	2d02      	cmp	r5, #2
 8003428:	f000 80cb 	beq.w	80035c2 <lcd_update_amperage+0x1be>
	else if(channel == 3){
 800342c:	2d03      	cmp	r5, #3
 800342e:	f000 8135 	beq.w	800369c <lcd_update_amperage+0x298>
	else if(channel == 4){
 8003432:	2d04      	cmp	r5, #4
 8003434:	d068      	beq.n	8003508 <lcd_update_amperage+0x104>
}
 8003436:	b007      	add	sp, #28
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800343a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800343c:	4a91      	ldr	r2, [pc, #580]	; (8003684 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800343e:	4892      	ldr	r0, [pc, #584]	; (8003688 <lcd_update_amperage+0x284>)
 8003440:	ac03      	add	r4, sp, #12
 8003442:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003444:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003446:	214e      	movs	r1, #78	; 0x4e
 8003448:	4622      	mov	r2, r4
 800344a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800344c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800344e:	f005 fedb 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003452:	2320      	movs	r3, #32
 8003454:	4d8d      	ldr	r5, [pc, #564]	; (800368c <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003456:	011a      	lsls	r2, r3, #4
 8003458:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800345a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800345e:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003462:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003466:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800346a:	f043 0309 	orr.w	r3, r3, #9
 800346e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003472:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003476:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003478:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800347c:	4622      	mov	r2, r4
 800347e:	214e      	movs	r1, #78	; 0x4e
 8003480:	4638      	mov	r0, r7
 8003482:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003484:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003488:	f005 febe 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800348c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e0      	bne.n	8003456 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003494:	4a7b      	ldr	r2, [pc, #492]	; (8003684 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003496:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003498:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800349a:	214e      	movs	r1, #78	; 0x4e
 800349c:	4622      	mov	r2, r4
 800349e:	487a      	ldr	r0, [pc, #488]	; (8003688 <lcd_update_amperage+0x284>)
 80034a0:	9600      	str	r6, [sp, #0]
 80034a2:	f005 feb1 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80034aa:	b30b      	cbz	r3, 80034f0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034ac:	2764      	movs	r7, #100	; 0x64
 80034ae:	4e76      	ldr	r6, [pc, #472]	; (8003688 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80034b0:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80034b2:	011a      	lsls	r2, r3, #4
 80034b4:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80034b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034ba:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034be:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034c2:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034c6:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034ca:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034cc:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034d0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034d4:	4622      	mov	r2, r4
 80034d6:	214e      	movs	r1, #78	; 0x4e
 80034d8:	4630      	mov	r0, r6
 80034da:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034dc:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034e0:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034e4:	f005 fe90 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034e8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e0      	bne.n	80034b2 <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034f2:	4867      	ldr	r0, [pc, #412]	; (8003690 <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034f6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034f8:	4622      	mov	r2, r4
 80034fa:	214e      	movs	r1, #78	; 0x4e
 80034fc:	9500      	str	r5, [sp, #0]
 80034fe:	4862      	ldr	r0, [pc, #392]	; (8003688 <lcd_update_amperage+0x284>)
 8003500:	f005 fe82 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8003504:	b007      	add	sp, #28
 8003506:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003508:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800350a:	4a62      	ldr	r2, [pc, #392]	; (8003694 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800350c:	485e      	ldr	r0, [pc, #376]	; (8003688 <lcd_update_amperage+0x284>)
 800350e:	ac03      	add	r4, sp, #12
 8003510:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003512:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003514:	214e      	movs	r1, #78	; 0x4e
 8003516:	4622      	mov	r2, r4
 8003518:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800351a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800351c:	f005 fe74 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003520:	2320      	movs	r3, #32
 8003522:	4d5a      	ldr	r5, [pc, #360]	; (800368c <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003524:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800352a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800352e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003530:	f043 0309 	orr.w	r3, r3, #9
 8003534:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003538:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800353c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003540:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003544:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003548:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800354c:	2304      	movs	r3, #4
 800354e:	4622      	mov	r2, r4
 8003550:	214e      	movs	r1, #78	; 0x4e
 8003552:	4638      	mov	r0, r7
 8003554:	9600      	str	r6, [sp, #0]
 8003556:	f005 fe57 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800355a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e0      	bne.n	8003524 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003562:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003564:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003566:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003568:	214e      	movs	r1, #78	; 0x4e
 800356a:	4622      	mov	r2, r4
 800356c:	4846      	ldr	r0, [pc, #280]	; (8003688 <lcd_update_amperage+0x284>)
 800356e:	9600      	str	r6, [sp, #0]
 8003570:	f005 fe4a 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003574:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0b9      	beq.n	80034f0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800357c:	2764      	movs	r7, #100	; 0x64
 800357e:	4e42      	ldr	r6, [pc, #264]	; (8003688 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003580:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8003582:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003588:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800358c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800358e:	f043 0309 	orr.w	r3, r3, #9
 8003592:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003596:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800359a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800359e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035a2:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035a6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035aa:	2304      	movs	r3, #4
 80035ac:	4622      	mov	r2, r4
 80035ae:	214e      	movs	r1, #78	; 0x4e
 80035b0:	4630      	mov	r0, r6
 80035b2:	9700      	str	r7, [sp, #0]
 80035b4:	f005 fe28 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e0      	bne.n	8003582 <lcd_update_amperage+0x17e>
 80035c0:	e796      	b.n	80034f0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c2:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035c4:	4a34      	ldr	r2, [pc, #208]	; (8003698 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c6:	4830      	ldr	r0, [pc, #192]	; (8003688 <lcd_update_amperage+0x284>)
 80035c8:	ac03      	add	r4, sp, #12
 80035ca:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035cc:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ce:	214e      	movs	r1, #78	; 0x4e
 80035d0:	4622      	mov	r2, r4
 80035d2:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035d4:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035d6:	f005 fe17 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035da:	2320      	movs	r3, #32
 80035dc:	4d2b      	ldr	r5, [pc, #172]	; (800368c <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 80035de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035e6:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035ea:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035ee:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035f2:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035f6:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035fa:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035fe:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003602:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003604:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003608:	214e      	movs	r1, #78	; 0x4e
 800360a:	4622      	mov	r2, r4
 800360c:	4638      	mov	r0, r7
 800360e:	9600      	str	r6, [sp, #0]
 8003610:	f005 fdfa 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003614:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e0      	bne.n	80035de <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800361e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003620:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003622:	214e      	movs	r1, #78	; 0x4e
 8003624:	4622      	mov	r2, r4
 8003626:	4818      	ldr	r0, [pc, #96]	; (8003688 <lcd_update_amperage+0x284>)
 8003628:	9600      	str	r6, [sp, #0]
 800362a:	f005 fded 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800362e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f43f af5c 	beq.w	80034f0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003638:	2764      	movs	r7, #100	; 0x64
 800363a:	4e13      	ldr	r6, [pc, #76]	; (8003688 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800363c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800363e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003644:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003646:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800364a:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800364e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003652:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003656:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800365a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800365e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003662:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003664:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003668:	4622      	mov	r2, r4
 800366a:	214e      	movs	r1, #78	; 0x4e
 800366c:	4630      	mov	r0, r6
 800366e:	9700      	str	r7, [sp, #0]
 8003670:	f005 fdca 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003674:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e0      	bne.n	800363e <lcd_update_amperage+0x23a>
 800367c:	e738      	b.n	80034f0 <lcd_update_amperage+0xec>
 800367e:	bf00      	nop
 8003680:	080118e8 	.word	0x080118e8
 8003684:	383cc8cc 	.word	0x383cc8cc
 8003688:	20000530 	.word	0x20000530
 800368c:	08011978 	.word	0x08011978
 8003690:	191d494d 	.word	0x191d494d
 8003694:	282ce8ec 	.word	0x282ce8ec
 8003698:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800369c:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800369e:	4a2e      	ldr	r2, [pc, #184]	; (8003758 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036a0:	482e      	ldr	r0, [pc, #184]	; (800375c <lcd_update_amperage+0x358>)
 80036a2:	ac03      	add	r4, sp, #12
 80036a4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036a6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036a8:	214e      	movs	r1, #78	; 0x4e
 80036aa:	4622      	mov	r2, r4
 80036ac:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ae:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036b0:	f005 fdaa 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036b4:	2320      	movs	r3, #32
 80036b6:	4d2a      	ldr	r5, [pc, #168]	; (8003760 <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 80036b8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80036ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036be:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80036c2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036c4:	f043 0309 	orr.w	r3, r3, #9
 80036c8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036cc:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036d0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036d4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036d8:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036dc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036e0:	2304      	movs	r3, #4
 80036e2:	4622      	mov	r2, r4
 80036e4:	214e      	movs	r1, #78	; 0x4e
 80036e6:	4638      	mov	r0, r7
 80036e8:	9600      	str	r6, [sp, #0]
 80036ea:	f005 fd8d 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e0      	bne.n	80036b8 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036f8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036fa:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036fc:	214e      	movs	r1, #78	; 0x4e
 80036fe:	4622      	mov	r2, r4
 8003700:	4816      	ldr	r0, [pc, #88]	; (800375c <lcd_update_amperage+0x358>)
 8003702:	9600      	str	r6, [sp, #0]
 8003704:	f005 fd80 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003708:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f43f aeef 	beq.w	80034f0 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003712:	2764      	movs	r7, #100	; 0x64
 8003714:	4e11      	ldr	r6, [pc, #68]	; (800375c <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 8003716:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8003718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003720:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003724:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003728:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800372c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003730:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003734:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003738:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800373c:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800373e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003742:	214e      	movs	r1, #78	; 0x4e
 8003744:	4622      	mov	r2, r4
 8003746:	4630      	mov	r0, r6
 8003748:	9700      	str	r7, [sp, #0]
 800374a:	f005 fd5d 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800374e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e0      	bne.n	8003718 <lcd_update_amperage+0x314>
 8003756:	e6cb      	b.n	80034f0 <lcd_update_amperage+0xec>
 8003758:	787cd8dc 	.word	0x787cd8dc
 800375c:	20000530 	.word	0x20000530
 8003760:	08011978 	.word	0x08011978

08003764 <lcd_psu_update>:
void lcd_psu_update(void){
 8003764:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003766:	2464      	movs	r4, #100	; 0x64
void lcd_psu_update(void){
 8003768:	b084      	sub	sp, #16
	lcd_psu_init();
 800376a:	f7ff fa6b 	bl	8002c44 <lcd_psu_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800376e:	49a5      	ldr	r1, [pc, #660]	; (8003a04 <lcd_psu_update+0x2a0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003770:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003772:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003774:	48a4      	ldr	r0, [pc, #656]	; (8003a08 <lcd_psu_update+0x2a4>)
 8003776:	214e      	movs	r1, #78	; 0x4e
 8003778:	aa03      	add	r2, sp, #12
 800377a:	9400      	str	r4, [sp, #0]
 800377c:	f005 fd44 	bl	8009208 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 8003780:	4ba2      	ldr	r3, [pc, #648]	; (8003a0c <lcd_psu_update+0x2a8>)
 8003782:	781d      	ldrb	r5, [r3, #0]
 8003784:	b165      	cbz	r5, 80037a0 <lcd_psu_update+0x3c>
	else if(kpenum == V1){
 8003786:	2d01      	cmp	r5, #1
 8003788:	f000 815e 	beq.w	8003a48 <lcd_psu_update+0x2e4>
	else if(kpenum == V2){
 800378c:	2d03      	cmp	r5, #3
 800378e:	d032      	beq.n	80037f6 <lcd_psu_update+0x92>
	else if(kpenum == A1){
 8003790:	2d02      	cmp	r5, #2
 8003792:	f000 8299 	beq.w	8003cc8 <lcd_psu_update+0x564>
	else if(kpenum == A2){
 8003796:	2d04      	cmp	r5, #4
 8003798:	f000 8316 	beq.w	8003dc8 <lcd_psu_update+0x664>
}
 800379c:	b004      	add	sp, #16
 800379e:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 80037a0:	4b9b      	ldr	r3, [pc, #620]	; (8003a10 <lcd_psu_update+0x2ac>)
 80037a2:	2001      	movs	r0, #1
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	f7ff fc7d 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80037aa:	4b9a      	ldr	r3, [pc, #616]	; (8003a14 <lcd_psu_update+0x2b0>)
 80037ac:	2001      	movs	r0, #1
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	f7ff fe28 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80037b4:	4b98      	ldr	r3, [pc, #608]	; (8003a18 <lcd_psu_update+0x2b4>)
 80037b6:	2002      	movs	r0, #2
 80037b8:	6819      	ldr	r1, [r3, #0]
 80037ba:	f7ff fc73 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80037be:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <lcd_psu_update+0x2b8>)
 80037c0:	2002      	movs	r0, #2
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	f7ff fe1e 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 80037c8:	4b95      	ldr	r3, [pc, #596]	; (8003a20 <lcd_psu_update+0x2bc>)
 80037ca:	2003      	movs	r0, #3
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	f7ff fc69 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 80037d2:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <lcd_psu_update+0x2c0>)
 80037d4:	2003      	movs	r0, #3
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	f7ff fe14 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80037dc:	4b92      	ldr	r3, [pc, #584]	; (8003a28 <lcd_psu_update+0x2c4>)
 80037de:	2004      	movs	r0, #4
 80037e0:	6819      	ldr	r1, [r3, #0]
 80037e2:	f7ff fc5f 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80037e6:	2004      	movs	r0, #4
 80037e8:	4b90      	ldr	r3, [pc, #576]	; (8003a2c <lcd_psu_update+0x2c8>)
 80037ea:	6819      	ldr	r1, [r3, #0]
}
 80037ec:	b004      	add	sp, #16
 80037ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 80037f2:	f7ff be07 	b.w	8003404 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 80037f6:	4b86      	ldr	r3, [pc, #536]	; (8003a10 <lcd_psu_update+0x2ac>)
 80037f8:	2001      	movs	r0, #1
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	f7ff fc52 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003800:	4b84      	ldr	r3, [pc, #528]	; (8003a14 <lcd_psu_update+0x2b0>)
 8003802:	2001      	movs	r0, #1
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	f7ff fdfd 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 800380a:	4b83      	ldr	r3, [pc, #524]	; (8003a18 <lcd_psu_update+0x2b4>)
 800380c:	2002      	movs	r0, #2
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	f7ff fc48 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003814:	4b81      	ldr	r3, [pc, #516]	; (8003a1c <lcd_psu_update+0x2b8>)
 8003816:	2002      	movs	r0, #2
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	f7ff fdf3 	bl	8003404 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 800381e:	4b81      	ldr	r3, [pc, #516]	; (8003a24 <lcd_psu_update+0x2c0>)
 8003820:	4628      	mov	r0, r5
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	f7ff fdee 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003828:	4b7f      	ldr	r3, [pc, #508]	; (8003a28 <lcd_psu_update+0x2c4>)
 800382a:	2004      	movs	r0, #4
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	f7ff fc39 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003832:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <lcd_psu_update+0x2c8>)
 8003834:	2004      	movs	r0, #4
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	f7ff fde4 	bl	8003404 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800383c:	497c      	ldr	r1, [pc, #496]	; (8003a30 <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800383e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003840:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003842:	4871      	ldr	r0, [pc, #452]	; (8003a08 <lcd_psu_update+0x2a4>)
 8003844:	214e      	movs	r1, #78	; 0x4e
 8003846:	aa03      	add	r2, sp, #12
 8003848:	9400      	str	r4, [sp, #0]
 800384a:	f005 fcdd 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800384e:	2320      	movs	r3, #32
 8003850:	4d78      	ldr	r5, [pc, #480]	; (8003a34 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003852:	4e6d      	ldr	r6, [pc, #436]	; (8003a08 <lcd_psu_update+0x2a4>)
	data_l = ((data<<4)&0xf0);
 8003854:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800385a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800385e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003860:	f043 0309 	orr.w	r3, r3, #9
 8003864:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003868:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800386c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003870:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003874:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003878:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800387c:	2304      	movs	r3, #4
 800387e:	214e      	movs	r1, #78	; 0x4e
 8003880:	4630      	mov	r0, r6
 8003882:	9400      	str	r4, [sp, #0]
 8003884:	aa03      	add	r2, sp, #12
 8003886:	f005 fcbf 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800388a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e0      	bne.n	8003854 <lcd_psu_update+0xf0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003892:	4967      	ldr	r1, [pc, #412]	; (8003a30 <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003894:	2304      	movs	r3, #4
 8003896:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003898:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800389a:	485b      	ldr	r0, [pc, #364]	; (8003a08 <lcd_psu_update+0x2a4>)
 800389c:	214e      	movs	r1, #78	; 0x4e
 800389e:	9400      	str	r4, [sp, #0]
 80038a0:	f005 fcb2 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80038a4:	4964      	ldr	r1, [pc, #400]	; (8003a38 <lcd_psu_update+0x2d4>)
		if(keypadarr[0] != 'z'){
 80038a6:	4d65      	ldr	r5, [pc, #404]	; (8003a3c <lcd_psu_update+0x2d8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038a8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80038aa:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038ac:	4856      	ldr	r0, [pc, #344]	; (8003a08 <lcd_psu_update+0x2a4>)
 80038ae:	214e      	movs	r1, #78	; 0x4e
 80038b0:	aa03      	add	r2, sp, #12
 80038b2:	9400      	str	r4, [sp, #0]
 80038b4:	f005 fca8 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 80038b8:	782b      	ldrb	r3, [r5, #0]
 80038ba:	2b7a      	cmp	r3, #122	; 0x7a
 80038bc:	d01a      	beq.n	80038f4 <lcd_psu_update+0x190>
	data_u = (data&0xf0);
 80038be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038c6:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038ca:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038ce:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038d2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038d6:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038da:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038de:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038e2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038e6:	2304      	movs	r3, #4
 80038e8:	214e      	movs	r1, #78	; 0x4e
 80038ea:	4847      	ldr	r0, [pc, #284]	; (8003a08 <lcd_psu_update+0x2a4>)
 80038ec:	9400      	str	r4, [sp, #0]
 80038ee:	aa03      	add	r2, sp, #12
 80038f0:	f005 fc8a 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 80038f4:	786b      	ldrb	r3, [r5, #1]
 80038f6:	2b7a      	cmp	r3, #122	; 0x7a
 80038f8:	d01b      	beq.n	8003932 <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038fa:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80038fc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80038fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003902:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003906:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003908:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800390c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003910:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003914:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003918:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800391c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003920:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003924:	2304      	movs	r3, #4
 8003926:	214e      	movs	r1, #78	; 0x4e
 8003928:	4837      	ldr	r0, [pc, #220]	; (8003a08 <lcd_psu_update+0x2a4>)
 800392a:	aa03      	add	r2, sp, #12
 800392c:	9400      	str	r4, [sp, #0]
 800392e:	f005 fc6b 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003932:	78ab      	ldrb	r3, [r5, #2]
 8003934:	2b7a      	cmp	r3, #122	; 0x7a
 8003936:	d01b      	beq.n	8003970 <lcd_psu_update+0x20c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003938:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800393a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800393c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003940:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003944:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003946:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800394a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800394e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003952:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003956:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800395a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800395e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003962:	2304      	movs	r3, #4
 8003964:	214e      	movs	r1, #78	; 0x4e
 8003966:	4828      	ldr	r0, [pc, #160]	; (8003a08 <lcd_psu_update+0x2a4>)
 8003968:	aa03      	add	r2, sp, #12
 800396a:	9400      	str	r4, [sp, #0]
 800396c:	f005 fc4c 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003970:	78eb      	ldrb	r3, [r5, #3]
 8003972:	2b7a      	cmp	r3, #122	; 0x7a
 8003974:	d01b      	beq.n	80039ae <lcd_psu_update+0x24a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003976:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003978:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800397a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800397e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003982:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003984:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003988:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800398c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003990:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003994:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003998:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800399c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039a0:	2304      	movs	r3, #4
 80039a2:	214e      	movs	r1, #78	; 0x4e
 80039a4:	4818      	ldr	r0, [pc, #96]	; (8003a08 <lcd_psu_update+0x2a4>)
 80039a6:	aa03      	add	r2, sp, #12
 80039a8:	9400      	str	r4, [sp, #0]
 80039aa:	f005 fc2d 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 80039ae:	792b      	ldrb	r3, [r5, #4]
 80039b0:	2b7a      	cmp	r3, #122	; 0x7a
 80039b2:	d01b      	beq.n	80039ec <lcd_psu_update+0x288>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039b4:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80039b6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80039b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80039bc:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039be:	f043 010d 	orr.w	r1, r3, #13
 80039c2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039c6:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039ca:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039ce:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039d2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039d6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039da:	9000      	str	r0, [sp, #0]
 80039dc:	2304      	movs	r3, #4
 80039de:	214e      	movs	r1, #78	; 0x4e
 80039e0:	4809      	ldr	r0, [pc, #36]	; (8003a08 <lcd_psu_update+0x2a4>)
 80039e2:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039e4:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039e8:	f005 fc0e 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(encmode){
 80039ec:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <lcd_psu_update+0x2dc>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f43f aed3 	beq.w	800379c <lcd_psu_update+0x38>
			lcd_put_cur(2, 3 + encpos);
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <lcd_psu_update+0x2e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039f8:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 80039fa:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x94;	//0x80|0x14 for row 3 col 2
 80039fe:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 8003a00:	e127      	b.n	8003c52 <lcd_psu_update+0x4ee>
 8003a02:	bf00      	nop
 8003a04:	c8cc080c 	.word	0xc8cc080c
 8003a08:	20000530 	.word	0x20000530
 8003a0c:	20000749 	.word	0x20000749
 8003a10:	20000a6c 	.word	0x20000a6c
 8003a14:	200003dc 	.word	0x200003dc
 8003a18:	20000750 	.word	0x20000750
 8003a1c:	200003ec 	.word	0x200003ec
 8003a20:	20000a70 	.word	0x20000a70
 8003a24:	200003e0 	.word	0x200003e0
 8003a28:	2000074c 	.word	0x2000074c
 8003a2c:	200003e8 	.word	0x200003e8
 8003a30:	787c989c 	.word	0x787c989c
 8003a34:	08011978 	.word	0x08011978
 8003a38:	f8fc080c 	.word	0xf8fc080c
 8003a3c:	20000008 	.word	0x20000008
 8003a40:	200003f0 	.word	0x200003f0
 8003a44:	200003f1 	.word	0x200003f1
		lcd_update_amperage(1,amp_set_aux);
 8003a48:	4b91      	ldr	r3, [pc, #580]	; (8003c90 <lcd_psu_update+0x52c>)
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	f7ff fcd9 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003a52:	4b90      	ldr	r3, [pc, #576]	; (8003c94 <lcd_psu_update+0x530>)
 8003a54:	2002      	movs	r0, #2
 8003a56:	6819      	ldr	r1, [r3, #0]
 8003a58:	f7ff fb24 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003a5c:	4b8e      	ldr	r3, [pc, #568]	; (8003c98 <lcd_psu_update+0x534>)
 8003a5e:	2002      	movs	r0, #2
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	f7ff fccf 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003a66:	4b8d      	ldr	r3, [pc, #564]	; (8003c9c <lcd_psu_update+0x538>)
 8003a68:	2003      	movs	r0, #3
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	f7ff fb1a 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003a70:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <lcd_psu_update+0x53c>)
 8003a72:	2003      	movs	r0, #3
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	f7ff fcc5 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003a7a:	4b8a      	ldr	r3, [pc, #552]	; (8003ca4 <lcd_psu_update+0x540>)
 8003a7c:	2004      	movs	r0, #4
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	f7ff fb10 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003a84:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <lcd_psu_update+0x544>)
 8003a86:	2004      	movs	r0, #4
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	f7ff fcbb 	bl	8003404 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a8e:	4987      	ldr	r1, [pc, #540]	; (8003cac <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a90:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a92:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a94:	4886      	ldr	r0, [pc, #536]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003a96:	214e      	movs	r1, #78	; 0x4e
 8003a98:	aa03      	add	r2, sp, #12
 8003a9a:	9400      	str	r4, [sp, #0]
 8003a9c:	f005 fbb4 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	4d84      	ldr	r5, [pc, #528]	; (8003cb4 <lcd_psu_update+0x550>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003aa4:	4e82      	ldr	r6, [pc, #520]	; (8003cb0 <lcd_psu_update+0x54c>)
	data_u = (data&0xf0);
 8003aa6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003aae:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ab2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ab6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003aba:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003abe:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ac2:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ac6:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003aca:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003acc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ad0:	214e      	movs	r1, #78	; 0x4e
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	9400      	str	r4, [sp, #0]
 8003ad6:	aa03      	add	r2, sp, #12
 8003ad8:	f005 fb96 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003adc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e0      	bne.n	8003aa6 <lcd_psu_update+0x342>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003ae4:	4971      	ldr	r1, [pc, #452]	; (8003cac <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003aea:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003aec:	4870      	ldr	r0, [pc, #448]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003aee:	214e      	movs	r1, #78	; 0x4e
 8003af0:	9400      	str	r4, [sp, #0]
 8003af2:	f005 fb89 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003af6:	4970      	ldr	r1, [pc, #448]	; (8003cb8 <lcd_psu_update+0x554>)
		if(keypadarr[0] != 'z'){
 8003af8:	4d70      	ldr	r5, [pc, #448]	; (8003cbc <lcd_psu_update+0x558>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003afa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003afc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003afe:	486c      	ldr	r0, [pc, #432]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003b00:	214e      	movs	r1, #78	; 0x4e
 8003b02:	aa03      	add	r2, sp, #12
 8003b04:	9400      	str	r4, [sp, #0]
 8003b06:	f005 fb7f 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003b0a:	782b      	ldrb	r3, [r5, #0]
 8003b0c:	2b7a      	cmp	r3, #122	; 0x7a
 8003b0e:	d01a      	beq.n	8003b46 <lcd_psu_update+0x3e2>
	data_u = (data&0xf0);
 8003b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b18:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b1c:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b20:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b24:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b28:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b2c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b30:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b34:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b38:	2304      	movs	r3, #4
 8003b3a:	214e      	movs	r1, #78	; 0x4e
 8003b3c:	485c      	ldr	r0, [pc, #368]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003b3e:	9400      	str	r4, [sp, #0]
 8003b40:	aa03      	add	r2, sp, #12
 8003b42:	f005 fb61 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003b46:	786b      	ldrb	r3, [r5, #1]
 8003b48:	2b7a      	cmp	r3, #122	; 0x7a
 8003b4a:	d01b      	beq.n	8003b84 <lcd_psu_update+0x420>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b4c:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b4e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b54:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b58:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b5a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b5e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b62:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b66:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b6a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b6e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b72:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b76:	2304      	movs	r3, #4
 8003b78:	214e      	movs	r1, #78	; 0x4e
 8003b7a:	484d      	ldr	r0, [pc, #308]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003b7c:	aa03      	add	r2, sp, #12
 8003b7e:	9400      	str	r4, [sp, #0]
 8003b80:	f005 fb42 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003b84:	78ab      	ldrb	r3, [r5, #2]
 8003b86:	2b7a      	cmp	r3, #122	; 0x7a
 8003b88:	d01b      	beq.n	8003bc2 <lcd_psu_update+0x45e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b8a:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b8c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b92:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b96:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b98:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b9c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ba0:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ba4:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ba8:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bac:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bb0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	214e      	movs	r1, #78	; 0x4e
 8003bb8:	483d      	ldr	r0, [pc, #244]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003bba:	aa03      	add	r2, sp, #12
 8003bbc:	9400      	str	r4, [sp, #0]
 8003bbe:	f005 fb23 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003bc2:	78eb      	ldrb	r3, [r5, #3]
 8003bc4:	2b7a      	cmp	r3, #122	; 0x7a
 8003bc6:	d01b      	beq.n	8003c00 <lcd_psu_update+0x49c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bc8:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003bca:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003bd0:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003bd4:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bd6:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003bda:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bde:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003be2:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003be6:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bea:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bee:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	214e      	movs	r1, #78	; 0x4e
 8003bf6:	482e      	ldr	r0, [pc, #184]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003bf8:	aa03      	add	r2, sp, #12
 8003bfa:	9400      	str	r4, [sp, #0]
 8003bfc:	f005 fb04 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003c00:	792b      	ldrb	r3, [r5, #4]
 8003c02:	2b7a      	cmp	r3, #122	; 0x7a
 8003c04:	d01b      	beq.n	8003c3e <lcd_psu_update+0x4da>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c06:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003c08:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003c0e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c10:	f043 010d 	orr.w	r1, r3, #13
 8003c14:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c18:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c1c:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c20:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c24:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c28:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c2c:	9000      	str	r0, [sp, #0]
 8003c2e:	2304      	movs	r3, #4
 8003c30:	214e      	movs	r1, #78	; 0x4e
 8003c32:	481f      	ldr	r0, [pc, #124]	; (8003cb0 <lcd_psu_update+0x54c>)
 8003c34:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c36:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c3a:	f005 fae5 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <lcd_psu_update+0x55c>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f43f adaa 	beq.w	800379c <lcd_psu_update+0x38>
			lcd_put_cur(0, 3 + encpos);
 8003c48:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <lcd_psu_update+0x560>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c4a:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 8003c4c:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x80;
 8003c50:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c52:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003c54:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003c5a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c5e:	f043 000c 	orr.w	r0, r3, #12
 8003c62:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003c66:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003c6a:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003c6e:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003c72:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003c76:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	214e      	movs	r1, #78	; 0x4e
 8003c7e:	9400      	str	r4, [sp, #0]
 8003c80:	480b      	ldr	r0, [pc, #44]	; (8003cb0 <lcd_psu_update+0x54c>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003c82:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c86:	f005 fabf 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	bf00      	nop
 8003c90:	200003dc 	.word	0x200003dc
 8003c94:	20000750 	.word	0x20000750
 8003c98:	200003ec 	.word	0x200003ec
 8003c9c:	20000a70 	.word	0x20000a70
 8003ca0:	200003e0 	.word	0x200003e0
 8003ca4:	2000074c 	.word	0x2000074c
 8003ca8:	200003e8 	.word	0x200003e8
 8003cac:	383c888c 	.word	0x383c888c
 8003cb0:	20000530 	.word	0x20000530
 8003cb4:	08011978 	.word	0x08011978
 8003cb8:	f8fc080c 	.word	0xf8fc080c
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	200003f0 	.word	0x200003f0
 8003cc4:	200003f1 	.word	0x200003f1
		lcd_update_voltage(1,volt_set_aux);
 8003cc8:	4bb9      	ldr	r3, [pc, #740]	; (8003fb0 <lcd_psu_update+0x84c>)
 8003cca:	2001      	movs	r0, #1
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	f7ff f9e9 	bl	80030a4 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 8003cd2:	4bb8      	ldr	r3, [pc, #736]	; (8003fb4 <lcd_psu_update+0x850>)
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	f7ff f9e4 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003cdc:	4bb6      	ldr	r3, [pc, #728]	; (8003fb8 <lcd_psu_update+0x854>)
 8003cde:	4628      	mov	r0, r5
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	f7ff fb8f 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003ce6:	4bb5      	ldr	r3, [pc, #724]	; (8003fbc <lcd_psu_update+0x858>)
 8003ce8:	2003      	movs	r0, #3
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	f7ff f9da 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003cf0:	4bb3      	ldr	r3, [pc, #716]	; (8003fc0 <lcd_psu_update+0x85c>)
 8003cf2:	2003      	movs	r0, #3
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	f7ff fb85 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003cfa:	4bb2      	ldr	r3, [pc, #712]	; (8003fc4 <lcd_psu_update+0x860>)
 8003cfc:	2004      	movs	r0, #4
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	f7ff f9d0 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003d04:	4bb0      	ldr	r3, [pc, #704]	; (8003fc8 <lcd_psu_update+0x864>)
 8003d06:	2004      	movs	r0, #4
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	f7ff fb7b 	bl	8003404 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d0e:	49af      	ldr	r1, [pc, #700]	; (8003fcc <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d10:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d12:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d14:	48ae      	ldr	r0, [pc, #696]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003d16:	214e      	movs	r1, #78	; 0x4e
 8003d18:	aa03      	add	r2, sp, #12
 8003d1a:	9400      	str	r4, [sp, #0]
 8003d1c:	f005 fa74 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003d20:	2320      	movs	r3, #32
 8003d22:	4dac      	ldr	r5, [pc, #688]	; (8003fd4 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d24:	4eaa      	ldr	r6, [pc, #680]	; (8003fd0 <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003d26:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d2c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003d30:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003d32:	f043 0309 	orr.w	r3, r3, #9
 8003d36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d3a:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d3e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d42:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d46:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d4a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d4e:	2304      	movs	r3, #4
 8003d50:	214e      	movs	r1, #78	; 0x4e
 8003d52:	4630      	mov	r0, r6
 8003d54:	9400      	str	r4, [sp, #0]
 8003d56:	aa03      	add	r2, sp, #12
 8003d58:	f005 fa56 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003d5c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e0      	bne.n	8003d26 <lcd_psu_update+0x5c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d64:	4999      	ldr	r1, [pc, #612]	; (8003fcc <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d66:	2304      	movs	r3, #4
 8003d68:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d6a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d6c:	4898      	ldr	r0, [pc, #608]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003d6e:	214e      	movs	r1, #78	; 0x4e
 8003d70:	9400      	str	r4, [sp, #0]
 8003d72:	f005 fa49 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d76:	4998      	ldr	r1, [pc, #608]	; (8003fd8 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003d78:	4d98      	ldr	r5, [pc, #608]	; (8003fdc <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d7a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d7c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d7e:	4894      	ldr	r0, [pc, #592]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003d80:	214e      	movs	r1, #78	; 0x4e
 8003d82:	aa03      	add	r2, sp, #12
 8003d84:	9400      	str	r4, [sp, #0]
 8003d86:	f005 fa3f 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003d8a:	782b      	ldrb	r3, [r5, #0]
 8003d8c:	2b7a      	cmp	r3, #122	; 0x7a
 8003d8e:	f040 812f 	bne.w	8003ff0 <lcd_psu_update+0x88c>
		if(keypadarr[1] != 'z'){
 8003d92:	786b      	ldrb	r3, [r5, #1]
 8003d94:	2b7a      	cmp	r3, #122	; 0x7a
 8003d96:	f040 80ee 	bne.w	8003f76 <lcd_psu_update+0x812>
		if(keypadarr[2] != 'z'){
 8003d9a:	78ab      	ldrb	r3, [r5, #2]
 8003d9c:	2b7a      	cmp	r3, #122	; 0x7a
 8003d9e:	f040 80cd 	bne.w	8003f3c <lcd_psu_update+0x7d8>
		if(keypadarr[3] != 'z'){
 8003da2:	78eb      	ldrb	r3, [r5, #3]
 8003da4:	2b7a      	cmp	r3, #122	; 0x7a
 8003da6:	f040 80ac 	bne.w	8003f02 <lcd_psu_update+0x79e>
		if(keypadarr[4] != 'z'){
 8003daa:	792b      	ldrb	r3, [r5, #4]
 8003dac:	2b7a      	cmp	r3, #122	; 0x7a
 8003dae:	f040 808b 	bne.w	8003ec8 <lcd_psu_update+0x764>
		if(encmode){
 8003db2:	4b8b      	ldr	r3, [pc, #556]	; (8003fe0 <lcd_psu_update+0x87c>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f43f acf0 	beq.w	800379c <lcd_psu_update+0x38>
			lcd_put_cur(1, 3 + encpos);
 8003dbc:	4b89      	ldr	r3, [pc, #548]	; (8003fe4 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003dbe:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 8003dc0:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xC0;  //C0
 8003dc4:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 8003dc6:	e744      	b.n	8003c52 <lcd_psu_update+0x4ee>
		lcd_update_voltage(1,volt_set_aux);
 8003dc8:	4b79      	ldr	r3, [pc, #484]	; (8003fb0 <lcd_psu_update+0x84c>)
 8003dca:	2001      	movs	r0, #1
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	f7ff f969 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003dd2:	4b85      	ldr	r3, [pc, #532]	; (8003fe8 <lcd_psu_update+0x884>)
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	f7ff fb14 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003ddc:	4b75      	ldr	r3, [pc, #468]	; (8003fb4 <lcd_psu_update+0x850>)
 8003dde:	2002      	movs	r0, #2
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	f7ff f95f 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003de6:	4b74      	ldr	r3, [pc, #464]	; (8003fb8 <lcd_psu_update+0x854>)
 8003de8:	2002      	movs	r0, #2
 8003dea:	6819      	ldr	r1, [r3, #0]
 8003dec:	f7ff fb0a 	bl	8003404 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003df0:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <lcd_psu_update+0x858>)
 8003df2:	2003      	movs	r0, #3
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	f7ff f955 	bl	80030a4 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <lcd_psu_update+0x860>)
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	f7ff f950 	bl	80030a4 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003e04:	4b70      	ldr	r3, [pc, #448]	; (8003fc8 <lcd_psu_update+0x864>)
 8003e06:	4628      	mov	r0, r5
 8003e08:	6819      	ldr	r1, [r3, #0]
 8003e0a:	f7ff fafb 	bl	8003404 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e0e:	4977      	ldr	r1, [pc, #476]	; (8003fec <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e10:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e12:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e14:	486e      	ldr	r0, [pc, #440]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003e16:	214e      	movs	r1, #78	; 0x4e
 8003e18:	aa03      	add	r2, sp, #12
 8003e1a:	9400      	str	r4, [sp, #0]
 8003e1c:	f005 f9f4 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003e20:	2320      	movs	r3, #32
 8003e22:	4d6c      	ldr	r5, [pc, #432]	; (8003fd4 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e24:	4e6a      	ldr	r6, [pc, #424]	; (8003fd0 <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003e26:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e2c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003e30:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003e32:	f043 0309 	orr.w	r3, r3, #9
 8003e36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e3a:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e3e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e42:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e46:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e4a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e4e:	2304      	movs	r3, #4
 8003e50:	214e      	movs	r1, #78	; 0x4e
 8003e52:	4630      	mov	r0, r6
 8003e54:	9400      	str	r4, [sp, #0]
 8003e56:	aa03      	add	r2, sp, #12
 8003e58:	f005 f9d6 	bl	8009208 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003e5c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e0      	bne.n	8003e26 <lcd_psu_update+0x6c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e64:	4961      	ldr	r1, [pc, #388]	; (8003fec <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e66:	2304      	movs	r3, #4
 8003e68:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e6a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e6c:	4858      	ldr	r0, [pc, #352]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003e6e:	214e      	movs	r1, #78	; 0x4e
 8003e70:	9400      	str	r4, [sp, #0]
 8003e72:	f005 f9c9 	bl	8009208 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e76:	4958      	ldr	r1, [pc, #352]	; (8003fd8 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003e78:	4d58      	ldr	r5, [pc, #352]	; (8003fdc <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e7a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e7c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e7e:	4854      	ldr	r0, [pc, #336]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003e80:	214e      	movs	r1, #78	; 0x4e
 8003e82:	aa03      	add	r2, sp, #12
 8003e84:	9400      	str	r4, [sp, #0]
 8003e86:	f005 f9bf 	bl	8009208 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003e8a:	782b      	ldrb	r3, [r5, #0]
 8003e8c:	2b7a      	cmp	r3, #122	; 0x7a
 8003e8e:	f040 80e8 	bne.w	8004062 <lcd_psu_update+0x8fe>
		if(keypadarr[1] != 'z'){
 8003e92:	786b      	ldrb	r3, [r5, #1]
 8003e94:	2b7a      	cmp	r3, #122	; 0x7a
 8003e96:	f040 80c7 	bne.w	8004028 <lcd_psu_update+0x8c4>
		if(keypadarr[2] != 'z'){
 8003e9a:	78ab      	ldrb	r3, [r5, #2]
 8003e9c:	2b7a      	cmp	r3, #122	; 0x7a
 8003e9e:	f040 8136 	bne.w	800410e <lcd_psu_update+0x9aa>
		if(keypadarr[3] != 'z'){
 8003ea2:	78eb      	ldrb	r3, [r5, #3]
 8003ea4:	2b7a      	cmp	r3, #122	; 0x7a
 8003ea6:	f040 8115 	bne.w	80040d4 <lcd_psu_update+0x970>
		if(keypadarr[4] != 'z'){
 8003eaa:	792b      	ldrb	r3, [r5, #4]
 8003eac:	2b7a      	cmp	r3, #122	; 0x7a
 8003eae:	f040 80f4 	bne.w	800409a <lcd_psu_update+0x936>
		if(encmode){
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	; (8003fe0 <lcd_psu_update+0x87c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f43f ac70 	beq.w	800379c <lcd_psu_update+0x38>
			lcd_put_cur(3, 3 + encpos);
 8003ebc:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ebe:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 8003ec0:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xD4;
 8003ec4:	33d7      	adds	r3, #215	; 0xd7
 8003ec6:	e6c4      	b.n	8003c52 <lcd_psu_update+0x4ee>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ec8:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003eca:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003ed0:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ed2:	f043 010d 	orr.w	r1, r3, #13
 8003ed6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003eda:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ede:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ee2:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ee6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003eea:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eee:	9000      	str	r0, [sp, #0]
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	214e      	movs	r1, #78	; 0x4e
 8003ef4:	aa03      	add	r2, sp, #12
 8003ef6:	4836      	ldr	r0, [pc, #216]	; (8003fd0 <lcd_psu_update+0x86c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ef8:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003efc:	f005 f984 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8003f00:	e757      	b.n	8003db2 <lcd_psu_update+0x64e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f02:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f04:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f0a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f0e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f10:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f14:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f18:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f1c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f20:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f24:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f28:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	214e      	movs	r1, #78	; 0x4e
 8003f30:	aa03      	add	r2, sp, #12
 8003f32:	9400      	str	r4, [sp, #0]
 8003f34:	4826      	ldr	r0, [pc, #152]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003f36:	f005 f967 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8003f3a:	e736      	b.n	8003daa <lcd_psu_update+0x646>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f3c:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f3e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f44:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f48:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f4a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f4e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f52:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f56:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f5a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f5e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f62:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f66:	2304      	movs	r3, #4
 8003f68:	214e      	movs	r1, #78	; 0x4e
 8003f6a:	aa03      	add	r2, sp, #12
 8003f6c:	9400      	str	r4, [sp, #0]
 8003f6e:	4818      	ldr	r0, [pc, #96]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003f70:	f005 f94a 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8003f74:	e715      	b.n	8003da2 <lcd_psu_update+0x63e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f76:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f78:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f7e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f82:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f84:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f88:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f8c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f90:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f94:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f98:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f9c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	214e      	movs	r1, #78	; 0x4e
 8003fa4:	aa03      	add	r2, sp, #12
 8003fa6:	9400      	str	r4, [sp, #0]
 8003fa8:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <lcd_psu_update+0x86c>)
 8003faa:	f005 f92d 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8003fae:	e6f4      	b.n	8003d9a <lcd_psu_update+0x636>
 8003fb0:	20000a6c 	.word	0x20000a6c
 8003fb4:	20000750 	.word	0x20000750
 8003fb8:	200003ec 	.word	0x200003ec
 8003fbc:	20000a70 	.word	0x20000a70
 8003fc0:	200003e0 	.word	0x200003e0
 8003fc4:	2000074c 	.word	0x2000074c
 8003fc8:	200003e8 	.word	0x200003e8
 8003fcc:	383cc8cc 	.word	0x383cc8cc
 8003fd0:	20000530 	.word	0x20000530
 8003fd4:	08011978 	.word	0x08011978
 8003fd8:	f8fc080c 	.word	0xf8fc080c
 8003fdc:	20000008 	.word	0x20000008
 8003fe0:	200003f0 	.word	0x200003f0
 8003fe4:	200003f1 	.word	0x200003f1
 8003fe8:	200003dc 	.word	0x200003dc
 8003fec:	787cd8dc 	.word	0x787cd8dc
	data_u = (data&0xf0);
 8003ff0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ff8:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ffc:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004000:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004004:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004008:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800400c:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004010:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004014:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004018:	2304      	movs	r3, #4
 800401a:	214e      	movs	r1, #78	; 0x4e
 800401c:	9400      	str	r4, [sp, #0]
 800401e:	aa03      	add	r2, sp, #12
 8004020:	4849      	ldr	r0, [pc, #292]	; (8004148 <lcd_psu_update+0x9e4>)
 8004022:	f005 f8f1 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8004026:	e6b4      	b.n	8003d92 <lcd_psu_update+0x62e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004028:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800402a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800402c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004030:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8004034:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004036:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800403a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800403e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004042:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004046:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800404a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800404e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004052:	2304      	movs	r3, #4
 8004054:	214e      	movs	r1, #78	; 0x4e
 8004056:	aa03      	add	r2, sp, #12
 8004058:	9400      	str	r4, [sp, #0]
 800405a:	483b      	ldr	r0, [pc, #236]	; (8004148 <lcd_psu_update+0x9e4>)
 800405c:	f005 f8d4 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8004060:	e71b      	b.n	8003e9a <lcd_psu_update+0x736>
	data_u = (data&0xf0);
 8004062:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800406a:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800406e:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004072:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004076:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800407a:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800407e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004082:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004086:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800408a:	2304      	movs	r3, #4
 800408c:	214e      	movs	r1, #78	; 0x4e
 800408e:	9400      	str	r4, [sp, #0]
 8004090:	aa03      	add	r2, sp, #12
 8004092:	482d      	ldr	r0, [pc, #180]	; (8004148 <lcd_psu_update+0x9e4>)
 8004094:	f005 f8b8 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8004098:	e6fb      	b.n	8003e92 <lcd_psu_update+0x72e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800409a:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800409c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800409e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80040a2:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040a4:	f043 010d 	orr.w	r1, r3, #13
 80040a8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040ac:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040b0:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040b4:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040b8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040bc:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040c0:	9000      	str	r0, [sp, #0]
 80040c2:	2304      	movs	r3, #4
 80040c4:	214e      	movs	r1, #78	; 0x4e
 80040c6:	aa03      	add	r2, sp, #12
 80040c8:	481f      	ldr	r0, [pc, #124]	; (8004148 <lcd_psu_update+0x9e4>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040ca:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040ce:	f005 f89b 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 80040d2:	e6ee      	b.n	8003eb2 <lcd_psu_update+0x74e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040d4:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80040d6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80040d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040dc:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80040e0:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040e2:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040e6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040ea:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040ee:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040f2:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040f6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040fa:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040fe:	2304      	movs	r3, #4
 8004100:	214e      	movs	r1, #78	; 0x4e
 8004102:	aa03      	add	r2, sp, #12
 8004104:	9400      	str	r4, [sp, #0]
 8004106:	4810      	ldr	r0, [pc, #64]	; (8004148 <lcd_psu_update+0x9e4>)
 8004108:	f005 f87e 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 800410c:	e6cd      	b.n	8003eaa <lcd_psu_update+0x746>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800410e:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004110:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004116:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800411a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800411c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004120:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004124:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004128:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800412c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004130:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004134:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004138:	2304      	movs	r3, #4
 800413a:	214e      	movs	r1, #78	; 0x4e
 800413c:	aa03      	add	r2, sp, #12
 800413e:	9400      	str	r4, [sp, #0]
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <lcd_psu_update+0x9e4>)
 8004142:	f005 f861 	bl	8009208 <HAL_I2C_Master_Transmit>
}
 8004146:	e6ac      	b.n	8003ea2 <lcd_psu_update+0x73e>
 8004148:	20000530 	.word	0x20000530

0800414c <translate_keypad>:
float translate_keypad(void){
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(keypadarr[i] == '.'){
 8004150:	4db8      	ldr	r5, [pc, #736]	; (8004434 <translate_keypad+0x2e8>)
 8004152:	f895 8000 	ldrb.w	r8, [r5]
 8004156:	786e      	ldrb	r6, [r5, #1]
 8004158:	f1b8 032e 	subs.w	r3, r8, #46	; 0x2e
 800415c:	78af      	ldrb	r7, [r5, #2]
 800415e:	bf18      	it	ne
 8004160:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 8004164:	2e2e      	cmp	r6, #46	; 0x2e
 8004166:	bf08      	it	eq
 8004168:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 800416a:	2f2e      	cmp	r7, #46	; 0x2e
 800416c:	f000 80e4 	beq.w	8004338 <translate_keypad+0x1ec>
 8004170:	f895 9003 	ldrb.w	r9, [r5, #3]
 8004174:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004178:	d051      	beq.n	800421e <translate_keypad+0xd2>
 800417a:	7928      	ldrb	r0, [r5, #4]
 800417c:	282e      	cmp	r0, #46	; 0x2e
 800417e:	f000 8141 	beq.w	8004404 <translate_keypad+0x2b8>
	if(decimallocation == -1){
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	f040 8141 	bne.w	800440a <translate_keypad+0x2be>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004188:	3830      	subs	r0, #48	; 0x30
 800418a:	b2c3      	uxtb	r3, r0
 800418c:	2b09      	cmp	r3, #9
 800418e:	f240 8127 	bls.w	80043e0 <translate_keypad+0x294>
		int count = 1;
 8004192:	2501      	movs	r5, #1
	float num = 0;
 8004194:	2400      	movs	r4, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004196:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 800419a:	fa5f f389 	uxtb.w	r3, r9
 800419e:	2b09      	cmp	r3, #9
 80041a0:	d80b      	bhi.n	80041ba <translate_keypad+0x6e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80041a2:	fb05 f009 	mul.w	r0, r5, r9
 80041a6:	f7fc fdb1 	bl	8000d0c <__aeabi_i2f>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7fc fcf9 	bl	8000ba4 <__addsf3>
 80041b2:	4604      	mov	r4, r0
				count = count * 10;
 80041b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041b8:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041ba:	3f30      	subs	r7, #48	; 0x30
 80041bc:	b2fb      	uxtb	r3, r7
 80041be:	2b09      	cmp	r3, #9
 80041c0:	d80b      	bhi.n	80041da <translate_keypad+0x8e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80041c2:	fb05 f007 	mul.w	r0, r5, r7
 80041c6:	f7fc fda1 	bl	8000d0c <__aeabi_i2f>
 80041ca:	4601      	mov	r1, r0
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7fc fce9 	bl	8000ba4 <__addsf3>
 80041d2:	4604      	mov	r4, r0
				count = count * 10;
 80041d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041d8:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041da:	3e30      	subs	r6, #48	; 0x30
 80041dc:	b2f3      	uxtb	r3, r6
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d80b      	bhi.n	80041fa <translate_keypad+0xae>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80041e2:	fb05 f006 	mul.w	r0, r5, r6
 80041e6:	f7fc fd91 	bl	8000d0c <__aeabi_i2f>
 80041ea:	4601      	mov	r1, r0
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7fc fcd9 	bl	8000ba4 <__addsf3>
 80041f2:	4604      	mov	r4, r0
				count = count * 10;
 80041f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041f8:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041fa:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80041fe:	fa5f f388 	uxtb.w	r3, r8
 8004202:	2b09      	cmp	r3, #9
 8004204:	d808      	bhi.n	8004218 <translate_keypad+0xcc>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004206:	fb05 f008 	mul.w	r0, r5, r8
 800420a:	f7fc fd7f 	bl	8000d0c <__aeabi_i2f>
 800420e:	4601      	mov	r1, r0
 8004210:	4620      	mov	r0, r4
 8004212:	f7fc fcc7 	bl	8000ba4 <__addsf3>
 8004216:	4604      	mov	r4, r0
}
 8004218:	4620      	mov	r0, r4
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 800421e:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 8004220:	2b2e      	cmp	r3, #46	; 0x2e
 8004222:	bf0c      	ite	eq
 8004224:	f04f 0904 	moveq.w	r9, #4
 8004228:	f04f 0903 	movne.w	r9, #3
		for(int i = decimallocation-1; i >=0; i--){
 800422c:	f109 37ff 	add.w	r7, r9, #4294967295
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004230:	5de8      	ldrb	r0, [r5, r7]
 8004232:	3830      	subs	r0, #48	; 0x30
 8004234:	b2c3      	uxtb	r3, r0
 8004236:	2b09      	cmp	r3, #9
 8004238:	f240 808b 	bls.w	8004352 <translate_keypad+0x206>
		int count = 1;
 800423c:	2601      	movs	r6, #1
	float num = 0;
 800423e:	2400      	movs	r4, #0
		for(int i = decimallocation-1; i >=0; i--){
 8004240:	1e7b      	subs	r3, r7, #1
 8004242:	2f00      	cmp	r7, #0
 8004244:	f000 80a6 	beq.w	8004394 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004248:	5ce8      	ldrb	r0, [r5, r3]
 800424a:	3830      	subs	r0, #48	; 0x30
 800424c:	b2c3      	uxtb	r3, r0
 800424e:	2b09      	cmp	r3, #9
 8004250:	d80b      	bhi.n	800426a <translate_keypad+0x11e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004252:	fb06 f000 	mul.w	r0, r6, r0
 8004256:	f7fc fd59 	bl	8000d0c <__aeabi_i2f>
 800425a:	4601      	mov	r1, r0
 800425c:	4620      	mov	r0, r4
 800425e:	f7fc fca1 	bl	8000ba4 <__addsf3>
 8004262:	4604      	mov	r4, r0
				count = count * 10;
 8004264:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004268:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation-1; i >=0; i--){
 800426a:	2f01      	cmp	r7, #1
 800426c:	f1a7 0a02 	sub.w	sl, r7, #2
 8004270:	f000 8090 	beq.w	8004394 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004274:	f815 000a 	ldrb.w	r0, [r5, sl]
 8004278:	3830      	subs	r0, #48	; 0x30
 800427a:	b2c3      	uxtb	r3, r0
 800427c:	2b09      	cmp	r3, #9
 800427e:	f240 80a2 	bls.w	80043c6 <translate_keypad+0x27a>
		for(int i = decimallocation-1; i >=0; i--){
 8004282:	f1ba 0f00 	cmp.w	sl, #0
 8004286:	f000 8085 	beq.w	8004394 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800428a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800428e:	fa5f f388 	uxtb.w	r3, r8
 8004292:	2b09      	cmp	r3, #9
 8004294:	f240 80ac 	bls.w	80043f0 <translate_keypad+0x2a4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004298:	f1b9 0f04 	cmp.w	r9, #4
 800429c:	f109 0701 	add.w	r7, r9, #1
 80042a0:	d0ba      	beq.n	8004218 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042a2:	5de8      	ldrb	r0, [r5, r7]
 80042a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80042a8:	2b09      	cmp	r3, #9
 80042aa:	d95c      	bls.n	8004366 <translate_keypad+0x21a>
 80042ac:	260a      	movs	r6, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 80042ae:	2f04      	cmp	r7, #4
 80042b0:	f107 0801 	add.w	r8, r7, #1
 80042b4:	d0b0      	beq.n	8004218 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042b6:	f815 0008 	ldrb.w	r0, [r5, r8]
 80042ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80042be:	2b09      	cmp	r3, #9
 80042c0:	d814      	bhi.n	80042ec <translate_keypad+0x1a0>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80042c2:	f7fc fd23 	bl	8000d0c <__aeabi_i2f>
 80042c6:	495c      	ldr	r1, [pc, #368]	; (8004438 <translate_keypad+0x2ec>)
 80042c8:	f7fc fc6a 	bl	8000ba0 <__aeabi_fsub>
 80042cc:	4607      	mov	r7, r0
 80042ce:	4630      	mov	r0, r6
 80042d0:	f7fc fd1c 	bl	8000d0c <__aeabi_i2f>
 80042d4:	4601      	mov	r1, r0
 80042d6:	4638      	mov	r0, r7
 80042d8:	f7fc fe20 	bl	8000f1c <__aeabi_fdiv>
 80042dc:	4601      	mov	r1, r0
 80042de:	4620      	mov	r0, r4
 80042e0:	f7fc fc60 	bl	8000ba4 <__addsf3>
 80042e4:	4604      	mov	r4, r0
				count = count * 10;
 80042e6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80042ea:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 80042ec:	f1b8 0f04 	cmp.w	r8, #4
 80042f0:	f108 0701 	add.w	r7, r8, #1
 80042f4:	d090      	beq.n	8004218 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042f6:	5de8      	ldrb	r0, [r5, r7]
 80042f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	d94c      	bls.n	800439a <translate_keypad+0x24e>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004300:	2f03      	cmp	r7, #3
 8004302:	d189      	bne.n	8004218 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004304:	7928      	ldrb	r0, [r5, #4]
 8004306:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800430a:	2b09      	cmp	r3, #9
 800430c:	d884      	bhi.n	8004218 <translate_keypad+0xcc>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800430e:	f7fc fcfd 	bl	8000d0c <__aeabi_i2f>
 8004312:	4949      	ldr	r1, [pc, #292]	; (8004438 <translate_keypad+0x2ec>)
 8004314:	f7fc fc44 	bl	8000ba0 <__aeabi_fsub>
 8004318:	4605      	mov	r5, r0
 800431a:	4630      	mov	r0, r6
 800431c:	f7fc fcf6 	bl	8000d0c <__aeabi_i2f>
 8004320:	4601      	mov	r1, r0
 8004322:	4628      	mov	r0, r5
 8004324:	f7fc fdfa 	bl	8000f1c <__aeabi_fdiv>
 8004328:	4601      	mov	r1, r0
 800432a:	4620      	mov	r0, r4
 800432c:	f7fc fc3a 	bl	8000ba4 <__addsf3>
 8004330:	4604      	mov	r4, r0
}
 8004332:	4620      	mov	r0, r4
 8004334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 8004338:	78eb      	ldrb	r3, [r5, #3]
 800433a:	2b2e      	cmp	r3, #46	; 0x2e
 800433c:	f43f af6f 	beq.w	800421e <translate_keypad+0xd2>
 8004340:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 8004342:	2b2e      	cmp	r3, #46	; 0x2e
 8004344:	bf0c      	ite	eq
 8004346:	f04f 0904 	moveq.w	r9, #4
 800434a:	f04f 0902 	movne.w	r9, #2
 800434e:	e76d      	b.n	800422c <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004350:	2700      	movs	r7, #0
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004352:	f7fc fcdb 	bl	8000d0c <__aeabi_i2f>
 8004356:	2100      	movs	r1, #0
 8004358:	f7fc fc24 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800435c:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800435e:	4604      	mov	r4, r0
				count = count * 10;
 8004360:	e76e      	b.n	8004240 <translate_keypad+0xf4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004362:	2701      	movs	r7, #1
	float num = 0;
 8004364:	2400      	movs	r4, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004366:	f7fc fcd1 	bl	8000d0c <__aeabi_i2f>
 800436a:	4933      	ldr	r1, [pc, #204]	; (8004438 <translate_keypad+0x2ec>)
 800436c:	f7fc fc18 	bl	8000ba0 <__aeabi_fsub>
 8004370:	4932      	ldr	r1, [pc, #200]	; (800443c <translate_keypad+0x2f0>)
 8004372:	f7fc fdd3 	bl	8000f1c <__aeabi_fdiv>
 8004376:	4601      	mov	r1, r0
 8004378:	4620      	mov	r0, r4
 800437a:	f7fc fc13 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800437e:	2664      	movs	r6, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004380:	4604      	mov	r4, r0
				count = count * 10;
 8004382:	e794      	b.n	80042ae <translate_keypad+0x162>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004384:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 8004388:	b2c3      	uxtb	r3, r0
 800438a:	2b09      	cmp	r3, #9
 800438c:	f04f 0901 	mov.w	r9, #1
 8004390:	d9de      	bls.n	8004350 <translate_keypad+0x204>
	float num = 0;
 8004392:	2400      	movs	r4, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004394:	f109 0701 	add.w	r7, r9, #1
 8004398:	e783      	b.n	80042a2 <translate_keypad+0x156>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800439a:	f7fc fcb7 	bl	8000d0c <__aeabi_i2f>
 800439e:	4926      	ldr	r1, [pc, #152]	; (8004438 <translate_keypad+0x2ec>)
 80043a0:	f7fc fbfe 	bl	8000ba0 <__aeabi_fsub>
 80043a4:	4680      	mov	r8, r0
 80043a6:	4630      	mov	r0, r6
 80043a8:	f7fc fcb0 	bl	8000d0c <__aeabi_i2f>
 80043ac:	4601      	mov	r1, r0
 80043ae:	4640      	mov	r0, r8
 80043b0:	f7fc fdb4 	bl	8000f1c <__aeabi_fdiv>
 80043b4:	4601      	mov	r1, r0
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7fc fbf4 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80043bc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80043c0:	4604      	mov	r4, r0
				count = count * 10;
 80043c2:	0076      	lsls	r6, r6, #1
 80043c4:	e79c      	b.n	8004300 <translate_keypad+0x1b4>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043c6:	fb06 f000 	mul.w	r0, r6, r0
 80043ca:	f7fc fc9f 	bl	8000d0c <__aeabi_i2f>
 80043ce:	4601      	mov	r1, r0
 80043d0:	4620      	mov	r0, r4
 80043d2:	f7fc fbe7 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80043d6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043da:	4604      	mov	r4, r0
				count = count * 10;
 80043dc:	0076      	lsls	r6, r6, #1
 80043de:	e750      	b.n	8004282 <translate_keypad+0x136>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043e0:	f7fc fc94 	bl	8000d0c <__aeabi_i2f>
 80043e4:	2100      	movs	r1, #0
 80043e6:	f7fc fbdd 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80043ea:	250a      	movs	r5, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043ec:	4604      	mov	r4, r0
				count = count * 10;
 80043ee:	e6d2      	b.n	8004196 <translate_keypad+0x4a>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043f0:	fb06 f008 	mul.w	r0, r6, r8
 80043f4:	f7fc fc8a 	bl	8000d0c <__aeabi_i2f>
 80043f8:	4601      	mov	r1, r0
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7fc fbd2 	bl	8000ba4 <__addsf3>
 8004400:	4604      	mov	r4, r0
				count = count * 10;
 8004402:	e749      	b.n	8004298 <translate_keypad+0x14c>
	for(int i = 0; i < keypadlength; i++){
 8004404:	f04f 0904 	mov.w	r9, #4
 8004408:	e710      	b.n	800422c <translate_keypad+0xe0>
		for(int i = decimallocation-1; i >=0; i--){
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ba      	bne.n	8004384 <translate_keypad+0x238>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800440e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004412:	2b09      	cmp	r3, #9
 8004414:	4630      	mov	r0, r6
 8004416:	d9a4      	bls.n	8004362 <translate_keypad+0x216>
 8004418:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800441c:	2b09      	cmp	r3, #9
 800441e:	4638      	mov	r0, r7
 8004420:	d804      	bhi.n	800442c <translate_keypad+0x2e0>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004422:	f04f 0802 	mov.w	r8, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004426:	260a      	movs	r6, #10
	float num = 0;
 8004428:	2400      	movs	r4, #0
 800442a:	e74a      	b.n	80042c2 <translate_keypad+0x176>
		for(int i = decimallocation+1; i < keypadlength; i++){
 800442c:	2703      	movs	r7, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800442e:	260a      	movs	r6, #10
	float num = 0;
 8004430:	2400      	movs	r4, #0
 8004432:	e760      	b.n	80042f6 <translate_keypad+0x1aa>
 8004434:	20000008 	.word	0x20000008
 8004438:	42400000 	.word	0x42400000
 800443c:	41200000 	.word	0x41200000

08004440 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8004440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(keypaditerator < 4){
 8004444:	4e70      	ldr	r6, [pc, #448]	; (8004608 <fill_keypad+0x1c8>)
void fill_keypad(uint8_t va, float num){
 8004446:	460d      	mov	r5, r1
	while(keypaditerator < 4){
 8004448:	f996 4000 	ldrsb.w	r4, [r6]
 800444c:	2c03      	cmp	r4, #3
 800444e:	dc2d      	bgt.n	80044ac <fill_keypad+0x6c>
 8004450:	496e      	ldr	r1, [pc, #440]	; (800460c <fill_keypad+0x1cc>)
 8004452:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8004610 <fill_keypad+0x1d0>
 8004456:	2700      	movs	r7, #0
			keypadarr[0] = num;
 8004458:	f04f 0b7a 	mov.w	fp, #122	; 0x7a
 800445c:	f891 9004 	ldrb.w	r9, [r1, #4]
 8004460:	f89a 8000 	ldrb.w	r8, [sl]
 8004464:	f891 e003 	ldrb.w	lr, [r1, #3]
 8004468:	788b      	ldrb	r3, [r1, #2]
 800446a:	784a      	ldrb	r2, [r1, #1]
 800446c:	f891 c000 	ldrb.w	ip, [r1]
 8004470:	b2e4      	uxtb	r4, r4
 8004472:	e004      	b.n	800447e <fill_keypad+0x3e>
	while(keypaditerator < 4){
 8004474:	469e      	mov	lr, r3
 8004476:	4613      	mov	r3, r2
 8004478:	4662      	mov	r2, ip
			keypadarr[0] = num;
 800447a:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
	while(keypaditerator < 4){
 800447e:	3401      	adds	r4, #1
			if(keypadarr[4] == '.'){
 8004480:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004484:	b2e4      	uxtb	r4, r4
			if(keypadarr[4] == '.'){
 8004486:	bf04      	itt	eq
 8004488:	2701      	moveq	r7, #1
 800448a:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800448e:	2c04      	cmp	r4, #4
 8004490:	46f1      	mov	r9, lr
 8004492:	d1ef      	bne.n	8004474 <fill_keypad+0x34>
 8004494:	f881 c001 	strb.w	ip, [r1, #1]
 8004498:	708a      	strb	r2, [r1, #2]
 800449a:	f881 e004 	strb.w	lr, [r1, #4]
 800449e:	70cb      	strb	r3, [r1, #3]
 80044a0:	f881 b000 	strb.w	fp, [r1]
 80044a4:	7034      	strb	r4, [r6, #0]
 80044a6:	b10f      	cbz	r7, 80044ac <fill_keypad+0x6c>
 80044a8:	f88a 8000 	strb.w	r8, [sl]
	if(va){
 80044ac:	b370      	cbz	r0, 800450c <fill_keypad+0xcc>
		if(num <= 0.0001){
 80044ae:	4628      	mov	r0, r5
 80044b0:	f7fb ffd2 	bl	8000458 <__aeabi_f2d>
 80044b4:	a34c      	add	r3, pc, #304	; (adr r3, 80045e8 <fill_keypad+0x1a8>)
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	4680      	mov	r8, r0
 80044bc:	4689      	mov	r9, r1
 80044be:	f7fc fa9f 	bl	8000a00 <__aeabi_dcmple>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d155      	bne.n	8004572 <fill_keypad+0x132>
		int temp = (int)(num * 1000);
 80044c6:	4953      	ldr	r1, [pc, #332]	; (8004614 <fill_keypad+0x1d4>)
 80044c8:	4628      	mov	r0, r5
 80044ca:	f7fc fc73 	bl	8000db4 <__aeabi_fmul>
 80044ce:	f7fc fe37 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d06e      	beq.n	80045b4 <fill_keypad+0x174>
					keypadarr[keypaditerator] = '.';
 80044d6:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80044da:	494c      	ldr	r1, [pc, #304]	; (800460c <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044dc:	4f4e      	ldr	r7, [pc, #312]	; (8004618 <fill_keypad+0x1d8>)
 80044de:	fb87 3500 	smull	r3, r5, r7, r0
 80044e2:	17c3      	asrs	r3, r0, #31
 80044e4:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 80044e8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80044ec:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 80044f0:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 80044f2:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044f4:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 80044f6:	b254      	sxtb	r4, r2
				if(keypaditerator == 1){
 80044f8:	2c01      	cmp	r4, #1
				temp = temp / 10;
 80044fa:	4618      	mov	r0, r3
				if(keypaditerator == 1){
 80044fc:	d06a      	beq.n	80045d4 <fill_keypad+0x194>
			while(temp != 0 && keypaditerator >= 0){
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d055      	beq.n	80045ae <fill_keypad+0x16e>
 8004502:	2c00      	cmp	r4, #0
 8004504:	daeb      	bge.n	80044de <fill_keypad+0x9e>
 8004506:	7034      	strb	r4, [r6, #0]
}
 8004508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(num <= 0.001){
 800450c:	4628      	mov	r0, r5
 800450e:	f7fb ffa3 	bl	8000458 <__aeabi_f2d>
 8004512:	a337      	add	r3, pc, #220	; (adr r3, 80045f0 <fill_keypad+0x1b0>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	4680      	mov	r8, r0
 800451a:	4689      	mov	r9, r1
 800451c:	f7fc fa70 	bl	8000a00 <__aeabi_dcmple>
 8004520:	b9f0      	cbnz	r0, 8004560 <fill_keypad+0x120>
		int temp = (int)(num * 100);
 8004522:	493e      	ldr	r1, [pc, #248]	; (800461c <fill_keypad+0x1dc>)
 8004524:	4628      	mov	r0, r5
 8004526:	f7fc fc45 	bl	8000db4 <__aeabi_fmul>
 800452a:	f7fc fe09 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 800452e:	b388      	cbz	r0, 8004594 <fill_keypad+0x154>
					keypadarr[keypaditerator] = '.';
 8004530:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 8004534:	4935      	ldr	r1, [pc, #212]	; (800460c <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8004536:	4f38      	ldr	r7, [pc, #224]	; (8004618 <fill_keypad+0x1d8>)
 8004538:	fb87 3500 	smull	r3, r5, r7, r0
 800453c:	17c3      	asrs	r3, r0, #31
 800453e:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8004542:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8004546:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 800454a:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 800454c:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 800454e:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 8004550:	b254      	sxtb	r4, r2
				if(keypaditerator == 2){
 8004552:	2c02      	cmp	r4, #2
				temp = temp / 10;
 8004554:	4618      	mov	r0, r3
				if(keypaditerator == 2){
 8004556:	d015      	beq.n	8004584 <fill_keypad+0x144>
			while(temp != 0 && keypaditerator >= 0){
 8004558:	b1cb      	cbz	r3, 800458e <fill_keypad+0x14e>
 800455a:	2c00      	cmp	r4, #0
 800455c:	daec      	bge.n	8004538 <fill_keypad+0xf8>
 800455e:	e7d2      	b.n	8004506 <fill_keypad+0xc6>
			keypadarr[4] = '0';
 8004560:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 8004562:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <fill_keypad+0x1cc>)
 8004566:	482e      	ldr	r0, [pc, #184]	; (8004620 <fill_keypad+0x1e0>)
			keypadarr[4] = '0';
 8004568:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 800456a:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 800456c:	7032      	strb	r2, [r6, #0]
}
 800456e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			keypadarr[4] = '0';
 8004572:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 8004574:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 8004576:	4b25      	ldr	r3, [pc, #148]	; (800460c <fill_keypad+0x1cc>)
 8004578:	482a      	ldr	r0, [pc, #168]	; (8004624 <fill_keypad+0x1e4>)
			keypadarr[4] = '0';
 800457a:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 800457c:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 800457e:	7032      	strb	r2, [r6, #0]
}
 8004580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 8004584:	2401      	movs	r4, #1
					keypadarr[keypaditerator] = '.';
 8004586:	f881 c002 	strb.w	ip, [r1, #2]
			while(temp != 0 && keypaditerator >= 0){
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1d4      	bne.n	8004538 <fill_keypad+0xf8>
			if(keypaditerator >= 0 && num <= 9.999999){
 800458e:	1c62      	adds	r2, r4, #1
 8004590:	7034      	strb	r4, [r6, #0]
 8004592:	d0ec      	beq.n	800456e <fill_keypad+0x12e>
 8004594:	a318      	add	r3, pc, #96	; (adr r3, 80045f8 <fill_keypad+0x1b8>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f7fc fa2f 	bl	8000a00 <__aeabi_dcmple>
 80045a2:	b138      	cbz	r0, 80045b4 <fill_keypad+0x174>
				keypadarr[keypaditerator] = '0';
 80045a4:	2230      	movs	r2, #48	; 0x30
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <fill_keypad+0x1cc>)
 80045a8:	551a      	strb	r2, [r3, r4]
				keypaditerator--;
 80045aa:	3c01      	subs	r4, #1
 80045ac:	b264      	sxtb	r4, r4
			if(keypaditerator >= 0 && num <= 0.999999){
 80045ae:	1c63      	adds	r3, r4, #1
				keypaditerator--;
 80045b0:	7034      	strb	r4, [r6, #0]
			if(keypaditerator >= 0 && num <= 0.999999){
 80045b2:	d0dc      	beq.n	800456e <fill_keypad+0x12e>
 80045b4:	a312      	add	r3, pc, #72	; (adr r3, 8004600 <fill_keypad+0x1c0>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7fc fa1f 	bl	8000a00 <__aeabi_dcmple>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d0d3      	beq.n	800456e <fill_keypad+0x12e>
				keypadarr[keypaditerator] = '0';
 80045c6:	2230      	movs	r2, #48	; 0x30
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <fill_keypad+0x1cc>)
				keypaditerator--;
 80045ca:	1e61      	subs	r1, r4, #1
 80045cc:	7031      	strb	r1, [r6, #0]
				keypadarr[keypaditerator] = '0';
 80045ce:	551a      	strb	r2, [r3, r4]
}
 80045d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 80045d4:	2400      	movs	r4, #0
					keypadarr[keypaditerator] = '.';
 80045d6:	f881 c001 	strb.w	ip, [r1, #1]
			while(temp != 0 && keypaditerator >= 0){
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f47f af7f 	bne.w	80044de <fill_keypad+0x9e>
 80045e0:	e7e5      	b.n	80045ae <fill_keypad+0x16e>
 80045e2:	bf00      	nop
 80045e4:	f3af 8000 	nop.w
 80045e8:	eb1c432d 	.word	0xeb1c432d
 80045ec:	3f1a36e2 	.word	0x3f1a36e2
 80045f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80045f4:	3f50624d 	.word	0x3f50624d
 80045f8:	de7210bf 	.word	0xde7210bf
 80045fc:	4023ffff 	.word	0x4023ffff
 8004600:	e7210be9 	.word	0xe7210be9
 8004604:	3feffffd 	.word	0x3feffffd
 8004608:	2000000d 	.word	0x2000000d
 800460c:	20000008 	.word	0x20000008
 8004610:	20000748 	.word	0x20000748
 8004614:	447a0000 	.word	0x447a0000
 8004618:	66666667 	.word	0x66666667
 800461c:	42c80000 	.word	0x42c80000
 8004620:	302e3030 	.word	0x302e3030
 8004624:	30302e30 	.word	0x30302e30

08004628 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004628:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 800462a:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 800462c:	bb68      	cbnz	r0, 800468a <inc_arr_v+0x62>
 800462e:	4c4e      	ldr	r4, [pc, #312]	; (8004768 <inc_arr_v+0x140>)
 8004630:	7822      	ldrb	r2, [r4, #0]
 8004632:	2a31      	cmp	r2, #49	; 0x31
 8004634:	d00c      	beq.n	8004650 <inc_arr_v+0x28>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004636:	2a30      	cmp	r2, #48	; 0x30
 8004638:	d076      	beq.n	8004728 <inc_arr_v+0x100>
			if(keypadarr[pos] < '9'){
 800463a:	5ce2      	ldrb	r2, [r4, r3]
 800463c:	4619      	mov	r1, r3
 800463e:	2a38      	cmp	r2, #56	; 0x38
 8004640:	d90a      	bls.n	8004658 <inc_arr_v+0x30>
				keypadarr[pos] = '0';
 8004642:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 8004644:	1e58      	subs	r0, r3, #1
 8004646:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004648:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 800464a:	f7ff ffed 	bl	8004628 <inc_arr_v>
 800464e:	e005      	b.n	800465c <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004650:	7861      	ldrb	r1, [r4, #1]
 8004652:	292f      	cmp	r1, #47	; 0x2f
 8004654:	d855      	bhi.n	8004702 <inc_arr_v+0xda>
			if(keypadarr[pos] < '9'){
 8004656:	4619      	mov	r1, r3
				keypadarr[pos]++;
 8004658:	3201      	adds	r2, #1
 800465a:	5462      	strb	r2, [r4, r1]
		if(keypadarr[i] != 'z'){
 800465c:	7823      	ldrb	r3, [r4, #0]
 800465e:	2b7a      	cmp	r3, #122	; 0x7a
 8004660:	d10e      	bne.n	8004680 <inc_arr_v+0x58>
 8004662:	7863      	ldrb	r3, [r4, #1]
 8004664:	2b7a      	cmp	r3, #122	; 0x7a
 8004666:	d16d      	bne.n	8004744 <inc_arr_v+0x11c>
 8004668:	78a3      	ldrb	r3, [r4, #2]
 800466a:	2b7a      	cmp	r3, #122	; 0x7a
 800466c:	d16c      	bne.n	8004748 <inc_arr_v+0x120>
 800466e:	78e3      	ldrb	r3, [r4, #3]
 8004670:	2b7a      	cmp	r3, #122	; 0x7a
 8004672:	d16b      	bne.n	800474c <inc_arr_v+0x124>
 8004674:	7923      	ldrb	r3, [r4, #4]
 8004676:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004678:	bf18      	it	ne
 800467a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800467c:	d101      	bne.n	8004682 <inc_arr_v+0x5a>
}
 800467e:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 8004680:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004682:	4a3a      	ldr	r2, [pc, #232]	; (800476c <inc_arr_v+0x144>)
 8004684:	3b01      	subs	r3, #1
 8004686:	7013      	strb	r3, [r2, #0]
}
 8004688:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800468a:	2801      	cmp	r0, #1
 800468c:	d113      	bne.n	80046b6 <inc_arr_v+0x8e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 800468e:	4c36      	ldr	r4, [pc, #216]	; (8004768 <inc_arr_v+0x140>)
 8004690:	7822      	ldrb	r2, [r4, #0]
 8004692:	2a31      	cmp	r2, #49	; 0x31
 8004694:	d1d1      	bne.n	800463a <inc_arr_v+0x12>
 8004696:	7862      	ldrb	r2, [r4, #1]
 8004698:	2a32      	cmp	r2, #50	; 0x32
 800469a:	d027      	beq.n	80046ec <inc_arr_v+0xc4>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800469c:	2a31      	cmp	r2, #49	; 0x31
 800469e:	d1cc      	bne.n	800463a <inc_arr_v+0x12>
 80046a0:	78e1      	ldrb	r1, [r4, #3]
 80046a2:	2930      	cmp	r1, #48	; 0x30
 80046a4:	d802      	bhi.n	80046ac <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80046a6:	7921      	ldrb	r1, [r4, #4]
 80046a8:	2930      	cmp	r1, #48	; 0x30
 80046aa:	d9d4      	bls.n	8004656 <inc_arr_v+0x2e>
		keypadarr[4] = '0';
 80046ac:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 80046ae:	4a30      	ldr	r2, [pc, #192]	; (8004770 <inc_arr_v+0x148>)
		keypadarr[4] = '0';
 80046b0:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '1';
 80046b2:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 80046b4:	e7d2      	b.n	800465c <inc_arr_v+0x34>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80046b6:	2803      	cmp	r0, #3
 80046b8:	d10f      	bne.n	80046da <inc_arr_v+0xb2>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80046ba:	4c2b      	ldr	r4, [pc, #172]	; (8004768 <inc_arr_v+0x140>)
 80046bc:	7822      	ldrb	r2, [r4, #0]
 80046be:	2a31      	cmp	r2, #49	; 0x31
 80046c0:	d1bb      	bne.n	800463a <inc_arr_v+0x12>
 80046c2:	7862      	ldrb	r2, [r4, #1]
 80046c4:	2a32      	cmp	r2, #50	; 0x32
 80046c6:	d043      	beq.n	8004750 <inc_arr_v+0x128>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80046c8:	2a31      	cmp	r2, #49	; 0x31
 80046ca:	d1b6      	bne.n	800463a <inc_arr_v+0x12>
 80046cc:	78e2      	ldrb	r2, [r4, #3]
 80046ce:	2a39      	cmp	r2, #57	; 0x39
 80046d0:	d1b3      	bne.n	800463a <inc_arr_v+0x12>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80046d2:	7922      	ldrb	r2, [r4, #4]
 80046d4:	2a30      	cmp	r2, #48	; 0x30
 80046d6:	d9b4      	bls.n	8004642 <inc_arr_v+0x1a>
 80046d8:	e7e8      	b.n	80046ac <inc_arr_v+0x84>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80046da:	2804      	cmp	r0, #4
 80046dc:	d10d      	bne.n	80046fa <inc_arr_v+0xd2>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80046de:	4c22      	ldr	r4, [pc, #136]	; (8004768 <inc_arr_v+0x140>)
 80046e0:	7822      	ldrb	r2, [r4, #0]
 80046e2:	2a31      	cmp	r2, #49	; 0x31
 80046e4:	d1a9      	bne.n	800463a <inc_arr_v+0x12>
 80046e6:	7862      	ldrb	r2, [r4, #1]
 80046e8:	2a32      	cmp	r2, #50	; 0x32
 80046ea:	d1a6      	bne.n	800463a <inc_arr_v+0x12>
 80046ec:	78e2      	ldrb	r2, [r4, #3]
 80046ee:	2a30      	cmp	r2, #48	; 0x30
 80046f0:	d1a3      	bne.n	800463a <inc_arr_v+0x12>
 80046f2:	7922      	ldrb	r2, [r4, #4]
 80046f4:	2a30      	cmp	r2, #48	; 0x30
 80046f6:	d1a0      	bne.n	800463a <inc_arr_v+0x12>
 80046f8:	e7d8      	b.n	80046ac <inc_arr_v+0x84>
		if(pos >= 0 && pos != 2){
 80046fa:	2800      	cmp	r0, #0
 80046fc:	da0e      	bge.n	800471c <inc_arr_v+0xf4>
 80046fe:	4c1a      	ldr	r4, [pc, #104]	; (8004768 <inc_arr_v+0x140>)
 8004700:	e7ac      	b.n	800465c <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004702:	78e0      	ldrb	r0, [r4, #3]
 8004704:	282f      	cmp	r0, #47	; 0x2f
 8004706:	d998      	bls.n	800463a <inc_arr_v+0x12>
 8004708:	7920      	ldrb	r0, [r4, #4]
 800470a:	282f      	cmp	r0, #47	; 0x2f
 800470c:	d8ce      	bhi.n	80046ac <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800470e:	2a30      	cmp	r2, #48	; 0x30
 8004710:	d193      	bne.n	800463a <inc_arr_v+0x12>
 8004712:	2931      	cmp	r1, #49	; 0x31
 8004714:	d80e      	bhi.n	8004734 <inc_arr_v+0x10c>
			if(keypadarr[pos] < '9'){
 8004716:	2100      	movs	r1, #0
 8004718:	7822      	ldrb	r2, [r4, #0]
 800471a:	e79d      	b.n	8004658 <inc_arr_v+0x30>
		if(pos >= 0 && pos != 2){
 800471c:	2802      	cmp	r0, #2
 800471e:	d120      	bne.n	8004762 <inc_arr_v+0x13a>
			inc_arr_v(pos-1);
 8004720:	2001      	movs	r0, #1
 8004722:	f7ff ff81 	bl	8004628 <inc_arr_v>
 8004726:	e7ea      	b.n	80046fe <inc_arr_v+0xd6>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004728:	7861      	ldrb	r1, [r4, #1]
 800472a:	2932      	cmp	r1, #50	; 0x32
 800472c:	d9f1      	bls.n	8004712 <inc_arr_v+0xea>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 800472e:	78e0      	ldrb	r0, [r4, #3]
 8004730:	282f      	cmp	r0, #47	; 0x2f
 8004732:	d8e9      	bhi.n	8004708 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004734:	78e2      	ldrb	r2, [r4, #3]
 8004736:	2a30      	cmp	r2, #48	; 0x30
 8004738:	d8b8      	bhi.n	80046ac <inc_arr_v+0x84>
 800473a:	7922      	ldrb	r2, [r4, #4]
 800473c:	2a30      	cmp	r2, #48	; 0x30
 800473e:	f67f af7c 	bls.w	800463a <inc_arr_v+0x12>
 8004742:	e7b3      	b.n	80046ac <inc_arr_v+0x84>
	for(int i = 0; i < keypadlength; i++){
 8004744:	2301      	movs	r3, #1
 8004746:	e79c      	b.n	8004682 <inc_arr_v+0x5a>
 8004748:	2302      	movs	r3, #2
 800474a:	e79a      	b.n	8004682 <inc_arr_v+0x5a>
 800474c:	2303      	movs	r3, #3
 800474e:	e798      	b.n	8004682 <inc_arr_v+0x5a>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004750:	78e2      	ldrb	r2, [r4, #3]
 8004752:	2a30      	cmp	r2, #48	; 0x30
 8004754:	f47f af71 	bne.w	800463a <inc_arr_v+0x12>
 8004758:	7922      	ldrb	r2, [r4, #4]
 800475a:	2a2f      	cmp	r2, #47	; 0x2f
 800475c:	f67f af6d 	bls.w	800463a <inc_arr_v+0x12>
 8004760:	e7a4      	b.n	80046ac <inc_arr_v+0x84>
 8004762:	4c01      	ldr	r4, [pc, #4]	; (8004768 <inc_arr_v+0x140>)
 8004764:	e769      	b.n	800463a <inc_arr_v+0x12>
 8004766:	bf00      	nop
 8004768:	20000008 	.word	0x20000008
 800476c:	2000000d 	.word	0x2000000d
 8004770:	302e3231 	.word	0x302e3231

08004774 <inc_arr_a>:
void inc_arr_a(int8_t pos){
 8004774:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8004776:	b9b0      	cbnz	r0, 80047a6 <inc_arr_a+0x32>
 8004778:	4c40      	ldr	r4, [pc, #256]	; (800487c <inc_arr_a+0x108>)
		keypadarr[4] = '0';
 800477a:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 800477c:	4a40      	ldr	r2, [pc, #256]	; (8004880 <inc_arr_a+0x10c>)
		keypadarr[4] = '0';
 800477e:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004780:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004782:	7823      	ldrb	r3, [r4, #0]
 8004784:	2b7a      	cmp	r3, #122	; 0x7a
 8004786:	d118      	bne.n	80047ba <inc_arr_a+0x46>
 8004788:	7863      	ldrb	r3, [r4, #1]
 800478a:	2b7a      	cmp	r3, #122	; 0x7a
 800478c:	d15f      	bne.n	800484e <inc_arr_a+0xda>
 800478e:	78a3      	ldrb	r3, [r4, #2]
 8004790:	2b7a      	cmp	r3, #122	; 0x7a
 8004792:	d16c      	bne.n	800486e <inc_arr_a+0xfa>
 8004794:	78e3      	ldrb	r3, [r4, #3]
 8004796:	2b7a      	cmp	r3, #122	; 0x7a
 8004798:	d16b      	bne.n	8004872 <inc_arr_a+0xfe>
 800479a:	7923      	ldrb	r3, [r4, #4]
 800479c:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 800479e:	bf18      	it	ne
 80047a0:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80047a2:	d10b      	bne.n	80047bc <inc_arr_a+0x48>
}
 80047a4:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 80047a6:	2802      	cmp	r0, #2
 80047a8:	d00c      	beq.n	80047c4 <inc_arr_a+0x50>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047aa:	2803      	cmp	r0, #3
 80047ac:	d01b      	beq.n	80047e6 <inc_arr_a+0x72>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80047ae:	2804      	cmp	r0, #4
 80047b0:	d031      	beq.n	8004816 <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 80047b2:	2800      	cmp	r0, #0
 80047b4:	da11      	bge.n	80047da <inc_arr_a+0x66>
 80047b6:	4c31      	ldr	r4, [pc, #196]	; (800487c <inc_arr_a+0x108>)
 80047b8:	e7e3      	b.n	8004782 <inc_arr_a+0xe>
	for(int i = 0; i < keypadlength; i++){
 80047ba:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 80047bc:	4a31      	ldr	r2, [pc, #196]	; (8004884 <inc_arr_a+0x110>)
 80047be:	3b01      	subs	r3, #1
 80047c0:	7013      	strb	r3, [r2, #0]
}
 80047c2:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80047c4:	4c2d      	ldr	r4, [pc, #180]	; (800487c <inc_arr_a+0x108>)
 80047c6:	7823      	ldrb	r3, [r4, #0]
 80047c8:	2b30      	cmp	r3, #48	; 0x30
 80047ca:	d032      	beq.n	8004832 <inc_arr_a+0xbe>
			if(keypadarr[pos] < '9'){
 80047cc:	5c23      	ldrb	r3, [r4, r0]
 80047ce:	4602      	mov	r2, r0
 80047d0:	2b38      	cmp	r3, #56	; 0x38
 80047d2:	d819      	bhi.n	8004808 <inc_arr_a+0x94>
				keypadarr[pos]++;
 80047d4:	3301      	adds	r3, #1
 80047d6:	54a3      	strb	r3, [r4, r2]
 80047d8:	e7d3      	b.n	8004782 <inc_arr_a+0xe>
		if(pos >= 0 && pos != 1){
 80047da:	2801      	cmp	r0, #1
 80047dc:	d14b      	bne.n	8004876 <inc_arr_a+0x102>
			inc_arr_a(pos-1);
 80047de:	2000      	movs	r0, #0
 80047e0:	f7ff ffc8 	bl	8004774 <inc_arr_a>
 80047e4:	e7e7      	b.n	80047b6 <inc_arr_a+0x42>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80047e6:	4c25      	ldr	r4, [pc, #148]	; (800487c <inc_arr_a+0x108>)
 80047e8:	7823      	ldrb	r3, [r4, #0]
 80047ea:	2b30      	cmp	r3, #48	; 0x30
 80047ec:	d1ee      	bne.n	80047cc <inc_arr_a+0x58>
 80047ee:	78a3      	ldrb	r3, [r4, #2]
 80047f0:	2b38      	cmp	r3, #56	; 0x38
 80047f2:	d035      	beq.n	8004860 <inc_arr_a+0xec>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80047f4:	78a3      	ldrb	r3, [r4, #2]
 80047f6:	2b37      	cmp	r3, #55	; 0x37
 80047f8:	d1e8      	bne.n	80047cc <inc_arr_a+0x58>
 80047fa:	78e3      	ldrb	r3, [r4, #3]
 80047fc:	2b39      	cmp	r3, #57	; 0x39
 80047fe:	d1e5      	bne.n	80047cc <inc_arr_a+0x58>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004800:	7923      	ldrb	r3, [r4, #4]
 8004802:	2b30      	cmp	r3, #48	; 0x30
 8004804:	d8b9      	bhi.n	800477a <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 8004806:	2203      	movs	r2, #3
				keypadarr[pos] = '0';
 8004808:	2330      	movs	r3, #48	; 0x30
				inc_arr_a(pos-1);
 800480a:	3801      	subs	r0, #1
 800480c:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 800480e:	54a3      	strb	r3, [r4, r2]
				inc_arr_a(pos-1);
 8004810:	f7ff ffb0 	bl	8004774 <inc_arr_a>
 8004814:	e7b5      	b.n	8004782 <inc_arr_a+0xe>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004816:	4c19      	ldr	r4, [pc, #100]	; (800487c <inc_arr_a+0x108>)
 8004818:	7823      	ldrb	r3, [r4, #0]
 800481a:	2b30      	cmp	r3, #48	; 0x30
 800481c:	d1d6      	bne.n	80047cc <inc_arr_a+0x58>
 800481e:	78a3      	ldrb	r3, [r4, #2]
 8004820:	2b38      	cmp	r3, #56	; 0x38
 8004822:	d1d3      	bne.n	80047cc <inc_arr_a+0x58>
 8004824:	78e3      	ldrb	r3, [r4, #3]
 8004826:	2b30      	cmp	r3, #48	; 0x30
 8004828:	d1d0      	bne.n	80047cc <inc_arr_a+0x58>
 800482a:	7923      	ldrb	r3, [r4, #4]
 800482c:	2b30      	cmp	r3, #48	; 0x30
 800482e:	d1cd      	bne.n	80047cc <inc_arr_a+0x58>
 8004830:	e7a3      	b.n	800477a <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004832:	78a3      	ldrb	r3, [r4, #2]
 8004834:	2b38      	cmp	r3, #56	; 0x38
 8004836:	d00c      	beq.n	8004852 <inc_arr_a+0xde>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004838:	78a3      	ldrb	r3, [r4, #2]
 800483a:	2b37      	cmp	r3, #55	; 0x37
 800483c:	d1c6      	bne.n	80047cc <inc_arr_a+0x58>
 800483e:	78e2      	ldrb	r2, [r4, #3]
 8004840:	2a30      	cmp	r2, #48	; 0x30
 8004842:	d89a      	bhi.n	800477a <inc_arr_a+0x6>
 8004844:	7922      	ldrb	r2, [r4, #4]
 8004846:	2a30      	cmp	r2, #48	; 0x30
 8004848:	d897      	bhi.n	800477a <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 800484a:	2202      	movs	r2, #2
 800484c:	e7c2      	b.n	80047d4 <inc_arr_a+0x60>
	for(int i = 0; i < keypadlength; i++){
 800484e:	2301      	movs	r3, #1
 8004850:	e7b4      	b.n	80047bc <inc_arr_a+0x48>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004852:	78e3      	ldrb	r3, [r4, #3]
 8004854:	2b30      	cmp	r3, #48	; 0x30
 8004856:	d1ef      	bne.n	8004838 <inc_arr_a+0xc4>
 8004858:	7923      	ldrb	r3, [r4, #4]
 800485a:	2b30      	cmp	r3, #48	; 0x30
 800485c:	d1ec      	bne.n	8004838 <inc_arr_a+0xc4>
 800485e:	e78c      	b.n	800477a <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004860:	78e3      	ldrb	r3, [r4, #3]
 8004862:	2b30      	cmp	r3, #48	; 0x30
 8004864:	d1c6      	bne.n	80047f4 <inc_arr_a+0x80>
 8004866:	7923      	ldrb	r3, [r4, #4]
 8004868:	2b2f      	cmp	r3, #47	; 0x2f
 800486a:	d886      	bhi.n	800477a <inc_arr_a+0x6>
 800486c:	e7c2      	b.n	80047f4 <inc_arr_a+0x80>
	for(int i = 0; i < keypadlength; i++){
 800486e:	2302      	movs	r3, #2
 8004870:	e7a4      	b.n	80047bc <inc_arr_a+0x48>
 8004872:	2303      	movs	r3, #3
 8004874:	e7a2      	b.n	80047bc <inc_arr_a+0x48>
 8004876:	4c01      	ldr	r4, [pc, #4]	; (800487c <inc_arr_a+0x108>)
 8004878:	e7a8      	b.n	80047cc <inc_arr_a+0x58>
 800487a:	bf00      	nop
 800487c:	20000008 	.word	0x20000008
 8004880:	30382e30 	.word	0x30382e30
 8004884:	2000000d 	.word	0x2000000d

08004888 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 8004888:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800488a:	4603      	mov	r3, r0
 800488c:	4c45      	ldr	r4, [pc, #276]	; (80049a4 <dec_arr_v+0x11c>)
 800488e:	b9c8      	cbnz	r0, 80048c4 <dec_arr_v+0x3c>
 8004890:	7822      	ldrb	r2, [r4, #0]
 8004892:	2a30      	cmp	r2, #48	; 0x30
 8004894:	d01e      	beq.n	80048d4 <dec_arr_v+0x4c>
			if(keypadarr[pos] > '0'){
 8004896:	5ce2      	ldrb	r2, [r4, r3]
 8004898:	2a30      	cmp	r2, #48	; 0x30
 800489a:	d960      	bls.n	800495e <dec_arr_v+0xd6>
				keypadarr[pos]--;
 800489c:	3a01      	subs	r2, #1
 800489e:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 80048a0:	7823      	ldrb	r3, [r4, #0]
 80048a2:	2b7a      	cmp	r3, #122	; 0x7a
 80048a4:	d156      	bne.n	8004954 <dec_arr_v+0xcc>
 80048a6:	7863      	ldrb	r3, [r4, #1]
 80048a8:	2b7a      	cmp	r3, #122	; 0x7a
 80048aa:	d15f      	bne.n	800496c <dec_arr_v+0xe4>
 80048ac:	78a3      	ldrb	r3, [r4, #2]
 80048ae:	2b7a      	cmp	r3, #122	; 0x7a
 80048b0:	d15e      	bne.n	8004970 <dec_arr_v+0xe8>
 80048b2:	78e3      	ldrb	r3, [r4, #3]
 80048b4:	2b7a      	cmp	r3, #122	; 0x7a
 80048b6:	d15d      	bne.n	8004974 <dec_arr_v+0xec>
 80048b8:	7923      	ldrb	r3, [r4, #4]
 80048ba:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80048bc:	bf18      	it	ne
 80048be:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80048c0:	d149      	bne.n	8004956 <dec_arr_v+0xce>
}
 80048c2:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80048c4:	2801      	cmp	r0, #1
 80048c6:	d10a      	bne.n	80048de <dec_arr_v+0x56>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80048c8:	7822      	ldrb	r2, [r4, #0]
 80048ca:	2a30      	cmp	r2, #48	; 0x30
 80048cc:	d1e3      	bne.n	8004896 <dec_arr_v+0xe>
 80048ce:	7862      	ldrb	r2, [r4, #1]
 80048d0:	2a30      	cmp	r2, #48	; 0x30
 80048d2:	d1e0      	bne.n	8004896 <dec_arr_v+0xe>
		keypadarr[4] = '0';
 80048d4:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 80048d6:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <dec_arr_v+0x120>)
		keypadarr[4] = '0';
 80048d8:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 80048da:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 80048dc:	e7e0      	b.n	80048a0 <dec_arr_v+0x18>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80048de:	2803      	cmp	r0, #3
 80048e0:	d02e      	beq.n	8004940 <dec_arr_v+0xb8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 80048e2:	2804      	cmp	r0, #4
 80048e4:	d10c      	bne.n	8004900 <dec_arr_v+0x78>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80048e6:	7822      	ldrb	r2, [r4, #0]
 80048e8:	2a30      	cmp	r2, #48	; 0x30
 80048ea:	d1d4      	bne.n	8004896 <dec_arr_v+0xe>
 80048ec:	7862      	ldrb	r2, [r4, #1]
 80048ee:	2a30      	cmp	r2, #48	; 0x30
 80048f0:	d1d1      	bne.n	8004896 <dec_arr_v+0xe>
 80048f2:	78e2      	ldrb	r2, [r4, #3]
 80048f4:	2a30      	cmp	r2, #48	; 0x30
 80048f6:	d1ce      	bne.n	8004896 <dec_arr_v+0xe>
 80048f8:	7922      	ldrb	r2, [r4, #4]
 80048fa:	2a30      	cmp	r2, #48	; 0x30
 80048fc:	d1cb      	bne.n	8004896 <dec_arr_v+0xe>
 80048fe:	e7e9      	b.n	80048d4 <dec_arr_v+0x4c>
		if(pos <= 4 && pos != 2){
 8004900:	dcce      	bgt.n	80048a0 <dec_arr_v+0x18>
 8004902:	2802      	cmp	r0, #2
 8004904:	d1c7      	bne.n	8004896 <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004906:	7823      	ldrb	r3, [r4, #0]
 8004908:	2b30      	cmp	r3, #48	; 0x30
 800490a:	7863      	ldrb	r3, [r4, #1]
 800490c:	d034      	beq.n	8004978 <dec_arr_v+0xf0>
			if(keypadarr[pos] > '0'){
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d93a      	bls.n	8004988 <dec_arr_v+0x100>
				keypadarr[pos]--;
 8004912:	3b01      	subs	r3, #1
 8004914:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004916:	7823      	ldrb	r3, [r4, #0]
 8004918:	2b7a      	cmp	r3, #122	; 0x7a
 800491a:	d141      	bne.n	80049a0 <dec_arr_v+0x118>
 800491c:	7863      	ldrb	r3, [r4, #1]
 800491e:	2b7a      	cmp	r3, #122	; 0x7a
 8004920:	d138      	bne.n	8004994 <dec_arr_v+0x10c>
 8004922:	78a3      	ldrb	r3, [r4, #2]
 8004924:	2b7a      	cmp	r3, #122	; 0x7a
 8004926:	d137      	bne.n	8004998 <dec_arr_v+0x110>
 8004928:	78e3      	ldrb	r3, [r4, #3]
 800492a:	2b7a      	cmp	r3, #122	; 0x7a
 800492c:	d136      	bne.n	800499c <dec_arr_v+0x114>
 800492e:	7923      	ldrb	r3, [r4, #4]
 8004930:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004932:	bf18      	it	ne
 8004934:	2204      	movne	r2, #4
		if(keypadarr[i] != 'z'){
 8004936:	d0b6      	beq.n	80048a6 <dec_arr_v+0x1e>
			keypaditerator = i - 1;
 8004938:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <dec_arr_v+0x124>)
 800493a:	3a01      	subs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
			break;
 800493e:	e7af      	b.n	80048a0 <dec_arr_v+0x18>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004940:	7822      	ldrb	r2, [r4, #0]
 8004942:	2a30      	cmp	r2, #48	; 0x30
 8004944:	d1a7      	bne.n	8004896 <dec_arr_v+0xe>
 8004946:	7862      	ldrb	r2, [r4, #1]
 8004948:	2a30      	cmp	r2, #48	; 0x30
 800494a:	d1a4      	bne.n	8004896 <dec_arr_v+0xe>
 800494c:	78e2      	ldrb	r2, [r4, #3]
 800494e:	2a30      	cmp	r2, #48	; 0x30
 8004950:	d1a1      	bne.n	8004896 <dec_arr_v+0xe>
 8004952:	e7bf      	b.n	80048d4 <dec_arr_v+0x4c>
	for(int i = 0; i < keypadlength; i++){
 8004954:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004956:	4a15      	ldr	r2, [pc, #84]	; (80049ac <dec_arr_v+0x124>)
 8004958:	3b01      	subs	r3, #1
 800495a:	7013      	strb	r3, [r2, #0]
}
 800495c:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 800495e:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 8004960:	1e58      	subs	r0, r3, #1
 8004962:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004964:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 8004966:	f7ff ff8f 	bl	8004888 <dec_arr_v>
 800496a:	e799      	b.n	80048a0 <dec_arr_v+0x18>
	for(int i = 0; i < keypadlength; i++){
 800496c:	2301      	movs	r3, #1
 800496e:	e7f2      	b.n	8004956 <dec_arr_v+0xce>
 8004970:	2302      	movs	r3, #2
 8004972:	e7f0      	b.n	8004956 <dec_arr_v+0xce>
 8004974:	2303      	movs	r3, #3
 8004976:	e7ee      	b.n	8004956 <dec_arr_v+0xce>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004978:	2b30      	cmp	r3, #48	; 0x30
 800497a:	d1c8      	bne.n	800490e <dec_arr_v+0x86>
		keypadarr[2] = '.';
 800497c:	f243 012e 	movw	r1, #12334	; 0x302e
	for(int i = 0; i < keypadlength; i++){
 8004980:	2200      	movs	r2, #0
		keypadarr[4] = '0';
 8004982:	7123      	strb	r3, [r4, #4]
		keypadarr[2] = '.';
 8004984:	8061      	strh	r1, [r4, #2]
		if(keypadarr[i] != 'z'){
 8004986:	e7d7      	b.n	8004938 <dec_arr_v+0xb0>
				keypadarr[pos] = '9';
 8004988:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 800498a:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 800498c:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 800498e:	f7ff ff7b 	bl	8004888 <dec_arr_v>
 8004992:	e7c0      	b.n	8004916 <dec_arr_v+0x8e>
	for(int i = 0; i < keypadlength; i++){
 8004994:	2201      	movs	r2, #1
 8004996:	e7cf      	b.n	8004938 <dec_arr_v+0xb0>
 8004998:	2202      	movs	r2, #2
 800499a:	e7cd      	b.n	8004938 <dec_arr_v+0xb0>
 800499c:	2203      	movs	r2, #3
 800499e:	e7cb      	b.n	8004938 <dec_arr_v+0xb0>
 80049a0:	2200      	movs	r2, #0
 80049a2:	e7c9      	b.n	8004938 <dec_arr_v+0xb0>
 80049a4:	20000008 	.word	0x20000008
 80049a8:	302e3030 	.word	0x302e3030
 80049ac:	2000000d 	.word	0x2000000d

080049b0 <dec_arr_a>:
void dec_arr_a(int8_t pos){
 80049b0:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80049b2:	4603      	mov	r3, r0
 80049b4:	4c43      	ldr	r4, [pc, #268]	; (8004ac4 <dec_arr_a+0x114>)
 80049b6:	b940      	cbnz	r0, 80049ca <dec_arr_a+0x1a>
 80049b8:	7822      	ldrb	r2, [r4, #0]
 80049ba:	2a30      	cmp	r2, #48	; 0x30
 80049bc:	d035      	beq.n	8004a2a <dec_arr_a+0x7a>
			if(keypadarr[pos] > '0'){
 80049be:	5ce2      	ldrb	r2, [r4, r3]
 80049c0:	2a30      	cmp	r2, #48	; 0x30
 80049c2:	d95d      	bls.n	8004a80 <dec_arr_a+0xd0>
				keypadarr[pos]--;
 80049c4:	3a01      	subs	r2, #1
 80049c6:	54e2      	strb	r2, [r4, r3]
 80049c8:	e033      	b.n	8004a32 <dec_arr_a+0x82>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80049ca:	2801      	cmp	r0, #1
 80049cc:	d11d      	bne.n	8004a0a <dec_arr_a+0x5a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 80049ce:	7823      	ldrb	r3, [r4, #0]
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d051      	beq.n	8004a78 <dec_arr_a+0xc8>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 80049d4:	7823      	ldrb	r3, [r4, #0]
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d066      	beq.n	8004aa8 <dec_arr_a+0xf8>
			if(keypadarr[pos] > '0'){
 80049da:	d95a      	bls.n	8004a92 <dec_arr_a+0xe2>
				keypadarr[pos]--;
 80049dc:	3b01      	subs	r3, #1
 80049de:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 80049e0:	7823      	ldrb	r3, [r4, #0]
 80049e2:	2b7a      	cmp	r3, #122	; 0x7a
 80049e4:	d16b      	bne.n	8004abe <dec_arr_a+0x10e>
 80049e6:	7863      	ldrb	r3, [r4, #1]
 80049e8:	2b7a      	cmp	r3, #122	; 0x7a
 80049ea:	d162      	bne.n	8004ab2 <dec_arr_a+0x102>
 80049ec:	78a3      	ldrb	r3, [r4, #2]
 80049ee:	2b7a      	cmp	r3, #122	; 0x7a
 80049f0:	d161      	bne.n	8004ab6 <dec_arr_a+0x106>
 80049f2:	78e3      	ldrb	r3, [r4, #3]
 80049f4:	2b7a      	cmp	r3, #122	; 0x7a
 80049f6:	d160      	bne.n	8004aba <dec_arr_a+0x10a>
 80049f8:	7923      	ldrb	r3, [r4, #4]
 80049fa:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80049fc:	bf18      	it	ne
 80049fe:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004a00:	d01a      	beq.n	8004a38 <dec_arr_a+0x88>
			keypaditerator = i - 1;
 8004a02:	4a31      	ldr	r2, [pc, #196]	; (8004ac8 <dec_arr_a+0x118>)
 8004a04:	3b01      	subs	r3, #1
 8004a06:	7013      	strb	r3, [r2, #0]
			break;
 8004a08:	e013      	b.n	8004a32 <dec_arr_a+0x82>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004a0a:	2803      	cmp	r0, #3
 8004a0c:	d023      	beq.n	8004a56 <dec_arr_a+0xa6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004a0e:	2804      	cmp	r0, #4
 8004a10:	d130      	bne.n	8004a74 <dec_arr_a+0xc4>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004a12:	7822      	ldrb	r2, [r4, #0]
 8004a14:	2a30      	cmp	r2, #48	; 0x30
 8004a16:	d1d2      	bne.n	80049be <dec_arr_a+0xe>
 8004a18:	78a2      	ldrb	r2, [r4, #2]
 8004a1a:	2a30      	cmp	r2, #48	; 0x30
 8004a1c:	d1cf      	bne.n	80049be <dec_arr_a+0xe>
 8004a1e:	78e2      	ldrb	r2, [r4, #3]
 8004a20:	2a30      	cmp	r2, #48	; 0x30
 8004a22:	d1cc      	bne.n	80049be <dec_arr_a+0xe>
 8004a24:	7922      	ldrb	r2, [r4, #4]
 8004a26:	2a30      	cmp	r2, #48	; 0x30
 8004a28:	d1c9      	bne.n	80049be <dec_arr_a+0xe>
		keypadarr[4] = '0';
 8004a2a:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 8004a2c:	4a27      	ldr	r2, [pc, #156]	; (8004acc <dec_arr_a+0x11c>)
		keypadarr[4] = '0';
 8004a2e:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004a30:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004a32:	7823      	ldrb	r3, [r4, #0]
 8004a34:	2b7a      	cmp	r3, #122	; 0x7a
 8004a36:	d118      	bne.n	8004a6a <dec_arr_a+0xba>
 8004a38:	7863      	ldrb	r3, [r4, #1]
 8004a3a:	2b7a      	cmp	r3, #122	; 0x7a
 8004a3c:	d127      	bne.n	8004a8e <dec_arr_a+0xde>
 8004a3e:	78a3      	ldrb	r3, [r4, #2]
 8004a40:	2b7a      	cmp	r3, #122	; 0x7a
 8004a42:	d12d      	bne.n	8004aa0 <dec_arr_a+0xf0>
 8004a44:	78e3      	ldrb	r3, [r4, #3]
 8004a46:	2b7a      	cmp	r3, #122	; 0x7a
 8004a48:	d12c      	bne.n	8004aa4 <dec_arr_a+0xf4>
 8004a4a:	7923      	ldrb	r3, [r4, #4]
 8004a4c:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004a4e:	bf18      	it	ne
 8004a50:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004a52:	d10b      	bne.n	8004a6c <dec_arr_a+0xbc>
}
 8004a54:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004a56:	7822      	ldrb	r2, [r4, #0]
 8004a58:	2a30      	cmp	r2, #48	; 0x30
 8004a5a:	d1b0      	bne.n	80049be <dec_arr_a+0xe>
 8004a5c:	78a2      	ldrb	r2, [r4, #2]
 8004a5e:	2a30      	cmp	r2, #48	; 0x30
 8004a60:	d1ad      	bne.n	80049be <dec_arr_a+0xe>
 8004a62:	78e2      	ldrb	r2, [r4, #3]
 8004a64:	2a30      	cmp	r2, #48	; 0x30
 8004a66:	d1aa      	bne.n	80049be <dec_arr_a+0xe>
 8004a68:	e7df      	b.n	8004a2a <dec_arr_a+0x7a>
	for(int i = 0; i < keypadlength; i++){
 8004a6a:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <dec_arr_a+0x118>)
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	7013      	strb	r3, [r2, #0]
}
 8004a72:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 8004a74:	dcdd      	bgt.n	8004a32 <dec_arr_a+0x82>
 8004a76:	e7a2      	b.n	80049be <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004a78:	78a3      	ldrb	r3, [r4, #2]
 8004a7a:	2b30      	cmp	r3, #48	; 0x30
 8004a7c:	d1aa      	bne.n	80049d4 <dec_arr_a+0x24>
 8004a7e:	e7d4      	b.n	8004a2a <dec_arr_a+0x7a>
				keypadarr[pos] = '9';
 8004a80:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 8004a82:	1e58      	subs	r0, r3, #1
 8004a84:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004a86:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 8004a88:	f7ff ff92 	bl	80049b0 <dec_arr_a>
 8004a8c:	e7d1      	b.n	8004a32 <dec_arr_a+0x82>
	for(int i = 0; i < keypadlength; i++){
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7ec      	b.n	8004a6c <dec_arr_a+0xbc>
				keypadarr[pos] = '9';
 8004a92:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 8004a98:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 8004a9a:	f7ff ff89 	bl	80049b0 <dec_arr_a>
 8004a9e:	e79f      	b.n	80049e0 <dec_arr_a+0x30>
	for(int i = 0; i < keypadlength; i++){
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e7e3      	b.n	8004a6c <dec_arr_a+0xbc>
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e7e1      	b.n	8004a6c <dec_arr_a+0xbc>
		keypadarr[1] = '.';
 8004aa8:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <dec_arr_a+0x120>)
	for(int i = 0; i < keypadlength; i++){
 8004aaa:	2300      	movs	r3, #0
		keypadarr[1] = '.';
 8004aac:	f8c4 2001 	str.w	r2, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004ab0:	e7a7      	b.n	8004a02 <dec_arr_a+0x52>
	for(int i = 0; i < keypadlength; i++){
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e7a5      	b.n	8004a02 <dec_arr_a+0x52>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e7a3      	b.n	8004a02 <dec_arr_a+0x52>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e7a1      	b.n	8004a02 <dec_arr_a+0x52>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e79f      	b.n	8004a02 <dec_arr_a+0x52>
 8004ac2:	bf00      	nop
 8004ac4:	20000008 	.word	0x20000008
 8004ac8:	2000000d 	.word	0x2000000d
 8004acc:	30302e30 	.word	0x30302e30
 8004ad0:	3030302e 	.word	0x3030302e
 8004ad4:	00000000 	.word	0x00000000

08004ad8 <keypad_sm>:
void keypad_sm(char num){
 8004ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(kpenum == WAIT){
 8004adc:	4da4      	ldr	r5, [pc, #656]	; (8004d70 <keypad_sm+0x298>)
 8004ade:	782a      	ldrb	r2, [r5, #0]
 8004ae0:	b9b2      	cbnz	r2, 8004b10 <keypad_sm+0x38>
		if(num == 'A'){
 8004ae2:	2841      	cmp	r0, #65	; 0x41
 8004ae4:	d070      	beq.n	8004bc8 <keypad_sm+0xf0>
		else if(num == 'B'){
 8004ae6:	2842      	cmp	r0, #66	; 0x42
 8004ae8:	f000 810d 	beq.w	8004d06 <keypad_sm+0x22e>
		else if(num == 'C'){
 8004aec:	2843      	cmp	r0, #67	; 0x43
 8004aee:	f000 80d6 	beq.w	8004c9e <keypad_sm+0x1c6>
		else if(num == 'D'){
 8004af2:	2844      	cmp	r0, #68	; 0x44
 8004af4:	f000 837c 	beq.w	80051f0 <keypad_sm+0x718>
		else if(num == '*'){
 8004af8:	282a      	cmp	r0, #42	; 0x2a
 8004afa:	f000 83ad 	beq.w	8005258 <keypad_sm+0x780>
		else if(num == '/'){
 8004afe:	282f      	cmp	r0, #47	; 0x2f
 8004b00:	d111      	bne.n	8004b26 <keypad_sm+0x4e>
			chstat_main = !chstat_main;
 8004b02:	4a9c      	ldr	r2, [pc, #624]	; (8004d74 <keypad_sm+0x29c>)
 8004b04:	7813      	ldrb	r3, [r2, #0]
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	7013      	strb	r3, [r2, #0]
 8004b0e:	e00a      	b.n	8004b26 <keypad_sm+0x4e>
	else if(kpenum == V1){
 8004b10:	2a01      	cmp	r2, #1
 8004b12:	d00a      	beq.n	8004b2a <keypad_sm+0x52>
	else if(kpenum == A1){
 8004b14:	2a02      	cmp	r2, #2
 8004b16:	f000 8137 	beq.w	8004d88 <keypad_sm+0x2b0>
	else if(kpenum == V2){
 8004b1a:	2a03      	cmp	r2, #3
 8004b1c:	f000 8087 	beq.w	8004c2e <keypad_sm+0x156>
	else if(kpenum == A2){
 8004b20:	2a04      	cmp	r2, #4
 8004b22:	f000 8316 	beq.w	8005152 <keypad_sm+0x67a>
}
 8004b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004b2a:	4e93      	ldr	r6, [pc, #588]	; (8004d78 <keypad_sm+0x2a0>)
 8004b2c:	7832      	ldrb	r2, [r6, #0]
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	f000 817a 	beq.w	8004e28 <keypad_sm+0x350>
			if(num == 'A'){
 8004b34:	2841      	cmp	r0, #65	; 0x41
 8004b36:	f000 8397 	beq.w	8005268 <keypad_sm+0x790>
			else if(num == 'B'){
 8004b3a:	2842      	cmp	r0, #66	; 0x42
 8004b3c:	f000 8258 	beq.w	8004ff0 <keypad_sm+0x518>
			else if(num == 'C'){
 8004b40:	2843      	cmp	r0, #67	; 0x43
 8004b42:	f000 851f 	beq.w	8005584 <keypad_sm+0xaac>
			else if(num == 'D'){
 8004b46:	2844      	cmp	r0, #68	; 0x44
 8004b48:	f000 86c2 	beq.w	80058d0 <keypad_sm+0xdf8>
			else if(num == '.'){
 8004b4c:	282e      	cmp	r0, #46	; 0x2e
 8004b4e:	f001 802c 	beq.w	8005baa <keypad_sm+0x10d2>
			else if(num >= '0' && num <= '9'){
 8004b52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004b56:	2b09      	cmp	r3, #9
 8004b58:	f201 815b 	bhi.w	8005e12 <keypad_sm+0x133a>
	while(keypaditerator < 4){
 8004b5c:	4c87      	ldr	r4, [pc, #540]	; (8004d7c <keypad_sm+0x2a4>)
 8004b5e:	f994 2000 	ldrsb.w	r2, [r4]
 8004b62:	2a03      	cmp	r2, #3
 8004b64:	f300 82ef 	bgt.w	8005146 <keypad_sm+0x66e>
 8004b68:	4b85      	ldr	r3, [pc, #532]	; (8004d80 <keypad_sm+0x2a8>)
 8004b6a:	4d86      	ldr	r5, [pc, #536]	; (8004d84 <keypad_sm+0x2ac>)
 8004b6c:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004b70:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004b74:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004b78:	f895 e000 	ldrb.w	lr, [r5]
 8004b7c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004b80:	789f      	ldrb	r7, [r3, #2]
 8004b82:	7858      	ldrb	r0, [r3, #1]
 8004b84:	7819      	ldrb	r1, [r3, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	e003      	b.n	8004b92 <keypad_sm+0xba>
	while(keypaditerator < 4){
 8004b8a:	46bc      	mov	ip, r7
 8004b8c:	4607      	mov	r7, r0
 8004b8e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004b90:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004b92:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004b94:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004b98:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004b9a:	bf04      	itt	eq
 8004b9c:	f04f 0801 	moveq.w	r8, #1
 8004ba0:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004ba4:	2a04      	cmp	r2, #4
 8004ba6:	46e1      	mov	r9, ip
 8004ba8:	d1ef      	bne.n	8004b8a <keypad_sm+0xb2>
 8004baa:	7022      	strb	r2, [r4, #0]
 8004bac:	f883 c004 	strb.w	ip, [r3, #4]
 8004bb0:	70df      	strb	r7, [r3, #3]
 8004bb2:	7098      	strb	r0, [r3, #2]
 8004bb4:	7059      	strb	r1, [r3, #1]
 8004bb6:	f883 a000 	strb.w	sl, [r3]
 8004bba:	f1b8 0f00 	cmp.w	r8, #0
 8004bbe:	f000 82c2 	beq.w	8005146 <keypad_sm+0x66e>
 8004bc2:	f885 e000 	strb.w	lr, [r5]
 8004bc6:	e2be      	b.n	8005146 <keypad_sm+0x66e>
			kpenum = V1;
 8004bc8:	2301      	movs	r3, #1
	while(keypaditerator < 4){
 8004bca:	4c6c      	ldr	r4, [pc, #432]	; (8004d7c <keypad_sm+0x2a4>)
			kpenum = V1;
 8004bcc:	702b      	strb	r3, [r5, #0]
	while(keypaditerator < 4){
 8004bce:	f994 1000 	ldrsb.w	r1, [r4]
 8004bd2:	2903      	cmp	r1, #3
 8004bd4:	dca7      	bgt.n	8004b26 <keypad_sm+0x4e>
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	; (8004d80 <keypad_sm+0x2a8>)
 8004bd8:	4d6a      	ldr	r5, [pc, #424]	; (8004d84 <keypad_sm+0x2ac>)
			keypadarr[0] = num;
 8004bda:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004bde:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004be2:	782f      	ldrb	r7, [r5, #0]
 8004be4:	78de      	ldrb	r6, [r3, #3]
 8004be6:	f893 e002 	ldrb.w	lr, [r3, #2]
 8004bea:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004bee:	7818      	ldrb	r0, [r3, #0]
 8004bf0:	b2c9      	uxtb	r1, r1
 8004bf2:	e003      	b.n	8004bfc <keypad_sm+0x124>
	while(keypaditerator < 4){
 8004bf4:	4676      	mov	r6, lr
 8004bf6:	46e6      	mov	lr, ip
 8004bf8:	4684      	mov	ip, r0
			keypadarr[0] = num;
 8004bfa:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004bfc:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004bfe:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004c02:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004c04:	bf04      	itt	eq
 8004c06:	2700      	moveq	r7, #0
 8004c08:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004c0a:	2904      	cmp	r1, #4
 8004c0c:	46b0      	mov	r8, r6
 8004c0e:	d1f1      	bne.n	8004bf4 <keypad_sm+0x11c>
 8004c10:	7021      	strb	r1, [r4, #0]
 8004c12:	711e      	strb	r6, [r3, #4]
 8004c14:	f883 e003 	strb.w	lr, [r3, #3]
 8004c18:	f883 c002 	strb.w	ip, [r3, #2]
 8004c1c:	7058      	strb	r0, [r3, #1]
 8004c1e:	f883 9000 	strb.w	r9, [r3]
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	f43f af7f 	beq.w	8004b26 <keypad_sm+0x4e>
 8004c28:	702f      	strb	r7, [r5, #0]
}
 8004c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004c2e:	4e52      	ldr	r6, [pc, #328]	; (8004d78 <keypad_sm+0x2a0>)
 8004c30:	7832      	ldrb	r2, [r6, #0]
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	f040 815d 	bne.w	8004ef2 <keypad_sm+0x41a>
			if(num == 'A'){
 8004c38:	2841      	cmp	r0, #65	; 0x41
 8004c3a:	f000 846d 	beq.w	8005518 <keypad_sm+0xa40>
			else if(num == 'B'){
 8004c3e:	2842      	cmp	r0, #66	; 0x42
 8004c40:	f000 86f6 	beq.w	8005a30 <keypad_sm+0xf58>
			else if(num == 'C'){
 8004c44:	2843      	cmp	r0, #67	; 0x43
 8004c46:	f000 87e9 	beq.w	8005c1c <keypad_sm+0x1144>
			else if(num == 'D'){
 8004c4a:	2844      	cmp	r0, #68	; 0x44
 8004c4c:	f001 8139 	beq.w	8005ec2 <keypad_sm+0x13ea>
			else if(num == '.'){
 8004c50:	282e      	cmp	r0, #46	; 0x2e
 8004c52:	f000 854c 	beq.w	80056ee <keypad_sm+0xc16>
			else if(num >= '0' && num <= '9'){
 8004c56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	f240 8548 	bls.w	80056f0 <keypad_sm+0xc18>
			else if(num == '#'){
 8004c60:	2823      	cmp	r0, #35	; 0x23
 8004c62:	f001 84ad 	beq.w	80065c0 <keypad_sm+0x1ae8>
			else if(num == '+'){
 8004c66:	282b      	cmp	r0, #43	; 0x2b
 8004c68:	f001 85c5 	beq.w	80067f6 <keypad_sm+0x1d1e>
			else if(num == '-'){
 8004c6c:	282d      	cmp	r0, #45	; 0x2d
 8004c6e:	f001 860d 	beq.w	800688c <keypad_sm+0x1db4>
			else if(num == 's'){
 8004c72:	2873      	cmp	r0, #115	; 0x73
 8004c74:	f002 8199 	beq.w	8006faa <keypad_sm+0x24d2>
			else if(num == '['){
 8004c78:	285b      	cmp	r0, #91	; 0x5b
 8004c7a:	f43f af54 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == ']'){
 8004c7e:	285d      	cmp	r0, #93	; 0x5d
 8004c80:	f43f af51 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == '*'){
 8004c84:	282a      	cmp	r0, #42	; 0x2a
 8004c86:	f002 8211 	beq.w	80070ac <keypad_sm+0x25d4>
			else if(num == '/'){
 8004c8a:	282f      	cmp	r0, #47	; 0x2f
 8004c8c:	f47f af4b 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 8004c90:	4a38      	ldr	r2, [pc, #224]	; (8004d74 <keypad_sm+0x29c>)
 8004c92:	7813      	ldrb	r3, [r2, #0]
 8004c94:	fab3 f383 	clz	r3, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	7013      	strb	r3, [r2, #0]
 8004c9c:	e743      	b.n	8004b26 <keypad_sm+0x4e>
			kpenum = V2;
 8004c9e:	2303      	movs	r3, #3
	while(keypaditerator < 4){
 8004ca0:	4c36      	ldr	r4, [pc, #216]	; (8004d7c <keypad_sm+0x2a4>)
			kpenum = V2;
 8004ca2:	702b      	strb	r3, [r5, #0]
	while(keypaditerator < 4){
 8004ca4:	f994 1000 	ldrsb.w	r1, [r4]
 8004ca8:	4299      	cmp	r1, r3
 8004caa:	f73f af3c 	bgt.w	8004b26 <keypad_sm+0x4e>
 8004cae:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <keypad_sm+0x2a8>)
 8004cb0:	4d34      	ldr	r5, [pc, #208]	; (8004d84 <keypad_sm+0x2ac>)
			keypadarr[0] = num;
 8004cb2:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004cb6:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004cba:	f895 e000 	ldrb.w	lr, [r5]
 8004cbe:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004cc2:	789f      	ldrb	r7, [r3, #2]
 8004cc4:	785e      	ldrb	r6, [r3, #1]
 8004cc6:	7818      	ldrb	r0, [r3, #0]
 8004cc8:	b2c9      	uxtb	r1, r1
 8004cca:	e003      	b.n	8004cd4 <keypad_sm+0x1fc>
	while(keypaditerator < 4){
 8004ccc:	46bc      	mov	ip, r7
 8004cce:	4637      	mov	r7, r6
 8004cd0:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8004cd2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004cd4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004cd6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004cda:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004cdc:	bf04      	itt	eq
 8004cde:	f04f 0e00 	moveq.w	lr, #0
 8004ce2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004ce4:	2904      	cmp	r1, #4
 8004ce6:	46e0      	mov	r8, ip
 8004ce8:	d1f0      	bne.n	8004ccc <keypad_sm+0x1f4>
 8004cea:	7021      	strb	r1, [r4, #0]
 8004cec:	f883 c004 	strb.w	ip, [r3, #4]
 8004cf0:	70df      	strb	r7, [r3, #3]
 8004cf2:	709e      	strb	r6, [r3, #2]
 8004cf4:	7058      	strb	r0, [r3, #1]
 8004cf6:	f883 9000 	strb.w	r9, [r3]
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	f43f af13 	beq.w	8004b26 <keypad_sm+0x4e>
 8004d00:	f885 e000 	strb.w	lr, [r5]
 8004d04:	e70f      	b.n	8004b26 <keypad_sm+0x4e>
			kpenum = A1;
 8004d06:	2302      	movs	r3, #2
	while(keypaditerator < 4){
 8004d08:	4c1c      	ldr	r4, [pc, #112]	; (8004d7c <keypad_sm+0x2a4>)
			kpenum = A1;
 8004d0a:	702b      	strb	r3, [r5, #0]
	while(keypaditerator < 4){
 8004d0c:	f994 1000 	ldrsb.w	r1, [r4]
 8004d10:	2903      	cmp	r1, #3
 8004d12:	f73f af08 	bgt.w	8004b26 <keypad_sm+0x4e>
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <keypad_sm+0x2a8>)
 8004d18:	4d1a      	ldr	r5, [pc, #104]	; (8004d84 <keypad_sm+0x2ac>)
			keypadarr[0] = num;
 8004d1a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004d1e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004d22:	f895 e000 	ldrb.w	lr, [r5]
 8004d26:	78df      	ldrb	r7, [r3, #3]
 8004d28:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004d2c:	785e      	ldrb	r6, [r3, #1]
 8004d2e:	7818      	ldrb	r0, [r3, #0]
 8004d30:	b2c9      	uxtb	r1, r1
 8004d32:	e003      	b.n	8004d3c <keypad_sm+0x264>
	while(keypaditerator < 4){
 8004d34:	4667      	mov	r7, ip
 8004d36:	46b4      	mov	ip, r6
 8004d38:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8004d3a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004d3c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004d3e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004d42:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004d44:	bf04      	itt	eq
 8004d46:	f04f 0e00 	moveq.w	lr, #0
 8004d4a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004d4c:	2904      	cmp	r1, #4
 8004d4e:	46b8      	mov	r8, r7
 8004d50:	d1f0      	bne.n	8004d34 <keypad_sm+0x25c>
 8004d52:	7021      	strb	r1, [r4, #0]
 8004d54:	711f      	strb	r7, [r3, #4]
 8004d56:	f883 c003 	strb.w	ip, [r3, #3]
 8004d5a:	709e      	strb	r6, [r3, #2]
 8004d5c:	7058      	strb	r0, [r3, #1]
 8004d5e:	f883 9000 	strb.w	r9, [r3]
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	f43f aedf 	beq.w	8004b26 <keypad_sm+0x4e>
 8004d68:	f885 e000 	strb.w	lr, [r5]
 8004d6c:	e6db      	b.n	8004b26 <keypad_sm+0x4e>
 8004d6e:	bf00      	nop
 8004d70:	20000749 	.word	0x20000749
 8004d74:	200003e7 	.word	0x200003e7
 8004d78:	200003f0 	.word	0x200003f0
 8004d7c:	2000000d 	.word	0x2000000d
 8004d80:	20000008 	.word	0x20000008
 8004d84:	20000748 	.word	0x20000748
		if(encmode){
 8004d88:	4ec0      	ldr	r6, [pc, #768]	; (800508c <keypad_sm+0x5b4>)
 8004d8a:	7832      	ldrb	r2, [r6, #0]
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d07e      	beq.n	8004e8e <keypad_sm+0x3b6>
			if(num == 'A'){
 8004d90:	2841      	cmp	r0, #65	; 0x41
 8004d92:	f000 81a3 	beq.w	80050dc <keypad_sm+0x604>
			else if(num == 'B'){
 8004d96:	2842      	cmp	r0, #66	; 0x42
 8004d98:	f000 833c 	beq.w	8005414 <keypad_sm+0x93c>
			else if(num == 'C'){
 8004d9c:	2843      	cmp	r0, #67	; 0x43
 8004d9e:	f000 855d 	beq.w	800585c <keypad_sm+0xd84>
			else if(num == 'D'){
 8004da2:	2844      	cmp	r0, #68	; 0x44
 8004da4:	f000 867a 	beq.w	8005a9c <keypad_sm+0xfc4>
			else if(num == '.'){
 8004da8:	282e      	cmp	r0, #46	; 0x2e
 8004daa:	f001 80c2 	beq.w	8005f32 <keypad_sm+0x145a>
			else if(num >= '0' && num <= '9'){
 8004dae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004db2:	2b09      	cmp	r3, #9
 8004db4:	f201 8172 	bhi.w	800609c <keypad_sm+0x15c4>
	while(keypaditerator < 4){
 8004db8:	4cb5      	ldr	r4, [pc, #724]	; (8005090 <keypad_sm+0x5b8>)
 8004dba:	f994 2000 	ldrsb.w	r2, [r4]
 8004dbe:	2a03      	cmp	r2, #3
 8004dc0:	f300 81c1 	bgt.w	8005146 <keypad_sm+0x66e>
 8004dc4:	4bb3      	ldr	r3, [pc, #716]	; (8005094 <keypad_sm+0x5bc>)
 8004dc6:	4db4      	ldr	r5, [pc, #720]	; (8005098 <keypad_sm+0x5c0>)
 8004dc8:	3201      	adds	r2, #1
 8004dca:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004dce:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004dd2:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004dd6:	f895 e000 	ldrb.w	lr, [r5]
 8004dda:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004dde:	789f      	ldrb	r7, [r3, #2]
 8004de0:	7858      	ldrb	r0, [r3, #1]
 8004de2:	7819      	ldrb	r1, [r3, #0]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	e003      	b.n	8004df0 <keypad_sm+0x318>
	while(keypaditerator < 4){
 8004de8:	46bc      	mov	ip, r7
 8004dea:	4607      	mov	r7, r0
 8004dec:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004dee:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004df0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004df2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004df6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004df8:	bf04      	itt	eq
 8004dfa:	f04f 0801 	moveq.w	r8, #1
 8004dfe:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004e02:	2a05      	cmp	r2, #5
 8004e04:	46e1      	mov	r9, ip
 8004e06:	d1ef      	bne.n	8004de8 <keypad_sm+0x310>
 8004e08:	f883 c004 	strb.w	ip, [r3, #4]
 8004e0c:	70df      	strb	r7, [r3, #3]
 8004e0e:	7098      	strb	r0, [r3, #2]
 8004e10:	7059      	strb	r1, [r3, #1]
 8004e12:	f883 a000 	strb.w	sl, [r3]
 8004e16:	2304      	movs	r3, #4
 8004e18:	7023      	strb	r3, [r4, #0]
 8004e1a:	f1b8 0f00 	cmp.w	r8, #0
 8004e1e:	f000 8192 	beq.w	8005146 <keypad_sm+0x66e>
 8004e22:	f885 e000 	strb.w	lr, [r5]
 8004e26:	e18e      	b.n	8005146 <keypad_sm+0x66e>
			if(num == 'A'){
 8004e28:	2841      	cmp	r0, #65	; 0x41
 8004e2a:	f000 8265 	beq.w	80052f8 <keypad_sm+0x820>
			else if(num == 'B'){
 8004e2e:	2842      	cmp	r0, #66	; 0x42
 8004e30:	f000 8115 	beq.w	800505e <keypad_sm+0x586>
			else if(num == 'C'){
 8004e34:	2843      	cmp	r0, #67	; 0x43
 8004e36:	f000 8426 	beq.w	8005686 <keypad_sm+0xbae>
			else if(num == 'D'){
 8004e3a:	2844      	cmp	r0, #68	; 0x44
 8004e3c:	f000 84da 	beq.w	80057f4 <keypad_sm+0xd1c>
			else if(num == '.'){
 8004e40:	282e      	cmp	r0, #46	; 0x2e
 8004e42:	f001 814b 	beq.w	80060dc <keypad_sm+0x1604>
			else if(num >= '0' && num <= '9'){
 8004e46:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	f240 8450 	bls.w	80056f0 <keypad_sm+0xc18>
			else if(num == '#'){
 8004e50:	2823      	cmp	r0, #35	; 0x23
 8004e52:	f001 8333 	beq.w	80064bc <keypad_sm+0x19e4>
			else if(num == '+'){
 8004e56:	282b      	cmp	r0, #43	; 0x2b
 8004e58:	f001 81fc 	beq.w	8006254 <keypad_sm+0x177c>
			else if(num == '-'){
 8004e5c:	282d      	cmp	r0, #45	; 0x2d
 8004e5e:	f001 83b3 	beq.w	80065c8 <keypad_sm+0x1af0>
			else if(num == 's'){
 8004e62:	2873      	cmp	r0, #115	; 0x73
 8004e64:	f001 8665 	beq.w	8006b32 <keypad_sm+0x205a>
			else if(num == '['){
 8004e68:	285b      	cmp	r0, #91	; 0x5b
 8004e6a:	f43f ae5c 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == ']'){
 8004e6e:	285d      	cmp	r0, #93	; 0x5d
 8004e70:	f43f ae59 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == '*'){
 8004e74:	282a      	cmp	r0, #42	; 0x2a
 8004e76:	f002 8037 	beq.w	8006ee8 <keypad_sm+0x2410>
			else if(num == '/'){
 8004e7a:	282f      	cmp	r0, #47	; 0x2f
 8004e7c:	f47f ae53 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 8004e80:	4a86      	ldr	r2, [pc, #536]	; (800509c <keypad_sm+0x5c4>)
 8004e82:	7813      	ldrb	r3, [r2, #0]
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	7013      	strb	r3, [r2, #0]
 8004e8c:	e64b      	b.n	8004b26 <keypad_sm+0x4e>
			if(num == 'A'){
 8004e8e:	2841      	cmp	r0, #65	; 0x41
 8004e90:	d07b      	beq.n	8004f8a <keypad_sm+0x4b2>
			else if(num == 'B'){
 8004e92:	2842      	cmp	r0, #66	; 0x42
 8004e94:	f000 83ae 	beq.w	80055f4 <keypad_sm+0xb1c>
			else if(num == 'C'){
 8004e98:	2843      	cmp	r0, #67	; 0x43
 8004e9a:	f000 8553 	beq.w	8005944 <keypad_sm+0xe6c>
			else if(num == 'D'){
 8004e9e:	2844      	cmp	r0, #68	; 0x44
 8004ea0:	f000 8706 	beq.w	8005cb0 <keypad_sm+0x11d8>
			else if(num == '.'){
 8004ea4:	282e      	cmp	r0, #46	; 0x2e
 8004ea6:	f001 8269 	beq.w	800637c <keypad_sm+0x18a4>
			else if(num >= '0' && num <= '9'){
 8004eaa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004eae:	2b09      	cmp	r3, #9
 8004eb0:	f240 841e 	bls.w	80056f0 <keypad_sm+0xc18>
			else if(num == '#'){
 8004eb4:	2823      	cmp	r0, #35	; 0x23
 8004eb6:	f001 844c 	beq.w	8006752 <keypad_sm+0x1c7a>
			else if(num == '+'){
 8004eba:	282b      	cmp	r0, #43	; 0x2b
 8004ebc:	f001 8319 	beq.w	80064f2 <keypad_sm+0x1a1a>
			else if(num == '-'){
 8004ec0:	282d      	cmp	r0, #45	; 0x2d
 8004ec2:	f001 83b9 	beq.w	8006638 <keypad_sm+0x1b60>
			else if(num == 's'){
 8004ec6:	2873      	cmp	r0, #115	; 0x73
 8004ec8:	f002 8002 	beq.w	8006ed0 <keypad_sm+0x23f8>
			else if(num == '['){
 8004ecc:	285b      	cmp	r0, #91	; 0x5b
 8004ece:	f43f ae2a 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == ']'){
 8004ed2:	285d      	cmp	r0, #93	; 0x5d
 8004ed4:	f43f ae27 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == '*'){
 8004ed8:	282a      	cmp	r0, #42	; 0x2a
 8004eda:	f001 87f0 	beq.w	8006ebe <keypad_sm+0x23e6>
			else if(num == '/'){
 8004ede:	282f      	cmp	r0, #47	; 0x2f
 8004ee0:	f47f ae21 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 8004ee4:	4a6d      	ldr	r2, [pc, #436]	; (800509c <keypad_sm+0x5c4>)
 8004ee6:	7813      	ldrb	r3, [r2, #0]
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	7013      	strb	r3, [r2, #0]
 8004ef0:	e619      	b.n	8004b26 <keypad_sm+0x4e>
			if(num == 'A'){
 8004ef2:	2841      	cmp	r0, #65	; 0x41
 8004ef4:	f000 82d6 	beq.w	80054a4 <keypad_sm+0x9cc>
			else if(num == 'B'){
 8004ef8:	2842      	cmp	r0, #66	; 0x42
 8004efa:	f000 8559 	beq.w	80059b0 <keypad_sm+0xed8>
			else if(num == 'C'){
 8004efe:	2843      	cmp	r0, #67	; 0x43
 8004f00:	f000 8605 	beq.w	8005b0e <keypad_sm+0x1036>
			else if(num == 'D'){
 8004f04:	2844      	cmp	r0, #68	; 0x44
 8004f06:	f001 804d 	beq.w	8005fa4 <keypad_sm+0x14cc>
			else if(num == '.'){
 8004f0a:	282e      	cmp	r0, #46	; 0x2e
 8004f0c:	f001 816b 	beq.w	80061e6 <keypad_sm+0x170e>
			else if(num >= '0' && num <= '9'){
 8004f10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	f201 8146 	bhi.w	80061a6 <keypad_sm+0x16ce>
	while(keypaditerator < 4){
 8004f1a:	4c5d      	ldr	r4, [pc, #372]	; (8005090 <keypad_sm+0x5b8>)
 8004f1c:	f994 2000 	ldrsb.w	r2, [r4]
 8004f20:	2a03      	cmp	r2, #3
 8004f22:	f300 8110 	bgt.w	8005146 <keypad_sm+0x66e>
 8004f26:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <keypad_sm+0x5bc>)
 8004f28:	4d5b      	ldr	r5, [pc, #364]	; (8005098 <keypad_sm+0x5c0>)
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004f30:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004f34:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004f38:	f895 e000 	ldrb.w	lr, [r5]
 8004f3c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004f40:	789f      	ldrb	r7, [r3, #2]
 8004f42:	7858      	ldrb	r0, [r3, #1]
 8004f44:	7819      	ldrb	r1, [r3, #0]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	e003      	b.n	8004f52 <keypad_sm+0x47a>
	while(keypaditerator < 4){
 8004f4a:	46bc      	mov	ip, r7
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004f50:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004f52:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004f54:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004f58:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004f5a:	bf04      	itt	eq
 8004f5c:	f04f 0801 	moveq.w	r8, #1
 8004f60:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004f64:	2a05      	cmp	r2, #5
 8004f66:	46e1      	mov	r9, ip
 8004f68:	d1ef      	bne.n	8004f4a <keypad_sm+0x472>
 8004f6a:	f883 c004 	strb.w	ip, [r3, #4]
 8004f6e:	70df      	strb	r7, [r3, #3]
 8004f70:	7098      	strb	r0, [r3, #2]
 8004f72:	7059      	strb	r1, [r3, #1]
 8004f74:	f883 a000 	strb.w	sl, [r3]
 8004f78:	2304      	movs	r3, #4
 8004f7a:	7023      	strb	r3, [r4, #0]
 8004f7c:	f1b8 0f00 	cmp.w	r8, #0
 8004f80:	f000 80e1 	beq.w	8005146 <keypad_sm+0x66e>
 8004f84:	f885 e000 	strb.w	lr, [r5]
 8004f88:	e0dd      	b.n	8005146 <keypad_sm+0x66e>
 8004f8a:	4c41      	ldr	r4, [pc, #260]	; (8005090 <keypad_sm+0x5b8>)
				kpenum = WAIT;
 8004f8c:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8004f8e:	f994 1000 	ldrsb.w	r1, [r4]
 8004f92:	2903      	cmp	r1, #3
 8004f94:	f73f adc7 	bgt.w	8004b26 <keypad_sm+0x4e>
 8004f98:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <keypad_sm+0x5bc>)
 8004f9a:	4d3f      	ldr	r5, [pc, #252]	; (8005098 <keypad_sm+0x5c0>)
			keypadarr[0] = num;
 8004f9c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004fa0:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004fa4:	f895 e000 	ldrb.w	lr, [r5]
 8004fa8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004fac:	789f      	ldrb	r7, [r3, #2]
 8004fae:	785e      	ldrb	r6, [r3, #1]
 8004fb0:	7818      	ldrb	r0, [r3, #0]
 8004fb2:	b2c9      	uxtb	r1, r1
 8004fb4:	e003      	b.n	8004fbe <keypad_sm+0x4e6>
	while(keypaditerator < 4){
 8004fb6:	46bc      	mov	ip, r7
 8004fb8:	4637      	mov	r7, r6
 8004fba:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8004fbc:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004fbe:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004fc0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004fc4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004fc6:	bf04      	itt	eq
 8004fc8:	f04f 0e00 	moveq.w	lr, #0
 8004fcc:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004fce:	2904      	cmp	r1, #4
 8004fd0:	46e0      	mov	r8, ip
 8004fd2:	d1f0      	bne.n	8004fb6 <keypad_sm+0x4de>
 8004fd4:	7021      	strb	r1, [r4, #0]
 8004fd6:	f883 c004 	strb.w	ip, [r3, #4]
 8004fda:	70df      	strb	r7, [r3, #3]
 8004fdc:	709e      	strb	r6, [r3, #2]
 8004fde:	7058      	strb	r0, [r3, #1]
 8004fe0:	f883 9000 	strb.w	r9, [r3]
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	f43f ad9e 	beq.w	8004b26 <keypad_sm+0x4e>
 8004fea:	f885 e000 	strb.w	lr, [r5]
 8004fee:	e59a      	b.n	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8004ff0:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8004ff4:	4c26      	ldr	r4, [pc, #152]	; (8005090 <keypad_sm+0x5b8>)
				kpenum = WAIT;
 8004ff6:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 8004ffa:	f994 2000 	ldrsb.w	r2, [r4]
 8004ffe:	2a03      	cmp	r2, #3
 8005000:	f300 80a1 	bgt.w	8005146 <keypad_sm+0x66e>
 8005004:	4b23      	ldr	r3, [pc, #140]	; (8005094 <keypad_sm+0x5bc>)
 8005006:	4d24      	ldr	r5, [pc, #144]	; (8005098 <keypad_sm+0x5c0>)
			keypadarr[0] = num;
 8005008:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800500c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005010:	f895 8000 	ldrb.w	r8, [r5]
 8005014:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005018:	789f      	ldrb	r7, [r3, #2]
 800501a:	7858      	ldrb	r0, [r3, #1]
 800501c:	7819      	ldrb	r1, [r3, #0]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	e003      	b.n	800502a <keypad_sm+0x552>
	while(keypaditerator < 4){
 8005022:	46bc      	mov	ip, r7
 8005024:	4607      	mov	r7, r0
 8005026:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005028:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800502a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800502c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005030:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005032:	bf04      	itt	eq
 8005034:	f04f 0e01 	moveq.w	lr, #1
 8005038:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800503c:	2a04      	cmp	r2, #4
 800503e:	46e1      	mov	r9, ip
 8005040:	d1ef      	bne.n	8005022 <keypad_sm+0x54a>
 8005042:	7022      	strb	r2, [r4, #0]
 8005044:	f883 c004 	strb.w	ip, [r3, #4]
 8005048:	70df      	strb	r7, [r3, #3]
 800504a:	7098      	strb	r0, [r3, #2]
 800504c:	7059      	strb	r1, [r3, #1]
 800504e:	f883 a000 	strb.w	sl, [r3]
 8005052:	f1be 0f00 	cmp.w	lr, #0
 8005056:	d076      	beq.n	8005146 <keypad_sm+0x66e>
 8005058:	f885 8000 	strb.w	r8, [r5]
 800505c:	e073      	b.n	8005146 <keypad_sm+0x66e>
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <keypad_sm+0x5b8>)
				kpenum = WAIT;
 8005060:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005062:	f994 1000 	ldrsb.w	r1, [r4]
 8005066:	2903      	cmp	r1, #3
 8005068:	f73f ad5d 	bgt.w	8004b26 <keypad_sm+0x4e>
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <keypad_sm+0x5bc>)
 800506e:	4d0a      	ldr	r5, [pc, #40]	; (8005098 <keypad_sm+0x5c0>)
 8005070:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005072:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005076:	f893 8004 	ldrb.w	r8, [r3, #4]
 800507a:	f895 e000 	ldrb.w	lr, [r5]
 800507e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005082:	789f      	ldrb	r7, [r3, #2]
 8005084:	785e      	ldrb	r6, [r3, #1]
 8005086:	7818      	ldrb	r0, [r3, #0]
 8005088:	b2c9      	uxtb	r1, r1
 800508a:	e00d      	b.n	80050a8 <keypad_sm+0x5d0>
 800508c:	200003f0 	.word	0x200003f0
 8005090:	2000000d 	.word	0x2000000d
 8005094:	20000008 	.word	0x20000008
 8005098:	20000748 	.word	0x20000748
 800509c:	200003e7 	.word	0x200003e7
	while(keypaditerator < 4){
 80050a0:	46bc      	mov	ip, r7
 80050a2:	4637      	mov	r7, r6
 80050a4:	4606      	mov	r6, r0
			keypadarr[0] = num;
 80050a6:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80050a8:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80050aa:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80050ae:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80050b0:	bf04      	itt	eq
 80050b2:	f04f 0e00 	moveq.w	lr, #0
 80050b6:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80050b8:	2905      	cmp	r1, #5
 80050ba:	46e0      	mov	r8, ip
 80050bc:	d1f0      	bne.n	80050a0 <keypad_sm+0x5c8>
 80050be:	f883 c004 	strb.w	ip, [r3, #4]
 80050c2:	70df      	strb	r7, [r3, #3]
 80050c4:	709e      	strb	r6, [r3, #2]
 80050c6:	7058      	strb	r0, [r3, #1]
 80050c8:	f883 9000 	strb.w	r9, [r3]
 80050cc:	2304      	movs	r3, #4
 80050ce:	7023      	strb	r3, [r4, #0]
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	f43f ad28 	beq.w	8004b26 <keypad_sm+0x4e>
 80050d6:	f885 e000 	strb.w	lr, [r5]
 80050da:	e524      	b.n	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 80050dc:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80050e0:	4ca9      	ldr	r4, [pc, #676]	; (8005388 <keypad_sm+0x8b0>)
				kpenum = WAIT;
 80050e2:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 80050e6:	f994 2000 	ldrsb.w	r2, [r4]
 80050ea:	2a03      	cmp	r2, #3
 80050ec:	dc2b      	bgt.n	8005146 <keypad_sm+0x66e>
 80050ee:	4ba7      	ldr	r3, [pc, #668]	; (800538c <keypad_sm+0x8b4>)
 80050f0:	4da7      	ldr	r5, [pc, #668]	; (8005390 <keypad_sm+0x8b8>)
			keypadarr[0] = num;
 80050f2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80050f6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80050fa:	f895 8000 	ldrb.w	r8, [r5]
 80050fe:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005102:	789f      	ldrb	r7, [r3, #2]
 8005104:	7858      	ldrb	r0, [r3, #1]
 8005106:	7819      	ldrb	r1, [r3, #0]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	e003      	b.n	8005114 <keypad_sm+0x63c>
	while(keypaditerator < 4){
 800510c:	46bc      	mov	ip, r7
 800510e:	4607      	mov	r7, r0
 8005110:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005112:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005114:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005116:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800511a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800511c:	bf04      	itt	eq
 800511e:	f04f 0e01 	moveq.w	lr, #1
 8005122:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005126:	2a04      	cmp	r2, #4
 8005128:	46e1      	mov	r9, ip
 800512a:	d1ef      	bne.n	800510c <keypad_sm+0x634>
 800512c:	7022      	strb	r2, [r4, #0]
 800512e:	f883 c004 	strb.w	ip, [r3, #4]
 8005132:	70df      	strb	r7, [r3, #3]
 8005134:	7098      	strb	r0, [r3, #2]
 8005136:	7059      	strb	r1, [r3, #1]
 8005138:	f883 a000 	strb.w	sl, [r3]
 800513c:	f1be 0f00 	cmp.w	lr, #0
 8005140:	d001      	beq.n	8005146 <keypad_sm+0x66e>
 8005142:	f885 8000 	strb.w	r8, [r5]
				encmode = 0;
 8005146:	2300      	movs	r3, #0
				encpos = 0;
 8005148:	4a92      	ldr	r2, [pc, #584]	; (8005394 <keypad_sm+0x8bc>)
				encmode = 0;
 800514a:	7033      	strb	r3, [r6, #0]
				encpos = 0;
 800514c:	7013      	strb	r3, [r2, #0]
}
 800514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8005152:	4e91      	ldr	r6, [pc, #580]	; (8005398 <keypad_sm+0x8c0>)
 8005154:	7832      	ldrb	r2, [r6, #0]
 8005156:	2a00      	cmp	r2, #0
 8005158:	f000 8128 	beq.w	80053ac <keypad_sm+0x8d4>
			if(num == 'A'){
 800515c:	2841      	cmp	r0, #65	; 0x41
 800515e:	f000 82db 	beq.w	8005718 <keypad_sm+0xc40>
			else if(num == 'B'){
 8005162:	2842      	cmp	r0, #66	; 0x42
 8005164:	f000 85e4 	beq.w	8005d30 <keypad_sm+0x1258>
			else if(num == 'C'){
 8005168:	2843      	cmp	r0, #67	; 0x43
 800516a:	f000 8756 	beq.w	800601a <keypad_sm+0x1542>
			else if(num == 'D'){
 800516e:	2844      	cmp	r0, #68	; 0x44
 8005170:	f000 87cb 	beq.w	800610a <keypad_sm+0x1632>
			else if(num == '.'){
 8005174:	282e      	cmp	r0, #46	; 0x2e
 8005176:	f001 8168 	beq.w	800644a <keypad_sm+0x1972>
			else if(num >= '0' && num <= '9'){
 800517a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800517e:	2b09      	cmp	r3, #9
 8005180:	f201 81fe 	bhi.w	8006580 <keypad_sm+0x1aa8>
	while(keypaditerator < 4){
 8005184:	4c80      	ldr	r4, [pc, #512]	; (8005388 <keypad_sm+0x8b0>)
 8005186:	f994 2000 	ldrsb.w	r2, [r4]
 800518a:	2a03      	cmp	r2, #3
 800518c:	dcdb      	bgt.n	8005146 <keypad_sm+0x66e>
 800518e:	4b7f      	ldr	r3, [pc, #508]	; (800538c <keypad_sm+0x8b4>)
 8005190:	4d7f      	ldr	r5, [pc, #508]	; (8005390 <keypad_sm+0x8b8>)
 8005192:	3201      	adds	r2, #1
 8005194:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005198:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800519c:	f893 9004 	ldrb.w	r9, [r3, #4]
 80051a0:	f895 e000 	ldrb.w	lr, [r5]
 80051a4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80051a8:	789f      	ldrb	r7, [r3, #2]
 80051aa:	7858      	ldrb	r0, [r3, #1]
 80051ac:	7819      	ldrb	r1, [r3, #0]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	e003      	b.n	80051ba <keypad_sm+0x6e2>
	while(keypaditerator < 4){
 80051b2:	46bc      	mov	ip, r7
 80051b4:	4607      	mov	r7, r0
 80051b6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80051b8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80051ba:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80051bc:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80051c0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80051c2:	bf04      	itt	eq
 80051c4:	f04f 0801 	moveq.w	r8, #1
 80051c8:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80051cc:	2a05      	cmp	r2, #5
 80051ce:	46e1      	mov	r9, ip
 80051d0:	d1ef      	bne.n	80051b2 <keypad_sm+0x6da>
 80051d2:	f883 c004 	strb.w	ip, [r3, #4]
 80051d6:	70df      	strb	r7, [r3, #3]
 80051d8:	7098      	strb	r0, [r3, #2]
 80051da:	7059      	strb	r1, [r3, #1]
 80051dc:	f883 a000 	strb.w	sl, [r3]
 80051e0:	2304      	movs	r3, #4
 80051e2:	7023      	strb	r3, [r4, #0]
 80051e4:	f1b8 0f00 	cmp.w	r8, #0
 80051e8:	d0ad      	beq.n	8005146 <keypad_sm+0x66e>
 80051ea:	f885 e000 	strb.w	lr, [r5]
 80051ee:	e7aa      	b.n	8005146 <keypad_sm+0x66e>
			kpenum = A2;
 80051f0:	2304      	movs	r3, #4
	while(keypaditerator < 4){
 80051f2:	4c65      	ldr	r4, [pc, #404]	; (8005388 <keypad_sm+0x8b0>)
			kpenum = A2;
 80051f4:	702b      	strb	r3, [r5, #0]
	while(keypaditerator < 4){
 80051f6:	f994 1000 	ldrsb.w	r1, [r4]
 80051fa:	2903      	cmp	r1, #3
 80051fc:	f73f ac93 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005200:	4b62      	ldr	r3, [pc, #392]	; (800538c <keypad_sm+0x8b4>)
 8005202:	4d63      	ldr	r5, [pc, #396]	; (8005390 <keypad_sm+0x8b8>)
			keypadarr[0] = num;
 8005204:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005208:	f893 8004 	ldrb.w	r8, [r3, #4]
 800520c:	f895 e000 	ldrb.w	lr, [r5]
 8005210:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005214:	789f      	ldrb	r7, [r3, #2]
 8005216:	785e      	ldrb	r6, [r3, #1]
 8005218:	7818      	ldrb	r0, [r3, #0]
 800521a:	b2c9      	uxtb	r1, r1
 800521c:	e003      	b.n	8005226 <keypad_sm+0x74e>
	while(keypaditerator < 4){
 800521e:	46bc      	mov	ip, r7
 8005220:	4637      	mov	r7, r6
 8005222:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8005224:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005226:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005228:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800522c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800522e:	bf04      	itt	eq
 8005230:	f04f 0e00 	moveq.w	lr, #0
 8005234:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005236:	2904      	cmp	r1, #4
 8005238:	46e0      	mov	r8, ip
 800523a:	d1f0      	bne.n	800521e <keypad_sm+0x746>
 800523c:	7021      	strb	r1, [r4, #0]
 800523e:	f883 c004 	strb.w	ip, [r3, #4]
 8005242:	70df      	strb	r7, [r3, #3]
 8005244:	709e      	strb	r6, [r3, #2]
 8005246:	7058      	strb	r0, [r3, #1]
 8005248:	f883 9000 	strb.w	r9, [r3]
 800524c:	2a00      	cmp	r2, #0
 800524e:	f43f ac6a 	beq.w	8004b26 <keypad_sm+0x4e>
 8005252:	f885 e000 	strb.w	lr, [r5]
 8005256:	e466      	b.n	8004b26 <keypad_sm+0x4e>
			chstat_aux_tx = !chstat_aux_rx;
 8005258:	4b50      	ldr	r3, [pc, #320]	; (800539c <keypad_sm+0x8c4>)
 800525a:	4a51      	ldr	r2, [pc, #324]	; (80053a0 <keypad_sm+0x8c8>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	7013      	strb	r3, [r2, #0]
 8005266:	e45e      	b.n	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8005268:	f7fe ff70 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800526c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800526e:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005270:	f7fb ff52 	bl	8001118 <__aeabi_fcmpge>
 8005274:	b130      	cbz	r0, 8005284 <keypad_sm+0x7ac>
 8005276:	4620      	mov	r0, r4
 8005278:	494a      	ldr	r1, [pc, #296]	; (80053a4 <keypad_sm+0x8cc>)
 800527a:	f7fb ff43 	bl	8001104 <__aeabi_fcmple>
 800527e:	b108      	cbz	r0, 8005284 <keypad_sm+0x7ac>
					volt_set_aux = translate_keypad();
 8005280:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <keypad_sm+0x8d0>)
 8005282:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8005284:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005288:	4c3f      	ldr	r4, [pc, #252]	; (8005388 <keypad_sm+0x8b0>)
				kpenum = WAIT;
 800528a:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 800528e:	f994 2000 	ldrsb.w	r2, [r4]
 8005292:	2a03      	cmp	r2, #3
 8005294:	f73f af57 	bgt.w	8005146 <keypad_sm+0x66e>
 8005298:	4b3c      	ldr	r3, [pc, #240]	; (800538c <keypad_sm+0x8b4>)
 800529a:	4d3d      	ldr	r5, [pc, #244]	; (8005390 <keypad_sm+0x8b8>)
 800529c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800529e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80052a2:	f893 9004 	ldrb.w	r9, [r3, #4]
 80052a6:	f895 8000 	ldrb.w	r8, [r5]
 80052aa:	f893 c003 	ldrb.w	ip, [r3, #3]
 80052ae:	789f      	ldrb	r7, [r3, #2]
 80052b0:	7858      	ldrb	r0, [r3, #1]
 80052b2:	7819      	ldrb	r1, [r3, #0]
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	e003      	b.n	80052c0 <keypad_sm+0x7e8>
	while(keypaditerator < 4){
 80052b8:	46bc      	mov	ip, r7
 80052ba:	4607      	mov	r7, r0
 80052bc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80052be:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80052c0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80052c2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80052c6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80052c8:	bf04      	itt	eq
 80052ca:	f04f 0e01 	moveq.w	lr, #1
 80052ce:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80052d2:	2a05      	cmp	r2, #5
 80052d4:	46e1      	mov	r9, ip
 80052d6:	d1ef      	bne.n	80052b8 <keypad_sm+0x7e0>
 80052d8:	f883 c004 	strb.w	ip, [r3, #4]
 80052dc:	70df      	strb	r7, [r3, #3]
 80052de:	7098      	strb	r0, [r3, #2]
 80052e0:	7059      	strb	r1, [r3, #1]
 80052e2:	f883 a000 	strb.w	sl, [r3]
 80052e6:	2304      	movs	r3, #4
 80052e8:	7023      	strb	r3, [r4, #0]
 80052ea:	f1be 0f00 	cmp.w	lr, #0
 80052ee:	f43f af2a 	beq.w	8005146 <keypad_sm+0x66e>
 80052f2:	f885 8000 	strb.w	r8, [r5]
 80052f6:	e726      	b.n	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 80052f8:	f7fe ff28 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80052fc:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80052fe:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005300:	f7fb ff0a 	bl	8001118 <__aeabi_fcmpge>
 8005304:	b130      	cbz	r0, 8005314 <keypad_sm+0x83c>
 8005306:	4620      	mov	r0, r4
 8005308:	4926      	ldr	r1, [pc, #152]	; (80053a4 <keypad_sm+0x8cc>)
 800530a:	f7fb fefb 	bl	8001104 <__aeabi_fcmple>
 800530e:	b108      	cbz	r0, 8005314 <keypad_sm+0x83c>
					volt_set_aux = translate_keypad();
 8005310:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <keypad_sm+0x8d0>)
 8005312:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8005314:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005318:	4c1b      	ldr	r4, [pc, #108]	; (8005388 <keypad_sm+0x8b0>)
				kpenum = WAIT;
 800531a:	f885 c000 	strb.w	ip, [r5]
	while(keypaditerator < 4){
 800531e:	f994 2000 	ldrsb.w	r2, [r4]
 8005322:	2a03      	cmp	r2, #3
 8005324:	f73f abff 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005328:	4b18      	ldr	r3, [pc, #96]	; (800538c <keypad_sm+0x8b4>)
 800532a:	4d19      	ldr	r5, [pc, #100]	; (8005390 <keypad_sm+0x8b8>)
 800532c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800532e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005332:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005336:	f895 e000 	ldrb.w	lr, [r5]
 800533a:	78df      	ldrb	r7, [r3, #3]
 800533c:	789e      	ldrb	r6, [r3, #2]
 800533e:	7858      	ldrb	r0, [r3, #1]
 8005340:	7819      	ldrb	r1, [r3, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	e003      	b.n	800534e <keypad_sm+0x876>
	while(keypaditerator < 4){
 8005346:	4637      	mov	r7, r6
 8005348:	4606      	mov	r6, r0
 800534a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800534c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800534e:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005350:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005354:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005356:	bf04      	itt	eq
 8005358:	f04f 0e00 	moveq.w	lr, #0
 800535c:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005360:	2a05      	cmp	r2, #5
 8005362:	46b8      	mov	r8, r7
 8005364:	d1ef      	bne.n	8005346 <keypad_sm+0x86e>
 8005366:	711f      	strb	r7, [r3, #4]
 8005368:	70de      	strb	r6, [r3, #3]
 800536a:	7098      	strb	r0, [r3, #2]
 800536c:	7059      	strb	r1, [r3, #1]
 800536e:	f883 9000 	strb.w	r9, [r3]
 8005372:	2304      	movs	r3, #4
 8005374:	7023      	strb	r3, [r4, #0]
 8005376:	f1bc 0f00 	cmp.w	ip, #0
 800537a:	f43f abd4 	beq.w	8004b26 <keypad_sm+0x4e>
 800537e:	f885 e000 	strb.w	lr, [r5]
 8005382:	f7ff bbd0 	b.w	8004b26 <keypad_sm+0x4e>
 8005386:	bf00      	nop
 8005388:	2000000d 	.word	0x2000000d
 800538c:	20000008 	.word	0x20000008
 8005390:	20000748 	.word	0x20000748
 8005394:	200003f1 	.word	0x200003f1
 8005398:	200003f0 	.word	0x200003f0
 800539c:	200003e5 	.word	0x200003e5
 80053a0:	200003e6 	.word	0x200003e6
 80053a4:	41400000 	.word	0x41400000
 80053a8:	20000a6c 	.word	0x20000a6c
			if(num == 'A'){
 80053ac:	2841      	cmp	r0, #65	; 0x41
 80053ae:	f000 81ed 	beq.w	800578c <keypad_sm+0xcb4>
			else if(num == 'B'){
 80053b2:	2842      	cmp	r0, #66	; 0x42
 80053b4:	f000 84f7 	beq.w	8005da6 <keypad_sm+0x12ce>
			else if(num == 'C'){
 80053b8:	2843      	cmp	r0, #67	; 0x43
 80053ba:	f000 854a 	beq.w	8005e52 <keypad_sm+0x137a>
			else if(num == 'D'){
 80053be:	2844      	cmp	r0, #68	; 0x44
 80053c0:	f000 878d 	beq.w	80062de <keypad_sm+0x1806>
			else if(num == '.'){
 80053c4:	282e      	cmp	r0, #46	; 0x2e
 80053c6:	f000 8192 	beq.w	80056ee <keypad_sm+0xc16>
			else if(num >= '0' && num <= '9'){
 80053ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80053ce:	2b09      	cmp	r3, #9
 80053d0:	f240 818e 	bls.w	80056f0 <keypad_sm+0xc18>
			else if(num == '#'){
 80053d4:	2823      	cmp	r0, #35	; 0x23
 80053d6:	f001 80f3 	beq.w	80065c0 <keypad_sm+0x1ae8>
			else if(num == '+'){
 80053da:	282b      	cmp	r0, #43	; 0x2b
 80053dc:	f001 835b 	beq.w	8006a96 <keypad_sm+0x1fbe>
			else if(num == '-'){
 80053e0:	282d      	cmp	r0, #45	; 0x2d
 80053e2:	f001 8535 	beq.w	8006e50 <keypad_sm+0x2378>
			else if(num == 's'){
 80053e6:	2873      	cmp	r0, #115	; 0x73
 80053e8:	f001 8526 	beq.w	8006e38 <keypad_sm+0x2360>
			else if(num == '['){
 80053ec:	285b      	cmp	r0, #91	; 0x5b
 80053ee:	f43f ab9a 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == ']'){
 80053f2:	285d      	cmp	r0, #93	; 0x5d
 80053f4:	f43f ab97 	beq.w	8004b26 <keypad_sm+0x4e>
			else if(num == '*'){
 80053f8:	282a      	cmp	r0, #42	; 0x2a
 80053fa:	f001 864e 	beq.w	800709a <keypad_sm+0x25c2>
			else if(num == '/'){
 80053fe:	282f      	cmp	r0, #47	; 0x2f
 8005400:	f47f ab91 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 8005404:	4abe      	ldr	r2, [pc, #760]	; (8005700 <keypad_sm+0xc28>)
 8005406:	7813      	ldrb	r3, [r2, #0]
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	7013      	strb	r3, [r2, #0]
}
 8005410:	f7ff bb89 	b.w	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8005414:	f7fe fe9a 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005418:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800541a:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800541c:	f7fb fe7c 	bl	8001118 <__aeabi_fcmpge>
 8005420:	b130      	cbz	r0, 8005430 <keypad_sm+0x958>
 8005422:	4620      	mov	r0, r4
 8005424:	49b7      	ldr	r1, [pc, #732]	; (8005704 <keypad_sm+0xc2c>)
 8005426:	f7fb fe6d 	bl	8001104 <__aeabi_fcmple>
 800542a:	b108      	cbz	r0, 8005430 <keypad_sm+0x958>
					amp_set_aux = translate_keypad();
 800542c:	4bb6      	ldr	r3, [pc, #728]	; (8005708 <keypad_sm+0xc30>)
 800542e:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8005430:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005434:	4cb5      	ldr	r4, [pc, #724]	; (800570c <keypad_sm+0xc34>)
				kpenum = WAIT;
 8005436:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 800543a:	f994 2000 	ldrsb.w	r2, [r4]
 800543e:	2a03      	cmp	r2, #3
 8005440:	f73f ae81 	bgt.w	8005146 <keypad_sm+0x66e>
 8005444:	4bb2      	ldr	r3, [pc, #712]	; (8005710 <keypad_sm+0xc38>)
 8005446:	4db3      	ldr	r5, [pc, #716]	; (8005714 <keypad_sm+0xc3c>)
 8005448:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800544a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800544e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005452:	f895 9000 	ldrb.w	r9, [r5]
 8005456:	f893 c003 	ldrb.w	ip, [r3, #3]
 800545a:	789f      	ldrb	r7, [r3, #2]
 800545c:	7858      	ldrb	r0, [r3, #1]
 800545e:	7819      	ldrb	r1, [r3, #0]
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	e003      	b.n	800546c <keypad_sm+0x994>
	while(keypaditerator < 4){
 8005464:	46bc      	mov	ip, r7
 8005466:	4607      	mov	r7, r0
 8005468:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800546a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800546c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800546e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005472:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005474:	bf04      	itt	eq
 8005476:	f04f 0e01 	moveq.w	lr, #1
 800547a:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 800547e:	2a05      	cmp	r2, #5
 8005480:	46e0      	mov	r8, ip
 8005482:	d1ef      	bne.n	8005464 <keypad_sm+0x98c>
 8005484:	f883 c004 	strb.w	ip, [r3, #4]
 8005488:	70df      	strb	r7, [r3, #3]
 800548a:	7098      	strb	r0, [r3, #2]
 800548c:	7059      	strb	r1, [r3, #1]
 800548e:	f883 a000 	strb.w	sl, [r3]
 8005492:	2304      	movs	r3, #4
 8005494:	7023      	strb	r3, [r4, #0]
 8005496:	f1be 0f00 	cmp.w	lr, #0
 800549a:	f43f ae54 	beq.w	8005146 <keypad_sm+0x66e>
 800549e:	f885 9000 	strb.w	r9, [r5]
 80054a2:	e650      	b.n	8005146 <keypad_sm+0x66e>
				kpenum = WAIT;
 80054a4:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80054a8:	4c98      	ldr	r4, [pc, #608]	; (800570c <keypad_sm+0xc34>)
				kpenum = WAIT;
 80054aa:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 80054ae:	f994 2000 	ldrsb.w	r2, [r4]
 80054b2:	2a03      	cmp	r2, #3
 80054b4:	f73f ae47 	bgt.w	8005146 <keypad_sm+0x66e>
 80054b8:	4b95      	ldr	r3, [pc, #596]	; (8005710 <keypad_sm+0xc38>)
 80054ba:	4d96      	ldr	r5, [pc, #600]	; (8005714 <keypad_sm+0xc3c>)
 80054bc:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80054be:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80054c2:	f893 8004 	ldrb.w	r8, [r3, #4]
 80054c6:	f895 9000 	ldrb.w	r9, [r5]
 80054ca:	f893 c003 	ldrb.w	ip, [r3, #3]
 80054ce:	789f      	ldrb	r7, [r3, #2]
 80054d0:	7858      	ldrb	r0, [r3, #1]
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	e003      	b.n	80054e0 <keypad_sm+0xa08>
	while(keypaditerator < 4){
 80054d8:	46bc      	mov	ip, r7
 80054da:	4607      	mov	r7, r0
 80054dc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80054de:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80054e0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80054e2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80054e6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80054e8:	bf04      	itt	eq
 80054ea:	f04f 0e01 	moveq.w	lr, #1
 80054ee:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80054f2:	2a05      	cmp	r2, #5
 80054f4:	46e0      	mov	r8, ip
 80054f6:	d1ef      	bne.n	80054d8 <keypad_sm+0xa00>
 80054f8:	f883 c004 	strb.w	ip, [r3, #4]
 80054fc:	70df      	strb	r7, [r3, #3]
 80054fe:	7098      	strb	r0, [r3, #2]
 8005500:	7059      	strb	r1, [r3, #1]
 8005502:	f883 a000 	strb.w	sl, [r3]
 8005506:	2304      	movs	r3, #4
 8005508:	7023      	strb	r3, [r4, #0]
 800550a:	f1be 0f00 	cmp.w	lr, #0
 800550e:	f43f ae1a 	beq.w	8005146 <keypad_sm+0x66e>
 8005512:	f885 9000 	strb.w	r9, [r5]
 8005516:	e616      	b.n	8005146 <keypad_sm+0x66e>
 8005518:	4c7c      	ldr	r4, [pc, #496]	; (800570c <keypad_sm+0xc34>)
				kpenum = WAIT;
 800551a:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 800551c:	f994 1000 	ldrsb.w	r1, [r4]
 8005520:	2903      	cmp	r1, #3
 8005522:	f73f ab00 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005526:	4b7a      	ldr	r3, [pc, #488]	; (8005710 <keypad_sm+0xc38>)
 8005528:	4d7a      	ldr	r5, [pc, #488]	; (8005714 <keypad_sm+0xc3c>)
 800552a:	3101      	adds	r1, #1
			keypadarr[0] = num;
 800552c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005530:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005534:	f895 e000 	ldrb.w	lr, [r5]
 8005538:	f893 c003 	ldrb.w	ip, [r3, #3]
 800553c:	789f      	ldrb	r7, [r3, #2]
 800553e:	785e      	ldrb	r6, [r3, #1]
 8005540:	7818      	ldrb	r0, [r3, #0]
 8005542:	b2c9      	uxtb	r1, r1
 8005544:	e003      	b.n	800554e <keypad_sm+0xa76>
	while(keypaditerator < 4){
 8005546:	46bc      	mov	ip, r7
 8005548:	4637      	mov	r7, r6
 800554a:	4606      	mov	r6, r0
			keypadarr[0] = num;
 800554c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800554e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005550:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005554:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005556:	bf04      	itt	eq
 8005558:	f04f 0e00 	moveq.w	lr, #0
 800555c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800555e:	2905      	cmp	r1, #5
 8005560:	46e0      	mov	r8, ip
 8005562:	d1f0      	bne.n	8005546 <keypad_sm+0xa6e>
 8005564:	f883 c004 	strb.w	ip, [r3, #4]
 8005568:	70df      	strb	r7, [r3, #3]
 800556a:	709e      	strb	r6, [r3, #2]
 800556c:	7058      	strb	r0, [r3, #1]
 800556e:	f883 9000 	strb.w	r9, [r3]
 8005572:	2304      	movs	r3, #4
 8005574:	7023      	strb	r3, [r4, #0]
 8005576:	2a00      	cmp	r2, #0
 8005578:	f43f aad5 	beq.w	8004b26 <keypad_sm+0x4e>
 800557c:	f885 e000 	strb.w	lr, [r5]
 8005580:	f7ff bad1 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005584:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005588:	4c60      	ldr	r4, [pc, #384]	; (800570c <keypad_sm+0xc34>)
				kpenum = WAIT;
 800558a:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 800558e:	f994 2000 	ldrsb.w	r2, [r4]
 8005592:	2a03      	cmp	r2, #3
 8005594:	f73f add7 	bgt.w	8005146 <keypad_sm+0x66e>
 8005598:	4b5d      	ldr	r3, [pc, #372]	; (8005710 <keypad_sm+0xc38>)
 800559a:	4d5e      	ldr	r5, [pc, #376]	; (8005714 <keypad_sm+0xc3c>)
			keypadarr[0] = num;
 800559c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80055a0:	f893 9004 	ldrb.w	r9, [r3, #4]
 80055a4:	f895 8000 	ldrb.w	r8, [r5]
 80055a8:	f893 c003 	ldrb.w	ip, [r3, #3]
 80055ac:	789f      	ldrb	r7, [r3, #2]
 80055ae:	7858      	ldrb	r0, [r3, #1]
 80055b0:	7819      	ldrb	r1, [r3, #0]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	e003      	b.n	80055be <keypad_sm+0xae6>
	while(keypaditerator < 4){
 80055b6:	46bc      	mov	ip, r7
 80055b8:	4607      	mov	r7, r0
 80055ba:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80055bc:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80055be:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80055c0:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80055c4:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80055c6:	bf04      	itt	eq
 80055c8:	f04f 0e01 	moveq.w	lr, #1
 80055cc:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80055d0:	2a04      	cmp	r2, #4
 80055d2:	46e1      	mov	r9, ip
 80055d4:	d1ef      	bne.n	80055b6 <keypad_sm+0xade>
 80055d6:	7022      	strb	r2, [r4, #0]
 80055d8:	f883 c004 	strb.w	ip, [r3, #4]
 80055dc:	70df      	strb	r7, [r3, #3]
 80055de:	7098      	strb	r0, [r3, #2]
 80055e0:	7059      	strb	r1, [r3, #1]
 80055e2:	f883 a000 	strb.w	sl, [r3]
 80055e6:	f1be 0f00 	cmp.w	lr, #0
 80055ea:	f43f adac 	beq.w	8005146 <keypad_sm+0x66e>
 80055ee:	f885 8000 	strb.w	r8, [r5]
 80055f2:	e5a8      	b.n	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 80055f4:	f7fe fdaa 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80055f8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80055fa:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80055fc:	f7fb fd8c 	bl	8001118 <__aeabi_fcmpge>
 8005600:	b150      	cbz	r0, 8005618 <keypad_sm+0xb40>
 8005602:	4620      	mov	r0, r4
 8005604:	f7fa ff28 	bl	8000458 <__aeabi_f2d>
 8005608:	a33b      	add	r3, pc, #236	; (adr r3, 80056f8 <keypad_sm+0xc20>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fb f9f7 	bl	8000a00 <__aeabi_dcmple>
 8005612:	b108      	cbz	r0, 8005618 <keypad_sm+0xb40>
					amp_set_aux = translate_keypad();
 8005614:	4b3c      	ldr	r3, [pc, #240]	; (8005708 <keypad_sm+0xc30>)
 8005616:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8005618:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 800561c:	4c3b      	ldr	r4, [pc, #236]	; (800570c <keypad_sm+0xc34>)
				kpenum = WAIT;
 800561e:	f885 c000 	strb.w	ip, [r5]
	while(keypaditerator < 4){
 8005622:	f994 2000 	ldrsb.w	r2, [r4]
 8005626:	2a03      	cmp	r2, #3
 8005628:	f73f aa7d 	bgt.w	8004b26 <keypad_sm+0x4e>
 800562c:	4b38      	ldr	r3, [pc, #224]	; (8005710 <keypad_sm+0xc38>)
 800562e:	4d39      	ldr	r5, [pc, #228]	; (8005714 <keypad_sm+0xc3c>)
			keypadarr[0] = num;
 8005630:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005634:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005638:	f895 e000 	ldrb.w	lr, [r5]
 800563c:	78df      	ldrb	r7, [r3, #3]
 800563e:	789e      	ldrb	r6, [r3, #2]
 8005640:	7858      	ldrb	r0, [r3, #1]
 8005642:	7819      	ldrb	r1, [r3, #0]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	e003      	b.n	8005650 <keypad_sm+0xb78>
	while(keypaditerator < 4){
 8005648:	4637      	mov	r7, r6
 800564a:	4606      	mov	r6, r0
 800564c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800564e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005650:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005652:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005656:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005658:	bf04      	itt	eq
 800565a:	f04f 0e00 	moveq.w	lr, #0
 800565e:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005662:	2a04      	cmp	r2, #4
 8005664:	46b8      	mov	r8, r7
 8005666:	d1ef      	bne.n	8005648 <keypad_sm+0xb70>
 8005668:	7022      	strb	r2, [r4, #0]
 800566a:	711f      	strb	r7, [r3, #4]
 800566c:	70de      	strb	r6, [r3, #3]
 800566e:	7098      	strb	r0, [r3, #2]
 8005670:	7059      	strb	r1, [r3, #1]
 8005672:	f883 9000 	strb.w	r9, [r3]
 8005676:	f1bc 0f00 	cmp.w	ip, #0
 800567a:	f43f aa54 	beq.w	8004b26 <keypad_sm+0x4e>
 800567e:	f885 e000 	strb.w	lr, [r5]
 8005682:	f7ff ba50 	b.w	8004b26 <keypad_sm+0x4e>
 8005686:	4c21      	ldr	r4, [pc, #132]	; (800570c <keypad_sm+0xc34>)
				kpenum = WAIT;
 8005688:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 800568a:	f994 1000 	ldrsb.w	r1, [r4]
 800568e:	2903      	cmp	r1, #3
 8005690:	f73f aa49 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005694:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <keypad_sm+0xc38>)
 8005696:	4d1f      	ldr	r5, [pc, #124]	; (8005714 <keypad_sm+0xc3c>)
			keypadarr[0] = num;
 8005698:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800569c:	f893 8004 	ldrb.w	r8, [r3, #4]
 80056a0:	f895 e000 	ldrb.w	lr, [r5]
 80056a4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80056a8:	789f      	ldrb	r7, [r3, #2]
 80056aa:	785e      	ldrb	r6, [r3, #1]
 80056ac:	7818      	ldrb	r0, [r3, #0]
 80056ae:	b2c9      	uxtb	r1, r1
 80056b0:	e003      	b.n	80056ba <keypad_sm+0xbe2>
	while(keypaditerator < 4){
 80056b2:	46bc      	mov	ip, r7
 80056b4:	4637      	mov	r7, r6
 80056b6:	4606      	mov	r6, r0
			keypadarr[0] = num;
 80056b8:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80056ba:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80056bc:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80056c0:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80056c2:	bf04      	itt	eq
 80056c4:	f04f 0e00 	moveq.w	lr, #0
 80056c8:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80056ca:	2904      	cmp	r1, #4
 80056cc:	46e0      	mov	r8, ip
 80056ce:	d1f0      	bne.n	80056b2 <keypad_sm+0xbda>
 80056d0:	7021      	strb	r1, [r4, #0]
 80056d2:	f883 c004 	strb.w	ip, [r3, #4]
 80056d6:	70df      	strb	r7, [r3, #3]
 80056d8:	709e      	strb	r6, [r3, #2]
 80056da:	7058      	strb	r0, [r3, #1]
 80056dc:	f883 9000 	strb.w	r9, [r3]
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	f43f aa20 	beq.w	8004b26 <keypad_sm+0x4e>
 80056e6:	f885 e000 	strb.w	lr, [r5]
 80056ea:	f7ff ba1c 	b.w	8004b26 <keypad_sm+0x4e>
	if(num == 'z'){
 80056ee:	202e      	movs	r0, #46	; 0x2e
}
 80056f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f4:	f7fb bfb0 	b.w	8001658 <update_keypad.part.0>
 80056f8:	50b0f27c 	.word	0x50b0f27c
 80056fc:	3fe99a6b 	.word	0x3fe99a6b
 8005700:	200003e7 	.word	0x200003e7
 8005704:	41400000 	.word	0x41400000
 8005708:	200003dc 	.word	0x200003dc
 800570c:	2000000d 	.word	0x2000000d
 8005710:	20000008 	.word	0x20000008
 8005714:	20000748 	.word	0x20000748
				kpenum = WAIT;
 8005718:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800571c:	4cc1      	ldr	r4, [pc, #772]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 800571e:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 8005722:	f994 2000 	ldrsb.w	r2, [r4]
 8005726:	2a03      	cmp	r2, #3
 8005728:	f73f ad0d 	bgt.w	8005146 <keypad_sm+0x66e>
 800572c:	4bbe      	ldr	r3, [pc, #760]	; (8005a28 <keypad_sm+0xf50>)
 800572e:	4dbf      	ldr	r5, [pc, #764]	; (8005a2c <keypad_sm+0xf54>)
 8005730:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005732:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005736:	f893 8004 	ldrb.w	r8, [r3, #4]
 800573a:	f895 9000 	ldrb.w	r9, [r5]
 800573e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005742:	789f      	ldrb	r7, [r3, #2]
 8005744:	7858      	ldrb	r0, [r3, #1]
 8005746:	7819      	ldrb	r1, [r3, #0]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	e003      	b.n	8005754 <keypad_sm+0xc7c>
	while(keypaditerator < 4){
 800574c:	46bc      	mov	ip, r7
 800574e:	4607      	mov	r7, r0
 8005750:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005752:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005754:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005756:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800575a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800575c:	bf04      	itt	eq
 800575e:	f04f 0e01 	moveq.w	lr, #1
 8005762:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005766:	2a05      	cmp	r2, #5
 8005768:	46e0      	mov	r8, ip
 800576a:	d1ef      	bne.n	800574c <keypad_sm+0xc74>
 800576c:	f883 c004 	strb.w	ip, [r3, #4]
 8005770:	70df      	strb	r7, [r3, #3]
 8005772:	7098      	strb	r0, [r3, #2]
 8005774:	7059      	strb	r1, [r3, #1]
 8005776:	f883 a000 	strb.w	sl, [r3]
 800577a:	2304      	movs	r3, #4
 800577c:	7023      	strb	r3, [r4, #0]
 800577e:	f1be 0f00 	cmp.w	lr, #0
 8005782:	f43f ace0 	beq.w	8005146 <keypad_sm+0x66e>
 8005786:	f885 9000 	strb.w	r9, [r5]
 800578a:	e4dc      	b.n	8005146 <keypad_sm+0x66e>
 800578c:	4ca5      	ldr	r4, [pc, #660]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 800578e:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005790:	f994 1000 	ldrsb.w	r1, [r4]
 8005794:	2903      	cmp	r1, #3
 8005796:	f73f a9c6 	bgt.w	8004b26 <keypad_sm+0x4e>
 800579a:	4ba3      	ldr	r3, [pc, #652]	; (8005a28 <keypad_sm+0xf50>)
 800579c:	4da3      	ldr	r5, [pc, #652]	; (8005a2c <keypad_sm+0xf54>)
			keypadarr[0] = num;
 800579e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80057a2:	f893 8004 	ldrb.w	r8, [r3, #4]
 80057a6:	f895 e000 	ldrb.w	lr, [r5]
 80057aa:	f893 c003 	ldrb.w	ip, [r3, #3]
 80057ae:	789f      	ldrb	r7, [r3, #2]
 80057b0:	785e      	ldrb	r6, [r3, #1]
 80057b2:	7818      	ldrb	r0, [r3, #0]
 80057b4:	b2c9      	uxtb	r1, r1
 80057b6:	e003      	b.n	80057c0 <keypad_sm+0xce8>
	while(keypaditerator < 4){
 80057b8:	46bc      	mov	ip, r7
 80057ba:	4637      	mov	r7, r6
 80057bc:	4606      	mov	r6, r0
			keypadarr[0] = num;
 80057be:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80057c0:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80057c2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80057c6:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80057c8:	bf04      	itt	eq
 80057ca:	f04f 0e00 	moveq.w	lr, #0
 80057ce:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80057d0:	2904      	cmp	r1, #4
 80057d2:	46e0      	mov	r8, ip
 80057d4:	d1f0      	bne.n	80057b8 <keypad_sm+0xce0>
 80057d6:	7021      	strb	r1, [r4, #0]
 80057d8:	f883 c004 	strb.w	ip, [r3, #4]
 80057dc:	70df      	strb	r7, [r3, #3]
 80057de:	709e      	strb	r6, [r3, #2]
 80057e0:	7058      	strb	r0, [r3, #1]
 80057e2:	f883 9000 	strb.w	r9, [r3]
 80057e6:	2a00      	cmp	r2, #0
 80057e8:	f43f a99d 	beq.w	8004b26 <keypad_sm+0x4e>
 80057ec:	f885 e000 	strb.w	lr, [r5]
 80057f0:	f7ff b999 	b.w	8004b26 <keypad_sm+0x4e>
 80057f4:	4c8b      	ldr	r4, [pc, #556]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 80057f6:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 80057f8:	f994 1000 	ldrsb.w	r1, [r4]
 80057fc:	2903      	cmp	r1, #3
 80057fe:	f73f a992 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005802:	4b89      	ldr	r3, [pc, #548]	; (8005a28 <keypad_sm+0xf50>)
 8005804:	4d89      	ldr	r5, [pc, #548]	; (8005a2c <keypad_sm+0xf54>)
			keypadarr[0] = num;
 8005806:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800580a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800580e:	f895 e000 	ldrb.w	lr, [r5]
 8005812:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005816:	789f      	ldrb	r7, [r3, #2]
 8005818:	785e      	ldrb	r6, [r3, #1]
 800581a:	7818      	ldrb	r0, [r3, #0]
 800581c:	b2c9      	uxtb	r1, r1
 800581e:	e003      	b.n	8005828 <keypad_sm+0xd50>
	while(keypaditerator < 4){
 8005820:	46bc      	mov	ip, r7
 8005822:	4637      	mov	r7, r6
 8005824:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8005826:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005828:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800582a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800582e:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005830:	bf04      	itt	eq
 8005832:	f04f 0e00 	moveq.w	lr, #0
 8005836:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005838:	2904      	cmp	r1, #4
 800583a:	46e0      	mov	r8, ip
 800583c:	d1f0      	bne.n	8005820 <keypad_sm+0xd48>
 800583e:	7021      	strb	r1, [r4, #0]
 8005840:	f883 c004 	strb.w	ip, [r3, #4]
 8005844:	70df      	strb	r7, [r3, #3]
 8005846:	709e      	strb	r6, [r3, #2]
 8005848:	7058      	strb	r0, [r3, #1]
 800584a:	f883 9000 	strb.w	r9, [r3]
 800584e:	2a00      	cmp	r2, #0
 8005850:	f43f a969 	beq.w	8004b26 <keypad_sm+0x4e>
 8005854:	f885 e000 	strb.w	lr, [r5]
 8005858:	f7ff b965 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 800585c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005860:	4c70      	ldr	r4, [pc, #448]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 8005862:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 8005866:	f994 2000 	ldrsb.w	r2, [r4]
 800586a:	2a03      	cmp	r2, #3
 800586c:	f73f ac6b 	bgt.w	8005146 <keypad_sm+0x66e>
 8005870:	4b6d      	ldr	r3, [pc, #436]	; (8005a28 <keypad_sm+0xf50>)
 8005872:	4d6e      	ldr	r5, [pc, #440]	; (8005a2c <keypad_sm+0xf54>)
 8005874:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005876:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800587a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800587e:	f895 9000 	ldrb.w	r9, [r5]
 8005882:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005886:	789f      	ldrb	r7, [r3, #2]
 8005888:	7858      	ldrb	r0, [r3, #1]
 800588a:	7819      	ldrb	r1, [r3, #0]
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	e003      	b.n	8005898 <keypad_sm+0xdc0>
	while(keypaditerator < 4){
 8005890:	46bc      	mov	ip, r7
 8005892:	4607      	mov	r7, r0
 8005894:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005896:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005898:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800589a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800589e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80058a0:	bf04      	itt	eq
 80058a2:	f04f 0e01 	moveq.w	lr, #1
 80058a6:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80058aa:	2a05      	cmp	r2, #5
 80058ac:	46e0      	mov	r8, ip
 80058ae:	d1ef      	bne.n	8005890 <keypad_sm+0xdb8>
 80058b0:	f883 c004 	strb.w	ip, [r3, #4]
 80058b4:	70df      	strb	r7, [r3, #3]
 80058b6:	7098      	strb	r0, [r3, #2]
 80058b8:	7059      	strb	r1, [r3, #1]
 80058ba:	f883 a000 	strb.w	sl, [r3]
 80058be:	2304      	movs	r3, #4
 80058c0:	7023      	strb	r3, [r4, #0]
 80058c2:	f1be 0f00 	cmp.w	lr, #0
 80058c6:	f43f ac3e 	beq.w	8005146 <keypad_sm+0x66e>
 80058ca:	f885 9000 	strb.w	r9, [r5]
 80058ce:	e43a      	b.n	8005146 <keypad_sm+0x66e>
				kpenum = WAIT;
 80058d0:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80058d4:	4c53      	ldr	r4, [pc, #332]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 80058d6:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 80058da:	f994 2000 	ldrsb.w	r2, [r4]
 80058de:	2a03      	cmp	r2, #3
 80058e0:	f73f ac31 	bgt.w	8005146 <keypad_sm+0x66e>
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <keypad_sm+0xf50>)
 80058e6:	4d51      	ldr	r5, [pc, #324]	; (8005a2c <keypad_sm+0xf54>)
 80058e8:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80058ea:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80058ee:	f893 9004 	ldrb.w	r9, [r3, #4]
 80058f2:	f895 8000 	ldrb.w	r8, [r5]
 80058f6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80058fa:	789f      	ldrb	r7, [r3, #2]
 80058fc:	7858      	ldrb	r0, [r3, #1]
 80058fe:	7819      	ldrb	r1, [r3, #0]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	e003      	b.n	800590c <keypad_sm+0xe34>
	while(keypaditerator < 4){
 8005904:	46bc      	mov	ip, r7
 8005906:	4607      	mov	r7, r0
 8005908:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800590a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800590c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800590e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005912:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005914:	bf04      	itt	eq
 8005916:	f04f 0e01 	moveq.w	lr, #1
 800591a:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800591e:	2a05      	cmp	r2, #5
 8005920:	46e1      	mov	r9, ip
 8005922:	d1ef      	bne.n	8005904 <keypad_sm+0xe2c>
 8005924:	f883 c004 	strb.w	ip, [r3, #4]
 8005928:	70df      	strb	r7, [r3, #3]
 800592a:	7098      	strb	r0, [r3, #2]
 800592c:	7059      	strb	r1, [r3, #1]
 800592e:	f883 a000 	strb.w	sl, [r3]
 8005932:	2304      	movs	r3, #4
 8005934:	7023      	strb	r3, [r4, #0]
 8005936:	f1be 0f00 	cmp.w	lr, #0
 800593a:	f43f ac04 	beq.w	8005146 <keypad_sm+0x66e>
 800593e:	f885 8000 	strb.w	r8, [r5]
 8005942:	e400      	b.n	8005146 <keypad_sm+0x66e>
 8005944:	4c37      	ldr	r4, [pc, #220]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 8005946:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005948:	f994 1000 	ldrsb.w	r1, [r4]
 800594c:	2903      	cmp	r1, #3
 800594e:	f73f a8ea 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005952:	4b35      	ldr	r3, [pc, #212]	; (8005a28 <keypad_sm+0xf50>)
 8005954:	4d35      	ldr	r5, [pc, #212]	; (8005a2c <keypad_sm+0xf54>)
 8005956:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005958:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800595c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005960:	f895 e000 	ldrb.w	lr, [r5]
 8005964:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005968:	789f      	ldrb	r7, [r3, #2]
 800596a:	785e      	ldrb	r6, [r3, #1]
 800596c:	7818      	ldrb	r0, [r3, #0]
 800596e:	b2c9      	uxtb	r1, r1
 8005970:	e003      	b.n	800597a <keypad_sm+0xea2>
	while(keypaditerator < 4){
 8005972:	46bc      	mov	ip, r7
 8005974:	4637      	mov	r7, r6
 8005976:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8005978:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800597a:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800597c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005980:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005982:	bf04      	itt	eq
 8005984:	f04f 0e00 	moveq.w	lr, #0
 8005988:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800598a:	2905      	cmp	r1, #5
 800598c:	46e0      	mov	r8, ip
 800598e:	d1f0      	bne.n	8005972 <keypad_sm+0xe9a>
 8005990:	f883 c004 	strb.w	ip, [r3, #4]
 8005994:	70df      	strb	r7, [r3, #3]
 8005996:	709e      	strb	r6, [r3, #2]
 8005998:	7058      	strb	r0, [r3, #1]
 800599a:	f883 9000 	strb.w	r9, [r3]
 800599e:	2304      	movs	r3, #4
 80059a0:	7023      	strb	r3, [r4, #0]
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	f43f a8bf 	beq.w	8004b26 <keypad_sm+0x4e>
 80059a8:	f885 e000 	strb.w	lr, [r5]
 80059ac:	f7ff b8bb 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 80059b0:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80059b4:	4c1b      	ldr	r4, [pc, #108]	; (8005a24 <keypad_sm+0xf4c>)
				kpenum = WAIT;
 80059b6:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 80059ba:	f994 2000 	ldrsb.w	r2, [r4]
 80059be:	2a03      	cmp	r2, #3
 80059c0:	f73f abc1 	bgt.w	8005146 <keypad_sm+0x66e>
 80059c4:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <keypad_sm+0xf50>)
 80059c6:	4d19      	ldr	r5, [pc, #100]	; (8005a2c <keypad_sm+0xf54>)
			keypadarr[0] = num;
 80059c8:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80059cc:	f893 9004 	ldrb.w	r9, [r3, #4]
 80059d0:	f895 8000 	ldrb.w	r8, [r5]
 80059d4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80059d8:	789f      	ldrb	r7, [r3, #2]
 80059da:	7858      	ldrb	r0, [r3, #1]
 80059dc:	7819      	ldrb	r1, [r3, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	e003      	b.n	80059ea <keypad_sm+0xf12>
	while(keypaditerator < 4){
 80059e2:	46bc      	mov	ip, r7
 80059e4:	4607      	mov	r7, r0
 80059e6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80059e8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80059ea:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80059ec:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80059f0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80059f2:	bf04      	itt	eq
 80059f4:	f04f 0e01 	moveq.w	lr, #1
 80059f8:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80059fc:	2a04      	cmp	r2, #4
 80059fe:	46e1      	mov	r9, ip
 8005a00:	d1ef      	bne.n	80059e2 <keypad_sm+0xf0a>
 8005a02:	7022      	strb	r2, [r4, #0]
 8005a04:	f883 c004 	strb.w	ip, [r3, #4]
 8005a08:	70df      	strb	r7, [r3, #3]
 8005a0a:	7098      	strb	r0, [r3, #2]
 8005a0c:	7059      	strb	r1, [r3, #1]
 8005a0e:	f883 a000 	strb.w	sl, [r3]
 8005a12:	f1be 0f00 	cmp.w	lr, #0
 8005a16:	f43f ab96 	beq.w	8005146 <keypad_sm+0x66e>
 8005a1a:	f885 8000 	strb.w	r8, [r5]
 8005a1e:	f7ff bb92 	b.w	8005146 <keypad_sm+0x66e>
 8005a22:	bf00      	nop
 8005a24:	2000000d 	.word	0x2000000d
 8005a28:	20000008 	.word	0x20000008
 8005a2c:	20000748 	.word	0x20000748
 8005a30:	4cb9      	ldr	r4, [pc, #740]	; (8005d18 <keypad_sm+0x1240>)
				kpenum = WAIT;
 8005a32:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005a34:	f994 1000 	ldrsb.w	r1, [r4]
 8005a38:	2903      	cmp	r1, #3
 8005a3a:	f73f a874 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005a3e:	4bb7      	ldr	r3, [pc, #732]	; (8005d1c <keypad_sm+0x1244>)
 8005a40:	4db7      	ldr	r5, [pc, #732]	; (8005d20 <keypad_sm+0x1248>)
 8005a42:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005a44:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005a48:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005a4c:	f895 e000 	ldrb.w	lr, [r5]
 8005a50:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005a54:	789f      	ldrb	r7, [r3, #2]
 8005a56:	785e      	ldrb	r6, [r3, #1]
 8005a58:	7818      	ldrb	r0, [r3, #0]
 8005a5a:	b2c9      	uxtb	r1, r1
 8005a5c:	e003      	b.n	8005a66 <keypad_sm+0xf8e>
	while(keypaditerator < 4){
 8005a5e:	46bc      	mov	ip, r7
 8005a60:	4637      	mov	r7, r6
 8005a62:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8005a64:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005a66:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005a68:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005a6c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005a6e:	bf04      	itt	eq
 8005a70:	f04f 0e00 	moveq.w	lr, #0
 8005a74:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005a76:	2905      	cmp	r1, #5
 8005a78:	46e0      	mov	r8, ip
 8005a7a:	d1f0      	bne.n	8005a5e <keypad_sm+0xf86>
 8005a7c:	f883 c004 	strb.w	ip, [r3, #4]
 8005a80:	70df      	strb	r7, [r3, #3]
 8005a82:	709e      	strb	r6, [r3, #2]
 8005a84:	7058      	strb	r0, [r3, #1]
 8005a86:	f883 9000 	strb.w	r9, [r3]
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	7023      	strb	r3, [r4, #0]
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	f43f a849 	beq.w	8004b26 <keypad_sm+0x4e>
 8005a94:	f885 e000 	strb.w	lr, [r5]
 8005a98:	f7ff b845 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8005a9c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005aa0:	4c9d      	ldr	r4, [pc, #628]	; (8005d18 <keypad_sm+0x1240>)
				kpenum = WAIT;
 8005aa2:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 8005aa6:	f994 2000 	ldrsb.w	r2, [r4]
 8005aaa:	2a03      	cmp	r2, #3
 8005aac:	f73f ab4b 	bgt.w	8005146 <keypad_sm+0x66e>
 8005ab0:	4b9a      	ldr	r3, [pc, #616]	; (8005d1c <keypad_sm+0x1244>)
 8005ab2:	4d9b      	ldr	r5, [pc, #620]	; (8005d20 <keypad_sm+0x1248>)
			keypadarr[0] = num;
 8005ab4:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005ab8:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005abc:	f895 8000 	ldrb.w	r8, [r5]
 8005ac0:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005ac4:	789f      	ldrb	r7, [r3, #2]
 8005ac6:	7858      	ldrb	r0, [r3, #1]
 8005ac8:	7819      	ldrb	r1, [r3, #0]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	e003      	b.n	8005ad6 <keypad_sm+0xffe>
	while(keypaditerator < 4){
 8005ace:	46bc      	mov	ip, r7
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005ad4:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005ad6:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005ad8:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005adc:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005ade:	bf04      	itt	eq
 8005ae0:	f04f 0e01 	moveq.w	lr, #1
 8005ae4:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005ae8:	2a04      	cmp	r2, #4
 8005aea:	46e1      	mov	r9, ip
 8005aec:	d1ef      	bne.n	8005ace <keypad_sm+0xff6>
 8005aee:	7022      	strb	r2, [r4, #0]
 8005af0:	f883 c004 	strb.w	ip, [r3, #4]
 8005af4:	70df      	strb	r7, [r3, #3]
 8005af6:	7098      	strb	r0, [r3, #2]
 8005af8:	7059      	strb	r1, [r3, #1]
 8005afa:	f883 a000 	strb.w	sl, [r3]
 8005afe:	f1be 0f00 	cmp.w	lr, #0
 8005b02:	f43f ab20 	beq.w	8005146 <keypad_sm+0x66e>
 8005b06:	f885 8000 	strb.w	r8, [r5]
 8005b0a:	f7ff bb1c 	b.w	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 8005b0e:	f7fe fb1d 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b12:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005b14:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b16:	f7fb faff 	bl	8001118 <__aeabi_fcmpge>
 8005b1a:	b158      	cbz	r0, 8005b34 <keypad_sm+0x105c>
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4981      	ldr	r1, [pc, #516]	; (8005d24 <keypad_sm+0x124c>)
 8005b20:	f7fb faf0 	bl	8001104 <__aeabi_fcmple>
 8005b24:	b130      	cbz	r0, 8005b34 <keypad_sm+0x105c>
					volt_set_main_old = volt_set_main;
 8005b26:	4c80      	ldr	r4, [pc, #512]	; (8005d28 <keypad_sm+0x1250>)
 8005b28:	4b80      	ldr	r3, [pc, #512]	; (8005d2c <keypad_sm+0x1254>)
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005b2e:	f7fe fb0d 	bl	800414c <translate_keypad>
 8005b32:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8005b34:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005b38:	4c77      	ldr	r4, [pc, #476]	; (8005d18 <keypad_sm+0x1240>)
				kpenum = WAIT;
 8005b3a:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 8005b3e:	f994 2000 	ldrsb.w	r2, [r4]
 8005b42:	2a03      	cmp	r2, #3
 8005b44:	f73f aaff 	bgt.w	8005146 <keypad_sm+0x66e>
 8005b48:	4b74      	ldr	r3, [pc, #464]	; (8005d1c <keypad_sm+0x1244>)
 8005b4a:	4d75      	ldr	r5, [pc, #468]	; (8005d20 <keypad_sm+0x1248>)
 8005b4c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005b4e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005b52:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005b56:	f895 9000 	ldrb.w	r9, [r5]
 8005b5a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b5e:	789f      	ldrb	r7, [r3, #2]
 8005b60:	7858      	ldrb	r0, [r3, #1]
 8005b62:	7819      	ldrb	r1, [r3, #0]
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	e003      	b.n	8005b70 <keypad_sm+0x1098>
	while(keypaditerator < 4){
 8005b68:	46bc      	mov	ip, r7
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005b6e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005b70:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005b72:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005b76:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005b78:	bf04      	itt	eq
 8005b7a:	f04f 0e01 	moveq.w	lr, #1
 8005b7e:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005b82:	2a05      	cmp	r2, #5
 8005b84:	46e0      	mov	r8, ip
 8005b86:	d1ef      	bne.n	8005b68 <keypad_sm+0x1090>
 8005b88:	f883 c004 	strb.w	ip, [r3, #4]
 8005b8c:	70df      	strb	r7, [r3, #3]
 8005b8e:	7098      	strb	r0, [r3, #2]
 8005b90:	7059      	strb	r1, [r3, #1]
 8005b92:	f883 a000 	strb.w	sl, [r3]
 8005b96:	2304      	movs	r3, #4
 8005b98:	7023      	strb	r3, [r4, #0]
 8005b9a:	f1be 0f00 	cmp.w	lr, #0
 8005b9e:	f43f aad2 	beq.w	8005146 <keypad_sm+0x66e>
 8005ba2:	f885 9000 	strb.w	r9, [r5]
 8005ba6:	f7ff bace 	b.w	8005146 <keypad_sm+0x66e>
 8005baa:	4c5b      	ldr	r4, [pc, #364]	; (8005d18 <keypad_sm+0x1240>)
 8005bac:	f994 2000 	ldrsb.w	r2, [r4]
 8005bb0:	2a03      	cmp	r2, #3
 8005bb2:	f73f aac8 	bgt.w	8005146 <keypad_sm+0x66e>
 8005bb6:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <keypad_sm+0x1244>)
 8005bb8:	4d59      	ldr	r5, [pc, #356]	; (8005d20 <keypad_sm+0x1248>)
 8005bba:	3201      	adds	r2, #1
 8005bbc:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005bc0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005bc4:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005bc8:	f895 e000 	ldrb.w	lr, [r5]
 8005bcc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005bd0:	789f      	ldrb	r7, [r3, #2]
 8005bd2:	7858      	ldrb	r0, [r3, #1]
 8005bd4:	7819      	ldrb	r1, [r3, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	e003      	b.n	8005be2 <keypad_sm+0x110a>
	while(keypaditerator < 4){
 8005bda:	46bc      	mov	ip, r7
 8005bdc:	4607      	mov	r7, r0
 8005bde:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005be0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005be2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005be4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005be8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005bea:	bf04      	itt	eq
 8005bec:	f04f 0801 	moveq.w	r8, #1
 8005bf0:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005bf4:	2a05      	cmp	r2, #5
 8005bf6:	46e1      	mov	r9, ip
 8005bf8:	d1ef      	bne.n	8005bda <keypad_sm+0x1102>
 8005bfa:	f883 c004 	strb.w	ip, [r3, #4]
 8005bfe:	70df      	strb	r7, [r3, #3]
 8005c00:	7098      	strb	r0, [r3, #2]
 8005c02:	7059      	strb	r1, [r3, #1]
 8005c04:	f883 a000 	strb.w	sl, [r3]
 8005c08:	2304      	movs	r3, #4
 8005c0a:	7023      	strb	r3, [r4, #0]
 8005c0c:	f1b8 0f00 	cmp.w	r8, #0
 8005c10:	f43f aa99 	beq.w	8005146 <keypad_sm+0x66e>
 8005c14:	f885 e000 	strb.w	lr, [r5]
 8005c18:	f7ff ba95 	b.w	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 8005c1c:	f7fe fa96 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005c20:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005c22:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005c24:	f7fb fa78 	bl	8001118 <__aeabi_fcmpge>
 8005c28:	b158      	cbz	r0, 8005c42 <keypad_sm+0x116a>
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	493d      	ldr	r1, [pc, #244]	; (8005d24 <keypad_sm+0x124c>)
 8005c2e:	f7fb fa69 	bl	8001104 <__aeabi_fcmple>
 8005c32:	b130      	cbz	r0, 8005c42 <keypad_sm+0x116a>
					volt_set_main_old = volt_set_main;
 8005c34:	4c3c      	ldr	r4, [pc, #240]	; (8005d28 <keypad_sm+0x1250>)
 8005c36:	4b3d      	ldr	r3, [pc, #244]	; (8005d2c <keypad_sm+0x1254>)
 8005c38:	6822      	ldr	r2, [r4, #0]
 8005c3a:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005c3c:	f7fe fa86 	bl	800414c <translate_keypad>
 8005c40:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8005c42:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005c46:	4c34      	ldr	r4, [pc, #208]	; (8005d18 <keypad_sm+0x1240>)
				kpenum = WAIT;
 8005c48:	f885 c000 	strb.w	ip, [r5]
	while(keypaditerator < 4){
 8005c4c:	f994 2000 	ldrsb.w	r2, [r4]
 8005c50:	2a03      	cmp	r2, #3
 8005c52:	f73e af68 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005c56:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <keypad_sm+0x1244>)
 8005c58:	4d31      	ldr	r5, [pc, #196]	; (8005d20 <keypad_sm+0x1248>)
			keypadarr[0] = num;
 8005c5a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005c5e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005c62:	f895 e000 	ldrb.w	lr, [r5]
 8005c66:	78df      	ldrb	r7, [r3, #3]
 8005c68:	789e      	ldrb	r6, [r3, #2]
 8005c6a:	7858      	ldrb	r0, [r3, #1]
 8005c6c:	7819      	ldrb	r1, [r3, #0]
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	e003      	b.n	8005c7a <keypad_sm+0x11a2>
	while(keypaditerator < 4){
 8005c72:	4637      	mov	r7, r6
 8005c74:	4606      	mov	r6, r0
 8005c76:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005c78:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005c7a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005c7c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005c80:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005c82:	bf04      	itt	eq
 8005c84:	f04f 0e00 	moveq.w	lr, #0
 8005c88:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005c8c:	2a04      	cmp	r2, #4
 8005c8e:	46b8      	mov	r8, r7
 8005c90:	d1ef      	bne.n	8005c72 <keypad_sm+0x119a>
 8005c92:	7022      	strb	r2, [r4, #0]
 8005c94:	711f      	strb	r7, [r3, #4]
 8005c96:	70de      	strb	r6, [r3, #3]
 8005c98:	7098      	strb	r0, [r3, #2]
 8005c9a:	7059      	strb	r1, [r3, #1]
 8005c9c:	f883 9000 	strb.w	r9, [r3]
 8005ca0:	f1bc 0f00 	cmp.w	ip, #0
 8005ca4:	f43e af3f 	beq.w	8004b26 <keypad_sm+0x4e>
 8005ca8:	f885 e000 	strb.w	lr, [r5]
 8005cac:	f7fe bf3b 	b.w	8004b26 <keypad_sm+0x4e>
 8005cb0:	4c19      	ldr	r4, [pc, #100]	; (8005d18 <keypad_sm+0x1240>)
				kpenum = WAIT;
 8005cb2:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005cb4:	f994 1000 	ldrsb.w	r1, [r4]
 8005cb8:	2903      	cmp	r1, #3
 8005cba:	f73e af34 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005cbe:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <keypad_sm+0x1244>)
 8005cc0:	4d17      	ldr	r5, [pc, #92]	; (8005d20 <keypad_sm+0x1248>)
			keypadarr[0] = num;
 8005cc2:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005cc6:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005cca:	f895 e000 	ldrb.w	lr, [r5]
 8005cce:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005cd2:	789f      	ldrb	r7, [r3, #2]
 8005cd4:	785e      	ldrb	r6, [r3, #1]
 8005cd6:	7818      	ldrb	r0, [r3, #0]
 8005cd8:	b2c9      	uxtb	r1, r1
 8005cda:	e003      	b.n	8005ce4 <keypad_sm+0x120c>
	while(keypaditerator < 4){
 8005cdc:	46bc      	mov	ip, r7
 8005cde:	4637      	mov	r7, r6
 8005ce0:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8005ce2:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005ce4:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005ce6:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005cea:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005cec:	bf04      	itt	eq
 8005cee:	f04f 0e00 	moveq.w	lr, #0
 8005cf2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005cf4:	2904      	cmp	r1, #4
 8005cf6:	46e0      	mov	r8, ip
 8005cf8:	d1f0      	bne.n	8005cdc <keypad_sm+0x1204>
 8005cfa:	7021      	strb	r1, [r4, #0]
 8005cfc:	f883 c004 	strb.w	ip, [r3, #4]
 8005d00:	70df      	strb	r7, [r3, #3]
 8005d02:	709e      	strb	r6, [r3, #2]
 8005d04:	7058      	strb	r0, [r3, #1]
 8005d06:	f883 9000 	strb.w	r9, [r3]
 8005d0a:	2a00      	cmp	r2, #0
 8005d0c:	f43e af0b 	beq.w	8004b26 <keypad_sm+0x4e>
 8005d10:	f885 e000 	strb.w	lr, [r5]
 8005d14:	f7fe bf07 	b.w	8004b26 <keypad_sm+0x4e>
 8005d18:	2000000d 	.word	0x2000000d
 8005d1c:	20000008 	.word	0x20000008
 8005d20:	20000748 	.word	0x20000748
 8005d24:	41400000 	.word	0x41400000
 8005d28:	20000a70 	.word	0x20000a70
 8005d2c:	20000a74 	.word	0x20000a74
				kpenum = WAIT;
 8005d30:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005d34:	4cc5      	ldr	r4, [pc, #788]	; (800604c <keypad_sm+0x1574>)
				kpenum = WAIT;
 8005d36:	f885 e000 	strb.w	lr, [r5]
	while(keypaditerator < 4){
 8005d3a:	f994 2000 	ldrsb.w	r2, [r4]
 8005d3e:	2a03      	cmp	r2, #3
 8005d40:	f73f aa01 	bgt.w	8005146 <keypad_sm+0x66e>
 8005d44:	4bc2      	ldr	r3, [pc, #776]	; (8006050 <keypad_sm+0x1578>)
 8005d46:	4dc3      	ldr	r5, [pc, #780]	; (8006054 <keypad_sm+0x157c>)
 8005d48:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005d4a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005d4e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005d52:	f895 9000 	ldrb.w	r9, [r5]
 8005d56:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005d5a:	789f      	ldrb	r7, [r3, #2]
 8005d5c:	7858      	ldrb	r0, [r3, #1]
 8005d5e:	7819      	ldrb	r1, [r3, #0]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	e003      	b.n	8005d6c <keypad_sm+0x1294>
	while(keypaditerator < 4){
 8005d64:	46bc      	mov	ip, r7
 8005d66:	4607      	mov	r7, r0
 8005d68:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005d6a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005d6c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005d6e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005d72:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005d74:	bf04      	itt	eq
 8005d76:	f04f 0e01 	moveq.w	lr, #1
 8005d7a:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005d7e:	2a05      	cmp	r2, #5
 8005d80:	46e0      	mov	r8, ip
 8005d82:	d1ef      	bne.n	8005d64 <keypad_sm+0x128c>
 8005d84:	f883 c004 	strb.w	ip, [r3, #4]
 8005d88:	70df      	strb	r7, [r3, #3]
 8005d8a:	7098      	strb	r0, [r3, #2]
 8005d8c:	7059      	strb	r1, [r3, #1]
 8005d8e:	f883 a000 	strb.w	sl, [r3]
 8005d92:	2304      	movs	r3, #4
 8005d94:	7023      	strb	r3, [r4, #0]
 8005d96:	f1be 0f00 	cmp.w	lr, #0
 8005d9a:	f43f a9d4 	beq.w	8005146 <keypad_sm+0x66e>
 8005d9e:	f885 9000 	strb.w	r9, [r5]
 8005da2:	f7ff b9d0 	b.w	8005146 <keypad_sm+0x66e>
 8005da6:	4ca9      	ldr	r4, [pc, #676]	; (800604c <keypad_sm+0x1574>)
				kpenum = WAIT;
 8005da8:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005daa:	f994 1000 	ldrsb.w	r1, [r4]
 8005dae:	2903      	cmp	r1, #3
 8005db0:	f73e aeb9 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005db4:	4ba6      	ldr	r3, [pc, #664]	; (8006050 <keypad_sm+0x1578>)
 8005db6:	4da7      	ldr	r5, [pc, #668]	; (8006054 <keypad_sm+0x157c>)
 8005db8:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005dba:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005dbe:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005dc2:	f895 e000 	ldrb.w	lr, [r5]
 8005dc6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005dca:	789f      	ldrb	r7, [r3, #2]
 8005dcc:	785e      	ldrb	r6, [r3, #1]
 8005dce:	7818      	ldrb	r0, [r3, #0]
 8005dd0:	b2c9      	uxtb	r1, r1
 8005dd2:	e003      	b.n	8005ddc <keypad_sm+0x1304>
	while(keypaditerator < 4){
 8005dd4:	46bc      	mov	ip, r7
 8005dd6:	4637      	mov	r7, r6
 8005dd8:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8005dda:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005ddc:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005dde:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005de2:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005de4:	bf04      	itt	eq
 8005de6:	f04f 0e00 	moveq.w	lr, #0
 8005dea:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005dec:	2905      	cmp	r1, #5
 8005dee:	46e0      	mov	r8, ip
 8005df0:	d1f0      	bne.n	8005dd4 <keypad_sm+0x12fc>
 8005df2:	f883 c004 	strb.w	ip, [r3, #4]
 8005df6:	70df      	strb	r7, [r3, #3]
 8005df8:	709e      	strb	r6, [r3, #2]
 8005dfa:	7058      	strb	r0, [r3, #1]
 8005dfc:	f883 9000 	strb.w	r9, [r3]
 8005e00:	2304      	movs	r3, #4
 8005e02:	7023      	strb	r3, [r4, #0]
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	f43e ae8e 	beq.w	8004b26 <keypad_sm+0x4e>
 8005e0a:	f885 e000 	strb.w	lr, [r5]
 8005e0e:	f7fe be8a 	b.w	8004b26 <keypad_sm+0x4e>
			else if(num == '#'){
 8005e12:	2823      	cmp	r0, #35	; 0x23
 8005e14:	f000 82e0 	beq.w	80063d8 <keypad_sm+0x1900>
			else if(num == '+'){
 8005e18:	282b      	cmp	r0, #43	; 0x2b
 8005e1a:	f000 8453 	beq.w	80066c4 <keypad_sm+0x1bec>
			else if(num == '-'){
 8005e1e:	282d      	cmp	r0, #45	; 0x2d
 8005e20:	f000 8603 	beq.w	8006a2a <keypad_sm+0x1f52>
			else if(num == 's'){
 8005e24:	2873      	cmp	r0, #115	; 0x73
 8005e26:	f000 85f3 	beq.w	8006a10 <keypad_sm+0x1f38>
			else if(num == '['){
 8005e2a:	285b      	cmp	r0, #91	; 0x5b
 8005e2c:	f001 807b 	beq.w	8006f26 <keypad_sm+0x244e>
			else if(num == ']'){
 8005e30:	285d      	cmp	r0, #93	; 0x5d
 8005e32:	f001 80cf 	beq.w	8006fd4 <keypad_sm+0x24fc>
			else if(num == '*'){
 8005e36:	282a      	cmp	r0, #42	; 0x2a
 8005e38:	f000 87f5 	beq.w	8006e26 <keypad_sm+0x234e>
			else if(num == '/'){
 8005e3c:	282f      	cmp	r0, #47	; 0x2f
 8005e3e:	f47e ae72 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 8005e42:	4a85      	ldr	r2, [pc, #532]	; (8006058 <keypad_sm+0x1580>)
 8005e44:	7813      	ldrb	r3, [r2, #0]
 8005e46:	fab3 f383 	clz	r3, r3
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	7013      	strb	r3, [r2, #0]
 8005e4e:	f7fe be6a 	b.w	8004b26 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 8005e52:	4c7e      	ldr	r4, [pc, #504]	; (800604c <keypad_sm+0x1574>)
				kpenum = WAIT;
 8005e54:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005e56:	f994 2000 	ldrsb.w	r2, [r4]
 8005e5a:	2a03      	cmp	r2, #3
 8005e5c:	f73e ae63 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005e60:	4b7b      	ldr	r3, [pc, #492]	; (8006050 <keypad_sm+0x1578>)
 8005e62:	4d7c      	ldr	r5, [pc, #496]	; (8006054 <keypad_sm+0x157c>)
 8005e64:	3201      	adds	r2, #1
 8005e66:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005e6a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005e6e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005e72:	f895 c000 	ldrb.w	ip, [r5]
 8005e76:	78df      	ldrb	r7, [r3, #3]
 8005e78:	789e      	ldrb	r6, [r3, #2]
 8005e7a:	7858      	ldrb	r0, [r3, #1]
 8005e7c:	7819      	ldrb	r1, [r3, #0]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	e003      	b.n	8005e8a <keypad_sm+0x13b2>
	while(keypaditerator < 4){
 8005e82:	4637      	mov	r7, r6
 8005e84:	4606      	mov	r6, r0
 8005e86:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005e88:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005e8a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005e8c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005e90:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005e92:	bf04      	itt	eq
 8005e94:	f04f 0c00 	moveq.w	ip, #0
 8005e98:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005e9c:	2a05      	cmp	r2, #5
 8005e9e:	46b8      	mov	r8, r7
 8005ea0:	d1ef      	bne.n	8005e82 <keypad_sm+0x13aa>
 8005ea2:	711f      	strb	r7, [r3, #4]
 8005ea4:	70de      	strb	r6, [r3, #3]
 8005ea6:	7098      	strb	r0, [r3, #2]
 8005ea8:	7059      	strb	r1, [r3, #1]
 8005eaa:	f883 9000 	strb.w	r9, [r3]
 8005eae:	2304      	movs	r3, #4
 8005eb0:	7023      	strb	r3, [r4, #0]
 8005eb2:	f1be 0f00 	cmp.w	lr, #0
 8005eb6:	f43e ae36 	beq.w	8004b26 <keypad_sm+0x4e>
 8005eba:	f885 c000 	strb.w	ip, [r5]
 8005ebe:	f7fe be32 	b.w	8004b26 <keypad_sm+0x4e>
 8005ec2:	4c62      	ldr	r4, [pc, #392]	; (800604c <keypad_sm+0x1574>)
				kpenum = WAIT;
 8005ec4:	702a      	strb	r2, [r5, #0]
	while(keypaditerator < 4){
 8005ec6:	f994 2000 	ldrsb.w	r2, [r4]
 8005eca:	2a03      	cmp	r2, #3
 8005ecc:	f73e ae2b 	bgt.w	8004b26 <keypad_sm+0x4e>
 8005ed0:	4b5f      	ldr	r3, [pc, #380]	; (8006050 <keypad_sm+0x1578>)
 8005ed2:	4d60      	ldr	r5, [pc, #384]	; (8006054 <keypad_sm+0x157c>)
 8005ed4:	3201      	adds	r2, #1
 8005ed6:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005eda:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005ede:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005ee2:	f895 c000 	ldrb.w	ip, [r5]
 8005ee6:	78df      	ldrb	r7, [r3, #3]
 8005ee8:	789e      	ldrb	r6, [r3, #2]
 8005eea:	7858      	ldrb	r0, [r3, #1]
 8005eec:	7819      	ldrb	r1, [r3, #0]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	e003      	b.n	8005efa <keypad_sm+0x1422>
	while(keypaditerator < 4){
 8005ef2:	4637      	mov	r7, r6
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005ef8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005efa:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005efc:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005f00:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005f02:	bf04      	itt	eq
 8005f04:	f04f 0c00 	moveq.w	ip, #0
 8005f08:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005f0c:	2a05      	cmp	r2, #5
 8005f0e:	46b8      	mov	r8, r7
 8005f10:	d1ef      	bne.n	8005ef2 <keypad_sm+0x141a>
 8005f12:	711f      	strb	r7, [r3, #4]
 8005f14:	70de      	strb	r6, [r3, #3]
 8005f16:	7098      	strb	r0, [r3, #2]
 8005f18:	7059      	strb	r1, [r3, #1]
 8005f1a:	f883 9000 	strb.w	r9, [r3]
 8005f1e:	2304      	movs	r3, #4
 8005f20:	7023      	strb	r3, [r4, #0]
 8005f22:	f1be 0f00 	cmp.w	lr, #0
 8005f26:	f43e adfe 	beq.w	8004b26 <keypad_sm+0x4e>
 8005f2a:	f885 c000 	strb.w	ip, [r5]
 8005f2e:	f7fe bdfa 	b.w	8004b26 <keypad_sm+0x4e>
 8005f32:	4c46      	ldr	r4, [pc, #280]	; (800604c <keypad_sm+0x1574>)
 8005f34:	f994 2000 	ldrsb.w	r2, [r4]
 8005f38:	2a03      	cmp	r2, #3
 8005f3a:	f73f a904 	bgt.w	8005146 <keypad_sm+0x66e>
 8005f3e:	4b44      	ldr	r3, [pc, #272]	; (8006050 <keypad_sm+0x1578>)
 8005f40:	4d44      	ldr	r5, [pc, #272]	; (8006054 <keypad_sm+0x157c>)
 8005f42:	3201      	adds	r2, #1
 8005f44:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005f48:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005f4c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005f50:	f895 e000 	ldrb.w	lr, [r5]
 8005f54:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005f58:	789f      	ldrb	r7, [r3, #2]
 8005f5a:	7858      	ldrb	r0, [r3, #1]
 8005f5c:	7819      	ldrb	r1, [r3, #0]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	e003      	b.n	8005f6a <keypad_sm+0x1492>
	while(keypaditerator < 4){
 8005f62:	46bc      	mov	ip, r7
 8005f64:	4607      	mov	r7, r0
 8005f66:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005f68:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005f6a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005f6c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005f70:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005f72:	bf04      	itt	eq
 8005f74:	f04f 0801 	moveq.w	r8, #1
 8005f78:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005f7c:	2a05      	cmp	r2, #5
 8005f7e:	46e1      	mov	r9, ip
 8005f80:	d1ef      	bne.n	8005f62 <keypad_sm+0x148a>
 8005f82:	f883 c004 	strb.w	ip, [r3, #4]
 8005f86:	70df      	strb	r7, [r3, #3]
 8005f88:	7098      	strb	r0, [r3, #2]
 8005f8a:	7059      	strb	r1, [r3, #1]
 8005f8c:	f883 a000 	strb.w	sl, [r3]
 8005f90:	2304      	movs	r3, #4
 8005f92:	7023      	strb	r3, [r4, #0]
 8005f94:	f1b8 0f00 	cmp.w	r8, #0
 8005f98:	f43f a8d5 	beq.w	8005146 <keypad_sm+0x66e>
 8005f9c:	f885 e000 	strb.w	lr, [r5]
 8005fa0:	f7ff b8d1 	b.w	8005146 <keypad_sm+0x66e>
				kpenum = WAIT;
 8005fa4:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8005fa6:	4c29      	ldr	r4, [pc, #164]	; (800604c <keypad_sm+0x1574>)
				kpenum = WAIT;
 8005fa8:	702b      	strb	r3, [r5, #0]
	while(keypaditerator < 4){
 8005faa:	f994 2000 	ldrsb.w	r2, [r4]
 8005fae:	2a03      	cmp	r2, #3
 8005fb0:	f73f a8c9 	bgt.w	8005146 <keypad_sm+0x66e>
 8005fb4:	4b26      	ldr	r3, [pc, #152]	; (8006050 <keypad_sm+0x1578>)
 8005fb6:	4d27      	ldr	r5, [pc, #156]	; (8006054 <keypad_sm+0x157c>)
 8005fb8:	3201      	adds	r2, #1
 8005fba:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005fbe:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005fc2:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005fc6:	f895 e000 	ldrb.w	lr, [r5]
 8005fca:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005fce:	789f      	ldrb	r7, [r3, #2]
 8005fd0:	7858      	ldrb	r0, [r3, #1]
 8005fd2:	7819      	ldrb	r1, [r3, #0]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	e003      	b.n	8005fe0 <keypad_sm+0x1508>
	while(keypaditerator < 4){
 8005fd8:	46bc      	mov	ip, r7
 8005fda:	4607      	mov	r7, r0
 8005fdc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005fde:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005fe0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005fe2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005fe6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005fe8:	bf04      	itt	eq
 8005fea:	f04f 0801 	moveq.w	r8, #1
 8005fee:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005ff2:	2a05      	cmp	r2, #5
 8005ff4:	46e1      	mov	r9, ip
 8005ff6:	d1ef      	bne.n	8005fd8 <keypad_sm+0x1500>
 8005ff8:	f883 c004 	strb.w	ip, [r3, #4]
 8005ffc:	70df      	strb	r7, [r3, #3]
 8005ffe:	7098      	strb	r0, [r3, #2]
 8006000:	7059      	strb	r1, [r3, #1]
 8006002:	f883 a000 	strb.w	sl, [r3]
 8006006:	2304      	movs	r3, #4
 8006008:	7023      	strb	r3, [r4, #0]
 800600a:	f1b8 0f00 	cmp.w	r8, #0
 800600e:	f43f a89a 	beq.w	8005146 <keypad_sm+0x66e>
 8006012:	f885 e000 	strb.w	lr, [r5]
 8006016:	f7ff b896 	b.w	8005146 <keypad_sm+0x66e>
				kpenum = WAIT;
 800601a:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 800601c:	4c0b      	ldr	r4, [pc, #44]	; (800604c <keypad_sm+0x1574>)
				kpenum = WAIT;
 800601e:	702b      	strb	r3, [r5, #0]
	while(keypaditerator < 4){
 8006020:	f994 2000 	ldrsb.w	r2, [r4]
 8006024:	2a03      	cmp	r2, #3
 8006026:	f73f a88e 	bgt.w	8005146 <keypad_sm+0x66e>
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <keypad_sm+0x1578>)
 800602c:	4d09      	ldr	r5, [pc, #36]	; (8006054 <keypad_sm+0x157c>)
 800602e:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006032:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006036:	f893 9004 	ldrb.w	r9, [r3, #4]
 800603a:	f895 e000 	ldrb.w	lr, [r5]
 800603e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006042:	789f      	ldrb	r7, [r3, #2]
 8006044:	7858      	ldrb	r0, [r3, #1]
 8006046:	7819      	ldrb	r1, [r3, #0]
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	e00b      	b.n	8006064 <keypad_sm+0x158c>
 800604c:	2000000d 	.word	0x2000000d
 8006050:	20000008 	.word	0x20000008
 8006054:	20000748 	.word	0x20000748
 8006058:	200003e7 	.word	0x200003e7
	while(keypaditerator < 4){
 800605c:	46bc      	mov	ip, r7
 800605e:	4607      	mov	r7, r0
 8006060:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006062:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006064:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006066:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800606a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800606c:	bf04      	itt	eq
 800606e:	f04f 0801 	moveq.w	r8, #1
 8006072:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006076:	2a04      	cmp	r2, #4
 8006078:	46e1      	mov	r9, ip
 800607a:	d1ef      	bne.n	800605c <keypad_sm+0x1584>
 800607c:	7022      	strb	r2, [r4, #0]
 800607e:	f883 c004 	strb.w	ip, [r3, #4]
 8006082:	70df      	strb	r7, [r3, #3]
 8006084:	7098      	strb	r0, [r3, #2]
 8006086:	7059      	strb	r1, [r3, #1]
 8006088:	f883 a000 	strb.w	sl, [r3]
 800608c:	f1b8 0f00 	cmp.w	r8, #0
 8006090:	f43f a859 	beq.w	8005146 <keypad_sm+0x66e>
 8006094:	f885 e000 	strb.w	lr, [r5]
 8006098:	f7ff b855 	b.w	8005146 <keypad_sm+0x66e>
			else if(num == '#'){
 800609c:	2823      	cmp	r0, #35	; 0x23
 800609e:	f000 8373 	beq.w	8006788 <keypad_sm+0x1cb0>
			else if(num == '+'){
 80060a2:	282b      	cmp	r0, #43	; 0x2b
 80060a4:	f000 8426 	beq.w	80068f4 <keypad_sm+0x1e1c>
			else if(num == '-'){
 80060a8:	282d      	cmp	r0, #45	; 0x2d
 80060aa:	f000 85d4 	beq.w	8006c56 <keypad_sm+0x217e>
			else if(num == 's'){
 80060ae:	2873      	cmp	r0, #115	; 0x73
 80060b0:	f000 8723 	beq.w	8006efa <keypad_sm+0x2422>
			else if(num == '['){
 80060b4:	285b      	cmp	r0, #91	; 0x5b
 80060b6:	f001 801f 	beq.w	80070f8 <keypad_sm+0x2620>
			else if(num == ']'){
 80060ba:	285d      	cmp	r0, #93	; 0x5d
 80060bc:	f001 8011 	beq.w	80070e2 <keypad_sm+0x260a>
			else if(num == '*'){
 80060c0:	282a      	cmp	r0, #42	; 0x2a
 80060c2:	f001 8005 	beq.w	80070d0 <keypad_sm+0x25f8>
			else if(num == '/'){
 80060c6:	282f      	cmp	r0, #47	; 0x2f
 80060c8:	f47e ad2d 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 80060cc:	4aba      	ldr	r2, [pc, #744]	; (80063b8 <keypad_sm+0x18e0>)
 80060ce:	7813      	ldrb	r3, [r2, #0]
 80060d0:	fab3 f383 	clz	r3, r3
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	7013      	strb	r3, [r2, #0]
 80060d8:	f7fe bd25 	b.w	8004b26 <keypad_sm+0x4e>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80060dc:	4cb7      	ldr	r4, [pc, #732]	; (80063bc <keypad_sm+0x18e4>)
 80060de:	f994 3000 	ldrsb.w	r3, [r4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	f77e ad1f 	ble.w	8004b26 <keypad_sm+0x4e>
 80060e8:	4db5      	ldr	r5, [pc, #724]	; (80063c0 <keypad_sm+0x18e8>)
 80060ea:	782a      	ldrb	r2, [r5, #0]
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	f47e ad1a 	bne.w	8004b26 <keypad_sm+0x4e>
				keypadarr[i-1] = keypadarr[i];
 80060f2:	4ab4      	ldr	r2, [pc, #720]	; (80063c4 <keypad_sm+0x18ec>)
			keypaditerator--;
 80060f4:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 80060f6:	f8d2 1001 	ldr.w	r1, [r2, #1]
			keypaditerator--;
 80060fa:	7023      	strb	r3, [r4, #0]
				keypadarr[i-1] = keypadarr[i];
 80060fc:	6011      	str	r1, [r2, #0]
			keypaddecimal = 1;
 80060fe:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 8006100:	212e      	movs	r1, #46	; 0x2e
			keypaddecimal = 1;
 8006102:	702b      	strb	r3, [r5, #0]
			keypadarr[keypadlength-1] = num;
 8006104:	7111      	strb	r1, [r2, #4]
			keypaditerator--;
 8006106:	f7fe bd0e 	b.w	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 800610a:	f7fe f81f 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800610e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006110:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006112:	f7fb f801 	bl	8001118 <__aeabi_fcmpge>
 8006116:	b170      	cbz	r0, 8006136 <keypad_sm+0x165e>
 8006118:	4620      	mov	r0, r4
 800611a:	49ab      	ldr	r1, [pc, #684]	; (80063c8 <keypad_sm+0x18f0>)
 800611c:	f7fa fff2 	bl	8001104 <__aeabi_fcmple>
 8006120:	b148      	cbz	r0, 8006136 <keypad_sm+0x165e>
					amp_set_main_old = amp_set_main;
 8006122:	4caa      	ldr	r4, [pc, #680]	; (80063cc <keypad_sm+0x18f4>)
 8006124:	4baa      	ldr	r3, [pc, #680]	; (80063d0 <keypad_sm+0x18f8>)
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 800612a:	f7fe f80f 	bl	800414c <translate_keypad>
 800612e:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	f7fb fc21 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006136:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006138:	4ca0      	ldr	r4, [pc, #640]	; (80063bc <keypad_sm+0x18e4>)
				kpenum = WAIT;
 800613a:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 800613c:	f994 2000 	ldrsb.w	r2, [r4]
 8006140:	2a03      	cmp	r2, #3
 8006142:	f73f a800 	bgt.w	8005146 <keypad_sm+0x66e>
 8006146:	4b9f      	ldr	r3, [pc, #636]	; (80063c4 <keypad_sm+0x18ec>)
 8006148:	4d9d      	ldr	r5, [pc, #628]	; (80063c0 <keypad_sm+0x18e8>)
 800614a:	4689      	mov	r9, r1
			keypadarr[0] = num;
 800614c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006150:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006154:	f895 e000 	ldrb.w	lr, [r5]
 8006158:	f893 c003 	ldrb.w	ip, [r3, #3]
 800615c:	789f      	ldrb	r7, [r3, #2]
 800615e:	7858      	ldrb	r0, [r3, #1]
 8006160:	7819      	ldrb	r1, [r3, #0]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	e003      	b.n	800616e <keypad_sm+0x1696>
	while(keypaditerator < 4){
 8006166:	46bc      	mov	ip, r7
 8006168:	4607      	mov	r7, r0
 800616a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800616c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800616e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006170:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006174:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006176:	bf04      	itt	eq
 8006178:	f04f 0901 	moveq.w	r9, #1
 800617c:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006180:	2a04      	cmp	r2, #4
 8006182:	46e0      	mov	r8, ip
 8006184:	d1ef      	bne.n	8006166 <keypad_sm+0x168e>
 8006186:	7022      	strb	r2, [r4, #0]
 8006188:	f883 c004 	strb.w	ip, [r3, #4]
 800618c:	70df      	strb	r7, [r3, #3]
 800618e:	7098      	strb	r0, [r3, #2]
 8006190:	7059      	strb	r1, [r3, #1]
 8006192:	f883 a000 	strb.w	sl, [r3]
 8006196:	f1b9 0f00 	cmp.w	r9, #0
 800619a:	f43e afd4 	beq.w	8005146 <keypad_sm+0x66e>
 800619e:	f885 e000 	strb.w	lr, [r5]
 80061a2:	f7fe bfd0 	b.w	8005146 <keypad_sm+0x66e>
			else if(num == '#'){
 80061a6:	2823      	cmp	r0, #35	; 0x23
 80061a8:	f000 851c 	beq.w	8006be4 <keypad_sm+0x210c>
			else if(num == '+'){
 80061ac:	282b      	cmp	r0, #43	; 0x2b
 80061ae:	f000 84cc 	beq.w	8006b4a <keypad_sm+0x2072>
			else if(num == '-'){
 80061b2:	282d      	cmp	r0, #45	; 0x2d
 80061b4:	f000 85b0 	beq.w	8006d18 <keypad_sm+0x2240>
			else if(num == 's'){
 80061b8:	2873      	cmp	r0, #115	; 0x73
 80061ba:	f000 8586 	beq.w	8006cca <keypad_sm+0x21f2>
			else if(num == '['){
 80061be:	285b      	cmp	r0, #91	; 0x5b
 80061c0:	f000 875d 	beq.w	800707e <keypad_sm+0x25a6>
			else if(num == ']'){
 80061c4:	285d      	cmp	r0, #93	; 0x5d
 80061c6:	f000 874c 	beq.w	8007062 <keypad_sm+0x258a>
			else if(num == '*'){
 80061ca:	282a      	cmp	r0, #42	; 0x2a
 80061cc:	f000 8777 	beq.w	80070be <keypad_sm+0x25e6>
			else if(num == '/'){
 80061d0:	282f      	cmp	r0, #47	; 0x2f
 80061d2:	f47e aca8 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 80061d6:	4a78      	ldr	r2, [pc, #480]	; (80063b8 <keypad_sm+0x18e0>)
 80061d8:	7813      	ldrb	r3, [r2, #0]
 80061da:	fab3 f383 	clz	r3, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	7013      	strb	r3, [r2, #0]
 80061e2:	f7fe bca0 	b.w	8004b26 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 80061e6:	4c75      	ldr	r4, [pc, #468]	; (80063bc <keypad_sm+0x18e4>)
 80061e8:	f994 2000 	ldrsb.w	r2, [r4]
 80061ec:	2a03      	cmp	r2, #3
 80061ee:	f73e afaa 	bgt.w	8005146 <keypad_sm+0x66e>
 80061f2:	4b74      	ldr	r3, [pc, #464]	; (80063c4 <keypad_sm+0x18ec>)
 80061f4:	4d72      	ldr	r5, [pc, #456]	; (80063c0 <keypad_sm+0x18e8>)
 80061f6:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80061fa:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80061fe:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006202:	f895 e000 	ldrb.w	lr, [r5]
 8006206:	f893 c003 	ldrb.w	ip, [r3, #3]
 800620a:	789f      	ldrb	r7, [r3, #2]
 800620c:	7858      	ldrb	r0, [r3, #1]
 800620e:	7819      	ldrb	r1, [r3, #0]
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	e003      	b.n	800621c <keypad_sm+0x1744>
	while(keypaditerator < 4){
 8006214:	46bc      	mov	ip, r7
 8006216:	4607      	mov	r7, r0
 8006218:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800621a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800621c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800621e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006222:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006224:	bf04      	itt	eq
 8006226:	f04f 0801 	moveq.w	r8, #1
 800622a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800622e:	2a04      	cmp	r2, #4
 8006230:	46e1      	mov	r9, ip
 8006232:	d1ef      	bne.n	8006214 <keypad_sm+0x173c>
 8006234:	7022      	strb	r2, [r4, #0]
 8006236:	f883 c004 	strb.w	ip, [r3, #4]
 800623a:	70df      	strb	r7, [r3, #3]
 800623c:	7098      	strb	r0, [r3, #2]
 800623e:	7059      	strb	r1, [r3, #1]
 8006240:	f883 a000 	strb.w	sl, [r3]
 8006244:	f1b8 0f00 	cmp.w	r8, #0
 8006248:	f43e af7d 	beq.w	8005146 <keypad_sm+0x66e>
 800624c:	f885 e000 	strb.w	lr, [r5]
 8006250:	f7fe bf79 	b.w	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 8006254:	f7fd ff7a 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006258:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800625a:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800625c:	f7fa ff5c 	bl	8001118 <__aeabi_fcmpge>
 8006260:	b130      	cbz	r0, 8006270 <keypad_sm+0x1798>
 8006262:	4620      	mov	r0, r4
 8006264:	4958      	ldr	r1, [pc, #352]	; (80063c8 <keypad_sm+0x18f0>)
 8006266:	f7fa ff4d 	bl	8001104 <__aeabi_fcmple>
 800626a:	b108      	cbz	r0, 8006270 <keypad_sm+0x1798>
					volt_set_aux = translate_keypad();
 800626c:	4b59      	ldr	r3, [pc, #356]	; (80063d4 <keypad_sm+0x18fc>)
 800626e:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8006270:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006272:	4c52      	ldr	r4, [pc, #328]	; (80063bc <keypad_sm+0x18e4>)
				kpenum = WAIT;
 8006274:	702f      	strb	r7, [r5, #0]
	while(keypaditerator < 4){
 8006276:	f994 2000 	ldrsb.w	r2, [r4]
 800627a:	2a03      	cmp	r2, #3
 800627c:	f73e ac53 	bgt.w	8004b26 <keypad_sm+0x4e>
 8006280:	4b50      	ldr	r3, [pc, #320]	; (80063c4 <keypad_sm+0x18ec>)
 8006282:	4d4f      	ldr	r5, [pc, #316]	; (80063c0 <keypad_sm+0x18e8>)
 8006284:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8006286:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800628a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800628e:	f895 e000 	ldrb.w	lr, [r5]
 8006292:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006296:	789e      	ldrb	r6, [r3, #2]
 8006298:	7858      	ldrb	r0, [r3, #1]
 800629a:	7819      	ldrb	r1, [r3, #0]
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	e003      	b.n	80062a8 <keypad_sm+0x17d0>
	while(keypaditerator < 4){
 80062a0:	46b4      	mov	ip, r6
 80062a2:	4606      	mov	r6, r0
 80062a4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80062a6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80062a8:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80062aa:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80062ae:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80062b0:	bf04      	itt	eq
 80062b2:	f04f 0e00 	moveq.w	lr, #0
 80062b6:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 80062b8:	2a05      	cmp	r2, #5
 80062ba:	46e0      	mov	r8, ip
 80062bc:	d1f0      	bne.n	80062a0 <keypad_sm+0x17c8>
 80062be:	f883 c004 	strb.w	ip, [r3, #4]
 80062c2:	70de      	strb	r6, [r3, #3]
 80062c4:	7098      	strb	r0, [r3, #2]
 80062c6:	7059      	strb	r1, [r3, #1]
 80062c8:	f883 9000 	strb.w	r9, [r3]
 80062cc:	2304      	movs	r3, #4
 80062ce:	7023      	strb	r3, [r4, #0]
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	f43e ac28 	beq.w	8004b26 <keypad_sm+0x4e>
 80062d6:	f885 e000 	strb.w	lr, [r5]
 80062da:	f7fe bc24 	b.w	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 80062de:	f7fd ff35 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062e2:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80062e4:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062e6:	f7fa ff17 	bl	8001118 <__aeabi_fcmpge>
 80062ea:	b190      	cbz	r0, 8006312 <keypad_sm+0x183a>
 80062ec:	4620      	mov	r0, r4
 80062ee:	f7fa f8b3 	bl	8000458 <__aeabi_f2d>
 80062f2:	a32f      	add	r3, pc, #188	; (adr r3, 80063b0 <keypad_sm+0x18d8>)
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f7fa fb82 	bl	8000a00 <__aeabi_dcmple>
 80062fc:	b148      	cbz	r0, 8006312 <keypad_sm+0x183a>
					amp_set_main_old = amp_set_main;
 80062fe:	4c33      	ldr	r4, [pc, #204]	; (80063cc <keypad_sm+0x18f4>)
 8006300:	4b33      	ldr	r3, [pc, #204]	; (80063d0 <keypad_sm+0x18f8>)
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006306:	f7fd ff21 	bl	800414c <translate_keypad>
 800630a:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	f7fb fb33 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006312:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006314:	4c29      	ldr	r4, [pc, #164]	; (80063bc <keypad_sm+0x18e4>)
				kpenum = WAIT;
 8006316:	702f      	strb	r7, [r5, #0]
	while(keypaditerator < 4){
 8006318:	f994 2000 	ldrsb.w	r2, [r4]
 800631c:	2a03      	cmp	r2, #3
 800631e:	f73e ac02 	bgt.w	8004b26 <keypad_sm+0x4e>
 8006322:	4b28      	ldr	r3, [pc, #160]	; (80063c4 <keypad_sm+0x18ec>)
 8006324:	4d26      	ldr	r5, [pc, #152]	; (80063c0 <keypad_sm+0x18e8>)
			keypadarr[0] = num;
 8006326:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800632a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800632e:	f895 e000 	ldrb.w	lr, [r5]
 8006332:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006336:	789e      	ldrb	r6, [r3, #2]
 8006338:	7858      	ldrb	r0, [r3, #1]
 800633a:	7819      	ldrb	r1, [r3, #0]
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	e003      	b.n	8006348 <keypad_sm+0x1870>
	while(keypaditerator < 4){
 8006340:	46b4      	mov	ip, r6
 8006342:	4606      	mov	r6, r0
 8006344:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006346:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006348:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800634a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800634e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006350:	bf04      	itt	eq
 8006352:	f04f 0e00 	moveq.w	lr, #0
 8006356:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 8006358:	2a04      	cmp	r2, #4
 800635a:	46e0      	mov	r8, ip
 800635c:	d1f0      	bne.n	8006340 <keypad_sm+0x1868>
 800635e:	7022      	strb	r2, [r4, #0]
 8006360:	f883 c004 	strb.w	ip, [r3, #4]
 8006364:	70de      	strb	r6, [r3, #3]
 8006366:	7098      	strb	r0, [r3, #2]
 8006368:	7059      	strb	r1, [r3, #1]
 800636a:	f883 9000 	strb.w	r9, [r3]
 800636e:	2f00      	cmp	r7, #0
 8006370:	f43e abd9 	beq.w	8004b26 <keypad_sm+0x4e>
 8006374:	f885 e000 	strb.w	lr, [r5]
 8006378:	f7fe bbd5 	b.w	8004b26 <keypad_sm+0x4e>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800637c:	4c0f      	ldr	r4, [pc, #60]	; (80063bc <keypad_sm+0x18e4>)
 800637e:	f994 3000 	ldrsb.w	r3, [r4]
 8006382:	2b01      	cmp	r3, #1
 8006384:	f77e abcf 	ble.w	8004b26 <keypad_sm+0x4e>
 8006388:	490d      	ldr	r1, [pc, #52]	; (80063c0 <keypad_sm+0x18e8>)
 800638a:	780a      	ldrb	r2, [r1, #0]
 800638c:	2a00      	cmp	r2, #0
 800638e:	f47e abca 	bne.w	8004b26 <keypad_sm+0x4e>
				keypadarr[i-1] = keypadarr[i];
 8006392:	4a0c      	ldr	r2, [pc, #48]	; (80063c4 <keypad_sm+0x18ec>)
			keypaditerator--;
 8006394:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8006396:	f8d2 0001 	ldr.w	r0, [r2, #1]
			keypaditerator--;
 800639a:	7023      	strb	r3, [r4, #0]
				keypadarr[i-1] = keypadarr[i];
 800639c:	6010      	str	r0, [r2, #0]
			keypaddecimal = 1;
 800639e:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 80063a0:	202e      	movs	r0, #46	; 0x2e
			keypaddecimal = 1;
 80063a2:	700b      	strb	r3, [r1, #0]
			keypadarr[keypadlength-1] = num;
 80063a4:	7110      	strb	r0, [r2, #4]
			keypaditerator--;
 80063a6:	f7fe bbbe 	b.w	8004b26 <keypad_sm+0x4e>
 80063aa:	bf00      	nop
 80063ac:	f3af 8000 	nop.w
 80063b0:	50b0f27c 	.word	0x50b0f27c
 80063b4:	3fe99a6b 	.word	0x3fe99a6b
 80063b8:	200003e7 	.word	0x200003e7
 80063bc:	2000000d 	.word	0x2000000d
 80063c0:	20000748 	.word	0x20000748
 80063c4:	20000008 	.word	0x20000008
 80063c8:	41400000 	.word	0x41400000
 80063cc:	200003e0 	.word	0x200003e0
 80063d0:	20000000 	.word	0x20000000
 80063d4:	20000a6c 	.word	0x20000a6c
	while(keypaditerator < 4){
 80063d8:	4cb5      	ldr	r4, [pc, #724]	; (80066b0 <keypad_sm+0x1bd8>)
 80063da:	f994 2000 	ldrsb.w	r2, [r4]
 80063de:	2a03      	cmp	r2, #3
 80063e0:	f73e aeb1 	bgt.w	8005146 <keypad_sm+0x66e>
 80063e4:	4bb3      	ldr	r3, [pc, #716]	; (80066b4 <keypad_sm+0x1bdc>)
 80063e6:	4db4      	ldr	r5, [pc, #720]	; (80066b8 <keypad_sm+0x1be0>)
 80063e8:	3201      	adds	r2, #1
 80063ea:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80063ee:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80063f2:	f893 9004 	ldrb.w	r9, [r3, #4]
 80063f6:	f895 e000 	ldrb.w	lr, [r5]
 80063fa:	f893 c003 	ldrb.w	ip, [r3, #3]
 80063fe:	789f      	ldrb	r7, [r3, #2]
 8006400:	7858      	ldrb	r0, [r3, #1]
 8006402:	7819      	ldrb	r1, [r3, #0]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	e003      	b.n	8006410 <keypad_sm+0x1938>
	while(keypaditerator < 4){
 8006408:	46bc      	mov	ip, r7
 800640a:	4607      	mov	r7, r0
 800640c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800640e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006410:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006412:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006416:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006418:	bf04      	itt	eq
 800641a:	f04f 0801 	moveq.w	r8, #1
 800641e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006422:	2a05      	cmp	r2, #5
 8006424:	46e1      	mov	r9, ip
 8006426:	d1ef      	bne.n	8006408 <keypad_sm+0x1930>
 8006428:	f883 c004 	strb.w	ip, [r3, #4]
 800642c:	70df      	strb	r7, [r3, #3]
 800642e:	7098      	strb	r0, [r3, #2]
 8006430:	7059      	strb	r1, [r3, #1]
 8006432:	f883 a000 	strb.w	sl, [r3]
 8006436:	2304      	movs	r3, #4
 8006438:	7023      	strb	r3, [r4, #0]
 800643a:	f1b8 0f00 	cmp.w	r8, #0
 800643e:	f43e ae82 	beq.w	8005146 <keypad_sm+0x66e>
 8006442:	f885 e000 	strb.w	lr, [r5]
 8006446:	f7fe be7e 	b.w	8005146 <keypad_sm+0x66e>
 800644a:	4c99      	ldr	r4, [pc, #612]	; (80066b0 <keypad_sm+0x1bd8>)
 800644c:	f994 2000 	ldrsb.w	r2, [r4]
 8006450:	2a03      	cmp	r2, #3
 8006452:	f73e ae78 	bgt.w	8005146 <keypad_sm+0x66e>
 8006456:	4b97      	ldr	r3, [pc, #604]	; (80066b4 <keypad_sm+0x1bdc>)
 8006458:	4d97      	ldr	r5, [pc, #604]	; (80066b8 <keypad_sm+0x1be0>)
 800645a:	3201      	adds	r2, #1
 800645c:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006460:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006464:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006468:	f895 e000 	ldrb.w	lr, [r5]
 800646c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006470:	789f      	ldrb	r7, [r3, #2]
 8006472:	7858      	ldrb	r0, [r3, #1]
 8006474:	7819      	ldrb	r1, [r3, #0]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	e003      	b.n	8006482 <keypad_sm+0x19aa>
	while(keypaditerator < 4){
 800647a:	46bc      	mov	ip, r7
 800647c:	4607      	mov	r7, r0
 800647e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006480:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006482:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006484:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006488:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800648a:	bf04      	itt	eq
 800648c:	f04f 0801 	moveq.w	r8, #1
 8006490:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006494:	2a05      	cmp	r2, #5
 8006496:	46e1      	mov	r9, ip
 8006498:	d1ef      	bne.n	800647a <keypad_sm+0x19a2>
 800649a:	f883 c004 	strb.w	ip, [r3, #4]
 800649e:	70df      	strb	r7, [r3, #3]
 80064a0:	7098      	strb	r0, [r3, #2]
 80064a2:	7059      	strb	r1, [r3, #1]
 80064a4:	f883 a000 	strb.w	sl, [r3]
 80064a8:	2304      	movs	r3, #4
 80064aa:	7023      	strb	r3, [r4, #0]
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	f43e ae49 	beq.w	8005146 <keypad_sm+0x66e>
 80064b4:	f885 e000 	strb.w	lr, [r5]
 80064b8:	f7fe be45 	b.w	8005146 <keypad_sm+0x66e>
		if(keypaditerator < keypadlength-1){
 80064bc:	4c7c      	ldr	r4, [pc, #496]	; (80066b0 <keypad_sm+0x1bd8>)
 80064be:	f994 2000 	ldrsb.w	r2, [r4]
 80064c2:	2a03      	cmp	r2, #3
 80064c4:	f73e ab2f 	bgt.w	8004b26 <keypad_sm+0x4e>
			if(keypadarr[4] == '.'){
 80064c8:	4b7a      	ldr	r3, [pc, #488]	; (80066b4 <keypad_sm+0x1bdc>)
 80064ca:	7919      	ldrb	r1, [r3, #4]
 80064cc:	292e      	cmp	r1, #46	; 0x2e
 80064ce:	d102      	bne.n	80064d6 <keypad_sm+0x19fe>
				keypaddecimal = 0;
 80064d0:	2000      	movs	r0, #0
 80064d2:	4979      	ldr	r1, [pc, #484]	; (80066b8 <keypad_sm+0x1be0>)
 80064d4:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80064d6:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80064d8:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 80064da:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 80064dc:	7118      	strb	r0, [r3, #4]
 80064de:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 80064e0:	7022      	strb	r2, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 80064e2:	70d8      	strb	r0, [r3, #3]
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 80064e8:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 80064ea:	7098      	strb	r0, [r3, #2]
 80064ec:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 80064ee:	f7fe bb1a 	b.w	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 80064f2:	f7fd fe2b 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80064f6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80064f8:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80064fa:	f7fa fe0d 	bl	8001118 <__aeabi_fcmpge>
 80064fe:	b150      	cbz	r0, 8006516 <keypad_sm+0x1a3e>
 8006500:	4620      	mov	r0, r4
 8006502:	f7f9 ffa9 	bl	8000458 <__aeabi_f2d>
 8006506:	a368      	add	r3, pc, #416	; (adr r3, 80066a8 <keypad_sm+0x1bd0>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7fa fa78 	bl	8000a00 <__aeabi_dcmple>
 8006510:	b108      	cbz	r0, 8006516 <keypad_sm+0x1a3e>
					amp_set_aux = translate_keypad();
 8006512:	4b6a      	ldr	r3, [pc, #424]	; (80066bc <keypad_sm+0x1be4>)
 8006514:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8006516:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006518:	4c65      	ldr	r4, [pc, #404]	; (80066b0 <keypad_sm+0x1bd8>)
				kpenum = WAIT;
 800651a:	702f      	strb	r7, [r5, #0]
	while(keypaditerator < 4){
 800651c:	f994 2000 	ldrsb.w	r2, [r4]
 8006520:	2a03      	cmp	r2, #3
 8006522:	f73e ab00 	bgt.w	8004b26 <keypad_sm+0x4e>
 8006526:	4b63      	ldr	r3, [pc, #396]	; (80066b4 <keypad_sm+0x1bdc>)
 8006528:	4d63      	ldr	r5, [pc, #396]	; (80066b8 <keypad_sm+0x1be0>)
			keypadarr[0] = num;
 800652a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800652e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006532:	f895 e000 	ldrb.w	lr, [r5]
 8006536:	f893 c003 	ldrb.w	ip, [r3, #3]
 800653a:	789e      	ldrb	r6, [r3, #2]
 800653c:	7858      	ldrb	r0, [r3, #1]
 800653e:	7819      	ldrb	r1, [r3, #0]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	e003      	b.n	800654c <keypad_sm+0x1a74>
	while(keypaditerator < 4){
 8006544:	46b4      	mov	ip, r6
 8006546:	4606      	mov	r6, r0
 8006548:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800654a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800654c:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800654e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006552:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006554:	bf04      	itt	eq
 8006556:	f04f 0e00 	moveq.w	lr, #0
 800655a:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 800655c:	2a04      	cmp	r2, #4
 800655e:	46e0      	mov	r8, ip
 8006560:	d1f0      	bne.n	8006544 <keypad_sm+0x1a6c>
 8006562:	7022      	strb	r2, [r4, #0]
 8006564:	f883 c004 	strb.w	ip, [r3, #4]
 8006568:	70de      	strb	r6, [r3, #3]
 800656a:	7098      	strb	r0, [r3, #2]
 800656c:	7059      	strb	r1, [r3, #1]
 800656e:	f883 9000 	strb.w	r9, [r3]
 8006572:	2f00      	cmp	r7, #0
 8006574:	f43e aad7 	beq.w	8004b26 <keypad_sm+0x4e>
 8006578:	f885 e000 	strb.w	lr, [r5]
 800657c:	f7fe bad3 	b.w	8004b26 <keypad_sm+0x4e>
			else if(num == '#'){
 8006580:	2823      	cmp	r0, #35	; 0x23
 8006582:	f000 81ff 	beq.w	8006984 <keypad_sm+0x1eac>
			else if(num == '+'){
 8006586:	282b      	cmp	r0, #43	; 0x2b
 8006588:	f000 83fd 	beq.w	8006d86 <keypad_sm+0x22ae>
			else if(num == '-'){
 800658c:	282d      	cmp	r0, #45	; 0x2d
 800658e:	f000 84d5 	beq.w	8006f3c <keypad_sm+0x2464>
			else if(num == 's'){
 8006592:	2873      	cmp	r0, #115	; 0x73
 8006594:	f000 8529 	beq.w	8006fea <keypad_sm+0x2512>
			else if(num == '['){
 8006598:	285b      	cmp	r0, #91	; 0x5b
 800659a:	f000 855b 	beq.w	8007054 <keypad_sm+0x257c>
			else if(num == ']'){
 800659e:	285d      	cmp	r0, #93	; 0x5d
 80065a0:	f000 852e 	beq.w	8007000 <keypad_sm+0x2528>
			else if(num == '*'){
 80065a4:	282a      	cmp	r0, #42	; 0x2a
 80065a6:	f000 850c 	beq.w	8006fc2 <keypad_sm+0x24ea>
			else if(num == '/'){
 80065aa:	282f      	cmp	r0, #47	; 0x2f
 80065ac:	f47e aabb 	bne.w	8004b26 <keypad_sm+0x4e>
				chstat_main = !chstat_main;
 80065b0:	4a43      	ldr	r2, [pc, #268]	; (80066c0 <keypad_sm+0x1be8>)
 80065b2:	7813      	ldrb	r3, [r2, #0]
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	7013      	strb	r3, [r2, #0]
 80065bc:	f7fe bab3 	b.w	8004b26 <keypad_sm+0x4e>
}
 80065c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_keypad('z');
 80065c4:	f7fb b92a 	b.w	800181c <update_keypad.constprop.0>
				kpenum = WAIT;
 80065c8:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80065ca:	4c39      	ldr	r4, [pc, #228]	; (80066b0 <keypad_sm+0x1bd8>)
				kpenum = WAIT;
 80065cc:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 80065ce:	f994 2000 	ldrsb.w	r2, [r4]
 80065d2:	2a03      	cmp	r2, #3
 80065d4:	f73e aaa7 	bgt.w	8004b26 <keypad_sm+0x4e>
 80065d8:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <keypad_sm+0x1bdc>)
 80065da:	4d37      	ldr	r5, [pc, #220]	; (80066b8 <keypad_sm+0x1be0>)
 80065dc:	3201      	adds	r2, #1
 80065de:	4688      	mov	r8, r1
			keypadarr[0] = num;
 80065e0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80065e4:	f893 e004 	ldrb.w	lr, [r3, #4]
 80065e8:	f895 c000 	ldrb.w	ip, [r5]
 80065ec:	78df      	ldrb	r7, [r3, #3]
 80065ee:	789e      	ldrb	r6, [r3, #2]
 80065f0:	7858      	ldrb	r0, [r3, #1]
 80065f2:	7819      	ldrb	r1, [r3, #0]
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	e003      	b.n	8006600 <keypad_sm+0x1b28>
	while(keypaditerator < 4){
 80065f8:	4637      	mov	r7, r6
 80065fa:	4606      	mov	r6, r0
 80065fc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80065fe:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006600:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006602:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006606:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006608:	bf04      	itt	eq
 800660a:	f04f 0c00 	moveq.w	ip, #0
 800660e:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006612:	2a05      	cmp	r2, #5
 8006614:	46be      	mov	lr, r7
 8006616:	d1ef      	bne.n	80065f8 <keypad_sm+0x1b20>
 8006618:	711f      	strb	r7, [r3, #4]
 800661a:	70de      	strb	r6, [r3, #3]
 800661c:	7098      	strb	r0, [r3, #2]
 800661e:	7059      	strb	r1, [r3, #1]
 8006620:	f883 9000 	strb.w	r9, [r3]
 8006624:	2304      	movs	r3, #4
 8006626:	7023      	strb	r3, [r4, #0]
 8006628:	f1b8 0f00 	cmp.w	r8, #0
 800662c:	f43e aa7b 	beq.w	8004b26 <keypad_sm+0x4e>
 8006630:	f885 c000 	strb.w	ip, [r5]
 8006634:	f7fe ba77 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006638:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800663a:	4c1d      	ldr	r4, [pc, #116]	; (80066b0 <keypad_sm+0x1bd8>)
				kpenum = WAIT;
 800663c:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 800663e:	f994 2000 	ldrsb.w	r2, [r4]
 8006642:	2a03      	cmp	r2, #3
 8006644:	f73e aa6f 	bgt.w	8004b26 <keypad_sm+0x4e>
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <keypad_sm+0x1bdc>)
 800664a:	4d1b      	ldr	r5, [pc, #108]	; (80066b8 <keypad_sm+0x1be0>)
 800664c:	3201      	adds	r2, #1
 800664e:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006650:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006654:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006658:	f895 c000 	ldrb.w	ip, [r5]
 800665c:	78df      	ldrb	r7, [r3, #3]
 800665e:	789e      	ldrb	r6, [r3, #2]
 8006660:	7858      	ldrb	r0, [r3, #1]
 8006662:	7819      	ldrb	r1, [r3, #0]
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	e003      	b.n	8006670 <keypad_sm+0x1b98>
	while(keypaditerator < 4){
 8006668:	4637      	mov	r7, r6
 800666a:	4606      	mov	r6, r0
 800666c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800666e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006670:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006672:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006676:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006678:	bf04      	itt	eq
 800667a:	f04f 0c00 	moveq.w	ip, #0
 800667e:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006682:	2a05      	cmp	r2, #5
 8006684:	46be      	mov	lr, r7
 8006686:	d1ef      	bne.n	8006668 <keypad_sm+0x1b90>
 8006688:	711f      	strb	r7, [r3, #4]
 800668a:	70de      	strb	r6, [r3, #3]
 800668c:	7098      	strb	r0, [r3, #2]
 800668e:	7059      	strb	r1, [r3, #1]
 8006690:	f883 9000 	strb.w	r9, [r3]
 8006694:	2304      	movs	r3, #4
 8006696:	7023      	strb	r3, [r4, #0]
 8006698:	f1b8 0f00 	cmp.w	r8, #0
 800669c:	f43e aa43 	beq.w	8004b26 <keypad_sm+0x4e>
 80066a0:	f885 c000 	strb.w	ip, [r5]
 80066a4:	f7fe ba3f 	b.w	8004b26 <keypad_sm+0x4e>
 80066a8:	50b0f27c 	.word	0x50b0f27c
 80066ac:	3fe99a6b 	.word	0x3fe99a6b
 80066b0:	2000000d 	.word	0x2000000d
 80066b4:	20000008 	.word	0x20000008
 80066b8:	20000748 	.word	0x20000748
 80066bc:	200003dc 	.word	0x200003dc
 80066c0:	200003e7 	.word	0x200003e7
	float temp = translate_keypad();
 80066c4:	f7fd fd42 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80066c8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80066ca:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80066cc:	f7fa fd24 	bl	8001118 <__aeabi_fcmpge>
 80066d0:	b130      	cbz	r0, 80066e0 <keypad_sm+0x1c08>
 80066d2:	4620      	mov	r0, r4
 80066d4:	49b7      	ldr	r1, [pc, #732]	; (80069b4 <keypad_sm+0x1edc>)
 80066d6:	f7fa fd15 	bl	8001104 <__aeabi_fcmple>
 80066da:	b108      	cbz	r0, 80066e0 <keypad_sm+0x1c08>
					volt_set_aux = translate_keypad();
 80066dc:	4bb6      	ldr	r3, [pc, #728]	; (80069b8 <keypad_sm+0x1ee0>)
 80066de:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 80066e0:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80066e2:	4cb6      	ldr	r4, [pc, #728]	; (80069bc <keypad_sm+0x1ee4>)
				kpenum = WAIT;
 80066e4:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 80066e6:	f994 2000 	ldrsb.w	r2, [r4]
 80066ea:	2a03      	cmp	r2, #3
 80066ec:	f73e ad2b 	bgt.w	8005146 <keypad_sm+0x66e>
 80066f0:	4bb3      	ldr	r3, [pc, #716]	; (80069c0 <keypad_sm+0x1ee8>)
 80066f2:	4db4      	ldr	r5, [pc, #720]	; (80069c4 <keypad_sm+0x1eec>)
 80066f4:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80066f6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80066fa:	f893 9004 	ldrb.w	r9, [r3, #4]
 80066fe:	f895 8000 	ldrb.w	r8, [r5]
 8006702:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006706:	f893 c002 	ldrb.w	ip, [r3, #2]
 800670a:	785f      	ldrb	r7, [r3, #1]
 800670c:	7818      	ldrb	r0, [r3, #0]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	e003      	b.n	800671a <keypad_sm+0x1c42>
	while(keypaditerator < 4){
 8006712:	46e6      	mov	lr, ip
 8006714:	46bc      	mov	ip, r7
 8006716:	4607      	mov	r7, r0
			keypadarr[0] = num;
 8006718:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800671a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800671c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006720:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006722:	bf04      	itt	eq
 8006724:	2101      	moveq	r1, #1
 8006726:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800672a:	2a05      	cmp	r2, #5
 800672c:	46f1      	mov	r9, lr
 800672e:	d1f0      	bne.n	8006712 <keypad_sm+0x1c3a>
 8006730:	f883 e004 	strb.w	lr, [r3, #4]
 8006734:	f883 c003 	strb.w	ip, [r3, #3]
 8006738:	709f      	strb	r7, [r3, #2]
 800673a:	7058      	strb	r0, [r3, #1]
 800673c:	f883 a000 	strb.w	sl, [r3]
 8006740:	2304      	movs	r3, #4
 8006742:	7023      	strb	r3, [r4, #0]
 8006744:	2900      	cmp	r1, #0
 8006746:	f43e acfe 	beq.w	8005146 <keypad_sm+0x66e>
 800674a:	f885 8000 	strb.w	r8, [r5]
 800674e:	f7fe bcfa 	b.w	8005146 <keypad_sm+0x66e>
		if(keypaditerator < keypadlength-1){
 8006752:	4c9a      	ldr	r4, [pc, #616]	; (80069bc <keypad_sm+0x1ee4>)
 8006754:	f994 2000 	ldrsb.w	r2, [r4]
 8006758:	2a03      	cmp	r2, #3
 800675a:	f73e a9e4 	bgt.w	8004b26 <keypad_sm+0x4e>
			if(keypadarr[4] == '.'){
 800675e:	4b98      	ldr	r3, [pc, #608]	; (80069c0 <keypad_sm+0x1ee8>)
 8006760:	7919      	ldrb	r1, [r3, #4]
 8006762:	292e      	cmp	r1, #46	; 0x2e
 8006764:	d102      	bne.n	800676c <keypad_sm+0x1c94>
				keypaddecimal = 0;
 8006766:	2000      	movs	r0, #0
 8006768:	4996      	ldr	r1, [pc, #600]	; (80069c4 <keypad_sm+0x1eec>)
 800676a:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 800676c:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800676e:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 8006770:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 8006772:	7118      	strb	r0, [r3, #4]
 8006774:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 8006776:	7022      	strb	r2, [r4, #0]
				keypadarr[i+1] = keypadarr[i];
 8006778:	70d8      	strb	r0, [r3, #3]
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 800677e:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 8006780:	7098      	strb	r0, [r3, #2]
 8006782:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 8006784:	f7fe b9cf 	b.w	8004b26 <keypad_sm+0x4e>
	while(keypaditerator < 4){
 8006788:	4c8c      	ldr	r4, [pc, #560]	; (80069bc <keypad_sm+0x1ee4>)
 800678a:	f994 2000 	ldrsb.w	r2, [r4]
 800678e:	2a03      	cmp	r2, #3
 8006790:	f73e acd9 	bgt.w	8005146 <keypad_sm+0x66e>
 8006794:	4b8a      	ldr	r3, [pc, #552]	; (80069c0 <keypad_sm+0x1ee8>)
 8006796:	4d8b      	ldr	r5, [pc, #556]	; (80069c4 <keypad_sm+0x1eec>)
 8006798:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800679c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80067a0:	f893 9004 	ldrb.w	r9, [r3, #4]
 80067a4:	f895 e000 	ldrb.w	lr, [r5]
 80067a8:	f893 c003 	ldrb.w	ip, [r3, #3]
 80067ac:	789f      	ldrb	r7, [r3, #2]
 80067ae:	7858      	ldrb	r0, [r3, #1]
 80067b0:	7819      	ldrb	r1, [r3, #0]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	e003      	b.n	80067be <keypad_sm+0x1ce6>
	while(keypaditerator < 4){
 80067b6:	46bc      	mov	ip, r7
 80067b8:	4607      	mov	r7, r0
 80067ba:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80067bc:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80067be:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80067c0:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80067c4:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80067c6:	bf04      	itt	eq
 80067c8:	f04f 0801 	moveq.w	r8, #1
 80067cc:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80067d0:	2a04      	cmp	r2, #4
 80067d2:	46e1      	mov	r9, ip
 80067d4:	d1ef      	bne.n	80067b6 <keypad_sm+0x1cde>
 80067d6:	7022      	strb	r2, [r4, #0]
 80067d8:	f883 c004 	strb.w	ip, [r3, #4]
 80067dc:	70df      	strb	r7, [r3, #3]
 80067de:	7098      	strb	r0, [r3, #2]
 80067e0:	7059      	strb	r1, [r3, #1]
 80067e2:	f883 a000 	strb.w	sl, [r3]
 80067e6:	f1b8 0f00 	cmp.w	r8, #0
 80067ea:	f43e acac 	beq.w	8005146 <keypad_sm+0x66e>
 80067ee:	f885 e000 	strb.w	lr, [r5]
 80067f2:	f7fe bca8 	b.w	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 80067f6:	f7fd fca9 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80067fa:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80067fc:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80067fe:	f7fa fc8b 	bl	8001118 <__aeabi_fcmpge>
 8006802:	b158      	cbz	r0, 800681c <keypad_sm+0x1d44>
 8006804:	4620      	mov	r0, r4
 8006806:	496b      	ldr	r1, [pc, #428]	; (80069b4 <keypad_sm+0x1edc>)
 8006808:	f7fa fc7c 	bl	8001104 <__aeabi_fcmple>
 800680c:	b130      	cbz	r0, 800681c <keypad_sm+0x1d44>
					volt_set_main_old = volt_set_main;
 800680e:	4c6e      	ldr	r4, [pc, #440]	; (80069c8 <keypad_sm+0x1ef0>)
 8006810:	4b6e      	ldr	r3, [pc, #440]	; (80069cc <keypad_sm+0x1ef4>)
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006816:	f7fd fc99 	bl	800414c <translate_keypad>
 800681a:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 800681c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800681e:	4c67      	ldr	r4, [pc, #412]	; (80069bc <keypad_sm+0x1ee4>)
				kpenum = WAIT;
 8006820:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006822:	f994 2000 	ldrsb.w	r2, [r4]
 8006826:	2a03      	cmp	r2, #3
 8006828:	f73e a97d 	bgt.w	8004b26 <keypad_sm+0x4e>
 800682c:	4b64      	ldr	r3, [pc, #400]	; (80069c0 <keypad_sm+0x1ee8>)
 800682e:	4d65      	ldr	r5, [pc, #404]	; (80069c4 <keypad_sm+0x1eec>)
 8006830:	3201      	adds	r2, #1
 8006832:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006834:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006838:	f893 e004 	ldrb.w	lr, [r3, #4]
 800683c:	f895 c000 	ldrb.w	ip, [r5]
 8006840:	78df      	ldrb	r7, [r3, #3]
 8006842:	789e      	ldrb	r6, [r3, #2]
 8006844:	7858      	ldrb	r0, [r3, #1]
 8006846:	7819      	ldrb	r1, [r3, #0]
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	e003      	b.n	8006854 <keypad_sm+0x1d7c>
	while(keypaditerator < 4){
 800684c:	4637      	mov	r7, r6
 800684e:	4606      	mov	r6, r0
 8006850:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006852:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006854:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006856:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 800685a:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 800685c:	bf04      	itt	eq
 800685e:	f04f 0c00 	moveq.w	ip, #0
 8006862:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006866:	2a05      	cmp	r2, #5
 8006868:	46be      	mov	lr, r7
 800686a:	d1ef      	bne.n	800684c <keypad_sm+0x1d74>
 800686c:	711f      	strb	r7, [r3, #4]
 800686e:	70de      	strb	r6, [r3, #3]
 8006870:	7098      	strb	r0, [r3, #2]
 8006872:	7059      	strb	r1, [r3, #1]
 8006874:	f883 9000 	strb.w	r9, [r3]
 8006878:	2304      	movs	r3, #4
 800687a:	7023      	strb	r3, [r4, #0]
 800687c:	f1b8 0f00 	cmp.w	r8, #0
 8006880:	f43e a951 	beq.w	8004b26 <keypad_sm+0x4e>
 8006884:	f885 c000 	strb.w	ip, [r5]
 8006888:	f7fe b94d 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 800688c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800688e:	4c4b      	ldr	r4, [pc, #300]	; (80069bc <keypad_sm+0x1ee4>)
				kpenum = WAIT;
 8006890:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006892:	f994 2000 	ldrsb.w	r2, [r4]
 8006896:	2a03      	cmp	r2, #3
 8006898:	f73e a945 	bgt.w	8004b26 <keypad_sm+0x4e>
 800689c:	4b48      	ldr	r3, [pc, #288]	; (80069c0 <keypad_sm+0x1ee8>)
 800689e:	4d49      	ldr	r5, [pc, #292]	; (80069c4 <keypad_sm+0x1eec>)
			keypadarr[0] = num;
 80068a0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80068a4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80068a8:	7828      	ldrb	r0, [r5, #0]
 80068aa:	f893 e003 	ldrb.w	lr, [r3, #3]
 80068ae:	f893 c002 	ldrb.w	ip, [r3, #2]
 80068b2:	785f      	ldrb	r7, [r3, #1]
 80068b4:	781e      	ldrb	r6, [r3, #0]
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	e003      	b.n	80068c2 <keypad_sm+0x1dea>
	while(keypaditerator < 4){
 80068ba:	46e6      	mov	lr, ip
 80068bc:	46bc      	mov	ip, r7
 80068be:	4637      	mov	r7, r6
			keypadarr[0] = num;
 80068c0:	267a      	movs	r6, #122	; 0x7a
	while(keypaditerator < 4){
 80068c2:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80068c4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80068c8:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80068ca:	bf04      	itt	eq
 80068cc:	2000      	moveq	r0, #0
 80068ce:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 80068d0:	2a04      	cmp	r2, #4
 80068d2:	46f0      	mov	r8, lr
 80068d4:	d1f1      	bne.n	80068ba <keypad_sm+0x1de2>
 80068d6:	7022      	strb	r2, [r4, #0]
 80068d8:	f883 e004 	strb.w	lr, [r3, #4]
 80068dc:	f883 c003 	strb.w	ip, [r3, #3]
 80068e0:	709f      	strb	r7, [r3, #2]
 80068e2:	705e      	strb	r6, [r3, #1]
 80068e4:	f883 9000 	strb.w	r9, [r3]
 80068e8:	2900      	cmp	r1, #0
 80068ea:	f43e a91c 	beq.w	8004b26 <keypad_sm+0x4e>
 80068ee:	7028      	strb	r0, [r5, #0]
 80068f0:	f7fe b919 	b.w	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 80068f4:	f7fd fc2a 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80068f8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80068fa:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80068fc:	f7fa fc0c 	bl	8001118 <__aeabi_fcmpge>
 8006900:	b130      	cbz	r0, 8006910 <keypad_sm+0x1e38>
 8006902:	4620      	mov	r0, r4
 8006904:	492b      	ldr	r1, [pc, #172]	; (80069b4 <keypad_sm+0x1edc>)
 8006906:	f7fa fbfd 	bl	8001104 <__aeabi_fcmple>
 800690a:	b108      	cbz	r0, 8006910 <keypad_sm+0x1e38>
					amp_set_aux = translate_keypad();
 800690c:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <keypad_sm+0x1ef8>)
 800690e:	601c      	str	r4, [r3, #0]
				kpenum = WAIT;
 8006910:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006912:	4c2a      	ldr	r4, [pc, #168]	; (80069bc <keypad_sm+0x1ee4>)
				kpenum = WAIT;
 8006914:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006916:	f994 2000 	ldrsb.w	r2, [r4]
 800691a:	2a03      	cmp	r2, #3
 800691c:	f73e ac13 	bgt.w	8005146 <keypad_sm+0x66e>
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <keypad_sm+0x1ee8>)
 8006922:	4d28      	ldr	r5, [pc, #160]	; (80069c4 <keypad_sm+0x1eec>)
 8006924:	3201      	adds	r2, #1
 8006926:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006928:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800692c:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006930:	f895 9000 	ldrb.w	r9, [r5]
 8006934:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006938:	789f      	ldrb	r7, [r3, #2]
 800693a:	7858      	ldrb	r0, [r3, #1]
 800693c:	7819      	ldrb	r1, [r3, #0]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	e003      	b.n	800694a <keypad_sm+0x1e72>
	while(keypaditerator < 4){
 8006942:	46bc      	mov	ip, r7
 8006944:	4607      	mov	r7, r0
 8006946:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006948:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800694a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800694c:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006950:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006952:	bf04      	itt	eq
 8006954:	f04f 0801 	moveq.w	r8, #1
 8006958:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 800695c:	2a05      	cmp	r2, #5
 800695e:	46e6      	mov	lr, ip
 8006960:	d1ef      	bne.n	8006942 <keypad_sm+0x1e6a>
 8006962:	f883 c004 	strb.w	ip, [r3, #4]
 8006966:	70df      	strb	r7, [r3, #3]
 8006968:	7098      	strb	r0, [r3, #2]
 800696a:	7059      	strb	r1, [r3, #1]
 800696c:	f883 a000 	strb.w	sl, [r3]
 8006970:	2304      	movs	r3, #4
 8006972:	7023      	strb	r3, [r4, #0]
 8006974:	f1b8 0f00 	cmp.w	r8, #0
 8006978:	f43e abe5 	beq.w	8005146 <keypad_sm+0x66e>
 800697c:	f885 9000 	strb.w	r9, [r5]
 8006980:	f7fe bbe1 	b.w	8005146 <keypad_sm+0x66e>
 8006984:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <keypad_sm+0x1ee4>)
 8006986:	f994 2000 	ldrsb.w	r2, [r4]
 800698a:	2a03      	cmp	r2, #3
 800698c:	f73e abdb 	bgt.w	8005146 <keypad_sm+0x66e>
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <keypad_sm+0x1ee8>)
 8006992:	4d0c      	ldr	r5, [pc, #48]	; (80069c4 <keypad_sm+0x1eec>)
 8006994:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8006996:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800699a:	f893 9004 	ldrb.w	r9, [r3, #4]
 800699e:	7829      	ldrb	r1, [r5, #0]
 80069a0:	f893 8003 	ldrb.w	r8, [r3, #3]
 80069a4:	f893 e002 	ldrb.w	lr, [r3, #2]
 80069a8:	f893 c001 	ldrb.w	ip, [r3, #1]
 80069ac:	781f      	ldrb	r7, [r3, #0]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	e014      	b.n	80069dc <keypad_sm+0x1f04>
 80069b2:	bf00      	nop
 80069b4:	41400000 	.word	0x41400000
 80069b8:	20000a6c 	.word	0x20000a6c
 80069bc:	2000000d 	.word	0x2000000d
 80069c0:	20000008 	.word	0x20000008
 80069c4:	20000748 	.word	0x20000748
 80069c8:	20000a70 	.word	0x20000a70
 80069cc:	20000a74 	.word	0x20000a74
 80069d0:	200003dc 	.word	0x200003dc
	while(keypaditerator < 4){
 80069d4:	46f0      	mov	r8, lr
 80069d6:	46e6      	mov	lr, ip
 80069d8:	46bc      	mov	ip, r7
			keypadarr[0] = num;
 80069da:	277a      	movs	r7, #122	; 0x7a
	while(keypaditerator < 4){
 80069dc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80069de:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80069e2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80069e4:	bf04      	itt	eq
 80069e6:	2001      	moveq	r0, #1
 80069e8:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 80069ea:	2a04      	cmp	r2, #4
 80069ec:	46c1      	mov	r9, r8
 80069ee:	d1f1      	bne.n	80069d4 <keypad_sm+0x1efc>
 80069f0:	7022      	strb	r2, [r4, #0]
 80069f2:	f883 8004 	strb.w	r8, [r3, #4]
 80069f6:	f883 e003 	strb.w	lr, [r3, #3]
 80069fa:	f883 c002 	strb.w	ip, [r3, #2]
 80069fe:	705f      	strb	r7, [r3, #1]
 8006a00:	f883 a000 	strb.w	sl, [r3]
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f43e ab9e 	beq.w	8005146 <keypad_sm+0x66e>
 8006a0a:	7029      	strb	r1, [r5, #0]
 8006a0c:	f7fe bb9b 	b.w	8005146 <keypad_sm+0x66e>
				if(encpos == 1){
 8006a10:	4bb7      	ldr	r3, [pc, #732]	; (8006cf0 <keypad_sm+0x2218>)
 8006a12:	f993 2000 	ldrsb.w	r2, [r3]
 8006a16:	2a01      	cmp	r2, #1
 8006a18:	f000 827d 	beq.w	8006f16 <keypad_sm+0x243e>
				else if(encpos < 4){
 8006a1c:	2a03      	cmp	r2, #3
 8006a1e:	f300 8276 	bgt.w	8006f0e <keypad_sm+0x2436>
					encpos++;
 8006a22:	3201      	adds	r2, #1
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	f7fe b87e 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006a2a:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006a2c:	4cb1      	ldr	r4, [pc, #708]	; (8006cf4 <keypad_sm+0x221c>)
				kpenum = WAIT;
 8006a2e:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006a30:	f994 2000 	ldrsb.w	r2, [r4]
 8006a34:	2a03      	cmp	r2, #3
 8006a36:	f73e ab86 	bgt.w	8005146 <keypad_sm+0x66e>
 8006a3a:	4baf      	ldr	r3, [pc, #700]	; (8006cf8 <keypad_sm+0x2220>)
 8006a3c:	4daf      	ldr	r5, [pc, #700]	; (8006cfc <keypad_sm+0x2224>)
			keypadarr[0] = num;
 8006a3e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006a42:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006a46:	7828      	ldrb	r0, [r5, #0]
 8006a48:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006a4c:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006a50:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006a54:	781f      	ldrb	r7, [r3, #0]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	e003      	b.n	8006a62 <keypad_sm+0x1f8a>
	while(keypaditerator < 4){
 8006a5a:	46f0      	mov	r8, lr
 8006a5c:	46e6      	mov	lr, ip
 8006a5e:	46bc      	mov	ip, r7
			keypadarr[0] = num;
 8006a60:	277a      	movs	r7, #122	; 0x7a
	while(keypaditerator < 4){
 8006a62:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006a64:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006a68:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006a6a:	bf04      	itt	eq
 8006a6c:	2101      	moveq	r1, #1
 8006a6e:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 8006a70:	2a04      	cmp	r2, #4
 8006a72:	46c1      	mov	r9, r8
 8006a74:	d1f1      	bne.n	8006a5a <keypad_sm+0x1f82>
 8006a76:	7022      	strb	r2, [r4, #0]
 8006a78:	f883 8004 	strb.w	r8, [r3, #4]
 8006a7c:	f883 e003 	strb.w	lr, [r3, #3]
 8006a80:	f883 c002 	strb.w	ip, [r3, #2]
 8006a84:	705f      	strb	r7, [r3, #1]
 8006a86:	f883 a000 	strb.w	sl, [r3]
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	f43e ab5b 	beq.w	8005146 <keypad_sm+0x66e>
 8006a90:	7028      	strb	r0, [r5, #0]
 8006a92:	f7fe bb58 	b.w	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 8006a96:	f7fd fb59 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006a9a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006a9c:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006a9e:	f7fa fb3b 	bl	8001118 <__aeabi_fcmpge>
 8006aa2:	b190      	cbz	r0, 8006aca <keypad_sm+0x1ff2>
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f7f9 fcd7 	bl	8000458 <__aeabi_f2d>
 8006aaa:	a38f      	add	r3, pc, #572	; (adr r3, 8006ce8 <keypad_sm+0x2210>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 ffa6 	bl	8000a00 <__aeabi_dcmple>
 8006ab4:	b148      	cbz	r0, 8006aca <keypad_sm+0x1ff2>
					amp_set_main_old = amp_set_main;
 8006ab6:	4c92      	ldr	r4, [pc, #584]	; (8006d00 <keypad_sm+0x2228>)
 8006ab8:	4b92      	ldr	r3, [pc, #584]	; (8006d04 <keypad_sm+0x222c>)
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006abe:	f7fd fb45 	bl	800414c <translate_keypad>
 8006ac2:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	f7fa ff57 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006aca:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006acc:	4c89      	ldr	r4, [pc, #548]	; (8006cf4 <keypad_sm+0x221c>)
				kpenum = WAIT;
 8006ace:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006ad0:	f994 2000 	ldrsb.w	r2, [r4]
 8006ad4:	2a03      	cmp	r2, #3
 8006ad6:	f73e a826 	bgt.w	8004b26 <keypad_sm+0x4e>
 8006ada:	4b87      	ldr	r3, [pc, #540]	; (8006cf8 <keypad_sm+0x2220>)
 8006adc:	4d87      	ldr	r5, [pc, #540]	; (8006cfc <keypad_sm+0x2224>)
			keypadarr[0] = num;
 8006ade:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006ae2:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006ae6:	7828      	ldrb	r0, [r5, #0]
 8006ae8:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006aec:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006af0:	785f      	ldrb	r7, [r3, #1]
 8006af2:	781e      	ldrb	r6, [r3, #0]
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	e003      	b.n	8006b00 <keypad_sm+0x2028>
	while(keypaditerator < 4){
 8006af8:	46e6      	mov	lr, ip
 8006afa:	46bc      	mov	ip, r7
 8006afc:	4637      	mov	r7, r6
			keypadarr[0] = num;
 8006afe:	267a      	movs	r6, #122	; 0x7a
	while(keypaditerator < 4){
 8006b00:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006b02:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006b06:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006b08:	bf04      	itt	eq
 8006b0a:	2000      	moveq	r0, #0
 8006b0c:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006b0e:	2a04      	cmp	r2, #4
 8006b10:	46f0      	mov	r8, lr
 8006b12:	d1f1      	bne.n	8006af8 <keypad_sm+0x2020>
 8006b14:	7022      	strb	r2, [r4, #0]
 8006b16:	f883 e004 	strb.w	lr, [r3, #4]
 8006b1a:	f883 c003 	strb.w	ip, [r3, #3]
 8006b1e:	709f      	strb	r7, [r3, #2]
 8006b20:	705e      	strb	r6, [r3, #1]
 8006b22:	f883 9000 	strb.w	r9, [r3]
 8006b26:	2900      	cmp	r1, #0
 8006b28:	f43d affd 	beq.w	8004b26 <keypad_sm+0x4e>
 8006b2c:	7028      	strb	r0, [r5, #0]
 8006b2e:	f7fd bffa 	b.w	8004b26 <keypad_sm+0x4e>
				fill_keypad(0, volt_set_aux);
 8006b32:	4b75      	ldr	r3, [pc, #468]	; (8006d08 <keypad_sm+0x2230>)
 8006b34:	2000      	movs	r0, #0
 8006b36:	6819      	ldr	r1, [r3, #0]
 8006b38:	f7fd fc82 	bl	8004440 <fill_keypad>
				encmode = 1;
 8006b3c:	2101      	movs	r1, #1
				encpos = 0;
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4b6b      	ldr	r3, [pc, #428]	; (8006cf0 <keypad_sm+0x2218>)
				encmode = 1;
 8006b42:	7031      	strb	r1, [r6, #0]
				encpos = 0;
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	f7fd bfee 	b.w	8004b26 <keypad_sm+0x4e>
	float temp = translate_keypad();
 8006b4a:	f7fd faff 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b4e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006b50:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b52:	f7fa fae1 	bl	8001118 <__aeabi_fcmpge>
 8006b56:	b158      	cbz	r0, 8006b70 <keypad_sm+0x2098>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	496c      	ldr	r1, [pc, #432]	; (8006d0c <keypad_sm+0x2234>)
 8006b5c:	f7fa fad2 	bl	8001104 <__aeabi_fcmple>
 8006b60:	b130      	cbz	r0, 8006b70 <keypad_sm+0x2098>
					volt_set_main_old = volt_set_main;
 8006b62:	4c6b      	ldr	r4, [pc, #428]	; (8006d10 <keypad_sm+0x2238>)
 8006b64:	4b6b      	ldr	r3, [pc, #428]	; (8006d14 <keypad_sm+0x223c>)
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006b6a:	f7fd faef 	bl	800414c <translate_keypad>
 8006b6e:	6020      	str	r0, [r4, #0]
				kpenum = WAIT;
 8006b70:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006b72:	4c60      	ldr	r4, [pc, #384]	; (8006cf4 <keypad_sm+0x221c>)
				kpenum = WAIT;
 8006b74:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006b76:	f994 2000 	ldrsb.w	r2, [r4]
 8006b7a:	2a03      	cmp	r2, #3
 8006b7c:	f73e aae3 	bgt.w	8005146 <keypad_sm+0x66e>
 8006b80:	4b5d      	ldr	r3, [pc, #372]	; (8006cf8 <keypad_sm+0x2220>)
 8006b82:	4d5e      	ldr	r5, [pc, #376]	; (8006cfc <keypad_sm+0x2224>)
 8006b84:	3201      	adds	r2, #1
 8006b86:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006b88:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006b8c:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006b90:	f895 9000 	ldrb.w	r9, [r5]
 8006b94:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006b98:	789f      	ldrb	r7, [r3, #2]
 8006b9a:	7858      	ldrb	r0, [r3, #1]
 8006b9c:	7819      	ldrb	r1, [r3, #0]
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	e003      	b.n	8006baa <keypad_sm+0x20d2>
	while(keypaditerator < 4){
 8006ba2:	46bc      	mov	ip, r7
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006ba8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006baa:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006bac:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006bb0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006bb2:	bf04      	itt	eq
 8006bb4:	f04f 0801 	moveq.w	r8, #1
 8006bb8:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006bbc:	2a05      	cmp	r2, #5
 8006bbe:	46e6      	mov	lr, ip
 8006bc0:	d1ef      	bne.n	8006ba2 <keypad_sm+0x20ca>
 8006bc2:	f883 c004 	strb.w	ip, [r3, #4]
 8006bc6:	70df      	strb	r7, [r3, #3]
 8006bc8:	7098      	strb	r0, [r3, #2]
 8006bca:	7059      	strb	r1, [r3, #1]
 8006bcc:	f883 a000 	strb.w	sl, [r3]
 8006bd0:	2304      	movs	r3, #4
 8006bd2:	7023      	strb	r3, [r4, #0]
 8006bd4:	f1b8 0f00 	cmp.w	r8, #0
 8006bd8:	f43e aab5 	beq.w	8005146 <keypad_sm+0x66e>
 8006bdc:	f885 9000 	strb.w	r9, [r5]
 8006be0:	f7fe bab1 	b.w	8005146 <keypad_sm+0x66e>
 8006be4:	4c43      	ldr	r4, [pc, #268]	; (8006cf4 <keypad_sm+0x221c>)
 8006be6:	f994 2000 	ldrsb.w	r2, [r4]
 8006bea:	2a03      	cmp	r2, #3
 8006bec:	f73e aaab 	bgt.w	8005146 <keypad_sm+0x66e>
 8006bf0:	4b41      	ldr	r3, [pc, #260]	; (8006cf8 <keypad_sm+0x2220>)
 8006bf2:	4d42      	ldr	r5, [pc, #264]	; (8006cfc <keypad_sm+0x2224>)
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006bfa:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006bfe:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006c02:	f895 e000 	ldrb.w	lr, [r5]
 8006c06:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006c0a:	789f      	ldrb	r7, [r3, #2]
 8006c0c:	7858      	ldrb	r0, [r3, #1]
 8006c0e:	7819      	ldrb	r1, [r3, #0]
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	e003      	b.n	8006c1c <keypad_sm+0x2144>
	while(keypaditerator < 4){
 8006c14:	46bc      	mov	ip, r7
 8006c16:	4607      	mov	r7, r0
 8006c18:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006c1a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006c1c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c1e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006c22:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c24:	bf04      	itt	eq
 8006c26:	f04f 0801 	moveq.w	r8, #1
 8006c2a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006c2e:	2a05      	cmp	r2, #5
 8006c30:	46e1      	mov	r9, ip
 8006c32:	d1ef      	bne.n	8006c14 <keypad_sm+0x213c>
 8006c34:	f883 c004 	strb.w	ip, [r3, #4]
 8006c38:	70df      	strb	r7, [r3, #3]
 8006c3a:	7098      	strb	r0, [r3, #2]
 8006c3c:	7059      	strb	r1, [r3, #1]
 8006c3e:	f883 a000 	strb.w	sl, [r3]
 8006c42:	2304      	movs	r3, #4
 8006c44:	7023      	strb	r3, [r4, #0]
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	f43e aa7c 	beq.w	8005146 <keypad_sm+0x66e>
 8006c4e:	f885 e000 	strb.w	lr, [r5]
 8006c52:	f7fe ba78 	b.w	8005146 <keypad_sm+0x66e>
				kpenum = WAIT;
 8006c56:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006c58:	4c26      	ldr	r4, [pc, #152]	; (8006cf4 <keypad_sm+0x221c>)
				kpenum = WAIT;
 8006c5a:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006c5c:	f994 2000 	ldrsb.w	r2, [r4]
 8006c60:	2a03      	cmp	r2, #3
 8006c62:	f73e aa70 	bgt.w	8005146 <keypad_sm+0x66e>
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <keypad_sm+0x2220>)
 8006c68:	4d24      	ldr	r5, [pc, #144]	; (8006cfc <keypad_sm+0x2224>)
 8006c6a:	3201      	adds	r2, #1
 8006c6c:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006c6e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006c72:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006c76:	f895 9000 	ldrb.w	r9, [r5]
 8006c7a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006c7e:	789f      	ldrb	r7, [r3, #2]
 8006c80:	7858      	ldrb	r0, [r3, #1]
 8006c82:	7819      	ldrb	r1, [r3, #0]
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	e003      	b.n	8006c90 <keypad_sm+0x21b8>
	while(keypaditerator < 4){
 8006c88:	46bc      	mov	ip, r7
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006c8e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006c90:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c92:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006c96:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c98:	bf04      	itt	eq
 8006c9a:	f04f 0801 	moveq.w	r8, #1
 8006c9e:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006ca2:	2a05      	cmp	r2, #5
 8006ca4:	46e6      	mov	lr, ip
 8006ca6:	d1ef      	bne.n	8006c88 <keypad_sm+0x21b0>
 8006ca8:	f883 c004 	strb.w	ip, [r3, #4]
 8006cac:	70df      	strb	r7, [r3, #3]
 8006cae:	7098      	strb	r0, [r3, #2]
 8006cb0:	7059      	strb	r1, [r3, #1]
 8006cb2:	f883 a000 	strb.w	sl, [r3]
 8006cb6:	2304      	movs	r3, #4
 8006cb8:	7023      	strb	r3, [r4, #0]
 8006cba:	f1b8 0f00 	cmp.w	r8, #0
 8006cbe:	f43e aa42 	beq.w	8005146 <keypad_sm+0x66e>
 8006cc2:	f885 9000 	strb.w	r9, [r5]
 8006cc6:	f7fe ba3e 	b.w	8005146 <keypad_sm+0x66e>
				if(encpos == 1){
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <keypad_sm+0x2218>)
 8006ccc:	f993 2000 	ldrsb.w	r2, [r3]
 8006cd0:	2a01      	cmp	r2, #1
 8006cd2:	f000 8120 	beq.w	8006f16 <keypad_sm+0x243e>
				else if(encpos < 4){
 8006cd6:	2a03      	cmp	r2, #3
 8006cd8:	f300 8119 	bgt.w	8006f0e <keypad_sm+0x2436>
					encpos++;
 8006cdc:	3201      	adds	r2, #1
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	f7fd bf21 	b.w	8004b26 <keypad_sm+0x4e>
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	50b0f27c 	.word	0x50b0f27c
 8006cec:	3fe99a6b 	.word	0x3fe99a6b
 8006cf0:	200003f1 	.word	0x200003f1
 8006cf4:	2000000d 	.word	0x2000000d
 8006cf8:	20000008 	.word	0x20000008
 8006cfc:	20000748 	.word	0x20000748
 8006d00:	200003e0 	.word	0x200003e0
 8006d04:	20000000 	.word	0x20000000
 8006d08:	20000a6c 	.word	0x20000a6c
 8006d0c:	41400000 	.word	0x41400000
 8006d10:	20000a70 	.word	0x20000a70
 8006d14:	20000a74 	.word	0x20000a74
				kpenum = WAIT;
 8006d18:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006d1a:	4cc2      	ldr	r4, [pc, #776]	; (8007024 <keypad_sm+0x254c>)
				kpenum = WAIT;
 8006d1c:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006d1e:	f994 2000 	ldrsb.w	r2, [r4]
 8006d22:	2a03      	cmp	r2, #3
 8006d24:	f73e aa0f 	bgt.w	8005146 <keypad_sm+0x66e>
 8006d28:	4bbf      	ldr	r3, [pc, #764]	; (8007028 <keypad_sm+0x2550>)
 8006d2a:	4dc0      	ldr	r5, [pc, #768]	; (800702c <keypad_sm+0x2554>)
 8006d2c:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006d2e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006d32:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006d36:	7829      	ldrb	r1, [r5, #0]
 8006d38:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006d3c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006d40:	785f      	ldrb	r7, [r3, #1]
 8006d42:	7818      	ldrb	r0, [r3, #0]
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	e003      	b.n	8006d50 <keypad_sm+0x2278>
	while(keypaditerator < 4){
 8006d48:	46e6      	mov	lr, ip
 8006d4a:	46bc      	mov	ip, r7
 8006d4c:	4607      	mov	r7, r0
			keypadarr[0] = num;
 8006d4e:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006d50:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006d52:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006d56:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006d58:	bf04      	itt	eq
 8006d5a:	f04f 0901 	moveq.w	r9, #1
 8006d5e:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006d60:	2a04      	cmp	r2, #4
 8006d62:	46f0      	mov	r8, lr
 8006d64:	d1f0      	bne.n	8006d48 <keypad_sm+0x2270>
 8006d66:	7022      	strb	r2, [r4, #0]
 8006d68:	f883 e004 	strb.w	lr, [r3, #4]
 8006d6c:	f883 c003 	strb.w	ip, [r3, #3]
 8006d70:	709f      	strb	r7, [r3, #2]
 8006d72:	7058      	strb	r0, [r3, #1]
 8006d74:	f883 a000 	strb.w	sl, [r3]
 8006d78:	f1b9 0f00 	cmp.w	r9, #0
 8006d7c:	f43e a9e3 	beq.w	8005146 <keypad_sm+0x66e>
 8006d80:	7029      	strb	r1, [r5, #0]
 8006d82:	f7fe b9e0 	b.w	8005146 <keypad_sm+0x66e>
	float temp = translate_keypad();
 8006d86:	f7fd f9e1 	bl	800414c <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006d8a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006d8c:	4604      	mov	r4, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006d8e:	f7fa f9c3 	bl	8001118 <__aeabi_fcmpge>
 8006d92:	b170      	cbz	r0, 8006db2 <keypad_sm+0x22da>
 8006d94:	4620      	mov	r0, r4
 8006d96:	49a6      	ldr	r1, [pc, #664]	; (8007030 <keypad_sm+0x2558>)
 8006d98:	f7fa f9b4 	bl	8001104 <__aeabi_fcmple>
 8006d9c:	b148      	cbz	r0, 8006db2 <keypad_sm+0x22da>
					amp_set_main_old = amp_set_main;
 8006d9e:	4ca5      	ldr	r4, [pc, #660]	; (8007034 <keypad_sm+0x255c>)
 8006da0:	4ba5      	ldr	r3, [pc, #660]	; (8007038 <keypad_sm+0x2560>)
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006da6:	f7fd f9d1 	bl	800414c <translate_keypad>
 8006daa:	6020      	str	r0, [r4, #0]
					update_ADC_watchdog(amp_set_main);
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	f7fa fde3 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006db2:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006db4:	4c9b      	ldr	r4, [pc, #620]	; (8007024 <keypad_sm+0x254c>)
				kpenum = WAIT;
 8006db6:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006db8:	f994 2000 	ldrsb.w	r2, [r4]
 8006dbc:	2a03      	cmp	r2, #3
 8006dbe:	f73e a9c2 	bgt.w	8005146 <keypad_sm+0x66e>
 8006dc2:	4b99      	ldr	r3, [pc, #612]	; (8007028 <keypad_sm+0x2550>)
 8006dc4:	4d99      	ldr	r5, [pc, #612]	; (800702c <keypad_sm+0x2554>)
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006dca:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006dce:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006dd2:	f895 9000 	ldrb.w	r9, [r5]
 8006dd6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006dda:	789f      	ldrb	r7, [r3, #2]
 8006ddc:	7858      	ldrb	r0, [r3, #1]
 8006dde:	7819      	ldrb	r1, [r3, #0]
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	e003      	b.n	8006dec <keypad_sm+0x2314>
	while(keypaditerator < 4){
 8006de4:	46bc      	mov	ip, r7
 8006de6:	4607      	mov	r7, r0
 8006de8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006dea:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006dec:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006dee:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006df2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006df4:	bf04      	itt	eq
 8006df6:	f04f 0801 	moveq.w	r8, #1
 8006dfa:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006dfe:	2a05      	cmp	r2, #5
 8006e00:	46e6      	mov	lr, ip
 8006e02:	d1ef      	bne.n	8006de4 <keypad_sm+0x230c>
 8006e04:	f883 c004 	strb.w	ip, [r3, #4]
 8006e08:	70df      	strb	r7, [r3, #3]
 8006e0a:	7098      	strb	r0, [r3, #2]
 8006e0c:	7059      	strb	r1, [r3, #1]
 8006e0e:	f883 a000 	strb.w	sl, [r3]
 8006e12:	2304      	movs	r3, #4
 8006e14:	7023      	strb	r3, [r4, #0]
 8006e16:	f1b8 0f00 	cmp.w	r8, #0
 8006e1a:	f43e a994 	beq.w	8005146 <keypad_sm+0x66e>
 8006e1e:	f885 9000 	strb.w	r9, [r5]
 8006e22:	f7fe b990 	b.w	8005146 <keypad_sm+0x66e>
				chstat_aux_tx = !chstat_aux_rx;
 8006e26:	4b85      	ldr	r3, [pc, #532]	; (800703c <keypad_sm+0x2564>)
 8006e28:	4a85      	ldr	r2, [pc, #532]	; (8007040 <keypad_sm+0x2568>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	fab3 f383 	clz	r3, r3
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	7013      	strb	r3, [r2, #0]
 8006e34:	f7fd be77 	b.w	8004b26 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_main);
 8006e38:	4b7e      	ldr	r3, [pc, #504]	; (8007034 <keypad_sm+0x255c>)
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	6819      	ldr	r1, [r3, #0]
 8006e3e:	f7fd faff 	bl	8004440 <fill_keypad>
				encmode = 1;
 8006e42:	2101      	movs	r1, #1
				encpos = 0;
 8006e44:	2200      	movs	r2, #0
 8006e46:	4b7f      	ldr	r3, [pc, #508]	; (8007044 <keypad_sm+0x256c>)
				encmode = 1;
 8006e48:	7031      	strb	r1, [r6, #0]
				encpos = 0;
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	f7fd be6b 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006e50:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006e52:	4c74      	ldr	r4, [pc, #464]	; (8007024 <keypad_sm+0x254c>)
				kpenum = WAIT;
 8006e54:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006e56:	f994 2000 	ldrsb.w	r2, [r4]
 8006e5a:	2a03      	cmp	r2, #3
 8006e5c:	f73d ae63 	bgt.w	8004b26 <keypad_sm+0x4e>
 8006e60:	4b71      	ldr	r3, [pc, #452]	; (8007028 <keypad_sm+0x2550>)
 8006e62:	4d72      	ldr	r5, [pc, #456]	; (800702c <keypad_sm+0x2554>)
 8006e64:	3201      	adds	r2, #1
 8006e66:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006e68:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006e6c:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006e70:	7829      	ldrb	r1, [r5, #0]
 8006e72:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006e76:	789f      	ldrb	r7, [r3, #2]
 8006e78:	785e      	ldrb	r6, [r3, #1]
 8006e7a:	7818      	ldrb	r0, [r3, #0]
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	e003      	b.n	8006e88 <keypad_sm+0x23b0>
	while(keypaditerator < 4){
 8006e80:	46bc      	mov	ip, r7
 8006e82:	4637      	mov	r7, r6
 8006e84:	4606      	mov	r6, r0
			keypadarr[0] = num;
 8006e86:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006e88:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006e8a:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006e8e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006e90:	bf04      	itt	eq
 8006e92:	2100      	moveq	r1, #0
 8006e94:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006e98:	2a05      	cmp	r2, #5
 8006e9a:	46e6      	mov	lr, ip
 8006e9c:	d1f0      	bne.n	8006e80 <keypad_sm+0x23a8>
 8006e9e:	f883 c004 	strb.w	ip, [r3, #4]
 8006ea2:	70df      	strb	r7, [r3, #3]
 8006ea4:	709e      	strb	r6, [r3, #2]
 8006ea6:	7058      	strb	r0, [r3, #1]
 8006ea8:	f883 9000 	strb.w	r9, [r3]
 8006eac:	2304      	movs	r3, #4
 8006eae:	7023      	strb	r3, [r4, #0]
 8006eb0:	f1b8 0f00 	cmp.w	r8, #0
 8006eb4:	f43d ae37 	beq.w	8004b26 <keypad_sm+0x4e>
 8006eb8:	7029      	strb	r1, [r5, #0]
 8006eba:	f7fd be34 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <keypad_sm+0x2564>)
 8006ec0:	4a5f      	ldr	r2, [pc, #380]	; (8007040 <keypad_sm+0x2568>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	fab3 f383 	clz	r3, r3
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	7013      	strb	r3, [r2, #0]
 8006ecc:	f7fd be2b 	b.w	8004b26 <keypad_sm+0x4e>
				fill_keypad(1, amp_set_aux);
 8006ed0:	4b5d      	ldr	r3, [pc, #372]	; (8007048 <keypad_sm+0x2570>)
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	6819      	ldr	r1, [r3, #0]
 8006ed6:	f7fd fab3 	bl	8004440 <fill_keypad>
				encmode = 1;
 8006eda:	2101      	movs	r1, #1
				encpos = 0;
 8006edc:	2200      	movs	r2, #0
 8006ede:	4b59      	ldr	r3, [pc, #356]	; (8007044 <keypad_sm+0x256c>)
				encmode = 1;
 8006ee0:	7031      	strb	r1, [r6, #0]
				encpos = 0;
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	f7fd be1f 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 8006ee8:	4b54      	ldr	r3, [pc, #336]	; (800703c <keypad_sm+0x2564>)
 8006eea:	4a55      	ldr	r2, [pc, #340]	; (8007040 <keypad_sm+0x2568>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	fab3 f383 	clz	r3, r3
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	7013      	strb	r3, [r2, #0]
 8006ef6:	f7fd be16 	b.w	8004b26 <keypad_sm+0x4e>
				if(encpos == 0){
 8006efa:	4b52      	ldr	r3, [pc, #328]	; (8007044 <keypad_sm+0x256c>)
 8006efc:	f993 2000 	ldrsb.w	r2, [r3]
 8006f00:	b16a      	cbz	r2, 8006f1e <keypad_sm+0x2446>
				else if(encpos < 4){
 8006f02:	2a03      	cmp	r2, #3
 8006f04:	dc03      	bgt.n	8006f0e <keypad_sm+0x2436>
					encpos++;
 8006f06:	3201      	adds	r2, #1
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	f7fd be0c 	b.w	8004b26 <keypad_sm+0x4e>
					encpos = 0;
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	f7fd be08 	b.w	8004b26 <keypad_sm+0x4e>
					encpos++;
 8006f16:	2203      	movs	r2, #3
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	f7fd be04 	b.w	8004b26 <keypad_sm+0x4e>
					encpos++;
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	f7fd be00 	b.w	8004b26 <keypad_sm+0x4e>
				dec_arr_v(encpos);
 8006f26:	4b47      	ldr	r3, [pc, #284]	; (8007044 <keypad_sm+0x256c>)
 8006f28:	f993 0000 	ldrsb.w	r0, [r3]
 8006f2c:	f7fd fcac 	bl	8004888 <dec_arr_v>
				volt_set_aux = translate_keypad();
 8006f30:	f7fd f90c 	bl	800414c <translate_keypad>
 8006f34:	4a45      	ldr	r2, [pc, #276]	; (800704c <keypad_sm+0x2574>)
 8006f36:	6010      	str	r0, [r2, #0]
 8006f38:	f7fd bdf5 	b.w	8004b26 <keypad_sm+0x4e>
				kpenum = WAIT;
 8006f3c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006f3e:	4c39      	ldr	r4, [pc, #228]	; (8007024 <keypad_sm+0x254c>)
				kpenum = WAIT;
 8006f40:	7029      	strb	r1, [r5, #0]
	while(keypaditerator < 4){
 8006f42:	f994 2000 	ldrsb.w	r2, [r4]
 8006f46:	2a03      	cmp	r2, #3
 8006f48:	f73e a8fd 	bgt.w	8005146 <keypad_sm+0x66e>
 8006f4c:	4b36      	ldr	r3, [pc, #216]	; (8007028 <keypad_sm+0x2550>)
 8006f4e:	4d37      	ldr	r5, [pc, #220]	; (800702c <keypad_sm+0x2554>)
 8006f50:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006f52:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006f56:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006f5a:	7829      	ldrb	r1, [r5, #0]
 8006f5c:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006f60:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006f64:	785f      	ldrb	r7, [r3, #1]
 8006f66:	7818      	ldrb	r0, [r3, #0]
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	e003      	b.n	8006f74 <keypad_sm+0x249c>
	while(keypaditerator < 4){
 8006f6c:	46e6      	mov	lr, ip
 8006f6e:	46bc      	mov	ip, r7
 8006f70:	4607      	mov	r7, r0
			keypadarr[0] = num;
 8006f72:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006f74:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006f76:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006f7a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006f7c:	bf04      	itt	eq
 8006f7e:	f04f 0901 	moveq.w	r9, #1
 8006f82:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006f84:	2a04      	cmp	r2, #4
 8006f86:	46f0      	mov	r8, lr
 8006f88:	d1f0      	bne.n	8006f6c <keypad_sm+0x2494>
 8006f8a:	7022      	strb	r2, [r4, #0]
 8006f8c:	f883 e004 	strb.w	lr, [r3, #4]
 8006f90:	f883 c003 	strb.w	ip, [r3, #3]
 8006f94:	709f      	strb	r7, [r3, #2]
 8006f96:	7058      	strb	r0, [r3, #1]
 8006f98:	f883 a000 	strb.w	sl, [r3]
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	f43e a8d1 	beq.w	8005146 <keypad_sm+0x66e>
 8006fa4:	7029      	strb	r1, [r5, #0]
 8006fa6:	f7fe b8ce 	b.w	8005146 <keypad_sm+0x66e>
				fill_keypad(0, volt_set_main);
 8006faa:	4b29      	ldr	r3, [pc, #164]	; (8007050 <keypad_sm+0x2578>)
 8006fac:	2000      	movs	r0, #0
 8006fae:	6819      	ldr	r1, [r3, #0]
 8006fb0:	f7fd fa46 	bl	8004440 <fill_keypad>
				encmode = 1;
 8006fb4:	2101      	movs	r1, #1
				encpos = 0;
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4b22      	ldr	r3, [pc, #136]	; (8007044 <keypad_sm+0x256c>)
				encmode = 1;
 8006fba:	7031      	strb	r1, [r6, #0]
				encpos = 0;
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	f7fd bdb2 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	; (800703c <keypad_sm+0x2564>)
 8006fc4:	4a1e      	ldr	r2, [pc, #120]	; (8007040 <keypad_sm+0x2568>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	fab3 f383 	clz	r3, r3
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	7013      	strb	r3, [r2, #0]
 8006fd0:	f7fd bda9 	b.w	8004b26 <keypad_sm+0x4e>
				inc_arr_v(encpos);
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <keypad_sm+0x256c>)
 8006fd6:	f993 0000 	ldrsb.w	r0, [r3]
 8006fda:	f7fd fb25 	bl	8004628 <inc_arr_v>
				volt_set_aux = translate_keypad();
 8006fde:	f7fd f8b5 	bl	800414c <translate_keypad>
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	; (800704c <keypad_sm+0x2574>)
 8006fe4:	6010      	str	r0, [r2, #0]
 8006fe6:	f7fd bd9e 	b.w	8004b26 <keypad_sm+0x4e>
				if(encpos == 0){
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <keypad_sm+0x256c>)
 8006fec:	f993 2000 	ldrsb.w	r2, [r3]
 8006ff0:	2a00      	cmp	r2, #0
 8006ff2:	d094      	beq.n	8006f1e <keypad_sm+0x2446>
				else if(encpos < 4){
 8006ff4:	2a03      	cmp	r2, #3
 8006ff6:	dc8a      	bgt.n	8006f0e <keypad_sm+0x2436>
					encpos++;
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	f7fd bd93 	b.w	8004b26 <keypad_sm+0x4e>
				inc_arr_a(encpos);
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <keypad_sm+0x256c>)
				amp_set_main_old = amp_set_main;
 8007002:	4c0c      	ldr	r4, [pc, #48]	; (8007034 <keypad_sm+0x255c>)
				inc_arr_a(encpos);
 8007004:	f993 0000 	ldrsb.w	r0, [r3]
 8007008:	f7fd fbb4 	bl	8004774 <inc_arr_a>
				amp_set_main_old = amp_set_main;
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <keypad_sm+0x2560>)
 8007010:	601a      	str	r2, [r3, #0]
				amp_set_main = translate_keypad();
 8007012:	f7fd f89b 	bl	800414c <translate_keypad>
 8007016:	6020      	str	r0, [r4, #0]
				update_ADC_watchdog(amp_set_main);
 8007018:	6820      	ldr	r0, [r4, #0]
}
 800701a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_ADC_watchdog(amp_set_main);
 800701e:	f7fa bcab 	b.w	8001978 <update_ADC_watchdog>
 8007022:	bf00      	nop
 8007024:	2000000d 	.word	0x2000000d
 8007028:	20000008 	.word	0x20000008
 800702c:	20000748 	.word	0x20000748
 8007030:	41400000 	.word	0x41400000
 8007034:	200003e0 	.word	0x200003e0
 8007038:	20000000 	.word	0x20000000
 800703c:	200003e5 	.word	0x200003e5
 8007040:	200003e6 	.word	0x200003e6
 8007044:	200003f1 	.word	0x200003f1
 8007048:	200003dc 	.word	0x200003dc
 800704c:	20000a6c 	.word	0x20000a6c
 8007050:	20000a70 	.word	0x20000a70
				dec_arr_a(encpos);
 8007054:	4b2e      	ldr	r3, [pc, #184]	; (8007110 <keypad_sm+0x2638>)
				amp_set_main_old = amp_set_main;
 8007056:	4c2f      	ldr	r4, [pc, #188]	; (8007114 <keypad_sm+0x263c>)
				dec_arr_a(encpos);
 8007058:	f993 0000 	ldrsb.w	r0, [r3]
 800705c:	f7fd fca8 	bl	80049b0 <dec_arr_a>
				amp_set_main_old = amp_set_main;
 8007060:	e7d4      	b.n	800700c <keypad_sm+0x2534>
				inc_arr_v(encpos);
 8007062:	4b2b      	ldr	r3, [pc, #172]	; (8007110 <keypad_sm+0x2638>)
				volt_set_main_old = volt_set_main;
 8007064:	4c2c      	ldr	r4, [pc, #176]	; (8007118 <keypad_sm+0x2640>)
				inc_arr_v(encpos);
 8007066:	f993 0000 	ldrsb.w	r0, [r3]
 800706a:	f7fd fadd 	bl	8004628 <inc_arr_v>
				volt_set_main_old = volt_set_main;
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	4b2a      	ldr	r3, [pc, #168]	; (800711c <keypad_sm+0x2644>)
 8007072:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 8007074:	f7fd f86a 	bl	800414c <translate_keypad>
 8007078:	6020      	str	r0, [r4, #0]
 800707a:	f7fd bd54 	b.w	8004b26 <keypad_sm+0x4e>
				dec_arr_v(encpos);
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <keypad_sm+0x2638>)
				volt_set_main_old = volt_set_main;
 8007080:	4c25      	ldr	r4, [pc, #148]	; (8007118 <keypad_sm+0x2640>)
				dec_arr_v(encpos);
 8007082:	f993 0000 	ldrsb.w	r0, [r3]
 8007086:	f7fd fbff 	bl	8004888 <dec_arr_v>
				volt_set_main_old = volt_set_main;
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	4b23      	ldr	r3, [pc, #140]	; (800711c <keypad_sm+0x2644>)
 800708e:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 8007090:	f7fd f85c 	bl	800414c <translate_keypad>
 8007094:	6020      	str	r0, [r4, #0]
 8007096:	f7fd bd46 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 800709a:	4b21      	ldr	r3, [pc, #132]	; (8007120 <keypad_sm+0x2648>)
 800709c:	4a21      	ldr	r2, [pc, #132]	; (8007124 <keypad_sm+0x264c>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	fab3 f383 	clz	r3, r3
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	7013      	strb	r3, [r2, #0]
 80070a8:	f7fd bd3d 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 80070ac:	4b1c      	ldr	r3, [pc, #112]	; (8007120 <keypad_sm+0x2648>)
 80070ae:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <keypad_sm+0x264c>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	fab3 f383 	clz	r3, r3
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	7013      	strb	r3, [r2, #0]
 80070ba:	f7fd bd34 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <keypad_sm+0x2648>)
 80070c0:	4a18      	ldr	r2, [pc, #96]	; (8007124 <keypad_sm+0x264c>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	fab3 f383 	clz	r3, r3
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	7013      	strb	r3, [r2, #0]
 80070cc:	f7fd bd2b 	b.w	8004b26 <keypad_sm+0x4e>
				chstat_aux_tx = !chstat_aux_rx;
 80070d0:	4b13      	ldr	r3, [pc, #76]	; (8007120 <keypad_sm+0x2648>)
 80070d2:	4a14      	ldr	r2, [pc, #80]	; (8007124 <keypad_sm+0x264c>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	fab3 f383 	clz	r3, r3
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	7013      	strb	r3, [r2, #0]
 80070de:	f7fd bd22 	b.w	8004b26 <keypad_sm+0x4e>
				inc_arr_a(encpos);
 80070e2:	4b0b      	ldr	r3, [pc, #44]	; (8007110 <keypad_sm+0x2638>)
 80070e4:	f993 0000 	ldrsb.w	r0, [r3]
 80070e8:	f7fd fb44 	bl	8004774 <inc_arr_a>
				amp_set_aux = translate_keypad();
 80070ec:	f7fd f82e 	bl	800414c <translate_keypad>
 80070f0:	4a0d      	ldr	r2, [pc, #52]	; (8007128 <keypad_sm+0x2650>)
 80070f2:	6010      	str	r0, [r2, #0]
 80070f4:	f7fd bd17 	b.w	8004b26 <keypad_sm+0x4e>
				dec_arr_a(encpos);
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <keypad_sm+0x2638>)
 80070fa:	f993 0000 	ldrsb.w	r0, [r3]
 80070fe:	f7fd fc57 	bl	80049b0 <dec_arr_a>
				amp_set_aux = translate_keypad();
 8007102:	f7fd f823 	bl	800414c <translate_keypad>
 8007106:	4a08      	ldr	r2, [pc, #32]	; (8007128 <keypad_sm+0x2650>)
 8007108:	6010      	str	r0, [r2, #0]
 800710a:	f7fd bd0c 	b.w	8004b26 <keypad_sm+0x4e>
 800710e:	bf00      	nop
 8007110:	200003f1 	.word	0x200003f1
 8007114:	200003e0 	.word	0x200003e0
 8007118:	20000a70 	.word	0x20000a70
 800711c:	20000a74 	.word	0x20000a74
 8007120:	200003e5 	.word	0x200003e5
 8007124:	200003e6 	.word	0x200003e6
 8007128:	200003dc 	.word	0x200003dc

0800712c <row_input>:
void row_input(void){
 800712c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800712e:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007130:	4e38      	ldr	r6, [pc, #224]	; (8007214 <row_input+0xe8>)
void row_input(void){
 8007132:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007134:	4630      	mov	r0, r6
 8007136:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800713a:	e9cd 4400 	strd	r4, r4, [sp]
 800713e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007142:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007144:	f001 fee6 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8007148:	4630      	mov	r0, r6
 800714a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800714e:	f001 fee1 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8007152:	4630      	mov	r0, r6
 8007154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007158:	4d2f      	ldr	r5, [pc, #188]	; (8007218 <row_input+0xec>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800715a:	f001 fedb 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 800715e:	4630      	mov	r0, r6
 8007160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007164:	f001 fed6 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8007168:	4630      	mov	r0, r6
 800716a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800716e:	f001 fed1 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007172:	4628      	mov	r0, r5
 8007174:	2140      	movs	r1, #64	; 0x40
 8007176:	f001 fecd 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 800717a:	4628      	mov	r0, r5
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	f001 fec9 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 8007182:	4628      	mov	r0, r5
 8007184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007188:	f001 fec4 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 800718c:	4628      	mov	r0, r5
 800718e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007192:	f001 febf 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8007196:	4622      	mov	r2, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800719e:	f001 ff51 	bl	8009044 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80071a2:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80071a6:	2301      	movs	r3, #1
 80071a8:	e9cd 2300 	strd	r2, r3, [sp]
 80071ac:	2200      	movs	r2, #0
 80071ae:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80071b0:	4669      	mov	r1, sp
 80071b2:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80071b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80071b8:	f001 fdc2 	bl	8008d40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80071bc:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80071c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80071c4:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071c8:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80071ca:	4669      	mov	r1, sp
 80071cc:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071ce:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80071d0:	f001 fdb6 	bl	8008d40 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80071d4:	4628      	mov	r0, r5
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80071d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80071da:	4622      	mov	r2, r4
 80071dc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80071e0:	f001 ff30 	bl	8009044 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <row_input+0xf0>)
	__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 80071e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80071ea:	615d      	str	r5, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 80071ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 80071f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 80071f4:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 80071f8:	6158      	str	r0, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 80071fa:	6159      	str	r1, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80071fc:	2028      	movs	r0, #40	; 0x28
	__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 80071fe:	615a      	str	r2, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007200:	4621      	mov	r1, r4
 8007202:	4622      	mov	r2, r4
	__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 8007204:	615d      	str	r5, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007206:	f001 fae9 	bl	80087dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 800720a:	2028      	movs	r0, #40	; 0x28
 800720c:	f001 fb24 	bl	8008858 <HAL_NVIC_EnableIRQ>
}
 8007210:	b006      	add	sp, #24
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	40020400 	.word	0x40020400
 8007218:	40020800 	.word	0x40020800
 800721c:	40010400 	.word	0x40010400

08007220 <column_input>:
void column_input(void){
 8007220:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007222:	2500      	movs	r5, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007224:	4c2c      	ldr	r4, [pc, #176]	; (80072d8 <column_input+0xb8>)
void column_input(void){
 8007226:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007228:	4620      	mov	r0, r4
 800722a:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722e:	e9cd 5500 	strd	r5, r5, [sp]
 8007232:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8007236:	9504      	str	r5, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007238:	f001 fe6c 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 800723c:	4620      	mov	r0, r4
 800723e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007242:	f001 fe67 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8007246:	4620      	mov	r0, r4
 8007248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800724c:	f001 fe62 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007250:	4e22      	ldr	r6, [pc, #136]	; (80072dc <column_input+0xbc>)
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8007252:	4620      	mov	r0, r4
 8007254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007258:	f001 fe5c 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 800725c:	4620      	mov	r0, r4
 800725e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007262:	f001 fe57 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007266:	4630      	mov	r0, r6
 8007268:	2140      	movs	r1, #64	; 0x40
 800726a:	f001 fe53 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 800726e:	4630      	mov	r0, r6
 8007270:	2180      	movs	r1, #128	; 0x80
 8007272:	f001 fe4f 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 8007276:	4630      	mov	r0, r6
 8007278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800727c:	f001 fe4a 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8007280:	4630      	mov	r0, r6
 8007282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007286:	f001 fe45 	bl	8008f14 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 800728a:	462a      	mov	r2, r5
 800728c:	4620      	mov	r0, r4
 800728e:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8007292:	f001 fed7 	bl	8009044 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007296:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 800729a:	2301      	movs	r3, #1
 800729c:	e9cd 2300 	strd	r2, r3, [sp]
 80072a0:	2200      	movs	r2, #0
 80072a2:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80072a4:	4669      	mov	r1, sp
 80072a6:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80072a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80072ac:	f001 fd48 	bl	8008d40 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80072b0:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80072b4:	2300      	movs	r3, #0
 80072b6:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072ba:	2301      	movs	r3, #1
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80072bc:	4669      	mov	r1, sp
 80072be:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072c0:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 80072c2:	f001 fd3d 	bl	8008d40 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80072c6:	462a      	mov	r2, r5
 80072c8:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80072cc:	4620      	mov	r0, r4
 80072ce:	f001 feb9 	bl	8009044 <HAL_GPIO_WritePin>
}
 80072d2:	b006      	add	sp, #24
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
 80072d6:	bf00      	nop
 80072d8:	40020400 	.word	0x40020400
 80072dc:	40020800 	.word	0x40020800

080072e0 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 80072e0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 80072e8:	d010      	beq.n	800730c <HAL_GPIO_EXTI_Callback+0x2c>
 80072ea:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80072ee:	d00d      	beq.n	800730c <HAL_GPIO_EXTI_Callback+0x2c>
 80072f0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80072f4:	d00a      	beq.n	800730c <HAL_GPIO_EXTI_Callback+0x2c>
 80072f6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80072fa:	d007      	beq.n	800730c <HAL_GPIO_EXTI_Callback+0x2c>
 80072fc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007300:	d004      	beq.n	800730c <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 8007302:	2804      	cmp	r0, #4
 8007304:	d02c      	beq.n	8007360 <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Rot_CLK_Pin){
 8007306:	2801      	cmp	r0, #1
 8007308:	d00f      	beq.n	800732a <HAL_GPIO_EXTI_Callback+0x4a>
}
 800730a:	bd38      	pop	{r3, r4, r5, pc}
		HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 800730c:	2028      	movs	r0, #40	; 0x28
 800730e:	f001 fab1 	bl	8008874 <HAL_NVIC_DisableIRQ>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 8007312:	4621      	mov	r1, r4
 8007314:	4816      	ldr	r0, [pc, #88]	; (8007370 <HAL_GPIO_EXTI_Callback+0x90>)
 8007316:	f001 fe8f 	bl	8009038 <HAL_GPIO_ReadPin>
 800731a:	b908      	cbnz	r0, 8007320 <HAL_GPIO_EXTI_Callback+0x40>
			rowpin = GPIO_Pin;
 800731c:	4b15      	ldr	r3, [pc, #84]	; (8007374 <HAL_GPIO_EXTI_Callback+0x94>)
 800731e:	601c      	str	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8007320:	4815      	ldr	r0, [pc, #84]	; (8007378 <HAL_GPIO_EXTI_Callback+0x98>)
}
 8007322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim2);
 8007326:	f003 bc51 	b.w	800abcc <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 800732a:	4d14      	ldr	r5, [pc, #80]	; (800737c <HAL_GPIO_EXTI_Callback+0x9c>)
 800732c:	782b      	ldrb	r3, [r5, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1eb      	bne.n	800730a <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 8007332:	2006      	movs	r0, #6
 8007334:	f001 fa9e 	bl	8008874 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8007338:	4621      	mov	r1, r4
 800733a:	480d      	ldr	r0, [pc, #52]	; (8007370 <HAL_GPIO_EXTI_Callback+0x90>)
 800733c:	f001 fe7c 	bl	8009038 <HAL_GPIO_ReadPin>
 8007340:	2102      	movs	r1, #2
 8007342:	4604      	mov	r4, r0
 8007344:	480a      	ldr	r0, [pc, #40]	; (8007370 <HAL_GPIO_EXTI_Callback+0x90>)
 8007346:	f001 fe77 	bl	8009038 <HAL_GPIO_ReadPin>
 800734a:	4603      	mov	r3, r0
 800734c:	429c      	cmp	r4, r3
 800734e:	bf0c      	ite	eq
 8007350:	2401      	moveq	r4, #1
 8007352:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 8007354:	480a      	ldr	r0, [pc, #40]	; (8007380 <HAL_GPIO_EXTI_Callback+0xa0>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8007356:	702c      	strb	r4, [r5, #0]
}
 8007358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 800735c:	f003 bc36 	b.w	800abcc <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8007360:	2008      	movs	r0, #8
 8007362:	f001 fa87 	bl	8008874 <HAL_NVIC_DisableIRQ>
}
 8007366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim9);
 800736a:	4806      	ldr	r0, [pc, #24]	; (8007384 <HAL_GPIO_EXTI_Callback+0xa4>)
 800736c:	f003 bc2e 	b.w	800abcc <HAL_TIM_Base_Start_IT>
 8007370:	40020400 	.word	0x40020400
 8007374:	20000010 	.word	0x20000010
 8007378:	20000604 	.word	0x20000604
 800737c:	20000958 	.word	0x20000958
 8007380:	20000584 	.word	0x20000584
 8007384:	200006c4 	.word	0x200006c4

08007388 <HAL_TIM_PeriodElapsedCallback>:
{
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim == &htim2){
 800738a:	4b8e      	ldr	r3, [pc, #568]	; (80075c4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800738c:	4298      	cmp	r0, r3
 800738e:	d022      	beq.n	80073d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim == &htim3){
 8007390:	4d8d      	ldr	r5, [pc, #564]	; (80075c8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8007392:	4604      	mov	r4, r0
 8007394:	42a8      	cmp	r0, r5
 8007396:	d03c      	beq.n	8007412 <HAL_TIM_PeriodElapsedCallback+0x8a>
	else if(htim == &htim4){
 8007398:	4b8c      	ldr	r3, [pc, #560]	; (80075cc <HAL_TIM_PeriodElapsedCallback+0x244>)
 800739a:	4298      	cmp	r0, r3
 800739c:	d042      	beq.n	8007424 <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if(htim == &htim9){
 800739e:	4b8c      	ldr	r3, [pc, #560]	; (80075d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80073a0:	4298      	cmp	r0, r3
 80073a2:	d006      	beq.n	80073b2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == &htim10){
 80073a4:	4b8b      	ldr	r3, [pc, #556]	; (80075d4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80073a6:	4298      	cmp	r0, r3
 80073a8:	d049      	beq.n	800743e <HAL_TIM_PeriodElapsedCallback+0xb6>
	else if(htim == &htim11){
 80073aa:	4b8b      	ldr	r3, [pc, #556]	; (80075d8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80073ac:	4298      	cmp	r0, r3
 80073ae:	d05d      	beq.n	800746c <HAL_TIM_PeriodElapsedCallback+0xe4>
}
 80073b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 80073b2:	f003 fc37 	bl	800ac24 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 80073b6:	2073      	movs	r0, #115	; 0x73
 80073b8:	f7fd fb8e 	bl	8004ad8 <keypad_sm>
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 80073bc:	2404      	movs	r4, #4
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 80073be:	2200      	movs	r2, #0
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 80073c0:	4b86      	ldr	r3, [pc, #536]	; (80075dc <HAL_TIM_PeriodElapsedCallback+0x254>)
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 80073c2:	2008      	movs	r0, #8
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 80073c4:	615c      	str	r4, [r3, #20]
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 80073c6:	4611      	mov	r1, r2
 80073c8:	f001 fa08 	bl	80087dc <HAL_NVIC_SetPriority>
}
 80073cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 80073d0:	2008      	movs	r0, #8
 80073d2:	f001 ba41 	b.w	8008858 <HAL_NVIC_EnableIRQ>
		if(rowpin != -1){
 80073d6:	4f82      	ldr	r7, [pc, #520]	; (80075e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
		HAL_TIM_Base_Stop_IT(&htim2);
 80073d8:	f003 fc24 	bl	800ac24 <HAL_TIM_Base_Stop_IT>
		if(rowpin != -1){
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	3301      	adds	r3, #1
 80073e0:	d067      	beq.n	80074b2 <HAL_TIM_PeriodElapsedCallback+0x12a>
			column_input();
 80073e2:	f7ff ff1d 	bl	8007220 <column_input>
			for(int i = 0; i < 4; i++){
 80073e6:	2400      	movs	r4, #0
 80073e8:	4e7e      	ldr	r6, [pc, #504]	; (80075e4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80073ea:	4d7f      	ldr	r5, [pc, #508]	; (80075e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
				if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 80073ec:	f835 1b02 	ldrh.w	r1, [r5], #2
 80073f0:	f856 0b04 	ldr.w	r0, [r6], #4
 80073f4:	f001 fe20 	bl	8009038 <HAL_GPIO_ReadPin>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f000 8088 	beq.w	800750e <HAL_TIM_PeriodElapsedCallback+0x186>
			for(int i = 0; i < 4; i++){
 80073fe:	3401      	adds	r4, #1
 8007400:	2c04      	cmp	r4, #4
 8007402:	d1f3      	bne.n	80073ec <HAL_TIM_PeriodElapsedCallback+0x64>
			rowpin = -1;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	603b      	str	r3, [r7, #0]
}
 800740a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			row_input();
 800740e:	f7ff be8d 	b.w	800712c <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 8007412:	f003 fc07 	bl	800ac24 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8007416:	f7fc f9a5 	bl	8003764 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 800741a:	4620      	mov	r0, r4
}
 800741c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 8007420:	f003 bbd4 	b.w	800abcc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8007424:	f003 fbfe 	bl	800ac24 <HAL_TIM_Base_Stop_IT>
		if(!startmessage){
 8007428:	4b70      	ldr	r3, [pc, #448]	; (80075ec <HAL_TIM_PeriodElapsedCallback+0x264>)
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	2a00      	cmp	r2, #0
 800742e:	d13b      	bne.n	80074a8 <HAL_TIM_PeriodElapsedCallback+0x120>
			startmessage = 1;
 8007430:	2201      	movs	r2, #1
 8007432:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 8007434:	4620      	mov	r0, r4
}
 8007436:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_Base_Start_IT(&htim4);
 800743a:	f003 bbc7 	b.w	800abcc <HAL_TIM_Base_Start_IT>
		if(rotenum == CWTURN){
 800743e:	4c6c      	ldr	r4, [pc, #432]	; (80075f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
		HAL_TIM_Base_Stop_IT(&htim10);
 8007440:	f003 fbf0 	bl	800ac24 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 8007444:	7823      	ldrb	r3, [r4, #0]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d07f      	beq.n	800754a <HAL_TIM_PeriodElapsedCallback+0x1c2>
		else if(rotenum == CCWTURN){
 800744a:	2b02      	cmp	r3, #2
 800744c:	f000 8081 	beq.w	8007552 <HAL_TIM_PeriodElapsedCallback+0x1ca>
		rotenum = NOTURN;
 8007450:	2200      	movs	r2, #0
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_CLK_Pin);
 8007452:	2501      	movs	r5, #1
 8007454:	4b61      	ldr	r3, [pc, #388]	; (80075dc <HAL_TIM_PeriodElapsedCallback+0x254>)
		rotenum = NOTURN;
 8007456:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 8007458:	2006      	movs	r0, #6
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_CLK_Pin);
 800745a:	615d      	str	r5, [r3, #20]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 800745c:	4611      	mov	r1, r2
 800745e:	f001 f9bd 	bl	80087dc <HAL_NVIC_SetPriority>
}
 8007462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8007466:	2006      	movs	r0, #6
 8007468:	f001 b9f6 	b.w	8008858 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 800746c:	f003 fbda 	bl	800ac24 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 8007470:	4b60      	ldr	r3, [pc, #384]	; (80075f4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	2a00      	cmp	r2, #0
 8007476:	d036      	beq.n	80074e6 <HAL_TIM_PeriodElapsedCallback+0x15e>
		else if(chstat_main == 1){
 8007478:	7819      	ldrb	r1, [r3, #0]
 800747a:	2901      	cmp	r1, #1
 800747c:	b24a      	sxtb	r2, r1
 800747e:	d06c      	beq.n	800755a <HAL_TIM_PeriodElapsedCallback+0x1d2>
		else if(chstat_main == 2){
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d078      	beq.n	8007578 <HAL_TIM_PeriodElapsedCallback+0x1f0>
		if(chstat_aux_rx == 0){
 8007486:	4b5c      	ldr	r3, [pc, #368]	; (80075f8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8007488:	7819      	ldrb	r1, [r3, #0]
 800748a:	b24a      	sxtb	r2, r1
 800748c:	2900      	cmp	r1, #0
 800748e:	d039      	beq.n	8007504 <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_aux_rx == 1){
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	2901      	cmp	r1, #1
 8007494:	b24a      	sxtb	r2, r1
 8007496:	d035      	beq.n	8007504 <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_aux_rx == 2){
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d077      	beq.n	800758e <HAL_TIM_PeriodElapsedCallback+0x206>
}
 800749e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 80074a2:	484d      	ldr	r0, [pc, #308]	; (80075d8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80074a4:	f003 bb92 	b.w	800abcc <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 80074a8:	4628      	mov	r0, r5
}
 80074aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_Base_Start_IT(&htim3);
 80074ae:	f003 bb8d 	b.w	800abcc <HAL_TIM_Base_Start_IT>
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80074b2:	f44f 6580 	mov.w	r5, #1024	; 0x400
			__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 80074b6:	f44f 6400 	mov.w	r4, #2048	; 0x800
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80074ba:	4b48      	ldr	r3, [pc, #288]	; (80075dc <HAL_TIM_PeriodElapsedCallback+0x254>)
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80074bc:	2200      	movs	r2, #0
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 80074be:	615d      	str	r5, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 80074c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 80074c4:	615c      	str	r4, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 80074c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 80074ca:	f44f 4480 	mov.w	r4, #16384	; 0x4000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 80074ce:	6158      	str	r0, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 80074d0:	6159      	str	r1, [r3, #20]
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80074d2:	2028      	movs	r0, #40	; 0x28
			__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 80074d4:	615c      	str	r4, [r3, #20]
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 80074d6:	4611      	mov	r1, r2
 80074d8:	f001 f980 	bl	80087dc <HAL_NVIC_SetPriority>
}
 80074dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 80074e0:	2028      	movs	r0, #40	; 0x28
 80074e2:	f001 b9b9 	b.w	8008858 <HAL_NVIC_EnableIRQ>
			if(!timercounter){
 80074e6:	4c45      	ldr	r4, [pc, #276]	; (80075fc <HAL_TIM_PeriodElapsedCallback+0x274>)
 80074e8:	7822      	ldrb	r2, [r4, #0]
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d03e      	beq.n	800756c <HAL_TIM_PeriodElapsedCallback+0x1e4>
			timercounter++;
 80074ee:	3201      	adds	r2, #1
 80074f0:	b2d2      	uxtb	r2, r2
			if(timercounter >= 5){
 80074f2:	2a04      	cmp	r2, #4
			timercounter++;
 80074f4:	7022      	strb	r2, [r4, #0]
			if(timercounter >= 5){
 80074f6:	d901      	bls.n	80074fc <HAL_TIM_PeriodElapsedCallback+0x174>
				timercounter = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	7023      	strb	r3, [r4, #0]
			blink = 0;
 80074fc:	2200      	movs	r2, #0
 80074fe:	4b40      	ldr	r3, [pc, #256]	; (8007600 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	e7c0      	b.n	8007486 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 8007504:	2110      	movs	r1, #16
 8007506:	483f      	ldr	r0, [pc, #252]	; (8007604 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007508:	f001 fd9c 	bl	8009044 <HAL_GPIO_WritePin>
 800750c:	e7c7      	b.n	800749e <HAL_TIM_PeriodElapsedCallback+0x116>
						if(rowpin == row_pins[j]){
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007514:	d012      	beq.n	800753c <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751c:	d04c      	beq.n	80075b8 <HAL_TIM_PeriodElapsedCallback+0x230>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007524:	d04c      	beq.n	80075c0 <HAL_TIM_PeriodElapsedCallback+0x238>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752c:	d046      	beq.n	80075bc <HAL_TIM_PeriodElapsedCallback+0x234>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
					for(int j = 0; j < 5; j++){
 8007534:	bf08      	it	eq
 8007536:	2004      	moveq	r0, #4
						if(rowpin == row_pins[j]){
 8007538:	f47f af64 	bne.w	8007404 <HAL_TIM_PeriodElapsedCallback+0x7c>
							keypad_sm(keypad_labels[j][i]);
 800753c:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800753e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007542:	5d00      	ldrb	r0, [r0, r4]
 8007544:	f7fd fac8 	bl	8004ad8 <keypad_sm>
							break;
 8007548:	e75c      	b.n	8007404 <HAL_TIM_PeriodElapsedCallback+0x7c>
			keypad_sm(']');//right bracket for CW
 800754a:	205d      	movs	r0, #93	; 0x5d
 800754c:	f7fd fac4 	bl	8004ad8 <keypad_sm>
 8007550:	e77e      	b.n	8007450 <HAL_TIM_PeriodElapsedCallback+0xc8>
			keypad_sm('[');//left bracket for CCW
 8007552:	205b      	movs	r0, #91	; 0x5b
 8007554:	f7fd fac0 	bl	8004ad8 <keypad_sm>
 8007558:	e77a      	b.n	8007450 <HAL_TIM_PeriodElapsedCallback+0xc8>
			if(!timercounter){
 800755a:	4c28      	ldr	r4, [pc, #160]	; (80075fc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800755c:	7823      	ldrb	r3, [r4, #0]
 800755e:	b1db      	cbz	r3, 8007598 <HAL_TIM_PeriodElapsedCallback+0x210>
			timercounter++;
 8007560:	3301      	adds	r3, #1
 8007562:	b2db      	uxtb	r3, r3
			if(timercounter >= 5){
 8007564:	2b04      	cmp	r3, #4
			timercounter++;
 8007566:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 5){
 8007568:	d8c6      	bhi.n	80074f8 <HAL_TIM_PeriodElapsedCallback+0x170>
 800756a:	e7c7      	b.n	80074fc <HAL_TIM_PeriodElapsedCallback+0x174>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_RESET);
 800756c:	2120      	movs	r1, #32
 800756e:	4825      	ldr	r0, [pc, #148]	; (8007604 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007570:	f001 fd68 	bl	8009044 <HAL_GPIO_WritePin>
			timercounter++;
 8007574:	7822      	ldrb	r2, [r4, #0]
 8007576:	e7ba      	b.n	80074ee <HAL_TIM_PeriodElapsedCallback+0x166>
			if(blink){
 8007578:	4c21      	ldr	r4, [pc, #132]	; (8007600 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800757a:	7823      	ldrb	r3, [r4, #0]
 800757c:	b9bb      	cbnz	r3, 80075ae <HAL_TIM_PeriodElapsedCallback+0x226>
			timercounter++;
 800757e:	4a1f      	ldr	r2, [pc, #124]	; (80075fc <HAL_TIM_PeriodElapsedCallback+0x274>)
 8007580:	7813      	ldrb	r3, [r2, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	b2db      	uxtb	r3, r3
			if(timercounter >= 5){
 8007586:	2b04      	cmp	r3, #4
 8007588:	d80c      	bhi.n	80075a4 <HAL_TIM_PeriodElapsedCallback+0x21c>
			timercounter++;
 800758a:	7013      	strb	r3, [r2, #0]
 800758c:	e77b      	b.n	8007486 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 800758e:	2110      	movs	r1, #16
 8007590:	481c      	ldr	r0, [pc, #112]	; (8007604 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8007592:	f001 fd5b 	bl	800904c <HAL_GPIO_TogglePin>
 8007596:	e782      	b.n	800749e <HAL_TIM_PeriodElapsedCallback+0x116>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 8007598:	2120      	movs	r1, #32
 800759a:	481a      	ldr	r0, [pc, #104]	; (8007604 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800759c:	f001 fd52 	bl	8009044 <HAL_GPIO_WritePin>
			timercounter++;
 80075a0:	7823      	ldrb	r3, [r4, #0]
 80075a2:	e7dd      	b.n	8007560 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				timercounter = 0;
 80075a4:	2100      	movs	r1, #0
				blink = 1;
 80075a6:	2301      	movs	r3, #1
				timercounter = 0;
 80075a8:	7011      	strb	r1, [r2, #0]
				blink = 1;
 80075aa:	7023      	strb	r3, [r4, #0]
 80075ac:	e76b      	b.n	8007486 <HAL_TIM_PeriodElapsedCallback+0xfe>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80075ae:	2120      	movs	r1, #32
 80075b0:	4814      	ldr	r0, [pc, #80]	; (8007604 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80075b2:	f001 fd4b 	bl	800904c <HAL_GPIO_TogglePin>
 80075b6:	e7e2      	b.n	800757e <HAL_TIM_PeriodElapsedCallback+0x1f6>
					for(int j = 0; j < 5; j++){
 80075b8:	2001      	movs	r0, #1
 80075ba:	e7bf      	b.n	800753c <HAL_TIM_PeriodElapsedCallback+0x1b4>
 80075bc:	2003      	movs	r0, #3
 80075be:	e7bd      	b.n	800753c <HAL_TIM_PeriodElapsedCallback+0x1b4>
 80075c0:	2002      	movs	r0, #2
 80075c2:	e7bb      	b.n	800753c <HAL_TIM_PeriodElapsedCallback+0x1b4>
 80075c4:	20000604 	.word	0x20000604
 80075c8:	20000644 	.word	0x20000644
 80075cc:	20000684 	.word	0x20000684
 80075d0:	200006c4 	.word	0x200006c4
 80075d4:	20000584 	.word	0x20000584
 80075d8:	200005c4 	.word	0x200005c4
 80075dc:	40010400 	.word	0x40010400
 80075e0:	20000010 	.word	0x20000010
 80075e4:	08011988 	.word	0x08011988
 80075e8:	08011980 	.word	0x08011980
 80075ec:	2000099c 	.word	0x2000099c
 80075f0:	20000958 	.word	0x20000958
 80075f4:	200003e7 	.word	0x200003e7
 80075f8:	200003e5 	.word	0x200003e5
 80075fc:	200009a5 	.word	0x200009a5
 8007600:	200003e4 	.word	0x200003e4
 8007604:	40020800 	.word	0x40020800
 8007608:	080119d8 	.word	0x080119d8

0800760c <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 800760c:	4a04      	ldr	r2, [pc, #16]	; (8007620 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8007610:	8810      	ldrh	r0, [r2, #0]
	adc_values_cpy[1] = adc_values[1];
 8007612:	8851      	ldrh	r1, [r2, #2]
	adc_values_cpy[2] = adc_values[2];
 8007614:	8892      	ldrh	r2, [r2, #4]
	adc_values_cpy[0] = adc_values[0];
 8007616:	8018      	strh	r0, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8007618:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 800761a:	809a      	strh	r2, [r3, #4]
}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	200003c4 	.word	0x200003c4
 8007624:	200003d0 	.word	0x200003d0

08007628 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8007628:	4a04      	ldr	r2, [pc, #16]	; (800763c <HAL_ADC_ConvCpltCallback+0x14>)
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <HAL_ADC_ConvCpltCallback+0x18>)
 800762c:	88d0      	ldrh	r0, [r2, #6]
	adc_values_cpy[4] = adc_values[4];
 800762e:	8911      	ldrh	r1, [r2, #8]
	adc_values_cpy[5] = adc_values[5];
 8007630:	8952      	ldrh	r2, [r2, #10]
	adc_values_cpy[3] = adc_values[3];
 8007632:	80d8      	strh	r0, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8007634:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8007636:	815a      	strh	r2, [r3, #10]
}
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	200003c4 	.word	0x200003c4
 8007640:	200003d0 	.word	0x200003d0

08007644 <HAL_ADC_LevelOutOfWindowCallback>:
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8007644:	2201      	movs	r2, #1
{
 8007646:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8007648:	2140      	movs	r1, #64	; 0x40
 800764a:	4803      	ldr	r0, [pc, #12]	; (8007658 <HAL_ADC_LevelOutOfWindowCallback+0x14>)
 800764c:	f001 fcfa 	bl	8009044 <HAL_GPIO_WritePin>
	chstat_main = 2;
 8007650:	2202      	movs	r2, #2
 8007652:	4b02      	ldr	r3, [pc, #8]	; (800765c <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 8007654:	701a      	strb	r2, [r3, #0]
}
 8007656:	bd08      	pop	{r3, pc}
 8007658:	40020000 	.word	0x40020000
 800765c:	200003e7 	.word	0x200003e7

08007660 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	4e84      	ldr	r6, [pc, #528]	; (8007878 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 8007666:	2400      	movs	r4, #0
 8007668:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800766a:	b08b      	sub	sp, #44	; 0x2c
 800766c:	e003      	b.n	8007676 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 800766e:	3401      	adds	r4, #1
 8007670:	2c40      	cmp	r4, #64	; 0x40
 8007672:	f000 80fd 	beq.w	8007870 <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 8007676:	f813 5b01 	ldrb.w	r5, [r3], #1
 800767a:	2d2a      	cmp	r5, #42	; 0x2a
 800767c:	d1f7      	bne.n	800766e <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 800767e:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8007680:	2220      	movs	r2, #32
 8007682:	2100      	movs	r1, #0
 8007684:	a802      	add	r0, sp, #8
 8007686:	f005 fe75 	bl	800d374 <memset>
	for(int i = 0; i < 25; i++){
 800768a:	f10d 0307 	add.w	r3, sp, #7
 800768e:	aa08      	add	r2, sp, #32
 8007690:	e000      	b.n	8007694 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8007692:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8007694:	3401      	adds	r4, #1
 8007696:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8007698:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 800769a:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 800769e:	bf28      	it	cs
 80076a0:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d1f5      	bne.n	8007692 <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 80076a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80076aa:	2b2a      	cmp	r3, #42	; 0x2a
 80076ac:	d00c      	beq.n	80076c8 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80076ae:	2240      	movs	r2, #64	; 0x40
 80076b0:	2100      	movs	r1, #0
 80076b2:	4871      	ldr	r0, [pc, #452]	; (8007878 <HAL_UART_RxCpltCallback+0x218>)
 80076b4:	f005 fe5e 	bl	800d374 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80076b8:	2240      	movs	r2, #64	; 0x40
 80076ba:	496f      	ldr	r1, [pc, #444]	; (8007878 <HAL_UART_RxCpltCallback+0x218>)
 80076bc:	486f      	ldr	r0, [pc, #444]	; (800787c <HAL_UART_RxCpltCallback+0x21c>)
}
 80076be:	b00b      	add	sp, #44	; 0x2c
 80076c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80076c4:	f003 bcf6 	b.w	800b0b4 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 80076c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80076cc:	2b53      	cmp	r3, #83	; 0x53
 80076ce:	d1ee      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 80076d0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80076d4:	2b54      	cmp	r3, #84	; 0x54
 80076d6:	d1ea      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 80076d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80076dc:	2b52      	cmp	r3, #82	; 0x52
 80076de:	d1e6      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 80076e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80076e4:	2b54      	cmp	r3, #84	; 0x54
 80076e6:	d1e2      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 80076e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80076ec:	2b46      	cmp	r3, #70	; 0x46
 80076ee:	d1de      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 80076f0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80076f4:	2b4e      	cmp	r3, #78	; 0x4e
 80076f6:	d1da      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 80076f8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80076fc:	2b53      	cmp	r3, #83	; 0x53
 80076fe:	d1d6      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 8007700:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007704:	2b48      	cmp	r3, #72	; 0x48
 8007706:	d1d2      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 8007708:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800770c:	2b21      	cmp	r3, #33	; 0x21
 800770e:	d1ce      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 8007710:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007714:	2b2c      	cmp	r3, #44	; 0x2c
 8007716:	d1ca      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007718:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800771c:	2b2c      	cmp	r3, #44	; 0x2c
 800771e:	d1c6      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 8007720:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007724:	2b2c      	cmp	r3, #44	; 0x2c
 8007726:	d1c2      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 8007728:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800772c:	2b2c      	cmp	r3, #44	; 0x2c
 800772e:	d1be      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8007730:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8007734:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007736:	b2c3      	uxtb	r3, r0
 8007738:	2b09      	cmp	r3, #9
 800773a:	d8b8      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800773c:	f89d b00f 	ldrb.w	fp, [sp, #15]
 8007740:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8007744:	fa5f f38b 	uxtb.w	r3, fp
 8007748:	2b09      	cmp	r3, #9
 800774a:	d8b0      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 800774c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007750:	2b2e      	cmp	r3, #46	; 0x2e
 8007752:	d1ac      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007754:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007758:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800775c:	fa5f f38a 	uxtb.w	r3, sl
 8007760:	2b09      	cmp	r3, #9
 8007762:	d8a4      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007764:	f89d 6012 	ldrb.w	r6, [sp, #18]
 8007768:	3e30      	subs	r6, #48	; 0x30
 800776a:	b2f3      	uxtb	r3, r6
 800776c:	2b09      	cmp	r3, #9
 800776e:	d89e      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8007770:	f89d 9014 	ldrb.w	r9, [sp, #20]
 8007774:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007778:	fa5f f389 	uxtb.w	r3, r9
 800777c:	2b09      	cmp	r3, #9
 800777e:	d896      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8007780:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007784:	2b2e      	cmp	r3, #46	; 0x2e
 8007786:	d192      	bne.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
 8007788:	f89d 8016 	ldrb.w	r8, [sp, #22]
 800778c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8007790:	fa5f f388 	uxtb.w	r3, r8
 8007794:	2b09      	cmp	r3, #9
 8007796:	d88a      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8007798:	f89d 7017 	ldrb.w	r7, [sp, #23]
 800779c:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800779e:	b2fb      	uxtb	r3, r7
 80077a0:	2b09      	cmp	r3, #9
 80077a2:	d884      	bhi.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80077a4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80077a8:	3d30      	subs	r5, #48	; 0x30
 80077aa:	b2eb      	uxtb	r3, r5
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	f63f af7e 	bhi.w	80076ae <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 80077b2:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80077b6:	3c30      	subs	r4, #48	; 0x30
 80077b8:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80077ba:	2c02      	cmp	r4, #2
 80077bc:	f63f af77 	bhi.w	80076ae <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80077c0:	f7f9 faa4 	bl	8000d0c <__aeabi_i2f>
 80077c4:	492e      	ldr	r1, [pc, #184]	; (8007880 <HAL_UART_RxCpltCallback+0x220>)
 80077c6:	f7f9 faf5 	bl	8000db4 <__aeabi_fmul>
 80077ca:	2100      	movs	r1, #0
 80077cc:	f7f9 f9ea 	bl	8000ba4 <__addsf3>
 80077d0:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80077d2:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80077d4:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80077d6:	f7f9 fa99 	bl	8000d0c <__aeabi_i2f>
 80077da:	9901      	ldr	r1, [sp, #4]
 80077dc:	f7f9 f9e2 	bl	8000ba4 <__addsf3>
 80077e0:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80077e2:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80077e4:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80077e6:	f7f9 fa91 	bl	8000d0c <__aeabi_i2f>
 80077ea:	4925      	ldr	r1, [pc, #148]	; (8007880 <HAL_UART_RxCpltCallback+0x220>)
 80077ec:	f7f9 fb96 	bl	8000f1c <__aeabi_fdiv>
 80077f0:	4651      	mov	r1, sl
 80077f2:	f7f9 f9d7 	bl	8000ba4 <__addsf3>
 80077f6:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 80077f8:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80077fa:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 80077fc:	f7f9 fa86 	bl	8000d0c <__aeabi_i2f>
 8007800:	2100      	movs	r1, #0
 8007802:	f7f9 f9cf 	bl	8000ba4 <__addsf3>
 8007806:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007808:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800780a:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800780c:	f7f9 fa7e 	bl	8000d0c <__aeabi_i2f>
 8007810:	491b      	ldr	r1, [pc, #108]	; (8007880 <HAL_UART_RxCpltCallback+0x220>)
 8007812:	f7f9 fb83 	bl	8000f1c <__aeabi_fdiv>
 8007816:	4641      	mov	r1, r8
 8007818:	f7f9 f9c4 	bl	8000ba4 <__addsf3>
 800781c:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800781e:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007820:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8007822:	f7f9 fa73 	bl	8000d0c <__aeabi_i2f>
 8007826:	4917      	ldr	r1, [pc, #92]	; (8007884 <HAL_UART_RxCpltCallback+0x224>)
 8007828:	f7f9 fb78 	bl	8000f1c <__aeabi_fdiv>
 800782c:	4639      	mov	r1, r7
 800782e:	f7f9 f9b9 	bl	8000ba4 <__addsf3>
 8007832:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8007834:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8007836:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8007838:	f7f9 fa68 	bl	8000d0c <__aeabi_i2f>
 800783c:	4911      	ldr	r1, [pc, #68]	; (8007884 <HAL_UART_RxCpltCallback+0x224>)
 800783e:	f7f9 fb6d 	bl	8000f1c <__aeabi_fdiv>
 8007842:	4649      	mov	r1, r9
 8007844:	f7f9 f9ae 	bl	8000ba4 <__addsf3>
 8007848:	4602      	mov	r2, r0
		lin_num_aux = tempv2;
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <HAL_UART_RxCpltCallback+0x228>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800784c:	4628      	mov	r0, r5
		lin_num_aux = tempv2;
 800784e:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8007850:	f7f9 fa5c 	bl	8000d0c <__aeabi_i2f>
 8007854:	490d      	ldr	r1, [pc, #52]	; (800788c <HAL_UART_RxCpltCallback+0x22c>)
 8007856:	f7f9 fb61 	bl	8000f1c <__aeabi_fdiv>
 800785a:	4631      	mov	r1, r6
 800785c:	f7f9 f9a2 	bl	8000ba4 <__addsf3>
		cur_num_aux = tempa2;
 8007860:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8007890 <HAL_UART_RxCpltCallback+0x230>
		chstat_aux_rx = rxbuffercpy[18]-48;
 8007864:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <HAL_UART_RxCpltCallback+0x234>)
 8007866:	b264      	sxtb	r4, r4
 8007868:	701c      	strb	r4, [r3, #0]
		cur_num_aux = tempa2;
 800786a:	f8cb 0000 	str.w	r0, [fp]
		chstat_aux_rx = rxbuffercpy[18]-48;
 800786e:	e71e      	b.n	80076ae <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 8007870:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8007872:	7835      	ldrb	r5, [r6, #0]
 8007874:	e704      	b.n	8007680 <HAL_UART_RxCpltCallback+0x20>
 8007876:	bf00      	nop
 8007878:	2000095c 	.word	0x2000095c
 800787c:	20000704 	.word	0x20000704
 8007880:	41200000 	.word	0x41200000
 8007884:	42c80000 	.word	0x42c80000
 8007888:	20000750 	.word	0x20000750
 800788c:	447a0000 	.word	0x447a0000
 8007890:	200003ec 	.word	0x200003ec
 8007894:	200003e5 	.word	0x200003e5

08007898 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 8007898:	2240      	movs	r2, #64	; 0x40
 800789a:	4902      	ldr	r1, [pc, #8]	; (80078a4 <HAL_UART_ErrorCallback+0xc>)
 800789c:	4802      	ldr	r0, [pc, #8]	; (80078a8 <HAL_UART_ErrorCallback+0x10>)
 800789e:	f003 bc09 	b.w	800b0b4 <HAL_UART_Receive_DMA>
 80078a2:	bf00      	nop
 80078a4:	2000095c 	.word	0x2000095c
 80078a8:	20000704 	.word	0x20000704

080078ac <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 80078ac:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 80078ae:	4c07      	ldr	r4, [pc, #28]	; (80078cc <HAL_UART_TxHalfCpltCallback+0x20>)
 80078b0:	4d07      	ldr	r5, [pc, #28]	; (80078d0 <HAL_UART_TxHalfCpltCallback+0x24>)
 80078b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80078c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80078c6:	bc30      	pop	{r4, r5}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	200009a8 	.word	0x200009a8
 80078d0:	200009e8 	.word	0x200009e8

080078d4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80078d4:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80078d6:	4c11      	ldr	r4, [pc, #68]	; (800791c <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80078d8:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80078da:	2240      	movs	r2, #64	; 0x40
 80078dc:	2100      	movs	r1, #0
 80078de:	4620      	mov	r0, r4
 80078e0:	f005 fd48 	bl	800d374 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 80078e4:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <HAL_UART_TxCpltCallback+0x4c>)
 80078e6:	490f      	ldr	r1, [pc, #60]	; (8007924 <HAL_UART_TxCpltCallback+0x50>)
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <HAL_UART_TxCpltCallback+0x54>)
 80078ea:	680e      	ldr	r6, [r1, #0]
 80078ec:	6810      	ldr	r0, [r2, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	f7f8 fdb0 	bl	8000458 <__aeabi_f2d>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4630      	mov	r0, r6
 80078fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007902:	f7f8 fda9 	bl	8000458 <__aeabi_f2d>
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	4620      	mov	r0, r4
 800790c:	2120      	movs	r1, #32
 800790e:	e9cd 6700 	strd	r6, r7, [sp]
 8007912:	4a06      	ldr	r2, [pc, #24]	; (800792c <HAL_UART_TxCpltCallback+0x58>)
 8007914:	f006 f996 	bl	800dc44 <sniprintf>
}
 8007918:	b006      	add	sp, #24
 800791a:	bdd0      	pop	{r4, r6, r7, pc}
 800791c:	200009e8 	.word	0x200009e8
 8007920:	200003dc 	.word	0x200003dc
 8007924:	20000a6c 	.word	0x20000a6c
 8007928:	200003e6 	.word	0x200003e6
 800792c:	08011728 	.word	0x08011728

08007930 <Error_Handler>:
 8007930:	b672      	cpsid	i
  while (1)
 8007932:	e7fe      	b.n	8007932 <Error_Handler+0x2>

08007934 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <HAL_MspInit+0x40>)
{
 8007936:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8007938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800793a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800793e:	625a      	str	r2, [r3, #36]	; 0x24
 8007940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007942:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007946:	9201      	str	r2, [sp, #4]
 8007948:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	621a      	str	r2, [r3, #32]
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	f002 0201 	and.w	r2, r2, #1
 8007958:	9202      	str	r2, [sp, #8]
 800795a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800795c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800795e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007962:	625a      	str	r2, [r3, #36]	; 0x24
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800796a:	9303      	str	r3, [sp, #12]
 800796c:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800796e:	b004      	add	sp, #16
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40023800 	.word	0x40023800

08007978 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007978:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800797a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800797c:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <HAL_ADC_MspInit+0x9c>)
 800797e:	6802      	ldr	r2, [r0, #0]
{
 8007980:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8007982:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007984:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007988:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800798c:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 800798e:	d001      	beq.n	8007994 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007990:	b008      	add	sp, #32
 8007992:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007994:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8007998:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800799a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800799c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a0:	621a      	str	r2, [r3, #32]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	4605      	mov	r5, r0
 80079a6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80079aa:	9200      	str	r2, [sp, #0]
 80079ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ae:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 80079b0:	4e19      	ldr	r6, [pc, #100]	; (8007a18 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	61da      	str	r2, [r3, #28]
 80079b8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80079ba:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80079c2:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079c4:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c6:	4815      	ldr	r0, [pc, #84]	; (8007a1c <HAL_ADC_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80079c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079cc:	f001 f9b8 	bl	8008d40 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80079d0:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80079d2:	4913      	ldr	r1, [pc, #76]	; (8007a20 <HAL_ADC_MspInit+0xa8>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80079d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079d8:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80079dc:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80079de:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80079e2:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80079e4:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80079e6:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80079e8:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80079ea:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80079ec:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80079ee:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80079f0:	f000 fff2 	bl	80089d8 <HAL_DMA_Init>
 80079f4:	b958      	cbnz	r0, 8007a0e <HAL_ADC_MspInit+0x96>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80079f6:	2200      	movs	r2, #0
 80079f8:	2012      	movs	r0, #18
 80079fa:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80079fc:	646e      	str	r6, [r5, #68]	; 0x44
 80079fe:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8007a00:	f000 feec 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8007a04:	2012      	movs	r0, #18
 8007a06:	f000 ff27 	bl	8008858 <HAL_NVIC_EnableIRQ>
}
 8007a0a:	b008      	add	sp, #32
 8007a0c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007a0e:	f7ff ff8f 	bl	8007930 <Error_Handler>
 8007a12:	e7f0      	b.n	80079f6 <HAL_ADC_MspInit+0x7e>
 8007a14:	40012400 	.word	0x40012400
 8007a18:	2000045c 	.word	0x2000045c
 8007a1c:	40020000 	.word	0x40020000
 8007a20:	40026008 	.word	0x40026008

08007a24 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8007a24:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <HAL_ADC_MspDeInit+0x30>)
 8007a26:	6802      	ldr	r2, [r0, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d000      	beq.n	8007a2e <HAL_ADC_MspDeInit+0xa>
 8007a2c:	4770      	bx	lr
{
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007a32:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <HAL_ADC_MspDeInit+0x34>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007a34:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007a36:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007a38:	4808      	ldr	r0, [pc, #32]	; (8007a5c <HAL_ADC_MspDeInit+0x38>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 8007a3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a3e:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8007a40:	f001 fa68 	bl	8008f14 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8007a44:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007a46:	f000 ffff 	bl	8008a48 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8007a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(ADC1_IRQn);
 8007a4e:	2012      	movs	r0, #18
 8007a50:	f000 bf10 	b.w	8008874 <HAL_NVIC_DisableIRQ>
 8007a54:	40012400 	.word	0x40012400
 8007a58:	40023800 	.word	0x40023800
 8007a5c:	40020000 	.word	0x40020000

08007a60 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a60:	2300      	movs	r3, #0
{
 8007a62:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 8007a64:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <HAL_DAC_MspInit+0x58>)
 8007a66:	6801      	ldr	r1, [r0, #0]
{
 8007a68:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 8007a6a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a70:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007a74:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8007a76:	d001      	beq.n	8007a7c <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8007a78:	b009      	add	sp, #36	; 0x24
 8007a7a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007a7c:	2430      	movs	r4, #48	; 0x30
 8007a7e:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8007a80:	4b0e      	ldr	r3, [pc, #56]	; (8007abc <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a82:	480f      	ldr	r0, [pc, #60]	; (8007ac0 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8007a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a86:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8007a88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a90:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8007a94:	9200      	str	r2, [sp, #0]
 8007a96:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a98:	69da      	ldr	r2, [r3, #28]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	61da      	str	r2, [r3, #28]
 8007aa0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007aa2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	9301      	str	r3, [sp, #4]
 8007aac:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aae:	f001 f947 	bl	8008d40 <HAL_GPIO_Init>
}
 8007ab2:	b009      	add	sp, #36	; 0x24
 8007ab4:	bd30      	pop	{r4, r5, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40007400 	.word	0x40007400
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	40020000 	.word	0x40020000

08007ac4 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac4:	2300      	movs	r3, #0
{
 8007ac6:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8007ac8:	4a16      	ldr	r2, [pc, #88]	; (8007b24 <HAL_I2C_MspInit+0x60>)
 8007aca:	6801      	ldr	r1, [r0, #0]
{
 8007acc:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 8007ace:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ad4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007ad8:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 8007ada:	d001      	beq.n	8007ae0 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007adc:	b008      	add	sp, #32
 8007ade:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ae0:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007ae2:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ae4:	26c0      	movs	r6, #192	; 0xc0
 8007ae6:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ae8:	4c0f      	ldr	r4, [pc, #60]	; (8007b28 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aec:	69e3      	ldr	r3, [r4, #28]
 8007aee:	f043 0302 	orr.w	r3, r3, #2
 8007af2:	61e3      	str	r3, [r4, #28]
 8007af4:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af6:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007afe:	480b      	ldr	r0, [pc, #44]	; (8007b2c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b02:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b06:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b08:	f001 f91a 	bl	8008d40 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b12:	6263      	str	r3, [r4, #36]	; 0x24
 8007b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	9b01      	ldr	r3, [sp, #4]
}
 8007b1e:	b008      	add	sp, #32
 8007b20:	bdd0      	pop	{r4, r6, r7, pc}
 8007b22:	bf00      	nop
 8007b24:	40005400 	.word	0x40005400
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	40020400 	.word	0x40020400

08007b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b30:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8007b32:	6803      	ldr	r3, [r0, #0]
{
 8007b34:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3a:	d026      	beq.n	8007b8a <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8007b3c:	4a44      	ldr	r2, [pc, #272]	; (8007c50 <HAL_TIM_Base_MspInit+0x120>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d039      	beq.n	8007bb6 <HAL_TIM_Base_MspInit+0x86>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8007b42:	4a44      	ldr	r2, [pc, #272]	; (8007c54 <HAL_TIM_Base_MspInit+0x124>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d04b      	beq.n	8007be0 <HAL_TIM_Base_MspInit+0xb0>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8007b48:	4a43      	ldr	r2, [pc, #268]	; (8007c58 <HAL_TIM_Base_MspInit+0x128>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d008      	beq.n	8007b60 <HAL_TIM_Base_MspInit+0x30>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8007b4e:	4a43      	ldr	r2, [pc, #268]	; (8007c5c <HAL_TIM_Base_MspInit+0x12c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d05a      	beq.n	8007c0a <HAL_TIM_Base_MspInit+0xda>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8007b54:	4a42      	ldr	r2, [pc, #264]	; (8007c60 <HAL_TIM_Base_MspInit+0x130>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d068      	beq.n	8007c2c <HAL_TIM_Base_MspInit+0xfc>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8007b5a:	b007      	add	sp, #28
 8007b5c:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007b60:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007b62:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007b64:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007b66:	6a19      	ldr	r1, [r3, #32]
 8007b68:	f041 0104 	orr.w	r1, r1, #4
 8007b6c:	6219      	str	r1, [r3, #32]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007b70:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 8007b7a:	f000 fe2f 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8007b7e:	2019      	movs	r0, #25
}
 8007b80:	b007      	add	sp, #28
 8007b82:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007b86:	f000 be67 	b.w	8008858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007b8a:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b8c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007b92:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b94:	f041 0101 	orr.w	r1, r1, #1
 8007b98:	6259      	str	r1, [r3, #36]	; 0x24
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007b9c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007ba6:	f000 fe19 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007baa:	201c      	movs	r0, #28
}
 8007bac:	b007      	add	sp, #28
 8007bae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007bb2:	f000 be51 	b.w	8008858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007bb6:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bb8:	4b2a      	ldr	r3, [pc, #168]	; (8007c64 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007bba:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bbc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bbe:	f041 0102 	orr.w	r1, r1, #2
 8007bc2:	6259      	str	r1, [r3, #36]	; 0x24
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007bc6:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007bd0:	f000 fe04 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007bd4:	201d      	movs	r0, #29
}
 8007bd6:	b007      	add	sp, #28
 8007bd8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007bdc:	f000 be3c 	b.w	8008858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007be0:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007be2:	4b20      	ldr	r3, [pc, #128]	; (8007c64 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007be4:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007be6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007be8:	f041 0104 	orr.w	r1, r1, #4
 8007bec:	6259      	str	r1, [r3, #36]	; 0x24
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007bf0:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	9302      	str	r3, [sp, #8]
 8007bf8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007bfa:	f000 fdef 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007bfe:	201e      	movs	r0, #30
}
 8007c00:	b007      	add	sp, #28
 8007c02:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007c06:	f000 be27 	b.w	8008858 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c0a:	2200      	movs	r2, #0
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c0c:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c0e:	201a      	movs	r0, #26
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c10:	6a19      	ldr	r1, [r3, #32]
 8007c12:	f041 0108 	orr.w	r1, r1, #8
 8007c16:	6219      	str	r1, [r3, #32]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c1a:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM10_IRQn, 0, 0);
 8007c24:	f000 fdda 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 8007c28:	201a      	movs	r0, #26
 8007c2a:	e7a9      	b.n	8007b80 <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007c2c:	2200      	movs	r2, #0
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <HAL_TIM_Base_MspInit+0x134>)
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007c30:	201b      	movs	r0, #27
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007c32:	6a19      	ldr	r1, [r3, #32]
 8007c34:	f041 0110 	orr.w	r1, r1, #16
 8007c38:	6219      	str	r1, [r3, #32]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007c3c:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	9305      	str	r3, [sp, #20]
 8007c44:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM11_IRQn, 0, 0);
 8007c46:	f000 fdc9 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM11_IRQn);
 8007c4a:	201b      	movs	r0, #27
 8007c4c:	e798      	b.n	8007b80 <HAL_TIM_Base_MspInit+0x50>
 8007c4e:	bf00      	nop
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800
 8007c58:	40010800 	.word	0x40010800
 8007c5c:	40010c00 	.word	0x40010c00
 8007c60:	40011000 	.word	0x40011000
 8007c64:	40023800 	.word	0x40023800

08007c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c68:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c6a:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8007c6c:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <HAL_UART_MspInit+0xcc>)
 8007c6e:	6802      	ldr	r2, [r0, #0]
{
 8007c70:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8007c72:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c74:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007c78:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007c7c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8007c7e:	d001      	beq.n	8007c84 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c80:	b008      	add	sp, #32
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c84:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c90:	621a      	str	r2, [r3, #32]
 8007c92:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c94:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c96:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007c9a:	9200      	str	r2, [sp, #0]
 8007c9c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9e:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007ca0:	4e25      	ldr	r6, [pc, #148]	; (8007d38 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	61da      	str	r2, [r3, #28]
 8007ca8:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007caa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007cb4:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb6:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb8:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007cbe:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cc0:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc2:	481e      	ldr	r0, [pc, #120]	; (8007d3c <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007cc4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc6:	f001 f83b 	bl	8008d40 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007cca:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007ccc:	4a1c      	ldr	r2, [pc, #112]	; (8007d40 <HAL_UART_MspInit+0xd8>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007cce:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8007cd0:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007cd4:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007cd8:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cdc:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007cde:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007ce0:	f000 fe7a 	bl	80089d8 <HAL_DMA_Init>
 8007ce4:	b9f8      	cbnz	r0, 8007d26 <HAL_UART_MspInit+0xbe>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ce6:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007ce8:	4c16      	ldr	r4, [pc, #88]	; (8007d44 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cea:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007cec:	2180      	movs	r1, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007cee:	6062      	str	r2, [r4, #4]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007cf0:	2220      	movs	r2, #32
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007cf2:	e9c4 3102 	strd	r3, r1, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007cf6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007cfa:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007cfc:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <HAL_UART_MspInit+0xe0>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007cfe:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007d00:	63ae      	str	r6, [r5, #56]	; 0x38
 8007d02:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8007d04:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8007d06:	61a2      	str	r2, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007d08:	f000 fe66 	bl	80089d8 <HAL_DMA_Init>
 8007d0c:	b970      	cbnz	r0, 8007d2c <HAL_UART_MspInit+0xc4>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2025      	movs	r0, #37	; 0x25
 8007d12:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8007d14:	636c      	str	r4, [r5, #52]	; 0x34
 8007d16:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007d18:	f000 fd60 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007d1c:	2025      	movs	r0, #37	; 0x25
 8007d1e:	f000 fd9b 	bl	8008858 <HAL_NVIC_EnableIRQ>
}
 8007d22:	b008      	add	sp, #32
 8007d24:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007d26:	f7ff fe03 	bl	8007930 <Error_Handler>
 8007d2a:	e7dc      	b.n	8007ce6 <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8007d2c:	f7ff fe00 	bl	8007930 <Error_Handler>
 8007d30:	e7ed      	b.n	8007d0e <HAL_UART_MspInit+0xa6>
 8007d32:	bf00      	nop
 8007d34:	40013800 	.word	0x40013800
 8007d38:	200004a0 	.word	0x200004a0
 8007d3c:	40020000 	.word	0x40020000
 8007d40:	40026058 	.word	0x40026058
 8007d44:	200004e4 	.word	0x200004e4
 8007d48:	40026044 	.word	0x40026044

08007d4c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d4c:	e7fe      	b.n	8007d4c <NMI_Handler>
 8007d4e:	bf00      	nop

08007d50 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d50:	e7fe      	b.n	8007d50 <HardFault_Handler>
 8007d52:	bf00      	nop

08007d54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d54:	e7fe      	b.n	8007d54 <MemManage_Handler>
 8007d56:	bf00      	nop

08007d58 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d58:	e7fe      	b.n	8007d58 <BusFault_Handler>
 8007d5a:	bf00      	nop

08007d5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d5c:	e7fe      	b.n	8007d5c <UsageFault_Handler>
 8007d5e:	bf00      	nop

08007d60 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop

08007d64 <DebugMon_Handler>:
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <PendSV_Handler>:
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop

08007d6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d6c:	f000 b926 	b.w	8007fbc <HAL_IncTick>

08007d70 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 8007d70:	2001      	movs	r0, #1
 8007d72:	f001 b975 	b.w	8009060 <HAL_GPIO_EXTI_IRQHandler>
 8007d76:	bf00      	nop

08007d78 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 8007d78:	2004      	movs	r0, #4
 8007d7a:	f001 b971 	b.w	8009060 <HAL_GPIO_EXTI_IRQHandler>
 8007d7e:	bf00      	nop

08007d80 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <DMA1_Channel1_IRQHandler+0x8>)
 8007d82:	f000 bf29 	b.w	8008bd8 <HAL_DMA_IRQHandler>
 8007d86:	bf00      	nop
 8007d88:	2000045c 	.word	0x2000045c

08007d8c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <DMA1_Channel4_IRQHandler+0x8>)
 8007d8e:	f000 bf23 	b.w	8008bd8 <HAL_DMA_IRQHandler>
 8007d92:	bf00      	nop
 8007d94:	200004e4 	.word	0x200004e4

08007d98 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007d98:	4801      	ldr	r0, [pc, #4]	; (8007da0 <DMA1_Channel5_IRQHandler+0x8>)
 8007d9a:	f000 bf1d 	b.w	8008bd8 <HAL_DMA_IRQHandler>
 8007d9e:	bf00      	nop
 8007da0:	200004a0 	.word	0x200004a0

08007da4 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8007da4:	4801      	ldr	r0, [pc, #4]	; (8007dac <ADC1_IRQHandler+0x8>)
 8007da6:	f000 bad1 	b.w	800834c <HAL_ADC_IRQHandler>
 8007daa:	bf00      	nop
 8007dac:	200003f4 	.word	0x200003f4

08007db0 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007db0:	4801      	ldr	r0, [pc, #4]	; (8007db8 <USB_LP_IRQHandler+0x8>)
 8007db2:	f001 bc3b 	b.w	800962c <HAL_PCD_IRQHandler>
 8007db6:	bf00      	nop
 8007db8:	200016f0 	.word	0x200016f0

08007dbc <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <TIM9_IRQHandler+0x8>)
 8007dbe:	f002 bff5 	b.w	800adac <HAL_TIM_IRQHandler>
 8007dc2:	bf00      	nop
 8007dc4:	200006c4 	.word	0x200006c4

08007dc8 <TIM10_IRQHandler>:
void TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <TIM10_IRQHandler+0x8>)
 8007dca:	f002 bfef 	b.w	800adac <HAL_TIM_IRQHandler>
 8007dce:	bf00      	nop
 8007dd0:	20000584 	.word	0x20000584

08007dd4 <TIM11_IRQHandler>:
void TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM11_IRQn 0 */

  /* USER CODE END TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <TIM11_IRQHandler+0x8>)
 8007dd6:	f002 bfe9 	b.w	800adac <HAL_TIM_IRQHandler>
 8007dda:	bf00      	nop
 8007ddc:	200005c4 	.word	0x200005c4

08007de0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <TIM2_IRQHandler+0x8>)
 8007de2:	f002 bfe3 	b.w	800adac <HAL_TIM_IRQHandler>
 8007de6:	bf00      	nop
 8007de8:	20000604 	.word	0x20000604

08007dec <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <TIM3_IRQHandler+0x8>)
 8007dee:	f002 bfdd 	b.w	800adac <HAL_TIM_IRQHandler>
 8007df2:	bf00      	nop
 8007df4:	20000644 	.word	0x20000644

08007df8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <TIM4_IRQHandler+0x8>)
 8007dfa:	f002 bfd7 	b.w	800adac <HAL_TIM_IRQHandler>
 8007dfe:	bf00      	nop
 8007e00:	20000684 	.word	0x20000684

08007e04 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <USART1_IRQHandler+0x8>)
 8007e06:	f003 ba9f 	b.w	800b348 <HAL_UART_IRQHandler>
 8007e0a:	bf00      	nop
 8007e0c:	20000704 	.word	0x20000704

08007e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8007e12:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e16:	f001 f923 	bl	8009060 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8007e1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e1e:	f001 f91f 	bl	8009060 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8007e22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e26:	f001 f91b 	bl	8009060 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8007e2a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e2e:	f001 f917 	bl	8009060 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8007e36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007e3a:	f001 b911 	b.w	8009060 <HAL_GPIO_EXTI_IRQHandler>
 8007e3e:	bf00      	nop

08007e40 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007e40:	2001      	movs	r0, #1
 8007e42:	4770      	bx	lr

08007e44 <_kill>:

int _kill(int pid, int sig)
{
 8007e44:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007e46:	f005 fa6b 	bl	800d320 <__errno>
 8007e4a:	2216      	movs	r2, #22
 8007e4c:	4603      	mov	r3, r0
	return -1;
}
 8007e4e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8007e52:	601a      	str	r2, [r3, #0]
}
 8007e54:	bd08      	pop	{r3, pc}
 8007e56:	bf00      	nop

08007e58 <_exit>:

void _exit (int status)
{
 8007e58:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007e5a:	f005 fa61 	bl	800d320 <__errno>
 8007e5e:	2316      	movs	r3, #22
 8007e60:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8007e62:	e7fe      	b.n	8007e62 <_exit+0xa>

08007e64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e64:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e66:	1e16      	subs	r6, r2, #0
 8007e68:	dd07      	ble.n	8007e7a <_read+0x16>
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8007e6e:	f3af 8000 	nop.w
 8007e72:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e76:	42a5      	cmp	r5, r4
 8007e78:	d1f9      	bne.n	8007e6e <_read+0xa>
	}

return len;
}
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	bf00      	nop

08007e80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e80:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e82:	1e16      	subs	r6, r2, #0
 8007e84:	dd07      	ble.n	8007e96 <_write+0x16>
 8007e86:	460c      	mov	r4, r1
 8007e88:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8007e8a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e92:	42ac      	cmp	r4, r5
 8007e94:	d1f9      	bne.n	8007e8a <_write+0xa>
	}
	return len;
}
 8007e96:	4630      	mov	r0, r6
 8007e98:	bd70      	pop	{r4, r5, r6, pc}
 8007e9a:	bf00      	nop

08007e9c <_close>:

int _close(int file)
{
	return -1;
}
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop

08007ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007ea8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007eaa:	604b      	str	r3, [r1, #4]
}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	4770      	bx	lr

08007eb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	4770      	bx	lr

08007eb8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007eb8:	490d      	ldr	r1, [pc, #52]	; (8007ef0 <_sbrk+0x38>)
{
 8007eba:	4603      	mov	r3, r0
 8007ebc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ebe:	4a0d      	ldr	r2, [pc, #52]	; (8007ef4 <_sbrk+0x3c>)
 8007ec0:	4c0d      	ldr	r4, [pc, #52]	; (8007ef8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8007ec2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ec4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8007ec6:	b120      	cbz	r0, 8007ed2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007ec8:	4403      	add	r3, r0
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d807      	bhi.n	8007ede <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007ece:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8007ed0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007ed2:	4c0a      	ldr	r4, [pc, #40]	; (8007efc <_sbrk+0x44>)
 8007ed4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8007ed6:	4403      	add	r3, r0
 8007ed8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8007eda:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8007edc:	d9f7      	bls.n	8007ece <_sbrk+0x16>
    errno = ENOMEM;
 8007ede:	f005 fa1f 	bl	800d320 <__errno>
 8007ee2:	220c      	movs	r2, #12
 8007ee4:	4603      	mov	r3, r0
    return (void *)-1;
 8007ee6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8007eea:	601a      	str	r2, [r3, #0]
}
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000a78 	.word	0x20000a78
 8007ef4:	20008000 	.word	0x20008000
 8007ef8:	00002000 	.word	0x00002000
 8007efc:	20001c10 	.word	0x20001c10

08007f00 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop

08007f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f04:	480c      	ldr	r0, [pc, #48]	; (8007f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007f06:	490d      	ldr	r1, [pc, #52]	; (8007f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007f08:	4a0d      	ldr	r2, [pc, #52]	; (8007f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f0c:	e002      	b.n	8007f14 <LoopCopyDataInit>

08007f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f12:	3304      	adds	r3, #4

08007f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f18:	d3f9      	bcc.n	8007f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f1a:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007f1c:	4c0a      	ldr	r4, [pc, #40]	; (8007f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f20:	e001      	b.n	8007f26 <LoopFillZerobss>

08007f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f24:	3204      	adds	r2, #4

08007f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f28:	d3fb      	bcc.n	8007f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007f2a:	f7ff ffe9 	bl	8007f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f2e:	f005 f9fd 	bl	800d32c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007f32:	f7f9 ff5d 	bl	8001df0 <main>
  bx lr
 8007f36:	4770      	bx	lr
  ldr r0, =_sdata
 8007f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f3c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8007f40:	08011f0c 	.word	0x08011f0c
  ldr r2, =_sbss
 8007f44:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8007f48:	20001c0c 	.word	0x20001c0c

08007f4c <COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f4c:	e7fe      	b.n	8007f4c <COMP_IRQHandler>
	...

08007f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f50:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8007f52:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <HAL_InitTick+0x40>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	b90b      	cbnz	r3, 8007f5c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007f58:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f64:	490b      	ldr	r1, [pc, #44]	; (8007f94 <HAL_InitTick+0x44>)
 8007f66:	4605      	mov	r5, r0
 8007f68:	6808      	ldr	r0, [r1, #0]
 8007f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8007f6e:	f000 fc95 	bl	800889c <HAL_SYSTICK_Config>
 8007f72:	4604      	mov	r4, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1ef      	bne.n	8007f58 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007f78:	2d0f      	cmp	r5, #15
 8007f7a:	d8ed      	bhi.n	8007f58 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	f000 fc2a 	bl	80087dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007f88:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <HAL_InitTick+0x48>)
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	601d      	str	r5, [r3, #0]
}
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	2000001c 	.word	0x2000001c
 8007f94:	20000018 	.word	0x20000018
 8007f98:	20000020 	.word	0x20000020

08007f9c <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f9c:	2003      	movs	r0, #3
{
 8007f9e:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007fa0:	f000 fc0a 	bl	80087b8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007fa4:	200f      	movs	r0, #15
 8007fa6:	f7ff ffd3 	bl	8007f50 <HAL_InitTick>
 8007faa:	b110      	cbz	r0, 8007fb2 <HAL_Init+0x16>
    status = HAL_ERROR;
 8007fac:	2401      	movs	r4, #1
}
 8007fae:	4620      	mov	r0, r4
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	4604      	mov	r4, r0
    HAL_MspInit();
 8007fb4:	f7ff fcbe 	bl	8007934 <HAL_MspInit>
}
 8007fb8:	4620      	mov	r0, r4
 8007fba:	bd10      	pop	{r4, pc}

08007fbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007fbc:	4a03      	ldr	r2, [pc, #12]	; (8007fcc <HAL_IncTick+0x10>)
 8007fbe:	4904      	ldr	r1, [pc, #16]	; (8007fd0 <HAL_IncTick+0x14>)
 8007fc0:	6813      	ldr	r3, [r2, #0]
 8007fc2:	6809      	ldr	r1, [r1, #0]
 8007fc4:	440b      	add	r3, r1
 8007fc6:	6013      	str	r3, [r2, #0]
}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	20000a7c 	.word	0x20000a7c
 8007fd0:	2000001c 	.word	0x2000001c

08007fd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <HAL_GetTick+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
}
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000a7c 	.word	0x20000a7c

08007fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007fe4:	f7ff fff6 	bl	8007fd4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007fe8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8007fea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8007fec:	d002      	beq.n	8007ff4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007fee:	4b04      	ldr	r3, [pc, #16]	; (8008000 <HAL_Delay+0x20>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007ff4:	f7ff ffee 	bl	8007fd4 <HAL_GetTick>
 8007ff8:	1b40      	subs	r0, r0, r5
 8007ffa:	42a0      	cmp	r0, r4
 8007ffc:	d3fa      	bcc.n	8007ff4 <HAL_Delay+0x14>
  {
  }
}
 8007ffe:	bd38      	pop	{r3, r4, r5, pc}
 8008000:	2000001c 	.word	0x2000001c

08008004 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008004:	2800      	cmp	r0, #0
 8008006:	f000 80a9 	beq.w	800815c <HAL_ADC_Init+0x158>
{
 800800a:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800800c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800800e:	4604      	mov	r4, r0
{
 8008010:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008012:	2b00      	cmp	r3, #0
 8008014:	d078      	beq.n	8008108 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008016:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008018:	06d8      	lsls	r0, r3, #27
 800801a:	d453      	bmi.n	80080c4 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800801c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800801e:	4a5c      	ldr	r2, [pc, #368]	; (8008190 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8008020:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008024:	f023 0302 	bic.w	r3, r3, #2
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800802e:	6853      	ldr	r3, [r2, #4]
 8008030:	6861      	ldr	r1, [r4, #4]
 8008032:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008036:	430b      	orrs	r3, r1
 8008038:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800803a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800803e:	fa91 f1a1 	rbit	r1, r1
 8008042:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008044:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8008048:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800804c:	fa93 f3a3 	rbit	r3, r3
 8008050:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008054:	6965      	ldr	r5, [r4, #20]
 8008056:	68e2      	ldr	r2, [r4, #12]
 8008058:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800805c:	432a      	orrs	r2, r5
 800805e:	6a25      	ldr	r5, [r4, #32]
 8008060:	fa0c f101 	lsl.w	r1, ip, r1
 8008064:	432a      	orrs	r2, r5
 8008066:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008068:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800806a:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800806e:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8008070:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008074:	d002      	beq.n	800807c <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8008076:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008078:	4311      	orrs	r1, r2
 800807a:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	6811      	ldr	r1, [r2, #0]
 8008080:	0649      	lsls	r1, r1, #25
 8008082:	d551      	bpl.n	8008128 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8008084:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8008086:	6890      	ldr	r0, [r2, #8]
 8008088:	4942      	ldr	r1, [pc, #264]	; (8008194 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800808a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800808e:	ea01 0100 	and.w	r1, r1, r0
 8008092:	ea41 0103 	orr.w	r1, r1, r3
 8008096:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008098:	d017      	beq.n	80080ca <HAL_ADC_Init+0xc6>
 800809a:	2d01      	cmp	r5, #1
 800809c:	d015      	beq.n	80080ca <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800809e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80080a0:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80080a4:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80080a6:	6891      	ldr	r1, [r2, #8]
 80080a8:	4a3b      	ldr	r2, [pc, #236]	; (8008198 <HAL_ADC_Init+0x194>)
 80080aa:	400a      	ands	r2, r1
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d11f      	bne.n	80080f0 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80080b0:	2000      	movs	r0, #0
 80080b2:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80080b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80080b6:	f023 0303 	bic.w	r3, r3, #3
 80080ba:	f043 0301 	orr.w	r3, r3, #1
 80080be:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80080c0:	b003      	add	sp, #12
 80080c2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80080c4:	2001      	movs	r0, #1
}
 80080c6:	b003      	add	sp, #12
 80080c8:	bd30      	pop	{r4, r5, pc}
 80080ca:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80080ce:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80080d0:	fa91 f1a1 	rbit	r1, r1
 80080d4:	fab1 f081 	clz	r0, r1
 80080d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80080da:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80080de:	3901      	subs	r1, #1
 80080e0:	4081      	lsls	r1, r0
 80080e2:	4329      	orrs	r1, r5
 80080e4:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80080e6:	6891      	ldr	r1, [r2, #8]
 80080e8:	4a2b      	ldr	r2, [pc, #172]	; (8008198 <HAL_ADC_Init+0x194>)
 80080ea:	400a      	ands	r2, r1
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d0df      	beq.n	80080b0 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 80080f0:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80080f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80080f4:	f023 0312 	bic.w	r3, r3, #18
 80080f8:	f043 0310 	orr.w	r3, r3, #16
 80080fc:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008100:	4303      	orrs	r3, r0
 8008102:	6523      	str	r3, [r4, #80]	; 0x50
}
 8008104:	b003      	add	sp, #12
 8008106:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008108:	4a24      	ldr	r2, [pc, #144]	; (800819c <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 800810a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800810c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008110:	6a13      	ldr	r3, [r2, #32]
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	6213      	str	r3, [r2, #32]
 8008118:	6a13      	ldr	r3, [r2, #32]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8008122:	f7ff fc29 	bl	8007978 <HAL_ADC_MspInit>
 8008126:	e776      	b.n	8008016 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8008128:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800812a:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800812c:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800812e:	69e1      	ldr	r1, [r4, #28]
 8008130:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8008134:	6925      	ldr	r5, [r4, #16]
 8008136:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800813a:	d00c      	beq.n	8008156 <HAL_ADC_Init+0x152>
 800813c:	2d01      	cmp	r5, #1
 800813e:	d00a      	beq.n	8008156 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008140:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8008144:	2901      	cmp	r1, #1
 8008146:	d00b      	beq.n	8008160 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8008148:	6850      	ldr	r0, [r2, #4]
 800814a:	4915      	ldr	r1, [pc, #84]	; (80081a0 <HAL_ADC_Init+0x19c>)
 800814c:	4001      	ands	r1, r0
 800814e:	ea41 010c 	orr.w	r1, r1, ip
 8008152:	6051      	str	r1, [r2, #4]
 8008154:	e797      	b.n	8008086 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8008156:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800815a:	e7f1      	b.n	8008140 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 800815c:	2001      	movs	r0, #1
}
 800815e:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8008160:	b968      	cbnz	r0, 800817e <HAL_ADC_Init+0x17a>
 8008162:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8008166:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800816a:	fab1 f081 	clz	r0, r1
 800816e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008170:	3901      	subs	r1, #1
 8008172:	4081      	lsls	r1, r0
 8008174:	ea41 010c 	orr.w	r1, r1, ip
 8008178:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 800817c:	e7e4      	b.n	8008148 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800817e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008180:	f041 0120 	orr.w	r1, r1, #32
 8008184:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008186:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008188:	f041 0101 	orr.w	r1, r1, #1
 800818c:	6521      	str	r1, [r4, #80]	; 0x50
 800818e:	e7db      	b.n	8008148 <HAL_ADC_Init+0x144>
 8008190:	40012700 	.word	0x40012700
 8008194:	c0fff18d 	.word	0xc0fff18d
 8008198:	bf80fffe 	.word	0xbf80fffe
 800819c:	40023800 	.word	0x40023800
 80081a0:	fcfc16ff 	.word	0xfcfc16ff

080081a4 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d075      	beq.n	8008294 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80081a8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80081aa:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80081ac:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80081b0:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80081b2:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4604      	mov	r4, r0
 80081b8:	0655      	lsls	r5, r2, #25
 80081ba:	d453      	bmi.n	8008264 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80081bc:	f06f 001f 	mvn.w	r0, #31
 80081c0:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80081c2:	6858      	ldr	r0, [r3, #4]
 80081c4:	4939      	ldr	r1, [pc, #228]	; (80082ac <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80081c6:	4a3a      	ldr	r2, [pc, #232]	; (80082b0 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80081c8:	4001      	ands	r1, r0
 80081ca:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80081cc:	6899      	ldr	r1, [r3, #8]
 80081ce:	400a      	ands	r2, r1
 80081d0:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80081d2:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80081d4:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80081d6:	4a37      	ldr	r2, [pc, #220]	; (80082b4 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80081d8:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80081da:	4837      	ldr	r0, [pc, #220]	; (80082b8 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80081dc:	0d49      	lsrs	r1, r1, #21
 80081de:	0549      	lsls	r1, r1, #21
 80081e0:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80081e2:	6919      	ldr	r1, [r3, #16]
 80081e4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80081e8:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80081ea:	6959      	ldr	r1, [r3, #20]
 80081ec:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80081f0:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80081f2:	6999      	ldr	r1, [r3, #24]
 80081f4:	4011      	ands	r1, r2
 80081f6:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 80081f8:	69d9      	ldr	r1, [r3, #28]
 80081fa:	4011      	ands	r1, r2
 80081fc:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80081fe:	6a19      	ldr	r1, [r3, #32]
 8008200:	4011      	ands	r1, r2
 8008202:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8008204:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008206:	4011      	ands	r1, r2
 8008208:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 800820a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800820c:	4011      	ands	r1, r2
 800820e:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8008210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008212:	400a      	ands	r2, r1
 8008214:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8008216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8008218:	4928      	ldr	r1, [pc, #160]	; (80082bc <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800821a:	4010      	ands	r0, r2
 800821c:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800821e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8008220:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8008222:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008226:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8008228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800822e:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8008230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008232:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008236:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8008238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800823a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800823e:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8008240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008242:	0d92      	lsrs	r2, r2, #22
 8008244:	0592      	lsls	r2, r2, #22
 8008246:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8008248:	684b      	ldr	r3, [r1, #4]
 800824a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800824e:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8008250:	f7ff fbe8 	bl	8007a24 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008254:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8008256:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8008258:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 800825a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 800825c:	2300      	movs	r3, #0
 800825e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8008262:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800826c:	f7ff feb2 	bl	8007fd4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008270:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008272:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	0650      	lsls	r0, r2, #25
 8008278:	d5a0      	bpl.n	80081bc <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800827a:	f7ff feab 	bl	8007fd4 <HAL_GetTick>
 800827e:	1b40      	subs	r0, r0, r5
 8008280:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008282:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8008284:	d902      	bls.n	800828c <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	0651      	lsls	r1, r2, #25
 800828a:	d405      	bmi.n	8008298 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	0652      	lsls	r2, r2, #25
 8008290:	d4f3      	bmi.n	800827a <HAL_ADC_DeInit+0xd6>
 8008292:	e793      	b.n	80081bc <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 8008294:	2001      	movs	r0, #1
}
 8008296:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008298:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800829a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800829c:	f043 0310 	orr.w	r3, r3, #16
 80082a0:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80082a4:	4303      	orrs	r3, r0
 80082a6:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 80082a8:	e7d8      	b.n	800825c <HAL_ADC_DeInit+0xb8>
 80082aa:	bf00      	nop
 80082ac:	f83c0000 	.word	0xf83c0000
 80082b0:	8080f08c 	.word	0x8080f08c
 80082b4:	fffff000 	.word	0xfffff000
 80082b8:	fe0f8000 	.word	0xfe0f8000
 80082bc:	40012700 	.word	0x40012700

080082c0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80082c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80082c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082c4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80082c8:	d126      	bne.n	8008318 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80082ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80082cc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80082ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80082d2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80082d4:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80082d6:	688a      	ldr	r2, [r1, #8]
 80082d8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80082dc:	d118      	bne.n	8008310 <ADC_DMAConvCplt+0x50>
 80082de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80082e2:	b9aa      	cbnz	r2, 8008310 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80082e4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80082e6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80082ea:	d002      	beq.n	80082f2 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80082ec:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80082ee:	0550      	lsls	r0, r2, #21
 80082f0:	d40e      	bmi.n	8008310 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80082f2:	684a      	ldr	r2, [r1, #4]
 80082f4:	f022 0220 	bic.w	r2, r2, #32
 80082f8:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80082fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008300:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008304:	04d2      	lsls	r2, r2, #19
 8008306:	d403      	bmi.n	8008310 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff f989 	bl	8007628 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008316:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	4718      	bx	r3
 800831e:	bf00      	nop

08008320 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008320:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008322:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008324:	f7ff f972 	bl	800760c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008328:	bd08      	pop	{r3, pc}
 800832a:	bf00      	nop

0800832c <HAL_ADC_ErrorCallback>:
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008330:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8008332:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008334:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800833c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800833e:	f043 0304 	orr.w	r3, r3, #4
 8008342:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008344:	f7ff fff2 	bl	800832c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008348:	bd08      	pop	{r3, pc}
 800834a:	bf00      	nop

0800834c <HAL_ADC_IRQHandler>:
{
 800834c:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800834e:	6803      	ldr	r3, [r0, #0]
{
 8008350:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	0691      	lsls	r1, r2, #26
 8008356:	d502      	bpl.n	800835e <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	0792      	lsls	r2, r2, #30
 800835c:	d445      	bmi.n	80083ea <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	0612      	lsls	r2, r2, #24
 8008362:	d502      	bpl.n	800836a <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	0755      	lsls	r5, r2, #29
 8008368:	d40c      	bmi.n	8008384 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	0655      	lsls	r5, r2, #25
 800836e:	d502      	bpl.n	8008376 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	07d0      	lsls	r0, r2, #31
 8008374:	d46f      	bmi.n	8008456 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	d502      	bpl.n	8008382 <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	0692      	lsls	r2, r2, #26
 8008380:	d45c      	bmi.n	800843c <HAL_ADC_IRQHandler+0xf0>
}
 8008382:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008384:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008386:	06d0      	lsls	r0, r2, #27
 8008388:	d403      	bmi.n	8008392 <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800838a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800838c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008390:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008398:	d11f      	bne.n	80083da <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800839a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800839c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80083a0:	d002      	beq.n	80083a8 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80083a2:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80083a4:	0551      	lsls	r1, r2, #21
 80083a6:	d418      	bmi.n	80083da <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80083a8:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80083aa:	0552      	lsls	r2, r2, #21
 80083ac:	d415      	bmi.n	80083da <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80083ae:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80083b0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80083b4:	d111      	bne.n	80083da <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80083b6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80083ba:	b972      	cbnz	r2, 80083da <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083c2:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80083c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083ca:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80083cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083ce:	05db      	lsls	r3, r3, #23
 80083d0:	d403      	bmi.n	80083da <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80083d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 f9ea 	bl	80087b4 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80083e0:	f06f 020c 	mvn.w	r2, #12
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e7bf      	b.n	800836a <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80083ea:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80083ec:	06d5      	lsls	r5, r2, #27
 80083ee:	d403      	bmi.n	80083f8 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80083f0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80083f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083f6:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80083fe:	d115      	bne.n	800842c <HAL_ADC_IRQHandler+0xe0>
 8008400:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008404:	b992      	cbnz	r2, 800842c <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008408:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 800840c:	d12f      	bne.n	800846e <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	f022 0220 	bic.w	r2, r2, #32
 8008414:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008416:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800841c:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800841e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008420:	04d9      	lsls	r1, r3, #19
 8008422:	d403      	bmi.n	800842c <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008424:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 800842c:	4620      	mov	r0, r4
 800842e:	f7ff f8fb 	bl	8007628 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008432:	f06f 0212 	mvn.w	r2, #18
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	e790      	b.n	800835e <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800843c:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008440:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 8008442:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008444:	f042 0202 	orr.w	r2, r2, #2
 8008448:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800844a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800844c:	f7ff ff6e 	bl	800832c <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	601d      	str	r5, [r3, #0]
}
 8008454:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008456:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008458:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800845a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800845e:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008460:	f7ff f8f0 	bl	8007644 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008464:	f06f 0201 	mvn.w	r2, #1
 8008468:	6823      	ldr	r3, [r4, #0]
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	e783      	b.n	8008376 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800846e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008470:	0550      	lsls	r0, r2, #21
 8008472:	d4db      	bmi.n	800842c <HAL_ADC_IRQHandler+0xe0>
 8008474:	e7cb      	b.n	800840e <HAL_ADC_IRQHandler+0xc2>
 8008476:	bf00      	nop

08008478 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8008478:	2300      	movs	r3, #0
{
 800847a:	b530      	push	{r4, r5, lr}
 800847c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800847e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8008480:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8008484:	2b01      	cmp	r3, #1
 8008486:	f000 80aa 	beq.w	80085de <HAL_ADC_ConfigChannel+0x166>
 800848a:	2301      	movs	r3, #1
 800848c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8008490:	684b      	ldr	r3, [r1, #4]
 8008492:	4602      	mov	r2, r0
 8008494:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8008496:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8008498:	d924      	bls.n	80084e4 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 800849a:	2b0c      	cmp	r3, #12
 800849c:	d866      	bhi.n	800856c <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 800849e:	f04f 0c1f 	mov.w	ip, #31
 80084a2:	680c      	ldr	r4, [r1, #0]
 80084a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084a8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80084aa:	3b23      	subs	r3, #35	; 0x23
 80084ac:	fa04 fe03 	lsl.w	lr, r4, r3
 80084b0:	fa0c f303 	lsl.w	r3, ip, r3
 80084b4:	ea25 0303 	bic.w	r3, r5, r3
 80084b8:	ea43 030e 	orr.w	r3, r3, lr
 80084bc:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 80084be:	2c09      	cmp	r4, #9
 80084c0:	d822      	bhi.n	8008508 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 80084c2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80084c6:	2407      	movs	r4, #7
 80084c8:	6943      	ldr	r3, [r0, #20]
 80084ca:	6889      	ldr	r1, [r1, #8]
 80084cc:	40ac      	lsls	r4, r5
 80084ce:	40a9      	lsls	r1, r5
 80084d0:	ea23 0404 	bic.w	r4, r3, r4
 80084d4:	430c      	orrs	r4, r1
 80084d6:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 80084d8:	2300      	movs	r3, #0
  return tmp_hal_status;
 80084da:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80084dc:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 80084e0:	b003      	add	sp, #12
 80084e2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 80084e4:	f04f 0c1f 	mov.w	ip, #31
 80084e8:	680c      	ldr	r4, [r1, #0]
 80084ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084ee:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80084f0:	3b05      	subs	r3, #5
 80084f2:	fa04 fe03 	lsl.w	lr, r4, r3
 80084f6:	fa0c f303 	lsl.w	r3, ip, r3
 80084fa:	ea25 0303 	bic.w	r3, r5, r3
 80084fe:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 8008502:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8008504:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8008506:	d9dc      	bls.n	80084c2 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8008508:	2c13      	cmp	r4, #19
 800850a:	d844      	bhi.n	8008596 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 800850c:	f04f 0c07 	mov.w	ip, #7
 8008510:	688d      	ldr	r5, [r1, #8]
 8008512:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008516:	6903      	ldr	r3, [r0, #16]
 8008518:	391e      	subs	r1, #30
 800851a:	408d      	lsls	r5, r1
 800851c:	fa0c f101 	lsl.w	r1, ip, r1
 8008520:	ea23 0301 	bic.w	r3, r3, r1
 8008524:	432b      	orrs	r3, r5
 8008526:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008528:	f1a4 0310 	sub.w	r3, r4, #16
 800852c:	2b01      	cmp	r3, #1
 800852e:	d8d3      	bhi.n	80084d8 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8008530:	4b34      	ldr	r3, [pc, #208]	; (8008604 <HAL_ADC_ConfigChannel+0x18c>)
 8008532:	6859      	ldr	r1, [r3, #4]
 8008534:	0209      	lsls	r1, r1, #8
 8008536:	d4cf      	bmi.n	80084d8 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8008538:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800853a:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800853c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008540:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008542:	d1c9      	bne.n	80084d8 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008544:	4b30      	ldr	r3, [pc, #192]	; (8008608 <HAL_ADC_ConfigChannel+0x190>)
 8008546:	4931      	ldr	r1, [pc, #196]	; (800860c <HAL_ADC_ConfigChannel+0x194>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	fba1 1303 	umull	r1, r3, r1, r3
 800854e:	0c9b      	lsrs	r3, r3, #18
 8008550:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0bc      	beq.n	80084d8 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800855e:	9b01      	ldr	r3, [sp, #4]
 8008560:	3b01      	subs	r3, #1
 8008562:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f9      	bne.n	800855e <HAL_ADC_ConfigChannel+0xe6>
 800856a:	e7b5      	b.n	80084d8 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 800856c:	2b12      	cmp	r3, #18
 800856e:	d925      	bls.n	80085bc <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8008570:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8008572:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8008576:	d835      	bhi.n	80085e4 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8008578:	f04f 0c1f 	mov.w	ip, #31
 800857c:	680c      	ldr	r4, [r1, #0]
 800857e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008580:	3b5f      	subs	r3, #95	; 0x5f
 8008582:	fa04 fe03 	lsl.w	lr, r4, r3
 8008586:	fa0c f303 	lsl.w	r3, ip, r3
 800858a:	ea25 0303 	bic.w	r3, r5, r3
 800858e:	ea43 030e 	orr.w	r3, r3, lr
 8008592:	6343      	str	r3, [r0, #52]	; 0x34
 8008594:	e793      	b.n	80084be <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8008596:	2c1a      	cmp	r4, #26
 8008598:	d80d      	bhi.n	80085b6 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 800859a:	2507      	movs	r5, #7
 800859c:	6889      	ldr	r1, [r1, #8]
 800859e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80085a2:	68c3      	ldr	r3, [r0, #12]
 80085a4:	3c3c      	subs	r4, #60	; 0x3c
 80085a6:	40a1      	lsls	r1, r4
 80085a8:	fa05 f404 	lsl.w	r4, r5, r4
 80085ac:	ea23 0304 	bic.w	r3, r3, r4
 80085b0:	430b      	orrs	r3, r1
 80085b2:	60c3      	str	r3, [r0, #12]
 80085b4:	e790      	b.n	80084d8 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80085b6:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80085b8:	680c      	ldr	r4, [r1, #0]
 80085ba:	e7b5      	b.n	8008528 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 80085bc:	f04f 0c1f 	mov.w	ip, #31
 80085c0:	680c      	ldr	r4, [r1, #0]
 80085c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085c6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80085c8:	3b41      	subs	r3, #65	; 0x41
 80085ca:	fa04 fe03 	lsl.w	lr, r4, r3
 80085ce:	fa0c f303 	lsl.w	r3, ip, r3
 80085d2:	ea25 0303 	bic.w	r3, r5, r3
 80085d6:	ea43 030e 	orr.w	r3, r3, lr
 80085da:	6383      	str	r3, [r0, #56]	; 0x38
 80085dc:	e76f      	b.n	80084be <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 80085de:	2002      	movs	r0, #2
}
 80085e0:	b003      	add	sp, #12
 80085e2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 80085e4:	f04f 0c1f 	mov.w	ip, #31
 80085e8:	680c      	ldr	r4, [r1, #0]
 80085ea:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80085ec:	3b7d      	subs	r3, #125	; 0x7d
 80085ee:	fa04 fe03 	lsl.w	lr, r4, r3
 80085f2:	fa0c f303 	lsl.w	r3, ip, r3
 80085f6:	ea25 0303 	bic.w	r3, r5, r3
 80085fa:	ea43 030e 	orr.w	r3, r3, lr
 80085fe:	6303      	str	r3, [r0, #48]	; 0x30
 8008600:	e75d      	b.n	80084be <HAL_ADC_ConfigChannel+0x46>
 8008602:	bf00      	nop
 8008604:	40012700 	.word	0x40012700
 8008608:	20000018 	.word	0x20000018
 800860c:	431bde83 	.word	0x431bde83

08008610 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 8008610:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008614:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 8008616:	2b01      	cmp	r3, #1
 8008618:	d024      	beq.n	8008664 <HAL_ADC_AnalogWDGConfig+0x54>
 800861a:	2301      	movs	r3, #1
{
 800861c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800861e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 8008622:	7a0b      	ldrb	r3, [r1, #8]
 8008624:	4686      	mov	lr, r0
 8008626:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8008628:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 800862a:	d016      	beq.n	800865a <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800862c:	685c      	ldr	r4, [r3, #4]
 800862e:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8008632:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 8008634:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8008638:	6858      	ldr	r0, [r3, #4]
 800863a:	4c0b      	ldr	r4, [pc, #44]	; (8008668 <HAL_ADC_AnalogWDGConfig+0x58>)
 800863c:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 800863e:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 8008640:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 8008642:	4302      	orrs	r2, r0
 8008644:	6858      	ldr	r0, [r3, #4]
 8008646:	4302      	orrs	r2, r0
 8008648:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 800864a:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 800864e:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8008650:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 8008652:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 8008656:	4660      	mov	r0, ip
}
 8008658:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800865a:	6858      	ldr	r0, [r3, #4]
 800865c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8008660:	6058      	str	r0, [r3, #4]
 8008662:	e7e7      	b.n	8008634 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8008664:	2002      	movs	r0, #2
}
 8008666:	4770      	bx	lr
 8008668:	ff3ffde0 	.word	0xff3ffde0

0800866c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800866c:	2300      	movs	r3, #0
{
 800866e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008670:	6802      	ldr	r2, [r0, #0]
{
 8008672:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8008674:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	0659      	lsls	r1, r3, #25
 800867a:	d429      	bmi.n	80086d0 <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800867c:	4b1c      	ldr	r3, [pc, #112]	; (80086f0 <ADC_Enable+0x84>)
 800867e:	4604      	mov	r4, r0
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	481c      	ldr	r0, [pc, #112]	; (80086f4 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8008684:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008686:	fba0 0303 	umull	r0, r3, r0, r3
 800868a:	0c9b      	lsrs	r3, r3, #18
 800868c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8008690:	f041 0101 	orr.w	r1, r1, #1
 8008694:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008696:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	b12b      	cbz	r3, 80086a8 <ADC_Enable+0x3c>
      wait_loop_index--;
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	3b01      	subs	r3, #1
 80086a0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80086a2:	9b01      	ldr	r3, [sp, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1f9      	bne.n	800869c <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 80086a8:	f7ff fc94 	bl	8007fd4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80086ac:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 80086ae:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	065a      	lsls	r2, r3, #25
 80086b4:	d40c      	bmi.n	80086d0 <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80086b6:	f7ff fc8d 	bl	8007fd4 <HAL_GetTick>
 80086ba:	1b43      	subs	r3, r0, r5
 80086bc:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80086be:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80086c0:	d903      	bls.n	80086ca <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80086c8:	d005      	beq.n	80086d6 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	065b      	lsls	r3, r3, #25
 80086ce:	d5f2      	bpl.n	80086b6 <ADC_Enable+0x4a>
  return HAL_OK;
 80086d0:	2000      	movs	r0, #0
}
 80086d2:	b003      	add	sp, #12
 80086d4:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 80086d6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 80086da:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086de:	f043 0310 	orr.w	r3, r3, #16
 80086e2:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80086e6:	4303      	orrs	r3, r0
 80086e8:	6523      	str	r3, [r4, #80]	; 0x50
}
 80086ea:	b003      	add	sp, #12
 80086ec:	bd30      	pop	{r4, r5, pc}
 80086ee:	bf00      	nop
 80086f0:	20000018 	.word	0x20000018
 80086f4:	431bde83 	.word	0x431bde83

080086f8 <HAL_ADC_Start_DMA>:
{
 80086f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 80086fc:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8008700:	2d01      	cmp	r5, #1
 8008702:	d04c      	beq.n	800879e <HAL_ADC_Start_DMA+0xa6>
 8008704:	2301      	movs	r3, #1
 8008706:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 800870a:	4604      	mov	r4, r0
 800870c:	4688      	mov	r8, r1
 800870e:	4617      	mov	r7, r2
 8008710:	f7ff ffac 	bl	800866c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8008714:	4605      	mov	r5, r0
 8008716:	2800      	cmp	r0, #0
 8008718:	d13e      	bne.n	8008798 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 800871a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800871c:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800871e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8008722:	f020 0001 	bic.w	r0, r0, #1
 8008726:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800872a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800872c:	6873      	ldr	r3, [r6, #4]
 800872e:	055b      	lsls	r3, r3, #21
 8008730:	d505      	bpl.n	800873e <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008732:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008734:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800873c:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 800873e:	2100      	movs	r1, #0
 8008740:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008744:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008748:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800874a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800874c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008750:	bf18      	it	ne
 8008752:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008754:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008756:	bf18      	it	ne
 8008758:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800875c:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800875e:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008760:	4f11      	ldr	r7, [pc, #68]	; (80087a8 <HAL_ADC_Start_DMA+0xb0>)
 8008762:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008764:	4f11      	ldr	r7, [pc, #68]	; (80087ac <HAL_ADC_Start_DMA+0xb4>)
 8008766:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008768:	4f11      	ldr	r7, [pc, #68]	; (80087b0 <HAL_ADC_Start_DMA+0xb8>)
 800876a:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800876c:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800876e:	6871      	ldr	r1, [r6, #4]
 8008770:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008774:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008776:	68b1      	ldr	r1, [r6, #8]
 8008778:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800877c:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800877e:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8008782:	f000 f98f 	bl	8008aa4 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800878e:	d103      	bne.n	8008798 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8008790:	689a      	ldr	r2, [r3, #8]
 8008792:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008796:	609a      	str	r2, [r3, #8]
}
 8008798:	4628      	mov	r0, r5
 800879a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800879e:	2502      	movs	r5, #2
}
 80087a0:	4628      	mov	r0, r5
 80087a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a6:	bf00      	nop
 80087a8:	080082c1 	.word	0x080082c1
 80087ac:	08008321 	.word	0x08008321
 80087b0:	08008331 	.word	0x08008331

080087b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop

080087b8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087b8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087bc:	4906      	ldr	r1, [pc, #24]	; (80087d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80087be:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087c0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80087c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087c6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80087d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80087d6:	4770      	bx	lr
 80087d8:	e000ed00 	.word	0xe000ed00

080087dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087dc:	4b1c      	ldr	r3, [pc, #112]	; (8008850 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087de:	b500      	push	{lr}
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087e6:	f1c3 0e07 	rsb	lr, r3, #7
 80087ea:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087ee:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087f2:	bf28      	it	cs
 80087f4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087f8:	f1bc 0f06 	cmp.w	ip, #6
 80087fc:	d91b      	bls.n	8008836 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087fe:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008802:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008804:	fa0c fc03 	lsl.w	ip, ip, r3
 8008808:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800880c:	f04f 3cff 	mov.w	ip, #4294967295
 8008810:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008814:	ea21 010c 	bic.w	r1, r1, ip
 8008818:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800881a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800881c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008820:	db0c      	blt.n	800883c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008822:	0109      	lsls	r1, r1, #4
 8008824:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008828:	b2c9      	uxtb	r1, r1
 800882a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800882e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008832:	f85d fb04 	ldr.w	pc, [sp], #4
 8008836:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008838:	4613      	mov	r3, r2
 800883a:	e7e7      	b.n	800880c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800883c:	4b05      	ldr	r3, [pc, #20]	; (8008854 <HAL_NVIC_SetPriority+0x78>)
 800883e:	f000 000f 	and.w	r0, r0, #15
 8008842:	0109      	lsls	r1, r1, #4
 8008844:	b2c9      	uxtb	r1, r1
 8008846:	4403      	add	r3, r0
 8008848:	7619      	strb	r1, [r3, #24]
 800884a:	f85d fb04 	ldr.w	pc, [sp], #4
 800884e:	bf00      	nop
 8008850:	e000ed00 	.word	0xe000ed00
 8008854:	e000ecfc 	.word	0xe000ecfc

08008858 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008858:	2800      	cmp	r0, #0
 800885a:	db07      	blt.n	800886c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800885c:	2301      	movs	r3, #1
 800885e:	f000 011f 	and.w	r1, r0, #31
 8008862:	4a03      	ldr	r2, [pc, #12]	; (8008870 <HAL_NVIC_EnableIRQ+0x18>)
 8008864:	0940      	lsrs	r0, r0, #5
 8008866:	408b      	lsls	r3, r1
 8008868:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e100 	.word	0xe000e100

08008874 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008874:	2800      	cmp	r0, #0
 8008876:	db0d      	blt.n	8008894 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008878:	2201      	movs	r2, #1
 800887a:	4907      	ldr	r1, [pc, #28]	; (8008898 <HAL_NVIC_DisableIRQ+0x24>)
 800887c:	0943      	lsrs	r3, r0, #5
 800887e:	f000 001f 	and.w	r0, r0, #31
 8008882:	3320      	adds	r3, #32
 8008884:	fa02 f000 	lsl.w	r0, r2, r0
 8008888:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800888c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008890:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	e000e100 	.word	0xe000e100

0800889c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800889c:	3801      	subs	r0, #1
 800889e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80088a2:	d20f      	bcs.n	80088c4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088a8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088ac:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088ae:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088b0:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088b2:	4c05      	ldr	r4, [pc, #20]	; (80088c8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088b4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088b6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088ba:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088bc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80088be:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088c0:	6119      	str	r1, [r3, #16]
 80088c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80088c4:	2001      	movs	r0, #1
 80088c6:	4770      	bx	lr
 80088c8:	e000ed00 	.word	0xe000ed00

080088cc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 80088cc:	b188      	cbz	r0, 80088f2 <HAL_DAC_Init+0x26>
{
 80088ce:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80088d0:	7903      	ldrb	r3, [r0, #4]
 80088d2:	4604      	mov	r4, r0
 80088d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80088d8:	b13b      	cbz	r3, 80088ea <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80088da:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80088dc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80088de:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80088e0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80088e2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80088e4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80088e6:	4618      	mov	r0, r3
}
 80088e8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80088ea:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80088ec:	f7ff f8b8 	bl	8007a60 <HAL_DAC_MspInit>
 80088f0:	e7f3      	b.n	80088da <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80088f2:	2001      	movs	r0, #1
}
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80088f8:	7942      	ldrb	r2, [r0, #5]
 80088fa:	2a01      	cmp	r2, #1
 80088fc:	d02a      	beq.n	8008954 <HAL_DAC_Start+0x5c>
{
 80088fe:	b410      	push	{r4}
 8008900:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008902:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008904:	2201      	movs	r2, #1
 8008906:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008908:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800890a:	6804      	ldr	r4, [r0, #0]
 800890c:	f001 0c10 	and.w	ip, r1, #16
 8008910:	fa02 f20c 	lsl.w	r2, r2, ip
 8008914:	4322      	orrs	r2, r4
 8008916:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8008918:	b979      	cbnz	r1, 800893a <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800891a:	6802      	ldr	r2, [r0, #0]
 800891c:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8008920:	2a3c      	cmp	r2, #60	; 0x3c
 8008922:	d103      	bne.n	800892c <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008924:	6842      	ldr	r2, [r0, #4]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800892c:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 800892e:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8008930:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8008932:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008934:	4610      	mov	r0, r2
}
 8008936:	bc10      	pop	{r4}
 8008938:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800893a:	223c      	movs	r2, #60	; 0x3c
 800893c:	6801      	ldr	r1, [r0, #0]
 800893e:	fa02 fc0c 	lsl.w	ip, r2, ip
 8008942:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8008946:	4561      	cmp	r1, ip
 8008948:	d1f0      	bne.n	800892c <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800894a:	6842      	ldr	r2, [r0, #4]
 800894c:	f042 0202 	orr.w	r2, r2, #2
 8008950:	6042      	str	r2, [r0, #4]
 8008952:	e7eb      	b.n	800892c <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8008954:	2002      	movs	r0, #2
}
 8008956:	4770      	bx	lr

08008958 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008958:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 800895a:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800895c:	6800      	ldr	r0, [r0, #0]
{
 800895e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8008960:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8008962:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8008964:	b949      	cbnz	r1, 800897a <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008966:	9901      	ldr	r1, [sp, #4]
 8008968:	3108      	adds	r1, #8
 800896a:	440a      	add	r2, r1
 800896c:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 800896e:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	6013      	str	r3, [r2, #0]
}
 8008974:	b003      	add	sp, #12
 8008976:	bc10      	pop	{r4}
 8008978:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800897a:	9901      	ldr	r1, [sp, #4]
 800897c:	3114      	adds	r1, #20
 800897e:	440a      	add	r2, r1
 8008980:	9201      	str	r2, [sp, #4]
 8008982:	e7f4      	b.n	800896e <HAL_DAC_SetValue+0x16>

08008984 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008984:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008986:	7940      	ldrb	r0, [r0, #5]
 8008988:	2801      	cmp	r0, #1
 800898a:	d022      	beq.n	80089d2 <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800898c:	2002      	movs	r0, #2
{
 800898e:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008990:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008994:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008998:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 800899c:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800899e:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 80089a0:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80089a2:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80089a6:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80089aa:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80089ac:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80089ae:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80089b2:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 80089b6:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 80089b8:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80089ba:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80089be:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 80089c0:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80089c2:	6822      	ldr	r2, [r4, #0]
 80089c4:	ea22 020c 	bic.w	r2, r2, ip
 80089c8:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80089ca:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 80089cc:	f883 e005 	strb.w	lr, [r3, #5]
}
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 80089d2:	2002      	movs	r0, #2
}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop

080089d8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80089d8:	b370      	cbz	r0, 8008a38 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80089da:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089dc:	2202      	movs	r2, #2
{
 80089de:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80089e0:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089e4:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80089e6:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80089e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80089ec:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089ee:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80089f0:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 80089f4:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 80089f8:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80089fa:	4910      	ldr	r1, [pc, #64]	; (8008a3c <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089fc:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80089fe:	4d10      	ldr	r5, [pc, #64]	; (8008a40 <HAL_DMA_Init+0x68>)
 8008a00:	4401      	add	r1, r0
 8008a02:	fba5 5101 	umull	r5, r1, r5, r1
 8008a06:	0909      	lsrs	r1, r1, #4
 8008a08:	0089      	lsls	r1, r1, #2
 8008a0a:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a0c:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8008a0e:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a12:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a14:	6959      	ldr	r1, [r3, #20]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	6999      	ldr	r1, [r3, #24]
 8008a1a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a1c:	69d9      	ldr	r1, [r3, #28]
 8008a1e:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8008a20:	4908      	ldr	r1, [pc, #32]	; (8008a44 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8008a22:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8008a26:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8008a28:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a2a:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a2c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8008a30:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8008a34:	4620      	mov	r0, r4
}
 8008a36:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008a38:	2001      	movs	r0, #1
}
 8008a3a:	4770      	bx	lr
 8008a3c:	bffd9ff8 	.word	0xbffd9ff8
 8008a40:	cccccccd 	.word	0xcccccccd
 8008a44:	40026000 	.word	0x40026000

08008a48 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8008a48:	b320      	cbz	r0, 8008a94 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008a4a:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a4c:	2101      	movs	r1, #1
{
 8008a4e:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8008a50:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8008a52:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a54:	4810      	ldr	r0, [pc, #64]	; (8008a98 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8008a56:	682a      	ldr	r2, [r5, #0]
 8008a58:	f022 0201 	bic.w	r2, r2, #1
 8008a5c:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008a5e:	4a0f      	ldr	r2, [pc, #60]	; (8008a9c <HAL_DMA_DeInit+0x54>)
 8008a60:	442a      	add	r2, r5
 8008a62:	fba0 0202 	umull	r0, r2, r0, r2
 8008a66:	0912      	lsrs	r2, r2, #4
 8008a68:	0092      	lsls	r2, r2, #2
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a6c:	f002 021c 	and.w	r2, r2, #28
 8008a70:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8008a74:	490a      	ldr	r1, [pc, #40]	; (8008aa0 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8008a76:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8008a78:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8008a7a:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008a7c:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a7e:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8008a80:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8008a84:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8008a88:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8008a8c:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8008a90:	bc30      	pop	{r4, r5}
 8008a92:	4770      	bx	lr
    return HAL_ERROR;
 8008a94:	2001      	movs	r0, #1
}
 8008a96:	4770      	bx	lr
 8008a98:	cccccccd 	.word	0xcccccccd
 8008a9c:	bffd9ff8 	.word	0xbffd9ff8
 8008aa0:	40026000 	.word	0x40026000

08008aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aa4:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008aa6:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008aaa:	2801      	cmp	r0, #1
 8008aac:	d042      	beq.n	8008b34 <HAL_DMA_Start_IT+0x90>
{
 8008aae:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8008ab0:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8008ab2:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8008ab6:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008aba:	42a0      	cmp	r0, r4
 8008abc:	fa5f fe80 	uxtb.w	lr, r0
 8008ac0:	d004      	beq.n	8008acc <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008ac8:	2002      	movs	r0, #2
  }
  return status;
}
 8008aca:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008acc:	2002      	movs	r0, #2
 8008ace:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ad2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008ad4:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ad8:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8008adc:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ade:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8008ae2:	f025 0501 	bic.w	r5, r5, #1
 8008ae6:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ae8:	f000 001c 	and.w	r0, r0, #28
 8008aec:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8008af0:	fa0e f000 	lsl.w	r0, lr, r0
 8008af4:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008af6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008af8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008afc:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8008afe:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b02:	bf0b      	itete	eq
 8008b04:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008b06:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008b08:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008b0a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8008b0c:	b14b      	cbz	r3, 8008b22 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	f043 030e 	orr.w	r3, r3, #14
 8008b14:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8008b16:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b18:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008b1a:	f043 0301 	orr.w	r3, r3, #1
 8008b1e:	6023      	str	r3, [r4, #0]
}
 8008b20:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	f023 0304 	bic.w	r3, r3, #4
 8008b28:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	f043 030a 	orr.w	r3, r3, #10
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	e7f0      	b.n	8008b16 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 8008b34:	2002      	movs	r0, #2
}
 8008b36:	4770      	bx	lr

08008b38 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b38:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8008b3c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b3e:	2a02      	cmp	r2, #2
 8008b40:	d006      	beq.n	8008b50 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b42:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8008b44:	2200      	movs	r2, #0
    return HAL_ERROR;
 8008b46:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b48:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8008b4a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8008b4e:	4770      	bx	lr
{
 8008b50:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b52:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 8008b56:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b5a:	6802      	ldr	r2, [r0, #0]
 8008b5c:	6811      	ldr	r1, [r2, #0]
 8008b5e:	f021 010e 	bic.w	r1, r1, #14
 8008b62:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008b64:	6811      	ldr	r1, [r2, #0]
 8008b66:	f021 0101 	bic.w	r1, r1, #1
 8008b6a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b6c:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8008b70:	f002 021c 	and.w	r2, r2, #28
 8008b74:	fa0e f202 	lsl.w	r2, lr, r2
 8008b78:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008b7a:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008b7e:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 8008b82:	4660      	mov	r0, ip
}
 8008b84:	f85d fb04 	ldr.w	pc, [sp], #4

08008b88 <HAL_DMA_Abort_IT>:
{
 8008b88:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b8a:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8008b8e:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b90:	2a02      	cmp	r2, #2
 8008b92:	d003      	beq.n	8008b9c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b94:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8008b96:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b9c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b9e:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ba2:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008ba4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ba6:	f024 040e 	bic.w	r4, r4, #14
 8008baa:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8008bac:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8008bae:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bb0:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8008bb4:	f025 0501 	bic.w	r5, r5, #1
 8008bb8:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bba:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8008bbc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bbe:	fa0c f202 	lsl.w	r2, ip, r2
 8008bc2:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008bc4:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008bc8:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008bcc:	b111      	cbz	r1, 8008bd4 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8008bce:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8008bd0:	4620      	mov	r0, r4
}
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8008bd4:	4608      	mov	r0, r1
}
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}

08008bd8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008bd8:	2204      	movs	r2, #4
{
 8008bda:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008bdc:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008bde:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008be0:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008be4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008be6:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008be8:	409a      	lsls	r2, r3
 8008bea:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8008bec:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008bee:	d00e      	beq.n	8008c0e <HAL_DMA_IRQHandler+0x36>
 8008bf0:	f014 0f04 	tst.w	r4, #4
 8008bf4:	d00b      	beq.n	8008c0e <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	069b      	lsls	r3, r3, #26
 8008bfa:	d403      	bmi.n	8008c04 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	f023 0304 	bic.w	r3, r3, #4
 8008c02:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8008c04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008c06:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008c08:	b1cb      	cbz	r3, 8008c3e <HAL_DMA_IRQHandler+0x66>
}
 8008c0a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8008c0c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008c0e:	2202      	movs	r2, #2
 8008c10:	409a      	lsls	r2, r3
 8008c12:	420a      	tst	r2, r1
 8008c14:	d015      	beq.n	8008c42 <HAL_DMA_IRQHandler+0x6a>
 8008c16:	f014 0f02 	tst.w	r4, #2
 8008c1a:	d012      	beq.n	8008c42 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	0699      	lsls	r1, r3, #26
 8008c20:	d406      	bmi.n	8008c30 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	f023 030a 	bic.w	r3, r3, #10
 8008c28:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008c30:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 8008c32:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c34:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8008c36:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e5      	bne.n	8008c0a <HAL_DMA_IRQHandler+0x32>
}
 8008c3e:	bc70      	pop	{r4, r5, r6}
 8008c40:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008c42:	2208      	movs	r2, #8
 8008c44:	409a      	lsls	r2, r3
 8008c46:	420a      	tst	r2, r1
 8008c48:	d0f9      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x66>
 8008c4a:	0722      	lsls	r2, r4, #28
 8008c4c:	d5f7      	bpl.n	8008c3e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c4e:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 8008c50:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c52:	f022 020e 	bic.w	r2, r2, #14
 8008c56:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c58:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 8008c5a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c60:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c62:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8008c64:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 8008c68:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	d0e6      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x66>
}
 8008c70:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8008c72:	4708      	bx	r1

08008c74 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d041      	beq.n	8008cfc <HAL_EXTI_SetConfigLine+0x88>
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d03f      	beq.n	8008cfc <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8008c7c:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8008c80:	680b      	ldr	r3, [r1, #0]
{
 8008c82:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8008c84:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8008c88:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008c8a:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8008c8c:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008c90:	d519      	bpl.n	8008cc6 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8008c92:	4d25      	ldr	r5, [pc, #148]	; (8008d28 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008c94:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8008c96:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008c98:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8008c9c:	bf14      	ite	ne
 8008c9e:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8008ca2:	ea24 040c 	biceq.w	r4, r4, ip
 8008ca6:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8008ca8:	4c1f      	ldr	r4, [pc, #124]	; (8008d28 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8008caa:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8008cae:	68e0      	ldr	r0, [r4, #12]
 8008cb0:	bf14      	ite	ne
 8008cb2:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8008cb6:	ea20 000c 	biceq.w	r0, r0, ip
 8008cba:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8008cbc:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8008cc0:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8008cc4:	d01c      	beq.n	8008d00 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8008cc6:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008cc8:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8008cca:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008ccc:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8008cce:	bf4c      	ite	mi
 8008cd0:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8008cd4:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008cd8:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8008cdc:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8008cde:	4a12      	ldr	r2, [pc, #72]	; (8008d28 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008ce0:	d105      	bne.n	8008cee <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8008ce2:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8008ce4:	6853      	ldr	r3, [r2, #4]
 8008ce6:	ea23 030c 	bic.w	r3, r3, ip
 8008cea:	6053      	str	r3, [r2, #4]
}
 8008cec:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8008cee:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8008cf0:	2000      	movs	r0, #0
}
 8008cf2:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8008cf4:	ea43 030c 	orr.w	r3, r3, ip
 8008cf8:	6053      	str	r3, [r2, #4]
}
 8008cfa:	4770      	bx	lr
    return HAL_ERROR;
 8008cfc:	2001      	movs	r0, #1
}
 8008cfe:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d00:	250f      	movs	r5, #15
 8008d02:	f002 021c 	and.w	r2, r2, #28
 8008d06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d0a:	68c8      	ldr	r0, [r1, #12]
 8008d0c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d10:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8008d14:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d16:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d18:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d1a:	fa05 f303 	lsl.w	r3, r5, r3
 8008d1e:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008d22:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8008d24:	6090      	str	r0, [r2, #8]
 8008d26:	e7ce      	b.n	8008cc6 <HAL_EXTI_SetConfigLine+0x52>
 8008d28:	40010400 	.word	0x40010400

08008d2c <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8008d30:	4902      	ldr	r1, [pc, #8]	; (8008d3c <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008d32:	f002 021f 	and.w	r2, r2, #31
 8008d36:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8008d38:	610b      	str	r3, [r1, #16]
}
 8008d3a:	4770      	bx	lr
 8008d3c:	40010400 	.word	0x40010400

08008d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008d44:	680c      	ldr	r4, [r1, #0]
{
 8008d46:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d07c      	beq.n	8008e46 <HAL_GPIO_Init+0x106>
 8008d4c:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008d50:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8008d54:	4673      	mov	r3, lr
 8008d56:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008d58:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8008d5c:	ea15 0a04 	ands.w	sl, r5, r4
 8008d60:	d06b      	beq.n	8008e3a <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008d62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008d66:	f001 0203 	and.w	r2, r1, #3
 8008d6a:	1e57      	subs	r7, r2, #1
 8008d6c:	2f01      	cmp	r7, #1
 8008d6e:	d96d      	bls.n	8008e4c <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d70:	2a03      	cmp	r2, #3
 8008d72:	f040 80ae 	bne.w	8008ed2 <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008d76:	fa02 f20e 	lsl.w	r2, r2, lr
 8008d7a:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d7c:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d7e:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8008d82:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008d86:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8008d8a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d8c:	d055      	beq.n	8008e3a <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008d8e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d90:	4d5a      	ldr	r5, [pc, #360]	; (8008efc <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008d92:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d96:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008d98:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	622a      	str	r2, [r5, #32]
 8008da0:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008da2:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008da6:	f002 0201 	and.w	r2, r2, #1
 8008daa:	9203      	str	r2, [sp, #12]
 8008dac:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8008dae:	f023 0203 	bic.w	r2, r3, #3
 8008db2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008db6:	4e52      	ldr	r6, [pc, #328]	; (8008f00 <HAL_GPIO_Init+0x1c0>)
 8008db8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8008dbc:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008dbe:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008dc0:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008dc4:	d015      	beq.n	8008df2 <HAL_GPIO_Init+0xb2>
 8008dc6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008dca:	42b0      	cmp	r0, r6
 8008dcc:	f000 808c 	beq.w	8008ee8 <HAL_GPIO_Init+0x1a8>
 8008dd0:	4e4c      	ldr	r6, [pc, #304]	; (8008f04 <HAL_GPIO_Init+0x1c4>)
 8008dd2:	42b0      	cmp	r0, r6
 8008dd4:	f000 808c 	beq.w	8008ef0 <HAL_GPIO_Init+0x1b0>
 8008dd8:	4e4b      	ldr	r6, [pc, #300]	; (8008f08 <HAL_GPIO_Init+0x1c8>)
 8008dda:	42b0      	cmp	r0, r6
 8008ddc:	d07e      	beq.n	8008edc <HAL_GPIO_Init+0x19c>
 8008dde:	4e4b      	ldr	r6, [pc, #300]	; (8008f0c <HAL_GPIO_Init+0x1cc>)
 8008de0:	42b0      	cmp	r0, r6
 8008de2:	bf0c      	ite	eq
 8008de4:	f04f 0804 	moveq.w	r8, #4
 8008de8:	f04f 0805 	movne.w	r8, #5
 8008dec:	fa08 f707 	lsl.w	r7, r8, r7
 8008df0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008df2:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8008df6:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8008df8:	4a45      	ldr	r2, [pc, #276]	; (8008f10 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008dfa:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8008dfc:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8008dfe:	4d44      	ldr	r5, [pc, #272]	; (8008f10 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e00:	bf54      	ite	pl
 8008e02:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008e04:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8008e08:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8008e0a:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e0c:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8008e0e:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e10:	bf54      	ite	pl
 8008e12:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008e14:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8008e18:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e1a:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e1c:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8008e1e:	4a3c      	ldr	r2, [pc, #240]	; (8008f10 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e20:	bf54      	ite	pl
 8008e22:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008e24:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8008e28:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8008e2a:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e2c:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8008e2e:	4938      	ldr	r1, [pc, #224]	; (8008f10 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008e30:	bf54      	ite	pl
 8008e32:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008e34:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8008e38:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8008e3a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8008e3c:	fa34 f203 	lsrs.w	r2, r4, r3
 8008e40:	f10e 0e02 	add.w	lr, lr, #2
 8008e44:	d188      	bne.n	8008d58 <HAL_GPIO_Init+0x18>
  }
}
 8008e46:	b005      	add	sp, #20
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008e4c:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8008e50:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008e52:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008e56:	fa09 f90e 	lsl.w	r9, r9, lr
 8008e5a:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008e5e:	fa07 f70e 	lsl.w	r7, r7, lr
 8008e62:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8008e64:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008e66:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8008e6a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e6e:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8008e72:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8008e76:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e7a:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8008e7e:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8008e80:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e82:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008e84:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8008e88:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008e8c:	fa02 f20e 	lsl.w	r2, r2, lr
 8008e90:	fa05 f50e 	lsl.w	r5, r5, lr
 8008e94:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8008e98:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e9a:	f47f af6f 	bne.w	8008d7c <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008e9e:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008ea2:	f003 0807 	and.w	r8, r3, #7
 8008ea6:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008eaa:	fa05 f508 	lsl.w	r5, r5, r8
 8008eae:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008eb0:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8008eb2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008eb6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008eba:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008ebe:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008ec2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008ec4:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008ec8:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8008ecc:	f8c9 5020 	str.w	r5, [r9, #32]
 8008ed0:	e754      	b.n	8008d7c <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ed2:	2703      	movs	r7, #3
 8008ed4:	fa07 f70e 	lsl.w	r7, r7, lr
 8008ed8:	43ff      	mvns	r7, r7
 8008eda:	e7d1      	b.n	8008e80 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008edc:	f04f 0803 	mov.w	r8, #3
 8008ee0:	fa08 f707 	lsl.w	r7, r8, r7
 8008ee4:	433d      	orrs	r5, r7
 8008ee6:	e784      	b.n	8008df2 <HAL_GPIO_Init+0xb2>
 8008ee8:	fa0b f707 	lsl.w	r7, fp, r7
 8008eec:	433d      	orrs	r5, r7
 8008eee:	e780      	b.n	8008df2 <HAL_GPIO_Init+0xb2>
 8008ef0:	f04f 0802 	mov.w	r8, #2
 8008ef4:	fa08 f707 	lsl.w	r7, r8, r7
 8008ef8:	433d      	orrs	r5, r7
 8008efa:	e77a      	b.n	8008df2 <HAL_GPIO_Init+0xb2>
 8008efc:	40023800 	.word	0x40023800
 8008f00:	40020000 	.word	0x40020000
 8008f04:	40020800 	.word	0x40020800
 8008f08:	40020c00 	.word	0x40020c00
 8008f0c:	40021000 	.word	0x40021000
 8008f10:	40010400 	.word	0x40010400

08008f14 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008f14:	2900      	cmp	r1, #0
 8008f16:	f000 8083 	beq.w	8009020 <HAL_GPIO_DeInit+0x10c>
{
 8008f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8008f1e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008f20:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008f22:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008f26:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008f2a:	4e3e      	ldr	r6, [pc, #248]	; (8009024 <HAL_GPIO_DeInit+0x110>)
 8008f2c:	e051      	b.n	8008fd2 <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008f2e:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008f32:	4558      	cmp	r0, fp
 8008f34:	d069      	beq.n	800900a <HAL_GPIO_DeInit+0xf6>
 8008f36:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8009028 <HAL_GPIO_DeInit+0x114>
 8008f3a:	4558      	cmp	r0, fp
 8008f3c:	d068      	beq.n	8009010 <HAL_GPIO_DeInit+0xfc>
 8008f3e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 800902c <HAL_GPIO_DeInit+0x118>
 8008f42:	4558      	cmp	r0, fp
 8008f44:	d069      	beq.n	800901a <HAL_GPIO_DeInit+0x106>
 8008f46:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8009030 <HAL_GPIO_DeInit+0x11c>
 8008f4a:	4558      	cmp	r0, fp
 8008f4c:	bf14      	ite	ne
 8008f4e:	f04f 0b05 	movne.w	fp, #5
 8008f52:	f04f 0b04 	moveq.w	fp, #4
 8008f56:	fa0b f404 	lsl.w	r4, fp, r4
 8008f5a:	45a4      	cmp	ip, r4
 8008f5c:	d113      	bne.n	8008f86 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008f5e:	6834      	ldr	r4, [r6, #0]
 8008f60:	ea24 040e 	bic.w	r4, r4, lr
 8008f64:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008f66:	6874      	ldr	r4, [r6, #4]
 8008f68:	ea24 040e 	bic.w	r4, r4, lr
 8008f6c:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008f6e:	68b4      	ldr	r4, [r6, #8]
 8008f70:	ea24 040e 	bic.w	r4, r4, lr
 8008f74:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008f76:	68f4      	ldr	r4, [r6, #12]
 8008f78:	ea24 040e 	bic.w	r4, r4, lr
 8008f7c:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8008f7e:	68ac      	ldr	r4, [r5, #8]
 8008f80:	ea24 0408 	bic.w	r4, r4, r8
 8008f84:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008f86:	6805      	ldr	r5, [r0, #0]
 8008f88:	005c      	lsls	r4, r3, #1
 8008f8a:	fa0a f404 	lsl.w	r4, sl, r4
 8008f8e:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008f92:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008f96:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008f98:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008f9c:	f003 0507 	and.w	r5, r3, #7
 8008fa0:	f8dc e020 	ldr.w	lr, [ip, #32]
 8008fa4:	00ad      	lsls	r5, r5, #2
 8008fa6:	fa09 f505 	lsl.w	r5, r9, r5
 8008faa:	ea2e 0505 	bic.w	r5, lr, r5
 8008fae:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008fb2:	68c5      	ldr	r5, [r0, #12]
 8008fb4:	ea25 0504 	bic.w	r5, r5, r4
 8008fb8:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8008fba:	6845      	ldr	r5, [r0, #4]
 8008fbc:	ea25 0202 	bic.w	r2, r5, r2
 8008fc0:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008fc2:	6882      	ldr	r2, [r0, #8]
 8008fc4:	ea22 0404 	bic.w	r4, r2, r4
 8008fc8:	6084      	str	r4, [r0, #8]
    }

    position++;
 8008fca:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8008fcc:	fa31 f203 	lsrs.w	r2, r1, r3
 8008fd0:	d019      	beq.n	8009006 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8008fd2:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8008fd6:	ea12 0e01 	ands.w	lr, r2, r1
 8008fda:	d0f6      	beq.n	8008fca <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 8008fdc:	f023 0503 	bic.w	r5, r3, #3
 8008fe0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008fe4:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8009034 <HAL_GPIO_DeInit+0x120>
 8008fe8:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008fec:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8008ff0:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008ff4:	00a4      	lsls	r4, r4, #2
 8008ff6:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008ffa:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008ffc:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8009000:	d195      	bne.n	8008f2e <HAL_GPIO_DeInit+0x1a>
 8009002:	2400      	movs	r4, #0
 8009004:	e7a9      	b.n	8008f5a <HAL_GPIO_DeInit+0x46>
  }
}
 8009006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800900a:	fa07 f404 	lsl.w	r4, r7, r4
 800900e:	e7a4      	b.n	8008f5a <HAL_GPIO_DeInit+0x46>
 8009010:	f04f 0b02 	mov.w	fp, #2
 8009014:	fa0b f404 	lsl.w	r4, fp, r4
 8009018:	e79f      	b.n	8008f5a <HAL_GPIO_DeInit+0x46>
 800901a:	fa0a f404 	lsl.w	r4, sl, r4
 800901e:	e79c      	b.n	8008f5a <HAL_GPIO_DeInit+0x46>
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40010400 	.word	0x40010400
 8009028:	40020800 	.word	0x40020800
 800902c:	40020c00 	.word	0x40020c00
 8009030:	40021000 	.word	0x40021000
 8009034:	40020000 	.word	0x40020000

08009038 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009038:	6903      	ldr	r3, [r0, #16]
 800903a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800903c:	bf14      	ite	ne
 800903e:	2001      	movne	r0, #1
 8009040:	2000      	moveq	r0, #0
 8009042:	4770      	bx	lr

08009044 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009044:	b902      	cbnz	r2, 8009048 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8009046:	0409      	lsls	r1, r1, #16
 8009048:	6181      	str	r1, [r0, #24]
  }
}
 800904a:	4770      	bx	lr

0800904c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800904c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800904e:	ea01 0203 	and.w	r2, r1, r3
 8009052:	ea21 0103 	bic.w	r1, r1, r3
 8009056:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800905a:	6181      	str	r1, [r0, #24]
}
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop

08009060 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009060:	4a04      	ldr	r2, [pc, #16]	; (8009074 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8009062:	6951      	ldr	r1, [r2, #20]
 8009064:	4201      	tst	r1, r0
 8009066:	d100      	bne.n	800906a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8009068:	4770      	bx	lr
{
 800906a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800906c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800906e:	f7fe f937 	bl	80072e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8009072:	bd08      	pop	{r3, pc}
 8009074:	40010400 	.word	0x40010400

08009078 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009078:	2800      	cmp	r0, #0
 800907a:	f000 80b9 	beq.w	80091f0 <HAL_I2C_Init+0x178>
{
 800907e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009080:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009084:	4604      	mov	r4, r0
 8009086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 8098 	beq.w	80091c0 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009090:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009092:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009094:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	f022 0201 	bic.w	r2, r2, #1
 800909e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090b0:	f001 fd1c 	bl	800aaec <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090b4:	6863      	ldr	r3, [r4, #4]
 80090b6:	494f      	ldr	r1, [pc, #316]	; (80091f4 <HAL_I2C_Init+0x17c>)
 80090b8:	428b      	cmp	r3, r1
 80090ba:	d84f      	bhi.n	800915c <HAL_I2C_Init+0xe4>
 80090bc:	4a4e      	ldr	r2, [pc, #312]	; (80091f8 <HAL_I2C_Init+0x180>)
 80090be:	4290      	cmp	r0, r2
 80090c0:	d97c      	bls.n	80091bc <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80090c2:	4d4e      	ldr	r5, [pc, #312]	; (80091fc <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090c4:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80090c6:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090ca:	1e43      	subs	r3, r0, #1
 80090cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d0:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80090d4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80090d6:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80090d8:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80090da:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80090de:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80090e2:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80090e6:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80090e8:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090ea:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80090ec:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80090f0:	ea41 010c 	orr.w	r1, r1, ip
 80090f4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090f6:	69d1      	ldr	r1, [r2, #28]
 80090f8:	ea13 0f0e 	tst.w	r3, lr
 80090fc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8009100:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009104:	d161      	bne.n	80091ca <HAL_I2C_Init+0x152>
 8009106:	2304      	movs	r3, #4
 8009108:	430b      	orrs	r3, r1
 800910a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800910c:	6811      	ldr	r1, [r2, #0]
 800910e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8009112:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8009116:	4303      	orrs	r3, r0
 8009118:	430b      	orrs	r3, r1
 800911a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800911c:	6891      	ldr	r1, [r2, #8]
 800911e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8009122:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8009126:	4303      	orrs	r3, r0
 8009128:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800912c:	430b      	orrs	r3, r1
 800912e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009130:	68d0      	ldr	r0, [r2, #12]
 8009132:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009136:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800913a:	430b      	orrs	r3, r1
 800913c:	4303      	orrs	r3, r0
 800913e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009140:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009142:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800914a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800914c:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800914e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009152:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009154:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8009158:	4608      	mov	r0, r1
}
 800915a:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800915c:	4a28      	ldr	r2, [pc, #160]	; (8009200 <HAL_I2C_Init+0x188>)
 800915e:	4290      	cmp	r0, r2
 8009160:	d92c      	bls.n	80091bc <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8009162:	4d26      	ldr	r5, [pc, #152]	; (80091fc <HAL_I2C_Init+0x184>)
 8009164:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009168:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800916c:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009170:	fb02 f101 	mul.w	r1, r2, r1
 8009174:	4d23      	ldr	r5, [pc, #140]	; (8009204 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009176:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009178:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800917c:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800917e:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009180:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8009184:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8009188:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800918a:	6a15      	ldr	r5, [r2, #32]
 800918c:	3101      	adds	r1, #1
 800918e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8009192:	4329      	orrs	r1, r5
 8009194:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009196:	69d1      	ldr	r1, [r2, #28]
 8009198:	68a5      	ldr	r5, [r4, #8]
 800919a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800919e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80091a2:	b9ad      	cbnz	r5, 80091d0 <HAL_I2C_Init+0x158>
 80091a4:	3801      	subs	r0, #1
 80091a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80091aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80091ae:	3301      	adds	r3, #1
 80091b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091b4:	b1d3      	cbz	r3, 80091ec <HAL_I2C_Init+0x174>
 80091b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ba:	e7a5      	b.n	8009108 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80091bc:	2001      	movs	r0, #1
}
 80091be:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80091c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80091c4:	f7fe fc7e 	bl	8007ac4 <HAL_I2C_MspInit>
 80091c8:	e762      	b.n	8009090 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ce:	e79b      	b.n	8009108 <HAL_I2C_Init+0x90>
 80091d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091d4:	3801      	subs	r0, #1
 80091d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091da:	fbb0 f3f3 	udiv	r3, r0, r3
 80091de:	3301      	adds	r3, #1
 80091e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091e4:	b113      	cbz	r3, 80091ec <HAL_I2C_Init+0x174>
 80091e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091ea:	e78d      	b.n	8009108 <HAL_I2C_Init+0x90>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e78b      	b.n	8009108 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80091f0:	2001      	movs	r0, #1
}
 80091f2:	4770      	bx	lr
 80091f4:	000186a0 	.word	0x000186a0
 80091f8:	001e847f 	.word	0x001e847f
 80091fc:	431bde83 	.word	0x431bde83
 8009200:	003d08ff 	.word	0x003d08ff
 8009204:	10624dd3 	.word	0x10624dd3

08009208 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	4605      	mov	r5, r0
 800920e:	b083      	sub	sp, #12
 8009210:	4699      	mov	r9, r3
 8009212:	4688      	mov	r8, r1
 8009214:	4692      	mov	sl, r2
 8009216:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009218:	f7fe fedc 	bl	8007fd4 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800921c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8009220:	2b20      	cmp	r3, #32
 8009222:	d003      	beq.n	800922c <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8009224:	2002      	movs	r0, #2
  }
}
 8009226:	b003      	add	sp, #12
 8009228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922c:	4606      	mov	r6, r0
 800922e:	e005      	b.n	800923c <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009230:	f7fe fed0 	bl	8007fd4 <HAL_GetTick>
 8009234:	1b80      	subs	r0, r0, r6
 8009236:	2819      	cmp	r0, #25
 8009238:	f200 80f8 	bhi.w	800942c <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800923c:	682c      	ldr	r4, [r5, #0]
 800923e:	69a3      	ldr	r3, [r4, #24]
 8009240:	ea6f 0c03 	mvn.w	ip, r3
 8009244:	f01c 0b02 	ands.w	fp, ip, #2
 8009248:	d0f2      	beq.n	8009230 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800924a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800924e:	2b01      	cmp	r3, #1
 8009250:	d0e8      	beq.n	8009224 <HAL_I2C_Master_Transmit+0x1c>
 8009252:	2301      	movs	r3, #1
 8009254:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	07d9      	lsls	r1, r3, #31
 800925c:	d571      	bpl.n	8009342 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800925e:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009260:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009262:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800926a:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800926c:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009270:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009274:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8009276:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800927a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800927c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8009280:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8009282:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009284:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8009286:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800928a:	2b08      	cmp	r3, #8
 800928c:	d006      	beq.n	800929c <HAL_I2C_Master_Transmit+0x94>
 800928e:	2b01      	cmp	r3, #1
 8009290:	d004      	beq.n	800929c <HAL_I2C_Master_Transmit+0x94>
 8009292:	4293      	cmp	r3, r2
 8009294:	d002      	beq.n	800929c <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009296:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009298:	2b12      	cmp	r3, #18
 800929a:	d103      	bne.n	80092a4 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	1c7b      	adds	r3, r7, #1
 80092a6:	d13e      	bne.n	8009326 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a8:	6963      	ldr	r3, [r4, #20]
 80092aa:	07d8      	lsls	r0, r3, #31
 80092ac:	d5fc      	bpl.n	80092a8 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092ae:	692b      	ldr	r3, [r5, #16]
 80092b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092b4:	d14a      	bne.n	800934c <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092b6:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80092ba:	6121      	str	r1, [r4, #16]
 80092bc:	1c78      	adds	r0, r7, #1
 80092be:	d004      	beq.n	80092ca <HAL_I2C_Master_Transmit+0xc2>
 80092c0:	e0dd      	b.n	800947e <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092c2:	6963      	ldr	r3, [r4, #20]
 80092c4:	055a      	lsls	r2, r3, #21
 80092c6:	f100 80c2 	bmi.w	800944e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092ca:	6963      	ldr	r3, [r4, #20]
 80092cc:	0799      	lsls	r1, r3, #30
 80092ce:	d5f8      	bpl.n	80092c2 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092d0:	2200      	movs	r2, #0
 80092d2:	9201      	str	r2, [sp, #4]
 80092d4:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 80092d6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092d8:	9201      	str	r2, [sp, #4]
 80092da:	69a2      	ldr	r2, [r4, #24]
 80092dc:	9201      	str	r2, [sp, #4]
 80092de:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d075      	beq.n	80093d0 <HAL_I2C_Master_Transmit+0x1c8>
 80092e4:	1c79      	adds	r1, r7, #1
 80092e6:	f040 8081 	bne.w	80093ec <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092ea:	6963      	ldr	r3, [r4, #20]
 80092ec:	061a      	lsls	r2, r3, #24
 80092ee:	d441      	bmi.n	8009374 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092f0:	6963      	ldr	r3, [r4, #20]
 80092f2:	055b      	lsls	r3, r3, #21
 80092f4:	d5f9      	bpl.n	80092ea <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80092f6:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80092f8:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092fa:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80092fe:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8009300:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009302:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009306:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800930a:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800930c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009310:	f043 0304 	orr.w	r3, r3, #4
 8009314:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009316:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009318:	2b04      	cmp	r3, #4
 800931a:	f000 80e6 	beq.w	80094ea <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 800931e:	2001      	movs	r0, #1
}
 8009320:	b003      	add	sp, #12
 8009322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	07d9      	lsls	r1, r3, #31
 800932a:	d4c0      	bmi.n	80092ae <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932c:	f7fe fe52 	bl	8007fd4 <HAL_GetTick>
 8009330:	1b80      	subs	r0, r0, r6
 8009332:	4287      	cmp	r7, r0
 8009334:	f0c0 80b3 	bcc.w	800949e <HAL_I2C_Master_Transmit+0x296>
 8009338:	2f00      	cmp	r7, #0
 800933a:	f000 80b0 	beq.w	800949e <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800933e:	682c      	ldr	r4, [r5, #0]
 8009340:	e7b0      	b.n	80092a4 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	f043 0301 	orr.w	r3, r3, #1
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	e788      	b.n	800925e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800934c:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8009350:	f003 0306 	and.w	r3, r3, #6
 8009354:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8009358:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800935a:	1c7b      	adds	r3, r7, #1
 800935c:	d003      	beq.n	8009366 <HAL_I2C_Master_Transmit+0x15e>
 800935e:	e0b5      	b.n	80094cc <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009360:	6963      	ldr	r3, [r4, #20]
 8009362:	0559      	lsls	r1, r3, #21
 8009364:	d473      	bmi.n	800944e <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009366:	6963      	ldr	r3, [r4, #20]
 8009368:	0718      	lsls	r0, r3, #28
 800936a:	d5f9      	bpl.n	8009360 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800936c:	fa5f f388 	uxtb.w	r3, r8
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	e7a3      	b.n	80092bc <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009374:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8009376:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800937a:	4601      	mov	r1, r0
 800937c:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8009380:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009384:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8009386:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8009388:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800938a:	3b01      	subs	r3, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009390:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8009392:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009394:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8009396:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009398:	d50c      	bpl.n	80093b4 <HAL_I2C_Master_Transmit+0x1ac>
 800939a:	b15a      	cbz	r2, 80093b4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800939c:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800939e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093a2:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 80093a4:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80093a6:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80093ac:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 80093b0:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 80093b2:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80093b4:	1c78      	adds	r0, r7, #1
 80093b6:	d129      	bne.n	800940c <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093b8:	6963      	ldr	r3, [r4, #20]
 80093ba:	0759      	lsls	r1, r3, #29
 80093bc:	d405      	bmi.n	80093ca <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093be:	6963      	ldr	r3, [r4, #20]
 80093c0:	055a      	lsls	r2, r3, #21
 80093c2:	d498      	bmi.n	80092f6 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093c4:	6963      	ldr	r3, [r4, #20]
 80093c6:	0759      	lsls	r1, r3, #29
 80093c8:	d5f9      	bpl.n	80093be <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 80093ca:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d189      	bne.n	80092e4 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80093d2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80093d6:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093dc:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80093de:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80093e2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 80093ea:	e71c      	b.n	8009226 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093ec:	6963      	ldr	r3, [r4, #20]
 80093ee:	0618      	lsls	r0, r3, #24
 80093f0:	d4c0      	bmi.n	8009374 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093f2:	6963      	ldr	r3, [r4, #20]
 80093f4:	0558      	lsls	r0, r3, #21
 80093f6:	f53f af7e 	bmi.w	80092f6 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fa:	f7fe fdeb 	bl	8007fd4 <HAL_GetTick>
 80093fe:	1b80      	subs	r0, r0, r6
 8009400:	4287      	cmp	r7, r0
 8009402:	d379      	bcc.n	80094f8 <HAL_I2C_Master_Transmit+0x2f0>
 8009404:	2f00      	cmp	r7, #0
 8009406:	d077      	beq.n	80094f8 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009408:	682c      	ldr	r4, [r5, #0]
 800940a:	e76b      	b.n	80092e4 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800940c:	6963      	ldr	r3, [r4, #20]
 800940e:	075b      	lsls	r3, r3, #29
 8009410:	d4db      	bmi.n	80093ca <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009412:	6963      	ldr	r3, [r4, #20]
 8009414:	055b      	lsls	r3, r3, #21
 8009416:	f53f af6e 	bmi.w	80092f6 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800941a:	f7fe fddb 	bl	8007fd4 <HAL_GetTick>
 800941e:	1b80      	subs	r0, r0, r6
 8009420:	4287      	cmp	r7, r0
 8009422:	d369      	bcc.n	80094f8 <HAL_I2C_Master_Transmit+0x2f0>
 8009424:	2f00      	cmp	r7, #0
 8009426:	d067      	beq.n	80094f8 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009428:	682c      	ldr	r4, [r5, #0]
 800942a:	e7c3      	b.n	80093b4 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 800942c:	2320      	movs	r3, #32
      return HAL_BUSY;
 800942e:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009430:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009434:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009438:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800943c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800943e:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009442:	f043 0320 	orr.w	r3, r3, #32
 8009446:	642b      	str	r3, [r5, #64]	; 0x40
}
 8009448:	b003      	add	sp, #12
 800944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800944e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009450:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8009454:	2120      	movs	r1, #32
      return HAL_ERROR;
 8009456:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800945e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009460:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009462:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009464:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009468:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800946c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800946e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009472:	f043 0304 	orr.w	r3, r3, #4
 8009476:	642b      	str	r3, [r5, #64]	; 0x40
}
 8009478:	b003      	add	sp, #12
 800947a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800947e:	6963      	ldr	r3, [r4, #20]
 8009480:	079b      	lsls	r3, r3, #30
 8009482:	f53f af25 	bmi.w	80092d0 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	055b      	lsls	r3, r3, #21
 800948a:	d4e0      	bmi.n	800944e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800948c:	f7fe fda2 	bl	8007fd4 <HAL_GetTick>
 8009490:	1b80      	subs	r0, r0, r6
 8009492:	4287      	cmp	r7, r0
 8009494:	d33e      	bcc.n	8009514 <HAL_I2C_Master_Transmit+0x30c>
 8009496:	2f00      	cmp	r7, #0
 8009498:	d03c      	beq.n	8009514 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800949a:	682c      	ldr	r4, [r5, #0]
 800949c:	e70e      	b.n	80092bc <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800949e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80094a0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094a2:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094a4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094a8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094ae:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094b0:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80094b4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094b8:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094ba:	680b      	ldr	r3, [r1, #0]
 80094bc:	05da      	lsls	r2, r3, #23
 80094be:	f57f af2e 	bpl.w	800931e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094c2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 80094c6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094c8:	642b      	str	r3, [r5, #64]	; 0x40
 80094ca:	e6ac      	b.n	8009226 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094cc:	6963      	ldr	r3, [r4, #20]
 80094ce:	071a      	lsls	r2, r3, #28
 80094d0:	f53f af4c 	bmi.w	800936c <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094d4:	6963      	ldr	r3, [r4, #20]
 80094d6:	055a      	lsls	r2, r3, #21
 80094d8:	d4b9      	bmi.n	800944e <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094da:	f7fe fd7b 	bl	8007fd4 <HAL_GetTick>
 80094de:	1b83      	subs	r3, r0, r6
 80094e0:	429f      	cmp	r7, r3
 80094e2:	d317      	bcc.n	8009514 <HAL_I2C_Master_Transmit+0x30c>
 80094e4:	b1b7      	cbz	r7, 8009514 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094e6:	682c      	ldr	r4, [r5, #0]
 80094e8:	e737      	b.n	800935a <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ea:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 80094ec:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ee:	6813      	ldr	r3, [r2, #0]
 80094f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	e696      	b.n	8009226 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094f8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80094fa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094fc:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094fe:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009502:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009506:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8009508:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800950c:	f043 0320 	orr.w	r3, r3, #32
 8009510:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8009512:	e700      	b.n	8009316 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009514:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8009516:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009518:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800951a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800951e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009522:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8009524:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009526:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800952a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800952e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8009530:	e679      	b.n	8009226 <HAL_I2C_Master_Transmit+0x1e>
 8009532:	bf00      	nop

08009534 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009534:	2800      	cmp	r0, #0
 8009536:	d05d      	beq.n	80095f4 <HAL_PCD_Init+0xc0>
{
 8009538:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800953a:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800953e:	4604      	mov	r4, r0
{
 8009540:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009542:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009546:	2b00      	cmp	r3, #0
 8009548:	d04f      	beq.n	80095ea <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800954a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800954c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800954e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8009552:	f002 f831 	bl	800b5b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009556:	6860      	ldr	r0, [r4, #4]
 8009558:	b368      	cbz	r0, 80095b6 <HAL_PCD_Init+0x82>
 800955a:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800955c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009560:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 8009562:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009566:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800956a:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 800956e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009572:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009574:	fa5f f28c 	uxtb.w	r2, ip
 8009578:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 800957a:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800957e:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009582:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8009586:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009588:	d3eb      	bcc.n	8009562 <HAL_PCD_Init+0x2e>
 800958a:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800958c:	4611      	mov	r1, r2
 800958e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009592:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009596:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 800959a:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800959e:	fa5f f28c 	uxtb.w	r2, ip
 80095a2:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095a4:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80095a8:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095ac:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80095b0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095b4:	d3eb      	bcc.n	800958e <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80095b6:	46a4      	mov	ip, r4
 80095b8:	46ee      	mov	lr, sp
 80095ba:	f85c 6b10 	ldr.w	r6, [ip], #16
 80095be:	1d25      	adds	r5, r4, #4
 80095c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80095c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80095c8:	f8dc 3000 	ldr.w	r3, [ip]
 80095cc:	4630      	mov	r0, r6
 80095ce:	f8ce 3000 	str.w	r3, [lr]
 80095d2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80095d6:	f001 fff9 	bl	800b5cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80095da:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80095dc:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80095de:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80095e2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 80095e6:	b006      	add	sp, #24
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80095ea:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 80095ee:	f003 fd59 	bl	800d0a4 <HAL_PCD_MspInit>
 80095f2:	e7aa      	b.n	800954a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80095f4:	2001      	movs	r0, #1
}
 80095f6:	4770      	bx	lr

080095f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80095f8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80095fa:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d012      	beq.n	8009628 <HAL_PCD_Start+0x30>
 8009602:	4604      	mov	r4, r0
 8009604:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8009606:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009608:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800960c:	f001 ffca 	bl	800b5a4 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8009610:	4629      	mov	r1, r5
 8009612:	4620      	mov	r0, r4
 8009614:	f003 fd3a 	bl	800d08c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	f002 fdc7 	bl	800c1ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800961e:	2300      	movs	r3, #0
 8009620:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8009624:	4618      	mov	r0, r3
}
 8009626:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8009628:	2002      	movs	r0, #2
}
 800962a:	bd38      	pop	{r3, r4, r5, pc}

0800962c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800962c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8009632:	6800      	ldr	r0, [r0, #0]
 8009634:	f002 fdbc 	bl	800c1b0 <USB_ReadInterrupts>
 8009638:	0406      	lsls	r6, r0, #16
 800963a:	d443      	bmi.n	80096c4 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	f002 fdb7 	bl	800c1b0 <USB_ReadInterrupts>
 8009642:	0545      	lsls	r5, r0, #21
 8009644:	f100 8180 	bmi.w	8009948 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009648:	6820      	ldr	r0, [r4, #0]
 800964a:	f002 fdb1 	bl	800c1b0 <USB_ReadInterrupts>
 800964e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009652:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8009654:	d007      	beq.n	8009666 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009656:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800965a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965e:	041b      	lsls	r3, r3, #16
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8009666:	f002 fda3 	bl	800c1b0 <USB_ReadInterrupts>
 800966a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800966e:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8009670:	d007      	beq.n	8009682 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009672:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800967a:	041b      	lsls	r3, r3, #16
 800967c:	0c1b      	lsrs	r3, r3, #16
 800967e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8009682:	f002 fd95 	bl	800c1b0 <USB_ReadInterrupts>
 8009686:	04c0      	lsls	r0, r0, #19
 8009688:	f100 81f6 	bmi.w	8009a78 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800968c:	6820      	ldr	r0, [r4, #0]
 800968e:	f002 fd8f 	bl	800c1b0 <USB_ReadInterrupts>
 8009692:	0501      	lsls	r1, r0, #20
 8009694:	f100 81d5 	bmi.w	8009a42 <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	f002 fd89 	bl	800c1b0 <USB_ReadInterrupts>
 800969e:	0582      	lsls	r2, r0, #22
 80096a0:	f100 81c2 	bmi.w	8009a28 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	f002 fd83 	bl	800c1b0 <USB_ReadInterrupts>
 80096aa:	05c3      	lsls	r3, r0, #23
 80096ac:	d508      	bpl.n	80096c0 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80096ae:	6822      	ldr	r2, [r4, #0]
 80096b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80096b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	0c1b      	lsrs	r3, r3, #16
 80096bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 80096c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80096ca:	4610      	mov	r0, r2
 80096cc:	041d      	lsls	r5, r3, #16
 80096ce:	d5b6      	bpl.n	800963e <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80096d0:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8009a20 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80096d4:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8009a24 <HAL_PCD_IRQHandler+0x3f8>
 80096d8:	e011      	b.n	80096fe <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80096da:	f011 0110 	ands.w	r1, r1, #16
 80096de:	f000 8151 	beq.w	8009984 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80096e2:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80096e4:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80096e8:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80096ea:	f040 8176 	bne.w	80099da <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80096ee:	0419      	lsls	r1, r3, #16
 80096f0:	f100 821b 	bmi.w	8009b2a <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80096f4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80096f8:	041e      	lsls	r6, r3, #16
 80096fa:	f140 811f 	bpl.w	800993c <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 80096fe:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8009702:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8009704:	f015 050f 	ands.w	r5, r5, #15
 8009708:	d0e7      	beq.n	80096da <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800970a:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800970e:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009710:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009712:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009716:	f100 80a0 	bmi.w	800985a <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800971a:	f018 0f80 	tst.w	r8, #128	; 0x80
 800971e:	d0e9      	beq.n	80096f4 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009720:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8009724:	1977      	adds	r7, r6, r5
 8009726:	b29b      	uxth	r3, r3
 8009728:	ea03 0309 	and.w	r3, r3, r9
 800972c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009730:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8009734:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8009738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800973c:	2b03      	cmp	r3, #3
 800973e:	f000 80d0 	beq.w	80098e2 <HAL_PCD_IRQHandler+0x2b6>
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 80cd 	beq.w	80098e2 <HAL_PCD_IRQHandler+0x2b6>
 8009748:	2b02      	cmp	r3, #2
 800974a:	d103      	bne.n	8009754 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800974c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8009750:	f000 80c7 	beq.w	80098e2 <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009754:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009758:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800975c:	b29b      	uxth	r3, r3
 800975e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009762:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009766:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800976a:	f000 8255 	beq.w	8009c18 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 800976e:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009772:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8009776:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 800977a:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800977e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8009782:	459e      	cmp	lr, r3
 8009784:	f240 834b 	bls.w	8009e1e <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8009788:	ebae 0e03 	sub.w	lr, lr, r3
 800978c:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8009790:	f1be 0f00 	cmp.w	lr, #0
 8009794:	f000 8346 	beq.w	8009e24 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009798:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 800979c:	d00f      	beq.n	80097be <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800979e:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 80097a2:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 80097a6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 80097aa:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80097ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097b2:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 80097b6:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80097ba:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80097be:	eb06 0e05 	add.w	lr, r6, r5
 80097c2:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 80097c6:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 80097ca:	f1bc 0f01 	cmp.w	ip, #1
 80097ce:	f040 8316 	bne.w	8009dfe <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 80097d2:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80097d6:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80097da:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 80097de:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80097e2:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80097e6:	441a      	add	r2, r3
 80097e8:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80097ec:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 80097f0:	4542      	cmp	r2, r8
 80097f2:	f0c0 83e4 	bcc.w	8009fbe <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 80097f6:	eba2 0208 	sub.w	r2, r2, r8
 80097fa:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097fe:	fa1f f388 	uxth.w	r3, r8
 8009802:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009806:	f1be 0f00 	cmp.w	lr, #0
 800980a:	f040 83cb 	bne.w	8009fa4 <HAL_PCD_IRQHandler+0x978>
 800980e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009812:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009816:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 800981a:	b292      	uxth	r2, r2
 800981c:	eb0e 0102 	add.w	r1, lr, r2
 8009820:	f1b8 0f00 	cmp.w	r8, #0
 8009824:	f040 83f8 	bne.w	800a018 <HAL_PCD_IRQHandler+0x9ec>
 8009828:	f83e 1002 	ldrh.w	r1, [lr, r2]
 800982c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009830:	0409      	lsls	r1, r1, #16
 8009832:	0c09      	lsrs	r1, r1, #16
 8009834:	f82e 1002 	strh.w	r1, [lr, r2]
 8009838:	f83e 1002 	ldrh.w	r1, [lr, r2]
 800983c:	b289      	uxth	r1, r1
 800983e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009842:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009846:	1972      	adds	r2, r6, r5
 8009848:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800984c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800984e:	4661      	mov	r1, ip
 8009850:	f002 fcb2 	bl	800c1b8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	4602      	mov	r2, r0
 8009858:	e2d1      	b.n	8009dfe <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800985a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800985e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8009862:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009864:	4013      	ands	r3, r2
 8009866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800986e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009872:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8009876:	2b00      	cmp	r3, #0
 8009878:	f040 811c 	bne.w	8009ab4 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800987c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009880:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009884:	b29b      	uxth	r3, r3
 8009886:	3306      	adds	r3, #6
 8009888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800988c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009890:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009894:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009898:	461f      	mov	r7, r3
          if (count != 0U)
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 81ac 	bne.w	8009bf8 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 80098a0:	1971      	adds	r1, r6, r5
 80098a2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80098a6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80098aa:	00c9      	lsls	r1, r1, #3
 80098ac:	443a      	add	r2, r7
 80098ae:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80098b2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80098b6:	443a      	add	r2, r7
 80098b8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80098bc:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80098c0:	b122      	cbz	r2, 80098cc <HAL_PCD_IRQHandler+0x2a0>
 80098c2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80098c6:	42bb      	cmp	r3, r7
 80098c8:	f240 819d 	bls.w	8009c06 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80098cc:	1973      	adds	r3, r6, r5
 80098ce:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80098d2:	4620      	mov	r0, r4
 80098d4:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80098d8:	f003 fc0c 	bl	800d0f4 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80098dc:	6820      	ldr	r0, [r4, #0]
 80098de:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80098e0:	e71b      	b.n	800971a <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80098e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80098e6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 80098f0:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80098f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80098f6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 80098fa:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 80098fe:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8009900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009904:	429a      	cmp	r2, r3
 8009906:	f240 8108 	bls.w	8009b1a <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800990e:	2a00      	cmp	r2, #0
 8009910:	f000 8105 	beq.w	8009b1e <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8009914:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8009916:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8009918:	441a      	add	r2, r3
 800991a:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800991c:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 800991e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8009922:	4413      	add	r3, r2
 8009924:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800992a:	f002 f8b7 	bl	800ba9c <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800992e:	6820      	ldr	r0, [r4, #0]
 8009930:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009934:	4602      	mov	r2, r0
 8009936:	041e      	lsls	r6, r3, #16
 8009938:	f53f aee1 	bmi.w	80096fe <HAL_PCD_IRQHandler+0xd2>
 800993c:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800993e:	f002 fc37 	bl	800c1b0 <USB_ReadInterrupts>
 8009942:	0545      	lsls	r5, r0, #21
 8009944:	f57f ae80 	bpl.w	8009648 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009948:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800994a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800994c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009954:	041b      	lsls	r3, r3, #16
 8009956:	0c1b      	lsrs	r3, r3, #16
 8009958:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800995c:	f003 fbe2 	bl	800d124 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8009960:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009964:	2b01      	cmp	r3, #1
 8009966:	f43f ae6f 	beq.w	8009648 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 800996a:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 800996c:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800996e:	4629      	mov	r1, r5
 8009970:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009972:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009976:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800997a:	f002 fc11 	bl	800c1a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800997e:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009982:	e661      	b.n	8009648 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009984:	8803      	ldrh	r3, [r0, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	ea03 0309 	and.w	r3, r3, r9
 800998c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009990:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009992:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009996:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800999a:	b29b      	uxth	r3, r3
 800999c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80099a4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80099a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80099aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ae:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80099b0:	4413      	add	r3, r2
 80099b2:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80099b4:	4620      	mov	r0, r4
 80099b6:	f003 fba7 	bl	800d108 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80099ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80099be:	b363      	cbz	r3, 8009a1a <HAL_PCD_IRQHandler+0x3ee>
 80099c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c2:	bb53      	cbnz	r3, 8009a1a <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80099c4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80099c8:	6820      	ldr	r0, [r4, #0]
 80099ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099ce:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 80099d2:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 80099d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80099d8:	e68c      	b.n	80096f4 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80099da:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80099de:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80099ec:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80099f0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80099f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80099f8:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80099fc:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8009a00:	f002 fbea 	bl	800c1d8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009a08:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009a0a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009a0c:	8811      	ldrh	r1, [r2, #0]
 8009a0e:	400b      	ands	r3, r1
 8009a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a14:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009a16:	f003 fb65 	bl	800d0e4 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	e669      	b.n	80096f4 <HAL_PCD_IRQHandler+0xc8>
 8009a20:	ffff8f0f 	.word	0xffff8f0f
 8009a24:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009a28:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8009a2a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009a2c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a34:	041b      	lsls	r3, r3, #16
 8009a36:	0c1b      	lsrs	r3, r3, #16
 8009a38:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009a3c:	f003 fb6e 	bl	800d11c <HAL_PCD_SOFCallback>
 8009a40:	e630      	b.n	80096a4 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009a42:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8009a44:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009a46:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	f043 0308 	orr.w	r3, r3, #8
 8009a50:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009a54:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a5c:	041b      	lsls	r3, r3, #16
 8009a5e:	0c1b      	lsrs	r3, r3, #16
 8009a60:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009a64:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	f043 0304 	orr.w	r3, r3, #4
 8009a6e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8009a72:	f003 fb69 	bl	800d148 <HAL_PCD_SuspendCallback>
 8009a76:	e60f      	b.n	8009698 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009a78:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8009a7a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009a7c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a80:	f023 0304 	bic.w	r3, r3, #4
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009a8c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a90:	f023 0308 	bic.w	r3, r3, #8
 8009a94:	041b      	lsls	r3, r3, #16
 8009a96:	0c1b      	lsrs	r3, r3, #16
 8009a98:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009a9c:	f003 fb64 	bl	800d168 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aaa:	041b      	lsls	r3, r3, #16
 8009aac:	0c1b      	lsrs	r3, r3, #16
 8009aae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8009ab2:	e5ec      	b.n	800968e <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8009ab4:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	f000 8120 	beq.w	8009cfe <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009abe:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009ac2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	0c1b      	lsrs	r3, r3, #16
 8009ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ada:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009ade:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009ae2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009ae6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009aea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009aee:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009af0:	d06e      	beq.n	8009bd0 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009af2:	3302      	adds	r3, #2
 8009af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009af8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009afc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009b04:	461f      	mov	r7, r3
              if (count != 0U)
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f43f aeca 	beq.w	80098a0 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009b0c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009b10:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009b14:	f002 fb60 	bl	800c1d8 <USB_ReadPMA>
 8009b18:	e6c2      	b.n	80098a0 <HAL_PCD_IRQHandler+0x274>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f003 faf2 	bl	800d108 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	4602      	mov	r2, r0
 8009b28:	e5e4      	b.n	80096f4 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009b2e:	8802      	ldrh	r2, [r0, #0]
 8009b30:	4013      	ands	r3, r2
 8009b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b36:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009b38:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b3c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b4a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b52:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009b56:	b193      	cbz	r3, 8009b7e <HAL_PCD_IRQHandler+0x552>
 8009b58:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8009b5c:	b179      	cbz	r1, 8009b7e <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009b5e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009b62:	f002 fb39 	bl	800c1d8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8009b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b6a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009b6e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8009b70:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009b72:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8009b74:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009b78:	f003 fabc 	bl	800d0f4 <HAL_PCD_DataOutStageCallback>
 8009b7c:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009b7e:	8803      	ldrh	r3, [r0, #0]
 8009b80:	4602      	mov	r2, r0
 8009b82:	051b      	lsls	r3, r3, #20
 8009b84:	f53f adb6 	bmi.w	80096f4 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009b88:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b8c:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8009b96:	2900      	cmp	r1, #0
 8009b98:	f040 80a6 	bne.w	8009ce8 <HAL_PCD_IRQHandler+0x6bc>
 8009b9c:	5ae9      	ldrh	r1, [r5, r3]
 8009b9e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009ba2:	0409      	lsls	r1, r1, #16
 8009ba4:	0c09      	lsrs	r1, r1, #16
 8009ba6:	52e9      	strh	r1, [r5, r3]
 8009ba8:	5ae9      	ldrh	r1, [r5, r3]
 8009baa:	b289      	uxth	r1, r1
 8009bac:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009bb0:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009bb2:	8803      	ldrh	r3, [r0, #0]
 8009bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bbc:	041b      	lsls	r3, r3, #16
 8009bbe:	0c1b      	lsrs	r3, r3, #16
 8009bc0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bcc:	8003      	strh	r3, [r0, #0]
 8009bce:	e591      	b.n	80096f4 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009bd0:	3306      	adds	r3, #6
 8009bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bd6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009bda:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009bde:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009be2:	461f      	mov	r7, r3
              if (count != 0U)
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f43f ae5b 	beq.w	80098a0 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009bea:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009bee:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009bf2:	f002 faf1 	bl	800c1d8 <USB_ReadPMA>
 8009bf6:	e653      	b.n	80098a0 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009bf8:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009bfc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c00:	f002 faea 	bl	800c1d8 <USB_ReadPMA>
 8009c04:	e64c      	b.n	80098a0 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8009c06:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	4421      	add	r1, r4
 8009c0e:	f001 ff45 	bl	800ba9c <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009c12:	6820      	ldr	r0, [r4, #0]
 8009c14:	4602      	mov	r2, r0
 8009c16:	e580      	b.n	800971a <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c18:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8009c1c:	1973      	adds	r3, r6, r5
 8009c1e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009c22:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c26:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8009c2a:	45f3      	cmp	fp, lr
 8009c2c:	f0c0 80a5 	bcc.w	8009d7a <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 8009c30:	ebab 0c0e 	sub.w	ip, fp, lr
 8009c34:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8009c38:	f1bc 0f00 	cmp.w	ip, #0
 8009c3c:	f000 809f 	beq.w	8009d7e <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009c40:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009c44:	d10d      	bne.n	8009c62 <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009c46:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c52:	041b      	lsls	r3, r3, #16
 8009c54:	0c1b      	lsrs	r3, r3, #16
 8009c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8009c62:	1973      	adds	r3, r6, r5
 8009c64:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009c68:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8009c6c:	f1bc 0f01 	cmp.w	ip, #1
 8009c70:	f040 80c5 	bne.w	8009dfe <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8009c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8009c76:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8009c7a:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8009c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8009c80:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8009c84:	4472      	add	r2, lr
 8009c86:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8009c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c8a:	4542      	cmp	r2, r8
 8009c8c:	f0c0 81ab 	bcc.w	8009fe6 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8009c90:	eba2 0208 	sub.w	r2, r2, r8
 8009c94:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009c96:	fa1f fe88 	uxth.w	lr, r8
 8009c9a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 8194 	bne.w	8009fcc <HAL_PCD_IRQHandler+0x9a0>
 8009ca4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009ca8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009cac:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009cb0:	b292      	uxth	r2, r2
 8009cb2:	188b      	adds	r3, r1, r2
 8009cb4:	f1b8 0f00 	cmp.w	r8, #0
 8009cb8:	f040 81d0 	bne.w	800a05c <HAL_PCD_IRQHandler+0xa30>
 8009cbc:	5a8b      	ldrh	r3, [r1, r2]
 8009cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cc2:	041b      	lsls	r3, r3, #16
 8009cc4:	0c1b      	lsrs	r3, r3, #16
 8009cc6:	528b      	strh	r3, [r1, r2]
 8009cc8:	5a8b      	ldrh	r3, [r1, r2]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd0:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009cd2:	1972      	adds	r2, r6, r5
 8009cd4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009cd8:	4673      	mov	r3, lr
 8009cda:	4661      	mov	r1, ip
 8009cdc:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009cde:	f002 fa6b 	bl	800c1b8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	e08a      	b.n	8009dfe <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009ce8:	293e      	cmp	r1, #62	; 0x3e
 8009cea:	f200 80cb 	bhi.w	8009e84 <HAL_PCD_IRQHandler+0x858>
 8009cee:	084e      	lsrs	r6, r1, #1
 8009cf0:	07cf      	lsls	r7, r1, #31
 8009cf2:	bf48      	it	mi
 8009cf4:	3601      	addmi	r6, #1
 8009cf6:	02b1      	lsls	r1, r6, #10
 8009cf8:	b289      	uxth	r1, r1
 8009cfa:	52e9      	strh	r1, [r5, r3]
 8009cfc:	e759      	b.n	8009bb2 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009cfe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d02:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d06:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d08:	f000 80c7 	beq.w	8009e9a <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d0c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009d10:	3302      	adds	r3, #2
 8009d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d16:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009d1a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009d1e:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009d26:	459c      	cmp	ip, r3
 8009d28:	461f      	mov	r7, r3
 8009d2a:	f0c0 8112 	bcc.w	8009f52 <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8009d2e:	ebac 0c03 	sub.w	ip, ip, r3
 8009d32:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009d36:	f1bc 0f00 	cmp.w	ip, #0
 8009d3a:	f000 810e 	beq.w	8009f5a <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009d3e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009d42:	d00d      	beq.n	8009d60 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009d44:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009d48:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009d4c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009d50:	0409      	lsls	r1, r1, #16
 8009d52:	0c09      	lsrs	r1, r1, #16
 8009d54:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009d58:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009d5c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 80c3 	beq.w	8009eec <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009d66:	1971      	adds	r1, r6, r5
 8009d68:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009d6c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009d70:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009d74:	f002 fa30 	bl	800c1d8 <USB_ReadPMA>
 8009d78:	e592      	b.n	80098a0 <HAL_PCD_IRQHandler+0x274>
 8009d7a:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d7e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f040 80be 	bne.w	8009f04 <HAL_PCD_IRQHandler+0x8d8>
 8009d88:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009d8c:	010b      	lsls	r3, r1, #4
 8009d8e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009d92:	4406      	add	r6, r0
 8009d94:	b2ad      	uxth	r5, r5
 8009d96:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d9c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009da0:	0412      	lsls	r2, r2, #16
 8009da2:	0c12      	lsrs	r2, r2, #16
 8009da4:	5372      	strh	r2, [r6, r5]
 8009da6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009da8:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009daa:	b292      	uxth	r2, r2
 8009dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009db0:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009db2:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009db6:	b280      	uxth	r0, r0
 8009db8:	5a1a      	ldrh	r2, [r3, r0]
 8009dba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009dbe:	0412      	lsls	r2, r2, #16
 8009dc0:	0c12      	lsrs	r2, r2, #16
 8009dc2:	521a      	strh	r2, [r3, r0]
 8009dc4:	5a1a      	ldrh	r2, [r3, r0]
 8009dc6:	b292      	uxth	r2, r2
 8009dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dcc:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f003 f99a 	bl	800d108 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009dd4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009dd8:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009dda:	d183      	bne.n	8009ce4 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009ddc:	4602      	mov	r2, r0
 8009dde:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009de2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	0c1b      	lsrs	r3, r3, #16
 8009df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dfa:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009dfe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009e02:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	ea03 030a 	and.w	r3, r3, sl
 8009e0c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e18:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8009e1c:	e46a      	b.n	80096f4 <HAL_PCD_IRQHandler+0xc8>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e24:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d17f      	bne.n	8009f2c <HAL_PCD_IRQHandler+0x900>
 8009e2c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009e30:	010b      	lsls	r3, r1, #4
 8009e32:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009e36:	4406      	add	r6, r0
 8009e38:	b2ad      	uxth	r5, r5
 8009e3a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e40:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009e44:	0412      	lsls	r2, r2, #16
 8009e46:	0c12      	lsrs	r2, r2, #16
 8009e48:	5372      	strh	r2, [r6, r5]
 8009e4a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e4c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e54:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e56:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009e5a:	b280      	uxth	r0, r0
 8009e5c:	5a1a      	ldrh	r2, [r3, r0]
 8009e5e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009e62:	0412      	lsls	r2, r2, #16
 8009e64:	0c12      	lsrs	r2, r2, #16
 8009e66:	521a      	strh	r2, [r3, r0]
 8009e68:	5a1a      	ldrh	r2, [r3, r0]
 8009e6a:	b292      	uxth	r2, r2
 8009e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e70:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e72:	4620      	mov	r0, r4
 8009e74:	f003 f948 	bl	800d108 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e78:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009e7c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e7e:	d1ad      	bne.n	8009ddc <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009e80:	4602      	mov	r2, r0
 8009e82:	e7bc      	b.n	8009dfe <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009e84:	094e      	lsrs	r6, r1, #5
 8009e86:	06c9      	lsls	r1, r1, #27
 8009e88:	4989      	ldr	r1, [pc, #548]	; (800a0b0 <HAL_PCD_IRQHandler+0xa84>)
 8009e8a:	bf08      	it	eq
 8009e8c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009e90:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009e94:	b289      	uxth	r1, r1
 8009e96:	52e9      	strh	r1, [r5, r3]
 8009e98:	e68b      	b.n	8009bb2 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e9a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009e9e:	3306      	adds	r3, #6
 8009ea0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009ea8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009eac:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009eb4:	459e      	cmp	lr, r3
 8009eb6:	461f      	mov	r7, r3
 8009eb8:	d360      	bcc.n	8009f7c <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8009eba:	ebae 0e03 	sub.w	lr, lr, r3
 8009ebe:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009ec2:	f1be 0f00 	cmp.w	lr, #0
 8009ec6:	d05b      	beq.n	8009f80 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009ec8:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009ecc:	d10d      	bne.n	8009eea <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009ece:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009ed2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009ed6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009eda:	0409      	lsls	r1, r1, #16
 8009edc:	0c09      	lsrs	r1, r1, #16
 8009ede:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009ee2:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009ee6:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009eea:	b90b      	cbnz	r3, 8009ef0 <HAL_PCD_IRQHandler+0x8c4>
 8009eec:	461f      	mov	r7, r3
 8009eee:	e4d7      	b.n	80098a0 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ef0:	1971      	adds	r1, r6, r5
 8009ef2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009ef6:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009efa:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009efe:	f002 f96b 	bl	800c1d8 <USB_ReadPMA>
 8009f02:	e4cd      	b.n	80098a0 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	f47f af62 	bne.w	8009dce <HAL_PCD_IRQHandler+0x7a2>
 8009f0a:	2500      	movs	r5, #0
 8009f0c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f10:	010b      	lsls	r3, r1, #4
 8009f12:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009f16:	b292      	uxth	r2, r2
 8009f18:	4406      	add	r6, r0
 8009f1a:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f1c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f24:	4403      	add	r3, r0
 8009f26:	b292      	uxth	r2, r2
 8009f28:	529d      	strh	r5, [r3, r2]
 8009f2a:	e750      	b.n	8009dce <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d1a0      	bne.n	8009e72 <HAL_PCD_IRQHandler+0x846>
 8009f30:	2500      	movs	r5, #0
 8009f32:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f36:	010b      	lsls	r3, r1, #4
 8009f38:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009f3c:	b292      	uxth	r2, r2
 8009f3e:	4406      	add	r6, r0
 8009f40:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f42:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f4a:	4403      	add	r3, r0
 8009f4c:	b292      	uxth	r2, r2
 8009f4e:	529d      	strh	r5, [r3, r2]
 8009f50:	e78f      	b.n	8009e72 <HAL_PCD_IRQHandler+0x846>
 8009f52:	f04f 0c00 	mov.w	ip, #0
 8009f56:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009f5a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009f5e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009f62:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009f66:	0409      	lsls	r1, r1, #16
 8009f68:	0c09      	lsrs	r1, r1, #16
 8009f6a:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009f6e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009f72:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009f76:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009f7a:	e6e0      	b.n	8009d3e <HAL_PCD_IRQHandler+0x712>
 8009f7c:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009f80:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009f84:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009f88:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009f8c:	0409      	lsls	r1, r1, #16
 8009f8e:	0c09      	lsrs	r1, r1, #16
 8009f90:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009f94:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009f98:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009f9c:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009fa0:	e792      	b.n	8009ec8 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009fa2:	b293      	uxth	r3, r2
 8009fa4:	f1be 0f01 	cmp.w	lr, #1
 8009fa8:	f47f ac4d 	bne.w	8009846 <HAL_PCD_IRQHandler+0x21a>
 8009fac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009fb0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009fb4:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009fb8:	b292      	uxth	r2, r2
 8009fba:	528b      	strh	r3, [r1, r2]
 8009fbc:	e443      	b.n	8009846 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 8009fbe:	b9ba      	cbnz	r2, 8009ff0 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8009fc0:	4698      	mov	r8, r3
 8009fc2:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 8009fc6:	e41c      	b.n	8009802 <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009fc8:	fa1f fe82 	uxth.w	lr, r2
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	f47f ae80 	bne.w	8009cd2 <HAL_PCD_IRQHandler+0x6a6>
 8009fd2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009fd6:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 8009fda:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	f822 e003 	strh.w	lr, [r2, r3]
 8009fe4:	e675      	b.n	8009cd2 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 8009fe6:	bb22      	cbnz	r2, 800a032 <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 8009fe8:	46f0      	mov	r8, lr
 8009fea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009fee:	e654      	b.n	8009c9a <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8009ff6:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ffa:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009ffe:	f1be 0f00 	cmp.w	lr, #0
 800a002:	d1ce      	bne.n	8009fa2 <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a004:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a006:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a00a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a00e:	b29b      	uxth	r3, r3
 800a010:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800a014:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a016:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a018:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a01c:	d82b      	bhi.n	800a076 <HAL_PCD_IRQHandler+0xa4a>
 800a01e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a022:	f018 0f01 	tst.w	r8, #1
 800a026:	bf18      	it	ne
 800a028:	3201      	addne	r2, #1
 800a02a:	0292      	lsls	r2, r2, #10
 800a02c:	b292      	uxth	r2, r2
 800a02e:	800a      	strh	r2, [r1, #0]
 800a030:	e409      	b.n	8009846 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 800a032:	f04f 0e00 	mov.w	lr, #0
 800a036:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800a03a:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a03e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1c0      	bne.n	8009fc8 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a046:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a048:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a04c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a050:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 800a054:	b29b      	uxth	r3, r3
 800a056:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a058:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a05c:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a060:	d818      	bhi.n	800a094 <HAL_PCD_IRQHandler+0xa68>
 800a062:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a066:	f018 0f01 	tst.w	r8, #1
 800a06a:	bf18      	it	ne
 800a06c:	3201      	addne	r2, #1
 800a06e:	0292      	lsls	r2, r2, #10
 800a070:	b292      	uxth	r2, r2
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	e62d      	b.n	8009cd2 <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a076:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a07a:	f8df e034 	ldr.w	lr, [pc, #52]	; 800a0b0 <HAL_PCD_IRQHandler+0xa84>
 800a07e:	f018 0f1f 	tst.w	r8, #31
 800a082:	bf08      	it	eq
 800a084:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a088:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800a08c:	b292      	uxth	r2, r2
 800a08e:	800a      	strh	r2, [r1, #0]
 800a090:	f7ff bbd9 	b.w	8009846 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a094:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a098:	4905      	ldr	r1, [pc, #20]	; (800a0b0 <HAL_PCD_IRQHandler+0xa84>)
 800a09a:	f018 0f1f 	tst.w	r8, #31
 800a09e:	bf08      	it	eq
 800a0a0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a0a4:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 800a0a8:	b292      	uxth	r2, r2
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	e611      	b.n	8009cd2 <HAL_PCD_IRQHandler+0x6a6>
 800a0ae:	bf00      	nop
 800a0b0:	ffff8000 	.word	0xffff8000

0800a0b4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800a0b4:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800a0b8:	2a01      	cmp	r2, #1
 800a0ba:	d00e      	beq.n	800a0da <HAL_PCD_SetAddress+0x26>
{
 800a0bc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a0c2:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800a0c4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800a0c8:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a0cc:	f002 f868 	bl	800c1a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a0d6:	4618      	mov	r0, r3
}
 800a0d8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800a0da:	2002      	movs	r0, #2
}
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop

0800a0e0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a0e0:	f001 0c07 	and.w	ip, r1, #7
 800a0e4:	0609      	lsls	r1, r1, #24
{
 800a0e6:	b510      	push	{r4, lr}
 800a0e8:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a0ea:	d425      	bmi.n	800a138 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 800a0ec:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0f0:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800a0f4:	00c0      	lsls	r0, r0, #3
 800a0f6:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800a0fa:	4420      	add	r0, r4
 800a0fc:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a100:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 800a102:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 800a104:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a106:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 800a10a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800a10c:	b10a      	cbz	r2, 800a112 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800a10e:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800a112:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800a114:	bf04      	itt	eq
 800a116:	2300      	moveq	r3, #0
 800a118:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800a11a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d019      	beq.n	800a156 <HAL_PCD_EP_Open+0x76>
 800a122:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a124:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a126:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a12a:	f001 fa63 	bl	800b5f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a12e:	2300      	movs	r3, #0
 800a130:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 800a134:	4618      	mov	r0, r3
}
 800a136:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a138:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 800a13c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a140:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a144:	2001      	movs	r0, #1
 800a146:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a148:	eb0c 0100 	add.w	r1, ip, r0
 800a14c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a150:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 800a154:	e7d5      	b.n	800a102 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 800a156:	2002      	movs	r0, #2
}
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop

0800a15c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a15c:	060b      	lsls	r3, r1, #24
{
 800a15e:	b510      	push	{r4, lr}
 800a160:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a162:	d41b      	bmi.n	800a19c <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a164:	f001 0307 	and.w	r3, r1, #7
 800a168:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a16c:	00d2      	lsls	r2, r2, #3
 800a16e:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a172:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a174:	4402      	add	r2, r0
 800a176:	2000      	movs	r0, #0
 800a178:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a17c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a17e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a182:	2b01      	cmp	r3, #1
 800a184:	d019      	beq.n	800a1ba <HAL_PCD_EP_Close+0x5e>
 800a186:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a188:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a18a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a18e:	f001 fba5 	bl	800b8dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a192:	2300      	movs	r3, #0
 800a194:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a198:	4618      	mov	r0, r3
}
 800a19a:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a19c:	2001      	movs	r0, #1
 800a19e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1a2:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a1a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a1a8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1ac:	4611      	mov	r1, r2
    ep->is_in = 1U;
 800a1ae:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a1b0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a1b2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d1e5      	bne.n	800a186 <HAL_PCD_EP_Close+0x2a>
 800a1ba:	2002      	movs	r0, #2
}
 800a1bc:	bd10      	pop	{r4, pc}
 800a1be:	bf00      	nop

0800a1c0 <HAL_PCD_EP_Receive>:
{
 800a1c0:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 800a1c2:	2400      	movs	r4, #0
 800a1c4:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800a1c8:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800a1cc:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 800a1d0:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a1d4:	6800      	ldr	r0, [r0, #0]
 800a1d6:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800a1da:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 800a1de:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1e2:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a1e6:	f001 fc59 	bl	800ba9c <USB_EPStartXfer>
}
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	bf00      	nop

0800a1f0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a1f0:	f001 0107 	and.w	r1, r1, #7
 800a1f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a1f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800a1fc:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop

0800a204 <HAL_PCD_EP_Transmit>:
{
 800a204:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 800a206:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800a208:	2500      	movs	r5, #0
{
 800a20a:	4604      	mov	r4, r0
 800a20c:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800a210:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a214:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 800a218:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a21c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 800a220:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 800a224:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 800a228:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 800a22c:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 800a230:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 800a234:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 800a238:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a23c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a240:	6800      	ldr	r0, [r0, #0]
 800a242:	f001 fc2b 	bl	800ba9c <USB_EPStartXfer>
}
 800a246:	4628      	mov	r0, r5
 800a248:	bd70      	pop	{r4, r5, r6, pc}
 800a24a:	bf00      	nop

0800a24c <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a24c:	6843      	ldr	r3, [r0, #4]
{
 800a24e:	b510      	push	{r4, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a256:	4298      	cmp	r0, r3
 800a258:	d82d      	bhi.n	800a2b6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 800a25a:	060b      	lsls	r3, r1, #24
 800a25c:	d41a      	bmi.n	800a294 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 800a25e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a262:	00c9      	lsls	r1, r1, #3
 800a264:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 800a268:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800a26a:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 800a272:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a274:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a276:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a278:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d018      	beq.n	800a2b2 <HAL_PCD_EP_SetStall+0x66>
 800a280:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	f001 ff13 	bl	800c0b0 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a28a:	2300      	movs	r3, #0
 800a28c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a290:	4618      	mov	r0, r3
}
 800a292:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a294:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a296:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 800a298:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a29c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a2a0:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2a2:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 800a2a4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2a6:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a2a8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a2aa:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d1e6      	bne.n	800a280 <HAL_PCD_EP_SetStall+0x34>
 800a2b2:	2002      	movs	r0, #2
}
 800a2b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a2b6:	2001      	movs	r0, #1
}
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop

0800a2bc <HAL_PCD_EP_ClrStall>:
{
 800a2bc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a2be:	6843      	ldr	r3, [r0, #4]
 800a2c0:	f001 020f 	and.w	r2, r1, #15
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d832      	bhi.n	800a32e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800a2c8:	060b      	lsls	r3, r1, #24
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	d41c      	bmi.n	800a308 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2ce:	f001 0307 	and.w	r3, r1, #7
 800a2d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a2d6:	00d2      	lsls	r2, r2, #3
 800a2d8:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a2dc:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a2de:	4402      	add	r2, r0
  ep->is_stall = 0U;
 800a2e0:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2e8:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a2ea:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a2ec:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d01a      	beq.n	800a32a <HAL_PCD_EP_ClrStall+0x6e>
 800a2f4:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a2f6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a2f8:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a2fc:	f001 ff00 	bl	800c100 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a300:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a304:	4628      	mov	r0, r5
}
 800a306:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800a308:	2001      	movs	r0, #1
 800a30a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a30e:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a310:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a314:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a318:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800a31a:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800a31c:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a31e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a320:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a322:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a326:	2b01      	cmp	r3, #1
 800a328:	d1e4      	bne.n	800a2f4 <HAL_PCD_EP_ClrStall+0x38>
 800a32a:	2002      	movs	r0, #2
}
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a32e:	2001      	movs	r0, #1
}
 800a330:	bd38      	pop	{r3, r4, r5, pc}
 800a332:	bf00      	nop

0800a334 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a334:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a338:	d00b      	beq.n	800a352 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a33a:	f001 0107 	and.w	r1, r1, #7
 800a33e:	3101      	adds	r1, #1
 800a340:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a344:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a348:	b95a      	cbnz	r2, 800a362 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800a34a:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800a34c:	80cb      	strh	r3, [r1, #6]
 800a34e:	730a      	strb	r2, [r1, #12]
}
 800a350:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800a352:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a356:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a35a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800a35e:	2a00      	cmp	r2, #0
 800a360:	d0f3      	beq.n	800a34a <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 800a362:	2201      	movs	r2, #1
}
 800a364:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a366:	608b      	str	r3, [r1, #8]
 800a368:	730a      	strb	r2, [r1, #12]
}
 800a36a:	4770      	bx	lr

0800a36c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a36c:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 800a36e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a370:	689a      	ldr	r2, [r3, #8]
 800a372:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800a376:	d116      	bne.n	800a3a6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a37a:	00d2      	lsls	r2, r2, #3
 800a37c:	d420      	bmi.n	800a3c0 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a380:	4919      	ldr	r1, [pc, #100]	; (800a3e8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800a382:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a386:	625a      	str	r2, [r3, #36]	; 0x24
 800a388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a38a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a38e:	9201      	str	r2, [sp, #4]
 800a390:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a392:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a394:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a396:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a39a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a39e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3a2:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a3a4:	d013      	beq.n	800a3ce <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a3a6:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a3a8:	4a10      	ldr	r2, [pc, #64]	; (800a3ec <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a3aa:	6813      	ldr	r3, [r2, #0]
 800a3ac:	f023 0301 	bic.w	r3, r3, #1
 800a3b0:	4303      	orrs	r3, r0
 800a3b2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a3ba:	4058      	eors	r0, r3
 800a3bc:	b002      	add	sp, #8
 800a3be:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a3c0:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a3c8:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a3cc:	d1eb      	bne.n	800a3a6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a3ce:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800a3d2:	d1e8      	bne.n	800a3a6 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 800a3d4:	4a05      	ldr	r2, [pc, #20]	; (800a3ec <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800a3d6:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 800a3d8:	6813      	ldr	r3, [r2, #0]
 800a3da:	f043 0304 	orr.w	r3, r3, #4
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e7e2      	b.n	800a3a8 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800a3e2:	bf00      	nop
 800a3e4:	40023800 	.word	0x40023800
 800a3e8:	40007000 	.word	0x40007000
 800a3ec:	40023c00 	.word	0x40023c00

0800a3f0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f000 81f8 	beq.w	800a7e6 <HAL_RCC_OscConfig+0x3f6>
{
 800a3f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3fa:	4aa2      	ldr	r2, [pc, #648]	; (800a684 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3fc:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3fe:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a400:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a402:	07d9      	lsls	r1, r3, #31
 800a404:	4604      	mov	r4, r0
{
 800a406:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a408:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a40c:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a410:	d52e      	bpl.n	800a470 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a412:	2d08      	cmp	r5, #8
 800a414:	f000 8128 	beq.w	800a668 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a418:	2d0c      	cmp	r5, #12
 800a41a:	f000 8122 	beq.w	800a662 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a41e:	6863      	ldr	r3, [r4, #4]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d00f      	beq.n	800a444 <HAL_RCC_OscConfig+0x54>
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 8180 	beq.w	800a72a <HAL_RCC_OscConfig+0x33a>
 800a42a:	2b05      	cmp	r3, #5
 800a42c:	4b95      	ldr	r3, [pc, #596]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	f000 81db 	beq.w	800a7ea <HAL_RCC_OscConfig+0x3fa>
 800a434:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	e004      	b.n	800a44e <HAL_RCC_OscConfig+0x5e>
 800a444:	4a8f      	ldr	r2, [pc, #572]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a44c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a44e:	f7fd fdc1 	bl	8007fd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a452:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800a684 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 800a456:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a458:	e005      	b.n	800a466 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a45a:	f7fd fdbb 	bl	8007fd4 <HAL_GetTick>
 800a45e:	1bc0      	subs	r0, r0, r7
 800a460:	2864      	cmp	r0, #100	; 0x64
 800a462:	f200 815e 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a466:	f8d8 3000 	ldr.w	r3, [r8]
 800a46a:	039b      	lsls	r3, r3, #14
 800a46c:	d5f5      	bpl.n	800a45a <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	0799      	lsls	r1, r3, #30
 800a472:	d522      	bpl.n	800a4ba <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a474:	2d04      	cmp	r5, #4
 800a476:	f000 8114 	beq.w	800a6a2 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a47a:	2d0c      	cmp	r5, #12
 800a47c:	f000 810e 	beq.w	800a69c <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a480:	68e3      	ldr	r3, [r4, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 8179 	beq.w	800a77a <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 800a488:	2201      	movs	r2, #1
 800a48a:	4b7f      	ldr	r3, [pc, #508]	; (800a688 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a48c:	4f7d      	ldr	r7, [pc, #500]	; (800a684 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 800a48e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a490:	f7fd fda0 	bl	8007fd4 <HAL_GetTick>
 800a494:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a496:	e005      	b.n	800a4a4 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a498:	f7fd fd9c 	bl	8007fd4 <HAL_GetTick>
 800a49c:	1b80      	subs	r0, r0, r6
 800a49e:	2802      	cmp	r0, #2
 800a4a0:	f200 813f 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	079b      	lsls	r3, r3, #30
 800a4a8:	d5f6      	bpl.n	800a498 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6922      	ldr	r2, [r4, #16]
 800a4ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a4b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4b6:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	06d9      	lsls	r1, r3, #27
 800a4bc:	d525      	bpl.n	800a50a <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	f000 8098 	beq.w	800a5f4 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a4c4:	69a3      	ldr	r3, [r4, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 816a 	beq.w	800a7a0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	4b6e      	ldr	r3, [pc, #440]	; (800a688 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a4d0:	4e6c      	ldr	r6, [pc, #432]	; (800a684 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 800a4d2:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800a4d4:	f7fd fd7e 	bl	8007fd4 <HAL_GetTick>
 800a4d8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a4da:	e005      	b.n	800a4e8 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a4dc:	f7fd fd7a 	bl	8007fd4 <HAL_GetTick>
 800a4e0:	1bc0      	subs	r0, r0, r7
 800a4e2:	2802      	cmp	r0, #2
 800a4e4:	f200 811d 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a4e8:	6833      	ldr	r3, [r6, #0]
 800a4ea:	059b      	lsls	r3, r3, #22
 800a4ec:	d5f6      	bpl.n	800a4dc <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4ee:	6873      	ldr	r3, [r6, #4]
 800a4f0:	6a22      	ldr	r2, [r4, #32]
 800a4f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4fa:	6873      	ldr	r3, [r6, #4]
 800a4fc:	69e2      	ldr	r2, [r4, #28]
 800a4fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a502:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a506:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	0719      	lsls	r1, r3, #28
 800a50c:	d516      	bpl.n	800a53c <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a50e:	6963      	ldr	r3, [r4, #20]
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8121 	beq.w	800a758 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800a516:	2201      	movs	r2, #1
 800a518:	4b5b      	ldr	r3, [pc, #364]	; (800a688 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a51a:	4f5a      	ldr	r7, [pc, #360]	; (800a684 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 800a51c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a520:	f7fd fd58 	bl	8007fd4 <HAL_GetTick>
 800a524:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a526:	e005      	b.n	800a534 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a528:	f7fd fd54 	bl	8007fd4 <HAL_GetTick>
 800a52c:	1b80      	subs	r0, r0, r6
 800a52e:	2802      	cmp	r0, #2
 800a530:	f200 80f7 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	079a      	lsls	r2, r3, #30
 800a538:	d5f6      	bpl.n	800a528 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	075e      	lsls	r6, r3, #29
 800a53e:	d53b      	bpl.n	800a5b8 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a540:	4b50      	ldr	r3, [pc, #320]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a544:	00d0      	lsls	r0, r2, #3
 800a546:	f100 8129 	bmi.w	800a79c <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800a54a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a54c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a54e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a552:	625a      	str	r2, [r3, #36]	; 0x24
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a55a:	9301      	str	r3, [sp, #4]
 800a55c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a55e:	4f4b      	ldr	r7, [pc, #300]	; (800a68c <HAL_RCC_OscConfig+0x29c>)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	05d9      	lsls	r1, r3, #23
 800a564:	f140 80cc 	bpl.w	800a700 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a568:	68a3      	ldr	r3, [r4, #8]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	f000 8175 	beq.w	800a85a <HAL_RCC_OscConfig+0x46a>
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80a9 	beq.w	800a6c8 <HAL_RCC_OscConfig+0x2d8>
 800a576:	2b05      	cmp	r3, #5
 800a578:	4b42      	ldr	r3, [pc, #264]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a57a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a57c:	f000 818b 	beq.w	800a896 <HAL_RCC_OscConfig+0x4a6>
 800a580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a584:	635a      	str	r2, [r3, #52]	; 0x34
 800a586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a58e:	f7fd fd21 	bl	8007fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a592:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a596:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a598:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a684 <HAL_RCC_OscConfig+0x294>
 800a59c:	e005      	b.n	800a5aa <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a59e:	f7fd fd19 	bl	8007fd4 <HAL_GetTick>
 800a5a2:	1bc0      	subs	r0, r0, r7
 800a5a4:	4548      	cmp	r0, r9
 800a5a6:	f200 80bc 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5aa:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a5ae:	059b      	lsls	r3, r3, #22
 800a5b0:	d5f5      	bpl.n	800a59e <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	f040 814b 	bne.w	800a84e <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5ba:	b1b8      	cbz	r0, 800a5ec <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5bc:	2d0c      	cmp	r5, #12
 800a5be:	f000 8152 	beq.w	800a866 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5c2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a5c4:	f04f 0200 	mov.w	r2, #0
 800a5c8:	4b2f      	ldr	r3, [pc, #188]	; (800a688 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5ca:	f000 8116 	beq.w	800a7fa <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800a5ce:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a5d0:	f7fd fd00 	bl	8007fd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5d4:	4d2b      	ldr	r5, [pc, #172]	; (800a684 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800a5d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5d8:	e005      	b.n	800a5e6 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5da:	f7fd fcfb 	bl	8007fd4 <HAL_GetTick>
 800a5de:	1b00      	subs	r0, r0, r4
 800a5e0:	2802      	cmp	r0, #2
 800a5e2:	f200 809e 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5e6:	682b      	ldr	r3, [r5, #0]
 800a5e8:	019b      	lsls	r3, r3, #6
 800a5ea:	d4f6      	bmi.n	800a5da <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 800a5ec:	2000      	movs	r0, #0
}
 800a5ee:	b003      	add	sp, #12
 800a5f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a5f4:	4b23      	ldr	r3, [pc, #140]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	059a      	lsls	r2, r3, #22
 800a5fa:	d502      	bpl.n	800a602 <HAL_RCC_OscConfig+0x212>
 800a5fc:	69a3      	ldr	r3, [r4, #24]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d03b      	beq.n	800a67a <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a602:	4e20      	ldr	r6, [pc, #128]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a604:	6a20      	ldr	r0, [r4, #32]
 800a606:	6873      	ldr	r3, [r6, #4]
 800a608:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a60c:	4298      	cmp	r0, r3
 800a60e:	f240 80d7 	bls.w	800a7c0 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a612:	f7ff feab 	bl	800a36c <RCC_SetFlashLatencyFromMSIRange>
 800a616:	2800      	cmp	r0, #0
 800a618:	d12f      	bne.n	800a67a <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a61a:	6872      	ldr	r2, [r6, #4]
 800a61c:	6a23      	ldr	r3, [r4, #32]
 800a61e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a622:	431a      	orrs	r2, r3
 800a624:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a626:	6872      	ldr	r2, [r6, #4]
 800a628:	69e1      	ldr	r1, [r4, #28]
 800a62a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a62e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a632:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a636:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a638:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a63a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a63e:	3301      	adds	r3, #1
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a644:	4a12      	ldr	r2, [pc, #72]	; (800a690 <HAL_RCC_OscConfig+0x2a0>)
 800a646:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800a64a:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a64c:	4811      	ldr	r0, [pc, #68]	; (800a694 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a64e:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 800a650:	4a11      	ldr	r2, [pc, #68]	; (800a698 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a652:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 800a654:	6810      	ldr	r0, [r2, #0]
 800a656:	f7fd fc7b 	bl	8007f50 <HAL_InitTick>
        if(status != HAL_OK)
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d1c7      	bne.n	800a5ee <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	e753      	b.n	800a50a <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a662:	2e00      	cmp	r6, #0
 800a664:	f43f aedb 	beq.w	800a41e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a668:	4a06      	ldr	r2, [pc, #24]	; (800a684 <HAL_RCC_OscConfig+0x294>)
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	0392      	lsls	r2, r2, #14
 800a66e:	f57f aeff 	bpl.w	800a470 <HAL_RCC_OscConfig+0x80>
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	2a00      	cmp	r2, #0
 800a676:	f47f aefb 	bne.w	800a470 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800a67a:	2001      	movs	r0, #1
}
 800a67c:	b003      	add	sp, #12
 800a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a682:	bf00      	nop
 800a684:	40023800 	.word	0x40023800
 800a688:	42470000 	.word	0x42470000
 800a68c:	40007000 	.word	0x40007000
 800a690:	080119ec 	.word	0x080119ec
 800a694:	20000018 	.word	0x20000018
 800a698:	20000020 	.word	0x20000020
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a69c:	2e00      	cmp	r6, #0
 800a69e:	f47f aeef 	bne.w	800a480 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6a2:	4a81      	ldr	r2, [pc, #516]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	0792      	lsls	r2, r2, #30
 800a6a8:	d502      	bpl.n	800a6b0 <HAL_RCC_OscConfig+0x2c0>
 800a6aa:	68e2      	ldr	r2, [r4, #12]
 800a6ac:	2a01      	cmp	r2, #1
 800a6ae:	d1e4      	bne.n	800a67a <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6b0:	497d      	ldr	r1, [pc, #500]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
 800a6b2:	6920      	ldr	r0, [r4, #16]
 800a6b4:	684a      	ldr	r2, [r1, #4]
 800a6b6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800a6ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a6be:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a6c0:	06d9      	lsls	r1, r3, #27
 800a6c2:	f57f af22 	bpl.w	800a50a <HAL_RCC_OscConfig+0x11a>
 800a6c6:	e6fa      	b.n	800a4be <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6c8:	4f77      	ldr	r7, [pc, #476]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6ca:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6dc:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a6de:	f7fd fc79 	bl	8007fd4 <HAL_GetTick>
 800a6e2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6e4:	e005      	b.n	800a6f2 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a6e6:	f7fd fc75 	bl	8007fd4 <HAL_GetTick>
 800a6ea:	eba0 0008 	sub.w	r0, r0, r8
 800a6ee:	4548      	cmp	r0, r9
 800a6f0:	d817      	bhi.n	800a722 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f4:	0598      	lsls	r0, r3, #22
 800a6f6:	d4f6      	bmi.n	800a6e6 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	f43f af5d 	beq.w	800a5b8 <HAL_RCC_OscConfig+0x1c8>
 800a6fe:	e0a6      	b.n	800a84e <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a706:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a708:	f7fd fc64 	bl	8007fd4 <HAL_GetTick>
 800a70c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	05da      	lsls	r2, r3, #23
 800a712:	f53f af29 	bmi.w	800a568 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a716:	f7fd fc5d 	bl	8007fd4 <HAL_GetTick>
 800a71a:	eba0 0008 	sub.w	r0, r0, r8
 800a71e:	2864      	cmp	r0, #100	; 0x64
 800a720:	d9f5      	bls.n	800a70e <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800a722:	2003      	movs	r0, #3
}
 800a724:	b003      	add	sp, #12
 800a726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a72a:	4f5f      	ldr	r7, [pc, #380]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a73a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800a73c:	f7fd fc4a 	bl	8007fd4 <HAL_GetTick>
 800a740:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a742:	e005      	b.n	800a750 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a744:	f7fd fc46 	bl	8007fd4 <HAL_GetTick>
 800a748:	eba0 0008 	sub.w	r0, r0, r8
 800a74c:	2864      	cmp	r0, #100	; 0x64
 800a74e:	d8e8      	bhi.n	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	0398      	lsls	r0, r3, #14
 800a754:	d4f6      	bmi.n	800a744 <HAL_RCC_OscConfig+0x354>
 800a756:	e68a      	b.n	800a46e <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 800a758:	4a54      	ldr	r2, [pc, #336]	; (800a8ac <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a75a:	4f53      	ldr	r7, [pc, #332]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 800a75c:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a760:	f7fd fc38 	bl	8007fd4 <HAL_GetTick>
 800a764:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a766:	e004      	b.n	800a772 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a768:	f7fd fc34 	bl	8007fd4 <HAL_GetTick>
 800a76c:	1b80      	subs	r0, r0, r6
 800a76e:	2802      	cmp	r0, #2
 800a770:	d8d7      	bhi.n	800a722 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a774:	079b      	lsls	r3, r3, #30
 800a776:	d4f7      	bmi.n	800a768 <HAL_RCC_OscConfig+0x378>
 800a778:	e6df      	b.n	800a53a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800a77a:	4a4c      	ldr	r2, [pc, #304]	; (800a8ac <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a77c:	4f4a      	ldr	r7, [pc, #296]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 800a77e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a780:	f7fd fc28 	bl	8007fd4 <HAL_GetTick>
 800a784:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a786:	e004      	b.n	800a792 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a788:	f7fd fc24 	bl	8007fd4 <HAL_GetTick>
 800a78c:	1b80      	subs	r0, r0, r6
 800a78e:	2802      	cmp	r0, #2
 800a790:	d8c7      	bhi.n	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	0798      	lsls	r0, r3, #30
 800a796:	d4f7      	bmi.n	800a788 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	e68e      	b.n	800a4ba <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 800a79c:	2600      	movs	r6, #0
 800a79e:	e6de      	b.n	800a55e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 800a7a0:	4a42      	ldr	r2, [pc, #264]	; (800a8ac <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a7a2:	4f41      	ldr	r7, [pc, #260]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 800a7a4:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800a7a6:	f7fd fc15 	bl	8007fd4 <HAL_GetTick>
 800a7aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a7ac:	e004      	b.n	800a7b8 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a7ae:	f7fd fc11 	bl	8007fd4 <HAL_GetTick>
 800a7b2:	1b80      	subs	r0, r0, r6
 800a7b4:	2802      	cmp	r0, #2
 800a7b6:	d8b4      	bhi.n	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	0598      	lsls	r0, r3, #22
 800a7bc:	d4f7      	bmi.n	800a7ae <HAL_RCC_OscConfig+0x3be>
 800a7be:	e74e      	b.n	800a65e <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a7c0:	6873      	ldr	r3, [r6, #4]
 800a7c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a7c6:	4303      	orrs	r3, r0
 800a7c8:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a7ca:	6873      	ldr	r3, [r6, #4]
 800a7cc:	69e2      	ldr	r2, [r4, #28]
 800a7ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a7d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a7d6:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7d8:	f7ff fdc8 	bl	800a36c <RCC_SetFlashLatencyFromMSIRange>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f47f af4c 	bne.w	800a67a <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a7e2:	6a23      	ldr	r3, [r4, #32]
 800a7e4:	e726      	b.n	800a634 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 800a7e6:	2001      	movs	r0, #1
}
 800a7e8:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a7ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	e629      	b.n	800a44e <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 800a7fa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a7fc:	f7fd fbea 	bl	8007fd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a800:	4e29      	ldr	r6, [pc, #164]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a802:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a804:	e004      	b.n	800a810 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a806:	f7fd fbe5 	bl	8007fd4 <HAL_GetTick>
 800a80a:	1b40      	subs	r0, r0, r5
 800a80c:	2802      	cmp	r0, #2
 800a80e:	d888      	bhi.n	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a810:	6833      	ldr	r3, [r6, #0]
 800a812:	0199      	lsls	r1, r3, #6
 800a814:	d4f7      	bmi.n	800a806 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a816:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800a81a:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 800a81c:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a81e:	68b2      	ldr	r2, [r6, #8]
 800a820:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a822:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800a826:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800a828:	4a20      	ldr	r2, [pc, #128]	; (800a8ac <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a82a:	4303      	orrs	r3, r0
 800a82c:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 800a82e:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a830:	f7fd fbd0 	bl	8007fd4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a834:	4d1c      	ldr	r5, [pc, #112]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a836:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a838:	e005      	b.n	800a846 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a83a:	f7fd fbcb 	bl	8007fd4 <HAL_GetTick>
 800a83e:	1b00      	subs	r0, r0, r4
 800a840:	2802      	cmp	r0, #2
 800a842:	f63f af6e 	bhi.w	800a722 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	019a      	lsls	r2, r3, #6
 800a84a:	d5f6      	bpl.n	800a83a <HAL_RCC_OscConfig+0x44a>
 800a84c:	e6ce      	b.n	800a5ec <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a84e:	4a16      	ldr	r2, [pc, #88]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
 800a850:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a856:	6253      	str	r3, [r2, #36]	; 0x24
 800a858:	e6ae      	b.n	800a5b8 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a85a:	4a13      	ldr	r2, [pc, #76]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
 800a85c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a85e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a862:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a864:	e693      	b.n	800a58e <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a866:	2801      	cmp	r0, #1
 800a868:	f43f aec1 	beq.w	800a5ee <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a86e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 800a870:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a872:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a876:	4291      	cmp	r1, r2
 800a878:	f47f aeff 	bne.w	800a67a <HAL_RCC_OscConfig+0x28a>
 800a87c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a87e:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a882:	4291      	cmp	r1, r2
 800a884:	f47f aef9 	bne.w	800a67a <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a888:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a88a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 800a88e:	1a18      	subs	r0, r3, r0
 800a890:	bf18      	it	ne
 800a892:	2001      	movne	r0, #1
 800a894:	e6ab      	b.n	800a5ee <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a89a:	635a      	str	r2, [r3, #52]	; 0x34
 800a89c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a89e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a2:	635a      	str	r2, [r3, #52]	; 0x34
 800a8a4:	e673      	b.n	800a58e <HAL_RCC_OscConfig+0x19e>
 800a8a6:	bf00      	nop
 800a8a8:	40023800 	.word	0x40023800
 800a8ac:	42470000 	.word	0x42470000

0800a8b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f000 80c2 	beq.w	800aa3a <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a8b6:	4a85      	ldr	r2, [pc, #532]	; (800aacc <HAL_RCC_ClockConfig+0x21c>)
{
 800a8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a8bc:	6813      	ldr	r3, [r2, #0]
 800a8be:	4604      	mov	r4, r0
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	d213      	bcs.n	800a8f2 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8ca:	2901      	cmp	r1, #1
 800a8cc:	d103      	bne.n	800a8d6 <HAL_RCC_ClockConfig+0x26>
 800a8ce:	6813      	ldr	r3, [r2, #0]
 800a8d0:	f043 0304 	orr.w	r3, r3, #4
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4a7d      	ldr	r2, [pc, #500]	; (800aacc <HAL_RCC_ClockConfig+0x21c>)
 800a8d8:	6813      	ldr	r3, [r2, #0]
 800a8da:	f023 0301 	bic.w	r3, r3, #1
 800a8de:	432b      	orrs	r3, r5
 800a8e0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8e2:	6813      	ldr	r3, [r2, #0]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	d002      	beq.n	800a8f2 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 800a8ec:	2001      	movs	r0, #1
}
 800a8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	0799      	lsls	r1, r3, #30
 800a8f6:	d506      	bpl.n	800a906 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8f8:	4975      	ldr	r1, [pc, #468]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
 800a8fa:	68a0      	ldr	r0, [r4, #8]
 800a8fc:	688a      	ldr	r2, [r1, #8]
 800a8fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a902:	4302      	orrs	r2, r0
 800a904:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a906:	07da      	lsls	r2, r3, #31
 800a908:	d529      	bpl.n	800a95e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a90a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a90c:	4b70      	ldr	r3, [pc, #448]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a90e:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a910:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a912:	f000 808e 	beq.w	800aa32 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a916:	2a03      	cmp	r2, #3
 800a918:	f000 8085 	beq.w	800aa26 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a91c:	2a01      	cmp	r2, #1
 800a91e:	f000 80d1 	beq.w	800aac4 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a922:	0598      	lsls	r0, r3, #22
 800a924:	d5e2      	bpl.n	800a8ec <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a926:	4e6a      	ldr	r6, [pc, #424]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a928:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a92c:	68b3      	ldr	r3, [r6, #8]
 800a92e:	f023 0303 	bic.w	r3, r3, #3
 800a932:	4313      	orrs	r3, r2
 800a934:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800a936:	f7fd fb4d 	bl	8007fd4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a93a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800a93c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d055      	beq.n	800a9ee <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a942:	2b03      	cmp	r3, #3
 800a944:	d05e      	beq.n	800aa04 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a946:	2b01      	cmp	r3, #1
 800a948:	d105      	bne.n	800a956 <HAL_RCC_ClockConfig+0xa6>
 800a94a:	e066      	b.n	800aa1a <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a94c:	f7fd fb42 	bl	8007fd4 <HAL_GetTick>
 800a950:	1bc0      	subs	r0, r0, r7
 800a952:	4540      	cmp	r0, r8
 800a954:	d873      	bhi.n	800aa3e <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a956:	68b3      	ldr	r3, [r6, #8]
 800a958:	f013 0f0c 	tst.w	r3, #12
 800a95c:	d1f6      	bne.n	800a94c <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a95e:	4a5b      	ldr	r2, [pc, #364]	; (800aacc <HAL_RCC_ClockConfig+0x21c>)
 800a960:	6813      	ldr	r3, [r2, #0]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	42ab      	cmp	r3, r5
 800a968:	d906      	bls.n	800a978 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a96a:	6813      	ldr	r3, [r2, #0]
 800a96c:	f023 0301 	bic.w	r3, r3, #1
 800a970:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a972:	6813      	ldr	r3, [r2, #0]
 800a974:	07da      	lsls	r2, r3, #31
 800a976:	d4b9      	bmi.n	800a8ec <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	0759      	lsls	r1, r3, #29
 800a97c:	d506      	bpl.n	800a98c <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a97e:	4954      	ldr	r1, [pc, #336]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
 800a980:	68e0      	ldr	r0, [r4, #12]
 800a982:	688a      	ldr	r2, [r1, #8]
 800a984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a988:	4302      	orrs	r2, r0
 800a98a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a98c:	071b      	lsls	r3, r3, #28
 800a98e:	d420      	bmi.n	800a9d2 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 800a990:	494f      	ldr	r1, [pc, #316]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
 800a992:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800a994:	f002 030c 	and.w	r3, r2, #12
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d079      	beq.n	800aa90 <HAL_RCC_ClockConfig+0x1e0>
 800a99c:	2b0c      	cmp	r3, #12
 800a99e:	d050      	beq.n	800aa42 <HAL_RCC_ClockConfig+0x192>
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d044      	beq.n	800aa2e <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a9a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a9a8:	684b      	ldr	r3, [r1, #4]
 800a9aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9b2:	4b47      	ldr	r3, [pc, #284]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
 800a9b4:	4a47      	ldr	r2, [pc, #284]	; (800aad4 <HAL_RCC_ClockConfig+0x224>)
 800a9b6:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 800a9b8:	4947      	ldr	r1, [pc, #284]	; (800aad8 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a9be:	5cd3      	ldrb	r3, [r2, r3]
 800a9c0:	4a46      	ldr	r2, [pc, #280]	; (800aadc <HAL_RCC_ClockConfig+0x22c>)
 800a9c2:	fa20 f303 	lsr.w	r3, r0, r3
}
 800a9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800a9ca:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a9cc:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800a9ce:	f7fd babf 	b.w	8007f50 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a9d2:	4a3f      	ldr	r2, [pc, #252]	; (800aad0 <HAL_RCC_ClockConfig+0x220>)
 800a9d4:	6921      	ldr	r1, [r4, #16]
 800a9d6:	6893      	ldr	r3, [r2, #8]
 800a9d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a9dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a9e0:	6093      	str	r3, [r2, #8]
 800a9e2:	e7d5      	b.n	800a990 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9e4:	f7fd faf6 	bl	8007fd4 <HAL_GetTick>
 800a9e8:	1bc3      	subs	r3, r0, r7
 800a9ea:	4543      	cmp	r3, r8
 800a9ec:	d827      	bhi.n	800aa3e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9ee:	68b3      	ldr	r3, [r6, #8]
 800a9f0:	f003 030c 	and.w	r3, r3, #12
 800a9f4:	2b08      	cmp	r3, #8
 800a9f6:	d1f5      	bne.n	800a9e4 <HAL_RCC_ClockConfig+0x134>
 800a9f8:	e7b1      	b.n	800a95e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9fa:	f7fd faeb 	bl	8007fd4 <HAL_GetTick>
 800a9fe:	1bc0      	subs	r0, r0, r7
 800aa00:	4540      	cmp	r0, r8
 800aa02:	d81c      	bhi.n	800aa3e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa04:	68b3      	ldr	r3, [r6, #8]
 800aa06:	f003 030c 	and.w	r3, r3, #12
 800aa0a:	2b0c      	cmp	r3, #12
 800aa0c:	d1f5      	bne.n	800a9fa <HAL_RCC_ClockConfig+0x14a>
 800aa0e:	e7a6      	b.n	800a95e <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa10:	f7fd fae0 	bl	8007fd4 <HAL_GetTick>
 800aa14:	1bc0      	subs	r0, r0, r7
 800aa16:	4540      	cmp	r0, r8
 800aa18:	d811      	bhi.n	800aa3e <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa1a:	68b3      	ldr	r3, [r6, #8]
 800aa1c:	f003 030c 	and.w	r3, r3, #12
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d1f5      	bne.n	800aa10 <HAL_RCC_ClockConfig+0x160>
 800aa24:	e79b      	b.n	800a95e <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa26:	019f      	lsls	r7, r3, #6
 800aa28:	f53f af7d 	bmi.w	800a926 <HAL_RCC_ClockConfig+0x76>
 800aa2c:	e75e      	b.n	800a8ec <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 800aa2e:	482c      	ldr	r0, [pc, #176]	; (800aae0 <HAL_RCC_ClockConfig+0x230>)
 800aa30:	e7bf      	b.n	800a9b2 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa32:	039b      	lsls	r3, r3, #14
 800aa34:	f53f af77 	bmi.w	800a926 <HAL_RCC_ClockConfig+0x76>
 800aa38:	e758      	b.n	800a8ec <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 800aa3a:	2001      	movs	r0, #1
}
 800aa3c:	4770      	bx	lr
          return HAL_TIMEOUT;
 800aa3e:	2003      	movs	r0, #3
 800aa40:	e755      	b.n	800a8ee <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800aa42:	4828      	ldr	r0, [pc, #160]	; (800aae4 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa44:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800aa46:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800aa4a:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800aa4c:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa50:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800aa54:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800aa58:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aa5c:	d01a      	beq.n	800aa94 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800aa5e:	1b09      	subs	r1, r1, r4
 800aa60:	eb65 0505 	sbc.w	r5, r5, r5
 800aa64:	01ab      	lsls	r3, r5, #6
 800aa66:	0188      	lsls	r0, r1, #6
 800aa68:	1a40      	subs	r0, r0, r1
 800aa6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aa6e:	eb63 0305 	sbc.w	r3, r3, r5
 800aa72:	00c1      	lsls	r1, r0, #3
 800aa74:	00db      	lsls	r3, r3, #3
 800aa76:	190c      	adds	r4, r1, r4
 800aa78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800aa7c:	f143 0300 	adc.w	r3, r3, #0
 800aa80:	0259      	lsls	r1, r3, #9
 800aa82:	0260      	lsls	r0, r4, #9
 800aa84:	2300      	movs	r3, #0
 800aa86:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 800aa8a:	f7f6 fb9f 	bl	80011cc <__aeabi_uldivmod>
 800aa8e:	e790      	b.n	800a9b2 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 800aa90:	4815      	ldr	r0, [pc, #84]	; (800aae8 <HAL_RCC_ClockConfig+0x238>)
 800aa92:	e78e      	b.n	800a9b2 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800aa94:	1b0d      	subs	r5, r1, r4
 800aa96:	eb66 0606 	sbc.w	r6, r6, r6
 800aa9a:	01b0      	lsls	r0, r6, #6
 800aa9c:	01a9      	lsls	r1, r5, #6
 800aa9e:	1b49      	subs	r1, r1, r5
 800aaa0:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 800aaa4:	eb60 0006 	sbc.w	r0, r0, r6
 800aaa8:	00c0      	lsls	r0, r0, #3
 800aaaa:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 800aaae:	00c9      	lsls	r1, r1, #3
 800aab0:	190c      	adds	r4, r1, r4
 800aab2:	f140 0000 	adc.w	r0, r0, #0
 800aab6:	0281      	lsls	r1, r0, #10
 800aab8:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800aabc:	02a0      	lsls	r0, r4, #10
 800aabe:	f7f6 fb85 	bl	80011cc <__aeabi_uldivmod>
 800aac2:	e776      	b.n	800a9b2 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aac4:	079e      	lsls	r6, r3, #30
 800aac6:	f53f af2e 	bmi.w	800a926 <HAL_RCC_ClockConfig+0x76>
 800aaca:	e70f      	b.n	800a8ec <HAL_RCC_ClockConfig+0x3c>
 800aacc:	40023c00 	.word	0x40023c00
 800aad0:	40023800 	.word	0x40023800
 800aad4:	080119ec 	.word	0x080119ec
 800aad8:	20000020 	.word	0x20000020
 800aadc:	20000018 	.word	0x20000018
 800aae0:	00f42400 	.word	0x00f42400
 800aae4:	08011a04 	.word	0x08011a04
 800aae8:	007a1200 	.word	0x007a1200

0800aaec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aaec:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800aaee:	4a05      	ldr	r2, [pc, #20]	; (800ab04 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	4905      	ldr	r1, [pc, #20]	; (800ab08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aaf4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800aaf8:	5ccb      	ldrb	r3, [r1, r3]
 800aafa:	6810      	ldr	r0, [r2, #0]
}
 800aafc:	40d8      	lsrs	r0, r3
 800aafe:	4770      	bx	lr
 800ab00:	40023800 	.word	0x40023800
 800ab04:	20000018 	.word	0x20000018
 800ab08:	080119fc 	.word	0x080119fc

0800ab0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800ab0e:	4a05      	ldr	r2, [pc, #20]	; (800ab24 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	4905      	ldr	r1, [pc, #20]	; (800ab28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ab14:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ab18:	5ccb      	ldrb	r3, [r1, r3]
 800ab1a:	6810      	ldr	r0, [r2, #0]
}
 800ab1c:	40d8      	lsrs	r0, r3
 800ab1e:	4770      	bx	lr
 800ab20:	40023800 	.word	0x40023800
 800ab24:	20000018 	.word	0x20000018
 800ab28:	080119fc 	.word	0x080119fc

0800ab2c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d049      	beq.n	800abc4 <HAL_TIM_Base_Init+0x98>
{
 800ab30:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ab36:	4604      	mov	r4, r0
 800ab38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d03c      	beq.n	800abba <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab42:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800ab44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab48:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800ab4c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab4e:	d013      	beq.n	800ab78 <HAL_TIM_Base_Init+0x4c>
 800ab50:	491d      	ldr	r1, [pc, #116]	; (800abc8 <HAL_TIM_Base_Init+0x9c>)
 800ab52:	428a      	cmp	r2, r1
 800ab54:	d010      	beq.n	800ab78 <HAL_TIM_Base_Init+0x4c>
 800ab56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab5a:	428a      	cmp	r2, r1
 800ab5c:	d00c      	beq.n	800ab78 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab5e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800ab62:	428a      	cmp	r2, r1
 800ab64:	d00c      	beq.n	800ab80 <HAL_TIM_Base_Init+0x54>
 800ab66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab6a:	428a      	cmp	r2, r1
 800ab6c:	d008      	beq.n	800ab80 <HAL_TIM_Base_Init+0x54>
 800ab6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab72:	428a      	cmp	r2, r1
 800ab74:	d108      	bne.n	800ab88 <HAL_TIM_Base_Init+0x5c>
 800ab76:	e003      	b.n	800ab80 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 800ab78:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ab7e:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab80:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab86:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab88:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab8a:	6960      	ldr	r0, [r4, #20]
 800ab8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab90:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab92:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800ab94:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800ab96:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab98:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800ab9a:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800ab9c:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab9e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800aba6:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800abaa:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800abae:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800abb2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 800abb6:	2000      	movs	r0, #0
}
 800abb8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800abba:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800abbe:	f7fc ffb7 	bl	8007b30 <HAL_TIM_Base_MspInit>
 800abc2:	e7bd      	b.n	800ab40 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800abc4:	2001      	movs	r0, #1
}
 800abc6:	4770      	bx	lr
 800abc8:	40000400 	.word	0x40000400

0800abcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800abcc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d120      	bne.n	800ac16 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800abd4:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abd6:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800abd8:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abdc:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abe2:	f042 0201 	orr.w	r2, r2, #1
 800abe6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe8:	d00a      	beq.n	800ac00 <HAL_TIM_Base_Start_IT+0x34>
 800abea:	4a0d      	ldr	r2, [pc, #52]	; (800ac20 <HAL_TIM_Base_Start_IT+0x54>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <HAL_TIM_Base_Start_IT+0x34>
 800abf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <HAL_TIM_Base_Start_IT+0x34>
 800abf8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac00:	689a      	ldr	r2, [r3, #8]
 800ac02:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac06:	2a06      	cmp	r2, #6
 800ac08:	d007      	beq.n	800ac1a <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800ac0a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800ac0c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ac0e:	f042 0201 	orr.w	r2, r2, #1
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	4770      	bx	lr
    return HAL_ERROR;
 800ac16:	2001      	movs	r0, #1
 800ac18:	4770      	bx	lr
  return HAL_OK;
 800ac1a:	2000      	movs	r0, #0
}
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	40000400 	.word	0x40000400

0800ac24 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 800ac24:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac28:	6802      	ldr	r2, [r0, #0]
{
 800ac2a:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac2c:	68d1      	ldr	r1, [r2, #12]
 800ac2e:	f021 0101 	bic.w	r1, r1, #1
 800ac32:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800ac34:	6a11      	ldr	r1, [r2, #32]
 800ac36:	ea11 0f0c 	tst.w	r1, ip
 800ac3a:	d103      	bne.n	800ac44 <HAL_TIM_Base_Stop_IT+0x20>
 800ac3c:	6811      	ldr	r1, [r2, #0]
 800ac3e:	f021 0101 	bic.w	r1, r1, #1
 800ac42:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800ac44:	2201      	movs	r2, #1
}
 800ac46:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ac48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop

0800ac50 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800ac50:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ac54:	2a01      	cmp	r2, #1
 800ac56:	d075      	beq.n	800ad44 <HAL_TIM_ConfigClockSource+0xf4>
{
 800ac58:	b430      	push	{r4, r5}
 800ac5a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800ac5c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800ac5e:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800ac60:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800ac62:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800ac66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800ac6a:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800ac6c:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac6e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800ac72:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800ac76:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800ac78:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800ac7a:	d065      	beq.n	800ad48 <HAL_TIM_ConfigClockSource+0xf8>
 800ac7c:	d831      	bhi.n	800ace2 <HAL_TIM_ConfigClockSource+0x92>
 800ac7e:	2a40      	cmp	r2, #64	; 0x40
 800ac80:	d048      	beq.n	800ad14 <HAL_TIM_ConfigClockSource+0xc4>
 800ac82:	d921      	bls.n	800acc8 <HAL_TIM_ConfigClockSource+0x78>
 800ac84:	2a50      	cmp	r2, #80	; 0x50
 800ac86:	d116      	bne.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac88:	684c      	ldr	r4, [r1, #4]
 800ac8a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac8c:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac8e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ac92:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac94:	6a04      	ldr	r4, [r0, #32]
 800ac96:	f024 0401 	bic.w	r4, r4, #1
 800ac9a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac9c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aca2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aca6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aca8:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acaa:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acb0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acb4:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800acb6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800acb8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800acba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800acbe:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 800acc2:	4610      	mov	r0, r2
}
 800acc4:	bc30      	pop	{r4, r5}
 800acc6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800acc8:	2a20      	cmp	r2, #32
 800acca:	d002      	beq.n	800acd2 <HAL_TIM_ConfigClockSource+0x82>
 800accc:	d91e      	bls.n	800ad0c <HAL_TIM_ConfigClockSource+0xbc>
 800acce:	2a30      	cmp	r2, #48	; 0x30
 800acd0:	d1f1      	bne.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 800acd2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800acd4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acd8:	430a      	orrs	r2, r1
 800acda:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800acde:	6082      	str	r2, [r0, #8]
}
 800ace0:	e7e9      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800ace2:	2a70      	cmp	r2, #112	; 0x70
 800ace4:	d049      	beq.n	800ad7a <HAL_TIM_ConfigClockSource+0x12a>
 800ace6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800acea:	d1e4      	bne.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acec:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800acf0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acf2:	432a      	orrs	r2, r5
 800acf4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acf6:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800acfe:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad00:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad02:	6882      	ldr	r2, [r0, #8]
 800ad04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad08:	6082      	str	r2, [r0, #8]
      break;
 800ad0a:	e7d4      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800ad0c:	f032 0110 	bics.w	r1, r2, #16
 800ad10:	d1d1      	bne.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
 800ad12:	e7de      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad14:	684c      	ldr	r4, [r1, #4]
 800ad16:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800ad18:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad1a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800ad1e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad20:	6a04      	ldr	r4, [r0, #32]
 800ad22:	f024 0401 	bic.w	r4, r4, #1
 800ad26:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad28:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad2e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ad32:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800ad34:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ad36:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad3c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800ad40:	6082      	str	r2, [r0, #8]
}
 800ad42:	e7b8      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800ad44:	2002      	movs	r0, #2
}
 800ad46:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad48:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad4a:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad4c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad50:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad54:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad56:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad5a:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800ad5e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800ad60:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad66:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 800ad6a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800ad6c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad72:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ad76:	6082      	str	r2, [r0, #8]
}
 800ad78:	e79d      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad7a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ad7e:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad80:	432a      	orrs	r2, r5
 800ad82:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad84:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad88:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ad8c:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800ad8e:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ad90:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad92:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ad96:	6082      	str	r2, [r0, #8]
      break;
 800ad98:	e78d      	b.n	800acb6 <HAL_TIM_ConfigClockSource+0x66>
 800ad9a:	bf00      	nop

0800ad9c <HAL_TIM_OC_DelayElapsedCallback>:
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop

0800ada0 <HAL_TIM_IC_CaptureCallback>:
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop

0800ada4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop

0800ada8 <HAL_TIM_TriggerCallback>:
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop

0800adac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adac:	6803      	ldr	r3, [r0, #0]
{
 800adae:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adb0:	691a      	ldr	r2, [r3, #16]
{
 800adb2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adb4:	0791      	lsls	r1, r2, #30
 800adb6:	d502      	bpl.n	800adbe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adb8:	68da      	ldr	r2, [r3, #12]
 800adba:	0792      	lsls	r2, r2, #30
 800adbc:	d450      	bmi.n	800ae60 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	0752      	lsls	r2, r2, #29
 800adc2:	d502      	bpl.n	800adca <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	0750      	lsls	r0, r2, #29
 800adc8:	d437      	bmi.n	800ae3a <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800adca:	691a      	ldr	r2, [r3, #16]
 800adcc:	0711      	lsls	r1, r2, #28
 800adce:	d502      	bpl.n	800add6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	0712      	lsls	r2, r2, #28
 800add4:	d422      	bmi.n	800ae1c <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800add6:	691a      	ldr	r2, [r3, #16]
 800add8:	06d0      	lsls	r0, r2, #27
 800adda:	d502      	bpl.n	800ade2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	06d1      	lsls	r1, r2, #27
 800ade0:	d40c      	bmi.n	800adfc <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	07d2      	lsls	r2, r2, #31
 800ade6:	d502      	bpl.n	800adee <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	07d0      	lsls	r0, r2, #31
 800adec:	d450      	bmi.n	800ae90 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	0651      	lsls	r1, r2, #25
 800adf2:	d502      	bpl.n	800adfa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	0652      	lsls	r2, r2, #25
 800adf8:	d443      	bmi.n	800ae82 <HAL_TIM_IRQHandler+0xd6>
}
 800adfa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800adfc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae00:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae02:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae04:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae06:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800ae08:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae0a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ae0e:	d047      	beq.n	800aea0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800ae10:	f7ff ffc6 	bl	800ada0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae14:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae16:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae18:	7622      	strb	r2, [r4, #24]
 800ae1a:	e7e2      	b.n	800ade2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae1c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae20:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae22:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae24:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae26:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800ae28:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae2a:	079b      	lsls	r3, r3, #30
 800ae2c:	d044      	beq.n	800aeb8 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800ae2e:	f7ff ffb7 	bl	800ada0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae32:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae34:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae36:	7622      	strb	r2, [r4, #24]
 800ae38:	e7cd      	b.n	800add6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae3a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae3e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae40:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae42:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae44:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800ae46:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae48:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ae4c:	d131      	bne.n	800aeb2 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae4e:	f7ff ffa5 	bl	800ad9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7ff ffa6 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae58:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae5a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae5c:	7622      	strb	r2, [r4, #24]
 800ae5e:	e7b4      	b.n	800adca <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae60:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae64:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae66:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae68:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	0799      	lsls	r1, r3, #30
 800ae6e:	d11d      	bne.n	800aeac <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae70:	f7ff ff94 	bl	800ad9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7ff ff95 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae7c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7e:	7622      	strb	r2, [r4, #24]
 800ae80:	e79d      	b.n	800adbe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae82:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ae86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae88:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ae8a:	f7ff ff8d 	bl	800ada8 <HAL_TIM_TriggerCallback>
}
 800ae8e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae90:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae94:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae98:	f7fc fa76 	bl	8007388 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	e7a6      	b.n	800adee <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea0:	f7ff ff7c 	bl	800ad9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff ff7d 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
 800aeaa:	e7b3      	b.n	800ae14 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 800aeac:	f7ff ff78 	bl	800ada0 <HAL_TIM_IC_CaptureCallback>
 800aeb0:	e7e3      	b.n	800ae7a <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb2:	f7ff ff75 	bl	800ada0 <HAL_TIM_IC_CaptureCallback>
 800aeb6:	e7cf      	b.n	800ae58 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb8:	f7ff ff70 	bl	800ad9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aebc:	4620      	mov	r0, r4
 800aebe:	f7ff ff71 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
 800aec2:	e7b6      	b.n	800ae32 <HAL_TIM_IRQHandler+0x86>

0800aec4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aec4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800aec8:	2a01      	cmp	r2, #1
 800aeca:	d028      	beq.n	800af1e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800aecc:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aece:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aed0:	681a      	ldr	r2, [r3, #0]
{
 800aed2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800aed4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800aed8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aeda:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800aedc:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aee0:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aee2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800aee6:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800aee8:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeea:	d00a      	beq.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800aeec:	480d      	ldr	r0, [pc, #52]	; (800af24 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800aeee:	4282      	cmp	r2, r0
 800aef0:	d007      	beq.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800aef2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800aef6:	4282      	cmp	r2, r0
 800aef8:	d003      	beq.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800aefa:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800aefe:	4282      	cmp	r2, r0
 800af00:	d104      	bne.n	800af0c <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af02:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af04:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af08:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af0a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800af0c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800af0e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800af10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800af14:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800af18:	4610      	mov	r0, r2
}
 800af1a:	bc30      	pop	{r4, r5}
 800af1c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800af1e:	2002      	movs	r0, #2
}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	40000400 	.word	0x40000400

0800af28 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af28:	2800      	cmp	r0, #0
 800af2a:	f000 8081 	beq.w	800b030 <HAL_UART_Init+0x108>
{
 800af2e:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800af30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800af34:	4604      	mov	r4, r0
 800af36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d070      	beq.n	800b020 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af3e:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800af42:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af44:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800af46:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af48:	4302      	orrs	r2, r0
 800af4a:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800af4c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af50:	4302      	orrs	r2, r0
 800af52:	69e0      	ldr	r0, [r4, #28]
 800af54:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800af56:	68d8      	ldr	r0, [r3, #12]
 800af58:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800af5c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af5e:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af60:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af62:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800af66:	4329      	orrs	r1, r5
 800af68:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800af6a:	68d9      	ldr	r1, [r3, #12]
 800af6c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800af70:	f021 010c 	bic.w	r1, r1, #12
 800af74:	430a      	orrs	r2, r1
 800af76:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af78:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800af7a:	492e      	ldr	r1, [pc, #184]	; (800b034 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800af80:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800af82:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af84:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800af86:	d050      	beq.n	800b02a <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800af88:	f7ff fdb0 	bl	800aaec <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af8c:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800af9a:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af9c:	d027      	beq.n	800afee <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	fbb0 f3f3 	udiv	r3, r0, r3
 800afa4:	2564      	movs	r5, #100	; 0x64
 800afa6:	4824      	ldr	r0, [pc, #144]	; (800b038 <HAL_UART_Init+0x110>)
 800afa8:	6822      	ldr	r2, [r4, #0]
 800afaa:	fba0 6103 	umull	r6, r1, r0, r3
 800afae:	0949      	lsrs	r1, r1, #5
 800afb0:	fb05 3311 	mls	r3, r5, r1, r3
 800afb4:	011b      	lsls	r3, r3, #4
 800afb6:	3332      	adds	r3, #50	; 0x32
 800afb8:	fba0 0303 	umull	r0, r3, r0, r3
 800afbc:	0109      	lsls	r1, r1, #4
 800afbe:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800afc2:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afc4:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800afc6:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afc8:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800afca:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afcc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800afd0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800afd2:	6953      	ldr	r3, [r2, #20]
 800afd4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800afd8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800afda:	68d3      	ldr	r3, [r2, #12]
 800afdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800afe0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe2:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800afe4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800afe8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800afec:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afee:	005b      	lsls	r3, r3, #1
 800aff0:	fbb0 f0f3 	udiv	r0, r0, r3
 800aff4:	2364      	movs	r3, #100	; 0x64
 800aff6:	4e10      	ldr	r6, [pc, #64]	; (800b038 <HAL_UART_Init+0x110>)
 800aff8:	6822      	ldr	r2, [r4, #0]
 800affa:	fba6 5100 	umull	r5, r1, r6, r0
 800affe:	094d      	lsrs	r5, r1, #5
 800b000:	fb03 0315 	mls	r3, r3, r5, r0
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	3332      	adds	r3, #50	; 0x32
 800b008:	fba6 1303 	umull	r1, r3, r6, r3
 800b00c:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800b010:	091b      	lsrs	r3, r3, #4
 800b012:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b016:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b01a:	440b      	add	r3, r1
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	e7d1      	b.n	800afc4 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800b020:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800b024:	f7fc fe20 	bl	8007c68 <HAL_UART_MspInit>
 800b028:	e789      	b.n	800af3e <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800b02a:	f7ff fd6f 	bl	800ab0c <HAL_RCC_GetPCLK2Freq>
 800b02e:	e7ad      	b.n	800af8c <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800b030:	2001      	movs	r0, #1
}
 800b032:	4770      	bx	lr
 800b034:	40013800 	.word	0x40013800
 800b038:	51eb851f 	.word	0x51eb851f

0800b03c <HAL_UART_Transmit_DMA>:
{
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800b040:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800b044:	2820      	cmp	r0, #32
 800b046:	d12d      	bne.n	800b0a4 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800b048:	b351      	cbz	r1, 800b0a0 <HAL_UART_Transmit_DMA+0x64>
 800b04a:	b34a      	cbz	r2, 800b0a0 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800b04c:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800b050:	2801      	cmp	r0, #1
 800b052:	d027      	beq.n	800b0a4 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b054:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b056:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b05a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b05e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b060:	4f11      	ldr	r7, [pc, #68]	; (800b0a8 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b062:	4e12      	ldr	r6, [pc, #72]	; (800b0ac <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800b064:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800b066:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b068:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800b06a:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800b06c:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b070:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b074:	4613      	mov	r3, r2
 800b076:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b078:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b07c:	4e0c      	ldr	r6, [pc, #48]	; (800b0b0 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b07e:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800b080:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b082:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b084:	f7fd fd0e 	bl	8008aa4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b08c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800b08e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b090:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800b092:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b096:	695a      	ldr	r2, [r3, #20]
 800b098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b09c:	615a      	str	r2, [r3, #20]
}
 800b09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800b0a0:	2001      	movs	r0, #1
}
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800b0a4:	2002      	movs	r0, #2
}
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	0800b155 	.word	0x0800b155
 800b0ac:	0800b181 	.word	0x0800b181
 800b0b0:	0800b191 	.word	0x0800b191

0800b0b4 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0b4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d13f      	bne.n	800b13c <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	d03b      	beq.n	800b138 <HAL_UART_Receive_DMA+0x84>
 800b0c0:	2a00      	cmp	r2, #0
 800b0c2:	d039      	beq.n	800b138 <HAL_UART_Receive_DMA+0x84>
{
 800b0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800b0c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	2b01      	cmp	r3, #1
{
 800b0ce:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800b0d0:	d036      	beq.n	800b140 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800b0d4:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0d8:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800b0dc:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800b0de:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b0e0:	4f19      	ldr	r7, [pc, #100]	; (800b148 <HAL_UART_Receive_DMA+0x94>)
 800b0e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0e4:	4e19      	ldr	r6, [pc, #100]	; (800b14c <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800b0e8:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ec:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b0ee:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0f0:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b0f4:	460a      	mov	r2, r1
 800b0f6:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0f8:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b0fc:	4e14      	ldr	r6, [pc, #80]	; (800b150 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b0fe:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800b100:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b102:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b104:	f7fd fcce 	bl	8008aa4 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800b108:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	9501      	str	r5, [sp, #4]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	9201      	str	r2, [sp, #4]
 800b112:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800b114:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b118:	9201      	str	r2, [sp, #4]
 800b11a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b122:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b124:	695a      	ldr	r2, [r3, #20]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b12c:	695a      	ldr	r2, [r3, #20]
 800b12e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b132:	615a      	str	r2, [r3, #20]
}
 800b134:	b003      	add	sp, #12
 800b136:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800b138:	2001      	movs	r0, #1
}
 800b13a:	4770      	bx	lr
    return HAL_BUSY;
 800b13c:	2002      	movs	r0, #2
 800b13e:	4770      	bx	lr
 800b140:	2002      	movs	r0, #2
}
 800b142:	b003      	add	sp, #12
 800b144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b146:	bf00      	nop
 800b148:	0800b23d 	.word	0x0800b23d
 800b14c:	0800b221 	.word	0x0800b221
 800b150:	0800b191 	.word	0x0800b191

0800b154 <UART_DMATransmitCplt>:
{
 800b154:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b156:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b158:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f013 0320 	ands.w	r3, r3, #32
 800b160:	d10a      	bne.n	800b178 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b162:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800b164:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b166:	6953      	ldr	r3, [r2, #20]
 800b168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b16c:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b16e:	68d3      	ldr	r3, [r2, #12]
 800b170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b174:	60d3      	str	r3, [r2, #12]
}
 800b176:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b178:	f7fc fbac 	bl	80078d4 <HAL_UART_TxCpltCallback>
}
 800b17c:	bd08      	pop	{r3, pc}
 800b17e:	bf00      	nop

0800b180 <UART_DMATxHalfCplt>:
{
 800b180:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800b182:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b184:	f7fc fb92 	bl	80078ac <HAL_UART_TxHalfCpltCallback>
}
 800b188:	bd08      	pop	{r3, pc}
 800b18a:	bf00      	nop

0800b18c <HAL_UART_RxHalfCpltCallback>:
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop

0800b190 <UART_DMAError>:
{
 800b190:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b192:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b194:	6803      	ldr	r3, [r0, #0]
 800b196:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b198:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800b19c:	2a21      	cmp	r2, #33	; 0x21
 800b19e:	d00b      	beq.n	800b1b8 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1a2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b1a6:	2a22      	cmp	r2, #34	; 0x22
 800b1a8:	d016      	beq.n	800b1d8 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b1ac:	f043 0310 	orr.w	r3, r3, #16
 800b1b0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800b1b2:	f7fc fb71 	bl	8007898 <HAL_UART_ErrorCallback>
}
 800b1b6:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b1b8:	0609      	lsls	r1, r1, #24
 800b1ba:	d5f1      	bpl.n	800b1a0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800b1bc:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800b1be:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800b1c0:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1c2:	68da      	ldr	r2, [r3, #12]
 800b1c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b1c8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b1ca:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ce:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1d0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b1d4:	2a22      	cmp	r2, #34	; 0x22
 800b1d6:	d1e8      	bne.n	800b1aa <UART_DMAError+0x1a>
 800b1d8:	064a      	lsls	r2, r1, #25
 800b1da:	d5e6      	bpl.n	800b1aa <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800b1dc:	2200      	movs	r2, #0
 800b1de:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1e0:	68da      	ldr	r2, [r3, #12]
 800b1e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e8:	695a      	ldr	r2, [r3, #20]
 800b1ea:	f022 0201 	bic.w	r2, r2, #1
 800b1ee:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b1f2:	2a01      	cmp	r2, #1
 800b1f4:	d103      	bne.n	800b1fe <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	f022 0210 	bic.w	r2, r2, #16
 800b1fc:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800b1fe:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b200:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b202:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b206:	6303      	str	r3, [r0, #48]	; 0x30
}
 800b208:	e7cf      	b.n	800b1aa <UART_DMAError+0x1a>
 800b20a:	bf00      	nop

0800b20c <UART_DMAAbortOnError>:
{
 800b20c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800b20e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b210:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800b212:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b214:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800b216:	f7fc fb3f 	bl	8007898 <HAL_UART_ErrorCallback>
}
 800b21a:	bd08      	pop	{r3, pc}

0800b21c <HAL_UARTEx_RxEventCallback>:
}
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop

0800b220 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b220:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800b222:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b224:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b226:	2b01      	cmp	r3, #1
 800b228:	d002      	beq.n	800b230 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800b22a:	f7ff ffaf 	bl	800b18c <HAL_UART_RxHalfCpltCallback>
}
 800b22e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800b230:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b232:	0849      	lsrs	r1, r1, #1
 800b234:	f7ff fff2 	bl	800b21c <HAL_UARTEx_RxEventCallback>
}
 800b238:	bd08      	pop	{r3, pc}
 800b23a:	bf00      	nop

0800b23c <UART_DMAReceiveCplt>:
{
 800b23c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b23e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b240:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f013 0320 	ands.w	r3, r3, #32
 800b248:	d113      	bne.n	800b272 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800b24a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b24c:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800b24e:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b250:	68d3      	ldr	r3, [r2, #12]
 800b252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b256:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b258:	6953      	ldr	r3, [r2, #20]
 800b25a:	f023 0301 	bic.w	r3, r3, #1
 800b25e:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b260:	6953      	ldr	r3, [r2, #20]
 800b262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b266:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800b268:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b26c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d009      	beq.n	800b286 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b272:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b274:	2b01      	cmp	r3, #1
 800b276:	d002      	beq.n	800b27e <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800b278:	f7fc f9f2 	bl	8007660 <HAL_UART_RxCpltCallback>
}
 800b27c:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b27e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b280:	f7ff ffcc 	bl	800b21c <HAL_UARTEx_RxEventCallback>
}
 800b284:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b286:	68d3      	ldr	r3, [r2, #12]
 800b288:	f023 0310 	bic.w	r3, r3, #16
 800b28c:	60d3      	str	r3, [r2, #12]
 800b28e:	e7f0      	b.n	800b272 <UART_DMAReceiveCplt+0x36>

0800b290 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b290:	6883      	ldr	r3, [r0, #8]
 800b292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b296:	d03b      	beq.n	800b310 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b298:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d030      	beq.n	800b300 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b29e:	6803      	ldr	r3, [r0, #0]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800b2a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800b2ae:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b2b6:	bb53      	cbnz	r3, 800b30e <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800b2b8:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2bc:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b2be:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2c0:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b2c2:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2c4:	f021 0120 	bic.w	r1, r1, #32
 800b2c8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2ca:	68d1      	ldr	r1, [r2, #12]
 800b2cc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b2d0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2d2:	6951      	ldr	r1, [r2, #20]
 800b2d4:	f021 0101 	bic.w	r1, r1, #1
 800b2d8:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800b2da:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2de:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b2e0:	2901      	cmp	r1, #1
 800b2e2:	d120      	bne.n	800b326 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e4:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e6:	68d1      	ldr	r1, [r2, #12]
 800b2e8:	f021 0110 	bic.w	r1, r1, #16
 800b2ec:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b2ee:	6811      	ldr	r1, [r2, #0]
 800b2f0:	06c9      	lsls	r1, r1, #27
 800b2f2:	d422      	bmi.n	800b33a <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2f4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b2f6:	f7ff ff91 	bl	800b21c <HAL_UARTEx_RxEventCallback>
}
 800b2fa:	b003      	add	sp, #12
 800b2fc:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b300:	6903      	ldr	r3, [r0, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d1cb      	bne.n	800b29e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b306:	6803      	ldr	r3, [r0, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	7013      	strb	r3, [r2, #0]
 800b30c:	e7cc      	b.n	800b2a8 <UART_Receive_IT.part.0.isra.0+0x18>
 800b30e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b310:	6903      	ldr	r3, [r0, #16]
 800b312:	b96b      	cbnz	r3, 800b330 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b314:	6802      	ldr	r2, [r0, #0]
 800b316:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b318:	6852      	ldr	r2, [r2, #4]
 800b31a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b31e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800b322:	6283      	str	r3, [r0, #40]	; 0x28
 800b324:	e7c3      	b.n	800b2ae <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800b326:	f7fc f99b 	bl	8007660 <HAL_UART_RxCpltCallback>
}
 800b32a:	b003      	add	sp, #12
 800b32c:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b330:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b332:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	7013      	strb	r3, [r2, #0]
 800b338:	e7b6      	b.n	800b2a8 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	6813      	ldr	r3, [r2, #0]
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	6853      	ldr	r3, [r2, #4]
 800b342:	9301      	str	r3, [sp, #4]
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	e7d5      	b.n	800b2f4 <UART_Receive_IT.part.0.isra.0+0x64>

0800b348 <HAL_UART_IRQHandler>:
{
 800b348:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b34a:	6803      	ldr	r3, [r0, #0]
{
 800b34c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b34e:	681a      	ldr	r2, [r3, #0]
{
 800b350:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800b352:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b356:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b358:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800b35a:	d14e      	bne.n	800b3fa <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b35c:	0695      	lsls	r5, r2, #26
 800b35e:	d502      	bpl.n	800b366 <HAL_UART_IRQHandler+0x1e>
 800b360:	068d      	lsls	r5, r1, #26
 800b362:	f100 8090 	bmi.w	800b486 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b366:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b368:	2801      	cmp	r0, #1
 800b36a:	d00b      	beq.n	800b384 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b36c:	0610      	lsls	r0, r2, #24
 800b36e:	d502      	bpl.n	800b376 <HAL_UART_IRQHandler+0x2e>
 800b370:	060d      	lsls	r5, r1, #24
 800b372:	f100 8092 	bmi.w	800b49a <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b376:	0650      	lsls	r0, r2, #25
 800b378:	d502      	bpl.n	800b380 <HAL_UART_IRQHandler+0x38>
 800b37a:	064a      	lsls	r2, r1, #25
 800b37c:	f100 80ab 	bmi.w	800b4d6 <HAL_UART_IRQHandler+0x18e>
}
 800b380:	b003      	add	sp, #12
 800b382:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b384:	06d0      	lsls	r0, r2, #27
 800b386:	d5f1      	bpl.n	800b36c <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b388:	06cd      	lsls	r5, r1, #27
 800b38a:	d5ef      	bpl.n	800b36c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b38c:	2100      	movs	r1, #0
 800b38e:	9101      	str	r1, [sp, #4]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	9201      	str	r2, [sp, #4]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b39a:	695a      	ldr	r2, [r3, #20]
 800b39c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800b3a0:	f000 80d2 	beq.w	800b548 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b3a6:	6802      	ldr	r2, [r0, #0]
 800b3a8:	6852      	ldr	r2, [r2, #4]
 800b3aa:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d0e7      	beq.n	800b380 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b3b0:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b3b2:	4295      	cmp	r5, r2
 800b3b4:	d9e4      	bls.n	800b380 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800b3b6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3b8:	6982      	ldr	r2, [r0, #24]
 800b3ba:	2a20      	cmp	r2, #32
 800b3bc:	d016      	beq.n	800b3ec <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3c4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3c6:	695a      	ldr	r2, [r3, #20]
 800b3c8:	f022 0201 	bic.w	r2, r2, #1
 800b3cc:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ce:	695a      	ldr	r2, [r3, #20]
 800b3d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3d4:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3dc:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3de:	68da      	ldr	r2, [r3, #12]
 800b3e0:	f022 0210 	bic.w	r2, r2, #16
 800b3e4:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3e6:	f7fd fba7 	bl	8008b38 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ea:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b3ec:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	1a69      	subs	r1, r5, r1
 800b3f2:	b289      	uxth	r1, r1
 800b3f4:	f7ff ff12 	bl	800b21c <HAL_UARTEx_RxEventCallback>
 800b3f8:	e7c2      	b.n	800b380 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b3fa:	f005 0501 	and.w	r5, r5, #1
 800b3fe:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800b402:	4328      	orrs	r0, r5
 800b404:	d0af      	beq.n	800b366 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b406:	07d0      	lsls	r0, r2, #31
 800b408:	d505      	bpl.n	800b416 <HAL_UART_IRQHandler+0xce>
 800b40a:	05c8      	lsls	r0, r1, #23
 800b40c:	d503      	bpl.n	800b416 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b40e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b410:	f040 0001 	orr.w	r0, r0, #1
 800b414:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b416:	0750      	lsls	r0, r2, #29
 800b418:	d530      	bpl.n	800b47c <HAL_UART_IRQHandler+0x134>
 800b41a:	b14d      	cbz	r5, 800b430 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b41c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b41e:	f040 0002 	orr.w	r0, r0, #2
 800b422:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b424:	0790      	lsls	r0, r2, #30
 800b426:	d503      	bpl.n	800b430 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b428:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b42a:	f040 0004 	orr.w	r0, r0, #4
 800b42e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b430:	0710      	lsls	r0, r2, #28
 800b432:	d507      	bpl.n	800b444 <HAL_UART_IRQHandler+0xfc>
 800b434:	f001 0020 	and.w	r0, r1, #32
 800b438:	4328      	orrs	r0, r5
 800b43a:	d003      	beq.n	800b444 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b43c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b43e:	f040 0008 	orr.w	r0, r0, #8
 800b442:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b444:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b446:	2800      	cmp	r0, #0
 800b448:	d09a      	beq.n	800b380 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b44a:	0690      	lsls	r0, r2, #26
 800b44c:	d509      	bpl.n	800b462 <HAL_UART_IRQHandler+0x11a>
 800b44e:	068a      	lsls	r2, r1, #26
 800b450:	d507      	bpl.n	800b462 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b452:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800b456:	2a22      	cmp	r2, #34	; 0x22
 800b458:	d103      	bne.n	800b462 <HAL_UART_IRQHandler+0x11a>
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff ff18 	bl	800b290 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b464:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b466:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b46a:	f005 0508 	and.w	r5, r5, #8
 800b46e:	4315      	orrs	r5, r2
 800b470:	d13c      	bne.n	800b4ec <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800b472:	4620      	mov	r0, r4
 800b474:	f7fc fa10 	bl	8007898 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b478:	6425      	str	r5, [r4, #64]	; 0x40
 800b47a:	e781      	b.n	800b380 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b47c:	0790      	lsls	r0, r2, #30
 800b47e:	d5d7      	bpl.n	800b430 <HAL_UART_IRQHandler+0xe8>
 800b480:	2d00      	cmp	r5, #0
 800b482:	d1d1      	bne.n	800b428 <HAL_UART_IRQHandler+0xe0>
 800b484:	e7d4      	b.n	800b430 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b486:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b48a:	2b22      	cmp	r3, #34	; 0x22
 800b48c:	f47f af78 	bne.w	800b380 <HAL_UART_IRQHandler+0x38>
}
 800b490:	b003      	add	sp, #12
 800b492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b496:	f7ff befb 	b.w	800b290 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b49a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b49e:	2a21      	cmp	r2, #33	; 0x21
 800b4a0:	f47f af6e 	bne.w	800b380 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4a4:	68a2      	ldr	r2, [r4, #8]
 800b4a6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b4aa:	d06e      	beq.n	800b58a <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4ac:	6a22      	ldr	r2, [r4, #32]
 800b4ae:	1c51      	adds	r1, r2, #1
 800b4b0:	6221      	str	r1, [r4, #32]
 800b4b2:	7812      	ldrb	r2, [r2, #0]
 800b4b4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800b4b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800b4b8:	3a01      	subs	r2, #1
 800b4ba:	b292      	uxth	r2, r2
 800b4bc:	84e2      	strh	r2, [r4, #38]	; 0x26
 800b4be:	2a00      	cmp	r2, #0
 800b4c0:	f47f af5e 	bne.w	800b380 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4ca:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4d2:	60da      	str	r2, [r3, #12]
 800b4d4:	e754      	b.n	800b380 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800b4d6:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4d8:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800b4da:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4e0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b4e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800b4e6:	f7fc f9f5 	bl	80078d4 <HAL_UART_TxCpltCallback>
    return;
 800b4ea:	e749      	b.n	800b380 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4ec:	68da      	ldr	r2, [r3, #12]
 800b4ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b4f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f4:	695a      	ldr	r2, [r3, #20]
 800b4f6:	f022 0201 	bic.w	r2, r2, #1
 800b4fa:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b4fe:	2a01      	cmp	r2, #1
 800b500:	d103      	bne.n	800b50a <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b502:	68da      	ldr	r2, [r3, #12]
 800b504:	f022 0210 	bic.w	r2, r2, #16
 800b508:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b50a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b50c:	2120      	movs	r1, #32
 800b50e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b512:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b514:	695a      	ldr	r2, [r3, #20]
 800b516:	0655      	lsls	r5, r2, #25
 800b518:	d512      	bpl.n	800b540 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b51a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b51c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b51e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b522:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b524:	b160      	cbz	r0, 800b540 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b526:	4b1e      	ldr	r3, [pc, #120]	; (800b5a0 <HAL_UART_IRQHandler+0x258>)
 800b528:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b52a:	f7fd fb2d 	bl	8008b88 <HAL_DMA_Abort_IT>
 800b52e:	2800      	cmp	r0, #0
 800b530:	f43f af26 	beq.w	800b380 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b534:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b536:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800b538:	b003      	add	sp, #12
 800b53a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b53e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800b540:	4620      	mov	r0, r4
 800b542:	f7fc f9a9 	bl	8007898 <HAL_UART_ErrorCallback>
 800b546:	e71b      	b.n	800b380 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b548:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800b54a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b54c:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800b54e:	b289      	uxth	r1, r1
 800b550:	2900      	cmp	r1, #0
 800b552:	f43f af15 	beq.w	800b380 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b556:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b558:	1a08      	subs	r0, r1, r0
 800b55a:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800b55c:	2900      	cmp	r1, #0
 800b55e:	f43f af0f 	beq.w	800b380 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800b562:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b564:	68d8      	ldr	r0, [r3, #12]
 800b566:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800b56a:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b56c:	6958      	ldr	r0, [r3, #20]
 800b56e:	f020 0001 	bic.w	r0, r0, #1
 800b572:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800b574:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b578:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b57a:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b57c:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b57e:	f022 0210 	bic.w	r2, r2, #16
 800b582:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b584:	f7ff fe4a 	bl	800b21c <HAL_UARTEx_RxEventCallback>
 800b588:	e6fa      	b.n	800b380 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b58a:	6922      	ldr	r2, [r4, #16]
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	d18d      	bne.n	800b4ac <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b590:	6a22      	ldr	r2, [r4, #32]
 800b592:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b596:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b59a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b59c:	6222      	str	r2, [r4, #32]
 800b59e:	e78a      	b.n	800b4b6 <HAL_UART_IRQHandler+0x16e>
 800b5a0:	0800b20d 	.word	0x0800b20d

0800b5a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b5a4:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b5a6:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b5a8:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800b5ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800b5b0:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800b5b2:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b5b6:	4770      	bx	lr

0800b5b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b5b8:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b5ba:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800b5be:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800b5c2:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b5c4:	400a      	ands	r2, r1
 800b5c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800b5ca:	4770      	bx	lr

0800b5cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	f10d 0c04 	add.w	ip, sp, #4
 800b5d2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800b5d6:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b5d8:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b5da:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800b5dc:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b5de:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b5e2:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800b5e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800b5e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800b5ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop

0800b5f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b5f6:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800b5f8:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b5fc:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800b600:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b602:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800b606:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b60a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800b60e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800b612:	f1be 0f03 	cmp.w	lr, #3
 800b616:	f200 815a 	bhi.w	800b8ce <USB_ActivateEndpoint+0x2da>
 800b61a:	e8df f00e 	tbb	[pc, lr]
 800b61e:	4e52      	.short	0x4e52
 800b620:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b622:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800b626:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b628:	f248 0580 	movw	r5, #32896	; 0x8080
 800b62c:	ea4c 0c05 	orr.w	ip, ip, r5
 800b630:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b634:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b638:	4ca6      	ldr	r4, [pc, #664]	; (800b8d4 <USB_ActivateEndpoint+0x2e0>)
 800b63a:	fa1f fc8c 	uxth.w	ip, ip
 800b63e:	ea0c 0c04 	and.w	ip, ip, r4
 800b642:	ea4c 0c02 	orr.w	ip, ip, r2
 800b646:	ea45 050c 	orr.w	r5, r5, ip
 800b64a:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800b64e:	7b0d      	ldrb	r5, [r1, #12]
 800b650:	2d00      	cmp	r5, #0
 800b652:	d17e      	bne.n	800b752 <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800b654:	784d      	ldrb	r5, [r1, #1]
 800b656:	2d00      	cmp	r5, #0
 800b658:	f000 80dd 	beq.w	800b816 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b65c:	88c9      	ldrh	r1, [r1, #6]
 800b65e:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b662:	0849      	lsrs	r1, r1, #1
 800b664:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800b668:	0049      	lsls	r1, r1, #1
 800b66a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b66e:	b2ad      	uxth	r5, r5
 800b670:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b672:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b676:	064e      	lsls	r6, r1, #25
 800b678:	d509      	bpl.n	800b68e <USB_ActivateEndpoint+0x9a>
 800b67a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b67e:	b289      	uxth	r1, r1
 800b680:	400c      	ands	r4, r1
 800b682:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800b686:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800b68a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b68e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b692:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b696:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b69a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b69e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b6a2:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800b6a6:	d04d      	beq.n	800b744 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b6a8:	f081 0120 	eor.w	r1, r1, #32
 800b6ac:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b6b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b6b4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800b6ba:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b6bc:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800b6c0:	e7b2      	b.n	800b628 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800b6c2:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800b6c4:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800b6c8:	e7ae      	b.n	800b628 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6ca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6ce:	044d      	lsls	r5, r1, #17
 800b6d0:	d509      	bpl.n	800b6e6 <USB_ActivateEndpoint+0xf2>
 800b6d2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6d6:	b289      	uxth	r1, r1
 800b6d8:	400c      	ands	r4, r1
 800b6da:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b6de:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b6e2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6e6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6ea:	0649      	lsls	r1, r1, #25
 800b6ec:	d50d      	bpl.n	800b70a <USB_ActivateEndpoint+0x116>
 800b6ee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6f2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b6f6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b6fa:	0409      	lsls	r1, r1, #16
 800b6fc:	0c09      	lsrs	r1, r1, #16
 800b6fe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b702:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b706:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b70a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b70e:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b712:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b716:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b71a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b71e:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b722:	bf18      	it	ne
 800b724:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b728:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b72c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b730:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b734:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b738:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b73c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b740:	0409      	lsls	r1, r1, #16
 800b742:	0c09      	lsrs	r1, r1, #16
 800b744:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b748:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b74c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b752:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b756:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b75a:	fa1f fc8c 	uxth.w	ip, ip
 800b75e:	ea0c 0c04 	and.w	ip, ip, r4
 800b762:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800b766:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800b76a:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b76e:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800b772:	890e      	ldrh	r6, [r1, #8]
 800b774:	fa1f fc8c 	uxth.w	ip, ip
 800b778:	0876      	lsrs	r6, r6, #1
 800b77a:	44bc      	add	ip, r7
 800b77c:	0076      	lsls	r6, r6, #1
 800b77e:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800b782:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800b786:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b78a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b78e:	b2ad      	uxth	r5, r5
 800b790:	443d      	add	r5, r7
 800b792:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b796:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800b79a:	7849      	ldrb	r1, [r1, #1]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	d194      	bne.n	800b6ca <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7a4:	044f      	lsls	r7, r1, #17
 800b7a6:	d509      	bpl.n	800b7bc <USB_ActivateEndpoint+0x1c8>
 800b7a8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7ac:	b289      	uxth	r1, r1
 800b7ae:	400c      	ands	r4, r1
 800b7b0:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b7b4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b7b8:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7bc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7c0:	064e      	lsls	r6, r1, #25
 800b7c2:	d50d      	bpl.n	800b7e0 <USB_ActivateEndpoint+0x1ec>
 800b7c4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b7cc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b7d0:	0409      	lsls	r1, r1, #16
 800b7d2:	0c09      	lsrs	r1, r1, #16
 800b7d4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b7d8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b7dc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7e0:	f248 0480 	movw	r4, #32896	; 0x8080
 800b7e4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7e8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b7ec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b7f0:	0409      	lsls	r1, r1, #16
 800b7f2:	0c09      	lsrs	r1, r1, #16
 800b7f4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b7f8:	4321      	orrs	r1, r4
 800b7fa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7fe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b802:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b806:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b80a:	0409      	lsls	r1, r1, #16
 800b80c:	0c09      	lsrs	r1, r1, #16
 800b80e:	4321      	orrs	r1, r4
 800b810:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b814:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b816:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800b81a:	88cd      	ldrh	r5, [r1, #6]
 800b81c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b820:	b2a4      	uxth	r4, r4
 800b822:	086d      	lsrs	r5, r5, #1
 800b824:	006d      	lsls	r5, r5, #1
 800b826:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b828:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b82a:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b82e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800b832:	b289      	uxth	r1, r1
 800b834:	4439      	add	r1, r7
 800b836:	b366      	cbz	r6, 800b892 <USB_ActivateEndpoint+0x29e>
 800b838:	2e3e      	cmp	r6, #62	; 0x3e
 800b83a:	d83c      	bhi.n	800b8b6 <USB_ActivateEndpoint+0x2c2>
 800b83c:	0874      	lsrs	r4, r6, #1
 800b83e:	07f5      	lsls	r5, r6, #31
 800b840:	bf48      	it	mi
 800b842:	3401      	addmi	r4, #1
 800b844:	02a4      	lsls	r4, r4, #10
 800b846:	b2a4      	uxth	r4, r4
 800b848:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b84c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b850:	0449      	lsls	r1, r1, #17
 800b852:	d50d      	bpl.n	800b870 <USB_ActivateEndpoint+0x27c>
 800b854:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b858:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b85c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b860:	0409      	lsls	r1, r1, #16
 800b862:	0c09      	lsrs	r1, r1, #16
 800b864:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800b868:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b86c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b870:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b874:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b878:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b87c:	0409      	lsls	r1, r1, #16
 800b87e:	0c09      	lsrs	r1, r1, #16
 800b880:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b884:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b888:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b88c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b890:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b892:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b896:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b89a:	0424      	lsls	r4, r4, #16
 800b89c:	0c24      	lsrs	r4, r4, #16
 800b89e:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b8a2:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b8a6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b8aa:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b8ae:	b2a4      	uxth	r4, r4
 800b8b0:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b8b4:	e7ca      	b.n	800b84c <USB_ActivateEndpoint+0x258>
 800b8b6:	0975      	lsrs	r5, r6, #5
 800b8b8:	06f4      	lsls	r4, r6, #27
 800b8ba:	4c07      	ldr	r4, [pc, #28]	; (800b8d8 <USB_ActivateEndpoint+0x2e4>)
 800b8bc:	bf08      	it	eq
 800b8be:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800b8c2:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b8c6:	b2a4      	uxth	r4, r4
 800b8c8:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b8cc:	e7be      	b.n	800b84c <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	e6aa      	b.n	800b628 <USB_ActivateEndpoint+0x34>
 800b8d2:	bf00      	nop
 800b8d4:	ffff8f8f 	.word	0xffff8f8f
 800b8d8:	ffff8000 	.word	0xffff8000

0800b8dc <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800b8dc:	7b0b      	ldrb	r3, [r1, #12]
 800b8de:	b9cb      	cbnz	r3, 800b914 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800b8e0:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8e2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 80b1 	beq.w	800ba4c <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b8ee:	0659      	lsls	r1, r3, #25
 800b8f0:	f100 80c5 	bmi.w	800ba7e <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b8f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b900:	041b      	lsls	r3, r3, #16
 800b902:	0c1b      	lsrs	r3, r3, #16
 800b904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800b910:	2000      	movs	r0, #0
 800b912:	4770      	bx	lr
    if (ep->is_in == 0U)
 800b914:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b916:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d14b      	bne.n	800b9b4 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b91c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b920:	0459      	lsls	r1, r3, #17
 800b922:	d50d      	bpl.n	800b940 <USB_DeactivateEndpoint+0x64>
 800b924:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b92c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b930:	041b      	lsls	r3, r3, #16
 800b932:	0c1b      	lsrs	r3, r3, #16
 800b934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b940:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b944:	065b      	lsls	r3, r3, #25
 800b946:	d50d      	bpl.n	800b964 <USB_DeactivateEndpoint+0x88>
 800b948:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b94c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	0c1b      	lsrs	r3, r3, #16
 800b958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b95c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b960:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b964:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800b968:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b96c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b974:	041b      	lsls	r3, r3, #16
 800b976:	0c1b      	lsrs	r3, r3, #16
 800b978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b97c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b980:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b984:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b98c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b990:	041b      	lsls	r3, r3, #16
 800b992:	0c1b      	lsrs	r3, r3, #16
 800b994:	430b      	orrs	r3, r1
 800b996:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b99a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b99e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9a6:	041b      	lsls	r3, r3, #16
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	430b      	orrs	r3, r1
 800b9ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9b8:	0459      	lsls	r1, r3, #17
 800b9ba:	d50d      	bpl.n	800b9d8 <USB_DeactivateEndpoint+0xfc>
 800b9bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9c8:	041b      	lsls	r3, r3, #16
 800b9ca:	0c1b      	lsrs	r3, r3, #16
 800b9cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9dc:	065b      	lsls	r3, r3, #25
 800b9de:	d50d      	bpl.n	800b9fc <USB_DeactivateEndpoint+0x120>
 800b9e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9ec:	041b      	lsls	r3, r3, #16
 800b9ee:	0c1b      	lsrs	r3, r3, #16
 800b9f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9fc:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800ba00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba0c:	041b      	lsls	r3, r3, #16
 800ba0e:	0c1b      	lsrs	r3, r3, #16
 800ba10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	0c1b      	lsrs	r3, r3, #16
 800ba2c:	430b      	orrs	r3, r1
 800ba2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3e:	041b      	lsls	r3, r3, #16
 800ba40:	0c1b      	lsrs	r3, r3, #16
 800ba42:	430b      	orrs	r3, r1
 800ba44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800ba48:	2000      	movs	r0, #0
 800ba4a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba50:	045b      	lsls	r3, r3, #17
 800ba52:	d50d      	bpl.n	800ba70 <USB_DeactivateEndpoint+0x194>
 800ba54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba60:	041b      	lsls	r3, r3, #16
 800ba62:	0c1b      	lsrs	r3, r3, #16
 800ba64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba7c:	e740      	b.n	800b900 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba8a:	041b      	lsls	r3, r3, #16
 800ba8c:	0c1b      	lsrs	r3, r3, #16
 800ba8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba96:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ba9a:	e72b      	b.n	800b8f4 <USB_DeactivateEndpoint+0x18>

0800ba9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baa0:	784b      	ldrb	r3, [r1, #1]
{
 800baa2:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d06b      	beq.n	800bb80 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800baa8:	7b08      	ldrb	r0, [r1, #12]
 800baaa:	2800      	cmp	r0, #0
 800baac:	d037      	beq.n	800bb1e <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800baae:	78c8      	ldrb	r0, [r1, #3]
 800bab0:	2802      	cmp	r0, #2
 800bab2:	f000 812d 	beq.w	800bd10 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bab6:	2801      	cmp	r0, #1
 800bab8:	f040 810a 	bne.w	800bcd0 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800babc:	6988      	ldr	r0, [r1, #24]
 800babe:	690c      	ldr	r4, [r1, #16]
 800bac0:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800bac2:	bf94      	ite	ls
 800bac4:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800bac6:	1b05      	subhi	r5, r0, r4
 800bac8:	618d      	str	r5, [r1, #24]
 800baca:	bf88      	it	hi
 800bacc:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f040 811b 	bne.w	800bd0a <USB_EPStartXfer+0x26e>
 800bad4:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bad8:	780b      	ldrb	r3, [r1, #0]
 800bada:	b2a4      	uxth	r4, r4
 800badc:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800bae0:	011b      	lsls	r3, r3, #4
 800bae2:	442c      	add	r4, r5
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f000 8251 	beq.w	800bf8c <USB_EPStartXfer+0x4f0>
 800baea:	283e      	cmp	r0, #62	; 0x3e
 800baec:	f200 80f3 	bhi.w	800bcd6 <USB_EPStartXfer+0x23a>
 800baf0:	0845      	lsrs	r5, r0, #1
 800baf2:	462e      	mov	r6, r5
 800baf4:	f010 0001 	ands.w	r0, r0, #1
 800baf8:	bf18      	it	ne
 800bafa:	1c6e      	addne	r6, r5, #1
 800bafc:	02b6      	lsls	r6, r6, #10
 800bafe:	b2b6      	uxth	r6, r6
 800bb00:	52e6      	strh	r6, [r4, r3]
 800bb02:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bb06:	b2a6      	uxth	r6, r4
 800bb08:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bb0c:	4434      	add	r4, r6
 800bb0e:	b100      	cbz	r0, 800bb12 <USB_EPStartXfer+0x76>
 800bb10:	3501      	adds	r5, #1
 800bb12:	02ad      	lsls	r5, r5, #10
 800bb14:	b2a8      	uxth	r0, r5
 800bb16:	52e0      	strh	r0, [r4, r3]
 800bb18:	f891 c000 	ldrb.w	ip, [r1]
 800bb1c:	e01d      	b.n	800bb5a <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800bb1e:	698c      	ldr	r4, [r1, #24]
 800bb20:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb22:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800bb24:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800bb26:	bf84      	itt	hi
 800bb28:	1ae0      	subhi	r0, r4, r3
 800bb2a:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb2c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bb30:	6188      	str	r0, [r1, #24]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bb38:	012d      	lsls	r5, r5, #4
 800bb3a:	4403      	add	r3, r0
 800bb3c:	2c00      	cmp	r4, #0
 800bb3e:	f000 80b7 	beq.w	800bcb0 <USB_EPStartXfer+0x214>
 800bb42:	2c3e      	cmp	r4, #62	; 0x3e
 800bb44:	f200 8129 	bhi.w	800bd9a <USB_EPStartXfer+0x2fe>
 800bb48:	0860      	lsrs	r0, r4, #1
 800bb4a:	07e4      	lsls	r4, r4, #31
 800bb4c:	bf48      	it	mi
 800bb4e:	3001      	addmi	r0, #1
 800bb50:	0280      	lsls	r0, r0, #10
 800bb52:	b280      	uxth	r0, r0
 800bb54:	52e8      	strh	r0, [r5, r3]
 800bb56:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb5a:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800bb5e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb68:	041b      	lsls	r3, r3, #16
 800bb6a:	0c1b      	lsrs	r3, r3, #16
 800bb6c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bb70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb78:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800bb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800bb80:	690d      	ldr	r5, [r1, #16]
 800bb82:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800bb84:	7b0b      	ldrb	r3, [r1, #12]
 800bb86:	42a8      	cmp	r0, r5
 800bb88:	bf28      	it	cs
 800bb8a:	4628      	movcs	r0, r5
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d05d      	beq.n	800bc4c <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800bb90:	78cb      	ldrb	r3, [r1, #3]
 800bb92:	2b02      	cmp	r3, #2
 800bb94:	f000 810e 	beq.w	800bdb4 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bb98:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800bb9c:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bb9e:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800bba2:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800bba4:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800bba8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800bbac:	0424      	lsls	r4, r4, #16
 800bbae:	0c24      	lsrs	r4, r4, #16
 800bbb0:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800bbb4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800bbb8:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bbbc:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800bbc0:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bbc2:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbc6:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bbca:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800bbce:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bbd0:	f000 814a 	beq.w	800be68 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbd4:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bbd8:	4434      	add	r4, r6
 800bbda:	b286      	uxth	r6, r0
 800bbdc:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bbe0:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bbe2:	3601      	adds	r6, #1
 800bbe4:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800bbe8:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbea:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bbee:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800bbf2:	d008      	beq.n	800bc06 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800bbf4:	46cc      	mov	ip, r9
 800bbf6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800bbfa:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800bbfe:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800bc02:	42a6      	cmp	r6, r4
 800bc04:	d1f9      	bne.n	800bbfa <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800bc06:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bc0a:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bc0c:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bc0e:	f0c0 81b7 	bcc.w	800bf80 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800bc12:	2500      	movs	r5, #0
 800bc14:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d036      	beq.n	800bc88 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc1a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bc1e:	b285      	uxth	r5, r0
 800bc20:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bc24:	4428      	add	r0, r5
 800bc26:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc28:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc2a:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc2e:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc30:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bc32:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc34:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bc38:	d026      	beq.n	800bc88 <USB_EPStartXfer+0x1ec>
 800bc3a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800bc3e:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bc42:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800bc46:	4285      	cmp	r5, r0
 800bc48:	d1f9      	bne.n	800bc3e <USB_EPStartXfer+0x1a2>
 800bc4a:	e01d      	b.n	800bc88 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bc4c:	b284      	uxth	r4, r0
 800bc4e:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc50:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc52:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc56:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bc5a:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc5e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800bc62:	bf18      	it	ne
 800bc64:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800bc68:	d005      	beq.n	800bc76 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800bc6a:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800bc6e:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800bc70:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800bc74:	d1f9      	bne.n	800bc6a <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bc76:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bc7a:	7808      	ldrb	r0, [r1, #0]
 800bc7c:	b29d      	uxth	r5, r3
 800bc7e:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bc82:	0100      	lsls	r0, r0, #4
 800bc84:	442b      	add	r3, r5
 800bc86:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bc88:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800bc8a:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bc8c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bc90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc98:	041b      	lsls	r3, r3, #16
 800bc9a:	0c1b      	lsrs	r3, r3, #16
 800bc9c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bcb0:	5ae8      	ldrh	r0, [r5, r3]
 800bcb2:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bcb6:	0400      	lsls	r0, r0, #16
 800bcb8:	0c00      	lsrs	r0, r0, #16
 800bcba:	52e8      	strh	r0, [r5, r3]
 800bcbc:	5ae8      	ldrh	r0, [r5, r3]
 800bcbe:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800bcc2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800bcc6:	b280      	uxth	r0, r0
 800bcc8:	52e8      	strh	r0, [r5, r3]
 800bcca:	f891 c000 	ldrb.w	ip, [r1]
 800bcce:	e744      	b.n	800bb5a <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800bcd0:	2001      	movs	r0, #1
}
 800bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bcd6:	0945      	lsrs	r5, r0, #5
 800bcd8:	462f      	mov	r7, r5
 800bcda:	f010 001f 	ands.w	r0, r0, #31
 800bcde:	bf08      	it	eq
 800bce0:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800bce4:	462e      	mov	r6, r5
 800bce6:	4dbb      	ldr	r5, [pc, #748]	; (800bfd4 <USB_EPStartXfer+0x538>)
 800bce8:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800bcec:	b2ad      	uxth	r5, r5
 800bcee:	52e5      	strh	r5, [r4, r3]
 800bcf0:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bcf4:	b2a5      	uxth	r5, r4
 800bcf6:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bcfa:	442c      	add	r4, r5
 800bcfc:	b900      	cbnz	r0, 800bd00 <USB_EPStartXfer+0x264>
 800bcfe:	3e01      	subs	r6, #1
 800bd00:	48b4      	ldr	r0, [pc, #720]	; (800bfd4 <USB_EPStartXfer+0x538>)
 800bd02:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800bd06:	b280      	uxth	r0, r0
 800bd08:	52e0      	strh	r0, [r4, r3]
 800bd0a:	f891 c000 	ldrb.w	ip, [r1]
 800bd0e:	e724      	b.n	800bb5a <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bd10:	bb13      	cbnz	r3, 800bd58 <USB_EPStartXfer+0x2bc>
 800bd12:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bd16:	780b      	ldrb	r3, [r1, #0]
 800bd18:	b284      	uxth	r4, r0
 800bd1a:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bd1e:	4420      	add	r0, r4
 800bd20:	690c      	ldr	r4, [r1, #16]
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	2c00      	cmp	r4, #0
 800bd26:	f000 8109 	beq.w	800bf3c <USB_EPStartXfer+0x4a0>
 800bd2a:	2c3e      	cmp	r4, #62	; 0x3e
 800bd2c:	f200 818e 	bhi.w	800c04c <USB_EPStartXfer+0x5b0>
 800bd30:	0865      	lsrs	r5, r4, #1
 800bd32:	462e      	mov	r6, r5
 800bd34:	f014 0401 	ands.w	r4, r4, #1
 800bd38:	bf18      	it	ne
 800bd3a:	1c6e      	addne	r6, r5, #1
 800bd3c:	02b6      	lsls	r6, r6, #10
 800bd3e:	b2b6      	uxth	r6, r6
 800bd40:	52c6      	strh	r6, [r0, r3]
 800bd42:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bd46:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800bd4a:	b280      	uxth	r0, r0
 800bd4c:	4406      	add	r6, r0
 800bd4e:	b104      	cbz	r4, 800bd52 <USB_EPStartXfer+0x2b6>
 800bd50:	3501      	adds	r5, #1
 800bd52:	02ad      	lsls	r5, r5, #10
 800bd54:	b2a8      	uxth	r0, r5
 800bd56:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800bd58:	69cb      	ldr	r3, [r1, #28]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0d5      	beq.n	800bd0a <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bd5e:	f244 0340 	movw	r3, #16448	; 0x4040
 800bd62:	f891 c000 	ldrb.w	ip, [r1]
 800bd66:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bd6a:	ea03 0400 	and.w	r4, r3, r0
 800bd6e:	4383      	bics	r3, r0
 800bd70:	d002      	beq.n	800bd78 <USB_EPStartXfer+0x2dc>
 800bd72:	2c00      	cmp	r4, #0
 800bd74:	f47f aef1 	bne.w	800bb5a <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bd78:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800bd7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd84:	041b      	lsls	r3, r3, #16
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd90:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800bd94:	f891 c000 	ldrb.w	ip, [r1]
 800bd98:	e6df      	b.n	800bb5a <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bd9a:	0966      	lsrs	r6, r4, #5
 800bd9c:	06e0      	lsls	r0, r4, #27
 800bd9e:	488d      	ldr	r0, [pc, #564]	; (800bfd4 <USB_EPStartXfer+0x538>)
 800bda0:	bf08      	it	eq
 800bda2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800bda6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800bdaa:	b280      	uxth	r0, r0
 800bdac:	52e8      	strh	r0, [r5, r3]
 800bdae:	f891 c000 	ldrb.w	ip, [r1]
 800bdb2:	e6d2      	b.n	800bb5a <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800bdb4:	6a0c      	ldr	r4, [r1, #32]
 800bdb6:	42a5      	cmp	r5, r4
 800bdb8:	f080 8094 	bcs.w	800bee4 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bdbc:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800bdbe:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bdc0:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdc4:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bdc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd0:	041b      	lsls	r3, r3, #16
 800bdd2:	0c1b      	lsrs	r3, r3, #16
 800bdd4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bddc:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bde0:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800bde4:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bde6:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdea:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bdee:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bdf0:	f000 80f2 	beq.w	800bfd8 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdf4:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800bdf8:	4433      	add	r3, r6
 800bdfa:	fa1f fa80 	uxth.w	sl, r0
 800bdfe:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be02:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be04:	f10a 0801 	add.w	r8, sl, #1
 800be08:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800be0c:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be10:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be12:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800be16:	d008      	beq.n	800be2a <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800be18:	46bc      	mov	ip, r7
 800be1a:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800be1e:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800be22:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800be26:	45b3      	cmp	fp, r6
 800be28:	d1f9      	bne.n	800be1e <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800be2a:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800be2c:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800be2e:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800be30:	f080 8127 	bcs.w	800c082 <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800be34:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be36:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800be3a:	620c      	str	r4, [r1, #32]
 800be3c:	b284      	uxth	r4, r0
 800be3e:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800be42:	4420      	add	r0, r4
 800be44:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be48:	8908      	ldrh	r0, [r1, #8]
 800be4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800be4e:	f1b8 0f00 	cmp.w	r8, #0
 800be52:	f43f af19 	beq.w	800bc88 <USB_EPStartXfer+0x1ec>
 800be56:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800be5a:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800be5e:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800be62:	429c      	cmp	r4, r3
 800be64:	d1f9      	bne.n	800be5a <USB_EPStartXfer+0x3be>
 800be66:	e70f      	b.n	800bc88 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be68:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800be6c:	4434      	add	r4, r6
 800be6e:	b286      	uxth	r6, r0
 800be70:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be74:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be78:	3601      	adds	r6, #1
 800be7a:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800be7e:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be80:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be84:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800be88:	d008      	beq.n	800be9c <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800be8a:	464c      	mov	r4, r9
 800be8c:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800be90:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800be94:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800be96:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800be9a:	d1f9      	bne.n	800be90 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800be9c:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bea0:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bea2:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bea4:	d36f      	bcc.n	800bf86 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800bea6:	2500      	movs	r5, #0
 800bea8:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f43f aeec 	beq.w	800bc88 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800beb0:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800beb4:	b285      	uxth	r5, r0
 800beb6:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800beba:	4428      	add	r0, r5
 800bebc:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bebe:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bec0:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bec4:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bec6:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bec8:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800beca:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bece:	f43f aedb 	beq.w	800bc88 <USB_EPStartXfer+0x1ec>
 800bed2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800bed6:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800beda:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800bede:	429f      	cmp	r7, r3
 800bee0:	d1f9      	bne.n	800bed6 <USB_EPStartXfer+0x43a>
 800bee2:	e6d1      	b.n	800bc88 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bee4:	7808      	ldrb	r0, [r1, #0]
 800bee6:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800beea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800beee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bef2:	041b      	lsls	r3, r3, #16
 800bef4:	0c1b      	lsrs	r3, r3, #16
 800bef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800befa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800befe:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bf02:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bf06:	0100      	lsls	r0, r0, #4
 800bf08:	b29d      	uxth	r5, r3
 800bf0a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bf0e:	442b      	add	r3, r5
 800bf10:	b2a5      	uxth	r5, r4
 800bf12:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf14:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf16:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf18:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf1a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bf1e:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf20:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf22:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800bf26:	f43f aeaf 	beq.w	800bc88 <USB_EPStartXfer+0x1ec>
 800bf2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800bf2e:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bf32:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800bf36:	4298      	cmp	r0, r3
 800bf38:	d1f9      	bne.n	800bf2e <USB_EPStartXfer+0x492>
 800bf3a:	e6a5      	b.n	800bc88 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf3c:	5ac4      	ldrh	r4, [r0, r3]
 800bf3e:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bf42:	0424      	lsls	r4, r4, #16
 800bf44:	0c24      	lsrs	r4, r4, #16
 800bf46:	52c4      	strh	r4, [r0, r3]
 800bf48:	5ac5      	ldrh	r5, [r0, r3]
 800bf4a:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bf4e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bf52:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bf56:	b2ad      	uxth	r5, r5
 800bf58:	52c5      	strh	r5, [r0, r3]
 800bf5a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bf5e:	b285      	uxth	r5, r0
 800bf60:	4620      	mov	r0, r4
 800bf62:	4428      	add	r0, r5
 800bf64:	5ac4      	ldrh	r4, [r0, r3]
 800bf66:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bf6a:	0424      	lsls	r4, r4, #16
 800bf6c:	0c24      	lsrs	r4, r4, #16
 800bf6e:	52c4      	strh	r4, [r0, r3]
 800bf70:	5ac4      	ldrh	r4, [r0, r3]
 800bf72:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bf76:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bf7a:	b2a4      	uxth	r4, r4
 800bf7c:	52c4      	strh	r4, [r0, r3]
 800bf7e:	e6eb      	b.n	800bd58 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800bf80:	1a1d      	subs	r5, r3, r0
 800bf82:	4603      	mov	r3, r0
 800bf84:	e646      	b.n	800bc14 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800bf86:	1a1d      	subs	r5, r3, r0
 800bf88:	4603      	mov	r3, r0
 800bf8a:	e78d      	b.n	800bea8 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bf8c:	5ae0      	ldrh	r0, [r4, r3]
 800bf8e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bf92:	0400      	lsls	r0, r0, #16
 800bf94:	0c00      	lsrs	r0, r0, #16
 800bf96:	52e0      	strh	r0, [r4, r3]
 800bf98:	5ae5      	ldrh	r5, [r4, r3]
 800bf9a:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bf9e:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bfa2:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bfa6:	b2ad      	uxth	r5, r5
 800bfa8:	52e5      	strh	r5, [r4, r3]
 800bfaa:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bfae:	b2a4      	uxth	r4, r4
 800bfb0:	4420      	add	r0, r4
 800bfb2:	5ac4      	ldrh	r4, [r0, r3]
 800bfb4:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bfb8:	0424      	lsls	r4, r4, #16
 800bfba:	0c24      	lsrs	r4, r4, #16
 800bfbc:	52c4      	strh	r4, [r0, r3]
 800bfbe:	5ac4      	ldrh	r4, [r0, r3]
 800bfc0:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bfc4:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bfc8:	b2a4      	uxth	r4, r4
 800bfca:	52c4      	strh	r4, [r0, r3]
 800bfcc:	f891 c000 	ldrb.w	ip, [r1]
 800bfd0:	e5c3      	b.n	800bb5a <USB_EPStartXfer+0xbe>
 800bfd2:	bf00      	nop
 800bfd4:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bfd8:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bfdc:	4433      	add	r3, r6
 800bfde:	fa1f fa80 	uxth.w	sl, r0
 800bfe2:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bfe6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bfea:	f10a 0801 	add.w	r8, sl, #1
 800bfee:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bff2:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bff6:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bff8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800bffc:	d008      	beq.n	800c010 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800bffe:	463e      	mov	r6, r7
 800c000:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800c004:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800c008:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800c00a:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800c00e:	d1f9      	bne.n	800c004 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800c010:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800c012:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800c014:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800c016:	d23e      	bcs.n	800c096 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800c018:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c01a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c01e:	620c      	str	r4, [r1, #32]
 800c020:	b284      	uxth	r4, r0
 800c022:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800c026:	4420      	add	r0, r4
 800c028:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c02c:	8948      	ldrh	r0, [r1, #10]
 800c02e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800c032:	f1b8 0f00 	cmp.w	r8, #0
 800c036:	f43f ae27 	beq.w	800bc88 <USB_EPStartXfer+0x1ec>
 800c03a:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800c03e:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800c042:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800c046:	429c      	cmp	r4, r3
 800c048:	d1f9      	bne.n	800c03e <USB_EPStartXfer+0x5a2>
 800c04a:	e61d      	b.n	800bc88 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c04c:	0965      	lsrs	r5, r4, #5
 800c04e:	462f      	mov	r7, r5
 800c050:	f014 041f 	ands.w	r4, r4, #31
 800c054:	bf08      	it	eq
 800c056:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800c05a:	462e      	mov	r6, r5
 800c05c:	4d13      	ldr	r5, [pc, #76]	; (800c0ac <USB_EPStartXfer+0x610>)
 800c05e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800c062:	b2ad      	uxth	r5, r5
 800c064:	52c5      	strh	r5, [r0, r3]
 800c066:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c06a:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800c06e:	b280      	uxth	r0, r0
 800c070:	4405      	add	r5, r0
 800c072:	b904      	cbnz	r4, 800c076 <USB_EPStartXfer+0x5da>
 800c074:	3e01      	subs	r6, #1
 800c076:	480d      	ldr	r0, [pc, #52]	; (800c0ac <USB_EPStartXfer+0x610>)
 800c078:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800c07c:	b280      	uxth	r0, r0
 800c07e:	52e8      	strh	r0, [r5, r3]
 800c080:	e66a      	b.n	800bd58 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c082:	fa1f f884 	uxth.w	r8, r4
 800c086:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c08a:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c08e:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800c092:	2400      	movs	r4, #0
 800c094:	e6cf      	b.n	800be36 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c096:	fa1f f884 	uxth.w	r8, r4
 800c09a:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c09e:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c0a2:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800c0a6:	2400      	movs	r4, #0
 800c0a8:	e7b7      	b.n	800c01a <USB_EPStartXfer+0x57e>
 800c0aa:	bf00      	nop
 800c0ac:	ffff8000 	.word	0xffff8000

0800c0b0 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800c0b0:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c0b2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800c0b4:	b18b      	cbz	r3, 800c0da <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c0b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c2:	041b      	lsls	r3, r3, #16
 800c0c4:	0c1b      	lsrs	r3, r3, #16
 800c0c6:	f083 0310 	eor.w	r3, r3, #16
 800c0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c0da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c0de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0e6:	041b      	lsls	r3, r3, #16
 800c0e8:	0c1b      	lsrs	r3, r3, #16
 800c0ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop

0800c100 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800c100:	7b0b      	ldrb	r3, [r1, #12]
 800c102:	bb3b      	cbnz	r3, 800c154 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800c104:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c106:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800c108:	b333      	cbz	r3, 800c158 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c10a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c10e:	065b      	lsls	r3, r3, #25
 800c110:	d50d      	bpl.n	800c12e <USB_EPClearStall+0x2e>
 800c112:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11e:	041b      	lsls	r3, r3, #16
 800c120:	0c1b      	lsrs	r3, r3, #16
 800c122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c12a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800c12e:	78cb      	ldrb	r3, [r1, #3]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d00f      	beq.n	800c154 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c134:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c13c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c140:	041b      	lsls	r3, r3, #16
 800c142:	0c1b      	lsrs	r3, r3, #16
 800c144:	f083 0320 	eor.w	r3, r3, #32
 800c148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c150:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c154:	2000      	movs	r0, #0
 800c156:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c158:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c15c:	045b      	lsls	r3, r3, #17
 800c15e:	d50d      	bpl.n	800c17c <USB_EPClearStall+0x7c>
 800c160:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c16c:	041b      	lsls	r3, r3, #16
 800c16e:	0c1b      	lsrs	r3, r3, #16
 800c170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c178:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c17c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c188:	041b      	lsls	r3, r3, #16
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c198:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800c19c:	2000      	movs	r0, #0
 800c19e:	4770      	bx	lr

0800c1a0 <USB_SetDevAddress>:
  if (address == 0U)
 800c1a0:	b911      	cbnz	r1, 800c1a8 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c1a2:	2380      	movs	r3, #128	; 0x80
 800c1a4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	4770      	bx	lr

0800c1ac <USB_DevConnect>:
}
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	4770      	bx	lr

0800c1b0 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800c1b0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800c1b4:	b280      	uxth	r0, r0
 800c1b6:	4770      	bx	lr

0800c1b8 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c1b8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800c1be:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c1c4:	d007      	beq.n	800c1d6 <USB_WritePMA+0x1e>
 800c1c6:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c1ca:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800c1ce:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800c1d2:	4282      	cmp	r2, r0
 800c1d4:	d1f9      	bne.n	800c1ca <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800c1d6:	4770      	bx	lr

0800c1d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c1d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1da:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800c1de:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1e0:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800c1e4:	d012      	beq.n	800c20c <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1e6:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800c1e8:	46b4      	mov	ip, r6
 800c1ea:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c1ec:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800c1f0:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800c1f2:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c1f4:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800c1f6:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c1fa:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c1fe:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800c202:	d1f3      	bne.n	800c1ec <USB_ReadPMA+0x14>
    pBuf++;
 800c204:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800c208:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c20c:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800c20e:	bf44      	itt	mi
 800c210:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c212:	700b      	strbmi	r3, [r1, #0]
  }
}
 800c214:	bd70      	pop	{r4, r5, r6, pc}
 800c216:	bf00      	nop

0800c218 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c218:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c21c:	b183      	cbz	r3, 800c240 <USBD_CDC_EP0_RxReady+0x28>
{
 800c21e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c220:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c224:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c228:	28ff      	cmp	r0, #255	; 0xff
 800c22a:	d007      	beq.n	800c23c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	4621      	mov	r1, r4
 800c230:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c234:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 800c236:	23ff      	movs	r3, #255	; 0xff
 800c238:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800c23c:	2000      	movs	r0, #0
 800c23e:	bd10      	pop	{r4, pc}
 800c240:	2000      	movs	r0, #0
 800c242:	4770      	bx	lr

0800c244 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c244:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c246:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 800c248:	4801      	ldr	r0, [pc, #4]	; (800c250 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c24a:	801a      	strh	r2, [r3, #0]
}
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	2000005c 	.word	0x2000005c

0800c254 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c254:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c256:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c25a:	801a      	strh	r2, [r3, #0]
}
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	200000a0 	.word	0x200000a0

0800c264 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c264:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c266:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c26a:	801a      	strh	r2, [r3, #0]
}
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	200000f0 	.word	0x200000f0

0800c274 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c274:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c276:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c27a:	801a      	strh	r2, [r3, #0]
}
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	200000e4 	.word	0x200000e4

0800c284 <USBD_CDC_DataOut>:
{
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c288:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c28c:	f001 f83a 	bl	800d304 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800c290:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c294:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800c298:	b14b      	cbz	r3, 800c2ae <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c29a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c29e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c2a8:	4798      	blx	r3
    return USBD_OK;
 800c2aa:	2000      	movs	r0, #0
}
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c2ae:	2002      	movs	r0, #2
}
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	bf00      	nop

0800c2b4 <USBD_CDC_DataIn>:
{
 800c2b4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c2b6:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800c2ba:	b1ed      	cbz	r5, 800c2f8 <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c2bc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c2c0:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800c2c4:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800c2c8:	b14a      	cbz	r2, 800c2de <USBD_CDC_DataIn+0x2a>
 800c2ca:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800c2ce:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c2d2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c2d4:	fbb2 f3f4 	udiv	r3, r2, r4
 800c2d8:	fb04 2413 	mls	r4, r4, r3, r2
 800c2dc:	b124      	cbz	r4, 800c2e8 <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 800c2de:	2300      	movs	r3, #0
    return USBD_OK;
 800c2e0:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 800c2e2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800c2ec:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c2f0:	f000 ffec 	bl	800d2cc <USBD_LL_Transmit>
    return USBD_OK;
 800c2f4:	4620      	mov	r0, r4
}
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c2f8:	2002      	movs	r0, #2
}
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}

0800c2fc <USBD_CDC_Setup>:
{
 800c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 800c300:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c302:	780b      	ldrb	r3, [r1, #0]
{
 800c304:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c306:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800c30a:	460c      	mov	r4, r1
 800c30c:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c30e:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 800c312:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800c316:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c31a:	d013      	beq.n	800c344 <USBD_CDC_Setup+0x48>
 800c31c:	2e20      	cmp	r6, #32
 800c31e:	d117      	bne.n	800c350 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 800c320:	88ce      	ldrh	r6, [r1, #6]
 800c322:	b1f6      	cbz	r6, 800c362 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 800c324:	061b      	lsls	r3, r3, #24
 800c326:	d53f      	bpl.n	800c3a8 <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c328:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c32c:	4632      	mov	r2, r6
 800c32e:	4641      	mov	r1, r8
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	7860      	ldrb	r0, [r4, #1]
 800c334:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c336:	4641      	mov	r1, r8
 800c338:	4628      	mov	r0, r5
 800c33a:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 800c33c:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c33e:	f000 fcef 	bl	800cd20 <USBD_CtlSendData>
 800c342:	e00a      	b.n	800c35a <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 800c344:	784b      	ldrb	r3, [r1, #1]
 800c346:	2b0a      	cmp	r3, #10
 800c348:	d01f      	beq.n	800c38a <USBD_CDC_Setup+0x8e>
 800c34a:	2b0b      	cmp	r3, #11
 800c34c:	d027      	beq.n	800c39e <USBD_CDC_Setup+0xa2>
 800c34e:	b193      	cbz	r3, 800c376 <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 800c350:	4621      	mov	r1, r4
 800c352:	4628      	mov	r0, r5
 800c354:	f000 fcae 	bl	800ccb4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c358:	2602      	movs	r6, #2
}
 800c35a:	4630      	mov	r0, r6
 800c35c:	b002      	add	sp, #8
 800c35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c362:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c366:	4632      	mov	r2, r6
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	7848      	ldrb	r0, [r1, #1]
 800c36c:	4798      	blx	r3
}
 800c36e:	4630      	mov	r0, r6
 800c370:	b002      	add	sp, #8
 800c372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c376:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d1e8      	bne.n	800c350 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c37e:	2202      	movs	r2, #2
 800c380:	f10d 0106 	add.w	r1, sp, #6
 800c384:	f000 fccc 	bl	800cd20 <USBD_CtlSendData>
 800c388:	e7e7      	b.n	800c35a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d1de      	bne.n	800c350 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c392:	2201      	movs	r2, #1
 800c394:	f10d 0105 	add.w	r1, sp, #5
 800c398:	f000 fcc2 	bl	800cd20 <USBD_CtlSendData>
 800c39c:	e7dd      	b.n	800c35a <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c39e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d0d9      	beq.n	800c35a <USBD_CDC_Setup+0x5e>
 800c3a6:	e7d3      	b.n	800c350 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800c3a8:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c3aa:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c3ac:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c3b0:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 800c3b2:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c3b6:	f000 fccb 	bl	800cd50 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800c3ba:	463e      	mov	r6, r7
 800c3bc:	e7cd      	b.n	800c35a <USBD_CDC_Setup+0x5e>
 800c3be:	bf00      	nop

0800c3c0 <USBD_CDC_DeInit>:
{
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c3c4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c3c6:	2181      	movs	r1, #129	; 0x81
 800c3c8:	f000 ff34 	bl	800d234 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c3d0:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c3d2:	f000 ff2f 	bl	800d234 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c3d6:	2182      	movs	r1, #130	; 0x82
 800c3d8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c3da:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c3de:	f000 ff29 	bl	800d234 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800c3e2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c3e6:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800c3e8:	b14b      	cbz	r3, 800c3fe <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c3ea:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c3f2:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800c3f6:	f000 ff8d 	bl	800d314 <USBD_static_free>
    pdev->pClassData = NULL;
 800c3fa:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 800c3fe:	2000      	movs	r0, #0
 800c400:	bd38      	pop	{r3, r4, r5, pc}
 800c402:	bf00      	nop

0800c404 <USBD_CDC_Init>:
{
 800c404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c408:	7c03      	ldrb	r3, [r0, #16]
{
 800c40a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c40c:	bbbb      	cbnz	r3, 800c47e <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c412:	2202      	movs	r2, #2
 800c414:	2181      	movs	r1, #129	; 0x81
 800c416:	f000 fefd 	bl	800d214 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c41a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c41c:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c420:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c422:	4629      	mov	r1, r5
 800c424:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c426:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fef3 	bl	800d214 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c42e:	2308      	movs	r3, #8
 800c430:	2203      	movs	r2, #3
 800c432:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c434:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 feeb 	bl	800d214 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c43e:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c442:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c444:	f000 ff62 	bl	800d30c <USBD_static_malloc>
 800c448:	4605      	mov	r5, r0
 800c44a:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800c44e:	b348      	cbz	r0, 800c4a4 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 800c450:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c454:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4798      	blx	r3
    hcdc->TxState = 0U;
 800c45c:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800c460:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c464:	7c26      	ldrb	r6, [r4, #16]
 800c466:	b196      	cbz	r6, 800c48e <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 800c468:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c46a:	2340      	movs	r3, #64	; 0x40
 800c46c:	4639      	mov	r1, r7
 800c46e:	4620      	mov	r0, r4
 800c470:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c474:	f000 ff38 	bl	800d2e8 <USBD_LL_PrepareReceive>
}
 800c478:	4630      	mov	r0, r6
 800c47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	2202      	movs	r2, #2
 800c482:	2181      	movs	r1, #129	; 0x81
 800c484:	f000 fec6 	bl	800d214 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c488:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	e7c8      	b.n	800c420 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c48e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c492:	4639      	mov	r1, r7
 800c494:	4620      	mov	r0, r4
 800c496:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c49a:	f000 ff25 	bl	800d2e8 <USBD_LL_PrepareReceive>
}
 800c49e:	4630      	mov	r0, r6
 800c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 800c4a4:	463e      	mov	r6, r7
}
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c4ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c4ac:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 800c4ae:	b119      	cbz	r1, 800c4b8 <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 800c4b0:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 800c4b2:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c4b6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800c4b8:	2002      	movs	r0, #2
  }

  return ret;
}
 800c4ba:	4770      	bx	lr

0800c4bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c4bc:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c4be:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800c4c2:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800c4c4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c4c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop

0800c4d0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c4d0:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800c4d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 800c4d6:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800c4d8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop

0800c4e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c4e2:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290

  if(pdev->pClassData != NULL)
 800c4e6:	b195      	cbz	r5, 800c50e <USBD_CDC_TransmitPacket+0x2e>
  {
    if(hcdc->TxState == 0U)
 800c4e8:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800c4ec:	b10c      	cbz	r4, 800c4f2 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800c4ee:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 800c4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 1U;
 800c4f2:	2701      	movs	r7, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c4f4:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c4f8:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
      hcdc->TxState = 1U;
 800c4fc:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c500:	2181      	movs	r1, #129	; 0x81
 800c502:	b2b3      	uxth	r3, r6
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c504:	6306      	str	r6, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c506:	f000 fee1 	bl	800d2cc <USBD_LL_Transmit>
      return USBD_OK;
 800c50a:	4620      	mov	r0, r4
}
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800c50e:	2002      	movs	r0, #2
}
 800c510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c512:	bf00      	nop

0800c514 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c514:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 800c518:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c51a:	b19a      	cbz	r2, 800c544 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c51c:	7c04      	ldrb	r4, [r0, #16]
 800c51e:	b144      	cbz	r4, 800c532 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c520:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 800c522:	2340      	movs	r3, #64	; 0x40
 800c524:	2101      	movs	r1, #1
 800c526:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c52a:	f000 fedd 	bl	800d2e8 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800c52e:	4620      	mov	r0, r4
 800c530:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800c532:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c536:	2101      	movs	r1, #1
 800c538:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c53c:	f000 fed4 	bl	800d2e8 <USBD_LL_PrepareReceive>
}
 800c540:	4620      	mov	r0, r4
 800c542:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c544:	2402      	movs	r4, #2
}
 800c546:	4620      	mov	r0, r4
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	bf00      	nop

0800c54c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c54c:	b188      	cbz	r0, 800c572 <USBD_Init+0x26>
{
 800c54e:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c550:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c554:	b113      	cbz	r3, 800c55c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800c556:	2300      	movs	r3, #0
 800c558:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c55c:	b109      	cbz	r1, 800c562 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800c55e:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c562:	2301      	movs	r3, #1
  pdev->id = id;
 800c564:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c566:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c56a:	f000 fe01 	bl	800d170 <USBD_LL_Init>

  return USBD_OK;
 800c56e:	2000      	movs	r0, #0
}
 800c570:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800c572:	2002      	movs	r0, #2
}
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop

0800c578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c578:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800c57a:	b119      	cbz	r1, 800c584 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 800c57c:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 800c57e:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c582:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c584:	2002      	movs	r0, #2
  }

  return status;
}
 800c586:	4770      	bx	lr

0800c588 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c588:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c58a:	f000 fe35 	bl	800d1f8 <USBD_LL_Start>

  return USBD_OK;
}
 800c58e:	2000      	movs	r0, #0
 800c590:	bd08      	pop	{r3, pc}
 800c592:	bf00      	nop

0800c594 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c594:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 800c596:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c59a:	b11b      	cbz	r3, 800c5a4 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4798      	blx	r3
 800c5a0:	b900      	cbnz	r0, 800c5a4 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800c5a2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c5a4:	2002      	movs	r0, #2
}
 800c5a6:	bd08      	pop	{r3, pc}

0800c5a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c5a8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c5aa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4798      	blx	r3
  return USBD_OK;
}
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	bd08      	pop	{r3, pc}
 800c5b6:	bf00      	nop

0800c5b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5bc:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 fb63 	bl	800cc8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5c6:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800c5c8:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 800c5cc:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 800c5d0:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800c5d4:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800c5d8:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800c5da:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 800c5de:	d009      	beq.n	800c5f4 <USBD_LL_SetupStage+0x3c>
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	d013      	beq.n	800c60c <USBD_LL_SetupStage+0x54>
 800c5e4:	b163      	cbz	r3, 800c600 <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c5ec:	f000 fe30 	bl	800d250 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 fa78 	bl	800caec <USBD_StdItfReq>
}
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 800c600:	4629      	mov	r1, r5
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f8f8 	bl	800c7f8 <USBD_StdDevReq>
}
 800c608:	2000      	movs	r0, #0
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 800c60c:	4629      	mov	r1, r5
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 faa0 	bl	800cb54 <USBD_StdEPReq>
}
 800c614:	2000      	movs	r0, #0
 800c616:	bd38      	pop	{r3, r4, r5, pc}

0800c618 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c61c:	b969      	cbnz	r1, 800c63a <USBD_LL_DataOutStage+0x22>
 800c61e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c620:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800c624:	2a03      	cmp	r2, #3
 800c626:	d015      	beq.n	800c654 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c628:	2a05      	cmp	r2, #5
 800c62a:	460c      	mov	r4, r1
 800c62c:	d10e      	bne.n	800c64c <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c62e:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c632:	f000 fe0d 	bl	800d250 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800c636:	4620      	mov	r0, r4
}
 800c638:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 800c63a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	b133      	cbz	r3, 800c650 <USBD_LL_DataOutStage+0x38>
 800c642:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c646:	2a03      	cmp	r2, #3
 800c648:	d102      	bne.n	800c650 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800c64a:	4798      	blx	r3
  return USBD_OK;
 800c64c:	2000      	movs	r0, #0
}
 800c64e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c650:	2002      	movs	r0, #2
}
 800c652:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 800c654:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800c658:	4291      	cmp	r1, r2
 800c65a:	d90c      	bls.n	800c676 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 800c65c:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 800c65e:	428a      	cmp	r2, r1
 800c660:	bf88      	it	hi
 800c662:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 800c664:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800c668:	bf98      	it	ls
 800c66a:	b292      	uxthls	r2, r2
 800c66c:	4619      	mov	r1, r3
 800c66e:	f000 fb7d 	bl	800cd6c <USBD_CtlContinueRx>
  return USBD_OK;
 800c672:	2000      	movs	r0, #0
}
 800c674:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c676:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	b11b      	cbz	r3, 800c686 <USBD_LL_DataOutStage+0x6e>
 800c67e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c682:	2a03      	cmp	r2, #3
 800c684:	d004      	beq.n	800c690 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 800c686:	4628      	mov	r0, r5
 800c688:	f000 fb7a 	bl	800cd80 <USBD_CtlSendStatus>
  return USBD_OK;
 800c68c:	2000      	movs	r0, #0
}
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 800c690:	4798      	blx	r3
 800c692:	e7f8      	b.n	800c686 <USBD_LL_DataOutStage+0x6e>

0800c694 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c694:	b570      	push	{r4, r5, r6, lr}
 800c696:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c698:	b961      	cbnz	r1, 800c6b4 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c69a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d015      	beq.n	800c6ce <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c6a2:	f033 0304 	bics.w	r3, r3, #4
 800c6a6:	d02e      	beq.n	800c706 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c6a8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d031      	beq.n	800c714 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800c6b0:	2000      	movs	r0, #0
}
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 800c6b4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	b133      	cbz	r3, 800c6ca <USBD_LL_DataInStage+0x36>
 800c6bc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c6c0:	2a03      	cmp	r2, #3
 800c6c2:	d102      	bne.n	800c6ca <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 800c6c4:	4798      	blx	r3
  return USBD_OK;
 800c6c6:	2000      	movs	r0, #0
}
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800c6ca:	2002      	movs	r0, #2
}
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 800c6ce:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800c6d2:	429e      	cmp	r6, r3
 800c6d4:	d833      	bhi.n	800c73e <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c6d6:	69c2      	ldr	r2, [r0, #28]
 800c6d8:	fbb2 f5f3 	udiv	r5, r2, r3
 800c6dc:	fb03 2515 	mls	r5, r3, r5, r2
 800c6e0:	b9ed      	cbnz	r5, 800c71e <USBD_LL_DataInStage+0x8a>
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d81b      	bhi.n	800c71e <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 800c6e6:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d217      	bcs.n	800c71e <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6ee:	462a      	mov	r2, r5
 800c6f0:	f000 fb24 	bl	800cd3c <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c6f4:	462b      	mov	r3, r5
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 800c6fc:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c700:	f000 fdf2 	bl	800d2e8 <USBD_LL_PrepareReceive>
 800c704:	e7d0      	b.n	800c6a8 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 800c706:	2180      	movs	r1, #128	; 0x80
 800c708:	f000 fda2 	bl	800d250 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 800c70c:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c710:	2b01      	cmp	r3, #1
 800c712:	d1cd      	bne.n	800c6b0 <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 800c71a:	4618      	mov	r0, r3
}
 800c71c:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c71e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	b11b      	cbz	r3, 800c72e <USBD_LL_DataInStage+0x9a>
 800c726:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800c72a:	2a03      	cmp	r2, #3
 800c72c:	d015      	beq.n	800c75a <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 800c72e:	2180      	movs	r1, #128	; 0x80
 800c730:	4620      	mov	r0, r4
 800c732:	f000 fd8d 	bl	800d250 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c736:	4620      	mov	r0, r4
 800c738:	f000 fb2e 	bl	800cd98 <USBD_CtlReceiveStatus>
 800c73c:	e7b4      	b.n	800c6a8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800c73e:	460d      	mov	r5, r1
 800c740:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c742:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 800c744:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c746:	b29a      	uxth	r2, r3
 800c748:	f000 faf8 	bl	800cd3c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c74c:	462b      	mov	r3, r5
 800c74e:	462a      	mov	r2, r5
 800c750:	4629      	mov	r1, r5
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fdc8 	bl	800d2e8 <USBD_LL_PrepareReceive>
 800c758:	e7a6      	b.n	800c6a8 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 800c75a:	4620      	mov	r0, r4
 800c75c:	4798      	blx	r3
 800c75e:	e7e6      	b.n	800c72e <USBD_LL_DataInStage+0x9a>

0800c760 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c760:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c762:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c764:	2640      	movs	r6, #64	; 0x40
{
 800c766:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c768:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c76a:	4611      	mov	r1, r2
 800c76c:	4633      	mov	r3, r6
 800c76e:	f000 fd51 	bl	800d214 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c772:	4633      	mov	r3, r6
 800c774:	2180      	movs	r1, #128	; 0x80
 800c776:	2200      	movs	r2, #0
 800c778:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c77a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c77e:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c782:	f000 fd47 	bl	800d214 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800c786:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800c788:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c78c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c78e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c790:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c794:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c798:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800c79a:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 800c79e:	b123      	cbz	r3, 800c7aa <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7a0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	4798      	blx	r3
  }

  return USBD_OK;
}
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	bd70      	pop	{r4, r5, r6, pc}
 800c7ae:	bf00      	nop

0800c7b0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c7b0:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 800c7b2:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 800c7b4:	7419      	strb	r1, [r3, #16]
}
 800c7b6:	4770      	bx	lr

0800c7b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c7b8:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c7ba:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800c7bc:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 800c7c0:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c7c2:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 800c7c6:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 800c7ca:	4770      	bx	lr

0800c7cc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c7cc:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 800c7ce:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 800c7d2:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 800c7d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop

0800c7dc <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7dc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c7e0:	2a03      	cmp	r2, #3
 800c7e2:	d001      	beq.n	800c7e8 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	4770      	bx	lr
{
 800c7e8:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 800c7ea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	b103      	cbz	r3, 800c7f4 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 800c7f2:	4798      	blx	r3
}
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	bd08      	pop	{r3, pc}

0800c7f8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c7f8:	b530      	push	{r4, r5, lr}
 800c7fa:	780b      	ldrb	r3, [r1, #0]
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c802:	2b20      	cmp	r3, #32
{
 800c804:	4604      	mov	r4, r0
 800c806:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c808:	d00d      	beq.n	800c826 <USBD_StdDevReq+0x2e>
 800c80a:	2b40      	cmp	r3, #64	; 0x40
 800c80c:	d00b      	beq.n	800c826 <USBD_StdDevReq+0x2e>
 800c80e:	b19b      	cbz	r3, 800c838 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 800c810:	2180      	movs	r1, #128	; 0x80
 800c812:	4620      	mov	r0, r4
 800c814:	f000 fd1c 	bl	800d250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c818:	2100      	movs	r1, #0
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 fd18 	bl	800d250 <USBD_LL_StallEP>
}
 800c820:	2000      	movs	r0, #0
 800c822:	b003      	add	sp, #12
 800c824:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 800c826:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c82a:	4629      	mov	r1, r5
 800c82c:	4620      	mov	r0, r4
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	4798      	blx	r3
}
 800c832:	2000      	movs	r0, #0
 800c834:	b003      	add	sp, #12
 800c836:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 800c838:	784b      	ldrb	r3, [r1, #1]
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d8e8      	bhi.n	800c810 <USBD_StdDevReq+0x18>
 800c83e:	a201      	add	r2, pc, #4	; (adr r2, 800c844 <USBD_StdDevReq+0x4c>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c89f 	.word	0x0800c89f
 800c848:	0800c8cb 	.word	0x0800c8cb
 800c84c:	0800c811 	.word	0x0800c811
 800c850:	0800c8e9 	.word	0x0800c8e9
 800c854:	0800c811 	.word	0x0800c811
 800c858:	0800c8f1 	.word	0x0800c8f1
 800c85c:	0800c929 	.word	0x0800c929
 800c860:	0800c811 	.word	0x0800c811
 800c864:	0800c959 	.word	0x0800c959
 800c868:	0800c86d 	.word	0x0800c86d
  cfgidx = (uint8_t)(req->wValue);
 800c86c:	7889      	ldrb	r1, [r1, #2]
 800c86e:	4d9e      	ldr	r5, [pc, #632]	; (800cae8 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c870:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800c872:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c874:	d8cc      	bhi.n	800c810 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c876:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	f000 8111 	beq.w	800caa2 <USBD_StdDevReq+0x2aa>
 800c880:	2b03      	cmp	r3, #3
 800c882:	f000 80ff 	beq.w	800ca84 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 800c886:	2180      	movs	r1, #128	; 0x80
 800c888:	f000 fce2 	bl	800d250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c88c:	2100      	movs	r1, #0
 800c88e:	4620      	mov	r0, r4
 800c890:	f000 fcde 	bl	800d250 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c894:	4620      	mov	r0, r4
 800c896:	7829      	ldrb	r1, [r5, #0]
 800c898:	f7ff fe86 	bl	800c5a8 <USBD_ClrClassConfig>
      break;
 800c89c:	e7c0      	b.n	800c820 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c89e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d8b3      	bhi.n	800c810 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 800c8a8:	88cb      	ldrh	r3, [r1, #6]
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d1b0      	bne.n	800c810 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8ae:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 800c8b0:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8b4:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800c8b6:	b10b      	cbz	r3, 800c8bc <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c8bc:	2202      	movs	r2, #2
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f104 010c 	add.w	r1, r4, #12
 800c8c4:	f000 fa2c 	bl	800cd20 <USBD_CtlSendData>
    break;
 800c8c8:	e7aa      	b.n	800c820 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800c8ca:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d89d      	bhi.n	800c810 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8d4:	884b      	ldrh	r3, [r1, #2]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d1a2      	bne.n	800c820 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 800c8da:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 800c8dc:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 800c8de:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c8e2:	f000 fa4d 	bl	800cd80 <USBD_CtlSendStatus>
 800c8e6:	e79b      	b.n	800c820 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8e8:	884b      	ldrh	r3, [r1, #2]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d198      	bne.n	800c820 <USBD_StdDevReq+0x28>
 800c8ee:	e7f5      	b.n	800c8dc <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8f0:	888b      	ldrh	r3, [r1, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d18c      	bne.n	800c810 <USBD_StdDevReq+0x18>
 800c8f6:	88cb      	ldrh	r3, [r1, #6]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d189      	bne.n	800c810 <USBD_StdDevReq+0x18>
 800c8fc:	884d      	ldrh	r5, [r1, #2]
 800c8fe:	2d7f      	cmp	r5, #127	; 0x7f
 800c900:	d886      	bhi.n	800c810 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c902:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c906:	2b03      	cmp	r3, #3
 800c908:	d082      	beq.n	800c810 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c90a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800c90c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c910:	f000 fcce 	bl	800d2b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c914:	4620      	mov	r0, r4
 800c916:	f000 fa33 	bl	800cd80 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	f000 80df 	beq.w	800cade <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c920:	2302      	movs	r3, #2
 800c922:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800c926:	e77b      	b.n	800c820 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 800c928:	884a      	ldrh	r2, [r1, #2]
 800c92a:	0a13      	lsrs	r3, r2, #8
 800c92c:	3b01      	subs	r3, #1
 800c92e:	2b06      	cmp	r3, #6
 800c930:	f63f af6e 	bhi.w	800c810 <USBD_StdDevReq+0x18>
 800c934:	a101      	add	r1, pc, #4	; (adr r1, 800c93c <USBD_StdDevReq+0x144>)
 800c936:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c93a:	bf00      	nop
 800c93c:	0800c9eb 	.word	0x0800c9eb
 800c940:	0800c9d3 	.word	0x0800c9d3
 800c944:	0800c9c1 	.word	0x0800c9c1
 800c948:	0800c811 	.word	0x0800c811
 800c94c:	0800c811 	.word	0x0800c811
 800c950:	0800c9ab 	.word	0x0800c9ab
 800c954:	0800c97d 	.word	0x0800c97d
  if (req->wLength != 1U)
 800c958:	88ca      	ldrh	r2, [r1, #6]
 800c95a:	2a01      	cmp	r2, #1
 800c95c:	f47f af58 	bne.w	800c810 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 800c960:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c964:	2b02      	cmp	r3, #2
 800c966:	d878      	bhi.n	800ca5a <USBD_StdDevReq+0x262>
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f43f af51 	beq.w	800c810 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 800c96e:	4601      	mov	r1, r0
 800c970:	2300      	movs	r3, #0
 800c972:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c976:	f000 f9d3 	bl	800cd20 <USBD_CtlSendData>
      break;
 800c97a:	e751      	b.n	800c820 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c97c:	7c03      	ldrb	r3, [r0, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f47f af46 	bne.w	800c810 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c984:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c988:	f10d 0006 	add.w	r0, sp, #6
 800c98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c990:	2307      	movs	r3, #7
 800c992:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 800c994:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c998:	2a00      	cmp	r2, #0
 800c99a:	d06e      	beq.n	800ca7a <USBD_StdDevReq+0x282>
 800c99c:	88eb      	ldrh	r3, [r5, #6]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d162      	bne.n	800ca68 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f000 f9ec 	bl	800cd80 <USBD_CtlSendStatus>
 800c9a8:	e73a      	b.n	800c820 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c9aa:	7c03      	ldrb	r3, [r0, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f47f af2f 	bne.w	800c810 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c9b2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c9b6:	f10d 0006 	add.w	r0, sp, #6
 800c9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9bc:	4798      	blx	r3
      break;
 800c9be:	e7e9      	b.n	800c994 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 800c9c0:	b2d2      	uxtb	r2, r2
 800c9c2:	2a05      	cmp	r2, #5
 800c9c4:	f63f af24 	bhi.w	800c810 <USBD_StdDevReq+0x18>
 800c9c8:	e8df f002 	tbb	[pc, r2]
 800c9cc:	272f373f 	.word	0x272f373f
 800c9d0:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c9d2:	7c03      	ldrb	r3, [r0, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d172      	bne.n	800cabe <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c9d8:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c9dc:	f10d 0006 	add.w	r0, sp, #6
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	7043      	strb	r3, [r0, #1]
 800c9e8:	e7d4      	b.n	800c994 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c9ea:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c9ee:	f10d 0106 	add.w	r1, sp, #6
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	7c00      	ldrb	r0, [r0, #16]
 800c9f6:	4798      	blx	r3
    break;
 800c9f8:	e7cc      	b.n	800c994 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9fa:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c9fe:	f10d 0106 	add.w	r1, sp, #6
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	7c00      	ldrb	r0, [r0, #16]
 800ca06:	4798      	blx	r3
      break;
 800ca08:	e7c4      	b.n	800c994 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca0a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca0e:	f10d 0106 	add.w	r1, sp, #6
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	7c00      	ldrb	r0, [r0, #16]
 800ca16:	4798      	blx	r3
      break;
 800ca18:	e7bc      	b.n	800c994 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca1a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca1e:	f10d 0106 	add.w	r1, sp, #6
 800ca22:	691b      	ldr	r3, [r3, #16]
 800ca24:	7c00      	ldrb	r0, [r0, #16]
 800ca26:	4798      	blx	r3
      break;
 800ca28:	e7b4      	b.n	800c994 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca2a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca2e:	f10d 0106 	add.w	r1, sp, #6
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	7c00      	ldrb	r0, [r0, #16]
 800ca36:	4798      	blx	r3
      break;
 800ca38:	e7ac      	b.n	800c994 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca3a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca3e:	f10d 0106 	add.w	r1, sp, #6
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	7c00      	ldrb	r0, [r0, #16]
 800ca46:	4798      	blx	r3
      break;
 800ca48:	e7a4      	b.n	800c994 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ca4a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca4e:	f10d 0106 	add.w	r1, sp, #6
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	7c00      	ldrb	r0, [r0, #16]
 800ca56:	4798      	blx	r3
      break;
 800ca58:	e79c      	b.n	800c994 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	f47f aed8 	bne.w	800c810 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ca60:	1d01      	adds	r1, r0, #4
 800ca62:	f000 f95d 	bl	800cd20 <USBD_CtlSendData>
      break;
 800ca66:	e6db      	b.n	800c820 <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	bf28      	it	cs
 800ca6c:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 800ca6e:	4601      	mov	r1, r0
 800ca70:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 800ca72:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800ca76:	f000 f953 	bl	800cd20 <USBD_CtlSendData>
  if(req->wLength == 0U)
 800ca7a:	88eb      	ldrh	r3, [r5, #6]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f47f aecf 	bne.w	800c820 <USBD_StdDevReq+0x28>
 800ca82:	e78e      	b.n	800c9a2 <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 800ca84:	b321      	cbz	r1, 800cad0 <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 800ca86:	6841      	ldr	r1, [r0, #4]
 800ca88:	2901      	cmp	r1, #1
 800ca8a:	d08a      	beq.n	800c9a2 <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca8c:	b2c9      	uxtb	r1, r1
 800ca8e:	f7ff fd8b 	bl	800c5a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca92:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca94:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 800ca96:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca98:	f7ff fd7c 	bl	800c594 <USBD_SetClassConfig>
 800ca9c:	2802      	cmp	r0, #2
 800ca9e:	d180      	bne.n	800c9a2 <USBD_StdDevReq+0x1aa>
 800caa0:	e6b6      	b.n	800c810 <USBD_StdDevReq+0x18>
      if (cfgidx)
 800caa2:	2900      	cmp	r1, #0
 800caa4:	f43f af7d 	beq.w	800c9a2 <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 800caa8:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800caaa:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800caac:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800caae:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cab2:	f7ff fd6f 	bl	800c594 <USBD_SetClassConfig>
 800cab6:	2802      	cmp	r0, #2
 800cab8:	f47f af73 	bne.w	800c9a2 <USBD_StdDevReq+0x1aa>
 800cabc:	e6a8      	b.n	800c810 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cabe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800cac2:	f10d 0006 	add.w	r0, sp, #6
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800caca:	2302      	movs	r3, #2
 800cacc:	7043      	strb	r3, [r0, #1]
 800cace:	e761      	b.n	800c994 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cad0:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800cad2:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cad4:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800cad8:	f7ff fd66 	bl	800c5a8 <USBD_ClrClassConfig>
 800cadc:	e761      	b.n	800c9a2 <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cade:	2301      	movs	r3, #1
 800cae0:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800cae4:	e69c      	b.n	800c820 <USBD_StdDevReq+0x28>
 800cae6:	bf00      	nop
 800cae8:	20000a80 	.word	0x20000a80

0800caec <USBD_StdItfReq>:
{
 800caec:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caee:	780b      	ldrb	r3, [r1, #0]
{
 800caf0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800caf6:	2a40      	cmp	r2, #64	; 0x40
{
 800caf8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cafa:	d00a      	beq.n	800cb12 <USBD_StdItfReq+0x26>
 800cafc:	065b      	lsls	r3, r3, #25
 800cafe:	d508      	bpl.n	800cb12 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800cb00:	2180      	movs	r1, #128	; 0x80
 800cb02:	f000 fba5 	bl	800d250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cb06:	2100      	movs	r1, #0
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 fba1 	bl	800d250 <USBD_LL_StallEP>
}
 800cb0e:	2000      	movs	r0, #0
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800cb12:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d811      	bhi.n	800cb40 <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb1c:	792b      	ldrb	r3, [r5, #4]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d80e      	bhi.n	800cb40 <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cb22:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cb26:	4629      	mov	r1, r5
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb2e:	88eb      	ldrh	r3, [r5, #6]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1ec      	bne.n	800cb0e <USBD_StdItfReq+0x22>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d1ea      	bne.n	800cb0e <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 f921 	bl	800cd80 <USBD_CtlSendStatus>
 800cb3e:	e7e6      	b.n	800cb0e <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800cb40:	2180      	movs	r1, #128	; 0x80
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 fb84 	bl	800d250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 fb80 	bl	800d250 <USBD_LL_StallEP>
}
 800cb50:	2000      	movs	r0, #0
 800cb52:	bd38      	pop	{r3, r4, r5, pc}

0800cb54 <USBD_StdEPReq>:
{
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	780b      	ldrb	r3, [r1, #0]
 800cb58:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb5e:	2b20      	cmp	r3, #32
 800cb60:	d00c      	beq.n	800cb7c <USBD_StdEPReq+0x28>
 800cb62:	2b40      	cmp	r3, #64	; 0x40
 800cb64:	d00a      	beq.n	800cb7c <USBD_StdEPReq+0x28>
 800cb66:	b183      	cbz	r3, 800cb8a <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800cb68:	2180      	movs	r1, #128	; 0x80
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f000 fb70 	bl	800d250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800cb70:	2100      	movs	r1, #0
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 fb6c 	bl	800d250 <USBD_LL_StallEP>
}
 800cb78:	2000      	movs	r0, #0
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800cb7c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cb80:	4620      	mov	r0, r4
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	4798      	blx	r3
}
 800cb86:	2000      	movs	r0, #0
 800cb88:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800cb8a:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800cb8c:	888a      	ldrh	r2, [r1, #4]
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800cb94:	d03e      	beq.n	800cc14 <USBD_StdEPReq+0xc0>
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d02a      	beq.n	800cbf0 <USBD_StdEPReq+0x9c>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1e4      	bne.n	800cb68 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800cb9e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d051      	beq.n	800cc4a <USBD_StdEPReq+0xf6>
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d1de      	bne.n	800cb68 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbaa:	f00c 030f 	and.w	r3, ip, #15
 800cbae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800cbb2:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cbb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800cbb8:	d456      	bmi.n	800cc68 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cbba:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0d2      	beq.n	800cb68 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cbc2:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cbc6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800cbca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cbce:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cbd2:	b133      	cbz	r3, 800cbe2 <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cbd4:	4661      	mov	r1, ip
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 fb56 	bl	800d288 <USBD_LL_IsStallEP>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d04f      	beq.n	800cc80 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 f899 	bl	800cd20 <USBD_CtlSendData>
          break;
 800cbee:	e7c3      	b.n	800cb78 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800cbf0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d01d      	beq.n	800cc34 <USBD_StdEPReq+0xe0>
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d1b5      	bne.n	800cb68 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cbfc:	884b      	ldrh	r3, [r1, #2]
 800cbfe:	b92b      	cbnz	r3, 800cc0c <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc00:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc04:	d002      	beq.n	800cc0c <USBD_StdEPReq+0xb8>
 800cc06:	88cb      	ldrh	r3, [r1, #6]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d03b      	beq.n	800cc84 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 f8b7 	bl	800cd80 <USBD_CtlSendStatus>
        break;
 800cc12:	e7b1      	b.n	800cb78 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800cc14:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d00b      	beq.n	800cc34 <USBD_StdEPReq+0xe0>
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d1a3      	bne.n	800cb68 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc20:	884b      	ldrh	r3, [r1, #2]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1a8      	bne.n	800cb78 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800cc26:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc2a:	d0ef      	beq.n	800cc0c <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc2c:	4661      	mov	r1, ip
 800cc2e:	f000 fb1d 	bl	800d26c <USBD_LL_ClearStallEP>
 800cc32:	e7eb      	b.n	800cc0c <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc34:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc38:	d096      	beq.n	800cb68 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800cc3a:	4661      	mov	r1, ip
 800cc3c:	f000 fb08 	bl	800d250 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc40:	2180      	movs	r1, #128	; 0x80
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fb04 	bl	800d250 <USBD_LL_StallEP>
 800cc48:	e796      	b.n	800cb78 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc4a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc4e:	d18b      	bne.n	800cb68 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800cc50:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cc52:	0611      	lsls	r1, r2, #24
 800cc54:	bf4c      	ite	mi
 800cc56:	f100 0114 	addmi.w	r1, r0, #20
 800cc5a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc5e:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800cc60:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cc62:	f000 f85d 	bl	800cd20 <USBD_CtlSendData>
          break;
 800cc66:	e787      	b.n	800cb78 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc68:	699b      	ldr	r3, [r3, #24]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f43f af7c 	beq.w	800cb68 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cc70:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cc74:	1c5d      	adds	r5, r3, #1
 800cc76:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cc7a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cc7e:	e7a8      	b.n	800cbd2 <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800cc80:	6028      	str	r0, [r5, #0]
 800cc82:	e7af      	b.n	800cbe4 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800cc84:	4661      	mov	r1, ip
 800cc86:	f000 fae3 	bl	800d250 <USBD_LL_StallEP>
 800cc8a:	e7bf      	b.n	800cc0c <USBD_StdEPReq+0xb8>

0800cc8c <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800cc8c:	780b      	ldrb	r3, [r1, #0]
 800cc8e:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800cc90:	784b      	ldrb	r3, [r1, #1]
 800cc92:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800cc94:	78ca      	ldrb	r2, [r1, #3]
 800cc96:	788b      	ldrb	r3, [r1, #2]
 800cc98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cc9c:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800cc9e:	794a      	ldrb	r2, [r1, #5]
 800cca0:	790b      	ldrb	r3, [r1, #4]
 800cca2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cca6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800cca8:	79ca      	ldrb	r2, [r1, #7]
 800ccaa:	798b      	ldrb	r3, [r1, #6]
 800ccac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ccb0:	80c3      	strh	r3, [r0, #6]
}
 800ccb2:	4770      	bx	lr

0800ccb4 <USBD_CtlError>:
{
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800ccb8:	2180      	movs	r1, #128	; 0x80
 800ccba:	f000 fac9 	bl	800d250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800ccbe:	4620      	mov	r0, r4
}
 800ccc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800ccc4:	2100      	movs	r1, #0
 800ccc6:	f000 bac3 	b.w	800d250 <USBD_LL_StallEP>
 800ccca:	bf00      	nop

0800cccc <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800cccc:	b318      	cbz	r0, 800cd16 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800ccce:	7803      	ldrb	r3, [r0, #0]
{
 800ccd0:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800ccd2:	b30b      	cbz	r3, 800cd18 <USBD_GetString+0x4c>
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800ccda:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800ccde:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2d00      	cmp	r5, #0
 800cce6:	d1f8      	bne.n	800ccda <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cce8:	3301      	adds	r3, #1
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	b2dc      	uxtb	r4, r3
 800ccee:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ccf0:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ccf2:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ccf4:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800ccf6:	7804      	ldrb	r4, [r0, #0]
 800ccf8:	b15c      	cbz	r4, 800cd12 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ccfa:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800ccfc:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800ccfe:	1c5a      	adds	r2, r3, #1
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800cd04:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800cd06:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800cd0a:	3302      	adds	r3, #2
 800cd0c:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800cd0e:	2c00      	cmp	r4, #0
 800cd10:	d1f5      	bne.n	800ccfe <USBD_GetString+0x32>
}
 800cd12:	bc30      	pop	{r4, r5}
 800cd14:	4770      	bx	lr
 800cd16:	4770      	bx	lr
    while (*buf != '\0')
 800cd18:	2402      	movs	r4, #2
 800cd1a:	4623      	mov	r3, r4
 800cd1c:	e7e7      	b.n	800ccee <USBD_GetString+0x22>
 800cd1e:	bf00      	nop

0800cd20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800cd20:	b510      	push	{r4, lr}
 800cd22:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd24:	2402      	movs	r4, #2
{
 800cd26:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800cd28:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd2c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd2e:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd32:	f000 facb 	bl	800d2cc <USBD_LL_Transmit>

  return USBD_OK;
}
 800cd36:	2000      	movs	r0, #0
 800cd38:	bd10      	pop	{r4, pc}
 800cd3a:	bf00      	nop

0800cd3c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800cd3c:	468c      	mov	ip, r1
 800cd3e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd40:	2100      	movs	r1, #0
{
 800cd42:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800cd44:	4662      	mov	r2, ip
 800cd46:	f000 fac1 	bl	800d2cc <USBD_LL_Transmit>

  return USBD_OK;
}
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	bd08      	pop	{r3, pc}
 800cd4e:	bf00      	nop

0800cd50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800cd50:	b510      	push	{r4, lr}
 800cd52:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd54:	2403      	movs	r4, #3
{
 800cd56:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800cd58:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cd5c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd5e:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800cd62:	f000 fac1 	bl	800d2e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cd66:	2000      	movs	r0, #0
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	bf00      	nop

0800cd6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800cd6c:	468c      	mov	ip, r1
 800cd6e:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd70:	2100      	movs	r1, #0
{
 800cd72:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd74:	4662      	mov	r2, ip
 800cd76:	f000 fab7 	bl	800d2e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	bd08      	pop	{r3, pc}
 800cd7e:	bf00      	nop

0800cd80 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800cd80:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd82:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd84:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd86:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	f000 fa9d 	bl	800d2cc <USBD_LL_Transmit>

  return USBD_OK;
}
 800cd92:	2000      	movs	r0, #0
 800cd94:	bd08      	pop	{r3, pc}
 800cd96:	bf00      	nop

0800cd98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800cd98:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd9a:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cd9c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd9e:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cda2:	461a      	mov	r2, r3
 800cda4:	4619      	mov	r1, r3
 800cda6:	f000 fa9f 	bl	800d2e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800cdaa:	2000      	movs	r0, #0
 800cdac:	bd08      	pop	{r3, pc}
 800cdae:	bf00      	nop

0800cdb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cdb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4917      	ldr	r1, [pc, #92]	; (800ce14 <MX_USB_DEVICE_Init+0x64>)
 800cdb6:	4818      	ldr	r0, [pc, #96]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800cdb8:	f7ff fbc8 	bl	800c54c <USBD_Init>
 800cdbc:	b970      	cbnz	r0, 800cddc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cdbe:	4917      	ldr	r1, [pc, #92]	; (800ce1c <MX_USB_DEVICE_Init+0x6c>)
 800cdc0:	4815      	ldr	r0, [pc, #84]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800cdc2:	f7ff fbd9 	bl	800c578 <USBD_RegisterClass>
 800cdc6:	b988      	cbnz	r0, 800cdec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdc8:	4915      	ldr	r1, [pc, #84]	; (800ce20 <MX_USB_DEVICE_Init+0x70>)
 800cdca:	4813      	ldr	r0, [pc, #76]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800cdcc:	f7ff fb6e 	bl	800c4ac <USBD_CDC_RegisterInterface>
 800cdd0:	b9a0      	cbnz	r0, 800cdfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cdd2:	4811      	ldr	r0, [pc, #68]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800cdd4:	f7ff fbd8 	bl	800c588 <USBD_Start>
 800cdd8:	b9b8      	cbnz	r0, 800ce0a <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cdda:	bd08      	pop	{r3, pc}
    Error_Handler();
 800cddc:	f7fa fda8 	bl	8007930 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cde0:	490e      	ldr	r1, [pc, #56]	; (800ce1c <MX_USB_DEVICE_Init+0x6c>)
 800cde2:	480d      	ldr	r0, [pc, #52]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800cde4:	f7ff fbc8 	bl	800c578 <USBD_RegisterClass>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d0ed      	beq.n	800cdc8 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800cdec:	f7fa fda0 	bl	8007930 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cdf0:	490b      	ldr	r1, [pc, #44]	; (800ce20 <MX_USB_DEVICE_Init+0x70>)
 800cdf2:	4809      	ldr	r0, [pc, #36]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800cdf4:	f7ff fb5a 	bl	800c4ac <USBD_CDC_RegisterInterface>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d0ea      	beq.n	800cdd2 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800cdfc:	f7fa fd98 	bl	8007930 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce00:	4805      	ldr	r0, [pc, #20]	; (800ce18 <MX_USB_DEVICE_Init+0x68>)
 800ce02:	f7ff fbc1 	bl	800c588 <USBD_Start>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d0e7      	beq.n	800cdda <MX_USB_DEVICE_Init+0x2a>
}
 800ce0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ce0e:	f7fa bd8f 	b.w	8007930 <Error_Handler>
 800ce12:	bf00      	nop
 800ce14:	20000144 	.word	0x20000144
 800ce18:	20000a84 	.word	0x20000a84
 800ce1c:	20000024 	.word	0x20000024
 800ce20:	20000134 	.word	0x20000134

0800ce24 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800ce24:	2000      	movs	r0, #0
 800ce26:	4770      	bx	lr

0800ce28 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800ce28:	2000      	movs	r0, #0
 800ce2a:	4770      	bx	lr

0800ce2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ce2c:	b570      	push	{r4, r5, r6, lr}
 800ce2e:	4604      	mov	r4, r0
 800ce30:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ce32:	4816      	ldr	r0, [pc, #88]	; (800ce8c <CDC_Receive_FS+0x60>)
 800ce34:	4621      	mov	r1, r4
 800ce36:	f7ff fb4b 	bl	800c4d0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ce3a:	4814      	ldr	r0, [pc, #80]	; (800ce8c <CDC_Receive_FS+0x60>)
 800ce3c:	f7ff fb6a 	bl	800c514 <USBD_CDC_ReceivePacket>

	memset (usbbuffer, '\0', 64);  // clear the buffer
 800ce40:	2240      	movs	r2, #64	; 0x40
 800ce42:	2100      	movs	r1, #0
 800ce44:	4812      	ldr	r0, [pc, #72]	; (800ce90 <CDC_Receive_FS+0x64>)
 800ce46:	f000 fa95 	bl	800d374 <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, 64);  // copy the data to the buffer
 800ce4a:	4623      	mov	r3, r4
	uint8_t len = (uint8_t)*Len;
 800ce4c:	682a      	ldr	r2, [r5, #0]
	memcpy(usbbuffer, Buf, 64);  // copy the data to the buffer
 800ce4e:	4910      	ldr	r1, [pc, #64]	; (800ce90 <CDC_Receive_FS+0x64>)
 800ce50:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800ce54:	681e      	ldr	r6, [r3, #0]
 800ce56:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800ce5a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800ce5e:	68dd      	ldr	r5, [r3, #12]
 800ce60:	3310      	adds	r3, #16
 800ce62:	4283      	cmp	r3, r0
 800ce64:	600e      	str	r6, [r1, #0]
 800ce66:	f8c1 e004 	str.w	lr, [r1, #4]
 800ce6a:	f8c1 c008 	str.w	ip, [r1, #8]
 800ce6e:	60cd      	str	r5, [r1, #12]
 800ce70:	f101 0110 	add.w	r1, r1, #16
 800ce74:	d1ee      	bne.n	800ce54 <CDC_Receive_FS+0x28>
	memset(Buf, '\0', len);   // clear the Buf also
 800ce76:	2100      	movs	r1, #0
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fa7a 	bl	800d374 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800ce80:	4804      	ldr	r0, [pc, #16]	; (800ce94 <CDC_Receive_FS+0x68>)
 800ce82:	f7fb ff53 	bl	8008d2c <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800ce86:	2000      	movs	r0, #0
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20000a84 	.word	0x20000a84
 800ce90:	20000a28 	.word	0x20000a28
 800ce94:	20000528 	.word	0x20000528

0800ce98 <CDC_Init_FS>:
{
 800ce98:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce9a:	4c06      	ldr	r4, [pc, #24]	; (800ceb4 <CDC_Init_FS+0x1c>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4905      	ldr	r1, [pc, #20]	; (800ceb8 <CDC_Init_FS+0x20>)
 800cea2:	f7ff fb0b 	bl	800c4bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cea6:	4620      	mov	r0, r4
 800cea8:	4904      	ldr	r1, [pc, #16]	; (800cebc <CDC_Init_FS+0x24>)
 800ceaa:	f7ff fb11 	bl	800c4d0 <USBD_CDC_SetRxBuffer>
}
 800ceae:	2000      	movs	r0, #0
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20000a84 	.word	0x20000a84
 800ceb8:	20001108 	.word	0x20001108
 800cebc:	20000d20 	.word	0x20000d20

0800cec0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cec0:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cec2:	4c09      	ldr	r4, [pc, #36]	; (800cee8 <CDC_Transmit_FS+0x28>)
 800cec4:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  if (hcdc->TxState != 0){
 800cec8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cecc:	b10b      	cbz	r3, 800ced2 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800cece:	2001      	movs	r0, #1
 800ced0:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ced2:	460a      	mov	r2, r1
 800ced4:	4601      	mov	r1, r0
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff faf0 	bl	800c4bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cedc:	4620      	mov	r0, r4
}
 800cede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cee2:	f7ff bafd 	b.w	800c4e0 <USBD_CDC_TransmitPacket>
 800cee6:	bf00      	nop
 800cee8:	20000a84 	.word	0x20000a84

0800ceec <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ceec:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800ceee:	4801      	ldr	r0, [pc, #4]	; (800cef4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800cef0:	800b      	strh	r3, [r1, #0]
}
 800cef2:	4770      	bx	lr
 800cef4:	20000160 	.word	0x20000160

0800cef8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cef8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800cefa:	4801      	ldr	r0, [pc, #4]	; (800cf00 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800cefc:	800b      	strh	r3, [r1, #0]
}
 800cefe:	4770      	bx	lr
 800cf00:	20000174 	.word	0x20000174

0800cf04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf04:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf06:	4c04      	ldr	r4, [pc, #16]	; (800cf18 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800cf08:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf0a:	4804      	ldr	r0, [pc, #16]	; (800cf1c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	f7ff fedd 	bl	800cccc <USBD_GetString>
  return USBD_StrDesc;
}
 800cf12:	4620      	mov	r0, r4
 800cf14:	bd10      	pop	{r4, pc}
 800cf16:	bf00      	nop
 800cf18:	200014f0 	.word	0x200014f0
 800cf1c:	08011a10 	.word	0x08011a10

0800cf20 <USBD_FS_ProductStrDescriptor>:
{
 800cf20:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf22:	4c04      	ldr	r4, [pc, #16]	; (800cf34 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800cf24:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf26:	4804      	ldr	r0, [pc, #16]	; (800cf38 <USBD_FS_ProductStrDescriptor+0x18>)
 800cf28:	4621      	mov	r1, r4
 800cf2a:	f7ff fecf 	bl	800cccc <USBD_GetString>
}
 800cf2e:	4620      	mov	r0, r4
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	bf00      	nop
 800cf34:	200014f0 	.word	0x200014f0
 800cf38:	08011a24 	.word	0x08011a24

0800cf3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf3c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf3e:	4c04      	ldr	r4, [pc, #16]	; (800cf50 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800cf40:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf42:	4804      	ldr	r0, [pc, #16]	; (800cf54 <USBD_FS_ConfigStrDescriptor+0x18>)
 800cf44:	4621      	mov	r1, r4
 800cf46:	f7ff fec1 	bl	800cccc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop
 800cf50:	200014f0 	.word	0x200014f0
 800cf54:	08011a3c 	.word	0x08011a3c

0800cf58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf58:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf5a:	4c04      	ldr	r4, [pc, #16]	; (800cf6c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800cf5c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf5e:	4804      	ldr	r0, [pc, #16]	; (800cf70 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800cf60:	4621      	mov	r1, r4
 800cf62:	f7ff feb3 	bl	800cccc <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800cf66:	4620      	mov	r0, r4
 800cf68:	bd10      	pop	{r4, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200014f0 	.word	0x200014f0
 800cf70:	08011a48 	.word	0x08011a48

0800cf74 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800cf74:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf78:	4a42      	ldr	r2, [pc, #264]	; (800d084 <USBD_FS_SerialStrDescriptor+0x110>)
 800cf7a:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800cf7c:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800cf7e:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800cf82:	18c3      	adds	r3, r0, r3
 800cf84:	d101      	bne.n	800cf8a <USBD_FS_SerialStrDescriptor+0x16>
}
 800cf86:	4840      	ldr	r0, [pc, #256]	; (800d088 <USBD_FS_SerialStrDescriptor+0x114>)
 800cf88:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800cf8a:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf8e:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800cf90:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf92:	4a3d      	ldr	r2, [pc, #244]	; (800d088 <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800cf94:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf98:	bf2c      	ite	cs
 800cf9a:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf9c:	3030      	addcc	r0, #48	; 0x30
 800cf9e:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800cfa0:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800cfa4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfa6:	bf8c      	ite	hi
 800cfa8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfaa:	3030      	addls	r0, #48	; 0x30
 800cfac:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800cfae:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800cfb2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfb4:	bf8c      	ite	hi
 800cfb6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfb8:	3030      	addls	r0, #48	; 0x30
 800cfba:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800cfbc:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800cfc0:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfc2:	bf8c      	ite	hi
 800cfc4:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfc6:	3030      	addls	r0, #48	; 0x30
 800cfc8:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800cfca:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800cfce:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfd0:	bf8c      	ite	hi
 800cfd2:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfd4:	3030      	addls	r0, #48	; 0x30
 800cfd6:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800cfd8:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800cfdc:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfde:	bf8c      	ite	hi
 800cfe0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cfe2:	3030      	addls	r0, #48	; 0x30
 800cfe4:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800cfe6:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800cfea:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cfec:	bf8c      	ite	hi
 800cfee:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800cff0:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800cff2:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800cff6:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800cff8:	f04f 0c00 	mov.w	ip, #0
 800cffc:	2000      	movs	r0, #0
 800cffe:	f882 c005 	strb.w	ip, [r2, #5]
 800d002:	73d0      	strb	r0, [r2, #15]
 800d004:	f04f 0c00 	mov.w	ip, #0
 800d008:	2000      	movs	r0, #0
 800d00a:	f882 c007 	strb.w	ip, [r2, #7]
 800d00e:	7450      	strb	r0, [r2, #17]
 800d010:	f04f 0c00 	mov.w	ip, #0
 800d014:	2000      	movs	r0, #0
 800d016:	f882 c009 	strb.w	ip, [r2, #9]
 800d01a:	74d0      	strb	r0, [r2, #19]
 800d01c:	f04f 0c00 	mov.w	ip, #0
 800d020:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800d022:	f003 030f 	and.w	r3, r3, #15
 800d026:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d028:	bf94      	ite	ls
 800d02a:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d02c:	3337      	addhi	r3, #55	; 0x37
 800d02e:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800d030:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800d034:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d038:	bf2c      	ite	cs
 800d03a:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d03c:	3330      	addcc	r3, #48	; 0x30
 800d03e:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800d040:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800d044:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d046:	bf8c      	ite	hi
 800d048:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d04a:	3330      	addls	r3, #48	; 0x30
 800d04c:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800d04e:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800d052:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d054:	bf8c      	ite	hi
 800d056:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800d058:	3330      	addls	r3, #48	; 0x30
 800d05a:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800d05c:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800d060:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800d062:	bf94      	ite	ls
 800d064:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d066:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800d068:	f882 c00b 	strb.w	ip, [r2, #11]
 800d06c:	7550      	strb	r0, [r2, #21]
 800d06e:	f04f 0c00 	mov.w	ip, #0
 800d072:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d074:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	75d0      	strb	r0, [r2, #23]
 800d07a:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800d07e:	4802      	ldr	r0, [pc, #8]	; (800d088 <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800d080:	7653      	strb	r3, [r2, #25]
}
 800d082:	4770      	bx	lr
 800d084:	1ff80000 	.word	0x1ff80000
 800d088:	20000178 	.word	0x20000178

0800d08c <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800d08e:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d090:	6853      	ldr	r3, [r2, #4]
 800d092:	bf0c      	ite	eq
 800d094:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800d098:	f023 0301 	bicne.w	r3, r3, #1
 800d09c:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800d09e:	4770      	bx	lr
 800d0a0:	40010000 	.word	0x40010000

0800d0a4 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800d0a4:	4b0e      	ldr	r3, [pc, #56]	; (800d0e0 <HAL_PCD_MspInit+0x3c>)
 800d0a6:	6802      	ldr	r2, [r0, #0]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d000      	beq.n	800d0ae <HAL_PCD_MspInit+0xa>
 800d0ac:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d0ae:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800d0b0:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800d0b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800d0b6:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800d0b8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800d0bc:	6259      	str	r1, [r3, #36]	; 0x24
 800d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800d0c0:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800d0c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0c6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d0c8:	2014      	movs	r0, #20
 800d0ca:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800d0cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d0ce:	f7fb fb85 	bl	80087dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d0d2:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d0d4:	b003      	add	sp, #12
 800d0d6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d0da:	f7fb bbbd 	b.w	8008858 <HAL_NVIC_EnableIRQ>
 800d0de:	bf00      	nop
 800d0e0:	40005c00 	.word	0x40005c00

0800d0e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e4:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0e6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d0ea:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800d0ee:	f7ff ba63 	b.w	800c5b8 <USBD_LL_SetupStage>
 800d0f2:	bf00      	nop

0800d0f4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0f4:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d0f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d0fc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800d100:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d104:	f7ff ba88 	b.w	800c618 <USBD_LL_DataOutStage>

0800d108 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d108:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d10c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d112:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d116:	f7ff babd 	b.w	800c694 <USBD_LL_DataInStage>
 800d11a:	bf00      	nop

0800d11c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d11c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d120:	f7ff bb5c 	b.w	800c7dc <USBD_LL_SOF>

0800d124 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d124:	6883      	ldr	r3, [r0, #8]
{
 800d126:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d128:	2b02      	cmp	r3, #2
{
 800d12a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d12c:	d001      	beq.n	800d132 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800d12e:	f7fa fbff 	bl	8007930 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d132:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800d136:	2101      	movs	r1, #1
 800d138:	f7ff fb3a 	bl	800c7b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d13c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800d140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d144:	f7ff bb0c 	b.w	800c760 <USBD_LL_Reset>

0800d148 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d148:	b510      	push	{r4, lr}
 800d14a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d14c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d150:	f7ff fb32 	bl	800c7b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d154:	69a3      	ldr	r3, [r4, #24]
 800d156:	b123      	cbz	r3, 800d162 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d158:	4a02      	ldr	r2, [pc, #8]	; (800d164 <HAL_PCD_SuspendCallback+0x1c>)
 800d15a:	6913      	ldr	r3, [r2, #16]
 800d15c:	f043 0306 	orr.w	r3, r3, #6
 800d160:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d162:	bd10      	pop	{r4, pc}
 800d164:	e000ed00 	.word	0xe000ed00

0800d168 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d168:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d16c:	f7ff bb2e 	b.w	800c7cc <USBD_LL_Resume>

0800d170 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d170:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d172:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800d174:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d176:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d178:	605c      	str	r4, [r3, #4]
{
 800d17a:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d17c:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d17e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d180:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800d182:	4a1c      	ldr	r2, [pc, #112]	; (800d1f4 <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800d184:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d188:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800d18a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d18e:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d190:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800d192:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d194:	f7fc f9ce 	bl	8009534 <HAL_PCD_Init>
 800d198:	bb30      	cbnz	r0, 800d1e8 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d19a:	2200      	movs	r2, #0
 800d19c:	2318      	movs	r3, #24
 800d19e:	4611      	mov	r1, r2
 800d1a0:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1a4:	f7fd f8c6 	bl	800a334 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d1a8:	2358      	movs	r3, #88	; 0x58
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2180      	movs	r1, #128	; 0x80
 800d1ae:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1b2:	f7fd f8bf 	bl	800a334 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d1b6:	23c0      	movs	r3, #192	; 0xc0
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2181      	movs	r1, #129	; 0x81
 800d1bc:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1c0:	f7fd f8b8 	bl	800a334 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d1c4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1d0:	f7fd f8b0 	bl	800a334 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d1d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2182      	movs	r1, #130	; 0x82
 800d1dc:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1e0:	f7fd f8a8 	bl	800a334 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d1e8:	f7fa fba2 	bl	8007930 <Error_Handler>
 800d1ec:	e7d5      	b.n	800d19a <USBD_LL_Init+0x2a>
 800d1ee:	bf00      	nop
 800d1f0:	200016f0 	.word	0x200016f0
 800d1f4:	40005c00 	.word	0x40005c00

0800d1f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1fa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d1fe:	f7fc f9fb 	bl	80095f8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800d202:	2803      	cmp	r0, #3
 800d204:	bf96      	itet	ls
 800d206:	4b02      	ldrls	r3, [pc, #8]	; (800d210 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800d208:	2002      	movhi	r0, #2
 800d20a:	5c18      	ldrbls	r0, [r3, r0]
}
 800d20c:	bd08      	pop	{r3, pc}
 800d20e:	bf00      	nop
 800d210:	08011a58 	.word	0x08011a58

0800d214 <USBD_LL_OpenEP>:
{
 800d214:	4694      	mov	ip, r2
 800d216:	b508      	push	{r3, lr}
 800d218:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d21a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d21e:	4663      	mov	r3, ip
 800d220:	f7fc ff5e 	bl	800a0e0 <HAL_PCD_EP_Open>
  switch (hal_status)
 800d224:	2803      	cmp	r0, #3
 800d226:	bf96      	itet	ls
 800d228:	4b01      	ldrls	r3, [pc, #4]	; (800d230 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d22a:	2002      	movhi	r0, #2
 800d22c:	5c18      	ldrbls	r0, [r3, r0]
}
 800d22e:	bd08      	pop	{r3, pc}
 800d230:	08011a58 	.word	0x08011a58

0800d234 <USBD_LL_CloseEP>:
{
 800d234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d236:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d23a:	f7fc ff8f 	bl	800a15c <HAL_PCD_EP_Close>
  switch (hal_status)
 800d23e:	2803      	cmp	r0, #3
 800d240:	bf96      	itet	ls
 800d242:	4b02      	ldrls	r3, [pc, #8]	; (800d24c <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d244:	2002      	movhi	r0, #2
 800d246:	5c18      	ldrbls	r0, [r3, r0]
}
 800d248:	bd08      	pop	{r3, pc}
 800d24a:	bf00      	nop
 800d24c:	08011a58 	.word	0x08011a58

0800d250 <USBD_LL_StallEP>:
{
 800d250:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d252:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d256:	f7fc fff9 	bl	800a24c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800d25a:	2803      	cmp	r0, #3
 800d25c:	bf96      	itet	ls
 800d25e:	4b02      	ldrls	r3, [pc, #8]	; (800d268 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d260:	2002      	movhi	r0, #2
 800d262:	5c18      	ldrbls	r0, [r3, r0]
}
 800d264:	bd08      	pop	{r3, pc}
 800d266:	bf00      	nop
 800d268:	08011a58 	.word	0x08011a58

0800d26c <USBD_LL_ClearStallEP>:
{
 800d26c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d26e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d272:	f7fd f823 	bl	800a2bc <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800d276:	2803      	cmp	r0, #3
 800d278:	bf96      	itet	ls
 800d27a:	4b02      	ldrls	r3, [pc, #8]	; (800d284 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d27c:	2002      	movhi	r0, #2
 800d27e:	5c18      	ldrbls	r0, [r3, r0]
}
 800d280:	bd08      	pop	{r3, pc}
 800d282:	bf00      	nop
 800d284:	08011a58 	.word	0x08011a58

0800d288 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800d288:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d28a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800d28e:	d406      	bmi.n	800d29e <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d290:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d294:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d298:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800d29c:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d29e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d2a2:	3101      	adds	r1, #1
 800d2a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d2a8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d2ac:	7888      	ldrb	r0, [r1, #2]
 800d2ae:	4770      	bx	lr

0800d2b0 <USBD_LL_SetUSBAddress>:
{
 800d2b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2b2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2b6:	f7fc fefd 	bl	800a0b4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800d2ba:	2803      	cmp	r0, #3
 800d2bc:	bf96      	itet	ls
 800d2be:	4b02      	ldrls	r3, [pc, #8]	; (800d2c8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2c0:	2002      	movhi	r0, #2
 800d2c2:	5c18      	ldrbls	r0, [r3, r0]
}
 800d2c4:	bd08      	pop	{r3, pc}
 800d2c6:	bf00      	nop
 800d2c8:	08011a58 	.word	0x08011a58

0800d2cc <USBD_LL_Transmit>:
{
 800d2cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2ce:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2d2:	f7fc ff97 	bl	800a204 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800d2d6:	2803      	cmp	r0, #3
 800d2d8:	bf96      	itet	ls
 800d2da:	4b02      	ldrls	r3, [pc, #8]	; (800d2e4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2dc:	2002      	movhi	r0, #2
 800d2de:	5c18      	ldrbls	r0, [r3, r0]
}
 800d2e0:	bd08      	pop	{r3, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08011a58 	.word	0x08011a58

0800d2e8 <USBD_LL_PrepareReceive>:
{
 800d2e8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2ea:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2ee:	f7fc ff67 	bl	800a1c0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800d2f2:	2803      	cmp	r0, #3
 800d2f4:	bf96      	itet	ls
 800d2f6:	4b02      	ldrls	r3, [pc, #8]	; (800d300 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2f8:	2002      	movhi	r0, #2
 800d2fa:	5c18      	ldrbls	r0, [r3, r0]
}
 800d2fc:	bd08      	pop	{r3, pc}
 800d2fe:	bf00      	nop
 800d300:	08011a58 	.word	0x08011a58

0800d304 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d304:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d308:	f7fc bf72 	b.w	800a1f0 <HAL_PCD_EP_GetRxCount>

0800d30c <USBD_static_malloc>:
}
 800d30c:	4800      	ldr	r0, [pc, #0]	; (800d310 <USBD_static_malloc+0x4>)
 800d30e:	4770      	bx	lr
 800d310:	200019dc 	.word	0x200019dc

0800d314 <USBD_static_free>:
}
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop

0800d318 <atof>:
 800d318:	2100      	movs	r1, #0
 800d31a:	f001 bae5 	b.w	800e8e8 <strtod>
	...

0800d320 <__errno>:
 800d320:	4b01      	ldr	r3, [pc, #4]	; (800d328 <__errno+0x8>)
 800d322:	6818      	ldr	r0, [r3, #0]
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	20000194 	.word	0x20000194

0800d32c <__libc_init_array>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	2600      	movs	r6, #0
 800d330:	4d0c      	ldr	r5, [pc, #48]	; (800d364 <__libc_init_array+0x38>)
 800d332:	4c0d      	ldr	r4, [pc, #52]	; (800d368 <__libc_init_array+0x3c>)
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	42a6      	cmp	r6, r4
 800d33a:	d109      	bne.n	800d350 <__libc_init_array+0x24>
 800d33c:	f004 f9da 	bl	80116f4 <_init>
 800d340:	2600      	movs	r6, #0
 800d342:	4d0a      	ldr	r5, [pc, #40]	; (800d36c <__libc_init_array+0x40>)
 800d344:	4c0a      	ldr	r4, [pc, #40]	; (800d370 <__libc_init_array+0x44>)
 800d346:	1b64      	subs	r4, r4, r5
 800d348:	10a4      	asrs	r4, r4, #2
 800d34a:	42a6      	cmp	r6, r4
 800d34c:	d105      	bne.n	800d35a <__libc_init_array+0x2e>
 800d34e:	bd70      	pop	{r4, r5, r6, pc}
 800d350:	f855 3b04 	ldr.w	r3, [r5], #4
 800d354:	4798      	blx	r3
 800d356:	3601      	adds	r6, #1
 800d358:	e7ee      	b.n	800d338 <__libc_init_array+0xc>
 800d35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d35e:	4798      	blx	r3
 800d360:	3601      	adds	r6, #1
 800d362:	e7f2      	b.n	800d34a <__libc_init_array+0x1e>
 800d364:	08011f04 	.word	0x08011f04
 800d368:	08011f04 	.word	0x08011f04
 800d36c:	08011f04 	.word	0x08011f04
 800d370:	08011f08 	.word	0x08011f08

0800d374 <memset>:
 800d374:	4603      	mov	r3, r0
 800d376:	4402      	add	r2, r0
 800d378:	4293      	cmp	r3, r2
 800d37a:	d100      	bne.n	800d37e <memset+0xa>
 800d37c:	4770      	bx	lr
 800d37e:	f803 1b01 	strb.w	r1, [r3], #1
 800d382:	e7f9      	b.n	800d378 <memset+0x4>

0800d384 <__cvt>:
 800d384:	2b00      	cmp	r3, #0
 800d386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d38a:	461f      	mov	r7, r3
 800d38c:	bfbb      	ittet	lt
 800d38e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d392:	461f      	movlt	r7, r3
 800d394:	2300      	movge	r3, #0
 800d396:	232d      	movlt	r3, #45	; 0x2d
 800d398:	b088      	sub	sp, #32
 800d39a:	4614      	mov	r4, r2
 800d39c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d39e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d3a0:	7013      	strb	r3, [r2, #0]
 800d3a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d3a8:	f023 0820 	bic.w	r8, r3, #32
 800d3ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3b0:	d005      	beq.n	800d3be <__cvt+0x3a>
 800d3b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d3b6:	d100      	bne.n	800d3ba <__cvt+0x36>
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	e000      	b.n	800d3c0 <__cvt+0x3c>
 800d3be:	2303      	movs	r3, #3
 800d3c0:	aa07      	add	r2, sp, #28
 800d3c2:	9204      	str	r2, [sp, #16]
 800d3c4:	aa06      	add	r2, sp, #24
 800d3c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d3ca:	e9cd 3500 	strd	r3, r5, [sp]
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	463b      	mov	r3, r7
 800d3d2:	f001 fb21 	bl	800ea18 <_dtoa_r>
 800d3d6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d3da:	4606      	mov	r6, r0
 800d3dc:	d102      	bne.n	800d3e4 <__cvt+0x60>
 800d3de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3e0:	07db      	lsls	r3, r3, #31
 800d3e2:	d522      	bpl.n	800d42a <__cvt+0xa6>
 800d3e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3e8:	eb06 0905 	add.w	r9, r6, r5
 800d3ec:	d110      	bne.n	800d410 <__cvt+0x8c>
 800d3ee:	7833      	ldrb	r3, [r6, #0]
 800d3f0:	2b30      	cmp	r3, #48	; 0x30
 800d3f2:	d10a      	bne.n	800d40a <__cvt+0x86>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f3 faec 	bl	80009d8 <__aeabi_dcmpeq>
 800d400:	b918      	cbnz	r0, 800d40a <__cvt+0x86>
 800d402:	f1c5 0501 	rsb	r5, r5, #1
 800d406:	f8ca 5000 	str.w	r5, [sl]
 800d40a:	f8da 3000 	ldr.w	r3, [sl]
 800d40e:	4499      	add	r9, r3
 800d410:	2200      	movs	r2, #0
 800d412:	2300      	movs	r3, #0
 800d414:	4620      	mov	r0, r4
 800d416:	4639      	mov	r1, r7
 800d418:	f7f3 fade 	bl	80009d8 <__aeabi_dcmpeq>
 800d41c:	b108      	cbz	r0, 800d422 <__cvt+0x9e>
 800d41e:	f8cd 901c 	str.w	r9, [sp, #28]
 800d422:	2230      	movs	r2, #48	; 0x30
 800d424:	9b07      	ldr	r3, [sp, #28]
 800d426:	454b      	cmp	r3, r9
 800d428:	d307      	bcc.n	800d43a <__cvt+0xb6>
 800d42a:	4630      	mov	r0, r6
 800d42c:	9b07      	ldr	r3, [sp, #28]
 800d42e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d430:	1b9b      	subs	r3, r3, r6
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	b008      	add	sp, #32
 800d436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d43a:	1c59      	adds	r1, r3, #1
 800d43c:	9107      	str	r1, [sp, #28]
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	e7f0      	b.n	800d424 <__cvt+0xa0>

0800d442 <__exponent>:
 800d442:	4603      	mov	r3, r0
 800d444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d446:	2900      	cmp	r1, #0
 800d448:	f803 2b02 	strb.w	r2, [r3], #2
 800d44c:	bfb6      	itet	lt
 800d44e:	222d      	movlt	r2, #45	; 0x2d
 800d450:	222b      	movge	r2, #43	; 0x2b
 800d452:	4249      	neglt	r1, r1
 800d454:	2909      	cmp	r1, #9
 800d456:	7042      	strb	r2, [r0, #1]
 800d458:	dd2b      	ble.n	800d4b2 <__exponent+0x70>
 800d45a:	f10d 0407 	add.w	r4, sp, #7
 800d45e:	46a4      	mov	ip, r4
 800d460:	270a      	movs	r7, #10
 800d462:	fb91 f6f7 	sdiv	r6, r1, r7
 800d466:	460a      	mov	r2, r1
 800d468:	46a6      	mov	lr, r4
 800d46a:	fb07 1516 	mls	r5, r7, r6, r1
 800d46e:	2a63      	cmp	r2, #99	; 0x63
 800d470:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d474:	4631      	mov	r1, r6
 800d476:	f104 34ff 	add.w	r4, r4, #4294967295
 800d47a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d47e:	dcf0      	bgt.n	800d462 <__exponent+0x20>
 800d480:	3130      	adds	r1, #48	; 0x30
 800d482:	f1ae 0502 	sub.w	r5, lr, #2
 800d486:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d48a:	4629      	mov	r1, r5
 800d48c:	1c44      	adds	r4, r0, #1
 800d48e:	4561      	cmp	r1, ip
 800d490:	d30a      	bcc.n	800d4a8 <__exponent+0x66>
 800d492:	f10d 0209 	add.w	r2, sp, #9
 800d496:	eba2 020e 	sub.w	r2, r2, lr
 800d49a:	4565      	cmp	r5, ip
 800d49c:	bf88      	it	hi
 800d49e:	2200      	movhi	r2, #0
 800d4a0:	4413      	add	r3, r2
 800d4a2:	1a18      	subs	r0, r3, r0
 800d4a4:	b003      	add	sp, #12
 800d4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ac:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d4b0:	e7ed      	b.n	800d48e <__exponent+0x4c>
 800d4b2:	2330      	movs	r3, #48	; 0x30
 800d4b4:	3130      	adds	r1, #48	; 0x30
 800d4b6:	7083      	strb	r3, [r0, #2]
 800d4b8:	70c1      	strb	r1, [r0, #3]
 800d4ba:	1d03      	adds	r3, r0, #4
 800d4bc:	e7f1      	b.n	800d4a2 <__exponent+0x60>
	...

0800d4c0 <_printf_float>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	b091      	sub	sp, #68	; 0x44
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d4cc:	4616      	mov	r6, r2
 800d4ce:	461f      	mov	r7, r3
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	f002 fbf5 	bl	800fcc0 <_localeconv_r>
 800d4d6:	6803      	ldr	r3, [r0, #0]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	9309      	str	r3, [sp, #36]	; 0x24
 800d4dc:	f7f2 fe50 	bl	8000180 <strlen>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	930e      	str	r3, [sp, #56]	; 0x38
 800d4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4e8:	900a      	str	r0, [sp, #40]	; 0x28
 800d4ea:	3307      	adds	r3, #7
 800d4ec:	f023 0307 	bic.w	r3, r3, #7
 800d4f0:	f103 0208 	add.w	r2, r3, #8
 800d4f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d4f8:	f8d4 b000 	ldr.w	fp, [r4]
 800d4fc:	f8c8 2000 	str.w	r2, [r8]
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d508:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d50c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d510:	930b      	str	r3, [sp, #44]	; 0x2c
 800d512:	f04f 32ff 	mov.w	r2, #4294967295
 800d516:	4640      	mov	r0, r8
 800d518:	4b9c      	ldr	r3, [pc, #624]	; (800d78c <_printf_float+0x2cc>)
 800d51a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d51c:	f7f3 fa8e 	bl	8000a3c <__aeabi_dcmpun>
 800d520:	bb70      	cbnz	r0, 800d580 <_printf_float+0xc0>
 800d522:	f04f 32ff 	mov.w	r2, #4294967295
 800d526:	4640      	mov	r0, r8
 800d528:	4b98      	ldr	r3, [pc, #608]	; (800d78c <_printf_float+0x2cc>)
 800d52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d52c:	f7f3 fa68 	bl	8000a00 <__aeabi_dcmple>
 800d530:	bb30      	cbnz	r0, 800d580 <_printf_float+0xc0>
 800d532:	2200      	movs	r2, #0
 800d534:	2300      	movs	r3, #0
 800d536:	4640      	mov	r0, r8
 800d538:	4651      	mov	r1, sl
 800d53a:	f7f3 fa57 	bl	80009ec <__aeabi_dcmplt>
 800d53e:	b110      	cbz	r0, 800d546 <_printf_float+0x86>
 800d540:	232d      	movs	r3, #45	; 0x2d
 800d542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d546:	4b92      	ldr	r3, [pc, #584]	; (800d790 <_printf_float+0x2d0>)
 800d548:	4892      	ldr	r0, [pc, #584]	; (800d794 <_printf_float+0x2d4>)
 800d54a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d54e:	bf94      	ite	ls
 800d550:	4698      	movls	r8, r3
 800d552:	4680      	movhi	r8, r0
 800d554:	2303      	movs	r3, #3
 800d556:	f04f 0a00 	mov.w	sl, #0
 800d55a:	6123      	str	r3, [r4, #16]
 800d55c:	f02b 0304 	bic.w	r3, fp, #4
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	4633      	mov	r3, r6
 800d564:	4621      	mov	r1, r4
 800d566:	4628      	mov	r0, r5
 800d568:	9700      	str	r7, [sp, #0]
 800d56a:	aa0f      	add	r2, sp, #60	; 0x3c
 800d56c:	f000 f9d4 	bl	800d918 <_printf_common>
 800d570:	3001      	adds	r0, #1
 800d572:	f040 8090 	bne.w	800d696 <_printf_float+0x1d6>
 800d576:	f04f 30ff 	mov.w	r0, #4294967295
 800d57a:	b011      	add	sp, #68	; 0x44
 800d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d580:	4642      	mov	r2, r8
 800d582:	4653      	mov	r3, sl
 800d584:	4640      	mov	r0, r8
 800d586:	4651      	mov	r1, sl
 800d588:	f7f3 fa58 	bl	8000a3c <__aeabi_dcmpun>
 800d58c:	b148      	cbz	r0, 800d5a2 <_printf_float+0xe2>
 800d58e:	f1ba 0f00 	cmp.w	sl, #0
 800d592:	bfb8      	it	lt
 800d594:	232d      	movlt	r3, #45	; 0x2d
 800d596:	4880      	ldr	r0, [pc, #512]	; (800d798 <_printf_float+0x2d8>)
 800d598:	bfb8      	it	lt
 800d59a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d59e:	4b7f      	ldr	r3, [pc, #508]	; (800d79c <_printf_float+0x2dc>)
 800d5a0:	e7d3      	b.n	800d54a <_printf_float+0x8a>
 800d5a2:	6863      	ldr	r3, [r4, #4]
 800d5a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	d142      	bne.n	800d632 <_printf_float+0x172>
 800d5ac:	2306      	movs	r3, #6
 800d5ae:	6063      	str	r3, [r4, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	9206      	str	r2, [sp, #24]
 800d5b4:	aa0e      	add	r2, sp, #56	; 0x38
 800d5b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d5ba:	aa0d      	add	r2, sp, #52	; 0x34
 800d5bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d5c0:	9203      	str	r2, [sp, #12]
 800d5c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d5c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	6863      	ldr	r3, [r4, #4]
 800d5ce:	4642      	mov	r2, r8
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	4653      	mov	r3, sl
 800d5d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5d8:	f7ff fed4 	bl	800d384 <__cvt>
 800d5dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5de:	4680      	mov	r8, r0
 800d5e0:	2947      	cmp	r1, #71	; 0x47
 800d5e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d5e4:	d108      	bne.n	800d5f8 <_printf_float+0x138>
 800d5e6:	1cc8      	adds	r0, r1, #3
 800d5e8:	db02      	blt.n	800d5f0 <_printf_float+0x130>
 800d5ea:	6863      	ldr	r3, [r4, #4]
 800d5ec:	4299      	cmp	r1, r3
 800d5ee:	dd40      	ble.n	800d672 <_printf_float+0x1b2>
 800d5f0:	f1a9 0902 	sub.w	r9, r9, #2
 800d5f4:	fa5f f989 	uxtb.w	r9, r9
 800d5f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d5fc:	d81f      	bhi.n	800d63e <_printf_float+0x17e>
 800d5fe:	464a      	mov	r2, r9
 800d600:	3901      	subs	r1, #1
 800d602:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d606:	910d      	str	r1, [sp, #52]	; 0x34
 800d608:	f7ff ff1b 	bl	800d442 <__exponent>
 800d60c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d60e:	4682      	mov	sl, r0
 800d610:	1813      	adds	r3, r2, r0
 800d612:	2a01      	cmp	r2, #1
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	dc02      	bgt.n	800d61e <_printf_float+0x15e>
 800d618:	6822      	ldr	r2, [r4, #0]
 800d61a:	07d2      	lsls	r2, r2, #31
 800d61c:	d501      	bpl.n	800d622 <_printf_float+0x162>
 800d61e:	3301      	adds	r3, #1
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d626:	2b00      	cmp	r3, #0
 800d628:	d09b      	beq.n	800d562 <_printf_float+0xa2>
 800d62a:	232d      	movs	r3, #45	; 0x2d
 800d62c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d630:	e797      	b.n	800d562 <_printf_float+0xa2>
 800d632:	2947      	cmp	r1, #71	; 0x47
 800d634:	d1bc      	bne.n	800d5b0 <_printf_float+0xf0>
 800d636:	2b00      	cmp	r3, #0
 800d638:	d1ba      	bne.n	800d5b0 <_printf_float+0xf0>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e7b7      	b.n	800d5ae <_printf_float+0xee>
 800d63e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d642:	d118      	bne.n	800d676 <_printf_float+0x1b6>
 800d644:	2900      	cmp	r1, #0
 800d646:	6863      	ldr	r3, [r4, #4]
 800d648:	dd0b      	ble.n	800d662 <_printf_float+0x1a2>
 800d64a:	6121      	str	r1, [r4, #16]
 800d64c:	b913      	cbnz	r3, 800d654 <_printf_float+0x194>
 800d64e:	6822      	ldr	r2, [r4, #0]
 800d650:	07d0      	lsls	r0, r2, #31
 800d652:	d502      	bpl.n	800d65a <_printf_float+0x19a>
 800d654:	3301      	adds	r3, #1
 800d656:	440b      	add	r3, r1
 800d658:	6123      	str	r3, [r4, #16]
 800d65a:	f04f 0a00 	mov.w	sl, #0
 800d65e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d660:	e7df      	b.n	800d622 <_printf_float+0x162>
 800d662:	b913      	cbnz	r3, 800d66a <_printf_float+0x1aa>
 800d664:	6822      	ldr	r2, [r4, #0]
 800d666:	07d2      	lsls	r2, r2, #31
 800d668:	d501      	bpl.n	800d66e <_printf_float+0x1ae>
 800d66a:	3302      	adds	r3, #2
 800d66c:	e7f4      	b.n	800d658 <_printf_float+0x198>
 800d66e:	2301      	movs	r3, #1
 800d670:	e7f2      	b.n	800d658 <_printf_float+0x198>
 800d672:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d678:	4299      	cmp	r1, r3
 800d67a:	db05      	blt.n	800d688 <_printf_float+0x1c8>
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	6121      	str	r1, [r4, #16]
 800d680:	07d8      	lsls	r0, r3, #31
 800d682:	d5ea      	bpl.n	800d65a <_printf_float+0x19a>
 800d684:	1c4b      	adds	r3, r1, #1
 800d686:	e7e7      	b.n	800d658 <_printf_float+0x198>
 800d688:	2900      	cmp	r1, #0
 800d68a:	bfcc      	ite	gt
 800d68c:	2201      	movgt	r2, #1
 800d68e:	f1c1 0202 	rsble	r2, r1, #2
 800d692:	4413      	add	r3, r2
 800d694:	e7e0      	b.n	800d658 <_printf_float+0x198>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	055a      	lsls	r2, r3, #21
 800d69a:	d407      	bmi.n	800d6ac <_printf_float+0x1ec>
 800d69c:	6923      	ldr	r3, [r4, #16]
 800d69e:	4642      	mov	r2, r8
 800d6a0:	4631      	mov	r1, r6
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	47b8      	blx	r7
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	d12b      	bne.n	800d702 <_printf_float+0x242>
 800d6aa:	e764      	b.n	800d576 <_printf_float+0xb6>
 800d6ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d6b0:	f240 80dd 	bls.w	800d86e <_printf_float+0x3ae>
 800d6b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f7f3 f98c 	bl	80009d8 <__aeabi_dcmpeq>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d033      	beq.n	800d72c <_printf_float+0x26c>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	4a35      	ldr	r2, [pc, #212]	; (800d7a0 <_printf_float+0x2e0>)
 800d6cc:	47b8      	blx	r7
 800d6ce:	3001      	adds	r0, #1
 800d6d0:	f43f af51 	beq.w	800d576 <_printf_float+0xb6>
 800d6d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	db02      	blt.n	800d6e2 <_printf_float+0x222>
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	07d8      	lsls	r0, r3, #31
 800d6e0:	d50f      	bpl.n	800d702 <_printf_float+0x242>
 800d6e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6e6:	4631      	mov	r1, r6
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	47b8      	blx	r7
 800d6ec:	3001      	adds	r0, #1
 800d6ee:	f43f af42 	beq.w	800d576 <_printf_float+0xb6>
 800d6f2:	f04f 0800 	mov.w	r8, #0
 800d6f6:	f104 091a 	add.w	r9, r4, #26
 800d6fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	4543      	cmp	r3, r8
 800d700:	dc09      	bgt.n	800d716 <_printf_float+0x256>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	079b      	lsls	r3, r3, #30
 800d706:	f100 8102 	bmi.w	800d90e <_printf_float+0x44e>
 800d70a:	68e0      	ldr	r0, [r4, #12]
 800d70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d70e:	4298      	cmp	r0, r3
 800d710:	bfb8      	it	lt
 800d712:	4618      	movlt	r0, r3
 800d714:	e731      	b.n	800d57a <_printf_float+0xba>
 800d716:	2301      	movs	r3, #1
 800d718:	464a      	mov	r2, r9
 800d71a:	4631      	mov	r1, r6
 800d71c:	4628      	mov	r0, r5
 800d71e:	47b8      	blx	r7
 800d720:	3001      	adds	r0, #1
 800d722:	f43f af28 	beq.w	800d576 <_printf_float+0xb6>
 800d726:	f108 0801 	add.w	r8, r8, #1
 800d72a:	e7e6      	b.n	800d6fa <_printf_float+0x23a>
 800d72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d72e:	2b00      	cmp	r3, #0
 800d730:	dc38      	bgt.n	800d7a4 <_printf_float+0x2e4>
 800d732:	2301      	movs	r3, #1
 800d734:	4631      	mov	r1, r6
 800d736:	4628      	mov	r0, r5
 800d738:	4a19      	ldr	r2, [pc, #100]	; (800d7a0 <_printf_float+0x2e0>)
 800d73a:	47b8      	blx	r7
 800d73c:	3001      	adds	r0, #1
 800d73e:	f43f af1a 	beq.w	800d576 <_printf_float+0xb6>
 800d742:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d746:	4313      	orrs	r3, r2
 800d748:	d102      	bne.n	800d750 <_printf_float+0x290>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	07d9      	lsls	r1, r3, #31
 800d74e:	d5d8      	bpl.n	800d702 <_printf_float+0x242>
 800d750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d754:	4631      	mov	r1, r6
 800d756:	4628      	mov	r0, r5
 800d758:	47b8      	blx	r7
 800d75a:	3001      	adds	r0, #1
 800d75c:	f43f af0b 	beq.w	800d576 <_printf_float+0xb6>
 800d760:	f04f 0900 	mov.w	r9, #0
 800d764:	f104 0a1a 	add.w	sl, r4, #26
 800d768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d76a:	425b      	negs	r3, r3
 800d76c:	454b      	cmp	r3, r9
 800d76e:	dc01      	bgt.n	800d774 <_printf_float+0x2b4>
 800d770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d772:	e794      	b.n	800d69e <_printf_float+0x1de>
 800d774:	2301      	movs	r3, #1
 800d776:	4652      	mov	r2, sl
 800d778:	4631      	mov	r1, r6
 800d77a:	4628      	mov	r0, r5
 800d77c:	47b8      	blx	r7
 800d77e:	3001      	adds	r0, #1
 800d780:	f43f aef9 	beq.w	800d576 <_printf_float+0xb6>
 800d784:	f109 0901 	add.w	r9, r9, #1
 800d788:	e7ee      	b.n	800d768 <_printf_float+0x2a8>
 800d78a:	bf00      	nop
 800d78c:	7fefffff 	.word	0x7fefffff
 800d790:	08011a60 	.word	0x08011a60
 800d794:	08011a64 	.word	0x08011a64
 800d798:	08011a6c 	.word	0x08011a6c
 800d79c:	08011a68 	.word	0x08011a68
 800d7a0:	08011a70 	.word	0x08011a70
 800d7a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	bfa8      	it	ge
 800d7ac:	461a      	movge	r2, r3
 800d7ae:	2a00      	cmp	r2, #0
 800d7b0:	4691      	mov	r9, r2
 800d7b2:	dc37      	bgt.n	800d824 <_printf_float+0x364>
 800d7b4:	f04f 0b00 	mov.w	fp, #0
 800d7b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7bc:	f104 021a 	add.w	r2, r4, #26
 800d7c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d7c4:	ebaa 0309 	sub.w	r3, sl, r9
 800d7c8:	455b      	cmp	r3, fp
 800d7ca:	dc33      	bgt.n	800d834 <_printf_float+0x374>
 800d7cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	db3b      	blt.n	800d84c <_printf_float+0x38c>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	07da      	lsls	r2, r3, #31
 800d7d8:	d438      	bmi.n	800d84c <_printf_float+0x38c>
 800d7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7de:	eba3 020a 	sub.w	r2, r3, sl
 800d7e2:	eba3 0901 	sub.w	r9, r3, r1
 800d7e6:	4591      	cmp	r9, r2
 800d7e8:	bfa8      	it	ge
 800d7ea:	4691      	movge	r9, r2
 800d7ec:	f1b9 0f00 	cmp.w	r9, #0
 800d7f0:	dc34      	bgt.n	800d85c <_printf_float+0x39c>
 800d7f2:	f04f 0800 	mov.w	r8, #0
 800d7f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7fa:	f104 0a1a 	add.w	sl, r4, #26
 800d7fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d802:	1a9b      	subs	r3, r3, r2
 800d804:	eba3 0309 	sub.w	r3, r3, r9
 800d808:	4543      	cmp	r3, r8
 800d80a:	f77f af7a 	ble.w	800d702 <_printf_float+0x242>
 800d80e:	2301      	movs	r3, #1
 800d810:	4652      	mov	r2, sl
 800d812:	4631      	mov	r1, r6
 800d814:	4628      	mov	r0, r5
 800d816:	47b8      	blx	r7
 800d818:	3001      	adds	r0, #1
 800d81a:	f43f aeac 	beq.w	800d576 <_printf_float+0xb6>
 800d81e:	f108 0801 	add.w	r8, r8, #1
 800d822:	e7ec      	b.n	800d7fe <_printf_float+0x33e>
 800d824:	4613      	mov	r3, r2
 800d826:	4631      	mov	r1, r6
 800d828:	4642      	mov	r2, r8
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b8      	blx	r7
 800d82e:	3001      	adds	r0, #1
 800d830:	d1c0      	bne.n	800d7b4 <_printf_float+0x2f4>
 800d832:	e6a0      	b.n	800d576 <_printf_float+0xb6>
 800d834:	2301      	movs	r3, #1
 800d836:	4631      	mov	r1, r6
 800d838:	4628      	mov	r0, r5
 800d83a:	920b      	str	r2, [sp, #44]	; 0x2c
 800d83c:	47b8      	blx	r7
 800d83e:	3001      	adds	r0, #1
 800d840:	f43f ae99 	beq.w	800d576 <_printf_float+0xb6>
 800d844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d846:	f10b 0b01 	add.w	fp, fp, #1
 800d84a:	e7b9      	b.n	800d7c0 <_printf_float+0x300>
 800d84c:	4631      	mov	r1, r6
 800d84e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	d1bf      	bne.n	800d7da <_printf_float+0x31a>
 800d85a:	e68c      	b.n	800d576 <_printf_float+0xb6>
 800d85c:	464b      	mov	r3, r9
 800d85e:	4631      	mov	r1, r6
 800d860:	4628      	mov	r0, r5
 800d862:	eb08 020a 	add.w	r2, r8, sl
 800d866:	47b8      	blx	r7
 800d868:	3001      	adds	r0, #1
 800d86a:	d1c2      	bne.n	800d7f2 <_printf_float+0x332>
 800d86c:	e683      	b.n	800d576 <_printf_float+0xb6>
 800d86e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d870:	2a01      	cmp	r2, #1
 800d872:	dc01      	bgt.n	800d878 <_printf_float+0x3b8>
 800d874:	07db      	lsls	r3, r3, #31
 800d876:	d537      	bpl.n	800d8e8 <_printf_float+0x428>
 800d878:	2301      	movs	r3, #1
 800d87a:	4642      	mov	r2, r8
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f ae77 	beq.w	800d576 <_printf_float+0xb6>
 800d888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d88c:	4631      	mov	r1, r6
 800d88e:	4628      	mov	r0, r5
 800d890:	47b8      	blx	r7
 800d892:	3001      	adds	r0, #1
 800d894:	f43f ae6f 	beq.w	800d576 <_printf_float+0xb6>
 800d898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d89c:	2200      	movs	r2, #0
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f7f3 f89a 	bl	80009d8 <__aeabi_dcmpeq>
 800d8a4:	b9d8      	cbnz	r0, 800d8de <_printf_float+0x41e>
 800d8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8a8:	f108 0201 	add.w	r2, r8, #1
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	d10e      	bne.n	800d8d6 <_printf_float+0x416>
 800d8b8:	e65d      	b.n	800d576 <_printf_float+0xb6>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	464a      	mov	r2, r9
 800d8be:	4631      	mov	r1, r6
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	47b8      	blx	r7
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	f43f ae56 	beq.w	800d576 <_printf_float+0xb6>
 800d8ca:	f108 0801 	add.w	r8, r8, #1
 800d8ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	4543      	cmp	r3, r8
 800d8d4:	dcf1      	bgt.n	800d8ba <_printf_float+0x3fa>
 800d8d6:	4653      	mov	r3, sl
 800d8d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d8dc:	e6e0      	b.n	800d6a0 <_printf_float+0x1e0>
 800d8de:	f04f 0800 	mov.w	r8, #0
 800d8e2:	f104 091a 	add.w	r9, r4, #26
 800d8e6:	e7f2      	b.n	800d8ce <_printf_float+0x40e>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	4642      	mov	r2, r8
 800d8ec:	e7df      	b.n	800d8ae <_printf_float+0x3ee>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	464a      	mov	r2, r9
 800d8f2:	4631      	mov	r1, r6
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	47b8      	blx	r7
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	f43f ae3c 	beq.w	800d576 <_printf_float+0xb6>
 800d8fe:	f108 0801 	add.w	r8, r8, #1
 800d902:	68e3      	ldr	r3, [r4, #12]
 800d904:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d906:	1a5b      	subs	r3, r3, r1
 800d908:	4543      	cmp	r3, r8
 800d90a:	dcf0      	bgt.n	800d8ee <_printf_float+0x42e>
 800d90c:	e6fd      	b.n	800d70a <_printf_float+0x24a>
 800d90e:	f04f 0800 	mov.w	r8, #0
 800d912:	f104 0919 	add.w	r9, r4, #25
 800d916:	e7f4      	b.n	800d902 <_printf_float+0x442>

0800d918 <_printf_common>:
 800d918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d91c:	4616      	mov	r6, r2
 800d91e:	4699      	mov	r9, r3
 800d920:	688a      	ldr	r2, [r1, #8]
 800d922:	690b      	ldr	r3, [r1, #16]
 800d924:	4607      	mov	r7, r0
 800d926:	4293      	cmp	r3, r2
 800d928:	bfb8      	it	lt
 800d92a:	4613      	movlt	r3, r2
 800d92c:	6033      	str	r3, [r6, #0]
 800d92e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d932:	460c      	mov	r4, r1
 800d934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d938:	b10a      	cbz	r2, 800d93e <_printf_common+0x26>
 800d93a:	3301      	adds	r3, #1
 800d93c:	6033      	str	r3, [r6, #0]
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	0699      	lsls	r1, r3, #26
 800d942:	bf42      	ittt	mi
 800d944:	6833      	ldrmi	r3, [r6, #0]
 800d946:	3302      	addmi	r3, #2
 800d948:	6033      	strmi	r3, [r6, #0]
 800d94a:	6825      	ldr	r5, [r4, #0]
 800d94c:	f015 0506 	ands.w	r5, r5, #6
 800d950:	d106      	bne.n	800d960 <_printf_common+0x48>
 800d952:	f104 0a19 	add.w	sl, r4, #25
 800d956:	68e3      	ldr	r3, [r4, #12]
 800d958:	6832      	ldr	r2, [r6, #0]
 800d95a:	1a9b      	subs	r3, r3, r2
 800d95c:	42ab      	cmp	r3, r5
 800d95e:	dc28      	bgt.n	800d9b2 <_printf_common+0x9a>
 800d960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d964:	1e13      	subs	r3, r2, #0
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	bf18      	it	ne
 800d96a:	2301      	movne	r3, #1
 800d96c:	0692      	lsls	r2, r2, #26
 800d96e:	d42d      	bmi.n	800d9cc <_printf_common+0xb4>
 800d970:	4649      	mov	r1, r9
 800d972:	4638      	mov	r0, r7
 800d974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d978:	47c0      	blx	r8
 800d97a:	3001      	adds	r0, #1
 800d97c:	d020      	beq.n	800d9c0 <_printf_common+0xa8>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	68e5      	ldr	r5, [r4, #12]
 800d982:	f003 0306 	and.w	r3, r3, #6
 800d986:	2b04      	cmp	r3, #4
 800d988:	bf18      	it	ne
 800d98a:	2500      	movne	r5, #0
 800d98c:	6832      	ldr	r2, [r6, #0]
 800d98e:	f04f 0600 	mov.w	r6, #0
 800d992:	68a3      	ldr	r3, [r4, #8]
 800d994:	bf08      	it	eq
 800d996:	1aad      	subeq	r5, r5, r2
 800d998:	6922      	ldr	r2, [r4, #16]
 800d99a:	bf08      	it	eq
 800d99c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	bfc4      	itt	gt
 800d9a4:	1a9b      	subgt	r3, r3, r2
 800d9a6:	18ed      	addgt	r5, r5, r3
 800d9a8:	341a      	adds	r4, #26
 800d9aa:	42b5      	cmp	r5, r6
 800d9ac:	d11a      	bne.n	800d9e4 <_printf_common+0xcc>
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	e008      	b.n	800d9c4 <_printf_common+0xac>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	4652      	mov	r2, sl
 800d9b6:	4649      	mov	r1, r9
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	47c0      	blx	r8
 800d9bc:	3001      	adds	r0, #1
 800d9be:	d103      	bne.n	800d9c8 <_printf_common+0xb0>
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c8:	3501      	adds	r5, #1
 800d9ca:	e7c4      	b.n	800d956 <_printf_common+0x3e>
 800d9cc:	2030      	movs	r0, #48	; 0x30
 800d9ce:	18e1      	adds	r1, r4, r3
 800d9d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9d4:	1c5a      	adds	r2, r3, #1
 800d9d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9da:	4422      	add	r2, r4
 800d9dc:	3302      	adds	r3, #2
 800d9de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9e2:	e7c5      	b.n	800d970 <_printf_common+0x58>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	4622      	mov	r2, r4
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	47c0      	blx	r8
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	d0e6      	beq.n	800d9c0 <_printf_common+0xa8>
 800d9f2:	3601      	adds	r6, #1
 800d9f4:	e7d9      	b.n	800d9aa <_printf_common+0x92>
	...

0800d9f8 <_printf_i>:
 800d9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	7e0f      	ldrb	r7, [r1, #24]
 800d9fe:	4691      	mov	r9, r2
 800da00:	2f78      	cmp	r7, #120	; 0x78
 800da02:	4680      	mov	r8, r0
 800da04:	460c      	mov	r4, r1
 800da06:	469a      	mov	sl, r3
 800da08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da0e:	d807      	bhi.n	800da20 <_printf_i+0x28>
 800da10:	2f62      	cmp	r7, #98	; 0x62
 800da12:	d80a      	bhi.n	800da2a <_printf_i+0x32>
 800da14:	2f00      	cmp	r7, #0
 800da16:	f000 80d9 	beq.w	800dbcc <_printf_i+0x1d4>
 800da1a:	2f58      	cmp	r7, #88	; 0x58
 800da1c:	f000 80a4 	beq.w	800db68 <_printf_i+0x170>
 800da20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da28:	e03a      	b.n	800daa0 <_printf_i+0xa8>
 800da2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da2e:	2b15      	cmp	r3, #21
 800da30:	d8f6      	bhi.n	800da20 <_printf_i+0x28>
 800da32:	a101      	add	r1, pc, #4	; (adr r1, 800da38 <_printf_i+0x40>)
 800da34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da38:	0800da91 	.word	0x0800da91
 800da3c:	0800daa5 	.word	0x0800daa5
 800da40:	0800da21 	.word	0x0800da21
 800da44:	0800da21 	.word	0x0800da21
 800da48:	0800da21 	.word	0x0800da21
 800da4c:	0800da21 	.word	0x0800da21
 800da50:	0800daa5 	.word	0x0800daa5
 800da54:	0800da21 	.word	0x0800da21
 800da58:	0800da21 	.word	0x0800da21
 800da5c:	0800da21 	.word	0x0800da21
 800da60:	0800da21 	.word	0x0800da21
 800da64:	0800dbb3 	.word	0x0800dbb3
 800da68:	0800dad5 	.word	0x0800dad5
 800da6c:	0800db95 	.word	0x0800db95
 800da70:	0800da21 	.word	0x0800da21
 800da74:	0800da21 	.word	0x0800da21
 800da78:	0800dbd5 	.word	0x0800dbd5
 800da7c:	0800da21 	.word	0x0800da21
 800da80:	0800dad5 	.word	0x0800dad5
 800da84:	0800da21 	.word	0x0800da21
 800da88:	0800da21 	.word	0x0800da21
 800da8c:	0800db9d 	.word	0x0800db9d
 800da90:	682b      	ldr	r3, [r5, #0]
 800da92:	1d1a      	adds	r2, r3, #4
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	602a      	str	r2, [r5, #0]
 800da98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800daa0:	2301      	movs	r3, #1
 800daa2:	e0a4      	b.n	800dbee <_printf_i+0x1f6>
 800daa4:	6820      	ldr	r0, [r4, #0]
 800daa6:	6829      	ldr	r1, [r5, #0]
 800daa8:	0606      	lsls	r6, r0, #24
 800daaa:	f101 0304 	add.w	r3, r1, #4
 800daae:	d50a      	bpl.n	800dac6 <_printf_i+0xce>
 800dab0:	680e      	ldr	r6, [r1, #0]
 800dab2:	602b      	str	r3, [r5, #0]
 800dab4:	2e00      	cmp	r6, #0
 800dab6:	da03      	bge.n	800dac0 <_printf_i+0xc8>
 800dab8:	232d      	movs	r3, #45	; 0x2d
 800daba:	4276      	negs	r6, r6
 800dabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dac0:	230a      	movs	r3, #10
 800dac2:	485e      	ldr	r0, [pc, #376]	; (800dc3c <_printf_i+0x244>)
 800dac4:	e019      	b.n	800dafa <_printf_i+0x102>
 800dac6:	680e      	ldr	r6, [r1, #0]
 800dac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dacc:	602b      	str	r3, [r5, #0]
 800dace:	bf18      	it	ne
 800dad0:	b236      	sxthne	r6, r6
 800dad2:	e7ef      	b.n	800dab4 <_printf_i+0xbc>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	6820      	ldr	r0, [r4, #0]
 800dad8:	1d19      	adds	r1, r3, #4
 800dada:	6029      	str	r1, [r5, #0]
 800dadc:	0601      	lsls	r1, r0, #24
 800dade:	d501      	bpl.n	800dae4 <_printf_i+0xec>
 800dae0:	681e      	ldr	r6, [r3, #0]
 800dae2:	e002      	b.n	800daea <_printf_i+0xf2>
 800dae4:	0646      	lsls	r6, r0, #25
 800dae6:	d5fb      	bpl.n	800dae0 <_printf_i+0xe8>
 800dae8:	881e      	ldrh	r6, [r3, #0]
 800daea:	2f6f      	cmp	r7, #111	; 0x6f
 800daec:	bf0c      	ite	eq
 800daee:	2308      	moveq	r3, #8
 800daf0:	230a      	movne	r3, #10
 800daf2:	4852      	ldr	r0, [pc, #328]	; (800dc3c <_printf_i+0x244>)
 800daf4:	2100      	movs	r1, #0
 800daf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dafa:	6865      	ldr	r5, [r4, #4]
 800dafc:	2d00      	cmp	r5, #0
 800dafe:	bfa8      	it	ge
 800db00:	6821      	ldrge	r1, [r4, #0]
 800db02:	60a5      	str	r5, [r4, #8]
 800db04:	bfa4      	itt	ge
 800db06:	f021 0104 	bicge.w	r1, r1, #4
 800db0a:	6021      	strge	r1, [r4, #0]
 800db0c:	b90e      	cbnz	r6, 800db12 <_printf_i+0x11a>
 800db0e:	2d00      	cmp	r5, #0
 800db10:	d04d      	beq.n	800dbae <_printf_i+0x1b6>
 800db12:	4615      	mov	r5, r2
 800db14:	fbb6 f1f3 	udiv	r1, r6, r3
 800db18:	fb03 6711 	mls	r7, r3, r1, r6
 800db1c:	5dc7      	ldrb	r7, [r0, r7]
 800db1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db22:	4637      	mov	r7, r6
 800db24:	42bb      	cmp	r3, r7
 800db26:	460e      	mov	r6, r1
 800db28:	d9f4      	bls.n	800db14 <_printf_i+0x11c>
 800db2a:	2b08      	cmp	r3, #8
 800db2c:	d10b      	bne.n	800db46 <_printf_i+0x14e>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	07de      	lsls	r6, r3, #31
 800db32:	d508      	bpl.n	800db46 <_printf_i+0x14e>
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	6861      	ldr	r1, [r4, #4]
 800db38:	4299      	cmp	r1, r3
 800db3a:	bfde      	ittt	le
 800db3c:	2330      	movle	r3, #48	; 0x30
 800db3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db42:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db46:	1b52      	subs	r2, r2, r5
 800db48:	6122      	str	r2, [r4, #16]
 800db4a:	464b      	mov	r3, r9
 800db4c:	4621      	mov	r1, r4
 800db4e:	4640      	mov	r0, r8
 800db50:	f8cd a000 	str.w	sl, [sp]
 800db54:	aa03      	add	r2, sp, #12
 800db56:	f7ff fedf 	bl	800d918 <_printf_common>
 800db5a:	3001      	adds	r0, #1
 800db5c:	d14c      	bne.n	800dbf8 <_printf_i+0x200>
 800db5e:	f04f 30ff 	mov.w	r0, #4294967295
 800db62:	b004      	add	sp, #16
 800db64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db68:	4834      	ldr	r0, [pc, #208]	; (800dc3c <_printf_i+0x244>)
 800db6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db6e:	6829      	ldr	r1, [r5, #0]
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	f851 6b04 	ldr.w	r6, [r1], #4
 800db76:	6029      	str	r1, [r5, #0]
 800db78:	061d      	lsls	r5, r3, #24
 800db7a:	d514      	bpl.n	800dba6 <_printf_i+0x1ae>
 800db7c:	07df      	lsls	r7, r3, #31
 800db7e:	bf44      	itt	mi
 800db80:	f043 0320 	orrmi.w	r3, r3, #32
 800db84:	6023      	strmi	r3, [r4, #0]
 800db86:	b91e      	cbnz	r6, 800db90 <_printf_i+0x198>
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	f023 0320 	bic.w	r3, r3, #32
 800db8e:	6023      	str	r3, [r4, #0]
 800db90:	2310      	movs	r3, #16
 800db92:	e7af      	b.n	800daf4 <_printf_i+0xfc>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	f043 0320 	orr.w	r3, r3, #32
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	2378      	movs	r3, #120	; 0x78
 800db9e:	4828      	ldr	r0, [pc, #160]	; (800dc40 <_printf_i+0x248>)
 800dba0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dba4:	e7e3      	b.n	800db6e <_printf_i+0x176>
 800dba6:	0659      	lsls	r1, r3, #25
 800dba8:	bf48      	it	mi
 800dbaa:	b2b6      	uxthmi	r6, r6
 800dbac:	e7e6      	b.n	800db7c <_printf_i+0x184>
 800dbae:	4615      	mov	r5, r2
 800dbb0:	e7bb      	b.n	800db2a <_printf_i+0x132>
 800dbb2:	682b      	ldr	r3, [r5, #0]
 800dbb4:	6826      	ldr	r6, [r4, #0]
 800dbb6:	1d18      	adds	r0, r3, #4
 800dbb8:	6961      	ldr	r1, [r4, #20]
 800dbba:	6028      	str	r0, [r5, #0]
 800dbbc:	0635      	lsls	r5, r6, #24
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	d501      	bpl.n	800dbc6 <_printf_i+0x1ce>
 800dbc2:	6019      	str	r1, [r3, #0]
 800dbc4:	e002      	b.n	800dbcc <_printf_i+0x1d4>
 800dbc6:	0670      	lsls	r0, r6, #25
 800dbc8:	d5fb      	bpl.n	800dbc2 <_printf_i+0x1ca>
 800dbca:	8019      	strh	r1, [r3, #0]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	4615      	mov	r5, r2
 800dbd0:	6123      	str	r3, [r4, #16]
 800dbd2:	e7ba      	b.n	800db4a <_printf_i+0x152>
 800dbd4:	682b      	ldr	r3, [r5, #0]
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	1d1a      	adds	r2, r3, #4
 800dbda:	602a      	str	r2, [r5, #0]
 800dbdc:	681d      	ldr	r5, [r3, #0]
 800dbde:	6862      	ldr	r2, [r4, #4]
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	f002 f88b 	bl	800fcfc <memchr>
 800dbe6:	b108      	cbz	r0, 800dbec <_printf_i+0x1f4>
 800dbe8:	1b40      	subs	r0, r0, r5
 800dbea:	6060      	str	r0, [r4, #4]
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	6123      	str	r3, [r4, #16]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbf6:	e7a8      	b.n	800db4a <_printf_i+0x152>
 800dbf8:	462a      	mov	r2, r5
 800dbfa:	4649      	mov	r1, r9
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	6923      	ldr	r3, [r4, #16]
 800dc00:	47d0      	blx	sl
 800dc02:	3001      	adds	r0, #1
 800dc04:	d0ab      	beq.n	800db5e <_printf_i+0x166>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	079b      	lsls	r3, r3, #30
 800dc0a:	d413      	bmi.n	800dc34 <_printf_i+0x23c>
 800dc0c:	68e0      	ldr	r0, [r4, #12]
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	4298      	cmp	r0, r3
 800dc12:	bfb8      	it	lt
 800dc14:	4618      	movlt	r0, r3
 800dc16:	e7a4      	b.n	800db62 <_printf_i+0x16a>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4632      	mov	r2, r6
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	4640      	mov	r0, r8
 800dc20:	47d0      	blx	sl
 800dc22:	3001      	adds	r0, #1
 800dc24:	d09b      	beq.n	800db5e <_printf_i+0x166>
 800dc26:	3501      	adds	r5, #1
 800dc28:	68e3      	ldr	r3, [r4, #12]
 800dc2a:	9903      	ldr	r1, [sp, #12]
 800dc2c:	1a5b      	subs	r3, r3, r1
 800dc2e:	42ab      	cmp	r3, r5
 800dc30:	dcf2      	bgt.n	800dc18 <_printf_i+0x220>
 800dc32:	e7eb      	b.n	800dc0c <_printf_i+0x214>
 800dc34:	2500      	movs	r5, #0
 800dc36:	f104 0619 	add.w	r6, r4, #25
 800dc3a:	e7f5      	b.n	800dc28 <_printf_i+0x230>
 800dc3c:	08011a72 	.word	0x08011a72
 800dc40:	08011a83 	.word	0x08011a83

0800dc44 <sniprintf>:
 800dc44:	b40c      	push	{r2, r3}
 800dc46:	b530      	push	{r4, r5, lr}
 800dc48:	4b17      	ldr	r3, [pc, #92]	; (800dca8 <sniprintf+0x64>)
 800dc4a:	1e0c      	subs	r4, r1, #0
 800dc4c:	681d      	ldr	r5, [r3, #0]
 800dc4e:	b09d      	sub	sp, #116	; 0x74
 800dc50:	da08      	bge.n	800dc64 <sniprintf+0x20>
 800dc52:	238b      	movs	r3, #139	; 0x8b
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	602b      	str	r3, [r5, #0]
 800dc5a:	b01d      	add	sp, #116	; 0x74
 800dc5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc60:	b002      	add	sp, #8
 800dc62:	4770      	bx	lr
 800dc64:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc68:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc6c:	bf0c      	ite	eq
 800dc6e:	4623      	moveq	r3, r4
 800dc70:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc74:	9304      	str	r3, [sp, #16]
 800dc76:	9307      	str	r3, [sp, #28]
 800dc78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc7c:	9002      	str	r0, [sp, #8]
 800dc7e:	9006      	str	r0, [sp, #24]
 800dc80:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc84:	4628      	mov	r0, r5
 800dc86:	ab21      	add	r3, sp, #132	; 0x84
 800dc88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc8a:	a902      	add	r1, sp, #8
 800dc8c:	9301      	str	r3, [sp, #4]
 800dc8e:	f002 fe55 	bl	801093c <_svfiprintf_r>
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	bfbc      	itt	lt
 800dc96:	238b      	movlt	r3, #139	; 0x8b
 800dc98:	602b      	strlt	r3, [r5, #0]
 800dc9a:	2c00      	cmp	r4, #0
 800dc9c:	d0dd      	beq.n	800dc5a <sniprintf+0x16>
 800dc9e:	2200      	movs	r2, #0
 800dca0:	9b02      	ldr	r3, [sp, #8]
 800dca2:	701a      	strb	r2, [r3, #0]
 800dca4:	e7d9      	b.n	800dc5a <sniprintf+0x16>
 800dca6:	bf00      	nop
 800dca8:	20000194 	.word	0x20000194

0800dcac <strncmp>:
 800dcac:	4603      	mov	r3, r0
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	b172      	cbz	r2, 800dcd0 <strncmp+0x24>
 800dcb2:	3901      	subs	r1, #1
 800dcb4:	1884      	adds	r4, r0, r2
 800dcb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dcba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dcbe:	4290      	cmp	r0, r2
 800dcc0:	d101      	bne.n	800dcc6 <strncmp+0x1a>
 800dcc2:	42a3      	cmp	r3, r4
 800dcc4:	d101      	bne.n	800dcca <strncmp+0x1e>
 800dcc6:	1a80      	subs	r0, r0, r2
 800dcc8:	bd10      	pop	{r4, pc}
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d1f3      	bne.n	800dcb6 <strncmp+0xa>
 800dcce:	e7fa      	b.n	800dcc6 <strncmp+0x1a>
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	e7f9      	b.n	800dcc8 <strncmp+0x1c>

0800dcd4 <sulp>:
 800dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	460f      	mov	r7, r1
 800dcda:	4690      	mov	r8, r2
 800dcdc:	f002 fb9a 	bl	8010414 <__ulp>
 800dce0:	4604      	mov	r4, r0
 800dce2:	460d      	mov	r5, r1
 800dce4:	f1b8 0f00 	cmp.w	r8, #0
 800dce8:	d011      	beq.n	800dd0e <sulp+0x3a>
 800dcea:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dcee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	dd0b      	ble.n	800dd0e <sulp+0x3a>
 800dcf6:	2400      	movs	r4, #0
 800dcf8:	051b      	lsls	r3, r3, #20
 800dcfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dcfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dd02:	4622      	mov	r2, r4
 800dd04:	462b      	mov	r3, r5
 800dd06:	f7f2 fbff 	bl	8000508 <__aeabi_dmul>
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	460d      	mov	r5, r1
 800dd0e:	4620      	mov	r0, r4
 800dd10:	4629      	mov	r1, r5
 800dd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800dd18 <_strtod_l>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	469b      	mov	fp, r3
 800dd1e:	2300      	movs	r3, #0
 800dd20:	b09f      	sub	sp, #124	; 0x7c
 800dd22:	931a      	str	r3, [sp, #104]	; 0x68
 800dd24:	4b9e      	ldr	r3, [pc, #632]	; (800dfa0 <_strtod_l+0x288>)
 800dd26:	4682      	mov	sl, r0
 800dd28:	681f      	ldr	r7, [r3, #0]
 800dd2a:	460e      	mov	r6, r1
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	9215      	str	r2, [sp, #84]	; 0x54
 800dd30:	f7f2 fa26 	bl	8000180 <strlen>
 800dd34:	f04f 0800 	mov.w	r8, #0
 800dd38:	4604      	mov	r4, r0
 800dd3a:	f04f 0900 	mov.w	r9, #0
 800dd3e:	9619      	str	r6, [sp, #100]	; 0x64
 800dd40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd42:	781a      	ldrb	r2, [r3, #0]
 800dd44:	2a2b      	cmp	r2, #43	; 0x2b
 800dd46:	d04c      	beq.n	800dde2 <_strtod_l+0xca>
 800dd48:	d83a      	bhi.n	800ddc0 <_strtod_l+0xa8>
 800dd4a:	2a0d      	cmp	r2, #13
 800dd4c:	d833      	bhi.n	800ddb6 <_strtod_l+0x9e>
 800dd4e:	2a08      	cmp	r2, #8
 800dd50:	d833      	bhi.n	800ddba <_strtod_l+0xa2>
 800dd52:	2a00      	cmp	r2, #0
 800dd54:	d03d      	beq.n	800ddd2 <_strtod_l+0xba>
 800dd56:	2300      	movs	r3, #0
 800dd58:	930a      	str	r3, [sp, #40]	; 0x28
 800dd5a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800dd5c:	782b      	ldrb	r3, [r5, #0]
 800dd5e:	2b30      	cmp	r3, #48	; 0x30
 800dd60:	f040 80aa 	bne.w	800deb8 <_strtod_l+0x1a0>
 800dd64:	786b      	ldrb	r3, [r5, #1]
 800dd66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd6a:	2b58      	cmp	r3, #88	; 0x58
 800dd6c:	d166      	bne.n	800de3c <_strtod_l+0x124>
 800dd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd70:	4650      	mov	r0, sl
 800dd72:	9301      	str	r3, [sp, #4]
 800dd74:	ab1a      	add	r3, sp, #104	; 0x68
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	4a8a      	ldr	r2, [pc, #552]	; (800dfa4 <_strtod_l+0x28c>)
 800dd7a:	f8cd b008 	str.w	fp, [sp, #8]
 800dd7e:	ab1b      	add	r3, sp, #108	; 0x6c
 800dd80:	a919      	add	r1, sp, #100	; 0x64
 800dd82:	f001 fc9f 	bl	800f6c4 <__gethex>
 800dd86:	f010 0607 	ands.w	r6, r0, #7
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	d005      	beq.n	800dd9a <_strtod_l+0x82>
 800dd8e:	2e06      	cmp	r6, #6
 800dd90:	d129      	bne.n	800dde6 <_strtod_l+0xce>
 800dd92:	2300      	movs	r3, #0
 800dd94:	3501      	adds	r5, #1
 800dd96:	9519      	str	r5, [sp, #100]	; 0x64
 800dd98:	930a      	str	r3, [sp, #40]	; 0x28
 800dd9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f040 858a 	bne.w	800e8b6 <_strtod_l+0xb9e>
 800dda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda4:	b1d3      	cbz	r3, 800dddc <_strtod_l+0xc4>
 800dda6:	4642      	mov	r2, r8
 800dda8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ddac:	4610      	mov	r0, r2
 800ddae:	4619      	mov	r1, r3
 800ddb0:	b01f      	add	sp, #124	; 0x7c
 800ddb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	2a20      	cmp	r2, #32
 800ddb8:	d1cd      	bne.n	800dd56 <_strtod_l+0x3e>
 800ddba:	3301      	adds	r3, #1
 800ddbc:	9319      	str	r3, [sp, #100]	; 0x64
 800ddbe:	e7bf      	b.n	800dd40 <_strtod_l+0x28>
 800ddc0:	2a2d      	cmp	r2, #45	; 0x2d
 800ddc2:	d1c8      	bne.n	800dd56 <_strtod_l+0x3e>
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	920a      	str	r2, [sp, #40]	; 0x28
 800ddc8:	1c5a      	adds	r2, r3, #1
 800ddca:	9219      	str	r2, [sp, #100]	; 0x64
 800ddcc:	785b      	ldrb	r3, [r3, #1]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1c3      	bne.n	800dd5a <_strtod_l+0x42>
 800ddd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddd4:	9619      	str	r6, [sp, #100]	; 0x64
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f040 856b 	bne.w	800e8b2 <_strtod_l+0xb9a>
 800dddc:	4642      	mov	r2, r8
 800ddde:	464b      	mov	r3, r9
 800dde0:	e7e4      	b.n	800ddac <_strtod_l+0x94>
 800dde2:	2200      	movs	r2, #0
 800dde4:	e7ef      	b.n	800ddc6 <_strtod_l+0xae>
 800dde6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dde8:	b13a      	cbz	r2, 800ddfa <_strtod_l+0xe2>
 800ddea:	2135      	movs	r1, #53	; 0x35
 800ddec:	a81c      	add	r0, sp, #112	; 0x70
 800ddee:	f002 fc15 	bl	801061c <__copybits>
 800ddf2:	4650      	mov	r0, sl
 800ddf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ddf6:	f001 ffdd 	bl	800fdb4 <_Bfree>
 800ddfa:	3e01      	subs	r6, #1
 800ddfc:	2e04      	cmp	r6, #4
 800ddfe:	d806      	bhi.n	800de0e <_strtod_l+0xf6>
 800de00:	e8df f006 	tbb	[pc, r6]
 800de04:	1714030a 	.word	0x1714030a
 800de08:	0a          	.byte	0x0a
 800de09:	00          	.byte	0x00
 800de0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800de0e:	0721      	lsls	r1, r4, #28
 800de10:	d5c3      	bpl.n	800dd9a <_strtod_l+0x82>
 800de12:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800de16:	e7c0      	b.n	800dd9a <_strtod_l+0x82>
 800de18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de1a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800de1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800de22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800de26:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800de2a:	e7f0      	b.n	800de0e <_strtod_l+0xf6>
 800de2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dfa8 <_strtod_l+0x290>
 800de30:	e7ed      	b.n	800de0e <_strtod_l+0xf6>
 800de32:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800de36:	f04f 38ff 	mov.w	r8, #4294967295
 800de3a:	e7e8      	b.n	800de0e <_strtod_l+0xf6>
 800de3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de3e:	1c5a      	adds	r2, r3, #1
 800de40:	9219      	str	r2, [sp, #100]	; 0x64
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	2b30      	cmp	r3, #48	; 0x30
 800de46:	d0f9      	beq.n	800de3c <_strtod_l+0x124>
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d0a6      	beq.n	800dd9a <_strtod_l+0x82>
 800de4c:	2301      	movs	r3, #1
 800de4e:	9307      	str	r3, [sp, #28]
 800de50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de52:	220a      	movs	r2, #10
 800de54:	9308      	str	r3, [sp, #32]
 800de56:	2300      	movs	r3, #0
 800de58:	469b      	mov	fp, r3
 800de5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800de5e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800de60:	7805      	ldrb	r5, [r0, #0]
 800de62:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800de66:	b2d9      	uxtb	r1, r3
 800de68:	2909      	cmp	r1, #9
 800de6a:	d927      	bls.n	800debc <_strtod_l+0x1a4>
 800de6c:	4622      	mov	r2, r4
 800de6e:	4639      	mov	r1, r7
 800de70:	f7ff ff1c 	bl	800dcac <strncmp>
 800de74:	2800      	cmp	r0, #0
 800de76:	d033      	beq.n	800dee0 <_strtod_l+0x1c8>
 800de78:	2000      	movs	r0, #0
 800de7a:	462a      	mov	r2, r5
 800de7c:	465c      	mov	r4, fp
 800de7e:	4603      	mov	r3, r0
 800de80:	9004      	str	r0, [sp, #16]
 800de82:	2a65      	cmp	r2, #101	; 0x65
 800de84:	d001      	beq.n	800de8a <_strtod_l+0x172>
 800de86:	2a45      	cmp	r2, #69	; 0x45
 800de88:	d114      	bne.n	800deb4 <_strtod_l+0x19c>
 800de8a:	b91c      	cbnz	r4, 800de94 <_strtod_l+0x17c>
 800de8c:	9a07      	ldr	r2, [sp, #28]
 800de8e:	4302      	orrs	r2, r0
 800de90:	d09f      	beq.n	800ddd2 <_strtod_l+0xba>
 800de92:	2400      	movs	r4, #0
 800de94:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800de96:	1c72      	adds	r2, r6, #1
 800de98:	9219      	str	r2, [sp, #100]	; 0x64
 800de9a:	7872      	ldrb	r2, [r6, #1]
 800de9c:	2a2b      	cmp	r2, #43	; 0x2b
 800de9e:	d079      	beq.n	800df94 <_strtod_l+0x27c>
 800dea0:	2a2d      	cmp	r2, #45	; 0x2d
 800dea2:	f000 8083 	beq.w	800dfac <_strtod_l+0x294>
 800dea6:	2700      	movs	r7, #0
 800dea8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800deac:	2909      	cmp	r1, #9
 800deae:	f240 8083 	bls.w	800dfb8 <_strtod_l+0x2a0>
 800deb2:	9619      	str	r6, [sp, #100]	; 0x64
 800deb4:	2500      	movs	r5, #0
 800deb6:	e09f      	b.n	800dff8 <_strtod_l+0x2e0>
 800deb8:	2300      	movs	r3, #0
 800deba:	e7c8      	b.n	800de4e <_strtod_l+0x136>
 800debc:	f1bb 0f08 	cmp.w	fp, #8
 800dec0:	bfd5      	itete	le
 800dec2:	9906      	ldrle	r1, [sp, #24]
 800dec4:	9905      	ldrgt	r1, [sp, #20]
 800dec6:	fb02 3301 	mlale	r3, r2, r1, r3
 800deca:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dece:	f100 0001 	add.w	r0, r0, #1
 800ded2:	bfd4      	ite	le
 800ded4:	9306      	strle	r3, [sp, #24]
 800ded6:	9305      	strgt	r3, [sp, #20]
 800ded8:	f10b 0b01 	add.w	fp, fp, #1
 800dedc:	9019      	str	r0, [sp, #100]	; 0x64
 800dede:	e7be      	b.n	800de5e <_strtod_l+0x146>
 800dee0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dee2:	191a      	adds	r2, r3, r4
 800dee4:	9219      	str	r2, [sp, #100]	; 0x64
 800dee6:	5d1a      	ldrb	r2, [r3, r4]
 800dee8:	f1bb 0f00 	cmp.w	fp, #0
 800deec:	d036      	beq.n	800df5c <_strtod_l+0x244>
 800deee:	465c      	mov	r4, fp
 800def0:	9004      	str	r0, [sp, #16]
 800def2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800def6:	2b09      	cmp	r3, #9
 800def8:	d912      	bls.n	800df20 <_strtod_l+0x208>
 800defa:	2301      	movs	r3, #1
 800defc:	e7c1      	b.n	800de82 <_strtod_l+0x16a>
 800defe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df00:	3001      	adds	r0, #1
 800df02:	1c5a      	adds	r2, r3, #1
 800df04:	9219      	str	r2, [sp, #100]	; 0x64
 800df06:	785a      	ldrb	r2, [r3, #1]
 800df08:	2a30      	cmp	r2, #48	; 0x30
 800df0a:	d0f8      	beq.n	800defe <_strtod_l+0x1e6>
 800df0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800df10:	2b08      	cmp	r3, #8
 800df12:	f200 84d5 	bhi.w	800e8c0 <_strtod_l+0xba8>
 800df16:	9004      	str	r0, [sp, #16]
 800df18:	2000      	movs	r0, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df1e:	9308      	str	r3, [sp, #32]
 800df20:	3a30      	subs	r2, #48	; 0x30
 800df22:	f100 0301 	add.w	r3, r0, #1
 800df26:	d013      	beq.n	800df50 <_strtod_l+0x238>
 800df28:	9904      	ldr	r1, [sp, #16]
 800df2a:	1905      	adds	r5, r0, r4
 800df2c:	4419      	add	r1, r3
 800df2e:	9104      	str	r1, [sp, #16]
 800df30:	4623      	mov	r3, r4
 800df32:	210a      	movs	r1, #10
 800df34:	42ab      	cmp	r3, r5
 800df36:	d113      	bne.n	800df60 <_strtod_l+0x248>
 800df38:	1823      	adds	r3, r4, r0
 800df3a:	2b08      	cmp	r3, #8
 800df3c:	f104 0401 	add.w	r4, r4, #1
 800df40:	4404      	add	r4, r0
 800df42:	dc1b      	bgt.n	800df7c <_strtod_l+0x264>
 800df44:	230a      	movs	r3, #10
 800df46:	9906      	ldr	r1, [sp, #24]
 800df48:	fb03 2301 	mla	r3, r3, r1, r2
 800df4c:	9306      	str	r3, [sp, #24]
 800df4e:	2300      	movs	r3, #0
 800df50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800df52:	4618      	mov	r0, r3
 800df54:	1c51      	adds	r1, r2, #1
 800df56:	9119      	str	r1, [sp, #100]	; 0x64
 800df58:	7852      	ldrb	r2, [r2, #1]
 800df5a:	e7ca      	b.n	800def2 <_strtod_l+0x1da>
 800df5c:	4658      	mov	r0, fp
 800df5e:	e7d3      	b.n	800df08 <_strtod_l+0x1f0>
 800df60:	2b08      	cmp	r3, #8
 800df62:	dc04      	bgt.n	800df6e <_strtod_l+0x256>
 800df64:	9f06      	ldr	r7, [sp, #24]
 800df66:	434f      	muls	r7, r1
 800df68:	9706      	str	r7, [sp, #24]
 800df6a:	3301      	adds	r3, #1
 800df6c:	e7e2      	b.n	800df34 <_strtod_l+0x21c>
 800df6e:	1c5f      	adds	r7, r3, #1
 800df70:	2f10      	cmp	r7, #16
 800df72:	bfde      	ittt	le
 800df74:	9f05      	ldrle	r7, [sp, #20]
 800df76:	434f      	mulle	r7, r1
 800df78:	9705      	strle	r7, [sp, #20]
 800df7a:	e7f6      	b.n	800df6a <_strtod_l+0x252>
 800df7c:	2c10      	cmp	r4, #16
 800df7e:	bfdf      	itttt	le
 800df80:	230a      	movle	r3, #10
 800df82:	9905      	ldrle	r1, [sp, #20]
 800df84:	fb03 2301 	mlale	r3, r3, r1, r2
 800df88:	9305      	strle	r3, [sp, #20]
 800df8a:	e7e0      	b.n	800df4e <_strtod_l+0x236>
 800df8c:	2300      	movs	r3, #0
 800df8e:	9304      	str	r3, [sp, #16]
 800df90:	2301      	movs	r3, #1
 800df92:	e77b      	b.n	800de8c <_strtod_l+0x174>
 800df94:	2700      	movs	r7, #0
 800df96:	1cb2      	adds	r2, r6, #2
 800df98:	9219      	str	r2, [sp, #100]	; 0x64
 800df9a:	78b2      	ldrb	r2, [r6, #2]
 800df9c:	e784      	b.n	800dea8 <_strtod_l+0x190>
 800df9e:	bf00      	nop
 800dfa0:	08011be0 	.word	0x08011be0
 800dfa4:	08011a94 	.word	0x08011a94
 800dfa8:	7ff00000 	.word	0x7ff00000
 800dfac:	2701      	movs	r7, #1
 800dfae:	e7f2      	b.n	800df96 <_strtod_l+0x27e>
 800dfb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfb2:	1c51      	adds	r1, r2, #1
 800dfb4:	9119      	str	r1, [sp, #100]	; 0x64
 800dfb6:	7852      	ldrb	r2, [r2, #1]
 800dfb8:	2a30      	cmp	r2, #48	; 0x30
 800dfba:	d0f9      	beq.n	800dfb0 <_strtod_l+0x298>
 800dfbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dfc0:	2908      	cmp	r1, #8
 800dfc2:	f63f af77 	bhi.w	800deb4 <_strtod_l+0x19c>
 800dfc6:	f04f 0e0a 	mov.w	lr, #10
 800dfca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dfce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfd0:	9209      	str	r2, [sp, #36]	; 0x24
 800dfd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfd4:	1c51      	adds	r1, r2, #1
 800dfd6:	9119      	str	r1, [sp, #100]	; 0x64
 800dfd8:	7852      	ldrb	r2, [r2, #1]
 800dfda:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dfde:	2d09      	cmp	r5, #9
 800dfe0:	d935      	bls.n	800e04e <_strtod_l+0x336>
 800dfe2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dfe4:	1b49      	subs	r1, r1, r5
 800dfe6:	2908      	cmp	r1, #8
 800dfe8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dfec:	dc02      	bgt.n	800dff4 <_strtod_l+0x2dc>
 800dfee:	4565      	cmp	r5, ip
 800dff0:	bfa8      	it	ge
 800dff2:	4665      	movge	r5, ip
 800dff4:	b107      	cbz	r7, 800dff8 <_strtod_l+0x2e0>
 800dff6:	426d      	negs	r5, r5
 800dff8:	2c00      	cmp	r4, #0
 800dffa:	d14c      	bne.n	800e096 <_strtod_l+0x37e>
 800dffc:	9907      	ldr	r1, [sp, #28]
 800dffe:	4301      	orrs	r1, r0
 800e000:	f47f aecb 	bne.w	800dd9a <_strtod_l+0x82>
 800e004:	2b00      	cmp	r3, #0
 800e006:	f47f aee4 	bne.w	800ddd2 <_strtod_l+0xba>
 800e00a:	2a69      	cmp	r2, #105	; 0x69
 800e00c:	d026      	beq.n	800e05c <_strtod_l+0x344>
 800e00e:	dc23      	bgt.n	800e058 <_strtod_l+0x340>
 800e010:	2a49      	cmp	r2, #73	; 0x49
 800e012:	d023      	beq.n	800e05c <_strtod_l+0x344>
 800e014:	2a4e      	cmp	r2, #78	; 0x4e
 800e016:	f47f aedc 	bne.w	800ddd2 <_strtod_l+0xba>
 800e01a:	499d      	ldr	r1, [pc, #628]	; (800e290 <_strtod_l+0x578>)
 800e01c:	a819      	add	r0, sp, #100	; 0x64
 800e01e:	f001 fd9f 	bl	800fb60 <__match>
 800e022:	2800      	cmp	r0, #0
 800e024:	f43f aed5 	beq.w	800ddd2 <_strtod_l+0xba>
 800e028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b28      	cmp	r3, #40	; 0x28
 800e02e:	d12c      	bne.n	800e08a <_strtod_l+0x372>
 800e030:	4998      	ldr	r1, [pc, #608]	; (800e294 <_strtod_l+0x57c>)
 800e032:	aa1c      	add	r2, sp, #112	; 0x70
 800e034:	a819      	add	r0, sp, #100	; 0x64
 800e036:	f001 fda7 	bl	800fb88 <__hexnan>
 800e03a:	2805      	cmp	r0, #5
 800e03c:	d125      	bne.n	800e08a <_strtod_l+0x372>
 800e03e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e040:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e044:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e048:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e04c:	e6a5      	b.n	800dd9a <_strtod_l+0x82>
 800e04e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e052:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e056:	e7bc      	b.n	800dfd2 <_strtod_l+0x2ba>
 800e058:	2a6e      	cmp	r2, #110	; 0x6e
 800e05a:	e7dc      	b.n	800e016 <_strtod_l+0x2fe>
 800e05c:	498e      	ldr	r1, [pc, #568]	; (800e298 <_strtod_l+0x580>)
 800e05e:	a819      	add	r0, sp, #100	; 0x64
 800e060:	f001 fd7e 	bl	800fb60 <__match>
 800e064:	2800      	cmp	r0, #0
 800e066:	f43f aeb4 	beq.w	800ddd2 <_strtod_l+0xba>
 800e06a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e06c:	498b      	ldr	r1, [pc, #556]	; (800e29c <_strtod_l+0x584>)
 800e06e:	3b01      	subs	r3, #1
 800e070:	a819      	add	r0, sp, #100	; 0x64
 800e072:	9319      	str	r3, [sp, #100]	; 0x64
 800e074:	f001 fd74 	bl	800fb60 <__match>
 800e078:	b910      	cbnz	r0, 800e080 <_strtod_l+0x368>
 800e07a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e07c:	3301      	adds	r3, #1
 800e07e:	9319      	str	r3, [sp, #100]	; 0x64
 800e080:	f04f 0800 	mov.w	r8, #0
 800e084:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e2a0 <_strtod_l+0x588>
 800e088:	e687      	b.n	800dd9a <_strtod_l+0x82>
 800e08a:	4886      	ldr	r0, [pc, #536]	; (800e2a4 <_strtod_l+0x58c>)
 800e08c:	f002 fd56 	bl	8010b3c <nan>
 800e090:	4680      	mov	r8, r0
 800e092:	4689      	mov	r9, r1
 800e094:	e681      	b.n	800dd9a <_strtod_l+0x82>
 800e096:	9b04      	ldr	r3, [sp, #16]
 800e098:	f1bb 0f00 	cmp.w	fp, #0
 800e09c:	bf08      	it	eq
 800e09e:	46a3      	moveq	fp, r4
 800e0a0:	1aeb      	subs	r3, r5, r3
 800e0a2:	2c10      	cmp	r4, #16
 800e0a4:	9806      	ldr	r0, [sp, #24]
 800e0a6:	4626      	mov	r6, r4
 800e0a8:	9307      	str	r3, [sp, #28]
 800e0aa:	bfa8      	it	ge
 800e0ac:	2610      	movge	r6, #16
 800e0ae:	f7f2 f9b1 	bl	8000414 <__aeabi_ui2d>
 800e0b2:	2c09      	cmp	r4, #9
 800e0b4:	4680      	mov	r8, r0
 800e0b6:	4689      	mov	r9, r1
 800e0b8:	dd13      	ble.n	800e0e2 <_strtod_l+0x3ca>
 800e0ba:	4b7b      	ldr	r3, [pc, #492]	; (800e2a8 <_strtod_l+0x590>)
 800e0bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e0c4:	f7f2 fa20 	bl	8000508 <__aeabi_dmul>
 800e0c8:	4680      	mov	r8, r0
 800e0ca:	9805      	ldr	r0, [sp, #20]
 800e0cc:	4689      	mov	r9, r1
 800e0ce:	f7f2 f9a1 	bl	8000414 <__aeabi_ui2d>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	4649      	mov	r1, r9
 800e0da:	f7f2 f85f 	bl	800019c <__adddf3>
 800e0de:	4680      	mov	r8, r0
 800e0e0:	4689      	mov	r9, r1
 800e0e2:	2c0f      	cmp	r4, #15
 800e0e4:	dc36      	bgt.n	800e154 <_strtod_l+0x43c>
 800e0e6:	9b07      	ldr	r3, [sp, #28]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f43f ae56 	beq.w	800dd9a <_strtod_l+0x82>
 800e0ee:	dd22      	ble.n	800e136 <_strtod_l+0x41e>
 800e0f0:	2b16      	cmp	r3, #22
 800e0f2:	dc09      	bgt.n	800e108 <_strtod_l+0x3f0>
 800e0f4:	496c      	ldr	r1, [pc, #432]	; (800e2a8 <_strtod_l+0x590>)
 800e0f6:	4642      	mov	r2, r8
 800e0f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0fc:	464b      	mov	r3, r9
 800e0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e102:	f7f2 fa01 	bl	8000508 <__aeabi_dmul>
 800e106:	e7c3      	b.n	800e090 <_strtod_l+0x378>
 800e108:	9a07      	ldr	r2, [sp, #28]
 800e10a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e10e:	4293      	cmp	r3, r2
 800e110:	db20      	blt.n	800e154 <_strtod_l+0x43c>
 800e112:	4d65      	ldr	r5, [pc, #404]	; (800e2a8 <_strtod_l+0x590>)
 800e114:	f1c4 040f 	rsb	r4, r4, #15
 800e118:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e11c:	4642      	mov	r2, r8
 800e11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e122:	464b      	mov	r3, r9
 800e124:	f7f2 f9f0 	bl	8000508 <__aeabi_dmul>
 800e128:	9b07      	ldr	r3, [sp, #28]
 800e12a:	1b1c      	subs	r4, r3, r4
 800e12c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e130:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e134:	e7e5      	b.n	800e102 <_strtod_l+0x3ea>
 800e136:	9b07      	ldr	r3, [sp, #28]
 800e138:	3316      	adds	r3, #22
 800e13a:	db0b      	blt.n	800e154 <_strtod_l+0x43c>
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	4640      	mov	r0, r8
 800e140:	1b5d      	subs	r5, r3, r5
 800e142:	4b59      	ldr	r3, [pc, #356]	; (800e2a8 <_strtod_l+0x590>)
 800e144:	4649      	mov	r1, r9
 800e146:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e14a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e14e:	f7f2 fb05 	bl	800075c <__aeabi_ddiv>
 800e152:	e79d      	b.n	800e090 <_strtod_l+0x378>
 800e154:	9b07      	ldr	r3, [sp, #28]
 800e156:	1ba6      	subs	r6, r4, r6
 800e158:	441e      	add	r6, r3
 800e15a:	2e00      	cmp	r6, #0
 800e15c:	dd74      	ble.n	800e248 <_strtod_l+0x530>
 800e15e:	f016 030f 	ands.w	r3, r6, #15
 800e162:	d00a      	beq.n	800e17a <_strtod_l+0x462>
 800e164:	4950      	ldr	r1, [pc, #320]	; (800e2a8 <_strtod_l+0x590>)
 800e166:	4642      	mov	r2, r8
 800e168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e170:	464b      	mov	r3, r9
 800e172:	f7f2 f9c9 	bl	8000508 <__aeabi_dmul>
 800e176:	4680      	mov	r8, r0
 800e178:	4689      	mov	r9, r1
 800e17a:	f036 060f 	bics.w	r6, r6, #15
 800e17e:	d052      	beq.n	800e226 <_strtod_l+0x50e>
 800e180:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e184:	dd27      	ble.n	800e1d6 <_strtod_l+0x4be>
 800e186:	f04f 0b00 	mov.w	fp, #0
 800e18a:	f8cd b010 	str.w	fp, [sp, #16]
 800e18e:	f8cd b020 	str.w	fp, [sp, #32]
 800e192:	f8cd b018 	str.w	fp, [sp, #24]
 800e196:	2322      	movs	r3, #34	; 0x22
 800e198:	f04f 0800 	mov.w	r8, #0
 800e19c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e2a0 <_strtod_l+0x588>
 800e1a0:	f8ca 3000 	str.w	r3, [sl]
 800e1a4:	9b08      	ldr	r3, [sp, #32]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f43f adf7 	beq.w	800dd9a <_strtod_l+0x82>
 800e1ac:	4650      	mov	r0, sl
 800e1ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e1b0:	f001 fe00 	bl	800fdb4 <_Bfree>
 800e1b4:	4650      	mov	r0, sl
 800e1b6:	9906      	ldr	r1, [sp, #24]
 800e1b8:	f001 fdfc 	bl	800fdb4 <_Bfree>
 800e1bc:	4650      	mov	r0, sl
 800e1be:	9904      	ldr	r1, [sp, #16]
 800e1c0:	f001 fdf8 	bl	800fdb4 <_Bfree>
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	9908      	ldr	r1, [sp, #32]
 800e1c8:	f001 fdf4 	bl	800fdb4 <_Bfree>
 800e1cc:	4659      	mov	r1, fp
 800e1ce:	4650      	mov	r0, sl
 800e1d0:	f001 fdf0 	bl	800fdb4 <_Bfree>
 800e1d4:	e5e1      	b.n	800dd9a <_strtod_l+0x82>
 800e1d6:	4b35      	ldr	r3, [pc, #212]	; (800e2ac <_strtod_l+0x594>)
 800e1d8:	4640      	mov	r0, r8
 800e1da:	9305      	str	r3, [sp, #20]
 800e1dc:	2300      	movs	r3, #0
 800e1de:	4649      	mov	r1, r9
 800e1e0:	461f      	mov	r7, r3
 800e1e2:	1136      	asrs	r6, r6, #4
 800e1e4:	2e01      	cmp	r6, #1
 800e1e6:	dc21      	bgt.n	800e22c <_strtod_l+0x514>
 800e1e8:	b10b      	cbz	r3, 800e1ee <_strtod_l+0x4d6>
 800e1ea:	4680      	mov	r8, r0
 800e1ec:	4689      	mov	r9, r1
 800e1ee:	4b2f      	ldr	r3, [pc, #188]	; (800e2ac <_strtod_l+0x594>)
 800e1f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e1f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e1f8:	4642      	mov	r2, r8
 800e1fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e1fe:	464b      	mov	r3, r9
 800e200:	f7f2 f982 	bl	8000508 <__aeabi_dmul>
 800e204:	4b26      	ldr	r3, [pc, #152]	; (800e2a0 <_strtod_l+0x588>)
 800e206:	460a      	mov	r2, r1
 800e208:	400b      	ands	r3, r1
 800e20a:	4929      	ldr	r1, [pc, #164]	; (800e2b0 <_strtod_l+0x598>)
 800e20c:	4680      	mov	r8, r0
 800e20e:	428b      	cmp	r3, r1
 800e210:	d8b9      	bhi.n	800e186 <_strtod_l+0x46e>
 800e212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e216:	428b      	cmp	r3, r1
 800e218:	bf86      	itte	hi
 800e21a:	f04f 38ff 	movhi.w	r8, #4294967295
 800e21e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e2b4 <_strtod_l+0x59c>
 800e222:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e226:	2300      	movs	r3, #0
 800e228:	9305      	str	r3, [sp, #20]
 800e22a:	e07f      	b.n	800e32c <_strtod_l+0x614>
 800e22c:	07f2      	lsls	r2, r6, #31
 800e22e:	d505      	bpl.n	800e23c <_strtod_l+0x524>
 800e230:	9b05      	ldr	r3, [sp, #20]
 800e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e236:	f7f2 f967 	bl	8000508 <__aeabi_dmul>
 800e23a:	2301      	movs	r3, #1
 800e23c:	9a05      	ldr	r2, [sp, #20]
 800e23e:	3701      	adds	r7, #1
 800e240:	3208      	adds	r2, #8
 800e242:	1076      	asrs	r6, r6, #1
 800e244:	9205      	str	r2, [sp, #20]
 800e246:	e7cd      	b.n	800e1e4 <_strtod_l+0x4cc>
 800e248:	d0ed      	beq.n	800e226 <_strtod_l+0x50e>
 800e24a:	4276      	negs	r6, r6
 800e24c:	f016 020f 	ands.w	r2, r6, #15
 800e250:	d00a      	beq.n	800e268 <_strtod_l+0x550>
 800e252:	4b15      	ldr	r3, [pc, #84]	; (800e2a8 <_strtod_l+0x590>)
 800e254:	4640      	mov	r0, r8
 800e256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e25a:	4649      	mov	r1, r9
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f2 fa7c 	bl	800075c <__aeabi_ddiv>
 800e264:	4680      	mov	r8, r0
 800e266:	4689      	mov	r9, r1
 800e268:	1136      	asrs	r6, r6, #4
 800e26a:	d0dc      	beq.n	800e226 <_strtod_l+0x50e>
 800e26c:	2e1f      	cmp	r6, #31
 800e26e:	dd23      	ble.n	800e2b8 <_strtod_l+0x5a0>
 800e270:	f04f 0b00 	mov.w	fp, #0
 800e274:	f8cd b010 	str.w	fp, [sp, #16]
 800e278:	f8cd b020 	str.w	fp, [sp, #32]
 800e27c:	f8cd b018 	str.w	fp, [sp, #24]
 800e280:	2322      	movs	r3, #34	; 0x22
 800e282:	f04f 0800 	mov.w	r8, #0
 800e286:	f04f 0900 	mov.w	r9, #0
 800e28a:	f8ca 3000 	str.w	r3, [sl]
 800e28e:	e789      	b.n	800e1a4 <_strtod_l+0x48c>
 800e290:	08011a6d 	.word	0x08011a6d
 800e294:	08011aa8 	.word	0x08011aa8
 800e298:	08011a65 	.word	0x08011a65
 800e29c:	08011aeb 	.word	0x08011aeb
 800e2a0:	7ff00000 	.word	0x7ff00000
 800e2a4:	08011d98 	.word	0x08011d98
 800e2a8:	08011c78 	.word	0x08011c78
 800e2ac:	08011c50 	.word	0x08011c50
 800e2b0:	7ca00000 	.word	0x7ca00000
 800e2b4:	7fefffff 	.word	0x7fefffff
 800e2b8:	f016 0310 	ands.w	r3, r6, #16
 800e2bc:	bf18      	it	ne
 800e2be:	236a      	movne	r3, #106	; 0x6a
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	9305      	str	r3, [sp, #20]
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	4fb0      	ldr	r7, [pc, #704]	; (800e58c <_strtod_l+0x874>)
 800e2ca:	07f2      	lsls	r2, r6, #31
 800e2cc:	d504      	bpl.n	800e2d8 <_strtod_l+0x5c0>
 800e2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2d2:	f7f2 f919 	bl	8000508 <__aeabi_dmul>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	1076      	asrs	r6, r6, #1
 800e2da:	f107 0708 	add.w	r7, r7, #8
 800e2de:	d1f4      	bne.n	800e2ca <_strtod_l+0x5b2>
 800e2e0:	b10b      	cbz	r3, 800e2e6 <_strtod_l+0x5ce>
 800e2e2:	4680      	mov	r8, r0
 800e2e4:	4689      	mov	r9, r1
 800e2e6:	9b05      	ldr	r3, [sp, #20]
 800e2e8:	b1c3      	cbz	r3, 800e31c <_strtod_l+0x604>
 800e2ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e2ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	4649      	mov	r1, r9
 800e2f6:	dd11      	ble.n	800e31c <_strtod_l+0x604>
 800e2f8:	2b1f      	cmp	r3, #31
 800e2fa:	f340 8127 	ble.w	800e54c <_strtod_l+0x834>
 800e2fe:	2b34      	cmp	r3, #52	; 0x34
 800e300:	bfd8      	it	le
 800e302:	f04f 33ff 	movle.w	r3, #4294967295
 800e306:	f04f 0800 	mov.w	r8, #0
 800e30a:	bfcf      	iteee	gt
 800e30c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e310:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e314:	fa03 f202 	lslle.w	r2, r3, r2
 800e318:	ea02 0901 	andle.w	r9, r2, r1
 800e31c:	2200      	movs	r2, #0
 800e31e:	2300      	movs	r3, #0
 800e320:	4640      	mov	r0, r8
 800e322:	4649      	mov	r1, r9
 800e324:	f7f2 fb58 	bl	80009d8 <__aeabi_dcmpeq>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d1a1      	bne.n	800e270 <_strtod_l+0x558>
 800e32c:	9b06      	ldr	r3, [sp, #24]
 800e32e:	465a      	mov	r2, fp
 800e330:	9300      	str	r3, [sp, #0]
 800e332:	4650      	mov	r0, sl
 800e334:	4623      	mov	r3, r4
 800e336:	9908      	ldr	r1, [sp, #32]
 800e338:	f001 fda4 	bl	800fe84 <__s2b>
 800e33c:	9008      	str	r0, [sp, #32]
 800e33e:	2800      	cmp	r0, #0
 800e340:	f43f af21 	beq.w	800e186 <_strtod_l+0x46e>
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	f04f 0b00 	mov.w	fp, #0
 800e34a:	1b5d      	subs	r5, r3, r5
 800e34c:	9b07      	ldr	r3, [sp, #28]
 800e34e:	f8cd b010 	str.w	fp, [sp, #16]
 800e352:	2b00      	cmp	r3, #0
 800e354:	bfb4      	ite	lt
 800e356:	462b      	movlt	r3, r5
 800e358:	2300      	movge	r3, #0
 800e35a:	930e      	str	r3, [sp, #56]	; 0x38
 800e35c:	9b07      	ldr	r3, [sp, #28]
 800e35e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e362:	9314      	str	r3, [sp, #80]	; 0x50
 800e364:	9b08      	ldr	r3, [sp, #32]
 800e366:	4650      	mov	r0, sl
 800e368:	6859      	ldr	r1, [r3, #4]
 800e36a:	f001 fce3 	bl	800fd34 <_Balloc>
 800e36e:	9006      	str	r0, [sp, #24]
 800e370:	2800      	cmp	r0, #0
 800e372:	f43f af10 	beq.w	800e196 <_strtod_l+0x47e>
 800e376:	9b08      	ldr	r3, [sp, #32]
 800e378:	300c      	adds	r0, #12
 800e37a:	691a      	ldr	r2, [r3, #16]
 800e37c:	f103 010c 	add.w	r1, r3, #12
 800e380:	3202      	adds	r2, #2
 800e382:	0092      	lsls	r2, r2, #2
 800e384:	f001 fcc8 	bl	800fd18 <memcpy>
 800e388:	ab1c      	add	r3, sp, #112	; 0x70
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	ab1b      	add	r3, sp, #108	; 0x6c
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	4642      	mov	r2, r8
 800e392:	464b      	mov	r3, r9
 800e394:	4650      	mov	r0, sl
 800e396:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e39a:	f002 f8b5 	bl	8010508 <__d2b>
 800e39e:	901a      	str	r0, [sp, #104]	; 0x68
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	f43f aef8 	beq.w	800e196 <_strtod_l+0x47e>
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	f001 fe03 	bl	800ffb4 <__i2b>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	9004      	str	r0, [sp, #16]
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	f43f aeef 	beq.w	800e196 <_strtod_l+0x47e>
 800e3b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e3ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	bfab      	itete	ge
 800e3c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e3c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e3c4:	18ee      	addge	r6, r5, r3
 800e3c6:	1b5c      	sublt	r4, r3, r5
 800e3c8:	9b05      	ldr	r3, [sp, #20]
 800e3ca:	bfa8      	it	ge
 800e3cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e3ce:	eba5 0503 	sub.w	r5, r5, r3
 800e3d2:	4415      	add	r5, r2
 800e3d4:	4b6e      	ldr	r3, [pc, #440]	; (800e590 <_strtod_l+0x878>)
 800e3d6:	f105 35ff 	add.w	r5, r5, #4294967295
 800e3da:	bfb8      	it	lt
 800e3dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e3de:	429d      	cmp	r5, r3
 800e3e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e3e4:	f280 80c4 	bge.w	800e570 <_strtod_l+0x858>
 800e3e8:	1b5b      	subs	r3, r3, r5
 800e3ea:	2b1f      	cmp	r3, #31
 800e3ec:	f04f 0701 	mov.w	r7, #1
 800e3f0:	eba2 0203 	sub.w	r2, r2, r3
 800e3f4:	f300 80b1 	bgt.w	800e55a <_strtod_l+0x842>
 800e3f8:	2500      	movs	r5, #0
 800e3fa:	fa07 f303 	lsl.w	r3, r7, r3
 800e3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800e400:	18b7      	adds	r7, r6, r2
 800e402:	9b05      	ldr	r3, [sp, #20]
 800e404:	42be      	cmp	r6, r7
 800e406:	4414      	add	r4, r2
 800e408:	441c      	add	r4, r3
 800e40a:	4633      	mov	r3, r6
 800e40c:	bfa8      	it	ge
 800e40e:	463b      	movge	r3, r7
 800e410:	42a3      	cmp	r3, r4
 800e412:	bfa8      	it	ge
 800e414:	4623      	movge	r3, r4
 800e416:	2b00      	cmp	r3, #0
 800e418:	bfc2      	ittt	gt
 800e41a:	1aff      	subgt	r7, r7, r3
 800e41c:	1ae4      	subgt	r4, r4, r3
 800e41e:	1af6      	subgt	r6, r6, r3
 800e420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e422:	2b00      	cmp	r3, #0
 800e424:	dd17      	ble.n	800e456 <_strtod_l+0x73e>
 800e426:	461a      	mov	r2, r3
 800e428:	4650      	mov	r0, sl
 800e42a:	9904      	ldr	r1, [sp, #16]
 800e42c:	f001 fe80 	bl	8010130 <__pow5mult>
 800e430:	9004      	str	r0, [sp, #16]
 800e432:	2800      	cmp	r0, #0
 800e434:	f43f aeaf 	beq.w	800e196 <_strtod_l+0x47e>
 800e438:	4601      	mov	r1, r0
 800e43a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e43c:	4650      	mov	r0, sl
 800e43e:	f001 fdcf 	bl	800ffe0 <__multiply>
 800e442:	9009      	str	r0, [sp, #36]	; 0x24
 800e444:	2800      	cmp	r0, #0
 800e446:	f43f aea6 	beq.w	800e196 <_strtod_l+0x47e>
 800e44a:	4650      	mov	r0, sl
 800e44c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e44e:	f001 fcb1 	bl	800fdb4 <_Bfree>
 800e452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e454:	931a      	str	r3, [sp, #104]	; 0x68
 800e456:	2f00      	cmp	r7, #0
 800e458:	f300 808e 	bgt.w	800e578 <_strtod_l+0x860>
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	dd08      	ble.n	800e474 <_strtod_l+0x75c>
 800e462:	4650      	mov	r0, sl
 800e464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e466:	9906      	ldr	r1, [sp, #24]
 800e468:	f001 fe62 	bl	8010130 <__pow5mult>
 800e46c:	9006      	str	r0, [sp, #24]
 800e46e:	2800      	cmp	r0, #0
 800e470:	f43f ae91 	beq.w	800e196 <_strtod_l+0x47e>
 800e474:	2c00      	cmp	r4, #0
 800e476:	dd08      	ble.n	800e48a <_strtod_l+0x772>
 800e478:	4622      	mov	r2, r4
 800e47a:	4650      	mov	r0, sl
 800e47c:	9906      	ldr	r1, [sp, #24]
 800e47e:	f001 feb1 	bl	80101e4 <__lshift>
 800e482:	9006      	str	r0, [sp, #24]
 800e484:	2800      	cmp	r0, #0
 800e486:	f43f ae86 	beq.w	800e196 <_strtod_l+0x47e>
 800e48a:	2e00      	cmp	r6, #0
 800e48c:	dd08      	ble.n	800e4a0 <_strtod_l+0x788>
 800e48e:	4632      	mov	r2, r6
 800e490:	4650      	mov	r0, sl
 800e492:	9904      	ldr	r1, [sp, #16]
 800e494:	f001 fea6 	bl	80101e4 <__lshift>
 800e498:	9004      	str	r0, [sp, #16]
 800e49a:	2800      	cmp	r0, #0
 800e49c:	f43f ae7b 	beq.w	800e196 <_strtod_l+0x47e>
 800e4a0:	4650      	mov	r0, sl
 800e4a2:	9a06      	ldr	r2, [sp, #24]
 800e4a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e4a6:	f001 ff29 	bl	80102fc <__mdiff>
 800e4aa:	4683      	mov	fp, r0
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	f43f ae72 	beq.w	800e196 <_strtod_l+0x47e>
 800e4b2:	2400      	movs	r4, #0
 800e4b4:	68c3      	ldr	r3, [r0, #12]
 800e4b6:	9904      	ldr	r1, [sp, #16]
 800e4b8:	60c4      	str	r4, [r0, #12]
 800e4ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4bc:	f001 ff02 	bl	80102c4 <__mcmp>
 800e4c0:	42a0      	cmp	r0, r4
 800e4c2:	da6b      	bge.n	800e59c <_strtod_l+0x884>
 800e4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c6:	ea53 0308 	orrs.w	r3, r3, r8
 800e4ca:	f040 8091 	bne.w	800e5f0 <_strtod_l+0x8d8>
 800e4ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f040 808c 	bne.w	800e5f0 <_strtod_l+0x8d8>
 800e4d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4dc:	0d1b      	lsrs	r3, r3, #20
 800e4de:	051b      	lsls	r3, r3, #20
 800e4e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e4e4:	f240 8084 	bls.w	800e5f0 <_strtod_l+0x8d8>
 800e4e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e4ec:	b91b      	cbnz	r3, 800e4f6 <_strtod_l+0x7de>
 800e4ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	dd7c      	ble.n	800e5f0 <_strtod_l+0x8d8>
 800e4f6:	4659      	mov	r1, fp
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	f001 fe72 	bl	80101e4 <__lshift>
 800e500:	9904      	ldr	r1, [sp, #16]
 800e502:	4683      	mov	fp, r0
 800e504:	f001 fede 	bl	80102c4 <__mcmp>
 800e508:	2800      	cmp	r0, #0
 800e50a:	dd71      	ble.n	800e5f0 <_strtod_l+0x8d8>
 800e50c:	9905      	ldr	r1, [sp, #20]
 800e50e:	464b      	mov	r3, r9
 800e510:	4a20      	ldr	r2, [pc, #128]	; (800e594 <_strtod_l+0x87c>)
 800e512:	2900      	cmp	r1, #0
 800e514:	f000 808c 	beq.w	800e630 <_strtod_l+0x918>
 800e518:	ea02 0109 	and.w	r1, r2, r9
 800e51c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e520:	f300 8086 	bgt.w	800e630 <_strtod_l+0x918>
 800e524:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e528:	f77f aeaa 	ble.w	800e280 <_strtod_l+0x568>
 800e52c:	4640      	mov	r0, r8
 800e52e:	4649      	mov	r1, r9
 800e530:	4b19      	ldr	r3, [pc, #100]	; (800e598 <_strtod_l+0x880>)
 800e532:	2200      	movs	r2, #0
 800e534:	f7f1 ffe8 	bl	8000508 <__aeabi_dmul>
 800e538:	460b      	mov	r3, r1
 800e53a:	4303      	orrs	r3, r0
 800e53c:	bf08      	it	eq
 800e53e:	2322      	moveq	r3, #34	; 0x22
 800e540:	4680      	mov	r8, r0
 800e542:	4689      	mov	r9, r1
 800e544:	bf08      	it	eq
 800e546:	f8ca 3000 	streq.w	r3, [sl]
 800e54a:	e62f      	b.n	800e1ac <_strtod_l+0x494>
 800e54c:	f04f 32ff 	mov.w	r2, #4294967295
 800e550:	fa02 f303 	lsl.w	r3, r2, r3
 800e554:	ea03 0808 	and.w	r8, r3, r8
 800e558:	e6e0      	b.n	800e31c <_strtod_l+0x604>
 800e55a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e55e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e562:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e566:	35e2      	adds	r5, #226	; 0xe2
 800e568:	fa07 f505 	lsl.w	r5, r7, r5
 800e56c:	970f      	str	r7, [sp, #60]	; 0x3c
 800e56e:	e747      	b.n	800e400 <_strtod_l+0x6e8>
 800e570:	2301      	movs	r3, #1
 800e572:	2500      	movs	r5, #0
 800e574:	930f      	str	r3, [sp, #60]	; 0x3c
 800e576:	e743      	b.n	800e400 <_strtod_l+0x6e8>
 800e578:	463a      	mov	r2, r7
 800e57a:	4650      	mov	r0, sl
 800e57c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e57e:	f001 fe31 	bl	80101e4 <__lshift>
 800e582:	901a      	str	r0, [sp, #104]	; 0x68
 800e584:	2800      	cmp	r0, #0
 800e586:	f47f af69 	bne.w	800e45c <_strtod_l+0x744>
 800e58a:	e604      	b.n	800e196 <_strtod_l+0x47e>
 800e58c:	08011ac0 	.word	0x08011ac0
 800e590:	fffffc02 	.word	0xfffffc02
 800e594:	7ff00000 	.word	0x7ff00000
 800e598:	39500000 	.word	0x39500000
 800e59c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e5a0:	d165      	bne.n	800e66e <_strtod_l+0x956>
 800e5a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5a8:	b35a      	cbz	r2, 800e602 <_strtod_l+0x8ea>
 800e5aa:	4a99      	ldr	r2, [pc, #612]	; (800e810 <_strtod_l+0xaf8>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d12b      	bne.n	800e608 <_strtod_l+0x8f0>
 800e5b0:	9b05      	ldr	r3, [sp, #20]
 800e5b2:	4641      	mov	r1, r8
 800e5b4:	b303      	cbz	r3, 800e5f8 <_strtod_l+0x8e0>
 800e5b6:	464a      	mov	r2, r9
 800e5b8:	4b96      	ldr	r3, [pc, #600]	; (800e814 <_strtod_l+0xafc>)
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c4:	d81b      	bhi.n	800e5fe <_strtod_l+0x8e6>
 800e5c6:	0d1b      	lsrs	r3, r3, #20
 800e5c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e5d0:	4299      	cmp	r1, r3
 800e5d2:	d119      	bne.n	800e608 <_strtod_l+0x8f0>
 800e5d4:	4b90      	ldr	r3, [pc, #576]	; (800e818 <_strtod_l+0xb00>)
 800e5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d102      	bne.n	800e5e2 <_strtod_l+0x8ca>
 800e5dc:	3101      	adds	r1, #1
 800e5de:	f43f adda 	beq.w	800e196 <_strtod_l+0x47e>
 800e5e2:	f04f 0800 	mov.w	r8, #0
 800e5e6:	4b8b      	ldr	r3, [pc, #556]	; (800e814 <_strtod_l+0xafc>)
 800e5e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ea:	401a      	ands	r2, r3
 800e5ec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e5f0:	9b05      	ldr	r3, [sp, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d19a      	bne.n	800e52c <_strtod_l+0x814>
 800e5f6:	e5d9      	b.n	800e1ac <_strtod_l+0x494>
 800e5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5fc:	e7e8      	b.n	800e5d0 <_strtod_l+0x8b8>
 800e5fe:	4613      	mov	r3, r2
 800e600:	e7e6      	b.n	800e5d0 <_strtod_l+0x8b8>
 800e602:	ea53 0308 	orrs.w	r3, r3, r8
 800e606:	d081      	beq.n	800e50c <_strtod_l+0x7f4>
 800e608:	b1e5      	cbz	r5, 800e644 <_strtod_l+0x92c>
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	421d      	tst	r5, r3
 800e60e:	d0ef      	beq.n	800e5f0 <_strtod_l+0x8d8>
 800e610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e612:	4640      	mov	r0, r8
 800e614:	4649      	mov	r1, r9
 800e616:	9a05      	ldr	r2, [sp, #20]
 800e618:	b1c3      	cbz	r3, 800e64c <_strtod_l+0x934>
 800e61a:	f7ff fb5b 	bl	800dcd4 <sulp>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e626:	f7f1 fdb9 	bl	800019c <__adddf3>
 800e62a:	4680      	mov	r8, r0
 800e62c:	4689      	mov	r9, r1
 800e62e:	e7df      	b.n	800e5f0 <_strtod_l+0x8d8>
 800e630:	4013      	ands	r3, r2
 800e632:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e636:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e63a:	f04f 38ff 	mov.w	r8, #4294967295
 800e63e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e642:	e7d5      	b.n	800e5f0 <_strtod_l+0x8d8>
 800e644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e646:	ea13 0f08 	tst.w	r3, r8
 800e64a:	e7e0      	b.n	800e60e <_strtod_l+0x8f6>
 800e64c:	f7ff fb42 	bl	800dcd4 <sulp>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e658:	f7f1 fd9e 	bl	8000198 <__aeabi_dsub>
 800e65c:	2200      	movs	r2, #0
 800e65e:	2300      	movs	r3, #0
 800e660:	4680      	mov	r8, r0
 800e662:	4689      	mov	r9, r1
 800e664:	f7f2 f9b8 	bl	80009d8 <__aeabi_dcmpeq>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d0c1      	beq.n	800e5f0 <_strtod_l+0x8d8>
 800e66c:	e608      	b.n	800e280 <_strtod_l+0x568>
 800e66e:	4658      	mov	r0, fp
 800e670:	9904      	ldr	r1, [sp, #16]
 800e672:	f001 ffa5 	bl	80105c0 <__ratio>
 800e676:	2200      	movs	r2, #0
 800e678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e67c:	4606      	mov	r6, r0
 800e67e:	460f      	mov	r7, r1
 800e680:	f7f2 f9be 	bl	8000a00 <__aeabi_dcmple>
 800e684:	2800      	cmp	r0, #0
 800e686:	d070      	beq.n	800e76a <_strtod_l+0xa52>
 800e688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d042      	beq.n	800e714 <_strtod_l+0x9fc>
 800e68e:	2600      	movs	r6, #0
 800e690:	4f62      	ldr	r7, [pc, #392]	; (800e81c <_strtod_l+0xb04>)
 800e692:	4d62      	ldr	r5, [pc, #392]	; (800e81c <_strtod_l+0xb04>)
 800e694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e69a:	0d1b      	lsrs	r3, r3, #20
 800e69c:	051b      	lsls	r3, r3, #20
 800e69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6a2:	4b5f      	ldr	r3, [pc, #380]	; (800e820 <_strtod_l+0xb08>)
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	f040 80c3 	bne.w	800e830 <_strtod_l+0xb18>
 800e6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e6b2:	4649      	mov	r1, r9
 800e6b4:	f001 feae 	bl	8010414 <__ulp>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	4630      	mov	r0, r6
 800e6be:	4639      	mov	r1, r7
 800e6c0:	f7f1 ff22 	bl	8000508 <__aeabi_dmul>
 800e6c4:	4642      	mov	r2, r8
 800e6c6:	464b      	mov	r3, r9
 800e6c8:	f7f1 fd68 	bl	800019c <__adddf3>
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	4951      	ldr	r1, [pc, #324]	; (800e814 <_strtod_l+0xafc>)
 800e6d0:	4a54      	ldr	r2, [pc, #336]	; (800e824 <_strtod_l+0xb0c>)
 800e6d2:	4019      	ands	r1, r3
 800e6d4:	4291      	cmp	r1, r2
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	d95d      	bls.n	800e796 <_strtod_l+0xa7e>
 800e6da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6dc:	4b4e      	ldr	r3, [pc, #312]	; (800e818 <_strtod_l+0xb00>)
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d103      	bne.n	800e6ea <_strtod_l+0x9d2>
 800e6e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	f43f ad56 	beq.w	800e196 <_strtod_l+0x47e>
 800e6ea:	f04f 38ff 	mov.w	r8, #4294967295
 800e6ee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e818 <_strtod_l+0xb00>
 800e6f2:	4650      	mov	r0, sl
 800e6f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e6f6:	f001 fb5d 	bl	800fdb4 <_Bfree>
 800e6fa:	4650      	mov	r0, sl
 800e6fc:	9906      	ldr	r1, [sp, #24]
 800e6fe:	f001 fb59 	bl	800fdb4 <_Bfree>
 800e702:	4650      	mov	r0, sl
 800e704:	9904      	ldr	r1, [sp, #16]
 800e706:	f001 fb55 	bl	800fdb4 <_Bfree>
 800e70a:	4659      	mov	r1, fp
 800e70c:	4650      	mov	r0, sl
 800e70e:	f001 fb51 	bl	800fdb4 <_Bfree>
 800e712:	e627      	b.n	800e364 <_strtod_l+0x64c>
 800e714:	f1b8 0f00 	cmp.w	r8, #0
 800e718:	d119      	bne.n	800e74e <_strtod_l+0xa36>
 800e71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e71c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e720:	b9e3      	cbnz	r3, 800e75c <_strtod_l+0xa44>
 800e722:	2200      	movs	r2, #0
 800e724:	4630      	mov	r0, r6
 800e726:	4639      	mov	r1, r7
 800e728:	4b3c      	ldr	r3, [pc, #240]	; (800e81c <_strtod_l+0xb04>)
 800e72a:	f7f2 f95f 	bl	80009ec <__aeabi_dcmplt>
 800e72e:	b9c8      	cbnz	r0, 800e764 <_strtod_l+0xa4c>
 800e730:	2200      	movs	r2, #0
 800e732:	4630      	mov	r0, r6
 800e734:	4639      	mov	r1, r7
 800e736:	4b3c      	ldr	r3, [pc, #240]	; (800e828 <_strtod_l+0xb10>)
 800e738:	f7f1 fee6 	bl	8000508 <__aeabi_dmul>
 800e73c:	4604      	mov	r4, r0
 800e73e:	460d      	mov	r5, r1
 800e740:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e744:	9416      	str	r4, [sp, #88]	; 0x58
 800e746:	9317      	str	r3, [sp, #92]	; 0x5c
 800e748:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e74c:	e7a2      	b.n	800e694 <_strtod_l+0x97c>
 800e74e:	f1b8 0f01 	cmp.w	r8, #1
 800e752:	d103      	bne.n	800e75c <_strtod_l+0xa44>
 800e754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e756:	2b00      	cmp	r3, #0
 800e758:	f43f ad92 	beq.w	800e280 <_strtod_l+0x568>
 800e75c:	2600      	movs	r6, #0
 800e75e:	2400      	movs	r4, #0
 800e760:	4f32      	ldr	r7, [pc, #200]	; (800e82c <_strtod_l+0xb14>)
 800e762:	e796      	b.n	800e692 <_strtod_l+0x97a>
 800e764:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e766:	4d30      	ldr	r5, [pc, #192]	; (800e828 <_strtod_l+0xb10>)
 800e768:	e7ea      	b.n	800e740 <_strtod_l+0xa28>
 800e76a:	4b2f      	ldr	r3, [pc, #188]	; (800e828 <_strtod_l+0xb10>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	4630      	mov	r0, r6
 800e770:	4639      	mov	r1, r7
 800e772:	f7f1 fec9 	bl	8000508 <__aeabi_dmul>
 800e776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e778:	4604      	mov	r4, r0
 800e77a:	460d      	mov	r5, r1
 800e77c:	b933      	cbnz	r3, 800e78c <_strtod_l+0xa74>
 800e77e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e782:	9010      	str	r0, [sp, #64]	; 0x40
 800e784:	9311      	str	r3, [sp, #68]	; 0x44
 800e786:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e78a:	e783      	b.n	800e694 <_strtod_l+0x97c>
 800e78c:	4602      	mov	r2, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e794:	e7f7      	b.n	800e786 <_strtod_l+0xa6e>
 800e796:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e79a:	9b05      	ldr	r3, [sp, #20]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1a8      	bne.n	800e6f2 <_strtod_l+0x9da>
 800e7a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7a6:	0d1b      	lsrs	r3, r3, #20
 800e7a8:	051b      	lsls	r3, r3, #20
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d1a1      	bne.n	800e6f2 <_strtod_l+0x9da>
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f2 fd23 	bl	80011fc <__aeabi_d2lz>
 800e7b6:	f7f1 fe79 	bl	80004ac <__aeabi_l2d>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4620      	mov	r0, r4
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	f7f1 fce9 	bl	8000198 <__aeabi_dsub>
 800e7c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7cc:	ea43 0308 	orr.w	r3, r3, r8
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	460d      	mov	r5, r1
 800e7d6:	d066      	beq.n	800e8a6 <_strtod_l+0xb8e>
 800e7d8:	a309      	add	r3, pc, #36	; (adr r3, 800e800 <_strtod_l+0xae8>)
 800e7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7de:	f7f2 f905 	bl	80009ec <__aeabi_dcmplt>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	f47f ace2 	bne.w	800e1ac <_strtod_l+0x494>
 800e7e8:	a307      	add	r3, pc, #28	; (adr r3, 800e808 <_strtod_l+0xaf0>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	4629      	mov	r1, r5
 800e7f2:	f7f2 f919 	bl	8000a28 <__aeabi_dcmpgt>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	f43f af7b 	beq.w	800e6f2 <_strtod_l+0x9da>
 800e7fc:	e4d6      	b.n	800e1ac <_strtod_l+0x494>
 800e7fe:	bf00      	nop
 800e800:	94a03595 	.word	0x94a03595
 800e804:	3fdfffff 	.word	0x3fdfffff
 800e808:	35afe535 	.word	0x35afe535
 800e80c:	3fe00000 	.word	0x3fe00000
 800e810:	000fffff 	.word	0x000fffff
 800e814:	7ff00000 	.word	0x7ff00000
 800e818:	7fefffff 	.word	0x7fefffff
 800e81c:	3ff00000 	.word	0x3ff00000
 800e820:	7fe00000 	.word	0x7fe00000
 800e824:	7c9fffff 	.word	0x7c9fffff
 800e828:	3fe00000 	.word	0x3fe00000
 800e82c:	bff00000 	.word	0xbff00000
 800e830:	9b05      	ldr	r3, [sp, #20]
 800e832:	b313      	cbz	r3, 800e87a <_strtod_l+0xb62>
 800e834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e836:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e83a:	d81e      	bhi.n	800e87a <_strtod_l+0xb62>
 800e83c:	a326      	add	r3, pc, #152	; (adr r3, 800e8d8 <_strtod_l+0xbc0>)
 800e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e842:	4620      	mov	r0, r4
 800e844:	4629      	mov	r1, r5
 800e846:	f7f2 f8db 	bl	8000a00 <__aeabi_dcmple>
 800e84a:	b190      	cbz	r0, 800e872 <_strtod_l+0xb5a>
 800e84c:	4629      	mov	r1, r5
 800e84e:	4620      	mov	r0, r4
 800e850:	f7f2 f932 	bl	8000ab8 <__aeabi_d2uiz>
 800e854:	2801      	cmp	r0, #1
 800e856:	bf38      	it	cc
 800e858:	2001      	movcc	r0, #1
 800e85a:	f7f1 fddb 	bl	8000414 <__aeabi_ui2d>
 800e85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e860:	4604      	mov	r4, r0
 800e862:	460d      	mov	r5, r1
 800e864:	b9d3      	cbnz	r3, 800e89c <_strtod_l+0xb84>
 800e866:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e86a:	9012      	str	r0, [sp, #72]	; 0x48
 800e86c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e86e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e872:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e874:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e878:	1a9f      	subs	r7, r3, r2
 800e87a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e87e:	f001 fdc9 	bl	8010414 <__ulp>
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	4630      	mov	r0, r6
 800e888:	4639      	mov	r1, r7
 800e88a:	f7f1 fe3d 	bl	8000508 <__aeabi_dmul>
 800e88e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e892:	f7f1 fc83 	bl	800019c <__adddf3>
 800e896:	4680      	mov	r8, r0
 800e898:	4689      	mov	r9, r1
 800e89a:	e77e      	b.n	800e79a <_strtod_l+0xa82>
 800e89c:	4602      	mov	r2, r0
 800e89e:	460b      	mov	r3, r1
 800e8a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e8a4:	e7e3      	b.n	800e86e <_strtod_l+0xb56>
 800e8a6:	a30e      	add	r3, pc, #56	; (adr r3, 800e8e0 <_strtod_l+0xbc8>)
 800e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ac:	f7f2 f89e 	bl	80009ec <__aeabi_dcmplt>
 800e8b0:	e7a1      	b.n	800e7f6 <_strtod_l+0xade>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	930a      	str	r3, [sp, #40]	; 0x28
 800e8b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e8ba:	6013      	str	r3, [r2, #0]
 800e8bc:	f7ff ba71 	b.w	800dda2 <_strtod_l+0x8a>
 800e8c0:	2a65      	cmp	r2, #101	; 0x65
 800e8c2:	f43f ab63 	beq.w	800df8c <_strtod_l+0x274>
 800e8c6:	2a45      	cmp	r2, #69	; 0x45
 800e8c8:	f43f ab60 	beq.w	800df8c <_strtod_l+0x274>
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	f7ff bb95 	b.w	800dffc <_strtod_l+0x2e4>
 800e8d2:	bf00      	nop
 800e8d4:	f3af 8000 	nop.w
 800e8d8:	ffc00000 	.word	0xffc00000
 800e8dc:	41dfffff 	.word	0x41dfffff
 800e8e0:	94a03595 	.word	0x94a03595
 800e8e4:	3fcfffff 	.word	0x3fcfffff

0800e8e8 <strtod>:
 800e8e8:	460a      	mov	r2, r1
 800e8ea:	4601      	mov	r1, r0
 800e8ec:	4802      	ldr	r0, [pc, #8]	; (800e8f8 <strtod+0x10>)
 800e8ee:	4b03      	ldr	r3, [pc, #12]	; (800e8fc <strtod+0x14>)
 800e8f0:	6800      	ldr	r0, [r0, #0]
 800e8f2:	f7ff ba11 	b.w	800dd18 <_strtod_l>
 800e8f6:	bf00      	nop
 800e8f8:	20000194 	.word	0x20000194
 800e8fc:	200001fc 	.word	0x200001fc

0800e900 <quorem>:
 800e900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	6903      	ldr	r3, [r0, #16]
 800e906:	690c      	ldr	r4, [r1, #16]
 800e908:	4607      	mov	r7, r0
 800e90a:	42a3      	cmp	r3, r4
 800e90c:	f2c0 8082 	blt.w	800ea14 <quorem+0x114>
 800e910:	3c01      	subs	r4, #1
 800e912:	f100 0514 	add.w	r5, r0, #20
 800e916:	f101 0814 	add.w	r8, r1, #20
 800e91a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e928:	3301      	adds	r3, #1
 800e92a:	429a      	cmp	r2, r3
 800e92c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e938:	d331      	bcc.n	800e99e <quorem+0x9e>
 800e93a:	f04f 0e00 	mov.w	lr, #0
 800e93e:	4640      	mov	r0, r8
 800e940:	46ac      	mov	ip, r5
 800e942:	46f2      	mov	sl, lr
 800e944:	f850 2b04 	ldr.w	r2, [r0], #4
 800e948:	b293      	uxth	r3, r2
 800e94a:	fb06 e303 	mla	r3, r6, r3, lr
 800e94e:	0c12      	lsrs	r2, r2, #16
 800e950:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e954:	b29b      	uxth	r3, r3
 800e956:	fb06 e202 	mla	r2, r6, r2, lr
 800e95a:	ebaa 0303 	sub.w	r3, sl, r3
 800e95e:	f8dc a000 	ldr.w	sl, [ip]
 800e962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e966:	fa1f fa8a 	uxth.w	sl, sl
 800e96a:	4453      	add	r3, sl
 800e96c:	f8dc a000 	ldr.w	sl, [ip]
 800e970:	b292      	uxth	r2, r2
 800e972:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e980:	4581      	cmp	r9, r0
 800e982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e986:	f84c 3b04 	str.w	r3, [ip], #4
 800e98a:	d2db      	bcs.n	800e944 <quorem+0x44>
 800e98c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e990:	b92b      	cbnz	r3, 800e99e <quorem+0x9e>
 800e992:	9b01      	ldr	r3, [sp, #4]
 800e994:	3b04      	subs	r3, #4
 800e996:	429d      	cmp	r5, r3
 800e998:	461a      	mov	r2, r3
 800e99a:	d32f      	bcc.n	800e9fc <quorem+0xfc>
 800e99c:	613c      	str	r4, [r7, #16]
 800e99e:	4638      	mov	r0, r7
 800e9a0:	f001 fc90 	bl	80102c4 <__mcmp>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	db25      	blt.n	800e9f4 <quorem+0xf4>
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f04f 0c00 	mov.w	ip, #0
 800e9ae:	3601      	adds	r6, #1
 800e9b0:	f858 1b04 	ldr.w	r1, [r8], #4
 800e9b4:	f8d0 e000 	ldr.w	lr, [r0]
 800e9b8:	b28b      	uxth	r3, r1
 800e9ba:	ebac 0303 	sub.w	r3, ip, r3
 800e9be:	fa1f f28e 	uxth.w	r2, lr
 800e9c2:	4413      	add	r3, r2
 800e9c4:	0c0a      	lsrs	r2, r1, #16
 800e9c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e9ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9d4:	45c1      	cmp	r9, r8
 800e9d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e9da:	f840 3b04 	str.w	r3, [r0], #4
 800e9de:	d2e7      	bcs.n	800e9b0 <quorem+0xb0>
 800e9e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9e8:	b922      	cbnz	r2, 800e9f4 <quorem+0xf4>
 800e9ea:	3b04      	subs	r3, #4
 800e9ec:	429d      	cmp	r5, r3
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	d30a      	bcc.n	800ea08 <quorem+0x108>
 800e9f2:	613c      	str	r4, [r7, #16]
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	b003      	add	sp, #12
 800e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fc:	6812      	ldr	r2, [r2, #0]
 800e9fe:	3b04      	subs	r3, #4
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	d1cb      	bne.n	800e99c <quorem+0x9c>
 800ea04:	3c01      	subs	r4, #1
 800ea06:	e7c6      	b.n	800e996 <quorem+0x96>
 800ea08:	6812      	ldr	r2, [r2, #0]
 800ea0a:	3b04      	subs	r3, #4
 800ea0c:	2a00      	cmp	r2, #0
 800ea0e:	d1f0      	bne.n	800e9f2 <quorem+0xf2>
 800ea10:	3c01      	subs	r4, #1
 800ea12:	e7eb      	b.n	800e9ec <quorem+0xec>
 800ea14:	2000      	movs	r0, #0
 800ea16:	e7ee      	b.n	800e9f6 <quorem+0xf6>

0800ea18 <_dtoa_r>:
 800ea18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1c:	4616      	mov	r6, r2
 800ea1e:	461f      	mov	r7, r3
 800ea20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea22:	b099      	sub	sp, #100	; 0x64
 800ea24:	4605      	mov	r5, r0
 800ea26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ea2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ea2e:	b974      	cbnz	r4, 800ea4e <_dtoa_r+0x36>
 800ea30:	2010      	movs	r0, #16
 800ea32:	f001 f949 	bl	800fcc8 <malloc>
 800ea36:	4602      	mov	r2, r0
 800ea38:	6268      	str	r0, [r5, #36]	; 0x24
 800ea3a:	b920      	cbnz	r0, 800ea46 <_dtoa_r+0x2e>
 800ea3c:	21ea      	movs	r1, #234	; 0xea
 800ea3e:	4ba8      	ldr	r3, [pc, #672]	; (800ece0 <_dtoa_r+0x2c8>)
 800ea40:	48a8      	ldr	r0, [pc, #672]	; (800ece4 <_dtoa_r+0x2cc>)
 800ea42:	f002 f89f 	bl	8010b84 <__assert_func>
 800ea46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea4a:	6004      	str	r4, [r0, #0]
 800ea4c:	60c4      	str	r4, [r0, #12]
 800ea4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea50:	6819      	ldr	r1, [r3, #0]
 800ea52:	b151      	cbz	r1, 800ea6a <_dtoa_r+0x52>
 800ea54:	685a      	ldr	r2, [r3, #4]
 800ea56:	2301      	movs	r3, #1
 800ea58:	4093      	lsls	r3, r2
 800ea5a:	604a      	str	r2, [r1, #4]
 800ea5c:	608b      	str	r3, [r1, #8]
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f001 f9a8 	bl	800fdb4 <_Bfree>
 800ea64:	2200      	movs	r2, #0
 800ea66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	1e3b      	subs	r3, r7, #0
 800ea6c:	bfaf      	iteee	ge
 800ea6e:	2300      	movge	r3, #0
 800ea70:	2201      	movlt	r2, #1
 800ea72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea76:	9305      	strlt	r3, [sp, #20]
 800ea78:	bfa8      	it	ge
 800ea7a:	f8c8 3000 	strge.w	r3, [r8]
 800ea7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ea82:	4b99      	ldr	r3, [pc, #612]	; (800ece8 <_dtoa_r+0x2d0>)
 800ea84:	bfb8      	it	lt
 800ea86:	f8c8 2000 	strlt.w	r2, [r8]
 800ea8a:	ea33 0309 	bics.w	r3, r3, r9
 800ea8e:	d119      	bne.n	800eac4 <_dtoa_r+0xac>
 800ea90:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea9c:	4333      	orrs	r3, r6
 800ea9e:	f000 857f 	beq.w	800f5a0 <_dtoa_r+0xb88>
 800eaa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eaa4:	b953      	cbnz	r3, 800eabc <_dtoa_r+0xa4>
 800eaa6:	4b91      	ldr	r3, [pc, #580]	; (800ecec <_dtoa_r+0x2d4>)
 800eaa8:	e022      	b.n	800eaf0 <_dtoa_r+0xd8>
 800eaaa:	4b91      	ldr	r3, [pc, #580]	; (800ecf0 <_dtoa_r+0x2d8>)
 800eaac:	9303      	str	r3, [sp, #12]
 800eaae:	3308      	adds	r3, #8
 800eab0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eab2:	6013      	str	r3, [r2, #0]
 800eab4:	9803      	ldr	r0, [sp, #12]
 800eab6:	b019      	add	sp, #100	; 0x64
 800eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabc:	4b8b      	ldr	r3, [pc, #556]	; (800ecec <_dtoa_r+0x2d4>)
 800eabe:	9303      	str	r3, [sp, #12]
 800eac0:	3303      	adds	r3, #3
 800eac2:	e7f5      	b.n	800eab0 <_dtoa_r+0x98>
 800eac4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eac8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800eacc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ead0:	2200      	movs	r2, #0
 800ead2:	2300      	movs	r3, #0
 800ead4:	f7f1 ff80 	bl	80009d8 <__aeabi_dcmpeq>
 800ead8:	4680      	mov	r8, r0
 800eada:	b158      	cbz	r0, 800eaf4 <_dtoa_r+0xdc>
 800eadc:	2301      	movs	r3, #1
 800eade:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eae0:	6013      	str	r3, [r2, #0]
 800eae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f000 8558 	beq.w	800f59a <_dtoa_r+0xb82>
 800eaea:	4882      	ldr	r0, [pc, #520]	; (800ecf4 <_dtoa_r+0x2dc>)
 800eaec:	6018      	str	r0, [r3, #0]
 800eaee:	1e43      	subs	r3, r0, #1
 800eaf0:	9303      	str	r3, [sp, #12]
 800eaf2:	e7df      	b.n	800eab4 <_dtoa_r+0x9c>
 800eaf4:	ab16      	add	r3, sp, #88	; 0x58
 800eaf6:	9301      	str	r3, [sp, #4]
 800eaf8:	ab17      	add	r3, sp, #92	; 0x5c
 800eafa:	9300      	str	r3, [sp, #0]
 800eafc:	4628      	mov	r0, r5
 800eafe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb02:	f001 fd01 	bl	8010508 <__d2b>
 800eb06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eb0a:	4683      	mov	fp, r0
 800eb0c:	2c00      	cmp	r4, #0
 800eb0e:	d07f      	beq.n	800ec10 <_dtoa_r+0x1f8>
 800eb10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800eb1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800eb22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eb26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	4b72      	ldr	r3, [pc, #456]	; (800ecf8 <_dtoa_r+0x2e0>)
 800eb2e:	f7f1 fb33 	bl	8000198 <__aeabi_dsub>
 800eb32:	a365      	add	r3, pc, #404	; (adr r3, 800ecc8 <_dtoa_r+0x2b0>)
 800eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb38:	f7f1 fce6 	bl	8000508 <__aeabi_dmul>
 800eb3c:	a364      	add	r3, pc, #400	; (adr r3, 800ecd0 <_dtoa_r+0x2b8>)
 800eb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb42:	f7f1 fb2b 	bl	800019c <__adddf3>
 800eb46:	4606      	mov	r6, r0
 800eb48:	4620      	mov	r0, r4
 800eb4a:	460f      	mov	r7, r1
 800eb4c:	f7f1 fc72 	bl	8000434 <__aeabi_i2d>
 800eb50:	a361      	add	r3, pc, #388	; (adr r3, 800ecd8 <_dtoa_r+0x2c0>)
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f7f1 fcd7 	bl	8000508 <__aeabi_dmul>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	4630      	mov	r0, r6
 800eb60:	4639      	mov	r1, r7
 800eb62:	f7f1 fb1b 	bl	800019c <__adddf3>
 800eb66:	4606      	mov	r6, r0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	f7f1 ff7d 	bl	8000a68 <__aeabi_d2iz>
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4682      	mov	sl, r0
 800eb72:	2300      	movs	r3, #0
 800eb74:	4630      	mov	r0, r6
 800eb76:	4639      	mov	r1, r7
 800eb78:	f7f1 ff38 	bl	80009ec <__aeabi_dcmplt>
 800eb7c:	b148      	cbz	r0, 800eb92 <_dtoa_r+0x17a>
 800eb7e:	4650      	mov	r0, sl
 800eb80:	f7f1 fc58 	bl	8000434 <__aeabi_i2d>
 800eb84:	4632      	mov	r2, r6
 800eb86:	463b      	mov	r3, r7
 800eb88:	f7f1 ff26 	bl	80009d8 <__aeabi_dcmpeq>
 800eb8c:	b908      	cbnz	r0, 800eb92 <_dtoa_r+0x17a>
 800eb8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb92:	f1ba 0f16 	cmp.w	sl, #22
 800eb96:	d858      	bhi.n	800ec4a <_dtoa_r+0x232>
 800eb98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb9c:	4b57      	ldr	r3, [pc, #348]	; (800ecfc <_dtoa_r+0x2e4>)
 800eb9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba6:	f7f1 ff21 	bl	80009ec <__aeabi_dcmplt>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d04f      	beq.n	800ec4e <_dtoa_r+0x236>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ebb8:	1b1c      	subs	r4, r3, r4
 800ebba:	1e63      	subs	r3, r4, #1
 800ebbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ebbe:	bf49      	itett	mi
 800ebc0:	f1c4 0301 	rsbmi	r3, r4, #1
 800ebc4:	2300      	movpl	r3, #0
 800ebc6:	9306      	strmi	r3, [sp, #24]
 800ebc8:	2300      	movmi	r3, #0
 800ebca:	bf54      	ite	pl
 800ebcc:	9306      	strpl	r3, [sp, #24]
 800ebce:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ebd0:	f1ba 0f00 	cmp.w	sl, #0
 800ebd4:	db3d      	blt.n	800ec52 <_dtoa_r+0x23a>
 800ebd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebd8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ebdc:	4453      	add	r3, sl
 800ebde:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	930a      	str	r3, [sp, #40]	; 0x28
 800ebe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebe6:	2b09      	cmp	r3, #9
 800ebe8:	f200 808c 	bhi.w	800ed04 <_dtoa_r+0x2ec>
 800ebec:	2b05      	cmp	r3, #5
 800ebee:	bfc4      	itt	gt
 800ebf0:	3b04      	subgt	r3, #4
 800ebf2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ebf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebf6:	bfc8      	it	gt
 800ebf8:	2400      	movgt	r4, #0
 800ebfa:	f1a3 0302 	sub.w	r3, r3, #2
 800ebfe:	bfd8      	it	le
 800ec00:	2401      	movle	r4, #1
 800ec02:	2b03      	cmp	r3, #3
 800ec04:	f200 808a 	bhi.w	800ed1c <_dtoa_r+0x304>
 800ec08:	e8df f003 	tbb	[pc, r3]
 800ec0c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ec10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ec14:	441c      	add	r4, r3
 800ec16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ec1a:	2b20      	cmp	r3, #32
 800ec1c:	bfc3      	ittte	gt
 800ec1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ec26:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec2a:	f1c3 0320 	rsble	r3, r3, #32
 800ec2e:	bfc6      	itte	gt
 800ec30:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec34:	4318      	orrgt	r0, r3
 800ec36:	fa06 f003 	lslle.w	r0, r6, r3
 800ec3a:	f7f1 fbeb 	bl	8000414 <__aeabi_ui2d>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ec44:	3c01      	subs	r4, #1
 800ec46:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec48:	e76f      	b.n	800eb2a <_dtoa_r+0x112>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e7b2      	b.n	800ebb4 <_dtoa_r+0x19c>
 800ec4e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec50:	e7b1      	b.n	800ebb6 <_dtoa_r+0x19e>
 800ec52:	9b06      	ldr	r3, [sp, #24]
 800ec54:	eba3 030a 	sub.w	r3, r3, sl
 800ec58:	9306      	str	r3, [sp, #24]
 800ec5a:	f1ca 0300 	rsb	r3, sl, #0
 800ec5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec60:	2300      	movs	r3, #0
 800ec62:	930e      	str	r3, [sp, #56]	; 0x38
 800ec64:	e7be      	b.n	800ebe4 <_dtoa_r+0x1cc>
 800ec66:	2300      	movs	r3, #0
 800ec68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	dc58      	bgt.n	800ed22 <_dtoa_r+0x30a>
 800ec70:	f04f 0901 	mov.w	r9, #1
 800ec74:	464b      	mov	r3, r9
 800ec76:	f8cd 9020 	str.w	r9, [sp, #32]
 800ec7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ec7e:	2200      	movs	r2, #0
 800ec80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ec82:	6042      	str	r2, [r0, #4]
 800ec84:	2204      	movs	r2, #4
 800ec86:	f102 0614 	add.w	r6, r2, #20
 800ec8a:	429e      	cmp	r6, r3
 800ec8c:	6841      	ldr	r1, [r0, #4]
 800ec8e:	d94e      	bls.n	800ed2e <_dtoa_r+0x316>
 800ec90:	4628      	mov	r0, r5
 800ec92:	f001 f84f 	bl	800fd34 <_Balloc>
 800ec96:	9003      	str	r0, [sp, #12]
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d14c      	bne.n	800ed36 <_dtoa_r+0x31e>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eca2:	4b17      	ldr	r3, [pc, #92]	; (800ed00 <_dtoa_r+0x2e8>)
 800eca4:	e6cc      	b.n	800ea40 <_dtoa_r+0x28>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e7de      	b.n	800ec68 <_dtoa_r+0x250>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecb0:	eb0a 0903 	add.w	r9, sl, r3
 800ecb4:	f109 0301 	add.w	r3, r9, #1
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	9308      	str	r3, [sp, #32]
 800ecbc:	bfb8      	it	lt
 800ecbe:	2301      	movlt	r3, #1
 800ecc0:	e7dd      	b.n	800ec7e <_dtoa_r+0x266>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e7f2      	b.n	800ecac <_dtoa_r+0x294>
 800ecc6:	bf00      	nop
 800ecc8:	636f4361 	.word	0x636f4361
 800eccc:	3fd287a7 	.word	0x3fd287a7
 800ecd0:	8b60c8b3 	.word	0x8b60c8b3
 800ecd4:	3fc68a28 	.word	0x3fc68a28
 800ecd8:	509f79fb 	.word	0x509f79fb
 800ecdc:	3fd34413 	.word	0x3fd34413
 800ece0:	08011af5 	.word	0x08011af5
 800ece4:	08011b0c 	.word	0x08011b0c
 800ece8:	7ff00000 	.word	0x7ff00000
 800ecec:	08011af1 	.word	0x08011af1
 800ecf0:	08011ae8 	.word	0x08011ae8
 800ecf4:	08011a71 	.word	0x08011a71
 800ecf8:	3ff80000 	.word	0x3ff80000
 800ecfc:	08011c78 	.word	0x08011c78
 800ed00:	08011b67 	.word	0x08011b67
 800ed04:	2401      	movs	r4, #1
 800ed06:	2300      	movs	r3, #0
 800ed08:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed0a:	9322      	str	r3, [sp, #136]	; 0x88
 800ed0c:	f04f 39ff 	mov.w	r9, #4294967295
 800ed10:	2200      	movs	r2, #0
 800ed12:	2312      	movs	r3, #18
 800ed14:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed18:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed1a:	e7b0      	b.n	800ec7e <_dtoa_r+0x266>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed20:	e7f4      	b.n	800ed0c <_dtoa_r+0x2f4>
 800ed22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ed26:	464b      	mov	r3, r9
 800ed28:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed2c:	e7a7      	b.n	800ec7e <_dtoa_r+0x266>
 800ed2e:	3101      	adds	r1, #1
 800ed30:	6041      	str	r1, [r0, #4]
 800ed32:	0052      	lsls	r2, r2, #1
 800ed34:	e7a7      	b.n	800ec86 <_dtoa_r+0x26e>
 800ed36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed38:	9a03      	ldr	r2, [sp, #12]
 800ed3a:	601a      	str	r2, [r3, #0]
 800ed3c:	9b08      	ldr	r3, [sp, #32]
 800ed3e:	2b0e      	cmp	r3, #14
 800ed40:	f200 80a8 	bhi.w	800ee94 <_dtoa_r+0x47c>
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	f000 80a5 	beq.w	800ee94 <_dtoa_r+0x47c>
 800ed4a:	f1ba 0f00 	cmp.w	sl, #0
 800ed4e:	dd34      	ble.n	800edba <_dtoa_r+0x3a2>
 800ed50:	4a9a      	ldr	r2, [pc, #616]	; (800efbc <_dtoa_r+0x5a4>)
 800ed52:	f00a 030f 	and.w	r3, sl, #15
 800ed56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ed5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ed62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ed66:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ed6a:	d016      	beq.n	800ed9a <_dtoa_r+0x382>
 800ed6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed70:	4b93      	ldr	r3, [pc, #588]	; (800efc0 <_dtoa_r+0x5a8>)
 800ed72:	2703      	movs	r7, #3
 800ed74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed78:	f7f1 fcf0 	bl	800075c <__aeabi_ddiv>
 800ed7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed80:	f004 040f 	and.w	r4, r4, #15
 800ed84:	4e8e      	ldr	r6, [pc, #568]	; (800efc0 <_dtoa_r+0x5a8>)
 800ed86:	b954      	cbnz	r4, 800ed9e <_dtoa_r+0x386>
 800ed88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed90:	f7f1 fce4 	bl	800075c <__aeabi_ddiv>
 800ed94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed98:	e029      	b.n	800edee <_dtoa_r+0x3d6>
 800ed9a:	2702      	movs	r7, #2
 800ed9c:	e7f2      	b.n	800ed84 <_dtoa_r+0x36c>
 800ed9e:	07e1      	lsls	r1, r4, #31
 800eda0:	d508      	bpl.n	800edb4 <_dtoa_r+0x39c>
 800eda2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eda6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edaa:	f7f1 fbad 	bl	8000508 <__aeabi_dmul>
 800edae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800edb2:	3701      	adds	r7, #1
 800edb4:	1064      	asrs	r4, r4, #1
 800edb6:	3608      	adds	r6, #8
 800edb8:	e7e5      	b.n	800ed86 <_dtoa_r+0x36e>
 800edba:	f000 80a5 	beq.w	800ef08 <_dtoa_r+0x4f0>
 800edbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edc2:	f1ca 0400 	rsb	r4, sl, #0
 800edc6:	4b7d      	ldr	r3, [pc, #500]	; (800efbc <_dtoa_r+0x5a4>)
 800edc8:	f004 020f 	and.w	r2, r4, #15
 800edcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	f7f1 fb98 	bl	8000508 <__aeabi_dmul>
 800edd8:	2702      	movs	r7, #2
 800edda:	2300      	movs	r3, #0
 800eddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ede0:	4e77      	ldr	r6, [pc, #476]	; (800efc0 <_dtoa_r+0x5a8>)
 800ede2:	1124      	asrs	r4, r4, #4
 800ede4:	2c00      	cmp	r4, #0
 800ede6:	f040 8084 	bne.w	800eef2 <_dtoa_r+0x4da>
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1d2      	bne.n	800ed94 <_dtoa_r+0x37c>
 800edee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f000 808b 	beq.w	800ef0c <_dtoa_r+0x4f4>
 800edf6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800edfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800edfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee02:	2200      	movs	r2, #0
 800ee04:	4b6f      	ldr	r3, [pc, #444]	; (800efc4 <_dtoa_r+0x5ac>)
 800ee06:	f7f1 fdf1 	bl	80009ec <__aeabi_dcmplt>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d07e      	beq.n	800ef0c <_dtoa_r+0x4f4>
 800ee0e:	9b08      	ldr	r3, [sp, #32]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d07b      	beq.n	800ef0c <_dtoa_r+0x4f4>
 800ee14:	f1b9 0f00 	cmp.w	r9, #0
 800ee18:	dd38      	ble.n	800ee8c <_dtoa_r+0x474>
 800ee1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee1e:	2200      	movs	r2, #0
 800ee20:	4b69      	ldr	r3, [pc, #420]	; (800efc8 <_dtoa_r+0x5b0>)
 800ee22:	f7f1 fb71 	bl	8000508 <__aeabi_dmul>
 800ee26:	464c      	mov	r4, r9
 800ee28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee2c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ee30:	3701      	adds	r7, #1
 800ee32:	4638      	mov	r0, r7
 800ee34:	f7f1 fafe 	bl	8000434 <__aeabi_i2d>
 800ee38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee3c:	f7f1 fb64 	bl	8000508 <__aeabi_dmul>
 800ee40:	2200      	movs	r2, #0
 800ee42:	4b62      	ldr	r3, [pc, #392]	; (800efcc <_dtoa_r+0x5b4>)
 800ee44:	f7f1 f9aa 	bl	800019c <__adddf3>
 800ee48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ee4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee50:	9611      	str	r6, [sp, #68]	; 0x44
 800ee52:	2c00      	cmp	r4, #0
 800ee54:	d15d      	bne.n	800ef12 <_dtoa_r+0x4fa>
 800ee56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	4b5c      	ldr	r3, [pc, #368]	; (800efd0 <_dtoa_r+0x5b8>)
 800ee5e:	f7f1 f99b 	bl	8000198 <__aeabi_dsub>
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee6a:	4633      	mov	r3, r6
 800ee6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee6e:	f7f1 fddb 	bl	8000a28 <__aeabi_dcmpgt>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	f040 829c 	bne.w	800f3b0 <_dtoa_r+0x998>
 800ee78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee7e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee82:	f7f1 fdb3 	bl	80009ec <__aeabi_dcmplt>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	f040 8290 	bne.w	800f3ac <_dtoa_r+0x994>
 800ee8c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ee90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ee94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f2c0 8152 	blt.w	800f140 <_dtoa_r+0x728>
 800ee9c:	f1ba 0f0e 	cmp.w	sl, #14
 800eea0:	f300 814e 	bgt.w	800f140 <_dtoa_r+0x728>
 800eea4:	4b45      	ldr	r3, [pc, #276]	; (800efbc <_dtoa_r+0x5a4>)
 800eea6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eeaa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eeae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800eeb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f280 80db 	bge.w	800f070 <_dtoa_r+0x658>
 800eeba:	9b08      	ldr	r3, [sp, #32]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f300 80d7 	bgt.w	800f070 <_dtoa_r+0x658>
 800eec2:	f040 8272 	bne.w	800f3aa <_dtoa_r+0x992>
 800eec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeca:	2200      	movs	r2, #0
 800eecc:	4b40      	ldr	r3, [pc, #256]	; (800efd0 <_dtoa_r+0x5b8>)
 800eece:	f7f1 fb1b 	bl	8000508 <__aeabi_dmul>
 800eed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eed6:	f7f1 fd9d 	bl	8000a14 <__aeabi_dcmpge>
 800eeda:	9c08      	ldr	r4, [sp, #32]
 800eedc:	4626      	mov	r6, r4
 800eede:	2800      	cmp	r0, #0
 800eee0:	f040 8248 	bne.w	800f374 <_dtoa_r+0x95c>
 800eee4:	2331      	movs	r3, #49	; 0x31
 800eee6:	9f03      	ldr	r7, [sp, #12]
 800eee8:	f10a 0a01 	add.w	sl, sl, #1
 800eeec:	f807 3b01 	strb.w	r3, [r7], #1
 800eef0:	e244      	b.n	800f37c <_dtoa_r+0x964>
 800eef2:	07e2      	lsls	r2, r4, #31
 800eef4:	d505      	bpl.n	800ef02 <_dtoa_r+0x4ea>
 800eef6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eefa:	f7f1 fb05 	bl	8000508 <__aeabi_dmul>
 800eefe:	2301      	movs	r3, #1
 800ef00:	3701      	adds	r7, #1
 800ef02:	1064      	asrs	r4, r4, #1
 800ef04:	3608      	adds	r6, #8
 800ef06:	e76d      	b.n	800ede4 <_dtoa_r+0x3cc>
 800ef08:	2702      	movs	r7, #2
 800ef0a:	e770      	b.n	800edee <_dtoa_r+0x3d6>
 800ef0c:	46d0      	mov	r8, sl
 800ef0e:	9c08      	ldr	r4, [sp, #32]
 800ef10:	e78f      	b.n	800ee32 <_dtoa_r+0x41a>
 800ef12:	9903      	ldr	r1, [sp, #12]
 800ef14:	4b29      	ldr	r3, [pc, #164]	; (800efbc <_dtoa_r+0x5a4>)
 800ef16:	4421      	add	r1, r4
 800ef18:	9112      	str	r1, [sp, #72]	; 0x48
 800ef1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ef24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	d055      	beq.n	800efd8 <_dtoa_r+0x5c0>
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	4929      	ldr	r1, [pc, #164]	; (800efd4 <_dtoa_r+0x5bc>)
 800ef30:	f7f1 fc14 	bl	800075c <__aeabi_ddiv>
 800ef34:	463b      	mov	r3, r7
 800ef36:	4632      	mov	r2, r6
 800ef38:	f7f1 f92e 	bl	8000198 <__aeabi_dsub>
 800ef3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef40:	9f03      	ldr	r7, [sp, #12]
 800ef42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef46:	f7f1 fd8f 	bl	8000a68 <__aeabi_d2iz>
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	f7f1 fa72 	bl	8000434 <__aeabi_i2d>
 800ef50:	4602      	mov	r2, r0
 800ef52:	460b      	mov	r3, r1
 800ef54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef58:	f7f1 f91e 	bl	8000198 <__aeabi_dsub>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	3430      	adds	r4, #48	; 0x30
 800ef62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef6a:	f807 4b01 	strb.w	r4, [r7], #1
 800ef6e:	f7f1 fd3d 	bl	80009ec <__aeabi_dcmplt>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d174      	bne.n	800f060 <_dtoa_r+0x648>
 800ef76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	4911      	ldr	r1, [pc, #68]	; (800efc4 <_dtoa_r+0x5ac>)
 800ef7e:	f7f1 f90b 	bl	8000198 <__aeabi_dsub>
 800ef82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef86:	f7f1 fd31 	bl	80009ec <__aeabi_dcmplt>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	f040 80b7 	bne.w	800f0fe <_dtoa_r+0x6e6>
 800ef90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef92:	429f      	cmp	r7, r3
 800ef94:	f43f af7a 	beq.w	800ee8c <_dtoa_r+0x474>
 800ef98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	4b0a      	ldr	r3, [pc, #40]	; (800efc8 <_dtoa_r+0x5b0>)
 800efa0:	f7f1 fab2 	bl	8000508 <__aeabi_dmul>
 800efa4:	2200      	movs	r2, #0
 800efa6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efae:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <_dtoa_r+0x5b0>)
 800efb0:	f7f1 faaa 	bl	8000508 <__aeabi_dmul>
 800efb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efb8:	e7c3      	b.n	800ef42 <_dtoa_r+0x52a>
 800efba:	bf00      	nop
 800efbc:	08011c78 	.word	0x08011c78
 800efc0:	08011c50 	.word	0x08011c50
 800efc4:	3ff00000 	.word	0x3ff00000
 800efc8:	40240000 	.word	0x40240000
 800efcc:	401c0000 	.word	0x401c0000
 800efd0:	40140000 	.word	0x40140000
 800efd4:	3fe00000 	.word	0x3fe00000
 800efd8:	4630      	mov	r0, r6
 800efda:	4639      	mov	r1, r7
 800efdc:	f7f1 fa94 	bl	8000508 <__aeabi_dmul>
 800efe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efe6:	9c03      	ldr	r4, [sp, #12]
 800efe8:	9314      	str	r3, [sp, #80]	; 0x50
 800efea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efee:	f7f1 fd3b 	bl	8000a68 <__aeabi_d2iz>
 800eff2:	9015      	str	r0, [sp, #84]	; 0x54
 800eff4:	f7f1 fa1e 	bl	8000434 <__aeabi_i2d>
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f000:	f7f1 f8ca 	bl	8000198 <__aeabi_dsub>
 800f004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f006:	4606      	mov	r6, r0
 800f008:	3330      	adds	r3, #48	; 0x30
 800f00a:	f804 3b01 	strb.w	r3, [r4], #1
 800f00e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f010:	460f      	mov	r7, r1
 800f012:	429c      	cmp	r4, r3
 800f014:	f04f 0200 	mov.w	r2, #0
 800f018:	d124      	bne.n	800f064 <_dtoa_r+0x64c>
 800f01a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f01e:	4bb0      	ldr	r3, [pc, #704]	; (800f2e0 <_dtoa_r+0x8c8>)
 800f020:	f7f1 f8bc 	bl	800019c <__adddf3>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	4630      	mov	r0, r6
 800f02a:	4639      	mov	r1, r7
 800f02c:	f7f1 fcfc 	bl	8000a28 <__aeabi_dcmpgt>
 800f030:	2800      	cmp	r0, #0
 800f032:	d163      	bne.n	800f0fc <_dtoa_r+0x6e4>
 800f034:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f038:	2000      	movs	r0, #0
 800f03a:	49a9      	ldr	r1, [pc, #676]	; (800f2e0 <_dtoa_r+0x8c8>)
 800f03c:	f7f1 f8ac 	bl	8000198 <__aeabi_dsub>
 800f040:	4602      	mov	r2, r0
 800f042:	460b      	mov	r3, r1
 800f044:	4630      	mov	r0, r6
 800f046:	4639      	mov	r1, r7
 800f048:	f7f1 fcd0 	bl	80009ec <__aeabi_dcmplt>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f43f af1d 	beq.w	800ee8c <_dtoa_r+0x474>
 800f052:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f054:	1e7b      	subs	r3, r7, #1
 800f056:	9314      	str	r3, [sp, #80]	; 0x50
 800f058:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f05c:	2b30      	cmp	r3, #48	; 0x30
 800f05e:	d0f8      	beq.n	800f052 <_dtoa_r+0x63a>
 800f060:	46c2      	mov	sl, r8
 800f062:	e03b      	b.n	800f0dc <_dtoa_r+0x6c4>
 800f064:	4b9f      	ldr	r3, [pc, #636]	; (800f2e4 <_dtoa_r+0x8cc>)
 800f066:	f7f1 fa4f 	bl	8000508 <__aeabi_dmul>
 800f06a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f06e:	e7bc      	b.n	800efea <_dtoa_r+0x5d2>
 800f070:	9f03      	ldr	r7, [sp, #12]
 800f072:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f07a:	4640      	mov	r0, r8
 800f07c:	4649      	mov	r1, r9
 800f07e:	f7f1 fb6d 	bl	800075c <__aeabi_ddiv>
 800f082:	f7f1 fcf1 	bl	8000a68 <__aeabi_d2iz>
 800f086:	4604      	mov	r4, r0
 800f088:	f7f1 f9d4 	bl	8000434 <__aeabi_i2d>
 800f08c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f090:	f7f1 fa3a 	bl	8000508 <__aeabi_dmul>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	4640      	mov	r0, r8
 800f09a:	4649      	mov	r1, r9
 800f09c:	f7f1 f87c 	bl	8000198 <__aeabi_dsub>
 800f0a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f0a4:	f807 6b01 	strb.w	r6, [r7], #1
 800f0a8:	9e03      	ldr	r6, [sp, #12]
 800f0aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f0ae:	1bbe      	subs	r6, r7, r6
 800f0b0:	45b4      	cmp	ip, r6
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	d136      	bne.n	800f126 <_dtoa_r+0x70e>
 800f0b8:	f7f1 f870 	bl	800019c <__adddf3>
 800f0bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0c0:	4680      	mov	r8, r0
 800f0c2:	4689      	mov	r9, r1
 800f0c4:	f7f1 fcb0 	bl	8000a28 <__aeabi_dcmpgt>
 800f0c8:	bb58      	cbnz	r0, 800f122 <_dtoa_r+0x70a>
 800f0ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	4649      	mov	r1, r9
 800f0d2:	f7f1 fc81 	bl	80009d8 <__aeabi_dcmpeq>
 800f0d6:	b108      	cbz	r0, 800f0dc <_dtoa_r+0x6c4>
 800f0d8:	07e1      	lsls	r1, r4, #31
 800f0da:	d422      	bmi.n	800f122 <_dtoa_r+0x70a>
 800f0dc:	4628      	mov	r0, r5
 800f0de:	4659      	mov	r1, fp
 800f0e0:	f000 fe68 	bl	800fdb4 <_Bfree>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	703b      	strb	r3, [r7, #0]
 800f0e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f0ea:	f10a 0001 	add.w	r0, sl, #1
 800f0ee:	6018      	str	r0, [r3, #0]
 800f0f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f43f acde 	beq.w	800eab4 <_dtoa_r+0x9c>
 800f0f8:	601f      	str	r7, [r3, #0]
 800f0fa:	e4db      	b.n	800eab4 <_dtoa_r+0x9c>
 800f0fc:	4627      	mov	r7, r4
 800f0fe:	463b      	mov	r3, r7
 800f100:	461f      	mov	r7, r3
 800f102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f106:	2a39      	cmp	r2, #57	; 0x39
 800f108:	d107      	bne.n	800f11a <_dtoa_r+0x702>
 800f10a:	9a03      	ldr	r2, [sp, #12]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d1f7      	bne.n	800f100 <_dtoa_r+0x6e8>
 800f110:	2230      	movs	r2, #48	; 0x30
 800f112:	9903      	ldr	r1, [sp, #12]
 800f114:	f108 0801 	add.w	r8, r8, #1
 800f118:	700a      	strb	r2, [r1, #0]
 800f11a:	781a      	ldrb	r2, [r3, #0]
 800f11c:	3201      	adds	r2, #1
 800f11e:	701a      	strb	r2, [r3, #0]
 800f120:	e79e      	b.n	800f060 <_dtoa_r+0x648>
 800f122:	46d0      	mov	r8, sl
 800f124:	e7eb      	b.n	800f0fe <_dtoa_r+0x6e6>
 800f126:	2200      	movs	r2, #0
 800f128:	4b6e      	ldr	r3, [pc, #440]	; (800f2e4 <_dtoa_r+0x8cc>)
 800f12a:	f7f1 f9ed 	bl	8000508 <__aeabi_dmul>
 800f12e:	2200      	movs	r2, #0
 800f130:	2300      	movs	r3, #0
 800f132:	4680      	mov	r8, r0
 800f134:	4689      	mov	r9, r1
 800f136:	f7f1 fc4f 	bl	80009d8 <__aeabi_dcmpeq>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d09b      	beq.n	800f076 <_dtoa_r+0x65e>
 800f13e:	e7cd      	b.n	800f0dc <_dtoa_r+0x6c4>
 800f140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f142:	2a00      	cmp	r2, #0
 800f144:	f000 80d0 	beq.w	800f2e8 <_dtoa_r+0x8d0>
 800f148:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f14a:	2a01      	cmp	r2, #1
 800f14c:	f300 80ae 	bgt.w	800f2ac <_dtoa_r+0x894>
 800f150:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f152:	2a00      	cmp	r2, #0
 800f154:	f000 80a6 	beq.w	800f2a4 <_dtoa_r+0x88c>
 800f158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f15c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f15e:	9f06      	ldr	r7, [sp, #24]
 800f160:	9a06      	ldr	r2, [sp, #24]
 800f162:	2101      	movs	r1, #1
 800f164:	441a      	add	r2, r3
 800f166:	9206      	str	r2, [sp, #24]
 800f168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f16a:	4628      	mov	r0, r5
 800f16c:	441a      	add	r2, r3
 800f16e:	9209      	str	r2, [sp, #36]	; 0x24
 800f170:	f000 ff20 	bl	800ffb4 <__i2b>
 800f174:	4606      	mov	r6, r0
 800f176:	2f00      	cmp	r7, #0
 800f178:	dd0c      	ble.n	800f194 <_dtoa_r+0x77c>
 800f17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	dd09      	ble.n	800f194 <_dtoa_r+0x77c>
 800f180:	42bb      	cmp	r3, r7
 800f182:	bfa8      	it	ge
 800f184:	463b      	movge	r3, r7
 800f186:	9a06      	ldr	r2, [sp, #24]
 800f188:	1aff      	subs	r7, r7, r3
 800f18a:	1ad2      	subs	r2, r2, r3
 800f18c:	9206      	str	r2, [sp, #24]
 800f18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	9309      	str	r3, [sp, #36]	; 0x24
 800f194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f196:	b1f3      	cbz	r3, 800f1d6 <_dtoa_r+0x7be>
 800f198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	f000 80a8 	beq.w	800f2f0 <_dtoa_r+0x8d8>
 800f1a0:	2c00      	cmp	r4, #0
 800f1a2:	dd10      	ble.n	800f1c6 <_dtoa_r+0x7ae>
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4622      	mov	r2, r4
 800f1a8:	4628      	mov	r0, r5
 800f1aa:	f000 ffc1 	bl	8010130 <__pow5mult>
 800f1ae:	465a      	mov	r2, fp
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f000 ff13 	bl	800ffe0 <__multiply>
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	4659      	mov	r1, fp
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f000 fdf8 	bl	800fdb4 <_Bfree>
 800f1c4:	46c3      	mov	fp, r8
 800f1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1c8:	1b1a      	subs	r2, r3, r4
 800f1ca:	d004      	beq.n	800f1d6 <_dtoa_r+0x7be>
 800f1cc:	4659      	mov	r1, fp
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f000 ffae 	bl	8010130 <__pow5mult>
 800f1d4:	4683      	mov	fp, r0
 800f1d6:	2101      	movs	r1, #1
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f000 feeb 	bl	800ffb4 <__i2b>
 800f1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f340 8086 	ble.w	800f2f4 <_dtoa_r+0x8dc>
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	4601      	mov	r1, r0
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f000 ff9f 	bl	8010130 <__pow5mult>
 800f1f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	dd7f      	ble.n	800f2fa <_dtoa_r+0x8e2>
 800f1fa:	f04f 0800 	mov.w	r8, #0
 800f1fe:	6923      	ldr	r3, [r4, #16]
 800f200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f204:	6918      	ldr	r0, [r3, #16]
 800f206:	f000 fe87 	bl	800ff18 <__hi0bits>
 800f20a:	f1c0 0020 	rsb	r0, r0, #32
 800f20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f210:	4418      	add	r0, r3
 800f212:	f010 001f 	ands.w	r0, r0, #31
 800f216:	f000 8092 	beq.w	800f33e <_dtoa_r+0x926>
 800f21a:	f1c0 0320 	rsb	r3, r0, #32
 800f21e:	2b04      	cmp	r3, #4
 800f220:	f340 808a 	ble.w	800f338 <_dtoa_r+0x920>
 800f224:	f1c0 001c 	rsb	r0, r0, #28
 800f228:	9b06      	ldr	r3, [sp, #24]
 800f22a:	4407      	add	r7, r0
 800f22c:	4403      	add	r3, r0
 800f22e:	9306      	str	r3, [sp, #24]
 800f230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f232:	4403      	add	r3, r0
 800f234:	9309      	str	r3, [sp, #36]	; 0x24
 800f236:	9b06      	ldr	r3, [sp, #24]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	dd05      	ble.n	800f248 <_dtoa_r+0x830>
 800f23c:	4659      	mov	r1, fp
 800f23e:	461a      	mov	r2, r3
 800f240:	4628      	mov	r0, r5
 800f242:	f000 ffcf 	bl	80101e4 <__lshift>
 800f246:	4683      	mov	fp, r0
 800f248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	dd05      	ble.n	800f25a <_dtoa_r+0x842>
 800f24e:	4621      	mov	r1, r4
 800f250:	461a      	mov	r2, r3
 800f252:	4628      	mov	r0, r5
 800f254:	f000 ffc6 	bl	80101e4 <__lshift>
 800f258:	4604      	mov	r4, r0
 800f25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d070      	beq.n	800f342 <_dtoa_r+0x92a>
 800f260:	4621      	mov	r1, r4
 800f262:	4658      	mov	r0, fp
 800f264:	f001 f82e 	bl	80102c4 <__mcmp>
 800f268:	2800      	cmp	r0, #0
 800f26a:	da6a      	bge.n	800f342 <_dtoa_r+0x92a>
 800f26c:	2300      	movs	r3, #0
 800f26e:	4659      	mov	r1, fp
 800f270:	220a      	movs	r2, #10
 800f272:	4628      	mov	r0, r5
 800f274:	f000 fdc0 	bl	800fdf8 <__multadd>
 800f278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f27a:	4683      	mov	fp, r0
 800f27c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 8194 	beq.w	800f5ae <_dtoa_r+0xb96>
 800f286:	4631      	mov	r1, r6
 800f288:	2300      	movs	r3, #0
 800f28a:	220a      	movs	r2, #10
 800f28c:	4628      	mov	r0, r5
 800f28e:	f000 fdb3 	bl	800fdf8 <__multadd>
 800f292:	f1b9 0f00 	cmp.w	r9, #0
 800f296:	4606      	mov	r6, r0
 800f298:	f300 8093 	bgt.w	800f3c2 <_dtoa_r+0x9aa>
 800f29c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f29e:	2b02      	cmp	r3, #2
 800f2a0:	dc57      	bgt.n	800f352 <_dtoa_r+0x93a>
 800f2a2:	e08e      	b.n	800f3c2 <_dtoa_r+0x9aa>
 800f2a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f2a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2aa:	e757      	b.n	800f15c <_dtoa_r+0x744>
 800f2ac:	9b08      	ldr	r3, [sp, #32]
 800f2ae:	1e5c      	subs	r4, r3, #1
 800f2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b2:	42a3      	cmp	r3, r4
 800f2b4:	bfb7      	itett	lt
 800f2b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f2b8:	1b1c      	subge	r4, r3, r4
 800f2ba:	1ae2      	sublt	r2, r4, r3
 800f2bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f2be:	bfbe      	ittt	lt
 800f2c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f2c2:	189b      	addlt	r3, r3, r2
 800f2c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2c6:	9b08      	ldr	r3, [sp, #32]
 800f2c8:	bfb8      	it	lt
 800f2ca:	2400      	movlt	r4, #0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bfbb      	ittet	lt
 800f2d0:	9b06      	ldrlt	r3, [sp, #24]
 800f2d2:	9a08      	ldrlt	r2, [sp, #32]
 800f2d4:	9f06      	ldrge	r7, [sp, #24]
 800f2d6:	1a9f      	sublt	r7, r3, r2
 800f2d8:	bfac      	ite	ge
 800f2da:	9b08      	ldrge	r3, [sp, #32]
 800f2dc:	2300      	movlt	r3, #0
 800f2de:	e73f      	b.n	800f160 <_dtoa_r+0x748>
 800f2e0:	3fe00000 	.word	0x3fe00000
 800f2e4:	40240000 	.word	0x40240000
 800f2e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f2ea:	9f06      	ldr	r7, [sp, #24]
 800f2ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f2ee:	e742      	b.n	800f176 <_dtoa_r+0x75e>
 800f2f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2f2:	e76b      	b.n	800f1cc <_dtoa_r+0x7b4>
 800f2f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	dc19      	bgt.n	800f32e <_dtoa_r+0x916>
 800f2fa:	9b04      	ldr	r3, [sp, #16]
 800f2fc:	b9bb      	cbnz	r3, 800f32e <_dtoa_r+0x916>
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f304:	b99b      	cbnz	r3, 800f32e <_dtoa_r+0x916>
 800f306:	9b05      	ldr	r3, [sp, #20]
 800f308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f30c:	0d1b      	lsrs	r3, r3, #20
 800f30e:	051b      	lsls	r3, r3, #20
 800f310:	b183      	cbz	r3, 800f334 <_dtoa_r+0x91c>
 800f312:	f04f 0801 	mov.w	r8, #1
 800f316:	9b06      	ldr	r3, [sp, #24]
 800f318:	3301      	adds	r3, #1
 800f31a:	9306      	str	r3, [sp, #24]
 800f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31e:	3301      	adds	r3, #1
 800f320:	9309      	str	r3, [sp, #36]	; 0x24
 800f322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f324:	2b00      	cmp	r3, #0
 800f326:	f47f af6a 	bne.w	800f1fe <_dtoa_r+0x7e6>
 800f32a:	2001      	movs	r0, #1
 800f32c:	e76f      	b.n	800f20e <_dtoa_r+0x7f6>
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	e7f6      	b.n	800f322 <_dtoa_r+0x90a>
 800f334:	4698      	mov	r8, r3
 800f336:	e7f4      	b.n	800f322 <_dtoa_r+0x90a>
 800f338:	f43f af7d 	beq.w	800f236 <_dtoa_r+0x81e>
 800f33c:	4618      	mov	r0, r3
 800f33e:	301c      	adds	r0, #28
 800f340:	e772      	b.n	800f228 <_dtoa_r+0x810>
 800f342:	9b08      	ldr	r3, [sp, #32]
 800f344:	2b00      	cmp	r3, #0
 800f346:	dc36      	bgt.n	800f3b6 <_dtoa_r+0x99e>
 800f348:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	dd33      	ble.n	800f3b6 <_dtoa_r+0x99e>
 800f34e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f352:	f1b9 0f00 	cmp.w	r9, #0
 800f356:	d10d      	bne.n	800f374 <_dtoa_r+0x95c>
 800f358:	4621      	mov	r1, r4
 800f35a:	464b      	mov	r3, r9
 800f35c:	2205      	movs	r2, #5
 800f35e:	4628      	mov	r0, r5
 800f360:	f000 fd4a 	bl	800fdf8 <__multadd>
 800f364:	4601      	mov	r1, r0
 800f366:	4604      	mov	r4, r0
 800f368:	4658      	mov	r0, fp
 800f36a:	f000 ffab 	bl	80102c4 <__mcmp>
 800f36e:	2800      	cmp	r0, #0
 800f370:	f73f adb8 	bgt.w	800eee4 <_dtoa_r+0x4cc>
 800f374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f376:	9f03      	ldr	r7, [sp, #12]
 800f378:	ea6f 0a03 	mvn.w	sl, r3
 800f37c:	f04f 0800 	mov.w	r8, #0
 800f380:	4621      	mov	r1, r4
 800f382:	4628      	mov	r0, r5
 800f384:	f000 fd16 	bl	800fdb4 <_Bfree>
 800f388:	2e00      	cmp	r6, #0
 800f38a:	f43f aea7 	beq.w	800f0dc <_dtoa_r+0x6c4>
 800f38e:	f1b8 0f00 	cmp.w	r8, #0
 800f392:	d005      	beq.n	800f3a0 <_dtoa_r+0x988>
 800f394:	45b0      	cmp	r8, r6
 800f396:	d003      	beq.n	800f3a0 <_dtoa_r+0x988>
 800f398:	4641      	mov	r1, r8
 800f39a:	4628      	mov	r0, r5
 800f39c:	f000 fd0a 	bl	800fdb4 <_Bfree>
 800f3a0:	4631      	mov	r1, r6
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	f000 fd06 	bl	800fdb4 <_Bfree>
 800f3a8:	e698      	b.n	800f0dc <_dtoa_r+0x6c4>
 800f3aa:	2400      	movs	r4, #0
 800f3ac:	4626      	mov	r6, r4
 800f3ae:	e7e1      	b.n	800f374 <_dtoa_r+0x95c>
 800f3b0:	46c2      	mov	sl, r8
 800f3b2:	4626      	mov	r6, r4
 800f3b4:	e596      	b.n	800eee4 <_dtoa_r+0x4cc>
 800f3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 80fd 	beq.w	800f5bc <_dtoa_r+0xba4>
 800f3c2:	2f00      	cmp	r7, #0
 800f3c4:	dd05      	ble.n	800f3d2 <_dtoa_r+0x9ba>
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	463a      	mov	r2, r7
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f000 ff0a 	bl	80101e4 <__lshift>
 800f3d0:	4606      	mov	r6, r0
 800f3d2:	f1b8 0f00 	cmp.w	r8, #0
 800f3d6:	d05c      	beq.n	800f492 <_dtoa_r+0xa7a>
 800f3d8:	4628      	mov	r0, r5
 800f3da:	6871      	ldr	r1, [r6, #4]
 800f3dc:	f000 fcaa 	bl	800fd34 <_Balloc>
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	b928      	cbnz	r0, 800f3f0 <_dtoa_r+0x9d8>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f3ea:	4b7f      	ldr	r3, [pc, #508]	; (800f5e8 <_dtoa_r+0xbd0>)
 800f3ec:	f7ff bb28 	b.w	800ea40 <_dtoa_r+0x28>
 800f3f0:	6932      	ldr	r2, [r6, #16]
 800f3f2:	f106 010c 	add.w	r1, r6, #12
 800f3f6:	3202      	adds	r2, #2
 800f3f8:	0092      	lsls	r2, r2, #2
 800f3fa:	300c      	adds	r0, #12
 800f3fc:	f000 fc8c 	bl	800fd18 <memcpy>
 800f400:	2201      	movs	r2, #1
 800f402:	4639      	mov	r1, r7
 800f404:	4628      	mov	r0, r5
 800f406:	f000 feed 	bl	80101e4 <__lshift>
 800f40a:	46b0      	mov	r8, r6
 800f40c:	4606      	mov	r6, r0
 800f40e:	9b03      	ldr	r3, [sp, #12]
 800f410:	3301      	adds	r3, #1
 800f412:	9308      	str	r3, [sp, #32]
 800f414:	9b03      	ldr	r3, [sp, #12]
 800f416:	444b      	add	r3, r9
 800f418:	930a      	str	r3, [sp, #40]	; 0x28
 800f41a:	9b04      	ldr	r3, [sp, #16]
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	9309      	str	r3, [sp, #36]	; 0x24
 800f422:	9b08      	ldr	r3, [sp, #32]
 800f424:	4621      	mov	r1, r4
 800f426:	3b01      	subs	r3, #1
 800f428:	4658      	mov	r0, fp
 800f42a:	9304      	str	r3, [sp, #16]
 800f42c:	f7ff fa68 	bl	800e900 <quorem>
 800f430:	4603      	mov	r3, r0
 800f432:	4641      	mov	r1, r8
 800f434:	3330      	adds	r3, #48	; 0x30
 800f436:	9006      	str	r0, [sp, #24]
 800f438:	4658      	mov	r0, fp
 800f43a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f43c:	f000 ff42 	bl	80102c4 <__mcmp>
 800f440:	4632      	mov	r2, r6
 800f442:	4681      	mov	r9, r0
 800f444:	4621      	mov	r1, r4
 800f446:	4628      	mov	r0, r5
 800f448:	f000 ff58 	bl	80102fc <__mdiff>
 800f44c:	68c2      	ldr	r2, [r0, #12]
 800f44e:	4607      	mov	r7, r0
 800f450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f452:	bb02      	cbnz	r2, 800f496 <_dtoa_r+0xa7e>
 800f454:	4601      	mov	r1, r0
 800f456:	4658      	mov	r0, fp
 800f458:	f000 ff34 	bl	80102c4 <__mcmp>
 800f45c:	4602      	mov	r2, r0
 800f45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f460:	4639      	mov	r1, r7
 800f462:	4628      	mov	r0, r5
 800f464:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f468:	f000 fca4 	bl	800fdb4 <_Bfree>
 800f46c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f470:	9f08      	ldr	r7, [sp, #32]
 800f472:	ea43 0102 	orr.w	r1, r3, r2
 800f476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f478:	430b      	orrs	r3, r1
 800f47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f47c:	d10d      	bne.n	800f49a <_dtoa_r+0xa82>
 800f47e:	2b39      	cmp	r3, #57	; 0x39
 800f480:	d029      	beq.n	800f4d6 <_dtoa_r+0xabe>
 800f482:	f1b9 0f00 	cmp.w	r9, #0
 800f486:	dd01      	ble.n	800f48c <_dtoa_r+0xa74>
 800f488:	9b06      	ldr	r3, [sp, #24]
 800f48a:	3331      	adds	r3, #49	; 0x31
 800f48c:	9a04      	ldr	r2, [sp, #16]
 800f48e:	7013      	strb	r3, [r2, #0]
 800f490:	e776      	b.n	800f380 <_dtoa_r+0x968>
 800f492:	4630      	mov	r0, r6
 800f494:	e7b9      	b.n	800f40a <_dtoa_r+0x9f2>
 800f496:	2201      	movs	r2, #1
 800f498:	e7e2      	b.n	800f460 <_dtoa_r+0xa48>
 800f49a:	f1b9 0f00 	cmp.w	r9, #0
 800f49e:	db06      	blt.n	800f4ae <_dtoa_r+0xa96>
 800f4a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f4a2:	ea41 0909 	orr.w	r9, r1, r9
 800f4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4a8:	ea59 0101 	orrs.w	r1, r9, r1
 800f4ac:	d120      	bne.n	800f4f0 <_dtoa_r+0xad8>
 800f4ae:	2a00      	cmp	r2, #0
 800f4b0:	ddec      	ble.n	800f48c <_dtoa_r+0xa74>
 800f4b2:	4659      	mov	r1, fp
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	9308      	str	r3, [sp, #32]
 800f4ba:	f000 fe93 	bl	80101e4 <__lshift>
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4683      	mov	fp, r0
 800f4c2:	f000 feff 	bl	80102c4 <__mcmp>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	9b08      	ldr	r3, [sp, #32]
 800f4ca:	dc02      	bgt.n	800f4d2 <_dtoa_r+0xaba>
 800f4cc:	d1de      	bne.n	800f48c <_dtoa_r+0xa74>
 800f4ce:	07da      	lsls	r2, r3, #31
 800f4d0:	d5dc      	bpl.n	800f48c <_dtoa_r+0xa74>
 800f4d2:	2b39      	cmp	r3, #57	; 0x39
 800f4d4:	d1d8      	bne.n	800f488 <_dtoa_r+0xa70>
 800f4d6:	2339      	movs	r3, #57	; 0x39
 800f4d8:	9a04      	ldr	r2, [sp, #16]
 800f4da:	7013      	strb	r3, [r2, #0]
 800f4dc:	463b      	mov	r3, r7
 800f4de:	461f      	mov	r7, r3
 800f4e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f4e4:	3b01      	subs	r3, #1
 800f4e6:	2a39      	cmp	r2, #57	; 0x39
 800f4e8:	d050      	beq.n	800f58c <_dtoa_r+0xb74>
 800f4ea:	3201      	adds	r2, #1
 800f4ec:	701a      	strb	r2, [r3, #0]
 800f4ee:	e747      	b.n	800f380 <_dtoa_r+0x968>
 800f4f0:	2a00      	cmp	r2, #0
 800f4f2:	dd03      	ble.n	800f4fc <_dtoa_r+0xae4>
 800f4f4:	2b39      	cmp	r3, #57	; 0x39
 800f4f6:	d0ee      	beq.n	800f4d6 <_dtoa_r+0xabe>
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	e7c7      	b.n	800f48c <_dtoa_r+0xa74>
 800f4fc:	9a08      	ldr	r2, [sp, #32]
 800f4fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f500:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f504:	428a      	cmp	r2, r1
 800f506:	d02a      	beq.n	800f55e <_dtoa_r+0xb46>
 800f508:	4659      	mov	r1, fp
 800f50a:	2300      	movs	r3, #0
 800f50c:	220a      	movs	r2, #10
 800f50e:	4628      	mov	r0, r5
 800f510:	f000 fc72 	bl	800fdf8 <__multadd>
 800f514:	45b0      	cmp	r8, r6
 800f516:	4683      	mov	fp, r0
 800f518:	f04f 0300 	mov.w	r3, #0
 800f51c:	f04f 020a 	mov.w	r2, #10
 800f520:	4641      	mov	r1, r8
 800f522:	4628      	mov	r0, r5
 800f524:	d107      	bne.n	800f536 <_dtoa_r+0xb1e>
 800f526:	f000 fc67 	bl	800fdf8 <__multadd>
 800f52a:	4680      	mov	r8, r0
 800f52c:	4606      	mov	r6, r0
 800f52e:	9b08      	ldr	r3, [sp, #32]
 800f530:	3301      	adds	r3, #1
 800f532:	9308      	str	r3, [sp, #32]
 800f534:	e775      	b.n	800f422 <_dtoa_r+0xa0a>
 800f536:	f000 fc5f 	bl	800fdf8 <__multadd>
 800f53a:	4631      	mov	r1, r6
 800f53c:	4680      	mov	r8, r0
 800f53e:	2300      	movs	r3, #0
 800f540:	220a      	movs	r2, #10
 800f542:	4628      	mov	r0, r5
 800f544:	f000 fc58 	bl	800fdf8 <__multadd>
 800f548:	4606      	mov	r6, r0
 800f54a:	e7f0      	b.n	800f52e <_dtoa_r+0xb16>
 800f54c:	f1b9 0f00 	cmp.w	r9, #0
 800f550:	bfcc      	ite	gt
 800f552:	464f      	movgt	r7, r9
 800f554:	2701      	movle	r7, #1
 800f556:	f04f 0800 	mov.w	r8, #0
 800f55a:	9a03      	ldr	r2, [sp, #12]
 800f55c:	4417      	add	r7, r2
 800f55e:	4659      	mov	r1, fp
 800f560:	2201      	movs	r2, #1
 800f562:	4628      	mov	r0, r5
 800f564:	9308      	str	r3, [sp, #32]
 800f566:	f000 fe3d 	bl	80101e4 <__lshift>
 800f56a:	4621      	mov	r1, r4
 800f56c:	4683      	mov	fp, r0
 800f56e:	f000 fea9 	bl	80102c4 <__mcmp>
 800f572:	2800      	cmp	r0, #0
 800f574:	dcb2      	bgt.n	800f4dc <_dtoa_r+0xac4>
 800f576:	d102      	bne.n	800f57e <_dtoa_r+0xb66>
 800f578:	9b08      	ldr	r3, [sp, #32]
 800f57a:	07db      	lsls	r3, r3, #31
 800f57c:	d4ae      	bmi.n	800f4dc <_dtoa_r+0xac4>
 800f57e:	463b      	mov	r3, r7
 800f580:	461f      	mov	r7, r3
 800f582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f586:	2a30      	cmp	r2, #48	; 0x30
 800f588:	d0fa      	beq.n	800f580 <_dtoa_r+0xb68>
 800f58a:	e6f9      	b.n	800f380 <_dtoa_r+0x968>
 800f58c:	9a03      	ldr	r2, [sp, #12]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d1a5      	bne.n	800f4de <_dtoa_r+0xac6>
 800f592:	2331      	movs	r3, #49	; 0x31
 800f594:	f10a 0a01 	add.w	sl, sl, #1
 800f598:	e779      	b.n	800f48e <_dtoa_r+0xa76>
 800f59a:	4b14      	ldr	r3, [pc, #80]	; (800f5ec <_dtoa_r+0xbd4>)
 800f59c:	f7ff baa8 	b.w	800eaf0 <_dtoa_r+0xd8>
 800f5a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f47f aa81 	bne.w	800eaaa <_dtoa_r+0x92>
 800f5a8:	4b11      	ldr	r3, [pc, #68]	; (800f5f0 <_dtoa_r+0xbd8>)
 800f5aa:	f7ff baa1 	b.w	800eaf0 <_dtoa_r+0xd8>
 800f5ae:	f1b9 0f00 	cmp.w	r9, #0
 800f5b2:	dc03      	bgt.n	800f5bc <_dtoa_r+0xba4>
 800f5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5b6:	2b02      	cmp	r3, #2
 800f5b8:	f73f aecb 	bgt.w	800f352 <_dtoa_r+0x93a>
 800f5bc:	9f03      	ldr	r7, [sp, #12]
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4658      	mov	r0, fp
 800f5c2:	f7ff f99d 	bl	800e900 <quorem>
 800f5c6:	9a03      	ldr	r2, [sp, #12]
 800f5c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f5cc:	f807 3b01 	strb.w	r3, [r7], #1
 800f5d0:	1aba      	subs	r2, r7, r2
 800f5d2:	4591      	cmp	r9, r2
 800f5d4:	ddba      	ble.n	800f54c <_dtoa_r+0xb34>
 800f5d6:	4659      	mov	r1, fp
 800f5d8:	2300      	movs	r3, #0
 800f5da:	220a      	movs	r2, #10
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f000 fc0b 	bl	800fdf8 <__multadd>
 800f5e2:	4683      	mov	fp, r0
 800f5e4:	e7eb      	b.n	800f5be <_dtoa_r+0xba6>
 800f5e6:	bf00      	nop
 800f5e8:	08011b67 	.word	0x08011b67
 800f5ec:	08011a70 	.word	0x08011a70
 800f5f0:	08011ae8 	.word	0x08011ae8

0800f5f4 <rshift>:
 800f5f4:	6903      	ldr	r3, [r0, #16]
 800f5f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f5fe:	f100 0414 	add.w	r4, r0, #20
 800f602:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f606:	dd46      	ble.n	800f696 <rshift+0xa2>
 800f608:	f011 011f 	ands.w	r1, r1, #31
 800f60c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f610:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f614:	d10c      	bne.n	800f630 <rshift+0x3c>
 800f616:	4629      	mov	r1, r5
 800f618:	f100 0710 	add.w	r7, r0, #16
 800f61c:	42b1      	cmp	r1, r6
 800f61e:	d335      	bcc.n	800f68c <rshift+0x98>
 800f620:	1a9b      	subs	r3, r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	1eea      	subs	r2, r5, #3
 800f626:	4296      	cmp	r6, r2
 800f628:	bf38      	it	cc
 800f62a:	2300      	movcc	r3, #0
 800f62c:	4423      	add	r3, r4
 800f62e:	e015      	b.n	800f65c <rshift+0x68>
 800f630:	46a1      	mov	r9, r4
 800f632:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f636:	f1c1 0820 	rsb	r8, r1, #32
 800f63a:	40cf      	lsrs	r7, r1
 800f63c:	f105 0e04 	add.w	lr, r5, #4
 800f640:	4576      	cmp	r6, lr
 800f642:	46f4      	mov	ip, lr
 800f644:	d816      	bhi.n	800f674 <rshift+0x80>
 800f646:	1a9a      	subs	r2, r3, r2
 800f648:	0092      	lsls	r2, r2, #2
 800f64a:	3a04      	subs	r2, #4
 800f64c:	3501      	adds	r5, #1
 800f64e:	42ae      	cmp	r6, r5
 800f650:	bf38      	it	cc
 800f652:	2200      	movcc	r2, #0
 800f654:	18a3      	adds	r3, r4, r2
 800f656:	50a7      	str	r7, [r4, r2]
 800f658:	b107      	cbz	r7, 800f65c <rshift+0x68>
 800f65a:	3304      	adds	r3, #4
 800f65c:	42a3      	cmp	r3, r4
 800f65e:	eba3 0204 	sub.w	r2, r3, r4
 800f662:	bf08      	it	eq
 800f664:	2300      	moveq	r3, #0
 800f666:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f66a:	6102      	str	r2, [r0, #16]
 800f66c:	bf08      	it	eq
 800f66e:	6143      	streq	r3, [r0, #20]
 800f670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f674:	f8dc c000 	ldr.w	ip, [ip]
 800f678:	fa0c fc08 	lsl.w	ip, ip, r8
 800f67c:	ea4c 0707 	orr.w	r7, ip, r7
 800f680:	f849 7b04 	str.w	r7, [r9], #4
 800f684:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f688:	40cf      	lsrs	r7, r1
 800f68a:	e7d9      	b.n	800f640 <rshift+0x4c>
 800f68c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f690:	f847 cf04 	str.w	ip, [r7, #4]!
 800f694:	e7c2      	b.n	800f61c <rshift+0x28>
 800f696:	4623      	mov	r3, r4
 800f698:	e7e0      	b.n	800f65c <rshift+0x68>

0800f69a <__hexdig_fun>:
 800f69a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f69e:	2b09      	cmp	r3, #9
 800f6a0:	d802      	bhi.n	800f6a8 <__hexdig_fun+0xe>
 800f6a2:	3820      	subs	r0, #32
 800f6a4:	b2c0      	uxtb	r0, r0
 800f6a6:	4770      	bx	lr
 800f6a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f6ac:	2b05      	cmp	r3, #5
 800f6ae:	d801      	bhi.n	800f6b4 <__hexdig_fun+0x1a>
 800f6b0:	3847      	subs	r0, #71	; 0x47
 800f6b2:	e7f7      	b.n	800f6a4 <__hexdig_fun+0xa>
 800f6b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f6b8:	2b05      	cmp	r3, #5
 800f6ba:	d801      	bhi.n	800f6c0 <__hexdig_fun+0x26>
 800f6bc:	3827      	subs	r0, #39	; 0x27
 800f6be:	e7f1      	b.n	800f6a4 <__hexdig_fun+0xa>
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	4770      	bx	lr

0800f6c4 <__gethex>:
 800f6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c8:	b08b      	sub	sp, #44	; 0x2c
 800f6ca:	9305      	str	r3, [sp, #20]
 800f6cc:	4bb2      	ldr	r3, [pc, #712]	; (800f998 <__gethex+0x2d4>)
 800f6ce:	9002      	str	r0, [sp, #8]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	468b      	mov	fp, r1
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	4690      	mov	r8, r2
 800f6d8:	9303      	str	r3, [sp, #12]
 800f6da:	f7f0 fd51 	bl	8000180 <strlen>
 800f6de:	4682      	mov	sl, r0
 800f6e0:	9b03      	ldr	r3, [sp, #12]
 800f6e2:	f8db 2000 	ldr.w	r2, [fp]
 800f6e6:	4403      	add	r3, r0
 800f6e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f6ec:	9306      	str	r3, [sp, #24]
 800f6ee:	1c93      	adds	r3, r2, #2
 800f6f0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f6f4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f6f8:	32fe      	adds	r2, #254	; 0xfe
 800f6fa:	18d1      	adds	r1, r2, r3
 800f6fc:	461f      	mov	r7, r3
 800f6fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f702:	9101      	str	r1, [sp, #4]
 800f704:	2830      	cmp	r0, #48	; 0x30
 800f706:	d0f8      	beq.n	800f6fa <__gethex+0x36>
 800f708:	f7ff ffc7 	bl	800f69a <__hexdig_fun>
 800f70c:	4604      	mov	r4, r0
 800f70e:	2800      	cmp	r0, #0
 800f710:	d13a      	bne.n	800f788 <__gethex+0xc4>
 800f712:	4652      	mov	r2, sl
 800f714:	4638      	mov	r0, r7
 800f716:	9903      	ldr	r1, [sp, #12]
 800f718:	f7fe fac8 	bl	800dcac <strncmp>
 800f71c:	4605      	mov	r5, r0
 800f71e:	2800      	cmp	r0, #0
 800f720:	d166      	bne.n	800f7f0 <__gethex+0x12c>
 800f722:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f726:	eb07 060a 	add.w	r6, r7, sl
 800f72a:	f7ff ffb6 	bl	800f69a <__hexdig_fun>
 800f72e:	2800      	cmp	r0, #0
 800f730:	d060      	beq.n	800f7f4 <__gethex+0x130>
 800f732:	4633      	mov	r3, r6
 800f734:	7818      	ldrb	r0, [r3, #0]
 800f736:	461f      	mov	r7, r3
 800f738:	2830      	cmp	r0, #48	; 0x30
 800f73a:	f103 0301 	add.w	r3, r3, #1
 800f73e:	d0f9      	beq.n	800f734 <__gethex+0x70>
 800f740:	f7ff ffab 	bl	800f69a <__hexdig_fun>
 800f744:	2301      	movs	r3, #1
 800f746:	fab0 f480 	clz	r4, r0
 800f74a:	4635      	mov	r5, r6
 800f74c:	0964      	lsrs	r4, r4, #5
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	463a      	mov	r2, r7
 800f752:	4616      	mov	r6, r2
 800f754:	7830      	ldrb	r0, [r6, #0]
 800f756:	3201      	adds	r2, #1
 800f758:	f7ff ff9f 	bl	800f69a <__hexdig_fun>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	d1f8      	bne.n	800f752 <__gethex+0x8e>
 800f760:	4652      	mov	r2, sl
 800f762:	4630      	mov	r0, r6
 800f764:	9903      	ldr	r1, [sp, #12]
 800f766:	f7fe faa1 	bl	800dcac <strncmp>
 800f76a:	b980      	cbnz	r0, 800f78e <__gethex+0xca>
 800f76c:	b94d      	cbnz	r5, 800f782 <__gethex+0xbe>
 800f76e:	eb06 050a 	add.w	r5, r6, sl
 800f772:	462a      	mov	r2, r5
 800f774:	4616      	mov	r6, r2
 800f776:	7830      	ldrb	r0, [r6, #0]
 800f778:	3201      	adds	r2, #1
 800f77a:	f7ff ff8e 	bl	800f69a <__hexdig_fun>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d1f8      	bne.n	800f774 <__gethex+0xb0>
 800f782:	1bad      	subs	r5, r5, r6
 800f784:	00ad      	lsls	r5, r5, #2
 800f786:	e004      	b.n	800f792 <__gethex+0xce>
 800f788:	2400      	movs	r4, #0
 800f78a:	4625      	mov	r5, r4
 800f78c:	e7e0      	b.n	800f750 <__gethex+0x8c>
 800f78e:	2d00      	cmp	r5, #0
 800f790:	d1f7      	bne.n	800f782 <__gethex+0xbe>
 800f792:	7833      	ldrb	r3, [r6, #0]
 800f794:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f798:	2b50      	cmp	r3, #80	; 0x50
 800f79a:	d139      	bne.n	800f810 <__gethex+0x14c>
 800f79c:	7873      	ldrb	r3, [r6, #1]
 800f79e:	2b2b      	cmp	r3, #43	; 0x2b
 800f7a0:	d02a      	beq.n	800f7f8 <__gethex+0x134>
 800f7a2:	2b2d      	cmp	r3, #45	; 0x2d
 800f7a4:	d02c      	beq.n	800f800 <__gethex+0x13c>
 800f7a6:	f04f 0900 	mov.w	r9, #0
 800f7aa:	1c71      	adds	r1, r6, #1
 800f7ac:	7808      	ldrb	r0, [r1, #0]
 800f7ae:	f7ff ff74 	bl	800f69a <__hexdig_fun>
 800f7b2:	1e43      	subs	r3, r0, #1
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b18      	cmp	r3, #24
 800f7b8:	d82a      	bhi.n	800f810 <__gethex+0x14c>
 800f7ba:	f1a0 0210 	sub.w	r2, r0, #16
 800f7be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f7c2:	f7ff ff6a 	bl	800f69a <__hexdig_fun>
 800f7c6:	1e43      	subs	r3, r0, #1
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b18      	cmp	r3, #24
 800f7cc:	d91b      	bls.n	800f806 <__gethex+0x142>
 800f7ce:	f1b9 0f00 	cmp.w	r9, #0
 800f7d2:	d000      	beq.n	800f7d6 <__gethex+0x112>
 800f7d4:	4252      	negs	r2, r2
 800f7d6:	4415      	add	r5, r2
 800f7d8:	f8cb 1000 	str.w	r1, [fp]
 800f7dc:	b1d4      	cbz	r4, 800f814 <__gethex+0x150>
 800f7de:	9b01      	ldr	r3, [sp, #4]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	bf14      	ite	ne
 800f7e4:	2700      	movne	r7, #0
 800f7e6:	2706      	moveq	r7, #6
 800f7e8:	4638      	mov	r0, r7
 800f7ea:	b00b      	add	sp, #44	; 0x2c
 800f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f0:	463e      	mov	r6, r7
 800f7f2:	4625      	mov	r5, r4
 800f7f4:	2401      	movs	r4, #1
 800f7f6:	e7cc      	b.n	800f792 <__gethex+0xce>
 800f7f8:	f04f 0900 	mov.w	r9, #0
 800f7fc:	1cb1      	adds	r1, r6, #2
 800f7fe:	e7d5      	b.n	800f7ac <__gethex+0xe8>
 800f800:	f04f 0901 	mov.w	r9, #1
 800f804:	e7fa      	b.n	800f7fc <__gethex+0x138>
 800f806:	230a      	movs	r3, #10
 800f808:	fb03 0202 	mla	r2, r3, r2, r0
 800f80c:	3a10      	subs	r2, #16
 800f80e:	e7d6      	b.n	800f7be <__gethex+0xfa>
 800f810:	4631      	mov	r1, r6
 800f812:	e7e1      	b.n	800f7d8 <__gethex+0x114>
 800f814:	4621      	mov	r1, r4
 800f816:	1bf3      	subs	r3, r6, r7
 800f818:	3b01      	subs	r3, #1
 800f81a:	2b07      	cmp	r3, #7
 800f81c:	dc0a      	bgt.n	800f834 <__gethex+0x170>
 800f81e:	9802      	ldr	r0, [sp, #8]
 800f820:	f000 fa88 	bl	800fd34 <_Balloc>
 800f824:	4604      	mov	r4, r0
 800f826:	b940      	cbnz	r0, 800f83a <__gethex+0x176>
 800f828:	4602      	mov	r2, r0
 800f82a:	21de      	movs	r1, #222	; 0xde
 800f82c:	4b5b      	ldr	r3, [pc, #364]	; (800f99c <__gethex+0x2d8>)
 800f82e:	485c      	ldr	r0, [pc, #368]	; (800f9a0 <__gethex+0x2dc>)
 800f830:	f001 f9a8 	bl	8010b84 <__assert_func>
 800f834:	3101      	adds	r1, #1
 800f836:	105b      	asrs	r3, r3, #1
 800f838:	e7ef      	b.n	800f81a <__gethex+0x156>
 800f83a:	f04f 0b00 	mov.w	fp, #0
 800f83e:	f100 0914 	add.w	r9, r0, #20
 800f842:	f1ca 0301 	rsb	r3, sl, #1
 800f846:	f8cd 9010 	str.w	r9, [sp, #16]
 800f84a:	f8cd b004 	str.w	fp, [sp, #4]
 800f84e:	9308      	str	r3, [sp, #32]
 800f850:	42b7      	cmp	r7, r6
 800f852:	d33f      	bcc.n	800f8d4 <__gethex+0x210>
 800f854:	9f04      	ldr	r7, [sp, #16]
 800f856:	9b01      	ldr	r3, [sp, #4]
 800f858:	f847 3b04 	str.w	r3, [r7], #4
 800f85c:	eba7 0709 	sub.w	r7, r7, r9
 800f860:	10bf      	asrs	r7, r7, #2
 800f862:	6127      	str	r7, [r4, #16]
 800f864:	4618      	mov	r0, r3
 800f866:	f000 fb57 	bl	800ff18 <__hi0bits>
 800f86a:	017f      	lsls	r7, r7, #5
 800f86c:	f8d8 6000 	ldr.w	r6, [r8]
 800f870:	1a3f      	subs	r7, r7, r0
 800f872:	42b7      	cmp	r7, r6
 800f874:	dd62      	ble.n	800f93c <__gethex+0x278>
 800f876:	1bbf      	subs	r7, r7, r6
 800f878:	4639      	mov	r1, r7
 800f87a:	4620      	mov	r0, r4
 800f87c:	f000 fef1 	bl	8010662 <__any_on>
 800f880:	4682      	mov	sl, r0
 800f882:	b1a8      	cbz	r0, 800f8b0 <__gethex+0x1ec>
 800f884:	f04f 0a01 	mov.w	sl, #1
 800f888:	1e7b      	subs	r3, r7, #1
 800f88a:	1159      	asrs	r1, r3, #5
 800f88c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f890:	f003 021f 	and.w	r2, r3, #31
 800f894:	fa0a f202 	lsl.w	r2, sl, r2
 800f898:	420a      	tst	r2, r1
 800f89a:	d009      	beq.n	800f8b0 <__gethex+0x1ec>
 800f89c:	4553      	cmp	r3, sl
 800f89e:	dd05      	ble.n	800f8ac <__gethex+0x1e8>
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	1eb9      	subs	r1, r7, #2
 800f8a4:	f000 fedd 	bl	8010662 <__any_on>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d144      	bne.n	800f936 <__gethex+0x272>
 800f8ac:	f04f 0a02 	mov.w	sl, #2
 800f8b0:	4639      	mov	r1, r7
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f7ff fe9e 	bl	800f5f4 <rshift>
 800f8b8:	443d      	add	r5, r7
 800f8ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8be:	42ab      	cmp	r3, r5
 800f8c0:	da4a      	bge.n	800f958 <__gethex+0x294>
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	9802      	ldr	r0, [sp, #8]
 800f8c6:	f000 fa75 	bl	800fdb4 <_Bfree>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f8ce:	27a3      	movs	r7, #163	; 0xa3
 800f8d0:	6013      	str	r3, [r2, #0]
 800f8d2:	e789      	b.n	800f7e8 <__gethex+0x124>
 800f8d4:	1e73      	subs	r3, r6, #1
 800f8d6:	9a06      	ldr	r2, [sp, #24]
 800f8d8:	9307      	str	r3, [sp, #28]
 800f8da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d019      	beq.n	800f916 <__gethex+0x252>
 800f8e2:	f1bb 0f20 	cmp.w	fp, #32
 800f8e6:	d107      	bne.n	800f8f8 <__gethex+0x234>
 800f8e8:	9b04      	ldr	r3, [sp, #16]
 800f8ea:	9a01      	ldr	r2, [sp, #4]
 800f8ec:	f843 2b04 	str.w	r2, [r3], #4
 800f8f0:	9304      	str	r3, [sp, #16]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	469b      	mov	fp, r3
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f8fc:	f7ff fecd 	bl	800f69a <__hexdig_fun>
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	f000 000f 	and.w	r0, r0, #15
 800f906:	fa00 f00b 	lsl.w	r0, r0, fp
 800f90a:	4303      	orrs	r3, r0
 800f90c:	9301      	str	r3, [sp, #4]
 800f90e:	f10b 0b04 	add.w	fp, fp, #4
 800f912:	9b07      	ldr	r3, [sp, #28]
 800f914:	e00d      	b.n	800f932 <__gethex+0x26e>
 800f916:	9a08      	ldr	r2, [sp, #32]
 800f918:	1e73      	subs	r3, r6, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	42bb      	cmp	r3, r7
 800f91e:	d3e0      	bcc.n	800f8e2 <__gethex+0x21e>
 800f920:	4618      	mov	r0, r3
 800f922:	4652      	mov	r2, sl
 800f924:	9903      	ldr	r1, [sp, #12]
 800f926:	9309      	str	r3, [sp, #36]	; 0x24
 800f928:	f7fe f9c0 	bl	800dcac <strncmp>
 800f92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f92e:	2800      	cmp	r0, #0
 800f930:	d1d7      	bne.n	800f8e2 <__gethex+0x21e>
 800f932:	461e      	mov	r6, r3
 800f934:	e78c      	b.n	800f850 <__gethex+0x18c>
 800f936:	f04f 0a03 	mov.w	sl, #3
 800f93a:	e7b9      	b.n	800f8b0 <__gethex+0x1ec>
 800f93c:	da09      	bge.n	800f952 <__gethex+0x28e>
 800f93e:	1bf7      	subs	r7, r6, r7
 800f940:	4621      	mov	r1, r4
 800f942:	463a      	mov	r2, r7
 800f944:	9802      	ldr	r0, [sp, #8]
 800f946:	f000 fc4d 	bl	80101e4 <__lshift>
 800f94a:	4604      	mov	r4, r0
 800f94c:	1bed      	subs	r5, r5, r7
 800f94e:	f100 0914 	add.w	r9, r0, #20
 800f952:	f04f 0a00 	mov.w	sl, #0
 800f956:	e7b0      	b.n	800f8ba <__gethex+0x1f6>
 800f958:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f95c:	42a8      	cmp	r0, r5
 800f95e:	dd72      	ble.n	800fa46 <__gethex+0x382>
 800f960:	1b45      	subs	r5, r0, r5
 800f962:	42ae      	cmp	r6, r5
 800f964:	dc35      	bgt.n	800f9d2 <__gethex+0x30e>
 800f966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f96a:	2b02      	cmp	r3, #2
 800f96c:	d029      	beq.n	800f9c2 <__gethex+0x2fe>
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d02b      	beq.n	800f9ca <__gethex+0x306>
 800f972:	2b01      	cmp	r3, #1
 800f974:	d11c      	bne.n	800f9b0 <__gethex+0x2ec>
 800f976:	42ae      	cmp	r6, r5
 800f978:	d11a      	bne.n	800f9b0 <__gethex+0x2ec>
 800f97a:	2e01      	cmp	r6, #1
 800f97c:	d112      	bne.n	800f9a4 <__gethex+0x2e0>
 800f97e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f982:	9a05      	ldr	r2, [sp, #20]
 800f984:	2762      	movs	r7, #98	; 0x62
 800f986:	6013      	str	r3, [r2, #0]
 800f988:	2301      	movs	r3, #1
 800f98a:	6123      	str	r3, [r4, #16]
 800f98c:	f8c9 3000 	str.w	r3, [r9]
 800f990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f992:	601c      	str	r4, [r3, #0]
 800f994:	e728      	b.n	800f7e8 <__gethex+0x124>
 800f996:	bf00      	nop
 800f998:	08011be0 	.word	0x08011be0
 800f99c:	08011b67 	.word	0x08011b67
 800f9a0:	08011b78 	.word	0x08011b78
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	1e71      	subs	r1, r6, #1
 800f9a8:	f000 fe5b 	bl	8010662 <__any_on>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d1e6      	bne.n	800f97e <__gethex+0x2ba>
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	9802      	ldr	r0, [sp, #8]
 800f9b4:	f000 f9fe 	bl	800fdb4 <_Bfree>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f9bc:	2750      	movs	r7, #80	; 0x50
 800f9be:	6013      	str	r3, [r2, #0]
 800f9c0:	e712      	b.n	800f7e8 <__gethex+0x124>
 800f9c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d1f3      	bne.n	800f9b0 <__gethex+0x2ec>
 800f9c8:	e7d9      	b.n	800f97e <__gethex+0x2ba>
 800f9ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1d6      	bne.n	800f97e <__gethex+0x2ba>
 800f9d0:	e7ee      	b.n	800f9b0 <__gethex+0x2ec>
 800f9d2:	1e6f      	subs	r7, r5, #1
 800f9d4:	f1ba 0f00 	cmp.w	sl, #0
 800f9d8:	d132      	bne.n	800fa40 <__gethex+0x37c>
 800f9da:	b127      	cbz	r7, 800f9e6 <__gethex+0x322>
 800f9dc:	4639      	mov	r1, r7
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 fe3f 	bl	8010662 <__any_on>
 800f9e4:	4682      	mov	sl, r0
 800f9e6:	2101      	movs	r1, #1
 800f9e8:	117b      	asrs	r3, r7, #5
 800f9ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f9ee:	f007 071f 	and.w	r7, r7, #31
 800f9f2:	fa01 f707 	lsl.w	r7, r1, r7
 800f9f6:	421f      	tst	r7, r3
 800f9f8:	f04f 0702 	mov.w	r7, #2
 800f9fc:	4629      	mov	r1, r5
 800f9fe:	4620      	mov	r0, r4
 800fa00:	bf18      	it	ne
 800fa02:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa06:	1b76      	subs	r6, r6, r5
 800fa08:	f7ff fdf4 	bl	800f5f4 <rshift>
 800fa0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fa10:	f1ba 0f00 	cmp.w	sl, #0
 800fa14:	d048      	beq.n	800faa8 <__gethex+0x3e4>
 800fa16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d015      	beq.n	800fa4a <__gethex+0x386>
 800fa1e:	2b03      	cmp	r3, #3
 800fa20:	d017      	beq.n	800fa52 <__gethex+0x38e>
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d109      	bne.n	800fa3a <__gethex+0x376>
 800fa26:	f01a 0f02 	tst.w	sl, #2
 800fa2a:	d006      	beq.n	800fa3a <__gethex+0x376>
 800fa2c:	f8d9 0000 	ldr.w	r0, [r9]
 800fa30:	ea4a 0a00 	orr.w	sl, sl, r0
 800fa34:	f01a 0f01 	tst.w	sl, #1
 800fa38:	d10e      	bne.n	800fa58 <__gethex+0x394>
 800fa3a:	f047 0710 	orr.w	r7, r7, #16
 800fa3e:	e033      	b.n	800faa8 <__gethex+0x3e4>
 800fa40:	f04f 0a01 	mov.w	sl, #1
 800fa44:	e7cf      	b.n	800f9e6 <__gethex+0x322>
 800fa46:	2701      	movs	r7, #1
 800fa48:	e7e2      	b.n	800fa10 <__gethex+0x34c>
 800fa4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa4c:	f1c3 0301 	rsb	r3, r3, #1
 800fa50:	9315      	str	r3, [sp, #84]	; 0x54
 800fa52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d0f0      	beq.n	800fa3a <__gethex+0x376>
 800fa58:	f04f 0c00 	mov.w	ip, #0
 800fa5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa60:	f104 0314 	add.w	r3, r4, #20
 800fa64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fa68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa72:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fa76:	d01c      	beq.n	800fab2 <__gethex+0x3ee>
 800fa78:	3201      	adds	r2, #1
 800fa7a:	6002      	str	r2, [r0, #0]
 800fa7c:	2f02      	cmp	r7, #2
 800fa7e:	f104 0314 	add.w	r3, r4, #20
 800fa82:	d13d      	bne.n	800fb00 <__gethex+0x43c>
 800fa84:	f8d8 2000 	ldr.w	r2, [r8]
 800fa88:	3a01      	subs	r2, #1
 800fa8a:	42b2      	cmp	r2, r6
 800fa8c:	d10a      	bne.n	800faa4 <__gethex+0x3e0>
 800fa8e:	2201      	movs	r2, #1
 800fa90:	1171      	asrs	r1, r6, #5
 800fa92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa96:	f006 061f 	and.w	r6, r6, #31
 800fa9a:	fa02 f606 	lsl.w	r6, r2, r6
 800fa9e:	421e      	tst	r6, r3
 800faa0:	bf18      	it	ne
 800faa2:	4617      	movne	r7, r2
 800faa4:	f047 0720 	orr.w	r7, r7, #32
 800faa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faaa:	601c      	str	r4, [r3, #0]
 800faac:	9b05      	ldr	r3, [sp, #20]
 800faae:	601d      	str	r5, [r3, #0]
 800fab0:	e69a      	b.n	800f7e8 <__gethex+0x124>
 800fab2:	4299      	cmp	r1, r3
 800fab4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fab8:	d8d8      	bhi.n	800fa6c <__gethex+0x3a8>
 800faba:	68a3      	ldr	r3, [r4, #8]
 800fabc:	459b      	cmp	fp, r3
 800fabe:	db17      	blt.n	800faf0 <__gethex+0x42c>
 800fac0:	6861      	ldr	r1, [r4, #4]
 800fac2:	9802      	ldr	r0, [sp, #8]
 800fac4:	3101      	adds	r1, #1
 800fac6:	f000 f935 	bl	800fd34 <_Balloc>
 800faca:	4681      	mov	r9, r0
 800facc:	b918      	cbnz	r0, 800fad6 <__gethex+0x412>
 800face:	4602      	mov	r2, r0
 800fad0:	2184      	movs	r1, #132	; 0x84
 800fad2:	4b19      	ldr	r3, [pc, #100]	; (800fb38 <__gethex+0x474>)
 800fad4:	e6ab      	b.n	800f82e <__gethex+0x16a>
 800fad6:	6922      	ldr	r2, [r4, #16]
 800fad8:	f104 010c 	add.w	r1, r4, #12
 800fadc:	3202      	adds	r2, #2
 800fade:	0092      	lsls	r2, r2, #2
 800fae0:	300c      	adds	r0, #12
 800fae2:	f000 f919 	bl	800fd18 <memcpy>
 800fae6:	4621      	mov	r1, r4
 800fae8:	9802      	ldr	r0, [sp, #8]
 800faea:	f000 f963 	bl	800fdb4 <_Bfree>
 800faee:	464c      	mov	r4, r9
 800faf0:	6923      	ldr	r3, [r4, #16]
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	6122      	str	r2, [r4, #16]
 800faf6:	2201      	movs	r2, #1
 800faf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fafc:	615a      	str	r2, [r3, #20]
 800fafe:	e7bd      	b.n	800fa7c <__gethex+0x3b8>
 800fb00:	6922      	ldr	r2, [r4, #16]
 800fb02:	455a      	cmp	r2, fp
 800fb04:	dd0b      	ble.n	800fb1e <__gethex+0x45a>
 800fb06:	2101      	movs	r1, #1
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f7ff fd73 	bl	800f5f4 <rshift>
 800fb0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb12:	3501      	adds	r5, #1
 800fb14:	42ab      	cmp	r3, r5
 800fb16:	f6ff aed4 	blt.w	800f8c2 <__gethex+0x1fe>
 800fb1a:	2701      	movs	r7, #1
 800fb1c:	e7c2      	b.n	800faa4 <__gethex+0x3e0>
 800fb1e:	f016 061f 	ands.w	r6, r6, #31
 800fb22:	d0fa      	beq.n	800fb1a <__gethex+0x456>
 800fb24:	4453      	add	r3, sl
 800fb26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fb2a:	f000 f9f5 	bl	800ff18 <__hi0bits>
 800fb2e:	f1c6 0620 	rsb	r6, r6, #32
 800fb32:	42b0      	cmp	r0, r6
 800fb34:	dbe7      	blt.n	800fb06 <__gethex+0x442>
 800fb36:	e7f0      	b.n	800fb1a <__gethex+0x456>
 800fb38:	08011b67 	.word	0x08011b67

0800fb3c <L_shift>:
 800fb3c:	f1c2 0208 	rsb	r2, r2, #8
 800fb40:	0092      	lsls	r2, r2, #2
 800fb42:	b570      	push	{r4, r5, r6, lr}
 800fb44:	f1c2 0620 	rsb	r6, r2, #32
 800fb48:	6843      	ldr	r3, [r0, #4]
 800fb4a:	6804      	ldr	r4, [r0, #0]
 800fb4c:	fa03 f506 	lsl.w	r5, r3, r6
 800fb50:	432c      	orrs	r4, r5
 800fb52:	40d3      	lsrs	r3, r2
 800fb54:	6004      	str	r4, [r0, #0]
 800fb56:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb5a:	4288      	cmp	r0, r1
 800fb5c:	d3f4      	bcc.n	800fb48 <L_shift+0xc>
 800fb5e:	bd70      	pop	{r4, r5, r6, pc}

0800fb60 <__match>:
 800fb60:	b530      	push	{r4, r5, lr}
 800fb62:	6803      	ldr	r3, [r0, #0]
 800fb64:	3301      	adds	r3, #1
 800fb66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb6a:	b914      	cbnz	r4, 800fb72 <__match+0x12>
 800fb6c:	6003      	str	r3, [r0, #0]
 800fb6e:	2001      	movs	r0, #1
 800fb70:	bd30      	pop	{r4, r5, pc}
 800fb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fb7a:	2d19      	cmp	r5, #25
 800fb7c:	bf98      	it	ls
 800fb7e:	3220      	addls	r2, #32
 800fb80:	42a2      	cmp	r2, r4
 800fb82:	d0f0      	beq.n	800fb66 <__match+0x6>
 800fb84:	2000      	movs	r0, #0
 800fb86:	e7f3      	b.n	800fb70 <__match+0x10>

0800fb88 <__hexnan>:
 800fb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8c:	2500      	movs	r5, #0
 800fb8e:	680b      	ldr	r3, [r1, #0]
 800fb90:	4682      	mov	sl, r0
 800fb92:	115e      	asrs	r6, r3, #5
 800fb94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fb98:	f013 031f 	ands.w	r3, r3, #31
 800fb9c:	bf18      	it	ne
 800fb9e:	3604      	addne	r6, #4
 800fba0:	1f37      	subs	r7, r6, #4
 800fba2:	46b9      	mov	r9, r7
 800fba4:	463c      	mov	r4, r7
 800fba6:	46ab      	mov	fp, r5
 800fba8:	b087      	sub	sp, #28
 800fbaa:	4690      	mov	r8, r2
 800fbac:	6802      	ldr	r2, [r0, #0]
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	f846 5c04 	str.w	r5, [r6, #-4]
 800fbb4:	9502      	str	r5, [sp, #8]
 800fbb6:	7851      	ldrb	r1, [r2, #1]
 800fbb8:	1c53      	adds	r3, r2, #1
 800fbba:	9303      	str	r3, [sp, #12]
 800fbbc:	b341      	cbz	r1, 800fc10 <__hexnan+0x88>
 800fbbe:	4608      	mov	r0, r1
 800fbc0:	9205      	str	r2, [sp, #20]
 800fbc2:	9104      	str	r1, [sp, #16]
 800fbc4:	f7ff fd69 	bl	800f69a <__hexdig_fun>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d14f      	bne.n	800fc6c <__hexnan+0xe4>
 800fbcc:	9904      	ldr	r1, [sp, #16]
 800fbce:	9a05      	ldr	r2, [sp, #20]
 800fbd0:	2920      	cmp	r1, #32
 800fbd2:	d818      	bhi.n	800fc06 <__hexnan+0x7e>
 800fbd4:	9b02      	ldr	r3, [sp, #8]
 800fbd6:	459b      	cmp	fp, r3
 800fbd8:	dd13      	ble.n	800fc02 <__hexnan+0x7a>
 800fbda:	454c      	cmp	r4, r9
 800fbdc:	d206      	bcs.n	800fbec <__hexnan+0x64>
 800fbde:	2d07      	cmp	r5, #7
 800fbe0:	dc04      	bgt.n	800fbec <__hexnan+0x64>
 800fbe2:	462a      	mov	r2, r5
 800fbe4:	4649      	mov	r1, r9
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f7ff ffa8 	bl	800fb3c <L_shift>
 800fbec:	4544      	cmp	r4, r8
 800fbee:	d950      	bls.n	800fc92 <__hexnan+0x10a>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	f1a4 0904 	sub.w	r9, r4, #4
 800fbf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbfa:	461d      	mov	r5, r3
 800fbfc:	464c      	mov	r4, r9
 800fbfe:	f8cd b008 	str.w	fp, [sp, #8]
 800fc02:	9a03      	ldr	r2, [sp, #12]
 800fc04:	e7d7      	b.n	800fbb6 <__hexnan+0x2e>
 800fc06:	2929      	cmp	r1, #41	; 0x29
 800fc08:	d156      	bne.n	800fcb8 <__hexnan+0x130>
 800fc0a:	3202      	adds	r2, #2
 800fc0c:	f8ca 2000 	str.w	r2, [sl]
 800fc10:	f1bb 0f00 	cmp.w	fp, #0
 800fc14:	d050      	beq.n	800fcb8 <__hexnan+0x130>
 800fc16:	454c      	cmp	r4, r9
 800fc18:	d206      	bcs.n	800fc28 <__hexnan+0xa0>
 800fc1a:	2d07      	cmp	r5, #7
 800fc1c:	dc04      	bgt.n	800fc28 <__hexnan+0xa0>
 800fc1e:	462a      	mov	r2, r5
 800fc20:	4649      	mov	r1, r9
 800fc22:	4620      	mov	r0, r4
 800fc24:	f7ff ff8a 	bl	800fb3c <L_shift>
 800fc28:	4544      	cmp	r4, r8
 800fc2a:	d934      	bls.n	800fc96 <__hexnan+0x10e>
 800fc2c:	4623      	mov	r3, r4
 800fc2e:	f1a8 0204 	sub.w	r2, r8, #4
 800fc32:	f853 1b04 	ldr.w	r1, [r3], #4
 800fc36:	429f      	cmp	r7, r3
 800fc38:	f842 1f04 	str.w	r1, [r2, #4]!
 800fc3c:	d2f9      	bcs.n	800fc32 <__hexnan+0xaa>
 800fc3e:	1b3b      	subs	r3, r7, r4
 800fc40:	f023 0303 	bic.w	r3, r3, #3
 800fc44:	3304      	adds	r3, #4
 800fc46:	3401      	adds	r4, #1
 800fc48:	3e03      	subs	r6, #3
 800fc4a:	42b4      	cmp	r4, r6
 800fc4c:	bf88      	it	hi
 800fc4e:	2304      	movhi	r3, #4
 800fc50:	2200      	movs	r2, #0
 800fc52:	4443      	add	r3, r8
 800fc54:	f843 2b04 	str.w	r2, [r3], #4
 800fc58:	429f      	cmp	r7, r3
 800fc5a:	d2fb      	bcs.n	800fc54 <__hexnan+0xcc>
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	b91b      	cbnz	r3, 800fc68 <__hexnan+0xe0>
 800fc60:	4547      	cmp	r7, r8
 800fc62:	d127      	bne.n	800fcb4 <__hexnan+0x12c>
 800fc64:	2301      	movs	r3, #1
 800fc66:	603b      	str	r3, [r7, #0]
 800fc68:	2005      	movs	r0, #5
 800fc6a:	e026      	b.n	800fcba <__hexnan+0x132>
 800fc6c:	3501      	adds	r5, #1
 800fc6e:	2d08      	cmp	r5, #8
 800fc70:	f10b 0b01 	add.w	fp, fp, #1
 800fc74:	dd06      	ble.n	800fc84 <__hexnan+0xfc>
 800fc76:	4544      	cmp	r4, r8
 800fc78:	d9c3      	bls.n	800fc02 <__hexnan+0x7a>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	2501      	movs	r5, #1
 800fc7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc82:	3c04      	subs	r4, #4
 800fc84:	6822      	ldr	r2, [r4, #0]
 800fc86:	f000 000f 	and.w	r0, r0, #15
 800fc8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fc8e:	6022      	str	r2, [r4, #0]
 800fc90:	e7b7      	b.n	800fc02 <__hexnan+0x7a>
 800fc92:	2508      	movs	r5, #8
 800fc94:	e7b5      	b.n	800fc02 <__hexnan+0x7a>
 800fc96:	9b01      	ldr	r3, [sp, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d0df      	beq.n	800fc5c <__hexnan+0xd4>
 800fc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fca0:	f1c3 0320 	rsb	r3, r3, #32
 800fca4:	fa22 f303 	lsr.w	r3, r2, r3
 800fca8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fcac:	401a      	ands	r2, r3
 800fcae:	f846 2c04 	str.w	r2, [r6, #-4]
 800fcb2:	e7d3      	b.n	800fc5c <__hexnan+0xd4>
 800fcb4:	3f04      	subs	r7, #4
 800fcb6:	e7d1      	b.n	800fc5c <__hexnan+0xd4>
 800fcb8:	2004      	movs	r0, #4
 800fcba:	b007      	add	sp, #28
 800fcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcc0 <_localeconv_r>:
 800fcc0:	4800      	ldr	r0, [pc, #0]	; (800fcc4 <_localeconv_r+0x4>)
 800fcc2:	4770      	bx	lr
 800fcc4:	200002ec 	.word	0x200002ec

0800fcc8 <malloc>:
 800fcc8:	4b02      	ldr	r3, [pc, #8]	; (800fcd4 <malloc+0xc>)
 800fcca:	4601      	mov	r1, r0
 800fccc:	6818      	ldr	r0, [r3, #0]
 800fcce:	f000 bd65 	b.w	801079c <_malloc_r>
 800fcd2:	bf00      	nop
 800fcd4:	20000194 	.word	0x20000194

0800fcd8 <__ascii_mbtowc>:
 800fcd8:	b082      	sub	sp, #8
 800fcda:	b901      	cbnz	r1, 800fcde <__ascii_mbtowc+0x6>
 800fcdc:	a901      	add	r1, sp, #4
 800fcde:	b142      	cbz	r2, 800fcf2 <__ascii_mbtowc+0x1a>
 800fce0:	b14b      	cbz	r3, 800fcf6 <__ascii_mbtowc+0x1e>
 800fce2:	7813      	ldrb	r3, [r2, #0]
 800fce4:	600b      	str	r3, [r1, #0]
 800fce6:	7812      	ldrb	r2, [r2, #0]
 800fce8:	1e10      	subs	r0, r2, #0
 800fcea:	bf18      	it	ne
 800fcec:	2001      	movne	r0, #1
 800fcee:	b002      	add	sp, #8
 800fcf0:	4770      	bx	lr
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	e7fb      	b.n	800fcee <__ascii_mbtowc+0x16>
 800fcf6:	f06f 0001 	mvn.w	r0, #1
 800fcfa:	e7f8      	b.n	800fcee <__ascii_mbtowc+0x16>

0800fcfc <memchr>:
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	b510      	push	{r4, lr}
 800fd00:	b2c9      	uxtb	r1, r1
 800fd02:	4402      	add	r2, r0
 800fd04:	4293      	cmp	r3, r2
 800fd06:	4618      	mov	r0, r3
 800fd08:	d101      	bne.n	800fd0e <memchr+0x12>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	e003      	b.n	800fd16 <memchr+0x1a>
 800fd0e:	7804      	ldrb	r4, [r0, #0]
 800fd10:	3301      	adds	r3, #1
 800fd12:	428c      	cmp	r4, r1
 800fd14:	d1f6      	bne.n	800fd04 <memchr+0x8>
 800fd16:	bd10      	pop	{r4, pc}

0800fd18 <memcpy>:
 800fd18:	440a      	add	r2, r1
 800fd1a:	4291      	cmp	r1, r2
 800fd1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd20:	d100      	bne.n	800fd24 <memcpy+0xc>
 800fd22:	4770      	bx	lr
 800fd24:	b510      	push	{r4, lr}
 800fd26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd2a:	4291      	cmp	r1, r2
 800fd2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd30:	d1f9      	bne.n	800fd26 <memcpy+0xe>
 800fd32:	bd10      	pop	{r4, pc}

0800fd34 <_Balloc>:
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd38:	4604      	mov	r4, r0
 800fd3a:	460d      	mov	r5, r1
 800fd3c:	b976      	cbnz	r6, 800fd5c <_Balloc+0x28>
 800fd3e:	2010      	movs	r0, #16
 800fd40:	f7ff ffc2 	bl	800fcc8 <malloc>
 800fd44:	4602      	mov	r2, r0
 800fd46:	6260      	str	r0, [r4, #36]	; 0x24
 800fd48:	b920      	cbnz	r0, 800fd54 <_Balloc+0x20>
 800fd4a:	2166      	movs	r1, #102	; 0x66
 800fd4c:	4b17      	ldr	r3, [pc, #92]	; (800fdac <_Balloc+0x78>)
 800fd4e:	4818      	ldr	r0, [pc, #96]	; (800fdb0 <_Balloc+0x7c>)
 800fd50:	f000 ff18 	bl	8010b84 <__assert_func>
 800fd54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd58:	6006      	str	r6, [r0, #0]
 800fd5a:	60c6      	str	r6, [r0, #12]
 800fd5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd5e:	68f3      	ldr	r3, [r6, #12]
 800fd60:	b183      	cbz	r3, 800fd84 <_Balloc+0x50>
 800fd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd6a:	b9b8      	cbnz	r0, 800fd9c <_Balloc+0x68>
 800fd6c:	2101      	movs	r1, #1
 800fd6e:	fa01 f605 	lsl.w	r6, r1, r5
 800fd72:	1d72      	adds	r2, r6, #5
 800fd74:	4620      	mov	r0, r4
 800fd76:	0092      	lsls	r2, r2, #2
 800fd78:	f000 fc94 	bl	80106a4 <_calloc_r>
 800fd7c:	b160      	cbz	r0, 800fd98 <_Balloc+0x64>
 800fd7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd82:	e00e      	b.n	800fda2 <_Balloc+0x6e>
 800fd84:	2221      	movs	r2, #33	; 0x21
 800fd86:	2104      	movs	r1, #4
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f000 fc8b 	bl	80106a4 <_calloc_r>
 800fd8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd90:	60f0      	str	r0, [r6, #12]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1e4      	bne.n	800fd62 <_Balloc+0x2e>
 800fd98:	2000      	movs	r0, #0
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	6802      	ldr	r2, [r0, #0]
 800fd9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fda2:	2300      	movs	r3, #0
 800fda4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fda8:	e7f7      	b.n	800fd9a <_Balloc+0x66>
 800fdaa:	bf00      	nop
 800fdac:	08011af5 	.word	0x08011af5
 800fdb0:	08011bf4 	.word	0x08011bf4

0800fdb4 <_Bfree>:
 800fdb4:	b570      	push	{r4, r5, r6, lr}
 800fdb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdb8:	4605      	mov	r5, r0
 800fdba:	460c      	mov	r4, r1
 800fdbc:	b976      	cbnz	r6, 800fddc <_Bfree+0x28>
 800fdbe:	2010      	movs	r0, #16
 800fdc0:	f7ff ff82 	bl	800fcc8 <malloc>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	6268      	str	r0, [r5, #36]	; 0x24
 800fdc8:	b920      	cbnz	r0, 800fdd4 <_Bfree+0x20>
 800fdca:	218a      	movs	r1, #138	; 0x8a
 800fdcc:	4b08      	ldr	r3, [pc, #32]	; (800fdf0 <_Bfree+0x3c>)
 800fdce:	4809      	ldr	r0, [pc, #36]	; (800fdf4 <_Bfree+0x40>)
 800fdd0:	f000 fed8 	bl	8010b84 <__assert_func>
 800fdd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd8:	6006      	str	r6, [r0, #0]
 800fdda:	60c6      	str	r6, [r0, #12]
 800fddc:	b13c      	cbz	r4, 800fdee <_Bfree+0x3a>
 800fdde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fde0:	6862      	ldr	r2, [r4, #4]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fde8:	6021      	str	r1, [r4, #0]
 800fdea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	08011af5 	.word	0x08011af5
 800fdf4:	08011bf4 	.word	0x08011bf4

0800fdf8 <__multadd>:
 800fdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfc:	4607      	mov	r7, r0
 800fdfe:	460c      	mov	r4, r1
 800fe00:	461e      	mov	r6, r3
 800fe02:	2000      	movs	r0, #0
 800fe04:	690d      	ldr	r5, [r1, #16]
 800fe06:	f101 0c14 	add.w	ip, r1, #20
 800fe0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe0e:	3001      	adds	r0, #1
 800fe10:	b299      	uxth	r1, r3
 800fe12:	fb02 6101 	mla	r1, r2, r1, r6
 800fe16:	0c1e      	lsrs	r6, r3, #16
 800fe18:	0c0b      	lsrs	r3, r1, #16
 800fe1a:	fb02 3306 	mla	r3, r2, r6, r3
 800fe1e:	b289      	uxth	r1, r1
 800fe20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe24:	4285      	cmp	r5, r0
 800fe26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe2a:	f84c 1b04 	str.w	r1, [ip], #4
 800fe2e:	dcec      	bgt.n	800fe0a <__multadd+0x12>
 800fe30:	b30e      	cbz	r6, 800fe76 <__multadd+0x7e>
 800fe32:	68a3      	ldr	r3, [r4, #8]
 800fe34:	42ab      	cmp	r3, r5
 800fe36:	dc19      	bgt.n	800fe6c <__multadd+0x74>
 800fe38:	6861      	ldr	r1, [r4, #4]
 800fe3a:	4638      	mov	r0, r7
 800fe3c:	3101      	adds	r1, #1
 800fe3e:	f7ff ff79 	bl	800fd34 <_Balloc>
 800fe42:	4680      	mov	r8, r0
 800fe44:	b928      	cbnz	r0, 800fe52 <__multadd+0x5a>
 800fe46:	4602      	mov	r2, r0
 800fe48:	21b5      	movs	r1, #181	; 0xb5
 800fe4a:	4b0c      	ldr	r3, [pc, #48]	; (800fe7c <__multadd+0x84>)
 800fe4c:	480c      	ldr	r0, [pc, #48]	; (800fe80 <__multadd+0x88>)
 800fe4e:	f000 fe99 	bl	8010b84 <__assert_func>
 800fe52:	6922      	ldr	r2, [r4, #16]
 800fe54:	f104 010c 	add.w	r1, r4, #12
 800fe58:	3202      	adds	r2, #2
 800fe5a:	0092      	lsls	r2, r2, #2
 800fe5c:	300c      	adds	r0, #12
 800fe5e:	f7ff ff5b 	bl	800fd18 <memcpy>
 800fe62:	4621      	mov	r1, r4
 800fe64:	4638      	mov	r0, r7
 800fe66:	f7ff ffa5 	bl	800fdb4 <_Bfree>
 800fe6a:	4644      	mov	r4, r8
 800fe6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe70:	3501      	adds	r5, #1
 800fe72:	615e      	str	r6, [r3, #20]
 800fe74:	6125      	str	r5, [r4, #16]
 800fe76:	4620      	mov	r0, r4
 800fe78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe7c:	08011b67 	.word	0x08011b67
 800fe80:	08011bf4 	.word	0x08011bf4

0800fe84 <__s2b>:
 800fe84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe88:	4615      	mov	r5, r2
 800fe8a:	2209      	movs	r2, #9
 800fe8c:	461f      	mov	r7, r3
 800fe8e:	3308      	adds	r3, #8
 800fe90:	460c      	mov	r4, r1
 800fe92:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe96:	4606      	mov	r6, r0
 800fe98:	2201      	movs	r2, #1
 800fe9a:	2100      	movs	r1, #0
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	db09      	blt.n	800feb4 <__s2b+0x30>
 800fea0:	4630      	mov	r0, r6
 800fea2:	f7ff ff47 	bl	800fd34 <_Balloc>
 800fea6:	b940      	cbnz	r0, 800feba <__s2b+0x36>
 800fea8:	4602      	mov	r2, r0
 800feaa:	21ce      	movs	r1, #206	; 0xce
 800feac:	4b18      	ldr	r3, [pc, #96]	; (800ff10 <__s2b+0x8c>)
 800feae:	4819      	ldr	r0, [pc, #100]	; (800ff14 <__s2b+0x90>)
 800feb0:	f000 fe68 	bl	8010b84 <__assert_func>
 800feb4:	0052      	lsls	r2, r2, #1
 800feb6:	3101      	adds	r1, #1
 800feb8:	e7f0      	b.n	800fe9c <__s2b+0x18>
 800feba:	9b08      	ldr	r3, [sp, #32]
 800febc:	2d09      	cmp	r5, #9
 800febe:	6143      	str	r3, [r0, #20]
 800fec0:	f04f 0301 	mov.w	r3, #1
 800fec4:	6103      	str	r3, [r0, #16]
 800fec6:	dd16      	ble.n	800fef6 <__s2b+0x72>
 800fec8:	f104 0909 	add.w	r9, r4, #9
 800fecc:	46c8      	mov	r8, r9
 800fece:	442c      	add	r4, r5
 800fed0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fed4:	4601      	mov	r1, r0
 800fed6:	220a      	movs	r2, #10
 800fed8:	4630      	mov	r0, r6
 800feda:	3b30      	subs	r3, #48	; 0x30
 800fedc:	f7ff ff8c 	bl	800fdf8 <__multadd>
 800fee0:	45a0      	cmp	r8, r4
 800fee2:	d1f5      	bne.n	800fed0 <__s2b+0x4c>
 800fee4:	f1a5 0408 	sub.w	r4, r5, #8
 800fee8:	444c      	add	r4, r9
 800feea:	1b2d      	subs	r5, r5, r4
 800feec:	1963      	adds	r3, r4, r5
 800feee:	42bb      	cmp	r3, r7
 800fef0:	db04      	blt.n	800fefc <__s2b+0x78>
 800fef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fef6:	2509      	movs	r5, #9
 800fef8:	340a      	adds	r4, #10
 800fefa:	e7f6      	b.n	800feea <__s2b+0x66>
 800fefc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff00:	4601      	mov	r1, r0
 800ff02:	220a      	movs	r2, #10
 800ff04:	4630      	mov	r0, r6
 800ff06:	3b30      	subs	r3, #48	; 0x30
 800ff08:	f7ff ff76 	bl	800fdf8 <__multadd>
 800ff0c:	e7ee      	b.n	800feec <__s2b+0x68>
 800ff0e:	bf00      	nop
 800ff10:	08011b67 	.word	0x08011b67
 800ff14:	08011bf4 	.word	0x08011bf4

0800ff18 <__hi0bits>:
 800ff18:	0c02      	lsrs	r2, r0, #16
 800ff1a:	0412      	lsls	r2, r2, #16
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	b9ca      	cbnz	r2, 800ff54 <__hi0bits+0x3c>
 800ff20:	0403      	lsls	r3, r0, #16
 800ff22:	2010      	movs	r0, #16
 800ff24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ff28:	bf04      	itt	eq
 800ff2a:	021b      	lsleq	r3, r3, #8
 800ff2c:	3008      	addeq	r0, #8
 800ff2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ff32:	bf04      	itt	eq
 800ff34:	011b      	lsleq	r3, r3, #4
 800ff36:	3004      	addeq	r0, #4
 800ff38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ff3c:	bf04      	itt	eq
 800ff3e:	009b      	lsleq	r3, r3, #2
 800ff40:	3002      	addeq	r0, #2
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	db05      	blt.n	800ff52 <__hi0bits+0x3a>
 800ff46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ff4a:	f100 0001 	add.w	r0, r0, #1
 800ff4e:	bf08      	it	eq
 800ff50:	2020      	moveq	r0, #32
 800ff52:	4770      	bx	lr
 800ff54:	2000      	movs	r0, #0
 800ff56:	e7e5      	b.n	800ff24 <__hi0bits+0xc>

0800ff58 <__lo0bits>:
 800ff58:	6803      	ldr	r3, [r0, #0]
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	f013 0007 	ands.w	r0, r3, #7
 800ff60:	d00b      	beq.n	800ff7a <__lo0bits+0x22>
 800ff62:	07d9      	lsls	r1, r3, #31
 800ff64:	d421      	bmi.n	800ffaa <__lo0bits+0x52>
 800ff66:	0798      	lsls	r0, r3, #30
 800ff68:	bf49      	itett	mi
 800ff6a:	085b      	lsrmi	r3, r3, #1
 800ff6c:	089b      	lsrpl	r3, r3, #2
 800ff6e:	2001      	movmi	r0, #1
 800ff70:	6013      	strmi	r3, [r2, #0]
 800ff72:	bf5c      	itt	pl
 800ff74:	2002      	movpl	r0, #2
 800ff76:	6013      	strpl	r3, [r2, #0]
 800ff78:	4770      	bx	lr
 800ff7a:	b299      	uxth	r1, r3
 800ff7c:	b909      	cbnz	r1, 800ff82 <__lo0bits+0x2a>
 800ff7e:	2010      	movs	r0, #16
 800ff80:	0c1b      	lsrs	r3, r3, #16
 800ff82:	b2d9      	uxtb	r1, r3
 800ff84:	b909      	cbnz	r1, 800ff8a <__lo0bits+0x32>
 800ff86:	3008      	adds	r0, #8
 800ff88:	0a1b      	lsrs	r3, r3, #8
 800ff8a:	0719      	lsls	r1, r3, #28
 800ff8c:	bf04      	itt	eq
 800ff8e:	091b      	lsreq	r3, r3, #4
 800ff90:	3004      	addeq	r0, #4
 800ff92:	0799      	lsls	r1, r3, #30
 800ff94:	bf04      	itt	eq
 800ff96:	089b      	lsreq	r3, r3, #2
 800ff98:	3002      	addeq	r0, #2
 800ff9a:	07d9      	lsls	r1, r3, #31
 800ff9c:	d403      	bmi.n	800ffa6 <__lo0bits+0x4e>
 800ff9e:	085b      	lsrs	r3, r3, #1
 800ffa0:	f100 0001 	add.w	r0, r0, #1
 800ffa4:	d003      	beq.n	800ffae <__lo0bits+0x56>
 800ffa6:	6013      	str	r3, [r2, #0]
 800ffa8:	4770      	bx	lr
 800ffaa:	2000      	movs	r0, #0
 800ffac:	4770      	bx	lr
 800ffae:	2020      	movs	r0, #32
 800ffb0:	4770      	bx	lr
	...

0800ffb4 <__i2b>:
 800ffb4:	b510      	push	{r4, lr}
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	2101      	movs	r1, #1
 800ffba:	f7ff febb 	bl	800fd34 <_Balloc>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	b928      	cbnz	r0, 800ffce <__i2b+0x1a>
 800ffc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ffc6:	4b04      	ldr	r3, [pc, #16]	; (800ffd8 <__i2b+0x24>)
 800ffc8:	4804      	ldr	r0, [pc, #16]	; (800ffdc <__i2b+0x28>)
 800ffca:	f000 fddb 	bl	8010b84 <__assert_func>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	6144      	str	r4, [r0, #20]
 800ffd2:	6103      	str	r3, [r0, #16]
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	bf00      	nop
 800ffd8:	08011b67 	.word	0x08011b67
 800ffdc:	08011bf4 	.word	0x08011bf4

0800ffe0 <__multiply>:
 800ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe4:	4691      	mov	r9, r2
 800ffe6:	690a      	ldr	r2, [r1, #16]
 800ffe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffec:	460c      	mov	r4, r1
 800ffee:	429a      	cmp	r2, r3
 800fff0:	bfbe      	ittt	lt
 800fff2:	460b      	movlt	r3, r1
 800fff4:	464c      	movlt	r4, r9
 800fff6:	4699      	movlt	r9, r3
 800fff8:	6927      	ldr	r7, [r4, #16]
 800fffa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fffe:	68a3      	ldr	r3, [r4, #8]
 8010000:	6861      	ldr	r1, [r4, #4]
 8010002:	eb07 060a 	add.w	r6, r7, sl
 8010006:	42b3      	cmp	r3, r6
 8010008:	b085      	sub	sp, #20
 801000a:	bfb8      	it	lt
 801000c:	3101      	addlt	r1, #1
 801000e:	f7ff fe91 	bl	800fd34 <_Balloc>
 8010012:	b930      	cbnz	r0, 8010022 <__multiply+0x42>
 8010014:	4602      	mov	r2, r0
 8010016:	f240 115d 	movw	r1, #349	; 0x15d
 801001a:	4b43      	ldr	r3, [pc, #268]	; (8010128 <__multiply+0x148>)
 801001c:	4843      	ldr	r0, [pc, #268]	; (801012c <__multiply+0x14c>)
 801001e:	f000 fdb1 	bl	8010b84 <__assert_func>
 8010022:	f100 0514 	add.w	r5, r0, #20
 8010026:	462b      	mov	r3, r5
 8010028:	2200      	movs	r2, #0
 801002a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801002e:	4543      	cmp	r3, r8
 8010030:	d321      	bcc.n	8010076 <__multiply+0x96>
 8010032:	f104 0314 	add.w	r3, r4, #20
 8010036:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801003a:	f109 0314 	add.w	r3, r9, #20
 801003e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010042:	9202      	str	r2, [sp, #8]
 8010044:	1b3a      	subs	r2, r7, r4
 8010046:	3a15      	subs	r2, #21
 8010048:	f022 0203 	bic.w	r2, r2, #3
 801004c:	3204      	adds	r2, #4
 801004e:	f104 0115 	add.w	r1, r4, #21
 8010052:	428f      	cmp	r7, r1
 8010054:	bf38      	it	cc
 8010056:	2204      	movcc	r2, #4
 8010058:	9201      	str	r2, [sp, #4]
 801005a:	9a02      	ldr	r2, [sp, #8]
 801005c:	9303      	str	r3, [sp, #12]
 801005e:	429a      	cmp	r2, r3
 8010060:	d80c      	bhi.n	801007c <__multiply+0x9c>
 8010062:	2e00      	cmp	r6, #0
 8010064:	dd03      	ble.n	801006e <__multiply+0x8e>
 8010066:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801006a:	2b00      	cmp	r3, #0
 801006c:	d059      	beq.n	8010122 <__multiply+0x142>
 801006e:	6106      	str	r6, [r0, #16]
 8010070:	b005      	add	sp, #20
 8010072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010076:	f843 2b04 	str.w	r2, [r3], #4
 801007a:	e7d8      	b.n	801002e <__multiply+0x4e>
 801007c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010080:	f1ba 0f00 	cmp.w	sl, #0
 8010084:	d023      	beq.n	80100ce <__multiply+0xee>
 8010086:	46a9      	mov	r9, r5
 8010088:	f04f 0c00 	mov.w	ip, #0
 801008c:	f104 0e14 	add.w	lr, r4, #20
 8010090:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010094:	f8d9 1000 	ldr.w	r1, [r9]
 8010098:	fa1f fb82 	uxth.w	fp, r2
 801009c:	b289      	uxth	r1, r1
 801009e:	fb0a 110b 	mla	r1, sl, fp, r1
 80100a2:	4461      	add	r1, ip
 80100a4:	f8d9 c000 	ldr.w	ip, [r9]
 80100a8:	0c12      	lsrs	r2, r2, #16
 80100aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80100ae:	fb0a c202 	mla	r2, sl, r2, ip
 80100b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100b6:	b289      	uxth	r1, r1
 80100b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100bc:	4577      	cmp	r7, lr
 80100be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100c2:	f849 1b04 	str.w	r1, [r9], #4
 80100c6:	d8e3      	bhi.n	8010090 <__multiply+0xb0>
 80100c8:	9a01      	ldr	r2, [sp, #4]
 80100ca:	f845 c002 	str.w	ip, [r5, r2]
 80100ce:	9a03      	ldr	r2, [sp, #12]
 80100d0:	3304      	adds	r3, #4
 80100d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80100d6:	f1b9 0f00 	cmp.w	r9, #0
 80100da:	d020      	beq.n	801011e <__multiply+0x13e>
 80100dc:	46ae      	mov	lr, r5
 80100de:	f04f 0a00 	mov.w	sl, #0
 80100e2:	6829      	ldr	r1, [r5, #0]
 80100e4:	f104 0c14 	add.w	ip, r4, #20
 80100e8:	f8bc b000 	ldrh.w	fp, [ip]
 80100ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80100f0:	b289      	uxth	r1, r1
 80100f2:	fb09 220b 	mla	r2, r9, fp, r2
 80100f6:	4492      	add	sl, r2
 80100f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80100fc:	f84e 1b04 	str.w	r1, [lr], #4
 8010100:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010104:	f8be 1000 	ldrh.w	r1, [lr]
 8010108:	0c12      	lsrs	r2, r2, #16
 801010a:	fb09 1102 	mla	r1, r9, r2, r1
 801010e:	4567      	cmp	r7, ip
 8010110:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010114:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010118:	d8e6      	bhi.n	80100e8 <__multiply+0x108>
 801011a:	9a01      	ldr	r2, [sp, #4]
 801011c:	50a9      	str	r1, [r5, r2]
 801011e:	3504      	adds	r5, #4
 8010120:	e79b      	b.n	801005a <__multiply+0x7a>
 8010122:	3e01      	subs	r6, #1
 8010124:	e79d      	b.n	8010062 <__multiply+0x82>
 8010126:	bf00      	nop
 8010128:	08011b67 	.word	0x08011b67
 801012c:	08011bf4 	.word	0x08011bf4

08010130 <__pow5mult>:
 8010130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010134:	4615      	mov	r5, r2
 8010136:	f012 0203 	ands.w	r2, r2, #3
 801013a:	4606      	mov	r6, r0
 801013c:	460f      	mov	r7, r1
 801013e:	d007      	beq.n	8010150 <__pow5mult+0x20>
 8010140:	4c25      	ldr	r4, [pc, #148]	; (80101d8 <__pow5mult+0xa8>)
 8010142:	3a01      	subs	r2, #1
 8010144:	2300      	movs	r3, #0
 8010146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801014a:	f7ff fe55 	bl	800fdf8 <__multadd>
 801014e:	4607      	mov	r7, r0
 8010150:	10ad      	asrs	r5, r5, #2
 8010152:	d03d      	beq.n	80101d0 <__pow5mult+0xa0>
 8010154:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010156:	b97c      	cbnz	r4, 8010178 <__pow5mult+0x48>
 8010158:	2010      	movs	r0, #16
 801015a:	f7ff fdb5 	bl	800fcc8 <malloc>
 801015e:	4602      	mov	r2, r0
 8010160:	6270      	str	r0, [r6, #36]	; 0x24
 8010162:	b928      	cbnz	r0, 8010170 <__pow5mult+0x40>
 8010164:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010168:	4b1c      	ldr	r3, [pc, #112]	; (80101dc <__pow5mult+0xac>)
 801016a:	481d      	ldr	r0, [pc, #116]	; (80101e0 <__pow5mult+0xb0>)
 801016c:	f000 fd0a 	bl	8010b84 <__assert_func>
 8010170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010174:	6004      	str	r4, [r0, #0]
 8010176:	60c4      	str	r4, [r0, #12]
 8010178:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801017c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010180:	b94c      	cbnz	r4, 8010196 <__pow5mult+0x66>
 8010182:	f240 2171 	movw	r1, #625	; 0x271
 8010186:	4630      	mov	r0, r6
 8010188:	f7ff ff14 	bl	800ffb4 <__i2b>
 801018c:	2300      	movs	r3, #0
 801018e:	4604      	mov	r4, r0
 8010190:	f8c8 0008 	str.w	r0, [r8, #8]
 8010194:	6003      	str	r3, [r0, #0]
 8010196:	f04f 0900 	mov.w	r9, #0
 801019a:	07eb      	lsls	r3, r5, #31
 801019c:	d50a      	bpl.n	80101b4 <__pow5mult+0x84>
 801019e:	4639      	mov	r1, r7
 80101a0:	4622      	mov	r2, r4
 80101a2:	4630      	mov	r0, r6
 80101a4:	f7ff ff1c 	bl	800ffe0 <__multiply>
 80101a8:	4680      	mov	r8, r0
 80101aa:	4639      	mov	r1, r7
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7ff fe01 	bl	800fdb4 <_Bfree>
 80101b2:	4647      	mov	r7, r8
 80101b4:	106d      	asrs	r5, r5, #1
 80101b6:	d00b      	beq.n	80101d0 <__pow5mult+0xa0>
 80101b8:	6820      	ldr	r0, [r4, #0]
 80101ba:	b938      	cbnz	r0, 80101cc <__pow5mult+0x9c>
 80101bc:	4622      	mov	r2, r4
 80101be:	4621      	mov	r1, r4
 80101c0:	4630      	mov	r0, r6
 80101c2:	f7ff ff0d 	bl	800ffe0 <__multiply>
 80101c6:	6020      	str	r0, [r4, #0]
 80101c8:	f8c0 9000 	str.w	r9, [r0]
 80101cc:	4604      	mov	r4, r0
 80101ce:	e7e4      	b.n	801019a <__pow5mult+0x6a>
 80101d0:	4638      	mov	r0, r7
 80101d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101d6:	bf00      	nop
 80101d8:	08011d40 	.word	0x08011d40
 80101dc:	08011af5 	.word	0x08011af5
 80101e0:	08011bf4 	.word	0x08011bf4

080101e4 <__lshift>:
 80101e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e8:	460c      	mov	r4, r1
 80101ea:	4607      	mov	r7, r0
 80101ec:	4691      	mov	r9, r2
 80101ee:	6923      	ldr	r3, [r4, #16]
 80101f0:	6849      	ldr	r1, [r1, #4]
 80101f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101f6:	68a3      	ldr	r3, [r4, #8]
 80101f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101fc:	f108 0601 	add.w	r6, r8, #1
 8010200:	42b3      	cmp	r3, r6
 8010202:	db0b      	blt.n	801021c <__lshift+0x38>
 8010204:	4638      	mov	r0, r7
 8010206:	f7ff fd95 	bl	800fd34 <_Balloc>
 801020a:	4605      	mov	r5, r0
 801020c:	b948      	cbnz	r0, 8010222 <__lshift+0x3e>
 801020e:	4602      	mov	r2, r0
 8010210:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010214:	4b29      	ldr	r3, [pc, #164]	; (80102bc <__lshift+0xd8>)
 8010216:	482a      	ldr	r0, [pc, #168]	; (80102c0 <__lshift+0xdc>)
 8010218:	f000 fcb4 	bl	8010b84 <__assert_func>
 801021c:	3101      	adds	r1, #1
 801021e:	005b      	lsls	r3, r3, #1
 8010220:	e7ee      	b.n	8010200 <__lshift+0x1c>
 8010222:	2300      	movs	r3, #0
 8010224:	f100 0114 	add.w	r1, r0, #20
 8010228:	f100 0210 	add.w	r2, r0, #16
 801022c:	4618      	mov	r0, r3
 801022e:	4553      	cmp	r3, sl
 8010230:	db37      	blt.n	80102a2 <__lshift+0xbe>
 8010232:	6920      	ldr	r0, [r4, #16]
 8010234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010238:	f104 0314 	add.w	r3, r4, #20
 801023c:	f019 091f 	ands.w	r9, r9, #31
 8010240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010248:	d02f      	beq.n	80102aa <__lshift+0xc6>
 801024a:	468a      	mov	sl, r1
 801024c:	f04f 0c00 	mov.w	ip, #0
 8010250:	f1c9 0e20 	rsb	lr, r9, #32
 8010254:	681a      	ldr	r2, [r3, #0]
 8010256:	fa02 f209 	lsl.w	r2, r2, r9
 801025a:	ea42 020c 	orr.w	r2, r2, ip
 801025e:	f84a 2b04 	str.w	r2, [sl], #4
 8010262:	f853 2b04 	ldr.w	r2, [r3], #4
 8010266:	4298      	cmp	r0, r3
 8010268:	fa22 fc0e 	lsr.w	ip, r2, lr
 801026c:	d8f2      	bhi.n	8010254 <__lshift+0x70>
 801026e:	1b03      	subs	r3, r0, r4
 8010270:	3b15      	subs	r3, #21
 8010272:	f023 0303 	bic.w	r3, r3, #3
 8010276:	3304      	adds	r3, #4
 8010278:	f104 0215 	add.w	r2, r4, #21
 801027c:	4290      	cmp	r0, r2
 801027e:	bf38      	it	cc
 8010280:	2304      	movcc	r3, #4
 8010282:	f841 c003 	str.w	ip, [r1, r3]
 8010286:	f1bc 0f00 	cmp.w	ip, #0
 801028a:	d001      	beq.n	8010290 <__lshift+0xac>
 801028c:	f108 0602 	add.w	r6, r8, #2
 8010290:	3e01      	subs	r6, #1
 8010292:	4638      	mov	r0, r7
 8010294:	4621      	mov	r1, r4
 8010296:	612e      	str	r6, [r5, #16]
 8010298:	f7ff fd8c 	bl	800fdb4 <_Bfree>
 801029c:	4628      	mov	r0, r5
 801029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80102a6:	3301      	adds	r3, #1
 80102a8:	e7c1      	b.n	801022e <__lshift+0x4a>
 80102aa:	3904      	subs	r1, #4
 80102ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80102b0:	4298      	cmp	r0, r3
 80102b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80102b6:	d8f9      	bhi.n	80102ac <__lshift+0xc8>
 80102b8:	e7ea      	b.n	8010290 <__lshift+0xac>
 80102ba:	bf00      	nop
 80102bc:	08011b67 	.word	0x08011b67
 80102c0:	08011bf4 	.word	0x08011bf4

080102c4 <__mcmp>:
 80102c4:	4603      	mov	r3, r0
 80102c6:	690a      	ldr	r2, [r1, #16]
 80102c8:	6900      	ldr	r0, [r0, #16]
 80102ca:	b530      	push	{r4, r5, lr}
 80102cc:	1a80      	subs	r0, r0, r2
 80102ce:	d10d      	bne.n	80102ec <__mcmp+0x28>
 80102d0:	3314      	adds	r3, #20
 80102d2:	3114      	adds	r1, #20
 80102d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80102d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80102dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80102e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80102e4:	4295      	cmp	r5, r2
 80102e6:	d002      	beq.n	80102ee <__mcmp+0x2a>
 80102e8:	d304      	bcc.n	80102f4 <__mcmp+0x30>
 80102ea:	2001      	movs	r0, #1
 80102ec:	bd30      	pop	{r4, r5, pc}
 80102ee:	42a3      	cmp	r3, r4
 80102f0:	d3f4      	bcc.n	80102dc <__mcmp+0x18>
 80102f2:	e7fb      	b.n	80102ec <__mcmp+0x28>
 80102f4:	f04f 30ff 	mov.w	r0, #4294967295
 80102f8:	e7f8      	b.n	80102ec <__mcmp+0x28>
	...

080102fc <__mdiff>:
 80102fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010300:	460d      	mov	r5, r1
 8010302:	4607      	mov	r7, r0
 8010304:	4611      	mov	r1, r2
 8010306:	4628      	mov	r0, r5
 8010308:	4614      	mov	r4, r2
 801030a:	f7ff ffdb 	bl	80102c4 <__mcmp>
 801030e:	1e06      	subs	r6, r0, #0
 8010310:	d111      	bne.n	8010336 <__mdiff+0x3a>
 8010312:	4631      	mov	r1, r6
 8010314:	4638      	mov	r0, r7
 8010316:	f7ff fd0d 	bl	800fd34 <_Balloc>
 801031a:	4602      	mov	r2, r0
 801031c:	b928      	cbnz	r0, 801032a <__mdiff+0x2e>
 801031e:	f240 2132 	movw	r1, #562	; 0x232
 8010322:	4b3a      	ldr	r3, [pc, #232]	; (801040c <__mdiff+0x110>)
 8010324:	483a      	ldr	r0, [pc, #232]	; (8010410 <__mdiff+0x114>)
 8010326:	f000 fc2d 	bl	8010b84 <__assert_func>
 801032a:	2301      	movs	r3, #1
 801032c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010330:	4610      	mov	r0, r2
 8010332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010336:	bfa4      	itt	ge
 8010338:	4623      	movge	r3, r4
 801033a:	462c      	movge	r4, r5
 801033c:	4638      	mov	r0, r7
 801033e:	6861      	ldr	r1, [r4, #4]
 8010340:	bfa6      	itte	ge
 8010342:	461d      	movge	r5, r3
 8010344:	2600      	movge	r6, #0
 8010346:	2601      	movlt	r6, #1
 8010348:	f7ff fcf4 	bl	800fd34 <_Balloc>
 801034c:	4602      	mov	r2, r0
 801034e:	b918      	cbnz	r0, 8010358 <__mdiff+0x5c>
 8010350:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010354:	4b2d      	ldr	r3, [pc, #180]	; (801040c <__mdiff+0x110>)
 8010356:	e7e5      	b.n	8010324 <__mdiff+0x28>
 8010358:	f102 0814 	add.w	r8, r2, #20
 801035c:	46c2      	mov	sl, r8
 801035e:	f04f 0c00 	mov.w	ip, #0
 8010362:	6927      	ldr	r7, [r4, #16]
 8010364:	60c6      	str	r6, [r0, #12]
 8010366:	692e      	ldr	r6, [r5, #16]
 8010368:	f104 0014 	add.w	r0, r4, #20
 801036c:	f105 0914 	add.w	r9, r5, #20
 8010370:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010374:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010378:	3410      	adds	r4, #16
 801037a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801037e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010382:	fa1f f18b 	uxth.w	r1, fp
 8010386:	448c      	add	ip, r1
 8010388:	b299      	uxth	r1, r3
 801038a:	0c1b      	lsrs	r3, r3, #16
 801038c:	ebac 0101 	sub.w	r1, ip, r1
 8010390:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010394:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010398:	b289      	uxth	r1, r1
 801039a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801039e:	454e      	cmp	r6, r9
 80103a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80103a4:	f84a 3b04 	str.w	r3, [sl], #4
 80103a8:	d8e7      	bhi.n	801037a <__mdiff+0x7e>
 80103aa:	1b73      	subs	r3, r6, r5
 80103ac:	3b15      	subs	r3, #21
 80103ae:	f023 0303 	bic.w	r3, r3, #3
 80103b2:	3515      	adds	r5, #21
 80103b4:	3304      	adds	r3, #4
 80103b6:	42ae      	cmp	r6, r5
 80103b8:	bf38      	it	cc
 80103ba:	2304      	movcc	r3, #4
 80103bc:	4418      	add	r0, r3
 80103be:	4443      	add	r3, r8
 80103c0:	461e      	mov	r6, r3
 80103c2:	4605      	mov	r5, r0
 80103c4:	4575      	cmp	r5, lr
 80103c6:	d30e      	bcc.n	80103e6 <__mdiff+0xea>
 80103c8:	f10e 0103 	add.w	r1, lr, #3
 80103cc:	1a09      	subs	r1, r1, r0
 80103ce:	f021 0103 	bic.w	r1, r1, #3
 80103d2:	3803      	subs	r0, #3
 80103d4:	4586      	cmp	lr, r0
 80103d6:	bf38      	it	cc
 80103d8:	2100      	movcc	r1, #0
 80103da:	4419      	add	r1, r3
 80103dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80103e0:	b18b      	cbz	r3, 8010406 <__mdiff+0x10a>
 80103e2:	6117      	str	r7, [r2, #16]
 80103e4:	e7a4      	b.n	8010330 <__mdiff+0x34>
 80103e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80103ea:	fa1f f188 	uxth.w	r1, r8
 80103ee:	4461      	add	r1, ip
 80103f0:	140c      	asrs	r4, r1, #16
 80103f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80103f6:	b289      	uxth	r1, r1
 80103f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80103fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010400:	f846 1b04 	str.w	r1, [r6], #4
 8010404:	e7de      	b.n	80103c4 <__mdiff+0xc8>
 8010406:	3f01      	subs	r7, #1
 8010408:	e7e8      	b.n	80103dc <__mdiff+0xe0>
 801040a:	bf00      	nop
 801040c:	08011b67 	.word	0x08011b67
 8010410:	08011bf4 	.word	0x08011bf4

08010414 <__ulp>:
 8010414:	4b11      	ldr	r3, [pc, #68]	; (801045c <__ulp+0x48>)
 8010416:	400b      	ands	r3, r1
 8010418:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801041c:	2b00      	cmp	r3, #0
 801041e:	dd02      	ble.n	8010426 <__ulp+0x12>
 8010420:	2000      	movs	r0, #0
 8010422:	4619      	mov	r1, r3
 8010424:	4770      	bx	lr
 8010426:	425b      	negs	r3, r3
 8010428:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801042c:	f04f 0000 	mov.w	r0, #0
 8010430:	f04f 0100 	mov.w	r1, #0
 8010434:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010438:	da04      	bge.n	8010444 <__ulp+0x30>
 801043a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801043e:	fa43 f102 	asr.w	r1, r3, r2
 8010442:	4770      	bx	lr
 8010444:	f1a2 0314 	sub.w	r3, r2, #20
 8010448:	2b1e      	cmp	r3, #30
 801044a:	bfd6      	itet	le
 801044c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010450:	2301      	movgt	r3, #1
 8010452:	fa22 f303 	lsrle.w	r3, r2, r3
 8010456:	4618      	mov	r0, r3
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	7ff00000 	.word	0x7ff00000

08010460 <__b2d>:
 8010460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010464:	6907      	ldr	r7, [r0, #16]
 8010466:	f100 0914 	add.w	r9, r0, #20
 801046a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801046e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010472:	f1a7 0804 	sub.w	r8, r7, #4
 8010476:	4630      	mov	r0, r6
 8010478:	f7ff fd4e 	bl	800ff18 <__hi0bits>
 801047c:	f1c0 0320 	rsb	r3, r0, #32
 8010480:	280a      	cmp	r0, #10
 8010482:	600b      	str	r3, [r1, #0]
 8010484:	491f      	ldr	r1, [pc, #124]	; (8010504 <__b2d+0xa4>)
 8010486:	dc17      	bgt.n	80104b8 <__b2d+0x58>
 8010488:	45c1      	cmp	r9, r8
 801048a:	bf28      	it	cs
 801048c:	2200      	movcs	r2, #0
 801048e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010492:	fa26 f30c 	lsr.w	r3, r6, ip
 8010496:	bf38      	it	cc
 8010498:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801049c:	ea43 0501 	orr.w	r5, r3, r1
 80104a0:	f100 0315 	add.w	r3, r0, #21
 80104a4:	fa06 f303 	lsl.w	r3, r6, r3
 80104a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80104ac:	ea43 0402 	orr.w	r4, r3, r2
 80104b0:	4620      	mov	r0, r4
 80104b2:	4629      	mov	r1, r5
 80104b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104b8:	45c1      	cmp	r9, r8
 80104ba:	bf2e      	itee	cs
 80104bc:	2200      	movcs	r2, #0
 80104be:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80104c2:	f1a7 0808 	subcc.w	r8, r7, #8
 80104c6:	f1b0 030b 	subs.w	r3, r0, #11
 80104ca:	d016      	beq.n	80104fa <__b2d+0x9a>
 80104cc:	f1c3 0720 	rsb	r7, r3, #32
 80104d0:	fa22 f107 	lsr.w	r1, r2, r7
 80104d4:	45c8      	cmp	r8, r9
 80104d6:	fa06 f603 	lsl.w	r6, r6, r3
 80104da:	ea46 0601 	orr.w	r6, r6, r1
 80104de:	bf94      	ite	ls
 80104e0:	2100      	movls	r1, #0
 80104e2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80104e6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80104ea:	fa02 f003 	lsl.w	r0, r2, r3
 80104ee:	40f9      	lsrs	r1, r7
 80104f0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80104f4:	ea40 0401 	orr.w	r4, r0, r1
 80104f8:	e7da      	b.n	80104b0 <__b2d+0x50>
 80104fa:	4614      	mov	r4, r2
 80104fc:	ea46 0501 	orr.w	r5, r6, r1
 8010500:	e7d6      	b.n	80104b0 <__b2d+0x50>
 8010502:	bf00      	nop
 8010504:	3ff00000 	.word	0x3ff00000

08010508 <__d2b>:
 8010508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801050c:	2101      	movs	r1, #1
 801050e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010512:	4690      	mov	r8, r2
 8010514:	461d      	mov	r5, r3
 8010516:	f7ff fc0d 	bl	800fd34 <_Balloc>
 801051a:	4604      	mov	r4, r0
 801051c:	b930      	cbnz	r0, 801052c <__d2b+0x24>
 801051e:	4602      	mov	r2, r0
 8010520:	f240 310a 	movw	r1, #778	; 0x30a
 8010524:	4b24      	ldr	r3, [pc, #144]	; (80105b8 <__d2b+0xb0>)
 8010526:	4825      	ldr	r0, [pc, #148]	; (80105bc <__d2b+0xb4>)
 8010528:	f000 fb2c 	bl	8010b84 <__assert_func>
 801052c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010530:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010534:	bb2d      	cbnz	r5, 8010582 <__d2b+0x7a>
 8010536:	9301      	str	r3, [sp, #4]
 8010538:	f1b8 0300 	subs.w	r3, r8, #0
 801053c:	d026      	beq.n	801058c <__d2b+0x84>
 801053e:	4668      	mov	r0, sp
 8010540:	9300      	str	r3, [sp, #0]
 8010542:	f7ff fd09 	bl	800ff58 <__lo0bits>
 8010546:	9900      	ldr	r1, [sp, #0]
 8010548:	b1f0      	cbz	r0, 8010588 <__d2b+0x80>
 801054a:	9a01      	ldr	r2, [sp, #4]
 801054c:	f1c0 0320 	rsb	r3, r0, #32
 8010550:	fa02 f303 	lsl.w	r3, r2, r3
 8010554:	430b      	orrs	r3, r1
 8010556:	40c2      	lsrs	r2, r0
 8010558:	6163      	str	r3, [r4, #20]
 801055a:	9201      	str	r2, [sp, #4]
 801055c:	9b01      	ldr	r3, [sp, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	bf14      	ite	ne
 8010562:	2102      	movne	r1, #2
 8010564:	2101      	moveq	r1, #1
 8010566:	61a3      	str	r3, [r4, #24]
 8010568:	6121      	str	r1, [r4, #16]
 801056a:	b1c5      	cbz	r5, 801059e <__d2b+0x96>
 801056c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010570:	4405      	add	r5, r0
 8010572:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010576:	603d      	str	r5, [r7, #0]
 8010578:	6030      	str	r0, [r6, #0]
 801057a:	4620      	mov	r0, r4
 801057c:	b002      	add	sp, #8
 801057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010586:	e7d6      	b.n	8010536 <__d2b+0x2e>
 8010588:	6161      	str	r1, [r4, #20]
 801058a:	e7e7      	b.n	801055c <__d2b+0x54>
 801058c:	a801      	add	r0, sp, #4
 801058e:	f7ff fce3 	bl	800ff58 <__lo0bits>
 8010592:	2101      	movs	r1, #1
 8010594:	9b01      	ldr	r3, [sp, #4]
 8010596:	6121      	str	r1, [r4, #16]
 8010598:	6163      	str	r3, [r4, #20]
 801059a:	3020      	adds	r0, #32
 801059c:	e7e5      	b.n	801056a <__d2b+0x62>
 801059e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80105a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105a6:	6038      	str	r0, [r7, #0]
 80105a8:	6918      	ldr	r0, [r3, #16]
 80105aa:	f7ff fcb5 	bl	800ff18 <__hi0bits>
 80105ae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80105b2:	6031      	str	r1, [r6, #0]
 80105b4:	e7e1      	b.n	801057a <__d2b+0x72>
 80105b6:	bf00      	nop
 80105b8:	08011b67 	.word	0x08011b67
 80105bc:	08011bf4 	.word	0x08011bf4

080105c0 <__ratio>:
 80105c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	4688      	mov	r8, r1
 80105c6:	4669      	mov	r1, sp
 80105c8:	4681      	mov	r9, r0
 80105ca:	f7ff ff49 	bl	8010460 <__b2d>
 80105ce:	460f      	mov	r7, r1
 80105d0:	4604      	mov	r4, r0
 80105d2:	460d      	mov	r5, r1
 80105d4:	4640      	mov	r0, r8
 80105d6:	a901      	add	r1, sp, #4
 80105d8:	f7ff ff42 	bl	8010460 <__b2d>
 80105dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105e0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80105e4:	468b      	mov	fp, r1
 80105e6:	eba3 0c02 	sub.w	ip, r3, r2
 80105ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80105ee:	1a9b      	subs	r3, r3, r2
 80105f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	bfd5      	itete	le
 80105f8:	460a      	movle	r2, r1
 80105fa:	462a      	movgt	r2, r5
 80105fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010600:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010604:	bfd8      	it	le
 8010606:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801060a:	465b      	mov	r3, fp
 801060c:	4602      	mov	r2, r0
 801060e:	4639      	mov	r1, r7
 8010610:	4620      	mov	r0, r4
 8010612:	f7f0 f8a3 	bl	800075c <__aeabi_ddiv>
 8010616:	b003      	add	sp, #12
 8010618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801061c <__copybits>:
 801061c:	3901      	subs	r1, #1
 801061e:	b570      	push	{r4, r5, r6, lr}
 8010620:	1149      	asrs	r1, r1, #5
 8010622:	6914      	ldr	r4, [r2, #16]
 8010624:	3101      	adds	r1, #1
 8010626:	f102 0314 	add.w	r3, r2, #20
 801062a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801062e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010632:	1f05      	subs	r5, r0, #4
 8010634:	42a3      	cmp	r3, r4
 8010636:	d30c      	bcc.n	8010652 <__copybits+0x36>
 8010638:	1aa3      	subs	r3, r4, r2
 801063a:	3b11      	subs	r3, #17
 801063c:	f023 0303 	bic.w	r3, r3, #3
 8010640:	3211      	adds	r2, #17
 8010642:	42a2      	cmp	r2, r4
 8010644:	bf88      	it	hi
 8010646:	2300      	movhi	r3, #0
 8010648:	4418      	add	r0, r3
 801064a:	2300      	movs	r3, #0
 801064c:	4288      	cmp	r0, r1
 801064e:	d305      	bcc.n	801065c <__copybits+0x40>
 8010650:	bd70      	pop	{r4, r5, r6, pc}
 8010652:	f853 6b04 	ldr.w	r6, [r3], #4
 8010656:	f845 6f04 	str.w	r6, [r5, #4]!
 801065a:	e7eb      	b.n	8010634 <__copybits+0x18>
 801065c:	f840 3b04 	str.w	r3, [r0], #4
 8010660:	e7f4      	b.n	801064c <__copybits+0x30>

08010662 <__any_on>:
 8010662:	f100 0214 	add.w	r2, r0, #20
 8010666:	6900      	ldr	r0, [r0, #16]
 8010668:	114b      	asrs	r3, r1, #5
 801066a:	4298      	cmp	r0, r3
 801066c:	b510      	push	{r4, lr}
 801066e:	db11      	blt.n	8010694 <__any_on+0x32>
 8010670:	dd0a      	ble.n	8010688 <__any_on+0x26>
 8010672:	f011 011f 	ands.w	r1, r1, #31
 8010676:	d007      	beq.n	8010688 <__any_on+0x26>
 8010678:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801067c:	fa24 f001 	lsr.w	r0, r4, r1
 8010680:	fa00 f101 	lsl.w	r1, r0, r1
 8010684:	428c      	cmp	r4, r1
 8010686:	d10b      	bne.n	80106a0 <__any_on+0x3e>
 8010688:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801068c:	4293      	cmp	r3, r2
 801068e:	d803      	bhi.n	8010698 <__any_on+0x36>
 8010690:	2000      	movs	r0, #0
 8010692:	bd10      	pop	{r4, pc}
 8010694:	4603      	mov	r3, r0
 8010696:	e7f7      	b.n	8010688 <__any_on+0x26>
 8010698:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801069c:	2900      	cmp	r1, #0
 801069e:	d0f5      	beq.n	801068c <__any_on+0x2a>
 80106a0:	2001      	movs	r0, #1
 80106a2:	e7f6      	b.n	8010692 <__any_on+0x30>

080106a4 <_calloc_r>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	fba1 5402 	umull	r5, r4, r1, r2
 80106aa:	b934      	cbnz	r4, 80106ba <_calloc_r+0x16>
 80106ac:	4629      	mov	r1, r5
 80106ae:	f000 f875 	bl	801079c <_malloc_r>
 80106b2:	4606      	mov	r6, r0
 80106b4:	b928      	cbnz	r0, 80106c2 <_calloc_r+0x1e>
 80106b6:	4630      	mov	r0, r6
 80106b8:	bd70      	pop	{r4, r5, r6, pc}
 80106ba:	220c      	movs	r2, #12
 80106bc:	2600      	movs	r6, #0
 80106be:	6002      	str	r2, [r0, #0]
 80106c0:	e7f9      	b.n	80106b6 <_calloc_r+0x12>
 80106c2:	462a      	mov	r2, r5
 80106c4:	4621      	mov	r1, r4
 80106c6:	f7fc fe55 	bl	800d374 <memset>
 80106ca:	e7f4      	b.n	80106b6 <_calloc_r+0x12>

080106cc <_free_r>:
 80106cc:	b538      	push	{r3, r4, r5, lr}
 80106ce:	4605      	mov	r5, r0
 80106d0:	2900      	cmp	r1, #0
 80106d2:	d040      	beq.n	8010756 <_free_r+0x8a>
 80106d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106d8:	1f0c      	subs	r4, r1, #4
 80106da:	2b00      	cmp	r3, #0
 80106dc:	bfb8      	it	lt
 80106de:	18e4      	addlt	r4, r4, r3
 80106e0:	f000 fa9a 	bl	8010c18 <__malloc_lock>
 80106e4:	4a1c      	ldr	r2, [pc, #112]	; (8010758 <_free_r+0x8c>)
 80106e6:	6813      	ldr	r3, [r2, #0]
 80106e8:	b933      	cbnz	r3, 80106f8 <_free_r+0x2c>
 80106ea:	6063      	str	r3, [r4, #4]
 80106ec:	6014      	str	r4, [r2, #0]
 80106ee:	4628      	mov	r0, r5
 80106f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f4:	f000 ba96 	b.w	8010c24 <__malloc_unlock>
 80106f8:	42a3      	cmp	r3, r4
 80106fa:	d908      	bls.n	801070e <_free_r+0x42>
 80106fc:	6820      	ldr	r0, [r4, #0]
 80106fe:	1821      	adds	r1, r4, r0
 8010700:	428b      	cmp	r3, r1
 8010702:	bf01      	itttt	eq
 8010704:	6819      	ldreq	r1, [r3, #0]
 8010706:	685b      	ldreq	r3, [r3, #4]
 8010708:	1809      	addeq	r1, r1, r0
 801070a:	6021      	streq	r1, [r4, #0]
 801070c:	e7ed      	b.n	80106ea <_free_r+0x1e>
 801070e:	461a      	mov	r2, r3
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	b10b      	cbz	r3, 8010718 <_free_r+0x4c>
 8010714:	42a3      	cmp	r3, r4
 8010716:	d9fa      	bls.n	801070e <_free_r+0x42>
 8010718:	6811      	ldr	r1, [r2, #0]
 801071a:	1850      	adds	r0, r2, r1
 801071c:	42a0      	cmp	r0, r4
 801071e:	d10b      	bne.n	8010738 <_free_r+0x6c>
 8010720:	6820      	ldr	r0, [r4, #0]
 8010722:	4401      	add	r1, r0
 8010724:	1850      	adds	r0, r2, r1
 8010726:	4283      	cmp	r3, r0
 8010728:	6011      	str	r1, [r2, #0]
 801072a:	d1e0      	bne.n	80106ee <_free_r+0x22>
 801072c:	6818      	ldr	r0, [r3, #0]
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	4401      	add	r1, r0
 8010732:	6011      	str	r1, [r2, #0]
 8010734:	6053      	str	r3, [r2, #4]
 8010736:	e7da      	b.n	80106ee <_free_r+0x22>
 8010738:	d902      	bls.n	8010740 <_free_r+0x74>
 801073a:	230c      	movs	r3, #12
 801073c:	602b      	str	r3, [r5, #0]
 801073e:	e7d6      	b.n	80106ee <_free_r+0x22>
 8010740:	6820      	ldr	r0, [r4, #0]
 8010742:	1821      	adds	r1, r4, r0
 8010744:	428b      	cmp	r3, r1
 8010746:	bf01      	itttt	eq
 8010748:	6819      	ldreq	r1, [r3, #0]
 801074a:	685b      	ldreq	r3, [r3, #4]
 801074c:	1809      	addeq	r1, r1, r0
 801074e:	6021      	streq	r1, [r4, #0]
 8010750:	6063      	str	r3, [r4, #4]
 8010752:	6054      	str	r4, [r2, #4]
 8010754:	e7cb      	b.n	80106ee <_free_r+0x22>
 8010756:	bd38      	pop	{r3, r4, r5, pc}
 8010758:	20001bfc 	.word	0x20001bfc

0801075c <sbrk_aligned>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	4e0e      	ldr	r6, [pc, #56]	; (8010798 <sbrk_aligned+0x3c>)
 8010760:	460c      	mov	r4, r1
 8010762:	6831      	ldr	r1, [r6, #0]
 8010764:	4605      	mov	r5, r0
 8010766:	b911      	cbnz	r1, 801076e <sbrk_aligned+0x12>
 8010768:	f000 f9ee 	bl	8010b48 <_sbrk_r>
 801076c:	6030      	str	r0, [r6, #0]
 801076e:	4621      	mov	r1, r4
 8010770:	4628      	mov	r0, r5
 8010772:	f000 f9e9 	bl	8010b48 <_sbrk_r>
 8010776:	1c43      	adds	r3, r0, #1
 8010778:	d00a      	beq.n	8010790 <sbrk_aligned+0x34>
 801077a:	1cc4      	adds	r4, r0, #3
 801077c:	f024 0403 	bic.w	r4, r4, #3
 8010780:	42a0      	cmp	r0, r4
 8010782:	d007      	beq.n	8010794 <sbrk_aligned+0x38>
 8010784:	1a21      	subs	r1, r4, r0
 8010786:	4628      	mov	r0, r5
 8010788:	f000 f9de 	bl	8010b48 <_sbrk_r>
 801078c:	3001      	adds	r0, #1
 801078e:	d101      	bne.n	8010794 <sbrk_aligned+0x38>
 8010790:	f04f 34ff 	mov.w	r4, #4294967295
 8010794:	4620      	mov	r0, r4
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	20001c00 	.word	0x20001c00

0801079c <_malloc_r>:
 801079c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a0:	1ccd      	adds	r5, r1, #3
 80107a2:	f025 0503 	bic.w	r5, r5, #3
 80107a6:	3508      	adds	r5, #8
 80107a8:	2d0c      	cmp	r5, #12
 80107aa:	bf38      	it	cc
 80107ac:	250c      	movcc	r5, #12
 80107ae:	2d00      	cmp	r5, #0
 80107b0:	4607      	mov	r7, r0
 80107b2:	db01      	blt.n	80107b8 <_malloc_r+0x1c>
 80107b4:	42a9      	cmp	r1, r5
 80107b6:	d905      	bls.n	80107c4 <_malloc_r+0x28>
 80107b8:	230c      	movs	r3, #12
 80107ba:	2600      	movs	r6, #0
 80107bc:	603b      	str	r3, [r7, #0]
 80107be:	4630      	mov	r0, r6
 80107c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c4:	4e2e      	ldr	r6, [pc, #184]	; (8010880 <_malloc_r+0xe4>)
 80107c6:	f000 fa27 	bl	8010c18 <__malloc_lock>
 80107ca:	6833      	ldr	r3, [r6, #0]
 80107cc:	461c      	mov	r4, r3
 80107ce:	bb34      	cbnz	r4, 801081e <_malloc_r+0x82>
 80107d0:	4629      	mov	r1, r5
 80107d2:	4638      	mov	r0, r7
 80107d4:	f7ff ffc2 	bl	801075c <sbrk_aligned>
 80107d8:	1c43      	adds	r3, r0, #1
 80107da:	4604      	mov	r4, r0
 80107dc:	d14d      	bne.n	801087a <_malloc_r+0xde>
 80107de:	6834      	ldr	r4, [r6, #0]
 80107e0:	4626      	mov	r6, r4
 80107e2:	2e00      	cmp	r6, #0
 80107e4:	d140      	bne.n	8010868 <_malloc_r+0xcc>
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	4631      	mov	r1, r6
 80107ea:	4638      	mov	r0, r7
 80107ec:	eb04 0803 	add.w	r8, r4, r3
 80107f0:	f000 f9aa 	bl	8010b48 <_sbrk_r>
 80107f4:	4580      	cmp	r8, r0
 80107f6:	d13a      	bne.n	801086e <_malloc_r+0xd2>
 80107f8:	6821      	ldr	r1, [r4, #0]
 80107fa:	3503      	adds	r5, #3
 80107fc:	1a6d      	subs	r5, r5, r1
 80107fe:	f025 0503 	bic.w	r5, r5, #3
 8010802:	3508      	adds	r5, #8
 8010804:	2d0c      	cmp	r5, #12
 8010806:	bf38      	it	cc
 8010808:	250c      	movcc	r5, #12
 801080a:	4638      	mov	r0, r7
 801080c:	4629      	mov	r1, r5
 801080e:	f7ff ffa5 	bl	801075c <sbrk_aligned>
 8010812:	3001      	adds	r0, #1
 8010814:	d02b      	beq.n	801086e <_malloc_r+0xd2>
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	442b      	add	r3, r5
 801081a:	6023      	str	r3, [r4, #0]
 801081c:	e00e      	b.n	801083c <_malloc_r+0xa0>
 801081e:	6822      	ldr	r2, [r4, #0]
 8010820:	1b52      	subs	r2, r2, r5
 8010822:	d41e      	bmi.n	8010862 <_malloc_r+0xc6>
 8010824:	2a0b      	cmp	r2, #11
 8010826:	d916      	bls.n	8010856 <_malloc_r+0xba>
 8010828:	1961      	adds	r1, r4, r5
 801082a:	42a3      	cmp	r3, r4
 801082c:	6025      	str	r5, [r4, #0]
 801082e:	bf18      	it	ne
 8010830:	6059      	strne	r1, [r3, #4]
 8010832:	6863      	ldr	r3, [r4, #4]
 8010834:	bf08      	it	eq
 8010836:	6031      	streq	r1, [r6, #0]
 8010838:	5162      	str	r2, [r4, r5]
 801083a:	604b      	str	r3, [r1, #4]
 801083c:	4638      	mov	r0, r7
 801083e:	f104 060b 	add.w	r6, r4, #11
 8010842:	f000 f9ef 	bl	8010c24 <__malloc_unlock>
 8010846:	f026 0607 	bic.w	r6, r6, #7
 801084a:	1d23      	adds	r3, r4, #4
 801084c:	1af2      	subs	r2, r6, r3
 801084e:	d0b6      	beq.n	80107be <_malloc_r+0x22>
 8010850:	1b9b      	subs	r3, r3, r6
 8010852:	50a3      	str	r3, [r4, r2]
 8010854:	e7b3      	b.n	80107be <_malloc_r+0x22>
 8010856:	6862      	ldr	r2, [r4, #4]
 8010858:	42a3      	cmp	r3, r4
 801085a:	bf0c      	ite	eq
 801085c:	6032      	streq	r2, [r6, #0]
 801085e:	605a      	strne	r2, [r3, #4]
 8010860:	e7ec      	b.n	801083c <_malloc_r+0xa0>
 8010862:	4623      	mov	r3, r4
 8010864:	6864      	ldr	r4, [r4, #4]
 8010866:	e7b2      	b.n	80107ce <_malloc_r+0x32>
 8010868:	4634      	mov	r4, r6
 801086a:	6876      	ldr	r6, [r6, #4]
 801086c:	e7b9      	b.n	80107e2 <_malloc_r+0x46>
 801086e:	230c      	movs	r3, #12
 8010870:	4638      	mov	r0, r7
 8010872:	603b      	str	r3, [r7, #0]
 8010874:	f000 f9d6 	bl	8010c24 <__malloc_unlock>
 8010878:	e7a1      	b.n	80107be <_malloc_r+0x22>
 801087a:	6025      	str	r5, [r4, #0]
 801087c:	e7de      	b.n	801083c <_malloc_r+0xa0>
 801087e:	bf00      	nop
 8010880:	20001bfc 	.word	0x20001bfc

08010884 <__ssputs_r>:
 8010884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010888:	688e      	ldr	r6, [r1, #8]
 801088a:	4682      	mov	sl, r0
 801088c:	429e      	cmp	r6, r3
 801088e:	460c      	mov	r4, r1
 8010890:	4690      	mov	r8, r2
 8010892:	461f      	mov	r7, r3
 8010894:	d838      	bhi.n	8010908 <__ssputs_r+0x84>
 8010896:	898a      	ldrh	r2, [r1, #12]
 8010898:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801089c:	d032      	beq.n	8010904 <__ssputs_r+0x80>
 801089e:	6825      	ldr	r5, [r4, #0]
 80108a0:	6909      	ldr	r1, [r1, #16]
 80108a2:	3301      	adds	r3, #1
 80108a4:	eba5 0901 	sub.w	r9, r5, r1
 80108a8:	6965      	ldr	r5, [r4, #20]
 80108aa:	444b      	add	r3, r9
 80108ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108b4:	106d      	asrs	r5, r5, #1
 80108b6:	429d      	cmp	r5, r3
 80108b8:	bf38      	it	cc
 80108ba:	461d      	movcc	r5, r3
 80108bc:	0553      	lsls	r3, r2, #21
 80108be:	d531      	bpl.n	8010924 <__ssputs_r+0xa0>
 80108c0:	4629      	mov	r1, r5
 80108c2:	f7ff ff6b 	bl	801079c <_malloc_r>
 80108c6:	4606      	mov	r6, r0
 80108c8:	b950      	cbnz	r0, 80108e0 <__ssputs_r+0x5c>
 80108ca:	230c      	movs	r3, #12
 80108cc:	f04f 30ff 	mov.w	r0, #4294967295
 80108d0:	f8ca 3000 	str.w	r3, [sl]
 80108d4:	89a3      	ldrh	r3, [r4, #12]
 80108d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108da:	81a3      	strh	r3, [r4, #12]
 80108dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e0:	464a      	mov	r2, r9
 80108e2:	6921      	ldr	r1, [r4, #16]
 80108e4:	f7ff fa18 	bl	800fd18 <memcpy>
 80108e8:	89a3      	ldrh	r3, [r4, #12]
 80108ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108f2:	81a3      	strh	r3, [r4, #12]
 80108f4:	6126      	str	r6, [r4, #16]
 80108f6:	444e      	add	r6, r9
 80108f8:	6026      	str	r6, [r4, #0]
 80108fa:	463e      	mov	r6, r7
 80108fc:	6165      	str	r5, [r4, #20]
 80108fe:	eba5 0509 	sub.w	r5, r5, r9
 8010902:	60a5      	str	r5, [r4, #8]
 8010904:	42be      	cmp	r6, r7
 8010906:	d900      	bls.n	801090a <__ssputs_r+0x86>
 8010908:	463e      	mov	r6, r7
 801090a:	4632      	mov	r2, r6
 801090c:	4641      	mov	r1, r8
 801090e:	6820      	ldr	r0, [r4, #0]
 8010910:	f000 f968 	bl	8010be4 <memmove>
 8010914:	68a3      	ldr	r3, [r4, #8]
 8010916:	2000      	movs	r0, #0
 8010918:	1b9b      	subs	r3, r3, r6
 801091a:	60a3      	str	r3, [r4, #8]
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	4433      	add	r3, r6
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	e7db      	b.n	80108dc <__ssputs_r+0x58>
 8010924:	462a      	mov	r2, r5
 8010926:	f000 f983 	bl	8010c30 <_realloc_r>
 801092a:	4606      	mov	r6, r0
 801092c:	2800      	cmp	r0, #0
 801092e:	d1e1      	bne.n	80108f4 <__ssputs_r+0x70>
 8010930:	4650      	mov	r0, sl
 8010932:	6921      	ldr	r1, [r4, #16]
 8010934:	f7ff feca 	bl	80106cc <_free_r>
 8010938:	e7c7      	b.n	80108ca <__ssputs_r+0x46>
	...

0801093c <_svfiprintf_r>:
 801093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010940:	4698      	mov	r8, r3
 8010942:	898b      	ldrh	r3, [r1, #12]
 8010944:	4607      	mov	r7, r0
 8010946:	061b      	lsls	r3, r3, #24
 8010948:	460d      	mov	r5, r1
 801094a:	4614      	mov	r4, r2
 801094c:	b09d      	sub	sp, #116	; 0x74
 801094e:	d50e      	bpl.n	801096e <_svfiprintf_r+0x32>
 8010950:	690b      	ldr	r3, [r1, #16]
 8010952:	b963      	cbnz	r3, 801096e <_svfiprintf_r+0x32>
 8010954:	2140      	movs	r1, #64	; 0x40
 8010956:	f7ff ff21 	bl	801079c <_malloc_r>
 801095a:	6028      	str	r0, [r5, #0]
 801095c:	6128      	str	r0, [r5, #16]
 801095e:	b920      	cbnz	r0, 801096a <_svfiprintf_r+0x2e>
 8010960:	230c      	movs	r3, #12
 8010962:	603b      	str	r3, [r7, #0]
 8010964:	f04f 30ff 	mov.w	r0, #4294967295
 8010968:	e0d1      	b.n	8010b0e <_svfiprintf_r+0x1d2>
 801096a:	2340      	movs	r3, #64	; 0x40
 801096c:	616b      	str	r3, [r5, #20]
 801096e:	2300      	movs	r3, #0
 8010970:	9309      	str	r3, [sp, #36]	; 0x24
 8010972:	2320      	movs	r3, #32
 8010974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010978:	2330      	movs	r3, #48	; 0x30
 801097a:	f04f 0901 	mov.w	r9, #1
 801097e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010982:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b28 <_svfiprintf_r+0x1ec>
 8010986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801098a:	4623      	mov	r3, r4
 801098c:	469a      	mov	sl, r3
 801098e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010992:	b10a      	cbz	r2, 8010998 <_svfiprintf_r+0x5c>
 8010994:	2a25      	cmp	r2, #37	; 0x25
 8010996:	d1f9      	bne.n	801098c <_svfiprintf_r+0x50>
 8010998:	ebba 0b04 	subs.w	fp, sl, r4
 801099c:	d00b      	beq.n	80109b6 <_svfiprintf_r+0x7a>
 801099e:	465b      	mov	r3, fp
 80109a0:	4622      	mov	r2, r4
 80109a2:	4629      	mov	r1, r5
 80109a4:	4638      	mov	r0, r7
 80109a6:	f7ff ff6d 	bl	8010884 <__ssputs_r>
 80109aa:	3001      	adds	r0, #1
 80109ac:	f000 80aa 	beq.w	8010b04 <_svfiprintf_r+0x1c8>
 80109b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109b2:	445a      	add	r2, fp
 80109b4:	9209      	str	r2, [sp, #36]	; 0x24
 80109b6:	f89a 3000 	ldrb.w	r3, [sl]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f000 80a2 	beq.w	8010b04 <_svfiprintf_r+0x1c8>
 80109c0:	2300      	movs	r3, #0
 80109c2:	f04f 32ff 	mov.w	r2, #4294967295
 80109c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ca:	f10a 0a01 	add.w	sl, sl, #1
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	9307      	str	r3, [sp, #28]
 80109d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109d6:	931a      	str	r3, [sp, #104]	; 0x68
 80109d8:	4654      	mov	r4, sl
 80109da:	2205      	movs	r2, #5
 80109dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109e0:	4851      	ldr	r0, [pc, #324]	; (8010b28 <_svfiprintf_r+0x1ec>)
 80109e2:	f7ff f98b 	bl	800fcfc <memchr>
 80109e6:	9a04      	ldr	r2, [sp, #16]
 80109e8:	b9d8      	cbnz	r0, 8010a22 <_svfiprintf_r+0xe6>
 80109ea:	06d0      	lsls	r0, r2, #27
 80109ec:	bf44      	itt	mi
 80109ee:	2320      	movmi	r3, #32
 80109f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109f4:	0711      	lsls	r1, r2, #28
 80109f6:	bf44      	itt	mi
 80109f8:	232b      	movmi	r3, #43	; 0x2b
 80109fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109fe:	f89a 3000 	ldrb.w	r3, [sl]
 8010a02:	2b2a      	cmp	r3, #42	; 0x2a
 8010a04:	d015      	beq.n	8010a32 <_svfiprintf_r+0xf6>
 8010a06:	4654      	mov	r4, sl
 8010a08:	2000      	movs	r0, #0
 8010a0a:	f04f 0c0a 	mov.w	ip, #10
 8010a0e:	9a07      	ldr	r2, [sp, #28]
 8010a10:	4621      	mov	r1, r4
 8010a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a16:	3b30      	subs	r3, #48	; 0x30
 8010a18:	2b09      	cmp	r3, #9
 8010a1a:	d94e      	bls.n	8010aba <_svfiprintf_r+0x17e>
 8010a1c:	b1b0      	cbz	r0, 8010a4c <_svfiprintf_r+0x110>
 8010a1e:	9207      	str	r2, [sp, #28]
 8010a20:	e014      	b.n	8010a4c <_svfiprintf_r+0x110>
 8010a22:	eba0 0308 	sub.w	r3, r0, r8
 8010a26:	fa09 f303 	lsl.w	r3, r9, r3
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	46a2      	mov	sl, r4
 8010a2e:	9304      	str	r3, [sp, #16]
 8010a30:	e7d2      	b.n	80109d8 <_svfiprintf_r+0x9c>
 8010a32:	9b03      	ldr	r3, [sp, #12]
 8010a34:	1d19      	adds	r1, r3, #4
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	9103      	str	r1, [sp, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	bfbb      	ittet	lt
 8010a3e:	425b      	neglt	r3, r3
 8010a40:	f042 0202 	orrlt.w	r2, r2, #2
 8010a44:	9307      	strge	r3, [sp, #28]
 8010a46:	9307      	strlt	r3, [sp, #28]
 8010a48:	bfb8      	it	lt
 8010a4a:	9204      	strlt	r2, [sp, #16]
 8010a4c:	7823      	ldrb	r3, [r4, #0]
 8010a4e:	2b2e      	cmp	r3, #46	; 0x2e
 8010a50:	d10c      	bne.n	8010a6c <_svfiprintf_r+0x130>
 8010a52:	7863      	ldrb	r3, [r4, #1]
 8010a54:	2b2a      	cmp	r3, #42	; 0x2a
 8010a56:	d135      	bne.n	8010ac4 <_svfiprintf_r+0x188>
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	3402      	adds	r4, #2
 8010a5c:	1d1a      	adds	r2, r3, #4
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	9203      	str	r2, [sp, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	bfb8      	it	lt
 8010a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a6a:	9305      	str	r3, [sp, #20]
 8010a6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010b2c <_svfiprintf_r+0x1f0>
 8010a70:	2203      	movs	r2, #3
 8010a72:	4650      	mov	r0, sl
 8010a74:	7821      	ldrb	r1, [r4, #0]
 8010a76:	f7ff f941 	bl	800fcfc <memchr>
 8010a7a:	b140      	cbz	r0, 8010a8e <_svfiprintf_r+0x152>
 8010a7c:	2340      	movs	r3, #64	; 0x40
 8010a7e:	eba0 000a 	sub.w	r0, r0, sl
 8010a82:	fa03 f000 	lsl.w	r0, r3, r0
 8010a86:	9b04      	ldr	r3, [sp, #16]
 8010a88:	3401      	adds	r4, #1
 8010a8a:	4303      	orrs	r3, r0
 8010a8c:	9304      	str	r3, [sp, #16]
 8010a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a92:	2206      	movs	r2, #6
 8010a94:	4826      	ldr	r0, [pc, #152]	; (8010b30 <_svfiprintf_r+0x1f4>)
 8010a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a9a:	f7ff f92f 	bl	800fcfc <memchr>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d038      	beq.n	8010b14 <_svfiprintf_r+0x1d8>
 8010aa2:	4b24      	ldr	r3, [pc, #144]	; (8010b34 <_svfiprintf_r+0x1f8>)
 8010aa4:	bb1b      	cbnz	r3, 8010aee <_svfiprintf_r+0x1b2>
 8010aa6:	9b03      	ldr	r3, [sp, #12]
 8010aa8:	3307      	adds	r3, #7
 8010aaa:	f023 0307 	bic.w	r3, r3, #7
 8010aae:	3308      	adds	r3, #8
 8010ab0:	9303      	str	r3, [sp, #12]
 8010ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab4:	4433      	add	r3, r6
 8010ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab8:	e767      	b.n	801098a <_svfiprintf_r+0x4e>
 8010aba:	460c      	mov	r4, r1
 8010abc:	2001      	movs	r0, #1
 8010abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ac2:	e7a5      	b.n	8010a10 <_svfiprintf_r+0xd4>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f04f 0c0a 	mov.w	ip, #10
 8010aca:	4619      	mov	r1, r3
 8010acc:	3401      	adds	r4, #1
 8010ace:	9305      	str	r3, [sp, #20]
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ad6:	3a30      	subs	r2, #48	; 0x30
 8010ad8:	2a09      	cmp	r2, #9
 8010ada:	d903      	bls.n	8010ae4 <_svfiprintf_r+0x1a8>
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d0c5      	beq.n	8010a6c <_svfiprintf_r+0x130>
 8010ae0:	9105      	str	r1, [sp, #20]
 8010ae2:	e7c3      	b.n	8010a6c <_svfiprintf_r+0x130>
 8010ae4:	4604      	mov	r4, r0
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010aec:	e7f0      	b.n	8010ad0 <_svfiprintf_r+0x194>
 8010aee:	ab03      	add	r3, sp, #12
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	462a      	mov	r2, r5
 8010af4:	4638      	mov	r0, r7
 8010af6:	4b10      	ldr	r3, [pc, #64]	; (8010b38 <_svfiprintf_r+0x1fc>)
 8010af8:	a904      	add	r1, sp, #16
 8010afa:	f7fc fce1 	bl	800d4c0 <_printf_float>
 8010afe:	1c42      	adds	r2, r0, #1
 8010b00:	4606      	mov	r6, r0
 8010b02:	d1d6      	bne.n	8010ab2 <_svfiprintf_r+0x176>
 8010b04:	89ab      	ldrh	r3, [r5, #12]
 8010b06:	065b      	lsls	r3, r3, #25
 8010b08:	f53f af2c 	bmi.w	8010964 <_svfiprintf_r+0x28>
 8010b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b0e:	b01d      	add	sp, #116	; 0x74
 8010b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b14:	ab03      	add	r3, sp, #12
 8010b16:	9300      	str	r3, [sp, #0]
 8010b18:	462a      	mov	r2, r5
 8010b1a:	4638      	mov	r0, r7
 8010b1c:	4b06      	ldr	r3, [pc, #24]	; (8010b38 <_svfiprintf_r+0x1fc>)
 8010b1e:	a904      	add	r1, sp, #16
 8010b20:	f7fc ff6a 	bl	800d9f8 <_printf_i>
 8010b24:	e7eb      	b.n	8010afe <_svfiprintf_r+0x1c2>
 8010b26:	bf00      	nop
 8010b28:	08011d4c 	.word	0x08011d4c
 8010b2c:	08011d52 	.word	0x08011d52
 8010b30:	08011d56 	.word	0x08011d56
 8010b34:	0800d4c1 	.word	0x0800d4c1
 8010b38:	08010885 	.word	0x08010885

08010b3c <nan>:
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	4901      	ldr	r1, [pc, #4]	; (8010b44 <nan+0x8>)
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	7ff80000 	.word	0x7ff80000

08010b48 <_sbrk_r>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	4d05      	ldr	r5, [pc, #20]	; (8010b64 <_sbrk_r+0x1c>)
 8010b4e:	4604      	mov	r4, r0
 8010b50:	4608      	mov	r0, r1
 8010b52:	602b      	str	r3, [r5, #0]
 8010b54:	f7f7 f9b0 	bl	8007eb8 <_sbrk>
 8010b58:	1c43      	adds	r3, r0, #1
 8010b5a:	d102      	bne.n	8010b62 <_sbrk_r+0x1a>
 8010b5c:	682b      	ldr	r3, [r5, #0]
 8010b5e:	b103      	cbz	r3, 8010b62 <_sbrk_r+0x1a>
 8010b60:	6023      	str	r3, [r4, #0]
 8010b62:	bd38      	pop	{r3, r4, r5, pc}
 8010b64:	20001c04 	.word	0x20001c04

08010b68 <__ascii_wctomb>:
 8010b68:	4603      	mov	r3, r0
 8010b6a:	4608      	mov	r0, r1
 8010b6c:	b141      	cbz	r1, 8010b80 <__ascii_wctomb+0x18>
 8010b6e:	2aff      	cmp	r2, #255	; 0xff
 8010b70:	d904      	bls.n	8010b7c <__ascii_wctomb+0x14>
 8010b72:	228a      	movs	r2, #138	; 0x8a
 8010b74:	f04f 30ff 	mov.w	r0, #4294967295
 8010b78:	601a      	str	r2, [r3, #0]
 8010b7a:	4770      	bx	lr
 8010b7c:	2001      	movs	r0, #1
 8010b7e:	700a      	strb	r2, [r1, #0]
 8010b80:	4770      	bx	lr
	...

08010b84 <__assert_func>:
 8010b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b86:	4614      	mov	r4, r2
 8010b88:	461a      	mov	r2, r3
 8010b8a:	4b09      	ldr	r3, [pc, #36]	; (8010bb0 <__assert_func+0x2c>)
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	68d8      	ldr	r0, [r3, #12]
 8010b92:	b14c      	cbz	r4, 8010ba8 <__assert_func+0x24>
 8010b94:	4b07      	ldr	r3, [pc, #28]	; (8010bb4 <__assert_func+0x30>)
 8010b96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b9a:	9100      	str	r1, [sp, #0]
 8010b9c:	462b      	mov	r3, r5
 8010b9e:	4906      	ldr	r1, [pc, #24]	; (8010bb8 <__assert_func+0x34>)
 8010ba0:	f000 f80e 	bl	8010bc0 <fiprintf>
 8010ba4:	f000 fa8a 	bl	80110bc <abort>
 8010ba8:	4b04      	ldr	r3, [pc, #16]	; (8010bbc <__assert_func+0x38>)
 8010baa:	461c      	mov	r4, r3
 8010bac:	e7f3      	b.n	8010b96 <__assert_func+0x12>
 8010bae:	bf00      	nop
 8010bb0:	20000194 	.word	0x20000194
 8010bb4:	08011d5d 	.word	0x08011d5d
 8010bb8:	08011d6a 	.word	0x08011d6a
 8010bbc:	08011d98 	.word	0x08011d98

08010bc0 <fiprintf>:
 8010bc0:	b40e      	push	{r1, r2, r3}
 8010bc2:	b503      	push	{r0, r1, lr}
 8010bc4:	4601      	mov	r1, r0
 8010bc6:	ab03      	add	r3, sp, #12
 8010bc8:	4805      	ldr	r0, [pc, #20]	; (8010be0 <fiprintf+0x20>)
 8010bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bce:	6800      	ldr	r0, [r0, #0]
 8010bd0:	9301      	str	r3, [sp, #4]
 8010bd2:	f000 f883 	bl	8010cdc <_vfiprintf_r>
 8010bd6:	b002      	add	sp, #8
 8010bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bdc:	b003      	add	sp, #12
 8010bde:	4770      	bx	lr
 8010be0:	20000194 	.word	0x20000194

08010be4 <memmove>:
 8010be4:	4288      	cmp	r0, r1
 8010be6:	b510      	push	{r4, lr}
 8010be8:	eb01 0402 	add.w	r4, r1, r2
 8010bec:	d902      	bls.n	8010bf4 <memmove+0x10>
 8010bee:	4284      	cmp	r4, r0
 8010bf0:	4623      	mov	r3, r4
 8010bf2:	d807      	bhi.n	8010c04 <memmove+0x20>
 8010bf4:	1e43      	subs	r3, r0, #1
 8010bf6:	42a1      	cmp	r1, r4
 8010bf8:	d008      	beq.n	8010c0c <memmove+0x28>
 8010bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c02:	e7f8      	b.n	8010bf6 <memmove+0x12>
 8010c04:	4601      	mov	r1, r0
 8010c06:	4402      	add	r2, r0
 8010c08:	428a      	cmp	r2, r1
 8010c0a:	d100      	bne.n	8010c0e <memmove+0x2a>
 8010c0c:	bd10      	pop	{r4, pc}
 8010c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c16:	e7f7      	b.n	8010c08 <memmove+0x24>

08010c18 <__malloc_lock>:
 8010c18:	4801      	ldr	r0, [pc, #4]	; (8010c20 <__malloc_lock+0x8>)
 8010c1a:	f000 bc0b 	b.w	8011434 <__retarget_lock_acquire_recursive>
 8010c1e:	bf00      	nop
 8010c20:	20001c08 	.word	0x20001c08

08010c24 <__malloc_unlock>:
 8010c24:	4801      	ldr	r0, [pc, #4]	; (8010c2c <__malloc_unlock+0x8>)
 8010c26:	f000 bc06 	b.w	8011436 <__retarget_lock_release_recursive>
 8010c2a:	bf00      	nop
 8010c2c:	20001c08 	.word	0x20001c08

08010c30 <_realloc_r>:
 8010c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c34:	4680      	mov	r8, r0
 8010c36:	4614      	mov	r4, r2
 8010c38:	460e      	mov	r6, r1
 8010c3a:	b921      	cbnz	r1, 8010c46 <_realloc_r+0x16>
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c42:	f7ff bdab 	b.w	801079c <_malloc_r>
 8010c46:	b92a      	cbnz	r2, 8010c54 <_realloc_r+0x24>
 8010c48:	f7ff fd40 	bl	80106cc <_free_r>
 8010c4c:	4625      	mov	r5, r4
 8010c4e:	4628      	mov	r0, r5
 8010c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c54:	f000 fc56 	bl	8011504 <_malloc_usable_size_r>
 8010c58:	4284      	cmp	r4, r0
 8010c5a:	4607      	mov	r7, r0
 8010c5c:	d802      	bhi.n	8010c64 <_realloc_r+0x34>
 8010c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c62:	d812      	bhi.n	8010c8a <_realloc_r+0x5a>
 8010c64:	4621      	mov	r1, r4
 8010c66:	4640      	mov	r0, r8
 8010c68:	f7ff fd98 	bl	801079c <_malloc_r>
 8010c6c:	4605      	mov	r5, r0
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d0ed      	beq.n	8010c4e <_realloc_r+0x1e>
 8010c72:	42bc      	cmp	r4, r7
 8010c74:	4622      	mov	r2, r4
 8010c76:	4631      	mov	r1, r6
 8010c78:	bf28      	it	cs
 8010c7a:	463a      	movcs	r2, r7
 8010c7c:	f7ff f84c 	bl	800fd18 <memcpy>
 8010c80:	4631      	mov	r1, r6
 8010c82:	4640      	mov	r0, r8
 8010c84:	f7ff fd22 	bl	80106cc <_free_r>
 8010c88:	e7e1      	b.n	8010c4e <_realloc_r+0x1e>
 8010c8a:	4635      	mov	r5, r6
 8010c8c:	e7df      	b.n	8010c4e <_realloc_r+0x1e>

08010c8e <__sfputc_r>:
 8010c8e:	6893      	ldr	r3, [r2, #8]
 8010c90:	b410      	push	{r4}
 8010c92:	3b01      	subs	r3, #1
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	6093      	str	r3, [r2, #8]
 8010c98:	da07      	bge.n	8010caa <__sfputc_r+0x1c>
 8010c9a:	6994      	ldr	r4, [r2, #24]
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	db01      	blt.n	8010ca4 <__sfputc_r+0x16>
 8010ca0:	290a      	cmp	r1, #10
 8010ca2:	d102      	bne.n	8010caa <__sfputc_r+0x1c>
 8010ca4:	bc10      	pop	{r4}
 8010ca6:	f000 b949 	b.w	8010f3c <__swbuf_r>
 8010caa:	6813      	ldr	r3, [r2, #0]
 8010cac:	1c58      	adds	r0, r3, #1
 8010cae:	6010      	str	r0, [r2, #0]
 8010cb0:	7019      	strb	r1, [r3, #0]
 8010cb2:	4608      	mov	r0, r1
 8010cb4:	bc10      	pop	{r4}
 8010cb6:	4770      	bx	lr

08010cb8 <__sfputs_r>:
 8010cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cba:	4606      	mov	r6, r0
 8010cbc:	460f      	mov	r7, r1
 8010cbe:	4614      	mov	r4, r2
 8010cc0:	18d5      	adds	r5, r2, r3
 8010cc2:	42ac      	cmp	r4, r5
 8010cc4:	d101      	bne.n	8010cca <__sfputs_r+0x12>
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	e007      	b.n	8010cda <__sfputs_r+0x22>
 8010cca:	463a      	mov	r2, r7
 8010ccc:	4630      	mov	r0, r6
 8010cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cd2:	f7ff ffdc 	bl	8010c8e <__sfputc_r>
 8010cd6:	1c43      	adds	r3, r0, #1
 8010cd8:	d1f3      	bne.n	8010cc2 <__sfputs_r+0xa>
 8010cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010cdc <_vfiprintf_r>:
 8010cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce0:	460d      	mov	r5, r1
 8010ce2:	4614      	mov	r4, r2
 8010ce4:	4698      	mov	r8, r3
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	b09d      	sub	sp, #116	; 0x74
 8010cea:	b118      	cbz	r0, 8010cf4 <_vfiprintf_r+0x18>
 8010cec:	6983      	ldr	r3, [r0, #24]
 8010cee:	b90b      	cbnz	r3, 8010cf4 <_vfiprintf_r+0x18>
 8010cf0:	f000 fb02 	bl	80112f8 <__sinit>
 8010cf4:	4b89      	ldr	r3, [pc, #548]	; (8010f1c <_vfiprintf_r+0x240>)
 8010cf6:	429d      	cmp	r5, r3
 8010cf8:	d11b      	bne.n	8010d32 <_vfiprintf_r+0x56>
 8010cfa:	6875      	ldr	r5, [r6, #4]
 8010cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cfe:	07d9      	lsls	r1, r3, #31
 8010d00:	d405      	bmi.n	8010d0e <_vfiprintf_r+0x32>
 8010d02:	89ab      	ldrh	r3, [r5, #12]
 8010d04:	059a      	lsls	r2, r3, #22
 8010d06:	d402      	bmi.n	8010d0e <_vfiprintf_r+0x32>
 8010d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d0a:	f000 fb93 	bl	8011434 <__retarget_lock_acquire_recursive>
 8010d0e:	89ab      	ldrh	r3, [r5, #12]
 8010d10:	071b      	lsls	r3, r3, #28
 8010d12:	d501      	bpl.n	8010d18 <_vfiprintf_r+0x3c>
 8010d14:	692b      	ldr	r3, [r5, #16]
 8010d16:	b9eb      	cbnz	r3, 8010d54 <_vfiprintf_r+0x78>
 8010d18:	4629      	mov	r1, r5
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f000 f960 	bl	8010fe0 <__swsetup_r>
 8010d20:	b1c0      	cbz	r0, 8010d54 <_vfiprintf_r+0x78>
 8010d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d24:	07dc      	lsls	r4, r3, #31
 8010d26:	d50e      	bpl.n	8010d46 <_vfiprintf_r+0x6a>
 8010d28:	f04f 30ff 	mov.w	r0, #4294967295
 8010d2c:	b01d      	add	sp, #116	; 0x74
 8010d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d32:	4b7b      	ldr	r3, [pc, #492]	; (8010f20 <_vfiprintf_r+0x244>)
 8010d34:	429d      	cmp	r5, r3
 8010d36:	d101      	bne.n	8010d3c <_vfiprintf_r+0x60>
 8010d38:	68b5      	ldr	r5, [r6, #8]
 8010d3a:	e7df      	b.n	8010cfc <_vfiprintf_r+0x20>
 8010d3c:	4b79      	ldr	r3, [pc, #484]	; (8010f24 <_vfiprintf_r+0x248>)
 8010d3e:	429d      	cmp	r5, r3
 8010d40:	bf08      	it	eq
 8010d42:	68f5      	ldreq	r5, [r6, #12]
 8010d44:	e7da      	b.n	8010cfc <_vfiprintf_r+0x20>
 8010d46:	89ab      	ldrh	r3, [r5, #12]
 8010d48:	0598      	lsls	r0, r3, #22
 8010d4a:	d4ed      	bmi.n	8010d28 <_vfiprintf_r+0x4c>
 8010d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d4e:	f000 fb72 	bl	8011436 <__retarget_lock_release_recursive>
 8010d52:	e7e9      	b.n	8010d28 <_vfiprintf_r+0x4c>
 8010d54:	2300      	movs	r3, #0
 8010d56:	9309      	str	r3, [sp, #36]	; 0x24
 8010d58:	2320      	movs	r3, #32
 8010d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d5e:	2330      	movs	r3, #48	; 0x30
 8010d60:	f04f 0901 	mov.w	r9, #1
 8010d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010f28 <_vfiprintf_r+0x24c>
 8010d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d70:	4623      	mov	r3, r4
 8010d72:	469a      	mov	sl, r3
 8010d74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d78:	b10a      	cbz	r2, 8010d7e <_vfiprintf_r+0xa2>
 8010d7a:	2a25      	cmp	r2, #37	; 0x25
 8010d7c:	d1f9      	bne.n	8010d72 <_vfiprintf_r+0x96>
 8010d7e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d82:	d00b      	beq.n	8010d9c <_vfiprintf_r+0xc0>
 8010d84:	465b      	mov	r3, fp
 8010d86:	4622      	mov	r2, r4
 8010d88:	4629      	mov	r1, r5
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f7ff ff94 	bl	8010cb8 <__sfputs_r>
 8010d90:	3001      	adds	r0, #1
 8010d92:	f000 80aa 	beq.w	8010eea <_vfiprintf_r+0x20e>
 8010d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d98:	445a      	add	r2, fp
 8010d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8010d9c:	f89a 3000 	ldrb.w	r3, [sl]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 80a2 	beq.w	8010eea <_vfiprintf_r+0x20e>
 8010da6:	2300      	movs	r3, #0
 8010da8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010db0:	f10a 0a01 	add.w	sl, sl, #1
 8010db4:	9304      	str	r3, [sp, #16]
 8010db6:	9307      	str	r3, [sp, #28]
 8010db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8010dbe:	4654      	mov	r4, sl
 8010dc0:	2205      	movs	r2, #5
 8010dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc6:	4858      	ldr	r0, [pc, #352]	; (8010f28 <_vfiprintf_r+0x24c>)
 8010dc8:	f7fe ff98 	bl	800fcfc <memchr>
 8010dcc:	9a04      	ldr	r2, [sp, #16]
 8010dce:	b9d8      	cbnz	r0, 8010e08 <_vfiprintf_r+0x12c>
 8010dd0:	06d1      	lsls	r1, r2, #27
 8010dd2:	bf44      	itt	mi
 8010dd4:	2320      	movmi	r3, #32
 8010dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dda:	0713      	lsls	r3, r2, #28
 8010ddc:	bf44      	itt	mi
 8010dde:	232b      	movmi	r3, #43	; 0x2b
 8010de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010de4:	f89a 3000 	ldrb.w	r3, [sl]
 8010de8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dea:	d015      	beq.n	8010e18 <_vfiprintf_r+0x13c>
 8010dec:	4654      	mov	r4, sl
 8010dee:	2000      	movs	r0, #0
 8010df0:	f04f 0c0a 	mov.w	ip, #10
 8010df4:	9a07      	ldr	r2, [sp, #28]
 8010df6:	4621      	mov	r1, r4
 8010df8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dfc:	3b30      	subs	r3, #48	; 0x30
 8010dfe:	2b09      	cmp	r3, #9
 8010e00:	d94e      	bls.n	8010ea0 <_vfiprintf_r+0x1c4>
 8010e02:	b1b0      	cbz	r0, 8010e32 <_vfiprintf_r+0x156>
 8010e04:	9207      	str	r2, [sp, #28]
 8010e06:	e014      	b.n	8010e32 <_vfiprintf_r+0x156>
 8010e08:	eba0 0308 	sub.w	r3, r0, r8
 8010e0c:	fa09 f303 	lsl.w	r3, r9, r3
 8010e10:	4313      	orrs	r3, r2
 8010e12:	46a2      	mov	sl, r4
 8010e14:	9304      	str	r3, [sp, #16]
 8010e16:	e7d2      	b.n	8010dbe <_vfiprintf_r+0xe2>
 8010e18:	9b03      	ldr	r3, [sp, #12]
 8010e1a:	1d19      	adds	r1, r3, #4
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	9103      	str	r1, [sp, #12]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	bfbb      	ittet	lt
 8010e24:	425b      	neglt	r3, r3
 8010e26:	f042 0202 	orrlt.w	r2, r2, #2
 8010e2a:	9307      	strge	r3, [sp, #28]
 8010e2c:	9307      	strlt	r3, [sp, #28]
 8010e2e:	bfb8      	it	lt
 8010e30:	9204      	strlt	r2, [sp, #16]
 8010e32:	7823      	ldrb	r3, [r4, #0]
 8010e34:	2b2e      	cmp	r3, #46	; 0x2e
 8010e36:	d10c      	bne.n	8010e52 <_vfiprintf_r+0x176>
 8010e38:	7863      	ldrb	r3, [r4, #1]
 8010e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e3c:	d135      	bne.n	8010eaa <_vfiprintf_r+0x1ce>
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	3402      	adds	r4, #2
 8010e42:	1d1a      	adds	r2, r3, #4
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	9203      	str	r2, [sp, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	bfb8      	it	lt
 8010e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e50:	9305      	str	r3, [sp, #20]
 8010e52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010f2c <_vfiprintf_r+0x250>
 8010e56:	2203      	movs	r2, #3
 8010e58:	4650      	mov	r0, sl
 8010e5a:	7821      	ldrb	r1, [r4, #0]
 8010e5c:	f7fe ff4e 	bl	800fcfc <memchr>
 8010e60:	b140      	cbz	r0, 8010e74 <_vfiprintf_r+0x198>
 8010e62:	2340      	movs	r3, #64	; 0x40
 8010e64:	eba0 000a 	sub.w	r0, r0, sl
 8010e68:	fa03 f000 	lsl.w	r0, r3, r0
 8010e6c:	9b04      	ldr	r3, [sp, #16]
 8010e6e:	3401      	adds	r4, #1
 8010e70:	4303      	orrs	r3, r0
 8010e72:	9304      	str	r3, [sp, #16]
 8010e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e78:	2206      	movs	r2, #6
 8010e7a:	482d      	ldr	r0, [pc, #180]	; (8010f30 <_vfiprintf_r+0x254>)
 8010e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e80:	f7fe ff3c 	bl	800fcfc <memchr>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d03f      	beq.n	8010f08 <_vfiprintf_r+0x22c>
 8010e88:	4b2a      	ldr	r3, [pc, #168]	; (8010f34 <_vfiprintf_r+0x258>)
 8010e8a:	bb1b      	cbnz	r3, 8010ed4 <_vfiprintf_r+0x1f8>
 8010e8c:	9b03      	ldr	r3, [sp, #12]
 8010e8e:	3307      	adds	r3, #7
 8010e90:	f023 0307 	bic.w	r3, r3, #7
 8010e94:	3308      	adds	r3, #8
 8010e96:	9303      	str	r3, [sp, #12]
 8010e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e9a:	443b      	add	r3, r7
 8010e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9e:	e767      	b.n	8010d70 <_vfiprintf_r+0x94>
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	2001      	movs	r0, #1
 8010ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ea8:	e7a5      	b.n	8010df6 <_vfiprintf_r+0x11a>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	f04f 0c0a 	mov.w	ip, #10
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	3401      	adds	r4, #1
 8010eb4:	9305      	str	r3, [sp, #20]
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ebc:	3a30      	subs	r2, #48	; 0x30
 8010ebe:	2a09      	cmp	r2, #9
 8010ec0:	d903      	bls.n	8010eca <_vfiprintf_r+0x1ee>
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d0c5      	beq.n	8010e52 <_vfiprintf_r+0x176>
 8010ec6:	9105      	str	r1, [sp, #20]
 8010ec8:	e7c3      	b.n	8010e52 <_vfiprintf_r+0x176>
 8010eca:	4604      	mov	r4, r0
 8010ecc:	2301      	movs	r3, #1
 8010ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ed2:	e7f0      	b.n	8010eb6 <_vfiprintf_r+0x1da>
 8010ed4:	ab03      	add	r3, sp, #12
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	462a      	mov	r2, r5
 8010eda:	4630      	mov	r0, r6
 8010edc:	4b16      	ldr	r3, [pc, #88]	; (8010f38 <_vfiprintf_r+0x25c>)
 8010ede:	a904      	add	r1, sp, #16
 8010ee0:	f7fc faee 	bl	800d4c0 <_printf_float>
 8010ee4:	4607      	mov	r7, r0
 8010ee6:	1c78      	adds	r0, r7, #1
 8010ee8:	d1d6      	bne.n	8010e98 <_vfiprintf_r+0x1bc>
 8010eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eec:	07d9      	lsls	r1, r3, #31
 8010eee:	d405      	bmi.n	8010efc <_vfiprintf_r+0x220>
 8010ef0:	89ab      	ldrh	r3, [r5, #12]
 8010ef2:	059a      	lsls	r2, r3, #22
 8010ef4:	d402      	bmi.n	8010efc <_vfiprintf_r+0x220>
 8010ef6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ef8:	f000 fa9d 	bl	8011436 <__retarget_lock_release_recursive>
 8010efc:	89ab      	ldrh	r3, [r5, #12]
 8010efe:	065b      	lsls	r3, r3, #25
 8010f00:	f53f af12 	bmi.w	8010d28 <_vfiprintf_r+0x4c>
 8010f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f06:	e711      	b.n	8010d2c <_vfiprintf_r+0x50>
 8010f08:	ab03      	add	r3, sp, #12
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	462a      	mov	r2, r5
 8010f0e:	4630      	mov	r0, r6
 8010f10:	4b09      	ldr	r3, [pc, #36]	; (8010f38 <_vfiprintf_r+0x25c>)
 8010f12:	a904      	add	r1, sp, #16
 8010f14:	f7fc fd70 	bl	800d9f8 <_printf_i>
 8010f18:	e7e4      	b.n	8010ee4 <_vfiprintf_r+0x208>
 8010f1a:	bf00      	nop
 8010f1c:	08011ebc 	.word	0x08011ebc
 8010f20:	08011edc 	.word	0x08011edc
 8010f24:	08011e9c 	.word	0x08011e9c
 8010f28:	08011d4c 	.word	0x08011d4c
 8010f2c:	08011d52 	.word	0x08011d52
 8010f30:	08011d56 	.word	0x08011d56
 8010f34:	0800d4c1 	.word	0x0800d4c1
 8010f38:	08010cb9 	.word	0x08010cb9

08010f3c <__swbuf_r>:
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	460e      	mov	r6, r1
 8010f40:	4614      	mov	r4, r2
 8010f42:	4605      	mov	r5, r0
 8010f44:	b118      	cbz	r0, 8010f4e <__swbuf_r+0x12>
 8010f46:	6983      	ldr	r3, [r0, #24]
 8010f48:	b90b      	cbnz	r3, 8010f4e <__swbuf_r+0x12>
 8010f4a:	f000 f9d5 	bl	80112f8 <__sinit>
 8010f4e:	4b21      	ldr	r3, [pc, #132]	; (8010fd4 <__swbuf_r+0x98>)
 8010f50:	429c      	cmp	r4, r3
 8010f52:	d12b      	bne.n	8010fac <__swbuf_r+0x70>
 8010f54:	686c      	ldr	r4, [r5, #4]
 8010f56:	69a3      	ldr	r3, [r4, #24]
 8010f58:	60a3      	str	r3, [r4, #8]
 8010f5a:	89a3      	ldrh	r3, [r4, #12]
 8010f5c:	071a      	lsls	r2, r3, #28
 8010f5e:	d52f      	bpl.n	8010fc0 <__swbuf_r+0x84>
 8010f60:	6923      	ldr	r3, [r4, #16]
 8010f62:	b36b      	cbz	r3, 8010fc0 <__swbuf_r+0x84>
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	6820      	ldr	r0, [r4, #0]
 8010f68:	b2f6      	uxtb	r6, r6
 8010f6a:	1ac0      	subs	r0, r0, r3
 8010f6c:	6963      	ldr	r3, [r4, #20]
 8010f6e:	4637      	mov	r7, r6
 8010f70:	4283      	cmp	r3, r0
 8010f72:	dc04      	bgt.n	8010f7e <__swbuf_r+0x42>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4628      	mov	r0, r5
 8010f78:	f000 f92a 	bl	80111d0 <_fflush_r>
 8010f7c:	bb30      	cbnz	r0, 8010fcc <__swbuf_r+0x90>
 8010f7e:	68a3      	ldr	r3, [r4, #8]
 8010f80:	3001      	adds	r0, #1
 8010f82:	3b01      	subs	r3, #1
 8010f84:	60a3      	str	r3, [r4, #8]
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	1c5a      	adds	r2, r3, #1
 8010f8a:	6022      	str	r2, [r4, #0]
 8010f8c:	701e      	strb	r6, [r3, #0]
 8010f8e:	6963      	ldr	r3, [r4, #20]
 8010f90:	4283      	cmp	r3, r0
 8010f92:	d004      	beq.n	8010f9e <__swbuf_r+0x62>
 8010f94:	89a3      	ldrh	r3, [r4, #12]
 8010f96:	07db      	lsls	r3, r3, #31
 8010f98:	d506      	bpl.n	8010fa8 <__swbuf_r+0x6c>
 8010f9a:	2e0a      	cmp	r6, #10
 8010f9c:	d104      	bne.n	8010fa8 <__swbuf_r+0x6c>
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f000 f915 	bl	80111d0 <_fflush_r>
 8010fa6:	b988      	cbnz	r0, 8010fcc <__swbuf_r+0x90>
 8010fa8:	4638      	mov	r0, r7
 8010faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fac:	4b0a      	ldr	r3, [pc, #40]	; (8010fd8 <__swbuf_r+0x9c>)
 8010fae:	429c      	cmp	r4, r3
 8010fb0:	d101      	bne.n	8010fb6 <__swbuf_r+0x7a>
 8010fb2:	68ac      	ldr	r4, [r5, #8]
 8010fb4:	e7cf      	b.n	8010f56 <__swbuf_r+0x1a>
 8010fb6:	4b09      	ldr	r3, [pc, #36]	; (8010fdc <__swbuf_r+0xa0>)
 8010fb8:	429c      	cmp	r4, r3
 8010fba:	bf08      	it	eq
 8010fbc:	68ec      	ldreq	r4, [r5, #12]
 8010fbe:	e7ca      	b.n	8010f56 <__swbuf_r+0x1a>
 8010fc0:	4621      	mov	r1, r4
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f000 f80c 	bl	8010fe0 <__swsetup_r>
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d0cb      	beq.n	8010f64 <__swbuf_r+0x28>
 8010fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8010fd0:	e7ea      	b.n	8010fa8 <__swbuf_r+0x6c>
 8010fd2:	bf00      	nop
 8010fd4:	08011ebc 	.word	0x08011ebc
 8010fd8:	08011edc 	.word	0x08011edc
 8010fdc:	08011e9c 	.word	0x08011e9c

08010fe0 <__swsetup_r>:
 8010fe0:	4b32      	ldr	r3, [pc, #200]	; (80110ac <__swsetup_r+0xcc>)
 8010fe2:	b570      	push	{r4, r5, r6, lr}
 8010fe4:	681d      	ldr	r5, [r3, #0]
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	460c      	mov	r4, r1
 8010fea:	b125      	cbz	r5, 8010ff6 <__swsetup_r+0x16>
 8010fec:	69ab      	ldr	r3, [r5, #24]
 8010fee:	b913      	cbnz	r3, 8010ff6 <__swsetup_r+0x16>
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	f000 f981 	bl	80112f8 <__sinit>
 8010ff6:	4b2e      	ldr	r3, [pc, #184]	; (80110b0 <__swsetup_r+0xd0>)
 8010ff8:	429c      	cmp	r4, r3
 8010ffa:	d10f      	bne.n	801101c <__swsetup_r+0x3c>
 8010ffc:	686c      	ldr	r4, [r5, #4]
 8010ffe:	89a3      	ldrh	r3, [r4, #12]
 8011000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011004:	0719      	lsls	r1, r3, #28
 8011006:	d42c      	bmi.n	8011062 <__swsetup_r+0x82>
 8011008:	06dd      	lsls	r5, r3, #27
 801100a:	d411      	bmi.n	8011030 <__swsetup_r+0x50>
 801100c:	2309      	movs	r3, #9
 801100e:	6033      	str	r3, [r6, #0]
 8011010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011014:	f04f 30ff 	mov.w	r0, #4294967295
 8011018:	81a3      	strh	r3, [r4, #12]
 801101a:	e03e      	b.n	801109a <__swsetup_r+0xba>
 801101c:	4b25      	ldr	r3, [pc, #148]	; (80110b4 <__swsetup_r+0xd4>)
 801101e:	429c      	cmp	r4, r3
 8011020:	d101      	bne.n	8011026 <__swsetup_r+0x46>
 8011022:	68ac      	ldr	r4, [r5, #8]
 8011024:	e7eb      	b.n	8010ffe <__swsetup_r+0x1e>
 8011026:	4b24      	ldr	r3, [pc, #144]	; (80110b8 <__swsetup_r+0xd8>)
 8011028:	429c      	cmp	r4, r3
 801102a:	bf08      	it	eq
 801102c:	68ec      	ldreq	r4, [r5, #12]
 801102e:	e7e6      	b.n	8010ffe <__swsetup_r+0x1e>
 8011030:	0758      	lsls	r0, r3, #29
 8011032:	d512      	bpl.n	801105a <__swsetup_r+0x7a>
 8011034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011036:	b141      	cbz	r1, 801104a <__swsetup_r+0x6a>
 8011038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801103c:	4299      	cmp	r1, r3
 801103e:	d002      	beq.n	8011046 <__swsetup_r+0x66>
 8011040:	4630      	mov	r0, r6
 8011042:	f7ff fb43 	bl	80106cc <_free_r>
 8011046:	2300      	movs	r3, #0
 8011048:	6363      	str	r3, [r4, #52]	; 0x34
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011050:	81a3      	strh	r3, [r4, #12]
 8011052:	2300      	movs	r3, #0
 8011054:	6063      	str	r3, [r4, #4]
 8011056:	6923      	ldr	r3, [r4, #16]
 8011058:	6023      	str	r3, [r4, #0]
 801105a:	89a3      	ldrh	r3, [r4, #12]
 801105c:	f043 0308 	orr.w	r3, r3, #8
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	6923      	ldr	r3, [r4, #16]
 8011064:	b94b      	cbnz	r3, 801107a <__swsetup_r+0x9a>
 8011066:	89a3      	ldrh	r3, [r4, #12]
 8011068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801106c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011070:	d003      	beq.n	801107a <__swsetup_r+0x9a>
 8011072:	4621      	mov	r1, r4
 8011074:	4630      	mov	r0, r6
 8011076:	f000 fa05 	bl	8011484 <__smakebuf_r>
 801107a:	89a0      	ldrh	r0, [r4, #12]
 801107c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011080:	f010 0301 	ands.w	r3, r0, #1
 8011084:	d00a      	beq.n	801109c <__swsetup_r+0xbc>
 8011086:	2300      	movs	r3, #0
 8011088:	60a3      	str	r3, [r4, #8]
 801108a:	6963      	ldr	r3, [r4, #20]
 801108c:	425b      	negs	r3, r3
 801108e:	61a3      	str	r3, [r4, #24]
 8011090:	6923      	ldr	r3, [r4, #16]
 8011092:	b943      	cbnz	r3, 80110a6 <__swsetup_r+0xc6>
 8011094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011098:	d1ba      	bne.n	8011010 <__swsetup_r+0x30>
 801109a:	bd70      	pop	{r4, r5, r6, pc}
 801109c:	0781      	lsls	r1, r0, #30
 801109e:	bf58      	it	pl
 80110a0:	6963      	ldrpl	r3, [r4, #20]
 80110a2:	60a3      	str	r3, [r4, #8]
 80110a4:	e7f4      	b.n	8011090 <__swsetup_r+0xb0>
 80110a6:	2000      	movs	r0, #0
 80110a8:	e7f7      	b.n	801109a <__swsetup_r+0xba>
 80110aa:	bf00      	nop
 80110ac:	20000194 	.word	0x20000194
 80110b0:	08011ebc 	.word	0x08011ebc
 80110b4:	08011edc 	.word	0x08011edc
 80110b8:	08011e9c 	.word	0x08011e9c

080110bc <abort>:
 80110bc:	2006      	movs	r0, #6
 80110be:	b508      	push	{r3, lr}
 80110c0:	f000 fa50 	bl	8011564 <raise>
 80110c4:	2001      	movs	r0, #1
 80110c6:	f7f6 fec7 	bl	8007e58 <_exit>
	...

080110cc <__sflush_r>:
 80110cc:	898a      	ldrh	r2, [r1, #12]
 80110ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d0:	4605      	mov	r5, r0
 80110d2:	0710      	lsls	r0, r2, #28
 80110d4:	460c      	mov	r4, r1
 80110d6:	d457      	bmi.n	8011188 <__sflush_r+0xbc>
 80110d8:	684b      	ldr	r3, [r1, #4]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dc04      	bgt.n	80110e8 <__sflush_r+0x1c>
 80110de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	dc01      	bgt.n	80110e8 <__sflush_r+0x1c>
 80110e4:	2000      	movs	r0, #0
 80110e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	d0fa      	beq.n	80110e4 <__sflush_r+0x18>
 80110ee:	2300      	movs	r3, #0
 80110f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80110f4:	682f      	ldr	r7, [r5, #0]
 80110f6:	602b      	str	r3, [r5, #0]
 80110f8:	d032      	beq.n	8011160 <__sflush_r+0x94>
 80110fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	075a      	lsls	r2, r3, #29
 8011100:	d505      	bpl.n	801110e <__sflush_r+0x42>
 8011102:	6863      	ldr	r3, [r4, #4]
 8011104:	1ac0      	subs	r0, r0, r3
 8011106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011108:	b10b      	cbz	r3, 801110e <__sflush_r+0x42>
 801110a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801110c:	1ac0      	subs	r0, r0, r3
 801110e:	2300      	movs	r3, #0
 8011110:	4602      	mov	r2, r0
 8011112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011114:	4628      	mov	r0, r5
 8011116:	6a21      	ldr	r1, [r4, #32]
 8011118:	47b0      	blx	r6
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	89a3      	ldrh	r3, [r4, #12]
 801111e:	d106      	bne.n	801112e <__sflush_r+0x62>
 8011120:	6829      	ldr	r1, [r5, #0]
 8011122:	291d      	cmp	r1, #29
 8011124:	d82c      	bhi.n	8011180 <__sflush_r+0xb4>
 8011126:	4a29      	ldr	r2, [pc, #164]	; (80111cc <__sflush_r+0x100>)
 8011128:	40ca      	lsrs	r2, r1
 801112a:	07d6      	lsls	r6, r2, #31
 801112c:	d528      	bpl.n	8011180 <__sflush_r+0xb4>
 801112e:	2200      	movs	r2, #0
 8011130:	6062      	str	r2, [r4, #4]
 8011132:	6922      	ldr	r2, [r4, #16]
 8011134:	04d9      	lsls	r1, r3, #19
 8011136:	6022      	str	r2, [r4, #0]
 8011138:	d504      	bpl.n	8011144 <__sflush_r+0x78>
 801113a:	1c42      	adds	r2, r0, #1
 801113c:	d101      	bne.n	8011142 <__sflush_r+0x76>
 801113e:	682b      	ldr	r3, [r5, #0]
 8011140:	b903      	cbnz	r3, 8011144 <__sflush_r+0x78>
 8011142:	6560      	str	r0, [r4, #84]	; 0x54
 8011144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011146:	602f      	str	r7, [r5, #0]
 8011148:	2900      	cmp	r1, #0
 801114a:	d0cb      	beq.n	80110e4 <__sflush_r+0x18>
 801114c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011150:	4299      	cmp	r1, r3
 8011152:	d002      	beq.n	801115a <__sflush_r+0x8e>
 8011154:	4628      	mov	r0, r5
 8011156:	f7ff fab9 	bl	80106cc <_free_r>
 801115a:	2000      	movs	r0, #0
 801115c:	6360      	str	r0, [r4, #52]	; 0x34
 801115e:	e7c2      	b.n	80110e6 <__sflush_r+0x1a>
 8011160:	6a21      	ldr	r1, [r4, #32]
 8011162:	2301      	movs	r3, #1
 8011164:	4628      	mov	r0, r5
 8011166:	47b0      	blx	r6
 8011168:	1c41      	adds	r1, r0, #1
 801116a:	d1c7      	bne.n	80110fc <__sflush_r+0x30>
 801116c:	682b      	ldr	r3, [r5, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d0c4      	beq.n	80110fc <__sflush_r+0x30>
 8011172:	2b1d      	cmp	r3, #29
 8011174:	d001      	beq.n	801117a <__sflush_r+0xae>
 8011176:	2b16      	cmp	r3, #22
 8011178:	d101      	bne.n	801117e <__sflush_r+0xb2>
 801117a:	602f      	str	r7, [r5, #0]
 801117c:	e7b2      	b.n	80110e4 <__sflush_r+0x18>
 801117e:	89a3      	ldrh	r3, [r4, #12]
 8011180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011184:	81a3      	strh	r3, [r4, #12]
 8011186:	e7ae      	b.n	80110e6 <__sflush_r+0x1a>
 8011188:	690f      	ldr	r7, [r1, #16]
 801118a:	2f00      	cmp	r7, #0
 801118c:	d0aa      	beq.n	80110e4 <__sflush_r+0x18>
 801118e:	0793      	lsls	r3, r2, #30
 8011190:	bf18      	it	ne
 8011192:	2300      	movne	r3, #0
 8011194:	680e      	ldr	r6, [r1, #0]
 8011196:	bf08      	it	eq
 8011198:	694b      	ldreq	r3, [r1, #20]
 801119a:	1bf6      	subs	r6, r6, r7
 801119c:	600f      	str	r7, [r1, #0]
 801119e:	608b      	str	r3, [r1, #8]
 80111a0:	2e00      	cmp	r6, #0
 80111a2:	dd9f      	ble.n	80110e4 <__sflush_r+0x18>
 80111a4:	4633      	mov	r3, r6
 80111a6:	463a      	mov	r2, r7
 80111a8:	4628      	mov	r0, r5
 80111aa:	6a21      	ldr	r1, [r4, #32]
 80111ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80111b0:	47e0      	blx	ip
 80111b2:	2800      	cmp	r0, #0
 80111b4:	dc06      	bgt.n	80111c4 <__sflush_r+0xf8>
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	f04f 30ff 	mov.w	r0, #4294967295
 80111bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111c0:	81a3      	strh	r3, [r4, #12]
 80111c2:	e790      	b.n	80110e6 <__sflush_r+0x1a>
 80111c4:	4407      	add	r7, r0
 80111c6:	1a36      	subs	r6, r6, r0
 80111c8:	e7ea      	b.n	80111a0 <__sflush_r+0xd4>
 80111ca:	bf00      	nop
 80111cc:	20400001 	.word	0x20400001

080111d0 <_fflush_r>:
 80111d0:	b538      	push	{r3, r4, r5, lr}
 80111d2:	690b      	ldr	r3, [r1, #16]
 80111d4:	4605      	mov	r5, r0
 80111d6:	460c      	mov	r4, r1
 80111d8:	b913      	cbnz	r3, 80111e0 <_fflush_r+0x10>
 80111da:	2500      	movs	r5, #0
 80111dc:	4628      	mov	r0, r5
 80111de:	bd38      	pop	{r3, r4, r5, pc}
 80111e0:	b118      	cbz	r0, 80111ea <_fflush_r+0x1a>
 80111e2:	6983      	ldr	r3, [r0, #24]
 80111e4:	b90b      	cbnz	r3, 80111ea <_fflush_r+0x1a>
 80111e6:	f000 f887 	bl	80112f8 <__sinit>
 80111ea:	4b14      	ldr	r3, [pc, #80]	; (801123c <_fflush_r+0x6c>)
 80111ec:	429c      	cmp	r4, r3
 80111ee:	d11b      	bne.n	8011228 <_fflush_r+0x58>
 80111f0:	686c      	ldr	r4, [r5, #4]
 80111f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d0ef      	beq.n	80111da <_fflush_r+0xa>
 80111fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80111fc:	07d0      	lsls	r0, r2, #31
 80111fe:	d404      	bmi.n	801120a <_fflush_r+0x3a>
 8011200:	0599      	lsls	r1, r3, #22
 8011202:	d402      	bmi.n	801120a <_fflush_r+0x3a>
 8011204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011206:	f000 f915 	bl	8011434 <__retarget_lock_acquire_recursive>
 801120a:	4628      	mov	r0, r5
 801120c:	4621      	mov	r1, r4
 801120e:	f7ff ff5d 	bl	80110cc <__sflush_r>
 8011212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011214:	4605      	mov	r5, r0
 8011216:	07da      	lsls	r2, r3, #31
 8011218:	d4e0      	bmi.n	80111dc <_fflush_r+0xc>
 801121a:	89a3      	ldrh	r3, [r4, #12]
 801121c:	059b      	lsls	r3, r3, #22
 801121e:	d4dd      	bmi.n	80111dc <_fflush_r+0xc>
 8011220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011222:	f000 f908 	bl	8011436 <__retarget_lock_release_recursive>
 8011226:	e7d9      	b.n	80111dc <_fflush_r+0xc>
 8011228:	4b05      	ldr	r3, [pc, #20]	; (8011240 <_fflush_r+0x70>)
 801122a:	429c      	cmp	r4, r3
 801122c:	d101      	bne.n	8011232 <_fflush_r+0x62>
 801122e:	68ac      	ldr	r4, [r5, #8]
 8011230:	e7df      	b.n	80111f2 <_fflush_r+0x22>
 8011232:	4b04      	ldr	r3, [pc, #16]	; (8011244 <_fflush_r+0x74>)
 8011234:	429c      	cmp	r4, r3
 8011236:	bf08      	it	eq
 8011238:	68ec      	ldreq	r4, [r5, #12]
 801123a:	e7da      	b.n	80111f2 <_fflush_r+0x22>
 801123c:	08011ebc 	.word	0x08011ebc
 8011240:	08011edc 	.word	0x08011edc
 8011244:	08011e9c 	.word	0x08011e9c

08011248 <std>:
 8011248:	2300      	movs	r3, #0
 801124a:	b510      	push	{r4, lr}
 801124c:	4604      	mov	r4, r0
 801124e:	e9c0 3300 	strd	r3, r3, [r0]
 8011252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011256:	6083      	str	r3, [r0, #8]
 8011258:	8181      	strh	r1, [r0, #12]
 801125a:	6643      	str	r3, [r0, #100]	; 0x64
 801125c:	81c2      	strh	r2, [r0, #14]
 801125e:	6183      	str	r3, [r0, #24]
 8011260:	4619      	mov	r1, r3
 8011262:	2208      	movs	r2, #8
 8011264:	305c      	adds	r0, #92	; 0x5c
 8011266:	f7fc f885 	bl	800d374 <memset>
 801126a:	4b05      	ldr	r3, [pc, #20]	; (8011280 <std+0x38>)
 801126c:	6224      	str	r4, [r4, #32]
 801126e:	6263      	str	r3, [r4, #36]	; 0x24
 8011270:	4b04      	ldr	r3, [pc, #16]	; (8011284 <std+0x3c>)
 8011272:	62a3      	str	r3, [r4, #40]	; 0x28
 8011274:	4b04      	ldr	r3, [pc, #16]	; (8011288 <std+0x40>)
 8011276:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011278:	4b04      	ldr	r3, [pc, #16]	; (801128c <std+0x44>)
 801127a:	6323      	str	r3, [r4, #48]	; 0x30
 801127c:	bd10      	pop	{r4, pc}
 801127e:	bf00      	nop
 8011280:	0801159d 	.word	0x0801159d
 8011284:	080115bf 	.word	0x080115bf
 8011288:	080115f7 	.word	0x080115f7
 801128c:	0801161b 	.word	0x0801161b

08011290 <_cleanup_r>:
 8011290:	4901      	ldr	r1, [pc, #4]	; (8011298 <_cleanup_r+0x8>)
 8011292:	f000 b8af 	b.w	80113f4 <_fwalk_reent>
 8011296:	bf00      	nop
 8011298:	080111d1 	.word	0x080111d1

0801129c <__sfmoreglue>:
 801129c:	2268      	movs	r2, #104	; 0x68
 801129e:	b570      	push	{r4, r5, r6, lr}
 80112a0:	1e4d      	subs	r5, r1, #1
 80112a2:	4355      	muls	r5, r2
 80112a4:	460e      	mov	r6, r1
 80112a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112aa:	f7ff fa77 	bl	801079c <_malloc_r>
 80112ae:	4604      	mov	r4, r0
 80112b0:	b140      	cbz	r0, 80112c4 <__sfmoreglue+0x28>
 80112b2:	2100      	movs	r1, #0
 80112b4:	e9c0 1600 	strd	r1, r6, [r0]
 80112b8:	300c      	adds	r0, #12
 80112ba:	60a0      	str	r0, [r4, #8]
 80112bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112c0:	f7fc f858 	bl	800d374 <memset>
 80112c4:	4620      	mov	r0, r4
 80112c6:	bd70      	pop	{r4, r5, r6, pc}

080112c8 <__sfp_lock_acquire>:
 80112c8:	4801      	ldr	r0, [pc, #4]	; (80112d0 <__sfp_lock_acquire+0x8>)
 80112ca:	f000 b8b3 	b.w	8011434 <__retarget_lock_acquire_recursive>
 80112ce:	bf00      	nop
 80112d0:	20001c09 	.word	0x20001c09

080112d4 <__sfp_lock_release>:
 80112d4:	4801      	ldr	r0, [pc, #4]	; (80112dc <__sfp_lock_release+0x8>)
 80112d6:	f000 b8ae 	b.w	8011436 <__retarget_lock_release_recursive>
 80112da:	bf00      	nop
 80112dc:	20001c09 	.word	0x20001c09

080112e0 <__sinit_lock_acquire>:
 80112e0:	4801      	ldr	r0, [pc, #4]	; (80112e8 <__sinit_lock_acquire+0x8>)
 80112e2:	f000 b8a7 	b.w	8011434 <__retarget_lock_acquire_recursive>
 80112e6:	bf00      	nop
 80112e8:	20001c0a 	.word	0x20001c0a

080112ec <__sinit_lock_release>:
 80112ec:	4801      	ldr	r0, [pc, #4]	; (80112f4 <__sinit_lock_release+0x8>)
 80112ee:	f000 b8a2 	b.w	8011436 <__retarget_lock_release_recursive>
 80112f2:	bf00      	nop
 80112f4:	20001c0a 	.word	0x20001c0a

080112f8 <__sinit>:
 80112f8:	b510      	push	{r4, lr}
 80112fa:	4604      	mov	r4, r0
 80112fc:	f7ff fff0 	bl	80112e0 <__sinit_lock_acquire>
 8011300:	69a3      	ldr	r3, [r4, #24]
 8011302:	b11b      	cbz	r3, 801130c <__sinit+0x14>
 8011304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011308:	f7ff bff0 	b.w	80112ec <__sinit_lock_release>
 801130c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011310:	6523      	str	r3, [r4, #80]	; 0x50
 8011312:	4b13      	ldr	r3, [pc, #76]	; (8011360 <__sinit+0x68>)
 8011314:	4a13      	ldr	r2, [pc, #76]	; (8011364 <__sinit+0x6c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	62a2      	str	r2, [r4, #40]	; 0x28
 801131a:	42a3      	cmp	r3, r4
 801131c:	bf08      	it	eq
 801131e:	2301      	moveq	r3, #1
 8011320:	4620      	mov	r0, r4
 8011322:	bf08      	it	eq
 8011324:	61a3      	streq	r3, [r4, #24]
 8011326:	f000 f81f 	bl	8011368 <__sfp>
 801132a:	6060      	str	r0, [r4, #4]
 801132c:	4620      	mov	r0, r4
 801132e:	f000 f81b 	bl	8011368 <__sfp>
 8011332:	60a0      	str	r0, [r4, #8]
 8011334:	4620      	mov	r0, r4
 8011336:	f000 f817 	bl	8011368 <__sfp>
 801133a:	2200      	movs	r2, #0
 801133c:	2104      	movs	r1, #4
 801133e:	60e0      	str	r0, [r4, #12]
 8011340:	6860      	ldr	r0, [r4, #4]
 8011342:	f7ff ff81 	bl	8011248 <std>
 8011346:	2201      	movs	r2, #1
 8011348:	2109      	movs	r1, #9
 801134a:	68a0      	ldr	r0, [r4, #8]
 801134c:	f7ff ff7c 	bl	8011248 <std>
 8011350:	2202      	movs	r2, #2
 8011352:	2112      	movs	r1, #18
 8011354:	68e0      	ldr	r0, [r4, #12]
 8011356:	f7ff ff77 	bl	8011248 <std>
 801135a:	2301      	movs	r3, #1
 801135c:	61a3      	str	r3, [r4, #24]
 801135e:	e7d1      	b.n	8011304 <__sinit+0xc>
 8011360:	08011a5c 	.word	0x08011a5c
 8011364:	08011291 	.word	0x08011291

08011368 <__sfp>:
 8011368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136a:	4607      	mov	r7, r0
 801136c:	f7ff ffac 	bl	80112c8 <__sfp_lock_acquire>
 8011370:	4b1e      	ldr	r3, [pc, #120]	; (80113ec <__sfp+0x84>)
 8011372:	681e      	ldr	r6, [r3, #0]
 8011374:	69b3      	ldr	r3, [r6, #24]
 8011376:	b913      	cbnz	r3, 801137e <__sfp+0x16>
 8011378:	4630      	mov	r0, r6
 801137a:	f7ff ffbd 	bl	80112f8 <__sinit>
 801137e:	3648      	adds	r6, #72	; 0x48
 8011380:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011384:	3b01      	subs	r3, #1
 8011386:	d503      	bpl.n	8011390 <__sfp+0x28>
 8011388:	6833      	ldr	r3, [r6, #0]
 801138a:	b30b      	cbz	r3, 80113d0 <__sfp+0x68>
 801138c:	6836      	ldr	r6, [r6, #0]
 801138e:	e7f7      	b.n	8011380 <__sfp+0x18>
 8011390:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011394:	b9d5      	cbnz	r5, 80113cc <__sfp+0x64>
 8011396:	4b16      	ldr	r3, [pc, #88]	; (80113f0 <__sfp+0x88>)
 8011398:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801139c:	60e3      	str	r3, [r4, #12]
 801139e:	6665      	str	r5, [r4, #100]	; 0x64
 80113a0:	f000 f847 	bl	8011432 <__retarget_lock_init_recursive>
 80113a4:	f7ff ff96 	bl	80112d4 <__sfp_lock_release>
 80113a8:	2208      	movs	r2, #8
 80113aa:	4629      	mov	r1, r5
 80113ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80113b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80113b4:	6025      	str	r5, [r4, #0]
 80113b6:	61a5      	str	r5, [r4, #24]
 80113b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113bc:	f7fb ffda 	bl	800d374 <memset>
 80113c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113c8:	4620      	mov	r0, r4
 80113ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113cc:	3468      	adds	r4, #104	; 0x68
 80113ce:	e7d9      	b.n	8011384 <__sfp+0x1c>
 80113d0:	2104      	movs	r1, #4
 80113d2:	4638      	mov	r0, r7
 80113d4:	f7ff ff62 	bl	801129c <__sfmoreglue>
 80113d8:	4604      	mov	r4, r0
 80113da:	6030      	str	r0, [r6, #0]
 80113dc:	2800      	cmp	r0, #0
 80113de:	d1d5      	bne.n	801138c <__sfp+0x24>
 80113e0:	f7ff ff78 	bl	80112d4 <__sfp_lock_release>
 80113e4:	230c      	movs	r3, #12
 80113e6:	603b      	str	r3, [r7, #0]
 80113e8:	e7ee      	b.n	80113c8 <__sfp+0x60>
 80113ea:	bf00      	nop
 80113ec:	08011a5c 	.word	0x08011a5c
 80113f0:	ffff0001 	.word	0xffff0001

080113f4 <_fwalk_reent>:
 80113f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113f8:	4606      	mov	r6, r0
 80113fa:	4688      	mov	r8, r1
 80113fc:	2700      	movs	r7, #0
 80113fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011402:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011406:	f1b9 0901 	subs.w	r9, r9, #1
 801140a:	d505      	bpl.n	8011418 <_fwalk_reent+0x24>
 801140c:	6824      	ldr	r4, [r4, #0]
 801140e:	2c00      	cmp	r4, #0
 8011410:	d1f7      	bne.n	8011402 <_fwalk_reent+0xe>
 8011412:	4638      	mov	r0, r7
 8011414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011418:	89ab      	ldrh	r3, [r5, #12]
 801141a:	2b01      	cmp	r3, #1
 801141c:	d907      	bls.n	801142e <_fwalk_reent+0x3a>
 801141e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011422:	3301      	adds	r3, #1
 8011424:	d003      	beq.n	801142e <_fwalk_reent+0x3a>
 8011426:	4629      	mov	r1, r5
 8011428:	4630      	mov	r0, r6
 801142a:	47c0      	blx	r8
 801142c:	4307      	orrs	r7, r0
 801142e:	3568      	adds	r5, #104	; 0x68
 8011430:	e7e9      	b.n	8011406 <_fwalk_reent+0x12>

08011432 <__retarget_lock_init_recursive>:
 8011432:	4770      	bx	lr

08011434 <__retarget_lock_acquire_recursive>:
 8011434:	4770      	bx	lr

08011436 <__retarget_lock_release_recursive>:
 8011436:	4770      	bx	lr

08011438 <__swhatbuf_r>:
 8011438:	b570      	push	{r4, r5, r6, lr}
 801143a:	460e      	mov	r6, r1
 801143c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011440:	4614      	mov	r4, r2
 8011442:	2900      	cmp	r1, #0
 8011444:	461d      	mov	r5, r3
 8011446:	b096      	sub	sp, #88	; 0x58
 8011448:	da08      	bge.n	801145c <__swhatbuf_r+0x24>
 801144a:	2200      	movs	r2, #0
 801144c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011450:	602a      	str	r2, [r5, #0]
 8011452:	061a      	lsls	r2, r3, #24
 8011454:	d410      	bmi.n	8011478 <__swhatbuf_r+0x40>
 8011456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801145a:	e00e      	b.n	801147a <__swhatbuf_r+0x42>
 801145c:	466a      	mov	r2, sp
 801145e:	f000 f903 	bl	8011668 <_fstat_r>
 8011462:	2800      	cmp	r0, #0
 8011464:	dbf1      	blt.n	801144a <__swhatbuf_r+0x12>
 8011466:	9a01      	ldr	r2, [sp, #4]
 8011468:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801146c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011470:	425a      	negs	r2, r3
 8011472:	415a      	adcs	r2, r3
 8011474:	602a      	str	r2, [r5, #0]
 8011476:	e7ee      	b.n	8011456 <__swhatbuf_r+0x1e>
 8011478:	2340      	movs	r3, #64	; 0x40
 801147a:	2000      	movs	r0, #0
 801147c:	6023      	str	r3, [r4, #0]
 801147e:	b016      	add	sp, #88	; 0x58
 8011480:	bd70      	pop	{r4, r5, r6, pc}
	...

08011484 <__smakebuf_r>:
 8011484:	898b      	ldrh	r3, [r1, #12]
 8011486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011488:	079d      	lsls	r5, r3, #30
 801148a:	4606      	mov	r6, r0
 801148c:	460c      	mov	r4, r1
 801148e:	d507      	bpl.n	80114a0 <__smakebuf_r+0x1c>
 8011490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011494:	6023      	str	r3, [r4, #0]
 8011496:	6123      	str	r3, [r4, #16]
 8011498:	2301      	movs	r3, #1
 801149a:	6163      	str	r3, [r4, #20]
 801149c:	b002      	add	sp, #8
 801149e:	bd70      	pop	{r4, r5, r6, pc}
 80114a0:	466a      	mov	r2, sp
 80114a2:	ab01      	add	r3, sp, #4
 80114a4:	f7ff ffc8 	bl	8011438 <__swhatbuf_r>
 80114a8:	9900      	ldr	r1, [sp, #0]
 80114aa:	4605      	mov	r5, r0
 80114ac:	4630      	mov	r0, r6
 80114ae:	f7ff f975 	bl	801079c <_malloc_r>
 80114b2:	b948      	cbnz	r0, 80114c8 <__smakebuf_r+0x44>
 80114b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114b8:	059a      	lsls	r2, r3, #22
 80114ba:	d4ef      	bmi.n	801149c <__smakebuf_r+0x18>
 80114bc:	f023 0303 	bic.w	r3, r3, #3
 80114c0:	f043 0302 	orr.w	r3, r3, #2
 80114c4:	81a3      	strh	r3, [r4, #12]
 80114c6:	e7e3      	b.n	8011490 <__smakebuf_r+0xc>
 80114c8:	4b0d      	ldr	r3, [pc, #52]	; (8011500 <__smakebuf_r+0x7c>)
 80114ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80114cc:	89a3      	ldrh	r3, [r4, #12]
 80114ce:	6020      	str	r0, [r4, #0]
 80114d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d4:	81a3      	strh	r3, [r4, #12]
 80114d6:	9b00      	ldr	r3, [sp, #0]
 80114d8:	6120      	str	r0, [r4, #16]
 80114da:	6163      	str	r3, [r4, #20]
 80114dc:	9b01      	ldr	r3, [sp, #4]
 80114de:	b15b      	cbz	r3, 80114f8 <__smakebuf_r+0x74>
 80114e0:	4630      	mov	r0, r6
 80114e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114e6:	f000 f8d1 	bl	801168c <_isatty_r>
 80114ea:	b128      	cbz	r0, 80114f8 <__smakebuf_r+0x74>
 80114ec:	89a3      	ldrh	r3, [r4, #12]
 80114ee:	f023 0303 	bic.w	r3, r3, #3
 80114f2:	f043 0301 	orr.w	r3, r3, #1
 80114f6:	81a3      	strh	r3, [r4, #12]
 80114f8:	89a0      	ldrh	r0, [r4, #12]
 80114fa:	4305      	orrs	r5, r0
 80114fc:	81a5      	strh	r5, [r4, #12]
 80114fe:	e7cd      	b.n	801149c <__smakebuf_r+0x18>
 8011500:	08011291 	.word	0x08011291

08011504 <_malloc_usable_size_r>:
 8011504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011508:	1f18      	subs	r0, r3, #4
 801150a:	2b00      	cmp	r3, #0
 801150c:	bfbc      	itt	lt
 801150e:	580b      	ldrlt	r3, [r1, r0]
 8011510:	18c0      	addlt	r0, r0, r3
 8011512:	4770      	bx	lr

08011514 <_raise_r>:
 8011514:	291f      	cmp	r1, #31
 8011516:	b538      	push	{r3, r4, r5, lr}
 8011518:	4604      	mov	r4, r0
 801151a:	460d      	mov	r5, r1
 801151c:	d904      	bls.n	8011528 <_raise_r+0x14>
 801151e:	2316      	movs	r3, #22
 8011520:	6003      	str	r3, [r0, #0]
 8011522:	f04f 30ff 	mov.w	r0, #4294967295
 8011526:	bd38      	pop	{r3, r4, r5, pc}
 8011528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801152a:	b112      	cbz	r2, 8011532 <_raise_r+0x1e>
 801152c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011530:	b94b      	cbnz	r3, 8011546 <_raise_r+0x32>
 8011532:	4620      	mov	r0, r4
 8011534:	f000 f830 	bl	8011598 <_getpid_r>
 8011538:	462a      	mov	r2, r5
 801153a:	4601      	mov	r1, r0
 801153c:	4620      	mov	r0, r4
 801153e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011542:	f000 b817 	b.w	8011574 <_kill_r>
 8011546:	2b01      	cmp	r3, #1
 8011548:	d00a      	beq.n	8011560 <_raise_r+0x4c>
 801154a:	1c59      	adds	r1, r3, #1
 801154c:	d103      	bne.n	8011556 <_raise_r+0x42>
 801154e:	2316      	movs	r3, #22
 8011550:	6003      	str	r3, [r0, #0]
 8011552:	2001      	movs	r0, #1
 8011554:	e7e7      	b.n	8011526 <_raise_r+0x12>
 8011556:	2400      	movs	r4, #0
 8011558:	4628      	mov	r0, r5
 801155a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801155e:	4798      	blx	r3
 8011560:	2000      	movs	r0, #0
 8011562:	e7e0      	b.n	8011526 <_raise_r+0x12>

08011564 <raise>:
 8011564:	4b02      	ldr	r3, [pc, #8]	; (8011570 <raise+0xc>)
 8011566:	4601      	mov	r1, r0
 8011568:	6818      	ldr	r0, [r3, #0]
 801156a:	f7ff bfd3 	b.w	8011514 <_raise_r>
 801156e:	bf00      	nop
 8011570:	20000194 	.word	0x20000194

08011574 <_kill_r>:
 8011574:	b538      	push	{r3, r4, r5, lr}
 8011576:	2300      	movs	r3, #0
 8011578:	4d06      	ldr	r5, [pc, #24]	; (8011594 <_kill_r+0x20>)
 801157a:	4604      	mov	r4, r0
 801157c:	4608      	mov	r0, r1
 801157e:	4611      	mov	r1, r2
 8011580:	602b      	str	r3, [r5, #0]
 8011582:	f7f6 fc5f 	bl	8007e44 <_kill>
 8011586:	1c43      	adds	r3, r0, #1
 8011588:	d102      	bne.n	8011590 <_kill_r+0x1c>
 801158a:	682b      	ldr	r3, [r5, #0]
 801158c:	b103      	cbz	r3, 8011590 <_kill_r+0x1c>
 801158e:	6023      	str	r3, [r4, #0]
 8011590:	bd38      	pop	{r3, r4, r5, pc}
 8011592:	bf00      	nop
 8011594:	20001c04 	.word	0x20001c04

08011598 <_getpid_r>:
 8011598:	f7f6 bc52 	b.w	8007e40 <_getpid>

0801159c <__sread>:
 801159c:	b510      	push	{r4, lr}
 801159e:	460c      	mov	r4, r1
 80115a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a4:	f000 f894 	bl	80116d0 <_read_r>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	bfab      	itete	ge
 80115ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115ae:	89a3      	ldrhlt	r3, [r4, #12]
 80115b0:	181b      	addge	r3, r3, r0
 80115b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115b6:	bfac      	ite	ge
 80115b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80115ba:	81a3      	strhlt	r3, [r4, #12]
 80115bc:	bd10      	pop	{r4, pc}

080115be <__swrite>:
 80115be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c2:	461f      	mov	r7, r3
 80115c4:	898b      	ldrh	r3, [r1, #12]
 80115c6:	4605      	mov	r5, r0
 80115c8:	05db      	lsls	r3, r3, #23
 80115ca:	460c      	mov	r4, r1
 80115cc:	4616      	mov	r6, r2
 80115ce:	d505      	bpl.n	80115dc <__swrite+0x1e>
 80115d0:	2302      	movs	r3, #2
 80115d2:	2200      	movs	r2, #0
 80115d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115d8:	f000 f868 	bl	80116ac <_lseek_r>
 80115dc:	89a3      	ldrh	r3, [r4, #12]
 80115de:	4632      	mov	r2, r6
 80115e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115e4:	81a3      	strh	r3, [r4, #12]
 80115e6:	4628      	mov	r0, r5
 80115e8:	463b      	mov	r3, r7
 80115ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115f2:	f000 b817 	b.w	8011624 <_write_r>

080115f6 <__sseek>:
 80115f6:	b510      	push	{r4, lr}
 80115f8:	460c      	mov	r4, r1
 80115fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115fe:	f000 f855 	bl	80116ac <_lseek_r>
 8011602:	1c43      	adds	r3, r0, #1
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	bf15      	itete	ne
 8011608:	6560      	strne	r0, [r4, #84]	; 0x54
 801160a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801160e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011612:	81a3      	strheq	r3, [r4, #12]
 8011614:	bf18      	it	ne
 8011616:	81a3      	strhne	r3, [r4, #12]
 8011618:	bd10      	pop	{r4, pc}

0801161a <__sclose>:
 801161a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801161e:	f000 b813 	b.w	8011648 <_close_r>
	...

08011624 <_write_r>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	4604      	mov	r4, r0
 8011628:	4608      	mov	r0, r1
 801162a:	4611      	mov	r1, r2
 801162c:	2200      	movs	r2, #0
 801162e:	4d05      	ldr	r5, [pc, #20]	; (8011644 <_write_r+0x20>)
 8011630:	602a      	str	r2, [r5, #0]
 8011632:	461a      	mov	r2, r3
 8011634:	f7f6 fc24 	bl	8007e80 <_write>
 8011638:	1c43      	adds	r3, r0, #1
 801163a:	d102      	bne.n	8011642 <_write_r+0x1e>
 801163c:	682b      	ldr	r3, [r5, #0]
 801163e:	b103      	cbz	r3, 8011642 <_write_r+0x1e>
 8011640:	6023      	str	r3, [r4, #0]
 8011642:	bd38      	pop	{r3, r4, r5, pc}
 8011644:	20001c04 	.word	0x20001c04

08011648 <_close_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	2300      	movs	r3, #0
 801164c:	4d05      	ldr	r5, [pc, #20]	; (8011664 <_close_r+0x1c>)
 801164e:	4604      	mov	r4, r0
 8011650:	4608      	mov	r0, r1
 8011652:	602b      	str	r3, [r5, #0]
 8011654:	f7f6 fc22 	bl	8007e9c <_close>
 8011658:	1c43      	adds	r3, r0, #1
 801165a:	d102      	bne.n	8011662 <_close_r+0x1a>
 801165c:	682b      	ldr	r3, [r5, #0]
 801165e:	b103      	cbz	r3, 8011662 <_close_r+0x1a>
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	bd38      	pop	{r3, r4, r5, pc}
 8011664:	20001c04 	.word	0x20001c04

08011668 <_fstat_r>:
 8011668:	b538      	push	{r3, r4, r5, lr}
 801166a:	2300      	movs	r3, #0
 801166c:	4d06      	ldr	r5, [pc, #24]	; (8011688 <_fstat_r+0x20>)
 801166e:	4604      	mov	r4, r0
 8011670:	4608      	mov	r0, r1
 8011672:	4611      	mov	r1, r2
 8011674:	602b      	str	r3, [r5, #0]
 8011676:	f7f6 fc15 	bl	8007ea4 <_fstat>
 801167a:	1c43      	adds	r3, r0, #1
 801167c:	d102      	bne.n	8011684 <_fstat_r+0x1c>
 801167e:	682b      	ldr	r3, [r5, #0]
 8011680:	b103      	cbz	r3, 8011684 <_fstat_r+0x1c>
 8011682:	6023      	str	r3, [r4, #0]
 8011684:	bd38      	pop	{r3, r4, r5, pc}
 8011686:	bf00      	nop
 8011688:	20001c04 	.word	0x20001c04

0801168c <_isatty_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	2300      	movs	r3, #0
 8011690:	4d05      	ldr	r5, [pc, #20]	; (80116a8 <_isatty_r+0x1c>)
 8011692:	4604      	mov	r4, r0
 8011694:	4608      	mov	r0, r1
 8011696:	602b      	str	r3, [r5, #0]
 8011698:	f7f6 fc0a 	bl	8007eb0 <_isatty>
 801169c:	1c43      	adds	r3, r0, #1
 801169e:	d102      	bne.n	80116a6 <_isatty_r+0x1a>
 80116a0:	682b      	ldr	r3, [r5, #0]
 80116a2:	b103      	cbz	r3, 80116a6 <_isatty_r+0x1a>
 80116a4:	6023      	str	r3, [r4, #0]
 80116a6:	bd38      	pop	{r3, r4, r5, pc}
 80116a8:	20001c04 	.word	0x20001c04

080116ac <_lseek_r>:
 80116ac:	b538      	push	{r3, r4, r5, lr}
 80116ae:	4604      	mov	r4, r0
 80116b0:	4608      	mov	r0, r1
 80116b2:	4611      	mov	r1, r2
 80116b4:	2200      	movs	r2, #0
 80116b6:	4d05      	ldr	r5, [pc, #20]	; (80116cc <_lseek_r+0x20>)
 80116b8:	602a      	str	r2, [r5, #0]
 80116ba:	461a      	mov	r2, r3
 80116bc:	f7f6 fbfa 	bl	8007eb4 <_lseek>
 80116c0:	1c43      	adds	r3, r0, #1
 80116c2:	d102      	bne.n	80116ca <_lseek_r+0x1e>
 80116c4:	682b      	ldr	r3, [r5, #0]
 80116c6:	b103      	cbz	r3, 80116ca <_lseek_r+0x1e>
 80116c8:	6023      	str	r3, [r4, #0]
 80116ca:	bd38      	pop	{r3, r4, r5, pc}
 80116cc:	20001c04 	.word	0x20001c04

080116d0 <_read_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4604      	mov	r4, r0
 80116d4:	4608      	mov	r0, r1
 80116d6:	4611      	mov	r1, r2
 80116d8:	2200      	movs	r2, #0
 80116da:	4d05      	ldr	r5, [pc, #20]	; (80116f0 <_read_r+0x20>)
 80116dc:	602a      	str	r2, [r5, #0]
 80116de:	461a      	mov	r2, r3
 80116e0:	f7f6 fbc0 	bl	8007e64 <_read>
 80116e4:	1c43      	adds	r3, r0, #1
 80116e6:	d102      	bne.n	80116ee <_read_r+0x1e>
 80116e8:	682b      	ldr	r3, [r5, #0]
 80116ea:	b103      	cbz	r3, 80116ee <_read_r+0x1e>
 80116ec:	6023      	str	r3, [r4, #0]
 80116ee:	bd38      	pop	{r3, r4, r5, pc}
 80116f0:	20001c04 	.word	0x20001c04

080116f4 <_init>:
 80116f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116f6:	bf00      	nop
 80116f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116fa:	bc08      	pop	{r3}
 80116fc:	469e      	mov	lr, r3
 80116fe:	4770      	bx	lr

08011700 <_fini>:
 8011700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011702:	bf00      	nop
 8011704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011706:	bc08      	pop	{r3}
 8011708:	469e      	mov	lr, r3
 801170a:	4770      	bx	lr
