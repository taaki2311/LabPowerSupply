
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115dc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08011720  08011720  00021720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f3c  08011f3c  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  08011f3c  08011f3c  00021f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f44  08011f44  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f44  08011f44  00021f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f48  08011f48  00021f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08011f4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a8  20000370  080122bc  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20001c18  080122bc  00031c18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cae6  00000000  00000000  00030399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005288  00000000  00000000  0005ce7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000205f4  00000000  00000000  00062107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00082700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006a00  00000000  00000000  00083a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a13f  00000000  00000000  0008a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fc75  00000000  00000000  000a45af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b48  00000000  00000000  000d4224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00164d6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c0  00000000  00000000  00164dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	08011704 	.word	0x08011704

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	08011704 	.word	0x08011704

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_f2uiz>:
 800118c:	0042      	lsls	r2, r0, #1
 800118e:	d20e      	bcs.n	80011ae <__aeabi_f2uiz+0x22>
 8001190:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001194:	d30b      	bcc.n	80011ae <__aeabi_f2uiz+0x22>
 8001196:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119e:	d409      	bmi.n	80011b4 <__aeabi_f2uiz+0x28>
 80011a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4770      	bx	lr
 80011b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b8:	d101      	bne.n	80011be <__aeabi_f2uiz+0x32>
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	d102      	bne.n	80011c4 <__aeabi_f2uiz+0x38>
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	4770      	bx	lr
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__aeabi_uldivmod>:
 80011cc:	b953      	cbnz	r3, 80011e4 <__aeabi_uldivmod+0x18>
 80011ce:	b94a      	cbnz	r2, 80011e4 <__aeabi_uldivmod+0x18>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	bf08      	it	eq
 80011d4:	2800      	cmpeq	r0, #0
 80011d6:	bf1c      	itt	ne
 80011d8:	f04f 31ff 	movne.w	r1, #4294967295
 80011dc:	f04f 30ff 	movne.w	r0, #4294967295
 80011e0:	f000 b9ae 	b.w	8001540 <__aeabi_idiv0>
 80011e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ec:	f000 f83e 	bl	800126c <__udivmoddi4>
 80011f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <__aeabi_d2lz>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	460c      	mov	r4, r1
 8001202:	2200      	movs	r2, #0
 8001204:	2300      	movs	r3, #0
 8001206:	4628      	mov	r0, r5
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fbef 	bl	80009ec <__aeabi_dcmplt>
 800120e:	b928      	cbnz	r0, 800121c <__aeabi_d2lz+0x20>
 8001210:	4628      	mov	r0, r5
 8001212:	4621      	mov	r1, r4
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b80a 	b.w	8001230 <__aeabi_d2ulz>
 800121c:	4628      	mov	r0, r5
 800121e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001222:	f000 f805 	bl	8001230 <__aeabi_d2ulz>
 8001226:	4240      	negs	r0, r0
 8001228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop

08001230 <__aeabi_d2ulz>:
 8001230:	b5d0      	push	{r4, r6, r7, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__aeabi_d2ulz+0x34>)
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
 800123a:	f7ff f965 	bl	8000508 <__aeabi_dmul>
 800123e:	f7ff fc3b 	bl	8000ab8 <__aeabi_d2uiz>
 8001242:	4604      	mov	r4, r0
 8001244:	f7ff f8e6 	bl	8000414 <__aeabi_ui2d>
 8001248:	2200      	movs	r2, #0
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <__aeabi_d2ulz+0x38>)
 800124c:	f7ff f95c 	bl	8000508 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7fe ff9e 	bl	8000198 <__aeabi_dsub>
 800125c:	f7ff fc2c 	bl	8000ab8 <__aeabi_d2uiz>
 8001260:	4621      	mov	r1, r4
 8001262:	bdd0      	pop	{r4, r6, r7, pc}
 8001264:	3df00000 	.word	0x3df00000
 8001268:	41f00000 	.word	0x41f00000

0800126c <__udivmoddi4>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	9e08      	ldr	r6, [sp, #32]
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	4688      	mov	r8, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d14d      	bne.n	8001318 <__udivmoddi4+0xac>
 800127c:	428a      	cmp	r2, r1
 800127e:	4694      	mov	ip, r2
 8001280:	d968      	bls.n	8001354 <__udivmoddi4+0xe8>
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b152      	cbz	r2, 800129e <__udivmoddi4+0x32>
 8001288:	fa01 f302 	lsl.w	r3, r1, r2
 800128c:	f1c2 0120 	rsb	r1, r2, #32
 8001290:	fa20 f101 	lsr.w	r1, r0, r1
 8001294:	fa0c fc02 	lsl.w	ip, ip, r2
 8001298:	ea41 0803 	orr.w	r8, r1, r3
 800129c:	4094      	lsls	r4, r2
 800129e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012a2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012a6:	fa1f fe8c 	uxth.w	lr, ip
 80012aa:	fb01 8817 	mls	r8, r1, r7, r8
 80012ae:	fb07 f00e 	mul.w	r0, r7, lr
 80012b2:	0c23      	lsrs	r3, r4, #16
 80012b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x66>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f107 35ff 	add.w	r5, r7, #4294967295
 80012c4:	f080 811e 	bcs.w	8001504 <__udivmoddi4+0x298>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	f240 811b 	bls.w	8001504 <__udivmoddi4+0x298>
 80012ce:	3f02      	subs	r7, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1b      	subs	r3, r3, r0
 80012d4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012d8:	fb01 3310 	mls	r3, r1, r0, r3
 80012dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d90a      	bls.n	8001300 <__udivmoddi4+0x94>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f2:	f080 8109 	bcs.w	8001508 <__udivmoddi4+0x29c>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	f240 8106 	bls.w	8001508 <__udivmoddi4+0x29c>
 80012fc:	4464      	add	r4, ip
 80012fe:	3802      	subs	r0, #2
 8001300:	2100      	movs	r1, #0
 8001302:	eba4 040e 	sub.w	r4, r4, lr
 8001306:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa8>
 800130c:	2300      	movs	r3, #0
 800130e:	40d4      	lsrs	r4, r2
 8001310:	e9c6 4300 	strd	r4, r3, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	428b      	cmp	r3, r1
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0xc2>
 800131c:	2e00      	cmp	r6, #0
 800131e:	f000 80ee 	beq.w	80014fe <__udivmoddi4+0x292>
 8001322:	2100      	movs	r1, #0
 8001324:	e9c6 0500 	strd	r0, r5, [r6]
 8001328:	4608      	mov	r0, r1
 800132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132e:	fab3 f183 	clz	r1, r3
 8001332:	2900      	cmp	r1, #0
 8001334:	d14a      	bne.n	80013cc <__udivmoddi4+0x160>
 8001336:	42ab      	cmp	r3, r5
 8001338:	d302      	bcc.n	8001340 <__udivmoddi4+0xd4>
 800133a:	4282      	cmp	r2, r0
 800133c:	f200 80fc 	bhi.w	8001538 <__udivmoddi4+0x2cc>
 8001340:	1a84      	subs	r4, r0, r2
 8001342:	eb65 0303 	sbc.w	r3, r5, r3
 8001346:	2001      	movs	r0, #1
 8001348:	4698      	mov	r8, r3
 800134a:	2e00      	cmp	r6, #0
 800134c:	d0e2      	beq.n	8001314 <__udivmoddi4+0xa8>
 800134e:	e9c6 4800 	strd	r4, r8, [r6]
 8001352:	e7df      	b.n	8001314 <__udivmoddi4+0xa8>
 8001354:	b902      	cbnz	r2, 8001358 <__udivmoddi4+0xec>
 8001356:	deff      	udf	#255	; 0xff
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	2a00      	cmp	r2, #0
 800135e:	f040 8091 	bne.w	8001484 <__udivmoddi4+0x218>
 8001362:	eba1 000c 	sub.w	r0, r1, ip
 8001366:	2101      	movs	r1, #1
 8001368:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136c:	fa1f fe8c 	uxth.w	lr, ip
 8001370:	fbb0 f3f7 	udiv	r3, r0, r7
 8001374:	fb07 0013 	mls	r0, r7, r3, r0
 8001378:	0c25      	lsrs	r5, r4, #16
 800137a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800137e:	fb0e f003 	mul.w	r0, lr, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x12c>
 8001386:	eb1c 0505 	adds.w	r5, ip, r5
 800138a:	f103 38ff 	add.w	r8, r3, #4294967295
 800138e:	d202      	bcs.n	8001396 <__udivmoddi4+0x12a>
 8001390:	42a8      	cmp	r0, r5
 8001392:	f200 80ce 	bhi.w	8001532 <__udivmoddi4+0x2c6>
 8001396:	4643      	mov	r3, r8
 8001398:	1a2d      	subs	r5, r5, r0
 800139a:	fbb5 f0f7 	udiv	r0, r5, r7
 800139e:	fb07 5510 	mls	r5, r7, r0, r5
 80013a2:	fb0e fe00 	mul.w	lr, lr, r0
 80013a6:	b2a4      	uxth	r4, r4
 80013a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013ac:	45a6      	cmp	lr, r4
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x156>
 80013b0:	eb1c 0404 	adds.w	r4, ip, r4
 80013b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x154>
 80013ba:	45a6      	cmp	lr, r4
 80013bc:	f200 80b6 	bhi.w	800152c <__udivmoddi4+0x2c0>
 80013c0:	4628      	mov	r0, r5
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ca:	e79e      	b.n	800130a <__udivmoddi4+0x9e>
 80013cc:	f1c1 0720 	rsb	r7, r1, #32
 80013d0:	408b      	lsls	r3, r1
 80013d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013da:	fa25 fa07 	lsr.w	sl, r5, r7
 80013de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013e2:	fbba f8f9 	udiv	r8, sl, r9
 80013e6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ea:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ee:	408d      	lsls	r5, r1
 80013f0:	fa1f fe8c 	uxth.w	lr, ip
 80013f4:	431d      	orrs	r5, r3
 80013f6:	fa00 f301 	lsl.w	r3, r0, r1
 80013fa:	fb08 f00e 	mul.w	r0, r8, lr
 80013fe:	0c2c      	lsrs	r4, r5, #16
 8001400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001404:	42a0      	cmp	r0, r4
 8001406:	fa02 f201 	lsl.w	r2, r2, r1
 800140a:	d90b      	bls.n	8001424 <__udivmoddi4+0x1b8>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f108 3aff 	add.w	sl, r8, #4294967295
 8001414:	f080 8088 	bcs.w	8001528 <__udivmoddi4+0x2bc>
 8001418:	42a0      	cmp	r0, r4
 800141a:	f240 8085 	bls.w	8001528 <__udivmoddi4+0x2bc>
 800141e:	f1a8 0802 	sub.w	r8, r8, #2
 8001422:	4464      	add	r4, ip
 8001424:	1a24      	subs	r4, r4, r0
 8001426:	fbb4 f0f9 	udiv	r0, r4, r9
 800142a:	fb09 4410 	mls	r4, r9, r0, r4
 800142e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001432:	b2ad      	uxth	r5, r5
 8001434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x1e2>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f100 35ff 	add.w	r5, r0, #4294967295
 8001444:	d26c      	bcs.n	8001520 <__udivmoddi4+0x2b4>
 8001446:	45a6      	cmp	lr, r4
 8001448:	d96a      	bls.n	8001520 <__udivmoddi4+0x2b4>
 800144a:	3802      	subs	r0, #2
 800144c:	4464      	add	r4, ip
 800144e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001452:	fba0 9502 	umull	r9, r5, r0, r2
 8001456:	eba4 040e 	sub.w	r4, r4, lr
 800145a:	42ac      	cmp	r4, r5
 800145c:	46c8      	mov	r8, r9
 800145e:	46ae      	mov	lr, r5
 8001460:	d356      	bcc.n	8001510 <__udivmoddi4+0x2a4>
 8001462:	d053      	beq.n	800150c <__udivmoddi4+0x2a0>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d069      	beq.n	800153c <__udivmoddi4+0x2d0>
 8001468:	ebb3 0208 	subs.w	r2, r3, r8
 800146c:	eb64 040e 	sbc.w	r4, r4, lr
 8001470:	fa22 f301 	lsr.w	r3, r2, r1
 8001474:	fa04 f707 	lsl.w	r7, r4, r7
 8001478:	431f      	orrs	r7, r3
 800147a:	40cc      	lsrs	r4, r1
 800147c:	e9c6 7400 	strd	r7, r4, [r6]
 8001480:	2100      	movs	r1, #0
 8001482:	e747      	b.n	8001314 <__udivmoddi4+0xa8>
 8001484:	fa0c fc02 	lsl.w	ip, ip, r2
 8001488:	f1c2 0120 	rsb	r1, r2, #32
 800148c:	fa25 f301 	lsr.w	r3, r5, r1
 8001490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001494:	fa20 f101 	lsr.w	r1, r0, r1
 8001498:	4095      	lsls	r5, r2
 800149a:	430d      	orrs	r5, r1
 800149c:	fbb3 f1f7 	udiv	r1, r3, r7
 80014a0:	fb07 3311 	mls	r3, r7, r1, r3
 80014a4:	fa1f fe8c 	uxth.w	lr, ip
 80014a8:	0c28      	lsrs	r0, r5, #16
 80014aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014ae:	fb01 f30e 	mul.w	r3, r1, lr
 80014b2:	4283      	cmp	r3, r0
 80014b4:	fa04 f402 	lsl.w	r4, r4, r2
 80014b8:	d908      	bls.n	80014cc <__udivmoddi4+0x260>
 80014ba:	eb1c 0000 	adds.w	r0, ip, r0
 80014be:	f101 38ff 	add.w	r8, r1, #4294967295
 80014c2:	d22f      	bcs.n	8001524 <__udivmoddi4+0x2b8>
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d92d      	bls.n	8001524 <__udivmoddi4+0x2b8>
 80014c8:	3902      	subs	r1, #2
 80014ca:	4460      	add	r0, ip
 80014cc:	1ac0      	subs	r0, r0, r3
 80014ce:	fbb0 f3f7 	udiv	r3, r0, r7
 80014d2:	fb07 0013 	mls	r0, r7, r3, r0
 80014d6:	b2ad      	uxth	r5, r5
 80014d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014dc:	fb03 f00e 	mul.w	r0, r3, lr
 80014e0:	42a8      	cmp	r0, r5
 80014e2:	d908      	bls.n	80014f6 <__udivmoddi4+0x28a>
 80014e4:	eb1c 0505 	adds.w	r5, ip, r5
 80014e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80014ec:	d216      	bcs.n	800151c <__udivmoddi4+0x2b0>
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d914      	bls.n	800151c <__udivmoddi4+0x2b0>
 80014f2:	3b02      	subs	r3, #2
 80014f4:	4465      	add	r5, ip
 80014f6:	1a28      	subs	r0, r5, r0
 80014f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014fc:	e738      	b.n	8001370 <__udivmoddi4+0x104>
 80014fe:	4631      	mov	r1, r6
 8001500:	4630      	mov	r0, r6
 8001502:	e707      	b.n	8001314 <__udivmoddi4+0xa8>
 8001504:	462f      	mov	r7, r5
 8001506:	e6e4      	b.n	80012d2 <__udivmoddi4+0x66>
 8001508:	4618      	mov	r0, r3
 800150a:	e6f9      	b.n	8001300 <__udivmoddi4+0x94>
 800150c:	454b      	cmp	r3, r9
 800150e:	d2a9      	bcs.n	8001464 <__udivmoddi4+0x1f8>
 8001510:	ebb9 0802 	subs.w	r8, r9, r2
 8001514:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001518:	3801      	subs	r0, #1
 800151a:	e7a3      	b.n	8001464 <__udivmoddi4+0x1f8>
 800151c:	4643      	mov	r3, r8
 800151e:	e7ea      	b.n	80014f6 <__udivmoddi4+0x28a>
 8001520:	4628      	mov	r0, r5
 8001522:	e794      	b.n	800144e <__udivmoddi4+0x1e2>
 8001524:	4641      	mov	r1, r8
 8001526:	e7d1      	b.n	80014cc <__udivmoddi4+0x260>
 8001528:	46d0      	mov	r8, sl
 800152a:	e77b      	b.n	8001424 <__udivmoddi4+0x1b8>
 800152c:	4464      	add	r4, ip
 800152e:	3802      	subs	r0, #2
 8001530:	e747      	b.n	80013c2 <__udivmoddi4+0x156>
 8001532:	3b02      	subs	r3, #2
 8001534:	4465      	add	r5, ip
 8001536:	e72f      	b.n	8001398 <__udivmoddi4+0x12c>
 8001538:	4608      	mov	r0, r1
 800153a:	e706      	b.n	800134a <__udivmoddi4+0xde>
 800153c:	4631      	mov	r1, r6
 800153e:	e6e9      	b.n	8001314 <__udivmoddi4+0xa8>

08001540 <__aeabi_idiv0>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001544:	2300      	movs	r3, #0
{
 8001546:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001548:	4c40      	ldr	r4, [pc, #256]	; (800164c <MX_ADC_Init+0x108>)
{
 800154a:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001550:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001554:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001558:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800155c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001564:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800156e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_ADC_Init+0x10c>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001572:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001574:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800157c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800157e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001582:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001584:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001586:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001588:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800158c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800158e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001592:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001594:	f006 fd3c 	bl	8008010 <HAL_ADC_Init>
 8001598:	b108      	cbz	r0, 800159e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <MX_ADC_Init+0x58>
  AnalogWDGConfig.HighThreshold = 4095;
 800159e:	f640 73ff 	movw	r3, #4095	; 0xfff
 80015a2:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015a4:	2302      	movs	r3, #2
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <MX_ADC_Init+0x110>)
  AnalogWDGConfig.LowThreshold = 0;
 80015a8:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015aa:	a904      	add	r1, sp, #16
 80015ac:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80015b2:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015b6:	f007 f831 	bl	800861c <HAL_ADC_AnalogWDGConfig>
 80015ba:	b108      	cbz	r0, 80015c0 <MX_ADC_Init+0x7c>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <MX_ADC_Init+0x7a>
  sConfig.Channel = ADC_CHANNEL_0;
 80015c0:	2200      	movs	r2, #0
 80015c2:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c4:	4669      	mov	r1, sp
 80015c6:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80015cc:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ce:	f006 ff59 	bl	8008484 <HAL_ADC_ConfigChannel>
 80015d2:	b108      	cbz	r0, 80015d8 <MX_ADC_Init+0x94>
 80015d4:	b672      	cpsid	i
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_1;
 80015d8:	2201      	movs	r2, #1
 80015da:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015dc:	4669      	mov	r1, sp
 80015de:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80015e0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e4:	f006 ff4e 	bl	8008484 <HAL_ADC_ConfigChannel>
 80015e8:	b108      	cbz	r0, 80015ee <MX_ADC_Init+0xaa>
 80015ea:	b672      	cpsid	i
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_2;
 80015ee:	2202      	movs	r2, #2
 80015f0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f2:	4669      	mov	r1, sp
 80015f4:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015fa:	f006 ff43 	bl	8008484 <HAL_ADC_ConfigChannel>
 80015fe:	b108      	cbz	r0, 8001604 <MX_ADC_Init+0xc0>
 8001600:	b672      	cpsid	i
  while (1)
 8001602:	e7fe      	b.n	8001602 <MX_ADC_Init+0xbe>
  sConfig.Channel = ADC_CHANNEL_3;
 8001604:	2203      	movs	r2, #3
 8001606:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001608:	4669      	mov	r1, sp
 800160a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 800160c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001610:	f006 ff38 	bl	8008484 <HAL_ADC_ConfigChannel>
 8001614:	b108      	cbz	r0, 800161a <MX_ADC_Init+0xd6>
 8001616:	b672      	cpsid	i
  while (1)
 8001618:	e7fe      	b.n	8001618 <MX_ADC_Init+0xd4>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800161a:	2211      	movs	r2, #17
 800161c:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161e:	4669      	mov	r1, sp
 8001620:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001622:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001626:	f006 ff2d 	bl	8008484 <HAL_ADC_ConfigChannel>
 800162a:	b108      	cbz	r0, 8001630 <MX_ADC_Init+0xec>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <MX_ADC_Init+0xea>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001630:	2210      	movs	r2, #16
 8001632:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001634:	4669      	mov	r1, sp
 8001636:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001638:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800163c:	f006 ff22 	bl	8008484 <HAL_ADC_ConfigChannel>
 8001640:	b108      	cbz	r0, 8001646 <MX_ADC_Init+0x102>
 8001642:	b672      	cpsid	i
  while (1)
 8001644:	e7fe      	b.n	8001644 <MX_ADC_Init+0x100>
}
 8001646:	b00a      	add	sp, #40	; 0x28
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	20000404 	.word	0x20000404
 8001650:	40012400 	.word	0x40012400
 8001654:	00800200 	.word	0x00800200

08001658 <update_keypad.part.0>:
	else if(num == '.'){
 8001658:	282e      	cmp	r0, #46	; 0x2e
void update_keypad(char num){
 800165a:	b410      	push	{r4}
	else if(num == '.'){
 800165c:	d00f      	beq.n	800167e <update_keypad.part.0+0x26>
	else if(num >= '0' && num <= '9'){
 800165e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8001662:	2b09      	cmp	r3, #9
 8001664:	d809      	bhi.n	800167a <update_keypad.part.0+0x22>
		if(kpenum == V1 || kpenum == V2){
 8001666:	4b69      	ldr	r3, [pc, #420]	; (800180c <update_keypad.part.0+0x1b4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 800166e:	2901      	cmp	r1, #1
 8001670:	d03d      	beq.n	80016ee <update_keypad.part.0+0x96>
		else if(kpenum == A1 || kpenum == A2){
 8001672:	2b02      	cmp	r3, #2
 8001674:	d017      	beq.n	80016a6 <update_keypad.part.0+0x4e>
 8001676:	2b04      	cmp	r3, #4
 8001678:	d015      	beq.n	80016a6 <update_keypad.part.0+0x4e>
}
 800167a:	bc10      	pop	{r4}
 800167c:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800167e:	4a64      	ldr	r2, [pc, #400]	; (8001810 <update_keypad.part.0+0x1b8>)
 8001680:	f992 3000 	ldrsb.w	r3, [r2]
 8001684:	2b01      	cmp	r3, #1
 8001686:	ddf8      	ble.n	800167a <update_keypad.part.0+0x22>
 8001688:	4962      	ldr	r1, [pc, #392]	; (8001814 <update_keypad.part.0+0x1bc>)
 800168a:	780c      	ldrb	r4, [r1, #0]
 800168c:	2c00      	cmp	r4, #0
 800168e:	d1f4      	bne.n	800167a <update_keypad.part.0+0x22>
			keypaditerator--;
 8001690:	3b01      	subs	r3, #1
 8001692:	7013      	strb	r3, [r2, #0]
			keypaddecimal = 1;
 8001694:	2301      	movs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8001696:	4c60      	ldr	r4, [pc, #384]	; (8001818 <update_keypad.part.0+0x1c0>)
			keypaddecimal = 1;
 8001698:	700b      	strb	r3, [r1, #0]
				keypadarr[i-1] = keypadarr[i];
 800169a:	f8d4 2001 	ldr.w	r2, [r4, #1]
			keypadarr[keypadlength-1] = num;
 800169e:	7120      	strb	r0, [r4, #4]
				keypadarr[i-1] = keypadarr[i];
 80016a0:	6022      	str	r2, [r4, #0]
}
 80016a2:	bc10      	pop	{r4}
 80016a4:	4770      	bx	lr
			if(keypaditerator > 3){
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016a8:	f992 3000 	ldrsb.w	r3, [r2]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	dc15      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016b0:	d068      	beq.n	8001784 <update_keypad.part.0+0x12c>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d076      	beq.n	80017a4 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d07f      	beq.n	80017ba <update_keypad.part.0+0x162>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1dd      	bne.n	800167a <update_keypad.part.0+0x22>
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <update_keypad.part.0+0x1c0>)
 80016c0:	7899      	ldrb	r1, [r3, #2]
 80016c2:	292e      	cmp	r1, #46	; 0x2e
 80016c4:	d1d9      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016c6:	785c      	ldrb	r4, [r3, #1]
 80016c8:	7059      	strb	r1, [r3, #1]
 80016ca:	78d9      	ldrb	r1, [r3, #3]
 80016cc:	701c      	strb	r4, [r3, #0]
 80016ce:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80016d0:	21ff      	movs	r1, #255	; 0xff
					keypadarr[i-1] = keypadarr[i];
 80016d2:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 80016d4:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 80016d6:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 80016d8:	70dc      	strb	r4, [r3, #3]
}
 80016da:	e7ce      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016dc:	494e      	ldr	r1, [pc, #312]	; (8001818 <update_keypad.part.0+0x1c0>)
				keypaditerator--;
 80016de:	3b01      	subs	r3, #1
					keypadarr[i-1] = keypadarr[i];
 80016e0:	f8d1 4001 	ldr.w	r4, [r1, #1]
				keypaditerator--;
 80016e4:	7013      	strb	r3, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80016e6:	600c      	str	r4, [r1, #0]
				keypadarr[keypadlength-1] = num;
 80016e8:	7108      	strb	r0, [r1, #4]
}
 80016ea:	bc10      	pop	{r4}
 80016ec:	4770      	bx	lr
			if(keypaditerator > 2){
 80016ee:	4a48      	ldr	r2, [pc, #288]	; (8001810 <update_keypad.part.0+0x1b8>)
 80016f0:	f992 3000 	ldrsb.w	r3, [r2]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	dcf1      	bgt.n	80016dc <update_keypad.part.0+0x84>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016f8:	d023      	beq.n	8001742 <update_keypad.part.0+0xea>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d010      	beq.n	8001720 <update_keypad.part.0+0xc8>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1bb      	bne.n	800167a <update_keypad.part.0+0x22>
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001704:	78d9      	ldrb	r1, [r3, #3]
 8001706:	292e      	cmp	r1, #46	; 0x2e
 8001708:	d1b7      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800170a:	785c      	ldrb	r4, [r3, #1]
 800170c:	701c      	strb	r4, [r3, #0]
 800170e:	789c      	ldrb	r4, [r3, #2]
 8001710:	7099      	strb	r1, [r3, #2]
 8001712:	7919      	ldrb	r1, [r3, #4]
 8001714:	705c      	strb	r4, [r3, #1]
 8001716:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 8001718:	21ff      	movs	r1, #255	; 0xff
				keypadarr[keypadlength-1] = num;
 800171a:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 800171c:	7011      	strb	r1, [r2, #0]
 800171e:	e7ac      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001722:	78d9      	ldrb	r1, [r3, #3]
 8001724:	292e      	cmp	r1, #46	; 0x2e
 8001726:	d05a      	beq.n	80017de <update_keypad.part.0+0x186>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001728:	791c      	ldrb	r4, [r3, #4]
 800172a:	2c2e      	cmp	r4, #46	; 0x2e
 800172c:	d1a5      	bne.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800172e:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001730:	2400      	movs	r4, #0
				keypadarr[keypadlength-1] = num;
 8001732:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001734:	7858      	ldrb	r0, [r3, #1]
				keypaditerator--;
 8001736:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001738:	7018      	strb	r0, [r3, #0]
 800173a:	7898      	ldrb	r0, [r3, #2]
 800173c:	7099      	strb	r1, [r3, #2]
 800173e:	7058      	strb	r0, [r3, #1]
				keypaditerator--;
 8001740:	e79b      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001744:	78dc      	ldrb	r4, [r3, #3]
 8001746:	2c2e      	cmp	r4, #46	; 0x2e
 8001748:	d00e      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 800174a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800174e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 8001752:	d192      	bne.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001754:	7011      	strb	r1, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001756:	7859      	ldrb	r1, [r3, #1]
 8001758:	789a      	ldrb	r2, [r3, #2]
 800175a:	f883 c003 	strb.w	ip, [r3, #3]
				keypadarr[keypadlength-1] = num;
 800175e:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001760:	7019      	strb	r1, [r3, #0]
 8001762:	705a      	strb	r2, [r3, #1]
 8001764:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 8001766:	e788      	b.n	800167a <update_keypad.part.0+0x22>
				keypaditerator--;
 8001768:	2401      	movs	r4, #1
					keypadarr[i-1] = keypadarr[i];
 800176a:	212e      	movs	r1, #46	; 0x2e
 800176c:	f893 c001 	ldrb.w	ip, [r3, #1]
				keypaditerator--;
 8001770:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001772:	789c      	ldrb	r4, [r3, #2]
 8001774:	791a      	ldrb	r2, [r3, #4]
 8001776:	f883 c000 	strb.w	ip, [r3]
 800177a:	705c      	strb	r4, [r3, #1]
 800177c:	7099      	strb	r1, [r3, #2]
 800177e:	70da      	strb	r2, [r3, #3]
				keypadarr[keypadlength-1] = num;
 8001780:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001782:	e77a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <update_keypad.part.0+0x1c0>)
 8001786:	7919      	ldrb	r1, [r3, #4]
 8001788:	292e      	cmp	r1, #46	; 0x2e
 800178a:	f47f af76 	bne.w	800167a <update_keypad.part.0+0x22>
				keypadarr[keypadlength-1] = num;
 800178e:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001790:	2002      	movs	r0, #2
					keypadarr[i-1] = keypadarr[i];
 8001792:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 8001794:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001796:	701c      	strb	r4, [r3, #0]
 8001798:	789c      	ldrb	r4, [r3, #2]
 800179a:	705c      	strb	r4, [r3, #1]
 800179c:	78dc      	ldrb	r4, [r3, #3]
 800179e:	70d9      	strb	r1, [r3, #3]
 80017a0:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 80017a2:	e76a      	b.n	800167a <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017a6:	78d9      	ldrb	r1, [r3, #3]
 80017a8:	292e      	cmp	r1, #46	; 0x2e
 80017aa:	d0dd      	beq.n	8001768 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80017ac:	791c      	ldrb	r4, [r3, #4]
 80017ae:	2c2e      	cmp	r4, #46	; 0x2e
 80017b0:	f47f af63 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017b4:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 80017b6:	2401      	movs	r4, #1
 80017b8:	e7bb      	b.n	8001732 <update_keypad.part.0+0xda>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <update_keypad.part.0+0x1c0>)
 80017bc:	7899      	ldrb	r1, [r3, #2]
 80017be:	292e      	cmp	r1, #46	; 0x2e
 80017c0:	d018      	beq.n	80017f4 <update_keypad.part.0+0x19c>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80017c2:	78dc      	ldrb	r4, [r3, #3]
 80017c4:	2c2e      	cmp	r4, #46	; 0x2e
 80017c6:	f47f af58 	bne.w	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017ca:	709c      	strb	r4, [r3, #2]
 80017cc:	791c      	ldrb	r4, [r3, #4]
				keypadarr[keypadlength-1] = num;
 80017ce:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017d0:	2000      	movs	r0, #0
					keypadarr[i-1] = keypadarr[i];
 80017d2:	70dc      	strb	r4, [r3, #3]
 80017d4:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 80017d6:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80017d8:	7059      	strb	r1, [r3, #1]
 80017da:	701c      	strb	r4, [r3, #0]
				keypaditerator--;
 80017dc:	e74d      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017de:	785c      	ldrb	r4, [r3, #1]
 80017e0:	701c      	strb	r4, [r3, #0]
 80017e2:	789c      	ldrb	r4, [r3, #2]
 80017e4:	7099      	strb	r1, [r3, #2]
 80017e6:	7919      	ldrb	r1, [r3, #4]
 80017e8:	705c      	strb	r4, [r3, #1]
 80017ea:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 80017ec:	2100      	movs	r1, #0
				keypadarr[keypadlength-1] = num;
 80017ee:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017f0:	7011      	strb	r1, [r2, #0]
 80017f2:	e742      	b.n	800167a <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017f4:	785c      	ldrb	r4, [r3, #1]
 80017f6:	7059      	strb	r1, [r3, #1]
 80017f8:	78d9      	ldrb	r1, [r3, #3]
 80017fa:	701c      	strb	r4, [r3, #0]
 80017fc:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80017fe:	2100      	movs	r1, #0
					keypadarr[i-1] = keypadarr[i];
 8001800:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 8001802:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 8001804:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001806:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001808:	e737      	b.n	800167a <update_keypad.part.0+0x22>
 800180a:	bf00      	nop
 800180c:	20000759 	.word	0x20000759
 8001810:	20000011 	.word	0x20000011
 8001814:	20000758 	.word	0x20000758
 8001818:	2000000c 	.word	0x2000000c

0800181c <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <update_keypad.constprop.0+0x40>)
 800181e:	f992 3000 	ldrsb.w	r3, [r2]
 8001822:	2b03      	cmp	r3, #3
 8001824:	dc13      	bgt.n	800184e <update_keypad.constprop.0+0x32>
			if(keypadarr[4] == '.'){
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <update_keypad.constprop.0+0x44>)
 8001828:	7908      	ldrb	r0, [r1, #4]
 800182a:	282e      	cmp	r0, #46	; 0x2e
 800182c:	d010      	beq.n	8001850 <update_keypad.constprop.0+0x34>
			keypadarr[0] = num;
 800182e:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8001830:	f891 c003 	ldrb.w	ip, [r1, #3]
			keypaditerator++;
 8001834:	3301      	adds	r3, #1
 8001836:	7013      	strb	r3, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8001838:	f881 c004 	strb.w	ip, [r1, #4]
 800183c:	784a      	ldrb	r2, [r1, #1]
 800183e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8001842:	780b      	ldrb	r3, [r1, #0]
 8001844:	f881 c003 	strb.w	ip, [r1, #3]
 8001848:	708a      	strb	r2, [r1, #2]
 800184a:	704b      	strb	r3, [r1, #1]
			keypadarr[0] = num;
 800184c:	7008      	strb	r0, [r1, #0]
}
 800184e:	4770      	bx	lr
				keypaddecimal = 0;
 8001850:	f04f 0c00 	mov.w	ip, #0
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <update_keypad.constprop.0+0x48>)
 8001856:	f880 c000 	strb.w	ip, [r0]
 800185a:	e7e8      	b.n	800182e <update_keypad.constprop.0+0x12>
 800185c:	20000011 	.word	0x20000011
 8001860:	2000000c 	.word	0x2000000c
 8001864:	20000758 	.word	0x20000758

08001868 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001868:	2300      	movs	r3, #0
{
 800186a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001872:	2403      	movs	r4, #3
 8001874:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001876:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001880:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001884:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001888:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800188e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001892:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001896:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800189a:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189e:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a2:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a6:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018ba:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f008 fd9a 	bl	800a3fc <HAL_RCC_OscConfig>
 80018c8:	b108      	cbz	r0, 80018ce <SystemClock_Config+0x66>
 80018ca:	b672      	cpsid	i
  while (1)
 80018cc:	e7fe      	b.n	80018cc <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ce:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	240f      	movs	r4, #15
 80018d2:	2503      	movs	r5, #3
 80018d4:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d8:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018da:	4631      	mov	r1, r6
 80018dc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	e9cd 4500 	strd	r4, r5, [sp]
 80018e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e6:	f008 ffe9 	bl	800a8bc <HAL_RCC_ClockConfig>
 80018ea:	b108      	cbz	r0, 80018f0 <SystemClock_Config+0x88>
 80018ec:	b672      	cpsid	i
  while (1)
 80018ee:	e7fe      	b.n	80018ee <SystemClock_Config+0x86>
}
 80018f0:	b014      	add	sp, #80	; 0x50
 80018f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000

080018fc <EXTI1_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80018fc:	2207      	movs	r2, #7
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <EXTI1_IRQHandler+0x68>)
{
 8001900:	b530      	push	{r4, r5, lr}
	int8_t tempiter = headiter;
 8001902:	4d19      	ldr	r5, [pc, #100]	; (8001968 <EXTI1_IRQHandler+0x6c>)
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001904:	615a      	str	r2, [r3, #20]
	int8_t tempiter = headiter;
 8001906:	f995 c000 	ldrsb.w	ip, [r5]
	if(tempiter != tailiter){
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <EXTI1_IRQHandler+0x70>)
	tempiter++;
 800190c:	f10c 0e01 	add.w	lr, ip, #1
 8001910:	fa4f fe8e 	sxtb.w	lr, lr
	if(tempiter >= CIRCSIZE){
 8001914:	4596      	cmp	lr, r2
	if(tempiter != tailiter){
 8001916:	f993 3000 	ldrsb.w	r3, [r3]
	if(tempiter >= CIRCSIZE){
 800191a:	dc06      	bgt.n	800192a <EXTI1_IRQHandler+0x2e>
	if(tempiter != tailiter){
 800191c:	4573      	cmp	r3, lr
 800191e:	d01a      	beq.n	8001956 <EXTI1_IRQHandler+0x5a>
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001922:	4c14      	ldr	r4, [pc, #80]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001924:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001928:	e006      	b.n	8001938 <EXTI1_IRQHandler+0x3c>
	if(tempiter != tailiter){
 800192a:	b1a3      	cbz	r3, 8001956 <EXTI1_IRQHandler+0x5a>
			headiter = 0;
 800192c:	f04f 0e00 	mov.w	lr, #0
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <EXTI1_IRQHandler+0x74>)
 8001932:	4c10      	ldr	r4, [pc, #64]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001934:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800194a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		headiter++;
 8001952:	f885 e000 	strb.w	lr, [r5]
	memset (usbbuffer, '\0', 64); // clear the buffer
 8001956:	2240      	movs	r2, #64	; 0x40
}
 8001958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memset (usbbuffer, '\0', 64); // clear the buffer
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <EXTI1_IRQHandler+0x78>)
 8001960:	f00b bd0e 	b.w	800d380 <memset>
 8001964:	40010400 	.word	0x40010400
 8001968:	20000008 	.word	0x20000008
 800196c:	200009b4 	.word	0x200009b4
 8001970:	20000764 	.word	0x20000764
 8001974:	20000a38 	.word	0x20000a38

08001978 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001978:	b538      	push	{r3, r4, r5, lr}
	if(val == 0.0){
 800197a:	2100      	movs	r1, #0
void update_ADC_watchdog(float val){
 800197c:	4604      	mov	r4, r0
	if(val == 0.0){
 800197e:	f7ff fbad 	bl	80010dc <__aeabi_fcmpeq>
 8001982:	bb28      	cbnz	r0, 80019d0 <update_ADC_watchdog+0x58>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001984:	4620      	mov	r0, r4
 8001986:	491c      	ldr	r1, [pc, #112]	; (80019f8 <update_ADC_watchdog+0x80>)
 8001988:	f7ff fa14 	bl	8000db4 <__aeabi_fmul>
 800198c:	491b      	ldr	r1, [pc, #108]	; (80019fc <update_ADC_watchdog+0x84>)
 800198e:	f7ff fa11 	bl	8000db4 <__aeabi_fmul>
 8001992:	491b      	ldr	r1, [pc, #108]	; (8001a00 <update_ADC_watchdog+0x88>)
 8001994:	f7ff fa0e 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <update_ADC_watchdog+0x8c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800199a:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800199c:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800199e:	8818      	ldrh	r0, [r3, #0]
 80019a0:	f7ff f9b0 	bl	8000d04 <__aeabi_ui2f>
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <update_ADC_watchdog+0x90>)
 80019a6:	4605      	mov	r5, r0
 80019a8:	8918      	ldrh	r0, [r3, #8]
 80019aa:	f7ff f9ab 	bl	8000d04 <__aeabi_ui2f>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fab3 	bl	8000f1c <__aeabi_fdiv>
 80019b6:	4915      	ldr	r1, [pc, #84]	; (8001a0c <update_ADC_watchdog+0x94>)
 80019b8:	f7ff f9fc 	bl	8000db4 <__aeabi_fmul>
 80019bc:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019be:	4620      	mov	r0, r4
 80019c0:	f7ff faac 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <update_ADC_watchdog+0x88>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019c6:	4605      	mov	r5, r0
	else if(amp >= 4095.0){
 80019c8:	f7ff fba6 	bl	8001118 <__aeabi_fcmpge>
 80019cc:	4604      	mov	r4, r0
 80019ce:	b120      	cbz	r0, 80019da <update_ADC_watchdog+0x62>
		ADC1->HTR = 4095;
 80019d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bd38      	pop	{r3, r4, r5, pc}
	else if(amp < 0.0){
 80019da:	4628      	mov	r0, r5
 80019dc:	2100      	movs	r1, #0
 80019de:	f7ff fb87 	bl	80010f0 <__aeabi_fcmplt>
 80019e2:	b928      	cbnz	r0, 80019f0 <update_ADC_watchdog+0x78>
		ADC1->HTR = amp;
 80019e4:	4628      	mov	r0, r5
 80019e6:	f7ff fbd1 	bl	800118c <__aeabi_f2uiz>
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019ec:	6298      	str	r0, [r3, #40]	; 0x28
}
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
		ADC1->HTR = 0;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <update_ADC_watchdog+0x98>)
 80019f2:	629c      	str	r4, [r3, #40]	; 0x28
}
 80019f4:	bd38      	pop	{r3, r4, r5, pc}
 80019f6:	bf00      	nop
 80019f8:	3e19999a 	.word	0x3e19999a
 80019fc:	41a00000 	.word	0x41a00000
 8001a00:	457ff000 	.word	0x457ff000
 8001a04:	2000001c 	.word	0x2000001c
 8001a08:	200003dc 	.word	0x200003dc
 8001a0c:	40400000 	.word	0x40400000
 8001a10:	40012400 	.word	0x40012400

08001a14 <lcd_createChar>:
{
 8001a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a18:	2564      	movs	r5, #100	; 0x64
 8001a1a:	482d      	ldr	r0, [pc, #180]	; (8001ad0 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a1c:	492d      	ldr	r1, [pc, #180]	; (8001ad4 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a1e:	4607      	mov	r7, r0
{
 8001a20:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a22:	2304      	movs	r3, #4
 8001a24:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a26:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a28:	9500      	str	r5, [sp, #0]
 8001a2a:	214e      	movs	r1, #78	; 0x4e
 8001a2c:	f007 fbf2 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f006 fadb 	bl	8007fec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a38:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a3a:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	2304      	movs	r3, #4
 8001a40:	4c26      	ldr	r4, [pc, #152]	; (8001adc <lcd_createChar+0xc8>)
 8001a42:	9500      	str	r5, [sp, #0]
 8001a44:	aa03      	add	r2, sp, #12
 8001a46:	f007 fbe5 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001a50:	f006 facc 	bl	8007fec <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a54:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001a56:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a5a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001a5c:	fa02 f103 	lsl.w	r1, r2, r3
 8001a60:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001a62:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a66:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a6a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a6e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a72:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a76:	aa03      	add	r2, sp, #12
 8001a78:	214e      	movs	r1, #78	; 0x4e
 8001a7a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a7c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a80:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a84:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a88:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	f007 fbc2 	bl	8009214 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f006 faab 	bl	8007fec <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 8001a96:	42a6      	cmp	r6, r4
 8001a98:	d1dc      	bne.n	8001a54 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a9a:	490f      	ldr	r1, [pc, #60]	; (8001ad8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a9c:	aa03      	add	r2, sp, #12
 8001a9e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001aa0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa2:	9500      	str	r5, [sp, #0]
 8001aa4:	214e      	movs	r1, #78	; 0x4e
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <lcd_createChar+0xbc>)
 8001aa8:	f007 fbb4 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f006 fa9d 	bl	8007fec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab2:	480b      	ldr	r0, [pc, #44]	; (8001ae0 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ab6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab8:	214e      	movs	r1, #78	; 0x4e
 8001aba:	aa03      	add	r2, sp, #12
 8001abc:	9500      	str	r5, [sp, #0]
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <lcd_createChar+0xbc>)
 8001ac0:	f007 fba8 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
}
 8001ac6:	b005      	add	sp, #20
 8001ac8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8001acc:	f006 ba8e 	b.w	8007fec <HAL_Delay>
 8001ad0:	20000540 	.word	0x20000540
 8001ad4:	080c484c 	.word	0x080c484c
 8001ad8:	080c080c 	.word	0x080c080c
 8001adc:	080119db 	.word	0x080119db
 8001ae0:	282c080c 	.word	0x282c080c

08001ae4 <lcd_init>:
{
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
{
 8001ae8:	b085      	sub	sp, #20
	HAL_Delay(100);
 8001aea:	f006 fa7f 	bl	8007fec <HAL_Delay>
 8001aee:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001af2:	4f2e      	ldr	r7, [pc, #184]	; (8001bac <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af4:	4e2e      	ldr	r6, [pc, #184]	; (8001bb0 <lcd_init+0xcc>)
 8001af6:	2304      	movs	r3, #4
 8001af8:	214e      	movs	r1, #78	; 0x4e
 8001afa:	aa03      	add	r2, sp, #12
 8001afc:	4630      	mov	r0, r6
 8001afe:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b00:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b02:	f007 fb87 	bl	8009214 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 8001b06:	202d      	movs	r0, #45	; 0x2d
 8001b08:	f006 fa70 	bl	8007fec <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001b12:	d1f0      	bne.n	8001af6 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001b14:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b18:	2304      	movs	r3, #4
 8001b1a:	aa03      	add	r2, sp, #12
 8001b1c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b20:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <lcd_init+0xcc>)
 8001b22:	214e      	movs	r1, #78	; 0x4e
 8001b24:	f007 fb76 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f006 fa5f 	bl	8007fec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b30:	2304      	movs	r3, #4
 8001b32:	214e      	movs	r1, #78	; 0x4e
 8001b34:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b36:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b38:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <lcd_init+0xcc>)
 8001b3a:	aa03      	add	r2, sp, #12
 8001b3c:	f007 fb6a 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f006 fa53 	bl	8007fec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b46:	4a1d      	ldr	r2, [pc, #116]	; (8001bbc <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b48:	2304      	movs	r3, #4
 8001b4a:	214e      	movs	r1, #78	; 0x4e
 8001b4c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b4e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b50:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <lcd_init+0xcc>)
 8001b52:	aa03      	add	r2, sp, #12
 8001b54:	f007 fb5e 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f006 fa47 	bl	8007fec <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b60:	2304      	movs	r3, #4
 8001b62:	214e      	movs	r1, #78	; 0x4e
 8001b64:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b66:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <lcd_init+0xcc>)
 8001b6a:	aa03      	add	r2, sp, #12
 8001b6c:	f007 fb52 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f006 fa3b 	bl	8007fec <HAL_Delay>
	lcd_createChar();
 8001b76:	f7ff ff4d 	bl	8001a14 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b7c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b7e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b80:	2304      	movs	r3, #4
 8001b82:	214e      	movs	r1, #78	; 0x4e
 8001b84:	480a      	ldr	r0, [pc, #40]	; (8001bb0 <lcd_init+0xcc>)
 8001b86:	aa03      	add	r2, sp, #12
 8001b88:	f007 fb44 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b8e:	4e0e      	ldr	r6, [pc, #56]	; (8001bc8 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b90:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <lcd_init+0xcc>)
 8001b92:	2304      	movs	r3, #4
 8001b94:	214e      	movs	r1, #78	; 0x4e
 8001b96:	4628      	mov	r0, r5
 8001b98:	aa03      	add	r2, sp, #12
 8001b9a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b9c:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b9e:	f007 fb39 	bl	8009214 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 8001ba2:	3c01      	subs	r4, #1
 8001ba4:	d1f5      	bne.n	8001b92 <lcd_init+0xae>
}
 8001ba6:	b005      	add	sp, #20
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	383c080c 	.word	0x383c080c
 8001bb0:	20000540 	.word	0x20000540
 8001bb4:	282c080c 	.word	0x282c080c
 8001bb8:	888c282c 	.word	0x888c282c
 8001bbc:	c8cc080c 	.word	0xc8cc080c
 8001bc0:	080c888c 	.word	0x080c888c
 8001bc4:	080c080c 	.word	0x080c080c
 8001bc8:	090d292d 	.word	0x090d292d

08001bcc <ourInit>:
void ourInit(void){
 8001bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd0:	2201      	movs	r2, #1
void ourInit(void){
 8001bd2:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	486d      	ldr	r0, [pc, #436]	; (8001d8c <ourInit+0x1c0>)
 8001bd8:	f007 fa3a 	bl	8009050 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001bdc:	486c      	ldr	r0, [pc, #432]	; (8001d90 <ourInit+0x1c4>)
 8001bde:	f006 fae7 	bl	80081b0 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001be2:	486c      	ldr	r0, [pc, #432]	; (8001d94 <ourInit+0x1c8>)
 8001be4:	f006 ff36 	bl	8008a54 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bea:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <ourInit+0x1cc>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bec:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bee:	69d9      	ldr	r1, [r3, #28]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001bf0:	2564      	movs	r5, #100	; 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001bf6:	61d9      	str	r1, [r3, #28]
 8001bf8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bfa:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c00:	9307      	str	r3, [sp, #28]
 8001c02:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c04:	f006 fdf0 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c08:	200b      	movs	r0, #11
 8001c0a:	f006 fe2b 	bl	8008864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	200e      	movs	r0, #14
 8001c12:	4611      	mov	r1, r2
 8001c14:	f006 fde8 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c18:	200e      	movs	r0, #14
 8001c1a:	f006 fe23 	bl	8008864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	200f      	movs	r0, #15
 8001c22:	4611      	mov	r1, r2
 8001c24:	f006 fde0 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f006 fe1b 	bl	8008864 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001c2e:	f7ff fc89 	bl	8001544 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001c32:	2206      	movs	r2, #6
 8001c34:	4959      	ldr	r1, [pc, #356]	; (8001d9c <ourInit+0x1d0>)
 8001c36:	4856      	ldr	r0, [pc, #344]	; (8001d90 <ourInit+0x1c4>)
 8001c38:	f006 fd64 	bl	8008704 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4858      	ldr	r0, [pc, #352]	; (8001da0 <ourInit+0x1d4>)
 8001c40:	f006 fe60 	bl	8008904 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c44:	2110      	movs	r1, #16
 8001c46:	4856      	ldr	r0, [pc, #344]	; (8001da0 <ourInit+0x1d4>)
 8001c48:	f006 fe5c 	bl	8008904 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4854      	ldr	r0, [pc, #336]	; (8001da0 <ourInit+0x1d4>)
 8001c50:	461a      	mov	r2, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	f006 fe86 	bl	8008964 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 375);
 8001c58:	f240 1377 	movw	r3, #375	; 0x177
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2110      	movs	r1, #16
 8001c60:	484f      	ldr	r0, [pc, #316]	; (8001da0 <ourInit+0x1d4>)
 8001c62:	f006 fe7f 	bl	8008964 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <ourInit+0x1d8>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c6a:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001c6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c70:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c72:	484d      	ldr	r0, [pc, #308]	; (8001da8 <ourInit+0x1dc>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c74:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c76:	f007 f803 	bl	8008c80 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2007      	movs	r0, #7
 8001c7e:	4611      	mov	r1, r2
 8001c80:	f006 fdb2 	bl	80087e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c84:	2007      	movs	r0, #7
 8001c86:	f006 fded 	bl	8008864 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c90:	4846      	ldr	r0, [pc, #280]	; (8001dac <ourInit+0x1e0>)
 8001c92:	f007 f9dd 	bl	8009050 <HAL_GPIO_WritePin>
	memset (usbbuffer, '\0', 64);  // clear the buffer
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4845      	ldr	r0, [pc, #276]	; (8001db0 <ourInit+0x1e4>)
 8001c9c:	f00b fb70 	bl	800d380 <memset>
	memset (MSG, '\0', 64);  // clear the buffer
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4843      	ldr	r0, [pc, #268]	; (8001db4 <ourInit+0x1e8>)
 8001ca6:	f00b fb6b 	bl	800d380 <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	2100      	movs	r1, #0
 8001cae:	4842      	ldr	r0, [pc, #264]	; (8001db8 <ourInit+0x1ec>)
 8001cb0:	f00b fb66 	bl	800d380 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4840      	ldr	r0, [pc, #256]	; (8001dbc <ourInit+0x1f0>)
 8001cba:	f00b fb61 	bl	800d380 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	483f      	ldr	r0, [pc, #252]	; (8001dc0 <ourInit+0x1f4>)
 8001cc4:	f00b fb5c 	bl	800d380 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	493d      	ldr	r1, [pc, #244]	; (8001dc0 <ourInit+0x1f4>)
 8001ccc:	483d      	ldr	r0, [pc, #244]	; (8001dc4 <ourInit+0x1f8>)
 8001cce:	f009 f9f7 	bl	800b0c0 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <ourInit+0x1fc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cd4:	4e3d      	ldr	r6, [pc, #244]	; (8001dcc <ourInit+0x200>)
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cd6:	681f      	ldr	r7, [r3, #0]
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <ourInit+0x204>)
 8001cda:	4c3e      	ldr	r4, [pc, #248]	; (8001dd4 <ourInit+0x208>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <ourInit+0x20c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	9304      	str	r3, [sp, #16]
 8001ce6:	f7fe fbb7 	bl	8000458 <__aeabi_f2d>
 8001cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cee:	4638      	mov	r0, r7
 8001cf0:	f7fe fbb2 	bl	8000458 <__aeabi_f2d>
 8001cf4:	4a39      	ldr	r2, [pc, #228]	; (8001ddc <ourInit+0x210>)
 8001cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	482e      	ldr	r0, [pc, #184]	; (8001db8 <ourInit+0x1ec>)
 8001cfe:	f00b ffa7 	bl	800dc50 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001d02:	2240      	movs	r2, #64	; 0x40
 8001d04:	492c      	ldr	r1, [pc, #176]	; (8001db8 <ourInit+0x1ec>)
 8001d06:	482f      	ldr	r0, [pc, #188]	; (8001dc4 <ourInit+0x1f8>)
 8001d08:	f009 f99e 	bl	800b048 <HAL_UART_Transmit_DMA>
	lcd_init();
 8001d0c:	f7ff feea 	bl	8001ae4 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <ourInit+0x214>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d12:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d14:	9308      	str	r3, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d16:	4630      	mov	r0, r6
 8001d18:	2304      	movs	r3, #4
 8001d1a:	9500      	str	r5, [sp, #0]
 8001d1c:	aa08      	add	r2, sp, #32
 8001d1e:	f007 fa79 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d22:	2334      	movs	r3, #52	; 0x34
	data_l = ((data<<4)&0xf0);
 8001d24:	011a      	lsls	r2, r3, #4
 8001d26:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d2c:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d30:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d34:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d38:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	214e      	movs	r1, #78	; 0x4e
 8001d40:	4630      	mov	r0, r6
 8001d42:	aa08      	add	r2, sp, #32
 8001d44:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d46:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d4a:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d4e:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d52:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d56:	f007 fa5d 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d5a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e0      	bne.n	8001d24 <ourInit+0x158>
	HAL_TIM_Base_Start_IT(&htim11);
 8001d62:	4820      	ldr	r0, [pc, #128]	; (8001de4 <ourInit+0x218>)
 8001d64:	f008 ff38 	bl	800abd8 <HAL_TIM_Base_Start_IT>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d68:	4c1f      	ldr	r4, [pc, #124]	; (8001de8 <ourInit+0x21c>)
 8001d6a:	f504 7500 	add.w	r5, r4, #512	; 0x200
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	4620      	mov	r0, r4
 8001d72:	2100      	movs	r1, #0
	for(int i = 0; i < CIRCSIZE; i++){
 8001d74:	4414      	add	r4, r2
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001d76:	f00b fb03 	bl	800d380 <memset>
	for(int i = 0; i < CIRCSIZE; i++){
 8001d7a:	42a5      	cmp	r5, r4
 8001d7c:	d1f7      	bne.n	8001d6e <ourInit+0x1a2>
	HAL_TIM_Base_Start_IT(&htim3);
 8001d7e:	481b      	ldr	r0, [pc, #108]	; (8001dec <ourInit+0x220>)
}
 8001d80:	b00c      	add	sp, #48	; 0x30
 8001d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8001d86:	f008 bf27 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
 8001d8a:	bf00      	nop
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	20000404 	.word	0x20000404
 8001d94:	2000046c 	.word	0x2000046c
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	200003d0 	.word	0x200003d0
 8001da0:	20000458 	.word	0x20000458
 8001da4:	06000001 	.word	0x06000001
 8001da8:	20000538 	.word	0x20000538
 8001dac:	40020800 	.word	0x40020800
 8001db0:	20000a38 	.word	0x20000a38
 8001db4:	20000390 	.word	0x20000390
 8001db8:	200009b8 	.word	0x200009b8
 8001dbc:	200009f8 	.word	0x200009f8
 8001dc0:	20000970 	.word	0x20000970
 8001dc4:	20000714 	.word	0x20000714
 8001dc8:	20000a78 	.word	0x20000a78
 8001dcc:	20000540 	.word	0x20000540
 8001dd0:	200003e8 	.word	0x200003e8
 8001dd4:	08011720 	.word	0x08011720
 8001dd8:	200003f5 	.word	0x200003f5
 8001ddc:	08011738 	.word	0x08011738
 8001de0:	080cc8cc 	.word	0x080cc8cc
 8001de4:	200005d4 	.word	0x200005d4
 8001de8:	20000764 	.word	0x20000764
 8001dec:	20000654 	.word	0x20000654

08001df0 <main>:
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	2400      	movs	r4, #0
{
 8001df6:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8001df8:	f006 f8d6 	bl	8007fa8 <HAL_Init>
  SystemClock_Config();
 8001dfc:	f7ff fd34 	bl	8001868 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e02:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001e08:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0c:	4dae      	ldr	r5, [pc, #696]	; (80020c8 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	9414      	str	r4, [sp, #80]	; 0x50
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e12:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	61eb      	str	r3, [r5, #28]
 8001e1a:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e1c:	48ab      	ldr	r0, [pc, #684]	; (80020cc <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	9309      	str	r3, [sp, #36]	; 0x24
 8001e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e26:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	4692      	mov	sl, r2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	61eb      	str	r3, [r5, #28]
 8001e30:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e32:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e40:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61eb      	str	r3, [r5, #28]
 8001e48:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001e4a:	4fa1      	ldr	r7, [pc, #644]	; (80020d0 <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	69eb      	ldr	r3, [r5, #28]
 8001e54:	4333      	orrs	r3, r6
 8001e56:	61eb      	str	r3, [r5, #28]
 8001e58:	69eb      	ldr	r3, [r5, #28]
 8001e5a:	4033      	ands	r3, r6
 8001e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8001e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e60:	69eb      	ldr	r3, [r5, #28]
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	61eb      	str	r3, [r5, #28]
 8001e68:	69eb      	ldr	r3, [r5, #28]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8001e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e72:	f007 f8ed 	bl	8009050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e76:	4622      	mov	r2, r4
 8001e78:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001e7c:	4895      	ldr	r0, [pc, #596]	; (80020d4 <main+0x2e4>)
 8001e7e:	f007 f8e7 	bl	8009050 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e82:	f64f 420f 	movw	r2, #64527	; 0xfc0f
 8001e86:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	4892      	ldr	r0, [pc, #584]	; (80020d4 <main+0x2e4>)
 8001e8a:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001e8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e90:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f006 ff5b 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	488c      	ldr	r0, [pc, #560]	; (80020cc <main+0x2dc>)
 8001e9c:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ea2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f006 ff51 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eaa:	f248 1280 	movw	r2, #33152	; 0x8180
 8001eae:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	4886      	ldr	r0, [pc, #536]	; (80020cc <main+0x2dc>)
 8001eb2:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001eb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eb8:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f006 ff47 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ebe:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001ec2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec4:	4883      	ldr	r0, [pc, #524]	; (80020d4 <main+0x2e4>)
 8001ec6:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ec8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001ecc:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed0:	f006 ff3c 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8001eda:	487f      	ldr	r0, [pc, #508]	; (80020d8 <main+0x2e8>)
 8001edc:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_CLK_Pin;
 8001ede:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(Rot_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f006 ff31 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001eea:	2202      	movs	r2, #2
 8001eec:	2300      	movs	r3, #0
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001eee:	487a      	ldr	r0, [pc, #488]	; (80020d8 <main+0x2e8>)
 8001ef0:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001ef2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef6:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f006 ff27 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_SW_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin
 8001efe:	f647 4204 	movw	r2, #31748	; 0x7c04
 8001f02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	4874      	ldr	r0, [pc, #464]	; (80020d8 <main+0x2e8>)
 8001f08:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Rot_SW_Pin|Row_1_Pin|Row_2_Pin|Row_3_Pin
 8001f0a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f006 ff1b 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f16:	f248 3238 	movw	r2, #33592	; 0x8338
 8001f1a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	486e      	ldr	r0, [pc, #440]	; (80020d8 <main+0x2e8>)
 8001f1e:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f24:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f26:	f006 ff11 	bl	8008d4c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2204      	movs	r2, #4
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	486b      	ldr	r0, [pc, #428]	; (80020dc <main+0x2ec>)
 8001f30:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f36:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f006 ff08 	bl	8008d4c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f3c:	4622      	mov	r2, r4
 8001f3e:	4621      	mov	r1, r4
 8001f40:	2006      	movs	r0, #6
 8001f42:	f006 fc51 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f46:	2006      	movs	r0, #6
 8001f48:	f006 fc8c 	bl	8008864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f4c:	4622      	mov	r2, r4
 8001f4e:	4621      	mov	r1, r4
 8001f50:	2008      	movs	r0, #8
 8001f52:	f006 fc49 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f56:	2008      	movs	r0, #8
 8001f58:	f006 fc84 	bl	8008864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4621      	mov	r1, r4
 8001f60:	2028      	movs	r0, #40	; 0x28
 8001f62:	f006 fc41 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f66:	2028      	movs	r0, #40	; 0x28
 8001f68:	f006 fc7c 	bl	8008864 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6c:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f6e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f74:	61eb      	str	r3, [r5, #28]
 8001f76:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f78:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f7e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f80:	9308      	str	r3, [sp, #32]
 8001f82:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f84:	f006 fc30 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f88:	200b      	movs	r0, #11
 8001f8a:	f006 fc6b 	bl	8008864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4621      	mov	r1, r4
 8001f92:	200e      	movs	r0, #14
 8001f94:	f006 fc28 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f98:	200e      	movs	r0, #14
 8001f9a:	f006 fc63 	bl	8008864 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	200f      	movs	r0, #15
 8001fa4:	f006 fc20 	bl	80087e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fa8:	200f      	movs	r0, #15
 8001faa:	f006 fc5b 	bl	8008864 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001fae:	f7ff fac9 	bl	8001544 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <main+0x2f0>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fb4:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  hdac.Instance = DAC;
 8001fba:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fbc:	f006 fc8c 	bl	80088d8 <HAL_DAC_Init>
 8001fc0:	b108      	cbz	r0, 8001fc6 <main+0x1d6>
 8001fc2:	b672      	cpsid	i
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <main+0x1d4>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	a910      	add	r1, sp, #64	; 0x40
 8001fca:	4638      	mov	r0, r7
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fcc:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fd0:	f006 fcde 	bl	8008990 <HAL_DAC_ConfigChannel>
 8001fd4:	b108      	cbz	r0, 8001fda <main+0x1ea>
 8001fd6:	b672      	cpsid	i
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <main+0x1e8>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001fda:	2210      	movs	r2, #16
 8001fdc:	4638      	mov	r0, r7
 8001fde:	a910      	add	r1, sp, #64	; 0x40
 8001fe0:	f006 fcd6 	bl	8008990 <HAL_DAC_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b108      	cbz	r0, 8001fec <main+0x1fc>
 8001fe8:	b672      	cpsid	i
  while (1)
 8001fea:	e7fe      	b.n	8001fea <main+0x1fa>
  hi2c1.Instance = I2C1;
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <main+0x2f4>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fee:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001ff0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff8:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001ffe:	4c3a      	ldr	r4, [pc, #232]	; (80020e8 <main+0x2f8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <main+0x2fc>)
 8002006:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800200a:	f007 f83b 	bl	8009084 <HAL_I2C_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	b9b0      	cbnz	r0, 8002040 <main+0x250>
  huart1.Instance = USART1;
 8002012:	4837      	ldr	r0, [pc, #220]	; (80020f0 <main+0x300>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002014:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 800201e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002022:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8002024:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002028:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202a:	230c      	movs	r3, #12
 800202c:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <main+0x304>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002030:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 8002032:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002034:	f008 ff7e 	bl	800af34 <HAL_UART_Init>
 8002038:	4604      	mov	r4, r0
 800203a:	b118      	cbz	r0, 8002044 <main+0x254>
 800203c:	b672      	cpsid	i
  while (1)
 800203e:	e7fe      	b.n	800203e <main+0x24e>
 8002040:	b672      	cpsid	i
 8002042:	e7fe      	b.n	8002042 <main+0x252>
  MX_USB_DEVICE_Init();
 8002044:	f00a feba 	bl	800cdbc <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8002048:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim2.Instance = TIM2;
 800204c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 50;
 8002050:	2332      	movs	r3, #50	; 0x32
  htim2.Instance = TIM2;
 8002052:	4d29      	ldr	r5, [pc, #164]	; (80020f8 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002054:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002058:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8002068:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 50;
 800206a:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 800206c:	606f      	str	r7, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206e:	f008 fd63 	bl	800ab38 <HAL_TIM_Base_Init>
 8002072:	b108      	cbz	r0, 8002078 <main+0x288>
 8002074:	b672      	cpsid	i
  while (1)
 8002076:	e7fe      	b.n	8002076 <main+0x286>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002078:	4628      	mov	r0, r5
 800207a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800207e:	f008 fded 	bl	800ac5c <HAL_TIM_ConfigClockSource>
 8002082:	b108      	cbz	r0, 8002088 <main+0x298>
 8002084:	b672      	cpsid	i
  while (1)
 8002086:	e7fe      	b.n	8002086 <main+0x296>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002088:	4628      	mov	r0, r5
 800208a:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002090:	f008 ff1e 	bl	800aed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	b108      	cbz	r0, 800209a <main+0x2aa>
 8002096:	b672      	cpsid	i
  while (1)
 8002098:	e7fe      	b.n	8002098 <main+0x2a8>
  htim3.Init.Period = 500;
 800209a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 800209e:	4c17      	ldr	r4, [pc, #92]	; (80020fc <main+0x30c>)
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80020a6:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020aa:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	e9c4 7001 	strd	r7, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b2:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020b6:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 80020b8:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 80020ba:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020bc:	f008 fd3c 	bl	800ab38 <HAL_TIM_Base_Init>
 80020c0:	b300      	cbz	r0, 8002104 <main+0x314>
 80020c2:	b672      	cpsid	i
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <main+0x2d4>
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	20000458 	.word	0x20000458
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020400 	.word	0x40020400
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40007400 	.word	0x40007400
 80020e4:	20000540 	.word	0x20000540
 80020e8:	40005400 	.word	0x40005400
 80020ec:	000186a0 	.word	0x000186a0
 80020f0:	20000714 	.word	0x20000714
 80020f4:	40013800 	.word	0x40013800
 80020f8:	20000614 	.word	0x20000614
 80020fc:	20000654 	.word	0x20000654
 8002100:	40000400 	.word	0x40000400
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002104:	4620      	mov	r0, r4
 8002106:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	9610      	str	r6, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800210a:	f008 fda7 	bl	800ac5c <HAL_TIM_ConfigClockSource>
 800210e:	b108      	cbz	r0, 8002114 <main+0x324>
 8002110:	b672      	cpsid	i
  while (1)
 8002112:	e7fe      	b.n	8002112 <main+0x322>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2600      	movs	r6, #0
 8002116:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	4851      	ldr	r0, [pc, #324]	; (8002260 <main+0x470>)
 800211a:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002120:	f008 fed6 	bl	800aed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	b108      	cbz	r0, 800212a <main+0x33a>
 8002126:	b672      	cpsid	i
  while (1)
 8002128:	e7fe      	b.n	8002128 <main+0x338>
  htim11.Init.Prescaler = 32000;
 800212a:	f44f 45fa 	mov.w	r5, #32000	; 0x7d00
  htim11.Init.Period = 100;
 800212e:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 8002130:	4c4c      	ldr	r4, [pc, #304]	; (8002264 <main+0x474>)
 8002132:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <main+0x478>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002134:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8002138:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213c:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002140:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002142:	4620      	mov	r0, r4
  htim11.Init.Period = 100;
 8002144:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = 32000;
 8002146:	6065      	str	r5, [r4, #4]
  htim11.Instance = TIM11;
 8002148:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800214a:	f008 fcf5 	bl	800ab38 <HAL_TIM_Base_Init>
 800214e:	b108      	cbz	r0, 8002154 <main+0x364>
 8002150:	b672      	cpsid	i
  while (1)
 8002152:	e7fe      	b.n	8002152 <main+0x362>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002154:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002156:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800215a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800215e:	f008 fd7d 	bl	800ac5c <HAL_TIM_ConfigClockSource>
 8002162:	b108      	cbz	r0, 8002168 <main+0x378>
 8002164:	b672      	cpsid	i
  while (1)
 8002166:	e7fe      	b.n	8002166 <main+0x376>
  htim9.Init.Period = 200;
 8002168:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 800216a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800226c <main+0x47c>
 800216e:	4b40      	ldr	r3, [pc, #256]	; (8002270 <main+0x480>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002170:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8002174:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	e9c8 5001 	strd	r5, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002180:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002184:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 8002186:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 800218a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800218e:	f008 fcd3 	bl	800ab38 <HAL_TIM_Base_Init>
 8002192:	b108      	cbz	r0, 8002198 <main+0x3a8>
 8002194:	b672      	cpsid	i
  while (1)
 8002196:	e7fe      	b.n	8002196 <main+0x3a6>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002198:	4640      	mov	r0, r8
 800219a:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219c:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800219e:	f008 fd5d 	bl	800ac5c <HAL_TIM_ConfigClockSource>
 80021a2:	b108      	cbz	r0, 80021a8 <main+0x3b8>
 80021a4:	b672      	cpsid	i
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <main+0x3b6>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021a8:	4640      	mov	r0, r8
 80021aa:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021b0:	f008 fe8e 	bl	800aed0 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	b108      	cbz	r0, 80021ba <main+0x3ca>
 80021b6:	b672      	cpsid	i
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <main+0x3c8>
  htim10.Init.Period = 10;
 80021ba:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 80021bc:	4e2d      	ldr	r6, [pc, #180]	; (8002274 <main+0x484>)
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <main+0x488>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80021c4:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021cc:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d0:	4630      	mov	r0, r6
  htim10.Init.Period = 10;
 80021d2:	60f2      	str	r2, [r6, #12]
  htim10.Instance = TIM10;
 80021d4:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021d6:	f008 fcaf 	bl	800ab38 <HAL_TIM_Base_Init>
 80021da:	b108      	cbz	r0, 80021e0 <main+0x3f0>
 80021dc:	b672      	cpsid	i
  while (1)
 80021de:	e7fe      	b.n	80021de <main+0x3ee>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e0:	4630      	mov	r0, r6
 80021e2:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e6:	f008 fd39 	bl	800ac5c <HAL_TIM_ConfigClockSource>
 80021ea:	b108      	cbz	r0, 80021f0 <main+0x400>
 80021ec:	b672      	cpsid	i
  while (1)
 80021ee:	e7fe      	b.n	80021ee <main+0x3fe>
  htim4.Init.Period = 500;
 80021f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim4.Instance = TIM4;
 80021f4:	4e21      	ldr	r6, [pc, #132]	; (800227c <main+0x48c>)
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <main+0x490>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80021fc:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220c:	4630      	mov	r0, r6
  htim4.Init.Period = 500;
 800220e:	60f2      	str	r2, [r6, #12]
  htim4.Instance = TIM4;
 8002210:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002212:	f008 fc91 	bl	800ab38 <HAL_TIM_Base_Init>
 8002216:	b108      	cbz	r0, 800221c <main+0x42c>
 8002218:	b672      	cpsid	i
  while (1)
 800221a:	e7fe      	b.n	800221a <main+0x42a>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800221c:	4630      	mov	r0, r6
 800221e:	a910      	add	r1, sp, #64	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002222:	f008 fd1b 	bl	800ac5c <HAL_TIM_ConfigClockSource>
 8002226:	b108      	cbz	r0, 800222c <main+0x43c>
 8002228:	b672      	cpsid	i
  while (1)
 800222a:	e7fe      	b.n	800222a <main+0x43a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2200      	movs	r2, #0
 800222e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002230:	4812      	ldr	r0, [pc, #72]	; (800227c <main+0x48c>)
 8002232:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002234:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002238:	f008 fe4a 	bl	800aed0 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	b108      	cbz	r0, 8002242 <main+0x452>
 800223e:	b672      	cpsid	i
  while (1)
 8002240:	e7fe      	b.n	8002240 <main+0x450>
  float error_previous_shutdown = 0;
 8002242:	f04f 0900 	mov.w	r9, #0
  ourInit();
 8002246:	f7ff fcc1 	bl	8001bcc <ourInit>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 800224a:	464d      	mov	r5, r9
 800224c:	4c0d      	ldr	r4, [pc, #52]	; (8002284 <main+0x494>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800224e:	f8df b038 	ldr.w	fp, [pc, #56]	; 8002288 <main+0x498>
  float integral_shutdown = 0;
 8002252:	f8cd 9014 	str.w	r9, [sp, #20]
  float error_previous = 0;
 8002256:	f8cd 9018 	str.w	r9, [sp, #24]
  float integral = 0;
 800225a:	f8cd 9010 	str.w	r9, [sp, #16]
 800225e:	e0c5      	b.n	80023ec <main+0x5fc>
 8002260:	20000654 	.word	0x20000654
 8002264:	200005d4 	.word	0x200005d4
 8002268:	40011000 	.word	0x40011000
 800226c:	200006d4 	.word	0x200006d4
 8002270:	40010800 	.word	0x40010800
 8002274:	20000594 	.word	0x20000594
 8002278:	40010c00 	.word	0x40010c00
 800227c:	20000694 	.word	0x20000694
 8002280:	40000800 	.word	0x40000800
 8002284:	20000390 	.word	0x20000390
 8002288:	40400000 	.word	0x40400000
		  error = (float)lin_num - (float)volt_set_main;
 800228c:	4618      	mov	r0, r3
 800228e:	4baa      	ldr	r3, [pc, #680]	; (8002538 <main+0x748>)
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	f7fe fc85 	bl	8000ba0 <__aeabi_fsub>
 8002296:	4607      	mov	r7, r0
		  integral += (float)error;
 8002298:	9804      	ldr	r0, [sp, #16]
 800229a:	4639      	mov	r1, r7
 800229c:	f7fe fc82 	bl	8000ba4 <__addsf3>
		  if (integral > (float)4095.0) {
 80022a0:	49a6      	ldr	r1, [pc, #664]	; (800253c <main+0x74c>)
		  integral += (float)error;
 80022a2:	4606      	mov	r6, r0
 80022a4:	9004      	str	r0, [sp, #16]
		  if (integral > (float)4095.0) {
 80022a6:	f7fe ff41 	bl	800112c <__aeabi_fcmpgt>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	f040 8236 	bne.w	800271c <main+0x92c>
		  } else if (integral < (float)(-4095.0)) {
 80022b0:	4630      	mov	r0, r6
 80022b2:	49a3      	ldr	r1, [pc, #652]	; (8002540 <main+0x750>)
 80022b4:	f7fe ff1c 	bl	80010f0 <__aeabi_fcmplt>
 80022b8:	b108      	cbz	r0, 80022be <main+0x4ce>
			  integral = (float)(-4095.0);
 80022ba:	4ba1      	ldr	r3, [pc, #644]	; (8002540 <main+0x750>)
 80022bc:	9304      	str	r3, [sp, #16]
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80022be:	4ba1      	ldr	r3, [pc, #644]	; (8002544 <main+0x754>)
 80022c0:	4638      	mov	r0, r7
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	f7fe fd76 	bl	8000db4 <__aeabi_fmul>
 80022c8:	4b9f      	ldr	r3, [pc, #636]	; (8002548 <main+0x758>)
 80022ca:	4606      	mov	r6, r0
 80022cc:	6819      	ldr	r1, [r3, #0]
		  corrected_volt_set_main = (float)volt_set_main - (float)correction;
 80022ce:	4b9a      	ldr	r3, [pc, #616]	; (8002538 <main+0x748>)
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80022d0:	9804      	ldr	r0, [sp, #16]
		  corrected_volt_set_main = (float)volt_set_main - (float)correction;
 80022d2:	f8d3 8000 	ldr.w	r8, [r3]
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80022d6:	f7fe fd6d 	bl	8000db4 <__aeabi_fmul>
 80022da:	4601      	mov	r1, r0
 80022dc:	4630      	mov	r0, r6
 80022de:	f7fe fc61 	bl	8000ba4 <__addsf3>
		  derivative = (float)error - (float)error_previous;
 80022e2:	9906      	ldr	r1, [sp, #24]
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80022e4:	4606      	mov	r6, r0
		  derivative = (float)error - (float)error_previous;
 80022e6:	4638      	mov	r0, r7
 80022e8:	f7fe fc5a 	bl	8000ba0 <__aeabi_fsub>
		  correction = ((float)P * (float)error) + ((float)I * (float)integral) + ((float)D * (float)derivative);
 80022ec:	4b97      	ldr	r3, [pc, #604]	; (800254c <main+0x75c>)
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	f7fe fd60 	bl	8000db4 <__aeabi_fmul>
 80022f4:	4601      	mov	r1, r0
 80022f6:	4630      	mov	r0, r6
 80022f8:	f7fe fc54 	bl	8000ba4 <__addsf3>
 80022fc:	4601      	mov	r1, r0
		  corrected_volt_set_main = (float)volt_set_main - (float)correction;
 80022fe:	4640      	mov	r0, r8
 8002300:	f7fe fc4e 	bl	8000ba0 <__aeabi_fsub>
		  tmpv1 = ((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc;
 8002304:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002308:	f7fe fd54 	bl	8000db4 <__aeabi_fmul>
 800230c:	4990      	ldr	r1, [pc, #576]	; (8002550 <main+0x760>)
 800230e:	f7fe fc49 	bl	8000ba4 <__addsf3>
 8002312:	498a      	ldr	r1, [pc, #552]	; (800253c <main+0x74c>)
 8002314:	f7fe fd4e 	bl	8000db4 <__aeabi_fmul>
 8002318:	4651      	mov	r1, sl
 800231a:	f7fe fdff 	bl	8000f1c <__aeabi_fdiv>
		  if (tmpv1 >= 4094) {
 800231e:	498d      	ldr	r1, [pc, #564]	; (8002554 <main+0x764>)
		  tmpv1 = ((((float)corrected_volt_set_main / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc;
 8002320:	4606      	mov	r6, r0
		  if (tmpv1 >= 4094) {
 8002322:	f7fe fef9 	bl	8001118 <__aeabi_fcmpge>
 8002326:	2800      	cmp	r0, #0
 8002328:	f040 84e3 	bne.w	8002cf2 <main+0xf02>
		  } else if (tmpv1 < 0) {
 800232c:	4629      	mov	r1, r5
 800232e:	4630      	mov	r0, r6
 8002330:	f7fe fede 	bl	80010f0 <__aeabi_fcmplt>
 8002334:	2800      	cmp	r0, #0
 8002336:	f040 84d8 	bne.w	8002cea <main+0xefa>
		  v1 = (uint16_t) tmpv1;
 800233a:	4630      	mov	r0, r6
 800233c:	f7fe ff26 	bl	800118c <__aeabi_f2uiz>
 8002340:	464e      	mov	r6, r9
 8002342:	b283      	uxth	r3, r0
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002344:	2200      	movs	r2, #0
 8002346:	4884      	ldr	r0, [pc, #528]	; (8002558 <main+0x768>)
 8002348:	4611      	mov	r1, r2
 800234a:	f006 fb0b 	bl	8008964 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 800234e:	4b83      	ldr	r3, [pc, #524]	; (800255c <main+0x76c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 84c2 	bne.w	8002cdc <main+0xeec>
 8002358:	4b81      	ldr	r3, [pc, #516]	; (8002560 <main+0x770>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	2b04      	cmp	r3, #4
 800235e:	f240 84bd 	bls.w	8002cdc <main+0xeec>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2140      	movs	r1, #64	; 0x40
 8002366:	487f      	ldr	r0, [pc, #508]	; (8002564 <main+0x774>)
 8002368:	f006 fe72 	bl	8009050 <HAL_GPIO_WritePin>
	  update_ADC_watchdog(amp_set_main);
 800236c:	4b7e      	ldr	r3, [pc, #504]	; (8002568 <main+0x778>)
	if(val == 0.0){
 800236e:	4629      	mov	r1, r5
	  update_ADC_watchdog(amp_set_main);
 8002370:	f8d3 8000 	ldr.w	r8, [r3]
	if(val == 0.0){
 8002374:	4640      	mov	r0, r8
 8002376:	f7fe feb1 	bl	80010dc <__aeabi_fcmpeq>
 800237a:	2800      	cmp	r0, #0
 800237c:	f040 84a8 	bne.w	8002cd0 <main+0xee0>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002380:	4640      	mov	r0, r8
 8002382:	497a      	ldr	r1, [pc, #488]	; (800256c <main+0x77c>)
 8002384:	f7fe fd16 	bl	8000db4 <__aeabi_fmul>
 8002388:	4979      	ldr	r1, [pc, #484]	; (8002570 <main+0x780>)
 800238a:	f7fe fd13 	bl	8000db4 <__aeabi_fmul>
 800238e:	496b      	ldr	r1, [pc, #428]	; (800253c <main+0x74c>)
 8002390:	f7fe fd10 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002394:	4b77      	ldr	r3, [pc, #476]	; (8002574 <main+0x784>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002396:	4680      	mov	r8, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002398:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800239a:	8818      	ldrh	r0, [r3, #0]
 800239c:	f7fe fcb2 	bl	8000d04 <__aeabi_ui2f>
 80023a0:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <main+0x770>)
 80023a2:	4681      	mov	r9, r0
 80023a4:	8918      	ldrh	r0, [r3, #8]
 80023a6:	f7fe fcad 	bl	8000d04 <__aeabi_ui2f>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4648      	mov	r0, r9
 80023ae:	f7fe fdb5 	bl	8000f1c <__aeabi_fdiv>
 80023b2:	4659      	mov	r1, fp
 80023b4:	f7fe fcfe 	bl	8000db4 <__aeabi_fmul>
 80023b8:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80023ba:	4640      	mov	r0, r8
 80023bc:	f7fe fdae 	bl	8000f1c <__aeabi_fdiv>
	else if(amp >= 4095.0){
 80023c0:	495e      	ldr	r1, [pc, #376]	; (800253c <main+0x74c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80023c2:	4680      	mov	r8, r0
	else if(amp >= 4095.0){
 80023c4:	f7fe fea8 	bl	8001118 <__aeabi_fcmpge>
 80023c8:	4681      	mov	r9, r0
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f040 8480 	bne.w	8002cd0 <main+0xee0>
	else if(amp < 0.0){
 80023d0:	4629      	mov	r1, r5
 80023d2:	4640      	mov	r0, r8
 80023d4:	f7fe fe8c 	bl	80010f0 <__aeabi_fcmplt>
 80023d8:	2800      	cmp	r0, #0
 80023da:	f040 82f0 	bne.w	80029be <main+0xbce>
		ADC1->HTR = amp;
 80023de:	4640      	mov	r0, r8
 80023e0:	f7fe fed4 	bl	800118c <__aeabi_f2uiz>
 80023e4:	4a64      	ldr	r2, [pc, #400]	; (8002578 <main+0x788>)
 80023e6:	6290      	str	r0, [r2, #40]	; 0x28
{
 80023e8:	46b1      	mov	r9, r6
 80023ea:	9706      	str	r7, [sp, #24]
	  tempiter++;
 80023ec:	4b63      	ldr	r3, [pc, #396]	; (800257c <main+0x78c>)
 80023ee:	781e      	ldrb	r6, [r3, #0]
	  if(tempiter != headiter){
 80023f0:	4b63      	ldr	r3, [pc, #396]	; (8002580 <main+0x790>)
	  tempiter++;
 80023f2:	3601      	adds	r6, #1
 80023f4:	b276      	sxtb	r6, r6
		  tempiter = 0;
 80023f6:	2e08      	cmp	r6, #8
 80023f8:	bfa8      	it	ge
 80023fa:	2600      	movge	r6, #0
	  if(tempiter != headiter){
 80023fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002400:	42b3      	cmp	r3, r6
 8002402:	d05a      	beq.n	80024ba <main+0x6ca>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 8002404:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <main+0x794>)
 8002406:	220a      	movs	r2, #10
 8002408:	eb03 1686 	add.w	r6, r3, r6, lsl #6
 800240c:	4631      	mov	r1, r6
 800240e:	485e      	ldr	r0, [pc, #376]	; (8002588 <main+0x798>)
 8002410:	f00b fc52 	bl	800dcb8 <strncmp>
 8002414:	2800      	cmp	r0, #0
 8002416:	f000 8184 	beq.w	8002722 <main+0x932>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 800241a:	2213      	movs	r2, #19
 800241c:	4631      	mov	r1, r6
 800241e:	485b      	ldr	r0, [pc, #364]	; (800258c <main+0x79c>)
 8002420:	f00b fc4a 	bl	800dcb8 <strncmp>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 8002424:	2800      	cmp	r0, #0
 8002426:	f000 817c 	beq.w	8002722 <main+0x932>
					(strncmp("MEASure:VOLTage?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage?")) == 0)){
 800242a:	2210      	movs	r2, #16
 800242c:	4631      	mov	r1, r6
 800242e:	4858      	ldr	r0, [pc, #352]	; (8002590 <main+0x7a0>)
 8002430:	f00b fc42 	bl	800dcb8 <strncmp>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 8002434:	2800      	cmp	r0, #0
 8002436:	f000 8174 	beq.w	8002722 <main+0x932>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 800243a:	220a      	movs	r2, #10
 800243c:	4631      	mov	r1, r6
 800243e:	4855      	ldr	r0, [pc, #340]	; (8002594 <main+0x7a4>)
 8002440:	f00b fc3a 	bl	800dcb8 <strncmp>
 8002444:	b168      	cbz	r0, 8002462 <main+0x672>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 8002446:	2213      	movs	r2, #19
 8002448:	4631      	mov	r1, r6
 800244a:	4853      	ldr	r0, [pc, #332]	; (8002598 <main+0x7a8>)
 800244c:	f00b fc34 	bl	800dcb8 <strncmp>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 8002450:	b138      	cbz	r0, 8002462 <main+0x672>
					(strncmp("MEASure:CURRent?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent?")) == 0)){
 8002452:	2210      	movs	r2, #16
 8002454:	4631      	mov	r1, r6
 8002456:	4851      	ldr	r0, [pc, #324]	; (800259c <main+0x7ac>)
 8002458:	f00b fc2e 	bl	800dcb8 <strncmp>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 800245c:	2800      	cmp	r0, #0
 800245e:	f040 816e 	bne.w	800273e <main+0x94e>
				snprintf((char*)MSG, 64, "%.3f, %.3f\n", cur_num_aux, cur_num);
 8002462:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <main+0x7b0>)
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	f7fd fff7 	bl	8000458 <__aeabi_f2d>
 800246a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <main+0x7b4>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f7fd fff1 	bl	8000458 <__aeabi_f2d>
 8002476:	e9cd 0100 	strd	r0, r1, [sp]
 800247a:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <main+0x7b8>)
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	484b      	ldr	r0, [pc, #300]	; (80025ac <main+0x7bc>)
 8002480:	f00b fbe6 	bl	800dc50 <sniprintf>
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002484:	4849      	ldr	r0, [pc, #292]	; (80025ac <main+0x7bc>)
 8002486:	f7fd fe7b 	bl	8000180 <strlen>
 800248a:	4601      	mov	r1, r0
 800248c:	4847      	ldr	r0, [pc, #284]	; (80025ac <main+0x7bc>)
 800248e:	b289      	uxth	r1, r1
 8002490:	f00a fd1c 	bl	800cecc <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002494:	2240      	movs	r2, #64	; 0x40
 8002496:	2100      	movs	r1, #0
 8002498:	4844      	ldr	r0, [pc, #272]	; (80025ac <main+0x7bc>)
 800249a:	f00a ff71 	bl	800d380 <memset>
			memset (notacircbuff[tempiter], '\0', 64); // clear the buffer
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	4630      	mov	r0, r6
 80024a2:	2100      	movs	r1, #0
 80024a4:	f00a ff6c 	bl	800d380 <memset>
			tailiter++;
 80024a8:	4a34      	ldr	r2, [pc, #208]	; (800257c <main+0x78c>)
 80024aa:	7813      	ldrb	r3, [r2, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b25b      	sxtb	r3, r3
			if(tailiter >= CIRCSIZE){
 80024b0:	2b07      	cmp	r3, #7
				tailiter = 0;
 80024b2:	bfc4      	itt	gt
 80024b4:	2300      	movgt	r3, #0
 80024b6:	4a31      	ldrgt	r2, [pc, #196]	; (800257c <main+0x78c>)
 80024b8:	7013      	strb	r3, [r2, #0]
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 80024ba:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <main+0x784>)
	  op_num_old = (float)op_num;
 80024bc:	4a3c      	ldr	r2, [pc, #240]	; (80025b0 <main+0x7c0>)
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 80024be:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80024c0:	8818      	ldrh	r0, [r3, #0]
	  op_num_old = (float)op_num;
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <main+0x7c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6013      	str	r3, [r2, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80024c8:	f7fe fc1c 	bl	8000d04 <__aeabi_ui2f>
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <main+0x770>)
 80024ce:	4607      	mov	r7, r0
 80024d0:	8918      	ldrh	r0, [r3, #8]
 80024d2:	f7fe fc17 	bl	8000d04 <__aeabi_ui2f>
 80024d6:	4606      	mov	r6, r0
 80024d8:	4638      	mov	r0, r7
 80024da:	4631      	mov	r1, r6
 80024dc:	f7fe fd1e 	bl	8000f1c <__aeabi_fdiv>
 80024e0:	4659      	mov	r1, fp
 80024e2:	f7fe fc67 	bl	8000db4 <__aeabi_fmul>
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80024e6:	4915      	ldr	r1, [pc, #84]	; (800253c <main+0x74c>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80024e8:	4682      	mov	sl, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80024ea:	4630      	mov	r0, r6
 80024ec:	f7fe fc62 	bl	8000db4 <__aeabi_fmul>
 80024f0:	4680      	mov	r8, r0
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <main+0x770>)
 80024f4:	8898      	ldrh	r0, [r3, #4]
 80024f6:	f7fe fc05 	bl	8000d04 <__aeabi_ui2f>
 80024fa:	4659      	mov	r1, fp
 80024fc:	f7fe fc5a 	bl	8000db4 <__aeabi_fmul>
 8002500:	4639      	mov	r1, r7
 8002502:	f7fe fc57 	bl	8000db4 <__aeabi_fmul>
 8002506:	4641      	mov	r1, r8
 8002508:	f7fe fd08 	bl	8000f1c <__aeabi_fdiv>
 800250c:	4918      	ldr	r1, [pc, #96]	; (8002570 <main+0x780>)
 800250e:	f7fe fd05 	bl	8000f1c <__aeabi_fdiv>
 8002512:	4916      	ldr	r1, [pc, #88]	; (800256c <main+0x77c>)
 8002514:	f7fe fd02 	bl	8000f1c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8002518:	4629      	mov	r1, r5
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 800251a:	4606      	mov	r6, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 800251c:	f7fe fdfc 	bl	8001118 <__aeabi_fcmpge>
 8002520:	b900      	cbnz	r0, 8002524 <main+0x734>
 8002522:	462e      	mov	r6, r5
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <main+0x7b0>)
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002526:	4924      	ldr	r1, [pc, #144]	; (80025b8 <main+0x7c8>)
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 8002528:	601e      	str	r6, [r3, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800252a:	4630      	mov	r0, r6
 800252c:	f7fe fc42 	bl	8000db4 <__aeabi_fmul>
 8002530:	4603      	mov	r3, r0
 8002532:	461e      	mov	r6, r3
 8002534:	e042      	b.n	80025bc <main+0x7cc>
 8002536:	bf00      	nop
 8002538:	20000a7c 	.word	0x20000a7c
 800253c:	457ff000 	.word	0x457ff000
 8002540:	c57ff000 	.word	0xc57ff000
 8002544:	20000004 	.word	0x20000004
 8002548:	20000000 	.word	0x20000000
 800254c:	2000038c 	.word	0x2000038c
 8002550:	3de4d9c9 	.word	0x3de4d9c9
 8002554:	457fe000 	.word	0x457fe000
 8002558:	20000458 	.word	0x20000458
 800255c:	200003f6 	.word	0x200003f6
 8002560:	200003dc 	.word	0x200003dc
 8002564:	40020000 	.word	0x40020000
 8002568:	200003ec 	.word	0x200003ec
 800256c:	3e19999a 	.word	0x3e19999a
 8002570:	41a00000 	.word	0x41a00000
 8002574:	2000001c 	.word	0x2000001c
 8002578:	40012400 	.word	0x40012400
 800257c:	200009b4 	.word	0x200009b4
 8002580:	20000008 	.word	0x20000008
 8002584:	20000764 	.word	0x20000764
 8002588:	08011754 	.word	0x08011754
 800258c:	08011760 	.word	0x08011760
 8002590:	08011774 	.word	0x08011774
 8002594:	08011794 	.word	0x08011794
 8002598:	080117a0 	.word	0x080117a0
 800259c:	080117b4 	.word	0x080117b4
 80025a0:	200003f8 	.word	0x200003f8
 80025a4:	200003fc 	.word	0x200003fc
 80025a8:	080117c8 	.word	0x080117c8
 80025ac:	20000390 	.word	0x20000390
 80025b0:	20000968 	.word	0x20000968
 80025b4:	20000964 	.word	0x20000964
 80025b8:	3eb33333 	.word	0x3eb33333
 80025bc:	4a9c      	ldr	r2, [pc, #624]	; (8002830 <main+0xa40>)
 80025be:	9307      	str	r3, [sp, #28]
 80025c0:	8810      	ldrh	r0, [r2, #0]
 80025c2:	f7fe fb9f 	bl	8000d04 <__aeabi_ui2f>
 80025c6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80025ca:	f7fe fbf3 	bl	8000db4 <__aeabi_fmul>
 80025ce:	4659      	mov	r1, fp
 80025d0:	f7fe fbf0 	bl	8000db4 <__aeabi_fmul>
 80025d4:	4639      	mov	r1, r7
 80025d6:	f7fe fbed 	bl	8000db4 <__aeabi_fmul>
 80025da:	4641      	mov	r1, r8
 80025dc:	f7fe fc9e 	bl	8000f1c <__aeabi_fdiv>
 80025e0:	4631      	mov	r1, r6
 80025e2:	f7fe fadd 	bl	8000ba0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80025e6:	4629      	mov	r1, r5
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80025e8:	4606      	mov	r6, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 80025ea:	f7fe fd95 	bl	8001118 <__aeabi_fcmpge>
 80025ee:	b900      	cbnz	r0, 80025f2 <main+0x802>
 80025f0:	462e      	mov	r6, r5
 80025f2:	4b90      	ldr	r3, [pc, #576]	; (8002834 <main+0xa44>)
 80025f4:	601e      	str	r6, [r3, #0]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80025f6:	4b8e      	ldr	r3, [pc, #568]	; (8002830 <main+0xa40>)
 80025f8:	8858      	ldrh	r0, [r3, #2]
 80025fa:	f7fe fb83 	bl	8000d04 <__aeabi_ui2f>
 80025fe:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002602:	f7fe fbd7 	bl	8000db4 <__aeabi_fmul>
 8002606:	4659      	mov	r1, fp
 8002608:	f7fe fbd4 	bl	8000db4 <__aeabi_fmul>
 800260c:	4639      	mov	r1, r7
 800260e:	f7fe fbd1 	bl	8000db4 <__aeabi_fmul>
 8002612:	4641      	mov	r1, r8
 8002614:	f7fe fc82 	bl	8000f1c <__aeabi_fdiv>
 8002618:	9907      	ldr	r1, [sp, #28]
 800261a:	f7fe fac1 	bl	8000ba0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 800261e:	4629      	mov	r1, r5
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002620:	9007      	str	r0, [sp, #28]
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002622:	f7fe fd79 	bl	8001118 <__aeabi_fcmpge>
 8002626:	9b07      	ldr	r3, [sp, #28]
 8002628:	b900      	cbnz	r0, 800262c <main+0x83c>
 800262a:	462b      	mov	r3, r5
 800262c:	4a82      	ldr	r2, [pc, #520]	; (8002838 <main+0xa48>)
 800262e:	9307      	str	r3, [sp, #28]
 8002630:	6013      	str	r3, [r2, #0]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002632:	4b7f      	ldr	r3, [pc, #508]	; (8002830 <main+0xa40>)
 8002634:	88d8      	ldrh	r0, [r3, #6]
 8002636:	f7fe fb65 	bl	8000d04 <__aeabi_ui2f>
 800263a:	4980      	ldr	r1, [pc, #512]	; (800283c <main+0xa4c>)
 800263c:	f7fe fbba 	bl	8000db4 <__aeabi_fmul>
 8002640:	4659      	mov	r1, fp
 8002642:	f7fe fbb7 	bl	8000db4 <__aeabi_fmul>
 8002646:	4639      	mov	r1, r7
 8002648:	f7fe fbb4 	bl	8000db4 <__aeabi_fmul>
 800264c:	4641      	mov	r1, r8
 800264e:	f7fe fc65 	bl	8000f1c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002652:	4629      	mov	r1, r5
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002654:	4607      	mov	r7, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002656:	f7fe fd5f 	bl	8001118 <__aeabi_fcmpge>
 800265a:	9b07      	ldr	r3, [sp, #28]
 800265c:	b900      	cbnz	r0, 8002660 <main+0x870>
 800265e:	462f      	mov	r7, r5
 8002660:	4a77      	ldr	r2, [pc, #476]	; (8002840 <main+0xa50>)
 8002662:	6017      	str	r7, [r2, #0]
	  if (chstat_main) {
 8002664:	4a77      	ldr	r2, [pc, #476]	; (8002844 <main+0xa54>)
 8002666:	7812      	ldrb	r2, [r2, #0]
 8002668:	2a00      	cmp	r2, #0
 800266a:	f47f ae0f 	bne.w	800228c <main+0x49c>
		  integral_shutdown += error_shutdown;
 800266e:	4631      	mov	r1, r6
 8002670:	9805      	ldr	r0, [sp, #20]
 8002672:	f7fe fa97 	bl	8000ba4 <__addsf3>
		  if (integral_shutdown > (float)4095.0) {
 8002676:	4974      	ldr	r1, [pc, #464]	; (8002848 <main+0xa58>)
		  integral_shutdown += error_shutdown;
 8002678:	4607      	mov	r7, r0
 800267a:	9005      	str	r0, [sp, #20]
		  if (integral_shutdown > (float)4095.0) {
 800267c:	f7fe fd56 	bl	800112c <__aeabi_fcmpgt>
 8002680:	2800      	cmp	r0, #0
 8002682:	f040 8199 	bne.w	80029b8 <main+0xbc8>
		  } else if (integral_shutdown < (float)-4095.0) {
 8002686:	4638      	mov	r0, r7
 8002688:	4970      	ldr	r1, [pc, #448]	; (800284c <main+0xa5c>)
 800268a:	f7fe fd31 	bl	80010f0 <__aeabi_fcmplt>
 800268e:	b108      	cbz	r0, 8002694 <main+0x8a4>
			  integral_shutdown = (float)-4095.0;
 8002690:	4b6e      	ldr	r3, [pc, #440]	; (800284c <main+0xa5c>)
 8002692:	9305      	str	r3, [sp, #20]
		  correction_shutdown = P * error_shutdown + I * integral_shutdown + D * derivative_shutdown;
 8002694:	4b6e      	ldr	r3, [pc, #440]	; (8002850 <main+0xa60>)
 8002696:	4630      	mov	r0, r6
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	f7fe fb8b 	bl	8000db4 <__aeabi_fmul>
 800269e:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <main+0xa64>)
 80026a0:	4607      	mov	r7, r0
 80026a2:	6819      	ldr	r1, [r3, #0]
		  corrected_volt_set_main_shutdown = volt_set_main - correction_shutdown;
 80026a4:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <main+0xa68>)
		  correction_shutdown = P * error_shutdown + I * integral_shutdown + D * derivative_shutdown;
 80026a6:	9805      	ldr	r0, [sp, #20]
		  corrected_volt_set_main_shutdown = volt_set_main - correction_shutdown;
 80026a8:	f8d3 8000 	ldr.w	r8, [r3]
		  correction_shutdown = P * error_shutdown + I * integral_shutdown + D * derivative_shutdown;
 80026ac:	f7fe fb82 	bl	8000db4 <__aeabi_fmul>
 80026b0:	4601      	mov	r1, r0
 80026b2:	4638      	mov	r0, r7
 80026b4:	f7fe fa76 	bl	8000ba4 <__addsf3>
		  derivative_shutdown = error_shutdown - error_previous_shutdown;
 80026b8:	4649      	mov	r1, r9
		  correction_shutdown = P * error_shutdown + I * integral_shutdown + D * derivative_shutdown;
 80026ba:	4607      	mov	r7, r0
		  derivative_shutdown = error_shutdown - error_previous_shutdown;
 80026bc:	4630      	mov	r0, r6
 80026be:	f7fe fa6f 	bl	8000ba0 <__aeabi_fsub>
		  correction_shutdown = P * error_shutdown + I * integral_shutdown + D * derivative_shutdown;
 80026c2:	4b66      	ldr	r3, [pc, #408]	; (800285c <main+0xa6c>)
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	f7fe fb75 	bl	8000db4 <__aeabi_fmul>
 80026ca:	4601      	mov	r1, r0
 80026cc:	4638      	mov	r0, r7
 80026ce:	f7fe fa69 	bl	8000ba4 <__addsf3>
 80026d2:	4601      	mov	r1, r0
		  corrected_volt_set_main_shutdown = volt_set_main - correction_shutdown;
 80026d4:	4640      	mov	r0, r8
 80026d6:	f7fe fa63 	bl	8000ba0 <__aeabi_fsub>
		  tmpv1 = (((((float)corrected_volt_set_main_shutdown / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80026da:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80026de:	f7fe fb69 	bl	8000db4 <__aeabi_fmul>
 80026e2:	495f      	ldr	r1, [pc, #380]	; (8002860 <main+0xa70>)
 80026e4:	f7fe fa5e 	bl	8000ba4 <__addsf3>
 80026e8:	4957      	ldr	r1, [pc, #348]	; (8002848 <main+0xa58>)
 80026ea:	f7fe fb63 	bl	8000db4 <__aeabi_fmul>
 80026ee:	4651      	mov	r1, sl
 80026f0:	f7fe fc14 	bl	8000f1c <__aeabi_fdiv>
		  if (tmpv1 > 4095) {
 80026f4:	4954      	ldr	r1, [pc, #336]	; (8002848 <main+0xa58>)
		  tmpv1 = (((((float)corrected_volt_set_main_shutdown / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80026f6:	4607      	mov	r7, r0
		  if (tmpv1 > 4095) {
 80026f8:	f7fe fd18 	bl	800112c <__aeabi_fcmpgt>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	f040 818a 	bne.w	8002a16 <main+0xc26>
		  } else if (tmpv1 < 0) {
 8002702:	4629      	mov	r1, r5
 8002704:	4638      	mov	r0, r7
 8002706:	f7fe fcf3 	bl	80010f0 <__aeabi_fcmplt>
 800270a:	2800      	cmp	r0, #0
 800270c:	f040 8181 	bne.w	8002a12 <main+0xc22>
		  v1 = (uint16_t) tmpv1;
 8002710:	4638      	mov	r0, r7
 8002712:	f7fe fd3b 	bl	800118c <__aeabi_f2uiz>
 8002716:	9f06      	ldr	r7, [sp, #24]
 8002718:	b283      	uxth	r3, r0
 800271a:	e613      	b.n	8002344 <main+0x554>
			  integral = (float)4095;
 800271c:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <main+0xa58>)
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	e5cd      	b.n	80022be <main+0x4ce>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", lin_num_aux, lin_num);
 8002722:	4b45      	ldr	r3, [pc, #276]	; (8002838 <main+0xa48>)
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	f7fd fe97 	bl	8000458 <__aeabi_f2d>
 800272a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800272e:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <main+0xa74>)
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	f7fd fe91 	bl	8000458 <__aeabi_f2d>
 8002736:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <main+0xa78>)
 8002738:	e9cd 0100 	strd	r0, r1, [sp]
 800273c:	e69e      	b.n	800247c <main+0x68c>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 800273e:	220b      	movs	r2, #11
 8002740:	4631      	mov	r1, r6
 8002742:	484a      	ldr	r0, [pc, #296]	; (800286c <main+0xa7c>)
 8002744:	f00b fab8 	bl	800dcb8 <strncmp>
 8002748:	b128      	cbz	r0, 8002756 <main+0x966>
					(strncmp("OUTP:ONE?", (char*)notacircbuff[tempiter], strlen("OUTP:ONE?")) == 0)){
 800274a:	2209      	movs	r2, #9
 800274c:	4631      	mov	r1, r6
 800274e:	4848      	ldr	r0, [pc, #288]	; (8002870 <main+0xa80>)
 8002750:	f00b fab2 	bl	800dcb8 <strncmp>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 8002754:	b940      	cbnz	r0, 8002768 <main+0x978>
				snprintf((char*)MSG, 64, "%d\n", chstat_aux_rx);
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <main+0xa84>)
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4a46      	ldr	r2, [pc, #280]	; (8002878 <main+0xa88>)
 800275e:	b25b      	sxtb	r3, r3
 8002760:	4846      	ldr	r0, [pc, #280]	; (800287c <main+0xa8c>)
 8002762:	f00b fa75 	bl	800dc50 <sniprintf>
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002766:	e68d      	b.n	8002484 <main+0x694>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002768:	220b      	movs	r2, #11
 800276a:	4631      	mov	r1, r6
 800276c:	4844      	ldr	r0, [pc, #272]	; (8002880 <main+0xa90>)
 800276e:	f00b faa3 	bl	800dcb8 <strncmp>
 8002772:	b128      	cbz	r0, 8002780 <main+0x990>
					(strncmp("OUTP:TWO?", (char*)notacircbuff[tempiter], strlen("OUTP:TWO?")) == 0)){
 8002774:	2209      	movs	r2, #9
 8002776:	4631      	mov	r1, r6
 8002778:	4842      	ldr	r0, [pc, #264]	; (8002884 <main+0xa94>)
 800277a:	f00b fa9d 	bl	800dcb8 <strncmp>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 800277e:	b908      	cbnz	r0, 8002784 <main+0x994>
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <main+0xa54>)
 8002782:	e7e9      	b.n	8002758 <main+0x968>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 8002784:	2210      	movs	r2, #16
 8002786:	4631      	mov	r1, r6
 8002788:	483f      	ldr	r0, [pc, #252]	; (8002888 <main+0xa98>)
 800278a:	f00b fa95 	bl	800dcb8 <strncmp>
 800278e:	b128      	cbz	r0, 800279c <main+0x9ac>
					(strncmp("OUTP:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:START")) == 0)){
 8002790:	220e      	movs	r2, #14
 8002792:	4631      	mov	r1, r6
 8002794:	483d      	ldr	r0, [pc, #244]	; (800288c <main+0xa9c>)
 8002796:	f00b fa8f 	bl	800dcb8 <strncmp>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 800279a:	b928      	cbnz	r0, 80027a8 <main+0x9b8>
				chstat_aux_tx = 1;
 800279c:	2301      	movs	r3, #1
 800279e:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <main+0xaa0>)
 80027a0:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027a2:	230a      	movs	r3, #10
 80027a4:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80027a6:	e66d      	b.n	8002484 <main+0x694>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027a8:	2210      	movs	r2, #16
 80027aa:	4631      	mov	r1, r6
 80027ac:	4839      	ldr	r0, [pc, #228]	; (8002894 <main+0xaa4>)
 80027ae:	f00b fa83 	bl	800dcb8 <strncmp>
 80027b2:	b128      	cbz	r0, 80027c0 <main+0x9d0>
					(strncmp("OUTP:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:START")) == 0)){
 80027b4:	220e      	movs	r2, #14
 80027b6:	4631      	mov	r1, r6
 80027b8:	4837      	ldr	r0, [pc, #220]	; (8002898 <main+0xaa8>)
 80027ba:	f00b fa7d 	bl	800dcb8 <strncmp>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027be:	b928      	cbnz	r0, 80027cc <main+0x9dc>
				chstat_main = 1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <main+0xa54>)
 80027c4:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027c6:	230a      	movs	r3, #10
 80027c8:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80027ca:	e65b      	b.n	8002484 <main+0x694>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027cc:	220f      	movs	r2, #15
 80027ce:	4631      	mov	r1, r6
 80027d0:	4832      	ldr	r0, [pc, #200]	; (800289c <main+0xaac>)
 80027d2:	f00b fa71 	bl	800dcb8 <strncmp>
 80027d6:	b128      	cbz	r0, 80027e4 <main+0x9f4>
					(strncmp("OUTP:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:STOP")) == 0)){
 80027d8:	220d      	movs	r2, #13
 80027da:	4631      	mov	r1, r6
 80027dc:	4830      	ldr	r0, [pc, #192]	; (80028a0 <main+0xab0>)
 80027de:	f00b fa6b 	bl	800dcb8 <strncmp>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027e2:	b990      	cbnz	r0, 800280a <main+0xa1a>
				snprintf((char*)MSG, 64, "\n");
 80027e4:	230a      	movs	r3, #10
				chstat_aux_tx = 0;
 80027e6:	2700      	movs	r7, #0
				snprintf((char*)MSG, 64, "\n");
 80027e8:	8023      	strh	r3, [r4, #0]
				chstat_aux_tx = 0;
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <main+0xaa0>)
 80027ec:	701f      	strb	r7, [r3, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80027ee:	4823      	ldr	r0, [pc, #140]	; (800287c <main+0xa8c>)
 80027f0:	f7fd fcc6 	bl	8000180 <strlen>
 80027f4:	4601      	mov	r1, r0
 80027f6:	4821      	ldr	r0, [pc, #132]	; (800287c <main+0xa8c>)
 80027f8:	b289      	uxth	r1, r1
 80027fa:	f00a fb67 	bl	800cecc <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 80027fe:	4639      	mov	r1, r7
 8002800:	2240      	movs	r2, #64	; 0x40
 8002802:	481e      	ldr	r0, [pc, #120]	; (800287c <main+0xa8c>)
 8002804:	f00a fdbc 	bl	800d380 <memset>
 8002808:	e649      	b.n	800249e <main+0x6ae>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 800280a:	220f      	movs	r2, #15
 800280c:	4631      	mov	r1, r6
 800280e:	4825      	ldr	r0, [pc, #148]	; (80028a4 <main+0xab4>)
 8002810:	f00b fa52 	bl	800dcb8 <strncmp>
 8002814:	b130      	cbz	r0, 8002824 <main+0xa34>
					(strncmp("OUTP:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:STOP")) == 0)){
 8002816:	220d      	movs	r2, #13
 8002818:	4631      	mov	r1, r6
 800281a:	4823      	ldr	r0, [pc, #140]	; (80028a8 <main+0xab8>)
 800281c:	f00b fa4c 	bl	800dcb8 <strncmp>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 8002820:	2800      	cmp	r0, #0
 8002822:	d143      	bne.n	80028ac <main+0xabc>
				snprintf((char*)MSG, 64, "\n");
 8002824:	230a      	movs	r3, #10
				chstat_main = 0;
 8002826:	2700      	movs	r7, #0
				snprintf((char*)MSG, 64, "\n");
 8002828:	8023      	strh	r3, [r4, #0]
				chstat_main = 0;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <main+0xa54>)
 800282c:	701f      	strb	r7, [r3, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 800282e:	e7de      	b.n	80027ee <main+0x9fe>
 8002830:	200003dc 	.word	0x200003dc
 8002834:	20000964 	.word	0x20000964
 8002838:	2000075c 	.word	0x2000075c
 800283c:	40a00000 	.word	0x40a00000
 8002840:	200009b0 	.word	0x200009b0
 8002844:	200003f6 	.word	0x200003f6
 8002848:	457ff000 	.word	0x457ff000
 800284c:	c57ff000 	.word	0xc57ff000
 8002850:	20000004 	.word	0x20000004
 8002854:	20000000 	.word	0x20000000
 8002858:	20000a7c 	.word	0x20000a7c
 800285c:	2000038c 	.word	0x2000038c
 8002860:	3de4d9c9 	.word	0x3de4d9c9
 8002864:	20000760 	.word	0x20000760
 8002868:	08011788 	.word	0x08011788
 800286c:	080117d4 	.word	0x080117d4
 8002870:	080117e0 	.word	0x080117e0
 8002874:	200003f4 	.word	0x200003f4
 8002878:	080117ec 	.word	0x080117ec
 800287c:	20000390 	.word	0x20000390
 8002880:	080117f0 	.word	0x080117f0
 8002884:	080117fc 	.word	0x080117fc
 8002888:	08011808 	.word	0x08011808
 800288c:	0801181c 	.word	0x0801181c
 8002890:	200003f5 	.word	0x200003f5
 8002894:	0801182c 	.word	0x0801182c
 8002898:	08011840 	.word	0x08011840
 800289c:	08011850 	.word	0x08011850
 80028a0:	08011860 	.word	0x08011860
 80028a4:	08011870 	.word	0x08011870
 80028a8:	08011880 	.word	0x08011880
			else if ((strncmp("VOLTage:ONE:", (char*)notacircbuff[tempiter], strlen("VOLTage:ONE:")) == 0)){
 80028ac:	220c      	movs	r2, #12
 80028ae:	4631      	mov	r1, r6
 80028b0:	48bd      	ldr	r0, [pc, #756]	; (8002ba8 <main+0xdb8>)
 80028b2:	f00b fa01 	bl	800dcb8 <strncmp>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	f000 81ed 	beq.w	8002c96 <main+0xea6>
			else if ((strncmp("VOLT:ONE:", (char*)notacircbuff[tempiter], strlen("VOLT:ONE:")) == 0)){
 80028bc:	2209      	movs	r2, #9
 80028be:	4631      	mov	r1, r6
 80028c0:	48ba      	ldr	r0, [pc, #744]	; (8002bac <main+0xdbc>)
 80028c2:	f00b f9f9 	bl	800dcb8 <strncmp>
 80028c6:	4607      	mov	r7, r0
 80028c8:	2800      	cmp	r0, #0
 80028ca:	f000 81b3 	beq.w	8002c34 <main+0xe44>
			else if ((strncmp("VOLTage:TWO:", (char*)notacircbuff[tempiter], strlen("VOLTage:TWO:")) == 0)){
 80028ce:	220c      	movs	r2, #12
 80028d0:	4631      	mov	r1, r6
 80028d2:	48b7      	ldr	r0, [pc, #732]	; (8002bb0 <main+0xdc0>)
 80028d4:	f00b f9f0 	bl	800dcb8 <strncmp>
 80028d8:	4607      	mov	r7, r0
 80028da:	2800      	cmp	r0, #0
 80028dc:	f000 815b 	beq.w	8002b96 <main+0xda6>
			else if ((strncmp("VOLT:TWO:", (char*)notacircbuff[tempiter], strlen("VOLT:TWO:")) == 0)){
 80028e0:	2209      	movs	r2, #9
 80028e2:	4631      	mov	r1, r6
 80028e4:	48b3      	ldr	r0, [pc, #716]	; (8002bb4 <main+0xdc4>)
 80028e6:	f00b f9e7 	bl	800dcb8 <strncmp>
 80028ea:	4607      	mov	r7, r0
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f000 812a 	beq.w	8002b46 <main+0xd56>
			else if ((strncmp("CURRent:ONE:", (char*)notacircbuff[tempiter], strlen("CURRent:ONE:")) == 0)){
 80028f2:	220c      	movs	r2, #12
 80028f4:	4631      	mov	r1, r6
 80028f6:	48b0      	ldr	r0, [pc, #704]	; (8002bb8 <main+0xdc8>)
 80028f8:	f00b f9de 	bl	800dcb8 <strncmp>
 80028fc:	4607      	mov	r7, r0
 80028fe:	2800      	cmp	r0, #0
 8002900:	f000 80fe 	beq.w	8002b00 <main+0xd10>
			else if ((strncmp("CURR:ONE:", (char*)notacircbuff[tempiter], strlen("CURR:ONE:")) == 0)){
 8002904:	2209      	movs	r2, #9
 8002906:	4631      	mov	r1, r6
 8002908:	48ac      	ldr	r0, [pc, #688]	; (8002bbc <main+0xdcc>)
 800290a:	f00b f9d5 	bl	800dcb8 <strncmp>
 800290e:	4607      	mov	r7, r0
 8002910:	2800      	cmp	r0, #0
 8002912:	f000 80c6 	beq.w	8002aa2 <main+0xcb2>
			else if ((strncmp("CURRent:TWO:", (char*)notacircbuff[tempiter], strlen("CURRent:TWO:")) == 0)){
 8002916:	220c      	movs	r2, #12
 8002918:	4631      	mov	r1, r6
 800291a:	48a9      	ldr	r0, [pc, #676]	; (8002bc0 <main+0xdd0>)
 800291c:	f00b f9cc 	bl	800dcb8 <strncmp>
 8002920:	4607      	mov	r7, r0
 8002922:	2800      	cmp	r0, #0
 8002924:	f000 80ef 	beq.w	8002b06 <main+0xd16>
			else if ((strncmp("CURR:TWO:", (char*)notacircbuff[tempiter], strlen("CURR:TWO:")) == 0)){
 8002928:	2209      	movs	r2, #9
 800292a:	4631      	mov	r1, r6
 800292c:	48a5      	ldr	r0, [pc, #660]	; (8002bc4 <main+0xdd4>)
 800292e:	f00b f9c3 	bl	800dcb8 <strncmp>
 8002932:	4607      	mov	r7, r0
 8002934:	2800      	cmp	r0, #0
 8002936:	f000 8090 	beq.w	8002a5a <main+0xc6a>
			else if ((strncmp("*IDN?", (char*)notacircbuff[tempiter], strlen("*IDN?")) == 0)){
 800293a:	2205      	movs	r2, #5
 800293c:	4631      	mov	r1, r6
 800293e:	48a2      	ldr	r0, [pc, #648]	; (8002bc8 <main+0xdd8>)
 8002940:	f00b f9ba 	bl	800dcb8 <strncmp>
 8002944:	2800      	cmp	r0, #0
 8002946:	f000 8083 	beq.w	8002a50 <main+0xc60>
			else if ((strncmp("READ?", (char*)notacircbuff[tempiter], strlen("READ?")) == 0)){
 800294a:	2205      	movs	r2, #5
 800294c:	4631      	mov	r1, r6
 800294e:	489f      	ldr	r0, [pc, #636]	; (8002bcc <main+0xddc>)
 8002950:	f00b f9b2 	bl	800dcb8 <strncmp>
 8002954:	2800      	cmp	r0, #0
 8002956:	d076      	beq.n	8002a46 <main+0xc56>
			else if ((strncmp("DBG:SET:P:", (char*)notacircbuff[tempiter], strlen("DBG:SET:P:")) == 0)){
 8002958:	220a      	movs	r2, #10
 800295a:	4631      	mov	r1, r6
 800295c:	489c      	ldr	r0, [pc, #624]	; (8002bd0 <main+0xde0>)
 800295e:	f00b f9ab 	bl	800dcb8 <strncmp>
 8002962:	2800      	cmp	r0, #0
 8002964:	d064      	beq.n	8002a30 <main+0xc40>
			else if ((strncmp("DBG:SET:I:", (char*)notacircbuff[tempiter], strlen("DBG:SET:I:")) == 0)){
 8002966:	220a      	movs	r2, #10
 8002968:	4631      	mov	r1, r6
 800296a:	489a      	ldr	r0, [pc, #616]	; (8002bd4 <main+0xde4>)
 800296c:	f00b f9a4 	bl	800dcb8 <strncmp>
 8002970:	4607      	mov	r7, r0
 8002972:	2800      	cmp	r0, #0
 8002974:	d051      	beq.n	8002a1a <main+0xc2a>
			else if ((strncmp("DBG:SET:D:", (char*)notacircbuff[tempiter], strlen("DBG:SET:D:")) == 0)){
 8002976:	220a      	movs	r2, #10
 8002978:	4631      	mov	r1, r6
 800297a:	4897      	ldr	r0, [pc, #604]	; (8002bd8 <main+0xde8>)
 800297c:	f00b f99c 	bl	800dcb8 <strncmp>
 8002980:	4607      	mov	r7, r0
 8002982:	2800      	cmp	r0, #0
 8002984:	d03a      	beq.n	80029fc <main+0xc0c>
			else if ((strncmp("DBG:MEAS:DBG?", (char*)notacircbuff[tempiter], strlen("DBG:MEAS:DBG?")) == 0)){
 8002986:	220d      	movs	r2, #13
 8002988:	4631      	mov	r1, r6
 800298a:	4894      	ldr	r0, [pc, #592]	; (8002bdc <main+0xdec>)
 800298c:	f00b f994 	bl	800dcb8 <strncmp>
 8002990:	4607      	mov	r7, r0
 8002992:	b9c0      	cbnz	r0, 80029c6 <main+0xbd6>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", swi_num, op_num);
 8002994:	4b92      	ldr	r3, [pc, #584]	; (8002be0 <main+0xdf0>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	f7fd fd5e 	bl	8000458 <__aeabi_f2d>
 800299c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029a0:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <main+0xdf4>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	f7fd fd58 	bl	8000458 <__aeabi_f2d>
 80029a8:	4a8f      	ldr	r2, [pc, #572]	; (8002be8 <main+0xdf8>)
 80029aa:	e9cd 0100 	strd	r0, r1, [sp]
 80029ae:	2140      	movs	r1, #64	; 0x40
 80029b0:	488e      	ldr	r0, [pc, #568]	; (8002bec <main+0xdfc>)
 80029b2:	f00b f94d 	bl	800dc50 <sniprintf>
 80029b6:	e71a      	b.n	80027ee <main+0x9fe>
			  integral_shutdown = (float)4095;
 80029b8:	4b8d      	ldr	r3, [pc, #564]	; (8002bf0 <main+0xe00>)
 80029ba:	9305      	str	r3, [sp, #20]
 80029bc:	e66a      	b.n	8002694 <main+0x8a4>
		ADC1->HTR = 0;
 80029be:	4b8d      	ldr	r3, [pc, #564]	; (8002bf4 <main+0xe04>)
 80029c0:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
 80029c4:	e510      	b.n	80023e8 <main+0x5f8>
				snprintf((char*)MSG, 64, "ERROR: INVALID COMMAND\n");
 80029c6:	4f89      	ldr	r7, [pc, #548]	; (8002bec <main+0xdfc>)
 80029c8:	f8df c22c 	ldr.w	ip, [pc, #556]	; 8002bf8 <main+0xe08>
 80029cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80029d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80029d2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80029d6:	e887 0003 	stmia.w	r7, {r0, r1}
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 80029da:	f1a7 0010 	sub.w	r0, r7, #16
 80029de:	f7fd fbcf 	bl	8000180 <strlen>
 80029e2:	4601      	mov	r1, r0
 80029e4:	f1a7 0010 	sub.w	r0, r7, #16
 80029e8:	b289      	uxth	r1, r1
 80029ea:	f00a fa6f 	bl	800cecc <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 80029ee:	2240      	movs	r2, #64	; 0x40
 80029f0:	2100      	movs	r1, #0
 80029f2:	f1a7 0010 	sub.w	r0, r7, #16
 80029f6:	f00a fcc3 	bl	800d380 <memset>
 80029fa:	e550      	b.n	800249e <main+0x6ae>
				D = (float)atof((char*)notacircbuff[tempiter] + 10);
 80029fc:	f106 000a 	add.w	r0, r6, #10
 8002a00:	f00a fc90 	bl	800d324 <atof>
 8002a04:	f7fe f878 	bl	8000af8 <__aeabi_d2f>
 8002a08:	4b7c      	ldr	r3, [pc, #496]	; (8002bfc <main+0xe0c>)
 8002a0a:	6018      	str	r0, [r3, #0]
				snprintf((char*)MSG, 64, "\n");
 8002a0c:	230a      	movs	r3, #10
 8002a0e:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002a10:	e6ed      	b.n	80027ee <main+0x9fe>
			  tmpv1 = 0;
 8002a12:	462f      	mov	r7, r5
 8002a14:	e67c      	b.n	8002710 <main+0x920>
			  tmpv1 = 4095;
 8002a16:	4f76      	ldr	r7, [pc, #472]	; (8002bf0 <main+0xe00>)
 8002a18:	e67a      	b.n	8002710 <main+0x920>
				I = (float)atof((char*)notacircbuff[tempiter] + 10);
 8002a1a:	f106 000a 	add.w	r0, r6, #10
 8002a1e:	f00a fc81 	bl	800d324 <atof>
 8002a22:	f7fe f869 	bl	8000af8 <__aeabi_d2f>
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <main+0xe10>)
 8002a28:	6018      	str	r0, [r3, #0]
				snprintf((char*)MSG, 64, "\n");
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002a2e:	e6de      	b.n	80027ee <main+0x9fe>
				P = (float)atof((char*)notacircbuff[tempiter] + 10);
 8002a30:	f106 000a 	add.w	r0, r6, #10
 8002a34:	f00a fc76 	bl	800d324 <atof>
 8002a38:	f7fe f85e 	bl	8000af8 <__aeabi_d2f>
 8002a3c:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <main+0xe14>)
 8002a3e:	6018      	str	r0, [r3, #0]
				snprintf((char*)MSG, 64, "\n");
 8002a40:	230a      	movs	r3, #10
 8002a42:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, strlen((char*)MSG));
 8002a44:	e51e      	b.n	8002484 <main+0x694>
				CDC_Transmit_FS((uint8_t*)"\n", strlen("\n"));
 8002a46:	2101      	movs	r1, #1
 8002a48:	486f      	ldr	r0, [pc, #444]	; (8002c08 <main+0xe18>)
 8002a4a:	f00a fa3f 	bl	800cecc <CDC_Transmit_FS>
 8002a4e:	e526      	b.n	800249e <main+0x6ae>
				CDC_Transmit_FS((uint8_t*)"493 Lab Power Supply\n", strlen("493 Lab Power Supply\n"));
 8002a50:	2115      	movs	r1, #21
 8002a52:	486e      	ldr	r0, [pc, #440]	; (8002c0c <main+0xe1c>)
 8002a54:	f00a fa3a 	bl	800cecc <CDC_Transmit_FS>
 8002a58:	e521      	b.n	800249e <main+0x6ae>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002a5a:	f106 0809 	add.w	r8, r6, #9
 8002a5e:	4640      	mov	r0, r8
 8002a60:	f00a fc60 	bl	800d324 <atof>
 8002a64:	2200      	movs	r2, #0
 8002a66:	2300      	movs	r3, #0
 8002a68:	f7fd ffd4 	bl	8000a14 <__aeabi_dcmpge>
 8002a6c:	b148      	cbz	r0, 8002a82 <main+0xc92>
 8002a6e:	4640      	mov	r0, r8
 8002a70:	f00a fc58 	bl	800d324 <atof>
 8002a74:	a34a      	add	r3, pc, #296	; (adr r3, 8002ba0 <main+0xdb0>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd ffc1 	bl	8000a00 <__aeabi_dcmple>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d144      	bne.n	8002b0c <main+0xd1c>
					snprintf((char*)MSG, 64, "ERROR: INVALID NUMBER\n");
 8002a82:	f8df c168 	ldr.w	ip, [pc, #360]	; 8002bec <main+0xdfc>
 8002a86:	4f62      	ldr	r7, [pc, #392]	; (8002c10 <main+0xe20>)
 8002a88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a8e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8002a92:	f8ac 1004 	strh.w	r1, [ip, #4]
 8002a96:	0c09      	lsrs	r1, r1, #16
 8002a98:	f8cc 0000 	str.w	r0, [ip]
 8002a9c:	f88c 1006 	strb.w	r1, [ip, #6]
 8002aa0:	e4f0      	b.n	8002484 <main+0x694>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002aa2:	f106 0809 	add.w	r8, r6, #9
 8002aa6:	4640      	mov	r0, r8
 8002aa8:	f00a fc3c 	bl	800d324 <atof>
 8002aac:	2200      	movs	r2, #0
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f7fd ffb0 	bl	8000a14 <__aeabi_dcmpge>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d0e4      	beq.n	8002a82 <main+0xc92>
 8002ab8:	4640      	mov	r0, r8
 8002aba:	f00a fc33 	bl	800d324 <atof>
 8002abe:	a338      	add	r3, pc, #224	; (adr r3, 8002ba0 <main+0xdb0>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd ff9c 	bl	8000a00 <__aeabi_dcmple>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d0da      	beq.n	8002a82 <main+0xc92>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002acc:	4640      	mov	r0, r8
 8002ace:	f00a fc29 	bl	800d324 <atof>
					uint8_t tempbuff[8] = {0};
 8002ad2:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002ad6:	f7fe f80f 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002ada:	f7fd fcbd 	bl	8000458 <__aeabi_f2d>
 8002ade:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <main+0xe24>)
 8002ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8002ae4:	2108      	movs	r1, #8
 8002ae6:	a810      	add	r0, sp, #64	; 0x40
 8002ae8:	f00b f8b2 	bl	800dc50 <sniprintf>
					amp_set_aux = (float)atof((char*)tempbuff);
 8002aec:	a810      	add	r0, sp, #64	; 0x40
 8002aee:	f00a fc19 	bl	800d324 <atof>
 8002af2:	f7fe f801 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002af6:	230a      	movs	r3, #10
					amp_set_aux = (float)atof((char*)tempbuff);
 8002af8:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <main+0xe28>)
					snprintf((char*)MSG, 64, "\n");
 8002afa:	8023      	strh	r3, [r4, #0]
					amp_set_aux = (float)atof((char*)tempbuff);
 8002afc:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002afe:	e4c1      	b.n	8002484 <main+0x694>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) <= 0.80)){
 8002b00:	f106 080c 	add.w	r8, r6, #12
 8002b04:	e7cf      	b.n	8002aa6 <main+0xcb6>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) <= 0.80)){
 8002b06:	f106 080c 	add.w	r8, r6, #12
 8002b0a:	e7a8      	b.n	8002a5e <main+0xc6e>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	f00a fc09 	bl	800d324 <atof>
					uint8_t tempbuff[8] = {0};
 8002b12:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b16:	f7fd ffef 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b1a:	f7fd fc9d 	bl	8000458 <__aeabi_f2d>
					amp_set_main_old = amp_set_main;
 8002b1e:	4f3f      	ldr	r7, [pc, #252]	; (8002c1c <main+0xe2c>)
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b20:	e9cd 0100 	strd	r0, r1, [sp]
 8002b24:	4a3b      	ldr	r2, [pc, #236]	; (8002c14 <main+0xe24>)
 8002b26:	2108      	movs	r1, #8
 8002b28:	a810      	add	r0, sp, #64	; 0x40
 8002b2a:	f00b f891 	bl	800dc50 <sniprintf>
					amp_set_main_old = amp_set_main;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	4a3b      	ldr	r2, [pc, #236]	; (8002c20 <main+0xe30>)
 8002b32:	6013      	str	r3, [r2, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002b34:	a810      	add	r0, sp, #64	; 0x40
 8002b36:	f00a fbf5 	bl	800d324 <atof>
 8002b3a:	f7fd ffdd 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002b3e:	230a      	movs	r3, #10
 8002b40:	8023      	strh	r3, [r4, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002b42:	6038      	str	r0, [r7, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002b44:	e49e      	b.n	8002484 <main+0x694>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) <= 12.00)){
 8002b46:	f106 0809 	add.w	r8, r6, #9
 8002b4a:	4640      	mov	r0, r8
 8002b4c:	f00a fbea 	bl	800d324 <atof>
 8002b50:	2200      	movs	r2, #0
 8002b52:	2300      	movs	r3, #0
 8002b54:	f7fd ff5e 	bl	8000a14 <__aeabi_dcmpge>
 8002b58:	2800      	cmp	r0, #0
 8002b5a:	d092      	beq.n	8002a82 <main+0xc92>
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	f00a fbe1 	bl	800d324 <atof>
 8002b62:	2200      	movs	r2, #0
 8002b64:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <main+0xe34>)
 8002b66:	f7fd ff4b 	bl	8000a00 <__aeabi_dcmple>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d089      	beq.n	8002a82 <main+0xc92>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b6e:	4640      	mov	r0, r8
 8002b70:	f00a fbd8 	bl	800d324 <atof>
					uint8_t tempbuff[8] = {0};
 8002b74:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b78:	f7fd ffbe 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002b7c:	f7fd fc6c 	bl	8000458 <__aeabi_f2d>
					volt_set_main_old = volt_set_main;
 8002b80:	4f29      	ldr	r7, [pc, #164]	; (8002c28 <main+0xe38>)
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002b82:	e9cd 0100 	strd	r0, r1, [sp]
 8002b86:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <main+0xe3c>)
 8002b88:	2108      	movs	r1, #8
 8002b8a:	a810      	add	r0, sp, #64	; 0x40
 8002b8c:	f00b f860 	bl	800dc50 <sniprintf>
					volt_set_main_old = volt_set_main;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <main+0xe40>)
 8002b94:	e7cd      	b.n	8002b32 <main+0xd42>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) <= 12.00)){
 8002b96:	f106 080c 	add.w	r8, r6, #12
 8002b9a:	e7d6      	b.n	8002b4a <main+0xd5a>
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	9999999a 	.word	0x9999999a
 8002ba4:	3fe99999 	.word	0x3fe99999
 8002ba8:	08011890 	.word	0x08011890
 8002bac:	080118c0 	.word	0x080118c0
 8002bb0:	080118cc 	.word	0x080118cc
 8002bb4:	080118dc 	.word	0x080118dc
 8002bb8:	080118e8 	.word	0x080118e8
 8002bbc:	08011900 	.word	0x08011900
 8002bc0:	0801190c 	.word	0x0801190c
 8002bc4:	0801191c 	.word	0x0801191c
 8002bc8:	08011928 	.word	0x08011928
 8002bcc:	08011948 	.word	0x08011948
 8002bd0:	08011950 	.word	0x08011950
 8002bd4:	0801195c 	.word	0x0801195c
 8002bd8:	08011968 	.word	0x08011968
 8002bdc:	08011974 	.word	0x08011974
 8002be0:	20000964 	.word	0x20000964
 8002be4:	200009b0 	.word	0x200009b0
 8002be8:	08011788 	.word	0x08011788
 8002bec:	20000390 	.word	0x20000390
 8002bf0:	457ff000 	.word	0x457ff000
 8002bf4:	40012400 	.word	0x40012400
 8002bf8:	08011984 	.word	0x08011984
 8002bfc:	2000038c 	.word	0x2000038c
 8002c00:	20000000 	.word	0x20000000
 8002c04:	20000004 	.word	0x20000004
 8002c08:	08011944 	.word	0x08011944
 8002c0c:	08011930 	.word	0x08011930
 8002c10:	080118a8 	.word	0x080118a8
 8002c14:	080118f8 	.word	0x080118f8
 8002c18:	200003e8 	.word	0x200003e8
 8002c1c:	200003ec 	.word	0x200003ec
 8002c20:	200003f0 	.word	0x200003f0
 8002c24:	40280000 	.word	0x40280000
 8002c28:	20000a7c 	.word	0x20000a7c
 8002c2c:	080118a0 	.word	0x080118a0
 8002c30:	20000a80 	.word	0x20000a80
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002c34:	f106 0809 	add.w	r8, r6, #9
 8002c38:	4640      	mov	r0, r8
 8002c3a:	f00a fb73 	bl	800d324 <atof>
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2300      	movs	r3, #0
 8002c42:	f7fd fee7 	bl	8000a14 <__aeabi_dcmpge>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f43f af1b 	beq.w	8002a82 <main+0xc92>
 8002c4c:	4640      	mov	r0, r8
 8002c4e:	f00a fb69 	bl	800d324 <atof>
 8002c52:	2200      	movs	r2, #0
 8002c54:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <main+0xf08>)
 8002c56:	f7fd fed3 	bl	8000a00 <__aeabi_dcmple>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	f43f af11 	beq.w	8002a82 <main+0xc92>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002c60:	4640      	mov	r0, r8
 8002c62:	f00a fb5f 	bl	800d324 <atof>
					uint8_t tempbuff[8] = {0};
 8002c66:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002c6a:	f7fd ff45 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002c6e:	f7fd fbf3 	bl	8000458 <__aeabi_f2d>
 8002c72:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <main+0xf0c>)
 8002c74:	e9cd 0100 	strd	r0, r1, [sp]
 8002c78:	2108      	movs	r1, #8
 8002c7a:	a810      	add	r0, sp, #64	; 0x40
 8002c7c:	f00a ffe8 	bl	800dc50 <sniprintf>
					volt_set_aux = (float)atof((char*)tempbuff);
 8002c80:	a810      	add	r0, sp, #64	; 0x40
 8002c82:	f00a fb4f 	bl	800d324 <atof>
 8002c86:	f7fd ff37 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002c8a:	230a      	movs	r3, #10
					volt_set_aux = (float)atof((char*)tempbuff);
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <main+0xf10>)
					snprintf((char*)MSG, 64, "\n");
 8002c8e:	8023      	strh	r3, [r4, #0]
					volt_set_aux = (float)atof((char*)tempbuff);
 8002c90:	6010      	str	r0, [r2, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002c92:	f7ff bbf7 	b.w	8002484 <main+0x694>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) <= 12.00)){
 8002c96:	f106 070c 	add.w	r7, r6, #12
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f00a fb42 	bl	800d324 <atof>
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f7fd feb6 	bl	8000a14 <__aeabi_dcmpge>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	f43f aeea 	beq.w	8002a82 <main+0xc92>
 8002cae:	4638      	mov	r0, r7
 8002cb0:	f00a fb38 	bl	800d324 <atof>
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <main+0xf08>)
 8002cb8:	f7fd fea2 	bl	8000a00 <__aeabi_dcmple>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	f43f aee0 	beq.w	8002a82 <main+0xc92>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 12);
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f00a fb2e 	bl	800d324 <atof>
					uint8_t tempbuff[8] = {0};
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002cce:	e7cc      	b.n	8002c6a <main+0xe7a>
		ADC1->HTR = 4095;
 8002cd0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <main+0xf14>)
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8002cd8:	f7ff bb86 	b.w	80023e8 <main+0x5f8>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	4809      	ldr	r0, [pc, #36]	; (8002d08 <main+0xf18>)
 8002ce2:	f006 f9b5 	bl	8009050 <HAL_GPIO_WritePin>
 8002ce6:	f7ff bb41 	b.w	800236c <main+0x57c>
			  tmpv1 = 1;
 8002cea:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8002cee:	f7ff bb24 	b.w	800233a <main+0x54a>
			  tmpv1 = 4094;
 8002cf2:	4e06      	ldr	r6, [pc, #24]	; (8002d0c <main+0xf1c>)
 8002cf4:	f7ff bb21 	b.w	800233a <main+0x54a>
 8002cf8:	40280000 	.word	0x40280000
 8002cfc:	080118a0 	.word	0x080118a0
 8002d00:	20000a78 	.word	0x20000a78
 8002d04:	40012400 	.word	0x40012400
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	457fe000 	.word	0x457fe000

08002d10 <lcd_psu_init>:
void lcd_psu_init(void){
 8002d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d14:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d16:	49bb      	ldr	r1, [pc, #748]	; (8003004 <lcd_psu_init+0x2f4>)
void lcd_psu_init(void){
 8002d18:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d1a:	48bb      	ldr	r0, [pc, #748]	; (8003008 <lcd_psu_init+0x2f8>)
 8002d1c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d1e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d20:	aa03      	add	r2, sp, #12
 8002d22:	214e      	movs	r1, #78	; 0x4e
 8002d24:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d26:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d28:	f006 fa74 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d2c:	2356      	movs	r3, #86	; 0x56
 8002d2e:	4db7      	ldr	r5, [pc, #732]	; (800300c <lcd_psu_init+0x2fc>)
	data_l = ((data<<4)&0xf0);
 8002d30:	011a      	lsls	r2, r3, #4
 8002d32:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d38:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d3c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d40:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d44:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d48:	2304      	movs	r3, #4
 8002d4a:	214e      	movs	r1, #78	; 0x4e
 8002d4c:	4638      	mov	r0, r7
 8002d4e:	aa03      	add	r2, sp, #12
 8002d50:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d52:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d56:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d5a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d5e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d62:	f006 fa57 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d66:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e0      	bne.n	8002d30 <lcd_psu_init+0x20>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d6e:	49a8      	ldr	r1, [pc, #672]	; (8003010 <lcd_psu_init+0x300>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d70:	2304      	movs	r3, #4
 8002d72:	aa03      	add	r2, sp, #12
 8002d74:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d76:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d78:	48a3      	ldr	r0, [pc, #652]	; (8003008 <lcd_psu_init+0x2f8>)
 8002d7a:	214e      	movs	r1, #78	; 0x4e
 8002d7c:	f006 fa4a 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d80:	49a4      	ldr	r1, [pc, #656]	; (8003014 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d82:	2304      	movs	r3, #4
 8002d84:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d86:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d88:	489f      	ldr	r0, [pc, #636]	; (8003008 <lcd_psu_init+0x2f8>)
 8002d8a:	214e      	movs	r1, #78	; 0x4e
 8002d8c:	aa03      	add	r2, sp, #12
 8002d8e:	f006 fa41 	bl	8009214 <HAL_I2C_Master_Transmit>
 8002d92:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002d94:	2356      	movs	r3, #86	; 0x56
 8002d96:	4da0      	ldr	r5, [pc, #640]	; (8003018 <lcd_psu_init+0x308>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d98:	4f9b      	ldr	r7, [pc, #620]	; (8003008 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002d9a:	011a      	lsls	r2, r3, #4
 8002d9c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002da2:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002da6:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002daa:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dae:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db2:	2304      	movs	r3, #4
 8002db4:	214e      	movs	r1, #78	; 0x4e
 8002db6:	4638      	mov	r0, r7
 8002db8:	aa03      	add	r2, sp, #12
 8002dba:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dbc:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dc0:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dc4:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dc8:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dcc:	f006 fa22 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002dd0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e0      	bne.n	8002d9a <lcd_psu_init+0x8a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dd8:	4990      	ldr	r1, [pc, #576]	; (800301c <lcd_psu_init+0x30c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dda:	2304      	movs	r3, #4
 8002ddc:	aa03      	add	r2, sp, #12
 8002dde:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002de0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002de2:	4889      	ldr	r0, [pc, #548]	; (8003008 <lcd_psu_init+0x2f8>)
 8002de4:	214e      	movs	r1, #78	; 0x4e
 8002de6:	f006 fa15 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dea:	498d      	ldr	r1, [pc, #564]	; (8003020 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dec:	2304      	movs	r3, #4
 8002dee:	aa03      	add	r2, sp, #12
 8002df0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002df2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df4:	4884      	ldr	r0, [pc, #528]	; (8003008 <lcd_psu_init+0x2f8>)
 8002df6:	214e      	movs	r1, #78	; 0x4e
 8002df8:	f006 fa0c 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dfc:	4989      	ldr	r1, [pc, #548]	; (8003024 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dfe:	2304      	movs	r3, #4
 8002e00:	aa03      	add	r2, sp, #12
 8002e02:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e04:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e06:	4880      	ldr	r0, [pc, #512]	; (8003008 <lcd_psu_init+0x2f8>)
 8002e08:	214e      	movs	r1, #78	; 0x4e
 8002e0a:	f006 fa03 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e0e:	4986      	ldr	r1, [pc, #536]	; (8003028 <lcd_psu_init+0x318>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e10:	2304      	movs	r3, #4
 8002e12:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e14:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e16:	487c      	ldr	r0, [pc, #496]	; (8003008 <lcd_psu_init+0x2f8>)
 8002e18:	214e      	movs	r1, #78	; 0x4e
 8002e1a:	aa03      	add	r2, sp, #12
 8002e1c:	f006 f9fa 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e20:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e22:	2341      	movs	r3, #65	; 0x41
 8002e24:	4d81      	ldr	r5, [pc, #516]	; (800302c <lcd_psu_init+0x31c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e26:	4f78      	ldr	r7, [pc, #480]	; (8003008 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002e28:	011a      	lsls	r2, r3, #4
 8002e2a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e30:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e34:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e38:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e3c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e40:	2304      	movs	r3, #4
 8002e42:	214e      	movs	r1, #78	; 0x4e
 8002e44:	4638      	mov	r0, r7
 8002e46:	aa03      	add	r2, sp, #12
 8002e48:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e4a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e4e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e52:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e56:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e5a:	f006 f9db 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e5e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e0      	bne.n	8002e28 <lcd_psu_init+0x118>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e66:	4972      	ldr	r1, [pc, #456]	; (8003030 <lcd_psu_init+0x320>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e68:	2304      	movs	r3, #4
 8002e6a:	aa03      	add	r2, sp, #12
 8002e6c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e6e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e70:	4865      	ldr	r0, [pc, #404]	; (8003008 <lcd_psu_init+0x2f8>)
 8002e72:	214e      	movs	r1, #78	; 0x4e
 8002e74:	f006 f9ce 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e78:	4966      	ldr	r1, [pc, #408]	; (8003014 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e7e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e80:	4861      	ldr	r0, [pc, #388]	; (8003008 <lcd_psu_init+0x2f8>)
 8002e82:	214e      	movs	r1, #78	; 0x4e
 8002e84:	aa03      	add	r2, sp, #12
 8002e86:	f006 f9c5 	bl	8009214 <HAL_I2C_Master_Transmit>
 8002e8a:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e8c:	2341      	movs	r3, #65	; 0x41
 8002e8e:	4d69      	ldr	r5, [pc, #420]	; (8003034 <lcd_psu_init+0x324>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e90:	4f5d      	ldr	r7, [pc, #372]	; (8003008 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002e92:	011a      	lsls	r2, r3, #4
 8002e94:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e9a:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e9e:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ea2:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ea6:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eaa:	2304      	movs	r3, #4
 8002eac:	214e      	movs	r1, #78	; 0x4e
 8002eae:	4638      	mov	r0, r7
 8002eb0:	aa03      	add	r2, sp, #12
 8002eb2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eb4:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002eb8:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ebc:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ec0:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ec4:	f006 f9a6 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ec8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e0      	bne.n	8002e92 <lcd_psu_init+0x182>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ed0:	4959      	ldr	r1, [pc, #356]	; (8003038 <lcd_psu_init+0x328>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	aa03      	add	r2, sp, #12
 8002ed6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ed8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eda:	484b      	ldr	r0, [pc, #300]	; (8003008 <lcd_psu_init+0x2f8>)
 8002edc:	214e      	movs	r1, #78	; 0x4e
 8002ede:	f006 f999 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ee2:	494f      	ldr	r1, [pc, #316]	; (8003020 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	aa03      	add	r2, sp, #12
 8002ee8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eea:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eec:	4846      	ldr	r0, [pc, #280]	; (8003008 <lcd_psu_init+0x2f8>)
 8002eee:	214e      	movs	r1, #78	; 0x4e
 8002ef0:	f006 f990 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ef4:	494b      	ldr	r1, [pc, #300]	; (8003024 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	aa03      	add	r2, sp, #12
 8002efa:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002efc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002efe:	4842      	ldr	r0, [pc, #264]	; (8003008 <lcd_psu_init+0x2f8>)
 8002f00:	214e      	movs	r1, #78	; 0x4e
 8002f02:	f006 f987 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f06:	494d      	ldr	r1, [pc, #308]	; (800303c <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f08:	2304      	movs	r3, #4
 8002f0a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f0c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f0e:	483e      	ldr	r0, [pc, #248]	; (8003008 <lcd_psu_init+0x2f8>)
 8002f10:	214e      	movs	r1, #78	; 0x4e
 8002f12:	aa03      	add	r2, sp, #12
 8002f14:	f006 f97e 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f18:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f1a:	2356      	movs	r3, #86	; 0x56
 8002f1c:	4d48      	ldr	r5, [pc, #288]	; (8003040 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f1e:	4f3a      	ldr	r7, [pc, #232]	; (8003008 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002f20:	011a      	lsls	r2, r3, #4
 8002f22:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f28:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f2c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f30:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f34:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f38:	2304      	movs	r3, #4
 8002f3a:	214e      	movs	r1, #78	; 0x4e
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	aa03      	add	r2, sp, #12
 8002f40:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f42:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f46:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f4a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f4e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f52:	f006 f95f 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f56:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e0      	bne.n	8002f20 <lcd_psu_init+0x210>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f5e:	4939      	ldr	r1, [pc, #228]	; (8003044 <lcd_psu_init+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f60:	2304      	movs	r3, #4
 8002f62:	aa03      	add	r2, sp, #12
 8002f64:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f66:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f68:	4827      	ldr	r0, [pc, #156]	; (8003008 <lcd_psu_init+0x2f8>)
 8002f6a:	214e      	movs	r1, #78	; 0x4e
 8002f6c:	f006 f952 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f70:	4928      	ldr	r1, [pc, #160]	; (8003014 <lcd_psu_init+0x304>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f72:	2304      	movs	r3, #4
 8002f74:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f76:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f78:	4823      	ldr	r0, [pc, #140]	; (8003008 <lcd_psu_init+0x2f8>)
 8002f7a:	214e      	movs	r1, #78	; 0x4e
 8002f7c:	aa03      	add	r2, sp, #12
 8002f7e:	f006 f949 	bl	8009214 <HAL_I2C_Master_Transmit>
 8002f82:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f84:	2356      	movs	r3, #86	; 0x56
 8002f86:	4d30      	ldr	r5, [pc, #192]	; (8003048 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f88:	4f1f      	ldr	r7, [pc, #124]	; (8003008 <lcd_psu_init+0x2f8>)
	data_l = ((data<<4)&0xf0);
 8002f8a:	011a      	lsls	r2, r3, #4
 8002f8c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f92:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f96:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f9a:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f9e:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	214e      	movs	r1, #78	; 0x4e
 8002fa6:	4638      	mov	r0, r7
 8002fa8:	aa03      	add	r2, sp, #12
 8002faa:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fac:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fb0:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fb4:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fb8:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fbc:	f006 f92a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fc0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e0      	bne.n	8002f8a <lcd_psu_init+0x27a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fc8:	4920      	ldr	r1, [pc, #128]	; (800304c <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fca:	2304      	movs	r3, #4
 8002fcc:	aa03      	add	r2, sp, #12
 8002fce:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002fd0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <lcd_psu_init+0x2f8>)
 8002fd4:	214e      	movs	r1, #78	; 0x4e
 8002fd6:	f006 f91d 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fda:	4911      	ldr	r1, [pc, #68]	; (8003020 <lcd_psu_init+0x310>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fdc:	2304      	movs	r3, #4
 8002fde:	aa03      	add	r2, sp, #12
 8002fe0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fe2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe4:	4808      	ldr	r0, [pc, #32]	; (8003008 <lcd_psu_init+0x2f8>)
 8002fe6:	214e      	movs	r1, #78	; 0x4e
 8002fe8:	f006 f914 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fec:	490d      	ldr	r1, [pc, #52]	; (8003024 <lcd_psu_init+0x314>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fee:	2304      	movs	r3, #4
 8002ff0:	aa03      	add	r2, sp, #12
 8002ff2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ff4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ff6:	4804      	ldr	r0, [pc, #16]	; (8003008 <lcd_psu_init+0x2f8>)
 8002ff8:	214e      	movs	r1, #78	; 0x4e
 8002ffa:	f006 f90b 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ffe:	4914      	ldr	r1, [pc, #80]	; (8003050 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003000:	2304      	movs	r3, #4
 8003002:	e027      	b.n	8003054 <lcd_psu_init+0x344>
 8003004:	080c888c 	.word	0x080c888c
 8003008:	20000540 	.word	0x20000540
 800300c:	0801199c 	.word	0x0801199c
 8003010:	989c888c 	.word	0x989c888c
 8003014:	191d090d 	.word	0x191d090d
 8003018:	080119a0 	.word	0x080119a0
 800301c:	c8cc888c 	.word	0xc8cc888c
 8003020:	090d090d 	.word	0x090d090d
 8003024:	a9ad393d 	.word	0xa9ad393d
 8003028:	080cc8cc 	.word	0x080cc8cc
 800302c:	080119a4 	.word	0x080119a4
 8003030:	989cc8cc 	.word	0x989cc8cc
 8003034:	080119a8 	.word	0x080119a8
 8003038:	c8ccc8cc 	.word	0xc8ccc8cc
 800303c:	484c989c 	.word	0x484c989c
 8003040:	080119ac 	.word	0x080119ac
 8003044:	d8dc989c 	.word	0xd8dc989c
 8003048:	080119b0 	.word	0x080119b0
 800304c:	080ca8ac 	.word	0x080ca8ac
 8003050:	484cd8dc 	.word	0x484cd8dc
 8003054:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003056:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003058:	483d      	ldr	r0, [pc, #244]	; (8003150 <lcd_psu_init+0x440>)
 800305a:	214e      	movs	r1, #78	; 0x4e
 800305c:	aa03      	add	r2, sp, #12
 800305e:	f006 f8d9 	bl	8009214 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003062:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8003064:	2341      	movs	r3, #65	; 0x41
 8003066:	4d3b      	ldr	r5, [pc, #236]	; (8003154 <lcd_psu_init+0x444>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003068:	4f39      	ldr	r7, [pc, #228]	; (8003150 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 800306a:	011a      	lsls	r2, r3, #4
 800306c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800306e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003072:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003076:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800307a:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800307e:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003082:	2304      	movs	r3, #4
 8003084:	214e      	movs	r1, #78	; 0x4e
 8003086:	4638      	mov	r0, r7
 8003088:	aa03      	add	r2, sp, #12
 800308a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800308c:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003090:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003094:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003098:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800309c:	f006 f8ba 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e0      	bne.n	800306a <lcd_psu_init+0x35a>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030a8:	492b      	ldr	r1, [pc, #172]	; (8003158 <lcd_psu_init+0x448>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030aa:	2304      	movs	r3, #4
 80030ac:	aa03      	add	r2, sp, #12
 80030ae:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030b0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030b2:	4827      	ldr	r0, [pc, #156]	; (8003150 <lcd_psu_init+0x440>)
 80030b4:	214e      	movs	r1, #78	; 0x4e
 80030b6:	f006 f8ad 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030ba:	4928      	ldr	r1, [pc, #160]	; (800315c <lcd_psu_init+0x44c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030bc:	2304      	movs	r3, #4
 80030be:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030c0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030c2:	4823      	ldr	r0, [pc, #140]	; (8003150 <lcd_psu_init+0x440>)
 80030c4:	214e      	movs	r1, #78	; 0x4e
 80030c6:	aa03      	add	r2, sp, #12
 80030c8:	f006 f8a4 	bl	8009214 <HAL_I2C_Master_Transmit>
 80030cc:	2564      	movs	r5, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80030ce:	2341      	movs	r3, #65	; 0x41
 80030d0:	4c23      	ldr	r4, [pc, #140]	; (8003160 <lcd_psu_init+0x450>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030d2:	4e1f      	ldr	r6, [pc, #124]	; (8003150 <lcd_psu_init+0x440>)
	data_l = ((data<<4)&0xf0);
 80030d4:	011a      	lsls	r2, r3, #4
 80030d6:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80030d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030dc:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030e0:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030e4:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030e8:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030ec:	2304      	movs	r3, #4
 80030ee:	214e      	movs	r1, #78	; 0x4e
 80030f0:	4630      	mov	r0, r6
 80030f2:	aa03      	add	r2, sp, #12
 80030f4:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030f6:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030fa:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030fe:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003102:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003106:	f006 f885 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800310a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e0      	bne.n	80030d4 <lcd_psu_init+0x3c4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003112:	4914      	ldr	r1, [pc, #80]	; (8003164 <lcd_psu_init+0x454>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003114:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003116:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003118:	2304      	movs	r3, #4
 800311a:	214e      	movs	r1, #78	; 0x4e
 800311c:	9500      	str	r5, [sp, #0]
 800311e:	480c      	ldr	r0, [pc, #48]	; (8003150 <lcd_psu_init+0x440>)
 8003120:	f006 f878 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003124:	4910      	ldr	r1, [pc, #64]	; (8003168 <lcd_psu_init+0x458>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003126:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003128:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800312a:	2304      	movs	r3, #4
 800312c:	214e      	movs	r1, #78	; 0x4e
 800312e:	9500      	str	r5, [sp, #0]
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <lcd_psu_init+0x440>)
 8003132:	f006 f86f 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003136:	480d      	ldr	r0, [pc, #52]	; (800316c <lcd_psu_init+0x45c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003138:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800313a:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800313c:	214e      	movs	r1, #78	; 0x4e
 800313e:	aa03      	add	r2, sp, #12
 8003140:	9500      	str	r5, [sp, #0]
 8003142:	4803      	ldr	r0, [pc, #12]	; (8003150 <lcd_psu_init+0x440>)
 8003144:	f006 f866 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8003148:	b004      	add	sp, #16
 800314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800314e:	bf00      	nop
 8003150:	20000540 	.word	0x20000540
 8003154:	080119b4 	.word	0x080119b4
 8003158:	d8dcd8dc 	.word	0xd8dcd8dc
 800315c:	191d090d 	.word	0x191d090d
 8003160:	080119b8 	.word	0x080119b8
 8003164:	080ce8ec 	.word	0x080ce8ec
 8003168:	090d090d 	.word	0x090d090d
 800316c:	a9ad393d 	.word	0xa9ad393d

08003170 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003172:	4605      	mov	r5, r0
 8003174:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 8003176:	4608      	mov	r0, r1
 8003178:	f7fd f96e 	bl	8000458 <__aeabi_f2d>
 800317c:	4606      	mov	r6, r0
 800317e:	460f      	mov	r7, r1
 8003180:	4a9a      	ldr	r2, [pc, #616]	; (80033ec <lcd_update_voltage+0x27c>)
 8003182:	2106      	movs	r1, #6
 8003184:	e9cd 6700 	strd	r6, r7, [sp]
 8003188:	a804      	add	r0, sp, #16
 800318a:	f00a fd61 	bl	800dc50 <sniprintf>
	if(channel == 1){
 800318e:	2d01      	cmp	r5, #1
 8003190:	d009      	beq.n	80031a6 <lcd_update_voltage+0x36>
	else if(channel == 2){
 8003192:	2d02      	cmp	r5, #2
 8003194:	f000 80cb 	beq.w	800332e <lcd_update_voltage+0x1be>
	else if(channel == 3){
 8003198:	2d03      	cmp	r5, #3
 800319a:	f000 8135 	beq.w	8003408 <lcd_update_voltage+0x298>
	else if(channel == 4){
 800319e:	2d04      	cmp	r5, #4
 80031a0:	d068      	beq.n	8003274 <lcd_update_voltage+0x104>
}
 80031a2:	b007      	add	sp, #28
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031a6:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031a8:	4a91      	ldr	r2, [pc, #580]	; (80033f0 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031aa:	4892      	ldr	r0, [pc, #584]	; (80033f4 <lcd_update_voltage+0x284>)
 80031ac:	ac03      	add	r4, sp, #12
 80031ae:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031b0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031b2:	214e      	movs	r1, #78	; 0x4e
 80031b4:	4622      	mov	r2, r4
 80031b6:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031b8:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031ba:	f006 f82b 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031be:	2320      	movs	r3, #32
 80031c0:	4d8d      	ldr	r5, [pc, #564]	; (80033f8 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80031c2:	011a      	lsls	r2, r3, #4
 80031c4:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80031c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031ca:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031ce:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031d2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031d6:	f043 0309 	orr.w	r3, r3, #9
 80031da:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031de:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031e2:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031e4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031e8:	4622      	mov	r2, r4
 80031ea:	214e      	movs	r1, #78	; 0x4e
 80031ec:	4638      	mov	r0, r7
 80031ee:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031f0:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031f4:	f006 f80e 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031f8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e0      	bne.n	80031c2 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003200:	4a7b      	ldr	r2, [pc, #492]	; (80033f0 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003202:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003204:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003206:	214e      	movs	r1, #78	; 0x4e
 8003208:	4622      	mov	r2, r4
 800320a:	487a      	ldr	r0, [pc, #488]	; (80033f4 <lcd_update_voltage+0x284>)
 800320c:	9600      	str	r6, [sp, #0]
 800320e:	f006 f801 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003212:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003216:	b30b      	cbz	r3, 800325c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003218:	2764      	movs	r7, #100	; 0x64
 800321a:	4e76      	ldr	r6, [pc, #472]	; (80033f4 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 800321c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800321e:	011a      	lsls	r2, r3, #4
 8003220:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003226:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800322a:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800322e:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003232:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003236:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003238:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800323c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003240:	4622      	mov	r2, r4
 8003242:	214e      	movs	r1, #78	; 0x4e
 8003244:	4630      	mov	r0, r6
 8003246:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003248:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800324c:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003250:	f005 ffe0 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003254:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e0      	bne.n	800321e <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800325c:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800325e:	4867      	ldr	r0, [pc, #412]	; (80033fc <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003260:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003262:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003264:	4622      	mov	r2, r4
 8003266:	214e      	movs	r1, #78	; 0x4e
 8003268:	9500      	str	r5, [sp, #0]
 800326a:	4862      	ldr	r0, [pc, #392]	; (80033f4 <lcd_update_voltage+0x284>)
 800326c:	f005 ffd2 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8003270:	b007      	add	sp, #28
 8003272:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003274:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003276:	4a62      	ldr	r2, [pc, #392]	; (8003400 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003278:	485e      	ldr	r0, [pc, #376]	; (80033f4 <lcd_update_voltage+0x284>)
 800327a:	ac03      	add	r4, sp, #12
 800327c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800327e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003280:	214e      	movs	r1, #78	; 0x4e
 8003282:	4622      	mov	r2, r4
 8003284:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003286:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003288:	f005 ffc4 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800328c:	2320      	movs	r3, #32
 800328e:	4d5a      	ldr	r5, [pc, #360]	; (80033f8 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003290:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003296:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800329a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800329c:	f043 0309 	orr.w	r3, r3, #9
 80032a0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032a4:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032a8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032ac:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032b0:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032b4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032b8:	2304      	movs	r3, #4
 80032ba:	4622      	mov	r2, r4
 80032bc:	214e      	movs	r1, #78	; 0x4e
 80032be:	4638      	mov	r0, r7
 80032c0:	9600      	str	r6, [sp, #0]
 80032c2:	f005 ffa7 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032c6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e0      	bne.n	8003290 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032ce:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032d2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032d4:	214e      	movs	r1, #78	; 0x4e
 80032d6:	4622      	mov	r2, r4
 80032d8:	4846      	ldr	r0, [pc, #280]	; (80033f4 <lcd_update_voltage+0x284>)
 80032da:	9600      	str	r6, [sp, #0]
 80032dc:	f005 ff9a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0b9      	beq.n	800325c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032e8:	2764      	movs	r7, #100	; 0x64
 80032ea:	4e42      	ldr	r6, [pc, #264]	; (80033f4 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80032ec:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80032ee:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80032f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032f4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80032f8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032fa:	f043 0309 	orr.w	r3, r3, #9
 80032fe:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003302:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003306:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800330a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800330e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003312:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003316:	2304      	movs	r3, #4
 8003318:	4622      	mov	r2, r4
 800331a:	214e      	movs	r1, #78	; 0x4e
 800331c:	4630      	mov	r0, r6
 800331e:	9700      	str	r7, [sp, #0]
 8003320:	f005 ff78 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003324:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e0      	bne.n	80032ee <lcd_update_voltage+0x17e>
 800332c:	e796      	b.n	800325c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800332e:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003330:	4a34      	ldr	r2, [pc, #208]	; (8003404 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003332:	4830      	ldr	r0, [pc, #192]	; (80033f4 <lcd_update_voltage+0x284>)
 8003334:	ac03      	add	r4, sp, #12
 8003336:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003338:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800333a:	214e      	movs	r1, #78	; 0x4e
 800333c:	4622      	mov	r2, r4
 800333e:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003340:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003342:	f005 ff67 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003346:	2320      	movs	r3, #32
 8003348:	4d2b      	ldr	r5, [pc, #172]	; (80033f8 <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 800334a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003352:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003356:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800335a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800335e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003362:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003366:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800336a:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800336e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003370:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003374:	214e      	movs	r1, #78	; 0x4e
 8003376:	4622      	mov	r2, r4
 8003378:	4638      	mov	r0, r7
 800337a:	9600      	str	r6, [sp, #0]
 800337c:	f005 ff4a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003380:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e0      	bne.n	800334a <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800338a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800338c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800338e:	214e      	movs	r1, #78	; 0x4e
 8003390:	4622      	mov	r2, r4
 8003392:	4818      	ldr	r0, [pc, #96]	; (80033f4 <lcd_update_voltage+0x284>)
 8003394:	9600      	str	r6, [sp, #0]
 8003396:	f005 ff3d 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800339a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f43f af5c 	beq.w	800325c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033a4:	2764      	movs	r7, #100	; 0x64
 80033a6:	4e13      	ldr	r6, [pc, #76]	; (80033f4 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80033a8:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80033aa:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80033ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80033b0:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033b2:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033b6:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033ba:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80033be:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033c2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80033c6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80033ca:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033ce:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80033d0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033d4:	4622      	mov	r2, r4
 80033d6:	214e      	movs	r1, #78	; 0x4e
 80033d8:	4630      	mov	r0, r6
 80033da:	9700      	str	r7, [sp, #0]
 80033dc:	f005 ff1a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033e0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e0      	bne.n	80033aa <lcd_update_voltage+0x23a>
 80033e8:	e738      	b.n	800325c <lcd_update_voltage+0xec>
 80033ea:	bf00      	nop
 80033ec:	080118a0 	.word	0x080118a0
 80033f0:	383c888c 	.word	0x383c888c
 80033f4:	20000540 	.word	0x20000540
 80033f8:	080119bc 	.word	0x080119bc
 80033fc:	696d595d 	.word	0x696d595d
 8003400:	282ca8ac 	.word	0x282ca8ac
 8003404:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003408:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800340a:	4a2e      	ldr	r2, [pc, #184]	; (80034c4 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800340c:	482e      	ldr	r0, [pc, #184]	; (80034c8 <lcd_update_voltage+0x358>)
 800340e:	ac03      	add	r4, sp, #12
 8003410:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003412:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003414:	214e      	movs	r1, #78	; 0x4e
 8003416:	4622      	mov	r2, r4
 8003418:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800341a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800341c:	f005 fefa 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003420:	2320      	movs	r3, #32
 8003422:	4d2a      	ldr	r5, [pc, #168]	; (80034cc <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003424:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800342a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800342e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003430:	f043 0309 	orr.w	r3, r3, #9
 8003434:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003438:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800343c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003440:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003444:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003448:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800344c:	2304      	movs	r3, #4
 800344e:	4622      	mov	r2, r4
 8003450:	214e      	movs	r1, #78	; 0x4e
 8003452:	4638      	mov	r0, r7
 8003454:	9600      	str	r6, [sp, #0]
 8003456:	f005 fedd 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800345a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e0      	bne.n	8003424 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003462:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003464:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003466:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003468:	214e      	movs	r1, #78	; 0x4e
 800346a:	4622      	mov	r2, r4
 800346c:	4816      	ldr	r0, [pc, #88]	; (80034c8 <lcd_update_voltage+0x358>)
 800346e:	9600      	str	r6, [sp, #0]
 8003470:	f005 fed0 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003474:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f43f aeef 	beq.w	800325c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800347e:	2764      	movs	r7, #100	; 0x64
 8003480:	4e11      	ldr	r6, [pc, #68]	; (80034c8 <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 8003482:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8003484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800348c:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003490:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003494:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003498:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800349c:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034a0:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034a4:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034a8:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034aa:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034ae:	214e      	movs	r1, #78	; 0x4e
 80034b0:	4622      	mov	r2, r4
 80034b2:	4630      	mov	r0, r6
 80034b4:	9700      	str	r7, [sp, #0]
 80034b6:	f005 fead 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034ba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e0      	bne.n	8003484 <lcd_update_voltage+0x314>
 80034c2:	e6cb      	b.n	800325c <lcd_update_voltage+0xec>
 80034c4:	787c989c 	.word	0x787c989c
 80034c8:	20000540 	.word	0x20000540
 80034cc:	080119bc 	.word	0x080119bc

080034d0 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d2:	4605      	mov	r5, r0
 80034d4:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 80034d6:	4608      	mov	r0, r1
 80034d8:	f7fc ffbe 	bl	8000458 <__aeabi_f2d>
 80034dc:	4606      	mov	r6, r0
 80034de:	460f      	mov	r7, r1
 80034e0:	4a9a      	ldr	r2, [pc, #616]	; (800374c <lcd_update_amperage+0x27c>)
 80034e2:	2106      	movs	r1, #6
 80034e4:	e9cd 6700 	strd	r6, r7, [sp]
 80034e8:	a804      	add	r0, sp, #16
 80034ea:	f00a fbb1 	bl	800dc50 <sniprintf>
	if(channel == 1){
 80034ee:	2d01      	cmp	r5, #1
 80034f0:	d009      	beq.n	8003506 <lcd_update_amperage+0x36>
	else if(channel == 2){
 80034f2:	2d02      	cmp	r5, #2
 80034f4:	f000 80cb 	beq.w	800368e <lcd_update_amperage+0x1be>
	else if(channel == 3){
 80034f8:	2d03      	cmp	r5, #3
 80034fa:	f000 8135 	beq.w	8003768 <lcd_update_amperage+0x298>
	else if(channel == 4){
 80034fe:	2d04      	cmp	r5, #4
 8003500:	d068      	beq.n	80035d4 <lcd_update_amperage+0x104>
}
 8003502:	b007      	add	sp, #28
 8003504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003506:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003508:	4a91      	ldr	r2, [pc, #580]	; (8003750 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800350a:	4892      	ldr	r0, [pc, #584]	; (8003754 <lcd_update_amperage+0x284>)
 800350c:	ac03      	add	r4, sp, #12
 800350e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003510:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003512:	214e      	movs	r1, #78	; 0x4e
 8003514:	4622      	mov	r2, r4
 8003516:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003518:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800351a:	f005 fe7b 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800351e:	2320      	movs	r3, #32
 8003520:	4d8d      	ldr	r5, [pc, #564]	; (8003758 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8003522:	011a      	lsls	r2, r3, #4
 8003524:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800352a:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800352e:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003532:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003536:	f043 0309 	orr.w	r3, r3, #9
 800353a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800353e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003542:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003544:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003548:	4622      	mov	r2, r4
 800354a:	214e      	movs	r1, #78	; 0x4e
 800354c:	4638      	mov	r0, r7
 800354e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003550:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003554:	f005 fe5e 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003558:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e0      	bne.n	8003522 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003560:	4a7b      	ldr	r2, [pc, #492]	; (8003750 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003562:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003564:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003566:	214e      	movs	r1, #78	; 0x4e
 8003568:	4622      	mov	r2, r4
 800356a:	487a      	ldr	r0, [pc, #488]	; (8003754 <lcd_update_amperage+0x284>)
 800356c:	9600      	str	r6, [sp, #0]
 800356e:	f005 fe51 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003572:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003576:	b30b      	cbz	r3, 80035bc <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003578:	2764      	movs	r7, #100	; 0x64
 800357a:	4e76      	ldr	r6, [pc, #472]	; (8003754 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800357c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800357e:	011a      	lsls	r2, r3, #4
 8003580:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003586:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800358a:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800358e:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003592:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003596:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003598:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800359c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035a0:	4622      	mov	r2, r4
 80035a2:	214e      	movs	r1, #78	; 0x4e
 80035a4:	4630      	mov	r0, r6
 80035a6:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035a8:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035ac:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035b0:	f005 fe30 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e0      	bne.n	800357e <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035bc:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035be:	4867      	ldr	r0, [pc, #412]	; (800375c <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035c2:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c4:	4622      	mov	r2, r4
 80035c6:	214e      	movs	r1, #78	; 0x4e
 80035c8:	9500      	str	r5, [sp, #0]
 80035ca:	4862      	ldr	r0, [pc, #392]	; (8003754 <lcd_update_amperage+0x284>)
 80035cc:	f005 fe22 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 80035d0:	b007      	add	sp, #28
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035d4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035d6:	4a62      	ldr	r2, [pc, #392]	; (8003760 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035d8:	485e      	ldr	r0, [pc, #376]	; (8003754 <lcd_update_amperage+0x284>)
 80035da:	ac03      	add	r4, sp, #12
 80035dc:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035de:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035e0:	214e      	movs	r1, #78	; 0x4e
 80035e2:	4622      	mov	r2, r4
 80035e4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035e6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035e8:	f005 fe14 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035ec:	2320      	movs	r3, #32
 80035ee:	4d5a      	ldr	r5, [pc, #360]	; (8003758 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 80035f0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80035f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035f6:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80035fa:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035fc:	f043 0309 	orr.w	r3, r3, #9
 8003600:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003604:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003608:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800360c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003610:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003614:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003618:	2304      	movs	r3, #4
 800361a:	4622      	mov	r2, r4
 800361c:	214e      	movs	r1, #78	; 0x4e
 800361e:	4638      	mov	r0, r7
 8003620:	9600      	str	r6, [sp, #0]
 8003622:	f005 fdf7 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003626:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e0      	bne.n	80035f0 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800362e:	4a4c      	ldr	r2, [pc, #304]	; (8003760 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003630:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003632:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003634:	214e      	movs	r1, #78	; 0x4e
 8003636:	4622      	mov	r2, r4
 8003638:	4846      	ldr	r0, [pc, #280]	; (8003754 <lcd_update_amperage+0x284>)
 800363a:	9600      	str	r6, [sp, #0]
 800363c:	f005 fdea 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003640:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0b9      	beq.n	80035bc <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003648:	2764      	movs	r7, #100	; 0x64
 800364a:	4e42      	ldr	r6, [pc, #264]	; (8003754 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800364c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800364e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003654:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003658:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800365a:	f043 0309 	orr.w	r3, r3, #9
 800365e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003662:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003666:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800366a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800366e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003672:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003676:	2304      	movs	r3, #4
 8003678:	4622      	mov	r2, r4
 800367a:	214e      	movs	r1, #78	; 0x4e
 800367c:	4630      	mov	r0, r6
 800367e:	9700      	str	r7, [sp, #0]
 8003680:	f005 fdc8 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003684:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e0      	bne.n	800364e <lcd_update_amperage+0x17e>
 800368c:	e796      	b.n	80035bc <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800368e:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003690:	4a34      	ldr	r2, [pc, #208]	; (8003764 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003692:	4830      	ldr	r0, [pc, #192]	; (8003754 <lcd_update_amperage+0x284>)
 8003694:	ac03      	add	r4, sp, #12
 8003696:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003698:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800369a:	214e      	movs	r1, #78	; 0x4e
 800369c:	4622      	mov	r2, r4
 800369e:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036a0:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036a2:	f005 fdb7 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036a6:	2320      	movs	r3, #32
 80036a8:	4d2b      	ldr	r5, [pc, #172]	; (8003758 <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 80036aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036b2:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036b6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036ba:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036be:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036c2:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036c6:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036ca:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ce:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036d0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036d4:	214e      	movs	r1, #78	; 0x4e
 80036d6:	4622      	mov	r2, r4
 80036d8:	4638      	mov	r0, r7
 80036da:	9600      	str	r6, [sp, #0]
 80036dc:	f005 fd9a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036e0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e0      	bne.n	80036aa <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ea:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036ec:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ee:	214e      	movs	r1, #78	; 0x4e
 80036f0:	4622      	mov	r2, r4
 80036f2:	4818      	ldr	r0, [pc, #96]	; (8003754 <lcd_update_amperage+0x284>)
 80036f4:	9600      	str	r6, [sp, #0]
 80036f6:	f005 fd8d 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f43f af5c 	beq.w	80035bc <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003704:	2764      	movs	r7, #100	; 0x64
 8003706:	4e13      	ldr	r6, [pc, #76]	; (8003754 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003708:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800370a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800370c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003710:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003712:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003716:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800371a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800371e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003722:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003726:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800372a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800372e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003730:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003734:	4622      	mov	r2, r4
 8003736:	214e      	movs	r1, #78	; 0x4e
 8003738:	4630      	mov	r0, r6
 800373a:	9700      	str	r7, [sp, #0]
 800373c:	f005 fd6a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003740:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e0      	bne.n	800370a <lcd_update_amperage+0x23a>
 8003748:	e738      	b.n	80035bc <lcd_update_amperage+0xec>
 800374a:	bf00      	nop
 800374c:	080118f8 	.word	0x080118f8
 8003750:	383cc8cc 	.word	0x383cc8cc
 8003754:	20000540 	.word	0x20000540
 8003758:	080119bc 	.word	0x080119bc
 800375c:	191d494d 	.word	0x191d494d
 8003760:	282ce8ec 	.word	0x282ce8ec
 8003764:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003768:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800376a:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800376c:	482e      	ldr	r0, [pc, #184]	; (8003828 <lcd_update_amperage+0x358>)
 800376e:	ac03      	add	r4, sp, #12
 8003770:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003772:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003774:	214e      	movs	r1, #78	; 0x4e
 8003776:	4622      	mov	r2, r4
 8003778:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800377a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800377c:	f005 fd4a 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003780:	2320      	movs	r3, #32
 8003782:	4d2a      	ldr	r5, [pc, #168]	; (800382c <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003784:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800378a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800378e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003790:	f043 0309 	orr.w	r3, r3, #9
 8003794:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003798:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800379c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037a0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037a4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80037a8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037ac:	2304      	movs	r3, #4
 80037ae:	4622      	mov	r2, r4
 80037b0:	214e      	movs	r1, #78	; 0x4e
 80037b2:	4638      	mov	r0, r7
 80037b4:	9600      	str	r6, [sp, #0]
 80037b6:	f005 fd2d 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80037ba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e0      	bne.n	8003784 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037c2:	4a18      	ldr	r2, [pc, #96]	; (8003824 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037c4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80037c6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037c8:	214e      	movs	r1, #78	; 0x4e
 80037ca:	4622      	mov	r2, r4
 80037cc:	4816      	ldr	r0, [pc, #88]	; (8003828 <lcd_update_amperage+0x358>)
 80037ce:	9600      	str	r6, [sp, #0]
 80037d0:	f005 fd20 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80037d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f43f aeef 	beq.w	80035bc <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80037de:	2764      	movs	r7, #100	; 0x64
 80037e0:	4e11      	ldr	r6, [pc, #68]	; (8003828 <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 80037e2:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80037e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037ec:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037f0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80037f4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80037f8:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80037fc:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003800:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003804:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003808:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800380a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800380e:	214e      	movs	r1, #78	; 0x4e
 8003810:	4622      	mov	r2, r4
 8003812:	4630      	mov	r0, r6
 8003814:	9700      	str	r7, [sp, #0]
 8003816:	f005 fcfd 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800381a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e0      	bne.n	80037e4 <lcd_update_amperage+0x314>
 8003822:	e6cb      	b.n	80035bc <lcd_update_amperage+0xec>
 8003824:	787cd8dc 	.word	0x787cd8dc
 8003828:	20000540 	.word	0x20000540
 800382c:	080119bc 	.word	0x080119bc

08003830 <lcd_psu_update>:
void lcd_psu_update(void){
 8003830:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003832:	2464      	movs	r4, #100	; 0x64
void lcd_psu_update(void){
 8003834:	b084      	sub	sp, #16
	lcd_psu_init();
 8003836:	f7ff fa6b 	bl	8002d10 <lcd_psu_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800383a:	49a5      	ldr	r1, [pc, #660]	; (8003ad0 <lcd_psu_update+0x2a0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800383c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800383e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003840:	48a4      	ldr	r0, [pc, #656]	; (8003ad4 <lcd_psu_update+0x2a4>)
 8003842:	214e      	movs	r1, #78	; 0x4e
 8003844:	aa03      	add	r2, sp, #12
 8003846:	9400      	str	r4, [sp, #0]
 8003848:	f005 fce4 	bl	8009214 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 800384c:	4ba2      	ldr	r3, [pc, #648]	; (8003ad8 <lcd_psu_update+0x2a8>)
 800384e:	781d      	ldrb	r5, [r3, #0]
 8003850:	b165      	cbz	r5, 800386c <lcd_psu_update+0x3c>
	else if(kpenum == V1){
 8003852:	2d01      	cmp	r5, #1
 8003854:	f000 815e 	beq.w	8003b14 <lcd_psu_update+0x2e4>
	else if(kpenum == V2){
 8003858:	2d03      	cmp	r5, #3
 800385a:	d032      	beq.n	80038c2 <lcd_psu_update+0x92>
	else if(kpenum == A1){
 800385c:	2d02      	cmp	r5, #2
 800385e:	f000 8299 	beq.w	8003d94 <lcd_psu_update+0x564>
	else if(kpenum == A2){
 8003862:	2d04      	cmp	r5, #4
 8003864:	f000 8316 	beq.w	8003e94 <lcd_psu_update+0x664>
}
 8003868:	b004      	add	sp, #16
 800386a:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 800386c:	4b9b      	ldr	r3, [pc, #620]	; (8003adc <lcd_psu_update+0x2ac>)
 800386e:	2001      	movs	r0, #1
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	f7ff fc7d 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003876:	4b9a      	ldr	r3, [pc, #616]	; (8003ae0 <lcd_psu_update+0x2b0>)
 8003878:	2001      	movs	r0, #1
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	f7ff fe28 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003880:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <lcd_psu_update+0x2b4>)
 8003882:	2002      	movs	r0, #2
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	f7ff fc73 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 800388a:	4b97      	ldr	r3, [pc, #604]	; (8003ae8 <lcd_psu_update+0x2b8>)
 800388c:	2002      	movs	r0, #2
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	f7ff fe1e 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003894:	4b95      	ldr	r3, [pc, #596]	; (8003aec <lcd_psu_update+0x2bc>)
 8003896:	2003      	movs	r0, #3
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	f7ff fc69 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 800389e:	4b94      	ldr	r3, [pc, #592]	; (8003af0 <lcd_psu_update+0x2c0>)
 80038a0:	2003      	movs	r0, #3
 80038a2:	6819      	ldr	r1, [r3, #0]
 80038a4:	f7ff fe14 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80038a8:	4b92      	ldr	r3, [pc, #584]	; (8003af4 <lcd_psu_update+0x2c4>)
 80038aa:	2004      	movs	r0, #4
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	f7ff fc5f 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80038b2:	2004      	movs	r0, #4
 80038b4:	4b90      	ldr	r3, [pc, #576]	; (8003af8 <lcd_psu_update+0x2c8>)
 80038b6:	6819      	ldr	r1, [r3, #0]
}
 80038b8:	b004      	add	sp, #16
 80038ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 80038be:	f7ff be07 	b.w	80034d0 <lcd_update_amperage>
		lcd_update_voltage(1,volt_set_aux);
 80038c2:	4b86      	ldr	r3, [pc, #536]	; (8003adc <lcd_psu_update+0x2ac>)
 80038c4:	2001      	movs	r0, #1
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	f7ff fc52 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80038cc:	4b84      	ldr	r3, [pc, #528]	; (8003ae0 <lcd_psu_update+0x2b0>)
 80038ce:	2001      	movs	r0, #1
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	f7ff fdfd 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80038d6:	4b83      	ldr	r3, [pc, #524]	; (8003ae4 <lcd_psu_update+0x2b4>)
 80038d8:	2002      	movs	r0, #2
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	f7ff fc48 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80038e0:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <lcd_psu_update+0x2b8>)
 80038e2:	2002      	movs	r0, #2
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	f7ff fdf3 	bl	80034d0 <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 80038ea:	4b81      	ldr	r3, [pc, #516]	; (8003af0 <lcd_psu_update+0x2c0>)
 80038ec:	4628      	mov	r0, r5
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	f7ff fdee 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80038f4:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <lcd_psu_update+0x2c4>)
 80038f6:	2004      	movs	r0, #4
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	f7ff fc39 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80038fe:	4b7e      	ldr	r3, [pc, #504]	; (8003af8 <lcd_psu_update+0x2c8>)
 8003900:	2004      	movs	r0, #4
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	f7ff fde4 	bl	80034d0 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003908:	497c      	ldr	r1, [pc, #496]	; (8003afc <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800390a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800390c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800390e:	4871      	ldr	r0, [pc, #452]	; (8003ad4 <lcd_psu_update+0x2a4>)
 8003910:	214e      	movs	r1, #78	; 0x4e
 8003912:	aa03      	add	r2, sp, #12
 8003914:	9400      	str	r4, [sp, #0]
 8003916:	f005 fc7d 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800391a:	2320      	movs	r3, #32
 800391c:	4d78      	ldr	r5, [pc, #480]	; (8003b00 <lcd_psu_update+0x2d0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800391e:	4e6d      	ldr	r6, [pc, #436]	; (8003ad4 <lcd_psu_update+0x2a4>)
	data_l = ((data<<4)&0xf0);
 8003920:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003926:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800392a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800392c:	f043 0309 	orr.w	r3, r3, #9
 8003930:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003934:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003938:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800393c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003940:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003944:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003948:	2304      	movs	r3, #4
 800394a:	214e      	movs	r1, #78	; 0x4e
 800394c:	4630      	mov	r0, r6
 800394e:	9400      	str	r4, [sp, #0]
 8003950:	aa03      	add	r2, sp, #12
 8003952:	f005 fc5f 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003956:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e0      	bne.n	8003920 <lcd_psu_update+0xf0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800395e:	4967      	ldr	r1, [pc, #412]	; (8003afc <lcd_psu_update+0x2cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003960:	2304      	movs	r3, #4
 8003962:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003964:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003966:	485b      	ldr	r0, [pc, #364]	; (8003ad4 <lcd_psu_update+0x2a4>)
 8003968:	214e      	movs	r1, #78	; 0x4e
 800396a:	9400      	str	r4, [sp, #0]
 800396c:	f005 fc52 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003970:	4964      	ldr	r1, [pc, #400]	; (8003b04 <lcd_psu_update+0x2d4>)
		if(keypadarr[0] != 'z'){
 8003972:	4d65      	ldr	r5, [pc, #404]	; (8003b08 <lcd_psu_update+0x2d8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003974:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003976:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003978:	4856      	ldr	r0, [pc, #344]	; (8003ad4 <lcd_psu_update+0x2a4>)
 800397a:	214e      	movs	r1, #78	; 0x4e
 800397c:	aa03      	add	r2, sp, #12
 800397e:	9400      	str	r4, [sp, #0]
 8003980:	f005 fc48 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003984:	782b      	ldrb	r3, [r5, #0]
 8003986:	2b7a      	cmp	r3, #122	; 0x7a
 8003988:	d01a      	beq.n	80039c0 <lcd_psu_update+0x190>
	data_u = (data&0xf0);
 800398a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003992:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003996:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800399a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800399e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039a2:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039a6:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039aa:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039ae:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039b2:	2304      	movs	r3, #4
 80039b4:	214e      	movs	r1, #78	; 0x4e
 80039b6:	4847      	ldr	r0, [pc, #284]	; (8003ad4 <lcd_psu_update+0x2a4>)
 80039b8:	9400      	str	r4, [sp, #0]
 80039ba:	aa03      	add	r2, sp, #12
 80039bc:	f005 fc2a 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 80039c0:	786b      	ldrb	r3, [r5, #1]
 80039c2:	2b7a      	cmp	r3, #122	; 0x7a
 80039c4:	d01b      	beq.n	80039fe <lcd_psu_update+0x1ce>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039c6:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80039c8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80039ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039ce:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80039d2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039d4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80039d8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039dc:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039e0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039e4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80039e8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80039ec:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039f0:	2304      	movs	r3, #4
 80039f2:	214e      	movs	r1, #78	; 0x4e
 80039f4:	4837      	ldr	r0, [pc, #220]	; (8003ad4 <lcd_psu_update+0x2a4>)
 80039f6:	aa03      	add	r2, sp, #12
 80039f8:	9400      	str	r4, [sp, #0]
 80039fa:	f005 fc0b 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 80039fe:	78ab      	ldrb	r3, [r5, #2]
 8003a00:	2b7a      	cmp	r3, #122	; 0x7a
 8003a02:	d01b      	beq.n	8003a3c <lcd_psu_update+0x20c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a04:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003a06:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a0c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003a10:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a12:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a16:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a1a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a1e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a22:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a26:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a2a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a2e:	2304      	movs	r3, #4
 8003a30:	214e      	movs	r1, #78	; 0x4e
 8003a32:	4828      	ldr	r0, [pc, #160]	; (8003ad4 <lcd_psu_update+0x2a4>)
 8003a34:	aa03      	add	r2, sp, #12
 8003a36:	9400      	str	r4, [sp, #0]
 8003a38:	f005 fbec 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003a3c:	78eb      	ldrb	r3, [r5, #3]
 8003a3e:	2b7a      	cmp	r3, #122	; 0x7a
 8003a40:	d01b      	beq.n	8003a7a <lcd_psu_update+0x24a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a42:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003a44:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a4a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003a4e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a50:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a54:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a58:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a5c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a60:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a64:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a68:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	214e      	movs	r1, #78	; 0x4e
 8003a70:	4818      	ldr	r0, [pc, #96]	; (8003ad4 <lcd_psu_update+0x2a4>)
 8003a72:	aa03      	add	r2, sp, #12
 8003a74:	9400      	str	r4, [sp, #0]
 8003a76:	f005 fbcd 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003a7a:	792b      	ldrb	r3, [r5, #4]
 8003a7c:	2b7a      	cmp	r3, #122	; 0x7a
 8003a7e:	d01b      	beq.n	8003ab8 <lcd_psu_update+0x288>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a80:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003a82:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003a88:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a8a:	f043 010d 	orr.w	r1, r3, #13
 8003a8e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a92:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a96:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a9a:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a9e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003aa2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003aa6:	9000      	str	r0, [sp, #0]
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	214e      	movs	r1, #78	; 0x4e
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <lcd_psu_update+0x2a4>)
 8003aae:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ab0:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ab4:	f005 fbae 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <lcd_psu_update+0x2dc>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f43f aed3 	beq.w	8003868 <lcd_psu_update+0x38>
			lcd_put_cur(2, 3 + encpos);
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <lcd_psu_update+0x2e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ac4:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 8003ac6:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x94;	//0x80|0x14 for row 3 col 2
 8003aca:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 8003acc:	e127      	b.n	8003d1e <lcd_psu_update+0x4ee>
 8003ace:	bf00      	nop
 8003ad0:	c8cc080c 	.word	0xc8cc080c
 8003ad4:	20000540 	.word	0x20000540
 8003ad8:	20000759 	.word	0x20000759
 8003adc:	20000a78 	.word	0x20000a78
 8003ae0:	200003e8 	.word	0x200003e8
 8003ae4:	20000760 	.word	0x20000760
 8003ae8:	200003fc 	.word	0x200003fc
 8003aec:	20000a7c 	.word	0x20000a7c
 8003af0:	200003ec 	.word	0x200003ec
 8003af4:	2000075c 	.word	0x2000075c
 8003af8:	200003f8 	.word	0x200003f8
 8003afc:	787c989c 	.word	0x787c989c
 8003b00:	080119bc 	.word	0x080119bc
 8003b04:	f8fc080c 	.word	0xf8fc080c
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	20000400 	.word	0x20000400
 8003b10:	20000401 	.word	0x20000401
		lcd_update_amperage(1,amp_set_aux);
 8003b14:	4b91      	ldr	r3, [pc, #580]	; (8003d5c <lcd_psu_update+0x52c>)
 8003b16:	4628      	mov	r0, r5
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	f7ff fcd9 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003b1e:	4b90      	ldr	r3, [pc, #576]	; (8003d60 <lcd_psu_update+0x530>)
 8003b20:	2002      	movs	r0, #2
 8003b22:	6819      	ldr	r1, [r3, #0]
 8003b24:	f7ff fb24 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003b28:	4b8e      	ldr	r3, [pc, #568]	; (8003d64 <lcd_psu_update+0x534>)
 8003b2a:	2002      	movs	r0, #2
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	f7ff fccf 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003b32:	4b8d      	ldr	r3, [pc, #564]	; (8003d68 <lcd_psu_update+0x538>)
 8003b34:	2003      	movs	r0, #3
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	f7ff fb1a 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003b3c:	4b8b      	ldr	r3, [pc, #556]	; (8003d6c <lcd_psu_update+0x53c>)
 8003b3e:	2003      	movs	r0, #3
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	f7ff fcc5 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003b46:	4b8a      	ldr	r3, [pc, #552]	; (8003d70 <lcd_psu_update+0x540>)
 8003b48:	2004      	movs	r0, #4
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	f7ff fb10 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003b50:	4b88      	ldr	r3, [pc, #544]	; (8003d74 <lcd_psu_update+0x544>)
 8003b52:	2004      	movs	r0, #4
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	f7ff fcbb 	bl	80034d0 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003b5a:	4987      	ldr	r1, [pc, #540]	; (8003d78 <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b5c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003b5e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b60:	4886      	ldr	r0, [pc, #536]	; (8003d7c <lcd_psu_update+0x54c>)
 8003b62:	214e      	movs	r1, #78	; 0x4e
 8003b64:	aa03      	add	r2, sp, #12
 8003b66:	9400      	str	r4, [sp, #0]
 8003b68:	f005 fb54 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	4d84      	ldr	r5, [pc, #528]	; (8003d80 <lcd_psu_update+0x550>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b70:	4e82      	ldr	r6, [pc, #520]	; (8003d7c <lcd_psu_update+0x54c>)
	data_u = (data&0xf0);
 8003b72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b7a:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b7e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b82:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b86:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b8a:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b8e:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b92:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b96:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b98:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b9c:	214e      	movs	r1, #78	; 0x4e
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	9400      	str	r4, [sp, #0]
 8003ba2:	aa03      	add	r2, sp, #12
 8003ba4:	f005 fb36 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003ba8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e0      	bne.n	8003b72 <lcd_psu_update+0x342>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bb0:	4971      	ldr	r1, [pc, #452]	; (8003d78 <lcd_psu_update+0x548>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bb6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bb8:	4870      	ldr	r0, [pc, #448]	; (8003d7c <lcd_psu_update+0x54c>)
 8003bba:	214e      	movs	r1, #78	; 0x4e
 8003bbc:	9400      	str	r4, [sp, #0]
 8003bbe:	f005 fb29 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bc2:	4970      	ldr	r1, [pc, #448]	; (8003d84 <lcd_psu_update+0x554>)
		if(keypadarr[0] != 'z'){
 8003bc4:	4d70      	ldr	r5, [pc, #448]	; (8003d88 <lcd_psu_update+0x558>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bc6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003bc8:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bca:	486c      	ldr	r0, [pc, #432]	; (8003d7c <lcd_psu_update+0x54c>)
 8003bcc:	214e      	movs	r1, #78	; 0x4e
 8003bce:	aa03      	add	r2, sp, #12
 8003bd0:	9400      	str	r4, [sp, #0]
 8003bd2:	f005 fb1f 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003bd6:	782b      	ldrb	r3, [r5, #0]
 8003bd8:	2b7a      	cmp	r3, #122	; 0x7a
 8003bda:	d01a      	beq.n	8003c12 <lcd_psu_update+0x3e2>
	data_u = (data&0xf0);
 8003bdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003be4:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003be8:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bec:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003bf0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bf4:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bf8:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bfc:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c00:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c04:	2304      	movs	r3, #4
 8003c06:	214e      	movs	r1, #78	; 0x4e
 8003c08:	485c      	ldr	r0, [pc, #368]	; (8003d7c <lcd_psu_update+0x54c>)
 8003c0a:	9400      	str	r4, [sp, #0]
 8003c0c:	aa03      	add	r2, sp, #12
 8003c0e:	f005 fb01 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003c12:	786b      	ldrb	r3, [r5, #1]
 8003c14:	2b7a      	cmp	r3, #122	; 0x7a
 8003c16:	d01b      	beq.n	8003c50 <lcd_psu_update+0x420>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c18:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003c1a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c20:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003c24:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c26:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c2a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c2e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c32:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c36:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c3a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c3e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c42:	2304      	movs	r3, #4
 8003c44:	214e      	movs	r1, #78	; 0x4e
 8003c46:	484d      	ldr	r0, [pc, #308]	; (8003d7c <lcd_psu_update+0x54c>)
 8003c48:	aa03      	add	r2, sp, #12
 8003c4a:	9400      	str	r4, [sp, #0]
 8003c4c:	f005 fae2 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003c50:	78ab      	ldrb	r3, [r5, #2]
 8003c52:	2b7a      	cmp	r3, #122	; 0x7a
 8003c54:	d01b      	beq.n	8003c8e <lcd_psu_update+0x45e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c56:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003c58:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c5e:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003c62:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c64:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c68:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c6c:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c70:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003c74:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003c78:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003c7c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c80:	2304      	movs	r3, #4
 8003c82:	214e      	movs	r1, #78	; 0x4e
 8003c84:	483d      	ldr	r0, [pc, #244]	; (8003d7c <lcd_psu_update+0x54c>)
 8003c86:	aa03      	add	r2, sp, #12
 8003c88:	9400      	str	r4, [sp, #0]
 8003c8a:	f005 fac3 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003c8e:	78eb      	ldrb	r3, [r5, #3]
 8003c90:	2b7a      	cmp	r3, #122	; 0x7a
 8003c92:	d01b      	beq.n	8003ccc <lcd_psu_update+0x49c>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c94:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003c96:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003c9c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003ca0:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ca2:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ca6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003caa:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003cae:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003cb2:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003cb6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003cba:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	214e      	movs	r1, #78	; 0x4e
 8003cc2:	482e      	ldr	r0, [pc, #184]	; (8003d7c <lcd_psu_update+0x54c>)
 8003cc4:	aa03      	add	r2, sp, #12
 8003cc6:	9400      	str	r4, [sp, #0]
 8003cc8:	f005 faa4 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003ccc:	792b      	ldrb	r3, [r5, #4]
 8003cce:	2b7a      	cmp	r3, #122	; 0x7a
 8003cd0:	d01b      	beq.n	8003d0a <lcd_psu_update+0x4da>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cd2:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003cd4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003cda:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003cdc:	f043 010d 	orr.w	r1, r3, #13
 8003ce0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ce4:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ce8:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003cec:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003cf0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003cf4:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cf8:	9000      	str	r0, [sp, #0]
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	214e      	movs	r1, #78	; 0x4e
 8003cfe:	481f      	ldr	r0, [pc, #124]	; (8003d7c <lcd_psu_update+0x54c>)
 8003d00:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d02:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d06:	f005 fa85 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <lcd_psu_update+0x55c>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f43f adaa 	beq.w	8003868 <lcd_psu_update+0x38>
			lcd_put_cur(0, 3 + encpos);
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <lcd_psu_update+0x560>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d16:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 8003d18:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x80;
 8003d1c:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d1e:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003d20:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003d26:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d2a:	f043 000c 	orr.w	r0, r3, #12
 8003d2e:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003d32:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003d36:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003d3a:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003d3e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003d42:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d46:	2304      	movs	r3, #4
 8003d48:	214e      	movs	r1, #78	; 0x4e
 8003d4a:	9400      	str	r4, [sp, #0]
 8003d4c:	480b      	ldr	r0, [pc, #44]	; (8003d7c <lcd_psu_update+0x54c>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003d4e:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d52:	f005 fa5f 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8003d56:	b004      	add	sp, #16
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200003e8 	.word	0x200003e8
 8003d60:	20000760 	.word	0x20000760
 8003d64:	200003fc 	.word	0x200003fc
 8003d68:	20000a7c 	.word	0x20000a7c
 8003d6c:	200003ec 	.word	0x200003ec
 8003d70:	2000075c 	.word	0x2000075c
 8003d74:	200003f8 	.word	0x200003f8
 8003d78:	383c888c 	.word	0x383c888c
 8003d7c:	20000540 	.word	0x20000540
 8003d80:	080119bc 	.word	0x080119bc
 8003d84:	f8fc080c 	.word	0xf8fc080c
 8003d88:	2000000c 	.word	0x2000000c
 8003d8c:	20000400 	.word	0x20000400
 8003d90:	20000401 	.word	0x20000401
		lcd_update_voltage(1,volt_set_aux);
 8003d94:	4bb9      	ldr	r3, [pc, #740]	; (800407c <lcd_psu_update+0x84c>)
 8003d96:	2001      	movs	r0, #1
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	f7ff f9e9 	bl	8003170 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 8003d9e:	4bb8      	ldr	r3, [pc, #736]	; (8004080 <lcd_psu_update+0x850>)
 8003da0:	4628      	mov	r0, r5
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	f7ff f9e4 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003da8:	4bb6      	ldr	r3, [pc, #728]	; (8004084 <lcd_psu_update+0x854>)
 8003daa:	4628      	mov	r0, r5
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	f7ff fb8f 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003db2:	4bb5      	ldr	r3, [pc, #724]	; (8004088 <lcd_psu_update+0x858>)
 8003db4:	2003      	movs	r0, #3
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	f7ff f9da 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003dbc:	4bb3      	ldr	r3, [pc, #716]	; (800408c <lcd_psu_update+0x85c>)
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	f7ff fb85 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003dc6:	4bb2      	ldr	r3, [pc, #712]	; (8004090 <lcd_psu_update+0x860>)
 8003dc8:	2004      	movs	r0, #4
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	f7ff f9d0 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003dd0:	4bb0      	ldr	r3, [pc, #704]	; (8004094 <lcd_psu_update+0x864>)
 8003dd2:	2004      	movs	r0, #4
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	f7ff fb7b 	bl	80034d0 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003dda:	49af      	ldr	r1, [pc, #700]	; (8004098 <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ddc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003dde:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003de0:	48ae      	ldr	r0, [pc, #696]	; (800409c <lcd_psu_update+0x86c>)
 8003de2:	214e      	movs	r1, #78	; 0x4e
 8003de4:	aa03      	add	r2, sp, #12
 8003de6:	9400      	str	r4, [sp, #0]
 8003de8:	f005 fa14 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003dec:	2320      	movs	r3, #32
 8003dee:	4dac      	ldr	r5, [pc, #688]	; (80040a0 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003df0:	4eaa      	ldr	r6, [pc, #680]	; (800409c <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003df2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003df8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003dfc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003dfe:	f043 0309 	orr.w	r3, r3, #9
 8003e02:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e06:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e0a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e0e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e12:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e16:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	214e      	movs	r1, #78	; 0x4e
 8003e1e:	4630      	mov	r0, r6
 8003e20:	9400      	str	r4, [sp, #0]
 8003e22:	aa03      	add	r2, sp, #12
 8003e24:	f005 f9f6 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003e28:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e0      	bne.n	8003df2 <lcd_psu_update+0x5c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e30:	4999      	ldr	r1, [pc, #612]	; (8004098 <lcd_psu_update+0x868>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e32:	2304      	movs	r3, #4
 8003e34:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e36:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e38:	4898      	ldr	r0, [pc, #608]	; (800409c <lcd_psu_update+0x86c>)
 8003e3a:	214e      	movs	r1, #78	; 0x4e
 8003e3c:	9400      	str	r4, [sp, #0]
 8003e3e:	f005 f9e9 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e42:	4998      	ldr	r1, [pc, #608]	; (80040a4 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003e44:	4d98      	ldr	r5, [pc, #608]	; (80040a8 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e46:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e48:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e4a:	4894      	ldr	r0, [pc, #592]	; (800409c <lcd_psu_update+0x86c>)
 8003e4c:	214e      	movs	r1, #78	; 0x4e
 8003e4e:	aa03      	add	r2, sp, #12
 8003e50:	9400      	str	r4, [sp, #0]
 8003e52:	f005 f9df 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003e56:	782b      	ldrb	r3, [r5, #0]
 8003e58:	2b7a      	cmp	r3, #122	; 0x7a
 8003e5a:	f040 812f 	bne.w	80040bc <lcd_psu_update+0x88c>
		if(keypadarr[1] != 'z'){
 8003e5e:	786b      	ldrb	r3, [r5, #1]
 8003e60:	2b7a      	cmp	r3, #122	; 0x7a
 8003e62:	f040 80ee 	bne.w	8004042 <lcd_psu_update+0x812>
		if(keypadarr[2] != 'z'){
 8003e66:	78ab      	ldrb	r3, [r5, #2]
 8003e68:	2b7a      	cmp	r3, #122	; 0x7a
 8003e6a:	f040 80cd 	bne.w	8004008 <lcd_psu_update+0x7d8>
		if(keypadarr[3] != 'z'){
 8003e6e:	78eb      	ldrb	r3, [r5, #3]
 8003e70:	2b7a      	cmp	r3, #122	; 0x7a
 8003e72:	f040 80ac 	bne.w	8003fce <lcd_psu_update+0x79e>
		if(keypadarr[4] != 'z'){
 8003e76:	792b      	ldrb	r3, [r5, #4]
 8003e78:	2b7a      	cmp	r3, #122	; 0x7a
 8003e7a:	f040 808b 	bne.w	8003f94 <lcd_psu_update+0x764>
		if(encmode){
 8003e7e:	4b8b      	ldr	r3, [pc, #556]	; (80040ac <lcd_psu_update+0x87c>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f43f acf0 	beq.w	8003868 <lcd_psu_update+0x38>
			lcd_put_cur(1, 3 + encpos);
 8003e88:	4b89      	ldr	r3, [pc, #548]	; (80040b0 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e8a:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 8003e8c:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xC0;  //C0
 8003e90:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 8003e92:	e744      	b.n	8003d1e <lcd_psu_update+0x4ee>
		lcd_update_voltage(1,volt_set_aux);
 8003e94:	4b79      	ldr	r3, [pc, #484]	; (800407c <lcd_psu_update+0x84c>)
 8003e96:	2001      	movs	r0, #1
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	f7ff f969 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003e9e:	4b85      	ldr	r3, [pc, #532]	; (80040b4 <lcd_psu_update+0x884>)
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	f7ff fb14 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003ea8:	4b75      	ldr	r3, [pc, #468]	; (8004080 <lcd_psu_update+0x850>)
 8003eaa:	2002      	movs	r0, #2
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	f7ff f95f 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003eb2:	4b74      	ldr	r3, [pc, #464]	; (8004084 <lcd_psu_update+0x854>)
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	f7ff fb0a 	bl	80034d0 <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003ebc:	4b72      	ldr	r3, [pc, #456]	; (8004088 <lcd_psu_update+0x858>)
 8003ebe:	2003      	movs	r0, #3
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	f7ff f955 	bl	8003170 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003ec6:	4b72      	ldr	r3, [pc, #456]	; (8004090 <lcd_psu_update+0x860>)
 8003ec8:	4628      	mov	r0, r5
 8003eca:	6819      	ldr	r1, [r3, #0]
 8003ecc:	f7ff f950 	bl	8003170 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003ed0:	4b70      	ldr	r3, [pc, #448]	; (8004094 <lcd_psu_update+0x864>)
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	f7ff fafb 	bl	80034d0 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003eda:	4977      	ldr	r1, [pc, #476]	; (80040b8 <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003edc:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003ede:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ee0:	486e      	ldr	r0, [pc, #440]	; (800409c <lcd_psu_update+0x86c>)
 8003ee2:	214e      	movs	r1, #78	; 0x4e
 8003ee4:	aa03      	add	r2, sp, #12
 8003ee6:	9400      	str	r4, [sp, #0]
 8003ee8:	f005 f994 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003eec:	2320      	movs	r3, #32
 8003eee:	4d6c      	ldr	r5, [pc, #432]	; (80040a0 <lcd_psu_update+0x870>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ef0:	4e6a      	ldr	r6, [pc, #424]	; (800409c <lcd_psu_update+0x86c>)
	data_l = ((data<<4)&0xf0);
 8003ef2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ef8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003efc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003efe:	f043 0309 	orr.w	r3, r3, #9
 8003f02:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f06:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f0a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f0e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f12:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f16:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	214e      	movs	r1, #78	; 0x4e
 8003f1e:	4630      	mov	r0, r6
 8003f20:	9400      	str	r4, [sp, #0]
 8003f22:	aa03      	add	r2, sp, #12
 8003f24:	f005 f976 	bl	8009214 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003f28:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e0      	bne.n	8003ef2 <lcd_psu_update+0x6c2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f30:	4961      	ldr	r1, [pc, #388]	; (80040b8 <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f32:	2304      	movs	r3, #4
 8003f34:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f36:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f38:	4858      	ldr	r0, [pc, #352]	; (800409c <lcd_psu_update+0x86c>)
 8003f3a:	214e      	movs	r1, #78	; 0x4e
 8003f3c:	9400      	str	r4, [sp, #0]
 8003f3e:	f005 f969 	bl	8009214 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f42:	4958      	ldr	r1, [pc, #352]	; (80040a4 <lcd_psu_update+0x874>)
		if(keypadarr[0] != 'z'){
 8003f44:	4d58      	ldr	r5, [pc, #352]	; (80040a8 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f46:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f48:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f4a:	4854      	ldr	r0, [pc, #336]	; (800409c <lcd_psu_update+0x86c>)
 8003f4c:	214e      	movs	r1, #78	; 0x4e
 8003f4e:	aa03      	add	r2, sp, #12
 8003f50:	9400      	str	r4, [sp, #0]
 8003f52:	f005 f95f 	bl	8009214 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003f56:	782b      	ldrb	r3, [r5, #0]
 8003f58:	2b7a      	cmp	r3, #122	; 0x7a
 8003f5a:	f040 80e8 	bne.w	800412e <lcd_psu_update+0x8fe>
		if(keypadarr[1] != 'z'){
 8003f5e:	786b      	ldrb	r3, [r5, #1]
 8003f60:	2b7a      	cmp	r3, #122	; 0x7a
 8003f62:	f040 80c7 	bne.w	80040f4 <lcd_psu_update+0x8c4>
		if(keypadarr[2] != 'z'){
 8003f66:	78ab      	ldrb	r3, [r5, #2]
 8003f68:	2b7a      	cmp	r3, #122	; 0x7a
 8003f6a:	f040 8136 	bne.w	80041da <lcd_psu_update+0x9aa>
		if(keypadarr[3] != 'z'){
 8003f6e:	78eb      	ldrb	r3, [r5, #3]
 8003f70:	2b7a      	cmp	r3, #122	; 0x7a
 8003f72:	f040 8115 	bne.w	80041a0 <lcd_psu_update+0x970>
		if(keypadarr[4] != 'z'){
 8003f76:	792b      	ldrb	r3, [r5, #4]
 8003f78:	2b7a      	cmp	r3, #122	; 0x7a
 8003f7a:	f040 80f4 	bne.w	8004166 <lcd_psu_update+0x936>
		if(encmode){
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <lcd_psu_update+0x87c>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f43f ac70 	beq.w	8003868 <lcd_psu_update+0x38>
			lcd_put_cur(3, 3 + encpos);
 8003f88:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f8a:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 8003f8c:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xD4;
 8003f90:	33d7      	adds	r3, #215	; 0xd7
 8003f92:	e6c4      	b.n	8003d1e <lcd_psu_update+0x4ee>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f94:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f96:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003f9c:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f9e:	f043 010d 	orr.w	r1, r3, #13
 8003fa2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fa6:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003faa:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fae:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fb2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fb6:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fba:	9000      	str	r0, [sp, #0]
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	214e      	movs	r1, #78	; 0x4e
 8003fc0:	aa03      	add	r2, sp, #12
 8003fc2:	4836      	ldr	r0, [pc, #216]	; (800409c <lcd_psu_update+0x86c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fc4:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fc8:	f005 f924 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8003fcc:	e757      	b.n	8003e7e <lcd_psu_update+0x64e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fce:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003fd0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fd6:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003fda:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fdc:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fe0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fe4:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fe8:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fec:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ff0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ff4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	214e      	movs	r1, #78	; 0x4e
 8003ffc:	aa03      	add	r2, sp, #12
 8003ffe:	9400      	str	r4, [sp, #0]
 8004000:	4826      	ldr	r0, [pc, #152]	; (800409c <lcd_psu_update+0x86c>)
 8004002:	f005 f907 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8004006:	e736      	b.n	8003e76 <lcd_psu_update+0x646>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004008:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800400a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800400c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004010:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8004014:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004016:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800401a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800401e:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004022:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004026:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800402a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800402e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004032:	2304      	movs	r3, #4
 8004034:	214e      	movs	r1, #78	; 0x4e
 8004036:	aa03      	add	r2, sp, #12
 8004038:	9400      	str	r4, [sp, #0]
 800403a:	4818      	ldr	r0, [pc, #96]	; (800409c <lcd_psu_update+0x86c>)
 800403c:	f005 f8ea 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8004040:	e715      	b.n	8003e6e <lcd_psu_update+0x63e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004042:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004044:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800404a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800404e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004050:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004054:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004058:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800405c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004060:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004064:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004068:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800406c:	2304      	movs	r3, #4
 800406e:	214e      	movs	r1, #78	; 0x4e
 8004070:	aa03      	add	r2, sp, #12
 8004072:	9400      	str	r4, [sp, #0]
 8004074:	4809      	ldr	r0, [pc, #36]	; (800409c <lcd_psu_update+0x86c>)
 8004076:	f005 f8cd 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 800407a:	e6f4      	b.n	8003e66 <lcd_psu_update+0x636>
 800407c:	20000a78 	.word	0x20000a78
 8004080:	20000760 	.word	0x20000760
 8004084:	200003fc 	.word	0x200003fc
 8004088:	20000a7c 	.word	0x20000a7c
 800408c:	200003ec 	.word	0x200003ec
 8004090:	2000075c 	.word	0x2000075c
 8004094:	200003f8 	.word	0x200003f8
 8004098:	383cc8cc 	.word	0x383cc8cc
 800409c:	20000540 	.word	0x20000540
 80040a0:	080119bc 	.word	0x080119bc
 80040a4:	f8fc080c 	.word	0xf8fc080c
 80040a8:	2000000c 	.word	0x2000000c
 80040ac:	20000400 	.word	0x20000400
 80040b0:	20000401 	.word	0x20000401
 80040b4:	200003e8 	.word	0x200003e8
 80040b8:	787cd8dc 	.word	0x787cd8dc
	data_u = (data&0xf0);
 80040bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040c4:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040c8:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040cc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040d0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040d4:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040d8:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040dc:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040e0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040e4:	2304      	movs	r3, #4
 80040e6:	214e      	movs	r1, #78	; 0x4e
 80040e8:	9400      	str	r4, [sp, #0]
 80040ea:	aa03      	add	r2, sp, #12
 80040ec:	4849      	ldr	r0, [pc, #292]	; (8004214 <lcd_psu_update+0x9e4>)
 80040ee:	f005 f891 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 80040f2:	e6b4      	b.n	8003e5e <lcd_psu_update+0x62e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040f4:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80040f6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80040f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040fc:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8004100:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004102:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004106:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800410a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800410e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004112:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004116:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800411a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800411e:	2304      	movs	r3, #4
 8004120:	214e      	movs	r1, #78	; 0x4e
 8004122:	aa03      	add	r2, sp, #12
 8004124:	9400      	str	r4, [sp, #0]
 8004126:	483b      	ldr	r0, [pc, #236]	; (8004214 <lcd_psu_update+0x9e4>)
 8004128:	f005 f874 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 800412c:	e71b      	b.n	8003f66 <lcd_psu_update+0x736>
	data_u = (data&0xf0);
 800412e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004136:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800413a:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800413e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004142:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004146:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800414a:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800414e:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004152:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004156:	2304      	movs	r3, #4
 8004158:	214e      	movs	r1, #78	; 0x4e
 800415a:	9400      	str	r4, [sp, #0]
 800415c:	aa03      	add	r2, sp, #12
 800415e:	482d      	ldr	r0, [pc, #180]	; (8004214 <lcd_psu_update+0x9e4>)
 8004160:	f005 f858 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8004164:	e6fb      	b.n	8003f5e <lcd_psu_update+0x72e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004166:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004168:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800416a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800416e:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004170:	f043 010d 	orr.w	r1, r3, #13
 8004174:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004178:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800417c:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004180:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004184:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004188:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800418c:	9000      	str	r0, [sp, #0]
 800418e:	2304      	movs	r3, #4
 8004190:	214e      	movs	r1, #78	; 0x4e
 8004192:	aa03      	add	r2, sp, #12
 8004194:	481f      	ldr	r0, [pc, #124]	; (8004214 <lcd_psu_update+0x9e4>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004196:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800419a:	f005 f83b 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 800419e:	e6ee      	b.n	8003f7e <lcd_psu_update+0x74e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041a0:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80041a2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80041a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80041a8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80041ac:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041ae:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80041b2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041b6:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041ba:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041be:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041c2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041c6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041ca:	2304      	movs	r3, #4
 80041cc:	214e      	movs	r1, #78	; 0x4e
 80041ce:	aa03      	add	r2, sp, #12
 80041d0:	9400      	str	r4, [sp, #0]
 80041d2:	4810      	ldr	r0, [pc, #64]	; (8004214 <lcd_psu_update+0x9e4>)
 80041d4:	f005 f81e 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 80041d8:	e6cd      	b.n	8003f76 <lcd_psu_update+0x746>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80041da:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80041dc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80041de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80041e2:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80041e6:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041e8:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80041ec:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041f0:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80041f4:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80041f8:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80041fc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004200:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004204:	2304      	movs	r3, #4
 8004206:	214e      	movs	r1, #78	; 0x4e
 8004208:	aa03      	add	r2, sp, #12
 800420a:	9400      	str	r4, [sp, #0]
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <lcd_psu_update+0x9e4>)
 800420e:	f005 f801 	bl	8009214 <HAL_I2C_Master_Transmit>
}
 8004212:	e6ac      	b.n	8003f6e <lcd_psu_update+0x73e>
 8004214:	20000540 	.word	0x20000540

08004218 <translate_keypad>:
float translate_keypad(void){
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(keypadarr[i] == '.'){
 800421c:	4db8      	ldr	r5, [pc, #736]	; (8004500 <translate_keypad+0x2e8>)
 800421e:	f895 8000 	ldrb.w	r8, [r5]
 8004222:	786e      	ldrb	r6, [r5, #1]
 8004224:	f1b8 032e 	subs.w	r3, r8, #46	; 0x2e
 8004228:	78af      	ldrb	r7, [r5, #2]
 800422a:	bf18      	it	ne
 800422c:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 8004230:	2e2e      	cmp	r6, #46	; 0x2e
 8004232:	bf08      	it	eq
 8004234:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 8004236:	2f2e      	cmp	r7, #46	; 0x2e
 8004238:	f000 80e4 	beq.w	8004404 <translate_keypad+0x1ec>
 800423c:	f895 9003 	ldrb.w	r9, [r5, #3]
 8004240:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004244:	d051      	beq.n	80042ea <translate_keypad+0xd2>
 8004246:	7928      	ldrb	r0, [r5, #4]
 8004248:	282e      	cmp	r0, #46	; 0x2e
 800424a:	f000 8141 	beq.w	80044d0 <translate_keypad+0x2b8>
	if(decimallocation == -1){
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	f040 8141 	bne.w	80044d6 <translate_keypad+0x2be>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004254:	3830      	subs	r0, #48	; 0x30
 8004256:	b2c3      	uxtb	r3, r0
 8004258:	2b09      	cmp	r3, #9
 800425a:	f240 8127 	bls.w	80044ac <translate_keypad+0x294>
		int count = 1;
 800425e:	2501      	movs	r5, #1
	float num = 0;
 8004260:	2400      	movs	r4, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004262:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8004266:	fa5f f389 	uxtb.w	r3, r9
 800426a:	2b09      	cmp	r3, #9
 800426c:	d80b      	bhi.n	8004286 <translate_keypad+0x6e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800426e:	fb05 f009 	mul.w	r0, r5, r9
 8004272:	f7fc fd4b 	bl	8000d0c <__aeabi_i2f>
 8004276:	4601      	mov	r1, r0
 8004278:	4620      	mov	r0, r4
 800427a:	f7fc fc93 	bl	8000ba4 <__addsf3>
 800427e:	4604      	mov	r4, r0
				count = count * 10;
 8004280:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004284:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004286:	3f30      	subs	r7, #48	; 0x30
 8004288:	b2fb      	uxtb	r3, r7
 800428a:	2b09      	cmp	r3, #9
 800428c:	d80b      	bhi.n	80042a6 <translate_keypad+0x8e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800428e:	fb05 f007 	mul.w	r0, r5, r7
 8004292:	f7fc fd3b 	bl	8000d0c <__aeabi_i2f>
 8004296:	4601      	mov	r1, r0
 8004298:	4620      	mov	r0, r4
 800429a:	f7fc fc83 	bl	8000ba4 <__addsf3>
 800429e:	4604      	mov	r4, r0
				count = count * 10;
 80042a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80042a4:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042a6:	3e30      	subs	r6, #48	; 0x30
 80042a8:	b2f3      	uxtb	r3, r6
 80042aa:	2b09      	cmp	r3, #9
 80042ac:	d80b      	bhi.n	80042c6 <translate_keypad+0xae>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80042ae:	fb05 f006 	mul.w	r0, r5, r6
 80042b2:	f7fc fd2b 	bl	8000d0c <__aeabi_i2f>
 80042b6:	4601      	mov	r1, r0
 80042b8:	4620      	mov	r0, r4
 80042ba:	f7fc fc73 	bl	8000ba4 <__addsf3>
 80042be:	4604      	mov	r4, r0
				count = count * 10;
 80042c0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80042c4:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042c6:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80042ca:	fa5f f388 	uxtb.w	r3, r8
 80042ce:	2b09      	cmp	r3, #9
 80042d0:	d808      	bhi.n	80042e4 <translate_keypad+0xcc>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80042d2:	fb05 f008 	mul.w	r0, r5, r8
 80042d6:	f7fc fd19 	bl	8000d0c <__aeabi_i2f>
 80042da:	4601      	mov	r1, r0
 80042dc:	4620      	mov	r0, r4
 80042de:	f7fc fc61 	bl	8000ba4 <__addsf3>
 80042e2:	4604      	mov	r4, r0
}
 80042e4:	4620      	mov	r0, r4
 80042e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 80042ea:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 80042ec:	2b2e      	cmp	r3, #46	; 0x2e
 80042ee:	bf0c      	ite	eq
 80042f0:	f04f 0904 	moveq.w	r9, #4
 80042f4:	f04f 0903 	movne.w	r9, #3
		for(int i = decimallocation-1; i >=0; i--){
 80042f8:	f109 37ff 	add.w	r7, r9, #4294967295
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042fc:	5de8      	ldrb	r0, [r5, r7]
 80042fe:	3830      	subs	r0, #48	; 0x30
 8004300:	b2c3      	uxtb	r3, r0
 8004302:	2b09      	cmp	r3, #9
 8004304:	f240 808b 	bls.w	800441e <translate_keypad+0x206>
		int count = 1;
 8004308:	2601      	movs	r6, #1
	float num = 0;
 800430a:	2400      	movs	r4, #0
		for(int i = decimallocation-1; i >=0; i--){
 800430c:	1e7b      	subs	r3, r7, #1
 800430e:	2f00      	cmp	r7, #0
 8004310:	f000 80a6 	beq.w	8004460 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004314:	5ce8      	ldrb	r0, [r5, r3]
 8004316:	3830      	subs	r0, #48	; 0x30
 8004318:	b2c3      	uxtb	r3, r0
 800431a:	2b09      	cmp	r3, #9
 800431c:	d80b      	bhi.n	8004336 <translate_keypad+0x11e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800431e:	fb06 f000 	mul.w	r0, r6, r0
 8004322:	f7fc fcf3 	bl	8000d0c <__aeabi_i2f>
 8004326:	4601      	mov	r1, r0
 8004328:	4620      	mov	r0, r4
 800432a:	f7fc fc3b 	bl	8000ba4 <__addsf3>
 800432e:	4604      	mov	r4, r0
				count = count * 10;
 8004330:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004334:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation-1; i >=0; i--){
 8004336:	2f01      	cmp	r7, #1
 8004338:	f1a7 0a02 	sub.w	sl, r7, #2
 800433c:	f000 8090 	beq.w	8004460 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004340:	f815 000a 	ldrb.w	r0, [r5, sl]
 8004344:	3830      	subs	r0, #48	; 0x30
 8004346:	b2c3      	uxtb	r3, r0
 8004348:	2b09      	cmp	r3, #9
 800434a:	f240 80a2 	bls.w	8004492 <translate_keypad+0x27a>
		for(int i = decimallocation-1; i >=0; i--){
 800434e:	f1ba 0f00 	cmp.w	sl, #0
 8004352:	f000 8085 	beq.w	8004460 <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004356:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800435a:	fa5f f388 	uxtb.w	r3, r8
 800435e:	2b09      	cmp	r3, #9
 8004360:	f240 80ac 	bls.w	80044bc <translate_keypad+0x2a4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004364:	f1b9 0f04 	cmp.w	r9, #4
 8004368:	f109 0701 	add.w	r7, r9, #1
 800436c:	d0ba      	beq.n	80042e4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800436e:	5de8      	ldrb	r0, [r5, r7]
 8004370:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004374:	2b09      	cmp	r3, #9
 8004376:	d95c      	bls.n	8004432 <translate_keypad+0x21a>
 8004378:	260a      	movs	r6, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 800437a:	2f04      	cmp	r7, #4
 800437c:	f107 0801 	add.w	r8, r7, #1
 8004380:	d0b0      	beq.n	80042e4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004382:	f815 0008 	ldrb.w	r0, [r5, r8]
 8004386:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800438a:	2b09      	cmp	r3, #9
 800438c:	d814      	bhi.n	80043b8 <translate_keypad+0x1a0>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800438e:	f7fc fcbd 	bl	8000d0c <__aeabi_i2f>
 8004392:	495c      	ldr	r1, [pc, #368]	; (8004504 <translate_keypad+0x2ec>)
 8004394:	f7fc fc04 	bl	8000ba0 <__aeabi_fsub>
 8004398:	4607      	mov	r7, r0
 800439a:	4630      	mov	r0, r6
 800439c:	f7fc fcb6 	bl	8000d0c <__aeabi_i2f>
 80043a0:	4601      	mov	r1, r0
 80043a2:	4638      	mov	r0, r7
 80043a4:	f7fc fdba 	bl	8000f1c <__aeabi_fdiv>
 80043a8:	4601      	mov	r1, r0
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7fc fbfa 	bl	8000ba4 <__addsf3>
 80043b0:	4604      	mov	r4, r0
				count = count * 10;
 80043b2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80043b6:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043b8:	f1b8 0f04 	cmp.w	r8, #4
 80043bc:	f108 0701 	add.w	r7, r8, #1
 80043c0:	d090      	beq.n	80042e4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043c2:	5de8      	ldrb	r0, [r5, r7]
 80043c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d94c      	bls.n	8004466 <translate_keypad+0x24e>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043cc:	2f03      	cmp	r7, #3
 80043ce:	d189      	bne.n	80042e4 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043d0:	7928      	ldrb	r0, [r5, #4]
 80043d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	d884      	bhi.n	80042e4 <translate_keypad+0xcc>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80043da:	f7fc fc97 	bl	8000d0c <__aeabi_i2f>
 80043de:	4949      	ldr	r1, [pc, #292]	; (8004504 <translate_keypad+0x2ec>)
 80043e0:	f7fc fbde 	bl	8000ba0 <__aeabi_fsub>
 80043e4:	4605      	mov	r5, r0
 80043e6:	4630      	mov	r0, r6
 80043e8:	f7fc fc90 	bl	8000d0c <__aeabi_i2f>
 80043ec:	4601      	mov	r1, r0
 80043ee:	4628      	mov	r0, r5
 80043f0:	f7fc fd94 	bl	8000f1c <__aeabi_fdiv>
 80043f4:	4601      	mov	r1, r0
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7fc fbd4 	bl	8000ba4 <__addsf3>
 80043fc:	4604      	mov	r4, r0
}
 80043fe:	4620      	mov	r0, r4
 8004400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 8004404:	78eb      	ldrb	r3, [r5, #3]
 8004406:	2b2e      	cmp	r3, #46	; 0x2e
 8004408:	f43f af6f 	beq.w	80042ea <translate_keypad+0xd2>
 800440c:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 800440e:	2b2e      	cmp	r3, #46	; 0x2e
 8004410:	bf0c      	ite	eq
 8004412:	f04f 0904 	moveq.w	r9, #4
 8004416:	f04f 0902 	movne.w	r9, #2
 800441a:	e76d      	b.n	80042f8 <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800441c:	2700      	movs	r7, #0
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800441e:	f7fc fc75 	bl	8000d0c <__aeabi_i2f>
 8004422:	2100      	movs	r1, #0
 8004424:	f7fc fbbe 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004428:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800442a:	4604      	mov	r4, r0
				count = count * 10;
 800442c:	e76e      	b.n	800430c <translate_keypad+0xf4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 800442e:	2701      	movs	r7, #1
	float num = 0;
 8004430:	2400      	movs	r4, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004432:	f7fc fc6b 	bl	8000d0c <__aeabi_i2f>
 8004436:	4933      	ldr	r1, [pc, #204]	; (8004504 <translate_keypad+0x2ec>)
 8004438:	f7fc fbb2 	bl	8000ba0 <__aeabi_fsub>
 800443c:	4932      	ldr	r1, [pc, #200]	; (8004508 <translate_keypad+0x2f0>)
 800443e:	f7fc fd6d 	bl	8000f1c <__aeabi_fdiv>
 8004442:	4601      	mov	r1, r0
 8004444:	4620      	mov	r0, r4
 8004446:	f7fc fbad 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800444a:	2664      	movs	r6, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800444c:	4604      	mov	r4, r0
				count = count * 10;
 800444e:	e794      	b.n	800437a <translate_keypad+0x162>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004450:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 8004454:	b2c3      	uxtb	r3, r0
 8004456:	2b09      	cmp	r3, #9
 8004458:	f04f 0901 	mov.w	r9, #1
 800445c:	d9de      	bls.n	800441c <translate_keypad+0x204>
	float num = 0;
 800445e:	2400      	movs	r4, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004460:	f109 0701 	add.w	r7, r9, #1
 8004464:	e783      	b.n	800436e <translate_keypad+0x156>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004466:	f7fc fc51 	bl	8000d0c <__aeabi_i2f>
 800446a:	4926      	ldr	r1, [pc, #152]	; (8004504 <translate_keypad+0x2ec>)
 800446c:	f7fc fb98 	bl	8000ba0 <__aeabi_fsub>
 8004470:	4680      	mov	r8, r0
 8004472:	4630      	mov	r0, r6
 8004474:	f7fc fc4a 	bl	8000d0c <__aeabi_i2f>
 8004478:	4601      	mov	r1, r0
 800447a:	4640      	mov	r0, r8
 800447c:	f7fc fd4e 	bl	8000f1c <__aeabi_fdiv>
 8004480:	4601      	mov	r1, r0
 8004482:	4620      	mov	r0, r4
 8004484:	f7fc fb8e 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004488:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800448c:	4604      	mov	r4, r0
				count = count * 10;
 800448e:	0076      	lsls	r6, r6, #1
 8004490:	e79c      	b.n	80043cc <translate_keypad+0x1b4>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004492:	fb06 f000 	mul.w	r0, r6, r0
 8004496:	f7fc fc39 	bl	8000d0c <__aeabi_i2f>
 800449a:	4601      	mov	r1, r0
 800449c:	4620      	mov	r0, r4
 800449e:	f7fc fb81 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80044a2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80044a6:	4604      	mov	r4, r0
				count = count * 10;
 80044a8:	0076      	lsls	r6, r6, #1
 80044aa:	e750      	b.n	800434e <translate_keypad+0x136>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80044ac:	f7fc fc2e 	bl	8000d0c <__aeabi_i2f>
 80044b0:	2100      	movs	r1, #0
 80044b2:	f7fc fb77 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80044b6:	250a      	movs	r5, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80044b8:	4604      	mov	r4, r0
				count = count * 10;
 80044ba:	e6d2      	b.n	8004262 <translate_keypad+0x4a>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80044bc:	fb06 f008 	mul.w	r0, r6, r8
 80044c0:	f7fc fc24 	bl	8000d0c <__aeabi_i2f>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7fc fb6c 	bl	8000ba4 <__addsf3>
 80044cc:	4604      	mov	r4, r0
				count = count * 10;
 80044ce:	e749      	b.n	8004364 <translate_keypad+0x14c>
	for(int i = 0; i < keypadlength; i++){
 80044d0:	f04f 0904 	mov.w	r9, #4
 80044d4:	e710      	b.n	80042f8 <translate_keypad+0xe0>
		for(int i = decimallocation-1; i >=0; i--){
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ba      	bne.n	8004450 <translate_keypad+0x238>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80044da:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80044de:	2b09      	cmp	r3, #9
 80044e0:	4630      	mov	r0, r6
 80044e2:	d9a4      	bls.n	800442e <translate_keypad+0x216>
 80044e4:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80044e8:	2b09      	cmp	r3, #9
 80044ea:	4638      	mov	r0, r7
 80044ec:	d804      	bhi.n	80044f8 <translate_keypad+0x2e0>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80044ee:	f04f 0802 	mov.w	r8, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80044f2:	260a      	movs	r6, #10
	float num = 0;
 80044f4:	2400      	movs	r4, #0
 80044f6:	e74a      	b.n	800438e <translate_keypad+0x176>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80044f8:	2703      	movs	r7, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80044fa:	260a      	movs	r6, #10
	float num = 0;
 80044fc:	2400      	movs	r4, #0
 80044fe:	e760      	b.n	80043c2 <translate_keypad+0x1aa>
 8004500:	2000000c 	.word	0x2000000c
 8004504:	42400000 	.word	0x42400000
 8004508:	41200000 	.word	0x41200000
 800450c:	00000000 	.word	0x00000000

08004510 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8004510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(keypaditerator < 4){
 8004514:	4e70      	ldr	r6, [pc, #448]	; (80046d8 <fill_keypad+0x1c8>)
void fill_keypad(uint8_t va, float num){
 8004516:	460d      	mov	r5, r1
	while(keypaditerator < 4){
 8004518:	f996 4000 	ldrsb.w	r4, [r6]
 800451c:	2c03      	cmp	r4, #3
 800451e:	dc2d      	bgt.n	800457c <fill_keypad+0x6c>
 8004520:	496e      	ldr	r1, [pc, #440]	; (80046dc <fill_keypad+0x1cc>)
 8004522:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 80046e0 <fill_keypad+0x1d0>
 8004526:	2700      	movs	r7, #0
			keypadarr[0] = num;
 8004528:	f04f 0b7a 	mov.w	fp, #122	; 0x7a
 800452c:	f891 9004 	ldrb.w	r9, [r1, #4]
 8004530:	f89a 8000 	ldrb.w	r8, [sl]
 8004534:	f891 e003 	ldrb.w	lr, [r1, #3]
 8004538:	788b      	ldrb	r3, [r1, #2]
 800453a:	784a      	ldrb	r2, [r1, #1]
 800453c:	f891 c000 	ldrb.w	ip, [r1]
 8004540:	b2e4      	uxtb	r4, r4
 8004542:	e004      	b.n	800454e <fill_keypad+0x3e>
	while(keypaditerator < 4){
 8004544:	469e      	mov	lr, r3
 8004546:	4613      	mov	r3, r2
 8004548:	4662      	mov	r2, ip
			keypadarr[0] = num;
 800454a:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
	while(keypaditerator < 4){
 800454e:	3401      	adds	r4, #1
			if(keypadarr[4] == '.'){
 8004550:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004554:	b2e4      	uxtb	r4, r4
			if(keypadarr[4] == '.'){
 8004556:	bf04      	itt	eq
 8004558:	2701      	moveq	r7, #1
 800455a:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800455e:	2c04      	cmp	r4, #4
 8004560:	46f1      	mov	r9, lr
 8004562:	d1ef      	bne.n	8004544 <fill_keypad+0x34>
 8004564:	f881 c001 	strb.w	ip, [r1, #1]
 8004568:	708a      	strb	r2, [r1, #2]
 800456a:	f881 e004 	strb.w	lr, [r1, #4]
 800456e:	70cb      	strb	r3, [r1, #3]
 8004570:	f881 b000 	strb.w	fp, [r1]
 8004574:	7034      	strb	r4, [r6, #0]
 8004576:	b10f      	cbz	r7, 800457c <fill_keypad+0x6c>
 8004578:	f88a 8000 	strb.w	r8, [sl]
	if(va){
 800457c:	b370      	cbz	r0, 80045dc <fill_keypad+0xcc>
		if(num <= 0.0001){
 800457e:	4628      	mov	r0, r5
 8004580:	f7fb ff6a 	bl	8000458 <__aeabi_f2d>
 8004584:	a34c      	add	r3, pc, #304	; (adr r3, 80046b8 <fill_keypad+0x1a8>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	4680      	mov	r8, r0
 800458c:	4689      	mov	r9, r1
 800458e:	f7fc fa37 	bl	8000a00 <__aeabi_dcmple>
 8004592:	2800      	cmp	r0, #0
 8004594:	d155      	bne.n	8004642 <fill_keypad+0x132>
		int temp = (int)(num * 1000);
 8004596:	4953      	ldr	r1, [pc, #332]	; (80046e4 <fill_keypad+0x1d4>)
 8004598:	4628      	mov	r0, r5
 800459a:	f7fc fc0b 	bl	8000db4 <__aeabi_fmul>
 800459e:	f7fc fdcf 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d06e      	beq.n	8004684 <fill_keypad+0x174>
					keypadarr[keypaditerator] = '.';
 80045a6:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80045aa:	494c      	ldr	r1, [pc, #304]	; (80046dc <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80045ac:	4f4e      	ldr	r7, [pc, #312]	; (80046e8 <fill_keypad+0x1d8>)
 80045ae:	fb87 3500 	smull	r3, r5, r7, r0
 80045b2:	17c3      	asrs	r3, r0, #31
 80045b4:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 80045b8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80045bc:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 80045c0:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 80045c2:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80045c4:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 80045c6:	b254      	sxtb	r4, r2
				if(keypaditerator == 1){
 80045c8:	2c01      	cmp	r4, #1
				temp = temp / 10;
 80045ca:	4618      	mov	r0, r3
				if(keypaditerator == 1){
 80045cc:	d06a      	beq.n	80046a4 <fill_keypad+0x194>
			while(temp != 0 && keypaditerator >= 0){
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d055      	beq.n	800467e <fill_keypad+0x16e>
 80045d2:	2c00      	cmp	r4, #0
 80045d4:	daeb      	bge.n	80045ae <fill_keypad+0x9e>
 80045d6:	7034      	strb	r4, [r6, #0]
}
 80045d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(num <= 0.001){
 80045dc:	4628      	mov	r0, r5
 80045de:	f7fb ff3b 	bl	8000458 <__aeabi_f2d>
 80045e2:	a337      	add	r3, pc, #220	; (adr r3, 80046c0 <fill_keypad+0x1b0>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	4680      	mov	r8, r0
 80045ea:	4689      	mov	r9, r1
 80045ec:	f7fc fa08 	bl	8000a00 <__aeabi_dcmple>
 80045f0:	b9f0      	cbnz	r0, 8004630 <fill_keypad+0x120>
		int temp = (int)(num * 100);
 80045f2:	493e      	ldr	r1, [pc, #248]	; (80046ec <fill_keypad+0x1dc>)
 80045f4:	4628      	mov	r0, r5
 80045f6:	f7fc fbdd 	bl	8000db4 <__aeabi_fmul>
 80045fa:	f7fc fda1 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 80045fe:	b388      	cbz	r0, 8004664 <fill_keypad+0x154>
					keypadarr[keypaditerator] = '.';
 8004600:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 8004604:	4935      	ldr	r1, [pc, #212]	; (80046dc <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8004606:	4f38      	ldr	r7, [pc, #224]	; (80046e8 <fill_keypad+0x1d8>)
 8004608:	fb87 3500 	smull	r3, r5, r7, r0
 800460c:	17c3      	asrs	r3, r0, #31
 800460e:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8004612:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8004616:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 800461a:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 800461c:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 800461e:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 8004620:	b254      	sxtb	r4, r2
				if(keypaditerator == 2){
 8004622:	2c02      	cmp	r4, #2
				temp = temp / 10;
 8004624:	4618      	mov	r0, r3
				if(keypaditerator == 2){
 8004626:	d015      	beq.n	8004654 <fill_keypad+0x144>
			while(temp != 0 && keypaditerator >= 0){
 8004628:	b1cb      	cbz	r3, 800465e <fill_keypad+0x14e>
 800462a:	2c00      	cmp	r4, #0
 800462c:	daec      	bge.n	8004608 <fill_keypad+0xf8>
 800462e:	e7d2      	b.n	80045d6 <fill_keypad+0xc6>
			keypadarr[4] = '0';
 8004630:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 8004632:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 8004634:	4b29      	ldr	r3, [pc, #164]	; (80046dc <fill_keypad+0x1cc>)
 8004636:	482e      	ldr	r0, [pc, #184]	; (80046f0 <fill_keypad+0x1e0>)
			keypadarr[4] = '0';
 8004638:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 800463a:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 800463c:	7032      	strb	r2, [r6, #0]
}
 800463e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			keypadarr[4] = '0';
 8004642:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 8004644:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 8004646:	4b25      	ldr	r3, [pc, #148]	; (80046dc <fill_keypad+0x1cc>)
 8004648:	482a      	ldr	r0, [pc, #168]	; (80046f4 <fill_keypad+0x1e4>)
			keypadarr[4] = '0';
 800464a:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 800464c:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 800464e:	7032      	strb	r2, [r6, #0]
}
 8004650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 8004654:	2401      	movs	r4, #1
					keypadarr[keypaditerator] = '.';
 8004656:	f881 c002 	strb.w	ip, [r1, #2]
			while(temp != 0 && keypaditerator >= 0){
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1d4      	bne.n	8004608 <fill_keypad+0xf8>
			if(keypaditerator >= 0 && num <= 9.999999){
 800465e:	1c62      	adds	r2, r4, #1
 8004660:	7034      	strb	r4, [r6, #0]
 8004662:	d0ec      	beq.n	800463e <fill_keypad+0x12e>
 8004664:	a318      	add	r3, pc, #96	; (adr r3, 80046c8 <fill_keypad+0x1b8>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	4640      	mov	r0, r8
 800466c:	4649      	mov	r1, r9
 800466e:	f7fc f9c7 	bl	8000a00 <__aeabi_dcmple>
 8004672:	b138      	cbz	r0, 8004684 <fill_keypad+0x174>
				keypadarr[keypaditerator] = '0';
 8004674:	2230      	movs	r2, #48	; 0x30
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <fill_keypad+0x1cc>)
 8004678:	551a      	strb	r2, [r3, r4]
				keypaditerator--;
 800467a:	3c01      	subs	r4, #1
 800467c:	b264      	sxtb	r4, r4
			if(keypaditerator >= 0 && num <= 0.999999){
 800467e:	1c63      	adds	r3, r4, #1
				keypaditerator--;
 8004680:	7034      	strb	r4, [r6, #0]
			if(keypaditerator >= 0 && num <= 0.999999){
 8004682:	d0dc      	beq.n	800463e <fill_keypad+0x12e>
 8004684:	a312      	add	r3, pc, #72	; (adr r3, 80046d0 <fill_keypad+0x1c0>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	4640      	mov	r0, r8
 800468c:	4649      	mov	r1, r9
 800468e:	f7fc f9b7 	bl	8000a00 <__aeabi_dcmple>
 8004692:	2800      	cmp	r0, #0
 8004694:	d0d3      	beq.n	800463e <fill_keypad+0x12e>
				keypadarr[keypaditerator] = '0';
 8004696:	2230      	movs	r2, #48	; 0x30
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <fill_keypad+0x1cc>)
				keypaditerator--;
 800469a:	1e61      	subs	r1, r4, #1
 800469c:	7031      	strb	r1, [r6, #0]
				keypadarr[keypaditerator] = '0';
 800469e:	551a      	strb	r2, [r3, r4]
}
 80046a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 80046a4:	2400      	movs	r4, #0
					keypadarr[keypaditerator] = '.';
 80046a6:	f881 c001 	strb.w	ip, [r1, #1]
			while(temp != 0 && keypaditerator >= 0){
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f47f af7f 	bne.w	80045ae <fill_keypad+0x9e>
 80046b0:	e7e5      	b.n	800467e <fill_keypad+0x16e>
 80046b2:	bf00      	nop
 80046b4:	f3af 8000 	nop.w
 80046b8:	eb1c432d 	.word	0xeb1c432d
 80046bc:	3f1a36e2 	.word	0x3f1a36e2
 80046c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80046c4:	3f50624d 	.word	0x3f50624d
 80046c8:	de7210bf 	.word	0xde7210bf
 80046cc:	4023ffff 	.word	0x4023ffff
 80046d0:	e7210be9 	.word	0xe7210be9
 80046d4:	3feffffd 	.word	0x3feffffd
 80046d8:	20000011 	.word	0x20000011
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	20000758 	.word	0x20000758
 80046e4:	447a0000 	.word	0x447a0000
 80046e8:	66666667 	.word	0x66666667
 80046ec:	42c80000 	.word	0x42c80000
 80046f0:	302e3030 	.word	0x302e3030
 80046f4:	30302e30 	.word	0x30302e30

080046f8 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046f8:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 80046fa:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046fc:	bb68      	cbnz	r0, 800475a <inc_arr_v+0x62>
 80046fe:	4c4e      	ldr	r4, [pc, #312]	; (8004838 <inc_arr_v+0x140>)
 8004700:	7822      	ldrb	r2, [r4, #0]
 8004702:	2a31      	cmp	r2, #49	; 0x31
 8004704:	d00c      	beq.n	8004720 <inc_arr_v+0x28>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004706:	2a30      	cmp	r2, #48	; 0x30
 8004708:	d076      	beq.n	80047f8 <inc_arr_v+0x100>
			if(keypadarr[pos] < '9'){
 800470a:	5ce2      	ldrb	r2, [r4, r3]
 800470c:	4619      	mov	r1, r3
 800470e:	2a38      	cmp	r2, #56	; 0x38
 8004710:	d90a      	bls.n	8004728 <inc_arr_v+0x30>
				keypadarr[pos] = '0';
 8004712:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 8004714:	1e58      	subs	r0, r3, #1
 8004716:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004718:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 800471a:	f7ff ffed 	bl	80046f8 <inc_arr_v>
 800471e:	e005      	b.n	800472c <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004720:	7861      	ldrb	r1, [r4, #1]
 8004722:	292f      	cmp	r1, #47	; 0x2f
 8004724:	d855      	bhi.n	80047d2 <inc_arr_v+0xda>
			if(keypadarr[pos] < '9'){
 8004726:	4619      	mov	r1, r3
				keypadarr[pos]++;
 8004728:	3201      	adds	r2, #1
 800472a:	5462      	strb	r2, [r4, r1]
		if(keypadarr[i] != 'z'){
 800472c:	7823      	ldrb	r3, [r4, #0]
 800472e:	2b7a      	cmp	r3, #122	; 0x7a
 8004730:	d10e      	bne.n	8004750 <inc_arr_v+0x58>
 8004732:	7863      	ldrb	r3, [r4, #1]
 8004734:	2b7a      	cmp	r3, #122	; 0x7a
 8004736:	d16d      	bne.n	8004814 <inc_arr_v+0x11c>
 8004738:	78a3      	ldrb	r3, [r4, #2]
 800473a:	2b7a      	cmp	r3, #122	; 0x7a
 800473c:	d16c      	bne.n	8004818 <inc_arr_v+0x120>
 800473e:	78e3      	ldrb	r3, [r4, #3]
 8004740:	2b7a      	cmp	r3, #122	; 0x7a
 8004742:	d16b      	bne.n	800481c <inc_arr_v+0x124>
 8004744:	7923      	ldrb	r3, [r4, #4]
 8004746:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004748:	bf18      	it	ne
 800474a:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800474c:	d101      	bne.n	8004752 <inc_arr_v+0x5a>
}
 800474e:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 8004750:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004752:	4a3a      	ldr	r2, [pc, #232]	; (800483c <inc_arr_v+0x144>)
 8004754:	3b01      	subs	r3, #1
 8004756:	7013      	strb	r3, [r2, #0]
}
 8004758:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800475a:	2801      	cmp	r0, #1
 800475c:	d113      	bne.n	8004786 <inc_arr_v+0x8e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 800475e:	4c36      	ldr	r4, [pc, #216]	; (8004838 <inc_arr_v+0x140>)
 8004760:	7822      	ldrb	r2, [r4, #0]
 8004762:	2a31      	cmp	r2, #49	; 0x31
 8004764:	d1d1      	bne.n	800470a <inc_arr_v+0x12>
 8004766:	7862      	ldrb	r2, [r4, #1]
 8004768:	2a32      	cmp	r2, #50	; 0x32
 800476a:	d027      	beq.n	80047bc <inc_arr_v+0xc4>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800476c:	2a31      	cmp	r2, #49	; 0x31
 800476e:	d1cc      	bne.n	800470a <inc_arr_v+0x12>
 8004770:	78e1      	ldrb	r1, [r4, #3]
 8004772:	2930      	cmp	r1, #48	; 0x30
 8004774:	d802      	bhi.n	800477c <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004776:	7921      	ldrb	r1, [r4, #4]
 8004778:	2930      	cmp	r1, #48	; 0x30
 800477a:	d9d4      	bls.n	8004726 <inc_arr_v+0x2e>
		keypadarr[4] = '0';
 800477c:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 800477e:	4a30      	ldr	r2, [pc, #192]	; (8004840 <inc_arr_v+0x148>)
		keypadarr[4] = '0';
 8004780:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '1';
 8004782:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 8004784:	e7d2      	b.n	800472c <inc_arr_v+0x34>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004786:	2803      	cmp	r0, #3
 8004788:	d10f      	bne.n	80047aa <inc_arr_v+0xb2>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 800478a:	4c2b      	ldr	r4, [pc, #172]	; (8004838 <inc_arr_v+0x140>)
 800478c:	7822      	ldrb	r2, [r4, #0]
 800478e:	2a31      	cmp	r2, #49	; 0x31
 8004790:	d1bb      	bne.n	800470a <inc_arr_v+0x12>
 8004792:	7862      	ldrb	r2, [r4, #1]
 8004794:	2a32      	cmp	r2, #50	; 0x32
 8004796:	d043      	beq.n	8004820 <inc_arr_v+0x128>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004798:	2a31      	cmp	r2, #49	; 0x31
 800479a:	d1b6      	bne.n	800470a <inc_arr_v+0x12>
 800479c:	78e2      	ldrb	r2, [r4, #3]
 800479e:	2a39      	cmp	r2, #57	; 0x39
 80047a0:	d1b3      	bne.n	800470a <inc_arr_v+0x12>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047a2:	7922      	ldrb	r2, [r4, #4]
 80047a4:	2a30      	cmp	r2, #48	; 0x30
 80047a6:	d9b4      	bls.n	8004712 <inc_arr_v+0x1a>
 80047a8:	e7e8      	b.n	800477c <inc_arr_v+0x84>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80047aa:	2804      	cmp	r0, #4
 80047ac:	d10d      	bne.n	80047ca <inc_arr_v+0xd2>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80047ae:	4c22      	ldr	r4, [pc, #136]	; (8004838 <inc_arr_v+0x140>)
 80047b0:	7822      	ldrb	r2, [r4, #0]
 80047b2:	2a31      	cmp	r2, #49	; 0x31
 80047b4:	d1a9      	bne.n	800470a <inc_arr_v+0x12>
 80047b6:	7862      	ldrb	r2, [r4, #1]
 80047b8:	2a32      	cmp	r2, #50	; 0x32
 80047ba:	d1a6      	bne.n	800470a <inc_arr_v+0x12>
 80047bc:	78e2      	ldrb	r2, [r4, #3]
 80047be:	2a30      	cmp	r2, #48	; 0x30
 80047c0:	d1a3      	bne.n	800470a <inc_arr_v+0x12>
 80047c2:	7922      	ldrb	r2, [r4, #4]
 80047c4:	2a30      	cmp	r2, #48	; 0x30
 80047c6:	d1a0      	bne.n	800470a <inc_arr_v+0x12>
 80047c8:	e7d8      	b.n	800477c <inc_arr_v+0x84>
		if(pos >= 0 && pos != 2){
 80047ca:	2800      	cmp	r0, #0
 80047cc:	da0e      	bge.n	80047ec <inc_arr_v+0xf4>
 80047ce:	4c1a      	ldr	r4, [pc, #104]	; (8004838 <inc_arr_v+0x140>)
 80047d0:	e7ac      	b.n	800472c <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80047d2:	78e0      	ldrb	r0, [r4, #3]
 80047d4:	282f      	cmp	r0, #47	; 0x2f
 80047d6:	d998      	bls.n	800470a <inc_arr_v+0x12>
 80047d8:	7920      	ldrb	r0, [r4, #4]
 80047da:	282f      	cmp	r0, #47	; 0x2f
 80047dc:	d8ce      	bhi.n	800477c <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047de:	2a30      	cmp	r2, #48	; 0x30
 80047e0:	d193      	bne.n	800470a <inc_arr_v+0x12>
 80047e2:	2931      	cmp	r1, #49	; 0x31
 80047e4:	d80e      	bhi.n	8004804 <inc_arr_v+0x10c>
			if(keypadarr[pos] < '9'){
 80047e6:	2100      	movs	r1, #0
 80047e8:	7822      	ldrb	r2, [r4, #0]
 80047ea:	e79d      	b.n	8004728 <inc_arr_v+0x30>
		if(pos >= 0 && pos != 2){
 80047ec:	2802      	cmp	r0, #2
 80047ee:	d120      	bne.n	8004832 <inc_arr_v+0x13a>
			inc_arr_v(pos-1);
 80047f0:	2001      	movs	r0, #1
 80047f2:	f7ff ff81 	bl	80046f8 <inc_arr_v>
 80047f6:	e7ea      	b.n	80047ce <inc_arr_v+0xd6>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80047f8:	7861      	ldrb	r1, [r4, #1]
 80047fa:	2932      	cmp	r1, #50	; 0x32
 80047fc:	d9f1      	bls.n	80047e2 <inc_arr_v+0xea>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80047fe:	78e0      	ldrb	r0, [r4, #3]
 8004800:	282f      	cmp	r0, #47	; 0x2f
 8004802:	d8e9      	bhi.n	80047d8 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004804:	78e2      	ldrb	r2, [r4, #3]
 8004806:	2a30      	cmp	r2, #48	; 0x30
 8004808:	d8b8      	bhi.n	800477c <inc_arr_v+0x84>
 800480a:	7922      	ldrb	r2, [r4, #4]
 800480c:	2a30      	cmp	r2, #48	; 0x30
 800480e:	f67f af7c 	bls.w	800470a <inc_arr_v+0x12>
 8004812:	e7b3      	b.n	800477c <inc_arr_v+0x84>
	for(int i = 0; i < keypadlength; i++){
 8004814:	2301      	movs	r3, #1
 8004816:	e79c      	b.n	8004752 <inc_arr_v+0x5a>
 8004818:	2302      	movs	r3, #2
 800481a:	e79a      	b.n	8004752 <inc_arr_v+0x5a>
 800481c:	2303      	movs	r3, #3
 800481e:	e798      	b.n	8004752 <inc_arr_v+0x5a>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004820:	78e2      	ldrb	r2, [r4, #3]
 8004822:	2a30      	cmp	r2, #48	; 0x30
 8004824:	f47f af71 	bne.w	800470a <inc_arr_v+0x12>
 8004828:	7922      	ldrb	r2, [r4, #4]
 800482a:	2a2f      	cmp	r2, #47	; 0x2f
 800482c:	f67f af6d 	bls.w	800470a <inc_arr_v+0x12>
 8004830:	e7a4      	b.n	800477c <inc_arr_v+0x84>
 8004832:	4c01      	ldr	r4, [pc, #4]	; (8004838 <inc_arr_v+0x140>)
 8004834:	e769      	b.n	800470a <inc_arr_v+0x12>
 8004836:	bf00      	nop
 8004838:	2000000c 	.word	0x2000000c
 800483c:	20000011 	.word	0x20000011
 8004840:	302e3231 	.word	0x302e3231

08004844 <inc_arr_a>:
void inc_arr_a(int8_t pos){
 8004844:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8004846:	b9b0      	cbnz	r0, 8004876 <inc_arr_a+0x32>
 8004848:	4c40      	ldr	r4, [pc, #256]	; (800494c <inc_arr_a+0x108>)
		keypadarr[4] = '0';
 800484a:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 800484c:	4a40      	ldr	r2, [pc, #256]	; (8004950 <inc_arr_a+0x10c>)
		keypadarr[4] = '0';
 800484e:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004850:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004852:	7823      	ldrb	r3, [r4, #0]
 8004854:	2b7a      	cmp	r3, #122	; 0x7a
 8004856:	d118      	bne.n	800488a <inc_arr_a+0x46>
 8004858:	7863      	ldrb	r3, [r4, #1]
 800485a:	2b7a      	cmp	r3, #122	; 0x7a
 800485c:	d15f      	bne.n	800491e <inc_arr_a+0xda>
 800485e:	78a3      	ldrb	r3, [r4, #2]
 8004860:	2b7a      	cmp	r3, #122	; 0x7a
 8004862:	d16c      	bne.n	800493e <inc_arr_a+0xfa>
 8004864:	78e3      	ldrb	r3, [r4, #3]
 8004866:	2b7a      	cmp	r3, #122	; 0x7a
 8004868:	d16b      	bne.n	8004942 <inc_arr_a+0xfe>
 800486a:	7923      	ldrb	r3, [r4, #4]
 800486c:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 800486e:	bf18      	it	ne
 8004870:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004872:	d10b      	bne.n	800488c <inc_arr_a+0x48>
}
 8004874:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 8004876:	2802      	cmp	r0, #2
 8004878:	d00c      	beq.n	8004894 <inc_arr_a+0x50>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800487a:	2803      	cmp	r0, #3
 800487c:	d01b      	beq.n	80048b6 <inc_arr_a+0x72>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 800487e:	2804      	cmp	r0, #4
 8004880:	d031      	beq.n	80048e6 <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 8004882:	2800      	cmp	r0, #0
 8004884:	da11      	bge.n	80048aa <inc_arr_a+0x66>
 8004886:	4c31      	ldr	r4, [pc, #196]	; (800494c <inc_arr_a+0x108>)
 8004888:	e7e3      	b.n	8004852 <inc_arr_a+0xe>
	for(int i = 0; i < keypadlength; i++){
 800488a:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 800488c:	4a31      	ldr	r2, [pc, #196]	; (8004954 <inc_arr_a+0x110>)
 800488e:	3b01      	subs	r3, #1
 8004890:	7013      	strb	r3, [r2, #0]
}
 8004892:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004894:	4c2d      	ldr	r4, [pc, #180]	; (800494c <inc_arr_a+0x108>)
 8004896:	7823      	ldrb	r3, [r4, #0]
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d032      	beq.n	8004902 <inc_arr_a+0xbe>
			if(keypadarr[pos] < '9'){
 800489c:	5c23      	ldrb	r3, [r4, r0]
 800489e:	4602      	mov	r2, r0
 80048a0:	2b38      	cmp	r3, #56	; 0x38
 80048a2:	d819      	bhi.n	80048d8 <inc_arr_a+0x94>
				keypadarr[pos]++;
 80048a4:	3301      	adds	r3, #1
 80048a6:	54a3      	strb	r3, [r4, r2]
 80048a8:	e7d3      	b.n	8004852 <inc_arr_a+0xe>
		if(pos >= 0 && pos != 1){
 80048aa:	2801      	cmp	r0, #1
 80048ac:	d14b      	bne.n	8004946 <inc_arr_a+0x102>
			inc_arr_a(pos-1);
 80048ae:	2000      	movs	r0, #0
 80048b0:	f7ff ffc8 	bl	8004844 <inc_arr_a>
 80048b4:	e7e7      	b.n	8004886 <inc_arr_a+0x42>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80048b6:	4c25      	ldr	r4, [pc, #148]	; (800494c <inc_arr_a+0x108>)
 80048b8:	7823      	ldrb	r3, [r4, #0]
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	d1ee      	bne.n	800489c <inc_arr_a+0x58>
 80048be:	78a3      	ldrb	r3, [r4, #2]
 80048c0:	2b38      	cmp	r3, #56	; 0x38
 80048c2:	d035      	beq.n	8004930 <inc_arr_a+0xec>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80048c4:	78a3      	ldrb	r3, [r4, #2]
 80048c6:	2b37      	cmp	r3, #55	; 0x37
 80048c8:	d1e8      	bne.n	800489c <inc_arr_a+0x58>
 80048ca:	78e3      	ldrb	r3, [r4, #3]
 80048cc:	2b39      	cmp	r3, #57	; 0x39
 80048ce:	d1e5      	bne.n	800489c <inc_arr_a+0x58>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80048d0:	7923      	ldrb	r3, [r4, #4]
 80048d2:	2b30      	cmp	r3, #48	; 0x30
 80048d4:	d8b9      	bhi.n	800484a <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 80048d6:	2203      	movs	r2, #3
				keypadarr[pos] = '0';
 80048d8:	2330      	movs	r3, #48	; 0x30
				inc_arr_a(pos-1);
 80048da:	3801      	subs	r0, #1
 80048dc:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 80048de:	54a3      	strb	r3, [r4, r2]
				inc_arr_a(pos-1);
 80048e0:	f7ff ffb0 	bl	8004844 <inc_arr_a>
 80048e4:	e7b5      	b.n	8004852 <inc_arr_a+0xe>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80048e6:	4c19      	ldr	r4, [pc, #100]	; (800494c <inc_arr_a+0x108>)
 80048e8:	7823      	ldrb	r3, [r4, #0]
 80048ea:	2b30      	cmp	r3, #48	; 0x30
 80048ec:	d1d6      	bne.n	800489c <inc_arr_a+0x58>
 80048ee:	78a3      	ldrb	r3, [r4, #2]
 80048f0:	2b38      	cmp	r3, #56	; 0x38
 80048f2:	d1d3      	bne.n	800489c <inc_arr_a+0x58>
 80048f4:	78e3      	ldrb	r3, [r4, #3]
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	d1d0      	bne.n	800489c <inc_arr_a+0x58>
 80048fa:	7923      	ldrb	r3, [r4, #4]
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d1cd      	bne.n	800489c <inc_arr_a+0x58>
 8004900:	e7a3      	b.n	800484a <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004902:	78a3      	ldrb	r3, [r4, #2]
 8004904:	2b38      	cmp	r3, #56	; 0x38
 8004906:	d00c      	beq.n	8004922 <inc_arr_a+0xde>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004908:	78a3      	ldrb	r3, [r4, #2]
 800490a:	2b37      	cmp	r3, #55	; 0x37
 800490c:	d1c6      	bne.n	800489c <inc_arr_a+0x58>
 800490e:	78e2      	ldrb	r2, [r4, #3]
 8004910:	2a30      	cmp	r2, #48	; 0x30
 8004912:	d89a      	bhi.n	800484a <inc_arr_a+0x6>
 8004914:	7922      	ldrb	r2, [r4, #4]
 8004916:	2a30      	cmp	r2, #48	; 0x30
 8004918:	d897      	bhi.n	800484a <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 800491a:	2202      	movs	r2, #2
 800491c:	e7c2      	b.n	80048a4 <inc_arr_a+0x60>
	for(int i = 0; i < keypadlength; i++){
 800491e:	2301      	movs	r3, #1
 8004920:	e7b4      	b.n	800488c <inc_arr_a+0x48>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004922:	78e3      	ldrb	r3, [r4, #3]
 8004924:	2b30      	cmp	r3, #48	; 0x30
 8004926:	d1ef      	bne.n	8004908 <inc_arr_a+0xc4>
 8004928:	7923      	ldrb	r3, [r4, #4]
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d1ec      	bne.n	8004908 <inc_arr_a+0xc4>
 800492e:	e78c      	b.n	800484a <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004930:	78e3      	ldrb	r3, [r4, #3]
 8004932:	2b30      	cmp	r3, #48	; 0x30
 8004934:	d1c6      	bne.n	80048c4 <inc_arr_a+0x80>
 8004936:	7923      	ldrb	r3, [r4, #4]
 8004938:	2b2f      	cmp	r3, #47	; 0x2f
 800493a:	d886      	bhi.n	800484a <inc_arr_a+0x6>
 800493c:	e7c2      	b.n	80048c4 <inc_arr_a+0x80>
	for(int i = 0; i < keypadlength; i++){
 800493e:	2302      	movs	r3, #2
 8004940:	e7a4      	b.n	800488c <inc_arr_a+0x48>
 8004942:	2303      	movs	r3, #3
 8004944:	e7a2      	b.n	800488c <inc_arr_a+0x48>
 8004946:	4c01      	ldr	r4, [pc, #4]	; (800494c <inc_arr_a+0x108>)
 8004948:	e7a8      	b.n	800489c <inc_arr_a+0x58>
 800494a:	bf00      	nop
 800494c:	2000000c 	.word	0x2000000c
 8004950:	30382e30 	.word	0x30382e30
 8004954:	20000011 	.word	0x20000011

08004958 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 8004958:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800495a:	4603      	mov	r3, r0
 800495c:	4c45      	ldr	r4, [pc, #276]	; (8004a74 <dec_arr_v+0x11c>)
 800495e:	b9c8      	cbnz	r0, 8004994 <dec_arr_v+0x3c>
 8004960:	7822      	ldrb	r2, [r4, #0]
 8004962:	2a30      	cmp	r2, #48	; 0x30
 8004964:	d01e      	beq.n	80049a4 <dec_arr_v+0x4c>
			if(keypadarr[pos] > '0'){
 8004966:	5ce2      	ldrb	r2, [r4, r3]
 8004968:	2a30      	cmp	r2, #48	; 0x30
 800496a:	d960      	bls.n	8004a2e <dec_arr_v+0xd6>
				keypadarr[pos]--;
 800496c:	3a01      	subs	r2, #1
 800496e:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 8004970:	7823      	ldrb	r3, [r4, #0]
 8004972:	2b7a      	cmp	r3, #122	; 0x7a
 8004974:	d156      	bne.n	8004a24 <dec_arr_v+0xcc>
 8004976:	7863      	ldrb	r3, [r4, #1]
 8004978:	2b7a      	cmp	r3, #122	; 0x7a
 800497a:	d15f      	bne.n	8004a3c <dec_arr_v+0xe4>
 800497c:	78a3      	ldrb	r3, [r4, #2]
 800497e:	2b7a      	cmp	r3, #122	; 0x7a
 8004980:	d15e      	bne.n	8004a40 <dec_arr_v+0xe8>
 8004982:	78e3      	ldrb	r3, [r4, #3]
 8004984:	2b7a      	cmp	r3, #122	; 0x7a
 8004986:	d15d      	bne.n	8004a44 <dec_arr_v+0xec>
 8004988:	7923      	ldrb	r3, [r4, #4]
 800498a:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 800498c:	bf18      	it	ne
 800498e:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004990:	d149      	bne.n	8004a26 <dec_arr_v+0xce>
}
 8004992:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004994:	2801      	cmp	r0, #1
 8004996:	d10a      	bne.n	80049ae <dec_arr_v+0x56>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004998:	7822      	ldrb	r2, [r4, #0]
 800499a:	2a30      	cmp	r2, #48	; 0x30
 800499c:	d1e3      	bne.n	8004966 <dec_arr_v+0xe>
 800499e:	7862      	ldrb	r2, [r4, #1]
 80049a0:	2a30      	cmp	r2, #48	; 0x30
 80049a2:	d1e0      	bne.n	8004966 <dec_arr_v+0xe>
		keypadarr[4] = '0';
 80049a4:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 80049a6:	4a34      	ldr	r2, [pc, #208]	; (8004a78 <dec_arr_v+0x120>)
		keypadarr[4] = '0';
 80049a8:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 80049aa:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 80049ac:	e7e0      	b.n	8004970 <dec_arr_v+0x18>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80049ae:	2803      	cmp	r0, #3
 80049b0:	d02e      	beq.n	8004a10 <dec_arr_v+0xb8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 80049b2:	2804      	cmp	r0, #4
 80049b4:	d10c      	bne.n	80049d0 <dec_arr_v+0x78>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80049b6:	7822      	ldrb	r2, [r4, #0]
 80049b8:	2a30      	cmp	r2, #48	; 0x30
 80049ba:	d1d4      	bne.n	8004966 <dec_arr_v+0xe>
 80049bc:	7862      	ldrb	r2, [r4, #1]
 80049be:	2a30      	cmp	r2, #48	; 0x30
 80049c0:	d1d1      	bne.n	8004966 <dec_arr_v+0xe>
 80049c2:	78e2      	ldrb	r2, [r4, #3]
 80049c4:	2a30      	cmp	r2, #48	; 0x30
 80049c6:	d1ce      	bne.n	8004966 <dec_arr_v+0xe>
 80049c8:	7922      	ldrb	r2, [r4, #4]
 80049ca:	2a30      	cmp	r2, #48	; 0x30
 80049cc:	d1cb      	bne.n	8004966 <dec_arr_v+0xe>
 80049ce:	e7e9      	b.n	80049a4 <dec_arr_v+0x4c>
		if(pos <= 4 && pos != 2){
 80049d0:	dcce      	bgt.n	8004970 <dec_arr_v+0x18>
 80049d2:	2802      	cmp	r0, #2
 80049d4:	d1c7      	bne.n	8004966 <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80049d6:	7823      	ldrb	r3, [r4, #0]
 80049d8:	2b30      	cmp	r3, #48	; 0x30
 80049da:	7863      	ldrb	r3, [r4, #1]
 80049dc:	d034      	beq.n	8004a48 <dec_arr_v+0xf0>
			if(keypadarr[pos] > '0'){
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d93a      	bls.n	8004a58 <dec_arr_v+0x100>
				keypadarr[pos]--;
 80049e2:	3b01      	subs	r3, #1
 80049e4:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 80049e6:	7823      	ldrb	r3, [r4, #0]
 80049e8:	2b7a      	cmp	r3, #122	; 0x7a
 80049ea:	d141      	bne.n	8004a70 <dec_arr_v+0x118>
 80049ec:	7863      	ldrb	r3, [r4, #1]
 80049ee:	2b7a      	cmp	r3, #122	; 0x7a
 80049f0:	d138      	bne.n	8004a64 <dec_arr_v+0x10c>
 80049f2:	78a3      	ldrb	r3, [r4, #2]
 80049f4:	2b7a      	cmp	r3, #122	; 0x7a
 80049f6:	d137      	bne.n	8004a68 <dec_arr_v+0x110>
 80049f8:	78e3      	ldrb	r3, [r4, #3]
 80049fa:	2b7a      	cmp	r3, #122	; 0x7a
 80049fc:	d136      	bne.n	8004a6c <dec_arr_v+0x114>
 80049fe:	7923      	ldrb	r3, [r4, #4]
 8004a00:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004a02:	bf18      	it	ne
 8004a04:	2204      	movne	r2, #4
		if(keypadarr[i] != 'z'){
 8004a06:	d0b6      	beq.n	8004976 <dec_arr_v+0x1e>
			keypaditerator = i - 1;
 8004a08:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <dec_arr_v+0x124>)
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
			break;
 8004a0e:	e7af      	b.n	8004970 <dec_arr_v+0x18>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004a10:	7822      	ldrb	r2, [r4, #0]
 8004a12:	2a30      	cmp	r2, #48	; 0x30
 8004a14:	d1a7      	bne.n	8004966 <dec_arr_v+0xe>
 8004a16:	7862      	ldrb	r2, [r4, #1]
 8004a18:	2a30      	cmp	r2, #48	; 0x30
 8004a1a:	d1a4      	bne.n	8004966 <dec_arr_v+0xe>
 8004a1c:	78e2      	ldrb	r2, [r4, #3]
 8004a1e:	2a30      	cmp	r2, #48	; 0x30
 8004a20:	d1a1      	bne.n	8004966 <dec_arr_v+0xe>
 8004a22:	e7bf      	b.n	80049a4 <dec_arr_v+0x4c>
	for(int i = 0; i < keypadlength; i++){
 8004a24:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <dec_arr_v+0x124>)
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	7013      	strb	r3, [r2, #0]
}
 8004a2c:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 8004a2e:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 8004a30:	1e58      	subs	r0, r3, #1
 8004a32:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004a34:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 8004a36:	f7ff ff8f 	bl	8004958 <dec_arr_v>
 8004a3a:	e799      	b.n	8004970 <dec_arr_v+0x18>
	for(int i = 0; i < keypadlength; i++){
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e7f2      	b.n	8004a26 <dec_arr_v+0xce>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e7f0      	b.n	8004a26 <dec_arr_v+0xce>
 8004a44:	2303      	movs	r3, #3
 8004a46:	e7ee      	b.n	8004a26 <dec_arr_v+0xce>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004a48:	2b30      	cmp	r3, #48	; 0x30
 8004a4a:	d1c8      	bne.n	80049de <dec_arr_v+0x86>
		keypadarr[2] = '.';
 8004a4c:	f243 012e 	movw	r1, #12334	; 0x302e
	for(int i = 0; i < keypadlength; i++){
 8004a50:	2200      	movs	r2, #0
		keypadarr[4] = '0';
 8004a52:	7123      	strb	r3, [r4, #4]
		keypadarr[2] = '.';
 8004a54:	8061      	strh	r1, [r4, #2]
		if(keypadarr[i] != 'z'){
 8004a56:	e7d7      	b.n	8004a08 <dec_arr_v+0xb0>
				keypadarr[pos] = '9';
 8004a58:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 8004a5a:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 8004a5c:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 8004a5e:	f7ff ff7b 	bl	8004958 <dec_arr_v>
 8004a62:	e7c0      	b.n	80049e6 <dec_arr_v+0x8e>
	for(int i = 0; i < keypadlength; i++){
 8004a64:	2201      	movs	r2, #1
 8004a66:	e7cf      	b.n	8004a08 <dec_arr_v+0xb0>
 8004a68:	2202      	movs	r2, #2
 8004a6a:	e7cd      	b.n	8004a08 <dec_arr_v+0xb0>
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	e7cb      	b.n	8004a08 <dec_arr_v+0xb0>
 8004a70:	2200      	movs	r2, #0
 8004a72:	e7c9      	b.n	8004a08 <dec_arr_v+0xb0>
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	302e3030 	.word	0x302e3030
 8004a7c:	20000011 	.word	0x20000011

08004a80 <dec_arr_a>:
void dec_arr_a(int8_t pos){
 8004a80:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004a82:	4603      	mov	r3, r0
 8004a84:	4c43      	ldr	r4, [pc, #268]	; (8004b94 <dec_arr_a+0x114>)
 8004a86:	b940      	cbnz	r0, 8004a9a <dec_arr_a+0x1a>
 8004a88:	7822      	ldrb	r2, [r4, #0]
 8004a8a:	2a30      	cmp	r2, #48	; 0x30
 8004a8c:	d035      	beq.n	8004afa <dec_arr_a+0x7a>
			if(keypadarr[pos] > '0'){
 8004a8e:	5ce2      	ldrb	r2, [r4, r3]
 8004a90:	2a30      	cmp	r2, #48	; 0x30
 8004a92:	d95d      	bls.n	8004b50 <dec_arr_a+0xd0>
				keypadarr[pos]--;
 8004a94:	3a01      	subs	r2, #1
 8004a96:	54e2      	strb	r2, [r4, r3]
 8004a98:	e033      	b.n	8004b02 <dec_arr_a+0x82>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004a9a:	2801      	cmp	r0, #1
 8004a9c:	d11d      	bne.n	8004ada <dec_arr_a+0x5a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004a9e:	7823      	ldrb	r3, [r4, #0]
 8004aa0:	2b30      	cmp	r3, #48	; 0x30
 8004aa2:	d051      	beq.n	8004b48 <dec_arr_a+0xc8>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004aa4:	7823      	ldrb	r3, [r4, #0]
 8004aa6:	2b30      	cmp	r3, #48	; 0x30
 8004aa8:	d066      	beq.n	8004b78 <dec_arr_a+0xf8>
			if(keypadarr[pos] > '0'){
 8004aaa:	d95a      	bls.n	8004b62 <dec_arr_a+0xe2>
				keypadarr[pos]--;
 8004aac:	3b01      	subs	r3, #1
 8004aae:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004ab0:	7823      	ldrb	r3, [r4, #0]
 8004ab2:	2b7a      	cmp	r3, #122	; 0x7a
 8004ab4:	d16b      	bne.n	8004b8e <dec_arr_a+0x10e>
 8004ab6:	7863      	ldrb	r3, [r4, #1]
 8004ab8:	2b7a      	cmp	r3, #122	; 0x7a
 8004aba:	d162      	bne.n	8004b82 <dec_arr_a+0x102>
 8004abc:	78a3      	ldrb	r3, [r4, #2]
 8004abe:	2b7a      	cmp	r3, #122	; 0x7a
 8004ac0:	d161      	bne.n	8004b86 <dec_arr_a+0x106>
 8004ac2:	78e3      	ldrb	r3, [r4, #3]
 8004ac4:	2b7a      	cmp	r3, #122	; 0x7a
 8004ac6:	d160      	bne.n	8004b8a <dec_arr_a+0x10a>
 8004ac8:	7923      	ldrb	r3, [r4, #4]
 8004aca:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004acc:	bf18      	it	ne
 8004ace:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004ad0:	d01a      	beq.n	8004b08 <dec_arr_a+0x88>
			keypaditerator = i - 1;
 8004ad2:	4a31      	ldr	r2, [pc, #196]	; (8004b98 <dec_arr_a+0x118>)
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	7013      	strb	r3, [r2, #0]
			break;
 8004ad8:	e013      	b.n	8004b02 <dec_arr_a+0x82>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004ada:	2803      	cmp	r0, #3
 8004adc:	d023      	beq.n	8004b26 <dec_arr_a+0xa6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004ade:	2804      	cmp	r0, #4
 8004ae0:	d130      	bne.n	8004b44 <dec_arr_a+0xc4>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 8004ae2:	7822      	ldrb	r2, [r4, #0]
 8004ae4:	2a30      	cmp	r2, #48	; 0x30
 8004ae6:	d1d2      	bne.n	8004a8e <dec_arr_a+0xe>
 8004ae8:	78a2      	ldrb	r2, [r4, #2]
 8004aea:	2a30      	cmp	r2, #48	; 0x30
 8004aec:	d1cf      	bne.n	8004a8e <dec_arr_a+0xe>
 8004aee:	78e2      	ldrb	r2, [r4, #3]
 8004af0:	2a30      	cmp	r2, #48	; 0x30
 8004af2:	d1cc      	bne.n	8004a8e <dec_arr_a+0xe>
 8004af4:	7922      	ldrb	r2, [r4, #4]
 8004af6:	2a30      	cmp	r2, #48	; 0x30
 8004af8:	d1c9      	bne.n	8004a8e <dec_arr_a+0xe>
		keypadarr[4] = '0';
 8004afa:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 8004afc:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <dec_arr_a+0x11c>)
		keypadarr[4] = '0';
 8004afe:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004b00:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 8004b02:	7823      	ldrb	r3, [r4, #0]
 8004b04:	2b7a      	cmp	r3, #122	; 0x7a
 8004b06:	d118      	bne.n	8004b3a <dec_arr_a+0xba>
 8004b08:	7863      	ldrb	r3, [r4, #1]
 8004b0a:	2b7a      	cmp	r3, #122	; 0x7a
 8004b0c:	d127      	bne.n	8004b5e <dec_arr_a+0xde>
 8004b0e:	78a3      	ldrb	r3, [r4, #2]
 8004b10:	2b7a      	cmp	r3, #122	; 0x7a
 8004b12:	d12d      	bne.n	8004b70 <dec_arr_a+0xf0>
 8004b14:	78e3      	ldrb	r3, [r4, #3]
 8004b16:	2b7a      	cmp	r3, #122	; 0x7a
 8004b18:	d12c      	bne.n	8004b74 <dec_arr_a+0xf4>
 8004b1a:	7923      	ldrb	r3, [r4, #4]
 8004b1c:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004b1e:	bf18      	it	ne
 8004b20:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004b22:	d10b      	bne.n	8004b3c <dec_arr_a+0xbc>
}
 8004b24:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004b26:	7822      	ldrb	r2, [r4, #0]
 8004b28:	2a30      	cmp	r2, #48	; 0x30
 8004b2a:	d1b0      	bne.n	8004a8e <dec_arr_a+0xe>
 8004b2c:	78a2      	ldrb	r2, [r4, #2]
 8004b2e:	2a30      	cmp	r2, #48	; 0x30
 8004b30:	d1ad      	bne.n	8004a8e <dec_arr_a+0xe>
 8004b32:	78e2      	ldrb	r2, [r4, #3]
 8004b34:	2a30      	cmp	r2, #48	; 0x30
 8004b36:	d1aa      	bne.n	8004a8e <dec_arr_a+0xe>
 8004b38:	e7df      	b.n	8004afa <dec_arr_a+0x7a>
	for(int i = 0; i < keypadlength; i++){
 8004b3a:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <dec_arr_a+0x118>)
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	7013      	strb	r3, [r2, #0]
}
 8004b42:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 8004b44:	dcdd      	bgt.n	8004b02 <dec_arr_a+0x82>
 8004b46:	e7a2      	b.n	8004a8e <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004b48:	78a3      	ldrb	r3, [r4, #2]
 8004b4a:	2b30      	cmp	r3, #48	; 0x30
 8004b4c:	d1aa      	bne.n	8004aa4 <dec_arr_a+0x24>
 8004b4e:	e7d4      	b.n	8004afa <dec_arr_a+0x7a>
				keypadarr[pos] = '9';
 8004b50:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004b56:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 8004b58:	f7ff ff92 	bl	8004a80 <dec_arr_a>
 8004b5c:	e7d1      	b.n	8004b02 <dec_arr_a+0x82>
	for(int i = 0; i < keypadlength; i++){
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e7ec      	b.n	8004b3c <dec_arr_a+0xbc>
				keypadarr[pos] = '9';
 8004b62:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 8004b68:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 8004b6a:	f7ff ff89 	bl	8004a80 <dec_arr_a>
 8004b6e:	e79f      	b.n	8004ab0 <dec_arr_a+0x30>
	for(int i = 0; i < keypadlength; i++){
 8004b70:	2302      	movs	r3, #2
 8004b72:	e7e3      	b.n	8004b3c <dec_arr_a+0xbc>
 8004b74:	2303      	movs	r3, #3
 8004b76:	e7e1      	b.n	8004b3c <dec_arr_a+0xbc>
		keypadarr[1] = '.';
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <dec_arr_a+0x120>)
	for(int i = 0; i < keypadlength; i++){
 8004b7a:	2300      	movs	r3, #0
		keypadarr[1] = '.';
 8004b7c:	f8c4 2001 	str.w	r2, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004b80:	e7a7      	b.n	8004ad2 <dec_arr_a+0x52>
	for(int i = 0; i < keypadlength; i++){
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7a5      	b.n	8004ad2 <dec_arr_a+0x52>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e7a3      	b.n	8004ad2 <dec_arr_a+0x52>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e7a1      	b.n	8004ad2 <dec_arr_a+0x52>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e79f      	b.n	8004ad2 <dec_arr_a+0x52>
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c
 8004b98:	20000011 	.word	0x20000011
 8004b9c:	30302e30 	.word	0x30302e30
 8004ba0:	3030302e 	.word	0x3030302e
 8004ba4:	00000000 	.word	0x00000000

08004ba8 <keypad_sm>:
void keypad_sm(char num){
 8004ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(kpenum == WAIT){
 8004bac:	4caa      	ldr	r4, [pc, #680]	; (8004e58 <keypad_sm+0x2b0>)
 8004bae:	7822      	ldrb	r2, [r4, #0]
 8004bb0:	b9da      	cbnz	r2, 8004bea <keypad_sm+0x42>
		if(num == 'A'){
 8004bb2:	2841      	cmp	r0, #65	; 0x41
 8004bb4:	d075      	beq.n	8004ca2 <keypad_sm+0xfa>
		else if(num == 'B'){
 8004bb6:	2842      	cmp	r0, #66	; 0x42
 8004bb8:	f000 811a 	beq.w	8004df0 <keypad_sm+0x248>
		else if(num == 'C'){
 8004bbc:	2843      	cmp	r0, #67	; 0x43
 8004bbe:	f000 80e3 	beq.w	8004d88 <keypad_sm+0x1e0>
		else if(num == 'D'){
 8004bc2:	2844      	cmp	r0, #68	; 0x44
 8004bc4:	f000 833b 	beq.w	800523e <keypad_sm+0x696>
		else if(num == '*'){
 8004bc8:	282a      	cmp	r0, #42	; 0x2a
 8004bca:	f000 83bd 	beq.w	8005348 <keypad_sm+0x7a0>
		else if(num == '/'){
 8004bce:	282f      	cmp	r0, #47	; 0x2f
 8004bd0:	d116      	bne.n	8004c00 <keypad_sm+0x58>
			if(toggle_chstat_main_tim){
 8004bd2:	4ba2      	ldr	r3, [pc, #648]	; (8004e5c <keypad_sm+0x2b4>)
 8004bd4:	7819      	ldrb	r1, [r3, #0]
 8004bd6:	b199      	cbz	r1, 8004c00 <keypad_sm+0x58>
				toggle_chstat_main = 1;
 8004bd8:	2401      	movs	r4, #1
 8004bda:	49a1      	ldr	r1, [pc, #644]	; (8004e60 <keypad_sm+0x2b8>)
				toggle_chstat_main_tim = 0;
 8004bdc:	701a      	strb	r2, [r3, #0]
				toggle_chstat_main = 1;
 8004bde:	700c      	strb	r4, [r1, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 8004be0:	48a0      	ldr	r0, [pc, #640]	; (8004e64 <keypad_sm+0x2bc>)
}
 8004be2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				HAL_TIM_Base_Start_IT(&htim4);
 8004be6:	f005 bff7 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
	else if(kpenum == V1){
 8004bea:	2a01      	cmp	r2, #1
 8004bec:	d00a      	beq.n	8004c04 <keypad_sm+0x5c>
	else if(kpenum == A1){
 8004bee:	2a02      	cmp	r2, #2
 8004bf0:	f000 8142 	beq.w	8004e78 <keypad_sm+0x2d0>
	else if(kpenum == V2){
 8004bf4:	2a03      	cmp	r2, #3
 8004bf6:	f000 8087 	beq.w	8004d08 <keypad_sm+0x160>
	else if(kpenum == A2){
 8004bfa:	2a04      	cmp	r2, #4
 8004bfc:	f000 8353 	beq.w	80052a6 <keypad_sm+0x6fe>
}
 8004c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004c04:	4f98      	ldr	r7, [pc, #608]	; (8004e68 <keypad_sm+0x2c0>)
 8004c06:	783a      	ldrb	r2, [r7, #0]
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	f000 8185 	beq.w	8004f18 <keypad_sm+0x370>
			if(num == 'A'){
 8004c0e:	2841      	cmp	r0, #65	; 0x41
 8004c10:	f000 83a2 	beq.w	8005358 <keypad_sm+0x7b0>
			else if(num == 'B'){
 8004c14:	2842      	cmp	r0, #66	; 0x42
 8004c16:	f000 822b 	beq.w	8005070 <keypad_sm+0x4c8>
			else if(num == 'C'){
 8004c1a:	2843      	cmp	r0, #67	; 0x43
 8004c1c:	f000 855a 	beq.w	80056d4 <keypad_sm+0xb2c>
			else if(num == 'D'){
 8004c20:	2844      	cmp	r0, #68	; 0x44
 8004c22:	f000 86d1 	beq.w	80059c8 <keypad_sm+0xe20>
			else if(num == '.'){
 8004c26:	282e      	cmp	r0, #46	; 0x2e
 8004c28:	f000 87e6 	beq.w	8005bf8 <keypad_sm+0x1050>
			else if(num >= '0' && num <= '9'){
 8004c2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004c30:	2b09      	cmp	r3, #9
 8004c32:	f201 8167 	bhi.w	8005f04 <keypad_sm+0x135c>
	while(keypaditerator < 4){
 8004c36:	4d8d      	ldr	r5, [pc, #564]	; (8004e6c <keypad_sm+0x2c4>)
 8004c38:	f995 2000 	ldrsb.w	r2, [r5]
 8004c3c:	2a03      	cmp	r2, #3
 8004c3e:	f300 824c 	bgt.w	80050da <keypad_sm+0x532>
 8004c42:	4b8b      	ldr	r3, [pc, #556]	; (8004e70 <keypad_sm+0x2c8>)
 8004c44:	4e8b      	ldr	r6, [pc, #556]	; (8004e74 <keypad_sm+0x2cc>)
 8004c46:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004c4a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004c4e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004c52:	f896 e000 	ldrb.w	lr, [r6]
 8004c56:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004c5a:	789c      	ldrb	r4, [r3, #2]
 8004c5c:	7858      	ldrb	r0, [r3, #1]
 8004c5e:	7819      	ldrb	r1, [r3, #0]
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	e003      	b.n	8004c6c <keypad_sm+0xc4>
	while(keypaditerator < 4){
 8004c64:	46a4      	mov	ip, r4
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004c6a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004c6c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004c6e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004c72:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004c74:	bf04      	itt	eq
 8004c76:	f04f 0801 	moveq.w	r8, #1
 8004c7a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004c7e:	2a04      	cmp	r2, #4
 8004c80:	46e1      	mov	r9, ip
 8004c82:	d1ef      	bne.n	8004c64 <keypad_sm+0xbc>
 8004c84:	702a      	strb	r2, [r5, #0]
 8004c86:	f883 c004 	strb.w	ip, [r3, #4]
 8004c8a:	70dc      	strb	r4, [r3, #3]
 8004c8c:	7098      	strb	r0, [r3, #2]
 8004c8e:	7059      	strb	r1, [r3, #1]
 8004c90:	f883 a000 	strb.w	sl, [r3]
 8004c94:	f1b8 0f00 	cmp.w	r8, #0
 8004c98:	f000 821f 	beq.w	80050da <keypad_sm+0x532>
 8004c9c:	f886 e000 	strb.w	lr, [r6]
 8004ca0:	e21b      	b.n	80050da <keypad_sm+0x532>
			kpenum = V1;
 8004ca2:	2301      	movs	r3, #1
	while(keypaditerator < 4){
 8004ca4:	4d71      	ldr	r5, [pc, #452]	; (8004e6c <keypad_sm+0x2c4>)
			kpenum = V1;
 8004ca6:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004ca8:	f995 1000 	ldrsb.w	r1, [r5]
 8004cac:	2903      	cmp	r1, #3
 8004cae:	dca7      	bgt.n	8004c00 <keypad_sm+0x58>
 8004cb0:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <keypad_sm+0x2c8>)
 8004cb2:	4e70      	ldr	r6, [pc, #448]	; (8004e74 <keypad_sm+0x2cc>)
			keypadarr[0] = num;
 8004cb4:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004cb8:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004cbc:	7837      	ldrb	r7, [r6, #0]
 8004cbe:	78dc      	ldrb	r4, [r3, #3]
 8004cc0:	f893 e002 	ldrb.w	lr, [r3, #2]
 8004cc4:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004cc8:	7818      	ldrb	r0, [r3, #0]
 8004cca:	b2c9      	uxtb	r1, r1
 8004ccc:	e003      	b.n	8004cd6 <keypad_sm+0x12e>
	while(keypaditerator < 4){
 8004cce:	4674      	mov	r4, lr
 8004cd0:	46e6      	mov	lr, ip
 8004cd2:	4684      	mov	ip, r0
			keypadarr[0] = num;
 8004cd4:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004cd6:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004cd8:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004cdc:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004cde:	bf04      	itt	eq
 8004ce0:	2700      	moveq	r7, #0
 8004ce2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004ce4:	2904      	cmp	r1, #4
 8004ce6:	46a0      	mov	r8, r4
 8004ce8:	d1f1      	bne.n	8004cce <keypad_sm+0x126>
 8004cea:	7029      	strb	r1, [r5, #0]
 8004cec:	711c      	strb	r4, [r3, #4]
 8004cee:	f883 e003 	strb.w	lr, [r3, #3]
 8004cf2:	f883 c002 	strb.w	ip, [r3, #2]
 8004cf6:	7058      	strb	r0, [r3, #1]
 8004cf8:	f883 9000 	strb.w	r9, [r3]
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	f43f af7f 	beq.w	8004c00 <keypad_sm+0x58>
 8004d02:	7037      	strb	r7, [r6, #0]
}
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004d08:	4f57      	ldr	r7, [pc, #348]	; (8004e68 <keypad_sm+0x2c0>)
 8004d0a:	783a      	ldrb	r2, [r7, #0]
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	f040 8165 	bne.w	8004fdc <keypad_sm+0x434>
			if(num == 'A'){
 8004d12:	2841      	cmp	r0, #65	; 0x41
 8004d14:	f000 84a8 	beq.w	8005668 <keypad_sm+0xac0>
			else if(num == 'B'){
 8004d18:	2842      	cmp	r0, #66	; 0x42
 8004d1a:	f000 8701 	beq.w	8005b20 <keypad_sm+0xf78>
			else if(num == 'C'){
 8004d1e:	2843      	cmp	r0, #67	; 0x43
 8004d20:	f000 87d7 	beq.w	8005cd2 <keypad_sm+0x112a>
			else if(num == 'D'){
 8004d24:	2844      	cmp	r0, #68	; 0x44
 8004d26:	f001 81b5 	beq.w	8006094 <keypad_sm+0x14ec>
			else if(num == '.'){
 8004d2a:	282e      	cmp	r0, #46	; 0x2e
 8004d2c:	f000 8553 	beq.w	80057d6 <keypad_sm+0xc2e>
			else if(num >= '0' && num <= '9'){
 8004d30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d34:	2b09      	cmp	r3, #9
 8004d36:	f240 854f 	bls.w	80057d8 <keypad_sm+0xc30>
			else if(num == '#'){
 8004d3a:	2823      	cmp	r0, #35	; 0x23
 8004d3c:	f001 84ec 	beq.w	8006718 <keypad_sm+0x1b70>
			else if(num == '+'){
 8004d40:	282b      	cmp	r0, #43	; 0x2b
 8004d42:	f001 84ed 	beq.w	8006720 <keypad_sm+0x1b78>
			else if(num == '-'){
 8004d46:	282d      	cmp	r0, #45	; 0x2d
 8004d48:	f001 87d0 	beq.w	8006cec <keypad_sm+0x2144>
			else if(num == 's'){
 8004d4c:	2873      	cmp	r0, #115	; 0x73
 8004d4e:	f002 8136 	beq.w	8006fbe <keypad_sm+0x2416>
			else if(num == '['){
 8004d52:	285b      	cmp	r0, #91	; 0x5b
 8004d54:	f43f af54 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == ']'){
 8004d58:	285d      	cmp	r0, #93	; 0x5d
 8004d5a:	f43f af51 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == '*'){
 8004d5e:	282a      	cmp	r0, #42	; 0x2a
 8004d60:	f002 8188 	beq.w	8007074 <keypad_sm+0x24cc>
			else if(num == '/'){
 8004d64:	282f      	cmp	r0, #47	; 0x2f
 8004d66:	f47f af4b 	bne.w	8004c00 <keypad_sm+0x58>
				if(toggle_chstat_main_tim){
 8004d6a:	4b3c      	ldr	r3, [pc, #240]	; (8004e5c <keypad_sm+0x2b4>)
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	f43f af46 	beq.w	8004c00 <keypad_sm+0x58>
					toggle_chstat_main_tim = 0;
 8004d74:	2400      	movs	r4, #0
					toggle_chstat_main = 1;
 8004d76:	2101      	movs	r1, #1
 8004d78:	4a39      	ldr	r2, [pc, #228]	; (8004e60 <keypad_sm+0x2b8>)
					toggle_chstat_main_tim = 0;
 8004d7a:	701c      	strb	r4, [r3, #0]
					toggle_chstat_main = 1;
 8004d7c:	7011      	strb	r1, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim4);
 8004d7e:	4839      	ldr	r0, [pc, #228]	; (8004e64 <keypad_sm+0x2bc>)
}
 8004d80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
					HAL_TIM_Base_Start_IT(&htim4);
 8004d84:	f005 bf28 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
			kpenum = V2;
 8004d88:	2303      	movs	r3, #3
	while(keypaditerator < 4){
 8004d8a:	4d38      	ldr	r5, [pc, #224]	; (8004e6c <keypad_sm+0x2c4>)
			kpenum = V2;
 8004d8c:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004d8e:	f995 1000 	ldrsb.w	r1, [r5]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	f73f af34 	bgt.w	8004c00 <keypad_sm+0x58>
 8004d98:	4b35      	ldr	r3, [pc, #212]	; (8004e70 <keypad_sm+0x2c8>)
 8004d9a:	4e36      	ldr	r6, [pc, #216]	; (8004e74 <keypad_sm+0x2cc>)
			keypadarr[0] = num;
 8004d9c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004da0:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004da4:	f896 e000 	ldrb.w	lr, [r6]
 8004da8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004dac:	789f      	ldrb	r7, [r3, #2]
 8004dae:	785c      	ldrb	r4, [r3, #1]
 8004db0:	7818      	ldrb	r0, [r3, #0]
 8004db2:	b2c9      	uxtb	r1, r1
 8004db4:	e003      	b.n	8004dbe <keypad_sm+0x216>
	while(keypaditerator < 4){
 8004db6:	46bc      	mov	ip, r7
 8004db8:	4627      	mov	r7, r4
 8004dba:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004dbc:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004dbe:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004dc0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004dc4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004dc6:	bf04      	itt	eq
 8004dc8:	f04f 0e00 	moveq.w	lr, #0
 8004dcc:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004dce:	2904      	cmp	r1, #4
 8004dd0:	46e0      	mov	r8, ip
 8004dd2:	d1f0      	bne.n	8004db6 <keypad_sm+0x20e>
 8004dd4:	7029      	strb	r1, [r5, #0]
 8004dd6:	f883 c004 	strb.w	ip, [r3, #4]
 8004dda:	70df      	strb	r7, [r3, #3]
 8004ddc:	709c      	strb	r4, [r3, #2]
 8004dde:	7058      	strb	r0, [r3, #1]
 8004de0:	f883 9000 	strb.w	r9, [r3]
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	f43f af0b 	beq.w	8004c00 <keypad_sm+0x58>
 8004dea:	f886 e000 	strb.w	lr, [r6]
 8004dee:	e707      	b.n	8004c00 <keypad_sm+0x58>
			kpenum = A1;
 8004df0:	2302      	movs	r3, #2
	while(keypaditerator < 4){
 8004df2:	4d1e      	ldr	r5, [pc, #120]	; (8004e6c <keypad_sm+0x2c4>)
			kpenum = A1;
 8004df4:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004df6:	f995 1000 	ldrsb.w	r1, [r5]
 8004dfa:	2903      	cmp	r1, #3
 8004dfc:	f73f af00 	bgt.w	8004c00 <keypad_sm+0x58>
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <keypad_sm+0x2c8>)
 8004e02:	4e1c      	ldr	r6, [pc, #112]	; (8004e74 <keypad_sm+0x2cc>)
			keypadarr[0] = num;
 8004e04:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004e08:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004e0c:	f896 e000 	ldrb.w	lr, [r6]
 8004e10:	78df      	ldrb	r7, [r3, #3]
 8004e12:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004e16:	785c      	ldrb	r4, [r3, #1]
 8004e18:	7818      	ldrb	r0, [r3, #0]
 8004e1a:	b2c9      	uxtb	r1, r1
 8004e1c:	e003      	b.n	8004e26 <keypad_sm+0x27e>
	while(keypaditerator < 4){
 8004e1e:	4667      	mov	r7, ip
 8004e20:	46a4      	mov	ip, r4
 8004e22:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004e24:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004e26:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004e28:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004e2c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004e2e:	bf04      	itt	eq
 8004e30:	f04f 0e00 	moveq.w	lr, #0
 8004e34:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004e36:	2904      	cmp	r1, #4
 8004e38:	46b8      	mov	r8, r7
 8004e3a:	d1f0      	bne.n	8004e1e <keypad_sm+0x276>
 8004e3c:	7029      	strb	r1, [r5, #0]
 8004e3e:	711f      	strb	r7, [r3, #4]
 8004e40:	f883 c003 	strb.w	ip, [r3, #3]
 8004e44:	709c      	strb	r4, [r3, #2]
 8004e46:	7058      	strb	r0, [r3, #1]
 8004e48:	f883 9000 	strb.w	r9, [r3]
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	f43f aed7 	beq.w	8004c00 <keypad_sm+0x58>
 8004e52:	f886 e000 	strb.w	lr, [r6]
 8004e56:	e6d3      	b.n	8004c00 <keypad_sm+0x58>
 8004e58:	20000759 	.word	0x20000759
 8004e5c:	20000018 	.word	0x20000018
 8004e60:	200009b6 	.word	0x200009b6
 8004e64:	20000694 	.word	0x20000694
 8004e68:	20000400 	.word	0x20000400
 8004e6c:	20000011 	.word	0x20000011
 8004e70:	2000000c 	.word	0x2000000c
 8004e74:	20000758 	.word	0x20000758
		if(encmode){
 8004e78:	4fb5      	ldr	r7, [pc, #724]	; (8005150 <keypad_sm+0x5a8>)
 8004e7a:	783a      	ldrb	r2, [r7, #0]
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	d07c      	beq.n	8004f7a <keypad_sm+0x3d2>
			if(num == 'A'){
 8004e80:	2841      	cmp	r0, #65	; 0x41
 8004e82:	f000 8173 	beq.w	800516c <keypad_sm+0x5c4>
			else if(num == 'B'){
 8004e86:	2842      	cmp	r0, #66	; 0x42
 8004e88:	f000 8338 	beq.w	80054fc <keypad_sm+0x954>
			else if(num == 'C'){
 8004e8c:	2843      	cmp	r0, #67	; 0x43
 8004e8e:	f000 852c 	beq.w	80058ea <keypad_sm+0xd42>
			else if(num == 'D'){
 8004e92:	2844      	cmp	r0, #68	; 0x44
 8004e94:	f000 87fd 	beq.w	8005e92 <keypad_sm+0x12ea>
			else if(num == '.'){
 8004e98:	282e      	cmp	r0, #46	; 0x2e
 8004e9a:	f001 80c2 	beq.w	8006022 <keypad_sm+0x147a>
			else if(num >= '0' && num <= '9'){
 8004e9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004ea2:	2b09      	cmp	r3, #9
 8004ea4:	f201 8173 	bhi.w	800618e <keypad_sm+0x15e6>
	while(keypaditerator < 4){
 8004ea8:	4daa      	ldr	r5, [pc, #680]	; (8005154 <keypad_sm+0x5ac>)
 8004eaa:	f995 2000 	ldrsb.w	r2, [r5]
 8004eae:	2a03      	cmp	r2, #3
 8004eb0:	f300 8113 	bgt.w	80050da <keypad_sm+0x532>
 8004eb4:	4ba8      	ldr	r3, [pc, #672]	; (8005158 <keypad_sm+0x5b0>)
 8004eb6:	4ea9      	ldr	r6, [pc, #676]	; (800515c <keypad_sm+0x5b4>)
 8004eb8:	3201      	adds	r2, #1
 8004eba:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004ebe:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004ec2:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004ec6:	f896 e000 	ldrb.w	lr, [r6]
 8004eca:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004ece:	789c      	ldrb	r4, [r3, #2]
 8004ed0:	7858      	ldrb	r0, [r3, #1]
 8004ed2:	7819      	ldrb	r1, [r3, #0]
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	e003      	b.n	8004ee0 <keypad_sm+0x338>
	while(keypaditerator < 4){
 8004ed8:	46a4      	mov	ip, r4
 8004eda:	4604      	mov	r4, r0
 8004edc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004ede:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004ee0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004ee2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004ee6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004ee8:	bf04      	itt	eq
 8004eea:	f04f 0801 	moveq.w	r8, #1
 8004eee:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004ef2:	2a05      	cmp	r2, #5
 8004ef4:	46e1      	mov	r9, ip
 8004ef6:	d1ef      	bne.n	8004ed8 <keypad_sm+0x330>
 8004ef8:	f883 c004 	strb.w	ip, [r3, #4]
 8004efc:	70dc      	strb	r4, [r3, #3]
 8004efe:	7098      	strb	r0, [r3, #2]
 8004f00:	7059      	strb	r1, [r3, #1]
 8004f02:	f883 a000 	strb.w	sl, [r3]
 8004f06:	2304      	movs	r3, #4
 8004f08:	702b      	strb	r3, [r5, #0]
 8004f0a:	f1b8 0f00 	cmp.w	r8, #0
 8004f0e:	f000 80e4 	beq.w	80050da <keypad_sm+0x532>
 8004f12:	f886 e000 	strb.w	lr, [r6]
 8004f16:	e0e0      	b.n	80050da <keypad_sm+0x532>
			if(num == 'A'){
 8004f18:	2841      	cmp	r0, #65	; 0x41
 8004f1a:	f000 8265 	beq.w	80053e8 <keypad_sm+0x840>
			else if(num == 'B'){
 8004f1e:	2842      	cmp	r0, #66	; 0x42
 8004f20:	f000 80e1 	beq.w	80050e6 <keypad_sm+0x53e>
			else if(num == 'C'){
 8004f24:	2843      	cmp	r0, #67	; 0x43
 8004f26:	f000 836b 	beq.w	8005600 <keypad_sm+0xa58>
			else if(num == 'D'){
 8004f2a:	2844      	cmp	r0, #68	; 0x44
 8004f2c:	f000 85bd 	beq.w	8005aaa <keypad_sm+0xf02>
			else if(num == '.'){
 8004f30:	282e      	cmp	r0, #46	; 0x2e
 8004f32:	f001 814a 	beq.w	80061ca <keypad_sm+0x1622>
			else if(num >= '0' && num <= '9'){
 8004f36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004f3a:	2b09      	cmp	r3, #9
 8004f3c:	f240 844c 	bls.w	80057d8 <keypad_sm+0xc30>
			else if(num == '#'){
 8004f40:	2823      	cmp	r0, #35	; 0x23
 8004f42:	f001 82f8 	beq.w	8006536 <keypad_sm+0x198e>
			else if(num == '+'){
 8004f46:	282b      	cmp	r0, #43	; 0x2b
 8004f48:	f001 8156 	beq.w	80061f8 <keypad_sm+0x1650>
			else if(num == '-'){
 8004f4c:	282d      	cmp	r0, #45	; 0x2d
 8004f4e:	f001 838d 	beq.w	800666c <keypad_sm+0x1ac4>
			else if(num == 's'){
 8004f52:	2873      	cmp	r0, #115	; 0x73
 8004f54:	f001 855f 	beq.w	8006a16 <keypad_sm+0x1e6e>
			else if(num == '['){
 8004f58:	285b      	cmp	r0, #91	; 0x5b
 8004f5a:	f43f ae51 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == ']'){
 8004f5e:	285d      	cmp	r0, #93	; 0x5d
 8004f60:	f43f ae4e 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == '*'){
 8004f64:	282a      	cmp	r0, #42	; 0x2a
 8004f66:	f47f aefd 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8004f6a:	4b7d      	ldr	r3, [pc, #500]	; (8005160 <keypad_sm+0x5b8>)
 8004f6c:	4a7d      	ldr	r2, [pc, #500]	; (8005164 <keypad_sm+0x5bc>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	7013      	strb	r3, [r2, #0]
 8004f78:	e642      	b.n	8004c00 <keypad_sm+0x58>
			if(num == 'A'){
 8004f7a:	2841      	cmp	r0, #65	; 0x41
 8004f7c:	f000 812c 	beq.w	80051d8 <keypad_sm+0x630>
			else if(num == 'B'){
 8004f80:	2842      	cmp	r0, #66	; 0x42
 8004f82:	f000 83df 	beq.w	8005744 <keypad_sm+0xb9c>
			else if(num == 'C'){
 8004f86:	2843      	cmp	r0, #67	; 0x43
 8004f88:	f000 8559 	beq.w	8005a3e <keypad_sm+0xe96>
			else if(num == 'D'){
 8004f8c:	2844      	cmp	r0, #68	; 0x44
 8004f8e:	f000 866c 	beq.w	8005c6a <keypad_sm+0x10c2>
			else if(num == '.'){
 8004f92:	282e      	cmp	r0, #46	; 0x2e
 8004f94:	f001 8267 	beq.w	8006466 <keypad_sm+0x18be>
			else if(num >= '0' && num <= '9'){
 8004f98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004f9c:	2b09      	cmp	r3, #9
 8004f9e:	f240 841b 	bls.w	80057d8 <keypad_sm+0xc30>
			else if(num == '#'){
 8004fa2:	2823      	cmp	r0, #35	; 0x23
 8004fa4:	f001 8456 	beq.w	8006854 <keypad_sm+0x1cac>
			else if(num == '+'){
 8004fa8:	282b      	cmp	r0, #43	; 0x2b
 8004faa:	f001 8318 	beq.w	80065de <keypad_sm+0x1a36>
			else if(num == '-'){
 8004fae:	282d      	cmp	r0, #45	; 0x2d
 8004fb0:	f001 8418 	beq.w	80067e4 <keypad_sm+0x1c3c>
			else if(num == 's'){
 8004fb4:	2873      	cmp	r0, #115	; 0x73
 8004fb6:	f001 8772 	beq.w	8006e9e <keypad_sm+0x22f6>
			else if(num == '['){
 8004fba:	285b      	cmp	r0, #91	; 0x5b
 8004fbc:	f43f ae20 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == ']'){
 8004fc0:	285d      	cmp	r0, #93	; 0x5d
 8004fc2:	f43f ae1d 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == '*'){
 8004fc6:	282a      	cmp	r0, #42	; 0x2a
 8004fc8:	f47f aecc 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8004fcc:	4b64      	ldr	r3, [pc, #400]	; (8005160 <keypad_sm+0x5b8>)
 8004fce:	4a65      	ldr	r2, [pc, #404]	; (8005164 <keypad_sm+0x5bc>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	7013      	strb	r3, [r2, #0]
 8004fda:	e611      	b.n	8004c00 <keypad_sm+0x58>
			if(num == 'A'){
 8004fdc:	2841      	cmp	r0, #65	; 0x41
 8004fde:	f000 82d5 	beq.w	800558c <keypad_sm+0x9e4>
			else if(num == 'B'){
 8004fe2:	2842      	cmp	r0, #66	; 0x42
 8004fe4:	f000 8448 	beq.w	8005878 <keypad_sm+0xcd0>
			else if(num == 'C'){
 8004fe8:	2843      	cmp	r0, #67	; 0x43
 8004fea:	f000 86bc 	beq.w	8005d66 <keypad_sm+0x11be>
			else if(num == 'D'){
 8004fee:	2844      	cmp	r0, #68	; 0x44
 8004ff0:	f001 8088 	beq.w	8006104 <keypad_sm+0x155c>
			else if(num == '.'){
 8004ff4:	282e      	cmp	r0, #46	; 0x2e
 8004ff6:	f001 81ff 	beq.w	80063f8 <keypad_sm+0x1850>
			else if(num >= '0' && num <= '9'){
 8004ffa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	f201 81dc 	bhi.w	80063bc <keypad_sm+0x1814>
	while(keypaditerator < 4){
 8005004:	4d53      	ldr	r5, [pc, #332]	; (8005154 <keypad_sm+0x5ac>)
 8005006:	f995 2000 	ldrsb.w	r2, [r5]
 800500a:	2a03      	cmp	r2, #3
 800500c:	dc65      	bgt.n	80050da <keypad_sm+0x532>
 800500e:	4b52      	ldr	r3, [pc, #328]	; (8005158 <keypad_sm+0x5b0>)
 8005010:	4e52      	ldr	r6, [pc, #328]	; (800515c <keypad_sm+0x5b4>)
 8005012:	3201      	adds	r2, #1
 8005014:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005018:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800501c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005020:	f896 e000 	ldrb.w	lr, [r6]
 8005024:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005028:	789c      	ldrb	r4, [r3, #2]
 800502a:	7858      	ldrb	r0, [r3, #1]
 800502c:	7819      	ldrb	r1, [r3, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	e003      	b.n	800503a <keypad_sm+0x492>
	while(keypaditerator < 4){
 8005032:	46a4      	mov	ip, r4
 8005034:	4604      	mov	r4, r0
 8005036:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005038:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800503a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800503c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005040:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005042:	bf04      	itt	eq
 8005044:	f04f 0801 	moveq.w	r8, #1
 8005048:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800504c:	2a05      	cmp	r2, #5
 800504e:	46e1      	mov	r9, ip
 8005050:	d1ef      	bne.n	8005032 <keypad_sm+0x48a>
 8005052:	f883 c004 	strb.w	ip, [r3, #4]
 8005056:	70dc      	strb	r4, [r3, #3]
 8005058:	7098      	strb	r0, [r3, #2]
 800505a:	7059      	strb	r1, [r3, #1]
 800505c:	f883 a000 	strb.w	sl, [r3]
 8005060:	2304      	movs	r3, #4
 8005062:	702b      	strb	r3, [r5, #0]
 8005064:	f1b8 0f00 	cmp.w	r8, #0
 8005068:	d037      	beq.n	80050da <keypad_sm+0x532>
 800506a:	f886 e000 	strb.w	lr, [r6]
 800506e:	e034      	b.n	80050da <keypad_sm+0x532>
				kpenum = WAIT;
 8005070:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005074:	4d37      	ldr	r5, [pc, #220]	; (8005154 <keypad_sm+0x5ac>)
				kpenum = WAIT;
 8005076:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800507a:	f995 2000 	ldrsb.w	r2, [r5]
 800507e:	2a03      	cmp	r2, #3
 8005080:	dc2b      	bgt.n	80050da <keypad_sm+0x532>
 8005082:	4b35      	ldr	r3, [pc, #212]	; (8005158 <keypad_sm+0x5b0>)
 8005084:	4e35      	ldr	r6, [pc, #212]	; (800515c <keypad_sm+0x5b4>)
			keypadarr[0] = num;
 8005086:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800508a:	f893 9004 	ldrb.w	r9, [r3, #4]
 800508e:	f896 8000 	ldrb.w	r8, [r6]
 8005092:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005096:	789c      	ldrb	r4, [r3, #2]
 8005098:	7858      	ldrb	r0, [r3, #1]
 800509a:	7819      	ldrb	r1, [r3, #0]
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	e003      	b.n	80050a8 <keypad_sm+0x500>
	while(keypaditerator < 4){
 80050a0:	46a4      	mov	ip, r4
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80050a6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80050a8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80050aa:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80050ae:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80050b0:	bf04      	itt	eq
 80050b2:	f04f 0e01 	moveq.w	lr, #1
 80050b6:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80050ba:	2a04      	cmp	r2, #4
 80050bc:	46e1      	mov	r9, ip
 80050be:	d1ef      	bne.n	80050a0 <keypad_sm+0x4f8>
 80050c0:	702a      	strb	r2, [r5, #0]
 80050c2:	f883 c004 	strb.w	ip, [r3, #4]
 80050c6:	70dc      	strb	r4, [r3, #3]
 80050c8:	7098      	strb	r0, [r3, #2]
 80050ca:	7059      	strb	r1, [r3, #1]
 80050cc:	f883 a000 	strb.w	sl, [r3]
 80050d0:	f1be 0f00 	cmp.w	lr, #0
 80050d4:	d001      	beq.n	80050da <keypad_sm+0x532>
 80050d6:	f886 8000 	strb.w	r8, [r6]
				encmode = 0;
 80050da:	2300      	movs	r3, #0
				encpos = 0;
 80050dc:	4a22      	ldr	r2, [pc, #136]	; (8005168 <keypad_sm+0x5c0>)
				encmode = 0;
 80050de:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 80050e0:	7013      	strb	r3, [r2, #0]
}
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while(keypaditerator < 4){
 80050e6:	4d1b      	ldr	r5, [pc, #108]	; (8005154 <keypad_sm+0x5ac>)
				kpenum = WAIT;
 80050e8:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80050ea:	f995 1000 	ldrsb.w	r1, [r5]
 80050ee:	2903      	cmp	r1, #3
 80050f0:	f73f ad86 	bgt.w	8004c00 <keypad_sm+0x58>
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <keypad_sm+0x5b0>)
 80050f6:	4e19      	ldr	r6, [pc, #100]	; (800515c <keypad_sm+0x5b4>)
 80050f8:	3101      	adds	r1, #1
			keypadarr[0] = num;
 80050fa:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80050fe:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005102:	f896 e000 	ldrb.w	lr, [r6]
 8005106:	f893 c003 	ldrb.w	ip, [r3, #3]
 800510a:	789f      	ldrb	r7, [r3, #2]
 800510c:	785c      	ldrb	r4, [r3, #1]
 800510e:	7818      	ldrb	r0, [r3, #0]
 8005110:	b2c9      	uxtb	r1, r1
 8005112:	e003      	b.n	800511c <keypad_sm+0x574>
	while(keypaditerator < 4){
 8005114:	46bc      	mov	ip, r7
 8005116:	4627      	mov	r7, r4
 8005118:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800511a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800511c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800511e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005122:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005124:	bf04      	itt	eq
 8005126:	f04f 0e00 	moveq.w	lr, #0
 800512a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800512c:	2905      	cmp	r1, #5
 800512e:	46e0      	mov	r8, ip
 8005130:	d1f0      	bne.n	8005114 <keypad_sm+0x56c>
 8005132:	f883 c004 	strb.w	ip, [r3, #4]
 8005136:	70df      	strb	r7, [r3, #3]
 8005138:	709c      	strb	r4, [r3, #2]
 800513a:	7058      	strb	r0, [r3, #1]
 800513c:	f883 9000 	strb.w	r9, [r3]
 8005140:	2304      	movs	r3, #4
 8005142:	702b      	strb	r3, [r5, #0]
 8005144:	2a00      	cmp	r2, #0
 8005146:	f43f ad5b 	beq.w	8004c00 <keypad_sm+0x58>
 800514a:	f886 e000 	strb.w	lr, [r6]
 800514e:	e557      	b.n	8004c00 <keypad_sm+0x58>
 8005150:	20000400 	.word	0x20000400
 8005154:	20000011 	.word	0x20000011
 8005158:	2000000c 	.word	0x2000000c
 800515c:	20000758 	.word	0x20000758
 8005160:	200003f4 	.word	0x200003f4
 8005164:	200003f5 	.word	0x200003f5
 8005168:	20000401 	.word	0x20000401
				kpenum = WAIT;
 800516c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005170:	4db1      	ldr	r5, [pc, #708]	; (8005438 <keypad_sm+0x890>)
				kpenum = WAIT;
 8005172:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005176:	f995 2000 	ldrsb.w	r2, [r5]
 800517a:	2a03      	cmp	r2, #3
 800517c:	dcad      	bgt.n	80050da <keypad_sm+0x532>
 800517e:	4baf      	ldr	r3, [pc, #700]	; (800543c <keypad_sm+0x894>)
 8005180:	4eaf      	ldr	r6, [pc, #700]	; (8005440 <keypad_sm+0x898>)
			keypadarr[0] = num;
 8005182:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005186:	f893 9004 	ldrb.w	r9, [r3, #4]
 800518a:	f896 8000 	ldrb.w	r8, [r6]
 800518e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005192:	789c      	ldrb	r4, [r3, #2]
 8005194:	7858      	ldrb	r0, [r3, #1]
 8005196:	7819      	ldrb	r1, [r3, #0]
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	e003      	b.n	80051a4 <keypad_sm+0x5fc>
	while(keypaditerator < 4){
 800519c:	46a4      	mov	ip, r4
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80051a2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80051a4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80051a6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80051aa:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80051ac:	bf04      	itt	eq
 80051ae:	f04f 0e01 	moveq.w	lr, #1
 80051b2:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80051b6:	2a04      	cmp	r2, #4
 80051b8:	46e1      	mov	r9, ip
 80051ba:	d1ef      	bne.n	800519c <keypad_sm+0x5f4>
 80051bc:	702a      	strb	r2, [r5, #0]
 80051be:	f883 c004 	strb.w	ip, [r3, #4]
 80051c2:	70dc      	strb	r4, [r3, #3]
 80051c4:	7098      	strb	r0, [r3, #2]
 80051c6:	7059      	strb	r1, [r3, #1]
 80051c8:	f883 a000 	strb.w	sl, [r3]
 80051cc:	f1be 0f00 	cmp.w	lr, #0
 80051d0:	d083      	beq.n	80050da <keypad_sm+0x532>
 80051d2:	f886 8000 	strb.w	r8, [r6]
 80051d6:	e780      	b.n	80050da <keypad_sm+0x532>
 80051d8:	4d97      	ldr	r5, [pc, #604]	; (8005438 <keypad_sm+0x890>)
				kpenum = WAIT;
 80051da:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80051dc:	f995 1000 	ldrsb.w	r1, [r5]
 80051e0:	2903      	cmp	r1, #3
 80051e2:	f73f ad0d 	bgt.w	8004c00 <keypad_sm+0x58>
 80051e6:	4b95      	ldr	r3, [pc, #596]	; (800543c <keypad_sm+0x894>)
 80051e8:	4e95      	ldr	r6, [pc, #596]	; (8005440 <keypad_sm+0x898>)
			keypadarr[0] = num;
 80051ea:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80051ee:	f893 8004 	ldrb.w	r8, [r3, #4]
 80051f2:	f896 e000 	ldrb.w	lr, [r6]
 80051f6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80051fa:	789f      	ldrb	r7, [r3, #2]
 80051fc:	785c      	ldrb	r4, [r3, #1]
 80051fe:	7818      	ldrb	r0, [r3, #0]
 8005200:	b2c9      	uxtb	r1, r1
 8005202:	e003      	b.n	800520c <keypad_sm+0x664>
	while(keypaditerator < 4){
 8005204:	46bc      	mov	ip, r7
 8005206:	4627      	mov	r7, r4
 8005208:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800520a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800520c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800520e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005212:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005214:	bf04      	itt	eq
 8005216:	f04f 0e00 	moveq.w	lr, #0
 800521a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800521c:	2904      	cmp	r1, #4
 800521e:	46e0      	mov	r8, ip
 8005220:	d1f0      	bne.n	8005204 <keypad_sm+0x65c>
 8005222:	7029      	strb	r1, [r5, #0]
 8005224:	f883 c004 	strb.w	ip, [r3, #4]
 8005228:	70df      	strb	r7, [r3, #3]
 800522a:	709c      	strb	r4, [r3, #2]
 800522c:	7058      	strb	r0, [r3, #1]
 800522e:	f883 9000 	strb.w	r9, [r3]
 8005232:	2a00      	cmp	r2, #0
 8005234:	f43f ace4 	beq.w	8004c00 <keypad_sm+0x58>
 8005238:	f886 e000 	strb.w	lr, [r6]
 800523c:	e4e0      	b.n	8004c00 <keypad_sm+0x58>
			kpenum = A2;
 800523e:	2304      	movs	r3, #4
	while(keypaditerator < 4){
 8005240:	4d7d      	ldr	r5, [pc, #500]	; (8005438 <keypad_sm+0x890>)
			kpenum = A2;
 8005242:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005244:	f995 1000 	ldrsb.w	r1, [r5]
 8005248:	2903      	cmp	r1, #3
 800524a:	f73f acd9 	bgt.w	8004c00 <keypad_sm+0x58>
 800524e:	4b7b      	ldr	r3, [pc, #492]	; (800543c <keypad_sm+0x894>)
 8005250:	4e7b      	ldr	r6, [pc, #492]	; (8005440 <keypad_sm+0x898>)
			keypadarr[0] = num;
 8005252:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005256:	f893 8004 	ldrb.w	r8, [r3, #4]
 800525a:	f896 e000 	ldrb.w	lr, [r6]
 800525e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005262:	789f      	ldrb	r7, [r3, #2]
 8005264:	785c      	ldrb	r4, [r3, #1]
 8005266:	7818      	ldrb	r0, [r3, #0]
 8005268:	b2c9      	uxtb	r1, r1
 800526a:	e003      	b.n	8005274 <keypad_sm+0x6cc>
	while(keypaditerator < 4){
 800526c:	46bc      	mov	ip, r7
 800526e:	4627      	mov	r7, r4
 8005270:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005272:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005274:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005276:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800527a:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800527c:	bf04      	itt	eq
 800527e:	f04f 0e00 	moveq.w	lr, #0
 8005282:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005284:	2904      	cmp	r1, #4
 8005286:	46e0      	mov	r8, ip
 8005288:	d1f0      	bne.n	800526c <keypad_sm+0x6c4>
 800528a:	7029      	strb	r1, [r5, #0]
 800528c:	f883 c004 	strb.w	ip, [r3, #4]
 8005290:	70df      	strb	r7, [r3, #3]
 8005292:	709c      	strb	r4, [r3, #2]
 8005294:	7058      	strb	r0, [r3, #1]
 8005296:	f883 9000 	strb.w	r9, [r3]
 800529a:	2a00      	cmp	r2, #0
 800529c:	f43f acb0 	beq.w	8004c00 <keypad_sm+0x58>
 80052a0:	f886 e000 	strb.w	lr, [r6]
 80052a4:	e4ac      	b.n	8004c00 <keypad_sm+0x58>
		if(encmode){
 80052a6:	4f67      	ldr	r7, [pc, #412]	; (8005444 <keypad_sm+0x89c>)
 80052a8:	783a      	ldrb	r2, [r7, #0]
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	f000 80f4 	beq.w	8005498 <keypad_sm+0x8f0>
			if(num == 'A'){
 80052b0:	2841      	cmp	r0, #65	; 0x41
 80052b2:	f000 82a7 	beq.w	8005804 <keypad_sm+0xc5c>
			else if(num == 'B'){
 80052b6:	2842      	cmp	r0, #66	; 0x42
 80052b8:	f000 85b0 	beq.w	8005e1c <keypad_sm+0x1274>
			else if(num == 'C'){
 80052bc:	2843      	cmp	r0, #67	; 0x43
 80052be:	f000 8677 	beq.w	8005fb0 <keypad_sm+0x1408>
			else if(num == 'D'){
 80052c2:	2844      	cmp	r0, #68	; 0x44
 80052c4:	f000 87dd 	beq.w	8006282 <keypad_sm+0x16da>
			else if(num == '.'){
 80052c8:	282e      	cmp	r0, #46	; 0x2e
 80052ca:	f001 80fb 	beq.w	80064c4 <keypad_sm+0x191c>
			else if(num >= '0' && num <= '9'){
 80052ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	f201 8202 	bhi.w	80066dc <keypad_sm+0x1b34>
	while(keypaditerator < 4){
 80052d8:	4d57      	ldr	r5, [pc, #348]	; (8005438 <keypad_sm+0x890>)
 80052da:	f995 2000 	ldrsb.w	r2, [r5]
 80052de:	2a03      	cmp	r2, #3
 80052e0:	f73f aefb 	bgt.w	80050da <keypad_sm+0x532>
 80052e4:	4b55      	ldr	r3, [pc, #340]	; (800543c <keypad_sm+0x894>)
 80052e6:	4e56      	ldr	r6, [pc, #344]	; (8005440 <keypad_sm+0x898>)
 80052e8:	3201      	adds	r2, #1
 80052ea:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80052ee:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80052f2:	f893 9004 	ldrb.w	r9, [r3, #4]
 80052f6:	f896 e000 	ldrb.w	lr, [r6]
 80052fa:	f893 c003 	ldrb.w	ip, [r3, #3]
 80052fe:	789c      	ldrb	r4, [r3, #2]
 8005300:	7858      	ldrb	r0, [r3, #1]
 8005302:	7819      	ldrb	r1, [r3, #0]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	e003      	b.n	8005310 <keypad_sm+0x768>
	while(keypaditerator < 4){
 8005308:	46a4      	mov	ip, r4
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800530e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005310:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005312:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005316:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005318:	bf04      	itt	eq
 800531a:	f04f 0801 	moveq.w	r8, #1
 800531e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005322:	2a05      	cmp	r2, #5
 8005324:	46e1      	mov	r9, ip
 8005326:	d1ef      	bne.n	8005308 <keypad_sm+0x760>
 8005328:	f883 c004 	strb.w	ip, [r3, #4]
 800532c:	70dc      	strb	r4, [r3, #3]
 800532e:	7098      	strb	r0, [r3, #2]
 8005330:	7059      	strb	r1, [r3, #1]
 8005332:	f883 a000 	strb.w	sl, [r3]
 8005336:	2304      	movs	r3, #4
 8005338:	702b      	strb	r3, [r5, #0]
 800533a:	f1b8 0f00 	cmp.w	r8, #0
 800533e:	f43f aecc 	beq.w	80050da <keypad_sm+0x532>
 8005342:	f886 e000 	strb.w	lr, [r6]
 8005346:	e6c8      	b.n	80050da <keypad_sm+0x532>
			chstat_aux_tx = !chstat_aux_rx;
 8005348:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <keypad_sm+0x8a0>)
 800534a:	4a40      	ldr	r2, [pc, #256]	; (800544c <keypad_sm+0x8a4>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	fab3 f383 	clz	r3, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	7013      	strb	r3, [r2, #0]
 8005356:	e453      	b.n	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 8005358:	f7fe ff5e 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800535c:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800535e:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005360:	f7fb feda 	bl	8001118 <__aeabi_fcmpge>
 8005364:	b130      	cbz	r0, 8005374 <keypad_sm+0x7cc>
 8005366:	4628      	mov	r0, r5
 8005368:	4939      	ldr	r1, [pc, #228]	; (8005450 <keypad_sm+0x8a8>)
 800536a:	f7fb fecb 	bl	8001104 <__aeabi_fcmple>
 800536e:	b108      	cbz	r0, 8005374 <keypad_sm+0x7cc>
					volt_set_aux = translate_keypad();
 8005370:	4b38      	ldr	r3, [pc, #224]	; (8005454 <keypad_sm+0x8ac>)
 8005372:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005374:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005378:	4d2f      	ldr	r5, [pc, #188]	; (8005438 <keypad_sm+0x890>)
				kpenum = WAIT;
 800537a:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800537e:	f995 2000 	ldrsb.w	r2, [r5]
 8005382:	2a03      	cmp	r2, #3
 8005384:	f73f aea9 	bgt.w	80050da <keypad_sm+0x532>
 8005388:	4b2c      	ldr	r3, [pc, #176]	; (800543c <keypad_sm+0x894>)
 800538a:	4e2d      	ldr	r6, [pc, #180]	; (8005440 <keypad_sm+0x898>)
 800538c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800538e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005392:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005396:	f896 8000 	ldrb.w	r8, [r6]
 800539a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800539e:	789c      	ldrb	r4, [r3, #2]
 80053a0:	7858      	ldrb	r0, [r3, #1]
 80053a2:	7819      	ldrb	r1, [r3, #0]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	e003      	b.n	80053b0 <keypad_sm+0x808>
	while(keypaditerator < 4){
 80053a8:	46a4      	mov	ip, r4
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80053ae:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80053b0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80053b2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80053b6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80053b8:	bf04      	itt	eq
 80053ba:	f04f 0e01 	moveq.w	lr, #1
 80053be:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80053c2:	2a05      	cmp	r2, #5
 80053c4:	46e1      	mov	r9, ip
 80053c6:	d1ef      	bne.n	80053a8 <keypad_sm+0x800>
 80053c8:	f883 c004 	strb.w	ip, [r3, #4]
 80053cc:	70dc      	strb	r4, [r3, #3]
 80053ce:	7098      	strb	r0, [r3, #2]
 80053d0:	7059      	strb	r1, [r3, #1]
 80053d2:	f883 a000 	strb.w	sl, [r3]
 80053d6:	2304      	movs	r3, #4
 80053d8:	702b      	strb	r3, [r5, #0]
 80053da:	f1be 0f00 	cmp.w	lr, #0
 80053de:	f43f ae7c 	beq.w	80050da <keypad_sm+0x532>
 80053e2:	f886 8000 	strb.w	r8, [r6]
 80053e6:	e678      	b.n	80050da <keypad_sm+0x532>
	float temp = translate_keypad();
 80053e8:	f7fe ff16 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80053ec:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80053ee:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80053f0:	f7fb fe92 	bl	8001118 <__aeabi_fcmpge>
 80053f4:	b130      	cbz	r0, 8005404 <keypad_sm+0x85c>
 80053f6:	4628      	mov	r0, r5
 80053f8:	4915      	ldr	r1, [pc, #84]	; (8005450 <keypad_sm+0x8a8>)
 80053fa:	f7fb fe83 	bl	8001104 <__aeabi_fcmple>
 80053fe:	b108      	cbz	r0, 8005404 <keypad_sm+0x85c>
					volt_set_aux = translate_keypad();
 8005400:	4b14      	ldr	r3, [pc, #80]	; (8005454 <keypad_sm+0x8ac>)
 8005402:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005404:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005408:	4d0b      	ldr	r5, [pc, #44]	; (8005438 <keypad_sm+0x890>)
				kpenum = WAIT;
 800540a:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 800540e:	f995 2000 	ldrsb.w	r2, [r5]
 8005412:	2a03      	cmp	r2, #3
 8005414:	f73f abf4 	bgt.w	8004c00 <keypad_sm+0x58>
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <keypad_sm+0x894>)
 800541a:	4e09      	ldr	r6, [pc, #36]	; (8005440 <keypad_sm+0x898>)
 800541c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800541e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005422:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005426:	f896 e000 	ldrb.w	lr, [r6]
 800542a:	78df      	ldrb	r7, [r3, #3]
 800542c:	789c      	ldrb	r4, [r3, #2]
 800542e:	7858      	ldrb	r0, [r3, #1]
 8005430:	7819      	ldrb	r1, [r3, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	e014      	b.n	8005460 <keypad_sm+0x8b8>
 8005436:	bf00      	nop
 8005438:	20000011 	.word	0x20000011
 800543c:	2000000c 	.word	0x2000000c
 8005440:	20000758 	.word	0x20000758
 8005444:	20000400 	.word	0x20000400
 8005448:	200003f4 	.word	0x200003f4
 800544c:	200003f5 	.word	0x200003f5
 8005450:	41400000 	.word	0x41400000
 8005454:	20000a78 	.word	0x20000a78
	while(keypaditerator < 4){
 8005458:	4627      	mov	r7, r4
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800545e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005460:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005462:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005466:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005468:	bf04      	itt	eq
 800546a:	f04f 0e00 	moveq.w	lr, #0
 800546e:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005472:	2a05      	cmp	r2, #5
 8005474:	46b8      	mov	r8, r7
 8005476:	d1ef      	bne.n	8005458 <keypad_sm+0x8b0>
 8005478:	711f      	strb	r7, [r3, #4]
 800547a:	70dc      	strb	r4, [r3, #3]
 800547c:	7098      	strb	r0, [r3, #2]
 800547e:	7059      	strb	r1, [r3, #1]
 8005480:	f883 9000 	strb.w	r9, [r3]
 8005484:	2304      	movs	r3, #4
 8005486:	702b      	strb	r3, [r5, #0]
 8005488:	f1bc 0f00 	cmp.w	ip, #0
 800548c:	f43f abb8 	beq.w	8004c00 <keypad_sm+0x58>
 8005490:	f886 e000 	strb.w	lr, [r6]
 8005494:	f7ff bbb4 	b.w	8004c00 <keypad_sm+0x58>
			if(num == 'A'){
 8005498:	2841      	cmp	r0, #65	; 0x41
 800549a:	f000 8261 	beq.w	8005960 <keypad_sm+0xdb8>
			else if(num == 'B'){
 800549e:	2842      	cmp	r0, #66	; 0x42
 80054a0:	f000 8374 	beq.w	8005b8c <keypad_sm+0xfe4>
			else if(num == 'C'){
 80054a4:	2843      	cmp	r0, #67	; 0x43
 80054a6:	f000 854b 	beq.w	8005f40 <keypad_sm+0x1398>
			else if(num == 'D'){
 80054aa:	2844      	cmp	r0, #68	; 0x44
 80054ac:	f000 8737 	beq.w	800631e <keypad_sm+0x1776>
			else if(num == '.'){
 80054b0:	282e      	cmp	r0, #46	; 0x2e
 80054b2:	f000 8190 	beq.w	80057d6 <keypad_sm+0xc2e>
			else if(num >= '0' && num <= '9'){
 80054b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80054ba:	2b09      	cmp	r3, #9
 80054bc:	f240 818c 	bls.w	80057d8 <keypad_sm+0xc30>
			else if(num == '#'){
 80054c0:	2823      	cmp	r0, #35	; 0x23
 80054c2:	f001 8129 	beq.w	8006718 <keypad_sm+0x1b70>
			else if(num == '+'){
 80054c6:	282b      	cmp	r0, #43	; 0x2b
 80054c8:	f001 8302 	beq.w	8006ad0 <keypad_sm+0x1f28>
			else if(num == '-'){
 80054cc:	282d      	cmp	r0, #45	; 0x2d
 80054ce:	f001 84f2 	beq.w	8006eb6 <keypad_sm+0x230e>
			else if(num == 's'){
 80054d2:	2873      	cmp	r0, #115	; 0x73
 80054d4:	f001 857f 	beq.w	8006fd6 <keypad_sm+0x242e>
			else if(num == '['){
 80054d8:	285b      	cmp	r0, #91	; 0x5b
 80054da:	f43f ab91 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == ']'){
 80054de:	285d      	cmp	r0, #93	; 0x5d
 80054e0:	f43f ab8e 	beq.w	8004c00 <keypad_sm+0x58>
			else if(num == '*'){
 80054e4:	282a      	cmp	r0, #42	; 0x2a
 80054e6:	f47f ac3d 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 80054ea:	4bbf      	ldr	r3, [pc, #764]	; (80057e8 <keypad_sm+0xc40>)
 80054ec:	4abf      	ldr	r2, [pc, #764]	; (80057ec <keypad_sm+0xc44>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	fab3 f383 	clz	r3, r3
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	7013      	strb	r3, [r2, #0]
 80054f8:	f7ff bb82 	b.w	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 80054fc:	f7fe fe8c 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005500:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005502:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005504:	f7fb fe08 	bl	8001118 <__aeabi_fcmpge>
 8005508:	b130      	cbz	r0, 8005518 <keypad_sm+0x970>
 800550a:	4628      	mov	r0, r5
 800550c:	49b8      	ldr	r1, [pc, #736]	; (80057f0 <keypad_sm+0xc48>)
 800550e:	f7fb fdf9 	bl	8001104 <__aeabi_fcmple>
 8005512:	b108      	cbz	r0, 8005518 <keypad_sm+0x970>
					amp_set_aux = translate_keypad();
 8005514:	4bb7      	ldr	r3, [pc, #732]	; (80057f4 <keypad_sm+0xc4c>)
 8005516:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005518:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800551c:	4db6      	ldr	r5, [pc, #728]	; (80057f8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800551e:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005522:	f995 2000 	ldrsb.w	r2, [r5]
 8005526:	2a03      	cmp	r2, #3
 8005528:	f73f add7 	bgt.w	80050da <keypad_sm+0x532>
 800552c:	4bb3      	ldr	r3, [pc, #716]	; (80057fc <keypad_sm+0xc54>)
 800552e:	4eb4      	ldr	r6, [pc, #720]	; (8005800 <keypad_sm+0xc58>)
 8005530:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005532:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005536:	f893 8004 	ldrb.w	r8, [r3, #4]
 800553a:	f896 9000 	ldrb.w	r9, [r6]
 800553e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005542:	789c      	ldrb	r4, [r3, #2]
 8005544:	7858      	ldrb	r0, [r3, #1]
 8005546:	7819      	ldrb	r1, [r3, #0]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	e003      	b.n	8005554 <keypad_sm+0x9ac>
	while(keypaditerator < 4){
 800554c:	46a4      	mov	ip, r4
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005552:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005554:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005556:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800555a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800555c:	bf04      	itt	eq
 800555e:	f04f 0e01 	moveq.w	lr, #1
 8005562:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005566:	2a05      	cmp	r2, #5
 8005568:	46e0      	mov	r8, ip
 800556a:	d1ef      	bne.n	800554c <keypad_sm+0x9a4>
 800556c:	f883 c004 	strb.w	ip, [r3, #4]
 8005570:	70dc      	strb	r4, [r3, #3]
 8005572:	7098      	strb	r0, [r3, #2]
 8005574:	7059      	strb	r1, [r3, #1]
 8005576:	f883 a000 	strb.w	sl, [r3]
 800557a:	2304      	movs	r3, #4
 800557c:	702b      	strb	r3, [r5, #0]
 800557e:	f1be 0f00 	cmp.w	lr, #0
 8005582:	f43f adaa 	beq.w	80050da <keypad_sm+0x532>
 8005586:	f886 9000 	strb.w	r9, [r6]
 800558a:	e5a6      	b.n	80050da <keypad_sm+0x532>
				kpenum = WAIT;
 800558c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005590:	4d99      	ldr	r5, [pc, #612]	; (80057f8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 8005592:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005596:	f995 2000 	ldrsb.w	r2, [r5]
 800559a:	2a03      	cmp	r2, #3
 800559c:	f73f ad9d 	bgt.w	80050da <keypad_sm+0x532>
 80055a0:	4b96      	ldr	r3, [pc, #600]	; (80057fc <keypad_sm+0xc54>)
 80055a2:	4e97      	ldr	r6, [pc, #604]	; (8005800 <keypad_sm+0xc58>)
 80055a4:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80055a6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80055aa:	f893 8004 	ldrb.w	r8, [r3, #4]
 80055ae:	f896 9000 	ldrb.w	r9, [r6]
 80055b2:	f893 c003 	ldrb.w	ip, [r3, #3]
 80055b6:	789c      	ldrb	r4, [r3, #2]
 80055b8:	7858      	ldrb	r0, [r3, #1]
 80055ba:	7819      	ldrb	r1, [r3, #0]
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	e003      	b.n	80055c8 <keypad_sm+0xa20>
	while(keypaditerator < 4){
 80055c0:	46a4      	mov	ip, r4
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80055c6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80055c8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80055ca:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80055ce:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80055d0:	bf04      	itt	eq
 80055d2:	f04f 0e01 	moveq.w	lr, #1
 80055d6:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80055da:	2a05      	cmp	r2, #5
 80055dc:	46e0      	mov	r8, ip
 80055de:	d1ef      	bne.n	80055c0 <keypad_sm+0xa18>
 80055e0:	f883 c004 	strb.w	ip, [r3, #4]
 80055e4:	70dc      	strb	r4, [r3, #3]
 80055e6:	7098      	strb	r0, [r3, #2]
 80055e8:	7059      	strb	r1, [r3, #1]
 80055ea:	f883 a000 	strb.w	sl, [r3]
 80055ee:	2304      	movs	r3, #4
 80055f0:	702b      	strb	r3, [r5, #0]
 80055f2:	f1be 0f00 	cmp.w	lr, #0
 80055f6:	f43f ad70 	beq.w	80050da <keypad_sm+0x532>
 80055fa:	f886 9000 	strb.w	r9, [r6]
 80055fe:	e56c      	b.n	80050da <keypad_sm+0x532>
 8005600:	4d7d      	ldr	r5, [pc, #500]	; (80057f8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 8005602:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005604:	f995 1000 	ldrsb.w	r1, [r5]
 8005608:	2903      	cmp	r1, #3
 800560a:	f73f aaf9 	bgt.w	8004c00 <keypad_sm+0x58>
 800560e:	4b7b      	ldr	r3, [pc, #492]	; (80057fc <keypad_sm+0xc54>)
 8005610:	4e7b      	ldr	r6, [pc, #492]	; (8005800 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 8005612:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005616:	f893 8004 	ldrb.w	r8, [r3, #4]
 800561a:	f896 e000 	ldrb.w	lr, [r6]
 800561e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005622:	789f      	ldrb	r7, [r3, #2]
 8005624:	785c      	ldrb	r4, [r3, #1]
 8005626:	7818      	ldrb	r0, [r3, #0]
 8005628:	b2c9      	uxtb	r1, r1
 800562a:	e003      	b.n	8005634 <keypad_sm+0xa8c>
	while(keypaditerator < 4){
 800562c:	46bc      	mov	ip, r7
 800562e:	4627      	mov	r7, r4
 8005630:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005632:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005634:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005636:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800563a:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800563c:	bf04      	itt	eq
 800563e:	f04f 0e00 	moveq.w	lr, #0
 8005642:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005644:	2904      	cmp	r1, #4
 8005646:	46e0      	mov	r8, ip
 8005648:	d1f0      	bne.n	800562c <keypad_sm+0xa84>
 800564a:	7029      	strb	r1, [r5, #0]
 800564c:	f883 c004 	strb.w	ip, [r3, #4]
 8005650:	70df      	strb	r7, [r3, #3]
 8005652:	709c      	strb	r4, [r3, #2]
 8005654:	7058      	strb	r0, [r3, #1]
 8005656:	f883 9000 	strb.w	r9, [r3]
 800565a:	2a00      	cmp	r2, #0
 800565c:	f43f aad0 	beq.w	8004c00 <keypad_sm+0x58>
 8005660:	f886 e000 	strb.w	lr, [r6]
 8005664:	f7ff bacc 	b.w	8004c00 <keypad_sm+0x58>
 8005668:	4d63      	ldr	r5, [pc, #396]	; (80057f8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800566a:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800566c:	f995 1000 	ldrsb.w	r1, [r5]
 8005670:	2903      	cmp	r1, #3
 8005672:	f73f aac5 	bgt.w	8004c00 <keypad_sm+0x58>
 8005676:	4b61      	ldr	r3, [pc, #388]	; (80057fc <keypad_sm+0xc54>)
 8005678:	4e61      	ldr	r6, [pc, #388]	; (8005800 <keypad_sm+0xc58>)
 800567a:	3101      	adds	r1, #1
			keypadarr[0] = num;
 800567c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005680:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005684:	f896 e000 	ldrb.w	lr, [r6]
 8005688:	f893 c003 	ldrb.w	ip, [r3, #3]
 800568c:	789f      	ldrb	r7, [r3, #2]
 800568e:	785c      	ldrb	r4, [r3, #1]
 8005690:	7818      	ldrb	r0, [r3, #0]
 8005692:	b2c9      	uxtb	r1, r1
 8005694:	e003      	b.n	800569e <keypad_sm+0xaf6>
	while(keypaditerator < 4){
 8005696:	46bc      	mov	ip, r7
 8005698:	4627      	mov	r7, r4
 800569a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800569c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800569e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80056a0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80056a4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80056a6:	bf04      	itt	eq
 80056a8:	f04f 0e00 	moveq.w	lr, #0
 80056ac:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80056ae:	2905      	cmp	r1, #5
 80056b0:	46e0      	mov	r8, ip
 80056b2:	d1f0      	bne.n	8005696 <keypad_sm+0xaee>
 80056b4:	f883 c004 	strb.w	ip, [r3, #4]
 80056b8:	70df      	strb	r7, [r3, #3]
 80056ba:	709c      	strb	r4, [r3, #2]
 80056bc:	7058      	strb	r0, [r3, #1]
 80056be:	f883 9000 	strb.w	r9, [r3]
 80056c2:	2304      	movs	r3, #4
 80056c4:	702b      	strb	r3, [r5, #0]
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	f43f aa9a 	beq.w	8004c00 <keypad_sm+0x58>
 80056cc:	f886 e000 	strb.w	lr, [r6]
 80056d0:	f7ff ba96 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 80056d4:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80056d8:	4d47      	ldr	r5, [pc, #284]	; (80057f8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 80056da:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80056de:	f995 2000 	ldrsb.w	r2, [r5]
 80056e2:	2a03      	cmp	r2, #3
 80056e4:	f73f acf9 	bgt.w	80050da <keypad_sm+0x532>
 80056e8:	4b44      	ldr	r3, [pc, #272]	; (80057fc <keypad_sm+0xc54>)
 80056ea:	4e45      	ldr	r6, [pc, #276]	; (8005800 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 80056ec:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80056f0:	f893 9004 	ldrb.w	r9, [r3, #4]
 80056f4:	f896 8000 	ldrb.w	r8, [r6]
 80056f8:	f893 c003 	ldrb.w	ip, [r3, #3]
 80056fc:	789c      	ldrb	r4, [r3, #2]
 80056fe:	7858      	ldrb	r0, [r3, #1]
 8005700:	7819      	ldrb	r1, [r3, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	e003      	b.n	800570e <keypad_sm+0xb66>
	while(keypaditerator < 4){
 8005706:	46a4      	mov	ip, r4
 8005708:	4604      	mov	r4, r0
 800570a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800570c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800570e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005710:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005714:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005716:	bf04      	itt	eq
 8005718:	f04f 0e01 	moveq.w	lr, #1
 800571c:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005720:	2a04      	cmp	r2, #4
 8005722:	46e1      	mov	r9, ip
 8005724:	d1ef      	bne.n	8005706 <keypad_sm+0xb5e>
 8005726:	702a      	strb	r2, [r5, #0]
 8005728:	f883 c004 	strb.w	ip, [r3, #4]
 800572c:	70dc      	strb	r4, [r3, #3]
 800572e:	7098      	strb	r0, [r3, #2]
 8005730:	7059      	strb	r1, [r3, #1]
 8005732:	f883 a000 	strb.w	sl, [r3]
 8005736:	f1be 0f00 	cmp.w	lr, #0
 800573a:	f43f acce 	beq.w	80050da <keypad_sm+0x532>
 800573e:	f886 8000 	strb.w	r8, [r6]
 8005742:	e4ca      	b.n	80050da <keypad_sm+0x532>
	float temp = translate_keypad();
 8005744:	f7fe fd68 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005748:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800574a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800574c:	f7fb fce4 	bl	8001118 <__aeabi_fcmpge>
 8005750:	b150      	cbz	r0, 8005768 <keypad_sm+0xbc0>
 8005752:	4628      	mov	r0, r5
 8005754:	f7fa fe80 	bl	8000458 <__aeabi_f2d>
 8005758:	a321      	add	r3, pc, #132	; (adr r3, 80057e0 <keypad_sm+0xc38>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f7fb f94f 	bl	8000a00 <__aeabi_dcmple>
 8005762:	b108      	cbz	r0, 8005768 <keypad_sm+0xbc0>
					amp_set_aux = translate_keypad();
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <keypad_sm+0xc4c>)
 8005766:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005768:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 800576c:	4d22      	ldr	r5, [pc, #136]	; (80057f8 <keypad_sm+0xc50>)
				kpenum = WAIT;
 800576e:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 8005772:	f995 2000 	ldrsb.w	r2, [r5]
 8005776:	2a03      	cmp	r2, #3
 8005778:	f73f aa42 	bgt.w	8004c00 <keypad_sm+0x58>
 800577c:	4b1f      	ldr	r3, [pc, #124]	; (80057fc <keypad_sm+0xc54>)
 800577e:	4e20      	ldr	r6, [pc, #128]	; (8005800 <keypad_sm+0xc58>)
			keypadarr[0] = num;
 8005780:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005784:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005788:	f896 e000 	ldrb.w	lr, [r6]
 800578c:	78df      	ldrb	r7, [r3, #3]
 800578e:	789c      	ldrb	r4, [r3, #2]
 8005790:	7858      	ldrb	r0, [r3, #1]
 8005792:	7819      	ldrb	r1, [r3, #0]
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	e003      	b.n	80057a0 <keypad_sm+0xbf8>
	while(keypaditerator < 4){
 8005798:	4627      	mov	r7, r4
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800579e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80057a0:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80057a2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80057a6:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80057a8:	bf04      	itt	eq
 80057aa:	f04f 0e00 	moveq.w	lr, #0
 80057ae:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 80057b2:	2a04      	cmp	r2, #4
 80057b4:	46b8      	mov	r8, r7
 80057b6:	d1ef      	bne.n	8005798 <keypad_sm+0xbf0>
 80057b8:	702a      	strb	r2, [r5, #0]
 80057ba:	711f      	strb	r7, [r3, #4]
 80057bc:	70dc      	strb	r4, [r3, #3]
 80057be:	7098      	strb	r0, [r3, #2]
 80057c0:	7059      	strb	r1, [r3, #1]
 80057c2:	f883 9000 	strb.w	r9, [r3]
 80057c6:	f1bc 0f00 	cmp.w	ip, #0
 80057ca:	f43f aa19 	beq.w	8004c00 <keypad_sm+0x58>
 80057ce:	f886 e000 	strb.w	lr, [r6]
 80057d2:	f7ff ba15 	b.w	8004c00 <keypad_sm+0x58>
	if(num == 'z'){
 80057d6:	202e      	movs	r0, #46	; 0x2e
}
 80057d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	f7fb bf3c 	b.w	8001658 <update_keypad.part.0>
 80057e0:	50b0f27c 	.word	0x50b0f27c
 80057e4:	3fe99a6b 	.word	0x3fe99a6b
 80057e8:	200003f4 	.word	0x200003f4
 80057ec:	200003f5 	.word	0x200003f5
 80057f0:	41400000 	.word	0x41400000
 80057f4:	200003e8 	.word	0x200003e8
 80057f8:	20000011 	.word	0x20000011
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	20000758 	.word	0x20000758
				kpenum = WAIT;
 8005804:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005808:	4dc2      	ldr	r5, [pc, #776]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 800580a:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800580e:	f995 2000 	ldrsb.w	r2, [r5]
 8005812:	2a03      	cmp	r2, #3
 8005814:	f73f ac61 	bgt.w	80050da <keypad_sm+0x532>
 8005818:	4bbf      	ldr	r3, [pc, #764]	; (8005b18 <keypad_sm+0xf70>)
 800581a:	4ec0      	ldr	r6, [pc, #768]	; (8005b1c <keypad_sm+0xf74>)
 800581c:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800581e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005822:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005826:	f896 9000 	ldrb.w	r9, [r6]
 800582a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800582e:	789c      	ldrb	r4, [r3, #2]
 8005830:	7858      	ldrb	r0, [r3, #1]
 8005832:	7819      	ldrb	r1, [r3, #0]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	e003      	b.n	8005840 <keypad_sm+0xc98>
	while(keypaditerator < 4){
 8005838:	46a4      	mov	ip, r4
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800583e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005840:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005842:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005846:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005848:	bf04      	itt	eq
 800584a:	f04f 0e01 	moveq.w	lr, #1
 800584e:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005852:	2a05      	cmp	r2, #5
 8005854:	46e0      	mov	r8, ip
 8005856:	d1ef      	bne.n	8005838 <keypad_sm+0xc90>
 8005858:	f883 c004 	strb.w	ip, [r3, #4]
 800585c:	70dc      	strb	r4, [r3, #3]
 800585e:	7098      	strb	r0, [r3, #2]
 8005860:	7059      	strb	r1, [r3, #1]
 8005862:	f883 a000 	strb.w	sl, [r3]
 8005866:	2304      	movs	r3, #4
 8005868:	702b      	strb	r3, [r5, #0]
 800586a:	f1be 0f00 	cmp.w	lr, #0
 800586e:	f43f ac34 	beq.w	80050da <keypad_sm+0x532>
 8005872:	f886 9000 	strb.w	r9, [r6]
 8005876:	e430      	b.n	80050da <keypad_sm+0x532>
				kpenum = WAIT;
 8005878:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 800587c:	4da5      	ldr	r5, [pc, #660]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 800587e:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005882:	f995 2000 	ldrsb.w	r2, [r5]
 8005886:	2a03      	cmp	r2, #3
 8005888:	f73f ac27 	bgt.w	80050da <keypad_sm+0x532>
 800588c:	4ba2      	ldr	r3, [pc, #648]	; (8005b18 <keypad_sm+0xf70>)
 800588e:	4ea3      	ldr	r6, [pc, #652]	; (8005b1c <keypad_sm+0xf74>)
			keypadarr[0] = num;
 8005890:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005894:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005898:	f896 8000 	ldrb.w	r8, [r6]
 800589c:	f893 c003 	ldrb.w	ip, [r3, #3]
 80058a0:	789c      	ldrb	r4, [r3, #2]
 80058a2:	7858      	ldrb	r0, [r3, #1]
 80058a4:	7819      	ldrb	r1, [r3, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	e003      	b.n	80058b2 <keypad_sm+0xd0a>
	while(keypaditerator < 4){
 80058aa:	46a4      	mov	ip, r4
 80058ac:	4604      	mov	r4, r0
 80058ae:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80058b0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80058b2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80058b4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80058b8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80058ba:	bf04      	itt	eq
 80058bc:	f04f 0e01 	moveq.w	lr, #1
 80058c0:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80058c4:	2a04      	cmp	r2, #4
 80058c6:	46e1      	mov	r9, ip
 80058c8:	d1ef      	bne.n	80058aa <keypad_sm+0xd02>
 80058ca:	702a      	strb	r2, [r5, #0]
 80058cc:	f883 c004 	strb.w	ip, [r3, #4]
 80058d0:	70dc      	strb	r4, [r3, #3]
 80058d2:	7098      	strb	r0, [r3, #2]
 80058d4:	7059      	strb	r1, [r3, #1]
 80058d6:	f883 a000 	strb.w	sl, [r3]
 80058da:	f1be 0f00 	cmp.w	lr, #0
 80058de:	f43f abfc 	beq.w	80050da <keypad_sm+0x532>
 80058e2:	f886 8000 	strb.w	r8, [r6]
 80058e6:	f7ff bbf8 	b.w	80050da <keypad_sm+0x532>
				kpenum = WAIT;
 80058ea:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80058ee:	4d89      	ldr	r5, [pc, #548]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 80058f0:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80058f4:	f995 2000 	ldrsb.w	r2, [r5]
 80058f8:	2a03      	cmp	r2, #3
 80058fa:	f73f abee 	bgt.w	80050da <keypad_sm+0x532>
 80058fe:	4b86      	ldr	r3, [pc, #536]	; (8005b18 <keypad_sm+0xf70>)
 8005900:	4e86      	ldr	r6, [pc, #536]	; (8005b1c <keypad_sm+0xf74>)
 8005902:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005904:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005908:	f893 8004 	ldrb.w	r8, [r3, #4]
 800590c:	f896 9000 	ldrb.w	r9, [r6]
 8005910:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005914:	789c      	ldrb	r4, [r3, #2]
 8005916:	7858      	ldrb	r0, [r3, #1]
 8005918:	7819      	ldrb	r1, [r3, #0]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	e003      	b.n	8005926 <keypad_sm+0xd7e>
	while(keypaditerator < 4){
 800591e:	46a4      	mov	ip, r4
 8005920:	4604      	mov	r4, r0
 8005922:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005924:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005926:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005928:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800592c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800592e:	bf04      	itt	eq
 8005930:	f04f 0e01 	moveq.w	lr, #1
 8005934:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005938:	2a05      	cmp	r2, #5
 800593a:	46e0      	mov	r8, ip
 800593c:	d1ef      	bne.n	800591e <keypad_sm+0xd76>
 800593e:	f883 c004 	strb.w	ip, [r3, #4]
 8005942:	70dc      	strb	r4, [r3, #3]
 8005944:	7098      	strb	r0, [r3, #2]
 8005946:	7059      	strb	r1, [r3, #1]
 8005948:	f883 a000 	strb.w	sl, [r3]
 800594c:	2304      	movs	r3, #4
 800594e:	702b      	strb	r3, [r5, #0]
 8005950:	f1be 0f00 	cmp.w	lr, #0
 8005954:	f43f abc1 	beq.w	80050da <keypad_sm+0x532>
 8005958:	f886 9000 	strb.w	r9, [r6]
 800595c:	f7ff bbbd 	b.w	80050da <keypad_sm+0x532>
 8005960:	4d6c      	ldr	r5, [pc, #432]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005962:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005964:	f995 1000 	ldrsb.w	r1, [r5]
 8005968:	2903      	cmp	r1, #3
 800596a:	f73f a949 	bgt.w	8004c00 <keypad_sm+0x58>
 800596e:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <keypad_sm+0xf70>)
 8005970:	4e6a      	ldr	r6, [pc, #424]	; (8005b1c <keypad_sm+0xf74>)
			keypadarr[0] = num;
 8005972:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005976:	f893 8004 	ldrb.w	r8, [r3, #4]
 800597a:	f896 e000 	ldrb.w	lr, [r6]
 800597e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005982:	789f      	ldrb	r7, [r3, #2]
 8005984:	785c      	ldrb	r4, [r3, #1]
 8005986:	7818      	ldrb	r0, [r3, #0]
 8005988:	b2c9      	uxtb	r1, r1
 800598a:	e003      	b.n	8005994 <keypad_sm+0xdec>
	while(keypaditerator < 4){
 800598c:	46bc      	mov	ip, r7
 800598e:	4627      	mov	r7, r4
 8005990:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005992:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005994:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005996:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800599a:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800599c:	bf04      	itt	eq
 800599e:	f04f 0e00 	moveq.w	lr, #0
 80059a2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80059a4:	2904      	cmp	r1, #4
 80059a6:	46e0      	mov	r8, ip
 80059a8:	d1f0      	bne.n	800598c <keypad_sm+0xde4>
 80059aa:	7029      	strb	r1, [r5, #0]
 80059ac:	f883 c004 	strb.w	ip, [r3, #4]
 80059b0:	70df      	strb	r7, [r3, #3]
 80059b2:	709c      	strb	r4, [r3, #2]
 80059b4:	7058      	strb	r0, [r3, #1]
 80059b6:	f883 9000 	strb.w	r9, [r3]
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	f43f a920 	beq.w	8004c00 <keypad_sm+0x58>
 80059c0:	f886 e000 	strb.w	lr, [r6]
 80059c4:	f7ff b91c 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 80059c8:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80059cc:	4d51      	ldr	r5, [pc, #324]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 80059ce:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80059d2:	f995 2000 	ldrsb.w	r2, [r5]
 80059d6:	2a03      	cmp	r2, #3
 80059d8:	f73f ab7f 	bgt.w	80050da <keypad_sm+0x532>
 80059dc:	4b4e      	ldr	r3, [pc, #312]	; (8005b18 <keypad_sm+0xf70>)
 80059de:	4e4f      	ldr	r6, [pc, #316]	; (8005b1c <keypad_sm+0xf74>)
 80059e0:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80059e2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80059e6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80059ea:	f896 8000 	ldrb.w	r8, [r6]
 80059ee:	f893 c003 	ldrb.w	ip, [r3, #3]
 80059f2:	789c      	ldrb	r4, [r3, #2]
 80059f4:	7858      	ldrb	r0, [r3, #1]
 80059f6:	7819      	ldrb	r1, [r3, #0]
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	e003      	b.n	8005a04 <keypad_sm+0xe5c>
	while(keypaditerator < 4){
 80059fc:	46a4      	mov	ip, r4
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005a02:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005a04:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005a06:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005a0a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005a0c:	bf04      	itt	eq
 8005a0e:	f04f 0e01 	moveq.w	lr, #1
 8005a12:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005a16:	2a05      	cmp	r2, #5
 8005a18:	46e1      	mov	r9, ip
 8005a1a:	d1ef      	bne.n	80059fc <keypad_sm+0xe54>
 8005a1c:	f883 c004 	strb.w	ip, [r3, #4]
 8005a20:	70dc      	strb	r4, [r3, #3]
 8005a22:	7098      	strb	r0, [r3, #2]
 8005a24:	7059      	strb	r1, [r3, #1]
 8005a26:	f883 a000 	strb.w	sl, [r3]
 8005a2a:	2304      	movs	r3, #4
 8005a2c:	702b      	strb	r3, [r5, #0]
 8005a2e:	f1be 0f00 	cmp.w	lr, #0
 8005a32:	f43f ab52 	beq.w	80050da <keypad_sm+0x532>
 8005a36:	f886 8000 	strb.w	r8, [r6]
 8005a3a:	f7ff bb4e 	b.w	80050da <keypad_sm+0x532>
 8005a3e:	4d35      	ldr	r5, [pc, #212]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005a40:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005a42:	f995 1000 	ldrsb.w	r1, [r5]
 8005a46:	2903      	cmp	r1, #3
 8005a48:	f73f a8da 	bgt.w	8004c00 <keypad_sm+0x58>
 8005a4c:	4b32      	ldr	r3, [pc, #200]	; (8005b18 <keypad_sm+0xf70>)
 8005a4e:	4e33      	ldr	r6, [pc, #204]	; (8005b1c <keypad_sm+0xf74>)
 8005a50:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005a52:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005a56:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005a5a:	f896 e000 	ldrb.w	lr, [r6]
 8005a5e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005a62:	789f      	ldrb	r7, [r3, #2]
 8005a64:	785c      	ldrb	r4, [r3, #1]
 8005a66:	7818      	ldrb	r0, [r3, #0]
 8005a68:	b2c9      	uxtb	r1, r1
 8005a6a:	e003      	b.n	8005a74 <keypad_sm+0xecc>
	while(keypaditerator < 4){
 8005a6c:	46bc      	mov	ip, r7
 8005a6e:	4627      	mov	r7, r4
 8005a70:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005a72:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005a74:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005a76:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005a7a:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005a7c:	bf04      	itt	eq
 8005a7e:	f04f 0e00 	moveq.w	lr, #0
 8005a82:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005a84:	2905      	cmp	r1, #5
 8005a86:	46e0      	mov	r8, ip
 8005a88:	d1f0      	bne.n	8005a6c <keypad_sm+0xec4>
 8005a8a:	f883 c004 	strb.w	ip, [r3, #4]
 8005a8e:	70df      	strb	r7, [r3, #3]
 8005a90:	709c      	strb	r4, [r3, #2]
 8005a92:	7058      	strb	r0, [r3, #1]
 8005a94:	f883 9000 	strb.w	r9, [r3]
 8005a98:	2304      	movs	r3, #4
 8005a9a:	702b      	strb	r3, [r5, #0]
 8005a9c:	2a00      	cmp	r2, #0
 8005a9e:	f43f a8af 	beq.w	8004c00 <keypad_sm+0x58>
 8005aa2:	f886 e000 	strb.w	lr, [r6]
 8005aa6:	f7ff b8ab 	b.w	8004c00 <keypad_sm+0x58>
 8005aaa:	4d1a      	ldr	r5, [pc, #104]	; (8005b14 <keypad_sm+0xf6c>)
				kpenum = WAIT;
 8005aac:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005aae:	f995 1000 	ldrsb.w	r1, [r5]
 8005ab2:	2903      	cmp	r1, #3
 8005ab4:	f73f a8a4 	bgt.w	8004c00 <keypad_sm+0x58>
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <keypad_sm+0xf70>)
 8005aba:	4e18      	ldr	r6, [pc, #96]	; (8005b1c <keypad_sm+0xf74>)
			keypadarr[0] = num;
 8005abc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005ac0:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005ac4:	f896 e000 	ldrb.w	lr, [r6]
 8005ac8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005acc:	789f      	ldrb	r7, [r3, #2]
 8005ace:	785c      	ldrb	r4, [r3, #1]
 8005ad0:	7818      	ldrb	r0, [r3, #0]
 8005ad2:	b2c9      	uxtb	r1, r1
 8005ad4:	e003      	b.n	8005ade <keypad_sm+0xf36>
	while(keypaditerator < 4){
 8005ad6:	46bc      	mov	ip, r7
 8005ad8:	4627      	mov	r7, r4
 8005ada:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005adc:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005ade:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005ae0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005ae4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005ae6:	bf04      	itt	eq
 8005ae8:	f04f 0e00 	moveq.w	lr, #0
 8005aec:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005aee:	2904      	cmp	r1, #4
 8005af0:	46e0      	mov	r8, ip
 8005af2:	d1f0      	bne.n	8005ad6 <keypad_sm+0xf2e>
 8005af4:	7029      	strb	r1, [r5, #0]
 8005af6:	f883 c004 	strb.w	ip, [r3, #4]
 8005afa:	70df      	strb	r7, [r3, #3]
 8005afc:	709c      	strb	r4, [r3, #2]
 8005afe:	7058      	strb	r0, [r3, #1]
 8005b00:	f883 9000 	strb.w	r9, [r3]
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	f43f a87b 	beq.w	8004c00 <keypad_sm+0x58>
 8005b0a:	f886 e000 	strb.w	lr, [r6]
 8005b0e:	f7ff b877 	b.w	8004c00 <keypad_sm+0x58>
 8005b12:	bf00      	nop
 8005b14:	20000011 	.word	0x20000011
 8005b18:	2000000c 	.word	0x2000000c
 8005b1c:	20000758 	.word	0x20000758
 8005b20:	4db8      	ldr	r5, [pc, #736]	; (8005e04 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005b22:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005b24:	f995 1000 	ldrsb.w	r1, [r5]
 8005b28:	2903      	cmp	r1, #3
 8005b2a:	f73f a869 	bgt.w	8004c00 <keypad_sm+0x58>
 8005b2e:	4bb6      	ldr	r3, [pc, #728]	; (8005e08 <keypad_sm+0x1260>)
 8005b30:	4eb6      	ldr	r6, [pc, #728]	; (8005e0c <keypad_sm+0x1264>)
 8005b32:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005b34:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005b38:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005b3c:	f896 e000 	ldrb.w	lr, [r6]
 8005b40:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b44:	789f      	ldrb	r7, [r3, #2]
 8005b46:	785c      	ldrb	r4, [r3, #1]
 8005b48:	7818      	ldrb	r0, [r3, #0]
 8005b4a:	b2c9      	uxtb	r1, r1
 8005b4c:	e003      	b.n	8005b56 <keypad_sm+0xfae>
	while(keypaditerator < 4){
 8005b4e:	46bc      	mov	ip, r7
 8005b50:	4627      	mov	r7, r4
 8005b52:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005b54:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005b56:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005b58:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005b5c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005b5e:	bf04      	itt	eq
 8005b60:	f04f 0e00 	moveq.w	lr, #0
 8005b64:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005b66:	2905      	cmp	r1, #5
 8005b68:	46e0      	mov	r8, ip
 8005b6a:	d1f0      	bne.n	8005b4e <keypad_sm+0xfa6>
 8005b6c:	f883 c004 	strb.w	ip, [r3, #4]
 8005b70:	70df      	strb	r7, [r3, #3]
 8005b72:	709c      	strb	r4, [r3, #2]
 8005b74:	7058      	strb	r0, [r3, #1]
 8005b76:	f883 9000 	strb.w	r9, [r3]
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	702b      	strb	r3, [r5, #0]
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	f43f a83e 	beq.w	8004c00 <keypad_sm+0x58>
 8005b84:	f886 e000 	strb.w	lr, [r6]
 8005b88:	f7ff b83a 	b.w	8004c00 <keypad_sm+0x58>
 8005b8c:	4d9d      	ldr	r5, [pc, #628]	; (8005e04 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005b8e:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005b90:	f995 1000 	ldrsb.w	r1, [r5]
 8005b94:	2903      	cmp	r1, #3
 8005b96:	f73f a833 	bgt.w	8004c00 <keypad_sm+0x58>
 8005b9a:	4b9b      	ldr	r3, [pc, #620]	; (8005e08 <keypad_sm+0x1260>)
 8005b9c:	4e9b      	ldr	r6, [pc, #620]	; (8005e0c <keypad_sm+0x1264>)
 8005b9e:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005ba0:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005ba4:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005ba8:	f896 e000 	ldrb.w	lr, [r6]
 8005bac:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005bb0:	789f      	ldrb	r7, [r3, #2]
 8005bb2:	785c      	ldrb	r4, [r3, #1]
 8005bb4:	7818      	ldrb	r0, [r3, #0]
 8005bb6:	b2c9      	uxtb	r1, r1
 8005bb8:	e003      	b.n	8005bc2 <keypad_sm+0x101a>
	while(keypaditerator < 4){
 8005bba:	46bc      	mov	ip, r7
 8005bbc:	4627      	mov	r7, r4
 8005bbe:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005bc0:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005bc2:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005bc4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005bc8:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005bca:	bf04      	itt	eq
 8005bcc:	f04f 0e00 	moveq.w	lr, #0
 8005bd0:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005bd2:	2905      	cmp	r1, #5
 8005bd4:	46e0      	mov	r8, ip
 8005bd6:	d1f0      	bne.n	8005bba <keypad_sm+0x1012>
 8005bd8:	f883 c004 	strb.w	ip, [r3, #4]
 8005bdc:	70df      	strb	r7, [r3, #3]
 8005bde:	709c      	strb	r4, [r3, #2]
 8005be0:	7058      	strb	r0, [r3, #1]
 8005be2:	f883 9000 	strb.w	r9, [r3]
 8005be6:	2304      	movs	r3, #4
 8005be8:	702b      	strb	r3, [r5, #0]
 8005bea:	2a00      	cmp	r2, #0
 8005bec:	f43f a808 	beq.w	8004c00 <keypad_sm+0x58>
 8005bf0:	f886 e000 	strb.w	lr, [r6]
 8005bf4:	f7ff b804 	b.w	8004c00 <keypad_sm+0x58>
 8005bf8:	4d82      	ldr	r5, [pc, #520]	; (8005e04 <keypad_sm+0x125c>)
 8005bfa:	f995 2000 	ldrsb.w	r2, [r5]
 8005bfe:	2a03      	cmp	r2, #3
 8005c00:	f73f aa6b 	bgt.w	80050da <keypad_sm+0x532>
 8005c04:	4b80      	ldr	r3, [pc, #512]	; (8005e08 <keypad_sm+0x1260>)
 8005c06:	4e81      	ldr	r6, [pc, #516]	; (8005e0c <keypad_sm+0x1264>)
 8005c08:	3201      	adds	r2, #1
 8005c0a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005c0e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005c12:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005c16:	f896 e000 	ldrb.w	lr, [r6]
 8005c1a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005c1e:	789c      	ldrb	r4, [r3, #2]
 8005c20:	7858      	ldrb	r0, [r3, #1]
 8005c22:	7819      	ldrb	r1, [r3, #0]
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	e003      	b.n	8005c30 <keypad_sm+0x1088>
	while(keypaditerator < 4){
 8005c28:	46a4      	mov	ip, r4
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005c2e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005c30:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005c32:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005c36:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005c38:	bf04      	itt	eq
 8005c3a:	f04f 0801 	moveq.w	r8, #1
 8005c3e:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005c42:	2a05      	cmp	r2, #5
 8005c44:	46e1      	mov	r9, ip
 8005c46:	d1ef      	bne.n	8005c28 <keypad_sm+0x1080>
 8005c48:	f883 c004 	strb.w	ip, [r3, #4]
 8005c4c:	70dc      	strb	r4, [r3, #3]
 8005c4e:	7098      	strb	r0, [r3, #2]
 8005c50:	7059      	strb	r1, [r3, #1]
 8005c52:	f883 a000 	strb.w	sl, [r3]
 8005c56:	2304      	movs	r3, #4
 8005c58:	702b      	strb	r3, [r5, #0]
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	f43f aa3c 	beq.w	80050da <keypad_sm+0x532>
 8005c62:	f886 e000 	strb.w	lr, [r6]
 8005c66:	f7ff ba38 	b.w	80050da <keypad_sm+0x532>
 8005c6a:	4d66      	ldr	r5, [pc, #408]	; (8005e04 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005c6c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005c6e:	f995 1000 	ldrsb.w	r1, [r5]
 8005c72:	2903      	cmp	r1, #3
 8005c74:	f73e afc4 	bgt.w	8004c00 <keypad_sm+0x58>
 8005c78:	4b63      	ldr	r3, [pc, #396]	; (8005e08 <keypad_sm+0x1260>)
 8005c7a:	4e64      	ldr	r6, [pc, #400]	; (8005e0c <keypad_sm+0x1264>)
			keypadarr[0] = num;
 8005c7c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005c80:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005c84:	f896 e000 	ldrb.w	lr, [r6]
 8005c88:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005c8c:	789f      	ldrb	r7, [r3, #2]
 8005c8e:	785c      	ldrb	r4, [r3, #1]
 8005c90:	7818      	ldrb	r0, [r3, #0]
 8005c92:	b2c9      	uxtb	r1, r1
 8005c94:	e003      	b.n	8005c9e <keypad_sm+0x10f6>
	while(keypaditerator < 4){
 8005c96:	46bc      	mov	ip, r7
 8005c98:	4627      	mov	r7, r4
 8005c9a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005c9c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005c9e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005ca0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005ca4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005ca6:	bf04      	itt	eq
 8005ca8:	f04f 0e00 	moveq.w	lr, #0
 8005cac:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005cae:	2904      	cmp	r1, #4
 8005cb0:	46e0      	mov	r8, ip
 8005cb2:	d1f0      	bne.n	8005c96 <keypad_sm+0x10ee>
 8005cb4:	7029      	strb	r1, [r5, #0]
 8005cb6:	f883 c004 	strb.w	ip, [r3, #4]
 8005cba:	70df      	strb	r7, [r3, #3]
 8005cbc:	709c      	strb	r4, [r3, #2]
 8005cbe:	7058      	strb	r0, [r3, #1]
 8005cc0:	f883 9000 	strb.w	r9, [r3]
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	f43e af9b 	beq.w	8004c00 <keypad_sm+0x58>
 8005cca:	f886 e000 	strb.w	lr, [r6]
 8005cce:	f7fe bf97 	b.w	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 8005cd2:	f7fe faa1 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005cd6:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005cd8:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005cda:	f7fb fa1d 	bl	8001118 <__aeabi_fcmpge>
 8005cde:	b158      	cbz	r0, 8005cf8 <keypad_sm+0x1150>
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	494b      	ldr	r1, [pc, #300]	; (8005e10 <keypad_sm+0x1268>)
 8005ce4:	f7fb fa0e 	bl	8001104 <__aeabi_fcmple>
 8005ce8:	b130      	cbz	r0, 8005cf8 <keypad_sm+0x1150>
					volt_set_main_old = volt_set_main;
 8005cea:	4d4a      	ldr	r5, [pc, #296]	; (8005e14 <keypad_sm+0x126c>)
 8005cec:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <keypad_sm+0x1270>)
 8005cee:	682a      	ldr	r2, [r5, #0]
 8005cf0:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005cf2:	f7fe fa91 	bl	8004218 <translate_keypad>
 8005cf6:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005cf8:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005cfc:	4d41      	ldr	r5, [pc, #260]	; (8005e04 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005cfe:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 8005d02:	f995 2000 	ldrsb.w	r2, [r5]
 8005d06:	2a03      	cmp	r2, #3
 8005d08:	f73e af7a 	bgt.w	8004c00 <keypad_sm+0x58>
 8005d0c:	4b3e      	ldr	r3, [pc, #248]	; (8005e08 <keypad_sm+0x1260>)
 8005d0e:	4e3f      	ldr	r6, [pc, #252]	; (8005e0c <keypad_sm+0x1264>)
			keypadarr[0] = num;
 8005d10:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005d14:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005d18:	f896 e000 	ldrb.w	lr, [r6]
 8005d1c:	78df      	ldrb	r7, [r3, #3]
 8005d1e:	789c      	ldrb	r4, [r3, #2]
 8005d20:	7858      	ldrb	r0, [r3, #1]
 8005d22:	7819      	ldrb	r1, [r3, #0]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	e003      	b.n	8005d30 <keypad_sm+0x1188>
	while(keypaditerator < 4){
 8005d28:	4627      	mov	r7, r4
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005d2e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005d30:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005d32:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005d36:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005d38:	bf04      	itt	eq
 8005d3a:	f04f 0e00 	moveq.w	lr, #0
 8005d3e:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005d42:	2a04      	cmp	r2, #4
 8005d44:	46b8      	mov	r8, r7
 8005d46:	d1ef      	bne.n	8005d28 <keypad_sm+0x1180>
 8005d48:	702a      	strb	r2, [r5, #0]
 8005d4a:	711f      	strb	r7, [r3, #4]
 8005d4c:	70dc      	strb	r4, [r3, #3]
 8005d4e:	7098      	strb	r0, [r3, #2]
 8005d50:	7059      	strb	r1, [r3, #1]
 8005d52:	f883 9000 	strb.w	r9, [r3]
 8005d56:	f1bc 0f00 	cmp.w	ip, #0
 8005d5a:	f43e af51 	beq.w	8004c00 <keypad_sm+0x58>
 8005d5e:	f886 e000 	strb.w	lr, [r6]
 8005d62:	f7fe bf4d 	b.w	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 8005d66:	f7fe fa57 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d6a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d6c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d6e:	f7fb f9d3 	bl	8001118 <__aeabi_fcmpge>
 8005d72:	b158      	cbz	r0, 8005d8c <keypad_sm+0x11e4>
 8005d74:	4628      	mov	r0, r5
 8005d76:	4926      	ldr	r1, [pc, #152]	; (8005e10 <keypad_sm+0x1268>)
 8005d78:	f7fb f9c4 	bl	8001104 <__aeabi_fcmple>
 8005d7c:	b130      	cbz	r0, 8005d8c <keypad_sm+0x11e4>
					volt_set_main_old = volt_set_main;
 8005d7e:	4d25      	ldr	r5, [pc, #148]	; (8005e14 <keypad_sm+0x126c>)
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <keypad_sm+0x1270>)
 8005d82:	682a      	ldr	r2, [r5, #0]
 8005d84:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005d86:	f7fe fa47 	bl	8004218 <translate_keypad>
 8005d8a:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005d8c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005d90:	4d1c      	ldr	r5, [pc, #112]	; (8005e04 <keypad_sm+0x125c>)
				kpenum = WAIT;
 8005d92:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005d96:	f995 2000 	ldrsb.w	r2, [r5]
 8005d9a:	2a03      	cmp	r2, #3
 8005d9c:	f73f a99d 	bgt.w	80050da <keypad_sm+0x532>
 8005da0:	4b19      	ldr	r3, [pc, #100]	; (8005e08 <keypad_sm+0x1260>)
 8005da2:	4e1a      	ldr	r6, [pc, #104]	; (8005e0c <keypad_sm+0x1264>)
 8005da4:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005da6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005daa:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005dae:	f896 9000 	ldrb.w	r9, [r6]
 8005db2:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005db6:	789c      	ldrb	r4, [r3, #2]
 8005db8:	7858      	ldrb	r0, [r3, #1]
 8005dba:	7819      	ldrb	r1, [r3, #0]
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	e003      	b.n	8005dc8 <keypad_sm+0x1220>
	while(keypaditerator < 4){
 8005dc0:	46a4      	mov	ip, r4
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005dc6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005dc8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005dca:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005dce:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005dd0:	bf04      	itt	eq
 8005dd2:	f04f 0e01 	moveq.w	lr, #1
 8005dd6:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005dda:	2a05      	cmp	r2, #5
 8005ddc:	46e0      	mov	r8, ip
 8005dde:	d1ef      	bne.n	8005dc0 <keypad_sm+0x1218>
 8005de0:	f883 c004 	strb.w	ip, [r3, #4]
 8005de4:	70dc      	strb	r4, [r3, #3]
 8005de6:	7098      	strb	r0, [r3, #2]
 8005de8:	7059      	strb	r1, [r3, #1]
 8005dea:	f883 a000 	strb.w	sl, [r3]
 8005dee:	2304      	movs	r3, #4
 8005df0:	702b      	strb	r3, [r5, #0]
 8005df2:	f1be 0f00 	cmp.w	lr, #0
 8005df6:	f43f a970 	beq.w	80050da <keypad_sm+0x532>
 8005dfa:	f886 9000 	strb.w	r9, [r6]
 8005dfe:	f7ff b96c 	b.w	80050da <keypad_sm+0x532>
 8005e02:	bf00      	nop
 8005e04:	20000011 	.word	0x20000011
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	20000758 	.word	0x20000758
 8005e10:	41400000 	.word	0x41400000
 8005e14:	20000a7c 	.word	0x20000a7c
 8005e18:	20000a80 	.word	0x20000a80
				kpenum = WAIT;
 8005e1c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005e20:	4dc5      	ldr	r5, [pc, #788]	; (8006138 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005e22:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005e26:	f995 2000 	ldrsb.w	r2, [r5]
 8005e2a:	2a03      	cmp	r2, #3
 8005e2c:	f73f a955 	bgt.w	80050da <keypad_sm+0x532>
 8005e30:	4bc2      	ldr	r3, [pc, #776]	; (800613c <keypad_sm+0x1594>)
 8005e32:	4ec3      	ldr	r6, [pc, #780]	; (8006140 <keypad_sm+0x1598>)
 8005e34:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005e36:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005e3a:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005e3e:	f896 9000 	ldrb.w	r9, [r6]
 8005e42:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005e46:	789c      	ldrb	r4, [r3, #2]
 8005e48:	7858      	ldrb	r0, [r3, #1]
 8005e4a:	7819      	ldrb	r1, [r3, #0]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	e003      	b.n	8005e58 <keypad_sm+0x12b0>
	while(keypaditerator < 4){
 8005e50:	46a4      	mov	ip, r4
 8005e52:	4604      	mov	r4, r0
 8005e54:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005e56:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005e58:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005e5a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005e5e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005e60:	bf04      	itt	eq
 8005e62:	f04f 0e01 	moveq.w	lr, #1
 8005e66:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005e6a:	2a05      	cmp	r2, #5
 8005e6c:	46e0      	mov	r8, ip
 8005e6e:	d1ef      	bne.n	8005e50 <keypad_sm+0x12a8>
 8005e70:	f883 c004 	strb.w	ip, [r3, #4]
 8005e74:	70dc      	strb	r4, [r3, #3]
 8005e76:	7098      	strb	r0, [r3, #2]
 8005e78:	7059      	strb	r1, [r3, #1]
 8005e7a:	f883 a000 	strb.w	sl, [r3]
 8005e7e:	2304      	movs	r3, #4
 8005e80:	702b      	strb	r3, [r5, #0]
 8005e82:	f1be 0f00 	cmp.w	lr, #0
 8005e86:	f43f a928 	beq.w	80050da <keypad_sm+0x532>
 8005e8a:	f886 9000 	strb.w	r9, [r6]
 8005e8e:	f7ff b924 	b.w	80050da <keypad_sm+0x532>
				kpenum = WAIT;
 8005e92:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005e96:	4da8      	ldr	r5, [pc, #672]	; (8006138 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005e98:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005e9c:	f995 2000 	ldrsb.w	r2, [r5]
 8005ea0:	2a03      	cmp	r2, #3
 8005ea2:	f73f a91a 	bgt.w	80050da <keypad_sm+0x532>
 8005ea6:	4ba5      	ldr	r3, [pc, #660]	; (800613c <keypad_sm+0x1594>)
 8005ea8:	4ea5      	ldr	r6, [pc, #660]	; (8006140 <keypad_sm+0x1598>)
			keypadarr[0] = num;
 8005eaa:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005eae:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005eb2:	f896 8000 	ldrb.w	r8, [r6]
 8005eb6:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005eba:	789c      	ldrb	r4, [r3, #2]
 8005ebc:	7858      	ldrb	r0, [r3, #1]
 8005ebe:	7819      	ldrb	r1, [r3, #0]
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	e003      	b.n	8005ecc <keypad_sm+0x1324>
	while(keypaditerator < 4){
 8005ec4:	46a4      	mov	ip, r4
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005eca:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005ecc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005ece:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005ed2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005ed4:	bf04      	itt	eq
 8005ed6:	f04f 0e01 	moveq.w	lr, #1
 8005eda:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005ede:	2a04      	cmp	r2, #4
 8005ee0:	46e1      	mov	r9, ip
 8005ee2:	d1ef      	bne.n	8005ec4 <keypad_sm+0x131c>
 8005ee4:	702a      	strb	r2, [r5, #0]
 8005ee6:	f883 c004 	strb.w	ip, [r3, #4]
 8005eea:	70dc      	strb	r4, [r3, #3]
 8005eec:	7098      	strb	r0, [r3, #2]
 8005eee:	7059      	strb	r1, [r3, #1]
 8005ef0:	f883 a000 	strb.w	sl, [r3]
 8005ef4:	f1be 0f00 	cmp.w	lr, #0
 8005ef8:	f43f a8ef 	beq.w	80050da <keypad_sm+0x532>
 8005efc:	f886 8000 	strb.w	r8, [r6]
 8005f00:	f7ff b8eb 	b.w	80050da <keypad_sm+0x532>
			else if(num == '#'){
 8005f04:	2823      	cmp	r0, #35	; 0x23
 8005f06:	f000 8331 	beq.w	800656c <keypad_sm+0x19c4>
			else if(num == '+'){
 8005f0a:	282b      	cmp	r0, #43	; 0x2b
 8005f0c:	f000 84bd 	beq.w	800688a <keypad_sm+0x1ce2>
			else if(num == '-'){
 8005f10:	282d      	cmp	r0, #45	; 0x2d
 8005f12:	f000 8599 	beq.w	8006a48 <keypad_sm+0x1ea0>
			else if(num == 's'){
 8005f16:	2873      	cmp	r0, #115	; 0x73
 8005f18:	f000 8589 	beq.w	8006a2e <keypad_sm+0x1e86>
			else if(num == '['){
 8005f1c:	285b      	cmp	r0, #91	; 0x5b
 8005f1e:	f000 87b3 	beq.w	8006e88 <keypad_sm+0x22e0>
			else if(num == ']'){
 8005f22:	285d      	cmp	r0, #93	; 0x5d
 8005f24:	f001 80e3 	beq.w	80070ee <keypad_sm+0x2546>
			else if(num == '*'){
 8005f28:	282a      	cmp	r0, #42	; 0x2a
 8005f2a:	f47e af1b 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8005f2e:	4b85      	ldr	r3, [pc, #532]	; (8006144 <keypad_sm+0x159c>)
 8005f30:	4a85      	ldr	r2, [pc, #532]	; (8006148 <keypad_sm+0x15a0>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	fab3 f383 	clz	r3, r3
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	7013      	strb	r3, [r2, #0]
 8005f3c:	f7fe be60 	b.w	8004c00 <keypad_sm+0x58>
	while(keypaditerator < 4){
 8005f40:	4d7d      	ldr	r5, [pc, #500]	; (8006138 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005f42:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005f44:	f995 2000 	ldrsb.w	r2, [r5]
 8005f48:	2a03      	cmp	r2, #3
 8005f4a:	f73e ae59 	bgt.w	8004c00 <keypad_sm+0x58>
 8005f4e:	4b7b      	ldr	r3, [pc, #492]	; (800613c <keypad_sm+0x1594>)
 8005f50:	4e7b      	ldr	r6, [pc, #492]	; (8006140 <keypad_sm+0x1598>)
 8005f52:	3201      	adds	r2, #1
 8005f54:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005f58:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005f5c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005f60:	f896 c000 	ldrb.w	ip, [r6]
 8005f64:	78df      	ldrb	r7, [r3, #3]
 8005f66:	789c      	ldrb	r4, [r3, #2]
 8005f68:	7858      	ldrb	r0, [r3, #1]
 8005f6a:	7819      	ldrb	r1, [r3, #0]
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	e003      	b.n	8005f78 <keypad_sm+0x13d0>
	while(keypaditerator < 4){
 8005f70:	4627      	mov	r7, r4
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005f76:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005f78:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005f7a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005f7e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005f80:	bf04      	itt	eq
 8005f82:	f04f 0c00 	moveq.w	ip, #0
 8005f86:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005f8a:	2a05      	cmp	r2, #5
 8005f8c:	46b8      	mov	r8, r7
 8005f8e:	d1ef      	bne.n	8005f70 <keypad_sm+0x13c8>
 8005f90:	711f      	strb	r7, [r3, #4]
 8005f92:	70dc      	strb	r4, [r3, #3]
 8005f94:	7098      	strb	r0, [r3, #2]
 8005f96:	7059      	strb	r1, [r3, #1]
 8005f98:	f883 9000 	strb.w	r9, [r3]
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	702b      	strb	r3, [r5, #0]
 8005fa0:	f1be 0f00 	cmp.w	lr, #0
 8005fa4:	f43e ae2c 	beq.w	8004c00 <keypad_sm+0x58>
 8005fa8:	f886 c000 	strb.w	ip, [r6]
 8005fac:	f7fe be28 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8005fb0:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8005fb2:	4d61      	ldr	r5, [pc, #388]	; (8006138 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8005fb4:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005fb6:	f995 2000 	ldrsb.w	r2, [r5]
 8005fba:	2a03      	cmp	r2, #3
 8005fbc:	f73f a88d 	bgt.w	80050da <keypad_sm+0x532>
 8005fc0:	4b5e      	ldr	r3, [pc, #376]	; (800613c <keypad_sm+0x1594>)
 8005fc2:	4e5f      	ldr	r6, [pc, #380]	; (8006140 <keypad_sm+0x1598>)
 8005fc4:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005fc8:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005fcc:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005fd0:	f896 e000 	ldrb.w	lr, [r6]
 8005fd4:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005fd8:	789c      	ldrb	r4, [r3, #2]
 8005fda:	7858      	ldrb	r0, [r3, #1]
 8005fdc:	7819      	ldrb	r1, [r3, #0]
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	e003      	b.n	8005fea <keypad_sm+0x1442>
	while(keypaditerator < 4){
 8005fe2:	46a4      	mov	ip, r4
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005fe8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005fea:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005fec:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005ff0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005ff2:	bf04      	itt	eq
 8005ff4:	f04f 0801 	moveq.w	r8, #1
 8005ff8:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005ffc:	2a04      	cmp	r2, #4
 8005ffe:	46e1      	mov	r9, ip
 8006000:	d1ef      	bne.n	8005fe2 <keypad_sm+0x143a>
 8006002:	702a      	strb	r2, [r5, #0]
 8006004:	f883 c004 	strb.w	ip, [r3, #4]
 8006008:	70dc      	strb	r4, [r3, #3]
 800600a:	7098      	strb	r0, [r3, #2]
 800600c:	7059      	strb	r1, [r3, #1]
 800600e:	f883 a000 	strb.w	sl, [r3]
 8006012:	f1b8 0f00 	cmp.w	r8, #0
 8006016:	f43f a860 	beq.w	80050da <keypad_sm+0x532>
 800601a:	f886 e000 	strb.w	lr, [r6]
 800601e:	f7ff b85c 	b.w	80050da <keypad_sm+0x532>
 8006022:	4d45      	ldr	r5, [pc, #276]	; (8006138 <keypad_sm+0x1590>)
 8006024:	f995 2000 	ldrsb.w	r2, [r5]
 8006028:	2a03      	cmp	r2, #3
 800602a:	f73f a856 	bgt.w	80050da <keypad_sm+0x532>
 800602e:	4b43      	ldr	r3, [pc, #268]	; (800613c <keypad_sm+0x1594>)
 8006030:	4e43      	ldr	r6, [pc, #268]	; (8006140 <keypad_sm+0x1598>)
 8006032:	3201      	adds	r2, #1
 8006034:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006038:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800603c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006040:	f896 e000 	ldrb.w	lr, [r6]
 8006044:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006048:	789c      	ldrb	r4, [r3, #2]
 800604a:	7858      	ldrb	r0, [r3, #1]
 800604c:	7819      	ldrb	r1, [r3, #0]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	e003      	b.n	800605a <keypad_sm+0x14b2>
	while(keypaditerator < 4){
 8006052:	46a4      	mov	ip, r4
 8006054:	4604      	mov	r4, r0
 8006056:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006058:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800605a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800605c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006060:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006062:	bf04      	itt	eq
 8006064:	f04f 0801 	moveq.w	r8, #1
 8006068:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800606c:	2a05      	cmp	r2, #5
 800606e:	46e1      	mov	r9, ip
 8006070:	d1ef      	bne.n	8006052 <keypad_sm+0x14aa>
 8006072:	f883 c004 	strb.w	ip, [r3, #4]
 8006076:	70dc      	strb	r4, [r3, #3]
 8006078:	7098      	strb	r0, [r3, #2]
 800607a:	7059      	strb	r1, [r3, #1]
 800607c:	f883 a000 	strb.w	sl, [r3]
 8006080:	2304      	movs	r3, #4
 8006082:	702b      	strb	r3, [r5, #0]
 8006084:	f1b8 0f00 	cmp.w	r8, #0
 8006088:	f43f a827 	beq.w	80050da <keypad_sm+0x532>
 800608c:	f886 e000 	strb.w	lr, [r6]
 8006090:	f7ff b823 	b.w	80050da <keypad_sm+0x532>
 8006094:	4d28      	ldr	r5, [pc, #160]	; (8006138 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8006096:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8006098:	f995 2000 	ldrsb.w	r2, [r5]
 800609c:	2a03      	cmp	r2, #3
 800609e:	f73e adaf 	bgt.w	8004c00 <keypad_sm+0x58>
 80060a2:	4b26      	ldr	r3, [pc, #152]	; (800613c <keypad_sm+0x1594>)
 80060a4:	4e26      	ldr	r6, [pc, #152]	; (8006140 <keypad_sm+0x1598>)
 80060a6:	3201      	adds	r2, #1
 80060a8:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 80060ac:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80060b0:	f893 8004 	ldrb.w	r8, [r3, #4]
 80060b4:	f896 c000 	ldrb.w	ip, [r6]
 80060b8:	78df      	ldrb	r7, [r3, #3]
 80060ba:	789c      	ldrb	r4, [r3, #2]
 80060bc:	7858      	ldrb	r0, [r3, #1]
 80060be:	7819      	ldrb	r1, [r3, #0]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	e003      	b.n	80060cc <keypad_sm+0x1524>
	while(keypaditerator < 4){
 80060c4:	4627      	mov	r7, r4
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80060ca:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80060cc:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80060ce:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80060d2:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80060d4:	bf04      	itt	eq
 80060d6:	f04f 0c00 	moveq.w	ip, #0
 80060da:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 80060de:	2a05      	cmp	r2, #5
 80060e0:	46b8      	mov	r8, r7
 80060e2:	d1ef      	bne.n	80060c4 <keypad_sm+0x151c>
 80060e4:	711f      	strb	r7, [r3, #4]
 80060e6:	70dc      	strb	r4, [r3, #3]
 80060e8:	7098      	strb	r0, [r3, #2]
 80060ea:	7059      	strb	r1, [r3, #1]
 80060ec:	f883 9000 	strb.w	r9, [r3]
 80060f0:	2304      	movs	r3, #4
 80060f2:	702b      	strb	r3, [r5, #0]
 80060f4:	f1be 0f00 	cmp.w	lr, #0
 80060f8:	f43e ad82 	beq.w	8004c00 <keypad_sm+0x58>
 80060fc:	f886 c000 	strb.w	ip, [r6]
 8006100:	f7fe bd7e 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8006104:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8006106:	4d0c      	ldr	r5, [pc, #48]	; (8006138 <keypad_sm+0x1590>)
				kpenum = WAIT;
 8006108:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 800610a:	f995 2000 	ldrsb.w	r2, [r5]
 800610e:	2a03      	cmp	r2, #3
 8006110:	f73e afe3 	bgt.w	80050da <keypad_sm+0x532>
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <keypad_sm+0x1594>)
 8006116:	4e0a      	ldr	r6, [pc, #40]	; (8006140 <keypad_sm+0x1598>)
 8006118:	3201      	adds	r2, #1
 800611a:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800611e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006122:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006126:	f896 e000 	ldrb.w	lr, [r6]
 800612a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800612e:	789c      	ldrb	r4, [r3, #2]
 8006130:	7858      	ldrb	r0, [r3, #1]
 8006132:	7819      	ldrb	r1, [r3, #0]
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	e00d      	b.n	8006154 <keypad_sm+0x15ac>
 8006138:	20000011 	.word	0x20000011
 800613c:	2000000c 	.word	0x2000000c
 8006140:	20000758 	.word	0x20000758
 8006144:	200003f4 	.word	0x200003f4
 8006148:	200003f5 	.word	0x200003f5
	while(keypaditerator < 4){
 800614c:	46a4      	mov	ip, r4
 800614e:	4604      	mov	r4, r0
 8006150:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006152:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006154:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006156:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800615a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800615c:	bf04      	itt	eq
 800615e:	f04f 0801 	moveq.w	r8, #1
 8006162:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006166:	2a05      	cmp	r2, #5
 8006168:	46e1      	mov	r9, ip
 800616a:	d1ef      	bne.n	800614c <keypad_sm+0x15a4>
 800616c:	f883 c004 	strb.w	ip, [r3, #4]
 8006170:	70dc      	strb	r4, [r3, #3]
 8006172:	7098      	strb	r0, [r3, #2]
 8006174:	7059      	strb	r1, [r3, #1]
 8006176:	f883 a000 	strb.w	sl, [r3]
 800617a:	2304      	movs	r3, #4
 800617c:	702b      	strb	r3, [r5, #0]
 800617e:	f1b8 0f00 	cmp.w	r8, #0
 8006182:	f43e afaa 	beq.w	80050da <keypad_sm+0x532>
 8006186:	f886 e000 	strb.w	lr, [r6]
 800618a:	f7fe bfa6 	b.w	80050da <keypad_sm+0x532>
			else if(num == '#'){
 800618e:	2823      	cmp	r0, #35	; 0x23
 8006190:	f000 83c2 	beq.w	8006918 <keypad_sm+0x1d70>
			else if(num == '+'){
 8006194:	282b      	cmp	r0, #43	; 0x2b
 8006196:	f000 83f6 	beq.w	8006986 <keypad_sm+0x1dde>
			else if(num == '-'){
 800619a:	282d      	cmp	r0, #45	; 0x2d
 800619c:	f000 84e6 	beq.w	8006b6c <keypad_sm+0x1fc4>
			else if(num == 's'){
 80061a0:	2873      	cmp	r0, #115	; 0x73
 80061a2:	f000 86f6 	beq.w	8006f92 <keypad_sm+0x23ea>
			else if(num == '['){
 80061a6:	285b      	cmp	r0, #91	; 0x5b
 80061a8:	f000 87dd 	beq.w	8007166 <keypad_sm+0x25be>
			else if(num == ']'){
 80061ac:	285d      	cmp	r0, #93	; 0x5d
 80061ae:	f000 87cf 	beq.w	8007150 <keypad_sm+0x25a8>
			else if(num == '*'){
 80061b2:	282a      	cmp	r0, #42	; 0x2a
 80061b4:	f47e add6 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 80061b8:	4bb9      	ldr	r3, [pc, #740]	; (80064a0 <keypad_sm+0x18f8>)
 80061ba:	4aba      	ldr	r2, [pc, #744]	; (80064a4 <keypad_sm+0x18fc>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	fab3 f383 	clz	r3, r3
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	7013      	strb	r3, [r2, #0]
 80061c6:	f7fe bd1b 	b.w	8004c00 <keypad_sm+0x58>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80061ca:	4db7      	ldr	r5, [pc, #732]	; (80064a8 <keypad_sm+0x1900>)
 80061cc:	f995 3000 	ldrsb.w	r3, [r5]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	f77e ad15 	ble.w	8004c00 <keypad_sm+0x58>
 80061d6:	4eb5      	ldr	r6, [pc, #724]	; (80064ac <keypad_sm+0x1904>)
 80061d8:	7832      	ldrb	r2, [r6, #0]
 80061da:	2a00      	cmp	r2, #0
 80061dc:	f47e ad10 	bne.w	8004c00 <keypad_sm+0x58>
				keypadarr[i-1] = keypadarr[i];
 80061e0:	4ab3      	ldr	r2, [pc, #716]	; (80064b0 <keypad_sm+0x1908>)
			keypaditerator--;
 80061e2:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 80061e4:	f8d2 1001 	ldr.w	r1, [r2, #1]
			keypaditerator--;
 80061e8:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 80061ea:	6011      	str	r1, [r2, #0]
			keypaddecimal = 1;
 80061ec:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 80061ee:	212e      	movs	r1, #46	; 0x2e
			keypaddecimal = 1;
 80061f0:	7033      	strb	r3, [r6, #0]
			keypadarr[keypadlength-1] = num;
 80061f2:	7111      	strb	r1, [r2, #4]
			keypaditerator--;
 80061f4:	f7fe bd04 	b.w	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 80061f8:	f7fe f80e 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80061fc:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80061fe:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006200:	f7fa ff8a 	bl	8001118 <__aeabi_fcmpge>
 8006204:	b130      	cbz	r0, 8006214 <keypad_sm+0x166c>
 8006206:	4628      	mov	r0, r5
 8006208:	49aa      	ldr	r1, [pc, #680]	; (80064b4 <keypad_sm+0x190c>)
 800620a:	f7fa ff7b 	bl	8001104 <__aeabi_fcmple>
 800620e:	b108      	cbz	r0, 8006214 <keypad_sm+0x166c>
					volt_set_aux = translate_keypad();
 8006210:	4ba9      	ldr	r3, [pc, #676]	; (80064b8 <keypad_sm+0x1910>)
 8006212:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006214:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006216:	4da4      	ldr	r5, [pc, #656]	; (80064a8 <keypad_sm+0x1900>)
				kpenum = WAIT;
 8006218:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 800621a:	f995 2000 	ldrsb.w	r2, [r5]
 800621e:	2a03      	cmp	r2, #3
 8006220:	f73e acee 	bgt.w	8004c00 <keypad_sm+0x58>
 8006224:	4ba2      	ldr	r3, [pc, #648]	; (80064b0 <keypad_sm+0x1908>)
 8006226:	4ea1      	ldr	r6, [pc, #644]	; (80064ac <keypad_sm+0x1904>)
 8006228:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800622a:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800622e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006232:	f896 e000 	ldrb.w	lr, [r6]
 8006236:	f893 c003 	ldrb.w	ip, [r3, #3]
 800623a:	789c      	ldrb	r4, [r3, #2]
 800623c:	7858      	ldrb	r0, [r3, #1]
 800623e:	7819      	ldrb	r1, [r3, #0]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	e003      	b.n	800624c <keypad_sm+0x16a4>
	while(keypaditerator < 4){
 8006244:	46a4      	mov	ip, r4
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800624a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800624c:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800624e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006252:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006254:	bf04      	itt	eq
 8006256:	f04f 0e00 	moveq.w	lr, #0
 800625a:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 800625c:	2a05      	cmp	r2, #5
 800625e:	46e0      	mov	r8, ip
 8006260:	d1f0      	bne.n	8006244 <keypad_sm+0x169c>
 8006262:	f883 c004 	strb.w	ip, [r3, #4]
 8006266:	70dc      	strb	r4, [r3, #3]
 8006268:	7098      	strb	r0, [r3, #2]
 800626a:	7059      	strb	r1, [r3, #1]
 800626c:	f883 9000 	strb.w	r9, [r3]
 8006270:	2304      	movs	r3, #4
 8006272:	702b      	strb	r3, [r5, #0]
 8006274:	2f00      	cmp	r7, #0
 8006276:	f43e acc3 	beq.w	8004c00 <keypad_sm+0x58>
 800627a:	f886 e000 	strb.w	lr, [r6]
 800627e:	f7fe bcbf 	b.w	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 8006282:	f7fd ffc9 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006286:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006288:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800628a:	f7fa ff45 	bl	8001118 <__aeabi_fcmpge>
 800628e:	b170      	cbz	r0, 80062ae <keypad_sm+0x1706>
 8006290:	4628      	mov	r0, r5
 8006292:	4988      	ldr	r1, [pc, #544]	; (80064b4 <keypad_sm+0x190c>)
 8006294:	f7fa ff36 	bl	8001104 <__aeabi_fcmple>
 8006298:	b148      	cbz	r0, 80062ae <keypad_sm+0x1706>
					amp_set_main_old = amp_set_main;
 800629a:	4d88      	ldr	r5, [pc, #544]	; (80064bc <keypad_sm+0x1914>)
 800629c:	4b88      	ldr	r3, [pc, #544]	; (80064c0 <keypad_sm+0x1918>)
 800629e:	682a      	ldr	r2, [r5, #0]
 80062a0:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80062a2:	f7fd ffb9 	bl	8004218 <translate_keypad>
 80062a6:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 80062a8:	6828      	ldr	r0, [r5, #0]
 80062aa:	f7fb fb65 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 80062ae:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80062b0:	4d7d      	ldr	r5, [pc, #500]	; (80064a8 <keypad_sm+0x1900>)
				kpenum = WAIT;
 80062b2:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80062b4:	f995 2000 	ldrsb.w	r2, [r5]
 80062b8:	2a03      	cmp	r2, #3
 80062ba:	f73e af0e 	bgt.w	80050da <keypad_sm+0x532>
 80062be:	4b7c      	ldr	r3, [pc, #496]	; (80064b0 <keypad_sm+0x1908>)
 80062c0:	4e7a      	ldr	r6, [pc, #488]	; (80064ac <keypad_sm+0x1904>)
 80062c2:	4689      	mov	r9, r1
			keypadarr[0] = num;
 80062c4:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80062c8:	f893 8004 	ldrb.w	r8, [r3, #4]
 80062cc:	f896 e000 	ldrb.w	lr, [r6]
 80062d0:	f893 c003 	ldrb.w	ip, [r3, #3]
 80062d4:	789c      	ldrb	r4, [r3, #2]
 80062d6:	7858      	ldrb	r0, [r3, #1]
 80062d8:	7819      	ldrb	r1, [r3, #0]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	e003      	b.n	80062e6 <keypad_sm+0x173e>
	while(keypaditerator < 4){
 80062de:	46a4      	mov	ip, r4
 80062e0:	4604      	mov	r4, r0
 80062e2:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80062e4:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80062e6:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80062e8:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80062ec:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80062ee:	bf04      	itt	eq
 80062f0:	f04f 0901 	moveq.w	r9, #1
 80062f4:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80062f8:	2a04      	cmp	r2, #4
 80062fa:	46e0      	mov	r8, ip
 80062fc:	d1ef      	bne.n	80062de <keypad_sm+0x1736>
 80062fe:	702a      	strb	r2, [r5, #0]
 8006300:	f883 c004 	strb.w	ip, [r3, #4]
 8006304:	70dc      	strb	r4, [r3, #3]
 8006306:	7098      	strb	r0, [r3, #2]
 8006308:	7059      	strb	r1, [r3, #1]
 800630a:	f883 a000 	strb.w	sl, [r3]
 800630e:	f1b9 0f00 	cmp.w	r9, #0
 8006312:	f43e aee2 	beq.w	80050da <keypad_sm+0x532>
 8006316:	f886 e000 	strb.w	lr, [r6]
 800631a:	f7fe bede 	b.w	80050da <keypad_sm+0x532>
	float temp = translate_keypad();
 800631e:	f7fd ff7b 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006322:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006324:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006326:	f7fa fef7 	bl	8001118 <__aeabi_fcmpge>
 800632a:	b190      	cbz	r0, 8006352 <keypad_sm+0x17aa>
 800632c:	4628      	mov	r0, r5
 800632e:	f7fa f893 	bl	8000458 <__aeabi_f2d>
 8006332:	a359      	add	r3, pc, #356	; (adr r3, 8006498 <keypad_sm+0x18f0>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f7fa fb62 	bl	8000a00 <__aeabi_dcmple>
 800633c:	b148      	cbz	r0, 8006352 <keypad_sm+0x17aa>
					amp_set_main_old = amp_set_main;
 800633e:	4d5f      	ldr	r5, [pc, #380]	; (80064bc <keypad_sm+0x1914>)
 8006340:	4b5f      	ldr	r3, [pc, #380]	; (80064c0 <keypad_sm+0x1918>)
 8006342:	682a      	ldr	r2, [r5, #0]
 8006344:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006346:	f7fd ff67 	bl	8004218 <translate_keypad>
 800634a:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 800634c:	6828      	ldr	r0, [r5, #0]
 800634e:	f7fb fb13 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006352:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006354:	4d54      	ldr	r5, [pc, #336]	; (80064a8 <keypad_sm+0x1900>)
				kpenum = WAIT;
 8006356:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 8006358:	f995 2000 	ldrsb.w	r2, [r5]
 800635c:	2a03      	cmp	r2, #3
 800635e:	f73e ac4f 	bgt.w	8004c00 <keypad_sm+0x58>
 8006362:	4b53      	ldr	r3, [pc, #332]	; (80064b0 <keypad_sm+0x1908>)
 8006364:	4e51      	ldr	r6, [pc, #324]	; (80064ac <keypad_sm+0x1904>)
			keypadarr[0] = num;
 8006366:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800636a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800636e:	f896 e000 	ldrb.w	lr, [r6]
 8006372:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006376:	789c      	ldrb	r4, [r3, #2]
 8006378:	7858      	ldrb	r0, [r3, #1]
 800637a:	7819      	ldrb	r1, [r3, #0]
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	e003      	b.n	8006388 <keypad_sm+0x17e0>
	while(keypaditerator < 4){
 8006380:	46a4      	mov	ip, r4
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006386:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006388:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800638a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800638e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006390:	bf04      	itt	eq
 8006392:	f04f 0e00 	moveq.w	lr, #0
 8006396:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 8006398:	2a04      	cmp	r2, #4
 800639a:	46e0      	mov	r8, ip
 800639c:	d1f0      	bne.n	8006380 <keypad_sm+0x17d8>
 800639e:	702a      	strb	r2, [r5, #0]
 80063a0:	f883 c004 	strb.w	ip, [r3, #4]
 80063a4:	70dc      	strb	r4, [r3, #3]
 80063a6:	7098      	strb	r0, [r3, #2]
 80063a8:	7059      	strb	r1, [r3, #1]
 80063aa:	f883 9000 	strb.w	r9, [r3]
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	f43e ac26 	beq.w	8004c00 <keypad_sm+0x58>
 80063b4:	f886 e000 	strb.w	lr, [r6]
 80063b8:	f7fe bc22 	b.w	8004c00 <keypad_sm+0x58>
			else if(num == '#'){
 80063bc:	2823      	cmp	r0, #35	; 0x23
 80063be:	f000 845c 	beq.w	8006c7a <keypad_sm+0x20d2>
			else if(num == '+'){
 80063c2:	282b      	cmp	r0, #43	; 0x2b
 80063c4:	f000 840c 	beq.w	8006be0 <keypad_sm+0x2038>
			else if(num == '-'){
 80063c8:	282d      	cmp	r0, #45	; 0x2d
 80063ca:	f000 8618 	beq.w	8006ffe <keypad_sm+0x2456>
			else if(num == 's'){
 80063ce:	2873      	cmp	r0, #115	; 0x73
 80063d0:	f000 85ea 	beq.w	8006fa8 <keypad_sm+0x2400>
			else if(num == '['){
 80063d4:	285b      	cmp	r0, #91	; 0x5b
 80063d6:	f000 867c 	beq.w	80070d2 <keypad_sm+0x252a>
			else if(num == ']'){
 80063da:	285d      	cmp	r0, #93	; 0x5d
 80063dc:	f000 866b 	beq.w	80070b6 <keypad_sm+0x250e>
			else if(num == '*'){
 80063e0:	282a      	cmp	r0, #42	; 0x2a
 80063e2:	f47e acbf 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 80063e6:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <keypad_sm+0x18f8>)
 80063e8:	4a2e      	ldr	r2, [pc, #184]	; (80064a4 <keypad_sm+0x18fc>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	fab3 f383 	clz	r3, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	7013      	strb	r3, [r2, #0]
 80063f4:	f7fe bc04 	b.w	8004c00 <keypad_sm+0x58>
	while(keypaditerator < 4){
 80063f8:	4d2b      	ldr	r5, [pc, #172]	; (80064a8 <keypad_sm+0x1900>)
 80063fa:	f995 2000 	ldrsb.w	r2, [r5]
 80063fe:	2a03      	cmp	r2, #3
 8006400:	f73e ae6b 	bgt.w	80050da <keypad_sm+0x532>
 8006404:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <keypad_sm+0x1908>)
 8006406:	4e29      	ldr	r6, [pc, #164]	; (80064ac <keypad_sm+0x1904>)
 8006408:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800640c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006410:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006414:	f896 e000 	ldrb.w	lr, [r6]
 8006418:	f893 c003 	ldrb.w	ip, [r3, #3]
 800641c:	789c      	ldrb	r4, [r3, #2]
 800641e:	7858      	ldrb	r0, [r3, #1]
 8006420:	7819      	ldrb	r1, [r3, #0]
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	e003      	b.n	800642e <keypad_sm+0x1886>
	while(keypaditerator < 4){
 8006426:	46a4      	mov	ip, r4
 8006428:	4604      	mov	r4, r0
 800642a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800642c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800642e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006430:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006434:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006436:	bf04      	itt	eq
 8006438:	f04f 0801 	moveq.w	r8, #1
 800643c:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006440:	2a04      	cmp	r2, #4
 8006442:	46e1      	mov	r9, ip
 8006444:	d1ef      	bne.n	8006426 <keypad_sm+0x187e>
 8006446:	702a      	strb	r2, [r5, #0]
 8006448:	f883 c004 	strb.w	ip, [r3, #4]
 800644c:	70dc      	strb	r4, [r3, #3]
 800644e:	7098      	strb	r0, [r3, #2]
 8006450:	7059      	strb	r1, [r3, #1]
 8006452:	f883 a000 	strb.w	sl, [r3]
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	f43e ae3e 	beq.w	80050da <keypad_sm+0x532>
 800645e:	f886 e000 	strb.w	lr, [r6]
 8006462:	f7fe be3a 	b.w	80050da <keypad_sm+0x532>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8006466:	4d10      	ldr	r5, [pc, #64]	; (80064a8 <keypad_sm+0x1900>)
 8006468:	f995 3000 	ldrsb.w	r3, [r5]
 800646c:	2b01      	cmp	r3, #1
 800646e:	f77e abc7 	ble.w	8004c00 <keypad_sm+0x58>
 8006472:	490e      	ldr	r1, [pc, #56]	; (80064ac <keypad_sm+0x1904>)
 8006474:	780a      	ldrb	r2, [r1, #0]
 8006476:	2a00      	cmp	r2, #0
 8006478:	f47e abc2 	bne.w	8004c00 <keypad_sm+0x58>
				keypadarr[i-1] = keypadarr[i];
 800647c:	4a0c      	ldr	r2, [pc, #48]	; (80064b0 <keypad_sm+0x1908>)
			keypaditerator--;
 800647e:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8006480:	f8d2 0001 	ldr.w	r0, [r2, #1]
			keypaditerator--;
 8006484:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 8006486:	6010      	str	r0, [r2, #0]
			keypaddecimal = 1;
 8006488:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 800648a:	202e      	movs	r0, #46	; 0x2e
			keypaddecimal = 1;
 800648c:	700b      	strb	r3, [r1, #0]
			keypadarr[keypadlength-1] = num;
 800648e:	7110      	strb	r0, [r2, #4]
			keypaditerator--;
 8006490:	f7fe bbb6 	b.w	8004c00 <keypad_sm+0x58>
 8006494:	f3af 8000 	nop.w
 8006498:	50b0f27c 	.word	0x50b0f27c
 800649c:	3fe99a6b 	.word	0x3fe99a6b
 80064a0:	200003f4 	.word	0x200003f4
 80064a4:	200003f5 	.word	0x200003f5
 80064a8:	20000011 	.word	0x20000011
 80064ac:	20000758 	.word	0x20000758
 80064b0:	2000000c 	.word	0x2000000c
 80064b4:	41400000 	.word	0x41400000
 80064b8:	20000a78 	.word	0x20000a78
 80064bc:	200003ec 	.word	0x200003ec
 80064c0:	200003f0 	.word	0x200003f0
	while(keypaditerator < 4){
 80064c4:	4dbe      	ldr	r5, [pc, #760]	; (80067c0 <keypad_sm+0x1c18>)
 80064c6:	f995 2000 	ldrsb.w	r2, [r5]
 80064ca:	2a03      	cmp	r2, #3
 80064cc:	f73e ae05 	bgt.w	80050da <keypad_sm+0x532>
 80064d0:	4bbc      	ldr	r3, [pc, #752]	; (80067c4 <keypad_sm+0x1c1c>)
 80064d2:	4ebd      	ldr	r6, [pc, #756]	; (80067c8 <keypad_sm+0x1c20>)
 80064d4:	3201      	adds	r2, #1
 80064d6:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80064da:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80064de:	f893 9004 	ldrb.w	r9, [r3, #4]
 80064e2:	f896 e000 	ldrb.w	lr, [r6]
 80064e6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80064ea:	789c      	ldrb	r4, [r3, #2]
 80064ec:	7858      	ldrb	r0, [r3, #1]
 80064ee:	7819      	ldrb	r1, [r3, #0]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	e003      	b.n	80064fc <keypad_sm+0x1954>
	while(keypaditerator < 4){
 80064f4:	46a4      	mov	ip, r4
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80064fa:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80064fc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80064fe:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006502:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006504:	bf04      	itt	eq
 8006506:	f04f 0801 	moveq.w	r8, #1
 800650a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800650e:	2a05      	cmp	r2, #5
 8006510:	46e1      	mov	r9, ip
 8006512:	d1ef      	bne.n	80064f4 <keypad_sm+0x194c>
 8006514:	f883 c004 	strb.w	ip, [r3, #4]
 8006518:	70dc      	strb	r4, [r3, #3]
 800651a:	7098      	strb	r0, [r3, #2]
 800651c:	7059      	strb	r1, [r3, #1]
 800651e:	f883 a000 	strb.w	sl, [r3]
 8006522:	2304      	movs	r3, #4
 8006524:	702b      	strb	r3, [r5, #0]
 8006526:	f1b8 0f00 	cmp.w	r8, #0
 800652a:	f43e add6 	beq.w	80050da <keypad_sm+0x532>
 800652e:	f886 e000 	strb.w	lr, [r6]
 8006532:	f7fe bdd2 	b.w	80050da <keypad_sm+0x532>
		if(keypaditerator < keypadlength-1){
 8006536:	4da2      	ldr	r5, [pc, #648]	; (80067c0 <keypad_sm+0x1c18>)
 8006538:	f995 2000 	ldrsb.w	r2, [r5]
 800653c:	2a03      	cmp	r2, #3
 800653e:	f73e ab5f 	bgt.w	8004c00 <keypad_sm+0x58>
			if(keypadarr[4] == '.'){
 8006542:	4ba0      	ldr	r3, [pc, #640]	; (80067c4 <keypad_sm+0x1c1c>)
 8006544:	7919      	ldrb	r1, [r3, #4]
 8006546:	292e      	cmp	r1, #46	; 0x2e
 8006548:	d102      	bne.n	8006550 <keypad_sm+0x19a8>
				keypaddecimal = 0;
 800654a:	2000      	movs	r0, #0
 800654c:	499e      	ldr	r1, [pc, #632]	; (80067c8 <keypad_sm+0x1c20>)
 800654e:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8006550:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8006552:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 8006554:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 8006556:	7118      	strb	r0, [r3, #4]
 8006558:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 800655a:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800655c:	70d8      	strb	r0, [r3, #3]
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 8006562:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 8006564:	7098      	strb	r0, [r3, #2]
 8006566:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 8006568:	f7fe bb4a 	b.w	8004c00 <keypad_sm+0x58>
	while(keypaditerator < 4){
 800656c:	4d94      	ldr	r5, [pc, #592]	; (80067c0 <keypad_sm+0x1c18>)
 800656e:	f995 2000 	ldrsb.w	r2, [r5]
 8006572:	2a03      	cmp	r2, #3
 8006574:	f73e adb1 	bgt.w	80050da <keypad_sm+0x532>
 8006578:	4b92      	ldr	r3, [pc, #584]	; (80067c4 <keypad_sm+0x1c1c>)
 800657a:	4e93      	ldr	r6, [pc, #588]	; (80067c8 <keypad_sm+0x1c20>)
 800657c:	3201      	adds	r2, #1
 800657e:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006582:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006586:	f893 9004 	ldrb.w	r9, [r3, #4]
 800658a:	f896 e000 	ldrb.w	lr, [r6]
 800658e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006592:	789c      	ldrb	r4, [r3, #2]
 8006594:	7858      	ldrb	r0, [r3, #1]
 8006596:	7819      	ldrb	r1, [r3, #0]
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	e003      	b.n	80065a4 <keypad_sm+0x19fc>
	while(keypaditerator < 4){
 800659c:	46a4      	mov	ip, r4
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80065a2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80065a4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80065a6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80065aa:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80065ac:	bf04      	itt	eq
 80065ae:	f04f 0801 	moveq.w	r8, #1
 80065b2:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80065b6:	2a05      	cmp	r2, #5
 80065b8:	46e1      	mov	r9, ip
 80065ba:	d1ef      	bne.n	800659c <keypad_sm+0x19f4>
 80065bc:	f883 c004 	strb.w	ip, [r3, #4]
 80065c0:	70dc      	strb	r4, [r3, #3]
 80065c2:	7098      	strb	r0, [r3, #2]
 80065c4:	7059      	strb	r1, [r3, #1]
 80065c6:	f883 a000 	strb.w	sl, [r3]
 80065ca:	2304      	movs	r3, #4
 80065cc:	702b      	strb	r3, [r5, #0]
 80065ce:	f1b8 0f00 	cmp.w	r8, #0
 80065d2:	f43e ad82 	beq.w	80050da <keypad_sm+0x532>
 80065d6:	f886 e000 	strb.w	lr, [r6]
 80065da:	f7fe bd7e 	b.w	80050da <keypad_sm+0x532>
	float temp = translate_keypad();
 80065de:	f7fd fe1b 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80065e2:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80065e4:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80065e6:	f7fa fd97 	bl	8001118 <__aeabi_fcmpge>
 80065ea:	b150      	cbz	r0, 8006602 <keypad_sm+0x1a5a>
 80065ec:	4628      	mov	r0, r5
 80065ee:	f7f9 ff33 	bl	8000458 <__aeabi_f2d>
 80065f2:	a371      	add	r3, pc, #452	; (adr r3, 80067b8 <keypad_sm+0x1c10>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7fa fa02 	bl	8000a00 <__aeabi_dcmple>
 80065fc:	b108      	cbz	r0, 8006602 <keypad_sm+0x1a5a>
					amp_set_aux = translate_keypad();
 80065fe:	4b73      	ldr	r3, [pc, #460]	; (80067cc <keypad_sm+0x1c24>)
 8006600:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006602:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 8006604:	4d6e      	ldr	r5, [pc, #440]	; (80067c0 <keypad_sm+0x1c18>)
				kpenum = WAIT;
 8006606:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 8006608:	f995 2000 	ldrsb.w	r2, [r5]
 800660c:	2a03      	cmp	r2, #3
 800660e:	f73e aaf7 	bgt.w	8004c00 <keypad_sm+0x58>
 8006612:	4b6c      	ldr	r3, [pc, #432]	; (80067c4 <keypad_sm+0x1c1c>)
 8006614:	4e6c      	ldr	r6, [pc, #432]	; (80067c8 <keypad_sm+0x1c20>)
			keypadarr[0] = num;
 8006616:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800661a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800661e:	f896 e000 	ldrb.w	lr, [r6]
 8006622:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006626:	789c      	ldrb	r4, [r3, #2]
 8006628:	7858      	ldrb	r0, [r3, #1]
 800662a:	7819      	ldrb	r1, [r3, #0]
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	e003      	b.n	8006638 <keypad_sm+0x1a90>
	while(keypaditerator < 4){
 8006630:	46a4      	mov	ip, r4
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006636:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006638:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800663a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800663e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006640:	bf04      	itt	eq
 8006642:	f04f 0e00 	moveq.w	lr, #0
 8006646:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 8006648:	2a04      	cmp	r2, #4
 800664a:	46e0      	mov	r8, ip
 800664c:	d1f0      	bne.n	8006630 <keypad_sm+0x1a88>
 800664e:	702a      	strb	r2, [r5, #0]
 8006650:	f883 c004 	strb.w	ip, [r3, #4]
 8006654:	70dc      	strb	r4, [r3, #3]
 8006656:	7098      	strb	r0, [r3, #2]
 8006658:	7059      	strb	r1, [r3, #1]
 800665a:	f883 9000 	strb.w	r9, [r3]
 800665e:	2f00      	cmp	r7, #0
 8006660:	f43e aace 	beq.w	8004c00 <keypad_sm+0x58>
 8006664:	f886 e000 	strb.w	lr, [r6]
 8006668:	f7fe baca 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 800666c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 800666e:	4d54      	ldr	r5, [pc, #336]	; (80067c0 <keypad_sm+0x1c18>)
				kpenum = WAIT;
 8006670:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006672:	f995 2000 	ldrsb.w	r2, [r5]
 8006676:	2a03      	cmp	r2, #3
 8006678:	f73e aac2 	bgt.w	8004c00 <keypad_sm+0x58>
 800667c:	4b51      	ldr	r3, [pc, #324]	; (80067c4 <keypad_sm+0x1c1c>)
 800667e:	4e52      	ldr	r6, [pc, #328]	; (80067c8 <keypad_sm+0x1c20>)
 8006680:	3201      	adds	r2, #1
 8006682:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006684:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006688:	f893 e004 	ldrb.w	lr, [r3, #4]
 800668c:	f896 c000 	ldrb.w	ip, [r6]
 8006690:	78df      	ldrb	r7, [r3, #3]
 8006692:	789c      	ldrb	r4, [r3, #2]
 8006694:	7858      	ldrb	r0, [r3, #1]
 8006696:	7819      	ldrb	r1, [r3, #0]
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	e003      	b.n	80066a4 <keypad_sm+0x1afc>
	while(keypaditerator < 4){
 800669c:	4627      	mov	r7, r4
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80066a2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80066a4:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80066a6:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 80066aa:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80066ac:	bf04      	itt	eq
 80066ae:	f04f 0c00 	moveq.w	ip, #0
 80066b2:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 80066b6:	2a05      	cmp	r2, #5
 80066b8:	46be      	mov	lr, r7
 80066ba:	d1ef      	bne.n	800669c <keypad_sm+0x1af4>
 80066bc:	711f      	strb	r7, [r3, #4]
 80066be:	70dc      	strb	r4, [r3, #3]
 80066c0:	7098      	strb	r0, [r3, #2]
 80066c2:	7059      	strb	r1, [r3, #1]
 80066c4:	f883 9000 	strb.w	r9, [r3]
 80066c8:	2304      	movs	r3, #4
 80066ca:	702b      	strb	r3, [r5, #0]
 80066cc:	f1b8 0f00 	cmp.w	r8, #0
 80066d0:	f43e aa96 	beq.w	8004c00 <keypad_sm+0x58>
 80066d4:	f886 c000 	strb.w	ip, [r6]
 80066d8:	f7fe ba92 	b.w	8004c00 <keypad_sm+0x58>
			else if(num == '#'){
 80066dc:	2823      	cmp	r0, #35	; 0x23
 80066de:	f000 8339 	beq.w	8006d54 <keypad_sm+0x21ac>
			else if(num == '+'){
 80066e2:	282b      	cmp	r0, #43	; 0x2b
 80066e4:	f000 8380 	beq.w	8006de8 <keypad_sm+0x2240>
			else if(num == '-'){
 80066e8:	282d      	cmp	r0, #45	; 0x2d
 80066ea:	f000 841b 	beq.w	8006f24 <keypad_sm+0x237c>
			else if(num == 's'){
 80066ee:	2873      	cmp	r0, #115	; 0x73
 80066f0:	f000 8522 	beq.w	8007138 <keypad_sm+0x2590>
			else if(num == '['){
 80066f4:	285b      	cmp	r0, #91	; 0x5b
 80066f6:	f000 84d7 	beq.w	80070a8 <keypad_sm+0x2500>
			else if(num == ']'){
 80066fa:	285d      	cmp	r0, #93	; 0x5d
 80066fc:	f000 84c3 	beq.w	8007086 <keypad_sm+0x24de>
			else if(num == '*'){
 8006700:	282a      	cmp	r0, #42	; 0x2a
 8006702:	f47e ab2f 	bne.w	8004d64 <keypad_sm+0x1bc>
				chstat_aux_tx = !chstat_aux_rx;
 8006706:	4b32      	ldr	r3, [pc, #200]	; (80067d0 <keypad_sm+0x1c28>)
 8006708:	4a32      	ldr	r2, [pc, #200]	; (80067d4 <keypad_sm+0x1c2c>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	fab3 f383 	clz	r3, r3
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	7013      	strb	r3, [r2, #0]
 8006714:	f7fe ba74 	b.w	8004c00 <keypad_sm+0x58>
}
 8006718:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_keypad('z');
 800671c:	f7fb b87e 	b.w	800181c <update_keypad.constprop.0>
	float temp = translate_keypad();
 8006720:	f7fd fd7a 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006724:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006726:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006728:	f7fa fcf6 	bl	8001118 <__aeabi_fcmpge>
 800672c:	b158      	cbz	r0, 8006746 <keypad_sm+0x1b9e>
 800672e:	4628      	mov	r0, r5
 8006730:	4929      	ldr	r1, [pc, #164]	; (80067d8 <keypad_sm+0x1c30>)
 8006732:	f7fa fce7 	bl	8001104 <__aeabi_fcmple>
 8006736:	b130      	cbz	r0, 8006746 <keypad_sm+0x1b9e>
					volt_set_main_old = volt_set_main;
 8006738:	4d28      	ldr	r5, [pc, #160]	; (80067dc <keypad_sm+0x1c34>)
 800673a:	4b29      	ldr	r3, [pc, #164]	; (80067e0 <keypad_sm+0x1c38>)
 800673c:	682a      	ldr	r2, [r5, #0]
 800673e:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006740:	f7fd fd6a 	bl	8004218 <translate_keypad>
 8006744:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8006746:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006748:	4d1d      	ldr	r5, [pc, #116]	; (80067c0 <keypad_sm+0x1c18>)
				kpenum = WAIT;
 800674a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800674c:	f995 2000 	ldrsb.w	r2, [r5]
 8006750:	2a03      	cmp	r2, #3
 8006752:	f73e aa55 	bgt.w	8004c00 <keypad_sm+0x58>
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <keypad_sm+0x1c1c>)
 8006758:	4e1b      	ldr	r6, [pc, #108]	; (80067c8 <keypad_sm+0x1c20>)
 800675a:	3201      	adds	r2, #1
 800675c:	4688      	mov	r8, r1
			keypadarr[0] = num;
 800675e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006762:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006766:	f896 c000 	ldrb.w	ip, [r6]
 800676a:	78df      	ldrb	r7, [r3, #3]
 800676c:	789c      	ldrb	r4, [r3, #2]
 800676e:	7858      	ldrb	r0, [r3, #1]
 8006770:	7819      	ldrb	r1, [r3, #0]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	e003      	b.n	800677e <keypad_sm+0x1bd6>
	while(keypaditerator < 4){
 8006776:	4627      	mov	r7, r4
 8006778:	4604      	mov	r4, r0
 800677a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800677c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800677e:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006780:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006784:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006786:	bf04      	itt	eq
 8006788:	f04f 0c00 	moveq.w	ip, #0
 800678c:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006790:	2a05      	cmp	r2, #5
 8006792:	46be      	mov	lr, r7
 8006794:	d1ef      	bne.n	8006776 <keypad_sm+0x1bce>
 8006796:	711f      	strb	r7, [r3, #4]
 8006798:	70dc      	strb	r4, [r3, #3]
 800679a:	7098      	strb	r0, [r3, #2]
 800679c:	7059      	strb	r1, [r3, #1]
 800679e:	f883 9000 	strb.w	r9, [r3]
 80067a2:	2304      	movs	r3, #4
 80067a4:	702b      	strb	r3, [r5, #0]
 80067a6:	f1b8 0f00 	cmp.w	r8, #0
 80067aa:	f43e aa29 	beq.w	8004c00 <keypad_sm+0x58>
 80067ae:	f886 c000 	strb.w	ip, [r6]
 80067b2:	f7fe ba25 	b.w	8004c00 <keypad_sm+0x58>
 80067b6:	bf00      	nop
 80067b8:	50b0f27c 	.word	0x50b0f27c
 80067bc:	3fe99a6b 	.word	0x3fe99a6b
 80067c0:	20000011 	.word	0x20000011
 80067c4:	2000000c 	.word	0x2000000c
 80067c8:	20000758 	.word	0x20000758
 80067cc:	200003e8 	.word	0x200003e8
 80067d0:	200003f4 	.word	0x200003f4
 80067d4:	200003f5 	.word	0x200003f5
 80067d8:	41400000 	.word	0x41400000
 80067dc:	20000a7c 	.word	0x20000a7c
 80067e0:	20000a80 	.word	0x20000a80
				kpenum = WAIT;
 80067e4:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80067e6:	4db3      	ldr	r5, [pc, #716]	; (8006ab4 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 80067e8:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80067ea:	f995 2000 	ldrsb.w	r2, [r5]
 80067ee:	2a03      	cmp	r2, #3
 80067f0:	f73e aa06 	bgt.w	8004c00 <keypad_sm+0x58>
 80067f4:	4bb0      	ldr	r3, [pc, #704]	; (8006ab8 <keypad_sm+0x1f10>)
 80067f6:	4eb1      	ldr	r6, [pc, #708]	; (8006abc <keypad_sm+0x1f14>)
 80067f8:	3201      	adds	r2, #1
 80067fa:	4688      	mov	r8, r1
			keypadarr[0] = num;
 80067fc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006800:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006804:	f896 c000 	ldrb.w	ip, [r6]
 8006808:	78df      	ldrb	r7, [r3, #3]
 800680a:	789c      	ldrb	r4, [r3, #2]
 800680c:	7858      	ldrb	r0, [r3, #1]
 800680e:	7819      	ldrb	r1, [r3, #0]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	e003      	b.n	800681c <keypad_sm+0x1c74>
	while(keypaditerator < 4){
 8006814:	4627      	mov	r7, r4
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800681a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800681c:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800681e:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006822:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006824:	bf04      	itt	eq
 8006826:	f04f 0c00 	moveq.w	ip, #0
 800682a:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 800682e:	2a05      	cmp	r2, #5
 8006830:	46be      	mov	lr, r7
 8006832:	d1ef      	bne.n	8006814 <keypad_sm+0x1c6c>
 8006834:	711f      	strb	r7, [r3, #4]
 8006836:	70dc      	strb	r4, [r3, #3]
 8006838:	7098      	strb	r0, [r3, #2]
 800683a:	7059      	strb	r1, [r3, #1]
 800683c:	f883 9000 	strb.w	r9, [r3]
 8006840:	2304      	movs	r3, #4
 8006842:	702b      	strb	r3, [r5, #0]
 8006844:	f1b8 0f00 	cmp.w	r8, #0
 8006848:	f43e a9da 	beq.w	8004c00 <keypad_sm+0x58>
 800684c:	f886 c000 	strb.w	ip, [r6]
 8006850:	f7fe b9d6 	b.w	8004c00 <keypad_sm+0x58>
		if(keypaditerator < keypadlength-1){
 8006854:	4d97      	ldr	r5, [pc, #604]	; (8006ab4 <keypad_sm+0x1f0c>)
 8006856:	f995 2000 	ldrsb.w	r2, [r5]
 800685a:	2a03      	cmp	r2, #3
 800685c:	f73e a9d0 	bgt.w	8004c00 <keypad_sm+0x58>
			if(keypadarr[4] == '.'){
 8006860:	4b95      	ldr	r3, [pc, #596]	; (8006ab8 <keypad_sm+0x1f10>)
 8006862:	7919      	ldrb	r1, [r3, #4]
 8006864:	292e      	cmp	r1, #46	; 0x2e
 8006866:	d102      	bne.n	800686e <keypad_sm+0x1cc6>
				keypaddecimal = 0;
 8006868:	2000      	movs	r0, #0
 800686a:	4994      	ldr	r1, [pc, #592]	; (8006abc <keypad_sm+0x1f14>)
 800686c:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 800686e:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8006870:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 8006872:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 8006874:	7118      	strb	r0, [r3, #4]
 8006876:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 8006878:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800687a:	70d8      	strb	r0, [r3, #3]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 8006880:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 8006882:	7098      	strb	r0, [r3, #2]
 8006884:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 8006886:	f7fe b9bb 	b.w	8004c00 <keypad_sm+0x58>
	float temp = translate_keypad();
 800688a:	f7fd fcc5 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800688e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006890:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006892:	f7fa fc41 	bl	8001118 <__aeabi_fcmpge>
 8006896:	b130      	cbz	r0, 80068a6 <keypad_sm+0x1cfe>
 8006898:	4628      	mov	r0, r5
 800689a:	4989      	ldr	r1, [pc, #548]	; (8006ac0 <keypad_sm+0x1f18>)
 800689c:	f7fa fc32 	bl	8001104 <__aeabi_fcmple>
 80068a0:	b108      	cbz	r0, 80068a6 <keypad_sm+0x1cfe>
					volt_set_aux = translate_keypad();
 80068a2:	4b88      	ldr	r3, [pc, #544]	; (8006ac4 <keypad_sm+0x1f1c>)
 80068a4:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80068a6:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80068a8:	4d82      	ldr	r5, [pc, #520]	; (8006ab4 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 80068aa:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80068ac:	f995 2000 	ldrsb.w	r2, [r5]
 80068b0:	2a03      	cmp	r2, #3
 80068b2:	f73e ac12 	bgt.w	80050da <keypad_sm+0x532>
 80068b6:	4b80      	ldr	r3, [pc, #512]	; (8006ab8 <keypad_sm+0x1f10>)
 80068b8:	4e80      	ldr	r6, [pc, #512]	; (8006abc <keypad_sm+0x1f14>)
 80068ba:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80068bc:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80068c0:	f893 9004 	ldrb.w	r9, [r3, #4]
 80068c4:	f896 8000 	ldrb.w	r8, [r6]
 80068c8:	f893 e003 	ldrb.w	lr, [r3, #3]
 80068cc:	f893 c002 	ldrb.w	ip, [r3, #2]
 80068d0:	785c      	ldrb	r4, [r3, #1]
 80068d2:	7818      	ldrb	r0, [r3, #0]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	e003      	b.n	80068e0 <keypad_sm+0x1d38>
	while(keypaditerator < 4){
 80068d8:	46e6      	mov	lr, ip
 80068da:	46a4      	mov	ip, r4
 80068dc:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80068de:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80068e0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80068e2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80068e6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80068e8:	bf04      	itt	eq
 80068ea:	2101      	moveq	r1, #1
 80068ec:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80068f0:	2a05      	cmp	r2, #5
 80068f2:	46f1      	mov	r9, lr
 80068f4:	d1f0      	bne.n	80068d8 <keypad_sm+0x1d30>
 80068f6:	f883 e004 	strb.w	lr, [r3, #4]
 80068fa:	f883 c003 	strb.w	ip, [r3, #3]
 80068fe:	709c      	strb	r4, [r3, #2]
 8006900:	7058      	strb	r0, [r3, #1]
 8006902:	f883 a000 	strb.w	sl, [r3]
 8006906:	2304      	movs	r3, #4
 8006908:	702b      	strb	r3, [r5, #0]
 800690a:	2900      	cmp	r1, #0
 800690c:	f43e abe5 	beq.w	80050da <keypad_sm+0x532>
 8006910:	f886 8000 	strb.w	r8, [r6]
 8006914:	f7fe bbe1 	b.w	80050da <keypad_sm+0x532>
 8006918:	4d66      	ldr	r5, [pc, #408]	; (8006ab4 <keypad_sm+0x1f0c>)
 800691a:	f995 2000 	ldrsb.w	r2, [r5]
 800691e:	2a03      	cmp	r2, #3
 8006920:	f73e abdb 	bgt.w	80050da <keypad_sm+0x532>
 8006924:	4b64      	ldr	r3, [pc, #400]	; (8006ab8 <keypad_sm+0x1f10>)
 8006926:	4e65      	ldr	r6, [pc, #404]	; (8006abc <keypad_sm+0x1f14>)
 8006928:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 800692c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006930:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006934:	f896 e000 	ldrb.w	lr, [r6]
 8006938:	f893 c003 	ldrb.w	ip, [r3, #3]
 800693c:	789c      	ldrb	r4, [r3, #2]
 800693e:	7858      	ldrb	r0, [r3, #1]
 8006940:	7819      	ldrb	r1, [r3, #0]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	e003      	b.n	800694e <keypad_sm+0x1da6>
	while(keypaditerator < 4){
 8006946:	46a4      	mov	ip, r4
 8006948:	4604      	mov	r4, r0
 800694a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800694c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800694e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006950:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006954:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006956:	bf04      	itt	eq
 8006958:	f04f 0801 	moveq.w	r8, #1
 800695c:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006960:	2a04      	cmp	r2, #4
 8006962:	46e1      	mov	r9, ip
 8006964:	d1ef      	bne.n	8006946 <keypad_sm+0x1d9e>
 8006966:	702a      	strb	r2, [r5, #0]
 8006968:	f883 c004 	strb.w	ip, [r3, #4]
 800696c:	70dc      	strb	r4, [r3, #3]
 800696e:	7098      	strb	r0, [r3, #2]
 8006970:	7059      	strb	r1, [r3, #1]
 8006972:	f883 a000 	strb.w	sl, [r3]
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	f43e abae 	beq.w	80050da <keypad_sm+0x532>
 800697e:	f886 e000 	strb.w	lr, [r6]
 8006982:	f7fe bbaa 	b.w	80050da <keypad_sm+0x532>
	float temp = translate_keypad();
 8006986:	f7fd fc47 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800698a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800698c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800698e:	f7fa fbc3 	bl	8001118 <__aeabi_fcmpge>
 8006992:	b130      	cbz	r0, 80069a2 <keypad_sm+0x1dfa>
 8006994:	4628      	mov	r0, r5
 8006996:	494a      	ldr	r1, [pc, #296]	; (8006ac0 <keypad_sm+0x1f18>)
 8006998:	f7fa fbb4 	bl	8001104 <__aeabi_fcmple>
 800699c:	b108      	cbz	r0, 80069a2 <keypad_sm+0x1dfa>
					amp_set_aux = translate_keypad();
 800699e:	4b4a      	ldr	r3, [pc, #296]	; (8006ac8 <keypad_sm+0x1f20>)
 80069a0:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80069a2:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80069a4:	4d43      	ldr	r5, [pc, #268]	; (8006ab4 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 80069a6:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80069a8:	f995 2000 	ldrsb.w	r2, [r5]
 80069ac:	2a03      	cmp	r2, #3
 80069ae:	f73e ab94 	bgt.w	80050da <keypad_sm+0x532>
 80069b2:	4b41      	ldr	r3, [pc, #260]	; (8006ab8 <keypad_sm+0x1f10>)
 80069b4:	4e41      	ldr	r6, [pc, #260]	; (8006abc <keypad_sm+0x1f14>)
 80069b6:	3201      	adds	r2, #1
 80069b8:	4688      	mov	r8, r1
			keypadarr[0] = num;
 80069ba:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80069be:	f893 e004 	ldrb.w	lr, [r3, #4]
 80069c2:	f896 9000 	ldrb.w	r9, [r6]
 80069c6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80069ca:	789c      	ldrb	r4, [r3, #2]
 80069cc:	7858      	ldrb	r0, [r3, #1]
 80069ce:	7819      	ldrb	r1, [r3, #0]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	e003      	b.n	80069dc <keypad_sm+0x1e34>
	while(keypaditerator < 4){
 80069d4:	46a4      	mov	ip, r4
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80069da:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80069dc:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80069de:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 80069e2:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80069e4:	bf04      	itt	eq
 80069e6:	f04f 0801 	moveq.w	r8, #1
 80069ea:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80069ee:	2a05      	cmp	r2, #5
 80069f0:	46e6      	mov	lr, ip
 80069f2:	d1ef      	bne.n	80069d4 <keypad_sm+0x1e2c>
 80069f4:	f883 c004 	strb.w	ip, [r3, #4]
 80069f8:	70dc      	strb	r4, [r3, #3]
 80069fa:	7098      	strb	r0, [r3, #2]
 80069fc:	7059      	strb	r1, [r3, #1]
 80069fe:	f883 a000 	strb.w	sl, [r3]
 8006a02:	2304      	movs	r3, #4
 8006a04:	702b      	strb	r3, [r5, #0]
 8006a06:	f1b8 0f00 	cmp.w	r8, #0
 8006a0a:	f43e ab66 	beq.w	80050da <keypad_sm+0x532>
 8006a0e:	f886 9000 	strb.w	r9, [r6]
 8006a12:	f7fe bb62 	b.w	80050da <keypad_sm+0x532>
				fill_keypad(0, volt_set_aux);
 8006a16:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <keypad_sm+0x1f1c>)
 8006a18:	2000      	movs	r0, #0
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	f7fd fd78 	bl	8004510 <fill_keypad>
				encmode = 1;
 8006a20:	2101      	movs	r1, #1
				encpos = 0;
 8006a22:	2200      	movs	r2, #0
 8006a24:	4b29      	ldr	r3, [pc, #164]	; (8006acc <keypad_sm+0x1f24>)
				encmode = 1;
 8006a26:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	f7fe b8e9 	b.w	8004c00 <keypad_sm+0x58>
				if(encpos == 1){
 8006a2e:	4b27      	ldr	r3, [pc, #156]	; (8006acc <keypad_sm+0x1f24>)
 8006a30:	f993 2000 	ldrsb.w	r2, [r3]
 8006a34:	2a01      	cmp	r2, #1
 8006a36:	f000 82de 	beq.w	8006ff6 <keypad_sm+0x244e>
				else if(encpos < 4){
 8006a3a:	2a03      	cmp	r2, #3
 8006a3c:	f300 82d7 	bgt.w	8006fee <keypad_sm+0x2446>
					encpos++;
 8006a40:	3201      	adds	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	f7fe b8dc 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8006a48:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006a4a:	4d1a      	ldr	r5, [pc, #104]	; (8006ab4 <keypad_sm+0x1f0c>)
				kpenum = WAIT;
 8006a4c:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006a4e:	f995 2000 	ldrsb.w	r2, [r5]
 8006a52:	2a03      	cmp	r2, #3
 8006a54:	f73e ab41 	bgt.w	80050da <keypad_sm+0x532>
 8006a58:	4b17      	ldr	r3, [pc, #92]	; (8006ab8 <keypad_sm+0x1f10>)
 8006a5a:	4e18      	ldr	r6, [pc, #96]	; (8006abc <keypad_sm+0x1f14>)
			keypadarr[0] = num;
 8006a5c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006a60:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006a64:	7830      	ldrb	r0, [r6, #0]
 8006a66:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006a6a:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006a6e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006a72:	781c      	ldrb	r4, [r3, #0]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	e003      	b.n	8006a80 <keypad_sm+0x1ed8>
	while(keypaditerator < 4){
 8006a78:	46f0      	mov	r8, lr
 8006a7a:	46e6      	mov	lr, ip
 8006a7c:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8006a7e:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006a80:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006a82:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006a86:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006a88:	bf04      	itt	eq
 8006a8a:	2101      	moveq	r1, #1
 8006a8c:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 8006a8e:	2a04      	cmp	r2, #4
 8006a90:	46c1      	mov	r9, r8
 8006a92:	d1f1      	bne.n	8006a78 <keypad_sm+0x1ed0>
 8006a94:	702a      	strb	r2, [r5, #0]
 8006a96:	f883 8004 	strb.w	r8, [r3, #4]
 8006a9a:	f883 e003 	strb.w	lr, [r3, #3]
 8006a9e:	f883 c002 	strb.w	ip, [r3, #2]
 8006aa2:	705c      	strb	r4, [r3, #1]
 8006aa4:	f883 a000 	strb.w	sl, [r3]
 8006aa8:	2900      	cmp	r1, #0
 8006aaa:	f43e ab16 	beq.w	80050da <keypad_sm+0x532>
 8006aae:	7030      	strb	r0, [r6, #0]
 8006ab0:	f7fe bb13 	b.w	80050da <keypad_sm+0x532>
 8006ab4:	20000011 	.word	0x20000011
 8006ab8:	2000000c 	.word	0x2000000c
 8006abc:	20000758 	.word	0x20000758
 8006ac0:	41400000 	.word	0x41400000
 8006ac4:	20000a78 	.word	0x20000a78
 8006ac8:	200003e8 	.word	0x200003e8
 8006acc:	20000401 	.word	0x20000401
	float temp = translate_keypad();
 8006ad0:	f7fd fba2 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006ad4:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006ad6:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006ad8:	f7fa fb1e 	bl	8001118 <__aeabi_fcmpge>
 8006adc:	b190      	cbz	r0, 8006b04 <keypad_sm+0x1f5c>
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7f9 fcba 	bl	8000458 <__aeabi_f2d>
 8006ae4:	a3b6      	add	r3, pc, #728	; (adr r3, 8006dc0 <keypad_sm+0x2218>)
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	f7f9 ff89 	bl	8000a00 <__aeabi_dcmple>
 8006aee:	b148      	cbz	r0, 8006b04 <keypad_sm+0x1f5c>
					amp_set_main_old = amp_set_main;
 8006af0:	4db5      	ldr	r5, [pc, #724]	; (8006dc8 <keypad_sm+0x2220>)
 8006af2:	4bb6      	ldr	r3, [pc, #728]	; (8006dcc <keypad_sm+0x2224>)
 8006af4:	682a      	ldr	r2, [r5, #0]
 8006af6:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006af8:	f7fd fb8e 	bl	8004218 <translate_keypad>
 8006afc:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006afe:	6828      	ldr	r0, [r5, #0]
 8006b00:	f7fa ff3a 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006b04:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006b06:	4db2      	ldr	r5, [pc, #712]	; (8006dd0 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006b08:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006b0a:	f995 2000 	ldrsb.w	r2, [r5]
 8006b0e:	2a03      	cmp	r2, #3
 8006b10:	f73e a876 	bgt.w	8004c00 <keypad_sm+0x58>
 8006b14:	4baf      	ldr	r3, [pc, #700]	; (8006dd4 <keypad_sm+0x222c>)
 8006b16:	4eb0      	ldr	r6, [pc, #704]	; (8006dd8 <keypad_sm+0x2230>)
			keypadarr[0] = num;
 8006b18:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006b1c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006b20:	7830      	ldrb	r0, [r6, #0]
 8006b22:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006b26:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006b2a:	785f      	ldrb	r7, [r3, #1]
 8006b2c:	781c      	ldrb	r4, [r3, #0]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	e003      	b.n	8006b3a <keypad_sm+0x1f92>
	while(keypaditerator < 4){
 8006b32:	46e6      	mov	lr, ip
 8006b34:	46bc      	mov	ip, r7
 8006b36:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006b38:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006b3a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006b3c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006b40:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006b42:	bf04      	itt	eq
 8006b44:	2000      	moveq	r0, #0
 8006b46:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006b48:	2a04      	cmp	r2, #4
 8006b4a:	46f0      	mov	r8, lr
 8006b4c:	d1f1      	bne.n	8006b32 <keypad_sm+0x1f8a>
 8006b4e:	702a      	strb	r2, [r5, #0]
 8006b50:	f883 e004 	strb.w	lr, [r3, #4]
 8006b54:	f883 c003 	strb.w	ip, [r3, #3]
 8006b58:	709f      	strb	r7, [r3, #2]
 8006b5a:	705c      	strb	r4, [r3, #1]
 8006b5c:	f883 9000 	strb.w	r9, [r3]
 8006b60:	2900      	cmp	r1, #0
 8006b62:	f43e a84d 	beq.w	8004c00 <keypad_sm+0x58>
 8006b66:	7030      	strb	r0, [r6, #0]
 8006b68:	f7fe b84a 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8006b6c:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006b6e:	4d98      	ldr	r5, [pc, #608]	; (8006dd0 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006b70:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006b72:	f995 2000 	ldrsb.w	r2, [r5]
 8006b76:	2a03      	cmp	r2, #3
 8006b78:	f73e aaaf 	bgt.w	80050da <keypad_sm+0x532>
 8006b7c:	4b95      	ldr	r3, [pc, #596]	; (8006dd4 <keypad_sm+0x222c>)
 8006b7e:	4e96      	ldr	r6, [pc, #600]	; (8006dd8 <keypad_sm+0x2230>)
 8006b80:	3201      	adds	r2, #1
 8006b82:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006b84:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006b88:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006b8c:	f896 9000 	ldrb.w	r9, [r6]
 8006b90:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006b94:	789c      	ldrb	r4, [r3, #2]
 8006b96:	7858      	ldrb	r0, [r3, #1]
 8006b98:	7819      	ldrb	r1, [r3, #0]
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	e003      	b.n	8006ba6 <keypad_sm+0x1ffe>
	while(keypaditerator < 4){
 8006b9e:	46a4      	mov	ip, r4
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006ba4:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006ba6:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006ba8:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006bac:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006bae:	bf04      	itt	eq
 8006bb0:	f04f 0801 	moveq.w	r8, #1
 8006bb4:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006bb8:	2a05      	cmp	r2, #5
 8006bba:	46e6      	mov	lr, ip
 8006bbc:	d1ef      	bne.n	8006b9e <keypad_sm+0x1ff6>
 8006bbe:	f883 c004 	strb.w	ip, [r3, #4]
 8006bc2:	70dc      	strb	r4, [r3, #3]
 8006bc4:	7098      	strb	r0, [r3, #2]
 8006bc6:	7059      	strb	r1, [r3, #1]
 8006bc8:	f883 a000 	strb.w	sl, [r3]
 8006bcc:	2304      	movs	r3, #4
 8006bce:	702b      	strb	r3, [r5, #0]
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	f43e aa81 	beq.w	80050da <keypad_sm+0x532>
 8006bd8:	f886 9000 	strb.w	r9, [r6]
 8006bdc:	f7fe ba7d 	b.w	80050da <keypad_sm+0x532>
	float temp = translate_keypad();
 8006be0:	f7fd fb1a 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006be4:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006be6:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006be8:	f7fa fa96 	bl	8001118 <__aeabi_fcmpge>
 8006bec:	b158      	cbz	r0, 8006c06 <keypad_sm+0x205e>
 8006bee:	4628      	mov	r0, r5
 8006bf0:	497a      	ldr	r1, [pc, #488]	; (8006ddc <keypad_sm+0x2234>)
 8006bf2:	f7fa fa87 	bl	8001104 <__aeabi_fcmple>
 8006bf6:	b130      	cbz	r0, 8006c06 <keypad_sm+0x205e>
					volt_set_main_old = volt_set_main;
 8006bf8:	4d79      	ldr	r5, [pc, #484]	; (8006de0 <keypad_sm+0x2238>)
 8006bfa:	4b7a      	ldr	r3, [pc, #488]	; (8006de4 <keypad_sm+0x223c>)
 8006bfc:	682a      	ldr	r2, [r5, #0]
 8006bfe:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006c00:	f7fd fb0a 	bl	8004218 <translate_keypad>
 8006c04:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8006c06:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006c08:	4d71      	ldr	r5, [pc, #452]	; (8006dd0 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006c0a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006c0c:	f995 2000 	ldrsb.w	r2, [r5]
 8006c10:	2a03      	cmp	r2, #3
 8006c12:	f73e aa62 	bgt.w	80050da <keypad_sm+0x532>
 8006c16:	4b6f      	ldr	r3, [pc, #444]	; (8006dd4 <keypad_sm+0x222c>)
 8006c18:	4e6f      	ldr	r6, [pc, #444]	; (8006dd8 <keypad_sm+0x2230>)
 8006c1a:	3201      	adds	r2, #1
 8006c1c:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006c1e:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006c22:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006c26:	f896 9000 	ldrb.w	r9, [r6]
 8006c2a:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006c2e:	789c      	ldrb	r4, [r3, #2]
 8006c30:	7858      	ldrb	r0, [r3, #1]
 8006c32:	7819      	ldrb	r1, [r3, #0]
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	e003      	b.n	8006c40 <keypad_sm+0x2098>
	while(keypaditerator < 4){
 8006c38:	46a4      	mov	ip, r4
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006c3e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006c40:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c42:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006c46:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c48:	bf04      	itt	eq
 8006c4a:	f04f 0801 	moveq.w	r8, #1
 8006c4e:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006c52:	2a05      	cmp	r2, #5
 8006c54:	46e6      	mov	lr, ip
 8006c56:	d1ef      	bne.n	8006c38 <keypad_sm+0x2090>
 8006c58:	f883 c004 	strb.w	ip, [r3, #4]
 8006c5c:	70dc      	strb	r4, [r3, #3]
 8006c5e:	7098      	strb	r0, [r3, #2]
 8006c60:	7059      	strb	r1, [r3, #1]
 8006c62:	f883 a000 	strb.w	sl, [r3]
 8006c66:	2304      	movs	r3, #4
 8006c68:	702b      	strb	r3, [r5, #0]
 8006c6a:	f1b8 0f00 	cmp.w	r8, #0
 8006c6e:	f43e aa34 	beq.w	80050da <keypad_sm+0x532>
 8006c72:	f886 9000 	strb.w	r9, [r6]
 8006c76:	f7fe ba30 	b.w	80050da <keypad_sm+0x532>
 8006c7a:	4d55      	ldr	r5, [pc, #340]	; (8006dd0 <keypad_sm+0x2228>)
 8006c7c:	f995 2000 	ldrsb.w	r2, [r5]
 8006c80:	2a03      	cmp	r2, #3
 8006c82:	f73e aa2a 	bgt.w	80050da <keypad_sm+0x532>
 8006c86:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <keypad_sm+0x222c>)
 8006c88:	4e53      	ldr	r6, [pc, #332]	; (8006dd8 <keypad_sm+0x2230>)
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006c90:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006c94:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006c98:	f896 e000 	ldrb.w	lr, [r6]
 8006c9c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006ca0:	789c      	ldrb	r4, [r3, #2]
 8006ca2:	7858      	ldrb	r0, [r3, #1]
 8006ca4:	7819      	ldrb	r1, [r3, #0]
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	e003      	b.n	8006cb2 <keypad_sm+0x210a>
	while(keypaditerator < 4){
 8006caa:	46a4      	mov	ip, r4
 8006cac:	4604      	mov	r4, r0
 8006cae:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006cb0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006cb2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006cb4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006cb8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006cba:	bf04      	itt	eq
 8006cbc:	f04f 0801 	moveq.w	r8, #1
 8006cc0:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006cc4:	2a05      	cmp	r2, #5
 8006cc6:	46e1      	mov	r9, ip
 8006cc8:	d1ef      	bne.n	8006caa <keypad_sm+0x2102>
 8006cca:	f883 c004 	strb.w	ip, [r3, #4]
 8006cce:	70dc      	strb	r4, [r3, #3]
 8006cd0:	7098      	strb	r0, [r3, #2]
 8006cd2:	7059      	strb	r1, [r3, #1]
 8006cd4:	f883 a000 	strb.w	sl, [r3]
 8006cd8:	2304      	movs	r3, #4
 8006cda:	702b      	strb	r3, [r5, #0]
 8006cdc:	f1b8 0f00 	cmp.w	r8, #0
 8006ce0:	f43e a9fb 	beq.w	80050da <keypad_sm+0x532>
 8006ce4:	f886 e000 	strb.w	lr, [r6]
 8006ce8:	f7fe b9f7 	b.w	80050da <keypad_sm+0x532>
				kpenum = WAIT;
 8006cec:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006cee:	4d38      	ldr	r5, [pc, #224]	; (8006dd0 <keypad_sm+0x2228>)
				kpenum = WAIT;
 8006cf0:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006cf2:	f995 2000 	ldrsb.w	r2, [r5]
 8006cf6:	2a03      	cmp	r2, #3
 8006cf8:	f73d af82 	bgt.w	8004c00 <keypad_sm+0x58>
 8006cfc:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <keypad_sm+0x222c>)
 8006cfe:	4e36      	ldr	r6, [pc, #216]	; (8006dd8 <keypad_sm+0x2230>)
			keypadarr[0] = num;
 8006d00:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006d04:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006d08:	7830      	ldrb	r0, [r6, #0]
 8006d0a:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006d0e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006d12:	785f      	ldrb	r7, [r3, #1]
 8006d14:	781c      	ldrb	r4, [r3, #0]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	e003      	b.n	8006d22 <keypad_sm+0x217a>
	while(keypaditerator < 4){
 8006d1a:	46e6      	mov	lr, ip
 8006d1c:	46bc      	mov	ip, r7
 8006d1e:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006d20:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006d22:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006d24:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006d28:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006d2a:	bf04      	itt	eq
 8006d2c:	2000      	moveq	r0, #0
 8006d2e:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006d30:	2a04      	cmp	r2, #4
 8006d32:	46f0      	mov	r8, lr
 8006d34:	d1f1      	bne.n	8006d1a <keypad_sm+0x2172>
 8006d36:	702a      	strb	r2, [r5, #0]
 8006d38:	f883 e004 	strb.w	lr, [r3, #4]
 8006d3c:	f883 c003 	strb.w	ip, [r3, #3]
 8006d40:	709f      	strb	r7, [r3, #2]
 8006d42:	705c      	strb	r4, [r3, #1]
 8006d44:	f883 9000 	strb.w	r9, [r3]
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	f43d af59 	beq.w	8004c00 <keypad_sm+0x58>
 8006d4e:	7030      	strb	r0, [r6, #0]
 8006d50:	f7fd bf56 	b.w	8004c00 <keypad_sm+0x58>
 8006d54:	4d1e      	ldr	r5, [pc, #120]	; (8006dd0 <keypad_sm+0x2228>)
 8006d56:	f995 2000 	ldrsb.w	r2, [r5]
 8006d5a:	2a03      	cmp	r2, #3
 8006d5c:	f73e a9bd 	bgt.w	80050da <keypad_sm+0x532>
 8006d60:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <keypad_sm+0x222c>)
 8006d62:	4e1d      	ldr	r6, [pc, #116]	; (8006dd8 <keypad_sm+0x2230>)
 8006d64:	2000      	movs	r0, #0
			keypadarr[0] = num;
 8006d66:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006d6a:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006d6e:	7831      	ldrb	r1, [r6, #0]
 8006d70:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006d74:	f893 e002 	ldrb.w	lr, [r3, #2]
 8006d78:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006d7c:	781c      	ldrb	r4, [r3, #0]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	e003      	b.n	8006d8a <keypad_sm+0x21e2>
	while(keypaditerator < 4){
 8006d82:	46f0      	mov	r8, lr
 8006d84:	46e6      	mov	lr, ip
 8006d86:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8006d88:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006d8a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006d8c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006d90:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006d92:	bf04      	itt	eq
 8006d94:	2001      	moveq	r0, #1
 8006d96:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006d98:	2a04      	cmp	r2, #4
 8006d9a:	46c1      	mov	r9, r8
 8006d9c:	d1f1      	bne.n	8006d82 <keypad_sm+0x21da>
 8006d9e:	702a      	strb	r2, [r5, #0]
 8006da0:	f883 8004 	strb.w	r8, [r3, #4]
 8006da4:	f883 e003 	strb.w	lr, [r3, #3]
 8006da8:	f883 c002 	strb.w	ip, [r3, #2]
 8006dac:	705c      	strb	r4, [r3, #1]
 8006dae:	f883 a000 	strb.w	sl, [r3]
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f43e a991 	beq.w	80050da <keypad_sm+0x532>
 8006db8:	7031      	strb	r1, [r6, #0]
 8006dba:	f7fe b98e 	b.w	80050da <keypad_sm+0x532>
 8006dbe:	bf00      	nop
 8006dc0:	50b0f27c 	.word	0x50b0f27c
 8006dc4:	3fe99a6b 	.word	0x3fe99a6b
 8006dc8:	200003ec 	.word	0x200003ec
 8006dcc:	200003f0 	.word	0x200003f0
 8006dd0:	20000011 	.word	0x20000011
 8006dd4:	2000000c 	.word	0x2000000c
 8006dd8:	20000758 	.word	0x20000758
 8006ddc:	41400000 	.word	0x41400000
 8006de0:	20000a7c 	.word	0x20000a7c
 8006de4:	20000a80 	.word	0x20000a80
	float temp = translate_keypad();
 8006de8:	f7fd fa16 	bl	8004218 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006dec:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006dee:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006df0:	f7fa f992 	bl	8001118 <__aeabi_fcmpge>
 8006df4:	b170      	cbz	r0, 8006e14 <keypad_sm+0x226c>
 8006df6:	4628      	mov	r0, r5
 8006df8:	49c2      	ldr	r1, [pc, #776]	; (8007104 <keypad_sm+0x255c>)
 8006dfa:	f7fa f983 	bl	8001104 <__aeabi_fcmple>
 8006dfe:	b148      	cbz	r0, 8006e14 <keypad_sm+0x226c>
					amp_set_main_old = amp_set_main;
 8006e00:	4dc1      	ldr	r5, [pc, #772]	; (8007108 <keypad_sm+0x2560>)
 8006e02:	4bc2      	ldr	r3, [pc, #776]	; (800710c <keypad_sm+0x2564>)
 8006e04:	682a      	ldr	r2, [r5, #0]
 8006e06:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006e08:	f7fd fa06 	bl	8004218 <translate_keypad>
 8006e0c:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006e0e:	6828      	ldr	r0, [r5, #0]
 8006e10:	f7fa fdb2 	bl	8001978 <update_ADC_watchdog>
				kpenum = WAIT;
 8006e14:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006e16:	4dbe      	ldr	r5, [pc, #760]	; (8007110 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8006e18:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006e1a:	f995 2000 	ldrsb.w	r2, [r5]
 8006e1e:	2a03      	cmp	r2, #3
 8006e20:	f73e a95b 	bgt.w	80050da <keypad_sm+0x532>
 8006e24:	4bbb      	ldr	r3, [pc, #748]	; (8007114 <keypad_sm+0x256c>)
 8006e26:	4ebc      	ldr	r6, [pc, #752]	; (8007118 <keypad_sm+0x2570>)
 8006e28:	3201      	adds	r2, #1
 8006e2a:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006e2c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006e30:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006e34:	f896 9000 	ldrb.w	r9, [r6]
 8006e38:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006e3c:	789c      	ldrb	r4, [r3, #2]
 8006e3e:	7858      	ldrb	r0, [r3, #1]
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	e003      	b.n	8006e4e <keypad_sm+0x22a6>
	while(keypaditerator < 4){
 8006e46:	46a4      	mov	ip, r4
 8006e48:	4604      	mov	r4, r0
 8006e4a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006e4c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006e4e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006e50:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006e54:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006e56:	bf04      	itt	eq
 8006e58:	f04f 0801 	moveq.w	r8, #1
 8006e5c:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006e60:	2a05      	cmp	r2, #5
 8006e62:	46e6      	mov	lr, ip
 8006e64:	d1ef      	bne.n	8006e46 <keypad_sm+0x229e>
 8006e66:	f883 c004 	strb.w	ip, [r3, #4]
 8006e6a:	70dc      	strb	r4, [r3, #3]
 8006e6c:	7098      	strb	r0, [r3, #2]
 8006e6e:	7059      	strb	r1, [r3, #1]
 8006e70:	f883 a000 	strb.w	sl, [r3]
 8006e74:	2304      	movs	r3, #4
 8006e76:	702b      	strb	r3, [r5, #0]
 8006e78:	f1b8 0f00 	cmp.w	r8, #0
 8006e7c:	f43e a92d 	beq.w	80050da <keypad_sm+0x532>
 8006e80:	f886 9000 	strb.w	r9, [r6]
 8006e84:	f7fe b929 	b.w	80050da <keypad_sm+0x532>
				dec_arr_v(encpos);
 8006e88:	4ba4      	ldr	r3, [pc, #656]	; (800711c <keypad_sm+0x2574>)
 8006e8a:	f993 0000 	ldrsb.w	r0, [r3]
 8006e8e:	f7fd fd63 	bl	8004958 <dec_arr_v>
				volt_set_aux = translate_keypad();
 8006e92:	f7fd f9c1 	bl	8004218 <translate_keypad>
 8006e96:	4aa2      	ldr	r2, [pc, #648]	; (8007120 <keypad_sm+0x2578>)
 8006e98:	6010      	str	r0, [r2, #0]
 8006e9a:	f7fd beb1 	b.w	8004c00 <keypad_sm+0x58>
				fill_keypad(1, amp_set_aux);
 8006e9e:	4ba1      	ldr	r3, [pc, #644]	; (8007124 <keypad_sm+0x257c>)
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	f7fd fb34 	bl	8004510 <fill_keypad>
				encmode = 1;
 8006ea8:	2101      	movs	r1, #1
				encpos = 0;
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4b9b      	ldr	r3, [pc, #620]	; (800711c <keypad_sm+0x2574>)
				encmode = 1;
 8006eae:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	f7fd bea5 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8006eb6:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006eb8:	4d95      	ldr	r5, [pc, #596]	; (8007110 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8006eba:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006ebc:	f995 2000 	ldrsb.w	r2, [r5]
 8006ec0:	2a03      	cmp	r2, #3
 8006ec2:	f73d ae9d 	bgt.w	8004c00 <keypad_sm+0x58>
 8006ec6:	4b93      	ldr	r3, [pc, #588]	; (8007114 <keypad_sm+0x256c>)
 8006ec8:	4e93      	ldr	r6, [pc, #588]	; (8007118 <keypad_sm+0x2570>)
 8006eca:	3201      	adds	r2, #1
 8006ecc:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006ece:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006ed2:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006ed6:	7831      	ldrb	r1, [r6, #0]
 8006ed8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006edc:	789f      	ldrb	r7, [r3, #2]
 8006ede:	785c      	ldrb	r4, [r3, #1]
 8006ee0:	7818      	ldrb	r0, [r3, #0]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	e003      	b.n	8006eee <keypad_sm+0x2346>
	while(keypaditerator < 4){
 8006ee6:	46bc      	mov	ip, r7
 8006ee8:	4627      	mov	r7, r4
 8006eea:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006eec:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006eee:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006ef0:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006ef4:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006ef6:	bf04      	itt	eq
 8006ef8:	2100      	moveq	r1, #0
 8006efa:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006efe:	2a05      	cmp	r2, #5
 8006f00:	46e6      	mov	lr, ip
 8006f02:	d1f0      	bne.n	8006ee6 <keypad_sm+0x233e>
 8006f04:	f883 c004 	strb.w	ip, [r3, #4]
 8006f08:	70df      	strb	r7, [r3, #3]
 8006f0a:	709c      	strb	r4, [r3, #2]
 8006f0c:	7058      	strb	r0, [r3, #1]
 8006f0e:	f883 9000 	strb.w	r9, [r3]
 8006f12:	2304      	movs	r3, #4
 8006f14:	702b      	strb	r3, [r5, #0]
 8006f16:	f1b8 0f00 	cmp.w	r8, #0
 8006f1a:	f43d ae71 	beq.w	8004c00 <keypad_sm+0x58>
 8006f1e:	7031      	strb	r1, [r6, #0]
 8006f20:	f7fd be6e 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8006f24:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006f26:	4d7a      	ldr	r5, [pc, #488]	; (8007110 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8006f28:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006f2a:	f995 2000 	ldrsb.w	r2, [r5]
 8006f2e:	2a03      	cmp	r2, #3
 8006f30:	f73e a8d3 	bgt.w	80050da <keypad_sm+0x532>
 8006f34:	4b77      	ldr	r3, [pc, #476]	; (8007114 <keypad_sm+0x256c>)
 8006f36:	4e78      	ldr	r6, [pc, #480]	; (8007118 <keypad_sm+0x2570>)
 8006f38:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006f3a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006f3e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006f42:	7831      	ldrb	r1, [r6, #0]
 8006f44:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006f48:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006f4c:	785c      	ldrb	r4, [r3, #1]
 8006f4e:	7818      	ldrb	r0, [r3, #0]
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	e003      	b.n	8006f5c <keypad_sm+0x23b4>
	while(keypaditerator < 4){
 8006f54:	46e6      	mov	lr, ip
 8006f56:	46a4      	mov	ip, r4
 8006f58:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006f5a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006f5c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006f5e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006f62:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006f64:	bf04      	itt	eq
 8006f66:	f04f 0901 	moveq.w	r9, #1
 8006f6a:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006f6c:	2a04      	cmp	r2, #4
 8006f6e:	46f0      	mov	r8, lr
 8006f70:	d1f0      	bne.n	8006f54 <keypad_sm+0x23ac>
 8006f72:	702a      	strb	r2, [r5, #0]
 8006f74:	f883 e004 	strb.w	lr, [r3, #4]
 8006f78:	f883 c003 	strb.w	ip, [r3, #3]
 8006f7c:	709c      	strb	r4, [r3, #2]
 8006f7e:	7058      	strb	r0, [r3, #1]
 8006f80:	f883 a000 	strb.w	sl, [r3]
 8006f84:	f1b9 0f00 	cmp.w	r9, #0
 8006f88:	f43e a8a7 	beq.w	80050da <keypad_sm+0x532>
 8006f8c:	7031      	strb	r1, [r6, #0]
 8006f8e:	f7fe b8a4 	b.w	80050da <keypad_sm+0x532>
				if(encpos == 0){
 8006f92:	4b62      	ldr	r3, [pc, #392]	; (800711c <keypad_sm+0x2574>)
 8006f94:	f993 2000 	ldrsb.w	r2, [r3]
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	d067      	beq.n	800706c <keypad_sm+0x24c4>
				else if(encpos < 4){
 8006f9c:	2a03      	cmp	r2, #3
 8006f9e:	dc26      	bgt.n	8006fee <keypad_sm+0x2446>
					encpos++;
 8006fa0:	3201      	adds	r2, #1
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	f7fd be2c 	b.w	8004c00 <keypad_sm+0x58>
				if(encpos == 1){
 8006fa8:	4b5c      	ldr	r3, [pc, #368]	; (800711c <keypad_sm+0x2574>)
 8006faa:	f993 2000 	ldrsb.w	r2, [r3]
 8006fae:	2a01      	cmp	r2, #1
 8006fb0:	d021      	beq.n	8006ff6 <keypad_sm+0x244e>
				else if(encpos < 4){
 8006fb2:	2a03      	cmp	r2, #3
 8006fb4:	dc1b      	bgt.n	8006fee <keypad_sm+0x2446>
					encpos++;
 8006fb6:	3201      	adds	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	f7fd be21 	b.w	8004c00 <keypad_sm+0x58>
				fill_keypad(0, volt_set_main);
 8006fbe:	4b5a      	ldr	r3, [pc, #360]	; (8007128 <keypad_sm+0x2580>)
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	6819      	ldr	r1, [r3, #0]
 8006fc4:	f7fd faa4 	bl	8004510 <fill_keypad>
				encmode = 1;
 8006fc8:	2101      	movs	r1, #1
				encpos = 0;
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4b53      	ldr	r3, [pc, #332]	; (800711c <keypad_sm+0x2574>)
				encmode = 1;
 8006fce:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	f7fd be15 	b.w	8004c00 <keypad_sm+0x58>
				fill_keypad(1, amp_set_main);
 8006fd6:	4b4c      	ldr	r3, [pc, #304]	; (8007108 <keypad_sm+0x2560>)
 8006fd8:	2001      	movs	r0, #1
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	f7fd fa98 	bl	8004510 <fill_keypad>
				encmode = 1;
 8006fe0:	2101      	movs	r1, #1
				encpos = 0;
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	4b4d      	ldr	r3, [pc, #308]	; (800711c <keypad_sm+0x2574>)
				encmode = 1;
 8006fe6:	7039      	strb	r1, [r7, #0]
				encpos = 0;
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	f7fd be09 	b.w	8004c00 <keypad_sm+0x58>
					encpos = 0;
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	f7fd be05 	b.w	8004c00 <keypad_sm+0x58>
					encpos++;
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	f7fd be01 	b.w	8004c00 <keypad_sm+0x58>
				kpenum = WAIT;
 8006ffe:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8007000:	4d43      	ldr	r5, [pc, #268]	; (8007110 <keypad_sm+0x2568>)
				kpenum = WAIT;
 8007002:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8007004:	f995 2000 	ldrsb.w	r2, [r5]
 8007008:	2a03      	cmp	r2, #3
 800700a:	f73e a866 	bgt.w	80050da <keypad_sm+0x532>
 800700e:	4b41      	ldr	r3, [pc, #260]	; (8007114 <keypad_sm+0x256c>)
 8007010:	4e41      	ldr	r6, [pc, #260]	; (8007118 <keypad_sm+0x2570>)
 8007012:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8007014:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8007018:	f893 8004 	ldrb.w	r8, [r3, #4]
 800701c:	7831      	ldrb	r1, [r6, #0]
 800701e:	f893 e003 	ldrb.w	lr, [r3, #3]
 8007022:	f893 c002 	ldrb.w	ip, [r3, #2]
 8007026:	785c      	ldrb	r4, [r3, #1]
 8007028:	7818      	ldrb	r0, [r3, #0]
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	e003      	b.n	8007036 <keypad_sm+0x248e>
	while(keypaditerator < 4){
 800702e:	46e6      	mov	lr, ip
 8007030:	46a4      	mov	ip, r4
 8007032:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8007034:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8007036:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8007038:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800703c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800703e:	bf04      	itt	eq
 8007040:	f04f 0901 	moveq.w	r9, #1
 8007044:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8007046:	2a04      	cmp	r2, #4
 8007048:	46f0      	mov	r8, lr
 800704a:	d1f0      	bne.n	800702e <keypad_sm+0x2486>
 800704c:	702a      	strb	r2, [r5, #0]
 800704e:	f883 e004 	strb.w	lr, [r3, #4]
 8007052:	f883 c003 	strb.w	ip, [r3, #3]
 8007056:	709c      	strb	r4, [r3, #2]
 8007058:	7058      	strb	r0, [r3, #1]
 800705a:	f883 a000 	strb.w	sl, [r3]
 800705e:	f1b9 0f00 	cmp.w	r9, #0
 8007062:	f43e a83a 	beq.w	80050da <keypad_sm+0x532>
 8007066:	7031      	strb	r1, [r6, #0]
 8007068:	f7fe b837 	b.w	80050da <keypad_sm+0x532>
					encpos++;
 800706c:	2202      	movs	r2, #2
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	f7fd bdc6 	b.w	8004c00 <keypad_sm+0x58>
				chstat_aux_tx = !chstat_aux_rx;
 8007074:	4b2d      	ldr	r3, [pc, #180]	; (800712c <keypad_sm+0x2584>)
 8007076:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <keypad_sm+0x2588>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	fab3 f383 	clz	r3, r3
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	7013      	strb	r3, [r2, #0]
 8007082:	f7fd bdbd 	b.w	8004c00 <keypad_sm+0x58>
				inc_arr_a(encpos);
 8007086:	4b25      	ldr	r3, [pc, #148]	; (800711c <keypad_sm+0x2574>)
				amp_set_main_old = amp_set_main;
 8007088:	4c1f      	ldr	r4, [pc, #124]	; (8007108 <keypad_sm+0x2560>)
				inc_arr_a(encpos);
 800708a:	f993 0000 	ldrsb.w	r0, [r3]
 800708e:	f7fd fbd9 	bl	8004844 <inc_arr_a>
				amp_set_main_old = amp_set_main;
 8007092:	6822      	ldr	r2, [r4, #0]
 8007094:	4b1d      	ldr	r3, [pc, #116]	; (800710c <keypad_sm+0x2564>)
 8007096:	601a      	str	r2, [r3, #0]
				amp_set_main = translate_keypad();
 8007098:	f7fd f8be 	bl	8004218 <translate_keypad>
 800709c:	6020      	str	r0, [r4, #0]
				update_ADC_watchdog(amp_set_main);
 800709e:	6820      	ldr	r0, [r4, #0]
}
 80070a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_ADC_watchdog(amp_set_main);
 80070a4:	f7fa bc68 	b.w	8001978 <update_ADC_watchdog>
				dec_arr_a(encpos);
 80070a8:	4b1c      	ldr	r3, [pc, #112]	; (800711c <keypad_sm+0x2574>)
				amp_set_main_old = amp_set_main;
 80070aa:	4c17      	ldr	r4, [pc, #92]	; (8007108 <keypad_sm+0x2560>)
				dec_arr_a(encpos);
 80070ac:	f993 0000 	ldrsb.w	r0, [r3]
 80070b0:	f7fd fce6 	bl	8004a80 <dec_arr_a>
				amp_set_main_old = amp_set_main;
 80070b4:	e7ed      	b.n	8007092 <keypad_sm+0x24ea>
				inc_arr_v(encpos);
 80070b6:	4b19      	ldr	r3, [pc, #100]	; (800711c <keypad_sm+0x2574>)
				volt_set_main_old = volt_set_main;
 80070b8:	4c1b      	ldr	r4, [pc, #108]	; (8007128 <keypad_sm+0x2580>)
				inc_arr_v(encpos);
 80070ba:	f993 0000 	ldrsb.w	r0, [r3]
 80070be:	f7fd fb1b 	bl	80046f8 <inc_arr_v>
				volt_set_main_old = volt_set_main;
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	4b1b      	ldr	r3, [pc, #108]	; (8007134 <keypad_sm+0x258c>)
 80070c6:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 80070c8:	f7fd f8a6 	bl	8004218 <translate_keypad>
 80070cc:	6020      	str	r0, [r4, #0]
 80070ce:	f7fd bd97 	b.w	8004c00 <keypad_sm+0x58>
				dec_arr_v(encpos);
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <keypad_sm+0x2574>)
				volt_set_main_old = volt_set_main;
 80070d4:	4c14      	ldr	r4, [pc, #80]	; (8007128 <keypad_sm+0x2580>)
				dec_arr_v(encpos);
 80070d6:	f993 0000 	ldrsb.w	r0, [r3]
 80070da:	f7fd fc3d 	bl	8004958 <dec_arr_v>
				volt_set_main_old = volt_set_main;
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	4b14      	ldr	r3, [pc, #80]	; (8007134 <keypad_sm+0x258c>)
 80070e2:	601a      	str	r2, [r3, #0]
				volt_set_main = translate_keypad();
 80070e4:	f7fd f898 	bl	8004218 <translate_keypad>
 80070e8:	6020      	str	r0, [r4, #0]
 80070ea:	f7fd bd89 	b.w	8004c00 <keypad_sm+0x58>
				inc_arr_v(encpos);
 80070ee:	4b0b      	ldr	r3, [pc, #44]	; (800711c <keypad_sm+0x2574>)
 80070f0:	f993 0000 	ldrsb.w	r0, [r3]
 80070f4:	f7fd fb00 	bl	80046f8 <inc_arr_v>
				volt_set_aux = translate_keypad();
 80070f8:	f7fd f88e 	bl	8004218 <translate_keypad>
 80070fc:	4a08      	ldr	r2, [pc, #32]	; (8007120 <keypad_sm+0x2578>)
 80070fe:	6010      	str	r0, [r2, #0]
 8007100:	f7fd bd7e 	b.w	8004c00 <keypad_sm+0x58>
 8007104:	41400000 	.word	0x41400000
 8007108:	200003ec 	.word	0x200003ec
 800710c:	200003f0 	.word	0x200003f0
 8007110:	20000011 	.word	0x20000011
 8007114:	2000000c 	.word	0x2000000c
 8007118:	20000758 	.word	0x20000758
 800711c:	20000401 	.word	0x20000401
 8007120:	20000a78 	.word	0x20000a78
 8007124:	200003e8 	.word	0x200003e8
 8007128:	20000a7c 	.word	0x20000a7c
 800712c:	200003f4 	.word	0x200003f4
 8007130:	200003f5 	.word	0x200003f5
 8007134:	20000a80 	.word	0x20000a80
				if(encpos == 0){
 8007138:	4b10      	ldr	r3, [pc, #64]	; (800717c <keypad_sm+0x25d4>)
 800713a:	f993 2000 	ldrsb.w	r2, [r3]
 800713e:	2a00      	cmp	r2, #0
 8007140:	d094      	beq.n	800706c <keypad_sm+0x24c4>
				else if(encpos < 4){
 8007142:	2a03      	cmp	r2, #3
 8007144:	f73f af53 	bgt.w	8006fee <keypad_sm+0x2446>
					encpos++;
 8007148:	3201      	adds	r2, #1
 800714a:	701a      	strb	r2, [r3, #0]
 800714c:	f7fd bd58 	b.w	8004c00 <keypad_sm+0x58>
				inc_arr_a(encpos);
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <keypad_sm+0x25d4>)
 8007152:	f993 0000 	ldrsb.w	r0, [r3]
 8007156:	f7fd fb75 	bl	8004844 <inc_arr_a>
				amp_set_aux = translate_keypad();
 800715a:	f7fd f85d 	bl	8004218 <translate_keypad>
 800715e:	4a08      	ldr	r2, [pc, #32]	; (8007180 <keypad_sm+0x25d8>)
 8007160:	6010      	str	r0, [r2, #0]
 8007162:	f7fd bd4d 	b.w	8004c00 <keypad_sm+0x58>
				dec_arr_a(encpos);
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <keypad_sm+0x25d4>)
 8007168:	f993 0000 	ldrsb.w	r0, [r3]
 800716c:	f7fd fc88 	bl	8004a80 <dec_arr_a>
				amp_set_aux = translate_keypad();
 8007170:	f7fd f852 	bl	8004218 <translate_keypad>
 8007174:	4a02      	ldr	r2, [pc, #8]	; (8007180 <keypad_sm+0x25d8>)
 8007176:	6010      	str	r0, [r2, #0]
 8007178:	f7fd bd42 	b.w	8004c00 <keypad_sm+0x58>
 800717c:	20000401 	.word	0x20000401
 8007180:	200003e8 	.word	0x200003e8

08007184 <row_input>:
void row_input(void){
 8007184:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007186:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007188:	4e38      	ldr	r6, [pc, #224]	; (800726c <row_input+0xe8>)
void row_input(void){
 800718a:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800718c:	4630      	mov	r0, r6
 800718e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007192:	e9cd 4400 	strd	r4, r4, [sp]
 8007196:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800719a:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800719c:	f001 fec0 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80071a0:	4630      	mov	r0, r6
 80071a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071a6:	f001 febb 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80071aa:	4630      	mov	r0, r6
 80071ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80071b0:	4d2f      	ldr	r5, [pc, #188]	; (8007270 <row_input+0xec>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80071b2:	f001 feb5 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80071b6:	4630      	mov	r0, r6
 80071b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071bc:	f001 feb0 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80071c0:	4630      	mov	r0, r6
 80071c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071c6:	f001 feab 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80071ca:	4628      	mov	r0, r5
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	f001 fea7 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80071d2:	4628      	mov	r0, r5
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	f001 fea3 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80071da:	4628      	mov	r0, r5
 80071dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071e0:	f001 fe9e 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80071e4:	4628      	mov	r0, r5
 80071e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071ea:	f001 fe99 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80071ee:	4622      	mov	r2, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80071f6:	f001 ff2b 	bl	8009050 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 80071fa:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80071fe:	2301      	movs	r3, #1
 8007200:	e9cd 2300 	strd	r2, r3, [sp]
 8007204:	2200      	movs	r2, #0
 8007206:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007208:	4669      	mov	r1, sp
 800720a:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 800720c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007210:	f001 fd9c 	bl	8008d4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007214:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8007218:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800721c:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007220:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007222:	4669      	mov	r1, sp
 8007224:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007226:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007228:	f001 fd90 	bl	8008d4c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800722c:	4628      	mov	r0, r5
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 800722e:	f44f 6580 	mov.w	r5, #1024	; 0x400
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8007232:	4622      	mov	r2, r4
 8007234:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8007238:	f001 ff0a 	bl	8009050 <HAL_GPIO_WritePin>
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 800723c:	4b0d      	ldr	r3, [pc, #52]	; (8007274 <row_input+0xf0>)
	__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 800723e:	f44f 6000 	mov.w	r0, #2048	; 0x800
	__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007242:	615d      	str	r5, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 8007244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 8007248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 800724c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 8007250:	6158      	str	r0, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 8007252:	6159      	str	r1, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007254:	2028      	movs	r0, #40	; 0x28
	__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 8007256:	615a      	str	r2, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007258:	4621      	mov	r1, r4
 800725a:	4622      	mov	r2, r4
	__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 800725c:	615d      	str	r5, [r3, #20]
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 800725e:	f001 fac3 	bl	80087e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 8007262:	2028      	movs	r0, #40	; 0x28
 8007264:	f001 fafe 	bl	8008864 <HAL_NVIC_EnableIRQ>
}
 8007268:	b006      	add	sp, #24
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	40020400 	.word	0x40020400
 8007270:	40020800 	.word	0x40020800
 8007274:	40010400 	.word	0x40010400

08007278 <column_input>:
void column_input(void){
 8007278:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800727a:	2500      	movs	r5, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 800727c:	4c2c      	ldr	r4, [pc, #176]	; (8007330 <column_input+0xb8>)
void column_input(void){
 800727e:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007280:	4620      	mov	r0, r4
 8007282:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007286:	e9cd 5500 	strd	r5, r5, [sp]
 800728a:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800728e:	9504      	str	r5, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8007290:	f001 fe46 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8007294:	4620      	mov	r0, r4
 8007296:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800729a:	f001 fe41 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800729e:	4620      	mov	r0, r4
 80072a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072a4:	f001 fe3c 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80072a8:	4e22      	ldr	r6, [pc, #136]	; (8007334 <column_input+0xbc>)
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072b0:	f001 fe36 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80072b4:	4620      	mov	r0, r4
 80072b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072ba:	f001 fe31 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80072be:	4630      	mov	r0, r6
 80072c0:	2140      	movs	r1, #64	; 0x40
 80072c2:	f001 fe2d 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80072c6:	4630      	mov	r0, r6
 80072c8:	2180      	movs	r1, #128	; 0x80
 80072ca:	f001 fe29 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80072ce:	4630      	mov	r0, r6
 80072d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072d4:	f001 fe24 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80072d8:	4630      	mov	r0, r6
 80072da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072de:	f001 fe1f 	bl	8008f20 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80072e2:	462a      	mov	r2, r5
 80072e4:	4620      	mov	r0, r4
 80072e6:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80072ea:	f001 feb1 	bl	8009050 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80072ee:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80072f2:	2301      	movs	r3, #1
 80072f4:	e9cd 2300 	strd	r2, r3, [sp]
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80072fc:	4669      	mov	r1, sp
 80072fe:	4620      	mov	r0, r4
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007300:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007304:	f001 fd22 	bl	8008d4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8007308:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800730c:	2300      	movs	r3, #0
 800730e:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007312:	2301      	movs	r3, #1
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007314:	4669      	mov	r1, sp
 8007316:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007318:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800731a:	f001 fd17 	bl	8008d4c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 800731e:	462a      	mov	r2, r5
 8007320:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8007324:	4620      	mov	r0, r4
 8007326:	f001 fe93 	bl	8009050 <HAL_GPIO_WritePin>
}
 800732a:	b006      	add	sp, #24
 800732c:	bd70      	pop	{r4, r5, r6, pc}
 800732e:	bf00      	nop
 8007330:	40020400 	.word	0x40020400
 8007334:	40020800 	.word	0x40020800

08007338 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007338:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007340:	d010      	beq.n	8007364 <HAL_GPIO_EXTI_Callback+0x2c>
 8007342:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007346:	d00d      	beq.n	8007364 <HAL_GPIO_EXTI_Callback+0x2c>
 8007348:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800734c:	d00a      	beq.n	8007364 <HAL_GPIO_EXTI_Callback+0x2c>
 800734e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8007352:	d007      	beq.n	8007364 <HAL_GPIO_EXTI_Callback+0x2c>
 8007354:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007358:	d004      	beq.n	8007364 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 800735a:	2804      	cmp	r0, #4
 800735c:	d02c      	beq.n	80073b8 <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Rot_CLK_Pin){
 800735e:	2801      	cmp	r0, #1
 8007360:	d00f      	beq.n	8007382 <HAL_GPIO_EXTI_Callback+0x4a>
}
 8007362:	bd38      	pop	{r3, r4, r5, pc}
		HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8007364:	2028      	movs	r0, #40	; 0x28
 8007366:	f001 fa8b 	bl	8008880 <HAL_NVIC_DisableIRQ>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 800736a:	4621      	mov	r1, r4
 800736c:	4816      	ldr	r0, [pc, #88]	; (80073c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800736e:	f001 fe69 	bl	8009044 <HAL_GPIO_ReadPin>
 8007372:	b908      	cbnz	r0, 8007378 <HAL_GPIO_EXTI_Callback+0x40>
			rowpin = GPIO_Pin;
 8007374:	4b15      	ldr	r3, [pc, #84]	; (80073cc <HAL_GPIO_EXTI_Callback+0x94>)
 8007376:	601c      	str	r4, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim2);
 8007378:	4815      	ldr	r0, [pc, #84]	; (80073d0 <HAL_GPIO_EXTI_Callback+0x98>)
}
 800737a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim2);
 800737e:	f003 bc2b 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 8007382:	4d14      	ldr	r5, [pc, #80]	; (80073d4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007384:	782b      	ldrb	r3, [r5, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1eb      	bne.n	8007362 <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 800738a:	2006      	movs	r0, #6
 800738c:	f001 fa78 	bl	8008880 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 8007390:	4621      	mov	r1, r4
 8007392:	480d      	ldr	r0, [pc, #52]	; (80073c8 <HAL_GPIO_EXTI_Callback+0x90>)
 8007394:	f001 fe56 	bl	8009044 <HAL_GPIO_ReadPin>
 8007398:	2102      	movs	r1, #2
 800739a:	4604      	mov	r4, r0
 800739c:	480a      	ldr	r0, [pc, #40]	; (80073c8 <HAL_GPIO_EXTI_Callback+0x90>)
 800739e:	f001 fe51 	bl	8009044 <HAL_GPIO_ReadPin>
 80073a2:	4603      	mov	r3, r0
 80073a4:	429c      	cmp	r4, r3
 80073a6:	bf0c      	ite	eq
 80073a8:	2401      	moveq	r4, #1
 80073aa:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 80073ac:	480a      	ldr	r0, [pc, #40]	; (80073d8 <HAL_GPIO_EXTI_Callback+0xa0>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80073ae:	702c      	strb	r4, [r5, #0]
}
 80073b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 80073b4:	f003 bc10 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 80073b8:	2008      	movs	r0, #8
 80073ba:	f001 fa61 	bl	8008880 <HAL_NVIC_DisableIRQ>
}
 80073be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim9);
 80073c2:	4806      	ldr	r0, [pc, #24]	; (80073dc <HAL_GPIO_EXTI_Callback+0xa4>)
 80073c4:	f003 bc08 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
 80073c8:	40020400 	.word	0x40020400
 80073cc:	20000014 	.word	0x20000014
 80073d0:	20000614 	.word	0x20000614
 80073d4:	2000096c 	.word	0x2000096c
 80073d8:	20000594 	.word	0x20000594
 80073dc:	200006d4 	.word	0x200006d4

080073e0 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 80073e0:	4a7b      	ldr	r2, [pc, #492]	; (80075d0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
{
 80073e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim == &htim2){
 80073e4:	4290      	cmp	r0, r2
 80073e6:	d045      	beq.n	8007474 <HAL_TIM_PeriodElapsedCallback+0x94>
	else if(htim == &htim3){
 80073e8:	4a7a      	ldr	r2, [pc, #488]	; (80075d4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80073ea:	4290      	cmp	r0, r2
 80073ec:	d05f      	beq.n	80074ae <HAL_TIM_PeriodElapsedCallback+0xce>
	else if(htim == &htim4){
 80073ee:	4a7a      	ldr	r2, [pc, #488]	; (80075d8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80073f0:	4290      	cmp	r0, r2
 80073f2:	d069      	beq.n	80074c8 <HAL_TIM_PeriodElapsedCallback+0xe8>
	else if(htim == &htim9){
 80073f4:	4a79      	ldr	r2, [pc, #484]	; (80075dc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80073f6:	4290      	cmp	r0, r2
 80073f8:	d006      	beq.n	8007408 <HAL_TIM_PeriodElapsedCallback+0x28>
	else if(htim == &htim10){
 80073fa:	4a79      	ldr	r2, [pc, #484]	; (80075e0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80073fc:	4290      	cmp	r0, r2
 80073fe:	d075      	beq.n	80074ec <HAL_TIM_PeriodElapsedCallback+0x10c>
	else if(htim == &htim11){
 8007400:	4a78      	ldr	r2, [pc, #480]	; (80075e4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8007402:	4290      	cmp	r0, r2
 8007404:	d012      	beq.n	800742c <HAL_TIM_PeriodElapsedCallback+0x4c>
}
 8007406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 8007408:	f003 fc12 	bl	800ac30 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 800740c:	2073      	movs	r0, #115	; 0x73
 800740e:	f7fd fbcb 	bl	8004ba8 <keypad_sm>
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 8007412:	2404      	movs	r4, #4
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 8007414:	2200      	movs	r2, #0
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 8007416:	4b74      	ldr	r3, [pc, #464]	; (80075e8 <HAL_TIM_PeriodElapsedCallback+0x208>)
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 8007418:	2008      	movs	r0, #8
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_SW_Pin);
 800741a:	615c      	str	r4, [r3, #20]
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 800741c:	4611      	mov	r1, r2
 800741e:	f001 f9e3 	bl	80087e8 <HAL_NVIC_SetPriority>
}
 8007422:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 8007426:	2008      	movs	r0, #8
 8007428:	f001 ba1c 	b.w	8008864 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 800742c:	f003 fc00 	bl	800ac30 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 8007430:	4b6e      	ldr	r3, [pc, #440]	; (80075ec <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8007432:	7819      	ldrb	r1, [r3, #0]
 8007434:	b24a      	sxtb	r2, r1
 8007436:	2900      	cmp	r1, #0
 8007438:	f000 8088 	beq.w	800754c <HAL_TIM_PeriodElapsedCallback+0x16c>
		else if(chstat_main == 1){
 800743c:	7819      	ldrb	r1, [r3, #0]
 800743e:	2901      	cmp	r1, #1
 8007440:	b24a      	sxtb	r2, r1
 8007442:	f000 8083 	beq.w	800754c <HAL_TIM_PeriodElapsedCallback+0x16c>
		else if(chstat_main == 2){
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b02      	cmp	r3, #2
 800744a:	f000 80b1 	beq.w	80075b0 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		if(chstat_aux_rx == 0){
 800744e:	4b68      	ldr	r3, [pc, #416]	; (80075f0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007450:	7819      	ldrb	r1, [r3, #0]
 8007452:	b24a      	sxtb	r2, r1
 8007454:	2900      	cmp	r1, #0
 8007456:	f000 8081 	beq.w	800755c <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_aux_rx == 1){
 800745a:	7819      	ldrb	r1, [r3, #0]
 800745c:	2901      	cmp	r1, #1
 800745e:	b24a      	sxtb	r2, r1
 8007460:	d07c      	beq.n	800755c <HAL_TIM_PeriodElapsedCallback+0x17c>
		else if(chstat_aux_rx == 2){
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f000 80a8 	beq.w	80075ba <HAL_TIM_PeriodElapsedCallback+0x1da>
}
 800746a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 800746e:	485d      	ldr	r0, [pc, #372]	; (80075e4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8007470:	f003 bbb2 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
		if(rowpin != -1){
 8007474:	4f5f      	ldr	r7, [pc, #380]	; (80075f4 <HAL_TIM_PeriodElapsedCallback+0x214>)
		HAL_TIM_Base_Stop_IT(&htim2);
 8007476:	f003 fbdb 	bl	800ac30 <HAL_TIM_Base_Stop_IT>
		if(rowpin != -1){
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	d04b      	beq.n	8007518 <HAL_TIM_PeriodElapsedCallback+0x138>
			column_input();
 8007480:	f7ff fefa 	bl	8007278 <column_input>
			for(int i = 0; i < 4; i++){
 8007484:	2400      	movs	r4, #0
 8007486:	4e5c      	ldr	r6, [pc, #368]	; (80075f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8007488:	4d5c      	ldr	r5, [pc, #368]	; (80075fc <HAL_TIM_PeriodElapsedCallback+0x21c>)
				if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 800748a:	f835 1b02 	ldrh.w	r1, [r5], #2
 800748e:	f856 0b04 	ldr.w	r0, [r6], #4
 8007492:	f001 fdd7 	bl	8009044 <HAL_GPIO_ReadPin>
 8007496:	2800      	cmp	r0, #0
 8007498:	d065      	beq.n	8007566 <HAL_TIM_PeriodElapsedCallback+0x186>
			for(int i = 0; i < 4; i++){
 800749a:	3401      	adds	r4, #1
 800749c:	2c04      	cmp	r4, #4
 800749e:	d1f4      	bne.n	800748a <HAL_TIM_PeriodElapsedCallback+0xaa>
			rowpin = -1;
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	603b      	str	r3, [r7, #0]
}
 80074a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			row_input();
 80074aa:	f7ff be6b 	b.w	8007184 <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 80074ae:	f003 fbbf 	bl	800ac30 <HAL_TIM_Base_Stop_IT>
		if(timercounter < 5){
 80074b2:	4a53      	ldr	r2, [pc, #332]	; (8007600 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80074b4:	7813      	ldrb	r3, [r2, #0]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d84d      	bhi.n	8007556 <HAL_TIM_PeriodElapsedCallback+0x176>
			timercounter++;
 80074ba:	3301      	adds	r3, #1
 80074bc:	7013      	strb	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 80074be:	4845      	ldr	r0, [pc, #276]	; (80075d4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
}
 80074c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 80074c4:	f003 bb88 	b.w	800abd8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 80074c8:	f003 fbb2 	bl	800ac30 <HAL_TIM_Base_Stop_IT>
		if(toggle_chstat_main){
 80074cc:	4a4d      	ldr	r2, [pc, #308]	; (8007604 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80074ce:	7813      	ldrb	r3, [r2, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d098      	beq.n	8007406 <HAL_TIM_PeriodElapsedCallback+0x26>
			chstat_main = !chstat_main;
 80074d4:	4945      	ldr	r1, [pc, #276]	; (80075ec <HAL_TIM_PeriodElapsedCallback+0x20c>)
			toggle_chstat_main = 0;
 80074d6:	2500      	movs	r5, #0
			chstat_main = !chstat_main;
 80074d8:	780b      	ldrb	r3, [r1, #0]
			toggle_chstat_main_tim = 1;
 80074da:	2401      	movs	r4, #1
			chstat_main = !chstat_main;
 80074dc:	fab3 f383 	clz	r3, r3
			toggle_chstat_main_tim = 1;
 80074e0:	4849      	ldr	r0, [pc, #292]	; (8007608 <HAL_TIM_PeriodElapsedCallback+0x228>)
			chstat_main = !chstat_main;
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	700b      	strb	r3, [r1, #0]
			toggle_chstat_main = 0;
 80074e6:	7015      	strb	r5, [r2, #0]
			toggle_chstat_main_tim = 1;
 80074e8:	7004      	strb	r4, [r0, #0]
}
 80074ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(rotenum == CWTURN){
 80074ec:	4c47      	ldr	r4, [pc, #284]	; (800760c <HAL_TIM_PeriodElapsedCallback+0x22c>)
		HAL_TIM_Base_Stop_IT(&htim10);
 80074ee:	f003 fb9f 	bl	800ac30 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 80074f2:	7823      	ldrb	r3, [r4, #0]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d053      	beq.n	80075a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		else if(rotenum == CCWTURN){
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d055      	beq.n	80075a8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		rotenum = NOTURN;
 80074fc:	2200      	movs	r2, #0
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_CLK_Pin);
 80074fe:	2501      	movs	r5, #1
 8007500:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <HAL_TIM_PeriodElapsedCallback+0x208>)
		rotenum = NOTURN;
 8007502:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 8007504:	2006      	movs	r0, #6
		__HAL_GPIO_EXTI_CLEAR_IT(Rot_CLK_Pin);
 8007506:	615d      	str	r5, [r3, #20]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 8007508:	4611      	mov	r1, r2
 800750a:	f001 f96d 	bl	80087e8 <HAL_NVIC_SetPriority>
}
 800750e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8007512:	2006      	movs	r0, #6
 8007514:	f001 b9a6 	b.w	8008864 <HAL_NVIC_EnableIRQ>
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007518:	f44f 6580 	mov.w	r5, #1024	; 0x400
			__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 800751c:	f44f 6400 	mov.w	r4, #2048	; 0x800
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007520:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <HAL_TIM_PeriodElapsedCallback+0x208>)
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007522:	2200      	movs	r2, #0
			__HAL_GPIO_EXTI_CLEAR_IT(Row_1_Pin);
 8007524:	615d      	str	r5, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 8007526:	f44f 5080 	mov.w	r0, #4096	; 0x1000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_2_Pin);
 800752a:	615c      	str	r4, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 800752c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 8007530:	f44f 4480 	mov.w	r4, #16384	; 0x4000
			__HAL_GPIO_EXTI_CLEAR_IT(Row_3_Pin);
 8007534:	6158      	str	r0, [r3, #20]
			__HAL_GPIO_EXTI_CLEAR_IT(Row_4_Pin);
 8007536:	6159      	str	r1, [r3, #20]
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8007538:	2028      	movs	r0, #40	; 0x28
			__HAL_GPIO_EXTI_CLEAR_IT(Row_5_Pin);
 800753a:	615c      	str	r4, [r3, #20]
			HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 800753c:	4611      	mov	r1, r2
 800753e:	f001 f953 	bl	80087e8 <HAL_NVIC_SetPriority>
}
 8007542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 8007546:	2028      	movs	r0, #40	; 0x28
 8007548:	f001 b98c 	b.w	8008864 <HAL_NVIC_EnableIRQ>
			HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 800754c:	2120      	movs	r1, #32
 800754e:	4830      	ldr	r0, [pc, #192]	; (8007610 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8007550:	f001 fd7e 	bl	8009050 <HAL_GPIO_WritePin>
 8007554:	e77b      	b.n	800744e <HAL_TIM_PeriodElapsedCallback+0x6e>
			lcd_psu_update();
 8007556:	f7fc f96b 	bl	8003830 <lcd_psu_update>
 800755a:	e7b0      	b.n	80074be <HAL_TIM_PeriodElapsedCallback+0xde>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 800755c:	2110      	movs	r1, #16
 800755e:	482c      	ldr	r0, [pc, #176]	; (8007610 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8007560:	f001 fd76 	bl	8009050 <HAL_GPIO_WritePin>
 8007564:	e781      	b.n	800746a <HAL_TIM_PeriodElapsedCallback+0x8a>
						if(rowpin == row_pins[j]){
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756c:	d011      	beq.n	8007592 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007574:	d026      	beq.n	80075c4 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757c:	d026      	beq.n	80075cc <HAL_TIM_PeriodElapsedCallback+0x1ec>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d020      	beq.n	80075c8 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
					for(int j = 0; j < 5; j++){
 800758c:	bf08      	it	eq
 800758e:	2004      	moveq	r0, #4
						if(rowpin == row_pins[j]){
 8007590:	d186      	bne.n	80074a0 <HAL_TIM_PeriodElapsedCallback+0xc0>
							keypad_sm(keypad_labels[j][i]);
 8007592:	4b20      	ldr	r3, [pc, #128]	; (8007614 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8007594:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007598:	5d00      	ldrb	r0, [r0, r4]
 800759a:	f7fd fb05 	bl	8004ba8 <keypad_sm>
							break;
 800759e:	e77f      	b.n	80074a0 <HAL_TIM_PeriodElapsedCallback+0xc0>
			keypad_sm(']');//right bracket for CW
 80075a0:	205d      	movs	r0, #93	; 0x5d
 80075a2:	f7fd fb01 	bl	8004ba8 <keypad_sm>
 80075a6:	e7a9      	b.n	80074fc <HAL_TIM_PeriodElapsedCallback+0x11c>
			keypad_sm('[');//left bracket for CCW
 80075a8:	205b      	movs	r0, #91	; 0x5b
 80075aa:	f7fd fafd 	bl	8004ba8 <keypad_sm>
 80075ae:	e7a5      	b.n	80074fc <HAL_TIM_PeriodElapsedCallback+0x11c>
			HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 80075b0:	2120      	movs	r1, #32
 80075b2:	4817      	ldr	r0, [pc, #92]	; (8007610 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80075b4:	f001 fd50 	bl	8009058 <HAL_GPIO_TogglePin>
 80075b8:	e749      	b.n	800744e <HAL_TIM_PeriodElapsedCallback+0x6e>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 80075ba:	2110      	movs	r1, #16
 80075bc:	4814      	ldr	r0, [pc, #80]	; (8007610 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80075be:	f001 fd4b 	bl	8009058 <HAL_GPIO_TogglePin>
 80075c2:	e752      	b.n	800746a <HAL_TIM_PeriodElapsedCallback+0x8a>
					for(int j = 0; j < 5; j++){
 80075c4:	2001      	movs	r0, #1
 80075c6:	e7e4      	b.n	8007592 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 80075c8:	2003      	movs	r0, #3
 80075ca:	e7e2      	b.n	8007592 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 80075cc:	2002      	movs	r0, #2
 80075ce:	e7e0      	b.n	8007592 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 80075d0:	20000614 	.word	0x20000614
 80075d4:	20000654 	.word	0x20000654
 80075d8:	20000694 	.word	0x20000694
 80075dc:	200006d4 	.word	0x200006d4
 80075e0:	20000594 	.word	0x20000594
 80075e4:	200005d4 	.word	0x200005d4
 80075e8:	40010400 	.word	0x40010400
 80075ec:	200003f6 	.word	0x200003f6
 80075f0:	200003f4 	.word	0x200003f4
 80075f4:	20000014 	.word	0x20000014
 80075f8:	080119cc 	.word	0x080119cc
 80075fc:	080119c4 	.word	0x080119c4
 8007600:	200009b5 	.word	0x200009b5
 8007604:	200009b6 	.word	0x200009b6
 8007608:	20000018 	.word	0x20000018
 800760c:	2000096c 	.word	0x2000096c
 8007610:	40020800 	.word	0x40020800
 8007614:	08011a1c 	.word	0x08011a1c

08007618 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <HAL_ADC_ConvHalfCpltCallback+0x14>)
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800761c:	8810      	ldrh	r0, [r2, #0]
	adc_values_cpy[1] = adc_values[1];
 800761e:	8851      	ldrh	r1, [r2, #2]
	adc_values_cpy[2] = adc_values[2];
 8007620:	8892      	ldrh	r2, [r2, #4]
	adc_values_cpy[0] = adc_values[0];
 8007622:	8018      	strh	r0, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 8007624:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 8007626:	809a      	strh	r2, [r3, #4]
}
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	200003d0 	.word	0x200003d0
 8007630:	200003dc 	.word	0x200003dc

08007634 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <HAL_ADC_ConvCpltCallback+0x14>)
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <HAL_ADC_ConvCpltCallback+0x18>)
 8007638:	88d0      	ldrh	r0, [r2, #6]
	adc_values_cpy[4] = adc_values[4];
 800763a:	8911      	ldrh	r1, [r2, #8]
	adc_values_cpy[5] = adc_values[5];
 800763c:	8952      	ldrh	r2, [r2, #10]
	adc_values_cpy[3] = adc_values[3];
 800763e:	80d8      	strh	r0, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 8007640:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 8007642:	815a      	strh	r2, [r3, #10]
}
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	200003d0 	.word	0x200003d0
 800764c:	200003dc 	.word	0x200003dc

08007650 <HAL_ADC_LevelOutOfWindowCallback>:
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8007650:	2201      	movs	r2, #1
{
 8007652:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8007654:	2140      	movs	r1, #64	; 0x40
 8007656:	4803      	ldr	r0, [pc, #12]	; (8007664 <HAL_ADC_LevelOutOfWindowCallback+0x14>)
 8007658:	f001 fcfa 	bl	8009050 <HAL_GPIO_WritePin>
	chstat_main = 2;
 800765c:	2202      	movs	r2, #2
 800765e:	4b02      	ldr	r3, [pc, #8]	; (8007668 <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 8007660:	701a      	strb	r2, [r3, #0]
}
 8007662:	bd08      	pop	{r3, pc}
 8007664:	40020000 	.word	0x40020000
 8007668:	200003f6 	.word	0x200003f6

0800766c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007670:	4e84      	ldr	r6, [pc, #528]	; (8007884 <HAL_UART_RxCpltCallback+0x218>)
	for(int i = 0; i < 64; i++){
 8007672:	2400      	movs	r4, #0
 8007674:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007676:	b08b      	sub	sp, #44	; 0x2c
 8007678:	e003      	b.n	8007682 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 800767a:	3401      	adds	r4, #1
 800767c:	2c40      	cmp	r4, #64	; 0x40
 800767e:	f000 80fd 	beq.w	800787c <HAL_UART_RxCpltCallback+0x210>
		if(rxbuffer[i] == '*'){
 8007682:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007686:	2d2a      	cmp	r5, #42	; 0x2a
 8007688:	d1f7      	bne.n	800767a <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 800768a:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 800768c:	2220      	movs	r2, #32
 800768e:	2100      	movs	r1, #0
 8007690:	a802      	add	r0, sp, #8
 8007692:	f005 fe75 	bl	800d380 <memset>
	for(int i = 0; i < 25; i++){
 8007696:	f10d 0307 	add.w	r3, sp, #7
 800769a:	aa08      	add	r2, sp, #32
 800769c:	e000      	b.n	80076a0 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 800769e:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 80076a0:	3401      	adds	r4, #1
 80076a2:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 80076a4:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 80076a6:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 80076aa:	bf28      	it	cs
 80076ac:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d1f5      	bne.n	800769e <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 80076b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80076b6:	2b2a      	cmp	r3, #42	; 0x2a
 80076b8:	d00c      	beq.n	80076d4 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 80076ba:	2240      	movs	r2, #64	; 0x40
 80076bc:	2100      	movs	r1, #0
 80076be:	4871      	ldr	r0, [pc, #452]	; (8007884 <HAL_UART_RxCpltCallback+0x218>)
 80076c0:	f005 fe5e 	bl	800d380 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80076c4:	2240      	movs	r2, #64	; 0x40
 80076c6:	496f      	ldr	r1, [pc, #444]	; (8007884 <HAL_UART_RxCpltCallback+0x218>)
 80076c8:	486f      	ldr	r0, [pc, #444]	; (8007888 <HAL_UART_RxCpltCallback+0x21c>)
}
 80076ca:	b00b      	add	sp, #44	; 0x2c
 80076cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 80076d0:	f003 bcf6 	b.w	800b0c0 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 80076d4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80076d8:	2b53      	cmp	r3, #83	; 0x53
 80076da:	d1ee      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 80076dc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80076e0:	2b54      	cmp	r3, #84	; 0x54
 80076e2:	d1ea      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 80076e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80076e8:	2b52      	cmp	r3, #82	; 0x52
 80076ea:	d1e6      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 80076ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80076f0:	2b54      	cmp	r3, #84	; 0x54
 80076f2:	d1e2      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 80076f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80076f8:	2b46      	cmp	r3, #70	; 0x46
 80076fa:	d1de      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 80076fc:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8007700:	2b4e      	cmp	r3, #78	; 0x4e
 8007702:	d1da      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 8007704:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8007708:	2b53      	cmp	r3, #83	; 0x53
 800770a:	d1d6      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 800770c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007710:	2b48      	cmp	r3, #72	; 0x48
 8007712:	d1d2      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 8007714:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007718:	2b21      	cmp	r3, #33	; 0x21
 800771a:	d1ce      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 800771c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8007720:	2b2c      	cmp	r3, #44	; 0x2c
 8007722:	d1ca      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007724:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007728:	2b2c      	cmp	r3, #44	; 0x2c
 800772a:	d1c6      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 800772c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007730:	2b2c      	cmp	r3, #44	; 0x2c
 8007732:	d1c2      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 8007734:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007738:	2b2c      	cmp	r3, #44	; 0x2c
 800773a:	d1be      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 800773c:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8007740:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8007742:	b2c3      	uxtb	r3, r0
 8007744:	2b09      	cmp	r3, #9
 8007746:	d8b8      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8007748:	f89d b00f 	ldrb.w	fp, [sp, #15]
 800774c:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8007750:	fa5f f38b 	uxtb.w	r3, fp
 8007754:	2b09      	cmp	r3, #9
 8007756:	d8b0      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 8007758:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800775c:	2b2e      	cmp	r3, #46	; 0x2e
 800775e:	d1ac      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007760:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007764:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8007768:	fa5f f38a 	uxtb.w	r3, sl
 800776c:	2b09      	cmp	r3, #9
 800776e:	d8a4      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007770:	f89d 6012 	ldrb.w	r6, [sp, #18]
 8007774:	3e30      	subs	r6, #48	; 0x30
 8007776:	b2f3      	uxtb	r3, r6
 8007778:	2b09      	cmp	r3, #9
 800777a:	d89e      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800777c:	f89d 9014 	ldrb.w	r9, [sp, #20]
 8007780:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007784:	fa5f f389 	uxtb.w	r3, r9
 8007788:	2b09      	cmp	r3, #9
 800778a:	d896      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800778c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007790:	2b2e      	cmp	r3, #46	; 0x2e
 8007792:	d192      	bne.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
 8007794:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8007798:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800779c:	fa5f f388 	uxtb.w	r3, r8
 80077a0:	2b09      	cmp	r3, #9
 80077a2:	d88a      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80077a4:	f89d 7017 	ldrb.w	r7, [sp, #23]
 80077a8:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 80077aa:	b2fb      	uxtb	r3, r7
 80077ac:	2b09      	cmp	r3, #9
 80077ae:	d884      	bhi.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80077b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80077b4:	3d30      	subs	r5, #48	; 0x30
 80077b6:	b2eb      	uxtb	r3, r5
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	f63f af7e 	bhi.w	80076ba <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 80077be:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80077c2:	3c30      	subs	r4, #48	; 0x30
 80077c4:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 80077c6:	2c02      	cmp	r4, #2
 80077c8:	f63f af77 	bhi.w	80076ba <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80077cc:	f7f9 fa9e 	bl	8000d0c <__aeabi_i2f>
 80077d0:	492e      	ldr	r1, [pc, #184]	; (800788c <HAL_UART_RxCpltCallback+0x220>)
 80077d2:	f7f9 faef 	bl	8000db4 <__aeabi_fmul>
 80077d6:	2100      	movs	r1, #0
 80077d8:	f7f9 f9e4 	bl	8000ba4 <__addsf3>
 80077dc:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80077de:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 80077e0:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80077e2:	f7f9 fa93 	bl	8000d0c <__aeabi_i2f>
 80077e6:	9901      	ldr	r1, [sp, #4]
 80077e8:	f7f9 f9dc 	bl	8000ba4 <__addsf3>
 80077ec:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80077ee:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 80077f0:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 80077f2:	f7f9 fa8b 	bl	8000d0c <__aeabi_i2f>
 80077f6:	4925      	ldr	r1, [pc, #148]	; (800788c <HAL_UART_RxCpltCallback+0x220>)
 80077f8:	f7f9 fb90 	bl	8000f1c <__aeabi_fdiv>
 80077fc:	4651      	mov	r1, sl
 80077fe:	f7f9 f9d1 	bl	8000ba4 <__addsf3>
 8007802:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007804:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8007806:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007808:	f7f9 fa80 	bl	8000d0c <__aeabi_i2f>
 800780c:	2100      	movs	r1, #0
 800780e:	f7f9 f9c9 	bl	8000ba4 <__addsf3>
 8007812:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007814:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007816:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007818:	f7f9 fa78 	bl	8000d0c <__aeabi_i2f>
 800781c:	491b      	ldr	r1, [pc, #108]	; (800788c <HAL_UART_RxCpltCallback+0x220>)
 800781e:	f7f9 fb7d 	bl	8000f1c <__aeabi_fdiv>
 8007822:	4641      	mov	r1, r8
 8007824:	f7f9 f9be 	bl	8000ba4 <__addsf3>
 8007828:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800782a:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800782c:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 800782e:	f7f9 fa6d 	bl	8000d0c <__aeabi_i2f>
 8007832:	4917      	ldr	r1, [pc, #92]	; (8007890 <HAL_UART_RxCpltCallback+0x224>)
 8007834:	f7f9 fb72 	bl	8000f1c <__aeabi_fdiv>
 8007838:	4639      	mov	r1, r7
 800783a:	f7f9 f9b3 	bl	8000ba4 <__addsf3>
 800783e:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8007840:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8007842:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8007844:	f7f9 fa62 	bl	8000d0c <__aeabi_i2f>
 8007848:	4911      	ldr	r1, [pc, #68]	; (8007890 <HAL_UART_RxCpltCallback+0x224>)
 800784a:	f7f9 fb67 	bl	8000f1c <__aeabi_fdiv>
 800784e:	4649      	mov	r1, r9
 8007850:	f7f9 f9a8 	bl	8000ba4 <__addsf3>
 8007854:	4602      	mov	r2, r0
		lin_num_aux = tempv2;
 8007856:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <HAL_UART_RxCpltCallback+0x228>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8007858:	4628      	mov	r0, r5
		lin_num_aux = tempv2;
 800785a:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800785c:	f7f9 fa56 	bl	8000d0c <__aeabi_i2f>
 8007860:	490d      	ldr	r1, [pc, #52]	; (8007898 <HAL_UART_RxCpltCallback+0x22c>)
 8007862:	f7f9 fb5b 	bl	8000f1c <__aeabi_fdiv>
 8007866:	4631      	mov	r1, r6
 8007868:	f7f9 f99c 	bl	8000ba4 <__addsf3>
		cur_num_aux = tempa2;
 800786c:	f8df b02c 	ldr.w	fp, [pc, #44]	; 800789c <HAL_UART_RxCpltCallback+0x230>
		chstat_aux_rx = rxbuffercpy[18]-48;
 8007870:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <HAL_UART_RxCpltCallback+0x234>)
 8007872:	b264      	sxtb	r4, r4
 8007874:	701c      	strb	r4, [r3, #0]
		cur_num_aux = tempa2;
 8007876:	f8cb 0000 	str.w	r0, [fp]
		chstat_aux_rx = rxbuffercpy[18]-48;
 800787a:	e71e      	b.n	80076ba <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 800787c:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 800787e:	7835      	ldrb	r5, [r6, #0]
 8007880:	e704      	b.n	800768c <HAL_UART_RxCpltCallback+0x20>
 8007882:	bf00      	nop
 8007884:	20000970 	.word	0x20000970
 8007888:	20000714 	.word	0x20000714
 800788c:	41200000 	.word	0x41200000
 8007890:	42c80000 	.word	0x42c80000
 8007894:	20000760 	.word	0x20000760
 8007898:	447a0000 	.word	0x447a0000
 800789c:	200003fc 	.word	0x200003fc
 80078a0:	200003f4 	.word	0x200003f4

080078a4 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 80078a4:	2240      	movs	r2, #64	; 0x40
 80078a6:	4902      	ldr	r1, [pc, #8]	; (80078b0 <HAL_UART_ErrorCallback+0xc>)
 80078a8:	4802      	ldr	r0, [pc, #8]	; (80078b4 <HAL_UART_ErrorCallback+0x10>)
 80078aa:	f003 bc09 	b.w	800b0c0 <HAL_UART_Receive_DMA>
 80078ae:	bf00      	nop
 80078b0:	20000970 	.word	0x20000970
 80078b4:	20000714 	.word	0x20000714

080078b8 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 80078b8:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 80078ba:	4c07      	ldr	r4, [pc, #28]	; (80078d8 <HAL_UART_TxHalfCpltCallback+0x20>)
 80078bc:	4d07      	ldr	r5, [pc, #28]	; (80078dc <HAL_UART_TxHalfCpltCallback+0x24>)
 80078be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80078ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80078d2:	bc30      	pop	{r4, r5}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	200009b8 	.word	0x200009b8
 80078dc:	200009f8 	.word	0x200009f8

080078e0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80078e0:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80078e2:	4c11      	ldr	r4, [pc, #68]	; (8007928 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80078e4:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 80078e6:	2240      	movs	r2, #64	; 0x40
 80078e8:	2100      	movs	r1, #0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f005 fd48 	bl	800d380 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 80078f0:	4a0e      	ldr	r2, [pc, #56]	; (800792c <HAL_UART_TxCpltCallback+0x4c>)
 80078f2:	490f      	ldr	r1, [pc, #60]	; (8007930 <HAL_UART_TxCpltCallback+0x50>)
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <HAL_UART_TxCpltCallback+0x54>)
 80078f6:	680e      	ldr	r6, [r1, #0]
 80078f8:	6810      	ldr	r0, [r2, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b25b      	sxtb	r3, r3
 80078fe:	9304      	str	r3, [sp, #16]
 8007900:	f7f8 fdaa 	bl	8000458 <__aeabi_f2d>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4630      	mov	r0, r6
 800790a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800790e:	f7f8 fda3 	bl	8000458 <__aeabi_f2d>
 8007912:	4606      	mov	r6, r0
 8007914:	460f      	mov	r7, r1
 8007916:	4620      	mov	r0, r4
 8007918:	2120      	movs	r1, #32
 800791a:	e9cd 6700 	strd	r6, r7, [sp]
 800791e:	4a06      	ldr	r2, [pc, #24]	; (8007938 <HAL_UART_TxCpltCallback+0x58>)
 8007920:	f006 f996 	bl	800dc50 <sniprintf>
}
 8007924:	b006      	add	sp, #24
 8007926:	bdd0      	pop	{r4, r6, r7, pc}
 8007928:	200009f8 	.word	0x200009f8
 800792c:	200003e8 	.word	0x200003e8
 8007930:	20000a78 	.word	0x20000a78
 8007934:	200003f5 	.word	0x200003f5
 8007938:	08011738 	.word	0x08011738

0800793c <Error_Handler>:
 800793c:	b672      	cpsid	i
  while (1)
 800793e:	e7fe      	b.n	800793e <Error_Handler+0x2>

08007940 <HAL_MspInit>:
 8007940:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <HAL_MspInit+0x40>)
 8007942:	b084      	sub	sp, #16
 8007944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007946:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800794a:	625a      	str	r2, [r3, #36]	; 0x24
 800794c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800794e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007952:	9201      	str	r2, [sp, #4]
 8007954:	9a01      	ldr	r2, [sp, #4]
 8007956:	6a1a      	ldr	r2, [r3, #32]
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	621a      	str	r2, [r3, #32]
 800795e:	6a1a      	ldr	r2, [r3, #32]
 8007960:	f002 0201 	and.w	r2, r2, #1
 8007964:	9202      	str	r2, [sp, #8]
 8007966:	9a02      	ldr	r2, [sp, #8]
 8007968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800796a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800796e:	625a      	str	r2, [r3, #36]	; 0x24
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007976:	9303      	str	r3, [sp, #12]
 8007978:	9b03      	ldr	r3, [sp, #12]
 800797a:	b004      	add	sp, #16
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40023800 	.word	0x40023800

08007984 <HAL_ADC_MspInit>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	2400      	movs	r4, #0
 8007988:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <HAL_ADC_MspInit+0x9c>)
 800798a:	6802      	ldr	r2, [r0, #0]
 800798c:	b088      	sub	sp, #32
 800798e:	429a      	cmp	r2, r3
 8007990:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007994:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007998:	9406      	str	r4, [sp, #24]
 800799a:	d001      	beq.n	80079a0 <HAL_ADC_MspInit+0x1c>
 800799c:	b008      	add	sp, #32
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80079a4:	6a1a      	ldr	r2, [r3, #32]
 80079a6:	a902      	add	r1, sp, #8
 80079a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ac:	621a      	str	r2, [r3, #32]
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	4605      	mov	r5, r0
 80079b2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80079b6:	9200      	str	r2, [sp, #0]
 80079b8:	9a00      	ldr	r2, [sp, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	4e19      	ldr	r6, [pc, #100]	; (8007a24 <HAL_ADC_MspInit+0xa0>)
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	61da      	str	r2, [r3, #28]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	220f      	movs	r2, #15
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	2303      	movs	r3, #3
 80079d0:	9801      	ldr	r0, [sp, #4]
 80079d2:	4815      	ldr	r0, [pc, #84]	; (8007a28 <HAL_ADC_MspInit+0xa4>)
 80079d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079d8:	f001 f9b8 	bl	8008d4c <HAL_GPIO_Init>
 80079dc:	2380      	movs	r3, #128	; 0x80
 80079de:	4913      	ldr	r1, [pc, #76]	; (8007a2c <HAL_ADC_MspInit+0xa8>)
 80079e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e4:	e9c6 1400 	strd	r1, r4, [r6]
 80079e8:	60f3      	str	r3, [r6, #12]
 80079ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079ee:	2320      	movs	r3, #32
 80079f0:	4630      	mov	r0, r6
 80079f2:	60b4      	str	r4, [r6, #8]
 80079f4:	61f4      	str	r4, [r6, #28]
 80079f6:	6171      	str	r1, [r6, #20]
 80079f8:	6132      	str	r2, [r6, #16]
 80079fa:	61b3      	str	r3, [r6, #24]
 80079fc:	f000 fff2 	bl	80089e4 <HAL_DMA_Init>
 8007a00:	b958      	cbnz	r0, 8007a1a <HAL_ADC_MspInit+0x96>
 8007a02:	2200      	movs	r2, #0
 8007a04:	2012      	movs	r0, #18
 8007a06:	4611      	mov	r1, r2
 8007a08:	646e      	str	r6, [r5, #68]	; 0x44
 8007a0a:	6275      	str	r5, [r6, #36]	; 0x24
 8007a0c:	f000 feec 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007a10:	2012      	movs	r0, #18
 8007a12:	f000 ff27 	bl	8008864 <HAL_NVIC_EnableIRQ>
 8007a16:	b008      	add	sp, #32
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
 8007a1a:	f7ff ff8f 	bl	800793c <Error_Handler>
 8007a1e:	e7f0      	b.n	8007a02 <HAL_ADC_MspInit+0x7e>
 8007a20:	40012400 	.word	0x40012400
 8007a24:	2000046c 	.word	0x2000046c
 8007a28:	40020000 	.word	0x40020000
 8007a2c:	40026008 	.word	0x40026008

08007a30 <HAL_ADC_MspDeInit>:
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_ADC_MspDeInit+0x30>)
 8007a32:	6802      	ldr	r2, [r0, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d000      	beq.n	8007a3a <HAL_ADC_MspDeInit+0xa>
 8007a38:	4770      	bx	lr
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <HAL_ADC_MspDeInit+0x34>)
 8007a40:	210f      	movs	r1, #15
 8007a42:	6a13      	ldr	r3, [r2, #32]
 8007a44:	4808      	ldr	r0, [pc, #32]	; (8007a68 <HAL_ADC_MspDeInit+0x38>)
 8007a46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4a:	6213      	str	r3, [r2, #32]
 8007a4c:	f001 fa68 	bl	8008f20 <HAL_GPIO_DeInit>
 8007a50:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8007a52:	f000 ffff 	bl	8008a54 <HAL_DMA_DeInit>
 8007a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5a:	2012      	movs	r0, #18
 8007a5c:	f000 bf10 	b.w	8008880 <HAL_NVIC_DisableIRQ>
 8007a60:	40012400 	.word	0x40012400
 8007a64:	40023800 	.word	0x40023800
 8007a68:	40020000 	.word	0x40020000

08007a6c <HAL_DAC_MspInit>:
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	b530      	push	{r4, r5, lr}
 8007a70:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <HAL_DAC_MspInit+0x58>)
 8007a72:	6801      	ldr	r1, [r0, #0]
 8007a74:	b089      	sub	sp, #36	; 0x24
 8007a76:	4291      	cmp	r1, r2
 8007a78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	d001      	beq.n	8007a88 <HAL_DAC_MspInit+0x1c>
 8007a84:	b009      	add	sp, #36	; 0x24
 8007a86:	bd30      	pop	{r4, r5, pc}
 8007a88:	2430      	movs	r4, #48	; 0x30
 8007a8a:	2503      	movs	r5, #3
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <HAL_DAC_MspInit+0x5c>)
 8007a8e:	480f      	ldr	r0, [pc, #60]	; (8007acc <HAL_DAC_MspInit+0x60>)
 8007a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a92:	a902      	add	r1, sp, #8
 8007a94:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007a98:	625a      	str	r2, [r3, #36]	; 0x24
 8007a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a9c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8007aa0:	9200      	str	r2, [sp, #0]
 8007aa2:	9a00      	ldr	r2, [sp, #0]
 8007aa4:	69da      	ldr	r2, [r3, #28]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	61da      	str	r2, [r3, #28]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	f001 f947 	bl	8008d4c <HAL_GPIO_Init>
 8007abe:	b009      	add	sp, #36	; 0x24
 8007ac0:	bd30      	pop	{r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40007400 	.word	0x40007400
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40020000 	.word	0x40020000

08007ad0 <HAL_I2C_MspInit>:
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	b5d0      	push	{r4, r6, r7, lr}
 8007ad4:	4a16      	ldr	r2, [pc, #88]	; (8007b30 <HAL_I2C_MspInit+0x60>)
 8007ad6:	6801      	ldr	r1, [r0, #0]
 8007ad8:	b088      	sub	sp, #32
 8007ada:	4291      	cmp	r1, r2
 8007adc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ae0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007ae4:	9306      	str	r3, [sp, #24]
 8007ae6:	d001      	beq.n	8007aec <HAL_I2C_MspInit+0x1c>
 8007ae8:	b008      	add	sp, #32
 8007aea:	bdd0      	pop	{r4, r6, r7, pc}
 8007aec:	2003      	movs	r0, #3
 8007aee:	2204      	movs	r2, #4
 8007af0:	26c0      	movs	r6, #192	; 0xc0
 8007af2:	2712      	movs	r7, #18
 8007af4:	4c0f      	ldr	r4, [pc, #60]	; (8007b34 <HAL_I2C_MspInit+0x64>)
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	69e3      	ldr	r3, [r4, #28]
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	61e3      	str	r3, [r4, #28]
 8007b00:	69e3      	ldr	r3, [r4, #28]
 8007b02:	9005      	str	r0, [sp, #20]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	480b      	ldr	r0, [pc, #44]	; (8007b38 <HAL_I2C_MspInit+0x68>)
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b12:	9206      	str	r2, [sp, #24]
 8007b14:	f001 f91a 	bl	8008d4c <HAL_GPIO_Init>
 8007b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b1e:	6263      	str	r3, [r4, #36]	; 0x24
 8007b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	b008      	add	sp, #32
 8007b2c:	bdd0      	pop	{r4, r6, r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40005400 	.word	0x40005400
 8007b34:	40023800 	.word	0x40023800
 8007b38:	40020400 	.word	0x40020400

08007b3c <HAL_TIM_Base_MspInit>:
 8007b3c:	b500      	push	{lr}
 8007b3e:	6803      	ldr	r3, [r0, #0]
 8007b40:	b087      	sub	sp, #28
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b46:	d026      	beq.n	8007b96 <HAL_TIM_Base_MspInit+0x5a>
 8007b48:	4a44      	ldr	r2, [pc, #272]	; (8007c5c <HAL_TIM_Base_MspInit+0x120>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d039      	beq.n	8007bc2 <HAL_TIM_Base_MspInit+0x86>
 8007b4e:	4a44      	ldr	r2, [pc, #272]	; (8007c60 <HAL_TIM_Base_MspInit+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d04b      	beq.n	8007bec <HAL_TIM_Base_MspInit+0xb0>
 8007b54:	4a43      	ldr	r2, [pc, #268]	; (8007c64 <HAL_TIM_Base_MspInit+0x128>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d008      	beq.n	8007b6c <HAL_TIM_Base_MspInit+0x30>
 8007b5a:	4a43      	ldr	r2, [pc, #268]	; (8007c68 <HAL_TIM_Base_MspInit+0x12c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d05a      	beq.n	8007c16 <HAL_TIM_Base_MspInit+0xda>
 8007b60:	4a42      	ldr	r2, [pc, #264]	; (8007c6c <HAL_TIM_Base_MspInit+0x130>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d068      	beq.n	8007c38 <HAL_TIM_Base_MspInit+0xfc>
 8007b66:	b007      	add	sp, #28
 8007b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4b40      	ldr	r3, [pc, #256]	; (8007c70 <HAL_TIM_Base_MspInit+0x134>)
 8007b70:	2019      	movs	r0, #25
 8007b72:	6a19      	ldr	r1, [r3, #32]
 8007b74:	f041 0104 	orr.w	r1, r1, #4
 8007b78:	6219      	str	r1, [r3, #32]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	f003 0304 	and.w	r3, r3, #4
 8007b82:	9303      	str	r3, [sp, #12]
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	f000 fe2f 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007b8a:	2019      	movs	r0, #25
 8007b8c:	b007      	add	sp, #28
 8007b8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b92:	f000 be67 	b.w	8008864 <HAL_NVIC_EnableIRQ>
 8007b96:	2200      	movs	r2, #0
 8007b98:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8007b9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b9e:	201c      	movs	r0, #28
 8007ba0:	f041 0101 	orr.w	r1, r1, #1
 8007ba4:	6259      	str	r1, [r3, #36]	; 0x24
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	4611      	mov	r1, r2
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	f000 fe19 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007bb6:	201c      	movs	r0, #28
 8007bb8:	b007      	add	sp, #28
 8007bba:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bbe:	f000 be51 	b.w	8008864 <HAL_NVIC_EnableIRQ>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <HAL_TIM_Base_MspInit+0x134>)
 8007bc6:	201d      	movs	r0, #29
 8007bc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bca:	f041 0102 	orr.w	r1, r1, #2
 8007bce:	6259      	str	r1, [r3, #36]	; 0x24
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	f000 fe04 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007be0:	201d      	movs	r0, #29
 8007be2:	b007      	add	sp, #28
 8007be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be8:	f000 be3c 	b.w	8008864 <HAL_NVIC_EnableIRQ>
 8007bec:	2200      	movs	r2, #0
 8007bee:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <HAL_TIM_Base_MspInit+0x134>)
 8007bf0:	201e      	movs	r0, #30
 8007bf2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bf4:	f041 0104 	orr.w	r1, r1, #4
 8007bf8:	6259      	str	r1, [r3, #36]	; 0x24
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	9302      	str	r3, [sp, #8]
 8007c04:	9b02      	ldr	r3, [sp, #8]
 8007c06:	f000 fdef 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007c0a:	201e      	movs	r0, #30
 8007c0c:	b007      	add	sp, #28
 8007c0e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c12:	f000 be27 	b.w	8008864 <HAL_NVIC_EnableIRQ>
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <HAL_TIM_Base_MspInit+0x134>)
 8007c1a:	201a      	movs	r0, #26
 8007c1c:	6a19      	ldr	r1, [r3, #32]
 8007c1e:	f041 0108 	orr.w	r1, r1, #8
 8007c22:	6219      	str	r1, [r3, #32]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	4611      	mov	r1, r2
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	f000 fdda 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007c34:	201a      	movs	r0, #26
 8007c36:	e7a9      	b.n	8007b8c <HAL_TIM_Base_MspInit+0x50>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <HAL_TIM_Base_MspInit+0x134>)
 8007c3c:	201b      	movs	r0, #27
 8007c3e:	6a19      	ldr	r1, [r3, #32]
 8007c40:	f041 0110 	orr.w	r1, r1, #16
 8007c44:	6219      	str	r1, [r3, #32]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	9b05      	ldr	r3, [sp, #20]
 8007c52:	f000 fdc9 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007c56:	201b      	movs	r0, #27
 8007c58:	e798      	b.n	8007b8c <HAL_TIM_Base_MspInit+0x50>
 8007c5a:	bf00      	nop
 8007c5c:	40000400 	.word	0x40000400
 8007c60:	40000800 	.word	0x40000800
 8007c64:	40010800 	.word	0x40010800
 8007c68:	40010c00 	.word	0x40010c00
 8007c6c:	40011000 	.word	0x40011000
 8007c70:	40023800 	.word	0x40023800

08007c74 <HAL_UART_MspInit>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	2400      	movs	r4, #0
 8007c78:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <HAL_UART_MspInit+0xcc>)
 8007c7a:	6802      	ldr	r2, [r0, #0]
 8007c7c:	b088      	sub	sp, #32
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007c84:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007c88:	9406      	str	r4, [sp, #24]
 8007c8a:	d001      	beq.n	8007c90 <HAL_UART_MspInit+0x1c>
 8007c8c:	b008      	add	sp, #32
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007c94:	6a1a      	ldr	r2, [r3, #32]
 8007c96:	4605      	mov	r5, r0
 8007c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c9c:	621a      	str	r2, [r3, #32]
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	a902      	add	r1, sp, #8
 8007ca2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007ca6:	9200      	str	r2, [sp, #0]
 8007ca8:	9a00      	ldr	r2, [sp, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	4e25      	ldr	r6, [pc, #148]	; (8007d44 <HAL_UART_MspInit+0xd0>)
 8007cae:	f042 0201 	orr.w	r2, r2, #1
 8007cb2:	61da      	str	r2, [r3, #28]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	9801      	ldr	r0, [sp, #4]
 8007cc4:	2003      	movs	r0, #3
 8007cc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cca:	2307      	movs	r3, #7
 8007ccc:	9005      	str	r0, [sp, #20]
 8007cce:	481e      	ldr	r0, [pc, #120]	; (8007d48 <HAL_UART_MspInit+0xd4>)
 8007cd0:	9306      	str	r3, [sp, #24]
 8007cd2:	f001 f83b 	bl	8008d4c <HAL_GPIO_Init>
 8007cd6:	2380      	movs	r3, #128	; 0x80
 8007cd8:	4a1c      	ldr	r2, [pc, #112]	; (8007d4c <HAL_UART_MspInit+0xd8>)
 8007cda:	4630      	mov	r0, r6
 8007cdc:	e9c6 2400 	strd	r2, r4, [r6]
 8007ce0:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8007ce4:	e9c6 4406 	strd	r4, r4, [r6, #24]
 8007ce8:	60b4      	str	r4, [r6, #8]
 8007cea:	60f3      	str	r3, [r6, #12]
 8007cec:	f000 fe7a 	bl	80089e4 <HAL_DMA_Init>
 8007cf0:	b9f8      	cbnz	r0, 8007d32 <HAL_UART_MspInit+0xbe>
 8007cf2:	2210      	movs	r2, #16
 8007cf4:	4c16      	ldr	r4, [pc, #88]	; (8007d50 <HAL_UART_MspInit+0xdc>)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2180      	movs	r1, #128	; 0x80
 8007cfa:	6062      	str	r2, [r4, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8007d02:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8007d06:	61e3      	str	r3, [r4, #28]
 8007d08:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <HAL_UART_MspInit+0xe0>)
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	63ae      	str	r6, [r5, #56]	; 0x38
 8007d0e:	6275      	str	r5, [r6, #36]	; 0x24
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	61a2      	str	r2, [r4, #24]
 8007d14:	f000 fe66 	bl	80089e4 <HAL_DMA_Init>
 8007d18:	b970      	cbnz	r0, 8007d38 <HAL_UART_MspInit+0xc4>
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2025      	movs	r0, #37	; 0x25
 8007d1e:	4611      	mov	r1, r2
 8007d20:	636c      	str	r4, [r5, #52]	; 0x34
 8007d22:	6265      	str	r5, [r4, #36]	; 0x24
 8007d24:	f000 fd60 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007d28:	2025      	movs	r0, #37	; 0x25
 8007d2a:	f000 fd9b 	bl	8008864 <HAL_NVIC_EnableIRQ>
 8007d2e:	b008      	add	sp, #32
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
 8007d32:	f7ff fe03 	bl	800793c <Error_Handler>
 8007d36:	e7dc      	b.n	8007cf2 <HAL_UART_MspInit+0x7e>
 8007d38:	f7ff fe00 	bl	800793c <Error_Handler>
 8007d3c:	e7ed      	b.n	8007d1a <HAL_UART_MspInit+0xa6>
 8007d3e:	bf00      	nop
 8007d40:	40013800 	.word	0x40013800
 8007d44:	200004b0 	.word	0x200004b0
 8007d48:	40020000 	.word	0x40020000
 8007d4c:	40026058 	.word	0x40026058
 8007d50:	200004f4 	.word	0x200004f4
 8007d54:	40026044 	.word	0x40026044

08007d58 <NMI_Handler>:
 8007d58:	e7fe      	b.n	8007d58 <NMI_Handler>
 8007d5a:	bf00      	nop

08007d5c <HardFault_Handler>:
 8007d5c:	e7fe      	b.n	8007d5c <HardFault_Handler>
 8007d5e:	bf00      	nop

08007d60 <MemManage_Handler>:
 8007d60:	e7fe      	b.n	8007d60 <MemManage_Handler>
 8007d62:	bf00      	nop

08007d64 <BusFault_Handler>:
 8007d64:	e7fe      	b.n	8007d64 <BusFault_Handler>
 8007d66:	bf00      	nop

08007d68 <UsageFault_Handler>:
 8007d68:	e7fe      	b.n	8007d68 <UsageFault_Handler>
 8007d6a:	bf00      	nop

08007d6c <SVC_Handler>:
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop

08007d70 <DebugMon_Handler>:
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop

08007d74 <PendSV_Handler>:
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop

08007d78 <SysTick_Handler>:
 8007d78:	f000 b926 	b.w	8007fc8 <HAL_IncTick>

08007d7c <EXTI0_IRQHandler>:
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	f001 b975 	b.w	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007d82:	bf00      	nop

08007d84 <EXTI2_IRQHandler>:
 8007d84:	2004      	movs	r0, #4
 8007d86:	f001 b971 	b.w	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007d8a:	bf00      	nop

08007d8c <DMA1_Channel1_IRQHandler>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <DMA1_Channel1_IRQHandler+0x8>)
 8007d8e:	f000 bf29 	b.w	8008be4 <HAL_DMA_IRQHandler>
 8007d92:	bf00      	nop
 8007d94:	2000046c 	.word	0x2000046c

08007d98 <DMA1_Channel4_IRQHandler>:
 8007d98:	4801      	ldr	r0, [pc, #4]	; (8007da0 <DMA1_Channel4_IRQHandler+0x8>)
 8007d9a:	f000 bf23 	b.w	8008be4 <HAL_DMA_IRQHandler>
 8007d9e:	bf00      	nop
 8007da0:	200004f4 	.word	0x200004f4

08007da4 <DMA1_Channel5_IRQHandler>:
 8007da4:	4801      	ldr	r0, [pc, #4]	; (8007dac <DMA1_Channel5_IRQHandler+0x8>)
 8007da6:	f000 bf1d 	b.w	8008be4 <HAL_DMA_IRQHandler>
 8007daa:	bf00      	nop
 8007dac:	200004b0 	.word	0x200004b0

08007db0 <ADC1_IRQHandler>:
 8007db0:	4801      	ldr	r0, [pc, #4]	; (8007db8 <ADC1_IRQHandler+0x8>)
 8007db2:	f000 bad1 	b.w	8008358 <HAL_ADC_IRQHandler>
 8007db6:	bf00      	nop
 8007db8:	20000404 	.word	0x20000404

08007dbc <USB_LP_IRQHandler>:
 8007dbc:	4801      	ldr	r0, [pc, #4]	; (8007dc4 <USB_LP_IRQHandler+0x8>)
 8007dbe:	f001 bc3b 	b.w	8009638 <HAL_PCD_IRQHandler>
 8007dc2:	bf00      	nop
 8007dc4:	200016fc 	.word	0x200016fc

08007dc8 <TIM9_IRQHandler>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <TIM9_IRQHandler+0x8>)
 8007dca:	f002 bff5 	b.w	800adb8 <HAL_TIM_IRQHandler>
 8007dce:	bf00      	nop
 8007dd0:	200006d4 	.word	0x200006d4

08007dd4 <TIM10_IRQHandler>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <TIM10_IRQHandler+0x8>)
 8007dd6:	f002 bfef 	b.w	800adb8 <HAL_TIM_IRQHandler>
 8007dda:	bf00      	nop
 8007ddc:	20000594 	.word	0x20000594

08007de0 <TIM11_IRQHandler>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <TIM11_IRQHandler+0x8>)
 8007de2:	f002 bfe9 	b.w	800adb8 <HAL_TIM_IRQHandler>
 8007de6:	bf00      	nop
 8007de8:	200005d4 	.word	0x200005d4

08007dec <TIM2_IRQHandler>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <TIM2_IRQHandler+0x8>)
 8007dee:	f002 bfe3 	b.w	800adb8 <HAL_TIM_IRQHandler>
 8007df2:	bf00      	nop
 8007df4:	20000614 	.word	0x20000614

08007df8 <TIM3_IRQHandler>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <TIM3_IRQHandler+0x8>)
 8007dfa:	f002 bfdd 	b.w	800adb8 <HAL_TIM_IRQHandler>
 8007dfe:	bf00      	nop
 8007e00:	20000654 	.word	0x20000654

08007e04 <TIM4_IRQHandler>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <TIM4_IRQHandler+0x8>)
 8007e06:	f002 bfd7 	b.w	800adb8 <HAL_TIM_IRQHandler>
 8007e0a:	bf00      	nop
 8007e0c:	20000694 	.word	0x20000694

08007e10 <USART1_IRQHandler>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <USART1_IRQHandler+0x8>)
 8007e12:	f003 ba9f 	b.w	800b354 <HAL_UART_IRQHandler>
 8007e16:	bf00      	nop
 8007e18:	20000714 	.word	0x20000714

08007e1c <EXTI15_10_IRQHandler>:
 8007e1c:	b508      	push	{r3, lr}
 8007e1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e22:	f001 f923 	bl	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007e26:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e2a:	f001 f91f 	bl	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007e2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e32:	f001 f91b 	bl	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007e36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e3a:	f001 f917 	bl	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007e46:	f001 b911 	b.w	800906c <HAL_GPIO_EXTI_IRQHandler>
 8007e4a:	bf00      	nop

08007e4c <_getpid>:
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	4770      	bx	lr

08007e50 <_kill>:
 8007e50:	b508      	push	{r3, lr}
 8007e52:	f005 fa6b 	bl	800d32c <__errno>
 8007e56:	2216      	movs	r2, #22
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	bd08      	pop	{r3, pc}
 8007e62:	bf00      	nop

08007e64 <_exit>:
 8007e64:	b508      	push	{r3, lr}
 8007e66:	f005 fa61 	bl	800d32c <__errno>
 8007e6a:	2316      	movs	r3, #22
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	e7fe      	b.n	8007e6e <_exit+0xa>

08007e70 <_read>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	1e16      	subs	r6, r2, #0
 8007e74:	dd07      	ble.n	8007e86 <_read+0x16>
 8007e76:	460c      	mov	r4, r1
 8007e78:	198d      	adds	r5, r1, r6
 8007e7a:	f3af 8000 	nop.w
 8007e7e:	f804 0b01 	strb.w	r0, [r4], #1
 8007e82:	42a5      	cmp	r5, r4
 8007e84:	d1f9      	bne.n	8007e7a <_read+0xa>
 8007e86:	4630      	mov	r0, r6
 8007e88:	bd70      	pop	{r4, r5, r6, pc}
 8007e8a:	bf00      	nop

08007e8c <_write>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	1e16      	subs	r6, r2, #0
 8007e90:	dd07      	ble.n	8007ea2 <_write+0x16>
 8007e92:	460c      	mov	r4, r1
 8007e94:	198d      	adds	r5, r1, r6
 8007e96:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007e9a:	f3af 8000 	nop.w
 8007e9e:	42ac      	cmp	r4, r5
 8007ea0:	d1f9      	bne.n	8007e96 <_write+0xa>
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	bf00      	nop

08007ea8 <_close>:
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <_fstat>:
 8007eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	604b      	str	r3, [r1, #4]
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop

08007ebc <_isatty>:
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	4770      	bx	lr

08007ec0 <_lseek>:
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	4770      	bx	lr

08007ec4 <_sbrk>:
 8007ec4:	490d      	ldr	r1, [pc, #52]	; (8007efc <_sbrk+0x38>)
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	4a0d      	ldr	r2, [pc, #52]	; (8007f00 <_sbrk+0x3c>)
 8007ecc:	4c0d      	ldr	r4, [pc, #52]	; (8007f04 <_sbrk+0x40>)
 8007ece:	6808      	ldr	r0, [r1, #0]
 8007ed0:	1b12      	subs	r2, r2, r4
 8007ed2:	b120      	cbz	r0, 8007ede <_sbrk+0x1a>
 8007ed4:	4403      	add	r3, r0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d807      	bhi.n	8007eea <_sbrk+0x26>
 8007eda:	600b      	str	r3, [r1, #0]
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	4c0a      	ldr	r4, [pc, #40]	; (8007f08 <_sbrk+0x44>)
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4403      	add	r3, r0
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	600c      	str	r4, [r1, #0]
 8007ee8:	d9f7      	bls.n	8007eda <_sbrk+0x16>
 8007eea:	f005 fa1f 	bl	800d32c <__errno>
 8007eee:	220c      	movs	r2, #12
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	bf00      	nop
 8007efc:	20000a84 	.word	0x20000a84
 8007f00:	20008000 	.word	0x20008000
 8007f04:	00002000 	.word	0x00002000
 8007f08:	20001c18 	.word	0x20001c18

08007f0c <SystemInit>:
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <Reset_Handler>:
 8007f10:	480c      	ldr	r0, [pc, #48]	; (8007f44 <LoopFillZerobss+0x12>)
 8007f12:	490d      	ldr	r1, [pc, #52]	; (8007f48 <LoopFillZerobss+0x16>)
 8007f14:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <LoopFillZerobss+0x1a>)
 8007f16:	2300      	movs	r3, #0
 8007f18:	e002      	b.n	8007f20 <LoopCopyDataInit>

08007f1a <CopyDataInit>:
 8007f1a:	58d4      	ldr	r4, [r2, r3]
 8007f1c:	50c4      	str	r4, [r0, r3]
 8007f1e:	3304      	adds	r3, #4

08007f20 <LoopCopyDataInit>:
 8007f20:	18c4      	adds	r4, r0, r3
 8007f22:	428c      	cmp	r4, r1
 8007f24:	d3f9      	bcc.n	8007f1a <CopyDataInit>
 8007f26:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <LoopFillZerobss+0x1e>)
 8007f28:	4c0a      	ldr	r4, [pc, #40]	; (8007f54 <LoopFillZerobss+0x22>)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e001      	b.n	8007f32 <LoopFillZerobss>

08007f2e <FillZerobss>:
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	3204      	adds	r2, #4

08007f32 <LoopFillZerobss>:
 8007f32:	42a2      	cmp	r2, r4
 8007f34:	d3fb      	bcc.n	8007f2e <FillZerobss>
 8007f36:	f7ff ffe9 	bl	8007f0c <SystemInit>
 8007f3a:	f005 f9fd 	bl	800d338 <__libc_init_array>
 8007f3e:	f7f9 ff57 	bl	8001df0 <main>
 8007f42:	4770      	bx	lr
 8007f44:	20000000 	.word	0x20000000
 8007f48:	20000370 	.word	0x20000370
 8007f4c:	08011f4c 	.word	0x08011f4c
 8007f50:	20000370 	.word	0x20000370
 8007f54:	20001c18 	.word	0x20001c18

08007f58 <COMP_IRQHandler>:
 8007f58:	e7fe      	b.n	8007f58 <COMP_IRQHandler>
	...

08007f5c <HAL_InitTick>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <HAL_InitTick+0x40>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	b90b      	cbnz	r3, 8007f68 <HAL_InitTick+0xc>
 8007f64:	2001      	movs	r0, #1
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f70:	490b      	ldr	r1, [pc, #44]	; (8007fa0 <HAL_InitTick+0x44>)
 8007f72:	4605      	mov	r5, r0
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	fbb0 f0f3 	udiv	r0, r0, r3
 8007f7a:	f000 fc95 	bl	80088a8 <HAL_SYSTICK_Config>
 8007f7e:	4604      	mov	r4, r0
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d1ef      	bne.n	8007f64 <HAL_InitTick+0x8>
 8007f84:	2d0f      	cmp	r5, #15
 8007f86:	d8ed      	bhi.n	8007f64 <HAL_InitTick+0x8>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	f000 fc2a 	bl	80087e8 <HAL_NVIC_SetPriority>
 8007f94:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <HAL_InitTick+0x48>)
 8007f96:	4620      	mov	r0, r4
 8007f98:	601d      	str	r5, [r3, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20000024 	.word	0x20000024
 8007fa0:	20000020 	.word	0x20000020
 8007fa4:	20000028 	.word	0x20000028

08007fa8 <HAL_Init>:
 8007fa8:	2003      	movs	r0, #3
 8007faa:	b510      	push	{r4, lr}
 8007fac:	f000 fc0a 	bl	80087c4 <HAL_NVIC_SetPriorityGrouping>
 8007fb0:	200f      	movs	r0, #15
 8007fb2:	f7ff ffd3 	bl	8007f5c <HAL_InitTick>
 8007fb6:	b110      	cbz	r0, 8007fbe <HAL_Init+0x16>
 8007fb8:	2401      	movs	r4, #1
 8007fba:	4620      	mov	r0, r4
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	f7ff fcbe 	bl	8007940 <HAL_MspInit>
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	bd10      	pop	{r4, pc}

08007fc8 <HAL_IncTick>:
 8007fc8:	4a03      	ldr	r2, [pc, #12]	; (8007fd8 <HAL_IncTick+0x10>)
 8007fca:	4904      	ldr	r1, [pc, #16]	; (8007fdc <HAL_IncTick+0x14>)
 8007fcc:	6813      	ldr	r3, [r2, #0]
 8007fce:	6809      	ldr	r1, [r1, #0]
 8007fd0:	440b      	add	r3, r1
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000a88 	.word	0x20000a88
 8007fdc:	20000024 	.word	0x20000024

08007fe0 <HAL_GetTick>:
 8007fe0:	4b01      	ldr	r3, [pc, #4]	; (8007fe8 <HAL_GetTick+0x8>)
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	20000a88 	.word	0x20000a88

08007fec <HAL_Delay>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4604      	mov	r4, r0
 8007ff0:	f7ff fff6 	bl	8007fe0 <HAL_GetTick>
 8007ff4:	1c63      	adds	r3, r4, #1
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	d002      	beq.n	8008000 <HAL_Delay+0x14>
 8007ffa:	4b04      	ldr	r3, [pc, #16]	; (800800c <HAL_Delay+0x20>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	441c      	add	r4, r3
 8008000:	f7ff ffee 	bl	8007fe0 <HAL_GetTick>
 8008004:	1b40      	subs	r0, r0, r5
 8008006:	42a0      	cmp	r0, r4
 8008008:	d3fa      	bcc.n	8008000 <HAL_Delay+0x14>
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	20000024 	.word	0x20000024

08008010 <HAL_ADC_Init>:
 8008010:	2800      	cmp	r0, #0
 8008012:	f000 80a9 	beq.w	8008168 <HAL_ADC_Init+0x158>
 8008016:	b530      	push	{r4, r5, lr}
 8008018:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800801a:	4604      	mov	r4, r0
 800801c:	b083      	sub	sp, #12
 800801e:	2b00      	cmp	r3, #0
 8008020:	d078      	beq.n	8008114 <HAL_ADC_Init+0x104>
 8008022:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008024:	06d8      	lsls	r0, r3, #27
 8008026:	d453      	bmi.n	80080d0 <HAL_ADC_Init+0xc0>
 8008028:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800802a:	4a5c      	ldr	r2, [pc, #368]	; (800819c <HAL_ADC_Init+0x18c>)
 800802c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	f043 0302 	orr.w	r3, r3, #2
 8008038:	64e3      	str	r3, [r4, #76]	; 0x4c
 800803a:	6853      	ldr	r3, [r2, #4]
 800803c:	6861      	ldr	r1, [r4, #4]
 800803e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008042:	430b      	orrs	r3, r1
 8008044:	6053      	str	r3, [r2, #4]
 8008046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800804a:	fa91 f1a1 	rbit	r1, r1
 800804e:	2302      	movs	r3, #2
 8008050:	fab1 f181 	clz	r1, r1
 8008054:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8008058:	fa93 f3a3 	rbit	r3, r3
 800805c:	fab3 f383 	clz	r3, r3
 8008060:	6965      	ldr	r5, [r4, #20]
 8008062:	68e2      	ldr	r2, [r4, #12]
 8008064:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 8008068:	432a      	orrs	r2, r5
 800806a:	6a25      	ldr	r5, [r4, #32]
 800806c:	fa0c f101 	lsl.w	r1, ip, r1
 8008070:	432a      	orrs	r2, r5
 8008072:	430a      	orrs	r2, r1
 8008074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008076:	fa00 f303 	lsl.w	r3, r0, r3
 800807a:	2910      	cmp	r1, #16
 800807c:	ea43 0302 	orr.w	r3, r3, r2
 8008080:	d002      	beq.n	8008088 <HAL_ADC_Init+0x78>
 8008082:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008084:	4311      	orrs	r1, r2
 8008086:	430b      	orrs	r3, r1
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	6811      	ldr	r1, [r2, #0]
 800808c:	0649      	lsls	r1, r1, #25
 800808e:	d551      	bpl.n	8008134 <HAL_ADC_Init+0x124>
 8008090:	6925      	ldr	r5, [r4, #16]
 8008092:	6890      	ldr	r0, [r2, #8]
 8008094:	4942      	ldr	r1, [pc, #264]	; (80081a0 <HAL_ADC_Init+0x190>)
 8008096:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800809a:	ea01 0100 	and.w	r1, r1, r0
 800809e:	ea41 0103 	orr.w	r1, r1, r3
 80080a2:	6091      	str	r1, [r2, #8]
 80080a4:	d017      	beq.n	80080d6 <HAL_ADC_Init+0xc6>
 80080a6:	2d01      	cmp	r5, #1
 80080a8:	d015      	beq.n	80080d6 <HAL_ADC_Init+0xc6>
 80080aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80080ac:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80080b0:	6311      	str	r1, [r2, #48]	; 0x30
 80080b2:	6891      	ldr	r1, [r2, #8]
 80080b4:	4a3b      	ldr	r2, [pc, #236]	; (80081a4 <HAL_ADC_Init+0x194>)
 80080b6:	400a      	ands	r2, r1
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d11f      	bne.n	80080fc <HAL_ADC_Init+0xec>
 80080bc:	2000      	movs	r0, #0
 80080be:	6520      	str	r0, [r4, #80]	; 0x50
 80080c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	f043 0301 	orr.w	r3, r3, #1
 80080ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 80080cc:	b003      	add	sp, #12
 80080ce:	bd30      	pop	{r4, r5, pc}
 80080d0:	2001      	movs	r0, #1
 80080d2:	b003      	add	sp, #12
 80080d4:	bd30      	pop	{r4, r5, pc}
 80080d6:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80080da:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80080dc:	fa91 f1a1 	rbit	r1, r1
 80080e0:	fab1 f081 	clz	r0, r1
 80080e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80080e6:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80080ea:	3901      	subs	r1, #1
 80080ec:	4081      	lsls	r1, r0
 80080ee:	4329      	orrs	r1, r5
 80080f0:	6311      	str	r1, [r2, #48]	; 0x30
 80080f2:	6891      	ldr	r1, [r2, #8]
 80080f4:	4a2b      	ldr	r2, [pc, #172]	; (80081a4 <HAL_ADC_Init+0x194>)
 80080f6:	400a      	ands	r2, r1
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d0df      	beq.n	80080bc <HAL_ADC_Init+0xac>
 80080fc:	2001      	movs	r0, #1
 80080fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008100:	f023 0312 	bic.w	r3, r3, #18
 8008104:	f043 0310 	orr.w	r3, r3, #16
 8008108:	64e3      	str	r3, [r4, #76]	; 0x4c
 800810a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800810c:	4303      	orrs	r3, r0
 800810e:	6523      	str	r3, [r4, #80]	; 0x50
 8008110:	b003      	add	sp, #12
 8008112:	bd30      	pop	{r4, r5, pc}
 8008114:	4a24      	ldr	r2, [pc, #144]	; (80081a8 <HAL_ADC_Init+0x198>)
 8008116:	6503      	str	r3, [r0, #80]	; 0x50
 8008118:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 800811c:	6a13      	ldr	r3, [r2, #32]
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	6213      	str	r3, [r2, #32]
 8008124:	6a13      	ldr	r3, [r2, #32]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	f7ff fc29 	bl	8007984 <HAL_ADC_MspInit>
 8008132:	e776      	b.n	8008022 <HAL_ADC_Init+0x12>
 8008134:	69a1      	ldr	r1, [r4, #24]
 8008136:	68a5      	ldr	r5, [r4, #8]
 8008138:	430b      	orrs	r3, r1
 800813a:	69e1      	ldr	r1, [r4, #28]
 800813c:	ea45 0c01 	orr.w	ip, r5, r1
 8008140:	6925      	ldr	r5, [r4, #16]
 8008142:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008146:	d00c      	beq.n	8008162 <HAL_ADC_Init+0x152>
 8008148:	2d01      	cmp	r5, #1
 800814a:	d00a      	beq.n	8008162 <HAL_ADC_Init+0x152>
 800814c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8008150:	2901      	cmp	r1, #1
 8008152:	d00b      	beq.n	800816c <HAL_ADC_Init+0x15c>
 8008154:	6850      	ldr	r0, [r2, #4]
 8008156:	4915      	ldr	r1, [pc, #84]	; (80081ac <HAL_ADC_Init+0x19c>)
 8008158:	4001      	ands	r1, r0
 800815a:	ea41 010c 	orr.w	r1, r1, ip
 800815e:	6051      	str	r1, [r2, #4]
 8008160:	e797      	b.n	8008092 <HAL_ADC_Init+0x82>
 8008162:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8008166:	e7f1      	b.n	800814c <HAL_ADC_Init+0x13c>
 8008168:	2001      	movs	r0, #1
 800816a:	4770      	bx	lr
 800816c:	b968      	cbnz	r0, 800818a <HAL_ADC_Init+0x17a>
 800816e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8008172:	fa91 f1a1 	rbit	r1, r1
 8008176:	fab1 f081 	clz	r0, r1
 800817a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800817c:	3901      	subs	r1, #1
 800817e:	4081      	lsls	r1, r0
 8008180:	ea41 010c 	orr.w	r1, r1, ip
 8008184:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 8008188:	e7e4      	b.n	8008154 <HAL_ADC_Init+0x144>
 800818a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800818c:	f041 0120 	orr.w	r1, r1, #32
 8008190:	64e1      	str	r1, [r4, #76]	; 0x4c
 8008192:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008194:	f041 0101 	orr.w	r1, r1, #1
 8008198:	6521      	str	r1, [r4, #80]	; 0x50
 800819a:	e7db      	b.n	8008154 <HAL_ADC_Init+0x144>
 800819c:	40012700 	.word	0x40012700
 80081a0:	c0fff18d 	.word	0xc0fff18d
 80081a4:	bf80fffe 	.word	0xbf80fffe
 80081a8:	40023800 	.word	0x40023800
 80081ac:	fcfc16ff 	.word	0xfcfc16ff

080081b0 <HAL_ADC_DeInit>:
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d075      	beq.n	80082a0 <HAL_ADC_DeInit+0xf0>
 80081b4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80081b6:	b538      	push	{r3, r4, r5, lr}
 80081b8:	f042 0202 	orr.w	r2, r2, #2
 80081bc:	6803      	ldr	r3, [r0, #0]
 80081be:	64c2      	str	r2, [r0, #76]	; 0x4c
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4604      	mov	r4, r0
 80081c4:	0655      	lsls	r5, r2, #25
 80081c6:	d453      	bmi.n	8008270 <HAL_ADC_DeInit+0xc0>
 80081c8:	f06f 001f 	mvn.w	r0, #31
 80081cc:	6018      	str	r0, [r3, #0]
 80081ce:	6858      	ldr	r0, [r3, #4]
 80081d0:	4939      	ldr	r1, [pc, #228]	; (80082b8 <HAL_ADC_DeInit+0x108>)
 80081d2:	4a3a      	ldr	r2, [pc, #232]	; (80082bc <HAL_ADC_DeInit+0x10c>)
 80081d4:	4001      	ands	r1, r0
 80081d6:	6059      	str	r1, [r3, #4]
 80081d8:	6899      	ldr	r1, [r3, #8]
 80081da:	400a      	ands	r2, r1
 80081dc:	609a      	str	r2, [r3, #8]
 80081de:	bf00      	nop
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	4a37      	ldr	r2, [pc, #220]	; (80082c0 <HAL_ADC_DeInit+0x110>)
 80081e4:	68d9      	ldr	r1, [r3, #12]
 80081e6:	4837      	ldr	r0, [pc, #220]	; (80082c4 <HAL_ADC_DeInit+0x114>)
 80081e8:	0d49      	lsrs	r1, r1, #21
 80081ea:	0549      	lsls	r1, r1, #21
 80081ec:	60d9      	str	r1, [r3, #12]
 80081ee:	6919      	ldr	r1, [r3, #16]
 80081f0:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80081f4:	6119      	str	r1, [r3, #16]
 80081f6:	6959      	ldr	r1, [r3, #20]
 80081f8:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80081fc:	6159      	str	r1, [r3, #20]
 80081fe:	6999      	ldr	r1, [r3, #24]
 8008200:	4011      	ands	r1, r2
 8008202:	6199      	str	r1, [r3, #24]
 8008204:	69d9      	ldr	r1, [r3, #28]
 8008206:	4011      	ands	r1, r2
 8008208:	61d9      	str	r1, [r3, #28]
 800820a:	6a19      	ldr	r1, [r3, #32]
 800820c:	4011      	ands	r1, r2
 800820e:	6219      	str	r1, [r3, #32]
 8008210:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008212:	4011      	ands	r1, r2
 8008214:	6259      	str	r1, [r3, #36]	; 0x24
 8008216:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008218:	4011      	ands	r1, r2
 800821a:	6299      	str	r1, [r3, #40]	; 0x28
 800821c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800821e:	400a      	ands	r2, r1
 8008220:	62da      	str	r2, [r3, #44]	; 0x2c
 8008222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008224:	4928      	ldr	r1, [pc, #160]	; (80082c8 <HAL_ADC_DeInit+0x118>)
 8008226:	4010      	ands	r0, r2
 8008228:	6318      	str	r0, [r3, #48]	; 0x30
 800822a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800822c:	4620      	mov	r0, r4
 800822e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008232:	635a      	str	r2, [r3, #52]	; 0x34
 8008234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008236:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
 800823c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800823e:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8008242:	63da      	str	r2, [r3, #60]	; 0x3c
 8008244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008246:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800824a:	641a      	str	r2, [r3, #64]	; 0x40
 800824c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800824e:	0d92      	lsrs	r2, r2, #22
 8008250:	0592      	lsls	r2, r2, #22
 8008252:	645a      	str	r2, [r3, #68]	; 0x44
 8008254:	684b      	ldr	r3, [r1, #4]
 8008256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800825a:	604b      	str	r3, [r1, #4]
 800825c:	f7ff fbe8 	bl	8007a30 <HAL_ADC_MspDeInit>
 8008260:	2300      	movs	r3, #0
 8008262:	4618      	mov	r0, r3
 8008264:	6523      	str	r3, [r4, #80]	; 0x50
 8008266:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008268:	2300      	movs	r3, #0
 800826a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	f7ff feb2 	bl	8007fe0 <HAL_GetTick>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	4605      	mov	r5, r0
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	0650      	lsls	r0, r2, #25
 8008284:	d5a0      	bpl.n	80081c8 <HAL_ADC_DeInit+0x18>
 8008286:	f7ff feab 	bl	8007fe0 <HAL_GetTick>
 800828a:	1b40      	subs	r0, r0, r5
 800828c:	2802      	cmp	r0, #2
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	d902      	bls.n	8008298 <HAL_ADC_DeInit+0xe8>
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	0651      	lsls	r1, r2, #25
 8008296:	d405      	bmi.n	80082a4 <HAL_ADC_DeInit+0xf4>
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	0652      	lsls	r2, r2, #25
 800829c:	d4f3      	bmi.n	8008286 <HAL_ADC_DeInit+0xd6>
 800829e:	e793      	b.n	80081c8 <HAL_ADC_DeInit+0x18>
 80082a0:	2001      	movs	r0, #1
 80082a2:	4770      	bx	lr
 80082a4:	2001      	movs	r0, #1
 80082a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80082a8:	f043 0310 	orr.w	r3, r3, #16
 80082ac:	64e3      	str	r3, [r4, #76]	; 0x4c
 80082ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80082b0:	4303      	orrs	r3, r0
 80082b2:	6523      	str	r3, [r4, #80]	; 0x50
 80082b4:	e7d8      	b.n	8008268 <HAL_ADC_DeInit+0xb8>
 80082b6:	bf00      	nop
 80082b8:	f83c0000 	.word	0xf83c0000
 80082bc:	8080f08c 	.word	0x8080f08c
 80082c0:	fffff000 	.word	0xfffff000
 80082c4:	fe0f8000 	.word	0xfe0f8000
 80082c8:	40012700 	.word	0x40012700

080082cc <ADC_DMAConvCplt>:
 80082cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80082ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082d0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80082d4:	d126      	bne.n	8008324 <ADC_DMAConvCplt+0x58>
 80082d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082d8:	6819      	ldr	r1, [r3, #0]
 80082da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082de:	b510      	push	{r4, lr}
 80082e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80082e2:	688a      	ldr	r2, [r1, #8]
 80082e4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80082e8:	d118      	bne.n	800831c <ADC_DMAConvCplt+0x50>
 80082ea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80082ee:	b9aa      	cbnz	r2, 800831c <ADC_DMAConvCplt+0x50>
 80082f0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80082f2:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80082f6:	d002      	beq.n	80082fe <ADC_DMAConvCplt+0x32>
 80082f8:	688a      	ldr	r2, [r1, #8]
 80082fa:	0550      	lsls	r0, r2, #21
 80082fc:	d40e      	bmi.n	800831c <ADC_DMAConvCplt+0x50>
 80082fe:	684a      	ldr	r2, [r1, #4]
 8008300:	f022 0220 	bic.w	r2, r2, #32
 8008304:	604a      	str	r2, [r1, #4]
 8008306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800830c:	64da      	str	r2, [r3, #76]	; 0x4c
 800830e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008310:	04d2      	lsls	r2, r2, #19
 8008312:	d403      	bmi.n	800831c <ADC_DMAConvCplt+0x50>
 8008314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	64da      	str	r2, [r3, #76]	; 0x4c
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff f989 	bl	8007634 <HAL_ADC_ConvCpltCallback>
 8008322:	bd10      	pop	{r4, pc}
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	4718      	bx	r3
 800832a:	bf00      	nop

0800832c <ADC_DMAHalfConvCplt>:
 800832c:	b508      	push	{r3, lr}
 800832e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008330:	f7ff f972 	bl	8007618 <HAL_ADC_ConvHalfCpltCallback>
 8008334:	bd08      	pop	{r3, pc}
 8008336:	bf00      	nop

08008338 <HAL_ADC_ErrorCallback>:
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <ADC_DMAError>:
 800833c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800833e:	b508      	push	{r3, lr}
 8008340:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008346:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008348:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800834a:	f043 0304 	orr.w	r3, r3, #4
 800834e:	6503      	str	r3, [r0, #80]	; 0x50
 8008350:	f7ff fff2 	bl	8008338 <HAL_ADC_ErrorCallback>
 8008354:	bd08      	pop	{r3, pc}
 8008356:	bf00      	nop

08008358 <HAL_ADC_IRQHandler>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	6803      	ldr	r3, [r0, #0]
 800835c:	4604      	mov	r4, r0
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	0691      	lsls	r1, r2, #26
 8008362:	d502      	bpl.n	800836a <HAL_ADC_IRQHandler+0x12>
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	0792      	lsls	r2, r2, #30
 8008368:	d445      	bmi.n	80083f6 <HAL_ADC_IRQHandler+0x9e>
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	0612      	lsls	r2, r2, #24
 800836e:	d502      	bpl.n	8008376 <HAL_ADC_IRQHandler+0x1e>
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	0755      	lsls	r5, r2, #29
 8008374:	d40c      	bmi.n	8008390 <HAL_ADC_IRQHandler+0x38>
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	0655      	lsls	r5, r2, #25
 800837a:	d502      	bpl.n	8008382 <HAL_ADC_IRQHandler+0x2a>
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	07d0      	lsls	r0, r2, #31
 8008380:	d46f      	bmi.n	8008462 <HAL_ADC_IRQHandler+0x10a>
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	d502      	bpl.n	800838e <HAL_ADC_IRQHandler+0x36>
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	0692      	lsls	r2, r2, #26
 800838c:	d45c      	bmi.n	8008448 <HAL_ADC_IRQHandler+0xf0>
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008392:	06d0      	lsls	r0, r2, #27
 8008394:	d403      	bmi.n	800839e <HAL_ADC_IRQHandler+0x46>
 8008396:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800839c:	64e2      	str	r2, [r4, #76]	; 0x4c
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80083a4:	d11f      	bne.n	80083e6 <HAL_ADC_IRQHandler+0x8e>
 80083a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083a8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80083ac:	d002      	beq.n	80083b4 <HAL_ADC_IRQHandler+0x5c>
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	0551      	lsls	r1, r2, #21
 80083b2:	d418      	bmi.n	80083e6 <HAL_ADC_IRQHandler+0x8e>
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	0552      	lsls	r2, r2, #21
 80083b8:	d415      	bmi.n	80083e6 <HAL_ADC_IRQHandler+0x8e>
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80083c0:	d111      	bne.n	80083e6 <HAL_ADC_IRQHandler+0x8e>
 80083c2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80083c6:	b972      	cbnz	r2, 80083e6 <HAL_ADC_IRQHandler+0x8e>
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083d6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80083d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083da:	05db      	lsls	r3, r3, #23
 80083dc:	d403      	bmi.n	80083e6 <HAL_ADC_IRQHandler+0x8e>
 80083de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 f9ea 	bl	80087c0 <HAL_ADCEx_InjectedConvCpltCallback>
 80083ec:	f06f 020c 	mvn.w	r2, #12
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e7bf      	b.n	8008376 <HAL_ADC_IRQHandler+0x1e>
 80083f6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80083f8:	06d5      	lsls	r5, r2, #27
 80083fa:	d403      	bmi.n	8008404 <HAL_ADC_IRQHandler+0xac>
 80083fc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80083fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008402:	64c2      	str	r2, [r0, #76]	; 0x4c
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800840a:	d115      	bne.n	8008438 <HAL_ADC_IRQHandler+0xe0>
 800840c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008410:	b992      	cbnz	r2, 8008438 <HAL_ADC_IRQHandler+0xe0>
 8008412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008414:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8008418:	d12f      	bne.n	800847a <HAL_ADC_IRQHandler+0x122>
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	f022 0220 	bic.w	r2, r2, #32
 8008420:	605a      	str	r2, [r3, #4]
 8008422:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008428:	64e3      	str	r3, [r4, #76]	; 0x4c
 800842a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800842c:	04d9      	lsls	r1, r3, #19
 800842e:	d403      	bmi.n	8008438 <HAL_ADC_IRQHandler+0xe0>
 8008430:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008438:	4620      	mov	r0, r4
 800843a:	f7ff f8fb 	bl	8007634 <HAL_ADC_ConvCpltCallback>
 800843e:	f06f 0212 	mvn.w	r2, #18
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e790      	b.n	800836a <HAL_ADC_IRQHandler+0x12>
 8008448:	f06f 0520 	mvn.w	r5, #32
 800844c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800844e:	4620      	mov	r0, r4
 8008450:	f042 0202 	orr.w	r2, r2, #2
 8008454:	6522      	str	r2, [r4, #80]	; 0x50
 8008456:	601d      	str	r5, [r3, #0]
 8008458:	f7ff ff6e 	bl	8008338 <HAL_ADC_ErrorCallback>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	601d      	str	r5, [r3, #0]
 8008460:	bd38      	pop	{r3, r4, r5, pc}
 8008462:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008464:	4620      	mov	r0, r4
 8008466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800846a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800846c:	f7ff f8f0 	bl	8007650 <HAL_ADC_LevelOutOfWindowCallback>
 8008470:	f06f 0201 	mvn.w	r2, #1
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e783      	b.n	8008382 <HAL_ADC_IRQHandler+0x2a>
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	0550      	lsls	r0, r2, #21
 800847e:	d4db      	bmi.n	8008438 <HAL_ADC_IRQHandler+0xe0>
 8008480:	e7cb      	b.n	800841a <HAL_ADC_IRQHandler+0xc2>
 8008482:	bf00      	nop

08008484 <HAL_ADC_ConfigChannel>:
 8008484:	2300      	movs	r3, #0
 8008486:	b530      	push	{r4, r5, lr}
 8008488:	b083      	sub	sp, #12
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8008490:	2b01      	cmp	r3, #1
 8008492:	f000 80aa 	beq.w	80085ea <HAL_ADC_ConfigChannel+0x166>
 8008496:	2301      	movs	r3, #1
 8008498:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 800849c:	684b      	ldr	r3, [r1, #4]
 800849e:	4602      	mov	r2, r0
 80084a0:	2b06      	cmp	r3, #6
 80084a2:	6800      	ldr	r0, [r0, #0]
 80084a4:	d924      	bls.n	80084f0 <HAL_ADC_ConfigChannel+0x6c>
 80084a6:	2b0c      	cmp	r3, #12
 80084a8:	d866      	bhi.n	8008578 <HAL_ADC_ConfigChannel+0xf4>
 80084aa:	f04f 0c1f 	mov.w	ip, #31
 80084ae:	680c      	ldr	r4, [r1, #0]
 80084b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084b4:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80084b6:	3b23      	subs	r3, #35	; 0x23
 80084b8:	fa04 fe03 	lsl.w	lr, r4, r3
 80084bc:	fa0c f303 	lsl.w	r3, ip, r3
 80084c0:	ea25 0303 	bic.w	r3, r5, r3
 80084c4:	ea43 030e 	orr.w	r3, r3, lr
 80084c8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80084ca:	2c09      	cmp	r4, #9
 80084cc:	d822      	bhi.n	8008514 <HAL_ADC_ConfigChannel+0x90>
 80084ce:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80084d2:	2407      	movs	r4, #7
 80084d4:	6943      	ldr	r3, [r0, #20]
 80084d6:	6889      	ldr	r1, [r1, #8]
 80084d8:	40ac      	lsls	r4, r5
 80084da:	40a9      	lsls	r1, r5
 80084dc:	ea23 0404 	bic.w	r4, r3, r4
 80084e0:	430c      	orrs	r4, r1
 80084e2:	6144      	str	r4, [r0, #20]
 80084e4:	2300      	movs	r3, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
 80084ec:	b003      	add	sp, #12
 80084ee:	bd30      	pop	{r4, r5, pc}
 80084f0:	f04f 0c1f 	mov.w	ip, #31
 80084f4:	680c      	ldr	r4, [r1, #0]
 80084f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084fa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80084fc:	3b05      	subs	r3, #5
 80084fe:	fa04 fe03 	lsl.w	lr, r4, r3
 8008502:	fa0c f303 	lsl.w	r3, ip, r3
 8008506:	ea25 0303 	bic.w	r3, r5, r3
 800850a:	ea43 030e 	orr.w	r3, r3, lr
 800850e:	2c09      	cmp	r4, #9
 8008510:	6403      	str	r3, [r0, #64]	; 0x40
 8008512:	d9dc      	bls.n	80084ce <HAL_ADC_ConfigChannel+0x4a>
 8008514:	2c13      	cmp	r4, #19
 8008516:	d844      	bhi.n	80085a2 <HAL_ADC_ConfigChannel+0x11e>
 8008518:	f04f 0c07 	mov.w	ip, #7
 800851c:	688d      	ldr	r5, [r1, #8]
 800851e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008522:	6903      	ldr	r3, [r0, #16]
 8008524:	391e      	subs	r1, #30
 8008526:	408d      	lsls	r5, r1
 8008528:	fa0c f101 	lsl.w	r1, ip, r1
 800852c:	ea23 0301 	bic.w	r3, r3, r1
 8008530:	432b      	orrs	r3, r5
 8008532:	6103      	str	r3, [r0, #16]
 8008534:	f1a4 0310 	sub.w	r3, r4, #16
 8008538:	2b01      	cmp	r3, #1
 800853a:	d8d3      	bhi.n	80084e4 <HAL_ADC_ConfigChannel+0x60>
 800853c:	4b34      	ldr	r3, [pc, #208]	; (8008610 <HAL_ADC_ConfigChannel+0x18c>)
 800853e:	6859      	ldr	r1, [r3, #4]
 8008540:	0209      	lsls	r1, r1, #8
 8008542:	d4cf      	bmi.n	80084e4 <HAL_ADC_ConfigChannel+0x60>
 8008544:	6859      	ldr	r1, [r3, #4]
 8008546:	2c10      	cmp	r4, #16
 8008548:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800854c:	6059      	str	r1, [r3, #4]
 800854e:	d1c9      	bne.n	80084e4 <HAL_ADC_ConfigChannel+0x60>
 8008550:	4b30      	ldr	r3, [pc, #192]	; (8008614 <HAL_ADC_ConfigChannel+0x190>)
 8008552:	4931      	ldr	r1, [pc, #196]	; (8008618 <HAL_ADC_ConfigChannel+0x194>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	fba1 1303 	umull	r1, r3, r1, r3
 800855a:	0c9b      	lsrs	r3, r3, #18
 800855c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0bc      	beq.n	80084e4 <HAL_ADC_ConfigChannel+0x60>
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f9      	bne.n	800856a <HAL_ADC_ConfigChannel+0xe6>
 8008576:	e7b5      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x60>
 8008578:	2b12      	cmp	r3, #18
 800857a:	d925      	bls.n	80085c8 <HAL_ADC_ConfigChannel+0x144>
 800857c:	2b18      	cmp	r3, #24
 800857e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008582:	d835      	bhi.n	80085f0 <HAL_ADC_ConfigChannel+0x16c>
 8008584:	f04f 0c1f 	mov.w	ip, #31
 8008588:	680c      	ldr	r4, [r1, #0]
 800858a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800858c:	3b5f      	subs	r3, #95	; 0x5f
 800858e:	fa04 fe03 	lsl.w	lr, r4, r3
 8008592:	fa0c f303 	lsl.w	r3, ip, r3
 8008596:	ea25 0303 	bic.w	r3, r5, r3
 800859a:	ea43 030e 	orr.w	r3, r3, lr
 800859e:	6343      	str	r3, [r0, #52]	; 0x34
 80085a0:	e793      	b.n	80084ca <HAL_ADC_ConfigChannel+0x46>
 80085a2:	2c1a      	cmp	r4, #26
 80085a4:	d80d      	bhi.n	80085c2 <HAL_ADC_ConfigChannel+0x13e>
 80085a6:	2507      	movs	r5, #7
 80085a8:	6889      	ldr	r1, [r1, #8]
 80085aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80085ae:	68c3      	ldr	r3, [r0, #12]
 80085b0:	3c3c      	subs	r4, #60	; 0x3c
 80085b2:	40a1      	lsls	r1, r4
 80085b4:	fa05 f404 	lsl.w	r4, r5, r4
 80085b8:	ea23 0304 	bic.w	r3, r3, r4
 80085bc:	430b      	orrs	r3, r1
 80085be:	60c3      	str	r3, [r0, #12]
 80085c0:	e790      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x60>
 80085c2:	bf00      	nop
 80085c4:	680c      	ldr	r4, [r1, #0]
 80085c6:	e7b5      	b.n	8008534 <HAL_ADC_ConfigChannel+0xb0>
 80085c8:	f04f 0c1f 	mov.w	ip, #31
 80085cc:	680c      	ldr	r4, [r1, #0]
 80085ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085d2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80085d4:	3b41      	subs	r3, #65	; 0x41
 80085d6:	fa04 fe03 	lsl.w	lr, r4, r3
 80085da:	fa0c f303 	lsl.w	r3, ip, r3
 80085de:	ea25 0303 	bic.w	r3, r5, r3
 80085e2:	ea43 030e 	orr.w	r3, r3, lr
 80085e6:	6383      	str	r3, [r0, #56]	; 0x38
 80085e8:	e76f      	b.n	80084ca <HAL_ADC_ConfigChannel+0x46>
 80085ea:	2002      	movs	r0, #2
 80085ec:	b003      	add	sp, #12
 80085ee:	bd30      	pop	{r4, r5, pc}
 80085f0:	f04f 0c1f 	mov.w	ip, #31
 80085f4:	680c      	ldr	r4, [r1, #0]
 80085f6:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80085f8:	3b7d      	subs	r3, #125	; 0x7d
 80085fa:	fa04 fe03 	lsl.w	lr, r4, r3
 80085fe:	fa0c f303 	lsl.w	r3, ip, r3
 8008602:	ea25 0303 	bic.w	r3, r5, r3
 8008606:	ea43 030e 	orr.w	r3, r3, lr
 800860a:	6303      	str	r3, [r0, #48]	; 0x30
 800860c:	e75d      	b.n	80084ca <HAL_ADC_ConfigChannel+0x46>
 800860e:	bf00      	nop
 8008610:	40012700 	.word	0x40012700
 8008614:	20000020 	.word	0x20000020
 8008618:	431bde83 	.word	0x431bde83

0800861c <HAL_ADC_AnalogWDGConfig>:
 800861c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8008620:	680a      	ldr	r2, [r1, #0]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d024      	beq.n	8008670 <HAL_ADC_AnalogWDGConfig+0x54>
 8008626:	2301      	movs	r3, #1
 8008628:	b510      	push	{r4, lr}
 800862a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 800862e:	7a0b      	ldrb	r3, [r1, #8]
 8008630:	4686      	mov	lr, r0
 8008632:	2b01      	cmp	r3, #1
 8008634:	6803      	ldr	r3, [r0, #0]
 8008636:	d016      	beq.n	8008666 <HAL_ADC_AnalogWDGConfig+0x4a>
 8008638:	685c      	ldr	r4, [r3, #4]
 800863a:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800863e:	605c      	str	r4, [r3, #4]
 8008640:	f04f 0c00 	mov.w	ip, #0
 8008644:	6858      	ldr	r0, [r3, #4]
 8008646:	4c0b      	ldr	r4, [pc, #44]	; (8008674 <HAL_ADC_AnalogWDGConfig+0x58>)
 8008648:	4004      	ands	r4, r0
 800864a:	6848      	ldr	r0, [r1, #4]
 800864c:	605c      	str	r4, [r3, #4]
 800864e:	4302      	orrs	r2, r0
 8008650:	6858      	ldr	r0, [r3, #4]
 8008652:	4302      	orrs	r2, r0
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
 800865a:	6298      	str	r0, [r3, #40]	; 0x28
 800865c:	62da      	str	r2, [r3, #44]	; 0x2c
 800865e:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
 8008662:	4660      	mov	r0, ip
 8008664:	bd10      	pop	{r4, pc}
 8008666:	6858      	ldr	r0, [r3, #4]
 8008668:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800866c:	6058      	str	r0, [r3, #4]
 800866e:	e7e7      	b.n	8008640 <HAL_ADC_AnalogWDGConfig+0x24>
 8008670:	2002      	movs	r0, #2
 8008672:	4770      	bx	lr
 8008674:	ff3ffde0 	.word	0xff3ffde0

08008678 <ADC_Enable>:
 8008678:	2300      	movs	r3, #0
 800867a:	b530      	push	{r4, r5, lr}
 800867c:	6802      	ldr	r2, [r0, #0]
 800867e:	b083      	sub	sp, #12
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	6813      	ldr	r3, [r2, #0]
 8008684:	0659      	lsls	r1, r3, #25
 8008686:	d429      	bmi.n	80086dc <ADC_Enable+0x64>
 8008688:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <ADC_Enable+0x84>)
 800868a:	4604      	mov	r4, r0
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	481c      	ldr	r0, [pc, #112]	; (8008700 <ADC_Enable+0x88>)
 8008690:	6891      	ldr	r1, [r2, #8]
 8008692:	fba0 0303 	umull	r0, r3, r0, r3
 8008696:	0c9b      	lsrs	r3, r3, #18
 8008698:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800869c:	f041 0101 	orr.w	r1, r1, #1
 80086a0:	6091      	str	r1, [r2, #8]
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	9b01      	ldr	r3, [sp, #4]
 80086a6:	b12b      	cbz	r3, 80086b4 <ADC_Enable+0x3c>
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	9b01      	ldr	r3, [sp, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f9      	bne.n	80086a8 <ADC_Enable+0x30>
 80086b4:	f7ff fc94 	bl	8007fe0 <HAL_GetTick>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	4605      	mov	r5, r0
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	065a      	lsls	r2, r3, #25
 80086c0:	d40c      	bmi.n	80086dc <ADC_Enable+0x64>
 80086c2:	f7ff fc8d 	bl	8007fe0 <HAL_GetTick>
 80086c6:	1b43      	subs	r3, r0, r5
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	d903      	bls.n	80086d6 <ADC_Enable+0x5e>
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80086d4:	d005      	beq.n	80086e2 <ADC_Enable+0x6a>
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	065b      	lsls	r3, r3, #25
 80086da:	d5f2      	bpl.n	80086c2 <ADC_Enable+0x4a>
 80086dc:	2000      	movs	r0, #0
 80086de:	b003      	add	sp, #12
 80086e0:	bd30      	pop	{r4, r5, pc}
 80086e2:	2001      	movs	r0, #1
 80086e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80086e6:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80086ea:	f043 0310 	orr.w	r3, r3, #16
 80086ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80086f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80086f2:	4303      	orrs	r3, r0
 80086f4:	6523      	str	r3, [r4, #80]	; 0x50
 80086f6:	b003      	add	sp, #12
 80086f8:	bd30      	pop	{r4, r5, pc}
 80086fa:	bf00      	nop
 80086fc:	20000020 	.word	0x20000020
 8008700:	431bde83 	.word	0x431bde83

08008704 <HAL_ADC_Start_DMA>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 800870c:	2d01      	cmp	r5, #1
 800870e:	d04c      	beq.n	80087aa <HAL_ADC_Start_DMA+0xa6>
 8008710:	2301      	movs	r3, #1
 8008712:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 8008716:	4604      	mov	r4, r0
 8008718:	4688      	mov	r8, r1
 800871a:	4617      	mov	r7, r2
 800871c:	f7ff ffac 	bl	8008678 <ADC_Enable>
 8008720:	4605      	mov	r5, r0
 8008722:	2800      	cmp	r0, #0
 8008724:	d13e      	bne.n	80087a4 <HAL_ADC_Start_DMA+0xa0>
 8008726:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008728:	6826      	ldr	r6, [r4, #0]
 800872a:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800872e:	f020 0001 	bic.w	r0, r0, #1
 8008732:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8008736:	64e0      	str	r0, [r4, #76]	; 0x4c
 8008738:	6873      	ldr	r3, [r6, #4]
 800873a:	055b      	lsls	r3, r3, #21
 800873c:	d505      	bpl.n	800874a <HAL_ADC_Start_DMA+0x46>
 800873e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008748:	64e3      	str	r3, [r4, #76]	; 0x4c
 800874a:	2100      	movs	r1, #0
 800874c:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 8008750:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8008754:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008756:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008758:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800875c:	bf18      	it	ne
 800875e:	6d23      	ldrne	r3, [r4, #80]	; 0x50
 8008760:	4642      	mov	r2, r8
 8008762:	bf18      	it	ne
 8008764:	f023 0306 	bicne.w	r3, r3, #6
 8008768:	6523      	str	r3, [r4, #80]	; 0x50
 800876a:	463b      	mov	r3, r7
 800876c:	4f11      	ldr	r7, [pc, #68]	; (80087b4 <HAL_ADC_Start_DMA+0xb0>)
 800876e:	6287      	str	r7, [r0, #40]	; 0x28
 8008770:	4f11      	ldr	r7, [pc, #68]	; (80087b8 <HAL_ADC_Start_DMA+0xb4>)
 8008772:	62c7      	str	r7, [r0, #44]	; 0x2c
 8008774:	4f11      	ldr	r7, [pc, #68]	; (80087bc <HAL_ADC_Start_DMA+0xb8>)
 8008776:	6307      	str	r7, [r0, #48]	; 0x30
 8008778:	6031      	str	r1, [r6, #0]
 800877a:	6871      	ldr	r1, [r6, #4]
 800877c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008780:	6071      	str	r1, [r6, #4]
 8008782:	68b1      	ldr	r1, [r6, #8]
 8008784:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008788:	60b1      	str	r1, [r6, #8]
 800878a:	f106 0158 	add.w	r1, r6, #88	; 0x58
 800878e:	f000 f98f 	bl	8008ab0 <HAL_DMA_Start_IT>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800879a:	d103      	bne.n	80087a4 <HAL_ADC_Start_DMA+0xa0>
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	4628      	mov	r0, r5
 80087a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087aa:	2502      	movs	r5, #2
 80087ac:	4628      	mov	r0, r5
 80087ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b2:	bf00      	nop
 80087b4:	080082cd 	.word	0x080082cd
 80087b8:	0800832d 	.word	0x0800832d
 80087bc:	0800833d 	.word	0x0800833d

080087c0 <HAL_ADCEx_InjectedConvCpltCallback>:
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <HAL_NVIC_SetPriorityGrouping>:
 80087c4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 80087c8:	4906      	ldr	r1, [pc, #24]	; (80087e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80087ca:	0203      	lsls	r3, r0, #8
 80087cc:	68ca      	ldr	r2, [r1, #12]
 80087ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087d2:	ea02 020c 	and.w	r2, r2, ip
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e0:	60cb      	str	r3, [r1, #12]
 80087e2:	4770      	bx	lr
 80087e4:	e000ed00 	.word	0xe000ed00

080087e8 <HAL_NVIC_SetPriority>:
 80087e8:	4b1c      	ldr	r3, [pc, #112]	; (800885c <HAL_NVIC_SetPriority+0x74>)
 80087ea:	b500      	push	{lr}
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80087f2:	f1c3 0e07 	rsb	lr, r3, #7
 80087f6:	f1be 0f04 	cmp.w	lr, #4
 80087fa:	f103 0c04 	add.w	ip, r3, #4
 80087fe:	bf28      	it	cs
 8008800:	f04f 0e04 	movcs.w	lr, #4
 8008804:	f1bc 0f06 	cmp.w	ip, #6
 8008808:	d91b      	bls.n	8008842 <HAL_NVIC_SetPriority+0x5a>
 800880a:	f04f 3cff 	mov.w	ip, #4294967295
 800880e:	3b03      	subs	r3, #3
 8008810:	fa0c fc03 	lsl.w	ip, ip, r3
 8008814:	ea22 020c 	bic.w	r2, r2, ip
 8008818:	f04f 3cff 	mov.w	ip, #4294967295
 800881c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008820:	ea21 010c 	bic.w	r1, r1, ip
 8008824:	4099      	lsls	r1, r3
 8008826:	2800      	cmp	r0, #0
 8008828:	ea41 0102 	orr.w	r1, r1, r2
 800882c:	db0c      	blt.n	8008848 <HAL_NVIC_SetPriority+0x60>
 800882e:	0109      	lsls	r1, r1, #4
 8008830:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008834:	b2c9      	uxtb	r1, r1
 8008836:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800883a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 800883e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008842:	2200      	movs	r2, #0
 8008844:	4613      	mov	r3, r2
 8008846:	e7e7      	b.n	8008818 <HAL_NVIC_SetPriority+0x30>
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <HAL_NVIC_SetPriority+0x78>)
 800884a:	f000 000f 	and.w	r0, r0, #15
 800884e:	0109      	lsls	r1, r1, #4
 8008850:	b2c9      	uxtb	r1, r1
 8008852:	4403      	add	r3, r0
 8008854:	7619      	strb	r1, [r3, #24]
 8008856:	f85d fb04 	ldr.w	pc, [sp], #4
 800885a:	bf00      	nop
 800885c:	e000ed00 	.word	0xe000ed00
 8008860:	e000ecfc 	.word	0xe000ecfc

08008864 <HAL_NVIC_EnableIRQ>:
 8008864:	2800      	cmp	r0, #0
 8008866:	db07      	blt.n	8008878 <HAL_NVIC_EnableIRQ+0x14>
 8008868:	2301      	movs	r3, #1
 800886a:	f000 011f 	and.w	r1, r0, #31
 800886e:	4a03      	ldr	r2, [pc, #12]	; (800887c <HAL_NVIC_EnableIRQ+0x18>)
 8008870:	0940      	lsrs	r0, r0, #5
 8008872:	408b      	lsls	r3, r1
 8008874:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	e000e100 	.word	0xe000e100

08008880 <HAL_NVIC_DisableIRQ>:
 8008880:	2800      	cmp	r0, #0
 8008882:	db0d      	blt.n	80088a0 <HAL_NVIC_DisableIRQ+0x20>
 8008884:	2201      	movs	r2, #1
 8008886:	4907      	ldr	r1, [pc, #28]	; (80088a4 <HAL_NVIC_DisableIRQ+0x24>)
 8008888:	0943      	lsrs	r3, r0, #5
 800888a:	f000 001f 	and.w	r0, r0, #31
 800888e:	3320      	adds	r3, #32
 8008890:	fa02 f000 	lsl.w	r0, r2, r0
 8008894:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	e000e100 	.word	0xe000e100

080088a8 <HAL_SYSTICK_Config>:
 80088a8:	3801      	subs	r0, #1
 80088aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80088ae:	d20f      	bcs.n	80088d0 <HAL_SYSTICK_Config+0x28>
 80088b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80088b4:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80088b8:	2200      	movs	r2, #0
 80088ba:	2107      	movs	r1, #7
 80088bc:	b410      	push	{r4}
 80088be:	4c05      	ldr	r4, [pc, #20]	; (80088d4 <HAL_SYSTICK_Config+0x2c>)
 80088c0:	6158      	str	r0, [r3, #20]
 80088c2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
 80088c6:	4610      	mov	r0, r2
 80088c8:	619a      	str	r2, [r3, #24]
 80088ca:	bc10      	pop	{r4}
 80088cc:	6119      	str	r1, [r3, #16]
 80088ce:	4770      	bx	lr
 80088d0:	2001      	movs	r0, #1
 80088d2:	4770      	bx	lr
 80088d4:	e000ed00 	.word	0xe000ed00

080088d8 <HAL_DAC_Init>:
 80088d8:	b188      	cbz	r0, 80088fe <HAL_DAC_Init+0x26>
 80088da:	b510      	push	{r4, lr}
 80088dc:	7903      	ldrb	r3, [r0, #4]
 80088de:	4604      	mov	r4, r0
 80088e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80088e4:	b13b      	cbz	r3, 80088f6 <HAL_DAC_Init+0x1e>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2102      	movs	r1, #2
 80088ea:	2201      	movs	r2, #1
 80088ec:	7121      	strb	r1, [r4, #4]
 80088ee:	6123      	str	r3, [r4, #16]
 80088f0:	7122      	strb	r2, [r4, #4]
 80088f2:	4618      	mov	r0, r3
 80088f4:	bd10      	pop	{r4, pc}
 80088f6:	7142      	strb	r2, [r0, #5]
 80088f8:	f7ff f8b8 	bl	8007a6c <HAL_DAC_MspInit>
 80088fc:	e7f3      	b.n	80088e6 <HAL_DAC_Init+0xe>
 80088fe:	2001      	movs	r0, #1
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop

08008904 <HAL_DAC_Start>:
 8008904:	7942      	ldrb	r2, [r0, #5]
 8008906:	2a01      	cmp	r2, #1
 8008908:	d02a      	beq.n	8008960 <HAL_DAC_Start+0x5c>
 800890a:	b410      	push	{r4}
 800890c:	4603      	mov	r3, r0
 800890e:	2402      	movs	r4, #2
 8008910:	2201      	movs	r2, #1
 8008912:	6800      	ldr	r0, [r0, #0]
 8008914:	711c      	strb	r4, [r3, #4]
 8008916:	6804      	ldr	r4, [r0, #0]
 8008918:	f001 0c10 	and.w	ip, r1, #16
 800891c:	fa02 f20c 	lsl.w	r2, r2, ip
 8008920:	4322      	orrs	r2, r4
 8008922:	6002      	str	r2, [r0, #0]
 8008924:	b979      	cbnz	r1, 8008946 <HAL_DAC_Start+0x42>
 8008926:	6802      	ldr	r2, [r0, #0]
 8008928:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 800892c:	2a3c      	cmp	r2, #60	; 0x3c
 800892e:	d103      	bne.n	8008938 <HAL_DAC_Start+0x34>
 8008930:	6842      	ldr	r2, [r0, #4]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	6042      	str	r2, [r0, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	2101      	movs	r1, #1
 800893c:	715a      	strb	r2, [r3, #5]
 800893e:	7119      	strb	r1, [r3, #4]
 8008940:	4610      	mov	r0, r2
 8008942:	bc10      	pop	{r4}
 8008944:	4770      	bx	lr
 8008946:	223c      	movs	r2, #60	; 0x3c
 8008948:	6801      	ldr	r1, [r0, #0]
 800894a:	fa02 fc0c 	lsl.w	ip, r2, ip
 800894e:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8008952:	4561      	cmp	r1, ip
 8008954:	d1f0      	bne.n	8008938 <HAL_DAC_Start+0x34>
 8008956:	6842      	ldr	r2, [r0, #4]
 8008958:	f042 0202 	orr.w	r2, r2, #2
 800895c:	6042      	str	r2, [r0, #4]
 800895e:	e7eb      	b.n	8008938 <HAL_DAC_Start+0x34>
 8008960:	2002      	movs	r0, #2
 8008962:	4770      	bx	lr

08008964 <HAL_DAC_SetValue>:
 8008964:	b410      	push	{r4}
 8008966:	2400      	movs	r4, #0
 8008968:	6800      	ldr	r0, [r0, #0]
 800896a:	b083      	sub	sp, #12
 800896c:	9401      	str	r4, [sp, #4]
 800896e:	9001      	str	r0, [sp, #4]
 8008970:	b949      	cbnz	r1, 8008986 <HAL_DAC_SetValue+0x22>
 8008972:	9901      	ldr	r1, [sp, #4]
 8008974:	3108      	adds	r1, #8
 8008976:	440a      	add	r2, r1
 8008978:	9201      	str	r2, [sp, #4]
 800897a:	2000      	movs	r0, #0
 800897c:	9a01      	ldr	r2, [sp, #4]
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	b003      	add	sp, #12
 8008982:	bc10      	pop	{r4}
 8008984:	4770      	bx	lr
 8008986:	9901      	ldr	r1, [sp, #4]
 8008988:	3114      	adds	r1, #20
 800898a:	440a      	add	r2, r1
 800898c:	9201      	str	r2, [sp, #4]
 800898e:	e7f4      	b.n	800897a <HAL_DAC_SetValue+0x16>

08008990 <HAL_DAC_ConfigChannel>:
 8008990:	4603      	mov	r3, r0
 8008992:	7940      	ldrb	r0, [r0, #5]
 8008994:	2801      	cmp	r0, #1
 8008996:	d022      	beq.n	80089de <HAL_DAC_ConfigChannel+0x4e>
 8008998:	2002      	movs	r0, #2
 800899a:	b570      	push	{r4, r5, r6, lr}
 800899c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 80089a0:	f640 76fe 	movw	r6, #4094	; 0xffe
 80089a4:	f04f 0e00 	mov.w	lr, #0
 80089a8:	2501      	movs	r5, #1
 80089aa:	7118      	strb	r0, [r3, #4]
 80089ac:	681c      	ldr	r4, [r3, #0]
 80089ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b2:	f002 0210 	and.w	r2, r2, #16
 80089b6:	4301      	orrs	r1, r0
 80089b8:	4096      	lsls	r6, r2
 80089ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80089be:	fa01 f202 	lsl.w	r2, r1, r2
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	4670      	mov	r0, lr
 80089c6:	ea21 0106 	bic.w	r1, r1, r6
 80089ca:	430a      	orrs	r2, r1
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	ea22 020c 	bic.w	r2, r2, ip
 80089d4:	6022      	str	r2, [r4, #0]
 80089d6:	711d      	strb	r5, [r3, #4]
 80089d8:	f883 e005 	strb.w	lr, [r3, #5]
 80089dc:	bd70      	pop	{r4, r5, r6, pc}
 80089de:	2002      	movs	r0, #2
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop

080089e4 <HAL_DMA_Init>:
 80089e4:	b370      	cbz	r0, 8008a44 <HAL_DMA_Init+0x60>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2202      	movs	r2, #2
 80089ea:	b530      	push	{r4, r5, lr}
 80089ec:	f04f 0c01 	mov.w	ip, #1
 80089f0:	2400      	movs	r4, #0
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80089f8:	6802      	ldr	r2, [r0, #0]
 80089fa:	68dd      	ldr	r5, [r3, #12]
 80089fc:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
 8008a00:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	4910      	ldr	r1, [pc, #64]	; (8008a48 <HAL_DMA_Init+0x64>)
 8008a08:	432a      	orrs	r2, r5
 8008a0a:	4d10      	ldr	r5, [pc, #64]	; (8008a4c <HAL_DMA_Init+0x68>)
 8008a0c:	4401      	add	r1, r0
 8008a0e:	fba5 5101 	umull	r5, r1, r5, r1
 8008a12:	0909      	lsrs	r1, r1, #4
 8008a14:	0089      	lsls	r1, r1, #2
 8008a16:	6419      	str	r1, [r3, #64]	; 0x40
 8008a18:	6919      	ldr	r1, [r3, #16]
 8008a1a:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	6959      	ldr	r1, [r3, #20]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	6999      	ldr	r1, [r3, #24]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	69d9      	ldr	r1, [r3, #28]
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	4908      	ldr	r1, [pc, #32]	; (8008a50 <HAL_DMA_Init+0x6c>)
 8008a2e:	ea42 020e 	orr.w	r2, r2, lr
 8008a32:	63d9      	str	r1, [r3, #60]	; 0x3c
 8008a34:	6002      	str	r2, [r0, #0]
 8008a36:	639c      	str	r4, [r3, #56]	; 0x38
 8008a38:	f883 4020 	strb.w	r4, [r3, #32]
 8008a3c:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
 8008a40:	4620      	mov	r0, r4
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	2001      	movs	r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	bffd9ff8 	.word	0xbffd9ff8
 8008a4c:	cccccccd 	.word	0xcccccccd
 8008a50:	40026000 	.word	0x40026000

08008a54 <HAL_DMA_DeInit>:
 8008a54:	b320      	cbz	r0, 8008aa0 <HAL_DMA_DeInit+0x4c>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2101      	movs	r1, #1
 8008a5a:	b430      	push	{r4, r5}
 8008a5c:	2400      	movs	r4, #0
 8008a5e:	6805      	ldr	r5, [r0, #0]
 8008a60:	4810      	ldr	r0, [pc, #64]	; (8008aa4 <HAL_DMA_DeInit+0x50>)
 8008a62:	682a      	ldr	r2, [r5, #0]
 8008a64:	f022 0201 	bic.w	r2, r2, #1
 8008a68:	602a      	str	r2, [r5, #0]
 8008a6a:	4a0f      	ldr	r2, [pc, #60]	; (8008aa8 <HAL_DMA_DeInit+0x54>)
 8008a6c:	442a      	add	r2, r5
 8008a6e:	fba0 0202 	umull	r0, r2, r0, r2
 8008a72:	0912      	lsrs	r2, r2, #4
 8008a74:	0092      	lsls	r2, r2, #2
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40
 8008a78:	f002 021c 	and.w	r2, r2, #28
 8008a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8008a80:	490a      	ldr	r1, [pc, #40]	; (8008aac <HAL_DMA_DeInit+0x58>)
 8008a82:	4620      	mov	r0, r4
 8008a84:	63d9      	str	r1, [r3, #60]	; 0x3c
 8008a86:	602c      	str	r4, [r5, #0]
 8008a88:	604a      	str	r2, [r1, #4]
 8008a8a:	639c      	str	r4, [r3, #56]	; 0x38
 8008a8c:	f883 4020 	strb.w	r4, [r3, #32]
 8008a90:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
 8008a94:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 8008a98:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 8008a9c:	bc30      	pop	{r4, r5}
 8008a9e:	4770      	bx	lr
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	4770      	bx	lr
 8008aa4:	cccccccd 	.word	0xcccccccd
 8008aa8:	bffd9ff8 	.word	0xbffd9ff8
 8008aac:	40026000 	.word	0x40026000

08008ab0 <HAL_DMA_Start_IT>:
 8008ab0:	4684      	mov	ip, r0
 8008ab2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008ab6:	2801      	cmp	r0, #1
 8008ab8:	d042      	beq.n	8008b40 <HAL_DMA_Start_IT+0x90>
 8008aba:	b530      	push	{r4, r5, lr}
 8008abc:	2401      	movs	r4, #1
 8008abe:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
 8008ac2:	f88c 4020 	strb.w	r4, [ip, #32]
 8008ac6:	42a0      	cmp	r0, r4
 8008ac8:	fa5f fe80 	uxtb.w	lr, r0
 8008acc:	d004      	beq.n	8008ad8 <HAL_DMA_Start_IT+0x28>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f88c 3020 	strb.w	r3, [ip, #32]
 8008ad4:	2002      	movs	r0, #2
 8008ad6:	bd30      	pop	{r4, r5, pc}
 8008ad8:	2002      	movs	r0, #2
 8008ada:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f8dc 4000 	ldr.w	r4, [ip]
 8008ae4:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
 8008ae8:	6825      	ldr	r5, [r4, #0]
 8008aea:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
 8008aee:	f025 0501 	bic.w	r5, r5, #1
 8008af2:	6025      	str	r5, [r4, #0]
 8008af4:	f000 001c 	and.w	r0, r0, #28
 8008af8:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8008afc:	fa0e f000 	lsl.w	r0, lr, r0
 8008b00:	6068      	str	r0, [r5, #4]
 8008b02:	6063      	str	r3, [r4, #4]
 8008b04:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 8008b0e:	bf0b      	itete	eq
 8008b10:	60a2      	streq	r2, [r4, #8]
 8008b12:	60a1      	strne	r1, [r4, #8]
 8008b14:	60e1      	streq	r1, [r4, #12]
 8008b16:	60e2      	strne	r2, [r4, #12]
 8008b18:	b14b      	cbz	r3, 8008b2e <HAL_DMA_Start_IT+0x7e>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f043 030e 	orr.w	r3, r3, #14
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	2000      	movs	r0, #0
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	bd30      	pop	{r4, r5, pc}
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	f023 0304 	bic.w	r3, r3, #4
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	f043 030a 	orr.w	r3, r3, #10
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	e7f0      	b.n	8008b22 <HAL_DMA_Start_IT+0x72>
 8008b40:	2002      	movs	r0, #2
 8008b42:	4770      	bx	lr

08008b44 <HAL_DMA_Abort>:
 8008b44:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2a02      	cmp	r2, #2
 8008b4c:	d006      	beq.n	8008b5c <HAL_DMA_Abort+0x18>
 8008b4e:	2104      	movs	r1, #4
 8008b50:	2200      	movs	r2, #0
 8008b52:	2001      	movs	r0, #1
 8008b54:	6399      	str	r1, [r3, #56]	; 0x38
 8008b56:	f883 2020 	strb.w	r2, [r3, #32]
 8008b5a:	4770      	bx	lr
 8008b5c:	b500      	push	{lr}
 8008b5e:	f04f 0e01 	mov.w	lr, #1
 8008b62:	f04f 0c00 	mov.w	ip, #0
 8008b66:	6802      	ldr	r2, [r0, #0]
 8008b68:	6811      	ldr	r1, [r2, #0]
 8008b6a:	f021 010e 	bic.w	r1, r1, #14
 8008b6e:	6011      	str	r1, [r2, #0]
 8008b70:	6811      	ldr	r1, [r2, #0]
 8008b72:	f021 0101 	bic.w	r1, r1, #1
 8008b76:	6011      	str	r1, [r2, #0]
 8008b78:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8008b7c:	f002 021c 	and.w	r2, r2, #28
 8008b80:	fa0e f202 	lsl.w	r2, lr, r2
 8008b84:	604a      	str	r2, [r1, #4]
 8008b86:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
 8008b8a:	f883 c020 	strb.w	ip, [r3, #32]
 8008b8e:	4660      	mov	r0, ip
 8008b90:	f85d fb04 	ldr.w	pc, [sp], #4

08008b94 <HAL_DMA_Abort_IT>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2a02      	cmp	r2, #2
 8008b9e:	d003      	beq.n	8008ba8 <HAL_DMA_Abort_IT+0x14>
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	6801      	ldr	r1, [r0, #0]
 8008baa:	f04f 0c01 	mov.w	ip, #1
 8008bae:	680c      	ldr	r4, [r1, #0]
 8008bb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008bb2:	f024 040e 	bic.w	r4, r4, #14
 8008bb6:	600c      	str	r4, [r1, #0]
 8008bb8:	2400      	movs	r4, #0
 8008bba:	680d      	ldr	r5, [r1, #0]
 8008bbc:	f002 021c 	and.w	r2, r2, #28
 8008bc0:	f025 0501 	bic.w	r5, r5, #1
 8008bc4:	600d      	str	r5, [r1, #0]
 8008bc6:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8008bc8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008bca:	fa0c f202 	lsl.w	r2, ip, r2
 8008bce:	606a      	str	r2, [r5, #4]
 8008bd0:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
 8008bd4:	f880 4020 	strb.w	r4, [r0, #32]
 8008bd8:	b111      	cbz	r1, 8008be0 <HAL_DMA_Abort_IT+0x4c>
 8008bda:	4788      	blx	r1
 8008bdc:	4620      	mov	r0, r4
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	4608      	mov	r0, r1
 8008be2:	bd38      	pop	{r3, r4, r5, pc}

08008be4 <HAL_DMA_IRQHandler>:
 8008be4:	2204      	movs	r2, #4
 8008be6:	b470      	push	{r4, r5, r6}
 8008be8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008bea:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8008bec:	f003 031c 	and.w	r3, r3, #28
 8008bf0:	6831      	ldr	r1, [r6, #0]
 8008bf2:	6805      	ldr	r5, [r0, #0]
 8008bf4:	409a      	lsls	r2, r3
 8008bf6:	420a      	tst	r2, r1
 8008bf8:	682c      	ldr	r4, [r5, #0]
 8008bfa:	d00e      	beq.n	8008c1a <HAL_DMA_IRQHandler+0x36>
 8008bfc:	f014 0f04 	tst.w	r4, #4
 8008c00:	d00b      	beq.n	8008c1a <HAL_DMA_IRQHandler+0x36>
 8008c02:	682b      	ldr	r3, [r5, #0]
 8008c04:	069b      	lsls	r3, r3, #26
 8008c06:	d403      	bmi.n	8008c10 <HAL_DMA_IRQHandler+0x2c>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	f023 0304 	bic.w	r3, r3, #4
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008c12:	6072      	str	r2, [r6, #4]
 8008c14:	b1cb      	cbz	r3, 8008c4a <HAL_DMA_IRQHandler+0x66>
 8008c16:	bc70      	pop	{r4, r5, r6}
 8008c18:	4718      	bx	r3
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	409a      	lsls	r2, r3
 8008c1e:	420a      	tst	r2, r1
 8008c20:	d015      	beq.n	8008c4e <HAL_DMA_IRQHandler+0x6a>
 8008c22:	f014 0f02 	tst.w	r4, #2
 8008c26:	d012      	beq.n	8008c4e <HAL_DMA_IRQHandler+0x6a>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	0699      	lsls	r1, r3, #26
 8008c2c:	d406      	bmi.n	8008c3c <HAL_DMA_IRQHandler+0x58>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	f023 030a 	bic.w	r3, r3, #10
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	2301      	movs	r3, #1
 8008c38:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c40:	6072      	str	r2, [r6, #4]
 8008c42:	f880 1020 	strb.w	r1, [r0, #32]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <HAL_DMA_IRQHandler+0x32>
 8008c4a:	bc70      	pop	{r4, r5, r6}
 8008c4c:	4770      	bx	lr
 8008c4e:	2208      	movs	r2, #8
 8008c50:	409a      	lsls	r2, r3
 8008c52:	420a      	tst	r2, r1
 8008c54:	d0f9      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x66>
 8008c56:	0722      	lsls	r2, r4, #28
 8008c58:	d5f7      	bpl.n	8008c4a <HAL_DMA_IRQHandler+0x66>
 8008c5a:	682a      	ldr	r2, [r5, #0]
 8008c5c:	2400      	movs	r4, #0
 8008c5e:	f022 020e 	bic.w	r2, r2, #14
 8008c62:	602a      	str	r2, [r5, #0]
 8008c64:	2201      	movs	r2, #1
 8008c66:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008c68:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6c:	6073      	str	r3, [r6, #4]
 8008c6e:	6382      	str	r2, [r0, #56]	; 0x38
 8008c70:	f880 4020 	strb.w	r4, [r0, #32]
 8008c74:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d0e6      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x66>
 8008c7c:	bc70      	pop	{r4, r5, r6}
 8008c7e:	4708      	bx	r1

08008c80 <HAL_EXTI_SetConfigLine>:
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d041      	beq.n	8008d08 <HAL_EXTI_SetConfigLine+0x88>
 8008c84:	2900      	cmp	r1, #0
 8008c86:	d03f      	beq.n	8008d08 <HAL_EXTI_SetConfigLine+0x88>
 8008c88:	f04f 0c01 	mov.w	ip, #1
 8008c8c:	680b      	ldr	r3, [r1, #0]
 8008c8e:	b430      	push	{r4, r5}
 8008c90:	f003 021f 	and.w	r2, r3, #31
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	0198      	lsls	r0, r3, #6
 8008c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8008c9c:	d519      	bpl.n	8008cd2 <HAL_EXTI_SetConfigLine+0x52>
 8008c9e:	4d25      	ldr	r5, [pc, #148]	; (8008d34 <HAL_EXTI_SetConfigLine+0xb4>)
 8008ca0:	6888      	ldr	r0, [r1, #8]
 8008ca2:	68ac      	ldr	r4, [r5, #8]
 8008ca4:	f010 0f01 	tst.w	r0, #1
 8008ca8:	bf14      	ite	ne
 8008caa:	ea44 040c 	orrne.w	r4, r4, ip
 8008cae:	ea24 040c 	biceq.w	r4, r4, ip
 8008cb2:	60ac      	str	r4, [r5, #8]
 8008cb4:	4c1f      	ldr	r4, [pc, #124]	; (8008d34 <HAL_EXTI_SetConfigLine+0xb4>)
 8008cb6:	f010 0f02 	tst.w	r0, #2
 8008cba:	68e0      	ldr	r0, [r4, #12]
 8008cbc:	bf14      	ite	ne
 8008cbe:	ea40 000c 	orrne.w	r0, r0, ip
 8008cc2:	ea20 000c 	biceq.w	r0, r0, ip
 8008cc6:	60e0      	str	r0, [r4, #12]
 8008cc8:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8008ccc:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8008cd0:	d01c      	beq.n	8008d0c <HAL_EXTI_SetConfigLine+0x8c>
 8008cd2:	4a18      	ldr	r2, [pc, #96]	; (8008d34 <HAL_EXTI_SetConfigLine+0xb4>)
 8008cd4:	6848      	ldr	r0, [r1, #4]
 8008cd6:	6813      	ldr	r3, [r2, #0]
 8008cd8:	07c1      	lsls	r1, r0, #31
 8008cda:	bf4c      	ite	mi
 8008cdc:	ea43 030c 	orrmi.w	r3, r3, ip
 8008ce0:	ea23 030c 	bicpl.w	r3, r3, ip
 8008ce4:	f010 0002 	ands.w	r0, r0, #2
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <HAL_EXTI_SetConfigLine+0xb4>)
 8008cec:	d105      	bne.n	8008cfa <HAL_EXTI_SetConfigLine+0x7a>
 8008cee:	bc30      	pop	{r4, r5}
 8008cf0:	6853      	ldr	r3, [r2, #4]
 8008cf2:	ea23 030c 	bic.w	r3, r3, ip
 8008cf6:	6053      	str	r3, [r2, #4]
 8008cf8:	4770      	bx	lr
 8008cfa:	6853      	ldr	r3, [r2, #4]
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	bc30      	pop	{r4, r5}
 8008d00:	ea43 030c 	orr.w	r3, r3, ip
 8008d04:	6053      	str	r3, [r2, #4]
 8008d06:	4770      	bx	lr
 8008d08:	2001      	movs	r0, #1
 8008d0a:	4770      	bx	lr
 8008d0c:	250f      	movs	r5, #15
 8008d0e:	f002 021c 	and.w	r2, r2, #28
 8008d12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008d16:	68c8      	ldr	r0, [r1, #12]
 8008d18:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	6894      	ldr	r4, [r2, #8]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4098      	lsls	r0, r3
 8008d26:	fa05 f303 	lsl.w	r3, r5, r3
 8008d2a:	ea24 0303 	bic.w	r3, r4, r3
 8008d2e:	4318      	orrs	r0, r3
 8008d30:	6090      	str	r0, [r2, #8]
 8008d32:	e7ce      	b.n	8008cd2 <HAL_EXTI_SetConfigLine+0x52>
 8008d34:	40010400 	.word	0x40010400

08008d38 <HAL_EXTI_GenerateSWI>:
 8008d38:	2301      	movs	r3, #1
 8008d3a:	6802      	ldr	r2, [r0, #0]
 8008d3c:	4902      	ldr	r1, [pc, #8]	; (8008d48 <HAL_EXTI_GenerateSWI+0x10>)
 8008d3e:	f002 021f 	and.w	r2, r2, #31
 8008d42:	4093      	lsls	r3, r2
 8008d44:	610b      	str	r3, [r1, #16]
 8008d46:	4770      	bx	lr
 8008d48:	40010400 	.word	0x40010400

08008d4c <HAL_GPIO_Init>:
 8008d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d50:	680c      	ldr	r4, [r1, #0]
 8008d52:	b085      	sub	sp, #20
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	d07c      	beq.n	8008e52 <HAL_GPIO_Init+0x106>
 8008d58:	f04f 0e00 	mov.w	lr, #0
 8008d5c:	f04f 0b01 	mov.w	fp, #1
 8008d60:	4673      	mov	r3, lr
 8008d62:	468c      	mov	ip, r1
 8008d64:	fa0b f503 	lsl.w	r5, fp, r3
 8008d68:	ea15 0a04 	ands.w	sl, r5, r4
 8008d6c:	d06b      	beq.n	8008e46 <HAL_GPIO_Init+0xfa>
 8008d6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008d72:	f001 0203 	and.w	r2, r1, #3
 8008d76:	1e57      	subs	r7, r2, #1
 8008d78:	2f01      	cmp	r7, #1
 8008d7a:	d96d      	bls.n	8008e58 <HAL_GPIO_Init+0x10c>
 8008d7c:	2a03      	cmp	r2, #3
 8008d7e:	f040 80ae 	bne.w	8008ede <HAL_GPIO_Init+0x192>
 8008d82:	fa02 f20e 	lsl.w	r2, r2, lr
 8008d86:	43d7      	mvns	r7, r2
 8008d88:	6805      	ldr	r5, [r0, #0]
 8008d8a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8008d8e:	ea07 0705 	and.w	r7, r7, r5
 8008d92:	ea42 0207 	orr.w	r2, r2, r7
 8008d96:	6002      	str	r2, [r0, #0]
 8008d98:	d055      	beq.n	8008e46 <HAL_GPIO_Init+0xfa>
 8008d9a:	260f      	movs	r6, #15
 8008d9c:	4d5a      	ldr	r5, [pc, #360]	; (8008f08 <HAL_GPIO_Init+0x1bc>)
 8008d9e:	f003 0703 	and.w	r7, r3, #3
 8008da2:	6a2a      	ldr	r2, [r5, #32]
 8008da4:	00bf      	lsls	r7, r7, #2
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	622a      	str	r2, [r5, #32]
 8008dac:	6a2a      	ldr	r2, [r5, #32]
 8008dae:	fa06 f807 	lsl.w	r8, r6, r7
 8008db2:	f002 0201 	and.w	r2, r2, #1
 8008db6:	9203      	str	r2, [sp, #12]
 8008db8:	9a03      	ldr	r2, [sp, #12]
 8008dba:	f023 0203 	bic.w	r2, r3, #3
 8008dbe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008dc2:	4e52      	ldr	r6, [pc, #328]	; (8008f0c <HAL_GPIO_Init+0x1c0>)
 8008dc4:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008dc8:	6895      	ldr	r5, [r2, #8]
 8008dca:	42b0      	cmp	r0, r6
 8008dcc:	ea25 0508 	bic.w	r5, r5, r8
 8008dd0:	d015      	beq.n	8008dfe <HAL_GPIO_Init+0xb2>
 8008dd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008dd6:	42b0      	cmp	r0, r6
 8008dd8:	f000 808c 	beq.w	8008ef4 <HAL_GPIO_Init+0x1a8>
 8008ddc:	4e4c      	ldr	r6, [pc, #304]	; (8008f10 <HAL_GPIO_Init+0x1c4>)
 8008dde:	42b0      	cmp	r0, r6
 8008de0:	f000 808c 	beq.w	8008efc <HAL_GPIO_Init+0x1b0>
 8008de4:	4e4b      	ldr	r6, [pc, #300]	; (8008f14 <HAL_GPIO_Init+0x1c8>)
 8008de6:	42b0      	cmp	r0, r6
 8008de8:	d07e      	beq.n	8008ee8 <HAL_GPIO_Init+0x19c>
 8008dea:	4e4b      	ldr	r6, [pc, #300]	; (8008f18 <HAL_GPIO_Init+0x1cc>)
 8008dec:	42b0      	cmp	r0, r6
 8008dee:	bf0c      	ite	eq
 8008df0:	f04f 0804 	moveq.w	r8, #4
 8008df4:	f04f 0805 	movne.w	r8, #5
 8008df8:	fa08 f707 	lsl.w	r7, r8, r7
 8008dfc:	433d      	orrs	r5, r7
 8008dfe:	ea6f 070a 	mvn.w	r7, sl
 8008e02:	6095      	str	r5, [r2, #8]
 8008e04:	4a45      	ldr	r2, [pc, #276]	; (8008f1c <HAL_GPIO_Init+0x1d0>)
 8008e06:	03cd      	lsls	r5, r1, #15
 8008e08:	6812      	ldr	r2, [r2, #0]
 8008e0a:	4d44      	ldr	r5, [pc, #272]	; (8008f1c <HAL_GPIO_Init+0x1d0>)
 8008e0c:	bf54      	ite	pl
 8008e0e:	403a      	andpl	r2, r7
 8008e10:	ea4a 0202 	orrmi.w	r2, sl, r2
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	686d      	ldr	r5, [r5, #4]
 8008e18:	038a      	lsls	r2, r1, #14
 8008e1a:	4a40      	ldr	r2, [pc, #256]	; (8008f1c <HAL_GPIO_Init+0x1d0>)
 8008e1c:	bf54      	ite	pl
 8008e1e:	403d      	andpl	r5, r7
 8008e20:	ea4a 0505 	orrmi.w	r5, sl, r5
 8008e24:	6055      	str	r5, [r2, #4]
 8008e26:	6895      	ldr	r5, [r2, #8]
 8008e28:	02ce      	lsls	r6, r1, #11
 8008e2a:	4a3c      	ldr	r2, [pc, #240]	; (8008f1c <HAL_GPIO_Init+0x1d0>)
 8008e2c:	bf54      	ite	pl
 8008e2e:	403d      	andpl	r5, r7
 8008e30:	ea4a 0505 	orrmi.w	r5, sl, r5
 8008e34:	6095      	str	r5, [r2, #8]
 8008e36:	68d2      	ldr	r2, [r2, #12]
 8008e38:	0289      	lsls	r1, r1, #10
 8008e3a:	4938      	ldr	r1, [pc, #224]	; (8008f1c <HAL_GPIO_Init+0x1d0>)
 8008e3c:	bf54      	ite	pl
 8008e3e:	403a      	andpl	r2, r7
 8008e40:	ea4a 0202 	orrmi.w	r2, sl, r2
 8008e44:	60ca      	str	r2, [r1, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	fa34 f203 	lsrs.w	r2, r4, r3
 8008e4c:	f10e 0e02 	add.w	lr, lr, #2
 8008e50:	d188      	bne.n	8008d64 <HAL_GPIO_Init+0x18>
 8008e52:	b005      	add	sp, #20
 8008e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e58:	f04f 0903 	mov.w	r9, #3
 8008e5c:	6886      	ldr	r6, [r0, #8]
 8008e5e:	f8dc 700c 	ldr.w	r7, [ip, #12]
 8008e62:	fa09 f90e 	lsl.w	r9, r9, lr
 8008e66:	ea26 0609 	bic.w	r6, r6, r9
 8008e6a:	fa07 f70e 	lsl.w	r7, r7, lr
 8008e6e:	4337      	orrs	r7, r6
 8008e70:	6087      	str	r7, [r0, #8]
 8008e72:	ea6f 0709 	mvn.w	r7, r9
 8008e76:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8008e7a:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8008e7e:	fa08 f803 	lsl.w	r8, r8, r3
 8008e82:	ea29 0505 	bic.w	r5, r9, r5
 8008e86:	ea48 0505 	orr.w	r5, r8, r5
 8008e8a:	6045      	str	r5, [r0, #4]
 8008e8c:	68c5      	ldr	r5, [r0, #12]
 8008e8e:	2a02      	cmp	r2, #2
 8008e90:	ea05 0807 	and.w	r8, r5, r7
 8008e94:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008e98:	fa02 f20e 	lsl.w	r2, r2, lr
 8008e9c:	fa05 f50e 	lsl.w	r5, r5, lr
 8008ea0:	ea45 0508 	orr.w	r5, r5, r8
 8008ea4:	60c5      	str	r5, [r0, #12]
 8008ea6:	f47f af6f 	bne.w	8008d88 <HAL_GPIO_Init+0x3c>
 8008eaa:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8008eae:	f003 0807 	and.w	r8, r3, #7
 8008eb2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8008eb6:	fa05 f508 	lsl.w	r5, r5, r8
 8008eba:	9501      	str	r5, [sp, #4]
 8008ebc:	250f      	movs	r5, #15
 8008ebe:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008ec2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008ec6:	f8d9 6020 	ldr.w	r6, [r9, #32]
 8008eca:	fa05 f808 	lsl.w	r8, r5, r8
 8008ece:	9d01      	ldr	r5, [sp, #4]
 8008ed0:	ea26 0808 	bic.w	r8, r6, r8
 8008ed4:	ea45 0508 	orr.w	r5, r5, r8
 8008ed8:	f8c9 5020 	str.w	r5, [r9, #32]
 8008edc:	e754      	b.n	8008d88 <HAL_GPIO_Init+0x3c>
 8008ede:	2703      	movs	r7, #3
 8008ee0:	fa07 f70e 	lsl.w	r7, r7, lr
 8008ee4:	43ff      	mvns	r7, r7
 8008ee6:	e7d1      	b.n	8008e8c <HAL_GPIO_Init+0x140>
 8008ee8:	f04f 0803 	mov.w	r8, #3
 8008eec:	fa08 f707 	lsl.w	r7, r8, r7
 8008ef0:	433d      	orrs	r5, r7
 8008ef2:	e784      	b.n	8008dfe <HAL_GPIO_Init+0xb2>
 8008ef4:	fa0b f707 	lsl.w	r7, fp, r7
 8008ef8:	433d      	orrs	r5, r7
 8008efa:	e780      	b.n	8008dfe <HAL_GPIO_Init+0xb2>
 8008efc:	f04f 0802 	mov.w	r8, #2
 8008f00:	fa08 f707 	lsl.w	r7, r8, r7
 8008f04:	433d      	orrs	r5, r7
 8008f06:	e77a      	b.n	8008dfe <HAL_GPIO_Init+0xb2>
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	40020000 	.word	0x40020000
 8008f10:	40020800 	.word	0x40020800
 8008f14:	40020c00 	.word	0x40020c00
 8008f18:	40021000 	.word	0x40021000
 8008f1c:	40010400 	.word	0x40010400

08008f20 <HAL_GPIO_DeInit>:
 8008f20:	2900      	cmp	r1, #0
 8008f22:	f000 8083 	beq.w	800902c <HAL_GPIO_DeInit+0x10c>
 8008f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2701      	movs	r7, #1
 8008f2e:	f04f 090f 	mov.w	r9, #15
 8008f32:	f04f 0a03 	mov.w	sl, #3
 8008f36:	4e3e      	ldr	r6, [pc, #248]	; (8009030 <HAL_GPIO_DeInit+0x110>)
 8008f38:	e051      	b.n	8008fde <HAL_GPIO_DeInit+0xbe>
 8008f3a:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008f3e:	4558      	cmp	r0, fp
 8008f40:	d069      	beq.n	8009016 <HAL_GPIO_DeInit+0xf6>
 8008f42:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8009034 <HAL_GPIO_DeInit+0x114>
 8008f46:	4558      	cmp	r0, fp
 8008f48:	d068      	beq.n	800901c <HAL_GPIO_DeInit+0xfc>
 8008f4a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009038 <HAL_GPIO_DeInit+0x118>
 8008f4e:	4558      	cmp	r0, fp
 8008f50:	d069      	beq.n	8009026 <HAL_GPIO_DeInit+0x106>
 8008f52:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 800903c <HAL_GPIO_DeInit+0x11c>
 8008f56:	4558      	cmp	r0, fp
 8008f58:	bf14      	ite	ne
 8008f5a:	f04f 0b05 	movne.w	fp, #5
 8008f5e:	f04f 0b04 	moveq.w	fp, #4
 8008f62:	fa0b f404 	lsl.w	r4, fp, r4
 8008f66:	45a4      	cmp	ip, r4
 8008f68:	d113      	bne.n	8008f92 <HAL_GPIO_DeInit+0x72>
 8008f6a:	6834      	ldr	r4, [r6, #0]
 8008f6c:	ea24 040e 	bic.w	r4, r4, lr
 8008f70:	6034      	str	r4, [r6, #0]
 8008f72:	6874      	ldr	r4, [r6, #4]
 8008f74:	ea24 040e 	bic.w	r4, r4, lr
 8008f78:	6074      	str	r4, [r6, #4]
 8008f7a:	68b4      	ldr	r4, [r6, #8]
 8008f7c:	ea24 040e 	bic.w	r4, r4, lr
 8008f80:	60b4      	str	r4, [r6, #8]
 8008f82:	68f4      	ldr	r4, [r6, #12]
 8008f84:	ea24 040e 	bic.w	r4, r4, lr
 8008f88:	60f4      	str	r4, [r6, #12]
 8008f8a:	68ac      	ldr	r4, [r5, #8]
 8008f8c:	ea24 0408 	bic.w	r4, r4, r8
 8008f90:	60ac      	str	r4, [r5, #8]
 8008f92:	6805      	ldr	r5, [r0, #0]
 8008f94:	005c      	lsls	r4, r3, #1
 8008f96:	fa0a f404 	lsl.w	r4, sl, r4
 8008f9a:	ea25 0504 	bic.w	r5, r5, r4
 8008f9e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8008fa2:	6005      	str	r5, [r0, #0]
 8008fa4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008fa8:	f003 0507 	and.w	r5, r3, #7
 8008fac:	f8dc e020 	ldr.w	lr, [ip, #32]
 8008fb0:	00ad      	lsls	r5, r5, #2
 8008fb2:	fa09 f505 	lsl.w	r5, r9, r5
 8008fb6:	ea2e 0505 	bic.w	r5, lr, r5
 8008fba:	f8cc 5020 	str.w	r5, [ip, #32]
 8008fbe:	68c5      	ldr	r5, [r0, #12]
 8008fc0:	ea25 0504 	bic.w	r5, r5, r4
 8008fc4:	60c5      	str	r5, [r0, #12]
 8008fc6:	6845      	ldr	r5, [r0, #4]
 8008fc8:	ea25 0202 	bic.w	r2, r5, r2
 8008fcc:	6042      	str	r2, [r0, #4]
 8008fce:	6882      	ldr	r2, [r0, #8]
 8008fd0:	ea22 0404 	bic.w	r4, r2, r4
 8008fd4:	6084      	str	r4, [r0, #8]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	fa31 f203 	lsrs.w	r2, r1, r3
 8008fdc:	d019      	beq.n	8009012 <HAL_GPIO_DeInit+0xf2>
 8008fde:	fa07 f203 	lsl.w	r2, r7, r3
 8008fe2:	ea12 0e01 	ands.w	lr, r2, r1
 8008fe6:	d0f6      	beq.n	8008fd6 <HAL_GPIO_DeInit+0xb6>
 8008fe8:	f023 0503 	bic.w	r5, r3, #3
 8008fec:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8008ff0:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8009040 <HAL_GPIO_DeInit+0x120>
 8008ff4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8008ff8:	f003 0403 	and.w	r4, r3, #3
 8008ffc:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8009000:	00a4      	lsls	r4, r4, #2
 8009002:	fa09 f804 	lsl.w	r8, r9, r4
 8009006:	4558      	cmp	r0, fp
 8009008:	ea08 0c0c 	and.w	ip, r8, ip
 800900c:	d195      	bne.n	8008f3a <HAL_GPIO_DeInit+0x1a>
 800900e:	2400      	movs	r4, #0
 8009010:	e7a9      	b.n	8008f66 <HAL_GPIO_DeInit+0x46>
 8009012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009016:	fa07 f404 	lsl.w	r4, r7, r4
 800901a:	e7a4      	b.n	8008f66 <HAL_GPIO_DeInit+0x46>
 800901c:	f04f 0b02 	mov.w	fp, #2
 8009020:	fa0b f404 	lsl.w	r4, fp, r4
 8009024:	e79f      	b.n	8008f66 <HAL_GPIO_DeInit+0x46>
 8009026:	fa0a f404 	lsl.w	r4, sl, r4
 800902a:	e79c      	b.n	8008f66 <HAL_GPIO_DeInit+0x46>
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	40010400 	.word	0x40010400
 8009034:	40020800 	.word	0x40020800
 8009038:	40020c00 	.word	0x40020c00
 800903c:	40021000 	.word	0x40021000
 8009040:	40020000 	.word	0x40020000

08009044 <HAL_GPIO_ReadPin>:
 8009044:	6903      	ldr	r3, [r0, #16]
 8009046:	4219      	tst	r1, r3
 8009048:	bf14      	ite	ne
 800904a:	2001      	movne	r0, #1
 800904c:	2000      	moveq	r0, #0
 800904e:	4770      	bx	lr

08009050 <HAL_GPIO_WritePin>:
 8009050:	b902      	cbnz	r2, 8009054 <HAL_GPIO_WritePin+0x4>
 8009052:	0409      	lsls	r1, r1, #16
 8009054:	6181      	str	r1, [r0, #24]
 8009056:	4770      	bx	lr

08009058 <HAL_GPIO_TogglePin>:
 8009058:	6943      	ldr	r3, [r0, #20]
 800905a:	ea01 0203 	and.w	r2, r1, r3
 800905e:	ea21 0103 	bic.w	r1, r1, r3
 8009062:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009066:	6181      	str	r1, [r0, #24]
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop

0800906c <HAL_GPIO_EXTI_IRQHandler>:
 800906c:	4a04      	ldr	r2, [pc, #16]	; (8009080 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800906e:	6951      	ldr	r1, [r2, #20]
 8009070:	4201      	tst	r1, r0
 8009072:	d100      	bne.n	8009076 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8009074:	4770      	bx	lr
 8009076:	b508      	push	{r3, lr}
 8009078:	6150      	str	r0, [r2, #20]
 800907a:	f7fe f95d 	bl	8007338 <HAL_GPIO_EXTI_Callback>
 800907e:	bd08      	pop	{r3, pc}
 8009080:	40010400 	.word	0x40010400

08009084 <HAL_I2C_Init>:
 8009084:	2800      	cmp	r0, #0
 8009086:	f000 80b9 	beq.w	80091fc <HAL_I2C_Init+0x178>
 800908a:	b538      	push	{r3, r4, r5, lr}
 800908c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009090:	4604      	mov	r4, r0
 8009092:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 8098 	beq.w	80091cc <HAL_I2C_Init+0x148>
 800909c:	2224      	movs	r2, #36	; 0x24
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	f022 0201 	bic.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f001 fd1c 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 80090c0:	6863      	ldr	r3, [r4, #4]
 80090c2:	494f      	ldr	r1, [pc, #316]	; (8009200 <HAL_I2C_Init+0x17c>)
 80090c4:	428b      	cmp	r3, r1
 80090c6:	d84f      	bhi.n	8009168 <HAL_I2C_Init+0xe4>
 80090c8:	4a4e      	ldr	r2, [pc, #312]	; (8009204 <HAL_I2C_Init+0x180>)
 80090ca:	4290      	cmp	r0, r2
 80090cc:	d97c      	bls.n	80091c8 <HAL_I2C_Init+0x144>
 80090ce:	4d4e      	ldr	r5, [pc, #312]	; (8009208 <HAL_I2C_Init+0x184>)
 80090d0:	005a      	lsls	r2, r3, #1
 80090d2:	fba5 3500 	umull	r3, r5, r5, r0
 80090d6:	1e43      	subs	r3, r0, #1
 80090d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090dc:	f640 7efc 	movw	lr, #4092	; 0xffc
 80090e0:	6822      	ldr	r2, [r4, #0]
 80090e2:	0ca9      	lsrs	r1, r5, #18
 80090e4:	6850      	ldr	r0, [r2, #4]
 80090e6:	f101 0c01 	add.w	ip, r1, #1
 80090ea:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80090ee:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80090f2:	6050      	str	r0, [r2, #4]
 80090f4:	6a11      	ldr	r1, [r2, #32]
 80090f6:	3301      	adds	r3, #1
 80090f8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80090fc:	ea41 010c 	orr.w	r1, r1, ip
 8009100:	6211      	str	r1, [r2, #32]
 8009102:	69d1      	ldr	r1, [r2, #28]
 8009104:	ea13 0f0e 	tst.w	r3, lr
 8009108:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800910c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009110:	d161      	bne.n	80091d6 <HAL_I2C_Init+0x152>
 8009112:	2304      	movs	r3, #4
 8009114:	430b      	orrs	r3, r1
 8009116:	61d3      	str	r3, [r2, #28]
 8009118:	6811      	ldr	r1, [r2, #0]
 800911a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800911e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8009122:	4303      	orrs	r3, r0
 8009124:	430b      	orrs	r3, r1
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	6891      	ldr	r1, [r2, #8]
 800912a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800912e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8009132:	4303      	orrs	r3, r0
 8009134:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8009138:	430b      	orrs	r3, r1
 800913a:	6093      	str	r3, [r2, #8]
 800913c:	68d0      	ldr	r0, [r2, #12]
 800913e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009142:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8009146:	430b      	orrs	r3, r1
 8009148:	4303      	orrs	r3, r0
 800914a:	60d3      	str	r3, [r2, #12]
 800914c:	6813      	ldr	r3, [r2, #0]
 800914e:	2100      	movs	r1, #0
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	2320      	movs	r3, #32
 8009158:	6421      	str	r1, [r4, #64]	; 0x40
 800915a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800915e:	6321      	str	r1, [r4, #48]	; 0x30
 8009160:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
 8009164:	4608      	mov	r0, r1
 8009166:	bd38      	pop	{r3, r4, r5, pc}
 8009168:	4a28      	ldr	r2, [pc, #160]	; (800920c <HAL_I2C_Init+0x188>)
 800916a:	4290      	cmp	r0, r2
 800916c:	d92c      	bls.n	80091c8 <HAL_I2C_Init+0x144>
 800916e:	4d26      	ldr	r5, [pc, #152]	; (8009208 <HAL_I2C_Init+0x184>)
 8009170:	fba5 2c00 	umull	r2, ip, r5, r0
 8009174:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009178:	ea4f 419c 	mov.w	r1, ip, lsr #18
 800917c:	fb02 f101 	mul.w	r1, r2, r1
 8009180:	4d23      	ldr	r5, [pc, #140]	; (8009210 <HAL_I2C_Init+0x18c>)
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	fba5 5101 	umull	r5, r1, r5, r1
 8009188:	6855      	ldr	r5, [r2, #4]
 800918a:	0989      	lsrs	r1, r1, #6
 800918c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8009190:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8009194:	6055      	str	r5, [r2, #4]
 8009196:	6a15      	ldr	r5, [r2, #32]
 8009198:	3101      	adds	r1, #1
 800919a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800919e:	4329      	orrs	r1, r5
 80091a0:	6211      	str	r1, [r2, #32]
 80091a2:	69d1      	ldr	r1, [r2, #28]
 80091a4:	68a5      	ldr	r5, [r4, #8]
 80091a6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80091aa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80091ae:	b9ad      	cbnz	r5, 80091dc <HAL_I2C_Init+0x158>
 80091b0:	3801      	subs	r0, #1
 80091b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80091b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80091ba:	3301      	adds	r3, #1
 80091bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091c0:	b1d3      	cbz	r3, 80091f8 <HAL_I2C_Init+0x174>
 80091c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c6:	e7a5      	b.n	8009114 <HAL_I2C_Init+0x90>
 80091c8:	2001      	movs	r0, #1
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 80091d0:	f7fe fc7e 	bl	8007ad0 <HAL_I2C_MspInit>
 80091d4:	e762      	b.n	800909c <HAL_I2C_Init+0x18>
 80091d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091da:	e79b      	b.n	8009114 <HAL_I2C_Init+0x90>
 80091dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091e0:	3801      	subs	r0, #1
 80091e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80091e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80091ea:	3301      	adds	r3, #1
 80091ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091f0:	b113      	cbz	r3, 80091f8 <HAL_I2C_Init+0x174>
 80091f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091f6:	e78d      	b.n	8009114 <HAL_I2C_Init+0x90>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e78b      	b.n	8009114 <HAL_I2C_Init+0x90>
 80091fc:	2001      	movs	r0, #1
 80091fe:	4770      	bx	lr
 8009200:	000186a0 	.word	0x000186a0
 8009204:	001e847f 	.word	0x001e847f
 8009208:	431bde83 	.word	0x431bde83
 800920c:	003d08ff 	.word	0x003d08ff
 8009210:	10624dd3 	.word	0x10624dd3

08009214 <HAL_I2C_Master_Transmit>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4605      	mov	r5, r0
 800921a:	b083      	sub	sp, #12
 800921c:	4699      	mov	r9, r3
 800921e:	4688      	mov	r8, r1
 8009220:	4692      	mov	sl, r2
 8009222:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009224:	f7fe fedc 	bl	8007fe0 <HAL_GetTick>
 8009228:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800922c:	2b20      	cmp	r3, #32
 800922e:	d003      	beq.n	8009238 <HAL_I2C_Master_Transmit+0x24>
 8009230:	2002      	movs	r0, #2
 8009232:	b003      	add	sp, #12
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	4606      	mov	r6, r0
 800923a:	e005      	b.n	8009248 <HAL_I2C_Master_Transmit+0x34>
 800923c:	f7fe fed0 	bl	8007fe0 <HAL_GetTick>
 8009240:	1b80      	subs	r0, r0, r6
 8009242:	2819      	cmp	r0, #25
 8009244:	f200 80f8 	bhi.w	8009438 <HAL_I2C_Master_Transmit+0x224>
 8009248:	682c      	ldr	r4, [r5, #0]
 800924a:	69a3      	ldr	r3, [r4, #24]
 800924c:	ea6f 0c03 	mvn.w	ip, r3
 8009250:	f01c 0b02 	ands.w	fp, ip, #2
 8009254:	d0f2      	beq.n	800923c <HAL_I2C_Master_Transmit+0x28>
 8009256:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800925a:	2b01      	cmp	r3, #1
 800925c:	d0e8      	beq.n	8009230 <HAL_I2C_Master_Transmit+0x1c>
 800925e:	2301      	movs	r3, #1
 8009260:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	07d9      	lsls	r1, r3, #31
 8009268:	d571      	bpl.n	800934e <HAL_I2C_Master_Transmit+0x13a>
 800926a:	2200      	movs	r2, #0
 800926c:	2021      	movs	r0, #33	; 0x21
 800926e:	2110      	movs	r1, #16
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
 800927c:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
 8009280:	642a      	str	r2, [r5, #64]	; 0x40
 8009282:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
 8009286:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8009288:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800928c:	62ea      	str	r2, [r5, #44]	; 0x2c
 800928e:	852b      	strh	r3, [r5, #40]	; 0x28
 8009290:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009292:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8009296:	2b08      	cmp	r3, #8
 8009298:	d006      	beq.n	80092a8 <HAL_I2C_Master_Transmit+0x94>
 800929a:	2b01      	cmp	r3, #1
 800929c:	d004      	beq.n	80092a8 <HAL_I2C_Master_Transmit+0x94>
 800929e:	4293      	cmp	r3, r2
 80092a0:	d002      	beq.n	80092a8 <HAL_I2C_Master_Transmit+0x94>
 80092a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80092a4:	2b12      	cmp	r3, #18
 80092a6:	d103      	bne.n	80092b0 <HAL_I2C_Master_Transmit+0x9c>
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	1c7b      	adds	r3, r7, #1
 80092b2:	d13e      	bne.n	8009332 <HAL_I2C_Master_Transmit+0x11e>
 80092b4:	6963      	ldr	r3, [r4, #20]
 80092b6:	07d8      	lsls	r0, r3, #31
 80092b8:	d5fc      	bpl.n	80092b4 <HAL_I2C_Master_Transmit+0xa0>
 80092ba:	692b      	ldr	r3, [r5, #16]
 80092bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092c0:	d14a      	bne.n	8009358 <HAL_I2C_Master_Transmit+0x144>
 80092c2:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80092c6:	6121      	str	r1, [r4, #16]
 80092c8:	1c78      	adds	r0, r7, #1
 80092ca:	d004      	beq.n	80092d6 <HAL_I2C_Master_Transmit+0xc2>
 80092cc:	e0dd      	b.n	800948a <HAL_I2C_Master_Transmit+0x276>
 80092ce:	6963      	ldr	r3, [r4, #20]
 80092d0:	055a      	lsls	r2, r3, #21
 80092d2:	f100 80c2 	bmi.w	800945a <HAL_I2C_Master_Transmit+0x246>
 80092d6:	6963      	ldr	r3, [r4, #20]
 80092d8:	0799      	lsls	r1, r3, #30
 80092da:	d5f8      	bpl.n	80092ce <HAL_I2C_Master_Transmit+0xba>
 80092dc:	2200      	movs	r2, #0
 80092de:	9201      	str	r2, [sp, #4]
 80092e0:	6962      	ldr	r2, [r4, #20]
 80092e2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80092e4:	9201      	str	r2, [sp, #4]
 80092e6:	69a2      	ldr	r2, [r4, #24]
 80092e8:	9201      	str	r2, [sp, #4]
 80092ea:	9a01      	ldr	r2, [sp, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d075      	beq.n	80093dc <HAL_I2C_Master_Transmit+0x1c8>
 80092f0:	1c79      	adds	r1, r7, #1
 80092f2:	f040 8081 	bne.w	80093f8 <HAL_I2C_Master_Transmit+0x1e4>
 80092f6:	6963      	ldr	r3, [r4, #20]
 80092f8:	061a      	lsls	r2, r3, #24
 80092fa:	d441      	bmi.n	8009380 <HAL_I2C_Master_Transmit+0x16c>
 80092fc:	6963      	ldr	r3, [r4, #20]
 80092fe:	055b      	lsls	r3, r3, #21
 8009300:	d5f9      	bpl.n	80092f6 <HAL_I2C_Master_Transmit+0xe2>
 8009302:	2200      	movs	r2, #0
 8009304:	2320      	movs	r3, #32
 8009306:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800930a:	6161      	str	r1, [r4, #20]
 800930c:	632a      	str	r2, [r5, #48]	; 0x30
 800930e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 8009312:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 8009316:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009318:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 800931c:	f043 0304 	orr.w	r3, r3, #4
 8009320:	642b      	str	r3, [r5, #64]	; 0x40
 8009322:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009324:	2b04      	cmp	r3, #4
 8009326:	f000 80e6 	beq.w	80094f6 <HAL_I2C_Master_Transmit+0x2e2>
 800932a:	2001      	movs	r0, #1
 800932c:	b003      	add	sp, #12
 800932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009332:	6963      	ldr	r3, [r4, #20]
 8009334:	07d9      	lsls	r1, r3, #31
 8009336:	d4c0      	bmi.n	80092ba <HAL_I2C_Master_Transmit+0xa6>
 8009338:	f7fe fe52 	bl	8007fe0 <HAL_GetTick>
 800933c:	1b80      	subs	r0, r0, r6
 800933e:	4287      	cmp	r7, r0
 8009340:	f0c0 80b3 	bcc.w	80094aa <HAL_I2C_Master_Transmit+0x296>
 8009344:	2f00      	cmp	r7, #0
 8009346:	f000 80b0 	beq.w	80094aa <HAL_I2C_Master_Transmit+0x296>
 800934a:	682c      	ldr	r4, [r5, #0]
 800934c:	e7b0      	b.n	80092b0 <HAL_I2C_Master_Transmit+0x9c>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	f043 0301 	orr.w	r3, r3, #1
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	e788      	b.n	800926a <HAL_I2C_Master_Transmit+0x56>
 8009358:	ea4f 13e8 	mov.w	r3, r8, asr #7
 800935c:	f003 0306 	and.w	r3, r3, #6
 8009360:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	1c7b      	adds	r3, r7, #1
 8009368:	d003      	beq.n	8009372 <HAL_I2C_Master_Transmit+0x15e>
 800936a:	e0b5      	b.n	80094d8 <HAL_I2C_Master_Transmit+0x2c4>
 800936c:	6963      	ldr	r3, [r4, #20]
 800936e:	0559      	lsls	r1, r3, #21
 8009370:	d473      	bmi.n	800945a <HAL_I2C_Master_Transmit+0x246>
 8009372:	6963      	ldr	r3, [r4, #20]
 8009374:	0718      	lsls	r0, r3, #28
 8009376:	d5f9      	bpl.n	800936c <HAL_I2C_Master_Transmit+0x158>
 8009378:	fa5f f388 	uxtb.w	r3, r8
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	e7a3      	b.n	80092c8 <HAL_I2C_Master_Transmit+0xb4>
 8009380:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009382:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
 8009386:	4601      	mov	r1, r0
 8009388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8009390:	6123      	str	r3, [r4, #16]
 8009392:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8009394:	b292      	uxth	r2, r2
 8009396:	3b01      	subs	r3, #1
 8009398:	b29b      	uxth	r3, r3
 800939a:	856b      	strh	r3, [r5, #42]	; 0x2a
 800939c:	6963      	ldr	r3, [r4, #20]
 800939e:	6269      	str	r1, [r5, #36]	; 0x24
 80093a0:	0759      	lsls	r1, r3, #29
 80093a2:	852a      	strh	r2, [r5, #40]	; 0x28
 80093a4:	d50c      	bpl.n	80093c0 <HAL_I2C_Master_Transmit+0x1ac>
 80093a6:	b15a      	cbz	r2, 80093c0 <HAL_I2C_Master_Transmit+0x1ac>
 80093a8:	7843      	ldrb	r3, [r0, #1]
 80093aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80093ae:	6123      	str	r3, [r4, #16]
 80093b0:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80093b2:	3002      	adds	r0, #2
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
 80093bc:	6268      	str	r0, [r5, #36]	; 0x24
 80093be:	856b      	strh	r3, [r5, #42]	; 0x2a
 80093c0:	1c78      	adds	r0, r7, #1
 80093c2:	d129      	bne.n	8009418 <HAL_I2C_Master_Transmit+0x204>
 80093c4:	6963      	ldr	r3, [r4, #20]
 80093c6:	0759      	lsls	r1, r3, #29
 80093c8:	d405      	bmi.n	80093d6 <HAL_I2C_Master_Transmit+0x1c2>
 80093ca:	6963      	ldr	r3, [r4, #20]
 80093cc:	055a      	lsls	r2, r3, #21
 80093ce:	d498      	bmi.n	8009302 <HAL_I2C_Master_Transmit+0xee>
 80093d0:	6963      	ldr	r3, [r4, #20]
 80093d2:	0759      	lsls	r1, r3, #29
 80093d4:	d5f9      	bpl.n	80093ca <HAL_I2C_Master_Transmit+0x1b6>
 80093d6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d189      	bne.n	80092f0 <HAL_I2C_Master_Transmit+0xdc>
 80093dc:	2300      	movs	r3, #0
 80093de:	2120      	movs	r1, #32
 80093e0:	6822      	ldr	r2, [r4, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 80093ee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 80093f2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80093f6:	e71c      	b.n	8009232 <HAL_I2C_Master_Transmit+0x1e>
 80093f8:	6963      	ldr	r3, [r4, #20]
 80093fa:	0618      	lsls	r0, r3, #24
 80093fc:	d4c0      	bmi.n	8009380 <HAL_I2C_Master_Transmit+0x16c>
 80093fe:	6963      	ldr	r3, [r4, #20]
 8009400:	0558      	lsls	r0, r3, #21
 8009402:	f53f af7e 	bmi.w	8009302 <HAL_I2C_Master_Transmit+0xee>
 8009406:	f7fe fdeb 	bl	8007fe0 <HAL_GetTick>
 800940a:	1b80      	subs	r0, r0, r6
 800940c:	4287      	cmp	r7, r0
 800940e:	d379      	bcc.n	8009504 <HAL_I2C_Master_Transmit+0x2f0>
 8009410:	2f00      	cmp	r7, #0
 8009412:	d077      	beq.n	8009504 <HAL_I2C_Master_Transmit+0x2f0>
 8009414:	682c      	ldr	r4, [r5, #0]
 8009416:	e76b      	b.n	80092f0 <HAL_I2C_Master_Transmit+0xdc>
 8009418:	6963      	ldr	r3, [r4, #20]
 800941a:	075b      	lsls	r3, r3, #29
 800941c:	d4db      	bmi.n	80093d6 <HAL_I2C_Master_Transmit+0x1c2>
 800941e:	6963      	ldr	r3, [r4, #20]
 8009420:	055b      	lsls	r3, r3, #21
 8009422:	f53f af6e 	bmi.w	8009302 <HAL_I2C_Master_Transmit+0xee>
 8009426:	f7fe fddb 	bl	8007fe0 <HAL_GetTick>
 800942a:	1b80      	subs	r0, r0, r6
 800942c:	4287      	cmp	r7, r0
 800942e:	d369      	bcc.n	8009504 <HAL_I2C_Master_Transmit+0x2f0>
 8009430:	2f00      	cmp	r7, #0
 8009432:	d067      	beq.n	8009504 <HAL_I2C_Master_Transmit+0x2f0>
 8009434:	682c      	ldr	r4, [r5, #0]
 8009436:	e7c3      	b.n	80093c0 <HAL_I2C_Master_Transmit+0x1ac>
 8009438:	2320      	movs	r3, #32
 800943a:	2002      	movs	r0, #2
 800943c:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
 8009440:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 8009444:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
 8009448:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800944a:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
 800944e:	f043 0320 	orr.w	r3, r3, #32
 8009452:	642b      	str	r3, [r5, #64]	; 0x40
 8009454:	b003      	add	sp, #12
 8009456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945a:	2200      	movs	r2, #0
 800945c:	f46f 6680 	mvn.w	r6, #1024	; 0x400
 8009460:	2120      	movs	r1, #32
 8009462:	2001      	movs	r0, #1
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	6166      	str	r6, [r4, #20]
 800946e:	632a      	str	r2, [r5, #48]	; 0x30
 8009470:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8009474:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 8009478:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800947a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 800947e:	f043 0304 	orr.w	r3, r3, #4
 8009482:	642b      	str	r3, [r5, #64]	; 0x40
 8009484:	b003      	add	sp, #12
 8009486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948a:	6963      	ldr	r3, [r4, #20]
 800948c:	079b      	lsls	r3, r3, #30
 800948e:	f53f af25 	bmi.w	80092dc <HAL_I2C_Master_Transmit+0xc8>
 8009492:	6963      	ldr	r3, [r4, #20]
 8009494:	055b      	lsls	r3, r3, #21
 8009496:	d4e0      	bmi.n	800945a <HAL_I2C_Master_Transmit+0x246>
 8009498:	f7fe fda2 	bl	8007fe0 <HAL_GetTick>
 800949c:	1b80      	subs	r0, r0, r6
 800949e:	4287      	cmp	r7, r0
 80094a0:	d33e      	bcc.n	8009520 <HAL_I2C_Master_Transmit+0x30c>
 80094a2:	2f00      	cmp	r7, #0
 80094a4:	d03c      	beq.n	8009520 <HAL_I2C_Master_Transmit+0x30c>
 80094a6:	682c      	ldr	r4, [r5, #0]
 80094a8:	e70e      	b.n	80092c8 <HAL_I2C_Master_Transmit+0xb4>
 80094aa:	2200      	movs	r2, #0
 80094ac:	2320      	movs	r3, #32
 80094ae:	632a      	str	r2, [r5, #48]	; 0x30
 80094b0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 80094b4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 80094b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80094ba:	6829      	ldr	r1, [r5, #0]
 80094bc:	f043 0320 	orr.w	r3, r3, #32
 80094c0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 80094c4:	642b      	str	r3, [r5, #64]	; 0x40
 80094c6:	680b      	ldr	r3, [r1, #0]
 80094c8:	05da      	lsls	r2, r3, #23
 80094ca:	f57f af2e 	bpl.w	800932a <HAL_I2C_Master_Transmit+0x116>
 80094ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d2:	2001      	movs	r0, #1
 80094d4:	642b      	str	r3, [r5, #64]	; 0x40
 80094d6:	e6ac      	b.n	8009232 <HAL_I2C_Master_Transmit+0x1e>
 80094d8:	6963      	ldr	r3, [r4, #20]
 80094da:	071a      	lsls	r2, r3, #28
 80094dc:	f53f af4c 	bmi.w	8009378 <HAL_I2C_Master_Transmit+0x164>
 80094e0:	6963      	ldr	r3, [r4, #20]
 80094e2:	055a      	lsls	r2, r3, #21
 80094e4:	d4b9      	bmi.n	800945a <HAL_I2C_Master_Transmit+0x246>
 80094e6:	f7fe fd7b 	bl	8007fe0 <HAL_GetTick>
 80094ea:	1b83      	subs	r3, r0, r6
 80094ec:	429f      	cmp	r7, r3
 80094ee:	d317      	bcc.n	8009520 <HAL_I2C_Master_Transmit+0x30c>
 80094f0:	b1b7      	cbz	r7, 8009520 <HAL_I2C_Master_Transmit+0x30c>
 80094f2:	682c      	ldr	r4, [r5, #0]
 80094f4:	e737      	b.n	8009366 <HAL_I2C_Master_Transmit+0x152>
 80094f6:	682a      	ldr	r2, [r5, #0]
 80094f8:	2001      	movs	r0, #1
 80094fa:	6813      	ldr	r3, [r2, #0]
 80094fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e696      	b.n	8009232 <HAL_I2C_Master_Transmit+0x1e>
 8009504:	2200      	movs	r2, #0
 8009506:	2320      	movs	r3, #32
 8009508:	632a      	str	r2, [r5, #48]	; 0x30
 800950a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800950e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 8009512:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009514:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 8009518:	f043 0320 	orr.w	r3, r3, #32
 800951c:	642b      	str	r3, [r5, #64]	; 0x40
 800951e:	e700      	b.n	8009322 <HAL_I2C_Master_Transmit+0x10e>
 8009520:	2200      	movs	r2, #0
 8009522:	2320      	movs	r3, #32
 8009524:	632a      	str	r2, [r5, #48]	; 0x30
 8009526:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800952a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 800952e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009530:	2001      	movs	r0, #1
 8009532:	f043 0320 	orr.w	r3, r3, #32
 8009536:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 800953a:	642b      	str	r3, [r5, #64]	; 0x40
 800953c:	e679      	b.n	8009232 <HAL_I2C_Master_Transmit+0x1e>
 800953e:	bf00      	nop

08009540 <HAL_PCD_Init>:
 8009540:	2800      	cmp	r0, #0
 8009542:	d05d      	beq.n	8009600 <HAL_PCD_Init+0xc0>
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800954a:	4604      	mov	r4, r0
 800954c:	b086      	sub	sp, #24
 800954e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009552:	2b00      	cmp	r3, #0
 8009554:	d04f      	beq.n	80095f6 <HAL_PCD_Init+0xb6>
 8009556:	2303      	movs	r3, #3
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
 800955e:	f002 f831 	bl	800b5c4 <USB_DisableGlobalInt>
 8009562:	6860      	ldr	r0, [r4, #4]
 8009564:	b368      	cbz	r0, 80095c2 <HAL_PCD_Init+0x82>
 8009566:	2200      	movs	r2, #0
 8009568:	f04f 0e01 	mov.w	lr, #1
 800956c:	4611      	mov	r1, r2
 800956e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009572:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009576:	f102 0c01 	add.w	ip, r2, #1
 800957a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800957e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009580:	fa5f f28c 	uxtb.w	r2, ip
 8009584:	4282      	cmp	r2, r0
 8009586:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
 800958a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
 800958e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
 8009592:	6419      	str	r1, [r3, #64]	; 0x40
 8009594:	d3eb      	bcc.n	800956e <HAL_PCD_Init+0x2e>
 8009596:	2200      	movs	r2, #0
 8009598:	4611      	mov	r1, r2
 800959a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800959e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80095a2:	f102 0c01 	add.w	ip, r2, #1
 80095a6:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 80095aa:	fa5f f28c 	uxtb.w	r2, ip
 80095ae:	4282      	cmp	r2, r0
 80095b0:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
 80095b4:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
 80095b8:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
 80095bc:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
 80095c0:	d3eb      	bcc.n	800959a <HAL_PCD_Init+0x5a>
 80095c2:	46a4      	mov	ip, r4
 80095c4:	46ee      	mov	lr, sp
 80095c6:	f85c 6b10 	ldr.w	r6, [ip], #16
 80095ca:	1d25      	adds	r5, r4, #4
 80095cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80095d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80095d4:	f8dc 3000 	ldr.w	r3, [ip]
 80095d8:	4630      	mov	r0, r6
 80095da:	f8ce 3000 	str.w	r3, [lr]
 80095de:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80095e2:	f001 fff9 	bl	800b5d8 <USB_DevInit>
 80095e6:	2000      	movs	r0, #0
 80095e8:	2301      	movs	r3, #1
 80095ea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 80095ee:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
 80095f2:	b006      	add	sp, #24
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
 80095fa:	f003 fd59 	bl	800d0b0 <HAL_PCD_MspInit>
 80095fe:	e7aa      	b.n	8009556 <HAL_PCD_Init+0x16>
 8009600:	2001      	movs	r0, #1
 8009602:	4770      	bx	lr

08009604 <HAL_PCD_Start>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800960a:	2b01      	cmp	r3, #1
 800960c:	d012      	beq.n	8009634 <HAL_PCD_Start+0x30>
 800960e:	4604      	mov	r4, r0
 8009610:	2501      	movs	r5, #1
 8009612:	6800      	ldr	r0, [r0, #0]
 8009614:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
 8009618:	f001 ffca 	bl	800b5b0 <USB_EnableGlobalInt>
 800961c:	4629      	mov	r1, r5
 800961e:	4620      	mov	r0, r4
 8009620:	f003 fd3a 	bl	800d098 <HAL_PCDEx_SetConnectionState>
 8009624:	6820      	ldr	r0, [r4, #0]
 8009626:	f002 fdc7 	bl	800c1b8 <USB_DevConnect>
 800962a:	2300      	movs	r3, #0
 800962c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 8009630:	4618      	mov	r0, r3
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	2002      	movs	r0, #2
 8009636:	bd38      	pop	{r3, r4, r5, pc}

08009638 <HAL_PCD_IRQHandler>:
 8009638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	4604      	mov	r4, r0
 800963e:	6800      	ldr	r0, [r0, #0]
 8009640:	f002 fdbc 	bl	800c1bc <USB_ReadInterrupts>
 8009644:	0406      	lsls	r6, r0, #16
 8009646:	d443      	bmi.n	80096d0 <HAL_PCD_IRQHandler+0x98>
 8009648:	6820      	ldr	r0, [r4, #0]
 800964a:	f002 fdb7 	bl	800c1bc <USB_ReadInterrupts>
 800964e:	0545      	lsls	r5, r0, #21
 8009650:	f100 8180 	bmi.w	8009954 <HAL_PCD_IRQHandler+0x31c>
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	f002 fdb1 	bl	800c1bc <USB_ReadInterrupts>
 800965a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	d007      	beq.n	8009672 <HAL_PCD_IRQHandler+0x3a>
 8009662:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8009672:	f002 fda3 	bl	800c1bc <USB_ReadInterrupts>
 8009676:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800967a:	6820      	ldr	r0, [r4, #0]
 800967c:	d007      	beq.n	800968e <HAL_PCD_IRQHandler+0x56>
 800967e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009686:	041b      	lsls	r3, r3, #16
 8009688:	0c1b      	lsrs	r3, r3, #16
 800968a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800968e:	f002 fd95 	bl	800c1bc <USB_ReadInterrupts>
 8009692:	04c0      	lsls	r0, r0, #19
 8009694:	f100 81f6 	bmi.w	8009a84 <HAL_PCD_IRQHandler+0x44c>
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	f002 fd8f 	bl	800c1bc <USB_ReadInterrupts>
 800969e:	0501      	lsls	r1, r0, #20
 80096a0:	f100 81d5 	bmi.w	8009a4e <HAL_PCD_IRQHandler+0x416>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	f002 fd89 	bl	800c1bc <USB_ReadInterrupts>
 80096aa:	0582      	lsls	r2, r0, #22
 80096ac:	f100 81c2 	bmi.w	8009a34 <HAL_PCD_IRQHandler+0x3fc>
 80096b0:	6820      	ldr	r0, [r4, #0]
 80096b2:	f002 fd83 	bl	800c1bc <USB_ReadInterrupts>
 80096b6:	05c3      	lsls	r3, r0, #23
 80096b8:	d508      	bpl.n	80096cc <HAL_PCD_IRQHandler+0x94>
 80096ba:	6822      	ldr	r2, [r4, #0]
 80096bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80096c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c4:	041b      	lsls	r3, r3, #16
 80096c6:	0c1b      	lsrs	r3, r3, #16
 80096c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80096cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80096d6:	4610      	mov	r0, r2
 80096d8:	041d      	lsls	r5, r3, #16
 80096da:	d5b6      	bpl.n	800964a <HAL_PCD_IRQHandler+0x12>
 80096dc:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8009a2c <HAL_PCD_IRQHandler+0x3f4>
 80096e0:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8009a30 <HAL_PCD_IRQHandler+0x3f8>
 80096e4:	e011      	b.n	800970a <HAL_PCD_IRQHandler+0xd2>
 80096e6:	f011 0110 	ands.w	r1, r1, #16
 80096ea:	f000 8151 	beq.w	8009990 <HAL_PCD_IRQHandler+0x358>
 80096ee:	8801      	ldrh	r1, [r0, #0]
 80096f0:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
 80096f4:	b28b      	uxth	r3, r1
 80096f6:	f040 8176 	bne.w	80099e6 <HAL_PCD_IRQHandler+0x3ae>
 80096fa:	0419      	lsls	r1, r3, #16
 80096fc:	f100 821b 	bmi.w	8009b36 <HAL_PCD_IRQHandler+0x4fe>
 8009700:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009704:	041e      	lsls	r6, r3, #16
 8009706:	f140 811f 	bpl.w	8009948 <HAL_PCD_IRQHandler+0x310>
 800970a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800970e:	b2a9      	uxth	r1, r5
 8009710:	f015 050f 	ands.w	r5, r5, #15
 8009714:	d0e7      	beq.n	80096e6 <HAL_PCD_IRQHandler+0xae>
 8009716:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800971a:	00ae      	lsls	r6, r5, #2
 800971c:	041f      	lsls	r7, r3, #16
 800971e:	fa1f f883 	uxth.w	r8, r3
 8009722:	f100 80a0 	bmi.w	8009866 <HAL_PCD_IRQHandler+0x22e>
 8009726:	f018 0f80 	tst.w	r8, #128	; 0x80
 800972a:	d0e9      	beq.n	8009700 <HAL_PCD_IRQHandler+0xc8>
 800972c:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8009730:	1977      	adds	r7, r6, r5
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea03 0309 	and.w	r3, r3, r9
 8009738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973c:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
 8009740:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8009744:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009748:	2b03      	cmp	r3, #3
 800974a:	f000 80d0 	beq.w	80098ee <HAL_PCD_IRQHandler+0x2b6>
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 80cd 	beq.w	80098ee <HAL_PCD_IRQHandler+0x2b6>
 8009754:	2b02      	cmp	r3, #2
 8009756:	d103      	bne.n	8009760 <HAL_PCD_IRQHandler+0x128>
 8009758:	f418 7f80 	tst.w	r8, #256	; 0x100
 800975c:	f000 80c7 	beq.w	80098ee <HAL_PCD_IRQHandler+0x2b6>
 8009760:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009764:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009768:	b29b      	uxth	r3, r3
 800976a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800976e:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
 8009772:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009776:	f000 8255 	beq.w	8009c24 <HAL_PCD_IRQHandler+0x5ec>
 800977a:	eb06 0c05 	add.w	ip, r6, r5
 800977e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8009782:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8009786:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
 800978a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800978e:	459e      	cmp	lr, r3
 8009790:	f240 834b 	bls.w	8009e2a <HAL_PCD_IRQHandler+0x7f2>
 8009794:	ebae 0e03 	sub.w	lr, lr, r3
 8009798:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
 800979c:	f1be 0f00 	cmp.w	lr, #0
 80097a0:	f000 8346 	beq.w	8009e30 <HAL_PCD_IRQHandler+0x7f8>
 80097a4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 80097a8:	d00f      	beq.n	80097ca <HAL_PCD_IRQHandler+0x192>
 80097aa:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 80097ae:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 80097b2:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 80097b6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80097ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097be:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 80097c2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 80097c6:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
 80097ca:	eb06 0e05 	add.w	lr, r6, r5
 80097ce:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 80097d2:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 80097d6:	f1bc 0f01 	cmp.w	ip, #1
 80097da:	f040 8316 	bne.w	8009e0a <HAL_PCD_IRQHandler+0x7d2>
 80097de:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
 80097e2:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
 80097e6:	eb02 0c03 	add.w	ip, r2, r3
 80097ea:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
 80097ee:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
 80097f2:	441a      	add	r2, r3
 80097f4:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
 80097f8:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 80097fc:	4542      	cmp	r2, r8
 80097fe:	f0c0 83e4 	bcc.w	8009fca <HAL_PCD_IRQHandler+0x992>
 8009802:	eba2 0208 	sub.w	r2, r2, r8
 8009806:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
 800980a:	fa1f f388 	uxth.w	r3, r8
 800980e:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009812:	f1be 0f00 	cmp.w	lr, #0
 8009816:	f040 83cb 	bne.w	8009fb0 <HAL_PCD_IRQHandler+0x978>
 800981a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800981e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009822:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8009826:	b292      	uxth	r2, r2
 8009828:	eb0e 0102 	add.w	r1, lr, r2
 800982c:	f1b8 0f00 	cmp.w	r8, #0
 8009830:	f040 83f8 	bne.w	800a024 <HAL_PCD_IRQHandler+0x9ec>
 8009834:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8009838:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800983c:	0409      	lsls	r1, r1, #16
 800983e:	0c09      	lsrs	r1, r1, #16
 8009840:	f82e 1002 	strh.w	r1, [lr, r2]
 8009844:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8009848:	b289      	uxth	r1, r1
 800984a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800984e:	f82e 1002 	strh.w	r1, [lr, r2]
 8009852:	1972      	adds	r2, r6, r5
 8009854:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009858:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 800985a:	4661      	mov	r1, ip
 800985c:	f002 fcb2 	bl	800c1c4 <USB_WritePMA>
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	4602      	mov	r2, r0
 8009864:	e2d1      	b.n	8009e0a <HAL_PCD_IRQHandler+0x7d2>
 8009866:	f640 738f 	movw	r3, #3983	; 0xf8f
 800986a:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 800986e:	1971      	adds	r1, r6, r5
 8009870:	4013      	ands	r3, r2
 8009872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009876:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
 800987a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800987e:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8009882:	2b00      	cmp	r3, #0
 8009884:	f040 811c 	bne.w	8009ac0 <HAL_PCD_IRQHandler+0x488>
 8009888:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800988c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009890:	b29b      	uxth	r3, r3
 8009892:	3306      	adds	r3, #6
 8009894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009898:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800989c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80098a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098a4:	461f      	mov	r7, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f040 81ac 	bne.w	8009c04 <HAL_PCD_IRQHandler+0x5cc>
 80098ac:	1971      	adds	r1, r6, r5
 80098ae:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80098b2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80098b6:	00c9      	lsls	r1, r1, #3
 80098b8:	443a      	add	r2, r7
 80098ba:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 80098be:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80098c2:	443a      	add	r2, r7
 80098c4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 80098c8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80098cc:	b122      	cbz	r2, 80098d8 <HAL_PCD_IRQHandler+0x2a0>
 80098ce:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80098d2:	42bb      	cmp	r3, r7
 80098d4:	f240 819d 	bls.w	8009c12 <HAL_PCD_IRQHandler+0x5da>
 80098d8:	1973      	adds	r3, r6, r5
 80098da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80098de:	4620      	mov	r0, r4
 80098e0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80098e4:	f003 fc0c 	bl	800d100 <HAL_PCD_DataOutStageCallback>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	4602      	mov	r2, r0
 80098ec:	e71b      	b.n	8009726 <HAL_PCD_IRQHandler+0xee>
 80098ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80098f2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80098fc:	442e      	add	r6, r5
 80098fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009902:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8009906:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800990a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800990c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009910:	429a      	cmp	r2, r3
 8009912:	f240 8108 	bls.w	8009b26 <HAL_PCD_IRQHandler+0x4ee>
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	6432      	str	r2, [r6, #64]	; 0x40
 800991a:	2a00      	cmp	r2, #0
 800991c:	f000 8105 	beq.w	8009b2a <HAL_PCD_IRQHandler+0x4f2>
 8009920:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8009922:	3501      	adds	r5, #1
 8009924:	441a      	add	r2, r3
 8009926:	63f2      	str	r2, [r6, #60]	; 0x3c
 8009928:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800992a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800992e:	4413      	add	r3, r2
 8009930:	6473      	str	r3, [r6, #68]	; 0x44
 8009932:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009936:	f002 f8b7 	bl	800baa8 <USB_EPStartXfer>
 800993a:	6820      	ldr	r0, [r4, #0]
 800993c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009940:	4602      	mov	r2, r0
 8009942:	041e      	lsls	r6, r3, #16
 8009944:	f53f aee1 	bmi.w	800970a <HAL_PCD_IRQHandler+0xd2>
 8009948:	4610      	mov	r0, r2
 800994a:	f002 fc37 	bl	800c1bc <USB_ReadInterrupts>
 800994e:	0545      	lsls	r5, r0, #21
 8009950:	f57f ae80 	bpl.w	8009654 <HAL_PCD_IRQHandler+0x1c>
 8009954:	6822      	ldr	r2, [r4, #0]
 8009956:	4620      	mov	r0, r4
 8009958:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800995c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009960:	041b      	lsls	r3, r3, #16
 8009962:	0c1b      	lsrs	r3, r3, #16
 8009964:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8009968:	f003 fbe2 	bl	800d130 <HAL_PCD_ResetCallback>
 800996c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009970:	2b01      	cmp	r3, #1
 8009972:	f43f ae6f 	beq.w	8009654 <HAL_PCD_IRQHandler+0x1c>
 8009976:	2500      	movs	r5, #0
 8009978:	2301      	movs	r3, #1
 800997a:	4629      	mov	r1, r5
 800997c:	6820      	ldr	r0, [r4, #0]
 800997e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 8009982:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8009986:	f002 fc11 	bl	800c1ac <USB_SetDevAddress>
 800998a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
 800998e:	e661      	b.n	8009654 <HAL_PCD_IRQHandler+0x1c>
 8009990:	8803      	ldrh	r3, [r0, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	ea03 0309 	and.w	r3, r3, r9
 8009998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999c:	8003      	strh	r3, [r0, #0]
 800999e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80099a2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80099b0:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 80099b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80099b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ba:	6463      	str	r3, [r4, #68]	; 0x44
 80099bc:	4413      	add	r3, r2
 80099be:	63e3      	str	r3, [r4, #60]	; 0x3c
 80099c0:	4620      	mov	r0, r4
 80099c2:	f003 fba7 	bl	800d114 <HAL_PCD_DataInStageCallback>
 80099c6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80099ca:	b363      	cbz	r3, 8009a26 <HAL_PCD_IRQHandler+0x3ee>
 80099cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099ce:	bb53      	cbnz	r3, 8009a26 <HAL_PCD_IRQHandler+0x3ee>
 80099d0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099da:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 80099de:	4602      	mov	r2, r0
 80099e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80099e4:	e68c      	b.n	8009700 <HAL_PCD_IRQHandler+0xc8>
 80099e6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80099ea:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099f4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80099f8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80099fc:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a04:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 8009a08:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8009a0c:	f002 fbea 	bl	800c1e4 <USB_ReadPMA>
 8009a10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	4620      	mov	r0, r4
 8009a18:	8811      	ldrh	r1, [r2, #0]
 8009a1a:	400b      	ands	r3, r1
 8009a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a20:	8013      	strh	r3, [r2, #0]
 8009a22:	f003 fb65 	bl	800d0f0 <HAL_PCD_SetupStageCallback>
 8009a26:	6820      	ldr	r0, [r4, #0]
 8009a28:	4602      	mov	r2, r0
 8009a2a:	e669      	b.n	8009700 <HAL_PCD_IRQHandler+0xc8>
 8009a2c:	ffff8f0f 	.word	0xffff8f0f
 8009a30:	ffff8fbf 	.word	0xffff8fbf
 8009a34:	6822      	ldr	r2, [r4, #0]
 8009a36:	4620      	mov	r0, r4
 8009a38:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	0c1b      	lsrs	r3, r3, #16
 8009a44:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8009a48:	f003 fb6e 	bl	800d128 <HAL_PCD_SOFCallback>
 8009a4c:	e630      	b.n	80096b0 <HAL_PCD_IRQHandler+0x78>
 8009a4e:	6822      	ldr	r2, [r4, #0]
 8009a50:	4620      	mov	r0, r4
 8009a52:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f043 0308 	orr.w	r3, r3, #8
 8009a5c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8009a60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a68:	041b      	lsls	r3, r3, #16
 8009a6a:	0c1b      	lsrs	r3, r3, #16
 8009a6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8009a70:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	f043 0304 	orr.w	r3, r3, #4
 8009a7a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8009a7e:	f003 fb69 	bl	800d154 <HAL_PCD_SuspendCallback>
 8009a82:	e60f      	b.n	80096a4 <HAL_PCD_IRQHandler+0x6c>
 8009a84:	6822      	ldr	r2, [r4, #0]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a8c:	f023 0304 	bic.w	r3, r3, #4
 8009a90:	041b      	lsls	r3, r3, #16
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8009a98:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8009a9c:	f023 0308 	bic.w	r3, r3, #8
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	0c1b      	lsrs	r3, r3, #16
 8009aa4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8009aa8:	f003 fb64 	bl	800d174 <HAL_PCD_ResumeCallback>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ab6:	041b      	lsls	r3, r3, #16
 8009ab8:	0c1b      	lsrs	r3, r3, #16
 8009aba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8009abe:	e5ec      	b.n	800969a <HAL_PCD_IRQHandler+0x62>
 8009ac0:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	f000 8120 	beq.w	8009d0a <HAL_PCD_IRQHandler+0x6d2>
 8009aca:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009ace:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	0c1b      	lsrs	r3, r3, #16
 8009ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ae6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8009aea:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009af2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009af6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	d06e      	beq.n	8009bdc <HAL_PCD_IRQHandler+0x5a4>
 8009afe:	3302      	adds	r3, #2
 8009b00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b08:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b10:	461f      	mov	r7, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f43f aeca 	beq.w	80098ac <HAL_PCD_IRQHandler+0x274>
 8009b18:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009b1c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009b20:	f002 fb60 	bl	800c1e4 <USB_ReadPMA>
 8009b24:	e6c2      	b.n	80098ac <HAL_PCD_IRQHandler+0x274>
 8009b26:	2300      	movs	r3, #0
 8009b28:	6433      	str	r3, [r6, #64]	; 0x40
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f003 faf2 	bl	800d114 <HAL_PCD_DataInStageCallback>
 8009b30:	6820      	ldr	r0, [r4, #0]
 8009b32:	4602      	mov	r2, r0
 8009b34:	e5e4      	b.n	8009700 <HAL_PCD_IRQHandler+0xc8>
 8009b36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009b3a:	8802      	ldrh	r2, [r0, #0]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b42:	8003      	strh	r3, [r0, #0]
 8009b44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b48:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009b56:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8009b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b5e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 8009b62:	b193      	cbz	r3, 8009b8a <HAL_PCD_IRQHandler+0x552>
 8009b64:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8009b68:	b179      	cbz	r1, 8009b8a <HAL_PCD_IRQHandler+0x552>
 8009b6a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009b6e:	f002 fb39 	bl	800c1e4 <USB_ReadPMA>
 8009b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b76:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	4413      	add	r3, r2
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8009b84:	f003 fabc 	bl	800d100 <HAL_PCD_DataOutStageCallback>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	8803      	ldrh	r3, [r0, #0]
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	051b      	lsls	r3, r3, #20
 8009b90:	f53f adb6 	bmi.w	8009700 <HAL_PCD_IRQHandler+0xc8>
 8009b94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009b98:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	f040 80a6 	bne.w	8009cf4 <HAL_PCD_IRQHandler+0x6bc>
 8009ba8:	5ae9      	ldrh	r1, [r5, r3]
 8009baa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8009bae:	0409      	lsls	r1, r1, #16
 8009bb0:	0c09      	lsrs	r1, r1, #16
 8009bb2:	52e9      	strh	r1, [r5, r3]
 8009bb4:	5ae9      	ldrh	r1, [r5, r3]
 8009bb6:	b289      	uxth	r1, r1
 8009bb8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009bbc:	52e9      	strh	r1, [r5, r3]
 8009bbe:	8803      	ldrh	r3, [r0, #0]
 8009bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc8:	041b      	lsls	r3, r3, #16
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	8003      	strh	r3, [r0, #0]
 8009bda:	e591      	b.n	8009700 <HAL_PCD_IRQHandler+0xc8>
 8009bdc:	3306      	adds	r3, #6
 8009bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009be2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009be6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bee:	461f      	mov	r7, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f43f ae5b 	beq.w	80098ac <HAL_PCD_IRQHandler+0x274>
 8009bf6:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009bfa:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009bfe:	f002 faf1 	bl	800c1e4 <USB_ReadPMA>
 8009c02:	e653      	b.n	80098ac <HAL_PCD_IRQHandler+0x274>
 8009c04:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009c08:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c0c:	f002 faea 	bl	800c1e4 <USB_ReadPMA>
 8009c10:	e64c      	b.n	80098ac <HAL_PCD_IRQHandler+0x274>
 8009c12:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8009c16:	6820      	ldr	r0, [r4, #0]
 8009c18:	4421      	add	r1, r4
 8009c1a:	f001 ff45 	bl	800baa8 <USB_EPStartXfer>
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	4602      	mov	r2, r0
 8009c22:	e580      	b.n	8009726 <HAL_PCD_IRQHandler+0xee>
 8009c24:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
 8009c28:	1973      	adds	r3, r6, r5
 8009c2a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009c2e:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
 8009c32:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009c36:	45f3      	cmp	fp, lr
 8009c38:	f0c0 80a5 	bcc.w	8009d86 <HAL_PCD_IRQHandler+0x74e>
 8009c3c:	ebab 0c0e 	sub.w	ip, fp, lr
 8009c40:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
 8009c44:	f1bc 0f00 	cmp.w	ip, #0
 8009c48:	f000 809f 	beq.w	8009d8a <HAL_PCD_IRQHandler+0x752>
 8009c4c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009c50:	d10d      	bne.n	8009c6e <HAL_PCD_IRQHandler+0x636>
 8009c52:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	0c1b      	lsrs	r3, r3, #16
 8009c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8009c6e:	1973      	adds	r3, r6, r5
 8009c70:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009c74:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 8009c78:	f1bc 0f01 	cmp.w	ip, #1
 8009c7c:	f040 80c5 	bne.w	8009e0a <HAL_PCD_IRQHandler+0x7d2>
 8009c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c82:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 8009c86:	eb02 0c0e 	add.w	ip, r2, lr
 8009c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c8c:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
 8009c90:	4472      	add	r2, lr
 8009c92:	645a      	str	r2, [r3, #68]	; 0x44
 8009c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c96:	4542      	cmp	r2, r8
 8009c98:	f0c0 81ab 	bcc.w	8009ff2 <HAL_PCD_IRQHandler+0x9ba>
 8009c9c:	eba2 0208 	sub.w	r2, r2, r8
 8009ca0:	649a      	str	r2, [r3, #72]	; 0x48
 8009ca2:	fa1f fe88 	uxth.w	lr, r8
 8009ca6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f040 8194 	bne.w	8009fd8 <HAL_PCD_IRQHandler+0x9a0>
 8009cb0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009cb4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009cb8:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009cbc:	b292      	uxth	r2, r2
 8009cbe:	188b      	adds	r3, r1, r2
 8009cc0:	f1b8 0f00 	cmp.w	r8, #0
 8009cc4:	f040 81d0 	bne.w	800a068 <HAL_PCD_IRQHandler+0xa30>
 8009cc8:	5a8b      	ldrh	r3, [r1, r2]
 8009cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cce:	041b      	lsls	r3, r3, #16
 8009cd0:	0c1b      	lsrs	r3, r3, #16
 8009cd2:	528b      	strh	r3, [r1, r2]
 8009cd4:	5a8b      	ldrh	r3, [r1, r2]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cdc:	528b      	strh	r3, [r1, r2]
 8009cde:	1972      	adds	r2, r6, r5
 8009ce0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009ce4:	4673      	mov	r3, lr
 8009ce6:	4661      	mov	r1, ip
 8009ce8:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009cea:	f002 fa6b 	bl	800c1c4 <USB_WritePMA>
 8009cee:	6820      	ldr	r0, [r4, #0]
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	e08a      	b.n	8009e0a <HAL_PCD_IRQHandler+0x7d2>
 8009cf4:	293e      	cmp	r1, #62	; 0x3e
 8009cf6:	f200 80cb 	bhi.w	8009e90 <HAL_PCD_IRQHandler+0x858>
 8009cfa:	084e      	lsrs	r6, r1, #1
 8009cfc:	07cf      	lsls	r7, r1, #31
 8009cfe:	bf48      	it	mi
 8009d00:	3601      	addmi	r6, #1
 8009d02:	02b1      	lsls	r1, r6, #10
 8009d04:	b289      	uxth	r1, r1
 8009d06:	52e9      	strh	r1, [r5, r3]
 8009d08:	e759      	b.n	8009bbe <HAL_PCD_IRQHandler+0x586>
 8009d0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d0e:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f000 80c7 	beq.w	8009ea6 <HAL_PCD_IRQHandler+0x86e>
 8009d18:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009d1c:	3302      	adds	r3, #2
 8009d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009d26:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009d2a:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
 8009d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d32:	459c      	cmp	ip, r3
 8009d34:	461f      	mov	r7, r3
 8009d36:	f0c0 8112 	bcc.w	8009f5e <HAL_PCD_IRQHandler+0x926>
 8009d3a:	ebac 0c03 	sub.w	ip, ip, r3
 8009d3e:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
 8009d42:	f1bc 0f00 	cmp.w	ip, #0
 8009d46:	f000 810e 	beq.w	8009f66 <HAL_PCD_IRQHandler+0x92e>
 8009d4a:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009d4e:	d00d      	beq.n	8009d6c <HAL_PCD_IRQHandler+0x734>
 8009d50:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009d54:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009d58:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009d5c:	0409      	lsls	r1, r1, #16
 8009d5e:	0c09      	lsrs	r1, r1, #16
 8009d60:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009d64:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009d68:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 80c3 	beq.w	8009ef8 <HAL_PCD_IRQHandler+0x8c0>
 8009d72:	1971      	adds	r1, r6, r5
 8009d74:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009d78:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009d7c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009d80:	f002 fa30 	bl	800c1e4 <USB_ReadPMA>
 8009d84:	e592      	b.n	80098ac <HAL_PCD_IRQHandler+0x274>
 8009d86:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
 8009d8a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 80be 	bne.w	8009f10 <HAL_PCD_IRQHandler+0x8d8>
 8009d94:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009d98:	010b      	lsls	r3, r1, #4
 8009d9a:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009d9e:	4406      	add	r6, r0
 8009da0:	b2ad      	uxth	r5, r5
 8009da2:	5b72      	ldrh	r2, [r6, r5]
 8009da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009da8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009dac:	0412      	lsls	r2, r2, #16
 8009dae:	0c12      	lsrs	r2, r2, #16
 8009db0:	5372      	strh	r2, [r6, r5]
 8009db2:	5b72      	ldrh	r2, [r6, r5]
 8009db4:	4403      	add	r3, r0
 8009db6:	b292      	uxth	r2, r2
 8009db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dbc:	5372      	strh	r2, [r6, r5]
 8009dbe:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009dc2:	b280      	uxth	r0, r0
 8009dc4:	5a1a      	ldrh	r2, [r3, r0]
 8009dc6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009dca:	0412      	lsls	r2, r2, #16
 8009dcc:	0c12      	lsrs	r2, r2, #16
 8009dce:	521a      	strh	r2, [r3, r0]
 8009dd0:	5a1a      	ldrh	r2, [r3, r0]
 8009dd2:	b292      	uxth	r2, r2
 8009dd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dd8:	521a      	strh	r2, [r3, r0]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f003 f99a 	bl	800d114 <HAL_PCD_DataInStageCallback>
 8009de0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009de4:	6820      	ldr	r0, [r4, #0]
 8009de6:	d183      	bne.n	8009cf0 <HAL_PCD_IRQHandler+0x6b8>
 8009de8:	4602      	mov	r2, r0
 8009dea:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009dee:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	0c1b      	lsrs	r3, r3, #16
 8009dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e06:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8009e0a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009e0e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	ea03 030a 	and.w	r3, r3, sl
 8009e18:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e24:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8009e28:	e46a      	b.n	8009700 <HAL_PCD_IRQHandler+0xc8>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
 8009e30:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d17f      	bne.n	8009f38 <HAL_PCD_IRQHandler+0x900>
 8009e38:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009e3c:	010b      	lsls	r3, r1, #4
 8009e3e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009e42:	4406      	add	r6, r0
 8009e44:	b2ad      	uxth	r5, r5
 8009e46:	5b72      	ldrh	r2, [r6, r5]
 8009e48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e4c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009e50:	0412      	lsls	r2, r2, #16
 8009e52:	0c12      	lsrs	r2, r2, #16
 8009e54:	5372      	strh	r2, [r6, r5]
 8009e56:	5b72      	ldrh	r2, [r6, r5]
 8009e58:	4403      	add	r3, r0
 8009e5a:	b292      	uxth	r2, r2
 8009e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e60:	5372      	strh	r2, [r6, r5]
 8009e62:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009e66:	b280      	uxth	r0, r0
 8009e68:	5a1a      	ldrh	r2, [r3, r0]
 8009e6a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009e6e:	0412      	lsls	r2, r2, #16
 8009e70:	0c12      	lsrs	r2, r2, #16
 8009e72:	521a      	strh	r2, [r3, r0]
 8009e74:	5a1a      	ldrh	r2, [r3, r0]
 8009e76:	b292      	uxth	r2, r2
 8009e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e7c:	521a      	strh	r2, [r3, r0]
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f003 f948 	bl	800d114 <HAL_PCD_DataInStageCallback>
 8009e84:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	d1ad      	bne.n	8009de8 <HAL_PCD_IRQHandler+0x7b0>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	e7bc      	b.n	8009e0a <HAL_PCD_IRQHandler+0x7d2>
 8009e90:	094e      	lsrs	r6, r1, #5
 8009e92:	06c9      	lsls	r1, r1, #27
 8009e94:	4989      	ldr	r1, [pc, #548]	; (800a0bc <HAL_PCD_IRQHandler+0xa84>)
 8009e96:	bf08      	it	eq
 8009e98:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009e9c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009ea0:	b289      	uxth	r1, r1
 8009ea2:	52e9      	strh	r1, [r5, r3]
 8009ea4:	e68b      	b.n	8009bbe <HAL_PCD_IRQHandler+0x586>
 8009ea6:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009eaa:	3306      	adds	r3, #6
 8009eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009eb4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009eb8:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
 8009ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ec0:	459e      	cmp	lr, r3
 8009ec2:	461f      	mov	r7, r3
 8009ec4:	d360      	bcc.n	8009f88 <HAL_PCD_IRQHandler+0x950>
 8009ec6:	ebae 0e03 	sub.w	lr, lr, r3
 8009eca:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
 8009ece:	f1be 0f00 	cmp.w	lr, #0
 8009ed2:	d05b      	beq.n	8009f8c <HAL_PCD_IRQHandler+0x954>
 8009ed4:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009ed8:	d10d      	bne.n	8009ef6 <HAL_PCD_IRQHandler+0x8be>
 8009eda:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009ede:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009ee2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009ee6:	0409      	lsls	r1, r1, #16
 8009ee8:	0c09      	lsrs	r1, r1, #16
 8009eea:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009eee:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009ef2:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009ef6:	b90b      	cbnz	r3, 8009efc <HAL_PCD_IRQHandler+0x8c4>
 8009ef8:	461f      	mov	r7, r3
 8009efa:	e4d7      	b.n	80098ac <HAL_PCD_IRQHandler+0x274>
 8009efc:	1971      	adds	r1, r6, r5
 8009efe:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009f02:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009f06:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009f0a:	f002 f96b 	bl	800c1e4 <USB_ReadPMA>
 8009f0e:	e4cd      	b.n	80098ac <HAL_PCD_IRQHandler+0x274>
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	f47f af62 	bne.w	8009dda <HAL_PCD_IRQHandler+0x7a2>
 8009f16:	2500      	movs	r5, #0
 8009f18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f1c:	010b      	lsls	r3, r1, #4
 8009f1e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009f22:	b292      	uxth	r2, r2
 8009f24:	4406      	add	r6, r0
 8009f26:	52b5      	strh	r5, [r6, r2]
 8009f28:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f30:	4403      	add	r3, r0
 8009f32:	b292      	uxth	r2, r2
 8009f34:	529d      	strh	r5, [r3, r2]
 8009f36:	e750      	b.n	8009dda <HAL_PCD_IRQHandler+0x7a2>
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d1a0      	bne.n	8009e7e <HAL_PCD_IRQHandler+0x846>
 8009f3c:	2500      	movs	r5, #0
 8009f3e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f42:	010b      	lsls	r3, r1, #4
 8009f44:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009f48:	b292      	uxth	r2, r2
 8009f4a:	4406      	add	r6, r0
 8009f4c:	52b5      	strh	r5, [r6, r2]
 8009f4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009f52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f56:	4403      	add	r3, r0
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	529d      	strh	r5, [r3, r2]
 8009f5c:	e78f      	b.n	8009e7e <HAL_PCD_IRQHandler+0x846>
 8009f5e:	f04f 0c00 	mov.w	ip, #0
 8009f62:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
 8009f66:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009f6a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009f6e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009f72:	0409      	lsls	r1, r1, #16
 8009f74:	0c09      	lsrs	r1, r1, #16
 8009f76:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009f7a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009f7e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009f82:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009f86:	e6e0      	b.n	8009d4a <HAL_PCD_IRQHandler+0x712>
 8009f88:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
 8009f8c:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009f90:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009f94:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009f98:	0409      	lsls	r1, r1, #16
 8009f9a:	0c09      	lsrs	r1, r1, #16
 8009f9c:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009fa0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009fa4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009fa8:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009fac:	e792      	b.n	8009ed4 <HAL_PCD_IRQHandler+0x89c>
 8009fae:	b293      	uxth	r3, r2
 8009fb0:	f1be 0f01 	cmp.w	lr, #1
 8009fb4:	f47f ac4d 	bne.w	8009852 <HAL_PCD_IRQHandler+0x21a>
 8009fb8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009fbc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009fc0:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009fc4:	b292      	uxth	r2, r2
 8009fc6:	528b      	strh	r3, [r1, r2]
 8009fc8:	e443      	b.n	8009852 <HAL_PCD_IRQHandler+0x21a>
 8009fca:	b9ba      	cbnz	r2, 8009ffc <HAL_PCD_IRQHandler+0x9c4>
 8009fcc:	4698      	mov	r8, r3
 8009fce:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 8009fd2:	e41c      	b.n	800980e <HAL_PCD_IRQHandler+0x1d6>
 8009fd4:	fa1f fe82 	uxth.w	lr, r2
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	f47f ae80 	bne.w	8009cde <HAL_PCD_IRQHandler+0x6a6>
 8009fde:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009fe2:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 8009fe6:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f822 e003 	strh.w	lr, [r2, r3]
 8009ff0:	e675      	b.n	8009cde <HAL_PCD_IRQHandler+0x6a6>
 8009ff2:	bb22      	cbnz	r2, 800a03e <HAL_PCD_IRQHandler+0xa06>
 8009ff4:	46f0      	mov	r8, lr
 8009ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009ffa:	e654      	b.n	8009ca6 <HAL_PCD_IRQHandler+0x66e>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
 800a002:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
 800a006:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 800a00a:	f1be 0f00 	cmp.w	lr, #0
 800a00e:	d1ce      	bne.n	8009fae <HAL_PCD_IRQHandler+0x976>
 800a010:	4690      	mov	r8, r2
 800a012:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a016:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800a020:	4419      	add	r1, r3
 800a022:	b293      	uxth	r3, r2
 800a024:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a028:	d82b      	bhi.n	800a082 <HAL_PCD_IRQHandler+0xa4a>
 800a02a:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a02e:	f018 0f01 	tst.w	r8, #1
 800a032:	bf18      	it	ne
 800a034:	3201      	addne	r2, #1
 800a036:	0292      	lsls	r2, r2, #10
 800a038:	b292      	uxth	r2, r2
 800a03a:	800a      	strh	r2, [r1, #0]
 800a03c:	e409      	b.n	8009852 <HAL_PCD_IRQHandler+0x21a>
 800a03e:	f04f 0e00 	mov.w	lr, #0
 800a042:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
 800a046:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 800a04a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1c0      	bne.n	8009fd4 <HAL_PCD_IRQHandler+0x99c>
 800a052:	4690      	mov	r8, r2
 800a054:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a058:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a05c:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 800a060:	b29b      	uxth	r3, r3
 800a062:	440b      	add	r3, r1
 800a064:	fa1f fe82 	uxth.w	lr, r2
 800a068:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 800a06c:	d818      	bhi.n	800a0a0 <HAL_PCD_IRQHandler+0xa68>
 800a06e:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800a072:	f018 0f01 	tst.w	r8, #1
 800a076:	bf18      	it	ne
 800a078:	3201      	addne	r2, #1
 800a07a:	0292      	lsls	r2, r2, #10
 800a07c:	b292      	uxth	r2, r2
 800a07e:	801a      	strh	r2, [r3, #0]
 800a080:	e62d      	b.n	8009cde <HAL_PCD_IRQHandler+0x6a6>
 800a082:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a086:	f8df e034 	ldr.w	lr, [pc, #52]	; 800a0bc <HAL_PCD_IRQHandler+0xa84>
 800a08a:	f018 0f1f 	tst.w	r8, #31
 800a08e:	bf08      	it	eq
 800a090:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a094:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 800a098:	b292      	uxth	r2, r2
 800a09a:	800a      	strh	r2, [r1, #0]
 800a09c:	f7ff bbd9 	b.w	8009852 <HAL_PCD_IRQHandler+0x21a>
 800a0a0:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800a0a4:	4905      	ldr	r1, [pc, #20]	; (800a0bc <HAL_PCD_IRQHandler+0xa84>)
 800a0a6:	f018 0f1f 	tst.w	r8, #31
 800a0aa:	bf08      	it	eq
 800a0ac:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800a0b0:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 800a0b4:	b292      	uxth	r2, r2
 800a0b6:	801a      	strh	r2, [r3, #0]
 800a0b8:	e611      	b.n	8009cde <HAL_PCD_IRQHandler+0x6a6>
 800a0ba:	bf00      	nop
 800a0bc:	ffff8000 	.word	0xffff8000

0800a0c0 <HAL_PCD_SetAddress>:
 800a0c0:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800a0c4:	2a01      	cmp	r2, #1
 800a0c6:	d00e      	beq.n	800a0e6 <HAL_PCD_SetAddress+0x26>
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	6800      	ldr	r0, [r0, #0]
 800a0d0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
 800a0d4:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
 800a0d8:	f002 f868 	bl	800c1ac <USB_SetDevAddress>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	bd10      	pop	{r4, pc}
 800a0e6:	2002      	movs	r0, #2
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop

0800a0ec <HAL_PCD_EP_Open>:
 800a0ec:	f001 0c07 	and.w	ip, r1, #7
 800a0f0:	0609      	lsls	r1, r1, #24
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	d425      	bmi.n	800a144 <HAL_PCD_EP_Open+0x58>
 800a0f8:	f04f 0e00 	mov.w	lr, #0
 800a0fc:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 800a100:	00c0      	lsls	r0, r0, #3
 800a102:	f500 71b4 	add.w	r1, r0, #360	; 0x168
 800a106:	4420      	add	r0, r4
 800a108:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
 800a10c:	4421      	add	r1, r4
 800a10e:	610a      	str	r2, [r1, #16]
 800a110:	784a      	ldrb	r2, [r1, #1]
 800a112:	f881 c000 	strb.w	ip, [r1]
 800a116:	70cb      	strb	r3, [r1, #3]
 800a118:	b10a      	cbz	r2, 800a11e <HAL_PCD_EP_Open+0x32>
 800a11a:	f8a1 c00e 	strh.w	ip, [r1, #14]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	bf04      	itt	eq
 800a122:	2300      	moveq	r3, #0
 800a124:	710b      	strbeq	r3, [r1, #4]
 800a126:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d019      	beq.n	800a162 <HAL_PCD_EP_Open+0x76>
 800a12e:	2301      	movs	r3, #1
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a136:	f001 fa63 	bl	800b600 <USB_ActivateEndpoint>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a140:	4618      	mov	r0, r3
 800a142:	bd10      	pop	{r4, pc}
 800a144:	f10c 0101 	add.w	r1, ip, #1
 800a148:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a14c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a150:	2001      	movs	r0, #1
 800a152:	7048      	strb	r0, [r1, #1]
 800a154:	eb0c 0100 	add.w	r1, ip, r0
 800a158:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a15c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a160:	e7d5      	b.n	800a10e <HAL_PCD_EP_Open+0x22>
 800a162:	2002      	movs	r0, #2
 800a164:	bd10      	pop	{r4, pc}
 800a166:	bf00      	nop

0800a168 <HAL_PCD_EP_Close>:
 800a168:	060b      	lsls	r3, r1, #24
 800a16a:	b510      	push	{r4, lr}
 800a16c:	4604      	mov	r4, r0
 800a16e:	d41b      	bmi.n	800a1a8 <HAL_PCD_EP_Close+0x40>
 800a170:	f001 0307 	and.w	r3, r1, #7
 800a174:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a178:	00d2      	lsls	r2, r2, #3
 800a17a:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a17e:	4401      	add	r1, r0
 800a180:	4402      	add	r2, r0
 800a182:	2000      	movs	r0, #0
 800a184:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
 800a188:	700b      	strb	r3, [r1, #0]
 800a18a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d019      	beq.n	800a1c6 <HAL_PCD_EP_Close+0x5e>
 800a192:	2301      	movs	r3, #1
 800a194:	6820      	ldr	r0, [r4, #0]
 800a196:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a19a:	f001 fba5 	bl	800b8e8 <USB_DeactivateEndpoint>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	bd10      	pop	{r4, pc}
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	f001 0307 	and.w	r3, r1, #7
 800a1ae:	181a      	adds	r2, r3, r0
 800a1b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a1b4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	7050      	strb	r0, [r2, #1]
 800a1bc:	700b      	strb	r3, [r1, #0]
 800a1be:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d1e5      	bne.n	800a192 <HAL_PCD_EP_Close+0x2a>
 800a1c6:	2002      	movs	r0, #2
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	bf00      	nop

0800a1cc <HAL_PCD_EP_Receive>:
 800a1cc:	b510      	push	{r4, lr}
 800a1ce:	2400      	movs	r4, #0
 800a1d0:	f001 0e07 	and.w	lr, r1, #7
 800a1d4:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 800a1d8:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
 800a1dc:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
 800a1e0:	6800      	ldr	r0, [r0, #0]
 800a1e2:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
 800a1e6:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
 800a1ea:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
 800a1ee:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
 800a1f2:	f001 fc59 	bl	800baa8 <USB_EPStartXfer>
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	bf00      	nop

0800a1fc <HAL_PCD_EP_GetRxCount>:
 800a1fc:	f001 0107 	and.w	r1, r1, #7
 800a200:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a204:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a208:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop

0800a210 <HAL_PCD_EP_Transmit>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	2601      	movs	r6, #1
 800a214:	2500      	movs	r5, #0
 800a216:	4604      	mov	r4, r0
 800a218:	f001 0e07 	and.w	lr, r1, #7
 800a21c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 800a220:	eb0e 0106 	add.w	r1, lr, r6
 800a224:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800a228:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a22c:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
 800a230:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
 800a234:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
 800a238:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
 800a23c:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
 800a240:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 800a244:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
 800a248:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800a24c:	6800      	ldr	r0, [r0, #0]
 800a24e:	f001 fc2b 	bl	800baa8 <USB_EPStartXfer>
 800a252:	4628      	mov	r0, r5
 800a254:	bd70      	pop	{r4, r5, r6, pc}
 800a256:	bf00      	nop

0800a258 <HAL_PCD_EP_SetStall>:
 800a258:	6843      	ldr	r3, [r0, #4]
 800a25a:	b510      	push	{r4, lr}
 800a25c:	4604      	mov	r4, r0
 800a25e:	f001 0007 	and.w	r0, r1, #7
 800a262:	4298      	cmp	r0, r3
 800a264:	d82d      	bhi.n	800a2c2 <HAL_PCD_EP_SetStall+0x6a>
 800a266:	060b      	lsls	r3, r1, #24
 800a268:	d41a      	bmi.n	800a2a0 <HAL_PCD_EP_SetStall+0x48>
 800a26a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a26e:	00c9      	lsls	r1, r1, #3
 800a270:	f501 72b4 	add.w	r2, r1, #360	; 0x168
 800a274:	1863      	adds	r3, r4, r1
 800a276:	18a1      	adds	r1, r4, r2
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800a27e:	2301      	movs	r3, #1
 800a280:	7008      	strb	r0, [r1, #0]
 800a282:	708b      	strb	r3, [r1, #2]
 800a284:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a288:	429a      	cmp	r2, r3
 800a28a:	d018      	beq.n	800a2be <HAL_PCD_EP_SetStall+0x66>
 800a28c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	f001 ff13 	bl	800c0bc <USB_EPSetStall>
 800a296:	2300      	movs	r3, #0
 800a298:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a29c:	4618      	mov	r0, r3
 800a29e:	bd10      	pop	{r4, pc}
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	1883      	adds	r3, r0, r2
 800a2a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a2a8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a2ac:	705a      	strb	r2, [r3, #1]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	7008      	strb	r0, [r1, #0]
 800a2b4:	708b      	strb	r3, [r1, #2]
 800a2b6:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d1e6      	bne.n	800a28c <HAL_PCD_EP_SetStall+0x34>
 800a2be:	2002      	movs	r0, #2
 800a2c0:	bd10      	pop	{r4, pc}
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	bf00      	nop

0800a2c8 <HAL_PCD_EP_ClrStall>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	6843      	ldr	r3, [r0, #4]
 800a2cc:	f001 020f 	and.w	r2, r1, #15
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d832      	bhi.n	800a33a <HAL_PCD_EP_ClrStall+0x72>
 800a2d4:	060b      	lsls	r3, r1, #24
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	d41c      	bmi.n	800a314 <HAL_PCD_EP_ClrStall+0x4c>
 800a2da:	f001 0307 	and.w	r3, r1, #7
 800a2de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a2e2:	00d2      	lsls	r2, r2, #3
 800a2e4:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a2e8:	4401      	add	r1, r0
 800a2ea:	4402      	add	r2, r0
 800a2ec:	2500      	movs	r5, #0
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
 800a2f4:	700b      	strb	r3, [r1, #0]
 800a2f6:	708d      	strb	r5, [r1, #2]
 800a2f8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d01a      	beq.n	800a336 <HAL_PCD_EP_ClrStall+0x6e>
 800a300:	2301      	movs	r3, #1
 800a302:	6820      	ldr	r0, [r4, #0]
 800a304:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
 800a308:	f001 ff00 	bl	800c10c <USB_EPClearStall>
 800a30c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
 800a310:	4628      	mov	r0, r5
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	2001      	movs	r0, #1
 800a316:	f001 0307 	and.w	r3, r1, #7
 800a31a:	181a      	adds	r2, r3, r0
 800a31c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a320:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800a324:	4611      	mov	r1, r2
 800a326:	2500      	movs	r5, #0
 800a328:	7050      	strb	r0, [r2, #1]
 800a32a:	700b      	strb	r3, [r1, #0]
 800a32c:	708d      	strb	r5, [r1, #2]
 800a32e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a332:	2b01      	cmp	r3, #1
 800a334:	d1e4      	bne.n	800a300 <HAL_PCD_EP_ClrStall+0x38>
 800a336:	2002      	movs	r0, #2
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	2001      	movs	r0, #1
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	bf00      	nop

0800a340 <HAL_PCDEx_PMAConfig>:
 800a340:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a344:	d00b      	beq.n	800a35e <HAL_PCDEx_PMAConfig+0x1e>
 800a346:	f001 0107 	and.w	r1, r1, #7
 800a34a:	3101      	adds	r1, #1
 800a34c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a350:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a354:	b95a      	cbnz	r2, 800a36e <HAL_PCDEx_PMAConfig+0x2e>
 800a356:	2000      	movs	r0, #0
 800a358:	80cb      	strh	r3, [r1, #6]
 800a35a:	730a      	strb	r2, [r1, #12]
 800a35c:	4770      	bx	lr
 800a35e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a362:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a366:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	d0f3      	beq.n	800a356 <HAL_PCDEx_PMAConfig+0x16>
 800a36e:	2201      	movs	r2, #1
 800a370:	2000      	movs	r0, #0
 800a372:	608b      	str	r3, [r1, #8]
 800a374:	730a      	strb	r2, [r1, #12]
 800a376:	4770      	bx	lr

0800a378 <RCC_SetFlashLatencyFromMSIRange>:
 800a378:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800a37a:	b082      	sub	sp, #8
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800a382:	d116      	bne.n	800a3b2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a386:	00d2      	lsls	r2, r2, #3
 800a388:	d420      	bmi.n	800a3cc <RCC_SetFlashLatencyFromMSIRange+0x54>
 800a38a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a38c:	4919      	ldr	r1, [pc, #100]	; (800a3f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a38e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a392:	625a      	str	r2, [r3, #36]	; 0x24
 800a394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a396:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a39a:	9201      	str	r2, [sp, #4]
 800a39c:	9a01      	ldr	r2, [sp, #4]
 800a39e:	680a      	ldr	r2, [r1, #0]
 800a3a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a3a2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
 800a3a6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800a3aa:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a3ae:	6259      	str	r1, [r3, #36]	; 0x24
 800a3b0:	d013      	beq.n	800a3da <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	4a10      	ldr	r2, [pc, #64]	; (800a3f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a3b6:	6813      	ldr	r3, [r2, #0]
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	4303      	orrs	r3, r0
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	6813      	ldr	r3, [r2, #0]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	4058      	eors	r0, r3
 800a3c8:	b002      	add	sp, #8
 800a3ca:	4770      	bx	lr
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
 800a3d4:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a3d8:	d1eb      	bne.n	800a3b2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a3da:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800a3de:	d1e8      	bne.n	800a3b2 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a3e0:	4a05      	ldr	r2, [pc, #20]	; (800a3f8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	6813      	ldr	r3, [r2, #0]
 800a3e6:	f043 0304 	orr.w	r3, r3, #4
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	e7e2      	b.n	800a3b4 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800a3ee:	bf00      	nop
 800a3f0:	40023800 	.word	0x40023800
 800a3f4:	40007000 	.word	0x40007000
 800a3f8:	40023c00 	.word	0x40023c00

0800a3fc <HAL_RCC_OscConfig>:
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f000 81f8 	beq.w	800a7f2 <HAL_RCC_OscConfig+0x3f6>
 800a402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a406:	4aa2      	ldr	r2, [pc, #648]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a408:	6803      	ldr	r3, [r0, #0]
 800a40a:	6895      	ldr	r5, [r2, #8]
 800a40c:	6896      	ldr	r6, [r2, #8]
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	4604      	mov	r4, r0
 800a412:	b083      	sub	sp, #12
 800a414:	f005 050c 	and.w	r5, r5, #12
 800a418:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
 800a41c:	d52e      	bpl.n	800a47c <HAL_RCC_OscConfig+0x80>
 800a41e:	2d08      	cmp	r5, #8
 800a420:	f000 8128 	beq.w	800a674 <HAL_RCC_OscConfig+0x278>
 800a424:	2d0c      	cmp	r5, #12
 800a426:	f000 8122 	beq.w	800a66e <HAL_RCC_OscConfig+0x272>
 800a42a:	6863      	ldr	r3, [r4, #4]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d00f      	beq.n	800a450 <HAL_RCC_OscConfig+0x54>
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 8180 	beq.w	800a736 <HAL_RCC_OscConfig+0x33a>
 800a436:	2b05      	cmp	r3, #5
 800a438:	4b95      	ldr	r3, [pc, #596]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	f000 81db 	beq.w	800a7f6 <HAL_RCC_OscConfig+0x3fa>
 800a440:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a444:	601a      	str	r2, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e004      	b.n	800a45a <HAL_RCC_OscConfig+0x5e>
 800a450:	4a8f      	ldr	r2, [pc, #572]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a452:	6813      	ldr	r3, [r2, #0]
 800a454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	f7fd fdc1 	bl	8007fe0 <HAL_GetTick>
 800a45e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800a690 <HAL_RCC_OscConfig+0x294>
 800a462:	4607      	mov	r7, r0
 800a464:	e005      	b.n	800a472 <HAL_RCC_OscConfig+0x76>
 800a466:	f7fd fdbb 	bl	8007fe0 <HAL_GetTick>
 800a46a:	1bc0      	subs	r0, r0, r7
 800a46c:	2864      	cmp	r0, #100	; 0x64
 800a46e:	f200 815e 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a472:	f8d8 3000 	ldr.w	r3, [r8]
 800a476:	039b      	lsls	r3, r3, #14
 800a478:	d5f5      	bpl.n	800a466 <HAL_RCC_OscConfig+0x6a>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	0799      	lsls	r1, r3, #30
 800a47e:	d522      	bpl.n	800a4c6 <HAL_RCC_OscConfig+0xca>
 800a480:	2d04      	cmp	r5, #4
 800a482:	f000 8114 	beq.w	800a6ae <HAL_RCC_OscConfig+0x2b2>
 800a486:	2d0c      	cmp	r5, #12
 800a488:	f000 810e 	beq.w	800a6a8 <HAL_RCC_OscConfig+0x2ac>
 800a48c:	68e3      	ldr	r3, [r4, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 8179 	beq.w	800a786 <HAL_RCC_OscConfig+0x38a>
 800a494:	2201      	movs	r2, #1
 800a496:	4b7f      	ldr	r3, [pc, #508]	; (800a694 <HAL_RCC_OscConfig+0x298>)
 800a498:	4f7d      	ldr	r7, [pc, #500]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	f7fd fda0 	bl	8007fe0 <HAL_GetTick>
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	e005      	b.n	800a4b0 <HAL_RCC_OscConfig+0xb4>
 800a4a4:	f7fd fd9c 	bl	8007fe0 <HAL_GetTick>
 800a4a8:	1b80      	subs	r0, r0, r6
 800a4aa:	2802      	cmp	r0, #2
 800a4ac:	f200 813f 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	079b      	lsls	r3, r3, #30
 800a4b4:	d5f6      	bpl.n	800a4a4 <HAL_RCC_OscConfig+0xa8>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6922      	ldr	r2, [r4, #16]
 800a4ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a4be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4c2:	607b      	str	r3, [r7, #4]
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	06d9      	lsls	r1, r3, #27
 800a4c8:	d525      	bpl.n	800a516 <HAL_RCC_OscConfig+0x11a>
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	f000 8098 	beq.w	800a600 <HAL_RCC_OscConfig+0x204>
 800a4d0:	69a3      	ldr	r3, [r4, #24]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 816a 	beq.w	800a7ac <HAL_RCC_OscConfig+0x3b0>
 800a4d8:	2201      	movs	r2, #1
 800a4da:	4b6e      	ldr	r3, [pc, #440]	; (800a694 <HAL_RCC_OscConfig+0x298>)
 800a4dc:	4e6c      	ldr	r6, [pc, #432]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a4de:	621a      	str	r2, [r3, #32]
 800a4e0:	f7fd fd7e 	bl	8007fe0 <HAL_GetTick>
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	e005      	b.n	800a4f4 <HAL_RCC_OscConfig+0xf8>
 800a4e8:	f7fd fd7a 	bl	8007fe0 <HAL_GetTick>
 800a4ec:	1bc0      	subs	r0, r0, r7
 800a4ee:	2802      	cmp	r0, #2
 800a4f0:	f200 811d 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a4f4:	6833      	ldr	r3, [r6, #0]
 800a4f6:	059b      	lsls	r3, r3, #22
 800a4f8:	d5f6      	bpl.n	800a4e8 <HAL_RCC_OscConfig+0xec>
 800a4fa:	6873      	ldr	r3, [r6, #4]
 800a4fc:	6a22      	ldr	r2, [r4, #32]
 800a4fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a502:	4313      	orrs	r3, r2
 800a504:	6073      	str	r3, [r6, #4]
 800a506:	6873      	ldr	r3, [r6, #4]
 800a508:	69e2      	ldr	r2, [r4, #28]
 800a50a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a50e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a512:	6073      	str	r3, [r6, #4]
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	0719      	lsls	r1, r3, #28
 800a518:	d516      	bpl.n	800a548 <HAL_RCC_OscConfig+0x14c>
 800a51a:	6963      	ldr	r3, [r4, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8121 	beq.w	800a764 <HAL_RCC_OscConfig+0x368>
 800a522:	2201      	movs	r2, #1
 800a524:	4b5b      	ldr	r3, [pc, #364]	; (800a694 <HAL_RCC_OscConfig+0x298>)
 800a526:	4f5a      	ldr	r7, [pc, #360]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a528:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
 800a52c:	f7fd fd58 	bl	8007fe0 <HAL_GetTick>
 800a530:	4606      	mov	r6, r0
 800a532:	e005      	b.n	800a540 <HAL_RCC_OscConfig+0x144>
 800a534:	f7fd fd54 	bl	8007fe0 <HAL_GetTick>
 800a538:	1b80      	subs	r0, r0, r6
 800a53a:	2802      	cmp	r0, #2
 800a53c:	f200 80f7 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a542:	079a      	lsls	r2, r3, #30
 800a544:	d5f6      	bpl.n	800a534 <HAL_RCC_OscConfig+0x138>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	075e      	lsls	r6, r3, #29
 800a54a:	d53b      	bpl.n	800a5c4 <HAL_RCC_OscConfig+0x1c8>
 800a54c:	4b50      	ldr	r3, [pc, #320]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a550:	00d0      	lsls	r0, r2, #3
 800a552:	f100 8129 	bmi.w	800a7a8 <HAL_RCC_OscConfig+0x3ac>
 800a556:	2601      	movs	r6, #1
 800a558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a55a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a55e:	625a      	str	r2, [r3, #36]	; 0x24
 800a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	4f4b      	ldr	r7, [pc, #300]	; (800a698 <HAL_RCC_OscConfig+0x29c>)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	05d9      	lsls	r1, r3, #23
 800a570:	f140 80cc 	bpl.w	800a70c <HAL_RCC_OscConfig+0x310>
 800a574:	68a3      	ldr	r3, [r4, #8]
 800a576:	2b01      	cmp	r3, #1
 800a578:	f000 8175 	beq.w	800a866 <HAL_RCC_OscConfig+0x46a>
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 80a9 	beq.w	800a6d4 <HAL_RCC_OscConfig+0x2d8>
 800a582:	2b05      	cmp	r3, #5
 800a584:	4b42      	ldr	r3, [pc, #264]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a588:	f000 818b 	beq.w	800a8a2 <HAL_RCC_OscConfig+0x4a6>
 800a58c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a590:	635a      	str	r2, [r3, #52]	; 0x34
 800a592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a598:	635a      	str	r2, [r3, #52]	; 0x34
 800a59a:	f7fd fd21 	bl	8007fe0 <HAL_GetTick>
 800a59e:	f241 3988 	movw	r9, #5000	; 0x1388
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a690 <HAL_RCC_OscConfig+0x294>
 800a5a8:	e005      	b.n	800a5b6 <HAL_RCC_OscConfig+0x1ba>
 800a5aa:	f7fd fd19 	bl	8007fe0 <HAL_GetTick>
 800a5ae:	1bc0      	subs	r0, r0, r7
 800a5b0:	4548      	cmp	r0, r9
 800a5b2:	f200 80bc 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a5b6:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a5ba:	059b      	lsls	r3, r3, #22
 800a5bc:	d5f5      	bpl.n	800a5aa <HAL_RCC_OscConfig+0x1ae>
 800a5be:	2e00      	cmp	r6, #0
 800a5c0:	f040 814b 	bne.w	800a85a <HAL_RCC_OscConfig+0x45e>
 800a5c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5c6:	b1b8      	cbz	r0, 800a5f8 <HAL_RCC_OscConfig+0x1fc>
 800a5c8:	2d0c      	cmp	r5, #12
 800a5ca:	f000 8152 	beq.w	800a872 <HAL_RCC_OscConfig+0x476>
 800a5ce:	2802      	cmp	r0, #2
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <HAL_RCC_OscConfig+0x298>)
 800a5d6:	f000 8116 	beq.w	800a806 <HAL_RCC_OscConfig+0x40a>
 800a5da:	661a      	str	r2, [r3, #96]	; 0x60
 800a5dc:	f7fd fd00 	bl	8007fe0 <HAL_GetTick>
 800a5e0:	4d2b      	ldr	r5, [pc, #172]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	e005      	b.n	800a5f2 <HAL_RCC_OscConfig+0x1f6>
 800a5e6:	f7fd fcfb 	bl	8007fe0 <HAL_GetTick>
 800a5ea:	1b00      	subs	r0, r0, r4
 800a5ec:	2802      	cmp	r0, #2
 800a5ee:	f200 809e 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a5f2:	682b      	ldr	r3, [r5, #0]
 800a5f4:	019b      	lsls	r3, r3, #6
 800a5f6:	d4f6      	bmi.n	800a5e6 <HAL_RCC_OscConfig+0x1ea>
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	b003      	add	sp, #12
 800a5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a600:	4b23      	ldr	r3, [pc, #140]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	059a      	lsls	r2, r3, #22
 800a606:	d502      	bpl.n	800a60e <HAL_RCC_OscConfig+0x212>
 800a608:	69a3      	ldr	r3, [r4, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d03b      	beq.n	800a686 <HAL_RCC_OscConfig+0x28a>
 800a60e:	4e20      	ldr	r6, [pc, #128]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a610:	6a20      	ldr	r0, [r4, #32]
 800a612:	6873      	ldr	r3, [r6, #4]
 800a614:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a618:	4298      	cmp	r0, r3
 800a61a:	f240 80d7 	bls.w	800a7cc <HAL_RCC_OscConfig+0x3d0>
 800a61e:	f7ff feab 	bl	800a378 <RCC_SetFlashLatencyFromMSIRange>
 800a622:	2800      	cmp	r0, #0
 800a624:	d12f      	bne.n	800a686 <HAL_RCC_OscConfig+0x28a>
 800a626:	6872      	ldr	r2, [r6, #4]
 800a628:	6a23      	ldr	r3, [r4, #32]
 800a62a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a62e:	431a      	orrs	r2, r3
 800a630:	6072      	str	r2, [r6, #4]
 800a632:	6872      	ldr	r2, [r6, #4]
 800a634:	69e1      	ldr	r1, [r4, #28]
 800a636:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a63a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a63e:	6072      	str	r2, [r6, #4]
 800a640:	4a13      	ldr	r2, [pc, #76]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a642:	0b5b      	lsrs	r3, r3, #13
 800a644:	6891      	ldr	r1, [r2, #8]
 800a646:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a64a:	3301      	adds	r3, #1
 800a64c:	fa02 f303 	lsl.w	r3, r2, r3
 800a650:	4a12      	ldr	r2, [pc, #72]	; (800a69c <HAL_RCC_OscConfig+0x2a0>)
 800a652:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800a656:	5c52      	ldrb	r2, [r2, r1]
 800a658:	4811      	ldr	r0, [pc, #68]	; (800a6a0 <HAL_RCC_OscConfig+0x2a4>)
 800a65a:	40d3      	lsrs	r3, r2
 800a65c:	4a11      	ldr	r2, [pc, #68]	; (800a6a4 <HAL_RCC_OscConfig+0x2a8>)
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	6810      	ldr	r0, [r2, #0]
 800a662:	f7fd fc7b 	bl	8007f5c <HAL_InitTick>
 800a666:	2800      	cmp	r0, #0
 800a668:	d1c7      	bne.n	800a5fa <HAL_RCC_OscConfig+0x1fe>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	e753      	b.n	800a516 <HAL_RCC_OscConfig+0x11a>
 800a66e:	2e00      	cmp	r6, #0
 800a670:	f43f aedb 	beq.w	800a42a <HAL_RCC_OscConfig+0x2e>
 800a674:	4a06      	ldr	r2, [pc, #24]	; (800a690 <HAL_RCC_OscConfig+0x294>)
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	0392      	lsls	r2, r2, #14
 800a67a:	f57f aeff 	bpl.w	800a47c <HAL_RCC_OscConfig+0x80>
 800a67e:	6862      	ldr	r2, [r4, #4]
 800a680:	2a00      	cmp	r2, #0
 800a682:	f47f aefb 	bne.w	800a47c <HAL_RCC_OscConfig+0x80>
 800a686:	2001      	movs	r0, #1
 800a688:	b003      	add	sp, #12
 800a68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a68e:	bf00      	nop
 800a690:	40023800 	.word	0x40023800
 800a694:	42470000 	.word	0x42470000
 800a698:	40007000 	.word	0x40007000
 800a69c:	08011a30 	.word	0x08011a30
 800a6a0:	20000020 	.word	0x20000020
 800a6a4:	20000028 	.word	0x20000028
 800a6a8:	2e00      	cmp	r6, #0
 800a6aa:	f47f aeef 	bne.w	800a48c <HAL_RCC_OscConfig+0x90>
 800a6ae:	4a81      	ldr	r2, [pc, #516]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	0792      	lsls	r2, r2, #30
 800a6b4:	d502      	bpl.n	800a6bc <HAL_RCC_OscConfig+0x2c0>
 800a6b6:	68e2      	ldr	r2, [r4, #12]
 800a6b8:	2a01      	cmp	r2, #1
 800a6ba:	d1e4      	bne.n	800a686 <HAL_RCC_OscConfig+0x28a>
 800a6bc:	497d      	ldr	r1, [pc, #500]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a6be:	6920      	ldr	r0, [r4, #16]
 800a6c0:	684a      	ldr	r2, [r1, #4]
 800a6c2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800a6c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a6ca:	604a      	str	r2, [r1, #4]
 800a6cc:	06d9      	lsls	r1, r3, #27
 800a6ce:	f57f af22 	bpl.w	800a516 <HAL_RCC_OscConfig+0x11a>
 800a6d2:	e6fa      	b.n	800a4ca <HAL_RCC_OscConfig+0xce>
 800a6d4:	4f77      	ldr	r7, [pc, #476]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a6d6:	f241 3988 	movw	r9, #5000	; 0x1388
 800a6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ea:	f7fd fc79 	bl	8007fe0 <HAL_GetTick>
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	e005      	b.n	800a6fe <HAL_RCC_OscConfig+0x302>
 800a6f2:	f7fd fc75 	bl	8007fe0 <HAL_GetTick>
 800a6f6:	eba0 0008 	sub.w	r0, r0, r8
 800a6fa:	4548      	cmp	r0, r9
 800a6fc:	d817      	bhi.n	800a72e <HAL_RCC_OscConfig+0x332>
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	0598      	lsls	r0, r3, #22
 800a702:	d4f6      	bmi.n	800a6f2 <HAL_RCC_OscConfig+0x2f6>
 800a704:	2e00      	cmp	r6, #0
 800a706:	f43f af5d 	beq.w	800a5c4 <HAL_RCC_OscConfig+0x1c8>
 800a70a:	e0a6      	b.n	800a85a <HAL_RCC_OscConfig+0x45e>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	f7fd fc64 	bl	8007fe0 <HAL_GetTick>
 800a718:	4680      	mov	r8, r0
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	05da      	lsls	r2, r3, #23
 800a71e:	f53f af29 	bmi.w	800a574 <HAL_RCC_OscConfig+0x178>
 800a722:	f7fd fc5d 	bl	8007fe0 <HAL_GetTick>
 800a726:	eba0 0008 	sub.w	r0, r0, r8
 800a72a:	2864      	cmp	r0, #100	; 0x64
 800a72c:	d9f5      	bls.n	800a71a <HAL_RCC_OscConfig+0x31e>
 800a72e:	2003      	movs	r0, #3
 800a730:	b003      	add	sp, #12
 800a732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a736:	4f5f      	ldr	r7, [pc, #380]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	f7fd fc4a 	bl	8007fe0 <HAL_GetTick>
 800a74c:	4680      	mov	r8, r0
 800a74e:	e005      	b.n	800a75c <HAL_RCC_OscConfig+0x360>
 800a750:	f7fd fc46 	bl	8007fe0 <HAL_GetTick>
 800a754:	eba0 0008 	sub.w	r0, r0, r8
 800a758:	2864      	cmp	r0, #100	; 0x64
 800a75a:	d8e8      	bhi.n	800a72e <HAL_RCC_OscConfig+0x332>
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	0398      	lsls	r0, r3, #14
 800a760:	d4f6      	bmi.n	800a750 <HAL_RCC_OscConfig+0x354>
 800a762:	e68a      	b.n	800a47a <HAL_RCC_OscConfig+0x7e>
 800a764:	4a54      	ldr	r2, [pc, #336]	; (800a8b8 <HAL_RCC_OscConfig+0x4bc>)
 800a766:	4f53      	ldr	r7, [pc, #332]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a768:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
 800a76c:	f7fd fc38 	bl	8007fe0 <HAL_GetTick>
 800a770:	4606      	mov	r6, r0
 800a772:	e004      	b.n	800a77e <HAL_RCC_OscConfig+0x382>
 800a774:	f7fd fc34 	bl	8007fe0 <HAL_GetTick>
 800a778:	1b80      	subs	r0, r0, r6
 800a77a:	2802      	cmp	r0, #2
 800a77c:	d8d7      	bhi.n	800a72e <HAL_RCC_OscConfig+0x332>
 800a77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a780:	079b      	lsls	r3, r3, #30
 800a782:	d4f7      	bmi.n	800a774 <HAL_RCC_OscConfig+0x378>
 800a784:	e6df      	b.n	800a546 <HAL_RCC_OscConfig+0x14a>
 800a786:	4a4c      	ldr	r2, [pc, #304]	; (800a8b8 <HAL_RCC_OscConfig+0x4bc>)
 800a788:	4f4a      	ldr	r7, [pc, #296]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	f7fd fc28 	bl	8007fe0 <HAL_GetTick>
 800a790:	4606      	mov	r6, r0
 800a792:	e004      	b.n	800a79e <HAL_RCC_OscConfig+0x3a2>
 800a794:	f7fd fc24 	bl	8007fe0 <HAL_GetTick>
 800a798:	1b80      	subs	r0, r0, r6
 800a79a:	2802      	cmp	r0, #2
 800a79c:	d8c7      	bhi.n	800a72e <HAL_RCC_OscConfig+0x332>
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	0798      	lsls	r0, r3, #30
 800a7a2:	d4f7      	bmi.n	800a794 <HAL_RCC_OscConfig+0x398>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	e68e      	b.n	800a4c6 <HAL_RCC_OscConfig+0xca>
 800a7a8:	2600      	movs	r6, #0
 800a7aa:	e6de      	b.n	800a56a <HAL_RCC_OscConfig+0x16e>
 800a7ac:	4a42      	ldr	r2, [pc, #264]	; (800a8b8 <HAL_RCC_OscConfig+0x4bc>)
 800a7ae:	4f41      	ldr	r7, [pc, #260]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a7b0:	6213      	str	r3, [r2, #32]
 800a7b2:	f7fd fc15 	bl	8007fe0 <HAL_GetTick>
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	e004      	b.n	800a7c4 <HAL_RCC_OscConfig+0x3c8>
 800a7ba:	f7fd fc11 	bl	8007fe0 <HAL_GetTick>
 800a7be:	1b80      	subs	r0, r0, r6
 800a7c0:	2802      	cmp	r0, #2
 800a7c2:	d8b4      	bhi.n	800a72e <HAL_RCC_OscConfig+0x332>
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	0598      	lsls	r0, r3, #22
 800a7c8:	d4f7      	bmi.n	800a7ba <HAL_RCC_OscConfig+0x3be>
 800a7ca:	e74e      	b.n	800a66a <HAL_RCC_OscConfig+0x26e>
 800a7cc:	6873      	ldr	r3, [r6, #4]
 800a7ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a7d2:	4303      	orrs	r3, r0
 800a7d4:	6073      	str	r3, [r6, #4]
 800a7d6:	6873      	ldr	r3, [r6, #4]
 800a7d8:	69e2      	ldr	r2, [r4, #28]
 800a7da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a7de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a7e2:	6073      	str	r3, [r6, #4]
 800a7e4:	f7ff fdc8 	bl	800a378 <RCC_SetFlashLatencyFromMSIRange>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	f47f af4c 	bne.w	800a686 <HAL_RCC_OscConfig+0x28a>
 800a7ee:	6a23      	ldr	r3, [r4, #32]
 800a7f0:	e726      	b.n	800a640 <HAL_RCC_OscConfig+0x244>
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	4770      	bx	lr
 800a7f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	e629      	b.n	800a45a <HAL_RCC_OscConfig+0x5e>
 800a806:	661a      	str	r2, [r3, #96]	; 0x60
 800a808:	f7fd fbea 	bl	8007fe0 <HAL_GetTick>
 800a80c:	4e29      	ldr	r6, [pc, #164]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a80e:	4605      	mov	r5, r0
 800a810:	e004      	b.n	800a81c <HAL_RCC_OscConfig+0x420>
 800a812:	f7fd fbe5 	bl	8007fe0 <HAL_GetTick>
 800a816:	1b40      	subs	r0, r0, r5
 800a818:	2802      	cmp	r0, #2
 800a81a:	d888      	bhi.n	800a72e <HAL_RCC_OscConfig+0x332>
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	0199      	lsls	r1, r3, #6
 800a820:	d4f7      	bmi.n	800a812 <HAL_RCC_OscConfig+0x416>
 800a822:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800a826:	430b      	orrs	r3, r1
 800a828:	2101      	movs	r1, #1
 800a82a:	68b2      	ldr	r2, [r6, #8]
 800a82c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a82e:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800a832:	4313      	orrs	r3, r2
 800a834:	4a20      	ldr	r2, [pc, #128]	; (800a8b8 <HAL_RCC_OscConfig+0x4bc>)
 800a836:	4303      	orrs	r3, r0
 800a838:	60b3      	str	r3, [r6, #8]
 800a83a:	6611      	str	r1, [r2, #96]	; 0x60
 800a83c:	f7fd fbd0 	bl	8007fe0 <HAL_GetTick>
 800a840:	4d1c      	ldr	r5, [pc, #112]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a842:	4604      	mov	r4, r0
 800a844:	e005      	b.n	800a852 <HAL_RCC_OscConfig+0x456>
 800a846:	f7fd fbcb 	bl	8007fe0 <HAL_GetTick>
 800a84a:	1b00      	subs	r0, r0, r4
 800a84c:	2802      	cmp	r0, #2
 800a84e:	f63f af6e 	bhi.w	800a72e <HAL_RCC_OscConfig+0x332>
 800a852:	682b      	ldr	r3, [r5, #0]
 800a854:	019a      	lsls	r2, r3, #6
 800a856:	d5f6      	bpl.n	800a846 <HAL_RCC_OscConfig+0x44a>
 800a858:	e6ce      	b.n	800a5f8 <HAL_RCC_OscConfig+0x1fc>
 800a85a:	4a16      	ldr	r2, [pc, #88]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a85c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a85e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a862:	6253      	str	r3, [r2, #36]	; 0x24
 800a864:	e6ae      	b.n	800a5c4 <HAL_RCC_OscConfig+0x1c8>
 800a866:	4a13      	ldr	r2, [pc, #76]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a868:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a86a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a86e:	6353      	str	r3, [r2, #52]	; 0x34
 800a870:	e693      	b.n	800a59a <HAL_RCC_OscConfig+0x19e>
 800a872:	2801      	cmp	r0, #1
 800a874:	f43f aec1 	beq.w	800a5fa <HAL_RCC_OscConfig+0x1fe>
 800a878:	4b0e      	ldr	r3, [pc, #56]	; (800a8b4 <HAL_RCC_OscConfig+0x4b8>)
 800a87a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a882:	4291      	cmp	r1, r2
 800a884:	f47f aeff 	bne.w	800a686 <HAL_RCC_OscConfig+0x28a>
 800a888:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a88a:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 800a88e:	4291      	cmp	r1, r2
 800a890:	f47f aef9 	bne.w	800a686 <HAL_RCC_OscConfig+0x28a>
 800a894:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a896:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a89a:	1a18      	subs	r0, r3, r0
 800a89c:	bf18      	it	ne
 800a89e:	2001      	movne	r0, #1
 800a8a0:	e6ab      	b.n	800a5fa <HAL_RCC_OscConfig+0x1fe>
 800a8a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8a6:	635a      	str	r2, [r3, #52]	; 0x34
 800a8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8ae:	635a      	str	r2, [r3, #52]	; 0x34
 800a8b0:	e673      	b.n	800a59a <HAL_RCC_OscConfig+0x19e>
 800a8b2:	bf00      	nop
 800a8b4:	40023800 	.word	0x40023800
 800a8b8:	42470000 	.word	0x42470000

0800a8bc <HAL_RCC_ClockConfig>:
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f000 80c2 	beq.w	800aa46 <HAL_RCC_ClockConfig+0x18a>
 800a8c2:	4a85      	ldr	r2, [pc, #532]	; (800aad8 <HAL_RCC_ClockConfig+0x21c>)
 800a8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c8:	6813      	ldr	r3, [r2, #0]
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	428b      	cmp	r3, r1
 800a8d2:	460d      	mov	r5, r1
 800a8d4:	d213      	bcs.n	800a8fe <HAL_RCC_ClockConfig+0x42>
 800a8d6:	2901      	cmp	r1, #1
 800a8d8:	d103      	bne.n	800a8e2 <HAL_RCC_ClockConfig+0x26>
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	f043 0304 	orr.w	r3, r3, #4
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4a7d      	ldr	r2, [pc, #500]	; (800aad8 <HAL_RCC_ClockConfig+0x21c>)
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	f023 0301 	bic.w	r3, r3, #1
 800a8ea:	432b      	orrs	r3, r5
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	6813      	ldr	r3, [r2, #0]
 800a8f0:	f003 0301 	and.w	r3, r3, #1
 800a8f4:	42ab      	cmp	r3, r5
 800a8f6:	d002      	beq.n	800a8fe <HAL_RCC_ClockConfig+0x42>
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	0799      	lsls	r1, r3, #30
 800a902:	d506      	bpl.n	800a912 <HAL_RCC_ClockConfig+0x56>
 800a904:	4975      	ldr	r1, [pc, #468]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a906:	68a0      	ldr	r0, [r4, #8]
 800a908:	688a      	ldr	r2, [r1, #8]
 800a90a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a90e:	4302      	orrs	r2, r0
 800a910:	608a      	str	r2, [r1, #8]
 800a912:	07da      	lsls	r2, r3, #31
 800a914:	d529      	bpl.n	800a96a <HAL_RCC_ClockConfig+0xae>
 800a916:	6862      	ldr	r2, [r4, #4]
 800a918:	4b70      	ldr	r3, [pc, #448]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a91a:	2a02      	cmp	r2, #2
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f000 808e 	beq.w	800aa3e <HAL_RCC_ClockConfig+0x182>
 800a922:	2a03      	cmp	r2, #3
 800a924:	f000 8085 	beq.w	800aa32 <HAL_RCC_ClockConfig+0x176>
 800a928:	2a01      	cmp	r2, #1
 800a92a:	f000 80d1 	beq.w	800aad0 <HAL_RCC_ClockConfig+0x214>
 800a92e:	0598      	lsls	r0, r3, #22
 800a930:	d5e2      	bpl.n	800a8f8 <HAL_RCC_ClockConfig+0x3c>
 800a932:	4e6a      	ldr	r6, [pc, #424]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a934:	f241 3888 	movw	r8, #5000	; 0x1388
 800a938:	68b3      	ldr	r3, [r6, #8]
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	4313      	orrs	r3, r2
 800a940:	60b3      	str	r3, [r6, #8]
 800a942:	f7fd fb4d 	bl	8007fe0 <HAL_GetTick>
 800a946:	6863      	ldr	r3, [r4, #4]
 800a948:	4607      	mov	r7, r0
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d055      	beq.n	800a9fa <HAL_RCC_ClockConfig+0x13e>
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d05e      	beq.n	800aa10 <HAL_RCC_ClockConfig+0x154>
 800a952:	2b01      	cmp	r3, #1
 800a954:	d105      	bne.n	800a962 <HAL_RCC_ClockConfig+0xa6>
 800a956:	e066      	b.n	800aa26 <HAL_RCC_ClockConfig+0x16a>
 800a958:	f7fd fb42 	bl	8007fe0 <HAL_GetTick>
 800a95c:	1bc0      	subs	r0, r0, r7
 800a95e:	4540      	cmp	r0, r8
 800a960:	d873      	bhi.n	800aa4a <HAL_RCC_ClockConfig+0x18e>
 800a962:	68b3      	ldr	r3, [r6, #8]
 800a964:	f013 0f0c 	tst.w	r3, #12
 800a968:	d1f6      	bne.n	800a958 <HAL_RCC_ClockConfig+0x9c>
 800a96a:	4a5b      	ldr	r2, [pc, #364]	; (800aad8 <HAL_RCC_ClockConfig+0x21c>)
 800a96c:	6813      	ldr	r3, [r2, #0]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	42ab      	cmp	r3, r5
 800a974:	d906      	bls.n	800a984 <HAL_RCC_ClockConfig+0xc8>
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	f023 0301 	bic.w	r3, r3, #1
 800a97c:	6013      	str	r3, [r2, #0]
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	07da      	lsls	r2, r3, #31
 800a982:	d4b9      	bmi.n	800a8f8 <HAL_RCC_ClockConfig+0x3c>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	0759      	lsls	r1, r3, #29
 800a988:	d506      	bpl.n	800a998 <HAL_RCC_ClockConfig+0xdc>
 800a98a:	4954      	ldr	r1, [pc, #336]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a98c:	68e0      	ldr	r0, [r4, #12]
 800a98e:	688a      	ldr	r2, [r1, #8]
 800a990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a994:	4302      	orrs	r2, r0
 800a996:	608a      	str	r2, [r1, #8]
 800a998:	071b      	lsls	r3, r3, #28
 800a99a:	d420      	bmi.n	800a9de <HAL_RCC_ClockConfig+0x122>
 800a99c:	494f      	ldr	r1, [pc, #316]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a99e:	688a      	ldr	r2, [r1, #8]
 800a9a0:	f002 030c 	and.w	r3, r2, #12
 800a9a4:	2b08      	cmp	r3, #8
 800a9a6:	d079      	beq.n	800aa9c <HAL_RCC_ClockConfig+0x1e0>
 800a9a8:	2b0c      	cmp	r3, #12
 800a9aa:	d050      	beq.n	800aa4e <HAL_RCC_ClockConfig+0x192>
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d044      	beq.n	800aa3a <HAL_RCC_ClockConfig+0x17e>
 800a9b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a9b4:	684b      	ldr	r3, [r1, #4]
 800a9b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	4098      	lsls	r0, r3
 800a9be:	4b47      	ldr	r3, [pc, #284]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a9c0:	4a47      	ldr	r2, [pc, #284]	; (800aae0 <HAL_RCC_ClockConfig+0x224>)
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	4947      	ldr	r1, [pc, #284]	; (800aae4 <HAL_RCC_ClockConfig+0x228>)
 800a9c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a9ca:	5cd3      	ldrb	r3, [r2, r3]
 800a9cc:	4a46      	ldr	r2, [pc, #280]	; (800aae8 <HAL_RCC_ClockConfig+0x22c>)
 800a9ce:	fa20 f303 	lsr.w	r3, r0, r3
 800a9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d6:	6808      	ldr	r0, [r1, #0]
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	f7fd babf 	b.w	8007f5c <HAL_InitTick>
 800a9de:	4a3f      	ldr	r2, [pc, #252]	; (800aadc <HAL_RCC_ClockConfig+0x220>)
 800a9e0:	6921      	ldr	r1, [r4, #16]
 800a9e2:	6893      	ldr	r3, [r2, #8]
 800a9e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a9e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a9ec:	6093      	str	r3, [r2, #8]
 800a9ee:	e7d5      	b.n	800a99c <HAL_RCC_ClockConfig+0xe0>
 800a9f0:	f7fd faf6 	bl	8007fe0 <HAL_GetTick>
 800a9f4:	1bc3      	subs	r3, r0, r7
 800a9f6:	4543      	cmp	r3, r8
 800a9f8:	d827      	bhi.n	800aa4a <HAL_RCC_ClockConfig+0x18e>
 800a9fa:	68b3      	ldr	r3, [r6, #8]
 800a9fc:	f003 030c 	and.w	r3, r3, #12
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d1f5      	bne.n	800a9f0 <HAL_RCC_ClockConfig+0x134>
 800aa04:	e7b1      	b.n	800a96a <HAL_RCC_ClockConfig+0xae>
 800aa06:	f7fd faeb 	bl	8007fe0 <HAL_GetTick>
 800aa0a:	1bc0      	subs	r0, r0, r7
 800aa0c:	4540      	cmp	r0, r8
 800aa0e:	d81c      	bhi.n	800aa4a <HAL_RCC_ClockConfig+0x18e>
 800aa10:	68b3      	ldr	r3, [r6, #8]
 800aa12:	f003 030c 	and.w	r3, r3, #12
 800aa16:	2b0c      	cmp	r3, #12
 800aa18:	d1f5      	bne.n	800aa06 <HAL_RCC_ClockConfig+0x14a>
 800aa1a:	e7a6      	b.n	800a96a <HAL_RCC_ClockConfig+0xae>
 800aa1c:	f7fd fae0 	bl	8007fe0 <HAL_GetTick>
 800aa20:	1bc0      	subs	r0, r0, r7
 800aa22:	4540      	cmp	r0, r8
 800aa24:	d811      	bhi.n	800aa4a <HAL_RCC_ClockConfig+0x18e>
 800aa26:	68b3      	ldr	r3, [r6, #8]
 800aa28:	f003 030c 	and.w	r3, r3, #12
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d1f5      	bne.n	800aa1c <HAL_RCC_ClockConfig+0x160>
 800aa30:	e79b      	b.n	800a96a <HAL_RCC_ClockConfig+0xae>
 800aa32:	019f      	lsls	r7, r3, #6
 800aa34:	f53f af7d 	bmi.w	800a932 <HAL_RCC_ClockConfig+0x76>
 800aa38:	e75e      	b.n	800a8f8 <HAL_RCC_ClockConfig+0x3c>
 800aa3a:	482c      	ldr	r0, [pc, #176]	; (800aaec <HAL_RCC_ClockConfig+0x230>)
 800aa3c:	e7bf      	b.n	800a9be <HAL_RCC_ClockConfig+0x102>
 800aa3e:	039b      	lsls	r3, r3, #14
 800aa40:	f53f af77 	bmi.w	800a932 <HAL_RCC_ClockConfig+0x76>
 800aa44:	e758      	b.n	800a8f8 <HAL_RCC_ClockConfig+0x3c>
 800aa46:	2001      	movs	r0, #1
 800aa48:	4770      	bx	lr
 800aa4a:	2003      	movs	r0, #3
 800aa4c:	e755      	b.n	800a8fa <HAL_RCC_ClockConfig+0x3e>
 800aa4e:	4828      	ldr	r0, [pc, #160]	; (800aaf0 <HAL_RCC_ClockConfig+0x234>)
 800aa50:	688b      	ldr	r3, [r1, #8]
 800aa52:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800aa56:	5c44      	ldrb	r4, [r0, r1]
 800aa58:	f3c2 5281 	ubfx	r2, r2, #22, #2
 800aa5c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800aa60:	f102 0201 	add.w	r2, r2, #1
 800aa64:	ea4f 1144 	mov.w	r1, r4, lsl #5
 800aa68:	d01a      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x1e4>
 800aa6a:	1b09      	subs	r1, r1, r4
 800aa6c:	eb65 0505 	sbc.w	r5, r5, r5
 800aa70:	01ab      	lsls	r3, r5, #6
 800aa72:	0188      	lsls	r0, r1, #6
 800aa74:	1a40      	subs	r0, r0, r1
 800aa76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800aa7a:	eb63 0305 	sbc.w	r3, r3, r5
 800aa7e:	00c1      	lsls	r1, r0, #3
 800aa80:	00db      	lsls	r3, r3, #3
 800aa82:	190c      	adds	r4, r1, r4
 800aa84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800aa88:	f143 0300 	adc.w	r3, r3, #0
 800aa8c:	0259      	lsls	r1, r3, #9
 800aa8e:	0260      	lsls	r0, r4, #9
 800aa90:	2300      	movs	r3, #0
 800aa92:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 800aa96:	f7f6 fb99 	bl	80011cc <__aeabi_uldivmod>
 800aa9a:	e790      	b.n	800a9be <HAL_RCC_ClockConfig+0x102>
 800aa9c:	4815      	ldr	r0, [pc, #84]	; (800aaf4 <HAL_RCC_ClockConfig+0x238>)
 800aa9e:	e78e      	b.n	800a9be <HAL_RCC_ClockConfig+0x102>
 800aaa0:	1b0d      	subs	r5, r1, r4
 800aaa2:	eb66 0606 	sbc.w	r6, r6, r6
 800aaa6:	01b0      	lsls	r0, r6, #6
 800aaa8:	01a9      	lsls	r1, r5, #6
 800aaaa:	1b49      	subs	r1, r1, r5
 800aaac:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 800aab0:	eb60 0006 	sbc.w	r0, r0, r6
 800aab4:	00c0      	lsls	r0, r0, #3
 800aab6:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 800aaba:	00c9      	lsls	r1, r1, #3
 800aabc:	190c      	adds	r4, r1, r4
 800aabe:	f140 0000 	adc.w	r0, r0, #0
 800aac2:	0281      	lsls	r1, r0, #10
 800aac4:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800aac8:	02a0      	lsls	r0, r4, #10
 800aaca:	f7f6 fb7f 	bl	80011cc <__aeabi_uldivmod>
 800aace:	e776      	b.n	800a9be <HAL_RCC_ClockConfig+0x102>
 800aad0:	079e      	lsls	r6, r3, #30
 800aad2:	f53f af2e 	bmi.w	800a932 <HAL_RCC_ClockConfig+0x76>
 800aad6:	e70f      	b.n	800a8f8 <HAL_RCC_ClockConfig+0x3c>
 800aad8:	40023c00 	.word	0x40023c00
 800aadc:	40023800 	.word	0x40023800
 800aae0:	08011a30 	.word	0x08011a30
 800aae4:	20000028 	.word	0x20000028
 800aae8:	20000020 	.word	0x20000020
 800aaec:	00f42400 	.word	0x00f42400
 800aaf0:	08011a48 	.word	0x08011a48
 800aaf4:	007a1200 	.word	0x007a1200

0800aaf8 <HAL_RCC_GetPCLK1Freq>:
 800aaf8:	4b04      	ldr	r3, [pc, #16]	; (800ab0c <HAL_RCC_GetPCLK1Freq+0x14>)
 800aafa:	4a05      	ldr	r2, [pc, #20]	; (800ab10 <HAL_RCC_GetPCLK1Freq+0x18>)
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	4905      	ldr	r1, [pc, #20]	; (800ab14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800ab00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800ab04:	5ccb      	ldrb	r3, [r1, r3]
 800ab06:	6810      	ldr	r0, [r2, #0]
 800ab08:	40d8      	lsrs	r0, r3
 800ab0a:	4770      	bx	lr
 800ab0c:	40023800 	.word	0x40023800
 800ab10:	20000020 	.word	0x20000020
 800ab14:	08011a40 	.word	0x08011a40

0800ab18 <HAL_RCC_GetPCLK2Freq>:
 800ab18:	4b04      	ldr	r3, [pc, #16]	; (800ab2c <HAL_RCC_GetPCLK2Freq+0x14>)
 800ab1a:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <HAL_RCC_GetPCLK2Freq+0x18>)
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	4905      	ldr	r1, [pc, #20]	; (800ab34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ab20:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ab24:	5ccb      	ldrb	r3, [r1, r3]
 800ab26:	6810      	ldr	r0, [r2, #0]
 800ab28:	40d8      	lsrs	r0, r3
 800ab2a:	4770      	bx	lr
 800ab2c:	40023800 	.word	0x40023800
 800ab30:	20000020 	.word	0x20000020
 800ab34:	08011a40 	.word	0x08011a40

0800ab38 <HAL_TIM_Base_Init>:
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d049      	beq.n	800abd0 <HAL_TIM_Base_Init+0x98>
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800ab42:	4604      	mov	r4, r0
 800ab44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d03c      	beq.n	800abc6 <HAL_TIM_Base_Init+0x8e>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ab54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800ab58:	6813      	ldr	r3, [r2, #0]
 800ab5a:	d013      	beq.n	800ab84 <HAL_TIM_Base_Init+0x4c>
 800ab5c:	491d      	ldr	r1, [pc, #116]	; (800abd4 <HAL_TIM_Base_Init+0x9c>)
 800ab5e:	428a      	cmp	r2, r1
 800ab60:	d010      	beq.n	800ab84 <HAL_TIM_Base_Init+0x4c>
 800ab62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab66:	428a      	cmp	r2, r1
 800ab68:	d00c      	beq.n	800ab84 <HAL_TIM_Base_Init+0x4c>
 800ab6a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800ab6e:	428a      	cmp	r2, r1
 800ab70:	d00c      	beq.n	800ab8c <HAL_TIM_Base_Init+0x54>
 800ab72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab76:	428a      	cmp	r2, r1
 800ab78:	d008      	beq.n	800ab8c <HAL_TIM_Base_Init+0x54>
 800ab7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab7e:	428a      	cmp	r2, r1
 800ab80:	d108      	bne.n	800ab94 <HAL_TIM_Base_Init+0x5c>
 800ab82:	e003      	b.n	800ab8c <HAL_TIM_Base_Init+0x54>
 800ab84:	68a1      	ldr	r1, [r4, #8]
 800ab86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	6921      	ldr	r1, [r4, #16]
 800ab8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab92:	430b      	orrs	r3, r1
 800ab94:	2101      	movs	r1, #1
 800ab96:	6960      	ldr	r0, [r4, #20]
 800ab98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab9c:	4303      	orrs	r3, r0
 800ab9e:	68e0      	ldr	r0, [r4, #12]
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	6863      	ldr	r3, [r4, #4]
 800aba4:	62d0      	str	r0, [r2, #44]	; 0x2c
 800aba6:	6293      	str	r3, [r2, #40]	; 0x28
 800aba8:	6151      	str	r1, [r2, #20]
 800abaa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
 800abae:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800abb2:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800abb6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800abba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800abbe:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800abc2:	2000      	movs	r0, #0
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 800abca:	f7fc ffb7 	bl	8007b3c <HAL_TIM_Base_MspInit>
 800abce:	e7bd      	b.n	800ab4c <HAL_TIM_Base_Init+0x14>
 800abd0:	2001      	movs	r0, #1
 800abd2:	4770      	bx	lr
 800abd4:	40000400 	.word	0x40000400

0800abd8 <HAL_TIM_Base_Start_IT>:
 800abd8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d120      	bne.n	800ac22 <HAL_TIM_Base_Start_IT+0x4a>
 800abe0:	2202      	movs	r2, #2
 800abe2:	6803      	ldr	r3, [r0, #0]
 800abe4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abee:	f042 0201 	orr.w	r2, r2, #1
 800abf2:	60da      	str	r2, [r3, #12]
 800abf4:	d00a      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x34>
 800abf6:	4a0d      	ldr	r2, [pc, #52]	; (800ac2c <HAL_TIM_Base_Start_IT+0x54>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d007      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x34>
 800abfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d003      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x34>
 800ac04:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d104      	bne.n	800ac16 <HAL_TIM_Base_Start_IT+0x3e>
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	f002 0207 	and.w	r2, r2, #7
 800ac12:	2a06      	cmp	r2, #6
 800ac14:	d007      	beq.n	800ac26 <HAL_TIM_Base_Start_IT+0x4e>
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f042 0201 	orr.w	r2, r2, #1
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	4770      	bx	lr
 800ac22:	2001      	movs	r0, #1
 800ac24:	4770      	bx	lr
 800ac26:	2000      	movs	r0, #0
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	40000400 	.word	0x40000400

0800ac30 <HAL_TIM_Base_Stop_IT>:
 800ac30:	f241 1c11 	movw	ip, #4369	; 0x1111
 800ac34:	6802      	ldr	r2, [r0, #0]
 800ac36:	4603      	mov	r3, r0
 800ac38:	68d1      	ldr	r1, [r2, #12]
 800ac3a:	f021 0101 	bic.w	r1, r1, #1
 800ac3e:	60d1      	str	r1, [r2, #12]
 800ac40:	6a11      	ldr	r1, [r2, #32]
 800ac42:	ea11 0f0c 	tst.w	r1, ip
 800ac46:	d103      	bne.n	800ac50 <HAL_TIM_Base_Stop_IT+0x20>
 800ac48:	6811      	ldr	r1, [r2, #0]
 800ac4a:	f021 0101 	bic.w	r1, r1, #1
 800ac4e:	6011      	str	r1, [r2, #0]
 800ac50:	2201      	movs	r2, #1
 800ac52:	2000      	movs	r0, #0
 800ac54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop

0800ac5c <HAL_TIM_ConfigClockSource>:
 800ac5c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ac60:	2a01      	cmp	r2, #1
 800ac62:	d075      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0xf4>
 800ac64:	b430      	push	{r4, r5}
 800ac66:	4603      	mov	r3, r0
 800ac68:	2401      	movs	r4, #1
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	6800      	ldr	r0, [r0, #0]
 800ac6e:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
 800ac72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ac76:	6884      	ldr	r4, [r0, #8]
 800ac78:	680a      	ldr	r2, [r1, #0]
 800ac7a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800ac7e:	f024 0477 	bic.w	r4, r4, #119	; 0x77
 800ac82:	2a60      	cmp	r2, #96	; 0x60
 800ac84:	6084      	str	r4, [r0, #8]
 800ac86:	d065      	beq.n	800ad54 <HAL_TIM_ConfigClockSource+0xf8>
 800ac88:	d831      	bhi.n	800acee <HAL_TIM_ConfigClockSource+0x92>
 800ac8a:	2a40      	cmp	r2, #64	; 0x40
 800ac8c:	d048      	beq.n	800ad20 <HAL_TIM_ConfigClockSource+0xc4>
 800ac8e:	d921      	bls.n	800acd4 <HAL_TIM_ConfigClockSource+0x78>
 800ac90:	2a50      	cmp	r2, #80	; 0x50
 800ac92:	d116      	bne.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800ac94:	684c      	ldr	r4, [r1, #4]
 800ac96:	68cd      	ldr	r5, [r1, #12]
 800ac98:	6a01      	ldr	r1, [r0, #32]
 800ac9a:	f021 010a 	bic.w	r1, r1, #10
 800ac9e:	4321      	orrs	r1, r4
 800aca0:	6a04      	ldr	r4, [r0, #32]
 800aca2:	f024 0401 	bic.w	r4, r4, #1
 800aca6:	6204      	str	r4, [r0, #32]
 800aca8:	6982      	ldr	r2, [r0, #24]
 800acaa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800acae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800acb2:	6182      	str	r2, [r0, #24]
 800acb4:	6201      	str	r1, [r0, #32]
 800acb6:	6882      	ldr	r2, [r0, #8]
 800acb8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800acbc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800acc0:	6082      	str	r2, [r0, #8]
 800acc2:	2200      	movs	r2, #0
 800acc4:	2101      	movs	r1, #1
 800acc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800acca:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800acce:	4610      	mov	r0, r2
 800acd0:	bc30      	pop	{r4, r5}
 800acd2:	4770      	bx	lr
 800acd4:	2a20      	cmp	r2, #32
 800acd6:	d002      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x82>
 800acd8:	d91e      	bls.n	800ad18 <HAL_TIM_ConfigClockSource+0xbc>
 800acda:	2a30      	cmp	r2, #48	; 0x30
 800acdc:	d1f1      	bne.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800acde:	6881      	ldr	r1, [r0, #8]
 800ace0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800ace4:	430a      	orrs	r2, r1
 800ace6:	f042 0207 	orr.w	r2, r2, #7
 800acea:	6082      	str	r2, [r0, #8]
 800acec:	e7e9      	b.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800acee:	2a70      	cmp	r2, #112	; 0x70
 800acf0:	d049      	beq.n	800ad86 <HAL_TIM_ConfigClockSource+0x12a>
 800acf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800acf6:	d1e4      	bne.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800acf8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800acfc:	6884      	ldr	r4, [r0, #8]
 800acfe:	432a      	orrs	r2, r5
 800ad00:	68cd      	ldr	r5, [r1, #12]
 800ad02:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 800ad06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	6082      	str	r2, [r0, #8]
 800ad0e:	6882      	ldr	r2, [r0, #8]
 800ad10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad14:	6082      	str	r2, [r0, #8]
 800ad16:	e7d4      	b.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800ad18:	f032 0110 	bics.w	r1, r2, #16
 800ad1c:	d1d1      	bne.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800ad1e:	e7de      	b.n	800acde <HAL_TIM_ConfigClockSource+0x82>
 800ad20:	684c      	ldr	r4, [r1, #4]
 800ad22:	68cd      	ldr	r5, [r1, #12]
 800ad24:	6a01      	ldr	r1, [r0, #32]
 800ad26:	f021 010a 	bic.w	r1, r1, #10
 800ad2a:	4321      	orrs	r1, r4
 800ad2c:	6a04      	ldr	r4, [r0, #32]
 800ad2e:	f024 0401 	bic.w	r4, r4, #1
 800ad32:	6204      	str	r4, [r0, #32]
 800ad34:	6982      	ldr	r2, [r0, #24]
 800ad36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ad3a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800ad3e:	6182      	str	r2, [r0, #24]
 800ad40:	6201      	str	r1, [r0, #32]
 800ad42:	6882      	ldr	r2, [r0, #8]
 800ad44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ad48:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800ad4c:	6082      	str	r2, [r0, #8]
 800ad4e:	e7b8      	b.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800ad50:	2002      	movs	r0, #2
 800ad52:	4770      	bx	lr
 800ad54:	6a04      	ldr	r4, [r0, #32]
 800ad56:	68ca      	ldr	r2, [r1, #12]
 800ad58:	f024 0410 	bic.w	r4, r4, #16
 800ad5c:	684d      	ldr	r5, [r1, #4]
 800ad5e:	6204      	str	r4, [r0, #32]
 800ad60:	6981      	ldr	r1, [r0, #24]
 800ad62:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 800ad66:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
 800ad6a:	6a02      	ldr	r2, [r0, #32]
 800ad6c:	6181      	str	r1, [r0, #24]
 800ad6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad72:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 800ad76:	6202      	str	r2, [r0, #32]
 800ad78:	6882      	ldr	r2, [r0, #8]
 800ad7a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ad7e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800ad82:	6082      	str	r2, [r0, #8]
 800ad84:	e79d      	b.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800ad86:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 800ad8a:	6884      	ldr	r4, [r0, #8]
 800ad8c:	432a      	orrs	r2, r5
 800ad8e:	68cd      	ldr	r5, [r1, #12]
 800ad90:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 800ad94:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	6082      	str	r2, [r0, #8]
 800ad9c:	6882      	ldr	r2, [r0, #8]
 800ad9e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800ada2:	6082      	str	r2, [r0, #8]
 800ada4:	e78d      	b.n	800acc2 <HAL_TIM_ConfigClockSource+0x66>
 800ada6:	bf00      	nop

0800ada8 <HAL_TIM_OC_DelayElapsedCallback>:
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop

0800adac <HAL_TIM_IC_CaptureCallback>:
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop

0800adb0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop

0800adb4 <HAL_TIM_TriggerCallback>:
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop

0800adb8 <HAL_TIM_IRQHandler>:
 800adb8:	6803      	ldr	r3, [r0, #0]
 800adba:	b510      	push	{r4, lr}
 800adbc:	691a      	ldr	r2, [r3, #16]
 800adbe:	4604      	mov	r4, r0
 800adc0:	0791      	lsls	r1, r2, #30
 800adc2:	d502      	bpl.n	800adca <HAL_TIM_IRQHandler+0x12>
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	0792      	lsls	r2, r2, #30
 800adc8:	d450      	bmi.n	800ae6c <HAL_TIM_IRQHandler+0xb4>
 800adca:	691a      	ldr	r2, [r3, #16]
 800adcc:	0752      	lsls	r2, r2, #29
 800adce:	d502      	bpl.n	800add6 <HAL_TIM_IRQHandler+0x1e>
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	0750      	lsls	r0, r2, #29
 800add4:	d437      	bmi.n	800ae46 <HAL_TIM_IRQHandler+0x8e>
 800add6:	691a      	ldr	r2, [r3, #16]
 800add8:	0711      	lsls	r1, r2, #28
 800adda:	d502      	bpl.n	800ade2 <HAL_TIM_IRQHandler+0x2a>
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	0712      	lsls	r2, r2, #28
 800ade0:	d422      	bmi.n	800ae28 <HAL_TIM_IRQHandler+0x70>
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	06d0      	lsls	r0, r2, #27
 800ade6:	d502      	bpl.n	800adee <HAL_TIM_IRQHandler+0x36>
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	06d1      	lsls	r1, r2, #27
 800adec:	d40c      	bmi.n	800ae08 <HAL_TIM_IRQHandler+0x50>
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	07d2      	lsls	r2, r2, #31
 800adf2:	d502      	bpl.n	800adfa <HAL_TIM_IRQHandler+0x42>
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	07d0      	lsls	r0, r2, #31
 800adf8:	d450      	bmi.n	800ae9c <HAL_TIM_IRQHandler+0xe4>
 800adfa:	691a      	ldr	r2, [r3, #16]
 800adfc:	0651      	lsls	r1, r2, #25
 800adfe:	d502      	bpl.n	800ae06 <HAL_TIM_IRQHandler+0x4e>
 800ae00:	68da      	ldr	r2, [r3, #12]
 800ae02:	0652      	lsls	r2, r2, #25
 800ae04:	d443      	bmi.n	800ae8e <HAL_TIM_IRQHandler+0xd6>
 800ae06:	bd10      	pop	{r4, pc}
 800ae08:	f06f 0110 	mvn.w	r1, #16
 800ae0c:	2208      	movs	r2, #8
 800ae0e:	6119      	str	r1, [r3, #16]
 800ae10:	7622      	strb	r2, [r4, #24]
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	4620      	mov	r0, r4
 800ae16:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ae1a:	d047      	beq.n	800aeac <HAL_TIM_IRQHandler+0xf4>
 800ae1c:	f7ff ffc6 	bl	800adac <HAL_TIM_IC_CaptureCallback>
 800ae20:	2200      	movs	r2, #0
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	7622      	strb	r2, [r4, #24]
 800ae26:	e7e2      	b.n	800adee <HAL_TIM_IRQHandler+0x36>
 800ae28:	f06f 0108 	mvn.w	r1, #8
 800ae2c:	2204      	movs	r2, #4
 800ae2e:	6119      	str	r1, [r3, #16]
 800ae30:	7622      	strb	r2, [r4, #24]
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	4620      	mov	r0, r4
 800ae36:	079b      	lsls	r3, r3, #30
 800ae38:	d044      	beq.n	800aec4 <HAL_TIM_IRQHandler+0x10c>
 800ae3a:	f7ff ffb7 	bl	800adac <HAL_TIM_IC_CaptureCallback>
 800ae3e:	2200      	movs	r2, #0
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	7622      	strb	r2, [r4, #24]
 800ae44:	e7cd      	b.n	800ade2 <HAL_TIM_IRQHandler+0x2a>
 800ae46:	f06f 0104 	mvn.w	r1, #4
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	6119      	str	r1, [r3, #16]
 800ae4e:	7622      	strb	r2, [r4, #24]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	4620      	mov	r0, r4
 800ae54:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ae58:	d131      	bne.n	800aebe <HAL_TIM_IRQHandler+0x106>
 800ae5a:	f7ff ffa5 	bl	800ada8 <HAL_TIM_OC_DelayElapsedCallback>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f7ff ffa6 	bl	800adb0 <HAL_TIM_PWM_PulseFinishedCallback>
 800ae64:	2200      	movs	r2, #0
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	7622      	strb	r2, [r4, #24]
 800ae6a:	e7b4      	b.n	800add6 <HAL_TIM_IRQHandler+0x1e>
 800ae6c:	f06f 0102 	mvn.w	r1, #2
 800ae70:	2201      	movs	r2, #1
 800ae72:	6119      	str	r1, [r3, #16]
 800ae74:	7602      	strb	r2, [r0, #24]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	0799      	lsls	r1, r3, #30
 800ae7a:	d11d      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x100>
 800ae7c:	f7ff ff94 	bl	800ada8 <HAL_TIM_OC_DelayElapsedCallback>
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7ff ff95 	bl	800adb0 <HAL_TIM_PWM_PulseFinishedCallback>
 800ae86:	2200      	movs	r2, #0
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	7622      	strb	r2, [r4, #24]
 800ae8c:	e79d      	b.n	800adca <HAL_TIM_IRQHandler+0x12>
 800ae8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae92:	4620      	mov	r0, r4
 800ae94:	611a      	str	r2, [r3, #16]
 800ae96:	f7ff ff8d 	bl	800adb4 <HAL_TIM_TriggerCallback>
 800ae9a:	bd10      	pop	{r4, pc}
 800ae9c:	f06f 0201 	mvn.w	r2, #1
 800aea0:	4620      	mov	r0, r4
 800aea2:	611a      	str	r2, [r3, #16]
 800aea4:	f7fc fa9c 	bl	80073e0 <HAL_TIM_PeriodElapsedCallback>
 800aea8:	6823      	ldr	r3, [r4, #0]
 800aeaa:	e7a6      	b.n	800adfa <HAL_TIM_IRQHandler+0x42>
 800aeac:	f7ff ff7c 	bl	800ada8 <HAL_TIM_OC_DelayElapsedCallback>
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f7ff ff7d 	bl	800adb0 <HAL_TIM_PWM_PulseFinishedCallback>
 800aeb6:	e7b3      	b.n	800ae20 <HAL_TIM_IRQHandler+0x68>
 800aeb8:	f7ff ff78 	bl	800adac <HAL_TIM_IC_CaptureCallback>
 800aebc:	e7e3      	b.n	800ae86 <HAL_TIM_IRQHandler+0xce>
 800aebe:	f7ff ff75 	bl	800adac <HAL_TIM_IC_CaptureCallback>
 800aec2:	e7cf      	b.n	800ae64 <HAL_TIM_IRQHandler+0xac>
 800aec4:	f7ff ff70 	bl	800ada8 <HAL_TIM_OC_DelayElapsedCallback>
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7ff ff71 	bl	800adb0 <HAL_TIM_PWM_PulseFinishedCallback>
 800aece:	e7b6      	b.n	800ae3e <HAL_TIM_IRQHandler+0x86>

0800aed0 <HAL_TIMEx_MasterConfigSynchronization>:
 800aed0:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800aed4:	2a01      	cmp	r2, #1
 800aed6:	d028      	beq.n	800af2a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2002      	movs	r0, #2
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	b430      	push	{r4, r5}
 800aee0:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
 800aee4:	6850      	ldr	r0, [r2, #4]
 800aee6:	680d      	ldr	r5, [r1, #0]
 800aee8:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 800aeec:	4328      	orrs	r0, r5
 800aeee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800aef2:	6894      	ldr	r4, [r2, #8]
 800aef4:	6050      	str	r0, [r2, #4]
 800aef6:	d00a      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800aef8:	480d      	ldr	r0, [pc, #52]	; (800af30 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800aefa:	4282      	cmp	r2, r0
 800aefc:	d007      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800aefe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800af02:	4282      	cmp	r2, r0
 800af04:	d003      	beq.n	800af0e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800af06:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800af0a:	4282      	cmp	r2, r0
 800af0c:	d104      	bne.n	800af18 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800af0e:	6849      	ldr	r1, [r1, #4]
 800af10:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 800af14:	430c      	orrs	r4, r1
 800af16:	6094      	str	r4, [r2, #8]
 800af18:	2200      	movs	r2, #0
 800af1a:	2101      	movs	r1, #1
 800af1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800af20:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800af24:	4610      	mov	r0, r2
 800af26:	bc30      	pop	{r4, r5}
 800af28:	4770      	bx	lr
 800af2a:	2002      	movs	r0, #2
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	40000400 	.word	0x40000400

0800af34 <HAL_UART_Init>:
 800af34:	2800      	cmp	r0, #0
 800af36:	f000 8081 	beq.w	800b03c <HAL_UART_Init+0x108>
 800af3a:	b570      	push	{r4, r5, r6, lr}
 800af3c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800af40:	4604      	mov	r4, r0
 800af42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800af46:	2b00      	cmp	r3, #0
 800af48:	d070      	beq.n	800b02c <HAL_UART_Init+0xf8>
 800af4a:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
 800af4e:	2124      	movs	r1, #36	; 0x24
 800af50:	6920      	ldr	r0, [r4, #16]
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	4302      	orrs	r2, r0
 800af56:	6960      	ldr	r0, [r4, #20]
 800af58:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800af5c:	4302      	orrs	r2, r0
 800af5e:	69e0      	ldr	r0, [r4, #28]
 800af60:	4302      	orrs	r2, r0
 800af62:	68d8      	ldr	r0, [r3, #12]
 800af64:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800af68:	60d8      	str	r0, [r3, #12]
 800af6a:	6919      	ldr	r1, [r3, #16]
 800af6c:	69a0      	ldr	r0, [r4, #24]
 800af6e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800af72:	4329      	orrs	r1, r5
 800af74:	6119      	str	r1, [r3, #16]
 800af76:	68d9      	ldr	r1, [r3, #12]
 800af78:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800af7c:	f021 010c 	bic.w	r1, r1, #12
 800af80:	430a      	orrs	r2, r1
 800af82:	60da      	str	r2, [r3, #12]
 800af84:	695a      	ldr	r2, [r3, #20]
 800af86:	492e      	ldr	r1, [pc, #184]	; (800b040 <HAL_UART_Init+0x10c>)
 800af88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800af8c:	4302      	orrs	r2, r0
 800af8e:	428b      	cmp	r3, r1
 800af90:	615a      	str	r2, [r3, #20]
 800af92:	d050      	beq.n	800b036 <HAL_UART_Init+0x102>
 800af94:	f7ff fdb0 	bl	800aaf8 <HAL_RCC_GetPCLK1Freq>
 800af98:	69e3      	ldr	r3, [r4, #28]
 800af9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800af9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	d027      	beq.n	800affa <HAL_UART_Init+0xc6>
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	fbb0 f3f3 	udiv	r3, r0, r3
 800afb0:	2564      	movs	r5, #100	; 0x64
 800afb2:	4824      	ldr	r0, [pc, #144]	; (800b044 <HAL_UART_Init+0x110>)
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	fba0 6103 	umull	r6, r1, r0, r3
 800afba:	0949      	lsrs	r1, r1, #5
 800afbc:	fb05 3311 	mls	r3, r5, r1, r3
 800afc0:	011b      	lsls	r3, r3, #4
 800afc2:	3332      	adds	r3, #50	; 0x32
 800afc4:	fba0 0303 	umull	r0, r3, r0, r3
 800afc8:	0109      	lsls	r1, r1, #4
 800afca:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800afce:	6093      	str	r3, [r2, #8]
 800afd0:	2500      	movs	r5, #0
 800afd2:	2120      	movs	r1, #32
 800afd4:	6913      	ldr	r3, [r2, #16]
 800afd6:	4628      	mov	r0, r5
 800afd8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800afdc:	6113      	str	r3, [r2, #16]
 800afde:	6953      	ldr	r3, [r2, #20]
 800afe0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800afe4:	6153      	str	r3, [r2, #20]
 800afe6:	68d3      	ldr	r3, [r2, #12]
 800afe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800afec:	60d3      	str	r3, [r2, #12]
 800afee:	6425      	str	r5, [r4, #64]	; 0x40
 800aff0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800aff4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	fbb0 f0f3 	udiv	r0, r0, r3
 800b000:	2364      	movs	r3, #100	; 0x64
 800b002:	4e10      	ldr	r6, [pc, #64]	; (800b044 <HAL_UART_Init+0x110>)
 800b004:	6822      	ldr	r2, [r4, #0]
 800b006:	fba6 5100 	umull	r5, r1, r6, r0
 800b00a:	094d      	lsrs	r5, r1, #5
 800b00c:	fb03 0315 	mls	r3, r3, r5, r0
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	3332      	adds	r3, #50	; 0x32
 800b014:	fba6 1303 	umull	r1, r3, r6, r3
 800b018:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800b01c:	091b      	lsrs	r3, r3, #4
 800b01e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b022:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b026:	440b      	add	r3, r1
 800b028:	6093      	str	r3, [r2, #8]
 800b02a:	e7d1      	b.n	800afd0 <HAL_UART_Init+0x9c>
 800b02c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800b030:	f7fc fe20 	bl	8007c74 <HAL_UART_MspInit>
 800b034:	e789      	b.n	800af4a <HAL_UART_Init+0x16>
 800b036:	f7ff fd6f 	bl	800ab18 <HAL_RCC_GetPCLK2Freq>
 800b03a:	e7ad      	b.n	800af98 <HAL_UART_Init+0x64>
 800b03c:	2001      	movs	r0, #1
 800b03e:	4770      	bx	lr
 800b040:	40013800 	.word	0x40013800
 800b044:	51eb851f 	.word	0x51eb851f

0800b048 <HAL_UART_Transmit_DMA>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800b050:	2820      	cmp	r0, #32
 800b052:	d12d      	bne.n	800b0b0 <HAL_UART_Transmit_DMA+0x68>
 800b054:	b351      	cbz	r1, 800b0ac <HAL_UART_Transmit_DMA+0x64>
 800b056:	b34a      	cbz	r2, 800b0ac <HAL_UART_Transmit_DMA+0x64>
 800b058:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800b05c:	2801      	cmp	r0, #1
 800b05e:	d027      	beq.n	800b0b0 <HAL_UART_Transmit_DMA+0x68>
 800b060:	2500      	movs	r5, #0
 800b062:	f04f 0e01 	mov.w	lr, #1
 800b066:	f04f 0c21 	mov.w	ip, #33	; 0x21
 800b06a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b06c:	4f11      	ldr	r7, [pc, #68]	; (800b0b4 <HAL_UART_Transmit_DMA+0x6c>)
 800b06e:	4e12      	ldr	r6, [pc, #72]	; (800b0b8 <HAL_UART_Transmit_DMA+0x70>)
 800b070:	84e2      	strh	r2, [r4, #38]	; 0x26
 800b072:	84a2      	strh	r2, [r4, #36]	; 0x24
 800b074:	6425      	str	r5, [r4, #64]	; 0x40
 800b076:	6221      	str	r1, [r4, #32]
 800b078:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
 800b07c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
 800b080:	4613      	mov	r3, r2
 800b082:	6822      	ldr	r2, [r4, #0]
 800b084:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
 800b088:	4e0c      	ldr	r6, [pc, #48]	; (800b0bc <HAL_UART_Transmit_DMA+0x74>)
 800b08a:	3204      	adds	r2, #4
 800b08c:	6345      	str	r5, [r0, #52]	; 0x34
 800b08e:	6306      	str	r6, [r0, #48]	; 0x30
 800b090:	f7fd fd0e 	bl	8008ab0 <HAL_DMA_Start_IT>
 800b094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	4628      	mov	r0, r5
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800b0a2:	695a      	ldr	r2, [r3, #20]
 800b0a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b0a8:	615a      	str	r2, [r3, #20]
 800b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b0:	2002      	movs	r0, #2
 800b0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b4:	0800b161 	.word	0x0800b161
 800b0b8:	0800b18d 	.word	0x0800b18d
 800b0bc:	0800b19d 	.word	0x0800b19d

0800b0c0 <HAL_UART_Receive_DMA>:
 800b0c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d13f      	bne.n	800b148 <HAL_UART_Receive_DMA+0x88>
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	d03b      	beq.n	800b144 <HAL_UART_Receive_DMA+0x84>
 800b0cc:	2a00      	cmp	r2, #0
 800b0ce:	d039      	beq.n	800b144 <HAL_UART_Receive_DMA+0x84>
 800b0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	b083      	sub	sp, #12
 800b0dc:	d036      	beq.n	800b14c <HAL_UART_Receive_DMA+0x8c>
 800b0de:	2500      	movs	r5, #0
 800b0e0:	f04f 0e01 	mov.w	lr, #1
 800b0e4:	f04f 0c22 	mov.w	ip, #34	; 0x22
 800b0e8:	6281      	str	r1, [r0, #40]	; 0x28
 800b0ea:	8582      	strh	r2, [r0, #44]	; 0x2c
 800b0ec:	4f19      	ldr	r7, [pc, #100]	; (800b154 <HAL_UART_Receive_DMA+0x94>)
 800b0ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b0f0:	4e19      	ldr	r6, [pc, #100]	; (800b158 <HAL_UART_Receive_DMA+0x98>)
 800b0f2:	6325      	str	r5, [r4, #48]	; 0x30
 800b0f4:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
 800b0f8:	6425      	str	r5, [r4, #64]	; 0x40
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
 800b100:	460a      	mov	r2, r1
 800b102:	6821      	ldr	r1, [r4, #0]
 800b104:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
 800b108:	4e14      	ldr	r6, [pc, #80]	; (800b15c <HAL_UART_Receive_DMA+0x9c>)
 800b10a:	3104      	adds	r1, #4
 800b10c:	6345      	str	r5, [r0, #52]	; 0x34
 800b10e:	6306      	str	r6, [r0, #48]	; 0x30
 800b110:	f7fd fcce 	bl	8008ab0 <HAL_DMA_Start_IT>
 800b114:	4628      	mov	r0, r5
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	9501      	str	r5, [sp, #4]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	9201      	str	r2, [sp, #4]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800b124:	9201      	str	r2, [sp, #4]
 800b126:	9a01      	ldr	r2, [sp, #4]
 800b128:	68da      	ldr	r2, [r3, #12]
 800b12a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b12e:	60da      	str	r2, [r3, #12]
 800b130:	695a      	ldr	r2, [r3, #20]
 800b132:	f042 0201 	orr.w	r2, r2, #1
 800b136:	615a      	str	r2, [r3, #20]
 800b138:	695a      	ldr	r2, [r3, #20]
 800b13a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b13e:	615a      	str	r2, [r3, #20]
 800b140:	b003      	add	sp, #12
 800b142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b144:	2001      	movs	r0, #1
 800b146:	4770      	bx	lr
 800b148:	2002      	movs	r0, #2
 800b14a:	4770      	bx	lr
 800b14c:	2002      	movs	r0, #2
 800b14e:	b003      	add	sp, #12
 800b150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b152:	bf00      	nop
 800b154:	0800b249 	.word	0x0800b249
 800b158:	0800b22d 	.word	0x0800b22d
 800b15c:	0800b19d 	.word	0x0800b19d

0800b160 <UART_DMATransmitCplt>:
 800b160:	b508      	push	{r3, lr}
 800b162:	6803      	ldr	r3, [r0, #0]
 800b164:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f013 0320 	ands.w	r3, r3, #32
 800b16c:	d10a      	bne.n	800b184 <UART_DMATransmitCplt+0x24>
 800b16e:	6802      	ldr	r2, [r0, #0]
 800b170:	84c3      	strh	r3, [r0, #38]	; 0x26
 800b172:	6953      	ldr	r3, [r2, #20]
 800b174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b178:	6153      	str	r3, [r2, #20]
 800b17a:	68d3      	ldr	r3, [r2, #12]
 800b17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b180:	60d3      	str	r3, [r2, #12]
 800b182:	bd08      	pop	{r3, pc}
 800b184:	f7fc fbac 	bl	80078e0 <HAL_UART_TxCpltCallback>
 800b188:	bd08      	pop	{r3, pc}
 800b18a:	bf00      	nop

0800b18c <UART_DMATxHalfCplt>:
 800b18c:	b508      	push	{r3, lr}
 800b18e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b190:	f7fc fb92 	bl	80078b8 <HAL_UART_TxHalfCpltCallback>
 800b194:	bd08      	pop	{r3, pc}
 800b196:	bf00      	nop

0800b198 <HAL_UART_RxHalfCpltCallback>:
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop

0800b19c <UART_DMAError>:
 800b19c:	b508      	push	{r3, lr}
 800b19e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b1a0:	6803      	ldr	r3, [r0, #0]
 800b1a2:	6959      	ldr	r1, [r3, #20]
 800b1a4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800b1a8:	2a21      	cmp	r2, #33	; 0x21
 800b1aa:	d00b      	beq.n	800b1c4 <UART_DMAError+0x28>
 800b1ac:	6959      	ldr	r1, [r3, #20]
 800b1ae:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b1b2:	2a22      	cmp	r2, #34	; 0x22
 800b1b4:	d016      	beq.n	800b1e4 <UART_DMAError+0x48>
 800b1b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b1b8:	f043 0310 	orr.w	r3, r3, #16
 800b1bc:	6403      	str	r3, [r0, #64]	; 0x40
 800b1be:	f7fc fb71 	bl	80078a4 <HAL_UART_ErrorCallback>
 800b1c2:	bd08      	pop	{r3, pc}
 800b1c4:	0609      	lsls	r1, r1, #24
 800b1c6:	d5f1      	bpl.n	800b1ac <UART_DMAError+0x10>
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2120      	movs	r1, #32
 800b1cc:	84c2      	strh	r2, [r0, #38]	; 0x26
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b1d4:	60da      	str	r2, [r3, #12]
 800b1d6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 800b1da:	6959      	ldr	r1, [r3, #20]
 800b1dc:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800b1e0:	2a22      	cmp	r2, #34	; 0x22
 800b1e2:	d1e8      	bne.n	800b1b6 <UART_DMAError+0x1a>
 800b1e4:	064a      	lsls	r2, r1, #25
 800b1e6:	d5e6      	bpl.n	800b1b6 <UART_DMAError+0x1a>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1f2:	60da      	str	r2, [r3, #12]
 800b1f4:	695a      	ldr	r2, [r3, #20]
 800b1f6:	f022 0201 	bic.w	r2, r2, #1
 800b1fa:	615a      	str	r2, [r3, #20]
 800b1fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b1fe:	2a01      	cmp	r2, #1
 800b200:	d103      	bne.n	800b20a <UART_DMAError+0x6e>
 800b202:	68da      	ldr	r2, [r3, #12]
 800b204:	f022 0210 	bic.w	r2, r2, #16
 800b208:	60da      	str	r2, [r3, #12]
 800b20a:	2220      	movs	r2, #32
 800b20c:	2300      	movs	r3, #0
 800b20e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 800b212:	6303      	str	r3, [r0, #48]	; 0x30
 800b214:	e7cf      	b.n	800b1b6 <UART_DMAError+0x1a>
 800b216:	bf00      	nop

0800b218 <UART_DMAAbortOnError>:
 800b218:	b508      	push	{r3, lr}
 800b21a:	2300      	movs	r3, #0
 800b21c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b21e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b220:	84c3      	strh	r3, [r0, #38]	; 0x26
 800b222:	f7fc fb3f 	bl	80078a4 <HAL_UART_ErrorCallback>
 800b226:	bd08      	pop	{r3, pc}

0800b228 <HAL_UARTEx_RxEventCallback>:
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop

0800b22c <UART_DMARxHalfCplt>:
 800b22c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b22e:	b508      	push	{r3, lr}
 800b230:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b232:	2b01      	cmp	r3, #1
 800b234:	d002      	beq.n	800b23c <UART_DMARxHalfCplt+0x10>
 800b236:	f7ff ffaf 	bl	800b198 <HAL_UART_RxHalfCpltCallback>
 800b23a:	bd08      	pop	{r3, pc}
 800b23c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b23e:	0849      	lsrs	r1, r1, #1
 800b240:	f7ff fff2 	bl	800b228 <HAL_UARTEx_RxEventCallback>
 800b244:	bd08      	pop	{r3, pc}
 800b246:	bf00      	nop

0800b248 <UART_DMAReceiveCplt>:
 800b248:	b508      	push	{r3, lr}
 800b24a:	6803      	ldr	r3, [r0, #0]
 800b24c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f013 0320 	ands.w	r3, r3, #32
 800b254:	d113      	bne.n	800b27e <UART_DMAReceiveCplt+0x36>
 800b256:	2120      	movs	r1, #32
 800b258:	6802      	ldr	r2, [r0, #0]
 800b25a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b25c:	68d3      	ldr	r3, [r2, #12]
 800b25e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b262:	60d3      	str	r3, [r2, #12]
 800b264:	6953      	ldr	r3, [r2, #20]
 800b266:	f023 0301 	bic.w	r3, r3, #1
 800b26a:	6153      	str	r3, [r2, #20]
 800b26c:	6953      	ldr	r3, [r2, #20]
 800b26e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b272:	6153      	str	r3, [r2, #20]
 800b274:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
 800b278:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d009      	beq.n	800b292 <UART_DMAReceiveCplt+0x4a>
 800b27e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b280:	2b01      	cmp	r3, #1
 800b282:	d002      	beq.n	800b28a <UART_DMAReceiveCplt+0x42>
 800b284:	f7fc f9f2 	bl	800766c <HAL_UART_RxCpltCallback>
 800b288:	bd08      	pop	{r3, pc}
 800b28a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b28c:	f7ff ffcc 	bl	800b228 <HAL_UARTEx_RxEventCallback>
 800b290:	bd08      	pop	{r3, pc}
 800b292:	68d3      	ldr	r3, [r2, #12]
 800b294:	f023 0310 	bic.w	r3, r3, #16
 800b298:	60d3      	str	r3, [r2, #12]
 800b29a:	e7f0      	b.n	800b27e <UART_DMAReceiveCplt+0x36>

0800b29c <UART_Receive_IT.part.0.isra.0>:
 800b29c:	6883      	ldr	r3, [r0, #8]
 800b29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a2:	d03b      	beq.n	800b31c <UART_Receive_IT.part.0.isra.0+0x80>
 800b2a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d030      	beq.n	800b30c <UART_Receive_IT.part.0.isra.0+0x70>
 800b2aa:	6803      	ldr	r3, [r0, #0]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b2:	7013      	strb	r3, [r2, #0]
 800b2b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	6283      	str	r3, [r0, #40]	; 0x28
 800b2ba:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b2c2:	bb53      	cbnz	r3, 800b31a <UART_Receive_IT.part.0.isra.0+0x7e>
 800b2c4:	f04f 0c20 	mov.w	ip, #32
 800b2c8:	6802      	ldr	r2, [r0, #0]
 800b2ca:	b500      	push	{lr}
 800b2cc:	68d1      	ldr	r1, [r2, #12]
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	f021 0120 	bic.w	r1, r1, #32
 800b2d4:	60d1      	str	r1, [r2, #12]
 800b2d6:	68d1      	ldr	r1, [r2, #12]
 800b2d8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b2dc:	60d1      	str	r1, [r2, #12]
 800b2de:	6951      	ldr	r1, [r2, #20]
 800b2e0:	f021 0101 	bic.w	r1, r1, #1
 800b2e4:	6151      	str	r1, [r2, #20]
 800b2e6:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
 800b2ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b2ec:	2901      	cmp	r1, #1
 800b2ee:	d120      	bne.n	800b332 <UART_Receive_IT.part.0.isra.0+0x96>
 800b2f0:	6303      	str	r3, [r0, #48]	; 0x30
 800b2f2:	68d1      	ldr	r1, [r2, #12]
 800b2f4:	f021 0110 	bic.w	r1, r1, #16
 800b2f8:	60d1      	str	r1, [r2, #12]
 800b2fa:	6811      	ldr	r1, [r2, #0]
 800b2fc:	06c9      	lsls	r1, r1, #27
 800b2fe:	d422      	bmi.n	800b346 <UART_Receive_IT.part.0.isra.0+0xaa>
 800b300:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b302:	f7ff ff91 	bl	800b228 <HAL_UARTEx_RxEventCallback>
 800b306:	b003      	add	sp, #12
 800b308:	f85d fb04 	ldr.w	pc, [sp], #4
 800b30c:	6903      	ldr	r3, [r0, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1cb      	bne.n	800b2aa <UART_Receive_IT.part.0.isra.0+0xe>
 800b312:	6803      	ldr	r3, [r0, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	7013      	strb	r3, [r2, #0]
 800b318:	e7cc      	b.n	800b2b4 <UART_Receive_IT.part.0.isra.0+0x18>
 800b31a:	4770      	bx	lr
 800b31c:	6903      	ldr	r3, [r0, #16]
 800b31e:	b96b      	cbnz	r3, 800b33c <UART_Receive_IT.part.0.isra.0+0xa0>
 800b320:	6802      	ldr	r2, [r0, #0]
 800b322:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b324:	6852      	ldr	r2, [r2, #4]
 800b326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b32a:	f823 2b02 	strh.w	r2, [r3], #2
 800b32e:	6283      	str	r3, [r0, #40]	; 0x28
 800b330:	e7c3      	b.n	800b2ba <UART_Receive_IT.part.0.isra.0+0x1e>
 800b332:	f7fc f99b 	bl	800766c <HAL_UART_RxCpltCallback>
 800b336:	b003      	add	sp, #12
 800b338:	f85d fb04 	ldr.w	pc, [sp], #4
 800b33c:	6803      	ldr	r3, [r0, #0]
 800b33e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	7013      	strb	r3, [r2, #0]
 800b344:	e7b6      	b.n	800b2b4 <UART_Receive_IT.part.0.isra.0+0x18>
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	6813      	ldr	r3, [r2, #0]
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	6853      	ldr	r3, [r2, #4]
 800b34e:	9301      	str	r3, [sp, #4]
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	e7d5      	b.n	800b300 <UART_Receive_IT.part.0.isra.0+0x64>

0800b354 <HAL_UART_IRQHandler>:
 800b354:	b530      	push	{r4, r5, lr}
 800b356:	6803      	ldr	r3, [r0, #0]
 800b358:	4604      	mov	r4, r0
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	b083      	sub	sp, #12
 800b35e:	f012 0f0f 	tst.w	r2, #15
 800b362:	68d9      	ldr	r1, [r3, #12]
 800b364:	695d      	ldr	r5, [r3, #20]
 800b366:	d14e      	bne.n	800b406 <HAL_UART_IRQHandler+0xb2>
 800b368:	0695      	lsls	r5, r2, #26
 800b36a:	d502      	bpl.n	800b372 <HAL_UART_IRQHandler+0x1e>
 800b36c:	068d      	lsls	r5, r1, #26
 800b36e:	f100 8090 	bmi.w	800b492 <HAL_UART_IRQHandler+0x13e>
 800b372:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b374:	2801      	cmp	r0, #1
 800b376:	d00b      	beq.n	800b390 <HAL_UART_IRQHandler+0x3c>
 800b378:	0610      	lsls	r0, r2, #24
 800b37a:	d502      	bpl.n	800b382 <HAL_UART_IRQHandler+0x2e>
 800b37c:	060d      	lsls	r5, r1, #24
 800b37e:	f100 8092 	bmi.w	800b4a6 <HAL_UART_IRQHandler+0x152>
 800b382:	0650      	lsls	r0, r2, #25
 800b384:	d502      	bpl.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b386:	064a      	lsls	r2, r1, #25
 800b388:	f100 80ab 	bmi.w	800b4e2 <HAL_UART_IRQHandler+0x18e>
 800b38c:	b003      	add	sp, #12
 800b38e:	bd30      	pop	{r4, r5, pc}
 800b390:	06d0      	lsls	r0, r2, #27
 800b392:	d5f1      	bpl.n	800b378 <HAL_UART_IRQHandler+0x24>
 800b394:	06cd      	lsls	r5, r1, #27
 800b396:	d5ef      	bpl.n	800b378 <HAL_UART_IRQHandler+0x24>
 800b398:	2100      	movs	r1, #0
 800b39a:	9101      	str	r1, [sp, #4]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	9201      	str	r2, [sp, #4]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	9201      	str	r2, [sp, #4]
 800b3a4:	9a01      	ldr	r2, [sp, #4]
 800b3a6:	695a      	ldr	r2, [r3, #20]
 800b3a8:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800b3ac:	f000 80d2 	beq.w	800b554 <HAL_UART_IRQHandler+0x200>
 800b3b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b3b2:	6802      	ldr	r2, [r0, #0]
 800b3b4:	6852      	ldr	r2, [r2, #4]
 800b3b6:	b292      	uxth	r2, r2
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d0e7      	beq.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b3bc:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b3be:	4295      	cmp	r5, r2
 800b3c0:	d9e4      	bls.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b3c2:	85e2      	strh	r2, [r4, #46]	; 0x2e
 800b3c4:	6982      	ldr	r2, [r0, #24]
 800b3c6:	2a20      	cmp	r2, #32
 800b3c8:	d016      	beq.n	800b3f8 <HAL_UART_IRQHandler+0xa4>
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3d0:	60da      	str	r2, [r3, #12]
 800b3d2:	695a      	ldr	r2, [r3, #20]
 800b3d4:	f022 0201 	bic.w	r2, r2, #1
 800b3d8:	615a      	str	r2, [r3, #20]
 800b3da:	695a      	ldr	r2, [r3, #20]
 800b3dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e0:	615a      	str	r2, [r3, #20]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800b3e8:	6321      	str	r1, [r4, #48]	; 0x30
 800b3ea:	68da      	ldr	r2, [r3, #12]
 800b3ec:	f022 0210 	bic.w	r2, r2, #16
 800b3f0:	60da      	str	r2, [r3, #12]
 800b3f2:	f7fd fba7 	bl	8008b44 <HAL_DMA_Abort>
 800b3f6:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b3f8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	1a69      	subs	r1, r5, r1
 800b3fe:	b289      	uxth	r1, r1
 800b400:	f7ff ff12 	bl	800b228 <HAL_UARTEx_RxEventCallback>
 800b404:	e7c2      	b.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b406:	f005 0501 	and.w	r5, r5, #1
 800b40a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800b40e:	4328      	orrs	r0, r5
 800b410:	d0af      	beq.n	800b372 <HAL_UART_IRQHandler+0x1e>
 800b412:	07d0      	lsls	r0, r2, #31
 800b414:	d505      	bpl.n	800b422 <HAL_UART_IRQHandler+0xce>
 800b416:	05c8      	lsls	r0, r1, #23
 800b418:	d503      	bpl.n	800b422 <HAL_UART_IRQHandler+0xce>
 800b41a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b41c:	f040 0001 	orr.w	r0, r0, #1
 800b420:	6420      	str	r0, [r4, #64]	; 0x40
 800b422:	0750      	lsls	r0, r2, #29
 800b424:	d530      	bpl.n	800b488 <HAL_UART_IRQHandler+0x134>
 800b426:	b14d      	cbz	r5, 800b43c <HAL_UART_IRQHandler+0xe8>
 800b428:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b42a:	f040 0002 	orr.w	r0, r0, #2
 800b42e:	6420      	str	r0, [r4, #64]	; 0x40
 800b430:	0790      	lsls	r0, r2, #30
 800b432:	d503      	bpl.n	800b43c <HAL_UART_IRQHandler+0xe8>
 800b434:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b436:	f040 0004 	orr.w	r0, r0, #4
 800b43a:	6420      	str	r0, [r4, #64]	; 0x40
 800b43c:	0710      	lsls	r0, r2, #28
 800b43e:	d507      	bpl.n	800b450 <HAL_UART_IRQHandler+0xfc>
 800b440:	f001 0020 	and.w	r0, r1, #32
 800b444:	4328      	orrs	r0, r5
 800b446:	d003      	beq.n	800b450 <HAL_UART_IRQHandler+0xfc>
 800b448:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b44a:	f040 0008 	orr.w	r0, r0, #8
 800b44e:	6420      	str	r0, [r4, #64]	; 0x40
 800b450:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b452:	2800      	cmp	r0, #0
 800b454:	d09a      	beq.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b456:	0690      	lsls	r0, r2, #26
 800b458:	d509      	bpl.n	800b46e <HAL_UART_IRQHandler+0x11a>
 800b45a:	068a      	lsls	r2, r1, #26
 800b45c:	d507      	bpl.n	800b46e <HAL_UART_IRQHandler+0x11a>
 800b45e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800b462:	2a22      	cmp	r2, #34	; 0x22
 800b464:	d103      	bne.n	800b46e <HAL_UART_IRQHandler+0x11a>
 800b466:	4620      	mov	r0, r4
 800b468:	f7ff ff18 	bl	800b29c <UART_Receive_IT.part.0.isra.0>
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	695a      	ldr	r2, [r3, #20]
 800b470:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800b472:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800b476:	f005 0508 	and.w	r5, r5, #8
 800b47a:	4315      	orrs	r5, r2
 800b47c:	d13c      	bne.n	800b4f8 <HAL_UART_IRQHandler+0x1a4>
 800b47e:	4620      	mov	r0, r4
 800b480:	f7fc fa10 	bl	80078a4 <HAL_UART_ErrorCallback>
 800b484:	6425      	str	r5, [r4, #64]	; 0x40
 800b486:	e781      	b.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b488:	0790      	lsls	r0, r2, #30
 800b48a:	d5d7      	bpl.n	800b43c <HAL_UART_IRQHandler+0xe8>
 800b48c:	2d00      	cmp	r5, #0
 800b48e:	d1d1      	bne.n	800b434 <HAL_UART_IRQHandler+0xe0>
 800b490:	e7d4      	b.n	800b43c <HAL_UART_IRQHandler+0xe8>
 800b492:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b496:	2b22      	cmp	r3, #34	; 0x22
 800b498:	f47f af78 	bne.w	800b38c <HAL_UART_IRQHandler+0x38>
 800b49c:	b003      	add	sp, #12
 800b49e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4a2:	f7ff befb 	b.w	800b29c <UART_Receive_IT.part.0.isra.0>
 800b4a6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b4aa:	2a21      	cmp	r2, #33	; 0x21
 800b4ac:	f47f af6e 	bne.w	800b38c <HAL_UART_IRQHandler+0x38>
 800b4b0:	68a2      	ldr	r2, [r4, #8]
 800b4b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b4b6:	d06e      	beq.n	800b596 <HAL_UART_IRQHandler+0x242>
 800b4b8:	6a22      	ldr	r2, [r4, #32]
 800b4ba:	1c51      	adds	r1, r2, #1
 800b4bc:	6221      	str	r1, [r4, #32]
 800b4be:	7812      	ldrb	r2, [r2, #0]
 800b4c0:	605a      	str	r2, [r3, #4]
 800b4c2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800b4c4:	3a01      	subs	r2, #1
 800b4c6:	b292      	uxth	r2, r2
 800b4c8:	84e2      	strh	r2, [r4, #38]	; 0x26
 800b4ca:	2a00      	cmp	r2, #0
 800b4cc:	f47f af5e 	bne.w	800b38c <HAL_UART_IRQHandler+0x38>
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4d6:	60da      	str	r2, [r3, #12]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4de:	60da      	str	r2, [r3, #12]
 800b4e0:	e754      	b.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b4e2:	2120      	movs	r1, #32
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4ec:	60da      	str	r2, [r3, #12]
 800b4ee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800b4f2:	f7fc f9f5 	bl	80078e0 <HAL_UART_TxCpltCallback>
 800b4f6:	e749      	b.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b4f8:	68da      	ldr	r2, [r3, #12]
 800b4fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b4fe:	60da      	str	r2, [r3, #12]
 800b500:	695a      	ldr	r2, [r3, #20]
 800b502:	f022 0201 	bic.w	r2, r2, #1
 800b506:	615a      	str	r2, [r3, #20]
 800b508:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b50a:	2a01      	cmp	r2, #1
 800b50c:	d103      	bne.n	800b516 <HAL_UART_IRQHandler+0x1c2>
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	f022 0210 	bic.w	r2, r2, #16
 800b514:	60da      	str	r2, [r3, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	2120      	movs	r1, #32
 800b51a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
 800b51e:	6322      	str	r2, [r4, #48]	; 0x30
 800b520:	695a      	ldr	r2, [r3, #20]
 800b522:	0655      	lsls	r5, r2, #25
 800b524:	d512      	bpl.n	800b54c <HAL_UART_IRQHandler+0x1f8>
 800b526:	695a      	ldr	r2, [r3, #20]
 800b528:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b52a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b52e:	615a      	str	r2, [r3, #20]
 800b530:	b160      	cbz	r0, 800b54c <HAL_UART_IRQHandler+0x1f8>
 800b532:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <HAL_UART_IRQHandler+0x258>)
 800b534:	6343      	str	r3, [r0, #52]	; 0x34
 800b536:	f7fd fb2d 	bl	8008b94 <HAL_DMA_Abort_IT>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f43f af26 	beq.w	800b38c <HAL_UART_IRQHandler+0x38>
 800b540:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b542:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b544:	b003      	add	sp, #12
 800b546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b54a:	4718      	bx	r3
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7fc f9a9 	bl	80078a4 <HAL_UART_ErrorCallback>
 800b552:	e71b      	b.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b554:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800b556:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800b558:	b280      	uxth	r0, r0
 800b55a:	b289      	uxth	r1, r1
 800b55c:	2900      	cmp	r1, #0
 800b55e:	f43f af15 	beq.w	800b38c <HAL_UART_IRQHandler+0x38>
 800b562:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b564:	1a08      	subs	r0, r1, r0
 800b566:	b281      	uxth	r1, r0
 800b568:	2900      	cmp	r1, #0
 800b56a:	f43f af0f 	beq.w	800b38c <HAL_UART_IRQHandler+0x38>
 800b56e:	2520      	movs	r5, #32
 800b570:	68d8      	ldr	r0, [r3, #12]
 800b572:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800b576:	60d8      	str	r0, [r3, #12]
 800b578:	6958      	ldr	r0, [r3, #20]
 800b57a:	f020 0001 	bic.w	r0, r0, #1
 800b57e:	6158      	str	r0, [r3, #20]
 800b580:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 800b584:	6322      	str	r2, [r4, #48]	; 0x30
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	4620      	mov	r0, r4
 800b58a:	f022 0210 	bic.w	r2, r2, #16
 800b58e:	60da      	str	r2, [r3, #12]
 800b590:	f7ff fe4a 	bl	800b228 <HAL_UARTEx_RxEventCallback>
 800b594:	e6fa      	b.n	800b38c <HAL_UART_IRQHandler+0x38>
 800b596:	6922      	ldr	r2, [r4, #16]
 800b598:	2a00      	cmp	r2, #0
 800b59a:	d18d      	bne.n	800b4b8 <HAL_UART_IRQHandler+0x164>
 800b59c:	6a22      	ldr	r2, [r4, #32]
 800b59e:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b5a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b5a6:	6059      	str	r1, [r3, #4]
 800b5a8:	6222      	str	r2, [r4, #32]
 800b5aa:	e78a      	b.n	800b4c2 <HAL_UART_IRQHandler+0x16e>
 800b5ac:	0800b219 	.word	0x0800b219

0800b5b0 <USB_EnableGlobalInt>:
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
 800b5b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800b5bc:	4610      	mov	r0, r2
 800b5be:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
 800b5c2:	4770      	bx	lr

0800b5c4 <USB_DisableGlobalInt>:
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800b5ca:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	400a      	ands	r2, r1
 800b5d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b5d6:	4770      	bx	lr

0800b5d8 <USB_DevInit>:
 800b5d8:	b084      	sub	sp, #16
 800b5da:	f10d 0c04 	add.w	ip, sp, #4
 800b5de:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
 800b5ee:	b004      	add	sp, #16
 800b5f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b5f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800b5f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop

0800b600 <USB_ActivateEndpoint>:
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	780a      	ldrb	r2, [r1, #0]
 800b604:	f891 e003 	ldrb.w	lr, [r1, #3]
 800b608:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
 800b60c:	4603      	mov	r3, r0
 800b60e:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800b612:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b616:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800b61a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b61e:	f1be 0f03 	cmp.w	lr, #3
 800b622:	f200 815a 	bhi.w	800b8da <USB_ActivateEndpoint+0x2da>
 800b626:	e8df f00e 	tbb	[pc, lr]
 800b62a:	4e52      	.short	0x4e52
 800b62c:	0204      	.short	0x0204
 800b62e:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
 800b632:	2000      	movs	r0, #0
 800b634:	f248 0580 	movw	r5, #32896	; 0x8080
 800b638:	ea4c 0c05 	orr.w	ip, ip, r5
 800b63c:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
 800b640:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b644:	4ca6      	ldr	r4, [pc, #664]	; (800b8e0 <USB_ActivateEndpoint+0x2e0>)
 800b646:	fa1f fc8c 	uxth.w	ip, ip
 800b64a:	ea0c 0c04 	and.w	ip, ip, r4
 800b64e:	ea4c 0c02 	orr.w	ip, ip, r2
 800b652:	ea45 050c 	orr.w	r5, r5, ip
 800b656:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]
 800b65a:	7b0d      	ldrb	r5, [r1, #12]
 800b65c:	2d00      	cmp	r5, #0
 800b65e:	d17e      	bne.n	800b75e <USB_ActivateEndpoint+0x15e>
 800b660:	784d      	ldrb	r5, [r1, #1]
 800b662:	2d00      	cmp	r5, #0
 800b664:	f000 80dd 	beq.w	800b822 <USB_ActivateEndpoint+0x222>
 800b668:	88c9      	ldrh	r1, [r1, #6]
 800b66a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b66e:	0849      	lsrs	r1, r1, #1
 800b670:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800b674:	0049      	lsls	r1, r1, #1
 800b676:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b67a:	b2ad      	uxth	r5, r5
 800b67c:	5371      	strh	r1, [r6, r5]
 800b67e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b682:	064e      	lsls	r6, r1, #25
 800b684:	d509      	bpl.n	800b69a <USB_ActivateEndpoint+0x9a>
 800b686:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b68a:	b289      	uxth	r1, r1
 800b68c:	400c      	ands	r4, r1
 800b68e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800b692:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800b696:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800b69a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b69e:	f1be 0f01 	cmp.w	lr, #1
 800b6a2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b6a6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b6aa:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b6ae:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b6b2:	d04d      	beq.n	800b750 <USB_ActivateEndpoint+0x150>
 800b6b4:	f081 0120 	eor.w	r1, r1, #32
 800b6b8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b6bc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b6c0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
 800b6cc:	e7b2      	b.n	800b634 <USB_ActivateEndpoint+0x34>
 800b6ce:	4670      	mov	r0, lr
 800b6d0:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
 800b6d4:	e7ae      	b.n	800b634 <USB_ActivateEndpoint+0x34>
 800b6d6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6da:	044d      	lsls	r5, r1, #17
 800b6dc:	d509      	bpl.n	800b6f2 <USB_ActivateEndpoint+0xf2>
 800b6de:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6e2:	b289      	uxth	r1, r1
 800b6e4:	400c      	ands	r4, r1
 800b6e6:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b6ea:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b6ee:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800b6f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6f6:	0649      	lsls	r1, r1, #25
 800b6f8:	d50d      	bpl.n	800b716 <USB_ActivateEndpoint+0x116>
 800b6fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b6fe:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b702:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b706:	0409      	lsls	r1, r1, #16
 800b708:	0c09      	lsrs	r1, r1, #16
 800b70a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b70e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b712:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b716:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b71a:	f1be 0f01 	cmp.w	lr, #1
 800b71e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b722:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b726:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b72a:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b72e:	bf18      	it	ne
 800b730:	f081 0120 	eorne.w	r1, r1, #32
 800b734:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b738:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b73c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b740:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b744:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b748:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b74c:	0409      	lsls	r1, r1, #16
 800b74e:	0c09      	lsrs	r1, r1, #16
 800b750:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b754:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b758:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b75e:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b762:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b766:	fa1f fc8c 	uxth.w	ip, ip
 800b76a:	ea0c 0c04 	and.w	ip, ip, r4
 800b76e:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800b772:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800b776:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
 800b77a:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800b77e:	890e      	ldrh	r6, [r1, #8]
 800b780:	fa1f fc8c 	uxth.w	ip, ip
 800b784:	0876      	lsrs	r6, r6, #1
 800b786:	44bc      	add	ip, r7
 800b788:	0076      	lsls	r6, r6, #1
 800b78a:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800b78e:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800b792:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b796:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b79a:	b2ad      	uxth	r5, r5
 800b79c:	443d      	add	r5, r7
 800b79e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b7a2:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
 800b7a6:	7849      	ldrb	r1, [r1, #1]
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	d194      	bne.n	800b6d6 <USB_ActivateEndpoint+0xd6>
 800b7ac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7b0:	044f      	lsls	r7, r1, #17
 800b7b2:	d509      	bpl.n	800b7c8 <USB_ActivateEndpoint+0x1c8>
 800b7b4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7b8:	b289      	uxth	r1, r1
 800b7ba:	400c      	ands	r4, r1
 800b7bc:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b7c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b7c4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800b7c8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7cc:	064e      	lsls	r6, r1, #25
 800b7ce:	d50d      	bpl.n	800b7ec <USB_ActivateEndpoint+0x1ec>
 800b7d0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7d4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b7d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b7dc:	0409      	lsls	r1, r1, #16
 800b7de:	0c09      	lsrs	r1, r1, #16
 800b7e0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b7e4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b7e8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b7ec:	f248 0480 	movw	r4, #32896	; 0x8080
 800b7f0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b7f4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b7f8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b7fc:	0409      	lsls	r1, r1, #16
 800b7fe:	0c09      	lsrs	r1, r1, #16
 800b800:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b804:	4321      	orrs	r1, r4
 800b806:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b80a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b80e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b812:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b816:	0409      	lsls	r1, r1, #16
 800b818:	0c09      	lsrs	r1, r1, #16
 800b81a:	4321      	orrs	r1, r4
 800b81c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b822:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800b826:	88cd      	ldrh	r5, [r1, #6]
 800b828:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b82c:	b2a4      	uxth	r4, r4
 800b82e:	086d      	lsrs	r5, r5, #1
 800b830:	006d      	lsls	r5, r5, #1
 800b832:	443c      	add	r4, r7
 800b834:	690e      	ldr	r6, [r1, #16]
 800b836:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
 800b83a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800b83e:	b289      	uxth	r1, r1
 800b840:	4439      	add	r1, r7
 800b842:	b366      	cbz	r6, 800b89e <USB_ActivateEndpoint+0x29e>
 800b844:	2e3e      	cmp	r6, #62	; 0x3e
 800b846:	d83c      	bhi.n	800b8c2 <USB_ActivateEndpoint+0x2c2>
 800b848:	0874      	lsrs	r4, r6, #1
 800b84a:	07f5      	lsls	r5, r6, #31
 800b84c:	bf48      	it	mi
 800b84e:	3401      	addmi	r4, #1
 800b850:	02a4      	lsls	r4, r4, #10
 800b852:	b2a4      	uxth	r4, r4
 800b854:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b858:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b85c:	0449      	lsls	r1, r1, #17
 800b85e:	d50d      	bpl.n	800b87c <USB_ActivateEndpoint+0x27c>
 800b860:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b864:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b868:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b86c:	0409      	lsls	r1, r1, #16
 800b86e:	0c09      	lsrs	r1, r1, #16
 800b870:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800b874:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b878:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b87c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b880:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b884:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b888:	0409      	lsls	r1, r1, #16
 800b88a:	0c09      	lsrs	r1, r1, #16
 800b88c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b890:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b894:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b898:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 800b89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b89e:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b8a2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b8a6:	0424      	lsls	r4, r4, #16
 800b8a8:	0c24      	lsrs	r4, r4, #16
 800b8aa:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b8ae:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b8b2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b8b6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b8ba:	b2a4      	uxth	r4, r4
 800b8bc:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b8c0:	e7ca      	b.n	800b858 <USB_ActivateEndpoint+0x258>
 800b8c2:	0975      	lsrs	r5, r6, #5
 800b8c4:	06f4      	lsls	r4, r6, #27
 800b8c6:	4c07      	ldr	r4, [pc, #28]	; (800b8e4 <USB_ActivateEndpoint+0x2e4>)
 800b8c8:	bf08      	it	eq
 800b8ca:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800b8ce:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b8d2:	b2a4      	uxth	r4, r4
 800b8d4:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b8d8:	e7be      	b.n	800b858 <USB_ActivateEndpoint+0x258>
 800b8da:	2001      	movs	r0, #1
 800b8dc:	e6aa      	b.n	800b634 <USB_ActivateEndpoint+0x34>
 800b8de:	bf00      	nop
 800b8e0:	ffff8f8f 	.word	0xffff8f8f
 800b8e4:	ffff8000 	.word	0xffff8000

0800b8e8 <USB_DeactivateEndpoint>:
 800b8e8:	7b0b      	ldrb	r3, [r1, #12]
 800b8ea:	b9cb      	cbnz	r3, 800b920 <USB_DeactivateEndpoint+0x38>
 800b8ec:	784b      	ldrb	r3, [r1, #1]
 800b8ee:	780a      	ldrb	r2, [r1, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 80b1 	beq.w	800ba58 <USB_DeactivateEndpoint+0x170>
 800b8f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b8fa:	0659      	lsls	r1, r3, #25
 800b8fc:	f100 80c5 	bmi.w	800ba8a <USB_DeactivateEndpoint+0x1a2>
 800b900:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b90c:	041b      	lsls	r3, r3, #16
 800b90e:	0c1b      	lsrs	r3, r3, #16
 800b910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b918:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b91c:	2000      	movs	r0, #0
 800b91e:	4770      	bx	lr
 800b920:	784b      	ldrb	r3, [r1, #1]
 800b922:	780a      	ldrb	r2, [r1, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d14b      	bne.n	800b9c0 <USB_DeactivateEndpoint+0xd8>
 800b928:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b92c:	0459      	lsls	r1, r3, #17
 800b92e:	d50d      	bpl.n	800b94c <USB_DeactivateEndpoint+0x64>
 800b930:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93c:	041b      	lsls	r3, r3, #16
 800b93e:	0c1b      	lsrs	r3, r3, #16
 800b940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b948:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b94c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b950:	065b      	lsls	r3, r3, #25
 800b952:	d50d      	bpl.n	800b970 <USB_DeactivateEndpoint+0x88>
 800b954:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b95c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b960:	041b      	lsls	r3, r3, #16
 800b962:	0c1b      	lsrs	r3, r3, #16
 800b964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b96c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b970:	f248 0180 	movw	r1, #32896	; 0x8080
 800b974:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b97c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b980:	041b      	lsls	r3, r3, #16
 800b982:	0c1b      	lsrs	r3, r3, #16
 800b984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b98c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b990:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b99c:	041b      	lsls	r3, r3, #16
 800b99e:	0c1b      	lsrs	r3, r3, #16
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b9a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9b2:	041b      	lsls	r3, r3, #16
 800b9b4:	0c1b      	lsrs	r3, r3, #16
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b9bc:	2000      	movs	r0, #0
 800b9be:	4770      	bx	lr
 800b9c0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9c4:	0459      	lsls	r1, r3, #17
 800b9c6:	d50d      	bpl.n	800b9e4 <USB_DeactivateEndpoint+0xfc>
 800b9c8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9d4:	041b      	lsls	r3, r3, #16
 800b9d6:	0c1b      	lsrs	r3, r3, #16
 800b9d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b9e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9e8:	065b      	lsls	r3, r3, #25
 800b9ea:	d50d      	bpl.n	800ba08 <USB_DeactivateEndpoint+0x120>
 800b9ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b9f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f8:	041b      	lsls	r3, r3, #16
 800b9fa:	0c1b      	lsrs	r3, r3, #16
 800b9fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ba08:	f248 0180 	movw	r1, #32896	; 0x8080
 800ba0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba18:	041b      	lsls	r3, r3, #16
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ba28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba34:	041b      	lsls	r3, r3, #16
 800ba36:	0c1b      	lsrs	r3, r3, #16
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ba3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba4a:	041b      	lsls	r3, r3, #16
 800ba4c:	0c1b      	lsrs	r3, r3, #16
 800ba4e:	430b      	orrs	r3, r1
 800ba50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ba54:	2000      	movs	r0, #0
 800ba56:	4770      	bx	lr
 800ba58:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba5c:	045b      	lsls	r3, r3, #17
 800ba5e:	d50d      	bpl.n	800ba7c <USB_DeactivateEndpoint+0x194>
 800ba60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6c:	041b      	lsls	r3, r3, #16
 800ba6e:	0c1b      	lsrs	r3, r3, #16
 800ba70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800ba7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba88:	e740      	b.n	800b90c <USB_DeactivateEndpoint+0x24>
 800ba8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800ba8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba96:	041b      	lsls	r3, r3, #16
 800ba98:	0c1b      	lsrs	r3, r3, #16
 800ba9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800baa2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800baa6:	e72b      	b.n	800b900 <USB_DeactivateEndpoint+0x18>

0800baa8 <USB_EPStartXfer>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	784b      	ldrb	r3, [r1, #1]
 800baae:	4602      	mov	r2, r0
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d06b      	beq.n	800bb8c <USB_EPStartXfer+0xe4>
 800bab4:	7b08      	ldrb	r0, [r1, #12]
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d037      	beq.n	800bb2a <USB_EPStartXfer+0x82>
 800baba:	78c8      	ldrb	r0, [r1, #3]
 800babc:	2802      	cmp	r0, #2
 800babe:	f000 812d 	beq.w	800bd1c <USB_EPStartXfer+0x274>
 800bac2:	2801      	cmp	r0, #1
 800bac4:	f040 810a 	bne.w	800bcdc <USB_EPStartXfer+0x234>
 800bac8:	6988      	ldr	r0, [r1, #24]
 800baca:	690c      	ldr	r4, [r1, #16]
 800bacc:	42a0      	cmp	r0, r4
 800bace:	bf94      	ite	ls
 800bad0:	2500      	movls	r5, #0
 800bad2:	1b05      	subhi	r5, r0, r4
 800bad4:	618d      	str	r5, [r1, #24]
 800bad6:	bf88      	it	hi
 800bad8:	4620      	movhi	r0, r4
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 811b 	bne.w	800bd16 <USB_EPStartXfer+0x26e>
 800bae0:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bae4:	780b      	ldrb	r3, [r1, #0]
 800bae6:	b2a4      	uxth	r4, r4
 800bae8:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800baec:	011b      	lsls	r3, r3, #4
 800baee:	442c      	add	r4, r5
 800baf0:	2800      	cmp	r0, #0
 800baf2:	f000 8251 	beq.w	800bf98 <USB_EPStartXfer+0x4f0>
 800baf6:	283e      	cmp	r0, #62	; 0x3e
 800baf8:	f200 80f3 	bhi.w	800bce2 <USB_EPStartXfer+0x23a>
 800bafc:	0845      	lsrs	r5, r0, #1
 800bafe:	462e      	mov	r6, r5
 800bb00:	f010 0001 	ands.w	r0, r0, #1
 800bb04:	bf18      	it	ne
 800bb06:	1c6e      	addne	r6, r5, #1
 800bb08:	02b6      	lsls	r6, r6, #10
 800bb0a:	b2b6      	uxth	r6, r6
 800bb0c:	52e6      	strh	r6, [r4, r3]
 800bb0e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bb12:	b2a6      	uxth	r6, r4
 800bb14:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bb18:	4434      	add	r4, r6
 800bb1a:	b100      	cbz	r0, 800bb1e <USB_EPStartXfer+0x76>
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	02ad      	lsls	r5, r5, #10
 800bb20:	b2a8      	uxth	r0, r5
 800bb22:	52e0      	strh	r0, [r4, r3]
 800bb24:	f891 c000 	ldrb.w	ip, [r1]
 800bb28:	e01d      	b.n	800bb66 <USB_EPStartXfer+0xbe>
 800bb2a:	698c      	ldr	r4, [r1, #24]
 800bb2c:	690b      	ldr	r3, [r1, #16]
 800bb2e:	780d      	ldrb	r5, [r1, #0]
 800bb30:	429c      	cmp	r4, r3
 800bb32:	bf84      	itt	hi
 800bb34:	1ae0      	subhi	r0, r4, r3
 800bb36:	461c      	movhi	r4, r3
 800bb38:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bb3c:	6188      	str	r0, [r1, #24]
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bb44:	012d      	lsls	r5, r5, #4
 800bb46:	4403      	add	r3, r0
 800bb48:	2c00      	cmp	r4, #0
 800bb4a:	f000 80b7 	beq.w	800bcbc <USB_EPStartXfer+0x214>
 800bb4e:	2c3e      	cmp	r4, #62	; 0x3e
 800bb50:	f200 8129 	bhi.w	800bda6 <USB_EPStartXfer+0x2fe>
 800bb54:	0860      	lsrs	r0, r4, #1
 800bb56:	07e4      	lsls	r4, r4, #31
 800bb58:	bf48      	it	mi
 800bb5a:	3001      	addmi	r0, #1
 800bb5c:	0280      	lsls	r0, r0, #10
 800bb5e:	b280      	uxth	r0, r0
 800bb60:	52e8      	strh	r0, [r5, r3]
 800bb62:	f891 c000 	ldrb.w	ip, [r1]
 800bb66:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb74:	041b      	lsls	r3, r3, #16
 800bb76:	0c1b      	lsrs	r3, r3, #16
 800bb78:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bb7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb84:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8c:	690d      	ldr	r5, [r1, #16]
 800bb8e:	6988      	ldr	r0, [r1, #24]
 800bb90:	7b0b      	ldrb	r3, [r1, #12]
 800bb92:	42a8      	cmp	r0, r5
 800bb94:	bf28      	it	cs
 800bb96:	4628      	movcs	r0, r5
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d05d      	beq.n	800bc58 <USB_EPStartXfer+0x1b0>
 800bb9c:	78cb      	ldrb	r3, [r1, #3]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	f000 810e 	beq.w	800bdc0 <USB_EPStartXfer+0x318>
 800bba4:	f891 8000 	ldrb.w	r8, [r1]
 800bba8:	6a0b      	ldr	r3, [r1, #32]
 800bbaa:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
 800bbae:	1a1b      	subs	r3, r3, r0
 800bbb0:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800bbb4:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800bbb8:	0424      	lsls	r4, r4, #16
 800bbba:	0c24      	lsrs	r4, r4, #16
 800bbbc:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800bbc0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800bbc4:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
 800bbc8:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
 800bbcc:	620b      	str	r3, [r1, #32]
 800bbce:	f014 0f40 	tst.w	r4, #64	; 0x40
 800bbd2:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bbd6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800bbda:	b2a6      	uxth	r6, r4
 800bbdc:	f000 814a 	beq.w	800be74 <USB_EPStartXfer+0x3cc>
 800bbe0:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bbe4:	4434      	add	r4, r6
 800bbe6:	b286      	uxth	r6, r0
 800bbe8:	f824 6008 	strh.w	r6, [r4, r8]
 800bbec:	894c      	ldrh	r4, [r1, #10]
 800bbee:	3601      	adds	r6, #1
 800bbf0:	f502 6780 	add.w	r7, r2, #1024	; 0x400
 800bbf4:	0876      	lsrs	r6, r6, #1
 800bbf6:	f8d1 9014 	ldr.w	r9, [r1, #20]
 800bbfa:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800bbfe:	d008      	beq.n	800bc12 <USB_EPStartXfer+0x16a>
 800bc00:	46cc      	mov	ip, r9
 800bc02:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bc06:	f83c eb02 	ldrh.w	lr, [ip], #2
 800bc0a:	f824 eb04 	strh.w	lr, [r4], #4
 800bc0e:	42a6      	cmp	r6, r4
 800bc10:	d1f9      	bne.n	800bc06 <USB_EPStartXfer+0x15e>
 800bc12:	eb09 0400 	add.w	r4, r9, r0
 800bc16:	429d      	cmp	r5, r3
 800bc18:	614c      	str	r4, [r1, #20]
 800bc1a:	f0c0 81b7 	bcc.w	800bf8c <USB_EPStartXfer+0x4e4>
 800bc1e:	2500      	movs	r5, #0
 800bc20:	620d      	str	r5, [r1, #32]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d036      	beq.n	800bc94 <USB_EPStartXfer+0x1ec>
 800bc26:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bc2a:	b285      	uxth	r5, r0
 800bc2c:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bc30:	4428      	add	r0, r5
 800bc32:	b29d      	uxth	r5, r3
 800bc34:	462b      	mov	r3, r5
 800bc36:	f820 5008 	strh.w	r5, [r0, r8]
 800bc3a:	8908      	ldrh	r0, [r1, #8]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	eb07 0040 	add.w	r0, r7, r0, lsl #1
 800bc44:	d026      	beq.n	800bc94 <USB_EPStartXfer+0x1ec>
 800bc46:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800bc4a:	f834 3b02 	ldrh.w	r3, [r4], #2
 800bc4e:	f820 3b04 	strh.w	r3, [r0], #4
 800bc52:	4285      	cmp	r5, r0
 800bc54:	d1f9      	bne.n	800bc4a <USB_EPStartXfer+0x1a2>
 800bc56:	e01d      	b.n	800bc94 <USB_EPStartXfer+0x1ec>
 800bc58:	b284      	uxth	r4, r0
 800bc5a:	694b      	ldr	r3, [r1, #20]
 800bc5c:	88cd      	ldrh	r5, [r1, #6]
 800bc5e:	f104 0e01 	add.w	lr, r4, #1
 800bc62:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800bc66:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
 800bc6a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800bc6e:	bf18      	it	ne
 800bc70:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800bc74:	d005      	beq.n	800bc82 <USB_EPStartXfer+0x1da>
 800bc76:	f833 cb02 	ldrh.w	ip, [r3], #2
 800bc7a:	4573      	cmp	r3, lr
 800bc7c:	f820 cb04 	strh.w	ip, [r0], #4
 800bc80:	d1f9      	bne.n	800bc76 <USB_EPStartXfer+0x1ce>
 800bc82:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bc86:	7808      	ldrb	r0, [r1, #0]
 800bc88:	b29d      	uxth	r5, r3
 800bc8a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bc8e:	0100      	lsls	r0, r0, #4
 800bc90:	442b      	add	r3, r5
 800bc92:	52c4      	strh	r4, [r0, r3]
 800bc94:	7809      	ldrb	r1, [r1, #0]
 800bc96:	2000      	movs	r0, #0
 800bc98:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800bc9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bca4:	041b      	lsls	r3, r3, #16
 800bca6:	0c1b      	lsrs	r3, r3, #16
 800bca8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800bcac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800bcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbc:	5ae8      	ldrh	r0, [r5, r3]
 800bcbe:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bcc2:	0400      	lsls	r0, r0, #16
 800bcc4:	0c00      	lsrs	r0, r0, #16
 800bcc6:	52e8      	strh	r0, [r5, r3]
 800bcc8:	5ae8      	ldrh	r0, [r5, r3]
 800bcca:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800bcce:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800bcd2:	b280      	uxth	r0, r0
 800bcd4:	52e8      	strh	r0, [r5, r3]
 800bcd6:	f891 c000 	ldrb.w	ip, [r1]
 800bcda:	e744      	b.n	800bb66 <USB_EPStartXfer+0xbe>
 800bcdc:	2001      	movs	r0, #1
 800bcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce2:	0945      	lsrs	r5, r0, #5
 800bce4:	462f      	mov	r7, r5
 800bce6:	f010 001f 	ands.w	r0, r0, #31
 800bcea:	bf08      	it	eq
 800bcec:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800bcf0:	462e      	mov	r6, r5
 800bcf2:	4dbb      	ldr	r5, [pc, #748]	; (800bfe0 <USB_EPStartXfer+0x538>)
 800bcf4:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800bcf8:	b2ad      	uxth	r5, r5
 800bcfa:	52e5      	strh	r5, [r4, r3]
 800bcfc:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bd00:	b2a5      	uxth	r5, r4
 800bd02:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bd06:	442c      	add	r4, r5
 800bd08:	b900      	cbnz	r0, 800bd0c <USB_EPStartXfer+0x264>
 800bd0a:	3e01      	subs	r6, #1
 800bd0c:	48b4      	ldr	r0, [pc, #720]	; (800bfe0 <USB_EPStartXfer+0x538>)
 800bd0e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800bd12:	b280      	uxth	r0, r0
 800bd14:	52e0      	strh	r0, [r4, r3]
 800bd16:	f891 c000 	ldrb.w	ip, [r1]
 800bd1a:	e724      	b.n	800bb66 <USB_EPStartXfer+0xbe>
 800bd1c:	bb13      	cbnz	r3, 800bd64 <USB_EPStartXfer+0x2bc>
 800bd1e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bd22:	780b      	ldrb	r3, [r1, #0]
 800bd24:	b284      	uxth	r4, r0
 800bd26:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bd2a:	4420      	add	r0, r4
 800bd2c:	690c      	ldr	r4, [r1, #16]
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	2c00      	cmp	r4, #0
 800bd32:	f000 8109 	beq.w	800bf48 <USB_EPStartXfer+0x4a0>
 800bd36:	2c3e      	cmp	r4, #62	; 0x3e
 800bd38:	f200 818e 	bhi.w	800c058 <USB_EPStartXfer+0x5b0>
 800bd3c:	0865      	lsrs	r5, r4, #1
 800bd3e:	462e      	mov	r6, r5
 800bd40:	f014 0401 	ands.w	r4, r4, #1
 800bd44:	bf18      	it	ne
 800bd46:	1c6e      	addne	r6, r5, #1
 800bd48:	02b6      	lsls	r6, r6, #10
 800bd4a:	b2b6      	uxth	r6, r6
 800bd4c:	52c6      	strh	r6, [r0, r3]
 800bd4e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bd52:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800bd56:	b280      	uxth	r0, r0
 800bd58:	4406      	add	r6, r0
 800bd5a:	b104      	cbz	r4, 800bd5e <USB_EPStartXfer+0x2b6>
 800bd5c:	3501      	adds	r5, #1
 800bd5e:	02ad      	lsls	r5, r5, #10
 800bd60:	b2a8      	uxth	r0, r5
 800bd62:	52f0      	strh	r0, [r6, r3]
 800bd64:	69cb      	ldr	r3, [r1, #28]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0d5      	beq.n	800bd16 <USB_EPStartXfer+0x26e>
 800bd6a:	f244 0340 	movw	r3, #16448	; 0x4040
 800bd6e:	f891 c000 	ldrb.w	ip, [r1]
 800bd72:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
 800bd76:	ea03 0400 	and.w	r4, r3, r0
 800bd7a:	4383      	bics	r3, r0
 800bd7c:	d002      	beq.n	800bd84 <USB_EPStartXfer+0x2dc>
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	f47f aef1 	bne.w	800bb66 <USB_EPStartXfer+0xbe>
 800bd84:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800bd88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd90:	041b      	lsls	r3, r3, #16
 800bd92:	0c1b      	lsrs	r3, r3, #16
 800bd94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd9c:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800bda0:	f891 c000 	ldrb.w	ip, [r1]
 800bda4:	e6df      	b.n	800bb66 <USB_EPStartXfer+0xbe>
 800bda6:	0966      	lsrs	r6, r4, #5
 800bda8:	06e0      	lsls	r0, r4, #27
 800bdaa:	488d      	ldr	r0, [pc, #564]	; (800bfe0 <USB_EPStartXfer+0x538>)
 800bdac:	bf08      	it	eq
 800bdae:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800bdb2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800bdb6:	b280      	uxth	r0, r0
 800bdb8:	52e8      	strh	r0, [r5, r3]
 800bdba:	f891 c000 	ldrb.w	ip, [r1]
 800bdbe:	e6d2      	b.n	800bb66 <USB_EPStartXfer+0xbe>
 800bdc0:	6a0c      	ldr	r4, [r1, #32]
 800bdc2:	42a5      	cmp	r5, r4
 800bdc4:	f080 8094 	bcs.w	800bef0 <USB_EPStartXfer+0x448>
 800bdc8:	780e      	ldrb	r6, [r1, #0]
 800bdca:	1a24      	subs	r4, r4, r0
 800bdcc:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800bdd0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800bdd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bddc:	041b      	lsls	r3, r3, #16
 800bdde:	0c1b      	lsrs	r3, r3, #16
 800bde0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde8:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
 800bdec:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
 800bdf0:	620c      	str	r4, [r1, #32]
 800bdf2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bdf6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bdfa:	b29e      	uxth	r6, r3
 800bdfc:	f000 80f2 	beq.w	800bfe4 <USB_EPStartXfer+0x53c>
 800be00:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800be04:	4433      	add	r3, r6
 800be06:	fa1f fa80 	uxth.w	sl, r0
 800be0a:	f823 a009 	strh.w	sl, [r3, r9]
 800be0e:	894e      	ldrh	r6, [r1, #10]
 800be10:	f10a 0801 	add.w	r8, sl, #1
 800be14:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 800be18:	ea5f 0858 	movs.w	r8, r8, lsr #1
 800be1c:	694f      	ldr	r7, [r1, #20]
 800be1e:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 800be22:	d008      	beq.n	800be36 <USB_EPStartXfer+0x38e>
 800be24:	46bc      	mov	ip, r7
 800be26:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
 800be2a:	f83c eb02 	ldrh.w	lr, [ip], #2
 800be2e:	f826 eb04 	strh.w	lr, [r6], #4
 800be32:	45b3      	cmp	fp, r6
 800be34:	d1f9      	bne.n	800be2a <USB_EPStartXfer+0x382>
 800be36:	4407      	add	r7, r0
 800be38:	42a5      	cmp	r5, r4
 800be3a:	614f      	str	r7, [r1, #20]
 800be3c:	f080 8127 	bcs.w	800c08e <USB_EPStartXfer+0x5e6>
 800be40:	1a24      	subs	r4, r4, r0
 800be42:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800be46:	620c      	str	r4, [r1, #32]
 800be48:	b284      	uxth	r4, r0
 800be4a:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800be4e:	4420      	add	r0, r4
 800be50:	f820 a009 	strh.w	sl, [r0, r9]
 800be54:	8908      	ldrh	r0, [r1, #8]
 800be56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800be5a:	f1b8 0f00 	cmp.w	r8, #0
 800be5e:	f43f af19 	beq.w	800bc94 <USB_EPStartXfer+0x1ec>
 800be62:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 800be66:	f837 0b02 	ldrh.w	r0, [r7], #2
 800be6a:	f823 0b04 	strh.w	r0, [r3], #4
 800be6e:	429c      	cmp	r4, r3
 800be70:	d1f9      	bne.n	800be66 <USB_EPStartXfer+0x3be>
 800be72:	e70f      	b.n	800bc94 <USB_EPStartXfer+0x1ec>
 800be74:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800be78:	4434      	add	r4, r6
 800be7a:	b286      	uxth	r6, r0
 800be7c:	f824 6008 	strh.w	r6, [r4, r8]
 800be80:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800be84:	3601      	adds	r6, #1
 800be86:	f502 6780 	add.w	r7, r2, #1024	; 0x400
 800be8a:	0876      	lsrs	r6, r6, #1
 800be8c:	f8d1 9014 	ldr.w	r9, [r1, #20]
 800be90:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800be94:	d008      	beq.n	800bea8 <USB_EPStartXfer+0x400>
 800be96:	464c      	mov	r4, r9
 800be98:	eb09 0646 	add.w	r6, r9, r6, lsl #1
 800be9c:	f834 eb02 	ldrh.w	lr, [r4], #2
 800bea0:	42b4      	cmp	r4, r6
 800bea2:	f82c eb04 	strh.w	lr, [ip], #4
 800bea6:	d1f9      	bne.n	800be9c <USB_EPStartXfer+0x3f4>
 800bea8:	eb09 0400 	add.w	r4, r9, r0
 800beac:	429d      	cmp	r5, r3
 800beae:	614c      	str	r4, [r1, #20]
 800beb0:	d36f      	bcc.n	800bf92 <USB_EPStartXfer+0x4ea>
 800beb2:	2500      	movs	r5, #0
 800beb4:	620d      	str	r5, [r1, #32]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f43f aeec 	beq.w	800bc94 <USB_EPStartXfer+0x1ec>
 800bebc:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bec0:	b285      	uxth	r5, r0
 800bec2:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bec6:	4428      	add	r0, r5
 800bec8:	b29d      	uxth	r5, r3
 800beca:	462b      	mov	r3, r5
 800becc:	f820 5008 	strh.w	r5, [r0, r8]
 800bed0:	8948      	ldrh	r0, [r1, #10]
 800bed2:	3301      	adds	r3, #1
 800bed4:	085b      	lsrs	r3, r3, #1
 800bed6:	eb07 0740 	add.w	r7, r7, r0, lsl #1
 800beda:	f43f aedb 	beq.w	800bc94 <USB_EPStartXfer+0x1ec>
 800bede:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800bee2:	f834 0b02 	ldrh.w	r0, [r4], #2
 800bee6:	f827 0b04 	strh.w	r0, [r7], #4
 800beea:	429f      	cmp	r7, r3
 800beec:	d1f9      	bne.n	800bee2 <USB_EPStartXfer+0x43a>
 800beee:	e6d1      	b.n	800bc94 <USB_EPStartXfer+0x1ec>
 800bef0:	7808      	ldrb	r0, [r1, #0]
 800bef2:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800bef6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800befa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800befe:	041b      	lsls	r3, r3, #16
 800bf00:	0c1b      	lsrs	r3, r3, #16
 800bf02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf0a:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
 800bf0e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bf12:	0100      	lsls	r0, r0, #4
 800bf14:	b29d      	uxth	r5, r3
 800bf16:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bf1a:	442b      	add	r3, r5
 800bf1c:	b2a5      	uxth	r5, r4
 800bf1e:	521d      	strh	r5, [r3, r0]
 800bf20:	b2a0      	uxth	r0, r4
 800bf22:	890d      	ldrh	r5, [r1, #8]
 800bf24:	3001      	adds	r0, #1
 800bf26:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 800bf2a:	0840      	lsrs	r0, r0, #1
 800bf2c:	694c      	ldr	r4, [r1, #20]
 800bf2e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800bf32:	f43f aeaf 	beq.w	800bc94 <USB_EPStartXfer+0x1ec>
 800bf36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf3a:	f834 5b02 	ldrh.w	r5, [r4], #2
 800bf3e:	f823 5b04 	strh.w	r5, [r3], #4
 800bf42:	4298      	cmp	r0, r3
 800bf44:	d1f9      	bne.n	800bf3a <USB_EPStartXfer+0x492>
 800bf46:	e6a5      	b.n	800bc94 <USB_EPStartXfer+0x1ec>
 800bf48:	5ac4      	ldrh	r4, [r0, r3]
 800bf4a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bf4e:	0424      	lsls	r4, r4, #16
 800bf50:	0c24      	lsrs	r4, r4, #16
 800bf52:	52c4      	strh	r4, [r0, r3]
 800bf54:	5ac5      	ldrh	r5, [r0, r3]
 800bf56:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bf5a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bf5e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bf62:	b2ad      	uxth	r5, r5
 800bf64:	52c5      	strh	r5, [r0, r3]
 800bf66:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bf6a:	b285      	uxth	r5, r0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4428      	add	r0, r5
 800bf70:	5ac4      	ldrh	r4, [r0, r3]
 800bf72:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bf76:	0424      	lsls	r4, r4, #16
 800bf78:	0c24      	lsrs	r4, r4, #16
 800bf7a:	52c4      	strh	r4, [r0, r3]
 800bf7c:	5ac4      	ldrh	r4, [r0, r3]
 800bf7e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bf82:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bf86:	b2a4      	uxth	r4, r4
 800bf88:	52c4      	strh	r4, [r0, r3]
 800bf8a:	e6eb      	b.n	800bd64 <USB_EPStartXfer+0x2bc>
 800bf8c:	1a1d      	subs	r5, r3, r0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	e646      	b.n	800bc20 <USB_EPStartXfer+0x178>
 800bf92:	1a1d      	subs	r5, r3, r0
 800bf94:	4603      	mov	r3, r0
 800bf96:	e78d      	b.n	800beb4 <USB_EPStartXfer+0x40c>
 800bf98:	5ae0      	ldrh	r0, [r4, r3]
 800bf9a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bf9e:	0400      	lsls	r0, r0, #16
 800bfa0:	0c00      	lsrs	r0, r0, #16
 800bfa2:	52e0      	strh	r0, [r4, r3]
 800bfa4:	5ae5      	ldrh	r5, [r4, r3]
 800bfa6:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bfaa:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bfae:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bfb2:	b2ad      	uxth	r5, r5
 800bfb4:	52e5      	strh	r5, [r4, r3]
 800bfb6:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bfba:	b2a4      	uxth	r4, r4
 800bfbc:	4420      	add	r0, r4
 800bfbe:	5ac4      	ldrh	r4, [r0, r3]
 800bfc0:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bfc4:	0424      	lsls	r4, r4, #16
 800bfc6:	0c24      	lsrs	r4, r4, #16
 800bfc8:	52c4      	strh	r4, [r0, r3]
 800bfca:	5ac4      	ldrh	r4, [r0, r3]
 800bfcc:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bfd0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bfd4:	b2a4      	uxth	r4, r4
 800bfd6:	52c4      	strh	r4, [r0, r3]
 800bfd8:	f891 c000 	ldrb.w	ip, [r1]
 800bfdc:	e5c3      	b.n	800bb66 <USB_EPStartXfer+0xbe>
 800bfde:	bf00      	nop
 800bfe0:	ffff8000 	.word	0xffff8000
 800bfe4:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bfe8:	4433      	add	r3, r6
 800bfea:	fa1f fa80 	uxth.w	sl, r0
 800bfee:	f823 a009 	strh.w	sl, [r3, r9]
 800bff2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800bff6:	f10a 0801 	add.w	r8, sl, #1
 800bffa:	f502 6380 	add.w	r3, r2, #1024	; 0x400
 800bffe:	ea5f 0858 	movs.w	r8, r8, lsr #1
 800c002:	694f      	ldr	r7, [r1, #20]
 800c004:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 800c008:	d008      	beq.n	800c01c <USB_EPStartXfer+0x574>
 800c00a:	463e      	mov	r6, r7
 800c00c:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
 800c010:	f836 eb02 	ldrh.w	lr, [r6], #2
 800c014:	45b3      	cmp	fp, r6
 800c016:	f82c eb04 	strh.w	lr, [ip], #4
 800c01a:	d1f9      	bne.n	800c010 <USB_EPStartXfer+0x568>
 800c01c:	4407      	add	r7, r0
 800c01e:	42a5      	cmp	r5, r4
 800c020:	614f      	str	r7, [r1, #20]
 800c022:	d23e      	bcs.n	800c0a2 <USB_EPStartXfer+0x5fa>
 800c024:	1a24      	subs	r4, r4, r0
 800c026:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c02a:	620c      	str	r4, [r1, #32]
 800c02c:	b284      	uxth	r4, r0
 800c02e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800c032:	4420      	add	r0, r4
 800c034:	f820 a009 	strh.w	sl, [r0, r9]
 800c038:	8948      	ldrh	r0, [r1, #10]
 800c03a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c03e:	f1b8 0f00 	cmp.w	r8, #0
 800c042:	f43f ae27 	beq.w	800bc94 <USB_EPStartXfer+0x1ec>
 800c046:	eb03 0488 	add.w	r4, r3, r8, lsl #2
 800c04a:	f837 0b02 	ldrh.w	r0, [r7], #2
 800c04e:	f823 0b04 	strh.w	r0, [r3], #4
 800c052:	429c      	cmp	r4, r3
 800c054:	d1f9      	bne.n	800c04a <USB_EPStartXfer+0x5a2>
 800c056:	e61d      	b.n	800bc94 <USB_EPStartXfer+0x1ec>
 800c058:	0965      	lsrs	r5, r4, #5
 800c05a:	462f      	mov	r7, r5
 800c05c:	f014 041f 	ands.w	r4, r4, #31
 800c060:	bf08      	it	eq
 800c062:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800c066:	462e      	mov	r6, r5
 800c068:	4d13      	ldr	r5, [pc, #76]	; (800c0b8 <USB_EPStartXfer+0x610>)
 800c06a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800c06e:	b2ad      	uxth	r5, r5
 800c070:	52c5      	strh	r5, [r0, r3]
 800c072:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800c076:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800c07a:	b280      	uxth	r0, r0
 800c07c:	4405      	add	r5, r0
 800c07e:	b904      	cbnz	r4, 800c082 <USB_EPStartXfer+0x5da>
 800c080:	3e01      	subs	r6, #1
 800c082:	480d      	ldr	r0, [pc, #52]	; (800c0b8 <USB_EPStartXfer+0x610>)
 800c084:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800c088:	b280      	uxth	r0, r0
 800c08a:	52e8      	strh	r0, [r5, r3]
 800c08c:	e66a      	b.n	800bd64 <USB_EPStartXfer+0x2bc>
 800c08e:	fa1f f884 	uxth.w	r8, r4
 800c092:	f108 0801 	add.w	r8, r8, #1
 800c096:	fa1f fa84 	uxth.w	sl, r4
 800c09a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800c09e:	2400      	movs	r4, #0
 800c0a0:	e6cf      	b.n	800be42 <USB_EPStartXfer+0x39a>
 800c0a2:	fa1f f884 	uxth.w	r8, r4
 800c0a6:	f108 0801 	add.w	r8, r8, #1
 800c0aa:	fa1f fa84 	uxth.w	sl, r4
 800c0ae:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800c0b2:	2400      	movs	r4, #0
 800c0b4:	e7b7      	b.n	800c026 <USB_EPStartXfer+0x57e>
 800c0b6:	bf00      	nop
 800c0b8:	ffff8000 	.word	0xffff8000

0800c0bc <USB_EPSetStall>:
 800c0bc:	784b      	ldrb	r3, [r1, #1]
 800c0be:	780a      	ldrb	r2, [r1, #0]
 800c0c0:	b18b      	cbz	r3, 800c0e6 <USB_EPSetStall+0x2a>
 800c0c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c0c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ce:	041b      	lsls	r3, r3, #16
 800c0d0:	0c1b      	lsrs	r3, r3, #16
 800c0d2:	f083 0310 	eor.w	r3, r3, #16
 800c0d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	4770      	bx	lr
 800c0e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c0ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0f2:	041b      	lsls	r3, r3, #16
 800c0f4:	0c1b      	lsrs	r3, r3, #16
 800c0f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c0fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c102:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c106:	2000      	movs	r0, #0
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop

0800c10c <USB_EPClearStall>:
 800c10c:	7b0b      	ldrb	r3, [r1, #12]
 800c10e:	bb3b      	cbnz	r3, 800c160 <USB_EPClearStall+0x54>
 800c110:	784b      	ldrb	r3, [r1, #1]
 800c112:	780a      	ldrb	r2, [r1, #0]
 800c114:	b333      	cbz	r3, 800c164 <USB_EPClearStall+0x58>
 800c116:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c11a:	065b      	lsls	r3, r3, #25
 800c11c:	d50d      	bpl.n	800c13a <USB_EPClearStall+0x2e>
 800c11e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c12a:	041b      	lsls	r3, r3, #16
 800c12c:	0c1b      	lsrs	r3, r3, #16
 800c12e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c136:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c13a:	78cb      	ldrb	r3, [r1, #3]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d00f      	beq.n	800c160 <USB_EPClearStall+0x54>
 800c140:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c14c:	041b      	lsls	r3, r3, #16
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	f083 0320 	eor.w	r3, r3, #32
 800c154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c15c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c160:	2000      	movs	r0, #0
 800c162:	4770      	bx	lr
 800c164:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c168:	045b      	lsls	r3, r3, #17
 800c16a:	d50d      	bpl.n	800c188 <USB_EPClearStall+0x7c>
 800c16c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c178:	041b      	lsls	r3, r3, #16
 800c17a:	0c1b      	lsrs	r3, r3, #16
 800c17c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c184:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c188:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800c18c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c194:	041b      	lsls	r3, r3, #16
 800c196:	0c1b      	lsrs	r3, r3, #16
 800c198:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800c19c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	4770      	bx	lr

0800c1ac <USB_SetDevAddress>:
 800c1ac:	b911      	cbnz	r1, 800c1b4 <USB_SetDevAddress+0x8>
 800c1ae:	2380      	movs	r3, #128	; 0x80
 800c1b0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	4770      	bx	lr

0800c1b8 <USB_DevConnect>:
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	4770      	bx	lr

0800c1bc <USB_ReadInterrupts>:
 800c1bc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 800c1c0:	b280      	uxth	r0, r0
 800c1c2:	4770      	bx	lr

0800c1c4 <USB_WritePMA>:
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800c1ca:	085b      	lsrs	r3, r3, #1
 800c1cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1d0:	d007      	beq.n	800c1e2 <USB_WritePMA+0x1e>
 800c1d2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 800c1d6:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c1da:	f822 3b04 	strh.w	r3, [r2], #4
 800c1de:	4282      	cmp	r2, r0
 800c1e0:	d1f9      	bne.n	800c1d6 <USB_WritePMA+0x12>
 800c1e2:	4770      	bx	lr

0800c1e4 <USB_ReadPMA>:
 800c1e4:	b570      	push	{r4, r5, r6, lr}
 800c1e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800c1ea:	085e      	lsrs	r6, r3, #1
 800c1ec:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800c1f0:	d012      	beq.n	800c218 <USB_ReadPMA+0x34>
 800c1f2:	46ae      	mov	lr, r5
 800c1f4:	46b4      	mov	ip, r6
 800c1f6:	1c88      	adds	r0, r1, #2
 800c1f8:	f83e 2b04 	ldrh.w	r2, [lr], #4
 800c1fc:	3002      	adds	r0, #2
 800c1fe:	b292      	uxth	r2, r2
 800c200:	0a14      	lsrs	r4, r2, #8
 800c202:	f1bc 0c01 	subs.w	ip, ip, #1
 800c206:	f800 2c04 	strb.w	r2, [r0, #-4]
 800c20a:	f800 4c03 	strb.w	r4, [r0, #-3]
 800c20e:	d1f3      	bne.n	800c1f8 <USB_ReadPMA+0x14>
 800c210:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800c214:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800c218:	07db      	lsls	r3, r3, #31
 800c21a:	bf44      	itt	mi
 800c21c:	882b      	ldrhmi	r3, [r5, #0]
 800c21e:	700b      	strbmi	r3, [r1, #0]
 800c220:	bd70      	pop	{r4, r5, r6, pc}
 800c222:	bf00      	nop

0800c224 <USBD_CDC_EP0_RxReady>:
 800c224:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c228:	b183      	cbz	r3, 800c24c <USBD_CDC_EP0_RxReady+0x28>
 800c22a:	b510      	push	{r4, lr}
 800c22c:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
 800c230:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c234:	28ff      	cmp	r0, #255	; 0xff
 800c236:	d007      	beq.n	800c248 <USBD_CDC_EP0_RxReady+0x24>
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	4621      	mov	r1, r4
 800c23c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c240:	4798      	blx	r3
 800c242:	23ff      	movs	r3, #255	; 0xff
 800c244:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800c248:	2000      	movs	r0, #0
 800c24a:	bd10      	pop	{r4, pc}
 800c24c:	2000      	movs	r0, #0
 800c24e:	4770      	bx	lr

0800c250 <USBD_CDC_GetFSCfgDesc>:
 800c250:	4603      	mov	r3, r0
 800c252:	2243      	movs	r2, #67	; 0x43
 800c254:	4801      	ldr	r0, [pc, #4]	; (800c25c <USBD_CDC_GetFSCfgDesc+0xc>)
 800c256:	801a      	strh	r2, [r3, #0]
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	20000064 	.word	0x20000064

0800c260 <USBD_CDC_GetHSCfgDesc>:
 800c260:	4603      	mov	r3, r0
 800c262:	2243      	movs	r2, #67	; 0x43
 800c264:	4801      	ldr	r0, [pc, #4]	; (800c26c <USBD_CDC_GetHSCfgDesc+0xc>)
 800c266:	801a      	strh	r2, [r3, #0]
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	200000a8 	.word	0x200000a8

0800c270 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800c270:	4603      	mov	r3, r0
 800c272:	2243      	movs	r2, #67	; 0x43
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
 800c276:	801a      	strh	r2, [r3, #0]
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	200000f8 	.word	0x200000f8

0800c280 <USBD_CDC_GetDeviceQualifierDescriptor>:
 800c280:	4603      	mov	r3, r0
 800c282:	220a      	movs	r2, #10
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
 800c286:	801a      	strh	r2, [r3, #0]
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	200000ec 	.word	0x200000ec

0800c290 <USBD_CDC_DataOut>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4604      	mov	r4, r0
 800c294:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
 800c298:	f001 f83a 	bl	800d310 <USBD_LL_GetRxDataSize>
 800c29c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800c2a0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
 800c2a4:	b14b      	cbz	r3, 800c2ba <USBD_CDC_DataOut+0x2a>
 800c2a6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c2aa:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c2b4:	4798      	blx	r3
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ba:	2002      	movs	r0, #2
 800c2bc:	bd38      	pop	{r3, r4, r5, pc}
 800c2be:	bf00      	nop

0800c2c0 <USBD_CDC_DataIn>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
 800c2c6:	b1ed      	cbz	r5, 800c304 <USBD_CDC_DataIn+0x44>
 800c2c8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c2cc:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800c2d0:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800c2d4:	b14a      	cbz	r2, 800c2ea <USBD_CDC_DataIn+0x2a>
 800c2d6:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800c2da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c2de:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c2e0:	fbb2 f3f4 	udiv	r3, r2, r4
 800c2e4:	fb04 2413 	mls	r4, r4, r3, r2
 800c2e8:	b124      	cbz	r4, 800c2f4 <USBD_CDC_DataIn+0x34>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	4623      	mov	r3, r4
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	f8cc 401c 	str.w	r4, [ip, #28]
 800c2fc:	f000 ffec 	bl	800d2d8 <USBD_LL_Transmit>
 800c300:	4620      	mov	r0, r4
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	2002      	movs	r0, #2
 800c306:	bd38      	pop	{r3, r4, r5, pc}

0800c308 <USBD_CDC_Setup>:
 800c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	2700      	movs	r7, #0
 800c30e:	780b      	ldrb	r3, [r1, #0]
 800c310:	b082      	sub	sp, #8
 800c312:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 800c316:	460c      	mov	r4, r1
 800c318:	4605      	mov	r5, r0
 800c31a:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
 800c31e:	f88d 7005 	strb.w	r7, [sp, #5]
 800c322:	f8ad 7006 	strh.w	r7, [sp, #6]
 800c326:	d013      	beq.n	800c350 <USBD_CDC_Setup+0x48>
 800c328:	2e20      	cmp	r6, #32
 800c32a:	d117      	bne.n	800c35c <USBD_CDC_Setup+0x54>
 800c32c:	88ce      	ldrh	r6, [r1, #6]
 800c32e:	b1f6      	cbz	r6, 800c36e <USBD_CDC_Setup+0x66>
 800c330:	061b      	lsls	r3, r3, #24
 800c332:	d53f      	bpl.n	800c3b4 <USBD_CDC_Setup+0xac>
 800c334:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c338:	4632      	mov	r2, r6
 800c33a:	4641      	mov	r1, r8
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	7860      	ldrb	r0, [r4, #1]
 800c340:	4798      	blx	r3
 800c342:	4641      	mov	r1, r8
 800c344:	4628      	mov	r0, r5
 800c346:	88e2      	ldrh	r2, [r4, #6]
 800c348:	463e      	mov	r6, r7
 800c34a:	f000 fcef 	bl	800cd2c <USBD_CtlSendData>
 800c34e:	e00a      	b.n	800c366 <USBD_CDC_Setup+0x5e>
 800c350:	784b      	ldrb	r3, [r1, #1]
 800c352:	2b0a      	cmp	r3, #10
 800c354:	d01f      	beq.n	800c396 <USBD_CDC_Setup+0x8e>
 800c356:	2b0b      	cmp	r3, #11
 800c358:	d027      	beq.n	800c3aa <USBD_CDC_Setup+0xa2>
 800c35a:	b193      	cbz	r3, 800c382 <USBD_CDC_Setup+0x7a>
 800c35c:	4621      	mov	r1, r4
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 fcae 	bl	800ccc0 <USBD_CtlError>
 800c364:	2602      	movs	r6, #2
 800c366:	4630      	mov	r0, r6
 800c368:	b002      	add	sp, #8
 800c36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c36e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c372:	4632      	mov	r2, r6
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	7848      	ldrb	r0, [r1, #1]
 800c378:	4798      	blx	r3
 800c37a:	4630      	mov	r0, r6
 800c37c:	b002      	add	sp, #8
 800c37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c382:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c386:	2b03      	cmp	r3, #3
 800c388:	d1e8      	bne.n	800c35c <USBD_CDC_Setup+0x54>
 800c38a:	2202      	movs	r2, #2
 800c38c:	f10d 0106 	add.w	r1, sp, #6
 800c390:	f000 fccc 	bl	800cd2c <USBD_CtlSendData>
 800c394:	e7e7      	b.n	800c366 <USBD_CDC_Setup+0x5e>
 800c396:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d1de      	bne.n	800c35c <USBD_CDC_Setup+0x54>
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f10d 0105 	add.w	r1, sp, #5
 800c3a4:	f000 fcc2 	bl	800cd2c <USBD_CtlSendData>
 800c3a8:	e7dd      	b.n	800c366 <USBD_CDC_Setup+0x5e>
 800c3aa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d0d9      	beq.n	800c366 <USBD_CDC_Setup+0x5e>
 800c3b2:	e7d3      	b.n	800c35c <USBD_CDC_Setup+0x54>
 800c3b4:	784b      	ldrb	r3, [r1, #1]
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
 800c3bc:	4641      	mov	r1, r8
 800c3be:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
 800c3c2:	f000 fccb 	bl	800cd5c <USBD_CtlPrepareRx>
 800c3c6:	463e      	mov	r6, r7
 800c3c8:	e7cd      	b.n	800c366 <USBD_CDC_Setup+0x5e>
 800c3ca:	bf00      	nop

0800c3cc <USBD_CDC_DeInit>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	2500      	movs	r5, #0
 800c3d2:	2181      	movs	r1, #129	; 0x81
 800c3d4:	f000 ff34 	bl	800d240 <USBD_LL_CloseEP>
 800c3d8:	2101      	movs	r1, #1
 800c3da:	4620      	mov	r0, r4
 800c3dc:	62e5      	str	r5, [r4, #44]	; 0x2c
 800c3de:	f000 ff2f 	bl	800d240 <USBD_LL_CloseEP>
 800c3e2:	2182      	movs	r1, #130	; 0x82
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800c3ea:	f000 ff29 	bl	800d240 <USBD_LL_CloseEP>
 800c3ee:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800c3f2:	6425      	str	r5, [r4, #64]	; 0x40
 800c3f4:	b14b      	cbz	r3, 800c40a <USBD_CDC_DeInit+0x3e>
 800c3f6:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	4798      	blx	r3
 800c3fe:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800c402:	f000 ff8d 	bl	800d320 <USBD_static_free>
 800c406:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
 800c40a:	2000      	movs	r0, #0
 800c40c:	bd38      	pop	{r3, r4, r5, pc}
 800c40e:	bf00      	nop

0800c410 <USBD_CDC_Init>:
 800c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c414:	7c03      	ldrb	r3, [r0, #16]
 800c416:	4604      	mov	r4, r0
 800c418:	bbbb      	cbnz	r3, 800c48a <USBD_CDC_Init+0x7a>
 800c41a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c41e:	2202      	movs	r2, #2
 800c420:	2181      	movs	r1, #129	; 0x81
 800c422:	f000 fefd 	bl	800d220 <USBD_LL_OpenEP>
 800c426:	2501      	movs	r5, #1
 800c428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c42c:	2701      	movs	r7, #1
 800c42e:	4629      	mov	r1, r5
 800c430:	2202      	movs	r2, #2
 800c432:	62e5      	str	r5, [r4, #44]	; 0x2c
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fef3 	bl	800d220 <USBD_LL_OpenEP>
 800c43a:	2308      	movs	r3, #8
 800c43c:	2203      	movs	r2, #3
 800c43e:	2182      	movs	r1, #130	; 0x82
 800c440:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800c444:	4620      	mov	r0, r4
 800c446:	f000 feeb 	bl	800d220 <USBD_LL_OpenEP>
 800c44a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c44e:	6427      	str	r7, [r4, #64]	; 0x40
 800c450:	f000 ff62 	bl	800d318 <USBD_static_malloc>
 800c454:	4605      	mov	r5, r0
 800c456:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
 800c45a:	b348      	cbz	r0, 800c4b0 <USBD_CDC_Init+0xa0>
 800c45c:	f04f 0800 	mov.w	r8, #0
 800c460:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4798      	blx	r3
 800c468:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
 800c46c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
 800c470:	7c26      	ldrb	r6, [r4, #16]
 800c472:	b196      	cbz	r6, 800c49a <USBD_CDC_Init+0x8a>
 800c474:	4646      	mov	r6, r8
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	4639      	mov	r1, r7
 800c47a:	4620      	mov	r0, r4
 800c47c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c480:	f000 ff38 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800c484:	4630      	mov	r0, r6
 800c486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	2202      	movs	r2, #2
 800c48e:	2181      	movs	r1, #129	; 0x81
 800c490:	f000 fec6 	bl	800d220 <USBD_LL_OpenEP>
 800c494:	2501      	movs	r5, #1
 800c496:	2340      	movs	r3, #64	; 0x40
 800c498:	e7c8      	b.n	800c42c <USBD_CDC_Init+0x1c>
 800c49a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c49e:	4639      	mov	r1, r7
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c4a6:	f000 ff25 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b0:	463e      	mov	r6, r7
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c4b8 <USBD_CDC_RegisterInterface>:
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	b119      	cbz	r1, 800c4c4 <USBD_CDC_RegisterInterface+0xc>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
 800c4c2:	4770      	bx	lr
 800c4c4:	2002      	movs	r0, #2
 800c4c6:	4770      	bx	lr

0800c4c8 <USBD_CDC_SetTxBuffer>:
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 800c4d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop

0800c4dc <USBD_CDC_SetRxBuffer>:
 800c4dc:	4603      	mov	r3, r0
 800c4de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop

0800c4ec <USBD_CDC_TransmitPacket>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
 800c4f2:	b195      	cbz	r5, 800c51a <USBD_CDC_TransmitPacket+0x2e>
 800c4f4:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800c4f8:	b10c      	cbz	r4, 800c4fe <USBD_CDC_TransmitPacket+0x12>
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4fe:	2701      	movs	r7, #1
 800c500:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
 800c504:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800c508:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
 800c50c:	2181      	movs	r1, #129	; 0x81
 800c50e:	b2b3      	uxth	r3, r6
 800c510:	6306      	str	r6, [r0, #48]	; 0x30
 800c512:	f000 fee1 	bl	800d2d8 <USBD_LL_Transmit>
 800c516:	4620      	mov	r0, r4
 800c518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51a:	2002      	movs	r0, #2
 800c51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51e:	bf00      	nop

0800c520 <USBD_CDC_ReceivePacket>:
 800c520:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
 800c524:	b510      	push	{r4, lr}
 800c526:	b19a      	cbz	r2, 800c550 <USBD_CDC_ReceivePacket+0x30>
 800c528:	7c04      	ldrb	r4, [r0, #16]
 800c52a:	b144      	cbz	r4, 800c53e <USBD_CDC_ReceivePacket+0x1e>
 800c52c:	2400      	movs	r4, #0
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	2101      	movs	r1, #1
 800c532:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c536:	f000 fedd 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800c53a:	4620      	mov	r0, r4
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c542:	2101      	movs	r1, #1
 800c544:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c548:	f000 fed4 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800c54c:	4620      	mov	r0, r4
 800c54e:	bd10      	pop	{r4, pc}
 800c550:	2402      	movs	r4, #2
 800c552:	4620      	mov	r0, r4
 800c554:	bd10      	pop	{r4, pc}
 800c556:	bf00      	nop

0800c558 <USBD_Init>:
 800c558:	b188      	cbz	r0, 800c57e <USBD_Init+0x26>
 800c55a:	b508      	push	{r3, lr}
 800c55c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c560:	b113      	cbz	r3, 800c568 <USBD_Init+0x10>
 800c562:	2300      	movs	r3, #0
 800c564:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
 800c568:	b109      	cbz	r1, 800c56e <USBD_Init+0x16>
 800c56a:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
 800c56e:	2301      	movs	r3, #1
 800c570:	7002      	strb	r2, [r0, #0]
 800c572:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 800c576:	f000 fe01 	bl	800d17c <USBD_LL_Init>
 800c57a:	2000      	movs	r0, #0
 800c57c:	bd08      	pop	{r3, pc}
 800c57e:	2002      	movs	r0, #2
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop

0800c584 <USBD_RegisterClass>:
 800c584:	4603      	mov	r3, r0
 800c586:	b119      	cbz	r1, 800c590 <USBD_RegisterClass+0xc>
 800c588:	2000      	movs	r0, #0
 800c58a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
 800c58e:	4770      	bx	lr
 800c590:	2002      	movs	r0, #2
 800c592:	4770      	bx	lr

0800c594 <USBD_Start>:
 800c594:	b508      	push	{r3, lr}
 800c596:	f000 fe35 	bl	800d204 <USBD_LL_Start>
 800c59a:	2000      	movs	r0, #0
 800c59c:	bd08      	pop	{r3, pc}
 800c59e:	bf00      	nop

0800c5a0 <USBD_SetClassConfig>:
 800c5a0:	b508      	push	{r3, lr}
 800c5a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c5a6:	b11b      	cbz	r3, 800c5b0 <USBD_SetClassConfig+0x10>
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4798      	blx	r3
 800c5ac:	b900      	cbnz	r0, 800c5b0 <USBD_SetClassConfig+0x10>
 800c5ae:	bd08      	pop	{r3, pc}
 800c5b0:	2002      	movs	r0, #2
 800c5b2:	bd08      	pop	{r3, pc}

0800c5b4 <USBD_ClrClassConfig>:
 800c5b4:	b508      	push	{r3, lr}
 800c5b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	4798      	blx	r3
 800c5be:	2000      	movs	r0, #0
 800c5c0:	bd08      	pop	{r3, pc}
 800c5c2:	bf00      	nop

0800c5c4 <USBD_LL_SetupStage>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f000 fb63 	bl	800cc98 <USBD_ParseSetupRequest>
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800c5d8:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 800c5dc:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800c5e0:	f001 031f 	and.w	r3, r1, #31
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
 800c5ea:	d009      	beq.n	800c600 <USBD_LL_SetupStage+0x3c>
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d013      	beq.n	800c618 <USBD_LL_SetupStage+0x54>
 800c5f0:	b163      	cbz	r3, 800c60c <USBD_LL_SetupStage+0x48>
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c5f8:	f000 fe30 	bl	800d25c <USBD_LL_StallEP>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	4629      	mov	r1, r5
 800c602:	4620      	mov	r0, r4
 800c604:	f000 fa78 	bl	800caf8 <USBD_StdItfReq>
 800c608:	2000      	movs	r0, #0
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	4629      	mov	r1, r5
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 f8f8 	bl	800c804 <USBD_StdDevReq>
 800c614:	2000      	movs	r0, #0
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	4629      	mov	r1, r5
 800c61a:	4620      	mov	r0, r4
 800c61c:	f000 faa0 	bl	800cb60 <USBD_StdEPReq>
 800c620:	2000      	movs	r0, #0
 800c622:	bd38      	pop	{r3, r4, r5, pc}

0800c624 <USBD_LL_DataOutStage>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	4605      	mov	r5, r0
 800c628:	b969      	cbnz	r1, 800c646 <USBD_LL_DataOutStage+0x22>
 800c62a:	4613      	mov	r3, r2
 800c62c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800c630:	2a03      	cmp	r2, #3
 800c632:	d015      	beq.n	800c660 <USBD_LL_DataOutStage+0x3c>
 800c634:	2a05      	cmp	r2, #5
 800c636:	460c      	mov	r4, r1
 800c638:	d10e      	bne.n	800c658 <USBD_LL_DataOutStage+0x34>
 800c63a:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
 800c63e:	f000 fe0d 	bl	800d25c <USBD_LL_StallEP>
 800c642:	4620      	mov	r0, r4
 800c644:	bd38      	pop	{r3, r4, r5, pc}
 800c646:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	b133      	cbz	r3, 800c65c <USBD_LL_DataOutStage+0x38>
 800c64e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c652:	2a03      	cmp	r2, #3
 800c654:	d102      	bne.n	800c65c <USBD_LL_DataOutStage+0x38>
 800c656:	4798      	blx	r3
 800c658:	2000      	movs	r0, #0
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	2002      	movs	r0, #2
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800c664:	4291      	cmp	r1, r2
 800c666:	d90c      	bls.n	800c682 <USBD_LL_DataOutStage+0x5e>
 800c668:	1a89      	subs	r1, r1, r2
 800c66a:	428a      	cmp	r2, r1
 800c66c:	bf88      	it	hi
 800c66e:	b28a      	uxthhi	r2, r1
 800c670:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
 800c674:	bf98      	it	ls
 800c676:	b292      	uxthls	r2, r2
 800c678:	4619      	mov	r1, r3
 800c67a:	f000 fb7d 	bl	800cd78 <USBD_CtlContinueRx>
 800c67e:	2000      	movs	r0, #0
 800c680:	bd38      	pop	{r3, r4, r5, pc}
 800c682:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	b11b      	cbz	r3, 800c692 <USBD_LL_DataOutStage+0x6e>
 800c68a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c68e:	2a03      	cmp	r2, #3
 800c690:	d004      	beq.n	800c69c <USBD_LL_DataOutStage+0x78>
 800c692:	4628      	mov	r0, r5
 800c694:	f000 fb7a 	bl	800cd8c <USBD_CtlSendStatus>
 800c698:	2000      	movs	r0, #0
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	4798      	blx	r3
 800c69e:	e7f8      	b.n	800c692 <USBD_LL_DataOutStage+0x6e>

0800c6a0 <USBD_LL_DataInStage>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	b961      	cbnz	r1, 800c6c0 <USBD_LL_DataInStage+0x20>
 800c6a6:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d015      	beq.n	800c6da <USBD_LL_DataInStage+0x3a>
 800c6ae:	f033 0304 	bics.w	r3, r3, #4
 800c6b2:	d02e      	beq.n	800c712 <USBD_LL_DataInStage+0x72>
 800c6b4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d031      	beq.n	800c720 <USBD_LL_DataInStage+0x80>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	b133      	cbz	r3, 800c6d6 <USBD_LL_DataInStage+0x36>
 800c6c8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c6cc:	2a03      	cmp	r2, #3
 800c6ce:	d102      	bne.n	800c6d6 <USBD_LL_DataInStage+0x36>
 800c6d0:	4798      	blx	r3
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	bd70      	pop	{r4, r5, r6, pc}
 800c6d6:	2002      	movs	r0, #2
 800c6d8:	bd70      	pop	{r4, r5, r6, pc}
 800c6da:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800c6de:	429e      	cmp	r6, r3
 800c6e0:	d833      	bhi.n	800c74a <USBD_LL_DataInStage+0xaa>
 800c6e2:	69c2      	ldr	r2, [r0, #28]
 800c6e4:	fbb2 f5f3 	udiv	r5, r2, r3
 800c6e8:	fb03 2515 	mls	r5, r3, r5, r2
 800c6ec:	b9ed      	cbnz	r5, 800c72a <USBD_LL_DataInStage+0x8a>
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d81b      	bhi.n	800c72a <USBD_LL_DataInStage+0x8a>
 800c6f2:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d217      	bcs.n	800c72a <USBD_LL_DataInStage+0x8a>
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	f000 fb24 	bl	800cd48 <USBD_CtlContinueSendData>
 800c700:	462b      	mov	r3, r5
 800c702:	462a      	mov	r2, r5
 800c704:	4629      	mov	r1, r5
 800c706:	4620      	mov	r0, r4
 800c708:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
 800c70c:	f000 fdf2 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800c710:	e7d0      	b.n	800c6b4 <USBD_LL_DataInStage+0x14>
 800c712:	2180      	movs	r1, #128	; 0x80
 800c714:	f000 fda2 	bl	800d25c <USBD_LL_StallEP>
 800c718:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d1cd      	bne.n	800c6bc <USBD_LL_DataInStage+0x1c>
 800c720:	2300      	movs	r3, #0
 800c722:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
 800c726:	4618      	mov	r0, r3
 800c728:	bd70      	pop	{r4, r5, r6, pc}
 800c72a:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	b11b      	cbz	r3, 800c73a <USBD_LL_DataInStage+0x9a>
 800c732:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800c736:	2a03      	cmp	r2, #3
 800c738:	d015      	beq.n	800c766 <USBD_LL_DataInStage+0xc6>
 800c73a:	2180      	movs	r1, #128	; 0x80
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fd8d 	bl	800d25c <USBD_LL_StallEP>
 800c742:	4620      	mov	r0, r4
 800c744:	f000 fb2e 	bl	800cda4 <USBD_CtlReceiveStatus>
 800c748:	e7b4      	b.n	800c6b4 <USBD_LL_DataInStage+0x14>
 800c74a:	460d      	mov	r5, r1
 800c74c:	1af3      	subs	r3, r6, r3
 800c74e:	4611      	mov	r1, r2
 800c750:	6203      	str	r3, [r0, #32]
 800c752:	b29a      	uxth	r2, r3
 800c754:	f000 faf8 	bl	800cd48 <USBD_CtlContinueSendData>
 800c758:	462b      	mov	r3, r5
 800c75a:	462a      	mov	r2, r5
 800c75c:	4629      	mov	r1, r5
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 fdc8 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800c764:	e7a6      	b.n	800c6b4 <USBD_LL_DataInStage+0x14>
 800c766:	4620      	mov	r0, r4
 800c768:	4798      	blx	r3
 800c76a:	e7e6      	b.n	800c73a <USBD_LL_DataInStage+0x9a>

0800c76c <USBD_LL_Reset>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	2200      	movs	r2, #0
 800c770:	2640      	movs	r6, #64	; 0x40
 800c772:	4604      	mov	r4, r0
 800c774:	2501      	movs	r5, #1
 800c776:	4611      	mov	r1, r2
 800c778:	4633      	mov	r3, r6
 800c77a:	f000 fd51 	bl	800d220 <USBD_LL_OpenEP>
 800c77e:	4633      	mov	r3, r6
 800c780:	2180      	movs	r1, #128	; 0x80
 800c782:	2200      	movs	r2, #0
 800c784:	4620      	mov	r0, r4
 800c786:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 800c78a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 800c78e:	f000 fd47 	bl	800d220 <USBD_LL_OpenEP>
 800c792:	2100      	movs	r1, #0
 800c794:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800c798:	61a5      	str	r5, [r4, #24]
 800c79a:	6266      	str	r6, [r4, #36]	; 0x24
 800c79c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
 800c7a0:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
 800c7a4:	6061      	str	r1, [r4, #4]
 800c7a6:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
 800c7aa:	b123      	cbz	r3, 800c7b6 <USBD_LL_Reset+0x4a>
 800c7ac:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	4798      	blx	r3
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ba:	bf00      	nop

0800c7bc <USBD_LL_SetSpeed>:
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2000      	movs	r0, #0
 800c7c0:	7419      	strb	r1, [r3, #16]
 800c7c2:	4770      	bx	lr

0800c7c4 <USBD_LL_Suspend>:
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2104      	movs	r1, #4
 800c7c8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
 800c7d2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 800c7d6:	4770      	bx	lr

0800c7d8 <USBD_LL_Resume>:
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c7de:	2000      	movs	r0, #0
 800c7e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop

0800c7e8 <USBD_LL_SOF>:
 800c7e8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c7ec:	2a03      	cmp	r2, #3
 800c7ee:	d001      	beq.n	800c7f4 <USBD_LL_SOF+0xc>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	4770      	bx	lr
 800c7f4:	b508      	push	{r3, lr}
 800c7f6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	b103      	cbz	r3, 800c800 <USBD_LL_SOF+0x18>
 800c7fe:	4798      	blx	r3
 800c800:	2000      	movs	r0, #0
 800c802:	bd08      	pop	{r3, pc}

0800c804 <USBD_StdDevReq>:
 800c804:	b530      	push	{r4, r5, lr}
 800c806:	780b      	ldrb	r3, [r1, #0]
 800c808:	460d      	mov	r5, r1
 800c80a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c80e:	2b20      	cmp	r3, #32
 800c810:	4604      	mov	r4, r0
 800c812:	b083      	sub	sp, #12
 800c814:	d00d      	beq.n	800c832 <USBD_StdDevReq+0x2e>
 800c816:	2b40      	cmp	r3, #64	; 0x40
 800c818:	d00b      	beq.n	800c832 <USBD_StdDevReq+0x2e>
 800c81a:	b19b      	cbz	r3, 800c844 <USBD_StdDevReq+0x40>
 800c81c:	2180      	movs	r1, #128	; 0x80
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 fd1c 	bl	800d25c <USBD_LL_StallEP>
 800c824:	2100      	movs	r1, #0
 800c826:	4620      	mov	r0, r4
 800c828:	f000 fd18 	bl	800d25c <USBD_LL_StallEP>
 800c82c:	2000      	movs	r0, #0
 800c82e:	b003      	add	sp, #12
 800c830:	bd30      	pop	{r4, r5, pc}
 800c832:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c836:	4629      	mov	r1, r5
 800c838:	4620      	mov	r0, r4
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	4798      	blx	r3
 800c83e:	2000      	movs	r0, #0
 800c840:	b003      	add	sp, #12
 800c842:	bd30      	pop	{r4, r5, pc}
 800c844:	784b      	ldrb	r3, [r1, #1]
 800c846:	2b09      	cmp	r3, #9
 800c848:	d8e8      	bhi.n	800c81c <USBD_StdDevReq+0x18>
 800c84a:	a201      	add	r2, pc, #4	; (adr r2, 800c850 <USBD_StdDevReq+0x4c>)
 800c84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c850:	0800c8ab 	.word	0x0800c8ab
 800c854:	0800c8d7 	.word	0x0800c8d7
 800c858:	0800c81d 	.word	0x0800c81d
 800c85c:	0800c8f5 	.word	0x0800c8f5
 800c860:	0800c81d 	.word	0x0800c81d
 800c864:	0800c8fd 	.word	0x0800c8fd
 800c868:	0800c935 	.word	0x0800c935
 800c86c:	0800c81d 	.word	0x0800c81d
 800c870:	0800c965 	.word	0x0800c965
 800c874:	0800c879 	.word	0x0800c879
 800c878:	7889      	ldrb	r1, [r1, #2]
 800c87a:	4d9e      	ldr	r5, [pc, #632]	; (800caf4 <USBD_StdDevReq+0x2f0>)
 800c87c:	2901      	cmp	r1, #1
 800c87e:	7029      	strb	r1, [r5, #0]
 800c880:	d8cc      	bhi.n	800c81c <USBD_StdDevReq+0x18>
 800c882:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c886:	2b02      	cmp	r3, #2
 800c888:	f000 8111 	beq.w	800caae <USBD_StdDevReq+0x2aa>
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	f000 80ff 	beq.w	800ca90 <USBD_StdDevReq+0x28c>
 800c892:	2180      	movs	r1, #128	; 0x80
 800c894:	f000 fce2 	bl	800d25c <USBD_LL_StallEP>
 800c898:	2100      	movs	r1, #0
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fcde 	bl	800d25c <USBD_LL_StallEP>
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	7829      	ldrb	r1, [r5, #0]
 800c8a4:	f7ff fe86 	bl	800c5b4 <USBD_ClrClassConfig>
 800c8a8:	e7c0      	b.n	800c82c <USBD_StdDevReq+0x28>
 800c8aa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d8b3      	bhi.n	800c81c <USBD_StdDevReq+0x18>
 800c8b4:	88cb      	ldrh	r3, [r1, #6]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d1b0      	bne.n	800c81c <USBD_StdDevReq+0x18>
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800c8c0:	60c2      	str	r2, [r0, #12]
 800c8c2:	b10b      	cbz	r3, 800c8c8 <USBD_StdDevReq+0xc4>
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	60c3      	str	r3, [r0, #12]
 800c8c8:	2202      	movs	r2, #2
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f104 010c 	add.w	r1, r4, #12
 800c8d0:	f000 fa2c 	bl	800cd2c <USBD_CtlSendData>
 800c8d4:	e7aa      	b.n	800c82c <USBD_StdDevReq+0x28>
 800c8d6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d89d      	bhi.n	800c81c <USBD_StdDevReq+0x18>
 800c8e0:	884b      	ldrh	r3, [r1, #2]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d1a2      	bne.n	800c82c <USBD_StdDevReq+0x28>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800c8ee:	f000 fa4d 	bl	800cd8c <USBD_CtlSendStatus>
 800c8f2:	e79b      	b.n	800c82c <USBD_StdDevReq+0x28>
 800c8f4:	884b      	ldrh	r3, [r1, #2]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d198      	bne.n	800c82c <USBD_StdDevReq+0x28>
 800c8fa:	e7f5      	b.n	800c8e8 <USBD_StdDevReq+0xe4>
 800c8fc:	888b      	ldrh	r3, [r1, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d18c      	bne.n	800c81c <USBD_StdDevReq+0x18>
 800c902:	88cb      	ldrh	r3, [r1, #6]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d189      	bne.n	800c81c <USBD_StdDevReq+0x18>
 800c908:	884d      	ldrh	r5, [r1, #2]
 800c90a:	2d7f      	cmp	r5, #127	; 0x7f
 800c90c:	d886      	bhi.n	800c81c <USBD_StdDevReq+0x18>
 800c90e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c912:	2b03      	cmp	r3, #3
 800c914:	d082      	beq.n	800c81c <USBD_StdDevReq+0x18>
 800c916:	b2e9      	uxtb	r1, r5
 800c918:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
 800c91c:	f000 fcce 	bl	800d2bc <USBD_LL_SetUSBAddress>
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fa33 	bl	800cd8c <USBD_CtlSendStatus>
 800c926:	2d00      	cmp	r5, #0
 800c928:	f000 80df 	beq.w	800caea <USBD_StdDevReq+0x2e6>
 800c92c:	2302      	movs	r3, #2
 800c92e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800c932:	e77b      	b.n	800c82c <USBD_StdDevReq+0x28>
 800c934:	884a      	ldrh	r2, [r1, #2]
 800c936:	0a13      	lsrs	r3, r2, #8
 800c938:	3b01      	subs	r3, #1
 800c93a:	2b06      	cmp	r3, #6
 800c93c:	f63f af6e 	bhi.w	800c81c <USBD_StdDevReq+0x18>
 800c940:	a101      	add	r1, pc, #4	; (adr r1, 800c948 <USBD_StdDevReq+0x144>)
 800c942:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c946:	bf00      	nop
 800c948:	0800c9f7 	.word	0x0800c9f7
 800c94c:	0800c9df 	.word	0x0800c9df
 800c950:	0800c9cd 	.word	0x0800c9cd
 800c954:	0800c81d 	.word	0x0800c81d
 800c958:	0800c81d 	.word	0x0800c81d
 800c95c:	0800c9b7 	.word	0x0800c9b7
 800c960:	0800c989 	.word	0x0800c989
 800c964:	88ca      	ldrh	r2, [r1, #6]
 800c966:	2a01      	cmp	r2, #1
 800c968:	f47f af58 	bne.w	800c81c <USBD_StdDevReq+0x18>
 800c96c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c970:	2b02      	cmp	r3, #2
 800c972:	d878      	bhi.n	800ca66 <USBD_StdDevReq+0x262>
 800c974:	2b00      	cmp	r3, #0
 800c976:	f43f af51 	beq.w	800c81c <USBD_StdDevReq+0x18>
 800c97a:	4601      	mov	r1, r0
 800c97c:	2300      	movs	r3, #0
 800c97e:	f841 3f08 	str.w	r3, [r1, #8]!
 800c982:	f000 f9d3 	bl	800cd2c <USBD_CtlSendData>
 800c986:	e751      	b.n	800c82c <USBD_StdDevReq+0x28>
 800c988:	7c03      	ldrb	r3, [r0, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f47f af46 	bne.w	800c81c <USBD_StdDevReq+0x18>
 800c990:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c994:	f10d 0006 	add.w	r0, sp, #6
 800c998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c99a:	4798      	blx	r3
 800c99c:	2307      	movs	r3, #7
 800c99e:	7043      	strb	r3, [r0, #1]
 800c9a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c9a4:	2a00      	cmp	r2, #0
 800c9a6:	d06e      	beq.n	800ca86 <USBD_StdDevReq+0x282>
 800c9a8:	88eb      	ldrh	r3, [r5, #6]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d162      	bne.n	800ca74 <USBD_StdDevReq+0x270>
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	f000 f9ec 	bl	800cd8c <USBD_CtlSendStatus>
 800c9b4:	e73a      	b.n	800c82c <USBD_StdDevReq+0x28>
 800c9b6:	7c03      	ldrb	r3, [r0, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f47f af2f 	bne.w	800c81c <USBD_StdDevReq+0x18>
 800c9be:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c9c2:	f10d 0006 	add.w	r0, sp, #6
 800c9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c8:	4798      	blx	r3
 800c9ca:	e7e9      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800c9cc:	b2d2      	uxtb	r2, r2
 800c9ce:	2a05      	cmp	r2, #5
 800c9d0:	f63f af24 	bhi.w	800c81c <USBD_StdDevReq+0x18>
 800c9d4:	e8df f002 	tbb	[pc, r2]
 800c9d8:	272f373f 	.word	0x272f373f
 800c9dc:	171f      	.short	0x171f
 800c9de:	7c03      	ldrb	r3, [r0, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d172      	bne.n	800caca <USBD_StdDevReq+0x2c6>
 800c9e4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c9e8:	f10d 0006 	add.w	r0, sp, #6
 800c9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ee:	4798      	blx	r3
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	7043      	strb	r3, [r0, #1]
 800c9f4:	e7d4      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800c9f6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c9fa:	f10d 0106 	add.w	r1, sp, #6
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	7c00      	ldrb	r0, [r0, #16]
 800ca02:	4798      	blx	r3
 800ca04:	e7cc      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca06:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca0a:	f10d 0106 	add.w	r1, sp, #6
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	7c00      	ldrb	r0, [r0, #16]
 800ca12:	4798      	blx	r3
 800ca14:	e7c4      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca16:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca1a:	f10d 0106 	add.w	r1, sp, #6
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	7c00      	ldrb	r0, [r0, #16]
 800ca22:	4798      	blx	r3
 800ca24:	e7bc      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca26:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca2a:	f10d 0106 	add.w	r1, sp, #6
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	7c00      	ldrb	r0, [r0, #16]
 800ca32:	4798      	blx	r3
 800ca34:	e7b4      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca36:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca3a:	f10d 0106 	add.w	r1, sp, #6
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	7c00      	ldrb	r0, [r0, #16]
 800ca42:	4798      	blx	r3
 800ca44:	e7ac      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca46:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca4a:	f10d 0106 	add.w	r1, sp, #6
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	7c00      	ldrb	r0, [r0, #16]
 800ca52:	4798      	blx	r3
 800ca54:	e7a4      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca56:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800ca5a:	f10d 0106 	add.w	r1, sp, #6
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	7c00      	ldrb	r0, [r0, #16]
 800ca62:	4798      	blx	r3
 800ca64:	e79c      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	f47f aed8 	bne.w	800c81c <USBD_StdDevReq+0x18>
 800ca6c:	1d01      	adds	r1, r0, #4
 800ca6e:	f000 f95d 	bl	800cd2c <USBD_CtlSendData>
 800ca72:	e6db      	b.n	800c82c <USBD_StdDevReq+0x28>
 800ca74:	429a      	cmp	r2, r3
 800ca76:	bf28      	it	cs
 800ca78:	461a      	movcs	r2, r3
 800ca7a:	4601      	mov	r1, r0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ca82:	f000 f953 	bl	800cd2c <USBD_CtlSendData>
 800ca86:	88eb      	ldrh	r3, [r5, #6]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f47f aecf 	bne.w	800c82c <USBD_StdDevReq+0x28>
 800ca8e:	e78e      	b.n	800c9ae <USBD_StdDevReq+0x1aa>
 800ca90:	b321      	cbz	r1, 800cadc <USBD_StdDevReq+0x2d8>
 800ca92:	6841      	ldr	r1, [r0, #4]
 800ca94:	2901      	cmp	r1, #1
 800ca96:	d08a      	beq.n	800c9ae <USBD_StdDevReq+0x1aa>
 800ca98:	b2c9      	uxtb	r1, r1
 800ca9a:	f7ff fd8b 	bl	800c5b4 <USBD_ClrClassConfig>
 800ca9e:	7829      	ldrb	r1, [r5, #0]
 800caa0:	4620      	mov	r0, r4
 800caa2:	6061      	str	r1, [r4, #4]
 800caa4:	f7ff fd7c 	bl	800c5a0 <USBD_SetClassConfig>
 800caa8:	2802      	cmp	r0, #2
 800caaa:	d180      	bne.n	800c9ae <USBD_StdDevReq+0x1aa>
 800caac:	e6b6      	b.n	800c81c <USBD_StdDevReq+0x18>
 800caae:	2900      	cmp	r1, #0
 800cab0:	f43f af7d 	beq.w	800c9ae <USBD_StdDevReq+0x1aa>
 800cab4:	2101      	movs	r1, #1
 800cab6:	2303      	movs	r3, #3
 800cab8:	6041      	str	r1, [r0, #4]
 800caba:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 800cabe:	f7ff fd6f 	bl	800c5a0 <USBD_SetClassConfig>
 800cac2:	2802      	cmp	r0, #2
 800cac4:	f47f af73 	bne.w	800c9ae <USBD_StdDevReq+0x1aa>
 800cac8:	e6a8      	b.n	800c81c <USBD_StdDevReq+0x18>
 800caca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800cace:	f10d 0006 	add.w	r0, sp, #6
 800cad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad4:	4798      	blx	r3
 800cad6:	2302      	movs	r3, #2
 800cad8:	7043      	strb	r3, [r0, #1]
 800cada:	e761      	b.n	800c9a0 <USBD_StdDevReq+0x19c>
 800cadc:	2302      	movs	r3, #2
 800cade:	6041      	str	r1, [r0, #4]
 800cae0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 800cae4:	f7ff fd66 	bl	800c5b4 <USBD_ClrClassConfig>
 800cae8:	e761      	b.n	800c9ae <USBD_StdDevReq+0x1aa>
 800caea:	2301      	movs	r3, #1
 800caec:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800caf0:	e69c      	b.n	800c82c <USBD_StdDevReq+0x28>
 800caf2:	bf00      	nop
 800caf4:	20000a8c 	.word	0x20000a8c

0800caf8 <USBD_StdItfReq>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	780b      	ldrb	r3, [r1, #0]
 800cafc:	460d      	mov	r5, r1
 800cafe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800cb02:	2a40      	cmp	r2, #64	; 0x40
 800cb04:	4604      	mov	r4, r0
 800cb06:	d00a      	beq.n	800cb1e <USBD_StdItfReq+0x26>
 800cb08:	065b      	lsls	r3, r3, #25
 800cb0a:	d508      	bpl.n	800cb1e <USBD_StdItfReq+0x26>
 800cb0c:	2180      	movs	r1, #128	; 0x80
 800cb0e:	f000 fba5 	bl	800d25c <USBD_LL_StallEP>
 800cb12:	2100      	movs	r1, #0
 800cb14:	4620      	mov	r0, r4
 800cb16:	f000 fba1 	bl	800d25c <USBD_LL_StallEP>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	bd38      	pop	{r3, r4, r5, pc}
 800cb1e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800cb22:	3b01      	subs	r3, #1
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d811      	bhi.n	800cb4c <USBD_StdItfReq+0x54>
 800cb28:	792b      	ldrb	r3, [r5, #4]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d80e      	bhi.n	800cb4c <USBD_StdItfReq+0x54>
 800cb2e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cb32:	4629      	mov	r1, r5
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	4620      	mov	r0, r4
 800cb38:	4798      	blx	r3
 800cb3a:	88eb      	ldrh	r3, [r5, #6]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1ec      	bne.n	800cb1a <USBD_StdItfReq+0x22>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d1ea      	bne.n	800cb1a <USBD_StdItfReq+0x22>
 800cb44:	4620      	mov	r0, r4
 800cb46:	f000 f921 	bl	800cd8c <USBD_CtlSendStatus>
 800cb4a:	e7e6      	b.n	800cb1a <USBD_StdItfReq+0x22>
 800cb4c:	2180      	movs	r1, #128	; 0x80
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f000 fb84 	bl	800d25c <USBD_LL_StallEP>
 800cb54:	2100      	movs	r1, #0
 800cb56:	4620      	mov	r0, r4
 800cb58:	f000 fb80 	bl	800d25c <USBD_LL_StallEP>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	bd38      	pop	{r3, r4, r5, pc}

0800cb60 <USBD_StdEPReq>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	780b      	ldrb	r3, [r1, #0]
 800cb64:	4604      	mov	r4, r0
 800cb66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	d00c      	beq.n	800cb88 <USBD_StdEPReq+0x28>
 800cb6e:	2b40      	cmp	r3, #64	; 0x40
 800cb70:	d00a      	beq.n	800cb88 <USBD_StdEPReq+0x28>
 800cb72:	b183      	cbz	r3, 800cb96 <USBD_StdEPReq+0x36>
 800cb74:	2180      	movs	r1, #128	; 0x80
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 fb70 	bl	800d25c <USBD_LL_StallEP>
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 fb6c 	bl	800d25c <USBD_LL_StallEP>
 800cb84:	2000      	movs	r0, #0
 800cb86:	bd38      	pop	{r3, r4, r5, pc}
 800cb88:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	4798      	blx	r3
 800cb92:	2000      	movs	r0, #0
 800cb94:	bd38      	pop	{r3, r4, r5, pc}
 800cb96:	784b      	ldrb	r3, [r1, #1]
 800cb98:	888a      	ldrh	r2, [r1, #4]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	fa5f fc82 	uxtb.w	ip, r2
 800cba0:	d03e      	beq.n	800cc20 <USBD_StdEPReq+0xc0>
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d02a      	beq.n	800cbfc <USBD_StdEPReq+0x9c>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e4      	bne.n	800cb74 <USBD_StdEPReq+0x14>
 800cbaa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d051      	beq.n	800cc56 <USBD_StdEPReq+0xf6>
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d1de      	bne.n	800cb74 <USBD_StdEPReq+0x14>
 800cbb6:	f00c 030f 	and.w	r3, ip, #15
 800cbba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cbbe:	0612      	lsls	r2, r2, #24
 800cbc0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cbc4:	d456      	bmi.n	800cc74 <USBD_StdEPReq+0x114>
 800cbc6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0d2      	beq.n	800cb74 <USBD_StdEPReq+0x14>
 800cbce:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cbd2:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800cbd6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cbda:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 800cbde:	b133      	cbz	r3, 800cbee <USBD_StdEPReq+0x8e>
 800cbe0:	4661      	mov	r1, ip
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 fb56 	bl	800d294 <USBD_LL_IsStallEP>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d04f      	beq.n	800cc8c <USBD_StdEPReq+0x12c>
 800cbec:	2301      	movs	r3, #1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 f899 	bl	800cd2c <USBD_CtlSendData>
 800cbfa:	e7c3      	b.n	800cb84 <USBD_StdEPReq+0x24>
 800cbfc:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d01d      	beq.n	800cc40 <USBD_StdEPReq+0xe0>
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d1b5      	bne.n	800cb74 <USBD_StdEPReq+0x14>
 800cc08:	884b      	ldrh	r3, [r1, #2]
 800cc0a:	b92b      	cbnz	r3, 800cc18 <USBD_StdEPReq+0xb8>
 800cc0c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc10:	d002      	beq.n	800cc18 <USBD_StdEPReq+0xb8>
 800cc12:	88cb      	ldrh	r3, [r1, #6]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d03b      	beq.n	800cc90 <USBD_StdEPReq+0x130>
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f000 f8b7 	bl	800cd8c <USBD_CtlSendStatus>
 800cc1e:	e7b1      	b.n	800cb84 <USBD_StdEPReq+0x24>
 800cc20:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d00b      	beq.n	800cc40 <USBD_StdEPReq+0xe0>
 800cc28:	2b03      	cmp	r3, #3
 800cc2a:	d1a3      	bne.n	800cb74 <USBD_StdEPReq+0x14>
 800cc2c:	884b      	ldrh	r3, [r1, #2]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1a8      	bne.n	800cb84 <USBD_StdEPReq+0x24>
 800cc32:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc36:	d0ef      	beq.n	800cc18 <USBD_StdEPReq+0xb8>
 800cc38:	4661      	mov	r1, ip
 800cc3a:	f000 fb1d 	bl	800d278 <USBD_LL_ClearStallEP>
 800cc3e:	e7eb      	b.n	800cc18 <USBD_StdEPReq+0xb8>
 800cc40:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc44:	d096      	beq.n	800cb74 <USBD_StdEPReq+0x14>
 800cc46:	4661      	mov	r1, ip
 800cc48:	f000 fb08 	bl	800d25c <USBD_LL_StallEP>
 800cc4c:	2180      	movs	r1, #128	; 0x80
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 fb04 	bl	800d25c <USBD_LL_StallEP>
 800cc54:	e796      	b.n	800cb84 <USBD_StdEPReq+0x24>
 800cc56:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800cc5a:	d18b      	bne.n	800cb74 <USBD_StdEPReq+0x14>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	0611      	lsls	r1, r2, #24
 800cc60:	bf4c      	ite	mi
 800cc62:	f100 0114 	addmi.w	r1, r0, #20
 800cc66:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
 800cc6a:	2202      	movs	r2, #2
 800cc6c:	600b      	str	r3, [r1, #0]
 800cc6e:	f000 f85d 	bl	800cd2c <USBD_CtlSendData>
 800cc72:	e787      	b.n	800cb84 <USBD_StdEPReq+0x24>
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f43f af7c 	beq.w	800cb74 <USBD_StdEPReq+0x14>
 800cc7c:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800cc80:	1c5d      	adds	r5, r3, #1
 800cc82:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800cc86:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cc8a:	e7a8      	b.n	800cbde <USBD_StdEPReq+0x7e>
 800cc8c:	6028      	str	r0, [r5, #0]
 800cc8e:	e7af      	b.n	800cbf0 <USBD_StdEPReq+0x90>
 800cc90:	4661      	mov	r1, ip
 800cc92:	f000 fae3 	bl	800d25c <USBD_LL_StallEP>
 800cc96:	e7bf      	b.n	800cc18 <USBD_StdEPReq+0xb8>

0800cc98 <USBD_ParseSetupRequest>:
 800cc98:	780b      	ldrb	r3, [r1, #0]
 800cc9a:	7003      	strb	r3, [r0, #0]
 800cc9c:	784b      	ldrb	r3, [r1, #1]
 800cc9e:	7043      	strb	r3, [r0, #1]
 800cca0:	78ca      	ldrb	r2, [r1, #3]
 800cca2:	788b      	ldrb	r3, [r1, #2]
 800cca4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cca8:	8043      	strh	r3, [r0, #2]
 800ccaa:	794a      	ldrb	r2, [r1, #5]
 800ccac:	790b      	ldrb	r3, [r1, #4]
 800ccae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ccb2:	8083      	strh	r3, [r0, #4]
 800ccb4:	79ca      	ldrb	r2, [r1, #7]
 800ccb6:	798b      	ldrb	r3, [r1, #6]
 800ccb8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ccbc:	80c3      	strh	r3, [r0, #6]
 800ccbe:	4770      	bx	lr

0800ccc0 <USBD_CtlError>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	2180      	movs	r1, #128	; 0x80
 800ccc6:	f000 fac9 	bl	800d25c <USBD_LL_StallEP>
 800ccca:	4620      	mov	r0, r4
 800cccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	f000 bac3 	b.w	800d25c <USBD_LL_StallEP>
 800ccd6:	bf00      	nop

0800ccd8 <USBD_GetString>:
 800ccd8:	b318      	cbz	r0, 800cd22 <USBD_GetString+0x4a>
 800ccda:	7803      	ldrb	r3, [r0, #0]
 800ccdc:	b430      	push	{r4, r5}
 800ccde:	b30b      	cbz	r3, 800cd24 <USBD_GetString+0x4c>
 800cce0:	4604      	mov	r4, r0
 800cce2:	f1c0 0c01 	rsb	ip, r0, #1
 800cce6:	eb04 030c 	add.w	r3, r4, ip
 800ccea:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2d00      	cmp	r5, #0
 800ccf2:	d1f8      	bne.n	800cce6 <USBD_GetString+0xe>
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	b2dc      	uxtb	r4, r3
 800ccfa:	8013      	strh	r3, [r2, #0]
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	700c      	strb	r4, [r1, #0]
 800cd00:	704b      	strb	r3, [r1, #1]
 800cd02:	7804      	ldrb	r4, [r0, #0]
 800cd04:	b15c      	cbz	r4, 800cd1e <USBD_GetString+0x46>
 800cd06:	2302      	movs	r3, #2
 800cd08:	2500      	movs	r5, #0
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	b2d2      	uxtb	r2, r2
 800cd0e:	54cc      	strb	r4, [r1, r3]
 800cd10:	548d      	strb	r5, [r1, r2]
 800cd12:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800cd16:	3302      	adds	r3, #2
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2c00      	cmp	r4, #0
 800cd1c:	d1f5      	bne.n	800cd0a <USBD_GetString+0x32>
 800cd1e:	bc30      	pop	{r4, r5}
 800cd20:	4770      	bx	lr
 800cd22:	4770      	bx	lr
 800cd24:	2402      	movs	r4, #2
 800cd26:	4623      	mov	r3, r4
 800cd28:	e7e7      	b.n	800ccfa <USBD_GetString+0x22>
 800cd2a:	bf00      	nop

0800cd2c <USBD_CtlSendData>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	4613      	mov	r3, r2
 800cd30:	2402      	movs	r4, #2
 800cd32:	460a      	mov	r2, r1
 800cd34:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800cd38:	2100      	movs	r1, #0
 800cd3a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
 800cd3e:	f000 facb 	bl	800d2d8 <USBD_LL_Transmit>
 800cd42:	2000      	movs	r0, #0
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	bf00      	nop

0800cd48 <USBD_CtlContinueSendData>:
 800cd48:	468c      	mov	ip, r1
 800cd4a:	b508      	push	{r3, lr}
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	4613      	mov	r3, r2
 800cd50:	4662      	mov	r2, ip
 800cd52:	f000 fac1 	bl	800d2d8 <USBD_LL_Transmit>
 800cd56:	2000      	movs	r0, #0
 800cd58:	bd08      	pop	{r3, pc}
 800cd5a:	bf00      	nop

0800cd5c <USBD_CtlPrepareRx>:
 800cd5c:	b510      	push	{r4, lr}
 800cd5e:	4613      	mov	r3, r2
 800cd60:	2403      	movs	r4, #3
 800cd62:	460a      	mov	r2, r1
 800cd64:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148
 800cd68:	2100      	movs	r1, #0
 800cd6a:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
 800cd6e:	f000 fac1 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800cd72:	2000      	movs	r0, #0
 800cd74:	bd10      	pop	{r4, pc}
 800cd76:	bf00      	nop

0800cd78 <USBD_CtlContinueRx>:
 800cd78:	468c      	mov	ip, r1
 800cd7a:	b508      	push	{r3, lr}
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	4613      	mov	r3, r2
 800cd80:	4662      	mov	r2, ip
 800cd82:	f000 fab7 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800cd86:	2000      	movs	r0, #0
 800cd88:	bd08      	pop	{r3, pc}
 800cd8a:	bf00      	nop

0800cd8c <USBD_CtlSendStatus>:
 800cd8c:	b508      	push	{r3, lr}
 800cd8e:	2104      	movs	r1, #4
 800cd90:	2300      	movs	r3, #0
 800cd92:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
 800cd96:	461a      	mov	r2, r3
 800cd98:	4619      	mov	r1, r3
 800cd9a:	f000 fa9d 	bl	800d2d8 <USBD_LL_Transmit>
 800cd9e:	2000      	movs	r0, #0
 800cda0:	bd08      	pop	{r3, pc}
 800cda2:	bf00      	nop

0800cda4 <USBD_CtlReceiveStatus>:
 800cda4:	b508      	push	{r3, lr}
 800cda6:	2105      	movs	r1, #5
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
 800cdae:	461a      	mov	r2, r3
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	f000 fa9f 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	bd08      	pop	{r3, pc}
 800cdba:	bf00      	nop

0800cdbc <MX_USB_DEVICE_Init>:
 800cdbc:	b508      	push	{r3, lr}
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	4917      	ldr	r1, [pc, #92]	; (800ce20 <MX_USB_DEVICE_Init+0x64>)
 800cdc2:	4818      	ldr	r0, [pc, #96]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800cdc4:	f7ff fbc8 	bl	800c558 <USBD_Init>
 800cdc8:	b970      	cbnz	r0, 800cde8 <MX_USB_DEVICE_Init+0x2c>
 800cdca:	4917      	ldr	r1, [pc, #92]	; (800ce28 <MX_USB_DEVICE_Init+0x6c>)
 800cdcc:	4815      	ldr	r0, [pc, #84]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800cdce:	f7ff fbd9 	bl	800c584 <USBD_RegisterClass>
 800cdd2:	b988      	cbnz	r0, 800cdf8 <MX_USB_DEVICE_Init+0x3c>
 800cdd4:	4915      	ldr	r1, [pc, #84]	; (800ce2c <MX_USB_DEVICE_Init+0x70>)
 800cdd6:	4813      	ldr	r0, [pc, #76]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800cdd8:	f7ff fb6e 	bl	800c4b8 <USBD_CDC_RegisterInterface>
 800cddc:	b9a0      	cbnz	r0, 800ce08 <MX_USB_DEVICE_Init+0x4c>
 800cdde:	4811      	ldr	r0, [pc, #68]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800cde0:	f7ff fbd8 	bl	800c594 <USBD_Start>
 800cde4:	b9b8      	cbnz	r0, 800ce16 <MX_USB_DEVICE_Init+0x5a>
 800cde6:	bd08      	pop	{r3, pc}
 800cde8:	f7fa fda8 	bl	800793c <Error_Handler>
 800cdec:	490e      	ldr	r1, [pc, #56]	; (800ce28 <MX_USB_DEVICE_Init+0x6c>)
 800cdee:	480d      	ldr	r0, [pc, #52]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800cdf0:	f7ff fbc8 	bl	800c584 <USBD_RegisterClass>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d0ed      	beq.n	800cdd4 <MX_USB_DEVICE_Init+0x18>
 800cdf8:	f7fa fda0 	bl	800793c <Error_Handler>
 800cdfc:	490b      	ldr	r1, [pc, #44]	; (800ce2c <MX_USB_DEVICE_Init+0x70>)
 800cdfe:	4809      	ldr	r0, [pc, #36]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800ce00:	f7ff fb5a 	bl	800c4b8 <USBD_CDC_RegisterInterface>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d0ea      	beq.n	800cdde <MX_USB_DEVICE_Init+0x22>
 800ce08:	f7fa fd98 	bl	800793c <Error_Handler>
 800ce0c:	4805      	ldr	r0, [pc, #20]	; (800ce24 <MX_USB_DEVICE_Init+0x68>)
 800ce0e:	f7ff fbc1 	bl	800c594 <USBD_Start>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d0e7      	beq.n	800cde6 <MX_USB_DEVICE_Init+0x2a>
 800ce16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ce1a:	f7fa bd8f 	b.w	800793c <Error_Handler>
 800ce1e:	bf00      	nop
 800ce20:	2000014c 	.word	0x2000014c
 800ce24:	20000a90 	.word	0x20000a90
 800ce28:	2000002c 	.word	0x2000002c
 800ce2c:	2000013c 	.word	0x2000013c

0800ce30 <CDC_DeInit_FS>:
 800ce30:	2000      	movs	r0, #0
 800ce32:	4770      	bx	lr

0800ce34 <CDC_Control_FS>:
 800ce34:	2000      	movs	r0, #0
 800ce36:	4770      	bx	lr

0800ce38 <CDC_Receive_FS>:
 800ce38:	b570      	push	{r4, r5, r6, lr}
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4816      	ldr	r0, [pc, #88]	; (800ce98 <CDC_Receive_FS+0x60>)
 800ce40:	4621      	mov	r1, r4
 800ce42:	f7ff fb4b 	bl	800c4dc <USBD_CDC_SetRxBuffer>
 800ce46:	4814      	ldr	r0, [pc, #80]	; (800ce98 <CDC_Receive_FS+0x60>)
 800ce48:	f7ff fb6a 	bl	800c520 <USBD_CDC_ReceivePacket>
 800ce4c:	2240      	movs	r2, #64	; 0x40
 800ce4e:	2100      	movs	r1, #0
 800ce50:	4812      	ldr	r0, [pc, #72]	; (800ce9c <CDC_Receive_FS+0x64>)
 800ce52:	f000 fa95 	bl	800d380 <memset>
 800ce56:	4623      	mov	r3, r4
 800ce58:	682a      	ldr	r2, [r5, #0]
 800ce5a:	4910      	ldr	r1, [pc, #64]	; (800ce9c <CDC_Receive_FS+0x64>)
 800ce5c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800ce60:	681e      	ldr	r6, [r3, #0]
 800ce62:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800ce66:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800ce6a:	68dd      	ldr	r5, [r3, #12]
 800ce6c:	3310      	adds	r3, #16
 800ce6e:	4283      	cmp	r3, r0
 800ce70:	600e      	str	r6, [r1, #0]
 800ce72:	f8c1 e004 	str.w	lr, [r1, #4]
 800ce76:	f8c1 c008 	str.w	ip, [r1, #8]
 800ce7a:	60cd      	str	r5, [r1, #12]
 800ce7c:	f101 0110 	add.w	r1, r1, #16
 800ce80:	d1ee      	bne.n	800ce60 <CDC_Receive_FS+0x28>
 800ce82:	2100      	movs	r1, #0
 800ce84:	b2d2      	uxtb	r2, r2
 800ce86:	4620      	mov	r0, r4
 800ce88:	f000 fa7a 	bl	800d380 <memset>
 800ce8c:	4804      	ldr	r0, [pc, #16]	; (800cea0 <CDC_Receive_FS+0x68>)
 800ce8e:	f7fb ff53 	bl	8008d38 <HAL_EXTI_GenerateSWI>
 800ce92:	2000      	movs	r0, #0
 800ce94:	bd70      	pop	{r4, r5, r6, pc}
 800ce96:	bf00      	nop
 800ce98:	20000a90 	.word	0x20000a90
 800ce9c:	20000a38 	.word	0x20000a38
 800cea0:	20000538 	.word	0x20000538

0800cea4 <CDC_Init_FS>:
 800cea4:	b510      	push	{r4, lr}
 800cea6:	4c06      	ldr	r4, [pc, #24]	; (800cec0 <CDC_Init_FS+0x1c>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	4620      	mov	r0, r4
 800ceac:	4905      	ldr	r1, [pc, #20]	; (800cec4 <CDC_Init_FS+0x20>)
 800ceae:	f7ff fb0b 	bl	800c4c8 <USBD_CDC_SetTxBuffer>
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	4904      	ldr	r1, [pc, #16]	; (800cec8 <CDC_Init_FS+0x24>)
 800ceb6:	f7ff fb11 	bl	800c4dc <USBD_CDC_SetRxBuffer>
 800ceba:	2000      	movs	r0, #0
 800cebc:	bd10      	pop	{r4, pc}
 800cebe:	bf00      	nop
 800cec0:	20000a90 	.word	0x20000a90
 800cec4:	20001114 	.word	0x20001114
 800cec8:	20000d2c 	.word	0x20000d2c

0800cecc <CDC_Transmit_FS>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	4c09      	ldr	r4, [pc, #36]	; (800cef4 <CDC_Transmit_FS+0x28>)
 800ced0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800ced4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ced8:	b10b      	cbz	r3, 800cede <CDC_Transmit_FS+0x12>
 800ceda:	2001      	movs	r0, #1
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	460a      	mov	r2, r1
 800cee0:	4601      	mov	r1, r0
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff faf0 	bl	800c4c8 <USBD_CDC_SetTxBuffer>
 800cee8:	4620      	mov	r0, r4
 800ceea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceee:	f7ff bafd 	b.w	800c4ec <USBD_CDC_TransmitPacket>
 800cef2:	bf00      	nop
 800cef4:	20000a90 	.word	0x20000a90

0800cef8 <USBD_FS_DeviceDescriptor>:
 800cef8:	2312      	movs	r3, #18
 800cefa:	4801      	ldr	r0, [pc, #4]	; (800cf00 <USBD_FS_DeviceDescriptor+0x8>)
 800cefc:	800b      	strh	r3, [r1, #0]
 800cefe:	4770      	bx	lr
 800cf00:	20000168 	.word	0x20000168

0800cf04 <USBD_FS_LangIDStrDescriptor>:
 800cf04:	2304      	movs	r3, #4
 800cf06:	4801      	ldr	r0, [pc, #4]	; (800cf0c <USBD_FS_LangIDStrDescriptor+0x8>)
 800cf08:	800b      	strh	r3, [r1, #0]
 800cf0a:	4770      	bx	lr
 800cf0c:	2000017c 	.word	0x2000017c

0800cf10 <USBD_FS_ManufacturerStrDescriptor>:
 800cf10:	b510      	push	{r4, lr}
 800cf12:	4c04      	ldr	r4, [pc, #16]	; (800cf24 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800cf14:	460a      	mov	r2, r1
 800cf16:	4804      	ldr	r0, [pc, #16]	; (800cf28 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cf18:	4621      	mov	r1, r4
 800cf1a:	f7ff fedd 	bl	800ccd8 <USBD_GetString>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	bf00      	nop
 800cf24:	200014fc 	.word	0x200014fc
 800cf28:	08011a54 	.word	0x08011a54

0800cf2c <USBD_FS_ProductStrDescriptor>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	4c04      	ldr	r4, [pc, #16]	; (800cf40 <USBD_FS_ProductStrDescriptor+0x14>)
 800cf30:	460a      	mov	r2, r1
 800cf32:	4804      	ldr	r0, [pc, #16]	; (800cf44 <USBD_FS_ProductStrDescriptor+0x18>)
 800cf34:	4621      	mov	r1, r4
 800cf36:	f7ff fecf 	bl	800ccd8 <USBD_GetString>
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	bd10      	pop	{r4, pc}
 800cf3e:	bf00      	nop
 800cf40:	200014fc 	.word	0x200014fc
 800cf44:	08011a68 	.word	0x08011a68

0800cf48 <USBD_FS_ConfigStrDescriptor>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4c04      	ldr	r4, [pc, #16]	; (800cf5c <USBD_FS_ConfigStrDescriptor+0x14>)
 800cf4c:	460a      	mov	r2, r1
 800cf4e:	4804      	ldr	r0, [pc, #16]	; (800cf60 <USBD_FS_ConfigStrDescriptor+0x18>)
 800cf50:	4621      	mov	r1, r4
 800cf52:	f7ff fec1 	bl	800ccd8 <USBD_GetString>
 800cf56:	4620      	mov	r0, r4
 800cf58:	bd10      	pop	{r4, pc}
 800cf5a:	bf00      	nop
 800cf5c:	200014fc 	.word	0x200014fc
 800cf60:	08011a80 	.word	0x08011a80

0800cf64 <USBD_FS_InterfaceStrDescriptor>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4c04      	ldr	r4, [pc, #16]	; (800cf78 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800cf68:	460a      	mov	r2, r1
 800cf6a:	4804      	ldr	r0, [pc, #16]	; (800cf7c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	f7ff feb3 	bl	800ccd8 <USBD_GetString>
 800cf72:	4620      	mov	r0, r4
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	200014fc 	.word	0x200014fc
 800cf7c:	08011a8c 	.word	0x08011a8c

0800cf80 <USBD_FS_SerialStrDescriptor>:
 800cf80:	f04f 0c1a 	mov.w	ip, #26
 800cf84:	4a42      	ldr	r2, [pc, #264]	; (800d090 <USBD_FS_SerialStrDescriptor+0x110>)
 800cf86:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800cf88:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cf8a:	f8a1 c000 	strh.w	ip, [r1]
 800cf8e:	18c3      	adds	r3, r0, r3
 800cf90:	d101      	bne.n	800cf96 <USBD_FS_SerialStrDescriptor+0x16>
 800cf92:	4840      	ldr	r0, [pc, #256]	; (800d094 <USBD_FS_SerialStrDescriptor+0x114>)
 800cf94:	4770      	bx	lr
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800cf9c:	0f18      	lsrs	r0, r3, #28
 800cf9e:	4a3d      	ldr	r2, [pc, #244]	; (800d094 <USBD_FS_SerialStrDescriptor+0x114>)
 800cfa0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800cfa4:	bf2c      	ite	cs
 800cfa6:	3037      	addcs	r0, #55	; 0x37
 800cfa8:	3030      	addcc	r0, #48	; 0x30
 800cfaa:	7090      	strb	r0, [r2, #2]
 800cfac:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800cfb0:	2809      	cmp	r0, #9
 800cfb2:	bf8c      	ite	hi
 800cfb4:	3037      	addhi	r0, #55	; 0x37
 800cfb6:	3030      	addls	r0, #48	; 0x30
 800cfb8:	7110      	strb	r0, [r2, #4]
 800cfba:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800cfbe:	2809      	cmp	r0, #9
 800cfc0:	bf8c      	ite	hi
 800cfc2:	3037      	addhi	r0, #55	; 0x37
 800cfc4:	3030      	addls	r0, #48	; 0x30
 800cfc6:	7190      	strb	r0, [r2, #6]
 800cfc8:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800cfcc:	2809      	cmp	r0, #9
 800cfce:	bf8c      	ite	hi
 800cfd0:	3037      	addhi	r0, #55	; 0x37
 800cfd2:	3030      	addls	r0, #48	; 0x30
 800cfd4:	7210      	strb	r0, [r2, #8]
 800cfd6:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800cfda:	2809      	cmp	r0, #9
 800cfdc:	bf8c      	ite	hi
 800cfde:	3037      	addhi	r0, #55	; 0x37
 800cfe0:	3030      	addls	r0, #48	; 0x30
 800cfe2:	7290      	strb	r0, [r2, #10]
 800cfe4:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800cfe8:	2809      	cmp	r0, #9
 800cfea:	bf8c      	ite	hi
 800cfec:	3037      	addhi	r0, #55	; 0x37
 800cfee:	3030      	addls	r0, #48	; 0x30
 800cff0:	7310      	strb	r0, [r2, #12]
 800cff2:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800cff6:	2809      	cmp	r0, #9
 800cff8:	bf8c      	ite	hi
 800cffa:	3037      	addhi	r0, #55	; 0x37
 800cffc:	3030      	addls	r0, #48	; 0x30
 800cffe:	f882 c003 	strb.w	ip, [r2, #3]
 800d002:	7390      	strb	r0, [r2, #14]
 800d004:	f04f 0c00 	mov.w	ip, #0
 800d008:	2000      	movs	r0, #0
 800d00a:	f882 c005 	strb.w	ip, [r2, #5]
 800d00e:	73d0      	strb	r0, [r2, #15]
 800d010:	f04f 0c00 	mov.w	ip, #0
 800d014:	2000      	movs	r0, #0
 800d016:	f882 c007 	strb.w	ip, [r2, #7]
 800d01a:	7450      	strb	r0, [r2, #17]
 800d01c:	f04f 0c00 	mov.w	ip, #0
 800d020:	2000      	movs	r0, #0
 800d022:	f882 c009 	strb.w	ip, [r2, #9]
 800d026:	74d0      	strb	r0, [r2, #19]
 800d028:	f04f 0c00 	mov.w	ip, #0
 800d02c:	2000      	movs	r0, #0
 800d02e:	f003 030f 	and.w	r3, r3, #15
 800d032:	2b09      	cmp	r3, #9
 800d034:	bf94      	ite	ls
 800d036:	3330      	addls	r3, #48	; 0x30
 800d038:	3337      	addhi	r3, #55	; 0x37
 800d03a:	7413      	strb	r3, [r2, #16]
 800d03c:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800d040:	ea4f 7311 	mov.w	r3, r1, lsr #28
 800d044:	bf2c      	ite	cs
 800d046:	3337      	addcs	r3, #55	; 0x37
 800d048:	3330      	addcc	r3, #48	; 0x30
 800d04a:	7493      	strb	r3, [r2, #18]
 800d04c:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800d050:	2b09      	cmp	r3, #9
 800d052:	bf8c      	ite	hi
 800d054:	3337      	addhi	r3, #55	; 0x37
 800d056:	3330      	addls	r3, #48	; 0x30
 800d058:	7513      	strb	r3, [r2, #20]
 800d05a:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800d05e:	2b09      	cmp	r3, #9
 800d060:	bf8c      	ite	hi
 800d062:	3337      	addhi	r3, #55	; 0x37
 800d064:	3330      	addls	r3, #48	; 0x30
 800d066:	7593      	strb	r3, [r2, #22]
 800d068:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800d06c:	2b09      	cmp	r3, #9
 800d06e:	bf94      	ite	ls
 800d070:	3330      	addls	r3, #48	; 0x30
 800d072:	3337      	addhi	r3, #55	; 0x37
 800d074:	f882 c00b 	strb.w	ip, [r2, #11]
 800d078:	7550      	strb	r0, [r2, #21]
 800d07a:	f04f 0c00 	mov.w	ip, #0
 800d07e:	2000      	movs	r0, #0
 800d080:	7613      	strb	r3, [r2, #24]
 800d082:	2300      	movs	r3, #0
 800d084:	75d0      	strb	r0, [r2, #23]
 800d086:	f882 c00d 	strb.w	ip, [r2, #13]
 800d08a:	4802      	ldr	r0, [pc, #8]	; (800d094 <USBD_FS_SerialStrDescriptor+0x114>)
 800d08c:	7653      	strb	r3, [r2, #25]
 800d08e:	4770      	bx	lr
 800d090:	1ff80000 	.word	0x1ff80000
 800d094:	20000180 	.word	0x20000180

0800d098 <HAL_PCDEx_SetConnectionState>:
 800d098:	4a04      	ldr	r2, [pc, #16]	; (800d0ac <HAL_PCDEx_SetConnectionState+0x14>)
 800d09a:	2901      	cmp	r1, #1
 800d09c:	6853      	ldr	r3, [r2, #4]
 800d09e:	bf0c      	ite	eq
 800d0a0:	f043 0301 	orreq.w	r3, r3, #1
 800d0a4:	f023 0301 	bicne.w	r3, r3, #1
 800d0a8:	6053      	str	r3, [r2, #4]
 800d0aa:	4770      	bx	lr
 800d0ac:	40010000 	.word	0x40010000

0800d0b0 <HAL_PCD_MspInit>:
 800d0b0:	4b0e      	ldr	r3, [pc, #56]	; (800d0ec <HAL_PCD_MspInit+0x3c>)
 800d0b2:	6802      	ldr	r2, [r0, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d000      	beq.n	800d0ba <HAL_PCD_MspInit+0xa>
 800d0b8:	4770      	bx	lr
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800d0c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d0c2:	b500      	push	{lr}
 800d0c4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800d0c8:	6259      	str	r1, [r3, #36]	; 0x24
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	b083      	sub	sp, #12
 800d0ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0d2:	9301      	str	r3, [sp, #4]
 800d0d4:	2014      	movs	r0, #20
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	9b01      	ldr	r3, [sp, #4]
 800d0da:	f7fb fb85 	bl	80087e8 <HAL_NVIC_SetPriority>
 800d0de:	2014      	movs	r0, #20
 800d0e0:	b003      	add	sp, #12
 800d0e2:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e6:	f7fb bbbd 	b.w	8008864 <HAL_NVIC_EnableIRQ>
 800d0ea:	bf00      	nop
 800d0ec:	40005c00 	.word	0x40005c00

0800d0f0 <HAL_PCD_SetupStageCallback>:
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d0f6:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800d0fa:	f7ff ba63 	b.w	800c5c4 <USBD_LL_SetupStage>
 800d0fe:	bf00      	nop

0800d100 <HAL_PCD_DataOutStageCallback>:
 800d100:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d104:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d108:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800d10c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d110:	f7ff ba88 	b.w	800c624 <USBD_LL_DataOutStage>

0800d114 <HAL_PCD_DataInStageCallback>:
 800d114:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800d118:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d11c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d11e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d122:	f7ff babd 	b.w	800c6a0 <USBD_LL_DataInStage>
 800d126:	bf00      	nop

0800d128 <HAL_PCD_SOFCallback>:
 800d128:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d12c:	f7ff bb5c 	b.w	800c7e8 <USBD_LL_SOF>

0800d130 <HAL_PCD_ResetCallback>:
 800d130:	6883      	ldr	r3, [r0, #8]
 800d132:	b510      	push	{r4, lr}
 800d134:	2b02      	cmp	r3, #2
 800d136:	4604      	mov	r4, r0
 800d138:	d001      	beq.n	800d13e <HAL_PCD_ResetCallback+0xe>
 800d13a:	f7fa fbff 	bl	800793c <Error_Handler>
 800d13e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800d142:	2101      	movs	r1, #1
 800d144:	f7ff fb3a 	bl	800c7bc <USBD_LL_SetSpeed>
 800d148:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800d14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d150:	f7ff bb0c 	b.w	800c76c <USBD_LL_Reset>

0800d154 <HAL_PCD_SuspendCallback>:
 800d154:	b510      	push	{r4, lr}
 800d156:	4604      	mov	r4, r0
 800d158:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d15c:	f7ff fb32 	bl	800c7c4 <USBD_LL_Suspend>
 800d160:	69a3      	ldr	r3, [r4, #24]
 800d162:	b123      	cbz	r3, 800d16e <HAL_PCD_SuspendCallback+0x1a>
 800d164:	4a02      	ldr	r2, [pc, #8]	; (800d170 <HAL_PCD_SuspendCallback+0x1c>)
 800d166:	6913      	ldr	r3, [r2, #16]
 800d168:	f043 0306 	orr.w	r3, r3, #6
 800d16c:	6113      	str	r3, [r2, #16]
 800d16e:	bd10      	pop	{r4, pc}
 800d170:	e000ed00 	.word	0xe000ed00

0800d174 <HAL_PCD_ResumeCallback>:
 800d174:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800d178:	f7ff bb2e 	b.w	800c7d8 <USBD_LL_Resume>

0800d17c <USBD_LL_Init>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	2408      	movs	r4, #8
 800d180:	4b1e      	ldr	r3, [pc, #120]	; (800d1fc <USBD_LL_Init+0x80>)
 800d182:	2200      	movs	r2, #0
 800d184:	605c      	str	r4, [r3, #4]
 800d186:	4604      	mov	r4, r0
 800d188:	2102      	movs	r1, #2
 800d18a:	619a      	str	r2, [r3, #24]
 800d18c:	621a      	str	r2, [r3, #32]
 800d18e:	4a1c      	ldr	r2, [pc, #112]	; (800d200 <USBD_LL_Init+0x84>)
 800d190:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
 800d194:	4618      	mov	r0, r3
 800d196:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800d19a:	6099      	str	r1, [r3, #8]
 800d19c:	6119      	str	r1, [r3, #16]
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	f7fc f9ce 	bl	8009540 <HAL_PCD_Init>
 800d1a4:	bb30      	cbnz	r0, 800d1f4 <USBD_LL_Init+0x78>
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	2318      	movs	r3, #24
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1b0:	f7fd f8c6 	bl	800a340 <HAL_PCDEx_PMAConfig>
 800d1b4:	2358      	movs	r3, #88	; 0x58
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	2180      	movs	r1, #128	; 0x80
 800d1ba:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1be:	f7fd f8bf 	bl	800a340 <HAL_PCDEx_PMAConfig>
 800d1c2:	23c0      	movs	r3, #192	; 0xc0
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2181      	movs	r1, #129	; 0x81
 800d1c8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1cc:	f7fd f8b8 	bl	800a340 <HAL_PCDEx_PMAConfig>
 800d1d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1dc:	f7fd f8b0 	bl	800a340 <HAL_PCDEx_PMAConfig>
 800d1e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	2182      	movs	r1, #130	; 0x82
 800d1e8:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800d1ec:	f7fd f8a8 	bl	800a340 <HAL_PCDEx_PMAConfig>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	bd10      	pop	{r4, pc}
 800d1f4:	f7fa fba2 	bl	800793c <Error_Handler>
 800d1f8:	e7d5      	b.n	800d1a6 <USBD_LL_Init+0x2a>
 800d1fa:	bf00      	nop
 800d1fc:	200016fc 	.word	0x200016fc
 800d200:	40005c00 	.word	0x40005c00

0800d204 <USBD_LL_Start>:
 800d204:	b508      	push	{r3, lr}
 800d206:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d20a:	f7fc f9fb 	bl	8009604 <HAL_PCD_Start>
 800d20e:	2803      	cmp	r0, #3
 800d210:	bf96      	itet	ls
 800d212:	4b02      	ldrls	r3, [pc, #8]	; (800d21c <USBD_LL_Start+0x18>)
 800d214:	2002      	movhi	r0, #2
 800d216:	5c18      	ldrbls	r0, [r3, r0]
 800d218:	bd08      	pop	{r3, pc}
 800d21a:	bf00      	nop
 800d21c:	08011a9c 	.word	0x08011a9c

0800d220 <USBD_LL_OpenEP>:
 800d220:	4694      	mov	ip, r2
 800d222:	b508      	push	{r3, lr}
 800d224:	461a      	mov	r2, r3
 800d226:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d22a:	4663      	mov	r3, ip
 800d22c:	f7fc ff5e 	bl	800a0ec <HAL_PCD_EP_Open>
 800d230:	2803      	cmp	r0, #3
 800d232:	bf96      	itet	ls
 800d234:	4b01      	ldrls	r3, [pc, #4]	; (800d23c <USBD_LL_OpenEP+0x1c>)
 800d236:	2002      	movhi	r0, #2
 800d238:	5c18      	ldrbls	r0, [r3, r0]
 800d23a:	bd08      	pop	{r3, pc}
 800d23c:	08011a9c 	.word	0x08011a9c

0800d240 <USBD_LL_CloseEP>:
 800d240:	b508      	push	{r3, lr}
 800d242:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d246:	f7fc ff8f 	bl	800a168 <HAL_PCD_EP_Close>
 800d24a:	2803      	cmp	r0, #3
 800d24c:	bf96      	itet	ls
 800d24e:	4b02      	ldrls	r3, [pc, #8]	; (800d258 <USBD_LL_CloseEP+0x18>)
 800d250:	2002      	movhi	r0, #2
 800d252:	5c18      	ldrbls	r0, [r3, r0]
 800d254:	bd08      	pop	{r3, pc}
 800d256:	bf00      	nop
 800d258:	08011a9c 	.word	0x08011a9c

0800d25c <USBD_LL_StallEP>:
 800d25c:	b508      	push	{r3, lr}
 800d25e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d262:	f7fc fff9 	bl	800a258 <HAL_PCD_EP_SetStall>
 800d266:	2803      	cmp	r0, #3
 800d268:	bf96      	itet	ls
 800d26a:	4b02      	ldrls	r3, [pc, #8]	; (800d274 <USBD_LL_StallEP+0x18>)
 800d26c:	2002      	movhi	r0, #2
 800d26e:	5c18      	ldrbls	r0, [r3, r0]
 800d270:	bd08      	pop	{r3, pc}
 800d272:	bf00      	nop
 800d274:	08011a9c 	.word	0x08011a9c

0800d278 <USBD_LL_ClearStallEP>:
 800d278:	b508      	push	{r3, lr}
 800d27a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d27e:	f7fd f823 	bl	800a2c8 <HAL_PCD_EP_ClrStall>
 800d282:	2803      	cmp	r0, #3
 800d284:	bf96      	itet	ls
 800d286:	4b02      	ldrls	r3, [pc, #8]	; (800d290 <USBD_LL_ClearStallEP+0x18>)
 800d288:	2002      	movhi	r0, #2
 800d28a:	5c18      	ldrbls	r0, [r3, r0]
 800d28c:	bd08      	pop	{r3, pc}
 800d28e:	bf00      	nop
 800d290:	08011a9c 	.word	0x08011a9c

0800d294 <USBD_LL_IsStallEP>:
 800d294:	060a      	lsls	r2, r1, #24
 800d296:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800d29a:	d406      	bmi.n	800d2aa <USBD_LL_IsStallEP+0x16>
 800d29c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d2a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d2a4:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
 800d2a8:	4770      	bx	lr
 800d2aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d2ae:	3101      	adds	r1, #1
 800d2b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d2b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d2b8:	7888      	ldrb	r0, [r1, #2]
 800d2ba:	4770      	bx	lr

0800d2bc <USBD_LL_SetUSBAddress>:
 800d2bc:	b508      	push	{r3, lr}
 800d2be:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2c2:	f7fc fefd 	bl	800a0c0 <HAL_PCD_SetAddress>
 800d2c6:	2803      	cmp	r0, #3
 800d2c8:	bf96      	itet	ls
 800d2ca:	4b02      	ldrls	r3, [pc, #8]	; (800d2d4 <USBD_LL_SetUSBAddress+0x18>)
 800d2cc:	2002      	movhi	r0, #2
 800d2ce:	5c18      	ldrbls	r0, [r3, r0]
 800d2d0:	bd08      	pop	{r3, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08011a9c 	.word	0x08011a9c

0800d2d8 <USBD_LL_Transmit>:
 800d2d8:	b508      	push	{r3, lr}
 800d2da:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2de:	f7fc ff97 	bl	800a210 <HAL_PCD_EP_Transmit>
 800d2e2:	2803      	cmp	r0, #3
 800d2e4:	bf96      	itet	ls
 800d2e6:	4b02      	ldrls	r3, [pc, #8]	; (800d2f0 <USBD_LL_Transmit+0x18>)
 800d2e8:	2002      	movhi	r0, #2
 800d2ea:	5c18      	ldrbls	r0, [r3, r0]
 800d2ec:	bd08      	pop	{r3, pc}
 800d2ee:	bf00      	nop
 800d2f0:	08011a9c 	.word	0x08011a9c

0800d2f4 <USBD_LL_PrepareReceive>:
 800d2f4:	b508      	push	{r3, lr}
 800d2f6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d2fa:	f7fc ff67 	bl	800a1cc <HAL_PCD_EP_Receive>
 800d2fe:	2803      	cmp	r0, #3
 800d300:	bf96      	itet	ls
 800d302:	4b02      	ldrls	r3, [pc, #8]	; (800d30c <USBD_LL_PrepareReceive+0x18>)
 800d304:	2002      	movhi	r0, #2
 800d306:	5c18      	ldrbls	r0, [r3, r0]
 800d308:	bd08      	pop	{r3, pc}
 800d30a:	bf00      	nop
 800d30c:	08011a9c 	.word	0x08011a9c

0800d310 <USBD_LL_GetRxDataSize>:
 800d310:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d314:	f7fc bf72 	b.w	800a1fc <HAL_PCD_EP_GetRxCount>

0800d318 <USBD_static_malloc>:
 800d318:	4800      	ldr	r0, [pc, #0]	; (800d31c <USBD_static_malloc+0x4>)
 800d31a:	4770      	bx	lr
 800d31c:	200019e8 	.word	0x200019e8

0800d320 <USBD_static_free>:
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop

0800d324 <atof>:
 800d324:	2100      	movs	r1, #0
 800d326:	f001 bae7 	b.w	800e8f8 <strtod>
	...

0800d32c <__errno>:
 800d32c:	4b01      	ldr	r3, [pc, #4]	; (800d334 <__errno+0x8>)
 800d32e:	6818      	ldr	r0, [r3, #0]
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	2000019c 	.word	0x2000019c

0800d338 <__libc_init_array>:
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	2600      	movs	r6, #0
 800d33c:	4d0c      	ldr	r5, [pc, #48]	; (800d370 <__libc_init_array+0x38>)
 800d33e:	4c0d      	ldr	r4, [pc, #52]	; (800d374 <__libc_init_array+0x3c>)
 800d340:	1b64      	subs	r4, r4, r5
 800d342:	10a4      	asrs	r4, r4, #2
 800d344:	42a6      	cmp	r6, r4
 800d346:	d109      	bne.n	800d35c <__libc_init_array+0x24>
 800d348:	f004 f9dc 	bl	8011704 <_init>
 800d34c:	2600      	movs	r6, #0
 800d34e:	4d0a      	ldr	r5, [pc, #40]	; (800d378 <__libc_init_array+0x40>)
 800d350:	4c0a      	ldr	r4, [pc, #40]	; (800d37c <__libc_init_array+0x44>)
 800d352:	1b64      	subs	r4, r4, r5
 800d354:	10a4      	asrs	r4, r4, #2
 800d356:	42a6      	cmp	r6, r4
 800d358:	d105      	bne.n	800d366 <__libc_init_array+0x2e>
 800d35a:	bd70      	pop	{r4, r5, r6, pc}
 800d35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d360:	4798      	blx	r3
 800d362:	3601      	adds	r6, #1
 800d364:	e7ee      	b.n	800d344 <__libc_init_array+0xc>
 800d366:	f855 3b04 	ldr.w	r3, [r5], #4
 800d36a:	4798      	blx	r3
 800d36c:	3601      	adds	r6, #1
 800d36e:	e7f2      	b.n	800d356 <__libc_init_array+0x1e>
 800d370:	08011f44 	.word	0x08011f44
 800d374:	08011f44 	.word	0x08011f44
 800d378:	08011f44 	.word	0x08011f44
 800d37c:	08011f48 	.word	0x08011f48

0800d380 <memset>:
 800d380:	4603      	mov	r3, r0
 800d382:	4402      	add	r2, r0
 800d384:	4293      	cmp	r3, r2
 800d386:	d100      	bne.n	800d38a <memset+0xa>
 800d388:	4770      	bx	lr
 800d38a:	f803 1b01 	strb.w	r1, [r3], #1
 800d38e:	e7f9      	b.n	800d384 <memset+0x4>

0800d390 <__cvt>:
 800d390:	2b00      	cmp	r3, #0
 800d392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d396:	461f      	mov	r7, r3
 800d398:	bfbb      	ittet	lt
 800d39a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d39e:	461f      	movlt	r7, r3
 800d3a0:	2300      	movge	r3, #0
 800d3a2:	232d      	movlt	r3, #45	; 0x2d
 800d3a4:	b088      	sub	sp, #32
 800d3a6:	4614      	mov	r4, r2
 800d3a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d3ac:	7013      	strb	r3, [r2, #0]
 800d3ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d3b4:	f023 0820 	bic.w	r8, r3, #32
 800d3b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3bc:	d005      	beq.n	800d3ca <__cvt+0x3a>
 800d3be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d3c2:	d100      	bne.n	800d3c6 <__cvt+0x36>
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	e000      	b.n	800d3cc <__cvt+0x3c>
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	aa07      	add	r2, sp, #28
 800d3ce:	9204      	str	r2, [sp, #16]
 800d3d0:	aa06      	add	r2, sp, #24
 800d3d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d3d6:	e9cd 3500 	strd	r3, r5, [sp]
 800d3da:	4622      	mov	r2, r4
 800d3dc:	463b      	mov	r3, r7
 800d3de:	f001 fb23 	bl	800ea28 <_dtoa_r>
 800d3e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	d102      	bne.n	800d3f0 <__cvt+0x60>
 800d3ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3ec:	07db      	lsls	r3, r3, #31
 800d3ee:	d522      	bpl.n	800d436 <__cvt+0xa6>
 800d3f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3f4:	eb06 0905 	add.w	r9, r6, r5
 800d3f8:	d110      	bne.n	800d41c <__cvt+0x8c>
 800d3fa:	7833      	ldrb	r3, [r6, #0]
 800d3fc:	2b30      	cmp	r3, #48	; 0x30
 800d3fe:	d10a      	bne.n	800d416 <__cvt+0x86>
 800d400:	2200      	movs	r2, #0
 800d402:	2300      	movs	r3, #0
 800d404:	4620      	mov	r0, r4
 800d406:	4639      	mov	r1, r7
 800d408:	f7f3 fae6 	bl	80009d8 <__aeabi_dcmpeq>
 800d40c:	b918      	cbnz	r0, 800d416 <__cvt+0x86>
 800d40e:	f1c5 0501 	rsb	r5, r5, #1
 800d412:	f8ca 5000 	str.w	r5, [sl]
 800d416:	f8da 3000 	ldr.w	r3, [sl]
 800d41a:	4499      	add	r9, r3
 800d41c:	2200      	movs	r2, #0
 800d41e:	2300      	movs	r3, #0
 800d420:	4620      	mov	r0, r4
 800d422:	4639      	mov	r1, r7
 800d424:	f7f3 fad8 	bl	80009d8 <__aeabi_dcmpeq>
 800d428:	b108      	cbz	r0, 800d42e <__cvt+0x9e>
 800d42a:	f8cd 901c 	str.w	r9, [sp, #28]
 800d42e:	2230      	movs	r2, #48	; 0x30
 800d430:	9b07      	ldr	r3, [sp, #28]
 800d432:	454b      	cmp	r3, r9
 800d434:	d307      	bcc.n	800d446 <__cvt+0xb6>
 800d436:	4630      	mov	r0, r6
 800d438:	9b07      	ldr	r3, [sp, #28]
 800d43a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d43c:	1b9b      	subs	r3, r3, r6
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	b008      	add	sp, #32
 800d442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d446:	1c59      	adds	r1, r3, #1
 800d448:	9107      	str	r1, [sp, #28]
 800d44a:	701a      	strb	r2, [r3, #0]
 800d44c:	e7f0      	b.n	800d430 <__cvt+0xa0>

0800d44e <__exponent>:
 800d44e:	4603      	mov	r3, r0
 800d450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d452:	2900      	cmp	r1, #0
 800d454:	f803 2b02 	strb.w	r2, [r3], #2
 800d458:	bfb6      	itet	lt
 800d45a:	222d      	movlt	r2, #45	; 0x2d
 800d45c:	222b      	movge	r2, #43	; 0x2b
 800d45e:	4249      	neglt	r1, r1
 800d460:	2909      	cmp	r1, #9
 800d462:	7042      	strb	r2, [r0, #1]
 800d464:	dd2b      	ble.n	800d4be <__exponent+0x70>
 800d466:	f10d 0407 	add.w	r4, sp, #7
 800d46a:	46a4      	mov	ip, r4
 800d46c:	270a      	movs	r7, #10
 800d46e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d472:	460a      	mov	r2, r1
 800d474:	46a6      	mov	lr, r4
 800d476:	fb07 1516 	mls	r5, r7, r6, r1
 800d47a:	2a63      	cmp	r2, #99	; 0x63
 800d47c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d480:	4631      	mov	r1, r6
 800d482:	f104 34ff 	add.w	r4, r4, #4294967295
 800d486:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d48a:	dcf0      	bgt.n	800d46e <__exponent+0x20>
 800d48c:	3130      	adds	r1, #48	; 0x30
 800d48e:	f1ae 0502 	sub.w	r5, lr, #2
 800d492:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d496:	4629      	mov	r1, r5
 800d498:	1c44      	adds	r4, r0, #1
 800d49a:	4561      	cmp	r1, ip
 800d49c:	d30a      	bcc.n	800d4b4 <__exponent+0x66>
 800d49e:	f10d 0209 	add.w	r2, sp, #9
 800d4a2:	eba2 020e 	sub.w	r2, r2, lr
 800d4a6:	4565      	cmp	r5, ip
 800d4a8:	bf88      	it	hi
 800d4aa:	2200      	movhi	r2, #0
 800d4ac:	4413      	add	r3, r2
 800d4ae:	1a18      	subs	r0, r3, r0
 800d4b0:	b003      	add	sp, #12
 800d4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d4bc:	e7ed      	b.n	800d49a <__exponent+0x4c>
 800d4be:	2330      	movs	r3, #48	; 0x30
 800d4c0:	3130      	adds	r1, #48	; 0x30
 800d4c2:	7083      	strb	r3, [r0, #2]
 800d4c4:	70c1      	strb	r1, [r0, #3]
 800d4c6:	1d03      	adds	r3, r0, #4
 800d4c8:	e7f1      	b.n	800d4ae <__exponent+0x60>
	...

0800d4cc <_printf_float>:
 800d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	b091      	sub	sp, #68	; 0x44
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d4d8:	4616      	mov	r6, r2
 800d4da:	461f      	mov	r7, r3
 800d4dc:	4605      	mov	r5, r0
 800d4de:	f002 fbf7 	bl	800fcd0 <_localeconv_r>
 800d4e2:	6803      	ldr	r3, [r0, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e8:	f7f2 fe4a 	bl	8000180 <strlen>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	930e      	str	r3, [sp, #56]	; 0x38
 800d4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d4f4:	900a      	str	r0, [sp, #40]	; 0x28
 800d4f6:	3307      	adds	r3, #7
 800d4f8:	f023 0307 	bic.w	r3, r3, #7
 800d4fc:	f103 0208 	add.w	r2, r3, #8
 800d500:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d504:	f8d4 b000 	ldr.w	fp, [r4]
 800d508:	f8c8 2000 	str.w	r2, [r8]
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d514:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d518:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d51c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d51e:	f04f 32ff 	mov.w	r2, #4294967295
 800d522:	4640      	mov	r0, r8
 800d524:	4b9c      	ldr	r3, [pc, #624]	; (800d798 <_printf_float+0x2cc>)
 800d526:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d528:	f7f3 fa88 	bl	8000a3c <__aeabi_dcmpun>
 800d52c:	bb70      	cbnz	r0, 800d58c <_printf_float+0xc0>
 800d52e:	f04f 32ff 	mov.w	r2, #4294967295
 800d532:	4640      	mov	r0, r8
 800d534:	4b98      	ldr	r3, [pc, #608]	; (800d798 <_printf_float+0x2cc>)
 800d536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d538:	f7f3 fa62 	bl	8000a00 <__aeabi_dcmple>
 800d53c:	bb30      	cbnz	r0, 800d58c <_printf_float+0xc0>
 800d53e:	2200      	movs	r2, #0
 800d540:	2300      	movs	r3, #0
 800d542:	4640      	mov	r0, r8
 800d544:	4651      	mov	r1, sl
 800d546:	f7f3 fa51 	bl	80009ec <__aeabi_dcmplt>
 800d54a:	b110      	cbz	r0, 800d552 <_printf_float+0x86>
 800d54c:	232d      	movs	r3, #45	; 0x2d
 800d54e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d552:	4b92      	ldr	r3, [pc, #584]	; (800d79c <_printf_float+0x2d0>)
 800d554:	4892      	ldr	r0, [pc, #584]	; (800d7a0 <_printf_float+0x2d4>)
 800d556:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d55a:	bf94      	ite	ls
 800d55c:	4698      	movls	r8, r3
 800d55e:	4680      	movhi	r8, r0
 800d560:	2303      	movs	r3, #3
 800d562:	f04f 0a00 	mov.w	sl, #0
 800d566:	6123      	str	r3, [r4, #16]
 800d568:	f02b 0304 	bic.w	r3, fp, #4
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	4633      	mov	r3, r6
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	9700      	str	r7, [sp, #0]
 800d576:	aa0f      	add	r2, sp, #60	; 0x3c
 800d578:	f000 f9d4 	bl	800d924 <_printf_common>
 800d57c:	3001      	adds	r0, #1
 800d57e:	f040 8090 	bne.w	800d6a2 <_printf_float+0x1d6>
 800d582:	f04f 30ff 	mov.w	r0, #4294967295
 800d586:	b011      	add	sp, #68	; 0x44
 800d588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58c:	4642      	mov	r2, r8
 800d58e:	4653      	mov	r3, sl
 800d590:	4640      	mov	r0, r8
 800d592:	4651      	mov	r1, sl
 800d594:	f7f3 fa52 	bl	8000a3c <__aeabi_dcmpun>
 800d598:	b148      	cbz	r0, 800d5ae <_printf_float+0xe2>
 800d59a:	f1ba 0f00 	cmp.w	sl, #0
 800d59e:	bfb8      	it	lt
 800d5a0:	232d      	movlt	r3, #45	; 0x2d
 800d5a2:	4880      	ldr	r0, [pc, #512]	; (800d7a4 <_printf_float+0x2d8>)
 800d5a4:	bfb8      	it	lt
 800d5a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d5aa:	4b7f      	ldr	r3, [pc, #508]	; (800d7a8 <_printf_float+0x2dc>)
 800d5ac:	e7d3      	b.n	800d556 <_printf_float+0x8a>
 800d5ae:	6863      	ldr	r3, [r4, #4]
 800d5b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d5b4:	1c5a      	adds	r2, r3, #1
 800d5b6:	d142      	bne.n	800d63e <_printf_float+0x172>
 800d5b8:	2306      	movs	r3, #6
 800d5ba:	6063      	str	r3, [r4, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	9206      	str	r2, [sp, #24]
 800d5c0:	aa0e      	add	r2, sp, #56	; 0x38
 800d5c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d5c6:	aa0d      	add	r2, sp, #52	; 0x34
 800d5c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d5cc:	9203      	str	r2, [sp, #12]
 800d5ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d5d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	6863      	ldr	r3, [r4, #4]
 800d5da:	4642      	mov	r2, r8
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	4628      	mov	r0, r5
 800d5e0:	4653      	mov	r3, sl
 800d5e2:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5e4:	f7ff fed4 	bl	800d390 <__cvt>
 800d5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5ea:	4680      	mov	r8, r0
 800d5ec:	2947      	cmp	r1, #71	; 0x47
 800d5ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d5f0:	d108      	bne.n	800d604 <_printf_float+0x138>
 800d5f2:	1cc8      	adds	r0, r1, #3
 800d5f4:	db02      	blt.n	800d5fc <_printf_float+0x130>
 800d5f6:	6863      	ldr	r3, [r4, #4]
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	dd40      	ble.n	800d67e <_printf_float+0x1b2>
 800d5fc:	f1a9 0902 	sub.w	r9, r9, #2
 800d600:	fa5f f989 	uxtb.w	r9, r9
 800d604:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d608:	d81f      	bhi.n	800d64a <_printf_float+0x17e>
 800d60a:	464a      	mov	r2, r9
 800d60c:	3901      	subs	r1, #1
 800d60e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d612:	910d      	str	r1, [sp, #52]	; 0x34
 800d614:	f7ff ff1b 	bl	800d44e <__exponent>
 800d618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d61a:	4682      	mov	sl, r0
 800d61c:	1813      	adds	r3, r2, r0
 800d61e:	2a01      	cmp	r2, #1
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	dc02      	bgt.n	800d62a <_printf_float+0x15e>
 800d624:	6822      	ldr	r2, [r4, #0]
 800d626:	07d2      	lsls	r2, r2, #31
 800d628:	d501      	bpl.n	800d62e <_printf_float+0x162>
 800d62a:	3301      	adds	r3, #1
 800d62c:	6123      	str	r3, [r4, #16]
 800d62e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d632:	2b00      	cmp	r3, #0
 800d634:	d09b      	beq.n	800d56e <_printf_float+0xa2>
 800d636:	232d      	movs	r3, #45	; 0x2d
 800d638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d63c:	e797      	b.n	800d56e <_printf_float+0xa2>
 800d63e:	2947      	cmp	r1, #71	; 0x47
 800d640:	d1bc      	bne.n	800d5bc <_printf_float+0xf0>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1ba      	bne.n	800d5bc <_printf_float+0xf0>
 800d646:	2301      	movs	r3, #1
 800d648:	e7b7      	b.n	800d5ba <_printf_float+0xee>
 800d64a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d64e:	d118      	bne.n	800d682 <_printf_float+0x1b6>
 800d650:	2900      	cmp	r1, #0
 800d652:	6863      	ldr	r3, [r4, #4]
 800d654:	dd0b      	ble.n	800d66e <_printf_float+0x1a2>
 800d656:	6121      	str	r1, [r4, #16]
 800d658:	b913      	cbnz	r3, 800d660 <_printf_float+0x194>
 800d65a:	6822      	ldr	r2, [r4, #0]
 800d65c:	07d0      	lsls	r0, r2, #31
 800d65e:	d502      	bpl.n	800d666 <_printf_float+0x19a>
 800d660:	3301      	adds	r3, #1
 800d662:	440b      	add	r3, r1
 800d664:	6123      	str	r3, [r4, #16]
 800d666:	f04f 0a00 	mov.w	sl, #0
 800d66a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d66c:	e7df      	b.n	800d62e <_printf_float+0x162>
 800d66e:	b913      	cbnz	r3, 800d676 <_printf_float+0x1aa>
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	07d2      	lsls	r2, r2, #31
 800d674:	d501      	bpl.n	800d67a <_printf_float+0x1ae>
 800d676:	3302      	adds	r3, #2
 800d678:	e7f4      	b.n	800d664 <_printf_float+0x198>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e7f2      	b.n	800d664 <_printf_float+0x198>
 800d67e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d684:	4299      	cmp	r1, r3
 800d686:	db05      	blt.n	800d694 <_printf_float+0x1c8>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	6121      	str	r1, [r4, #16]
 800d68c:	07d8      	lsls	r0, r3, #31
 800d68e:	d5ea      	bpl.n	800d666 <_printf_float+0x19a>
 800d690:	1c4b      	adds	r3, r1, #1
 800d692:	e7e7      	b.n	800d664 <_printf_float+0x198>
 800d694:	2900      	cmp	r1, #0
 800d696:	bfcc      	ite	gt
 800d698:	2201      	movgt	r2, #1
 800d69a:	f1c1 0202 	rsble	r2, r1, #2
 800d69e:	4413      	add	r3, r2
 800d6a0:	e7e0      	b.n	800d664 <_printf_float+0x198>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	055a      	lsls	r2, r3, #21
 800d6a6:	d407      	bmi.n	800d6b8 <_printf_float+0x1ec>
 800d6a8:	6923      	ldr	r3, [r4, #16]
 800d6aa:	4642      	mov	r2, r8
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	47b8      	blx	r7
 800d6b2:	3001      	adds	r0, #1
 800d6b4:	d12b      	bne.n	800d70e <_printf_float+0x242>
 800d6b6:	e764      	b.n	800d582 <_printf_float+0xb6>
 800d6b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d6bc:	f240 80dd 	bls.w	800d87a <_printf_float+0x3ae>
 800d6c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f7f3 f986 	bl	80009d8 <__aeabi_dcmpeq>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d033      	beq.n	800d738 <_printf_float+0x26c>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	4a35      	ldr	r2, [pc, #212]	; (800d7ac <_printf_float+0x2e0>)
 800d6d8:	47b8      	blx	r7
 800d6da:	3001      	adds	r0, #1
 800d6dc:	f43f af51 	beq.w	800d582 <_printf_float+0xb6>
 800d6e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	db02      	blt.n	800d6ee <_printf_float+0x222>
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	07d8      	lsls	r0, r3, #31
 800d6ec:	d50f      	bpl.n	800d70e <_printf_float+0x242>
 800d6ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	47b8      	blx	r7
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	f43f af42 	beq.w	800d582 <_printf_float+0xb6>
 800d6fe:	f04f 0800 	mov.w	r8, #0
 800d702:	f104 091a 	add.w	r9, r4, #26
 800d706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d708:	3b01      	subs	r3, #1
 800d70a:	4543      	cmp	r3, r8
 800d70c:	dc09      	bgt.n	800d722 <_printf_float+0x256>
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	079b      	lsls	r3, r3, #30
 800d712:	f100 8102 	bmi.w	800d91a <_printf_float+0x44e>
 800d716:	68e0      	ldr	r0, [r4, #12]
 800d718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d71a:	4298      	cmp	r0, r3
 800d71c:	bfb8      	it	lt
 800d71e:	4618      	movlt	r0, r3
 800d720:	e731      	b.n	800d586 <_printf_float+0xba>
 800d722:	2301      	movs	r3, #1
 800d724:	464a      	mov	r2, r9
 800d726:	4631      	mov	r1, r6
 800d728:	4628      	mov	r0, r5
 800d72a:	47b8      	blx	r7
 800d72c:	3001      	adds	r0, #1
 800d72e:	f43f af28 	beq.w	800d582 <_printf_float+0xb6>
 800d732:	f108 0801 	add.w	r8, r8, #1
 800d736:	e7e6      	b.n	800d706 <_printf_float+0x23a>
 800d738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	dc38      	bgt.n	800d7b0 <_printf_float+0x2e4>
 800d73e:	2301      	movs	r3, #1
 800d740:	4631      	mov	r1, r6
 800d742:	4628      	mov	r0, r5
 800d744:	4a19      	ldr	r2, [pc, #100]	; (800d7ac <_printf_float+0x2e0>)
 800d746:	47b8      	blx	r7
 800d748:	3001      	adds	r0, #1
 800d74a:	f43f af1a 	beq.w	800d582 <_printf_float+0xb6>
 800d74e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d752:	4313      	orrs	r3, r2
 800d754:	d102      	bne.n	800d75c <_printf_float+0x290>
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	07d9      	lsls	r1, r3, #31
 800d75a:	d5d8      	bpl.n	800d70e <_printf_float+0x242>
 800d75c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d760:	4631      	mov	r1, r6
 800d762:	4628      	mov	r0, r5
 800d764:	47b8      	blx	r7
 800d766:	3001      	adds	r0, #1
 800d768:	f43f af0b 	beq.w	800d582 <_printf_float+0xb6>
 800d76c:	f04f 0900 	mov.w	r9, #0
 800d770:	f104 0a1a 	add.w	sl, r4, #26
 800d774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d776:	425b      	negs	r3, r3
 800d778:	454b      	cmp	r3, r9
 800d77a:	dc01      	bgt.n	800d780 <_printf_float+0x2b4>
 800d77c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d77e:	e794      	b.n	800d6aa <_printf_float+0x1de>
 800d780:	2301      	movs	r3, #1
 800d782:	4652      	mov	r2, sl
 800d784:	4631      	mov	r1, r6
 800d786:	4628      	mov	r0, r5
 800d788:	47b8      	blx	r7
 800d78a:	3001      	adds	r0, #1
 800d78c:	f43f aef9 	beq.w	800d582 <_printf_float+0xb6>
 800d790:	f109 0901 	add.w	r9, r9, #1
 800d794:	e7ee      	b.n	800d774 <_printf_float+0x2a8>
 800d796:	bf00      	nop
 800d798:	7fefffff 	.word	0x7fefffff
 800d79c:	08011aa4 	.word	0x08011aa4
 800d7a0:	08011aa8 	.word	0x08011aa8
 800d7a4:	08011ab0 	.word	0x08011ab0
 800d7a8:	08011aac 	.word	0x08011aac
 800d7ac:	08011ab4 	.word	0x08011ab4
 800d7b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	bfa8      	it	ge
 800d7b8:	461a      	movge	r2, r3
 800d7ba:	2a00      	cmp	r2, #0
 800d7bc:	4691      	mov	r9, r2
 800d7be:	dc37      	bgt.n	800d830 <_printf_float+0x364>
 800d7c0:	f04f 0b00 	mov.w	fp, #0
 800d7c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7c8:	f104 021a 	add.w	r2, r4, #26
 800d7cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d7d0:	ebaa 0309 	sub.w	r3, sl, r9
 800d7d4:	455b      	cmp	r3, fp
 800d7d6:	dc33      	bgt.n	800d840 <_printf_float+0x374>
 800d7d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	db3b      	blt.n	800d858 <_printf_float+0x38c>
 800d7e0:	6823      	ldr	r3, [r4, #0]
 800d7e2:	07da      	lsls	r2, r3, #31
 800d7e4:	d438      	bmi.n	800d858 <_printf_float+0x38c>
 800d7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7ea:	eba3 020a 	sub.w	r2, r3, sl
 800d7ee:	eba3 0901 	sub.w	r9, r3, r1
 800d7f2:	4591      	cmp	r9, r2
 800d7f4:	bfa8      	it	ge
 800d7f6:	4691      	movge	r9, r2
 800d7f8:	f1b9 0f00 	cmp.w	r9, #0
 800d7fc:	dc34      	bgt.n	800d868 <_printf_float+0x39c>
 800d7fe:	f04f 0800 	mov.w	r8, #0
 800d802:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d806:	f104 0a1a 	add.w	sl, r4, #26
 800d80a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d80e:	1a9b      	subs	r3, r3, r2
 800d810:	eba3 0309 	sub.w	r3, r3, r9
 800d814:	4543      	cmp	r3, r8
 800d816:	f77f af7a 	ble.w	800d70e <_printf_float+0x242>
 800d81a:	2301      	movs	r3, #1
 800d81c:	4652      	mov	r2, sl
 800d81e:	4631      	mov	r1, r6
 800d820:	4628      	mov	r0, r5
 800d822:	47b8      	blx	r7
 800d824:	3001      	adds	r0, #1
 800d826:	f43f aeac 	beq.w	800d582 <_printf_float+0xb6>
 800d82a:	f108 0801 	add.w	r8, r8, #1
 800d82e:	e7ec      	b.n	800d80a <_printf_float+0x33e>
 800d830:	4613      	mov	r3, r2
 800d832:	4631      	mov	r1, r6
 800d834:	4642      	mov	r2, r8
 800d836:	4628      	mov	r0, r5
 800d838:	47b8      	blx	r7
 800d83a:	3001      	adds	r0, #1
 800d83c:	d1c0      	bne.n	800d7c0 <_printf_float+0x2f4>
 800d83e:	e6a0      	b.n	800d582 <_printf_float+0xb6>
 800d840:	2301      	movs	r3, #1
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	920b      	str	r2, [sp, #44]	; 0x2c
 800d848:	47b8      	blx	r7
 800d84a:	3001      	adds	r0, #1
 800d84c:	f43f ae99 	beq.w	800d582 <_printf_float+0xb6>
 800d850:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d852:	f10b 0b01 	add.w	fp, fp, #1
 800d856:	e7b9      	b.n	800d7cc <_printf_float+0x300>
 800d858:	4631      	mov	r1, r6
 800d85a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d85e:	4628      	mov	r0, r5
 800d860:	47b8      	blx	r7
 800d862:	3001      	adds	r0, #1
 800d864:	d1bf      	bne.n	800d7e6 <_printf_float+0x31a>
 800d866:	e68c      	b.n	800d582 <_printf_float+0xb6>
 800d868:	464b      	mov	r3, r9
 800d86a:	4631      	mov	r1, r6
 800d86c:	4628      	mov	r0, r5
 800d86e:	eb08 020a 	add.w	r2, r8, sl
 800d872:	47b8      	blx	r7
 800d874:	3001      	adds	r0, #1
 800d876:	d1c2      	bne.n	800d7fe <_printf_float+0x332>
 800d878:	e683      	b.n	800d582 <_printf_float+0xb6>
 800d87a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d87c:	2a01      	cmp	r2, #1
 800d87e:	dc01      	bgt.n	800d884 <_printf_float+0x3b8>
 800d880:	07db      	lsls	r3, r3, #31
 800d882:	d537      	bpl.n	800d8f4 <_printf_float+0x428>
 800d884:	2301      	movs	r3, #1
 800d886:	4642      	mov	r2, r8
 800d888:	4631      	mov	r1, r6
 800d88a:	4628      	mov	r0, r5
 800d88c:	47b8      	blx	r7
 800d88e:	3001      	adds	r0, #1
 800d890:	f43f ae77 	beq.w	800d582 <_printf_float+0xb6>
 800d894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d898:	4631      	mov	r1, r6
 800d89a:	4628      	mov	r0, r5
 800d89c:	47b8      	blx	r7
 800d89e:	3001      	adds	r0, #1
 800d8a0:	f43f ae6f 	beq.w	800d582 <_printf_float+0xb6>
 800d8a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f7f3 f894 	bl	80009d8 <__aeabi_dcmpeq>
 800d8b0:	b9d8      	cbnz	r0, 800d8ea <_printf_float+0x41e>
 800d8b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8b4:	f108 0201 	add.w	r2, r8, #1
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	4628      	mov	r0, r5
 800d8be:	47b8      	blx	r7
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d10e      	bne.n	800d8e2 <_printf_float+0x416>
 800d8c4:	e65d      	b.n	800d582 <_printf_float+0xb6>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	464a      	mov	r2, r9
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	47b8      	blx	r7
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	f43f ae56 	beq.w	800d582 <_printf_float+0xb6>
 800d8d6:	f108 0801 	add.w	r8, r8, #1
 800d8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	4543      	cmp	r3, r8
 800d8e0:	dcf1      	bgt.n	800d8c6 <_printf_float+0x3fa>
 800d8e2:	4653      	mov	r3, sl
 800d8e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d8e8:	e6e0      	b.n	800d6ac <_printf_float+0x1e0>
 800d8ea:	f04f 0800 	mov.w	r8, #0
 800d8ee:	f104 091a 	add.w	r9, r4, #26
 800d8f2:	e7f2      	b.n	800d8da <_printf_float+0x40e>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	4642      	mov	r2, r8
 800d8f8:	e7df      	b.n	800d8ba <_printf_float+0x3ee>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	464a      	mov	r2, r9
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f ae3c 	beq.w	800d582 <_printf_float+0xb6>
 800d90a:	f108 0801 	add.w	r8, r8, #1
 800d90e:	68e3      	ldr	r3, [r4, #12]
 800d910:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d912:	1a5b      	subs	r3, r3, r1
 800d914:	4543      	cmp	r3, r8
 800d916:	dcf0      	bgt.n	800d8fa <_printf_float+0x42e>
 800d918:	e6fd      	b.n	800d716 <_printf_float+0x24a>
 800d91a:	f04f 0800 	mov.w	r8, #0
 800d91e:	f104 0919 	add.w	r9, r4, #25
 800d922:	e7f4      	b.n	800d90e <_printf_float+0x442>

0800d924 <_printf_common>:
 800d924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d928:	4616      	mov	r6, r2
 800d92a:	4699      	mov	r9, r3
 800d92c:	688a      	ldr	r2, [r1, #8]
 800d92e:	690b      	ldr	r3, [r1, #16]
 800d930:	4607      	mov	r7, r0
 800d932:	4293      	cmp	r3, r2
 800d934:	bfb8      	it	lt
 800d936:	4613      	movlt	r3, r2
 800d938:	6033      	str	r3, [r6, #0]
 800d93a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d93e:	460c      	mov	r4, r1
 800d940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d944:	b10a      	cbz	r2, 800d94a <_printf_common+0x26>
 800d946:	3301      	adds	r3, #1
 800d948:	6033      	str	r3, [r6, #0]
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	0699      	lsls	r1, r3, #26
 800d94e:	bf42      	ittt	mi
 800d950:	6833      	ldrmi	r3, [r6, #0]
 800d952:	3302      	addmi	r3, #2
 800d954:	6033      	strmi	r3, [r6, #0]
 800d956:	6825      	ldr	r5, [r4, #0]
 800d958:	f015 0506 	ands.w	r5, r5, #6
 800d95c:	d106      	bne.n	800d96c <_printf_common+0x48>
 800d95e:	f104 0a19 	add.w	sl, r4, #25
 800d962:	68e3      	ldr	r3, [r4, #12]
 800d964:	6832      	ldr	r2, [r6, #0]
 800d966:	1a9b      	subs	r3, r3, r2
 800d968:	42ab      	cmp	r3, r5
 800d96a:	dc28      	bgt.n	800d9be <_printf_common+0x9a>
 800d96c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d970:	1e13      	subs	r3, r2, #0
 800d972:	6822      	ldr	r2, [r4, #0]
 800d974:	bf18      	it	ne
 800d976:	2301      	movne	r3, #1
 800d978:	0692      	lsls	r2, r2, #26
 800d97a:	d42d      	bmi.n	800d9d8 <_printf_common+0xb4>
 800d97c:	4649      	mov	r1, r9
 800d97e:	4638      	mov	r0, r7
 800d980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d984:	47c0      	blx	r8
 800d986:	3001      	adds	r0, #1
 800d988:	d020      	beq.n	800d9cc <_printf_common+0xa8>
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	68e5      	ldr	r5, [r4, #12]
 800d98e:	f003 0306 	and.w	r3, r3, #6
 800d992:	2b04      	cmp	r3, #4
 800d994:	bf18      	it	ne
 800d996:	2500      	movne	r5, #0
 800d998:	6832      	ldr	r2, [r6, #0]
 800d99a:	f04f 0600 	mov.w	r6, #0
 800d99e:	68a3      	ldr	r3, [r4, #8]
 800d9a0:	bf08      	it	eq
 800d9a2:	1aad      	subeq	r5, r5, r2
 800d9a4:	6922      	ldr	r2, [r4, #16]
 800d9a6:	bf08      	it	eq
 800d9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	bfc4      	itt	gt
 800d9b0:	1a9b      	subgt	r3, r3, r2
 800d9b2:	18ed      	addgt	r5, r5, r3
 800d9b4:	341a      	adds	r4, #26
 800d9b6:	42b5      	cmp	r5, r6
 800d9b8:	d11a      	bne.n	800d9f0 <_printf_common+0xcc>
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	e008      	b.n	800d9d0 <_printf_common+0xac>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	4652      	mov	r2, sl
 800d9c2:	4649      	mov	r1, r9
 800d9c4:	4638      	mov	r0, r7
 800d9c6:	47c0      	blx	r8
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	d103      	bne.n	800d9d4 <_printf_common+0xb0>
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d4:	3501      	adds	r5, #1
 800d9d6:	e7c4      	b.n	800d962 <_printf_common+0x3e>
 800d9d8:	2030      	movs	r0, #48	; 0x30
 800d9da:	18e1      	adds	r1, r4, r3
 800d9dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9e0:	1c5a      	adds	r2, r3, #1
 800d9e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9e6:	4422      	add	r2, r4
 800d9e8:	3302      	adds	r3, #2
 800d9ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9ee:	e7c5      	b.n	800d97c <_printf_common+0x58>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	4649      	mov	r1, r9
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	47c0      	blx	r8
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	d0e6      	beq.n	800d9cc <_printf_common+0xa8>
 800d9fe:	3601      	adds	r6, #1
 800da00:	e7d9      	b.n	800d9b6 <_printf_common+0x92>
	...

0800da04 <_printf_i>:
 800da04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da08:	7e0f      	ldrb	r7, [r1, #24]
 800da0a:	4691      	mov	r9, r2
 800da0c:	2f78      	cmp	r7, #120	; 0x78
 800da0e:	4680      	mov	r8, r0
 800da10:	460c      	mov	r4, r1
 800da12:	469a      	mov	sl, r3
 800da14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da1a:	d807      	bhi.n	800da2c <_printf_i+0x28>
 800da1c:	2f62      	cmp	r7, #98	; 0x62
 800da1e:	d80a      	bhi.n	800da36 <_printf_i+0x32>
 800da20:	2f00      	cmp	r7, #0
 800da22:	f000 80d9 	beq.w	800dbd8 <_printf_i+0x1d4>
 800da26:	2f58      	cmp	r7, #88	; 0x58
 800da28:	f000 80a4 	beq.w	800db74 <_printf_i+0x170>
 800da2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da34:	e03a      	b.n	800daac <_printf_i+0xa8>
 800da36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da3a:	2b15      	cmp	r3, #21
 800da3c:	d8f6      	bhi.n	800da2c <_printf_i+0x28>
 800da3e:	a101      	add	r1, pc, #4	; (adr r1, 800da44 <_printf_i+0x40>)
 800da40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da44:	0800da9d 	.word	0x0800da9d
 800da48:	0800dab1 	.word	0x0800dab1
 800da4c:	0800da2d 	.word	0x0800da2d
 800da50:	0800da2d 	.word	0x0800da2d
 800da54:	0800da2d 	.word	0x0800da2d
 800da58:	0800da2d 	.word	0x0800da2d
 800da5c:	0800dab1 	.word	0x0800dab1
 800da60:	0800da2d 	.word	0x0800da2d
 800da64:	0800da2d 	.word	0x0800da2d
 800da68:	0800da2d 	.word	0x0800da2d
 800da6c:	0800da2d 	.word	0x0800da2d
 800da70:	0800dbbf 	.word	0x0800dbbf
 800da74:	0800dae1 	.word	0x0800dae1
 800da78:	0800dba1 	.word	0x0800dba1
 800da7c:	0800da2d 	.word	0x0800da2d
 800da80:	0800da2d 	.word	0x0800da2d
 800da84:	0800dbe1 	.word	0x0800dbe1
 800da88:	0800da2d 	.word	0x0800da2d
 800da8c:	0800dae1 	.word	0x0800dae1
 800da90:	0800da2d 	.word	0x0800da2d
 800da94:	0800da2d 	.word	0x0800da2d
 800da98:	0800dba9 	.word	0x0800dba9
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	1d1a      	adds	r2, r3, #4
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	602a      	str	r2, [r5, #0]
 800daa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800daac:	2301      	movs	r3, #1
 800daae:	e0a4      	b.n	800dbfa <_printf_i+0x1f6>
 800dab0:	6820      	ldr	r0, [r4, #0]
 800dab2:	6829      	ldr	r1, [r5, #0]
 800dab4:	0606      	lsls	r6, r0, #24
 800dab6:	f101 0304 	add.w	r3, r1, #4
 800daba:	d50a      	bpl.n	800dad2 <_printf_i+0xce>
 800dabc:	680e      	ldr	r6, [r1, #0]
 800dabe:	602b      	str	r3, [r5, #0]
 800dac0:	2e00      	cmp	r6, #0
 800dac2:	da03      	bge.n	800dacc <_printf_i+0xc8>
 800dac4:	232d      	movs	r3, #45	; 0x2d
 800dac6:	4276      	negs	r6, r6
 800dac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dacc:	230a      	movs	r3, #10
 800dace:	485e      	ldr	r0, [pc, #376]	; (800dc48 <_printf_i+0x244>)
 800dad0:	e019      	b.n	800db06 <_printf_i+0x102>
 800dad2:	680e      	ldr	r6, [r1, #0]
 800dad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	bf18      	it	ne
 800dadc:	b236      	sxthne	r6, r6
 800dade:	e7ef      	b.n	800dac0 <_printf_i+0xbc>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	6820      	ldr	r0, [r4, #0]
 800dae4:	1d19      	adds	r1, r3, #4
 800dae6:	6029      	str	r1, [r5, #0]
 800dae8:	0601      	lsls	r1, r0, #24
 800daea:	d501      	bpl.n	800daf0 <_printf_i+0xec>
 800daec:	681e      	ldr	r6, [r3, #0]
 800daee:	e002      	b.n	800daf6 <_printf_i+0xf2>
 800daf0:	0646      	lsls	r6, r0, #25
 800daf2:	d5fb      	bpl.n	800daec <_printf_i+0xe8>
 800daf4:	881e      	ldrh	r6, [r3, #0]
 800daf6:	2f6f      	cmp	r7, #111	; 0x6f
 800daf8:	bf0c      	ite	eq
 800dafa:	2308      	moveq	r3, #8
 800dafc:	230a      	movne	r3, #10
 800dafe:	4852      	ldr	r0, [pc, #328]	; (800dc48 <_printf_i+0x244>)
 800db00:	2100      	movs	r1, #0
 800db02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db06:	6865      	ldr	r5, [r4, #4]
 800db08:	2d00      	cmp	r5, #0
 800db0a:	bfa8      	it	ge
 800db0c:	6821      	ldrge	r1, [r4, #0]
 800db0e:	60a5      	str	r5, [r4, #8]
 800db10:	bfa4      	itt	ge
 800db12:	f021 0104 	bicge.w	r1, r1, #4
 800db16:	6021      	strge	r1, [r4, #0]
 800db18:	b90e      	cbnz	r6, 800db1e <_printf_i+0x11a>
 800db1a:	2d00      	cmp	r5, #0
 800db1c:	d04d      	beq.n	800dbba <_printf_i+0x1b6>
 800db1e:	4615      	mov	r5, r2
 800db20:	fbb6 f1f3 	udiv	r1, r6, r3
 800db24:	fb03 6711 	mls	r7, r3, r1, r6
 800db28:	5dc7      	ldrb	r7, [r0, r7]
 800db2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db2e:	4637      	mov	r7, r6
 800db30:	42bb      	cmp	r3, r7
 800db32:	460e      	mov	r6, r1
 800db34:	d9f4      	bls.n	800db20 <_printf_i+0x11c>
 800db36:	2b08      	cmp	r3, #8
 800db38:	d10b      	bne.n	800db52 <_printf_i+0x14e>
 800db3a:	6823      	ldr	r3, [r4, #0]
 800db3c:	07de      	lsls	r6, r3, #31
 800db3e:	d508      	bpl.n	800db52 <_printf_i+0x14e>
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	6861      	ldr	r1, [r4, #4]
 800db44:	4299      	cmp	r1, r3
 800db46:	bfde      	ittt	le
 800db48:	2330      	movle	r3, #48	; 0x30
 800db4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db52:	1b52      	subs	r2, r2, r5
 800db54:	6122      	str	r2, [r4, #16]
 800db56:	464b      	mov	r3, r9
 800db58:	4621      	mov	r1, r4
 800db5a:	4640      	mov	r0, r8
 800db5c:	f8cd a000 	str.w	sl, [sp]
 800db60:	aa03      	add	r2, sp, #12
 800db62:	f7ff fedf 	bl	800d924 <_printf_common>
 800db66:	3001      	adds	r0, #1
 800db68:	d14c      	bne.n	800dc04 <_printf_i+0x200>
 800db6a:	f04f 30ff 	mov.w	r0, #4294967295
 800db6e:	b004      	add	sp, #16
 800db70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db74:	4834      	ldr	r0, [pc, #208]	; (800dc48 <_printf_i+0x244>)
 800db76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db7a:	6829      	ldr	r1, [r5, #0]
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	f851 6b04 	ldr.w	r6, [r1], #4
 800db82:	6029      	str	r1, [r5, #0]
 800db84:	061d      	lsls	r5, r3, #24
 800db86:	d514      	bpl.n	800dbb2 <_printf_i+0x1ae>
 800db88:	07df      	lsls	r7, r3, #31
 800db8a:	bf44      	itt	mi
 800db8c:	f043 0320 	orrmi.w	r3, r3, #32
 800db90:	6023      	strmi	r3, [r4, #0]
 800db92:	b91e      	cbnz	r6, 800db9c <_printf_i+0x198>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	f023 0320 	bic.w	r3, r3, #32
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	2310      	movs	r3, #16
 800db9e:	e7af      	b.n	800db00 <_printf_i+0xfc>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	f043 0320 	orr.w	r3, r3, #32
 800dba6:	6023      	str	r3, [r4, #0]
 800dba8:	2378      	movs	r3, #120	; 0x78
 800dbaa:	4828      	ldr	r0, [pc, #160]	; (800dc4c <_printf_i+0x248>)
 800dbac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dbb0:	e7e3      	b.n	800db7a <_printf_i+0x176>
 800dbb2:	0659      	lsls	r1, r3, #25
 800dbb4:	bf48      	it	mi
 800dbb6:	b2b6      	uxthmi	r6, r6
 800dbb8:	e7e6      	b.n	800db88 <_printf_i+0x184>
 800dbba:	4615      	mov	r5, r2
 800dbbc:	e7bb      	b.n	800db36 <_printf_i+0x132>
 800dbbe:	682b      	ldr	r3, [r5, #0]
 800dbc0:	6826      	ldr	r6, [r4, #0]
 800dbc2:	1d18      	adds	r0, r3, #4
 800dbc4:	6961      	ldr	r1, [r4, #20]
 800dbc6:	6028      	str	r0, [r5, #0]
 800dbc8:	0635      	lsls	r5, r6, #24
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	d501      	bpl.n	800dbd2 <_printf_i+0x1ce>
 800dbce:	6019      	str	r1, [r3, #0]
 800dbd0:	e002      	b.n	800dbd8 <_printf_i+0x1d4>
 800dbd2:	0670      	lsls	r0, r6, #25
 800dbd4:	d5fb      	bpl.n	800dbce <_printf_i+0x1ca>
 800dbd6:	8019      	strh	r1, [r3, #0]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	4615      	mov	r5, r2
 800dbdc:	6123      	str	r3, [r4, #16]
 800dbde:	e7ba      	b.n	800db56 <_printf_i+0x152>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	1d1a      	adds	r2, r3, #4
 800dbe6:	602a      	str	r2, [r5, #0]
 800dbe8:	681d      	ldr	r5, [r3, #0]
 800dbea:	6862      	ldr	r2, [r4, #4]
 800dbec:	4628      	mov	r0, r5
 800dbee:	f002 f88d 	bl	800fd0c <memchr>
 800dbf2:	b108      	cbz	r0, 800dbf8 <_printf_i+0x1f4>
 800dbf4:	1b40      	subs	r0, r0, r5
 800dbf6:	6060      	str	r0, [r4, #4]
 800dbf8:	6863      	ldr	r3, [r4, #4]
 800dbfa:	6123      	str	r3, [r4, #16]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc02:	e7a8      	b.n	800db56 <_printf_i+0x152>
 800dc04:	462a      	mov	r2, r5
 800dc06:	4649      	mov	r1, r9
 800dc08:	4640      	mov	r0, r8
 800dc0a:	6923      	ldr	r3, [r4, #16]
 800dc0c:	47d0      	blx	sl
 800dc0e:	3001      	adds	r0, #1
 800dc10:	d0ab      	beq.n	800db6a <_printf_i+0x166>
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	079b      	lsls	r3, r3, #30
 800dc16:	d413      	bmi.n	800dc40 <_printf_i+0x23c>
 800dc18:	68e0      	ldr	r0, [r4, #12]
 800dc1a:	9b03      	ldr	r3, [sp, #12]
 800dc1c:	4298      	cmp	r0, r3
 800dc1e:	bfb8      	it	lt
 800dc20:	4618      	movlt	r0, r3
 800dc22:	e7a4      	b.n	800db6e <_printf_i+0x16a>
 800dc24:	2301      	movs	r3, #1
 800dc26:	4632      	mov	r2, r6
 800dc28:	4649      	mov	r1, r9
 800dc2a:	4640      	mov	r0, r8
 800dc2c:	47d0      	blx	sl
 800dc2e:	3001      	adds	r0, #1
 800dc30:	d09b      	beq.n	800db6a <_printf_i+0x166>
 800dc32:	3501      	adds	r5, #1
 800dc34:	68e3      	ldr	r3, [r4, #12]
 800dc36:	9903      	ldr	r1, [sp, #12]
 800dc38:	1a5b      	subs	r3, r3, r1
 800dc3a:	42ab      	cmp	r3, r5
 800dc3c:	dcf2      	bgt.n	800dc24 <_printf_i+0x220>
 800dc3e:	e7eb      	b.n	800dc18 <_printf_i+0x214>
 800dc40:	2500      	movs	r5, #0
 800dc42:	f104 0619 	add.w	r6, r4, #25
 800dc46:	e7f5      	b.n	800dc34 <_printf_i+0x230>
 800dc48:	08011ab6 	.word	0x08011ab6
 800dc4c:	08011ac7 	.word	0x08011ac7

0800dc50 <sniprintf>:
 800dc50:	b40c      	push	{r2, r3}
 800dc52:	b530      	push	{r4, r5, lr}
 800dc54:	4b17      	ldr	r3, [pc, #92]	; (800dcb4 <sniprintf+0x64>)
 800dc56:	1e0c      	subs	r4, r1, #0
 800dc58:	681d      	ldr	r5, [r3, #0]
 800dc5a:	b09d      	sub	sp, #116	; 0x74
 800dc5c:	da08      	bge.n	800dc70 <sniprintf+0x20>
 800dc5e:	238b      	movs	r3, #139	; 0x8b
 800dc60:	f04f 30ff 	mov.w	r0, #4294967295
 800dc64:	602b      	str	r3, [r5, #0]
 800dc66:	b01d      	add	sp, #116	; 0x74
 800dc68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc6c:	b002      	add	sp, #8
 800dc6e:	4770      	bx	lr
 800dc70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc78:	bf0c      	ite	eq
 800dc7a:	4623      	moveq	r3, r4
 800dc7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	9307      	str	r3, [sp, #28]
 800dc84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc88:	9002      	str	r0, [sp, #8]
 800dc8a:	9006      	str	r0, [sp, #24]
 800dc8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc90:	4628      	mov	r0, r5
 800dc92:	ab21      	add	r3, sp, #132	; 0x84
 800dc94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dc96:	a902      	add	r1, sp, #8
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	f002 fe57 	bl	801094c <_svfiprintf_r>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	bfbc      	itt	lt
 800dca2:	238b      	movlt	r3, #139	; 0x8b
 800dca4:	602b      	strlt	r3, [r5, #0]
 800dca6:	2c00      	cmp	r4, #0
 800dca8:	d0dd      	beq.n	800dc66 <sniprintf+0x16>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	9b02      	ldr	r3, [sp, #8]
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	e7d9      	b.n	800dc66 <sniprintf+0x16>
 800dcb2:	bf00      	nop
 800dcb4:	2000019c 	.word	0x2000019c

0800dcb8 <strncmp>:
 800dcb8:	4603      	mov	r3, r0
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	b172      	cbz	r2, 800dcdc <strncmp+0x24>
 800dcbe:	3901      	subs	r1, #1
 800dcc0:	1884      	adds	r4, r0, r2
 800dcc2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dcc6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dcca:	4290      	cmp	r0, r2
 800dccc:	d101      	bne.n	800dcd2 <strncmp+0x1a>
 800dcce:	42a3      	cmp	r3, r4
 800dcd0:	d101      	bne.n	800dcd6 <strncmp+0x1e>
 800dcd2:	1a80      	subs	r0, r0, r2
 800dcd4:	bd10      	pop	{r4, pc}
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d1f3      	bne.n	800dcc2 <strncmp+0xa>
 800dcda:	e7fa      	b.n	800dcd2 <strncmp+0x1a>
 800dcdc:	4610      	mov	r0, r2
 800dcde:	e7f9      	b.n	800dcd4 <strncmp+0x1c>

0800dce0 <sulp>:
 800dce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce4:	460f      	mov	r7, r1
 800dce6:	4690      	mov	r8, r2
 800dce8:	f002 fb9c 	bl	8010424 <__ulp>
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	f1b8 0f00 	cmp.w	r8, #0
 800dcf4:	d011      	beq.n	800dd1a <sulp+0x3a>
 800dcf6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800dcfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	dd0b      	ble.n	800dd1a <sulp+0x3a>
 800dd02:	2400      	movs	r4, #0
 800dd04:	051b      	lsls	r3, r3, #20
 800dd06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dd0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dd0e:	4622      	mov	r2, r4
 800dd10:	462b      	mov	r3, r5
 800dd12:	f7f2 fbf9 	bl	8000508 <__aeabi_dmul>
 800dd16:	4604      	mov	r4, r0
 800dd18:	460d      	mov	r5, r1
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd22:	0000      	movs	r0, r0
 800dd24:	0000      	movs	r0, r0
	...

0800dd28 <_strtod_l>:
 800dd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd2c:	469b      	mov	fp, r3
 800dd2e:	2300      	movs	r3, #0
 800dd30:	b09f      	sub	sp, #124	; 0x7c
 800dd32:	931a      	str	r3, [sp, #104]	; 0x68
 800dd34:	4b9e      	ldr	r3, [pc, #632]	; (800dfb0 <_strtod_l+0x288>)
 800dd36:	4682      	mov	sl, r0
 800dd38:	681f      	ldr	r7, [r3, #0]
 800dd3a:	460e      	mov	r6, r1
 800dd3c:	4638      	mov	r0, r7
 800dd3e:	9215      	str	r2, [sp, #84]	; 0x54
 800dd40:	f7f2 fa1e 	bl	8000180 <strlen>
 800dd44:	f04f 0800 	mov.w	r8, #0
 800dd48:	4604      	mov	r4, r0
 800dd4a:	f04f 0900 	mov.w	r9, #0
 800dd4e:	9619      	str	r6, [sp, #100]	; 0x64
 800dd50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd52:	781a      	ldrb	r2, [r3, #0]
 800dd54:	2a2b      	cmp	r2, #43	; 0x2b
 800dd56:	d04c      	beq.n	800ddf2 <_strtod_l+0xca>
 800dd58:	d83a      	bhi.n	800ddd0 <_strtod_l+0xa8>
 800dd5a:	2a0d      	cmp	r2, #13
 800dd5c:	d833      	bhi.n	800ddc6 <_strtod_l+0x9e>
 800dd5e:	2a08      	cmp	r2, #8
 800dd60:	d833      	bhi.n	800ddca <_strtod_l+0xa2>
 800dd62:	2a00      	cmp	r2, #0
 800dd64:	d03d      	beq.n	800dde2 <_strtod_l+0xba>
 800dd66:	2300      	movs	r3, #0
 800dd68:	930a      	str	r3, [sp, #40]	; 0x28
 800dd6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800dd6c:	782b      	ldrb	r3, [r5, #0]
 800dd6e:	2b30      	cmp	r3, #48	; 0x30
 800dd70:	f040 80aa 	bne.w	800dec8 <_strtod_l+0x1a0>
 800dd74:	786b      	ldrb	r3, [r5, #1]
 800dd76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd7a:	2b58      	cmp	r3, #88	; 0x58
 800dd7c:	d166      	bne.n	800de4c <_strtod_l+0x124>
 800dd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd80:	4650      	mov	r0, sl
 800dd82:	9301      	str	r3, [sp, #4]
 800dd84:	ab1a      	add	r3, sp, #104	; 0x68
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	4a8a      	ldr	r2, [pc, #552]	; (800dfb4 <_strtod_l+0x28c>)
 800dd8a:	f8cd b008 	str.w	fp, [sp, #8]
 800dd8e:	ab1b      	add	r3, sp, #108	; 0x6c
 800dd90:	a919      	add	r1, sp, #100	; 0x64
 800dd92:	f001 fc9f 	bl	800f6d4 <__gethex>
 800dd96:	f010 0607 	ands.w	r6, r0, #7
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	d005      	beq.n	800ddaa <_strtod_l+0x82>
 800dd9e:	2e06      	cmp	r6, #6
 800dda0:	d129      	bne.n	800ddf6 <_strtod_l+0xce>
 800dda2:	2300      	movs	r3, #0
 800dda4:	3501      	adds	r5, #1
 800dda6:	9519      	str	r5, [sp, #100]	; 0x64
 800dda8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f040 858a 	bne.w	800e8c6 <_strtod_l+0xb9e>
 800ddb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb4:	b1d3      	cbz	r3, 800ddec <_strtod_l+0xc4>
 800ddb6:	4642      	mov	r2, r8
 800ddb8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	b01f      	add	sp, #124	; 0x7c
 800ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc6:	2a20      	cmp	r2, #32
 800ddc8:	d1cd      	bne.n	800dd66 <_strtod_l+0x3e>
 800ddca:	3301      	adds	r3, #1
 800ddcc:	9319      	str	r3, [sp, #100]	; 0x64
 800ddce:	e7bf      	b.n	800dd50 <_strtod_l+0x28>
 800ddd0:	2a2d      	cmp	r2, #45	; 0x2d
 800ddd2:	d1c8      	bne.n	800dd66 <_strtod_l+0x3e>
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	920a      	str	r2, [sp, #40]	; 0x28
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	9219      	str	r2, [sp, #100]	; 0x64
 800dddc:	785b      	ldrb	r3, [r3, #1]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1c3      	bne.n	800dd6a <_strtod_l+0x42>
 800dde2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dde4:	9619      	str	r6, [sp, #100]	; 0x64
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f040 856b 	bne.w	800e8c2 <_strtod_l+0xb9a>
 800ddec:	4642      	mov	r2, r8
 800ddee:	464b      	mov	r3, r9
 800ddf0:	e7e4      	b.n	800ddbc <_strtod_l+0x94>
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	e7ef      	b.n	800ddd6 <_strtod_l+0xae>
 800ddf6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ddf8:	b13a      	cbz	r2, 800de0a <_strtod_l+0xe2>
 800ddfa:	2135      	movs	r1, #53	; 0x35
 800ddfc:	a81c      	add	r0, sp, #112	; 0x70
 800ddfe:	f002 fc15 	bl	801062c <__copybits>
 800de02:	4650      	mov	r0, sl
 800de04:	991a      	ldr	r1, [sp, #104]	; 0x68
 800de06:	f001 ffdd 	bl	800fdc4 <_Bfree>
 800de0a:	3e01      	subs	r6, #1
 800de0c:	2e04      	cmp	r6, #4
 800de0e:	d806      	bhi.n	800de1e <_strtod_l+0xf6>
 800de10:	e8df f006 	tbb	[pc, r6]
 800de14:	1714030a 	.word	0x1714030a
 800de18:	0a          	.byte	0x0a
 800de19:	00          	.byte	0x00
 800de1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800de1e:	0721      	lsls	r1, r4, #28
 800de20:	d5c3      	bpl.n	800ddaa <_strtod_l+0x82>
 800de22:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800de26:	e7c0      	b.n	800ddaa <_strtod_l+0x82>
 800de28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800de2a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800de2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800de32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800de36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800de3a:	e7f0      	b.n	800de1e <_strtod_l+0xf6>
 800de3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dfb8 <_strtod_l+0x290>
 800de40:	e7ed      	b.n	800de1e <_strtod_l+0xf6>
 800de42:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800de46:	f04f 38ff 	mov.w	r8, #4294967295
 800de4a:	e7e8      	b.n	800de1e <_strtod_l+0xf6>
 800de4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	9219      	str	r2, [sp, #100]	; 0x64
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	2b30      	cmp	r3, #48	; 0x30
 800de56:	d0f9      	beq.n	800de4c <_strtod_l+0x124>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0a6      	beq.n	800ddaa <_strtod_l+0x82>
 800de5c:	2301      	movs	r3, #1
 800de5e:	9307      	str	r3, [sp, #28]
 800de60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de62:	220a      	movs	r2, #10
 800de64:	9308      	str	r3, [sp, #32]
 800de66:	2300      	movs	r3, #0
 800de68:	469b      	mov	fp, r3
 800de6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800de6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800de70:	7805      	ldrb	r5, [r0, #0]
 800de72:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800de76:	b2d9      	uxtb	r1, r3
 800de78:	2909      	cmp	r1, #9
 800de7a:	d927      	bls.n	800decc <_strtod_l+0x1a4>
 800de7c:	4622      	mov	r2, r4
 800de7e:	4639      	mov	r1, r7
 800de80:	f7ff ff1a 	bl	800dcb8 <strncmp>
 800de84:	2800      	cmp	r0, #0
 800de86:	d033      	beq.n	800def0 <_strtod_l+0x1c8>
 800de88:	2000      	movs	r0, #0
 800de8a:	462a      	mov	r2, r5
 800de8c:	465c      	mov	r4, fp
 800de8e:	4603      	mov	r3, r0
 800de90:	9004      	str	r0, [sp, #16]
 800de92:	2a65      	cmp	r2, #101	; 0x65
 800de94:	d001      	beq.n	800de9a <_strtod_l+0x172>
 800de96:	2a45      	cmp	r2, #69	; 0x45
 800de98:	d114      	bne.n	800dec4 <_strtod_l+0x19c>
 800de9a:	b91c      	cbnz	r4, 800dea4 <_strtod_l+0x17c>
 800de9c:	9a07      	ldr	r2, [sp, #28]
 800de9e:	4302      	orrs	r2, r0
 800dea0:	d09f      	beq.n	800dde2 <_strtod_l+0xba>
 800dea2:	2400      	movs	r4, #0
 800dea4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dea6:	1c72      	adds	r2, r6, #1
 800dea8:	9219      	str	r2, [sp, #100]	; 0x64
 800deaa:	7872      	ldrb	r2, [r6, #1]
 800deac:	2a2b      	cmp	r2, #43	; 0x2b
 800deae:	d079      	beq.n	800dfa4 <_strtod_l+0x27c>
 800deb0:	2a2d      	cmp	r2, #45	; 0x2d
 800deb2:	f000 8083 	beq.w	800dfbc <_strtod_l+0x294>
 800deb6:	2700      	movs	r7, #0
 800deb8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800debc:	2909      	cmp	r1, #9
 800debe:	f240 8083 	bls.w	800dfc8 <_strtod_l+0x2a0>
 800dec2:	9619      	str	r6, [sp, #100]	; 0x64
 800dec4:	2500      	movs	r5, #0
 800dec6:	e09f      	b.n	800e008 <_strtod_l+0x2e0>
 800dec8:	2300      	movs	r3, #0
 800deca:	e7c8      	b.n	800de5e <_strtod_l+0x136>
 800decc:	f1bb 0f08 	cmp.w	fp, #8
 800ded0:	bfd5      	itete	le
 800ded2:	9906      	ldrle	r1, [sp, #24]
 800ded4:	9905      	ldrgt	r1, [sp, #20]
 800ded6:	fb02 3301 	mlale	r3, r2, r1, r3
 800deda:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dede:	f100 0001 	add.w	r0, r0, #1
 800dee2:	bfd4      	ite	le
 800dee4:	9306      	strle	r3, [sp, #24]
 800dee6:	9305      	strgt	r3, [sp, #20]
 800dee8:	f10b 0b01 	add.w	fp, fp, #1
 800deec:	9019      	str	r0, [sp, #100]	; 0x64
 800deee:	e7be      	b.n	800de6e <_strtod_l+0x146>
 800def0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800def2:	191a      	adds	r2, r3, r4
 800def4:	9219      	str	r2, [sp, #100]	; 0x64
 800def6:	5d1a      	ldrb	r2, [r3, r4]
 800def8:	f1bb 0f00 	cmp.w	fp, #0
 800defc:	d036      	beq.n	800df6c <_strtod_l+0x244>
 800defe:	465c      	mov	r4, fp
 800df00:	9004      	str	r0, [sp, #16]
 800df02:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800df06:	2b09      	cmp	r3, #9
 800df08:	d912      	bls.n	800df30 <_strtod_l+0x208>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e7c1      	b.n	800de92 <_strtod_l+0x16a>
 800df0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df10:	3001      	adds	r0, #1
 800df12:	1c5a      	adds	r2, r3, #1
 800df14:	9219      	str	r2, [sp, #100]	; 0x64
 800df16:	785a      	ldrb	r2, [r3, #1]
 800df18:	2a30      	cmp	r2, #48	; 0x30
 800df1a:	d0f8      	beq.n	800df0e <_strtod_l+0x1e6>
 800df1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800df20:	2b08      	cmp	r3, #8
 800df22:	f200 84d5 	bhi.w	800e8d0 <_strtod_l+0xba8>
 800df26:	9004      	str	r0, [sp, #16]
 800df28:	2000      	movs	r0, #0
 800df2a:	4604      	mov	r4, r0
 800df2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df2e:	9308      	str	r3, [sp, #32]
 800df30:	3a30      	subs	r2, #48	; 0x30
 800df32:	f100 0301 	add.w	r3, r0, #1
 800df36:	d013      	beq.n	800df60 <_strtod_l+0x238>
 800df38:	9904      	ldr	r1, [sp, #16]
 800df3a:	1905      	adds	r5, r0, r4
 800df3c:	4419      	add	r1, r3
 800df3e:	9104      	str	r1, [sp, #16]
 800df40:	4623      	mov	r3, r4
 800df42:	210a      	movs	r1, #10
 800df44:	42ab      	cmp	r3, r5
 800df46:	d113      	bne.n	800df70 <_strtod_l+0x248>
 800df48:	1823      	adds	r3, r4, r0
 800df4a:	2b08      	cmp	r3, #8
 800df4c:	f104 0401 	add.w	r4, r4, #1
 800df50:	4404      	add	r4, r0
 800df52:	dc1b      	bgt.n	800df8c <_strtod_l+0x264>
 800df54:	230a      	movs	r3, #10
 800df56:	9906      	ldr	r1, [sp, #24]
 800df58:	fb03 2301 	mla	r3, r3, r1, r2
 800df5c:	9306      	str	r3, [sp, #24]
 800df5e:	2300      	movs	r3, #0
 800df60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800df62:	4618      	mov	r0, r3
 800df64:	1c51      	adds	r1, r2, #1
 800df66:	9119      	str	r1, [sp, #100]	; 0x64
 800df68:	7852      	ldrb	r2, [r2, #1]
 800df6a:	e7ca      	b.n	800df02 <_strtod_l+0x1da>
 800df6c:	4658      	mov	r0, fp
 800df6e:	e7d3      	b.n	800df18 <_strtod_l+0x1f0>
 800df70:	2b08      	cmp	r3, #8
 800df72:	dc04      	bgt.n	800df7e <_strtod_l+0x256>
 800df74:	9f06      	ldr	r7, [sp, #24]
 800df76:	434f      	muls	r7, r1
 800df78:	9706      	str	r7, [sp, #24]
 800df7a:	3301      	adds	r3, #1
 800df7c:	e7e2      	b.n	800df44 <_strtod_l+0x21c>
 800df7e:	1c5f      	adds	r7, r3, #1
 800df80:	2f10      	cmp	r7, #16
 800df82:	bfde      	ittt	le
 800df84:	9f05      	ldrle	r7, [sp, #20]
 800df86:	434f      	mulle	r7, r1
 800df88:	9705      	strle	r7, [sp, #20]
 800df8a:	e7f6      	b.n	800df7a <_strtod_l+0x252>
 800df8c:	2c10      	cmp	r4, #16
 800df8e:	bfdf      	itttt	le
 800df90:	230a      	movle	r3, #10
 800df92:	9905      	ldrle	r1, [sp, #20]
 800df94:	fb03 2301 	mlale	r3, r3, r1, r2
 800df98:	9305      	strle	r3, [sp, #20]
 800df9a:	e7e0      	b.n	800df5e <_strtod_l+0x236>
 800df9c:	2300      	movs	r3, #0
 800df9e:	9304      	str	r3, [sp, #16]
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e77b      	b.n	800de9c <_strtod_l+0x174>
 800dfa4:	2700      	movs	r7, #0
 800dfa6:	1cb2      	adds	r2, r6, #2
 800dfa8:	9219      	str	r2, [sp, #100]	; 0x64
 800dfaa:	78b2      	ldrb	r2, [r6, #2]
 800dfac:	e784      	b.n	800deb8 <_strtod_l+0x190>
 800dfae:	bf00      	nop
 800dfb0:	08011c20 	.word	0x08011c20
 800dfb4:	08011ad8 	.word	0x08011ad8
 800dfb8:	7ff00000 	.word	0x7ff00000
 800dfbc:	2701      	movs	r7, #1
 800dfbe:	e7f2      	b.n	800dfa6 <_strtod_l+0x27e>
 800dfc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfc2:	1c51      	adds	r1, r2, #1
 800dfc4:	9119      	str	r1, [sp, #100]	; 0x64
 800dfc6:	7852      	ldrb	r2, [r2, #1]
 800dfc8:	2a30      	cmp	r2, #48	; 0x30
 800dfca:	d0f9      	beq.n	800dfc0 <_strtod_l+0x298>
 800dfcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dfd0:	2908      	cmp	r1, #8
 800dfd2:	f63f af77 	bhi.w	800dec4 <_strtod_l+0x19c>
 800dfd6:	f04f 0e0a 	mov.w	lr, #10
 800dfda:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dfde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfe0:	9209      	str	r2, [sp, #36]	; 0x24
 800dfe2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfe4:	1c51      	adds	r1, r2, #1
 800dfe6:	9119      	str	r1, [sp, #100]	; 0x64
 800dfe8:	7852      	ldrb	r2, [r2, #1]
 800dfea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dfee:	2d09      	cmp	r5, #9
 800dff0:	d935      	bls.n	800e05e <_strtod_l+0x336>
 800dff2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dff4:	1b49      	subs	r1, r1, r5
 800dff6:	2908      	cmp	r1, #8
 800dff8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dffc:	dc02      	bgt.n	800e004 <_strtod_l+0x2dc>
 800dffe:	4565      	cmp	r5, ip
 800e000:	bfa8      	it	ge
 800e002:	4665      	movge	r5, ip
 800e004:	b107      	cbz	r7, 800e008 <_strtod_l+0x2e0>
 800e006:	426d      	negs	r5, r5
 800e008:	2c00      	cmp	r4, #0
 800e00a:	d14c      	bne.n	800e0a6 <_strtod_l+0x37e>
 800e00c:	9907      	ldr	r1, [sp, #28]
 800e00e:	4301      	orrs	r1, r0
 800e010:	f47f aecb 	bne.w	800ddaa <_strtod_l+0x82>
 800e014:	2b00      	cmp	r3, #0
 800e016:	f47f aee4 	bne.w	800dde2 <_strtod_l+0xba>
 800e01a:	2a69      	cmp	r2, #105	; 0x69
 800e01c:	d026      	beq.n	800e06c <_strtod_l+0x344>
 800e01e:	dc23      	bgt.n	800e068 <_strtod_l+0x340>
 800e020:	2a49      	cmp	r2, #73	; 0x49
 800e022:	d023      	beq.n	800e06c <_strtod_l+0x344>
 800e024:	2a4e      	cmp	r2, #78	; 0x4e
 800e026:	f47f aedc 	bne.w	800dde2 <_strtod_l+0xba>
 800e02a:	499d      	ldr	r1, [pc, #628]	; (800e2a0 <_strtod_l+0x578>)
 800e02c:	a819      	add	r0, sp, #100	; 0x64
 800e02e:	f001 fd9f 	bl	800fb70 <__match>
 800e032:	2800      	cmp	r0, #0
 800e034:	f43f aed5 	beq.w	800dde2 <_strtod_l+0xba>
 800e038:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b28      	cmp	r3, #40	; 0x28
 800e03e:	d12c      	bne.n	800e09a <_strtod_l+0x372>
 800e040:	4998      	ldr	r1, [pc, #608]	; (800e2a4 <_strtod_l+0x57c>)
 800e042:	aa1c      	add	r2, sp, #112	; 0x70
 800e044:	a819      	add	r0, sp, #100	; 0x64
 800e046:	f001 fda7 	bl	800fb98 <__hexnan>
 800e04a:	2805      	cmp	r0, #5
 800e04c:	d125      	bne.n	800e09a <_strtod_l+0x372>
 800e04e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e050:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800e054:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e058:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e05c:	e6a5      	b.n	800ddaa <_strtod_l+0x82>
 800e05e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800e062:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800e066:	e7bc      	b.n	800dfe2 <_strtod_l+0x2ba>
 800e068:	2a6e      	cmp	r2, #110	; 0x6e
 800e06a:	e7dc      	b.n	800e026 <_strtod_l+0x2fe>
 800e06c:	498e      	ldr	r1, [pc, #568]	; (800e2a8 <_strtod_l+0x580>)
 800e06e:	a819      	add	r0, sp, #100	; 0x64
 800e070:	f001 fd7e 	bl	800fb70 <__match>
 800e074:	2800      	cmp	r0, #0
 800e076:	f43f aeb4 	beq.w	800dde2 <_strtod_l+0xba>
 800e07a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e07c:	498b      	ldr	r1, [pc, #556]	; (800e2ac <_strtod_l+0x584>)
 800e07e:	3b01      	subs	r3, #1
 800e080:	a819      	add	r0, sp, #100	; 0x64
 800e082:	9319      	str	r3, [sp, #100]	; 0x64
 800e084:	f001 fd74 	bl	800fb70 <__match>
 800e088:	b910      	cbnz	r0, 800e090 <_strtod_l+0x368>
 800e08a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e08c:	3301      	adds	r3, #1
 800e08e:	9319      	str	r3, [sp, #100]	; 0x64
 800e090:	f04f 0800 	mov.w	r8, #0
 800e094:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e2b0 <_strtod_l+0x588>
 800e098:	e687      	b.n	800ddaa <_strtod_l+0x82>
 800e09a:	4886      	ldr	r0, [pc, #536]	; (800e2b4 <_strtod_l+0x58c>)
 800e09c:	f002 fd56 	bl	8010b4c <nan>
 800e0a0:	4680      	mov	r8, r0
 800e0a2:	4689      	mov	r9, r1
 800e0a4:	e681      	b.n	800ddaa <_strtod_l+0x82>
 800e0a6:	9b04      	ldr	r3, [sp, #16]
 800e0a8:	f1bb 0f00 	cmp.w	fp, #0
 800e0ac:	bf08      	it	eq
 800e0ae:	46a3      	moveq	fp, r4
 800e0b0:	1aeb      	subs	r3, r5, r3
 800e0b2:	2c10      	cmp	r4, #16
 800e0b4:	9806      	ldr	r0, [sp, #24]
 800e0b6:	4626      	mov	r6, r4
 800e0b8:	9307      	str	r3, [sp, #28]
 800e0ba:	bfa8      	it	ge
 800e0bc:	2610      	movge	r6, #16
 800e0be:	f7f2 f9a9 	bl	8000414 <__aeabi_ui2d>
 800e0c2:	2c09      	cmp	r4, #9
 800e0c4:	4680      	mov	r8, r0
 800e0c6:	4689      	mov	r9, r1
 800e0c8:	dd13      	ble.n	800e0f2 <_strtod_l+0x3ca>
 800e0ca:	4b7b      	ldr	r3, [pc, #492]	; (800e2b8 <_strtod_l+0x590>)
 800e0cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e0d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e0d4:	f7f2 fa18 	bl	8000508 <__aeabi_dmul>
 800e0d8:	4680      	mov	r8, r0
 800e0da:	9805      	ldr	r0, [sp, #20]
 800e0dc:	4689      	mov	r9, r1
 800e0de:	f7f2 f999 	bl	8000414 <__aeabi_ui2d>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4640      	mov	r0, r8
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	f7f2 f857 	bl	800019c <__adddf3>
 800e0ee:	4680      	mov	r8, r0
 800e0f0:	4689      	mov	r9, r1
 800e0f2:	2c0f      	cmp	r4, #15
 800e0f4:	dc36      	bgt.n	800e164 <_strtod_l+0x43c>
 800e0f6:	9b07      	ldr	r3, [sp, #28]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f43f ae56 	beq.w	800ddaa <_strtod_l+0x82>
 800e0fe:	dd22      	ble.n	800e146 <_strtod_l+0x41e>
 800e100:	2b16      	cmp	r3, #22
 800e102:	dc09      	bgt.n	800e118 <_strtod_l+0x3f0>
 800e104:	496c      	ldr	r1, [pc, #432]	; (800e2b8 <_strtod_l+0x590>)
 800e106:	4642      	mov	r2, r8
 800e108:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e10c:	464b      	mov	r3, r9
 800e10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e112:	f7f2 f9f9 	bl	8000508 <__aeabi_dmul>
 800e116:	e7c3      	b.n	800e0a0 <_strtod_l+0x378>
 800e118:	9a07      	ldr	r2, [sp, #28]
 800e11a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e11e:	4293      	cmp	r3, r2
 800e120:	db20      	blt.n	800e164 <_strtod_l+0x43c>
 800e122:	4d65      	ldr	r5, [pc, #404]	; (800e2b8 <_strtod_l+0x590>)
 800e124:	f1c4 040f 	rsb	r4, r4, #15
 800e128:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e12c:	4642      	mov	r2, r8
 800e12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e132:	464b      	mov	r3, r9
 800e134:	f7f2 f9e8 	bl	8000508 <__aeabi_dmul>
 800e138:	9b07      	ldr	r3, [sp, #28]
 800e13a:	1b1c      	subs	r4, r3, r4
 800e13c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e140:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e144:	e7e5      	b.n	800e112 <_strtod_l+0x3ea>
 800e146:	9b07      	ldr	r3, [sp, #28]
 800e148:	3316      	adds	r3, #22
 800e14a:	db0b      	blt.n	800e164 <_strtod_l+0x43c>
 800e14c:	9b04      	ldr	r3, [sp, #16]
 800e14e:	4640      	mov	r0, r8
 800e150:	1b5d      	subs	r5, r3, r5
 800e152:	4b59      	ldr	r3, [pc, #356]	; (800e2b8 <_strtod_l+0x590>)
 800e154:	4649      	mov	r1, r9
 800e156:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e15a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e15e:	f7f2 fafd 	bl	800075c <__aeabi_ddiv>
 800e162:	e79d      	b.n	800e0a0 <_strtod_l+0x378>
 800e164:	9b07      	ldr	r3, [sp, #28]
 800e166:	1ba6      	subs	r6, r4, r6
 800e168:	441e      	add	r6, r3
 800e16a:	2e00      	cmp	r6, #0
 800e16c:	dd74      	ble.n	800e258 <_strtod_l+0x530>
 800e16e:	f016 030f 	ands.w	r3, r6, #15
 800e172:	d00a      	beq.n	800e18a <_strtod_l+0x462>
 800e174:	4950      	ldr	r1, [pc, #320]	; (800e2b8 <_strtod_l+0x590>)
 800e176:	4642      	mov	r2, r8
 800e178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e17c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e180:	464b      	mov	r3, r9
 800e182:	f7f2 f9c1 	bl	8000508 <__aeabi_dmul>
 800e186:	4680      	mov	r8, r0
 800e188:	4689      	mov	r9, r1
 800e18a:	f036 060f 	bics.w	r6, r6, #15
 800e18e:	d052      	beq.n	800e236 <_strtod_l+0x50e>
 800e190:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800e194:	dd27      	ble.n	800e1e6 <_strtod_l+0x4be>
 800e196:	f04f 0b00 	mov.w	fp, #0
 800e19a:	f8cd b010 	str.w	fp, [sp, #16]
 800e19e:	f8cd b020 	str.w	fp, [sp, #32]
 800e1a2:	f8cd b018 	str.w	fp, [sp, #24]
 800e1a6:	2322      	movs	r3, #34	; 0x22
 800e1a8:	f04f 0800 	mov.w	r8, #0
 800e1ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e2b0 <_strtod_l+0x588>
 800e1b0:	f8ca 3000 	str.w	r3, [sl]
 800e1b4:	9b08      	ldr	r3, [sp, #32]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	f43f adf7 	beq.w	800ddaa <_strtod_l+0x82>
 800e1bc:	4650      	mov	r0, sl
 800e1be:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e1c0:	f001 fe00 	bl	800fdc4 <_Bfree>
 800e1c4:	4650      	mov	r0, sl
 800e1c6:	9906      	ldr	r1, [sp, #24]
 800e1c8:	f001 fdfc 	bl	800fdc4 <_Bfree>
 800e1cc:	4650      	mov	r0, sl
 800e1ce:	9904      	ldr	r1, [sp, #16]
 800e1d0:	f001 fdf8 	bl	800fdc4 <_Bfree>
 800e1d4:	4650      	mov	r0, sl
 800e1d6:	9908      	ldr	r1, [sp, #32]
 800e1d8:	f001 fdf4 	bl	800fdc4 <_Bfree>
 800e1dc:	4659      	mov	r1, fp
 800e1de:	4650      	mov	r0, sl
 800e1e0:	f001 fdf0 	bl	800fdc4 <_Bfree>
 800e1e4:	e5e1      	b.n	800ddaa <_strtod_l+0x82>
 800e1e6:	4b35      	ldr	r3, [pc, #212]	; (800e2bc <_strtod_l+0x594>)
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	9305      	str	r3, [sp, #20]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	4649      	mov	r1, r9
 800e1f0:	461f      	mov	r7, r3
 800e1f2:	1136      	asrs	r6, r6, #4
 800e1f4:	2e01      	cmp	r6, #1
 800e1f6:	dc21      	bgt.n	800e23c <_strtod_l+0x514>
 800e1f8:	b10b      	cbz	r3, 800e1fe <_strtod_l+0x4d6>
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	4689      	mov	r9, r1
 800e1fe:	4b2f      	ldr	r3, [pc, #188]	; (800e2bc <_strtod_l+0x594>)
 800e200:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e204:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e208:	4642      	mov	r2, r8
 800e20a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e20e:	464b      	mov	r3, r9
 800e210:	f7f2 f97a 	bl	8000508 <__aeabi_dmul>
 800e214:	4b26      	ldr	r3, [pc, #152]	; (800e2b0 <_strtod_l+0x588>)
 800e216:	460a      	mov	r2, r1
 800e218:	400b      	ands	r3, r1
 800e21a:	4929      	ldr	r1, [pc, #164]	; (800e2c0 <_strtod_l+0x598>)
 800e21c:	4680      	mov	r8, r0
 800e21e:	428b      	cmp	r3, r1
 800e220:	d8b9      	bhi.n	800e196 <_strtod_l+0x46e>
 800e222:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e226:	428b      	cmp	r3, r1
 800e228:	bf86      	itte	hi
 800e22a:	f04f 38ff 	movhi.w	r8, #4294967295
 800e22e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e2c4 <_strtod_l+0x59c>
 800e232:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e236:	2300      	movs	r3, #0
 800e238:	9305      	str	r3, [sp, #20]
 800e23a:	e07f      	b.n	800e33c <_strtod_l+0x614>
 800e23c:	07f2      	lsls	r2, r6, #31
 800e23e:	d505      	bpl.n	800e24c <_strtod_l+0x524>
 800e240:	9b05      	ldr	r3, [sp, #20]
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	f7f2 f95f 	bl	8000508 <__aeabi_dmul>
 800e24a:	2301      	movs	r3, #1
 800e24c:	9a05      	ldr	r2, [sp, #20]
 800e24e:	3701      	adds	r7, #1
 800e250:	3208      	adds	r2, #8
 800e252:	1076      	asrs	r6, r6, #1
 800e254:	9205      	str	r2, [sp, #20]
 800e256:	e7cd      	b.n	800e1f4 <_strtod_l+0x4cc>
 800e258:	d0ed      	beq.n	800e236 <_strtod_l+0x50e>
 800e25a:	4276      	negs	r6, r6
 800e25c:	f016 020f 	ands.w	r2, r6, #15
 800e260:	d00a      	beq.n	800e278 <_strtod_l+0x550>
 800e262:	4b15      	ldr	r3, [pc, #84]	; (800e2b8 <_strtod_l+0x590>)
 800e264:	4640      	mov	r0, r8
 800e266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e26a:	4649      	mov	r1, r9
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f7f2 fa74 	bl	800075c <__aeabi_ddiv>
 800e274:	4680      	mov	r8, r0
 800e276:	4689      	mov	r9, r1
 800e278:	1136      	asrs	r6, r6, #4
 800e27a:	d0dc      	beq.n	800e236 <_strtod_l+0x50e>
 800e27c:	2e1f      	cmp	r6, #31
 800e27e:	dd23      	ble.n	800e2c8 <_strtod_l+0x5a0>
 800e280:	f04f 0b00 	mov.w	fp, #0
 800e284:	f8cd b010 	str.w	fp, [sp, #16]
 800e288:	f8cd b020 	str.w	fp, [sp, #32]
 800e28c:	f8cd b018 	str.w	fp, [sp, #24]
 800e290:	2322      	movs	r3, #34	; 0x22
 800e292:	f04f 0800 	mov.w	r8, #0
 800e296:	f04f 0900 	mov.w	r9, #0
 800e29a:	f8ca 3000 	str.w	r3, [sl]
 800e29e:	e789      	b.n	800e1b4 <_strtod_l+0x48c>
 800e2a0:	08011ab1 	.word	0x08011ab1
 800e2a4:	08011aec 	.word	0x08011aec
 800e2a8:	08011aa9 	.word	0x08011aa9
 800e2ac:	08011b2b 	.word	0x08011b2b
 800e2b0:	7ff00000 	.word	0x7ff00000
 800e2b4:	08011dd8 	.word	0x08011dd8
 800e2b8:	08011cb8 	.word	0x08011cb8
 800e2bc:	08011c90 	.word	0x08011c90
 800e2c0:	7ca00000 	.word	0x7ca00000
 800e2c4:	7fefffff 	.word	0x7fefffff
 800e2c8:	f016 0310 	ands.w	r3, r6, #16
 800e2cc:	bf18      	it	ne
 800e2ce:	236a      	movne	r3, #106	; 0x6a
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	9305      	str	r3, [sp, #20]
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	4fb0      	ldr	r7, [pc, #704]	; (800e59c <_strtod_l+0x874>)
 800e2da:	07f2      	lsls	r2, r6, #31
 800e2dc:	d504      	bpl.n	800e2e8 <_strtod_l+0x5c0>
 800e2de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2e2:	f7f2 f911 	bl	8000508 <__aeabi_dmul>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	1076      	asrs	r6, r6, #1
 800e2ea:	f107 0708 	add.w	r7, r7, #8
 800e2ee:	d1f4      	bne.n	800e2da <_strtod_l+0x5b2>
 800e2f0:	b10b      	cbz	r3, 800e2f6 <_strtod_l+0x5ce>
 800e2f2:	4680      	mov	r8, r0
 800e2f4:	4689      	mov	r9, r1
 800e2f6:	9b05      	ldr	r3, [sp, #20]
 800e2f8:	b1c3      	cbz	r3, 800e32c <_strtod_l+0x604>
 800e2fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e2fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e302:	2b00      	cmp	r3, #0
 800e304:	4649      	mov	r1, r9
 800e306:	dd11      	ble.n	800e32c <_strtod_l+0x604>
 800e308:	2b1f      	cmp	r3, #31
 800e30a:	f340 8127 	ble.w	800e55c <_strtod_l+0x834>
 800e30e:	2b34      	cmp	r3, #52	; 0x34
 800e310:	bfd8      	it	le
 800e312:	f04f 33ff 	movle.w	r3, #4294967295
 800e316:	f04f 0800 	mov.w	r8, #0
 800e31a:	bfcf      	iteee	gt
 800e31c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e320:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e324:	fa03 f202 	lslle.w	r2, r3, r2
 800e328:	ea02 0901 	andle.w	r9, r2, r1
 800e32c:	2200      	movs	r2, #0
 800e32e:	2300      	movs	r3, #0
 800e330:	4640      	mov	r0, r8
 800e332:	4649      	mov	r1, r9
 800e334:	f7f2 fb50 	bl	80009d8 <__aeabi_dcmpeq>
 800e338:	2800      	cmp	r0, #0
 800e33a:	d1a1      	bne.n	800e280 <_strtod_l+0x558>
 800e33c:	9b06      	ldr	r3, [sp, #24]
 800e33e:	465a      	mov	r2, fp
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	4650      	mov	r0, sl
 800e344:	4623      	mov	r3, r4
 800e346:	9908      	ldr	r1, [sp, #32]
 800e348:	f001 fda4 	bl	800fe94 <__s2b>
 800e34c:	9008      	str	r0, [sp, #32]
 800e34e:	2800      	cmp	r0, #0
 800e350:	f43f af21 	beq.w	800e196 <_strtod_l+0x46e>
 800e354:	9b04      	ldr	r3, [sp, #16]
 800e356:	f04f 0b00 	mov.w	fp, #0
 800e35a:	1b5d      	subs	r5, r3, r5
 800e35c:	9b07      	ldr	r3, [sp, #28]
 800e35e:	f8cd b010 	str.w	fp, [sp, #16]
 800e362:	2b00      	cmp	r3, #0
 800e364:	bfb4      	ite	lt
 800e366:	462b      	movlt	r3, r5
 800e368:	2300      	movge	r3, #0
 800e36a:	930e      	str	r3, [sp, #56]	; 0x38
 800e36c:	9b07      	ldr	r3, [sp, #28]
 800e36e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e372:	9314      	str	r3, [sp, #80]	; 0x50
 800e374:	9b08      	ldr	r3, [sp, #32]
 800e376:	4650      	mov	r0, sl
 800e378:	6859      	ldr	r1, [r3, #4]
 800e37a:	f001 fce3 	bl	800fd44 <_Balloc>
 800e37e:	9006      	str	r0, [sp, #24]
 800e380:	2800      	cmp	r0, #0
 800e382:	f43f af10 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e386:	9b08      	ldr	r3, [sp, #32]
 800e388:	300c      	adds	r0, #12
 800e38a:	691a      	ldr	r2, [r3, #16]
 800e38c:	f103 010c 	add.w	r1, r3, #12
 800e390:	3202      	adds	r2, #2
 800e392:	0092      	lsls	r2, r2, #2
 800e394:	f001 fcc8 	bl	800fd28 <memcpy>
 800e398:	ab1c      	add	r3, sp, #112	; 0x70
 800e39a:	9301      	str	r3, [sp, #4]
 800e39c:	ab1b      	add	r3, sp, #108	; 0x6c
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	4642      	mov	r2, r8
 800e3a2:	464b      	mov	r3, r9
 800e3a4:	4650      	mov	r0, sl
 800e3a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e3aa:	f002 f8b5 	bl	8010518 <__d2b>
 800e3ae:	901a      	str	r0, [sp, #104]	; 0x68
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	f43f aef8 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	4650      	mov	r0, sl
 800e3ba:	f001 fe03 	bl	800ffc4 <__i2b>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	9004      	str	r0, [sp, #16]
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	f43f aeef 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e3c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e3ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e3cc:	2d00      	cmp	r5, #0
 800e3ce:	bfab      	itete	ge
 800e3d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e3d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e3d4:	18ee      	addge	r6, r5, r3
 800e3d6:	1b5c      	sublt	r4, r3, r5
 800e3d8:	9b05      	ldr	r3, [sp, #20]
 800e3da:	bfa8      	it	ge
 800e3dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e3de:	eba5 0503 	sub.w	r5, r5, r3
 800e3e2:	4415      	add	r5, r2
 800e3e4:	4b6e      	ldr	r3, [pc, #440]	; (800e5a0 <_strtod_l+0x878>)
 800e3e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800e3ea:	bfb8      	it	lt
 800e3ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e3ee:	429d      	cmp	r5, r3
 800e3f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e3f4:	f280 80c4 	bge.w	800e580 <_strtod_l+0x858>
 800e3f8:	1b5b      	subs	r3, r3, r5
 800e3fa:	2b1f      	cmp	r3, #31
 800e3fc:	f04f 0701 	mov.w	r7, #1
 800e400:	eba2 0203 	sub.w	r2, r2, r3
 800e404:	f300 80b1 	bgt.w	800e56a <_strtod_l+0x842>
 800e408:	2500      	movs	r5, #0
 800e40a:	fa07 f303 	lsl.w	r3, r7, r3
 800e40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e410:	18b7      	adds	r7, r6, r2
 800e412:	9b05      	ldr	r3, [sp, #20]
 800e414:	42be      	cmp	r6, r7
 800e416:	4414      	add	r4, r2
 800e418:	441c      	add	r4, r3
 800e41a:	4633      	mov	r3, r6
 800e41c:	bfa8      	it	ge
 800e41e:	463b      	movge	r3, r7
 800e420:	42a3      	cmp	r3, r4
 800e422:	bfa8      	it	ge
 800e424:	4623      	movge	r3, r4
 800e426:	2b00      	cmp	r3, #0
 800e428:	bfc2      	ittt	gt
 800e42a:	1aff      	subgt	r7, r7, r3
 800e42c:	1ae4      	subgt	r4, r4, r3
 800e42e:	1af6      	subgt	r6, r6, r3
 800e430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e432:	2b00      	cmp	r3, #0
 800e434:	dd17      	ble.n	800e466 <_strtod_l+0x73e>
 800e436:	461a      	mov	r2, r3
 800e438:	4650      	mov	r0, sl
 800e43a:	9904      	ldr	r1, [sp, #16]
 800e43c:	f001 fe80 	bl	8010140 <__pow5mult>
 800e440:	9004      	str	r0, [sp, #16]
 800e442:	2800      	cmp	r0, #0
 800e444:	f43f aeaf 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e448:	4601      	mov	r1, r0
 800e44a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e44c:	4650      	mov	r0, sl
 800e44e:	f001 fdcf 	bl	800fff0 <__multiply>
 800e452:	9009      	str	r0, [sp, #36]	; 0x24
 800e454:	2800      	cmp	r0, #0
 800e456:	f43f aea6 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e45a:	4650      	mov	r0, sl
 800e45c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e45e:	f001 fcb1 	bl	800fdc4 <_Bfree>
 800e462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e464:	931a      	str	r3, [sp, #104]	; 0x68
 800e466:	2f00      	cmp	r7, #0
 800e468:	f300 808e 	bgt.w	800e588 <_strtod_l+0x860>
 800e46c:	9b07      	ldr	r3, [sp, #28]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	dd08      	ble.n	800e484 <_strtod_l+0x75c>
 800e472:	4650      	mov	r0, sl
 800e474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e476:	9906      	ldr	r1, [sp, #24]
 800e478:	f001 fe62 	bl	8010140 <__pow5mult>
 800e47c:	9006      	str	r0, [sp, #24]
 800e47e:	2800      	cmp	r0, #0
 800e480:	f43f ae91 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e484:	2c00      	cmp	r4, #0
 800e486:	dd08      	ble.n	800e49a <_strtod_l+0x772>
 800e488:	4622      	mov	r2, r4
 800e48a:	4650      	mov	r0, sl
 800e48c:	9906      	ldr	r1, [sp, #24]
 800e48e:	f001 feb1 	bl	80101f4 <__lshift>
 800e492:	9006      	str	r0, [sp, #24]
 800e494:	2800      	cmp	r0, #0
 800e496:	f43f ae86 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e49a:	2e00      	cmp	r6, #0
 800e49c:	dd08      	ble.n	800e4b0 <_strtod_l+0x788>
 800e49e:	4632      	mov	r2, r6
 800e4a0:	4650      	mov	r0, sl
 800e4a2:	9904      	ldr	r1, [sp, #16]
 800e4a4:	f001 fea6 	bl	80101f4 <__lshift>
 800e4a8:	9004      	str	r0, [sp, #16]
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	f43f ae7b 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e4b0:	4650      	mov	r0, sl
 800e4b2:	9a06      	ldr	r2, [sp, #24]
 800e4b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e4b6:	f001 ff29 	bl	801030c <__mdiff>
 800e4ba:	4683      	mov	fp, r0
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	f43f ae72 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e4c2:	2400      	movs	r4, #0
 800e4c4:	68c3      	ldr	r3, [r0, #12]
 800e4c6:	9904      	ldr	r1, [sp, #16]
 800e4c8:	60c4      	str	r4, [r0, #12]
 800e4ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4cc:	f001 ff02 	bl	80102d4 <__mcmp>
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	da6b      	bge.n	800e5ac <_strtod_l+0x884>
 800e4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4d6:	ea53 0308 	orrs.w	r3, r3, r8
 800e4da:	f040 8091 	bne.w	800e600 <_strtod_l+0x8d8>
 800e4de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	f040 808c 	bne.w	800e600 <_strtod_l+0x8d8>
 800e4e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4ec:	0d1b      	lsrs	r3, r3, #20
 800e4ee:	051b      	lsls	r3, r3, #20
 800e4f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e4f4:	f240 8084 	bls.w	800e600 <_strtod_l+0x8d8>
 800e4f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e4fc:	b91b      	cbnz	r3, 800e506 <_strtod_l+0x7de>
 800e4fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e502:	2b01      	cmp	r3, #1
 800e504:	dd7c      	ble.n	800e600 <_strtod_l+0x8d8>
 800e506:	4659      	mov	r1, fp
 800e508:	2201      	movs	r2, #1
 800e50a:	4650      	mov	r0, sl
 800e50c:	f001 fe72 	bl	80101f4 <__lshift>
 800e510:	9904      	ldr	r1, [sp, #16]
 800e512:	4683      	mov	fp, r0
 800e514:	f001 fede 	bl	80102d4 <__mcmp>
 800e518:	2800      	cmp	r0, #0
 800e51a:	dd71      	ble.n	800e600 <_strtod_l+0x8d8>
 800e51c:	9905      	ldr	r1, [sp, #20]
 800e51e:	464b      	mov	r3, r9
 800e520:	4a20      	ldr	r2, [pc, #128]	; (800e5a4 <_strtod_l+0x87c>)
 800e522:	2900      	cmp	r1, #0
 800e524:	f000 808c 	beq.w	800e640 <_strtod_l+0x918>
 800e528:	ea02 0109 	and.w	r1, r2, r9
 800e52c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e530:	f300 8086 	bgt.w	800e640 <_strtod_l+0x918>
 800e534:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e538:	f77f aeaa 	ble.w	800e290 <_strtod_l+0x568>
 800e53c:	4640      	mov	r0, r8
 800e53e:	4649      	mov	r1, r9
 800e540:	4b19      	ldr	r3, [pc, #100]	; (800e5a8 <_strtod_l+0x880>)
 800e542:	2200      	movs	r2, #0
 800e544:	f7f1 ffe0 	bl	8000508 <__aeabi_dmul>
 800e548:	460b      	mov	r3, r1
 800e54a:	4303      	orrs	r3, r0
 800e54c:	bf08      	it	eq
 800e54e:	2322      	moveq	r3, #34	; 0x22
 800e550:	4680      	mov	r8, r0
 800e552:	4689      	mov	r9, r1
 800e554:	bf08      	it	eq
 800e556:	f8ca 3000 	streq.w	r3, [sl]
 800e55a:	e62f      	b.n	800e1bc <_strtod_l+0x494>
 800e55c:	f04f 32ff 	mov.w	r2, #4294967295
 800e560:	fa02 f303 	lsl.w	r3, r2, r3
 800e564:	ea03 0808 	and.w	r8, r3, r8
 800e568:	e6e0      	b.n	800e32c <_strtod_l+0x604>
 800e56a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e56e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e572:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e576:	35e2      	adds	r5, #226	; 0xe2
 800e578:	fa07 f505 	lsl.w	r5, r7, r5
 800e57c:	970f      	str	r7, [sp, #60]	; 0x3c
 800e57e:	e747      	b.n	800e410 <_strtod_l+0x6e8>
 800e580:	2301      	movs	r3, #1
 800e582:	2500      	movs	r5, #0
 800e584:	930f      	str	r3, [sp, #60]	; 0x3c
 800e586:	e743      	b.n	800e410 <_strtod_l+0x6e8>
 800e588:	463a      	mov	r2, r7
 800e58a:	4650      	mov	r0, sl
 800e58c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e58e:	f001 fe31 	bl	80101f4 <__lshift>
 800e592:	901a      	str	r0, [sp, #104]	; 0x68
 800e594:	2800      	cmp	r0, #0
 800e596:	f47f af69 	bne.w	800e46c <_strtod_l+0x744>
 800e59a:	e604      	b.n	800e1a6 <_strtod_l+0x47e>
 800e59c:	08011b00 	.word	0x08011b00
 800e5a0:	fffffc02 	.word	0xfffffc02
 800e5a4:	7ff00000 	.word	0x7ff00000
 800e5a8:	39500000 	.word	0x39500000
 800e5ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e5b0:	d165      	bne.n	800e67e <_strtod_l+0x956>
 800e5b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5b8:	b35a      	cbz	r2, 800e612 <_strtod_l+0x8ea>
 800e5ba:	4a99      	ldr	r2, [pc, #612]	; (800e820 <_strtod_l+0xaf8>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d12b      	bne.n	800e618 <_strtod_l+0x8f0>
 800e5c0:	9b05      	ldr	r3, [sp, #20]
 800e5c2:	4641      	mov	r1, r8
 800e5c4:	b303      	cbz	r3, 800e608 <_strtod_l+0x8e0>
 800e5c6:	464a      	mov	r2, r9
 800e5c8:	4b96      	ldr	r3, [pc, #600]	; (800e824 <_strtod_l+0xafc>)
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d4:	d81b      	bhi.n	800e60e <_strtod_l+0x8e6>
 800e5d6:	0d1b      	lsrs	r3, r3, #20
 800e5d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e0:	4299      	cmp	r1, r3
 800e5e2:	d119      	bne.n	800e618 <_strtod_l+0x8f0>
 800e5e4:	4b90      	ldr	r3, [pc, #576]	; (800e828 <_strtod_l+0xb00>)
 800e5e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d102      	bne.n	800e5f2 <_strtod_l+0x8ca>
 800e5ec:	3101      	adds	r1, #1
 800e5ee:	f43f adda 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e5f2:	f04f 0800 	mov.w	r8, #0
 800e5f6:	4b8b      	ldr	r3, [pc, #556]	; (800e824 <_strtod_l+0xafc>)
 800e5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5fa:	401a      	ands	r2, r3
 800e5fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e600:	9b05      	ldr	r3, [sp, #20]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d19a      	bne.n	800e53c <_strtod_l+0x814>
 800e606:	e5d9      	b.n	800e1bc <_strtod_l+0x494>
 800e608:	f04f 33ff 	mov.w	r3, #4294967295
 800e60c:	e7e8      	b.n	800e5e0 <_strtod_l+0x8b8>
 800e60e:	4613      	mov	r3, r2
 800e610:	e7e6      	b.n	800e5e0 <_strtod_l+0x8b8>
 800e612:	ea53 0308 	orrs.w	r3, r3, r8
 800e616:	d081      	beq.n	800e51c <_strtod_l+0x7f4>
 800e618:	b1e5      	cbz	r5, 800e654 <_strtod_l+0x92c>
 800e61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e61c:	421d      	tst	r5, r3
 800e61e:	d0ef      	beq.n	800e600 <_strtod_l+0x8d8>
 800e620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e622:	4640      	mov	r0, r8
 800e624:	4649      	mov	r1, r9
 800e626:	9a05      	ldr	r2, [sp, #20]
 800e628:	b1c3      	cbz	r3, 800e65c <_strtod_l+0x934>
 800e62a:	f7ff fb59 	bl	800dce0 <sulp>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e636:	f7f1 fdb1 	bl	800019c <__adddf3>
 800e63a:	4680      	mov	r8, r0
 800e63c:	4689      	mov	r9, r1
 800e63e:	e7df      	b.n	800e600 <_strtod_l+0x8d8>
 800e640:	4013      	ands	r3, r2
 800e642:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e646:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e64a:	f04f 38ff 	mov.w	r8, #4294967295
 800e64e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e652:	e7d5      	b.n	800e600 <_strtod_l+0x8d8>
 800e654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e656:	ea13 0f08 	tst.w	r3, r8
 800e65a:	e7e0      	b.n	800e61e <_strtod_l+0x8f6>
 800e65c:	f7ff fb40 	bl	800dce0 <sulp>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e668:	f7f1 fd96 	bl	8000198 <__aeabi_dsub>
 800e66c:	2200      	movs	r2, #0
 800e66e:	2300      	movs	r3, #0
 800e670:	4680      	mov	r8, r0
 800e672:	4689      	mov	r9, r1
 800e674:	f7f2 f9b0 	bl	80009d8 <__aeabi_dcmpeq>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d0c1      	beq.n	800e600 <_strtod_l+0x8d8>
 800e67c:	e608      	b.n	800e290 <_strtod_l+0x568>
 800e67e:	4658      	mov	r0, fp
 800e680:	9904      	ldr	r1, [sp, #16]
 800e682:	f001 ffa5 	bl	80105d0 <__ratio>
 800e686:	2200      	movs	r2, #0
 800e688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	f7f2 f9b6 	bl	8000a00 <__aeabi_dcmple>
 800e694:	2800      	cmp	r0, #0
 800e696:	d070      	beq.n	800e77a <_strtod_l+0xa52>
 800e698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d042      	beq.n	800e724 <_strtod_l+0x9fc>
 800e69e:	2600      	movs	r6, #0
 800e6a0:	4f62      	ldr	r7, [pc, #392]	; (800e82c <_strtod_l+0xb04>)
 800e6a2:	4d62      	ldr	r5, [pc, #392]	; (800e82c <_strtod_l+0xb04>)
 800e6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6aa:	0d1b      	lsrs	r3, r3, #20
 800e6ac:	051b      	lsls	r3, r3, #20
 800e6ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e6b2:	4b5f      	ldr	r3, [pc, #380]	; (800e830 <_strtod_l+0xb08>)
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	f040 80c3 	bne.w	800e840 <_strtod_l+0xb18>
 800e6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6bc:	4640      	mov	r0, r8
 800e6be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	f001 feae 	bl	8010424 <__ulp>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	f7f1 ff1a 	bl	8000508 <__aeabi_dmul>
 800e6d4:	4642      	mov	r2, r8
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	f7f1 fd60 	bl	800019c <__adddf3>
 800e6dc:	460b      	mov	r3, r1
 800e6de:	4951      	ldr	r1, [pc, #324]	; (800e824 <_strtod_l+0xafc>)
 800e6e0:	4a54      	ldr	r2, [pc, #336]	; (800e834 <_strtod_l+0xb0c>)
 800e6e2:	4019      	ands	r1, r3
 800e6e4:	4291      	cmp	r1, r2
 800e6e6:	4680      	mov	r8, r0
 800e6e8:	d95d      	bls.n	800e7a6 <_strtod_l+0xa7e>
 800e6ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6ec:	4b4e      	ldr	r3, [pc, #312]	; (800e828 <_strtod_l+0xb00>)
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d103      	bne.n	800e6fa <_strtod_l+0x9d2>
 800e6f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	f43f ad56 	beq.w	800e1a6 <_strtod_l+0x47e>
 800e6fa:	f04f 38ff 	mov.w	r8, #4294967295
 800e6fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e828 <_strtod_l+0xb00>
 800e702:	4650      	mov	r0, sl
 800e704:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e706:	f001 fb5d 	bl	800fdc4 <_Bfree>
 800e70a:	4650      	mov	r0, sl
 800e70c:	9906      	ldr	r1, [sp, #24]
 800e70e:	f001 fb59 	bl	800fdc4 <_Bfree>
 800e712:	4650      	mov	r0, sl
 800e714:	9904      	ldr	r1, [sp, #16]
 800e716:	f001 fb55 	bl	800fdc4 <_Bfree>
 800e71a:	4659      	mov	r1, fp
 800e71c:	4650      	mov	r0, sl
 800e71e:	f001 fb51 	bl	800fdc4 <_Bfree>
 800e722:	e627      	b.n	800e374 <_strtod_l+0x64c>
 800e724:	f1b8 0f00 	cmp.w	r8, #0
 800e728:	d119      	bne.n	800e75e <_strtod_l+0xa36>
 800e72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e72c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e730:	b9e3      	cbnz	r3, 800e76c <_strtod_l+0xa44>
 800e732:	2200      	movs	r2, #0
 800e734:	4630      	mov	r0, r6
 800e736:	4639      	mov	r1, r7
 800e738:	4b3c      	ldr	r3, [pc, #240]	; (800e82c <_strtod_l+0xb04>)
 800e73a:	f7f2 f957 	bl	80009ec <__aeabi_dcmplt>
 800e73e:	b9c8      	cbnz	r0, 800e774 <_strtod_l+0xa4c>
 800e740:	2200      	movs	r2, #0
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	4b3c      	ldr	r3, [pc, #240]	; (800e838 <_strtod_l+0xb10>)
 800e748:	f7f1 fede 	bl	8000508 <__aeabi_dmul>
 800e74c:	4604      	mov	r4, r0
 800e74e:	460d      	mov	r5, r1
 800e750:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e754:	9416      	str	r4, [sp, #88]	; 0x58
 800e756:	9317      	str	r3, [sp, #92]	; 0x5c
 800e758:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e75c:	e7a2      	b.n	800e6a4 <_strtod_l+0x97c>
 800e75e:	f1b8 0f01 	cmp.w	r8, #1
 800e762:	d103      	bne.n	800e76c <_strtod_l+0xa44>
 800e764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e766:	2b00      	cmp	r3, #0
 800e768:	f43f ad92 	beq.w	800e290 <_strtod_l+0x568>
 800e76c:	2600      	movs	r6, #0
 800e76e:	2400      	movs	r4, #0
 800e770:	4f32      	ldr	r7, [pc, #200]	; (800e83c <_strtod_l+0xb14>)
 800e772:	e796      	b.n	800e6a2 <_strtod_l+0x97a>
 800e774:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e776:	4d30      	ldr	r5, [pc, #192]	; (800e838 <_strtod_l+0xb10>)
 800e778:	e7ea      	b.n	800e750 <_strtod_l+0xa28>
 800e77a:	4b2f      	ldr	r3, [pc, #188]	; (800e838 <_strtod_l+0xb10>)
 800e77c:	2200      	movs	r2, #0
 800e77e:	4630      	mov	r0, r6
 800e780:	4639      	mov	r1, r7
 800e782:	f7f1 fec1 	bl	8000508 <__aeabi_dmul>
 800e786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e788:	4604      	mov	r4, r0
 800e78a:	460d      	mov	r5, r1
 800e78c:	b933      	cbnz	r3, 800e79c <_strtod_l+0xa74>
 800e78e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e792:	9010      	str	r0, [sp, #64]	; 0x40
 800e794:	9311      	str	r3, [sp, #68]	; 0x44
 800e796:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e79a:	e783      	b.n	800e6a4 <_strtod_l+0x97c>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e7a4:	e7f7      	b.n	800e796 <_strtod_l+0xa6e>
 800e7a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e7aa:	9b05      	ldr	r3, [sp, #20]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1a8      	bne.n	800e702 <_strtod_l+0x9da>
 800e7b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7b6:	0d1b      	lsrs	r3, r3, #20
 800e7b8:	051b      	lsls	r3, r3, #20
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d1a1      	bne.n	800e702 <_strtod_l+0x9da>
 800e7be:	4620      	mov	r0, r4
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	f7f2 fd1b 	bl	80011fc <__aeabi_d2lz>
 800e7c6:	f7f1 fe71 	bl	80004ac <__aeabi_l2d>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	f7f1 fce1 	bl	8000198 <__aeabi_dsub>
 800e7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7dc:	ea43 0308 	orr.w	r3, r3, r8
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	460d      	mov	r5, r1
 800e7e6:	d066      	beq.n	800e8b6 <_strtod_l+0xb8e>
 800e7e8:	a309      	add	r3, pc, #36	; (adr r3, 800e810 <_strtod_l+0xae8>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f7f2 f8fd 	bl	80009ec <__aeabi_dcmplt>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	f47f ace2 	bne.w	800e1bc <_strtod_l+0x494>
 800e7f8:	a307      	add	r3, pc, #28	; (adr r3, 800e818 <_strtod_l+0xaf0>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	4620      	mov	r0, r4
 800e800:	4629      	mov	r1, r5
 800e802:	f7f2 f911 	bl	8000a28 <__aeabi_dcmpgt>
 800e806:	2800      	cmp	r0, #0
 800e808:	f43f af7b 	beq.w	800e702 <_strtod_l+0x9da>
 800e80c:	e4d6      	b.n	800e1bc <_strtod_l+0x494>
 800e80e:	bf00      	nop
 800e810:	94a03595 	.word	0x94a03595
 800e814:	3fdfffff 	.word	0x3fdfffff
 800e818:	35afe535 	.word	0x35afe535
 800e81c:	3fe00000 	.word	0x3fe00000
 800e820:	000fffff 	.word	0x000fffff
 800e824:	7ff00000 	.word	0x7ff00000
 800e828:	7fefffff 	.word	0x7fefffff
 800e82c:	3ff00000 	.word	0x3ff00000
 800e830:	7fe00000 	.word	0x7fe00000
 800e834:	7c9fffff 	.word	0x7c9fffff
 800e838:	3fe00000 	.word	0x3fe00000
 800e83c:	bff00000 	.word	0xbff00000
 800e840:	9b05      	ldr	r3, [sp, #20]
 800e842:	b313      	cbz	r3, 800e88a <_strtod_l+0xb62>
 800e844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e846:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e84a:	d81e      	bhi.n	800e88a <_strtod_l+0xb62>
 800e84c:	a326      	add	r3, pc, #152	; (adr r3, 800e8e8 <_strtod_l+0xbc0>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	4620      	mov	r0, r4
 800e854:	4629      	mov	r1, r5
 800e856:	f7f2 f8d3 	bl	8000a00 <__aeabi_dcmple>
 800e85a:	b190      	cbz	r0, 800e882 <_strtod_l+0xb5a>
 800e85c:	4629      	mov	r1, r5
 800e85e:	4620      	mov	r0, r4
 800e860:	f7f2 f92a 	bl	8000ab8 <__aeabi_d2uiz>
 800e864:	2801      	cmp	r0, #1
 800e866:	bf38      	it	cc
 800e868:	2001      	movcc	r0, #1
 800e86a:	f7f1 fdd3 	bl	8000414 <__aeabi_ui2d>
 800e86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e870:	4604      	mov	r4, r0
 800e872:	460d      	mov	r5, r1
 800e874:	b9d3      	cbnz	r3, 800e8ac <_strtod_l+0xb84>
 800e876:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e87a:	9012      	str	r0, [sp, #72]	; 0x48
 800e87c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e87e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e884:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e888:	1a9f      	subs	r7, r3, r2
 800e88a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e88e:	f001 fdc9 	bl	8010424 <__ulp>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	4630      	mov	r0, r6
 800e898:	4639      	mov	r1, r7
 800e89a:	f7f1 fe35 	bl	8000508 <__aeabi_dmul>
 800e89e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8a2:	f7f1 fc7b 	bl	800019c <__adddf3>
 800e8a6:	4680      	mov	r8, r0
 800e8a8:	4689      	mov	r9, r1
 800e8aa:	e77e      	b.n	800e7aa <_strtod_l+0xa82>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e8b4:	e7e3      	b.n	800e87e <_strtod_l+0xb56>
 800e8b6:	a30e      	add	r3, pc, #56	; (adr r3, 800e8f0 <_strtod_l+0xbc8>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	f7f2 f896 	bl	80009ec <__aeabi_dcmplt>
 800e8c0:	e7a1      	b.n	800e806 <_strtod_l+0xade>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	930a      	str	r3, [sp, #40]	; 0x28
 800e8c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e8c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e8ca:	6013      	str	r3, [r2, #0]
 800e8cc:	f7ff ba71 	b.w	800ddb2 <_strtod_l+0x8a>
 800e8d0:	2a65      	cmp	r2, #101	; 0x65
 800e8d2:	f43f ab63 	beq.w	800df9c <_strtod_l+0x274>
 800e8d6:	2a45      	cmp	r2, #69	; 0x45
 800e8d8:	f43f ab60 	beq.w	800df9c <_strtod_l+0x274>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	f7ff bb95 	b.w	800e00c <_strtod_l+0x2e4>
 800e8e2:	bf00      	nop
 800e8e4:	f3af 8000 	nop.w
 800e8e8:	ffc00000 	.word	0xffc00000
 800e8ec:	41dfffff 	.word	0x41dfffff
 800e8f0:	94a03595 	.word	0x94a03595
 800e8f4:	3fcfffff 	.word	0x3fcfffff

0800e8f8 <strtod>:
 800e8f8:	460a      	mov	r2, r1
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	4802      	ldr	r0, [pc, #8]	; (800e908 <strtod+0x10>)
 800e8fe:	4b03      	ldr	r3, [pc, #12]	; (800e90c <strtod+0x14>)
 800e900:	6800      	ldr	r0, [r0, #0]
 800e902:	f7ff ba11 	b.w	800dd28 <_strtod_l>
 800e906:	bf00      	nop
 800e908:	2000019c 	.word	0x2000019c
 800e90c:	20000204 	.word	0x20000204

0800e910 <quorem>:
 800e910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	6903      	ldr	r3, [r0, #16]
 800e916:	690c      	ldr	r4, [r1, #16]
 800e918:	4607      	mov	r7, r0
 800e91a:	42a3      	cmp	r3, r4
 800e91c:	f2c0 8082 	blt.w	800ea24 <quorem+0x114>
 800e920:	3c01      	subs	r4, #1
 800e922:	f100 0514 	add.w	r5, r0, #20
 800e926:	f101 0814 	add.w	r8, r1, #20
 800e92a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e938:	3301      	adds	r3, #1
 800e93a:	429a      	cmp	r2, r3
 800e93c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e940:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e944:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e948:	d331      	bcc.n	800e9ae <quorem+0x9e>
 800e94a:	f04f 0e00 	mov.w	lr, #0
 800e94e:	4640      	mov	r0, r8
 800e950:	46ac      	mov	ip, r5
 800e952:	46f2      	mov	sl, lr
 800e954:	f850 2b04 	ldr.w	r2, [r0], #4
 800e958:	b293      	uxth	r3, r2
 800e95a:	fb06 e303 	mla	r3, r6, r3, lr
 800e95e:	0c12      	lsrs	r2, r2, #16
 800e960:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e964:	b29b      	uxth	r3, r3
 800e966:	fb06 e202 	mla	r2, r6, r2, lr
 800e96a:	ebaa 0303 	sub.w	r3, sl, r3
 800e96e:	f8dc a000 	ldr.w	sl, [ip]
 800e972:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e976:	fa1f fa8a 	uxth.w	sl, sl
 800e97a:	4453      	add	r3, sl
 800e97c:	f8dc a000 	ldr.w	sl, [ip]
 800e980:	b292      	uxth	r2, r2
 800e982:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e986:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e990:	4581      	cmp	r9, r0
 800e992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e996:	f84c 3b04 	str.w	r3, [ip], #4
 800e99a:	d2db      	bcs.n	800e954 <quorem+0x44>
 800e99c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e9a0:	b92b      	cbnz	r3, 800e9ae <quorem+0x9e>
 800e9a2:	9b01      	ldr	r3, [sp, #4]
 800e9a4:	3b04      	subs	r3, #4
 800e9a6:	429d      	cmp	r5, r3
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	d32f      	bcc.n	800ea0c <quorem+0xfc>
 800e9ac:	613c      	str	r4, [r7, #16]
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	f001 fc90 	bl	80102d4 <__mcmp>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	db25      	blt.n	800ea04 <quorem+0xf4>
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f04f 0c00 	mov.w	ip, #0
 800e9be:	3601      	adds	r6, #1
 800e9c0:	f858 1b04 	ldr.w	r1, [r8], #4
 800e9c4:	f8d0 e000 	ldr.w	lr, [r0]
 800e9c8:	b28b      	uxth	r3, r1
 800e9ca:	ebac 0303 	sub.w	r3, ip, r3
 800e9ce:	fa1f f28e 	uxth.w	r2, lr
 800e9d2:	4413      	add	r3, r2
 800e9d4:	0c0a      	lsrs	r2, r1, #16
 800e9d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e9da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9e4:	45c1      	cmp	r9, r8
 800e9e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e9ea:	f840 3b04 	str.w	r3, [r0], #4
 800e9ee:	d2e7      	bcs.n	800e9c0 <quorem+0xb0>
 800e9f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9f8:	b922      	cbnz	r2, 800ea04 <quorem+0xf4>
 800e9fa:	3b04      	subs	r3, #4
 800e9fc:	429d      	cmp	r5, r3
 800e9fe:	461a      	mov	r2, r3
 800ea00:	d30a      	bcc.n	800ea18 <quorem+0x108>
 800ea02:	613c      	str	r4, [r7, #16]
 800ea04:	4630      	mov	r0, r6
 800ea06:	b003      	add	sp, #12
 800ea08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0c:	6812      	ldr	r2, [r2, #0]
 800ea0e:	3b04      	subs	r3, #4
 800ea10:	2a00      	cmp	r2, #0
 800ea12:	d1cb      	bne.n	800e9ac <quorem+0x9c>
 800ea14:	3c01      	subs	r4, #1
 800ea16:	e7c6      	b.n	800e9a6 <quorem+0x96>
 800ea18:	6812      	ldr	r2, [r2, #0]
 800ea1a:	3b04      	subs	r3, #4
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	d1f0      	bne.n	800ea02 <quorem+0xf2>
 800ea20:	3c01      	subs	r4, #1
 800ea22:	e7eb      	b.n	800e9fc <quorem+0xec>
 800ea24:	2000      	movs	r0, #0
 800ea26:	e7ee      	b.n	800ea06 <quorem+0xf6>

0800ea28 <_dtoa_r>:
 800ea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	4616      	mov	r6, r2
 800ea2e:	461f      	mov	r7, r3
 800ea30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea32:	b099      	sub	sp, #100	; 0x64
 800ea34:	4605      	mov	r5, r0
 800ea36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ea3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ea3e:	b974      	cbnz	r4, 800ea5e <_dtoa_r+0x36>
 800ea40:	2010      	movs	r0, #16
 800ea42:	f001 f949 	bl	800fcd8 <malloc>
 800ea46:	4602      	mov	r2, r0
 800ea48:	6268      	str	r0, [r5, #36]	; 0x24
 800ea4a:	b920      	cbnz	r0, 800ea56 <_dtoa_r+0x2e>
 800ea4c:	21ea      	movs	r1, #234	; 0xea
 800ea4e:	4ba8      	ldr	r3, [pc, #672]	; (800ecf0 <_dtoa_r+0x2c8>)
 800ea50:	48a8      	ldr	r0, [pc, #672]	; (800ecf4 <_dtoa_r+0x2cc>)
 800ea52:	f002 f89f 	bl	8010b94 <__assert_func>
 800ea56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea5a:	6004      	str	r4, [r0, #0]
 800ea5c:	60c4      	str	r4, [r0, #12]
 800ea5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea60:	6819      	ldr	r1, [r3, #0]
 800ea62:	b151      	cbz	r1, 800ea7a <_dtoa_r+0x52>
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	2301      	movs	r3, #1
 800ea68:	4093      	lsls	r3, r2
 800ea6a:	604a      	str	r2, [r1, #4]
 800ea6c:	608b      	str	r3, [r1, #8]
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f001 f9a8 	bl	800fdc4 <_Bfree>
 800ea74:	2200      	movs	r2, #0
 800ea76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea78:	601a      	str	r2, [r3, #0]
 800ea7a:	1e3b      	subs	r3, r7, #0
 800ea7c:	bfaf      	iteee	ge
 800ea7e:	2300      	movge	r3, #0
 800ea80:	2201      	movlt	r2, #1
 800ea82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea86:	9305      	strlt	r3, [sp, #20]
 800ea88:	bfa8      	it	ge
 800ea8a:	f8c8 3000 	strge.w	r3, [r8]
 800ea8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ea92:	4b99      	ldr	r3, [pc, #612]	; (800ecf8 <_dtoa_r+0x2d0>)
 800ea94:	bfb8      	it	lt
 800ea96:	f8c8 2000 	strlt.w	r2, [r8]
 800ea9a:	ea33 0309 	bics.w	r3, r3, r9
 800ea9e:	d119      	bne.n	800ead4 <_dtoa_r+0xac>
 800eaa0:	f242 730f 	movw	r3, #9999	; 0x270f
 800eaa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eaa6:	6013      	str	r3, [r2, #0]
 800eaa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eaac:	4333      	orrs	r3, r6
 800eaae:	f000 857f 	beq.w	800f5b0 <_dtoa_r+0xb88>
 800eab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eab4:	b953      	cbnz	r3, 800eacc <_dtoa_r+0xa4>
 800eab6:	4b91      	ldr	r3, [pc, #580]	; (800ecfc <_dtoa_r+0x2d4>)
 800eab8:	e022      	b.n	800eb00 <_dtoa_r+0xd8>
 800eaba:	4b91      	ldr	r3, [pc, #580]	; (800ed00 <_dtoa_r+0x2d8>)
 800eabc:	9303      	str	r3, [sp, #12]
 800eabe:	3308      	adds	r3, #8
 800eac0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800eac2:	6013      	str	r3, [r2, #0]
 800eac4:	9803      	ldr	r0, [sp, #12]
 800eac6:	b019      	add	sp, #100	; 0x64
 800eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eacc:	4b8b      	ldr	r3, [pc, #556]	; (800ecfc <_dtoa_r+0x2d4>)
 800eace:	9303      	str	r3, [sp, #12]
 800ead0:	3303      	adds	r3, #3
 800ead2:	e7f5      	b.n	800eac0 <_dtoa_r+0x98>
 800ead4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ead8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800eadc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eae0:	2200      	movs	r2, #0
 800eae2:	2300      	movs	r3, #0
 800eae4:	f7f1 ff78 	bl	80009d8 <__aeabi_dcmpeq>
 800eae8:	4680      	mov	r8, r0
 800eaea:	b158      	cbz	r0, 800eb04 <_dtoa_r+0xdc>
 800eaec:	2301      	movs	r3, #1
 800eaee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 8558 	beq.w	800f5aa <_dtoa_r+0xb82>
 800eafa:	4882      	ldr	r0, [pc, #520]	; (800ed04 <_dtoa_r+0x2dc>)
 800eafc:	6018      	str	r0, [r3, #0]
 800eafe:	1e43      	subs	r3, r0, #1
 800eb00:	9303      	str	r3, [sp, #12]
 800eb02:	e7df      	b.n	800eac4 <_dtoa_r+0x9c>
 800eb04:	ab16      	add	r3, sp, #88	; 0x58
 800eb06:	9301      	str	r3, [sp, #4]
 800eb08:	ab17      	add	r3, sp, #92	; 0x5c
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eb12:	f001 fd01 	bl	8010518 <__d2b>
 800eb16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eb1a:	4683      	mov	fp, r0
 800eb1c:	2c00      	cmp	r4, #0
 800eb1e:	d07f      	beq.n	800ec20 <_dtoa_r+0x1f8>
 800eb20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800eb2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800eb32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eb36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	4b72      	ldr	r3, [pc, #456]	; (800ed08 <_dtoa_r+0x2e0>)
 800eb3e:	f7f1 fb2b 	bl	8000198 <__aeabi_dsub>
 800eb42:	a365      	add	r3, pc, #404	; (adr r3, 800ecd8 <_dtoa_r+0x2b0>)
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f7f1 fcde 	bl	8000508 <__aeabi_dmul>
 800eb4c:	a364      	add	r3, pc, #400	; (adr r3, 800ece0 <_dtoa_r+0x2b8>)
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	f7f1 fb23 	bl	800019c <__adddf3>
 800eb56:	4606      	mov	r6, r0
 800eb58:	4620      	mov	r0, r4
 800eb5a:	460f      	mov	r7, r1
 800eb5c:	f7f1 fc6a 	bl	8000434 <__aeabi_i2d>
 800eb60:	a361      	add	r3, pc, #388	; (adr r3, 800ece8 <_dtoa_r+0x2c0>)
 800eb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb66:	f7f1 fccf 	bl	8000508 <__aeabi_dmul>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4630      	mov	r0, r6
 800eb70:	4639      	mov	r1, r7
 800eb72:	f7f1 fb13 	bl	800019c <__adddf3>
 800eb76:	4606      	mov	r6, r0
 800eb78:	460f      	mov	r7, r1
 800eb7a:	f7f1 ff75 	bl	8000a68 <__aeabi_d2iz>
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4682      	mov	sl, r0
 800eb82:	2300      	movs	r3, #0
 800eb84:	4630      	mov	r0, r6
 800eb86:	4639      	mov	r1, r7
 800eb88:	f7f1 ff30 	bl	80009ec <__aeabi_dcmplt>
 800eb8c:	b148      	cbz	r0, 800eba2 <_dtoa_r+0x17a>
 800eb8e:	4650      	mov	r0, sl
 800eb90:	f7f1 fc50 	bl	8000434 <__aeabi_i2d>
 800eb94:	4632      	mov	r2, r6
 800eb96:	463b      	mov	r3, r7
 800eb98:	f7f1 ff1e 	bl	80009d8 <__aeabi_dcmpeq>
 800eb9c:	b908      	cbnz	r0, 800eba2 <_dtoa_r+0x17a>
 800eb9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eba2:	f1ba 0f16 	cmp.w	sl, #22
 800eba6:	d858      	bhi.n	800ec5a <_dtoa_r+0x232>
 800eba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ebac:	4b57      	ldr	r3, [pc, #348]	; (800ed0c <_dtoa_r+0x2e4>)
 800ebae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb6:	f7f1 ff19 	bl	80009ec <__aeabi_dcmplt>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d04f      	beq.n	800ec5e <_dtoa_r+0x236>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ebc8:	1b1c      	subs	r4, r3, r4
 800ebca:	1e63      	subs	r3, r4, #1
 800ebcc:	9309      	str	r3, [sp, #36]	; 0x24
 800ebce:	bf49      	itett	mi
 800ebd0:	f1c4 0301 	rsbmi	r3, r4, #1
 800ebd4:	2300      	movpl	r3, #0
 800ebd6:	9306      	strmi	r3, [sp, #24]
 800ebd8:	2300      	movmi	r3, #0
 800ebda:	bf54      	ite	pl
 800ebdc:	9306      	strpl	r3, [sp, #24]
 800ebde:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ebe0:	f1ba 0f00 	cmp.w	sl, #0
 800ebe4:	db3d      	blt.n	800ec62 <_dtoa_r+0x23a>
 800ebe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebe8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ebec:	4453      	add	r3, sl
 800ebee:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	930a      	str	r3, [sp, #40]	; 0x28
 800ebf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebf6:	2b09      	cmp	r3, #9
 800ebf8:	f200 808c 	bhi.w	800ed14 <_dtoa_r+0x2ec>
 800ebfc:	2b05      	cmp	r3, #5
 800ebfe:	bfc4      	itt	gt
 800ec00:	3b04      	subgt	r3, #4
 800ec02:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ec04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec06:	bfc8      	it	gt
 800ec08:	2400      	movgt	r4, #0
 800ec0a:	f1a3 0302 	sub.w	r3, r3, #2
 800ec0e:	bfd8      	it	le
 800ec10:	2401      	movle	r4, #1
 800ec12:	2b03      	cmp	r3, #3
 800ec14:	f200 808a 	bhi.w	800ed2c <_dtoa_r+0x304>
 800ec18:	e8df f003 	tbb	[pc, r3]
 800ec1c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ec20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ec24:	441c      	add	r4, r3
 800ec26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ec2a:	2b20      	cmp	r3, #32
 800ec2c:	bfc3      	ittte	gt
 800ec2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ec36:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec3a:	f1c3 0320 	rsble	r3, r3, #32
 800ec3e:	bfc6      	itte	gt
 800ec40:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec44:	4318      	orrgt	r0, r3
 800ec46:	fa06 f003 	lslle.w	r0, r6, r3
 800ec4a:	f7f1 fbe3 	bl	8000414 <__aeabi_ui2d>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ec54:	3c01      	subs	r4, #1
 800ec56:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec58:	e76f      	b.n	800eb3a <_dtoa_r+0x112>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e7b2      	b.n	800ebc4 <_dtoa_r+0x19c>
 800ec5e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec60:	e7b1      	b.n	800ebc6 <_dtoa_r+0x19e>
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	eba3 030a 	sub.w	r3, r3, sl
 800ec68:	9306      	str	r3, [sp, #24]
 800ec6a:	f1ca 0300 	rsb	r3, sl, #0
 800ec6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec70:	2300      	movs	r3, #0
 800ec72:	930e      	str	r3, [sp, #56]	; 0x38
 800ec74:	e7be      	b.n	800ebf4 <_dtoa_r+0x1cc>
 800ec76:	2300      	movs	r3, #0
 800ec78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dc58      	bgt.n	800ed32 <_dtoa_r+0x30a>
 800ec80:	f04f 0901 	mov.w	r9, #1
 800ec84:	464b      	mov	r3, r9
 800ec86:	f8cd 9020 	str.w	r9, [sp, #32]
 800ec8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ec8e:	2200      	movs	r2, #0
 800ec90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ec92:	6042      	str	r2, [r0, #4]
 800ec94:	2204      	movs	r2, #4
 800ec96:	f102 0614 	add.w	r6, r2, #20
 800ec9a:	429e      	cmp	r6, r3
 800ec9c:	6841      	ldr	r1, [r0, #4]
 800ec9e:	d94e      	bls.n	800ed3e <_dtoa_r+0x316>
 800eca0:	4628      	mov	r0, r5
 800eca2:	f001 f84f 	bl	800fd44 <_Balloc>
 800eca6:	9003      	str	r0, [sp, #12]
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d14c      	bne.n	800ed46 <_dtoa_r+0x31e>
 800ecac:	4602      	mov	r2, r0
 800ecae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ecb2:	4b17      	ldr	r3, [pc, #92]	; (800ed10 <_dtoa_r+0x2e8>)
 800ecb4:	e6cc      	b.n	800ea50 <_dtoa_r+0x28>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e7de      	b.n	800ec78 <_dtoa_r+0x250>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ecc0:	eb0a 0903 	add.w	r9, sl, r3
 800ecc4:	f109 0301 	add.w	r3, r9, #1
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	9308      	str	r3, [sp, #32]
 800eccc:	bfb8      	it	lt
 800ecce:	2301      	movlt	r3, #1
 800ecd0:	e7dd      	b.n	800ec8e <_dtoa_r+0x266>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e7f2      	b.n	800ecbc <_dtoa_r+0x294>
 800ecd6:	bf00      	nop
 800ecd8:	636f4361 	.word	0x636f4361
 800ecdc:	3fd287a7 	.word	0x3fd287a7
 800ece0:	8b60c8b3 	.word	0x8b60c8b3
 800ece4:	3fc68a28 	.word	0x3fc68a28
 800ece8:	509f79fb 	.word	0x509f79fb
 800ecec:	3fd34413 	.word	0x3fd34413
 800ecf0:	08011b35 	.word	0x08011b35
 800ecf4:	08011b4c 	.word	0x08011b4c
 800ecf8:	7ff00000 	.word	0x7ff00000
 800ecfc:	08011b31 	.word	0x08011b31
 800ed00:	08011b28 	.word	0x08011b28
 800ed04:	08011ab5 	.word	0x08011ab5
 800ed08:	3ff80000 	.word	0x3ff80000
 800ed0c:	08011cb8 	.word	0x08011cb8
 800ed10:	08011ba7 	.word	0x08011ba7
 800ed14:	2401      	movs	r4, #1
 800ed16:	2300      	movs	r3, #0
 800ed18:	940b      	str	r4, [sp, #44]	; 0x2c
 800ed1a:	9322      	str	r3, [sp, #136]	; 0x88
 800ed1c:	f04f 39ff 	mov.w	r9, #4294967295
 800ed20:	2200      	movs	r2, #0
 800ed22:	2312      	movs	r3, #18
 800ed24:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed28:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed2a:	e7b0      	b.n	800ec8e <_dtoa_r+0x266>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed30:	e7f4      	b.n	800ed1c <_dtoa_r+0x2f4>
 800ed32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ed36:	464b      	mov	r3, r9
 800ed38:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed3c:	e7a7      	b.n	800ec8e <_dtoa_r+0x266>
 800ed3e:	3101      	adds	r1, #1
 800ed40:	6041      	str	r1, [r0, #4]
 800ed42:	0052      	lsls	r2, r2, #1
 800ed44:	e7a7      	b.n	800ec96 <_dtoa_r+0x26e>
 800ed46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed48:	9a03      	ldr	r2, [sp, #12]
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	9b08      	ldr	r3, [sp, #32]
 800ed4e:	2b0e      	cmp	r3, #14
 800ed50:	f200 80a8 	bhi.w	800eea4 <_dtoa_r+0x47c>
 800ed54:	2c00      	cmp	r4, #0
 800ed56:	f000 80a5 	beq.w	800eea4 <_dtoa_r+0x47c>
 800ed5a:	f1ba 0f00 	cmp.w	sl, #0
 800ed5e:	dd34      	ble.n	800edca <_dtoa_r+0x3a2>
 800ed60:	4a9a      	ldr	r2, [pc, #616]	; (800efcc <_dtoa_r+0x5a4>)
 800ed62:	f00a 030f 	and.w	r3, sl, #15
 800ed66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ed6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ed72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ed76:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ed7a:	d016      	beq.n	800edaa <_dtoa_r+0x382>
 800ed7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed80:	4b93      	ldr	r3, [pc, #588]	; (800efd0 <_dtoa_r+0x5a8>)
 800ed82:	2703      	movs	r7, #3
 800ed84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed88:	f7f1 fce8 	bl	800075c <__aeabi_ddiv>
 800ed8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed90:	f004 040f 	and.w	r4, r4, #15
 800ed94:	4e8e      	ldr	r6, [pc, #568]	; (800efd0 <_dtoa_r+0x5a8>)
 800ed96:	b954      	cbnz	r4, 800edae <_dtoa_r+0x386>
 800ed98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eda0:	f7f1 fcdc 	bl	800075c <__aeabi_ddiv>
 800eda4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eda8:	e029      	b.n	800edfe <_dtoa_r+0x3d6>
 800edaa:	2702      	movs	r7, #2
 800edac:	e7f2      	b.n	800ed94 <_dtoa_r+0x36c>
 800edae:	07e1      	lsls	r1, r4, #31
 800edb0:	d508      	bpl.n	800edc4 <_dtoa_r+0x39c>
 800edb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800edb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800edba:	f7f1 fba5 	bl	8000508 <__aeabi_dmul>
 800edbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800edc2:	3701      	adds	r7, #1
 800edc4:	1064      	asrs	r4, r4, #1
 800edc6:	3608      	adds	r6, #8
 800edc8:	e7e5      	b.n	800ed96 <_dtoa_r+0x36e>
 800edca:	f000 80a5 	beq.w	800ef18 <_dtoa_r+0x4f0>
 800edce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edd2:	f1ca 0400 	rsb	r4, sl, #0
 800edd6:	4b7d      	ldr	r3, [pc, #500]	; (800efcc <_dtoa_r+0x5a4>)
 800edd8:	f004 020f 	and.w	r2, r4, #15
 800eddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ede0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede4:	f7f1 fb90 	bl	8000508 <__aeabi_dmul>
 800ede8:	2702      	movs	r7, #2
 800edea:	2300      	movs	r3, #0
 800edec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edf0:	4e77      	ldr	r6, [pc, #476]	; (800efd0 <_dtoa_r+0x5a8>)
 800edf2:	1124      	asrs	r4, r4, #4
 800edf4:	2c00      	cmp	r4, #0
 800edf6:	f040 8084 	bne.w	800ef02 <_dtoa_r+0x4da>
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1d2      	bne.n	800eda4 <_dtoa_r+0x37c>
 800edfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 808b 	beq.w	800ef1c <_dtoa_r+0x4f4>
 800ee06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ee0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ee0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee12:	2200      	movs	r2, #0
 800ee14:	4b6f      	ldr	r3, [pc, #444]	; (800efd4 <_dtoa_r+0x5ac>)
 800ee16:	f7f1 fde9 	bl	80009ec <__aeabi_dcmplt>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d07e      	beq.n	800ef1c <_dtoa_r+0x4f4>
 800ee1e:	9b08      	ldr	r3, [sp, #32]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d07b      	beq.n	800ef1c <_dtoa_r+0x4f4>
 800ee24:	f1b9 0f00 	cmp.w	r9, #0
 800ee28:	dd38      	ble.n	800ee9c <_dtoa_r+0x474>
 800ee2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4b69      	ldr	r3, [pc, #420]	; (800efd8 <_dtoa_r+0x5b0>)
 800ee32:	f7f1 fb69 	bl	8000508 <__aeabi_dmul>
 800ee36:	464c      	mov	r4, r9
 800ee38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ee40:	3701      	adds	r7, #1
 800ee42:	4638      	mov	r0, r7
 800ee44:	f7f1 faf6 	bl	8000434 <__aeabi_i2d>
 800ee48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee4c:	f7f1 fb5c 	bl	8000508 <__aeabi_dmul>
 800ee50:	2200      	movs	r2, #0
 800ee52:	4b62      	ldr	r3, [pc, #392]	; (800efdc <_dtoa_r+0x5b4>)
 800ee54:	f7f1 f9a2 	bl	800019c <__adddf3>
 800ee58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ee5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee60:	9611      	str	r6, [sp, #68]	; 0x44
 800ee62:	2c00      	cmp	r4, #0
 800ee64:	d15d      	bne.n	800ef22 <_dtoa_r+0x4fa>
 800ee66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	4b5c      	ldr	r3, [pc, #368]	; (800efe0 <_dtoa_r+0x5b8>)
 800ee6e:	f7f1 f993 	bl	8000198 <__aeabi_dsub>
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee7a:	4633      	mov	r3, r6
 800ee7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee7e:	f7f1 fdd3 	bl	8000a28 <__aeabi_dcmpgt>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	f040 829c 	bne.w	800f3c0 <_dtoa_r+0x998>
 800ee88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee92:	f7f1 fdab 	bl	80009ec <__aeabi_dcmplt>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f040 8290 	bne.w	800f3bc <_dtoa_r+0x994>
 800ee9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800eea0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f2c0 8152 	blt.w	800f150 <_dtoa_r+0x728>
 800eeac:	f1ba 0f0e 	cmp.w	sl, #14
 800eeb0:	f300 814e 	bgt.w	800f150 <_dtoa_r+0x728>
 800eeb4:	4b45      	ldr	r3, [pc, #276]	; (800efcc <_dtoa_r+0x5a4>)
 800eeb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eeba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eebe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800eec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f280 80db 	bge.w	800f080 <_dtoa_r+0x658>
 800eeca:	9b08      	ldr	r3, [sp, #32]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f300 80d7 	bgt.w	800f080 <_dtoa_r+0x658>
 800eed2:	f040 8272 	bne.w	800f3ba <_dtoa_r+0x992>
 800eed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeda:	2200      	movs	r2, #0
 800eedc:	4b40      	ldr	r3, [pc, #256]	; (800efe0 <_dtoa_r+0x5b8>)
 800eede:	f7f1 fb13 	bl	8000508 <__aeabi_dmul>
 800eee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eee6:	f7f1 fd95 	bl	8000a14 <__aeabi_dcmpge>
 800eeea:	9c08      	ldr	r4, [sp, #32]
 800eeec:	4626      	mov	r6, r4
 800eeee:	2800      	cmp	r0, #0
 800eef0:	f040 8248 	bne.w	800f384 <_dtoa_r+0x95c>
 800eef4:	2331      	movs	r3, #49	; 0x31
 800eef6:	9f03      	ldr	r7, [sp, #12]
 800eef8:	f10a 0a01 	add.w	sl, sl, #1
 800eefc:	f807 3b01 	strb.w	r3, [r7], #1
 800ef00:	e244      	b.n	800f38c <_dtoa_r+0x964>
 800ef02:	07e2      	lsls	r2, r4, #31
 800ef04:	d505      	bpl.n	800ef12 <_dtoa_r+0x4ea>
 800ef06:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef0a:	f7f1 fafd 	bl	8000508 <__aeabi_dmul>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	3701      	adds	r7, #1
 800ef12:	1064      	asrs	r4, r4, #1
 800ef14:	3608      	adds	r6, #8
 800ef16:	e76d      	b.n	800edf4 <_dtoa_r+0x3cc>
 800ef18:	2702      	movs	r7, #2
 800ef1a:	e770      	b.n	800edfe <_dtoa_r+0x3d6>
 800ef1c:	46d0      	mov	r8, sl
 800ef1e:	9c08      	ldr	r4, [sp, #32]
 800ef20:	e78f      	b.n	800ee42 <_dtoa_r+0x41a>
 800ef22:	9903      	ldr	r1, [sp, #12]
 800ef24:	4b29      	ldr	r3, [pc, #164]	; (800efcc <_dtoa_r+0x5a4>)
 800ef26:	4421      	add	r1, r4
 800ef28:	9112      	str	r1, [sp, #72]	; 0x48
 800ef2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ef34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef38:	2900      	cmp	r1, #0
 800ef3a:	d055      	beq.n	800efe8 <_dtoa_r+0x5c0>
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	4929      	ldr	r1, [pc, #164]	; (800efe4 <_dtoa_r+0x5bc>)
 800ef40:	f7f1 fc0c 	bl	800075c <__aeabi_ddiv>
 800ef44:	463b      	mov	r3, r7
 800ef46:	4632      	mov	r2, r6
 800ef48:	f7f1 f926 	bl	8000198 <__aeabi_dsub>
 800ef4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef50:	9f03      	ldr	r7, [sp, #12]
 800ef52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef56:	f7f1 fd87 	bl	8000a68 <__aeabi_d2iz>
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	f7f1 fa6a 	bl	8000434 <__aeabi_i2d>
 800ef60:	4602      	mov	r2, r0
 800ef62:	460b      	mov	r3, r1
 800ef64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef68:	f7f1 f916 	bl	8000198 <__aeabi_dsub>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	3430      	adds	r4, #48	; 0x30
 800ef72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef7a:	f807 4b01 	strb.w	r4, [r7], #1
 800ef7e:	f7f1 fd35 	bl	80009ec <__aeabi_dcmplt>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	d174      	bne.n	800f070 <_dtoa_r+0x648>
 800ef86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	4911      	ldr	r1, [pc, #68]	; (800efd4 <_dtoa_r+0x5ac>)
 800ef8e:	f7f1 f903 	bl	8000198 <__aeabi_dsub>
 800ef92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef96:	f7f1 fd29 	bl	80009ec <__aeabi_dcmplt>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	f040 80b7 	bne.w	800f10e <_dtoa_r+0x6e6>
 800efa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efa2:	429f      	cmp	r7, r3
 800efa4:	f43f af7a 	beq.w	800ee9c <_dtoa_r+0x474>
 800efa8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800efac:	2200      	movs	r2, #0
 800efae:	4b0a      	ldr	r3, [pc, #40]	; (800efd8 <_dtoa_r+0x5b0>)
 800efb0:	f7f1 faaa 	bl	8000508 <__aeabi_dmul>
 800efb4:	2200      	movs	r2, #0
 800efb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efbe:	4b06      	ldr	r3, [pc, #24]	; (800efd8 <_dtoa_r+0x5b0>)
 800efc0:	f7f1 faa2 	bl	8000508 <__aeabi_dmul>
 800efc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efc8:	e7c3      	b.n	800ef52 <_dtoa_r+0x52a>
 800efca:	bf00      	nop
 800efcc:	08011cb8 	.word	0x08011cb8
 800efd0:	08011c90 	.word	0x08011c90
 800efd4:	3ff00000 	.word	0x3ff00000
 800efd8:	40240000 	.word	0x40240000
 800efdc:	401c0000 	.word	0x401c0000
 800efe0:	40140000 	.word	0x40140000
 800efe4:	3fe00000 	.word	0x3fe00000
 800efe8:	4630      	mov	r0, r6
 800efea:	4639      	mov	r1, r7
 800efec:	f7f1 fa8c 	bl	8000508 <__aeabi_dmul>
 800eff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eff2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eff6:	9c03      	ldr	r4, [sp, #12]
 800eff8:	9314      	str	r3, [sp, #80]	; 0x50
 800effa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800effe:	f7f1 fd33 	bl	8000a68 <__aeabi_d2iz>
 800f002:	9015      	str	r0, [sp, #84]	; 0x54
 800f004:	f7f1 fa16 	bl	8000434 <__aeabi_i2d>
 800f008:	4602      	mov	r2, r0
 800f00a:	460b      	mov	r3, r1
 800f00c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f010:	f7f1 f8c2 	bl	8000198 <__aeabi_dsub>
 800f014:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f016:	4606      	mov	r6, r0
 800f018:	3330      	adds	r3, #48	; 0x30
 800f01a:	f804 3b01 	strb.w	r3, [r4], #1
 800f01e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f020:	460f      	mov	r7, r1
 800f022:	429c      	cmp	r4, r3
 800f024:	f04f 0200 	mov.w	r2, #0
 800f028:	d124      	bne.n	800f074 <_dtoa_r+0x64c>
 800f02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f02e:	4bb0      	ldr	r3, [pc, #704]	; (800f2f0 <_dtoa_r+0x8c8>)
 800f030:	f7f1 f8b4 	bl	800019c <__adddf3>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	4630      	mov	r0, r6
 800f03a:	4639      	mov	r1, r7
 800f03c:	f7f1 fcf4 	bl	8000a28 <__aeabi_dcmpgt>
 800f040:	2800      	cmp	r0, #0
 800f042:	d163      	bne.n	800f10c <_dtoa_r+0x6e4>
 800f044:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f048:	2000      	movs	r0, #0
 800f04a:	49a9      	ldr	r1, [pc, #676]	; (800f2f0 <_dtoa_r+0x8c8>)
 800f04c:	f7f1 f8a4 	bl	8000198 <__aeabi_dsub>
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 fcc8 	bl	80009ec <__aeabi_dcmplt>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	f43f af1d 	beq.w	800ee9c <_dtoa_r+0x474>
 800f062:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f064:	1e7b      	subs	r3, r7, #1
 800f066:	9314      	str	r3, [sp, #80]	; 0x50
 800f068:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f06c:	2b30      	cmp	r3, #48	; 0x30
 800f06e:	d0f8      	beq.n	800f062 <_dtoa_r+0x63a>
 800f070:	46c2      	mov	sl, r8
 800f072:	e03b      	b.n	800f0ec <_dtoa_r+0x6c4>
 800f074:	4b9f      	ldr	r3, [pc, #636]	; (800f2f4 <_dtoa_r+0x8cc>)
 800f076:	f7f1 fa47 	bl	8000508 <__aeabi_dmul>
 800f07a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f07e:	e7bc      	b.n	800effa <_dtoa_r+0x5d2>
 800f080:	9f03      	ldr	r7, [sp, #12]
 800f082:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f08a:	4640      	mov	r0, r8
 800f08c:	4649      	mov	r1, r9
 800f08e:	f7f1 fb65 	bl	800075c <__aeabi_ddiv>
 800f092:	f7f1 fce9 	bl	8000a68 <__aeabi_d2iz>
 800f096:	4604      	mov	r4, r0
 800f098:	f7f1 f9cc 	bl	8000434 <__aeabi_i2d>
 800f09c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0a0:	f7f1 fa32 	bl	8000508 <__aeabi_dmul>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	4649      	mov	r1, r9
 800f0ac:	f7f1 f874 	bl	8000198 <__aeabi_dsub>
 800f0b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f0b4:	f807 6b01 	strb.w	r6, [r7], #1
 800f0b8:	9e03      	ldr	r6, [sp, #12]
 800f0ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f0be:	1bbe      	subs	r6, r7, r6
 800f0c0:	45b4      	cmp	ip, r6
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	d136      	bne.n	800f136 <_dtoa_r+0x70e>
 800f0c8:	f7f1 f868 	bl	800019c <__adddf3>
 800f0cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0d0:	4680      	mov	r8, r0
 800f0d2:	4689      	mov	r9, r1
 800f0d4:	f7f1 fca8 	bl	8000a28 <__aeabi_dcmpgt>
 800f0d8:	bb58      	cbnz	r0, 800f132 <_dtoa_r+0x70a>
 800f0da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4649      	mov	r1, r9
 800f0e2:	f7f1 fc79 	bl	80009d8 <__aeabi_dcmpeq>
 800f0e6:	b108      	cbz	r0, 800f0ec <_dtoa_r+0x6c4>
 800f0e8:	07e1      	lsls	r1, r4, #31
 800f0ea:	d422      	bmi.n	800f132 <_dtoa_r+0x70a>
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	4659      	mov	r1, fp
 800f0f0:	f000 fe68 	bl	800fdc4 <_Bfree>
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	703b      	strb	r3, [r7, #0]
 800f0f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f0fa:	f10a 0001 	add.w	r0, sl, #1
 800f0fe:	6018      	str	r0, [r3, #0]
 800f100:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f102:	2b00      	cmp	r3, #0
 800f104:	f43f acde 	beq.w	800eac4 <_dtoa_r+0x9c>
 800f108:	601f      	str	r7, [r3, #0]
 800f10a:	e4db      	b.n	800eac4 <_dtoa_r+0x9c>
 800f10c:	4627      	mov	r7, r4
 800f10e:	463b      	mov	r3, r7
 800f110:	461f      	mov	r7, r3
 800f112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f116:	2a39      	cmp	r2, #57	; 0x39
 800f118:	d107      	bne.n	800f12a <_dtoa_r+0x702>
 800f11a:	9a03      	ldr	r2, [sp, #12]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d1f7      	bne.n	800f110 <_dtoa_r+0x6e8>
 800f120:	2230      	movs	r2, #48	; 0x30
 800f122:	9903      	ldr	r1, [sp, #12]
 800f124:	f108 0801 	add.w	r8, r8, #1
 800f128:	700a      	strb	r2, [r1, #0]
 800f12a:	781a      	ldrb	r2, [r3, #0]
 800f12c:	3201      	adds	r2, #1
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	e79e      	b.n	800f070 <_dtoa_r+0x648>
 800f132:	46d0      	mov	r8, sl
 800f134:	e7eb      	b.n	800f10e <_dtoa_r+0x6e6>
 800f136:	2200      	movs	r2, #0
 800f138:	4b6e      	ldr	r3, [pc, #440]	; (800f2f4 <_dtoa_r+0x8cc>)
 800f13a:	f7f1 f9e5 	bl	8000508 <__aeabi_dmul>
 800f13e:	2200      	movs	r2, #0
 800f140:	2300      	movs	r3, #0
 800f142:	4680      	mov	r8, r0
 800f144:	4689      	mov	r9, r1
 800f146:	f7f1 fc47 	bl	80009d8 <__aeabi_dcmpeq>
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d09b      	beq.n	800f086 <_dtoa_r+0x65e>
 800f14e:	e7cd      	b.n	800f0ec <_dtoa_r+0x6c4>
 800f150:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f152:	2a00      	cmp	r2, #0
 800f154:	f000 80d0 	beq.w	800f2f8 <_dtoa_r+0x8d0>
 800f158:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f15a:	2a01      	cmp	r2, #1
 800f15c:	f300 80ae 	bgt.w	800f2bc <_dtoa_r+0x894>
 800f160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f162:	2a00      	cmp	r2, #0
 800f164:	f000 80a6 	beq.w	800f2b4 <_dtoa_r+0x88c>
 800f168:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f16c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f16e:	9f06      	ldr	r7, [sp, #24]
 800f170:	9a06      	ldr	r2, [sp, #24]
 800f172:	2101      	movs	r1, #1
 800f174:	441a      	add	r2, r3
 800f176:	9206      	str	r2, [sp, #24]
 800f178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f17a:	4628      	mov	r0, r5
 800f17c:	441a      	add	r2, r3
 800f17e:	9209      	str	r2, [sp, #36]	; 0x24
 800f180:	f000 ff20 	bl	800ffc4 <__i2b>
 800f184:	4606      	mov	r6, r0
 800f186:	2f00      	cmp	r7, #0
 800f188:	dd0c      	ble.n	800f1a4 <_dtoa_r+0x77c>
 800f18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	dd09      	ble.n	800f1a4 <_dtoa_r+0x77c>
 800f190:	42bb      	cmp	r3, r7
 800f192:	bfa8      	it	ge
 800f194:	463b      	movge	r3, r7
 800f196:	9a06      	ldr	r2, [sp, #24]
 800f198:	1aff      	subs	r7, r7, r3
 800f19a:	1ad2      	subs	r2, r2, r3
 800f19c:	9206      	str	r2, [sp, #24]
 800f19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f1a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a6:	b1f3      	cbz	r3, 800f1e6 <_dtoa_r+0x7be>
 800f1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f000 80a8 	beq.w	800f300 <_dtoa_r+0x8d8>
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	dd10      	ble.n	800f1d6 <_dtoa_r+0x7ae>
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4622      	mov	r2, r4
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f000 ffc1 	bl	8010140 <__pow5mult>
 800f1be:	465a      	mov	r2, fp
 800f1c0:	4601      	mov	r1, r0
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f000 ff13 	bl	800fff0 <__multiply>
 800f1ca:	4680      	mov	r8, r0
 800f1cc:	4659      	mov	r1, fp
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f000 fdf8 	bl	800fdc4 <_Bfree>
 800f1d4:	46c3      	mov	fp, r8
 800f1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1d8:	1b1a      	subs	r2, r3, r4
 800f1da:	d004      	beq.n	800f1e6 <_dtoa_r+0x7be>
 800f1dc:	4659      	mov	r1, fp
 800f1de:	4628      	mov	r0, r5
 800f1e0:	f000 ffae 	bl	8010140 <__pow5mult>
 800f1e4:	4683      	mov	fp, r0
 800f1e6:	2101      	movs	r1, #1
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	f000 feeb 	bl	800ffc4 <__i2b>
 800f1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f340 8086 	ble.w	800f304 <_dtoa_r+0x8dc>
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	f000 ff9f 	bl	8010140 <__pow5mult>
 800f202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f204:	4604      	mov	r4, r0
 800f206:	2b01      	cmp	r3, #1
 800f208:	dd7f      	ble.n	800f30a <_dtoa_r+0x8e2>
 800f20a:	f04f 0800 	mov.w	r8, #0
 800f20e:	6923      	ldr	r3, [r4, #16]
 800f210:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f214:	6918      	ldr	r0, [r3, #16]
 800f216:	f000 fe87 	bl	800ff28 <__hi0bits>
 800f21a:	f1c0 0020 	rsb	r0, r0, #32
 800f21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f220:	4418      	add	r0, r3
 800f222:	f010 001f 	ands.w	r0, r0, #31
 800f226:	f000 8092 	beq.w	800f34e <_dtoa_r+0x926>
 800f22a:	f1c0 0320 	rsb	r3, r0, #32
 800f22e:	2b04      	cmp	r3, #4
 800f230:	f340 808a 	ble.w	800f348 <_dtoa_r+0x920>
 800f234:	f1c0 001c 	rsb	r0, r0, #28
 800f238:	9b06      	ldr	r3, [sp, #24]
 800f23a:	4407      	add	r7, r0
 800f23c:	4403      	add	r3, r0
 800f23e:	9306      	str	r3, [sp, #24]
 800f240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f242:	4403      	add	r3, r0
 800f244:	9309      	str	r3, [sp, #36]	; 0x24
 800f246:	9b06      	ldr	r3, [sp, #24]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	dd05      	ble.n	800f258 <_dtoa_r+0x830>
 800f24c:	4659      	mov	r1, fp
 800f24e:	461a      	mov	r2, r3
 800f250:	4628      	mov	r0, r5
 800f252:	f000 ffcf 	bl	80101f4 <__lshift>
 800f256:	4683      	mov	fp, r0
 800f258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	dd05      	ble.n	800f26a <_dtoa_r+0x842>
 800f25e:	4621      	mov	r1, r4
 800f260:	461a      	mov	r2, r3
 800f262:	4628      	mov	r0, r5
 800f264:	f000 ffc6 	bl	80101f4 <__lshift>
 800f268:	4604      	mov	r4, r0
 800f26a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d070      	beq.n	800f352 <_dtoa_r+0x92a>
 800f270:	4621      	mov	r1, r4
 800f272:	4658      	mov	r0, fp
 800f274:	f001 f82e 	bl	80102d4 <__mcmp>
 800f278:	2800      	cmp	r0, #0
 800f27a:	da6a      	bge.n	800f352 <_dtoa_r+0x92a>
 800f27c:	2300      	movs	r3, #0
 800f27e:	4659      	mov	r1, fp
 800f280:	220a      	movs	r2, #10
 800f282:	4628      	mov	r0, r5
 800f284:	f000 fdc0 	bl	800fe08 <__multadd>
 800f288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f28a:	4683      	mov	fp, r0
 800f28c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 8194 	beq.w	800f5be <_dtoa_r+0xb96>
 800f296:	4631      	mov	r1, r6
 800f298:	2300      	movs	r3, #0
 800f29a:	220a      	movs	r2, #10
 800f29c:	4628      	mov	r0, r5
 800f29e:	f000 fdb3 	bl	800fe08 <__multadd>
 800f2a2:	f1b9 0f00 	cmp.w	r9, #0
 800f2a6:	4606      	mov	r6, r0
 800f2a8:	f300 8093 	bgt.w	800f3d2 <_dtoa_r+0x9aa>
 800f2ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	dc57      	bgt.n	800f362 <_dtoa_r+0x93a>
 800f2b2:	e08e      	b.n	800f3d2 <_dtoa_r+0x9aa>
 800f2b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f2b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f2ba:	e757      	b.n	800f16c <_dtoa_r+0x744>
 800f2bc:	9b08      	ldr	r3, [sp, #32]
 800f2be:	1e5c      	subs	r4, r3, #1
 800f2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c2:	42a3      	cmp	r3, r4
 800f2c4:	bfb7      	itett	lt
 800f2c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f2c8:	1b1c      	subge	r4, r3, r4
 800f2ca:	1ae2      	sublt	r2, r4, r3
 800f2cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f2ce:	bfbe      	ittt	lt
 800f2d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f2d2:	189b      	addlt	r3, r3, r2
 800f2d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2d6:	9b08      	ldr	r3, [sp, #32]
 800f2d8:	bfb8      	it	lt
 800f2da:	2400      	movlt	r4, #0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	bfbb      	ittet	lt
 800f2e0:	9b06      	ldrlt	r3, [sp, #24]
 800f2e2:	9a08      	ldrlt	r2, [sp, #32]
 800f2e4:	9f06      	ldrge	r7, [sp, #24]
 800f2e6:	1a9f      	sublt	r7, r3, r2
 800f2e8:	bfac      	ite	ge
 800f2ea:	9b08      	ldrge	r3, [sp, #32]
 800f2ec:	2300      	movlt	r3, #0
 800f2ee:	e73f      	b.n	800f170 <_dtoa_r+0x748>
 800f2f0:	3fe00000 	.word	0x3fe00000
 800f2f4:	40240000 	.word	0x40240000
 800f2f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f2fa:	9f06      	ldr	r7, [sp, #24]
 800f2fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f2fe:	e742      	b.n	800f186 <_dtoa_r+0x75e>
 800f300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f302:	e76b      	b.n	800f1dc <_dtoa_r+0x7b4>
 800f304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f306:	2b01      	cmp	r3, #1
 800f308:	dc19      	bgt.n	800f33e <_dtoa_r+0x916>
 800f30a:	9b04      	ldr	r3, [sp, #16]
 800f30c:	b9bb      	cbnz	r3, 800f33e <_dtoa_r+0x916>
 800f30e:	9b05      	ldr	r3, [sp, #20]
 800f310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f314:	b99b      	cbnz	r3, 800f33e <_dtoa_r+0x916>
 800f316:	9b05      	ldr	r3, [sp, #20]
 800f318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f31c:	0d1b      	lsrs	r3, r3, #20
 800f31e:	051b      	lsls	r3, r3, #20
 800f320:	b183      	cbz	r3, 800f344 <_dtoa_r+0x91c>
 800f322:	f04f 0801 	mov.w	r8, #1
 800f326:	9b06      	ldr	r3, [sp, #24]
 800f328:	3301      	adds	r3, #1
 800f32a:	9306      	str	r3, [sp, #24]
 800f32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f32e:	3301      	adds	r3, #1
 800f330:	9309      	str	r3, [sp, #36]	; 0x24
 800f332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f334:	2b00      	cmp	r3, #0
 800f336:	f47f af6a 	bne.w	800f20e <_dtoa_r+0x7e6>
 800f33a:	2001      	movs	r0, #1
 800f33c:	e76f      	b.n	800f21e <_dtoa_r+0x7f6>
 800f33e:	f04f 0800 	mov.w	r8, #0
 800f342:	e7f6      	b.n	800f332 <_dtoa_r+0x90a>
 800f344:	4698      	mov	r8, r3
 800f346:	e7f4      	b.n	800f332 <_dtoa_r+0x90a>
 800f348:	f43f af7d 	beq.w	800f246 <_dtoa_r+0x81e>
 800f34c:	4618      	mov	r0, r3
 800f34e:	301c      	adds	r0, #28
 800f350:	e772      	b.n	800f238 <_dtoa_r+0x810>
 800f352:	9b08      	ldr	r3, [sp, #32]
 800f354:	2b00      	cmp	r3, #0
 800f356:	dc36      	bgt.n	800f3c6 <_dtoa_r+0x99e>
 800f358:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	dd33      	ble.n	800f3c6 <_dtoa_r+0x99e>
 800f35e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f362:	f1b9 0f00 	cmp.w	r9, #0
 800f366:	d10d      	bne.n	800f384 <_dtoa_r+0x95c>
 800f368:	4621      	mov	r1, r4
 800f36a:	464b      	mov	r3, r9
 800f36c:	2205      	movs	r2, #5
 800f36e:	4628      	mov	r0, r5
 800f370:	f000 fd4a 	bl	800fe08 <__multadd>
 800f374:	4601      	mov	r1, r0
 800f376:	4604      	mov	r4, r0
 800f378:	4658      	mov	r0, fp
 800f37a:	f000 ffab 	bl	80102d4 <__mcmp>
 800f37e:	2800      	cmp	r0, #0
 800f380:	f73f adb8 	bgt.w	800eef4 <_dtoa_r+0x4cc>
 800f384:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f386:	9f03      	ldr	r7, [sp, #12]
 800f388:	ea6f 0a03 	mvn.w	sl, r3
 800f38c:	f04f 0800 	mov.w	r8, #0
 800f390:	4621      	mov	r1, r4
 800f392:	4628      	mov	r0, r5
 800f394:	f000 fd16 	bl	800fdc4 <_Bfree>
 800f398:	2e00      	cmp	r6, #0
 800f39a:	f43f aea7 	beq.w	800f0ec <_dtoa_r+0x6c4>
 800f39e:	f1b8 0f00 	cmp.w	r8, #0
 800f3a2:	d005      	beq.n	800f3b0 <_dtoa_r+0x988>
 800f3a4:	45b0      	cmp	r8, r6
 800f3a6:	d003      	beq.n	800f3b0 <_dtoa_r+0x988>
 800f3a8:	4641      	mov	r1, r8
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f000 fd0a 	bl	800fdc4 <_Bfree>
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f000 fd06 	bl	800fdc4 <_Bfree>
 800f3b8:	e698      	b.n	800f0ec <_dtoa_r+0x6c4>
 800f3ba:	2400      	movs	r4, #0
 800f3bc:	4626      	mov	r6, r4
 800f3be:	e7e1      	b.n	800f384 <_dtoa_r+0x95c>
 800f3c0:	46c2      	mov	sl, r8
 800f3c2:	4626      	mov	r6, r4
 800f3c4:	e596      	b.n	800eef4 <_dtoa_r+0x4cc>
 800f3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	f000 80fd 	beq.w	800f5cc <_dtoa_r+0xba4>
 800f3d2:	2f00      	cmp	r7, #0
 800f3d4:	dd05      	ble.n	800f3e2 <_dtoa_r+0x9ba>
 800f3d6:	4631      	mov	r1, r6
 800f3d8:	463a      	mov	r2, r7
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f000 ff0a 	bl	80101f4 <__lshift>
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	f1b8 0f00 	cmp.w	r8, #0
 800f3e6:	d05c      	beq.n	800f4a2 <_dtoa_r+0xa7a>
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	6871      	ldr	r1, [r6, #4]
 800f3ec:	f000 fcaa 	bl	800fd44 <_Balloc>
 800f3f0:	4607      	mov	r7, r0
 800f3f2:	b928      	cbnz	r0, 800f400 <_dtoa_r+0x9d8>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f3fa:	4b7f      	ldr	r3, [pc, #508]	; (800f5f8 <_dtoa_r+0xbd0>)
 800f3fc:	f7ff bb28 	b.w	800ea50 <_dtoa_r+0x28>
 800f400:	6932      	ldr	r2, [r6, #16]
 800f402:	f106 010c 	add.w	r1, r6, #12
 800f406:	3202      	adds	r2, #2
 800f408:	0092      	lsls	r2, r2, #2
 800f40a:	300c      	adds	r0, #12
 800f40c:	f000 fc8c 	bl	800fd28 <memcpy>
 800f410:	2201      	movs	r2, #1
 800f412:	4639      	mov	r1, r7
 800f414:	4628      	mov	r0, r5
 800f416:	f000 feed 	bl	80101f4 <__lshift>
 800f41a:	46b0      	mov	r8, r6
 800f41c:	4606      	mov	r6, r0
 800f41e:	9b03      	ldr	r3, [sp, #12]
 800f420:	3301      	adds	r3, #1
 800f422:	9308      	str	r3, [sp, #32]
 800f424:	9b03      	ldr	r3, [sp, #12]
 800f426:	444b      	add	r3, r9
 800f428:	930a      	str	r3, [sp, #40]	; 0x28
 800f42a:	9b04      	ldr	r3, [sp, #16]
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	9309      	str	r3, [sp, #36]	; 0x24
 800f432:	9b08      	ldr	r3, [sp, #32]
 800f434:	4621      	mov	r1, r4
 800f436:	3b01      	subs	r3, #1
 800f438:	4658      	mov	r0, fp
 800f43a:	9304      	str	r3, [sp, #16]
 800f43c:	f7ff fa68 	bl	800e910 <quorem>
 800f440:	4603      	mov	r3, r0
 800f442:	4641      	mov	r1, r8
 800f444:	3330      	adds	r3, #48	; 0x30
 800f446:	9006      	str	r0, [sp, #24]
 800f448:	4658      	mov	r0, fp
 800f44a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f44c:	f000 ff42 	bl	80102d4 <__mcmp>
 800f450:	4632      	mov	r2, r6
 800f452:	4681      	mov	r9, r0
 800f454:	4621      	mov	r1, r4
 800f456:	4628      	mov	r0, r5
 800f458:	f000 ff58 	bl	801030c <__mdiff>
 800f45c:	68c2      	ldr	r2, [r0, #12]
 800f45e:	4607      	mov	r7, r0
 800f460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f462:	bb02      	cbnz	r2, 800f4a6 <_dtoa_r+0xa7e>
 800f464:	4601      	mov	r1, r0
 800f466:	4658      	mov	r0, fp
 800f468:	f000 ff34 	bl	80102d4 <__mcmp>
 800f46c:	4602      	mov	r2, r0
 800f46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f470:	4639      	mov	r1, r7
 800f472:	4628      	mov	r0, r5
 800f474:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f478:	f000 fca4 	bl	800fdc4 <_Bfree>
 800f47c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f47e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f480:	9f08      	ldr	r7, [sp, #32]
 800f482:	ea43 0102 	orr.w	r1, r3, r2
 800f486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f488:	430b      	orrs	r3, r1
 800f48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f48c:	d10d      	bne.n	800f4aa <_dtoa_r+0xa82>
 800f48e:	2b39      	cmp	r3, #57	; 0x39
 800f490:	d029      	beq.n	800f4e6 <_dtoa_r+0xabe>
 800f492:	f1b9 0f00 	cmp.w	r9, #0
 800f496:	dd01      	ble.n	800f49c <_dtoa_r+0xa74>
 800f498:	9b06      	ldr	r3, [sp, #24]
 800f49a:	3331      	adds	r3, #49	; 0x31
 800f49c:	9a04      	ldr	r2, [sp, #16]
 800f49e:	7013      	strb	r3, [r2, #0]
 800f4a0:	e776      	b.n	800f390 <_dtoa_r+0x968>
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	e7b9      	b.n	800f41a <_dtoa_r+0x9f2>
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	e7e2      	b.n	800f470 <_dtoa_r+0xa48>
 800f4aa:	f1b9 0f00 	cmp.w	r9, #0
 800f4ae:	db06      	blt.n	800f4be <_dtoa_r+0xa96>
 800f4b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f4b2:	ea41 0909 	orr.w	r9, r1, r9
 800f4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4b8:	ea59 0101 	orrs.w	r1, r9, r1
 800f4bc:	d120      	bne.n	800f500 <_dtoa_r+0xad8>
 800f4be:	2a00      	cmp	r2, #0
 800f4c0:	ddec      	ble.n	800f49c <_dtoa_r+0xa74>
 800f4c2:	4659      	mov	r1, fp
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	9308      	str	r3, [sp, #32]
 800f4ca:	f000 fe93 	bl	80101f4 <__lshift>
 800f4ce:	4621      	mov	r1, r4
 800f4d0:	4683      	mov	fp, r0
 800f4d2:	f000 feff 	bl	80102d4 <__mcmp>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	9b08      	ldr	r3, [sp, #32]
 800f4da:	dc02      	bgt.n	800f4e2 <_dtoa_r+0xaba>
 800f4dc:	d1de      	bne.n	800f49c <_dtoa_r+0xa74>
 800f4de:	07da      	lsls	r2, r3, #31
 800f4e0:	d5dc      	bpl.n	800f49c <_dtoa_r+0xa74>
 800f4e2:	2b39      	cmp	r3, #57	; 0x39
 800f4e4:	d1d8      	bne.n	800f498 <_dtoa_r+0xa70>
 800f4e6:	2339      	movs	r3, #57	; 0x39
 800f4e8:	9a04      	ldr	r2, [sp, #16]
 800f4ea:	7013      	strb	r3, [r2, #0]
 800f4ec:	463b      	mov	r3, r7
 800f4ee:	461f      	mov	r7, r3
 800f4f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	2a39      	cmp	r2, #57	; 0x39
 800f4f8:	d050      	beq.n	800f59c <_dtoa_r+0xb74>
 800f4fa:	3201      	adds	r2, #1
 800f4fc:	701a      	strb	r2, [r3, #0]
 800f4fe:	e747      	b.n	800f390 <_dtoa_r+0x968>
 800f500:	2a00      	cmp	r2, #0
 800f502:	dd03      	ble.n	800f50c <_dtoa_r+0xae4>
 800f504:	2b39      	cmp	r3, #57	; 0x39
 800f506:	d0ee      	beq.n	800f4e6 <_dtoa_r+0xabe>
 800f508:	3301      	adds	r3, #1
 800f50a:	e7c7      	b.n	800f49c <_dtoa_r+0xa74>
 800f50c:	9a08      	ldr	r2, [sp, #32]
 800f50e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f510:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f514:	428a      	cmp	r2, r1
 800f516:	d02a      	beq.n	800f56e <_dtoa_r+0xb46>
 800f518:	4659      	mov	r1, fp
 800f51a:	2300      	movs	r3, #0
 800f51c:	220a      	movs	r2, #10
 800f51e:	4628      	mov	r0, r5
 800f520:	f000 fc72 	bl	800fe08 <__multadd>
 800f524:	45b0      	cmp	r8, r6
 800f526:	4683      	mov	fp, r0
 800f528:	f04f 0300 	mov.w	r3, #0
 800f52c:	f04f 020a 	mov.w	r2, #10
 800f530:	4641      	mov	r1, r8
 800f532:	4628      	mov	r0, r5
 800f534:	d107      	bne.n	800f546 <_dtoa_r+0xb1e>
 800f536:	f000 fc67 	bl	800fe08 <__multadd>
 800f53a:	4680      	mov	r8, r0
 800f53c:	4606      	mov	r6, r0
 800f53e:	9b08      	ldr	r3, [sp, #32]
 800f540:	3301      	adds	r3, #1
 800f542:	9308      	str	r3, [sp, #32]
 800f544:	e775      	b.n	800f432 <_dtoa_r+0xa0a>
 800f546:	f000 fc5f 	bl	800fe08 <__multadd>
 800f54a:	4631      	mov	r1, r6
 800f54c:	4680      	mov	r8, r0
 800f54e:	2300      	movs	r3, #0
 800f550:	220a      	movs	r2, #10
 800f552:	4628      	mov	r0, r5
 800f554:	f000 fc58 	bl	800fe08 <__multadd>
 800f558:	4606      	mov	r6, r0
 800f55a:	e7f0      	b.n	800f53e <_dtoa_r+0xb16>
 800f55c:	f1b9 0f00 	cmp.w	r9, #0
 800f560:	bfcc      	ite	gt
 800f562:	464f      	movgt	r7, r9
 800f564:	2701      	movle	r7, #1
 800f566:	f04f 0800 	mov.w	r8, #0
 800f56a:	9a03      	ldr	r2, [sp, #12]
 800f56c:	4417      	add	r7, r2
 800f56e:	4659      	mov	r1, fp
 800f570:	2201      	movs	r2, #1
 800f572:	4628      	mov	r0, r5
 800f574:	9308      	str	r3, [sp, #32]
 800f576:	f000 fe3d 	bl	80101f4 <__lshift>
 800f57a:	4621      	mov	r1, r4
 800f57c:	4683      	mov	fp, r0
 800f57e:	f000 fea9 	bl	80102d4 <__mcmp>
 800f582:	2800      	cmp	r0, #0
 800f584:	dcb2      	bgt.n	800f4ec <_dtoa_r+0xac4>
 800f586:	d102      	bne.n	800f58e <_dtoa_r+0xb66>
 800f588:	9b08      	ldr	r3, [sp, #32]
 800f58a:	07db      	lsls	r3, r3, #31
 800f58c:	d4ae      	bmi.n	800f4ec <_dtoa_r+0xac4>
 800f58e:	463b      	mov	r3, r7
 800f590:	461f      	mov	r7, r3
 800f592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f596:	2a30      	cmp	r2, #48	; 0x30
 800f598:	d0fa      	beq.n	800f590 <_dtoa_r+0xb68>
 800f59a:	e6f9      	b.n	800f390 <_dtoa_r+0x968>
 800f59c:	9a03      	ldr	r2, [sp, #12]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d1a5      	bne.n	800f4ee <_dtoa_r+0xac6>
 800f5a2:	2331      	movs	r3, #49	; 0x31
 800f5a4:	f10a 0a01 	add.w	sl, sl, #1
 800f5a8:	e779      	b.n	800f49e <_dtoa_r+0xa76>
 800f5aa:	4b14      	ldr	r3, [pc, #80]	; (800f5fc <_dtoa_r+0xbd4>)
 800f5ac:	f7ff baa8 	b.w	800eb00 <_dtoa_r+0xd8>
 800f5b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f47f aa81 	bne.w	800eaba <_dtoa_r+0x92>
 800f5b8:	4b11      	ldr	r3, [pc, #68]	; (800f600 <_dtoa_r+0xbd8>)
 800f5ba:	f7ff baa1 	b.w	800eb00 <_dtoa_r+0xd8>
 800f5be:	f1b9 0f00 	cmp.w	r9, #0
 800f5c2:	dc03      	bgt.n	800f5cc <_dtoa_r+0xba4>
 800f5c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	f73f aecb 	bgt.w	800f362 <_dtoa_r+0x93a>
 800f5cc:	9f03      	ldr	r7, [sp, #12]
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4658      	mov	r0, fp
 800f5d2:	f7ff f99d 	bl	800e910 <quorem>
 800f5d6:	9a03      	ldr	r2, [sp, #12]
 800f5d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f5dc:	f807 3b01 	strb.w	r3, [r7], #1
 800f5e0:	1aba      	subs	r2, r7, r2
 800f5e2:	4591      	cmp	r9, r2
 800f5e4:	ddba      	ble.n	800f55c <_dtoa_r+0xb34>
 800f5e6:	4659      	mov	r1, fp
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	220a      	movs	r2, #10
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f000 fc0b 	bl	800fe08 <__multadd>
 800f5f2:	4683      	mov	fp, r0
 800f5f4:	e7eb      	b.n	800f5ce <_dtoa_r+0xba6>
 800f5f6:	bf00      	nop
 800f5f8:	08011ba7 	.word	0x08011ba7
 800f5fc:	08011ab4 	.word	0x08011ab4
 800f600:	08011b28 	.word	0x08011b28

0800f604 <rshift>:
 800f604:	6903      	ldr	r3, [r0, #16]
 800f606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f60a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f60e:	f100 0414 	add.w	r4, r0, #20
 800f612:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f616:	dd46      	ble.n	800f6a6 <rshift+0xa2>
 800f618:	f011 011f 	ands.w	r1, r1, #31
 800f61c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f620:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f624:	d10c      	bne.n	800f640 <rshift+0x3c>
 800f626:	4629      	mov	r1, r5
 800f628:	f100 0710 	add.w	r7, r0, #16
 800f62c:	42b1      	cmp	r1, r6
 800f62e:	d335      	bcc.n	800f69c <rshift+0x98>
 800f630:	1a9b      	subs	r3, r3, r2
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	1eea      	subs	r2, r5, #3
 800f636:	4296      	cmp	r6, r2
 800f638:	bf38      	it	cc
 800f63a:	2300      	movcc	r3, #0
 800f63c:	4423      	add	r3, r4
 800f63e:	e015      	b.n	800f66c <rshift+0x68>
 800f640:	46a1      	mov	r9, r4
 800f642:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f646:	f1c1 0820 	rsb	r8, r1, #32
 800f64a:	40cf      	lsrs	r7, r1
 800f64c:	f105 0e04 	add.w	lr, r5, #4
 800f650:	4576      	cmp	r6, lr
 800f652:	46f4      	mov	ip, lr
 800f654:	d816      	bhi.n	800f684 <rshift+0x80>
 800f656:	1a9a      	subs	r2, r3, r2
 800f658:	0092      	lsls	r2, r2, #2
 800f65a:	3a04      	subs	r2, #4
 800f65c:	3501      	adds	r5, #1
 800f65e:	42ae      	cmp	r6, r5
 800f660:	bf38      	it	cc
 800f662:	2200      	movcc	r2, #0
 800f664:	18a3      	adds	r3, r4, r2
 800f666:	50a7      	str	r7, [r4, r2]
 800f668:	b107      	cbz	r7, 800f66c <rshift+0x68>
 800f66a:	3304      	adds	r3, #4
 800f66c:	42a3      	cmp	r3, r4
 800f66e:	eba3 0204 	sub.w	r2, r3, r4
 800f672:	bf08      	it	eq
 800f674:	2300      	moveq	r3, #0
 800f676:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f67a:	6102      	str	r2, [r0, #16]
 800f67c:	bf08      	it	eq
 800f67e:	6143      	streq	r3, [r0, #20]
 800f680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f684:	f8dc c000 	ldr.w	ip, [ip]
 800f688:	fa0c fc08 	lsl.w	ip, ip, r8
 800f68c:	ea4c 0707 	orr.w	r7, ip, r7
 800f690:	f849 7b04 	str.w	r7, [r9], #4
 800f694:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f698:	40cf      	lsrs	r7, r1
 800f69a:	e7d9      	b.n	800f650 <rshift+0x4c>
 800f69c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f6a0:	f847 cf04 	str.w	ip, [r7, #4]!
 800f6a4:	e7c2      	b.n	800f62c <rshift+0x28>
 800f6a6:	4623      	mov	r3, r4
 800f6a8:	e7e0      	b.n	800f66c <rshift+0x68>

0800f6aa <__hexdig_fun>:
 800f6aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f6ae:	2b09      	cmp	r3, #9
 800f6b0:	d802      	bhi.n	800f6b8 <__hexdig_fun+0xe>
 800f6b2:	3820      	subs	r0, #32
 800f6b4:	b2c0      	uxtb	r0, r0
 800f6b6:	4770      	bx	lr
 800f6b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f6bc:	2b05      	cmp	r3, #5
 800f6be:	d801      	bhi.n	800f6c4 <__hexdig_fun+0x1a>
 800f6c0:	3847      	subs	r0, #71	; 0x47
 800f6c2:	e7f7      	b.n	800f6b4 <__hexdig_fun+0xa>
 800f6c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f6c8:	2b05      	cmp	r3, #5
 800f6ca:	d801      	bhi.n	800f6d0 <__hexdig_fun+0x26>
 800f6cc:	3827      	subs	r0, #39	; 0x27
 800f6ce:	e7f1      	b.n	800f6b4 <__hexdig_fun+0xa>
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	4770      	bx	lr

0800f6d4 <__gethex>:
 800f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d8:	b08b      	sub	sp, #44	; 0x2c
 800f6da:	9305      	str	r3, [sp, #20]
 800f6dc:	4bb2      	ldr	r3, [pc, #712]	; (800f9a8 <__gethex+0x2d4>)
 800f6de:	9002      	str	r0, [sp, #8]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	468b      	mov	fp, r1
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	4690      	mov	r8, r2
 800f6e8:	9303      	str	r3, [sp, #12]
 800f6ea:	f7f0 fd49 	bl	8000180 <strlen>
 800f6ee:	4682      	mov	sl, r0
 800f6f0:	9b03      	ldr	r3, [sp, #12]
 800f6f2:	f8db 2000 	ldr.w	r2, [fp]
 800f6f6:	4403      	add	r3, r0
 800f6f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f6fc:	9306      	str	r3, [sp, #24]
 800f6fe:	1c93      	adds	r3, r2, #2
 800f700:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f704:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f708:	32fe      	adds	r2, #254	; 0xfe
 800f70a:	18d1      	adds	r1, r2, r3
 800f70c:	461f      	mov	r7, r3
 800f70e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f712:	9101      	str	r1, [sp, #4]
 800f714:	2830      	cmp	r0, #48	; 0x30
 800f716:	d0f8      	beq.n	800f70a <__gethex+0x36>
 800f718:	f7ff ffc7 	bl	800f6aa <__hexdig_fun>
 800f71c:	4604      	mov	r4, r0
 800f71e:	2800      	cmp	r0, #0
 800f720:	d13a      	bne.n	800f798 <__gethex+0xc4>
 800f722:	4652      	mov	r2, sl
 800f724:	4638      	mov	r0, r7
 800f726:	9903      	ldr	r1, [sp, #12]
 800f728:	f7fe fac6 	bl	800dcb8 <strncmp>
 800f72c:	4605      	mov	r5, r0
 800f72e:	2800      	cmp	r0, #0
 800f730:	d166      	bne.n	800f800 <__gethex+0x12c>
 800f732:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f736:	eb07 060a 	add.w	r6, r7, sl
 800f73a:	f7ff ffb6 	bl	800f6aa <__hexdig_fun>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d060      	beq.n	800f804 <__gethex+0x130>
 800f742:	4633      	mov	r3, r6
 800f744:	7818      	ldrb	r0, [r3, #0]
 800f746:	461f      	mov	r7, r3
 800f748:	2830      	cmp	r0, #48	; 0x30
 800f74a:	f103 0301 	add.w	r3, r3, #1
 800f74e:	d0f9      	beq.n	800f744 <__gethex+0x70>
 800f750:	f7ff ffab 	bl	800f6aa <__hexdig_fun>
 800f754:	2301      	movs	r3, #1
 800f756:	fab0 f480 	clz	r4, r0
 800f75a:	4635      	mov	r5, r6
 800f75c:	0964      	lsrs	r4, r4, #5
 800f75e:	9301      	str	r3, [sp, #4]
 800f760:	463a      	mov	r2, r7
 800f762:	4616      	mov	r6, r2
 800f764:	7830      	ldrb	r0, [r6, #0]
 800f766:	3201      	adds	r2, #1
 800f768:	f7ff ff9f 	bl	800f6aa <__hexdig_fun>
 800f76c:	2800      	cmp	r0, #0
 800f76e:	d1f8      	bne.n	800f762 <__gethex+0x8e>
 800f770:	4652      	mov	r2, sl
 800f772:	4630      	mov	r0, r6
 800f774:	9903      	ldr	r1, [sp, #12]
 800f776:	f7fe fa9f 	bl	800dcb8 <strncmp>
 800f77a:	b980      	cbnz	r0, 800f79e <__gethex+0xca>
 800f77c:	b94d      	cbnz	r5, 800f792 <__gethex+0xbe>
 800f77e:	eb06 050a 	add.w	r5, r6, sl
 800f782:	462a      	mov	r2, r5
 800f784:	4616      	mov	r6, r2
 800f786:	7830      	ldrb	r0, [r6, #0]
 800f788:	3201      	adds	r2, #1
 800f78a:	f7ff ff8e 	bl	800f6aa <__hexdig_fun>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d1f8      	bne.n	800f784 <__gethex+0xb0>
 800f792:	1bad      	subs	r5, r5, r6
 800f794:	00ad      	lsls	r5, r5, #2
 800f796:	e004      	b.n	800f7a2 <__gethex+0xce>
 800f798:	2400      	movs	r4, #0
 800f79a:	4625      	mov	r5, r4
 800f79c:	e7e0      	b.n	800f760 <__gethex+0x8c>
 800f79e:	2d00      	cmp	r5, #0
 800f7a0:	d1f7      	bne.n	800f792 <__gethex+0xbe>
 800f7a2:	7833      	ldrb	r3, [r6, #0]
 800f7a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f7a8:	2b50      	cmp	r3, #80	; 0x50
 800f7aa:	d139      	bne.n	800f820 <__gethex+0x14c>
 800f7ac:	7873      	ldrb	r3, [r6, #1]
 800f7ae:	2b2b      	cmp	r3, #43	; 0x2b
 800f7b0:	d02a      	beq.n	800f808 <__gethex+0x134>
 800f7b2:	2b2d      	cmp	r3, #45	; 0x2d
 800f7b4:	d02c      	beq.n	800f810 <__gethex+0x13c>
 800f7b6:	f04f 0900 	mov.w	r9, #0
 800f7ba:	1c71      	adds	r1, r6, #1
 800f7bc:	7808      	ldrb	r0, [r1, #0]
 800f7be:	f7ff ff74 	bl	800f6aa <__hexdig_fun>
 800f7c2:	1e43      	subs	r3, r0, #1
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	2b18      	cmp	r3, #24
 800f7c8:	d82a      	bhi.n	800f820 <__gethex+0x14c>
 800f7ca:	f1a0 0210 	sub.w	r2, r0, #16
 800f7ce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f7d2:	f7ff ff6a 	bl	800f6aa <__hexdig_fun>
 800f7d6:	1e43      	subs	r3, r0, #1
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b18      	cmp	r3, #24
 800f7dc:	d91b      	bls.n	800f816 <__gethex+0x142>
 800f7de:	f1b9 0f00 	cmp.w	r9, #0
 800f7e2:	d000      	beq.n	800f7e6 <__gethex+0x112>
 800f7e4:	4252      	negs	r2, r2
 800f7e6:	4415      	add	r5, r2
 800f7e8:	f8cb 1000 	str.w	r1, [fp]
 800f7ec:	b1d4      	cbz	r4, 800f824 <__gethex+0x150>
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bf14      	ite	ne
 800f7f4:	2700      	movne	r7, #0
 800f7f6:	2706      	moveq	r7, #6
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	b00b      	add	sp, #44	; 0x2c
 800f7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f800:	463e      	mov	r6, r7
 800f802:	4625      	mov	r5, r4
 800f804:	2401      	movs	r4, #1
 800f806:	e7cc      	b.n	800f7a2 <__gethex+0xce>
 800f808:	f04f 0900 	mov.w	r9, #0
 800f80c:	1cb1      	adds	r1, r6, #2
 800f80e:	e7d5      	b.n	800f7bc <__gethex+0xe8>
 800f810:	f04f 0901 	mov.w	r9, #1
 800f814:	e7fa      	b.n	800f80c <__gethex+0x138>
 800f816:	230a      	movs	r3, #10
 800f818:	fb03 0202 	mla	r2, r3, r2, r0
 800f81c:	3a10      	subs	r2, #16
 800f81e:	e7d6      	b.n	800f7ce <__gethex+0xfa>
 800f820:	4631      	mov	r1, r6
 800f822:	e7e1      	b.n	800f7e8 <__gethex+0x114>
 800f824:	4621      	mov	r1, r4
 800f826:	1bf3      	subs	r3, r6, r7
 800f828:	3b01      	subs	r3, #1
 800f82a:	2b07      	cmp	r3, #7
 800f82c:	dc0a      	bgt.n	800f844 <__gethex+0x170>
 800f82e:	9802      	ldr	r0, [sp, #8]
 800f830:	f000 fa88 	bl	800fd44 <_Balloc>
 800f834:	4604      	mov	r4, r0
 800f836:	b940      	cbnz	r0, 800f84a <__gethex+0x176>
 800f838:	4602      	mov	r2, r0
 800f83a:	21de      	movs	r1, #222	; 0xde
 800f83c:	4b5b      	ldr	r3, [pc, #364]	; (800f9ac <__gethex+0x2d8>)
 800f83e:	485c      	ldr	r0, [pc, #368]	; (800f9b0 <__gethex+0x2dc>)
 800f840:	f001 f9a8 	bl	8010b94 <__assert_func>
 800f844:	3101      	adds	r1, #1
 800f846:	105b      	asrs	r3, r3, #1
 800f848:	e7ef      	b.n	800f82a <__gethex+0x156>
 800f84a:	f04f 0b00 	mov.w	fp, #0
 800f84e:	f100 0914 	add.w	r9, r0, #20
 800f852:	f1ca 0301 	rsb	r3, sl, #1
 800f856:	f8cd 9010 	str.w	r9, [sp, #16]
 800f85a:	f8cd b004 	str.w	fp, [sp, #4]
 800f85e:	9308      	str	r3, [sp, #32]
 800f860:	42b7      	cmp	r7, r6
 800f862:	d33f      	bcc.n	800f8e4 <__gethex+0x210>
 800f864:	9f04      	ldr	r7, [sp, #16]
 800f866:	9b01      	ldr	r3, [sp, #4]
 800f868:	f847 3b04 	str.w	r3, [r7], #4
 800f86c:	eba7 0709 	sub.w	r7, r7, r9
 800f870:	10bf      	asrs	r7, r7, #2
 800f872:	6127      	str	r7, [r4, #16]
 800f874:	4618      	mov	r0, r3
 800f876:	f000 fb57 	bl	800ff28 <__hi0bits>
 800f87a:	017f      	lsls	r7, r7, #5
 800f87c:	f8d8 6000 	ldr.w	r6, [r8]
 800f880:	1a3f      	subs	r7, r7, r0
 800f882:	42b7      	cmp	r7, r6
 800f884:	dd62      	ble.n	800f94c <__gethex+0x278>
 800f886:	1bbf      	subs	r7, r7, r6
 800f888:	4639      	mov	r1, r7
 800f88a:	4620      	mov	r0, r4
 800f88c:	f000 fef1 	bl	8010672 <__any_on>
 800f890:	4682      	mov	sl, r0
 800f892:	b1a8      	cbz	r0, 800f8c0 <__gethex+0x1ec>
 800f894:	f04f 0a01 	mov.w	sl, #1
 800f898:	1e7b      	subs	r3, r7, #1
 800f89a:	1159      	asrs	r1, r3, #5
 800f89c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f8a0:	f003 021f 	and.w	r2, r3, #31
 800f8a4:	fa0a f202 	lsl.w	r2, sl, r2
 800f8a8:	420a      	tst	r2, r1
 800f8aa:	d009      	beq.n	800f8c0 <__gethex+0x1ec>
 800f8ac:	4553      	cmp	r3, sl
 800f8ae:	dd05      	ble.n	800f8bc <__gethex+0x1e8>
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	1eb9      	subs	r1, r7, #2
 800f8b4:	f000 fedd 	bl	8010672 <__any_on>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d144      	bne.n	800f946 <__gethex+0x272>
 800f8bc:	f04f 0a02 	mov.w	sl, #2
 800f8c0:	4639      	mov	r1, r7
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7ff fe9e 	bl	800f604 <rshift>
 800f8c8:	443d      	add	r5, r7
 800f8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8ce:	42ab      	cmp	r3, r5
 800f8d0:	da4a      	bge.n	800f968 <__gethex+0x294>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	9802      	ldr	r0, [sp, #8]
 800f8d6:	f000 fa75 	bl	800fdc4 <_Bfree>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f8de:	27a3      	movs	r7, #163	; 0xa3
 800f8e0:	6013      	str	r3, [r2, #0]
 800f8e2:	e789      	b.n	800f7f8 <__gethex+0x124>
 800f8e4:	1e73      	subs	r3, r6, #1
 800f8e6:	9a06      	ldr	r2, [sp, #24]
 800f8e8:	9307      	str	r3, [sp, #28]
 800f8ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d019      	beq.n	800f926 <__gethex+0x252>
 800f8f2:	f1bb 0f20 	cmp.w	fp, #32
 800f8f6:	d107      	bne.n	800f908 <__gethex+0x234>
 800f8f8:	9b04      	ldr	r3, [sp, #16]
 800f8fa:	9a01      	ldr	r2, [sp, #4]
 800f8fc:	f843 2b04 	str.w	r2, [r3], #4
 800f900:	9304      	str	r3, [sp, #16]
 800f902:	2300      	movs	r3, #0
 800f904:	469b      	mov	fp, r3
 800f906:	9301      	str	r3, [sp, #4]
 800f908:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f90c:	f7ff fecd 	bl	800f6aa <__hexdig_fun>
 800f910:	9b01      	ldr	r3, [sp, #4]
 800f912:	f000 000f 	and.w	r0, r0, #15
 800f916:	fa00 f00b 	lsl.w	r0, r0, fp
 800f91a:	4303      	orrs	r3, r0
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	f10b 0b04 	add.w	fp, fp, #4
 800f922:	9b07      	ldr	r3, [sp, #28]
 800f924:	e00d      	b.n	800f942 <__gethex+0x26e>
 800f926:	9a08      	ldr	r2, [sp, #32]
 800f928:	1e73      	subs	r3, r6, #1
 800f92a:	4413      	add	r3, r2
 800f92c:	42bb      	cmp	r3, r7
 800f92e:	d3e0      	bcc.n	800f8f2 <__gethex+0x21e>
 800f930:	4618      	mov	r0, r3
 800f932:	4652      	mov	r2, sl
 800f934:	9903      	ldr	r1, [sp, #12]
 800f936:	9309      	str	r3, [sp, #36]	; 0x24
 800f938:	f7fe f9be 	bl	800dcb8 <strncmp>
 800f93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f93e:	2800      	cmp	r0, #0
 800f940:	d1d7      	bne.n	800f8f2 <__gethex+0x21e>
 800f942:	461e      	mov	r6, r3
 800f944:	e78c      	b.n	800f860 <__gethex+0x18c>
 800f946:	f04f 0a03 	mov.w	sl, #3
 800f94a:	e7b9      	b.n	800f8c0 <__gethex+0x1ec>
 800f94c:	da09      	bge.n	800f962 <__gethex+0x28e>
 800f94e:	1bf7      	subs	r7, r6, r7
 800f950:	4621      	mov	r1, r4
 800f952:	463a      	mov	r2, r7
 800f954:	9802      	ldr	r0, [sp, #8]
 800f956:	f000 fc4d 	bl	80101f4 <__lshift>
 800f95a:	4604      	mov	r4, r0
 800f95c:	1bed      	subs	r5, r5, r7
 800f95e:	f100 0914 	add.w	r9, r0, #20
 800f962:	f04f 0a00 	mov.w	sl, #0
 800f966:	e7b0      	b.n	800f8ca <__gethex+0x1f6>
 800f968:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f96c:	42a8      	cmp	r0, r5
 800f96e:	dd72      	ble.n	800fa56 <__gethex+0x382>
 800f970:	1b45      	subs	r5, r0, r5
 800f972:	42ae      	cmp	r6, r5
 800f974:	dc35      	bgt.n	800f9e2 <__gethex+0x30e>
 800f976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d029      	beq.n	800f9d2 <__gethex+0x2fe>
 800f97e:	2b03      	cmp	r3, #3
 800f980:	d02b      	beq.n	800f9da <__gethex+0x306>
 800f982:	2b01      	cmp	r3, #1
 800f984:	d11c      	bne.n	800f9c0 <__gethex+0x2ec>
 800f986:	42ae      	cmp	r6, r5
 800f988:	d11a      	bne.n	800f9c0 <__gethex+0x2ec>
 800f98a:	2e01      	cmp	r6, #1
 800f98c:	d112      	bne.n	800f9b4 <__gethex+0x2e0>
 800f98e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f992:	9a05      	ldr	r2, [sp, #20]
 800f994:	2762      	movs	r7, #98	; 0x62
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	2301      	movs	r3, #1
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	f8c9 3000 	str.w	r3, [r9]
 800f9a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9a2:	601c      	str	r4, [r3, #0]
 800f9a4:	e728      	b.n	800f7f8 <__gethex+0x124>
 800f9a6:	bf00      	nop
 800f9a8:	08011c20 	.word	0x08011c20
 800f9ac:	08011ba7 	.word	0x08011ba7
 800f9b0:	08011bb8 	.word	0x08011bb8
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	1e71      	subs	r1, r6, #1
 800f9b8:	f000 fe5b 	bl	8010672 <__any_on>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	d1e6      	bne.n	800f98e <__gethex+0x2ba>
 800f9c0:	4621      	mov	r1, r4
 800f9c2:	9802      	ldr	r0, [sp, #8]
 800f9c4:	f000 f9fe 	bl	800fdc4 <_Bfree>
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f9cc:	2750      	movs	r7, #80	; 0x50
 800f9ce:	6013      	str	r3, [r2, #0]
 800f9d0:	e712      	b.n	800f7f8 <__gethex+0x124>
 800f9d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1f3      	bne.n	800f9c0 <__gethex+0x2ec>
 800f9d8:	e7d9      	b.n	800f98e <__gethex+0x2ba>
 800f9da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1d6      	bne.n	800f98e <__gethex+0x2ba>
 800f9e0:	e7ee      	b.n	800f9c0 <__gethex+0x2ec>
 800f9e2:	1e6f      	subs	r7, r5, #1
 800f9e4:	f1ba 0f00 	cmp.w	sl, #0
 800f9e8:	d132      	bne.n	800fa50 <__gethex+0x37c>
 800f9ea:	b127      	cbz	r7, 800f9f6 <__gethex+0x322>
 800f9ec:	4639      	mov	r1, r7
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 fe3f 	bl	8010672 <__any_on>
 800f9f4:	4682      	mov	sl, r0
 800f9f6:	2101      	movs	r1, #1
 800f9f8:	117b      	asrs	r3, r7, #5
 800f9fa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f9fe:	f007 071f 	and.w	r7, r7, #31
 800fa02:	fa01 f707 	lsl.w	r7, r1, r7
 800fa06:	421f      	tst	r7, r3
 800fa08:	f04f 0702 	mov.w	r7, #2
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	4620      	mov	r0, r4
 800fa10:	bf18      	it	ne
 800fa12:	f04a 0a02 	orrne.w	sl, sl, #2
 800fa16:	1b76      	subs	r6, r6, r5
 800fa18:	f7ff fdf4 	bl	800f604 <rshift>
 800fa1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fa20:	f1ba 0f00 	cmp.w	sl, #0
 800fa24:	d048      	beq.n	800fab8 <__gethex+0x3e4>
 800fa26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa2a:	2b02      	cmp	r3, #2
 800fa2c:	d015      	beq.n	800fa5a <__gethex+0x386>
 800fa2e:	2b03      	cmp	r3, #3
 800fa30:	d017      	beq.n	800fa62 <__gethex+0x38e>
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d109      	bne.n	800fa4a <__gethex+0x376>
 800fa36:	f01a 0f02 	tst.w	sl, #2
 800fa3a:	d006      	beq.n	800fa4a <__gethex+0x376>
 800fa3c:	f8d9 0000 	ldr.w	r0, [r9]
 800fa40:	ea4a 0a00 	orr.w	sl, sl, r0
 800fa44:	f01a 0f01 	tst.w	sl, #1
 800fa48:	d10e      	bne.n	800fa68 <__gethex+0x394>
 800fa4a:	f047 0710 	orr.w	r7, r7, #16
 800fa4e:	e033      	b.n	800fab8 <__gethex+0x3e4>
 800fa50:	f04f 0a01 	mov.w	sl, #1
 800fa54:	e7cf      	b.n	800f9f6 <__gethex+0x322>
 800fa56:	2701      	movs	r7, #1
 800fa58:	e7e2      	b.n	800fa20 <__gethex+0x34c>
 800fa5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa5c:	f1c3 0301 	rsb	r3, r3, #1
 800fa60:	9315      	str	r3, [sp, #84]	; 0x54
 800fa62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d0f0      	beq.n	800fa4a <__gethex+0x376>
 800fa68:	f04f 0c00 	mov.w	ip, #0
 800fa6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa70:	f104 0314 	add.w	r3, r4, #20
 800fa74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fa78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fa86:	d01c      	beq.n	800fac2 <__gethex+0x3ee>
 800fa88:	3201      	adds	r2, #1
 800fa8a:	6002      	str	r2, [r0, #0]
 800fa8c:	2f02      	cmp	r7, #2
 800fa8e:	f104 0314 	add.w	r3, r4, #20
 800fa92:	d13d      	bne.n	800fb10 <__gethex+0x43c>
 800fa94:	f8d8 2000 	ldr.w	r2, [r8]
 800fa98:	3a01      	subs	r2, #1
 800fa9a:	42b2      	cmp	r2, r6
 800fa9c:	d10a      	bne.n	800fab4 <__gethex+0x3e0>
 800fa9e:	2201      	movs	r2, #1
 800faa0:	1171      	asrs	r1, r6, #5
 800faa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800faa6:	f006 061f 	and.w	r6, r6, #31
 800faaa:	fa02 f606 	lsl.w	r6, r2, r6
 800faae:	421e      	tst	r6, r3
 800fab0:	bf18      	it	ne
 800fab2:	4617      	movne	r7, r2
 800fab4:	f047 0720 	orr.w	r7, r7, #32
 800fab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800faba:	601c      	str	r4, [r3, #0]
 800fabc:	9b05      	ldr	r3, [sp, #20]
 800fabe:	601d      	str	r5, [r3, #0]
 800fac0:	e69a      	b.n	800f7f8 <__gethex+0x124>
 800fac2:	4299      	cmp	r1, r3
 800fac4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fac8:	d8d8      	bhi.n	800fa7c <__gethex+0x3a8>
 800faca:	68a3      	ldr	r3, [r4, #8]
 800facc:	459b      	cmp	fp, r3
 800face:	db17      	blt.n	800fb00 <__gethex+0x42c>
 800fad0:	6861      	ldr	r1, [r4, #4]
 800fad2:	9802      	ldr	r0, [sp, #8]
 800fad4:	3101      	adds	r1, #1
 800fad6:	f000 f935 	bl	800fd44 <_Balloc>
 800fada:	4681      	mov	r9, r0
 800fadc:	b918      	cbnz	r0, 800fae6 <__gethex+0x412>
 800fade:	4602      	mov	r2, r0
 800fae0:	2184      	movs	r1, #132	; 0x84
 800fae2:	4b19      	ldr	r3, [pc, #100]	; (800fb48 <__gethex+0x474>)
 800fae4:	e6ab      	b.n	800f83e <__gethex+0x16a>
 800fae6:	6922      	ldr	r2, [r4, #16]
 800fae8:	f104 010c 	add.w	r1, r4, #12
 800faec:	3202      	adds	r2, #2
 800faee:	0092      	lsls	r2, r2, #2
 800faf0:	300c      	adds	r0, #12
 800faf2:	f000 f919 	bl	800fd28 <memcpy>
 800faf6:	4621      	mov	r1, r4
 800faf8:	9802      	ldr	r0, [sp, #8]
 800fafa:	f000 f963 	bl	800fdc4 <_Bfree>
 800fafe:	464c      	mov	r4, r9
 800fb00:	6923      	ldr	r3, [r4, #16]
 800fb02:	1c5a      	adds	r2, r3, #1
 800fb04:	6122      	str	r2, [r4, #16]
 800fb06:	2201      	movs	r2, #1
 800fb08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb0c:	615a      	str	r2, [r3, #20]
 800fb0e:	e7bd      	b.n	800fa8c <__gethex+0x3b8>
 800fb10:	6922      	ldr	r2, [r4, #16]
 800fb12:	455a      	cmp	r2, fp
 800fb14:	dd0b      	ble.n	800fb2e <__gethex+0x45a>
 800fb16:	2101      	movs	r1, #1
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7ff fd73 	bl	800f604 <rshift>
 800fb1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb22:	3501      	adds	r5, #1
 800fb24:	42ab      	cmp	r3, r5
 800fb26:	f6ff aed4 	blt.w	800f8d2 <__gethex+0x1fe>
 800fb2a:	2701      	movs	r7, #1
 800fb2c:	e7c2      	b.n	800fab4 <__gethex+0x3e0>
 800fb2e:	f016 061f 	ands.w	r6, r6, #31
 800fb32:	d0fa      	beq.n	800fb2a <__gethex+0x456>
 800fb34:	4453      	add	r3, sl
 800fb36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fb3a:	f000 f9f5 	bl	800ff28 <__hi0bits>
 800fb3e:	f1c6 0620 	rsb	r6, r6, #32
 800fb42:	42b0      	cmp	r0, r6
 800fb44:	dbe7      	blt.n	800fb16 <__gethex+0x442>
 800fb46:	e7f0      	b.n	800fb2a <__gethex+0x456>
 800fb48:	08011ba7 	.word	0x08011ba7

0800fb4c <L_shift>:
 800fb4c:	f1c2 0208 	rsb	r2, r2, #8
 800fb50:	0092      	lsls	r2, r2, #2
 800fb52:	b570      	push	{r4, r5, r6, lr}
 800fb54:	f1c2 0620 	rsb	r6, r2, #32
 800fb58:	6843      	ldr	r3, [r0, #4]
 800fb5a:	6804      	ldr	r4, [r0, #0]
 800fb5c:	fa03 f506 	lsl.w	r5, r3, r6
 800fb60:	432c      	orrs	r4, r5
 800fb62:	40d3      	lsrs	r3, r2
 800fb64:	6004      	str	r4, [r0, #0]
 800fb66:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb6a:	4288      	cmp	r0, r1
 800fb6c:	d3f4      	bcc.n	800fb58 <L_shift+0xc>
 800fb6e:	bd70      	pop	{r4, r5, r6, pc}

0800fb70 <__match>:
 800fb70:	b530      	push	{r4, r5, lr}
 800fb72:	6803      	ldr	r3, [r0, #0]
 800fb74:	3301      	adds	r3, #1
 800fb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb7a:	b914      	cbnz	r4, 800fb82 <__match+0x12>
 800fb7c:	6003      	str	r3, [r0, #0]
 800fb7e:	2001      	movs	r0, #1
 800fb80:	bd30      	pop	{r4, r5, pc}
 800fb82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fb8a:	2d19      	cmp	r5, #25
 800fb8c:	bf98      	it	ls
 800fb8e:	3220      	addls	r2, #32
 800fb90:	42a2      	cmp	r2, r4
 800fb92:	d0f0      	beq.n	800fb76 <__match+0x6>
 800fb94:	2000      	movs	r0, #0
 800fb96:	e7f3      	b.n	800fb80 <__match+0x10>

0800fb98 <__hexnan>:
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	680b      	ldr	r3, [r1, #0]
 800fba0:	4682      	mov	sl, r0
 800fba2:	115e      	asrs	r6, r3, #5
 800fba4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fba8:	f013 031f 	ands.w	r3, r3, #31
 800fbac:	bf18      	it	ne
 800fbae:	3604      	addne	r6, #4
 800fbb0:	1f37      	subs	r7, r6, #4
 800fbb2:	46b9      	mov	r9, r7
 800fbb4:	463c      	mov	r4, r7
 800fbb6:	46ab      	mov	fp, r5
 800fbb8:	b087      	sub	sp, #28
 800fbba:	4690      	mov	r8, r2
 800fbbc:	6802      	ldr	r2, [r0, #0]
 800fbbe:	9301      	str	r3, [sp, #4]
 800fbc0:	f846 5c04 	str.w	r5, [r6, #-4]
 800fbc4:	9502      	str	r5, [sp, #8]
 800fbc6:	7851      	ldrb	r1, [r2, #1]
 800fbc8:	1c53      	adds	r3, r2, #1
 800fbca:	9303      	str	r3, [sp, #12]
 800fbcc:	b341      	cbz	r1, 800fc20 <__hexnan+0x88>
 800fbce:	4608      	mov	r0, r1
 800fbd0:	9205      	str	r2, [sp, #20]
 800fbd2:	9104      	str	r1, [sp, #16]
 800fbd4:	f7ff fd69 	bl	800f6aa <__hexdig_fun>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d14f      	bne.n	800fc7c <__hexnan+0xe4>
 800fbdc:	9904      	ldr	r1, [sp, #16]
 800fbde:	9a05      	ldr	r2, [sp, #20]
 800fbe0:	2920      	cmp	r1, #32
 800fbe2:	d818      	bhi.n	800fc16 <__hexnan+0x7e>
 800fbe4:	9b02      	ldr	r3, [sp, #8]
 800fbe6:	459b      	cmp	fp, r3
 800fbe8:	dd13      	ble.n	800fc12 <__hexnan+0x7a>
 800fbea:	454c      	cmp	r4, r9
 800fbec:	d206      	bcs.n	800fbfc <__hexnan+0x64>
 800fbee:	2d07      	cmp	r5, #7
 800fbf0:	dc04      	bgt.n	800fbfc <__hexnan+0x64>
 800fbf2:	462a      	mov	r2, r5
 800fbf4:	4649      	mov	r1, r9
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f7ff ffa8 	bl	800fb4c <L_shift>
 800fbfc:	4544      	cmp	r4, r8
 800fbfe:	d950      	bls.n	800fca2 <__hexnan+0x10a>
 800fc00:	2300      	movs	r3, #0
 800fc02:	f1a4 0904 	sub.w	r9, r4, #4
 800fc06:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc0a:	461d      	mov	r5, r3
 800fc0c:	464c      	mov	r4, r9
 800fc0e:	f8cd b008 	str.w	fp, [sp, #8]
 800fc12:	9a03      	ldr	r2, [sp, #12]
 800fc14:	e7d7      	b.n	800fbc6 <__hexnan+0x2e>
 800fc16:	2929      	cmp	r1, #41	; 0x29
 800fc18:	d156      	bne.n	800fcc8 <__hexnan+0x130>
 800fc1a:	3202      	adds	r2, #2
 800fc1c:	f8ca 2000 	str.w	r2, [sl]
 800fc20:	f1bb 0f00 	cmp.w	fp, #0
 800fc24:	d050      	beq.n	800fcc8 <__hexnan+0x130>
 800fc26:	454c      	cmp	r4, r9
 800fc28:	d206      	bcs.n	800fc38 <__hexnan+0xa0>
 800fc2a:	2d07      	cmp	r5, #7
 800fc2c:	dc04      	bgt.n	800fc38 <__hexnan+0xa0>
 800fc2e:	462a      	mov	r2, r5
 800fc30:	4649      	mov	r1, r9
 800fc32:	4620      	mov	r0, r4
 800fc34:	f7ff ff8a 	bl	800fb4c <L_shift>
 800fc38:	4544      	cmp	r4, r8
 800fc3a:	d934      	bls.n	800fca6 <__hexnan+0x10e>
 800fc3c:	4623      	mov	r3, r4
 800fc3e:	f1a8 0204 	sub.w	r2, r8, #4
 800fc42:	f853 1b04 	ldr.w	r1, [r3], #4
 800fc46:	429f      	cmp	r7, r3
 800fc48:	f842 1f04 	str.w	r1, [r2, #4]!
 800fc4c:	d2f9      	bcs.n	800fc42 <__hexnan+0xaa>
 800fc4e:	1b3b      	subs	r3, r7, r4
 800fc50:	f023 0303 	bic.w	r3, r3, #3
 800fc54:	3304      	adds	r3, #4
 800fc56:	3401      	adds	r4, #1
 800fc58:	3e03      	subs	r6, #3
 800fc5a:	42b4      	cmp	r4, r6
 800fc5c:	bf88      	it	hi
 800fc5e:	2304      	movhi	r3, #4
 800fc60:	2200      	movs	r2, #0
 800fc62:	4443      	add	r3, r8
 800fc64:	f843 2b04 	str.w	r2, [r3], #4
 800fc68:	429f      	cmp	r7, r3
 800fc6a:	d2fb      	bcs.n	800fc64 <__hexnan+0xcc>
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	b91b      	cbnz	r3, 800fc78 <__hexnan+0xe0>
 800fc70:	4547      	cmp	r7, r8
 800fc72:	d127      	bne.n	800fcc4 <__hexnan+0x12c>
 800fc74:	2301      	movs	r3, #1
 800fc76:	603b      	str	r3, [r7, #0]
 800fc78:	2005      	movs	r0, #5
 800fc7a:	e026      	b.n	800fcca <__hexnan+0x132>
 800fc7c:	3501      	adds	r5, #1
 800fc7e:	2d08      	cmp	r5, #8
 800fc80:	f10b 0b01 	add.w	fp, fp, #1
 800fc84:	dd06      	ble.n	800fc94 <__hexnan+0xfc>
 800fc86:	4544      	cmp	r4, r8
 800fc88:	d9c3      	bls.n	800fc12 <__hexnan+0x7a>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	2501      	movs	r5, #1
 800fc8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc92:	3c04      	subs	r4, #4
 800fc94:	6822      	ldr	r2, [r4, #0]
 800fc96:	f000 000f 	and.w	r0, r0, #15
 800fc9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fc9e:	6022      	str	r2, [r4, #0]
 800fca0:	e7b7      	b.n	800fc12 <__hexnan+0x7a>
 800fca2:	2508      	movs	r5, #8
 800fca4:	e7b5      	b.n	800fc12 <__hexnan+0x7a>
 800fca6:	9b01      	ldr	r3, [sp, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d0df      	beq.n	800fc6c <__hexnan+0xd4>
 800fcac:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb0:	f1c3 0320 	rsb	r3, r3, #32
 800fcb4:	fa22 f303 	lsr.w	r3, r2, r3
 800fcb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fcbc:	401a      	ands	r2, r3
 800fcbe:	f846 2c04 	str.w	r2, [r6, #-4]
 800fcc2:	e7d3      	b.n	800fc6c <__hexnan+0xd4>
 800fcc4:	3f04      	subs	r7, #4
 800fcc6:	e7d1      	b.n	800fc6c <__hexnan+0xd4>
 800fcc8:	2004      	movs	r0, #4
 800fcca:	b007      	add	sp, #28
 800fccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcd0 <_localeconv_r>:
 800fcd0:	4800      	ldr	r0, [pc, #0]	; (800fcd4 <_localeconv_r+0x4>)
 800fcd2:	4770      	bx	lr
 800fcd4:	200002f4 	.word	0x200002f4

0800fcd8 <malloc>:
 800fcd8:	4b02      	ldr	r3, [pc, #8]	; (800fce4 <malloc+0xc>)
 800fcda:	4601      	mov	r1, r0
 800fcdc:	6818      	ldr	r0, [r3, #0]
 800fcde:	f000 bd65 	b.w	80107ac <_malloc_r>
 800fce2:	bf00      	nop
 800fce4:	2000019c 	.word	0x2000019c

0800fce8 <__ascii_mbtowc>:
 800fce8:	b082      	sub	sp, #8
 800fcea:	b901      	cbnz	r1, 800fcee <__ascii_mbtowc+0x6>
 800fcec:	a901      	add	r1, sp, #4
 800fcee:	b142      	cbz	r2, 800fd02 <__ascii_mbtowc+0x1a>
 800fcf0:	b14b      	cbz	r3, 800fd06 <__ascii_mbtowc+0x1e>
 800fcf2:	7813      	ldrb	r3, [r2, #0]
 800fcf4:	600b      	str	r3, [r1, #0]
 800fcf6:	7812      	ldrb	r2, [r2, #0]
 800fcf8:	1e10      	subs	r0, r2, #0
 800fcfa:	bf18      	it	ne
 800fcfc:	2001      	movne	r0, #1
 800fcfe:	b002      	add	sp, #8
 800fd00:	4770      	bx	lr
 800fd02:	4610      	mov	r0, r2
 800fd04:	e7fb      	b.n	800fcfe <__ascii_mbtowc+0x16>
 800fd06:	f06f 0001 	mvn.w	r0, #1
 800fd0a:	e7f8      	b.n	800fcfe <__ascii_mbtowc+0x16>

0800fd0c <memchr>:
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	b510      	push	{r4, lr}
 800fd10:	b2c9      	uxtb	r1, r1
 800fd12:	4402      	add	r2, r0
 800fd14:	4293      	cmp	r3, r2
 800fd16:	4618      	mov	r0, r3
 800fd18:	d101      	bne.n	800fd1e <memchr+0x12>
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	e003      	b.n	800fd26 <memchr+0x1a>
 800fd1e:	7804      	ldrb	r4, [r0, #0]
 800fd20:	3301      	adds	r3, #1
 800fd22:	428c      	cmp	r4, r1
 800fd24:	d1f6      	bne.n	800fd14 <memchr+0x8>
 800fd26:	bd10      	pop	{r4, pc}

0800fd28 <memcpy>:
 800fd28:	440a      	add	r2, r1
 800fd2a:	4291      	cmp	r1, r2
 800fd2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd30:	d100      	bne.n	800fd34 <memcpy+0xc>
 800fd32:	4770      	bx	lr
 800fd34:	b510      	push	{r4, lr}
 800fd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd3a:	4291      	cmp	r1, r2
 800fd3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd40:	d1f9      	bne.n	800fd36 <memcpy+0xe>
 800fd42:	bd10      	pop	{r4, pc}

0800fd44 <_Balloc>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd48:	4604      	mov	r4, r0
 800fd4a:	460d      	mov	r5, r1
 800fd4c:	b976      	cbnz	r6, 800fd6c <_Balloc+0x28>
 800fd4e:	2010      	movs	r0, #16
 800fd50:	f7ff ffc2 	bl	800fcd8 <malloc>
 800fd54:	4602      	mov	r2, r0
 800fd56:	6260      	str	r0, [r4, #36]	; 0x24
 800fd58:	b920      	cbnz	r0, 800fd64 <_Balloc+0x20>
 800fd5a:	2166      	movs	r1, #102	; 0x66
 800fd5c:	4b17      	ldr	r3, [pc, #92]	; (800fdbc <_Balloc+0x78>)
 800fd5e:	4818      	ldr	r0, [pc, #96]	; (800fdc0 <_Balloc+0x7c>)
 800fd60:	f000 ff18 	bl	8010b94 <__assert_func>
 800fd64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd68:	6006      	str	r6, [r0, #0]
 800fd6a:	60c6      	str	r6, [r0, #12]
 800fd6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd6e:	68f3      	ldr	r3, [r6, #12]
 800fd70:	b183      	cbz	r3, 800fd94 <_Balloc+0x50>
 800fd72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd7a:	b9b8      	cbnz	r0, 800fdac <_Balloc+0x68>
 800fd7c:	2101      	movs	r1, #1
 800fd7e:	fa01 f605 	lsl.w	r6, r1, r5
 800fd82:	1d72      	adds	r2, r6, #5
 800fd84:	4620      	mov	r0, r4
 800fd86:	0092      	lsls	r2, r2, #2
 800fd88:	f000 fc94 	bl	80106b4 <_calloc_r>
 800fd8c:	b160      	cbz	r0, 800fda8 <_Balloc+0x64>
 800fd8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd92:	e00e      	b.n	800fdb2 <_Balloc+0x6e>
 800fd94:	2221      	movs	r2, #33	; 0x21
 800fd96:	2104      	movs	r1, #4
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f000 fc8b 	bl	80106b4 <_calloc_r>
 800fd9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fda0:	60f0      	str	r0, [r6, #12]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1e4      	bne.n	800fd72 <_Balloc+0x2e>
 800fda8:	2000      	movs	r0, #0
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}
 800fdac:	6802      	ldr	r2, [r0, #0]
 800fdae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fdb8:	e7f7      	b.n	800fdaa <_Balloc+0x66>
 800fdba:	bf00      	nop
 800fdbc:	08011b35 	.word	0x08011b35
 800fdc0:	08011c34 	.word	0x08011c34

0800fdc4 <_Bfree>:
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdc8:	4605      	mov	r5, r0
 800fdca:	460c      	mov	r4, r1
 800fdcc:	b976      	cbnz	r6, 800fdec <_Bfree+0x28>
 800fdce:	2010      	movs	r0, #16
 800fdd0:	f7ff ff82 	bl	800fcd8 <malloc>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	6268      	str	r0, [r5, #36]	; 0x24
 800fdd8:	b920      	cbnz	r0, 800fde4 <_Bfree+0x20>
 800fdda:	218a      	movs	r1, #138	; 0x8a
 800fddc:	4b08      	ldr	r3, [pc, #32]	; (800fe00 <_Bfree+0x3c>)
 800fdde:	4809      	ldr	r0, [pc, #36]	; (800fe04 <_Bfree+0x40>)
 800fde0:	f000 fed8 	bl	8010b94 <__assert_func>
 800fde4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fde8:	6006      	str	r6, [r0, #0]
 800fdea:	60c6      	str	r6, [r0, #12]
 800fdec:	b13c      	cbz	r4, 800fdfe <_Bfree+0x3a>
 800fdee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fdf0:	6862      	ldr	r2, [r4, #4]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdf8:	6021      	str	r1, [r4, #0]
 800fdfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}
 800fe00:	08011b35 	.word	0x08011b35
 800fe04:	08011c34 	.word	0x08011c34

0800fe08 <__multadd>:
 800fe08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0c:	4607      	mov	r7, r0
 800fe0e:	460c      	mov	r4, r1
 800fe10:	461e      	mov	r6, r3
 800fe12:	2000      	movs	r0, #0
 800fe14:	690d      	ldr	r5, [r1, #16]
 800fe16:	f101 0c14 	add.w	ip, r1, #20
 800fe1a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe1e:	3001      	adds	r0, #1
 800fe20:	b299      	uxth	r1, r3
 800fe22:	fb02 6101 	mla	r1, r2, r1, r6
 800fe26:	0c1e      	lsrs	r6, r3, #16
 800fe28:	0c0b      	lsrs	r3, r1, #16
 800fe2a:	fb02 3306 	mla	r3, r2, r6, r3
 800fe2e:	b289      	uxth	r1, r1
 800fe30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe34:	4285      	cmp	r5, r0
 800fe36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe3a:	f84c 1b04 	str.w	r1, [ip], #4
 800fe3e:	dcec      	bgt.n	800fe1a <__multadd+0x12>
 800fe40:	b30e      	cbz	r6, 800fe86 <__multadd+0x7e>
 800fe42:	68a3      	ldr	r3, [r4, #8]
 800fe44:	42ab      	cmp	r3, r5
 800fe46:	dc19      	bgt.n	800fe7c <__multadd+0x74>
 800fe48:	6861      	ldr	r1, [r4, #4]
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	3101      	adds	r1, #1
 800fe4e:	f7ff ff79 	bl	800fd44 <_Balloc>
 800fe52:	4680      	mov	r8, r0
 800fe54:	b928      	cbnz	r0, 800fe62 <__multadd+0x5a>
 800fe56:	4602      	mov	r2, r0
 800fe58:	21b5      	movs	r1, #181	; 0xb5
 800fe5a:	4b0c      	ldr	r3, [pc, #48]	; (800fe8c <__multadd+0x84>)
 800fe5c:	480c      	ldr	r0, [pc, #48]	; (800fe90 <__multadd+0x88>)
 800fe5e:	f000 fe99 	bl	8010b94 <__assert_func>
 800fe62:	6922      	ldr	r2, [r4, #16]
 800fe64:	f104 010c 	add.w	r1, r4, #12
 800fe68:	3202      	adds	r2, #2
 800fe6a:	0092      	lsls	r2, r2, #2
 800fe6c:	300c      	adds	r0, #12
 800fe6e:	f7ff ff5b 	bl	800fd28 <memcpy>
 800fe72:	4621      	mov	r1, r4
 800fe74:	4638      	mov	r0, r7
 800fe76:	f7ff ffa5 	bl	800fdc4 <_Bfree>
 800fe7a:	4644      	mov	r4, r8
 800fe7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe80:	3501      	adds	r5, #1
 800fe82:	615e      	str	r6, [r3, #20]
 800fe84:	6125      	str	r5, [r4, #16]
 800fe86:	4620      	mov	r0, r4
 800fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8c:	08011ba7 	.word	0x08011ba7
 800fe90:	08011c34 	.word	0x08011c34

0800fe94 <__s2b>:
 800fe94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe98:	4615      	mov	r5, r2
 800fe9a:	2209      	movs	r2, #9
 800fe9c:	461f      	mov	r7, r3
 800fe9e:	3308      	adds	r3, #8
 800fea0:	460c      	mov	r4, r1
 800fea2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fea6:	4606      	mov	r6, r0
 800fea8:	2201      	movs	r2, #1
 800feaa:	2100      	movs	r1, #0
 800feac:	429a      	cmp	r2, r3
 800feae:	db09      	blt.n	800fec4 <__s2b+0x30>
 800feb0:	4630      	mov	r0, r6
 800feb2:	f7ff ff47 	bl	800fd44 <_Balloc>
 800feb6:	b940      	cbnz	r0, 800feca <__s2b+0x36>
 800feb8:	4602      	mov	r2, r0
 800feba:	21ce      	movs	r1, #206	; 0xce
 800febc:	4b18      	ldr	r3, [pc, #96]	; (800ff20 <__s2b+0x8c>)
 800febe:	4819      	ldr	r0, [pc, #100]	; (800ff24 <__s2b+0x90>)
 800fec0:	f000 fe68 	bl	8010b94 <__assert_func>
 800fec4:	0052      	lsls	r2, r2, #1
 800fec6:	3101      	adds	r1, #1
 800fec8:	e7f0      	b.n	800feac <__s2b+0x18>
 800feca:	9b08      	ldr	r3, [sp, #32]
 800fecc:	2d09      	cmp	r5, #9
 800fece:	6143      	str	r3, [r0, #20]
 800fed0:	f04f 0301 	mov.w	r3, #1
 800fed4:	6103      	str	r3, [r0, #16]
 800fed6:	dd16      	ble.n	800ff06 <__s2b+0x72>
 800fed8:	f104 0909 	add.w	r9, r4, #9
 800fedc:	46c8      	mov	r8, r9
 800fede:	442c      	add	r4, r5
 800fee0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fee4:	4601      	mov	r1, r0
 800fee6:	220a      	movs	r2, #10
 800fee8:	4630      	mov	r0, r6
 800feea:	3b30      	subs	r3, #48	; 0x30
 800feec:	f7ff ff8c 	bl	800fe08 <__multadd>
 800fef0:	45a0      	cmp	r8, r4
 800fef2:	d1f5      	bne.n	800fee0 <__s2b+0x4c>
 800fef4:	f1a5 0408 	sub.w	r4, r5, #8
 800fef8:	444c      	add	r4, r9
 800fefa:	1b2d      	subs	r5, r5, r4
 800fefc:	1963      	adds	r3, r4, r5
 800fefe:	42bb      	cmp	r3, r7
 800ff00:	db04      	blt.n	800ff0c <__s2b+0x78>
 800ff02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff06:	2509      	movs	r5, #9
 800ff08:	340a      	adds	r4, #10
 800ff0a:	e7f6      	b.n	800fefa <__s2b+0x66>
 800ff0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff10:	4601      	mov	r1, r0
 800ff12:	220a      	movs	r2, #10
 800ff14:	4630      	mov	r0, r6
 800ff16:	3b30      	subs	r3, #48	; 0x30
 800ff18:	f7ff ff76 	bl	800fe08 <__multadd>
 800ff1c:	e7ee      	b.n	800fefc <__s2b+0x68>
 800ff1e:	bf00      	nop
 800ff20:	08011ba7 	.word	0x08011ba7
 800ff24:	08011c34 	.word	0x08011c34

0800ff28 <__hi0bits>:
 800ff28:	0c02      	lsrs	r2, r0, #16
 800ff2a:	0412      	lsls	r2, r2, #16
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	b9ca      	cbnz	r2, 800ff64 <__hi0bits+0x3c>
 800ff30:	0403      	lsls	r3, r0, #16
 800ff32:	2010      	movs	r0, #16
 800ff34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ff38:	bf04      	itt	eq
 800ff3a:	021b      	lsleq	r3, r3, #8
 800ff3c:	3008      	addeq	r0, #8
 800ff3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ff42:	bf04      	itt	eq
 800ff44:	011b      	lsleq	r3, r3, #4
 800ff46:	3004      	addeq	r0, #4
 800ff48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ff4c:	bf04      	itt	eq
 800ff4e:	009b      	lsleq	r3, r3, #2
 800ff50:	3002      	addeq	r0, #2
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	db05      	blt.n	800ff62 <__hi0bits+0x3a>
 800ff56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ff5a:	f100 0001 	add.w	r0, r0, #1
 800ff5e:	bf08      	it	eq
 800ff60:	2020      	moveq	r0, #32
 800ff62:	4770      	bx	lr
 800ff64:	2000      	movs	r0, #0
 800ff66:	e7e5      	b.n	800ff34 <__hi0bits+0xc>

0800ff68 <__lo0bits>:
 800ff68:	6803      	ldr	r3, [r0, #0]
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	f013 0007 	ands.w	r0, r3, #7
 800ff70:	d00b      	beq.n	800ff8a <__lo0bits+0x22>
 800ff72:	07d9      	lsls	r1, r3, #31
 800ff74:	d421      	bmi.n	800ffba <__lo0bits+0x52>
 800ff76:	0798      	lsls	r0, r3, #30
 800ff78:	bf49      	itett	mi
 800ff7a:	085b      	lsrmi	r3, r3, #1
 800ff7c:	089b      	lsrpl	r3, r3, #2
 800ff7e:	2001      	movmi	r0, #1
 800ff80:	6013      	strmi	r3, [r2, #0]
 800ff82:	bf5c      	itt	pl
 800ff84:	2002      	movpl	r0, #2
 800ff86:	6013      	strpl	r3, [r2, #0]
 800ff88:	4770      	bx	lr
 800ff8a:	b299      	uxth	r1, r3
 800ff8c:	b909      	cbnz	r1, 800ff92 <__lo0bits+0x2a>
 800ff8e:	2010      	movs	r0, #16
 800ff90:	0c1b      	lsrs	r3, r3, #16
 800ff92:	b2d9      	uxtb	r1, r3
 800ff94:	b909      	cbnz	r1, 800ff9a <__lo0bits+0x32>
 800ff96:	3008      	adds	r0, #8
 800ff98:	0a1b      	lsrs	r3, r3, #8
 800ff9a:	0719      	lsls	r1, r3, #28
 800ff9c:	bf04      	itt	eq
 800ff9e:	091b      	lsreq	r3, r3, #4
 800ffa0:	3004      	addeq	r0, #4
 800ffa2:	0799      	lsls	r1, r3, #30
 800ffa4:	bf04      	itt	eq
 800ffa6:	089b      	lsreq	r3, r3, #2
 800ffa8:	3002      	addeq	r0, #2
 800ffaa:	07d9      	lsls	r1, r3, #31
 800ffac:	d403      	bmi.n	800ffb6 <__lo0bits+0x4e>
 800ffae:	085b      	lsrs	r3, r3, #1
 800ffb0:	f100 0001 	add.w	r0, r0, #1
 800ffb4:	d003      	beq.n	800ffbe <__lo0bits+0x56>
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	4770      	bx	lr
 800ffba:	2000      	movs	r0, #0
 800ffbc:	4770      	bx	lr
 800ffbe:	2020      	movs	r0, #32
 800ffc0:	4770      	bx	lr
	...

0800ffc4 <__i2b>:
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	460c      	mov	r4, r1
 800ffc8:	2101      	movs	r1, #1
 800ffca:	f7ff febb 	bl	800fd44 <_Balloc>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	b928      	cbnz	r0, 800ffde <__i2b+0x1a>
 800ffd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ffd6:	4b04      	ldr	r3, [pc, #16]	; (800ffe8 <__i2b+0x24>)
 800ffd8:	4804      	ldr	r0, [pc, #16]	; (800ffec <__i2b+0x28>)
 800ffda:	f000 fddb 	bl	8010b94 <__assert_func>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	6144      	str	r4, [r0, #20]
 800ffe2:	6103      	str	r3, [r0, #16]
 800ffe4:	bd10      	pop	{r4, pc}
 800ffe6:	bf00      	nop
 800ffe8:	08011ba7 	.word	0x08011ba7
 800ffec:	08011c34 	.word	0x08011c34

0800fff0 <__multiply>:
 800fff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff4:	4691      	mov	r9, r2
 800fff6:	690a      	ldr	r2, [r1, #16]
 800fff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fffc:	460c      	mov	r4, r1
 800fffe:	429a      	cmp	r2, r3
 8010000:	bfbe      	ittt	lt
 8010002:	460b      	movlt	r3, r1
 8010004:	464c      	movlt	r4, r9
 8010006:	4699      	movlt	r9, r3
 8010008:	6927      	ldr	r7, [r4, #16]
 801000a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801000e:	68a3      	ldr	r3, [r4, #8]
 8010010:	6861      	ldr	r1, [r4, #4]
 8010012:	eb07 060a 	add.w	r6, r7, sl
 8010016:	42b3      	cmp	r3, r6
 8010018:	b085      	sub	sp, #20
 801001a:	bfb8      	it	lt
 801001c:	3101      	addlt	r1, #1
 801001e:	f7ff fe91 	bl	800fd44 <_Balloc>
 8010022:	b930      	cbnz	r0, 8010032 <__multiply+0x42>
 8010024:	4602      	mov	r2, r0
 8010026:	f240 115d 	movw	r1, #349	; 0x15d
 801002a:	4b43      	ldr	r3, [pc, #268]	; (8010138 <__multiply+0x148>)
 801002c:	4843      	ldr	r0, [pc, #268]	; (801013c <__multiply+0x14c>)
 801002e:	f000 fdb1 	bl	8010b94 <__assert_func>
 8010032:	f100 0514 	add.w	r5, r0, #20
 8010036:	462b      	mov	r3, r5
 8010038:	2200      	movs	r2, #0
 801003a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801003e:	4543      	cmp	r3, r8
 8010040:	d321      	bcc.n	8010086 <__multiply+0x96>
 8010042:	f104 0314 	add.w	r3, r4, #20
 8010046:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801004a:	f109 0314 	add.w	r3, r9, #20
 801004e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010052:	9202      	str	r2, [sp, #8]
 8010054:	1b3a      	subs	r2, r7, r4
 8010056:	3a15      	subs	r2, #21
 8010058:	f022 0203 	bic.w	r2, r2, #3
 801005c:	3204      	adds	r2, #4
 801005e:	f104 0115 	add.w	r1, r4, #21
 8010062:	428f      	cmp	r7, r1
 8010064:	bf38      	it	cc
 8010066:	2204      	movcc	r2, #4
 8010068:	9201      	str	r2, [sp, #4]
 801006a:	9a02      	ldr	r2, [sp, #8]
 801006c:	9303      	str	r3, [sp, #12]
 801006e:	429a      	cmp	r2, r3
 8010070:	d80c      	bhi.n	801008c <__multiply+0x9c>
 8010072:	2e00      	cmp	r6, #0
 8010074:	dd03      	ble.n	801007e <__multiply+0x8e>
 8010076:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801007a:	2b00      	cmp	r3, #0
 801007c:	d059      	beq.n	8010132 <__multiply+0x142>
 801007e:	6106      	str	r6, [r0, #16]
 8010080:	b005      	add	sp, #20
 8010082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010086:	f843 2b04 	str.w	r2, [r3], #4
 801008a:	e7d8      	b.n	801003e <__multiply+0x4e>
 801008c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010090:	f1ba 0f00 	cmp.w	sl, #0
 8010094:	d023      	beq.n	80100de <__multiply+0xee>
 8010096:	46a9      	mov	r9, r5
 8010098:	f04f 0c00 	mov.w	ip, #0
 801009c:	f104 0e14 	add.w	lr, r4, #20
 80100a0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80100a4:	f8d9 1000 	ldr.w	r1, [r9]
 80100a8:	fa1f fb82 	uxth.w	fp, r2
 80100ac:	b289      	uxth	r1, r1
 80100ae:	fb0a 110b 	mla	r1, sl, fp, r1
 80100b2:	4461      	add	r1, ip
 80100b4:	f8d9 c000 	ldr.w	ip, [r9]
 80100b8:	0c12      	lsrs	r2, r2, #16
 80100ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80100be:	fb0a c202 	mla	r2, sl, r2, ip
 80100c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100c6:	b289      	uxth	r1, r1
 80100c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100cc:	4577      	cmp	r7, lr
 80100ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100d2:	f849 1b04 	str.w	r1, [r9], #4
 80100d6:	d8e3      	bhi.n	80100a0 <__multiply+0xb0>
 80100d8:	9a01      	ldr	r2, [sp, #4]
 80100da:	f845 c002 	str.w	ip, [r5, r2]
 80100de:	9a03      	ldr	r2, [sp, #12]
 80100e0:	3304      	adds	r3, #4
 80100e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80100e6:	f1b9 0f00 	cmp.w	r9, #0
 80100ea:	d020      	beq.n	801012e <__multiply+0x13e>
 80100ec:	46ae      	mov	lr, r5
 80100ee:	f04f 0a00 	mov.w	sl, #0
 80100f2:	6829      	ldr	r1, [r5, #0]
 80100f4:	f104 0c14 	add.w	ip, r4, #20
 80100f8:	f8bc b000 	ldrh.w	fp, [ip]
 80100fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010100:	b289      	uxth	r1, r1
 8010102:	fb09 220b 	mla	r2, r9, fp, r2
 8010106:	4492      	add	sl, r2
 8010108:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801010c:	f84e 1b04 	str.w	r1, [lr], #4
 8010110:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010114:	f8be 1000 	ldrh.w	r1, [lr]
 8010118:	0c12      	lsrs	r2, r2, #16
 801011a:	fb09 1102 	mla	r1, r9, r2, r1
 801011e:	4567      	cmp	r7, ip
 8010120:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010128:	d8e6      	bhi.n	80100f8 <__multiply+0x108>
 801012a:	9a01      	ldr	r2, [sp, #4]
 801012c:	50a9      	str	r1, [r5, r2]
 801012e:	3504      	adds	r5, #4
 8010130:	e79b      	b.n	801006a <__multiply+0x7a>
 8010132:	3e01      	subs	r6, #1
 8010134:	e79d      	b.n	8010072 <__multiply+0x82>
 8010136:	bf00      	nop
 8010138:	08011ba7 	.word	0x08011ba7
 801013c:	08011c34 	.word	0x08011c34

08010140 <__pow5mult>:
 8010140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010144:	4615      	mov	r5, r2
 8010146:	f012 0203 	ands.w	r2, r2, #3
 801014a:	4606      	mov	r6, r0
 801014c:	460f      	mov	r7, r1
 801014e:	d007      	beq.n	8010160 <__pow5mult+0x20>
 8010150:	4c25      	ldr	r4, [pc, #148]	; (80101e8 <__pow5mult+0xa8>)
 8010152:	3a01      	subs	r2, #1
 8010154:	2300      	movs	r3, #0
 8010156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801015a:	f7ff fe55 	bl	800fe08 <__multadd>
 801015e:	4607      	mov	r7, r0
 8010160:	10ad      	asrs	r5, r5, #2
 8010162:	d03d      	beq.n	80101e0 <__pow5mult+0xa0>
 8010164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010166:	b97c      	cbnz	r4, 8010188 <__pow5mult+0x48>
 8010168:	2010      	movs	r0, #16
 801016a:	f7ff fdb5 	bl	800fcd8 <malloc>
 801016e:	4602      	mov	r2, r0
 8010170:	6270      	str	r0, [r6, #36]	; 0x24
 8010172:	b928      	cbnz	r0, 8010180 <__pow5mult+0x40>
 8010174:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010178:	4b1c      	ldr	r3, [pc, #112]	; (80101ec <__pow5mult+0xac>)
 801017a:	481d      	ldr	r0, [pc, #116]	; (80101f0 <__pow5mult+0xb0>)
 801017c:	f000 fd0a 	bl	8010b94 <__assert_func>
 8010180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010184:	6004      	str	r4, [r0, #0]
 8010186:	60c4      	str	r4, [r0, #12]
 8010188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801018c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010190:	b94c      	cbnz	r4, 80101a6 <__pow5mult+0x66>
 8010192:	f240 2171 	movw	r1, #625	; 0x271
 8010196:	4630      	mov	r0, r6
 8010198:	f7ff ff14 	bl	800ffc4 <__i2b>
 801019c:	2300      	movs	r3, #0
 801019e:	4604      	mov	r4, r0
 80101a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80101a4:	6003      	str	r3, [r0, #0]
 80101a6:	f04f 0900 	mov.w	r9, #0
 80101aa:	07eb      	lsls	r3, r5, #31
 80101ac:	d50a      	bpl.n	80101c4 <__pow5mult+0x84>
 80101ae:	4639      	mov	r1, r7
 80101b0:	4622      	mov	r2, r4
 80101b2:	4630      	mov	r0, r6
 80101b4:	f7ff ff1c 	bl	800fff0 <__multiply>
 80101b8:	4680      	mov	r8, r0
 80101ba:	4639      	mov	r1, r7
 80101bc:	4630      	mov	r0, r6
 80101be:	f7ff fe01 	bl	800fdc4 <_Bfree>
 80101c2:	4647      	mov	r7, r8
 80101c4:	106d      	asrs	r5, r5, #1
 80101c6:	d00b      	beq.n	80101e0 <__pow5mult+0xa0>
 80101c8:	6820      	ldr	r0, [r4, #0]
 80101ca:	b938      	cbnz	r0, 80101dc <__pow5mult+0x9c>
 80101cc:	4622      	mov	r2, r4
 80101ce:	4621      	mov	r1, r4
 80101d0:	4630      	mov	r0, r6
 80101d2:	f7ff ff0d 	bl	800fff0 <__multiply>
 80101d6:	6020      	str	r0, [r4, #0]
 80101d8:	f8c0 9000 	str.w	r9, [r0]
 80101dc:	4604      	mov	r4, r0
 80101de:	e7e4      	b.n	80101aa <__pow5mult+0x6a>
 80101e0:	4638      	mov	r0, r7
 80101e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e6:	bf00      	nop
 80101e8:	08011d80 	.word	0x08011d80
 80101ec:	08011b35 	.word	0x08011b35
 80101f0:	08011c34 	.word	0x08011c34

080101f4 <__lshift>:
 80101f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f8:	460c      	mov	r4, r1
 80101fa:	4607      	mov	r7, r0
 80101fc:	4691      	mov	r9, r2
 80101fe:	6923      	ldr	r3, [r4, #16]
 8010200:	6849      	ldr	r1, [r1, #4]
 8010202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010206:	68a3      	ldr	r3, [r4, #8]
 8010208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801020c:	f108 0601 	add.w	r6, r8, #1
 8010210:	42b3      	cmp	r3, r6
 8010212:	db0b      	blt.n	801022c <__lshift+0x38>
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff fd95 	bl	800fd44 <_Balloc>
 801021a:	4605      	mov	r5, r0
 801021c:	b948      	cbnz	r0, 8010232 <__lshift+0x3e>
 801021e:	4602      	mov	r2, r0
 8010220:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010224:	4b29      	ldr	r3, [pc, #164]	; (80102cc <__lshift+0xd8>)
 8010226:	482a      	ldr	r0, [pc, #168]	; (80102d0 <__lshift+0xdc>)
 8010228:	f000 fcb4 	bl	8010b94 <__assert_func>
 801022c:	3101      	adds	r1, #1
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	e7ee      	b.n	8010210 <__lshift+0x1c>
 8010232:	2300      	movs	r3, #0
 8010234:	f100 0114 	add.w	r1, r0, #20
 8010238:	f100 0210 	add.w	r2, r0, #16
 801023c:	4618      	mov	r0, r3
 801023e:	4553      	cmp	r3, sl
 8010240:	db37      	blt.n	80102b2 <__lshift+0xbe>
 8010242:	6920      	ldr	r0, [r4, #16]
 8010244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010248:	f104 0314 	add.w	r3, r4, #20
 801024c:	f019 091f 	ands.w	r9, r9, #31
 8010250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010258:	d02f      	beq.n	80102ba <__lshift+0xc6>
 801025a:	468a      	mov	sl, r1
 801025c:	f04f 0c00 	mov.w	ip, #0
 8010260:	f1c9 0e20 	rsb	lr, r9, #32
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	fa02 f209 	lsl.w	r2, r2, r9
 801026a:	ea42 020c 	orr.w	r2, r2, ip
 801026e:	f84a 2b04 	str.w	r2, [sl], #4
 8010272:	f853 2b04 	ldr.w	r2, [r3], #4
 8010276:	4298      	cmp	r0, r3
 8010278:	fa22 fc0e 	lsr.w	ip, r2, lr
 801027c:	d8f2      	bhi.n	8010264 <__lshift+0x70>
 801027e:	1b03      	subs	r3, r0, r4
 8010280:	3b15      	subs	r3, #21
 8010282:	f023 0303 	bic.w	r3, r3, #3
 8010286:	3304      	adds	r3, #4
 8010288:	f104 0215 	add.w	r2, r4, #21
 801028c:	4290      	cmp	r0, r2
 801028e:	bf38      	it	cc
 8010290:	2304      	movcc	r3, #4
 8010292:	f841 c003 	str.w	ip, [r1, r3]
 8010296:	f1bc 0f00 	cmp.w	ip, #0
 801029a:	d001      	beq.n	80102a0 <__lshift+0xac>
 801029c:	f108 0602 	add.w	r6, r8, #2
 80102a0:	3e01      	subs	r6, #1
 80102a2:	4638      	mov	r0, r7
 80102a4:	4621      	mov	r1, r4
 80102a6:	612e      	str	r6, [r5, #16]
 80102a8:	f7ff fd8c 	bl	800fdc4 <_Bfree>
 80102ac:	4628      	mov	r0, r5
 80102ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80102b6:	3301      	adds	r3, #1
 80102b8:	e7c1      	b.n	801023e <__lshift+0x4a>
 80102ba:	3904      	subs	r1, #4
 80102bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80102c0:	4298      	cmp	r0, r3
 80102c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80102c6:	d8f9      	bhi.n	80102bc <__lshift+0xc8>
 80102c8:	e7ea      	b.n	80102a0 <__lshift+0xac>
 80102ca:	bf00      	nop
 80102cc:	08011ba7 	.word	0x08011ba7
 80102d0:	08011c34 	.word	0x08011c34

080102d4 <__mcmp>:
 80102d4:	4603      	mov	r3, r0
 80102d6:	690a      	ldr	r2, [r1, #16]
 80102d8:	6900      	ldr	r0, [r0, #16]
 80102da:	b530      	push	{r4, r5, lr}
 80102dc:	1a80      	subs	r0, r0, r2
 80102de:	d10d      	bne.n	80102fc <__mcmp+0x28>
 80102e0:	3314      	adds	r3, #20
 80102e2:	3114      	adds	r1, #20
 80102e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80102e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80102ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80102f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80102f4:	4295      	cmp	r5, r2
 80102f6:	d002      	beq.n	80102fe <__mcmp+0x2a>
 80102f8:	d304      	bcc.n	8010304 <__mcmp+0x30>
 80102fa:	2001      	movs	r0, #1
 80102fc:	bd30      	pop	{r4, r5, pc}
 80102fe:	42a3      	cmp	r3, r4
 8010300:	d3f4      	bcc.n	80102ec <__mcmp+0x18>
 8010302:	e7fb      	b.n	80102fc <__mcmp+0x28>
 8010304:	f04f 30ff 	mov.w	r0, #4294967295
 8010308:	e7f8      	b.n	80102fc <__mcmp+0x28>
	...

0801030c <__mdiff>:
 801030c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010310:	460d      	mov	r5, r1
 8010312:	4607      	mov	r7, r0
 8010314:	4611      	mov	r1, r2
 8010316:	4628      	mov	r0, r5
 8010318:	4614      	mov	r4, r2
 801031a:	f7ff ffdb 	bl	80102d4 <__mcmp>
 801031e:	1e06      	subs	r6, r0, #0
 8010320:	d111      	bne.n	8010346 <__mdiff+0x3a>
 8010322:	4631      	mov	r1, r6
 8010324:	4638      	mov	r0, r7
 8010326:	f7ff fd0d 	bl	800fd44 <_Balloc>
 801032a:	4602      	mov	r2, r0
 801032c:	b928      	cbnz	r0, 801033a <__mdiff+0x2e>
 801032e:	f240 2132 	movw	r1, #562	; 0x232
 8010332:	4b3a      	ldr	r3, [pc, #232]	; (801041c <__mdiff+0x110>)
 8010334:	483a      	ldr	r0, [pc, #232]	; (8010420 <__mdiff+0x114>)
 8010336:	f000 fc2d 	bl	8010b94 <__assert_func>
 801033a:	2301      	movs	r3, #1
 801033c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010340:	4610      	mov	r0, r2
 8010342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	bfa4      	itt	ge
 8010348:	4623      	movge	r3, r4
 801034a:	462c      	movge	r4, r5
 801034c:	4638      	mov	r0, r7
 801034e:	6861      	ldr	r1, [r4, #4]
 8010350:	bfa6      	itte	ge
 8010352:	461d      	movge	r5, r3
 8010354:	2600      	movge	r6, #0
 8010356:	2601      	movlt	r6, #1
 8010358:	f7ff fcf4 	bl	800fd44 <_Balloc>
 801035c:	4602      	mov	r2, r0
 801035e:	b918      	cbnz	r0, 8010368 <__mdiff+0x5c>
 8010360:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010364:	4b2d      	ldr	r3, [pc, #180]	; (801041c <__mdiff+0x110>)
 8010366:	e7e5      	b.n	8010334 <__mdiff+0x28>
 8010368:	f102 0814 	add.w	r8, r2, #20
 801036c:	46c2      	mov	sl, r8
 801036e:	f04f 0c00 	mov.w	ip, #0
 8010372:	6927      	ldr	r7, [r4, #16]
 8010374:	60c6      	str	r6, [r0, #12]
 8010376:	692e      	ldr	r6, [r5, #16]
 8010378:	f104 0014 	add.w	r0, r4, #20
 801037c:	f105 0914 	add.w	r9, r5, #20
 8010380:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010384:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010388:	3410      	adds	r4, #16
 801038a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801038e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010392:	fa1f f18b 	uxth.w	r1, fp
 8010396:	448c      	add	ip, r1
 8010398:	b299      	uxth	r1, r3
 801039a:	0c1b      	lsrs	r3, r3, #16
 801039c:	ebac 0101 	sub.w	r1, ip, r1
 80103a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80103a4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80103a8:	b289      	uxth	r1, r1
 80103aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80103ae:	454e      	cmp	r6, r9
 80103b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80103b4:	f84a 3b04 	str.w	r3, [sl], #4
 80103b8:	d8e7      	bhi.n	801038a <__mdiff+0x7e>
 80103ba:	1b73      	subs	r3, r6, r5
 80103bc:	3b15      	subs	r3, #21
 80103be:	f023 0303 	bic.w	r3, r3, #3
 80103c2:	3515      	adds	r5, #21
 80103c4:	3304      	adds	r3, #4
 80103c6:	42ae      	cmp	r6, r5
 80103c8:	bf38      	it	cc
 80103ca:	2304      	movcc	r3, #4
 80103cc:	4418      	add	r0, r3
 80103ce:	4443      	add	r3, r8
 80103d0:	461e      	mov	r6, r3
 80103d2:	4605      	mov	r5, r0
 80103d4:	4575      	cmp	r5, lr
 80103d6:	d30e      	bcc.n	80103f6 <__mdiff+0xea>
 80103d8:	f10e 0103 	add.w	r1, lr, #3
 80103dc:	1a09      	subs	r1, r1, r0
 80103de:	f021 0103 	bic.w	r1, r1, #3
 80103e2:	3803      	subs	r0, #3
 80103e4:	4586      	cmp	lr, r0
 80103e6:	bf38      	it	cc
 80103e8:	2100      	movcc	r1, #0
 80103ea:	4419      	add	r1, r3
 80103ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80103f0:	b18b      	cbz	r3, 8010416 <__mdiff+0x10a>
 80103f2:	6117      	str	r7, [r2, #16]
 80103f4:	e7a4      	b.n	8010340 <__mdiff+0x34>
 80103f6:	f855 8b04 	ldr.w	r8, [r5], #4
 80103fa:	fa1f f188 	uxth.w	r1, r8
 80103fe:	4461      	add	r1, ip
 8010400:	140c      	asrs	r4, r1, #16
 8010402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010406:	b289      	uxth	r1, r1
 8010408:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801040c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010410:	f846 1b04 	str.w	r1, [r6], #4
 8010414:	e7de      	b.n	80103d4 <__mdiff+0xc8>
 8010416:	3f01      	subs	r7, #1
 8010418:	e7e8      	b.n	80103ec <__mdiff+0xe0>
 801041a:	bf00      	nop
 801041c:	08011ba7 	.word	0x08011ba7
 8010420:	08011c34 	.word	0x08011c34

08010424 <__ulp>:
 8010424:	4b11      	ldr	r3, [pc, #68]	; (801046c <__ulp+0x48>)
 8010426:	400b      	ands	r3, r1
 8010428:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801042c:	2b00      	cmp	r3, #0
 801042e:	dd02      	ble.n	8010436 <__ulp+0x12>
 8010430:	2000      	movs	r0, #0
 8010432:	4619      	mov	r1, r3
 8010434:	4770      	bx	lr
 8010436:	425b      	negs	r3, r3
 8010438:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801043c:	f04f 0000 	mov.w	r0, #0
 8010440:	f04f 0100 	mov.w	r1, #0
 8010444:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010448:	da04      	bge.n	8010454 <__ulp+0x30>
 801044a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801044e:	fa43 f102 	asr.w	r1, r3, r2
 8010452:	4770      	bx	lr
 8010454:	f1a2 0314 	sub.w	r3, r2, #20
 8010458:	2b1e      	cmp	r3, #30
 801045a:	bfd6      	itet	le
 801045c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010460:	2301      	movgt	r3, #1
 8010462:	fa22 f303 	lsrle.w	r3, r2, r3
 8010466:	4618      	mov	r0, r3
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	7ff00000 	.word	0x7ff00000

08010470 <__b2d>:
 8010470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010474:	6907      	ldr	r7, [r0, #16]
 8010476:	f100 0914 	add.w	r9, r0, #20
 801047a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801047e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010482:	f1a7 0804 	sub.w	r8, r7, #4
 8010486:	4630      	mov	r0, r6
 8010488:	f7ff fd4e 	bl	800ff28 <__hi0bits>
 801048c:	f1c0 0320 	rsb	r3, r0, #32
 8010490:	280a      	cmp	r0, #10
 8010492:	600b      	str	r3, [r1, #0]
 8010494:	491f      	ldr	r1, [pc, #124]	; (8010514 <__b2d+0xa4>)
 8010496:	dc17      	bgt.n	80104c8 <__b2d+0x58>
 8010498:	45c1      	cmp	r9, r8
 801049a:	bf28      	it	cs
 801049c:	2200      	movcs	r2, #0
 801049e:	f1c0 0c0b 	rsb	ip, r0, #11
 80104a2:	fa26 f30c 	lsr.w	r3, r6, ip
 80104a6:	bf38      	it	cc
 80104a8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80104ac:	ea43 0501 	orr.w	r5, r3, r1
 80104b0:	f100 0315 	add.w	r3, r0, #21
 80104b4:	fa06 f303 	lsl.w	r3, r6, r3
 80104b8:	fa22 f20c 	lsr.w	r2, r2, ip
 80104bc:	ea43 0402 	orr.w	r4, r3, r2
 80104c0:	4620      	mov	r0, r4
 80104c2:	4629      	mov	r1, r5
 80104c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104c8:	45c1      	cmp	r9, r8
 80104ca:	bf2e      	itee	cs
 80104cc:	2200      	movcs	r2, #0
 80104ce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80104d2:	f1a7 0808 	subcc.w	r8, r7, #8
 80104d6:	f1b0 030b 	subs.w	r3, r0, #11
 80104da:	d016      	beq.n	801050a <__b2d+0x9a>
 80104dc:	f1c3 0720 	rsb	r7, r3, #32
 80104e0:	fa22 f107 	lsr.w	r1, r2, r7
 80104e4:	45c8      	cmp	r8, r9
 80104e6:	fa06 f603 	lsl.w	r6, r6, r3
 80104ea:	ea46 0601 	orr.w	r6, r6, r1
 80104ee:	bf94      	ite	ls
 80104f0:	2100      	movls	r1, #0
 80104f2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80104f6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80104fa:	fa02 f003 	lsl.w	r0, r2, r3
 80104fe:	40f9      	lsrs	r1, r7
 8010500:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010504:	ea40 0401 	orr.w	r4, r0, r1
 8010508:	e7da      	b.n	80104c0 <__b2d+0x50>
 801050a:	4614      	mov	r4, r2
 801050c:	ea46 0501 	orr.w	r5, r6, r1
 8010510:	e7d6      	b.n	80104c0 <__b2d+0x50>
 8010512:	bf00      	nop
 8010514:	3ff00000 	.word	0x3ff00000

08010518 <__d2b>:
 8010518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801051c:	2101      	movs	r1, #1
 801051e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8010522:	4690      	mov	r8, r2
 8010524:	461d      	mov	r5, r3
 8010526:	f7ff fc0d 	bl	800fd44 <_Balloc>
 801052a:	4604      	mov	r4, r0
 801052c:	b930      	cbnz	r0, 801053c <__d2b+0x24>
 801052e:	4602      	mov	r2, r0
 8010530:	f240 310a 	movw	r1, #778	; 0x30a
 8010534:	4b24      	ldr	r3, [pc, #144]	; (80105c8 <__d2b+0xb0>)
 8010536:	4825      	ldr	r0, [pc, #148]	; (80105cc <__d2b+0xb4>)
 8010538:	f000 fb2c 	bl	8010b94 <__assert_func>
 801053c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8010540:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8010544:	bb2d      	cbnz	r5, 8010592 <__d2b+0x7a>
 8010546:	9301      	str	r3, [sp, #4]
 8010548:	f1b8 0300 	subs.w	r3, r8, #0
 801054c:	d026      	beq.n	801059c <__d2b+0x84>
 801054e:	4668      	mov	r0, sp
 8010550:	9300      	str	r3, [sp, #0]
 8010552:	f7ff fd09 	bl	800ff68 <__lo0bits>
 8010556:	9900      	ldr	r1, [sp, #0]
 8010558:	b1f0      	cbz	r0, 8010598 <__d2b+0x80>
 801055a:	9a01      	ldr	r2, [sp, #4]
 801055c:	f1c0 0320 	rsb	r3, r0, #32
 8010560:	fa02 f303 	lsl.w	r3, r2, r3
 8010564:	430b      	orrs	r3, r1
 8010566:	40c2      	lsrs	r2, r0
 8010568:	6163      	str	r3, [r4, #20]
 801056a:	9201      	str	r2, [sp, #4]
 801056c:	9b01      	ldr	r3, [sp, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	bf14      	ite	ne
 8010572:	2102      	movne	r1, #2
 8010574:	2101      	moveq	r1, #1
 8010576:	61a3      	str	r3, [r4, #24]
 8010578:	6121      	str	r1, [r4, #16]
 801057a:	b1c5      	cbz	r5, 80105ae <__d2b+0x96>
 801057c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010580:	4405      	add	r5, r0
 8010582:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010586:	603d      	str	r5, [r7, #0]
 8010588:	6030      	str	r0, [r6, #0]
 801058a:	4620      	mov	r0, r4
 801058c:	b002      	add	sp, #8
 801058e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010596:	e7d6      	b.n	8010546 <__d2b+0x2e>
 8010598:	6161      	str	r1, [r4, #20]
 801059a:	e7e7      	b.n	801056c <__d2b+0x54>
 801059c:	a801      	add	r0, sp, #4
 801059e:	f7ff fce3 	bl	800ff68 <__lo0bits>
 80105a2:	2101      	movs	r1, #1
 80105a4:	9b01      	ldr	r3, [sp, #4]
 80105a6:	6121      	str	r1, [r4, #16]
 80105a8:	6163      	str	r3, [r4, #20]
 80105aa:	3020      	adds	r0, #32
 80105ac:	e7e5      	b.n	801057a <__d2b+0x62>
 80105ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80105b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105b6:	6038      	str	r0, [r7, #0]
 80105b8:	6918      	ldr	r0, [r3, #16]
 80105ba:	f7ff fcb5 	bl	800ff28 <__hi0bits>
 80105be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80105c2:	6031      	str	r1, [r6, #0]
 80105c4:	e7e1      	b.n	801058a <__d2b+0x72>
 80105c6:	bf00      	nop
 80105c8:	08011ba7 	.word	0x08011ba7
 80105cc:	08011c34 	.word	0x08011c34

080105d0 <__ratio>:
 80105d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d4:	4688      	mov	r8, r1
 80105d6:	4669      	mov	r1, sp
 80105d8:	4681      	mov	r9, r0
 80105da:	f7ff ff49 	bl	8010470 <__b2d>
 80105de:	460f      	mov	r7, r1
 80105e0:	4604      	mov	r4, r0
 80105e2:	460d      	mov	r5, r1
 80105e4:	4640      	mov	r0, r8
 80105e6:	a901      	add	r1, sp, #4
 80105e8:	f7ff ff42 	bl	8010470 <__b2d>
 80105ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80105f4:	468b      	mov	fp, r1
 80105f6:	eba3 0c02 	sub.w	ip, r3, r2
 80105fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80105fe:	1a9b      	subs	r3, r3, r2
 8010600:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010604:	2b00      	cmp	r3, #0
 8010606:	bfd5      	itete	le
 8010608:	460a      	movle	r2, r1
 801060a:	462a      	movgt	r2, r5
 801060c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010610:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010614:	bfd8      	it	le
 8010616:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801061a:	465b      	mov	r3, fp
 801061c:	4602      	mov	r2, r0
 801061e:	4639      	mov	r1, r7
 8010620:	4620      	mov	r0, r4
 8010622:	f7f0 f89b 	bl	800075c <__aeabi_ddiv>
 8010626:	b003      	add	sp, #12
 8010628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801062c <__copybits>:
 801062c:	3901      	subs	r1, #1
 801062e:	b570      	push	{r4, r5, r6, lr}
 8010630:	1149      	asrs	r1, r1, #5
 8010632:	6914      	ldr	r4, [r2, #16]
 8010634:	3101      	adds	r1, #1
 8010636:	f102 0314 	add.w	r3, r2, #20
 801063a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801063e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010642:	1f05      	subs	r5, r0, #4
 8010644:	42a3      	cmp	r3, r4
 8010646:	d30c      	bcc.n	8010662 <__copybits+0x36>
 8010648:	1aa3      	subs	r3, r4, r2
 801064a:	3b11      	subs	r3, #17
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	3211      	adds	r2, #17
 8010652:	42a2      	cmp	r2, r4
 8010654:	bf88      	it	hi
 8010656:	2300      	movhi	r3, #0
 8010658:	4418      	add	r0, r3
 801065a:	2300      	movs	r3, #0
 801065c:	4288      	cmp	r0, r1
 801065e:	d305      	bcc.n	801066c <__copybits+0x40>
 8010660:	bd70      	pop	{r4, r5, r6, pc}
 8010662:	f853 6b04 	ldr.w	r6, [r3], #4
 8010666:	f845 6f04 	str.w	r6, [r5, #4]!
 801066a:	e7eb      	b.n	8010644 <__copybits+0x18>
 801066c:	f840 3b04 	str.w	r3, [r0], #4
 8010670:	e7f4      	b.n	801065c <__copybits+0x30>

08010672 <__any_on>:
 8010672:	f100 0214 	add.w	r2, r0, #20
 8010676:	6900      	ldr	r0, [r0, #16]
 8010678:	114b      	asrs	r3, r1, #5
 801067a:	4298      	cmp	r0, r3
 801067c:	b510      	push	{r4, lr}
 801067e:	db11      	blt.n	80106a4 <__any_on+0x32>
 8010680:	dd0a      	ble.n	8010698 <__any_on+0x26>
 8010682:	f011 011f 	ands.w	r1, r1, #31
 8010686:	d007      	beq.n	8010698 <__any_on+0x26>
 8010688:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801068c:	fa24 f001 	lsr.w	r0, r4, r1
 8010690:	fa00 f101 	lsl.w	r1, r0, r1
 8010694:	428c      	cmp	r4, r1
 8010696:	d10b      	bne.n	80106b0 <__any_on+0x3e>
 8010698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801069c:	4293      	cmp	r3, r2
 801069e:	d803      	bhi.n	80106a8 <__any_on+0x36>
 80106a0:	2000      	movs	r0, #0
 80106a2:	bd10      	pop	{r4, pc}
 80106a4:	4603      	mov	r3, r0
 80106a6:	e7f7      	b.n	8010698 <__any_on+0x26>
 80106a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80106ac:	2900      	cmp	r1, #0
 80106ae:	d0f5      	beq.n	801069c <__any_on+0x2a>
 80106b0:	2001      	movs	r0, #1
 80106b2:	e7f6      	b.n	80106a2 <__any_on+0x30>

080106b4 <_calloc_r>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	fba1 5402 	umull	r5, r4, r1, r2
 80106ba:	b934      	cbnz	r4, 80106ca <_calloc_r+0x16>
 80106bc:	4629      	mov	r1, r5
 80106be:	f000 f875 	bl	80107ac <_malloc_r>
 80106c2:	4606      	mov	r6, r0
 80106c4:	b928      	cbnz	r0, 80106d2 <_calloc_r+0x1e>
 80106c6:	4630      	mov	r0, r6
 80106c8:	bd70      	pop	{r4, r5, r6, pc}
 80106ca:	220c      	movs	r2, #12
 80106cc:	2600      	movs	r6, #0
 80106ce:	6002      	str	r2, [r0, #0]
 80106d0:	e7f9      	b.n	80106c6 <_calloc_r+0x12>
 80106d2:	462a      	mov	r2, r5
 80106d4:	4621      	mov	r1, r4
 80106d6:	f7fc fe53 	bl	800d380 <memset>
 80106da:	e7f4      	b.n	80106c6 <_calloc_r+0x12>

080106dc <_free_r>:
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	4605      	mov	r5, r0
 80106e0:	2900      	cmp	r1, #0
 80106e2:	d040      	beq.n	8010766 <_free_r+0x8a>
 80106e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106e8:	1f0c      	subs	r4, r1, #4
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	bfb8      	it	lt
 80106ee:	18e4      	addlt	r4, r4, r3
 80106f0:	f000 fa9a 	bl	8010c28 <__malloc_lock>
 80106f4:	4a1c      	ldr	r2, [pc, #112]	; (8010768 <_free_r+0x8c>)
 80106f6:	6813      	ldr	r3, [r2, #0]
 80106f8:	b933      	cbnz	r3, 8010708 <_free_r+0x2c>
 80106fa:	6063      	str	r3, [r4, #4]
 80106fc:	6014      	str	r4, [r2, #0]
 80106fe:	4628      	mov	r0, r5
 8010700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010704:	f000 ba96 	b.w	8010c34 <__malloc_unlock>
 8010708:	42a3      	cmp	r3, r4
 801070a:	d908      	bls.n	801071e <_free_r+0x42>
 801070c:	6820      	ldr	r0, [r4, #0]
 801070e:	1821      	adds	r1, r4, r0
 8010710:	428b      	cmp	r3, r1
 8010712:	bf01      	itttt	eq
 8010714:	6819      	ldreq	r1, [r3, #0]
 8010716:	685b      	ldreq	r3, [r3, #4]
 8010718:	1809      	addeq	r1, r1, r0
 801071a:	6021      	streq	r1, [r4, #0]
 801071c:	e7ed      	b.n	80106fa <_free_r+0x1e>
 801071e:	461a      	mov	r2, r3
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	b10b      	cbz	r3, 8010728 <_free_r+0x4c>
 8010724:	42a3      	cmp	r3, r4
 8010726:	d9fa      	bls.n	801071e <_free_r+0x42>
 8010728:	6811      	ldr	r1, [r2, #0]
 801072a:	1850      	adds	r0, r2, r1
 801072c:	42a0      	cmp	r0, r4
 801072e:	d10b      	bne.n	8010748 <_free_r+0x6c>
 8010730:	6820      	ldr	r0, [r4, #0]
 8010732:	4401      	add	r1, r0
 8010734:	1850      	adds	r0, r2, r1
 8010736:	4283      	cmp	r3, r0
 8010738:	6011      	str	r1, [r2, #0]
 801073a:	d1e0      	bne.n	80106fe <_free_r+0x22>
 801073c:	6818      	ldr	r0, [r3, #0]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	4401      	add	r1, r0
 8010742:	6011      	str	r1, [r2, #0]
 8010744:	6053      	str	r3, [r2, #4]
 8010746:	e7da      	b.n	80106fe <_free_r+0x22>
 8010748:	d902      	bls.n	8010750 <_free_r+0x74>
 801074a:	230c      	movs	r3, #12
 801074c:	602b      	str	r3, [r5, #0]
 801074e:	e7d6      	b.n	80106fe <_free_r+0x22>
 8010750:	6820      	ldr	r0, [r4, #0]
 8010752:	1821      	adds	r1, r4, r0
 8010754:	428b      	cmp	r3, r1
 8010756:	bf01      	itttt	eq
 8010758:	6819      	ldreq	r1, [r3, #0]
 801075a:	685b      	ldreq	r3, [r3, #4]
 801075c:	1809      	addeq	r1, r1, r0
 801075e:	6021      	streq	r1, [r4, #0]
 8010760:	6063      	str	r3, [r4, #4]
 8010762:	6054      	str	r4, [r2, #4]
 8010764:	e7cb      	b.n	80106fe <_free_r+0x22>
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	20001c08 	.word	0x20001c08

0801076c <sbrk_aligned>:
 801076c:	b570      	push	{r4, r5, r6, lr}
 801076e:	4e0e      	ldr	r6, [pc, #56]	; (80107a8 <sbrk_aligned+0x3c>)
 8010770:	460c      	mov	r4, r1
 8010772:	6831      	ldr	r1, [r6, #0]
 8010774:	4605      	mov	r5, r0
 8010776:	b911      	cbnz	r1, 801077e <sbrk_aligned+0x12>
 8010778:	f000 f9ee 	bl	8010b58 <_sbrk_r>
 801077c:	6030      	str	r0, [r6, #0]
 801077e:	4621      	mov	r1, r4
 8010780:	4628      	mov	r0, r5
 8010782:	f000 f9e9 	bl	8010b58 <_sbrk_r>
 8010786:	1c43      	adds	r3, r0, #1
 8010788:	d00a      	beq.n	80107a0 <sbrk_aligned+0x34>
 801078a:	1cc4      	adds	r4, r0, #3
 801078c:	f024 0403 	bic.w	r4, r4, #3
 8010790:	42a0      	cmp	r0, r4
 8010792:	d007      	beq.n	80107a4 <sbrk_aligned+0x38>
 8010794:	1a21      	subs	r1, r4, r0
 8010796:	4628      	mov	r0, r5
 8010798:	f000 f9de 	bl	8010b58 <_sbrk_r>
 801079c:	3001      	adds	r0, #1
 801079e:	d101      	bne.n	80107a4 <sbrk_aligned+0x38>
 80107a0:	f04f 34ff 	mov.w	r4, #4294967295
 80107a4:	4620      	mov	r0, r4
 80107a6:	bd70      	pop	{r4, r5, r6, pc}
 80107a8:	20001c0c 	.word	0x20001c0c

080107ac <_malloc_r>:
 80107ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107b0:	1ccd      	adds	r5, r1, #3
 80107b2:	f025 0503 	bic.w	r5, r5, #3
 80107b6:	3508      	adds	r5, #8
 80107b8:	2d0c      	cmp	r5, #12
 80107ba:	bf38      	it	cc
 80107bc:	250c      	movcc	r5, #12
 80107be:	2d00      	cmp	r5, #0
 80107c0:	4607      	mov	r7, r0
 80107c2:	db01      	blt.n	80107c8 <_malloc_r+0x1c>
 80107c4:	42a9      	cmp	r1, r5
 80107c6:	d905      	bls.n	80107d4 <_malloc_r+0x28>
 80107c8:	230c      	movs	r3, #12
 80107ca:	2600      	movs	r6, #0
 80107cc:	603b      	str	r3, [r7, #0]
 80107ce:	4630      	mov	r0, r6
 80107d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d4:	4e2e      	ldr	r6, [pc, #184]	; (8010890 <_malloc_r+0xe4>)
 80107d6:	f000 fa27 	bl	8010c28 <__malloc_lock>
 80107da:	6833      	ldr	r3, [r6, #0]
 80107dc:	461c      	mov	r4, r3
 80107de:	bb34      	cbnz	r4, 801082e <_malloc_r+0x82>
 80107e0:	4629      	mov	r1, r5
 80107e2:	4638      	mov	r0, r7
 80107e4:	f7ff ffc2 	bl	801076c <sbrk_aligned>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	4604      	mov	r4, r0
 80107ec:	d14d      	bne.n	801088a <_malloc_r+0xde>
 80107ee:	6834      	ldr	r4, [r6, #0]
 80107f0:	4626      	mov	r6, r4
 80107f2:	2e00      	cmp	r6, #0
 80107f4:	d140      	bne.n	8010878 <_malloc_r+0xcc>
 80107f6:	6823      	ldr	r3, [r4, #0]
 80107f8:	4631      	mov	r1, r6
 80107fa:	4638      	mov	r0, r7
 80107fc:	eb04 0803 	add.w	r8, r4, r3
 8010800:	f000 f9aa 	bl	8010b58 <_sbrk_r>
 8010804:	4580      	cmp	r8, r0
 8010806:	d13a      	bne.n	801087e <_malloc_r+0xd2>
 8010808:	6821      	ldr	r1, [r4, #0]
 801080a:	3503      	adds	r5, #3
 801080c:	1a6d      	subs	r5, r5, r1
 801080e:	f025 0503 	bic.w	r5, r5, #3
 8010812:	3508      	adds	r5, #8
 8010814:	2d0c      	cmp	r5, #12
 8010816:	bf38      	it	cc
 8010818:	250c      	movcc	r5, #12
 801081a:	4638      	mov	r0, r7
 801081c:	4629      	mov	r1, r5
 801081e:	f7ff ffa5 	bl	801076c <sbrk_aligned>
 8010822:	3001      	adds	r0, #1
 8010824:	d02b      	beq.n	801087e <_malloc_r+0xd2>
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	442b      	add	r3, r5
 801082a:	6023      	str	r3, [r4, #0]
 801082c:	e00e      	b.n	801084c <_malloc_r+0xa0>
 801082e:	6822      	ldr	r2, [r4, #0]
 8010830:	1b52      	subs	r2, r2, r5
 8010832:	d41e      	bmi.n	8010872 <_malloc_r+0xc6>
 8010834:	2a0b      	cmp	r2, #11
 8010836:	d916      	bls.n	8010866 <_malloc_r+0xba>
 8010838:	1961      	adds	r1, r4, r5
 801083a:	42a3      	cmp	r3, r4
 801083c:	6025      	str	r5, [r4, #0]
 801083e:	bf18      	it	ne
 8010840:	6059      	strne	r1, [r3, #4]
 8010842:	6863      	ldr	r3, [r4, #4]
 8010844:	bf08      	it	eq
 8010846:	6031      	streq	r1, [r6, #0]
 8010848:	5162      	str	r2, [r4, r5]
 801084a:	604b      	str	r3, [r1, #4]
 801084c:	4638      	mov	r0, r7
 801084e:	f104 060b 	add.w	r6, r4, #11
 8010852:	f000 f9ef 	bl	8010c34 <__malloc_unlock>
 8010856:	f026 0607 	bic.w	r6, r6, #7
 801085a:	1d23      	adds	r3, r4, #4
 801085c:	1af2      	subs	r2, r6, r3
 801085e:	d0b6      	beq.n	80107ce <_malloc_r+0x22>
 8010860:	1b9b      	subs	r3, r3, r6
 8010862:	50a3      	str	r3, [r4, r2]
 8010864:	e7b3      	b.n	80107ce <_malloc_r+0x22>
 8010866:	6862      	ldr	r2, [r4, #4]
 8010868:	42a3      	cmp	r3, r4
 801086a:	bf0c      	ite	eq
 801086c:	6032      	streq	r2, [r6, #0]
 801086e:	605a      	strne	r2, [r3, #4]
 8010870:	e7ec      	b.n	801084c <_malloc_r+0xa0>
 8010872:	4623      	mov	r3, r4
 8010874:	6864      	ldr	r4, [r4, #4]
 8010876:	e7b2      	b.n	80107de <_malloc_r+0x32>
 8010878:	4634      	mov	r4, r6
 801087a:	6876      	ldr	r6, [r6, #4]
 801087c:	e7b9      	b.n	80107f2 <_malloc_r+0x46>
 801087e:	230c      	movs	r3, #12
 8010880:	4638      	mov	r0, r7
 8010882:	603b      	str	r3, [r7, #0]
 8010884:	f000 f9d6 	bl	8010c34 <__malloc_unlock>
 8010888:	e7a1      	b.n	80107ce <_malloc_r+0x22>
 801088a:	6025      	str	r5, [r4, #0]
 801088c:	e7de      	b.n	801084c <_malloc_r+0xa0>
 801088e:	bf00      	nop
 8010890:	20001c08 	.word	0x20001c08

08010894 <__ssputs_r>:
 8010894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010898:	688e      	ldr	r6, [r1, #8]
 801089a:	4682      	mov	sl, r0
 801089c:	429e      	cmp	r6, r3
 801089e:	460c      	mov	r4, r1
 80108a0:	4690      	mov	r8, r2
 80108a2:	461f      	mov	r7, r3
 80108a4:	d838      	bhi.n	8010918 <__ssputs_r+0x84>
 80108a6:	898a      	ldrh	r2, [r1, #12]
 80108a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108ac:	d032      	beq.n	8010914 <__ssputs_r+0x80>
 80108ae:	6825      	ldr	r5, [r4, #0]
 80108b0:	6909      	ldr	r1, [r1, #16]
 80108b2:	3301      	adds	r3, #1
 80108b4:	eba5 0901 	sub.w	r9, r5, r1
 80108b8:	6965      	ldr	r5, [r4, #20]
 80108ba:	444b      	add	r3, r9
 80108bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108c4:	106d      	asrs	r5, r5, #1
 80108c6:	429d      	cmp	r5, r3
 80108c8:	bf38      	it	cc
 80108ca:	461d      	movcc	r5, r3
 80108cc:	0553      	lsls	r3, r2, #21
 80108ce:	d531      	bpl.n	8010934 <__ssputs_r+0xa0>
 80108d0:	4629      	mov	r1, r5
 80108d2:	f7ff ff6b 	bl	80107ac <_malloc_r>
 80108d6:	4606      	mov	r6, r0
 80108d8:	b950      	cbnz	r0, 80108f0 <__ssputs_r+0x5c>
 80108da:	230c      	movs	r3, #12
 80108dc:	f04f 30ff 	mov.w	r0, #4294967295
 80108e0:	f8ca 3000 	str.w	r3, [sl]
 80108e4:	89a3      	ldrh	r3, [r4, #12]
 80108e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108ea:	81a3      	strh	r3, [r4, #12]
 80108ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108f0:	464a      	mov	r2, r9
 80108f2:	6921      	ldr	r1, [r4, #16]
 80108f4:	f7ff fa18 	bl	800fd28 <memcpy>
 80108f8:	89a3      	ldrh	r3, [r4, #12]
 80108fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010902:	81a3      	strh	r3, [r4, #12]
 8010904:	6126      	str	r6, [r4, #16]
 8010906:	444e      	add	r6, r9
 8010908:	6026      	str	r6, [r4, #0]
 801090a:	463e      	mov	r6, r7
 801090c:	6165      	str	r5, [r4, #20]
 801090e:	eba5 0509 	sub.w	r5, r5, r9
 8010912:	60a5      	str	r5, [r4, #8]
 8010914:	42be      	cmp	r6, r7
 8010916:	d900      	bls.n	801091a <__ssputs_r+0x86>
 8010918:	463e      	mov	r6, r7
 801091a:	4632      	mov	r2, r6
 801091c:	4641      	mov	r1, r8
 801091e:	6820      	ldr	r0, [r4, #0]
 8010920:	f000 f968 	bl	8010bf4 <memmove>
 8010924:	68a3      	ldr	r3, [r4, #8]
 8010926:	2000      	movs	r0, #0
 8010928:	1b9b      	subs	r3, r3, r6
 801092a:	60a3      	str	r3, [r4, #8]
 801092c:	6823      	ldr	r3, [r4, #0]
 801092e:	4433      	add	r3, r6
 8010930:	6023      	str	r3, [r4, #0]
 8010932:	e7db      	b.n	80108ec <__ssputs_r+0x58>
 8010934:	462a      	mov	r2, r5
 8010936:	f000 f983 	bl	8010c40 <_realloc_r>
 801093a:	4606      	mov	r6, r0
 801093c:	2800      	cmp	r0, #0
 801093e:	d1e1      	bne.n	8010904 <__ssputs_r+0x70>
 8010940:	4650      	mov	r0, sl
 8010942:	6921      	ldr	r1, [r4, #16]
 8010944:	f7ff feca 	bl	80106dc <_free_r>
 8010948:	e7c7      	b.n	80108da <__ssputs_r+0x46>
	...

0801094c <_svfiprintf_r>:
 801094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010950:	4698      	mov	r8, r3
 8010952:	898b      	ldrh	r3, [r1, #12]
 8010954:	4607      	mov	r7, r0
 8010956:	061b      	lsls	r3, r3, #24
 8010958:	460d      	mov	r5, r1
 801095a:	4614      	mov	r4, r2
 801095c:	b09d      	sub	sp, #116	; 0x74
 801095e:	d50e      	bpl.n	801097e <_svfiprintf_r+0x32>
 8010960:	690b      	ldr	r3, [r1, #16]
 8010962:	b963      	cbnz	r3, 801097e <_svfiprintf_r+0x32>
 8010964:	2140      	movs	r1, #64	; 0x40
 8010966:	f7ff ff21 	bl	80107ac <_malloc_r>
 801096a:	6028      	str	r0, [r5, #0]
 801096c:	6128      	str	r0, [r5, #16]
 801096e:	b920      	cbnz	r0, 801097a <_svfiprintf_r+0x2e>
 8010970:	230c      	movs	r3, #12
 8010972:	603b      	str	r3, [r7, #0]
 8010974:	f04f 30ff 	mov.w	r0, #4294967295
 8010978:	e0d1      	b.n	8010b1e <_svfiprintf_r+0x1d2>
 801097a:	2340      	movs	r3, #64	; 0x40
 801097c:	616b      	str	r3, [r5, #20]
 801097e:	2300      	movs	r3, #0
 8010980:	9309      	str	r3, [sp, #36]	; 0x24
 8010982:	2320      	movs	r3, #32
 8010984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010988:	2330      	movs	r3, #48	; 0x30
 801098a:	f04f 0901 	mov.w	r9, #1
 801098e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010b38 <_svfiprintf_r+0x1ec>
 8010996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801099a:	4623      	mov	r3, r4
 801099c:	469a      	mov	sl, r3
 801099e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109a2:	b10a      	cbz	r2, 80109a8 <_svfiprintf_r+0x5c>
 80109a4:	2a25      	cmp	r2, #37	; 0x25
 80109a6:	d1f9      	bne.n	801099c <_svfiprintf_r+0x50>
 80109a8:	ebba 0b04 	subs.w	fp, sl, r4
 80109ac:	d00b      	beq.n	80109c6 <_svfiprintf_r+0x7a>
 80109ae:	465b      	mov	r3, fp
 80109b0:	4622      	mov	r2, r4
 80109b2:	4629      	mov	r1, r5
 80109b4:	4638      	mov	r0, r7
 80109b6:	f7ff ff6d 	bl	8010894 <__ssputs_r>
 80109ba:	3001      	adds	r0, #1
 80109bc:	f000 80aa 	beq.w	8010b14 <_svfiprintf_r+0x1c8>
 80109c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109c2:	445a      	add	r2, fp
 80109c4:	9209      	str	r2, [sp, #36]	; 0x24
 80109c6:	f89a 3000 	ldrb.w	r3, [sl]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	f000 80a2 	beq.w	8010b14 <_svfiprintf_r+0x1c8>
 80109d0:	2300      	movs	r3, #0
 80109d2:	f04f 32ff 	mov.w	r2, #4294967295
 80109d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109da:	f10a 0a01 	add.w	sl, sl, #1
 80109de:	9304      	str	r3, [sp, #16]
 80109e0:	9307      	str	r3, [sp, #28]
 80109e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109e6:	931a      	str	r3, [sp, #104]	; 0x68
 80109e8:	4654      	mov	r4, sl
 80109ea:	2205      	movs	r2, #5
 80109ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109f0:	4851      	ldr	r0, [pc, #324]	; (8010b38 <_svfiprintf_r+0x1ec>)
 80109f2:	f7ff f98b 	bl	800fd0c <memchr>
 80109f6:	9a04      	ldr	r2, [sp, #16]
 80109f8:	b9d8      	cbnz	r0, 8010a32 <_svfiprintf_r+0xe6>
 80109fa:	06d0      	lsls	r0, r2, #27
 80109fc:	bf44      	itt	mi
 80109fe:	2320      	movmi	r3, #32
 8010a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a04:	0711      	lsls	r1, r2, #28
 8010a06:	bf44      	itt	mi
 8010a08:	232b      	movmi	r3, #43	; 0x2b
 8010a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8010a12:	2b2a      	cmp	r3, #42	; 0x2a
 8010a14:	d015      	beq.n	8010a42 <_svfiprintf_r+0xf6>
 8010a16:	4654      	mov	r4, sl
 8010a18:	2000      	movs	r0, #0
 8010a1a:	f04f 0c0a 	mov.w	ip, #10
 8010a1e:	9a07      	ldr	r2, [sp, #28]
 8010a20:	4621      	mov	r1, r4
 8010a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a26:	3b30      	subs	r3, #48	; 0x30
 8010a28:	2b09      	cmp	r3, #9
 8010a2a:	d94e      	bls.n	8010aca <_svfiprintf_r+0x17e>
 8010a2c:	b1b0      	cbz	r0, 8010a5c <_svfiprintf_r+0x110>
 8010a2e:	9207      	str	r2, [sp, #28]
 8010a30:	e014      	b.n	8010a5c <_svfiprintf_r+0x110>
 8010a32:	eba0 0308 	sub.w	r3, r0, r8
 8010a36:	fa09 f303 	lsl.w	r3, r9, r3
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	46a2      	mov	sl, r4
 8010a3e:	9304      	str	r3, [sp, #16]
 8010a40:	e7d2      	b.n	80109e8 <_svfiprintf_r+0x9c>
 8010a42:	9b03      	ldr	r3, [sp, #12]
 8010a44:	1d19      	adds	r1, r3, #4
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	9103      	str	r1, [sp, #12]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	bfbb      	ittet	lt
 8010a4e:	425b      	neglt	r3, r3
 8010a50:	f042 0202 	orrlt.w	r2, r2, #2
 8010a54:	9307      	strge	r3, [sp, #28]
 8010a56:	9307      	strlt	r3, [sp, #28]
 8010a58:	bfb8      	it	lt
 8010a5a:	9204      	strlt	r2, [sp, #16]
 8010a5c:	7823      	ldrb	r3, [r4, #0]
 8010a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8010a60:	d10c      	bne.n	8010a7c <_svfiprintf_r+0x130>
 8010a62:	7863      	ldrb	r3, [r4, #1]
 8010a64:	2b2a      	cmp	r3, #42	; 0x2a
 8010a66:	d135      	bne.n	8010ad4 <_svfiprintf_r+0x188>
 8010a68:	9b03      	ldr	r3, [sp, #12]
 8010a6a:	3402      	adds	r4, #2
 8010a6c:	1d1a      	adds	r2, r3, #4
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	9203      	str	r2, [sp, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	bfb8      	it	lt
 8010a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a7a:	9305      	str	r3, [sp, #20]
 8010a7c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8010b3c <_svfiprintf_r+0x1f0>
 8010a80:	2203      	movs	r2, #3
 8010a82:	4650      	mov	r0, sl
 8010a84:	7821      	ldrb	r1, [r4, #0]
 8010a86:	f7ff f941 	bl	800fd0c <memchr>
 8010a8a:	b140      	cbz	r0, 8010a9e <_svfiprintf_r+0x152>
 8010a8c:	2340      	movs	r3, #64	; 0x40
 8010a8e:	eba0 000a 	sub.w	r0, r0, sl
 8010a92:	fa03 f000 	lsl.w	r0, r3, r0
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	3401      	adds	r4, #1
 8010a9a:	4303      	orrs	r3, r0
 8010a9c:	9304      	str	r3, [sp, #16]
 8010a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aa2:	2206      	movs	r2, #6
 8010aa4:	4826      	ldr	r0, [pc, #152]	; (8010b40 <_svfiprintf_r+0x1f4>)
 8010aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010aaa:	f7ff f92f 	bl	800fd0c <memchr>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d038      	beq.n	8010b24 <_svfiprintf_r+0x1d8>
 8010ab2:	4b24      	ldr	r3, [pc, #144]	; (8010b44 <_svfiprintf_r+0x1f8>)
 8010ab4:	bb1b      	cbnz	r3, 8010afe <_svfiprintf_r+0x1b2>
 8010ab6:	9b03      	ldr	r3, [sp, #12]
 8010ab8:	3307      	adds	r3, #7
 8010aba:	f023 0307 	bic.w	r3, r3, #7
 8010abe:	3308      	adds	r3, #8
 8010ac0:	9303      	str	r3, [sp, #12]
 8010ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac4:	4433      	add	r3, r6
 8010ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ac8:	e767      	b.n	801099a <_svfiprintf_r+0x4e>
 8010aca:	460c      	mov	r4, r1
 8010acc:	2001      	movs	r0, #1
 8010ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ad2:	e7a5      	b.n	8010a20 <_svfiprintf_r+0xd4>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f04f 0c0a 	mov.w	ip, #10
 8010ada:	4619      	mov	r1, r3
 8010adc:	3401      	adds	r4, #1
 8010ade:	9305      	str	r3, [sp, #20]
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ae6:	3a30      	subs	r2, #48	; 0x30
 8010ae8:	2a09      	cmp	r2, #9
 8010aea:	d903      	bls.n	8010af4 <_svfiprintf_r+0x1a8>
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d0c5      	beq.n	8010a7c <_svfiprintf_r+0x130>
 8010af0:	9105      	str	r1, [sp, #20]
 8010af2:	e7c3      	b.n	8010a7c <_svfiprintf_r+0x130>
 8010af4:	4604      	mov	r4, r0
 8010af6:	2301      	movs	r3, #1
 8010af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010afc:	e7f0      	b.n	8010ae0 <_svfiprintf_r+0x194>
 8010afe:	ab03      	add	r3, sp, #12
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	462a      	mov	r2, r5
 8010b04:	4638      	mov	r0, r7
 8010b06:	4b10      	ldr	r3, [pc, #64]	; (8010b48 <_svfiprintf_r+0x1fc>)
 8010b08:	a904      	add	r1, sp, #16
 8010b0a:	f7fc fcdf 	bl	800d4cc <_printf_float>
 8010b0e:	1c42      	adds	r2, r0, #1
 8010b10:	4606      	mov	r6, r0
 8010b12:	d1d6      	bne.n	8010ac2 <_svfiprintf_r+0x176>
 8010b14:	89ab      	ldrh	r3, [r5, #12]
 8010b16:	065b      	lsls	r3, r3, #25
 8010b18:	f53f af2c 	bmi.w	8010974 <_svfiprintf_r+0x28>
 8010b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b1e:	b01d      	add	sp, #116	; 0x74
 8010b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b24:	ab03      	add	r3, sp, #12
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	462a      	mov	r2, r5
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	4b06      	ldr	r3, [pc, #24]	; (8010b48 <_svfiprintf_r+0x1fc>)
 8010b2e:	a904      	add	r1, sp, #16
 8010b30:	f7fc ff68 	bl	800da04 <_printf_i>
 8010b34:	e7eb      	b.n	8010b0e <_svfiprintf_r+0x1c2>
 8010b36:	bf00      	nop
 8010b38:	08011d8c 	.word	0x08011d8c
 8010b3c:	08011d92 	.word	0x08011d92
 8010b40:	08011d96 	.word	0x08011d96
 8010b44:	0800d4cd 	.word	0x0800d4cd
 8010b48:	08010895 	.word	0x08010895

08010b4c <nan>:
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	4901      	ldr	r1, [pc, #4]	; (8010b54 <nan+0x8>)
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	7ff80000 	.word	0x7ff80000

08010b58 <_sbrk_r>:
 8010b58:	b538      	push	{r3, r4, r5, lr}
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	4d05      	ldr	r5, [pc, #20]	; (8010b74 <_sbrk_r+0x1c>)
 8010b5e:	4604      	mov	r4, r0
 8010b60:	4608      	mov	r0, r1
 8010b62:	602b      	str	r3, [r5, #0]
 8010b64:	f7f7 f9ae 	bl	8007ec4 <_sbrk>
 8010b68:	1c43      	adds	r3, r0, #1
 8010b6a:	d102      	bne.n	8010b72 <_sbrk_r+0x1a>
 8010b6c:	682b      	ldr	r3, [r5, #0]
 8010b6e:	b103      	cbz	r3, 8010b72 <_sbrk_r+0x1a>
 8010b70:	6023      	str	r3, [r4, #0]
 8010b72:	bd38      	pop	{r3, r4, r5, pc}
 8010b74:	20001c10 	.word	0x20001c10

08010b78 <__ascii_wctomb>:
 8010b78:	4603      	mov	r3, r0
 8010b7a:	4608      	mov	r0, r1
 8010b7c:	b141      	cbz	r1, 8010b90 <__ascii_wctomb+0x18>
 8010b7e:	2aff      	cmp	r2, #255	; 0xff
 8010b80:	d904      	bls.n	8010b8c <__ascii_wctomb+0x14>
 8010b82:	228a      	movs	r2, #138	; 0x8a
 8010b84:	f04f 30ff 	mov.w	r0, #4294967295
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	4770      	bx	lr
 8010b8c:	2001      	movs	r0, #1
 8010b8e:	700a      	strb	r2, [r1, #0]
 8010b90:	4770      	bx	lr
	...

08010b94 <__assert_func>:
 8010b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b96:	4614      	mov	r4, r2
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4b09      	ldr	r3, [pc, #36]	; (8010bc0 <__assert_func+0x2c>)
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68d8      	ldr	r0, [r3, #12]
 8010ba2:	b14c      	cbz	r4, 8010bb8 <__assert_func+0x24>
 8010ba4:	4b07      	ldr	r3, [pc, #28]	; (8010bc4 <__assert_func+0x30>)
 8010ba6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010baa:	9100      	str	r1, [sp, #0]
 8010bac:	462b      	mov	r3, r5
 8010bae:	4906      	ldr	r1, [pc, #24]	; (8010bc8 <__assert_func+0x34>)
 8010bb0:	f000 f80e 	bl	8010bd0 <fiprintf>
 8010bb4:	f000 fa8a 	bl	80110cc <abort>
 8010bb8:	4b04      	ldr	r3, [pc, #16]	; (8010bcc <__assert_func+0x38>)
 8010bba:	461c      	mov	r4, r3
 8010bbc:	e7f3      	b.n	8010ba6 <__assert_func+0x12>
 8010bbe:	bf00      	nop
 8010bc0:	2000019c 	.word	0x2000019c
 8010bc4:	08011d9d 	.word	0x08011d9d
 8010bc8:	08011daa 	.word	0x08011daa
 8010bcc:	08011dd8 	.word	0x08011dd8

08010bd0 <fiprintf>:
 8010bd0:	b40e      	push	{r1, r2, r3}
 8010bd2:	b503      	push	{r0, r1, lr}
 8010bd4:	4601      	mov	r1, r0
 8010bd6:	ab03      	add	r3, sp, #12
 8010bd8:	4805      	ldr	r0, [pc, #20]	; (8010bf0 <fiprintf+0x20>)
 8010bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bde:	6800      	ldr	r0, [r0, #0]
 8010be0:	9301      	str	r3, [sp, #4]
 8010be2:	f000 f883 	bl	8010cec <_vfiprintf_r>
 8010be6:	b002      	add	sp, #8
 8010be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bec:	b003      	add	sp, #12
 8010bee:	4770      	bx	lr
 8010bf0:	2000019c 	.word	0x2000019c

08010bf4 <memmove>:
 8010bf4:	4288      	cmp	r0, r1
 8010bf6:	b510      	push	{r4, lr}
 8010bf8:	eb01 0402 	add.w	r4, r1, r2
 8010bfc:	d902      	bls.n	8010c04 <memmove+0x10>
 8010bfe:	4284      	cmp	r4, r0
 8010c00:	4623      	mov	r3, r4
 8010c02:	d807      	bhi.n	8010c14 <memmove+0x20>
 8010c04:	1e43      	subs	r3, r0, #1
 8010c06:	42a1      	cmp	r1, r4
 8010c08:	d008      	beq.n	8010c1c <memmove+0x28>
 8010c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c12:	e7f8      	b.n	8010c06 <memmove+0x12>
 8010c14:	4601      	mov	r1, r0
 8010c16:	4402      	add	r2, r0
 8010c18:	428a      	cmp	r2, r1
 8010c1a:	d100      	bne.n	8010c1e <memmove+0x2a>
 8010c1c:	bd10      	pop	{r4, pc}
 8010c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c26:	e7f7      	b.n	8010c18 <memmove+0x24>

08010c28 <__malloc_lock>:
 8010c28:	4801      	ldr	r0, [pc, #4]	; (8010c30 <__malloc_lock+0x8>)
 8010c2a:	f000 bc0b 	b.w	8011444 <__retarget_lock_acquire_recursive>
 8010c2e:	bf00      	nop
 8010c30:	20001c14 	.word	0x20001c14

08010c34 <__malloc_unlock>:
 8010c34:	4801      	ldr	r0, [pc, #4]	; (8010c3c <__malloc_unlock+0x8>)
 8010c36:	f000 bc06 	b.w	8011446 <__retarget_lock_release_recursive>
 8010c3a:	bf00      	nop
 8010c3c:	20001c14 	.word	0x20001c14

08010c40 <_realloc_r>:
 8010c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c44:	4680      	mov	r8, r0
 8010c46:	4614      	mov	r4, r2
 8010c48:	460e      	mov	r6, r1
 8010c4a:	b921      	cbnz	r1, 8010c56 <_realloc_r+0x16>
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c52:	f7ff bdab 	b.w	80107ac <_malloc_r>
 8010c56:	b92a      	cbnz	r2, 8010c64 <_realloc_r+0x24>
 8010c58:	f7ff fd40 	bl	80106dc <_free_r>
 8010c5c:	4625      	mov	r5, r4
 8010c5e:	4628      	mov	r0, r5
 8010c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c64:	f000 fc56 	bl	8011514 <_malloc_usable_size_r>
 8010c68:	4284      	cmp	r4, r0
 8010c6a:	4607      	mov	r7, r0
 8010c6c:	d802      	bhi.n	8010c74 <_realloc_r+0x34>
 8010c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c72:	d812      	bhi.n	8010c9a <_realloc_r+0x5a>
 8010c74:	4621      	mov	r1, r4
 8010c76:	4640      	mov	r0, r8
 8010c78:	f7ff fd98 	bl	80107ac <_malloc_r>
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	d0ed      	beq.n	8010c5e <_realloc_r+0x1e>
 8010c82:	42bc      	cmp	r4, r7
 8010c84:	4622      	mov	r2, r4
 8010c86:	4631      	mov	r1, r6
 8010c88:	bf28      	it	cs
 8010c8a:	463a      	movcs	r2, r7
 8010c8c:	f7ff f84c 	bl	800fd28 <memcpy>
 8010c90:	4631      	mov	r1, r6
 8010c92:	4640      	mov	r0, r8
 8010c94:	f7ff fd22 	bl	80106dc <_free_r>
 8010c98:	e7e1      	b.n	8010c5e <_realloc_r+0x1e>
 8010c9a:	4635      	mov	r5, r6
 8010c9c:	e7df      	b.n	8010c5e <_realloc_r+0x1e>

08010c9e <__sfputc_r>:
 8010c9e:	6893      	ldr	r3, [r2, #8]
 8010ca0:	b410      	push	{r4}
 8010ca2:	3b01      	subs	r3, #1
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	6093      	str	r3, [r2, #8]
 8010ca8:	da07      	bge.n	8010cba <__sfputc_r+0x1c>
 8010caa:	6994      	ldr	r4, [r2, #24]
 8010cac:	42a3      	cmp	r3, r4
 8010cae:	db01      	blt.n	8010cb4 <__sfputc_r+0x16>
 8010cb0:	290a      	cmp	r1, #10
 8010cb2:	d102      	bne.n	8010cba <__sfputc_r+0x1c>
 8010cb4:	bc10      	pop	{r4}
 8010cb6:	f000 b949 	b.w	8010f4c <__swbuf_r>
 8010cba:	6813      	ldr	r3, [r2, #0]
 8010cbc:	1c58      	adds	r0, r3, #1
 8010cbe:	6010      	str	r0, [r2, #0]
 8010cc0:	7019      	strb	r1, [r3, #0]
 8010cc2:	4608      	mov	r0, r1
 8010cc4:	bc10      	pop	{r4}
 8010cc6:	4770      	bx	lr

08010cc8 <__sfputs_r>:
 8010cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cca:	4606      	mov	r6, r0
 8010ccc:	460f      	mov	r7, r1
 8010cce:	4614      	mov	r4, r2
 8010cd0:	18d5      	adds	r5, r2, r3
 8010cd2:	42ac      	cmp	r4, r5
 8010cd4:	d101      	bne.n	8010cda <__sfputs_r+0x12>
 8010cd6:	2000      	movs	r0, #0
 8010cd8:	e007      	b.n	8010cea <__sfputs_r+0x22>
 8010cda:	463a      	mov	r2, r7
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce2:	f7ff ffdc 	bl	8010c9e <__sfputc_r>
 8010ce6:	1c43      	adds	r3, r0, #1
 8010ce8:	d1f3      	bne.n	8010cd2 <__sfputs_r+0xa>
 8010cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010cec <_vfiprintf_r>:
 8010cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	460d      	mov	r5, r1
 8010cf2:	4614      	mov	r4, r2
 8010cf4:	4698      	mov	r8, r3
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	b09d      	sub	sp, #116	; 0x74
 8010cfa:	b118      	cbz	r0, 8010d04 <_vfiprintf_r+0x18>
 8010cfc:	6983      	ldr	r3, [r0, #24]
 8010cfe:	b90b      	cbnz	r3, 8010d04 <_vfiprintf_r+0x18>
 8010d00:	f000 fb02 	bl	8011308 <__sinit>
 8010d04:	4b89      	ldr	r3, [pc, #548]	; (8010f2c <_vfiprintf_r+0x240>)
 8010d06:	429d      	cmp	r5, r3
 8010d08:	d11b      	bne.n	8010d42 <_vfiprintf_r+0x56>
 8010d0a:	6875      	ldr	r5, [r6, #4]
 8010d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d0e:	07d9      	lsls	r1, r3, #31
 8010d10:	d405      	bmi.n	8010d1e <_vfiprintf_r+0x32>
 8010d12:	89ab      	ldrh	r3, [r5, #12]
 8010d14:	059a      	lsls	r2, r3, #22
 8010d16:	d402      	bmi.n	8010d1e <_vfiprintf_r+0x32>
 8010d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d1a:	f000 fb93 	bl	8011444 <__retarget_lock_acquire_recursive>
 8010d1e:	89ab      	ldrh	r3, [r5, #12]
 8010d20:	071b      	lsls	r3, r3, #28
 8010d22:	d501      	bpl.n	8010d28 <_vfiprintf_r+0x3c>
 8010d24:	692b      	ldr	r3, [r5, #16]
 8010d26:	b9eb      	cbnz	r3, 8010d64 <_vfiprintf_r+0x78>
 8010d28:	4629      	mov	r1, r5
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f000 f960 	bl	8010ff0 <__swsetup_r>
 8010d30:	b1c0      	cbz	r0, 8010d64 <_vfiprintf_r+0x78>
 8010d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d34:	07dc      	lsls	r4, r3, #31
 8010d36:	d50e      	bpl.n	8010d56 <_vfiprintf_r+0x6a>
 8010d38:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3c:	b01d      	add	sp, #116	; 0x74
 8010d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d42:	4b7b      	ldr	r3, [pc, #492]	; (8010f30 <_vfiprintf_r+0x244>)
 8010d44:	429d      	cmp	r5, r3
 8010d46:	d101      	bne.n	8010d4c <_vfiprintf_r+0x60>
 8010d48:	68b5      	ldr	r5, [r6, #8]
 8010d4a:	e7df      	b.n	8010d0c <_vfiprintf_r+0x20>
 8010d4c:	4b79      	ldr	r3, [pc, #484]	; (8010f34 <_vfiprintf_r+0x248>)
 8010d4e:	429d      	cmp	r5, r3
 8010d50:	bf08      	it	eq
 8010d52:	68f5      	ldreq	r5, [r6, #12]
 8010d54:	e7da      	b.n	8010d0c <_vfiprintf_r+0x20>
 8010d56:	89ab      	ldrh	r3, [r5, #12]
 8010d58:	0598      	lsls	r0, r3, #22
 8010d5a:	d4ed      	bmi.n	8010d38 <_vfiprintf_r+0x4c>
 8010d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d5e:	f000 fb72 	bl	8011446 <__retarget_lock_release_recursive>
 8010d62:	e7e9      	b.n	8010d38 <_vfiprintf_r+0x4c>
 8010d64:	2300      	movs	r3, #0
 8010d66:	9309      	str	r3, [sp, #36]	; 0x24
 8010d68:	2320      	movs	r3, #32
 8010d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d6e:	2330      	movs	r3, #48	; 0x30
 8010d70:	f04f 0901 	mov.w	r9, #1
 8010d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010f38 <_vfiprintf_r+0x24c>
 8010d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d80:	4623      	mov	r3, r4
 8010d82:	469a      	mov	sl, r3
 8010d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d88:	b10a      	cbz	r2, 8010d8e <_vfiprintf_r+0xa2>
 8010d8a:	2a25      	cmp	r2, #37	; 0x25
 8010d8c:	d1f9      	bne.n	8010d82 <_vfiprintf_r+0x96>
 8010d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d92:	d00b      	beq.n	8010dac <_vfiprintf_r+0xc0>
 8010d94:	465b      	mov	r3, fp
 8010d96:	4622      	mov	r2, r4
 8010d98:	4629      	mov	r1, r5
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	f7ff ff94 	bl	8010cc8 <__sfputs_r>
 8010da0:	3001      	adds	r0, #1
 8010da2:	f000 80aa 	beq.w	8010efa <_vfiprintf_r+0x20e>
 8010da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010da8:	445a      	add	r2, fp
 8010daa:	9209      	str	r2, [sp, #36]	; 0x24
 8010dac:	f89a 3000 	ldrb.w	r3, [sl]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f000 80a2 	beq.w	8010efa <_vfiprintf_r+0x20e>
 8010db6:	2300      	movs	r3, #0
 8010db8:	f04f 32ff 	mov.w	r2, #4294967295
 8010dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dc0:	f10a 0a01 	add.w	sl, sl, #1
 8010dc4:	9304      	str	r3, [sp, #16]
 8010dc6:	9307      	str	r3, [sp, #28]
 8010dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8010dce:	4654      	mov	r4, sl
 8010dd0:	2205      	movs	r2, #5
 8010dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dd6:	4858      	ldr	r0, [pc, #352]	; (8010f38 <_vfiprintf_r+0x24c>)
 8010dd8:	f7fe ff98 	bl	800fd0c <memchr>
 8010ddc:	9a04      	ldr	r2, [sp, #16]
 8010dde:	b9d8      	cbnz	r0, 8010e18 <_vfiprintf_r+0x12c>
 8010de0:	06d1      	lsls	r1, r2, #27
 8010de2:	bf44      	itt	mi
 8010de4:	2320      	movmi	r3, #32
 8010de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dea:	0713      	lsls	r3, r2, #28
 8010dec:	bf44      	itt	mi
 8010dee:	232b      	movmi	r3, #43	; 0x2b
 8010df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010df4:	f89a 3000 	ldrb.w	r3, [sl]
 8010df8:	2b2a      	cmp	r3, #42	; 0x2a
 8010dfa:	d015      	beq.n	8010e28 <_vfiprintf_r+0x13c>
 8010dfc:	4654      	mov	r4, sl
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f04f 0c0a 	mov.w	ip, #10
 8010e04:	9a07      	ldr	r2, [sp, #28]
 8010e06:	4621      	mov	r1, r4
 8010e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e0c:	3b30      	subs	r3, #48	; 0x30
 8010e0e:	2b09      	cmp	r3, #9
 8010e10:	d94e      	bls.n	8010eb0 <_vfiprintf_r+0x1c4>
 8010e12:	b1b0      	cbz	r0, 8010e42 <_vfiprintf_r+0x156>
 8010e14:	9207      	str	r2, [sp, #28]
 8010e16:	e014      	b.n	8010e42 <_vfiprintf_r+0x156>
 8010e18:	eba0 0308 	sub.w	r3, r0, r8
 8010e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8010e20:	4313      	orrs	r3, r2
 8010e22:	46a2      	mov	sl, r4
 8010e24:	9304      	str	r3, [sp, #16]
 8010e26:	e7d2      	b.n	8010dce <_vfiprintf_r+0xe2>
 8010e28:	9b03      	ldr	r3, [sp, #12]
 8010e2a:	1d19      	adds	r1, r3, #4
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	9103      	str	r1, [sp, #12]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	bfbb      	ittet	lt
 8010e34:	425b      	neglt	r3, r3
 8010e36:	f042 0202 	orrlt.w	r2, r2, #2
 8010e3a:	9307      	strge	r3, [sp, #28]
 8010e3c:	9307      	strlt	r3, [sp, #28]
 8010e3e:	bfb8      	it	lt
 8010e40:	9204      	strlt	r2, [sp, #16]
 8010e42:	7823      	ldrb	r3, [r4, #0]
 8010e44:	2b2e      	cmp	r3, #46	; 0x2e
 8010e46:	d10c      	bne.n	8010e62 <_vfiprintf_r+0x176>
 8010e48:	7863      	ldrb	r3, [r4, #1]
 8010e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8010e4c:	d135      	bne.n	8010eba <_vfiprintf_r+0x1ce>
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	3402      	adds	r4, #2
 8010e52:	1d1a      	adds	r2, r3, #4
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	9203      	str	r2, [sp, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	bfb8      	it	lt
 8010e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e60:	9305      	str	r3, [sp, #20]
 8010e62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010f3c <_vfiprintf_r+0x250>
 8010e66:	2203      	movs	r2, #3
 8010e68:	4650      	mov	r0, sl
 8010e6a:	7821      	ldrb	r1, [r4, #0]
 8010e6c:	f7fe ff4e 	bl	800fd0c <memchr>
 8010e70:	b140      	cbz	r0, 8010e84 <_vfiprintf_r+0x198>
 8010e72:	2340      	movs	r3, #64	; 0x40
 8010e74:	eba0 000a 	sub.w	r0, r0, sl
 8010e78:	fa03 f000 	lsl.w	r0, r3, r0
 8010e7c:	9b04      	ldr	r3, [sp, #16]
 8010e7e:	3401      	adds	r4, #1
 8010e80:	4303      	orrs	r3, r0
 8010e82:	9304      	str	r3, [sp, #16]
 8010e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e88:	2206      	movs	r2, #6
 8010e8a:	482d      	ldr	r0, [pc, #180]	; (8010f40 <_vfiprintf_r+0x254>)
 8010e8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e90:	f7fe ff3c 	bl	800fd0c <memchr>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d03f      	beq.n	8010f18 <_vfiprintf_r+0x22c>
 8010e98:	4b2a      	ldr	r3, [pc, #168]	; (8010f44 <_vfiprintf_r+0x258>)
 8010e9a:	bb1b      	cbnz	r3, 8010ee4 <_vfiprintf_r+0x1f8>
 8010e9c:	9b03      	ldr	r3, [sp, #12]
 8010e9e:	3307      	adds	r3, #7
 8010ea0:	f023 0307 	bic.w	r3, r3, #7
 8010ea4:	3308      	adds	r3, #8
 8010ea6:	9303      	str	r3, [sp, #12]
 8010ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eaa:	443b      	add	r3, r7
 8010eac:	9309      	str	r3, [sp, #36]	; 0x24
 8010eae:	e767      	b.n	8010d80 <_vfiprintf_r+0x94>
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	2001      	movs	r0, #1
 8010eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eb8:	e7a5      	b.n	8010e06 <_vfiprintf_r+0x11a>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f04f 0c0a 	mov.w	ip, #10
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	3401      	adds	r4, #1
 8010ec4:	9305      	str	r3, [sp, #20]
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ecc:	3a30      	subs	r2, #48	; 0x30
 8010ece:	2a09      	cmp	r2, #9
 8010ed0:	d903      	bls.n	8010eda <_vfiprintf_r+0x1ee>
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d0c5      	beq.n	8010e62 <_vfiprintf_r+0x176>
 8010ed6:	9105      	str	r1, [sp, #20]
 8010ed8:	e7c3      	b.n	8010e62 <_vfiprintf_r+0x176>
 8010eda:	4604      	mov	r4, r0
 8010edc:	2301      	movs	r3, #1
 8010ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ee2:	e7f0      	b.n	8010ec6 <_vfiprintf_r+0x1da>
 8010ee4:	ab03      	add	r3, sp, #12
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	462a      	mov	r2, r5
 8010eea:	4630      	mov	r0, r6
 8010eec:	4b16      	ldr	r3, [pc, #88]	; (8010f48 <_vfiprintf_r+0x25c>)
 8010eee:	a904      	add	r1, sp, #16
 8010ef0:	f7fc faec 	bl	800d4cc <_printf_float>
 8010ef4:	4607      	mov	r7, r0
 8010ef6:	1c78      	adds	r0, r7, #1
 8010ef8:	d1d6      	bne.n	8010ea8 <_vfiprintf_r+0x1bc>
 8010efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010efc:	07d9      	lsls	r1, r3, #31
 8010efe:	d405      	bmi.n	8010f0c <_vfiprintf_r+0x220>
 8010f00:	89ab      	ldrh	r3, [r5, #12]
 8010f02:	059a      	lsls	r2, r3, #22
 8010f04:	d402      	bmi.n	8010f0c <_vfiprintf_r+0x220>
 8010f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f08:	f000 fa9d 	bl	8011446 <__retarget_lock_release_recursive>
 8010f0c:	89ab      	ldrh	r3, [r5, #12]
 8010f0e:	065b      	lsls	r3, r3, #25
 8010f10:	f53f af12 	bmi.w	8010d38 <_vfiprintf_r+0x4c>
 8010f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f16:	e711      	b.n	8010d3c <_vfiprintf_r+0x50>
 8010f18:	ab03      	add	r3, sp, #12
 8010f1a:	9300      	str	r3, [sp, #0]
 8010f1c:	462a      	mov	r2, r5
 8010f1e:	4630      	mov	r0, r6
 8010f20:	4b09      	ldr	r3, [pc, #36]	; (8010f48 <_vfiprintf_r+0x25c>)
 8010f22:	a904      	add	r1, sp, #16
 8010f24:	f7fc fd6e 	bl	800da04 <_printf_i>
 8010f28:	e7e4      	b.n	8010ef4 <_vfiprintf_r+0x208>
 8010f2a:	bf00      	nop
 8010f2c:	08011efc 	.word	0x08011efc
 8010f30:	08011f1c 	.word	0x08011f1c
 8010f34:	08011edc 	.word	0x08011edc
 8010f38:	08011d8c 	.word	0x08011d8c
 8010f3c:	08011d92 	.word	0x08011d92
 8010f40:	08011d96 	.word	0x08011d96
 8010f44:	0800d4cd 	.word	0x0800d4cd
 8010f48:	08010cc9 	.word	0x08010cc9

08010f4c <__swbuf_r>:
 8010f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f4e:	460e      	mov	r6, r1
 8010f50:	4614      	mov	r4, r2
 8010f52:	4605      	mov	r5, r0
 8010f54:	b118      	cbz	r0, 8010f5e <__swbuf_r+0x12>
 8010f56:	6983      	ldr	r3, [r0, #24]
 8010f58:	b90b      	cbnz	r3, 8010f5e <__swbuf_r+0x12>
 8010f5a:	f000 f9d5 	bl	8011308 <__sinit>
 8010f5e:	4b21      	ldr	r3, [pc, #132]	; (8010fe4 <__swbuf_r+0x98>)
 8010f60:	429c      	cmp	r4, r3
 8010f62:	d12b      	bne.n	8010fbc <__swbuf_r+0x70>
 8010f64:	686c      	ldr	r4, [r5, #4]
 8010f66:	69a3      	ldr	r3, [r4, #24]
 8010f68:	60a3      	str	r3, [r4, #8]
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	071a      	lsls	r2, r3, #28
 8010f6e:	d52f      	bpl.n	8010fd0 <__swbuf_r+0x84>
 8010f70:	6923      	ldr	r3, [r4, #16]
 8010f72:	b36b      	cbz	r3, 8010fd0 <__swbuf_r+0x84>
 8010f74:	6923      	ldr	r3, [r4, #16]
 8010f76:	6820      	ldr	r0, [r4, #0]
 8010f78:	b2f6      	uxtb	r6, r6
 8010f7a:	1ac0      	subs	r0, r0, r3
 8010f7c:	6963      	ldr	r3, [r4, #20]
 8010f7e:	4637      	mov	r7, r6
 8010f80:	4283      	cmp	r3, r0
 8010f82:	dc04      	bgt.n	8010f8e <__swbuf_r+0x42>
 8010f84:	4621      	mov	r1, r4
 8010f86:	4628      	mov	r0, r5
 8010f88:	f000 f92a 	bl	80111e0 <_fflush_r>
 8010f8c:	bb30      	cbnz	r0, 8010fdc <__swbuf_r+0x90>
 8010f8e:	68a3      	ldr	r3, [r4, #8]
 8010f90:	3001      	adds	r0, #1
 8010f92:	3b01      	subs	r3, #1
 8010f94:	60a3      	str	r3, [r4, #8]
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	1c5a      	adds	r2, r3, #1
 8010f9a:	6022      	str	r2, [r4, #0]
 8010f9c:	701e      	strb	r6, [r3, #0]
 8010f9e:	6963      	ldr	r3, [r4, #20]
 8010fa0:	4283      	cmp	r3, r0
 8010fa2:	d004      	beq.n	8010fae <__swbuf_r+0x62>
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	07db      	lsls	r3, r3, #31
 8010fa8:	d506      	bpl.n	8010fb8 <__swbuf_r+0x6c>
 8010faa:	2e0a      	cmp	r6, #10
 8010fac:	d104      	bne.n	8010fb8 <__swbuf_r+0x6c>
 8010fae:	4621      	mov	r1, r4
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	f000 f915 	bl	80111e0 <_fflush_r>
 8010fb6:	b988      	cbnz	r0, 8010fdc <__swbuf_r+0x90>
 8010fb8:	4638      	mov	r0, r7
 8010fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fbc:	4b0a      	ldr	r3, [pc, #40]	; (8010fe8 <__swbuf_r+0x9c>)
 8010fbe:	429c      	cmp	r4, r3
 8010fc0:	d101      	bne.n	8010fc6 <__swbuf_r+0x7a>
 8010fc2:	68ac      	ldr	r4, [r5, #8]
 8010fc4:	e7cf      	b.n	8010f66 <__swbuf_r+0x1a>
 8010fc6:	4b09      	ldr	r3, [pc, #36]	; (8010fec <__swbuf_r+0xa0>)
 8010fc8:	429c      	cmp	r4, r3
 8010fca:	bf08      	it	eq
 8010fcc:	68ec      	ldreq	r4, [r5, #12]
 8010fce:	e7ca      	b.n	8010f66 <__swbuf_r+0x1a>
 8010fd0:	4621      	mov	r1, r4
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f000 f80c 	bl	8010ff0 <__swsetup_r>
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d0cb      	beq.n	8010f74 <__swbuf_r+0x28>
 8010fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8010fe0:	e7ea      	b.n	8010fb8 <__swbuf_r+0x6c>
 8010fe2:	bf00      	nop
 8010fe4:	08011efc 	.word	0x08011efc
 8010fe8:	08011f1c 	.word	0x08011f1c
 8010fec:	08011edc 	.word	0x08011edc

08010ff0 <__swsetup_r>:
 8010ff0:	4b32      	ldr	r3, [pc, #200]	; (80110bc <__swsetup_r+0xcc>)
 8010ff2:	b570      	push	{r4, r5, r6, lr}
 8010ff4:	681d      	ldr	r5, [r3, #0]
 8010ff6:	4606      	mov	r6, r0
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	b125      	cbz	r5, 8011006 <__swsetup_r+0x16>
 8010ffc:	69ab      	ldr	r3, [r5, #24]
 8010ffe:	b913      	cbnz	r3, 8011006 <__swsetup_r+0x16>
 8011000:	4628      	mov	r0, r5
 8011002:	f000 f981 	bl	8011308 <__sinit>
 8011006:	4b2e      	ldr	r3, [pc, #184]	; (80110c0 <__swsetup_r+0xd0>)
 8011008:	429c      	cmp	r4, r3
 801100a:	d10f      	bne.n	801102c <__swsetup_r+0x3c>
 801100c:	686c      	ldr	r4, [r5, #4]
 801100e:	89a3      	ldrh	r3, [r4, #12]
 8011010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011014:	0719      	lsls	r1, r3, #28
 8011016:	d42c      	bmi.n	8011072 <__swsetup_r+0x82>
 8011018:	06dd      	lsls	r5, r3, #27
 801101a:	d411      	bmi.n	8011040 <__swsetup_r+0x50>
 801101c:	2309      	movs	r3, #9
 801101e:	6033      	str	r3, [r6, #0]
 8011020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011024:	f04f 30ff 	mov.w	r0, #4294967295
 8011028:	81a3      	strh	r3, [r4, #12]
 801102a:	e03e      	b.n	80110aa <__swsetup_r+0xba>
 801102c:	4b25      	ldr	r3, [pc, #148]	; (80110c4 <__swsetup_r+0xd4>)
 801102e:	429c      	cmp	r4, r3
 8011030:	d101      	bne.n	8011036 <__swsetup_r+0x46>
 8011032:	68ac      	ldr	r4, [r5, #8]
 8011034:	e7eb      	b.n	801100e <__swsetup_r+0x1e>
 8011036:	4b24      	ldr	r3, [pc, #144]	; (80110c8 <__swsetup_r+0xd8>)
 8011038:	429c      	cmp	r4, r3
 801103a:	bf08      	it	eq
 801103c:	68ec      	ldreq	r4, [r5, #12]
 801103e:	e7e6      	b.n	801100e <__swsetup_r+0x1e>
 8011040:	0758      	lsls	r0, r3, #29
 8011042:	d512      	bpl.n	801106a <__swsetup_r+0x7a>
 8011044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011046:	b141      	cbz	r1, 801105a <__swsetup_r+0x6a>
 8011048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801104c:	4299      	cmp	r1, r3
 801104e:	d002      	beq.n	8011056 <__swsetup_r+0x66>
 8011050:	4630      	mov	r0, r6
 8011052:	f7ff fb43 	bl	80106dc <_free_r>
 8011056:	2300      	movs	r3, #0
 8011058:	6363      	str	r3, [r4, #52]	; 0x34
 801105a:	89a3      	ldrh	r3, [r4, #12]
 801105c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	2300      	movs	r3, #0
 8011064:	6063      	str	r3, [r4, #4]
 8011066:	6923      	ldr	r3, [r4, #16]
 8011068:	6023      	str	r3, [r4, #0]
 801106a:	89a3      	ldrh	r3, [r4, #12]
 801106c:	f043 0308 	orr.w	r3, r3, #8
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	6923      	ldr	r3, [r4, #16]
 8011074:	b94b      	cbnz	r3, 801108a <__swsetup_r+0x9a>
 8011076:	89a3      	ldrh	r3, [r4, #12]
 8011078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801107c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011080:	d003      	beq.n	801108a <__swsetup_r+0x9a>
 8011082:	4621      	mov	r1, r4
 8011084:	4630      	mov	r0, r6
 8011086:	f000 fa05 	bl	8011494 <__smakebuf_r>
 801108a:	89a0      	ldrh	r0, [r4, #12]
 801108c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011090:	f010 0301 	ands.w	r3, r0, #1
 8011094:	d00a      	beq.n	80110ac <__swsetup_r+0xbc>
 8011096:	2300      	movs	r3, #0
 8011098:	60a3      	str	r3, [r4, #8]
 801109a:	6963      	ldr	r3, [r4, #20]
 801109c:	425b      	negs	r3, r3
 801109e:	61a3      	str	r3, [r4, #24]
 80110a0:	6923      	ldr	r3, [r4, #16]
 80110a2:	b943      	cbnz	r3, 80110b6 <__swsetup_r+0xc6>
 80110a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80110a8:	d1ba      	bne.n	8011020 <__swsetup_r+0x30>
 80110aa:	bd70      	pop	{r4, r5, r6, pc}
 80110ac:	0781      	lsls	r1, r0, #30
 80110ae:	bf58      	it	pl
 80110b0:	6963      	ldrpl	r3, [r4, #20]
 80110b2:	60a3      	str	r3, [r4, #8]
 80110b4:	e7f4      	b.n	80110a0 <__swsetup_r+0xb0>
 80110b6:	2000      	movs	r0, #0
 80110b8:	e7f7      	b.n	80110aa <__swsetup_r+0xba>
 80110ba:	bf00      	nop
 80110bc:	2000019c 	.word	0x2000019c
 80110c0:	08011efc 	.word	0x08011efc
 80110c4:	08011f1c 	.word	0x08011f1c
 80110c8:	08011edc 	.word	0x08011edc

080110cc <abort>:
 80110cc:	2006      	movs	r0, #6
 80110ce:	b508      	push	{r3, lr}
 80110d0:	f000 fa50 	bl	8011574 <raise>
 80110d4:	2001      	movs	r0, #1
 80110d6:	f7f6 fec5 	bl	8007e64 <_exit>
	...

080110dc <__sflush_r>:
 80110dc:	898a      	ldrh	r2, [r1, #12]
 80110de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e0:	4605      	mov	r5, r0
 80110e2:	0710      	lsls	r0, r2, #28
 80110e4:	460c      	mov	r4, r1
 80110e6:	d457      	bmi.n	8011198 <__sflush_r+0xbc>
 80110e8:	684b      	ldr	r3, [r1, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	dc04      	bgt.n	80110f8 <__sflush_r+0x1c>
 80110ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	dc01      	bgt.n	80110f8 <__sflush_r+0x1c>
 80110f4:	2000      	movs	r0, #0
 80110f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110fa:	2e00      	cmp	r6, #0
 80110fc:	d0fa      	beq.n	80110f4 <__sflush_r+0x18>
 80110fe:	2300      	movs	r3, #0
 8011100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011104:	682f      	ldr	r7, [r5, #0]
 8011106:	602b      	str	r3, [r5, #0]
 8011108:	d032      	beq.n	8011170 <__sflush_r+0x94>
 801110a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801110c:	89a3      	ldrh	r3, [r4, #12]
 801110e:	075a      	lsls	r2, r3, #29
 8011110:	d505      	bpl.n	801111e <__sflush_r+0x42>
 8011112:	6863      	ldr	r3, [r4, #4]
 8011114:	1ac0      	subs	r0, r0, r3
 8011116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011118:	b10b      	cbz	r3, 801111e <__sflush_r+0x42>
 801111a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801111c:	1ac0      	subs	r0, r0, r3
 801111e:	2300      	movs	r3, #0
 8011120:	4602      	mov	r2, r0
 8011122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011124:	4628      	mov	r0, r5
 8011126:	6a21      	ldr	r1, [r4, #32]
 8011128:	47b0      	blx	r6
 801112a:	1c43      	adds	r3, r0, #1
 801112c:	89a3      	ldrh	r3, [r4, #12]
 801112e:	d106      	bne.n	801113e <__sflush_r+0x62>
 8011130:	6829      	ldr	r1, [r5, #0]
 8011132:	291d      	cmp	r1, #29
 8011134:	d82c      	bhi.n	8011190 <__sflush_r+0xb4>
 8011136:	4a29      	ldr	r2, [pc, #164]	; (80111dc <__sflush_r+0x100>)
 8011138:	40ca      	lsrs	r2, r1
 801113a:	07d6      	lsls	r6, r2, #31
 801113c:	d528      	bpl.n	8011190 <__sflush_r+0xb4>
 801113e:	2200      	movs	r2, #0
 8011140:	6062      	str	r2, [r4, #4]
 8011142:	6922      	ldr	r2, [r4, #16]
 8011144:	04d9      	lsls	r1, r3, #19
 8011146:	6022      	str	r2, [r4, #0]
 8011148:	d504      	bpl.n	8011154 <__sflush_r+0x78>
 801114a:	1c42      	adds	r2, r0, #1
 801114c:	d101      	bne.n	8011152 <__sflush_r+0x76>
 801114e:	682b      	ldr	r3, [r5, #0]
 8011150:	b903      	cbnz	r3, 8011154 <__sflush_r+0x78>
 8011152:	6560      	str	r0, [r4, #84]	; 0x54
 8011154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011156:	602f      	str	r7, [r5, #0]
 8011158:	2900      	cmp	r1, #0
 801115a:	d0cb      	beq.n	80110f4 <__sflush_r+0x18>
 801115c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011160:	4299      	cmp	r1, r3
 8011162:	d002      	beq.n	801116a <__sflush_r+0x8e>
 8011164:	4628      	mov	r0, r5
 8011166:	f7ff fab9 	bl	80106dc <_free_r>
 801116a:	2000      	movs	r0, #0
 801116c:	6360      	str	r0, [r4, #52]	; 0x34
 801116e:	e7c2      	b.n	80110f6 <__sflush_r+0x1a>
 8011170:	6a21      	ldr	r1, [r4, #32]
 8011172:	2301      	movs	r3, #1
 8011174:	4628      	mov	r0, r5
 8011176:	47b0      	blx	r6
 8011178:	1c41      	adds	r1, r0, #1
 801117a:	d1c7      	bne.n	801110c <__sflush_r+0x30>
 801117c:	682b      	ldr	r3, [r5, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d0c4      	beq.n	801110c <__sflush_r+0x30>
 8011182:	2b1d      	cmp	r3, #29
 8011184:	d001      	beq.n	801118a <__sflush_r+0xae>
 8011186:	2b16      	cmp	r3, #22
 8011188:	d101      	bne.n	801118e <__sflush_r+0xb2>
 801118a:	602f      	str	r7, [r5, #0]
 801118c:	e7b2      	b.n	80110f4 <__sflush_r+0x18>
 801118e:	89a3      	ldrh	r3, [r4, #12]
 8011190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011194:	81a3      	strh	r3, [r4, #12]
 8011196:	e7ae      	b.n	80110f6 <__sflush_r+0x1a>
 8011198:	690f      	ldr	r7, [r1, #16]
 801119a:	2f00      	cmp	r7, #0
 801119c:	d0aa      	beq.n	80110f4 <__sflush_r+0x18>
 801119e:	0793      	lsls	r3, r2, #30
 80111a0:	bf18      	it	ne
 80111a2:	2300      	movne	r3, #0
 80111a4:	680e      	ldr	r6, [r1, #0]
 80111a6:	bf08      	it	eq
 80111a8:	694b      	ldreq	r3, [r1, #20]
 80111aa:	1bf6      	subs	r6, r6, r7
 80111ac:	600f      	str	r7, [r1, #0]
 80111ae:	608b      	str	r3, [r1, #8]
 80111b0:	2e00      	cmp	r6, #0
 80111b2:	dd9f      	ble.n	80110f4 <__sflush_r+0x18>
 80111b4:	4633      	mov	r3, r6
 80111b6:	463a      	mov	r2, r7
 80111b8:	4628      	mov	r0, r5
 80111ba:	6a21      	ldr	r1, [r4, #32]
 80111bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80111c0:	47e0      	blx	ip
 80111c2:	2800      	cmp	r0, #0
 80111c4:	dc06      	bgt.n	80111d4 <__sflush_r+0xf8>
 80111c6:	89a3      	ldrh	r3, [r4, #12]
 80111c8:	f04f 30ff 	mov.w	r0, #4294967295
 80111cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111d0:	81a3      	strh	r3, [r4, #12]
 80111d2:	e790      	b.n	80110f6 <__sflush_r+0x1a>
 80111d4:	4407      	add	r7, r0
 80111d6:	1a36      	subs	r6, r6, r0
 80111d8:	e7ea      	b.n	80111b0 <__sflush_r+0xd4>
 80111da:	bf00      	nop
 80111dc:	20400001 	.word	0x20400001

080111e0 <_fflush_r>:
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	690b      	ldr	r3, [r1, #16]
 80111e4:	4605      	mov	r5, r0
 80111e6:	460c      	mov	r4, r1
 80111e8:	b913      	cbnz	r3, 80111f0 <_fflush_r+0x10>
 80111ea:	2500      	movs	r5, #0
 80111ec:	4628      	mov	r0, r5
 80111ee:	bd38      	pop	{r3, r4, r5, pc}
 80111f0:	b118      	cbz	r0, 80111fa <_fflush_r+0x1a>
 80111f2:	6983      	ldr	r3, [r0, #24]
 80111f4:	b90b      	cbnz	r3, 80111fa <_fflush_r+0x1a>
 80111f6:	f000 f887 	bl	8011308 <__sinit>
 80111fa:	4b14      	ldr	r3, [pc, #80]	; (801124c <_fflush_r+0x6c>)
 80111fc:	429c      	cmp	r4, r3
 80111fe:	d11b      	bne.n	8011238 <_fflush_r+0x58>
 8011200:	686c      	ldr	r4, [r5, #4]
 8011202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d0ef      	beq.n	80111ea <_fflush_r+0xa>
 801120a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801120c:	07d0      	lsls	r0, r2, #31
 801120e:	d404      	bmi.n	801121a <_fflush_r+0x3a>
 8011210:	0599      	lsls	r1, r3, #22
 8011212:	d402      	bmi.n	801121a <_fflush_r+0x3a>
 8011214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011216:	f000 f915 	bl	8011444 <__retarget_lock_acquire_recursive>
 801121a:	4628      	mov	r0, r5
 801121c:	4621      	mov	r1, r4
 801121e:	f7ff ff5d 	bl	80110dc <__sflush_r>
 8011222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011224:	4605      	mov	r5, r0
 8011226:	07da      	lsls	r2, r3, #31
 8011228:	d4e0      	bmi.n	80111ec <_fflush_r+0xc>
 801122a:	89a3      	ldrh	r3, [r4, #12]
 801122c:	059b      	lsls	r3, r3, #22
 801122e:	d4dd      	bmi.n	80111ec <_fflush_r+0xc>
 8011230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011232:	f000 f908 	bl	8011446 <__retarget_lock_release_recursive>
 8011236:	e7d9      	b.n	80111ec <_fflush_r+0xc>
 8011238:	4b05      	ldr	r3, [pc, #20]	; (8011250 <_fflush_r+0x70>)
 801123a:	429c      	cmp	r4, r3
 801123c:	d101      	bne.n	8011242 <_fflush_r+0x62>
 801123e:	68ac      	ldr	r4, [r5, #8]
 8011240:	e7df      	b.n	8011202 <_fflush_r+0x22>
 8011242:	4b04      	ldr	r3, [pc, #16]	; (8011254 <_fflush_r+0x74>)
 8011244:	429c      	cmp	r4, r3
 8011246:	bf08      	it	eq
 8011248:	68ec      	ldreq	r4, [r5, #12]
 801124a:	e7da      	b.n	8011202 <_fflush_r+0x22>
 801124c:	08011efc 	.word	0x08011efc
 8011250:	08011f1c 	.word	0x08011f1c
 8011254:	08011edc 	.word	0x08011edc

08011258 <std>:
 8011258:	2300      	movs	r3, #0
 801125a:	b510      	push	{r4, lr}
 801125c:	4604      	mov	r4, r0
 801125e:	e9c0 3300 	strd	r3, r3, [r0]
 8011262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011266:	6083      	str	r3, [r0, #8]
 8011268:	8181      	strh	r1, [r0, #12]
 801126a:	6643      	str	r3, [r0, #100]	; 0x64
 801126c:	81c2      	strh	r2, [r0, #14]
 801126e:	6183      	str	r3, [r0, #24]
 8011270:	4619      	mov	r1, r3
 8011272:	2208      	movs	r2, #8
 8011274:	305c      	adds	r0, #92	; 0x5c
 8011276:	f7fc f883 	bl	800d380 <memset>
 801127a:	4b05      	ldr	r3, [pc, #20]	; (8011290 <std+0x38>)
 801127c:	6224      	str	r4, [r4, #32]
 801127e:	6263      	str	r3, [r4, #36]	; 0x24
 8011280:	4b04      	ldr	r3, [pc, #16]	; (8011294 <std+0x3c>)
 8011282:	62a3      	str	r3, [r4, #40]	; 0x28
 8011284:	4b04      	ldr	r3, [pc, #16]	; (8011298 <std+0x40>)
 8011286:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011288:	4b04      	ldr	r3, [pc, #16]	; (801129c <std+0x44>)
 801128a:	6323      	str	r3, [r4, #48]	; 0x30
 801128c:	bd10      	pop	{r4, pc}
 801128e:	bf00      	nop
 8011290:	080115ad 	.word	0x080115ad
 8011294:	080115cf 	.word	0x080115cf
 8011298:	08011607 	.word	0x08011607
 801129c:	0801162b 	.word	0x0801162b

080112a0 <_cleanup_r>:
 80112a0:	4901      	ldr	r1, [pc, #4]	; (80112a8 <_cleanup_r+0x8>)
 80112a2:	f000 b8af 	b.w	8011404 <_fwalk_reent>
 80112a6:	bf00      	nop
 80112a8:	080111e1 	.word	0x080111e1

080112ac <__sfmoreglue>:
 80112ac:	2268      	movs	r2, #104	; 0x68
 80112ae:	b570      	push	{r4, r5, r6, lr}
 80112b0:	1e4d      	subs	r5, r1, #1
 80112b2:	4355      	muls	r5, r2
 80112b4:	460e      	mov	r6, r1
 80112b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80112ba:	f7ff fa77 	bl	80107ac <_malloc_r>
 80112be:	4604      	mov	r4, r0
 80112c0:	b140      	cbz	r0, 80112d4 <__sfmoreglue+0x28>
 80112c2:	2100      	movs	r1, #0
 80112c4:	e9c0 1600 	strd	r1, r6, [r0]
 80112c8:	300c      	adds	r0, #12
 80112ca:	60a0      	str	r0, [r4, #8]
 80112cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112d0:	f7fc f856 	bl	800d380 <memset>
 80112d4:	4620      	mov	r0, r4
 80112d6:	bd70      	pop	{r4, r5, r6, pc}

080112d8 <__sfp_lock_acquire>:
 80112d8:	4801      	ldr	r0, [pc, #4]	; (80112e0 <__sfp_lock_acquire+0x8>)
 80112da:	f000 b8b3 	b.w	8011444 <__retarget_lock_acquire_recursive>
 80112de:	bf00      	nop
 80112e0:	20001c15 	.word	0x20001c15

080112e4 <__sfp_lock_release>:
 80112e4:	4801      	ldr	r0, [pc, #4]	; (80112ec <__sfp_lock_release+0x8>)
 80112e6:	f000 b8ae 	b.w	8011446 <__retarget_lock_release_recursive>
 80112ea:	bf00      	nop
 80112ec:	20001c15 	.word	0x20001c15

080112f0 <__sinit_lock_acquire>:
 80112f0:	4801      	ldr	r0, [pc, #4]	; (80112f8 <__sinit_lock_acquire+0x8>)
 80112f2:	f000 b8a7 	b.w	8011444 <__retarget_lock_acquire_recursive>
 80112f6:	bf00      	nop
 80112f8:	20001c16 	.word	0x20001c16

080112fc <__sinit_lock_release>:
 80112fc:	4801      	ldr	r0, [pc, #4]	; (8011304 <__sinit_lock_release+0x8>)
 80112fe:	f000 b8a2 	b.w	8011446 <__retarget_lock_release_recursive>
 8011302:	bf00      	nop
 8011304:	20001c16 	.word	0x20001c16

08011308 <__sinit>:
 8011308:	b510      	push	{r4, lr}
 801130a:	4604      	mov	r4, r0
 801130c:	f7ff fff0 	bl	80112f0 <__sinit_lock_acquire>
 8011310:	69a3      	ldr	r3, [r4, #24]
 8011312:	b11b      	cbz	r3, 801131c <__sinit+0x14>
 8011314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011318:	f7ff bff0 	b.w	80112fc <__sinit_lock_release>
 801131c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011320:	6523      	str	r3, [r4, #80]	; 0x50
 8011322:	4b13      	ldr	r3, [pc, #76]	; (8011370 <__sinit+0x68>)
 8011324:	4a13      	ldr	r2, [pc, #76]	; (8011374 <__sinit+0x6c>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	62a2      	str	r2, [r4, #40]	; 0x28
 801132a:	42a3      	cmp	r3, r4
 801132c:	bf08      	it	eq
 801132e:	2301      	moveq	r3, #1
 8011330:	4620      	mov	r0, r4
 8011332:	bf08      	it	eq
 8011334:	61a3      	streq	r3, [r4, #24]
 8011336:	f000 f81f 	bl	8011378 <__sfp>
 801133a:	6060      	str	r0, [r4, #4]
 801133c:	4620      	mov	r0, r4
 801133e:	f000 f81b 	bl	8011378 <__sfp>
 8011342:	60a0      	str	r0, [r4, #8]
 8011344:	4620      	mov	r0, r4
 8011346:	f000 f817 	bl	8011378 <__sfp>
 801134a:	2200      	movs	r2, #0
 801134c:	2104      	movs	r1, #4
 801134e:	60e0      	str	r0, [r4, #12]
 8011350:	6860      	ldr	r0, [r4, #4]
 8011352:	f7ff ff81 	bl	8011258 <std>
 8011356:	2201      	movs	r2, #1
 8011358:	2109      	movs	r1, #9
 801135a:	68a0      	ldr	r0, [r4, #8]
 801135c:	f7ff ff7c 	bl	8011258 <std>
 8011360:	2202      	movs	r2, #2
 8011362:	2112      	movs	r1, #18
 8011364:	68e0      	ldr	r0, [r4, #12]
 8011366:	f7ff ff77 	bl	8011258 <std>
 801136a:	2301      	movs	r3, #1
 801136c:	61a3      	str	r3, [r4, #24]
 801136e:	e7d1      	b.n	8011314 <__sinit+0xc>
 8011370:	08011aa0 	.word	0x08011aa0
 8011374:	080112a1 	.word	0x080112a1

08011378 <__sfp>:
 8011378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137a:	4607      	mov	r7, r0
 801137c:	f7ff ffac 	bl	80112d8 <__sfp_lock_acquire>
 8011380:	4b1e      	ldr	r3, [pc, #120]	; (80113fc <__sfp+0x84>)
 8011382:	681e      	ldr	r6, [r3, #0]
 8011384:	69b3      	ldr	r3, [r6, #24]
 8011386:	b913      	cbnz	r3, 801138e <__sfp+0x16>
 8011388:	4630      	mov	r0, r6
 801138a:	f7ff ffbd 	bl	8011308 <__sinit>
 801138e:	3648      	adds	r6, #72	; 0x48
 8011390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011394:	3b01      	subs	r3, #1
 8011396:	d503      	bpl.n	80113a0 <__sfp+0x28>
 8011398:	6833      	ldr	r3, [r6, #0]
 801139a:	b30b      	cbz	r3, 80113e0 <__sfp+0x68>
 801139c:	6836      	ldr	r6, [r6, #0]
 801139e:	e7f7      	b.n	8011390 <__sfp+0x18>
 80113a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113a4:	b9d5      	cbnz	r5, 80113dc <__sfp+0x64>
 80113a6:	4b16      	ldr	r3, [pc, #88]	; (8011400 <__sfp+0x88>)
 80113a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80113ac:	60e3      	str	r3, [r4, #12]
 80113ae:	6665      	str	r5, [r4, #100]	; 0x64
 80113b0:	f000 f847 	bl	8011442 <__retarget_lock_init_recursive>
 80113b4:	f7ff ff96 	bl	80112e4 <__sfp_lock_release>
 80113b8:	2208      	movs	r2, #8
 80113ba:	4629      	mov	r1, r5
 80113bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80113c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80113c4:	6025      	str	r5, [r4, #0]
 80113c6:	61a5      	str	r5, [r4, #24]
 80113c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113cc:	f7fb ffd8 	bl	800d380 <memset>
 80113d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113d8:	4620      	mov	r0, r4
 80113da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113dc:	3468      	adds	r4, #104	; 0x68
 80113de:	e7d9      	b.n	8011394 <__sfp+0x1c>
 80113e0:	2104      	movs	r1, #4
 80113e2:	4638      	mov	r0, r7
 80113e4:	f7ff ff62 	bl	80112ac <__sfmoreglue>
 80113e8:	4604      	mov	r4, r0
 80113ea:	6030      	str	r0, [r6, #0]
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d1d5      	bne.n	801139c <__sfp+0x24>
 80113f0:	f7ff ff78 	bl	80112e4 <__sfp_lock_release>
 80113f4:	230c      	movs	r3, #12
 80113f6:	603b      	str	r3, [r7, #0]
 80113f8:	e7ee      	b.n	80113d8 <__sfp+0x60>
 80113fa:	bf00      	nop
 80113fc:	08011aa0 	.word	0x08011aa0
 8011400:	ffff0001 	.word	0xffff0001

08011404 <_fwalk_reent>:
 8011404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011408:	4606      	mov	r6, r0
 801140a:	4688      	mov	r8, r1
 801140c:	2700      	movs	r7, #0
 801140e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011412:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011416:	f1b9 0901 	subs.w	r9, r9, #1
 801141a:	d505      	bpl.n	8011428 <_fwalk_reent+0x24>
 801141c:	6824      	ldr	r4, [r4, #0]
 801141e:	2c00      	cmp	r4, #0
 8011420:	d1f7      	bne.n	8011412 <_fwalk_reent+0xe>
 8011422:	4638      	mov	r0, r7
 8011424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011428:	89ab      	ldrh	r3, [r5, #12]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d907      	bls.n	801143e <_fwalk_reent+0x3a>
 801142e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011432:	3301      	adds	r3, #1
 8011434:	d003      	beq.n	801143e <_fwalk_reent+0x3a>
 8011436:	4629      	mov	r1, r5
 8011438:	4630      	mov	r0, r6
 801143a:	47c0      	blx	r8
 801143c:	4307      	orrs	r7, r0
 801143e:	3568      	adds	r5, #104	; 0x68
 8011440:	e7e9      	b.n	8011416 <_fwalk_reent+0x12>

08011442 <__retarget_lock_init_recursive>:
 8011442:	4770      	bx	lr

08011444 <__retarget_lock_acquire_recursive>:
 8011444:	4770      	bx	lr

08011446 <__retarget_lock_release_recursive>:
 8011446:	4770      	bx	lr

08011448 <__swhatbuf_r>:
 8011448:	b570      	push	{r4, r5, r6, lr}
 801144a:	460e      	mov	r6, r1
 801144c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011450:	4614      	mov	r4, r2
 8011452:	2900      	cmp	r1, #0
 8011454:	461d      	mov	r5, r3
 8011456:	b096      	sub	sp, #88	; 0x58
 8011458:	da08      	bge.n	801146c <__swhatbuf_r+0x24>
 801145a:	2200      	movs	r2, #0
 801145c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011460:	602a      	str	r2, [r5, #0]
 8011462:	061a      	lsls	r2, r3, #24
 8011464:	d410      	bmi.n	8011488 <__swhatbuf_r+0x40>
 8011466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801146a:	e00e      	b.n	801148a <__swhatbuf_r+0x42>
 801146c:	466a      	mov	r2, sp
 801146e:	f000 f903 	bl	8011678 <_fstat_r>
 8011472:	2800      	cmp	r0, #0
 8011474:	dbf1      	blt.n	801145a <__swhatbuf_r+0x12>
 8011476:	9a01      	ldr	r2, [sp, #4]
 8011478:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801147c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011480:	425a      	negs	r2, r3
 8011482:	415a      	adcs	r2, r3
 8011484:	602a      	str	r2, [r5, #0]
 8011486:	e7ee      	b.n	8011466 <__swhatbuf_r+0x1e>
 8011488:	2340      	movs	r3, #64	; 0x40
 801148a:	2000      	movs	r0, #0
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	b016      	add	sp, #88	; 0x58
 8011490:	bd70      	pop	{r4, r5, r6, pc}
	...

08011494 <__smakebuf_r>:
 8011494:	898b      	ldrh	r3, [r1, #12]
 8011496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011498:	079d      	lsls	r5, r3, #30
 801149a:	4606      	mov	r6, r0
 801149c:	460c      	mov	r4, r1
 801149e:	d507      	bpl.n	80114b0 <__smakebuf_r+0x1c>
 80114a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114a4:	6023      	str	r3, [r4, #0]
 80114a6:	6123      	str	r3, [r4, #16]
 80114a8:	2301      	movs	r3, #1
 80114aa:	6163      	str	r3, [r4, #20]
 80114ac:	b002      	add	sp, #8
 80114ae:	bd70      	pop	{r4, r5, r6, pc}
 80114b0:	466a      	mov	r2, sp
 80114b2:	ab01      	add	r3, sp, #4
 80114b4:	f7ff ffc8 	bl	8011448 <__swhatbuf_r>
 80114b8:	9900      	ldr	r1, [sp, #0]
 80114ba:	4605      	mov	r5, r0
 80114bc:	4630      	mov	r0, r6
 80114be:	f7ff f975 	bl	80107ac <_malloc_r>
 80114c2:	b948      	cbnz	r0, 80114d8 <__smakebuf_r+0x44>
 80114c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114c8:	059a      	lsls	r2, r3, #22
 80114ca:	d4ef      	bmi.n	80114ac <__smakebuf_r+0x18>
 80114cc:	f023 0303 	bic.w	r3, r3, #3
 80114d0:	f043 0302 	orr.w	r3, r3, #2
 80114d4:	81a3      	strh	r3, [r4, #12]
 80114d6:	e7e3      	b.n	80114a0 <__smakebuf_r+0xc>
 80114d8:	4b0d      	ldr	r3, [pc, #52]	; (8011510 <__smakebuf_r+0x7c>)
 80114da:	62b3      	str	r3, [r6, #40]	; 0x28
 80114dc:	89a3      	ldrh	r3, [r4, #12]
 80114de:	6020      	str	r0, [r4, #0]
 80114e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114e4:	81a3      	strh	r3, [r4, #12]
 80114e6:	9b00      	ldr	r3, [sp, #0]
 80114e8:	6120      	str	r0, [r4, #16]
 80114ea:	6163      	str	r3, [r4, #20]
 80114ec:	9b01      	ldr	r3, [sp, #4]
 80114ee:	b15b      	cbz	r3, 8011508 <__smakebuf_r+0x74>
 80114f0:	4630      	mov	r0, r6
 80114f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114f6:	f000 f8d1 	bl	801169c <_isatty_r>
 80114fa:	b128      	cbz	r0, 8011508 <__smakebuf_r+0x74>
 80114fc:	89a3      	ldrh	r3, [r4, #12]
 80114fe:	f023 0303 	bic.w	r3, r3, #3
 8011502:	f043 0301 	orr.w	r3, r3, #1
 8011506:	81a3      	strh	r3, [r4, #12]
 8011508:	89a0      	ldrh	r0, [r4, #12]
 801150a:	4305      	orrs	r5, r0
 801150c:	81a5      	strh	r5, [r4, #12]
 801150e:	e7cd      	b.n	80114ac <__smakebuf_r+0x18>
 8011510:	080112a1 	.word	0x080112a1

08011514 <_malloc_usable_size_r>:
 8011514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011518:	1f18      	subs	r0, r3, #4
 801151a:	2b00      	cmp	r3, #0
 801151c:	bfbc      	itt	lt
 801151e:	580b      	ldrlt	r3, [r1, r0]
 8011520:	18c0      	addlt	r0, r0, r3
 8011522:	4770      	bx	lr

08011524 <_raise_r>:
 8011524:	291f      	cmp	r1, #31
 8011526:	b538      	push	{r3, r4, r5, lr}
 8011528:	4604      	mov	r4, r0
 801152a:	460d      	mov	r5, r1
 801152c:	d904      	bls.n	8011538 <_raise_r+0x14>
 801152e:	2316      	movs	r3, #22
 8011530:	6003      	str	r3, [r0, #0]
 8011532:	f04f 30ff 	mov.w	r0, #4294967295
 8011536:	bd38      	pop	{r3, r4, r5, pc}
 8011538:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801153a:	b112      	cbz	r2, 8011542 <_raise_r+0x1e>
 801153c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011540:	b94b      	cbnz	r3, 8011556 <_raise_r+0x32>
 8011542:	4620      	mov	r0, r4
 8011544:	f000 f830 	bl	80115a8 <_getpid_r>
 8011548:	462a      	mov	r2, r5
 801154a:	4601      	mov	r1, r0
 801154c:	4620      	mov	r0, r4
 801154e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011552:	f000 b817 	b.w	8011584 <_kill_r>
 8011556:	2b01      	cmp	r3, #1
 8011558:	d00a      	beq.n	8011570 <_raise_r+0x4c>
 801155a:	1c59      	adds	r1, r3, #1
 801155c:	d103      	bne.n	8011566 <_raise_r+0x42>
 801155e:	2316      	movs	r3, #22
 8011560:	6003      	str	r3, [r0, #0]
 8011562:	2001      	movs	r0, #1
 8011564:	e7e7      	b.n	8011536 <_raise_r+0x12>
 8011566:	2400      	movs	r4, #0
 8011568:	4628      	mov	r0, r5
 801156a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801156e:	4798      	blx	r3
 8011570:	2000      	movs	r0, #0
 8011572:	e7e0      	b.n	8011536 <_raise_r+0x12>

08011574 <raise>:
 8011574:	4b02      	ldr	r3, [pc, #8]	; (8011580 <raise+0xc>)
 8011576:	4601      	mov	r1, r0
 8011578:	6818      	ldr	r0, [r3, #0]
 801157a:	f7ff bfd3 	b.w	8011524 <_raise_r>
 801157e:	bf00      	nop
 8011580:	2000019c 	.word	0x2000019c

08011584 <_kill_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	2300      	movs	r3, #0
 8011588:	4d06      	ldr	r5, [pc, #24]	; (80115a4 <_kill_r+0x20>)
 801158a:	4604      	mov	r4, r0
 801158c:	4608      	mov	r0, r1
 801158e:	4611      	mov	r1, r2
 8011590:	602b      	str	r3, [r5, #0]
 8011592:	f7f6 fc5d 	bl	8007e50 <_kill>
 8011596:	1c43      	adds	r3, r0, #1
 8011598:	d102      	bne.n	80115a0 <_kill_r+0x1c>
 801159a:	682b      	ldr	r3, [r5, #0]
 801159c:	b103      	cbz	r3, 80115a0 <_kill_r+0x1c>
 801159e:	6023      	str	r3, [r4, #0]
 80115a0:	bd38      	pop	{r3, r4, r5, pc}
 80115a2:	bf00      	nop
 80115a4:	20001c10 	.word	0x20001c10

080115a8 <_getpid_r>:
 80115a8:	f7f6 bc50 	b.w	8007e4c <_getpid>

080115ac <__sread>:
 80115ac:	b510      	push	{r4, lr}
 80115ae:	460c      	mov	r4, r1
 80115b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b4:	f000 f894 	bl	80116e0 <_read_r>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	bfab      	itete	ge
 80115bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115be:	89a3      	ldrhlt	r3, [r4, #12]
 80115c0:	181b      	addge	r3, r3, r0
 80115c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115c6:	bfac      	ite	ge
 80115c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80115ca:	81a3      	strhlt	r3, [r4, #12]
 80115cc:	bd10      	pop	{r4, pc}

080115ce <__swrite>:
 80115ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d2:	461f      	mov	r7, r3
 80115d4:	898b      	ldrh	r3, [r1, #12]
 80115d6:	4605      	mov	r5, r0
 80115d8:	05db      	lsls	r3, r3, #23
 80115da:	460c      	mov	r4, r1
 80115dc:	4616      	mov	r6, r2
 80115de:	d505      	bpl.n	80115ec <__swrite+0x1e>
 80115e0:	2302      	movs	r3, #2
 80115e2:	2200      	movs	r2, #0
 80115e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e8:	f000 f868 	bl	80116bc <_lseek_r>
 80115ec:	89a3      	ldrh	r3, [r4, #12]
 80115ee:	4632      	mov	r2, r6
 80115f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115f4:	81a3      	strh	r3, [r4, #12]
 80115f6:	4628      	mov	r0, r5
 80115f8:	463b      	mov	r3, r7
 80115fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011602:	f000 b817 	b.w	8011634 <_write_r>

08011606 <__sseek>:
 8011606:	b510      	push	{r4, lr}
 8011608:	460c      	mov	r4, r1
 801160a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801160e:	f000 f855 	bl	80116bc <_lseek_r>
 8011612:	1c43      	adds	r3, r0, #1
 8011614:	89a3      	ldrh	r3, [r4, #12]
 8011616:	bf15      	itete	ne
 8011618:	6560      	strne	r0, [r4, #84]	; 0x54
 801161a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801161e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011622:	81a3      	strheq	r3, [r4, #12]
 8011624:	bf18      	it	ne
 8011626:	81a3      	strhne	r3, [r4, #12]
 8011628:	bd10      	pop	{r4, pc}

0801162a <__sclose>:
 801162a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801162e:	f000 b813 	b.w	8011658 <_close_r>
	...

08011634 <_write_r>:
 8011634:	b538      	push	{r3, r4, r5, lr}
 8011636:	4604      	mov	r4, r0
 8011638:	4608      	mov	r0, r1
 801163a:	4611      	mov	r1, r2
 801163c:	2200      	movs	r2, #0
 801163e:	4d05      	ldr	r5, [pc, #20]	; (8011654 <_write_r+0x20>)
 8011640:	602a      	str	r2, [r5, #0]
 8011642:	461a      	mov	r2, r3
 8011644:	f7f6 fc22 	bl	8007e8c <_write>
 8011648:	1c43      	adds	r3, r0, #1
 801164a:	d102      	bne.n	8011652 <_write_r+0x1e>
 801164c:	682b      	ldr	r3, [r5, #0]
 801164e:	b103      	cbz	r3, 8011652 <_write_r+0x1e>
 8011650:	6023      	str	r3, [r4, #0]
 8011652:	bd38      	pop	{r3, r4, r5, pc}
 8011654:	20001c10 	.word	0x20001c10

08011658 <_close_r>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	2300      	movs	r3, #0
 801165c:	4d05      	ldr	r5, [pc, #20]	; (8011674 <_close_r+0x1c>)
 801165e:	4604      	mov	r4, r0
 8011660:	4608      	mov	r0, r1
 8011662:	602b      	str	r3, [r5, #0]
 8011664:	f7f6 fc20 	bl	8007ea8 <_close>
 8011668:	1c43      	adds	r3, r0, #1
 801166a:	d102      	bne.n	8011672 <_close_r+0x1a>
 801166c:	682b      	ldr	r3, [r5, #0]
 801166e:	b103      	cbz	r3, 8011672 <_close_r+0x1a>
 8011670:	6023      	str	r3, [r4, #0]
 8011672:	bd38      	pop	{r3, r4, r5, pc}
 8011674:	20001c10 	.word	0x20001c10

08011678 <_fstat_r>:
 8011678:	b538      	push	{r3, r4, r5, lr}
 801167a:	2300      	movs	r3, #0
 801167c:	4d06      	ldr	r5, [pc, #24]	; (8011698 <_fstat_r+0x20>)
 801167e:	4604      	mov	r4, r0
 8011680:	4608      	mov	r0, r1
 8011682:	4611      	mov	r1, r2
 8011684:	602b      	str	r3, [r5, #0]
 8011686:	f7f6 fc13 	bl	8007eb0 <_fstat>
 801168a:	1c43      	adds	r3, r0, #1
 801168c:	d102      	bne.n	8011694 <_fstat_r+0x1c>
 801168e:	682b      	ldr	r3, [r5, #0]
 8011690:	b103      	cbz	r3, 8011694 <_fstat_r+0x1c>
 8011692:	6023      	str	r3, [r4, #0]
 8011694:	bd38      	pop	{r3, r4, r5, pc}
 8011696:	bf00      	nop
 8011698:	20001c10 	.word	0x20001c10

0801169c <_isatty_r>:
 801169c:	b538      	push	{r3, r4, r5, lr}
 801169e:	2300      	movs	r3, #0
 80116a0:	4d05      	ldr	r5, [pc, #20]	; (80116b8 <_isatty_r+0x1c>)
 80116a2:	4604      	mov	r4, r0
 80116a4:	4608      	mov	r0, r1
 80116a6:	602b      	str	r3, [r5, #0]
 80116a8:	f7f6 fc08 	bl	8007ebc <_isatty>
 80116ac:	1c43      	adds	r3, r0, #1
 80116ae:	d102      	bne.n	80116b6 <_isatty_r+0x1a>
 80116b0:	682b      	ldr	r3, [r5, #0]
 80116b2:	b103      	cbz	r3, 80116b6 <_isatty_r+0x1a>
 80116b4:	6023      	str	r3, [r4, #0]
 80116b6:	bd38      	pop	{r3, r4, r5, pc}
 80116b8:	20001c10 	.word	0x20001c10

080116bc <_lseek_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4604      	mov	r4, r0
 80116c0:	4608      	mov	r0, r1
 80116c2:	4611      	mov	r1, r2
 80116c4:	2200      	movs	r2, #0
 80116c6:	4d05      	ldr	r5, [pc, #20]	; (80116dc <_lseek_r+0x20>)
 80116c8:	602a      	str	r2, [r5, #0]
 80116ca:	461a      	mov	r2, r3
 80116cc:	f7f6 fbf8 	bl	8007ec0 <_lseek>
 80116d0:	1c43      	adds	r3, r0, #1
 80116d2:	d102      	bne.n	80116da <_lseek_r+0x1e>
 80116d4:	682b      	ldr	r3, [r5, #0]
 80116d6:	b103      	cbz	r3, 80116da <_lseek_r+0x1e>
 80116d8:	6023      	str	r3, [r4, #0]
 80116da:	bd38      	pop	{r3, r4, r5, pc}
 80116dc:	20001c10 	.word	0x20001c10

080116e0 <_read_r>:
 80116e0:	b538      	push	{r3, r4, r5, lr}
 80116e2:	4604      	mov	r4, r0
 80116e4:	4608      	mov	r0, r1
 80116e6:	4611      	mov	r1, r2
 80116e8:	2200      	movs	r2, #0
 80116ea:	4d05      	ldr	r5, [pc, #20]	; (8011700 <_read_r+0x20>)
 80116ec:	602a      	str	r2, [r5, #0]
 80116ee:	461a      	mov	r2, r3
 80116f0:	f7f6 fbbe 	bl	8007e70 <_read>
 80116f4:	1c43      	adds	r3, r0, #1
 80116f6:	d102      	bne.n	80116fe <_read_r+0x1e>
 80116f8:	682b      	ldr	r3, [r5, #0]
 80116fa:	b103      	cbz	r3, 80116fe <_read_r+0x1e>
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	bd38      	pop	{r3, r4, r5, pc}
 8011700:	20001c10 	.word	0x20001c10

08011704 <_init>:
 8011704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011706:	bf00      	nop
 8011708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801170a:	bc08      	pop	{r3}
 801170c:	469e      	mov	lr, r3
 801170e:	4770      	bx	lr

08011710 <_fini>:
 8011710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011712:	bf00      	nop
 8011714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011716:	bc08      	pop	{r3}
 8011718:	469e      	mov	lr, r3
 801171a:	4770      	bx	lr
