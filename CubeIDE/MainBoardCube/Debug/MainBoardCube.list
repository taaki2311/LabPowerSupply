
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001135c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  080114a0  080114a0  000214a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011cd4  08011cd4  00030374  2**0
                  CONTENTS
  4 .ARM          00000008  08011cd4  08011cd4  00021cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cdc  08011cdc  00030374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cdc  08011cdc  00021cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ce0  08011ce0  00021ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  08011ce4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000189c  20000374  08012058  00030374  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20001c10  08012058  00031c10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c58c  00000000  00000000  0003039d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005297  00000000  00000000  0005c929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00020053  00000000  00000000  00061bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00081c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006b28  00000000  00000000  00082f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a151  00000000  00000000  00089ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fa47  00000000  00000000  000a3c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090ac5  00000000  00000000  000d3648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016410d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056d0  00000000  00000000  00164160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000374 	.word	0x20000374
 800015c:	00000000 	.word	0x00000000
 8000160:	08011484 	.word	0x08011484

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000378 	.word	0x20000378
 800017c:	08011484 	.word	0x08011484

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_f2uiz>:
 800118c:	0042      	lsls	r2, r0, #1
 800118e:	d20e      	bcs.n	80011ae <__aeabi_f2uiz+0x22>
 8001190:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001194:	d30b      	bcc.n	80011ae <__aeabi_f2uiz+0x22>
 8001196:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119e:	d409      	bmi.n	80011b4 <__aeabi_f2uiz+0x28>
 80011a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	f04f 0000 	mov.w	r0, #0
 80011b2:	4770      	bx	lr
 80011b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b8:	d101      	bne.n	80011be <__aeabi_f2uiz+0x32>
 80011ba:	0242      	lsls	r2, r0, #9
 80011bc:	d102      	bne.n	80011c4 <__aeabi_f2uiz+0x38>
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	4770      	bx	lr
 80011c4:	f04f 0000 	mov.w	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__aeabi_uldivmod>:
 80011cc:	b953      	cbnz	r3, 80011e4 <__aeabi_uldivmod+0x18>
 80011ce:	b94a      	cbnz	r2, 80011e4 <__aeabi_uldivmod+0x18>
 80011d0:	2900      	cmp	r1, #0
 80011d2:	bf08      	it	eq
 80011d4:	2800      	cmpeq	r0, #0
 80011d6:	bf1c      	itt	ne
 80011d8:	f04f 31ff 	movne.w	r1, #4294967295
 80011dc:	f04f 30ff 	movne.w	r0, #4294967295
 80011e0:	f000 b9ae 	b.w	8001540 <__aeabi_idiv0>
 80011e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ec:	f000 f83e 	bl	800126c <__udivmoddi4>
 80011f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <__aeabi_d2lz>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4605      	mov	r5, r0
 8001200:	460c      	mov	r4, r1
 8001202:	2200      	movs	r2, #0
 8001204:	2300      	movs	r3, #0
 8001206:	4628      	mov	r0, r5
 8001208:	4621      	mov	r1, r4
 800120a:	f7ff fbef 	bl	80009ec <__aeabi_dcmplt>
 800120e:	b928      	cbnz	r0, 800121c <__aeabi_d2lz+0x20>
 8001210:	4628      	mov	r0, r5
 8001212:	4621      	mov	r1, r4
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b80a 	b.w	8001230 <__aeabi_d2ulz>
 800121c:	4628      	mov	r0, r5
 800121e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001222:	f000 f805 	bl	8001230 <__aeabi_d2ulz>
 8001226:	4240      	negs	r0, r0
 8001228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800122c:	bd38      	pop	{r3, r4, r5, pc}
 800122e:	bf00      	nop

08001230 <__aeabi_d2ulz>:
 8001230:	b5d0      	push	{r4, r6, r7, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__aeabi_d2ulz+0x34>)
 8001236:	4606      	mov	r6, r0
 8001238:	460f      	mov	r7, r1
 800123a:	f7ff f965 	bl	8000508 <__aeabi_dmul>
 800123e:	f7ff fc3b 	bl	8000ab8 <__aeabi_d2uiz>
 8001242:	4604      	mov	r4, r0
 8001244:	f7ff f8e6 	bl	8000414 <__aeabi_ui2d>
 8001248:	2200      	movs	r2, #0
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <__aeabi_d2ulz+0x38>)
 800124c:	f7ff f95c 	bl	8000508 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4630      	mov	r0, r6
 8001256:	4639      	mov	r1, r7
 8001258:	f7fe ff9e 	bl	8000198 <__aeabi_dsub>
 800125c:	f7ff fc2c 	bl	8000ab8 <__aeabi_d2uiz>
 8001260:	4621      	mov	r1, r4
 8001262:	bdd0      	pop	{r4, r6, r7, pc}
 8001264:	3df00000 	.word	0x3df00000
 8001268:	41f00000 	.word	0x41f00000

0800126c <__udivmoddi4>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	9e08      	ldr	r6, [sp, #32]
 8001272:	460d      	mov	r5, r1
 8001274:	4604      	mov	r4, r0
 8001276:	4688      	mov	r8, r1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d14d      	bne.n	8001318 <__udivmoddi4+0xac>
 800127c:	428a      	cmp	r2, r1
 800127e:	4694      	mov	ip, r2
 8001280:	d968      	bls.n	8001354 <__udivmoddi4+0xe8>
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b152      	cbz	r2, 800129e <__udivmoddi4+0x32>
 8001288:	fa01 f302 	lsl.w	r3, r1, r2
 800128c:	f1c2 0120 	rsb	r1, r2, #32
 8001290:	fa20 f101 	lsr.w	r1, r0, r1
 8001294:	fa0c fc02 	lsl.w	ip, ip, r2
 8001298:	ea41 0803 	orr.w	r8, r1, r3
 800129c:	4094      	lsls	r4, r2
 800129e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80012a2:	fbb8 f7f1 	udiv	r7, r8, r1
 80012a6:	fa1f fe8c 	uxth.w	lr, ip
 80012aa:	fb01 8817 	mls	r8, r1, r7, r8
 80012ae:	fb07 f00e 	mul.w	r0, r7, lr
 80012b2:	0c23      	lsrs	r3, r4, #16
 80012b4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x66>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f107 35ff 	add.w	r5, r7, #4294967295
 80012c4:	f080 811e 	bcs.w	8001504 <__udivmoddi4+0x298>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	f240 811b 	bls.w	8001504 <__udivmoddi4+0x298>
 80012ce:	3f02      	subs	r7, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1b      	subs	r3, r3, r0
 80012d4:	fbb3 f0f1 	udiv	r0, r3, r1
 80012d8:	fb01 3310 	mls	r3, r1, r0, r3
 80012dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d90a      	bls.n	8001300 <__udivmoddi4+0x94>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f2:	f080 8109 	bcs.w	8001508 <__udivmoddi4+0x29c>
 80012f6:	45a6      	cmp	lr, r4
 80012f8:	f240 8106 	bls.w	8001508 <__udivmoddi4+0x29c>
 80012fc:	4464      	add	r4, ip
 80012fe:	3802      	subs	r0, #2
 8001300:	2100      	movs	r1, #0
 8001302:	eba4 040e 	sub.w	r4, r4, lr
 8001306:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800130a:	b11e      	cbz	r6, 8001314 <__udivmoddi4+0xa8>
 800130c:	2300      	movs	r3, #0
 800130e:	40d4      	lsrs	r4, r2
 8001310:	e9c6 4300 	strd	r4, r3, [r6]
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	428b      	cmp	r3, r1
 800131a:	d908      	bls.n	800132e <__udivmoddi4+0xc2>
 800131c:	2e00      	cmp	r6, #0
 800131e:	f000 80ee 	beq.w	80014fe <__udivmoddi4+0x292>
 8001322:	2100      	movs	r1, #0
 8001324:	e9c6 0500 	strd	r0, r5, [r6]
 8001328:	4608      	mov	r0, r1
 800132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800132e:	fab3 f183 	clz	r1, r3
 8001332:	2900      	cmp	r1, #0
 8001334:	d14a      	bne.n	80013cc <__udivmoddi4+0x160>
 8001336:	42ab      	cmp	r3, r5
 8001338:	d302      	bcc.n	8001340 <__udivmoddi4+0xd4>
 800133a:	4282      	cmp	r2, r0
 800133c:	f200 80fc 	bhi.w	8001538 <__udivmoddi4+0x2cc>
 8001340:	1a84      	subs	r4, r0, r2
 8001342:	eb65 0303 	sbc.w	r3, r5, r3
 8001346:	2001      	movs	r0, #1
 8001348:	4698      	mov	r8, r3
 800134a:	2e00      	cmp	r6, #0
 800134c:	d0e2      	beq.n	8001314 <__udivmoddi4+0xa8>
 800134e:	e9c6 4800 	strd	r4, r8, [r6]
 8001352:	e7df      	b.n	8001314 <__udivmoddi4+0xa8>
 8001354:	b902      	cbnz	r2, 8001358 <__udivmoddi4+0xec>
 8001356:	deff      	udf	#255	; 0xff
 8001358:	fab2 f282 	clz	r2, r2
 800135c:	2a00      	cmp	r2, #0
 800135e:	f040 8091 	bne.w	8001484 <__udivmoddi4+0x218>
 8001362:	eba1 000c 	sub.w	r0, r1, ip
 8001366:	2101      	movs	r1, #1
 8001368:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136c:	fa1f fe8c 	uxth.w	lr, ip
 8001370:	fbb0 f3f7 	udiv	r3, r0, r7
 8001374:	fb07 0013 	mls	r0, r7, r3, r0
 8001378:	0c25      	lsrs	r5, r4, #16
 800137a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800137e:	fb0e f003 	mul.w	r0, lr, r3
 8001382:	42a8      	cmp	r0, r5
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x12c>
 8001386:	eb1c 0505 	adds.w	r5, ip, r5
 800138a:	f103 38ff 	add.w	r8, r3, #4294967295
 800138e:	d202      	bcs.n	8001396 <__udivmoddi4+0x12a>
 8001390:	42a8      	cmp	r0, r5
 8001392:	f200 80ce 	bhi.w	8001532 <__udivmoddi4+0x2c6>
 8001396:	4643      	mov	r3, r8
 8001398:	1a2d      	subs	r5, r5, r0
 800139a:	fbb5 f0f7 	udiv	r0, r5, r7
 800139e:	fb07 5510 	mls	r5, r7, r0, r5
 80013a2:	fb0e fe00 	mul.w	lr, lr, r0
 80013a6:	b2a4      	uxth	r4, r4
 80013a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013ac:	45a6      	cmp	lr, r4
 80013ae:	d908      	bls.n	80013c2 <__udivmoddi4+0x156>
 80013b0:	eb1c 0404 	adds.w	r4, ip, r4
 80013b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013b8:	d202      	bcs.n	80013c0 <__udivmoddi4+0x154>
 80013ba:	45a6      	cmp	lr, r4
 80013bc:	f200 80b6 	bhi.w	800152c <__udivmoddi4+0x2c0>
 80013c0:	4628      	mov	r0, r5
 80013c2:	eba4 040e 	sub.w	r4, r4, lr
 80013c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013ca:	e79e      	b.n	800130a <__udivmoddi4+0x9e>
 80013cc:	f1c1 0720 	rsb	r7, r1, #32
 80013d0:	408b      	lsls	r3, r1
 80013d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013da:	fa25 fa07 	lsr.w	sl, r5, r7
 80013de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013e2:	fbba f8f9 	udiv	r8, sl, r9
 80013e6:	fa20 f307 	lsr.w	r3, r0, r7
 80013ea:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ee:	408d      	lsls	r5, r1
 80013f0:	fa1f fe8c 	uxth.w	lr, ip
 80013f4:	431d      	orrs	r5, r3
 80013f6:	fa00 f301 	lsl.w	r3, r0, r1
 80013fa:	fb08 f00e 	mul.w	r0, r8, lr
 80013fe:	0c2c      	lsrs	r4, r5, #16
 8001400:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001404:	42a0      	cmp	r0, r4
 8001406:	fa02 f201 	lsl.w	r2, r2, r1
 800140a:	d90b      	bls.n	8001424 <__udivmoddi4+0x1b8>
 800140c:	eb1c 0404 	adds.w	r4, ip, r4
 8001410:	f108 3aff 	add.w	sl, r8, #4294967295
 8001414:	f080 8088 	bcs.w	8001528 <__udivmoddi4+0x2bc>
 8001418:	42a0      	cmp	r0, r4
 800141a:	f240 8085 	bls.w	8001528 <__udivmoddi4+0x2bc>
 800141e:	f1a8 0802 	sub.w	r8, r8, #2
 8001422:	4464      	add	r4, ip
 8001424:	1a24      	subs	r4, r4, r0
 8001426:	fbb4 f0f9 	udiv	r0, r4, r9
 800142a:	fb09 4410 	mls	r4, r9, r0, r4
 800142e:	fb00 fe0e 	mul.w	lr, r0, lr
 8001432:	b2ad      	uxth	r5, r5
 8001434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001438:	45a6      	cmp	lr, r4
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x1e2>
 800143c:	eb1c 0404 	adds.w	r4, ip, r4
 8001440:	f100 35ff 	add.w	r5, r0, #4294967295
 8001444:	d26c      	bcs.n	8001520 <__udivmoddi4+0x2b4>
 8001446:	45a6      	cmp	lr, r4
 8001448:	d96a      	bls.n	8001520 <__udivmoddi4+0x2b4>
 800144a:	3802      	subs	r0, #2
 800144c:	4464      	add	r4, ip
 800144e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001452:	fba0 9502 	umull	r9, r5, r0, r2
 8001456:	eba4 040e 	sub.w	r4, r4, lr
 800145a:	42ac      	cmp	r4, r5
 800145c:	46c8      	mov	r8, r9
 800145e:	46ae      	mov	lr, r5
 8001460:	d356      	bcc.n	8001510 <__udivmoddi4+0x2a4>
 8001462:	d053      	beq.n	800150c <__udivmoddi4+0x2a0>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d069      	beq.n	800153c <__udivmoddi4+0x2d0>
 8001468:	ebb3 0208 	subs.w	r2, r3, r8
 800146c:	eb64 040e 	sbc.w	r4, r4, lr
 8001470:	fa22 f301 	lsr.w	r3, r2, r1
 8001474:	fa04 f707 	lsl.w	r7, r4, r7
 8001478:	431f      	orrs	r7, r3
 800147a:	40cc      	lsrs	r4, r1
 800147c:	e9c6 7400 	strd	r7, r4, [r6]
 8001480:	2100      	movs	r1, #0
 8001482:	e747      	b.n	8001314 <__udivmoddi4+0xa8>
 8001484:	fa0c fc02 	lsl.w	ip, ip, r2
 8001488:	f1c2 0120 	rsb	r1, r2, #32
 800148c:	fa25 f301 	lsr.w	r3, r5, r1
 8001490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001494:	fa20 f101 	lsr.w	r1, r0, r1
 8001498:	4095      	lsls	r5, r2
 800149a:	430d      	orrs	r5, r1
 800149c:	fbb3 f1f7 	udiv	r1, r3, r7
 80014a0:	fb07 3311 	mls	r3, r7, r1, r3
 80014a4:	fa1f fe8c 	uxth.w	lr, ip
 80014a8:	0c28      	lsrs	r0, r5, #16
 80014aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014ae:	fb01 f30e 	mul.w	r3, r1, lr
 80014b2:	4283      	cmp	r3, r0
 80014b4:	fa04 f402 	lsl.w	r4, r4, r2
 80014b8:	d908      	bls.n	80014cc <__udivmoddi4+0x260>
 80014ba:	eb1c 0000 	adds.w	r0, ip, r0
 80014be:	f101 38ff 	add.w	r8, r1, #4294967295
 80014c2:	d22f      	bcs.n	8001524 <__udivmoddi4+0x2b8>
 80014c4:	4283      	cmp	r3, r0
 80014c6:	d92d      	bls.n	8001524 <__udivmoddi4+0x2b8>
 80014c8:	3902      	subs	r1, #2
 80014ca:	4460      	add	r0, ip
 80014cc:	1ac0      	subs	r0, r0, r3
 80014ce:	fbb0 f3f7 	udiv	r3, r0, r7
 80014d2:	fb07 0013 	mls	r0, r7, r3, r0
 80014d6:	b2ad      	uxth	r5, r5
 80014d8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80014dc:	fb03 f00e 	mul.w	r0, r3, lr
 80014e0:	42a8      	cmp	r0, r5
 80014e2:	d908      	bls.n	80014f6 <__udivmoddi4+0x28a>
 80014e4:	eb1c 0505 	adds.w	r5, ip, r5
 80014e8:	f103 38ff 	add.w	r8, r3, #4294967295
 80014ec:	d216      	bcs.n	800151c <__udivmoddi4+0x2b0>
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d914      	bls.n	800151c <__udivmoddi4+0x2b0>
 80014f2:	3b02      	subs	r3, #2
 80014f4:	4465      	add	r5, ip
 80014f6:	1a28      	subs	r0, r5, r0
 80014f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80014fc:	e738      	b.n	8001370 <__udivmoddi4+0x104>
 80014fe:	4631      	mov	r1, r6
 8001500:	4630      	mov	r0, r6
 8001502:	e707      	b.n	8001314 <__udivmoddi4+0xa8>
 8001504:	462f      	mov	r7, r5
 8001506:	e6e4      	b.n	80012d2 <__udivmoddi4+0x66>
 8001508:	4618      	mov	r0, r3
 800150a:	e6f9      	b.n	8001300 <__udivmoddi4+0x94>
 800150c:	454b      	cmp	r3, r9
 800150e:	d2a9      	bcs.n	8001464 <__udivmoddi4+0x1f8>
 8001510:	ebb9 0802 	subs.w	r8, r9, r2
 8001514:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001518:	3801      	subs	r0, #1
 800151a:	e7a3      	b.n	8001464 <__udivmoddi4+0x1f8>
 800151c:	4643      	mov	r3, r8
 800151e:	e7ea      	b.n	80014f6 <__udivmoddi4+0x28a>
 8001520:	4628      	mov	r0, r5
 8001522:	e794      	b.n	800144e <__udivmoddi4+0x1e2>
 8001524:	4641      	mov	r1, r8
 8001526:	e7d1      	b.n	80014cc <__udivmoddi4+0x260>
 8001528:	46d0      	mov	r8, sl
 800152a:	e77b      	b.n	8001424 <__udivmoddi4+0x1b8>
 800152c:	4464      	add	r4, ip
 800152e:	3802      	subs	r0, #2
 8001530:	e747      	b.n	80013c2 <__udivmoddi4+0x156>
 8001532:	3b02      	subs	r3, #2
 8001534:	4465      	add	r5, ip
 8001536:	e72f      	b.n	8001398 <__udivmoddi4+0x12c>
 8001538:	4608      	mov	r0, r1
 800153a:	e706      	b.n	800134a <__udivmoddi4+0xde>
 800153c:	4631      	mov	r1, r6
 800153e:	e6e9      	b.n	8001314 <__udivmoddi4+0xa8>

08001540 <__aeabi_idiv0>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <MX_ADC_Init>:

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001544:	2300      	movs	r3, #0
{
 8001546:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001548:	4c3f      	ldr	r4, [pc, #252]	; (8001648 <MX_ADC_Init+0x104>)
{
 800154a:	b08a      	sub	sp, #40	; 0x28
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001550:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001554:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001558:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800155c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001564:	9304      	str	r3, [sp, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001566:	9300      	str	r3, [sp, #0]
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 6;
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001568:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800156c:	63a3      	str	r3, [r4, #56]	; 0x38
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800156e:	9309      	str	r3, [sp, #36]	; 0x24
  hadc.Instance = ADC1;
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <MX_ADC_Init+0x108>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001572:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001574:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc.Init.NbrOfConversion = 6;
 800157c:	2606      	movs	r6, #6
  hadc.Instance = ADC1;
 800157e:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	2310      	movs	r3, #16
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001582:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001584:	6061      	str	r1, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001586:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001588:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 6;
 800158c:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 800158e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001592:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001594:	f006 fbfc 	bl	8007d90 <HAL_ADC_Init>
 8001598:	b108      	cbz	r0, 800159e <MX_ADC_Init+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <MX_ADC_Init+0x58>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800159e:	2302      	movs	r3, #2
 80015a0:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <MX_ADC_Init+0x10c>)
  AnalogWDGConfig.LowThreshold = 0;
 80015a2:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015a6:	a904      	add	r1, sp, #16
 80015a8:	4620      	mov	r0, r4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80015aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  AnalogWDGConfig.ITMode = ENABLE;
 80015ae:	f88d 5018 	strb.w	r5, [sp, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80015b2:	f006 fef3 	bl	800839c <HAL_ADC_AnalogWDGConfig>
 80015b6:	b108      	cbz	r0, 80015bc <MX_ADC_Init+0x78>
 80015b8:	b672      	cpsid	i
  while (1)
 80015ba:	e7fe      	b.n	80015ba <MX_ADC_Init+0x76>
  sConfig.Channel = ADC_CHANNEL_0;
 80015bc:	2200      	movs	r2, #0
 80015be:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c0:	4669      	mov	r1, sp
 80015c2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 80015c4:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80015c8:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ca:	f006 fe1b 	bl	8008204 <HAL_ADC_ConfigChannel>
 80015ce:	b108      	cbz	r0, 80015d4 <MX_ADC_Init+0x90>
 80015d0:	b672      	cpsid	i
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <MX_ADC_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_1;
 80015d4:	2201      	movs	r2, #1
 80015d6:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015d8:	4669      	mov	r1, sp
 80015da:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80015dc:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e0:	f006 fe10 	bl	8008204 <HAL_ADC_ConfigChannel>
 80015e4:	b108      	cbz	r0, 80015ea <MX_ADC_Init+0xa6>
 80015e6:	b672      	cpsid	i
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MX_ADC_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_2;
 80015ea:	2202      	movs	r2, #2
 80015ec:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ee:	4669      	mov	r1, sp
 80015f0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80015f2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f6:	f006 fe05 	bl	8008204 <HAL_ADC_ConfigChannel>
 80015fa:	b108      	cbz	r0, 8001600 <MX_ADC_Init+0xbc>
 80015fc:	b672      	cpsid	i
  while (1)
 80015fe:	e7fe      	b.n	80015fe <MX_ADC_Init+0xba>
  sConfig.Channel = ADC_CHANNEL_3;
 8001600:	2203      	movs	r2, #3
 8001602:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001604:	4669      	mov	r1, sp
 8001606:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001608:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800160c:	f006 fdfa 	bl	8008204 <HAL_ADC_ConfigChannel>
 8001610:	b108      	cbz	r0, 8001616 <MX_ADC_Init+0xd2>
 8001612:	b672      	cpsid	i
  while (1)
 8001614:	e7fe      	b.n	8001614 <MX_ADC_Init+0xd0>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001616:	2211      	movs	r2, #17
 8001618:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161a:	4669      	mov	r1, sp
 800161c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800161e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001622:	f006 fdef 	bl	8008204 <HAL_ADC_ConfigChannel>
 8001626:	b108      	cbz	r0, 800162c <MX_ADC_Init+0xe8>
 8001628:	b672      	cpsid	i
  while (1)
 800162a:	e7fe      	b.n	800162a <MX_ADC_Init+0xe6>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800162c:	2210      	movs	r2, #16
 800162e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001630:	4669      	mov	r1, sp
 8001632:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001634:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001638:	f006 fde4 	bl	8008204 <HAL_ADC_ConfigChannel>
 800163c:	b108      	cbz	r0, 8001642 <MX_ADC_Init+0xfe>
 800163e:	b672      	cpsid	i
  while (1)
 8001640:	e7fe      	b.n	8001640 <MX_ADC_Init+0xfc>
}
 8001642:	b00a      	add	sp, #40	; 0x28
 8001644:	bd70      	pop	{r4, r5, r6, pc}
 8001646:	bf00      	nop
 8001648:	200003f8 	.word	0x200003f8
 800164c:	40012400 	.word	0x40012400
 8001650:	00800200 	.word	0x00800200

08001654 <update_keypad.part.0>:
	else if(num == '.'){
 8001654:	282e      	cmp	r0, #46	; 0x2e
void update_keypad(char num){
 8001656:	b410      	push	{r4}
	else if(num == '.'){
 8001658:	d00f      	beq.n	800167a <update_keypad.part.0+0x26>
	else if(num >= '0' && num <= '9'){
 800165a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800165e:	2b09      	cmp	r3, #9
 8001660:	d809      	bhi.n	8001676 <update_keypad.part.0+0x22>
		if(kpenum == V1 || kpenum == V2){
 8001662:	4b69      	ldr	r3, [pc, #420]	; (8001808 <update_keypad.part.0+0x1b4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 800166a:	2901      	cmp	r1, #1
 800166c:	d03d      	beq.n	80016ea <update_keypad.part.0+0x96>
		else if(kpenum == A1 || kpenum == A2){
 800166e:	2b02      	cmp	r3, #2
 8001670:	d017      	beq.n	80016a2 <update_keypad.part.0+0x4e>
 8001672:	2b04      	cmp	r3, #4
 8001674:	d015      	beq.n	80016a2 <update_keypad.part.0+0x4e>
}
 8001676:	bc10      	pop	{r4}
 8001678:	4770      	bx	lr
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800167a:	4a64      	ldr	r2, [pc, #400]	; (800180c <update_keypad.part.0+0x1b8>)
 800167c:	f992 3000 	ldrsb.w	r3, [r2]
 8001680:	2b01      	cmp	r3, #1
 8001682:	ddf8      	ble.n	8001676 <update_keypad.part.0+0x22>
 8001684:	4962      	ldr	r1, [pc, #392]	; (8001810 <update_keypad.part.0+0x1bc>)
 8001686:	780c      	ldrb	r4, [r1, #0]
 8001688:	2c00      	cmp	r4, #0
 800168a:	d1f4      	bne.n	8001676 <update_keypad.part.0+0x22>
			keypaditerator--;
 800168c:	3b01      	subs	r3, #1
 800168e:	7013      	strb	r3, [r2, #0]
			keypaddecimal = 1;
 8001690:	2301      	movs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8001692:	4c60      	ldr	r4, [pc, #384]	; (8001814 <update_keypad.part.0+0x1c0>)
			keypaddecimal = 1;
 8001694:	700b      	strb	r3, [r1, #0]
				keypadarr[i-1] = keypadarr[i];
 8001696:	f8d4 2001 	ldr.w	r2, [r4, #1]
			keypadarr[keypadlength-1] = num;
 800169a:	7120      	strb	r0, [r4, #4]
				keypadarr[i-1] = keypadarr[i];
 800169c:	6022      	str	r2, [r4, #0]
}
 800169e:	bc10      	pop	{r4}
 80016a0:	4770      	bx	lr
			if(keypaditerator > 3){
 80016a2:	4a5a      	ldr	r2, [pc, #360]	; (800180c <update_keypad.part.0+0x1b8>)
 80016a4:	f992 3000 	ldrsb.w	r3, [r2]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	dc15      	bgt.n	80016d8 <update_keypad.part.0+0x84>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 80016ac:	d068      	beq.n	8001780 <update_keypad.part.0+0x12c>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d076      	beq.n	80017a0 <update_keypad.part.0+0x14c>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d07f      	beq.n	80017b6 <update_keypad.part.0+0x162>
			else if(keypaditerator == 0 && keypadarr[2] == '.'){
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1dd      	bne.n	8001676 <update_keypad.part.0+0x22>
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <update_keypad.part.0+0x1c0>)
 80016bc:	7899      	ldrb	r1, [r3, #2]
 80016be:	292e      	cmp	r1, #46	; 0x2e
 80016c0:	d1d9      	bne.n	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016c2:	785c      	ldrb	r4, [r3, #1]
 80016c4:	7059      	strb	r1, [r3, #1]
 80016c6:	78d9      	ldrb	r1, [r3, #3]
 80016c8:	701c      	strb	r4, [r3, #0]
 80016ca:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80016cc:	21ff      	movs	r1, #255	; 0xff
					keypadarr[i-1] = keypadarr[i];
 80016ce:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 80016d0:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 80016d2:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 80016d4:	70dc      	strb	r4, [r3, #3]
}
 80016d6:	e7ce      	b.n	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80016d8:	494e      	ldr	r1, [pc, #312]	; (8001814 <update_keypad.part.0+0x1c0>)
				keypaditerator--;
 80016da:	3b01      	subs	r3, #1
					keypadarr[i-1] = keypadarr[i];
 80016dc:	f8d1 4001 	ldr.w	r4, [r1, #1]
				keypaditerator--;
 80016e0:	7013      	strb	r3, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80016e2:	600c      	str	r4, [r1, #0]
				keypadarr[keypadlength-1] = num;
 80016e4:	7108      	strb	r0, [r1, #4]
}
 80016e6:	bc10      	pop	{r4}
 80016e8:	4770      	bx	lr
			if(keypaditerator > 2){
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <update_keypad.part.0+0x1b8>)
 80016ec:	f992 3000 	ldrsb.w	r3, [r2]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	dcf1      	bgt.n	80016d8 <update_keypad.part.0+0x84>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80016f4:	d023      	beq.n	800173e <update_keypad.part.0+0xea>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d010      	beq.n	800171c <update_keypad.part.0+0xc8>
			else if(keypaditerator == 0 && keypadarr[3] == '.'){
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1bb      	bne.n	8001676 <update_keypad.part.0+0x22>
 80016fe:	4b45      	ldr	r3, [pc, #276]	; (8001814 <update_keypad.part.0+0x1c0>)
 8001700:	78d9      	ldrb	r1, [r3, #3]
 8001702:	292e      	cmp	r1, #46	; 0x2e
 8001704:	d1b7      	bne.n	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 8001706:	785c      	ldrb	r4, [r3, #1]
 8001708:	701c      	strb	r4, [r3, #0]
 800170a:	789c      	ldrb	r4, [r3, #2]
 800170c:	7099      	strb	r1, [r3, #2]
 800170e:	7919      	ldrb	r1, [r3, #4]
 8001710:	705c      	strb	r4, [r3, #1]
 8001712:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 8001714:	21ff      	movs	r1, #255	; 0xff
				keypadarr[keypadlength-1] = num;
 8001716:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 8001718:	7011      	strb	r1, [r2, #0]
 800171a:	e7ac      	b.n	8001676 <update_keypad.part.0+0x22>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <update_keypad.part.0+0x1c0>)
 800171e:	78d9      	ldrb	r1, [r3, #3]
 8001720:	292e      	cmp	r1, #46	; 0x2e
 8001722:	d05a      	beq.n	80017da <update_keypad.part.0+0x186>
			else if(keypaditerator == 1 && keypadarr[4] == '.'){
 8001724:	791c      	ldrb	r4, [r3, #4]
 8001726:	2c2e      	cmp	r4, #46	; 0x2e
 8001728:	d1a5      	bne.n	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 800172a:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 800172c:	2400      	movs	r4, #0
				keypadarr[keypadlength-1] = num;
 800172e:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001730:	7858      	ldrb	r0, [r3, #1]
				keypaditerator--;
 8001732:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001734:	7018      	strb	r0, [r3, #0]
 8001736:	7898      	ldrb	r0, [r3, #2]
 8001738:	7099      	strb	r1, [r3, #2]
 800173a:	7058      	strb	r0, [r3, #1]
				keypaditerator--;
 800173c:	e79b      	b.n	8001676 <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <update_keypad.part.0+0x1c0>)
 8001740:	78dc      	ldrb	r4, [r3, #3]
 8001742:	2c2e      	cmp	r4, #46	; 0x2e
 8001744:	d00e      	beq.n	8001764 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 8001746:	f893 c004 	ldrb.w	ip, [r3, #4]
 800174a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 800174e:	d192      	bne.n	8001676 <update_keypad.part.0+0x22>
				keypaditerator--;
 8001750:	7011      	strb	r1, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001752:	7859      	ldrb	r1, [r3, #1]
 8001754:	789a      	ldrb	r2, [r3, #2]
 8001756:	f883 c003 	strb.w	ip, [r3, #3]
				keypadarr[keypadlength-1] = num;
 800175a:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 800175c:	7019      	strb	r1, [r3, #0]
 800175e:	705a      	strb	r2, [r3, #1]
 8001760:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 8001762:	e788      	b.n	8001676 <update_keypad.part.0+0x22>
				keypaditerator--;
 8001764:	2401      	movs	r4, #1
					keypadarr[i-1] = keypadarr[i];
 8001766:	212e      	movs	r1, #46	; 0x2e
 8001768:	f893 c001 	ldrb.w	ip, [r3, #1]
				keypaditerator--;
 800176c:	7014      	strb	r4, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 800176e:	789c      	ldrb	r4, [r3, #2]
 8001770:	791a      	ldrb	r2, [r3, #4]
 8001772:	f883 c000 	strb.w	ip, [r3]
 8001776:	705c      	strb	r4, [r3, #1]
 8001778:	7099      	strb	r1, [r3, #2]
 800177a:	70da      	strb	r2, [r3, #3]
				keypadarr[keypadlength-1] = num;
 800177c:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 800177e:	e77a      	b.n	8001676 <update_keypad.part.0+0x22>
			else if(keypaditerator == 3 && keypadarr[4] == '.'){
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <update_keypad.part.0+0x1c0>)
 8001782:	7919      	ldrb	r1, [r3, #4]
 8001784:	292e      	cmp	r1, #46	; 0x2e
 8001786:	f47f af76 	bne.w	8001676 <update_keypad.part.0+0x22>
				keypadarr[keypadlength-1] = num;
 800178a:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 800178c:	2002      	movs	r0, #2
					keypadarr[i-1] = keypadarr[i];
 800178e:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 8001790:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 8001792:	701c      	strb	r4, [r3, #0]
 8001794:	789c      	ldrb	r4, [r3, #2]
 8001796:	705c      	strb	r4, [r3, #1]
 8001798:	78dc      	ldrb	r4, [r3, #3]
 800179a:	70d9      	strb	r1, [r3, #3]
 800179c:	709c      	strb	r4, [r3, #2]
				keypaditerator--;
 800179e:	e76a      	b.n	8001676 <update_keypad.part.0+0x22>
			else if(keypaditerator == 2 && keypadarr[3] == '.'){
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <update_keypad.part.0+0x1c0>)
 80017a2:	78d9      	ldrb	r1, [r3, #3]
 80017a4:	292e      	cmp	r1, #46	; 0x2e
 80017a6:	d0dd      	beq.n	8001764 <update_keypad.part.0+0x110>
			else if(keypaditerator == 2 && keypadarr[4] == '.'){
 80017a8:	791c      	ldrb	r4, [r3, #4]
 80017aa:	2c2e      	cmp	r4, #46	; 0x2e
 80017ac:	f47f af63 	bne.w	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017b0:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 80017b2:	2401      	movs	r4, #1
 80017b4:	e7bb      	b.n	800172e <update_keypad.part.0+0xda>
			else if(keypaditerator == 1 && keypadarr[2] == '.'){
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <update_keypad.part.0+0x1c0>)
 80017b8:	7899      	ldrb	r1, [r3, #2]
 80017ba:	292e      	cmp	r1, #46	; 0x2e
 80017bc:	d018      	beq.n	80017f0 <update_keypad.part.0+0x19c>
			else if(keypaditerator == 1 && keypadarr[3] == '.'){
 80017be:	78dc      	ldrb	r4, [r3, #3]
 80017c0:	2c2e      	cmp	r4, #46	; 0x2e
 80017c2:	f47f af58 	bne.w	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017c6:	709c      	strb	r4, [r3, #2]
 80017c8:	791c      	ldrb	r4, [r3, #4]
				keypadarr[keypadlength-1] = num;
 80017ca:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017cc:	2000      	movs	r0, #0
					keypadarr[i-1] = keypadarr[i];
 80017ce:	70dc      	strb	r4, [r3, #3]
 80017d0:	785c      	ldrb	r4, [r3, #1]
				keypaditerator--;
 80017d2:	7010      	strb	r0, [r2, #0]
					keypadarr[i-1] = keypadarr[i];
 80017d4:	7059      	strb	r1, [r3, #1]
 80017d6:	701c      	strb	r4, [r3, #0]
				keypaditerator--;
 80017d8:	e74d      	b.n	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017da:	785c      	ldrb	r4, [r3, #1]
 80017dc:	701c      	strb	r4, [r3, #0]
 80017de:	789c      	ldrb	r4, [r3, #2]
 80017e0:	7099      	strb	r1, [r3, #2]
 80017e2:	7919      	ldrb	r1, [r3, #4]
 80017e4:	705c      	strb	r4, [r3, #1]
 80017e6:	70d9      	strb	r1, [r3, #3]
				keypaditerator--;
 80017e8:	2100      	movs	r1, #0
				keypadarr[keypadlength-1] = num;
 80017ea:	7118      	strb	r0, [r3, #4]
				keypaditerator--;
 80017ec:	7011      	strb	r1, [r2, #0]
 80017ee:	e742      	b.n	8001676 <update_keypad.part.0+0x22>
					keypadarr[i-1] = keypadarr[i];
 80017f0:	785c      	ldrb	r4, [r3, #1]
 80017f2:	7059      	strb	r1, [r3, #1]
 80017f4:	78d9      	ldrb	r1, [r3, #3]
 80017f6:	701c      	strb	r4, [r3, #0]
 80017f8:	7099      	strb	r1, [r3, #2]
				keypaditerator--;
 80017fa:	2100      	movs	r1, #0
					keypadarr[i-1] = keypadarr[i];
 80017fc:	791c      	ldrb	r4, [r3, #4]
				keypaditerator--;
 80017fe:	7011      	strb	r1, [r2, #0]
				keypadarr[keypadlength-1] = num;
 8001800:	7118      	strb	r0, [r3, #4]
					keypadarr[i-1] = keypadarr[i];
 8001802:	70dc      	strb	r4, [r3, #3]
				keypaditerator--;
 8001804:	e737      	b.n	8001676 <update_keypad.part.0+0x22>
 8001806:	bf00      	nop
 8001808:	2000074d 	.word	0x2000074d
 800180c:	20000015 	.word	0x20000015
 8001810:	2000074c 	.word	0x2000074c
 8001814:	20000010 	.word	0x20000010

08001818 <update_keypad.constprop.0>:
		if(keypaditerator < keypadlength-1){
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <update_keypad.constprop.0+0x40>)
 800181a:	f992 3000 	ldrsb.w	r3, [r2]
 800181e:	2b03      	cmp	r3, #3
 8001820:	dc13      	bgt.n	800184a <update_keypad.constprop.0+0x32>
			if(keypadarr[4] == '.'){
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <update_keypad.constprop.0+0x44>)
 8001824:	7908      	ldrb	r0, [r1, #4]
 8001826:	282e      	cmp	r0, #46	; 0x2e
 8001828:	d010      	beq.n	800184c <update_keypad.constprop.0+0x34>
			keypadarr[0] = num;
 800182a:	207a      	movs	r0, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800182c:	f891 c003 	ldrb.w	ip, [r1, #3]
			keypaditerator++;
 8001830:	3301      	adds	r3, #1
 8001832:	7013      	strb	r3, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8001834:	f881 c004 	strb.w	ip, [r1, #4]
 8001838:	784a      	ldrb	r2, [r1, #1]
 800183a:	f891 c002 	ldrb.w	ip, [r1, #2]
 800183e:	780b      	ldrb	r3, [r1, #0]
 8001840:	f881 c003 	strb.w	ip, [r1, #3]
 8001844:	708a      	strb	r2, [r1, #2]
 8001846:	704b      	strb	r3, [r1, #1]
			keypadarr[0] = num;
 8001848:	7008      	strb	r0, [r1, #0]
}
 800184a:	4770      	bx	lr
				keypaddecimal = 0;
 800184c:	f04f 0c00 	mov.w	ip, #0
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <update_keypad.constprop.0+0x48>)
 8001852:	f880 c000 	strb.w	ip, [r0]
 8001856:	e7e8      	b.n	800182a <update_keypad.constprop.0+0x12>
 8001858:	20000015 	.word	0x20000015
 800185c:	20000010 	.word	0x20000010
 8001860:	2000074c 	.word	0x2000074c

08001864 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001864:	2300      	movs	r3, #0
{
 8001866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800186e:	2403      	movs	r4, #3
 8001870:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001874:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001878:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800187c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001880:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001884:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800188a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800188e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001892:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001896:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189c:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189e:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a2:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80018a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ac:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80018b6:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018be:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f008 fc5c 	bl	800a17c <HAL_RCC_OscConfig>
 80018c4:	b108      	cbz	r0, 80018ca <SystemClock_Config+0x66>
 80018c6:	b672      	cpsid	i
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ca:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018cc:	240f      	movs	r4, #15
 80018ce:	2503      	movs	r5, #3
 80018d0:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018d6:	4631      	mov	r1, r6
 80018d8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018da:	e9cd 4500 	strd	r4, r5, [sp]
 80018de:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e2:	f008 feab 	bl	800a63c <HAL_RCC_ClockConfig>
 80018e6:	b108      	cbz	r0, 80018ec <SystemClock_Config+0x88>
 80018e8:	b672      	cpsid	i
  while (1)
 80018ea:	e7fe      	b.n	80018ea <SystemClock_Config+0x86>
}
 80018ec:	b014      	add	sp, #80	; 0x50
 80018ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f2:	bf00      	nop
 80018f4:	40007000 	.word	0x40007000

080018f8 <EXTI1_IRQHandler>:
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 80018f8:	2207      	movs	r2, #7
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <EXTI1_IRQHandler+0x68>)
{
 80018fc:	b530      	push	{r4, r5, lr}
	int8_t tempiter = headiter;
 80018fe:	4d19      	ldr	r5, [pc, #100]	; (8001964 <EXTI1_IRQHandler+0x6c>)
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001900:	615a      	str	r2, [r3, #20]
	int8_t tempiter = headiter;
 8001902:	f995 c000 	ldrsb.w	ip, [r5]
	if(tempiter != tailiter){
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <EXTI1_IRQHandler+0x70>)
	tempiter++;
 8001908:	f10c 0e01 	add.w	lr, ip, #1
 800190c:	fa4f fe8e 	sxtb.w	lr, lr
	if(tempiter >= CIRCSIZE){
 8001910:	4596      	cmp	lr, r2
	if(tempiter != tailiter){
 8001912:	f993 3000 	ldrsb.w	r3, [r3]
	if(tempiter >= CIRCSIZE){
 8001916:	dc06      	bgt.n	8001926 <EXTI1_IRQHandler+0x2e>
	if(tempiter != tailiter){
 8001918:	4573      	cmp	r3, lr
 800191a:	d01a      	beq.n	8001952 <EXTI1_IRQHandler+0x5a>
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <EXTI1_IRQHandler+0x74>)
 800191e:	4c14      	ldr	r4, [pc, #80]	; (8001970 <EXTI1_IRQHandler+0x78>)
 8001920:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001924:	e006      	b.n	8001934 <EXTI1_IRQHandler+0x3c>
	if(tempiter != tailiter){
 8001926:	b1a3      	cbz	r3, 8001952 <EXTI1_IRQHandler+0x5a>
			headiter = 0;
 8001928:	f04f 0e00 	mov.w	lr, #0
		memcpy(notacircbuff[headiter], usbbuffer, 64);  // copy the data to the buffer
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <EXTI1_IRQHandler+0x74>)
 800192e:	4c10      	ldr	r4, [pc, #64]	; (8001970 <EXTI1_IRQHandler+0x78>)
 8001930:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800193a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001942:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001946:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800194a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		headiter++;
 800194e:	f885 e000 	strb.w	lr, [r5]
	memset (usbbuffer, '\0', 64); // clear the buffer
 8001952:	2240      	movs	r2, #64	; 0x40
}
 8001954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memset (usbbuffer, '\0', 64); // clear the buffer
 8001958:	2100      	movs	r1, #0
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <EXTI1_IRQHandler+0x78>)
 800195c:	f00b bbd0 	b.w	800d100 <memset>
 8001960:	40010400 	.word	0x40010400
 8001964:	2000000c 	.word	0x2000000c
 8001968:	200009a8 	.word	0x200009a8
 800196c:	20000758 	.word	0x20000758
 8001970:	20000a2c 	.word	0x20000a2c

08001974 <update_ADC_watchdog>:
void update_ADC_watchdog(float val){
 8001974:	b538      	push	{r3, r4, r5, lr}
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8001976:	491c      	ldr	r1, [pc, #112]	; (80019e8 <update_ADC_watchdog+0x74>)
 8001978:	f7ff fa1c 	bl	8000db4 <__aeabi_fmul>
 800197c:	491b      	ldr	r1, [pc, #108]	; (80019ec <update_ADC_watchdog+0x78>)
 800197e:	f7ff fa19 	bl	8000db4 <__aeabi_fmul>
 8001982:	491b      	ldr	r1, [pc, #108]	; (80019f0 <update_ADC_watchdog+0x7c>)
 8001984:	f7ff fa16 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <update_ADC_watchdog+0x80>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800198a:	4604      	mov	r4, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800198c:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 800198e:	8818      	ldrh	r0, [r3, #0]
 8001990:	f7ff f9b8 	bl	8000d04 <__aeabi_ui2f>
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <update_ADC_watchdog+0x84>)
 8001996:	4605      	mov	r5, r0
 8001998:	8918      	ldrh	r0, [r3, #8]
 800199a:	f7ff f9b3 	bl	8000d04 <__aeabi_ui2f>
 800199e:	4601      	mov	r1, r0
 80019a0:	4628      	mov	r0, r5
 80019a2:	f7ff fabb 	bl	8000f1c <__aeabi_fdiv>
 80019a6:	4915      	ldr	r1, [pc, #84]	; (80019fc <update_ADC_watchdog+0x88>)
 80019a8:	f7ff fa04 	bl	8000db4 <__aeabi_fmul>
 80019ac:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019ae:	4620      	mov	r0, r4
 80019b0:	f7ff fab4 	bl	8000f1c <__aeabi_fdiv>
	if(amp >= 4095.0){
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <update_ADC_watchdog+0x7c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 80019b6:	4605      	mov	r5, r0
	if(amp >= 4095.0){
 80019b8:	f7ff fbae 	bl	8001118 <__aeabi_fcmpge>
 80019bc:	b120      	cbz	r0, 80019c8 <update_ADC_watchdog+0x54>
		ADC1->HTR = 4095;
 80019be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <update_ADC_watchdog+0x8c>)
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
	else if (amp <= 0.0) {
 80019c8:	4604      	mov	r4, r0
 80019ca:	2100      	movs	r1, #0
 80019cc:	4628      	mov	r0, r5
 80019ce:	f7ff fb99 	bl	8001104 <__aeabi_fcmple>
 80019d2:	b930      	cbnz	r0, 80019e2 <update_ADC_watchdog+0x6e>
		ADC1->HTR = (uint16_t) amp;
 80019d4:	4628      	mov	r0, r5
 80019d6:	f7ff fbd9 	bl	800118c <__aeabi_f2uiz>
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <update_ADC_watchdog+0x8c>)
 80019dc:	b280      	uxth	r0, r0
 80019de:	6298      	str	r0, [r3, #40]	; 0x28
}
 80019e0:	bd38      	pop	{r3, r4, r5, pc}
		ADC1->HTR = 0;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <update_ADC_watchdog+0x8c>)
 80019e4:	629c      	str	r4, [r3, #40]	; 0x28
}
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	3e19999a 	.word	0x3e19999a
 80019ec:	41a00000 	.word	0x41a00000
 80019f0:	457ff000 	.word	0x457ff000
 80019f4:	20000020 	.word	0x20000020
 80019f8:	200003dc 	.word	0x200003dc
 80019fc:	40400000 	.word	0x40400000
 8001a00:	40012400 	.word	0x40012400

08001a04 <lcd_createChar>:
{
 8001a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a08:	2564      	movs	r5, #100	; 0x64
 8001a0a:	482d      	ldr	r0, [pc, #180]	; (8001ac0 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a0c:	492d      	ldr	r1, [pc, #180]	; (8001ac4 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a0e:	4607      	mov	r7, r0
{
 8001a10:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a12:	2304      	movs	r3, #4
 8001a14:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a16:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a18:	9500      	str	r5, [sp, #0]
 8001a1a:	214e      	movs	r1, #78	; 0x4e
 8001a1c:	f007 faba 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f006 f9a3 	bl	8007d6c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a28:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a2a:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	2304      	movs	r3, #4
 8001a30:	4c26      	ldr	r4, [pc, #152]	; (8001acc <lcd_createChar+0xc8>)
 8001a32:	9500      	str	r5, [sp, #0]
 8001a34:	aa03      	add	r2, sp, #12
 8001a36:	f007 faad 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001a40:	f006 f994 	bl	8007d6c <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a44:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001a46:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a4a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 8001a4c:	fa02 f103 	lsl.w	r1, r2, r3
 8001a50:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001a52:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a56:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a5a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a5e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a62:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a66:	aa03      	add	r2, sp, #12
 8001a68:	214e      	movs	r1, #78	; 0x4e
 8001a6a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a6c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a70:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a74:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a78:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a7c:	f007 fa8a 	bl	8008f94 <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f006 f973 	bl	8007d6c <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d1dc      	bne.n	8001a44 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a8a:	490f      	ldr	r1, [pc, #60]	; (8001ac8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8c:	aa03      	add	r2, sp, #12
 8001a8e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a90:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a92:	9500      	str	r5, [sp, #0]
 8001a94:	214e      	movs	r1, #78	; 0x4e
 8001a96:	480a      	ldr	r0, [pc, #40]	; (8001ac0 <lcd_createChar+0xbc>)
 8001a98:	f007 fa7c 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f006 f965 	bl	8007d6c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001aa6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa8:	214e      	movs	r1, #78	; 0x4e
 8001aaa:	aa03      	add	r2, sp, #12
 8001aac:	9500      	str	r5, [sp, #0]
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <lcd_createChar+0xbc>)
 8001ab0:	f007 fa70 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001ab4:	2001      	movs	r0, #1
}
 8001ab6:	b005      	add	sp, #20
 8001ab8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 8001abc:	f006 b956 	b.w	8007d6c <HAL_Delay>
 8001ac0:	20000534 	.word	0x20000534
 8001ac4:	080c484c 	.word	0x080c484c
 8001ac8:	080c080c 	.word	0x080c080c
 8001acc:	0801176f 	.word	0x0801176f
 8001ad0:	282c080c 	.word	0x282c080c

08001ad4 <lcd_init>:
{
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 8001ad6:	2064      	movs	r0, #100	; 0x64
{
 8001ad8:	b085      	sub	sp, #20
	HAL_Delay(100);
 8001ada:	f006 f947 	bl	8007d6c <HAL_Delay>
 8001ade:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ae0:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ae2:	4f2e      	ldr	r7, [pc, #184]	; (8001b9c <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ae4:	4e2e      	ldr	r6, [pc, #184]	; (8001ba0 <lcd_init+0xcc>)
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	214e      	movs	r1, #78	; 0x4e
 8001aea:	aa03      	add	r2, sp, #12
 8001aec:	4630      	mov	r0, r6
 8001aee:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001af0:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af2:	f007 fa4f 	bl	8008f94 <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 8001af6:	202d      	movs	r0, #45	; 0x2d
 8001af8:	f006 f938 	bl	8007d6c <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8001afc:	1e63      	subs	r3, r4, #1
 8001afe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001b02:	d1f0      	bne.n	8001ae6 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001b04:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b06:	4927      	ldr	r1, [pc, #156]	; (8001ba4 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b08:	2304      	movs	r3, #4
 8001b0a:	aa03      	add	r2, sp, #12
 8001b0c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b0e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b10:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <lcd_init+0xcc>)
 8001b12:	214e      	movs	r1, #78	; 0x4e
 8001b14:	f007 fa3e 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f006 f927 	bl	8007d6c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b1e:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b20:	2304      	movs	r3, #4
 8001b22:	214e      	movs	r1, #78	; 0x4e
 8001b24:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b26:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b28:	481d      	ldr	r0, [pc, #116]	; (8001ba0 <lcd_init+0xcc>)
 8001b2a:	aa03      	add	r2, sp, #12
 8001b2c:	f007 fa32 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b30:	2001      	movs	r0, #1
 8001b32:	f006 f91b 	bl	8007d6c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b38:	2304      	movs	r3, #4
 8001b3a:	214e      	movs	r1, #78	; 0x4e
 8001b3c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b3e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <lcd_init+0xcc>)
 8001b42:	aa03      	add	r2, sp, #12
 8001b44:	f007 fa26 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f006 f90f 	bl	8007d6c <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b50:	2304      	movs	r3, #4
 8001b52:	214e      	movs	r1, #78	; 0x4e
 8001b54:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b56:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b58:	4811      	ldr	r0, [pc, #68]	; (8001ba0 <lcd_init+0xcc>)
 8001b5a:	aa03      	add	r2, sp, #12
 8001b5c:	f007 fa1a 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f006 f903 	bl	8007d6c <HAL_Delay>
	lcd_createChar();
 8001b66:	f7ff ff4d 	bl	8001a04 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b6c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001b6e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b70:	2304      	movs	r3, #4
 8001b72:	214e      	movs	r1, #78	; 0x4e
 8001b74:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <lcd_init+0xcc>)
 8001b76:	aa03      	add	r2, sp, #12
 8001b78:	f007 fa0c 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b7c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b7e:	4e0e      	ldr	r6, [pc, #56]	; (8001bb8 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b80:	4d07      	ldr	r5, [pc, #28]	; (8001ba0 <lcd_init+0xcc>)
 8001b82:	2304      	movs	r3, #4
 8001b84:	214e      	movs	r1, #78	; 0x4e
 8001b86:	4628      	mov	r0, r5
 8001b88:	aa03      	add	r2, sp, #12
 8001b8a:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b8c:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b8e:	f007 fa01 	bl	8008f94 <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 8001b92:	3c01      	subs	r4, #1
 8001b94:	d1f5      	bne.n	8001b82 <lcd_init+0xae>
}
 8001b96:	b005      	add	sp, #20
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	383c080c 	.word	0x383c080c
 8001ba0:	20000534 	.word	0x20000534
 8001ba4:	282c080c 	.word	0x282c080c
 8001ba8:	888c282c 	.word	0x888c282c
 8001bac:	c8cc080c 	.word	0xc8cc080c
 8001bb0:	080c888c 	.word	0x080c888c
 8001bb4:	080c080c 	.word	0x080c080c
 8001bb8:	090d292d 	.word	0x090d292d

08001bbc <ourInit>:
void ourInit(void){
 8001bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bc0:	2201      	movs	r2, #1
void ourInit(void){
 8001bc2:	b08c      	sub	sp, #48	; 0x30
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001bc4:	2140      	movs	r1, #64	; 0x40
 8001bc6:	4882      	ldr	r0, [pc, #520]	; (8001dd0 <ourInit+0x214>)
 8001bc8:	f007 f902 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001bcc:	4881      	ldr	r0, [pc, #516]	; (8001dd4 <ourInit+0x218>)
 8001bce:	f006 f9af 	bl	8007f30 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001bd2:	4881      	ldr	r0, [pc, #516]	; (8001dd8 <ourInit+0x21c>)
 8001bd4:	f006 fdfe 	bl	80087d4 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b80      	ldr	r3, [pc, #512]	; (8001ddc <ourInit+0x220>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bdc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bde:	69d9      	ldr	r1, [r3, #28]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001be0:	2664      	movs	r6, #100	; 0x64
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001be6:	61d9      	str	r1, [r3, #28]
 8001be8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bea:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf0:	9307      	str	r3, [sp, #28]
 8001bf2:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bf4:	f006 fcb8 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bf8:	200b      	movs	r0, #11
 8001bfa:	f006 fcf3 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	200e      	movs	r0, #14
 8001c02:	4611      	mov	r1, r2
 8001c04:	f006 fcb0 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c08:	200e      	movs	r0, #14
 8001c0a:	f006 fceb 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	200f      	movs	r0, #15
 8001c12:	4611      	mov	r1, r2
 8001c14:	f006 fca8 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f006 fce3 	bl	80085e4 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001c1e:	f7ff fc91 	bl	8001544 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_values, 6);// start the adc in dma mode
 8001c22:	2206      	movs	r2, #6
 8001c24:	496e      	ldr	r1, [pc, #440]	; (8001de0 <ourInit+0x224>)
 8001c26:	486b      	ldr	r0, [pc, #428]	; (8001dd4 <ourInit+0x218>)
 8001c28:	f006 fc2c 	bl	8008484 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	486d      	ldr	r0, [pc, #436]	; (8001de4 <ourInit+0x228>)
 8001c30:	f006 fd28 	bl	8008684 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c34:	2110      	movs	r1, #16
 8001c36:	486b      	ldr	r0, [pc, #428]	; (8001de4 <ourInit+0x228>)
 8001c38:	f006 fd24 	bl	8008684 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4869      	ldr	r0, [pc, #420]	; (8001de4 <ourInit+0x228>)
 8001c40:	461a      	mov	r2, r3
 8001c42:	4619      	mov	r1, r3
 8001c44:	f006 fd4e 	bl	80086e4 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4865      	ldr	r0, [pc, #404]	; (8001de4 <ourInit+0x228>)
 8001c50:	f006 fd48 	bl	80086e4 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	4a64      	ldr	r2, [pc, #400]	; (8001de8 <ourInit+0x22c>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c58:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001c5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c5e:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c60:	4862      	ldr	r0, [pc, #392]	; (8001dec <ourInit+0x230>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c62:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c64:	f006 fecc 	bl	8008a00 <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	f006 fc7b 	bl	8008568 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c72:	2007      	movs	r0, #7
 8001c74:	f006 fcb6 	bl	80085e4 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c7e:	485c      	ldr	r0, [pc, #368]	; (8001df0 <ourInit+0x234>)
 8001c80:	f007 f8a6 	bl	8008dd0 <HAL_GPIO_WritePin>
	memset (usbbuffer, '\0', 64);  // clear the buffer
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	2100      	movs	r1, #0
 8001c88:	485a      	ldr	r0, [pc, #360]	; (8001df4 <ourInit+0x238>)
 8001c8a:	f00b fa39 	bl	800d100 <memset>
	memset (MSG, '\0', 64);  // clear the buffer
 8001c8e:	2240      	movs	r2, #64	; 0x40
 8001c90:	2100      	movs	r1, #0
 8001c92:	4859      	ldr	r0, [pc, #356]	; (8001df8 <ourInit+0x23c>)
 8001c94:	f00b fa34 	bl	800d100 <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4857      	ldr	r0, [pc, #348]	; (8001dfc <ourInit+0x240>)
 8001c9e:	f00b fa2f 	bl	800d100 <memset>
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4856      	ldr	r0, [pc, #344]	; (8001e00 <ourInit+0x244>)
 8001ca8:	f00b fa2a 	bl	800d100 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4854      	ldr	r0, [pc, #336]	; (8001e04 <ourInit+0x248>)
 8001cb2:	f00b fa25 	bl	800d100 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001cb6:	2240      	movs	r2, #64	; 0x40
 8001cb8:	4952      	ldr	r1, [pc, #328]	; (8001e04 <ourInit+0x248>)
 8001cba:	4853      	ldr	r0, [pc, #332]	; (8001e08 <ourInit+0x24c>)
 8001cbc:	f009 f8c0 	bl	800ae40 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cc0:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <ourInit+0x250>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cc2:	4f53      	ldr	r7, [pc, #332]	; (8001e10 <ourInit+0x254>)
	snprintf((char*)txbuffer, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8001cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc8:	4d52      	ldr	r5, [pc, #328]	; (8001e14 <ourInit+0x258>)
 8001cca:	9304      	str	r3, [sp, #16]
 8001ccc:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <ourInit+0x25c>)
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	f7fe fbc2 	bl	8000458 <__aeabi_f2d>
 8001cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <ourInit+0x260>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	f7fe fbbc 	bl	8000458 <__aeabi_f2d>
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <ourInit+0x264>)
 8001ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8001ce6:	2120      	movs	r1, #32
 8001ce8:	4844      	ldr	r0, [pc, #272]	; (8001dfc <ourInit+0x240>)
 8001cea:	f00b fe71 	bl	800d9d0 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	4942      	ldr	r1, [pc, #264]	; (8001dfc <ourInit+0x240>)
 8001cf2:	4845      	ldr	r0, [pc, #276]	; (8001e08 <ourInit+0x24c>)
 8001cf4:	f009 f868 	bl	800adc8 <HAL_UART_Transmit_DMA>
	lcd_init();
 8001cf8:	f7ff feec 	bl	8001ad4 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <ourInit+0x268>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cfe:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d00:	9308      	str	r3, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d02:	4638      	mov	r0, r7
 8001d04:	2304      	movs	r3, #4
 8001d06:	9600      	str	r6, [sp, #0]
 8001d08:	aa08      	add	r2, sp, #32
 8001d0a:	f007 f943 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d0e:	2334      	movs	r3, #52	; 0x34
	data_l = ((data<<4)&0xf0);
 8001d10:	011a      	lsls	r2, r3, #4
 8001d12:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d18:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d1c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d20:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d24:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d28:	2304      	movs	r3, #4
 8001d2a:	214e      	movs	r1, #78	; 0x4e
 8001d2c:	4638      	mov	r0, r7
 8001d2e:	aa08      	add	r2, sp, #32
 8001d30:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d32:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d36:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d3a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d3e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d42:	f007 f927 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d46:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e0      	bne.n	8001d10 <ourInit+0x154>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d4e:	4936      	ldr	r1, [pc, #216]	; (8001e28 <ourInit+0x26c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d50:	2304      	movs	r3, #4
 8001d52:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001d54:	9108      	str	r1, [sp, #32]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d56:	482e      	ldr	r0, [pc, #184]	; (8001e10 <ourInit+0x254>)
 8001d58:	214e      	movs	r1, #78	; 0x4e
 8001d5a:	aa08      	add	r2, sp, #32
 8001d5c:	f007 f91a 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d60:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001d62:	2320      	movs	r3, #32
 8001d64:	4c31      	ldr	r4, [pc, #196]	; (8001e2c <ourInit+0x270>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d66:	4d2a      	ldr	r5, [pc, #168]	; (8001e10 <ourInit+0x254>)
	data_l = ((data<<4)&0xf0);
 8001d68:	011a      	lsls	r2, r3, #4
 8001d6a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d70:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d74:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d78:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d7c:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d80:	2304      	movs	r3, #4
 8001d82:	214e      	movs	r1, #78	; 0x4e
 8001d84:	4628      	mov	r0, r5
 8001d86:	aa08      	add	r2, sp, #32
 8001d88:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001d8a:	f88d 8020 	strb.w	r8, [sp, #32]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001d8e:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001d92:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001d96:	f88d e023 	strb.w	lr, [sp, #35]	; 0x23
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001d9a:	f007 f8fb 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001d9e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e0      	bne.n	8001d68 <ourInit+0x1ac>
	HAL_TIM_Base_Start_IT(&htim11);
 8001da6:	4822      	ldr	r0, [pc, #136]	; (8001e30 <ourInit+0x274>)
 8001da8:	f008 fdd6 	bl	800a958 <HAL_TIM_Base_Start_IT>
	for(int i = 0; i < CIRCSIZE; i++){
 8001dac:	4c21      	ldr	r4, [pc, #132]	; (8001e34 <ourInit+0x278>)
 8001dae:	f504 7500 	add.w	r5, r4, #512	; 0x200
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	4620      	mov	r0, r4
 8001db6:	2100      	movs	r1, #0
	for(int i = 0; i < CIRCSIZE; i++){
 8001db8:	4414      	add	r4, r2
		memset (notacircbuff[i], '\0', 64);  // clear the buffer
 8001dba:	f00b f9a1 	bl	800d100 <memset>
	for(int i = 0; i < CIRCSIZE; i++){
 8001dbe:	42a5      	cmp	r5, r4
 8001dc0:	d1f7      	bne.n	8001db2 <ourInit+0x1f6>
	HAL_TIM_Base_Start_IT(&htim4);
 8001dc2:	481d      	ldr	r0, [pc, #116]	; (8001e38 <ourInit+0x27c>)
}
 8001dc4:	b00c      	add	sp, #48	; 0x30
 8001dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_TIM_Base_Start_IT(&htim4);
 8001dca:	f008 bdc5 	b.w	800a958 <HAL_TIM_Base_Start_IT>
 8001dce:	bf00      	nop
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	200003f8 	.word	0x200003f8
 8001dd8:	20000460 	.word	0x20000460
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	200003d0 	.word	0x200003d0
 8001de4:	2000044c 	.word	0x2000044c
 8001de8:	06000001 	.word	0x06000001
 8001dec:	2000052c 	.word	0x2000052c
 8001df0:	40020800 	.word	0x40020800
 8001df4:	20000a2c 	.word	0x20000a2c
 8001df8:	20000390 	.word	0x20000390
 8001dfc:	200009ac 	.word	0x200009ac
 8001e00:	200009ec 	.word	0x200009ec
 8001e04:	20000960 	.word	0x20000960
 8001e08:	20000708 	.word	0x20000708
 8001e0c:	200003ea 	.word	0x200003ea
 8001e10:	20000534 	.word	0x20000534
 8001e14:	080114a0 	.word	0x080114a0
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000a70 	.word	0x20000a70
 8001e20:	080114d0 	.word	0x080114d0
 8001e24:	080cc8cc 	.word	0x080cc8cc
 8001e28:	484c989c 	.word	0x484c989c
 8001e2c:	080114b8 	.word	0x080114b8
 8001e30:	200005c8 	.word	0x200005c8
 8001e34:	20000758 	.word	0x20000758
 8001e38:	20000688 	.word	0x20000688
 8001e3c:	00000000 	.word	0x00000000

08001e40 <main>:
{
 8001e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	2400      	movs	r4, #0
{
 8001e46:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001e48:	f005 ff6e 	bl	8007d28 <HAL_Init>
  SystemClock_Config();
 8001e4c:	f7ff fd0a 	bl	8001864 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e52:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001e58:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5c:	4dac      	ldr	r5, [pc, #688]	; (8002110 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e62:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	61eb      	str	r3, [r5, #28]
 8001e6a:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001e6c:	48a9      	ldr	r0, [pc, #676]	; (8002114 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	9307      	str	r3, [sp, #28]
 8001e74:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e76:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	4692      	mov	sl, r2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7a:	f043 0320 	orr.w	r3, r3, #32
 8001e7e:	61eb      	str	r3, [r5, #28]
 8001e80:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e82:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	9308      	str	r3, [sp, #32]
 8001e8c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001e90:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61eb      	str	r3, [r5, #28]
 8001e98:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001e9a:	4f9f      	ldr	r7, [pc, #636]	; (8002118 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea2:	69eb      	ldr	r3, [r5, #28]
 8001ea4:	4333      	orrs	r3, r6
 8001ea6:	61eb      	str	r3, [r5, #28]
 8001ea8:	69eb      	ldr	r3, [r5, #28]
 8001eaa:	4033      	ands	r3, r6
 8001eac:	930a      	str	r3, [sp, #40]	; 0x28
 8001eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb0:	69eb      	ldr	r3, [r5, #28]
 8001eb2:	f043 0308 	orr.w	r3, r3, #8
 8001eb6:	61eb      	str	r3, [r5, #28]
 8001eb8:	69eb      	ldr	r3, [r5, #28]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001ec2:	f006 ff85 	bl	8008dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ec6:	4622      	mov	r2, r4
 8001ec8:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001ecc:	4893      	ldr	r0, [pc, #588]	; (800211c <main+0x2dc>)
 8001ece:	f006 ff7f 	bl	8008dd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001ed2:	f64f 420f 	movw	r2, #64527	; 0xfc0f
 8001ed6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed8:	4890      	ldr	r0, [pc, #576]	; (800211c <main+0x2dc>)
 8001eda:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_1_Pin|Unused_Pin_2_Pin|Unused_Pin_3_Pin|Unused_Pin_4_Pin
 8001edc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ee0:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee2:	f006 fdf3 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001ee6:	2240      	movs	r2, #64	; 0x40
 8001ee8:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001eea:	488a      	ldr	r0, [pc, #552]	; (8002114 <main+0x2d4>)
 8001eec:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001eee:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001ef2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f006 fde9 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001efa:	f248 1280 	movw	r2, #33152	; 0x8180
 8001efe:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	4884      	ldr	r0, [pc, #528]	; (8002114 <main+0x2d4>)
 8001f02:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_8_Pin|Unused_Pin_10_Pin|Unused_Pin_11_Pin;
 8001f04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f08:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f006 fddf 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001f0e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001f12:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f14:	4881      	ldr	r0, [pc, #516]	; (800211c <main+0x2dc>)
 8001f16:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001f18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001f1c:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f006 fdd4 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001f24:	f647 4205 	movw	r2, #31749	; 0x7c05
 8001f28:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	487c      	ldr	r0, [pc, #496]	; (8002120 <main+0x2e0>)
 8001f2e:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001f30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f006 fdc8 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	2300      	movs	r3, #0
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001f40:	4877      	ldr	r0, [pc, #476]	; (8002120 <main+0x2e0>)
 8001f42:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001f44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f48:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f006 fdbe 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f50:	f248 3238 	movw	r2, #33592	; 0x8338
 8001f54:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f56:	4872      	ldr	r0, [pc, #456]	; (8002120 <main+0x2e0>)
 8001f58:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_9_Pin|Unused_Pin_16_Pin|Unused_Pin_17_Pin|Unused_Pin_18_Pin
 8001f5a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f5e:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f006 fdb4 	bl	8008acc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f64:	2300      	movs	r3, #0
 8001f66:	2204      	movs	r2, #4
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f68:	486e      	ldr	r0, [pc, #440]	; (8002124 <main+0x2e4>)
 8001f6a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = Unused_Pin_15_Pin;
 8001f6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f70:	9610      	str	r6, [sp, #64]	; 0x40
  HAL_GPIO_Init(Unused_Pin_15_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f006 fdab 	bl	8008acc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f76:	4622      	mov	r2, r4
 8001f78:	4621      	mov	r1, r4
 8001f7a:	2006      	movs	r0, #6
 8001f7c:	f006 faf4 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f80:	2006      	movs	r0, #6
 8001f82:	f006 fb2f 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f86:	4622      	mov	r2, r4
 8001f88:	4621      	mov	r1, r4
 8001f8a:	2008      	movs	r0, #8
 8001f8c:	f006 faec 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f90:	2008      	movs	r0, #8
 8001f92:	f006 fb27 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f96:	4622      	mov	r2, r4
 8001f98:	4621      	mov	r1, r4
 8001f9a:	2028      	movs	r0, #40	; 0x28
 8001f9c:	f006 fae4 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fa0:	2028      	movs	r0, #40	; 0x28
 8001fa2:	f006 fb1f 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa6:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fa8:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	61eb      	str	r3, [r5, #28]
 8001fb0:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fb2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fb8:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fba:	9306      	str	r3, [sp, #24]
 8001fbc:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fbe:	f006 fad3 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fc2:	200b      	movs	r0, #11
 8001fc4:	f006 fb0e 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001fc8:	4622      	mov	r2, r4
 8001fca:	4621      	mov	r1, r4
 8001fcc:	200e      	movs	r0, #14
 8001fce:	f006 facb 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001fd2:	200e      	movs	r0, #14
 8001fd4:	f006 fb06 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001fd8:	4622      	mov	r2, r4
 8001fda:	4621      	mov	r1, r4
 8001fdc:	200f      	movs	r0, #15
 8001fde:	f006 fac3 	bl	8008568 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f006 fafe 	bl	80085e4 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001fe8:	f7ff faac 	bl	8001544 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001fec:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <main+0x2e8>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001fee:	4638      	mov	r0, r7
  DAC_ChannelConfTypeDef sConfig = {0};
 8001ff0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hdac.Instance = DAC;
 8001ff4:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ff6:	f006 fb2f 	bl	8008658 <HAL_DAC_Init>
 8001ffa:	b108      	cbz	r0, 8002000 <main+0x1c0>
 8001ffc:	b672      	cpsid	i
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <main+0x1be>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002000:	4602      	mov	r2, r0
 8002002:	a90e      	add	r1, sp, #56	; 0x38
 8002004:	4638      	mov	r0, r7
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002006:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800200a:	f006 fb81 	bl	8008710 <HAL_DAC_ConfigChannel>
 800200e:	b108      	cbz	r0, 8002014 <main+0x1d4>
 8002010:	b672      	cpsid	i
  while (1)
 8002012:	e7fe      	b.n	8002012 <main+0x1d2>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002014:	2210      	movs	r2, #16
 8002016:	4638      	mov	r0, r7
 8002018:	a90e      	add	r1, sp, #56	; 0x38
 800201a:	f006 fb79 	bl	8008710 <HAL_DAC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	b108      	cbz	r0, 8002026 <main+0x1e6>
 8002022:	b672      	cpsid	i
  while (1)
 8002024:	e7fe      	b.n	8002024 <main+0x1e4>
  hi2c1.Instance = I2C1;
 8002026:	4841      	ldr	r0, [pc, #260]	; (800212c <main+0x2ec>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002028:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 800202a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002032:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8002038:	4c3d      	ldr	r4, [pc, #244]	; (8002130 <main+0x2f0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800203a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <main+0x2f4>)
 8002040:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002044:	f006 fede 	bl	8008e04 <HAL_I2C_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	b9b0      	cbnz	r0, 800207a <main+0x23a>
  huart1.Instance = USART1;
 800204c:	483a      	ldr	r0, [pc, #232]	; (8002138 <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800204e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002052:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002056:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 9600;
 8002058:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800205c:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 800205e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002062:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002064:	230c      	movs	r3, #12
 8002066:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <main+0x2fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800206a:	6086      	str	r6, [r0, #8]
  huart1.Instance = USART1;
 800206c:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206e:	f008 fe21 	bl	800acb4 <HAL_UART_Init>
 8002072:	4604      	mov	r4, r0
 8002074:	b118      	cbz	r0, 800207e <main+0x23e>
 8002076:	b672      	cpsid	i
  while (1)
 8002078:	e7fe      	b.n	8002078 <main+0x238>
 800207a:	b672      	cpsid	i
 800207c:	e7fe      	b.n	800207c <main+0x23c>
  MX_USB_DEVICE_Init();
 800207e:	f00a fd5d 	bl	800cb3c <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8002082:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim2.Instance = TIM2;
 8002086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 20;
 800208a:	2314      	movs	r3, #20
  htim2.Instance = TIM2;
 800208c:	4d2c      	ldr	r5, [pc, #176]	; (8002140 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002092:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002094:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 80020a2:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 20;
 80020a4:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 80020a6:	606f      	str	r7, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a8:	f008 fc06 	bl	800a8b8 <HAL_TIM_Base_Init>
 80020ac:	b108      	cbz	r0, 80020b2 <main+0x272>
 80020ae:	b672      	cpsid	i
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <main+0x270>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b2:	4628      	mov	r0, r5
 80020b4:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b6:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020b8:	f008 fc90 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 80020bc:	b108      	cbz	r0, 80020c2 <main+0x282>
 80020be:	b672      	cpsid	i
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <main+0x280>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c2:	4628      	mov	r0, r5
 80020c4:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ca:	f008 fdc1 	bl	800ac50 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	b108      	cbz	r0, 80020d4 <main+0x294>
 80020d0:	b672      	cpsid	i
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <main+0x292>
  htim3.Init.Period = 500;
 80020d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 80020d8:	4c1a      	ldr	r4, [pc, #104]	; (8002144 <main+0x304>)
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020dc:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80020e0:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	e9c4 7001 	strd	r7, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ec:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020f0:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 80020f2:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 80020f4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020f6:	f008 fbdf 	bl	800a8b8 <HAL_TIM_Base_Init>
 80020fa:	b108      	cbz	r0, 8002100 <main+0x2c0>
 80020fc:	b672      	cpsid	i
  while (1)
 80020fe:	e7fe      	b.n	80020fe <main+0x2be>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002100:	4620      	mov	r0, r4
 8002102:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002104:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002106:	f008 fc69 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 800210a:	b1f8      	cbz	r0, 800214c <main+0x30c>
 800210c:	b672      	cpsid	i
  while (1)
 800210e:	e7fe      	b.n	800210e <main+0x2ce>
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000
 8002118:	2000044c 	.word	0x2000044c
 800211c:	40020800 	.word	0x40020800
 8002120:	40020400 	.word	0x40020400
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40007400 	.word	0x40007400
 800212c:	20000534 	.word	0x20000534
 8002130:	40005400 	.word	0x40005400
 8002134:	000186a0 	.word	0x000186a0
 8002138:	20000708 	.word	0x20000708
 800213c:	40013800 	.word	0x40013800
 8002140:	20000608 	.word	0x20000608
 8002144:	20000648 	.word	0x20000648
 8002148:	40000400 	.word	0x40000400
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214c:	2600      	movs	r6, #0
 800214e:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002150:	484a      	ldr	r0, [pc, #296]	; (800227c <main+0x43c>)
 8002152:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002154:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002158:	f008 fd7a 	bl	800ac50 <HAL_TIMEx_MasterConfigSynchronization>
 800215c:	b108      	cbz	r0, 8002162 <main+0x322>
 800215e:	b672      	cpsid	i
  while (1)
 8002160:	e7fe      	b.n	8002160 <main+0x320>
  htim11.Init.Prescaler = 32000;
 8002162:	f44f 45fa 	mov.w	r5, #32000	; 0x7d00
  htim11.Init.Period = 100;
 8002166:	2264      	movs	r2, #100	; 0x64
  htim11.Instance = TIM11;
 8002168:	4c45      	ldr	r4, [pc, #276]	; (8002280 <main+0x440>)
 800216a:	4b46      	ldr	r3, [pc, #280]	; (8002284 <main+0x444>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216c:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002170:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	e9c4 0004 	strd	r0, r0, [r4, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800217a:	4620      	mov	r0, r4
  htim11.Init.Period = 100;
 800217c:	60e2      	str	r2, [r4, #12]
  htim11.Init.Prescaler = 32000;
 800217e:	6065      	str	r5, [r4, #4]
  htim11.Instance = TIM11;
 8002180:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002182:	f008 fb99 	bl	800a8b8 <HAL_TIM_Base_Init>
 8002186:	b108      	cbz	r0, 800218c <main+0x34c>
 8002188:	b672      	cpsid	i
  while (1)
 800218a:	e7fe      	b.n	800218a <main+0x34a>
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 800218c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002192:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002194:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
 8002196:	f008 fc21 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 800219a:	b108      	cbz	r0, 80021a0 <main+0x360>
 800219c:	b672      	cpsid	i
  while (1)
 800219e:	e7fe      	b.n	800219e <main+0x35e>
  htim9.Init.Period = 200;
 80021a0:	22c8      	movs	r2, #200	; 0xc8
  htim9.Instance = TIM9;
 80021a2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002288 <main+0x448>
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <main+0x44c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80021ac:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	e9c8 5001 	strd	r5, r0, [r8, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b8:	e9c8 0004 	strd	r0, r0, [r8, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80021bc:	4640      	mov	r0, r8
  htim9.Init.Period = 200;
 80021be:	f8c8 200c 	str.w	r2, [r8, #12]
  htim9.Instance = TIM9;
 80021c2:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80021c6:	f008 fb77 	bl	800a8b8 <HAL_TIM_Base_Init>
 80021ca:	b108      	cbz	r0, 80021d0 <main+0x390>
 80021cc:	b672      	cpsid	i
  while (1)
 80021ce:	e7fe      	b.n	80021ce <main+0x38e>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80021d0:	4640      	mov	r0, r8
 80021d2:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d4:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80021d6:	f008 fc01 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 80021da:	b108      	cbz	r0, 80021e0 <main+0x3a0>
 80021dc:	b672      	cpsid	i
  while (1)
 80021de:	e7fe      	b.n	80021de <main+0x39e>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021e0:	4640      	mov	r0, r8
 80021e2:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80021e8:	f008 fd32 	bl	800ac50 <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	b108      	cbz	r0, 80021f2 <main+0x3b2>
 80021ee:	b672      	cpsid	i
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <main+0x3b0>
  htim10.Init.Period = 10;
 80021f2:	220a      	movs	r2, #10
  htim10.Instance = TIM10;
 80021f4:	4e26      	ldr	r6, [pc, #152]	; (8002290 <main+0x450>)
 80021f6:	4b27      	ldr	r3, [pc, #156]	; (8002294 <main+0x454>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f8:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80021fc:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002204:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002208:	4630      	mov	r0, r6
  htim10.Init.Period = 10;
 800220a:	60f2      	str	r2, [r6, #12]
  htim10.Instance = TIM10;
 800220c:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800220e:	f008 fb53 	bl	800a8b8 <HAL_TIM_Base_Init>
 8002212:	b108      	cbz	r0, 8002218 <main+0x3d8>
 8002214:	b672      	cpsid	i
  while (1)
 8002216:	e7fe      	b.n	8002216 <main+0x3d6>
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8002218:	4630      	mov	r0, r6
 800221a:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 800221e:	f008 fbdd 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 8002222:	b108      	cbz	r0, 8002228 <main+0x3e8>
 8002224:	b672      	cpsid	i
  while (1)
 8002226:	e7fe      	b.n	8002226 <main+0x3e6>
  htim4.Init.Period = 2500;
 8002228:	f640 12c4 	movw	r2, #2500	; 0x9c4
  htim4.Instance = TIM4;
 800222c:	4e1a      	ldr	r6, [pc, #104]	; (8002298 <main+0x458>)
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <main+0x45c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002230:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8002234:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002238:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	e9c6 5001 	strd	r5, r0, [r6, #4]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002244:	4630      	mov	r0, r6
  htim4.Init.Period = 2500;
 8002246:	60f2      	str	r2, [r6, #12]
  htim4.Instance = TIM4;
 8002248:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800224a:	f008 fb35 	bl	800a8b8 <HAL_TIM_Base_Init>
 800224e:	b108      	cbz	r0, 8002254 <main+0x414>
 8002250:	b672      	cpsid	i
  while (1)
 8002252:	e7fe      	b.n	8002252 <main+0x412>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002254:	4630      	mov	r0, r6
 8002256:	a90e      	add	r1, sp, #56	; 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800225a:	f008 fbbf 	bl	800a9dc <HAL_TIM_ConfigClockSource>
 800225e:	b108      	cbz	r0, 8002264 <main+0x424>
 8002260:	b672      	cpsid	i
  while (1)
 8002262:	e7fe      	b.n	8002262 <main+0x422>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2200      	movs	r2, #0
 8002266:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002268:	480b      	ldr	r0, [pc, #44]	; (8002298 <main+0x458>)
 800226a:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002270:	f008 fcee 	bl	800ac50 <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	b1a0      	cbz	r0, 80022a0 <main+0x460>
 8002276:	b672      	cpsid	i
  while (1)
 8002278:	e7fe      	b.n	8002278 <main+0x438>
 800227a:	bf00      	nop
 800227c:	20000648 	.word	0x20000648
 8002280:	200005c8 	.word	0x200005c8
 8002284:	40011000 	.word	0x40011000
 8002288:	200006c8 	.word	0x200006c8
 800228c:	40010800 	.word	0x40010800
 8002290:	20000588 	.word	0x20000588
 8002294:	40010c00 	.word	0x40010c00
 8002298:	20000688 	.word	0x20000688
 800229c:	40000800 	.word	0x40000800
  ourInit();
 80022a0:	f7ff fc8c 	bl	8001bbc <ourInit>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80022a4:	f04f 0a00 	mov.w	sl, #0
 80022a8:	4cb1      	ldr	r4, [pc, #708]	; (8002570 <main+0x730>)
 80022aa:	4db2      	ldr	r5, [pc, #712]	; (8002574 <main+0x734>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80022ac:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8002578 <main+0x738>
	  tempiter++;
 80022b0:	4bb2      	ldr	r3, [pc, #712]	; (800257c <main+0x73c>)
 80022b2:	781e      	ldrb	r6, [r3, #0]
	  if(tempiter != headiter){
 80022b4:	4bb2      	ldr	r3, [pc, #712]	; (8002580 <main+0x740>)
	  tempiter++;
 80022b6:	3601      	adds	r6, #1
 80022b8:	b276      	sxtb	r6, r6
		  tempiter = 0;
 80022ba:	2e08      	cmp	r6, #8
 80022bc:	bfa8      	it	ge
 80022be:	2600      	movge	r6, #0
	  if(tempiter != headiter){
 80022c0:	f993 3000 	ldrsb.w	r3, [r3]
 80022c4:	42b3      	cmp	r3, r6
 80022c6:	d062      	beq.n	800238e <main+0x54e>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 80022c8:	4bae      	ldr	r3, [pc, #696]	; (8002584 <main+0x744>)
 80022ca:	220a      	movs	r2, #10
 80022cc:	eb03 1686 	add.w	r6, r3, r6, lsl #6
 80022d0:	4631      	mov	r1, r6
 80022d2:	48ad      	ldr	r0, [pc, #692]	; (8002588 <main+0x748>)
 80022d4:	f00b fbb0 	bl	800da38 <strncmp>
 80022d8:	2800      	cmp	r0, #0
 80022da:	f000 8212 	beq.w	8002702 <main+0x8c2>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022de:	2213      	movs	r2, #19
 80022e0:	4631      	mov	r1, r6
 80022e2:	48aa      	ldr	r0, [pc, #680]	; (800258c <main+0x74c>)
 80022e4:	f00b fba8 	bl	800da38 <strncmp>
			if ((strncmp("MEAS:VOLT?", (char*)notacircbuff[tempiter], strlen("MEAS:VOLT?")) == 0) ||
 80022e8:	2800      	cmp	r0, #0
 80022ea:	f000 820a 	beq.w	8002702 <main+0x8c2>
					(strncmp("MEASure:VOLTage?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage?")) == 0)){
 80022ee:	2210      	movs	r2, #16
 80022f0:	4631      	mov	r1, r6
 80022f2:	48a7      	ldr	r0, [pc, #668]	; (8002590 <main+0x750>)
 80022f4:	f00b fba0 	bl	800da38 <strncmp>
					(strncmp("MEASure:VOLTage:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:VOLTage:DC?")) == 0) ||
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f000 8202 	beq.w	8002702 <main+0x8c2>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 80022fe:	220a      	movs	r2, #10
 8002300:	4631      	mov	r1, r6
 8002302:	48a4      	ldr	r0, [pc, #656]	; (8002594 <main+0x754>)
 8002304:	f00b fb98 	bl	800da38 <strncmp>
 8002308:	b168      	cbz	r0, 8002326 <main+0x4e6>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 800230a:	2213      	movs	r2, #19
 800230c:	4631      	mov	r1, r6
 800230e:	48a2      	ldr	r0, [pc, #648]	; (8002598 <main+0x758>)
 8002310:	f00b fb92 	bl	800da38 <strncmp>
			else if ((strncmp("MEAS:CURR?", (char*)notacircbuff[tempiter], strlen("MEAS:CURR?")) == 0) ||
 8002314:	b138      	cbz	r0, 8002326 <main+0x4e6>
					(strncmp("MEASure:CURRent?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent?")) == 0)){
 8002316:	2210      	movs	r2, #16
 8002318:	4631      	mov	r1, r6
 800231a:	48a0      	ldr	r0, [pc, #640]	; (800259c <main+0x75c>)
 800231c:	f00b fb8c 	bl	800da38 <strncmp>
					(strncmp("MEASure:CURRent:DC?", (char*)notacircbuff[tempiter], strlen("MEASure:CURRent:DC?")) == 0) ||
 8002320:	2800      	cmp	r0, #0
 8002322:	f040 81fc 	bne.w	800271e <main+0x8de>
				snprintf((char*)MSG, 64, "%.3f, %.3f\n", cur_num_aux, cur_num);
 8002326:	4b9e      	ldr	r3, [pc, #632]	; (80025a0 <main+0x760>)
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	f7fe f895 	bl	8000458 <__aeabi_f2d>
 800232e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002332:	4b9c      	ldr	r3, [pc, #624]	; (80025a4 <main+0x764>)
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	f7fe f88f 	bl	8000458 <__aeabi_f2d>
 800233a:	e9cd 0100 	strd	r0, r1, [sp]
 800233e:	4a9a      	ldr	r2, [pc, #616]	; (80025a8 <main+0x768>)
 8002340:	2140      	movs	r1, #64	; 0x40
 8002342:	488b      	ldr	r0, [pc, #556]	; (8002570 <main+0x730>)
 8002344:	f00b fb44 	bl	800d9d0 <sniprintf>
				CDC_Transmit_FS(MSG, 64);
 8002348:	2140      	movs	r1, #64	; 0x40
 800234a:	4889      	ldr	r0, [pc, #548]	; (8002570 <main+0x730>)
 800234c:	f00a fc7e 	bl	800cc4c <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	2100      	movs	r1, #0
 8002354:	4886      	ldr	r0, [pc, #536]	; (8002570 <main+0x730>)
 8002356:	f00a fed3 	bl	800d100 <memset>
			if ((strncmp("READ?", (char*)notacircbuff[tempiter], strlen("READ?")) == 0)){
 800235a:	2205      	movs	r2, #5
 800235c:	4631      	mov	r1, r6
 800235e:	4893      	ldr	r0, [pc, #588]	; (80025ac <main+0x76c>)
 8002360:	f00b fb6a 	bl	800da38 <strncmp>
 8002364:	2800      	cmp	r0, #0
 8002366:	f040 81ef 	bne.w	8002748 <main+0x908>
				CDC_Transmit_FS((uint8_t*)"\n", strlen("\n"));
 800236a:	2101      	movs	r1, #1
 800236c:	4890      	ldr	r0, [pc, #576]	; (80025b0 <main+0x770>)
 800236e:	f00a fc6d 	bl	800cc4c <CDC_Transmit_FS>
			memset (notacircbuff[tempiter], '\0', 64); // clear the buffer
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	4630      	mov	r0, r6
 8002376:	2100      	movs	r1, #0
 8002378:	f00a fec2 	bl	800d100 <memset>
			tailiter++;
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <main+0x73c>)
 800237e:	7813      	ldrb	r3, [r2, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b25b      	sxtb	r3, r3
			if(tailiter >= CIRCSIZE){
 8002384:	2b07      	cmp	r3, #7
				tailiter = 0;
 8002386:	bfc4      	itt	gt
 8002388:	2300      	movgt	r3, #0
 800238a:	4a7c      	ldrgt	r2, [pc, #496]	; (800257c <main+0x73c>)
 800238c:	7013      	strb	r3, [r2, #0]
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 800238e:	4b89      	ldr	r3, [pc, #548]	; (80025b4 <main+0x774>)
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002390:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80025b8 <main+0x778>
	  uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002394:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002396:	8818      	ldrh	r0, [r3, #0]
 8002398:	f7fe fcb4 	bl	8000d04 <__aeabi_ui2f>
 800239c:	4606      	mov	r6, r0
 800239e:	f8b9 0008 	ldrh.w	r0, [r9, #8]
 80023a2:	f7fe fcaf 	bl	8000d04 <__aeabi_ui2f>
 80023a6:	4607      	mov	r7, r0
 80023a8:	4630      	mov	r0, r6
 80023aa:	4639      	mov	r1, r7
 80023ac:	f7fe fdb6 	bl	8000f1c <__aeabi_fdiv>
 80023b0:	4659      	mov	r1, fp
 80023b2:	f7fe fcff 	bl	8000db4 <__aeabi_fmul>
 80023b6:	4603      	mov	r3, r0
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80023b8:	4980      	ldr	r1, [pc, #512]	; (80025bc <main+0x77c>)
 80023ba:	4638      	mov	r0, r7
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 80023bc:	9305      	str	r3, [sp, #20]
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80023be:	f7fe fcf9 	bl	8000db4 <__aeabi_fmul>
 80023c2:	4680      	mov	r8, r0
 80023c4:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 80023c8:	f7fe fc9c 	bl	8000d04 <__aeabi_ui2f>
 80023cc:	4659      	mov	r1, fp
 80023ce:	f7fe fcf1 	bl	8000db4 <__aeabi_fmul>
 80023d2:	4631      	mov	r1, r6
 80023d4:	f7fe fcee 	bl	8000db4 <__aeabi_fmul>
 80023d8:	4641      	mov	r1, r8
 80023da:	f7fe fd9f 	bl	8000f1c <__aeabi_fdiv>
 80023de:	4978      	ldr	r1, [pc, #480]	; (80025c0 <main+0x780>)
 80023e0:	f7fe fd9c 	bl	8000f1c <__aeabi_fdiv>
 80023e4:	4977      	ldr	r1, [pc, #476]	; (80025c4 <main+0x784>)
 80023e6:	f7fe fd99 	bl	8000f1c <__aeabi_fdiv>
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023ea:	4651      	mov	r1, sl
	  float cur_num_temp = ((((float)3.0 * (float)ADC_CURRENT * (float)vrefvalue)/((float)ADC_VREF * (float)4095) / (float)20) / (float)0.15);
 80023ec:	4607      	mov	r7, r0
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023ee:	f7fe fe93 	bl	8001118 <__aeabi_fcmpge>
 80023f2:	b900      	cbnz	r0, 80023f6 <main+0x5b6>
 80023f4:	4657      	mov	r7, sl
 80023f6:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <main+0x760>)
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023f8:	4973      	ldr	r1, [pc, #460]	; (80025c8 <main+0x788>)
	  cur_num  = (cur_num_temp >= 0.0000) ? cur_num_temp : 0.0000;
 80023fa:	601f      	str	r7, [r3, #0]
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 80023fc:	4638      	mov	r0, r7
 80023fe:	f7fe fcd9 	bl	8000db4 <__aeabi_fmul>
 8002402:	4607      	mov	r7, r0
 8002404:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <main+0x778>)
 8002406:	8818      	ldrh	r0, [r3, #0]
 8002408:	f7fe fc7c 	bl	8000d04 <__aeabi_ui2f>
 800240c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002410:	f7fe fcd0 	bl	8000db4 <__aeabi_fmul>
 8002414:	4659      	mov	r1, fp
 8002416:	f7fe fccd 	bl	8000db4 <__aeabi_fmul>
 800241a:	4631      	mov	r1, r6
 800241c:	f7fe fcca 	bl	8000db4 <__aeabi_fmul>
 8002420:	4641      	mov	r1, r8
 8002422:	f7fe fd7b 	bl	8000f1c <__aeabi_fdiv>
 8002426:	4639      	mov	r1, r7
 8002428:	f7fe fbba 	bl	8000ba0 <__aeabi_fsub>
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 800242c:	4651      	mov	r1, sl
	  float op_num_temp = ((float)3.0 * ((float)ADC_OPAMP * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800242e:	4681      	mov	r9, r0
	  op_num  = (op_num_temp >= 0.0000) ? op_num_temp : 0.0000;
 8002430:	f7fe fe72 	bl	8001118 <__aeabi_fcmpge>
 8002434:	b900      	cbnz	r0, 8002438 <main+0x5f8>
 8002436:	46d1      	mov	r9, sl
 8002438:	4b64      	ldr	r3, [pc, #400]	; (80025cc <main+0x78c>)
 800243a:	f8c3 9000 	str.w	r9, [r3]
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 800243e:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <main+0x778>)
 8002440:	8858      	ldrh	r0, [r3, #2]
 8002442:	f7fe fc5f 	bl	8000d04 <__aeabi_ui2f>
 8002446:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800244a:	f7fe fcb3 	bl	8000db4 <__aeabi_fmul>
 800244e:	4659      	mov	r1, fp
 8002450:	f7fe fcb0 	bl	8000db4 <__aeabi_fmul>
 8002454:	4631      	mov	r1, r6
 8002456:	f7fe fcad 	bl	8000db4 <__aeabi_fmul>
 800245a:	4641      	mov	r1, r8
 800245c:	f7fe fd5e 	bl	8000f1c <__aeabi_fdiv>
 8002460:	4639      	mov	r1, r7
 8002462:	f7fe fb9d 	bl	8000ba0 <__aeabi_fsub>
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 8002466:	4651      	mov	r1, sl
	  float lin_num_temp = ((float)3.0 * ((float)ADC_LINEAR * (float)4.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095) - ((float)cur_num * (float)0.35);
 8002468:	4607      	mov	r7, r0
	  lin_num  = (lin_num_temp >= 0.0000) ? lin_num_temp : 0.0000;
 800246a:	f7fe fe55 	bl	8001118 <__aeabi_fcmpge>
 800246e:	b900      	cbnz	r0, 8002472 <main+0x632>
 8002470:	4657      	mov	r7, sl
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <main+0x790>)
 8002474:	601f      	str	r7, [r3, #0]
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002476:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <main+0x778>)
 8002478:	88d8      	ldrh	r0, [r3, #6]
 800247a:	f7fe fc43 	bl	8000d04 <__aeabi_ui2f>
 800247e:	4955      	ldr	r1, [pc, #340]	; (80025d4 <main+0x794>)
 8002480:	f7fe fc98 	bl	8000db4 <__aeabi_fmul>
 8002484:	4659      	mov	r1, fp
 8002486:	f7fe fc95 	bl	8000db4 <__aeabi_fmul>
 800248a:	4631      	mov	r1, r6
 800248c:	f7fe fc92 	bl	8000db4 <__aeabi_fmul>
 8002490:	4641      	mov	r1, r8
 8002492:	f7fe fd43 	bl	8000f1c <__aeabi_fdiv>
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 8002496:	4651      	mov	r1, sl
	  float swi_num_temp = ((float)3.0 * ((float)ADC_SWITCHING * (float)5.0) * (float)vrefvalue)/((float)ADC_VREF * (float)4095);
 8002498:	4606      	mov	r6, r0
	  swi_num  = (swi_num_temp >= 0.0000) ? swi_num_temp : 0.0000;
 800249a:	f7fe fe3d 	bl	8001118 <__aeabi_fcmpge>
 800249e:	b900      	cbnz	r0, 80024a2 <main+0x662>
 80024a0:	4656      	mov	r6, sl
 80024a2:	4b4d      	ldr	r3, [pc, #308]	; (80025d8 <main+0x798>)
 80024a4:	601e      	str	r6, [r3, #0]
	  if(chstat_main == 1){
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <main+0x79c>)
 80024a8:	f993 3000 	ldrsb.w	r3, [r3]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f000 8112 	beq.w	80026d6 <main+0x896>
		  if(op_num > (volt_set_main - 0.5) + margin){
 80024b2:	4648      	mov	r0, r9
 80024b4:	f7fd ffd0 	bl	8000458 <__aeabi_f2d>
 80024b8:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <main+0x7a0>)
 80024ba:	4606      	mov	r6, r0
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	460f      	mov	r7, r1
 80024c0:	f7fd ffca 	bl	8000458 <__aeabi_f2d>
 80024c4:	2200      	movs	r2, #0
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <main+0x7a4>)
 80024c8:	f7fd fe66 	bl	8000198 <__aeabi_dsub>
 80024cc:	a326      	add	r3, pc, #152	; (adr r3, 8002568 <main+0x728>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	4680      	mov	r8, r0
 80024d4:	4689      	mov	r9, r1
 80024d6:	f7fd fe61 	bl	800019c <__adddf3>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4630      	mov	r0, r6
 80024e0:	4639      	mov	r1, r7
 80024e2:	f7fe faa1 	bl	8000a28 <__aeabi_dcmpgt>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	f040 80da 	bne.w	80026a0 <main+0x860>
		  else if(op_num < (volt_set_main - 0.5) - margin){
 80024ec:	a31e      	add	r3, pc, #120	; (adr r3, 8002568 <main+0x728>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	4640      	mov	r0, r8
 80024f4:	4649      	mov	r1, r9
 80024f6:	f7fd fe4f 	bl	8000198 <__aeabi_dsub>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4630      	mov	r0, r6
 8002500:	4639      	mov	r1, r7
 8002502:	f7fe fa73 	bl	80009ec <__aeabi_dcmplt>
 8002506:	b160      	cbz	r0, 8002522 <main+0x6e2>
			  if(v1 <= 4094){
 8002508:	f640 72fe 	movw	r2, #4094	; 0xffe
 800250c:	882b      	ldrh	r3, [r5, #0]
 800250e:	4293      	cmp	r3, r2
				  v1++;
 8002510:	bf9c      	itt	ls
 8002512:	3301      	addls	r3, #1
 8002514:	802b      	strhls	r3, [r5, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002516:	2200      	movs	r2, #0
 8002518:	882b      	ldrh	r3, [r5, #0]
 800251a:	4611      	mov	r1, r2
 800251c:	4832      	ldr	r0, [pc, #200]	; (80025e8 <main+0x7a8>)
 800251e:	f006 f8e1 	bl	80086e4 <HAL_DAC_SetValue>
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.75))) * (float)4095 / (float)vddcalc);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <main+0x7a0>)
 8002524:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8002528:	681f      	ldr	r7, [r3, #0]
 800252a:	4638      	mov	r0, r7
 800252c:	f7fe fb3a 	bl	8000ba4 <__addsf3>
 8002530:	492e      	ldr	r1, [pc, #184]	; (80025ec <main+0x7ac>)
 8002532:	f7fe fc3f 	bl	8000db4 <__aeabi_fmul>
 8002536:	4601      	mov	r1, r0
 8002538:	482d      	ldr	r0, [pc, #180]	; (80025f0 <main+0x7b0>)
 800253a:	f7fe fb31 	bl	8000ba0 <__aeabi_fsub>
 800253e:	491f      	ldr	r1, [pc, #124]	; (80025bc <main+0x77c>)
 8002540:	f7fe fc38 	bl	8000db4 <__aeabi_fmul>
 8002544:	9905      	ldr	r1, [sp, #20]
 8002546:	f7fe fce9 	bl	8000f1c <__aeabi_fdiv>
	  if(temp <= 0){
 800254a:	4651      	mov	r1, sl
	  float temp = ( ((float)4.001400 - ((float)0.240000*((float)volt_set_main + (float)0.75))) * (float)4095 / (float)vddcalc);
 800254c:	4606      	mov	r6, r0
	  if(temp <= 0){
 800254e:	f7fe fdd9 	bl	8001104 <__aeabi_fcmple>
 8002552:	2800      	cmp	r0, #0
 8002554:	f040 8209 	bne.w	800296a <main+0xb2a>
	  else if(temp >= 4095){
 8002558:	4630      	mov	r0, r6
 800255a:	4918      	ldr	r1, [pc, #96]	; (80025bc <main+0x77c>)
 800255c:	f7fe fddc 	bl	8001118 <__aeabi_fcmpge>
 8002560:	2800      	cmp	r0, #0
 8002562:	f000 81fc 	beq.w	800295e <main+0xb1e>
 8002566:	e045      	b.n	80025f4 <main+0x7b4>
 8002568:	e0000000 	.word	0xe0000000
 800256c:	3f60624d 	.word	0x3f60624d
 8002570:	20000390 	.word	0x20000390
 8002574:	20000a6c 	.word	0x20000a6c
 8002578:	40400000 	.word	0x40400000
 800257c:	200009a8 	.word	0x200009a8
 8002580:	2000000c 	.word	0x2000000c
 8002584:	20000758 	.word	0x20000758
 8002588:	080114ec 	.word	0x080114ec
 800258c:	080114f8 	.word	0x080114f8
 8002590:	0801150c 	.word	0x0801150c
 8002594:	0801152c 	.word	0x0801152c
 8002598:	08011538 	.word	0x08011538
 800259c:	0801154c 	.word	0x0801154c
 80025a0:	200003ec 	.word	0x200003ec
 80025a4:	200003f0 	.word	0x200003f0
 80025a8:	08011560 	.word	0x08011560
 80025ac:	080116e0 	.word	0x080116e0
 80025b0:	080116dc 	.word	0x080116dc
 80025b4:	20000020 	.word	0x20000020
 80025b8:	200003dc 	.word	0x200003dc
 80025bc:	457ff000 	.word	0x457ff000
 80025c0:	41a00000 	.word	0x41a00000
 80025c4:	3e19999a 	.word	0x3e19999a
 80025c8:	3eb33333 	.word	0x3eb33333
 80025cc:	20000958 	.word	0x20000958
 80025d0:	20000750 	.word	0x20000750
 80025d4:	40a00000 	.word	0x40a00000
 80025d8:	200009a4 	.word	0x200009a4
 80025dc:	200003eb 	.word	0x200003eb
 80025e0:	20000a74 	.word	0x20000a74
 80025e4:	3fe00000 	.word	0x3fe00000
 80025e8:	2000044c 	.word	0x2000044c
 80025ec:	3e75c28f 	.word	0x3e75c28f
 80025f0:	40800b78 	.word	0x40800b78
		  v2 = 4095;
 80025f4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80025f8:	4a8e      	ldr	r2, [pc, #568]	; (8002834 <main+0x9f4>)
 80025fa:	8013      	strh	r3, [r2, #0]
	  if(volt_set_main > volt_set_main_old){
 80025fc:	4b8e      	ldr	r3, [pc, #568]	; (8002838 <main+0x9f8>)
 80025fe:	4638      	mov	r0, r7
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	f7fe fd93 	bl	800112c <__aeabi_fcmpgt>
 8002606:	4606      	mov	r6, r0
 8002608:	2800      	cmp	r0, #0
 800260a:	f040 81b2 	bne.w	8002972 <main+0xb32>
	  else if(volt_set_main < volt_set_main_old){
 800260e:	4b8a      	ldr	r3, [pc, #552]	; (8002838 <main+0x9f8>)
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002610:	4602      	mov	r2, r0
 8002612:	4601      	mov	r1, r0
	  else if(volt_set_main < volt_set_main_old){
 8002614:	681b      	ldr	r3, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002616:	4889      	ldr	r0, [pc, #548]	; (800283c <main+0x9fc>)
 8002618:	882b      	ldrh	r3, [r5, #0]
 800261a:	f006 f863 	bl	80086e4 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 800261e:	4b85      	ldr	r3, [pc, #532]	; (8002834 <main+0x9f4>)
 8002620:	4632      	mov	r2, r6
 8002622:	2110      	movs	r1, #16
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	4885      	ldr	r0, [pc, #532]	; (800283c <main+0x9fc>)
 8002628:	f006 f85c 	bl	80086e4 <HAL_DAC_SetValue>
	  if(chstat_main == 1 && ADC_OPAMP >= 5){
 800262c:	4b84      	ldr	r3, [pc, #528]	; (8002840 <main+0xa00>)
 800262e:	f993 3000 	ldrsb.w	r3, [r3]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d149      	bne.n	80026ca <main+0x88a>
 8002636:	4b83      	ldr	r3, [pc, #524]	; (8002844 <main+0xa04>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d945      	bls.n	80026ca <main+0x88a>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2140      	movs	r1, #64	; 0x40
 8002642:	4881      	ldr	r0, [pc, #516]	; (8002848 <main+0xa08>)
 8002644:	f006 fbc4 	bl	8008dd0 <HAL_GPIO_WritePin>
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <main+0xa0c>)
 800264a:	4981      	ldr	r1, [pc, #516]	; (8002850 <main+0xa10>)
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	f7fe fbb1 	bl	8000db4 <__aeabi_fmul>
 8002652:	4980      	ldr	r1, [pc, #512]	; (8002854 <main+0xa14>)
 8002654:	f7fe fbae 	bl	8000db4 <__aeabi_fmul>
 8002658:	497f      	ldr	r1, [pc, #508]	; (8002858 <main+0xa18>)
 800265a:	f7fe fbab 	bl	8000db4 <__aeabi_fmul>
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <main+0xa1c>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002660:	4606      	mov	r6, r0
	uint16_t vrefvalue = (uint16_t) *vrefptr;
 8002662:	681b      	ldr	r3, [r3, #0]
	float vddcalc = (float)3.0 * ((float)vrefvalue / (float)ADC_VREF);
 8002664:	8818      	ldrh	r0, [r3, #0]
 8002666:	f7fe fb4d 	bl	8000d04 <__aeabi_ui2f>
 800266a:	4b76      	ldr	r3, [pc, #472]	; (8002844 <main+0xa04>)
 800266c:	4607      	mov	r7, r0
 800266e:	8918      	ldrh	r0, [r3, #8]
 8002670:	f7fe fb48 	bl	8000d04 <__aeabi_ui2f>
 8002674:	4601      	mov	r1, r0
 8002676:	4638      	mov	r0, r7
 8002678:	f7fe fc50 	bl	8000f1c <__aeabi_fdiv>
 800267c:	4659      	mov	r1, fp
 800267e:	f7fe fb99 	bl	8000db4 <__aeabi_fmul>
 8002682:	4601      	mov	r1, r0
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 8002684:	4630      	mov	r0, r6
 8002686:	f7fe fc49 	bl	8000f1c <__aeabi_fdiv>
	if(amp >= 4095.0){
 800268a:	4973      	ldr	r1, [pc, #460]	; (8002858 <main+0xa18>)
	float amp = ( ((float)val * (float)0.15 * (float)20.0) * (float)4095 / (float)vddcalc);
 800268c:	4606      	mov	r6, r0
	if(amp >= 4095.0){
 800268e:	f7fe fd43 	bl	8001118 <__aeabi_fcmpge>
 8002692:	4607      	mov	r7, r0
 8002694:	b158      	cbz	r0, 80026ae <main+0x86e>
		ADC1->HTR = 4095;
 8002696:	f640 72ff 	movw	r2, #4095	; 0xfff
 800269a:	4b71      	ldr	r3, [pc, #452]	; (8002860 <main+0xa20>)
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
 800269e:	e607      	b.n	80022b0 <main+0x470>
			  if(v1 >= 1){
 80026a0:	882b      	ldrh	r3, [r5, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f43f af37 	beq.w	8002516 <main+0x6d6>
				  v1--;
 80026a8:	3b01      	subs	r3, #1
 80026aa:	802b      	strh	r3, [r5, #0]
 80026ac:	e733      	b.n	8002516 <main+0x6d6>
	else if (amp <= 0.0) {
 80026ae:	4651      	mov	r1, sl
 80026b0:	4630      	mov	r0, r6
 80026b2:	f7fe fd27 	bl	8001104 <__aeabi_fcmple>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	f040 8169 	bne.w	800298e <main+0xb4e>
		ADC1->HTR = (uint16_t) amp;
 80026bc:	4630      	mov	r0, r6
 80026be:	f7fe fd65 	bl	800118c <__aeabi_f2uiz>
 80026c2:	4a67      	ldr	r2, [pc, #412]	; (8002860 <main+0xa20>)
 80026c4:	b280      	uxth	r0, r0
 80026c6:	6290      	str	r0, [r2, #40]	; 0x28
 80026c8:	e5f2      	b.n	80022b0 <main+0x470>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80026ca:	2201      	movs	r2, #1
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	485e      	ldr	r0, [pc, #376]	; (8002848 <main+0xa08>)
 80026d0:	f006 fb7e 	bl	8008dd0 <HAL_GPIO_WritePin>
 80026d4:	e7b8      	b.n	8002648 <main+0x808>
		  if(lin_num > volt_set_main + margin){
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <main+0xa24>)
 80026d8:	4963      	ldr	r1, [pc, #396]	; (8002868 <main+0xa28>)
 80026da:	681e      	ldr	r6, [r3, #0]
 80026dc:	4630      	mov	r0, r6
 80026de:	f7fe fa61 	bl	8000ba4 <__addsf3>
 80026e2:	4639      	mov	r1, r7
 80026e4:	f7fe fd04 	bl	80010f0 <__aeabi_fcmplt>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d1d9      	bne.n	80026a0 <main+0x860>
		  else if(lin_num < volt_set_main - margin){
 80026ec:	495e      	ldr	r1, [pc, #376]	; (8002868 <main+0xa28>)
 80026ee:	4630      	mov	r0, r6
 80026f0:	f7fe fa56 	bl	8000ba0 <__aeabi_fsub>
 80026f4:	4639      	mov	r1, r7
 80026f6:	f7fe fd19 	bl	800112c <__aeabi_fcmpgt>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f43f af11 	beq.w	8002522 <main+0x6e2>
 8002700:	e702      	b.n	8002508 <main+0x6c8>
				snprintf((char*)MSG, 64, "%.2f, %.2f\n", lin_num_aux, lin_num);
 8002702:	4b5a      	ldr	r3, [pc, #360]	; (800286c <main+0xa2c>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f7fd fea7 	bl	8000458 <__aeabi_f2d>
 800270a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800270e:	4b58      	ldr	r3, [pc, #352]	; (8002870 <main+0xa30>)
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	f7fd fea1 	bl	8000458 <__aeabi_f2d>
 8002716:	4a57      	ldr	r2, [pc, #348]	; (8002874 <main+0xa34>)
 8002718:	e9cd 0100 	strd	r0, r1, [sp]
 800271c:	e610      	b.n	8002340 <main+0x500>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 800271e:	220b      	movs	r2, #11
 8002720:	4631      	mov	r1, r6
 8002722:	4855      	ldr	r0, [pc, #340]	; (8002878 <main+0xa38>)
 8002724:	f00b f988 	bl	800da38 <strncmp>
 8002728:	b128      	cbz	r0, 8002736 <main+0x8f6>
					(strncmp("OUTP:ONE?", (char*)notacircbuff[tempiter], strlen("OUTP:ONE?")) == 0)){
 800272a:	2209      	movs	r2, #9
 800272c:	4631      	mov	r1, r6
 800272e:	4853      	ldr	r0, [pc, #332]	; (800287c <main+0xa3c>)
 8002730:	f00b f982 	bl	800da38 <strncmp>
			else if ((strncmp("OUTPut:ONE?", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE?")) == 0) ||
 8002734:	b9f0      	cbnz	r0, 8002774 <main+0x934>
				snprintf((char*)MSG, 64, "%d\n", chstat_aux_rx);
 8002736:	4b52      	ldr	r3, [pc, #328]	; (8002880 <main+0xa40>)
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	f993 3000 	ldrsb.w	r3, [r3]
 800273e:	4a51      	ldr	r2, [pc, #324]	; (8002884 <main+0xa44>)
 8002740:	4851      	ldr	r0, [pc, #324]	; (8002888 <main+0xa48>)
 8002742:	f00b f945 	bl	800d9d0 <sniprintf>
				CDC_Transmit_FS(MSG, 64);
 8002746:	e5ff      	b.n	8002348 <main+0x508>
				snprintf((char*)MSG, 64, "ERROR: INVALID COMMAND\n");
 8002748:	4f4f      	ldr	r7, [pc, #316]	; (8002888 <main+0xa48>)
 800274a:	f8df c140 	ldr.w	ip, [pc, #320]	; 800288c <main+0xa4c>
 800274e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002752:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002754:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002758:	e887 0003 	stmia.w	r7, {r0, r1}
				CDC_Transmit_FS(MSG, 64);
 800275c:	2140      	movs	r1, #64	; 0x40
 800275e:	f1a7 0010 	sub.w	r0, r7, #16
 8002762:	f00a fa73 	bl	800cc4c <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	2100      	movs	r1, #0
 800276a:	f1a7 0010 	sub.w	r0, r7, #16
 800276e:	f00a fcc7 	bl	800d100 <memset>
 8002772:	e5fe      	b.n	8002372 <main+0x532>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 8002774:	220b      	movs	r2, #11
 8002776:	4631      	mov	r1, r6
 8002778:	4845      	ldr	r0, [pc, #276]	; (8002890 <main+0xa50>)
 800277a:	f00b f95d 	bl	800da38 <strncmp>
 800277e:	b128      	cbz	r0, 800278c <main+0x94c>
					(strncmp("OUTP:TWO?", (char*)notacircbuff[tempiter], strlen("OUTP:TWO?")) == 0)){
 8002780:	2209      	movs	r2, #9
 8002782:	4631      	mov	r1, r6
 8002784:	4843      	ldr	r0, [pc, #268]	; (8002894 <main+0xa54>)
 8002786:	f00b f957 	bl	800da38 <strncmp>
			else if ((strncmp("OUTPut:TWO?", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO?")) == 0) ||
 800278a:	b908      	cbnz	r0, 8002790 <main+0x950>
				snprintf((char*)MSG, 64, "%d\n", chstat_main);
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <main+0xa00>)
 800278e:	e7d3      	b.n	8002738 <main+0x8f8>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 8002790:	2210      	movs	r2, #16
 8002792:	4631      	mov	r1, r6
 8002794:	4840      	ldr	r0, [pc, #256]	; (8002898 <main+0xa58>)
 8002796:	f00b f94f 	bl	800da38 <strncmp>
 800279a:	b128      	cbz	r0, 80027a8 <main+0x968>
					(strncmp("OUTP:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:START")) == 0)){
 800279c:	220e      	movs	r2, #14
 800279e:	4631      	mov	r1, r6
 80027a0:	483e      	ldr	r0, [pc, #248]	; (800289c <main+0xa5c>)
 80027a2:	f00b f949 	bl	800da38 <strncmp>
			else if ((strncmp("OUTPUT:ONE:START", (char*)notacircbuff[tempiter], strlen("OUTPUT:ONE:START")) == 0) ||
 80027a6:	b928      	cbnz	r0, 80027b4 <main+0x974>
				chstat_aux_tx = 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	4a3d      	ldr	r2, [pc, #244]	; (80028a0 <main+0xa60>)
 80027ac:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027ae:	230a      	movs	r3, #10
 80027b0:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, 64);
 80027b2:	e5c9      	b.n	8002348 <main+0x508>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027b4:	2210      	movs	r2, #16
 80027b6:	4631      	mov	r1, r6
 80027b8:	483a      	ldr	r0, [pc, #232]	; (80028a4 <main+0xa64>)
 80027ba:	f00b f93d 	bl	800da38 <strncmp>
 80027be:	b128      	cbz	r0, 80027cc <main+0x98c>
					(strncmp("OUTP:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:START")) == 0)){
 80027c0:	220e      	movs	r2, #14
 80027c2:	4631      	mov	r1, r6
 80027c4:	4838      	ldr	r0, [pc, #224]	; (80028a8 <main+0xa68>)
 80027c6:	f00b f937 	bl	800da38 <strncmp>
			else if ((strncmp("OUTPut:TWO:START", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:START")) == 0) ||
 80027ca:	b928      	cbnz	r0, 80027d8 <main+0x998>
				chstat_main = 1;
 80027cc:	2301      	movs	r3, #1
 80027ce:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <main+0xa00>)
 80027d0:	7013      	strb	r3, [r2, #0]
				snprintf((char*)MSG, 64, "\n");
 80027d2:	230a      	movs	r3, #10
 80027d4:	8023      	strh	r3, [r4, #0]
				CDC_Transmit_FS(MSG, 64);
 80027d6:	e5b7      	b.n	8002348 <main+0x508>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027d8:	220f      	movs	r2, #15
 80027da:	4631      	mov	r1, r6
 80027dc:	4833      	ldr	r0, [pc, #204]	; (80028ac <main+0xa6c>)
 80027de:	f00b f92b 	bl	800da38 <strncmp>
 80027e2:	b128      	cbz	r0, 80027f0 <main+0x9b0>
					(strncmp("OUTP:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:ONE:STOP")) == 0)){
 80027e4:	220d      	movs	r2, #13
 80027e6:	4631      	mov	r1, r6
 80027e8:	4831      	ldr	r0, [pc, #196]	; (80028b0 <main+0xa70>)
 80027ea:	f00b f925 	bl	800da38 <strncmp>
			else if ((strncmp("OUTPut:ONE:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:ONE:STOP")) == 0) ||
 80027ee:	b970      	cbnz	r0, 800280e <main+0x9ce>
				snprintf((char*)MSG, 64, "\n");
 80027f0:	230a      	movs	r3, #10
				chstat_aux_tx = 0;
 80027f2:	2700      	movs	r7, #0
				snprintf((char*)MSG, 64, "\n");
 80027f4:	8023      	strh	r3, [r4, #0]
				chstat_aux_tx = 0;
 80027f6:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <main+0xa60>)
				CDC_Transmit_FS(MSG, 64);
 80027f8:	2140      	movs	r1, #64	; 0x40
				chstat_main = 0;
 80027fa:	701f      	strb	r7, [r3, #0]
				CDC_Transmit_FS(MSG, 64);
 80027fc:	4822      	ldr	r0, [pc, #136]	; (8002888 <main+0xa48>)
 80027fe:	f00a fa25 	bl	800cc4c <CDC_Transmit_FS>
				memset(MSG,'\0', 64);
 8002802:	4639      	mov	r1, r7
 8002804:	2240      	movs	r2, #64	; 0x40
 8002806:	4820      	ldr	r0, [pc, #128]	; (8002888 <main+0xa48>)
 8002808:	f00a fc7a 	bl	800d100 <memset>
 800280c:	e5a5      	b.n	800235a <main+0x51a>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 800280e:	220f      	movs	r2, #15
 8002810:	4631      	mov	r1, r6
 8002812:	4828      	ldr	r0, [pc, #160]	; (80028b4 <main+0xa74>)
 8002814:	f00b f910 	bl	800da38 <strncmp>
 8002818:	b130      	cbz	r0, 8002828 <main+0x9e8>
					(strncmp("OUTP:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTP:TWO:STOP")) == 0)){
 800281a:	220d      	movs	r2, #13
 800281c:	4631      	mov	r1, r6
 800281e:	4826      	ldr	r0, [pc, #152]	; (80028b8 <main+0xa78>)
 8002820:	f00b f90a 	bl	800da38 <strncmp>
			else if ((strncmp("OUTPut:TWO:STOP", (char*)notacircbuff[tempiter], strlen("OUTPut:TWO:STOP")) == 0) ||
 8002824:	2800      	cmp	r0, #0
 8002826:	d149      	bne.n	80028bc <main+0xa7c>
				snprintf((char*)MSG, 64, "\n");
 8002828:	230a      	movs	r3, #10
				chstat_main = 0;
 800282a:	2700      	movs	r7, #0
				snprintf((char*)MSG, 64, "\n");
 800282c:	8023      	strh	r3, [r4, #0]
				chstat_main = 0;
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <main+0xa00>)
 8002830:	e7e2      	b.n	80027f8 <main+0x9b8>
 8002832:	bf00      	nop
 8002834:	20000a6e 	.word	0x20000a6e
 8002838:	20000a78 	.word	0x20000a78
 800283c:	2000044c 	.word	0x2000044c
 8002840:	200003eb 	.word	0x200003eb
 8002844:	200003dc 	.word	0x200003dc
 8002848:	40020000 	.word	0x40020000
 800284c:	20000004 	.word	0x20000004
 8002850:	3e19999a 	.word	0x3e19999a
 8002854:	41a00000 	.word	0x41a00000
 8002858:	457ff000 	.word	0x457ff000
 800285c:	20000020 	.word	0x20000020
 8002860:	40012400 	.word	0x40012400
 8002864:	20000a74 	.word	0x20000a74
 8002868:	3b03126f 	.word	0x3b03126f
 800286c:	20000750 	.word	0x20000750
 8002870:	20000754 	.word	0x20000754
 8002874:	08011520 	.word	0x08011520
 8002878:	0801156c 	.word	0x0801156c
 800287c:	08011578 	.word	0x08011578
 8002880:	200003e9 	.word	0x200003e9
 8002884:	08011584 	.word	0x08011584
 8002888:	20000390 	.word	0x20000390
 800288c:	080116e8 	.word	0x080116e8
 8002890:	08011588 	.word	0x08011588
 8002894:	08011594 	.word	0x08011594
 8002898:	080115a0 	.word	0x080115a0
 800289c:	080115b4 	.word	0x080115b4
 80028a0:	200003ea 	.word	0x200003ea
 80028a4:	080115c4 	.word	0x080115c4
 80028a8:	080115d8 	.word	0x080115d8
 80028ac:	080115e8 	.word	0x080115e8
 80028b0:	080115f8 	.word	0x080115f8
 80028b4:	08011608 	.word	0x08011608
 80028b8:	08011618 	.word	0x08011618
			else if ((strncmp("VOLTage:ONE:", (char*)notacircbuff[tempiter], strlen("VOLTage:ONE:")) == 0)){
 80028bc:	220c      	movs	r2, #12
 80028be:	4631      	mov	r1, r6
 80028c0:	48ad      	ldr	r0, [pc, #692]	; (8002b78 <main+0xd38>)
 80028c2:	f00b f8b9 	bl	800da38 <strncmp>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	f000 80eb 	beq.w	8002aa2 <main+0xc62>
			else if ((strncmp("VOLT:ONE:", (char*)notacircbuff[tempiter], strlen("VOLT:ONE:")) == 0)){
 80028cc:	2209      	movs	r2, #9
 80028ce:	4631      	mov	r1, r6
 80028d0:	48aa      	ldr	r0, [pc, #680]	; (8002b7c <main+0xd3c>)
 80028d2:	f00b f8b1 	bl	800da38 <strncmp>
 80028d6:	4607      	mov	r7, r0
 80028d8:	2800      	cmp	r0, #0
 80028da:	f000 80b4 	beq.w	8002a46 <main+0xc06>
			else if ((strncmp("VOLTage:TWO:", (char*)notacircbuff[tempiter], strlen("VOLTage:TWO:")) == 0)){
 80028de:	220c      	movs	r2, #12
 80028e0:	4631      	mov	r1, r6
 80028e2:	48a7      	ldr	r0, [pc, #668]	; (8002b80 <main+0xd40>)
 80028e4:	f00b f8a8 	bl	800da38 <strncmp>
 80028e8:	4607      	mov	r7, r0
 80028ea:	2800      	cmp	r0, #0
 80028ec:	f000 80a8 	beq.w	8002a40 <main+0xc00>
			else if ((strncmp("VOLT:TWO:", (char*)notacircbuff[tempiter], strlen("VOLT:TWO:")) == 0)){
 80028f0:	2209      	movs	r2, #9
 80028f2:	4631      	mov	r1, r6
 80028f4:	48a3      	ldr	r0, [pc, #652]	; (8002b84 <main+0xd44>)
 80028f6:	f00b f89f 	bl	800da38 <strncmp>
 80028fa:	4607      	mov	r7, r0
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d06e      	beq.n	80029de <main+0xb9e>
			else if ((strncmp("CURRent:ONE:", (char*)notacircbuff[tempiter], strlen("CURRent:ONE:")) == 0)){
 8002900:	220c      	movs	r2, #12
 8002902:	4631      	mov	r1, r6
 8002904:	48a0      	ldr	r0, [pc, #640]	; (8002b88 <main+0xd48>)
 8002906:	f00b f897 	bl	800da38 <strncmp>
 800290a:	4607      	mov	r7, r0
 800290c:	2800      	cmp	r0, #0
 800290e:	f000 8115 	beq.w	8002b3c <main+0xcfc>
			else if ((strncmp("CURR:ONE:", (char*)notacircbuff[tempiter], strlen("CURR:ONE:")) == 0)){
 8002912:	2209      	movs	r2, #9
 8002914:	4631      	mov	r1, r6
 8002916:	489d      	ldr	r0, [pc, #628]	; (8002b8c <main+0xd4c>)
 8002918:	f00b f88e 	bl	800da38 <strncmp>
 800291c:	4607      	mov	r7, r0
 800291e:	2800      	cmp	r0, #0
 8002920:	f000 80db 	beq.w	8002ada <main+0xc9a>
			else if ((strncmp("CURRent:TWO:", (char*)notacircbuff[tempiter], strlen("CURRent:TWO:")) == 0)){
 8002924:	220c      	movs	r2, #12
 8002926:	4631      	mov	r1, r6
 8002928:	4899      	ldr	r0, [pc, #612]	; (8002b90 <main+0xd50>)
 800292a:	f00b f885 	bl	800da38 <strncmp>
 800292e:	4607      	mov	r7, r0
 8002930:	2800      	cmp	r0, #0
 8002932:	f000 8106 	beq.w	8002b42 <main+0xd02>
			else if ((strncmp("CURR:TWO:", (char*)notacircbuff[tempiter], strlen("CURR:TWO:")) == 0)){
 8002936:	2209      	movs	r2, #9
 8002938:	4631      	mov	r1, r6
 800293a:	4896      	ldr	r0, [pc, #600]	; (8002b94 <main+0xd54>)
 800293c:	f00b f87c 	bl	800da38 <strncmp>
 8002940:	4607      	mov	r7, r0
 8002942:	b338      	cbz	r0, 8002994 <main+0xb54>
			else if ((strncmp("*IDN?", (char*)notacircbuff[tempiter], strlen("*IDN?")) == 0)){
 8002944:	2205      	movs	r2, #5
 8002946:	4631      	mov	r1, r6
 8002948:	4893      	ldr	r0, [pc, #588]	; (8002b98 <main+0xd58>)
 800294a:	f00b f875 	bl	800da38 <strncmp>
 800294e:	2800      	cmp	r0, #0
 8002950:	f47f ad03 	bne.w	800235a <main+0x51a>
				CDC_Transmit_FS((uint8_t*)"493 Lab Power Supply\n", strlen("493 Lab Power Supply\n"));
 8002954:	2115      	movs	r1, #21
 8002956:	4891      	ldr	r0, [pc, #580]	; (8002b9c <main+0xd5c>)
 8002958:	f00a f978 	bl	800cc4c <CDC_Transmit_FS>
 800295c:	e4fd      	b.n	800235a <main+0x51a>
		  v2 = (uint16_t)temp;
 800295e:	4630      	mov	r0, r6
 8002960:	f7fe fc14 	bl	800118c <__aeabi_f2uiz>
 8002964:	4b8e      	ldr	r3, [pc, #568]	; (8002ba0 <main+0xd60>)
 8002966:	8018      	strh	r0, [r3, #0]
 8002968:	e648      	b.n	80025fc <main+0x7bc>
		  v2 = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	4a8c      	ldr	r2, [pc, #560]	; (8002ba0 <main+0xd60>)
 800296e:	8013      	strh	r3, [r2, #0]
 8002970:	e644      	b.n	80025fc <main+0x7bc>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v2);
 8002972:	4b8b      	ldr	r3, [pc, #556]	; (8002ba0 <main+0xd60>)
 8002974:	2200      	movs	r2, #0
 8002976:	2110      	movs	r1, #16
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	488a      	ldr	r0, [pc, #552]	; (8002ba4 <main+0xd64>)
 800297c:	f005 feb2 	bl	80086e4 <HAL_DAC_SetValue>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002980:	2200      	movs	r2, #0
 8002982:	882b      	ldrh	r3, [r5, #0]
 8002984:	4611      	mov	r1, r2
 8002986:	4887      	ldr	r0, [pc, #540]	; (8002ba4 <main+0xd64>)
 8002988:	f005 feac 	bl	80086e4 <HAL_DAC_SetValue>
 800298c:	e64e      	b.n	800262c <main+0x7ec>
		ADC1->HTR = 0;
 800298e:	4b86      	ldr	r3, [pc, #536]	; (8002ba8 <main+0xd68>)
 8002990:	629f      	str	r7, [r3, #40]	; 0x28
 8002992:	e48d      	b.n	80022b0 <main+0x470>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002994:	f106 0809 	add.w	r8, r6, #9
 8002998:	4640      	mov	r0, r8
 800299a:	f00a fb83 	bl	800d0a4 <atof>
 800299e:	2200      	movs	r2, #0
 80029a0:	2300      	movs	r3, #0
 80029a2:	f7fe f837 	bl	8000a14 <__aeabi_dcmpge>
 80029a6:	b150      	cbz	r0, 80029be <main+0xb7e>
 80029a8:	4640      	mov	r0, r8
 80029aa:	f00a fb7b 	bl	800d0a4 <atof>
 80029ae:	a370      	add	r3, pc, #448	; (adr r3, 8002b70 <main+0xd30>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fe f824 	bl	8000a00 <__aeabi_dcmple>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f040 80c5 	bne.w	8002b48 <main+0xd08>
					snprintf((char*)MSG, 64, "ERROR: INVALID NUMBER\n");
 80029be:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8002bac <main+0xd6c>
 80029c2:	4f7b      	ldr	r7, [pc, #492]	; (8002bb0 <main+0xd70>)
 80029c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80029c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80029ca:	e897 0003 	ldmia.w	r7, {r0, r1}
 80029ce:	f8ac 1004 	strh.w	r1, [ip, #4]
 80029d2:	0c09      	lsrs	r1, r1, #16
 80029d4:	f8cc 0000 	str.w	r0, [ip]
 80029d8:	f88c 1006 	strb.w	r1, [ip, #6]
				CDC_Transmit_FS(MSG, 64);
 80029dc:	e4b4      	b.n	8002348 <main+0x508>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:TWO:")) <= 12.00)){
 80029de:	f106 0809 	add.w	r8, r6, #9
 80029e2:	4640      	mov	r0, r8
 80029e4:	f00a fb5e 	bl	800d0a4 <atof>
 80029e8:	2200      	movs	r2, #0
 80029ea:	2300      	movs	r3, #0
 80029ec:	f7fe f812 	bl	8000a14 <__aeabi_dcmpge>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d0e4      	beq.n	80029be <main+0xb7e>
 80029f4:	4640      	mov	r0, r8
 80029f6:	f00a fb55 	bl	800d0a4 <atof>
 80029fa:	2200      	movs	r2, #0
 80029fc:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <main+0xd74>)
 80029fe:	f7fd ffff 	bl	8000a00 <__aeabi_dcmple>
 8002a02:	2800      	cmp	r0, #0
 8002a04:	d0db      	beq.n	80029be <main+0xb7e>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a06:	4640      	mov	r0, r8
 8002a08:	f00a fb4c 	bl	800d0a4 <atof>
					uint8_t tempbuff[8] = {0};
 8002a0c:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a10:	f7fe f872 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002a14:	f7fd fd20 	bl	8000458 <__aeabi_f2d>
					volt_set_main_old = volt_set_main;
 8002a18:	4f67      	ldr	r7, [pc, #412]	; (8002bb8 <main+0xd78>)
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8002a1e:	4a67      	ldr	r2, [pc, #412]	; (8002bbc <main+0xd7c>)
 8002a20:	2108      	movs	r1, #8
 8002a22:	a80e      	add	r0, sp, #56	; 0x38
 8002a24:	f00a ffd4 	bl	800d9d0 <sniprintf>
					volt_set_main_old = volt_set_main;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4a65      	ldr	r2, [pc, #404]	; (8002bc0 <main+0xd80>)
					amp_set_main_old = amp_set_main;
 8002a2c:	6013      	str	r3, [r2, #0]
					amp_set_main = (float)atof((char*)tempbuff);
 8002a2e:	a80e      	add	r0, sp, #56	; 0x38
 8002a30:	f00a fb38 	bl	800d0a4 <atof>
 8002a34:	f7fe f860 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)MSG, 64, "\n");
 8002a38:	230a      	movs	r3, #10
					amp_set_main = (float)atof((char*)tempbuff);
 8002a3a:	6038      	str	r0, [r7, #0]
					snprintf((char*)MSG, 64, "\n");
 8002a3c:	8023      	strh	r3, [r4, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:TWO:")) <= 0.80)){
 8002a3e:	e483      	b.n	8002348 <main+0x508>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:TWO:")) <= 12.00)){
 8002a40:	f106 080c 	add.w	r8, r6, #12
 8002a44:	e7cd      	b.n	80029e2 <main+0xba2>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002a46:	f106 0809 	add.w	r8, r6, #9
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	f00a fb2a 	bl	800d0a4 <atof>
 8002a50:	2200      	movs	r2, #0
 8002a52:	2300      	movs	r3, #0
 8002a54:	f7fd ffde 	bl	8000a14 <__aeabi_dcmpge>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d0b0      	beq.n	80029be <main+0xb7e>
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f00a fb21 	bl	800d0a4 <atof>
 8002a62:	2200      	movs	r2, #0
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <main+0xd74>)
 8002a66:	f7fd ffcb 	bl	8000a00 <__aeabi_dcmple>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d0a7      	beq.n	80029be <main+0xb7e>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a6e:	4640      	mov	r0, r8
 8002a70:	f00a fb18 	bl	800d0a4 <atof>
					uint8_t tempbuff[8] = {0};
 8002a74:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002a78:	f7fe f83e 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002a7c:	f7fd fcec 	bl	8000458 <__aeabi_f2d>
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <main+0xd7c>)
 8002a82:	e9cd 0100 	strd	r0, r1, [sp]
 8002a86:	2108      	movs	r1, #8
 8002a88:	a80e      	add	r0, sp, #56	; 0x38
 8002a8a:	f00a ffa1 	bl	800d9d0 <sniprintf>
					volt_set_aux = (float)atof((char*)tempbuff);
 8002a8e:	a80e      	add	r0, sp, #56	; 0x38
 8002a90:	f00a fb08 	bl	800d0a4 <atof>
 8002a94:	f7fe f830 	bl	8000af8 <__aeabi_d2f>
 8002a98:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <main+0xd84>)
 8002a9a:	6018      	str	r0, [r3, #0]
					snprintf((char*)MSG, 64, "\n");
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	8023      	strh	r3, [r4, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLT:ONE:")) <= 12.00)){
 8002aa0:	e452      	b.n	8002348 <main+0x508>
				if ((atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("VOLTage:ONE:")) <= 12.00)){
 8002aa2:	f106 070c 	add.w	r7, r6, #12
 8002aa6:	4638      	mov	r0, r7
 8002aa8:	f00a fafc 	bl	800d0a4 <atof>
 8002aac:	2200      	movs	r2, #0
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f7fd ffb0 	bl	8000a14 <__aeabi_dcmpge>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d082      	beq.n	80029be <main+0xb7e>
 8002ab8:	4638      	mov	r0, r7
 8002aba:	f00a faf3 	bl	800d0a4 <atof>
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4b3c      	ldr	r3, [pc, #240]	; (8002bb4 <main+0xd74>)
 8002ac2:	f7fd ff9d 	bl	8000a00 <__aeabi_dcmple>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	f43f af79 	beq.w	80029be <main+0xb7e>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 12);
 8002acc:	4638      	mov	r0, r7
 8002ace:	f00a fae9 	bl	800d0a4 <atof>
					uint8_t tempbuff[8] = {0};
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
					snprintf((char*)tempbuff, 8, "%.2f", temp);
 8002ad8:	e7ce      	b.n	8002a78 <main+0xc38>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002ada:	f106 0809 	add.w	r8, r6, #9
 8002ade:	4640      	mov	r0, r8
 8002ae0:	f00a fae0 	bl	800d0a4 <atof>
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f7fd ff94 	bl	8000a14 <__aeabi_dcmpge>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	f43f af66 	beq.w	80029be <main+0xb7e>
 8002af2:	4640      	mov	r0, r8
 8002af4:	f00a fad6 	bl	800d0a4 <atof>
 8002af8:	a31d      	add	r3, pc, #116	; (adr r3, 8002b70 <main+0xd30>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f7fd ff7f 	bl	8000a00 <__aeabi_dcmple>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	f43f af5b 	beq.w	80029be <main+0xb7e>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b08:	4640      	mov	r0, r8
 8002b0a:	f00a facb 	bl	800d0a4 <atof>
					uint8_t tempbuff[8] = {0};
 8002b0e:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b12:	f7fd fff1 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b16:	f7fd fc9f 	bl	8000458 <__aeabi_f2d>
 8002b1a:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <main+0xd88>)
 8002b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8002b20:	2108      	movs	r1, #8
 8002b22:	a80e      	add	r0, sp, #56	; 0x38
 8002b24:	f00a ff54 	bl	800d9d0 <sniprintf>
					amp_set_aux = (float)atof((char*)tempbuff);
 8002b28:	a80e      	add	r0, sp, #56	; 0x38
 8002b2a:	f00a fabb 	bl	800d0a4 <atof>
 8002b2e:	f7fd ffe3 	bl	8000af8 <__aeabi_d2f>
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <main+0xd8c>)
 8002b34:	6018      	str	r0, [r3, #0]
					snprintf((char*)MSG, 64, "\n");
 8002b36:	230a      	movs	r3, #10
 8002b38:	8023      	strh	r3, [r4, #0]
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURR:ONE:")) <= 0.80)){
 8002b3a:	e405      	b.n	8002348 <main+0x508>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:ONE:")) <= 0.80)){
 8002b3c:	f106 080c 	add.w	r8, r6, #12
 8002b40:	e7cd      	b.n	8002ade <main+0xc9e>
				if ((atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) >= 0.00) && (atof((char*)notacircbuff[tempiter] + strlen("CURRent:TWO:")) <= 0.80)){
 8002b42:	f106 080c 	add.w	r8, r6, #12
 8002b46:	e727      	b.n	8002998 <main+0xb58>
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b48:	4640      	mov	r0, r8
 8002b4a:	f00a faab 	bl	800d0a4 <atof>
					uint8_t tempbuff[8] = {0};
 8002b4e:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
					float temp = (float)atof((char*)notacircbuff[tempiter] + 9);
 8002b52:	f7fd ffd1 	bl	8000af8 <__aeabi_d2f>
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b56:	f7fd fc7f 	bl	8000458 <__aeabi_f2d>
					amp_set_main_old = amp_set_main;
 8002b5a:	4f1d      	ldr	r7, [pc, #116]	; (8002bd0 <main+0xd90>)
					snprintf((char*)tempbuff, 8, "%.3f", temp);
 8002b5c:	e9cd 0100 	strd	r0, r1, [sp]
 8002b60:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <main+0xd88>)
 8002b62:	2108      	movs	r1, #8
 8002b64:	a80e      	add	r0, sp, #56	; 0x38
 8002b66:	f00a ff33 	bl	800d9d0 <sniprintf>
					amp_set_main_old = amp_set_main;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <main+0xd94>)
 8002b6e:	e75d      	b.n	8002a2c <main+0xbec>
 8002b70:	9999999a 	.word	0x9999999a
 8002b74:	3fe99999 	.word	0x3fe99999
 8002b78:	08011628 	.word	0x08011628
 8002b7c:	08011658 	.word	0x08011658
 8002b80:	08011664 	.word	0x08011664
 8002b84:	08011674 	.word	0x08011674
 8002b88:	08011680 	.word	0x08011680
 8002b8c:	08011698 	.word	0x08011698
 8002b90:	080116a4 	.word	0x080116a4
 8002b94:	080116b4 	.word	0x080116b4
 8002b98:	080116c0 	.word	0x080116c0
 8002b9c:	080116c8 	.word	0x080116c8
 8002ba0:	20000a6e 	.word	0x20000a6e
 8002ba4:	2000044c 	.word	0x2000044c
 8002ba8:	40012400 	.word	0x40012400
 8002bac:	20000390 	.word	0x20000390
 8002bb0:	08011640 	.word	0x08011640
 8002bb4:	40280000 	.word	0x40280000
 8002bb8:	20000a74 	.word	0x20000a74
 8002bbc:	08011638 	.word	0x08011638
 8002bc0:	20000a78 	.word	0x20000a78
 8002bc4:	20000a70 	.word	0x20000a70
 8002bc8:	08011690 	.word	0x08011690
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	20000008 	.word	0x20000008

08002bd8 <lcd_psu_init>:
void lcd_psu_init(void){
 8002bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bdc:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002bde:	49c7      	ldr	r1, [pc, #796]	; (8002efc <lcd_psu_init+0x324>)
void lcd_psu_init(void){
 8002be0:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be2:	48c7      	ldr	r0, [pc, #796]	; (8002f00 <lcd_psu_init+0x328>)
 8002be4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002be6:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002be8:	aa03      	add	r2, sp, #12
 8002bea:	214e      	movs	r1, #78	; 0x4e
 8002bec:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bee:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bf0:	f006 f9d0 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002bf4:	2356      	movs	r3, #86	; 0x56
 8002bf6:	4dc3      	ldr	r5, [pc, #780]	; (8002f04 <lcd_psu_init+0x32c>)
	data_l = ((data<<4)&0xf0);
 8002bf8:	011a      	lsls	r2, r3, #4
 8002bfa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c00:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c04:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c08:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c0c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c10:	2304      	movs	r3, #4
 8002c12:	214e      	movs	r1, #78	; 0x4e
 8002c14:	4638      	mov	r0, r7
 8002c16:	aa03      	add	r2, sp, #12
 8002c18:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c1a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c1e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c22:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c26:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c2a:	f006 f9b3 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c2e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e0      	bne.n	8002bf8 <lcd_psu_init+0x20>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c36:	49b4      	ldr	r1, [pc, #720]	; (8002f08 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c38:	2304      	movs	r3, #4
 8002c3a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c3c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c3e:	48b0      	ldr	r0, [pc, #704]	; (8002f00 <lcd_psu_init+0x328>)
 8002c40:	214e      	movs	r1, #78	; 0x4e
 8002c42:	aa03      	add	r2, sp, #12
 8002c44:	f006 f9a6 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002c48:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002c4a:	2356      	movs	r3, #86	; 0x56
 8002c4c:	4daf      	ldr	r5, [pc, #700]	; (8002f0c <lcd_psu_init+0x334>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c4e:	4fac      	ldr	r7, [pc, #688]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002c50:	011a      	lsls	r2, r3, #4
 8002c52:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c58:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c5c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c60:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c64:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c68:	2304      	movs	r3, #4
 8002c6a:	214e      	movs	r1, #78	; 0x4e
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	aa03      	add	r2, sp, #12
 8002c70:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c72:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c76:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c7a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c7e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c82:	f006 f987 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002c86:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e0      	bne.n	8002c50 <lcd_psu_init+0x78>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c8e:	49a0      	ldr	r1, [pc, #640]	; (8002f10 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c90:	2304      	movs	r3, #4
 8002c92:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c94:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c96:	489a      	ldr	r0, [pc, #616]	; (8002f00 <lcd_psu_init+0x328>)
 8002c98:	214e      	movs	r1, #78	; 0x4e
 8002c9a:	aa03      	add	r2, sp, #12
 8002c9c:	f006 f97a 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002ca0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002ca2:	233a      	movs	r3, #58	; 0x3a
 8002ca4:	4d9b      	ldr	r5, [pc, #620]	; (8002f14 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ca6:	4f96      	ldr	r7, [pc, #600]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002ca8:	011a      	lsls	r2, r3, #4
 8002caa:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cb0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cb4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cb8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cbc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	214e      	movs	r1, #78	; 0x4e
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	aa03      	add	r2, sp, #12
 8002cc8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cca:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cce:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cd2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cd6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cda:	f006 f95b 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002cde:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e0      	bne.n	8002ca8 <lcd_psu_init+0xd0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ce6:	498c      	ldr	r1, [pc, #560]	; (8002f18 <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce8:	2304      	movs	r3, #4
 8002cea:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002cec:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cee:	4884      	ldr	r0, [pc, #528]	; (8002f00 <lcd_psu_init+0x328>)
 8002cf0:	214e      	movs	r1, #78	; 0x4e
 8002cf2:	aa03      	add	r2, sp, #12
 8002cf4:	f006 f94e 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cf8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002cfa:	2341      	movs	r3, #65	; 0x41
 8002cfc:	4d87      	ldr	r5, [pc, #540]	; (8002f1c <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cfe:	4f80      	ldr	r7, [pc, #512]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002d00:	011a      	lsls	r2, r3, #4
 8002d02:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d08:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d0c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d10:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d14:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d18:	2304      	movs	r3, #4
 8002d1a:	214e      	movs	r1, #78	; 0x4e
 8002d1c:	4638      	mov	r0, r7
 8002d1e:	aa03      	add	r2, sp, #12
 8002d20:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d22:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d26:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d2a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d2e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d32:	f006 f92f 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d36:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e0      	bne.n	8002d00 <lcd_psu_init+0x128>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d3e:	4972      	ldr	r1, [pc, #456]	; (8002f08 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d40:	2304      	movs	r3, #4
 8002d42:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d44:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d46:	486e      	ldr	r0, [pc, #440]	; (8002f00 <lcd_psu_init+0x328>)
 8002d48:	214e      	movs	r1, #78	; 0x4e
 8002d4a:	aa03      	add	r2, sp, #12
 8002d4c:	f006 f922 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002d50:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002d52:	2341      	movs	r3, #65	; 0x41
 8002d54:	4d72      	ldr	r5, [pc, #456]	; (8002f20 <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d56:	4f6a      	ldr	r7, [pc, #424]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002d58:	011a      	lsls	r2, r3, #4
 8002d5a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d60:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d64:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d68:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d6c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d70:	2304      	movs	r3, #4
 8002d72:	214e      	movs	r1, #78	; 0x4e
 8002d74:	4638      	mov	r0, r7
 8002d76:	aa03      	add	r2, sp, #12
 8002d78:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d7a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d7e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d82:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002d86:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d8a:	f006 f903 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d8e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e0      	bne.n	8002d58 <lcd_psu_init+0x180>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d96:	495e      	ldr	r1, [pc, #376]	; (8002f10 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d98:	2304      	movs	r3, #4
 8002d9a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d9c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d9e:	4858      	ldr	r0, [pc, #352]	; (8002f00 <lcd_psu_init+0x328>)
 8002da0:	214e      	movs	r1, #78	; 0x4e
 8002da2:	aa03      	add	r2, sp, #12
 8002da4:	f006 f8f6 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002da8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002daa:	233a      	movs	r3, #58	; 0x3a
 8002dac:	4d5d      	ldr	r5, [pc, #372]	; (8002f24 <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dae:	4f54      	ldr	r7, [pc, #336]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002db0:	011a      	lsls	r2, r3, #4
 8002db2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002db8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dbc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dc0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dc4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002dc8:	2304      	movs	r3, #4
 8002dca:	214e      	movs	r1, #78	; 0x4e
 8002dcc:	4638      	mov	r0, r7
 8002dce:	aa03      	add	r2, sp, #12
 8002dd0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002dd2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002dd6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002dda:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dde:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002de2:	f006 f8d7 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002de6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e0      	bne.n	8002db0 <lcd_psu_init+0x1d8>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dee:	494e      	ldr	r1, [pc, #312]	; (8002f28 <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df0:	2304      	movs	r3, #4
 8002df2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002df4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002df6:	4842      	ldr	r0, [pc, #264]	; (8002f00 <lcd_psu_init+0x328>)
 8002df8:	214e      	movs	r1, #78	; 0x4e
 8002dfa:	aa03      	add	r2, sp, #12
 8002dfc:	f006 f8ca 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e00:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e02:	2356      	movs	r3, #86	; 0x56
 8002e04:	4d49      	ldr	r5, [pc, #292]	; (8002f2c <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e06:	4f3e      	ldr	r7, [pc, #248]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002e08:	011a      	lsls	r2, r3, #4
 8002e0a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e10:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e14:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e18:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e1c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e20:	2304      	movs	r3, #4
 8002e22:	214e      	movs	r1, #78	; 0x4e
 8002e24:	4638      	mov	r0, r7
 8002e26:	aa03      	add	r2, sp, #12
 8002e28:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e2a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e2e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e32:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e36:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e3a:	f006 f8ab 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e3e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e0      	bne.n	8002e08 <lcd_psu_init+0x230>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e46:	4930      	ldr	r1, [pc, #192]	; (8002f08 <lcd_psu_init+0x330>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e48:	2304      	movs	r3, #4
 8002e4a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e4c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e4e:	482c      	ldr	r0, [pc, #176]	; (8002f00 <lcd_psu_init+0x328>)
 8002e50:	214e      	movs	r1, #78	; 0x4e
 8002e52:	aa03      	add	r2, sp, #12
 8002e54:	f006 f89e 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002e58:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002e5a:	2356      	movs	r3, #86	; 0x56
 8002e5c:	4d34      	ldr	r5, [pc, #208]	; (8002f30 <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e5e:	4f28      	ldr	r7, [pc, #160]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002e60:	011a      	lsls	r2, r3, #4
 8002e62:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e68:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e6c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e70:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e74:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e78:	2304      	movs	r3, #4
 8002e7a:	214e      	movs	r1, #78	; 0x4e
 8002e7c:	4638      	mov	r0, r7
 8002e7e:	aa03      	add	r2, sp, #12
 8002e80:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e82:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e86:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e8a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e8e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e92:	f006 f87f 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e96:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e0      	bne.n	8002e60 <lcd_psu_init+0x288>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e9e:	491c      	ldr	r1, [pc, #112]	; (8002f10 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ea4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ea6:	4816      	ldr	r0, [pc, #88]	; (8002f00 <lcd_psu_init+0x328>)
 8002ea8:	214e      	movs	r1, #78	; 0x4e
 8002eaa:	aa03      	add	r2, sp, #12
 8002eac:	f006 f872 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002eb0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002eb2:	233a      	movs	r3, #58	; 0x3a
 8002eb4:	4d17      	ldr	r5, [pc, #92]	; (8002f14 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eb6:	4f12      	ldr	r7, [pc, #72]	; (8002f00 <lcd_psu_init+0x328>)
	data_l = ((data<<4)&0xf0);
 8002eb8:	011a      	lsls	r2, r3, #4
 8002eba:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ec0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ec4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ec8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ecc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	214e      	movs	r1, #78	; 0x4e
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	aa03      	add	r2, sp, #12
 8002ed8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002eda:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ede:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ee2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ee6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eea:	f006 f853 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002eee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e0      	bne.n	8002eb8 <lcd_psu_init+0x2e0>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ef6:	490f      	ldr	r1, [pc, #60]	; (8002f34 <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e01d      	b.n	8002f38 <lcd_psu_init+0x360>
 8002efc:	080c888c 	.word	0x080c888c
 8002f00:	20000534 	.word	0x20000534
 8002f04:	08011700 	.word	0x08011700
 8002f08:	191d090d 	.word	0x191d090d
 8002f0c:	0801170c 	.word	0x0801170c
 8002f10:	090d090d 	.word	0x090d090d
 8002f14:	08011710 	.word	0x08011710
 8002f18:	080cc8cc 	.word	0x080cc8cc
 8002f1c:	08011718 	.word	0x08011718
 8002f20:	08011724 	.word	0x08011724
 8002f24:	08011728 	.word	0x08011728
 8002f28:	484c989c 	.word	0x484c989c
 8002f2c:	08011730 	.word	0x08011730
 8002f30:	0801173c 	.word	0x0801173c
 8002f34:	484cd8dc 	.word	0x484cd8dc
 8002f38:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f3a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f3c:	4841      	ldr	r0, [pc, #260]	; (8003044 <lcd_psu_init+0x46c>)
 8002f3e:	214e      	movs	r1, #78	; 0x4e
 8002f40:	aa03      	add	r2, sp, #12
 8002f42:	f006 f827 	bl	8008f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f46:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002f48:	2341      	movs	r3, #65	; 0x41
 8002f4a:	4d3f      	ldr	r5, [pc, #252]	; (8003048 <lcd_psu_init+0x470>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f4c:	4f3d      	ldr	r7, [pc, #244]	; (8003044 <lcd_psu_init+0x46c>)
	data_l = ((data<<4)&0xf0);
 8002f4e:	011a      	lsls	r2, r3, #4
 8002f50:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f56:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f5a:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f5e:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f62:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f66:	2304      	movs	r3, #4
 8002f68:	214e      	movs	r1, #78	; 0x4e
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	aa03      	add	r2, sp, #12
 8002f6e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f70:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002f74:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002f78:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002f7c:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f80:	f006 f808 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002f84:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1e0      	bne.n	8002f4e <lcd_psu_init+0x376>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f8c:	492f      	ldr	r1, [pc, #188]	; (800304c <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f8e:	2304      	movs	r3, #4
 8002f90:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002f92:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002f94:	482b      	ldr	r0, [pc, #172]	; (8003044 <lcd_psu_init+0x46c>)
 8002f96:	214e      	movs	r1, #78	; 0x4e
 8002f98:	aa03      	add	r2, sp, #12
 8002f9a:	f005 fffb 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002f9e:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002fa0:	2341      	movs	r3, #65	; 0x41
 8002fa2:	4d2b      	ldr	r5, [pc, #172]	; (8003050 <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fa4:	4f27      	ldr	r7, [pc, #156]	; (8003044 <lcd_psu_init+0x46c>)
	data_l = ((data<<4)&0xf0);
 8002fa6:	011a      	lsls	r2, r3, #4
 8002fa8:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fae:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fb2:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fb6:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fba:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	214e      	movs	r1, #78	; 0x4e
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	aa03      	add	r2, sp, #12
 8002fc6:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fc8:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002fcc:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002fd0:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002fd4:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fd8:	f005 ffdc 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002fdc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e0      	bne.n	8002fa6 <lcd_psu_init+0x3ce>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fe4:	491b      	ldr	r1, [pc, #108]	; (8003054 <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002fea:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002fec:	4815      	ldr	r0, [pc, #84]	; (8003044 <lcd_psu_init+0x46c>)
 8002fee:	214e      	movs	r1, #78	; 0x4e
 8002ff0:	aa03      	add	r2, sp, #12
 8002ff2:	f005 ffcf 	bl	8008f94 <HAL_I2C_Master_Transmit>
 8002ff6:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8002ff8:	233a      	movs	r3, #58	; 0x3a
 8002ffa:	4c17      	ldr	r4, [pc, #92]	; (8003058 <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ffc:	4d11      	ldr	r5, [pc, #68]	; (8003044 <lcd_psu_init+0x46c>)
	data_l = ((data<<4)&0xf0);
 8002ffe:	011a      	lsls	r2, r3, #4
 8003000:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003006:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800300a:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800300e:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003012:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003016:	2304      	movs	r3, #4
 8003018:	214e      	movs	r1, #78	; 0x4e
 800301a:	4628      	mov	r0, r5
 800301c:	aa03      	add	r2, sp, #12
 800301e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003020:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003024:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003028:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800302c:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003030:	f005 ffb0 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003034:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e0      	bne.n	8002ffe <lcd_psu_init+0x426>
}
 800303c:	b004      	add	sp, #16
 800303e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003042:	bf00      	nop
 8003044:	20000534 	.word	0x20000534
 8003048:	08011740 	.word	0x08011740
 800304c:	191d090d 	.word	0x191d090d
 8003050:	0801174c 	.word	0x0801174c
 8003054:	090d090d 	.word	0x090d090d
 8003058:	08011728 	.word	0x08011728

0800305c <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 800305c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305e:	4605      	mov	r5, r0
 8003060:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 8003062:	4608      	mov	r0, r1
 8003064:	f7fd f9f8 	bl	8000458 <__aeabi_f2d>
 8003068:	4606      	mov	r6, r0
 800306a:	460f      	mov	r7, r1
 800306c:	4a9a      	ldr	r2, [pc, #616]	; (80032d8 <lcd_update_voltage+0x27c>)
 800306e:	2106      	movs	r1, #6
 8003070:	e9cd 6700 	strd	r6, r7, [sp]
 8003074:	a804      	add	r0, sp, #16
 8003076:	f00a fcab 	bl	800d9d0 <sniprintf>
	if(channel == 1){
 800307a:	2d01      	cmp	r5, #1
 800307c:	d009      	beq.n	8003092 <lcd_update_voltage+0x36>
	else if(channel == 2){
 800307e:	2d02      	cmp	r5, #2
 8003080:	f000 80cb 	beq.w	800321a <lcd_update_voltage+0x1be>
	else if(channel == 3){
 8003084:	2d03      	cmp	r5, #3
 8003086:	f000 8135 	beq.w	80032f4 <lcd_update_voltage+0x298>
	else if(channel == 4){
 800308a:	2d04      	cmp	r5, #4
 800308c:	d068      	beq.n	8003160 <lcd_update_voltage+0x104>
}
 800308e:	b007      	add	sp, #28
 8003090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003092:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003094:	4a91      	ldr	r2, [pc, #580]	; (80032dc <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003096:	4892      	ldr	r0, [pc, #584]	; (80032e0 <lcd_update_voltage+0x284>)
 8003098:	ac03      	add	r4, sp, #12
 800309a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800309c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800309e:	214e      	movs	r1, #78	; 0x4e
 80030a0:	4622      	mov	r2, r4
 80030a2:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030a4:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030a6:	f005 ff75 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030aa:	2320      	movs	r3, #32
 80030ac:	4d8d      	ldr	r5, [pc, #564]	; (80032e4 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80030ae:	011a      	lsls	r2, r3, #4
 80030b0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80030b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030b6:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030ba:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030be:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80030c2:	f043 0309 	orr.w	r3, r3, #9
 80030c6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80030ca:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030ce:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80030d0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030d4:	4622      	mov	r2, r4
 80030d6:	214e      	movs	r1, #78	; 0x4e
 80030d8:	4638      	mov	r0, r7
 80030da:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80030dc:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030e0:	f005 ff58 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e0      	bne.n	80030ae <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030ec:	4a7b      	ldr	r2, [pc, #492]	; (80032dc <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030ee:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80030f0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030f2:	214e      	movs	r1, #78	; 0x4e
 80030f4:	4622      	mov	r2, r4
 80030f6:	487a      	ldr	r0, [pc, #488]	; (80032e0 <lcd_update_voltage+0x284>)
 80030f8:	9600      	str	r6, [sp, #0]
 80030fa:	f005 ff4b 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80030fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003102:	b30b      	cbz	r3, 8003148 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003104:	2764      	movs	r7, #100	; 0x64
 8003106:	4e76      	ldr	r6, [pc, #472]	; (80032e0 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003108:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800310a:	011a      	lsls	r2, r3, #4
 800310c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800310e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003112:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003116:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800311a:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800311e:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003122:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003124:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003128:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800312c:	4622      	mov	r2, r4
 800312e:	214e      	movs	r1, #78	; 0x4e
 8003130:	4630      	mov	r0, r6
 8003132:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003134:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003138:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800313c:	f005 ff2a 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003140:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e0      	bne.n	800310a <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003148:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800314a:	4867      	ldr	r0, [pc, #412]	; (80032e8 <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800314c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800314e:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003150:	4622      	mov	r2, r4
 8003152:	214e      	movs	r1, #78	; 0x4e
 8003154:	9500      	str	r5, [sp, #0]
 8003156:	4862      	ldr	r0, [pc, #392]	; (80032e0 <lcd_update_voltage+0x284>)
 8003158:	f005 ff1c 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 800315c:	b007      	add	sp, #28
 800315e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003160:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003162:	4a62      	ldr	r2, [pc, #392]	; (80032ec <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003164:	485e      	ldr	r0, [pc, #376]	; (80032e0 <lcd_update_voltage+0x284>)
 8003166:	ac03      	add	r4, sp, #12
 8003168:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800316a:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800316c:	214e      	movs	r1, #78	; 0x4e
 800316e:	4622      	mov	r2, r4
 8003170:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003172:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003174:	f005 ff0e 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003178:	2320      	movs	r3, #32
 800317a:	4d5a      	ldr	r5, [pc, #360]	; (80032e4 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 800317c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800317e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003182:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003186:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003188:	f043 0309 	orr.w	r3, r3, #9
 800318c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003190:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003194:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003198:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800319c:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031a0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031a4:	2304      	movs	r3, #4
 80031a6:	4622      	mov	r2, r4
 80031a8:	214e      	movs	r1, #78	; 0x4e
 80031aa:	4638      	mov	r0, r7
 80031ac:	9600      	str	r6, [sp, #0]
 80031ae:	f005 fef1 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031b2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e0      	bne.n	800317c <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031ba:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031bc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80031be:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031c0:	214e      	movs	r1, #78	; 0x4e
 80031c2:	4622      	mov	r2, r4
 80031c4:	4846      	ldr	r0, [pc, #280]	; (80032e0 <lcd_update_voltage+0x284>)
 80031c6:	9600      	str	r6, [sp, #0]
 80031c8:	f005 fee4 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80031cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0b9      	beq.n	8003148 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80031d4:	2764      	movs	r7, #100	; 0x64
 80031d6:	4e42      	ldr	r6, [pc, #264]	; (80032e0 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80031d8:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80031da:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031e0:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80031e4:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80031e6:	f043 0309 	orr.w	r3, r3, #9
 80031ea:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031ee:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031f2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80031f6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80031fa:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80031fe:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003202:	2304      	movs	r3, #4
 8003204:	4622      	mov	r2, r4
 8003206:	214e      	movs	r1, #78	; 0x4e
 8003208:	4630      	mov	r0, r6
 800320a:	9700      	str	r7, [sp, #0]
 800320c:	f005 fec2 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003210:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e0      	bne.n	80031da <lcd_update_voltage+0x17e>
 8003218:	e796      	b.n	8003148 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800321a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800321c:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800321e:	4830      	ldr	r0, [pc, #192]	; (80032e0 <lcd_update_voltage+0x284>)
 8003220:	ac03      	add	r4, sp, #12
 8003222:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003224:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003226:	214e      	movs	r1, #78	; 0x4e
 8003228:	4622      	mov	r2, r4
 800322a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800322c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800322e:	f005 feb1 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003232:	2320      	movs	r3, #32
 8003234:	4d2b      	ldr	r5, [pc, #172]	; (80032e4 <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 8003236:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800323e:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003242:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003246:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800324a:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800324e:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003252:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003256:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800325a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800325c:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003260:	214e      	movs	r1, #78	; 0x4e
 8003262:	4622      	mov	r2, r4
 8003264:	4638      	mov	r0, r7
 8003266:	9600      	str	r6, [sp, #0]
 8003268:	f005 fe94 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800326c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e0      	bne.n	8003236 <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003276:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003278:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800327a:	214e      	movs	r1, #78	; 0x4e
 800327c:	4622      	mov	r2, r4
 800327e:	4818      	ldr	r0, [pc, #96]	; (80032e0 <lcd_update_voltage+0x284>)
 8003280:	9600      	str	r6, [sp, #0]
 8003282:	f005 fe87 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003286:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f43f af5c 	beq.w	8003148 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003290:	2764      	movs	r7, #100	; 0x64
 8003292:	4e13      	ldr	r6, [pc, #76]	; (80032e0 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003294:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 8003296:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800329c:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800329e:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032a2:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032a6:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80032aa:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032ae:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80032b2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80032b6:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032ba:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80032bc:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032c0:	4622      	mov	r2, r4
 80032c2:	214e      	movs	r1, #78	; 0x4e
 80032c4:	4630      	mov	r0, r6
 80032c6:	9700      	str	r7, [sp, #0]
 80032c8:	f005 fe64 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80032cc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e0      	bne.n	8003296 <lcd_update_voltage+0x23a>
 80032d4:	e738      	b.n	8003148 <lcd_update_voltage+0xec>
 80032d6:	bf00      	nop
 80032d8:	08011638 	.word	0x08011638
 80032dc:	383c888c 	.word	0x383c888c
 80032e0:	20000534 	.word	0x20000534
 80032e4:	08011750 	.word	0x08011750
 80032e8:	696d595d 	.word	0x696d595d
 80032ec:	282ca8ac 	.word	0x282ca8ac
 80032f0:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032f4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032f6:	4a2e      	ldr	r2, [pc, #184]	; (80033b0 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80032f8:	482e      	ldr	r0, [pc, #184]	; (80033b4 <lcd_update_voltage+0x358>)
 80032fa:	ac03      	add	r4, sp, #12
 80032fc:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80032fe:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003300:	214e      	movs	r1, #78	; 0x4e
 8003302:	4622      	mov	r2, r4
 8003304:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003306:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003308:	f005 fe44 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800330c:	2320      	movs	r3, #32
 800330e:	4d2a      	ldr	r5, [pc, #168]	; (80033b8 <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003310:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003316:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800331a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800331c:	f043 0309 	orr.w	r3, r3, #9
 8003320:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003324:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003328:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800332c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003330:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003334:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003338:	2304      	movs	r3, #4
 800333a:	4622      	mov	r2, r4
 800333c:	214e      	movs	r1, #78	; 0x4e
 800333e:	4638      	mov	r0, r7
 8003340:	9600      	str	r6, [sp, #0]
 8003342:	f005 fe27 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003346:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e0      	bne.n	8003310 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003350:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003352:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003354:	214e      	movs	r1, #78	; 0x4e
 8003356:	4622      	mov	r2, r4
 8003358:	4816      	ldr	r0, [pc, #88]	; (80033b4 <lcd_update_voltage+0x358>)
 800335a:	9600      	str	r6, [sp, #0]
 800335c:	f005 fe1a 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003360:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f43f aeef 	beq.w	8003148 <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800336a:	2764      	movs	r7, #100	; 0x64
 800336c:	4e11      	ldr	r6, [pc, #68]	; (80033b4 <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 800336e:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8003370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003378:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800337c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003380:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003384:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003388:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800338c:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003390:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003394:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003396:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800339a:	214e      	movs	r1, #78	; 0x4e
 800339c:	4622      	mov	r2, r4
 800339e:	4630      	mov	r0, r6
 80033a0:	9700      	str	r7, [sp, #0]
 80033a2:	f005 fdf7 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80033a6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e0      	bne.n	8003370 <lcd_update_voltage+0x314>
 80033ae:	e6cb      	b.n	8003148 <lcd_update_voltage+0xec>
 80033b0:	787c989c 	.word	0x787c989c
 80033b4:	20000534 	.word	0x20000534
 80033b8:	08011750 	.word	0x08011750

080033bc <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 80033bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033be:	4605      	mov	r5, r0
 80033c0:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.3f", num);
 80033c2:	4608      	mov	r0, r1
 80033c4:	f7fd f848 	bl	8000458 <__aeabi_f2d>
 80033c8:	4606      	mov	r6, r0
 80033ca:	460f      	mov	r7, r1
 80033cc:	4a9a      	ldr	r2, [pc, #616]	; (8003638 <lcd_update_amperage+0x27c>)
 80033ce:	2106      	movs	r1, #6
 80033d0:	e9cd 6700 	strd	r6, r7, [sp]
 80033d4:	a804      	add	r0, sp, #16
 80033d6:	f00a fafb 	bl	800d9d0 <sniprintf>
	if(channel == 1){
 80033da:	2d01      	cmp	r5, #1
 80033dc:	d009      	beq.n	80033f2 <lcd_update_amperage+0x36>
	else if(channel == 2){
 80033de:	2d02      	cmp	r5, #2
 80033e0:	f000 80cb 	beq.w	800357a <lcd_update_amperage+0x1be>
	else if(channel == 3){
 80033e4:	2d03      	cmp	r5, #3
 80033e6:	f000 8135 	beq.w	8003654 <lcd_update_amperage+0x298>
	else if(channel == 4){
 80033ea:	2d04      	cmp	r5, #4
 80033ec:	d068      	beq.n	80034c0 <lcd_update_amperage+0x104>
}
 80033ee:	b007      	add	sp, #28
 80033f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033f2:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033f4:	4a91      	ldr	r2, [pc, #580]	; (800363c <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033f6:	4892      	ldr	r0, [pc, #584]	; (8003640 <lcd_update_amperage+0x284>)
 80033f8:	ac03      	add	r4, sp, #12
 80033fa:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80033fc:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033fe:	214e      	movs	r1, #78	; 0x4e
 8003400:	4622      	mov	r2, r4
 8003402:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003404:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003406:	f005 fdc5 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800340a:	2320      	movs	r3, #32
 800340c:	4d8d      	ldr	r5, [pc, #564]	; (8003644 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 800340e:	011a      	lsls	r2, r3, #4
 8003410:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8003412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003416:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800341a:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800341e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003422:	f043 0309 	orr.w	r3, r3, #9
 8003426:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800342a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800342e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003430:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003434:	4622      	mov	r2, r4
 8003436:	214e      	movs	r1, #78	; 0x4e
 8003438:	4638      	mov	r0, r7
 800343a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800343c:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003440:	f005 fda8 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003444:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e0      	bne.n	800340e <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800344c:	4a7b      	ldr	r2, [pc, #492]	; (800363c <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800344e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003450:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003452:	214e      	movs	r1, #78	; 0x4e
 8003454:	4622      	mov	r2, r4
 8003456:	487a      	ldr	r0, [pc, #488]	; (8003640 <lcd_update_amperage+0x284>)
 8003458:	9600      	str	r6, [sp, #0]
 800345a:	f005 fd9b 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800345e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003462:	b30b      	cbz	r3, 80034a8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003464:	2764      	movs	r7, #100	; 0x64
 8003466:	4e76      	ldr	r6, [pc, #472]	; (8003640 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003468:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800346a:	011a      	lsls	r2, r3, #4
 800346c:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800346e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003472:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003476:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800347a:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800347e:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003482:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003484:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003488:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800348c:	4622      	mov	r2, r4
 800348e:	214e      	movs	r1, #78	; 0x4e
 8003490:	4630      	mov	r0, r6
 8003492:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003494:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003498:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800349c:	f005 fd7a 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034a0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e0      	bne.n	800346a <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034a8:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034aa:	4867      	ldr	r0, [pc, #412]	; (8003648 <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034ac:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034ae:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034b0:	4622      	mov	r2, r4
 80034b2:	214e      	movs	r1, #78	; 0x4e
 80034b4:	9500      	str	r5, [sp, #0]
 80034b6:	4862      	ldr	r0, [pc, #392]	; (8003640 <lcd_update_amperage+0x284>)
 80034b8:	f005 fd6c 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 80034bc:	b007      	add	sp, #28
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034c0:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034c2:	4a62      	ldr	r2, [pc, #392]	; (800364c <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034c4:	485e      	ldr	r0, [pc, #376]	; (8003640 <lcd_update_amperage+0x284>)
 80034c6:	ac03      	add	r4, sp, #12
 80034c8:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80034ca:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034cc:	214e      	movs	r1, #78	; 0x4e
 80034ce:	4622      	mov	r2, r4
 80034d0:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034d2:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80034d4:	f005 fd5e 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80034d8:	2320      	movs	r3, #32
 80034da:	4d5a      	ldr	r5, [pc, #360]	; (8003644 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 80034dc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80034de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034e2:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80034e6:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80034e8:	f043 0309 	orr.w	r3, r3, #9
 80034ec:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034f0:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80034f4:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80034f8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80034fc:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003500:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003504:	2304      	movs	r3, #4
 8003506:	4622      	mov	r2, r4
 8003508:	214e      	movs	r1, #78	; 0x4e
 800350a:	4638      	mov	r0, r7
 800350c:	9600      	str	r6, [sp, #0]
 800350e:	f005 fd41 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003512:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e0      	bne.n	80034dc <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800351a:	4a4c      	ldr	r2, [pc, #304]	; (800364c <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800351c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800351e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003520:	214e      	movs	r1, #78	; 0x4e
 8003522:	4622      	mov	r2, r4
 8003524:	4846      	ldr	r0, [pc, #280]	; (8003640 <lcd_update_amperage+0x284>)
 8003526:	9600      	str	r6, [sp, #0]
 8003528:	f005 fd34 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800352c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0b9      	beq.n	80034a8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003534:	2764      	movs	r7, #100	; 0x64
 8003536:	4e42      	ldr	r6, [pc, #264]	; (8003640 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8003538:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800353a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800353c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003540:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003544:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003546:	f043 0309 	orr.w	r3, r3, #9
 800354a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800354e:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003552:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003556:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800355a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800355e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003562:	2304      	movs	r3, #4
 8003564:	4622      	mov	r2, r4
 8003566:	214e      	movs	r1, #78	; 0x4e
 8003568:	4630      	mov	r0, r6
 800356a:	9700      	str	r7, [sp, #0]
 800356c:	f005 fd12 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003570:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e0      	bne.n	800353a <lcd_update_amperage+0x17e>
 8003578:	e796      	b.n	80034a8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800357a:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800357c:	4a34      	ldr	r2, [pc, #208]	; (8003650 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800357e:	4830      	ldr	r0, [pc, #192]	; (8003640 <lcd_update_amperage+0x284>)
 8003580:	ac03      	add	r4, sp, #12
 8003582:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003584:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003586:	214e      	movs	r1, #78	; 0x4e
 8003588:	4622      	mov	r2, r4
 800358a:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800358c:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800358e:	f005 fd01 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003592:	2320      	movs	r3, #32
 8003594:	4d2b      	ldr	r5, [pc, #172]	; (8003644 <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 8003596:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800359e:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035a2:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035a6:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035aa:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035ae:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035b2:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035b6:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035ba:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035bc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035c0:	214e      	movs	r1, #78	; 0x4e
 80035c2:	4622      	mov	r2, r4
 80035c4:	4638      	mov	r0, r7
 80035c6:	9600      	str	r6, [sp, #0]
 80035c8:	f005 fce4 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035cc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e0      	bne.n	8003596 <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035d4:	4a1e      	ldr	r2, [pc, #120]	; (8003650 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035d6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80035d8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035da:	214e      	movs	r1, #78	; 0x4e
 80035dc:	4622      	mov	r2, r4
 80035de:	4818      	ldr	r0, [pc, #96]	; (8003640 <lcd_update_amperage+0x284>)
 80035e0:	9600      	str	r6, [sp, #0]
 80035e2:	f005 fcd7 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80035e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f43f af5c 	beq.w	80034a8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035f0:	2764      	movs	r7, #100	; 0x64
 80035f2:	4e13      	ldr	r6, [pc, #76]	; (8003640 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80035f4:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80035f6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80035f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80035fc:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035fe:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003602:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003606:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800360a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800360e:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003612:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003616:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800361a:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800361c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003620:	4622      	mov	r2, r4
 8003622:	214e      	movs	r1, #78	; 0x4e
 8003624:	4630      	mov	r0, r6
 8003626:	9700      	str	r7, [sp, #0]
 8003628:	f005 fcb4 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800362c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e0      	bne.n	80035f6 <lcd_update_amperage+0x23a>
 8003634:	e738      	b.n	80034a8 <lcd_update_amperage+0xec>
 8003636:	bf00      	nop
 8003638:	08011690 	.word	0x08011690
 800363c:	383cc8cc 	.word	0x383cc8cc
 8003640:	20000534 	.word	0x20000534
 8003644:	08011750 	.word	0x08011750
 8003648:	191d494d 	.word	0x191d494d
 800364c:	282ce8ec 	.word	0x282ce8ec
 8003650:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003654:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003656:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003658:	482e      	ldr	r0, [pc, #184]	; (8003714 <lcd_update_amperage+0x358>)
 800365a:	ac03      	add	r4, sp, #12
 800365c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800365e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003660:	214e      	movs	r1, #78	; 0x4e
 8003662:	4622      	mov	r2, r4
 8003664:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003666:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003668:	f005 fc94 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800366c:	2320      	movs	r3, #32
 800366e:	4d2a      	ldr	r5, [pc, #168]	; (8003718 <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8003670:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003676:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800367a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800367c:	f043 0309 	orr.w	r3, r3, #9
 8003680:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003684:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003688:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800368c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003690:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003694:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003698:	2304      	movs	r3, #4
 800369a:	4622      	mov	r2, r4
 800369c:	214e      	movs	r1, #78	; 0x4e
 800369e:	4638      	mov	r0, r7
 80036a0:	9600      	str	r6, [sp, #0]
 80036a2:	f005 fc77 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036a6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e0      	bne.n	8003670 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036b0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036b2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036b4:	214e      	movs	r1, #78	; 0x4e
 80036b6:	4622      	mov	r2, r4
 80036b8:	4816      	ldr	r0, [pc, #88]	; (8003714 <lcd_update_amperage+0x358>)
 80036ba:	9600      	str	r6, [sp, #0]
 80036bc:	f005 fc6a 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80036c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f43f aeef 	beq.w	80034a8 <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ca:	2764      	movs	r7, #100	; 0x64
 80036cc:	4e11      	ldr	r6, [pc, #68]	; (8003714 <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 80036ce:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80036d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036d8:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036dc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80036e0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80036e4:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036e8:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036ec:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80036f0:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036f4:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80036f6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036fa:	214e      	movs	r1, #78	; 0x4e
 80036fc:	4622      	mov	r2, r4
 80036fe:	4630      	mov	r0, r6
 8003700:	9700      	str	r7, [sp, #0]
 8003702:	f005 fc47 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003706:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e0      	bne.n	80036d0 <lcd_update_amperage+0x314>
 800370e:	e6cb      	b.n	80034a8 <lcd_update_amperage+0xec>
 8003710:	787cd8dc 	.word	0x787cd8dc
 8003714:	20000534 	.word	0x20000534
 8003718:	08011750 	.word	0x08011750

0800371c <lcd_psu_update>:
void lcd_psu_update(void){
 800371c:	b570      	push	{r4, r5, r6, lr}
	if(startmessage){
 800371e:	4baa      	ldr	r3, [pc, #680]	; (80039c8 <lcd_psu_update+0x2ac>)
void lcd_psu_update(void){
 8003720:	b084      	sub	sp, #16
	if(startmessage){
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	2a00      	cmp	r2, #0
 8003726:	d144      	bne.n	80037b2 <lcd_psu_update+0x96>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003728:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800372a:	49a8      	ldr	r1, [pc, #672]	; (80039cc <lcd_psu_update+0x2b0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800372c:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800372e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003730:	48a7      	ldr	r0, [pc, #668]	; (80039d0 <lcd_psu_update+0x2b4>)
 8003732:	214e      	movs	r1, #78	; 0x4e
 8003734:	aa03      	add	r2, sp, #12
 8003736:	9400      	str	r4, [sp, #0]
 8003738:	f005 fc2c 	bl	8008f94 <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 800373c:	4ba5      	ldr	r3, [pc, #660]	; (80039d4 <lcd_psu_update+0x2b8>)
 800373e:	781d      	ldrb	r5, [r3, #0]
 8003740:	b165      	cbz	r5, 800375c <lcd_psu_update+0x40>
	else if(kpenum == V1){
 8003742:	2d01      	cmp	r5, #1
 8003744:	f000 8164 	beq.w	8003a10 <lcd_psu_update+0x2f4>
	else if(kpenum == V2){
 8003748:	2d03      	cmp	r5, #3
 800374a:	d037      	beq.n	80037bc <lcd_psu_update+0xa0>
	else if(kpenum == A1){
 800374c:	2d02      	cmp	r5, #2
 800374e:	f000 829f 	beq.w	8003c90 <lcd_psu_update+0x574>
	else if(kpenum == A2){
 8003752:	2d04      	cmp	r5, #4
 8003754:	f000 831c 	beq.w	8003d90 <lcd_psu_update+0x674>
}
 8003758:	b004      	add	sp, #16
 800375a:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,volt_set_aux);
 800375c:	4b9e      	ldr	r3, [pc, #632]	; (80039d8 <lcd_psu_update+0x2bc>)
 800375e:	2001      	movs	r0, #1
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	f7ff fc7b 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003766:	4b9d      	ldr	r3, [pc, #628]	; (80039dc <lcd_psu_update+0x2c0>)
 8003768:	2001      	movs	r0, #1
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	f7ff fe26 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003770:	4b9b      	ldr	r3, [pc, #620]	; (80039e0 <lcd_psu_update+0x2c4>)
 8003772:	2002      	movs	r0, #2
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	f7ff fc71 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 800377a:	4b9a      	ldr	r3, [pc, #616]	; (80039e4 <lcd_psu_update+0x2c8>)
 800377c:	2002      	movs	r0, #2
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	f7ff fe1c 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003784:	4b98      	ldr	r3, [pc, #608]	; (80039e8 <lcd_psu_update+0x2cc>)
 8003786:	2003      	movs	r0, #3
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	f7ff fc67 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 800378e:	4b97      	ldr	r3, [pc, #604]	; (80039ec <lcd_psu_update+0x2d0>)
 8003790:	2003      	movs	r0, #3
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	f7ff fe12 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003798:	4b95      	ldr	r3, [pc, #596]	; (80039f0 <lcd_psu_update+0x2d4>)
 800379a:	2004      	movs	r0, #4
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	f7ff fc5d 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80037a2:	2004      	movs	r0, #4
 80037a4:	4b93      	ldr	r3, [pc, #588]	; (80039f4 <lcd_psu_update+0x2d8>)
 80037a6:	6819      	ldr	r1, [r3, #0]
}
 80037a8:	b004      	add	sp, #16
 80037aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 80037ae:	f7ff be05 	b.w	80033bc <lcd_update_amperage>
		startmessage = 0;
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
		lcd_psu_init();
 80037b6:	f7ff fa0f 	bl	8002bd8 <lcd_psu_init>
 80037ba:	e7b5      	b.n	8003728 <lcd_psu_update+0xc>
		lcd_update_voltage(1,volt_set_aux);
 80037bc:	4b86      	ldr	r3, [pc, #536]	; (80039d8 <lcd_psu_update+0x2bc>)
 80037be:	2001      	movs	r0, #1
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	f7ff fc4b 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 80037c6:	4b85      	ldr	r3, [pc, #532]	; (80039dc <lcd_psu_update+0x2c0>)
 80037c8:	2001      	movs	r0, #1
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	f7ff fdf6 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 80037d0:	4b83      	ldr	r3, [pc, #524]	; (80039e0 <lcd_psu_update+0x2c4>)
 80037d2:	2002      	movs	r0, #2
 80037d4:	6819      	ldr	r1, [r3, #0]
 80037d6:	f7ff fc41 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 80037da:	4b82      	ldr	r3, [pc, #520]	; (80039e4 <lcd_psu_update+0x2c8>)
 80037dc:	2002      	movs	r0, #2
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	f7ff fdec 	bl	80033bc <lcd_update_amperage>
		lcd_update_amperage(3,amp_set_main);
 80037e4:	4b81      	ldr	r3, [pc, #516]	; (80039ec <lcd_psu_update+0x2d0>)
 80037e6:	4628      	mov	r0, r5
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	f7ff fde7 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 80037ee:	4b80      	ldr	r3, [pc, #512]	; (80039f0 <lcd_psu_update+0x2d4>)
 80037f0:	2004      	movs	r0, #4
 80037f2:	6819      	ldr	r1, [r3, #0]
 80037f4:	f7ff fc32 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 80037f8:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <lcd_psu_update+0x2d8>)
 80037fa:	2004      	movs	r0, #4
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	f7ff fddd 	bl	80033bc <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003802:	497d      	ldr	r1, [pc, #500]	; (80039f8 <lcd_psu_update+0x2dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003804:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003806:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003808:	4871      	ldr	r0, [pc, #452]	; (80039d0 <lcd_psu_update+0x2b4>)
 800380a:	214e      	movs	r1, #78	; 0x4e
 800380c:	aa03      	add	r2, sp, #12
 800380e:	9400      	str	r4, [sp, #0]
 8003810:	f005 fbc0 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003814:	2320      	movs	r3, #32
 8003816:	4d79      	ldr	r5, [pc, #484]	; (80039fc <lcd_psu_update+0x2e0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003818:	4e6d      	ldr	r6, [pc, #436]	; (80039d0 <lcd_psu_update+0x2b4>)
	data_l = ((data<<4)&0xf0);
 800381a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800381c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003820:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003824:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003826:	f043 0309 	orr.w	r3, r3, #9
 800382a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800382e:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003832:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003836:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800383a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800383e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003842:	2304      	movs	r3, #4
 8003844:	214e      	movs	r1, #78	; 0x4e
 8003846:	4630      	mov	r0, r6
 8003848:	9400      	str	r4, [sp, #0]
 800384a:	aa03      	add	r2, sp, #12
 800384c:	f005 fba2 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003850:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e0      	bne.n	800381a <lcd_psu_update+0xfe>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003858:	4967      	ldr	r1, [pc, #412]	; (80039f8 <lcd_psu_update+0x2dc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800385a:	2304      	movs	r3, #4
 800385c:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800385e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003860:	485b      	ldr	r0, [pc, #364]	; (80039d0 <lcd_psu_update+0x2b4>)
 8003862:	214e      	movs	r1, #78	; 0x4e
 8003864:	9400      	str	r4, [sp, #0]
 8003866:	f005 fb95 	bl	8008f94 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800386a:	4965      	ldr	r1, [pc, #404]	; (8003a00 <lcd_psu_update+0x2e4>)
		if(keypadarr[0] != 'z'){
 800386c:	4d65      	ldr	r5, [pc, #404]	; (8003a04 <lcd_psu_update+0x2e8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800386e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003870:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003872:	4857      	ldr	r0, [pc, #348]	; (80039d0 <lcd_psu_update+0x2b4>)
 8003874:	214e      	movs	r1, #78	; 0x4e
 8003876:	aa03      	add	r2, sp, #12
 8003878:	9400      	str	r4, [sp, #0]
 800387a:	f005 fb8b 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 800387e:	782b      	ldrb	r3, [r5, #0]
 8003880:	2b7a      	cmp	r3, #122	; 0x7a
 8003882:	d01a      	beq.n	80038ba <lcd_psu_update+0x19e>
	data_u = (data&0xf0);
 8003884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800388c:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003890:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003894:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003898:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800389c:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038a0:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038a4:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038a8:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038ac:	2304      	movs	r3, #4
 80038ae:	214e      	movs	r1, #78	; 0x4e
 80038b0:	4847      	ldr	r0, [pc, #284]	; (80039d0 <lcd_psu_update+0x2b4>)
 80038b2:	9400      	str	r4, [sp, #0]
 80038b4:	aa03      	add	r2, sp, #12
 80038b6:	f005 fb6d 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 80038ba:	786b      	ldrb	r3, [r5, #1]
 80038bc:	2b7a      	cmp	r3, #122	; 0x7a
 80038be:	d01b      	beq.n	80038f8 <lcd_psu_update+0x1dc>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038c0:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80038c2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80038c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038c8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80038cc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038ce:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80038d2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038d6:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038da:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80038de:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80038e2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80038e6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038ea:	2304      	movs	r3, #4
 80038ec:	214e      	movs	r1, #78	; 0x4e
 80038ee:	4838      	ldr	r0, [pc, #224]	; (80039d0 <lcd_psu_update+0x2b4>)
 80038f0:	aa03      	add	r2, sp, #12
 80038f2:	9400      	str	r4, [sp, #0]
 80038f4:	f005 fb4e 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 80038f8:	78ab      	ldrb	r3, [r5, #2]
 80038fa:	2b7a      	cmp	r3, #122	; 0x7a
 80038fc:	d01b      	beq.n	8003936 <lcd_psu_update+0x21a>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80038fe:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003900:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003906:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800390a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800390c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003910:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003914:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003918:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800391c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003920:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003924:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003928:	2304      	movs	r3, #4
 800392a:	214e      	movs	r1, #78	; 0x4e
 800392c:	4828      	ldr	r0, [pc, #160]	; (80039d0 <lcd_psu_update+0x2b4>)
 800392e:	aa03      	add	r2, sp, #12
 8003930:	9400      	str	r4, [sp, #0]
 8003932:	f005 fb2f 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003936:	78eb      	ldrb	r3, [r5, #3]
 8003938:	2b7a      	cmp	r3, #122	; 0x7a
 800393a:	d01b      	beq.n	8003974 <lcd_psu_update+0x258>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800393c:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800393e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003944:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003948:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800394a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800394e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003952:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003956:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800395a:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800395e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003962:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003966:	2304      	movs	r3, #4
 8003968:	214e      	movs	r1, #78	; 0x4e
 800396a:	4819      	ldr	r0, [pc, #100]	; (80039d0 <lcd_psu_update+0x2b4>)
 800396c:	aa03      	add	r2, sp, #12
 800396e:	9400      	str	r4, [sp, #0]
 8003970:	f005 fb10 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003974:	792b      	ldrb	r3, [r5, #4]
 8003976:	2b7a      	cmp	r3, #122	; 0x7a
 8003978:	d01b      	beq.n	80039b2 <lcd_psu_update+0x296>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800397a:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800397c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003982:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003984:	f043 010d 	orr.w	r1, r3, #13
 8003988:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800398c:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003990:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003994:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003998:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800399c:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039a0:	9000      	str	r0, [sp, #0]
 80039a2:	2304      	movs	r3, #4
 80039a4:	214e      	movs	r1, #78	; 0x4e
 80039a6:	480a      	ldr	r0, [pc, #40]	; (80039d0 <lcd_psu_update+0x2b4>)
 80039a8:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80039aa:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039ae:	f005 faf1 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(encmode){
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <lcd_psu_update+0x2ec>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f43f aece 	beq.w	8003758 <lcd_psu_update+0x3c>
			lcd_put_cur(2, 3 + encpos);
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <lcd_psu_update+0x2f0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80039be:	aa03      	add	r2, sp, #12
			lcd_put_cur(2, 3 + encpos);
 80039c0:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x94;	//0x80|0x14 for row 3 col 2
 80039c4:	3397      	adds	r3, #151	; 0x97
	data_u = (cmd&0xf0);
 80039c6:	e128      	b.n	8003c1a <lcd_psu_update+0x4fe>
 80039c8:	200009a0 	.word	0x200009a0
 80039cc:	c8cc080c 	.word	0xc8cc080c
 80039d0:	20000534 	.word	0x20000534
 80039d4:	2000074d 	.word	0x2000074d
 80039d8:	20000a70 	.word	0x20000a70
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000754 	.word	0x20000754
 80039e4:	200003f0 	.word	0x200003f0
 80039e8:	20000a74 	.word	0x20000a74
 80039ec:	20000004 	.word	0x20000004
 80039f0:	20000750 	.word	0x20000750
 80039f4:	200003ec 	.word	0x200003ec
 80039f8:	787c989c 	.word	0x787c989c
 80039fc:	08011750 	.word	0x08011750
 8003a00:	f8fc080c 	.word	0xf8fc080c
 8003a04:	20000010 	.word	0x20000010
 8003a08:	200003f4 	.word	0x200003f4
 8003a0c:	200003f5 	.word	0x200003f5
		lcd_update_amperage(1,amp_set_aux);
 8003a10:	4b91      	ldr	r3, [pc, #580]	; (8003c58 <lcd_psu_update+0x53c>)
 8003a12:	4628      	mov	r0, r5
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	f7ff fcd1 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003a1a:	4b90      	ldr	r3, [pc, #576]	; (8003c5c <lcd_psu_update+0x540>)
 8003a1c:	2002      	movs	r0, #2
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	f7ff fb1c 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003a24:	4b8e      	ldr	r3, [pc, #568]	; (8003c60 <lcd_psu_update+0x544>)
 8003a26:	2002      	movs	r0, #2
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	f7ff fcc7 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	; (8003c64 <lcd_psu_update+0x548>)
 8003a30:	2003      	movs	r0, #3
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	f7ff fb12 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003a38:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <lcd_psu_update+0x54c>)
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	f7ff fcbd 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003a42:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <lcd_psu_update+0x550>)
 8003a44:	2004      	movs	r0, #4
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	f7ff fb08 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <lcd_psu_update+0x554>)
 8003a4e:	2004      	movs	r0, #4
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	f7ff fcb3 	bl	80033bc <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a56:	4987      	ldr	r1, [pc, #540]	; (8003c74 <lcd_psu_update+0x558>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a58:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003a5a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a5c:	4886      	ldr	r0, [pc, #536]	; (8003c78 <lcd_psu_update+0x55c>)
 8003a5e:	214e      	movs	r1, #78	; 0x4e
 8003a60:	aa03      	add	r2, sp, #12
 8003a62:	9400      	str	r4, [sp, #0]
 8003a64:	f005 fa96 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003a68:	2320      	movs	r3, #32
 8003a6a:	4d84      	ldr	r5, [pc, #528]	; (8003c7c <lcd_psu_update+0x560>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a6c:	4e82      	ldr	r6, [pc, #520]	; (8003c78 <lcd_psu_update+0x55c>)
	data_u = (data&0xf0);
 8003a6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a76:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a7a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003a7e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003a82:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a86:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a8a:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003a8e:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a92:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003a94:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003a98:	214e      	movs	r1, #78	; 0x4e
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	9400      	str	r4, [sp, #0]
 8003a9e:	aa03      	add	r2, sp, #12
 8003aa0:	f005 fa78 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003aa4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e0      	bne.n	8003a6e <lcd_psu_update+0x352>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003aac:	4971      	ldr	r1, [pc, #452]	; (8003c74 <lcd_psu_update+0x558>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003aae:	2304      	movs	r3, #4
 8003ab0:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003ab2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ab4:	4870      	ldr	r0, [pc, #448]	; (8003c78 <lcd_psu_update+0x55c>)
 8003ab6:	214e      	movs	r1, #78	; 0x4e
 8003ab8:	9400      	str	r4, [sp, #0]
 8003aba:	f005 fa6b 	bl	8008f94 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003abe:	4970      	ldr	r1, [pc, #448]	; (8003c80 <lcd_psu_update+0x564>)
		if(keypadarr[0] != 'z'){
 8003ac0:	4d70      	ldr	r5, [pc, #448]	; (8003c84 <lcd_psu_update+0x568>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ac2:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003ac4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ac6:	486c      	ldr	r0, [pc, #432]	; (8003c78 <lcd_psu_update+0x55c>)
 8003ac8:	214e      	movs	r1, #78	; 0x4e
 8003aca:	aa03      	add	r2, sp, #12
 8003acc:	9400      	str	r4, [sp, #0]
 8003ace:	f005 fa61 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003ad2:	782b      	ldrb	r3, [r5, #0]
 8003ad4:	2b7a      	cmp	r3, #122	; 0x7a
 8003ad6:	d01a      	beq.n	8003b0e <lcd_psu_update+0x3f2>
	data_u = (data&0xf0);
 8003ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ae0:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ae4:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ae8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003aec:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003af0:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003af4:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003af8:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003afc:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b00:	2304      	movs	r3, #4
 8003b02:	214e      	movs	r1, #78	; 0x4e
 8003b04:	485c      	ldr	r0, [pc, #368]	; (8003c78 <lcd_psu_update+0x55c>)
 8003b06:	9400      	str	r4, [sp, #0]
 8003b08:	aa03      	add	r2, sp, #12
 8003b0a:	f005 fa43 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8003b0e:	786b      	ldrb	r3, [r5, #1]
 8003b10:	2b7a      	cmp	r3, #122	; 0x7a
 8003b12:	d01b      	beq.n	8003b4c <lcd_psu_update+0x430>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b14:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b16:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b1c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b20:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b22:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b26:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b2a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b2e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b32:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b3a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b3e:	2304      	movs	r3, #4
 8003b40:	214e      	movs	r1, #78	; 0x4e
 8003b42:	484d      	ldr	r0, [pc, #308]	; (8003c78 <lcd_psu_update+0x55c>)
 8003b44:	aa03      	add	r2, sp, #12
 8003b46:	9400      	str	r4, [sp, #0]
 8003b48:	f005 fa24 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8003b4c:	78ab      	ldrb	r3, [r5, #2]
 8003b4e:	2b7a      	cmp	r3, #122	; 0x7a
 8003b50:	d01b      	beq.n	8003b8a <lcd_psu_update+0x46e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b52:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b54:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b5a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b5e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b60:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b64:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b68:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b6c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003b70:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b74:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003b78:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	214e      	movs	r1, #78	; 0x4e
 8003b80:	483d      	ldr	r0, [pc, #244]	; (8003c78 <lcd_psu_update+0x55c>)
 8003b82:	aa03      	add	r2, sp, #12
 8003b84:	9400      	str	r4, [sp, #0]
 8003b86:	f005 fa05 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8003b8a:	78eb      	ldrb	r3, [r5, #3]
 8003b8c:	2b7a      	cmp	r3, #122	; 0x7a
 8003b8e:	d01b      	beq.n	8003bc8 <lcd_psu_update+0x4ac>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b90:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003b92:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003b98:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003b9c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003b9e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ba2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ba6:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003baa:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bae:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bb2:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bb6:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bba:	2304      	movs	r3, #4
 8003bbc:	214e      	movs	r1, #78	; 0x4e
 8003bbe:	482e      	ldr	r0, [pc, #184]	; (8003c78 <lcd_psu_update+0x55c>)
 8003bc0:	aa03      	add	r2, sp, #12
 8003bc2:	9400      	str	r4, [sp, #0]
 8003bc4:	f005 f9e6 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8003bc8:	792b      	ldrb	r3, [r5, #4]
 8003bca:	2b7a      	cmp	r3, #122	; 0x7a
 8003bcc:	d01b      	beq.n	8003c06 <lcd_psu_update+0x4ea>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bce:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003bd0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003bd6:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003bd8:	f043 010d 	orr.w	r1, r3, #13
 8003bdc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003be0:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003be4:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003be8:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003bec:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003bf0:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003bf4:	9000      	str	r0, [sp, #0]
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	214e      	movs	r1, #78	; 0x4e
 8003bfa:	481f      	ldr	r0, [pc, #124]	; (8003c78 <lcd_psu_update+0x55c>)
 8003bfc:	aa03      	add	r2, sp, #12
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003bfe:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c02:	f005 f9c7 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(encmode){
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <lcd_psu_update+0x56c>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f43f ada4 	beq.w	8003758 <lcd_psu_update+0x3c>
			lcd_put_cur(0, 3 + encpos);
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <lcd_psu_update+0x570>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c12:	aa03      	add	r2, sp, #12
			lcd_put_cur(0, 3 + encpos);
 8003c14:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0x80;
 8003c18:	3383      	adds	r3, #131	; 0x83
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c1a:	2464      	movs	r4, #100	; 0x64
	data_l = ((cmd<<4)&0xf0);
 8003c1c:	0119      	lsls	r1, r3, #4
	data_u = (cmd&0xf0);
 8003c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 8003c22:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003c26:	f043 000c 	orr.w	r0, r3, #12
 8003c2a:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003c2e:	f043 0308 	orr.w	r3, r3, #8
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003c32:	f041 0008 	orr.w	r0, r1, #8
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003c36:	f041 050c 	orr.w	r5, r1, #12
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003c3a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003c3e:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c42:	2304      	movs	r3, #4
 8003c44:	214e      	movs	r1, #78	; 0x4e
 8003c46:	9400      	str	r4, [sp, #0]
 8003c48:	480b      	ldr	r0, [pc, #44]	; (8003c78 <lcd_psu_update+0x55c>)
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003c4a:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003c4e:	f005 f9a1 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8003c52:	b004      	add	sp, #16
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
 8003c56:	bf00      	nop
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	20000754 	.word	0x20000754
 8003c60:	200003f0 	.word	0x200003f0
 8003c64:	20000a74 	.word	0x20000a74
 8003c68:	20000004 	.word	0x20000004
 8003c6c:	20000750 	.word	0x20000750
 8003c70:	200003ec 	.word	0x200003ec
 8003c74:	383c888c 	.word	0x383c888c
 8003c78:	20000534 	.word	0x20000534
 8003c7c:	08011750 	.word	0x08011750
 8003c80:	f8fc080c 	.word	0xf8fc080c
 8003c84:	20000010 	.word	0x20000010
 8003c88:	200003f4 	.word	0x200003f4
 8003c8c:	200003f5 	.word	0x200003f5
		lcd_update_voltage(1,volt_set_aux);
 8003c90:	4bb9      	ldr	r3, [pc, #740]	; (8003f78 <lcd_psu_update+0x85c>)
 8003c92:	2001      	movs	r0, #1
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	f7ff f9e1 	bl	800305c <lcd_update_voltage>
		lcd_update_voltage(2,lin_num_aux);
 8003c9a:	4bb8      	ldr	r3, [pc, #736]	; (8003f7c <lcd_psu_update+0x860>)
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	f7ff f9dc 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003ca4:	4bb6      	ldr	r3, [pc, #728]	; (8003f80 <lcd_psu_update+0x864>)
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	f7ff fb87 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003cae:	4bb5      	ldr	r3, [pc, #724]	; (8003f84 <lcd_psu_update+0x868>)
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	f7ff f9d2 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(3,amp_set_main);
 8003cb8:	4bb3      	ldr	r3, [pc, #716]	; (8003f88 <lcd_psu_update+0x86c>)
 8003cba:	2003      	movs	r0, #3
 8003cbc:	6819      	ldr	r1, [r3, #0]
 8003cbe:	f7ff fb7d 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8003cc2:	4bb2      	ldr	r3, [pc, #712]	; (8003f8c <lcd_psu_update+0x870>)
 8003cc4:	2004      	movs	r0, #4
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	f7ff f9c8 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003ccc:	4bb0      	ldr	r3, [pc, #704]	; (8003f90 <lcd_psu_update+0x874>)
 8003cce:	2004      	movs	r0, #4
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	f7ff fb73 	bl	80033bc <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003cd6:	49af      	ldr	r1, [pc, #700]	; (8003f94 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cd8:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003cda:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cdc:	48ae      	ldr	r0, [pc, #696]	; (8003f98 <lcd_psu_update+0x87c>)
 8003cde:	214e      	movs	r1, #78	; 0x4e
 8003ce0:	aa03      	add	r2, sp, #12
 8003ce2:	9400      	str	r4, [sp, #0]
 8003ce4:	f005 f956 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003ce8:	2320      	movs	r3, #32
 8003cea:	4dac      	ldr	r5, [pc, #688]	; (8003f9c <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003cec:	4eaa      	ldr	r6, [pc, #680]	; (8003f98 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 8003cee:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003cf4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003cf8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003cfa:	f043 0309 	orr.w	r3, r3, #9
 8003cfe:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d02:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d06:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003d0a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003d0e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003d12:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d16:	2304      	movs	r3, #4
 8003d18:	214e      	movs	r1, #78	; 0x4e
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	9400      	str	r4, [sp, #0]
 8003d1e:	aa03      	add	r2, sp, #12
 8003d20:	f005 f938 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003d24:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e0      	bne.n	8003cee <lcd_psu_update+0x5d2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d2c:	4999      	ldr	r1, [pc, #612]	; (8003f94 <lcd_psu_update+0x878>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d2e:	2304      	movs	r3, #4
 8003d30:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d32:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d34:	4898      	ldr	r0, [pc, #608]	; (8003f98 <lcd_psu_update+0x87c>)
 8003d36:	214e      	movs	r1, #78	; 0x4e
 8003d38:	9400      	str	r4, [sp, #0]
 8003d3a:	f005 f92b 	bl	8008f94 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d3e:	4998      	ldr	r1, [pc, #608]	; (8003fa0 <lcd_psu_update+0x884>)
		if(keypadarr[0] != 'z'){
 8003d40:	4d98      	ldr	r5, [pc, #608]	; (8003fa4 <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d42:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003d44:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d46:	4894      	ldr	r0, [pc, #592]	; (8003f98 <lcd_psu_update+0x87c>)
 8003d48:	214e      	movs	r1, #78	; 0x4e
 8003d4a:	aa03      	add	r2, sp, #12
 8003d4c:	9400      	str	r4, [sp, #0]
 8003d4e:	f005 f921 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003d52:	782b      	ldrb	r3, [r5, #0]
 8003d54:	2b7a      	cmp	r3, #122	; 0x7a
 8003d56:	f040 812f 	bne.w	8003fb8 <lcd_psu_update+0x89c>
		if(keypadarr[1] != 'z'){
 8003d5a:	786b      	ldrb	r3, [r5, #1]
 8003d5c:	2b7a      	cmp	r3, #122	; 0x7a
 8003d5e:	f040 80ee 	bne.w	8003f3e <lcd_psu_update+0x822>
		if(keypadarr[2] != 'z'){
 8003d62:	78ab      	ldrb	r3, [r5, #2]
 8003d64:	2b7a      	cmp	r3, #122	; 0x7a
 8003d66:	f040 80cd 	bne.w	8003f04 <lcd_psu_update+0x7e8>
		if(keypadarr[3] != 'z'){
 8003d6a:	78eb      	ldrb	r3, [r5, #3]
 8003d6c:	2b7a      	cmp	r3, #122	; 0x7a
 8003d6e:	f040 80ac 	bne.w	8003eca <lcd_psu_update+0x7ae>
		if(keypadarr[4] != 'z'){
 8003d72:	792b      	ldrb	r3, [r5, #4]
 8003d74:	2b7a      	cmp	r3, #122	; 0x7a
 8003d76:	f040 808b 	bne.w	8003e90 <lcd_psu_update+0x774>
		if(encmode){
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <lcd_psu_update+0x88c>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f43f acea 	beq.w	8003758 <lcd_psu_update+0x3c>
			lcd_put_cur(1, 3 + encpos);
 8003d84:	4b89      	ldr	r3, [pc, #548]	; (8003fac <lcd_psu_update+0x890>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003d86:	aa03      	add	r2, sp, #12
			lcd_put_cur(1, 3 + encpos);
 8003d88:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xC0;  //C0
 8003d8c:	33c3      	adds	r3, #195	; 0xc3
	data_u = (cmd&0xf0);
 8003d8e:	e744      	b.n	8003c1a <lcd_psu_update+0x4fe>
		lcd_update_voltage(1,volt_set_aux);
 8003d90:	4b79      	ldr	r3, [pc, #484]	; (8003f78 <lcd_psu_update+0x85c>)
 8003d92:	2001      	movs	r0, #1
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	f7ff f961 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(1,amp_set_aux);
 8003d9a:	4b85      	ldr	r3, [pc, #532]	; (8003fb0 <lcd_psu_update+0x894>)
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	f7ff fb0c 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(2,lin_num_aux);
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <lcd_psu_update+0x860>)
 8003da6:	2002      	movs	r0, #2
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	f7ff f957 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(2,cur_num_aux);
 8003dae:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <lcd_psu_update+0x864>)
 8003db0:	2002      	movs	r0, #2
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	f7ff fb02 	bl	80033bc <lcd_update_amperage>
		lcd_update_voltage(3,volt_set_main);
 8003db8:	4b72      	ldr	r3, [pc, #456]	; (8003f84 <lcd_psu_update+0x868>)
 8003dba:	2003      	movs	r0, #3
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	f7ff f94d 	bl	800305c <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8003dc2:	4b72      	ldr	r3, [pc, #456]	; (8003f8c <lcd_psu_update+0x870>)
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	6819      	ldr	r1, [r3, #0]
 8003dc8:	f7ff f948 	bl	800305c <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8003dcc:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <lcd_psu_update+0x874>)
 8003dce:	4628      	mov	r0, r5
 8003dd0:	6819      	ldr	r1, [r3, #0]
 8003dd2:	f7ff faf3 	bl	80033bc <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003dd6:	4977      	ldr	r1, [pc, #476]	; (8003fb4 <lcd_psu_update+0x898>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003dd8:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003dda:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ddc:	486e      	ldr	r0, [pc, #440]	; (8003f98 <lcd_psu_update+0x87c>)
 8003dde:	214e      	movs	r1, #78	; 0x4e
 8003de0:	aa03      	add	r2, sp, #12
 8003de2:	9400      	str	r4, [sp, #0]
 8003de4:	f005 f8d6 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003de8:	2320      	movs	r3, #32
 8003dea:	4d6c      	ldr	r5, [pc, #432]	; (8003f9c <lcd_psu_update+0x880>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003dec:	4e6a      	ldr	r6, [pc, #424]	; (8003f98 <lcd_psu_update+0x87c>)
	data_l = ((data<<4)&0xf0);
 8003dee:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003df4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003df8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003dfa:	f043 0309 	orr.w	r3, r3, #9
 8003dfe:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e02:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e06:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e0a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003e0e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003e12:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e16:	2304      	movs	r3, #4
 8003e18:	214e      	movs	r1, #78	; 0x4e
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	9400      	str	r4, [sp, #0]
 8003e1e:	aa03      	add	r2, sp, #12
 8003e20:	f005 f8b8 	bl	8008f94 <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8003e24:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e0      	bne.n	8003dee <lcd_psu_update+0x6d2>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e2c:	4961      	ldr	r1, [pc, #388]	; (8003fb4 <lcd_psu_update+0x898>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e2e:	2304      	movs	r3, #4
 8003e30:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e32:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e34:	4858      	ldr	r0, [pc, #352]	; (8003f98 <lcd_psu_update+0x87c>)
 8003e36:	214e      	movs	r1, #78	; 0x4e
 8003e38:	9400      	str	r4, [sp, #0]
 8003e3a:	f005 f8ab 	bl	8008f94 <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e3e:	4958      	ldr	r1, [pc, #352]	; (8003fa0 <lcd_psu_update+0x884>)
		if(keypadarr[0] != 'z'){
 8003e40:	4d58      	ldr	r5, [pc, #352]	; (8003fa4 <lcd_psu_update+0x888>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e42:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003e44:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e46:	4854      	ldr	r0, [pc, #336]	; (8003f98 <lcd_psu_update+0x87c>)
 8003e48:	214e      	movs	r1, #78	; 0x4e
 8003e4a:	aa03      	add	r2, sp, #12
 8003e4c:	9400      	str	r4, [sp, #0]
 8003e4e:	f005 f8a1 	bl	8008f94 <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8003e52:	782b      	ldrb	r3, [r5, #0]
 8003e54:	2b7a      	cmp	r3, #122	; 0x7a
 8003e56:	f040 80e8 	bne.w	800402a <lcd_psu_update+0x90e>
		if(keypadarr[1] != 'z'){
 8003e5a:	786b      	ldrb	r3, [r5, #1]
 8003e5c:	2b7a      	cmp	r3, #122	; 0x7a
 8003e5e:	f040 80c7 	bne.w	8003ff0 <lcd_psu_update+0x8d4>
		if(keypadarr[2] != 'z'){
 8003e62:	78ab      	ldrb	r3, [r5, #2]
 8003e64:	2b7a      	cmp	r3, #122	; 0x7a
 8003e66:	f040 8136 	bne.w	80040d6 <lcd_psu_update+0x9ba>
		if(keypadarr[3] != 'z'){
 8003e6a:	78eb      	ldrb	r3, [r5, #3]
 8003e6c:	2b7a      	cmp	r3, #122	; 0x7a
 8003e6e:	f040 8115 	bne.w	800409c <lcd_psu_update+0x980>
		if(keypadarr[4] != 'z'){
 8003e72:	792b      	ldrb	r3, [r5, #4]
 8003e74:	2b7a      	cmp	r3, #122	; 0x7a
 8003e76:	f040 80f4 	bne.w	8004062 <lcd_psu_update+0x946>
		if(encmode){
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <lcd_psu_update+0x88c>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f43f ac6a 	beq.w	8003758 <lcd_psu_update+0x3c>
			lcd_put_cur(3, 3 + encpos);
 8003e84:	4b49      	ldr	r3, [pc, #292]	; (8003fac <lcd_psu_update+0x890>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e86:	aa03      	add	r2, sp, #12
			lcd_put_cur(3, 3 + encpos);
 8003e88:	f993 3000 	ldrsb.w	r3, [r3]
            col += 0xD4;
 8003e8c:	33d7      	adds	r3, #215	; 0xd7
 8003e8e:	e6c4      	b.n	8003c1a <lcd_psu_update+0x4fe>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003e90:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003e92:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003e98:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003e9a:	f043 010d 	orr.w	r1, r3, #13
 8003e9e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ea2:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ea6:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003eaa:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003eae:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003eb2:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eb6:	9000      	str	r0, [sp, #0]
 8003eb8:	2304      	movs	r3, #4
 8003eba:	214e      	movs	r1, #78	; 0x4e
 8003ebc:	aa03      	add	r2, sp, #12
 8003ebe:	4836      	ldr	r0, [pc, #216]	; (8003f98 <lcd_psu_update+0x87c>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ec0:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ec4:	f005 f866 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8003ec8:	e757      	b.n	8003d7a <lcd_psu_update+0x65e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003eca:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003ecc:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ed2:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003ed6:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ed8:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003edc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ee0:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ee4:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003ee8:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003eec:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003ef0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	214e      	movs	r1, #78	; 0x4e
 8003ef8:	aa03      	add	r2, sp, #12
 8003efa:	9400      	str	r4, [sp, #0]
 8003efc:	4826      	ldr	r0, [pc, #152]	; (8003f98 <lcd_psu_update+0x87c>)
 8003efe:	f005 f849 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8003f02:	e736      	b.n	8003d72 <lcd_psu_update+0x656>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f04:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f06:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f0c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f10:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f12:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f16:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f1a:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f1e:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f22:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f26:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f2a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f2e:	2304      	movs	r3, #4
 8003f30:	214e      	movs	r1, #78	; 0x4e
 8003f32:	aa03      	add	r2, sp, #12
 8003f34:	9400      	str	r4, [sp, #0]
 8003f36:	4818      	ldr	r0, [pc, #96]	; (8003f98 <lcd_psu_update+0x87c>)
 8003f38:	f005 f82c 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8003f3c:	e715      	b.n	8003d6a <lcd_psu_update+0x64e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f3e:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003f40:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f46:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003f4a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f4c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003f50:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f54:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f58:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003f5c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003f60:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003f64:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f68:	2304      	movs	r3, #4
 8003f6a:	214e      	movs	r1, #78	; 0x4e
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	9400      	str	r4, [sp, #0]
 8003f70:	4809      	ldr	r0, [pc, #36]	; (8003f98 <lcd_psu_update+0x87c>)
 8003f72:	f005 f80f 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8003f76:	e6f4      	b.n	8003d62 <lcd_psu_update+0x646>
 8003f78:	20000a70 	.word	0x20000a70
 8003f7c:	20000754 	.word	0x20000754
 8003f80:	200003f0 	.word	0x200003f0
 8003f84:	20000a74 	.word	0x20000a74
 8003f88:	20000004 	.word	0x20000004
 8003f8c:	20000750 	.word	0x20000750
 8003f90:	200003ec 	.word	0x200003ec
 8003f94:	383cc8cc 	.word	0x383cc8cc
 8003f98:	20000534 	.word	0x20000534
 8003f9c:	08011750 	.word	0x08011750
 8003fa0:	f8fc080c 	.word	0xf8fc080c
 8003fa4:	20000010 	.word	0x20000010
 8003fa8:	200003f4 	.word	0x200003f4
 8003fac:	200003f5 	.word	0x200003f5
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	787cd8dc 	.word	0x787cd8dc
	data_u = (data&0xf0);
 8003fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fc0:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fc4:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fc8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fcc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fd0:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003fd4:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fd8:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fdc:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	214e      	movs	r1, #78	; 0x4e
 8003fe4:	9400      	str	r4, [sp, #0]
 8003fe6:	aa03      	add	r2, sp, #12
 8003fe8:	4849      	ldr	r0, [pc, #292]	; (8004110 <lcd_psu_update+0x9f4>)
 8003fea:	f004 ffd3 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8003fee:	e6b4      	b.n	8003d5a <lcd_psu_update+0x63e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003ff0:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8003ff2:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003ff8:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8003ffc:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003ffe:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004002:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004006:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800400a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800400e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004012:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004016:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800401a:	2304      	movs	r3, #4
 800401c:	214e      	movs	r1, #78	; 0x4e
 800401e:	aa03      	add	r2, sp, #12
 8004020:	9400      	str	r4, [sp, #0]
 8004022:	483b      	ldr	r0, [pc, #236]	; (8004110 <lcd_psu_update+0x9f4>)
 8004024:	f004 ffb6 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8004028:	e71b      	b.n	8003e62 <lcd_psu_update+0x746>
	data_u = (data&0xf0);
 800402a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8004032:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004036:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800403a:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800403e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004042:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004046:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800404a:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800404e:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004052:	2304      	movs	r3, #4
 8004054:	214e      	movs	r1, #78	; 0x4e
 8004056:	9400      	str	r4, [sp, #0]
 8004058:	aa03      	add	r2, sp, #12
 800405a:	482d      	ldr	r0, [pc, #180]	; (8004110 <lcd_psu_update+0x9f4>)
 800405c:	f004 ff9a 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 8004060:	e6fb      	b.n	8003e5a <lcd_psu_update+0x73e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004062:	2064      	movs	r0, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8004064:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8004066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800406a:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800406c:	f043 010d 	orr.w	r1, r3, #13
 8004070:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004074:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004078:	f042 0109 	orr.w	r1, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800407c:	f042 040d 	orr.w	r4, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8004080:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8004084:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004088:	9000      	str	r0, [sp, #0]
 800408a:	2304      	movs	r3, #4
 800408c:	214e      	movs	r1, #78	; 0x4e
 800408e:	aa03      	add	r2, sp, #12
 8004090:	481f      	ldr	r0, [pc, #124]	; (8004110 <lcd_psu_update+0x9f4>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8004092:	f88d 400e 	strb.w	r4, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004096:	f004 ff7d 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 800409a:	e6ee      	b.n	8003e7a <lcd_psu_update+0x75e>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800409c:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 800409e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80040a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040a4:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80040a8:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040aa:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040ae:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040b2:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040b6:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040ba:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040be:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040c2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040c6:	2304      	movs	r3, #4
 80040c8:	214e      	movs	r1, #78	; 0x4e
 80040ca:	aa03      	add	r2, sp, #12
 80040cc:	9400      	str	r4, [sp, #0]
 80040ce:	4810      	ldr	r0, [pc, #64]	; (8004110 <lcd_psu_update+0x9f4>)
 80040d0:	f004 ff60 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 80040d4:	e6cd      	b.n	8003e72 <lcd_psu_update+0x756>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80040d6:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 80040d8:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80040da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040de:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80040e2:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040e4:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80040e8:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040ec:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040f0:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80040f4:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80040f8:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80040fc:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004100:	2304      	movs	r3, #4
 8004102:	214e      	movs	r1, #78	; 0x4e
 8004104:	aa03      	add	r2, sp, #12
 8004106:	9400      	str	r4, [sp, #0]
 8004108:	4801      	ldr	r0, [pc, #4]	; (8004110 <lcd_psu_update+0x9f4>)
 800410a:	f004 ff43 	bl	8008f94 <HAL_I2C_Master_Transmit>
}
 800410e:	e6ac      	b.n	8003e6a <lcd_psu_update+0x74e>
 8004110:	20000534 	.word	0x20000534

08004114 <translate_keypad>:
float translate_keypad(void){
 8004114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(keypadarr[i] == '.'){
 8004118:	4db8      	ldr	r5, [pc, #736]	; (80043fc <translate_keypad+0x2e8>)
 800411a:	f895 8000 	ldrb.w	r8, [r5]
 800411e:	786e      	ldrb	r6, [r5, #1]
 8004120:	f1b8 032e 	subs.w	r3, r8, #46	; 0x2e
 8004124:	78af      	ldrb	r7, [r5, #2]
 8004126:	bf18      	it	ne
 8004128:	f04f 33ff 	movne.w	r3, #4294967295
	for(int i = 0; i < keypadlength; i++){
 800412c:	2e2e      	cmp	r6, #46	; 0x2e
 800412e:	bf08      	it	eq
 8004130:	2301      	moveq	r3, #1
		if(keypadarr[i] == '.'){
 8004132:	2f2e      	cmp	r7, #46	; 0x2e
 8004134:	f000 80e4 	beq.w	8004300 <translate_keypad+0x1ec>
 8004138:	f895 9003 	ldrb.w	r9, [r5, #3]
 800413c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004140:	d051      	beq.n	80041e6 <translate_keypad+0xd2>
 8004142:	7928      	ldrb	r0, [r5, #4]
 8004144:	282e      	cmp	r0, #46	; 0x2e
 8004146:	f000 8141 	beq.w	80043cc <translate_keypad+0x2b8>
	if(decimallocation == -1){
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	f040 8141 	bne.w	80043d2 <translate_keypad+0x2be>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004150:	3830      	subs	r0, #48	; 0x30
 8004152:	b2c3      	uxtb	r3, r0
 8004154:	2b09      	cmp	r3, #9
 8004156:	f240 8127 	bls.w	80043a8 <translate_keypad+0x294>
		int count = 1;
 800415a:	2501      	movs	r5, #1
	float num = 0;
 800415c:	2400      	movs	r4, #0
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800415e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
 8004162:	fa5f f389 	uxtb.w	r3, r9
 8004166:	2b09      	cmp	r3, #9
 8004168:	d80b      	bhi.n	8004182 <translate_keypad+0x6e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800416a:	fb05 f009 	mul.w	r0, r5, r9
 800416e:	f7fc fdcd 	bl	8000d0c <__aeabi_i2f>
 8004172:	4601      	mov	r1, r0
 8004174:	4620      	mov	r0, r4
 8004176:	f7fc fd15 	bl	8000ba4 <__addsf3>
 800417a:	4604      	mov	r4, r0
				count = count * 10;
 800417c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004180:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004182:	3f30      	subs	r7, #48	; 0x30
 8004184:	b2fb      	uxtb	r3, r7
 8004186:	2b09      	cmp	r3, #9
 8004188:	d80b      	bhi.n	80041a2 <translate_keypad+0x8e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800418a:	fb05 f007 	mul.w	r0, r5, r7
 800418e:	f7fc fdbd 	bl	8000d0c <__aeabi_i2f>
 8004192:	4601      	mov	r1, r0
 8004194:	4620      	mov	r0, r4
 8004196:	f7fc fd05 	bl	8000ba4 <__addsf3>
 800419a:	4604      	mov	r4, r0
				count = count * 10;
 800419c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041a0:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041a2:	3e30      	subs	r6, #48	; 0x30
 80041a4:	b2f3      	uxtb	r3, r6
 80041a6:	2b09      	cmp	r3, #9
 80041a8:	d80b      	bhi.n	80041c2 <translate_keypad+0xae>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80041aa:	fb05 f006 	mul.w	r0, r5, r6
 80041ae:	f7fc fdad 	bl	8000d0c <__aeabi_i2f>
 80041b2:	4601      	mov	r1, r0
 80041b4:	4620      	mov	r0, r4
 80041b6:	f7fc fcf5 	bl	8000ba4 <__addsf3>
 80041ba:	4604      	mov	r4, r0
				count = count * 10;
 80041bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041c0:	006d      	lsls	r5, r5, #1
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041c2:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80041c6:	fa5f f388 	uxtb.w	r3, r8
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	d808      	bhi.n	80041e0 <translate_keypad+0xcc>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80041ce:	fb05 f008 	mul.w	r0, r5, r8
 80041d2:	f7fc fd9b 	bl	8000d0c <__aeabi_i2f>
 80041d6:	4601      	mov	r1, r0
 80041d8:	4620      	mov	r0, r4
 80041da:	f7fc fce3 	bl	8000ba4 <__addsf3>
 80041de:	4604      	mov	r4, r0
}
 80041e0:	4620      	mov	r0, r4
 80041e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 80041e6:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 80041e8:	2b2e      	cmp	r3, #46	; 0x2e
 80041ea:	bf0c      	ite	eq
 80041ec:	f04f 0904 	moveq.w	r9, #4
 80041f0:	f04f 0903 	movne.w	r9, #3
		for(int i = decimallocation-1; i >=0; i--){
 80041f4:	f109 37ff 	add.w	r7, r9, #4294967295
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80041f8:	5de8      	ldrb	r0, [r5, r7]
 80041fa:	3830      	subs	r0, #48	; 0x30
 80041fc:	b2c3      	uxtb	r3, r0
 80041fe:	2b09      	cmp	r3, #9
 8004200:	f240 808b 	bls.w	800431a <translate_keypad+0x206>
		int count = 1;
 8004204:	2601      	movs	r6, #1
	float num = 0;
 8004206:	2400      	movs	r4, #0
		for(int i = decimallocation-1; i >=0; i--){
 8004208:	1e7b      	subs	r3, r7, #1
 800420a:	2f00      	cmp	r7, #0
 800420c:	f000 80a6 	beq.w	800435c <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004210:	5ce8      	ldrb	r0, [r5, r3]
 8004212:	3830      	subs	r0, #48	; 0x30
 8004214:	b2c3      	uxtb	r3, r0
 8004216:	2b09      	cmp	r3, #9
 8004218:	d80b      	bhi.n	8004232 <translate_keypad+0x11e>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800421a:	fb06 f000 	mul.w	r0, r6, r0
 800421e:	f7fc fd75 	bl	8000d0c <__aeabi_i2f>
 8004222:	4601      	mov	r1, r0
 8004224:	4620      	mov	r0, r4
 8004226:	f7fc fcbd 	bl	8000ba4 <__addsf3>
 800422a:	4604      	mov	r4, r0
				count = count * 10;
 800422c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004230:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation-1; i >=0; i--){
 8004232:	2f01      	cmp	r7, #1
 8004234:	f1a7 0a02 	sub.w	sl, r7, #2
 8004238:	f000 8090 	beq.w	800435c <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800423c:	f815 000a 	ldrb.w	r0, [r5, sl]
 8004240:	3830      	subs	r0, #48	; 0x30
 8004242:	b2c3      	uxtb	r3, r0
 8004244:	2b09      	cmp	r3, #9
 8004246:	f240 80a2 	bls.w	800438e <translate_keypad+0x27a>
		for(int i = decimallocation-1; i >=0; i--){
 800424a:	f1ba 0f00 	cmp.w	sl, #0
 800424e:	f000 8085 	beq.w	800435c <translate_keypad+0x248>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004252:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8004256:	fa5f f388 	uxtb.w	r3, r8
 800425a:	2b09      	cmp	r3, #9
 800425c:	f240 80ac 	bls.w	80043b8 <translate_keypad+0x2a4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004260:	f1b9 0f04 	cmp.w	r9, #4
 8004264:	f109 0701 	add.w	r7, r9, #1
 8004268:	d0ba      	beq.n	80041e0 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800426a:	5de8      	ldrb	r0, [r5, r7]
 800426c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004270:	2b09      	cmp	r3, #9
 8004272:	d95c      	bls.n	800432e <translate_keypad+0x21a>
 8004274:	260a      	movs	r6, #10
		for(int i = decimallocation+1; i < keypadlength; i++){
 8004276:	2f04      	cmp	r7, #4
 8004278:	f107 0801 	add.w	r8, r7, #1
 800427c:	d0b0      	beq.n	80041e0 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800427e:	f815 0008 	ldrb.w	r0, [r5, r8]
 8004282:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004286:	2b09      	cmp	r3, #9
 8004288:	d814      	bhi.n	80042b4 <translate_keypad+0x1a0>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800428a:	f7fc fd3f 	bl	8000d0c <__aeabi_i2f>
 800428e:	495c      	ldr	r1, [pc, #368]	; (8004400 <translate_keypad+0x2ec>)
 8004290:	f7fc fc86 	bl	8000ba0 <__aeabi_fsub>
 8004294:	4607      	mov	r7, r0
 8004296:	4630      	mov	r0, r6
 8004298:	f7fc fd38 	bl	8000d0c <__aeabi_i2f>
 800429c:	4601      	mov	r1, r0
 800429e:	4638      	mov	r0, r7
 80042a0:	f7fc fe3c 	bl	8000f1c <__aeabi_fdiv>
 80042a4:	4601      	mov	r1, r0
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7fc fc7c 	bl	8000ba4 <__addsf3>
 80042ac:	4604      	mov	r4, r0
				count = count * 10;
 80042ae:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80042b2:	0076      	lsls	r6, r6, #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 80042b4:	f1b8 0f04 	cmp.w	r8, #4
 80042b8:	f108 0701 	add.w	r7, r8, #1
 80042bc:	d090      	beq.n	80041e0 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042be:	5de8      	ldrb	r0, [r5, r7]
 80042c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	d94c      	bls.n	8004362 <translate_keypad+0x24e>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80042c8:	2f03      	cmp	r7, #3
 80042ca:	d189      	bne.n	80041e0 <translate_keypad+0xcc>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80042cc:	7928      	ldrb	r0, [r5, #4]
 80042ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	d884      	bhi.n	80041e0 <translate_keypad+0xcc>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80042d6:	f7fc fd19 	bl	8000d0c <__aeabi_i2f>
 80042da:	4949      	ldr	r1, [pc, #292]	; (8004400 <translate_keypad+0x2ec>)
 80042dc:	f7fc fc60 	bl	8000ba0 <__aeabi_fsub>
 80042e0:	4605      	mov	r5, r0
 80042e2:	4630      	mov	r0, r6
 80042e4:	f7fc fd12 	bl	8000d0c <__aeabi_i2f>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4628      	mov	r0, r5
 80042ec:	f7fc fe16 	bl	8000f1c <__aeabi_fdiv>
 80042f0:	4601      	mov	r1, r0
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7fc fc56 	bl	8000ba4 <__addsf3>
 80042f8:	4604      	mov	r4, r0
}
 80042fa:	4620      	mov	r0, r4
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(keypadarr[i] == '.'){
 8004300:	78eb      	ldrb	r3, [r5, #3]
 8004302:	2b2e      	cmp	r3, #46	; 0x2e
 8004304:	f43f af6f 	beq.w	80041e6 <translate_keypad+0xd2>
 8004308:	792b      	ldrb	r3, [r5, #4]
	for(int i = 0; i < keypadlength; i++){
 800430a:	2b2e      	cmp	r3, #46	; 0x2e
 800430c:	bf0c      	ite	eq
 800430e:	f04f 0904 	moveq.w	r9, #4
 8004312:	f04f 0902 	movne.w	r9, #2
 8004316:	e76d      	b.n	80041f4 <translate_keypad+0xe0>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8004318:	2700      	movs	r7, #0
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800431a:	f7fc fcf7 	bl	8000d0c <__aeabi_i2f>
 800431e:	2100      	movs	r1, #0
 8004320:	f7fc fc40 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004324:	260a      	movs	r6, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8004326:	4604      	mov	r4, r0
				count = count * 10;
 8004328:	e76e      	b.n	8004208 <translate_keypad+0xf4>
		for(int i = decimallocation+1; i < keypadlength; i++){
 800432a:	2701      	movs	r7, #1
	float num = 0;
 800432c:	2400      	movs	r4, #0
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 800432e:	f7fc fced 	bl	8000d0c <__aeabi_i2f>
 8004332:	4933      	ldr	r1, [pc, #204]	; (8004400 <translate_keypad+0x2ec>)
 8004334:	f7fc fc34 	bl	8000ba0 <__aeabi_fsub>
 8004338:	4932      	ldr	r1, [pc, #200]	; (8004404 <translate_keypad+0x2f0>)
 800433a:	f7fc fdef 	bl	8000f1c <__aeabi_fdiv>
 800433e:	4601      	mov	r1, r0
 8004340:	4620      	mov	r0, r4
 8004342:	f7fc fc2f 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004346:	2664      	movs	r6, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004348:	4604      	mov	r4, r0
				count = count * 10;
 800434a:	e794      	b.n	8004276 <translate_keypad+0x162>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800434c:	f1a8 0030 	sub.w	r0, r8, #48	; 0x30
 8004350:	b2c3      	uxtb	r3, r0
 8004352:	2b09      	cmp	r3, #9
 8004354:	f04f 0901 	mov.w	r9, #1
 8004358:	d9de      	bls.n	8004318 <translate_keypad+0x204>
	float num = 0;
 800435a:	2400      	movs	r4, #0
		for(int i = decimallocation+1; i < keypadlength; i++){
 800435c:	f109 0701 	add.w	r7, r9, #1
 8004360:	e783      	b.n	800426a <translate_keypad+0x156>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004362:	f7fc fcd3 	bl	8000d0c <__aeabi_i2f>
 8004366:	4926      	ldr	r1, [pc, #152]	; (8004400 <translate_keypad+0x2ec>)
 8004368:	f7fc fc1a 	bl	8000ba0 <__aeabi_fsub>
 800436c:	4680      	mov	r8, r0
 800436e:	4630      	mov	r0, r6
 8004370:	f7fc fccc 	bl	8000d0c <__aeabi_i2f>
 8004374:	4601      	mov	r1, r0
 8004376:	4640      	mov	r0, r8
 8004378:	f7fc fdd0 	bl	8000f1c <__aeabi_fdiv>
 800437c:	4601      	mov	r1, r0
 800437e:	4620      	mov	r0, r4
 8004380:	f7fc fc10 	bl	8000ba4 <__addsf3>
				count = count * 10;
 8004384:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8004388:	4604      	mov	r4, r0
				count = count * 10;
 800438a:	0076      	lsls	r6, r6, #1
 800438c:	e79c      	b.n	80042c8 <translate_keypad+0x1b4>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800438e:	fb06 f000 	mul.w	r0, r6, r0
 8004392:	f7fc fcbb 	bl	8000d0c <__aeabi_i2f>
 8004396:	4601      	mov	r1, r0
 8004398:	4620      	mov	r0, r4
 800439a:	f7fc fc03 	bl	8000ba4 <__addsf3>
				count = count * 10;
 800439e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043a2:	4604      	mov	r4, r0
				count = count * 10;
 80043a4:	0076      	lsls	r6, r6, #1
 80043a6:	e750      	b.n	800424a <translate_keypad+0x136>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043a8:	f7fc fcb0 	bl	8000d0c <__aeabi_i2f>
 80043ac:	2100      	movs	r1, #0
 80043ae:	f7fc fbf9 	bl	8000ba4 <__addsf3>
				count = count * 10;
 80043b2:	250a      	movs	r5, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043b4:	4604      	mov	r4, r0
				count = count * 10;
 80043b6:	e6d2      	b.n	800415e <translate_keypad+0x4a>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80043b8:	fb06 f008 	mul.w	r0, r6, r8
 80043bc:	f7fc fca6 	bl	8000d0c <__aeabi_i2f>
 80043c0:	4601      	mov	r1, r0
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7fc fbee 	bl	8000ba4 <__addsf3>
 80043c8:	4604      	mov	r4, r0
				count = count * 10;
 80043ca:	e749      	b.n	8004260 <translate_keypad+0x14c>
	for(int i = 0; i < keypadlength; i++){
 80043cc:	f04f 0904 	mov.w	r9, #4
 80043d0:	e710      	b.n	80041f4 <translate_keypad+0xe0>
		for(int i = decimallocation-1; i >=0; i--){
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1ba      	bne.n	800434c <translate_keypad+0x238>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80043da:	2b09      	cmp	r3, #9
 80043dc:	4630      	mov	r0, r6
 80043de:	d9a4      	bls.n	800432a <translate_keypad+0x216>
 80043e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80043e4:	2b09      	cmp	r3, #9
 80043e6:	4638      	mov	r0, r7
 80043e8:	d804      	bhi.n	80043f4 <translate_keypad+0x2e0>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043ea:	f04f 0802 	mov.w	r8, #2
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043ee:	260a      	movs	r6, #10
	float num = 0;
 80043f0:	2400      	movs	r4, #0
 80043f2:	e74a      	b.n	800428a <translate_keypad+0x176>
		for(int i = decimallocation+1; i < keypadlength; i++){
 80043f4:	2703      	movs	r7, #3
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80043f6:	260a      	movs	r6, #10
	float num = 0;
 80043f8:	2400      	movs	r4, #0
 80043fa:	e760      	b.n	80042be <translate_keypad+0x1aa>
 80043fc:	20000010 	.word	0x20000010
 8004400:	42400000 	.word	0x42400000
 8004404:	41200000 	.word	0x41200000

08004408 <fill_keypad>:
void fill_keypad(uint8_t va, float num){
 8004408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(keypaditerator < 4){
 800440c:	4e70      	ldr	r6, [pc, #448]	; (80045d0 <fill_keypad+0x1c8>)
void fill_keypad(uint8_t va, float num){
 800440e:	460d      	mov	r5, r1
	while(keypaditerator < 4){
 8004410:	f996 4000 	ldrsb.w	r4, [r6]
 8004414:	2c03      	cmp	r4, #3
 8004416:	dc2d      	bgt.n	8004474 <fill_keypad+0x6c>
 8004418:	496e      	ldr	r1, [pc, #440]	; (80045d4 <fill_keypad+0x1cc>)
 800441a:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 80045d8 <fill_keypad+0x1d0>
 800441e:	2700      	movs	r7, #0
			keypadarr[0] = num;
 8004420:	f04f 0b7a 	mov.w	fp, #122	; 0x7a
 8004424:	f891 9004 	ldrb.w	r9, [r1, #4]
 8004428:	f89a 8000 	ldrb.w	r8, [sl]
 800442c:	f891 e003 	ldrb.w	lr, [r1, #3]
 8004430:	788b      	ldrb	r3, [r1, #2]
 8004432:	784a      	ldrb	r2, [r1, #1]
 8004434:	f891 c000 	ldrb.w	ip, [r1]
 8004438:	b2e4      	uxtb	r4, r4
 800443a:	e004      	b.n	8004446 <fill_keypad+0x3e>
	while(keypaditerator < 4){
 800443c:	469e      	mov	lr, r3
 800443e:	4613      	mov	r3, r2
 8004440:	4662      	mov	r2, ip
			keypadarr[0] = num;
 8004442:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
	while(keypaditerator < 4){
 8004446:	3401      	adds	r4, #1
			if(keypadarr[4] == '.'){
 8004448:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800444c:	b2e4      	uxtb	r4, r4
			if(keypadarr[4] == '.'){
 800444e:	bf04      	itt	eq
 8004450:	2701      	moveq	r7, #1
 8004452:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8004456:	2c04      	cmp	r4, #4
 8004458:	46f1      	mov	r9, lr
 800445a:	d1ef      	bne.n	800443c <fill_keypad+0x34>
 800445c:	f881 c001 	strb.w	ip, [r1, #1]
 8004460:	708a      	strb	r2, [r1, #2]
 8004462:	f881 e004 	strb.w	lr, [r1, #4]
 8004466:	70cb      	strb	r3, [r1, #3]
 8004468:	f881 b000 	strb.w	fp, [r1]
 800446c:	7034      	strb	r4, [r6, #0]
 800446e:	b10f      	cbz	r7, 8004474 <fill_keypad+0x6c>
 8004470:	f88a 8000 	strb.w	r8, [sl]
	if(va){
 8004474:	b370      	cbz	r0, 80044d4 <fill_keypad+0xcc>
		if(num <= 0.0001){
 8004476:	4628      	mov	r0, r5
 8004478:	f7fb ffee 	bl	8000458 <__aeabi_f2d>
 800447c:	a34c      	add	r3, pc, #304	; (adr r3, 80045b0 <fill_keypad+0x1a8>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	4680      	mov	r8, r0
 8004484:	4689      	mov	r9, r1
 8004486:	f7fc fabb 	bl	8000a00 <__aeabi_dcmple>
 800448a:	2800      	cmp	r0, #0
 800448c:	d155      	bne.n	800453a <fill_keypad+0x132>
		int temp = (int)(num * 1000);
 800448e:	4953      	ldr	r1, [pc, #332]	; (80045dc <fill_keypad+0x1d4>)
 8004490:	4628      	mov	r0, r5
 8004492:	f7fc fc8f 	bl	8000db4 <__aeabi_fmul>
 8004496:	f7fc fe53 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 800449a:	2800      	cmp	r0, #0
 800449c:	d06e      	beq.n	800457c <fill_keypad+0x174>
					keypadarr[keypaditerator] = '.';
 800449e:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80044a2:	494c      	ldr	r1, [pc, #304]	; (80045d4 <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044a4:	4f4e      	ldr	r7, [pc, #312]	; (80045e0 <fill_keypad+0x1d8>)
 80044a6:	fb87 3500 	smull	r3, r5, r7, r0
 80044aa:	17c3      	asrs	r3, r0, #31
 80044ac:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 80044b0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 80044b4:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 80044b8:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 80044ba:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044bc:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 80044be:	b254      	sxtb	r4, r2
				if(keypaditerator == 1){
 80044c0:	2c01      	cmp	r4, #1
				temp = temp / 10;
 80044c2:	4618      	mov	r0, r3
				if(keypaditerator == 1){
 80044c4:	d06a      	beq.n	800459c <fill_keypad+0x194>
			while(temp != 0 && keypaditerator >= 0){
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d055      	beq.n	8004576 <fill_keypad+0x16e>
 80044ca:	2c00      	cmp	r4, #0
 80044cc:	daeb      	bge.n	80044a6 <fill_keypad+0x9e>
 80044ce:	7034      	strb	r4, [r6, #0]
}
 80044d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(num <= 0.001){
 80044d4:	4628      	mov	r0, r5
 80044d6:	f7fb ffbf 	bl	8000458 <__aeabi_f2d>
 80044da:	a337      	add	r3, pc, #220	; (adr r3, 80045b8 <fill_keypad+0x1b0>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	4680      	mov	r8, r0
 80044e2:	4689      	mov	r9, r1
 80044e4:	f7fc fa8c 	bl	8000a00 <__aeabi_dcmple>
 80044e8:	b9f0      	cbnz	r0, 8004528 <fill_keypad+0x120>
		int temp = (int)(num * 100);
 80044ea:	493e      	ldr	r1, [pc, #248]	; (80045e4 <fill_keypad+0x1dc>)
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7fc fc61 	bl	8000db4 <__aeabi_fmul>
 80044f2:	f7fc fe25 	bl	8001140 <__aeabi_f2iz>
			while(temp != 0 && keypaditerator >= 0){
 80044f6:	b388      	cbz	r0, 800455c <fill_keypad+0x154>
					keypadarr[keypaditerator] = '.';
 80044f8:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80044fc:	4935      	ldr	r1, [pc, #212]	; (80045d4 <fill_keypad+0x1cc>)
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 80044fe:	4f38      	ldr	r7, [pc, #224]	; (80045e0 <fill_keypad+0x1d8>)
 8004500:	fb87 3500 	smull	r3, r5, r7, r0
 8004504:	17c3      	asrs	r3, r0, #31
 8004506:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 800450a:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800450e:	eba0 0045 	sub.w	r0, r0, r5, lsl #1
 8004512:	3030      	adds	r0, #48	; 0x30
				keypaditerator--;
 8004514:	1e62      	subs	r2, r4, #1
				keypadarr[keypaditerator] = (temp % 10) + (int)'0';
 8004516:	5508      	strb	r0, [r1, r4]
				keypaditerator--;
 8004518:	b254      	sxtb	r4, r2
				if(keypaditerator == 2){
 800451a:	2c02      	cmp	r4, #2
				temp = temp / 10;
 800451c:	4618      	mov	r0, r3
				if(keypaditerator == 2){
 800451e:	d015      	beq.n	800454c <fill_keypad+0x144>
			while(temp != 0 && keypaditerator >= 0){
 8004520:	b1cb      	cbz	r3, 8004556 <fill_keypad+0x14e>
 8004522:	2c00      	cmp	r4, #0
 8004524:	daec      	bge.n	8004500 <fill_keypad+0xf8>
 8004526:	e7d2      	b.n	80044ce <fill_keypad+0xc6>
			keypadarr[4] = '0';
 8004528:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 800452a:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <fill_keypad+0x1cc>)
 800452e:	482e      	ldr	r0, [pc, #184]	; (80045e8 <fill_keypad+0x1e0>)
			keypadarr[4] = '0';
 8004530:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 8004532:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 8004534:	7032      	strb	r2, [r6, #0]
}
 8004536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			keypadarr[4] = '0';
 800453a:	2130      	movs	r1, #48	; 0x30
			keypaditerator = -1;
 800453c:	22ff      	movs	r2, #255	; 0xff
			keypadarr[0] = '0';
 800453e:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <fill_keypad+0x1cc>)
 8004540:	482a      	ldr	r0, [pc, #168]	; (80045ec <fill_keypad+0x1e4>)
			keypadarr[4] = '0';
 8004542:	7119      	strb	r1, [r3, #4]
			keypadarr[0] = '0';
 8004544:	6018      	str	r0, [r3, #0]
			keypaditerator = -1;
 8004546:	7032      	strb	r2, [r6, #0]
}
 8004548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 800454c:	2401      	movs	r4, #1
					keypadarr[keypaditerator] = '.';
 800454e:	f881 c002 	strb.w	ip, [r1, #2]
			while(temp != 0 && keypaditerator >= 0){
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1d4      	bne.n	8004500 <fill_keypad+0xf8>
			if(keypaditerator >= 0 && num <= 9.999999){
 8004556:	1c62      	adds	r2, r4, #1
 8004558:	7034      	strb	r4, [r6, #0]
 800455a:	d0ec      	beq.n	8004536 <fill_keypad+0x12e>
 800455c:	a318      	add	r3, pc, #96	; (adr r3, 80045c0 <fill_keypad+0x1b8>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	4640      	mov	r0, r8
 8004564:	4649      	mov	r1, r9
 8004566:	f7fc fa4b 	bl	8000a00 <__aeabi_dcmple>
 800456a:	b138      	cbz	r0, 800457c <fill_keypad+0x174>
				keypadarr[keypaditerator] = '0';
 800456c:	2230      	movs	r2, #48	; 0x30
 800456e:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <fill_keypad+0x1cc>)
 8004570:	551a      	strb	r2, [r3, r4]
				keypaditerator--;
 8004572:	3c01      	subs	r4, #1
 8004574:	b264      	sxtb	r4, r4
			if(keypaditerator >= 0 && num <= 0.999999){
 8004576:	1c63      	adds	r3, r4, #1
				keypaditerator--;
 8004578:	7034      	strb	r4, [r6, #0]
			if(keypaditerator >= 0 && num <= 0.999999){
 800457a:	d0dc      	beq.n	8004536 <fill_keypad+0x12e>
 800457c:	a312      	add	r3, pc, #72	; (adr r3, 80045c8 <fill_keypad+0x1c0>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	4640      	mov	r0, r8
 8004584:	4649      	mov	r1, r9
 8004586:	f7fc fa3b 	bl	8000a00 <__aeabi_dcmple>
 800458a:	2800      	cmp	r0, #0
 800458c:	d0d3      	beq.n	8004536 <fill_keypad+0x12e>
				keypadarr[keypaditerator] = '0';
 800458e:	2230      	movs	r2, #48	; 0x30
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <fill_keypad+0x1cc>)
				keypaditerator--;
 8004592:	1e61      	subs	r1, r4, #1
 8004594:	7031      	strb	r1, [r6, #0]
				keypadarr[keypaditerator] = '0';
 8004596:	551a      	strb	r2, [r3, r4]
}
 8004598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					keypaditerator--;
 800459c:	2400      	movs	r4, #0
					keypadarr[keypaditerator] = '.';
 800459e:	f881 c001 	strb.w	ip, [r1, #1]
			while(temp != 0 && keypaditerator >= 0){
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f47f af7f 	bne.w	80044a6 <fill_keypad+0x9e>
 80045a8:	e7e5      	b.n	8004576 <fill_keypad+0x16e>
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w
 80045b0:	eb1c432d 	.word	0xeb1c432d
 80045b4:	3f1a36e2 	.word	0x3f1a36e2
 80045b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80045bc:	3f50624d 	.word	0x3f50624d
 80045c0:	de7210bf 	.word	0xde7210bf
 80045c4:	4023ffff 	.word	0x4023ffff
 80045c8:	e7210be9 	.word	0xe7210be9
 80045cc:	3feffffd 	.word	0x3feffffd
 80045d0:	20000015 	.word	0x20000015
 80045d4:	20000010 	.word	0x20000010
 80045d8:	2000074c 	.word	0x2000074c
 80045dc:	447a0000 	.word	0x447a0000
 80045e0:	66666667 	.word	0x66666667
 80045e4:	42c80000 	.word	0x42c80000
 80045e8:	302e3030 	.word	0x302e3030
 80045ec:	30302e30 	.word	0x30302e30

080045f0 <inc_arr_v>:
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045f0:	4603      	mov	r3, r0
void inc_arr_v(int8_t pos){
 80045f2:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045f4:	bb68      	cbnz	r0, 8004652 <inc_arr_v+0x62>
 80045f6:	4c4e      	ldr	r4, [pc, #312]	; (8004730 <inc_arr_v+0x140>)
 80045f8:	7822      	ldrb	r2, [r4, #0]
 80045fa:	2a31      	cmp	r2, #49	; 0x31
 80045fc:	d00c      	beq.n	8004618 <inc_arr_v+0x28>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80045fe:	2a30      	cmp	r2, #48	; 0x30
 8004600:	d076      	beq.n	80046f0 <inc_arr_v+0x100>
			if(keypadarr[pos] < '9'){
 8004602:	5ce2      	ldrb	r2, [r4, r3]
 8004604:	4619      	mov	r1, r3
 8004606:	2a38      	cmp	r2, #56	; 0x38
 8004608:	d90a      	bls.n	8004620 <inc_arr_v+0x30>
				keypadarr[pos] = '0';
 800460a:	2230      	movs	r2, #48	; 0x30
				inc_arr_v(pos-1);
 800460c:	1e58      	subs	r0, r3, #1
 800460e:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 8004610:	54e2      	strb	r2, [r4, r3]
				inc_arr_v(pos-1);
 8004612:	f7ff ffed 	bl	80045f0 <inc_arr_v>
 8004616:	e005      	b.n	8004624 <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 8004618:	7861      	ldrb	r1, [r4, #1]
 800461a:	292f      	cmp	r1, #47	; 0x2f
 800461c:	d855      	bhi.n	80046ca <inc_arr_v+0xda>
			if(keypadarr[pos] < '9'){
 800461e:	4619      	mov	r1, r3
				keypadarr[pos]++;
 8004620:	3201      	adds	r2, #1
 8004622:	5462      	strb	r2, [r4, r1]
		if(keypadarr[i] != 'z'){
 8004624:	7823      	ldrb	r3, [r4, #0]
 8004626:	2b7a      	cmp	r3, #122	; 0x7a
 8004628:	d10e      	bne.n	8004648 <inc_arr_v+0x58>
 800462a:	7863      	ldrb	r3, [r4, #1]
 800462c:	2b7a      	cmp	r3, #122	; 0x7a
 800462e:	d16d      	bne.n	800470c <inc_arr_v+0x11c>
 8004630:	78a3      	ldrb	r3, [r4, #2]
 8004632:	2b7a      	cmp	r3, #122	; 0x7a
 8004634:	d16c      	bne.n	8004710 <inc_arr_v+0x120>
 8004636:	78e3      	ldrb	r3, [r4, #3]
 8004638:	2b7a      	cmp	r3, #122	; 0x7a
 800463a:	d16b      	bne.n	8004714 <inc_arr_v+0x124>
 800463c:	7923      	ldrb	r3, [r4, #4]
 800463e:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004640:	bf18      	it	ne
 8004642:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004644:	d101      	bne.n	800464a <inc_arr_v+0x5a>
}
 8004646:	bd10      	pop	{r4, pc}
	for(int i = 0; i < keypadlength; i++){
 8004648:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 800464a:	4a3a      	ldr	r2, [pc, #232]	; (8004734 <inc_arr_v+0x144>)
 800464c:	3b01      	subs	r3, #1
 800464e:	7013      	strb	r3, [r2, #0]
}
 8004650:	bd10      	pop	{r4, pc}
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004652:	2801      	cmp	r0, #1
 8004654:	d113      	bne.n	800467e <inc_arr_v+0x8e>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 8004656:	4c36      	ldr	r4, [pc, #216]	; (8004730 <inc_arr_v+0x140>)
 8004658:	7822      	ldrb	r2, [r4, #0]
 800465a:	2a31      	cmp	r2, #49	; 0x31
 800465c:	d1d1      	bne.n	8004602 <inc_arr_v+0x12>
 800465e:	7862      	ldrb	r2, [r4, #1]
 8004660:	2a32      	cmp	r2, #50	; 0x32
 8004662:	d027      	beq.n	80046b4 <inc_arr_v+0xc4>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004664:	2a31      	cmp	r2, #49	; 0x31
 8004666:	d1cc      	bne.n	8004602 <inc_arr_v+0x12>
 8004668:	78e1      	ldrb	r1, [r4, #3]
 800466a:	2930      	cmp	r1, #48	; 0x30
 800466c:	d802      	bhi.n	8004674 <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800466e:	7921      	ldrb	r1, [r4, #4]
 8004670:	2930      	cmp	r1, #48	; 0x30
 8004672:	d9d4      	bls.n	800461e <inc_arr_v+0x2e>
		keypadarr[4] = '0';
 8004674:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '1';
 8004676:	4a30      	ldr	r2, [pc, #192]	; (8004738 <inc_arr_v+0x148>)
		keypadarr[4] = '0';
 8004678:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '1';
 800467a:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 800467c:	e7d2      	b.n	8004624 <inc_arr_v+0x34>
		!(pos == 1 && keypadarr[0] == '1' && keypadarr[1] == '1' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800467e:	2803      	cmp	r0, #3
 8004680:	d10f      	bne.n	80046a2 <inc_arr_v+0xb2>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004682:	4c2b      	ldr	r4, [pc, #172]	; (8004730 <inc_arr_v+0x140>)
 8004684:	7822      	ldrb	r2, [r4, #0]
 8004686:	2a31      	cmp	r2, #49	; 0x31
 8004688:	d1bb      	bne.n	8004602 <inc_arr_v+0x12>
 800468a:	7862      	ldrb	r2, [r4, #1]
 800468c:	2a32      	cmp	r2, #50	; 0x32
 800468e:	d043      	beq.n	8004718 <inc_arr_v+0x128>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004690:	2a31      	cmp	r2, #49	; 0x31
 8004692:	d1b6      	bne.n	8004602 <inc_arr_v+0x12>
 8004694:	78e2      	ldrb	r2, [r4, #3]
 8004696:	2a39      	cmp	r2, #57	; 0x39
 8004698:	d1b3      	bne.n	8004602 <inc_arr_v+0x12>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 800469a:	7922      	ldrb	r2, [r4, #4]
 800469c:	2a30      	cmp	r2, #48	; 0x30
 800469e:	d9b4      	bls.n	800460a <inc_arr_v+0x1a>
 80046a0:	e7e8      	b.n	8004674 <inc_arr_v+0x84>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '1' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80046a2:	2804      	cmp	r0, #4
 80046a4:	d10d      	bne.n	80046c2 <inc_arr_v+0xd2>
		!(pos == 4 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80046a6:	4c22      	ldr	r4, [pc, #136]	; (8004730 <inc_arr_v+0x140>)
 80046a8:	7822      	ldrb	r2, [r4, #0]
 80046aa:	2a31      	cmp	r2, #49	; 0x31
 80046ac:	d1a9      	bne.n	8004602 <inc_arr_v+0x12>
 80046ae:	7862      	ldrb	r2, [r4, #1]
 80046b0:	2a32      	cmp	r2, #50	; 0x32
 80046b2:	d1a6      	bne.n	8004602 <inc_arr_v+0x12>
 80046b4:	78e2      	ldrb	r2, [r4, #3]
 80046b6:	2a30      	cmp	r2, #48	; 0x30
 80046b8:	d1a3      	bne.n	8004602 <inc_arr_v+0x12>
 80046ba:	7922      	ldrb	r2, [r4, #4]
 80046bc:	2a30      	cmp	r2, #48	; 0x30
 80046be:	d1a0      	bne.n	8004602 <inc_arr_v+0x12>
 80046c0:	e7d8      	b.n	8004674 <inc_arr_v+0x84>
		if(pos >= 0 && pos != 2){
 80046c2:	2800      	cmp	r0, #0
 80046c4:	da0e      	bge.n	80046e4 <inc_arr_v+0xf4>
 80046c6:	4c1a      	ldr	r4, [pc, #104]	; (8004730 <inc_arr_v+0x140>)
 80046c8:	e7ac      	b.n	8004624 <inc_arr_v+0x34>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046ca:	78e0      	ldrb	r0, [r4, #3]
 80046cc:	282f      	cmp	r0, #47	; 0x2f
 80046ce:	d998      	bls.n	8004602 <inc_arr_v+0x12>
 80046d0:	7920      	ldrb	r0, [r4, #4]
 80046d2:	282f      	cmp	r0, #47	; 0x2f
 80046d4:	d8ce      	bhi.n	8004674 <inc_arr_v+0x84>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80046d6:	2a30      	cmp	r2, #48	; 0x30
 80046d8:	d193      	bne.n	8004602 <inc_arr_v+0x12>
 80046da:	2931      	cmp	r1, #49	; 0x31
 80046dc:	d80e      	bhi.n	80046fc <inc_arr_v+0x10c>
			if(keypadarr[pos] < '9'){
 80046de:	2100      	movs	r1, #0
 80046e0:	7822      	ldrb	r2, [r4, #0]
 80046e2:	e79d      	b.n	8004620 <inc_arr_v+0x30>
		if(pos >= 0 && pos != 2){
 80046e4:	2802      	cmp	r0, #2
 80046e6:	d120      	bne.n	800472a <inc_arr_v+0x13a>
			inc_arr_v(pos-1);
 80046e8:	2001      	movs	r0, #1
 80046ea:	f7ff ff81 	bl	80045f0 <inc_arr_v>
 80046ee:	e7ea      	b.n	80046c6 <inc_arr_v+0xd6>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] > '2' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046f0:	7861      	ldrb	r1, [r4, #1]
 80046f2:	2932      	cmp	r1, #50	; 0x32
 80046f4:	d9f1      	bls.n	80046da <inc_arr_v+0xea>
	if( !(pos == 0 && keypadarr[0] == '1' && keypadarr[1] >= '0' && keypadarr[3] >= '0' && keypadarr[4] >= '0') &&
 80046f6:	78e0      	ldrb	r0, [r4, #3]
 80046f8:	282f      	cmp	r0, #47	; 0x2f
 80046fa:	d8e9      	bhi.n	80046d0 <inc_arr_v+0xe0>
		!(pos == 0 && keypadarr[0] == '0' && keypadarr[1] >= '2' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80046fc:	78e2      	ldrb	r2, [r4, #3]
 80046fe:	2a30      	cmp	r2, #48	; 0x30
 8004700:	d8b8      	bhi.n	8004674 <inc_arr_v+0x84>
 8004702:	7922      	ldrb	r2, [r4, #4]
 8004704:	2a30      	cmp	r2, #48	; 0x30
 8004706:	f67f af7c 	bls.w	8004602 <inc_arr_v+0x12>
 800470a:	e7b3      	b.n	8004674 <inc_arr_v+0x84>
	for(int i = 0; i < keypadlength; i++){
 800470c:	2301      	movs	r3, #1
 800470e:	e79c      	b.n	800464a <inc_arr_v+0x5a>
 8004710:	2302      	movs	r3, #2
 8004712:	e79a      	b.n	800464a <inc_arr_v+0x5a>
 8004714:	2303      	movs	r3, #3
 8004716:	e798      	b.n	800464a <inc_arr_v+0x5a>
		!(pos == 3 && keypadarr[0] == '1' && keypadarr[1] == '2' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004718:	78e2      	ldrb	r2, [r4, #3]
 800471a:	2a30      	cmp	r2, #48	; 0x30
 800471c:	f47f af71 	bne.w	8004602 <inc_arr_v+0x12>
 8004720:	7922      	ldrb	r2, [r4, #4]
 8004722:	2a2f      	cmp	r2, #47	; 0x2f
 8004724:	f67f af6d 	bls.w	8004602 <inc_arr_v+0x12>
 8004728:	e7a4      	b.n	8004674 <inc_arr_v+0x84>
 800472a:	4c01      	ldr	r4, [pc, #4]	; (8004730 <inc_arr_v+0x140>)
 800472c:	e769      	b.n	8004602 <inc_arr_v+0x12>
 800472e:	bf00      	nop
 8004730:	20000010 	.word	0x20000010
 8004734:	20000015 	.word	0x20000015
 8004738:	302e3231 	.word	0x302e3231

0800473c <inc_arr_a>:
void inc_arr_a(int8_t pos){
 800473c:	b510      	push	{r4, lr}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 800473e:	b9b0      	cbnz	r0, 800476e <inc_arr_a+0x32>
 8004740:	4c40      	ldr	r4, [pc, #256]	; (8004844 <inc_arr_a+0x108>)
		keypadarr[4] = '0';
 8004742:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 8004744:	4a40      	ldr	r2, [pc, #256]	; (8004848 <inc_arr_a+0x10c>)
		keypadarr[4] = '0';
 8004746:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 8004748:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 800474a:	7823      	ldrb	r3, [r4, #0]
 800474c:	2b7a      	cmp	r3, #122	; 0x7a
 800474e:	d118      	bne.n	8004782 <inc_arr_a+0x46>
 8004750:	7863      	ldrb	r3, [r4, #1]
 8004752:	2b7a      	cmp	r3, #122	; 0x7a
 8004754:	d15f      	bne.n	8004816 <inc_arr_a+0xda>
 8004756:	78a3      	ldrb	r3, [r4, #2]
 8004758:	2b7a      	cmp	r3, #122	; 0x7a
 800475a:	d16c      	bne.n	8004836 <inc_arr_a+0xfa>
 800475c:	78e3      	ldrb	r3, [r4, #3]
 800475e:	2b7a      	cmp	r3, #122	; 0x7a
 8004760:	d16b      	bne.n	800483a <inc_arr_a+0xfe>
 8004762:	7923      	ldrb	r3, [r4, #4]
 8004764:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004766:	bf18      	it	ne
 8004768:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 800476a:	d10b      	bne.n	8004784 <inc_arr_a+0x48>
}
 800476c:	bd10      	pop	{r4, pc}
	if( !(pos == 0) &&//just don't even increment the first digit since our max limit is < 1
 800476e:	2802      	cmp	r0, #2
 8004770:	d00c      	beq.n	800478c <inc_arr_a+0x50>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004772:	2803      	cmp	r0, #3
 8004774:	d01b      	beq.n	80047ae <inc_arr_a+0x72>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 8004776:	2804      	cmp	r0, #4
 8004778:	d031      	beq.n	80047de <inc_arr_a+0xa2>
		if(pos >= 0 && pos != 1){
 800477a:	2800      	cmp	r0, #0
 800477c:	da11      	bge.n	80047a2 <inc_arr_a+0x66>
 800477e:	4c31      	ldr	r4, [pc, #196]	; (8004844 <inc_arr_a+0x108>)
 8004780:	e7e3      	b.n	800474a <inc_arr_a+0xe>
	for(int i = 0; i < keypadlength; i++){
 8004782:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004784:	4a31      	ldr	r2, [pc, #196]	; (800484c <inc_arr_a+0x110>)
 8004786:	3b01      	subs	r3, #1
 8004788:	7013      	strb	r3, [r2, #0]
}
 800478a:	bd10      	pop	{r4, pc}
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 800478c:	4c2d      	ldr	r4, [pc, #180]	; (8004844 <inc_arr_a+0x108>)
 800478e:	7823      	ldrb	r3, [r4, #0]
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d032      	beq.n	80047fa <inc_arr_a+0xbe>
			if(keypadarr[pos] < '9'){
 8004794:	5c23      	ldrb	r3, [r4, r0]
 8004796:	4602      	mov	r2, r0
 8004798:	2b38      	cmp	r3, #56	; 0x38
 800479a:	d819      	bhi.n	80047d0 <inc_arr_a+0x94>
				keypadarr[pos]++;
 800479c:	3301      	adds	r3, #1
 800479e:	54a3      	strb	r3, [r4, r2]
 80047a0:	e7d3      	b.n	800474a <inc_arr_a+0xe>
		if(pos >= 0 && pos != 1){
 80047a2:	2801      	cmp	r0, #1
 80047a4:	d14b      	bne.n	800483e <inc_arr_a+0x102>
			inc_arr_a(pos-1);
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7ff ffc8 	bl	800473c <inc_arr_a>
 80047ac:	e7e7      	b.n	800477e <inc_arr_a+0x42>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 80047ae:	4c25      	ldr	r4, [pc, #148]	; (8004844 <inc_arr_a+0x108>)
 80047b0:	7823      	ldrb	r3, [r4, #0]
 80047b2:	2b30      	cmp	r3, #48	; 0x30
 80047b4:	d1ee      	bne.n	8004794 <inc_arr_a+0x58>
 80047b6:	78a3      	ldrb	r3, [r4, #2]
 80047b8:	2b38      	cmp	r3, #56	; 0x38
 80047ba:	d035      	beq.n	8004828 <inc_arr_a+0xec>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '7' && keypadarr[3] == '9' && keypadarr[4] > '0') &&
 80047bc:	78a3      	ldrb	r3, [r4, #2]
 80047be:	2b37      	cmp	r3, #55	; 0x37
 80047c0:	d1e8      	bne.n	8004794 <inc_arr_a+0x58>
 80047c2:	78e3      	ldrb	r3, [r4, #3]
 80047c4:	2b39      	cmp	r3, #57	; 0x39
 80047c6:	d1e5      	bne.n	8004794 <inc_arr_a+0x58>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 80047c8:	7923      	ldrb	r3, [r4, #4]
 80047ca:	2b30      	cmp	r3, #48	; 0x30
 80047cc:	d8b9      	bhi.n	8004742 <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 80047ce:	2203      	movs	r2, #3
				keypadarr[pos] = '0';
 80047d0:	2330      	movs	r3, #48	; 0x30
				inc_arr_a(pos-1);
 80047d2:	3801      	subs	r0, #1
 80047d4:	b240      	sxtb	r0, r0
				keypadarr[pos] = '0';
 80047d6:	54a3      	strb	r3, [r4, r2]
				inc_arr_a(pos-1);
 80047d8:	f7ff ffb0 	bl	800473c <inc_arr_a>
 80047dc:	e7b5      	b.n	800474a <inc_arr_a+0xe>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80047de:	4c19      	ldr	r4, [pc, #100]	; (8004844 <inc_arr_a+0x108>)
 80047e0:	7823      	ldrb	r3, [r4, #0]
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d1d6      	bne.n	8004794 <inc_arr_a+0x58>
 80047e6:	78a3      	ldrb	r3, [r4, #2]
 80047e8:	2b38      	cmp	r3, #56	; 0x38
 80047ea:	d1d3      	bne.n	8004794 <inc_arr_a+0x58>
 80047ec:	78e3      	ldrb	r3, [r4, #3]
 80047ee:	2b30      	cmp	r3, #48	; 0x30
 80047f0:	d1d0      	bne.n	8004794 <inc_arr_a+0x58>
 80047f2:	7923      	ldrb	r3, [r4, #4]
 80047f4:	2b30      	cmp	r3, #48	; 0x30
 80047f6:	d1cd      	bne.n	8004794 <inc_arr_a+0x58>
 80047f8:	e7a3      	b.n	8004742 <inc_arr_a+0x6>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 80047fa:	78a3      	ldrb	r3, [r4, #2]
 80047fc:	2b38      	cmp	r3, #56	; 0x38
 80047fe:	d00c      	beq.n	800481a <inc_arr_a+0xde>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '7' && (keypadarr[3] > '0' || keypadarr[4] > '0')) &&
 8004800:	78a3      	ldrb	r3, [r4, #2]
 8004802:	2b37      	cmp	r3, #55	; 0x37
 8004804:	d1c6      	bne.n	8004794 <inc_arr_a+0x58>
 8004806:	78e2      	ldrb	r2, [r4, #3]
 8004808:	2a30      	cmp	r2, #48	; 0x30
 800480a:	d89a      	bhi.n	8004742 <inc_arr_a+0x6>
 800480c:	7922      	ldrb	r2, [r4, #4]
 800480e:	2a30      	cmp	r2, #48	; 0x30
 8004810:	d897      	bhi.n	8004742 <inc_arr_a+0x6>
			if(keypadarr[pos] < '9'){
 8004812:	2202      	movs	r2, #2
 8004814:	e7c2      	b.n	800479c <inc_arr_a+0x60>
	for(int i = 0; i < keypadlength; i++){
 8004816:	2301      	movs	r3, #1
 8004818:	e7b4      	b.n	8004784 <inc_arr_a+0x48>
		!(pos == 2 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] == '0') &&
 800481a:	78e3      	ldrb	r3, [r4, #3]
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d1ef      	bne.n	8004800 <inc_arr_a+0xc4>
 8004820:	7923      	ldrb	r3, [r4, #4]
 8004822:	2b30      	cmp	r3, #48	; 0x30
 8004824:	d1ec      	bne.n	8004800 <inc_arr_a+0xc4>
 8004826:	e78c      	b.n	8004742 <inc_arr_a+0x6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '8' && keypadarr[3] == '0' && keypadarr[4] >= '0') &&
 8004828:	78e3      	ldrb	r3, [r4, #3]
 800482a:	2b30      	cmp	r3, #48	; 0x30
 800482c:	d1c6      	bne.n	80047bc <inc_arr_a+0x80>
 800482e:	7923      	ldrb	r3, [r4, #4]
 8004830:	2b2f      	cmp	r3, #47	; 0x2f
 8004832:	d886      	bhi.n	8004742 <inc_arr_a+0x6>
 8004834:	e7c2      	b.n	80047bc <inc_arr_a+0x80>
	for(int i = 0; i < keypadlength; i++){
 8004836:	2302      	movs	r3, #2
 8004838:	e7a4      	b.n	8004784 <inc_arr_a+0x48>
 800483a:	2303      	movs	r3, #3
 800483c:	e7a2      	b.n	8004784 <inc_arr_a+0x48>
 800483e:	4c01      	ldr	r4, [pc, #4]	; (8004844 <inc_arr_a+0x108>)
 8004840:	e7a8      	b.n	8004794 <inc_arr_a+0x58>
 8004842:	bf00      	nop
 8004844:	20000010 	.word	0x20000010
 8004848:	30382e30 	.word	0x30382e30
 800484c:	20000015 	.word	0x20000015

08004850 <dec_arr_v>:
void dec_arr_v(int8_t pos){
 8004850:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004852:	4603      	mov	r3, r0
 8004854:	4c45      	ldr	r4, [pc, #276]	; (800496c <dec_arr_v+0x11c>)
 8004856:	b9c8      	cbnz	r0, 800488c <dec_arr_v+0x3c>
 8004858:	7822      	ldrb	r2, [r4, #0]
 800485a:	2a30      	cmp	r2, #48	; 0x30
 800485c:	d01e      	beq.n	800489c <dec_arr_v+0x4c>
			if(keypadarr[pos] > '0'){
 800485e:	5ce2      	ldrb	r2, [r4, r3]
 8004860:	2a30      	cmp	r2, #48	; 0x30
 8004862:	d960      	bls.n	8004926 <dec_arr_v+0xd6>
				keypadarr[pos]--;
 8004864:	3a01      	subs	r2, #1
 8004866:	54e2      	strb	r2, [r4, r3]
		if(keypadarr[i] != 'z'){
 8004868:	7823      	ldrb	r3, [r4, #0]
 800486a:	2b7a      	cmp	r3, #122	; 0x7a
 800486c:	d156      	bne.n	800491c <dec_arr_v+0xcc>
 800486e:	7863      	ldrb	r3, [r4, #1]
 8004870:	2b7a      	cmp	r3, #122	; 0x7a
 8004872:	d15f      	bne.n	8004934 <dec_arr_v+0xe4>
 8004874:	78a3      	ldrb	r3, [r4, #2]
 8004876:	2b7a      	cmp	r3, #122	; 0x7a
 8004878:	d15e      	bne.n	8004938 <dec_arr_v+0xe8>
 800487a:	78e3      	ldrb	r3, [r4, #3]
 800487c:	2b7a      	cmp	r3, #122	; 0x7a
 800487e:	d15d      	bne.n	800493c <dec_arr_v+0xec>
 8004880:	7923      	ldrb	r3, [r4, #4]
 8004882:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004884:	bf18      	it	ne
 8004886:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004888:	d149      	bne.n	800491e <dec_arr_v+0xce>
}
 800488a:	bd10      	pop	{r4, pc}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800488c:	2801      	cmp	r0, #1
 800488e:	d10a      	bne.n	80048a6 <dec_arr_v+0x56>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004890:	7822      	ldrb	r2, [r4, #0]
 8004892:	2a30      	cmp	r2, #48	; 0x30
 8004894:	d1e3      	bne.n	800485e <dec_arr_v+0xe>
 8004896:	7862      	ldrb	r2, [r4, #1]
 8004898:	2a30      	cmp	r2, #48	; 0x30
 800489a:	d1e0      	bne.n	800485e <dec_arr_v+0xe>
		keypadarr[4] = '0';
 800489c:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 800489e:	4a34      	ldr	r2, [pc, #208]	; (8004970 <dec_arr_v+0x120>)
		keypadarr[4] = '0';
 80048a0:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 80048a2:	6022      	str	r2, [r4, #0]
		keypadarr[4] = '0';
 80048a4:	e7e0      	b.n	8004868 <dec_arr_v+0x18>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80048a6:	2803      	cmp	r0, #3
 80048a8:	d02e      	beq.n	8004908 <dec_arr_v+0xb8>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 80048aa:	2804      	cmp	r0, #4
 80048ac:	d10c      	bne.n	80048c8 <dec_arr_v+0x78>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80048ae:	7822      	ldrb	r2, [r4, #0]
 80048b0:	2a30      	cmp	r2, #48	; 0x30
 80048b2:	d1d4      	bne.n	800485e <dec_arr_v+0xe>
 80048b4:	7862      	ldrb	r2, [r4, #1]
 80048b6:	2a30      	cmp	r2, #48	; 0x30
 80048b8:	d1d1      	bne.n	800485e <dec_arr_v+0xe>
 80048ba:	78e2      	ldrb	r2, [r4, #3]
 80048bc:	2a30      	cmp	r2, #48	; 0x30
 80048be:	d1ce      	bne.n	800485e <dec_arr_v+0xe>
 80048c0:	7922      	ldrb	r2, [r4, #4]
 80048c2:	2a30      	cmp	r2, #48	; 0x30
 80048c4:	d1cb      	bne.n	800485e <dec_arr_v+0xe>
 80048c6:	e7e9      	b.n	800489c <dec_arr_v+0x4c>
		if(pos <= 4 && pos != 2){
 80048c8:	dcce      	bgt.n	8004868 <dec_arr_v+0x18>
 80048ca:	2802      	cmp	r0, #2
 80048cc:	d1c7      	bne.n	800485e <dec_arr_v+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 80048ce:	7823      	ldrb	r3, [r4, #0]
 80048d0:	2b30      	cmp	r3, #48	; 0x30
 80048d2:	7863      	ldrb	r3, [r4, #1]
 80048d4:	d034      	beq.n	8004940 <dec_arr_v+0xf0>
			if(keypadarr[pos] > '0'){
 80048d6:	2b30      	cmp	r3, #48	; 0x30
 80048d8:	d93a      	bls.n	8004950 <dec_arr_v+0x100>
				keypadarr[pos]--;
 80048da:	3b01      	subs	r3, #1
 80048dc:	7063      	strb	r3, [r4, #1]
		if(keypadarr[i] != 'z'){
 80048de:	7823      	ldrb	r3, [r4, #0]
 80048e0:	2b7a      	cmp	r3, #122	; 0x7a
 80048e2:	d141      	bne.n	8004968 <dec_arr_v+0x118>
 80048e4:	7863      	ldrb	r3, [r4, #1]
 80048e6:	2b7a      	cmp	r3, #122	; 0x7a
 80048e8:	d138      	bne.n	800495c <dec_arr_v+0x10c>
 80048ea:	78a3      	ldrb	r3, [r4, #2]
 80048ec:	2b7a      	cmp	r3, #122	; 0x7a
 80048ee:	d137      	bne.n	8004960 <dec_arr_v+0x110>
 80048f0:	78e3      	ldrb	r3, [r4, #3]
 80048f2:	2b7a      	cmp	r3, #122	; 0x7a
 80048f4:	d136      	bne.n	8004964 <dec_arr_v+0x114>
 80048f6:	7923      	ldrb	r3, [r4, #4]
 80048f8:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80048fa:	bf18      	it	ne
 80048fc:	2204      	movne	r2, #4
		if(keypadarr[i] != 'z'){
 80048fe:	d0b6      	beq.n	800486e <dec_arr_v+0x1e>
			keypaditerator = i - 1;
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <dec_arr_v+0x124>)
 8004902:	3a01      	subs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
			break;
 8004906:	e7af      	b.n	8004868 <dec_arr_v+0x18>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[1] == '0' && keypadarr[3] == '0') &&
 8004908:	7822      	ldrb	r2, [r4, #0]
 800490a:	2a30      	cmp	r2, #48	; 0x30
 800490c:	d1a7      	bne.n	800485e <dec_arr_v+0xe>
 800490e:	7862      	ldrb	r2, [r4, #1]
 8004910:	2a30      	cmp	r2, #48	; 0x30
 8004912:	d1a4      	bne.n	800485e <dec_arr_v+0xe>
 8004914:	78e2      	ldrb	r2, [r4, #3]
 8004916:	2a30      	cmp	r2, #48	; 0x30
 8004918:	d1a1      	bne.n	800485e <dec_arr_v+0xe>
 800491a:	e7bf      	b.n	800489c <dec_arr_v+0x4c>
	for(int i = 0; i < keypadlength; i++){
 800491c:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 800491e:	4a15      	ldr	r2, [pc, #84]	; (8004974 <dec_arr_v+0x124>)
 8004920:	3b01      	subs	r3, #1
 8004922:	7013      	strb	r3, [r2, #0]
}
 8004924:	bd10      	pop	{r4, pc}
				keypadarr[pos] = '9';
 8004926:	2239      	movs	r2, #57	; 0x39
				dec_arr_v(pos-1);
 8004928:	1e58      	subs	r0, r3, #1
 800492a:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 800492c:	54e2      	strb	r2, [r4, r3]
				dec_arr_v(pos-1);
 800492e:	f7ff ff8f 	bl	8004850 <dec_arr_v>
 8004932:	e799      	b.n	8004868 <dec_arr_v+0x18>
	for(int i = 0; i < keypadlength; i++){
 8004934:	2301      	movs	r3, #1
 8004936:	e7f2      	b.n	800491e <dec_arr_v+0xce>
 8004938:	2302      	movs	r3, #2
 800493a:	e7f0      	b.n	800491e <dec_arr_v+0xce>
 800493c:	2303      	movs	r3, #3
 800493e:	e7ee      	b.n	800491e <dec_arr_v+0xce>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[1] == '0') &&
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d1c8      	bne.n	80048d6 <dec_arr_v+0x86>
		keypadarr[2] = '.';
 8004944:	f243 012e 	movw	r1, #12334	; 0x302e
	for(int i = 0; i < keypadlength; i++){
 8004948:	2200      	movs	r2, #0
		keypadarr[4] = '0';
 800494a:	7123      	strb	r3, [r4, #4]
		keypadarr[2] = '.';
 800494c:	8061      	strh	r1, [r4, #2]
		if(keypadarr[i] != 'z'){
 800494e:	e7d7      	b.n	8004900 <dec_arr_v+0xb0>
				keypadarr[pos] = '9';
 8004950:	2339      	movs	r3, #57	; 0x39
				dec_arr_v(pos-1);
 8004952:	2000      	movs	r0, #0
				keypadarr[pos] = '9';
 8004954:	7063      	strb	r3, [r4, #1]
				dec_arr_v(pos-1);
 8004956:	f7ff ff7b 	bl	8004850 <dec_arr_v>
 800495a:	e7c0      	b.n	80048de <dec_arr_v+0x8e>
	for(int i = 0; i < keypadlength; i++){
 800495c:	2201      	movs	r2, #1
 800495e:	e7cf      	b.n	8004900 <dec_arr_v+0xb0>
 8004960:	2202      	movs	r2, #2
 8004962:	e7cd      	b.n	8004900 <dec_arr_v+0xb0>
 8004964:	2203      	movs	r2, #3
 8004966:	e7cb      	b.n	8004900 <dec_arr_v+0xb0>
 8004968:	2200      	movs	r2, #0
 800496a:	e7c9      	b.n	8004900 <dec_arr_v+0xb0>
 800496c:	20000010 	.word	0x20000010
 8004970:	302e3030 	.word	0x302e3030
 8004974:	20000015 	.word	0x20000015

08004978 <dec_arr_a>:
void dec_arr_a(int8_t pos){
 8004978:	b510      	push	{r4, lr}
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800497a:	4603      	mov	r3, r0
 800497c:	4c43      	ldr	r4, [pc, #268]	; (8004a8c <dec_arr_a+0x114>)
 800497e:	b940      	cbnz	r0, 8004992 <dec_arr_a+0x1a>
 8004980:	7822      	ldrb	r2, [r4, #0]
 8004982:	2a30      	cmp	r2, #48	; 0x30
 8004984:	d035      	beq.n	80049f2 <dec_arr_a+0x7a>
			if(keypadarr[pos] > '0'){
 8004986:	5ce2      	ldrb	r2, [r4, r3]
 8004988:	2a30      	cmp	r2, #48	; 0x30
 800498a:	d95d      	bls.n	8004a48 <dec_arr_a+0xd0>
				keypadarr[pos]--;
 800498c:	3a01      	subs	r2, #1
 800498e:	54e2      	strb	r2, [r4, r3]
 8004990:	e033      	b.n	80049fa <dec_arr_a+0x82>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 8004992:	2801      	cmp	r0, #1
 8004994:	d11d      	bne.n	80049d2 <dec_arr_a+0x5a>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004996:	7823      	ldrb	r3, [r4, #0]
 8004998:	2b30      	cmp	r3, #48	; 0x30
 800499a:	d051      	beq.n	8004a40 <dec_arr_a+0xc8>
	if( !(pos == 0 && keypadarr[0] == '0') &&
 800499c:	7823      	ldrb	r3, [r4, #0]
 800499e:	2b30      	cmp	r3, #48	; 0x30
 80049a0:	d066      	beq.n	8004a70 <dec_arr_a+0xf8>
			if(keypadarr[pos] > '0'){
 80049a2:	d95a      	bls.n	8004a5a <dec_arr_a+0xe2>
				keypadarr[pos]--;
 80049a4:	3b01      	subs	r3, #1
 80049a6:	7023      	strb	r3, [r4, #0]
		if(keypadarr[i] != 'z'){
 80049a8:	7823      	ldrb	r3, [r4, #0]
 80049aa:	2b7a      	cmp	r3, #122	; 0x7a
 80049ac:	d16b      	bne.n	8004a86 <dec_arr_a+0x10e>
 80049ae:	7863      	ldrb	r3, [r4, #1]
 80049b0:	2b7a      	cmp	r3, #122	; 0x7a
 80049b2:	d162      	bne.n	8004a7a <dec_arr_a+0x102>
 80049b4:	78a3      	ldrb	r3, [r4, #2]
 80049b6:	2b7a      	cmp	r3, #122	; 0x7a
 80049b8:	d161      	bne.n	8004a7e <dec_arr_a+0x106>
 80049ba:	78e3      	ldrb	r3, [r4, #3]
 80049bc:	2b7a      	cmp	r3, #122	; 0x7a
 80049be:	d160      	bne.n	8004a82 <dec_arr_a+0x10a>
 80049c0:	7923      	ldrb	r3, [r4, #4]
 80049c2:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 80049c4:	bf18      	it	ne
 80049c6:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 80049c8:	d01a      	beq.n	8004a00 <dec_arr_a+0x88>
			keypaditerator = i - 1;
 80049ca:	4a31      	ldr	r2, [pc, #196]	; (8004a90 <dec_arr_a+0x118>)
 80049cc:	3b01      	subs	r3, #1
 80049ce:	7013      	strb	r3, [r2, #0]
			break;
 80049d0:	e013      	b.n	80049fa <dec_arr_a+0x82>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 80049d2:	2803      	cmp	r0, #3
 80049d4:	d023      	beq.n	8004a1e <dec_arr_a+0xa6>
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 80049d6:	2804      	cmp	r0, #4
 80049d8:	d130      	bne.n	8004a3c <dec_arr_a+0xc4>
		!(pos == 4 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0' && keypadarr[4] == '0') ){
 80049da:	7822      	ldrb	r2, [r4, #0]
 80049dc:	2a30      	cmp	r2, #48	; 0x30
 80049de:	d1d2      	bne.n	8004986 <dec_arr_a+0xe>
 80049e0:	78a2      	ldrb	r2, [r4, #2]
 80049e2:	2a30      	cmp	r2, #48	; 0x30
 80049e4:	d1cf      	bne.n	8004986 <dec_arr_a+0xe>
 80049e6:	78e2      	ldrb	r2, [r4, #3]
 80049e8:	2a30      	cmp	r2, #48	; 0x30
 80049ea:	d1cc      	bne.n	8004986 <dec_arr_a+0xe>
 80049ec:	7922      	ldrb	r2, [r4, #4]
 80049ee:	2a30      	cmp	r2, #48	; 0x30
 80049f0:	d1c9      	bne.n	8004986 <dec_arr_a+0xe>
		keypadarr[4] = '0';
 80049f2:	2330      	movs	r3, #48	; 0x30
		keypadarr[0] = '0';
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <dec_arr_a+0x11c>)
		keypadarr[4] = '0';
 80049f6:	7123      	strb	r3, [r4, #4]
		keypadarr[0] = '0';
 80049f8:	6022      	str	r2, [r4, #0]
		if(keypadarr[i] != 'z'){
 80049fa:	7823      	ldrb	r3, [r4, #0]
 80049fc:	2b7a      	cmp	r3, #122	; 0x7a
 80049fe:	d118      	bne.n	8004a32 <dec_arr_a+0xba>
 8004a00:	7863      	ldrb	r3, [r4, #1]
 8004a02:	2b7a      	cmp	r3, #122	; 0x7a
 8004a04:	d127      	bne.n	8004a56 <dec_arr_a+0xde>
 8004a06:	78a3      	ldrb	r3, [r4, #2]
 8004a08:	2b7a      	cmp	r3, #122	; 0x7a
 8004a0a:	d12d      	bne.n	8004a68 <dec_arr_a+0xf0>
 8004a0c:	78e3      	ldrb	r3, [r4, #3]
 8004a0e:	2b7a      	cmp	r3, #122	; 0x7a
 8004a10:	d12c      	bne.n	8004a6c <dec_arr_a+0xf4>
 8004a12:	7923      	ldrb	r3, [r4, #4]
 8004a14:	2b7a      	cmp	r3, #122	; 0x7a
	for(int i = 0; i < keypadlength; i++){
 8004a16:	bf18      	it	ne
 8004a18:	2304      	movne	r3, #4
		if(keypadarr[i] != 'z'){
 8004a1a:	d10b      	bne.n	8004a34 <dec_arr_a+0xbc>
}
 8004a1c:	bd10      	pop	{r4, pc}
		!(pos == 3 && keypadarr[0] == '0' && keypadarr[2] == '0' && keypadarr[3] == '0') &&
 8004a1e:	7822      	ldrb	r2, [r4, #0]
 8004a20:	2a30      	cmp	r2, #48	; 0x30
 8004a22:	d1b0      	bne.n	8004986 <dec_arr_a+0xe>
 8004a24:	78a2      	ldrb	r2, [r4, #2]
 8004a26:	2a30      	cmp	r2, #48	; 0x30
 8004a28:	d1ad      	bne.n	8004986 <dec_arr_a+0xe>
 8004a2a:	78e2      	ldrb	r2, [r4, #3]
 8004a2c:	2a30      	cmp	r2, #48	; 0x30
 8004a2e:	d1aa      	bne.n	8004986 <dec_arr_a+0xe>
 8004a30:	e7df      	b.n	80049f2 <dec_arr_a+0x7a>
	for(int i = 0; i < keypadlength; i++){
 8004a32:	2300      	movs	r3, #0
			keypaditerator = i - 1;
 8004a34:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <dec_arr_a+0x118>)
 8004a36:	3b01      	subs	r3, #1
 8004a38:	7013      	strb	r3, [r2, #0]
}
 8004a3a:	bd10      	pop	{r4, pc}
		if(pos <= 4 && pos != 1){
 8004a3c:	dcdd      	bgt.n	80049fa <dec_arr_a+0x82>
 8004a3e:	e7a2      	b.n	8004986 <dec_arr_a+0xe>
		!(pos == 1 && keypadarr[0] == '0' && keypadarr[2] == '0') &&
 8004a40:	78a3      	ldrb	r3, [r4, #2]
 8004a42:	2b30      	cmp	r3, #48	; 0x30
 8004a44:	d1aa      	bne.n	800499c <dec_arr_a+0x24>
 8004a46:	e7d4      	b.n	80049f2 <dec_arr_a+0x7a>
				keypadarr[pos] = '9';
 8004a48:	2239      	movs	r2, #57	; 0x39
				dec_arr_a(pos-1);
 8004a4a:	1e58      	subs	r0, r3, #1
 8004a4c:	b240      	sxtb	r0, r0
				keypadarr[pos] = '9';
 8004a4e:	54e2      	strb	r2, [r4, r3]
				dec_arr_a(pos-1);
 8004a50:	f7ff ff92 	bl	8004978 <dec_arr_a>
 8004a54:	e7d1      	b.n	80049fa <dec_arr_a+0x82>
	for(int i = 0; i < keypadlength; i++){
 8004a56:	2301      	movs	r3, #1
 8004a58:	e7ec      	b.n	8004a34 <dec_arr_a+0xbc>
				keypadarr[pos] = '9';
 8004a5a:	2339      	movs	r3, #57	; 0x39
				dec_arr_a(pos-1);
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
				keypadarr[pos] = '9';
 8004a60:	7023      	strb	r3, [r4, #0]
				dec_arr_a(pos-1);
 8004a62:	f7ff ff89 	bl	8004978 <dec_arr_a>
 8004a66:	e79f      	b.n	80049a8 <dec_arr_a+0x30>
	for(int i = 0; i < keypadlength; i++){
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e7e3      	b.n	8004a34 <dec_arr_a+0xbc>
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e7e1      	b.n	8004a34 <dec_arr_a+0xbc>
		keypadarr[1] = '.';
 8004a70:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <dec_arr_a+0x120>)
	for(int i = 0; i < keypadlength; i++){
 8004a72:	2300      	movs	r3, #0
		keypadarr[1] = '.';
 8004a74:	f8c4 2001 	str.w	r2, [r4, #1]
		if(keypadarr[i] != 'z'){
 8004a78:	e7a7      	b.n	80049ca <dec_arr_a+0x52>
	for(int i = 0; i < keypadlength; i++){
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e7a5      	b.n	80049ca <dec_arr_a+0x52>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e7a3      	b.n	80049ca <dec_arr_a+0x52>
 8004a82:	2303      	movs	r3, #3
 8004a84:	e7a1      	b.n	80049ca <dec_arr_a+0x52>
 8004a86:	2300      	movs	r3, #0
 8004a88:	e79f      	b.n	80049ca <dec_arr_a+0x52>
 8004a8a:	bf00      	nop
 8004a8c:	20000010 	.word	0x20000010
 8004a90:	20000015 	.word	0x20000015
 8004a94:	30302e30 	.word	0x30302e30
 8004a98:	3030302e 	.word	0x3030302e
 8004a9c:	00000000 	.word	0x00000000

08004aa0 <keypad_sm>:
void keypad_sm(char num){
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(kpenum == WAIT){
 8004aa4:	4ca5      	ldr	r4, [pc, #660]	; (8004d3c <keypad_sm+0x29c>)
 8004aa6:	7822      	ldrb	r2, [r4, #0]
 8004aa8:	b9ba      	cbnz	r2, 8004ada <keypad_sm+0x3a>
		if(num == 'A'){
 8004aaa:	2841      	cmp	r0, #65	; 0x41
 8004aac:	d071      	beq.n	8004b92 <keypad_sm+0xf2>
		else if(num == 'B'){
 8004aae:	2842      	cmp	r0, #66	; 0x42
 8004ab0:	f000 8110 	beq.w	8004cd4 <keypad_sm+0x234>
		else if(num == 'C'){
 8004ab4:	2843      	cmp	r0, #67	; 0x43
 8004ab6:	f000 80d9 	beq.w	8004c6c <keypad_sm+0x1cc>
		else if(num == 'D'){
 8004aba:	2844      	cmp	r0, #68	; 0x44
 8004abc:	f000 8341 	beq.w	8005142 <keypad_sm+0x6a2>
		else if(num == '*'){
 8004ac0:	282a      	cmp	r0, #42	; 0x2a
 8004ac2:	f000 83c2 	beq.w	800524a <keypad_sm+0x7aa>
		else if(num == '/'){
 8004ac6:	282f      	cmp	r0, #47	; 0x2f
 8004ac8:	d112      	bne.n	8004af0 <keypad_sm+0x50>
			if(chstat_main){
 8004aca:	4b9d      	ldr	r3, [pc, #628]	; (8004d40 <keypad_sm+0x2a0>)
 8004acc:	f993 1000 	ldrsb.w	r1, [r3]
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	f000 861e 	beq.w	8005712 <keypad_sm+0xc72>
				chstat_main = 0;
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e00a      	b.n	8004af0 <keypad_sm+0x50>
	else if(kpenum == V1){
 8004ada:	2a01      	cmp	r2, #1
 8004adc:	d00a      	beq.n	8004af4 <keypad_sm+0x54>
	else if(kpenum == A1){
 8004ade:	2a02      	cmp	r2, #2
 8004ae0:	f000 813e 	beq.w	8004d60 <keypad_sm+0x2c0>
	else if(kpenum == V2){
 8004ae4:	2a03      	cmp	r2, #3
 8004ae6:	f000 8087 	beq.w	8004bf8 <keypad_sm+0x158>
	else if(kpenum == A2){
 8004aea:	2a04      	cmp	r2, #4
 8004aec:	f000 835d 	beq.w	80051aa <keypad_sm+0x70a>
}
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004af4:	4f93      	ldr	r7, [pc, #588]	; (8004d44 <keypad_sm+0x2a4>)
 8004af6:	783a      	ldrb	r2, [r7, #0]
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	f000 8182 	beq.w	8004e02 <keypad_sm+0x362>
			if(num == 'A'){
 8004afe:	2841      	cmp	r0, #65	; 0x41
 8004b00:	f000 83f0 	beq.w	80052e4 <keypad_sm+0x844>
			else if(num == 'B'){
 8004b04:	2842      	cmp	r0, #66	; 0x42
 8004b06:	f000 82a9 	beq.w	800505c <keypad_sm+0x5bc>
			else if(num == 'C'){
 8004b0a:	2843      	cmp	r0, #67	; 0x43
 8004b0c:	f000 8480 	beq.w	8005410 <keypad_sm+0x970>
			else if(num == 'D'){
 8004b10:	2844      	cmp	r0, #68	; 0x44
 8004b12:	f000 8607 	beq.w	8005724 <keypad_sm+0xc84>
			else if(num == '.'){
 8004b16:	282e      	cmp	r0, #46	; 0x2e
 8004b18:	f001 80b8 	beq.w	8005c8c <keypad_sm+0x11ec>
			else if(num >= '0' && num <= '9'){
 8004b1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004b20:	2b09      	cmp	r3, #9
 8004b22:	f201 817a 	bhi.w	8005e1a <keypad_sm+0x137a>
	while(keypaditerator < 4){
 8004b26:	4d88      	ldr	r5, [pc, #544]	; (8004d48 <keypad_sm+0x2a8>)
 8004b28:	f995 2000 	ldrsb.w	r2, [r5]
 8004b2c:	2a03      	cmp	r2, #3
 8004b2e:	f300 8302 	bgt.w	8005136 <keypad_sm+0x696>
 8004b32:	4b86      	ldr	r3, [pc, #536]	; (8004d4c <keypad_sm+0x2ac>)
 8004b34:	4e86      	ldr	r6, [pc, #536]	; (8004d50 <keypad_sm+0x2b0>)
 8004b36:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004b3a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004b3e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004b42:	f896 e000 	ldrb.w	lr, [r6]
 8004b46:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004b4a:	789c      	ldrb	r4, [r3, #2]
 8004b4c:	7858      	ldrb	r0, [r3, #1]
 8004b4e:	7819      	ldrb	r1, [r3, #0]
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	e003      	b.n	8004b5c <keypad_sm+0xbc>
	while(keypaditerator < 4){
 8004b54:	46a4      	mov	ip, r4
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004b5a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004b5c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004b5e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004b62:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004b64:	bf04      	itt	eq
 8004b66:	f04f 0801 	moveq.w	r8, #1
 8004b6a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004b6e:	2a04      	cmp	r2, #4
 8004b70:	46e1      	mov	r9, ip
 8004b72:	d1ef      	bne.n	8004b54 <keypad_sm+0xb4>
 8004b74:	702a      	strb	r2, [r5, #0]
 8004b76:	f883 c004 	strb.w	ip, [r3, #4]
 8004b7a:	70dc      	strb	r4, [r3, #3]
 8004b7c:	7098      	strb	r0, [r3, #2]
 8004b7e:	7059      	strb	r1, [r3, #1]
 8004b80:	f883 a000 	strb.w	sl, [r3]
 8004b84:	f1b8 0f00 	cmp.w	r8, #0
 8004b88:	f000 82d5 	beq.w	8005136 <keypad_sm+0x696>
 8004b8c:	f886 e000 	strb.w	lr, [r6]
 8004b90:	e2d1      	b.n	8005136 <keypad_sm+0x696>
			kpenum = V1;
 8004b92:	2301      	movs	r3, #1
	while(keypaditerator < 4){
 8004b94:	4d6c      	ldr	r5, [pc, #432]	; (8004d48 <keypad_sm+0x2a8>)
			kpenum = V1;
 8004b96:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004b98:	f995 1000 	ldrsb.w	r1, [r5]
 8004b9c:	2903      	cmp	r1, #3
 8004b9e:	dca7      	bgt.n	8004af0 <keypad_sm+0x50>
 8004ba0:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <keypad_sm+0x2ac>)
 8004ba2:	4e6b      	ldr	r6, [pc, #428]	; (8004d50 <keypad_sm+0x2b0>)
			keypadarr[0] = num;
 8004ba4:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004ba8:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004bac:	7837      	ldrb	r7, [r6, #0]
 8004bae:	78dc      	ldrb	r4, [r3, #3]
 8004bb0:	f893 e002 	ldrb.w	lr, [r3, #2]
 8004bb4:	f893 c001 	ldrb.w	ip, [r3, #1]
 8004bb8:	7818      	ldrb	r0, [r3, #0]
 8004bba:	b2c9      	uxtb	r1, r1
 8004bbc:	e003      	b.n	8004bc6 <keypad_sm+0x126>
	while(keypaditerator < 4){
 8004bbe:	4674      	mov	r4, lr
 8004bc0:	46e6      	mov	lr, ip
 8004bc2:	4684      	mov	ip, r0
			keypadarr[0] = num;
 8004bc4:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004bc6:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004bc8:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004bcc:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004bce:	bf04      	itt	eq
 8004bd0:	2700      	moveq	r7, #0
 8004bd2:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004bd4:	2904      	cmp	r1, #4
 8004bd6:	46a0      	mov	r8, r4
 8004bd8:	d1f1      	bne.n	8004bbe <keypad_sm+0x11e>
 8004bda:	7029      	strb	r1, [r5, #0]
 8004bdc:	711c      	strb	r4, [r3, #4]
 8004bde:	f883 e003 	strb.w	lr, [r3, #3]
 8004be2:	f883 c002 	strb.w	ip, [r3, #2]
 8004be6:	7058      	strb	r0, [r3, #1]
 8004be8:	f883 9000 	strb.w	r9, [r3]
 8004bec:	2a00      	cmp	r2, #0
 8004bee:	f43f af7f 	beq.w	8004af0 <keypad_sm+0x50>
 8004bf2:	7037      	strb	r7, [r6, #0]
}
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(encmode){
 8004bf8:	4f52      	ldr	r7, [pc, #328]	; (8004d44 <keypad_sm+0x2a4>)
 8004bfa:	783a      	ldrb	r2, [r7, #0]
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	f040 8169 	bne.w	8004ed4 <keypad_sm+0x434>
			if(num == 'A'){
 8004c02:	2841      	cmp	r0, #65	; 0x41
 8004c04:	f000 8505 	beq.w	8005612 <keypad_sm+0xb72>
			else if(num == 'B'){
 8004c08:	2842      	cmp	r0, #66	; 0x42
 8004c0a:	f000 866c 	beq.w	80058e6 <keypad_sm+0xe46>
			else if(num == 'C'){
 8004c0e:	2843      	cmp	r0, #67	; 0x43
 8004c10:	f001 80b7 	beq.w	8005d82 <keypad_sm+0x12e2>
			else if(num == 'D'){
 8004c14:	2844      	cmp	r0, #68	; 0x44
 8004c16:	f001 818c 	beq.w	8005f32 <keypad_sm+0x1492>
			else if(num == '.'){
 8004c1a:	282e      	cmp	r0, #46	; 0x2e
 8004c1c:	f000 857d 	beq.w	800571a <keypad_sm+0xc7a>
			else if(num >= '0' && num <= '9'){
 8004c20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	f240 8579 	bls.w	800571c <keypad_sm+0xc7c>
			else if(num == '#'){
 8004c2a:	2823      	cmp	r0, #35	; 0x23
 8004c2c:	f001 84e9 	beq.w	8006602 <keypad_sm+0x1b62>
			else if(num == '+'){
 8004c30:	282b      	cmp	r0, #43	; 0x2b
 8004c32:	f001 8543 	beq.w	80066bc <keypad_sm+0x1c1c>
			else if(num == '-'){
 8004c36:	282d      	cmp	r0, #45	; 0x2d
 8004c38:	f001 8659 	beq.w	80068ee <keypad_sm+0x1e4e>
			else if(num == '['){
 8004c3c:	f1a0 035b 	sub.w	r3, r0, #91	; 0x5b
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	2a18      	cmp	r2, #24
 8004c44:	f63f af54 	bhi.w	8004af0 <keypad_sm+0x50>
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <keypad_sm+0x2b4>)
 8004c4a:	40d3      	lsrs	r3, r2
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	f013 0001 	ands.w	r0, r3, #1
 8004c52:	f003 0401 	and.w	r4, r3, #1
 8004c56:	f47f af4b 	bne.w	8004af0 <keypad_sm+0x50>
				fill_keypad(0, volt_set_main);
 8004c5a:	4b3f      	ldr	r3, [pc, #252]	; (8004d58 <keypad_sm+0x2b8>)
 8004c5c:	6819      	ldr	r1, [r3, #0]
 8004c5e:	f7ff fbd3 	bl	8004408 <fill_keypad>
				encmode = 1;
 8004c62:	2301      	movs	r3, #1
				encpos = 0;
 8004c64:	4a3d      	ldr	r2, [pc, #244]	; (8004d5c <keypad_sm+0x2bc>)
				encmode = 1;
 8004c66:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 8004c68:	7014      	strb	r4, [r2, #0]
 8004c6a:	e741      	b.n	8004af0 <keypad_sm+0x50>
			kpenum = V2;
 8004c6c:	2303      	movs	r3, #3
	while(keypaditerator < 4){
 8004c6e:	4d36      	ldr	r5, [pc, #216]	; (8004d48 <keypad_sm+0x2a8>)
			kpenum = V2;
 8004c70:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004c72:	f995 1000 	ldrsb.w	r1, [r5]
 8004c76:	4299      	cmp	r1, r3
 8004c78:	f73f af3a 	bgt.w	8004af0 <keypad_sm+0x50>
 8004c7c:	4b33      	ldr	r3, [pc, #204]	; (8004d4c <keypad_sm+0x2ac>)
 8004c7e:	4e34      	ldr	r6, [pc, #208]	; (8004d50 <keypad_sm+0x2b0>)
			keypadarr[0] = num;
 8004c80:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004c84:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004c88:	f896 e000 	ldrb.w	lr, [r6]
 8004c8c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004c90:	789f      	ldrb	r7, [r3, #2]
 8004c92:	785c      	ldrb	r4, [r3, #1]
 8004c94:	7818      	ldrb	r0, [r3, #0]
 8004c96:	b2c9      	uxtb	r1, r1
 8004c98:	e003      	b.n	8004ca2 <keypad_sm+0x202>
	while(keypaditerator < 4){
 8004c9a:	46bc      	mov	ip, r7
 8004c9c:	4627      	mov	r7, r4
 8004c9e:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004ca0:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004ca2:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004ca4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004ca8:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004caa:	bf04      	itt	eq
 8004cac:	f04f 0e00 	moveq.w	lr, #0
 8004cb0:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004cb2:	2904      	cmp	r1, #4
 8004cb4:	46e0      	mov	r8, ip
 8004cb6:	d1f0      	bne.n	8004c9a <keypad_sm+0x1fa>
 8004cb8:	7029      	strb	r1, [r5, #0]
 8004cba:	f883 c004 	strb.w	ip, [r3, #4]
 8004cbe:	70df      	strb	r7, [r3, #3]
 8004cc0:	709c      	strb	r4, [r3, #2]
 8004cc2:	7058      	strb	r0, [r3, #1]
 8004cc4:	f883 9000 	strb.w	r9, [r3]
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	f43f af11 	beq.w	8004af0 <keypad_sm+0x50>
 8004cce:	f886 e000 	strb.w	lr, [r6]
 8004cd2:	e70d      	b.n	8004af0 <keypad_sm+0x50>
			kpenum = A1;
 8004cd4:	2302      	movs	r3, #2
	while(keypaditerator < 4){
 8004cd6:	4d1c      	ldr	r5, [pc, #112]	; (8004d48 <keypad_sm+0x2a8>)
			kpenum = A1;
 8004cd8:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004cda:	f995 1000 	ldrsb.w	r1, [r5]
 8004cde:	2903      	cmp	r1, #3
 8004ce0:	f73f af06 	bgt.w	8004af0 <keypad_sm+0x50>
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <keypad_sm+0x2ac>)
 8004ce6:	4e1a      	ldr	r6, [pc, #104]	; (8004d50 <keypad_sm+0x2b0>)
			keypadarr[0] = num;
 8004ce8:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004cec:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004cf0:	f896 e000 	ldrb.w	lr, [r6]
 8004cf4:	78df      	ldrb	r7, [r3, #3]
 8004cf6:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004cfa:	785c      	ldrb	r4, [r3, #1]
 8004cfc:	7818      	ldrb	r0, [r3, #0]
 8004cfe:	b2c9      	uxtb	r1, r1
 8004d00:	e003      	b.n	8004d0a <keypad_sm+0x26a>
	while(keypaditerator < 4){
 8004d02:	4667      	mov	r7, ip
 8004d04:	46a4      	mov	ip, r4
 8004d06:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004d08:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004d0a:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004d0c:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004d10:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004d12:	bf04      	itt	eq
 8004d14:	f04f 0e00 	moveq.w	lr, #0
 8004d18:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004d1a:	2904      	cmp	r1, #4
 8004d1c:	46b8      	mov	r8, r7
 8004d1e:	d1f0      	bne.n	8004d02 <keypad_sm+0x262>
 8004d20:	7029      	strb	r1, [r5, #0]
 8004d22:	711f      	strb	r7, [r3, #4]
 8004d24:	f883 c003 	strb.w	ip, [r3, #3]
 8004d28:	709c      	strb	r4, [r3, #2]
 8004d2a:	7058      	strb	r0, [r3, #1]
 8004d2c:	f883 9000 	strb.w	r9, [r3]
 8004d30:	2a00      	cmp	r2, #0
 8004d32:	f43f aedd 	beq.w	8004af0 <keypad_sm+0x50>
 8004d36:	f886 e000 	strb.w	lr, [r6]
 8004d3a:	e6d9      	b.n	8004af0 <keypad_sm+0x50>
 8004d3c:	2000074d 	.word	0x2000074d
 8004d40:	200003eb 	.word	0x200003eb
 8004d44:	200003f4 	.word	0x200003f4
 8004d48:	20000015 	.word	0x20000015
 8004d4c:	20000010 	.word	0x20000010
 8004d50:	2000074c 	.word	0x2000074c
 8004d54:	01000005 	.word	0x01000005
 8004d58:	20000a74 	.word	0x20000a74
 8004d5c:	200003f5 	.word	0x200003f5
		if(encmode){
 8004d60:	4fb6      	ldr	r7, [pc, #728]	; (800503c <keypad_sm+0x59c>)
 8004d62:	783a      	ldrb	r2, [r7, #0]
 8004d64:	2a00      	cmp	r2, #0
 8004d66:	f000 8081 	beq.w	8004e6c <keypad_sm+0x3cc>
			if(num == 'A'){
 8004d6a:	2841      	cmp	r0, #65	; 0x41
 8004d6c:	f000 81ae 	beq.w	80050cc <keypad_sm+0x62c>
			else if(num == 'B'){
 8004d70:	2842      	cmp	r0, #66	; 0x42
 8004d72:	f000 83ce 	beq.w	8005512 <keypad_sm+0xa72>
			else if(num == 'C'){
 8004d76:	2843      	cmp	r0, #67	; 0x43
 8004d78:	f000 8543 	beq.w	8005802 <keypad_sm+0xd62>
			else if(num == 'D'){
 8004d7c:	2844      	cmp	r0, #68	; 0x44
 8004d7e:	f000 874c 	beq.w	8005c1a <keypad_sm+0x117a>
			else if(num == '.'){
 8004d82:	282e      	cmp	r0, #46	; 0x2e
 8004d84:	f001 8146 	beq.w	8006014 <keypad_sm+0x1574>
			else if(num >= '0' && num <= '9'){
 8004d88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d8c:	2b09      	cmp	r3, #9
 8004d8e:	f201 8178 	bhi.w	8006082 <keypad_sm+0x15e2>
	while(keypaditerator < 4){
 8004d92:	4dab      	ldr	r5, [pc, #684]	; (8005040 <keypad_sm+0x5a0>)
 8004d94:	f995 2000 	ldrsb.w	r2, [r5]
 8004d98:	2a03      	cmp	r2, #3
 8004d9a:	f300 81cc 	bgt.w	8005136 <keypad_sm+0x696>
 8004d9e:	4ba9      	ldr	r3, [pc, #676]	; (8005044 <keypad_sm+0x5a4>)
 8004da0:	4ea9      	ldr	r6, [pc, #676]	; (8005048 <keypad_sm+0x5a8>)
 8004da2:	3201      	adds	r2, #1
 8004da4:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004da8:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004dac:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004db0:	f896 e000 	ldrb.w	lr, [r6]
 8004db4:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004db8:	789c      	ldrb	r4, [r3, #2]
 8004dba:	7858      	ldrb	r0, [r3, #1]
 8004dbc:	7819      	ldrb	r1, [r3, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	e003      	b.n	8004dca <keypad_sm+0x32a>
	while(keypaditerator < 4){
 8004dc2:	46a4      	mov	ip, r4
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004dc8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004dca:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004dcc:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004dd0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004dd2:	bf04      	itt	eq
 8004dd4:	f04f 0801 	moveq.w	r8, #1
 8004dd8:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004ddc:	2a05      	cmp	r2, #5
 8004dde:	46e1      	mov	r9, ip
 8004de0:	d1ef      	bne.n	8004dc2 <keypad_sm+0x322>
 8004de2:	f883 c004 	strb.w	ip, [r3, #4]
 8004de6:	70dc      	strb	r4, [r3, #3]
 8004de8:	7098      	strb	r0, [r3, #2]
 8004dea:	7059      	strb	r1, [r3, #1]
 8004dec:	f883 a000 	strb.w	sl, [r3]
 8004df0:	2304      	movs	r3, #4
 8004df2:	702b      	strb	r3, [r5, #0]
 8004df4:	f1b8 0f00 	cmp.w	r8, #0
 8004df8:	f000 819d 	beq.w	8005136 <keypad_sm+0x696>
 8004dfc:	f886 e000 	strb.w	lr, [r6]
 8004e00:	e199      	b.n	8005136 <keypad_sm+0x696>
			if(num == 'A'){
 8004e02:	2841      	cmp	r0, #65	; 0x41
 8004e04:	f000 822a 	beq.w	800525c <keypad_sm+0x7bc>
			else if(num == 'B'){
 8004e08:	2842      	cmp	r0, #66	; 0x42
 8004e0a:	f000 80e2 	beq.w	8004fd2 <keypad_sm+0x532>
			else if(num == 'C'){
 8004e0e:	2843      	cmp	r0, #67	; 0x43
 8004e10:	f000 8433 	beq.w	800567a <keypad_sm+0xbda>
			else if(num == 'D'){
 8004e14:	2844      	cmp	r0, #68	; 0x44
 8004e16:	f000 859c 	beq.w	8005952 <keypad_sm+0xeb2>
			else if(num == '.'){
 8004e1a:	282e      	cmp	r0, #46	; 0x2e
 8004e1c:	f001 8158 	beq.w	80060d0 <keypad_sm+0x1630>
			else if(num >= '0' && num <= '9'){
 8004e20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	f240 8479 	bls.w	800571c <keypad_sm+0xc7c>
			else if(num == '#'){
 8004e2a:	2823      	cmp	r0, #35	; 0x23
 8004e2c:	f001 82c4 	beq.w	80063b8 <keypad_sm+0x1918>
			else if(num == '+'){
 8004e30:	282b      	cmp	r0, #43	; 0x2b
 8004e32:	f001 8164 	beq.w	80060fe <keypad_sm+0x165e>
			else if(num == '-'){
 8004e36:	282d      	cmp	r0, #45	; 0x2d
 8004e38:	f001 8349 	beq.w	80064ce <keypad_sm+0x1a2e>
			else if(num == '['){
 8004e3c:	f1a0 035b 	sub.w	r3, r0, #91	; 0x5b
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	2a18      	cmp	r2, #24
 8004e44:	f63f ae54 	bhi.w	8004af0 <keypad_sm+0x50>
 8004e48:	4b80      	ldr	r3, [pc, #512]	; (800504c <keypad_sm+0x5ac>)
 8004e4a:	40d3      	lsrs	r3, r2
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	f013 0001 	ands.w	r0, r3, #1
 8004e52:	f003 0401 	and.w	r4, r3, #1
 8004e56:	f47f ae4b 	bne.w	8004af0 <keypad_sm+0x50>
				fill_keypad(0, volt_set_aux);
 8004e5a:	4b7d      	ldr	r3, [pc, #500]	; (8005050 <keypad_sm+0x5b0>)
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	f7ff fad3 	bl	8004408 <fill_keypad>
				encmode = 1;
 8004e62:	2301      	movs	r3, #1
				encpos = 0;
 8004e64:	4a7b      	ldr	r2, [pc, #492]	; (8005054 <keypad_sm+0x5b4>)
				encmode = 1;
 8004e66:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 8004e68:	7014      	strb	r4, [r2, #0]
 8004e6a:	e641      	b.n	8004af0 <keypad_sm+0x50>
			if(num == 'A'){
 8004e6c:	2841      	cmp	r0, #65	; 0x41
 8004e6e:	d07b      	beq.n	8004f68 <keypad_sm+0x4c8>
			else if(num == 'B'){
 8004e70:	2842      	cmp	r0, #66	; 0x42
 8004e72:	f000 8305 	beq.w	8005480 <keypad_sm+0x9e0>
			else if(num == 'C'){
 8004e76:	2843      	cmp	r0, #67	; 0x43
 8004e78:	f000 848d 	beq.w	8005796 <keypad_sm+0xcf6>
			else if(num == 'D'){
 8004e7c:	2844      	cmp	r0, #68	; 0x44
 8004e7e:	f000 873e 	beq.w	8005cfe <keypad_sm+0x125e>
			else if(num == '.'){
 8004e82:	282e      	cmp	r0, #46	; 0x2e
 8004e84:	f001 826b 	beq.w	800635e <keypad_sm+0x18be>
			else if(num >= '0' && num <= '9'){
 8004e88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	f240 8445 	bls.w	800571c <keypad_sm+0xc7c>
			else if(num == '#'){
 8004e92:	2823      	cmp	r0, #35	; 0x23
 8004e94:	f001 84cb 	beq.w	800682e <keypad_sm+0x1d8e>
			else if(num == '+'){
 8004e98:	282b      	cmp	r0, #43	; 0x2b
 8004e9a:	f001 834f 	beq.w	800653c <keypad_sm+0x1a9c>
			else if(num == '-'){
 8004e9e:	282d      	cmp	r0, #45	; 0x2d
 8004ea0:	f001 8490 	beq.w	80067c4 <keypad_sm+0x1d24>
			else if(num == '['){
 8004ea4:	f1a0 035b 	sub.w	r3, r0, #91	; 0x5b
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	2a18      	cmp	r2, #24
 8004eac:	f63f ae20 	bhi.w	8004af0 <keypad_sm+0x50>
 8004eb0:	4b66      	ldr	r3, [pc, #408]	; (800504c <keypad_sm+0x5ac>)
 8004eb2:	40d3      	lsrs	r3, r2
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	07da      	lsls	r2, r3, #31
 8004eb8:	f003 0401 	and.w	r4, r3, #1
 8004ebc:	f53f ae18 	bmi.w	8004af0 <keypad_sm+0x50>
				fill_keypad(1, amp_set_aux);
 8004ec0:	4b65      	ldr	r3, [pc, #404]	; (8005058 <keypad_sm+0x5b8>)
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	f7ff fa9f 	bl	8004408 <fill_keypad>
				encmode = 1;
 8004eca:	2301      	movs	r3, #1
				encpos = 0;
 8004ecc:	4a61      	ldr	r2, [pc, #388]	; (8005054 <keypad_sm+0x5b4>)
				encmode = 1;
 8004ece:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 8004ed0:	7014      	strb	r4, [r2, #0]
 8004ed2:	e60d      	b.n	8004af0 <keypad_sm+0x50>
			if(num == 'A'){
 8004ed4:	2841      	cmp	r0, #65	; 0x41
 8004ed6:	f000 8362 	beq.w	800559e <keypad_sm+0xafe>
			else if(num == 'B'){
 8004eda:	2842      	cmp	r0, #66	; 0x42
 8004edc:	f000 84ca 	beq.w	8005874 <keypad_sm+0xdd4>
			else if(num == 'C'){
 8004ee0:	2843      	cmp	r0, #67	; 0x43
 8004ee2:	f000 864e 	beq.w	8005b82 <keypad_sm+0x10e2>
			else if(num == 'D'){
 8004ee6:	2844      	cmp	r0, #68	; 0x44
 8004ee8:	f001 8059 	beq.w	8005f9e <keypad_sm+0x14fe>
			else if(num == '.'){
 8004eec:	282e      	cmp	r0, #46	; 0x2e
 8004eee:	f001 81b0 	beq.w	8006252 <keypad_sm+0x17b2>
			else if(num >= '0' && num <= '9'){
 8004ef2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004ef6:	2b09      	cmp	r3, #9
 8004ef8:	f201 8192 	bhi.w	8006220 <keypad_sm+0x1780>
	while(keypaditerator < 4){
 8004efc:	4d50      	ldr	r5, [pc, #320]	; (8005040 <keypad_sm+0x5a0>)
 8004efe:	f995 2000 	ldrsb.w	r2, [r5]
 8004f02:	2a03      	cmp	r2, #3
 8004f04:	f300 8117 	bgt.w	8005136 <keypad_sm+0x696>
 8004f08:	4b4e      	ldr	r3, [pc, #312]	; (8005044 <keypad_sm+0x5a4>)
 8004f0a:	4e4f      	ldr	r6, [pc, #316]	; (8005048 <keypad_sm+0x5a8>)
 8004f0c:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8004f10:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8004f14:	f893 9004 	ldrb.w	r9, [r3, #4]
 8004f18:	f896 e000 	ldrb.w	lr, [r6]
 8004f1c:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004f20:	789c      	ldrb	r4, [r3, #2]
 8004f22:	7858      	ldrb	r0, [r3, #1]
 8004f24:	7819      	ldrb	r1, [r3, #0]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	e003      	b.n	8004f32 <keypad_sm+0x492>
	while(keypaditerator < 4){
 8004f2a:	46a4      	mov	ip, r4
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8004f30:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8004f32:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8004f34:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8004f38:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8004f3a:	bf04      	itt	eq
 8004f3c:	f04f 0801 	moveq.w	r8, #1
 8004f40:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004f44:	2a04      	cmp	r2, #4
 8004f46:	46e1      	mov	r9, ip
 8004f48:	d1ef      	bne.n	8004f2a <keypad_sm+0x48a>
 8004f4a:	702a      	strb	r2, [r5, #0]
 8004f4c:	f883 c004 	strb.w	ip, [r3, #4]
 8004f50:	70dc      	strb	r4, [r3, #3]
 8004f52:	7098      	strb	r0, [r3, #2]
 8004f54:	7059      	strb	r1, [r3, #1]
 8004f56:	f883 a000 	strb.w	sl, [r3]
 8004f5a:	f1b8 0f00 	cmp.w	r8, #0
 8004f5e:	f000 80ea 	beq.w	8005136 <keypad_sm+0x696>
 8004f62:	f886 e000 	strb.w	lr, [r6]
 8004f66:	e0e6      	b.n	8005136 <keypad_sm+0x696>
 8004f68:	4d35      	ldr	r5, [pc, #212]	; (8005040 <keypad_sm+0x5a0>)
				kpenum = WAIT;
 8004f6a:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8004f6c:	f995 1000 	ldrsb.w	r1, [r5]
 8004f70:	2903      	cmp	r1, #3
 8004f72:	f73f adbd 	bgt.w	8004af0 <keypad_sm+0x50>
 8004f76:	4b33      	ldr	r3, [pc, #204]	; (8005044 <keypad_sm+0x5a4>)
 8004f78:	4e33      	ldr	r6, [pc, #204]	; (8005048 <keypad_sm+0x5a8>)
 8004f7a:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8004f7c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004f80:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004f84:	f896 e000 	ldrb.w	lr, [r6]
 8004f88:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004f8c:	789f      	ldrb	r7, [r3, #2]
 8004f8e:	785c      	ldrb	r4, [r3, #1]
 8004f90:	7818      	ldrb	r0, [r3, #0]
 8004f92:	b2c9      	uxtb	r1, r1
 8004f94:	e003      	b.n	8004f9e <keypad_sm+0x4fe>
	while(keypaditerator < 4){
 8004f96:	46bc      	mov	ip, r7
 8004f98:	4627      	mov	r7, r4
 8004f9a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8004f9c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8004f9e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8004fa0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8004fa4:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8004fa6:	bf04      	itt	eq
 8004fa8:	f04f 0e00 	moveq.w	lr, #0
 8004fac:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8004fae:	2905      	cmp	r1, #5
 8004fb0:	46e0      	mov	r8, ip
 8004fb2:	d1f0      	bne.n	8004f96 <keypad_sm+0x4f6>
 8004fb4:	f883 c004 	strb.w	ip, [r3, #4]
 8004fb8:	70df      	strb	r7, [r3, #3]
 8004fba:	709c      	strb	r4, [r3, #2]
 8004fbc:	7058      	strb	r0, [r3, #1]
 8004fbe:	f883 9000 	strb.w	r9, [r3]
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	702b      	strb	r3, [r5, #0]
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	f43f ad92 	beq.w	8004af0 <keypad_sm+0x50>
 8004fcc:	f886 e000 	strb.w	lr, [r6]
 8004fd0:	e58e      	b.n	8004af0 <keypad_sm+0x50>
 8004fd2:	4d1b      	ldr	r5, [pc, #108]	; (8005040 <keypad_sm+0x5a0>)
				kpenum = WAIT;
 8004fd4:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8004fd6:	f995 1000 	ldrsb.w	r1, [r5]
 8004fda:	2903      	cmp	r1, #3
 8004fdc:	f73f ad88 	bgt.w	8004af0 <keypad_sm+0x50>
 8004fe0:	4b18      	ldr	r3, [pc, #96]	; (8005044 <keypad_sm+0x5a4>)
 8004fe2:	4e19      	ldr	r6, [pc, #100]	; (8005048 <keypad_sm+0x5a8>)
 8004fe4:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8004fe6:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8004fea:	f893 8004 	ldrb.w	r8, [r3, #4]
 8004fee:	f896 e000 	ldrb.w	lr, [r6]
 8004ff2:	f893 c003 	ldrb.w	ip, [r3, #3]
 8004ff6:	789f      	ldrb	r7, [r3, #2]
 8004ff8:	785c      	ldrb	r4, [r3, #1]
 8004ffa:	7818      	ldrb	r0, [r3, #0]
 8004ffc:	b2c9      	uxtb	r1, r1
 8004ffe:	e003      	b.n	8005008 <keypad_sm+0x568>
	while(keypaditerator < 4){
 8005000:	46bc      	mov	ip, r7
 8005002:	4627      	mov	r7, r4
 8005004:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005006:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005008:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800500a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800500e:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005010:	bf04      	itt	eq
 8005012:	f04f 0e00 	moveq.w	lr, #0
 8005016:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005018:	2905      	cmp	r1, #5
 800501a:	46e0      	mov	r8, ip
 800501c:	d1f0      	bne.n	8005000 <keypad_sm+0x560>
 800501e:	f883 c004 	strb.w	ip, [r3, #4]
 8005022:	70df      	strb	r7, [r3, #3]
 8005024:	709c      	strb	r4, [r3, #2]
 8005026:	7058      	strb	r0, [r3, #1]
 8005028:	f883 9000 	strb.w	r9, [r3]
 800502c:	2304      	movs	r3, #4
 800502e:	702b      	strb	r3, [r5, #0]
 8005030:	2a00      	cmp	r2, #0
 8005032:	f43f ad5d 	beq.w	8004af0 <keypad_sm+0x50>
 8005036:	f886 e000 	strb.w	lr, [r6]
 800503a:	e559      	b.n	8004af0 <keypad_sm+0x50>
 800503c:	200003f4 	.word	0x200003f4
 8005040:	20000015 	.word	0x20000015
 8005044:	20000010 	.word	0x20000010
 8005048:	2000074c 	.word	0x2000074c
 800504c:	01000005 	.word	0x01000005
 8005050:	20000a70 	.word	0x20000a70
 8005054:	200003f5 	.word	0x200003f5
 8005058:	20000000 	.word	0x20000000
				kpenum = WAIT;
 800505c:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005060:	4db4      	ldr	r5, [pc, #720]	; (8005334 <keypad_sm+0x894>)
				kpenum = WAIT;
 8005062:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005066:	f995 2000 	ldrsb.w	r2, [r5]
 800506a:	2a03      	cmp	r2, #3
 800506c:	dc63      	bgt.n	8005136 <keypad_sm+0x696>
 800506e:	4bb2      	ldr	r3, [pc, #712]	; (8005338 <keypad_sm+0x898>)
 8005070:	4eb2      	ldr	r6, [pc, #712]	; (800533c <keypad_sm+0x89c>)
 8005072:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005074:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005078:	f893 9004 	ldrb.w	r9, [r3, #4]
 800507c:	f896 8000 	ldrb.w	r8, [r6]
 8005080:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005084:	789c      	ldrb	r4, [r3, #2]
 8005086:	7858      	ldrb	r0, [r3, #1]
 8005088:	7819      	ldrb	r1, [r3, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	e003      	b.n	8005096 <keypad_sm+0x5f6>
	while(keypaditerator < 4){
 800508e:	46a4      	mov	ip, r4
 8005090:	4604      	mov	r4, r0
 8005092:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005094:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005096:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005098:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800509c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800509e:	bf04      	itt	eq
 80050a0:	f04f 0e01 	moveq.w	lr, #1
 80050a4:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 80050a8:	2a05      	cmp	r2, #5
 80050aa:	46e1      	mov	r9, ip
 80050ac:	d1ef      	bne.n	800508e <keypad_sm+0x5ee>
 80050ae:	f883 c004 	strb.w	ip, [r3, #4]
 80050b2:	70dc      	strb	r4, [r3, #3]
 80050b4:	7098      	strb	r0, [r3, #2]
 80050b6:	7059      	strb	r1, [r3, #1]
 80050b8:	f883 a000 	strb.w	sl, [r3]
 80050bc:	2304      	movs	r3, #4
 80050be:	702b      	strb	r3, [r5, #0]
 80050c0:	f1be 0f00 	cmp.w	lr, #0
 80050c4:	d037      	beq.n	8005136 <keypad_sm+0x696>
 80050c6:	f886 8000 	strb.w	r8, [r6]
 80050ca:	e034      	b.n	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 80050cc:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80050d0:	4d98      	ldr	r5, [pc, #608]	; (8005334 <keypad_sm+0x894>)
				kpenum = WAIT;
 80050d2:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80050d6:	f995 2000 	ldrsb.w	r2, [r5]
 80050da:	2a03      	cmp	r2, #3
 80050dc:	dc2b      	bgt.n	8005136 <keypad_sm+0x696>
 80050de:	4b96      	ldr	r3, [pc, #600]	; (8005338 <keypad_sm+0x898>)
 80050e0:	4e96      	ldr	r6, [pc, #600]	; (800533c <keypad_sm+0x89c>)
			keypadarr[0] = num;
 80050e2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80050e6:	f893 9004 	ldrb.w	r9, [r3, #4]
 80050ea:	f896 8000 	ldrb.w	r8, [r6]
 80050ee:	f893 c003 	ldrb.w	ip, [r3, #3]
 80050f2:	789c      	ldrb	r4, [r3, #2]
 80050f4:	7858      	ldrb	r0, [r3, #1]
 80050f6:	7819      	ldrb	r1, [r3, #0]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	e003      	b.n	8005104 <keypad_sm+0x664>
	while(keypaditerator < 4){
 80050fc:	46a4      	mov	ip, r4
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005102:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005104:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005106:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800510a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800510c:	bf04      	itt	eq
 800510e:	f04f 0e01 	moveq.w	lr, #1
 8005112:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005116:	2a04      	cmp	r2, #4
 8005118:	46e1      	mov	r9, ip
 800511a:	d1ef      	bne.n	80050fc <keypad_sm+0x65c>
 800511c:	702a      	strb	r2, [r5, #0]
 800511e:	f883 c004 	strb.w	ip, [r3, #4]
 8005122:	70dc      	strb	r4, [r3, #3]
 8005124:	7098      	strb	r0, [r3, #2]
 8005126:	7059      	strb	r1, [r3, #1]
 8005128:	f883 a000 	strb.w	sl, [r3]
 800512c:	f1be 0f00 	cmp.w	lr, #0
 8005130:	d001      	beq.n	8005136 <keypad_sm+0x696>
 8005132:	f886 8000 	strb.w	r8, [r6]
				encmode = 0;
 8005136:	2300      	movs	r3, #0
				encpos = 0;
 8005138:	4a81      	ldr	r2, [pc, #516]	; (8005340 <keypad_sm+0x8a0>)
				encmode = 0;
 800513a:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 800513c:	7013      	strb	r3, [r2, #0]
}
 800513e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			kpenum = A2;
 8005142:	2304      	movs	r3, #4
	while(keypaditerator < 4){
 8005144:	4d7b      	ldr	r5, [pc, #492]	; (8005334 <keypad_sm+0x894>)
			kpenum = A2;
 8005146:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005148:	f995 1000 	ldrsb.w	r1, [r5]
 800514c:	2903      	cmp	r1, #3
 800514e:	f73f accf 	bgt.w	8004af0 <keypad_sm+0x50>
 8005152:	4b79      	ldr	r3, [pc, #484]	; (8005338 <keypad_sm+0x898>)
 8005154:	4e79      	ldr	r6, [pc, #484]	; (800533c <keypad_sm+0x89c>)
			keypadarr[0] = num;
 8005156:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800515a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800515e:	f896 e000 	ldrb.w	lr, [r6]
 8005162:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005166:	789f      	ldrb	r7, [r3, #2]
 8005168:	785c      	ldrb	r4, [r3, #1]
 800516a:	7818      	ldrb	r0, [r3, #0]
 800516c:	b2c9      	uxtb	r1, r1
 800516e:	e003      	b.n	8005178 <keypad_sm+0x6d8>
	while(keypaditerator < 4){
 8005170:	46bc      	mov	ip, r7
 8005172:	4627      	mov	r7, r4
 8005174:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005176:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005178:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800517a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800517e:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005180:	bf04      	itt	eq
 8005182:	f04f 0e00 	moveq.w	lr, #0
 8005186:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005188:	2904      	cmp	r1, #4
 800518a:	46e0      	mov	r8, ip
 800518c:	d1f0      	bne.n	8005170 <keypad_sm+0x6d0>
 800518e:	7029      	strb	r1, [r5, #0]
 8005190:	f883 c004 	strb.w	ip, [r3, #4]
 8005194:	70df      	strb	r7, [r3, #3]
 8005196:	709c      	strb	r4, [r3, #2]
 8005198:	7058      	strb	r0, [r3, #1]
 800519a:	f883 9000 	strb.w	r9, [r3]
 800519e:	2a00      	cmp	r2, #0
 80051a0:	f43f aca6 	beq.w	8004af0 <keypad_sm+0x50>
 80051a4:	f886 e000 	strb.w	lr, [r6]
 80051a8:	e4a2      	b.n	8004af0 <keypad_sm+0x50>
		if(encmode){
 80051aa:	4f66      	ldr	r7, [pc, #408]	; (8005344 <keypad_sm+0x8a4>)
 80051ac:	783a      	ldrb	r2, [r7, #0]
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	f000 80f2 	beq.w	8005398 <keypad_sm+0x8f8>
			if(num == 'A'){
 80051b4:	2841      	cmp	r0, #65	; 0x41
 80051b6:	f000 8400 	beq.w	80059ba <keypad_sm+0xf1a>
			else if(num == 'B'){
 80051ba:	2842      	cmp	r0, #66	; 0x42
 80051bc:	f000 8472 	beq.w	8005aa4 <keypad_sm+0x1004>
			else if(num == 'C'){
 80051c0:	2843      	cmp	r0, #67	; 0x43
 80051c2:	f000 867b 	beq.w	8005ebc <keypad_sm+0x141c>
			else if(num == 'D'){
 80051c6:	2844      	cmp	r0, #68	; 0x44
 80051c8:	f001 807c 	beq.w	80062c4 <keypad_sm+0x1824>
			else if(num == '.'){
 80051cc:	282e      	cmp	r0, #46	; 0x2e
 80051ce:	f001 8145 	beq.w	800645c <keypad_sm+0x19bc>
			else if(num >= '0' && num <= '9'){
 80051d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	f201 81fa 	bhi.w	80065d0 <keypad_sm+0x1b30>
	while(keypaditerator < 4){
 80051dc:	4d55      	ldr	r5, [pc, #340]	; (8005334 <keypad_sm+0x894>)
 80051de:	f995 2000 	ldrsb.w	r2, [r5]
 80051e2:	2a03      	cmp	r2, #3
 80051e4:	dca7      	bgt.n	8005136 <keypad_sm+0x696>
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <keypad_sm+0x898>)
 80051e8:	4e54      	ldr	r6, [pc, #336]	; (800533c <keypad_sm+0x89c>)
 80051ea:	3201      	adds	r2, #1
 80051ec:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 80051f0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80051f4:	f893 9004 	ldrb.w	r9, [r3, #4]
 80051f8:	f896 e000 	ldrb.w	lr, [r6]
 80051fc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005200:	789c      	ldrb	r4, [r3, #2]
 8005202:	7858      	ldrb	r0, [r3, #1]
 8005204:	7819      	ldrb	r1, [r3, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	e003      	b.n	8005212 <keypad_sm+0x772>
	while(keypaditerator < 4){
 800520a:	46a4      	mov	ip, r4
 800520c:	4604      	mov	r4, r0
 800520e:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005210:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005212:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005214:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005218:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800521a:	bf04      	itt	eq
 800521c:	f04f 0801 	moveq.w	r8, #1
 8005220:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005224:	2a05      	cmp	r2, #5
 8005226:	46e1      	mov	r9, ip
 8005228:	d1ef      	bne.n	800520a <keypad_sm+0x76a>
 800522a:	f883 c004 	strb.w	ip, [r3, #4]
 800522e:	70dc      	strb	r4, [r3, #3]
 8005230:	7098      	strb	r0, [r3, #2]
 8005232:	7059      	strb	r1, [r3, #1]
 8005234:	f883 a000 	strb.w	sl, [r3]
 8005238:	2304      	movs	r3, #4
 800523a:	702b      	strb	r3, [r5, #0]
 800523c:	f1b8 0f00 	cmp.w	r8, #0
 8005240:	f43f af79 	beq.w	8005136 <keypad_sm+0x696>
 8005244:	f886 e000 	strb.w	lr, [r6]
 8005248:	e775      	b.n	8005136 <keypad_sm+0x696>
			if(chstat_aux_rx){
 800524a:	4b3f      	ldr	r3, [pc, #252]	; (8005348 <keypad_sm+0x8a8>)
 800524c:	f993 3000 	ldrsb.w	r3, [r3]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80d8 	beq.w	8005406 <keypad_sm+0x966>
				chstat_aux_tx = 0;
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <keypad_sm+0x8ac>)
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e449      	b.n	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 800525c:	f7fe ff5a 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005260:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005262:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005264:	f7fb ff58 	bl	8001118 <__aeabi_fcmpge>
 8005268:	b130      	cbz	r0, 8005278 <keypad_sm+0x7d8>
 800526a:	4628      	mov	r0, r5
 800526c:	4938      	ldr	r1, [pc, #224]	; (8005350 <keypad_sm+0x8b0>)
 800526e:	f7fb ff49 	bl	8001104 <__aeabi_fcmple>
 8005272:	b108      	cbz	r0, 8005278 <keypad_sm+0x7d8>
					volt_set_aux = translate_keypad();
 8005274:	4b37      	ldr	r3, [pc, #220]	; (8005354 <keypad_sm+0x8b4>)
 8005276:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005278:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 800527c:	4d2d      	ldr	r5, [pc, #180]	; (8005334 <keypad_sm+0x894>)
				kpenum = WAIT;
 800527e:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 8005282:	f995 2000 	ldrsb.w	r2, [r5]
 8005286:	2a03      	cmp	r2, #3
 8005288:	f73f ac32 	bgt.w	8004af0 <keypad_sm+0x50>
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <keypad_sm+0x898>)
 800528e:	4e2b      	ldr	r6, [pc, #172]	; (800533c <keypad_sm+0x89c>)
			keypadarr[0] = num;
 8005290:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005294:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005298:	f896 e000 	ldrb.w	lr, [r6]
 800529c:	78df      	ldrb	r7, [r3, #3]
 800529e:	789c      	ldrb	r4, [r3, #2]
 80052a0:	7858      	ldrb	r0, [r3, #1]
 80052a2:	7819      	ldrb	r1, [r3, #0]
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	e003      	b.n	80052b0 <keypad_sm+0x810>
	while(keypaditerator < 4){
 80052a8:	4627      	mov	r7, r4
 80052aa:	4604      	mov	r4, r0
 80052ac:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80052ae:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80052b0:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80052b2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80052b6:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80052b8:	bf04      	itt	eq
 80052ba:	f04f 0e00 	moveq.w	lr, #0
 80052be:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 80052c2:	2a04      	cmp	r2, #4
 80052c4:	46b8      	mov	r8, r7
 80052c6:	d1ef      	bne.n	80052a8 <keypad_sm+0x808>
 80052c8:	702a      	strb	r2, [r5, #0]
 80052ca:	711f      	strb	r7, [r3, #4]
 80052cc:	70dc      	strb	r4, [r3, #3]
 80052ce:	7098      	strb	r0, [r3, #2]
 80052d0:	7059      	strb	r1, [r3, #1]
 80052d2:	f883 9000 	strb.w	r9, [r3]
 80052d6:	f1bc 0f00 	cmp.w	ip, #0
 80052da:	f43f ac09 	beq.w	8004af0 <keypad_sm+0x50>
 80052de:	f886 e000 	strb.w	lr, [r6]
 80052e2:	e405      	b.n	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 80052e4:	f7fe ff16 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80052e8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80052ea:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80052ec:	f7fb ff14 	bl	8001118 <__aeabi_fcmpge>
 80052f0:	b130      	cbz	r0, 8005300 <keypad_sm+0x860>
 80052f2:	4628      	mov	r0, r5
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <keypad_sm+0x8b0>)
 80052f6:	f7fb ff05 	bl	8001104 <__aeabi_fcmple>
 80052fa:	b108      	cbz	r0, 8005300 <keypad_sm+0x860>
					volt_set_aux = translate_keypad();
 80052fc:	4b15      	ldr	r3, [pc, #84]	; (8005354 <keypad_sm+0x8b4>)
 80052fe:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8005300:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005304:	4d0b      	ldr	r5, [pc, #44]	; (8005334 <keypad_sm+0x894>)
				kpenum = WAIT;
 8005306:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800530a:	f995 2000 	ldrsb.w	r2, [r5]
 800530e:	2a03      	cmp	r2, #3
 8005310:	f73f af11 	bgt.w	8005136 <keypad_sm+0x696>
 8005314:	4b08      	ldr	r3, [pc, #32]	; (8005338 <keypad_sm+0x898>)
 8005316:	4e09      	ldr	r6, [pc, #36]	; (800533c <keypad_sm+0x89c>)
 8005318:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800531a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800531e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005322:	f896 8000 	ldrb.w	r8, [r6]
 8005326:	f893 c003 	ldrb.w	ip, [r3, #3]
 800532a:	789c      	ldrb	r4, [r3, #2]
 800532c:	7858      	ldrb	r0, [r3, #1]
 800532e:	7819      	ldrb	r1, [r3, #0]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	e015      	b.n	8005360 <keypad_sm+0x8c0>
 8005334:	20000015 	.word	0x20000015
 8005338:	20000010 	.word	0x20000010
 800533c:	2000074c 	.word	0x2000074c
 8005340:	200003f5 	.word	0x200003f5
 8005344:	200003f4 	.word	0x200003f4
 8005348:	200003e9 	.word	0x200003e9
 800534c:	200003ea 	.word	0x200003ea
 8005350:	41400000 	.word	0x41400000
 8005354:	20000a70 	.word	0x20000a70
	while(keypaditerator < 4){
 8005358:	46a4      	mov	ip, r4
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800535e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005360:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005362:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005366:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005368:	bf04      	itt	eq
 800536a:	f04f 0e01 	moveq.w	lr, #1
 800536e:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005372:	2a05      	cmp	r2, #5
 8005374:	46e1      	mov	r9, ip
 8005376:	d1ef      	bne.n	8005358 <keypad_sm+0x8b8>
 8005378:	f883 c004 	strb.w	ip, [r3, #4]
 800537c:	70dc      	strb	r4, [r3, #3]
 800537e:	7098      	strb	r0, [r3, #2]
 8005380:	7059      	strb	r1, [r3, #1]
 8005382:	f883 a000 	strb.w	sl, [r3]
 8005386:	2304      	movs	r3, #4
 8005388:	702b      	strb	r3, [r5, #0]
 800538a:	f1be 0f00 	cmp.w	lr, #0
 800538e:	f43f aed2 	beq.w	8005136 <keypad_sm+0x696>
 8005392:	f886 8000 	strb.w	r8, [r6]
 8005396:	e6ce      	b.n	8005136 <keypad_sm+0x696>
			if(num == 'A'){
 8005398:	2841      	cmp	r0, #65	; 0x41
 800539a:	f000 834d 	beq.w	8005a38 <keypad_sm+0xf98>
			else if(num == 'B'){
 800539e:	2842      	cmp	r0, #66	; 0x42
 80053a0:	f000 83bb 	beq.w	8005b1a <keypad_sm+0x107a>
			else if(num == 'C'){
 80053a4:	2843      	cmp	r0, #67	; 0x43
 80053a6:	f000 8551 	beq.w	8005e4c <keypad_sm+0x13ac>
			else if(num == 'D'){
 80053aa:	2844      	cmp	r0, #68	; 0x44
 80053ac:	f000 86ea 	beq.w	8006184 <keypad_sm+0x16e4>
			else if(num == '.'){
 80053b0:	282e      	cmp	r0, #46	; 0x2e
 80053b2:	f000 81b2 	beq.w	800571a <keypad_sm+0xc7a>
			else if(num >= '0' && num <= '9'){
 80053b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80053ba:	2b09      	cmp	r3, #9
 80053bc:	f240 81ae 	bls.w	800571c <keypad_sm+0xc7c>
			else if(num == '#'){
 80053c0:	2823      	cmp	r0, #35	; 0x23
 80053c2:	f001 811e 	beq.w	8006602 <keypad_sm+0x1b62>
			else if(num == '+'){
 80053c6:	282b      	cmp	r0, #43	; 0x2b
 80053c8:	f001 8355 	beq.w	8006a76 <keypad_sm+0x1fd6>
			else if(num == '-'){
 80053cc:	282d      	cmp	r0, #45	; 0x2d
 80053ce:	f001 84b6 	beq.w	8006d3e <keypad_sm+0x229e>
			else if(num == '['){
 80053d2:	f1a0 035b 	sub.w	r3, r0, #91	; 0x5b
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b18      	cmp	r3, #24
 80053da:	f63f ab89 	bhi.w	8004af0 <keypad_sm+0x50>
 80053de:	4ab4      	ldr	r2, [pc, #720]	; (80056b0 <keypad_sm+0xc10>)
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	f003 0401 	and.w	r4, r3, #1
 80053ea:	07db      	lsls	r3, r3, #31
 80053ec:	f53f ab80 	bmi.w	8004af0 <keypad_sm+0x50>
				fill_keypad(1, amp_set_main);
 80053f0:	4bb0      	ldr	r3, [pc, #704]	; (80056b4 <keypad_sm+0xc14>)
 80053f2:	2001      	movs	r0, #1
 80053f4:	6819      	ldr	r1, [r3, #0]
 80053f6:	f7ff f807 	bl	8004408 <fill_keypad>
				encmode = 1;
 80053fa:	2301      	movs	r3, #1
				encpos = 0;
 80053fc:	4aae      	ldr	r2, [pc, #696]	; (80056b8 <keypad_sm+0xc18>)
				encmode = 1;
 80053fe:	703b      	strb	r3, [r7, #0]
				encpos = 0;
 8005400:	7014      	strb	r4, [r2, #0]
 8005402:	f7ff bb75 	b.w	8004af0 <keypad_sm+0x50>
				chstat_aux_tx = 1;
 8005406:	2201      	movs	r2, #1
 8005408:	4bac      	ldr	r3, [pc, #688]	; (80056bc <keypad_sm+0xc1c>)
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	f7ff bb70 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8005410:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005414:	4daa      	ldr	r5, [pc, #680]	; (80056c0 <keypad_sm+0xc20>)
				kpenum = WAIT;
 8005416:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 800541a:	f995 2000 	ldrsb.w	r2, [r5]
 800541e:	2a03      	cmp	r2, #3
 8005420:	f73f ae89 	bgt.w	8005136 <keypad_sm+0x696>
 8005424:	4ba7      	ldr	r3, [pc, #668]	; (80056c4 <keypad_sm+0xc24>)
 8005426:	4ea8      	ldr	r6, [pc, #672]	; (80056c8 <keypad_sm+0xc28>)
			keypadarr[0] = num;
 8005428:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800542c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005430:	f896 8000 	ldrb.w	r8, [r6]
 8005434:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005438:	789c      	ldrb	r4, [r3, #2]
 800543a:	7858      	ldrb	r0, [r3, #1]
 800543c:	7819      	ldrb	r1, [r3, #0]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	e003      	b.n	800544a <keypad_sm+0x9aa>
	while(keypaditerator < 4){
 8005442:	46a4      	mov	ip, r4
 8005444:	4604      	mov	r4, r0
 8005446:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005448:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800544a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800544c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005450:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005452:	bf04      	itt	eq
 8005454:	f04f 0e01 	moveq.w	lr, #1
 8005458:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800545c:	2a04      	cmp	r2, #4
 800545e:	46e1      	mov	r9, ip
 8005460:	d1ef      	bne.n	8005442 <keypad_sm+0x9a2>
 8005462:	702a      	strb	r2, [r5, #0]
 8005464:	f883 c004 	strb.w	ip, [r3, #4]
 8005468:	70dc      	strb	r4, [r3, #3]
 800546a:	7098      	strb	r0, [r3, #2]
 800546c:	7059      	strb	r1, [r3, #1]
 800546e:	f883 a000 	strb.w	sl, [r3]
 8005472:	f1be 0f00 	cmp.w	lr, #0
 8005476:	f43f ae5e 	beq.w	8005136 <keypad_sm+0x696>
 800547a:	f886 8000 	strb.w	r8, [r6]
 800547e:	e65a      	b.n	8005136 <keypad_sm+0x696>
	float temp = translate_keypad();
 8005480:	f7fe fe48 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005484:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005486:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005488:	f7fb fe46 	bl	8001118 <__aeabi_fcmpge>
 800548c:	b150      	cbz	r0, 80054a4 <keypad_sm+0xa04>
 800548e:	4628      	mov	r0, r5
 8005490:	f7fa ffe2 	bl	8000458 <__aeabi_f2d>
 8005494:	a384      	add	r3, pc, #528	; (adr r3, 80056a8 <keypad_sm+0xc08>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fb fab1 	bl	8000a00 <__aeabi_dcmple>
 800549e:	b108      	cbz	r0, 80054a4 <keypad_sm+0xa04>
					amp_set_aux = translate_keypad();
 80054a0:	4b8a      	ldr	r3, [pc, #552]	; (80056cc <keypad_sm+0xc2c>)
 80054a2:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 80054a4:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 80054a8:	4d85      	ldr	r5, [pc, #532]	; (80056c0 <keypad_sm+0xc20>)
				kpenum = WAIT;
 80054aa:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 80054ae:	f995 2000 	ldrsb.w	r2, [r5]
 80054b2:	2a03      	cmp	r2, #3
 80054b4:	f73f ab1c 	bgt.w	8004af0 <keypad_sm+0x50>
 80054b8:	4b82      	ldr	r3, [pc, #520]	; (80056c4 <keypad_sm+0xc24>)
 80054ba:	4e83      	ldr	r6, [pc, #524]	; (80056c8 <keypad_sm+0xc28>)
			keypadarr[0] = num;
 80054bc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80054c0:	f893 8004 	ldrb.w	r8, [r3, #4]
 80054c4:	f896 e000 	ldrb.w	lr, [r6]
 80054c8:	78df      	ldrb	r7, [r3, #3]
 80054ca:	789c      	ldrb	r4, [r3, #2]
 80054cc:	7858      	ldrb	r0, [r3, #1]
 80054ce:	7819      	ldrb	r1, [r3, #0]
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	e003      	b.n	80054dc <keypad_sm+0xa3c>
	while(keypaditerator < 4){
 80054d4:	4627      	mov	r7, r4
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80054da:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80054dc:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80054de:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80054e2:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80054e4:	bf04      	itt	eq
 80054e6:	f04f 0e00 	moveq.w	lr, #0
 80054ea:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 80054ee:	2a04      	cmp	r2, #4
 80054f0:	46b8      	mov	r8, r7
 80054f2:	d1ef      	bne.n	80054d4 <keypad_sm+0xa34>
 80054f4:	702a      	strb	r2, [r5, #0]
 80054f6:	711f      	strb	r7, [r3, #4]
 80054f8:	70dc      	strb	r4, [r3, #3]
 80054fa:	7098      	strb	r0, [r3, #2]
 80054fc:	7059      	strb	r1, [r3, #1]
 80054fe:	f883 9000 	strb.w	r9, [r3]
 8005502:	f1bc 0f00 	cmp.w	ip, #0
 8005506:	f43f aaf3 	beq.w	8004af0 <keypad_sm+0x50>
 800550a:	f886 e000 	strb.w	lr, [r6]
 800550e:	f7ff baef 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 8005512:	f7fe fdff 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005516:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005518:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800551a:	f7fb fdfd 	bl	8001118 <__aeabi_fcmpge>
 800551e:	b130      	cbz	r0, 800552e <keypad_sm+0xa8e>
 8005520:	4628      	mov	r0, r5
 8005522:	496b      	ldr	r1, [pc, #428]	; (80056d0 <keypad_sm+0xc30>)
 8005524:	f7fb fdee 	bl	8001104 <__aeabi_fcmple>
 8005528:	b108      	cbz	r0, 800552e <keypad_sm+0xa8e>
					amp_set_aux = translate_keypad();
 800552a:	4b68      	ldr	r3, [pc, #416]	; (80056cc <keypad_sm+0xc2c>)
 800552c:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 800552e:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005532:	4d63      	ldr	r5, [pc, #396]	; (80056c0 <keypad_sm+0xc20>)
				kpenum = WAIT;
 8005534:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005538:	f995 2000 	ldrsb.w	r2, [r5]
 800553c:	2a03      	cmp	r2, #3
 800553e:	f73f adfa 	bgt.w	8005136 <keypad_sm+0x696>
 8005542:	4b60      	ldr	r3, [pc, #384]	; (80056c4 <keypad_sm+0xc24>)
 8005544:	4e60      	ldr	r6, [pc, #384]	; (80056c8 <keypad_sm+0xc28>)
			keypadarr[0] = num;
 8005546:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800554a:	f893 9004 	ldrb.w	r9, [r3, #4]
 800554e:	f896 8000 	ldrb.w	r8, [r6]
 8005552:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005556:	789c      	ldrb	r4, [r3, #2]
 8005558:	7858      	ldrb	r0, [r3, #1]
 800555a:	7819      	ldrb	r1, [r3, #0]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	e003      	b.n	8005568 <keypad_sm+0xac8>
	while(keypaditerator < 4){
 8005560:	46a4      	mov	ip, r4
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005566:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005568:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800556a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800556e:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005570:	bf04      	itt	eq
 8005572:	f04f 0e01 	moveq.w	lr, #1
 8005576:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800557a:	2a04      	cmp	r2, #4
 800557c:	46e1      	mov	r9, ip
 800557e:	d1ef      	bne.n	8005560 <keypad_sm+0xac0>
 8005580:	702a      	strb	r2, [r5, #0]
 8005582:	f883 c004 	strb.w	ip, [r3, #4]
 8005586:	70dc      	strb	r4, [r3, #3]
 8005588:	7098      	strb	r0, [r3, #2]
 800558a:	7059      	strb	r1, [r3, #1]
 800558c:	f883 a000 	strb.w	sl, [r3]
 8005590:	f1be 0f00 	cmp.w	lr, #0
 8005594:	f43f adcf 	beq.w	8005136 <keypad_sm+0x696>
 8005598:	f886 8000 	strb.w	r8, [r6]
 800559c:	e5cb      	b.n	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 800559e:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 80055a2:	4d47      	ldr	r5, [pc, #284]	; (80056c0 <keypad_sm+0xc20>)
				kpenum = WAIT;
 80055a4:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 80055a8:	f995 2000 	ldrsb.w	r2, [r5]
 80055ac:	2a03      	cmp	r2, #3
 80055ae:	f73f adc2 	bgt.w	8005136 <keypad_sm+0x696>
 80055b2:	4b44      	ldr	r3, [pc, #272]	; (80056c4 <keypad_sm+0xc24>)
 80055b4:	4e44      	ldr	r6, [pc, #272]	; (80056c8 <keypad_sm+0xc28>)
 80055b6:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80055b8:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80055bc:	f893 8004 	ldrb.w	r8, [r3, #4]
 80055c0:	f896 9000 	ldrb.w	r9, [r6]
 80055c4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80055c8:	789c      	ldrb	r4, [r3, #2]
 80055ca:	7858      	ldrb	r0, [r3, #1]
 80055cc:	7819      	ldrb	r1, [r3, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	e003      	b.n	80055da <keypad_sm+0xb3a>
	while(keypaditerator < 4){
 80055d2:	46a4      	mov	ip, r4
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80055d8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80055da:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80055dc:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80055e0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80055e2:	bf04      	itt	eq
 80055e4:	f04f 0e01 	moveq.w	lr, #1
 80055e8:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80055ec:	2a05      	cmp	r2, #5
 80055ee:	46e0      	mov	r8, ip
 80055f0:	d1ef      	bne.n	80055d2 <keypad_sm+0xb32>
 80055f2:	f883 c004 	strb.w	ip, [r3, #4]
 80055f6:	70dc      	strb	r4, [r3, #3]
 80055f8:	7098      	strb	r0, [r3, #2]
 80055fa:	7059      	strb	r1, [r3, #1]
 80055fc:	f883 a000 	strb.w	sl, [r3]
 8005600:	2304      	movs	r3, #4
 8005602:	702b      	strb	r3, [r5, #0]
 8005604:	f1be 0f00 	cmp.w	lr, #0
 8005608:	f43f ad95 	beq.w	8005136 <keypad_sm+0x696>
 800560c:	f886 9000 	strb.w	r9, [r6]
 8005610:	e591      	b.n	8005136 <keypad_sm+0x696>
 8005612:	4d2b      	ldr	r5, [pc, #172]	; (80056c0 <keypad_sm+0xc20>)
				kpenum = WAIT;
 8005614:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005616:	f995 1000 	ldrsb.w	r1, [r5]
 800561a:	2903      	cmp	r1, #3
 800561c:	f73f aa68 	bgt.w	8004af0 <keypad_sm+0x50>
 8005620:	4b28      	ldr	r3, [pc, #160]	; (80056c4 <keypad_sm+0xc24>)
 8005622:	4e29      	ldr	r6, [pc, #164]	; (80056c8 <keypad_sm+0xc28>)
			keypadarr[0] = num;
 8005624:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005628:	f893 8004 	ldrb.w	r8, [r3, #4]
 800562c:	f896 e000 	ldrb.w	lr, [r6]
 8005630:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005634:	789f      	ldrb	r7, [r3, #2]
 8005636:	785c      	ldrb	r4, [r3, #1]
 8005638:	7818      	ldrb	r0, [r3, #0]
 800563a:	b2c9      	uxtb	r1, r1
 800563c:	e003      	b.n	8005646 <keypad_sm+0xba6>
	while(keypaditerator < 4){
 800563e:	46bc      	mov	ip, r7
 8005640:	4627      	mov	r7, r4
 8005642:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005644:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005646:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005648:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800564c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800564e:	bf04      	itt	eq
 8005650:	f04f 0e00 	moveq.w	lr, #0
 8005654:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005656:	2904      	cmp	r1, #4
 8005658:	46e0      	mov	r8, ip
 800565a:	d1f0      	bne.n	800563e <keypad_sm+0xb9e>
 800565c:	7029      	strb	r1, [r5, #0]
 800565e:	f883 c004 	strb.w	ip, [r3, #4]
 8005662:	70df      	strb	r7, [r3, #3]
 8005664:	709c      	strb	r4, [r3, #2]
 8005666:	7058      	strb	r0, [r3, #1]
 8005668:	f883 9000 	strb.w	r9, [r3]
 800566c:	2a00      	cmp	r2, #0
 800566e:	f43f aa3f 	beq.w	8004af0 <keypad_sm+0x50>
 8005672:	f886 e000 	strb.w	lr, [r6]
 8005676:	f7ff ba3b 	b.w	8004af0 <keypad_sm+0x50>
 800567a:	4d11      	ldr	r5, [pc, #68]	; (80056c0 <keypad_sm+0xc20>)
				kpenum = WAIT;
 800567c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800567e:	f995 1000 	ldrsb.w	r1, [r5]
 8005682:	2903      	cmp	r1, #3
 8005684:	f73f aa34 	bgt.w	8004af0 <keypad_sm+0x50>
 8005688:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <keypad_sm+0xc24>)
 800568a:	4e0f      	ldr	r6, [pc, #60]	; (80056c8 <keypad_sm+0xc28>)
 800568c:	3101      	adds	r1, #1
			keypadarr[0] = num;
 800568e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005692:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005696:	f896 e000 	ldrb.w	lr, [r6]
 800569a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800569e:	789f      	ldrb	r7, [r3, #2]
 80056a0:	785c      	ldrb	r4, [r3, #1]
 80056a2:	7818      	ldrb	r0, [r3, #0]
 80056a4:	b2c9      	uxtb	r1, r1
 80056a6:	e019      	b.n	80056dc <keypad_sm+0xc3c>
 80056a8:	50b0f27c 	.word	0x50b0f27c
 80056ac:	3fe99a6b 	.word	0x3fe99a6b
 80056b0:	01000005 	.word	0x01000005
 80056b4:	20000004 	.word	0x20000004
 80056b8:	200003f5 	.word	0x200003f5
 80056bc:	200003ea 	.word	0x200003ea
 80056c0:	20000015 	.word	0x20000015
 80056c4:	20000010 	.word	0x20000010
 80056c8:	2000074c 	.word	0x2000074c
 80056cc:	20000000 	.word	0x20000000
 80056d0:	41400000 	.word	0x41400000
	while(keypaditerator < 4){
 80056d4:	46bc      	mov	ip, r7
 80056d6:	4627      	mov	r7, r4
 80056d8:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80056da:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80056dc:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80056de:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80056e2:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80056e4:	bf04      	itt	eq
 80056e6:	f04f 0e00 	moveq.w	lr, #0
 80056ea:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80056ec:	2905      	cmp	r1, #5
 80056ee:	46e0      	mov	r8, ip
 80056f0:	d1f0      	bne.n	80056d4 <keypad_sm+0xc34>
 80056f2:	f883 c004 	strb.w	ip, [r3, #4]
 80056f6:	70df      	strb	r7, [r3, #3]
 80056f8:	709c      	strb	r4, [r3, #2]
 80056fa:	7058      	strb	r0, [r3, #1]
 80056fc:	f883 9000 	strb.w	r9, [r3]
 8005700:	2304      	movs	r3, #4
 8005702:	702b      	strb	r3, [r5, #0]
 8005704:	2a00      	cmp	r2, #0
 8005706:	f43f a9f3 	beq.w	8004af0 <keypad_sm+0x50>
 800570a:	f886 e000 	strb.w	lr, [r6]
 800570e:	f7ff b9ef 	b.w	8004af0 <keypad_sm+0x50>
				chstat_main = 1;
 8005712:	2201      	movs	r2, #1
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	f7ff b9eb 	b.w	8004af0 <keypad_sm+0x50>
	if(num == 'z'){
 800571a:	202e      	movs	r0, #46	; 0x2e
}
 800571c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	f7fb bf98 	b.w	8001654 <update_keypad.part.0>
				kpenum = WAIT;
 8005724:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8005726:	4dc1      	ldr	r5, [pc, #772]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 8005728:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800572a:	f995 2000 	ldrsb.w	r2, [r5]
 800572e:	2a03      	cmp	r2, #3
 8005730:	f73f ad01 	bgt.w	8005136 <keypad_sm+0x696>
 8005734:	4bbe      	ldr	r3, [pc, #760]	; (8005a30 <keypad_sm+0xf90>)
 8005736:	4ebf      	ldr	r6, [pc, #764]	; (8005a34 <keypad_sm+0xf94>)
 8005738:	3201      	adds	r2, #1
 800573a:	4688      	mov	r8, r1
			keypadarr[0] = num;
 800573c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005740:	f893 e004 	ldrb.w	lr, [r3, #4]
 8005744:	f896 9000 	ldrb.w	r9, [r6]
 8005748:	f893 c003 	ldrb.w	ip, [r3, #3]
 800574c:	789c      	ldrb	r4, [r3, #2]
 800574e:	7858      	ldrb	r0, [r3, #1]
 8005750:	7819      	ldrb	r1, [r3, #0]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	e003      	b.n	800575e <keypad_sm+0xcbe>
	while(keypaditerator < 4){
 8005756:	46a4      	mov	ip, r4
 8005758:	4604      	mov	r4, r0
 800575a:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800575c:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800575e:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005760:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8005764:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005766:	bf04      	itt	eq
 8005768:	f04f 0801 	moveq.w	r8, #1
 800576c:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005770:	2a05      	cmp	r2, #5
 8005772:	46e6      	mov	lr, ip
 8005774:	d1ef      	bne.n	8005756 <keypad_sm+0xcb6>
 8005776:	f883 c004 	strb.w	ip, [r3, #4]
 800577a:	70dc      	strb	r4, [r3, #3]
 800577c:	7098      	strb	r0, [r3, #2]
 800577e:	7059      	strb	r1, [r3, #1]
 8005780:	f883 a000 	strb.w	sl, [r3]
 8005784:	2304      	movs	r3, #4
 8005786:	702b      	strb	r3, [r5, #0]
 8005788:	f1b8 0f00 	cmp.w	r8, #0
 800578c:	f43f acd3 	beq.w	8005136 <keypad_sm+0x696>
 8005790:	f886 9000 	strb.w	r9, [r6]
 8005794:	e4cf      	b.n	8005136 <keypad_sm+0x696>
 8005796:	4da5      	ldr	r5, [pc, #660]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 8005798:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 800579a:	f995 1000 	ldrsb.w	r1, [r5]
 800579e:	2903      	cmp	r1, #3
 80057a0:	f73f a9a6 	bgt.w	8004af0 <keypad_sm+0x50>
 80057a4:	4ba2      	ldr	r3, [pc, #648]	; (8005a30 <keypad_sm+0xf90>)
 80057a6:	4ea3      	ldr	r6, [pc, #652]	; (8005a34 <keypad_sm+0xf94>)
 80057a8:	3101      	adds	r1, #1
			keypadarr[0] = num;
 80057aa:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80057ae:	f893 8004 	ldrb.w	r8, [r3, #4]
 80057b2:	f896 e000 	ldrb.w	lr, [r6]
 80057b6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80057ba:	789f      	ldrb	r7, [r3, #2]
 80057bc:	785c      	ldrb	r4, [r3, #1]
 80057be:	7818      	ldrb	r0, [r3, #0]
 80057c0:	b2c9      	uxtb	r1, r1
 80057c2:	e003      	b.n	80057cc <keypad_sm+0xd2c>
	while(keypaditerator < 4){
 80057c4:	46bc      	mov	ip, r7
 80057c6:	4627      	mov	r7, r4
 80057c8:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80057ca:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80057cc:	3101      	adds	r1, #1
				keypaddecimal = 0;
 80057ce:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80057d2:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 80057d4:	bf04      	itt	eq
 80057d6:	f04f 0e00 	moveq.w	lr, #0
 80057da:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 80057dc:	2905      	cmp	r1, #5
 80057de:	46e0      	mov	r8, ip
 80057e0:	d1f0      	bne.n	80057c4 <keypad_sm+0xd24>
 80057e2:	f883 c004 	strb.w	ip, [r3, #4]
 80057e6:	70df      	strb	r7, [r3, #3]
 80057e8:	709c      	strb	r4, [r3, #2]
 80057ea:	7058      	strb	r0, [r3, #1]
 80057ec:	f883 9000 	strb.w	r9, [r3]
 80057f0:	2304      	movs	r3, #4
 80057f2:	702b      	strb	r3, [r5, #0]
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	f43f a97b 	beq.w	8004af0 <keypad_sm+0x50>
 80057fa:	f886 e000 	strb.w	lr, [r6]
 80057fe:	f7ff b977 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8005802:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8005804:	4d89      	ldr	r5, [pc, #548]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 8005806:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8005808:	f995 2000 	ldrsb.w	r2, [r5]
 800580c:	2a03      	cmp	r2, #3
 800580e:	f73f ac92 	bgt.w	8005136 <keypad_sm+0x696>
 8005812:	4b87      	ldr	r3, [pc, #540]	; (8005a30 <keypad_sm+0xf90>)
 8005814:	4e87      	ldr	r6, [pc, #540]	; (8005a34 <keypad_sm+0xf94>)
 8005816:	3201      	adds	r2, #1
 8005818:	4688      	mov	r8, r1
			keypadarr[0] = num;
 800581a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800581e:	f893 e004 	ldrb.w	lr, [r3, #4]
 8005822:	f896 9000 	ldrb.w	r9, [r6]
 8005826:	f893 c003 	ldrb.w	ip, [r3, #3]
 800582a:	789c      	ldrb	r4, [r3, #2]
 800582c:	7858      	ldrb	r0, [r3, #1]
 800582e:	7819      	ldrb	r1, [r3, #0]
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	e003      	b.n	800583c <keypad_sm+0xd9c>
	while(keypaditerator < 4){
 8005834:	46a4      	mov	ip, r4
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800583a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800583c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800583e:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8005842:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005844:	bf04      	itt	eq
 8005846:	f04f 0801 	moveq.w	r8, #1
 800584a:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 800584e:	2a05      	cmp	r2, #5
 8005850:	46e6      	mov	lr, ip
 8005852:	d1ef      	bne.n	8005834 <keypad_sm+0xd94>
 8005854:	f883 c004 	strb.w	ip, [r3, #4]
 8005858:	70dc      	strb	r4, [r3, #3]
 800585a:	7098      	strb	r0, [r3, #2]
 800585c:	7059      	strb	r1, [r3, #1]
 800585e:	f883 a000 	strb.w	sl, [r3]
 8005862:	2304      	movs	r3, #4
 8005864:	702b      	strb	r3, [r5, #0]
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	f43f ac64 	beq.w	8005136 <keypad_sm+0x696>
 800586e:	f886 9000 	strb.w	r9, [r6]
 8005872:	e460      	b.n	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 8005874:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8005876:	4d6d      	ldr	r5, [pc, #436]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 8005878:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800587a:	f995 2000 	ldrsb.w	r2, [r5]
 800587e:	2a03      	cmp	r2, #3
 8005880:	f73f ac59 	bgt.w	8005136 <keypad_sm+0x696>
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <keypad_sm+0xf90>)
 8005886:	4e6b      	ldr	r6, [pc, #428]	; (8005a34 <keypad_sm+0xf94>)
 8005888:	3201      	adds	r2, #1
 800588a:	4688      	mov	r8, r1
			keypadarr[0] = num;
 800588c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005890:	f893 e004 	ldrb.w	lr, [r3, #4]
 8005894:	f896 9000 	ldrb.w	r9, [r6]
 8005898:	f893 c003 	ldrb.w	ip, [r3, #3]
 800589c:	789c      	ldrb	r4, [r3, #2]
 800589e:	7858      	ldrb	r0, [r3, #1]
 80058a0:	7819      	ldrb	r1, [r3, #0]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	e003      	b.n	80058ae <keypad_sm+0xe0e>
	while(keypaditerator < 4){
 80058a6:	46a4      	mov	ip, r4
 80058a8:	4604      	mov	r4, r0
 80058aa:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80058ac:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80058ae:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80058b0:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 80058b4:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80058b6:	bf04      	itt	eq
 80058b8:	f04f 0801 	moveq.w	r8, #1
 80058bc:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 80058c0:	2a05      	cmp	r2, #5
 80058c2:	46e6      	mov	lr, ip
 80058c4:	d1ef      	bne.n	80058a6 <keypad_sm+0xe06>
 80058c6:	f883 c004 	strb.w	ip, [r3, #4]
 80058ca:	70dc      	strb	r4, [r3, #3]
 80058cc:	7098      	strb	r0, [r3, #2]
 80058ce:	7059      	strb	r1, [r3, #1]
 80058d0:	f883 a000 	strb.w	sl, [r3]
 80058d4:	2304      	movs	r3, #4
 80058d6:	702b      	strb	r3, [r5, #0]
 80058d8:	f1b8 0f00 	cmp.w	r8, #0
 80058dc:	f43f ac2b 	beq.w	8005136 <keypad_sm+0x696>
 80058e0:	f886 9000 	strb.w	r9, [r6]
 80058e4:	e427      	b.n	8005136 <keypad_sm+0x696>
 80058e6:	4d51      	ldr	r5, [pc, #324]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 80058e8:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 80058ea:	f995 1000 	ldrsb.w	r1, [r5]
 80058ee:	2903      	cmp	r1, #3
 80058f0:	f73f a8fe 	bgt.w	8004af0 <keypad_sm+0x50>
 80058f4:	4b4e      	ldr	r3, [pc, #312]	; (8005a30 <keypad_sm+0xf90>)
 80058f6:	4e4f      	ldr	r6, [pc, #316]	; (8005a34 <keypad_sm+0xf94>)
 80058f8:	3101      	adds	r1, #1
			keypadarr[0] = num;
 80058fa:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80058fe:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005902:	f896 e000 	ldrb.w	lr, [r6]
 8005906:	f893 c003 	ldrb.w	ip, [r3, #3]
 800590a:	789f      	ldrb	r7, [r3, #2]
 800590c:	785c      	ldrb	r4, [r3, #1]
 800590e:	7818      	ldrb	r0, [r3, #0]
 8005910:	b2c9      	uxtb	r1, r1
 8005912:	e003      	b.n	800591c <keypad_sm+0xe7c>
	while(keypaditerator < 4){
 8005914:	46bc      	mov	ip, r7
 8005916:	4627      	mov	r7, r4
 8005918:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800591a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 800591c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 800591e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005922:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005924:	bf04      	itt	eq
 8005926:	f04f 0e00 	moveq.w	lr, #0
 800592a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 800592c:	2905      	cmp	r1, #5
 800592e:	46e0      	mov	r8, ip
 8005930:	d1f0      	bne.n	8005914 <keypad_sm+0xe74>
 8005932:	f883 c004 	strb.w	ip, [r3, #4]
 8005936:	70df      	strb	r7, [r3, #3]
 8005938:	709c      	strb	r4, [r3, #2]
 800593a:	7058      	strb	r0, [r3, #1]
 800593c:	f883 9000 	strb.w	r9, [r3]
 8005940:	2304      	movs	r3, #4
 8005942:	702b      	strb	r3, [r5, #0]
 8005944:	2a00      	cmp	r2, #0
 8005946:	f43f a8d3 	beq.w	8004af0 <keypad_sm+0x50>
 800594a:	f886 e000 	strb.w	lr, [r6]
 800594e:	f7ff b8cf 	b.w	8004af0 <keypad_sm+0x50>
 8005952:	4d36      	ldr	r5, [pc, #216]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 8005954:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005956:	f995 1000 	ldrsb.w	r1, [r5]
 800595a:	2903      	cmp	r1, #3
 800595c:	f73f a8c8 	bgt.w	8004af0 <keypad_sm+0x50>
 8005960:	4b33      	ldr	r3, [pc, #204]	; (8005a30 <keypad_sm+0xf90>)
 8005962:	4e34      	ldr	r6, [pc, #208]	; (8005a34 <keypad_sm+0xf94>)
			keypadarr[0] = num;
 8005964:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005968:	f893 8004 	ldrb.w	r8, [r3, #4]
 800596c:	f896 e000 	ldrb.w	lr, [r6]
 8005970:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005974:	789f      	ldrb	r7, [r3, #2]
 8005976:	785c      	ldrb	r4, [r3, #1]
 8005978:	7818      	ldrb	r0, [r3, #0]
 800597a:	b2c9      	uxtb	r1, r1
 800597c:	e003      	b.n	8005986 <keypad_sm+0xee6>
	while(keypaditerator < 4){
 800597e:	46bc      	mov	ip, r7
 8005980:	4627      	mov	r7, r4
 8005982:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005984:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005986:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005988:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800598c:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 800598e:	bf04      	itt	eq
 8005990:	f04f 0e00 	moveq.w	lr, #0
 8005994:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005996:	2904      	cmp	r1, #4
 8005998:	46e0      	mov	r8, ip
 800599a:	d1f0      	bne.n	800597e <keypad_sm+0xede>
 800599c:	7029      	strb	r1, [r5, #0]
 800599e:	f883 c004 	strb.w	ip, [r3, #4]
 80059a2:	70df      	strb	r7, [r3, #3]
 80059a4:	709c      	strb	r4, [r3, #2]
 80059a6:	7058      	strb	r0, [r3, #1]
 80059a8:	f883 9000 	strb.w	r9, [r3]
 80059ac:	2a00      	cmp	r2, #0
 80059ae:	f43f a89f 	beq.w	8004af0 <keypad_sm+0x50>
 80059b2:	f886 e000 	strb.w	lr, [r6]
 80059b6:	f7ff b89b 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 80059ba:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80059bc:	4d1b      	ldr	r5, [pc, #108]	; (8005a2c <keypad_sm+0xf8c>)
				kpenum = WAIT;
 80059be:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80059c0:	f995 2000 	ldrsb.w	r2, [r5]
 80059c4:	2a03      	cmp	r2, #3
 80059c6:	f73f abb6 	bgt.w	8005136 <keypad_sm+0x696>
 80059ca:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <keypad_sm+0xf90>)
 80059cc:	4e19      	ldr	r6, [pc, #100]	; (8005a34 <keypad_sm+0xf94>)
 80059ce:	4689      	mov	r9, r1
			keypadarr[0] = num;
 80059d0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 80059d4:	f893 8004 	ldrb.w	r8, [r3, #4]
 80059d8:	f896 e000 	ldrb.w	lr, [r6]
 80059dc:	f893 c003 	ldrb.w	ip, [r3, #3]
 80059e0:	789c      	ldrb	r4, [r3, #2]
 80059e2:	7858      	ldrb	r0, [r3, #1]
 80059e4:	7819      	ldrb	r1, [r3, #0]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	e003      	b.n	80059f2 <keypad_sm+0xf52>
	while(keypaditerator < 4){
 80059ea:	46a4      	mov	ip, r4
 80059ec:	4604      	mov	r4, r0
 80059ee:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80059f0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80059f2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80059f4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80059f8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80059fa:	bf04      	itt	eq
 80059fc:	f04f 0901 	moveq.w	r9, #1
 8005a00:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005a04:	2a04      	cmp	r2, #4
 8005a06:	46e0      	mov	r8, ip
 8005a08:	d1ef      	bne.n	80059ea <keypad_sm+0xf4a>
 8005a0a:	702a      	strb	r2, [r5, #0]
 8005a0c:	f883 c004 	strb.w	ip, [r3, #4]
 8005a10:	70dc      	strb	r4, [r3, #3]
 8005a12:	7098      	strb	r0, [r3, #2]
 8005a14:	7059      	strb	r1, [r3, #1]
 8005a16:	f883 a000 	strb.w	sl, [r3]
 8005a1a:	f1b9 0f00 	cmp.w	r9, #0
 8005a1e:	f43f ab8a 	beq.w	8005136 <keypad_sm+0x696>
 8005a22:	f886 e000 	strb.w	lr, [r6]
 8005a26:	f7ff bb86 	b.w	8005136 <keypad_sm+0x696>
 8005a2a:	bf00      	nop
 8005a2c:	20000015 	.word	0x20000015
 8005a30:	20000010 	.word	0x20000010
 8005a34:	2000074c 	.word	0x2000074c
 8005a38:	4dbc      	ldr	r5, [pc, #752]	; (8005d2c <keypad_sm+0x128c>)
				kpenum = WAIT;
 8005a3a:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005a3c:	f995 1000 	ldrsb.w	r1, [r5]
 8005a40:	2903      	cmp	r1, #3
 8005a42:	f73f a855 	bgt.w	8004af0 <keypad_sm+0x50>
 8005a46:	4bba      	ldr	r3, [pc, #744]	; (8005d30 <keypad_sm+0x1290>)
 8005a48:	4eba      	ldr	r6, [pc, #744]	; (8005d34 <keypad_sm+0x1294>)
 8005a4a:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005a4c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005a50:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005a54:	f896 e000 	ldrb.w	lr, [r6]
 8005a58:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005a5c:	789f      	ldrb	r7, [r3, #2]
 8005a5e:	785c      	ldrb	r4, [r3, #1]
 8005a60:	7818      	ldrb	r0, [r3, #0]
 8005a62:	b2c9      	uxtb	r1, r1
 8005a64:	e003      	b.n	8005a6e <keypad_sm+0xfce>
	while(keypaditerator < 4){
 8005a66:	46bc      	mov	ip, r7
 8005a68:	4627      	mov	r7, r4
 8005a6a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005a6c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005a6e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005a70:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005a74:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005a76:	bf04      	itt	eq
 8005a78:	f04f 0e00 	moveq.w	lr, #0
 8005a7c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005a7e:	2905      	cmp	r1, #5
 8005a80:	46e0      	mov	r8, ip
 8005a82:	d1f0      	bne.n	8005a66 <keypad_sm+0xfc6>
 8005a84:	f883 c004 	strb.w	ip, [r3, #4]
 8005a88:	70df      	strb	r7, [r3, #3]
 8005a8a:	709c      	strb	r4, [r3, #2]
 8005a8c:	7058      	strb	r0, [r3, #1]
 8005a8e:	f883 9000 	strb.w	r9, [r3]
 8005a92:	2304      	movs	r3, #4
 8005a94:	702b      	strb	r3, [r5, #0]
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	f43f a82a 	beq.w	8004af0 <keypad_sm+0x50>
 8005a9c:	f886 e000 	strb.w	lr, [r6]
 8005aa0:	f7ff b826 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8005aa4:	f04f 0800 	mov.w	r8, #0
	while(keypaditerator < 4){
 8005aa8:	4da0      	ldr	r5, [pc, #640]	; (8005d2c <keypad_sm+0x128c>)
				kpenum = WAIT;
 8005aaa:	f884 8000 	strb.w	r8, [r4]
	while(keypaditerator < 4){
 8005aae:	f995 2000 	ldrsb.w	r2, [r5]
 8005ab2:	2a03      	cmp	r2, #3
 8005ab4:	f73f ab3f 	bgt.w	8005136 <keypad_sm+0x696>
 8005ab8:	4b9d      	ldr	r3, [pc, #628]	; (8005d30 <keypad_sm+0x1290>)
 8005aba:	4e9e      	ldr	r6, [pc, #632]	; (8005d34 <keypad_sm+0x1294>)
 8005abc:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005abe:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005ac2:	f893 e004 	ldrb.w	lr, [r3, #4]
 8005ac6:	f896 9000 	ldrb.w	r9, [r6]
 8005aca:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005ace:	789c      	ldrb	r4, [r3, #2]
 8005ad0:	7858      	ldrb	r0, [r3, #1]
 8005ad2:	7819      	ldrb	r1, [r3, #0]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	e003      	b.n	8005ae0 <keypad_sm+0x1040>
	while(keypaditerator < 4){
 8005ad8:	46a4      	mov	ip, r4
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005ade:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005ae0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005ae2:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8005ae6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005ae8:	bf04      	itt	eq
 8005aea:	f04f 0801 	moveq.w	r8, #1
 8005aee:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8005af2:	2a05      	cmp	r2, #5
 8005af4:	46e6      	mov	lr, ip
 8005af6:	d1ef      	bne.n	8005ad8 <keypad_sm+0x1038>
 8005af8:	f883 c004 	strb.w	ip, [r3, #4]
 8005afc:	70dc      	strb	r4, [r3, #3]
 8005afe:	7098      	strb	r0, [r3, #2]
 8005b00:	7059      	strb	r1, [r3, #1]
 8005b02:	f883 a000 	strb.w	sl, [r3]
 8005b06:	2304      	movs	r3, #4
 8005b08:	702b      	strb	r3, [r5, #0]
 8005b0a:	f1b8 0f00 	cmp.w	r8, #0
 8005b0e:	f43f ab12 	beq.w	8005136 <keypad_sm+0x696>
 8005b12:	f886 9000 	strb.w	r9, [r6]
 8005b16:	f7ff bb0e 	b.w	8005136 <keypad_sm+0x696>
 8005b1a:	4d84      	ldr	r5, [pc, #528]	; (8005d2c <keypad_sm+0x128c>)
				kpenum = WAIT;
 8005b1c:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005b1e:	f995 1000 	ldrsb.w	r1, [r5]
 8005b22:	2903      	cmp	r1, #3
 8005b24:	f73e afe4 	bgt.w	8004af0 <keypad_sm+0x50>
 8005b28:	4b81      	ldr	r3, [pc, #516]	; (8005d30 <keypad_sm+0x1290>)
 8005b2a:	4e82      	ldr	r6, [pc, #520]	; (8005d34 <keypad_sm+0x1294>)
			keypadarr[0] = num;
 8005b2c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005b30:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005b34:	f896 e000 	ldrb.w	lr, [r6]
 8005b38:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005b3c:	789f      	ldrb	r7, [r3, #2]
 8005b3e:	785c      	ldrb	r4, [r3, #1]
 8005b40:	7818      	ldrb	r0, [r3, #0]
 8005b42:	b2c9      	uxtb	r1, r1
 8005b44:	e003      	b.n	8005b4e <keypad_sm+0x10ae>
	while(keypaditerator < 4){
 8005b46:	46bc      	mov	ip, r7
 8005b48:	4627      	mov	r7, r4
 8005b4a:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005b4c:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005b4e:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005b50:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005b54:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005b56:	bf04      	itt	eq
 8005b58:	f04f 0e00 	moveq.w	lr, #0
 8005b5c:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005b5e:	2904      	cmp	r1, #4
 8005b60:	46e0      	mov	r8, ip
 8005b62:	d1f0      	bne.n	8005b46 <keypad_sm+0x10a6>
 8005b64:	7029      	strb	r1, [r5, #0]
 8005b66:	f883 c004 	strb.w	ip, [r3, #4]
 8005b6a:	70df      	strb	r7, [r3, #3]
 8005b6c:	709c      	strb	r4, [r3, #2]
 8005b6e:	7058      	strb	r0, [r3, #1]
 8005b70:	f883 9000 	strb.w	r9, [r3]
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	f43e afbb 	beq.w	8004af0 <keypad_sm+0x50>
 8005b7a:	f886 e000 	strb.w	lr, [r6]
 8005b7e:	f7fe bfb7 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 8005b82:	f7fe fac7 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b86:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005b88:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005b8a:	f7fb fac5 	bl	8001118 <__aeabi_fcmpge>
 8005b8e:	b158      	cbz	r0, 8005ba8 <keypad_sm+0x1108>
 8005b90:	4628      	mov	r0, r5
 8005b92:	4969      	ldr	r1, [pc, #420]	; (8005d38 <keypad_sm+0x1298>)
 8005b94:	f7fb fab6 	bl	8001104 <__aeabi_fcmple>
 8005b98:	b130      	cbz	r0, 8005ba8 <keypad_sm+0x1108>
					volt_set_main_old = volt_set_main;
 8005b9a:	4d68      	ldr	r5, [pc, #416]	; (8005d3c <keypad_sm+0x129c>)
 8005b9c:	4b68      	ldr	r3, [pc, #416]	; (8005d40 <keypad_sm+0x12a0>)
 8005b9e:	682a      	ldr	r2, [r5, #0]
 8005ba0:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005ba2:	f7fe fab7 	bl	8004114 <translate_keypad>
 8005ba6:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005ba8:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005bac:	4d5f      	ldr	r5, [pc, #380]	; (8005d2c <keypad_sm+0x128c>)
				kpenum = WAIT;
 8005bae:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005bb2:	f995 2000 	ldrsb.w	r2, [r5]
 8005bb6:	2a03      	cmp	r2, #3
 8005bb8:	f73f aabd 	bgt.w	8005136 <keypad_sm+0x696>
 8005bbc:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <keypad_sm+0x1290>)
 8005bbe:	4e5d      	ldr	r6, [pc, #372]	; (8005d34 <keypad_sm+0x1294>)
			keypadarr[0] = num;
 8005bc0:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005bc4:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005bc8:	f896 8000 	ldrb.w	r8, [r6]
 8005bcc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005bd0:	789c      	ldrb	r4, [r3, #2]
 8005bd2:	7858      	ldrb	r0, [r3, #1]
 8005bd4:	7819      	ldrb	r1, [r3, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	e003      	b.n	8005be2 <keypad_sm+0x1142>
	while(keypaditerator < 4){
 8005bda:	46a4      	mov	ip, r4
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005be0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005be2:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005be4:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005be8:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005bea:	bf04      	itt	eq
 8005bec:	f04f 0e01 	moveq.w	lr, #1
 8005bf0:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005bf4:	2a04      	cmp	r2, #4
 8005bf6:	46e1      	mov	r9, ip
 8005bf8:	d1ef      	bne.n	8005bda <keypad_sm+0x113a>
 8005bfa:	702a      	strb	r2, [r5, #0]
 8005bfc:	f883 c004 	strb.w	ip, [r3, #4]
 8005c00:	70dc      	strb	r4, [r3, #3]
 8005c02:	7098      	strb	r0, [r3, #2]
 8005c04:	7059      	strb	r1, [r3, #1]
 8005c06:	f883 a000 	strb.w	sl, [r3]
 8005c0a:	f1be 0f00 	cmp.w	lr, #0
 8005c0e:	f43f aa92 	beq.w	8005136 <keypad_sm+0x696>
 8005c12:	f886 8000 	strb.w	r8, [r6]
 8005c16:	f7ff ba8e 	b.w	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 8005c1a:	f04f 0e00 	mov.w	lr, #0
	while(keypaditerator < 4){
 8005c1e:	4d43      	ldr	r5, [pc, #268]	; (8005d2c <keypad_sm+0x128c>)
				kpenum = WAIT;
 8005c20:	f884 e000 	strb.w	lr, [r4]
	while(keypaditerator < 4){
 8005c24:	f995 2000 	ldrsb.w	r2, [r5]
 8005c28:	2a03      	cmp	r2, #3
 8005c2a:	f73f aa84 	bgt.w	8005136 <keypad_sm+0x696>
 8005c2e:	4b40      	ldr	r3, [pc, #256]	; (8005d30 <keypad_sm+0x1290>)
 8005c30:	4e40      	ldr	r6, [pc, #256]	; (8005d34 <keypad_sm+0x1294>)
			keypadarr[0] = num;
 8005c32:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005c36:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005c3a:	f896 8000 	ldrb.w	r8, [r6]
 8005c3e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005c42:	789c      	ldrb	r4, [r3, #2]
 8005c44:	7858      	ldrb	r0, [r3, #1]
 8005c46:	7819      	ldrb	r1, [r3, #0]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	e003      	b.n	8005c54 <keypad_sm+0x11b4>
	while(keypaditerator < 4){
 8005c4c:	46a4      	mov	ip, r4
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005c52:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005c54:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005c56:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005c5a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005c5c:	bf04      	itt	eq
 8005c5e:	f04f 0e01 	moveq.w	lr, #1
 8005c62:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8005c66:	2a04      	cmp	r2, #4
 8005c68:	46e1      	mov	r9, ip
 8005c6a:	d1ef      	bne.n	8005c4c <keypad_sm+0x11ac>
 8005c6c:	702a      	strb	r2, [r5, #0]
 8005c6e:	f883 c004 	strb.w	ip, [r3, #4]
 8005c72:	70dc      	strb	r4, [r3, #3]
 8005c74:	7098      	strb	r0, [r3, #2]
 8005c76:	7059      	strb	r1, [r3, #1]
 8005c78:	f883 a000 	strb.w	sl, [r3]
 8005c7c:	f1be 0f00 	cmp.w	lr, #0
 8005c80:	f43f aa59 	beq.w	8005136 <keypad_sm+0x696>
 8005c84:	f886 8000 	strb.w	r8, [r6]
 8005c88:	f7ff ba55 	b.w	8005136 <keypad_sm+0x696>
 8005c8c:	4d27      	ldr	r5, [pc, #156]	; (8005d2c <keypad_sm+0x128c>)
 8005c8e:	f995 2000 	ldrsb.w	r2, [r5]
 8005c92:	2a03      	cmp	r2, #3
 8005c94:	f73f aa4f 	bgt.w	8005136 <keypad_sm+0x696>
 8005c98:	4b25      	ldr	r3, [pc, #148]	; (8005d30 <keypad_sm+0x1290>)
 8005c9a:	4e26      	ldr	r6, [pc, #152]	; (8005d34 <keypad_sm+0x1294>)
 8005c9c:	3201      	adds	r2, #1
 8005c9e:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005ca2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005ca6:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005caa:	f896 e000 	ldrb.w	lr, [r6]
 8005cae:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005cb2:	789c      	ldrb	r4, [r3, #2]
 8005cb4:	7858      	ldrb	r0, [r3, #1]
 8005cb6:	7819      	ldrb	r1, [r3, #0]
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	e003      	b.n	8005cc4 <keypad_sm+0x1224>
	while(keypaditerator < 4){
 8005cbc:	46a4      	mov	ip, r4
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005cc2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005cc4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005cc6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005cca:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005ccc:	bf04      	itt	eq
 8005cce:	f04f 0801 	moveq.w	r8, #1
 8005cd2:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005cd6:	2a05      	cmp	r2, #5
 8005cd8:	46e1      	mov	r9, ip
 8005cda:	d1ef      	bne.n	8005cbc <keypad_sm+0x121c>
 8005cdc:	f883 c004 	strb.w	ip, [r3, #4]
 8005ce0:	70dc      	strb	r4, [r3, #3]
 8005ce2:	7098      	strb	r0, [r3, #2]
 8005ce4:	7059      	strb	r1, [r3, #1]
 8005ce6:	f883 a000 	strb.w	sl, [r3]
 8005cea:	2304      	movs	r3, #4
 8005cec:	702b      	strb	r3, [r5, #0]
 8005cee:	f1b8 0f00 	cmp.w	r8, #0
 8005cf2:	f43f aa20 	beq.w	8005136 <keypad_sm+0x696>
 8005cf6:	f886 e000 	strb.w	lr, [r6]
 8005cfa:	f7ff ba1c 	b.w	8005136 <keypad_sm+0x696>
 8005cfe:	4d0b      	ldr	r5, [pc, #44]	; (8005d2c <keypad_sm+0x128c>)
				kpenum = WAIT;
 8005d00:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005d02:	f995 1000 	ldrsb.w	r1, [r5]
 8005d06:	2903      	cmp	r1, #3
 8005d08:	f73e aef2 	bgt.w	8004af0 <keypad_sm+0x50>
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <keypad_sm+0x1290>)
 8005d0e:	4e09      	ldr	r6, [pc, #36]	; (8005d34 <keypad_sm+0x1294>)
 8005d10:	3101      	adds	r1, #1
			keypadarr[0] = num;
 8005d12:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005d16:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005d1a:	f896 e000 	ldrb.w	lr, [r6]
 8005d1e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005d22:	789f      	ldrb	r7, [r3, #2]
 8005d24:	785c      	ldrb	r4, [r3, #1]
 8005d26:	7818      	ldrb	r0, [r3, #0]
 8005d28:	b2c9      	uxtb	r1, r1
 8005d2a:	e00f      	b.n	8005d4c <keypad_sm+0x12ac>
 8005d2c:	20000015 	.word	0x20000015
 8005d30:	20000010 	.word	0x20000010
 8005d34:	2000074c 	.word	0x2000074c
 8005d38:	41400000 	.word	0x41400000
 8005d3c:	20000a74 	.word	0x20000a74
 8005d40:	20000a78 	.word	0x20000a78
	while(keypaditerator < 4){
 8005d44:	46bc      	mov	ip, r7
 8005d46:	4627      	mov	r7, r4
 8005d48:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8005d4a:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8005d4c:	3101      	adds	r1, #1
				keypaddecimal = 0;
 8005d4e:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005d52:	b2c9      	uxtb	r1, r1
				keypaddecimal = 0;
 8005d54:	bf04      	itt	eq
 8005d56:	f04f 0e00 	moveq.w	lr, #0
 8005d5a:	2201      	moveq	r2, #1
	while(keypaditerator < 4){
 8005d5c:	2905      	cmp	r1, #5
 8005d5e:	46e0      	mov	r8, ip
 8005d60:	d1f0      	bne.n	8005d44 <keypad_sm+0x12a4>
 8005d62:	f883 c004 	strb.w	ip, [r3, #4]
 8005d66:	70df      	strb	r7, [r3, #3]
 8005d68:	709c      	strb	r4, [r3, #2]
 8005d6a:	7058      	strb	r0, [r3, #1]
 8005d6c:	f883 9000 	strb.w	r9, [r3]
 8005d70:	2304      	movs	r3, #4
 8005d72:	702b      	strb	r3, [r5, #0]
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	f43e aebb 	beq.w	8004af0 <keypad_sm+0x50>
 8005d7a:	f886 e000 	strb.w	lr, [r6]
 8005d7e:	f7fe beb7 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 8005d82:	f7fe f9c7 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d86:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8005d88:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8005d8a:	f7fb f9c5 	bl	8001118 <__aeabi_fcmpge>
 8005d8e:	b158      	cbz	r0, 8005da8 <keypad_sm+0x1308>
 8005d90:	4628      	mov	r0, r5
 8005d92:	49c8      	ldr	r1, [pc, #800]	; (80060b4 <keypad_sm+0x1614>)
 8005d94:	f7fb f9b6 	bl	8001104 <__aeabi_fcmple>
 8005d98:	b130      	cbz	r0, 8005da8 <keypad_sm+0x1308>
					volt_set_main_old = volt_set_main;
 8005d9a:	4dc7      	ldr	r5, [pc, #796]	; (80060b8 <keypad_sm+0x1618>)
 8005d9c:	4bc7      	ldr	r3, [pc, #796]	; (80060bc <keypad_sm+0x161c>)
 8005d9e:	682a      	ldr	r2, [r5, #0]
 8005da0:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8005da2:	f7fe f9b7 	bl	8004114 <translate_keypad>
 8005da6:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8005da8:	f04f 0c00 	mov.w	ip, #0
	while(keypaditerator < 4){
 8005dac:	4dc4      	ldr	r5, [pc, #784]	; (80060c0 <keypad_sm+0x1620>)
				kpenum = WAIT;
 8005dae:	f884 c000 	strb.w	ip, [r4]
	while(keypaditerator < 4){
 8005db2:	f995 2000 	ldrsb.w	r2, [r5]
 8005db6:	2a03      	cmp	r2, #3
 8005db8:	f73e ae9a 	bgt.w	8004af0 <keypad_sm+0x50>
 8005dbc:	4bc1      	ldr	r3, [pc, #772]	; (80060c4 <keypad_sm+0x1624>)
 8005dbe:	4ec2      	ldr	r6, [pc, #776]	; (80060c8 <keypad_sm+0x1628>)
 8005dc0:	3201      	adds	r2, #1
			keypadarr[0] = num;
 8005dc2:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005dc6:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005dca:	f896 e000 	ldrb.w	lr, [r6]
 8005dce:	78df      	ldrb	r7, [r3, #3]
 8005dd0:	789c      	ldrb	r4, [r3, #2]
 8005dd2:	7858      	ldrb	r0, [r3, #1]
 8005dd4:	7819      	ldrb	r1, [r3, #0]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	e003      	b.n	8005de2 <keypad_sm+0x1342>
	while(keypaditerator < 4){
 8005dda:	4627      	mov	r7, r4
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005de0:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005de2:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005de4:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005de8:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005dea:	bf04      	itt	eq
 8005dec:	f04f 0e00 	moveq.w	lr, #0
 8005df0:	f04f 0c01 	moveq.w	ip, #1
	while(keypaditerator < 4){
 8005df4:	2a05      	cmp	r2, #5
 8005df6:	46b8      	mov	r8, r7
 8005df8:	d1ef      	bne.n	8005dda <keypad_sm+0x133a>
 8005dfa:	711f      	strb	r7, [r3, #4]
 8005dfc:	70dc      	strb	r4, [r3, #3]
 8005dfe:	7098      	strb	r0, [r3, #2]
 8005e00:	7059      	strb	r1, [r3, #1]
 8005e02:	f883 9000 	strb.w	r9, [r3]
 8005e06:	2304      	movs	r3, #4
 8005e08:	702b      	strb	r3, [r5, #0]
 8005e0a:	f1bc 0f00 	cmp.w	ip, #0
 8005e0e:	f43e ae6f 	beq.w	8004af0 <keypad_sm+0x50>
 8005e12:	f886 e000 	strb.w	lr, [r6]
 8005e16:	f7fe be6b 	b.w	8004af0 <keypad_sm+0x50>
			else if(num == '#'){
 8005e1a:	2823      	cmp	r0, #35	; 0x23
 8005e1c:	f000 82e7 	beq.w	80063ee <keypad_sm+0x194e>
			else if(num == '+'){
 8005e20:	282b      	cmp	r0, #43	; 0x2b
 8005e22:	f000 83f2 	beq.w	800660a <keypad_sm+0x1b6a>
			else if(num == '-'){
 8005e26:	282d      	cmp	r0, #45	; 0x2d
 8005e28:	f000 85a5 	beq.w	8006976 <keypad_sm+0x1ed6>
			else if(num == 's'){
 8005e2c:	2873      	cmp	r0, #115	; 0x73
 8005e2e:	f000 8595 	beq.w	800695c <keypad_sm+0x1ebc>
			else if(num == '['){
 8005e32:	285b      	cmp	r0, #91	; 0x5b
 8005e34:	f000 877c 	beq.w	8006d30 <keypad_sm+0x2290>
			else if(num == ']'){
 8005e38:	285d      	cmp	r0, #93	; 0x5d
 8005e3a:	f47e ae59 	bne.w	8004af0 <keypad_sm+0x50>
}
 8005e3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				inc_arr_v(encpos);
 8005e42:	4ba2      	ldr	r3, [pc, #648]	; (80060cc <keypad_sm+0x162c>)
 8005e44:	f993 0000 	ldrsb.w	r0, [r3]
 8005e48:	f7fe bbd2 	b.w	80045f0 <inc_arr_v>
	while(keypaditerator < 4){
 8005e4c:	4d9c      	ldr	r5, [pc, #624]	; (80060c0 <keypad_sm+0x1620>)
				kpenum = WAIT;
 8005e4e:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005e50:	f995 2000 	ldrsb.w	r2, [r5]
 8005e54:	2a03      	cmp	r2, #3
 8005e56:	f73e ae4b 	bgt.w	8004af0 <keypad_sm+0x50>
 8005e5a:	4b9a      	ldr	r3, [pc, #616]	; (80060c4 <keypad_sm+0x1624>)
 8005e5c:	4e9a      	ldr	r6, [pc, #616]	; (80060c8 <keypad_sm+0x1628>)
 8005e5e:	3201      	adds	r2, #1
 8005e60:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005e64:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005e68:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005e6c:	f896 c000 	ldrb.w	ip, [r6]
 8005e70:	78df      	ldrb	r7, [r3, #3]
 8005e72:	789c      	ldrb	r4, [r3, #2]
 8005e74:	7858      	ldrb	r0, [r3, #1]
 8005e76:	7819      	ldrb	r1, [r3, #0]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	e003      	b.n	8005e84 <keypad_sm+0x13e4>
	while(keypaditerator < 4){
 8005e7c:	4627      	mov	r7, r4
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005e82:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005e84:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005e86:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005e8a:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005e8c:	bf04      	itt	eq
 8005e8e:	f04f 0c00 	moveq.w	ip, #0
 8005e92:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005e96:	2a05      	cmp	r2, #5
 8005e98:	46b8      	mov	r8, r7
 8005e9a:	d1ef      	bne.n	8005e7c <keypad_sm+0x13dc>
 8005e9c:	711f      	strb	r7, [r3, #4]
 8005e9e:	70dc      	strb	r4, [r3, #3]
 8005ea0:	7098      	strb	r0, [r3, #2]
 8005ea2:	7059      	strb	r1, [r3, #1]
 8005ea4:	f883 9000 	strb.w	r9, [r3]
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	702b      	strb	r3, [r5, #0]
 8005eac:	f1be 0f00 	cmp.w	lr, #0
 8005eb0:	f43e ae1e 	beq.w	8004af0 <keypad_sm+0x50>
 8005eb4:	f886 c000 	strb.w	ip, [r6]
 8005eb8:	f7fe be1a 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8005ebc:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8005ebe:	4d80      	ldr	r5, [pc, #512]	; (80060c0 <keypad_sm+0x1620>)
				kpenum = WAIT;
 8005ec0:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005ec2:	f995 2000 	ldrsb.w	r2, [r5]
 8005ec6:	2a03      	cmp	r2, #3
 8005ec8:	f73f a935 	bgt.w	8005136 <keypad_sm+0x696>
 8005ecc:	4b7d      	ldr	r3, [pc, #500]	; (80060c4 <keypad_sm+0x1624>)
 8005ece:	4e7e      	ldr	r6, [pc, #504]	; (80060c8 <keypad_sm+0x1628>)
 8005ed0:	3201      	adds	r2, #1
 8005ed2:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005ed6:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005eda:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005ede:	f896 e000 	ldrb.w	lr, [r6]
 8005ee2:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005ee6:	789c      	ldrb	r4, [r3, #2]
 8005ee8:	7858      	ldrb	r0, [r3, #1]
 8005eea:	7819      	ldrb	r1, [r3, #0]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	e003      	b.n	8005ef8 <keypad_sm+0x1458>
	while(keypaditerator < 4){
 8005ef0:	46a4      	mov	ip, r4
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005ef6:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005ef8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005efa:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005efe:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005f00:	bf04      	itt	eq
 8005f02:	f04f 0801 	moveq.w	r8, #1
 8005f06:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005f0a:	2a05      	cmp	r2, #5
 8005f0c:	46e1      	mov	r9, ip
 8005f0e:	d1ef      	bne.n	8005ef0 <keypad_sm+0x1450>
 8005f10:	f883 c004 	strb.w	ip, [r3, #4]
 8005f14:	70dc      	strb	r4, [r3, #3]
 8005f16:	7098      	strb	r0, [r3, #2]
 8005f18:	7059      	strb	r1, [r3, #1]
 8005f1a:	f883 a000 	strb.w	sl, [r3]
 8005f1e:	2304      	movs	r3, #4
 8005f20:	702b      	strb	r3, [r5, #0]
 8005f22:	f1b8 0f00 	cmp.w	r8, #0
 8005f26:	f43f a906 	beq.w	8005136 <keypad_sm+0x696>
 8005f2a:	f886 e000 	strb.w	lr, [r6]
 8005f2e:	f7ff b902 	b.w	8005136 <keypad_sm+0x696>
 8005f32:	4d63      	ldr	r5, [pc, #396]	; (80060c0 <keypad_sm+0x1620>)
				kpenum = WAIT;
 8005f34:	7022      	strb	r2, [r4, #0]
	while(keypaditerator < 4){
 8005f36:	f995 2000 	ldrsb.w	r2, [r5]
 8005f3a:	2a03      	cmp	r2, #3
 8005f3c:	f73e add8 	bgt.w	8004af0 <keypad_sm+0x50>
 8005f40:	4b60      	ldr	r3, [pc, #384]	; (80060c4 <keypad_sm+0x1624>)
 8005f42:	4e61      	ldr	r6, [pc, #388]	; (80060c8 <keypad_sm+0x1628>)
 8005f44:	f04f 0e00 	mov.w	lr, #0
			keypadarr[0] = num;
 8005f48:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8005f4c:	f893 8004 	ldrb.w	r8, [r3, #4]
 8005f50:	f896 c000 	ldrb.w	ip, [r6]
 8005f54:	78df      	ldrb	r7, [r3, #3]
 8005f56:	789c      	ldrb	r4, [r3, #2]
 8005f58:	7858      	ldrb	r0, [r3, #1]
 8005f5a:	7819      	ldrb	r1, [r3, #0]
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	e003      	b.n	8005f68 <keypad_sm+0x14c8>
	while(keypaditerator < 4){
 8005f60:	4627      	mov	r7, r4
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005f66:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005f68:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8005f6a:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8005f6e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8005f70:	bf04      	itt	eq
 8005f72:	f04f 0c00 	moveq.w	ip, #0
 8005f76:	f04f 0e01 	moveq.w	lr, #1
	while(keypaditerator < 4){
 8005f7a:	2a04      	cmp	r2, #4
 8005f7c:	46b8      	mov	r8, r7
 8005f7e:	d1ef      	bne.n	8005f60 <keypad_sm+0x14c0>
 8005f80:	702a      	strb	r2, [r5, #0]
 8005f82:	711f      	strb	r7, [r3, #4]
 8005f84:	70dc      	strb	r4, [r3, #3]
 8005f86:	7098      	strb	r0, [r3, #2]
 8005f88:	7059      	strb	r1, [r3, #1]
 8005f8a:	f883 9000 	strb.w	r9, [r3]
 8005f8e:	f1be 0f00 	cmp.w	lr, #0
 8005f92:	f43e adad 	beq.w	8004af0 <keypad_sm+0x50>
 8005f96:	f886 c000 	strb.w	ip, [r6]
 8005f9a:	f7fe bda9 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8005f9e:	2300      	movs	r3, #0
	while(keypaditerator < 4){
 8005fa0:	4d47      	ldr	r5, [pc, #284]	; (80060c0 <keypad_sm+0x1620>)
				kpenum = WAIT;
 8005fa2:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8005fa4:	f995 2000 	ldrsb.w	r2, [r5]
 8005fa8:	2a03      	cmp	r2, #3
 8005faa:	f73f a8c4 	bgt.w	8005136 <keypad_sm+0x696>
 8005fae:	4b45      	ldr	r3, [pc, #276]	; (80060c4 <keypad_sm+0x1624>)
 8005fb0:	4e45      	ldr	r6, [pc, #276]	; (80060c8 <keypad_sm+0x1628>)
 8005fb2:	3201      	adds	r2, #1
 8005fb4:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8005fb8:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8005fbc:	f893 9004 	ldrb.w	r9, [r3, #4]
 8005fc0:	f896 e000 	ldrb.w	lr, [r6]
 8005fc4:	f893 c003 	ldrb.w	ip, [r3, #3]
 8005fc8:	789c      	ldrb	r4, [r3, #2]
 8005fca:	7858      	ldrb	r0, [r3, #1]
 8005fcc:	7819      	ldrb	r1, [r3, #0]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	e003      	b.n	8005fda <keypad_sm+0x153a>
	while(keypaditerator < 4){
 8005fd2:	46a4      	mov	ip, r4
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8005fd8:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8005fda:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8005fdc:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8005fe0:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8005fe2:	bf04      	itt	eq
 8005fe4:	f04f 0801 	moveq.w	r8, #1
 8005fe8:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8005fec:	2a05      	cmp	r2, #5
 8005fee:	46e1      	mov	r9, ip
 8005ff0:	d1ef      	bne.n	8005fd2 <keypad_sm+0x1532>
 8005ff2:	f883 c004 	strb.w	ip, [r3, #4]
 8005ff6:	70dc      	strb	r4, [r3, #3]
 8005ff8:	7098      	strb	r0, [r3, #2]
 8005ffa:	7059      	strb	r1, [r3, #1]
 8005ffc:	f883 a000 	strb.w	sl, [r3]
 8006000:	2304      	movs	r3, #4
 8006002:	702b      	strb	r3, [r5, #0]
 8006004:	f1b8 0f00 	cmp.w	r8, #0
 8006008:	f43f a895 	beq.w	8005136 <keypad_sm+0x696>
 800600c:	f886 e000 	strb.w	lr, [r6]
 8006010:	f7ff b891 	b.w	8005136 <keypad_sm+0x696>
 8006014:	4d2a      	ldr	r5, [pc, #168]	; (80060c0 <keypad_sm+0x1620>)
 8006016:	f995 2000 	ldrsb.w	r2, [r5]
 800601a:	2a03      	cmp	r2, #3
 800601c:	f73f a88b 	bgt.w	8005136 <keypad_sm+0x696>
 8006020:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <keypad_sm+0x1624>)
 8006022:	4e29      	ldr	r6, [pc, #164]	; (80060c8 <keypad_sm+0x1628>)
 8006024:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006028:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800602c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006030:	f896 e000 	ldrb.w	lr, [r6]
 8006034:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006038:	789c      	ldrb	r4, [r3, #2]
 800603a:	7858      	ldrb	r0, [r3, #1]
 800603c:	7819      	ldrb	r1, [r3, #0]
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	e003      	b.n	800604a <keypad_sm+0x15aa>
	while(keypaditerator < 4){
 8006042:	46a4      	mov	ip, r4
 8006044:	4604      	mov	r4, r0
 8006046:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006048:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800604a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800604c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006050:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006052:	bf04      	itt	eq
 8006054:	f04f 0801 	moveq.w	r8, #1
 8006058:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800605c:	2a04      	cmp	r2, #4
 800605e:	46e1      	mov	r9, ip
 8006060:	d1ef      	bne.n	8006042 <keypad_sm+0x15a2>
 8006062:	702a      	strb	r2, [r5, #0]
 8006064:	f883 c004 	strb.w	ip, [r3, #4]
 8006068:	70dc      	strb	r4, [r3, #3]
 800606a:	7098      	strb	r0, [r3, #2]
 800606c:	7059      	strb	r1, [r3, #1]
 800606e:	f883 a000 	strb.w	sl, [r3]
 8006072:	f1b8 0f00 	cmp.w	r8, #0
 8006076:	f43f a85e 	beq.w	8005136 <keypad_sm+0x696>
 800607a:	f886 e000 	strb.w	lr, [r6]
 800607e:	f7ff b85a 	b.w	8005136 <keypad_sm+0x696>
			else if(num == '#'){
 8006082:	2823      	cmp	r0, #35	; 0x23
 8006084:	f000 8365 	beq.w	8006752 <keypad_sm+0x1cb2>
			else if(num == '+'){
 8006088:	282b      	cmp	r0, #43	; 0x2b
 800608a:	f000 83eb 	beq.w	8006864 <keypad_sm+0x1dc4>
			else if(num == '-'){
 800608e:	282d      	cmp	r0, #45	; 0x2d
 8006090:	f000 853e 	beq.w	8006b10 <keypad_sm+0x2070>
			else if(num == 's'){
 8006094:	2873      	cmp	r0, #115	; 0x73
 8006096:	f000 8686 	beq.w	8006da6 <keypad_sm+0x2306>
			else if(num == '['){
 800609a:	285b      	cmp	r0, #91	; 0x5b
 800609c:	f000 8691 	beq.w	8006dc2 <keypad_sm+0x2322>
			else if(num == ']'){
 80060a0:	285d      	cmp	r0, #93	; 0x5d
 80060a2:	f47e ad25 	bne.w	8004af0 <keypad_sm+0x50>
}
 80060a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				inc_arr_a(encpos);
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <keypad_sm+0x162c>)
 80060ac:	f993 0000 	ldrsb.w	r0, [r3]
 80060b0:	f7fe bb44 	b.w	800473c <inc_arr_a>
 80060b4:	41400000 	.word	0x41400000
 80060b8:	20000a74 	.word	0x20000a74
 80060bc:	20000a78 	.word	0x20000a78
 80060c0:	20000015 	.word	0x20000015
 80060c4:	20000010 	.word	0x20000010
 80060c8:	2000074c 	.word	0x2000074c
 80060cc:	200003f5 	.word	0x200003f5
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80060d0:	4db1      	ldr	r5, [pc, #708]	; (8006398 <keypad_sm+0x18f8>)
 80060d2:	f995 3000 	ldrsb.w	r3, [r5]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	f77e ad0a 	ble.w	8004af0 <keypad_sm+0x50>
 80060dc:	4eaf      	ldr	r6, [pc, #700]	; (800639c <keypad_sm+0x18fc>)
 80060de:	7832      	ldrb	r2, [r6, #0]
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	f47e ad05 	bne.w	8004af0 <keypad_sm+0x50>
				keypadarr[i-1] = keypadarr[i];
 80060e6:	4aae      	ldr	r2, [pc, #696]	; (80063a0 <keypad_sm+0x1900>)
			keypaditerator--;
 80060e8:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 80060ea:	f8d2 1001 	ldr.w	r1, [r2, #1]
			keypaditerator--;
 80060ee:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 80060f0:	6011      	str	r1, [r2, #0]
			keypaddecimal = 1;
 80060f2:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 80060f4:	212e      	movs	r1, #46	; 0x2e
			keypaddecimal = 1;
 80060f6:	7033      	strb	r3, [r6, #0]
			keypadarr[keypadlength-1] = num;
 80060f8:	7111      	strb	r1, [r2, #4]
			keypaditerator--;
 80060fa:	f7fe bcf9 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 80060fe:	f7fe f809 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006102:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006104:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006106:	f7fb f807 	bl	8001118 <__aeabi_fcmpge>
 800610a:	b130      	cbz	r0, 800611a <keypad_sm+0x167a>
 800610c:	4628      	mov	r0, r5
 800610e:	49a5      	ldr	r1, [pc, #660]	; (80063a4 <keypad_sm+0x1904>)
 8006110:	f7fa fff8 	bl	8001104 <__aeabi_fcmple>
 8006114:	b108      	cbz	r0, 800611a <keypad_sm+0x167a>
					volt_set_aux = translate_keypad();
 8006116:	4ba4      	ldr	r3, [pc, #656]	; (80063a8 <keypad_sm+0x1908>)
 8006118:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 800611a:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 800611c:	4d9e      	ldr	r5, [pc, #632]	; (8006398 <keypad_sm+0x18f8>)
				kpenum = WAIT;
 800611e:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 8006120:	f995 2000 	ldrsb.w	r2, [r5]
 8006124:	2a03      	cmp	r2, #3
 8006126:	f73e ace3 	bgt.w	8004af0 <keypad_sm+0x50>
 800612a:	4b9d      	ldr	r3, [pc, #628]	; (80063a0 <keypad_sm+0x1900>)
 800612c:	4e9b      	ldr	r6, [pc, #620]	; (800639c <keypad_sm+0x18fc>)
			keypadarr[0] = num;
 800612e:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006132:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006136:	f896 e000 	ldrb.w	lr, [r6]
 800613a:	f893 c003 	ldrb.w	ip, [r3, #3]
 800613e:	789c      	ldrb	r4, [r3, #2]
 8006140:	7858      	ldrb	r0, [r3, #1]
 8006142:	7819      	ldrb	r1, [r3, #0]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	e003      	b.n	8006150 <keypad_sm+0x16b0>
	while(keypaditerator < 4){
 8006148:	46a4      	mov	ip, r4
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
			keypadarr[0] = num;
 800614e:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006150:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006152:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006156:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006158:	bf04      	itt	eq
 800615a:	f04f 0e00 	moveq.w	lr, #0
 800615e:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 8006160:	2a04      	cmp	r2, #4
 8006162:	46e0      	mov	r8, ip
 8006164:	d1f0      	bne.n	8006148 <keypad_sm+0x16a8>
 8006166:	702a      	strb	r2, [r5, #0]
 8006168:	f883 c004 	strb.w	ip, [r3, #4]
 800616c:	70dc      	strb	r4, [r3, #3]
 800616e:	7098      	strb	r0, [r3, #2]
 8006170:	7059      	strb	r1, [r3, #1]
 8006172:	f883 9000 	strb.w	r9, [r3]
 8006176:	2f00      	cmp	r7, #0
 8006178:	f43e acba 	beq.w	8004af0 <keypad_sm+0x50>
 800617c:	f886 e000 	strb.w	lr, [r6]
 8006180:	f7fe bcb6 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 8006184:	f7fd ffc6 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006188:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800618a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800618c:	f7fa ffc4 	bl	8001118 <__aeabi_fcmpge>
 8006190:	b188      	cbz	r0, 80061b6 <keypad_sm+0x1716>
 8006192:	4628      	mov	r0, r5
 8006194:	f7fa f960 	bl	8000458 <__aeabi_f2d>
 8006198:	a37d      	add	r3, pc, #500	; (adr r3, 8006390 <keypad_sm+0x18f0>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f7fa fc2f 	bl	8000a00 <__aeabi_dcmple>
 80061a2:	b140      	cbz	r0, 80061b6 <keypad_sm+0x1716>
					amp_set_main_old = amp_set_main;
 80061a4:	4d81      	ldr	r5, [pc, #516]	; (80063ac <keypad_sm+0x190c>)
 80061a6:	4b82      	ldr	r3, [pc, #520]	; (80063b0 <keypad_sm+0x1910>)
 80061a8:	682a      	ldr	r2, [r5, #0]
 80061aa:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80061ac:	f7fd ffb2 	bl	8004114 <translate_keypad>
 80061b0:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 80061b2:	f7fb fbdf 	bl	8001974 <update_ADC_watchdog>
				kpenum = WAIT;
 80061b6:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 80061b8:	4d77      	ldr	r5, [pc, #476]	; (8006398 <keypad_sm+0x18f8>)
				kpenum = WAIT;
 80061ba:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 80061bc:	f995 2000 	ldrsb.w	r2, [r5]
 80061c0:	2a03      	cmp	r2, #3
 80061c2:	f73e ac95 	bgt.w	8004af0 <keypad_sm+0x50>
 80061c6:	4b76      	ldr	r3, [pc, #472]	; (80063a0 <keypad_sm+0x1900>)
 80061c8:	4e74      	ldr	r6, [pc, #464]	; (800639c <keypad_sm+0x18fc>)
			keypadarr[0] = num;
 80061ca:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80061ce:	f893 8004 	ldrb.w	r8, [r3, #4]
 80061d2:	f896 e000 	ldrb.w	lr, [r6]
 80061d6:	f893 c003 	ldrb.w	ip, [r3, #3]
 80061da:	789c      	ldrb	r4, [r3, #2]
 80061dc:	7858      	ldrb	r0, [r3, #1]
 80061de:	7819      	ldrb	r1, [r3, #0]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	e003      	b.n	80061ec <keypad_sm+0x174c>
	while(keypaditerator < 4){
 80061e4:	46a4      	mov	ip, r4
 80061e6:	4604      	mov	r4, r0
 80061e8:	4608      	mov	r0, r1
			keypadarr[0] = num;
 80061ea:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 80061ec:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80061ee:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80061f2:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80061f4:	bf04      	itt	eq
 80061f6:	f04f 0e00 	moveq.w	lr, #0
 80061fa:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 80061fc:	2a04      	cmp	r2, #4
 80061fe:	46e0      	mov	r8, ip
 8006200:	d1f0      	bne.n	80061e4 <keypad_sm+0x1744>
 8006202:	702a      	strb	r2, [r5, #0]
 8006204:	f883 c004 	strb.w	ip, [r3, #4]
 8006208:	70dc      	strb	r4, [r3, #3]
 800620a:	7098      	strb	r0, [r3, #2]
 800620c:	7059      	strb	r1, [r3, #1]
 800620e:	f883 9000 	strb.w	r9, [r3]
 8006212:	2f00      	cmp	r7, #0
 8006214:	f43e ac6c 	beq.w	8004af0 <keypad_sm+0x50>
 8006218:	f886 e000 	strb.w	lr, [r6]
 800621c:	f7fe bc68 	b.w	8004af0 <keypad_sm+0x50>
			else if(num == '#'){
 8006220:	2823      	cmp	r0, #35	; 0x23
 8006222:	f000 84fc 	beq.w	8006c1e <keypad_sm+0x217e>
			else if(num == '+'){
 8006226:	282b      	cmp	r0, #43	; 0x2b
 8006228:	f000 84ac 	beq.w	8006b84 <keypad_sm+0x20e4>
			else if(num == '-'){
 800622c:	282d      	cmp	r0, #45	; 0x2d
 800622e:	f000 8533 	beq.w	8006c98 <keypad_sm+0x21f8>
			else if(num == 's'){
 8006232:	2873      	cmp	r0, #115	; 0x73
 8006234:	f47f adfd 	bne.w	8005e32 <keypad_sm+0x1392>
				if(encpos == 1){
 8006238:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <keypad_sm+0x1914>)
 800623a:	f993 2000 	ldrsb.w	r2, [r3]
 800623e:	2a01      	cmp	r2, #1
 8006240:	f000 8526 	beq.w	8006c90 <keypad_sm+0x21f0>
				else if(encpos < 4){
 8006244:	2a03      	cmp	r2, #3
 8006246:	f300 85b8 	bgt.w	8006dba <keypad_sm+0x231a>
					encpos++;
 800624a:	3201      	adds	r2, #1
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	f7fe bc4f 	b.w	8004af0 <keypad_sm+0x50>
	while(keypaditerator < 4){
 8006252:	4d51      	ldr	r5, [pc, #324]	; (8006398 <keypad_sm+0x18f8>)
 8006254:	f995 2000 	ldrsb.w	r2, [r5]
 8006258:	2a03      	cmp	r2, #3
 800625a:	f73e af6c 	bgt.w	8005136 <keypad_sm+0x696>
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <keypad_sm+0x1900>)
 8006260:	4e4e      	ldr	r6, [pc, #312]	; (800639c <keypad_sm+0x18fc>)
 8006262:	3201      	adds	r2, #1
 8006264:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006268:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800626c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006270:	f896 e000 	ldrb.w	lr, [r6]
 8006274:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006278:	789c      	ldrb	r4, [r3, #2]
 800627a:	7858      	ldrb	r0, [r3, #1]
 800627c:	7819      	ldrb	r1, [r3, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	e003      	b.n	800628a <keypad_sm+0x17ea>
	while(keypaditerator < 4){
 8006282:	46a4      	mov	ip, r4
 8006284:	4604      	mov	r4, r0
 8006286:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006288:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800628a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800628c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006290:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006292:	bf04      	itt	eq
 8006294:	f04f 0801 	moveq.w	r8, #1
 8006298:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800629c:	2a05      	cmp	r2, #5
 800629e:	46e1      	mov	r9, ip
 80062a0:	d1ef      	bne.n	8006282 <keypad_sm+0x17e2>
 80062a2:	f883 c004 	strb.w	ip, [r3, #4]
 80062a6:	70dc      	strb	r4, [r3, #3]
 80062a8:	7098      	strb	r0, [r3, #2]
 80062aa:	7059      	strb	r1, [r3, #1]
 80062ac:	f883 a000 	strb.w	sl, [r3]
 80062b0:	2304      	movs	r3, #4
 80062b2:	702b      	strb	r3, [r5, #0]
 80062b4:	f1b8 0f00 	cmp.w	r8, #0
 80062b8:	f43e af3d 	beq.w	8005136 <keypad_sm+0x696>
 80062bc:	f886 e000 	strb.w	lr, [r6]
 80062c0:	f7fe bf39 	b.w	8005136 <keypad_sm+0x696>
	float temp = translate_keypad();
 80062c4:	f7fd ff26 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062c8:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80062ca:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80062cc:	f7fa ff24 	bl	8001118 <__aeabi_fcmpge>
 80062d0:	b168      	cbz	r0, 80062ee <keypad_sm+0x184e>
 80062d2:	4628      	mov	r0, r5
 80062d4:	4933      	ldr	r1, [pc, #204]	; (80063a4 <keypad_sm+0x1904>)
 80062d6:	f7fa ff15 	bl	8001104 <__aeabi_fcmple>
 80062da:	b140      	cbz	r0, 80062ee <keypad_sm+0x184e>
					amp_set_main_old = amp_set_main;
 80062dc:	4d33      	ldr	r5, [pc, #204]	; (80063ac <keypad_sm+0x190c>)
 80062de:	4b34      	ldr	r3, [pc, #208]	; (80063b0 <keypad_sm+0x1910>)
 80062e0:	682a      	ldr	r2, [r5, #0]
 80062e2:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 80062e4:	f7fd ff16 	bl	8004114 <translate_keypad>
 80062e8:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 80062ea:	f7fb fb43 	bl	8001974 <update_ADC_watchdog>
				kpenum = WAIT;
 80062ee:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80062f0:	4d29      	ldr	r5, [pc, #164]	; (8006398 <keypad_sm+0x18f8>)
				kpenum = WAIT;
 80062f2:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80062f4:	f995 2000 	ldrsb.w	r2, [r5]
 80062f8:	2a03      	cmp	r2, #3
 80062fa:	f73e af1c 	bgt.w	8005136 <keypad_sm+0x696>
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <keypad_sm+0x1900>)
 8006300:	4e26      	ldr	r6, [pc, #152]	; (800639c <keypad_sm+0x18fc>)
 8006302:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006304:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006308:	f893 8004 	ldrb.w	r8, [r3, #4]
 800630c:	f896 e000 	ldrb.w	lr, [r6]
 8006310:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006314:	789c      	ldrb	r4, [r3, #2]
 8006316:	7858      	ldrb	r0, [r3, #1]
 8006318:	7819      	ldrb	r1, [r3, #0]
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	e003      	b.n	8006326 <keypad_sm+0x1886>
	while(keypaditerator < 4){
 800631e:	46a4      	mov	ip, r4
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006324:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006326:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006328:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800632c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800632e:	bf04      	itt	eq
 8006330:	f04f 0901 	moveq.w	r9, #1
 8006334:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006338:	2a04      	cmp	r2, #4
 800633a:	46e0      	mov	r8, ip
 800633c:	d1ef      	bne.n	800631e <keypad_sm+0x187e>
 800633e:	702a      	strb	r2, [r5, #0]
 8006340:	f883 c004 	strb.w	ip, [r3, #4]
 8006344:	70dc      	strb	r4, [r3, #3]
 8006346:	7098      	strb	r0, [r3, #2]
 8006348:	7059      	strb	r1, [r3, #1]
 800634a:	f883 a000 	strb.w	sl, [r3]
 800634e:	f1b9 0f00 	cmp.w	r9, #0
 8006352:	f43e aef0 	beq.w	8005136 <keypad_sm+0x696>
 8006356:	f886 e000 	strb.w	lr, [r6]
 800635a:	f7fe beec 	b.w	8005136 <keypad_sm+0x696>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 800635e:	4d0e      	ldr	r5, [pc, #56]	; (8006398 <keypad_sm+0x18f8>)
 8006360:	f995 3000 	ldrsb.w	r3, [r5]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f77e abc3 	ble.w	8004af0 <keypad_sm+0x50>
 800636a:	490c      	ldr	r1, [pc, #48]	; (800639c <keypad_sm+0x18fc>)
 800636c:	780a      	ldrb	r2, [r1, #0]
 800636e:	2a00      	cmp	r2, #0
 8006370:	f47e abbe 	bne.w	8004af0 <keypad_sm+0x50>
				keypadarr[i-1] = keypadarr[i];
 8006374:	4a0a      	ldr	r2, [pc, #40]	; (80063a0 <keypad_sm+0x1900>)
			keypaditerator--;
 8006376:	3b01      	subs	r3, #1
				keypadarr[i-1] = keypadarr[i];
 8006378:	f8d2 0001 	ldr.w	r0, [r2, #1]
			keypaditerator--;
 800637c:	702b      	strb	r3, [r5, #0]
				keypadarr[i-1] = keypadarr[i];
 800637e:	6010      	str	r0, [r2, #0]
			keypaddecimal = 1;
 8006380:	2301      	movs	r3, #1
			keypadarr[keypadlength-1] = num;
 8006382:	202e      	movs	r0, #46	; 0x2e
			keypaddecimal = 1;
 8006384:	700b      	strb	r3, [r1, #0]
			keypadarr[keypadlength-1] = num;
 8006386:	7110      	strb	r0, [r2, #4]
			keypaditerator--;
 8006388:	f7fe bbb2 	b.w	8004af0 <keypad_sm+0x50>
 800638c:	f3af 8000 	nop.w
 8006390:	50b0f27c 	.word	0x50b0f27c
 8006394:	3fe99a6b 	.word	0x3fe99a6b
 8006398:	20000015 	.word	0x20000015
 800639c:	2000074c 	.word	0x2000074c
 80063a0:	20000010 	.word	0x20000010
 80063a4:	41400000 	.word	0x41400000
 80063a8:	20000a70 	.word	0x20000a70
 80063ac:	20000004 	.word	0x20000004
 80063b0:	20000008 	.word	0x20000008
 80063b4:	200003f5 	.word	0x200003f5
		if(keypaditerator < keypadlength-1){
 80063b8:	4db9      	ldr	r5, [pc, #740]	; (80066a0 <keypad_sm+0x1c00>)
 80063ba:	f995 2000 	ldrsb.w	r2, [r5]
 80063be:	2a03      	cmp	r2, #3
 80063c0:	f73e ab96 	bgt.w	8004af0 <keypad_sm+0x50>
			if(keypadarr[4] == '.'){
 80063c4:	4bb7      	ldr	r3, [pc, #732]	; (80066a4 <keypad_sm+0x1c04>)
 80063c6:	7919      	ldrb	r1, [r3, #4]
 80063c8:	292e      	cmp	r1, #46	; 0x2e
 80063ca:	d102      	bne.n	80063d2 <keypad_sm+0x1932>
				keypaddecimal = 0;
 80063cc:	2000      	movs	r0, #0
 80063ce:	49b6      	ldr	r1, [pc, #728]	; (80066a8 <keypad_sm+0x1c08>)
 80063d0:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80063d2:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80063d4:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 80063d6:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 80063d8:	7118      	strb	r0, [r3, #4]
 80063da:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 80063dc:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80063de:	70d8      	strb	r0, [r3, #3]
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 80063e4:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 80063e6:	7098      	strb	r0, [r3, #2]
 80063e8:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 80063ea:	f7fe bb81 	b.w	8004af0 <keypad_sm+0x50>
	while(keypaditerator < 4){
 80063ee:	4dac      	ldr	r5, [pc, #688]	; (80066a0 <keypad_sm+0x1c00>)
 80063f0:	f995 2000 	ldrsb.w	r2, [r5]
 80063f4:	2a03      	cmp	r2, #3
 80063f6:	f73e ae9e 	bgt.w	8005136 <keypad_sm+0x696>
 80063fa:	4baa      	ldr	r3, [pc, #680]	; (80066a4 <keypad_sm+0x1c04>)
 80063fc:	4eaa      	ldr	r6, [pc, #680]	; (80066a8 <keypad_sm+0x1c08>)
 80063fe:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006402:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006406:	f893 9004 	ldrb.w	r9, [r3, #4]
 800640a:	f896 e000 	ldrb.w	lr, [r6]
 800640e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006412:	789c      	ldrb	r4, [r3, #2]
 8006414:	7858      	ldrb	r0, [r3, #1]
 8006416:	7819      	ldrb	r1, [r3, #0]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	e003      	b.n	8006424 <keypad_sm+0x1984>
	while(keypaditerator < 4){
 800641c:	46a4      	mov	ip, r4
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006422:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006424:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006426:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800642a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800642c:	bf04      	itt	eq
 800642e:	f04f 0801 	moveq.w	r8, #1
 8006432:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006436:	2a04      	cmp	r2, #4
 8006438:	46e1      	mov	r9, ip
 800643a:	d1ef      	bne.n	800641c <keypad_sm+0x197c>
 800643c:	702a      	strb	r2, [r5, #0]
 800643e:	f883 c004 	strb.w	ip, [r3, #4]
 8006442:	70dc      	strb	r4, [r3, #3]
 8006444:	7098      	strb	r0, [r3, #2]
 8006446:	7059      	strb	r1, [r3, #1]
 8006448:	f883 a000 	strb.w	sl, [r3]
 800644c:	f1b8 0f00 	cmp.w	r8, #0
 8006450:	f43e ae71 	beq.w	8005136 <keypad_sm+0x696>
 8006454:	f886 e000 	strb.w	lr, [r6]
 8006458:	f7fe be6d 	b.w	8005136 <keypad_sm+0x696>
 800645c:	4d90      	ldr	r5, [pc, #576]	; (80066a0 <keypad_sm+0x1c00>)
 800645e:	f995 2000 	ldrsb.w	r2, [r5]
 8006462:	2a03      	cmp	r2, #3
 8006464:	f73e ae67 	bgt.w	8005136 <keypad_sm+0x696>
 8006468:	4b8e      	ldr	r3, [pc, #568]	; (80066a4 <keypad_sm+0x1c04>)
 800646a:	4e8f      	ldr	r6, [pc, #572]	; (80066a8 <keypad_sm+0x1c08>)
 800646c:	3201      	adds	r2, #1
 800646e:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006472:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006476:	f893 9004 	ldrb.w	r9, [r3, #4]
 800647a:	f896 e000 	ldrb.w	lr, [r6]
 800647e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006482:	789c      	ldrb	r4, [r3, #2]
 8006484:	7858      	ldrb	r0, [r3, #1]
 8006486:	7819      	ldrb	r1, [r3, #0]
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	e003      	b.n	8006494 <keypad_sm+0x19f4>
	while(keypaditerator < 4){
 800648c:	46a4      	mov	ip, r4
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006492:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006494:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006496:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 800649a:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 800649c:	bf04      	itt	eq
 800649e:	f04f 0801 	moveq.w	r8, #1
 80064a2:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 80064a6:	2a05      	cmp	r2, #5
 80064a8:	46e1      	mov	r9, ip
 80064aa:	d1ef      	bne.n	800648c <keypad_sm+0x19ec>
 80064ac:	f883 c004 	strb.w	ip, [r3, #4]
 80064b0:	70dc      	strb	r4, [r3, #3]
 80064b2:	7098      	strb	r0, [r3, #2]
 80064b4:	7059      	strb	r1, [r3, #1]
 80064b6:	f883 a000 	strb.w	sl, [r3]
 80064ba:	2304      	movs	r3, #4
 80064bc:	702b      	strb	r3, [r5, #0]
 80064be:	f1b8 0f00 	cmp.w	r8, #0
 80064c2:	f43e ae38 	beq.w	8005136 <keypad_sm+0x696>
 80064c6:	f886 e000 	strb.w	lr, [r6]
 80064ca:	f7fe be34 	b.w	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 80064ce:	2700      	movs	r7, #0
	while(keypaditerator < 4){
 80064d0:	4d73      	ldr	r5, [pc, #460]	; (80066a0 <keypad_sm+0x1c00>)
				kpenum = WAIT;
 80064d2:	7027      	strb	r7, [r4, #0]
	while(keypaditerator < 4){
 80064d4:	f995 2000 	ldrsb.w	r2, [r5]
 80064d8:	2a03      	cmp	r2, #3
 80064da:	f73e ab09 	bgt.w	8004af0 <keypad_sm+0x50>
 80064de:	4b71      	ldr	r3, [pc, #452]	; (80066a4 <keypad_sm+0x1c04>)
 80064e0:	4e71      	ldr	r6, [pc, #452]	; (80066a8 <keypad_sm+0x1c08>)
 80064e2:	3201      	adds	r2, #1
			keypadarr[0] = num;
 80064e4:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80064e8:	f893 8004 	ldrb.w	r8, [r3, #4]
 80064ec:	f896 e000 	ldrb.w	lr, [r6]
 80064f0:	f893 c003 	ldrb.w	ip, [r3, #3]
 80064f4:	789c      	ldrb	r4, [r3, #2]
 80064f6:	7858      	ldrb	r0, [r3, #1]
 80064f8:	7819      	ldrb	r1, [r3, #0]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	e003      	b.n	8006506 <keypad_sm+0x1a66>
	while(keypaditerator < 4){
 80064fe:	46a4      	mov	ip, r4
 8006500:	4604      	mov	r4, r0
 8006502:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006504:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006506:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006508:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 800650c:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 800650e:	bf04      	itt	eq
 8006510:	f04f 0e00 	moveq.w	lr, #0
 8006514:	2701      	moveq	r7, #1
	while(keypaditerator < 4){
 8006516:	2a05      	cmp	r2, #5
 8006518:	46e0      	mov	r8, ip
 800651a:	d1f0      	bne.n	80064fe <keypad_sm+0x1a5e>
 800651c:	f883 c004 	strb.w	ip, [r3, #4]
 8006520:	70dc      	strb	r4, [r3, #3]
 8006522:	7098      	strb	r0, [r3, #2]
 8006524:	7059      	strb	r1, [r3, #1]
 8006526:	f883 9000 	strb.w	r9, [r3]
 800652a:	2304      	movs	r3, #4
 800652c:	702b      	strb	r3, [r5, #0]
 800652e:	2f00      	cmp	r7, #0
 8006530:	f43e aade 	beq.w	8004af0 <keypad_sm+0x50>
 8006534:	f886 e000 	strb.w	lr, [r6]
 8006538:	f7fe bada 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 800653c:	f7fd fdea 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006540:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006542:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006544:	f7fa fde8 	bl	8001118 <__aeabi_fcmpge>
 8006548:	b150      	cbz	r0, 8006560 <keypad_sm+0x1ac0>
 800654a:	4628      	mov	r0, r5
 800654c:	f7f9 ff84 	bl	8000458 <__aeabi_f2d>
 8006550:	a351      	add	r3, pc, #324	; (adr r3, 8006698 <keypad_sm+0x1bf8>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7fa fa53 	bl	8000a00 <__aeabi_dcmple>
 800655a:	b108      	cbz	r0, 8006560 <keypad_sm+0x1ac0>
					amp_set_aux = translate_keypad();
 800655c:	4b53      	ldr	r3, [pc, #332]	; (80066ac <keypad_sm+0x1c0c>)
 800655e:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006560:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006562:	4d4f      	ldr	r5, [pc, #316]	; (80066a0 <keypad_sm+0x1c00>)
				kpenum = WAIT;
 8006564:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006566:	f995 2000 	ldrsb.w	r2, [r5]
 800656a:	2a03      	cmp	r2, #3
 800656c:	f73e aac0 	bgt.w	8004af0 <keypad_sm+0x50>
 8006570:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <keypad_sm+0x1c04>)
 8006572:	4e4d      	ldr	r6, [pc, #308]	; (80066a8 <keypad_sm+0x1c08>)
 8006574:	3201      	adds	r2, #1
 8006576:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006578:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800657c:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006580:	f896 c000 	ldrb.w	ip, [r6]
 8006584:	78df      	ldrb	r7, [r3, #3]
 8006586:	789c      	ldrb	r4, [r3, #2]
 8006588:	7858      	ldrb	r0, [r3, #1]
 800658a:	7819      	ldrb	r1, [r3, #0]
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	e003      	b.n	8006598 <keypad_sm+0x1af8>
	while(keypaditerator < 4){
 8006590:	4627      	mov	r7, r4
 8006592:	4604      	mov	r4, r0
 8006594:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006596:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006598:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800659a:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 800659e:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 80065a0:	bf04      	itt	eq
 80065a2:	f04f 0c00 	moveq.w	ip, #0
 80065a6:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 80065aa:	2a05      	cmp	r2, #5
 80065ac:	46be      	mov	lr, r7
 80065ae:	d1ef      	bne.n	8006590 <keypad_sm+0x1af0>
 80065b0:	711f      	strb	r7, [r3, #4]
 80065b2:	70dc      	strb	r4, [r3, #3]
 80065b4:	7098      	strb	r0, [r3, #2]
 80065b6:	7059      	strb	r1, [r3, #1]
 80065b8:	f883 9000 	strb.w	r9, [r3]
 80065bc:	2304      	movs	r3, #4
 80065be:	702b      	strb	r3, [r5, #0]
 80065c0:	f1b8 0f00 	cmp.w	r8, #0
 80065c4:	f43e aa94 	beq.w	8004af0 <keypad_sm+0x50>
 80065c8:	f886 c000 	strb.w	ip, [r6]
 80065cc:	f7fe ba90 	b.w	8004af0 <keypad_sm+0x50>
			else if(num == '#'){
 80065d0:	2823      	cmp	r0, #35	; 0x23
 80065d2:	f000 8217 	beq.w	8006a04 <keypad_sm+0x1f64>
			else if(num == '+'){
 80065d6:	282b      	cmp	r0, #43	; 0x2b
 80065d8:	f000 8435 	beq.w	8006e46 <keypad_sm+0x23a6>
			else if(num == '-'){
 80065dc:	282d      	cmp	r0, #45	; 0x2d
 80065de:	f000 83fb 	beq.w	8006dd8 <keypad_sm+0x2338>
			else if(num == 's'){
 80065e2:	2873      	cmp	r0, #115	; 0x73
 80065e4:	f47f ad59 	bne.w	800609a <keypad_sm+0x15fa>
				if(encpos == 0){
 80065e8:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <keypad_sm+0x1c10>)
 80065ea:	f993 2000 	ldrsb.w	r2, [r3]
 80065ee:	2a00      	cmp	r2, #0
 80065f0:	f000 83ee 	beq.w	8006dd0 <keypad_sm+0x2330>
				else if(encpos < 4){
 80065f4:	2a03      	cmp	r2, #3
 80065f6:	f300 83e0 	bgt.w	8006dba <keypad_sm+0x231a>
					encpos++;
 80065fa:	3201      	adds	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	f7fe ba77 	b.w	8004af0 <keypad_sm+0x50>
}
 8006602:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				update_keypad('z');
 8006606:	f7fb b907 	b.w	8001818 <update_keypad.constprop.0>
	float temp = translate_keypad();
 800660a:	f7fd fd83 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800660e:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006610:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006612:	f7fa fd81 	bl	8001118 <__aeabi_fcmpge>
 8006616:	b130      	cbz	r0, 8006626 <keypad_sm+0x1b86>
 8006618:	4628      	mov	r0, r5
 800661a:	4926      	ldr	r1, [pc, #152]	; (80066b4 <keypad_sm+0x1c14>)
 800661c:	f7fa fd72 	bl	8001104 <__aeabi_fcmple>
 8006620:	b108      	cbz	r0, 8006626 <keypad_sm+0x1b86>
					volt_set_aux = translate_keypad();
 8006622:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <keypad_sm+0x1c18>)
 8006624:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006626:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006628:	4d1d      	ldr	r5, [pc, #116]	; (80066a0 <keypad_sm+0x1c00>)
				kpenum = WAIT;
 800662a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800662c:	f995 2000 	ldrsb.w	r2, [r5]
 8006630:	2a03      	cmp	r2, #3
 8006632:	f73e ad80 	bgt.w	8005136 <keypad_sm+0x696>
 8006636:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <keypad_sm+0x1c04>)
 8006638:	4e1b      	ldr	r6, [pc, #108]	; (80066a8 <keypad_sm+0x1c08>)
 800663a:	3201      	adds	r2, #1
			keypadarr[0] = num;
 800663c:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006640:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006644:	f896 8000 	ldrb.w	r8, [r6]
 8006648:	f893 e003 	ldrb.w	lr, [r3, #3]
 800664c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006650:	785c      	ldrb	r4, [r3, #1]
 8006652:	7818      	ldrb	r0, [r3, #0]
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	e003      	b.n	8006660 <keypad_sm+0x1bc0>
	while(keypaditerator < 4){
 8006658:	46e6      	mov	lr, ip
 800665a:	46a4      	mov	ip, r4
 800665c:	4604      	mov	r4, r0
			keypadarr[0] = num;
 800665e:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006660:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006662:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006666:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006668:	bf04      	itt	eq
 800666a:	2101      	moveq	r1, #1
 800666c:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 8006670:	2a05      	cmp	r2, #5
 8006672:	46f1      	mov	r9, lr
 8006674:	d1f0      	bne.n	8006658 <keypad_sm+0x1bb8>
 8006676:	f883 e004 	strb.w	lr, [r3, #4]
 800667a:	f883 c003 	strb.w	ip, [r3, #3]
 800667e:	709c      	strb	r4, [r3, #2]
 8006680:	7058      	strb	r0, [r3, #1]
 8006682:	f883 a000 	strb.w	sl, [r3]
 8006686:	2304      	movs	r3, #4
 8006688:	702b      	strb	r3, [r5, #0]
 800668a:	2900      	cmp	r1, #0
 800668c:	f43e ad53 	beq.w	8005136 <keypad_sm+0x696>
 8006690:	f886 8000 	strb.w	r8, [r6]
 8006694:	f7fe bd4f 	b.w	8005136 <keypad_sm+0x696>
 8006698:	50b0f27c 	.word	0x50b0f27c
 800669c:	3fe99a6b 	.word	0x3fe99a6b
 80066a0:	20000015 	.word	0x20000015
 80066a4:	20000010 	.word	0x20000010
 80066a8:	2000074c 	.word	0x2000074c
 80066ac:	20000000 	.word	0x20000000
 80066b0:	200003f5 	.word	0x200003f5
 80066b4:	41400000 	.word	0x41400000
 80066b8:	20000a70 	.word	0x20000a70
	float temp = translate_keypad();
 80066bc:	f7fd fd2a 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80066c0:	2100      	movs	r1, #0
	float temp = translate_keypad();
 80066c2:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 80066c4:	f7fa fd28 	bl	8001118 <__aeabi_fcmpge>
 80066c8:	b158      	cbz	r0, 80066e2 <keypad_sm+0x1c42>
 80066ca:	4628      	mov	r0, r5
 80066cc:	49b6      	ldr	r1, [pc, #728]	; (80069a8 <keypad_sm+0x1f08>)
 80066ce:	f7fa fd19 	bl	8001104 <__aeabi_fcmple>
 80066d2:	b130      	cbz	r0, 80066e2 <keypad_sm+0x1c42>
					volt_set_main_old = volt_set_main;
 80066d4:	4db5      	ldr	r5, [pc, #724]	; (80069ac <keypad_sm+0x1f0c>)
 80066d6:	4bb6      	ldr	r3, [pc, #728]	; (80069b0 <keypad_sm+0x1f10>)
 80066d8:	682a      	ldr	r2, [r5, #0]
 80066da:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 80066dc:	f7fd fd1a 	bl	8004114 <translate_keypad>
 80066e0:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 80066e2:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80066e4:	4db3      	ldr	r5, [pc, #716]	; (80069b4 <keypad_sm+0x1f14>)
				kpenum = WAIT;
 80066e6:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80066e8:	f995 2000 	ldrsb.w	r2, [r5]
 80066ec:	2a03      	cmp	r2, #3
 80066ee:	f73e a9ff 	bgt.w	8004af0 <keypad_sm+0x50>
 80066f2:	4bb1      	ldr	r3, [pc, #708]	; (80069b8 <keypad_sm+0x1f18>)
 80066f4:	4eb1      	ldr	r6, [pc, #708]	; (80069bc <keypad_sm+0x1f1c>)
 80066f6:	3201      	adds	r2, #1
 80066f8:	4688      	mov	r8, r1
			keypadarr[0] = num;
 80066fa:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80066fe:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006702:	f896 c000 	ldrb.w	ip, [r6]
 8006706:	78df      	ldrb	r7, [r3, #3]
 8006708:	789c      	ldrb	r4, [r3, #2]
 800670a:	7858      	ldrb	r0, [r3, #1]
 800670c:	7819      	ldrb	r1, [r3, #0]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	e003      	b.n	800671a <keypad_sm+0x1c7a>
	while(keypaditerator < 4){
 8006712:	4627      	mov	r7, r4
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006718:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800671a:	3201      	adds	r2, #1
				keypaddecimal = 0;
 800671c:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006720:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006722:	bf04      	itt	eq
 8006724:	f04f 0c00 	moveq.w	ip, #0
 8006728:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 800672c:	2a05      	cmp	r2, #5
 800672e:	46be      	mov	lr, r7
 8006730:	d1ef      	bne.n	8006712 <keypad_sm+0x1c72>
 8006732:	711f      	strb	r7, [r3, #4]
 8006734:	70dc      	strb	r4, [r3, #3]
 8006736:	7098      	strb	r0, [r3, #2]
 8006738:	7059      	strb	r1, [r3, #1]
 800673a:	f883 9000 	strb.w	r9, [r3]
 800673e:	2304      	movs	r3, #4
 8006740:	702b      	strb	r3, [r5, #0]
 8006742:	f1b8 0f00 	cmp.w	r8, #0
 8006746:	f43e a9d3 	beq.w	8004af0 <keypad_sm+0x50>
 800674a:	f886 c000 	strb.w	ip, [r6]
 800674e:	f7fe b9cf 	b.w	8004af0 <keypad_sm+0x50>
 8006752:	4d98      	ldr	r5, [pc, #608]	; (80069b4 <keypad_sm+0x1f14>)
 8006754:	f995 2000 	ldrsb.w	r2, [r5]
 8006758:	2a03      	cmp	r2, #3
 800675a:	f73e acec 	bgt.w	8005136 <keypad_sm+0x696>
 800675e:	4b96      	ldr	r3, [pc, #600]	; (80069b8 <keypad_sm+0x1f18>)
 8006760:	4e96      	ldr	r6, [pc, #600]	; (80069bc <keypad_sm+0x1f1c>)
 8006762:	3201      	adds	r2, #1
 8006764:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006768:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800676c:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006770:	f896 e000 	ldrb.w	lr, [r6]
 8006774:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006778:	789c      	ldrb	r4, [r3, #2]
 800677a:	7858      	ldrb	r0, [r3, #1]
 800677c:	7819      	ldrb	r1, [r3, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	e003      	b.n	800678a <keypad_sm+0x1cea>
	while(keypaditerator < 4){
 8006782:	46a4      	mov	ip, r4
 8006784:	4604      	mov	r4, r0
 8006786:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006788:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 800678a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 800678c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006790:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006792:	bf04      	itt	eq
 8006794:	f04f 0801 	moveq.w	r8, #1
 8006798:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 800679c:	2a05      	cmp	r2, #5
 800679e:	46e1      	mov	r9, ip
 80067a0:	d1ef      	bne.n	8006782 <keypad_sm+0x1ce2>
 80067a2:	f883 c004 	strb.w	ip, [r3, #4]
 80067a6:	70dc      	strb	r4, [r3, #3]
 80067a8:	7098      	strb	r0, [r3, #2]
 80067aa:	7059      	strb	r1, [r3, #1]
 80067ac:	f883 a000 	strb.w	sl, [r3]
 80067b0:	2304      	movs	r3, #4
 80067b2:	702b      	strb	r3, [r5, #0]
 80067b4:	f1b8 0f00 	cmp.w	r8, #0
 80067b8:	f43e acbd 	beq.w	8005136 <keypad_sm+0x696>
 80067bc:	f886 e000 	strb.w	lr, [r6]
 80067c0:	f7fe bcb9 	b.w	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 80067c4:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80067c6:	4d7b      	ldr	r5, [pc, #492]	; (80069b4 <keypad_sm+0x1f14>)
				kpenum = WAIT;
 80067c8:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80067ca:	f995 2000 	ldrsb.w	r2, [r5]
 80067ce:	2a03      	cmp	r2, #3
 80067d0:	f73e a98e 	bgt.w	8004af0 <keypad_sm+0x50>
 80067d4:	4b78      	ldr	r3, [pc, #480]	; (80069b8 <keypad_sm+0x1f18>)
 80067d6:	4e79      	ldr	r6, [pc, #484]	; (80069bc <keypad_sm+0x1f1c>)
			keypadarr[0] = num;
 80067d8:	f04f 097a 	mov.w	r9, #122	; 0x7a
 80067dc:	f893 8004 	ldrb.w	r8, [r3, #4]
 80067e0:	f896 e000 	ldrb.w	lr, [r6]
 80067e4:	f893 c003 	ldrb.w	ip, [r3, #3]
 80067e8:	789f      	ldrb	r7, [r3, #2]
 80067ea:	785c      	ldrb	r4, [r3, #1]
 80067ec:	7818      	ldrb	r0, [r3, #0]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	e003      	b.n	80067fa <keypad_sm+0x1d5a>
	while(keypaditerator < 4){
 80067f2:	46bc      	mov	ip, r7
 80067f4:	4627      	mov	r7, r4
 80067f6:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80067f8:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80067fa:	3201      	adds	r2, #1
				keypaddecimal = 0;
 80067fc:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006800:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006802:	bf04      	itt	eq
 8006804:	f04f 0e00 	moveq.w	lr, #0
 8006808:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 800680a:	2a04      	cmp	r2, #4
 800680c:	46e0      	mov	r8, ip
 800680e:	d1f0      	bne.n	80067f2 <keypad_sm+0x1d52>
 8006810:	702a      	strb	r2, [r5, #0]
 8006812:	f883 c004 	strb.w	ip, [r3, #4]
 8006816:	70df      	strb	r7, [r3, #3]
 8006818:	709c      	strb	r4, [r3, #2]
 800681a:	7058      	strb	r0, [r3, #1]
 800681c:	f883 9000 	strb.w	r9, [r3]
 8006820:	2900      	cmp	r1, #0
 8006822:	f43e a965 	beq.w	8004af0 <keypad_sm+0x50>
 8006826:	f886 e000 	strb.w	lr, [r6]
 800682a:	f7fe b961 	b.w	8004af0 <keypad_sm+0x50>
		if(keypaditerator < keypadlength-1){
 800682e:	4d61      	ldr	r5, [pc, #388]	; (80069b4 <keypad_sm+0x1f14>)
 8006830:	f995 2000 	ldrsb.w	r2, [r5]
 8006834:	2a03      	cmp	r2, #3
 8006836:	f73e a95b 	bgt.w	8004af0 <keypad_sm+0x50>
			if(keypadarr[4] == '.'){
 800683a:	4b5f      	ldr	r3, [pc, #380]	; (80069b8 <keypad_sm+0x1f18>)
 800683c:	7919      	ldrb	r1, [r3, #4]
 800683e:	292e      	cmp	r1, #46	; 0x2e
 8006840:	d102      	bne.n	8006848 <keypad_sm+0x1da8>
				keypaddecimal = 0;
 8006842:	2000      	movs	r0, #0
 8006844:	495d      	ldr	r1, [pc, #372]	; (80069bc <keypad_sm+0x1f1c>)
 8006846:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8006848:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800684a:	78d8      	ldrb	r0, [r3, #3]
			keypaditerator++;
 800684c:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 800684e:	7118      	strb	r0, [r3, #4]
 8006850:	7898      	ldrb	r0, [r3, #2]
			keypaditerator++;
 8006852:	702a      	strb	r2, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8006854:	70d8      	strb	r0, [r3, #3]
 8006856:	781a      	ldrb	r2, [r3, #0]
 8006858:	7858      	ldrb	r0, [r3, #1]
			keypadarr[0] = num;
 800685a:	7019      	strb	r1, [r3, #0]
				keypadarr[i+1] = keypadarr[i];
 800685c:	7098      	strb	r0, [r3, #2]
 800685e:	705a      	strb	r2, [r3, #1]
			keypaditerator++;
 8006860:	f7fe b946 	b.w	8004af0 <keypad_sm+0x50>
	float temp = translate_keypad();
 8006864:	f7fd fc56 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006868:	2100      	movs	r1, #0
	float temp = translate_keypad();
 800686a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 800686c:	f7fa fc54 	bl	8001118 <__aeabi_fcmpge>
 8006870:	b130      	cbz	r0, 8006880 <keypad_sm+0x1de0>
 8006872:	4628      	mov	r0, r5
 8006874:	494c      	ldr	r1, [pc, #304]	; (80069a8 <keypad_sm+0x1f08>)
 8006876:	f7fa fc45 	bl	8001104 <__aeabi_fcmple>
 800687a:	b108      	cbz	r0, 8006880 <keypad_sm+0x1de0>
					amp_set_aux = translate_keypad();
 800687c:	4b50      	ldr	r3, [pc, #320]	; (80069c0 <keypad_sm+0x1f20>)
 800687e:	601d      	str	r5, [r3, #0]
				kpenum = WAIT;
 8006880:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006882:	4d4c      	ldr	r5, [pc, #304]	; (80069b4 <keypad_sm+0x1f14>)
				kpenum = WAIT;
 8006884:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006886:	f995 2000 	ldrsb.w	r2, [r5]
 800688a:	2a03      	cmp	r2, #3
 800688c:	f73e ac53 	bgt.w	8005136 <keypad_sm+0x696>
 8006890:	4b49      	ldr	r3, [pc, #292]	; (80069b8 <keypad_sm+0x1f18>)
 8006892:	4e4a      	ldr	r6, [pc, #296]	; (80069bc <keypad_sm+0x1f1c>)
 8006894:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006896:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800689a:	f893 8004 	ldrb.w	r8, [r3, #4]
 800689e:	7831      	ldrb	r1, [r6, #0]
 80068a0:	f893 e003 	ldrb.w	lr, [r3, #3]
 80068a4:	f893 c002 	ldrb.w	ip, [r3, #2]
 80068a8:	785c      	ldrb	r4, [r3, #1]
 80068aa:	7818      	ldrb	r0, [r3, #0]
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	e003      	b.n	80068b8 <keypad_sm+0x1e18>
	while(keypaditerator < 4){
 80068b0:	46e6      	mov	lr, ip
 80068b2:	46a4      	mov	ip, r4
 80068b4:	4604      	mov	r4, r0
			keypadarr[0] = num;
 80068b6:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 80068b8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80068ba:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 80068be:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80068c0:	bf04      	itt	eq
 80068c2:	f04f 0901 	moveq.w	r9, #1
 80068c6:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 80068c8:	2a04      	cmp	r2, #4
 80068ca:	46f0      	mov	r8, lr
 80068cc:	d1f0      	bne.n	80068b0 <keypad_sm+0x1e10>
 80068ce:	702a      	strb	r2, [r5, #0]
 80068d0:	f883 e004 	strb.w	lr, [r3, #4]
 80068d4:	f883 c003 	strb.w	ip, [r3, #3]
 80068d8:	709c      	strb	r4, [r3, #2]
 80068da:	7058      	strb	r0, [r3, #1]
 80068dc:	f883 a000 	strb.w	sl, [r3]
 80068e0:	f1b9 0f00 	cmp.w	r9, #0
 80068e4:	f43e ac27 	beq.w	8005136 <keypad_sm+0x696>
 80068e8:	7031      	strb	r1, [r6, #0]
 80068ea:	f7fe bc24 	b.w	8005136 <keypad_sm+0x696>
				kpenum = WAIT;
 80068ee:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 80068f0:	4d30      	ldr	r5, [pc, #192]	; (80069b4 <keypad_sm+0x1f14>)
				kpenum = WAIT;
 80068f2:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80068f4:	f995 2000 	ldrsb.w	r2, [r5]
 80068f8:	2a03      	cmp	r2, #3
 80068fa:	f73e a8f9 	bgt.w	8004af0 <keypad_sm+0x50>
 80068fe:	4b2e      	ldr	r3, [pc, #184]	; (80069b8 <keypad_sm+0x1f18>)
 8006900:	4e2e      	ldr	r6, [pc, #184]	; (80069bc <keypad_sm+0x1f1c>)
 8006902:	3201      	adds	r2, #1
 8006904:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006906:	f04f 097a 	mov.w	r9, #122	; 0x7a
 800690a:	f893 e004 	ldrb.w	lr, [r3, #4]
 800690e:	7831      	ldrb	r1, [r6, #0]
 8006910:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006914:	789f      	ldrb	r7, [r3, #2]
 8006916:	785c      	ldrb	r4, [r3, #1]
 8006918:	7818      	ldrb	r0, [r3, #0]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	e003      	b.n	8006926 <keypad_sm+0x1e86>
	while(keypaditerator < 4){
 800691e:	46bc      	mov	ip, r7
 8006920:	4627      	mov	r7, r4
 8006922:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006924:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006926:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006928:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 800692c:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 800692e:	bf04      	itt	eq
 8006930:	2100      	moveq	r1, #0
 8006932:	f04f 0801 	moveq.w	r8, #1
	while(keypaditerator < 4){
 8006936:	2a05      	cmp	r2, #5
 8006938:	46e6      	mov	lr, ip
 800693a:	d1f0      	bne.n	800691e <keypad_sm+0x1e7e>
 800693c:	f883 c004 	strb.w	ip, [r3, #4]
 8006940:	70df      	strb	r7, [r3, #3]
 8006942:	709c      	strb	r4, [r3, #2]
 8006944:	7058      	strb	r0, [r3, #1]
 8006946:	f883 9000 	strb.w	r9, [r3]
 800694a:	2304      	movs	r3, #4
 800694c:	702b      	strb	r3, [r5, #0]
 800694e:	f1b8 0f00 	cmp.w	r8, #0
 8006952:	f43e a8cd 	beq.w	8004af0 <keypad_sm+0x50>
 8006956:	7031      	strb	r1, [r6, #0]
 8006958:	f7fe b8ca 	b.w	8004af0 <keypad_sm+0x50>
				if(encpos == 1){
 800695c:	4b19      	ldr	r3, [pc, #100]	; (80069c4 <keypad_sm+0x1f24>)
 800695e:	f993 2000 	ldrsb.w	r2, [r3]
 8006962:	2a01      	cmp	r2, #1
 8006964:	f000 8194 	beq.w	8006c90 <keypad_sm+0x21f0>
				else if(encpos < 4){
 8006968:	2a03      	cmp	r2, #3
 800696a:	f300 8226 	bgt.w	8006dba <keypad_sm+0x231a>
					encpos++;
 800696e:	3201      	adds	r2, #1
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	f7fe b8bd 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8006976:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006978:	4d0e      	ldr	r5, [pc, #56]	; (80069b4 <keypad_sm+0x1f14>)
				kpenum = WAIT;
 800697a:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800697c:	f995 2000 	ldrsb.w	r2, [r5]
 8006980:	2a03      	cmp	r2, #3
 8006982:	f73e abd8 	bgt.w	8005136 <keypad_sm+0x696>
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <keypad_sm+0x1f18>)
 8006988:	4e0c      	ldr	r6, [pc, #48]	; (80069bc <keypad_sm+0x1f1c>)
			keypadarr[0] = num;
 800698a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 800698e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006992:	7830      	ldrb	r0, [r6, #0]
 8006994:	f893 8003 	ldrb.w	r8, [r3, #3]
 8006998:	f893 e002 	ldrb.w	lr, [r3, #2]
 800699c:	f893 c001 	ldrb.w	ip, [r3, #1]
 80069a0:	781c      	ldrb	r4, [r3, #0]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	e014      	b.n	80069d0 <keypad_sm+0x1f30>
 80069a6:	bf00      	nop
 80069a8:	41400000 	.word	0x41400000
 80069ac:	20000a74 	.word	0x20000a74
 80069b0:	20000a78 	.word	0x20000a78
 80069b4:	20000015 	.word	0x20000015
 80069b8:	20000010 	.word	0x20000010
 80069bc:	2000074c 	.word	0x2000074c
 80069c0:	20000000 	.word	0x20000000
 80069c4:	200003f5 	.word	0x200003f5
	while(keypaditerator < 4){
 80069c8:	46f0      	mov	r8, lr
 80069ca:	46e6      	mov	lr, ip
 80069cc:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 80069ce:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 80069d0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 80069d2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 80069d6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 80069d8:	bf04      	itt	eq
 80069da:	2101      	moveq	r1, #1
 80069dc:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 80069de:	2a04      	cmp	r2, #4
 80069e0:	46c1      	mov	r9, r8
 80069e2:	d1f1      	bne.n	80069c8 <keypad_sm+0x1f28>
 80069e4:	702a      	strb	r2, [r5, #0]
 80069e6:	f883 8004 	strb.w	r8, [r3, #4]
 80069ea:	f883 e003 	strb.w	lr, [r3, #3]
 80069ee:	f883 c002 	strb.w	ip, [r3, #2]
 80069f2:	705c      	strb	r4, [r3, #1]
 80069f4:	f883 a000 	strb.w	sl, [r3]
 80069f8:	2900      	cmp	r1, #0
 80069fa:	f43e ab9c 	beq.w	8005136 <keypad_sm+0x696>
 80069fe:	7030      	strb	r0, [r6, #0]
 8006a00:	f7fe bb99 	b.w	8005136 <keypad_sm+0x696>
 8006a04:	4dc2      	ldr	r5, [pc, #776]	; (8006d10 <keypad_sm+0x2270>)
 8006a06:	f995 2000 	ldrsb.w	r2, [r5]
 8006a0a:	2a03      	cmp	r2, #3
 8006a0c:	f73e ab93 	bgt.w	8005136 <keypad_sm+0x696>
 8006a10:	4bc0      	ldr	r3, [pc, #768]	; (8006d14 <keypad_sm+0x2274>)
 8006a12:	4ec1      	ldr	r6, [pc, #772]	; (8006d18 <keypad_sm+0x2278>)
 8006a14:	3201      	adds	r2, #1
 8006a16:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006a1a:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006a1e:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006a22:	f896 e000 	ldrb.w	lr, [r6]
 8006a26:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006a2a:	789c      	ldrb	r4, [r3, #2]
 8006a2c:	7858      	ldrb	r0, [r3, #1]
 8006a2e:	7819      	ldrb	r1, [r3, #0]
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	e003      	b.n	8006a3c <keypad_sm+0x1f9c>
	while(keypaditerator < 4){
 8006a34:	46a4      	mov	ip, r4
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006a3a:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006a3c:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006a3e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006a42:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006a44:	bf04      	itt	eq
 8006a46:	f04f 0801 	moveq.w	r8, #1
 8006a4a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006a4e:	2a05      	cmp	r2, #5
 8006a50:	46e1      	mov	r9, ip
 8006a52:	d1ef      	bne.n	8006a34 <keypad_sm+0x1f94>
 8006a54:	f883 c004 	strb.w	ip, [r3, #4]
 8006a58:	70dc      	strb	r4, [r3, #3]
 8006a5a:	7098      	strb	r0, [r3, #2]
 8006a5c:	7059      	strb	r1, [r3, #1]
 8006a5e:	f883 a000 	strb.w	sl, [r3]
 8006a62:	2304      	movs	r3, #4
 8006a64:	702b      	strb	r3, [r5, #0]
 8006a66:	f1b8 0f00 	cmp.w	r8, #0
 8006a6a:	f43e ab64 	beq.w	8005136 <keypad_sm+0x696>
 8006a6e:	f886 e000 	strb.w	lr, [r6]
 8006a72:	f7fe bb60 	b.w	8005136 <keypad_sm+0x696>
	float temp = translate_keypad();
 8006a76:	f7fd fb4d 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006a7a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006a7c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006a7e:	f7fa fb4b 	bl	8001118 <__aeabi_fcmpge>
 8006a82:	b188      	cbz	r0, 8006aa8 <keypad_sm+0x2008>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7f9 fce7 	bl	8000458 <__aeabi_f2d>
 8006a8a:	a39f      	add	r3, pc, #636	; (adr r3, 8006d08 <keypad_sm+0x2268>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 ffb6 	bl	8000a00 <__aeabi_dcmple>
 8006a94:	b140      	cbz	r0, 8006aa8 <keypad_sm+0x2008>
					amp_set_main_old = amp_set_main;
 8006a96:	4da1      	ldr	r5, [pc, #644]	; (8006d1c <keypad_sm+0x227c>)
 8006a98:	4ba1      	ldr	r3, [pc, #644]	; (8006d20 <keypad_sm+0x2280>)
 8006a9a:	682a      	ldr	r2, [r5, #0]
 8006a9c:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006a9e:	f7fd fb39 	bl	8004114 <translate_keypad>
 8006aa2:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006aa4:	f7fa ff66 	bl	8001974 <update_ADC_watchdog>
				kpenum = WAIT;
 8006aa8:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006aaa:	4d99      	ldr	r5, [pc, #612]	; (8006d10 <keypad_sm+0x2270>)
				kpenum = WAIT;
 8006aac:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006aae:	f995 2000 	ldrsb.w	r2, [r5]
 8006ab2:	2a03      	cmp	r2, #3
 8006ab4:	f73e a81c 	bgt.w	8004af0 <keypad_sm+0x50>
 8006ab8:	4b96      	ldr	r3, [pc, #600]	; (8006d14 <keypad_sm+0x2274>)
 8006aba:	4e97      	ldr	r6, [pc, #604]	; (8006d18 <keypad_sm+0x2278>)
			keypadarr[0] = num;
 8006abc:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006ac0:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006ac4:	7830      	ldrb	r0, [r6, #0]
 8006ac6:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006aca:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006ace:	785f      	ldrb	r7, [r3, #1]
 8006ad0:	781c      	ldrb	r4, [r3, #0]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	e003      	b.n	8006ade <keypad_sm+0x203e>
	while(keypaditerator < 4){
 8006ad6:	46e6      	mov	lr, ip
 8006ad8:	46bc      	mov	ip, r7
 8006ada:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006adc:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006ade:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006ae0:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006ae4:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006ae6:	bf04      	itt	eq
 8006ae8:	2000      	moveq	r0, #0
 8006aea:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006aec:	2a04      	cmp	r2, #4
 8006aee:	46f0      	mov	r8, lr
 8006af0:	d1f1      	bne.n	8006ad6 <keypad_sm+0x2036>
 8006af2:	702a      	strb	r2, [r5, #0]
 8006af4:	f883 e004 	strb.w	lr, [r3, #4]
 8006af8:	f883 c003 	strb.w	ip, [r3, #3]
 8006afc:	709f      	strb	r7, [r3, #2]
 8006afe:	705c      	strb	r4, [r3, #1]
 8006b00:	f883 9000 	strb.w	r9, [r3]
 8006b04:	2900      	cmp	r1, #0
 8006b06:	f43d aff3 	beq.w	8004af0 <keypad_sm+0x50>
 8006b0a:	7030      	strb	r0, [r6, #0]
 8006b0c:	f7fd bff0 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8006b10:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006b12:	4d7f      	ldr	r5, [pc, #508]	; (8006d10 <keypad_sm+0x2270>)
				kpenum = WAIT;
 8006b14:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006b16:	f995 2000 	ldrsb.w	r2, [r5]
 8006b1a:	2a03      	cmp	r2, #3
 8006b1c:	f73e ab0b 	bgt.w	8005136 <keypad_sm+0x696>
 8006b20:	4b7c      	ldr	r3, [pc, #496]	; (8006d14 <keypad_sm+0x2274>)
 8006b22:	4e7d      	ldr	r6, [pc, #500]	; (8006d18 <keypad_sm+0x2278>)
 8006b24:	3201      	adds	r2, #1
 8006b26:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006b28:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006b2c:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006b30:	f896 9000 	ldrb.w	r9, [r6]
 8006b34:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006b38:	789c      	ldrb	r4, [r3, #2]
 8006b3a:	7858      	ldrb	r0, [r3, #1]
 8006b3c:	7819      	ldrb	r1, [r3, #0]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	e003      	b.n	8006b4a <keypad_sm+0x20aa>
	while(keypaditerator < 4){
 8006b42:	46a4      	mov	ip, r4
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006b48:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006b4a:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006b4c:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006b50:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006b52:	bf04      	itt	eq
 8006b54:	f04f 0801 	moveq.w	r8, #1
 8006b58:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006b5c:	2a05      	cmp	r2, #5
 8006b5e:	46e6      	mov	lr, ip
 8006b60:	d1ef      	bne.n	8006b42 <keypad_sm+0x20a2>
 8006b62:	f883 c004 	strb.w	ip, [r3, #4]
 8006b66:	70dc      	strb	r4, [r3, #3]
 8006b68:	7098      	strb	r0, [r3, #2]
 8006b6a:	7059      	strb	r1, [r3, #1]
 8006b6c:	f883 a000 	strb.w	sl, [r3]
 8006b70:	2304      	movs	r3, #4
 8006b72:	702b      	strb	r3, [r5, #0]
 8006b74:	f1b8 0f00 	cmp.w	r8, #0
 8006b78:	f43e aadd 	beq.w	8005136 <keypad_sm+0x696>
 8006b7c:	f886 9000 	strb.w	r9, [r6]
 8006b80:	f7fe bad9 	b.w	8005136 <keypad_sm+0x696>
	float temp = translate_keypad();
 8006b84:	f7fd fac6 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b88:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006b8a:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006b8c:	f7fa fac4 	bl	8001118 <__aeabi_fcmpge>
 8006b90:	b158      	cbz	r0, 8006baa <keypad_sm+0x210a>
 8006b92:	4628      	mov	r0, r5
 8006b94:	4963      	ldr	r1, [pc, #396]	; (8006d24 <keypad_sm+0x2284>)
 8006b96:	f7fa fab5 	bl	8001104 <__aeabi_fcmple>
 8006b9a:	b130      	cbz	r0, 8006baa <keypad_sm+0x210a>
					volt_set_main_old = volt_set_main;
 8006b9c:	4d62      	ldr	r5, [pc, #392]	; (8006d28 <keypad_sm+0x2288>)
 8006b9e:	4b63      	ldr	r3, [pc, #396]	; (8006d2c <keypad_sm+0x228c>)
 8006ba0:	682a      	ldr	r2, [r5, #0]
 8006ba2:	601a      	str	r2, [r3, #0]
					volt_set_main = translate_keypad();
 8006ba4:	f7fd fab6 	bl	8004114 <translate_keypad>
 8006ba8:	6028      	str	r0, [r5, #0]
				kpenum = WAIT;
 8006baa:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006bac:	4d58      	ldr	r5, [pc, #352]	; (8006d10 <keypad_sm+0x2270>)
				kpenum = WAIT;
 8006bae:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006bb0:	f995 2000 	ldrsb.w	r2, [r5]
 8006bb4:	2a03      	cmp	r2, #3
 8006bb6:	f73e aabe 	bgt.w	8005136 <keypad_sm+0x696>
 8006bba:	4b56      	ldr	r3, [pc, #344]	; (8006d14 <keypad_sm+0x2274>)
 8006bbc:	4e56      	ldr	r6, [pc, #344]	; (8006d18 <keypad_sm+0x2278>)
 8006bbe:	3201      	adds	r2, #1
 8006bc0:	4688      	mov	r8, r1
			keypadarr[0] = num;
 8006bc2:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006bc6:	f893 e004 	ldrb.w	lr, [r3, #4]
 8006bca:	f896 9000 	ldrb.w	r9, [r6]
 8006bce:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006bd2:	789c      	ldrb	r4, [r3, #2]
 8006bd4:	7858      	ldrb	r0, [r3, #1]
 8006bd6:	7819      	ldrb	r1, [r3, #0]
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	e003      	b.n	8006be4 <keypad_sm+0x2144>
	while(keypaditerator < 4){
 8006bdc:	46a4      	mov	ip, r4
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006be2:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006be4:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006be6:	f1be 0f2e 	cmp.w	lr, #46	; 0x2e
	while(keypaditerator < 4){
 8006bea:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006bec:	bf04      	itt	eq
 8006bee:	f04f 0801 	moveq.w	r8, #1
 8006bf2:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8006bf6:	2a05      	cmp	r2, #5
 8006bf8:	46e6      	mov	lr, ip
 8006bfa:	d1ef      	bne.n	8006bdc <keypad_sm+0x213c>
 8006bfc:	f883 c004 	strb.w	ip, [r3, #4]
 8006c00:	70dc      	strb	r4, [r3, #3]
 8006c02:	7098      	strb	r0, [r3, #2]
 8006c04:	7059      	strb	r1, [r3, #1]
 8006c06:	f883 a000 	strb.w	sl, [r3]
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	702b      	strb	r3, [r5, #0]
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	f43e aa90 	beq.w	8005136 <keypad_sm+0x696>
 8006c16:	f886 9000 	strb.w	r9, [r6]
 8006c1a:	f7fe ba8c 	b.w	8005136 <keypad_sm+0x696>
 8006c1e:	4d3c      	ldr	r5, [pc, #240]	; (8006d10 <keypad_sm+0x2270>)
 8006c20:	f995 2000 	ldrsb.w	r2, [r5]
 8006c24:	2a03      	cmp	r2, #3
 8006c26:	f73e aa86 	bgt.w	8005136 <keypad_sm+0x696>
 8006c2a:	4b3a      	ldr	r3, [pc, #232]	; (8006d14 <keypad_sm+0x2274>)
 8006c2c:	4e3a      	ldr	r6, [pc, #232]	; (8006d18 <keypad_sm+0x2278>)
 8006c2e:	3201      	adds	r2, #1
 8006c30:	f04f 0800 	mov.w	r8, #0
			keypadarr[0] = num;
 8006c34:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006c38:	f893 9004 	ldrb.w	r9, [r3, #4]
 8006c3c:	f896 e000 	ldrb.w	lr, [r6]
 8006c40:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006c44:	789c      	ldrb	r4, [r3, #2]
 8006c46:	7858      	ldrb	r0, [r3, #1]
 8006c48:	7819      	ldrb	r1, [r3, #0]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	e003      	b.n	8006c56 <keypad_sm+0x21b6>
	while(keypaditerator < 4){
 8006c4e:	46a4      	mov	ip, r4
 8006c50:	4604      	mov	r4, r0
 8006c52:	4608      	mov	r0, r1
			keypadarr[0] = num;
 8006c54:	217a      	movs	r1, #122	; 0x7a
	while(keypaditerator < 4){
 8006c56:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006c58:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
	while(keypaditerator < 4){
 8006c5c:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006c5e:	bf04      	itt	eq
 8006c60:	f04f 0801 	moveq.w	r8, #1
 8006c64:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8006c68:	2a05      	cmp	r2, #5
 8006c6a:	46e1      	mov	r9, ip
 8006c6c:	d1ef      	bne.n	8006c4e <keypad_sm+0x21ae>
 8006c6e:	f883 c004 	strb.w	ip, [r3, #4]
 8006c72:	70dc      	strb	r4, [r3, #3]
 8006c74:	7098      	strb	r0, [r3, #2]
 8006c76:	7059      	strb	r1, [r3, #1]
 8006c78:	f883 a000 	strb.w	sl, [r3]
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	702b      	strb	r3, [r5, #0]
 8006c80:	f1b8 0f00 	cmp.w	r8, #0
 8006c84:	f43e aa57 	beq.w	8005136 <keypad_sm+0x696>
 8006c88:	f886 e000 	strb.w	lr, [r6]
 8006c8c:	f7fe ba53 	b.w	8005136 <keypad_sm+0x696>
					encpos++;
 8006c90:	2203      	movs	r2, #3
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	f7fd bf2c 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8006c98:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006c9a:	4d1d      	ldr	r5, [pc, #116]	; (8006d10 <keypad_sm+0x2270>)
				kpenum = WAIT;
 8006c9c:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006c9e:	f995 2000 	ldrsb.w	r2, [r5]
 8006ca2:	2a03      	cmp	r2, #3
 8006ca4:	f73e aa47 	bgt.w	8005136 <keypad_sm+0x696>
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <keypad_sm+0x2274>)
 8006caa:	4e1b      	ldr	r6, [pc, #108]	; (8006d18 <keypad_sm+0x2278>)
 8006cac:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006cae:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006cb2:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006cb6:	7831      	ldrb	r1, [r6, #0]
 8006cb8:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006cbc:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006cc0:	785c      	ldrb	r4, [r3, #1]
 8006cc2:	7818      	ldrb	r0, [r3, #0]
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	e003      	b.n	8006cd0 <keypad_sm+0x2230>
	while(keypaditerator < 4){
 8006cc8:	46e6      	mov	lr, ip
 8006cca:	46a4      	mov	ip, r4
 8006ccc:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006cce:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006cd0:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006cd2:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006cd6:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006cd8:	bf04      	itt	eq
 8006cda:	f04f 0901 	moveq.w	r9, #1
 8006cde:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006ce0:	2a04      	cmp	r2, #4
 8006ce2:	46f0      	mov	r8, lr
 8006ce4:	d1f0      	bne.n	8006cc8 <keypad_sm+0x2228>
 8006ce6:	702a      	strb	r2, [r5, #0]
 8006ce8:	f883 e004 	strb.w	lr, [r3, #4]
 8006cec:	f883 c003 	strb.w	ip, [r3, #3]
 8006cf0:	709c      	strb	r4, [r3, #2]
 8006cf2:	7058      	strb	r0, [r3, #1]
 8006cf4:	f883 a000 	strb.w	sl, [r3]
 8006cf8:	f1b9 0f00 	cmp.w	r9, #0
 8006cfc:	f43e aa1b 	beq.w	8005136 <keypad_sm+0x696>
 8006d00:	7031      	strb	r1, [r6, #0]
 8006d02:	f7fe ba18 	b.w	8005136 <keypad_sm+0x696>
 8006d06:	bf00      	nop
 8006d08:	50b0f27c 	.word	0x50b0f27c
 8006d0c:	3fe99a6b 	.word	0x3fe99a6b
 8006d10:	20000015 	.word	0x20000015
 8006d14:	20000010 	.word	0x20000010
 8006d18:	2000074c 	.word	0x2000074c
 8006d1c:	20000004 	.word	0x20000004
 8006d20:	20000008 	.word	0x20000008
 8006d24:	41400000 	.word	0x41400000
 8006d28:	20000a74 	.word	0x20000a74
 8006d2c:	20000a78 	.word	0x20000a78
				dec_arr_v(encpos);
 8006d30:	4b6b      	ldr	r3, [pc, #428]	; (8006ee0 <keypad_sm+0x2440>)
}
 8006d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				dec_arr_v(encpos);
 8006d36:	f993 0000 	ldrsb.w	r0, [r3]
 8006d3a:	f7fd bd89 	b.w	8004850 <dec_arr_v>
				kpenum = WAIT;
 8006d3e:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006d40:	4d68      	ldr	r5, [pc, #416]	; (8006ee4 <keypad_sm+0x2444>)
				kpenum = WAIT;
 8006d42:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006d44:	f995 2000 	ldrsb.w	r2, [r5]
 8006d48:	2a03      	cmp	r2, #3
 8006d4a:	f73d aed1 	bgt.w	8004af0 <keypad_sm+0x50>
 8006d4e:	4b66      	ldr	r3, [pc, #408]	; (8006ee8 <keypad_sm+0x2448>)
 8006d50:	4e66      	ldr	r6, [pc, #408]	; (8006eec <keypad_sm+0x244c>)
			keypadarr[0] = num;
 8006d52:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8006d56:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006d5a:	7830      	ldrb	r0, [r6, #0]
 8006d5c:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006d60:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006d64:	785f      	ldrb	r7, [r3, #1]
 8006d66:	781c      	ldrb	r4, [r3, #0]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	e003      	b.n	8006d74 <keypad_sm+0x22d4>
	while(keypaditerator < 4){
 8006d6c:	46e6      	mov	lr, ip
 8006d6e:	46bc      	mov	ip, r7
 8006d70:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8006d72:	247a      	movs	r4, #122	; 0x7a
	while(keypaditerator < 4){
 8006d74:	3201      	adds	r2, #1
				keypaddecimal = 0;
 8006d76:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006d7a:	b2d2      	uxtb	r2, r2
				keypaddecimal = 0;
 8006d7c:	bf04      	itt	eq
 8006d7e:	2000      	moveq	r0, #0
 8006d80:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8006d82:	2a04      	cmp	r2, #4
 8006d84:	46f0      	mov	r8, lr
 8006d86:	d1f1      	bne.n	8006d6c <keypad_sm+0x22cc>
 8006d88:	702a      	strb	r2, [r5, #0]
 8006d8a:	f883 e004 	strb.w	lr, [r3, #4]
 8006d8e:	f883 c003 	strb.w	ip, [r3, #3]
 8006d92:	709f      	strb	r7, [r3, #2]
 8006d94:	705c      	strb	r4, [r3, #1]
 8006d96:	f883 9000 	strb.w	r9, [r3]
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	f43d aea8 	beq.w	8004af0 <keypad_sm+0x50>
 8006da0:	7030      	strb	r0, [r6, #0]
 8006da2:	f7fd bea5 	b.w	8004af0 <keypad_sm+0x50>
				if(encpos == 0){
 8006da6:	4b4e      	ldr	r3, [pc, #312]	; (8006ee0 <keypad_sm+0x2440>)
 8006da8:	f993 2000 	ldrsb.w	r2, [r3]
 8006dac:	b182      	cbz	r2, 8006dd0 <keypad_sm+0x2330>
				else if(encpos < 4){
 8006dae:	2a03      	cmp	r2, #3
 8006db0:	dc03      	bgt.n	8006dba <keypad_sm+0x231a>
					encpos++;
 8006db2:	3201      	adds	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	f7fd be9b 	b.w	8004af0 <keypad_sm+0x50>
					encpos = 0;
 8006dba:	2200      	movs	r2, #0
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	f7fd be97 	b.w	8004af0 <keypad_sm+0x50>
				dec_arr_a(encpos);
 8006dc2:	4b47      	ldr	r3, [pc, #284]	; (8006ee0 <keypad_sm+0x2440>)
}
 8006dc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				dec_arr_a(encpos);
 8006dc8:	f993 0000 	ldrsb.w	r0, [r3]
 8006dcc:	f7fd bdd4 	b.w	8004978 <dec_arr_a>
					encpos++;
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	f7fd be8c 	b.w	8004af0 <keypad_sm+0x50>
				kpenum = WAIT;
 8006dd8:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006dda:	4d42      	ldr	r5, [pc, #264]	; (8006ee4 <keypad_sm+0x2444>)
				kpenum = WAIT;
 8006ddc:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006dde:	f995 2000 	ldrsb.w	r2, [r5]
 8006de2:	2a03      	cmp	r2, #3
 8006de4:	f73e a9a7 	bgt.w	8005136 <keypad_sm+0x696>
 8006de8:	4b3f      	ldr	r3, [pc, #252]	; (8006ee8 <keypad_sm+0x2448>)
 8006dea:	4e40      	ldr	r6, [pc, #256]	; (8006eec <keypad_sm+0x244c>)
 8006dec:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006dee:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006df2:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006df6:	7831      	ldrb	r1, [r6, #0]
 8006df8:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006dfc:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006e00:	785c      	ldrb	r4, [r3, #1]
 8006e02:	7818      	ldrb	r0, [r3, #0]
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	e003      	b.n	8006e10 <keypad_sm+0x2370>
	while(keypaditerator < 4){
 8006e08:	46e6      	mov	lr, ip
 8006e0a:	46a4      	mov	ip, r4
 8006e0c:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006e0e:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006e10:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006e12:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006e16:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006e18:	bf04      	itt	eq
 8006e1a:	f04f 0901 	moveq.w	r9, #1
 8006e1e:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006e20:	2a04      	cmp	r2, #4
 8006e22:	46f0      	mov	r8, lr
 8006e24:	d1f0      	bne.n	8006e08 <keypad_sm+0x2368>
 8006e26:	702a      	strb	r2, [r5, #0]
 8006e28:	f883 e004 	strb.w	lr, [r3, #4]
 8006e2c:	f883 c003 	strb.w	ip, [r3, #3]
 8006e30:	709c      	strb	r4, [r3, #2]
 8006e32:	7058      	strb	r0, [r3, #1]
 8006e34:	f883 a000 	strb.w	sl, [r3]
 8006e38:	f1b9 0f00 	cmp.w	r9, #0
 8006e3c:	f43e a97b 	beq.w	8005136 <keypad_sm+0x696>
 8006e40:	7031      	strb	r1, [r6, #0]
 8006e42:	f7fe b978 	b.w	8005136 <keypad_sm+0x696>
	float temp = translate_keypad();
 8006e46:	f7fd f965 	bl	8004114 <translate_keypad>
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006e4a:	2100      	movs	r1, #0
	float temp = translate_keypad();
 8006e4c:	4605      	mov	r5, r0
	return (which) ? (temp >= 0 && temp <= 0.8001) : (temp >= 0 && temp <= 12.00);
 8006e4e:	f7fa f963 	bl	8001118 <__aeabi_fcmpge>
 8006e52:	b168      	cbz	r0, 8006e70 <keypad_sm+0x23d0>
 8006e54:	4628      	mov	r0, r5
 8006e56:	4926      	ldr	r1, [pc, #152]	; (8006ef0 <keypad_sm+0x2450>)
 8006e58:	f7fa f954 	bl	8001104 <__aeabi_fcmple>
 8006e5c:	b140      	cbz	r0, 8006e70 <keypad_sm+0x23d0>
					amp_set_main_old = amp_set_main;
 8006e5e:	4d25      	ldr	r5, [pc, #148]	; (8006ef4 <keypad_sm+0x2454>)
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <keypad_sm+0x2458>)
 8006e62:	682a      	ldr	r2, [r5, #0]
 8006e64:	601a      	str	r2, [r3, #0]
					amp_set_main = translate_keypad();
 8006e66:	f7fd f955 	bl	8004114 <translate_keypad>
 8006e6a:	6028      	str	r0, [r5, #0]
					update_ADC_watchdog(amp_set_main);
 8006e6c:	f7fa fd82 	bl	8001974 <update_ADC_watchdog>
				kpenum = WAIT;
 8006e70:	2100      	movs	r1, #0
	while(keypaditerator < 4){
 8006e72:	4d1c      	ldr	r5, [pc, #112]	; (8006ee4 <keypad_sm+0x2444>)
				kpenum = WAIT;
 8006e74:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8006e76:	f995 2000 	ldrsb.w	r2, [r5]
 8006e7a:	2a03      	cmp	r2, #3
 8006e7c:	f73e a95b 	bgt.w	8005136 <keypad_sm+0x696>
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <keypad_sm+0x2448>)
 8006e82:	4e1a      	ldr	r6, [pc, #104]	; (8006eec <keypad_sm+0x244c>)
 8006e84:	4689      	mov	r9, r1
			keypadarr[0] = num;
 8006e86:	f04f 0a7a 	mov.w	sl, #122	; 0x7a
 8006e8a:	f893 8004 	ldrb.w	r8, [r3, #4]
 8006e8e:	7831      	ldrb	r1, [r6, #0]
 8006e90:	f893 e003 	ldrb.w	lr, [r3, #3]
 8006e94:	f893 c002 	ldrb.w	ip, [r3, #2]
 8006e98:	785c      	ldrb	r4, [r3, #1]
 8006e9a:	7818      	ldrb	r0, [r3, #0]
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	e003      	b.n	8006ea8 <keypad_sm+0x2408>
	while(keypaditerator < 4){
 8006ea0:	46e6      	mov	lr, ip
 8006ea2:	46a4      	mov	ip, r4
 8006ea4:	4604      	mov	r4, r0
			keypadarr[0] = num;
 8006ea6:	207a      	movs	r0, #122	; 0x7a
	while(keypaditerator < 4){
 8006ea8:	3201      	adds	r2, #1
			if(keypadarr[4] == '.'){
 8006eaa:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
	while(keypaditerator < 4){
 8006eae:	b2d2      	uxtb	r2, r2
			if(keypadarr[4] == '.'){
 8006eb0:	bf04      	itt	eq
 8006eb2:	f04f 0901 	moveq.w	r9, #1
 8006eb6:	2100      	moveq	r1, #0
	while(keypaditerator < 4){
 8006eb8:	2a04      	cmp	r2, #4
 8006eba:	46f0      	mov	r8, lr
 8006ebc:	d1f0      	bne.n	8006ea0 <keypad_sm+0x2400>
 8006ebe:	702a      	strb	r2, [r5, #0]
 8006ec0:	f883 e004 	strb.w	lr, [r3, #4]
 8006ec4:	f883 c003 	strb.w	ip, [r3, #3]
 8006ec8:	709c      	strb	r4, [r3, #2]
 8006eca:	7058      	strb	r0, [r3, #1]
 8006ecc:	f883 a000 	strb.w	sl, [r3]
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	f43e a92f 	beq.w	8005136 <keypad_sm+0x696>
 8006ed8:	7031      	strb	r1, [r6, #0]
 8006eda:	f7fe b92c 	b.w	8005136 <keypad_sm+0x696>
 8006ede:	bf00      	nop
 8006ee0:	200003f5 	.word	0x200003f5
 8006ee4:	20000015 	.word	0x20000015
 8006ee8:	20000010 	.word	0x20000010
 8006eec:	2000074c 	.word	0x2000074c
 8006ef0:	41400000 	.word	0x41400000
 8006ef4:	20000004 	.word	0x20000004
 8006ef8:	20000008 	.word	0x20000008

08006efc <row_input>:
void row_input(void){
 8006efc:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efe:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006f00:	4e30      	ldr	r6, [pc, #192]	; (8006fc4 <row_input+0xc8>)
void row_input(void){
 8006f02:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006f04:	4630      	mov	r0, r6
 8006f06:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f0a:	e9cd 4400 	strd	r4, r4, [sp]
 8006f0e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006f12:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006f14:	f001 fec4 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f1e:	f001 febf 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8006f22:	4630      	mov	r0, r6
 8006f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8006f28:	4d27      	ldr	r5, [pc, #156]	; (8006fc8 <row_input+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8006f2a:	f001 feb9 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f34:	f001 feb4 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f3e:	f001 feaf 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8006f42:	4628      	mov	r0, r5
 8006f44:	2140      	movs	r1, #64	; 0x40
 8006f46:	f001 feab 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	f001 fea7 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 8006f52:	4628      	mov	r0, r5
 8006f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f58:	f001 fea2 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f62:	f001 fe9d 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006f66:	4622      	mov	r2, r4
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8006f6e:	f001 ff2f 	bl	8008dd0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006f72:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8006f76:	2301      	movs	r3, #1
 8006f78:	e9cd 2300 	strd	r2, r3, [sp]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006f80:	4669      	mov	r1, sp
 8006f82:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8006f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8006f88:	f001 fda0 	bl	8008acc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8006f8c:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8006f90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006f94:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f98:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006f9a:	4669      	mov	r1, sp
 8006f9c:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f9e:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8006fa0:	f001 fd94 	bl	8008acc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8006fac:	f001 ff10 	bl	8008dd0 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(Row_1_EXTI_IRQn, 0, 0);
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	2028      	movs	r0, #40	; 0x28
 8006fb6:	f001 fad7 	bl	8008568 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(Row_1_EXTI_IRQn);
 8006fba:	2028      	movs	r0, #40	; 0x28
 8006fbc:	f001 fb12 	bl	80085e4 <HAL_NVIC_EnableIRQ>
}
 8006fc0:	b006      	add	sp, #24
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	40020400 	.word	0x40020400
 8006fc8:	40020800 	.word	0x40020800

08006fcc <column_input>:
void column_input(void){
 8006fcc:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fce:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006fd0:	4d2d      	ldr	r5, [pc, #180]	; (8007088 <column_input+0xbc>)
void column_input(void){
 8006fd2:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006fd4:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd6:	e9cd 4400 	strd	r4, r4, [sp]
 8006fda:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8006fde:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(Row_1_EXTI_IRQn);
 8006fe0:	f001 fb0e 	bl	8008600 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fea:	f001 fe59 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ff4:	f001 fe54 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8006ffe:	4e23      	ldr	r6, [pc, #140]	; (800708c <column_input+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8007000:	f001 fe4e 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8007004:	4628      	mov	r0, r5
 8007006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800700a:	f001 fe49 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 800700e:	4628      	mov	r0, r5
 8007010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007014:	f001 fe44 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8007018:	4630      	mov	r0, r6
 800701a:	2140      	movs	r1, #64	; 0x40
 800701c:	f001 fe40 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8007020:	4630      	mov	r0, r6
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	f001 fe3c 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 8007028:	4630      	mov	r0, r6
 800702a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800702e:	f001 fe37 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8007032:	4630      	mov	r0, r6
 8007034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007038:	f001 fe32 	bl	8008ca0 <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 800703c:	4622      	mov	r2, r4
 800703e:	4628      	mov	r0, r5
 8007040:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8007044:	f001 fec4 	bl	8008dd0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8007048:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 800704c:	2301      	movs	r3, #1
 800704e:	e9cd 2300 	strd	r2, r3, [sp]
 8007052:	2200      	movs	r2, #0
 8007054:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8007056:	4628      	mov	r0, r5
 8007058:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 800705a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800705e:	f001 fd35 	bl	8008acc <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007062:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8007064:	2300      	movs	r3, #0
 8007066:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800706a:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800706c:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800706e:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8007070:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8007074:	f001 fd2a 	bl	8008acc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8007078:	4622      	mov	r2, r4
 800707a:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 800707e:	4630      	mov	r0, r6
 8007080:	f001 fea6 	bl	8008dd0 <HAL_GPIO_WritePin>
}
 8007084:	b006      	add	sp, #24
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	40020400 	.word	0x40020400
 800708c:	40020800 	.word	0x40020800

08007090 <HAL_GPIO_EXTI_Callback>:
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007090:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4604      	mov	r4, r0
	if( (GPIO_Pin == Row_1_Pin) || (GPIO_Pin == Row_2_Pin) || (GPIO_Pin == Row_3_Pin) || (GPIO_Pin == Row_4_Pin) || (GPIO_Pin == Row_5_Pin)){
 8007098:	d010      	beq.n	80070bc <HAL_GPIO_EXTI_Callback+0x2c>
 800709a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800709e:	d00d      	beq.n	80070bc <HAL_GPIO_EXTI_Callback+0x2c>
 80070a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80070a4:	d00a      	beq.n	80070bc <HAL_GPIO_EXTI_Callback+0x2c>
 80070a6:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80070aa:	d007      	beq.n	80070bc <HAL_GPIO_EXTI_Callback+0x2c>
 80070ac:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80070b0:	d004      	beq.n	80070bc <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Rot_SW_Pin){
 80070b2:	2804      	cmp	r0, #4
 80070b4:	d036      	beq.n	8007124 <HAL_GPIO_EXTI_Callback+0x94>
	else if(GPIO_Pin == Rot_CLK_Pin){
 80070b6:	2801      	cmp	r0, #1
 80070b8:	d019      	beq.n	80070ee <HAL_GPIO_EXTI_Callback+0x5e>
}
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, GPIO_Pin) == 0){
 80070bc:	4621      	mov	r1, r4
 80070be:	4825      	ldr	r0, [pc, #148]	; (8007154 <HAL_GPIO_EXTI_Callback+0xc4>)
 80070c0:	f001 fe80 	bl	8008dc4 <HAL_GPIO_ReadPin>
 80070c4:	4603      	mov	r3, r0
 80070c6:	b130      	cbz	r0, 80070d6 <HAL_GPIO_EXTI_Callback+0x46>
			if(kpedge != 1){
 80070c8:	4b23      	ldr	r3, [pc, #140]	; (8007158 <HAL_GPIO_EXTI_Callback+0xc8>)
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	2a01      	cmp	r2, #1
 80070ce:	d0f4      	beq.n	80070ba <HAL_GPIO_EXTI_Callback+0x2a>
				swedge = 1;
 80070d0:	2201      	movs	r2, #1
 80070d2:	701a      	strb	r2, [r3, #0]
}
 80070d4:	bd38      	pop	{r3, r4, r5, pc}
			if(kpedge != 0){
 80070d6:	4a20      	ldr	r2, [pc, #128]	; (8007158 <HAL_GPIO_EXTI_Callback+0xc8>)
 80070d8:	7811      	ldrb	r1, [r2, #0]
 80070da:	2900      	cmp	r1, #0
 80070dc:	d0ed      	beq.n	80070ba <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = GPIO_Pin;
 80070de:	491f      	ldr	r1, [pc, #124]	; (800715c <HAL_GPIO_EXTI_Callback+0xcc>)
				kpedge = 0;
 80070e0:	7013      	strb	r3, [r2, #0]
				rowpin = GPIO_Pin;
 80070e2:	600c      	str	r4, [r1, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 80070e4:	481e      	ldr	r0, [pc, #120]	; (8007160 <HAL_GPIO_EXTI_Callback+0xd0>)
}
 80070e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim2);
 80070ea:	f003 bc35 	b.w	800a958 <HAL_TIM_Base_Start_IT>
		if (rotenum == NOTURN) {
 80070ee:	4d1d      	ldr	r5, [pc, #116]	; (8007164 <HAL_GPIO_EXTI_Callback+0xd4>)
 80070f0:	782b      	ldrb	r3, [r5, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e1      	bne.n	80070ba <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 80070f6:	2006      	movs	r0, #6
 80070f8:	f001 fa82 	bl	8008600 <HAL_NVIC_DisableIRQ>
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 80070fc:	4621      	mov	r1, r4
 80070fe:	4815      	ldr	r0, [pc, #84]	; (8007154 <HAL_GPIO_EXTI_Callback+0xc4>)
 8007100:	f001 fe60 	bl	8008dc4 <HAL_GPIO_ReadPin>
 8007104:	2102      	movs	r1, #2
 8007106:	4604      	mov	r4, r0
 8007108:	4812      	ldr	r0, [pc, #72]	; (8007154 <HAL_GPIO_EXTI_Callback+0xc4>)
 800710a:	f001 fe5b 	bl	8008dc4 <HAL_GPIO_ReadPin>
 800710e:	4603      	mov	r3, r0
 8007110:	429c      	cmp	r4, r3
 8007112:	bf0c      	ite	eq
 8007114:	2401      	moveq	r4, #1
 8007116:	2402      	movne	r4, #2
			HAL_TIM_Base_Start_IT(&htim10);
 8007118:	4813      	ldr	r0, [pc, #76]	; (8007168 <HAL_GPIO_EXTI_Callback+0xd8>)
			rotenum = (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) ? CWTURN : CCWTURN;
 800711a:	702c      	strb	r4, [r5, #0]
}
 800711c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_TIM_Base_Start_IT(&htim10);
 8007120:	f003 bc1a 	b.w	800a958 <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == 0){
 8007124:	4601      	mov	r1, r0
 8007126:	480b      	ldr	r0, [pc, #44]	; (8007154 <HAL_GPIO_EXTI_Callback+0xc4>)
 8007128:	f001 fe4c 	bl	8008dc4 <HAL_GPIO_ReadPin>
 800712c:	4603      	mov	r3, r0
 800712e:	b960      	cbnz	r0, 800714a <HAL_GPIO_EXTI_Callback+0xba>
			if(swedge != 0){
 8007130:	4a0e      	ldr	r2, [pc, #56]	; (800716c <HAL_GPIO_EXTI_Callback+0xdc>)
 8007132:	7811      	ldrb	r1, [r2, #0]
 8007134:	2900      	cmp	r1, #0
 8007136:	d0c0      	beq.n	80070ba <HAL_GPIO_EXTI_Callback+0x2a>
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8007138:	2008      	movs	r0, #8
				swedge = 0;
 800713a:	7013      	strb	r3, [r2, #0]
				HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 800713c:	f001 fa60 	bl	8008600 <HAL_NVIC_DisableIRQ>
}
 8007140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				HAL_TIM_Base_Start_IT(&htim9);
 8007144:	480a      	ldr	r0, [pc, #40]	; (8007170 <HAL_GPIO_EXTI_Callback+0xe0>)
 8007146:	f003 bc07 	b.w	800a958 <HAL_TIM_Base_Start_IT>
			if(swedge != 1){
 800714a:	4b08      	ldr	r3, [pc, #32]	; (800716c <HAL_GPIO_EXTI_Callback+0xdc>)
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	2a01      	cmp	r2, #1
 8007150:	d1be      	bne.n	80070d0 <HAL_GPIO_EXTI_Callback+0x40>
}
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	40020400 	.word	0x40020400
 8007158:	20000016 	.word	0x20000016
 800715c:	20000018 	.word	0x20000018
 8007160:	20000608 	.word	0x20000608
 8007164:	2000095c 	.word	0x2000095c
 8007168:	20000588 	.word	0x20000588
 800716c:	2000001c 	.word	0x2000001c
 8007170:	200006c8 	.word	0x200006c8

08007174 <HAL_TIM_PeriodElapsedCallback>:
	if(htim == &htim2){
 8007174:	4b76      	ldr	r3, [pc, #472]	; (8007350 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
{
 8007176:	b570      	push	{r4, r5, r6, lr}
	if(htim == &htim2){
 8007178:	4298      	cmp	r0, r3
 800717a:	d01f      	beq.n	80071bc <HAL_TIM_PeriodElapsedCallback+0x48>
	else if(htim == &htim3){
 800717c:	4d75      	ldr	r5, [pc, #468]	; (8007354 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800717e:	4604      	mov	r4, r0
 8007180:	42a8      	cmp	r0, r5
 8007182:	d031      	beq.n	80071e8 <HAL_TIM_PeriodElapsedCallback+0x74>
	else if(htim == &htim4){
 8007184:	4b74      	ldr	r3, [pc, #464]	; (8007358 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8007186:	4298      	cmp	r0, r3
 8007188:	d037      	beq.n	80071fa <HAL_TIM_PeriodElapsedCallback+0x86>
	else if(htim == &htim9){
 800718a:	4b74      	ldr	r3, [pc, #464]	; (800735c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800718c:	4298      	cmp	r0, r3
 800718e:	d006      	beq.n	800719e <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == &htim10){
 8007190:	4b73      	ldr	r3, [pc, #460]	; (8007360 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8007192:	4298      	cmp	r0, r3
 8007194:	d03d      	beq.n	8007212 <HAL_TIM_PeriodElapsedCallback+0x9e>
	else if(htim == &htim11){
 8007196:	4b73      	ldr	r3, [pc, #460]	; (8007364 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8007198:	4298      	cmp	r0, r3
 800719a:	d04d      	beq.n	8007238 <HAL_TIM_PeriodElapsedCallback+0xc4>
}
 800719c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 800719e:	f003 fc07 	bl	800a9b0 <HAL_TIM_Base_Stop_IT>
		keypad_sm('s');//s for switch
 80071a2:	2073      	movs	r0, #115	; 0x73
 80071a4:	f7fd fc7c 	bl	8004aa0 <keypad_sm>
		HAL_NVIC_SetPriority(Rot_SW_EXTI_IRQn, 0, 0);
 80071a8:	2200      	movs	r2, #0
 80071aa:	2008      	movs	r0, #8
 80071ac:	4611      	mov	r1, r2
 80071ae:	f001 f9db 	bl	8008568 <HAL_NVIC_SetPriority>
}
 80071b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 80071b6:	2008      	movs	r0, #8
 80071b8:	f001 ba14 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 80071bc:	f003 fbf8 	bl	800a9b0 <HAL_TIM_Base_Stop_IT>
		for(int i = 0; i < 4; i++){
 80071c0:	2400      	movs	r4, #0
		column_input();
 80071c2:	f7ff ff03 	bl	8006fcc <column_input>
		for(int i = 0; i < 4; i++){
 80071c6:	4e68      	ldr	r6, [pc, #416]	; (8007368 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80071c8:	4d68      	ldr	r5, [pc, #416]	; (800736c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
			if(HAL_GPIO_ReadPin(col_ports[i], col_pins[i]) == 0){
 80071ca:	f835 1b02 	ldrh.w	r1, [r5], #2
 80071ce:	f856 0b04 	ldr.w	r0, [r6], #4
 80071d2:	f001 fdf7 	bl	8008dc4 <HAL_GPIO_ReadPin>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d05a      	beq.n	8007290 <HAL_TIM_PeriodElapsedCallback+0x11c>
		for(int i = 0; i < 4; i++){
 80071da:	3401      	adds	r4, #1
 80071dc:	2c04      	cmp	r4, #4
 80071de:	d1f4      	bne.n	80071ca <HAL_TIM_PeriodElapsedCallback+0x56>
}
 80071e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		row_input();
 80071e4:	f7ff be8a 	b.w	8006efc <row_input>
		HAL_TIM_Base_Stop_IT(&htim3);
 80071e8:	f003 fbe2 	bl	800a9b0 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 80071ec:	f7fc fa96 	bl	800371c <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 80071f0:	4620      	mov	r0, r4
}
 80071f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 80071f6:	f003 bbaf 	b.w	800a958 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 80071fa:	f003 fbd9 	bl	800a9b0 <HAL_TIM_Base_Stop_IT>
		if(!startmessage){
 80071fe:	4b5c      	ldr	r3, [pc, #368]	; (8007370 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	bb8a      	cbnz	r2, 8007268 <HAL_TIM_PeriodElapsedCallback+0xf4>
			startmessage = 1;
 8007204:	2201      	movs	r2, #1
 8007206:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 8007208:	4620      	mov	r0, r4
}
 800720a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim4);
 800720e:	f003 bba3 	b.w	800a958 <HAL_TIM_Base_Start_IT>
		if(rotenum == CWTURN){
 8007212:	4c58      	ldr	r4, [pc, #352]	; (8007374 <HAL_TIM_PeriodElapsedCallback+0x200>)
		HAL_TIM_Base_Stop_IT(&htim10);
 8007214:	f003 fbcc 	bl	800a9b0 <HAL_TIM_Base_Stop_IT>
		if(rotenum == CWTURN){
 8007218:	7823      	ldrb	r3, [r4, #0]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d05a      	beq.n	80072d4 <HAL_TIM_PeriodElapsedCallback+0x160>
		else if(rotenum == CCWTURN){
 800721e:	2b02      	cmp	r3, #2
 8007220:	d05c      	beq.n	80072dc <HAL_TIM_PeriodElapsedCallback+0x168>
		rotenum = NOTURN;
 8007222:	2200      	movs	r2, #0
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 8007224:	2006      	movs	r0, #6
 8007226:	4611      	mov	r1, r2
		rotenum = NOTURN;
 8007228:	7022      	strb	r2, [r4, #0]
		HAL_NVIC_SetPriority(Rot_CLK_EXTI_IRQn, 0, 0);
 800722a:	f001 f99d 	bl	8008568 <HAL_NVIC_SetPriority>
}
 800722e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8007232:	2006      	movs	r0, #6
 8007234:	f001 b9d6 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim11);
 8007238:	f003 fbba 	bl	800a9b0 <HAL_TIM_Base_Stop_IT>
		if(chstat_main == 0){
 800723c:	4b4e      	ldr	r3, [pc, #312]	; (8007378 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800723e:	f993 2000 	ldrsb.w	r2, [r3]
 8007242:	b1b2      	cbz	r2, 8007272 <HAL_TIM_PeriodElapsedCallback+0xfe>
		else if(chstat_main == 1){
 8007244:	2a01      	cmp	r2, #1
 8007246:	d04d      	beq.n	80072e4 <HAL_TIM_PeriodElapsedCallback+0x170>
		else if(chstat_main == 2){
 8007248:	2a02      	cmp	r2, #2
 800724a:	d05a      	beq.n	8007302 <HAL_TIM_PeriodElapsedCallback+0x18e>
		if(chstat_aux_rx == 0){
 800724c:	4b4b      	ldr	r3, [pc, #300]	; (800737c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800724e:	f993 2000 	ldrsb.w	r2, [r3]
 8007252:	2a00      	cmp	r2, #0
 8007254:	d039      	beq.n	80072ca <HAL_TIM_PeriodElapsedCallback+0x156>
		else if(chstat_aux_rx == 1){
 8007256:	2a01      	cmp	r2, #1
 8007258:	d037      	beq.n	80072ca <HAL_TIM_PeriodElapsedCallback+0x156>
		else if(chstat_aux_rx == 2){
 800725a:	2a02      	cmp	r2, #2
 800725c:	d05c      	beq.n	8007318 <HAL_TIM_PeriodElapsedCallback+0x1a4>
}
 800725e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_TIM_Base_Start_IT(&htim11);
 8007262:	4840      	ldr	r0, [pc, #256]	; (8007364 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8007264:	f003 bb78 	b.w	800a958 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 8007268:	4628      	mov	r0, r5
}
 800726a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim3);
 800726e:	f003 bb73 	b.w	800a958 <HAL_TIM_Base_Start_IT>
			if(!timercounter){
 8007272:	4c43      	ldr	r4, [pc, #268]	; (8007380 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8007274:	7822      	ldrb	r2, [r4, #0]
 8007276:	2a00      	cmp	r2, #0
 8007278:	d03d      	beq.n	80072f6 <HAL_TIM_PeriodElapsedCallback+0x182>
			timercounter++;
 800727a:	3201      	adds	r2, #1
 800727c:	b2d2      	uxtb	r2, r2
			if(timercounter >= 7){
 800727e:	2a06      	cmp	r2, #6
			timercounter++;
 8007280:	7022      	strb	r2, [r4, #0]
			if(timercounter >= 7){
 8007282:	d901      	bls.n	8007288 <HAL_TIM_PeriodElapsedCallback+0x114>
				timercounter = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	7023      	strb	r3, [r4, #0]
			blink = 0;
 8007288:	2200      	movs	r2, #0
 800728a:	4b3e      	ldr	r3, [pc, #248]	; (8007384 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e7dd      	b.n	800724c <HAL_TIM_PeriodElapsedCallback+0xd8>
					if(rowpin == row_pins[j]){
 8007290:	4d3d      	ldr	r5, [pc, #244]	; (8007388 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007298:	d00d      	beq.n	80072b6 <HAL_TIM_PeriodElapsedCallback+0x142>
 800729a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729e:	d050      	beq.n	8007342 <HAL_TIM_PeriodElapsedCallback+0x1ce>
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a4:	d051      	beq.n	800734a <HAL_TIM_PeriodElapsedCallback+0x1d6>
 80072a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072aa:	d04c      	beq.n	8007346 <HAL_TIM_PeriodElapsedCallback+0x1d2>
 80072ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
				for(int j = 0; j < 5; j++){
 80072b0:	bf08      	it	eq
 80072b2:	2004      	moveq	r0, #4
					if(rowpin == row_pins[j]){
 80072b4:	d194      	bne.n	80071e0 <HAL_TIM_PeriodElapsedCallback+0x6c>
						keypad_sm(keypad_labels[j][i]);
 80072b6:	4b35      	ldr	r3, [pc, #212]	; (800738c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80072b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072bc:	5d00      	ldrb	r0, [r0, r4]
 80072be:	f7fd fbef 	bl	8004aa0 <keypad_sm>
						rowpin = -1;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295
 80072c6:	602b      	str	r3, [r5, #0]
						break;
 80072c8:	e78a      	b.n	80071e0 <HAL_TIM_PeriodElapsedCallback+0x6c>
			HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 80072ca:	2110      	movs	r1, #16
 80072cc:	4830      	ldr	r0, [pc, #192]	; (8007390 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80072ce:	f001 fd7f 	bl	8008dd0 <HAL_GPIO_WritePin>
 80072d2:	e7c4      	b.n	800725e <HAL_TIM_PeriodElapsedCallback+0xea>
			keypad_sm(']');//right bracket for CW
 80072d4:	205d      	movs	r0, #93	; 0x5d
 80072d6:	f7fd fbe3 	bl	8004aa0 <keypad_sm>
 80072da:	e7a2      	b.n	8007222 <HAL_TIM_PeriodElapsedCallback+0xae>
			keypad_sm('[');//left bracket for CCW
 80072dc:	205b      	movs	r0, #91	; 0x5b
 80072de:	f7fd fbdf 	bl	8004aa0 <keypad_sm>
 80072e2:	e79e      	b.n	8007222 <HAL_TIM_PeriodElapsedCallback+0xae>
			if(!timercounter){
 80072e4:	4c26      	ldr	r4, [pc, #152]	; (8007380 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80072e6:	7823      	ldrb	r3, [r4, #0]
 80072e8:	b1db      	cbz	r3, 8007322 <HAL_TIM_PeriodElapsedCallback+0x1ae>
			timercounter++;
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2db      	uxtb	r3, r3
			if(timercounter >= 7){
 80072ee:	2b06      	cmp	r3, #6
			timercounter++;
 80072f0:	7023      	strb	r3, [r4, #0]
			if(timercounter >= 7){
 80072f2:	d8c7      	bhi.n	8007284 <HAL_TIM_PeriodElapsedCallback+0x110>
 80072f4:	e7c8      	b.n	8007288 <HAL_TIM_PeriodElapsedCallback+0x114>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_RESET);
 80072f6:	2120      	movs	r1, #32
 80072f8:	4825      	ldr	r0, [pc, #148]	; (8007390 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80072fa:	f001 fd69 	bl	8008dd0 <HAL_GPIO_WritePin>
			timercounter++;
 80072fe:	7822      	ldrb	r2, [r4, #0]
 8007300:	e7bb      	b.n	800727a <HAL_TIM_PeriodElapsedCallback+0x106>
			if(blink){
 8007302:	4c20      	ldr	r4, [pc, #128]	; (8007384 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007304:	7823      	ldrb	r3, [r4, #0]
 8007306:	b9bb      	cbnz	r3, 8007338 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			timercounter++;
 8007308:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800730a:	7813      	ldrb	r3, [r2, #0]
 800730c:	3301      	adds	r3, #1
 800730e:	b2db      	uxtb	r3, r3
			if(timercounter >= 7){
 8007310:	2b06      	cmp	r3, #6
 8007312:	d80c      	bhi.n	800732e <HAL_TIM_PeriodElapsedCallback+0x1ba>
			timercounter++;
 8007314:	7013      	strb	r3, [r2, #0]
 8007316:	e799      	b.n	800724c <HAL_TIM_PeriodElapsedCallback+0xd8>
			HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
 8007318:	2110      	movs	r1, #16
 800731a:	481d      	ldr	r0, [pc, #116]	; (8007390 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800731c:	f001 fd5c 	bl	8008dd8 <HAL_GPIO_TogglePin>
 8007320:	e79d      	b.n	800725e <HAL_TIM_PeriodElapsedCallback+0xea>
				HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
 8007322:	2120      	movs	r1, #32
 8007324:	481a      	ldr	r0, [pc, #104]	; (8007390 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8007326:	f001 fd53 	bl	8008dd0 <HAL_GPIO_WritePin>
			timercounter++;
 800732a:	7823      	ldrb	r3, [r4, #0]
 800732c:	e7dd      	b.n	80072ea <HAL_TIM_PeriodElapsedCallback+0x176>
				timercounter = 0;
 800732e:	2100      	movs	r1, #0
				blink = 1;
 8007330:	2301      	movs	r3, #1
				timercounter = 0;
 8007332:	7011      	strb	r1, [r2, #0]
				blink = 1;
 8007334:	7023      	strb	r3, [r4, #0]
 8007336:	e789      	b.n	800724c <HAL_TIM_PeriodElapsedCallback+0xd8>
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8007338:	2120      	movs	r1, #32
 800733a:	4815      	ldr	r0, [pc, #84]	; (8007390 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800733c:	f001 fd4c 	bl	8008dd8 <HAL_GPIO_TogglePin>
 8007340:	e7e2      	b.n	8007308 <HAL_TIM_PeriodElapsedCallback+0x194>
				for(int j = 0; j < 5; j++){
 8007342:	2001      	movs	r0, #1
 8007344:	e7b7      	b.n	80072b6 <HAL_TIM_PeriodElapsedCallback+0x142>
 8007346:	2003      	movs	r0, #3
 8007348:	e7b5      	b.n	80072b6 <HAL_TIM_PeriodElapsedCallback+0x142>
 800734a:	2002      	movs	r0, #2
 800734c:	e7b3      	b.n	80072b6 <HAL_TIM_PeriodElapsedCallback+0x142>
 800734e:	bf00      	nop
 8007350:	20000608 	.word	0x20000608
 8007354:	20000648 	.word	0x20000648
 8007358:	20000688 	.word	0x20000688
 800735c:	200006c8 	.word	0x200006c8
 8007360:	20000588 	.word	0x20000588
 8007364:	200005c8 	.word	0x200005c8
 8007368:	08011760 	.word	0x08011760
 800736c:	08011758 	.word	0x08011758
 8007370:	200009a0 	.word	0x200009a0
 8007374:	2000095c 	.word	0x2000095c
 8007378:	200003eb 	.word	0x200003eb
 800737c:	200003e9 	.word	0x200003e9
 8007380:	200009a9 	.word	0x200009a9
 8007384:	200003e8 	.word	0x200003e8
 8007388:	20000018 	.word	0x20000018
 800738c:	080117b0 	.word	0x080117b0
 8007390:	40020800 	.word	0x40020800

08007394 <HAL_ADC_ConvHalfCpltCallback>:
	adc_values_cpy[0] = adc_values[0];
 8007394:	4a04      	ldr	r2, [pc, #16]	; (80073a8 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8007398:	8810      	ldrh	r0, [r2, #0]
	adc_values_cpy[1] = adc_values[1];
 800739a:	8851      	ldrh	r1, [r2, #2]
	adc_values_cpy[2] = adc_values[2];
 800739c:	8892      	ldrh	r2, [r2, #4]
	adc_values_cpy[0] = adc_values[0];
 800739e:	8018      	strh	r0, [r3, #0]
	adc_values_cpy[1] = adc_values[1];
 80073a0:	8059      	strh	r1, [r3, #2]
	adc_values_cpy[2] = adc_values[2];
 80073a2:	809a      	strh	r2, [r3, #4]
}
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	200003d0 	.word	0x200003d0
 80073ac:	200003dc 	.word	0x200003dc

080073b0 <HAL_ADC_ConvCpltCallback>:
	adc_values_cpy[3] = adc_values[3];
 80073b0:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <HAL_ADC_ConvCpltCallback+0x14>)
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_ADC_ConvCpltCallback+0x18>)
 80073b4:	88d0      	ldrh	r0, [r2, #6]
	adc_values_cpy[4] = adc_values[4];
 80073b6:	8911      	ldrh	r1, [r2, #8]
	adc_values_cpy[5] = adc_values[5];
 80073b8:	8952      	ldrh	r2, [r2, #10]
	adc_values_cpy[3] = adc_values[3];
 80073ba:	80d8      	strh	r0, [r3, #6]
	adc_values_cpy[4] = adc_values[4];
 80073bc:	8119      	strh	r1, [r3, #8]
	adc_values_cpy[5] = adc_values[5];
 80073be:	815a      	strh	r2, [r3, #10]
}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	200003d0 	.word	0x200003d0
 80073c8:	200003dc 	.word	0x200003dc

080073cc <HAL_ADC_LevelOutOfWindowCallback>:
{
 80073cc:	b510      	push	{r4, lr}
	if(chstat_main == 1){
 80073ce:	4c06      	ldr	r4, [pc, #24]	; (80073e8 <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 80073d0:	f994 2000 	ldrsb.w	r2, [r4]
 80073d4:	2a01      	cmp	r2, #1
 80073d6:	d000      	beq.n	80073da <HAL_ADC_LevelOutOfWindowCallback+0xe>
}
 80073d8:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 80073da:	2140      	movs	r1, #64	; 0x40
 80073dc:	4803      	ldr	r0, [pc, #12]	; (80073ec <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 80073de:	f001 fcf7 	bl	8008dd0 <HAL_GPIO_WritePin>
		chstat_main = 2;
 80073e2:	2302      	movs	r3, #2
 80073e4:	7023      	strb	r3, [r4, #0]
}
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	200003eb 	.word	0x200003eb
 80073ec:	40020000 	.word	0x40020000

080073f0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	4e83      	ldr	r6, [pc, #524]	; (8007604 <HAL_UART_RxCpltCallback+0x214>)
	for(int i = 0; i < 64; i++){
 80073f6:	2400      	movs	r4, #0
 80073f8:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80073fa:	b08b      	sub	sp, #44	; 0x2c
 80073fc:	e003      	b.n	8007406 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 80073fe:	3401      	adds	r4, #1
 8007400:	2c40      	cmp	r4, #64	; 0x40
 8007402:	f000 80fc 	beq.w	80075fe <HAL_UART_RxCpltCallback+0x20e>
		if(rxbuffer[i] == '*'){
 8007406:	f813 5b01 	ldrb.w	r5, [r3], #1
 800740a:	2d2a      	cmp	r5, #42	; 0x2a
 800740c:	d1f7      	bne.n	80073fe <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 800740e:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8007410:	2220      	movs	r2, #32
 8007412:	2100      	movs	r1, #0
 8007414:	a802      	add	r0, sp, #8
 8007416:	f005 fe73 	bl	800d100 <memset>
	for(int i = 0; i < 25; i++){
 800741a:	f10d 0307 	add.w	r3, sp, #7
 800741e:	aa08      	add	r2, sp, #32
 8007420:	e000      	b.n	8007424 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8007422:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8007424:	3401      	adds	r4, #1
 8007426:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8007428:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 800742a:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 800742e:	bf28      	it	cs
 8007430:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 8007432:	429a      	cmp	r2, r3
 8007434:	d1f5      	bne.n	8007422 <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8007436:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800743a:	2b2a      	cmp	r3, #42	; 0x2a
 800743c:	d00c      	beq.n	8007458 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 800743e:	2240      	movs	r2, #64	; 0x40
 8007440:	2100      	movs	r1, #0
 8007442:	4870      	ldr	r0, [pc, #448]	; (8007604 <HAL_UART_RxCpltCallback+0x214>)
 8007444:	f005 fe5c 	bl	800d100 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8007448:	2240      	movs	r2, #64	; 0x40
 800744a:	496e      	ldr	r1, [pc, #440]	; (8007604 <HAL_UART_RxCpltCallback+0x214>)
 800744c:	486e      	ldr	r0, [pc, #440]	; (8007608 <HAL_UART_RxCpltCallback+0x218>)
}
 800744e:	b00b      	add	sp, #44	; 0x2c
 8007450:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8007454:	f003 bcf4 	b.w	800ae40 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8007458:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800745c:	2b53      	cmp	r3, #83	; 0x53
 800745e:	d1ee      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007460:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007464:	2b54      	cmp	r3, #84	; 0x54
 8007466:	d1ea      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007468:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800746c:	2b52      	cmp	r3, #82	; 0x52
 800746e:	d1e6      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007470:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007474:	2b54      	cmp	r3, #84	; 0x54
 8007476:	d1e2      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007478:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800747c:	2b46      	cmp	r3, #70	; 0x46
 800747e:	d1de      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8007480:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8007484:	2b4e      	cmp	r3, #78	; 0x4e
 8007486:	d1da      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007488:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800748c:	2b53      	cmp	r3, #83	; 0x53
 800748e:	d1d6      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007490:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007494:	2b48      	cmp	r3, #72	; 0x48
 8007496:	d1d2      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007498:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800749c:	2b21      	cmp	r3, #33	; 0x21
 800749e:	d1ce      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 80074a0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80074a4:	2b2c      	cmp	r3, #44	; 0x2c
 80074a6:	d1ca      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 80074a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80074ac:	2b2c      	cmp	r3, #44	; 0x2c
 80074ae:	d1c6      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 80074b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80074b4:	2b2c      	cmp	r3, #44	; 0x2c
 80074b6:	d1c2      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 80074b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80074bc:	2b2c      	cmp	r3, #44	; 0x2c
 80074be:	d1be      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80074c0:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80074c4:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 80074c6:	b2c3      	uxtb	r3, r0
 80074c8:	2b09      	cmp	r3, #9
 80074ca:	d8b8      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80074cc:	f89d b00f 	ldrb.w	fp, [sp, #15]
 80074d0:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 80074d4:	fa5f f38b 	uxtb.w	r3, fp
 80074d8:	2b09      	cmp	r3, #9
 80074da:	d8b0      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 80074dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80074e0:	2b2e      	cmp	r3, #46	; 0x2e
 80074e2:	d1ac      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 80074e4:	f89d a011 	ldrb.w	sl, [sp, #17]
 80074e8:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 80074ec:	fa5f f38a 	uxtb.w	r3, sl
 80074f0:	2b09      	cmp	r3, #9
 80074f2:	d8a4      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 80074f4:	f89d 6012 	ldrb.w	r6, [sp, #18]
 80074f8:	3e30      	subs	r6, #48	; 0x30
 80074fa:	b2f3      	uxtb	r3, r6
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d89e      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8007500:	f89d 9014 	ldrb.w	r9, [sp, #20]
 8007504:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8007508:	fa5f f389 	uxtb.w	r3, r9
 800750c:	2b09      	cmp	r3, #9
 800750e:	d896      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8007510:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8007514:	2b2e      	cmp	r3, #46	; 0x2e
 8007516:	d192      	bne.n	800743e <HAL_UART_RxCpltCallback+0x4e>
 8007518:	f89d 8016 	ldrb.w	r8, [sp, #22]
 800751c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8007520:	fa5f f388 	uxtb.w	r3, r8
 8007524:	2b09      	cmp	r3, #9
 8007526:	d88a      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8007528:	f89d 7017 	ldrb.w	r7, [sp, #23]
 800752c:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 800752e:	b2fb      	uxtb	r3, r7
 8007530:	2b09      	cmp	r3, #9
 8007532:	d884      	bhi.n	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8007534:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8007538:	3d30      	subs	r5, #48	; 0x30
 800753a:	b2eb      	uxtb	r3, r5
 800753c:	2b09      	cmp	r3, #9
 800753e:	f63f af7e 	bhi.w	800743e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8007542:	f89d 401a 	ldrb.w	r4, [sp, #26]
 8007546:	3c30      	subs	r4, #48	; 0x30
 8007548:	b2e4      	uxtb	r4, r4
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 800754a:	2c02      	cmp	r4, #2
 800754c:	f63f af77 	bhi.w	800743e <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8007550:	f7f9 fbdc 	bl	8000d0c <__aeabi_i2f>
 8007554:	492d      	ldr	r1, [pc, #180]	; (800760c <HAL_UART_RxCpltCallback+0x21c>)
 8007556:	f7f9 fc2d 	bl	8000db4 <__aeabi_fmul>
 800755a:	2100      	movs	r1, #0
 800755c:	f7f9 fb22 	bl	8000ba4 <__addsf3>
 8007560:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8007562:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8007564:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8007566:	f7f9 fbd1 	bl	8000d0c <__aeabi_i2f>
 800756a:	9901      	ldr	r1, [sp, #4]
 800756c:	f7f9 fb1a 	bl	8000ba4 <__addsf3>
 8007570:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8007572:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8007574:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8007576:	f7f9 fbc9 	bl	8000d0c <__aeabi_i2f>
 800757a:	4924      	ldr	r1, [pc, #144]	; (800760c <HAL_UART_RxCpltCallback+0x21c>)
 800757c:	f7f9 fcce 	bl	8000f1c <__aeabi_fdiv>
 8007580:	4651      	mov	r1, sl
 8007582:	f7f9 fb0f 	bl	8000ba4 <__addsf3>
 8007586:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8007588:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 800758a:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800758c:	f7f9 fbbe 	bl	8000d0c <__aeabi_i2f>
 8007590:	2100      	movs	r1, #0
 8007592:	f7f9 fb07 	bl	8000ba4 <__addsf3>
 8007596:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8007598:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 800759a:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 800759c:	f7f9 fbb6 	bl	8000d0c <__aeabi_i2f>
 80075a0:	491a      	ldr	r1, [pc, #104]	; (800760c <HAL_UART_RxCpltCallback+0x21c>)
 80075a2:	f7f9 fcbb 	bl	8000f1c <__aeabi_fdiv>
 80075a6:	4641      	mov	r1, r8
 80075a8:	f7f9 fafc 	bl	8000ba4 <__addsf3>
 80075ac:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80075ae:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 80075b0:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80075b2:	f7f9 fbab 	bl	8000d0c <__aeabi_i2f>
 80075b6:	4916      	ldr	r1, [pc, #88]	; (8007610 <HAL_UART_RxCpltCallback+0x220>)
 80075b8:	f7f9 fcb0 	bl	8000f1c <__aeabi_fdiv>
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 faf1 	bl	8000ba4 <__addsf3>
 80075c2:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80075c4:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 80075c6:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 80075c8:	f7f9 fba0 	bl	8000d0c <__aeabi_i2f>
 80075cc:	4910      	ldr	r1, [pc, #64]	; (8007610 <HAL_UART_RxCpltCallback+0x220>)
 80075ce:	f7f9 fca5 	bl	8000f1c <__aeabi_fdiv>
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f9 fae6 	bl	8000ba4 <__addsf3>
 80075d8:	4602      	mov	r2, r0
		lin_num_aux = tempv2;
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <HAL_UART_RxCpltCallback+0x224>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80075dc:	4628      	mov	r0, r5
		lin_num_aux = tempv2;
 80075de:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 80075e0:	f7f9 fb94 	bl	8000d0c <__aeabi_i2f>
 80075e4:	490c      	ldr	r1, [pc, #48]	; (8007618 <HAL_UART_RxCpltCallback+0x228>)
 80075e6:	f7f9 fc99 	bl	8000f1c <__aeabi_fdiv>
 80075ea:	4631      	mov	r1, r6
 80075ec:	f7f9 fada 	bl	8000ba4 <__addsf3>
		cur_num_aux = tempa2;
 80075f0:	f8df b028 	ldr.w	fp, [pc, #40]	; 800761c <HAL_UART_RxCpltCallback+0x22c>
		chstat_aux_rx = rxbuffercpy[18]-48;
 80075f4:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <HAL_UART_RxCpltCallback+0x230>)
		cur_num_aux = tempa2;
 80075f6:	f8cb 0000 	str.w	r0, [fp]
		chstat_aux_rx = rxbuffercpy[18]-48;
 80075fa:	701c      	strb	r4, [r3, #0]
 80075fc:	e71f      	b.n	800743e <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 80075fe:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8007600:	7835      	ldrb	r5, [r6, #0]
 8007602:	e705      	b.n	8007410 <HAL_UART_RxCpltCallback+0x20>
 8007604:	20000960 	.word	0x20000960
 8007608:	20000708 	.word	0x20000708
 800760c:	41200000 	.word	0x41200000
 8007610:	42c80000 	.word	0x42c80000
 8007614:	20000754 	.word	0x20000754
 8007618:	447a0000 	.word	0x447a0000
 800761c:	200003f0 	.word	0x200003f0
 8007620:	200003e9 	.word	0x200003e9

08007624 <HAL_UART_ErrorCallback>:
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64); //Try again!
 8007624:	2240      	movs	r2, #64	; 0x40
 8007626:	4902      	ldr	r1, [pc, #8]	; (8007630 <HAL_UART_ErrorCallback+0xc>)
 8007628:	4802      	ldr	r0, [pc, #8]	; (8007634 <HAL_UART_ErrorCallback+0x10>)
 800762a:	f003 bc09 	b.w	800ae40 <HAL_UART_Receive_DMA>
 800762e:	bf00      	nop
 8007630:	20000960 	.word	0x20000960
 8007634:	20000708 	.word	0x20000708

08007638 <HAL_UART_TxHalfCpltCallback>:
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8007638:	b430      	push	{r4, r5}
	memcpy(txbuffer, txbuffer_cpy, 64);  // copy the data to the buffer
 800763a:	4c07      	ldr	r4, [pc, #28]	; (8007658 <HAL_UART_TxHalfCpltCallback+0x20>)
 800763c:	4d07      	ldr	r5, [pc, #28]	; (800765c <HAL_UART_TxHalfCpltCallback+0x24>)
 800763e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800764a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800764e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007652:	bc30      	pop	{r4, r5}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	200009ac 	.word	0x200009ac
 800765c:	200009ec 	.word	0x200009ec

08007660 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8007660:	b5d0      	push	{r4, r6, r7, lr}
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8007662:	4c11      	ldr	r4, [pc, #68]	; (80076a8 <HAL_UART_TxCpltCallback+0x48>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8007664:	b086      	sub	sp, #24
	memset (txbuffer_cpy, '\0', 64);  // clear the buffer
 8007666:	2240      	movs	r2, #64	; 0x40
 8007668:	2100      	movs	r1, #0
 800766a:	4620      	mov	r0, r4
 800766c:	f005 fd48 	bl	800d100 <memset>
	snprintf((char*)txbuffer_cpy, 32, "*STRT,%05.2f,%5.3f,%d,FNSH!", volt_set_aux, amp_set_aux, chstat_aux_tx);
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <HAL_UART_TxCpltCallback+0x4c>)
 8007672:	4a0f      	ldr	r2, [pc, #60]	; (80076b0 <HAL_UART_TxCpltCallback+0x50>)
 8007674:	f993 3000 	ldrsb.w	r3, [r3]
 8007678:	6810      	ldr	r0, [r2, #0]
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	f7f8 feec 	bl	8000458 <__aeabi_f2d>
 8007680:	460b      	mov	r3, r1
 8007682:	4602      	mov	r2, r0
 8007684:	490b      	ldr	r1, [pc, #44]	; (80076b4 <HAL_UART_TxCpltCallback+0x54>)
 8007686:	6808      	ldr	r0, [r1, #0]
 8007688:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800768c:	f7f8 fee4 	bl	8000458 <__aeabi_f2d>
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	4620      	mov	r0, r4
 8007696:	2120      	movs	r1, #32
 8007698:	e9cd 6700 	strd	r6, r7, [sp]
 800769c:	4a06      	ldr	r2, [pc, #24]	; (80076b8 <HAL_UART_TxCpltCallback+0x58>)
 800769e:	f006 f997 	bl	800d9d0 <sniprintf>
}
 80076a2:	b006      	add	sp, #24
 80076a4:	bdd0      	pop	{r4, r6, r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200009ec 	.word	0x200009ec
 80076ac:	200003ea 	.word	0x200003ea
 80076b0:	20000000 	.word	0x20000000
 80076b4:	20000a70 	.word	0x20000a70
 80076b8:	080114d0 	.word	0x080114d0

080076bc <Error_Handler>:
 80076bc:	b672      	cpsid	i
  while (1)
 80076be:	e7fe      	b.n	80076be <Error_Handler+0x2>

080076c0 <HAL_MspInit>:
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <HAL_MspInit+0x40>)
 80076c2:	b084      	sub	sp, #16
 80076c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
 80076cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80076d2:	9201      	str	r2, [sp, #4]
 80076d4:	9a01      	ldr	r2, [sp, #4]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	f042 0201 	orr.w	r2, r2, #1
 80076dc:	621a      	str	r2, [r3, #32]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	f002 0201 	and.w	r2, r2, #1
 80076e4:	9202      	str	r2, [sp, #8]
 80076e6:	9a02      	ldr	r2, [sp, #8]
 80076e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	b004      	add	sp, #16
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40023800 	.word	0x40023800

08007704 <HAL_ADC_MspInit>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	2400      	movs	r4, #0
 8007708:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <HAL_ADC_MspInit+0x9c>)
 800770a:	6802      	ldr	r2, [r0, #0]
 800770c:	b088      	sub	sp, #32
 800770e:	429a      	cmp	r2, r3
 8007710:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007714:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007718:	9406      	str	r4, [sp, #24]
 800771a:	d001      	beq.n	8007720 <HAL_ADC_MspInit+0x1c>
 800771c:	b008      	add	sp, #32
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8007724:	6a1a      	ldr	r2, [r3, #32]
 8007726:	a902      	add	r1, sp, #8
 8007728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800772c:	621a      	str	r2, [r3, #32]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	4605      	mov	r5, r0
 8007732:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007736:	9200      	str	r2, [sp, #0]
 8007738:	9a00      	ldr	r2, [sp, #0]
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	4e19      	ldr	r6, [pc, #100]	; (80077a4 <HAL_ADC_MspInit+0xa0>)
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	61da      	str	r2, [r3, #28]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	220f      	movs	r2, #15
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	2303      	movs	r3, #3
 8007750:	9801      	ldr	r0, [sp, #4]
 8007752:	4815      	ldr	r0, [pc, #84]	; (80077a8 <HAL_ADC_MspInit+0xa4>)
 8007754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007758:	f001 f9b8 	bl	8008acc <HAL_GPIO_Init>
 800775c:	2380      	movs	r3, #128	; 0x80
 800775e:	4913      	ldr	r1, [pc, #76]	; (80077ac <HAL_ADC_MspInit+0xa8>)
 8007760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007764:	e9c6 1400 	strd	r1, r4, [r6]
 8007768:	60f3      	str	r3, [r6, #12]
 800776a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800776e:	2320      	movs	r3, #32
 8007770:	4630      	mov	r0, r6
 8007772:	60b4      	str	r4, [r6, #8]
 8007774:	61f4      	str	r4, [r6, #28]
 8007776:	6171      	str	r1, [r6, #20]
 8007778:	6132      	str	r2, [r6, #16]
 800777a:	61b3      	str	r3, [r6, #24]
 800777c:	f000 fff2 	bl	8008764 <HAL_DMA_Init>
 8007780:	b958      	cbnz	r0, 800779a <HAL_ADC_MspInit+0x96>
 8007782:	2200      	movs	r2, #0
 8007784:	2012      	movs	r0, #18
 8007786:	4611      	mov	r1, r2
 8007788:	646e      	str	r6, [r5, #68]	; 0x44
 800778a:	6275      	str	r5, [r6, #36]	; 0x24
 800778c:	f000 feec 	bl	8008568 <HAL_NVIC_SetPriority>
 8007790:	2012      	movs	r0, #18
 8007792:	f000 ff27 	bl	80085e4 <HAL_NVIC_EnableIRQ>
 8007796:	b008      	add	sp, #32
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	f7ff ff8f 	bl	80076bc <Error_Handler>
 800779e:	e7f0      	b.n	8007782 <HAL_ADC_MspInit+0x7e>
 80077a0:	40012400 	.word	0x40012400
 80077a4:	20000460 	.word	0x20000460
 80077a8:	40020000 	.word	0x40020000
 80077ac:	40026008 	.word	0x40026008

080077b0 <HAL_ADC_MspDeInit>:
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <HAL_ADC_MspDeInit+0x30>)
 80077b2:	6802      	ldr	r2, [r0, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d000      	beq.n	80077ba <HAL_ADC_MspDeInit+0xa>
 80077b8:	4770      	bx	lr
 80077ba:	b510      	push	{r4, lr}
 80077bc:	4604      	mov	r4, r0
 80077be:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <HAL_ADC_MspDeInit+0x34>)
 80077c0:	210f      	movs	r1, #15
 80077c2:	6a13      	ldr	r3, [r2, #32]
 80077c4:	4808      	ldr	r0, [pc, #32]	; (80077e8 <HAL_ADC_MspDeInit+0x38>)
 80077c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ca:	6213      	str	r3, [r2, #32]
 80077cc:	f001 fa68 	bl	8008ca0 <HAL_GPIO_DeInit>
 80077d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80077d2:	f000 ffff 	bl	80087d4 <HAL_DMA_DeInit>
 80077d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077da:	2012      	movs	r0, #18
 80077dc:	f000 bf10 	b.w	8008600 <HAL_NVIC_DisableIRQ>
 80077e0:	40012400 	.word	0x40012400
 80077e4:	40023800 	.word	0x40023800
 80077e8:	40020000 	.word	0x40020000

080077ec <HAL_DAC_MspInit>:
 80077ec:	2300      	movs	r3, #0
 80077ee:	b530      	push	{r4, r5, lr}
 80077f0:	4a14      	ldr	r2, [pc, #80]	; (8007844 <HAL_DAC_MspInit+0x58>)
 80077f2:	6801      	ldr	r1, [r0, #0]
 80077f4:	b089      	sub	sp, #36	; 0x24
 80077f6:	4291      	cmp	r1, r2
 80077f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077fc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007800:	9306      	str	r3, [sp, #24]
 8007802:	d001      	beq.n	8007808 <HAL_DAC_MspInit+0x1c>
 8007804:	b009      	add	sp, #36	; 0x24
 8007806:	bd30      	pop	{r4, r5, pc}
 8007808:	2430      	movs	r4, #48	; 0x30
 800780a:	2503      	movs	r5, #3
 800780c:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <HAL_DAC_MspInit+0x5c>)
 800780e:	480f      	ldr	r0, [pc, #60]	; (800784c <HAL_DAC_MspInit+0x60>)
 8007810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007812:	a902      	add	r1, sp, #8
 8007814:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007818:	625a      	str	r2, [r3, #36]	; 0x24
 800781a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800781c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8007820:	9200      	str	r2, [sp, #0]
 8007822:	9a00      	ldr	r2, [sp, #0]
 8007824:	69da      	ldr	r2, [r3, #28]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	61da      	str	r2, [r3, #28]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	9b01      	ldr	r3, [sp, #4]
 800783a:	f001 f947 	bl	8008acc <HAL_GPIO_Init>
 800783e:	b009      	add	sp, #36	; 0x24
 8007840:	bd30      	pop	{r4, r5, pc}
 8007842:	bf00      	nop
 8007844:	40007400 	.word	0x40007400
 8007848:	40023800 	.word	0x40023800
 800784c:	40020000 	.word	0x40020000

08007850 <HAL_I2C_MspInit>:
 8007850:	2300      	movs	r3, #0
 8007852:	b5d0      	push	{r4, r6, r7, lr}
 8007854:	4a16      	ldr	r2, [pc, #88]	; (80078b0 <HAL_I2C_MspInit+0x60>)
 8007856:	6801      	ldr	r1, [r0, #0]
 8007858:	b088      	sub	sp, #32
 800785a:	4291      	cmp	r1, r2
 800785c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007860:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8007864:	9306      	str	r3, [sp, #24]
 8007866:	d001      	beq.n	800786c <HAL_I2C_MspInit+0x1c>
 8007868:	b008      	add	sp, #32
 800786a:	bdd0      	pop	{r4, r6, r7, pc}
 800786c:	2003      	movs	r0, #3
 800786e:	2204      	movs	r2, #4
 8007870:	26c0      	movs	r6, #192	; 0xc0
 8007872:	2712      	movs	r7, #18
 8007874:	4c0f      	ldr	r4, [pc, #60]	; (80078b4 <HAL_I2C_MspInit+0x64>)
 8007876:	a902      	add	r1, sp, #8
 8007878:	69e3      	ldr	r3, [r4, #28]
 800787a:	f043 0302 	orr.w	r3, r3, #2
 800787e:	61e3      	str	r3, [r4, #28]
 8007880:	69e3      	ldr	r3, [r4, #28]
 8007882:	9005      	str	r0, [sp, #20]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	480b      	ldr	r0, [pc, #44]	; (80078b8 <HAL_I2C_MspInit+0x68>)
 800788c:	9b00      	ldr	r3, [sp, #0]
 800788e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007892:	9206      	str	r2, [sp, #24]
 8007894:	f001 f91a 	bl	8008acc <HAL_GPIO_Init>
 8007898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800789e:	6263      	str	r3, [r4, #36]	; 0x24
 80078a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	b008      	add	sp, #32
 80078ac:	bdd0      	pop	{r4, r6, r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40005400 	.word	0x40005400
 80078b4:	40023800 	.word	0x40023800
 80078b8:	40020400 	.word	0x40020400

080078bc <HAL_TIM_Base_MspInit>:
 80078bc:	b500      	push	{lr}
 80078be:	6803      	ldr	r3, [r0, #0]
 80078c0:	b087      	sub	sp, #28
 80078c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c6:	d026      	beq.n	8007916 <HAL_TIM_Base_MspInit+0x5a>
 80078c8:	4a44      	ldr	r2, [pc, #272]	; (80079dc <HAL_TIM_Base_MspInit+0x120>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d039      	beq.n	8007942 <HAL_TIM_Base_MspInit+0x86>
 80078ce:	4a44      	ldr	r2, [pc, #272]	; (80079e0 <HAL_TIM_Base_MspInit+0x124>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d04b      	beq.n	800796c <HAL_TIM_Base_MspInit+0xb0>
 80078d4:	4a43      	ldr	r2, [pc, #268]	; (80079e4 <HAL_TIM_Base_MspInit+0x128>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d008      	beq.n	80078ec <HAL_TIM_Base_MspInit+0x30>
 80078da:	4a43      	ldr	r2, [pc, #268]	; (80079e8 <HAL_TIM_Base_MspInit+0x12c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d05a      	beq.n	8007996 <HAL_TIM_Base_MspInit+0xda>
 80078e0:	4a42      	ldr	r2, [pc, #264]	; (80079ec <HAL_TIM_Base_MspInit+0x130>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d068      	beq.n	80079b8 <HAL_TIM_Base_MspInit+0xfc>
 80078e6:	b007      	add	sp, #28
 80078e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80078ec:	2200      	movs	r2, #0
 80078ee:	4b40      	ldr	r3, [pc, #256]	; (80079f0 <HAL_TIM_Base_MspInit+0x134>)
 80078f0:	2019      	movs	r0, #25
 80078f2:	6a19      	ldr	r1, [r3, #32]
 80078f4:	f041 0104 	orr.w	r1, r1, #4
 80078f8:	6219      	str	r1, [r3, #32]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	4611      	mov	r1, r2
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	9303      	str	r3, [sp, #12]
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	f000 fe2f 	bl	8008568 <HAL_NVIC_SetPriority>
 800790a:	2019      	movs	r0, #25
 800790c:	b007      	add	sp, #28
 800790e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007912:	f000 be67 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
 8007916:	2200      	movs	r2, #0
 8007918:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800791c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800791e:	201c      	movs	r0, #28
 8007920:	f041 0101 	orr.w	r1, r1, #1
 8007924:	6259      	str	r1, [r3, #36]	; 0x24
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	4611      	mov	r1, r2
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	9b00      	ldr	r3, [sp, #0]
 8007932:	f000 fe19 	bl	8008568 <HAL_NVIC_SetPriority>
 8007936:	201c      	movs	r0, #28
 8007938:	b007      	add	sp, #28
 800793a:	f85d eb04 	ldr.w	lr, [sp], #4
 800793e:	f000 be51 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
 8007942:	2200      	movs	r2, #0
 8007944:	4b2a      	ldr	r3, [pc, #168]	; (80079f0 <HAL_TIM_Base_MspInit+0x134>)
 8007946:	201d      	movs	r0, #29
 8007948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800794a:	f041 0102 	orr.w	r1, r1, #2
 800794e:	6259      	str	r1, [r3, #36]	; 0x24
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	4611      	mov	r1, r2
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	f000 fe04 	bl	8008568 <HAL_NVIC_SetPriority>
 8007960:	201d      	movs	r0, #29
 8007962:	b007      	add	sp, #28
 8007964:	f85d eb04 	ldr.w	lr, [sp], #4
 8007968:	f000 be3c 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
 800796c:	2200      	movs	r2, #0
 800796e:	4b20      	ldr	r3, [pc, #128]	; (80079f0 <HAL_TIM_Base_MspInit+0x134>)
 8007970:	201e      	movs	r0, #30
 8007972:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007974:	f041 0104 	orr.w	r1, r1, #4
 8007978:	6259      	str	r1, [r3, #36]	; 0x24
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	4611      	mov	r1, r2
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	f000 fdef 	bl	8008568 <HAL_NVIC_SetPriority>
 800798a:	201e      	movs	r0, #30
 800798c:	b007      	add	sp, #28
 800798e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007992:	f000 be27 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
 8007996:	2200      	movs	r2, #0
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <HAL_TIM_Base_MspInit+0x134>)
 800799a:	201a      	movs	r0, #26
 800799c:	6a19      	ldr	r1, [r3, #32]
 800799e:	f041 0108 	orr.w	r1, r1, #8
 80079a2:	6219      	str	r1, [r3, #32]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	4611      	mov	r1, r2
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	f000 fdda 	bl	8008568 <HAL_NVIC_SetPriority>
 80079b4:	201a      	movs	r0, #26
 80079b6:	e7a9      	b.n	800790c <HAL_TIM_Base_MspInit+0x50>
 80079b8:	2200      	movs	r2, #0
 80079ba:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <HAL_TIM_Base_MspInit+0x134>)
 80079bc:	201b      	movs	r0, #27
 80079be:	6a19      	ldr	r1, [r3, #32]
 80079c0:	f041 0110 	orr.w	r1, r1, #16
 80079c4:	6219      	str	r1, [r3, #32]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	4611      	mov	r1, r2
 80079ca:	f003 0310 	and.w	r3, r3, #16
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	9b05      	ldr	r3, [sp, #20]
 80079d2:	f000 fdc9 	bl	8008568 <HAL_NVIC_SetPriority>
 80079d6:	201b      	movs	r0, #27
 80079d8:	e798      	b.n	800790c <HAL_TIM_Base_MspInit+0x50>
 80079da:	bf00      	nop
 80079dc:	40000400 	.word	0x40000400
 80079e0:	40000800 	.word	0x40000800
 80079e4:	40010800 	.word	0x40010800
 80079e8:	40010c00 	.word	0x40010c00
 80079ec:	40011000 	.word	0x40011000
 80079f0:	40023800 	.word	0x40023800

080079f4 <HAL_UART_MspInit>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	2400      	movs	r4, #0
 80079f8:	4b31      	ldr	r3, [pc, #196]	; (8007ac0 <HAL_UART_MspInit+0xcc>)
 80079fa:	6802      	ldr	r2, [r0, #0]
 80079fc:	b088      	sub	sp, #32
 80079fe:	429a      	cmp	r2, r3
 8007a00:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8007a04:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007a08:	9406      	str	r4, [sp, #24]
 8007a0a:	d001      	beq.n	8007a10 <HAL_UART_MspInit+0x1c>
 8007a0c:	b008      	add	sp, #32
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007a14:	6a1a      	ldr	r2, [r3, #32]
 8007a16:	4605      	mov	r5, r0
 8007a18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a1c:	621a      	str	r2, [r3, #32]
 8007a1e:	6a1a      	ldr	r2, [r3, #32]
 8007a20:	a902      	add	r1, sp, #8
 8007a22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007a26:	9200      	str	r2, [sp, #0]
 8007a28:	9a00      	ldr	r2, [sp, #0]
 8007a2a:	69da      	ldr	r2, [r3, #28]
 8007a2c:	4e25      	ldr	r6, [pc, #148]	; (8007ac4 <HAL_UART_MspInit+0xd0>)
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	61da      	str	r2, [r3, #28]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	2302      	movs	r3, #2
 8007a42:	9801      	ldr	r0, [sp, #4]
 8007a44:	2003      	movs	r0, #3
 8007a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a4a:	2307      	movs	r3, #7
 8007a4c:	9005      	str	r0, [sp, #20]
 8007a4e:	481e      	ldr	r0, [pc, #120]	; (8007ac8 <HAL_UART_MspInit+0xd4>)
 8007a50:	9306      	str	r3, [sp, #24]
 8007a52:	f001 f83b 	bl	8008acc <HAL_GPIO_Init>
 8007a56:	2380      	movs	r3, #128	; 0x80
 8007a58:	4a1c      	ldr	r2, [pc, #112]	; (8007acc <HAL_UART_MspInit+0xd8>)
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	e9c6 2400 	strd	r2, r4, [r6]
 8007a60:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8007a64:	e9c6 4406 	strd	r4, r4, [r6, #24]
 8007a68:	60b4      	str	r4, [r6, #8]
 8007a6a:	60f3      	str	r3, [r6, #12]
 8007a6c:	f000 fe7a 	bl	8008764 <HAL_DMA_Init>
 8007a70:	b9f8      	cbnz	r0, 8007ab2 <HAL_UART_MspInit+0xbe>
 8007a72:	2210      	movs	r2, #16
 8007a74:	4c16      	ldr	r4, [pc, #88]	; (8007ad0 <HAL_UART_MspInit+0xdc>)
 8007a76:	2300      	movs	r3, #0
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	6062      	str	r2, [r4, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	e9c4 3102 	strd	r3, r1, [r4, #8]
 8007a82:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8007a86:	61e3      	str	r3, [r4, #28]
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <HAL_UART_MspInit+0xe0>)
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	63ae      	str	r6, [r5, #56]	; 0x38
 8007a8e:	6275      	str	r5, [r6, #36]	; 0x24
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	61a2      	str	r2, [r4, #24]
 8007a94:	f000 fe66 	bl	8008764 <HAL_DMA_Init>
 8007a98:	b970      	cbnz	r0, 8007ab8 <HAL_UART_MspInit+0xc4>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2025      	movs	r0, #37	; 0x25
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	636c      	str	r4, [r5, #52]	; 0x34
 8007aa2:	6265      	str	r5, [r4, #36]	; 0x24
 8007aa4:	f000 fd60 	bl	8008568 <HAL_NVIC_SetPriority>
 8007aa8:	2025      	movs	r0, #37	; 0x25
 8007aaa:	f000 fd9b 	bl	80085e4 <HAL_NVIC_EnableIRQ>
 8007aae:	b008      	add	sp, #32
 8007ab0:	bd70      	pop	{r4, r5, r6, pc}
 8007ab2:	f7ff fe03 	bl	80076bc <Error_Handler>
 8007ab6:	e7dc      	b.n	8007a72 <HAL_UART_MspInit+0x7e>
 8007ab8:	f7ff fe00 	bl	80076bc <Error_Handler>
 8007abc:	e7ed      	b.n	8007a9a <HAL_UART_MspInit+0xa6>
 8007abe:	bf00      	nop
 8007ac0:	40013800 	.word	0x40013800
 8007ac4:	200004a4 	.word	0x200004a4
 8007ac8:	40020000 	.word	0x40020000
 8007acc:	40026058 	.word	0x40026058
 8007ad0:	200004e8 	.word	0x200004e8
 8007ad4:	40026044 	.word	0x40026044

08007ad8 <NMI_Handler>:
 8007ad8:	e7fe      	b.n	8007ad8 <NMI_Handler>
 8007ada:	bf00      	nop

08007adc <HardFault_Handler>:
 8007adc:	e7fe      	b.n	8007adc <HardFault_Handler>
 8007ade:	bf00      	nop

08007ae0 <MemManage_Handler>:
 8007ae0:	e7fe      	b.n	8007ae0 <MemManage_Handler>
 8007ae2:	bf00      	nop

08007ae4 <BusFault_Handler>:
 8007ae4:	e7fe      	b.n	8007ae4 <BusFault_Handler>
 8007ae6:	bf00      	nop

08007ae8 <UsageFault_Handler>:
 8007ae8:	e7fe      	b.n	8007ae8 <UsageFault_Handler>
 8007aea:	bf00      	nop

08007aec <SVC_Handler>:
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop

08007af0 <DebugMon_Handler>:
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop

08007af4 <PendSV_Handler>:
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop

08007af8 <SysTick_Handler>:
 8007af8:	f000 b926 	b.w	8007d48 <HAL_IncTick>

08007afc <EXTI0_IRQHandler>:
 8007afc:	2001      	movs	r0, #1
 8007afe:	f001 b975 	b.w	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007b02:	bf00      	nop

08007b04 <EXTI2_IRQHandler>:
 8007b04:	2004      	movs	r0, #4
 8007b06:	f001 b971 	b.w	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007b0a:	bf00      	nop

08007b0c <DMA1_Channel1_IRQHandler>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	; (8007b14 <DMA1_Channel1_IRQHandler+0x8>)
 8007b0e:	f000 bf29 	b.w	8008964 <HAL_DMA_IRQHandler>
 8007b12:	bf00      	nop
 8007b14:	20000460 	.word	0x20000460

08007b18 <DMA1_Channel4_IRQHandler>:
 8007b18:	4801      	ldr	r0, [pc, #4]	; (8007b20 <DMA1_Channel4_IRQHandler+0x8>)
 8007b1a:	f000 bf23 	b.w	8008964 <HAL_DMA_IRQHandler>
 8007b1e:	bf00      	nop
 8007b20:	200004e8 	.word	0x200004e8

08007b24 <DMA1_Channel5_IRQHandler>:
 8007b24:	4801      	ldr	r0, [pc, #4]	; (8007b2c <DMA1_Channel5_IRQHandler+0x8>)
 8007b26:	f000 bf1d 	b.w	8008964 <HAL_DMA_IRQHandler>
 8007b2a:	bf00      	nop
 8007b2c:	200004a4 	.word	0x200004a4

08007b30 <ADC1_IRQHandler>:
 8007b30:	4801      	ldr	r0, [pc, #4]	; (8007b38 <ADC1_IRQHandler+0x8>)
 8007b32:	f000 bad1 	b.w	80080d8 <HAL_ADC_IRQHandler>
 8007b36:	bf00      	nop
 8007b38:	200003f8 	.word	0x200003f8

08007b3c <USB_LP_IRQHandler>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <USB_LP_IRQHandler+0x8>)
 8007b3e:	f001 bc3b 	b.w	80093b8 <HAL_PCD_IRQHandler>
 8007b42:	bf00      	nop
 8007b44:	200016f4 	.word	0x200016f4

08007b48 <TIM9_IRQHandler>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <TIM9_IRQHandler+0x8>)
 8007b4a:	f002 bff5 	b.w	800ab38 <HAL_TIM_IRQHandler>
 8007b4e:	bf00      	nop
 8007b50:	200006c8 	.word	0x200006c8

08007b54 <TIM10_IRQHandler>:
 8007b54:	4801      	ldr	r0, [pc, #4]	; (8007b5c <TIM10_IRQHandler+0x8>)
 8007b56:	f002 bfef 	b.w	800ab38 <HAL_TIM_IRQHandler>
 8007b5a:	bf00      	nop
 8007b5c:	20000588 	.word	0x20000588

08007b60 <TIM11_IRQHandler>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <TIM11_IRQHandler+0x8>)
 8007b62:	f002 bfe9 	b.w	800ab38 <HAL_TIM_IRQHandler>
 8007b66:	bf00      	nop
 8007b68:	200005c8 	.word	0x200005c8

08007b6c <TIM2_IRQHandler>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <TIM2_IRQHandler+0x8>)
 8007b6e:	f002 bfe3 	b.w	800ab38 <HAL_TIM_IRQHandler>
 8007b72:	bf00      	nop
 8007b74:	20000608 	.word	0x20000608

08007b78 <TIM3_IRQHandler>:
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <TIM3_IRQHandler+0x8>)
 8007b7a:	f002 bfdd 	b.w	800ab38 <HAL_TIM_IRQHandler>
 8007b7e:	bf00      	nop
 8007b80:	20000648 	.word	0x20000648

08007b84 <TIM4_IRQHandler>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <TIM4_IRQHandler+0x8>)
 8007b86:	f002 bfd7 	b.w	800ab38 <HAL_TIM_IRQHandler>
 8007b8a:	bf00      	nop
 8007b8c:	20000688 	.word	0x20000688

08007b90 <USART1_IRQHandler>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <USART1_IRQHandler+0x8>)
 8007b92:	f003 ba9f 	b.w	800b0d4 <HAL_UART_IRQHandler>
 8007b96:	bf00      	nop
 8007b98:	20000708 	.word	0x20000708

08007b9c <EXTI15_10_IRQHandler>:
 8007b9c:	b508      	push	{r3, lr}
 8007b9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007ba2:	f001 f923 	bl	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007ba6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007baa:	f001 f91f 	bl	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007bae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007bb2:	f001 f91b 	bl	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007bb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007bba:	f001 f917 	bl	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007bc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007bc6:	f001 b911 	b.w	8008dec <HAL_GPIO_EXTI_IRQHandler>
 8007bca:	bf00      	nop

08007bcc <_getpid>:
 8007bcc:	2001      	movs	r0, #1
 8007bce:	4770      	bx	lr

08007bd0 <_kill>:
 8007bd0:	b508      	push	{r3, lr}
 8007bd2:	f005 fa6b 	bl	800d0ac <__errno>
 8007bd6:	2216      	movs	r2, #22
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f04f 30ff 	mov.w	r0, #4294967295
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	bd08      	pop	{r3, pc}
 8007be2:	bf00      	nop

08007be4 <_exit>:
 8007be4:	b508      	push	{r3, lr}
 8007be6:	f005 fa61 	bl	800d0ac <__errno>
 8007bea:	2316      	movs	r3, #22
 8007bec:	6003      	str	r3, [r0, #0]
 8007bee:	e7fe      	b.n	8007bee <_exit+0xa>

08007bf0 <_read>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	1e16      	subs	r6, r2, #0
 8007bf4:	dd07      	ble.n	8007c06 <_read+0x16>
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	198d      	adds	r5, r1, r6
 8007bfa:	f3af 8000 	nop.w
 8007bfe:	f804 0b01 	strb.w	r0, [r4], #1
 8007c02:	42a5      	cmp	r5, r4
 8007c04:	d1f9      	bne.n	8007bfa <_read+0xa>
 8007c06:	4630      	mov	r0, r6
 8007c08:	bd70      	pop	{r4, r5, r6, pc}
 8007c0a:	bf00      	nop

08007c0c <_write>:
 8007c0c:	b570      	push	{r4, r5, r6, lr}
 8007c0e:	1e16      	subs	r6, r2, #0
 8007c10:	dd07      	ble.n	8007c22 <_write+0x16>
 8007c12:	460c      	mov	r4, r1
 8007c14:	198d      	adds	r5, r1, r6
 8007c16:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c1a:	f3af 8000 	nop.w
 8007c1e:	42ac      	cmp	r4, r5
 8007c20:	d1f9      	bne.n	8007c16 <_write+0xa>
 8007c22:	4630      	mov	r0, r6
 8007c24:	bd70      	pop	{r4, r5, r6, pc}
 8007c26:	bf00      	nop

08007c28 <_close>:
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop

08007c30 <_fstat>:
 8007c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c34:	2000      	movs	r0, #0
 8007c36:	604b      	str	r3, [r1, #4]
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <_isatty>:
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	4770      	bx	lr

08007c40 <_lseek>:
 8007c40:	2000      	movs	r0, #0
 8007c42:	4770      	bx	lr

08007c44 <_sbrk>:
 8007c44:	490d      	ldr	r1, [pc, #52]	; (8007c7c <_sbrk+0x38>)
 8007c46:	4603      	mov	r3, r0
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	4a0d      	ldr	r2, [pc, #52]	; (8007c80 <_sbrk+0x3c>)
 8007c4c:	4c0d      	ldr	r4, [pc, #52]	; (8007c84 <_sbrk+0x40>)
 8007c4e:	6808      	ldr	r0, [r1, #0]
 8007c50:	1b12      	subs	r2, r2, r4
 8007c52:	b120      	cbz	r0, 8007c5e <_sbrk+0x1a>
 8007c54:	4403      	add	r3, r0
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d807      	bhi.n	8007c6a <_sbrk+0x26>
 8007c5a:	600b      	str	r3, [r1, #0]
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	4c0a      	ldr	r4, [pc, #40]	; (8007c88 <_sbrk+0x44>)
 8007c60:	4620      	mov	r0, r4
 8007c62:	4403      	add	r3, r0
 8007c64:	4293      	cmp	r3, r2
 8007c66:	600c      	str	r4, [r1, #0]
 8007c68:	d9f7      	bls.n	8007c5a <_sbrk+0x16>
 8007c6a:	f005 fa1f 	bl	800d0ac <__errno>
 8007c6e:	220c      	movs	r2, #12
 8007c70:	4603      	mov	r3, r0
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000a7c 	.word	0x20000a7c
 8007c80:	20008000 	.word	0x20008000
 8007c84:	00002000 	.word	0x00002000
 8007c88:	20001c10 	.word	0x20001c10

08007c8c <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <Reset_Handler>:
 8007c90:	480c      	ldr	r0, [pc, #48]	; (8007cc4 <LoopFillZerobss+0x12>)
 8007c92:	490d      	ldr	r1, [pc, #52]	; (8007cc8 <LoopFillZerobss+0x16>)
 8007c94:	4a0d      	ldr	r2, [pc, #52]	; (8007ccc <LoopFillZerobss+0x1a>)
 8007c96:	2300      	movs	r3, #0
 8007c98:	e002      	b.n	8007ca0 <LoopCopyDataInit>

08007c9a <CopyDataInit>:
 8007c9a:	58d4      	ldr	r4, [r2, r3]
 8007c9c:	50c4      	str	r4, [r0, r3]
 8007c9e:	3304      	adds	r3, #4

08007ca0 <LoopCopyDataInit>:
 8007ca0:	18c4      	adds	r4, r0, r3
 8007ca2:	428c      	cmp	r4, r1
 8007ca4:	d3f9      	bcc.n	8007c9a <CopyDataInit>
 8007ca6:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <LoopFillZerobss+0x1e>)
 8007ca8:	4c0a      	ldr	r4, [pc, #40]	; (8007cd4 <LoopFillZerobss+0x22>)
 8007caa:	2300      	movs	r3, #0
 8007cac:	e001      	b.n	8007cb2 <LoopFillZerobss>

08007cae <FillZerobss>:
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	3204      	adds	r2, #4

08007cb2 <LoopFillZerobss>:
 8007cb2:	42a2      	cmp	r2, r4
 8007cb4:	d3fb      	bcc.n	8007cae <FillZerobss>
 8007cb6:	f7ff ffe9 	bl	8007c8c <SystemInit>
 8007cba:	f005 f9fd 	bl	800d0b8 <__libc_init_array>
 8007cbe:	f7fa f8bf 	bl	8001e40 <main>
 8007cc2:	4770      	bx	lr
 8007cc4:	20000000 	.word	0x20000000
 8007cc8:	20000374 	.word	0x20000374
 8007ccc:	08011ce4 	.word	0x08011ce4
 8007cd0:	20000374 	.word	0x20000374
 8007cd4:	20001c10 	.word	0x20001c10

08007cd8 <COMP_IRQHandler>:
 8007cd8:	e7fe      	b.n	8007cd8 <COMP_IRQHandler>
	...

08007cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cdc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <HAL_InitTick+0x40>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	b90b      	cbnz	r3, 8007ce8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8007ce4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf0:	490b      	ldr	r1, [pc, #44]	; (8007d20 <HAL_InitTick+0x44>)
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	fbb0 f0f3 	udiv	r0, r0, r3
 8007cfa:	f000 fc95 	bl	8008628 <HAL_SYSTICK_Config>
 8007cfe:	4604      	mov	r4, r0
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d1ef      	bne.n	8007ce4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d04:	2d0f      	cmp	r5, #15
 8007d06:	d8ed      	bhi.n	8007ce4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d08:	4602      	mov	r2, r0
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	f000 fc2a 	bl	8008568 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <HAL_InitTick+0x48>)
 8007d16:	4620      	mov	r0, r4
 8007d18:	601d      	str	r5, [r3, #0]
}
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	20000028 	.word	0x20000028
 8007d20:	20000024 	.word	0x20000024
 8007d24:	2000002c 	.word	0x2000002c

08007d28 <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d28:	2003      	movs	r0, #3
{
 8007d2a:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d2c:	f000 fc0a 	bl	8008544 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d30:	200f      	movs	r0, #15
 8007d32:	f7ff ffd3 	bl	8007cdc <HAL_InitTick>
 8007d36:	b110      	cbz	r0, 8007d3e <HAL_Init+0x16>
    status = HAL_ERROR;
 8007d38:	2401      	movs	r4, #1
}
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	4604      	mov	r4, r0
    HAL_MspInit();
 8007d40:	f7ff fcbe 	bl	80076c0 <HAL_MspInit>
}
 8007d44:	4620      	mov	r0, r4
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007d48:	4a03      	ldr	r2, [pc, #12]	; (8007d58 <HAL_IncTick+0x10>)
 8007d4a:	4904      	ldr	r1, [pc, #16]	; (8007d5c <HAL_IncTick+0x14>)
 8007d4c:	6813      	ldr	r3, [r2, #0]
 8007d4e:	6809      	ldr	r1, [r1, #0]
 8007d50:	440b      	add	r3, r1
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20000a80 	.word	0x20000a80
 8007d5c:	20000028 	.word	0x20000028

08007d60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007d60:	4b01      	ldr	r3, [pc, #4]	; (8007d68 <HAL_GetTick+0x8>)
 8007d62:	6818      	ldr	r0, [r3, #0]
}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000a80 	.word	0x20000a80

08007d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d70:	f7ff fff6 	bl	8007d60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d74:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8007d76:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8007d78:	d002      	beq.n	8007d80 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d7a:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <HAL_Delay+0x20>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d80:	f7ff ffee 	bl	8007d60 <HAL_GetTick>
 8007d84:	1b40      	subs	r0, r0, r5
 8007d86:	42a0      	cmp	r0, r4
 8007d88:	d3fa      	bcc.n	8007d80 <HAL_Delay+0x14>
  {
  }
}
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20000028 	.word	0x20000028

08007d90 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f000 80a9 	beq.w	8007ee8 <HAL_ADC_Init+0x158>
{
 8007d96:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d98:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007d9a:	4604      	mov	r4, r0
{
 8007d9c:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d078      	beq.n	8007e94 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007da2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007da4:	06d8      	lsls	r0, r3, #27
 8007da6:	d453      	bmi.n	8007e50 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007da8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8007daa:	4a5c      	ldr	r2, [pc, #368]	; (8007f1c <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8007dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007db0:	f023 0302 	bic.w	r3, r3, #2
 8007db4:	f043 0302 	orr.w	r3, r3, #2
 8007db8:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8007dba:	6853      	ldr	r3, [r2, #4]
 8007dbc:	6861      	ldr	r1, [r4, #4]
 8007dbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dca:	fa91 f1a1 	rbit	r1, r1
 8007dce:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007dd0:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8007dd4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8007dd8:	fa93 f3a3 	rbit	r3, r3
 8007ddc:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007de0:	6965      	ldr	r5, [r4, #20]
 8007de2:	68e2      	ldr	r2, [r4, #12]
 8007de4:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 8007de8:	432a      	orrs	r2, r5
 8007dea:	6a25      	ldr	r5, [r4, #32]
 8007dec:	fa0c f101 	lsl.w	r1, ip, r1
 8007df0:	432a      	orrs	r2, r5
 8007df2:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8007df6:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007dfa:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8007dfc:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e00:	d002      	beq.n	8007e08 <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8007e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007e04:	4311      	orrs	r1, r2
 8007e06:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8007e08:	6822      	ldr	r2, [r4, #0]
 8007e0a:	6811      	ldr	r1, [r2, #0]
 8007e0c:	0649      	lsls	r1, r1, #25
 8007e0e:	d551      	bpl.n	8007eb4 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007e10:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8007e12:	6890      	ldr	r0, [r2, #8]
 8007e14:	4942      	ldr	r1, [pc, #264]	; (8007f20 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007e16:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8007e1a:	ea01 0100 	and.w	r1, r1, r0
 8007e1e:	ea41 0103 	orr.w	r1, r1, r3
 8007e22:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007e24:	d017      	beq.n	8007e56 <HAL_ADC_Init+0xc6>
 8007e26:	2d01      	cmp	r5, #1
 8007e28:	d015      	beq.n	8007e56 <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8007e2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007e2c:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 8007e30:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8007e32:	6891      	ldr	r1, [r2, #8]
 8007e34:	4a3b      	ldr	r2, [pc, #236]	; (8007f24 <HAL_ADC_Init+0x194>)
 8007e36:	400a      	ands	r2, r1
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d11f      	bne.n	8007e7c <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007e40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007e42:	f023 0303 	bic.w	r3, r3, #3
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8007e4c:	b003      	add	sp, #12
 8007e4e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007e50:	2001      	movs	r0, #1
}
 8007e52:	b003      	add	sp, #12
 8007e54:	bd30      	pop	{r4, r5, pc}
 8007e56:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8007e5a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8007e5c:	fa91 f1a1 	rbit	r1, r1
 8007e60:	fab1 f081 	clz	r0, r1
 8007e64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007e66:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 8007e6a:	3901      	subs	r1, #1
 8007e6c:	4081      	lsls	r1, r0
 8007e6e:	4329      	orrs	r1, r5
 8007e70:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8007e72:	6891      	ldr	r1, [r2, #8]
 8007e74:	4a2b      	ldr	r2, [pc, #172]	; (8007f24 <HAL_ADC_Init+0x194>)
 8007e76:	400a      	ands	r2, r1
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d0df      	beq.n	8007e3c <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 8007e7c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8007e7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007e80:	f023 0312 	bic.w	r3, r3, #18
 8007e84:	f043 0310 	orr.w	r3, r3, #16
 8007e88:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e8c:	4303      	orrs	r3, r0
 8007e8e:	6523      	str	r3, [r4, #80]	; 0x50
}
 8007e90:	b003      	add	sp, #12
 8007e92:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e94:	4a24      	ldr	r2, [pc, #144]	; (8007f28 <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 8007e96:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8007e98:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e9c:	6a13      	ldr	r3, [r2, #32]
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	6213      	str	r3, [r2, #32]
 8007ea4:	6a13      	ldr	r3, [r2, #32]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8007eae:	f7ff fc29 	bl	8007704 <HAL_ADC_MspInit>
 8007eb2:	e776      	b.n	8007da2 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8007eb4:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8007eb6:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8007eb8:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8007eba:	69e1      	ldr	r1, [r4, #28]
 8007ebc:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8007ec0:	6925      	ldr	r5, [r4, #16]
 8007ec2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007ec6:	d00c      	beq.n	8007ee2 <HAL_ADC_Init+0x152>
 8007ec8:	2d01      	cmp	r5, #1
 8007eca:	d00a      	beq.n	8007ee2 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007ecc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8007ed0:	2901      	cmp	r1, #1
 8007ed2:	d00b      	beq.n	8007eec <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8007ed4:	6850      	ldr	r0, [r2, #4]
 8007ed6:	4915      	ldr	r1, [pc, #84]	; (8007f2c <HAL_ADC_Init+0x19c>)
 8007ed8:	4001      	ands	r1, r0
 8007eda:	ea41 010c 	orr.w	r1, r1, ip
 8007ede:	6051      	str	r1, [r2, #4]
 8007ee0:	e797      	b.n	8007e12 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8007ee2:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8007ee6:	e7f1      	b.n	8007ecc <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 8007ee8:	2001      	movs	r0, #1
}
 8007eea:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007eec:	b968      	cbnz	r0, 8007f0a <HAL_ADC_Init+0x17a>
 8007eee:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8007ef2:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007ef6:	fab1 f081 	clz	r0, r1
 8007efa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007efc:	3901      	subs	r1, #1
 8007efe:	4081      	lsls	r1, r0
 8007f00:	ea41 010c 	orr.w	r1, r1, ip
 8007f04:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 8007f08:	e7e4      	b.n	8007ed4 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f0a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007f0c:	f041 0120 	orr.w	r1, r1, #32
 8007f10:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f12:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007f14:	f041 0101 	orr.w	r1, r1, #1
 8007f18:	6521      	str	r1, [r4, #80]	; 0x50
 8007f1a:	e7db      	b.n	8007ed4 <HAL_ADC_Init+0x144>
 8007f1c:	40012700 	.word	0x40012700
 8007f20:	c0fff18d 	.word	0xc0fff18d
 8007f24:	bf80fffe 	.word	0xbf80fffe
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	fcfc16ff 	.word	0xfcfc16ff

08007f30 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d075      	beq.n	8008020 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007f34:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 8007f36:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007f38:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007f3c:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8007f3e:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4604      	mov	r4, r0
 8007f44:	0655      	lsls	r5, r2, #25
 8007f46:	d453      	bmi.n	8007ff0 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8007f48:	f06f 001f 	mvn.w	r0, #31
 8007f4c:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8007f4e:	6858      	ldr	r0, [r3, #4]
 8007f50:	4939      	ldr	r1, [pc, #228]	; (8008038 <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 8007f52:	4a3a      	ldr	r2, [pc, #232]	; (800803c <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 8007f54:	4001      	ands	r1, r0
 8007f56:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 8007f58:	6899      	ldr	r1, [r3, #8]
 8007f5a:	400a      	ands	r2, r1
 8007f5c:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 8007f5e:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 8007f60:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8007f62:	4a37      	ldr	r2, [pc, #220]	; (8008040 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 8007f64:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8007f66:	4837      	ldr	r0, [pc, #220]	; (8008044 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 8007f68:	0d49      	lsrs	r1, r1, #21
 8007f6a:	0549      	lsls	r1, r1, #21
 8007f6c:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 8007f6e:	6919      	ldr	r1, [r3, #16]
 8007f70:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8007f74:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8007f76:	6959      	ldr	r1, [r3, #20]
 8007f78:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8007f7c:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8007f7e:	6999      	ldr	r1, [r3, #24]
 8007f80:	4011      	ands	r1, r2
 8007f82:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8007f84:	69d9      	ldr	r1, [r3, #28]
 8007f86:	4011      	ands	r1, r2
 8007f88:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8007f8a:	6a19      	ldr	r1, [r3, #32]
 8007f8c:	4011      	ands	r1, r2
 8007f8e:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8007f90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f92:	4011      	ands	r1, r2
 8007f94:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8007f96:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007f98:	4011      	ands	r1, r2
 8007f9a:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8007f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f9e:	400a      	ands	r2, r1
 8007fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8007fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007fa4:	4928      	ldr	r1, [pc, #160]	; (8008048 <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8007fa6:	4010      	ands	r0, r2
 8007fa8:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8007faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8007fac:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8007fae:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007fb2:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8007fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8007fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fbe:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8007fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fc6:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8007fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fce:	0d92      	lsrs	r2, r2, #22
 8007fd0:	0592      	lsls	r2, r2, #22
 8007fd2:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8007fd4:	684b      	ldr	r3, [r1, #4]
 8007fd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fda:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8007fdc:	f7ff fbe8 	bl	80077b0 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007fe0:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8007fe2:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8007fe4:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 8007fe6:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	f022 0201 	bic.w	r2, r2, #1
 8007ff6:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007ff8:	f7ff feb2 	bl	8007d60 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007ffc:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007ffe:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	0650      	lsls	r0, r2, #25
 8008004:	d5a0      	bpl.n	8007f48 <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8008006:	f7ff feab 	bl	8007d60 <HAL_GetTick>
 800800a:	1b40      	subs	r0, r0, r5
 800800c:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800800e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8008010:	d902      	bls.n	8008018 <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	0651      	lsls	r1, r2, #25
 8008016:	d405      	bmi.n	8008024 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	0652      	lsls	r2, r2, #25
 800801c:	d4f3      	bmi.n	8008006 <HAL_ADC_DeInit+0xd6>
 800801e:	e793      	b.n	8007f48 <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 8008020:	2001      	movs	r0, #1
}
 8008022:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008024:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008026:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008028:	f043 0310 	orr.w	r3, r3, #16
 800802c:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800802e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008030:	4303      	orrs	r3, r0
 8008032:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 8008034:	e7d8      	b.n	8007fe8 <HAL_ADC_DeInit+0xb8>
 8008036:	bf00      	nop
 8008038:	f83c0000 	.word	0xf83c0000
 800803c:	8080f08c 	.word	0x8080f08c
 8008040:	fffff000 	.word	0xfffff000
 8008044:	fe0f8000 	.word	0xfe0f8000
 8008048:	40012700 	.word	0x40012700

0800804c <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800804c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800804e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008050:	f012 0f50 	tst.w	r2, #80	; 0x50
 8008054:	d126      	bne.n	80080a4 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008058:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800805a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800805e:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008060:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008062:	688a      	ldr	r2, [r1, #8]
 8008064:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008068:	d118      	bne.n	800809c <ADC_DMAConvCplt+0x50>
 800806a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800806e:	b9aa      	cbnz	r2, 800809c <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008070:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008072:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8008076:	d002      	beq.n	800807e <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008078:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800807a:	0550      	lsls	r0, r2, #21
 800807c:	d40e      	bmi.n	800809c <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800807e:	684a      	ldr	r2, [r1, #4]
 8008080:	f022 0220 	bic.w	r2, r2, #32
 8008084:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800808c:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800808e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008090:	04d2      	lsls	r2, r2, #19
 8008092:	d403      	bmi.n	800809c <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff f987 	bl	80073b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80080a2:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80080a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	4718      	bx	r3
 80080aa:	bf00      	nop

080080ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80080ac:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80080ae:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80080b0:	f7ff f970 	bl	8007394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080b4:	bd08      	pop	{r3, pc}
 80080b6:	bf00      	nop

080080b8 <HAL_ADC_ErrorCallback>:
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80080bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80080be:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80080c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80080c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c6:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80080c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80080ca:	f043 0304 	orr.w	r3, r3, #4
 80080ce:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80080d0:	f7ff fff2 	bl	80080b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80080d4:	bd08      	pop	{r3, pc}
 80080d6:	bf00      	nop

080080d8 <HAL_ADC_IRQHandler>:
{
 80080d8:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80080da:	6803      	ldr	r3, [r0, #0]
{
 80080dc:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	0691      	lsls	r1, r2, #26
 80080e2:	d502      	bpl.n	80080ea <HAL_ADC_IRQHandler+0x12>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	0792      	lsls	r2, r2, #30
 80080e8:	d445      	bmi.n	8008176 <HAL_ADC_IRQHandler+0x9e>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	0612      	lsls	r2, r2, #24
 80080ee:	d502      	bpl.n	80080f6 <HAL_ADC_IRQHandler+0x1e>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	0755      	lsls	r5, r2, #29
 80080f4:	d40c      	bmi.n	8008110 <HAL_ADC_IRQHandler+0x38>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	0655      	lsls	r5, r2, #25
 80080fa:	d502      	bpl.n	8008102 <HAL_ADC_IRQHandler+0x2a>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	07d0      	lsls	r0, r2, #31
 8008100:	d46f      	bmi.n	80081e2 <HAL_ADC_IRQHandler+0x10a>
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	0151      	lsls	r1, r2, #5
 8008106:	d502      	bpl.n	800810e <HAL_ADC_IRQHandler+0x36>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	0692      	lsls	r2, r2, #26
 800810c:	d45c      	bmi.n	80081c8 <HAL_ADC_IRQHandler+0xf0>
}
 800810e:	bd38      	pop	{r3, r4, r5, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008110:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008112:	06d0      	lsls	r0, r2, #27
 8008114:	d403      	bmi.n	800811e <HAL_ADC_IRQHandler+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008116:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800811c:	64e2      	str	r2, [r4, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008124:	d11f      	bne.n	8008166 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8008128:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800812c:	d002      	beq.n	8008134 <HAL_ADC_IRQHandler+0x5c>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800812e:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8008130:	0551      	lsls	r1, r2, #21
 8008132:	d418      	bmi.n	8008166 <HAL_ADC_IRQHandler+0x8e>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008134:	685a      	ldr	r2, [r3, #4]
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8008136:	0552      	lsls	r2, r2, #21
 8008138:	d415      	bmi.n	8008166 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800813a:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800813c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008140:	d111      	bne.n	8008166 <HAL_ADC_IRQHandler+0x8e>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8008142:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008146:	b972      	cbnz	r2, 8008166 <HAL_ADC_IRQHandler+0x8e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800814e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8008150:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008156:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008158:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800815a:	05db      	lsls	r3, r3, #23
 800815c:	d403      	bmi.n	8008166 <HAL_ADC_IRQHandler+0x8e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800815e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008160:	f043 0301 	orr.w	r3, r3, #1
 8008164:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f9ea 	bl	8008540 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800816c:	f06f 020c 	mvn.w	r2, #12
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	e7bf      	b.n	80080f6 <HAL_ADC_IRQHandler+0x1e>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008176:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008178:	06d5      	lsls	r5, r2, #27
 800817a:	d403      	bmi.n	8008184 <HAL_ADC_IRQHandler+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800817c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800817e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008182:	64c2      	str	r2, [r0, #76]	; 0x4c
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800818a:	d115      	bne.n	80081b8 <HAL_ADC_IRQHandler+0xe0>
 800818c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008190:	b992      	cbnz	r2, 80081b8 <HAL_ADC_IRQHandler+0xe0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008194:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8008198:	d12f      	bne.n	80081fa <HAL_ADC_IRQHandler+0x122>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	f022 0220 	bic.w	r2, r2, #32
 80081a0:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80081a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80081a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a8:	64e3      	str	r3, [r4, #76]	; 0x4c
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80081ac:	04d9      	lsls	r1, r3, #19
 80081ae:	d403      	bmi.n	80081b8 <HAL_ADC_IRQHandler+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80081b2:	f043 0301 	orr.w	r3, r3, #1
 80081b6:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_ConvCpltCallback(hadc);
 80081b8:	4620      	mov	r0, r4
 80081ba:	f7ff f8f9 	bl	80073b0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80081be:	f06f 0212 	mvn.w	r2, #18
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	e790      	b.n	80080ea <HAL_ADC_IRQHandler+0x12>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081c8:	f06f 0520 	mvn.w	r5, #32
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
      HAL_ADC_ErrorCallback(hadc);
 80081ce:	4620      	mov	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081d0:	f042 0202 	orr.w	r2, r2, #2
 80081d4:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081d6:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80081d8:	f7ff ff6e 	bl	80080b8 <HAL_ADC_ErrorCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	601d      	str	r5, [r3, #0]
}
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081e4:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ea:	64e3      	str	r3, [r4, #76]	; 0x4c
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081ec:	f7ff f8ee 	bl	80073cc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80081f0:	f06f 0201 	mvn.w	r2, #1
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e783      	b.n	8008102 <HAL_ADC_IRQHandler+0x2a>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80081fa:	689a      	ldr	r2, [r3, #8]
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80081fc:	0550      	lsls	r0, r2, #21
 80081fe:	d4db      	bmi.n	80081b8 <HAL_ADC_IRQHandler+0xe0>
 8008200:	e7cb      	b.n	800819a <HAL_ADC_IRQHandler+0xc2>
 8008202:	bf00      	nop

08008204 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8008204:	2300      	movs	r3, #0
{
 8008206:	b530      	push	{r4, r5, lr}
 8008208:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800820a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800820c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8008210:	2b01      	cmp	r3, #1
 8008212:	f000 80aa 	beq.w	800836a <HAL_ADC_ConfigChannel+0x166>
 8008216:	2301      	movs	r3, #1
 8008218:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 800821c:	684b      	ldr	r3, [r1, #4]
 800821e:	4602      	mov	r2, r0
 8008220:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8008222:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8008224:	d924      	bls.n	8008270 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d866      	bhi.n	80082f8 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 800822a:	f04f 0c1f 	mov.w	ip, #31
 800822e:	680c      	ldr	r4, [r1, #0]
 8008230:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008234:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8008236:	3b23      	subs	r3, #35	; 0x23
 8008238:	fa04 fe03 	lsl.w	lr, r4, r3
 800823c:	fa0c f303 	lsl.w	r3, ip, r3
 8008240:	ea25 0303 	bic.w	r3, r5, r3
 8008244:	ea43 030e 	orr.w	r3, r3, lr
 8008248:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 800824a:	2c09      	cmp	r4, #9
 800824c:	d822      	bhi.n	8008294 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 800824e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8008252:	2407      	movs	r4, #7
 8008254:	6943      	ldr	r3, [r0, #20]
 8008256:	6889      	ldr	r1, [r1, #8]
 8008258:	40ac      	lsls	r4, r5
 800825a:	40a9      	lsls	r1, r5
 800825c:	ea23 0404 	bic.w	r4, r3, r4
 8008260:	430c      	orrs	r4, r1
 8008262:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8008264:	2300      	movs	r3, #0
  return tmp_hal_status;
 8008266:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8008268:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 800826c:	b003      	add	sp, #12
 800826e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 8008270:	f04f 0c1f 	mov.w	ip, #31
 8008274:	680c      	ldr	r4, [r1, #0]
 8008276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800827a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800827c:	3b05      	subs	r3, #5
 800827e:	fa04 fe03 	lsl.w	lr, r4, r3
 8008282:	fa0c f303 	lsl.w	r3, ip, r3
 8008286:	ea25 0303 	bic.w	r3, r5, r3
 800828a:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 800828e:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8008290:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8008292:	d9dc      	bls.n	800824e <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8008294:	2c13      	cmp	r4, #19
 8008296:	d844      	bhi.n	8008322 <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8008298:	f04f 0c07 	mov.w	ip, #7
 800829c:	688d      	ldr	r5, [r1, #8]
 800829e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80082a2:	6903      	ldr	r3, [r0, #16]
 80082a4:	391e      	subs	r1, #30
 80082a6:	408d      	lsls	r5, r1
 80082a8:	fa0c f101 	lsl.w	r1, ip, r1
 80082ac:	ea23 0301 	bic.w	r3, r3, r1
 80082b0:	432b      	orrs	r3, r5
 80082b2:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80082b4:	f1a4 0310 	sub.w	r3, r4, #16
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d8d3      	bhi.n	8008264 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80082bc:	4b34      	ldr	r3, [pc, #208]	; (8008390 <HAL_ADC_ConfigChannel+0x18c>)
 80082be:	6859      	ldr	r1, [r3, #4]
 80082c0:	0209      	lsls	r1, r1, #8
 80082c2:	d4cf      	bmi.n	8008264 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80082c4:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80082c6:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80082c8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80082cc:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80082ce:	d1c9      	bne.n	8008264 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80082d0:	4b30      	ldr	r3, [pc, #192]	; (8008394 <HAL_ADC_ConfigChannel+0x190>)
 80082d2:	4931      	ldr	r1, [pc, #196]	; (8008398 <HAL_ADC_ConfigChannel+0x194>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	fba1 1303 	umull	r1, r3, r1, r3
 80082da:	0c9b      	lsrs	r3, r3, #18
 80082dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80082e4:	9b01      	ldr	r3, [sp, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0bc      	beq.n	8008264 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80082ea:	9b01      	ldr	r3, [sp, #4]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80082f0:	9b01      	ldr	r3, [sp, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f9      	bne.n	80082ea <HAL_ADC_ConfigChannel+0xe6>
 80082f6:	e7b5      	b.n	8008264 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 80082f8:	2b12      	cmp	r3, #18
 80082fa:	d925      	bls.n	8008348 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 80082fc:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 80082fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8008302:	d835      	bhi.n	8008370 <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8008304:	f04f 0c1f 	mov.w	ip, #31
 8008308:	680c      	ldr	r4, [r1, #0]
 800830a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800830c:	3b5f      	subs	r3, #95	; 0x5f
 800830e:	fa04 fe03 	lsl.w	lr, r4, r3
 8008312:	fa0c f303 	lsl.w	r3, ip, r3
 8008316:	ea25 0303 	bic.w	r3, r5, r3
 800831a:	ea43 030e 	orr.w	r3, r3, lr
 800831e:	6343      	str	r3, [r0, #52]	; 0x34
 8008320:	e793      	b.n	800824a <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8008322:	2c1a      	cmp	r4, #26
 8008324:	d80d      	bhi.n	8008342 <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8008326:	2507      	movs	r5, #7
 8008328:	6889      	ldr	r1, [r1, #8]
 800832a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800832e:	68c3      	ldr	r3, [r0, #12]
 8008330:	3c3c      	subs	r4, #60	; 0x3c
 8008332:	40a1      	lsls	r1, r4
 8008334:	fa05 f404 	lsl.w	r4, r5, r4
 8008338:	ea23 0304 	bic.w	r3, r3, r4
 800833c:	430b      	orrs	r3, r1
 800833e:	60c3      	str	r3, [r0, #12]
 8008340:	e790      	b.n	8008264 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8008342:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008344:	680c      	ldr	r4, [r1, #0]
 8008346:	e7b5      	b.n	80082b4 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8008348:	f04f 0c1f 	mov.w	ip, #31
 800834c:	680c      	ldr	r4, [r1, #0]
 800834e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008352:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008354:	3b41      	subs	r3, #65	; 0x41
 8008356:	fa04 fe03 	lsl.w	lr, r4, r3
 800835a:	fa0c f303 	lsl.w	r3, ip, r3
 800835e:	ea25 0303 	bic.w	r3, r5, r3
 8008362:	ea43 030e 	orr.w	r3, r3, lr
 8008366:	6383      	str	r3, [r0, #56]	; 0x38
 8008368:	e76f      	b.n	800824a <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 800836a:	2002      	movs	r0, #2
}
 800836c:	b003      	add	sp, #12
 800836e:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8008370:	f04f 0c1f 	mov.w	ip, #31
 8008374:	680c      	ldr	r4, [r1, #0]
 8008376:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8008378:	3b7d      	subs	r3, #125	; 0x7d
 800837a:	fa04 fe03 	lsl.w	lr, r4, r3
 800837e:	fa0c f303 	lsl.w	r3, ip, r3
 8008382:	ea25 0303 	bic.w	r3, r5, r3
 8008386:	ea43 030e 	orr.w	r3, r3, lr
 800838a:	6303      	str	r3, [r0, #48]	; 0x30
 800838c:	e75d      	b.n	800824a <HAL_ADC_ConfigChannel+0x46>
 800838e:	bf00      	nop
 8008390:	40012700 	.word	0x40012700
 8008394:	20000024 	.word	0x20000024
 8008398:	431bde83 	.word	0x431bde83

0800839c <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 800839c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80083a0:	680a      	ldr	r2, [r1, #0]
  __HAL_LOCK(hadc);
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d024      	beq.n	80083f0 <HAL_ADC_AnalogWDGConfig+0x54>
 80083a6:	2301      	movs	r3, #1
{
 80083a8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80083aa:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if(AnalogWDGConfig->ITMode == ENABLE)
 80083ae:	7a0b      	ldrb	r3, [r1, #8]
 80083b0:	4686      	mov	lr, r0
 80083b2:	2b01      	cmp	r3, #1
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80083b4:	6803      	ldr	r3, [r0, #0]
  if(AnalogWDGConfig->ITMode == ENABLE)
 80083b6:	d016      	beq.n	80083e6 <HAL_ADC_AnalogWDGConfig+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80083b8:	685c      	ldr	r4, [r3, #4]
 80083ba:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80083be:	605c      	str	r4, [r3, #4]
  __HAL_UNLOCK(hadc);
 80083c0:	f04f 0c00 	mov.w	ip, #0
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 80083c4:	6858      	ldr	r0, [r3, #4]
 80083c6:	4c0b      	ldr	r4, [pc, #44]	; (80083f4 <HAL_ADC_AnalogWDGConfig+0x58>)
 80083c8:	4004      	ands	r4, r0
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 80083ca:	6848      	ldr	r0, [r1, #4]
  hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
 80083cc:	605c      	str	r4, [r3, #4]
  hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
 80083ce:	4302      	orrs	r2, r0
 80083d0:	6858      	ldr	r0, [r3, #4]
 80083d2:	4302      	orrs	r2, r0
 80083d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80083d6:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80083da:	6298      	str	r0, [r3, #40]	; 0x28
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80083dc:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hadc);
 80083de:	f88e c048 	strb.w	ip, [lr, #72]	; 0x48
  return HAL_OK;
 80083e2:	4660      	mov	r0, ip
}
 80083e4:	bd10      	pop	{r4, pc}
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80083e6:	6858      	ldr	r0, [r3, #4]
 80083e8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80083ec:	6058      	str	r0, [r3, #4]
 80083ee:	e7e7      	b.n	80083c0 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 80083f0:	2002      	movs	r0, #2
}
 80083f2:	4770      	bx	lr
 80083f4:	ff3ffde0 	.word	0xff3ffde0

080083f8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 80083f8:	2300      	movs	r3, #0
{
 80083fa:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80083fc:	6802      	ldr	r2, [r0, #0]
{
 80083fe:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8008400:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	0659      	lsls	r1, r3, #25
 8008406:	d429      	bmi.n	800845c <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008408:	4b1c      	ldr	r3, [pc, #112]	; (800847c <ADC_Enable+0x84>)
 800840a:	4604      	mov	r4, r0
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	481c      	ldr	r0, [pc, #112]	; (8008480 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8008410:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008412:	fba0 0303 	umull	r0, r3, r0, r3
 8008416:	0c9b      	lsrs	r3, r3, #18
 8008418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 800841c:	f041 0101 	orr.w	r1, r1, #1
 8008420:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008422:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8008424:	9b01      	ldr	r3, [sp, #4]
 8008426:	b12b      	cbz	r3, 8008434 <ADC_Enable+0x3c>
      wait_loop_index--;
 8008428:	9b01      	ldr	r3, [sp, #4]
 800842a:	3b01      	subs	r3, #1
 800842c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f9      	bne.n	8008428 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8008434:	f7ff fc94 	bl	8007d60 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008438:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 800843a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	065a      	lsls	r2, r3, #25
 8008440:	d40c      	bmi.n	800845c <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8008442:	f7ff fc8d 	bl	8007d60 <HAL_GetTick>
 8008446:	1b43      	subs	r3, r0, r5
 8008448:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800844a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800844c:	d903      	bls.n	8008456 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8008454:	d005      	beq.n	8008462 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	065b      	lsls	r3, r3, #25
 800845a:	d5f2      	bpl.n	8008442 <ADC_Enable+0x4a>
  return HAL_OK;
 800845c:	2000      	movs	r0, #0
}
 800845e:	b003      	add	sp, #12
 8008460:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8008462:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008464:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8008466:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800846a:	f043 0310 	orr.w	r3, r3, #16
 800846e:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008470:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008472:	4303      	orrs	r3, r0
 8008474:	6523      	str	r3, [r4, #80]	; 0x50
}
 8008476:	b003      	add	sp, #12
 8008478:	bd30      	pop	{r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	20000024 	.word	0x20000024
 8008480:	431bde83 	.word	0x431bde83

08008484 <HAL_ADC_Start_DMA>:
{
 8008484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8008488:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 800848c:	2d01      	cmp	r5, #1
 800848e:	d04c      	beq.n	800852a <HAL_ADC_Start_DMA+0xa6>
 8008490:	2301      	movs	r3, #1
 8008492:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8008496:	4604      	mov	r4, r0
 8008498:	4688      	mov	r8, r1
 800849a:	4617      	mov	r7, r2
 800849c:	f7ff ffac 	bl	80083f8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80084a0:	4605      	mov	r5, r0
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d13e      	bne.n	8008524 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 80084a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084a8:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80084aa:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80084ae:	f020 0001 	bic.w	r0, r0, #1
 80084b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80084b6:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084b8:	6873      	ldr	r3, [r6, #4]
 80084ba:	055b      	lsls	r3, r3, #21
 80084bc:	d505      	bpl.n	80084ca <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80084be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80084c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80084c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084c8:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 80084ca:	2100      	movs	r1, #0
 80084cc:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80084d0:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80084d8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80084dc:	bf18      	it	ne
 80084de:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084e0:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80084e2:	bf18      	it	ne
 80084e4:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80084e8:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80084ea:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80084ec:	4f11      	ldr	r7, [pc, #68]	; (8008534 <HAL_ADC_Start_DMA+0xb0>)
 80084ee:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80084f0:	4f11      	ldr	r7, [pc, #68]	; (8008538 <HAL_ADC_Start_DMA+0xb4>)
 80084f2:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80084f4:	4f11      	ldr	r7, [pc, #68]	; (800853c <HAL_ADC_Start_DMA+0xb8>)
 80084f6:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80084f8:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80084fa:	6871      	ldr	r1, [r6, #4]
 80084fc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008500:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008502:	68b1      	ldr	r1, [r6, #8]
 8008504:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008508:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800850a:	f106 0158 	add.w	r1, r6, #88	; 0x58
 800850e:	f000 f98f 	bl	8008830 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800851a:	d103      	bne.n	8008524 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800851c:	689a      	ldr	r2, [r3, #8]
 800851e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008522:	609a      	str	r2, [r3, #8]
}
 8008524:	4628      	mov	r0, r5
 8008526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 800852a:	2502      	movs	r5, #2
}
 800852c:	4628      	mov	r0, r5
 800852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008532:	bf00      	nop
 8008534:	0800804d 	.word	0x0800804d
 8008538:	080080ad 	.word	0x080080ad
 800853c:	080080bd 	.word	0x080080bd

08008540 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop

08008544 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008544:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008548:	4906      	ldr	r1, [pc, #24]	; (8008564 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800854a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800854c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800854e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008552:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800855c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008560:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008562:	4770      	bx	lr
 8008564:	e000ed00 	.word	0xe000ed00

08008568 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008568:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800856a:	b500      	push	{lr}
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008572:	f1c3 0e07 	rsb	lr, r3, #7
 8008576:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800857a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800857e:	bf28      	it	cs
 8008580:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008584:	f1bc 0f06 	cmp.w	ip, #6
 8008588:	d91b      	bls.n	80085c2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800858a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800858e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008590:	fa0c fc03 	lsl.w	ip, ip, r3
 8008594:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008598:	f04f 3cff 	mov.w	ip, #4294967295
 800859c:	fa0c fc0e 	lsl.w	ip, ip, lr
 80085a0:	ea21 010c 	bic.w	r1, r1, ip
 80085a4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80085a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085a8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80085ac:	db0c      	blt.n	80085c8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085ae:	0109      	lsls	r1, r1, #4
 80085b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80085b4:	b2c9      	uxtb	r1, r1
 80085b6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80085ba:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80085be:	f85d fb04 	ldr.w	pc, [sp], #4
 80085c2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085c4:	4613      	mov	r3, r2
 80085c6:	e7e7      	b.n	8008598 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <HAL_NVIC_SetPriority+0x78>)
 80085ca:	f000 000f 	and.w	r0, r0, #15
 80085ce:	0109      	lsls	r1, r1, #4
 80085d0:	b2c9      	uxtb	r1, r1
 80085d2:	4403      	add	r3, r0
 80085d4:	7619      	strb	r1, [r3, #24]
 80085d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80085da:	bf00      	nop
 80085dc:	e000ed00 	.word	0xe000ed00
 80085e0:	e000ecfc 	.word	0xe000ecfc

080085e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80085e4:	2800      	cmp	r0, #0
 80085e6:	db07      	blt.n	80085f8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085e8:	2301      	movs	r3, #1
 80085ea:	f000 011f 	and.w	r1, r0, #31
 80085ee:	4a03      	ldr	r2, [pc, #12]	; (80085fc <HAL_NVIC_EnableIRQ+0x18>)
 80085f0:	0940      	lsrs	r0, r0, #5
 80085f2:	408b      	lsls	r3, r1
 80085f4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	e000e100 	.word	0xe000e100

08008600 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008600:	2800      	cmp	r0, #0
 8008602:	db0d      	blt.n	8008620 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008604:	2201      	movs	r2, #1
 8008606:	4907      	ldr	r1, [pc, #28]	; (8008624 <HAL_NVIC_DisableIRQ+0x24>)
 8008608:	0943      	lsrs	r3, r0, #5
 800860a:	f000 001f 	and.w	r0, r0, #31
 800860e:	3320      	adds	r3, #32
 8008610:	fa02 f000 	lsl.w	r0, r2, r0
 8008614:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800861c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	e000e100 	.word	0xe000e100

08008628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008628:	3801      	subs	r0, #1
 800862a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800862e:	d20f      	bcs.n	8008650 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008630:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008634:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008638:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800863a:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800863c:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800863e:	4c05      	ldr	r4, [pc, #20]	; (8008654 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008640:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008642:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008646:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008648:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800864a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800864c:	6119      	str	r1, [r3, #16]
 800864e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008650:	2001      	movs	r0, #1
 8008652:	4770      	bx	lr
 8008654:	e000ed00 	.word	0xe000ed00

08008658 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008658:	b188      	cbz	r0, 800867e <HAL_DAC_Init+0x26>
{
 800865a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800865c:	7903      	ldrb	r3, [r0, #4]
 800865e:	4604      	mov	r4, r0
 8008660:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008664:	b13b      	cbz	r3, 8008676 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008666:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008668:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800866a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800866c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800866e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008670:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008672:	4618      	mov	r0, r3
}
 8008674:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8008676:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8008678:	f7ff f8b8 	bl	80077ec <HAL_DAC_MspInit>
 800867c:	e7f3      	b.n	8008666 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800867e:	2001      	movs	r0, #1
}
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop

08008684 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008684:	7942      	ldrb	r2, [r0, #5]
 8008686:	2a01      	cmp	r2, #1
 8008688:	d02a      	beq.n	80086e0 <HAL_DAC_Start+0x5c>
{
 800868a:	b410      	push	{r4}
 800868c:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800868e:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008690:	2201      	movs	r2, #1
 8008692:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008694:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8008696:	6804      	ldr	r4, [r0, #0]
 8008698:	f001 0c10 	and.w	ip, r1, #16
 800869c:	fa02 f20c 	lsl.w	r2, r2, ip
 80086a0:	4322      	orrs	r2, r4
 80086a2:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 80086a4:	b979      	cbnz	r1, 80086c6 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80086a6:	6802      	ldr	r2, [r0, #0]
 80086a8:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80086ac:	2a3c      	cmp	r2, #60	; 0x3c
 80086ae:	d103      	bne.n	80086b8 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80086b0:	6842      	ldr	r2, [r0, #4]
 80086b2:	f042 0201 	orr.w	r2, r2, #1
 80086b6:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80086b8:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80086ba:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 80086bc:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 80086be:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80086c0:	4610      	mov	r0, r2
}
 80086c2:	bc10      	pop	{r4}
 80086c4:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80086c6:	223c      	movs	r2, #60	; 0x3c
 80086c8:	6801      	ldr	r1, [r0, #0]
 80086ca:	fa02 fc0c 	lsl.w	ip, r2, ip
 80086ce:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 80086d2:	4561      	cmp	r1, ip
 80086d4:	d1f0      	bne.n	80086b8 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80086d6:	6842      	ldr	r2, [r0, #4]
 80086d8:	f042 0202 	orr.w	r2, r2, #2
 80086dc:	6042      	str	r2, [r0, #4]
 80086de:	e7eb      	b.n	80086b8 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80086e0:	2002      	movs	r0, #2
}
 80086e2:	4770      	bx	lr

080086e4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80086e4:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 80086e6:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80086e8:	6800      	ldr	r0, [r0, #0]
{
 80086ea:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80086ec:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 80086ee:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80086f0:	b949      	cbnz	r1, 8008706 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80086f2:	9901      	ldr	r1, [sp, #4]
 80086f4:	3108      	adds	r1, #8
 80086f6:	440a      	add	r2, r1
 80086f8:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 80086fa:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80086fc:	9a01      	ldr	r2, [sp, #4]
 80086fe:	6013      	str	r3, [r2, #0]
}
 8008700:	b003      	add	sp, #12
 8008702:	bc10      	pop	{r4}
 8008704:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008706:	9901      	ldr	r1, [sp, #4]
 8008708:	3114      	adds	r1, #20
 800870a:	440a      	add	r2, r1
 800870c:	9201      	str	r2, [sp, #4]
 800870e:	e7f4      	b.n	80086fa <HAL_DAC_SetValue+0x16>

08008710 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008710:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008712:	7940      	ldrb	r0, [r0, #5]
 8008714:	2801      	cmp	r0, #1
 8008716:	d022      	beq.n	800875e <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008718:	2002      	movs	r0, #2
{
 800871a:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800871c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008720:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008724:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8008728:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800872a:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 800872c:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800872e:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008732:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008736:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008738:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800873a:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800873e:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8008742:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8008744:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008746:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800874a:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 800874c:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	ea22 020c 	bic.w	r2, r2, ip
 8008754:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008756:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8008758:	f883 e005 	strb.w	lr, [r3, #5]
}
 800875c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 800875e:	2002      	movs	r0, #2
}
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop

08008764 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008764:	b370      	cbz	r0, 80087c4 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008766:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008768:	2202      	movs	r2, #2
{
 800876a:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800876c:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008770:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008772:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8008774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8008778:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800877a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800877c:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8008780:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8008784:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008786:	4910      	ldr	r1, [pc, #64]	; (80087c8 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008788:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800878a:	4d10      	ldr	r5, [pc, #64]	; (80087cc <HAL_DMA_Init+0x68>)
 800878c:	4401      	add	r1, r0
 800878e:	fba5 5101 	umull	r5, r1, r5, r1
 8008792:	0909      	lsrs	r1, r1, #4
 8008794:	0089      	lsls	r1, r1, #2
 8008796:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008798:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800879a:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800879e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087a0:	6959      	ldr	r1, [r3, #20]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	6999      	ldr	r1, [r3, #24]
 80087a6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80087a8:	69d9      	ldr	r1, [r3, #28]
 80087aa:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 80087ac:	4908      	ldr	r1, [pc, #32]	; (80087d0 <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 80087ae:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 80087b2:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80087b4:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087b6:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80087b8:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80087bc:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 80087c0:	4620      	mov	r0, r4
}
 80087c2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80087c4:	2001      	movs	r0, #1
}
 80087c6:	4770      	bx	lr
 80087c8:	bffd9ff8 	.word	0xbffd9ff8
 80087cc:	cccccccd 	.word	0xcccccccd
 80087d0:	40026000 	.word	0x40026000

080087d4 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80087d4:	b320      	cbz	r0, 8008820 <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80087d6:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80087d8:	2101      	movs	r1, #1
{
 80087da:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 80087dc:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80087de:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80087e0:	4810      	ldr	r0, [pc, #64]	; (8008824 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 80087e2:	682a      	ldr	r2, [r5, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80087ea:	4a0f      	ldr	r2, [pc, #60]	; (8008828 <HAL_DMA_DeInit+0x54>)
 80087ec:	442a      	add	r2, r5
 80087ee:	fba0 0202 	umull	r0, r2, r0, r2
 80087f2:	0912      	lsrs	r2, r2, #4
 80087f4:	0092      	lsls	r2, r2, #2
 80087f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80087f8:	f002 021c 	and.w	r2, r2, #28
 80087fc:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8008800:	490a      	ldr	r1, [pc, #40]	; (800882c <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8008802:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8008804:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8008806:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008808:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800880a:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 800880c:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 8008810:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8008814:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8008818:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 800881c:	bc30      	pop	{r4, r5}
 800881e:	4770      	bx	lr
    return HAL_ERROR;
 8008820:	2001      	movs	r0, #1
}
 8008822:	4770      	bx	lr
 8008824:	cccccccd 	.word	0xcccccccd
 8008828:	bffd9ff8 	.word	0xbffd9ff8
 800882c:	40026000 	.word	0x40026000

08008830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008830:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008832:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008836:	2801      	cmp	r0, #1
 8008838:	d042      	beq.n	80088c0 <HAL_DMA_Start_IT+0x90>
{
 800883a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 800883c:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800883e:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 8008842:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8008846:	42a0      	cmp	r0, r4
 8008848:	fa5f fe80 	uxtb.w	lr, r0
 800884c:	d004      	beq.n	8008858 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800884e:	2300      	movs	r3, #0
 8008850:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008854:	2002      	movs	r0, #2
  }
  return status;
}
 8008856:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008858:	2002      	movs	r0, #2
 800885a:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800885e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8008860:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008864:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8008868:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800886a:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800886e:	f025 0501 	bic.w	r5, r5, #1
 8008872:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008874:	f000 001c 	and.w	r0, r0, #28
 8008878:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 800887c:	fa0e f000 	lsl.w	r0, lr, r0
 8008880:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008882:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008884:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008888:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800888a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800888e:	bf0b      	itete	eq
 8008890:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8008892:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8008894:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8008896:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8008898:	b14b      	cbz	r3, 80088ae <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	f043 030e 	orr.w	r3, r3, #14
 80088a0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80088a2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088a4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80088a6:	f043 0301 	orr.w	r3, r3, #1
 80088aa:	6023      	str	r3, [r4, #0]
}
 80088ac:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f023 0304 	bic.w	r3, r3, #4
 80088b4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	f043 030a 	orr.w	r3, r3, #10
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	e7f0      	b.n	80088a2 <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 80088c0:	2002      	movs	r0, #2
}
 80088c2:	4770      	bx	lr

080088c4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088c4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80088c8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088ca:	2a02      	cmp	r2, #2
 80088cc:	d006      	beq.n	80088dc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088ce:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80088d0:	2200      	movs	r2, #0
    return HAL_ERROR;
 80088d2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088d4:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80088d6:	f883 2020 	strb.w	r2, [r3, #32]
}
 80088da:	4770      	bx	lr
{
 80088dc:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80088de:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 80088e2:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088e6:	6802      	ldr	r2, [r0, #0]
 80088e8:	6811      	ldr	r1, [r2, #0]
 80088ea:	f021 010e 	bic.w	r1, r1, #14
 80088ee:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80088f0:	6811      	ldr	r1, [r2, #0]
 80088f2:	f021 0101 	bic.w	r1, r1, #1
 80088f6:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80088f8:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 80088fc:	f002 021c 	and.w	r2, r2, #28
 8008900:	fa0e f202 	lsl.w	r2, lr, r2
 8008904:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008906:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800890a:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 800890e:	4660      	mov	r0, ip
}
 8008910:	f85d fb04 	ldr.w	pc, [sp], #4

08008914 <HAL_DMA_Abort_IT>:
{
 8008914:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008916:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800891a:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800891c:	2a02      	cmp	r2, #2
 800891e:	d003      	beq.n	8008928 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008920:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8008922:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008924:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008926:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008928:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800892a:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800892e:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008930:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008932:	f024 040e 	bic.w	r4, r4, #14
 8008936:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8008938:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 800893a:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800893c:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 8008940:	f025 0501 	bic.w	r5, r5, #1
 8008944:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008946:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8008948:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800894a:	fa0c f202 	lsl.w	r2, ip, r2
 800894e:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008950:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8008954:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008958:	b111      	cbz	r1, 8008960 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 800895a:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 800895c:	4620      	mov	r0, r4
}
 800895e:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8008960:	4608      	mov	r0, r1
}
 8008962:	bd38      	pop	{r3, r4, r5, pc}

08008964 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008964:	2204      	movs	r2, #4
{
 8008966:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008968:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800896a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800896c:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008970:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008972:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008974:	409a      	lsls	r2, r3
 8008976:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8008978:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800897a:	d00e      	beq.n	800899a <HAL_DMA_IRQHandler+0x36>
 800897c:	f014 0f04 	tst.w	r4, #4
 8008980:	d00b      	beq.n	800899a <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	069b      	lsls	r3, r3, #26
 8008986:	d403      	bmi.n	8008990 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	f023 0304 	bic.w	r3, r3, #4
 800898e:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8008990:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008992:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8008994:	b1cb      	cbz	r3, 80089ca <HAL_DMA_IRQHandler+0x66>
}
 8008996:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8008998:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800899a:	2202      	movs	r2, #2
 800899c:	409a      	lsls	r2, r3
 800899e:	420a      	tst	r2, r1
 80089a0:	d015      	beq.n	80089ce <HAL_DMA_IRQHandler+0x6a>
 80089a2:	f014 0f02 	tst.w	r4, #2
 80089a6:	d012      	beq.n	80089ce <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	0699      	lsls	r1, r3, #26
 80089ac:	d406      	bmi.n	80089bc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	f023 030a 	bic.w	r3, r3, #10
 80089b4:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80089bc:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 80089be:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80089c0:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80089c2:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e5      	bne.n	8008996 <HAL_DMA_IRQHandler+0x32>
}
 80089ca:	bc70      	pop	{r4, r5, r6}
 80089cc:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80089ce:	2208      	movs	r2, #8
 80089d0:	409a      	lsls	r2, r3
 80089d2:	420a      	tst	r2, r1
 80089d4:	d0f9      	beq.n	80089ca <HAL_DMA_IRQHandler+0x66>
 80089d6:	0722      	lsls	r2, r4, #28
 80089d8:	d5f7      	bpl.n	80089ca <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089da:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 80089dc:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089de:	f022 020e 	bic.w	r2, r2, #14
 80089e2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80089e4:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80089e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80089ee:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80089f0:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 80089f4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d0e6      	beq.n	80089ca <HAL_DMA_IRQHandler+0x66>
}
 80089fc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80089fe:	4708      	bx	r1

08008a00 <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d041      	beq.n	8008a88 <HAL_EXTI_SetConfigLine+0x88>
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d03f      	beq.n	8008a88 <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8008a08:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8008a0c:	680b      	ldr	r3, [r1, #0]
{
 8008a0e:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8008a10:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8008a14:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008a16:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8008a18:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8008a1c:	d519      	bpl.n	8008a52 <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 8008a1e:	4d25      	ldr	r5, [pc, #148]	; (8008ab4 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008a20:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 8008a22:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8008a24:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8008a28:	bf14      	ite	ne
 8008a2a:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8008a2e:	ea24 040c 	biceq.w	r4, r4, ip
 8008a32:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8008a34:	4c1f      	ldr	r4, [pc, #124]	; (8008ab4 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8008a36:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8008a3a:	68e0      	ldr	r0, [r4, #12]
 8008a3c:	bf14      	ite	ne
 8008a3e:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8008a42:	ea20 000c 	biceq.w	r0, r0, ip
 8008a46:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8008a48:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8008a4c:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 8008a50:	d01c      	beq.n	8008a8c <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 8008a52:	4a18      	ldr	r2, [pc, #96]	; (8008ab4 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008a54:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8008a56:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8008a58:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8008a5a:	bf4c      	ite	mi
 8008a5c:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8008a60:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008a64:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8008a68:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8008a6c:	d105      	bne.n	8008a7a <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 8008a6e:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 8008a70:	6853      	ldr	r3, [r2, #4]
 8008a72:	ea23 030c 	bic.w	r3, r3, ip
 8008a76:	6053      	str	r3, [r2, #4]
}
 8008a78:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8008a7a:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8008a7c:	2000      	movs	r0, #0
}
 8008a7e:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 8008a80:	ea43 030c 	orr.w	r3, r3, ip
 8008a84:	6053      	str	r3, [r2, #4]
}
 8008a86:	4770      	bx	lr
    return HAL_ERROR;
 8008a88:	2001      	movs	r0, #1
}
 8008a8a:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008a8c:	250f      	movs	r5, #15
 8008a8e:	f002 021c 	and.w	r2, r2, #28
 8008a92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008a96:	68c8      	ldr	r0, [r1, #12]
 8008a98:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008a9c:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8008aa0:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008aa2:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008aa4:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008aa6:	fa05 f303 	lsl.w	r3, r5, r3
 8008aaa:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8008aae:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8008ab0:	6090      	str	r0, [r2, #8]
 8008ab2:	e7ce      	b.n	8008a52 <HAL_EXTI_SetConfigLine+0x52>
 8008ab4:	40010400 	.word	0x40010400

08008ab8 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008ab8:	2301      	movs	r3, #1
 8008aba:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8008abc:	4902      	ldr	r1, [pc, #8]	; (8008ac8 <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8008abe:	f002 021f 	and.w	r2, r2, #31
 8008ac2:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 8008ac4:	610b      	str	r3, [r1, #16]
}
 8008ac6:	4770      	bx	lr
 8008ac8:	40010400 	.word	0x40010400

08008acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008ad0:	680c      	ldr	r4, [r1, #0]
{
 8008ad2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8008ad4:	2c00      	cmp	r4, #0
 8008ad6:	d07c      	beq.n	8008bd2 <HAL_GPIO_Init+0x106>
 8008ad8:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008adc:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 8008ae0:	4673      	mov	r3, lr
 8008ae2:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008ae4:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 8008ae8:	ea15 0a04 	ands.w	sl, r5, r4
 8008aec:	d06b      	beq.n	8008bc6 <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008aee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008af2:	f001 0203 	and.w	r2, r1, #3
 8008af6:	1e57      	subs	r7, r2, #1
 8008af8:	2f01      	cmp	r7, #1
 8008afa:	d96d      	bls.n	8008bd8 <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008afc:	2a03      	cmp	r2, #3
 8008afe:	f040 80ae 	bne.w	8008c5e <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008b02:	fa02 f20e 	lsl.w	r2, r2, lr
 8008b06:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b08:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b0a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8008b0e:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008b12:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8008b16:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b18:	d055      	beq.n	8008bc6 <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008b1a:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b1c:	4d5a      	ldr	r5, [pc, #360]	; (8008c88 <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008b1e:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b22:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008b24:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b26:	f042 0201 	orr.w	r2, r2, #1
 8008b2a:	622a      	str	r2, [r5, #32]
 8008b2c:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008b2e:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b32:	f002 0201 	and.w	r2, r2, #1
 8008b36:	9203      	str	r2, [sp, #12]
 8008b38:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8008b3a:	f023 0203 	bic.w	r2, r3, #3
 8008b3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008b42:	4e52      	ldr	r6, [pc, #328]	; (8008c8c <HAL_GPIO_Init+0x1c0>)
 8008b44:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8008b48:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008b4a:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8008b4c:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008b50:	d015      	beq.n	8008b7e <HAL_GPIO_Init+0xb2>
 8008b52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008b56:	42b0      	cmp	r0, r6
 8008b58:	f000 808c 	beq.w	8008c74 <HAL_GPIO_Init+0x1a8>
 8008b5c:	4e4c      	ldr	r6, [pc, #304]	; (8008c90 <HAL_GPIO_Init+0x1c4>)
 8008b5e:	42b0      	cmp	r0, r6
 8008b60:	f000 808c 	beq.w	8008c7c <HAL_GPIO_Init+0x1b0>
 8008b64:	4e4b      	ldr	r6, [pc, #300]	; (8008c94 <HAL_GPIO_Init+0x1c8>)
 8008b66:	42b0      	cmp	r0, r6
 8008b68:	d07e      	beq.n	8008c68 <HAL_GPIO_Init+0x19c>
 8008b6a:	4e4b      	ldr	r6, [pc, #300]	; (8008c98 <HAL_GPIO_Init+0x1cc>)
 8008b6c:	42b0      	cmp	r0, r6
 8008b6e:	bf0c      	ite	eq
 8008b70:	f04f 0804 	moveq.w	r8, #4
 8008b74:	f04f 0805 	movne.w	r8, #5
 8008b78:	fa08 f707 	lsl.w	r7, r8, r7
 8008b7c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008b7e:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8008b82:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8008b84:	4a45      	ldr	r2, [pc, #276]	; (8008c9c <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b86:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8008b88:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8008b8a:	4d44      	ldr	r5, [pc, #272]	; (8008c9c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008b8c:	bf54      	ite	pl
 8008b8e:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008b90:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8008b94:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8008b96:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b98:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8008b9a:	4a40      	ldr	r2, [pc, #256]	; (8008c9c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008b9c:	bf54      	ite	pl
 8008b9e:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008ba0:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 8008ba4:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ba6:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ba8:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 8008baa:	4a3c      	ldr	r2, [pc, #240]	; (8008c9c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008bac:	bf54      	ite	pl
 8008bae:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8008bb0:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 8008bb4:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8008bb6:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bb8:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 8008bba:	4938      	ldr	r1, [pc, #224]	; (8008c9c <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8008bbc:	bf54      	ite	pl
 8008bbe:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 8008bc0:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 8008bc4:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8008bc6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8008bc8:	fa34 f203 	lsrs.w	r2, r4, r3
 8008bcc:	f10e 0e02 	add.w	lr, lr, #2
 8008bd0:	d188      	bne.n	8008ae4 <HAL_GPIO_Init+0x18>
  }
}
 8008bd2:	b005      	add	sp, #20
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008bd8:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 8008bdc:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008bde:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008be2:	fa09 f90e 	lsl.w	r9, r9, lr
 8008be6:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8008bea:	fa07 f70e 	lsl.w	r7, r7, lr
 8008bee:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8008bf0:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008bf2:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 8008bf6:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bfa:	f3c1 1800 	ubfx	r8, r1, #4, #1
 8008bfe:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8008c02:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c06:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8008c0a:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8008c0c:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c0e:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008c10:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8008c14:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008c18:	fa02 f20e 	lsl.w	r2, r2, lr
 8008c1c:	fa05 f50e 	lsl.w	r5, r5, lr
 8008c20:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8008c24:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c26:	f47f af6f 	bne.w	8008b08 <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008c2a:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008c2e:	f003 0807 	and.w	r8, r3, #7
 8008c32:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008c36:	fa05 f508 	lsl.w	r5, r5, r8
 8008c3a:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008c3c:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 8008c3e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008c42:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008c46:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008c4a:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008c4e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8008c50:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8008c54:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8008c58:	f8c9 5020 	str.w	r5, [r9, #32]
 8008c5c:	e754      	b.n	8008b08 <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008c5e:	2703      	movs	r7, #3
 8008c60:	fa07 f70e 	lsl.w	r7, r7, lr
 8008c64:	43ff      	mvns	r7, r7
 8008c66:	e7d1      	b.n	8008c0c <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008c68:	f04f 0803 	mov.w	r8, #3
 8008c6c:	fa08 f707 	lsl.w	r7, r8, r7
 8008c70:	433d      	orrs	r5, r7
 8008c72:	e784      	b.n	8008b7e <HAL_GPIO_Init+0xb2>
 8008c74:	fa0b f707 	lsl.w	r7, fp, r7
 8008c78:	433d      	orrs	r5, r7
 8008c7a:	e780      	b.n	8008b7e <HAL_GPIO_Init+0xb2>
 8008c7c:	f04f 0802 	mov.w	r8, #2
 8008c80:	fa08 f707 	lsl.w	r7, r8, r7
 8008c84:	433d      	orrs	r5, r7
 8008c86:	e77a      	b.n	8008b7e <HAL_GPIO_Init+0xb2>
 8008c88:	40023800 	.word	0x40023800
 8008c8c:	40020000 	.word	0x40020000
 8008c90:	40020800 	.word	0x40020800
 8008c94:	40020c00 	.word	0x40020c00
 8008c98:	40021000 	.word	0x40021000
 8008c9c:	40010400 	.word	0x40010400

08008ca0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	f000 8083 	beq.w	8008dac <HAL_GPIO_DeInit+0x10c>
{
 8008ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 8008caa:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008cac:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008cae:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008cb2:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008cb6:	4e3e      	ldr	r6, [pc, #248]	; (8008db0 <HAL_GPIO_DeInit+0x110>)
 8008cb8:	e051      	b.n	8008d5e <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008cba:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8008cbe:	4558      	cmp	r0, fp
 8008cc0:	d069      	beq.n	8008d96 <HAL_GPIO_DeInit+0xf6>
 8008cc2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8008db4 <HAL_GPIO_DeInit+0x114>
 8008cc6:	4558      	cmp	r0, fp
 8008cc8:	d068      	beq.n	8008d9c <HAL_GPIO_DeInit+0xfc>
 8008cca:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8008db8 <HAL_GPIO_DeInit+0x118>
 8008cce:	4558      	cmp	r0, fp
 8008cd0:	d069      	beq.n	8008da6 <HAL_GPIO_DeInit+0x106>
 8008cd2:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8008dbc <HAL_GPIO_DeInit+0x11c>
 8008cd6:	4558      	cmp	r0, fp
 8008cd8:	bf14      	ite	ne
 8008cda:	f04f 0b05 	movne.w	fp, #5
 8008cde:	f04f 0b04 	moveq.w	fp, #4
 8008ce2:	fa0b f404 	lsl.w	r4, fp, r4
 8008ce6:	45a4      	cmp	ip, r4
 8008ce8:	d113      	bne.n	8008d12 <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008cea:	6834      	ldr	r4, [r6, #0]
 8008cec:	ea24 040e 	bic.w	r4, r4, lr
 8008cf0:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008cf2:	6874      	ldr	r4, [r6, #4]
 8008cf4:	ea24 040e 	bic.w	r4, r4, lr
 8008cf8:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008cfa:	68b4      	ldr	r4, [r6, #8]
 8008cfc:	ea24 040e 	bic.w	r4, r4, lr
 8008d00:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008d02:	68f4      	ldr	r4, [r6, #12]
 8008d04:	ea24 040e 	bic.w	r4, r4, lr
 8008d08:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8008d0a:	68ac      	ldr	r4, [r5, #8]
 8008d0c:	ea24 0408 	bic.w	r4, r4, r8
 8008d10:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008d12:	6805      	ldr	r5, [r0, #0]
 8008d14:	005c      	lsls	r4, r3, #1
 8008d16:	fa0a f404 	lsl.w	r4, sl, r4
 8008d1a:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008d1e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8008d22:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8008d24:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008d28:	f003 0507 	and.w	r5, r3, #7
 8008d2c:	f8dc e020 	ldr.w	lr, [ip, #32]
 8008d30:	00ad      	lsls	r5, r5, #2
 8008d32:	fa09 f505 	lsl.w	r5, r9, r5
 8008d36:	ea2e 0505 	bic.w	r5, lr, r5
 8008d3a:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8008d3e:	68c5      	ldr	r5, [r0, #12]
 8008d40:	ea25 0504 	bic.w	r5, r5, r4
 8008d44:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8008d46:	6845      	ldr	r5, [r0, #4]
 8008d48:	ea25 0202 	bic.w	r2, r5, r2
 8008d4c:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008d4e:	6882      	ldr	r2, [r0, #8]
 8008d50:	ea22 0404 	bic.w	r4, r2, r4
 8008d54:	6084      	str	r4, [r0, #8]
    }

    position++;
 8008d56:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8008d58:	fa31 f203 	lsrs.w	r2, r1, r3
 8008d5c:	d019      	beq.n	8008d92 <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 8008d5e:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 8008d62:	ea12 0e01 	ands.w	lr, r2, r1
 8008d66:	d0f6      	beq.n	8008d56 <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 8008d68:	f023 0503 	bic.w	r5, r3, #3
 8008d6c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008d70:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8008dc0 <HAL_GPIO_DeInit+0x120>
 8008d74:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008d78:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8008d7c:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008d80:	00a4      	lsls	r4, r4, #2
 8008d82:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008d86:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8008d88:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008d8c:	d195      	bne.n	8008cba <HAL_GPIO_DeInit+0x1a>
 8008d8e:	2400      	movs	r4, #0
 8008d90:	e7a9      	b.n	8008ce6 <HAL_GPIO_DeInit+0x46>
  }
}
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8008d96:	fa07 f404 	lsl.w	r4, r7, r4
 8008d9a:	e7a4      	b.n	8008ce6 <HAL_GPIO_DeInit+0x46>
 8008d9c:	f04f 0b02 	mov.w	fp, #2
 8008da0:	fa0b f404 	lsl.w	r4, fp, r4
 8008da4:	e79f      	b.n	8008ce6 <HAL_GPIO_DeInit+0x46>
 8008da6:	fa0a f404 	lsl.w	r4, sl, r4
 8008daa:	e79c      	b.n	8008ce6 <HAL_GPIO_DeInit+0x46>
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40010400 	.word	0x40010400
 8008db4:	40020800 	.word	0x40020800
 8008db8:	40020c00 	.word	0x40020c00
 8008dbc:	40021000 	.word	0x40021000
 8008dc0:	40020000 	.word	0x40020000

08008dc4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008dc4:	6903      	ldr	r3, [r0, #16]
 8008dc6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008dc8:	bf14      	ite	ne
 8008dca:	2001      	movne	r0, #1
 8008dcc:	2000      	moveq	r0, #0
 8008dce:	4770      	bx	lr

08008dd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008dd0:	b902      	cbnz	r2, 8008dd4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8008dd2:	0409      	lsls	r1, r1, #16
 8008dd4:	6181      	str	r1, [r0, #24]
  }
}
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008dd8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008dda:	ea01 0203 	and.w	r2, r1, r3
 8008dde:	ea21 0103 	bic.w	r1, r1, r3
 8008de2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008de6:	6181      	str	r1, [r0, #24]
}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop

08008dec <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008dec:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008dee:	6951      	ldr	r1, [r2, #20]
 8008df0:	4201      	tst	r1, r0
 8008df2:	d100      	bne.n	8008df6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008df4:	4770      	bx	lr
{
 8008df6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008df8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008dfa:	f7fe f949 	bl	8007090 <HAL_GPIO_EXTI_Callback>
  }
}
 8008dfe:	bd08      	pop	{r3, pc}
 8008e00:	40010400 	.word	0x40010400

08008e04 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f000 80b9 	beq.w	8008f7c <HAL_I2C_Init+0x178>
{
 8008e0a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008e10:	4604      	mov	r4, r0
 8008e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8098 	beq.w	8008f4c <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e1c:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e1e:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	f022 0201 	bic.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e3c:	f001 fd1c 	bl	800a878 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e40:	6863      	ldr	r3, [r4, #4]
 8008e42:	494f      	ldr	r1, [pc, #316]	; (8008f80 <HAL_I2C_Init+0x17c>)
 8008e44:	428b      	cmp	r3, r1
 8008e46:	d84f      	bhi.n	8008ee8 <HAL_I2C_Init+0xe4>
 8008e48:	4a4e      	ldr	r2, [pc, #312]	; (8008f84 <HAL_I2C_Init+0x180>)
 8008e4a:	4290      	cmp	r0, r2
 8008e4c:	d97c      	bls.n	8008f48 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e4e:	4d4e      	ldr	r5, [pc, #312]	; (8008f88 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e50:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8008e52:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e56:	1e43      	subs	r3, r0, #1
 8008e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e5c:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e60:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8008e62:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e64:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e66:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e6a:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8008e6e:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8008e72:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e74:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e76:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e78:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8008e7c:	ea41 010c 	orr.w	r1, r1, ip
 8008e80:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e82:	69d1      	ldr	r1, [r2, #28]
 8008e84:	ea13 0f0e 	tst.w	r3, lr
 8008e88:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008e8c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008e90:	d161      	bne.n	8008f56 <HAL_I2C_Init+0x152>
 8008e92:	2304      	movs	r3, #4
 8008e94:	430b      	orrs	r3, r1
 8008e96:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008e98:	6811      	ldr	r1, [r2, #0]
 8008e9a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8008e9e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8008ea2:	4303      	orrs	r3, r0
 8008ea4:	430b      	orrs	r3, r1
 8008ea6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ea8:	6891      	ldr	r1, [r2, #8]
 8008eaa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8008eae:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8008eb2:	4303      	orrs	r3, r0
 8008eb4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ebc:	68d0      	ldr	r0, [r2, #12]
 8008ebe:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008ec2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8008ec6:	430b      	orrs	r3, r1
 8008ec8:	4303      	orrs	r3, r0
 8008eca:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ecc:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ece:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8008ed0:	f043 0301 	orr.w	r3, r3, #1
 8008ed4:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008ed6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ed8:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008eda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ede:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8008ee4:	4608      	mov	r0, r1
}
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008ee8:	4a28      	ldr	r2, [pc, #160]	; (8008f8c <HAL_I2C_Init+0x188>)
 8008eea:	4290      	cmp	r0, r2
 8008eec:	d92c      	bls.n	8008f48 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8008eee:	4d26      	ldr	r5, [pc, #152]	; (8008f88 <HAL_I2C_Init+0x184>)
 8008ef0:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008ef4:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8008ef8:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008efc:	fb02 f101 	mul.w	r1, r2, r1
 8008f00:	4d23      	ldr	r5, [pc, #140]	; (8008f90 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f02:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f04:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f08:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f0a:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f0c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008f10:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8008f14:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f16:	6a15      	ldr	r5, [r2, #32]
 8008f18:	3101      	adds	r1, #1
 8008f1a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8008f1e:	4329      	orrs	r1, r5
 8008f20:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f22:	69d1      	ldr	r1, [r2, #28]
 8008f24:	68a5      	ldr	r5, [r4, #8]
 8008f26:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008f2a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008f2e:	b9ad      	cbnz	r5, 8008f5c <HAL_I2C_Init+0x158>
 8008f30:	3801      	subs	r0, #1
 8008f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f40:	b1d3      	cbz	r3, 8008f78 <HAL_I2C_Init+0x174>
 8008f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f46:	e7a5      	b.n	8008e94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8008f48:	2001      	movs	r0, #1
}
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008f4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008f50:	f7fe fc7e 	bl	8007850 <HAL_I2C_MspInit>
 8008f54:	e762      	b.n	8008e1c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f5a:	e79b      	b.n	8008e94 <HAL_I2C_Init+0x90>
 8008f5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f60:	3801      	subs	r0, #1
 8008f62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f70:	b113      	cbz	r3, 8008f78 <HAL_I2C_Init+0x174>
 8008f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f76:	e78d      	b.n	8008e94 <HAL_I2C_Init+0x90>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e78b      	b.n	8008e94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8008f7c:	2001      	movs	r0, #1
}
 8008f7e:	4770      	bx	lr
 8008f80:	000186a0 	.word	0x000186a0
 8008f84:	001e847f 	.word	0x001e847f
 8008f88:	431bde83 	.word	0x431bde83
 8008f8c:	003d08ff 	.word	0x003d08ff
 8008f90:	10624dd3 	.word	0x10624dd3

08008f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	4699      	mov	r9, r3
 8008f9e:	4688      	mov	r8, r1
 8008fa0:	4692      	mov	sl, r2
 8008fa2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fa4:	f7fe fedc 	bl	8007d60 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fa8:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8008fac:	2b20      	cmp	r3, #32
 8008fae:	d003      	beq.n	8008fb8 <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8008fb0:	2002      	movs	r0, #2
  }
}
 8008fb2:	b003      	add	sp, #12
 8008fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb8:	4606      	mov	r6, r0
 8008fba:	e005      	b.n	8008fc8 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fbc:	f7fe fed0 	bl	8007d60 <HAL_GetTick>
 8008fc0:	1b80      	subs	r0, r0, r6
 8008fc2:	2819      	cmp	r0, #25
 8008fc4:	f200 80f8 	bhi.w	80091b8 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fc8:	682c      	ldr	r4, [r5, #0]
 8008fca:	69a3      	ldr	r3, [r4, #24]
 8008fcc:	ea6f 0c03 	mvn.w	ip, r3
 8008fd0:	f01c 0b02 	ands.w	fp, ip, #2
 8008fd4:	d0f2      	beq.n	8008fbc <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8008fd6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d0e8      	beq.n	8008fb0 <HAL_I2C_Master_Transmit+0x1c>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	07d9      	lsls	r1, r3, #31
 8008fe8:	d571      	bpl.n	80090ce <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008fea:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008fec:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008fee:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ff6:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008ff8:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ffc:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009000:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8009002:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009006:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009008:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800900c:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800900e:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009010:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8009012:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009016:	2b08      	cmp	r3, #8
 8009018:	d006      	beq.n	8009028 <HAL_I2C_Master_Transmit+0x94>
 800901a:	2b01      	cmp	r3, #1
 800901c:	d004      	beq.n	8009028 <HAL_I2C_Master_Transmit+0x94>
 800901e:	4293      	cmp	r3, r2
 8009020:	d002      	beq.n	8009028 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009022:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009024:	2b12      	cmp	r3, #18
 8009026:	d103      	bne.n	8009030 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	1c7b      	adds	r3, r7, #1
 8009032:	d13e      	bne.n	80090b2 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009034:	6963      	ldr	r3, [r4, #20]
 8009036:	07d8      	lsls	r0, r3, #31
 8009038:	d5fc      	bpl.n	8009034 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800903a:	692b      	ldr	r3, [r5, #16]
 800903c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009040:	d14a      	bne.n	80090d8 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009042:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8009046:	6121      	str	r1, [r4, #16]
 8009048:	1c78      	adds	r0, r7, #1
 800904a:	d004      	beq.n	8009056 <HAL_I2C_Master_Transmit+0xc2>
 800904c:	e0dd      	b.n	800920a <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800904e:	6963      	ldr	r3, [r4, #20]
 8009050:	055a      	lsls	r2, r3, #21
 8009052:	f100 80c2 	bmi.w	80091da <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009056:	6963      	ldr	r3, [r4, #20]
 8009058:	0799      	lsls	r1, r3, #30
 800905a:	d5f8      	bpl.n	800904e <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800905c:	2200      	movs	r2, #0
 800905e:	9201      	str	r2, [sp, #4]
 8009060:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8009062:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009064:	9201      	str	r2, [sp, #4]
 8009066:	69a2      	ldr	r2, [r4, #24]
 8009068:	9201      	str	r2, [sp, #4]
 800906a:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 800906c:	2b00      	cmp	r3, #0
 800906e:	d075      	beq.n	800915c <HAL_I2C_Master_Transmit+0x1c8>
 8009070:	1c79      	adds	r1, r7, #1
 8009072:	f040 8081 	bne.w	8009178 <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009076:	6963      	ldr	r3, [r4, #20]
 8009078:	061a      	lsls	r2, r3, #24
 800907a:	d441      	bmi.n	8009100 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800907c:	6963      	ldr	r3, [r4, #20]
 800907e:	055b      	lsls	r3, r3, #21
 8009080:	d5f9      	bpl.n	8009076 <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009082:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8009084:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009086:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800908a:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800908c:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800908e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009092:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009096:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009098:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800909c:	f043 0304 	orr.w	r3, r3, #4
 80090a0:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	f000 80e6 	beq.w	8009276 <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 80090aa:	2001      	movs	r0, #1
}
 80090ac:	b003      	add	sp, #12
 80090ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090b2:	6963      	ldr	r3, [r4, #20]
 80090b4:	07d9      	lsls	r1, r3, #31
 80090b6:	d4c0      	bmi.n	800903a <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b8:	f7fe fe52 	bl	8007d60 <HAL_GetTick>
 80090bc:	1b80      	subs	r0, r0, r6
 80090be:	4287      	cmp	r7, r0
 80090c0:	f0c0 80b3 	bcc.w	800922a <HAL_I2C_Master_Transmit+0x296>
 80090c4:	2f00      	cmp	r7, #0
 80090c6:	f000 80b0 	beq.w	800922a <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090ca:	682c      	ldr	r4, [r5, #0]
 80090cc:	e7b0      	b.n	8009030 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	e788      	b.n	8008fea <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090d8:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80090dc:	f003 0306 	and.w	r3, r3, #6
 80090e0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80090e4:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80090e6:	1c7b      	adds	r3, r7, #1
 80090e8:	d003      	beq.n	80090f2 <HAL_I2C_Master_Transmit+0x15e>
 80090ea:	e0b5      	b.n	8009258 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090ec:	6963      	ldr	r3, [r4, #20]
 80090ee:	0559      	lsls	r1, r3, #21
 80090f0:	d473      	bmi.n	80091da <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	0718      	lsls	r0, r3, #28
 80090f6:	d5f9      	bpl.n	80090ec <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80090f8:	fa5f f388 	uxtb.w	r3, r8
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	e7a3      	b.n	8009048 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009100:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8009102:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009106:	4601      	mov	r1, r0
 8009108:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800910c:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009110:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8009112:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8009114:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009116:	3b01      	subs	r3, #1
 8009118:	b29b      	uxth	r3, r3
 800911a:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800911c:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 800911e:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009120:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8009122:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009124:	d50c      	bpl.n	8009140 <HAL_I2C_Master_Transmit+0x1ac>
 8009126:	b15a      	cbz	r2, 8009140 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009128:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800912a:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800912e:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8009130:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8009132:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8009134:	3b01      	subs	r3, #1
 8009136:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8009138:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800913c:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800913e:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8009140:	1c78      	adds	r0, r7, #1
 8009142:	d129      	bne.n	8009198 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009144:	6963      	ldr	r3, [r4, #20]
 8009146:	0759      	lsls	r1, r3, #29
 8009148:	d405      	bmi.n	8009156 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800914a:	6963      	ldr	r3, [r4, #20]
 800914c:	055a      	lsls	r2, r3, #21
 800914e:	d498      	bmi.n	8009082 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009150:	6963      	ldr	r3, [r4, #20]
 8009152:	0759      	lsls	r1, r3, #29
 8009154:	d5f9      	bpl.n	800914a <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 8009156:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d189      	bne.n	8009070 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800915c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800915e:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009160:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8009162:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009168:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800916a:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800916e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009172:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 8009176:	e71c      	b.n	8008fb2 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009178:	6963      	ldr	r3, [r4, #20]
 800917a:	0618      	lsls	r0, r3, #24
 800917c:	d4c0      	bmi.n	8009100 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800917e:	6963      	ldr	r3, [r4, #20]
 8009180:	0558      	lsls	r0, r3, #21
 8009182:	f53f af7e 	bmi.w	8009082 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009186:	f7fe fdeb 	bl	8007d60 <HAL_GetTick>
 800918a:	1b80      	subs	r0, r0, r6
 800918c:	4287      	cmp	r7, r0
 800918e:	d379      	bcc.n	8009284 <HAL_I2C_Master_Transmit+0x2f0>
 8009190:	2f00      	cmp	r7, #0
 8009192:	d077      	beq.n	8009284 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009194:	682c      	ldr	r4, [r5, #0]
 8009196:	e76b      	b.n	8009070 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009198:	6963      	ldr	r3, [r4, #20]
 800919a:	075b      	lsls	r3, r3, #29
 800919c:	d4db      	bmi.n	8009156 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800919e:	6963      	ldr	r3, [r4, #20]
 80091a0:	055b      	lsls	r3, r3, #21
 80091a2:	f53f af6e 	bmi.w	8009082 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a6:	f7fe fddb 	bl	8007d60 <HAL_GetTick>
 80091aa:	1b80      	subs	r0, r0, r6
 80091ac:	4287      	cmp	r7, r0
 80091ae:	d369      	bcc.n	8009284 <HAL_I2C_Master_Transmit+0x2f0>
 80091b0:	2f00      	cmp	r7, #0
 80091b2:	d067      	beq.n	8009284 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80091b4:	682c      	ldr	r4, [r5, #0]
 80091b6:	e7c3      	b.n	8009140 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 80091b8:	2320      	movs	r3, #32
      return HAL_BUSY;
 80091ba:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80091bc:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80091c0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80091c4:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80091ca:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091ce:	f043 0320 	orr.w	r3, r3, #32
 80091d2:	642b      	str	r3, [r5, #64]	; 0x40
}
 80091d4:	b003      	add	sp, #12
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80091da:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091dc:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80091e0:	2120      	movs	r1, #32
      return HAL_ERROR;
 80091e2:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091ea:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ec:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80091ee:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091f0:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091f4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091f8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80091fa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091fe:	f043 0304 	orr.w	r3, r3, #4
 8009202:	642b      	str	r3, [r5, #64]	; 0x40
}
 8009204:	b003      	add	sp, #12
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800920a:	6963      	ldr	r3, [r4, #20]
 800920c:	079b      	lsls	r3, r3, #30
 800920e:	f53f af25 	bmi.w	800905c <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009212:	6963      	ldr	r3, [r4, #20]
 8009214:	055b      	lsls	r3, r3, #21
 8009216:	d4e0      	bmi.n	80091da <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009218:	f7fe fda2 	bl	8007d60 <HAL_GetTick>
 800921c:	1b80      	subs	r0, r0, r6
 800921e:	4287      	cmp	r7, r0
 8009220:	d33e      	bcc.n	80092a0 <HAL_I2C_Master_Transmit+0x30c>
 8009222:	2f00      	cmp	r7, #0
 8009224:	d03c      	beq.n	80092a0 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009226:	682c      	ldr	r4, [r5, #0]
 8009228:	e70e      	b.n	8009048 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800922a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800922c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800922e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009230:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009234:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009238:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800923a:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800923c:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8009240:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009244:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009246:	680b      	ldr	r3, [r1, #0]
 8009248:	05da      	lsls	r2, r3, #23
 800924a:	f57f af2e 	bpl.w	80090aa <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800924e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8009252:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009254:	642b      	str	r3, [r5, #64]	; 0x40
 8009256:	e6ac      	b.n	8008fb2 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009258:	6963      	ldr	r3, [r4, #20]
 800925a:	071a      	lsls	r2, r3, #28
 800925c:	f53f af4c 	bmi.w	80090f8 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009260:	6963      	ldr	r3, [r4, #20]
 8009262:	055a      	lsls	r2, r3, #21
 8009264:	d4b9      	bmi.n	80091da <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009266:	f7fe fd7b 	bl	8007d60 <HAL_GetTick>
 800926a:	1b83      	subs	r3, r0, r6
 800926c:	429f      	cmp	r7, r3
 800926e:	d317      	bcc.n	80092a0 <HAL_I2C_Master_Transmit+0x30c>
 8009270:	b1b7      	cbz	r7, 80092a0 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009272:	682c      	ldr	r4, [r5, #0]
 8009274:	e737      	b.n	80090e6 <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009276:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 8009278:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800927a:	6813      	ldr	r3, [r2, #0]
 800927c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	e696      	b.n	8008fb2 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009284:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8009286:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009288:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800928a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800928e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009292:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8009294:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009298:	f043 0320 	orr.w	r3, r3, #32
 800929c:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800929e:	e700      	b.n	80090a2 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092a0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80092a2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092a4:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092a6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092aa:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80092b0:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092b2:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80092b6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092ba:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80092bc:	e679      	b.n	8008fb2 <HAL_I2C_Master_Transmit+0x1e>
 80092be:	bf00      	nop

080092c0 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d05d      	beq.n	8009380 <HAL_PCD_Init+0xc0>
{
 80092c4:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092c6:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80092ca:	4604      	mov	r4, r0
{
 80092cc:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04f      	beq.n	8009376 <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80092d6:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80092d8:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 80092da:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80092de:	f002 f831 	bl	800b344 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092e2:	6860      	ldr	r0, [r4, #4]
 80092e4:	b368      	cbz	r0, 8009342 <HAL_PCD_Init+0x82>
 80092e6:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80092e8:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80092ec:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 80092ee:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80092f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092f6:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 80092fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80092fe:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009300:	fa5f f28c 	uxtb.w	r2, ip
 8009304:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009306:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800930a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800930e:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8009312:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009314:	d3eb      	bcc.n	80092ee <HAL_PCD_Init+0x2e>
 8009316:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009318:	4611      	mov	r1, r2
 800931a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800931e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009322:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 8009326:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800932a:	fa5f f28c 	uxtb.w	r2, ip
 800932e:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009330:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8009334:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009338:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800933c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009340:	d3eb      	bcc.n	800931a <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009342:	46a4      	mov	ip, r4
 8009344:	46ee      	mov	lr, sp
 8009346:	f85c 6b10 	ldr.w	r6, [ip], #16
 800934a:	1d25      	adds	r5, r4, #4
 800934c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009350:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009354:	f8dc 3000 	ldr.w	r3, [ip]
 8009358:	4630      	mov	r0, r6
 800935a:	f8ce 3000 	str.w	r3, [lr]
 800935e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009362:	f001 fff9 	bl	800b358 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009366:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8009368:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800936a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800936e:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8009372:	b006      	add	sp, #24
 8009374:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8009376:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 800937a:	f003 fd59 	bl	800ce30 <HAL_PCD_MspInit>
 800937e:	e7aa      	b.n	80092d6 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8009380:	2001      	movs	r0, #1
}
 8009382:	4770      	bx	lr

08009384 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009384:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8009386:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 800938a:	2b01      	cmp	r3, #1
 800938c:	d012      	beq.n	80093b4 <HAL_PCD_Start+0x30>
 800938e:	4604      	mov	r4, r0
 8009390:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8009392:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8009394:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8009398:	f001 ffca 	bl	800b330 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800939c:	4629      	mov	r1, r5
 800939e:	4620      	mov	r0, r4
 80093a0:	f003 fd3a 	bl	800ce18 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	f002 fdc7 	bl	800bf38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80093aa:	2300      	movs	r3, #0
 80093ac:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 80093b0:	4618      	mov	r0, r3
}
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80093b4:	2002      	movs	r0, #2
}
 80093b6:	bd38      	pop	{r3, r4, r5, pc}

080093b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80093b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	f002 fdbc 	bl	800bf3c <USB_ReadInterrupts>
 80093c4:	0406      	lsls	r6, r0, #16
 80093c6:	d443      	bmi.n	8009450 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	f002 fdb7 	bl	800bf3c <USB_ReadInterrupts>
 80093ce:	0545      	lsls	r5, r0, #21
 80093d0:	f100 8180 	bmi.w	80096d4 <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	f002 fdb1 	bl	800bf3c <USB_ReadInterrupts>
 80093da:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80093de:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80093e0:	d007      	beq.n	80093f2 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80093e2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80093e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80093f2:	f002 fda3 	bl	800bf3c <USB_ReadInterrupts>
 80093f6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80093fa:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80093fc:	d007      	beq.n	800940e <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80093fe:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009406:	041b      	lsls	r3, r3, #16
 8009408:	0c1b      	lsrs	r3, r3, #16
 800940a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800940e:	f002 fd95 	bl	800bf3c <USB_ReadInterrupts>
 8009412:	04c0      	lsls	r0, r0, #19
 8009414:	f100 81f6 	bmi.w	8009804 <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8009418:	6820      	ldr	r0, [r4, #0]
 800941a:	f002 fd8f 	bl	800bf3c <USB_ReadInterrupts>
 800941e:	0501      	lsls	r1, r0, #20
 8009420:	f100 81d5 	bmi.w	80097ce <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	f002 fd89 	bl	800bf3c <USB_ReadInterrupts>
 800942a:	0582      	lsls	r2, r0, #22
 800942c:	f100 81c2 	bmi.w	80097b4 <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	f002 fd83 	bl	800bf3c <USB_ReadInterrupts>
 8009436:	05c3      	lsls	r3, r0, #23
 8009438:	d508      	bpl.n	800944c <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800943a:	6822      	ldr	r2, [r4, #0]
 800943c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009444:	041b      	lsls	r3, r3, #16
 8009446:	0c1b      	lsrs	r3, r3, #16
 8009448:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 800944c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009450:	6822      	ldr	r2, [r4, #0]
 8009452:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8009456:	4610      	mov	r0, r2
 8009458:	041d      	lsls	r5, r3, #16
 800945a:	d5b6      	bpl.n	80093ca <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800945c:	f8df 934c 	ldr.w	r9, [pc, #844]	; 80097ac <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009460:	f8df a34c 	ldr.w	sl, [pc, #844]	; 80097b0 <HAL_PCD_IRQHandler+0x3f8>
 8009464:	e011      	b.n	800948a <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009466:	f011 0110 	ands.w	r1, r1, #16
 800946a:	f000 8151 	beq.w	8009710 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800946e:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009470:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009474:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009476:	f040 8176 	bne.w	8009766 <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800947a:	0419      	lsls	r1, r3, #16
 800947c:	f100 821b 	bmi.w	80098b6 <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009480:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009484:	041e      	lsls	r6, r3, #16
 8009486:	f140 811f 	bpl.w	80096c8 <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 800948a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 800948e:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8009490:	f015 050f 	ands.w	r5, r5, #15
 8009494:	d0e7      	beq.n	8009466 <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009496:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 800949a:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800949c:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800949e:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80094a2:	f100 80a0 	bmi.w	80095e6 <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80094a6:	f018 0f80 	tst.w	r8, #128	; 0x80
 80094aa:	d0e9      	beq.n	8009480 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80094ac:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80094b0:	1977      	adds	r7, r6, r5
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	ea03 0309 	and.w	r3, r3, r9
 80094b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094bc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80094c0:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80094c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	f000 80d0 	beq.w	800966e <HAL_PCD_IRQHandler+0x2b6>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 80cd 	beq.w	800966e <HAL_PCD_IRQHandler+0x2b6>
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d103      	bne.n	80094e0 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80094d8:	f418 7f80 	tst.w	r8, #256	; 0x100
 80094dc:	f000 80c7 	beq.w	800966e <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80094e0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80094e4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80094ee:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80094f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80094f6:	f000 8255 	beq.w	80099a4 <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 80094fa:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80094fe:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8009502:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8009506:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800950a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 800950e:	459e      	cmp	lr, r3
 8009510:	f240 834b 	bls.w	8009baa <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8009514:	ebae 0e03 	sub.w	lr, lr, r3
 8009518:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 800951c:	f1be 0f00 	cmp.w	lr, #0
 8009520:	f000 8346 	beq.w	8009bb0 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009524:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8009528:	d00f      	beq.n	800954a <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800952a:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 800952e:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8009532:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8009536:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800953a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800953e:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8009542:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8009546:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800954a:	eb06 0e05 	add.w	lr, r6, r5
 800954e:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8009552:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 8009556:	f1bc 0f01 	cmp.w	ip, #1
 800955a:	f040 8316 	bne.w	8009b8a <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 800955e:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8009562:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8009566:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 800956a:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800956e:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8009572:	441a      	add	r2, r3
 8009574:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8009578:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 800957c:	4542      	cmp	r2, r8
 800957e:	f0c0 83e4 	bcc.w	8009d4a <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 8009582:	eba2 0208 	sub.w	r2, r2, r8
 8009586:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800958a:	fa1f f388 	uxth.w	r3, r8
 800958e:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009592:	f1be 0f00 	cmp.w	lr, #0
 8009596:	f040 83cb 	bne.w	8009d30 <HAL_PCD_IRQHandler+0x978>
 800959a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800959e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80095a2:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 80095a6:	b292      	uxth	r2, r2
 80095a8:	eb0e 0102 	add.w	r1, lr, r2
 80095ac:	f1b8 0f00 	cmp.w	r8, #0
 80095b0:	f040 83f8 	bne.w	8009da4 <HAL_PCD_IRQHandler+0x9ec>
 80095b4:	f83e 1002 	ldrh.w	r1, [lr, r2]
 80095b8:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80095bc:	0409      	lsls	r1, r1, #16
 80095be:	0c09      	lsrs	r1, r1, #16
 80095c0:	f82e 1002 	strh.w	r1, [lr, r2]
 80095c4:	f83e 1002 	ldrh.w	r1, [lr, r2]
 80095c8:	b289      	uxth	r1, r1
 80095ca:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80095ce:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80095d2:	1972      	adds	r2, r6, r5
 80095d4:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80095d8:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 80095da:	4661      	mov	r1, ip
 80095dc:	f002 fcb2 	bl	800bf44 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80095e0:	6820      	ldr	r0, [r4, #0]
 80095e2:	4602      	mov	r2, r0
 80095e4:	e2d1      	b.n	8009b8a <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80095e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80095ea:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80095ee:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80095f0:	4013      	ands	r3, r2
 80095f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f6:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 80095fa:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80095fe:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8009602:	2b00      	cmp	r3, #0
 8009604:	f040 811c 	bne.w	8009840 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009608:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800960c:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009610:	b29b      	uxth	r3, r3
 8009612:	3306      	adds	r3, #6
 8009614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009618:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800961c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8009620:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009624:	461f      	mov	r7, r3
          if (count != 0U)
 8009626:	2b00      	cmp	r3, #0
 8009628:	f040 81ac 	bne.w	8009984 <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 800962c:	1971      	adds	r1, r6, r5
 800962e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8009632:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8009636:	00c9      	lsls	r1, r1, #3
 8009638:	443a      	add	r2, r7
 800963a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800963e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009642:	443a      	add	r2, r7
 8009644:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009648:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800964c:	b122      	cbz	r2, 8009658 <HAL_PCD_IRQHandler+0x2a0>
 800964e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8009652:	42bb      	cmp	r3, r7
 8009654:	f240 819d 	bls.w	8009992 <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009658:	1973      	adds	r3, r6, r5
 800965a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800965e:	4620      	mov	r0, r4
 8009660:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8009664:	f003 fc0c 	bl	800ce80 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009668:	6820      	ldr	r0, [r4, #0]
 800966a:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800966c:	e71b      	b.n	80094a6 <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800966e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009672:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009676:	b29b      	uxth	r3, r3
 8009678:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 800967c:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800967e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009682:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8009686:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800968a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800968c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009690:	429a      	cmp	r2, r3
 8009692:	f240 8108 	bls.w	80098a6 <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8009696:	1ad2      	subs	r2, r2, r3
 8009698:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800969a:	2a00      	cmp	r2, #0
 800969c:	f000 8105 	beq.w	80098aa <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 80096a0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 80096a2:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 80096a4:	441a      	add	r2, r3
 80096a6:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 80096a8:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 80096aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 80096ae:	4413      	add	r3, r2
 80096b0:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80096b2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096b6:	f002 f8b7 	bl	800b828 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80096ba:	6820      	ldr	r0, [r4, #0]
 80096bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80096c0:	4602      	mov	r2, r0
 80096c2:	041e      	lsls	r6, r3, #16
 80096c4:	f53f aee1 	bmi.w	800948a <HAL_PCD_IRQHandler+0xd2>
 80096c8:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80096ca:	f002 fc37 	bl	800bf3c <USB_ReadInterrupts>
 80096ce:	0545      	lsls	r5, r0, #21
 80096d0:	f57f ae80 	bpl.w	80093d4 <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80096d4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80096d6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80096d8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80096dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e0:	041b      	lsls	r3, r3, #16
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80096e8:	f003 fbe2 	bl	800ceb0 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 80096ec:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	f43f ae6f 	beq.w	80093d4 <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 80096f6:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80096f8:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80096fa:	4629      	mov	r1, r5
 80096fc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80096fe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009702:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009706:	f002 fc11 	bl	800bf2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800970a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800970e:	e661      	b.n	80093d4 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009710:	8803      	ldrh	r3, [r0, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea03 0309 	and.w	r3, r3, r9
 8009718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800971c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800971e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009722:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8009726:	b29b      	uxth	r3, r3
 8009728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800972c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009730:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8009734:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800973a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800973c:	4413      	add	r3, r2
 800973e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009740:	4620      	mov	r0, r4
 8009742:	f003 fba7 	bl	800ce94 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009746:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800974a:	b363      	cbz	r3, 80097a6 <HAL_PCD_IRQHandler+0x3ee>
 800974c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800974e:	bb53      	cbnz	r3, 80097a6 <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009750:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800975a:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 800975e:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8009760:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8009764:	e68c      	b.n	8009480 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009766:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800976a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800976e:	b29b      	uxth	r3, r3
 8009770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009774:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009778:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800977c:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8009780:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009784:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009788:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800978c:	f002 fbea 	bl	800bf64 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009790:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009794:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009796:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009798:	8811      	ldrh	r1, [r2, #0]
 800979a:	400b      	ands	r3, r1
 800979c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80097a2:	f003 fb65 	bl	800ce70 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80097a6:	6820      	ldr	r0, [r4, #0]
 80097a8:	4602      	mov	r2, r0
 80097aa:	e669      	b.n	8009480 <HAL_PCD_IRQHandler+0xc8>
 80097ac:	ffff8f0f 	.word	0xffff8f0f
 80097b0:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80097b4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80097b6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80097b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80097bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097c0:	041b      	lsls	r3, r3, #16
 80097c2:	0c1b      	lsrs	r3, r3, #16
 80097c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80097c8:	f003 fb6e 	bl	800cea8 <HAL_PCD_SOFCallback>
 80097cc:	e630      	b.n	8009430 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80097ce:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 80097d0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80097d2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	f043 0308 	orr.w	r3, r3, #8
 80097dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80097e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80097e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097e8:	041b      	lsls	r3, r3, #16
 80097ea:	0c1b      	lsrs	r3, r3, #16
 80097ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80097f0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f043 0304 	orr.w	r3, r3, #4
 80097fa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80097fe:	f003 fb69 	bl	800ced4 <HAL_PCD_SuspendCallback>
 8009802:	e60f      	b.n	8009424 <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009804:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8009806:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009808:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800980c:	f023 0304 	bic.w	r3, r3, #4
 8009810:	041b      	lsls	r3, r3, #16
 8009812:	0c1b      	lsrs	r3, r3, #16
 8009814:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009818:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800981c:	f023 0308 	bic.w	r3, r3, #8
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	0c1b      	lsrs	r3, r3, #16
 8009824:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8009828:	f003 fb64 	bl	800cef4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8009832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009836:	041b      	lsls	r3, r3, #16
 8009838:	0c1b      	lsrs	r3, r3, #16
 800983a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800983e:	e5ec      	b.n	800941a <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8009840:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8009844:	2b02      	cmp	r3, #2
 8009846:	f000 8120 	beq.w	8009a8a <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800984a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800984e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985a:	041b      	lsls	r3, r3, #16
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009862:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009866:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800986a:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800986e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009872:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009876:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800987a:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800987c:	d06e      	beq.n	800995c <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800987e:	3302      	adds	r3, #2
 8009880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009884:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009888:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800988c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8009890:	461f      	mov	r7, r3
              if (count != 0U)
 8009892:	2b00      	cmp	r3, #0
 8009894:	f43f aeca 	beq.w	800962c <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009898:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 800989c:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80098a0:	f002 fb60 	bl	800bf64 <USB_ReadPMA>
 80098a4:	e6c2      	b.n	800962c <HAL_PCD_IRQHandler+0x274>
 80098a6:	2300      	movs	r3, #0
 80098a8:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80098aa:	4620      	mov	r0, r4
 80098ac:	f003 faf2 	bl	800ce94 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80098b0:	6820      	ldr	r0, [r4, #0]
 80098b2:	4602      	mov	r2, r0
 80098b4:	e5e4      	b.n	8009480 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80098b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80098ba:	8802      	ldrh	r2, [r0, #0]
 80098bc:	4013      	ands	r3, r2
 80098be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80098c4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80098c8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80098d6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80098da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098de:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80098e2:	b193      	cbz	r3, 800990a <HAL_PCD_IRQHandler+0x552>
 80098e4:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80098e8:	b179      	cbz	r1, 800990a <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80098ea:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80098ee:	f002 fb39 	bl	800bf64 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80098f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098f6:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80098fa:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80098fc:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80098fe:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8009900:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009904:	f003 fabc 	bl	800ce80 <HAL_PCD_DataOutStageCallback>
 8009908:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800990a:	8803      	ldrh	r3, [r0, #0]
 800990c:	4602      	mov	r2, r0
 800990e:	051b      	lsls	r3, r3, #20
 8009910:	f53f adb6 	bmi.w	8009480 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009914:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009918:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 800991c:	b29b      	uxth	r3, r3
 800991e:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 8009922:	2900      	cmp	r1, #0
 8009924:	f040 80a6 	bne.w	8009a74 <HAL_PCD_IRQHandler+0x6bc>
 8009928:	5ae9      	ldrh	r1, [r5, r3]
 800992a:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800992e:	0409      	lsls	r1, r1, #16
 8009930:	0c09      	lsrs	r1, r1, #16
 8009932:	52e9      	strh	r1, [r5, r3]
 8009934:	5ae9      	ldrh	r1, [r5, r3]
 8009936:	b289      	uxth	r1, r1
 8009938:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800993c:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800993e:	8803      	ldrh	r3, [r0, #0]
 8009940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009948:	041b      	lsls	r3, r3, #16
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	8003      	strh	r3, [r0, #0]
 800995a:	e591      	b.n	8009480 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800995c:	3306      	adds	r3, #6
 800995e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009962:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009966:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800996a:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 800996e:	461f      	mov	r7, r3
              if (count != 0U)
 8009970:	2b00      	cmp	r3, #0
 8009972:	f43f ae5b 	beq.w	800962c <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009976:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800997a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800997e:	f002 faf1 	bl	800bf64 <USB_ReadPMA>
 8009982:	e653      	b.n	800962c <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009984:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8009988:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800998c:	f002 faea 	bl	800bf64 <USB_ReadPMA>
 8009990:	e64c      	b.n	800962c <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 8009992:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009996:	6820      	ldr	r0, [r4, #0]
 8009998:	4421      	add	r1, r4
 800999a:	f001 ff45 	bl	800b828 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800999e:	6820      	ldr	r0, [r4, #0]
 80099a0:	4602      	mov	r2, r0
 80099a2:	e580      	b.n	80094a6 <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099a4:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 80099a8:	1973      	adds	r3, r6, r5
 80099aa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80099ae:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 80099b6:	45f3      	cmp	fp, lr
 80099b8:	f0c0 80a5 	bcc.w	8009b06 <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 80099bc:	ebab 0c0e 	sub.w	ip, fp, lr
 80099c0:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80099c4:	f1bc 0f00 	cmp.w	ip, #0
 80099c8:	f000 809f 	beq.w	8009b0a <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80099cc:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 80099d0:	d10d      	bne.n	80099ee <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80099d2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80099d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ea:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80099ee:	1973      	adds	r3, r6, r5
 80099f0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80099f4:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 80099f8:	f1bc 0f01 	cmp.w	ip, #1
 80099fc:	f040 80c5 	bne.w	8009b8a <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8009a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a02:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8009a06:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 8009a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8009a0c:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8009a10:	4472      	add	r2, lr
 8009a12:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a16:	4542      	cmp	r2, r8
 8009a18:	f0c0 81ab 	bcc.w	8009d72 <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8009a1c:	eba2 0208 	sub.w	r2, r2, r8
 8009a20:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a22:	fa1f fe88 	uxth.w	lr, r8
 8009a26:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f040 8194 	bne.w	8009d58 <HAL_PCD_IRQHandler+0x9a0>
 8009a30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009a34:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009a38:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	188b      	adds	r3, r1, r2
 8009a40:	f1b8 0f00 	cmp.w	r8, #0
 8009a44:	f040 81d0 	bne.w	8009de8 <HAL_PCD_IRQHandler+0xa30>
 8009a48:	5a8b      	ldrh	r3, [r1, r2]
 8009a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	528b      	strh	r3, [r1, r2]
 8009a54:	5a8b      	ldrh	r3, [r1, r2]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5c:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009a5e:	1972      	adds	r2, r6, r5
 8009a60:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8009a64:	4673      	mov	r3, lr
 8009a66:	4661      	mov	r1, ip
 8009a68:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009a6a:	f002 fa6b 	bl	800bf44 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009a6e:	6820      	ldr	r0, [r4, #0]
 8009a70:	4602      	mov	r2, r0
 8009a72:	e08a      	b.n	8009b8a <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009a74:	293e      	cmp	r1, #62	; 0x3e
 8009a76:	f200 80cb 	bhi.w	8009c10 <HAL_PCD_IRQHandler+0x858>
 8009a7a:	084e      	lsrs	r6, r1, #1
 8009a7c:	07cf      	lsls	r7, r1, #31
 8009a7e:	bf48      	it	mi
 8009a80:	3601      	addmi	r6, #1
 8009a82:	02b1      	lsls	r1, r6, #10
 8009a84:	b289      	uxth	r1, r1
 8009a86:	52e9      	strh	r1, [r5, r3]
 8009a88:	e759      	b.n	800993e <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009a8e:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a92:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009a94:	f000 80c7 	beq.w	8009c26 <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a98:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009aa6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009aaa:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009ab2:	459c      	cmp	ip, r3
 8009ab4:	461f      	mov	r7, r3
 8009ab6:	f0c0 8112 	bcc.w	8009cde <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 8009aba:	ebac 0c03 	sub.w	ip, ip, r3
 8009abe:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009ac2:	f1bc 0f00 	cmp.w	ip, #0
 8009ac6:	f000 810e 	beq.w	8009ce6 <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009aca:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009ace:	d00d      	beq.n	8009aec <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009ad0:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009ad4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009ad8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009adc:	0409      	lsls	r1, r1, #16
 8009ade:	0c09      	lsrs	r1, r1, #16
 8009ae0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009ae4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009ae8:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80c3 	beq.w	8009c78 <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009af2:	1971      	adds	r1, r6, r5
 8009af4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009af8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8009afc:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009b00:	f002 fa30 	bl	800bf64 <USB_ReadPMA>
 8009b04:	e592      	b.n	800962c <HAL_PCD_IRQHandler+0x274>
 8009b06:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b0a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f040 80be 	bne.w	8009c90 <HAL_PCD_IRQHandler+0x8d8>
 8009b14:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009b18:	010b      	lsls	r3, r1, #4
 8009b1a:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009b1e:	4406      	add	r6, r0
 8009b20:	b2ad      	uxth	r5, r5
 8009b22:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b28:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009b2c:	0412      	lsls	r2, r2, #16
 8009b2e:	0c12      	lsrs	r2, r2, #16
 8009b30:	5372      	strh	r2, [r6, r5]
 8009b32:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b34:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b36:	b292      	uxth	r2, r2
 8009b38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b3c:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b3e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009b42:	b280      	uxth	r0, r0
 8009b44:	5a1a      	ldrh	r2, [r3, r0]
 8009b46:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009b4a:	0412      	lsls	r2, r2, #16
 8009b4c:	0c12      	lsrs	r2, r2, #16
 8009b4e:	521a      	strh	r2, [r3, r0]
 8009b50:	5a1a      	ldrh	r2, [r3, r0]
 8009b52:	b292      	uxth	r2, r2
 8009b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b58:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f003 f99a 	bl	800ce94 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009b60:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009b64:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009b66:	d183      	bne.n	8009a70 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009b68:	4602      	mov	r2, r0
 8009b6a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009b6e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b7a:	041b      	lsls	r3, r3, #16
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b86:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009b8a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009b8e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	ea03 030a 	and.w	r3, r3, sl
 8009b98:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8009ba8:	e46a      	b.n	8009480 <HAL_PCD_IRQHandler+0xc8>
 8009baa:	2300      	movs	r3, #0
 8009bac:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bb0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d17f      	bne.n	8009cb8 <HAL_PCD_IRQHandler+0x900>
 8009bb8:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8009bbc:	010b      	lsls	r3, r1, #4
 8009bbe:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009bc2:	4406      	add	r6, r0
 8009bc4:	b2ad      	uxth	r5, r5
 8009bc6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bcc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009bd0:	0412      	lsls	r2, r2, #16
 8009bd2:	0c12      	lsrs	r2, r2, #16
 8009bd4:	5372      	strh	r2, [r6, r5]
 8009bd6:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bd8:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bda:	b292      	uxth	r2, r2
 8009bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009be0:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009be2:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 8009be6:	b280      	uxth	r0, r0
 8009be8:	5a1a      	ldrh	r2, [r3, r0]
 8009bea:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009bee:	0412      	lsls	r2, r2, #16
 8009bf0:	0c12      	lsrs	r2, r2, #16
 8009bf2:	521a      	strh	r2, [r3, r0]
 8009bf4:	5a1a      	ldrh	r2, [r3, r0]
 8009bf6:	b292      	uxth	r2, r2
 8009bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bfc:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f003 f948 	bl	800ce94 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c04:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8009c08:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c0a:	d1ad      	bne.n	8009b68 <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	e7bc      	b.n	8009b8a <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009c10:	094e      	lsrs	r6, r1, #5
 8009c12:	06c9      	lsls	r1, r1, #27
 8009c14:	4989      	ldr	r1, [pc, #548]	; (8009e3c <HAL_PCD_IRQHandler+0xa84>)
 8009c16:	bf08      	it	eq
 8009c18:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8009c1c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8009c20:	b289      	uxth	r1, r1
 8009c22:	52e9      	strh	r1, [r5, r3]
 8009c24:	e68b      	b.n	800993e <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c26:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8009c2a:	3306      	adds	r3, #6
 8009c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c30:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009c34:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8009c38:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8009c40:	459e      	cmp	lr, r3
 8009c42:	461f      	mov	r7, r3
 8009c44:	d360      	bcc.n	8009d08 <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 8009c46:	ebae 0e03 	sub.w	lr, lr, r3
 8009c4a:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8009c4e:	f1be 0f00 	cmp.w	lr, #0
 8009c52:	d05b      	beq.n	8009d0c <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009c54:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009c58:	d10d      	bne.n	8009c76 <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8009c5a:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009c5e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8009c62:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009c66:	0409      	lsls	r1, r1, #16
 8009c68:	0c09      	lsrs	r1, r1, #16
 8009c6a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009c6e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8009c72:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 8009c76:	b90b      	cbnz	r3, 8009c7c <HAL_PCD_IRQHandler+0x8c4>
 8009c78:	461f      	mov	r7, r3
 8009c7a:	e4d7      	b.n	800962c <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009c7c:	1971      	adds	r1, r6, r5
 8009c7e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009c82:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8009c86:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8009c8a:	f002 f96b 	bl	800bf64 <USB_ReadPMA>
 8009c8e:	e4cd      	b.n	800962c <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	f47f af62 	bne.w	8009b5a <HAL_PCD_IRQHandler+0x7a2>
 8009c96:	2500      	movs	r5, #0
 8009c98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009c9c:	010b      	lsls	r3, r1, #4
 8009c9e:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009ca2:	b292      	uxth	r2, r2
 8009ca4:	4406      	add	r6, r0
 8009ca6:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ca8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cb0:	4403      	add	r3, r0
 8009cb2:	b292      	uxth	r2, r2
 8009cb4:	529d      	strh	r5, [r3, r2]
 8009cb6:	e750      	b.n	8009b5a <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d1a0      	bne.n	8009bfe <HAL_PCD_IRQHandler+0x846>
 8009cbc:	2500      	movs	r5, #0
 8009cbe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009cc2:	010b      	lsls	r3, r1, #4
 8009cc4:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8009cc8:	b292      	uxth	r2, r2
 8009cca:	4406      	add	r6, r0
 8009ccc:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009cce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cd6:	4403      	add	r3, r0
 8009cd8:	b292      	uxth	r2, r2
 8009cda:	529d      	strh	r5, [r3, r2]
 8009cdc:	e78f      	b.n	8009bfe <HAL_PCD_IRQHandler+0x846>
 8009cde:	f04f 0c00 	mov.w	ip, #0
 8009ce2:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009ce6:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009cea:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009cee:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009cf2:	0409      	lsls	r1, r1, #16
 8009cf4:	0c09      	lsrs	r1, r1, #16
 8009cf6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009cfa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009cfe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009d02:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009d06:	e6e0      	b.n	8009aca <HAL_PCD_IRQHandler+0x712>
 8009d08:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009d0c:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8009d10:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8009d14:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8009d18:	0409      	lsls	r1, r1, #16
 8009d1a:	0c09      	lsrs	r1, r1, #16
 8009d1c:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8009d20:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8009d24:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8009d28:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8009d2c:	e792      	b.n	8009c54 <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009d2e:	b293      	uxth	r3, r2
 8009d30:	f1be 0f01 	cmp.w	lr, #1
 8009d34:	f47f ac4d 	bne.w	80095d2 <HAL_PCD_IRQHandler+0x21a>
 8009d38:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8009d3c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009d40:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009d44:	b292      	uxth	r2, r2
 8009d46:	528b      	strh	r3, [r1, r2]
 8009d48:	e443      	b.n	80095d2 <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 8009d4a:	b9ba      	cbnz	r2, 8009d7c <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8009d4c:	4698      	mov	r8, r3
 8009d4e:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 8009d52:	e41c      	b.n	800958e <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009d54:	fa1f fe82 	uxth.w	lr, r2
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	f47f ae80 	bne.w	8009a5e <HAL_PCD_IRQHandler+0x6a6>
 8009d5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d62:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 8009d66:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	f822 e003 	strh.w	lr, [r2, r3]
 8009d70:	e675      	b.n	8009a5e <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 8009d72:	bb22      	cbnz	r2, 8009dbe <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 8009d74:	46f0      	mov	r8, lr
 8009d76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8009d7a:	e654      	b.n	8009a26 <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8009d82:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009d86:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8009d8a:	f1be 0f00 	cmp.w	lr, #0
 8009d8e:	d1ce      	bne.n	8009d2e <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009d90:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009d92:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009d96:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8009da0:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009da2:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009da4:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8009da8:	d82b      	bhi.n	8009e02 <HAL_PCD_IRQHandler+0xa4a>
 8009daa:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8009dae:	f018 0f01 	tst.w	r8, #1
 8009db2:	bf18      	it	ne
 8009db4:	3201      	addne	r2, #1
 8009db6:	0292      	lsls	r2, r2, #10
 8009db8:	b292      	uxth	r2, r2
 8009dba:	800a      	strh	r2, [r1, #0]
 8009dbc:	e409      	b.n	80095d2 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 8009dbe:	f04f 0e00 	mov.w	lr, #0
 8009dc2:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8009dc6:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009dca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1c0      	bne.n	8009d54 <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009dd2:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009dd4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009dd8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009ddc:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009de4:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009de8:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8009dec:	d818      	bhi.n	8009e20 <HAL_PCD_IRQHandler+0xa68>
 8009dee:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8009df2:	f018 0f01 	tst.w	r8, #1
 8009df6:	bf18      	it	ne
 8009df8:	3201      	addne	r2, #1
 8009dfa:	0292      	lsls	r2, r2, #10
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	801a      	strh	r2, [r3, #0]
 8009e00:	e62d      	b.n	8009a5e <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e02:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8009e06:	f8df e034 	ldr.w	lr, [pc, #52]	; 8009e3c <HAL_PCD_IRQHandler+0xa84>
 8009e0a:	f018 0f1f 	tst.w	r8, #31
 8009e0e:	bf08      	it	eq
 8009e10:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009e14:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 8009e18:	b292      	uxth	r2, r2
 8009e1a:	800a      	strh	r2, [r1, #0]
 8009e1c:	f7ff bbd9 	b.w	80095d2 <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e20:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8009e24:	4905      	ldr	r1, [pc, #20]	; (8009e3c <HAL_PCD_IRQHandler+0xa84>)
 8009e26:	f018 0f1f 	tst.w	r8, #31
 8009e2a:	bf08      	it	eq
 8009e2c:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8009e30:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 8009e34:	b292      	uxth	r2, r2
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e611      	b.n	8009a5e <HAL_PCD_IRQHandler+0x6a6>
 8009e3a:	bf00      	nop
 8009e3c:	ffff8000 	.word	0xffff8000

08009e40 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009e40:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 8009e44:	2a01      	cmp	r2, #1
 8009e46:	d00e      	beq.n	8009e66 <HAL_PCD_SetAddress+0x26>
{
 8009e48:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e4e:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8009e50:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8009e54:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e58:	f002 f868 	bl	800bf2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009e62:	4618      	mov	r0, r3
}
 8009e64:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009e66:	2002      	movs	r0, #2
}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop

08009e6c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009e6c:	f001 0c07 	and.w	ip, r1, #7
 8009e70:	0609      	lsls	r1, r1, #24
{
 8009e72:	b510      	push	{r4, lr}
 8009e74:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009e76:	d425      	bmi.n	8009ec4 <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 8009e78:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e7c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8009e80:	00c0      	lsls	r0, r0, #3
 8009e82:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 8009e86:	4420      	add	r0, r4
 8009e88:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e8c:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 8009e8e:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8009e90:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e92:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 8009e96:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009e98:	b10a      	cbz	r2, 8009e9e <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8009e9a:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8009e9e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8009ea0:	bf04      	itt	eq
 8009ea2:	2300      	moveq	r3, #0
 8009ea4:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8009ea6:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d019      	beq.n	8009ee2 <HAL_PCD_EP_Open+0x76>
 8009eae:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009eb0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009eb2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009eb6:	f001 fa63 	bl	800b380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 8009ec0:	4618      	mov	r0, r3
}
 8009ec2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ec4:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 8009ec8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009ecc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ed4:	eb0c 0100 	add.w	r1, ip, r0
 8009ed8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009edc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8009ee0:	e7d5      	b.n	8009e8e <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 8009ee2:	2002      	movs	r0, #2
}
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	bf00      	nop

08009ee8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8009ee8:	060b      	lsls	r3, r1, #24
{
 8009eea:	b510      	push	{r4, lr}
 8009eec:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8009eee:	d41b      	bmi.n	8009f28 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ef0:	f001 0307 	and.w	r3, r1, #7
 8009ef4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009ef8:	00d2      	lsls	r2, r2, #3
 8009efa:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8009efe:	4401      	add	r1, r0
    ep->is_in = 0U;
 8009f00:	4402      	add	r2, r0
 8009f02:	2000      	movs	r0, #0
 8009f04:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009f08:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009f0a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d019      	beq.n	8009f46 <HAL_PCD_EP_Close+0x5e>
 8009f12:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009f14:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8009f16:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009f1a:	f001 fba5 	bl	800b668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8009f24:	4618      	mov	r0, r3
}
 8009f26:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8009f28:	2001      	movs	r0, #1
 8009f2a:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f2e:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8009f30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009f34:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f38:	4611      	mov	r1, r2
    ep->is_in = 1U;
 8009f3a:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009f3c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8009f3e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d1e5      	bne.n	8009f12 <HAL_PCD_EP_Close+0x2a>
 8009f46:	2002      	movs	r0, #2
}
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	bf00      	nop

08009f4c <HAL_PCD_EP_Receive>:
{
 8009f4c:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8009f4e:	2400      	movs	r4, #0
 8009f50:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8009f54:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8009f58:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8009f5c:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f60:	6800      	ldr	r0, [r0, #0]
 8009f62:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 8009f66:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8009f6a:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f6e:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f72:	f001 fc59 	bl	800b828 <USB_EPStartXfer>
}
 8009f76:	4620      	mov	r0, r4
 8009f78:	bd10      	pop	{r4, pc}
 8009f7a:	bf00      	nop

08009f7c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f7c:	f001 0107 	and.w	r1, r1, #7
 8009f80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009f84:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8009f88:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop

08009f90 <HAL_PCD_EP_Transmit>:
{
 8009f90:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 8009f92:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 8009f94:	2500      	movs	r5, #0
{
 8009f96:	4604      	mov	r4, r0
 8009f98:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8009f9c:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fa0:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 8009fa4:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fa8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8009fac:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fb0:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 8009fb4:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 8009fb8:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 8009fbc:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 8009fc0:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 8009fc4:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009fc8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8009fcc:	6800      	ldr	r0, [r0, #0]
 8009fce:	f001 fc2b 	bl	800b828 <USB_EPStartXfer>
}
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
 8009fd6:	bf00      	nop

08009fd8 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fd8:	6843      	ldr	r3, [r0, #4]
{
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	4604      	mov	r4, r0
 8009fde:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fe2:	4298      	cmp	r0, r3
 8009fe4:	d82d      	bhi.n	800a042 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8009fe6:	060b      	lsls	r3, r1, #24
 8009fe8:	d41a      	bmi.n	800a020 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 8009fea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009fee:	00c9      	lsls	r1, r1, #3
 8009ff0:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 8009ff4:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8009ff6:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8009ffe:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a000:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a002:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a004:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a008:	429a      	cmp	r2, r3
 800a00a:	d018      	beq.n	800a03e <HAL_PCD_EP_SetStall+0x66>
 800a00c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	f001 ff13 	bl	800be3c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800a016:	2300      	movs	r3, #0
 800a018:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a01c:	4618      	mov	r0, r3
}
 800a01e:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 800a020:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a022:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 800a024:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a028:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800a02c:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a02e:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 800a030:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800a032:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800a034:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800a036:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d1e6      	bne.n	800a00c <HAL_PCD_EP_SetStall+0x34>
 800a03e:	2002      	movs	r0, #2
}
 800a040:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a042:	2001      	movs	r0, #1
}
 800a044:	bd10      	pop	{r4, pc}
 800a046:	bf00      	nop

0800a048 <HAL_PCD_EP_ClrStall>:
{
 800a048:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a04a:	6843      	ldr	r3, [r0, #4]
 800a04c:	f001 020f 	and.w	r2, r1, #15
 800a050:	429a      	cmp	r2, r3
 800a052:	d832      	bhi.n	800a0ba <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800a054:	060b      	lsls	r3, r1, #24
 800a056:	4604      	mov	r4, r0
 800a058:	d41c      	bmi.n	800a094 <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a05a:	f001 0307 	and.w	r3, r1, #7
 800a05e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a062:	00d2      	lsls	r2, r2, #3
 800a064:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 800a068:	4401      	add	r1, r0
    ep->is_in = 0U;
 800a06a:	4402      	add	r2, r0
  ep->is_stall = 0U;
 800a06c:	2500      	movs	r5, #0
    ep->is_in = 0U;
 800a06e:	2000      	movs	r0, #0
 800a070:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800a074:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a076:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a078:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d01a      	beq.n	800a0b6 <HAL_PCD_EP_ClrStall+0x6e>
 800a080:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a082:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a084:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a088:	f001 ff00 	bl	800be8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a08c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 800a090:	4628      	mov	r0, r5
}
 800a092:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800a094:	2001      	movs	r0, #1
 800a096:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a09a:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 800a09c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a0a0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0a4:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800a0a6:	2500      	movs	r5, #0
    ep->is_in = 1U;
 800a0a8:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0aa:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800a0ac:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800a0ae:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d1e4      	bne.n	800a080 <HAL_PCD_EP_ClrStall+0x38>
 800a0b6:	2002      	movs	r0, #2
}
 800a0b8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a0ba:	2001      	movs	r0, #1
}
 800a0bc:	bd38      	pop	{r3, r4, r5, pc}
 800a0be:	bf00      	nop

0800a0c0 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a0c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a0c4:	d00b      	beq.n	800a0de <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0c6:	f001 0107 	and.w	r1, r1, #7
 800a0ca:	3101      	adds	r1, #1
 800a0cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a0d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a0d4:	b95a      	cbnz	r2, 800a0ee <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 800a0d6:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800a0d8:	80cb      	strh	r3, [r1, #6]
 800a0da:	730a      	strb	r2, [r1, #12]
}
 800a0dc:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 800a0de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a0e2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a0e6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d0f3      	beq.n	800a0d6 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 800a0ee:	2201      	movs	r2, #1
}
 800a0f0:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a0f2:	608b      	str	r3, [r1, #8]
 800a0f4:	730a      	strb	r2, [r1, #12]
}
 800a0f6:	4770      	bx	lr

0800a0f8 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a0f8:	4b1d      	ldr	r3, [pc, #116]	; (800a170 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 800a0fa:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800a102:	d116      	bne.n	800a132 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a106:	00d2      	lsls	r2, r2, #3
 800a108:	d420      	bmi.n	800a14c <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a10a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a10c:	4919      	ldr	r1, [pc, #100]	; (800a174 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800a10e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a112:	625a      	str	r2, [r3, #36]	; 0x24
 800a114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a116:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800a11a:	9201      	str	r2, [sp, #4]
 800a11c:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a11e:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800a120:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a122:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a126:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a12a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800a12e:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a130:	d013      	beq.n	800a15a <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a132:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a134:	4a10      	ldr	r2, [pc, #64]	; (800a178 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800a136:	6813      	ldr	r3, [r2, #0]
 800a138:	f023 0301 	bic.w	r3, r3, #1
 800a13c:	4303      	orrs	r3, r0
 800a13e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800a146:	4058      	eors	r0, r3
 800a148:	b002      	add	sp, #8
 800a14a:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800a154:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800a158:	d1eb      	bne.n	800a132 <RCC_SetFlashLatencyFromMSIRange+0x3a>
 800a15a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800a15e:	d1e8      	bne.n	800a132 <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 800a160:	4a05      	ldr	r2, [pc, #20]	; (800a178 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800a162:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 800a164:	6813      	ldr	r3, [r2, #0]
 800a166:	f043 0304 	orr.w	r3, r3, #4
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	e7e2      	b.n	800a134 <RCC_SetFlashLatencyFromMSIRange+0x3c>
 800a16e:	bf00      	nop
 800a170:	40023800 	.word	0x40023800
 800a174:	40007000 	.word	0x40007000
 800a178:	40023c00 	.word	0x40023c00

0800a17c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f000 81f8 	beq.w	800a572 <HAL_RCC_OscConfig+0x3f6>
{
 800a182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a186:	4aa2      	ldr	r2, [pc, #648]	; (800a410 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a188:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a18a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a18c:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a18e:	07d9      	lsls	r1, r3, #31
 800a190:	4604      	mov	r4, r0
{
 800a192:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a194:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a198:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a19c:	d52e      	bpl.n	800a1fc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a19e:	2d08      	cmp	r5, #8
 800a1a0:	f000 8128 	beq.w	800a3f4 <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a1a4:	2d0c      	cmp	r5, #12
 800a1a6:	f000 8122 	beq.w	800a3ee <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d00f      	beq.n	800a1d0 <HAL_RCC_OscConfig+0x54>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 8180 	beq.w	800a4b6 <HAL_RCC_OscConfig+0x33a>
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	4b95      	ldr	r3, [pc, #596]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	f000 81db 	beq.w	800a576 <HAL_RCC_OscConfig+0x3fa>
 800a1c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e004      	b.n	800a1da <HAL_RCC_OscConfig+0x5e>
 800a1d0:	4a8f      	ldr	r2, [pc, #572]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a1da:	f7fd fdc1 	bl	8007d60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1de:	f8df 8230 	ldr.w	r8, [pc, #560]	; 800a410 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 800a1e2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1e4:	e005      	b.n	800a1f2 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a1e6:	f7fd fdbb 	bl	8007d60 <HAL_GetTick>
 800a1ea:	1bc0      	subs	r0, r0, r7
 800a1ec:	2864      	cmp	r0, #100	; 0x64
 800a1ee:	f200 815e 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1f6:	039b      	lsls	r3, r3, #14
 800a1f8:	d5f5      	bpl.n	800a1e6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	0799      	lsls	r1, r3, #30
 800a1fe:	d522      	bpl.n	800a246 <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a200:	2d04      	cmp	r5, #4
 800a202:	f000 8114 	beq.w	800a42e <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a206:	2d0c      	cmp	r5, #12
 800a208:	f000 810e 	beq.w	800a428 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a20c:	68e3      	ldr	r3, [r4, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 8179 	beq.w	800a506 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 800a214:	2201      	movs	r2, #1
 800a216:	4b7f      	ldr	r3, [pc, #508]	; (800a414 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a218:	4f7d      	ldr	r7, [pc, #500]	; (800a410 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 800a21a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800a21c:	f7fd fda0 	bl	8007d60 <HAL_GetTick>
 800a220:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a222:	e005      	b.n	800a230 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a224:	f7fd fd9c 	bl	8007d60 <HAL_GetTick>
 800a228:	1b80      	subs	r0, r0, r6
 800a22a:	2802      	cmp	r0, #2
 800a22c:	f200 813f 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	079b      	lsls	r3, r3, #30
 800a234:	d5f6      	bpl.n	800a224 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6922      	ldr	r2, [r4, #16]
 800a23a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800a23e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a242:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a244:	6823      	ldr	r3, [r4, #0]
 800a246:	06d9      	lsls	r1, r3, #27
 800a248:	d525      	bpl.n	800a296 <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	f000 8098 	beq.w	800a380 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a250:	69a3      	ldr	r3, [r4, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 816a 	beq.w	800a52c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 800a258:	2201      	movs	r2, #1
 800a25a:	4b6e      	ldr	r3, [pc, #440]	; (800a414 <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a25c:	4e6c      	ldr	r6, [pc, #432]	; (800a410 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 800a25e:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800a260:	f7fd fd7e 	bl	8007d60 <HAL_GetTick>
 800a264:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a266:	e005      	b.n	800a274 <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a268:	f7fd fd7a 	bl	8007d60 <HAL_GetTick>
 800a26c:	1bc0      	subs	r0, r0, r7
 800a26e:	2802      	cmp	r0, #2
 800a270:	f200 811d 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a274:	6833      	ldr	r3, [r6, #0]
 800a276:	059b      	lsls	r3, r3, #22
 800a278:	d5f6      	bpl.n	800a268 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a27a:	6873      	ldr	r3, [r6, #4]
 800a27c:	6a22      	ldr	r2, [r4, #32]
 800a27e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a282:	4313      	orrs	r3, r2
 800a284:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a286:	6873      	ldr	r3, [r6, #4]
 800a288:	69e2      	ldr	r2, [r4, #28]
 800a28a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a28e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a292:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	0719      	lsls	r1, r3, #28
 800a298:	d516      	bpl.n	800a2c8 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a29a:	6963      	ldr	r3, [r4, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8121 	beq.w	800a4e4 <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4b5b      	ldr	r3, [pc, #364]	; (800a414 <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2a6:	4f5a      	ldr	r7, [pc, #360]	; (800a410 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 800a2a8:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a2ac:	f7fd fd58 	bl	8007d60 <HAL_GetTick>
 800a2b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2b2:	e005      	b.n	800a2c0 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a2b4:	f7fd fd54 	bl	8007d60 <HAL_GetTick>
 800a2b8:	1b80      	subs	r0, r0, r6
 800a2ba:	2802      	cmp	r0, #2
 800a2bc:	f200 80f7 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	079a      	lsls	r2, r3, #30
 800a2c4:	d5f6      	bpl.n	800a2b4 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	075e      	lsls	r6, r3, #29
 800a2ca:	d53b      	bpl.n	800a344 <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2cc:	4b50      	ldr	r3, [pc, #320]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d0:	00d0      	lsls	r0, r2, #3
 800a2d2:	f100 8129 	bmi.w	800a528 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 800a2d6:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a2de:	625a      	str	r2, [r3, #36]	; 0x24
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2ea:	4f4b      	ldr	r7, [pc, #300]	; (800a418 <HAL_RCC_OscConfig+0x29c>)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	05d9      	lsls	r1, r3, #23
 800a2f0:	f140 80cc 	bpl.w	800a48c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2f4:	68a3      	ldr	r3, [r4, #8]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	f000 8175 	beq.w	800a5e6 <HAL_RCC_OscConfig+0x46a>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80a9 	beq.w	800a454 <HAL_RCC_OscConfig+0x2d8>
 800a302:	2b05      	cmp	r3, #5
 800a304:	4b42      	ldr	r3, [pc, #264]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a308:	f000 818b 	beq.w	800a622 <HAL_RCC_OscConfig+0x4a6>
 800a30c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a310:	635a      	str	r2, [r3, #52]	; 0x34
 800a312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a318:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a31a:	f7fd fd21 	bl	8007d60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a31e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a322:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a324:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a410 <HAL_RCC_OscConfig+0x294>
 800a328:	e005      	b.n	800a336 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a32a:	f7fd fd19 	bl	8007d60 <HAL_GetTick>
 800a32e:	1bc0      	subs	r0, r0, r7
 800a330:	4548      	cmp	r0, r9
 800a332:	f200 80bc 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a336:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800a33a:	059b      	lsls	r3, r3, #22
 800a33c:	d5f5      	bpl.n	800a32a <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 800a33e:	2e00      	cmp	r6, #0
 800a340:	f040 814b 	bne.w	800a5da <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a344:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a346:	b1b8      	cbz	r0, 800a378 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a348:	2d0c      	cmp	r5, #12
 800a34a:	f000 8152 	beq.w	800a5f2 <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a34e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a350:	f04f 0200 	mov.w	r2, #0
 800a354:	4b2f      	ldr	r3, [pc, #188]	; (800a414 <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a356:	f000 8116 	beq.w	800a586 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 800a35a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a35c:	f7fd fd00 	bl	8007d60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a360:	4d2b      	ldr	r5, [pc, #172]	; (800a410 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 800a362:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a364:	e005      	b.n	800a372 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a366:	f7fd fcfb 	bl	8007d60 <HAL_GetTick>
 800a36a:	1b00      	subs	r0, r0, r4
 800a36c:	2802      	cmp	r0, #2
 800a36e:	f200 809e 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	019b      	lsls	r3, r3, #6
 800a376:	d4f6      	bmi.n	800a366 <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 800a378:	2000      	movs	r0, #0
}
 800a37a:	b003      	add	sp, #12
 800a37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a380:	4b23      	ldr	r3, [pc, #140]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	059a      	lsls	r2, r3, #22
 800a386:	d502      	bpl.n	800a38e <HAL_RCC_OscConfig+0x212>
 800a388:	69a3      	ldr	r3, [r4, #24]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d03b      	beq.n	800a406 <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a38e:	4e20      	ldr	r6, [pc, #128]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a390:	6a20      	ldr	r0, [r4, #32]
 800a392:	6873      	ldr	r3, [r6, #4]
 800a394:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a398:	4298      	cmp	r0, r3
 800a39a:	f240 80d7 	bls.w	800a54c <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a39e:	f7ff feab 	bl	800a0f8 <RCC_SetFlashLatencyFromMSIRange>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d12f      	bne.n	800a406 <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3a6:	6872      	ldr	r2, [r6, #4]
 800a3a8:	6a23      	ldr	r3, [r4, #32]
 800a3aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a3b2:	6872      	ldr	r2, [r6, #4]
 800a3b4:	69e1      	ldr	r1, [r4, #28]
 800a3b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a3ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a3be:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a3c0:	4a13      	ldr	r2, [pc, #76]	; (800a410 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a3c2:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a3c4:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a3c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a3d0:	4a12      	ldr	r2, [pc, #72]	; (800a41c <HAL_RCC_OscConfig+0x2a0>)
 800a3d2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800a3d6:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a3d8:	4811      	ldr	r0, [pc, #68]	; (800a420 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800a3da:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 800a3dc:	4a11      	ldr	r2, [pc, #68]	; (800a424 <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a3de:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 800a3e0:	6810      	ldr	r0, [r2, #0]
 800a3e2:	f7fd fc7b 	bl	8007cdc <HAL_InitTick>
        if(status != HAL_OK)
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d1c7      	bne.n	800a37a <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	e753      	b.n	800a296 <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	f43f aedb 	beq.w	800a1aa <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3f4:	4a06      	ldr	r2, [pc, #24]	; (800a410 <HAL_RCC_OscConfig+0x294>)
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	0392      	lsls	r2, r2, #14
 800a3fa:	f57f aeff 	bpl.w	800a1fc <HAL_RCC_OscConfig+0x80>
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	2a00      	cmp	r2, #0
 800a402:	f47f aefb 	bne.w	800a1fc <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 800a406:	2001      	movs	r0, #1
}
 800a408:	b003      	add	sp, #12
 800a40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40e:	bf00      	nop
 800a410:	40023800 	.word	0x40023800
 800a414:	42470000 	.word	0x42470000
 800a418:	40007000 	.word	0x40007000
 800a41c:	080117c4 	.word	0x080117c4
 800a420:	20000024 	.word	0x20000024
 800a424:	2000002c 	.word	0x2000002c
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a428:	2e00      	cmp	r6, #0
 800a42a:	f47f aeef 	bne.w	800a20c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a42e:	4a81      	ldr	r2, [pc, #516]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	0792      	lsls	r2, r2, #30
 800a434:	d502      	bpl.n	800a43c <HAL_RCC_OscConfig+0x2c0>
 800a436:	68e2      	ldr	r2, [r4, #12]
 800a438:	2a01      	cmp	r2, #1
 800a43a:	d1e4      	bne.n	800a406 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a43c:	497d      	ldr	r1, [pc, #500]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
 800a43e:	6920      	ldr	r0, [r4, #16]
 800a440:	684a      	ldr	r2, [r1, #4]
 800a442:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800a446:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800a44a:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a44c:	06d9      	lsls	r1, r3, #27
 800a44e:	f57f af22 	bpl.w	800a296 <HAL_RCC_OscConfig+0x11a>
 800a452:	e6fa      	b.n	800a24a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a454:	4f77      	ldr	r7, [pc, #476]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a456:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a460:	637b      	str	r3, [r7, #52]	; 0x34
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a468:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 800a46a:	f7fd fc79 	bl	8007d60 <HAL_GetTick>
 800a46e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a470:	e005      	b.n	800a47e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a472:	f7fd fc75 	bl	8007d60 <HAL_GetTick>
 800a476:	eba0 0008 	sub.w	r0, r0, r8
 800a47a:	4548      	cmp	r0, r9
 800a47c:	d817      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a480:	0598      	lsls	r0, r3, #22
 800a482:	d4f6      	bmi.n	800a472 <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 800a484:	2e00      	cmp	r6, #0
 800a486:	f43f af5d 	beq.w	800a344 <HAL_RCC_OscConfig+0x1c8>
 800a48a:	e0a6      	b.n	800a5da <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a492:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800a494:	f7fd fc64 	bl	8007d60 <HAL_GetTick>
 800a498:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	05da      	lsls	r2, r3, #23
 800a49e:	f53f af29 	bmi.w	800a2f4 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4a2:	f7fd fc5d 	bl	8007d60 <HAL_GetTick>
 800a4a6:	eba0 0008 	sub.w	r0, r0, r8
 800a4aa:	2864      	cmp	r0, #100	; 0x64
 800a4ac:	d9f5      	bls.n	800a49a <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800a4ae:	2003      	movs	r0, #3
}
 800a4b0:	b003      	add	sp, #12
 800a4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4b6:	4f5f      	ldr	r7, [pc, #380]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4c6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800a4c8:	f7fd fc4a 	bl	8007d60 <HAL_GetTick>
 800a4cc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4ce:	e005      	b.n	800a4dc <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4d0:	f7fd fc46 	bl	8007d60 <HAL_GetTick>
 800a4d4:	eba0 0008 	sub.w	r0, r0, r8
 800a4d8:	2864      	cmp	r0, #100	; 0x64
 800a4da:	d8e8      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	0398      	lsls	r0, r3, #14
 800a4e0:	d4f6      	bmi.n	800a4d0 <HAL_RCC_OscConfig+0x354>
 800a4e2:	e68a      	b.n	800a1fa <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 800a4e4:	4a54      	ldr	r2, [pc, #336]	; (800a638 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4e6:	4f53      	ldr	r7, [pc, #332]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 800a4e8:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 800a4ec:	f7fd fc38 	bl	8007d60 <HAL_GetTick>
 800a4f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4f2:	e004      	b.n	800a4fe <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4f4:	f7fd fc34 	bl	8007d60 <HAL_GetTick>
 800a4f8:	1b80      	subs	r0, r0, r6
 800a4fa:	2802      	cmp	r0, #2
 800a4fc:	d8d7      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	079b      	lsls	r3, r3, #30
 800a502:	d4f7      	bmi.n	800a4f4 <HAL_RCC_OscConfig+0x378>
 800a504:	e6df      	b.n	800a2c6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800a506:	4a4c      	ldr	r2, [pc, #304]	; (800a638 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a508:	4f4a      	ldr	r7, [pc, #296]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 800a50a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a50c:	f7fd fc28 	bl	8007d60 <HAL_GetTick>
 800a510:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a512:	e004      	b.n	800a51e <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a514:	f7fd fc24 	bl	8007d60 <HAL_GetTick>
 800a518:	1b80      	subs	r0, r0, r6
 800a51a:	2802      	cmp	r0, #2
 800a51c:	d8c7      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	0798      	lsls	r0, r3, #30
 800a522:	d4f7      	bmi.n	800a514 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	e68e      	b.n	800a246 <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 800a528:	2600      	movs	r6, #0
 800a52a:	e6de      	b.n	800a2ea <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 800a52c:	4a42      	ldr	r2, [pc, #264]	; (800a638 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a52e:	4f41      	ldr	r7, [pc, #260]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 800a530:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800a532:	f7fd fc15 	bl	8007d60 <HAL_GetTick>
 800a536:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a538:	e004      	b.n	800a544 <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a53a:	f7fd fc11 	bl	8007d60 <HAL_GetTick>
 800a53e:	1b80      	subs	r0, r0, r6
 800a540:	2802      	cmp	r0, #2
 800a542:	d8b4      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	0598      	lsls	r0, r3, #22
 800a548:	d4f7      	bmi.n	800a53a <HAL_RCC_OscConfig+0x3be>
 800a54a:	e74e      	b.n	800a3ea <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a54c:	6873      	ldr	r3, [r6, #4]
 800a54e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a552:	4303      	orrs	r3, r0
 800a554:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a556:	6873      	ldr	r3, [r6, #4]
 800a558:	69e2      	ldr	r2, [r4, #28]
 800a55a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a55e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a562:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a564:	f7ff fdc8 	bl	800a0f8 <RCC_SetFlashLatencyFromMSIRange>
 800a568:	2800      	cmp	r0, #0
 800a56a:	f47f af4c 	bne.w	800a406 <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800a56e:	6a23      	ldr	r3, [r4, #32]
 800a570:	e726      	b.n	800a3c0 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 800a572:	2001      	movs	r0, #1
}
 800a574:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a576:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	e629      	b.n	800a1da <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 800a586:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a588:	f7fd fbea 	bl	8007d60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a58c:	4e29      	ldr	r6, [pc, #164]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a58e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a590:	e004      	b.n	800a59c <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a592:	f7fd fbe5 	bl	8007d60 <HAL_GetTick>
 800a596:	1b40      	subs	r0, r0, r5
 800a598:	2802      	cmp	r0, #2
 800a59a:	d888      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	0199      	lsls	r1, r3, #6
 800a5a0:	d4f7      	bmi.n	800a592 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5a2:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800a5a6:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 800a5a8:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5aa:	68b2      	ldr	r2, [r6, #8]
 800a5ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a5ae:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800a5b2:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800a5b4:	4a20      	ldr	r2, [pc, #128]	; (800a638 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5b6:	4303      	orrs	r3, r0
 800a5b8:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 800a5ba:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800a5bc:	f7fd fbd0 	bl	8007d60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5c0:	4d1c      	ldr	r5, [pc, #112]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 800a5c2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5c4:	e005      	b.n	800a5d2 <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5c6:	f7fd fbcb 	bl	8007d60 <HAL_GetTick>
 800a5ca:	1b00      	subs	r0, r0, r4
 800a5cc:	2802      	cmp	r0, #2
 800a5ce:	f63f af6e 	bhi.w	800a4ae <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	019a      	lsls	r2, r3, #6
 800a5d6:	d5f6      	bpl.n	800a5c6 <HAL_RCC_OscConfig+0x44a>
 800a5d8:	e6ce      	b.n	800a378 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5da:	4a16      	ldr	r2, [pc, #88]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
 800a5dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a5de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5e2:	6253      	str	r3, [r2, #36]	; 0x24
 800a5e4:	e6ae      	b.n	800a344 <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5e6:	4a13      	ldr	r2, [pc, #76]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
 800a5e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a5ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ee:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a5f0:	e693      	b.n	800a31a <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	f43f aec1 	beq.w	800a37a <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800a5f8:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 800a5fc:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5fe:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800a602:	4291      	cmp	r1, r2
 800a604:	f47f aeff 	bne.w	800a406 <HAL_RCC_OscConfig+0x28a>
 800a608:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a60a:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60e:	4291      	cmp	r1, r2
 800a610:	f47f aef9 	bne.w	800a406 <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800a614:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800a616:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 800a61a:	1a18      	subs	r0, r3, r0
 800a61c:	bf18      	it	ne
 800a61e:	2001      	movne	r0, #1
 800a620:	e6ab      	b.n	800a37a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a626:	635a      	str	r2, [r3, #52]	; 0x34
 800a628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a62a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a62e:	635a      	str	r2, [r3, #52]	; 0x34
 800a630:	e673      	b.n	800a31a <HAL_RCC_OscConfig+0x19e>
 800a632:	bf00      	nop
 800a634:	40023800 	.word	0x40023800
 800a638:	42470000 	.word	0x42470000

0800a63c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f000 80c2 	beq.w	800a7c6 <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a642:	4a85      	ldr	r2, [pc, #532]	; (800a858 <HAL_RCC_ClockConfig+0x21c>)
{
 800a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a648:	6813      	ldr	r3, [r2, #0]
 800a64a:	4604      	mov	r4, r0
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	428b      	cmp	r3, r1
 800a652:	460d      	mov	r5, r1
 800a654:	d213      	bcs.n	800a67e <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a656:	2901      	cmp	r1, #1
 800a658:	d103      	bne.n	800a662 <HAL_RCC_ClockConfig+0x26>
 800a65a:	6813      	ldr	r3, [r2, #0]
 800a65c:	f043 0304 	orr.w	r3, r3, #4
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	4a7d      	ldr	r2, [pc, #500]	; (800a858 <HAL_RCC_ClockConfig+0x21c>)
 800a664:	6813      	ldr	r3, [r2, #0]
 800a666:	f023 0301 	bic.w	r3, r3, #1
 800a66a:	432b      	orrs	r3, r5
 800a66c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a66e:	6813      	ldr	r3, [r2, #0]
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	42ab      	cmp	r3, r5
 800a676:	d002      	beq.n	800a67e <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 800a678:	2001      	movs	r0, #1
}
 800a67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	0799      	lsls	r1, r3, #30
 800a682:	d506      	bpl.n	800a692 <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a684:	4975      	ldr	r1, [pc, #468]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
 800a686:	68a0      	ldr	r0, [r4, #8]
 800a688:	688a      	ldr	r2, [r1, #8]
 800a68a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a68e:	4302      	orrs	r2, r0
 800a690:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a692:	07da      	lsls	r2, r3, #31
 800a694:	d529      	bpl.n	800a6ea <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a696:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a698:	4b70      	ldr	r3, [pc, #448]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a69a:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a69c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a69e:	f000 808e 	beq.w	800a7be <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6a2:	2a03      	cmp	r2, #3
 800a6a4:	f000 8085 	beq.w	800a7b2 <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a6a8:	2a01      	cmp	r2, #1
 800a6aa:	f000 80d1 	beq.w	800a850 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800a6ae:	0598      	lsls	r0, r3, #22
 800a6b0:	d5e2      	bpl.n	800a678 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6b2:	4e6a      	ldr	r6, [pc, #424]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6b4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6b8:	68b3      	ldr	r3, [r6, #8]
 800a6ba:	f023 0303 	bic.w	r3, r3, #3
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800a6c2:	f7fd fb4d 	bl	8007d60 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6c6:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800a6c8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d055      	beq.n	800a77a <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d05e      	beq.n	800a790 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d105      	bne.n	800a6e2 <HAL_RCC_ClockConfig+0xa6>
 800a6d6:	e066      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6d8:	f7fd fb42 	bl	8007d60 <HAL_GetTick>
 800a6dc:	1bc0      	subs	r0, r0, r7
 800a6de:	4540      	cmp	r0, r8
 800a6e0:	d873      	bhi.n	800a7ca <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a6e2:	68b3      	ldr	r3, [r6, #8]
 800a6e4:	f013 0f0c 	tst.w	r3, #12
 800a6e8:	d1f6      	bne.n	800a6d8 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6ea:	4a5b      	ldr	r2, [pc, #364]	; (800a858 <HAL_RCC_ClockConfig+0x21c>)
 800a6ec:	6813      	ldr	r3, [r2, #0]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	42ab      	cmp	r3, r5
 800a6f4:	d906      	bls.n	800a704 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	f023 0301 	bic.w	r3, r3, #1
 800a6fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6fe:	6813      	ldr	r3, [r2, #0]
 800a700:	07da      	lsls	r2, r3, #31
 800a702:	d4b9      	bmi.n	800a678 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	0759      	lsls	r1, r3, #29
 800a708:	d506      	bpl.n	800a718 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a70a:	4954      	ldr	r1, [pc, #336]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
 800a70c:	68e0      	ldr	r0, [r4, #12]
 800a70e:	688a      	ldr	r2, [r1, #8]
 800a710:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a714:	4302      	orrs	r2, r0
 800a716:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a718:	071b      	lsls	r3, r3, #28
 800a71a:	d420      	bmi.n	800a75e <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 800a71c:	494f      	ldr	r1, [pc, #316]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
 800a71e:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 800a720:	f002 030c 	and.w	r3, r2, #12
 800a724:	2b08      	cmp	r3, #8
 800a726:	d079      	beq.n	800a81c <HAL_RCC_ClockConfig+0x1e0>
 800a728:	2b0c      	cmp	r3, #12
 800a72a:	d050      	beq.n	800a7ce <HAL_RCC_ClockConfig+0x192>
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d044      	beq.n	800a7ba <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a730:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a734:	684b      	ldr	r3, [r1, #4]
 800a736:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a73a:	3301      	adds	r3, #1
 800a73c:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a73e:	4b47      	ldr	r3, [pc, #284]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
 800a740:	4a47      	ldr	r2, [pc, #284]	; (800a860 <HAL_RCC_ClockConfig+0x224>)
 800a742:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 800a744:	4947      	ldr	r1, [pc, #284]	; (800a864 <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a746:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a74a:	5cd3      	ldrb	r3, [r2, r3]
 800a74c:	4a46      	ldr	r2, [pc, #280]	; (800a868 <HAL_RCC_ClockConfig+0x22c>)
 800a74e:	fa20 f303 	lsr.w	r3, r0, r3
}
 800a752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800a756:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a758:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800a75a:	f7fd babf 	b.w	8007cdc <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a75e:	4a3f      	ldr	r2, [pc, #252]	; (800a85c <HAL_RCC_ClockConfig+0x220>)
 800a760:	6921      	ldr	r1, [r4, #16]
 800a762:	6893      	ldr	r3, [r2, #8]
 800a764:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a768:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a76c:	6093      	str	r3, [r2, #8]
 800a76e:	e7d5      	b.n	800a71c <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a770:	f7fd faf6 	bl	8007d60 <HAL_GetTick>
 800a774:	1bc3      	subs	r3, r0, r7
 800a776:	4543      	cmp	r3, r8
 800a778:	d827      	bhi.n	800a7ca <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a77a:	68b3      	ldr	r3, [r6, #8]
 800a77c:	f003 030c 	and.w	r3, r3, #12
 800a780:	2b08      	cmp	r3, #8
 800a782:	d1f5      	bne.n	800a770 <HAL_RCC_ClockConfig+0x134>
 800a784:	e7b1      	b.n	800a6ea <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a786:	f7fd faeb 	bl	8007d60 <HAL_GetTick>
 800a78a:	1bc0      	subs	r0, r0, r7
 800a78c:	4540      	cmp	r0, r8
 800a78e:	d81c      	bhi.n	800a7ca <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a790:	68b3      	ldr	r3, [r6, #8]
 800a792:	f003 030c 	and.w	r3, r3, #12
 800a796:	2b0c      	cmp	r3, #12
 800a798:	d1f5      	bne.n	800a786 <HAL_RCC_ClockConfig+0x14a>
 800a79a:	e7a6      	b.n	800a6ea <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a79c:	f7fd fae0 	bl	8007d60 <HAL_GetTick>
 800a7a0:	1bc0      	subs	r0, r0, r7
 800a7a2:	4540      	cmp	r0, r8
 800a7a4:	d811      	bhi.n	800a7ca <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7a6:	68b3      	ldr	r3, [r6, #8]
 800a7a8:	f003 030c 	and.w	r3, r3, #12
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d1f5      	bne.n	800a79c <HAL_RCC_ClockConfig+0x160>
 800a7b0:	e79b      	b.n	800a6ea <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7b2:	019f      	lsls	r7, r3, #6
 800a7b4:	f53f af7d 	bmi.w	800a6b2 <HAL_RCC_ClockConfig+0x76>
 800a7b8:	e75e      	b.n	800a678 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 800a7ba:	482c      	ldr	r0, [pc, #176]	; (800a86c <HAL_RCC_ClockConfig+0x230>)
 800a7bc:	e7bf      	b.n	800a73e <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7be:	039b      	lsls	r3, r3, #14
 800a7c0:	f53f af77 	bmi.w	800a6b2 <HAL_RCC_ClockConfig+0x76>
 800a7c4:	e758      	b.n	800a678 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 800a7c6:	2001      	movs	r0, #1
}
 800a7c8:	4770      	bx	lr
          return HAL_TIMEOUT;
 800a7ca:	2003      	movs	r0, #3
 800a7cc:	e755      	b.n	800a67a <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a7ce:	4828      	ldr	r0, [pc, #160]	; (800a870 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7d0:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a7d2:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800a7d6:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a7d8:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7dc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a7e0:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a7e4:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7e8:	d01a      	beq.n	800a820 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a7ea:	1b09      	subs	r1, r1, r4
 800a7ec:	eb65 0505 	sbc.w	r5, r5, r5
 800a7f0:	01ab      	lsls	r3, r5, #6
 800a7f2:	0188      	lsls	r0, r1, #6
 800a7f4:	1a40      	subs	r0, r0, r1
 800a7f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a7fa:	eb63 0305 	sbc.w	r3, r3, r5
 800a7fe:	00c1      	lsls	r1, r0, #3
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	190c      	adds	r4, r1, r4
 800a804:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800a808:	f143 0300 	adc.w	r3, r3, #0
 800a80c:	0259      	lsls	r1, r3, #9
 800a80e:	0260      	lsls	r0, r4, #9
 800a810:	2300      	movs	r3, #0
 800a812:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 800a816:	f7f6 fcd9 	bl	80011cc <__aeabi_uldivmod>
 800a81a:	e790      	b.n	800a73e <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 800a81c:	4815      	ldr	r0, [pc, #84]	; (800a874 <HAL_RCC_ClockConfig+0x238>)
 800a81e:	e78e      	b.n	800a73e <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a820:	1b0d      	subs	r5, r1, r4
 800a822:	eb66 0606 	sbc.w	r6, r6, r6
 800a826:	01b0      	lsls	r0, r6, #6
 800a828:	01a9      	lsls	r1, r5, #6
 800a82a:	1b49      	subs	r1, r1, r5
 800a82c:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 800a830:	eb60 0006 	sbc.w	r0, r0, r6
 800a834:	00c0      	lsls	r0, r0, #3
 800a836:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 800a83a:	00c9      	lsls	r1, r1, #3
 800a83c:	190c      	adds	r4, r1, r4
 800a83e:	f140 0000 	adc.w	r0, r0, #0
 800a842:	0281      	lsls	r1, r0, #10
 800a844:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 800a848:	02a0      	lsls	r0, r4, #10
 800a84a:	f7f6 fcbf 	bl	80011cc <__aeabi_uldivmod>
 800a84e:	e776      	b.n	800a73e <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a850:	079e      	lsls	r6, r3, #30
 800a852:	f53f af2e 	bmi.w	800a6b2 <HAL_RCC_ClockConfig+0x76>
 800a856:	e70f      	b.n	800a678 <HAL_RCC_ClockConfig+0x3c>
 800a858:	40023c00 	.word	0x40023c00
 800a85c:	40023800 	.word	0x40023800
 800a860:	080117c4 	.word	0x080117c4
 800a864:	2000002c 	.word	0x2000002c
 800a868:	20000024 	.word	0x20000024
 800a86c:	00f42400 	.word	0x00f42400
 800a870:	080117dc 	.word	0x080117dc
 800a874:	007a1200 	.word	0x007a1200

0800a878 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a878:	4b04      	ldr	r3, [pc, #16]	; (800a88c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800a87a:	4a05      	ldr	r2, [pc, #20]	; (800a890 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	4905      	ldr	r1, [pc, #20]	; (800a894 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a880:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a884:	5ccb      	ldrb	r3, [r1, r3]
 800a886:	6810      	ldr	r0, [r2, #0]
}
 800a888:	40d8      	lsrs	r0, r3
 800a88a:	4770      	bx	lr
 800a88c:	40023800 	.word	0x40023800
 800a890:	20000024 	.word	0x20000024
 800a894:	080117d4 	.word	0x080117d4

0800a898 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800a89a:	4a05      	ldr	r2, [pc, #20]	; (800a8b0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	4905      	ldr	r1, [pc, #20]	; (800a8b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a8a0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a8a4:	5ccb      	ldrb	r3, [r1, r3]
 800a8a6:	6810      	ldr	r0, [r2, #0]
}
 800a8a8:	40d8      	lsrs	r0, r3
 800a8aa:	4770      	bx	lr
 800a8ac:	40023800 	.word	0x40023800
 800a8b0:	20000024 	.word	0x20000024
 800a8b4:	080117d4 	.word	0x080117d4

0800a8b8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d049      	beq.n	800a950 <HAL_TIM_Base_Init+0x98>
{
 800a8bc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d03c      	beq.n	800a946 <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8cc:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8ce:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800a8d8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8da:	d013      	beq.n	800a904 <HAL_TIM_Base_Init+0x4c>
 800a8dc:	491d      	ldr	r1, [pc, #116]	; (800a954 <HAL_TIM_Base_Init+0x9c>)
 800a8de:	428a      	cmp	r2, r1
 800a8e0:	d010      	beq.n	800a904 <HAL_TIM_Base_Init+0x4c>
 800a8e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a8e6:	428a      	cmp	r2, r1
 800a8e8:	d00c      	beq.n	800a904 <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8ea:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800a8ee:	428a      	cmp	r2, r1
 800a8f0:	d00c      	beq.n	800a90c <HAL_TIM_Base_Init+0x54>
 800a8f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a8f6:	428a      	cmp	r2, r1
 800a8f8:	d008      	beq.n	800a90c <HAL_TIM_Base_Init+0x54>
 800a8fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a8fe:	428a      	cmp	r2, r1
 800a900:	d108      	bne.n	800a914 <HAL_TIM_Base_Init+0x5c>
 800a902:	e003      	b.n	800a90c <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 800a904:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a90a:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a90c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a90e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a912:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a914:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a916:	6960      	ldr	r0, [r4, #20]
 800a918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a91c:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a91e:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800a920:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800a922:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a924:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a926:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800a928:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a92a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a92e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800a932:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800a936:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 800a93a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800a93e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 800a942:	2000      	movs	r0, #0
}
 800a944:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a946:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800a94a:	f7fc ffb7 	bl	80078bc <HAL_TIM_Base_MspInit>
 800a94e:	e7bd      	b.n	800a8cc <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800a950:	2001      	movs	r0, #1
}
 800a952:	4770      	bx	lr
 800a954:	40000400 	.word	0x40000400

0800a958 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800a958:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d120      	bne.n	800a9a2 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800a960:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a962:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a964:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a968:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a96e:	f042 0201 	orr.w	r2, r2, #1
 800a972:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a974:	d00a      	beq.n	800a98c <HAL_TIM_Base_Start_IT+0x34>
 800a976:	4a0d      	ldr	r2, [pc, #52]	; (800a9ac <HAL_TIM_Base_Start_IT+0x54>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d007      	beq.n	800a98c <HAL_TIM_Base_Start_IT+0x34>
 800a97c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a980:	4293      	cmp	r3, r2
 800a982:	d003      	beq.n	800a98c <HAL_TIM_Base_Start_IT+0x34>
 800a984:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800a988:	4293      	cmp	r3, r2
 800a98a:	d104      	bne.n	800a996 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a992:	2a06      	cmp	r2, #6
 800a994:	d007      	beq.n	800a9a6 <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800a996:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800a998:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800a99a:	f042 0201 	orr.w	r2, r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	4770      	bx	lr
    return HAL_ERROR;
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	4770      	bx	lr
  return HAL_OK;
 800a9a6:	2000      	movs	r0, #0
}
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	40000400 	.word	0x40000400

0800a9b0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 800a9b0:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a9b4:	6802      	ldr	r2, [r0, #0]
{
 800a9b6:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a9b8:	68d1      	ldr	r1, [r2, #12]
 800a9ba:	f021 0101 	bic.w	r1, r1, #1
 800a9be:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800a9c0:	6a11      	ldr	r1, [r2, #32]
 800a9c2:	ea11 0f0c 	tst.w	r1, ip
 800a9c6:	d103      	bne.n	800a9d0 <HAL_TIM_Base_Stop_IT+0x20>
 800a9c8:	6811      	ldr	r1, [r2, #0]
 800a9ca:	f021 0101 	bic.w	r1, r1, #1
 800a9ce:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800a9d0:	2201      	movs	r2, #1
}
 800a9d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800a9d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop

0800a9dc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800a9dc:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800a9e0:	2a01      	cmp	r2, #1
 800a9e2:	d075      	beq.n	800aad0 <HAL_TIM_ConfigClockSource+0xf4>
{
 800a9e4:	b430      	push	{r4, r5}
 800a9e6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800a9e8:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ea:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800a9ec:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800a9ee:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800a9f6:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800a9f8:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9fa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800a9fe:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800aa02:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800aa04:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800aa06:	d065      	beq.n	800aad4 <HAL_TIM_ConfigClockSource+0xf8>
 800aa08:	d831      	bhi.n	800aa6e <HAL_TIM_ConfigClockSource+0x92>
 800aa0a:	2a40      	cmp	r2, #64	; 0x40
 800aa0c:	d048      	beq.n	800aaa0 <HAL_TIM_ConfigClockSource+0xc4>
 800aa0e:	d921      	bls.n	800aa54 <HAL_TIM_ConfigClockSource+0x78>
 800aa10:	2a50      	cmp	r2, #80	; 0x50
 800aa12:	d116      	bne.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa14:	684c      	ldr	r4, [r1, #4]
 800aa16:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa18:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa1a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800aa1e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa20:	6a04      	ldr	r4, [r0, #32]
 800aa22:	f024 0401 	bic.w	r4, r4, #1
 800aa26:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa28:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa2e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa32:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aa34:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa36:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa3c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa40:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800aa42:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800aa44:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800aa46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800aa4a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 800aa4e:	4610      	mov	r0, r2
}
 800aa50:	bc30      	pop	{r4, r5}
 800aa52:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800aa54:	2a20      	cmp	r2, #32
 800aa56:	d002      	beq.n	800aa5e <HAL_TIM_ConfigClockSource+0x82>
 800aa58:	d91e      	bls.n	800aa98 <HAL_TIM_ConfigClockSource+0xbc>
 800aa5a:	2a30      	cmp	r2, #48	; 0x30
 800aa5c:	d1f1      	bne.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 800aa5e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa60:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa64:	430a      	orrs	r2, r1
 800aa66:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800aa6a:	6082      	str	r2, [r0, #8]
}
 800aa6c:	e7e9      	b.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800aa6e:	2a70      	cmp	r2, #112	; 0x70
 800aa70:	d049      	beq.n	800ab06 <HAL_TIM_ConfigClockSource+0x12a>
 800aa72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800aa76:	d1e4      	bne.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa78:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800aa7c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa7e:	432a      	orrs	r2, r5
 800aa80:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa82:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800aa8a:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa8c:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa8e:	6882      	ldr	r2, [r0, #8]
 800aa90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa94:	6082      	str	r2, [r0, #8]
      break;
 800aa96:	e7d4      	b.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800aa98:	f032 0110 	bics.w	r1, r2, #16
 800aa9c:	d1d1      	bne.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
 800aa9e:	e7de      	b.n	800aa5e <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaa0:	684c      	ldr	r4, [r1, #4]
 800aaa2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800aaa4:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaa6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800aaaa:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aaac:	6a04      	ldr	r4, [r0, #32]
 800aaae:	f024 0401 	bic.w	r4, r4, #1
 800aab2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aab4:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aab6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800aabe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800aac0:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800aac2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800aac4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aac8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800aacc:	6082      	str	r2, [r0, #8]
}
 800aace:	e7b8      	b.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800aad0:	2002      	movs	r0, #2
}
 800aad2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad4:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aad6:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aadc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aade:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aae0:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aae2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aae6:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800aaea:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800aaec:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaf2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 800aaf6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800aaf8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800aafa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aafe:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800ab02:	6082      	str	r2, [r0, #8]
}
 800ab04:	e79d      	b.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab06:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800ab0a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab0c:	432a      	orrs	r2, r5
 800ab0e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab10:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab14:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800ab18:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800ab1a:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800ab1c:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab1e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800ab22:	6082      	str	r2, [r0, #8]
      break;
 800ab24:	e78d      	b.n	800aa42 <HAL_TIM_ConfigClockSource+0x66>
 800ab26:	bf00      	nop

0800ab28 <HAL_TIM_OC_DelayElapsedCallback>:
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop

0800ab2c <HAL_TIM_IC_CaptureCallback>:
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop

0800ab30 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop

0800ab34 <HAL_TIM_TriggerCallback>:
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop

0800ab38 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab38:	6803      	ldr	r3, [r0, #0]
{
 800ab3a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab3c:	691a      	ldr	r2, [r3, #16]
{
 800ab3e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab40:	0791      	lsls	r1, r2, #30
 800ab42:	d502      	bpl.n	800ab4a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	0792      	lsls	r2, r2, #30
 800ab48:	d450      	bmi.n	800abec <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab4a:	691a      	ldr	r2, [r3, #16]
 800ab4c:	0752      	lsls	r2, r2, #29
 800ab4e:	d502      	bpl.n	800ab56 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	0750      	lsls	r0, r2, #29
 800ab54:	d437      	bmi.n	800abc6 <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab56:	691a      	ldr	r2, [r3, #16]
 800ab58:	0711      	lsls	r1, r2, #28
 800ab5a:	d502      	bpl.n	800ab62 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab5c:	68da      	ldr	r2, [r3, #12]
 800ab5e:	0712      	lsls	r2, r2, #28
 800ab60:	d422      	bmi.n	800aba8 <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	06d0      	lsls	r0, r2, #27
 800ab66:	d502      	bpl.n	800ab6e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	06d1      	lsls	r1, r2, #27
 800ab6c:	d40c      	bmi.n	800ab88 <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab6e:	691a      	ldr	r2, [r3, #16]
 800ab70:	07d2      	lsls	r2, r2, #31
 800ab72:	d502      	bpl.n	800ab7a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	07d0      	lsls	r0, r2, #31
 800ab78:	d450      	bmi.n	800ac1c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	0651      	lsls	r1, r2, #25
 800ab7e:	d502      	bpl.n	800ab86 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	0652      	lsls	r2, r2, #25
 800ab84:	d443      	bmi.n	800ac0e <HAL_TIM_IRQHandler+0xd6>
}
 800ab86:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab88:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab8c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab8e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab90:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab92:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800ab94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab96:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ab9a:	d047      	beq.n	800ac2c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab9c:	f7ff ffc6 	bl	800ab2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aba2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba4:	7622      	strb	r2, [r4, #24]
 800aba6:	e7e2      	b.n	800ab6e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aba8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abac:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abae:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abb0:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800abb4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abb6:	079b      	lsls	r3, r3, #30
 800abb8:	d044      	beq.n	800ac44 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800abba:	f7ff ffb7 	bl	800ab2c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abbe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abc0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abc2:	7622      	strb	r2, [r4, #24]
 800abc4:	e7cd      	b.n	800ab62 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abc6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abca:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abcc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abce:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abd0:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800abd2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abd4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800abd8:	d131      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abda:	f7ff ffa5 	bl	800ab28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abde:	4620      	mov	r0, r4
 800abe0:	f7ff ffa6 	bl	800ab30 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abe6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe8:	7622      	strb	r2, [r4, #24]
 800abea:	e7b4      	b.n	800ab56 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abec:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abf0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abf2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abf4:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	0799      	lsls	r1, r3, #30
 800abfa:	d11d      	bne.n	800ac38 <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfc:	f7ff ff94 	bl	800ab28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac00:	4620      	mov	r0, r4
 800ac02:	f7ff ff95 	bl	800ab30 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac06:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac08:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0a:	7622      	strb	r2, [r4, #24]
 800ac0c:	e79d      	b.n	800ab4a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800ac12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac14:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ac16:	f7ff ff8d 	bl	800ab34 <HAL_TIM_TriggerCallback>
}
 800ac1a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac1c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac22:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac24:	f7fc faa6 	bl	8007174 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	e7a6      	b.n	800ab7a <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac2c:	f7ff ff7c 	bl	800ab28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac30:	4620      	mov	r0, r4
 800ac32:	f7ff ff7d 	bl	800ab30 <HAL_TIM_PWM_PulseFinishedCallback>
 800ac36:	e7b3      	b.n	800aba0 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 800ac38:	f7ff ff78 	bl	800ab2c <HAL_TIM_IC_CaptureCallback>
 800ac3c:	e7e3      	b.n	800ac06 <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 800ac3e:	f7ff ff75 	bl	800ab2c <HAL_TIM_IC_CaptureCallback>
 800ac42:	e7cf      	b.n	800abe4 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac44:	f7ff ff70 	bl	800ab28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f7ff ff71 	bl	800ab30 <HAL_TIM_PWM_PulseFinishedCallback>
 800ac4e:	e7b6      	b.n	800abbe <HAL_TIM_IRQHandler+0x86>

0800ac50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac50:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ac54:	2a01      	cmp	r2, #1
 800ac56:	d028      	beq.n	800acaa <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800ac58:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac5a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac5c:	681a      	ldr	r2, [r3, #0]
{
 800ac5e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800ac60:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800ac64:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac66:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac68:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac6c:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac6e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800ac72:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800ac74:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac76:	d00a      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800ac78:	480d      	ldr	r0, [pc, #52]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800ac7a:	4282      	cmp	r2, r0
 800ac7c:	d007      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800ac7e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800ac82:	4282      	cmp	r2, r0
 800ac84:	d003      	beq.n	800ac8e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800ac86:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800ac8a:	4282      	cmp	r2, r0
 800ac8c:	d104      	bne.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac8e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac90:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac94:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac96:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800ac98:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800ac9a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800ac9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800aca0:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800aca4:	4610      	mov	r0, r2
}
 800aca6:	bc30      	pop	{r4, r5}
 800aca8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800acaa:	2002      	movs	r0, #2
}
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	40000400 	.word	0x40000400

0800acb4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f000 8081 	beq.w	800adbc <HAL_UART_Init+0x108>
{
 800acba:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800acbc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800acc0:	4604      	mov	r4, r0
 800acc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d070      	beq.n	800adac <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acca:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800acce:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acd0:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800acd2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acd4:	4302      	orrs	r2, r0
 800acd6:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800acd8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800acdc:	4302      	orrs	r2, r0
 800acde:	69e0      	ldr	r0, [r4, #28]
 800ace0:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 800ace2:	68d8      	ldr	r0, [r3, #12]
 800ace4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 800ace8:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acea:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acec:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800acf2:	4329      	orrs	r1, r5
 800acf4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800acf6:	68d9      	ldr	r1, [r3, #12]
 800acf8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800acfc:	f021 010c 	bic.w	r1, r1, #12
 800ad00:	430a      	orrs	r2, r1
 800ad02:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad04:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 800ad06:	492e      	ldr	r1, [pc, #184]	; (800adc0 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ad0c:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 800ad0e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad10:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 800ad12:	d050      	beq.n	800adb6 <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ad14:	f7ff fdb0 	bl	800a878 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad18:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ad26:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad28:	d027      	beq.n	800ad7a <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad30:	2564      	movs	r5, #100	; 0x64
 800ad32:	4824      	ldr	r0, [pc, #144]	; (800adc4 <HAL_UART_Init+0x110>)
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	fba0 6103 	umull	r6, r1, r0, r3
 800ad3a:	0949      	lsrs	r1, r1, #5
 800ad3c:	fb05 3311 	mls	r3, r5, r1, r3
 800ad40:	011b      	lsls	r3, r3, #4
 800ad42:	3332      	adds	r3, #50	; 0x32
 800ad44:	fba0 0303 	umull	r0, r3, r0, r3
 800ad48:	0109      	lsls	r1, r1, #4
 800ad4a:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800ad4e:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad50:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800ad52:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad54:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800ad56:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad58:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800ad5c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad5e:	6953      	ldr	r3, [r2, #20]
 800ad60:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800ad64:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800ad66:	68d3      	ldr	r3, [r2, #12]
 800ad68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ad6c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad6e:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ad70:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ad74:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad80:	2364      	movs	r3, #100	; 0x64
 800ad82:	4e10      	ldr	r6, [pc, #64]	; (800adc4 <HAL_UART_Init+0x110>)
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	fba6 5100 	umull	r5, r1, r6, r0
 800ad8a:	094d      	lsrs	r5, r1, #5
 800ad8c:	fb03 0315 	mls	r3, r3, r5, r0
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	3332      	adds	r3, #50	; 0x32
 800ad94:	fba6 1303 	umull	r1, r3, r6, r3
 800ad98:	f3c3 1142 	ubfx	r1, r3, #5, #3
 800ad9c:	091b      	lsrs	r3, r3, #4
 800ad9e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800ada2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ada6:	440b      	add	r3, r1
 800ada8:	6093      	str	r3, [r2, #8]
 800adaa:	e7d1      	b.n	800ad50 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 800adac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800adb0:	f7fc fe20 	bl	80079f4 <HAL_UART_MspInit>
 800adb4:	e789      	b.n	800acca <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800adb6:	f7ff fd6f 	bl	800a898 <HAL_RCC_GetPCLK2Freq>
 800adba:	e7ad      	b.n	800ad18 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 800adbc:	2001      	movs	r0, #1
}
 800adbe:	4770      	bx	lr
 800adc0:	40013800 	.word	0x40013800
 800adc4:	51eb851f 	.word	0x51eb851f

0800adc8 <HAL_UART_Transmit_DMA>:
{
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800adcc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800add0:	2820      	cmp	r0, #32
 800add2:	d12d      	bne.n	800ae30 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 800add4:	b351      	cbz	r1, 800ae2c <HAL_UART_Transmit_DMA+0x64>
 800add6:	b34a      	cbz	r2, 800ae2c <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800add8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800addc:	2801      	cmp	r0, #1
 800adde:	d027      	beq.n	800ae30 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade0:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800ade2:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ade6:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800adea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800adec:	4f11      	ldr	r7, [pc, #68]	; (800ae34 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800adee:	4e12      	ldr	r6, [pc, #72]	; (800ae38 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 800adf0:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800adf2:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf4:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800adf6:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 800adf8:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adfc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae00:	4613      	mov	r3, r2
 800ae02:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae04:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae08:	4e0c      	ldr	r6, [pc, #48]	; (800ae3c <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae0a:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 800ae0c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae0e:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae10:	f7fd fd0e 	bl	8008830 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ae14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae18:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800ae1a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ae1c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800ae1e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae22:	695a      	ldr	r2, [r3, #20]
 800ae24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae28:	615a      	str	r2, [r3, #20]
}
 800ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800ae2c:	2001      	movs	r0, #1
}
 800ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800ae30:	2002      	movs	r0, #2
}
 800ae32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae34:	0800aee1 	.word	0x0800aee1
 800ae38:	0800af0d 	.word	0x0800af0d
 800ae3c:	0800af1d 	.word	0x0800af1d

0800ae40 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae40:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	d13f      	bne.n	800aec8 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	d03b      	beq.n	800aec4 <HAL_UART_Receive_DMA+0x84>
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	d039      	beq.n	800aec4 <HAL_UART_Receive_DMA+0x84>
{
 800ae50:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800ae52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ae56:	4604      	mov	r4, r0
 800ae58:	2b01      	cmp	r3, #1
{
 800ae5a:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 800ae5c:	d036      	beq.n	800aecc <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae5e:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800ae60:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae64:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 800ae68:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800ae6a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae6c:	4f19      	ldr	r7, [pc, #100]	; (800aed4 <HAL_UART_Receive_DMA+0x94>)
 800ae6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae70:	4e19      	ldr	r6, [pc, #100]	; (800aed8 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800ae74:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae78:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ae7a:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae7c:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ae80:	460a      	mov	r2, r1
 800ae82:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae84:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae88:	4e14      	ldr	r6, [pc, #80]	; (800aedc <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ae8a:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 800ae8c:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae8e:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ae90:	f7fd fcce 	bl	8008830 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800ae94:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	9501      	str	r5, [sp, #4]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	9201      	str	r2, [sp, #4]
 800ae9e:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 800aea0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aeae:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb0:	695a      	ldr	r2, [r3, #20]
 800aeb2:	f042 0201 	orr.w	r2, r2, #1
 800aeb6:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeb8:	695a      	ldr	r2, [r3, #20]
 800aeba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aebe:	615a      	str	r2, [r3, #20]
}
 800aec0:	b003      	add	sp, #12
 800aec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800aec4:	2001      	movs	r0, #1
}
 800aec6:	4770      	bx	lr
    return HAL_BUSY;
 800aec8:	2002      	movs	r0, #2
 800aeca:	4770      	bx	lr
 800aecc:	2002      	movs	r0, #2
}
 800aece:	b003      	add	sp, #12
 800aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed2:	bf00      	nop
 800aed4:	0800afc9 	.word	0x0800afc9
 800aed8:	0800afad 	.word	0x0800afad
 800aedc:	0800af1d 	.word	0x0800af1d

0800aee0 <UART_DMATransmitCplt>:
{
 800aee0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aee2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aee4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f013 0320 	ands.w	r3, r3, #32
 800aeec:	d10a      	bne.n	800af04 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aeee:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800aef0:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aef2:	6953      	ldr	r3, [r2, #20]
 800aef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aef8:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aefa:	68d3      	ldr	r3, [r2, #12]
 800aefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af00:	60d3      	str	r3, [r2, #12]
}
 800af02:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800af04:	f7fc fbac 	bl	8007660 <HAL_UART_TxCpltCallback>
}
 800af08:	bd08      	pop	{r3, pc}
 800af0a:	bf00      	nop

0800af0c <UART_DMATxHalfCplt>:
{
 800af0c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800af0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800af10:	f7fc fb92 	bl	8007638 <HAL_UART_TxHalfCpltCallback>
}
 800af14:	bd08      	pop	{r3, pc}
 800af16:	bf00      	nop

0800af18 <HAL_UART_RxHalfCpltCallback>:
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop

0800af1c <UART_DMAError>:
{
 800af1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af20:	6803      	ldr	r3, [r0, #0]
 800af22:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af24:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800af28:	2a21      	cmp	r2, #33	; 0x21
 800af2a:	d00b      	beq.n	800af44 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af2c:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af2e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800af32:	2a22      	cmp	r2, #34	; 0x22
 800af34:	d016      	beq.n	800af64 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af38:	f043 0310 	orr.w	r3, r3, #16
 800af3c:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800af3e:	f7fc fb71 	bl	8007624 <HAL_UART_ErrorCallback>
}
 800af42:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af44:	0609      	lsls	r1, r1, #24
 800af46:	d5f1      	bpl.n	800af2c <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800af48:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800af4a:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800af4c:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af4e:	68da      	ldr	r2, [r3, #12]
 800af50:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800af54:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800af56:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af5a:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af5c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800af60:	2a22      	cmp	r2, #34	; 0x22
 800af62:	d1e8      	bne.n	800af36 <UART_DMAError+0x1a>
 800af64:	064a      	lsls	r2, r1, #25
 800af66:	d5e6      	bpl.n	800af36 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800af68:	2200      	movs	r2, #0
 800af6a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af74:	695a      	ldr	r2, [r3, #20]
 800af76:	f022 0201 	bic.w	r2, r2, #1
 800af7a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800af7e:	2a01      	cmp	r2, #1
 800af80:	d103      	bne.n	800af8a <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	f022 0210 	bic.w	r2, r2, #16
 800af88:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800af8a:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af8c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800af8e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af92:	6303      	str	r3, [r0, #48]	; 0x30
}
 800af94:	e7cf      	b.n	800af36 <UART_DMAError+0x1a>
 800af96:	bf00      	nop

0800af98 <UART_DMAAbortOnError>:
{
 800af98:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800af9a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800af9e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800afa0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800afa2:	f7fc fb3f 	bl	8007624 <HAL_UART_ErrorCallback>
}
 800afa6:	bd08      	pop	{r3, pc}

0800afa8 <HAL_UARTEx_RxEventCallback>:
}
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop

0800afac <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afac:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800afae:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d002      	beq.n	800afbc <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800afb6:	f7ff ffaf 	bl	800af18 <HAL_UART_RxHalfCpltCallback>
}
 800afba:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800afbc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800afbe:	0849      	lsrs	r1, r1, #1
 800afc0:	f7ff fff2 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
}
 800afc4:	bd08      	pop	{r3, pc}
 800afc6:	bf00      	nop

0800afc8 <UART_DMAReceiveCplt>:
{
 800afc8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afca:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f013 0320 	ands.w	r3, r3, #32
 800afd4:	d113      	bne.n	800affe <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 800afd6:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afd8:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 800afda:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afdc:	68d3      	ldr	r3, [r2, #12]
 800afde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afe2:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe4:	6953      	ldr	r3, [r2, #20]
 800afe6:	f023 0301 	bic.w	r3, r3, #1
 800afea:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afec:	6953      	ldr	r3, [r2, #20]
 800afee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff2:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800aff4:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800affa:	2b01      	cmp	r3, #1
 800affc:	d009      	beq.n	800b012 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800affe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b000:	2b01      	cmp	r3, #1
 800b002:	d002      	beq.n	800b00a <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 800b004:	f7fc f9f4 	bl	80073f0 <HAL_UART_RxCpltCallback>
}
 800b008:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b00a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b00c:	f7ff ffcc 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
}
 800b010:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b012:	68d3      	ldr	r3, [r2, #12]
 800b014:	f023 0310 	bic.w	r3, r3, #16
 800b018:	60d3      	str	r3, [r2, #12]
 800b01a:	e7f0      	b.n	800affe <UART_DMAReceiveCplt+0x36>

0800b01c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b01c:	6883      	ldr	r3, [r0, #8]
 800b01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b022:	d03b      	beq.n	800b09c <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b024:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b026:	2b00      	cmp	r3, #0
 800b028:	d030      	beq.n	800b08c <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b02a:	6803      	ldr	r3, [r0, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b032:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800b034:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b036:	3301      	adds	r3, #1
 800b038:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800b03a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800b03c:	3b01      	subs	r3, #1
 800b03e:	b29b      	uxth	r3, r3
 800b040:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800b042:	bb53      	cbnz	r3, 800b09a <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800b044:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b048:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b04a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b04c:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800b04e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b050:	f021 0120 	bic.w	r1, r1, #32
 800b054:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b056:	68d1      	ldr	r1, [r2, #12]
 800b058:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b05c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b05e:	6951      	ldr	r1, [r2, #20]
 800b060:	f021 0101 	bic.w	r1, r1, #1
 800b064:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800b066:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b06a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b06c:	2901      	cmp	r1, #1
 800b06e:	d120      	bne.n	800b0b2 <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b070:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b072:	68d1      	ldr	r1, [r2, #12]
 800b074:	f021 0110 	bic.w	r1, r1, #16
 800b078:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b07a:	6811      	ldr	r1, [r2, #0]
 800b07c:	06c9      	lsls	r1, r1, #27
 800b07e:	d422      	bmi.n	800b0c6 <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b080:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800b082:	f7ff ff91 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
}
 800b086:	b003      	add	sp, #12
 800b088:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b08c:	6903      	ldr	r3, [r0, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1cb      	bne.n	800b02a <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	7013      	strb	r3, [r2, #0]
 800b098:	e7cc      	b.n	800b034 <UART_Receive_IT.part.0.isra.0+0x18>
 800b09a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b09c:	6903      	ldr	r3, [r0, #16]
 800b09e:	b96b      	cbnz	r3, 800b0bc <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0a0:	6802      	ldr	r2, [r0, #0]
 800b0a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b0a4:	6852      	ldr	r2, [r2, #4]
 800b0a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0aa:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800b0ae:	6283      	str	r3, [r0, #40]	; 0x28
 800b0b0:	e7c3      	b.n	800b03a <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800b0b2:	f7fc f99d 	bl	80073f0 <HAL_UART_RxCpltCallback>
}
 800b0b6:	b003      	add	sp, #12
 800b0b8:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0bc:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b0be:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	7013      	strb	r3, [r2, #0]
 800b0c4:	e7b6      	b.n	800b034 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0c6:	9301      	str	r3, [sp, #4]
 800b0c8:	6813      	ldr	r3, [r2, #0]
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	6853      	ldr	r3, [r2, #4]
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	e7d5      	b.n	800b080 <UART_Receive_IT.part.0.isra.0+0x64>

0800b0d4 <HAL_UART_IRQHandler>:
{
 800b0d4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0d6:	6803      	ldr	r3, [r0, #0]
{
 800b0d8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b0da:	681a      	ldr	r2, [r3, #0]
{
 800b0dc:	b083      	sub	sp, #12
  if (errorflags == RESET)
 800b0de:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0e2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0e4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800b0e6:	d14e      	bne.n	800b186 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0e8:	0695      	lsls	r5, r2, #26
 800b0ea:	d502      	bpl.n	800b0f2 <HAL_UART_IRQHandler+0x1e>
 800b0ec:	068d      	lsls	r5, r1, #26
 800b0ee:	f100 8090 	bmi.w	800b212 <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b0f4:	2801      	cmp	r0, #1
 800b0f6:	d00b      	beq.n	800b110 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b0f8:	0610      	lsls	r0, r2, #24
 800b0fa:	d502      	bpl.n	800b102 <HAL_UART_IRQHandler+0x2e>
 800b0fc:	060d      	lsls	r5, r1, #24
 800b0fe:	f100 8092 	bmi.w	800b226 <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b102:	0650      	lsls	r0, r2, #25
 800b104:	d502      	bpl.n	800b10c <HAL_UART_IRQHandler+0x38>
 800b106:	064a      	lsls	r2, r1, #25
 800b108:	f100 80ab 	bmi.w	800b262 <HAL_UART_IRQHandler+0x18e>
}
 800b10c:	b003      	add	sp, #12
 800b10e:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b110:	06d0      	lsls	r0, r2, #27
 800b112:	d5f1      	bpl.n	800b0f8 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b114:	06cd      	lsls	r5, r1, #27
 800b116:	d5ef      	bpl.n	800b0f8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b118:	2100      	movs	r1, #0
 800b11a:	9101      	str	r1, [sp, #4]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	9201      	str	r2, [sp, #4]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	9201      	str	r2, [sp, #4]
 800b124:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b126:	695a      	ldr	r2, [r3, #20]
 800b128:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800b12c:	f000 80d2 	beq.w	800b2d4 <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b130:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b132:	6802      	ldr	r2, [r0, #0]
 800b134:	6852      	ldr	r2, [r2, #4]
 800b136:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800b138:	2a00      	cmp	r2, #0
 800b13a:	d0e7      	beq.n	800b10c <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b13c:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b13e:	4295      	cmp	r5, r2
 800b140:	d9e4      	bls.n	800b10c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800b142:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b144:	6982      	ldr	r2, [r0, #24]
 800b146:	2a20      	cmp	r2, #32
 800b148:	d016      	beq.n	800b178 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b14a:	68da      	ldr	r2, [r3, #12]
 800b14c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b150:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b152:	695a      	ldr	r2, [r3, #20]
 800b154:	f022 0201 	bic.w	r2, r2, #1
 800b158:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b15a:	695a      	ldr	r2, [r3, #20]
 800b15c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b160:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800b162:	2220      	movs	r2, #32
 800b164:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b168:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16a:	68da      	ldr	r2, [r3, #12]
 800b16c:	f022 0210 	bic.w	r2, r2, #16
 800b170:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b172:	f7fd fba7 	bl	80088c4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b176:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800b178:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800b17a:	4620      	mov	r0, r4
 800b17c:	1a69      	subs	r1, r5, r1
 800b17e:	b289      	uxth	r1, r1
 800b180:	f7ff ff12 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
 800b184:	e7c2      	b.n	800b10c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b186:	f005 0501 	and.w	r5, r5, #1
 800b18a:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800b18e:	4328      	orrs	r0, r5
 800b190:	d0af      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b192:	07d0      	lsls	r0, r2, #31
 800b194:	d505      	bpl.n	800b1a2 <HAL_UART_IRQHandler+0xce>
 800b196:	05c8      	lsls	r0, r1, #23
 800b198:	d503      	bpl.n	800b1a2 <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b19a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b19c:	f040 0001 	orr.w	r0, r0, #1
 800b1a0:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1a2:	0750      	lsls	r0, r2, #29
 800b1a4:	d530      	bpl.n	800b208 <HAL_UART_IRQHandler+0x134>
 800b1a6:	b14d      	cbz	r5, 800b1bc <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1a8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b1aa:	f040 0002 	orr.w	r0, r0, #2
 800b1ae:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b1b0:	0790      	lsls	r0, r2, #30
 800b1b2:	d503      	bpl.n	800b1bc <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b1b6:	f040 0004 	orr.w	r0, r0, #4
 800b1ba:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b1bc:	0710      	lsls	r0, r2, #28
 800b1be:	d507      	bpl.n	800b1d0 <HAL_UART_IRQHandler+0xfc>
 800b1c0:	f001 0020 	and.w	r0, r1, #32
 800b1c4:	4328      	orrs	r0, r5
 800b1c6:	d003      	beq.n	800b1d0 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b1ca:	f040 0008 	orr.w	r0, r0, #8
 800b1ce:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d09a      	beq.n	800b10c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1d6:	0690      	lsls	r0, r2, #26
 800b1d8:	d509      	bpl.n	800b1ee <HAL_UART_IRQHandler+0x11a>
 800b1da:	068a      	lsls	r2, r1, #26
 800b1dc:	d507      	bpl.n	800b1ee <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1de:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800b1e2:	2a22      	cmp	r2, #34	; 0x22
 800b1e4:	d103      	bne.n	800b1ee <HAL_UART_IRQHandler+0x11a>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f7ff ff18 	bl	800b01c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1f0:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1f2:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1f6:	f005 0508 	and.w	r5, r5, #8
 800b1fa:	4315      	orrs	r5, r2
 800b1fc:	d13c      	bne.n	800b278 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7fc fa10 	bl	8007624 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b204:	6425      	str	r5, [r4, #64]	; 0x40
 800b206:	e781      	b.n	800b10c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b208:	0790      	lsls	r0, r2, #30
 800b20a:	d5d7      	bpl.n	800b1bc <HAL_UART_IRQHandler+0xe8>
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	d1d1      	bne.n	800b1b4 <HAL_UART_IRQHandler+0xe0>
 800b210:	e7d4      	b.n	800b1bc <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b212:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800b216:	2b22      	cmp	r3, #34	; 0x22
 800b218:	f47f af78 	bne.w	800b10c <HAL_UART_IRQHandler+0x38>
}
 800b21c:	b003      	add	sp, #12
 800b21e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b222:	f7ff befb 	b.w	800b01c <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b226:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800b22a:	2a21      	cmp	r2, #33	; 0x21
 800b22c:	f47f af6e 	bne.w	800b10c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b230:	68a2      	ldr	r2, [r4, #8]
 800b232:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b236:	d06e      	beq.n	800b316 <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b238:	6a22      	ldr	r2, [r4, #32]
 800b23a:	1c51      	adds	r1, r2, #1
 800b23c:	6221      	str	r1, [r4, #32]
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800b242:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800b244:	3a01      	subs	r2, #1
 800b246:	b292      	uxth	r2, r2
 800b248:	84e2      	strh	r2, [r4, #38]	; 0x26
 800b24a:	2a00      	cmp	r2, #0
 800b24c:	f47f af5e 	bne.w	800b10c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b256:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b258:	68da      	ldr	r2, [r3, #12]
 800b25a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b25e:	60da      	str	r2, [r3, #12]
 800b260:	e754      	b.n	800b10c <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 800b262:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b264:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800b266:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b26c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800b26e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800b272:	f7fc f9f5 	bl	8007660 <HAL_UART_TxCpltCallback>
    return;
 800b276:	e749      	b.n	800b10c <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b27e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b280:	695a      	ldr	r2, [r3, #20]
 800b282:	f022 0201 	bic.w	r2, r2, #1
 800b286:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b288:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b28a:	2a01      	cmp	r2, #1
 800b28c:	d103      	bne.n	800b296 <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28e:	68da      	ldr	r2, [r3, #12]
 800b290:	f022 0210 	bic.w	r2, r2, #16
 800b294:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b296:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b298:	2120      	movs	r1, #32
 800b29a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b29e:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a0:	695a      	ldr	r2, [r3, #20]
 800b2a2:	0655      	lsls	r5, r2, #25
 800b2a4:	d512      	bpl.n	800b2cc <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a6:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b2a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2ae:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800b2b0:	b160      	cbz	r0, 800b2cc <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2b2:	4b1e      	ldr	r3, [pc, #120]	; (800b32c <HAL_UART_IRQHandler+0x258>)
 800b2b4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2b6:	f7fd fb2d 	bl	8008914 <HAL_DMA_Abort_IT>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	f43f af26 	beq.w	800b10c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b2c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800b2c4:	b003      	add	sp, #12
 800b2c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2ca:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f7fc f9a9 	bl	8007624 <HAL_UART_ErrorCallback>
 800b2d2:	e71b      	b.n	800b10c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2d4:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800b2d6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2d8:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800b2da:	b289      	uxth	r1, r1
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	f43f af15 	beq.w	800b10c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2e2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b2e4:	1a08      	subs	r0, r1, r0
 800b2e6:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	f43f af0f 	beq.w	800b10c <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 800b2ee:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2f0:	68d8      	ldr	r0, [r3, #12]
 800b2f2:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800b2f6:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f8:	6958      	ldr	r0, [r3, #20]
 800b2fa:	f020 0001 	bic.w	r0, r0, #1
 800b2fe:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800b300:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b304:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b306:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b308:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b30a:	f022 0210 	bic.w	r2, r2, #16
 800b30e:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b310:	f7ff fe4a 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
 800b314:	e6fa      	b.n	800b10c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b316:	6922      	ldr	r2, [r4, #16]
 800b318:	2a00      	cmp	r2, #0
 800b31a:	d18d      	bne.n	800b238 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b31c:	6a22      	ldr	r2, [r4, #32]
 800b31e:	f832 1b02 	ldrh.w	r1, [r2], #2
 800b322:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800b326:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b328:	6222      	str	r2, [r4, #32]
 800b32a:	e78a      	b.n	800b242 <HAL_UART_IRQHandler+0x16e>
 800b32c:	0800af99 	.word	0x0800af99

0800b330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b330:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b332:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b334:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800b338:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800b33c:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 800b33e:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b342:	4770      	bx	lr

0800b344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b344:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b346:	f244 02ff 	movw	r2, #16639	; 0x40ff
 800b34a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 800b34e:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b350:	400a      	ands	r2, r1
 800b352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 800b356:	4770      	bx	lr

0800b358 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b358:	b084      	sub	sp, #16
 800b35a:	f10d 0c04 	add.w	ip, sp, #4
 800b35e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800b362:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b364:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b366:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 800b368:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b36a:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 800b36e:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 800b370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800b374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 800b378:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b380:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b382:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800b384:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b388:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 800b38c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b38e:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 800b392:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 800b396:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800b39a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 800b39e:	f1be 0f03 	cmp.w	lr, #3
 800b3a2:	f200 815a 	bhi.w	800b65a <USB_ActivateEndpoint+0x2da>
 800b3a6:	e8df f00e 	tbb	[pc, lr]
 800b3aa:	4e52      	.short	0x4e52
 800b3ac:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b3ae:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800b3b2:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b3b4:	f248 0580 	movw	r5, #32896	; 0x8080
 800b3b8:	ea4c 0c05 	orr.w	ip, ip, r5
 800b3bc:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b3c0:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b3c4:	4ca6      	ldr	r4, [pc, #664]	; (800b660 <USB_ActivateEndpoint+0x2e0>)
 800b3c6:	fa1f fc8c 	uxth.w	ip, ip
 800b3ca:	ea0c 0c04 	and.w	ip, ip, r4
 800b3ce:	ea4c 0c02 	orr.w	ip, ip, r2
 800b3d2:	ea45 050c 	orr.w	r5, r5, ip
 800b3d6:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800b3da:	7b0d      	ldrb	r5, [r1, #12]
 800b3dc:	2d00      	cmp	r5, #0
 800b3de:	d17e      	bne.n	800b4de <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 800b3e0:	784d      	ldrb	r5, [r1, #1]
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	f000 80dd 	beq.w	800b5a2 <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b3e8:	88c9      	ldrh	r1, [r1, #6]
 800b3ea:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b3ee:	0849      	lsrs	r1, r1, #1
 800b3f0:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 800b3f4:	0049      	lsls	r1, r1, #1
 800b3f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b3fa:	b2ad      	uxth	r5, r5
 800b3fc:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3fe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b402:	064e      	lsls	r6, r1, #25
 800b404:	d509      	bpl.n	800b41a <USB_ActivateEndpoint+0x9a>
 800b406:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b40a:	b289      	uxth	r1, r1
 800b40c:	400c      	ands	r4, r1
 800b40e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800b412:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800b416:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b41a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b41e:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b422:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b426:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b42a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b42e:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 800b432:	d04d      	beq.n	800b4d0 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b434:	f081 0120 	eor.w	r1, r1, #32
 800b438:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b43c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b440:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800b444:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 800b446:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b448:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 800b44c:	e7b2      	b.n	800b3b4 <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 800b44e:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 800b450:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 800b454:	e7ae      	b.n	800b3b4 <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b456:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b45a:	044d      	lsls	r5, r1, #17
 800b45c:	d509      	bpl.n	800b472 <USB_ActivateEndpoint+0xf2>
 800b45e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b462:	b289      	uxth	r1, r1
 800b464:	400c      	ands	r4, r1
 800b466:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b46a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b46e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b472:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b476:	0649      	lsls	r1, r1, #25
 800b478:	d50d      	bpl.n	800b496 <USB_ActivateEndpoint+0x116>
 800b47a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b47e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b482:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b486:	0409      	lsls	r1, r1, #16
 800b488:	0c09      	lsrs	r1, r1, #16
 800b48a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b48e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b492:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b496:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800b49a:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b49e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b4a2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b4a6:	ea4f 4101 	mov.w	r1, r1, lsl #16
 800b4aa:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800b4ae:	bf18      	it	ne
 800b4b0:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4b4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b4b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b4bc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b4c4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b4c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b4cc:	0409      	lsls	r1, r1, #16
 800b4ce:	0c09      	lsrs	r1, r1, #16
 800b4d0:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b4d4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b4d8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 800b4de:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 800b4e2:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b4e6:	fa1f fc8c 	uxth.w	ip, ip
 800b4ea:	ea0c 0c04 	and.w	ip, ip, r4
 800b4ee:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 800b4f2:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 800b4f6:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b4fa:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 800b4fe:	890e      	ldrh	r6, [r1, #8]
 800b500:	fa1f fc8c 	uxth.w	ip, ip
 800b504:	0876      	lsrs	r6, r6, #1
 800b506:	44bc      	add	ip, r7
 800b508:	0076      	lsls	r6, r6, #1
 800b50a:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 800b50e:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 800b512:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800b516:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b51a:	b2ad      	uxth	r5, r5
 800b51c:	443d      	add	r5, r7
 800b51e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b522:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 800b526:	7849      	ldrb	r1, [r1, #1]
 800b528:	2900      	cmp	r1, #0
 800b52a:	d194      	bne.n	800b456 <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b52c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b530:	044f      	lsls	r7, r1, #17
 800b532:	d509      	bpl.n	800b548 <USB_ActivateEndpoint+0x1c8>
 800b534:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b538:	b289      	uxth	r1, r1
 800b53a:	400c      	ands	r4, r1
 800b53c:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800b540:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b544:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b548:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b54c:	064e      	lsls	r6, r1, #25
 800b54e:	d50d      	bpl.n	800b56c <USB_ActivateEndpoint+0x1ec>
 800b550:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b554:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b558:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b55c:	0409      	lsls	r1, r1, #16
 800b55e:	0c09      	lsrs	r1, r1, #16
 800b560:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b564:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800b568:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b56c:	f248 0480 	movw	r4, #32896	; 0x8080
 800b570:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b574:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b578:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b57c:	0409      	lsls	r1, r1, #16
 800b57e:	0c09      	lsrs	r1, r1, #16
 800b580:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b584:	4321      	orrs	r1, r4
 800b586:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b58a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b58e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b592:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b596:	0409      	lsls	r1, r1, #16
 800b598:	0c09      	lsrs	r1, r1, #16
 800b59a:	4321      	orrs	r1, r4
 800b59c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5a2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800b5a6:	88cd      	ldrh	r5, [r1, #6]
 800b5a8:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 800b5ac:	b2a4      	uxth	r4, r4
 800b5ae:	086d      	lsrs	r5, r5, #1
 800b5b0:	006d      	lsls	r5, r5, #1
 800b5b2:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b5b4:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5b6:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b5ba:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800b5be:	b289      	uxth	r1, r1
 800b5c0:	4439      	add	r1, r7
 800b5c2:	b366      	cbz	r6, 800b61e <USB_ActivateEndpoint+0x29e>
 800b5c4:	2e3e      	cmp	r6, #62	; 0x3e
 800b5c6:	d83c      	bhi.n	800b642 <USB_ActivateEndpoint+0x2c2>
 800b5c8:	0874      	lsrs	r4, r6, #1
 800b5ca:	07f5      	lsls	r5, r6, #31
 800b5cc:	bf48      	it	mi
 800b5ce:	3401      	addmi	r4, #1
 800b5d0:	02a4      	lsls	r4, r4, #10
 800b5d2:	b2a4      	uxth	r4, r4
 800b5d4:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5d8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b5dc:	0449      	lsls	r1, r1, #17
 800b5de:	d50d      	bpl.n	800b5fc <USB_ActivateEndpoint+0x27c>
 800b5e0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b5e4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800b5e8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b5ec:	0409      	lsls	r1, r1, #16
 800b5ee:	0c09      	lsrs	r1, r1, #16
 800b5f0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800b5f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b5f8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5fc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800b600:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800b604:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800b608:	0409      	lsls	r1, r1, #16
 800b60a:	0c09      	lsrs	r1, r1, #16
 800b60c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 800b610:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800b614:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b618:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 800b61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b61e:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b622:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800b626:	0424      	lsls	r4, r4, #16
 800b628:	0c24      	lsrs	r4, r4, #16
 800b62a:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b62e:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 800b632:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800b636:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800b63a:	b2a4      	uxth	r4, r4
 800b63c:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b640:	e7ca      	b.n	800b5d8 <USB_ActivateEndpoint+0x258>
 800b642:	0975      	lsrs	r5, r6, #5
 800b644:	06f4      	lsls	r4, r6, #27
 800b646:	4c07      	ldr	r4, [pc, #28]	; (800b664 <USB_ActivateEndpoint+0x2e4>)
 800b648:	bf08      	it	eq
 800b64a:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800b64e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800b652:	b2a4      	uxth	r4, r4
 800b654:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 800b658:	e7be      	b.n	800b5d8 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 800b65a:	2001      	movs	r0, #1
 800b65c:	e6aa      	b.n	800b3b4 <USB_ActivateEndpoint+0x34>
 800b65e:	bf00      	nop
 800b660:	ffff8f8f 	.word	0xffff8f8f
 800b664:	ffff8000 	.word	0xffff8000

0800b668 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800b668:	7b0b      	ldrb	r3, [r1, #12]
 800b66a:	b9cb      	cbnz	r3, 800b6a0 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 800b66c:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b66e:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80b1 	beq.w	800b7d8 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b676:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b67a:	0659      	lsls	r1, r3, #25
 800b67c:	f100 80c5 	bmi.w	800b80a <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b68c:	041b      	lsls	r3, r3, #16
 800b68e:	0c1b      	lsrs	r3, r3, #16
 800b690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b698:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800b69c:	2000      	movs	r0, #0
 800b69e:	4770      	bx	lr
    if (ep->is_in == 0U)
 800b6a0:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6a2:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d14b      	bne.n	800b740 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6ac:	0459      	lsls	r1, r3, #17
 800b6ae:	d50d      	bpl.n	800b6cc <USB_DeactivateEndpoint+0x64>
 800b6b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6bc:	041b      	lsls	r3, r3, #16
 800b6be:	0c1b      	lsrs	r3, r3, #16
 800b6c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6d0:	065b      	lsls	r3, r3, #25
 800b6d2:	d50d      	bpl.n	800b6f0 <USB_DeactivateEndpoint+0x88>
 800b6d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	0c1b      	lsrs	r3, r3, #16
 800b6e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b6ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b6f0:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800b6f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b6f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b700:	041b      	lsls	r3, r3, #16
 800b702:	0c1b      	lsrs	r3, r3, #16
 800b704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b708:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b70c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b710:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b71c:	041b      	lsls	r3, r3, #16
 800b71e:	0c1b      	lsrs	r3, r3, #16
 800b720:	430b      	orrs	r3, r1
 800b722:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b726:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b72a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b72e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b732:	041b      	lsls	r3, r3, #16
 800b734:	0c1b      	lsrs	r3, r3, #16
 800b736:	430b      	orrs	r3, r1
 800b738:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b73c:	2000      	movs	r0, #0
 800b73e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b740:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b744:	0459      	lsls	r1, r3, #17
 800b746:	d50d      	bpl.n	800b764 <USB_DeactivateEndpoint+0xfc>
 800b748:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b74c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b754:	041b      	lsls	r3, r3, #16
 800b756:	0c1b      	lsrs	r3, r3, #16
 800b758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b760:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b764:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b768:	065b      	lsls	r3, r3, #25
 800b76a:	d50d      	bpl.n	800b788 <USB_DeactivateEndpoint+0x120>
 800b76c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b778:	041b      	lsls	r3, r3, #16
 800b77a:	0c1b      	lsrs	r3, r3, #16
 800b77c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b780:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b784:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b788:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800b78c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b798:	041b      	lsls	r3, r3, #16
 800b79a:	0c1b      	lsrs	r3, r3, #16
 800b79c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b7ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b4:	041b      	lsls	r3, r3, #16
 800b7b6:	0c1b      	lsrs	r3, r3, #16
 800b7b8:	430b      	orrs	r3, r1
 800b7ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b7c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ca:	041b      	lsls	r3, r3, #16
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	430b      	orrs	r3, r1
 800b7d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b7dc:	045b      	lsls	r3, r3, #17
 800b7de:	d50d      	bpl.n	800b7fc <USB_DeactivateEndpoint+0x194>
 800b7e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b7e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ec:	041b      	lsls	r3, r3, #16
 800b7ee:	0c1b      	lsrs	r3, r3, #16
 800b7f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b7fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b808:	e740      	b.n	800b68c <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b80a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800b80e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b816:	041b      	lsls	r3, r3, #16
 800b818:	0c1b      	lsrs	r3, r3, #16
 800b81a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b81e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b822:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800b826:	e72b      	b.n	800b680 <USB_DeactivateEndpoint+0x18>

0800b828 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b82c:	784b      	ldrb	r3, [r1, #1]
{
 800b82e:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 800b830:	2b01      	cmp	r3, #1
 800b832:	d06b      	beq.n	800b90c <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b834:	7b08      	ldrb	r0, [r1, #12]
 800b836:	2800      	cmp	r0, #0
 800b838:	d037      	beq.n	800b8aa <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b83a:	78c8      	ldrb	r0, [r1, #3]
 800b83c:	2802      	cmp	r0, #2
 800b83e:	f000 812d 	beq.w	800ba9c <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b842:	2801      	cmp	r0, #1
 800b844:	f040 810a 	bne.w	800ba5c <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b848:	6988      	ldr	r0, [r1, #24]
 800b84a:	690c      	ldr	r4, [r1, #16]
 800b84c:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 800b84e:	bf94      	ite	ls
 800b850:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800b852:	1b05      	subhi	r5, r0, r4
 800b854:	618d      	str	r5, [r1, #24]
 800b856:	bf88      	it	hi
 800b858:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f040 811b 	bne.w	800ba96 <USB_EPStartXfer+0x26e>
 800b860:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b864:	780b      	ldrb	r3, [r1, #0]
 800b866:	b2a4      	uxth	r4, r4
 800b868:	f202 4504 	addw	r5, r2, #1028	; 0x404
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	442c      	add	r4, r5
 800b870:	2800      	cmp	r0, #0
 800b872:	f000 8251 	beq.w	800bd18 <USB_EPStartXfer+0x4f0>
 800b876:	283e      	cmp	r0, #62	; 0x3e
 800b878:	f200 80f3 	bhi.w	800ba62 <USB_EPStartXfer+0x23a>
 800b87c:	0845      	lsrs	r5, r0, #1
 800b87e:	462e      	mov	r6, r5
 800b880:	f010 0001 	ands.w	r0, r0, #1
 800b884:	bf18      	it	ne
 800b886:	1c6e      	addne	r6, r5, #1
 800b888:	02b6      	lsls	r6, r6, #10
 800b88a:	b2b6      	uxth	r6, r6
 800b88c:	52e6      	strh	r6, [r4, r3]
 800b88e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b892:	b2a6      	uxth	r6, r4
 800b894:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800b898:	4434      	add	r4, r6
 800b89a:	b100      	cbz	r0, 800b89e <USB_EPStartXfer+0x76>
 800b89c:	3501      	adds	r5, #1
 800b89e:	02ad      	lsls	r5, r5, #10
 800b8a0:	b2a8      	uxth	r0, r5
 800b8a2:	52e0      	strh	r0, [r4, r3]
 800b8a4:	f891 c000 	ldrb.w	ip, [r1]
 800b8a8:	e01d      	b.n	800b8e6 <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 800b8aa:	698c      	ldr	r4, [r1, #24]
 800b8ac:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b8ae:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 800b8b0:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800b8b2:	bf84      	itt	hi
 800b8b4:	1ae0      	subhi	r0, r4, r3
 800b8b6:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b8b8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800b8bc:	6188      	str	r0, [r1, #24]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800b8c4:	012d      	lsls	r5, r5, #4
 800b8c6:	4403      	add	r3, r0
 800b8c8:	2c00      	cmp	r4, #0
 800b8ca:	f000 80b7 	beq.w	800ba3c <USB_EPStartXfer+0x214>
 800b8ce:	2c3e      	cmp	r4, #62	; 0x3e
 800b8d0:	f200 8129 	bhi.w	800bb26 <USB_EPStartXfer+0x2fe>
 800b8d4:	0860      	lsrs	r0, r4, #1
 800b8d6:	07e4      	lsls	r4, r4, #31
 800b8d8:	bf48      	it	mi
 800b8da:	3001      	addmi	r0, #1
 800b8dc:	0280      	lsls	r0, r0, #10
 800b8de:	b280      	uxth	r0, r0
 800b8e0:	52e8      	strh	r0, [r5, r3]
 800b8e2:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8e6:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 800b8ea:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8f4:	041b      	lsls	r3, r3, #16
 800b8f6:	0c1b      	lsrs	r3, r3, #16
 800b8f8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800b8fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b904:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 800b908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 800b90c:	690d      	ldr	r5, [r1, #16]
 800b90e:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 800b910:	7b0b      	ldrb	r3, [r1, #12]
 800b912:	42a8      	cmp	r0, r5
 800b914:	bf28      	it	cs
 800b916:	4628      	movcs	r0, r5
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d05d      	beq.n	800b9d8 <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 800b91c:	78cb      	ldrb	r3, [r1, #3]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	f000 810e 	beq.w	800bb40 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b924:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 800b928:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b92a:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800b92e:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b930:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800b934:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800b938:	0424      	lsls	r4, r4, #16
 800b93a:	0c24      	lsrs	r4, r4, #16
 800b93c:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 800b940:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800b944:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b948:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 800b94c:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b94e:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b952:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800b956:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800b95a:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b95c:	f000 814a 	beq.w	800bbf4 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b960:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800b964:	4434      	add	r4, r6
 800b966:	b286      	uxth	r6, r0
 800b968:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b96c:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b96e:	3601      	adds	r6, #1
 800b970:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800b974:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b976:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b97a:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 800b97e:	d008      	beq.n	800b992 <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 800b980:	46cc      	mov	ip, r9
 800b982:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800b986:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 800b98a:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 800b98e:	42a6      	cmp	r6, r4
 800b990:	d1f9      	bne.n	800b986 <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800b992:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800b996:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800b998:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800b99a:	f0c0 81b7 	bcc.w	800bd0c <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 800b99e:	2500      	movs	r5, #0
 800b9a0:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d036      	beq.n	800ba14 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9a6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800b9aa:	b285      	uxth	r5, r0
 800b9ac:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800b9b0:	4428      	add	r0, r5
 800b9b2:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b9b4:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9b6:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9ba:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b9bc:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800b9be:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9c0:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800b9c4:	d026      	beq.n	800ba14 <USB_EPStartXfer+0x1ec>
 800b9c6:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 800b9ca:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800b9ce:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 800b9d2:	4285      	cmp	r5, r0
 800b9d4:	d1f9      	bne.n	800b9ca <USB_EPStartXfer+0x1a2>
 800b9d6:	e01d      	b.n	800ba14 <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b9d8:	b284      	uxth	r4, r0
 800b9da:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9dc:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b9de:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9e2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800b9e6:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9ea:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 800b9ee:	bf18      	it	ne
 800b9f0:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 800b9f4:	d005      	beq.n	800ba02 <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 800b9f6:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 800b9fa:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 800b9fc:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 800ba00:	d1f9      	bne.n	800b9f6 <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ba02:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800ba06:	7808      	ldrb	r0, [r1, #0]
 800ba08:	b29d      	uxth	r5, r3
 800ba0a:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800ba0e:	0100      	lsls	r0, r0, #4
 800ba10:	442b      	add	r3, r5
 800ba12:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba14:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 800ba16:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba18:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800ba1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba24:	041b      	lsls	r3, r3, #16
 800ba26:	0c1b      	lsrs	r3, r3, #16
 800ba28:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800ba2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba34:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 800ba38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ba3c:	5ae8      	ldrh	r0, [r5, r3]
 800ba3e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800ba42:	0400      	lsls	r0, r0, #16
 800ba44:	0c00      	lsrs	r0, r0, #16
 800ba46:	52e8      	strh	r0, [r5, r3]
 800ba48:	5ae8      	ldrh	r0, [r5, r3]
 800ba4a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800ba4e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800ba52:	b280      	uxth	r0, r0
 800ba54:	52e8      	strh	r0, [r5, r3]
 800ba56:	f891 c000 	ldrb.w	ip, [r1]
 800ba5a:	e744      	b.n	800b8e6 <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 800ba5c:	2001      	movs	r0, #1
}
 800ba5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ba62:	0945      	lsrs	r5, r0, #5
 800ba64:	462f      	mov	r7, r5
 800ba66:	f010 001f 	ands.w	r0, r0, #31
 800ba6a:	bf08      	it	eq
 800ba6c:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800ba70:	462e      	mov	r6, r5
 800ba72:	4dbb      	ldr	r5, [pc, #748]	; (800bd60 <USB_EPStartXfer+0x538>)
 800ba74:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800ba78:	b2ad      	uxth	r5, r5
 800ba7a:	52e5      	strh	r5, [r4, r3]
 800ba7c:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800ba80:	b2a5      	uxth	r5, r4
 800ba82:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800ba86:	442c      	add	r4, r5
 800ba88:	b900      	cbnz	r0, 800ba8c <USB_EPStartXfer+0x264>
 800ba8a:	3e01      	subs	r6, #1
 800ba8c:	48b4      	ldr	r0, [pc, #720]	; (800bd60 <USB_EPStartXfer+0x538>)
 800ba8e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800ba92:	b280      	uxth	r0, r0
 800ba94:	52e0      	strh	r0, [r4, r3]
 800ba96:	f891 c000 	ldrb.w	ip, [r1]
 800ba9a:	e724      	b.n	800b8e6 <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ba9c:	bb13      	cbnz	r3, 800bae4 <USB_EPStartXfer+0x2bc>
 800ba9e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800baa2:	780b      	ldrb	r3, [r1, #0]
 800baa4:	b284      	uxth	r4, r0
 800baa6:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800baaa:	4420      	add	r0, r4
 800baac:	690c      	ldr	r4, [r1, #16]
 800baae:	011b      	lsls	r3, r3, #4
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	f000 8109 	beq.w	800bcc8 <USB_EPStartXfer+0x4a0>
 800bab6:	2c3e      	cmp	r4, #62	; 0x3e
 800bab8:	f200 818e 	bhi.w	800bdd8 <USB_EPStartXfer+0x5b0>
 800babc:	0865      	lsrs	r5, r4, #1
 800babe:	462e      	mov	r6, r5
 800bac0:	f014 0401 	ands.w	r4, r4, #1
 800bac4:	bf18      	it	ne
 800bac6:	1c6e      	addne	r6, r5, #1
 800bac8:	02b6      	lsls	r6, r6, #10
 800baca:	b2b6      	uxth	r6, r6
 800bacc:	52c6      	strh	r6, [r0, r3]
 800bace:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bad2:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 800bad6:	b280      	uxth	r0, r0
 800bad8:	4406      	add	r6, r0
 800bada:	b104      	cbz	r4, 800bade <USB_EPStartXfer+0x2b6>
 800badc:	3501      	adds	r5, #1
 800bade:	02ad      	lsls	r5, r5, #10
 800bae0:	b2a8      	uxth	r0, r5
 800bae2:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 800bae4:	69cb      	ldr	r3, [r1, #28]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d0d5      	beq.n	800ba96 <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800baea:	f244 0340 	movw	r3, #16448	; 0x4040
 800baee:	f891 c000 	ldrb.w	ip, [r1]
 800baf2:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800baf6:	ea03 0400 	and.w	r4, r3, r0
 800bafa:	4383      	bics	r3, r0
 800bafc:	d002      	beq.n	800bb04 <USB_EPStartXfer+0x2dc>
 800bafe:	2c00      	cmp	r4, #0
 800bb00:	f47f aef1 	bne.w	800b8e6 <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bb04:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800bb08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb10:	041b      	lsls	r3, r3, #16
 800bb12:	0c1b      	lsrs	r3, r3, #16
 800bb14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb1c:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 800bb20:	f891 c000 	ldrb.w	ip, [r1]
 800bb24:	e6df      	b.n	800b8e6 <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb26:	0966      	lsrs	r6, r4, #5
 800bb28:	06e0      	lsls	r0, r4, #27
 800bb2a:	488d      	ldr	r0, [pc, #564]	; (800bd60 <USB_EPStartXfer+0x538>)
 800bb2c:	bf08      	it	eq
 800bb2e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800bb32:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800bb36:	b280      	uxth	r0, r0
 800bb38:	52e8      	strh	r0, [r5, r3]
 800bb3a:	f891 c000 	ldrb.w	ip, [r1]
 800bb3e:	e6d2      	b.n	800b8e6 <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 800bb40:	6a0c      	ldr	r4, [r1, #32]
 800bb42:	42a5      	cmp	r5, r4
 800bb44:	f080 8094 	bcs.w	800bc70 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bb48:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 800bb4a:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bb4c:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb50:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800bb54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb5c:	041b      	lsls	r3, r3, #16
 800bb5e:	0c1b      	lsrs	r3, r3, #16
 800bb60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb68:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb6c:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 800bb70:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb72:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb76:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bb7a:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb7c:	f000 80f2 	beq.w	800bd64 <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb80:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800bb84:	4433      	add	r3, r6
 800bb86:	fa1f fa80 	uxth.w	sl, r0
 800bb8a:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb8e:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bb90:	f10a 0801 	add.w	r8, sl, #1
 800bb94:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bb98:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb9c:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb9e:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800bba2:	d008      	beq.n	800bbb6 <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800bba4:	46bc      	mov	ip, r7
 800bba6:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 800bbaa:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 800bbae:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800bbb2:	45b3      	cmp	fp, r6
 800bbb4:	d1f9      	bne.n	800bbaa <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800bbb6:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800bbb8:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800bbba:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800bbbc:	f080 8127 	bcs.w	800be0e <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 800bbc0:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbc2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bbc6:	620c      	str	r4, [r1, #32]
 800bbc8:	b284      	uxth	r4, r0
 800bbca:	f202 4004 	addw	r0, r2, #1028	; 0x404
 800bbce:	4420      	add	r0, r4
 800bbd0:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bbd4:	8908      	ldrh	r0, [r1, #8]
 800bbd6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bbda:	f1b8 0f00 	cmp.w	r8, #0
 800bbde:	f43f af19 	beq.w	800ba14 <USB_EPStartXfer+0x1ec>
 800bbe2:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800bbe6:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800bbea:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800bbee:	429c      	cmp	r4, r3
 800bbf0:	d1f9      	bne.n	800bbe6 <USB_EPStartXfer+0x3be>
 800bbf2:	e70f      	b.n	800ba14 <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbf4:	f202 4404 	addw	r4, r2, #1028	; 0x404
 800bbf8:	4434      	add	r4, r6
 800bbfa:	b286      	uxth	r6, r0
 800bbfc:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc00:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc04:	3601      	adds	r6, #1
 800bc06:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bc0a:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc0c:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc10:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 800bc14:	d008      	beq.n	800bc28 <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 800bc16:	464c      	mov	r4, r9
 800bc18:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 800bc1c:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 800bc20:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800bc22:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800bc26:	d1f9      	bne.n	800bc1c <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 800bc28:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800bc2c:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 800bc2e:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800bc30:	d36f      	bcc.n	800bd12 <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800bc32:	2500      	movs	r5, #0
 800bc34:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f43f aeec 	beq.w	800ba14 <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc3c:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bc40:	b285      	uxth	r5, r0
 800bc42:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bc46:	4428      	add	r0, r5
 800bc48:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc4a:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bc4c:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc50:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc52:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800bc54:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc56:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bc5a:	f43f aedb 	beq.w	800ba14 <USB_EPStartXfer+0x1ec>
 800bc5e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800bc62:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bc66:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 800bc6a:	429f      	cmp	r7, r3
 800bc6c:	d1f9      	bne.n	800bc62 <USB_EPStartXfer+0x43a>
 800bc6e:	e6d1      	b.n	800ba14 <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800bc70:	7808      	ldrb	r0, [r1, #0]
 800bc72:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800bc76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bc7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc7e:	041b      	lsls	r3, r3, #16
 800bc80:	0c1b      	lsrs	r3, r3, #16
 800bc82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc8a:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bc8e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800bc92:	0100      	lsls	r0, r0, #4
 800bc94:	b29d      	uxth	r5, r3
 800bc96:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bc9a:	442b      	add	r3, r5
 800bc9c:	b2a5      	uxth	r5, r4
 800bc9e:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bca0:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bca2:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bca4:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bca6:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bcaa:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcac:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bcae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800bcb2:	f43f aeaf 	beq.w	800ba14 <USB_EPStartXfer+0x1ec>
 800bcb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 800bcba:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800bcbe:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 800bcc2:	4298      	cmp	r0, r3
 800bcc4:	d1f9      	bne.n	800bcba <USB_EPStartXfer+0x492>
 800bcc6:	e6a5      	b.n	800ba14 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bcc8:	5ac4      	ldrh	r4, [r0, r3]
 800bcca:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bcce:	0424      	lsls	r4, r4, #16
 800bcd0:	0c24      	lsrs	r4, r4, #16
 800bcd2:	52c4      	strh	r4, [r0, r3]
 800bcd4:	5ac5      	ldrh	r5, [r0, r3]
 800bcd6:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800bcda:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bcde:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bce2:	b2ad      	uxth	r5, r5
 800bce4:	52c5      	strh	r5, [r0, r3]
 800bce6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bcea:	b285      	uxth	r5, r0
 800bcec:	4620      	mov	r0, r4
 800bcee:	4428      	add	r0, r5
 800bcf0:	5ac4      	ldrh	r4, [r0, r3]
 800bcf2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bcf6:	0424      	lsls	r4, r4, #16
 800bcf8:	0c24      	lsrs	r4, r4, #16
 800bcfa:	52c4      	strh	r4, [r0, r3]
 800bcfc:	5ac4      	ldrh	r4, [r0, r3]
 800bcfe:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bd02:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bd06:	b2a4      	uxth	r4, r4
 800bd08:	52c4      	strh	r4, [r0, r3]
 800bd0a:	e6eb      	b.n	800bae4 <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 800bd0c:	1a1d      	subs	r5, r3, r0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	e646      	b.n	800b9a0 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 800bd12:	1a1d      	subs	r5, r3, r0
 800bd14:	4603      	mov	r3, r0
 800bd16:	e78d      	b.n	800bc34 <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bd18:	5ae0      	ldrh	r0, [r4, r3]
 800bd1a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800bd1e:	0400      	lsls	r0, r0, #16
 800bd20:	0c00      	lsrs	r0, r0, #16
 800bd22:	52e0      	strh	r0, [r4, r3]
 800bd24:	5ae5      	ldrh	r5, [r4, r3]
 800bd26:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bd2a:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800bd2e:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800bd32:	b2ad      	uxth	r5, r5
 800bd34:	52e5      	strh	r5, [r4, r3]
 800bd36:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800bd3a:	b2a4      	uxth	r4, r4
 800bd3c:	4420      	add	r0, r4
 800bd3e:	5ac4      	ldrh	r4, [r0, r3]
 800bd40:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800bd44:	0424      	lsls	r4, r4, #16
 800bd46:	0c24      	lsrs	r4, r4, #16
 800bd48:	52c4      	strh	r4, [r0, r3]
 800bd4a:	5ac4      	ldrh	r4, [r0, r3]
 800bd4c:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800bd50:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800bd54:	b2a4      	uxth	r4, r4
 800bd56:	52c4      	strh	r4, [r0, r3]
 800bd58:	f891 c000 	ldrb.w	ip, [r1]
 800bd5c:	e5c3      	b.n	800b8e6 <USB_EPStartXfer+0xbe>
 800bd5e:	bf00      	nop
 800bd60:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bd64:	f202 4304 	addw	r3, r2, #1028	; 0x404
 800bd68:	4433      	add	r3, r6
 800bd6a:	fa1f fa80 	uxth.w	sl, r0
 800bd6e:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd72:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd76:	f10a 0801 	add.w	r8, sl, #1
 800bd7a:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bd7e:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd82:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd84:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 800bd88:	d008      	beq.n	800bd9c <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 800bd8a:	463e      	mov	r6, r7
 800bd8c:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 800bd90:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800bd94:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800bd96:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800bd9a:	d1f9      	bne.n	800bd90 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 800bd9c:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 800bd9e:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 800bda0:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800bda2:	d23e      	bcs.n	800be22 <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800bda4:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bda6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bdaa:	620c      	str	r4, [r1, #32]
 800bdac:	b284      	uxth	r4, r0
 800bdae:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800bdb2:	4420      	add	r0, r4
 800bdb4:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bdb8:	8948      	ldrh	r0, [r1, #10]
 800bdba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 800bdbe:	f1b8 0f00 	cmp.w	r8, #0
 800bdc2:	f43f ae27 	beq.w	800ba14 <USB_EPStartXfer+0x1ec>
 800bdc6:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 800bdca:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 800bdce:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 800bdd2:	429c      	cmp	r4, r3
 800bdd4:	d1f9      	bne.n	800bdca <USB_EPStartXfer+0x5a2>
 800bdd6:	e61d      	b.n	800ba14 <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bdd8:	0965      	lsrs	r5, r4, #5
 800bdda:	462f      	mov	r7, r5
 800bddc:	f014 041f 	ands.w	r4, r4, #31
 800bde0:	bf08      	it	eq
 800bde2:	f105 37ff 	addeq.w	r7, r5, #4294967295
 800bde6:	462e      	mov	r6, r5
 800bde8:	4d13      	ldr	r5, [pc, #76]	; (800be38 <USB_EPStartXfer+0x610>)
 800bdea:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800bdee:	b2ad      	uxth	r5, r5
 800bdf0:	52c5      	strh	r5, [r0, r3]
 800bdf2:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800bdf6:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 800bdfa:	b280      	uxth	r0, r0
 800bdfc:	4405      	add	r5, r0
 800bdfe:	b904      	cbnz	r4, 800be02 <USB_EPStartXfer+0x5da>
 800be00:	3e01      	subs	r6, #1
 800be02:	480d      	ldr	r0, [pc, #52]	; (800be38 <USB_EPStartXfer+0x610>)
 800be04:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800be08:	b280      	uxth	r0, r0
 800be0a:	52e8      	strh	r0, [r5, r3]
 800be0c:	e66a      	b.n	800bae4 <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be0e:	fa1f f884 	uxth.w	r8, r4
 800be12:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be16:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be1a:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800be1e:	2400      	movs	r4, #0
 800be20:	e6cf      	b.n	800bbc2 <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be22:	fa1f f884 	uxth.w	r8, r4
 800be26:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be2a:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be2e:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800be32:	2400      	movs	r4, #0
 800be34:	e7b7      	b.n	800bda6 <USB_EPStartXfer+0x57e>
 800be36:	bf00      	nop
 800be38:	ffff8000 	.word	0xffff8000

0800be3c <USB_EPSetStall>:
  if (ep->is_in != 0U)
 800be3c:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800be3e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800be40:	b18b      	cbz	r3, 800be66 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800be42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800be46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be4e:	041b      	lsls	r3, r3, #16
 800be50:	0c1b      	lsrs	r3, r3, #16
 800be52:	f083 0310 	eor.w	r3, r3, #16
 800be56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800be62:	2000      	movs	r0, #0
 800be64:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800be66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800be6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be72:	041b      	lsls	r3, r3, #16
 800be74:	0c1b      	lsrs	r3, r3, #16
 800be76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800be86:	2000      	movs	r0, #0
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop

0800be8c <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 800be8c:	7b0b      	ldrb	r3, [r1, #12]
 800be8e:	bb3b      	cbnz	r3, 800bee0 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 800be90:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be92:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800be94:	b333      	cbz	r3, 800bee4 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800be9a:	065b      	lsls	r3, r3, #25
 800be9c:	d50d      	bpl.n	800beba <USB_EPClearStall+0x2e>
 800be9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beaa:	041b      	lsls	r3, r3, #16
 800beac:	0c1b      	lsrs	r3, r3, #16
 800beae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800beb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800beb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 800beba:	78cb      	ldrb	r3, [r1, #3]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d00f      	beq.n	800bee0 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bec0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800becc:	041b      	lsls	r3, r3, #16
 800bece:	0c1b      	lsrs	r3, r3, #16
 800bed0:	f083 0320 	eor.w	r3, r3, #32
 800bed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bedc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800bee0:	2000      	movs	r0, #0
 800bee2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bee4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bee8:	045b      	lsls	r3, r3, #17
 800beea:	d50d      	bpl.n	800bf08 <USB_EPClearStall+0x7c>
 800beec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bef8:	041b      	lsls	r3, r3, #16
 800befa:	0c1b      	lsrs	r3, r3, #16
 800befc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800bf0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf14:	041b      	lsls	r3, r3, #16
 800bf16:	0c1b      	lsrs	r3, r3, #16
 800bf18:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800bf1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800bf28:	2000      	movs	r0, #0
 800bf2a:	4770      	bx	lr

0800bf2c <USB_SetDevAddress>:
  if (address == 0U)
 800bf2c:	b911      	cbnz	r1, 800bf34 <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bf2e:	2380      	movs	r3, #128	; 0x80
 800bf30:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800bf34:	2000      	movs	r0, #0
 800bf36:	4770      	bx	lr

0800bf38 <USB_DevConnect>:
}
 800bf38:	2000      	movs	r0, #0
 800bf3a:	4770      	bx	lr

0800bf3c <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 800bf3c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 800bf40:	b280      	uxth	r0, r0
 800bf42:	4770      	bx	lr

0800bf44 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bf44:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf46:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 800bf4a:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bf50:	d007      	beq.n	800bf62 <USB_WritePMA+0x1e>
 800bf52:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bf56:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 800bf5a:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 800bf5e:	4282      	cmp	r2, r0
 800bf60:	d1f9      	bne.n	800bf56 <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800bf62:	4770      	bx	lr

0800bf64 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf64:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf66:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 800bf6a:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf6c:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 800bf70:	d012      	beq.n	800bf98 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf72:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800bf74:	46b4      	mov	ip, r6
 800bf76:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bf78:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 800bf7c:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 800bf7e:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bf80:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800bf82:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bf86:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bf8a:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 800bf8e:	d1f3      	bne.n	800bf78 <USB_ReadPMA+0x14>
    pBuf++;
 800bf90:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800bf94:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bf98:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 800bf9a:	bf44      	itt	mi
 800bf9c:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bf9e:	700b      	strbmi	r3, [r1, #0]
  }
}
 800bfa0:	bd70      	pop	{r4, r5, r6, pc}
 800bfa2:	bf00      	nop

0800bfa4 <USBD_CDC_EP0_RxReady>:
 800bfa4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800bfa8:	b183      	cbz	r3, 800bfcc <USBD_CDC_EP0_RxReady+0x28>
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
 800bfb0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800bfb4:	28ff      	cmp	r0, #255	; 0xff
 800bfb6:	d007      	beq.n	800bfc8 <USBD_CDC_EP0_RxReady+0x24>
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	4621      	mov	r1, r4
 800bfbc:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800bfc0:	4798      	blx	r3
 800bfc2:	23ff      	movs	r3, #255	; 0xff
 800bfc4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 800bfc8:	2000      	movs	r0, #0
 800bfca:	bd10      	pop	{r4, pc}
 800bfcc:	2000      	movs	r0, #0
 800bfce:	4770      	bx	lr

0800bfd0 <USBD_CDC_GetFSCfgDesc>:
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2243      	movs	r2, #67	; 0x43
 800bfd4:	4801      	ldr	r0, [pc, #4]	; (800bfdc <USBD_CDC_GetFSCfgDesc+0xc>)
 800bfd6:	801a      	strh	r2, [r3, #0]
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	20000068 	.word	0x20000068

0800bfe0 <USBD_CDC_GetHSCfgDesc>:
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2243      	movs	r2, #67	; 0x43
 800bfe4:	4801      	ldr	r0, [pc, #4]	; (800bfec <USBD_CDC_GetHSCfgDesc+0xc>)
 800bfe6:	801a      	strh	r2, [r3, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	200000ac 	.word	0x200000ac

0800bff0 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800bff0:	4603      	mov	r3, r0
 800bff2:	2243      	movs	r2, #67	; 0x43
 800bff4:	4801      	ldr	r0, [pc, #4]	; (800bffc <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
 800bff6:	801a      	strh	r2, [r3, #0]
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	200000fc 	.word	0x200000fc

0800c000 <USBD_CDC_GetDeviceQualifierDescriptor>:
 800c000:	4603      	mov	r3, r0
 800c002:	220a      	movs	r2, #10
 800c004:	4801      	ldr	r0, [pc, #4]	; (800c00c <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
 800c006:	801a      	strh	r2, [r3, #0]
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	200000f0 	.word	0x200000f0

0800c010 <USBD_CDC_DataOut>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4604      	mov	r4, r0
 800c014:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
 800c018:	f001 f83a 	bl	800d090 <USBD_LL_GetRxDataSize>
 800c01c:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800c020:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
 800c024:	b14b      	cbz	r3, 800c03a <USBD_CDC_DataOut+0x2a>
 800c026:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c02a:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800c034:	4798      	blx	r3
 800c036:	2000      	movs	r0, #0
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	2002      	movs	r0, #2
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	bf00      	nop

0800c040 <USBD_CDC_DataIn>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
 800c046:	b1ed      	cbz	r5, 800c084 <USBD_CDC_DataIn+0x44>
 800c048:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800c04c:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800c050:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800c054:	b14a      	cbz	r2, 800c06a <USBD_CDC_DataIn+0x2a>
 800c056:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 800c05a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c05e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800c060:	fbb2 f3f4 	udiv	r3, r2, r4
 800c064:	fb04 2413 	mls	r4, r4, r3, r2
 800c068:	b124      	cbz	r4, 800c074 <USBD_CDC_DataIn+0x34>
 800c06a:	2300      	movs	r3, #0
 800c06c:	4618      	mov	r0, r3
 800c06e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	4623      	mov	r3, r4
 800c076:	4622      	mov	r2, r4
 800c078:	f8cc 401c 	str.w	r4, [ip, #28]
 800c07c:	f000 ffec 	bl	800d058 <USBD_LL_Transmit>
 800c080:	4620      	mov	r0, r4
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	2002      	movs	r0, #2
 800c086:	bd38      	pop	{r3, r4, r5, pc}

0800c088 <USBD_CDC_Setup>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	2700      	movs	r7, #0
 800c08e:	780b      	ldrb	r3, [r1, #0]
 800c090:	b082      	sub	sp, #8
 800c092:	f013 0660 	ands.w	r6, r3, #96	; 0x60
 800c096:	460c      	mov	r4, r1
 800c098:	4605      	mov	r5, r0
 800c09a:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
 800c09e:	f88d 7005 	strb.w	r7, [sp, #5]
 800c0a2:	f8ad 7006 	strh.w	r7, [sp, #6]
 800c0a6:	d013      	beq.n	800c0d0 <USBD_CDC_Setup+0x48>
 800c0a8:	2e20      	cmp	r6, #32
 800c0aa:	d117      	bne.n	800c0dc <USBD_CDC_Setup+0x54>
 800c0ac:	88ce      	ldrh	r6, [r1, #6]
 800c0ae:	b1f6      	cbz	r6, 800c0ee <USBD_CDC_Setup+0x66>
 800c0b0:	061b      	lsls	r3, r3, #24
 800c0b2:	d53f      	bpl.n	800c134 <USBD_CDC_Setup+0xac>
 800c0b4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c0b8:	4632      	mov	r2, r6
 800c0ba:	4641      	mov	r1, r8
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	7860      	ldrb	r0, [r4, #1]
 800c0c0:	4798      	blx	r3
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	88e2      	ldrh	r2, [r4, #6]
 800c0c8:	463e      	mov	r6, r7
 800c0ca:	f000 fcef 	bl	800caac <USBD_CtlSendData>
 800c0ce:	e00a      	b.n	800c0e6 <USBD_CDC_Setup+0x5e>
 800c0d0:	784b      	ldrb	r3, [r1, #1]
 800c0d2:	2b0a      	cmp	r3, #10
 800c0d4:	d01f      	beq.n	800c116 <USBD_CDC_Setup+0x8e>
 800c0d6:	2b0b      	cmp	r3, #11
 800c0d8:	d027      	beq.n	800c12a <USBD_CDC_Setup+0xa2>
 800c0da:	b193      	cbz	r3, 800c102 <USBD_CDC_Setup+0x7a>
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f000 fcae 	bl	800ca40 <USBD_CtlError>
 800c0e4:	2602      	movs	r6, #2
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	b002      	add	sp, #8
 800c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ee:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800c0f2:	4632      	mov	r2, r6
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	7848      	ldrb	r0, [r1, #1]
 800c0f8:	4798      	blx	r3
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	b002      	add	sp, #8
 800c0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c102:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c106:	2b03      	cmp	r3, #3
 800c108:	d1e8      	bne.n	800c0dc <USBD_CDC_Setup+0x54>
 800c10a:	2202      	movs	r2, #2
 800c10c:	f10d 0106 	add.w	r1, sp, #6
 800c110:	f000 fccc 	bl	800caac <USBD_CtlSendData>
 800c114:	e7e7      	b.n	800c0e6 <USBD_CDC_Setup+0x5e>
 800c116:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d1de      	bne.n	800c0dc <USBD_CDC_Setup+0x54>
 800c11e:	2201      	movs	r2, #1
 800c120:	f10d 0105 	add.w	r1, sp, #5
 800c124:	f000 fcc2 	bl	800caac <USBD_CtlSendData>
 800c128:	e7dd      	b.n	800c0e6 <USBD_CDC_Setup+0x5e>
 800c12a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d0d9      	beq.n	800c0e6 <USBD_CDC_Setup+0x5e>
 800c132:	e7d3      	b.n	800c0dc <USBD_CDC_Setup+0x54>
 800c134:	784b      	ldrb	r3, [r1, #1]
 800c136:	4632      	mov	r2, r6
 800c138:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
 800c13c:	4641      	mov	r1, r8
 800c13e:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
 800c142:	f000 fccb 	bl	800cadc <USBD_CtlPrepareRx>
 800c146:	463e      	mov	r6, r7
 800c148:	e7cd      	b.n	800c0e6 <USBD_CDC_Setup+0x5e>
 800c14a:	bf00      	nop

0800c14c <USBD_CDC_DeInit>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4604      	mov	r4, r0
 800c150:	2500      	movs	r5, #0
 800c152:	2181      	movs	r1, #129	; 0x81
 800c154:	f000 ff34 	bl	800cfc0 <USBD_LL_CloseEP>
 800c158:	2101      	movs	r1, #1
 800c15a:	4620      	mov	r0, r4
 800c15c:	62e5      	str	r5, [r4, #44]	; 0x2c
 800c15e:	f000 ff2f 	bl	800cfc0 <USBD_LL_CloseEP>
 800c162:	2182      	movs	r1, #130	; 0x82
 800c164:	4620      	mov	r0, r4
 800c166:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800c16a:	f000 ff29 	bl	800cfc0 <USBD_LL_CloseEP>
 800c16e:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800c172:	6425      	str	r5, [r4, #64]	; 0x40
 800c174:	b14b      	cbz	r3, 800c18a <USBD_CDC_DeInit+0x3e>
 800c176:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	4798      	blx	r3
 800c17e:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800c182:	f000 ff8d 	bl	800d0a0 <USBD_static_free>
 800c186:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
 800c18a:	2000      	movs	r0, #0
 800c18c:	bd38      	pop	{r3, r4, r5, pc}
 800c18e:	bf00      	nop

0800c190 <USBD_CDC_Init>:
 800c190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c194:	7c03      	ldrb	r3, [r0, #16]
 800c196:	4604      	mov	r4, r0
 800c198:	bbbb      	cbnz	r3, 800c20a <USBD_CDC_Init+0x7a>
 800c19a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c19e:	2202      	movs	r2, #2
 800c1a0:	2181      	movs	r1, #129	; 0x81
 800c1a2:	f000 fefd 	bl	800cfa0 <USBD_LL_OpenEP>
 800c1a6:	2501      	movs	r5, #1
 800c1a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1ac:	2701      	movs	r7, #1
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	2202      	movs	r2, #2
 800c1b2:	62e5      	str	r5, [r4, #44]	; 0x2c
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f000 fef3 	bl	800cfa0 <USBD_LL_OpenEP>
 800c1ba:	2308      	movs	r3, #8
 800c1bc:	2203      	movs	r2, #3
 800c1be:	2182      	movs	r1, #130	; 0x82
 800c1c0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 feeb 	bl	800cfa0 <USBD_LL_OpenEP>
 800c1ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c1ce:	6427      	str	r7, [r4, #64]	; 0x40
 800c1d0:	f000 ff62 	bl	800d098 <USBD_static_malloc>
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
 800c1da:	b348      	cbz	r0, 800c230 <USBD_CDC_Init+0xa0>
 800c1dc:	f04f 0800 	mov.w	r8, #0
 800c1e0:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4798      	blx	r3
 800c1e8:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
 800c1ec:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
 800c1f0:	7c26      	ldrb	r6, [r4, #16]
 800c1f2:	b196      	cbz	r6, 800c21a <USBD_CDC_Init+0x8a>
 800c1f4:	4646      	mov	r6, r8
 800c1f6:	2340      	movs	r3, #64	; 0x40
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c200:	f000 ff38 	bl	800d074 <USBD_LL_PrepareReceive>
 800c204:	4630      	mov	r0, r6
 800c206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c20a:	2340      	movs	r3, #64	; 0x40
 800c20c:	2202      	movs	r2, #2
 800c20e:	2181      	movs	r1, #129	; 0x81
 800c210:	f000 fec6 	bl	800cfa0 <USBD_LL_OpenEP>
 800c214:	2501      	movs	r5, #1
 800c216:	2340      	movs	r3, #64	; 0x40
 800c218:	e7c8      	b.n	800c1ac <USBD_CDC_Init+0x1c>
 800c21a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c21e:	4639      	mov	r1, r7
 800c220:	4620      	mov	r0, r4
 800c222:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800c226:	f000 ff25 	bl	800d074 <USBD_LL_PrepareReceive>
 800c22a:	4630      	mov	r0, r6
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	463e      	mov	r6, r7
 800c232:	4630      	mov	r0, r6
 800c234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c238 <USBD_CDC_RegisterInterface>:
 800c238:	4603      	mov	r3, r0
 800c23a:	b119      	cbz	r1, 800c244 <USBD_CDC_RegisterInterface+0xc>
 800c23c:	2000      	movs	r0, #0
 800c23e:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
 800c242:	4770      	bx	lr
 800c244:	2002      	movs	r0, #2
 800c246:	4770      	bx	lr

0800c248 <USBD_CDC_SetTxBuffer>:
 800c248:	4603      	mov	r3, r0
 800c24a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c24e:	2000      	movs	r0, #0
 800c250:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 800c254:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop

0800c25c <USBD_CDC_SetRxBuffer>:
 800c25c:	4603      	mov	r3, r0
 800c25e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c262:	2000      	movs	r0, #0
 800c264:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop

0800c26c <USBD_CDC_TransmitPacket>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
 800c272:	b195      	cbz	r5, 800c29a <USBD_CDC_TransmitPacket+0x2e>
 800c274:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800c278:	b10c      	cbz	r4, 800c27e <USBD_CDC_TransmitPacket+0x12>
 800c27a:	2001      	movs	r0, #1
 800c27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c27e:	2701      	movs	r7, #1
 800c280:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
 800c284:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800c288:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
 800c28c:	2181      	movs	r1, #129	; 0x81
 800c28e:	b2b3      	uxth	r3, r6
 800c290:	6306      	str	r6, [r0, #48]	; 0x30
 800c292:	f000 fee1 	bl	800d058 <USBD_LL_Transmit>
 800c296:	4620      	mov	r0, r4
 800c298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29a:	2002      	movs	r0, #2
 800c29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29e:	bf00      	nop

0800c2a0 <USBD_CDC_ReceivePacket>:
 800c2a0:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	b19a      	cbz	r2, 800c2d0 <USBD_CDC_ReceivePacket+0x30>
 800c2a8:	7c04      	ldrb	r4, [r0, #16]
 800c2aa:	b144      	cbz	r4, 800c2be <USBD_CDC_ReceivePacket+0x1e>
 800c2ac:	2400      	movs	r4, #0
 800c2ae:	2340      	movs	r3, #64	; 0x40
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c2b6:	f000 fedd 	bl	800d074 <USBD_LL_PrepareReceive>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c2c8:	f000 fed4 	bl	800d074 <USBD_LL_PrepareReceive>
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	2402      	movs	r4, #2
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	bf00      	nop

0800c2d8 <USBD_Init>:
 800c2d8:	b188      	cbz	r0, 800c2fe <USBD_Init+0x26>
 800c2da:	b508      	push	{r3, lr}
 800c2dc:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c2e0:	b113      	cbz	r3, 800c2e8 <USBD_Init+0x10>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
 800c2e8:	b109      	cbz	r1, 800c2ee <USBD_Init+0x16>
 800c2ea:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	7002      	strb	r2, [r0, #0]
 800c2f2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 800c2f6:	f000 fe01 	bl	800cefc <USBD_LL_Init>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	bd08      	pop	{r3, pc}
 800c2fe:	2002      	movs	r0, #2
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop

0800c304 <USBD_RegisterClass>:
 800c304:	4603      	mov	r3, r0
 800c306:	b119      	cbz	r1, 800c310 <USBD_RegisterClass+0xc>
 800c308:	2000      	movs	r0, #0
 800c30a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
 800c30e:	4770      	bx	lr
 800c310:	2002      	movs	r0, #2
 800c312:	4770      	bx	lr

0800c314 <USBD_Start>:
 800c314:	b508      	push	{r3, lr}
 800c316:	f000 fe35 	bl	800cf84 <USBD_LL_Start>
 800c31a:	2000      	movs	r0, #0
 800c31c:	bd08      	pop	{r3, pc}
 800c31e:	bf00      	nop

0800c320 <USBD_SetClassConfig>:
 800c320:	b508      	push	{r3, lr}
 800c322:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c326:	b11b      	cbz	r3, 800c330 <USBD_SetClassConfig+0x10>
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4798      	blx	r3
 800c32c:	b900      	cbnz	r0, 800c330 <USBD_SetClassConfig+0x10>
 800c32e:	bd08      	pop	{r3, pc}
 800c330:	2002      	movs	r0, #2
 800c332:	bd08      	pop	{r3, pc}

0800c334 <USBD_ClrClassConfig>:
 800c334:	b508      	push	{r3, lr}
 800c336:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	4798      	blx	r3
 800c33e:	2000      	movs	r0, #0
 800c340:	bd08      	pop	{r3, pc}
 800c342:	bf00      	nop

0800c344 <USBD_LL_SetupStage>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4604      	mov	r4, r0
 800c348:	f500 7520 	add.w	r5, r0, #640	; 0x280
 800c34c:	4628      	mov	r0, r5
 800c34e:	f000 fb63 	bl	800ca18 <USBD_ParseSetupRequest>
 800c352:	2201      	movs	r2, #1
 800c354:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800c358:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
 800c35c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 800c360:	f001 031f 	and.w	r3, r1, #31
 800c364:	4293      	cmp	r3, r2
 800c366:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
 800c36a:	d009      	beq.n	800c380 <USBD_LL_SetupStage+0x3c>
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d013      	beq.n	800c398 <USBD_LL_SetupStage+0x54>
 800c370:	b163      	cbz	r3, 800c38c <USBD_LL_SetupStage+0x48>
 800c372:	4620      	mov	r0, r4
 800c374:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c378:	f000 fe30 	bl	800cfdc <USBD_LL_StallEP>
 800c37c:	2000      	movs	r0, #0
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	4629      	mov	r1, r5
 800c382:	4620      	mov	r0, r4
 800c384:	f000 fa78 	bl	800c878 <USBD_StdItfReq>
 800c388:	2000      	movs	r0, #0
 800c38a:	bd38      	pop	{r3, r4, r5, pc}
 800c38c:	4629      	mov	r1, r5
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 f8f8 	bl	800c584 <USBD_StdDevReq>
 800c394:	2000      	movs	r0, #0
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	4629      	mov	r1, r5
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 faa0 	bl	800c8e0 <USBD_StdEPReq>
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}

0800c3a4 <USBD_LL_DataOutStage>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	4605      	mov	r5, r0
 800c3a8:	b969      	cbnz	r1, 800c3c6 <USBD_LL_DataOutStage+0x22>
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800c3b0:	2a03      	cmp	r2, #3
 800c3b2:	d015      	beq.n	800c3e0 <USBD_LL_DataOutStage+0x3c>
 800c3b4:	2a05      	cmp	r2, #5
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	d10e      	bne.n	800c3d8 <USBD_LL_DataOutStage+0x34>
 800c3ba:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
 800c3be:	f000 fe0d 	bl	800cfdc <USBD_LL_StallEP>
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	bd38      	pop	{r3, r4, r5, pc}
 800c3c6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	b133      	cbz	r3, 800c3dc <USBD_LL_DataOutStage+0x38>
 800c3ce:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c3d2:	2a03      	cmp	r2, #3
 800c3d4:	d102      	bne.n	800c3dc <USBD_LL_DataOutStage+0x38>
 800c3d6:	4798      	blx	r3
 800c3d8:	2000      	movs	r0, #0
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	2002      	movs	r0, #2
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 800c3e4:	4291      	cmp	r1, r2
 800c3e6:	d90c      	bls.n	800c402 <USBD_LL_DataOutStage+0x5e>
 800c3e8:	1a89      	subs	r1, r1, r2
 800c3ea:	428a      	cmp	r2, r1
 800c3ec:	bf88      	it	hi
 800c3ee:	b28a      	uxthhi	r2, r1
 800c3f0:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
 800c3f4:	bf98      	it	ls
 800c3f6:	b292      	uxthls	r2, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	f000 fb7d 	bl	800caf8 <USBD_CtlContinueRx>
 800c3fe:	2000      	movs	r0, #0
 800c400:	bd38      	pop	{r3, r4, r5, pc}
 800c402:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	b11b      	cbz	r3, 800c412 <USBD_LL_DataOutStage+0x6e>
 800c40a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c40e:	2a03      	cmp	r2, #3
 800c410:	d004      	beq.n	800c41c <USBD_LL_DataOutStage+0x78>
 800c412:	4628      	mov	r0, r5
 800c414:	f000 fb7a 	bl	800cb0c <USBD_CtlSendStatus>
 800c418:	2000      	movs	r0, #0
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	4798      	blx	r3
 800c41e:	e7f8      	b.n	800c412 <USBD_LL_DataOutStage+0x6e>

0800c420 <USBD_LL_DataInStage>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	4604      	mov	r4, r0
 800c424:	b961      	cbnz	r1, 800c440 <USBD_LL_DataInStage+0x20>
 800c426:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d015      	beq.n	800c45a <USBD_LL_DataInStage+0x3a>
 800c42e:	f033 0304 	bics.w	r3, r3, #4
 800c432:	d02e      	beq.n	800c492 <USBD_LL_DataInStage+0x72>
 800c434:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d031      	beq.n	800c4a0 <USBD_LL_DataInStage+0x80>
 800c43c:	2000      	movs	r0, #0
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	b133      	cbz	r3, 800c456 <USBD_LL_DataInStage+0x36>
 800c448:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c44c:	2a03      	cmp	r2, #3
 800c44e:	d102      	bne.n	800c456 <USBD_LL_DataInStage+0x36>
 800c450:	4798      	blx	r3
 800c452:	2000      	movs	r0, #0
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	2002      	movs	r0, #2
 800c458:	bd70      	pop	{r4, r5, r6, pc}
 800c45a:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 800c45e:	429e      	cmp	r6, r3
 800c460:	d833      	bhi.n	800c4ca <USBD_LL_DataInStage+0xaa>
 800c462:	69c2      	ldr	r2, [r0, #28]
 800c464:	fbb2 f5f3 	udiv	r5, r2, r3
 800c468:	fb03 2515 	mls	r5, r3, r5, r2
 800c46c:	b9ed      	cbnz	r5, 800c4aa <USBD_LL_DataInStage+0x8a>
 800c46e:	4293      	cmp	r3, r2
 800c470:	d81b      	bhi.n	800c4aa <USBD_LL_DataInStage+0x8a>
 800c472:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 800c476:	429a      	cmp	r2, r3
 800c478:	d217      	bcs.n	800c4aa <USBD_LL_DataInStage+0x8a>
 800c47a:	462a      	mov	r2, r5
 800c47c:	f000 fb24 	bl	800cac8 <USBD_CtlContinueSendData>
 800c480:	462b      	mov	r3, r5
 800c482:	462a      	mov	r2, r5
 800c484:	4629      	mov	r1, r5
 800c486:	4620      	mov	r0, r4
 800c488:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
 800c48c:	f000 fdf2 	bl	800d074 <USBD_LL_PrepareReceive>
 800c490:	e7d0      	b.n	800c434 <USBD_LL_DataInStage+0x14>
 800c492:	2180      	movs	r1, #128	; 0x80
 800c494:	f000 fda2 	bl	800cfdc <USBD_LL_StallEP>
 800c498:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d1cd      	bne.n	800c43c <USBD_LL_DataInStage+0x1c>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	b11b      	cbz	r3, 800c4ba <USBD_LL_DataInStage+0x9a>
 800c4b2:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800c4b6:	2a03      	cmp	r2, #3
 800c4b8:	d015      	beq.n	800c4e6 <USBD_LL_DataInStage+0xc6>
 800c4ba:	2180      	movs	r1, #128	; 0x80
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 fd8d 	bl	800cfdc <USBD_LL_StallEP>
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 fb2e 	bl	800cb24 <USBD_CtlReceiveStatus>
 800c4c8:	e7b4      	b.n	800c434 <USBD_LL_DataInStage+0x14>
 800c4ca:	460d      	mov	r5, r1
 800c4cc:	1af3      	subs	r3, r6, r3
 800c4ce:	4611      	mov	r1, r2
 800c4d0:	6203      	str	r3, [r0, #32]
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	f000 faf8 	bl	800cac8 <USBD_CtlContinueSendData>
 800c4d8:	462b      	mov	r3, r5
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 fdc8 	bl	800d074 <USBD_LL_PrepareReceive>
 800c4e4:	e7a6      	b.n	800c434 <USBD_LL_DataInStage+0x14>
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4798      	blx	r3
 800c4ea:	e7e6      	b.n	800c4ba <USBD_LL_DataInStage+0x9a>

0800c4ec <USBD_LL_Reset>:
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2640      	movs	r6, #64	; 0x40
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	2501      	movs	r5, #1
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	4633      	mov	r3, r6
 800c4fa:	f000 fd51 	bl	800cfa0 <USBD_LL_OpenEP>
 800c4fe:	4633      	mov	r3, r6
 800c500:	2180      	movs	r1, #128	; 0x80
 800c502:	2200      	movs	r2, #0
 800c504:	4620      	mov	r0, r4
 800c506:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 800c50a:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 800c50e:	f000 fd47 	bl	800cfa0 <USBD_LL_OpenEP>
 800c512:	2100      	movs	r1, #0
 800c514:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800c518:	61a5      	str	r5, [r4, #24]
 800c51a:	6266      	str	r6, [r4, #36]	; 0x24
 800c51c:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
 800c520:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
 800c524:	6061      	str	r1, [r4, #4]
 800c526:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
 800c52a:	b123      	cbz	r3, 800c536 <USBD_LL_Reset+0x4a>
 800c52c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c530:	4620      	mov	r0, r4
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	4798      	blx	r3
 800c536:	2000      	movs	r0, #0
 800c538:	bd70      	pop	{r4, r5, r6, pc}
 800c53a:	bf00      	nop

0800c53c <USBD_LL_SetSpeed>:
 800c53c:	4603      	mov	r3, r0
 800c53e:	2000      	movs	r0, #0
 800c540:	7419      	strb	r1, [r3, #16]
 800c542:	4770      	bx	lr

0800c544 <USBD_LL_Suspend>:
 800c544:	4603      	mov	r3, r0
 800c546:	2104      	movs	r1, #4
 800c548:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c54c:	2000      	movs	r0, #0
 800c54e:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
 800c552:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 800c556:	4770      	bx	lr

0800c558 <USBD_LL_Resume>:
 800c558:	4603      	mov	r3, r0
 800c55a:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c55e:	2000      	movs	r0, #0
 800c560:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop

0800c568 <USBD_LL_SOF>:
 800c568:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800c56c:	2a03      	cmp	r2, #3
 800c56e:	d001      	beq.n	800c574 <USBD_LL_SOF+0xc>
 800c570:	2000      	movs	r0, #0
 800c572:	4770      	bx	lr
 800c574:	b508      	push	{r3, lr}
 800c576:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c57a:	69db      	ldr	r3, [r3, #28]
 800c57c:	b103      	cbz	r3, 800c580 <USBD_LL_SOF+0x18>
 800c57e:	4798      	blx	r3
 800c580:	2000      	movs	r0, #0
 800c582:	bd08      	pop	{r3, pc}

0800c584 <USBD_StdDevReq>:
 800c584:	b530      	push	{r4, r5, lr}
 800c586:	780b      	ldrb	r3, [r1, #0]
 800c588:	460d      	mov	r5, r1
 800c58a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c58e:	2b20      	cmp	r3, #32
 800c590:	4604      	mov	r4, r0
 800c592:	b083      	sub	sp, #12
 800c594:	d00d      	beq.n	800c5b2 <USBD_StdDevReq+0x2e>
 800c596:	2b40      	cmp	r3, #64	; 0x40
 800c598:	d00b      	beq.n	800c5b2 <USBD_StdDevReq+0x2e>
 800c59a:	b19b      	cbz	r3, 800c5c4 <USBD_StdDevReq+0x40>
 800c59c:	2180      	movs	r1, #128	; 0x80
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 fd1c 	bl	800cfdc <USBD_LL_StallEP>
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f000 fd18 	bl	800cfdc <USBD_LL_StallEP>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	b003      	add	sp, #12
 800c5b0:	bd30      	pop	{r4, r5, pc}
 800c5b2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	4798      	blx	r3
 800c5be:	2000      	movs	r0, #0
 800c5c0:	b003      	add	sp, #12
 800c5c2:	bd30      	pop	{r4, r5, pc}
 800c5c4:	784b      	ldrb	r3, [r1, #1]
 800c5c6:	2b09      	cmp	r3, #9
 800c5c8:	d8e8      	bhi.n	800c59c <USBD_StdDevReq+0x18>
 800c5ca:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <USBD_StdDevReq+0x4c>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c62b 	.word	0x0800c62b
 800c5d4:	0800c657 	.word	0x0800c657
 800c5d8:	0800c59d 	.word	0x0800c59d
 800c5dc:	0800c675 	.word	0x0800c675
 800c5e0:	0800c59d 	.word	0x0800c59d
 800c5e4:	0800c67d 	.word	0x0800c67d
 800c5e8:	0800c6b5 	.word	0x0800c6b5
 800c5ec:	0800c59d 	.word	0x0800c59d
 800c5f0:	0800c6e5 	.word	0x0800c6e5
 800c5f4:	0800c5f9 	.word	0x0800c5f9
 800c5f8:	7889      	ldrb	r1, [r1, #2]
 800c5fa:	4d9e      	ldr	r5, [pc, #632]	; (800c874 <USBD_StdDevReq+0x2f0>)
 800c5fc:	2901      	cmp	r1, #1
 800c5fe:	7029      	strb	r1, [r5, #0]
 800c600:	d8cc      	bhi.n	800c59c <USBD_StdDevReq+0x18>
 800c602:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c606:	2b02      	cmp	r3, #2
 800c608:	f000 8111 	beq.w	800c82e <USBD_StdDevReq+0x2aa>
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	f000 80ff 	beq.w	800c810 <USBD_StdDevReq+0x28c>
 800c612:	2180      	movs	r1, #128	; 0x80
 800c614:	f000 fce2 	bl	800cfdc <USBD_LL_StallEP>
 800c618:	2100      	movs	r1, #0
 800c61a:	4620      	mov	r0, r4
 800c61c:	f000 fcde 	bl	800cfdc <USBD_LL_StallEP>
 800c620:	4620      	mov	r0, r4
 800c622:	7829      	ldrb	r1, [r5, #0]
 800c624:	f7ff fe86 	bl	800c334 <USBD_ClrClassConfig>
 800c628:	e7c0      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c62a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c62e:	3b01      	subs	r3, #1
 800c630:	2b02      	cmp	r3, #2
 800c632:	d8b3      	bhi.n	800c59c <USBD_StdDevReq+0x18>
 800c634:	88cb      	ldrh	r3, [r1, #6]
 800c636:	2b02      	cmp	r3, #2
 800c638:	d1b0      	bne.n	800c59c <USBD_StdDevReq+0x18>
 800c63a:	2201      	movs	r2, #1
 800c63c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800c640:	60c2      	str	r2, [r0, #12]
 800c642:	b10b      	cbz	r3, 800c648 <USBD_StdDevReq+0xc4>
 800c644:	2303      	movs	r3, #3
 800c646:	60c3      	str	r3, [r0, #12]
 800c648:	2202      	movs	r2, #2
 800c64a:	4620      	mov	r0, r4
 800c64c:	f104 010c 	add.w	r1, r4, #12
 800c650:	f000 fa2c 	bl	800caac <USBD_CtlSendData>
 800c654:	e7aa      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c656:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c65a:	3b01      	subs	r3, #1
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d89d      	bhi.n	800c59c <USBD_StdDevReq+0x18>
 800c660:	884b      	ldrh	r3, [r1, #2]
 800c662:	2b01      	cmp	r3, #1
 800c664:	d1a2      	bne.n	800c5ac <USBD_StdDevReq+0x28>
 800c666:	2300      	movs	r3, #0
 800c668:	4620      	mov	r0, r4
 800c66a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800c66e:	f000 fa4d 	bl	800cb0c <USBD_CtlSendStatus>
 800c672:	e79b      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c674:	884b      	ldrh	r3, [r1, #2]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d198      	bne.n	800c5ac <USBD_StdDevReq+0x28>
 800c67a:	e7f5      	b.n	800c668 <USBD_StdDevReq+0xe4>
 800c67c:	888b      	ldrh	r3, [r1, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d18c      	bne.n	800c59c <USBD_StdDevReq+0x18>
 800c682:	88cb      	ldrh	r3, [r1, #6]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d189      	bne.n	800c59c <USBD_StdDevReq+0x18>
 800c688:	884d      	ldrh	r5, [r1, #2]
 800c68a:	2d7f      	cmp	r5, #127	; 0x7f
 800c68c:	d886      	bhi.n	800c59c <USBD_StdDevReq+0x18>
 800c68e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c692:	2b03      	cmp	r3, #3
 800c694:	d082      	beq.n	800c59c <USBD_StdDevReq+0x18>
 800c696:	b2e9      	uxtb	r1, r5
 800c698:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
 800c69c:	f000 fcce 	bl	800d03c <USBD_LL_SetUSBAddress>
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f000 fa33 	bl	800cb0c <USBD_CtlSendStatus>
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	f000 80df 	beq.w	800c86a <USBD_StdDevReq+0x2e6>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800c6b2:	e77b      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c6b4:	884a      	ldrh	r2, [r1, #2]
 800c6b6:	0a13      	lsrs	r3, r2, #8
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	2b06      	cmp	r3, #6
 800c6bc:	f63f af6e 	bhi.w	800c59c <USBD_StdDevReq+0x18>
 800c6c0:	a101      	add	r1, pc, #4	; (adr r1, 800c6c8 <USBD_StdDevReq+0x144>)
 800c6c2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c777 	.word	0x0800c777
 800c6cc:	0800c75f 	.word	0x0800c75f
 800c6d0:	0800c74d 	.word	0x0800c74d
 800c6d4:	0800c59d 	.word	0x0800c59d
 800c6d8:	0800c59d 	.word	0x0800c59d
 800c6dc:	0800c737 	.word	0x0800c737
 800c6e0:	0800c709 	.word	0x0800c709
 800c6e4:	88ca      	ldrh	r2, [r1, #6]
 800c6e6:	2a01      	cmp	r2, #1
 800c6e8:	f47f af58 	bne.w	800c59c <USBD_StdDevReq+0x18>
 800c6ec:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d878      	bhi.n	800c7e6 <USBD_StdDevReq+0x262>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f43f af51 	beq.w	800c59c <USBD_StdDevReq+0x18>
 800c6fa:	4601      	mov	r1, r0
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f841 3f08 	str.w	r3, [r1, #8]!
 800c702:	f000 f9d3 	bl	800caac <USBD_CtlSendData>
 800c706:	e751      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c708:	7c03      	ldrb	r3, [r0, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f47f af46 	bne.w	800c59c <USBD_StdDevReq+0x18>
 800c710:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c714:	f10d 0006 	add.w	r0, sp, #6
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	4798      	blx	r3
 800c71c:	2307      	movs	r3, #7
 800c71e:	7043      	strb	r3, [r0, #1]
 800c720:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c724:	2a00      	cmp	r2, #0
 800c726:	d06e      	beq.n	800c806 <USBD_StdDevReq+0x282>
 800c728:	88eb      	ldrh	r3, [r5, #6]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d162      	bne.n	800c7f4 <USBD_StdDevReq+0x270>
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 f9ec 	bl	800cb0c <USBD_CtlSendStatus>
 800c734:	e73a      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c736:	7c03      	ldrb	r3, [r0, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f47f af2f 	bne.w	800c59c <USBD_StdDevReq+0x18>
 800c73e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c742:	f10d 0006 	add.w	r0, sp, #6
 800c746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c748:	4798      	blx	r3
 800c74a:	e7e9      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c74c:	b2d2      	uxtb	r2, r2
 800c74e:	2a05      	cmp	r2, #5
 800c750:	f63f af24 	bhi.w	800c59c <USBD_StdDevReq+0x18>
 800c754:	e8df f002 	tbb	[pc, r2]
 800c758:	272f373f 	.word	0x272f373f
 800c75c:	171f      	.short	0x171f
 800c75e:	7c03      	ldrb	r3, [r0, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d172      	bne.n	800c84a <USBD_StdDevReq+0x2c6>
 800c764:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c768:	f10d 0006 	add.w	r0, sp, #6
 800c76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76e:	4798      	blx	r3
 800c770:	2302      	movs	r3, #2
 800c772:	7043      	strb	r3, [r0, #1]
 800c774:	e7d4      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c776:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c77a:	f10d 0106 	add.w	r1, sp, #6
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	7c00      	ldrb	r0, [r0, #16]
 800c782:	4798      	blx	r3
 800c784:	e7cc      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c786:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c78a:	f10d 0106 	add.w	r1, sp, #6
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	7c00      	ldrb	r0, [r0, #16]
 800c792:	4798      	blx	r3
 800c794:	e7c4      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c796:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c79a:	f10d 0106 	add.w	r1, sp, #6
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	7c00      	ldrb	r0, [r0, #16]
 800c7a2:	4798      	blx	r3
 800c7a4:	e7bc      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c7a6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c7aa:	f10d 0106 	add.w	r1, sp, #6
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	7c00      	ldrb	r0, [r0, #16]
 800c7b2:	4798      	blx	r3
 800c7b4:	e7b4      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c7b6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c7ba:	f10d 0106 	add.w	r1, sp, #6
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	7c00      	ldrb	r0, [r0, #16]
 800c7c2:	4798      	blx	r3
 800c7c4:	e7ac      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c7c6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c7ca:	f10d 0106 	add.w	r1, sp, #6
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	7c00      	ldrb	r0, [r0, #16]
 800c7d2:	4798      	blx	r3
 800c7d4:	e7a4      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c7d6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800c7da:	f10d 0106 	add.w	r1, sp, #6
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	7c00      	ldrb	r0, [r0, #16]
 800c7e2:	4798      	blx	r3
 800c7e4:	e79c      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	f47f aed8 	bne.w	800c59c <USBD_StdDevReq+0x18>
 800c7ec:	1d01      	adds	r1, r0, #4
 800c7ee:	f000 f95d 	bl	800caac <USBD_CtlSendData>
 800c7f2:	e6db      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	bf28      	it	cs
 800c7f8:	461a      	movcs	r2, r3
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c802:	f000 f953 	bl	800caac <USBD_CtlSendData>
 800c806:	88eb      	ldrh	r3, [r5, #6]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f47f aecf 	bne.w	800c5ac <USBD_StdDevReq+0x28>
 800c80e:	e78e      	b.n	800c72e <USBD_StdDevReq+0x1aa>
 800c810:	b321      	cbz	r1, 800c85c <USBD_StdDevReq+0x2d8>
 800c812:	6841      	ldr	r1, [r0, #4]
 800c814:	2901      	cmp	r1, #1
 800c816:	d08a      	beq.n	800c72e <USBD_StdDevReq+0x1aa>
 800c818:	b2c9      	uxtb	r1, r1
 800c81a:	f7ff fd8b 	bl	800c334 <USBD_ClrClassConfig>
 800c81e:	7829      	ldrb	r1, [r5, #0]
 800c820:	4620      	mov	r0, r4
 800c822:	6061      	str	r1, [r4, #4]
 800c824:	f7ff fd7c 	bl	800c320 <USBD_SetClassConfig>
 800c828:	2802      	cmp	r0, #2
 800c82a:	d180      	bne.n	800c72e <USBD_StdDevReq+0x1aa>
 800c82c:	e6b6      	b.n	800c59c <USBD_StdDevReq+0x18>
 800c82e:	2900      	cmp	r1, #0
 800c830:	f43f af7d 	beq.w	800c72e <USBD_StdDevReq+0x1aa>
 800c834:	2101      	movs	r1, #1
 800c836:	2303      	movs	r3, #3
 800c838:	6041      	str	r1, [r0, #4]
 800c83a:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 800c83e:	f7ff fd6f 	bl	800c320 <USBD_SetClassConfig>
 800c842:	2802      	cmp	r0, #2
 800c844:	f47f af73 	bne.w	800c72e <USBD_StdDevReq+0x1aa>
 800c848:	e6a8      	b.n	800c59c <USBD_StdDevReq+0x18>
 800c84a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800c84e:	f10d 0006 	add.w	r0, sp, #6
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	4798      	blx	r3
 800c856:	2302      	movs	r3, #2
 800c858:	7043      	strb	r3, [r0, #1]
 800c85a:	e761      	b.n	800c720 <USBD_StdDevReq+0x19c>
 800c85c:	2302      	movs	r3, #2
 800c85e:	6041      	str	r1, [r0, #4]
 800c860:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
 800c864:	f7ff fd66 	bl	800c334 <USBD_ClrClassConfig>
 800c868:	e761      	b.n	800c72e <USBD_StdDevReq+0x1aa>
 800c86a:	2301      	movs	r3, #1
 800c86c:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800c870:	e69c      	b.n	800c5ac <USBD_StdDevReq+0x28>
 800c872:	bf00      	nop
 800c874:	20000a84 	.word	0x20000a84

0800c878 <USBD_StdItfReq>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	780b      	ldrb	r3, [r1, #0]
 800c87c:	460d      	mov	r5, r1
 800c87e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800c882:	2a40      	cmp	r2, #64	; 0x40
 800c884:	4604      	mov	r4, r0
 800c886:	d00a      	beq.n	800c89e <USBD_StdItfReq+0x26>
 800c888:	065b      	lsls	r3, r3, #25
 800c88a:	d508      	bpl.n	800c89e <USBD_StdItfReq+0x26>
 800c88c:	2180      	movs	r1, #128	; 0x80
 800c88e:	f000 fba5 	bl	800cfdc <USBD_LL_StallEP>
 800c892:	2100      	movs	r1, #0
 800c894:	4620      	mov	r0, r4
 800c896:	f000 fba1 	bl	800cfdc <USBD_LL_StallEP>
 800c89a:	2000      	movs	r0, #0
 800c89c:	bd38      	pop	{r3, r4, r5, pc}
 800c89e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d811      	bhi.n	800c8cc <USBD_StdItfReq+0x54>
 800c8a8:	792b      	ldrb	r3, [r5, #4]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d80e      	bhi.n	800c8cc <USBD_StdItfReq+0x54>
 800c8ae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	4798      	blx	r3
 800c8ba:	88eb      	ldrh	r3, [r5, #6]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1ec      	bne.n	800c89a <USBD_StdItfReq+0x22>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d1ea      	bne.n	800c89a <USBD_StdItfReq+0x22>
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 f921 	bl	800cb0c <USBD_CtlSendStatus>
 800c8ca:	e7e6      	b.n	800c89a <USBD_StdItfReq+0x22>
 800c8cc:	2180      	movs	r1, #128	; 0x80
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 fb84 	bl	800cfdc <USBD_LL_StallEP>
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 fb80 	bl	800cfdc <USBD_LL_StallEP>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	bd38      	pop	{r3, r4, r5, pc}

0800c8e0 <USBD_StdEPReq>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	780b      	ldrb	r3, [r1, #0]
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8ea:	2b20      	cmp	r3, #32
 800c8ec:	d00c      	beq.n	800c908 <USBD_StdEPReq+0x28>
 800c8ee:	2b40      	cmp	r3, #64	; 0x40
 800c8f0:	d00a      	beq.n	800c908 <USBD_StdEPReq+0x28>
 800c8f2:	b183      	cbz	r3, 800c916 <USBD_StdEPReq+0x36>
 800c8f4:	2180      	movs	r1, #128	; 0x80
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 fb70 	bl	800cfdc <USBD_LL_StallEP>
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 fb6c 	bl	800cfdc <USBD_LL_StallEP>
 800c904:	2000      	movs	r0, #0
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800c90c:	4620      	mov	r0, r4
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	4798      	blx	r3
 800c912:	2000      	movs	r0, #0
 800c914:	bd38      	pop	{r3, r4, r5, pc}
 800c916:	784b      	ldrb	r3, [r1, #1]
 800c918:	888a      	ldrh	r2, [r1, #4]
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	fa5f fc82 	uxtb.w	ip, r2
 800c920:	d03e      	beq.n	800c9a0 <USBD_StdEPReq+0xc0>
 800c922:	2b03      	cmp	r3, #3
 800c924:	d02a      	beq.n	800c97c <USBD_StdEPReq+0x9c>
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e4      	bne.n	800c8f4 <USBD_StdEPReq+0x14>
 800c92a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d051      	beq.n	800c9d6 <USBD_StdEPReq+0xf6>
 800c932:	2b03      	cmp	r3, #3
 800c934:	d1de      	bne.n	800c8f4 <USBD_StdEPReq+0x14>
 800c936:	f00c 030f 	and.w	r3, ip, #15
 800c93a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c93e:	0612      	lsls	r2, r2, #24
 800c940:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c944:	d456      	bmi.n	800c9f4 <USBD_StdEPReq+0x114>
 800c946:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0d2      	beq.n	800c8f4 <USBD_StdEPReq+0x14>
 800c94e:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800c952:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800c956:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c95a:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 800c95e:	b133      	cbz	r3, 800c96e <USBD_StdEPReq+0x8e>
 800c960:	4661      	mov	r1, ip
 800c962:	4620      	mov	r0, r4
 800c964:	f000 fb56 	bl	800d014 <USBD_LL_IsStallEP>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d04f      	beq.n	800ca0c <USBD_StdEPReq+0x12c>
 800c96c:	2301      	movs	r3, #1
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	2202      	movs	r2, #2
 800c972:	4629      	mov	r1, r5
 800c974:	4620      	mov	r0, r4
 800c976:	f000 f899 	bl	800caac <USBD_CtlSendData>
 800c97a:	e7c3      	b.n	800c904 <USBD_StdEPReq+0x24>
 800c97c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c980:	2b02      	cmp	r3, #2
 800c982:	d01d      	beq.n	800c9c0 <USBD_StdEPReq+0xe0>
 800c984:	2b03      	cmp	r3, #3
 800c986:	d1b5      	bne.n	800c8f4 <USBD_StdEPReq+0x14>
 800c988:	884b      	ldrh	r3, [r1, #2]
 800c98a:	b92b      	cbnz	r3, 800c998 <USBD_StdEPReq+0xb8>
 800c98c:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800c990:	d002      	beq.n	800c998 <USBD_StdEPReq+0xb8>
 800c992:	88cb      	ldrh	r3, [r1, #6]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d03b      	beq.n	800ca10 <USBD_StdEPReq+0x130>
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 f8b7 	bl	800cb0c <USBD_CtlSendStatus>
 800c99e:	e7b1      	b.n	800c904 <USBD_StdEPReq+0x24>
 800c9a0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d00b      	beq.n	800c9c0 <USBD_StdEPReq+0xe0>
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d1a3      	bne.n	800c8f4 <USBD_StdEPReq+0x14>
 800c9ac:	884b      	ldrh	r3, [r1, #2]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1a8      	bne.n	800c904 <USBD_StdEPReq+0x24>
 800c9b2:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800c9b6:	d0ef      	beq.n	800c998 <USBD_StdEPReq+0xb8>
 800c9b8:	4661      	mov	r1, ip
 800c9ba:	f000 fb1d 	bl	800cff8 <USBD_LL_ClearStallEP>
 800c9be:	e7eb      	b.n	800c998 <USBD_StdEPReq+0xb8>
 800c9c0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800c9c4:	d096      	beq.n	800c8f4 <USBD_StdEPReq+0x14>
 800c9c6:	4661      	mov	r1, ip
 800c9c8:	f000 fb08 	bl	800cfdc <USBD_LL_StallEP>
 800c9cc:	2180      	movs	r1, #128	; 0x80
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 fb04 	bl	800cfdc <USBD_LL_StallEP>
 800c9d4:	e796      	b.n	800c904 <USBD_StdEPReq+0x24>
 800c9d6:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800c9da:	d18b      	bne.n	800c8f4 <USBD_StdEPReq+0x14>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	0611      	lsls	r1, r2, #24
 800c9e0:	bf4c      	ite	mi
 800c9e2:	f100 0114 	addmi.w	r1, r0, #20
 800c9e6:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	600b      	str	r3, [r1, #0]
 800c9ee:	f000 f85d 	bl	800caac <USBD_CtlSendData>
 800c9f2:	e787      	b.n	800c904 <USBD_StdEPReq+0x24>
 800c9f4:	699b      	ldr	r3, [r3, #24]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f43f af7c 	beq.w	800c8f4 <USBD_StdEPReq+0x14>
 800c9fc:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800ca00:	1c5d      	adds	r5, r3, #1
 800ca02:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ca06:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ca0a:	e7a8      	b.n	800c95e <USBD_StdEPReq+0x7e>
 800ca0c:	6028      	str	r0, [r5, #0]
 800ca0e:	e7af      	b.n	800c970 <USBD_StdEPReq+0x90>
 800ca10:	4661      	mov	r1, ip
 800ca12:	f000 fae3 	bl	800cfdc <USBD_LL_StallEP>
 800ca16:	e7bf      	b.n	800c998 <USBD_StdEPReq+0xb8>

0800ca18 <USBD_ParseSetupRequest>:
 800ca18:	780b      	ldrb	r3, [r1, #0]
 800ca1a:	7003      	strb	r3, [r0, #0]
 800ca1c:	784b      	ldrb	r3, [r1, #1]
 800ca1e:	7043      	strb	r3, [r0, #1]
 800ca20:	78ca      	ldrb	r2, [r1, #3]
 800ca22:	788b      	ldrb	r3, [r1, #2]
 800ca24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ca28:	8043      	strh	r3, [r0, #2]
 800ca2a:	794a      	ldrb	r2, [r1, #5]
 800ca2c:	790b      	ldrb	r3, [r1, #4]
 800ca2e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ca32:	8083      	strh	r3, [r0, #4]
 800ca34:	79ca      	ldrb	r2, [r1, #7]
 800ca36:	798b      	ldrb	r3, [r1, #6]
 800ca38:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ca3c:	80c3      	strh	r3, [r0, #6]
 800ca3e:	4770      	bx	lr

0800ca40 <USBD_CtlError>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	4604      	mov	r4, r0
 800ca44:	2180      	movs	r1, #128	; 0x80
 800ca46:	f000 fac9 	bl	800cfdc <USBD_LL_StallEP>
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca50:	2100      	movs	r1, #0
 800ca52:	f000 bac3 	b.w	800cfdc <USBD_LL_StallEP>
 800ca56:	bf00      	nop

0800ca58 <USBD_GetString>:
 800ca58:	b318      	cbz	r0, 800caa2 <USBD_GetString+0x4a>
 800ca5a:	7803      	ldrb	r3, [r0, #0]
 800ca5c:	b430      	push	{r4, r5}
 800ca5e:	b30b      	cbz	r3, 800caa4 <USBD_GetString+0x4c>
 800ca60:	4604      	mov	r4, r0
 800ca62:	f1c0 0c01 	rsb	ip, r0, #1
 800ca66:	eb04 030c 	add.w	r3, r4, ip
 800ca6a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2d00      	cmp	r5, #0
 800ca72:	d1f8      	bne.n	800ca66 <USBD_GetString+0xe>
 800ca74:	3301      	adds	r3, #1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	b2dc      	uxtb	r4, r3
 800ca7a:	8013      	strh	r3, [r2, #0]
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	700c      	strb	r4, [r1, #0]
 800ca80:	704b      	strb	r3, [r1, #1]
 800ca82:	7804      	ldrb	r4, [r0, #0]
 800ca84:	b15c      	cbz	r4, 800ca9e <USBD_GetString+0x46>
 800ca86:	2302      	movs	r3, #2
 800ca88:	2500      	movs	r5, #0
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	54cc      	strb	r4, [r1, r3]
 800ca90:	548d      	strb	r5, [r1, r2]
 800ca92:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800ca96:	3302      	adds	r3, #2
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2c00      	cmp	r4, #0
 800ca9c:	d1f5      	bne.n	800ca8a <USBD_GetString+0x32>
 800ca9e:	bc30      	pop	{r4, r5}
 800caa0:	4770      	bx	lr
 800caa2:	4770      	bx	lr
 800caa4:	2402      	movs	r4, #2
 800caa6:	4623      	mov	r3, r4
 800caa8:	e7e7      	b.n	800ca7a <USBD_GetString+0x22>
 800caaa:	bf00      	nop

0800caac <USBD_CtlSendData>:
 800caac:	b510      	push	{r4, lr}
 800caae:	4613      	mov	r3, r2
 800cab0:	2402      	movs	r4, #2
 800cab2:	460a      	mov	r2, r1
 800cab4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800cab8:	2100      	movs	r1, #0
 800caba:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
 800cabe:	f000 facb 	bl	800d058 <USBD_LL_Transmit>
 800cac2:	2000      	movs	r0, #0
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	bf00      	nop

0800cac8 <USBD_CtlContinueSendData>:
 800cac8:	468c      	mov	ip, r1
 800caca:	b508      	push	{r3, lr}
 800cacc:	2100      	movs	r1, #0
 800cace:	4613      	mov	r3, r2
 800cad0:	4662      	mov	r2, ip
 800cad2:	f000 fac1 	bl	800d058 <USBD_LL_Transmit>
 800cad6:	2000      	movs	r0, #0
 800cad8:	bd08      	pop	{r3, pc}
 800cada:	bf00      	nop

0800cadc <USBD_CtlPrepareRx>:
 800cadc:	b510      	push	{r4, lr}
 800cade:	4613      	mov	r3, r2
 800cae0:	2403      	movs	r4, #3
 800cae2:	460a      	mov	r2, r1
 800cae4:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148
 800cae8:	2100      	movs	r1, #0
 800caea:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
 800caee:	f000 fac1 	bl	800d074 <USBD_LL_PrepareReceive>
 800caf2:	2000      	movs	r0, #0
 800caf4:	bd10      	pop	{r4, pc}
 800caf6:	bf00      	nop

0800caf8 <USBD_CtlContinueRx>:
 800caf8:	468c      	mov	ip, r1
 800cafa:	b508      	push	{r3, lr}
 800cafc:	2100      	movs	r1, #0
 800cafe:	4613      	mov	r3, r2
 800cb00:	4662      	mov	r2, ip
 800cb02:	f000 fab7 	bl	800d074 <USBD_LL_PrepareReceive>
 800cb06:	2000      	movs	r0, #0
 800cb08:	bd08      	pop	{r3, pc}
 800cb0a:	bf00      	nop

0800cb0c <USBD_CtlSendStatus>:
 800cb0c:	b508      	push	{r3, lr}
 800cb0e:	2104      	movs	r1, #4
 800cb10:	2300      	movs	r3, #0
 800cb12:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
 800cb16:	461a      	mov	r2, r3
 800cb18:	4619      	mov	r1, r3
 800cb1a:	f000 fa9d 	bl	800d058 <USBD_LL_Transmit>
 800cb1e:	2000      	movs	r0, #0
 800cb20:	bd08      	pop	{r3, pc}
 800cb22:	bf00      	nop

0800cb24 <USBD_CtlReceiveStatus>:
 800cb24:	b508      	push	{r3, lr}
 800cb26:	2105      	movs	r1, #5
 800cb28:	2300      	movs	r3, #0
 800cb2a:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
 800cb2e:	461a      	mov	r2, r3
 800cb30:	4619      	mov	r1, r3
 800cb32:	f000 fa9f 	bl	800d074 <USBD_LL_PrepareReceive>
 800cb36:	2000      	movs	r0, #0
 800cb38:	bd08      	pop	{r3, pc}
 800cb3a:	bf00      	nop

0800cb3c <MX_USB_DEVICE_Init>:
 800cb3c:	b508      	push	{r3, lr}
 800cb3e:	2200      	movs	r2, #0
 800cb40:	4917      	ldr	r1, [pc, #92]	; (800cba0 <MX_USB_DEVICE_Init+0x64>)
 800cb42:	4818      	ldr	r0, [pc, #96]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb44:	f7ff fbc8 	bl	800c2d8 <USBD_Init>
 800cb48:	b970      	cbnz	r0, 800cb68 <MX_USB_DEVICE_Init+0x2c>
 800cb4a:	4917      	ldr	r1, [pc, #92]	; (800cba8 <MX_USB_DEVICE_Init+0x6c>)
 800cb4c:	4815      	ldr	r0, [pc, #84]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb4e:	f7ff fbd9 	bl	800c304 <USBD_RegisterClass>
 800cb52:	b988      	cbnz	r0, 800cb78 <MX_USB_DEVICE_Init+0x3c>
 800cb54:	4915      	ldr	r1, [pc, #84]	; (800cbac <MX_USB_DEVICE_Init+0x70>)
 800cb56:	4813      	ldr	r0, [pc, #76]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb58:	f7ff fb6e 	bl	800c238 <USBD_CDC_RegisterInterface>
 800cb5c:	b9a0      	cbnz	r0, 800cb88 <MX_USB_DEVICE_Init+0x4c>
 800cb5e:	4811      	ldr	r0, [pc, #68]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb60:	f7ff fbd8 	bl	800c314 <USBD_Start>
 800cb64:	b9b8      	cbnz	r0, 800cb96 <MX_USB_DEVICE_Init+0x5a>
 800cb66:	bd08      	pop	{r3, pc}
 800cb68:	f7fa fda8 	bl	80076bc <Error_Handler>
 800cb6c:	490e      	ldr	r1, [pc, #56]	; (800cba8 <MX_USB_DEVICE_Init+0x6c>)
 800cb6e:	480d      	ldr	r0, [pc, #52]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb70:	f7ff fbc8 	bl	800c304 <USBD_RegisterClass>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d0ed      	beq.n	800cb54 <MX_USB_DEVICE_Init+0x18>
 800cb78:	f7fa fda0 	bl	80076bc <Error_Handler>
 800cb7c:	490b      	ldr	r1, [pc, #44]	; (800cbac <MX_USB_DEVICE_Init+0x70>)
 800cb7e:	4809      	ldr	r0, [pc, #36]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb80:	f7ff fb5a 	bl	800c238 <USBD_CDC_RegisterInterface>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d0ea      	beq.n	800cb5e <MX_USB_DEVICE_Init+0x22>
 800cb88:	f7fa fd98 	bl	80076bc <Error_Handler>
 800cb8c:	4805      	ldr	r0, [pc, #20]	; (800cba4 <MX_USB_DEVICE_Init+0x68>)
 800cb8e:	f7ff fbc1 	bl	800c314 <USBD_Start>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d0e7      	beq.n	800cb66 <MX_USB_DEVICE_Init+0x2a>
 800cb96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb9a:	f7fa bd8f 	b.w	80076bc <Error_Handler>
 800cb9e:	bf00      	nop
 800cba0:	20000150 	.word	0x20000150
 800cba4:	20000a88 	.word	0x20000a88
 800cba8:	20000030 	.word	0x20000030
 800cbac:	20000140 	.word	0x20000140

0800cbb0 <CDC_DeInit_FS>:
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	4770      	bx	lr

0800cbb4 <CDC_Control_FS>:
 800cbb4:	2000      	movs	r0, #0
 800cbb6:	4770      	bx	lr

0800cbb8 <CDC_Receive_FS>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	4816      	ldr	r0, [pc, #88]	; (800cc18 <CDC_Receive_FS+0x60>)
 800cbc0:	4621      	mov	r1, r4
 800cbc2:	f7ff fb4b 	bl	800c25c <USBD_CDC_SetRxBuffer>
 800cbc6:	4814      	ldr	r0, [pc, #80]	; (800cc18 <CDC_Receive_FS+0x60>)
 800cbc8:	f7ff fb6a 	bl	800c2a0 <USBD_CDC_ReceivePacket>
 800cbcc:	2240      	movs	r2, #64	; 0x40
 800cbce:	2100      	movs	r1, #0
 800cbd0:	4812      	ldr	r0, [pc, #72]	; (800cc1c <CDC_Receive_FS+0x64>)
 800cbd2:	f000 fa95 	bl	800d100 <memset>
 800cbd6:	4623      	mov	r3, r4
 800cbd8:	682a      	ldr	r2, [r5, #0]
 800cbda:	4910      	ldr	r1, [pc, #64]	; (800cc1c <CDC_Receive_FS+0x64>)
 800cbdc:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800cbe0:	681e      	ldr	r6, [r3, #0]
 800cbe2:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800cbe6:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800cbea:	68dd      	ldr	r5, [r3, #12]
 800cbec:	3310      	adds	r3, #16
 800cbee:	4283      	cmp	r3, r0
 800cbf0:	600e      	str	r6, [r1, #0]
 800cbf2:	f8c1 e004 	str.w	lr, [r1, #4]
 800cbf6:	f8c1 c008 	str.w	ip, [r1, #8]
 800cbfa:	60cd      	str	r5, [r1, #12]
 800cbfc:	f101 0110 	add.w	r1, r1, #16
 800cc00:	d1ee      	bne.n	800cbe0 <CDC_Receive_FS+0x28>
 800cc02:	2100      	movs	r1, #0
 800cc04:	b2d2      	uxtb	r2, r2
 800cc06:	4620      	mov	r0, r4
 800cc08:	f000 fa7a 	bl	800d100 <memset>
 800cc0c:	4804      	ldr	r0, [pc, #16]	; (800cc20 <CDC_Receive_FS+0x68>)
 800cc0e:	f7fb ff53 	bl	8008ab8 <HAL_EXTI_GenerateSWI>
 800cc12:	2000      	movs	r0, #0
 800cc14:	bd70      	pop	{r4, r5, r6, pc}
 800cc16:	bf00      	nop
 800cc18:	20000a88 	.word	0x20000a88
 800cc1c:	20000a2c 	.word	0x20000a2c
 800cc20:	2000052c 	.word	0x2000052c

0800cc24 <CDC_Init_FS>:
 800cc24:	b510      	push	{r4, lr}
 800cc26:	4c06      	ldr	r4, [pc, #24]	; (800cc40 <CDC_Init_FS+0x1c>)
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	4905      	ldr	r1, [pc, #20]	; (800cc44 <CDC_Init_FS+0x20>)
 800cc2e:	f7ff fb0b 	bl	800c248 <USBD_CDC_SetTxBuffer>
 800cc32:	4620      	mov	r0, r4
 800cc34:	4904      	ldr	r1, [pc, #16]	; (800cc48 <CDC_Init_FS+0x24>)
 800cc36:	f7ff fb11 	bl	800c25c <USBD_CDC_SetRxBuffer>
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	bd10      	pop	{r4, pc}
 800cc3e:	bf00      	nop
 800cc40:	20000a88 	.word	0x20000a88
 800cc44:	2000110c 	.word	0x2000110c
 800cc48:	20000d24 	.word	0x20000d24

0800cc4c <CDC_Transmit_FS>:
 800cc4c:	b510      	push	{r4, lr}
 800cc4e:	4c09      	ldr	r4, [pc, #36]	; (800cc74 <CDC_Transmit_FS+0x28>)
 800cc50:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 800cc54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc58:	b10b      	cbz	r3, 800cc5e <CDC_Transmit_FS+0x12>
 800cc5a:	2001      	movs	r0, #1
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	460a      	mov	r2, r1
 800cc60:	4601      	mov	r1, r0
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7ff faf0 	bl	800c248 <USBD_CDC_SetTxBuffer>
 800cc68:	4620      	mov	r0, r4
 800cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc6e:	f7ff bafd 	b.w	800c26c <USBD_CDC_TransmitPacket>
 800cc72:	bf00      	nop
 800cc74:	20000a88 	.word	0x20000a88

0800cc78 <USBD_FS_DeviceDescriptor>:
 800cc78:	2312      	movs	r3, #18
 800cc7a:	4801      	ldr	r0, [pc, #4]	; (800cc80 <USBD_FS_DeviceDescriptor+0x8>)
 800cc7c:	800b      	strh	r3, [r1, #0]
 800cc7e:	4770      	bx	lr
 800cc80:	2000016c 	.word	0x2000016c

0800cc84 <USBD_FS_LangIDStrDescriptor>:
 800cc84:	2304      	movs	r3, #4
 800cc86:	4801      	ldr	r0, [pc, #4]	; (800cc8c <USBD_FS_LangIDStrDescriptor+0x8>)
 800cc88:	800b      	strh	r3, [r1, #0]
 800cc8a:	4770      	bx	lr
 800cc8c:	20000180 	.word	0x20000180

0800cc90 <USBD_FS_ManufacturerStrDescriptor>:
 800cc90:	b510      	push	{r4, lr}
 800cc92:	4c04      	ldr	r4, [pc, #16]	; (800cca4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800cc94:	460a      	mov	r2, r1
 800cc96:	4804      	ldr	r0, [pc, #16]	; (800cca8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800cc98:	4621      	mov	r1, r4
 800cc9a:	f7ff fedd 	bl	800ca58 <USBD_GetString>
 800cc9e:	4620      	mov	r0, r4
 800cca0:	bd10      	pop	{r4, pc}
 800cca2:	bf00      	nop
 800cca4:	200014f4 	.word	0x200014f4
 800cca8:	080117e8 	.word	0x080117e8

0800ccac <USBD_FS_ProductStrDescriptor>:
 800ccac:	b510      	push	{r4, lr}
 800ccae:	4c04      	ldr	r4, [pc, #16]	; (800ccc0 <USBD_FS_ProductStrDescriptor+0x14>)
 800ccb0:	460a      	mov	r2, r1
 800ccb2:	4804      	ldr	r0, [pc, #16]	; (800ccc4 <USBD_FS_ProductStrDescriptor+0x18>)
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	f7ff fecf 	bl	800ca58 <USBD_GetString>
 800ccba:	4620      	mov	r0, r4
 800ccbc:	bd10      	pop	{r4, pc}
 800ccbe:	bf00      	nop
 800ccc0:	200014f4 	.word	0x200014f4
 800ccc4:	080117fc 	.word	0x080117fc

0800ccc8 <USBD_FS_ConfigStrDescriptor>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	4c04      	ldr	r4, [pc, #16]	; (800ccdc <USBD_FS_ConfigStrDescriptor+0x14>)
 800cccc:	460a      	mov	r2, r1
 800ccce:	4804      	ldr	r0, [pc, #16]	; (800cce0 <USBD_FS_ConfigStrDescriptor+0x18>)
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	f7ff fec1 	bl	800ca58 <USBD_GetString>
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	bf00      	nop
 800ccdc:	200014f4 	.word	0x200014f4
 800cce0:	08011814 	.word	0x08011814

0800cce4 <USBD_FS_InterfaceStrDescriptor>:
 800cce4:	b510      	push	{r4, lr}
 800cce6:	4c04      	ldr	r4, [pc, #16]	; (800ccf8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 800cce8:	460a      	mov	r2, r1
 800ccea:	4804      	ldr	r0, [pc, #16]	; (800ccfc <USBD_FS_InterfaceStrDescriptor+0x18>)
 800ccec:	4621      	mov	r1, r4
 800ccee:	f7ff feb3 	bl	800ca58 <USBD_GetString>
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	bf00      	nop
 800ccf8:	200014f4 	.word	0x200014f4
 800ccfc:	08011820 	.word	0x08011820

0800cd00 <USBD_FS_SerialStrDescriptor>:
 800cd00:	f04f 0c1a 	mov.w	ip, #26
 800cd04:	4a42      	ldr	r2, [pc, #264]	; (800ce10 <USBD_FS_SerialStrDescriptor+0x110>)
 800cd06:	6d10      	ldr	r0, [r2, #80]	; 0x50
 800cd08:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cd0a:	f8a1 c000 	strh.w	ip, [r1]
 800cd0e:	18c3      	adds	r3, r0, r3
 800cd10:	d101      	bne.n	800cd16 <USBD_FS_SerialStrDescriptor+0x16>
 800cd12:	4840      	ldr	r0, [pc, #256]	; (800ce14 <USBD_FS_SerialStrDescriptor+0x114>)
 800cd14:	4770      	bx	lr
 800cd16:	f04f 0c00 	mov.w	ip, #0
 800cd1a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800cd1c:	0f18      	lsrs	r0, r3, #28
 800cd1e:	4a3d      	ldr	r2, [pc, #244]	; (800ce14 <USBD_FS_SerialStrDescriptor+0x114>)
 800cd20:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800cd24:	bf2c      	ite	cs
 800cd26:	3037      	addcs	r0, #55	; 0x37
 800cd28:	3030      	addcc	r0, #48	; 0x30
 800cd2a:	7090      	strb	r0, [r2, #2]
 800cd2c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800cd30:	2809      	cmp	r0, #9
 800cd32:	bf8c      	ite	hi
 800cd34:	3037      	addhi	r0, #55	; 0x37
 800cd36:	3030      	addls	r0, #48	; 0x30
 800cd38:	7110      	strb	r0, [r2, #4]
 800cd3a:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800cd3e:	2809      	cmp	r0, #9
 800cd40:	bf8c      	ite	hi
 800cd42:	3037      	addhi	r0, #55	; 0x37
 800cd44:	3030      	addls	r0, #48	; 0x30
 800cd46:	7190      	strb	r0, [r2, #6]
 800cd48:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800cd4c:	2809      	cmp	r0, #9
 800cd4e:	bf8c      	ite	hi
 800cd50:	3037      	addhi	r0, #55	; 0x37
 800cd52:	3030      	addls	r0, #48	; 0x30
 800cd54:	7210      	strb	r0, [r2, #8]
 800cd56:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800cd5a:	2809      	cmp	r0, #9
 800cd5c:	bf8c      	ite	hi
 800cd5e:	3037      	addhi	r0, #55	; 0x37
 800cd60:	3030      	addls	r0, #48	; 0x30
 800cd62:	7290      	strb	r0, [r2, #10]
 800cd64:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800cd68:	2809      	cmp	r0, #9
 800cd6a:	bf8c      	ite	hi
 800cd6c:	3037      	addhi	r0, #55	; 0x37
 800cd6e:	3030      	addls	r0, #48	; 0x30
 800cd70:	7310      	strb	r0, [r2, #12]
 800cd72:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800cd76:	2809      	cmp	r0, #9
 800cd78:	bf8c      	ite	hi
 800cd7a:	3037      	addhi	r0, #55	; 0x37
 800cd7c:	3030      	addls	r0, #48	; 0x30
 800cd7e:	f882 c003 	strb.w	ip, [r2, #3]
 800cd82:	7390      	strb	r0, [r2, #14]
 800cd84:	f04f 0c00 	mov.w	ip, #0
 800cd88:	2000      	movs	r0, #0
 800cd8a:	f882 c005 	strb.w	ip, [r2, #5]
 800cd8e:	73d0      	strb	r0, [r2, #15]
 800cd90:	f04f 0c00 	mov.w	ip, #0
 800cd94:	2000      	movs	r0, #0
 800cd96:	f882 c007 	strb.w	ip, [r2, #7]
 800cd9a:	7450      	strb	r0, [r2, #17]
 800cd9c:	f04f 0c00 	mov.w	ip, #0
 800cda0:	2000      	movs	r0, #0
 800cda2:	f882 c009 	strb.w	ip, [r2, #9]
 800cda6:	74d0      	strb	r0, [r2, #19]
 800cda8:	f04f 0c00 	mov.w	ip, #0
 800cdac:	2000      	movs	r0, #0
 800cdae:	f003 030f 	and.w	r3, r3, #15
 800cdb2:	2b09      	cmp	r3, #9
 800cdb4:	bf94      	ite	ls
 800cdb6:	3330      	addls	r3, #48	; 0x30
 800cdb8:	3337      	addhi	r3, #55	; 0x37
 800cdba:	7413      	strb	r3, [r2, #16]
 800cdbc:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800cdc0:	ea4f 7311 	mov.w	r3, r1, lsr #28
 800cdc4:	bf2c      	ite	cs
 800cdc6:	3337      	addcs	r3, #55	; 0x37
 800cdc8:	3330      	addcc	r3, #48	; 0x30
 800cdca:	7493      	strb	r3, [r2, #18]
 800cdcc:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800cdd0:	2b09      	cmp	r3, #9
 800cdd2:	bf8c      	ite	hi
 800cdd4:	3337      	addhi	r3, #55	; 0x37
 800cdd6:	3330      	addls	r3, #48	; 0x30
 800cdd8:	7513      	strb	r3, [r2, #20]
 800cdda:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800cdde:	2b09      	cmp	r3, #9
 800cde0:	bf8c      	ite	hi
 800cde2:	3337      	addhi	r3, #55	; 0x37
 800cde4:	3330      	addls	r3, #48	; 0x30
 800cde6:	7593      	strb	r3, [r2, #22]
 800cde8:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800cdec:	2b09      	cmp	r3, #9
 800cdee:	bf94      	ite	ls
 800cdf0:	3330      	addls	r3, #48	; 0x30
 800cdf2:	3337      	addhi	r3, #55	; 0x37
 800cdf4:	f882 c00b 	strb.w	ip, [r2, #11]
 800cdf8:	7550      	strb	r0, [r2, #21]
 800cdfa:	f04f 0c00 	mov.w	ip, #0
 800cdfe:	2000      	movs	r0, #0
 800ce00:	7613      	strb	r3, [r2, #24]
 800ce02:	2300      	movs	r3, #0
 800ce04:	75d0      	strb	r0, [r2, #23]
 800ce06:	f882 c00d 	strb.w	ip, [r2, #13]
 800ce0a:	4802      	ldr	r0, [pc, #8]	; (800ce14 <USBD_FS_SerialStrDescriptor+0x114>)
 800ce0c:	7653      	strb	r3, [r2, #25]
 800ce0e:	4770      	bx	lr
 800ce10:	1ff80000 	.word	0x1ff80000
 800ce14:	20000184 	.word	0x20000184

0800ce18 <HAL_PCDEx_SetConnectionState>:
 800ce18:	4a04      	ldr	r2, [pc, #16]	; (800ce2c <HAL_PCDEx_SetConnectionState+0x14>)
 800ce1a:	2901      	cmp	r1, #1
 800ce1c:	6853      	ldr	r3, [r2, #4]
 800ce1e:	bf0c      	ite	eq
 800ce20:	f043 0301 	orreq.w	r3, r3, #1
 800ce24:	f023 0301 	bicne.w	r3, r3, #1
 800ce28:	6053      	str	r3, [r2, #4]
 800ce2a:	4770      	bx	lr
 800ce2c:	40010000 	.word	0x40010000

0800ce30 <HAL_PCD_MspInit>:
 800ce30:	4b0e      	ldr	r3, [pc, #56]	; (800ce6c <HAL_PCD_MspInit+0x3c>)
 800ce32:	6802      	ldr	r2, [r0, #0]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d000      	beq.n	800ce3a <HAL_PCD_MspInit+0xa>
 800ce38:	4770      	bx	lr
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800ce40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ce42:	b500      	push	{lr}
 800ce44:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800ce48:	6259      	str	r1, [r3, #36]	; 0x24
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	b083      	sub	sp, #12
 800ce4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	2014      	movs	r0, #20
 800ce56:	4611      	mov	r1, r2
 800ce58:	9b01      	ldr	r3, [sp, #4]
 800ce5a:	f7fb fb85 	bl	8008568 <HAL_NVIC_SetPriority>
 800ce5e:	2014      	movs	r0, #20
 800ce60:	b003      	add	sp, #12
 800ce62:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce66:	f7fb bbbd 	b.w	80085e4 <HAL_NVIC_EnableIRQ>
 800ce6a:	bf00      	nop
 800ce6c:	40005c00 	.word	0x40005c00

0800ce70 <HAL_PCD_SetupStageCallback>:
 800ce70:	4601      	mov	r1, r0
 800ce72:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ce76:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800ce7a:	f7ff ba63 	b.w	800c344 <USBD_LL_SetupStage>
 800ce7e:	bf00      	nop

0800ce80 <HAL_PCD_DataOutStageCallback>:
 800ce80:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ce84:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ce88:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800ce8c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ce90:	f7ff ba88 	b.w	800c3a4 <USBD_LL_DataOutStage>

0800ce94 <HAL_PCD_DataInStageCallback>:
 800ce94:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ce98:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ce9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce9e:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800cea2:	f7ff babd 	b.w	800c420 <USBD_LL_DataInStage>
 800cea6:	bf00      	nop

0800cea8 <HAL_PCD_SOFCallback>:
 800cea8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ceac:	f7ff bb5c 	b.w	800c568 <USBD_LL_SOF>

0800ceb0 <HAL_PCD_ResetCallback>:
 800ceb0:	6883      	ldr	r3, [r0, #8]
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	d001      	beq.n	800cebe <HAL_PCD_ResetCallback+0xe>
 800ceba:	f7fa fbff 	bl	80076bc <Error_Handler>
 800cebe:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800cec2:	2101      	movs	r1, #1
 800cec4:	f7ff fb3a 	bl	800c53c <USBD_LL_SetSpeed>
 800cec8:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800cecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced0:	f7ff bb0c 	b.w	800c4ec <USBD_LL_Reset>

0800ced4 <HAL_PCD_SuspendCallback>:
 800ced4:	b510      	push	{r4, lr}
 800ced6:	4604      	mov	r4, r0
 800ced8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800cedc:	f7ff fb32 	bl	800c544 <USBD_LL_Suspend>
 800cee0:	69a3      	ldr	r3, [r4, #24]
 800cee2:	b123      	cbz	r3, 800ceee <HAL_PCD_SuspendCallback+0x1a>
 800cee4:	4a02      	ldr	r2, [pc, #8]	; (800cef0 <HAL_PCD_SuspendCallback+0x1c>)
 800cee6:	6913      	ldr	r3, [r2, #16]
 800cee8:	f043 0306 	orr.w	r3, r3, #6
 800ceec:	6113      	str	r3, [r2, #16]
 800ceee:	bd10      	pop	{r4, pc}
 800cef0:	e000ed00 	.word	0xe000ed00

0800cef4 <HAL_PCD_ResumeCallback>:
 800cef4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800cef8:	f7ff bb2e 	b.w	800c558 <USBD_LL_Resume>

0800cefc <USBD_LL_Init>:
 800cefc:	b510      	push	{r4, lr}
 800cefe:	2408      	movs	r4, #8
 800cf00:	4b1e      	ldr	r3, [pc, #120]	; (800cf7c <USBD_LL_Init+0x80>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	605c      	str	r4, [r3, #4]
 800cf06:	4604      	mov	r4, r0
 800cf08:	2102      	movs	r1, #2
 800cf0a:	619a      	str	r2, [r3, #24]
 800cf0c:	621a      	str	r2, [r3, #32]
 800cf0e:	4a1c      	ldr	r2, [pc, #112]	; (800cf80 <USBD_LL_Init+0x84>)
 800cf10:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
 800cf14:	4618      	mov	r0, r3
 800cf16:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 800cf1a:	6099      	str	r1, [r3, #8]
 800cf1c:	6119      	str	r1, [r3, #16]
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f7fc f9ce 	bl	80092c0 <HAL_PCD_Init>
 800cf24:	bb30      	cbnz	r0, 800cf74 <USBD_LL_Init+0x78>
 800cf26:	2200      	movs	r2, #0
 800cf28:	2318      	movs	r3, #24
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800cf30:	f7fd f8c6 	bl	800a0c0 <HAL_PCDEx_PMAConfig>
 800cf34:	2358      	movs	r3, #88	; 0x58
 800cf36:	2200      	movs	r2, #0
 800cf38:	2180      	movs	r1, #128	; 0x80
 800cf3a:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800cf3e:	f7fd f8bf 	bl	800a0c0 <HAL_PCDEx_PMAConfig>
 800cf42:	23c0      	movs	r3, #192	; 0xc0
 800cf44:	2200      	movs	r2, #0
 800cf46:	2181      	movs	r1, #129	; 0x81
 800cf48:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800cf4c:	f7fd f8b8 	bl	800a0c0 <HAL_PCDEx_PMAConfig>
 800cf50:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cf54:	2200      	movs	r2, #0
 800cf56:	2101      	movs	r1, #1
 800cf58:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800cf5c:	f7fd f8b0 	bl	800a0c0 <HAL_PCDEx_PMAConfig>
 800cf60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf64:	2200      	movs	r2, #0
 800cf66:	2182      	movs	r1, #130	; 0x82
 800cf68:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800cf6c:	f7fd f8a8 	bl	800a0c0 <HAL_PCDEx_PMAConfig>
 800cf70:	2000      	movs	r0, #0
 800cf72:	bd10      	pop	{r4, pc}
 800cf74:	f7fa fba2 	bl	80076bc <Error_Handler>
 800cf78:	e7d5      	b.n	800cf26 <USBD_LL_Init+0x2a>
 800cf7a:	bf00      	nop
 800cf7c:	200016f4 	.word	0x200016f4
 800cf80:	40005c00 	.word	0x40005c00

0800cf84 <USBD_LL_Start>:
 800cf84:	b508      	push	{r3, lr}
 800cf86:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800cf8a:	f7fc f9fb 	bl	8009384 <HAL_PCD_Start>
 800cf8e:	2803      	cmp	r0, #3
 800cf90:	bf96      	itet	ls
 800cf92:	4b02      	ldrls	r3, [pc, #8]	; (800cf9c <USBD_LL_Start+0x18>)
 800cf94:	2002      	movhi	r0, #2
 800cf96:	5c18      	ldrbls	r0, [r3, r0]
 800cf98:	bd08      	pop	{r3, pc}
 800cf9a:	bf00      	nop
 800cf9c:	08011830 	.word	0x08011830

0800cfa0 <USBD_LL_OpenEP>:
 800cfa0:	4694      	mov	ip, r2
 800cfa2:	b508      	push	{r3, lr}
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800cfaa:	4663      	mov	r3, ip
 800cfac:	f7fc ff5e 	bl	8009e6c <HAL_PCD_EP_Open>
 800cfb0:	2803      	cmp	r0, #3
 800cfb2:	bf96      	itet	ls
 800cfb4:	4b01      	ldrls	r3, [pc, #4]	; (800cfbc <USBD_LL_OpenEP+0x1c>)
 800cfb6:	2002      	movhi	r0, #2
 800cfb8:	5c18      	ldrbls	r0, [r3, r0]
 800cfba:	bd08      	pop	{r3, pc}
 800cfbc:	08011830 	.word	0x08011830

0800cfc0 <USBD_LL_CloseEP>:
 800cfc0:	b508      	push	{r3, lr}
 800cfc2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800cfc6:	f7fc ff8f 	bl	8009ee8 <HAL_PCD_EP_Close>
 800cfca:	2803      	cmp	r0, #3
 800cfcc:	bf96      	itet	ls
 800cfce:	4b02      	ldrls	r3, [pc, #8]	; (800cfd8 <USBD_LL_CloseEP+0x18>)
 800cfd0:	2002      	movhi	r0, #2
 800cfd2:	5c18      	ldrbls	r0, [r3, r0]
 800cfd4:	bd08      	pop	{r3, pc}
 800cfd6:	bf00      	nop
 800cfd8:	08011830 	.word	0x08011830

0800cfdc <USBD_LL_StallEP>:
 800cfdc:	b508      	push	{r3, lr}
 800cfde:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800cfe2:	f7fc fff9 	bl	8009fd8 <HAL_PCD_EP_SetStall>
 800cfe6:	2803      	cmp	r0, #3
 800cfe8:	bf96      	itet	ls
 800cfea:	4b02      	ldrls	r3, [pc, #8]	; (800cff4 <USBD_LL_StallEP+0x18>)
 800cfec:	2002      	movhi	r0, #2
 800cfee:	5c18      	ldrbls	r0, [r3, r0]
 800cff0:	bd08      	pop	{r3, pc}
 800cff2:	bf00      	nop
 800cff4:	08011830 	.word	0x08011830

0800cff8 <USBD_LL_ClearStallEP>:
 800cff8:	b508      	push	{r3, lr}
 800cffa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800cffe:	f7fd f823 	bl	800a048 <HAL_PCD_EP_ClrStall>
 800d002:	2803      	cmp	r0, #3
 800d004:	bf96      	itet	ls
 800d006:	4b02      	ldrls	r3, [pc, #8]	; (800d010 <USBD_LL_ClearStallEP+0x18>)
 800d008:	2002      	movhi	r0, #2
 800d00a:	5c18      	ldrbls	r0, [r3, r0]
 800d00c:	bd08      	pop	{r3, pc}
 800d00e:	bf00      	nop
 800d010:	08011830 	.word	0x08011830

0800d014 <USBD_LL_IsStallEP>:
 800d014:	060a      	lsls	r2, r1, #24
 800d016:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800d01a:	d406      	bmi.n	800d02a <USBD_LL_IsStallEP+0x16>
 800d01c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d020:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d024:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
 800d028:	4770      	bx	lr
 800d02a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800d02e:	3101      	adds	r1, #1
 800d030:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d034:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d038:	7888      	ldrb	r0, [r1, #2]
 800d03a:	4770      	bx	lr

0800d03c <USBD_LL_SetUSBAddress>:
 800d03c:	b508      	push	{r3, lr}
 800d03e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d042:	f7fc fefd 	bl	8009e40 <HAL_PCD_SetAddress>
 800d046:	2803      	cmp	r0, #3
 800d048:	bf96      	itet	ls
 800d04a:	4b02      	ldrls	r3, [pc, #8]	; (800d054 <USBD_LL_SetUSBAddress+0x18>)
 800d04c:	2002      	movhi	r0, #2
 800d04e:	5c18      	ldrbls	r0, [r3, r0]
 800d050:	bd08      	pop	{r3, pc}
 800d052:	bf00      	nop
 800d054:	08011830 	.word	0x08011830

0800d058 <USBD_LL_Transmit>:
 800d058:	b508      	push	{r3, lr}
 800d05a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d05e:	f7fc ff97 	bl	8009f90 <HAL_PCD_EP_Transmit>
 800d062:	2803      	cmp	r0, #3
 800d064:	bf96      	itet	ls
 800d066:	4b02      	ldrls	r3, [pc, #8]	; (800d070 <USBD_LL_Transmit+0x18>)
 800d068:	2002      	movhi	r0, #2
 800d06a:	5c18      	ldrbls	r0, [r3, r0]
 800d06c:	bd08      	pop	{r3, pc}
 800d06e:	bf00      	nop
 800d070:	08011830 	.word	0x08011830

0800d074 <USBD_LL_PrepareReceive>:
 800d074:	b508      	push	{r3, lr}
 800d076:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d07a:	f7fc ff67 	bl	8009f4c <HAL_PCD_EP_Receive>
 800d07e:	2803      	cmp	r0, #3
 800d080:	bf96      	itet	ls
 800d082:	4b02      	ldrls	r3, [pc, #8]	; (800d08c <USBD_LL_PrepareReceive+0x18>)
 800d084:	2002      	movhi	r0, #2
 800d086:	5c18      	ldrbls	r0, [r3, r0]
 800d088:	bd08      	pop	{r3, pc}
 800d08a:	bf00      	nop
 800d08c:	08011830 	.word	0x08011830

0800d090 <USBD_LL_GetRxDataSize>:
 800d090:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800d094:	f7fc bf72 	b.w	8009f7c <HAL_PCD_EP_GetRxCount>

0800d098 <USBD_static_malloc>:
 800d098:	4800      	ldr	r0, [pc, #0]	; (800d09c <USBD_static_malloc+0x4>)
 800d09a:	4770      	bx	lr
 800d09c:	200019e0 	.word	0x200019e0

0800d0a0 <USBD_static_free>:
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop

0800d0a4 <atof>:
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	f001 bae7 	b.w	800e678 <strtod>
	...

0800d0ac <__errno>:
 800d0ac:	4b01      	ldr	r3, [pc, #4]	; (800d0b4 <__errno+0x8>)
 800d0ae:	6818      	ldr	r0, [r3, #0]
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	200001a0 	.word	0x200001a0

0800d0b8 <__libc_init_array>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	4d0c      	ldr	r5, [pc, #48]	; (800d0f0 <__libc_init_array+0x38>)
 800d0be:	4c0d      	ldr	r4, [pc, #52]	; (800d0f4 <__libc_init_array+0x3c>)
 800d0c0:	1b64      	subs	r4, r4, r5
 800d0c2:	10a4      	asrs	r4, r4, #2
 800d0c4:	42a6      	cmp	r6, r4
 800d0c6:	d109      	bne.n	800d0dc <__libc_init_array+0x24>
 800d0c8:	f004 f9dc 	bl	8011484 <_init>
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	4d0a      	ldr	r5, [pc, #40]	; (800d0f8 <__libc_init_array+0x40>)
 800d0d0:	4c0a      	ldr	r4, [pc, #40]	; (800d0fc <__libc_init_array+0x44>)
 800d0d2:	1b64      	subs	r4, r4, r5
 800d0d4:	10a4      	asrs	r4, r4, #2
 800d0d6:	42a6      	cmp	r6, r4
 800d0d8:	d105      	bne.n	800d0e6 <__libc_init_array+0x2e>
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e0:	4798      	blx	r3
 800d0e2:	3601      	adds	r6, #1
 800d0e4:	e7ee      	b.n	800d0c4 <__libc_init_array+0xc>
 800d0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ea:	4798      	blx	r3
 800d0ec:	3601      	adds	r6, #1
 800d0ee:	e7f2      	b.n	800d0d6 <__libc_init_array+0x1e>
 800d0f0:	08011cdc 	.word	0x08011cdc
 800d0f4:	08011cdc 	.word	0x08011cdc
 800d0f8:	08011cdc 	.word	0x08011cdc
 800d0fc:	08011ce0 	.word	0x08011ce0

0800d100 <memset>:
 800d100:	4603      	mov	r3, r0
 800d102:	4402      	add	r2, r0
 800d104:	4293      	cmp	r3, r2
 800d106:	d100      	bne.n	800d10a <memset+0xa>
 800d108:	4770      	bx	lr
 800d10a:	f803 1b01 	strb.w	r1, [r3], #1
 800d10e:	e7f9      	b.n	800d104 <memset+0x4>

0800d110 <__cvt>:
 800d110:	2b00      	cmp	r3, #0
 800d112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d116:	461f      	mov	r7, r3
 800d118:	bfbb      	ittet	lt
 800d11a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d11e:	461f      	movlt	r7, r3
 800d120:	2300      	movge	r3, #0
 800d122:	232d      	movlt	r3, #45	; 0x2d
 800d124:	b088      	sub	sp, #32
 800d126:	4614      	mov	r4, r2
 800d128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d12a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d12c:	7013      	strb	r3, [r2, #0]
 800d12e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d130:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800d134:	f023 0820 	bic.w	r8, r3, #32
 800d138:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d13c:	d005      	beq.n	800d14a <__cvt+0x3a>
 800d13e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d142:	d100      	bne.n	800d146 <__cvt+0x36>
 800d144:	3501      	adds	r5, #1
 800d146:	2302      	movs	r3, #2
 800d148:	e000      	b.n	800d14c <__cvt+0x3c>
 800d14a:	2303      	movs	r3, #3
 800d14c:	aa07      	add	r2, sp, #28
 800d14e:	9204      	str	r2, [sp, #16]
 800d150:	aa06      	add	r2, sp, #24
 800d152:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d156:	e9cd 3500 	strd	r3, r5, [sp]
 800d15a:	4622      	mov	r2, r4
 800d15c:	463b      	mov	r3, r7
 800d15e:	f001 fb23 	bl	800e7a8 <_dtoa_r>
 800d162:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d166:	4606      	mov	r6, r0
 800d168:	d102      	bne.n	800d170 <__cvt+0x60>
 800d16a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d16c:	07db      	lsls	r3, r3, #31
 800d16e:	d522      	bpl.n	800d1b6 <__cvt+0xa6>
 800d170:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d174:	eb06 0905 	add.w	r9, r6, r5
 800d178:	d110      	bne.n	800d19c <__cvt+0x8c>
 800d17a:	7833      	ldrb	r3, [r6, #0]
 800d17c:	2b30      	cmp	r3, #48	; 0x30
 800d17e:	d10a      	bne.n	800d196 <__cvt+0x86>
 800d180:	2200      	movs	r2, #0
 800d182:	2300      	movs	r3, #0
 800d184:	4620      	mov	r0, r4
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fc26 	bl	80009d8 <__aeabi_dcmpeq>
 800d18c:	b918      	cbnz	r0, 800d196 <__cvt+0x86>
 800d18e:	f1c5 0501 	rsb	r5, r5, #1
 800d192:	f8ca 5000 	str.w	r5, [sl]
 800d196:	f8da 3000 	ldr.w	r3, [sl]
 800d19a:	4499      	add	r9, r3
 800d19c:	2200      	movs	r2, #0
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	f7f3 fc18 	bl	80009d8 <__aeabi_dcmpeq>
 800d1a8:	b108      	cbz	r0, 800d1ae <__cvt+0x9e>
 800d1aa:	f8cd 901c 	str.w	r9, [sp, #28]
 800d1ae:	2230      	movs	r2, #48	; 0x30
 800d1b0:	9b07      	ldr	r3, [sp, #28]
 800d1b2:	454b      	cmp	r3, r9
 800d1b4:	d307      	bcc.n	800d1c6 <__cvt+0xb6>
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	9b07      	ldr	r3, [sp, #28]
 800d1ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d1bc:	1b9b      	subs	r3, r3, r6
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	b008      	add	sp, #32
 800d1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c6:	1c59      	adds	r1, r3, #1
 800d1c8:	9107      	str	r1, [sp, #28]
 800d1ca:	701a      	strb	r2, [r3, #0]
 800d1cc:	e7f0      	b.n	800d1b0 <__cvt+0xa0>

0800d1ce <__exponent>:
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d2:	2900      	cmp	r1, #0
 800d1d4:	f803 2b02 	strb.w	r2, [r3], #2
 800d1d8:	bfb6      	itet	lt
 800d1da:	222d      	movlt	r2, #45	; 0x2d
 800d1dc:	222b      	movge	r2, #43	; 0x2b
 800d1de:	4249      	neglt	r1, r1
 800d1e0:	2909      	cmp	r1, #9
 800d1e2:	7042      	strb	r2, [r0, #1]
 800d1e4:	dd2b      	ble.n	800d23e <__exponent+0x70>
 800d1e6:	f10d 0407 	add.w	r4, sp, #7
 800d1ea:	46a4      	mov	ip, r4
 800d1ec:	270a      	movs	r7, #10
 800d1ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800d1f2:	460a      	mov	r2, r1
 800d1f4:	46a6      	mov	lr, r4
 800d1f6:	fb07 1516 	mls	r5, r7, r6, r1
 800d1fa:	2a63      	cmp	r2, #99	; 0x63
 800d1fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800d200:	4631      	mov	r1, r6
 800d202:	f104 34ff 	add.w	r4, r4, #4294967295
 800d206:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d20a:	dcf0      	bgt.n	800d1ee <__exponent+0x20>
 800d20c:	3130      	adds	r1, #48	; 0x30
 800d20e:	f1ae 0502 	sub.w	r5, lr, #2
 800d212:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d216:	4629      	mov	r1, r5
 800d218:	1c44      	adds	r4, r0, #1
 800d21a:	4561      	cmp	r1, ip
 800d21c:	d30a      	bcc.n	800d234 <__exponent+0x66>
 800d21e:	f10d 0209 	add.w	r2, sp, #9
 800d222:	eba2 020e 	sub.w	r2, r2, lr
 800d226:	4565      	cmp	r5, ip
 800d228:	bf88      	it	hi
 800d22a:	2200      	movhi	r2, #0
 800d22c:	4413      	add	r3, r2
 800d22e:	1a18      	subs	r0, r3, r0
 800d230:	b003      	add	sp, #12
 800d232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d234:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d238:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d23c:	e7ed      	b.n	800d21a <__exponent+0x4c>
 800d23e:	2330      	movs	r3, #48	; 0x30
 800d240:	3130      	adds	r1, #48	; 0x30
 800d242:	7083      	strb	r3, [r0, #2]
 800d244:	70c1      	strb	r1, [r0, #3]
 800d246:	1d03      	adds	r3, r0, #4
 800d248:	e7f1      	b.n	800d22e <__exponent+0x60>
	...

0800d24c <_printf_float>:
 800d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	b091      	sub	sp, #68	; 0x44
 800d252:	460c      	mov	r4, r1
 800d254:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800d258:	4616      	mov	r6, r2
 800d25a:	461f      	mov	r7, r3
 800d25c:	4605      	mov	r5, r0
 800d25e:	f002 fbf7 	bl	800fa50 <_localeconv_r>
 800d262:	6803      	ldr	r3, [r0, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	f7f2 ff8a 	bl	8000180 <strlen>
 800d26c:	2300      	movs	r3, #0
 800d26e:	930e      	str	r3, [sp, #56]	; 0x38
 800d270:	f8d8 3000 	ldr.w	r3, [r8]
 800d274:	900a      	str	r0, [sp, #40]	; 0x28
 800d276:	3307      	adds	r3, #7
 800d278:	f023 0307 	bic.w	r3, r3, #7
 800d27c:	f103 0208 	add.w	r2, r3, #8
 800d280:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d284:	f8d4 b000 	ldr.w	fp, [r4]
 800d288:	f8c8 2000 	str.w	r2, [r8]
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d294:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800d298:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800d29c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d29e:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	4b9c      	ldr	r3, [pc, #624]	; (800d518 <_printf_float+0x2cc>)
 800d2a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2a8:	f7f3 fbc8 	bl	8000a3c <__aeabi_dcmpun>
 800d2ac:	bb70      	cbnz	r0, 800d30c <_printf_float+0xc0>
 800d2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b2:	4640      	mov	r0, r8
 800d2b4:	4b98      	ldr	r3, [pc, #608]	; (800d518 <_printf_float+0x2cc>)
 800d2b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d2b8:	f7f3 fba2 	bl	8000a00 <__aeabi_dcmple>
 800d2bc:	bb30      	cbnz	r0, 800d30c <_printf_float+0xc0>
 800d2be:	2200      	movs	r2, #0
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4651      	mov	r1, sl
 800d2c6:	f7f3 fb91 	bl	80009ec <__aeabi_dcmplt>
 800d2ca:	b110      	cbz	r0, 800d2d2 <_printf_float+0x86>
 800d2cc:	232d      	movs	r3, #45	; 0x2d
 800d2ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2d2:	4b92      	ldr	r3, [pc, #584]	; (800d51c <_printf_float+0x2d0>)
 800d2d4:	4892      	ldr	r0, [pc, #584]	; (800d520 <_printf_float+0x2d4>)
 800d2d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d2da:	bf94      	ite	ls
 800d2dc:	4698      	movls	r8, r3
 800d2de:	4680      	movhi	r8, r0
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	f04f 0a00 	mov.w	sl, #0
 800d2e6:	6123      	str	r3, [r4, #16]
 800d2e8:	f02b 0304 	bic.w	r3, fp, #4
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	4633      	mov	r3, r6
 800d2f0:	4621      	mov	r1, r4
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	9700      	str	r7, [sp, #0]
 800d2f6:	aa0f      	add	r2, sp, #60	; 0x3c
 800d2f8:	f000 f9d4 	bl	800d6a4 <_printf_common>
 800d2fc:	3001      	adds	r0, #1
 800d2fe:	f040 8090 	bne.w	800d422 <_printf_float+0x1d6>
 800d302:	f04f 30ff 	mov.w	r0, #4294967295
 800d306:	b011      	add	sp, #68	; 0x44
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	4642      	mov	r2, r8
 800d30e:	4653      	mov	r3, sl
 800d310:	4640      	mov	r0, r8
 800d312:	4651      	mov	r1, sl
 800d314:	f7f3 fb92 	bl	8000a3c <__aeabi_dcmpun>
 800d318:	b148      	cbz	r0, 800d32e <_printf_float+0xe2>
 800d31a:	f1ba 0f00 	cmp.w	sl, #0
 800d31e:	bfb8      	it	lt
 800d320:	232d      	movlt	r3, #45	; 0x2d
 800d322:	4880      	ldr	r0, [pc, #512]	; (800d524 <_printf_float+0x2d8>)
 800d324:	bfb8      	it	lt
 800d326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d32a:	4b7f      	ldr	r3, [pc, #508]	; (800d528 <_printf_float+0x2dc>)
 800d32c:	e7d3      	b.n	800d2d6 <_printf_float+0x8a>
 800d32e:	6863      	ldr	r3, [r4, #4]
 800d330:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	d142      	bne.n	800d3be <_printf_float+0x172>
 800d338:	2306      	movs	r3, #6
 800d33a:	6063      	str	r3, [r4, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	9206      	str	r2, [sp, #24]
 800d340:	aa0e      	add	r2, sp, #56	; 0x38
 800d342:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800d346:	aa0d      	add	r2, sp, #52	; 0x34
 800d348:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800d34c:	9203      	str	r2, [sp, #12]
 800d34e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800d352:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d356:	6023      	str	r3, [r4, #0]
 800d358:	6863      	ldr	r3, [r4, #4]
 800d35a:	4642      	mov	r2, r8
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	4628      	mov	r0, r5
 800d360:	4653      	mov	r3, sl
 800d362:	910b      	str	r1, [sp, #44]	; 0x2c
 800d364:	f7ff fed4 	bl	800d110 <__cvt>
 800d368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d36a:	4680      	mov	r8, r0
 800d36c:	2947      	cmp	r1, #71	; 0x47
 800d36e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d370:	d108      	bne.n	800d384 <_printf_float+0x138>
 800d372:	1cc8      	adds	r0, r1, #3
 800d374:	db02      	blt.n	800d37c <_printf_float+0x130>
 800d376:	6863      	ldr	r3, [r4, #4]
 800d378:	4299      	cmp	r1, r3
 800d37a:	dd40      	ble.n	800d3fe <_printf_float+0x1b2>
 800d37c:	f1a9 0902 	sub.w	r9, r9, #2
 800d380:	fa5f f989 	uxtb.w	r9, r9
 800d384:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d388:	d81f      	bhi.n	800d3ca <_printf_float+0x17e>
 800d38a:	464a      	mov	r2, r9
 800d38c:	3901      	subs	r1, #1
 800d38e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d392:	910d      	str	r1, [sp, #52]	; 0x34
 800d394:	f7ff ff1b 	bl	800d1ce <__exponent>
 800d398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d39a:	4682      	mov	sl, r0
 800d39c:	1813      	adds	r3, r2, r0
 800d39e:	2a01      	cmp	r2, #1
 800d3a0:	6123      	str	r3, [r4, #16]
 800d3a2:	dc02      	bgt.n	800d3aa <_printf_float+0x15e>
 800d3a4:	6822      	ldr	r2, [r4, #0]
 800d3a6:	07d2      	lsls	r2, r2, #31
 800d3a8:	d501      	bpl.n	800d3ae <_printf_float+0x162>
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	6123      	str	r3, [r4, #16]
 800d3ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d09b      	beq.n	800d2ee <_printf_float+0xa2>
 800d3b6:	232d      	movs	r3, #45	; 0x2d
 800d3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3bc:	e797      	b.n	800d2ee <_printf_float+0xa2>
 800d3be:	2947      	cmp	r1, #71	; 0x47
 800d3c0:	d1bc      	bne.n	800d33c <_printf_float+0xf0>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1ba      	bne.n	800d33c <_printf_float+0xf0>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e7b7      	b.n	800d33a <_printf_float+0xee>
 800d3ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d3ce:	d118      	bne.n	800d402 <_printf_float+0x1b6>
 800d3d0:	2900      	cmp	r1, #0
 800d3d2:	6863      	ldr	r3, [r4, #4]
 800d3d4:	dd0b      	ble.n	800d3ee <_printf_float+0x1a2>
 800d3d6:	6121      	str	r1, [r4, #16]
 800d3d8:	b913      	cbnz	r3, 800d3e0 <_printf_float+0x194>
 800d3da:	6822      	ldr	r2, [r4, #0]
 800d3dc:	07d0      	lsls	r0, r2, #31
 800d3de:	d502      	bpl.n	800d3e6 <_printf_float+0x19a>
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	440b      	add	r3, r1
 800d3e4:	6123      	str	r3, [r4, #16]
 800d3e6:	f04f 0a00 	mov.w	sl, #0
 800d3ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800d3ec:	e7df      	b.n	800d3ae <_printf_float+0x162>
 800d3ee:	b913      	cbnz	r3, 800d3f6 <_printf_float+0x1aa>
 800d3f0:	6822      	ldr	r2, [r4, #0]
 800d3f2:	07d2      	lsls	r2, r2, #31
 800d3f4:	d501      	bpl.n	800d3fa <_printf_float+0x1ae>
 800d3f6:	3302      	adds	r3, #2
 800d3f8:	e7f4      	b.n	800d3e4 <_printf_float+0x198>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e7f2      	b.n	800d3e4 <_printf_float+0x198>
 800d3fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d404:	4299      	cmp	r1, r3
 800d406:	db05      	blt.n	800d414 <_printf_float+0x1c8>
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	6121      	str	r1, [r4, #16]
 800d40c:	07d8      	lsls	r0, r3, #31
 800d40e:	d5ea      	bpl.n	800d3e6 <_printf_float+0x19a>
 800d410:	1c4b      	adds	r3, r1, #1
 800d412:	e7e7      	b.n	800d3e4 <_printf_float+0x198>
 800d414:	2900      	cmp	r1, #0
 800d416:	bfcc      	ite	gt
 800d418:	2201      	movgt	r2, #1
 800d41a:	f1c1 0202 	rsble	r2, r1, #2
 800d41e:	4413      	add	r3, r2
 800d420:	e7e0      	b.n	800d3e4 <_printf_float+0x198>
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	055a      	lsls	r2, r3, #21
 800d426:	d407      	bmi.n	800d438 <_printf_float+0x1ec>
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	4642      	mov	r2, r8
 800d42c:	4631      	mov	r1, r6
 800d42e:	4628      	mov	r0, r5
 800d430:	47b8      	blx	r7
 800d432:	3001      	adds	r0, #1
 800d434:	d12b      	bne.n	800d48e <_printf_float+0x242>
 800d436:	e764      	b.n	800d302 <_printf_float+0xb6>
 800d438:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d43c:	f240 80dd 	bls.w	800d5fa <_printf_float+0x3ae>
 800d440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d444:	2200      	movs	r2, #0
 800d446:	2300      	movs	r3, #0
 800d448:	f7f3 fac6 	bl	80009d8 <__aeabi_dcmpeq>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d033      	beq.n	800d4b8 <_printf_float+0x26c>
 800d450:	2301      	movs	r3, #1
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	4a35      	ldr	r2, [pc, #212]	; (800d52c <_printf_float+0x2e0>)
 800d458:	47b8      	blx	r7
 800d45a:	3001      	adds	r0, #1
 800d45c:	f43f af51 	beq.w	800d302 <_printf_float+0xb6>
 800d460:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d464:	429a      	cmp	r2, r3
 800d466:	db02      	blt.n	800d46e <_printf_float+0x222>
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	07d8      	lsls	r0, r3, #31
 800d46c:	d50f      	bpl.n	800d48e <_printf_float+0x242>
 800d46e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d472:	4631      	mov	r1, r6
 800d474:	4628      	mov	r0, r5
 800d476:	47b8      	blx	r7
 800d478:	3001      	adds	r0, #1
 800d47a:	f43f af42 	beq.w	800d302 <_printf_float+0xb6>
 800d47e:	f04f 0800 	mov.w	r8, #0
 800d482:	f104 091a 	add.w	r9, r4, #26
 800d486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d488:	3b01      	subs	r3, #1
 800d48a:	4543      	cmp	r3, r8
 800d48c:	dc09      	bgt.n	800d4a2 <_printf_float+0x256>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	079b      	lsls	r3, r3, #30
 800d492:	f100 8102 	bmi.w	800d69a <_printf_float+0x44e>
 800d496:	68e0      	ldr	r0, [r4, #12]
 800d498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d49a:	4298      	cmp	r0, r3
 800d49c:	bfb8      	it	lt
 800d49e:	4618      	movlt	r0, r3
 800d4a0:	e731      	b.n	800d306 <_printf_float+0xba>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	464a      	mov	r2, r9
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b8      	blx	r7
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	f43f af28 	beq.w	800d302 <_printf_float+0xb6>
 800d4b2:	f108 0801 	add.w	r8, r8, #1
 800d4b6:	e7e6      	b.n	800d486 <_printf_float+0x23a>
 800d4b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	dc38      	bgt.n	800d530 <_printf_float+0x2e4>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4631      	mov	r1, r6
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	4a19      	ldr	r2, [pc, #100]	; (800d52c <_printf_float+0x2e0>)
 800d4c6:	47b8      	blx	r7
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	f43f af1a 	beq.w	800d302 <_printf_float+0xb6>
 800d4ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	d102      	bne.n	800d4dc <_printf_float+0x290>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	07d9      	lsls	r1, r3, #31
 800d4da:	d5d8      	bpl.n	800d48e <_printf_float+0x242>
 800d4dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	47b8      	blx	r7
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	f43f af0b 	beq.w	800d302 <_printf_float+0xb6>
 800d4ec:	f04f 0900 	mov.w	r9, #0
 800d4f0:	f104 0a1a 	add.w	sl, r4, #26
 800d4f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4f6:	425b      	negs	r3, r3
 800d4f8:	454b      	cmp	r3, r9
 800d4fa:	dc01      	bgt.n	800d500 <_printf_float+0x2b4>
 800d4fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4fe:	e794      	b.n	800d42a <_printf_float+0x1de>
 800d500:	2301      	movs	r3, #1
 800d502:	4652      	mov	r2, sl
 800d504:	4631      	mov	r1, r6
 800d506:	4628      	mov	r0, r5
 800d508:	47b8      	blx	r7
 800d50a:	3001      	adds	r0, #1
 800d50c:	f43f aef9 	beq.w	800d302 <_printf_float+0xb6>
 800d510:	f109 0901 	add.w	r9, r9, #1
 800d514:	e7ee      	b.n	800d4f4 <_printf_float+0x2a8>
 800d516:	bf00      	nop
 800d518:	7fefffff 	.word	0x7fefffff
 800d51c:	08011838 	.word	0x08011838
 800d520:	0801183c 	.word	0x0801183c
 800d524:	08011844 	.word	0x08011844
 800d528:	08011840 	.word	0x08011840
 800d52c:	08011848 	.word	0x08011848
 800d530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d534:	429a      	cmp	r2, r3
 800d536:	bfa8      	it	ge
 800d538:	461a      	movge	r2, r3
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	4691      	mov	r9, r2
 800d53e:	dc37      	bgt.n	800d5b0 <_printf_float+0x364>
 800d540:	f04f 0b00 	mov.w	fp, #0
 800d544:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d548:	f104 021a 	add.w	r2, r4, #26
 800d54c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d550:	ebaa 0309 	sub.w	r3, sl, r9
 800d554:	455b      	cmp	r3, fp
 800d556:	dc33      	bgt.n	800d5c0 <_printf_float+0x374>
 800d558:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d55c:	429a      	cmp	r2, r3
 800d55e:	db3b      	blt.n	800d5d8 <_printf_float+0x38c>
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	07da      	lsls	r2, r3, #31
 800d564:	d438      	bmi.n	800d5d8 <_printf_float+0x38c>
 800d566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d568:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d56a:	eba3 020a 	sub.w	r2, r3, sl
 800d56e:	eba3 0901 	sub.w	r9, r3, r1
 800d572:	4591      	cmp	r9, r2
 800d574:	bfa8      	it	ge
 800d576:	4691      	movge	r9, r2
 800d578:	f1b9 0f00 	cmp.w	r9, #0
 800d57c:	dc34      	bgt.n	800d5e8 <_printf_float+0x39c>
 800d57e:	f04f 0800 	mov.w	r8, #0
 800d582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d586:	f104 0a1a 	add.w	sl, r4, #26
 800d58a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d58e:	1a9b      	subs	r3, r3, r2
 800d590:	eba3 0309 	sub.w	r3, r3, r9
 800d594:	4543      	cmp	r3, r8
 800d596:	f77f af7a 	ble.w	800d48e <_printf_float+0x242>
 800d59a:	2301      	movs	r3, #1
 800d59c:	4652      	mov	r2, sl
 800d59e:	4631      	mov	r1, r6
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	47b8      	blx	r7
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f43f aeac 	beq.w	800d302 <_printf_float+0xb6>
 800d5aa:	f108 0801 	add.w	r8, r8, #1
 800d5ae:	e7ec      	b.n	800d58a <_printf_float+0x33e>
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4642      	mov	r2, r8
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	47b8      	blx	r7
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	d1c0      	bne.n	800d540 <_printf_float+0x2f4>
 800d5be:	e6a0      	b.n	800d302 <_printf_float+0xb6>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800d5c8:	47b8      	blx	r7
 800d5ca:	3001      	adds	r0, #1
 800d5cc:	f43f ae99 	beq.w	800d302 <_printf_float+0xb6>
 800d5d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d5d2:	f10b 0b01 	add.w	fp, fp, #1
 800d5d6:	e7b9      	b.n	800d54c <_printf_float+0x300>
 800d5d8:	4631      	mov	r1, r6
 800d5da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	d1bf      	bne.n	800d566 <_printf_float+0x31a>
 800d5e6:	e68c      	b.n	800d302 <_printf_float+0xb6>
 800d5e8:	464b      	mov	r3, r9
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	eb08 020a 	add.w	r2, r8, sl
 800d5f2:	47b8      	blx	r7
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d1c2      	bne.n	800d57e <_printf_float+0x332>
 800d5f8:	e683      	b.n	800d302 <_printf_float+0xb6>
 800d5fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5fc:	2a01      	cmp	r2, #1
 800d5fe:	dc01      	bgt.n	800d604 <_printf_float+0x3b8>
 800d600:	07db      	lsls	r3, r3, #31
 800d602:	d537      	bpl.n	800d674 <_printf_float+0x428>
 800d604:	2301      	movs	r3, #1
 800d606:	4642      	mov	r2, r8
 800d608:	4631      	mov	r1, r6
 800d60a:	4628      	mov	r0, r5
 800d60c:	47b8      	blx	r7
 800d60e:	3001      	adds	r0, #1
 800d610:	f43f ae77 	beq.w	800d302 <_printf_float+0xb6>
 800d614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d618:	4631      	mov	r1, r6
 800d61a:	4628      	mov	r0, r5
 800d61c:	47b8      	blx	r7
 800d61e:	3001      	adds	r0, #1
 800d620:	f43f ae6f 	beq.w	800d302 <_printf_float+0xb6>
 800d624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d628:	2200      	movs	r2, #0
 800d62a:	2300      	movs	r3, #0
 800d62c:	f7f3 f9d4 	bl	80009d8 <__aeabi_dcmpeq>
 800d630:	b9d8      	cbnz	r0, 800d66a <_printf_float+0x41e>
 800d632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d634:	f108 0201 	add.w	r2, r8, #1
 800d638:	3b01      	subs	r3, #1
 800d63a:	4631      	mov	r1, r6
 800d63c:	4628      	mov	r0, r5
 800d63e:	47b8      	blx	r7
 800d640:	3001      	adds	r0, #1
 800d642:	d10e      	bne.n	800d662 <_printf_float+0x416>
 800d644:	e65d      	b.n	800d302 <_printf_float+0xb6>
 800d646:	2301      	movs	r3, #1
 800d648:	464a      	mov	r2, r9
 800d64a:	4631      	mov	r1, r6
 800d64c:	4628      	mov	r0, r5
 800d64e:	47b8      	blx	r7
 800d650:	3001      	adds	r0, #1
 800d652:	f43f ae56 	beq.w	800d302 <_printf_float+0xb6>
 800d656:	f108 0801 	add.w	r8, r8, #1
 800d65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d65c:	3b01      	subs	r3, #1
 800d65e:	4543      	cmp	r3, r8
 800d660:	dcf1      	bgt.n	800d646 <_printf_float+0x3fa>
 800d662:	4653      	mov	r3, sl
 800d664:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d668:	e6e0      	b.n	800d42c <_printf_float+0x1e0>
 800d66a:	f04f 0800 	mov.w	r8, #0
 800d66e:	f104 091a 	add.w	r9, r4, #26
 800d672:	e7f2      	b.n	800d65a <_printf_float+0x40e>
 800d674:	2301      	movs	r3, #1
 800d676:	4642      	mov	r2, r8
 800d678:	e7df      	b.n	800d63a <_printf_float+0x3ee>
 800d67a:	2301      	movs	r3, #1
 800d67c:	464a      	mov	r2, r9
 800d67e:	4631      	mov	r1, r6
 800d680:	4628      	mov	r0, r5
 800d682:	47b8      	blx	r7
 800d684:	3001      	adds	r0, #1
 800d686:	f43f ae3c 	beq.w	800d302 <_printf_float+0xb6>
 800d68a:	f108 0801 	add.w	r8, r8, #1
 800d68e:	68e3      	ldr	r3, [r4, #12]
 800d690:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d692:	1a5b      	subs	r3, r3, r1
 800d694:	4543      	cmp	r3, r8
 800d696:	dcf0      	bgt.n	800d67a <_printf_float+0x42e>
 800d698:	e6fd      	b.n	800d496 <_printf_float+0x24a>
 800d69a:	f04f 0800 	mov.w	r8, #0
 800d69e:	f104 0919 	add.w	r9, r4, #25
 800d6a2:	e7f4      	b.n	800d68e <_printf_float+0x442>

0800d6a4 <_printf_common>:
 800d6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a8:	4616      	mov	r6, r2
 800d6aa:	4699      	mov	r9, r3
 800d6ac:	688a      	ldr	r2, [r1, #8]
 800d6ae:	690b      	ldr	r3, [r1, #16]
 800d6b0:	4607      	mov	r7, r0
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	bfb8      	it	lt
 800d6b6:	4613      	movlt	r3, r2
 800d6b8:	6033      	str	r3, [r6, #0]
 800d6ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6be:	460c      	mov	r4, r1
 800d6c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6c4:	b10a      	cbz	r2, 800d6ca <_printf_common+0x26>
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	0699      	lsls	r1, r3, #26
 800d6ce:	bf42      	ittt	mi
 800d6d0:	6833      	ldrmi	r3, [r6, #0]
 800d6d2:	3302      	addmi	r3, #2
 800d6d4:	6033      	strmi	r3, [r6, #0]
 800d6d6:	6825      	ldr	r5, [r4, #0]
 800d6d8:	f015 0506 	ands.w	r5, r5, #6
 800d6dc:	d106      	bne.n	800d6ec <_printf_common+0x48>
 800d6de:	f104 0a19 	add.w	sl, r4, #25
 800d6e2:	68e3      	ldr	r3, [r4, #12]
 800d6e4:	6832      	ldr	r2, [r6, #0]
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	dc28      	bgt.n	800d73e <_printf_common+0x9a>
 800d6ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6f0:	1e13      	subs	r3, r2, #0
 800d6f2:	6822      	ldr	r2, [r4, #0]
 800d6f4:	bf18      	it	ne
 800d6f6:	2301      	movne	r3, #1
 800d6f8:	0692      	lsls	r2, r2, #26
 800d6fa:	d42d      	bmi.n	800d758 <_printf_common+0xb4>
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	4638      	mov	r0, r7
 800d700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d704:	47c0      	blx	r8
 800d706:	3001      	adds	r0, #1
 800d708:	d020      	beq.n	800d74c <_printf_common+0xa8>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	68e5      	ldr	r5, [r4, #12]
 800d70e:	f003 0306 	and.w	r3, r3, #6
 800d712:	2b04      	cmp	r3, #4
 800d714:	bf18      	it	ne
 800d716:	2500      	movne	r5, #0
 800d718:	6832      	ldr	r2, [r6, #0]
 800d71a:	f04f 0600 	mov.w	r6, #0
 800d71e:	68a3      	ldr	r3, [r4, #8]
 800d720:	bf08      	it	eq
 800d722:	1aad      	subeq	r5, r5, r2
 800d724:	6922      	ldr	r2, [r4, #16]
 800d726:	bf08      	it	eq
 800d728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d72c:	4293      	cmp	r3, r2
 800d72e:	bfc4      	itt	gt
 800d730:	1a9b      	subgt	r3, r3, r2
 800d732:	18ed      	addgt	r5, r5, r3
 800d734:	341a      	adds	r4, #26
 800d736:	42b5      	cmp	r5, r6
 800d738:	d11a      	bne.n	800d770 <_printf_common+0xcc>
 800d73a:	2000      	movs	r0, #0
 800d73c:	e008      	b.n	800d750 <_printf_common+0xac>
 800d73e:	2301      	movs	r3, #1
 800d740:	4652      	mov	r2, sl
 800d742:	4649      	mov	r1, r9
 800d744:	4638      	mov	r0, r7
 800d746:	47c0      	blx	r8
 800d748:	3001      	adds	r0, #1
 800d74a:	d103      	bne.n	800d754 <_printf_common+0xb0>
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295
 800d750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d754:	3501      	adds	r5, #1
 800d756:	e7c4      	b.n	800d6e2 <_printf_common+0x3e>
 800d758:	2030      	movs	r0, #48	; 0x30
 800d75a:	18e1      	adds	r1, r4, r3
 800d75c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d760:	1c5a      	adds	r2, r3, #1
 800d762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d766:	4422      	add	r2, r4
 800d768:	3302      	adds	r3, #2
 800d76a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d76e:	e7c5      	b.n	800d6fc <_printf_common+0x58>
 800d770:	2301      	movs	r3, #1
 800d772:	4622      	mov	r2, r4
 800d774:	4649      	mov	r1, r9
 800d776:	4638      	mov	r0, r7
 800d778:	47c0      	blx	r8
 800d77a:	3001      	adds	r0, #1
 800d77c:	d0e6      	beq.n	800d74c <_printf_common+0xa8>
 800d77e:	3601      	adds	r6, #1
 800d780:	e7d9      	b.n	800d736 <_printf_common+0x92>
	...

0800d784 <_printf_i>:
 800d784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d788:	7e0f      	ldrb	r7, [r1, #24]
 800d78a:	4691      	mov	r9, r2
 800d78c:	2f78      	cmp	r7, #120	; 0x78
 800d78e:	4680      	mov	r8, r0
 800d790:	460c      	mov	r4, r1
 800d792:	469a      	mov	sl, r3
 800d794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d79a:	d807      	bhi.n	800d7ac <_printf_i+0x28>
 800d79c:	2f62      	cmp	r7, #98	; 0x62
 800d79e:	d80a      	bhi.n	800d7b6 <_printf_i+0x32>
 800d7a0:	2f00      	cmp	r7, #0
 800d7a2:	f000 80d9 	beq.w	800d958 <_printf_i+0x1d4>
 800d7a6:	2f58      	cmp	r7, #88	; 0x58
 800d7a8:	f000 80a4 	beq.w	800d8f4 <_printf_i+0x170>
 800d7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7b4:	e03a      	b.n	800d82c <_printf_i+0xa8>
 800d7b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7ba:	2b15      	cmp	r3, #21
 800d7bc:	d8f6      	bhi.n	800d7ac <_printf_i+0x28>
 800d7be:	a101      	add	r1, pc, #4	; (adr r1, 800d7c4 <_printf_i+0x40>)
 800d7c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7c4:	0800d81d 	.word	0x0800d81d
 800d7c8:	0800d831 	.word	0x0800d831
 800d7cc:	0800d7ad 	.word	0x0800d7ad
 800d7d0:	0800d7ad 	.word	0x0800d7ad
 800d7d4:	0800d7ad 	.word	0x0800d7ad
 800d7d8:	0800d7ad 	.word	0x0800d7ad
 800d7dc:	0800d831 	.word	0x0800d831
 800d7e0:	0800d7ad 	.word	0x0800d7ad
 800d7e4:	0800d7ad 	.word	0x0800d7ad
 800d7e8:	0800d7ad 	.word	0x0800d7ad
 800d7ec:	0800d7ad 	.word	0x0800d7ad
 800d7f0:	0800d93f 	.word	0x0800d93f
 800d7f4:	0800d861 	.word	0x0800d861
 800d7f8:	0800d921 	.word	0x0800d921
 800d7fc:	0800d7ad 	.word	0x0800d7ad
 800d800:	0800d7ad 	.word	0x0800d7ad
 800d804:	0800d961 	.word	0x0800d961
 800d808:	0800d7ad 	.word	0x0800d7ad
 800d80c:	0800d861 	.word	0x0800d861
 800d810:	0800d7ad 	.word	0x0800d7ad
 800d814:	0800d7ad 	.word	0x0800d7ad
 800d818:	0800d929 	.word	0x0800d929
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	602a      	str	r2, [r5, #0]
 800d824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d82c:	2301      	movs	r3, #1
 800d82e:	e0a4      	b.n	800d97a <_printf_i+0x1f6>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	6829      	ldr	r1, [r5, #0]
 800d834:	0606      	lsls	r6, r0, #24
 800d836:	f101 0304 	add.w	r3, r1, #4
 800d83a:	d50a      	bpl.n	800d852 <_printf_i+0xce>
 800d83c:	680e      	ldr	r6, [r1, #0]
 800d83e:	602b      	str	r3, [r5, #0]
 800d840:	2e00      	cmp	r6, #0
 800d842:	da03      	bge.n	800d84c <_printf_i+0xc8>
 800d844:	232d      	movs	r3, #45	; 0x2d
 800d846:	4276      	negs	r6, r6
 800d848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d84c:	230a      	movs	r3, #10
 800d84e:	485e      	ldr	r0, [pc, #376]	; (800d9c8 <_printf_i+0x244>)
 800d850:	e019      	b.n	800d886 <_printf_i+0x102>
 800d852:	680e      	ldr	r6, [r1, #0]
 800d854:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	bf18      	it	ne
 800d85c:	b236      	sxthne	r6, r6
 800d85e:	e7ef      	b.n	800d840 <_printf_i+0xbc>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	6820      	ldr	r0, [r4, #0]
 800d864:	1d19      	adds	r1, r3, #4
 800d866:	6029      	str	r1, [r5, #0]
 800d868:	0601      	lsls	r1, r0, #24
 800d86a:	d501      	bpl.n	800d870 <_printf_i+0xec>
 800d86c:	681e      	ldr	r6, [r3, #0]
 800d86e:	e002      	b.n	800d876 <_printf_i+0xf2>
 800d870:	0646      	lsls	r6, r0, #25
 800d872:	d5fb      	bpl.n	800d86c <_printf_i+0xe8>
 800d874:	881e      	ldrh	r6, [r3, #0]
 800d876:	2f6f      	cmp	r7, #111	; 0x6f
 800d878:	bf0c      	ite	eq
 800d87a:	2308      	moveq	r3, #8
 800d87c:	230a      	movne	r3, #10
 800d87e:	4852      	ldr	r0, [pc, #328]	; (800d9c8 <_printf_i+0x244>)
 800d880:	2100      	movs	r1, #0
 800d882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d886:	6865      	ldr	r5, [r4, #4]
 800d888:	2d00      	cmp	r5, #0
 800d88a:	bfa8      	it	ge
 800d88c:	6821      	ldrge	r1, [r4, #0]
 800d88e:	60a5      	str	r5, [r4, #8]
 800d890:	bfa4      	itt	ge
 800d892:	f021 0104 	bicge.w	r1, r1, #4
 800d896:	6021      	strge	r1, [r4, #0]
 800d898:	b90e      	cbnz	r6, 800d89e <_printf_i+0x11a>
 800d89a:	2d00      	cmp	r5, #0
 800d89c:	d04d      	beq.n	800d93a <_printf_i+0x1b6>
 800d89e:	4615      	mov	r5, r2
 800d8a0:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8a4:	fb03 6711 	mls	r7, r3, r1, r6
 800d8a8:	5dc7      	ldrb	r7, [r0, r7]
 800d8aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8ae:	4637      	mov	r7, r6
 800d8b0:	42bb      	cmp	r3, r7
 800d8b2:	460e      	mov	r6, r1
 800d8b4:	d9f4      	bls.n	800d8a0 <_printf_i+0x11c>
 800d8b6:	2b08      	cmp	r3, #8
 800d8b8:	d10b      	bne.n	800d8d2 <_printf_i+0x14e>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	07de      	lsls	r6, r3, #31
 800d8be:	d508      	bpl.n	800d8d2 <_printf_i+0x14e>
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	6861      	ldr	r1, [r4, #4]
 800d8c4:	4299      	cmp	r1, r3
 800d8c6:	bfde      	ittt	le
 800d8c8:	2330      	movle	r3, #48	; 0x30
 800d8ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8d2:	1b52      	subs	r2, r2, r5
 800d8d4:	6122      	str	r2, [r4, #16]
 800d8d6:	464b      	mov	r3, r9
 800d8d8:	4621      	mov	r1, r4
 800d8da:	4640      	mov	r0, r8
 800d8dc:	f8cd a000 	str.w	sl, [sp]
 800d8e0:	aa03      	add	r2, sp, #12
 800d8e2:	f7ff fedf 	bl	800d6a4 <_printf_common>
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d14c      	bne.n	800d984 <_printf_i+0x200>
 800d8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ee:	b004      	add	sp, #16
 800d8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f4:	4834      	ldr	r0, [pc, #208]	; (800d9c8 <_printf_i+0x244>)
 800d8f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8fa:	6829      	ldr	r1, [r5, #0]
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	f851 6b04 	ldr.w	r6, [r1], #4
 800d902:	6029      	str	r1, [r5, #0]
 800d904:	061d      	lsls	r5, r3, #24
 800d906:	d514      	bpl.n	800d932 <_printf_i+0x1ae>
 800d908:	07df      	lsls	r7, r3, #31
 800d90a:	bf44      	itt	mi
 800d90c:	f043 0320 	orrmi.w	r3, r3, #32
 800d910:	6023      	strmi	r3, [r4, #0]
 800d912:	b91e      	cbnz	r6, 800d91c <_printf_i+0x198>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	f023 0320 	bic.w	r3, r3, #32
 800d91a:	6023      	str	r3, [r4, #0]
 800d91c:	2310      	movs	r3, #16
 800d91e:	e7af      	b.n	800d880 <_printf_i+0xfc>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	f043 0320 	orr.w	r3, r3, #32
 800d926:	6023      	str	r3, [r4, #0]
 800d928:	2378      	movs	r3, #120	; 0x78
 800d92a:	4828      	ldr	r0, [pc, #160]	; (800d9cc <_printf_i+0x248>)
 800d92c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d930:	e7e3      	b.n	800d8fa <_printf_i+0x176>
 800d932:	0659      	lsls	r1, r3, #25
 800d934:	bf48      	it	mi
 800d936:	b2b6      	uxthmi	r6, r6
 800d938:	e7e6      	b.n	800d908 <_printf_i+0x184>
 800d93a:	4615      	mov	r5, r2
 800d93c:	e7bb      	b.n	800d8b6 <_printf_i+0x132>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	6826      	ldr	r6, [r4, #0]
 800d942:	1d18      	adds	r0, r3, #4
 800d944:	6961      	ldr	r1, [r4, #20]
 800d946:	6028      	str	r0, [r5, #0]
 800d948:	0635      	lsls	r5, r6, #24
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	d501      	bpl.n	800d952 <_printf_i+0x1ce>
 800d94e:	6019      	str	r1, [r3, #0]
 800d950:	e002      	b.n	800d958 <_printf_i+0x1d4>
 800d952:	0670      	lsls	r0, r6, #25
 800d954:	d5fb      	bpl.n	800d94e <_printf_i+0x1ca>
 800d956:	8019      	strh	r1, [r3, #0]
 800d958:	2300      	movs	r3, #0
 800d95a:	4615      	mov	r5, r2
 800d95c:	6123      	str	r3, [r4, #16]
 800d95e:	e7ba      	b.n	800d8d6 <_printf_i+0x152>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	2100      	movs	r1, #0
 800d964:	1d1a      	adds	r2, r3, #4
 800d966:	602a      	str	r2, [r5, #0]
 800d968:	681d      	ldr	r5, [r3, #0]
 800d96a:	6862      	ldr	r2, [r4, #4]
 800d96c:	4628      	mov	r0, r5
 800d96e:	f002 f88d 	bl	800fa8c <memchr>
 800d972:	b108      	cbz	r0, 800d978 <_printf_i+0x1f4>
 800d974:	1b40      	subs	r0, r0, r5
 800d976:	6060      	str	r0, [r4, #4]
 800d978:	6863      	ldr	r3, [r4, #4]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2300      	movs	r3, #0
 800d97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d982:	e7a8      	b.n	800d8d6 <_printf_i+0x152>
 800d984:	462a      	mov	r2, r5
 800d986:	4649      	mov	r1, r9
 800d988:	4640      	mov	r0, r8
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	47d0      	blx	sl
 800d98e:	3001      	adds	r0, #1
 800d990:	d0ab      	beq.n	800d8ea <_printf_i+0x166>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	079b      	lsls	r3, r3, #30
 800d996:	d413      	bmi.n	800d9c0 <_printf_i+0x23c>
 800d998:	68e0      	ldr	r0, [r4, #12]
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	4298      	cmp	r0, r3
 800d99e:	bfb8      	it	lt
 800d9a0:	4618      	movlt	r0, r3
 800d9a2:	e7a4      	b.n	800d8ee <_printf_i+0x16a>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	47d0      	blx	sl
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d09b      	beq.n	800d8ea <_printf_i+0x166>
 800d9b2:	3501      	adds	r5, #1
 800d9b4:	68e3      	ldr	r3, [r4, #12]
 800d9b6:	9903      	ldr	r1, [sp, #12]
 800d9b8:	1a5b      	subs	r3, r3, r1
 800d9ba:	42ab      	cmp	r3, r5
 800d9bc:	dcf2      	bgt.n	800d9a4 <_printf_i+0x220>
 800d9be:	e7eb      	b.n	800d998 <_printf_i+0x214>
 800d9c0:	2500      	movs	r5, #0
 800d9c2:	f104 0619 	add.w	r6, r4, #25
 800d9c6:	e7f5      	b.n	800d9b4 <_printf_i+0x230>
 800d9c8:	0801184a 	.word	0x0801184a
 800d9cc:	0801185b 	.word	0x0801185b

0800d9d0 <sniprintf>:
 800d9d0:	b40c      	push	{r2, r3}
 800d9d2:	b530      	push	{r4, r5, lr}
 800d9d4:	4b17      	ldr	r3, [pc, #92]	; (800da34 <sniprintf+0x64>)
 800d9d6:	1e0c      	subs	r4, r1, #0
 800d9d8:	681d      	ldr	r5, [r3, #0]
 800d9da:	b09d      	sub	sp, #116	; 0x74
 800d9dc:	da08      	bge.n	800d9f0 <sniprintf+0x20>
 800d9de:	238b      	movs	r3, #139	; 0x8b
 800d9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e4:	602b      	str	r3, [r5, #0]
 800d9e6:	b01d      	add	sp, #116	; 0x74
 800d9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ec:	b002      	add	sp, #8
 800d9ee:	4770      	bx	lr
 800d9f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d9f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d9f8:	bf0c      	ite	eq
 800d9fa:	4623      	moveq	r3, r4
 800d9fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da00:	9304      	str	r3, [sp, #16]
 800da02:	9307      	str	r3, [sp, #28]
 800da04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da08:	9002      	str	r0, [sp, #8]
 800da0a:	9006      	str	r0, [sp, #24]
 800da0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da10:	4628      	mov	r0, r5
 800da12:	ab21      	add	r3, sp, #132	; 0x84
 800da14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da16:	a902      	add	r1, sp, #8
 800da18:	9301      	str	r3, [sp, #4]
 800da1a:	f002 fe57 	bl	80106cc <_svfiprintf_r>
 800da1e:	1c43      	adds	r3, r0, #1
 800da20:	bfbc      	itt	lt
 800da22:	238b      	movlt	r3, #139	; 0x8b
 800da24:	602b      	strlt	r3, [r5, #0]
 800da26:	2c00      	cmp	r4, #0
 800da28:	d0dd      	beq.n	800d9e6 <sniprintf+0x16>
 800da2a:	2200      	movs	r2, #0
 800da2c:	9b02      	ldr	r3, [sp, #8]
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	e7d9      	b.n	800d9e6 <sniprintf+0x16>
 800da32:	bf00      	nop
 800da34:	200001a0 	.word	0x200001a0

0800da38 <strncmp>:
 800da38:	4603      	mov	r3, r0
 800da3a:	b510      	push	{r4, lr}
 800da3c:	b172      	cbz	r2, 800da5c <strncmp+0x24>
 800da3e:	3901      	subs	r1, #1
 800da40:	1884      	adds	r4, r0, r2
 800da42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da4a:	4290      	cmp	r0, r2
 800da4c:	d101      	bne.n	800da52 <strncmp+0x1a>
 800da4e:	42a3      	cmp	r3, r4
 800da50:	d101      	bne.n	800da56 <strncmp+0x1e>
 800da52:	1a80      	subs	r0, r0, r2
 800da54:	bd10      	pop	{r4, pc}
 800da56:	2800      	cmp	r0, #0
 800da58:	d1f3      	bne.n	800da42 <strncmp+0xa>
 800da5a:	e7fa      	b.n	800da52 <strncmp+0x1a>
 800da5c:	4610      	mov	r0, r2
 800da5e:	e7f9      	b.n	800da54 <strncmp+0x1c>

0800da60 <sulp>:
 800da60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da64:	460f      	mov	r7, r1
 800da66:	4690      	mov	r8, r2
 800da68:	f002 fb9c 	bl	80101a4 <__ulp>
 800da6c:	4604      	mov	r4, r0
 800da6e:	460d      	mov	r5, r1
 800da70:	f1b8 0f00 	cmp.w	r8, #0
 800da74:	d011      	beq.n	800da9a <sulp+0x3a>
 800da76:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800da7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da7e:	2b00      	cmp	r3, #0
 800da80:	dd0b      	ble.n	800da9a <sulp+0x3a>
 800da82:	2400      	movs	r4, #0
 800da84:	051b      	lsls	r3, r3, #20
 800da86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800da8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800da8e:	4622      	mov	r2, r4
 800da90:	462b      	mov	r3, r5
 800da92:	f7f2 fd39 	bl	8000508 <__aeabi_dmul>
 800da96:	4604      	mov	r4, r0
 800da98:	460d      	mov	r5, r1
 800da9a:	4620      	mov	r0, r4
 800da9c:	4629      	mov	r1, r5
 800da9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa2:	0000      	movs	r0, r0
 800daa4:	0000      	movs	r0, r0
	...

0800daa8 <_strtod_l>:
 800daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	469b      	mov	fp, r3
 800daae:	2300      	movs	r3, #0
 800dab0:	b09f      	sub	sp, #124	; 0x7c
 800dab2:	931a      	str	r3, [sp, #104]	; 0x68
 800dab4:	4b9e      	ldr	r3, [pc, #632]	; (800dd30 <_strtod_l+0x288>)
 800dab6:	4682      	mov	sl, r0
 800dab8:	681f      	ldr	r7, [r3, #0]
 800daba:	460e      	mov	r6, r1
 800dabc:	4638      	mov	r0, r7
 800dabe:	9215      	str	r2, [sp, #84]	; 0x54
 800dac0:	f7f2 fb5e 	bl	8000180 <strlen>
 800dac4:	f04f 0800 	mov.w	r8, #0
 800dac8:	4604      	mov	r4, r0
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	9619      	str	r6, [sp, #100]	; 0x64
 800dad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dad2:	781a      	ldrb	r2, [r3, #0]
 800dad4:	2a2b      	cmp	r2, #43	; 0x2b
 800dad6:	d04c      	beq.n	800db72 <_strtod_l+0xca>
 800dad8:	d83a      	bhi.n	800db50 <_strtod_l+0xa8>
 800dada:	2a0d      	cmp	r2, #13
 800dadc:	d833      	bhi.n	800db46 <_strtod_l+0x9e>
 800dade:	2a08      	cmp	r2, #8
 800dae0:	d833      	bhi.n	800db4a <_strtod_l+0xa2>
 800dae2:	2a00      	cmp	r2, #0
 800dae4:	d03d      	beq.n	800db62 <_strtod_l+0xba>
 800dae6:	2300      	movs	r3, #0
 800dae8:	930a      	str	r3, [sp, #40]	; 0x28
 800daea:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800daec:	782b      	ldrb	r3, [r5, #0]
 800daee:	2b30      	cmp	r3, #48	; 0x30
 800daf0:	f040 80aa 	bne.w	800dc48 <_strtod_l+0x1a0>
 800daf4:	786b      	ldrb	r3, [r5, #1]
 800daf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dafa:	2b58      	cmp	r3, #88	; 0x58
 800dafc:	d166      	bne.n	800dbcc <_strtod_l+0x124>
 800dafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db00:	4650      	mov	r0, sl
 800db02:	9301      	str	r3, [sp, #4]
 800db04:	ab1a      	add	r3, sp, #104	; 0x68
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	4a8a      	ldr	r2, [pc, #552]	; (800dd34 <_strtod_l+0x28c>)
 800db0a:	f8cd b008 	str.w	fp, [sp, #8]
 800db0e:	ab1b      	add	r3, sp, #108	; 0x6c
 800db10:	a919      	add	r1, sp, #100	; 0x64
 800db12:	f001 fc9f 	bl	800f454 <__gethex>
 800db16:	f010 0607 	ands.w	r6, r0, #7
 800db1a:	4604      	mov	r4, r0
 800db1c:	d005      	beq.n	800db2a <_strtod_l+0x82>
 800db1e:	2e06      	cmp	r6, #6
 800db20:	d129      	bne.n	800db76 <_strtod_l+0xce>
 800db22:	2300      	movs	r3, #0
 800db24:	3501      	adds	r5, #1
 800db26:	9519      	str	r5, [sp, #100]	; 0x64
 800db28:	930a      	str	r3, [sp, #40]	; 0x28
 800db2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f040 858a 	bne.w	800e646 <_strtod_l+0xb9e>
 800db32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db34:	b1d3      	cbz	r3, 800db6c <_strtod_l+0xc4>
 800db36:	4642      	mov	r2, r8
 800db38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800db3c:	4610      	mov	r0, r2
 800db3e:	4619      	mov	r1, r3
 800db40:	b01f      	add	sp, #124	; 0x7c
 800db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db46:	2a20      	cmp	r2, #32
 800db48:	d1cd      	bne.n	800dae6 <_strtod_l+0x3e>
 800db4a:	3301      	adds	r3, #1
 800db4c:	9319      	str	r3, [sp, #100]	; 0x64
 800db4e:	e7bf      	b.n	800dad0 <_strtod_l+0x28>
 800db50:	2a2d      	cmp	r2, #45	; 0x2d
 800db52:	d1c8      	bne.n	800dae6 <_strtod_l+0x3e>
 800db54:	2201      	movs	r2, #1
 800db56:	920a      	str	r2, [sp, #40]	; 0x28
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	9219      	str	r2, [sp, #100]	; 0x64
 800db5c:	785b      	ldrb	r3, [r3, #1]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d1c3      	bne.n	800daea <_strtod_l+0x42>
 800db62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db64:	9619      	str	r6, [sp, #100]	; 0x64
 800db66:	2b00      	cmp	r3, #0
 800db68:	f040 856b 	bne.w	800e642 <_strtod_l+0xb9a>
 800db6c:	4642      	mov	r2, r8
 800db6e:	464b      	mov	r3, r9
 800db70:	e7e4      	b.n	800db3c <_strtod_l+0x94>
 800db72:	2200      	movs	r2, #0
 800db74:	e7ef      	b.n	800db56 <_strtod_l+0xae>
 800db76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800db78:	b13a      	cbz	r2, 800db8a <_strtod_l+0xe2>
 800db7a:	2135      	movs	r1, #53	; 0x35
 800db7c:	a81c      	add	r0, sp, #112	; 0x70
 800db7e:	f002 fc15 	bl	80103ac <__copybits>
 800db82:	4650      	mov	r0, sl
 800db84:	991a      	ldr	r1, [sp, #104]	; 0x68
 800db86:	f001 ffdd 	bl	800fb44 <_Bfree>
 800db8a:	3e01      	subs	r6, #1
 800db8c:	2e04      	cmp	r6, #4
 800db8e:	d806      	bhi.n	800db9e <_strtod_l+0xf6>
 800db90:	e8df f006 	tbb	[pc, r6]
 800db94:	1714030a 	.word	0x1714030a
 800db98:	0a          	.byte	0x0a
 800db99:	00          	.byte	0x00
 800db9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800db9e:	0721      	lsls	r1, r4, #28
 800dba0:	d5c3      	bpl.n	800db2a <_strtod_l+0x82>
 800dba2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800dba6:	e7c0      	b.n	800db2a <_strtod_l+0x82>
 800dba8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dbaa:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800dbae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dbb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dbb6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800dbba:	e7f0      	b.n	800db9e <_strtod_l+0xf6>
 800dbbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dd38 <_strtod_l+0x290>
 800dbc0:	e7ed      	b.n	800db9e <_strtod_l+0xf6>
 800dbc2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800dbc6:	f04f 38ff 	mov.w	r8, #4294967295
 800dbca:	e7e8      	b.n	800db9e <_strtod_l+0xf6>
 800dbcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	9219      	str	r2, [sp, #100]	; 0x64
 800dbd2:	785b      	ldrb	r3, [r3, #1]
 800dbd4:	2b30      	cmp	r3, #48	; 0x30
 800dbd6:	d0f9      	beq.n	800dbcc <_strtod_l+0x124>
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d0a6      	beq.n	800db2a <_strtod_l+0x82>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	9307      	str	r3, [sp, #28]
 800dbe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbe2:	220a      	movs	r2, #10
 800dbe4:	9308      	str	r3, [sp, #32]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	469b      	mov	fp, r3
 800dbea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800dbee:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dbf0:	7805      	ldrb	r5, [r0, #0]
 800dbf2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800dbf6:	b2d9      	uxtb	r1, r3
 800dbf8:	2909      	cmp	r1, #9
 800dbfa:	d927      	bls.n	800dc4c <_strtod_l+0x1a4>
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4639      	mov	r1, r7
 800dc00:	f7ff ff1a 	bl	800da38 <strncmp>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d033      	beq.n	800dc70 <_strtod_l+0x1c8>
 800dc08:	2000      	movs	r0, #0
 800dc0a:	462a      	mov	r2, r5
 800dc0c:	465c      	mov	r4, fp
 800dc0e:	4603      	mov	r3, r0
 800dc10:	9004      	str	r0, [sp, #16]
 800dc12:	2a65      	cmp	r2, #101	; 0x65
 800dc14:	d001      	beq.n	800dc1a <_strtod_l+0x172>
 800dc16:	2a45      	cmp	r2, #69	; 0x45
 800dc18:	d114      	bne.n	800dc44 <_strtod_l+0x19c>
 800dc1a:	b91c      	cbnz	r4, 800dc24 <_strtod_l+0x17c>
 800dc1c:	9a07      	ldr	r2, [sp, #28]
 800dc1e:	4302      	orrs	r2, r0
 800dc20:	d09f      	beq.n	800db62 <_strtod_l+0xba>
 800dc22:	2400      	movs	r4, #0
 800dc24:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dc26:	1c72      	adds	r2, r6, #1
 800dc28:	9219      	str	r2, [sp, #100]	; 0x64
 800dc2a:	7872      	ldrb	r2, [r6, #1]
 800dc2c:	2a2b      	cmp	r2, #43	; 0x2b
 800dc2e:	d079      	beq.n	800dd24 <_strtod_l+0x27c>
 800dc30:	2a2d      	cmp	r2, #45	; 0x2d
 800dc32:	f000 8083 	beq.w	800dd3c <_strtod_l+0x294>
 800dc36:	2700      	movs	r7, #0
 800dc38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dc3c:	2909      	cmp	r1, #9
 800dc3e:	f240 8083 	bls.w	800dd48 <_strtod_l+0x2a0>
 800dc42:	9619      	str	r6, [sp, #100]	; 0x64
 800dc44:	2500      	movs	r5, #0
 800dc46:	e09f      	b.n	800dd88 <_strtod_l+0x2e0>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	e7c8      	b.n	800dbde <_strtod_l+0x136>
 800dc4c:	f1bb 0f08 	cmp.w	fp, #8
 800dc50:	bfd5      	itete	le
 800dc52:	9906      	ldrle	r1, [sp, #24]
 800dc54:	9905      	ldrgt	r1, [sp, #20]
 800dc56:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc5a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc5e:	f100 0001 	add.w	r0, r0, #1
 800dc62:	bfd4      	ite	le
 800dc64:	9306      	strle	r3, [sp, #24]
 800dc66:	9305      	strgt	r3, [sp, #20]
 800dc68:	f10b 0b01 	add.w	fp, fp, #1
 800dc6c:	9019      	str	r0, [sp, #100]	; 0x64
 800dc6e:	e7be      	b.n	800dbee <_strtod_l+0x146>
 800dc70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc72:	191a      	adds	r2, r3, r4
 800dc74:	9219      	str	r2, [sp, #100]	; 0x64
 800dc76:	5d1a      	ldrb	r2, [r3, r4]
 800dc78:	f1bb 0f00 	cmp.w	fp, #0
 800dc7c:	d036      	beq.n	800dcec <_strtod_l+0x244>
 800dc7e:	465c      	mov	r4, fp
 800dc80:	9004      	str	r0, [sp, #16]
 800dc82:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dc86:	2b09      	cmp	r3, #9
 800dc88:	d912      	bls.n	800dcb0 <_strtod_l+0x208>
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e7c1      	b.n	800dc12 <_strtod_l+0x16a>
 800dc8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc90:	3001      	adds	r0, #1
 800dc92:	1c5a      	adds	r2, r3, #1
 800dc94:	9219      	str	r2, [sp, #100]	; 0x64
 800dc96:	785a      	ldrb	r2, [r3, #1]
 800dc98:	2a30      	cmp	r2, #48	; 0x30
 800dc9a:	d0f8      	beq.n	800dc8e <_strtod_l+0x1e6>
 800dc9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dca0:	2b08      	cmp	r3, #8
 800dca2:	f200 84d5 	bhi.w	800e650 <_strtod_l+0xba8>
 800dca6:	9004      	str	r0, [sp, #16]
 800dca8:	2000      	movs	r0, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcae:	9308      	str	r3, [sp, #32]
 800dcb0:	3a30      	subs	r2, #48	; 0x30
 800dcb2:	f100 0301 	add.w	r3, r0, #1
 800dcb6:	d013      	beq.n	800dce0 <_strtod_l+0x238>
 800dcb8:	9904      	ldr	r1, [sp, #16]
 800dcba:	1905      	adds	r5, r0, r4
 800dcbc:	4419      	add	r1, r3
 800dcbe:	9104      	str	r1, [sp, #16]
 800dcc0:	4623      	mov	r3, r4
 800dcc2:	210a      	movs	r1, #10
 800dcc4:	42ab      	cmp	r3, r5
 800dcc6:	d113      	bne.n	800dcf0 <_strtod_l+0x248>
 800dcc8:	1823      	adds	r3, r4, r0
 800dcca:	2b08      	cmp	r3, #8
 800dccc:	f104 0401 	add.w	r4, r4, #1
 800dcd0:	4404      	add	r4, r0
 800dcd2:	dc1b      	bgt.n	800dd0c <_strtod_l+0x264>
 800dcd4:	230a      	movs	r3, #10
 800dcd6:	9906      	ldr	r1, [sp, #24]
 800dcd8:	fb03 2301 	mla	r3, r3, r1, r2
 800dcdc:	9306      	str	r3, [sp, #24]
 800dcde:	2300      	movs	r3, #0
 800dce0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dce2:	4618      	mov	r0, r3
 800dce4:	1c51      	adds	r1, r2, #1
 800dce6:	9119      	str	r1, [sp, #100]	; 0x64
 800dce8:	7852      	ldrb	r2, [r2, #1]
 800dcea:	e7ca      	b.n	800dc82 <_strtod_l+0x1da>
 800dcec:	4658      	mov	r0, fp
 800dcee:	e7d3      	b.n	800dc98 <_strtod_l+0x1f0>
 800dcf0:	2b08      	cmp	r3, #8
 800dcf2:	dc04      	bgt.n	800dcfe <_strtod_l+0x256>
 800dcf4:	9f06      	ldr	r7, [sp, #24]
 800dcf6:	434f      	muls	r7, r1
 800dcf8:	9706      	str	r7, [sp, #24]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	e7e2      	b.n	800dcc4 <_strtod_l+0x21c>
 800dcfe:	1c5f      	adds	r7, r3, #1
 800dd00:	2f10      	cmp	r7, #16
 800dd02:	bfde      	ittt	le
 800dd04:	9f05      	ldrle	r7, [sp, #20]
 800dd06:	434f      	mulle	r7, r1
 800dd08:	9705      	strle	r7, [sp, #20]
 800dd0a:	e7f6      	b.n	800dcfa <_strtod_l+0x252>
 800dd0c:	2c10      	cmp	r4, #16
 800dd0e:	bfdf      	itttt	le
 800dd10:	230a      	movle	r3, #10
 800dd12:	9905      	ldrle	r1, [sp, #20]
 800dd14:	fb03 2301 	mlale	r3, r3, r1, r2
 800dd18:	9305      	strle	r3, [sp, #20]
 800dd1a:	e7e0      	b.n	800dcde <_strtod_l+0x236>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	9304      	str	r3, [sp, #16]
 800dd20:	2301      	movs	r3, #1
 800dd22:	e77b      	b.n	800dc1c <_strtod_l+0x174>
 800dd24:	2700      	movs	r7, #0
 800dd26:	1cb2      	adds	r2, r6, #2
 800dd28:	9219      	str	r2, [sp, #100]	; 0x64
 800dd2a:	78b2      	ldrb	r2, [r6, #2]
 800dd2c:	e784      	b.n	800dc38 <_strtod_l+0x190>
 800dd2e:	bf00      	nop
 800dd30:	080119b8 	.word	0x080119b8
 800dd34:	0801186c 	.word	0x0801186c
 800dd38:	7ff00000 	.word	0x7ff00000
 800dd3c:	2701      	movs	r7, #1
 800dd3e:	e7f2      	b.n	800dd26 <_strtod_l+0x27e>
 800dd40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd42:	1c51      	adds	r1, r2, #1
 800dd44:	9119      	str	r1, [sp, #100]	; 0x64
 800dd46:	7852      	ldrb	r2, [r2, #1]
 800dd48:	2a30      	cmp	r2, #48	; 0x30
 800dd4a:	d0f9      	beq.n	800dd40 <_strtod_l+0x298>
 800dd4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dd50:	2908      	cmp	r1, #8
 800dd52:	f63f af77 	bhi.w	800dc44 <_strtod_l+0x19c>
 800dd56:	f04f 0e0a 	mov.w	lr, #10
 800dd5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dd5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd60:	9209      	str	r2, [sp, #36]	; 0x24
 800dd62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd64:	1c51      	adds	r1, r2, #1
 800dd66:	9119      	str	r1, [sp, #100]	; 0x64
 800dd68:	7852      	ldrb	r2, [r2, #1]
 800dd6a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800dd6e:	2d09      	cmp	r5, #9
 800dd70:	d935      	bls.n	800ddde <_strtod_l+0x336>
 800dd72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd74:	1b49      	subs	r1, r1, r5
 800dd76:	2908      	cmp	r1, #8
 800dd78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800dd7c:	dc02      	bgt.n	800dd84 <_strtod_l+0x2dc>
 800dd7e:	4565      	cmp	r5, ip
 800dd80:	bfa8      	it	ge
 800dd82:	4665      	movge	r5, ip
 800dd84:	b107      	cbz	r7, 800dd88 <_strtod_l+0x2e0>
 800dd86:	426d      	negs	r5, r5
 800dd88:	2c00      	cmp	r4, #0
 800dd8a:	d14c      	bne.n	800de26 <_strtod_l+0x37e>
 800dd8c:	9907      	ldr	r1, [sp, #28]
 800dd8e:	4301      	orrs	r1, r0
 800dd90:	f47f aecb 	bne.w	800db2a <_strtod_l+0x82>
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f47f aee4 	bne.w	800db62 <_strtod_l+0xba>
 800dd9a:	2a69      	cmp	r2, #105	; 0x69
 800dd9c:	d026      	beq.n	800ddec <_strtod_l+0x344>
 800dd9e:	dc23      	bgt.n	800dde8 <_strtod_l+0x340>
 800dda0:	2a49      	cmp	r2, #73	; 0x49
 800dda2:	d023      	beq.n	800ddec <_strtod_l+0x344>
 800dda4:	2a4e      	cmp	r2, #78	; 0x4e
 800dda6:	f47f aedc 	bne.w	800db62 <_strtod_l+0xba>
 800ddaa:	499d      	ldr	r1, [pc, #628]	; (800e020 <_strtod_l+0x578>)
 800ddac:	a819      	add	r0, sp, #100	; 0x64
 800ddae:	f001 fd9f 	bl	800f8f0 <__match>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	f43f aed5 	beq.w	800db62 <_strtod_l+0xba>
 800ddb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b28      	cmp	r3, #40	; 0x28
 800ddbe:	d12c      	bne.n	800de1a <_strtod_l+0x372>
 800ddc0:	4998      	ldr	r1, [pc, #608]	; (800e024 <_strtod_l+0x57c>)
 800ddc2:	aa1c      	add	r2, sp, #112	; 0x70
 800ddc4:	a819      	add	r0, sp, #100	; 0x64
 800ddc6:	f001 fda7 	bl	800f918 <__hexnan>
 800ddca:	2805      	cmp	r0, #5
 800ddcc:	d125      	bne.n	800de1a <_strtod_l+0x372>
 800ddce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddd0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ddd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ddd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dddc:	e6a5      	b.n	800db2a <_strtod_l+0x82>
 800ddde:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800dde2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800dde6:	e7bc      	b.n	800dd62 <_strtod_l+0x2ba>
 800dde8:	2a6e      	cmp	r2, #110	; 0x6e
 800ddea:	e7dc      	b.n	800dda6 <_strtod_l+0x2fe>
 800ddec:	498e      	ldr	r1, [pc, #568]	; (800e028 <_strtod_l+0x580>)
 800ddee:	a819      	add	r0, sp, #100	; 0x64
 800ddf0:	f001 fd7e 	bl	800f8f0 <__match>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	f43f aeb4 	beq.w	800db62 <_strtod_l+0xba>
 800ddfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddfc:	498b      	ldr	r1, [pc, #556]	; (800e02c <_strtod_l+0x584>)
 800ddfe:	3b01      	subs	r3, #1
 800de00:	a819      	add	r0, sp, #100	; 0x64
 800de02:	9319      	str	r3, [sp, #100]	; 0x64
 800de04:	f001 fd74 	bl	800f8f0 <__match>
 800de08:	b910      	cbnz	r0, 800de10 <_strtod_l+0x368>
 800de0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de0c:	3301      	adds	r3, #1
 800de0e:	9319      	str	r3, [sp, #100]	; 0x64
 800de10:	f04f 0800 	mov.w	r8, #0
 800de14:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800e030 <_strtod_l+0x588>
 800de18:	e687      	b.n	800db2a <_strtod_l+0x82>
 800de1a:	4886      	ldr	r0, [pc, #536]	; (800e034 <_strtod_l+0x58c>)
 800de1c:	f002 fd56 	bl	80108cc <nan>
 800de20:	4680      	mov	r8, r0
 800de22:	4689      	mov	r9, r1
 800de24:	e681      	b.n	800db2a <_strtod_l+0x82>
 800de26:	9b04      	ldr	r3, [sp, #16]
 800de28:	f1bb 0f00 	cmp.w	fp, #0
 800de2c:	bf08      	it	eq
 800de2e:	46a3      	moveq	fp, r4
 800de30:	1aeb      	subs	r3, r5, r3
 800de32:	2c10      	cmp	r4, #16
 800de34:	9806      	ldr	r0, [sp, #24]
 800de36:	4626      	mov	r6, r4
 800de38:	9307      	str	r3, [sp, #28]
 800de3a:	bfa8      	it	ge
 800de3c:	2610      	movge	r6, #16
 800de3e:	f7f2 fae9 	bl	8000414 <__aeabi_ui2d>
 800de42:	2c09      	cmp	r4, #9
 800de44:	4680      	mov	r8, r0
 800de46:	4689      	mov	r9, r1
 800de48:	dd13      	ble.n	800de72 <_strtod_l+0x3ca>
 800de4a:	4b7b      	ldr	r3, [pc, #492]	; (800e038 <_strtod_l+0x590>)
 800de4c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de50:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800de54:	f7f2 fb58 	bl	8000508 <__aeabi_dmul>
 800de58:	4680      	mov	r8, r0
 800de5a:	9805      	ldr	r0, [sp, #20]
 800de5c:	4689      	mov	r9, r1
 800de5e:	f7f2 fad9 	bl	8000414 <__aeabi_ui2d>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	4640      	mov	r0, r8
 800de68:	4649      	mov	r1, r9
 800de6a:	f7f2 f997 	bl	800019c <__adddf3>
 800de6e:	4680      	mov	r8, r0
 800de70:	4689      	mov	r9, r1
 800de72:	2c0f      	cmp	r4, #15
 800de74:	dc36      	bgt.n	800dee4 <_strtod_l+0x43c>
 800de76:	9b07      	ldr	r3, [sp, #28]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f43f ae56 	beq.w	800db2a <_strtod_l+0x82>
 800de7e:	dd22      	ble.n	800dec6 <_strtod_l+0x41e>
 800de80:	2b16      	cmp	r3, #22
 800de82:	dc09      	bgt.n	800de98 <_strtod_l+0x3f0>
 800de84:	496c      	ldr	r1, [pc, #432]	; (800e038 <_strtod_l+0x590>)
 800de86:	4642      	mov	r2, r8
 800de88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de8c:	464b      	mov	r3, r9
 800de8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de92:	f7f2 fb39 	bl	8000508 <__aeabi_dmul>
 800de96:	e7c3      	b.n	800de20 <_strtod_l+0x378>
 800de98:	9a07      	ldr	r2, [sp, #28]
 800de9a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800de9e:	4293      	cmp	r3, r2
 800dea0:	db20      	blt.n	800dee4 <_strtod_l+0x43c>
 800dea2:	4d65      	ldr	r5, [pc, #404]	; (800e038 <_strtod_l+0x590>)
 800dea4:	f1c4 040f 	rsb	r4, r4, #15
 800dea8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800deac:	4642      	mov	r2, r8
 800deae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deb2:	464b      	mov	r3, r9
 800deb4:	f7f2 fb28 	bl	8000508 <__aeabi_dmul>
 800deb8:	9b07      	ldr	r3, [sp, #28]
 800deba:	1b1c      	subs	r4, r3, r4
 800debc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dec4:	e7e5      	b.n	800de92 <_strtod_l+0x3ea>
 800dec6:	9b07      	ldr	r3, [sp, #28]
 800dec8:	3316      	adds	r3, #22
 800deca:	db0b      	blt.n	800dee4 <_strtod_l+0x43c>
 800decc:	9b04      	ldr	r3, [sp, #16]
 800dece:	4640      	mov	r0, r8
 800ded0:	1b5d      	subs	r5, r3, r5
 800ded2:	4b59      	ldr	r3, [pc, #356]	; (800e038 <_strtod_l+0x590>)
 800ded4:	4649      	mov	r1, r9
 800ded6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800deda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dede:	f7f2 fc3d 	bl	800075c <__aeabi_ddiv>
 800dee2:	e79d      	b.n	800de20 <_strtod_l+0x378>
 800dee4:	9b07      	ldr	r3, [sp, #28]
 800dee6:	1ba6      	subs	r6, r4, r6
 800dee8:	441e      	add	r6, r3
 800deea:	2e00      	cmp	r6, #0
 800deec:	dd74      	ble.n	800dfd8 <_strtod_l+0x530>
 800deee:	f016 030f 	ands.w	r3, r6, #15
 800def2:	d00a      	beq.n	800df0a <_strtod_l+0x462>
 800def4:	4950      	ldr	r1, [pc, #320]	; (800e038 <_strtod_l+0x590>)
 800def6:	4642      	mov	r2, r8
 800def8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800defc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df00:	464b      	mov	r3, r9
 800df02:	f7f2 fb01 	bl	8000508 <__aeabi_dmul>
 800df06:	4680      	mov	r8, r0
 800df08:	4689      	mov	r9, r1
 800df0a:	f036 060f 	bics.w	r6, r6, #15
 800df0e:	d052      	beq.n	800dfb6 <_strtod_l+0x50e>
 800df10:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800df14:	dd27      	ble.n	800df66 <_strtod_l+0x4be>
 800df16:	f04f 0b00 	mov.w	fp, #0
 800df1a:	f8cd b010 	str.w	fp, [sp, #16]
 800df1e:	f8cd b020 	str.w	fp, [sp, #32]
 800df22:	f8cd b018 	str.w	fp, [sp, #24]
 800df26:	2322      	movs	r3, #34	; 0x22
 800df28:	f04f 0800 	mov.w	r8, #0
 800df2c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800e030 <_strtod_l+0x588>
 800df30:	f8ca 3000 	str.w	r3, [sl]
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f43f adf7 	beq.w	800db2a <_strtod_l+0x82>
 800df3c:	4650      	mov	r0, sl
 800df3e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800df40:	f001 fe00 	bl	800fb44 <_Bfree>
 800df44:	4650      	mov	r0, sl
 800df46:	9906      	ldr	r1, [sp, #24]
 800df48:	f001 fdfc 	bl	800fb44 <_Bfree>
 800df4c:	4650      	mov	r0, sl
 800df4e:	9904      	ldr	r1, [sp, #16]
 800df50:	f001 fdf8 	bl	800fb44 <_Bfree>
 800df54:	4650      	mov	r0, sl
 800df56:	9908      	ldr	r1, [sp, #32]
 800df58:	f001 fdf4 	bl	800fb44 <_Bfree>
 800df5c:	4659      	mov	r1, fp
 800df5e:	4650      	mov	r0, sl
 800df60:	f001 fdf0 	bl	800fb44 <_Bfree>
 800df64:	e5e1      	b.n	800db2a <_strtod_l+0x82>
 800df66:	4b35      	ldr	r3, [pc, #212]	; (800e03c <_strtod_l+0x594>)
 800df68:	4640      	mov	r0, r8
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	2300      	movs	r3, #0
 800df6e:	4649      	mov	r1, r9
 800df70:	461f      	mov	r7, r3
 800df72:	1136      	asrs	r6, r6, #4
 800df74:	2e01      	cmp	r6, #1
 800df76:	dc21      	bgt.n	800dfbc <_strtod_l+0x514>
 800df78:	b10b      	cbz	r3, 800df7e <_strtod_l+0x4d6>
 800df7a:	4680      	mov	r8, r0
 800df7c:	4689      	mov	r9, r1
 800df7e:	4b2f      	ldr	r3, [pc, #188]	; (800e03c <_strtod_l+0x594>)
 800df80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800df84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800df88:	4642      	mov	r2, r8
 800df8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df8e:	464b      	mov	r3, r9
 800df90:	f7f2 faba 	bl	8000508 <__aeabi_dmul>
 800df94:	4b26      	ldr	r3, [pc, #152]	; (800e030 <_strtod_l+0x588>)
 800df96:	460a      	mov	r2, r1
 800df98:	400b      	ands	r3, r1
 800df9a:	4929      	ldr	r1, [pc, #164]	; (800e040 <_strtod_l+0x598>)
 800df9c:	4680      	mov	r8, r0
 800df9e:	428b      	cmp	r3, r1
 800dfa0:	d8b9      	bhi.n	800df16 <_strtod_l+0x46e>
 800dfa2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dfa6:	428b      	cmp	r3, r1
 800dfa8:	bf86      	itte	hi
 800dfaa:	f04f 38ff 	movhi.w	r8, #4294967295
 800dfae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800e044 <_strtod_l+0x59c>
 800dfb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	9305      	str	r3, [sp, #20]
 800dfba:	e07f      	b.n	800e0bc <_strtod_l+0x614>
 800dfbc:	07f2      	lsls	r2, r6, #31
 800dfbe:	d505      	bpl.n	800dfcc <_strtod_l+0x524>
 800dfc0:	9b05      	ldr	r3, [sp, #20]
 800dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc6:	f7f2 fa9f 	bl	8000508 <__aeabi_dmul>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	9a05      	ldr	r2, [sp, #20]
 800dfce:	3701      	adds	r7, #1
 800dfd0:	3208      	adds	r2, #8
 800dfd2:	1076      	asrs	r6, r6, #1
 800dfd4:	9205      	str	r2, [sp, #20]
 800dfd6:	e7cd      	b.n	800df74 <_strtod_l+0x4cc>
 800dfd8:	d0ed      	beq.n	800dfb6 <_strtod_l+0x50e>
 800dfda:	4276      	negs	r6, r6
 800dfdc:	f016 020f 	ands.w	r2, r6, #15
 800dfe0:	d00a      	beq.n	800dff8 <_strtod_l+0x550>
 800dfe2:	4b15      	ldr	r3, [pc, #84]	; (800e038 <_strtod_l+0x590>)
 800dfe4:	4640      	mov	r0, r8
 800dfe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfea:	4649      	mov	r1, r9
 800dfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff0:	f7f2 fbb4 	bl	800075c <__aeabi_ddiv>
 800dff4:	4680      	mov	r8, r0
 800dff6:	4689      	mov	r9, r1
 800dff8:	1136      	asrs	r6, r6, #4
 800dffa:	d0dc      	beq.n	800dfb6 <_strtod_l+0x50e>
 800dffc:	2e1f      	cmp	r6, #31
 800dffe:	dd23      	ble.n	800e048 <_strtod_l+0x5a0>
 800e000:	f04f 0b00 	mov.w	fp, #0
 800e004:	f8cd b010 	str.w	fp, [sp, #16]
 800e008:	f8cd b020 	str.w	fp, [sp, #32]
 800e00c:	f8cd b018 	str.w	fp, [sp, #24]
 800e010:	2322      	movs	r3, #34	; 0x22
 800e012:	f04f 0800 	mov.w	r8, #0
 800e016:	f04f 0900 	mov.w	r9, #0
 800e01a:	f8ca 3000 	str.w	r3, [sl]
 800e01e:	e789      	b.n	800df34 <_strtod_l+0x48c>
 800e020:	08011845 	.word	0x08011845
 800e024:	08011880 	.word	0x08011880
 800e028:	0801183d 	.word	0x0801183d
 800e02c:	080118c3 	.word	0x080118c3
 800e030:	7ff00000 	.word	0x7ff00000
 800e034:	08011b70 	.word	0x08011b70
 800e038:	08011a50 	.word	0x08011a50
 800e03c:	08011a28 	.word	0x08011a28
 800e040:	7ca00000 	.word	0x7ca00000
 800e044:	7fefffff 	.word	0x7fefffff
 800e048:	f016 0310 	ands.w	r3, r6, #16
 800e04c:	bf18      	it	ne
 800e04e:	236a      	movne	r3, #106	; 0x6a
 800e050:	4640      	mov	r0, r8
 800e052:	9305      	str	r3, [sp, #20]
 800e054:	4649      	mov	r1, r9
 800e056:	2300      	movs	r3, #0
 800e058:	4fb0      	ldr	r7, [pc, #704]	; (800e31c <_strtod_l+0x874>)
 800e05a:	07f2      	lsls	r2, r6, #31
 800e05c:	d504      	bpl.n	800e068 <_strtod_l+0x5c0>
 800e05e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e062:	f7f2 fa51 	bl	8000508 <__aeabi_dmul>
 800e066:	2301      	movs	r3, #1
 800e068:	1076      	asrs	r6, r6, #1
 800e06a:	f107 0708 	add.w	r7, r7, #8
 800e06e:	d1f4      	bne.n	800e05a <_strtod_l+0x5b2>
 800e070:	b10b      	cbz	r3, 800e076 <_strtod_l+0x5ce>
 800e072:	4680      	mov	r8, r0
 800e074:	4689      	mov	r9, r1
 800e076:	9b05      	ldr	r3, [sp, #20]
 800e078:	b1c3      	cbz	r3, 800e0ac <_strtod_l+0x604>
 800e07a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e07e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e082:	2b00      	cmp	r3, #0
 800e084:	4649      	mov	r1, r9
 800e086:	dd11      	ble.n	800e0ac <_strtod_l+0x604>
 800e088:	2b1f      	cmp	r3, #31
 800e08a:	f340 8127 	ble.w	800e2dc <_strtod_l+0x834>
 800e08e:	2b34      	cmp	r3, #52	; 0x34
 800e090:	bfd8      	it	le
 800e092:	f04f 33ff 	movle.w	r3, #4294967295
 800e096:	f04f 0800 	mov.w	r8, #0
 800e09a:	bfcf      	iteee	gt
 800e09c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e0a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e0a4:	fa03 f202 	lslle.w	r2, r3, r2
 800e0a8:	ea02 0901 	andle.w	r9, r2, r1
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	4649      	mov	r1, r9
 800e0b4:	f7f2 fc90 	bl	80009d8 <__aeabi_dcmpeq>
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d1a1      	bne.n	800e000 <_strtod_l+0x558>
 800e0bc:	9b06      	ldr	r3, [sp, #24]
 800e0be:	465a      	mov	r2, fp
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	4650      	mov	r0, sl
 800e0c4:	4623      	mov	r3, r4
 800e0c6:	9908      	ldr	r1, [sp, #32]
 800e0c8:	f001 fda4 	bl	800fc14 <__s2b>
 800e0cc:	9008      	str	r0, [sp, #32]
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	f43f af21 	beq.w	800df16 <_strtod_l+0x46e>
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	f04f 0b00 	mov.w	fp, #0
 800e0da:	1b5d      	subs	r5, r3, r5
 800e0dc:	9b07      	ldr	r3, [sp, #28]
 800e0de:	f8cd b010 	str.w	fp, [sp, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bfb4      	ite	lt
 800e0e6:	462b      	movlt	r3, r5
 800e0e8:	2300      	movge	r3, #0
 800e0ea:	930e      	str	r3, [sp, #56]	; 0x38
 800e0ec:	9b07      	ldr	r3, [sp, #28]
 800e0ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e0f2:	9314      	str	r3, [sp, #80]	; 0x50
 800e0f4:	9b08      	ldr	r3, [sp, #32]
 800e0f6:	4650      	mov	r0, sl
 800e0f8:	6859      	ldr	r1, [r3, #4]
 800e0fa:	f001 fce3 	bl	800fac4 <_Balloc>
 800e0fe:	9006      	str	r0, [sp, #24]
 800e100:	2800      	cmp	r0, #0
 800e102:	f43f af10 	beq.w	800df26 <_strtod_l+0x47e>
 800e106:	9b08      	ldr	r3, [sp, #32]
 800e108:	300c      	adds	r0, #12
 800e10a:	691a      	ldr	r2, [r3, #16]
 800e10c:	f103 010c 	add.w	r1, r3, #12
 800e110:	3202      	adds	r2, #2
 800e112:	0092      	lsls	r2, r2, #2
 800e114:	f001 fcc8 	bl	800faa8 <memcpy>
 800e118:	ab1c      	add	r3, sp, #112	; 0x70
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	ab1b      	add	r3, sp, #108	; 0x6c
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	4642      	mov	r2, r8
 800e122:	464b      	mov	r3, r9
 800e124:	4650      	mov	r0, sl
 800e126:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800e12a:	f002 f8b5 	bl	8010298 <__d2b>
 800e12e:	901a      	str	r0, [sp, #104]	; 0x68
 800e130:	2800      	cmp	r0, #0
 800e132:	f43f aef8 	beq.w	800df26 <_strtod_l+0x47e>
 800e136:	2101      	movs	r1, #1
 800e138:	4650      	mov	r0, sl
 800e13a:	f001 fe03 	bl	800fd44 <__i2b>
 800e13e:	4603      	mov	r3, r0
 800e140:	9004      	str	r0, [sp, #16]
 800e142:	2800      	cmp	r0, #0
 800e144:	f43f aeef 	beq.w	800df26 <_strtod_l+0x47e>
 800e148:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e14a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e14c:	2d00      	cmp	r5, #0
 800e14e:	bfab      	itete	ge
 800e150:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e152:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800e154:	18ee      	addge	r6, r5, r3
 800e156:	1b5c      	sublt	r4, r3, r5
 800e158:	9b05      	ldr	r3, [sp, #20]
 800e15a:	bfa8      	it	ge
 800e15c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800e15e:	eba5 0503 	sub.w	r5, r5, r3
 800e162:	4415      	add	r5, r2
 800e164:	4b6e      	ldr	r3, [pc, #440]	; (800e320 <_strtod_l+0x878>)
 800e166:	f105 35ff 	add.w	r5, r5, #4294967295
 800e16a:	bfb8      	it	lt
 800e16c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800e16e:	429d      	cmp	r5, r3
 800e170:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e174:	f280 80c4 	bge.w	800e300 <_strtod_l+0x858>
 800e178:	1b5b      	subs	r3, r3, r5
 800e17a:	2b1f      	cmp	r3, #31
 800e17c:	f04f 0701 	mov.w	r7, #1
 800e180:	eba2 0203 	sub.w	r2, r2, r3
 800e184:	f300 80b1 	bgt.w	800e2ea <_strtod_l+0x842>
 800e188:	2500      	movs	r5, #0
 800e18a:	fa07 f303 	lsl.w	r3, r7, r3
 800e18e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e190:	18b7      	adds	r7, r6, r2
 800e192:	9b05      	ldr	r3, [sp, #20]
 800e194:	42be      	cmp	r6, r7
 800e196:	4414      	add	r4, r2
 800e198:	441c      	add	r4, r3
 800e19a:	4633      	mov	r3, r6
 800e19c:	bfa8      	it	ge
 800e19e:	463b      	movge	r3, r7
 800e1a0:	42a3      	cmp	r3, r4
 800e1a2:	bfa8      	it	ge
 800e1a4:	4623      	movge	r3, r4
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	bfc2      	ittt	gt
 800e1aa:	1aff      	subgt	r7, r7, r3
 800e1ac:	1ae4      	subgt	r4, r4, r3
 800e1ae:	1af6      	subgt	r6, r6, r3
 800e1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	dd17      	ble.n	800e1e6 <_strtod_l+0x73e>
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	9904      	ldr	r1, [sp, #16]
 800e1bc:	f001 fe80 	bl	800fec0 <__pow5mult>
 800e1c0:	9004      	str	r0, [sp, #16]
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	f43f aeaf 	beq.w	800df26 <_strtod_l+0x47e>
 800e1c8:	4601      	mov	r1, r0
 800e1ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e1cc:	4650      	mov	r0, sl
 800e1ce:	f001 fdcf 	bl	800fd70 <__multiply>
 800e1d2:	9009      	str	r0, [sp, #36]	; 0x24
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	f43f aea6 	beq.w	800df26 <_strtod_l+0x47e>
 800e1da:	4650      	mov	r0, sl
 800e1dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e1de:	f001 fcb1 	bl	800fb44 <_Bfree>
 800e1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e4:	931a      	str	r3, [sp, #104]	; 0x68
 800e1e6:	2f00      	cmp	r7, #0
 800e1e8:	f300 808e 	bgt.w	800e308 <_strtod_l+0x860>
 800e1ec:	9b07      	ldr	r3, [sp, #28]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd08      	ble.n	800e204 <_strtod_l+0x75c>
 800e1f2:	4650      	mov	r0, sl
 800e1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e1f6:	9906      	ldr	r1, [sp, #24]
 800e1f8:	f001 fe62 	bl	800fec0 <__pow5mult>
 800e1fc:	9006      	str	r0, [sp, #24]
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f43f ae91 	beq.w	800df26 <_strtod_l+0x47e>
 800e204:	2c00      	cmp	r4, #0
 800e206:	dd08      	ble.n	800e21a <_strtod_l+0x772>
 800e208:	4622      	mov	r2, r4
 800e20a:	4650      	mov	r0, sl
 800e20c:	9906      	ldr	r1, [sp, #24]
 800e20e:	f001 feb1 	bl	800ff74 <__lshift>
 800e212:	9006      	str	r0, [sp, #24]
 800e214:	2800      	cmp	r0, #0
 800e216:	f43f ae86 	beq.w	800df26 <_strtod_l+0x47e>
 800e21a:	2e00      	cmp	r6, #0
 800e21c:	dd08      	ble.n	800e230 <_strtod_l+0x788>
 800e21e:	4632      	mov	r2, r6
 800e220:	4650      	mov	r0, sl
 800e222:	9904      	ldr	r1, [sp, #16]
 800e224:	f001 fea6 	bl	800ff74 <__lshift>
 800e228:	9004      	str	r0, [sp, #16]
 800e22a:	2800      	cmp	r0, #0
 800e22c:	f43f ae7b 	beq.w	800df26 <_strtod_l+0x47e>
 800e230:	4650      	mov	r0, sl
 800e232:	9a06      	ldr	r2, [sp, #24]
 800e234:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e236:	f001 ff29 	bl	801008c <__mdiff>
 800e23a:	4683      	mov	fp, r0
 800e23c:	2800      	cmp	r0, #0
 800e23e:	f43f ae72 	beq.w	800df26 <_strtod_l+0x47e>
 800e242:	2400      	movs	r4, #0
 800e244:	68c3      	ldr	r3, [r0, #12]
 800e246:	9904      	ldr	r1, [sp, #16]
 800e248:	60c4      	str	r4, [r0, #12]
 800e24a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e24c:	f001 ff02 	bl	8010054 <__mcmp>
 800e250:	42a0      	cmp	r0, r4
 800e252:	da6b      	bge.n	800e32c <_strtod_l+0x884>
 800e254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e256:	ea53 0308 	orrs.w	r3, r3, r8
 800e25a:	f040 8091 	bne.w	800e380 <_strtod_l+0x8d8>
 800e25e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e262:	2b00      	cmp	r3, #0
 800e264:	f040 808c 	bne.w	800e380 <_strtod_l+0x8d8>
 800e268:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e26c:	0d1b      	lsrs	r3, r3, #20
 800e26e:	051b      	lsls	r3, r3, #20
 800e270:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e274:	f240 8084 	bls.w	800e380 <_strtod_l+0x8d8>
 800e278:	f8db 3014 	ldr.w	r3, [fp, #20]
 800e27c:	b91b      	cbnz	r3, 800e286 <_strtod_l+0x7de>
 800e27e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e282:	2b01      	cmp	r3, #1
 800e284:	dd7c      	ble.n	800e380 <_strtod_l+0x8d8>
 800e286:	4659      	mov	r1, fp
 800e288:	2201      	movs	r2, #1
 800e28a:	4650      	mov	r0, sl
 800e28c:	f001 fe72 	bl	800ff74 <__lshift>
 800e290:	9904      	ldr	r1, [sp, #16]
 800e292:	4683      	mov	fp, r0
 800e294:	f001 fede 	bl	8010054 <__mcmp>
 800e298:	2800      	cmp	r0, #0
 800e29a:	dd71      	ble.n	800e380 <_strtod_l+0x8d8>
 800e29c:	9905      	ldr	r1, [sp, #20]
 800e29e:	464b      	mov	r3, r9
 800e2a0:	4a20      	ldr	r2, [pc, #128]	; (800e324 <_strtod_l+0x87c>)
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	f000 808c 	beq.w	800e3c0 <_strtod_l+0x918>
 800e2a8:	ea02 0109 	and.w	r1, r2, r9
 800e2ac:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e2b0:	f300 8086 	bgt.w	800e3c0 <_strtod_l+0x918>
 800e2b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e2b8:	f77f aeaa 	ble.w	800e010 <_strtod_l+0x568>
 800e2bc:	4640      	mov	r0, r8
 800e2be:	4649      	mov	r1, r9
 800e2c0:	4b19      	ldr	r3, [pc, #100]	; (800e328 <_strtod_l+0x880>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f7f2 f920 	bl	8000508 <__aeabi_dmul>
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4303      	orrs	r3, r0
 800e2cc:	bf08      	it	eq
 800e2ce:	2322      	moveq	r3, #34	; 0x22
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	4689      	mov	r9, r1
 800e2d4:	bf08      	it	eq
 800e2d6:	f8ca 3000 	streq.w	r3, [sl]
 800e2da:	e62f      	b.n	800df3c <_strtod_l+0x494>
 800e2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e4:	ea03 0808 	and.w	r8, r3, r8
 800e2e8:	e6e0      	b.n	800e0ac <_strtod_l+0x604>
 800e2ea:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800e2ee:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800e2f2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800e2f6:	35e2      	adds	r5, #226	; 0xe2
 800e2f8:	fa07 f505 	lsl.w	r5, r7, r5
 800e2fc:	970f      	str	r7, [sp, #60]	; 0x3c
 800e2fe:	e747      	b.n	800e190 <_strtod_l+0x6e8>
 800e300:	2301      	movs	r3, #1
 800e302:	2500      	movs	r5, #0
 800e304:	930f      	str	r3, [sp, #60]	; 0x3c
 800e306:	e743      	b.n	800e190 <_strtod_l+0x6e8>
 800e308:	463a      	mov	r2, r7
 800e30a:	4650      	mov	r0, sl
 800e30c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e30e:	f001 fe31 	bl	800ff74 <__lshift>
 800e312:	901a      	str	r0, [sp, #104]	; 0x68
 800e314:	2800      	cmp	r0, #0
 800e316:	f47f af69 	bne.w	800e1ec <_strtod_l+0x744>
 800e31a:	e604      	b.n	800df26 <_strtod_l+0x47e>
 800e31c:	08011898 	.word	0x08011898
 800e320:	fffffc02 	.word	0xfffffc02
 800e324:	7ff00000 	.word	0x7ff00000
 800e328:	39500000 	.word	0x39500000
 800e32c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e330:	d165      	bne.n	800e3fe <_strtod_l+0x956>
 800e332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e334:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e338:	b35a      	cbz	r2, 800e392 <_strtod_l+0x8ea>
 800e33a:	4a99      	ldr	r2, [pc, #612]	; (800e5a0 <_strtod_l+0xaf8>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d12b      	bne.n	800e398 <_strtod_l+0x8f0>
 800e340:	9b05      	ldr	r3, [sp, #20]
 800e342:	4641      	mov	r1, r8
 800e344:	b303      	cbz	r3, 800e388 <_strtod_l+0x8e0>
 800e346:	464a      	mov	r2, r9
 800e348:	4b96      	ldr	r3, [pc, #600]	; (800e5a4 <_strtod_l+0xafc>)
 800e34a:	4013      	ands	r3, r2
 800e34c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e350:	f04f 32ff 	mov.w	r2, #4294967295
 800e354:	d81b      	bhi.n	800e38e <_strtod_l+0x8e6>
 800e356:	0d1b      	lsrs	r3, r3, #20
 800e358:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e35c:	fa02 f303 	lsl.w	r3, r2, r3
 800e360:	4299      	cmp	r1, r3
 800e362:	d119      	bne.n	800e398 <_strtod_l+0x8f0>
 800e364:	4b90      	ldr	r3, [pc, #576]	; (800e5a8 <_strtod_l+0xb00>)
 800e366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e368:	429a      	cmp	r2, r3
 800e36a:	d102      	bne.n	800e372 <_strtod_l+0x8ca>
 800e36c:	3101      	adds	r1, #1
 800e36e:	f43f adda 	beq.w	800df26 <_strtod_l+0x47e>
 800e372:	f04f 0800 	mov.w	r8, #0
 800e376:	4b8b      	ldr	r3, [pc, #556]	; (800e5a4 <_strtod_l+0xafc>)
 800e378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e37a:	401a      	ands	r2, r3
 800e37c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800e380:	9b05      	ldr	r3, [sp, #20]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d19a      	bne.n	800e2bc <_strtod_l+0x814>
 800e386:	e5d9      	b.n	800df3c <_strtod_l+0x494>
 800e388:	f04f 33ff 	mov.w	r3, #4294967295
 800e38c:	e7e8      	b.n	800e360 <_strtod_l+0x8b8>
 800e38e:	4613      	mov	r3, r2
 800e390:	e7e6      	b.n	800e360 <_strtod_l+0x8b8>
 800e392:	ea53 0308 	orrs.w	r3, r3, r8
 800e396:	d081      	beq.n	800e29c <_strtod_l+0x7f4>
 800e398:	b1e5      	cbz	r5, 800e3d4 <_strtod_l+0x92c>
 800e39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e39c:	421d      	tst	r5, r3
 800e39e:	d0ef      	beq.n	800e380 <_strtod_l+0x8d8>
 800e3a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	4649      	mov	r1, r9
 800e3a6:	9a05      	ldr	r2, [sp, #20]
 800e3a8:	b1c3      	cbz	r3, 800e3dc <_strtod_l+0x934>
 800e3aa:	f7ff fb59 	bl	800da60 <sulp>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e3b6:	f7f1 fef1 	bl	800019c <__adddf3>
 800e3ba:	4680      	mov	r8, r0
 800e3bc:	4689      	mov	r9, r1
 800e3be:	e7df      	b.n	800e380 <_strtod_l+0x8d8>
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e3c6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e3ca:	f04f 38ff 	mov.w	r8, #4294967295
 800e3ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e3d2:	e7d5      	b.n	800e380 <_strtod_l+0x8d8>
 800e3d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3d6:	ea13 0f08 	tst.w	r3, r8
 800e3da:	e7e0      	b.n	800e39e <_strtod_l+0x8f6>
 800e3dc:	f7ff fb40 	bl	800da60 <sulp>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e3e8:	f7f1 fed6 	bl	8000198 <__aeabi_dsub>
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	4680      	mov	r8, r0
 800e3f2:	4689      	mov	r9, r1
 800e3f4:	f7f2 faf0 	bl	80009d8 <__aeabi_dcmpeq>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d0c1      	beq.n	800e380 <_strtod_l+0x8d8>
 800e3fc:	e608      	b.n	800e010 <_strtod_l+0x568>
 800e3fe:	4658      	mov	r0, fp
 800e400:	9904      	ldr	r1, [sp, #16]
 800e402:	f001 ffa5 	bl	8010350 <__ratio>
 800e406:	2200      	movs	r2, #0
 800e408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e40c:	4606      	mov	r6, r0
 800e40e:	460f      	mov	r7, r1
 800e410:	f7f2 faf6 	bl	8000a00 <__aeabi_dcmple>
 800e414:	2800      	cmp	r0, #0
 800e416:	d070      	beq.n	800e4fa <_strtod_l+0xa52>
 800e418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d042      	beq.n	800e4a4 <_strtod_l+0x9fc>
 800e41e:	2600      	movs	r6, #0
 800e420:	4f62      	ldr	r7, [pc, #392]	; (800e5ac <_strtod_l+0xb04>)
 800e422:	4d62      	ldr	r5, [pc, #392]	; (800e5ac <_strtod_l+0xb04>)
 800e424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e42a:	0d1b      	lsrs	r3, r3, #20
 800e42c:	051b      	lsls	r3, r3, #20
 800e42e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e432:	4b5f      	ldr	r3, [pc, #380]	; (800e5b0 <_strtod_l+0xb08>)
 800e434:	429a      	cmp	r2, r3
 800e436:	f040 80c3 	bne.w	800e5c0 <_strtod_l+0xb18>
 800e43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43c:	4640      	mov	r0, r8
 800e43e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800e442:	4649      	mov	r1, r9
 800e444:	f001 feae 	bl	80101a4 <__ulp>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4630      	mov	r0, r6
 800e44e:	4639      	mov	r1, r7
 800e450:	f7f2 f85a 	bl	8000508 <__aeabi_dmul>
 800e454:	4642      	mov	r2, r8
 800e456:	464b      	mov	r3, r9
 800e458:	f7f1 fea0 	bl	800019c <__adddf3>
 800e45c:	460b      	mov	r3, r1
 800e45e:	4951      	ldr	r1, [pc, #324]	; (800e5a4 <_strtod_l+0xafc>)
 800e460:	4a54      	ldr	r2, [pc, #336]	; (800e5b4 <_strtod_l+0xb0c>)
 800e462:	4019      	ands	r1, r3
 800e464:	4291      	cmp	r1, r2
 800e466:	4680      	mov	r8, r0
 800e468:	d95d      	bls.n	800e526 <_strtod_l+0xa7e>
 800e46a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e46c:	4b4e      	ldr	r3, [pc, #312]	; (800e5a8 <_strtod_l+0xb00>)
 800e46e:	429a      	cmp	r2, r3
 800e470:	d103      	bne.n	800e47a <_strtod_l+0x9d2>
 800e472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e474:	3301      	adds	r3, #1
 800e476:	f43f ad56 	beq.w	800df26 <_strtod_l+0x47e>
 800e47a:	f04f 38ff 	mov.w	r8, #4294967295
 800e47e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800e5a8 <_strtod_l+0xb00>
 800e482:	4650      	mov	r0, sl
 800e484:	991a      	ldr	r1, [sp, #104]	; 0x68
 800e486:	f001 fb5d 	bl	800fb44 <_Bfree>
 800e48a:	4650      	mov	r0, sl
 800e48c:	9906      	ldr	r1, [sp, #24]
 800e48e:	f001 fb59 	bl	800fb44 <_Bfree>
 800e492:	4650      	mov	r0, sl
 800e494:	9904      	ldr	r1, [sp, #16]
 800e496:	f001 fb55 	bl	800fb44 <_Bfree>
 800e49a:	4659      	mov	r1, fp
 800e49c:	4650      	mov	r0, sl
 800e49e:	f001 fb51 	bl	800fb44 <_Bfree>
 800e4a2:	e627      	b.n	800e0f4 <_strtod_l+0x64c>
 800e4a4:	f1b8 0f00 	cmp.w	r8, #0
 800e4a8:	d119      	bne.n	800e4de <_strtod_l+0xa36>
 800e4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4b0:	b9e3      	cbnz	r3, 800e4ec <_strtod_l+0xa44>
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	4639      	mov	r1, r7
 800e4b8:	4b3c      	ldr	r3, [pc, #240]	; (800e5ac <_strtod_l+0xb04>)
 800e4ba:	f7f2 fa97 	bl	80009ec <__aeabi_dcmplt>
 800e4be:	b9c8      	cbnz	r0, 800e4f4 <_strtod_l+0xa4c>
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	4639      	mov	r1, r7
 800e4c6:	4b3c      	ldr	r3, [pc, #240]	; (800e5b8 <_strtod_l+0xb10>)
 800e4c8:	f7f2 f81e 	bl	8000508 <__aeabi_dmul>
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e4d4:	9416      	str	r4, [sp, #88]	; 0x58
 800e4d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800e4d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800e4dc:	e7a2      	b.n	800e424 <_strtod_l+0x97c>
 800e4de:	f1b8 0f01 	cmp.w	r8, #1
 800e4e2:	d103      	bne.n	800e4ec <_strtod_l+0xa44>
 800e4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f43f ad92 	beq.w	800e010 <_strtod_l+0x568>
 800e4ec:	2600      	movs	r6, #0
 800e4ee:	2400      	movs	r4, #0
 800e4f0:	4f32      	ldr	r7, [pc, #200]	; (800e5bc <_strtod_l+0xb14>)
 800e4f2:	e796      	b.n	800e422 <_strtod_l+0x97a>
 800e4f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e4f6:	4d30      	ldr	r5, [pc, #192]	; (800e5b8 <_strtod_l+0xb10>)
 800e4f8:	e7ea      	b.n	800e4d0 <_strtod_l+0xa28>
 800e4fa:	4b2f      	ldr	r3, [pc, #188]	; (800e5b8 <_strtod_l+0xb10>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4630      	mov	r0, r6
 800e500:	4639      	mov	r1, r7
 800e502:	f7f2 f801 	bl	8000508 <__aeabi_dmul>
 800e506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e508:	4604      	mov	r4, r0
 800e50a:	460d      	mov	r5, r1
 800e50c:	b933      	cbnz	r3, 800e51c <_strtod_l+0xa74>
 800e50e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e512:	9010      	str	r0, [sp, #64]	; 0x40
 800e514:	9311      	str	r3, [sp, #68]	; 0x44
 800e516:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e51a:	e783      	b.n	800e424 <_strtod_l+0x97c>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e524:	e7f7      	b.n	800e516 <_strtod_l+0xa6e>
 800e526:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e52a:	9b05      	ldr	r3, [sp, #20]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1a8      	bne.n	800e482 <_strtod_l+0x9da>
 800e530:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e536:	0d1b      	lsrs	r3, r3, #20
 800e538:	051b      	lsls	r3, r3, #20
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d1a1      	bne.n	800e482 <_strtod_l+0x9da>
 800e53e:	4620      	mov	r0, r4
 800e540:	4629      	mov	r1, r5
 800e542:	f7f2 fe5b 	bl	80011fc <__aeabi_d2lz>
 800e546:	f7f1 ffb1 	bl	80004ac <__aeabi_l2d>
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	4620      	mov	r0, r4
 800e550:	4629      	mov	r1, r5
 800e552:	f7f1 fe21 	bl	8000198 <__aeabi_dsub>
 800e556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e55c:	ea43 0308 	orr.w	r3, r3, r8
 800e560:	4313      	orrs	r3, r2
 800e562:	4604      	mov	r4, r0
 800e564:	460d      	mov	r5, r1
 800e566:	d066      	beq.n	800e636 <_strtod_l+0xb8e>
 800e568:	a309      	add	r3, pc, #36	; (adr r3, 800e590 <_strtod_l+0xae8>)
 800e56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56e:	f7f2 fa3d 	bl	80009ec <__aeabi_dcmplt>
 800e572:	2800      	cmp	r0, #0
 800e574:	f47f ace2 	bne.w	800df3c <_strtod_l+0x494>
 800e578:	a307      	add	r3, pc, #28	; (adr r3, 800e598 <_strtod_l+0xaf0>)
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57e:	4620      	mov	r0, r4
 800e580:	4629      	mov	r1, r5
 800e582:	f7f2 fa51 	bl	8000a28 <__aeabi_dcmpgt>
 800e586:	2800      	cmp	r0, #0
 800e588:	f43f af7b 	beq.w	800e482 <_strtod_l+0x9da>
 800e58c:	e4d6      	b.n	800df3c <_strtod_l+0x494>
 800e58e:	bf00      	nop
 800e590:	94a03595 	.word	0x94a03595
 800e594:	3fdfffff 	.word	0x3fdfffff
 800e598:	35afe535 	.word	0x35afe535
 800e59c:	3fe00000 	.word	0x3fe00000
 800e5a0:	000fffff 	.word	0x000fffff
 800e5a4:	7ff00000 	.word	0x7ff00000
 800e5a8:	7fefffff 	.word	0x7fefffff
 800e5ac:	3ff00000 	.word	0x3ff00000
 800e5b0:	7fe00000 	.word	0x7fe00000
 800e5b4:	7c9fffff 	.word	0x7c9fffff
 800e5b8:	3fe00000 	.word	0x3fe00000
 800e5bc:	bff00000 	.word	0xbff00000
 800e5c0:	9b05      	ldr	r3, [sp, #20]
 800e5c2:	b313      	cbz	r3, 800e60a <_strtod_l+0xb62>
 800e5c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5ca:	d81e      	bhi.n	800e60a <_strtod_l+0xb62>
 800e5cc:	a326      	add	r3, pc, #152	; (adr r3, 800e668 <_strtod_l+0xbc0>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	f7f2 fa13 	bl	8000a00 <__aeabi_dcmple>
 800e5da:	b190      	cbz	r0, 800e602 <_strtod_l+0xb5a>
 800e5dc:	4629      	mov	r1, r5
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f7f2 fa6a 	bl	8000ab8 <__aeabi_d2uiz>
 800e5e4:	2801      	cmp	r0, #1
 800e5e6:	bf38      	it	cc
 800e5e8:	2001      	movcc	r0, #1
 800e5ea:	f7f1 ff13 	bl	8000414 <__aeabi_ui2d>
 800e5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	460d      	mov	r5, r1
 800e5f4:	b9d3      	cbnz	r3, 800e62c <_strtod_l+0xb84>
 800e5f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5fa:	9012      	str	r0, [sp, #72]	; 0x48
 800e5fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e604:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e608:	1a9f      	subs	r7, r3, r2
 800e60a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e60e:	f001 fdc9 	bl	80101a4 <__ulp>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4630      	mov	r0, r6
 800e618:	4639      	mov	r1, r7
 800e61a:	f7f1 ff75 	bl	8000508 <__aeabi_dmul>
 800e61e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e622:	f7f1 fdbb 	bl	800019c <__adddf3>
 800e626:	4680      	mov	r8, r0
 800e628:	4689      	mov	r9, r1
 800e62a:	e77e      	b.n	800e52a <_strtod_l+0xa82>
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e634:	e7e3      	b.n	800e5fe <_strtod_l+0xb56>
 800e636:	a30e      	add	r3, pc, #56	; (adr r3, 800e670 <_strtod_l+0xbc8>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	f7f2 f9d6 	bl	80009ec <__aeabi_dcmplt>
 800e640:	e7a1      	b.n	800e586 <_strtod_l+0xade>
 800e642:	2300      	movs	r3, #0
 800e644:	930a      	str	r3, [sp, #40]	; 0x28
 800e646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e648:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	f7ff ba71 	b.w	800db32 <_strtod_l+0x8a>
 800e650:	2a65      	cmp	r2, #101	; 0x65
 800e652:	f43f ab63 	beq.w	800dd1c <_strtod_l+0x274>
 800e656:	2a45      	cmp	r2, #69	; 0x45
 800e658:	f43f ab60 	beq.w	800dd1c <_strtod_l+0x274>
 800e65c:	2301      	movs	r3, #1
 800e65e:	f7ff bb95 	b.w	800dd8c <_strtod_l+0x2e4>
 800e662:	bf00      	nop
 800e664:	f3af 8000 	nop.w
 800e668:	ffc00000 	.word	0xffc00000
 800e66c:	41dfffff 	.word	0x41dfffff
 800e670:	94a03595 	.word	0x94a03595
 800e674:	3fcfffff 	.word	0x3fcfffff

0800e678 <strtod>:
 800e678:	460a      	mov	r2, r1
 800e67a:	4601      	mov	r1, r0
 800e67c:	4802      	ldr	r0, [pc, #8]	; (800e688 <strtod+0x10>)
 800e67e:	4b03      	ldr	r3, [pc, #12]	; (800e68c <strtod+0x14>)
 800e680:	6800      	ldr	r0, [r0, #0]
 800e682:	f7ff ba11 	b.w	800daa8 <_strtod_l>
 800e686:	bf00      	nop
 800e688:	200001a0 	.word	0x200001a0
 800e68c:	20000208 	.word	0x20000208

0800e690 <quorem>:
 800e690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	6903      	ldr	r3, [r0, #16]
 800e696:	690c      	ldr	r4, [r1, #16]
 800e698:	4607      	mov	r7, r0
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	f2c0 8082 	blt.w	800e7a4 <quorem+0x114>
 800e6a0:	3c01      	subs	r4, #1
 800e6a2:	f100 0514 	add.w	r5, r0, #20
 800e6a6:	f101 0814 	add.w	r8, r1, #20
 800e6aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6ae:	9301      	str	r3, [sp, #4]
 800e6b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e6b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e6c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e6c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e6c8:	d331      	bcc.n	800e72e <quorem+0x9e>
 800e6ca:	f04f 0e00 	mov.w	lr, #0
 800e6ce:	4640      	mov	r0, r8
 800e6d0:	46ac      	mov	ip, r5
 800e6d2:	46f2      	mov	sl, lr
 800e6d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e6d8:	b293      	uxth	r3, r2
 800e6da:	fb06 e303 	mla	r3, r6, r3, lr
 800e6de:	0c12      	lsrs	r2, r2, #16
 800e6e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	fb06 e202 	mla	r2, r6, r2, lr
 800e6ea:	ebaa 0303 	sub.w	r3, sl, r3
 800e6ee:	f8dc a000 	ldr.w	sl, [ip]
 800e6f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6f6:	fa1f fa8a 	uxth.w	sl, sl
 800e6fa:	4453      	add	r3, sl
 800e6fc:	f8dc a000 	ldr.w	sl, [ip]
 800e700:	b292      	uxth	r2, r2
 800e702:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e710:	4581      	cmp	r9, r0
 800e712:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e716:	f84c 3b04 	str.w	r3, [ip], #4
 800e71a:	d2db      	bcs.n	800e6d4 <quorem+0x44>
 800e71c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e720:	b92b      	cbnz	r3, 800e72e <quorem+0x9e>
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	3b04      	subs	r3, #4
 800e726:	429d      	cmp	r5, r3
 800e728:	461a      	mov	r2, r3
 800e72a:	d32f      	bcc.n	800e78c <quorem+0xfc>
 800e72c:	613c      	str	r4, [r7, #16]
 800e72e:	4638      	mov	r0, r7
 800e730:	f001 fc90 	bl	8010054 <__mcmp>
 800e734:	2800      	cmp	r0, #0
 800e736:	db25      	blt.n	800e784 <quorem+0xf4>
 800e738:	4628      	mov	r0, r5
 800e73a:	f04f 0c00 	mov.w	ip, #0
 800e73e:	3601      	adds	r6, #1
 800e740:	f858 1b04 	ldr.w	r1, [r8], #4
 800e744:	f8d0 e000 	ldr.w	lr, [r0]
 800e748:	b28b      	uxth	r3, r1
 800e74a:	ebac 0303 	sub.w	r3, ip, r3
 800e74e:	fa1f f28e 	uxth.w	r2, lr
 800e752:	4413      	add	r3, r2
 800e754:	0c0a      	lsrs	r2, r1, #16
 800e756:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e75a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e75e:	b29b      	uxth	r3, r3
 800e760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e764:	45c1      	cmp	r9, r8
 800e766:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e76a:	f840 3b04 	str.w	r3, [r0], #4
 800e76e:	d2e7      	bcs.n	800e740 <quorem+0xb0>
 800e770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e774:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e778:	b922      	cbnz	r2, 800e784 <quorem+0xf4>
 800e77a:	3b04      	subs	r3, #4
 800e77c:	429d      	cmp	r5, r3
 800e77e:	461a      	mov	r2, r3
 800e780:	d30a      	bcc.n	800e798 <quorem+0x108>
 800e782:	613c      	str	r4, [r7, #16]
 800e784:	4630      	mov	r0, r6
 800e786:	b003      	add	sp, #12
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78c:	6812      	ldr	r2, [r2, #0]
 800e78e:	3b04      	subs	r3, #4
 800e790:	2a00      	cmp	r2, #0
 800e792:	d1cb      	bne.n	800e72c <quorem+0x9c>
 800e794:	3c01      	subs	r4, #1
 800e796:	e7c6      	b.n	800e726 <quorem+0x96>
 800e798:	6812      	ldr	r2, [r2, #0]
 800e79a:	3b04      	subs	r3, #4
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	d1f0      	bne.n	800e782 <quorem+0xf2>
 800e7a0:	3c01      	subs	r4, #1
 800e7a2:	e7eb      	b.n	800e77c <quorem+0xec>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	e7ee      	b.n	800e786 <quorem+0xf6>

0800e7a8 <_dtoa_r>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	4616      	mov	r6, r2
 800e7ae:	461f      	mov	r7, r3
 800e7b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e7b2:	b099      	sub	sp, #100	; 0x64
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e7ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e7be:	b974      	cbnz	r4, 800e7de <_dtoa_r+0x36>
 800e7c0:	2010      	movs	r0, #16
 800e7c2:	f001 f949 	bl	800fa58 <malloc>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	6268      	str	r0, [r5, #36]	; 0x24
 800e7ca:	b920      	cbnz	r0, 800e7d6 <_dtoa_r+0x2e>
 800e7cc:	21ea      	movs	r1, #234	; 0xea
 800e7ce:	4ba8      	ldr	r3, [pc, #672]	; (800ea70 <_dtoa_r+0x2c8>)
 800e7d0:	48a8      	ldr	r0, [pc, #672]	; (800ea74 <_dtoa_r+0x2cc>)
 800e7d2:	f002 f89f 	bl	8010914 <__assert_func>
 800e7d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7da:	6004      	str	r4, [r0, #0]
 800e7dc:	60c4      	str	r4, [r0, #12]
 800e7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7e0:	6819      	ldr	r1, [r3, #0]
 800e7e2:	b151      	cbz	r1, 800e7fa <_dtoa_r+0x52>
 800e7e4:	685a      	ldr	r2, [r3, #4]
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4093      	lsls	r3, r2
 800e7ea:	604a      	str	r2, [r1, #4]
 800e7ec:	608b      	str	r3, [r1, #8]
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f001 f9a8 	bl	800fb44 <_Bfree>
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	1e3b      	subs	r3, r7, #0
 800e7fc:	bfaf      	iteee	ge
 800e7fe:	2300      	movge	r3, #0
 800e800:	2201      	movlt	r2, #1
 800e802:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e806:	9305      	strlt	r3, [sp, #20]
 800e808:	bfa8      	it	ge
 800e80a:	f8c8 3000 	strge.w	r3, [r8]
 800e80e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e812:	4b99      	ldr	r3, [pc, #612]	; (800ea78 <_dtoa_r+0x2d0>)
 800e814:	bfb8      	it	lt
 800e816:	f8c8 2000 	strlt.w	r2, [r8]
 800e81a:	ea33 0309 	bics.w	r3, r3, r9
 800e81e:	d119      	bne.n	800e854 <_dtoa_r+0xac>
 800e820:	f242 730f 	movw	r3, #9999	; 0x270f
 800e824:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e82c:	4333      	orrs	r3, r6
 800e82e:	f000 857f 	beq.w	800f330 <_dtoa_r+0xb88>
 800e832:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e834:	b953      	cbnz	r3, 800e84c <_dtoa_r+0xa4>
 800e836:	4b91      	ldr	r3, [pc, #580]	; (800ea7c <_dtoa_r+0x2d4>)
 800e838:	e022      	b.n	800e880 <_dtoa_r+0xd8>
 800e83a:	4b91      	ldr	r3, [pc, #580]	; (800ea80 <_dtoa_r+0x2d8>)
 800e83c:	9303      	str	r3, [sp, #12]
 800e83e:	3308      	adds	r3, #8
 800e840:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e842:	6013      	str	r3, [r2, #0]
 800e844:	9803      	ldr	r0, [sp, #12]
 800e846:	b019      	add	sp, #100	; 0x64
 800e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84c:	4b8b      	ldr	r3, [pc, #556]	; (800ea7c <_dtoa_r+0x2d4>)
 800e84e:	9303      	str	r3, [sp, #12]
 800e850:	3303      	adds	r3, #3
 800e852:	e7f5      	b.n	800e840 <_dtoa_r+0x98>
 800e854:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e858:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e85c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e860:	2200      	movs	r2, #0
 800e862:	2300      	movs	r3, #0
 800e864:	f7f2 f8b8 	bl	80009d8 <__aeabi_dcmpeq>
 800e868:	4680      	mov	r8, r0
 800e86a:	b158      	cbz	r0, 800e884 <_dtoa_r+0xdc>
 800e86c:	2301      	movs	r3, #1
 800e86e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e870:	6013      	str	r3, [r2, #0]
 800e872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e874:	2b00      	cmp	r3, #0
 800e876:	f000 8558 	beq.w	800f32a <_dtoa_r+0xb82>
 800e87a:	4882      	ldr	r0, [pc, #520]	; (800ea84 <_dtoa_r+0x2dc>)
 800e87c:	6018      	str	r0, [r3, #0]
 800e87e:	1e43      	subs	r3, r0, #1
 800e880:	9303      	str	r3, [sp, #12]
 800e882:	e7df      	b.n	800e844 <_dtoa_r+0x9c>
 800e884:	ab16      	add	r3, sp, #88	; 0x58
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	ab17      	add	r3, sp, #92	; 0x5c
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	4628      	mov	r0, r5
 800e88e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e892:	f001 fd01 	bl	8010298 <__d2b>
 800e896:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e89a:	4683      	mov	fp, r0
 800e89c:	2c00      	cmp	r4, #0
 800e89e:	d07f      	beq.n	800e9a0 <_dtoa_r+0x1f8>
 800e8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e8aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e8ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e8b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e8b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	4b72      	ldr	r3, [pc, #456]	; (800ea88 <_dtoa_r+0x2e0>)
 800e8be:	f7f1 fc6b 	bl	8000198 <__aeabi_dsub>
 800e8c2:	a365      	add	r3, pc, #404	; (adr r3, 800ea58 <_dtoa_r+0x2b0>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 fe1e 	bl	8000508 <__aeabi_dmul>
 800e8cc:	a364      	add	r3, pc, #400	; (adr r3, 800ea60 <_dtoa_r+0x2b8>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	f7f1 fc63 	bl	800019c <__adddf3>
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	4620      	mov	r0, r4
 800e8da:	460f      	mov	r7, r1
 800e8dc:	f7f1 fdaa 	bl	8000434 <__aeabi_i2d>
 800e8e0:	a361      	add	r3, pc, #388	; (adr r3, 800ea68 <_dtoa_r+0x2c0>)
 800e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e6:	f7f1 fe0f 	bl	8000508 <__aeabi_dmul>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	f7f1 fc53 	bl	800019c <__adddf3>
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	460f      	mov	r7, r1
 800e8fa:	f7f2 f8b5 	bl	8000a68 <__aeabi_d2iz>
 800e8fe:	2200      	movs	r2, #0
 800e900:	4682      	mov	sl, r0
 800e902:	2300      	movs	r3, #0
 800e904:	4630      	mov	r0, r6
 800e906:	4639      	mov	r1, r7
 800e908:	f7f2 f870 	bl	80009ec <__aeabi_dcmplt>
 800e90c:	b148      	cbz	r0, 800e922 <_dtoa_r+0x17a>
 800e90e:	4650      	mov	r0, sl
 800e910:	f7f1 fd90 	bl	8000434 <__aeabi_i2d>
 800e914:	4632      	mov	r2, r6
 800e916:	463b      	mov	r3, r7
 800e918:	f7f2 f85e 	bl	80009d8 <__aeabi_dcmpeq>
 800e91c:	b908      	cbnz	r0, 800e922 <_dtoa_r+0x17a>
 800e91e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e922:	f1ba 0f16 	cmp.w	sl, #22
 800e926:	d858      	bhi.n	800e9da <_dtoa_r+0x232>
 800e928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e92c:	4b57      	ldr	r3, [pc, #348]	; (800ea8c <_dtoa_r+0x2e4>)
 800e92e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f2 f859 	bl	80009ec <__aeabi_dcmplt>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d04f      	beq.n	800e9de <_dtoa_r+0x236>
 800e93e:	2300      	movs	r3, #0
 800e940:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e944:	930f      	str	r3, [sp, #60]	; 0x3c
 800e946:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e948:	1b1c      	subs	r4, r3, r4
 800e94a:	1e63      	subs	r3, r4, #1
 800e94c:	9309      	str	r3, [sp, #36]	; 0x24
 800e94e:	bf49      	itett	mi
 800e950:	f1c4 0301 	rsbmi	r3, r4, #1
 800e954:	2300      	movpl	r3, #0
 800e956:	9306      	strmi	r3, [sp, #24]
 800e958:	2300      	movmi	r3, #0
 800e95a:	bf54      	ite	pl
 800e95c:	9306      	strpl	r3, [sp, #24]
 800e95e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e960:	f1ba 0f00 	cmp.w	sl, #0
 800e964:	db3d      	blt.n	800e9e2 <_dtoa_r+0x23a>
 800e966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e968:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e96c:	4453      	add	r3, sl
 800e96e:	9309      	str	r3, [sp, #36]	; 0x24
 800e970:	2300      	movs	r3, #0
 800e972:	930a      	str	r3, [sp, #40]	; 0x28
 800e974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e976:	2b09      	cmp	r3, #9
 800e978:	f200 808c 	bhi.w	800ea94 <_dtoa_r+0x2ec>
 800e97c:	2b05      	cmp	r3, #5
 800e97e:	bfc4      	itt	gt
 800e980:	3b04      	subgt	r3, #4
 800e982:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e986:	bfc8      	it	gt
 800e988:	2400      	movgt	r4, #0
 800e98a:	f1a3 0302 	sub.w	r3, r3, #2
 800e98e:	bfd8      	it	le
 800e990:	2401      	movle	r4, #1
 800e992:	2b03      	cmp	r3, #3
 800e994:	f200 808a 	bhi.w	800eaac <_dtoa_r+0x304>
 800e998:	e8df f003 	tbb	[pc, r3]
 800e99c:	5b4d4f2d 	.word	0x5b4d4f2d
 800e9a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e9a4:	441c      	add	r4, r3
 800e9a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e9aa:	2b20      	cmp	r3, #32
 800e9ac:	bfc3      	ittte	gt
 800e9ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e9b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e9b6:	fa09 f303 	lslgt.w	r3, r9, r3
 800e9ba:	f1c3 0320 	rsble	r3, r3, #32
 800e9be:	bfc6      	itte	gt
 800e9c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e9c4:	4318      	orrgt	r0, r3
 800e9c6:	fa06 f003 	lslle.w	r0, r6, r3
 800e9ca:	f7f1 fd23 	bl	8000414 <__aeabi_ui2d>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e9d4:	3c01      	subs	r4, #1
 800e9d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9d8:	e76f      	b.n	800e8ba <_dtoa_r+0x112>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e7b2      	b.n	800e944 <_dtoa_r+0x19c>
 800e9de:	900f      	str	r0, [sp, #60]	; 0x3c
 800e9e0:	e7b1      	b.n	800e946 <_dtoa_r+0x19e>
 800e9e2:	9b06      	ldr	r3, [sp, #24]
 800e9e4:	eba3 030a 	sub.w	r3, r3, sl
 800e9e8:	9306      	str	r3, [sp, #24]
 800e9ea:	f1ca 0300 	rsb	r3, sl, #0
 800e9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	930e      	str	r3, [sp, #56]	; 0x38
 800e9f4:	e7be      	b.n	800e974 <_dtoa_r+0x1cc>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	dc58      	bgt.n	800eab2 <_dtoa_r+0x30a>
 800ea00:	f04f 0901 	mov.w	r9, #1
 800ea04:	464b      	mov	r3, r9
 800ea06:	f8cd 9020 	str.w	r9, [sp, #32]
 800ea0a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ea0e:	2200      	movs	r2, #0
 800ea10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ea12:	6042      	str	r2, [r0, #4]
 800ea14:	2204      	movs	r2, #4
 800ea16:	f102 0614 	add.w	r6, r2, #20
 800ea1a:	429e      	cmp	r6, r3
 800ea1c:	6841      	ldr	r1, [r0, #4]
 800ea1e:	d94e      	bls.n	800eabe <_dtoa_r+0x316>
 800ea20:	4628      	mov	r0, r5
 800ea22:	f001 f84f 	bl	800fac4 <_Balloc>
 800ea26:	9003      	str	r0, [sp, #12]
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d14c      	bne.n	800eac6 <_dtoa_r+0x31e>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ea32:	4b17      	ldr	r3, [pc, #92]	; (800ea90 <_dtoa_r+0x2e8>)
 800ea34:	e6cc      	b.n	800e7d0 <_dtoa_r+0x28>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e7de      	b.n	800e9f8 <_dtoa_r+0x250>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea40:	eb0a 0903 	add.w	r9, sl, r3
 800ea44:	f109 0301 	add.w	r3, r9, #1
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	9308      	str	r3, [sp, #32]
 800ea4c:	bfb8      	it	lt
 800ea4e:	2301      	movlt	r3, #1
 800ea50:	e7dd      	b.n	800ea0e <_dtoa_r+0x266>
 800ea52:	2301      	movs	r3, #1
 800ea54:	e7f2      	b.n	800ea3c <_dtoa_r+0x294>
 800ea56:	bf00      	nop
 800ea58:	636f4361 	.word	0x636f4361
 800ea5c:	3fd287a7 	.word	0x3fd287a7
 800ea60:	8b60c8b3 	.word	0x8b60c8b3
 800ea64:	3fc68a28 	.word	0x3fc68a28
 800ea68:	509f79fb 	.word	0x509f79fb
 800ea6c:	3fd34413 	.word	0x3fd34413
 800ea70:	080118cd 	.word	0x080118cd
 800ea74:	080118e4 	.word	0x080118e4
 800ea78:	7ff00000 	.word	0x7ff00000
 800ea7c:	080118c9 	.word	0x080118c9
 800ea80:	080118c0 	.word	0x080118c0
 800ea84:	08011849 	.word	0x08011849
 800ea88:	3ff80000 	.word	0x3ff80000
 800ea8c:	08011a50 	.word	0x08011a50
 800ea90:	0801193f 	.word	0x0801193f
 800ea94:	2401      	movs	r4, #1
 800ea96:	2300      	movs	r3, #0
 800ea98:	940b      	str	r4, [sp, #44]	; 0x2c
 800ea9a:	9322      	str	r3, [sp, #136]	; 0x88
 800ea9c:	f04f 39ff 	mov.w	r9, #4294967295
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2312      	movs	r3, #18
 800eaa4:	f8cd 9020 	str.w	r9, [sp, #32]
 800eaa8:	9223      	str	r2, [sp, #140]	; 0x8c
 800eaaa:	e7b0      	b.n	800ea0e <_dtoa_r+0x266>
 800eaac:	2301      	movs	r3, #1
 800eaae:	930b      	str	r3, [sp, #44]	; 0x2c
 800eab0:	e7f4      	b.n	800ea9c <_dtoa_r+0x2f4>
 800eab2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800eab6:	464b      	mov	r3, r9
 800eab8:	f8cd 9020 	str.w	r9, [sp, #32]
 800eabc:	e7a7      	b.n	800ea0e <_dtoa_r+0x266>
 800eabe:	3101      	adds	r1, #1
 800eac0:	6041      	str	r1, [r0, #4]
 800eac2:	0052      	lsls	r2, r2, #1
 800eac4:	e7a7      	b.n	800ea16 <_dtoa_r+0x26e>
 800eac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eac8:	9a03      	ldr	r2, [sp, #12]
 800eaca:	601a      	str	r2, [r3, #0]
 800eacc:	9b08      	ldr	r3, [sp, #32]
 800eace:	2b0e      	cmp	r3, #14
 800ead0:	f200 80a8 	bhi.w	800ec24 <_dtoa_r+0x47c>
 800ead4:	2c00      	cmp	r4, #0
 800ead6:	f000 80a5 	beq.w	800ec24 <_dtoa_r+0x47c>
 800eada:	f1ba 0f00 	cmp.w	sl, #0
 800eade:	dd34      	ble.n	800eb4a <_dtoa_r+0x3a2>
 800eae0:	4a9a      	ldr	r2, [pc, #616]	; (800ed4c <_dtoa_r+0x5a4>)
 800eae2:	f00a 030f 	and.w	r3, sl, #15
 800eae6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eaea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800eaee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eaf2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800eaf6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800eafa:	d016      	beq.n	800eb2a <_dtoa_r+0x382>
 800eafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb00:	4b93      	ldr	r3, [pc, #588]	; (800ed50 <_dtoa_r+0x5a8>)
 800eb02:	2703      	movs	r7, #3
 800eb04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb08:	f7f1 fe28 	bl	800075c <__aeabi_ddiv>
 800eb0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb10:	f004 040f 	and.w	r4, r4, #15
 800eb14:	4e8e      	ldr	r6, [pc, #568]	; (800ed50 <_dtoa_r+0x5a8>)
 800eb16:	b954      	cbnz	r4, 800eb2e <_dtoa_r+0x386>
 800eb18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb20:	f7f1 fe1c 	bl	800075c <__aeabi_ddiv>
 800eb24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb28:	e029      	b.n	800eb7e <_dtoa_r+0x3d6>
 800eb2a:	2702      	movs	r7, #2
 800eb2c:	e7f2      	b.n	800eb14 <_dtoa_r+0x36c>
 800eb2e:	07e1      	lsls	r1, r4, #31
 800eb30:	d508      	bpl.n	800eb44 <_dtoa_r+0x39c>
 800eb32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb36:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb3a:	f7f1 fce5 	bl	8000508 <__aeabi_dmul>
 800eb3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb42:	3701      	adds	r7, #1
 800eb44:	1064      	asrs	r4, r4, #1
 800eb46:	3608      	adds	r6, #8
 800eb48:	e7e5      	b.n	800eb16 <_dtoa_r+0x36e>
 800eb4a:	f000 80a5 	beq.w	800ec98 <_dtoa_r+0x4f0>
 800eb4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb52:	f1ca 0400 	rsb	r4, sl, #0
 800eb56:	4b7d      	ldr	r3, [pc, #500]	; (800ed4c <_dtoa_r+0x5a4>)
 800eb58:	f004 020f 	and.w	r2, r4, #15
 800eb5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	f7f1 fcd0 	bl	8000508 <__aeabi_dmul>
 800eb68:	2702      	movs	r7, #2
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb70:	4e77      	ldr	r6, [pc, #476]	; (800ed50 <_dtoa_r+0x5a8>)
 800eb72:	1124      	asrs	r4, r4, #4
 800eb74:	2c00      	cmp	r4, #0
 800eb76:	f040 8084 	bne.w	800ec82 <_dtoa_r+0x4da>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1d2      	bne.n	800eb24 <_dtoa_r+0x37c>
 800eb7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f000 808b 	beq.w	800ec9c <_dtoa_r+0x4f4>
 800eb86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eb8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800eb8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb92:	2200      	movs	r2, #0
 800eb94:	4b6f      	ldr	r3, [pc, #444]	; (800ed54 <_dtoa_r+0x5ac>)
 800eb96:	f7f1 ff29 	bl	80009ec <__aeabi_dcmplt>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	d07e      	beq.n	800ec9c <_dtoa_r+0x4f4>
 800eb9e:	9b08      	ldr	r3, [sp, #32]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d07b      	beq.n	800ec9c <_dtoa_r+0x4f4>
 800eba4:	f1b9 0f00 	cmp.w	r9, #0
 800eba8:	dd38      	ble.n	800ec1c <_dtoa_r+0x474>
 800ebaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ebae:	2200      	movs	r2, #0
 800ebb0:	4b69      	ldr	r3, [pc, #420]	; (800ed58 <_dtoa_r+0x5b0>)
 800ebb2:	f7f1 fca9 	bl	8000508 <__aeabi_dmul>
 800ebb6:	464c      	mov	r4, r9
 800ebb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebbc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ebc0:	3701      	adds	r7, #1
 800ebc2:	4638      	mov	r0, r7
 800ebc4:	f7f1 fc36 	bl	8000434 <__aeabi_i2d>
 800ebc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebcc:	f7f1 fc9c 	bl	8000508 <__aeabi_dmul>
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4b62      	ldr	r3, [pc, #392]	; (800ed5c <_dtoa_r+0x5b4>)
 800ebd4:	f7f1 fae2 	bl	800019c <__adddf3>
 800ebd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ebdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ebe0:	9611      	str	r6, [sp, #68]	; 0x44
 800ebe2:	2c00      	cmp	r4, #0
 800ebe4:	d15d      	bne.n	800eca2 <_dtoa_r+0x4fa>
 800ebe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebea:	2200      	movs	r2, #0
 800ebec:	4b5c      	ldr	r3, [pc, #368]	; (800ed60 <_dtoa_r+0x5b8>)
 800ebee:	f7f1 fad3 	bl	8000198 <__aeabi_dsub>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebfa:	4633      	mov	r3, r6
 800ebfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ebfe:	f7f1 ff13 	bl	8000a28 <__aeabi_dcmpgt>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f040 829c 	bne.w	800f140 <_dtoa_r+0x998>
 800ec08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ec0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ec12:	f7f1 feeb 	bl	80009ec <__aeabi_dcmplt>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	f040 8290 	bne.w	800f13c <_dtoa_r+0x994>
 800ec1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ec20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ec24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f2c0 8152 	blt.w	800eed0 <_dtoa_r+0x728>
 800ec2c:	f1ba 0f0e 	cmp.w	sl, #14
 800ec30:	f300 814e 	bgt.w	800eed0 <_dtoa_r+0x728>
 800ec34:	4b45      	ldr	r3, [pc, #276]	; (800ed4c <_dtoa_r+0x5a4>)
 800ec36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ec3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ec42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f280 80db 	bge.w	800ee00 <_dtoa_r+0x658>
 800ec4a:	9b08      	ldr	r3, [sp, #32]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	f300 80d7 	bgt.w	800ee00 <_dtoa_r+0x658>
 800ec52:	f040 8272 	bne.w	800f13a <_dtoa_r+0x992>
 800ec56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	4b40      	ldr	r3, [pc, #256]	; (800ed60 <_dtoa_r+0x5b8>)
 800ec5e:	f7f1 fc53 	bl	8000508 <__aeabi_dmul>
 800ec62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec66:	f7f1 fed5 	bl	8000a14 <__aeabi_dcmpge>
 800ec6a:	9c08      	ldr	r4, [sp, #32]
 800ec6c:	4626      	mov	r6, r4
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	f040 8248 	bne.w	800f104 <_dtoa_r+0x95c>
 800ec74:	2331      	movs	r3, #49	; 0x31
 800ec76:	9f03      	ldr	r7, [sp, #12]
 800ec78:	f10a 0a01 	add.w	sl, sl, #1
 800ec7c:	f807 3b01 	strb.w	r3, [r7], #1
 800ec80:	e244      	b.n	800f10c <_dtoa_r+0x964>
 800ec82:	07e2      	lsls	r2, r4, #31
 800ec84:	d505      	bpl.n	800ec92 <_dtoa_r+0x4ea>
 800ec86:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec8a:	f7f1 fc3d 	bl	8000508 <__aeabi_dmul>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	3701      	adds	r7, #1
 800ec92:	1064      	asrs	r4, r4, #1
 800ec94:	3608      	adds	r6, #8
 800ec96:	e76d      	b.n	800eb74 <_dtoa_r+0x3cc>
 800ec98:	2702      	movs	r7, #2
 800ec9a:	e770      	b.n	800eb7e <_dtoa_r+0x3d6>
 800ec9c:	46d0      	mov	r8, sl
 800ec9e:	9c08      	ldr	r4, [sp, #32]
 800eca0:	e78f      	b.n	800ebc2 <_dtoa_r+0x41a>
 800eca2:	9903      	ldr	r1, [sp, #12]
 800eca4:	4b29      	ldr	r3, [pc, #164]	; (800ed4c <_dtoa_r+0x5a4>)
 800eca6:	4421      	add	r1, r4
 800eca8:	9112      	str	r1, [sp, #72]	; 0x48
 800ecaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ecb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ecb8:	2900      	cmp	r1, #0
 800ecba:	d055      	beq.n	800ed68 <_dtoa_r+0x5c0>
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	4929      	ldr	r1, [pc, #164]	; (800ed64 <_dtoa_r+0x5bc>)
 800ecc0:	f7f1 fd4c 	bl	800075c <__aeabi_ddiv>
 800ecc4:	463b      	mov	r3, r7
 800ecc6:	4632      	mov	r2, r6
 800ecc8:	f7f1 fa66 	bl	8000198 <__aeabi_dsub>
 800eccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ecd0:	9f03      	ldr	r7, [sp, #12]
 800ecd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecd6:	f7f1 fec7 	bl	8000a68 <__aeabi_d2iz>
 800ecda:	4604      	mov	r4, r0
 800ecdc:	f7f1 fbaa 	bl	8000434 <__aeabi_i2d>
 800ece0:	4602      	mov	r2, r0
 800ece2:	460b      	mov	r3, r1
 800ece4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ece8:	f7f1 fa56 	bl	8000198 <__aeabi_dsub>
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	3430      	adds	r4, #48	; 0x30
 800ecf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ecf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ecfa:	f807 4b01 	strb.w	r4, [r7], #1
 800ecfe:	f7f1 fe75 	bl	80009ec <__aeabi_dcmplt>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d174      	bne.n	800edf0 <_dtoa_r+0x648>
 800ed06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	4911      	ldr	r1, [pc, #68]	; (800ed54 <_dtoa_r+0x5ac>)
 800ed0e:	f7f1 fa43 	bl	8000198 <__aeabi_dsub>
 800ed12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed16:	f7f1 fe69 	bl	80009ec <__aeabi_dcmplt>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	f040 80b7 	bne.w	800ee8e <_dtoa_r+0x6e6>
 800ed20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed22:	429f      	cmp	r7, r3
 800ed24:	f43f af7a 	beq.w	800ec1c <_dtoa_r+0x474>
 800ed28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <_dtoa_r+0x5b0>)
 800ed30:	f7f1 fbea 	bl	8000508 <__aeabi_dmul>
 800ed34:	2200      	movs	r2, #0
 800ed36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ed3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed3e:	4b06      	ldr	r3, [pc, #24]	; (800ed58 <_dtoa_r+0x5b0>)
 800ed40:	f7f1 fbe2 	bl	8000508 <__aeabi_dmul>
 800ed44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed48:	e7c3      	b.n	800ecd2 <_dtoa_r+0x52a>
 800ed4a:	bf00      	nop
 800ed4c:	08011a50 	.word	0x08011a50
 800ed50:	08011a28 	.word	0x08011a28
 800ed54:	3ff00000 	.word	0x3ff00000
 800ed58:	40240000 	.word	0x40240000
 800ed5c:	401c0000 	.word	0x401c0000
 800ed60:	40140000 	.word	0x40140000
 800ed64:	3fe00000 	.word	0x3fe00000
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 fbcc 	bl	8000508 <__aeabi_dmul>
 800ed70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ed76:	9c03      	ldr	r4, [sp, #12]
 800ed78:	9314      	str	r3, [sp, #80]	; 0x50
 800ed7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed7e:	f7f1 fe73 	bl	8000a68 <__aeabi_d2iz>
 800ed82:	9015      	str	r0, [sp, #84]	; 0x54
 800ed84:	f7f1 fb56 	bl	8000434 <__aeabi_i2d>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed90:	f7f1 fa02 	bl	8000198 <__aeabi_dsub>
 800ed94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed96:	4606      	mov	r6, r0
 800ed98:	3330      	adds	r3, #48	; 0x30
 800ed9a:	f804 3b01 	strb.w	r3, [r4], #1
 800ed9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eda0:	460f      	mov	r7, r1
 800eda2:	429c      	cmp	r4, r3
 800eda4:	f04f 0200 	mov.w	r2, #0
 800eda8:	d124      	bne.n	800edf4 <_dtoa_r+0x64c>
 800edaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800edae:	4bb0      	ldr	r3, [pc, #704]	; (800f070 <_dtoa_r+0x8c8>)
 800edb0:	f7f1 f9f4 	bl	800019c <__adddf3>
 800edb4:	4602      	mov	r2, r0
 800edb6:	460b      	mov	r3, r1
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 fe34 	bl	8000a28 <__aeabi_dcmpgt>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d163      	bne.n	800ee8c <_dtoa_r+0x6e4>
 800edc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800edc8:	2000      	movs	r0, #0
 800edca:	49a9      	ldr	r1, [pc, #676]	; (800f070 <_dtoa_r+0x8c8>)
 800edcc:	f7f1 f9e4 	bl	8000198 <__aeabi_dsub>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4630      	mov	r0, r6
 800edd6:	4639      	mov	r1, r7
 800edd8:	f7f1 fe08 	bl	80009ec <__aeabi_dcmplt>
 800eddc:	2800      	cmp	r0, #0
 800edde:	f43f af1d 	beq.w	800ec1c <_dtoa_r+0x474>
 800ede2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ede4:	1e7b      	subs	r3, r7, #1
 800ede6:	9314      	str	r3, [sp, #80]	; 0x50
 800ede8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800edec:	2b30      	cmp	r3, #48	; 0x30
 800edee:	d0f8      	beq.n	800ede2 <_dtoa_r+0x63a>
 800edf0:	46c2      	mov	sl, r8
 800edf2:	e03b      	b.n	800ee6c <_dtoa_r+0x6c4>
 800edf4:	4b9f      	ldr	r3, [pc, #636]	; (800f074 <_dtoa_r+0x8cc>)
 800edf6:	f7f1 fb87 	bl	8000508 <__aeabi_dmul>
 800edfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edfe:	e7bc      	b.n	800ed7a <_dtoa_r+0x5d2>
 800ee00:	9f03      	ldr	r7, [sp, #12]
 800ee02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ee06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	f7f1 fca5 	bl	800075c <__aeabi_ddiv>
 800ee12:	f7f1 fe29 	bl	8000a68 <__aeabi_d2iz>
 800ee16:	4604      	mov	r4, r0
 800ee18:	f7f1 fb0c 	bl	8000434 <__aeabi_i2d>
 800ee1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee20:	f7f1 fb72 	bl	8000508 <__aeabi_dmul>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	4640      	mov	r0, r8
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	f7f1 f9b4 	bl	8000198 <__aeabi_dsub>
 800ee30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ee34:	f807 6b01 	strb.w	r6, [r7], #1
 800ee38:	9e03      	ldr	r6, [sp, #12]
 800ee3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ee3e:	1bbe      	subs	r6, r7, r6
 800ee40:	45b4      	cmp	ip, r6
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	d136      	bne.n	800eeb6 <_dtoa_r+0x70e>
 800ee48:	f7f1 f9a8 	bl	800019c <__adddf3>
 800ee4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee50:	4680      	mov	r8, r0
 800ee52:	4689      	mov	r9, r1
 800ee54:	f7f1 fde8 	bl	8000a28 <__aeabi_dcmpgt>
 800ee58:	bb58      	cbnz	r0, 800eeb2 <_dtoa_r+0x70a>
 800ee5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee5e:	4640      	mov	r0, r8
 800ee60:	4649      	mov	r1, r9
 800ee62:	f7f1 fdb9 	bl	80009d8 <__aeabi_dcmpeq>
 800ee66:	b108      	cbz	r0, 800ee6c <_dtoa_r+0x6c4>
 800ee68:	07e1      	lsls	r1, r4, #31
 800ee6a:	d422      	bmi.n	800eeb2 <_dtoa_r+0x70a>
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	4659      	mov	r1, fp
 800ee70:	f000 fe68 	bl	800fb44 <_Bfree>
 800ee74:	2300      	movs	r3, #0
 800ee76:	703b      	strb	r3, [r7, #0]
 800ee78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ee7a:	f10a 0001 	add.w	r0, sl, #1
 800ee7e:	6018      	str	r0, [r3, #0]
 800ee80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f43f acde 	beq.w	800e844 <_dtoa_r+0x9c>
 800ee88:	601f      	str	r7, [r3, #0]
 800ee8a:	e4db      	b.n	800e844 <_dtoa_r+0x9c>
 800ee8c:	4627      	mov	r7, r4
 800ee8e:	463b      	mov	r3, r7
 800ee90:	461f      	mov	r7, r3
 800ee92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee96:	2a39      	cmp	r2, #57	; 0x39
 800ee98:	d107      	bne.n	800eeaa <_dtoa_r+0x702>
 800ee9a:	9a03      	ldr	r2, [sp, #12]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d1f7      	bne.n	800ee90 <_dtoa_r+0x6e8>
 800eea0:	2230      	movs	r2, #48	; 0x30
 800eea2:	9903      	ldr	r1, [sp, #12]
 800eea4:	f108 0801 	add.w	r8, r8, #1
 800eea8:	700a      	strb	r2, [r1, #0]
 800eeaa:	781a      	ldrb	r2, [r3, #0]
 800eeac:	3201      	adds	r2, #1
 800eeae:	701a      	strb	r2, [r3, #0]
 800eeb0:	e79e      	b.n	800edf0 <_dtoa_r+0x648>
 800eeb2:	46d0      	mov	r8, sl
 800eeb4:	e7eb      	b.n	800ee8e <_dtoa_r+0x6e6>
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	4b6e      	ldr	r3, [pc, #440]	; (800f074 <_dtoa_r+0x8cc>)
 800eeba:	f7f1 fb25 	bl	8000508 <__aeabi_dmul>
 800eebe:	2200      	movs	r2, #0
 800eec0:	2300      	movs	r3, #0
 800eec2:	4680      	mov	r8, r0
 800eec4:	4689      	mov	r9, r1
 800eec6:	f7f1 fd87 	bl	80009d8 <__aeabi_dcmpeq>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d09b      	beq.n	800ee06 <_dtoa_r+0x65e>
 800eece:	e7cd      	b.n	800ee6c <_dtoa_r+0x6c4>
 800eed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eed2:	2a00      	cmp	r2, #0
 800eed4:	f000 80d0 	beq.w	800f078 <_dtoa_r+0x8d0>
 800eed8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800eeda:	2a01      	cmp	r2, #1
 800eedc:	f300 80ae 	bgt.w	800f03c <_dtoa_r+0x894>
 800eee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eee2:	2a00      	cmp	r2, #0
 800eee4:	f000 80a6 	beq.w	800f034 <_dtoa_r+0x88c>
 800eee8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eeec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800eeee:	9f06      	ldr	r7, [sp, #24]
 800eef0:	9a06      	ldr	r2, [sp, #24]
 800eef2:	2101      	movs	r1, #1
 800eef4:	441a      	add	r2, r3
 800eef6:	9206      	str	r2, [sp, #24]
 800eef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eefa:	4628      	mov	r0, r5
 800eefc:	441a      	add	r2, r3
 800eefe:	9209      	str	r2, [sp, #36]	; 0x24
 800ef00:	f000 ff20 	bl	800fd44 <__i2b>
 800ef04:	4606      	mov	r6, r0
 800ef06:	2f00      	cmp	r7, #0
 800ef08:	dd0c      	ble.n	800ef24 <_dtoa_r+0x77c>
 800ef0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	dd09      	ble.n	800ef24 <_dtoa_r+0x77c>
 800ef10:	42bb      	cmp	r3, r7
 800ef12:	bfa8      	it	ge
 800ef14:	463b      	movge	r3, r7
 800ef16:	9a06      	ldr	r2, [sp, #24]
 800ef18:	1aff      	subs	r7, r7, r3
 800ef1a:	1ad2      	subs	r2, r2, r3
 800ef1c:	9206      	str	r2, [sp, #24]
 800ef1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef20:	1ad3      	subs	r3, r2, r3
 800ef22:	9309      	str	r3, [sp, #36]	; 0x24
 800ef24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef26:	b1f3      	cbz	r3, 800ef66 <_dtoa_r+0x7be>
 800ef28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 80a8 	beq.w	800f080 <_dtoa_r+0x8d8>
 800ef30:	2c00      	cmp	r4, #0
 800ef32:	dd10      	ble.n	800ef56 <_dtoa_r+0x7ae>
 800ef34:	4631      	mov	r1, r6
 800ef36:	4622      	mov	r2, r4
 800ef38:	4628      	mov	r0, r5
 800ef3a:	f000 ffc1 	bl	800fec0 <__pow5mult>
 800ef3e:	465a      	mov	r2, fp
 800ef40:	4601      	mov	r1, r0
 800ef42:	4606      	mov	r6, r0
 800ef44:	4628      	mov	r0, r5
 800ef46:	f000 ff13 	bl	800fd70 <__multiply>
 800ef4a:	4680      	mov	r8, r0
 800ef4c:	4659      	mov	r1, fp
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f000 fdf8 	bl	800fb44 <_Bfree>
 800ef54:	46c3      	mov	fp, r8
 800ef56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef58:	1b1a      	subs	r2, r3, r4
 800ef5a:	d004      	beq.n	800ef66 <_dtoa_r+0x7be>
 800ef5c:	4659      	mov	r1, fp
 800ef5e:	4628      	mov	r0, r5
 800ef60:	f000 ffae 	bl	800fec0 <__pow5mult>
 800ef64:	4683      	mov	fp, r0
 800ef66:	2101      	movs	r1, #1
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f000 feeb 	bl	800fd44 <__i2b>
 800ef6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef70:	4604      	mov	r4, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	f340 8086 	ble.w	800f084 <_dtoa_r+0x8dc>
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f000 ff9f 	bl	800fec0 <__pow5mult>
 800ef82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef84:	4604      	mov	r4, r0
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	dd7f      	ble.n	800f08a <_dtoa_r+0x8e2>
 800ef8a:	f04f 0800 	mov.w	r8, #0
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef94:	6918      	ldr	r0, [r3, #16]
 800ef96:	f000 fe87 	bl	800fca8 <__hi0bits>
 800ef9a:	f1c0 0020 	rsb	r0, r0, #32
 800ef9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efa0:	4418      	add	r0, r3
 800efa2:	f010 001f 	ands.w	r0, r0, #31
 800efa6:	f000 8092 	beq.w	800f0ce <_dtoa_r+0x926>
 800efaa:	f1c0 0320 	rsb	r3, r0, #32
 800efae:	2b04      	cmp	r3, #4
 800efb0:	f340 808a 	ble.w	800f0c8 <_dtoa_r+0x920>
 800efb4:	f1c0 001c 	rsb	r0, r0, #28
 800efb8:	9b06      	ldr	r3, [sp, #24]
 800efba:	4407      	add	r7, r0
 800efbc:	4403      	add	r3, r0
 800efbe:	9306      	str	r3, [sp, #24]
 800efc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efc2:	4403      	add	r3, r0
 800efc4:	9309      	str	r3, [sp, #36]	; 0x24
 800efc6:	9b06      	ldr	r3, [sp, #24]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	dd05      	ble.n	800efd8 <_dtoa_r+0x830>
 800efcc:	4659      	mov	r1, fp
 800efce:	461a      	mov	r2, r3
 800efd0:	4628      	mov	r0, r5
 800efd2:	f000 ffcf 	bl	800ff74 <__lshift>
 800efd6:	4683      	mov	fp, r0
 800efd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efda:	2b00      	cmp	r3, #0
 800efdc:	dd05      	ble.n	800efea <_dtoa_r+0x842>
 800efde:	4621      	mov	r1, r4
 800efe0:	461a      	mov	r2, r3
 800efe2:	4628      	mov	r0, r5
 800efe4:	f000 ffc6 	bl	800ff74 <__lshift>
 800efe8:	4604      	mov	r4, r0
 800efea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800efec:	2b00      	cmp	r3, #0
 800efee:	d070      	beq.n	800f0d2 <_dtoa_r+0x92a>
 800eff0:	4621      	mov	r1, r4
 800eff2:	4658      	mov	r0, fp
 800eff4:	f001 f82e 	bl	8010054 <__mcmp>
 800eff8:	2800      	cmp	r0, #0
 800effa:	da6a      	bge.n	800f0d2 <_dtoa_r+0x92a>
 800effc:	2300      	movs	r3, #0
 800effe:	4659      	mov	r1, fp
 800f000:	220a      	movs	r2, #10
 800f002:	4628      	mov	r0, r5
 800f004:	f000 fdc0 	bl	800fb88 <__multadd>
 800f008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f00a:	4683      	mov	fp, r0
 800f00c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f010:	2b00      	cmp	r3, #0
 800f012:	f000 8194 	beq.w	800f33e <_dtoa_r+0xb96>
 800f016:	4631      	mov	r1, r6
 800f018:	2300      	movs	r3, #0
 800f01a:	220a      	movs	r2, #10
 800f01c:	4628      	mov	r0, r5
 800f01e:	f000 fdb3 	bl	800fb88 <__multadd>
 800f022:	f1b9 0f00 	cmp.w	r9, #0
 800f026:	4606      	mov	r6, r0
 800f028:	f300 8093 	bgt.w	800f152 <_dtoa_r+0x9aa>
 800f02c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f02e:	2b02      	cmp	r3, #2
 800f030:	dc57      	bgt.n	800f0e2 <_dtoa_r+0x93a>
 800f032:	e08e      	b.n	800f152 <_dtoa_r+0x9aa>
 800f034:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f03a:	e757      	b.n	800eeec <_dtoa_r+0x744>
 800f03c:	9b08      	ldr	r3, [sp, #32]
 800f03e:	1e5c      	subs	r4, r3, #1
 800f040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f042:	42a3      	cmp	r3, r4
 800f044:	bfb7      	itett	lt
 800f046:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f048:	1b1c      	subge	r4, r3, r4
 800f04a:	1ae2      	sublt	r2, r4, r3
 800f04c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f04e:	bfbe      	ittt	lt
 800f050:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f052:	189b      	addlt	r3, r3, r2
 800f054:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f056:	9b08      	ldr	r3, [sp, #32]
 800f058:	bfb8      	it	lt
 800f05a:	2400      	movlt	r4, #0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfbb      	ittet	lt
 800f060:	9b06      	ldrlt	r3, [sp, #24]
 800f062:	9a08      	ldrlt	r2, [sp, #32]
 800f064:	9f06      	ldrge	r7, [sp, #24]
 800f066:	1a9f      	sublt	r7, r3, r2
 800f068:	bfac      	ite	ge
 800f06a:	9b08      	ldrge	r3, [sp, #32]
 800f06c:	2300      	movlt	r3, #0
 800f06e:	e73f      	b.n	800eef0 <_dtoa_r+0x748>
 800f070:	3fe00000 	.word	0x3fe00000
 800f074:	40240000 	.word	0x40240000
 800f078:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f07a:	9f06      	ldr	r7, [sp, #24]
 800f07c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f07e:	e742      	b.n	800ef06 <_dtoa_r+0x75e>
 800f080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f082:	e76b      	b.n	800ef5c <_dtoa_r+0x7b4>
 800f084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f086:	2b01      	cmp	r3, #1
 800f088:	dc19      	bgt.n	800f0be <_dtoa_r+0x916>
 800f08a:	9b04      	ldr	r3, [sp, #16]
 800f08c:	b9bb      	cbnz	r3, 800f0be <_dtoa_r+0x916>
 800f08e:	9b05      	ldr	r3, [sp, #20]
 800f090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f094:	b99b      	cbnz	r3, 800f0be <_dtoa_r+0x916>
 800f096:	9b05      	ldr	r3, [sp, #20]
 800f098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f09c:	0d1b      	lsrs	r3, r3, #20
 800f09e:	051b      	lsls	r3, r3, #20
 800f0a0:	b183      	cbz	r3, 800f0c4 <_dtoa_r+0x91c>
 800f0a2:	f04f 0801 	mov.w	r8, #1
 800f0a6:	9b06      	ldr	r3, [sp, #24]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	9306      	str	r3, [sp, #24]
 800f0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f47f af6a 	bne.w	800ef8e <_dtoa_r+0x7e6>
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	e76f      	b.n	800ef9e <_dtoa_r+0x7f6>
 800f0be:	f04f 0800 	mov.w	r8, #0
 800f0c2:	e7f6      	b.n	800f0b2 <_dtoa_r+0x90a>
 800f0c4:	4698      	mov	r8, r3
 800f0c6:	e7f4      	b.n	800f0b2 <_dtoa_r+0x90a>
 800f0c8:	f43f af7d 	beq.w	800efc6 <_dtoa_r+0x81e>
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	301c      	adds	r0, #28
 800f0d0:	e772      	b.n	800efb8 <_dtoa_r+0x810>
 800f0d2:	9b08      	ldr	r3, [sp, #32]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dc36      	bgt.n	800f146 <_dtoa_r+0x99e>
 800f0d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	dd33      	ble.n	800f146 <_dtoa_r+0x99e>
 800f0de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f0e2:	f1b9 0f00 	cmp.w	r9, #0
 800f0e6:	d10d      	bne.n	800f104 <_dtoa_r+0x95c>
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	464b      	mov	r3, r9
 800f0ec:	2205      	movs	r2, #5
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 fd4a 	bl	800fb88 <__multadd>
 800f0f4:	4601      	mov	r1, r0
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	4658      	mov	r0, fp
 800f0fa:	f000 ffab 	bl	8010054 <__mcmp>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	f73f adb8 	bgt.w	800ec74 <_dtoa_r+0x4cc>
 800f104:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f106:	9f03      	ldr	r7, [sp, #12]
 800f108:	ea6f 0a03 	mvn.w	sl, r3
 800f10c:	f04f 0800 	mov.w	r8, #0
 800f110:	4621      	mov	r1, r4
 800f112:	4628      	mov	r0, r5
 800f114:	f000 fd16 	bl	800fb44 <_Bfree>
 800f118:	2e00      	cmp	r6, #0
 800f11a:	f43f aea7 	beq.w	800ee6c <_dtoa_r+0x6c4>
 800f11e:	f1b8 0f00 	cmp.w	r8, #0
 800f122:	d005      	beq.n	800f130 <_dtoa_r+0x988>
 800f124:	45b0      	cmp	r8, r6
 800f126:	d003      	beq.n	800f130 <_dtoa_r+0x988>
 800f128:	4641      	mov	r1, r8
 800f12a:	4628      	mov	r0, r5
 800f12c:	f000 fd0a 	bl	800fb44 <_Bfree>
 800f130:	4631      	mov	r1, r6
 800f132:	4628      	mov	r0, r5
 800f134:	f000 fd06 	bl	800fb44 <_Bfree>
 800f138:	e698      	b.n	800ee6c <_dtoa_r+0x6c4>
 800f13a:	2400      	movs	r4, #0
 800f13c:	4626      	mov	r6, r4
 800f13e:	e7e1      	b.n	800f104 <_dtoa_r+0x95c>
 800f140:	46c2      	mov	sl, r8
 800f142:	4626      	mov	r6, r4
 800f144:	e596      	b.n	800ec74 <_dtoa_r+0x4cc>
 800f146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f148:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 80fd 	beq.w	800f34c <_dtoa_r+0xba4>
 800f152:	2f00      	cmp	r7, #0
 800f154:	dd05      	ble.n	800f162 <_dtoa_r+0x9ba>
 800f156:	4631      	mov	r1, r6
 800f158:	463a      	mov	r2, r7
 800f15a:	4628      	mov	r0, r5
 800f15c:	f000 ff0a 	bl	800ff74 <__lshift>
 800f160:	4606      	mov	r6, r0
 800f162:	f1b8 0f00 	cmp.w	r8, #0
 800f166:	d05c      	beq.n	800f222 <_dtoa_r+0xa7a>
 800f168:	4628      	mov	r0, r5
 800f16a:	6871      	ldr	r1, [r6, #4]
 800f16c:	f000 fcaa 	bl	800fac4 <_Balloc>
 800f170:	4607      	mov	r7, r0
 800f172:	b928      	cbnz	r0, 800f180 <_dtoa_r+0x9d8>
 800f174:	4602      	mov	r2, r0
 800f176:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f17a:	4b7f      	ldr	r3, [pc, #508]	; (800f378 <_dtoa_r+0xbd0>)
 800f17c:	f7ff bb28 	b.w	800e7d0 <_dtoa_r+0x28>
 800f180:	6932      	ldr	r2, [r6, #16]
 800f182:	f106 010c 	add.w	r1, r6, #12
 800f186:	3202      	adds	r2, #2
 800f188:	0092      	lsls	r2, r2, #2
 800f18a:	300c      	adds	r0, #12
 800f18c:	f000 fc8c 	bl	800faa8 <memcpy>
 800f190:	2201      	movs	r2, #1
 800f192:	4639      	mov	r1, r7
 800f194:	4628      	mov	r0, r5
 800f196:	f000 feed 	bl	800ff74 <__lshift>
 800f19a:	46b0      	mov	r8, r6
 800f19c:	4606      	mov	r6, r0
 800f19e:	9b03      	ldr	r3, [sp, #12]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	9308      	str	r3, [sp, #32]
 800f1a4:	9b03      	ldr	r3, [sp, #12]
 800f1a6:	444b      	add	r3, r9
 800f1a8:	930a      	str	r3, [sp, #40]	; 0x28
 800f1aa:	9b04      	ldr	r3, [sp, #16]
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b2:	9b08      	ldr	r3, [sp, #32]
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	4658      	mov	r0, fp
 800f1ba:	9304      	str	r3, [sp, #16]
 800f1bc:	f7ff fa68 	bl	800e690 <quorem>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	4641      	mov	r1, r8
 800f1c4:	3330      	adds	r3, #48	; 0x30
 800f1c6:	9006      	str	r0, [sp, #24]
 800f1c8:	4658      	mov	r0, fp
 800f1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1cc:	f000 ff42 	bl	8010054 <__mcmp>
 800f1d0:	4632      	mov	r2, r6
 800f1d2:	4681      	mov	r9, r0
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f000 ff58 	bl	801008c <__mdiff>
 800f1dc:	68c2      	ldr	r2, [r0, #12]
 800f1de:	4607      	mov	r7, r0
 800f1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1e2:	bb02      	cbnz	r2, 800f226 <_dtoa_r+0xa7e>
 800f1e4:	4601      	mov	r1, r0
 800f1e6:	4658      	mov	r0, fp
 800f1e8:	f000 ff34 	bl	8010054 <__mcmp>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1f0:	4639      	mov	r1, r7
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f1f8:	f000 fca4 	bl	800fb44 <_Bfree>
 800f1fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f200:	9f08      	ldr	r7, [sp, #32]
 800f202:	ea43 0102 	orr.w	r1, r3, r2
 800f206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f208:	430b      	orrs	r3, r1
 800f20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f20c:	d10d      	bne.n	800f22a <_dtoa_r+0xa82>
 800f20e:	2b39      	cmp	r3, #57	; 0x39
 800f210:	d029      	beq.n	800f266 <_dtoa_r+0xabe>
 800f212:	f1b9 0f00 	cmp.w	r9, #0
 800f216:	dd01      	ble.n	800f21c <_dtoa_r+0xa74>
 800f218:	9b06      	ldr	r3, [sp, #24]
 800f21a:	3331      	adds	r3, #49	; 0x31
 800f21c:	9a04      	ldr	r2, [sp, #16]
 800f21e:	7013      	strb	r3, [r2, #0]
 800f220:	e776      	b.n	800f110 <_dtoa_r+0x968>
 800f222:	4630      	mov	r0, r6
 800f224:	e7b9      	b.n	800f19a <_dtoa_r+0x9f2>
 800f226:	2201      	movs	r2, #1
 800f228:	e7e2      	b.n	800f1f0 <_dtoa_r+0xa48>
 800f22a:	f1b9 0f00 	cmp.w	r9, #0
 800f22e:	db06      	blt.n	800f23e <_dtoa_r+0xa96>
 800f230:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f232:	ea41 0909 	orr.w	r9, r1, r9
 800f236:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f238:	ea59 0101 	orrs.w	r1, r9, r1
 800f23c:	d120      	bne.n	800f280 <_dtoa_r+0xad8>
 800f23e:	2a00      	cmp	r2, #0
 800f240:	ddec      	ble.n	800f21c <_dtoa_r+0xa74>
 800f242:	4659      	mov	r1, fp
 800f244:	2201      	movs	r2, #1
 800f246:	4628      	mov	r0, r5
 800f248:	9308      	str	r3, [sp, #32]
 800f24a:	f000 fe93 	bl	800ff74 <__lshift>
 800f24e:	4621      	mov	r1, r4
 800f250:	4683      	mov	fp, r0
 800f252:	f000 feff 	bl	8010054 <__mcmp>
 800f256:	2800      	cmp	r0, #0
 800f258:	9b08      	ldr	r3, [sp, #32]
 800f25a:	dc02      	bgt.n	800f262 <_dtoa_r+0xaba>
 800f25c:	d1de      	bne.n	800f21c <_dtoa_r+0xa74>
 800f25e:	07da      	lsls	r2, r3, #31
 800f260:	d5dc      	bpl.n	800f21c <_dtoa_r+0xa74>
 800f262:	2b39      	cmp	r3, #57	; 0x39
 800f264:	d1d8      	bne.n	800f218 <_dtoa_r+0xa70>
 800f266:	2339      	movs	r3, #57	; 0x39
 800f268:	9a04      	ldr	r2, [sp, #16]
 800f26a:	7013      	strb	r3, [r2, #0]
 800f26c:	463b      	mov	r3, r7
 800f26e:	461f      	mov	r7, r3
 800f270:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f274:	3b01      	subs	r3, #1
 800f276:	2a39      	cmp	r2, #57	; 0x39
 800f278:	d050      	beq.n	800f31c <_dtoa_r+0xb74>
 800f27a:	3201      	adds	r2, #1
 800f27c:	701a      	strb	r2, [r3, #0]
 800f27e:	e747      	b.n	800f110 <_dtoa_r+0x968>
 800f280:	2a00      	cmp	r2, #0
 800f282:	dd03      	ble.n	800f28c <_dtoa_r+0xae4>
 800f284:	2b39      	cmp	r3, #57	; 0x39
 800f286:	d0ee      	beq.n	800f266 <_dtoa_r+0xabe>
 800f288:	3301      	adds	r3, #1
 800f28a:	e7c7      	b.n	800f21c <_dtoa_r+0xa74>
 800f28c:	9a08      	ldr	r2, [sp, #32]
 800f28e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f290:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f294:	428a      	cmp	r2, r1
 800f296:	d02a      	beq.n	800f2ee <_dtoa_r+0xb46>
 800f298:	4659      	mov	r1, fp
 800f29a:	2300      	movs	r3, #0
 800f29c:	220a      	movs	r2, #10
 800f29e:	4628      	mov	r0, r5
 800f2a0:	f000 fc72 	bl	800fb88 <__multadd>
 800f2a4:	45b0      	cmp	r8, r6
 800f2a6:	4683      	mov	fp, r0
 800f2a8:	f04f 0300 	mov.w	r3, #0
 800f2ac:	f04f 020a 	mov.w	r2, #10
 800f2b0:	4641      	mov	r1, r8
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	d107      	bne.n	800f2c6 <_dtoa_r+0xb1e>
 800f2b6:	f000 fc67 	bl	800fb88 <__multadd>
 800f2ba:	4680      	mov	r8, r0
 800f2bc:	4606      	mov	r6, r0
 800f2be:	9b08      	ldr	r3, [sp, #32]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	9308      	str	r3, [sp, #32]
 800f2c4:	e775      	b.n	800f1b2 <_dtoa_r+0xa0a>
 800f2c6:	f000 fc5f 	bl	800fb88 <__multadd>
 800f2ca:	4631      	mov	r1, r6
 800f2cc:	4680      	mov	r8, r0
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	220a      	movs	r2, #10
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f000 fc58 	bl	800fb88 <__multadd>
 800f2d8:	4606      	mov	r6, r0
 800f2da:	e7f0      	b.n	800f2be <_dtoa_r+0xb16>
 800f2dc:	f1b9 0f00 	cmp.w	r9, #0
 800f2e0:	bfcc      	ite	gt
 800f2e2:	464f      	movgt	r7, r9
 800f2e4:	2701      	movle	r7, #1
 800f2e6:	f04f 0800 	mov.w	r8, #0
 800f2ea:	9a03      	ldr	r2, [sp, #12]
 800f2ec:	4417      	add	r7, r2
 800f2ee:	4659      	mov	r1, fp
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	9308      	str	r3, [sp, #32]
 800f2f6:	f000 fe3d 	bl	800ff74 <__lshift>
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	4683      	mov	fp, r0
 800f2fe:	f000 fea9 	bl	8010054 <__mcmp>
 800f302:	2800      	cmp	r0, #0
 800f304:	dcb2      	bgt.n	800f26c <_dtoa_r+0xac4>
 800f306:	d102      	bne.n	800f30e <_dtoa_r+0xb66>
 800f308:	9b08      	ldr	r3, [sp, #32]
 800f30a:	07db      	lsls	r3, r3, #31
 800f30c:	d4ae      	bmi.n	800f26c <_dtoa_r+0xac4>
 800f30e:	463b      	mov	r3, r7
 800f310:	461f      	mov	r7, r3
 800f312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f316:	2a30      	cmp	r2, #48	; 0x30
 800f318:	d0fa      	beq.n	800f310 <_dtoa_r+0xb68>
 800f31a:	e6f9      	b.n	800f110 <_dtoa_r+0x968>
 800f31c:	9a03      	ldr	r2, [sp, #12]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d1a5      	bne.n	800f26e <_dtoa_r+0xac6>
 800f322:	2331      	movs	r3, #49	; 0x31
 800f324:	f10a 0a01 	add.w	sl, sl, #1
 800f328:	e779      	b.n	800f21e <_dtoa_r+0xa76>
 800f32a:	4b14      	ldr	r3, [pc, #80]	; (800f37c <_dtoa_r+0xbd4>)
 800f32c:	f7ff baa8 	b.w	800e880 <_dtoa_r+0xd8>
 800f330:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f332:	2b00      	cmp	r3, #0
 800f334:	f47f aa81 	bne.w	800e83a <_dtoa_r+0x92>
 800f338:	4b11      	ldr	r3, [pc, #68]	; (800f380 <_dtoa_r+0xbd8>)
 800f33a:	f7ff baa1 	b.w	800e880 <_dtoa_r+0xd8>
 800f33e:	f1b9 0f00 	cmp.w	r9, #0
 800f342:	dc03      	bgt.n	800f34c <_dtoa_r+0xba4>
 800f344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f346:	2b02      	cmp	r3, #2
 800f348:	f73f aecb 	bgt.w	800f0e2 <_dtoa_r+0x93a>
 800f34c:	9f03      	ldr	r7, [sp, #12]
 800f34e:	4621      	mov	r1, r4
 800f350:	4658      	mov	r0, fp
 800f352:	f7ff f99d 	bl	800e690 <quorem>
 800f356:	9a03      	ldr	r2, [sp, #12]
 800f358:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f35c:	f807 3b01 	strb.w	r3, [r7], #1
 800f360:	1aba      	subs	r2, r7, r2
 800f362:	4591      	cmp	r9, r2
 800f364:	ddba      	ble.n	800f2dc <_dtoa_r+0xb34>
 800f366:	4659      	mov	r1, fp
 800f368:	2300      	movs	r3, #0
 800f36a:	220a      	movs	r2, #10
 800f36c:	4628      	mov	r0, r5
 800f36e:	f000 fc0b 	bl	800fb88 <__multadd>
 800f372:	4683      	mov	fp, r0
 800f374:	e7eb      	b.n	800f34e <_dtoa_r+0xba6>
 800f376:	bf00      	nop
 800f378:	0801193f 	.word	0x0801193f
 800f37c:	08011848 	.word	0x08011848
 800f380:	080118c0 	.word	0x080118c0

0800f384 <rshift>:
 800f384:	6903      	ldr	r3, [r0, #16]
 800f386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f38a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f38e:	f100 0414 	add.w	r4, r0, #20
 800f392:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f396:	dd46      	ble.n	800f426 <rshift+0xa2>
 800f398:	f011 011f 	ands.w	r1, r1, #31
 800f39c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f3a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f3a4:	d10c      	bne.n	800f3c0 <rshift+0x3c>
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	f100 0710 	add.w	r7, r0, #16
 800f3ac:	42b1      	cmp	r1, r6
 800f3ae:	d335      	bcc.n	800f41c <rshift+0x98>
 800f3b0:	1a9b      	subs	r3, r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	1eea      	subs	r2, r5, #3
 800f3b6:	4296      	cmp	r6, r2
 800f3b8:	bf38      	it	cc
 800f3ba:	2300      	movcc	r3, #0
 800f3bc:	4423      	add	r3, r4
 800f3be:	e015      	b.n	800f3ec <rshift+0x68>
 800f3c0:	46a1      	mov	r9, r4
 800f3c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f3c6:	f1c1 0820 	rsb	r8, r1, #32
 800f3ca:	40cf      	lsrs	r7, r1
 800f3cc:	f105 0e04 	add.w	lr, r5, #4
 800f3d0:	4576      	cmp	r6, lr
 800f3d2:	46f4      	mov	ip, lr
 800f3d4:	d816      	bhi.n	800f404 <rshift+0x80>
 800f3d6:	1a9a      	subs	r2, r3, r2
 800f3d8:	0092      	lsls	r2, r2, #2
 800f3da:	3a04      	subs	r2, #4
 800f3dc:	3501      	adds	r5, #1
 800f3de:	42ae      	cmp	r6, r5
 800f3e0:	bf38      	it	cc
 800f3e2:	2200      	movcc	r2, #0
 800f3e4:	18a3      	adds	r3, r4, r2
 800f3e6:	50a7      	str	r7, [r4, r2]
 800f3e8:	b107      	cbz	r7, 800f3ec <rshift+0x68>
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	42a3      	cmp	r3, r4
 800f3ee:	eba3 0204 	sub.w	r2, r3, r4
 800f3f2:	bf08      	it	eq
 800f3f4:	2300      	moveq	r3, #0
 800f3f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f3fa:	6102      	str	r2, [r0, #16]
 800f3fc:	bf08      	it	eq
 800f3fe:	6143      	streq	r3, [r0, #20]
 800f400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f404:	f8dc c000 	ldr.w	ip, [ip]
 800f408:	fa0c fc08 	lsl.w	ip, ip, r8
 800f40c:	ea4c 0707 	orr.w	r7, ip, r7
 800f410:	f849 7b04 	str.w	r7, [r9], #4
 800f414:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f418:	40cf      	lsrs	r7, r1
 800f41a:	e7d9      	b.n	800f3d0 <rshift+0x4c>
 800f41c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f420:	f847 cf04 	str.w	ip, [r7, #4]!
 800f424:	e7c2      	b.n	800f3ac <rshift+0x28>
 800f426:	4623      	mov	r3, r4
 800f428:	e7e0      	b.n	800f3ec <rshift+0x68>

0800f42a <__hexdig_fun>:
 800f42a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f42e:	2b09      	cmp	r3, #9
 800f430:	d802      	bhi.n	800f438 <__hexdig_fun+0xe>
 800f432:	3820      	subs	r0, #32
 800f434:	b2c0      	uxtb	r0, r0
 800f436:	4770      	bx	lr
 800f438:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f43c:	2b05      	cmp	r3, #5
 800f43e:	d801      	bhi.n	800f444 <__hexdig_fun+0x1a>
 800f440:	3847      	subs	r0, #71	; 0x47
 800f442:	e7f7      	b.n	800f434 <__hexdig_fun+0xa>
 800f444:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f448:	2b05      	cmp	r3, #5
 800f44a:	d801      	bhi.n	800f450 <__hexdig_fun+0x26>
 800f44c:	3827      	subs	r0, #39	; 0x27
 800f44e:	e7f1      	b.n	800f434 <__hexdig_fun+0xa>
 800f450:	2000      	movs	r0, #0
 800f452:	4770      	bx	lr

0800f454 <__gethex>:
 800f454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f458:	b08b      	sub	sp, #44	; 0x2c
 800f45a:	9305      	str	r3, [sp, #20]
 800f45c:	4bb2      	ldr	r3, [pc, #712]	; (800f728 <__gethex+0x2d4>)
 800f45e:	9002      	str	r0, [sp, #8]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	468b      	mov	fp, r1
 800f464:	4618      	mov	r0, r3
 800f466:	4690      	mov	r8, r2
 800f468:	9303      	str	r3, [sp, #12]
 800f46a:	f7f0 fe89 	bl	8000180 <strlen>
 800f46e:	4682      	mov	sl, r0
 800f470:	9b03      	ldr	r3, [sp, #12]
 800f472:	f8db 2000 	ldr.w	r2, [fp]
 800f476:	4403      	add	r3, r0
 800f478:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f47c:	9306      	str	r3, [sp, #24]
 800f47e:	1c93      	adds	r3, r2, #2
 800f480:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f484:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f488:	32fe      	adds	r2, #254	; 0xfe
 800f48a:	18d1      	adds	r1, r2, r3
 800f48c:	461f      	mov	r7, r3
 800f48e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f492:	9101      	str	r1, [sp, #4]
 800f494:	2830      	cmp	r0, #48	; 0x30
 800f496:	d0f8      	beq.n	800f48a <__gethex+0x36>
 800f498:	f7ff ffc7 	bl	800f42a <__hexdig_fun>
 800f49c:	4604      	mov	r4, r0
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	d13a      	bne.n	800f518 <__gethex+0xc4>
 800f4a2:	4652      	mov	r2, sl
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	9903      	ldr	r1, [sp, #12]
 800f4a8:	f7fe fac6 	bl	800da38 <strncmp>
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d166      	bne.n	800f580 <__gethex+0x12c>
 800f4b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f4b6:	eb07 060a 	add.w	r6, r7, sl
 800f4ba:	f7ff ffb6 	bl	800f42a <__hexdig_fun>
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d060      	beq.n	800f584 <__gethex+0x130>
 800f4c2:	4633      	mov	r3, r6
 800f4c4:	7818      	ldrb	r0, [r3, #0]
 800f4c6:	461f      	mov	r7, r3
 800f4c8:	2830      	cmp	r0, #48	; 0x30
 800f4ca:	f103 0301 	add.w	r3, r3, #1
 800f4ce:	d0f9      	beq.n	800f4c4 <__gethex+0x70>
 800f4d0:	f7ff ffab 	bl	800f42a <__hexdig_fun>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	fab0 f480 	clz	r4, r0
 800f4da:	4635      	mov	r5, r6
 800f4dc:	0964      	lsrs	r4, r4, #5
 800f4de:	9301      	str	r3, [sp, #4]
 800f4e0:	463a      	mov	r2, r7
 800f4e2:	4616      	mov	r6, r2
 800f4e4:	7830      	ldrb	r0, [r6, #0]
 800f4e6:	3201      	adds	r2, #1
 800f4e8:	f7ff ff9f 	bl	800f42a <__hexdig_fun>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d1f8      	bne.n	800f4e2 <__gethex+0x8e>
 800f4f0:	4652      	mov	r2, sl
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	9903      	ldr	r1, [sp, #12]
 800f4f6:	f7fe fa9f 	bl	800da38 <strncmp>
 800f4fa:	b980      	cbnz	r0, 800f51e <__gethex+0xca>
 800f4fc:	b94d      	cbnz	r5, 800f512 <__gethex+0xbe>
 800f4fe:	eb06 050a 	add.w	r5, r6, sl
 800f502:	462a      	mov	r2, r5
 800f504:	4616      	mov	r6, r2
 800f506:	7830      	ldrb	r0, [r6, #0]
 800f508:	3201      	adds	r2, #1
 800f50a:	f7ff ff8e 	bl	800f42a <__hexdig_fun>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d1f8      	bne.n	800f504 <__gethex+0xb0>
 800f512:	1bad      	subs	r5, r5, r6
 800f514:	00ad      	lsls	r5, r5, #2
 800f516:	e004      	b.n	800f522 <__gethex+0xce>
 800f518:	2400      	movs	r4, #0
 800f51a:	4625      	mov	r5, r4
 800f51c:	e7e0      	b.n	800f4e0 <__gethex+0x8c>
 800f51e:	2d00      	cmp	r5, #0
 800f520:	d1f7      	bne.n	800f512 <__gethex+0xbe>
 800f522:	7833      	ldrb	r3, [r6, #0]
 800f524:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f528:	2b50      	cmp	r3, #80	; 0x50
 800f52a:	d139      	bne.n	800f5a0 <__gethex+0x14c>
 800f52c:	7873      	ldrb	r3, [r6, #1]
 800f52e:	2b2b      	cmp	r3, #43	; 0x2b
 800f530:	d02a      	beq.n	800f588 <__gethex+0x134>
 800f532:	2b2d      	cmp	r3, #45	; 0x2d
 800f534:	d02c      	beq.n	800f590 <__gethex+0x13c>
 800f536:	f04f 0900 	mov.w	r9, #0
 800f53a:	1c71      	adds	r1, r6, #1
 800f53c:	7808      	ldrb	r0, [r1, #0]
 800f53e:	f7ff ff74 	bl	800f42a <__hexdig_fun>
 800f542:	1e43      	subs	r3, r0, #1
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b18      	cmp	r3, #24
 800f548:	d82a      	bhi.n	800f5a0 <__gethex+0x14c>
 800f54a:	f1a0 0210 	sub.w	r2, r0, #16
 800f54e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f552:	f7ff ff6a 	bl	800f42a <__hexdig_fun>
 800f556:	1e43      	subs	r3, r0, #1
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2b18      	cmp	r3, #24
 800f55c:	d91b      	bls.n	800f596 <__gethex+0x142>
 800f55e:	f1b9 0f00 	cmp.w	r9, #0
 800f562:	d000      	beq.n	800f566 <__gethex+0x112>
 800f564:	4252      	negs	r2, r2
 800f566:	4415      	add	r5, r2
 800f568:	f8cb 1000 	str.w	r1, [fp]
 800f56c:	b1d4      	cbz	r4, 800f5a4 <__gethex+0x150>
 800f56e:	9b01      	ldr	r3, [sp, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	bf14      	ite	ne
 800f574:	2700      	movne	r7, #0
 800f576:	2706      	moveq	r7, #6
 800f578:	4638      	mov	r0, r7
 800f57a:	b00b      	add	sp, #44	; 0x2c
 800f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f580:	463e      	mov	r6, r7
 800f582:	4625      	mov	r5, r4
 800f584:	2401      	movs	r4, #1
 800f586:	e7cc      	b.n	800f522 <__gethex+0xce>
 800f588:	f04f 0900 	mov.w	r9, #0
 800f58c:	1cb1      	adds	r1, r6, #2
 800f58e:	e7d5      	b.n	800f53c <__gethex+0xe8>
 800f590:	f04f 0901 	mov.w	r9, #1
 800f594:	e7fa      	b.n	800f58c <__gethex+0x138>
 800f596:	230a      	movs	r3, #10
 800f598:	fb03 0202 	mla	r2, r3, r2, r0
 800f59c:	3a10      	subs	r2, #16
 800f59e:	e7d6      	b.n	800f54e <__gethex+0xfa>
 800f5a0:	4631      	mov	r1, r6
 800f5a2:	e7e1      	b.n	800f568 <__gethex+0x114>
 800f5a4:	4621      	mov	r1, r4
 800f5a6:	1bf3      	subs	r3, r6, r7
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	2b07      	cmp	r3, #7
 800f5ac:	dc0a      	bgt.n	800f5c4 <__gethex+0x170>
 800f5ae:	9802      	ldr	r0, [sp, #8]
 800f5b0:	f000 fa88 	bl	800fac4 <_Balloc>
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	b940      	cbnz	r0, 800f5ca <__gethex+0x176>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	21de      	movs	r1, #222	; 0xde
 800f5bc:	4b5b      	ldr	r3, [pc, #364]	; (800f72c <__gethex+0x2d8>)
 800f5be:	485c      	ldr	r0, [pc, #368]	; (800f730 <__gethex+0x2dc>)
 800f5c0:	f001 f9a8 	bl	8010914 <__assert_func>
 800f5c4:	3101      	adds	r1, #1
 800f5c6:	105b      	asrs	r3, r3, #1
 800f5c8:	e7ef      	b.n	800f5aa <__gethex+0x156>
 800f5ca:	f04f 0b00 	mov.w	fp, #0
 800f5ce:	f100 0914 	add.w	r9, r0, #20
 800f5d2:	f1ca 0301 	rsb	r3, sl, #1
 800f5d6:	f8cd 9010 	str.w	r9, [sp, #16]
 800f5da:	f8cd b004 	str.w	fp, [sp, #4]
 800f5de:	9308      	str	r3, [sp, #32]
 800f5e0:	42b7      	cmp	r7, r6
 800f5e2:	d33f      	bcc.n	800f664 <__gethex+0x210>
 800f5e4:	9f04      	ldr	r7, [sp, #16]
 800f5e6:	9b01      	ldr	r3, [sp, #4]
 800f5e8:	f847 3b04 	str.w	r3, [r7], #4
 800f5ec:	eba7 0709 	sub.w	r7, r7, r9
 800f5f0:	10bf      	asrs	r7, r7, #2
 800f5f2:	6127      	str	r7, [r4, #16]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f000 fb57 	bl	800fca8 <__hi0bits>
 800f5fa:	017f      	lsls	r7, r7, #5
 800f5fc:	f8d8 6000 	ldr.w	r6, [r8]
 800f600:	1a3f      	subs	r7, r7, r0
 800f602:	42b7      	cmp	r7, r6
 800f604:	dd62      	ble.n	800f6cc <__gethex+0x278>
 800f606:	1bbf      	subs	r7, r7, r6
 800f608:	4639      	mov	r1, r7
 800f60a:	4620      	mov	r0, r4
 800f60c:	f000 fef1 	bl	80103f2 <__any_on>
 800f610:	4682      	mov	sl, r0
 800f612:	b1a8      	cbz	r0, 800f640 <__gethex+0x1ec>
 800f614:	f04f 0a01 	mov.w	sl, #1
 800f618:	1e7b      	subs	r3, r7, #1
 800f61a:	1159      	asrs	r1, r3, #5
 800f61c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f620:	f003 021f 	and.w	r2, r3, #31
 800f624:	fa0a f202 	lsl.w	r2, sl, r2
 800f628:	420a      	tst	r2, r1
 800f62a:	d009      	beq.n	800f640 <__gethex+0x1ec>
 800f62c:	4553      	cmp	r3, sl
 800f62e:	dd05      	ble.n	800f63c <__gethex+0x1e8>
 800f630:	4620      	mov	r0, r4
 800f632:	1eb9      	subs	r1, r7, #2
 800f634:	f000 fedd 	bl	80103f2 <__any_on>
 800f638:	2800      	cmp	r0, #0
 800f63a:	d144      	bne.n	800f6c6 <__gethex+0x272>
 800f63c:	f04f 0a02 	mov.w	sl, #2
 800f640:	4639      	mov	r1, r7
 800f642:	4620      	mov	r0, r4
 800f644:	f7ff fe9e 	bl	800f384 <rshift>
 800f648:	443d      	add	r5, r7
 800f64a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f64e:	42ab      	cmp	r3, r5
 800f650:	da4a      	bge.n	800f6e8 <__gethex+0x294>
 800f652:	4621      	mov	r1, r4
 800f654:	9802      	ldr	r0, [sp, #8]
 800f656:	f000 fa75 	bl	800fb44 <_Bfree>
 800f65a:	2300      	movs	r3, #0
 800f65c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f65e:	27a3      	movs	r7, #163	; 0xa3
 800f660:	6013      	str	r3, [r2, #0]
 800f662:	e789      	b.n	800f578 <__gethex+0x124>
 800f664:	1e73      	subs	r3, r6, #1
 800f666:	9a06      	ldr	r2, [sp, #24]
 800f668:	9307      	str	r3, [sp, #28]
 800f66a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f66e:	4293      	cmp	r3, r2
 800f670:	d019      	beq.n	800f6a6 <__gethex+0x252>
 800f672:	f1bb 0f20 	cmp.w	fp, #32
 800f676:	d107      	bne.n	800f688 <__gethex+0x234>
 800f678:	9b04      	ldr	r3, [sp, #16]
 800f67a:	9a01      	ldr	r2, [sp, #4]
 800f67c:	f843 2b04 	str.w	r2, [r3], #4
 800f680:	9304      	str	r3, [sp, #16]
 800f682:	2300      	movs	r3, #0
 800f684:	469b      	mov	fp, r3
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f68c:	f7ff fecd 	bl	800f42a <__hexdig_fun>
 800f690:	9b01      	ldr	r3, [sp, #4]
 800f692:	f000 000f 	and.w	r0, r0, #15
 800f696:	fa00 f00b 	lsl.w	r0, r0, fp
 800f69a:	4303      	orrs	r3, r0
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	f10b 0b04 	add.w	fp, fp, #4
 800f6a2:	9b07      	ldr	r3, [sp, #28]
 800f6a4:	e00d      	b.n	800f6c2 <__gethex+0x26e>
 800f6a6:	9a08      	ldr	r2, [sp, #32]
 800f6a8:	1e73      	subs	r3, r6, #1
 800f6aa:	4413      	add	r3, r2
 800f6ac:	42bb      	cmp	r3, r7
 800f6ae:	d3e0      	bcc.n	800f672 <__gethex+0x21e>
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	4652      	mov	r2, sl
 800f6b4:	9903      	ldr	r1, [sp, #12]
 800f6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6b8:	f7fe f9be 	bl	800da38 <strncmp>
 800f6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d1d7      	bne.n	800f672 <__gethex+0x21e>
 800f6c2:	461e      	mov	r6, r3
 800f6c4:	e78c      	b.n	800f5e0 <__gethex+0x18c>
 800f6c6:	f04f 0a03 	mov.w	sl, #3
 800f6ca:	e7b9      	b.n	800f640 <__gethex+0x1ec>
 800f6cc:	da09      	bge.n	800f6e2 <__gethex+0x28e>
 800f6ce:	1bf7      	subs	r7, r6, r7
 800f6d0:	4621      	mov	r1, r4
 800f6d2:	463a      	mov	r2, r7
 800f6d4:	9802      	ldr	r0, [sp, #8]
 800f6d6:	f000 fc4d 	bl	800ff74 <__lshift>
 800f6da:	4604      	mov	r4, r0
 800f6dc:	1bed      	subs	r5, r5, r7
 800f6de:	f100 0914 	add.w	r9, r0, #20
 800f6e2:	f04f 0a00 	mov.w	sl, #0
 800f6e6:	e7b0      	b.n	800f64a <__gethex+0x1f6>
 800f6e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f6ec:	42a8      	cmp	r0, r5
 800f6ee:	dd72      	ble.n	800f7d6 <__gethex+0x382>
 800f6f0:	1b45      	subs	r5, r0, r5
 800f6f2:	42ae      	cmp	r6, r5
 800f6f4:	dc35      	bgt.n	800f762 <__gethex+0x30e>
 800f6f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d029      	beq.n	800f752 <__gethex+0x2fe>
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d02b      	beq.n	800f75a <__gethex+0x306>
 800f702:	2b01      	cmp	r3, #1
 800f704:	d11c      	bne.n	800f740 <__gethex+0x2ec>
 800f706:	42ae      	cmp	r6, r5
 800f708:	d11a      	bne.n	800f740 <__gethex+0x2ec>
 800f70a:	2e01      	cmp	r6, #1
 800f70c:	d112      	bne.n	800f734 <__gethex+0x2e0>
 800f70e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f712:	9a05      	ldr	r2, [sp, #20]
 800f714:	2762      	movs	r7, #98	; 0x62
 800f716:	6013      	str	r3, [r2, #0]
 800f718:	2301      	movs	r3, #1
 800f71a:	6123      	str	r3, [r4, #16]
 800f71c:	f8c9 3000 	str.w	r3, [r9]
 800f720:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f722:	601c      	str	r4, [r3, #0]
 800f724:	e728      	b.n	800f578 <__gethex+0x124>
 800f726:	bf00      	nop
 800f728:	080119b8 	.word	0x080119b8
 800f72c:	0801193f 	.word	0x0801193f
 800f730:	08011950 	.word	0x08011950
 800f734:	4620      	mov	r0, r4
 800f736:	1e71      	subs	r1, r6, #1
 800f738:	f000 fe5b 	bl	80103f2 <__any_on>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d1e6      	bne.n	800f70e <__gethex+0x2ba>
 800f740:	4621      	mov	r1, r4
 800f742:	9802      	ldr	r0, [sp, #8]
 800f744:	f000 f9fe 	bl	800fb44 <_Bfree>
 800f748:	2300      	movs	r3, #0
 800f74a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f74c:	2750      	movs	r7, #80	; 0x50
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	e712      	b.n	800f578 <__gethex+0x124>
 800f752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1f3      	bne.n	800f740 <__gethex+0x2ec>
 800f758:	e7d9      	b.n	800f70e <__gethex+0x2ba>
 800f75a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1d6      	bne.n	800f70e <__gethex+0x2ba>
 800f760:	e7ee      	b.n	800f740 <__gethex+0x2ec>
 800f762:	1e6f      	subs	r7, r5, #1
 800f764:	f1ba 0f00 	cmp.w	sl, #0
 800f768:	d132      	bne.n	800f7d0 <__gethex+0x37c>
 800f76a:	b127      	cbz	r7, 800f776 <__gethex+0x322>
 800f76c:	4639      	mov	r1, r7
 800f76e:	4620      	mov	r0, r4
 800f770:	f000 fe3f 	bl	80103f2 <__any_on>
 800f774:	4682      	mov	sl, r0
 800f776:	2101      	movs	r1, #1
 800f778:	117b      	asrs	r3, r7, #5
 800f77a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f77e:	f007 071f 	and.w	r7, r7, #31
 800f782:	fa01 f707 	lsl.w	r7, r1, r7
 800f786:	421f      	tst	r7, r3
 800f788:	f04f 0702 	mov.w	r7, #2
 800f78c:	4629      	mov	r1, r5
 800f78e:	4620      	mov	r0, r4
 800f790:	bf18      	it	ne
 800f792:	f04a 0a02 	orrne.w	sl, sl, #2
 800f796:	1b76      	subs	r6, r6, r5
 800f798:	f7ff fdf4 	bl	800f384 <rshift>
 800f79c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f7a0:	f1ba 0f00 	cmp.w	sl, #0
 800f7a4:	d048      	beq.n	800f838 <__gethex+0x3e4>
 800f7a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d015      	beq.n	800f7da <__gethex+0x386>
 800f7ae:	2b03      	cmp	r3, #3
 800f7b0:	d017      	beq.n	800f7e2 <__gethex+0x38e>
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d109      	bne.n	800f7ca <__gethex+0x376>
 800f7b6:	f01a 0f02 	tst.w	sl, #2
 800f7ba:	d006      	beq.n	800f7ca <__gethex+0x376>
 800f7bc:	f8d9 0000 	ldr.w	r0, [r9]
 800f7c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f7c4:	f01a 0f01 	tst.w	sl, #1
 800f7c8:	d10e      	bne.n	800f7e8 <__gethex+0x394>
 800f7ca:	f047 0710 	orr.w	r7, r7, #16
 800f7ce:	e033      	b.n	800f838 <__gethex+0x3e4>
 800f7d0:	f04f 0a01 	mov.w	sl, #1
 800f7d4:	e7cf      	b.n	800f776 <__gethex+0x322>
 800f7d6:	2701      	movs	r7, #1
 800f7d8:	e7e2      	b.n	800f7a0 <__gethex+0x34c>
 800f7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7dc:	f1c3 0301 	rsb	r3, r3, #1
 800f7e0:	9315      	str	r3, [sp, #84]	; 0x54
 800f7e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d0f0      	beq.n	800f7ca <__gethex+0x376>
 800f7e8:	f04f 0c00 	mov.w	ip, #0
 800f7ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f7f0:	f104 0314 	add.w	r3, r4, #20
 800f7f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f7f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f802:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f806:	d01c      	beq.n	800f842 <__gethex+0x3ee>
 800f808:	3201      	adds	r2, #1
 800f80a:	6002      	str	r2, [r0, #0]
 800f80c:	2f02      	cmp	r7, #2
 800f80e:	f104 0314 	add.w	r3, r4, #20
 800f812:	d13d      	bne.n	800f890 <__gethex+0x43c>
 800f814:	f8d8 2000 	ldr.w	r2, [r8]
 800f818:	3a01      	subs	r2, #1
 800f81a:	42b2      	cmp	r2, r6
 800f81c:	d10a      	bne.n	800f834 <__gethex+0x3e0>
 800f81e:	2201      	movs	r2, #1
 800f820:	1171      	asrs	r1, r6, #5
 800f822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f826:	f006 061f 	and.w	r6, r6, #31
 800f82a:	fa02 f606 	lsl.w	r6, r2, r6
 800f82e:	421e      	tst	r6, r3
 800f830:	bf18      	it	ne
 800f832:	4617      	movne	r7, r2
 800f834:	f047 0720 	orr.w	r7, r7, #32
 800f838:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f83a:	601c      	str	r4, [r3, #0]
 800f83c:	9b05      	ldr	r3, [sp, #20]
 800f83e:	601d      	str	r5, [r3, #0]
 800f840:	e69a      	b.n	800f578 <__gethex+0x124>
 800f842:	4299      	cmp	r1, r3
 800f844:	f843 cc04 	str.w	ip, [r3, #-4]
 800f848:	d8d8      	bhi.n	800f7fc <__gethex+0x3a8>
 800f84a:	68a3      	ldr	r3, [r4, #8]
 800f84c:	459b      	cmp	fp, r3
 800f84e:	db17      	blt.n	800f880 <__gethex+0x42c>
 800f850:	6861      	ldr	r1, [r4, #4]
 800f852:	9802      	ldr	r0, [sp, #8]
 800f854:	3101      	adds	r1, #1
 800f856:	f000 f935 	bl	800fac4 <_Balloc>
 800f85a:	4681      	mov	r9, r0
 800f85c:	b918      	cbnz	r0, 800f866 <__gethex+0x412>
 800f85e:	4602      	mov	r2, r0
 800f860:	2184      	movs	r1, #132	; 0x84
 800f862:	4b19      	ldr	r3, [pc, #100]	; (800f8c8 <__gethex+0x474>)
 800f864:	e6ab      	b.n	800f5be <__gethex+0x16a>
 800f866:	6922      	ldr	r2, [r4, #16]
 800f868:	f104 010c 	add.w	r1, r4, #12
 800f86c:	3202      	adds	r2, #2
 800f86e:	0092      	lsls	r2, r2, #2
 800f870:	300c      	adds	r0, #12
 800f872:	f000 f919 	bl	800faa8 <memcpy>
 800f876:	4621      	mov	r1, r4
 800f878:	9802      	ldr	r0, [sp, #8]
 800f87a:	f000 f963 	bl	800fb44 <_Bfree>
 800f87e:	464c      	mov	r4, r9
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	1c5a      	adds	r2, r3, #1
 800f884:	6122      	str	r2, [r4, #16]
 800f886:	2201      	movs	r2, #1
 800f888:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f88c:	615a      	str	r2, [r3, #20]
 800f88e:	e7bd      	b.n	800f80c <__gethex+0x3b8>
 800f890:	6922      	ldr	r2, [r4, #16]
 800f892:	455a      	cmp	r2, fp
 800f894:	dd0b      	ble.n	800f8ae <__gethex+0x45a>
 800f896:	2101      	movs	r1, #1
 800f898:	4620      	mov	r0, r4
 800f89a:	f7ff fd73 	bl	800f384 <rshift>
 800f89e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8a2:	3501      	adds	r5, #1
 800f8a4:	42ab      	cmp	r3, r5
 800f8a6:	f6ff aed4 	blt.w	800f652 <__gethex+0x1fe>
 800f8aa:	2701      	movs	r7, #1
 800f8ac:	e7c2      	b.n	800f834 <__gethex+0x3e0>
 800f8ae:	f016 061f 	ands.w	r6, r6, #31
 800f8b2:	d0fa      	beq.n	800f8aa <__gethex+0x456>
 800f8b4:	4453      	add	r3, sl
 800f8b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f8ba:	f000 f9f5 	bl	800fca8 <__hi0bits>
 800f8be:	f1c6 0620 	rsb	r6, r6, #32
 800f8c2:	42b0      	cmp	r0, r6
 800f8c4:	dbe7      	blt.n	800f896 <__gethex+0x442>
 800f8c6:	e7f0      	b.n	800f8aa <__gethex+0x456>
 800f8c8:	0801193f 	.word	0x0801193f

0800f8cc <L_shift>:
 800f8cc:	f1c2 0208 	rsb	r2, r2, #8
 800f8d0:	0092      	lsls	r2, r2, #2
 800f8d2:	b570      	push	{r4, r5, r6, lr}
 800f8d4:	f1c2 0620 	rsb	r6, r2, #32
 800f8d8:	6843      	ldr	r3, [r0, #4]
 800f8da:	6804      	ldr	r4, [r0, #0]
 800f8dc:	fa03 f506 	lsl.w	r5, r3, r6
 800f8e0:	432c      	orrs	r4, r5
 800f8e2:	40d3      	lsrs	r3, r2
 800f8e4:	6004      	str	r4, [r0, #0]
 800f8e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f8ea:	4288      	cmp	r0, r1
 800f8ec:	d3f4      	bcc.n	800f8d8 <L_shift+0xc>
 800f8ee:	bd70      	pop	{r4, r5, r6, pc}

0800f8f0 <__match>:
 800f8f0:	b530      	push	{r4, r5, lr}
 800f8f2:	6803      	ldr	r3, [r0, #0]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8fa:	b914      	cbnz	r4, 800f902 <__match+0x12>
 800f8fc:	6003      	str	r3, [r0, #0]
 800f8fe:	2001      	movs	r0, #1
 800f900:	bd30      	pop	{r4, r5, pc}
 800f902:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f906:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f90a:	2d19      	cmp	r5, #25
 800f90c:	bf98      	it	ls
 800f90e:	3220      	addls	r2, #32
 800f910:	42a2      	cmp	r2, r4
 800f912:	d0f0      	beq.n	800f8f6 <__match+0x6>
 800f914:	2000      	movs	r0, #0
 800f916:	e7f3      	b.n	800f900 <__match+0x10>

0800f918 <__hexnan>:
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	2500      	movs	r5, #0
 800f91e:	680b      	ldr	r3, [r1, #0]
 800f920:	4682      	mov	sl, r0
 800f922:	115e      	asrs	r6, r3, #5
 800f924:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f928:	f013 031f 	ands.w	r3, r3, #31
 800f92c:	bf18      	it	ne
 800f92e:	3604      	addne	r6, #4
 800f930:	1f37      	subs	r7, r6, #4
 800f932:	46b9      	mov	r9, r7
 800f934:	463c      	mov	r4, r7
 800f936:	46ab      	mov	fp, r5
 800f938:	b087      	sub	sp, #28
 800f93a:	4690      	mov	r8, r2
 800f93c:	6802      	ldr	r2, [r0, #0]
 800f93e:	9301      	str	r3, [sp, #4]
 800f940:	f846 5c04 	str.w	r5, [r6, #-4]
 800f944:	9502      	str	r5, [sp, #8]
 800f946:	7851      	ldrb	r1, [r2, #1]
 800f948:	1c53      	adds	r3, r2, #1
 800f94a:	9303      	str	r3, [sp, #12]
 800f94c:	b341      	cbz	r1, 800f9a0 <__hexnan+0x88>
 800f94e:	4608      	mov	r0, r1
 800f950:	9205      	str	r2, [sp, #20]
 800f952:	9104      	str	r1, [sp, #16]
 800f954:	f7ff fd69 	bl	800f42a <__hexdig_fun>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d14f      	bne.n	800f9fc <__hexnan+0xe4>
 800f95c:	9904      	ldr	r1, [sp, #16]
 800f95e:	9a05      	ldr	r2, [sp, #20]
 800f960:	2920      	cmp	r1, #32
 800f962:	d818      	bhi.n	800f996 <__hexnan+0x7e>
 800f964:	9b02      	ldr	r3, [sp, #8]
 800f966:	459b      	cmp	fp, r3
 800f968:	dd13      	ble.n	800f992 <__hexnan+0x7a>
 800f96a:	454c      	cmp	r4, r9
 800f96c:	d206      	bcs.n	800f97c <__hexnan+0x64>
 800f96e:	2d07      	cmp	r5, #7
 800f970:	dc04      	bgt.n	800f97c <__hexnan+0x64>
 800f972:	462a      	mov	r2, r5
 800f974:	4649      	mov	r1, r9
 800f976:	4620      	mov	r0, r4
 800f978:	f7ff ffa8 	bl	800f8cc <L_shift>
 800f97c:	4544      	cmp	r4, r8
 800f97e:	d950      	bls.n	800fa22 <__hexnan+0x10a>
 800f980:	2300      	movs	r3, #0
 800f982:	f1a4 0904 	sub.w	r9, r4, #4
 800f986:	f844 3c04 	str.w	r3, [r4, #-4]
 800f98a:	461d      	mov	r5, r3
 800f98c:	464c      	mov	r4, r9
 800f98e:	f8cd b008 	str.w	fp, [sp, #8]
 800f992:	9a03      	ldr	r2, [sp, #12]
 800f994:	e7d7      	b.n	800f946 <__hexnan+0x2e>
 800f996:	2929      	cmp	r1, #41	; 0x29
 800f998:	d156      	bne.n	800fa48 <__hexnan+0x130>
 800f99a:	3202      	adds	r2, #2
 800f99c:	f8ca 2000 	str.w	r2, [sl]
 800f9a0:	f1bb 0f00 	cmp.w	fp, #0
 800f9a4:	d050      	beq.n	800fa48 <__hexnan+0x130>
 800f9a6:	454c      	cmp	r4, r9
 800f9a8:	d206      	bcs.n	800f9b8 <__hexnan+0xa0>
 800f9aa:	2d07      	cmp	r5, #7
 800f9ac:	dc04      	bgt.n	800f9b8 <__hexnan+0xa0>
 800f9ae:	462a      	mov	r2, r5
 800f9b0:	4649      	mov	r1, r9
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f7ff ff8a 	bl	800f8cc <L_shift>
 800f9b8:	4544      	cmp	r4, r8
 800f9ba:	d934      	bls.n	800fa26 <__hexnan+0x10e>
 800f9bc:	4623      	mov	r3, r4
 800f9be:	f1a8 0204 	sub.w	r2, r8, #4
 800f9c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f9c6:	429f      	cmp	r7, r3
 800f9c8:	f842 1f04 	str.w	r1, [r2, #4]!
 800f9cc:	d2f9      	bcs.n	800f9c2 <__hexnan+0xaa>
 800f9ce:	1b3b      	subs	r3, r7, r4
 800f9d0:	f023 0303 	bic.w	r3, r3, #3
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	3401      	adds	r4, #1
 800f9d8:	3e03      	subs	r6, #3
 800f9da:	42b4      	cmp	r4, r6
 800f9dc:	bf88      	it	hi
 800f9de:	2304      	movhi	r3, #4
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	4443      	add	r3, r8
 800f9e4:	f843 2b04 	str.w	r2, [r3], #4
 800f9e8:	429f      	cmp	r7, r3
 800f9ea:	d2fb      	bcs.n	800f9e4 <__hexnan+0xcc>
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	b91b      	cbnz	r3, 800f9f8 <__hexnan+0xe0>
 800f9f0:	4547      	cmp	r7, r8
 800f9f2:	d127      	bne.n	800fa44 <__hexnan+0x12c>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	603b      	str	r3, [r7, #0]
 800f9f8:	2005      	movs	r0, #5
 800f9fa:	e026      	b.n	800fa4a <__hexnan+0x132>
 800f9fc:	3501      	adds	r5, #1
 800f9fe:	2d08      	cmp	r5, #8
 800fa00:	f10b 0b01 	add.w	fp, fp, #1
 800fa04:	dd06      	ble.n	800fa14 <__hexnan+0xfc>
 800fa06:	4544      	cmp	r4, r8
 800fa08:	d9c3      	bls.n	800f992 <__hexnan+0x7a>
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	2501      	movs	r5, #1
 800fa0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa12:	3c04      	subs	r4, #4
 800fa14:	6822      	ldr	r2, [r4, #0]
 800fa16:	f000 000f 	and.w	r0, r0, #15
 800fa1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fa1e:	6022      	str	r2, [r4, #0]
 800fa20:	e7b7      	b.n	800f992 <__hexnan+0x7a>
 800fa22:	2508      	movs	r5, #8
 800fa24:	e7b5      	b.n	800f992 <__hexnan+0x7a>
 800fa26:	9b01      	ldr	r3, [sp, #4]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d0df      	beq.n	800f9ec <__hexnan+0xd4>
 800fa2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa30:	f1c3 0320 	rsb	r3, r3, #32
 800fa34:	fa22 f303 	lsr.w	r3, r2, r3
 800fa38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa3c:	401a      	ands	r2, r3
 800fa3e:	f846 2c04 	str.w	r2, [r6, #-4]
 800fa42:	e7d3      	b.n	800f9ec <__hexnan+0xd4>
 800fa44:	3f04      	subs	r7, #4
 800fa46:	e7d1      	b.n	800f9ec <__hexnan+0xd4>
 800fa48:	2004      	movs	r0, #4
 800fa4a:	b007      	add	sp, #28
 800fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa50 <_localeconv_r>:
 800fa50:	4800      	ldr	r0, [pc, #0]	; (800fa54 <_localeconv_r+0x4>)
 800fa52:	4770      	bx	lr
 800fa54:	200002f8 	.word	0x200002f8

0800fa58 <malloc>:
 800fa58:	4b02      	ldr	r3, [pc, #8]	; (800fa64 <malloc+0xc>)
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	6818      	ldr	r0, [r3, #0]
 800fa5e:	f000 bd65 	b.w	801052c <_malloc_r>
 800fa62:	bf00      	nop
 800fa64:	200001a0 	.word	0x200001a0

0800fa68 <__ascii_mbtowc>:
 800fa68:	b082      	sub	sp, #8
 800fa6a:	b901      	cbnz	r1, 800fa6e <__ascii_mbtowc+0x6>
 800fa6c:	a901      	add	r1, sp, #4
 800fa6e:	b142      	cbz	r2, 800fa82 <__ascii_mbtowc+0x1a>
 800fa70:	b14b      	cbz	r3, 800fa86 <__ascii_mbtowc+0x1e>
 800fa72:	7813      	ldrb	r3, [r2, #0]
 800fa74:	600b      	str	r3, [r1, #0]
 800fa76:	7812      	ldrb	r2, [r2, #0]
 800fa78:	1e10      	subs	r0, r2, #0
 800fa7a:	bf18      	it	ne
 800fa7c:	2001      	movne	r0, #1
 800fa7e:	b002      	add	sp, #8
 800fa80:	4770      	bx	lr
 800fa82:	4610      	mov	r0, r2
 800fa84:	e7fb      	b.n	800fa7e <__ascii_mbtowc+0x16>
 800fa86:	f06f 0001 	mvn.w	r0, #1
 800fa8a:	e7f8      	b.n	800fa7e <__ascii_mbtowc+0x16>

0800fa8c <memchr>:
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	b510      	push	{r4, lr}
 800fa90:	b2c9      	uxtb	r1, r1
 800fa92:	4402      	add	r2, r0
 800fa94:	4293      	cmp	r3, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	d101      	bne.n	800fa9e <memchr+0x12>
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	e003      	b.n	800faa6 <memchr+0x1a>
 800fa9e:	7804      	ldrb	r4, [r0, #0]
 800faa0:	3301      	adds	r3, #1
 800faa2:	428c      	cmp	r4, r1
 800faa4:	d1f6      	bne.n	800fa94 <memchr+0x8>
 800faa6:	bd10      	pop	{r4, pc}

0800faa8 <memcpy>:
 800faa8:	440a      	add	r2, r1
 800faaa:	4291      	cmp	r1, r2
 800faac:	f100 33ff 	add.w	r3, r0, #4294967295
 800fab0:	d100      	bne.n	800fab4 <memcpy+0xc>
 800fab2:	4770      	bx	lr
 800fab4:	b510      	push	{r4, lr}
 800fab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faba:	4291      	cmp	r1, r2
 800fabc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fac0:	d1f9      	bne.n	800fab6 <memcpy+0xe>
 800fac2:	bd10      	pop	{r4, pc}

0800fac4 <_Balloc>:
 800fac4:	b570      	push	{r4, r5, r6, lr}
 800fac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fac8:	4604      	mov	r4, r0
 800faca:	460d      	mov	r5, r1
 800facc:	b976      	cbnz	r6, 800faec <_Balloc+0x28>
 800face:	2010      	movs	r0, #16
 800fad0:	f7ff ffc2 	bl	800fa58 <malloc>
 800fad4:	4602      	mov	r2, r0
 800fad6:	6260      	str	r0, [r4, #36]	; 0x24
 800fad8:	b920      	cbnz	r0, 800fae4 <_Balloc+0x20>
 800fada:	2166      	movs	r1, #102	; 0x66
 800fadc:	4b17      	ldr	r3, [pc, #92]	; (800fb3c <_Balloc+0x78>)
 800fade:	4818      	ldr	r0, [pc, #96]	; (800fb40 <_Balloc+0x7c>)
 800fae0:	f000 ff18 	bl	8010914 <__assert_func>
 800fae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fae8:	6006      	str	r6, [r0, #0]
 800faea:	60c6      	str	r6, [r0, #12]
 800faec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800faee:	68f3      	ldr	r3, [r6, #12]
 800faf0:	b183      	cbz	r3, 800fb14 <_Balloc+0x50>
 800faf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fafa:	b9b8      	cbnz	r0, 800fb2c <_Balloc+0x68>
 800fafc:	2101      	movs	r1, #1
 800fafe:	fa01 f605 	lsl.w	r6, r1, r5
 800fb02:	1d72      	adds	r2, r6, #5
 800fb04:	4620      	mov	r0, r4
 800fb06:	0092      	lsls	r2, r2, #2
 800fb08:	f000 fc94 	bl	8010434 <_calloc_r>
 800fb0c:	b160      	cbz	r0, 800fb28 <_Balloc+0x64>
 800fb0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb12:	e00e      	b.n	800fb32 <_Balloc+0x6e>
 800fb14:	2221      	movs	r2, #33	; 0x21
 800fb16:	2104      	movs	r1, #4
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f000 fc8b 	bl	8010434 <_calloc_r>
 800fb1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb20:	60f0      	str	r0, [r6, #12]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1e4      	bne.n	800faf2 <_Balloc+0x2e>
 800fb28:	2000      	movs	r0, #0
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	6802      	ldr	r2, [r0, #0]
 800fb2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb32:	2300      	movs	r3, #0
 800fb34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb38:	e7f7      	b.n	800fb2a <_Balloc+0x66>
 800fb3a:	bf00      	nop
 800fb3c:	080118cd 	.word	0x080118cd
 800fb40:	080119cc 	.word	0x080119cc

0800fb44 <_Bfree>:
 800fb44:	b570      	push	{r4, r5, r6, lr}
 800fb46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb48:	4605      	mov	r5, r0
 800fb4a:	460c      	mov	r4, r1
 800fb4c:	b976      	cbnz	r6, 800fb6c <_Bfree+0x28>
 800fb4e:	2010      	movs	r0, #16
 800fb50:	f7ff ff82 	bl	800fa58 <malloc>
 800fb54:	4602      	mov	r2, r0
 800fb56:	6268      	str	r0, [r5, #36]	; 0x24
 800fb58:	b920      	cbnz	r0, 800fb64 <_Bfree+0x20>
 800fb5a:	218a      	movs	r1, #138	; 0x8a
 800fb5c:	4b08      	ldr	r3, [pc, #32]	; (800fb80 <_Bfree+0x3c>)
 800fb5e:	4809      	ldr	r0, [pc, #36]	; (800fb84 <_Bfree+0x40>)
 800fb60:	f000 fed8 	bl	8010914 <__assert_func>
 800fb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb68:	6006      	str	r6, [r0, #0]
 800fb6a:	60c6      	str	r6, [r0, #12]
 800fb6c:	b13c      	cbz	r4, 800fb7e <_Bfree+0x3a>
 800fb6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb70:	6862      	ldr	r2, [r4, #4]
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb78:	6021      	str	r1, [r4, #0]
 800fb7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb7e:	bd70      	pop	{r4, r5, r6, pc}
 800fb80:	080118cd 	.word	0x080118cd
 800fb84:	080119cc 	.word	0x080119cc

0800fb88 <__multadd>:
 800fb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb8c:	4607      	mov	r7, r0
 800fb8e:	460c      	mov	r4, r1
 800fb90:	461e      	mov	r6, r3
 800fb92:	2000      	movs	r0, #0
 800fb94:	690d      	ldr	r5, [r1, #16]
 800fb96:	f101 0c14 	add.w	ip, r1, #20
 800fb9a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb9e:	3001      	adds	r0, #1
 800fba0:	b299      	uxth	r1, r3
 800fba2:	fb02 6101 	mla	r1, r2, r1, r6
 800fba6:	0c1e      	lsrs	r6, r3, #16
 800fba8:	0c0b      	lsrs	r3, r1, #16
 800fbaa:	fb02 3306 	mla	r3, r2, r6, r3
 800fbae:	b289      	uxth	r1, r1
 800fbb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbb4:	4285      	cmp	r5, r0
 800fbb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbba:	f84c 1b04 	str.w	r1, [ip], #4
 800fbbe:	dcec      	bgt.n	800fb9a <__multadd+0x12>
 800fbc0:	b30e      	cbz	r6, 800fc06 <__multadd+0x7e>
 800fbc2:	68a3      	ldr	r3, [r4, #8]
 800fbc4:	42ab      	cmp	r3, r5
 800fbc6:	dc19      	bgt.n	800fbfc <__multadd+0x74>
 800fbc8:	6861      	ldr	r1, [r4, #4]
 800fbca:	4638      	mov	r0, r7
 800fbcc:	3101      	adds	r1, #1
 800fbce:	f7ff ff79 	bl	800fac4 <_Balloc>
 800fbd2:	4680      	mov	r8, r0
 800fbd4:	b928      	cbnz	r0, 800fbe2 <__multadd+0x5a>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	21b5      	movs	r1, #181	; 0xb5
 800fbda:	4b0c      	ldr	r3, [pc, #48]	; (800fc0c <__multadd+0x84>)
 800fbdc:	480c      	ldr	r0, [pc, #48]	; (800fc10 <__multadd+0x88>)
 800fbde:	f000 fe99 	bl	8010914 <__assert_func>
 800fbe2:	6922      	ldr	r2, [r4, #16]
 800fbe4:	f104 010c 	add.w	r1, r4, #12
 800fbe8:	3202      	adds	r2, #2
 800fbea:	0092      	lsls	r2, r2, #2
 800fbec:	300c      	adds	r0, #12
 800fbee:	f7ff ff5b 	bl	800faa8 <memcpy>
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	4638      	mov	r0, r7
 800fbf6:	f7ff ffa5 	bl	800fb44 <_Bfree>
 800fbfa:	4644      	mov	r4, r8
 800fbfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc00:	3501      	adds	r5, #1
 800fc02:	615e      	str	r6, [r3, #20]
 800fc04:	6125      	str	r5, [r4, #16]
 800fc06:	4620      	mov	r0, r4
 800fc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc0c:	0801193f 	.word	0x0801193f
 800fc10:	080119cc 	.word	0x080119cc

0800fc14 <__s2b>:
 800fc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc18:	4615      	mov	r5, r2
 800fc1a:	2209      	movs	r2, #9
 800fc1c:	461f      	mov	r7, r3
 800fc1e:	3308      	adds	r3, #8
 800fc20:	460c      	mov	r4, r1
 800fc22:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc26:	4606      	mov	r6, r0
 800fc28:	2201      	movs	r2, #1
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	db09      	blt.n	800fc44 <__s2b+0x30>
 800fc30:	4630      	mov	r0, r6
 800fc32:	f7ff ff47 	bl	800fac4 <_Balloc>
 800fc36:	b940      	cbnz	r0, 800fc4a <__s2b+0x36>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	21ce      	movs	r1, #206	; 0xce
 800fc3c:	4b18      	ldr	r3, [pc, #96]	; (800fca0 <__s2b+0x8c>)
 800fc3e:	4819      	ldr	r0, [pc, #100]	; (800fca4 <__s2b+0x90>)
 800fc40:	f000 fe68 	bl	8010914 <__assert_func>
 800fc44:	0052      	lsls	r2, r2, #1
 800fc46:	3101      	adds	r1, #1
 800fc48:	e7f0      	b.n	800fc2c <__s2b+0x18>
 800fc4a:	9b08      	ldr	r3, [sp, #32]
 800fc4c:	2d09      	cmp	r5, #9
 800fc4e:	6143      	str	r3, [r0, #20]
 800fc50:	f04f 0301 	mov.w	r3, #1
 800fc54:	6103      	str	r3, [r0, #16]
 800fc56:	dd16      	ble.n	800fc86 <__s2b+0x72>
 800fc58:	f104 0909 	add.w	r9, r4, #9
 800fc5c:	46c8      	mov	r8, r9
 800fc5e:	442c      	add	r4, r5
 800fc60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc64:	4601      	mov	r1, r0
 800fc66:	220a      	movs	r2, #10
 800fc68:	4630      	mov	r0, r6
 800fc6a:	3b30      	subs	r3, #48	; 0x30
 800fc6c:	f7ff ff8c 	bl	800fb88 <__multadd>
 800fc70:	45a0      	cmp	r8, r4
 800fc72:	d1f5      	bne.n	800fc60 <__s2b+0x4c>
 800fc74:	f1a5 0408 	sub.w	r4, r5, #8
 800fc78:	444c      	add	r4, r9
 800fc7a:	1b2d      	subs	r5, r5, r4
 800fc7c:	1963      	adds	r3, r4, r5
 800fc7e:	42bb      	cmp	r3, r7
 800fc80:	db04      	blt.n	800fc8c <__s2b+0x78>
 800fc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc86:	2509      	movs	r5, #9
 800fc88:	340a      	adds	r4, #10
 800fc8a:	e7f6      	b.n	800fc7a <__s2b+0x66>
 800fc8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc90:	4601      	mov	r1, r0
 800fc92:	220a      	movs	r2, #10
 800fc94:	4630      	mov	r0, r6
 800fc96:	3b30      	subs	r3, #48	; 0x30
 800fc98:	f7ff ff76 	bl	800fb88 <__multadd>
 800fc9c:	e7ee      	b.n	800fc7c <__s2b+0x68>
 800fc9e:	bf00      	nop
 800fca0:	0801193f 	.word	0x0801193f
 800fca4:	080119cc 	.word	0x080119cc

0800fca8 <__hi0bits>:
 800fca8:	0c02      	lsrs	r2, r0, #16
 800fcaa:	0412      	lsls	r2, r2, #16
 800fcac:	4603      	mov	r3, r0
 800fcae:	b9ca      	cbnz	r2, 800fce4 <__hi0bits+0x3c>
 800fcb0:	0403      	lsls	r3, r0, #16
 800fcb2:	2010      	movs	r0, #16
 800fcb4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fcb8:	bf04      	itt	eq
 800fcba:	021b      	lsleq	r3, r3, #8
 800fcbc:	3008      	addeq	r0, #8
 800fcbe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fcc2:	bf04      	itt	eq
 800fcc4:	011b      	lsleq	r3, r3, #4
 800fcc6:	3004      	addeq	r0, #4
 800fcc8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fccc:	bf04      	itt	eq
 800fcce:	009b      	lsleq	r3, r3, #2
 800fcd0:	3002      	addeq	r0, #2
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	db05      	blt.n	800fce2 <__hi0bits+0x3a>
 800fcd6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800fcda:	f100 0001 	add.w	r0, r0, #1
 800fcde:	bf08      	it	eq
 800fce0:	2020      	moveq	r0, #32
 800fce2:	4770      	bx	lr
 800fce4:	2000      	movs	r0, #0
 800fce6:	e7e5      	b.n	800fcb4 <__hi0bits+0xc>

0800fce8 <__lo0bits>:
 800fce8:	6803      	ldr	r3, [r0, #0]
 800fcea:	4602      	mov	r2, r0
 800fcec:	f013 0007 	ands.w	r0, r3, #7
 800fcf0:	d00b      	beq.n	800fd0a <__lo0bits+0x22>
 800fcf2:	07d9      	lsls	r1, r3, #31
 800fcf4:	d421      	bmi.n	800fd3a <__lo0bits+0x52>
 800fcf6:	0798      	lsls	r0, r3, #30
 800fcf8:	bf49      	itett	mi
 800fcfa:	085b      	lsrmi	r3, r3, #1
 800fcfc:	089b      	lsrpl	r3, r3, #2
 800fcfe:	2001      	movmi	r0, #1
 800fd00:	6013      	strmi	r3, [r2, #0]
 800fd02:	bf5c      	itt	pl
 800fd04:	2002      	movpl	r0, #2
 800fd06:	6013      	strpl	r3, [r2, #0]
 800fd08:	4770      	bx	lr
 800fd0a:	b299      	uxth	r1, r3
 800fd0c:	b909      	cbnz	r1, 800fd12 <__lo0bits+0x2a>
 800fd0e:	2010      	movs	r0, #16
 800fd10:	0c1b      	lsrs	r3, r3, #16
 800fd12:	b2d9      	uxtb	r1, r3
 800fd14:	b909      	cbnz	r1, 800fd1a <__lo0bits+0x32>
 800fd16:	3008      	adds	r0, #8
 800fd18:	0a1b      	lsrs	r3, r3, #8
 800fd1a:	0719      	lsls	r1, r3, #28
 800fd1c:	bf04      	itt	eq
 800fd1e:	091b      	lsreq	r3, r3, #4
 800fd20:	3004      	addeq	r0, #4
 800fd22:	0799      	lsls	r1, r3, #30
 800fd24:	bf04      	itt	eq
 800fd26:	089b      	lsreq	r3, r3, #2
 800fd28:	3002      	addeq	r0, #2
 800fd2a:	07d9      	lsls	r1, r3, #31
 800fd2c:	d403      	bmi.n	800fd36 <__lo0bits+0x4e>
 800fd2e:	085b      	lsrs	r3, r3, #1
 800fd30:	f100 0001 	add.w	r0, r0, #1
 800fd34:	d003      	beq.n	800fd3e <__lo0bits+0x56>
 800fd36:	6013      	str	r3, [r2, #0]
 800fd38:	4770      	bx	lr
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	4770      	bx	lr
 800fd3e:	2020      	movs	r0, #32
 800fd40:	4770      	bx	lr
	...

0800fd44 <__i2b>:
 800fd44:	b510      	push	{r4, lr}
 800fd46:	460c      	mov	r4, r1
 800fd48:	2101      	movs	r1, #1
 800fd4a:	f7ff febb 	bl	800fac4 <_Balloc>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	b928      	cbnz	r0, 800fd5e <__i2b+0x1a>
 800fd52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd56:	4b04      	ldr	r3, [pc, #16]	; (800fd68 <__i2b+0x24>)
 800fd58:	4804      	ldr	r0, [pc, #16]	; (800fd6c <__i2b+0x28>)
 800fd5a:	f000 fddb 	bl	8010914 <__assert_func>
 800fd5e:	2301      	movs	r3, #1
 800fd60:	6144      	str	r4, [r0, #20]
 800fd62:	6103      	str	r3, [r0, #16]
 800fd64:	bd10      	pop	{r4, pc}
 800fd66:	bf00      	nop
 800fd68:	0801193f 	.word	0x0801193f
 800fd6c:	080119cc 	.word	0x080119cc

0800fd70 <__multiply>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	4691      	mov	r9, r2
 800fd76:	690a      	ldr	r2, [r1, #16]
 800fd78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	bfbe      	ittt	lt
 800fd82:	460b      	movlt	r3, r1
 800fd84:	464c      	movlt	r4, r9
 800fd86:	4699      	movlt	r9, r3
 800fd88:	6927      	ldr	r7, [r4, #16]
 800fd8a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd8e:	68a3      	ldr	r3, [r4, #8]
 800fd90:	6861      	ldr	r1, [r4, #4]
 800fd92:	eb07 060a 	add.w	r6, r7, sl
 800fd96:	42b3      	cmp	r3, r6
 800fd98:	b085      	sub	sp, #20
 800fd9a:	bfb8      	it	lt
 800fd9c:	3101      	addlt	r1, #1
 800fd9e:	f7ff fe91 	bl	800fac4 <_Balloc>
 800fda2:	b930      	cbnz	r0, 800fdb2 <__multiply+0x42>
 800fda4:	4602      	mov	r2, r0
 800fda6:	f240 115d 	movw	r1, #349	; 0x15d
 800fdaa:	4b43      	ldr	r3, [pc, #268]	; (800feb8 <__multiply+0x148>)
 800fdac:	4843      	ldr	r0, [pc, #268]	; (800febc <__multiply+0x14c>)
 800fdae:	f000 fdb1 	bl	8010914 <__assert_func>
 800fdb2:	f100 0514 	add.w	r5, r0, #20
 800fdb6:	462b      	mov	r3, r5
 800fdb8:	2200      	movs	r2, #0
 800fdba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fdbe:	4543      	cmp	r3, r8
 800fdc0:	d321      	bcc.n	800fe06 <__multiply+0x96>
 800fdc2:	f104 0314 	add.w	r3, r4, #20
 800fdc6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fdca:	f109 0314 	add.w	r3, r9, #20
 800fdce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fdd2:	9202      	str	r2, [sp, #8]
 800fdd4:	1b3a      	subs	r2, r7, r4
 800fdd6:	3a15      	subs	r2, #21
 800fdd8:	f022 0203 	bic.w	r2, r2, #3
 800fddc:	3204      	adds	r2, #4
 800fdde:	f104 0115 	add.w	r1, r4, #21
 800fde2:	428f      	cmp	r7, r1
 800fde4:	bf38      	it	cc
 800fde6:	2204      	movcc	r2, #4
 800fde8:	9201      	str	r2, [sp, #4]
 800fdea:	9a02      	ldr	r2, [sp, #8]
 800fdec:	9303      	str	r3, [sp, #12]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d80c      	bhi.n	800fe0c <__multiply+0x9c>
 800fdf2:	2e00      	cmp	r6, #0
 800fdf4:	dd03      	ble.n	800fdfe <__multiply+0x8e>
 800fdf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d059      	beq.n	800feb2 <__multiply+0x142>
 800fdfe:	6106      	str	r6, [r0, #16]
 800fe00:	b005      	add	sp, #20
 800fe02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe06:	f843 2b04 	str.w	r2, [r3], #4
 800fe0a:	e7d8      	b.n	800fdbe <__multiply+0x4e>
 800fe0c:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe10:	f1ba 0f00 	cmp.w	sl, #0
 800fe14:	d023      	beq.n	800fe5e <__multiply+0xee>
 800fe16:	46a9      	mov	r9, r5
 800fe18:	f04f 0c00 	mov.w	ip, #0
 800fe1c:	f104 0e14 	add.w	lr, r4, #20
 800fe20:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe24:	f8d9 1000 	ldr.w	r1, [r9]
 800fe28:	fa1f fb82 	uxth.w	fp, r2
 800fe2c:	b289      	uxth	r1, r1
 800fe2e:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe32:	4461      	add	r1, ip
 800fe34:	f8d9 c000 	ldr.w	ip, [r9]
 800fe38:	0c12      	lsrs	r2, r2, #16
 800fe3a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800fe3e:	fb0a c202 	mla	r2, sl, r2, ip
 800fe42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe46:	b289      	uxth	r1, r1
 800fe48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe4c:	4577      	cmp	r7, lr
 800fe4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe52:	f849 1b04 	str.w	r1, [r9], #4
 800fe56:	d8e3      	bhi.n	800fe20 <__multiply+0xb0>
 800fe58:	9a01      	ldr	r2, [sp, #4]
 800fe5a:	f845 c002 	str.w	ip, [r5, r2]
 800fe5e:	9a03      	ldr	r2, [sp, #12]
 800fe60:	3304      	adds	r3, #4
 800fe62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe66:	f1b9 0f00 	cmp.w	r9, #0
 800fe6a:	d020      	beq.n	800feae <__multiply+0x13e>
 800fe6c:	46ae      	mov	lr, r5
 800fe6e:	f04f 0a00 	mov.w	sl, #0
 800fe72:	6829      	ldr	r1, [r5, #0]
 800fe74:	f104 0c14 	add.w	ip, r4, #20
 800fe78:	f8bc b000 	ldrh.w	fp, [ip]
 800fe7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fe80:	b289      	uxth	r1, r1
 800fe82:	fb09 220b 	mla	r2, r9, fp, r2
 800fe86:	4492      	add	sl, r2
 800fe88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fe8c:	f84e 1b04 	str.w	r1, [lr], #4
 800fe90:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fe94:	f8be 1000 	ldrh.w	r1, [lr]
 800fe98:	0c12      	lsrs	r2, r2, #16
 800fe9a:	fb09 1102 	mla	r1, r9, r2, r1
 800fe9e:	4567      	cmp	r7, ip
 800fea0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fea4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fea8:	d8e6      	bhi.n	800fe78 <__multiply+0x108>
 800feaa:	9a01      	ldr	r2, [sp, #4]
 800feac:	50a9      	str	r1, [r5, r2]
 800feae:	3504      	adds	r5, #4
 800feb0:	e79b      	b.n	800fdea <__multiply+0x7a>
 800feb2:	3e01      	subs	r6, #1
 800feb4:	e79d      	b.n	800fdf2 <__multiply+0x82>
 800feb6:	bf00      	nop
 800feb8:	0801193f 	.word	0x0801193f
 800febc:	080119cc 	.word	0x080119cc

0800fec0 <__pow5mult>:
 800fec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fec4:	4615      	mov	r5, r2
 800fec6:	f012 0203 	ands.w	r2, r2, #3
 800feca:	4606      	mov	r6, r0
 800fecc:	460f      	mov	r7, r1
 800fece:	d007      	beq.n	800fee0 <__pow5mult+0x20>
 800fed0:	4c25      	ldr	r4, [pc, #148]	; (800ff68 <__pow5mult+0xa8>)
 800fed2:	3a01      	subs	r2, #1
 800fed4:	2300      	movs	r3, #0
 800fed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800feda:	f7ff fe55 	bl	800fb88 <__multadd>
 800fede:	4607      	mov	r7, r0
 800fee0:	10ad      	asrs	r5, r5, #2
 800fee2:	d03d      	beq.n	800ff60 <__pow5mult+0xa0>
 800fee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fee6:	b97c      	cbnz	r4, 800ff08 <__pow5mult+0x48>
 800fee8:	2010      	movs	r0, #16
 800feea:	f7ff fdb5 	bl	800fa58 <malloc>
 800feee:	4602      	mov	r2, r0
 800fef0:	6270      	str	r0, [r6, #36]	; 0x24
 800fef2:	b928      	cbnz	r0, 800ff00 <__pow5mult+0x40>
 800fef4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fef8:	4b1c      	ldr	r3, [pc, #112]	; (800ff6c <__pow5mult+0xac>)
 800fefa:	481d      	ldr	r0, [pc, #116]	; (800ff70 <__pow5mult+0xb0>)
 800fefc:	f000 fd0a 	bl	8010914 <__assert_func>
 800ff00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff04:	6004      	str	r4, [r0, #0]
 800ff06:	60c4      	str	r4, [r0, #12]
 800ff08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff10:	b94c      	cbnz	r4, 800ff26 <__pow5mult+0x66>
 800ff12:	f240 2171 	movw	r1, #625	; 0x271
 800ff16:	4630      	mov	r0, r6
 800ff18:	f7ff ff14 	bl	800fd44 <__i2b>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	4604      	mov	r4, r0
 800ff20:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff24:	6003      	str	r3, [r0, #0]
 800ff26:	f04f 0900 	mov.w	r9, #0
 800ff2a:	07eb      	lsls	r3, r5, #31
 800ff2c:	d50a      	bpl.n	800ff44 <__pow5mult+0x84>
 800ff2e:	4639      	mov	r1, r7
 800ff30:	4622      	mov	r2, r4
 800ff32:	4630      	mov	r0, r6
 800ff34:	f7ff ff1c 	bl	800fd70 <__multiply>
 800ff38:	4680      	mov	r8, r0
 800ff3a:	4639      	mov	r1, r7
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	f7ff fe01 	bl	800fb44 <_Bfree>
 800ff42:	4647      	mov	r7, r8
 800ff44:	106d      	asrs	r5, r5, #1
 800ff46:	d00b      	beq.n	800ff60 <__pow5mult+0xa0>
 800ff48:	6820      	ldr	r0, [r4, #0]
 800ff4a:	b938      	cbnz	r0, 800ff5c <__pow5mult+0x9c>
 800ff4c:	4622      	mov	r2, r4
 800ff4e:	4621      	mov	r1, r4
 800ff50:	4630      	mov	r0, r6
 800ff52:	f7ff ff0d 	bl	800fd70 <__multiply>
 800ff56:	6020      	str	r0, [r4, #0]
 800ff58:	f8c0 9000 	str.w	r9, [r0]
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	e7e4      	b.n	800ff2a <__pow5mult+0x6a>
 800ff60:	4638      	mov	r0, r7
 800ff62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff66:	bf00      	nop
 800ff68:	08011b18 	.word	0x08011b18
 800ff6c:	080118cd 	.word	0x080118cd
 800ff70:	080119cc 	.word	0x080119cc

0800ff74 <__lshift>:
 800ff74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff78:	460c      	mov	r4, r1
 800ff7a:	4607      	mov	r7, r0
 800ff7c:	4691      	mov	r9, r2
 800ff7e:	6923      	ldr	r3, [r4, #16]
 800ff80:	6849      	ldr	r1, [r1, #4]
 800ff82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff86:	68a3      	ldr	r3, [r4, #8]
 800ff88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff8c:	f108 0601 	add.w	r6, r8, #1
 800ff90:	42b3      	cmp	r3, r6
 800ff92:	db0b      	blt.n	800ffac <__lshift+0x38>
 800ff94:	4638      	mov	r0, r7
 800ff96:	f7ff fd95 	bl	800fac4 <_Balloc>
 800ff9a:	4605      	mov	r5, r0
 800ff9c:	b948      	cbnz	r0, 800ffb2 <__lshift+0x3e>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ffa4:	4b29      	ldr	r3, [pc, #164]	; (801004c <__lshift+0xd8>)
 800ffa6:	482a      	ldr	r0, [pc, #168]	; (8010050 <__lshift+0xdc>)
 800ffa8:	f000 fcb4 	bl	8010914 <__assert_func>
 800ffac:	3101      	adds	r1, #1
 800ffae:	005b      	lsls	r3, r3, #1
 800ffb0:	e7ee      	b.n	800ff90 <__lshift+0x1c>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f100 0114 	add.w	r1, r0, #20
 800ffb8:	f100 0210 	add.w	r2, r0, #16
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	4553      	cmp	r3, sl
 800ffc0:	db37      	blt.n	8010032 <__lshift+0xbe>
 800ffc2:	6920      	ldr	r0, [r4, #16]
 800ffc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffc8:	f104 0314 	add.w	r3, r4, #20
 800ffcc:	f019 091f 	ands.w	r9, r9, #31
 800ffd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ffd8:	d02f      	beq.n	801003a <__lshift+0xc6>
 800ffda:	468a      	mov	sl, r1
 800ffdc:	f04f 0c00 	mov.w	ip, #0
 800ffe0:	f1c9 0e20 	rsb	lr, r9, #32
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	fa02 f209 	lsl.w	r2, r2, r9
 800ffea:	ea42 020c 	orr.w	r2, r2, ip
 800ffee:	f84a 2b04 	str.w	r2, [sl], #4
 800fff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fff6:	4298      	cmp	r0, r3
 800fff8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fffc:	d8f2      	bhi.n	800ffe4 <__lshift+0x70>
 800fffe:	1b03      	subs	r3, r0, r4
 8010000:	3b15      	subs	r3, #21
 8010002:	f023 0303 	bic.w	r3, r3, #3
 8010006:	3304      	adds	r3, #4
 8010008:	f104 0215 	add.w	r2, r4, #21
 801000c:	4290      	cmp	r0, r2
 801000e:	bf38      	it	cc
 8010010:	2304      	movcc	r3, #4
 8010012:	f841 c003 	str.w	ip, [r1, r3]
 8010016:	f1bc 0f00 	cmp.w	ip, #0
 801001a:	d001      	beq.n	8010020 <__lshift+0xac>
 801001c:	f108 0602 	add.w	r6, r8, #2
 8010020:	3e01      	subs	r6, #1
 8010022:	4638      	mov	r0, r7
 8010024:	4621      	mov	r1, r4
 8010026:	612e      	str	r6, [r5, #16]
 8010028:	f7ff fd8c 	bl	800fb44 <_Bfree>
 801002c:	4628      	mov	r0, r5
 801002e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010032:	f842 0f04 	str.w	r0, [r2, #4]!
 8010036:	3301      	adds	r3, #1
 8010038:	e7c1      	b.n	800ffbe <__lshift+0x4a>
 801003a:	3904      	subs	r1, #4
 801003c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010040:	4298      	cmp	r0, r3
 8010042:	f841 2f04 	str.w	r2, [r1, #4]!
 8010046:	d8f9      	bhi.n	801003c <__lshift+0xc8>
 8010048:	e7ea      	b.n	8010020 <__lshift+0xac>
 801004a:	bf00      	nop
 801004c:	0801193f 	.word	0x0801193f
 8010050:	080119cc 	.word	0x080119cc

08010054 <__mcmp>:
 8010054:	4603      	mov	r3, r0
 8010056:	690a      	ldr	r2, [r1, #16]
 8010058:	6900      	ldr	r0, [r0, #16]
 801005a:	b530      	push	{r4, r5, lr}
 801005c:	1a80      	subs	r0, r0, r2
 801005e:	d10d      	bne.n	801007c <__mcmp+0x28>
 8010060:	3314      	adds	r3, #20
 8010062:	3114      	adds	r1, #20
 8010064:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010068:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801006c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010070:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010074:	4295      	cmp	r5, r2
 8010076:	d002      	beq.n	801007e <__mcmp+0x2a>
 8010078:	d304      	bcc.n	8010084 <__mcmp+0x30>
 801007a:	2001      	movs	r0, #1
 801007c:	bd30      	pop	{r4, r5, pc}
 801007e:	42a3      	cmp	r3, r4
 8010080:	d3f4      	bcc.n	801006c <__mcmp+0x18>
 8010082:	e7fb      	b.n	801007c <__mcmp+0x28>
 8010084:	f04f 30ff 	mov.w	r0, #4294967295
 8010088:	e7f8      	b.n	801007c <__mcmp+0x28>
	...

0801008c <__mdiff>:
 801008c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	460d      	mov	r5, r1
 8010092:	4607      	mov	r7, r0
 8010094:	4611      	mov	r1, r2
 8010096:	4628      	mov	r0, r5
 8010098:	4614      	mov	r4, r2
 801009a:	f7ff ffdb 	bl	8010054 <__mcmp>
 801009e:	1e06      	subs	r6, r0, #0
 80100a0:	d111      	bne.n	80100c6 <__mdiff+0x3a>
 80100a2:	4631      	mov	r1, r6
 80100a4:	4638      	mov	r0, r7
 80100a6:	f7ff fd0d 	bl	800fac4 <_Balloc>
 80100aa:	4602      	mov	r2, r0
 80100ac:	b928      	cbnz	r0, 80100ba <__mdiff+0x2e>
 80100ae:	f240 2132 	movw	r1, #562	; 0x232
 80100b2:	4b3a      	ldr	r3, [pc, #232]	; (801019c <__mdiff+0x110>)
 80100b4:	483a      	ldr	r0, [pc, #232]	; (80101a0 <__mdiff+0x114>)
 80100b6:	f000 fc2d 	bl	8010914 <__assert_func>
 80100ba:	2301      	movs	r3, #1
 80100bc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80100c0:	4610      	mov	r0, r2
 80100c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c6:	bfa4      	itt	ge
 80100c8:	4623      	movge	r3, r4
 80100ca:	462c      	movge	r4, r5
 80100cc:	4638      	mov	r0, r7
 80100ce:	6861      	ldr	r1, [r4, #4]
 80100d0:	bfa6      	itte	ge
 80100d2:	461d      	movge	r5, r3
 80100d4:	2600      	movge	r6, #0
 80100d6:	2601      	movlt	r6, #1
 80100d8:	f7ff fcf4 	bl	800fac4 <_Balloc>
 80100dc:	4602      	mov	r2, r0
 80100de:	b918      	cbnz	r0, 80100e8 <__mdiff+0x5c>
 80100e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100e4:	4b2d      	ldr	r3, [pc, #180]	; (801019c <__mdiff+0x110>)
 80100e6:	e7e5      	b.n	80100b4 <__mdiff+0x28>
 80100e8:	f102 0814 	add.w	r8, r2, #20
 80100ec:	46c2      	mov	sl, r8
 80100ee:	f04f 0c00 	mov.w	ip, #0
 80100f2:	6927      	ldr	r7, [r4, #16]
 80100f4:	60c6      	str	r6, [r0, #12]
 80100f6:	692e      	ldr	r6, [r5, #16]
 80100f8:	f104 0014 	add.w	r0, r4, #20
 80100fc:	f105 0914 	add.w	r9, r5, #20
 8010100:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8010104:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010108:	3410      	adds	r4, #16
 801010a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801010e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010112:	fa1f f18b 	uxth.w	r1, fp
 8010116:	448c      	add	ip, r1
 8010118:	b299      	uxth	r1, r3
 801011a:	0c1b      	lsrs	r3, r3, #16
 801011c:	ebac 0101 	sub.w	r1, ip, r1
 8010120:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010124:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010128:	b289      	uxth	r1, r1
 801012a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801012e:	454e      	cmp	r6, r9
 8010130:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010134:	f84a 3b04 	str.w	r3, [sl], #4
 8010138:	d8e7      	bhi.n	801010a <__mdiff+0x7e>
 801013a:	1b73      	subs	r3, r6, r5
 801013c:	3b15      	subs	r3, #21
 801013e:	f023 0303 	bic.w	r3, r3, #3
 8010142:	3515      	adds	r5, #21
 8010144:	3304      	adds	r3, #4
 8010146:	42ae      	cmp	r6, r5
 8010148:	bf38      	it	cc
 801014a:	2304      	movcc	r3, #4
 801014c:	4418      	add	r0, r3
 801014e:	4443      	add	r3, r8
 8010150:	461e      	mov	r6, r3
 8010152:	4605      	mov	r5, r0
 8010154:	4575      	cmp	r5, lr
 8010156:	d30e      	bcc.n	8010176 <__mdiff+0xea>
 8010158:	f10e 0103 	add.w	r1, lr, #3
 801015c:	1a09      	subs	r1, r1, r0
 801015e:	f021 0103 	bic.w	r1, r1, #3
 8010162:	3803      	subs	r0, #3
 8010164:	4586      	cmp	lr, r0
 8010166:	bf38      	it	cc
 8010168:	2100      	movcc	r1, #0
 801016a:	4419      	add	r1, r3
 801016c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8010170:	b18b      	cbz	r3, 8010196 <__mdiff+0x10a>
 8010172:	6117      	str	r7, [r2, #16]
 8010174:	e7a4      	b.n	80100c0 <__mdiff+0x34>
 8010176:	f855 8b04 	ldr.w	r8, [r5], #4
 801017a:	fa1f f188 	uxth.w	r1, r8
 801017e:	4461      	add	r1, ip
 8010180:	140c      	asrs	r4, r1, #16
 8010182:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010186:	b289      	uxth	r1, r1
 8010188:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801018c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8010190:	f846 1b04 	str.w	r1, [r6], #4
 8010194:	e7de      	b.n	8010154 <__mdiff+0xc8>
 8010196:	3f01      	subs	r7, #1
 8010198:	e7e8      	b.n	801016c <__mdiff+0xe0>
 801019a:	bf00      	nop
 801019c:	0801193f 	.word	0x0801193f
 80101a0:	080119cc 	.word	0x080119cc

080101a4 <__ulp>:
 80101a4:	4b11      	ldr	r3, [pc, #68]	; (80101ec <__ulp+0x48>)
 80101a6:	400b      	ands	r3, r1
 80101a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	dd02      	ble.n	80101b6 <__ulp+0x12>
 80101b0:	2000      	movs	r0, #0
 80101b2:	4619      	mov	r1, r3
 80101b4:	4770      	bx	lr
 80101b6:	425b      	negs	r3, r3
 80101b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80101bc:	f04f 0000 	mov.w	r0, #0
 80101c0:	f04f 0100 	mov.w	r1, #0
 80101c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80101c8:	da04      	bge.n	80101d4 <__ulp+0x30>
 80101ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80101ce:	fa43 f102 	asr.w	r1, r3, r2
 80101d2:	4770      	bx	lr
 80101d4:	f1a2 0314 	sub.w	r3, r2, #20
 80101d8:	2b1e      	cmp	r3, #30
 80101da:	bfd6      	itet	le
 80101dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80101e0:	2301      	movgt	r3, #1
 80101e2:	fa22 f303 	lsrle.w	r3, r2, r3
 80101e6:	4618      	mov	r0, r3
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	7ff00000 	.word	0x7ff00000

080101f0 <__b2d>:
 80101f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101f4:	6907      	ldr	r7, [r0, #16]
 80101f6:	f100 0914 	add.w	r9, r0, #20
 80101fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80101fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8010202:	f1a7 0804 	sub.w	r8, r7, #4
 8010206:	4630      	mov	r0, r6
 8010208:	f7ff fd4e 	bl	800fca8 <__hi0bits>
 801020c:	f1c0 0320 	rsb	r3, r0, #32
 8010210:	280a      	cmp	r0, #10
 8010212:	600b      	str	r3, [r1, #0]
 8010214:	491f      	ldr	r1, [pc, #124]	; (8010294 <__b2d+0xa4>)
 8010216:	dc17      	bgt.n	8010248 <__b2d+0x58>
 8010218:	45c1      	cmp	r9, r8
 801021a:	bf28      	it	cs
 801021c:	2200      	movcs	r2, #0
 801021e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010222:	fa26 f30c 	lsr.w	r3, r6, ip
 8010226:	bf38      	it	cc
 8010228:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801022c:	ea43 0501 	orr.w	r5, r3, r1
 8010230:	f100 0315 	add.w	r3, r0, #21
 8010234:	fa06 f303 	lsl.w	r3, r6, r3
 8010238:	fa22 f20c 	lsr.w	r2, r2, ip
 801023c:	ea43 0402 	orr.w	r4, r3, r2
 8010240:	4620      	mov	r0, r4
 8010242:	4629      	mov	r1, r5
 8010244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010248:	45c1      	cmp	r9, r8
 801024a:	bf2e      	itee	cs
 801024c:	2200      	movcs	r2, #0
 801024e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8010252:	f1a7 0808 	subcc.w	r8, r7, #8
 8010256:	f1b0 030b 	subs.w	r3, r0, #11
 801025a:	d016      	beq.n	801028a <__b2d+0x9a>
 801025c:	f1c3 0720 	rsb	r7, r3, #32
 8010260:	fa22 f107 	lsr.w	r1, r2, r7
 8010264:	45c8      	cmp	r8, r9
 8010266:	fa06 f603 	lsl.w	r6, r6, r3
 801026a:	ea46 0601 	orr.w	r6, r6, r1
 801026e:	bf94      	ite	ls
 8010270:	2100      	movls	r1, #0
 8010272:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8010276:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801027a:	fa02 f003 	lsl.w	r0, r2, r3
 801027e:	40f9      	lsrs	r1, r7
 8010280:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010284:	ea40 0401 	orr.w	r4, r0, r1
 8010288:	e7da      	b.n	8010240 <__b2d+0x50>
 801028a:	4614      	mov	r4, r2
 801028c:	ea46 0501 	orr.w	r5, r6, r1
 8010290:	e7d6      	b.n	8010240 <__b2d+0x50>
 8010292:	bf00      	nop
 8010294:	3ff00000 	.word	0x3ff00000

08010298 <__d2b>:
 8010298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801029c:	2101      	movs	r1, #1
 801029e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80102a2:	4690      	mov	r8, r2
 80102a4:	461d      	mov	r5, r3
 80102a6:	f7ff fc0d 	bl	800fac4 <_Balloc>
 80102aa:	4604      	mov	r4, r0
 80102ac:	b930      	cbnz	r0, 80102bc <__d2b+0x24>
 80102ae:	4602      	mov	r2, r0
 80102b0:	f240 310a 	movw	r1, #778	; 0x30a
 80102b4:	4b24      	ldr	r3, [pc, #144]	; (8010348 <__d2b+0xb0>)
 80102b6:	4825      	ldr	r0, [pc, #148]	; (801034c <__d2b+0xb4>)
 80102b8:	f000 fb2c 	bl	8010914 <__assert_func>
 80102bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80102c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80102c4:	bb2d      	cbnz	r5, 8010312 <__d2b+0x7a>
 80102c6:	9301      	str	r3, [sp, #4]
 80102c8:	f1b8 0300 	subs.w	r3, r8, #0
 80102cc:	d026      	beq.n	801031c <__d2b+0x84>
 80102ce:	4668      	mov	r0, sp
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	f7ff fd09 	bl	800fce8 <__lo0bits>
 80102d6:	9900      	ldr	r1, [sp, #0]
 80102d8:	b1f0      	cbz	r0, 8010318 <__d2b+0x80>
 80102da:	9a01      	ldr	r2, [sp, #4]
 80102dc:	f1c0 0320 	rsb	r3, r0, #32
 80102e0:	fa02 f303 	lsl.w	r3, r2, r3
 80102e4:	430b      	orrs	r3, r1
 80102e6:	40c2      	lsrs	r2, r0
 80102e8:	6163      	str	r3, [r4, #20]
 80102ea:	9201      	str	r2, [sp, #4]
 80102ec:	9b01      	ldr	r3, [sp, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	bf14      	ite	ne
 80102f2:	2102      	movne	r1, #2
 80102f4:	2101      	moveq	r1, #1
 80102f6:	61a3      	str	r3, [r4, #24]
 80102f8:	6121      	str	r1, [r4, #16]
 80102fa:	b1c5      	cbz	r5, 801032e <__d2b+0x96>
 80102fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010300:	4405      	add	r5, r0
 8010302:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010306:	603d      	str	r5, [r7, #0]
 8010308:	6030      	str	r0, [r6, #0]
 801030a:	4620      	mov	r0, r4
 801030c:	b002      	add	sp, #8
 801030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010316:	e7d6      	b.n	80102c6 <__d2b+0x2e>
 8010318:	6161      	str	r1, [r4, #20]
 801031a:	e7e7      	b.n	80102ec <__d2b+0x54>
 801031c:	a801      	add	r0, sp, #4
 801031e:	f7ff fce3 	bl	800fce8 <__lo0bits>
 8010322:	2101      	movs	r1, #1
 8010324:	9b01      	ldr	r3, [sp, #4]
 8010326:	6121      	str	r1, [r4, #16]
 8010328:	6163      	str	r3, [r4, #20]
 801032a:	3020      	adds	r0, #32
 801032c:	e7e5      	b.n	80102fa <__d2b+0x62>
 801032e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8010332:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010336:	6038      	str	r0, [r7, #0]
 8010338:	6918      	ldr	r0, [r3, #16]
 801033a:	f7ff fcb5 	bl	800fca8 <__hi0bits>
 801033e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8010342:	6031      	str	r1, [r6, #0]
 8010344:	e7e1      	b.n	801030a <__d2b+0x72>
 8010346:	bf00      	nop
 8010348:	0801193f 	.word	0x0801193f
 801034c:	080119cc 	.word	0x080119cc

08010350 <__ratio>:
 8010350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010354:	4688      	mov	r8, r1
 8010356:	4669      	mov	r1, sp
 8010358:	4681      	mov	r9, r0
 801035a:	f7ff ff49 	bl	80101f0 <__b2d>
 801035e:	460f      	mov	r7, r1
 8010360:	4604      	mov	r4, r0
 8010362:	460d      	mov	r5, r1
 8010364:	4640      	mov	r0, r8
 8010366:	a901      	add	r1, sp, #4
 8010368:	f7ff ff42 	bl	80101f0 <__b2d>
 801036c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010370:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010374:	468b      	mov	fp, r1
 8010376:	eba3 0c02 	sub.w	ip, r3, r2
 801037a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801037e:	1a9b      	subs	r3, r3, r2
 8010380:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010384:	2b00      	cmp	r3, #0
 8010386:	bfd5      	itete	le
 8010388:	460a      	movle	r2, r1
 801038a:	462a      	movgt	r2, r5
 801038c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010390:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010394:	bfd8      	it	le
 8010396:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801039a:	465b      	mov	r3, fp
 801039c:	4602      	mov	r2, r0
 801039e:	4639      	mov	r1, r7
 80103a0:	4620      	mov	r0, r4
 80103a2:	f7f0 f9db 	bl	800075c <__aeabi_ddiv>
 80103a6:	b003      	add	sp, #12
 80103a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103ac <__copybits>:
 80103ac:	3901      	subs	r1, #1
 80103ae:	b570      	push	{r4, r5, r6, lr}
 80103b0:	1149      	asrs	r1, r1, #5
 80103b2:	6914      	ldr	r4, [r2, #16]
 80103b4:	3101      	adds	r1, #1
 80103b6:	f102 0314 	add.w	r3, r2, #20
 80103ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103c2:	1f05      	subs	r5, r0, #4
 80103c4:	42a3      	cmp	r3, r4
 80103c6:	d30c      	bcc.n	80103e2 <__copybits+0x36>
 80103c8:	1aa3      	subs	r3, r4, r2
 80103ca:	3b11      	subs	r3, #17
 80103cc:	f023 0303 	bic.w	r3, r3, #3
 80103d0:	3211      	adds	r2, #17
 80103d2:	42a2      	cmp	r2, r4
 80103d4:	bf88      	it	hi
 80103d6:	2300      	movhi	r3, #0
 80103d8:	4418      	add	r0, r3
 80103da:	2300      	movs	r3, #0
 80103dc:	4288      	cmp	r0, r1
 80103de:	d305      	bcc.n	80103ec <__copybits+0x40>
 80103e0:	bd70      	pop	{r4, r5, r6, pc}
 80103e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80103e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80103ea:	e7eb      	b.n	80103c4 <__copybits+0x18>
 80103ec:	f840 3b04 	str.w	r3, [r0], #4
 80103f0:	e7f4      	b.n	80103dc <__copybits+0x30>

080103f2 <__any_on>:
 80103f2:	f100 0214 	add.w	r2, r0, #20
 80103f6:	6900      	ldr	r0, [r0, #16]
 80103f8:	114b      	asrs	r3, r1, #5
 80103fa:	4298      	cmp	r0, r3
 80103fc:	b510      	push	{r4, lr}
 80103fe:	db11      	blt.n	8010424 <__any_on+0x32>
 8010400:	dd0a      	ble.n	8010418 <__any_on+0x26>
 8010402:	f011 011f 	ands.w	r1, r1, #31
 8010406:	d007      	beq.n	8010418 <__any_on+0x26>
 8010408:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801040c:	fa24 f001 	lsr.w	r0, r4, r1
 8010410:	fa00 f101 	lsl.w	r1, r0, r1
 8010414:	428c      	cmp	r4, r1
 8010416:	d10b      	bne.n	8010430 <__any_on+0x3e>
 8010418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801041c:	4293      	cmp	r3, r2
 801041e:	d803      	bhi.n	8010428 <__any_on+0x36>
 8010420:	2000      	movs	r0, #0
 8010422:	bd10      	pop	{r4, pc}
 8010424:	4603      	mov	r3, r0
 8010426:	e7f7      	b.n	8010418 <__any_on+0x26>
 8010428:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801042c:	2900      	cmp	r1, #0
 801042e:	d0f5      	beq.n	801041c <__any_on+0x2a>
 8010430:	2001      	movs	r0, #1
 8010432:	e7f6      	b.n	8010422 <__any_on+0x30>

08010434 <_calloc_r>:
 8010434:	b570      	push	{r4, r5, r6, lr}
 8010436:	fba1 5402 	umull	r5, r4, r1, r2
 801043a:	b934      	cbnz	r4, 801044a <_calloc_r+0x16>
 801043c:	4629      	mov	r1, r5
 801043e:	f000 f875 	bl	801052c <_malloc_r>
 8010442:	4606      	mov	r6, r0
 8010444:	b928      	cbnz	r0, 8010452 <_calloc_r+0x1e>
 8010446:	4630      	mov	r0, r6
 8010448:	bd70      	pop	{r4, r5, r6, pc}
 801044a:	220c      	movs	r2, #12
 801044c:	2600      	movs	r6, #0
 801044e:	6002      	str	r2, [r0, #0]
 8010450:	e7f9      	b.n	8010446 <_calloc_r+0x12>
 8010452:	462a      	mov	r2, r5
 8010454:	4621      	mov	r1, r4
 8010456:	f7fc fe53 	bl	800d100 <memset>
 801045a:	e7f4      	b.n	8010446 <_calloc_r+0x12>

0801045c <_free_r>:
 801045c:	b538      	push	{r3, r4, r5, lr}
 801045e:	4605      	mov	r5, r0
 8010460:	2900      	cmp	r1, #0
 8010462:	d040      	beq.n	80104e6 <_free_r+0x8a>
 8010464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010468:	1f0c      	subs	r4, r1, #4
 801046a:	2b00      	cmp	r3, #0
 801046c:	bfb8      	it	lt
 801046e:	18e4      	addlt	r4, r4, r3
 8010470:	f000 fa9a 	bl	80109a8 <__malloc_lock>
 8010474:	4a1c      	ldr	r2, [pc, #112]	; (80104e8 <_free_r+0x8c>)
 8010476:	6813      	ldr	r3, [r2, #0]
 8010478:	b933      	cbnz	r3, 8010488 <_free_r+0x2c>
 801047a:	6063      	str	r3, [r4, #4]
 801047c:	6014      	str	r4, [r2, #0]
 801047e:	4628      	mov	r0, r5
 8010480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010484:	f000 ba96 	b.w	80109b4 <__malloc_unlock>
 8010488:	42a3      	cmp	r3, r4
 801048a:	d908      	bls.n	801049e <_free_r+0x42>
 801048c:	6820      	ldr	r0, [r4, #0]
 801048e:	1821      	adds	r1, r4, r0
 8010490:	428b      	cmp	r3, r1
 8010492:	bf01      	itttt	eq
 8010494:	6819      	ldreq	r1, [r3, #0]
 8010496:	685b      	ldreq	r3, [r3, #4]
 8010498:	1809      	addeq	r1, r1, r0
 801049a:	6021      	streq	r1, [r4, #0]
 801049c:	e7ed      	b.n	801047a <_free_r+0x1e>
 801049e:	461a      	mov	r2, r3
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	b10b      	cbz	r3, 80104a8 <_free_r+0x4c>
 80104a4:	42a3      	cmp	r3, r4
 80104a6:	d9fa      	bls.n	801049e <_free_r+0x42>
 80104a8:	6811      	ldr	r1, [r2, #0]
 80104aa:	1850      	adds	r0, r2, r1
 80104ac:	42a0      	cmp	r0, r4
 80104ae:	d10b      	bne.n	80104c8 <_free_r+0x6c>
 80104b0:	6820      	ldr	r0, [r4, #0]
 80104b2:	4401      	add	r1, r0
 80104b4:	1850      	adds	r0, r2, r1
 80104b6:	4283      	cmp	r3, r0
 80104b8:	6011      	str	r1, [r2, #0]
 80104ba:	d1e0      	bne.n	801047e <_free_r+0x22>
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	4401      	add	r1, r0
 80104c2:	6011      	str	r1, [r2, #0]
 80104c4:	6053      	str	r3, [r2, #4]
 80104c6:	e7da      	b.n	801047e <_free_r+0x22>
 80104c8:	d902      	bls.n	80104d0 <_free_r+0x74>
 80104ca:	230c      	movs	r3, #12
 80104cc:	602b      	str	r3, [r5, #0]
 80104ce:	e7d6      	b.n	801047e <_free_r+0x22>
 80104d0:	6820      	ldr	r0, [r4, #0]
 80104d2:	1821      	adds	r1, r4, r0
 80104d4:	428b      	cmp	r3, r1
 80104d6:	bf01      	itttt	eq
 80104d8:	6819      	ldreq	r1, [r3, #0]
 80104da:	685b      	ldreq	r3, [r3, #4]
 80104dc:	1809      	addeq	r1, r1, r0
 80104de:	6021      	streq	r1, [r4, #0]
 80104e0:	6063      	str	r3, [r4, #4]
 80104e2:	6054      	str	r4, [r2, #4]
 80104e4:	e7cb      	b.n	801047e <_free_r+0x22>
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	20001c00 	.word	0x20001c00

080104ec <sbrk_aligned>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	4e0e      	ldr	r6, [pc, #56]	; (8010528 <sbrk_aligned+0x3c>)
 80104f0:	460c      	mov	r4, r1
 80104f2:	6831      	ldr	r1, [r6, #0]
 80104f4:	4605      	mov	r5, r0
 80104f6:	b911      	cbnz	r1, 80104fe <sbrk_aligned+0x12>
 80104f8:	f000 f9ee 	bl	80108d8 <_sbrk_r>
 80104fc:	6030      	str	r0, [r6, #0]
 80104fe:	4621      	mov	r1, r4
 8010500:	4628      	mov	r0, r5
 8010502:	f000 f9e9 	bl	80108d8 <_sbrk_r>
 8010506:	1c43      	adds	r3, r0, #1
 8010508:	d00a      	beq.n	8010520 <sbrk_aligned+0x34>
 801050a:	1cc4      	adds	r4, r0, #3
 801050c:	f024 0403 	bic.w	r4, r4, #3
 8010510:	42a0      	cmp	r0, r4
 8010512:	d007      	beq.n	8010524 <sbrk_aligned+0x38>
 8010514:	1a21      	subs	r1, r4, r0
 8010516:	4628      	mov	r0, r5
 8010518:	f000 f9de 	bl	80108d8 <_sbrk_r>
 801051c:	3001      	adds	r0, #1
 801051e:	d101      	bne.n	8010524 <sbrk_aligned+0x38>
 8010520:	f04f 34ff 	mov.w	r4, #4294967295
 8010524:	4620      	mov	r0, r4
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	20001c04 	.word	0x20001c04

0801052c <_malloc_r>:
 801052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010530:	1ccd      	adds	r5, r1, #3
 8010532:	f025 0503 	bic.w	r5, r5, #3
 8010536:	3508      	adds	r5, #8
 8010538:	2d0c      	cmp	r5, #12
 801053a:	bf38      	it	cc
 801053c:	250c      	movcc	r5, #12
 801053e:	2d00      	cmp	r5, #0
 8010540:	4607      	mov	r7, r0
 8010542:	db01      	blt.n	8010548 <_malloc_r+0x1c>
 8010544:	42a9      	cmp	r1, r5
 8010546:	d905      	bls.n	8010554 <_malloc_r+0x28>
 8010548:	230c      	movs	r3, #12
 801054a:	2600      	movs	r6, #0
 801054c:	603b      	str	r3, [r7, #0]
 801054e:	4630      	mov	r0, r6
 8010550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010554:	4e2e      	ldr	r6, [pc, #184]	; (8010610 <_malloc_r+0xe4>)
 8010556:	f000 fa27 	bl	80109a8 <__malloc_lock>
 801055a:	6833      	ldr	r3, [r6, #0]
 801055c:	461c      	mov	r4, r3
 801055e:	bb34      	cbnz	r4, 80105ae <_malloc_r+0x82>
 8010560:	4629      	mov	r1, r5
 8010562:	4638      	mov	r0, r7
 8010564:	f7ff ffc2 	bl	80104ec <sbrk_aligned>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	4604      	mov	r4, r0
 801056c:	d14d      	bne.n	801060a <_malloc_r+0xde>
 801056e:	6834      	ldr	r4, [r6, #0]
 8010570:	4626      	mov	r6, r4
 8010572:	2e00      	cmp	r6, #0
 8010574:	d140      	bne.n	80105f8 <_malloc_r+0xcc>
 8010576:	6823      	ldr	r3, [r4, #0]
 8010578:	4631      	mov	r1, r6
 801057a:	4638      	mov	r0, r7
 801057c:	eb04 0803 	add.w	r8, r4, r3
 8010580:	f000 f9aa 	bl	80108d8 <_sbrk_r>
 8010584:	4580      	cmp	r8, r0
 8010586:	d13a      	bne.n	80105fe <_malloc_r+0xd2>
 8010588:	6821      	ldr	r1, [r4, #0]
 801058a:	3503      	adds	r5, #3
 801058c:	1a6d      	subs	r5, r5, r1
 801058e:	f025 0503 	bic.w	r5, r5, #3
 8010592:	3508      	adds	r5, #8
 8010594:	2d0c      	cmp	r5, #12
 8010596:	bf38      	it	cc
 8010598:	250c      	movcc	r5, #12
 801059a:	4638      	mov	r0, r7
 801059c:	4629      	mov	r1, r5
 801059e:	f7ff ffa5 	bl	80104ec <sbrk_aligned>
 80105a2:	3001      	adds	r0, #1
 80105a4:	d02b      	beq.n	80105fe <_malloc_r+0xd2>
 80105a6:	6823      	ldr	r3, [r4, #0]
 80105a8:	442b      	add	r3, r5
 80105aa:	6023      	str	r3, [r4, #0]
 80105ac:	e00e      	b.n	80105cc <_malloc_r+0xa0>
 80105ae:	6822      	ldr	r2, [r4, #0]
 80105b0:	1b52      	subs	r2, r2, r5
 80105b2:	d41e      	bmi.n	80105f2 <_malloc_r+0xc6>
 80105b4:	2a0b      	cmp	r2, #11
 80105b6:	d916      	bls.n	80105e6 <_malloc_r+0xba>
 80105b8:	1961      	adds	r1, r4, r5
 80105ba:	42a3      	cmp	r3, r4
 80105bc:	6025      	str	r5, [r4, #0]
 80105be:	bf18      	it	ne
 80105c0:	6059      	strne	r1, [r3, #4]
 80105c2:	6863      	ldr	r3, [r4, #4]
 80105c4:	bf08      	it	eq
 80105c6:	6031      	streq	r1, [r6, #0]
 80105c8:	5162      	str	r2, [r4, r5]
 80105ca:	604b      	str	r3, [r1, #4]
 80105cc:	4638      	mov	r0, r7
 80105ce:	f104 060b 	add.w	r6, r4, #11
 80105d2:	f000 f9ef 	bl	80109b4 <__malloc_unlock>
 80105d6:	f026 0607 	bic.w	r6, r6, #7
 80105da:	1d23      	adds	r3, r4, #4
 80105dc:	1af2      	subs	r2, r6, r3
 80105de:	d0b6      	beq.n	801054e <_malloc_r+0x22>
 80105e0:	1b9b      	subs	r3, r3, r6
 80105e2:	50a3      	str	r3, [r4, r2]
 80105e4:	e7b3      	b.n	801054e <_malloc_r+0x22>
 80105e6:	6862      	ldr	r2, [r4, #4]
 80105e8:	42a3      	cmp	r3, r4
 80105ea:	bf0c      	ite	eq
 80105ec:	6032      	streq	r2, [r6, #0]
 80105ee:	605a      	strne	r2, [r3, #4]
 80105f0:	e7ec      	b.n	80105cc <_malloc_r+0xa0>
 80105f2:	4623      	mov	r3, r4
 80105f4:	6864      	ldr	r4, [r4, #4]
 80105f6:	e7b2      	b.n	801055e <_malloc_r+0x32>
 80105f8:	4634      	mov	r4, r6
 80105fa:	6876      	ldr	r6, [r6, #4]
 80105fc:	e7b9      	b.n	8010572 <_malloc_r+0x46>
 80105fe:	230c      	movs	r3, #12
 8010600:	4638      	mov	r0, r7
 8010602:	603b      	str	r3, [r7, #0]
 8010604:	f000 f9d6 	bl	80109b4 <__malloc_unlock>
 8010608:	e7a1      	b.n	801054e <_malloc_r+0x22>
 801060a:	6025      	str	r5, [r4, #0]
 801060c:	e7de      	b.n	80105cc <_malloc_r+0xa0>
 801060e:	bf00      	nop
 8010610:	20001c00 	.word	0x20001c00

08010614 <__ssputs_r>:
 8010614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010618:	688e      	ldr	r6, [r1, #8]
 801061a:	4682      	mov	sl, r0
 801061c:	429e      	cmp	r6, r3
 801061e:	460c      	mov	r4, r1
 8010620:	4690      	mov	r8, r2
 8010622:	461f      	mov	r7, r3
 8010624:	d838      	bhi.n	8010698 <__ssputs_r+0x84>
 8010626:	898a      	ldrh	r2, [r1, #12]
 8010628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801062c:	d032      	beq.n	8010694 <__ssputs_r+0x80>
 801062e:	6825      	ldr	r5, [r4, #0]
 8010630:	6909      	ldr	r1, [r1, #16]
 8010632:	3301      	adds	r3, #1
 8010634:	eba5 0901 	sub.w	r9, r5, r1
 8010638:	6965      	ldr	r5, [r4, #20]
 801063a:	444b      	add	r3, r9
 801063c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010644:	106d      	asrs	r5, r5, #1
 8010646:	429d      	cmp	r5, r3
 8010648:	bf38      	it	cc
 801064a:	461d      	movcc	r5, r3
 801064c:	0553      	lsls	r3, r2, #21
 801064e:	d531      	bpl.n	80106b4 <__ssputs_r+0xa0>
 8010650:	4629      	mov	r1, r5
 8010652:	f7ff ff6b 	bl	801052c <_malloc_r>
 8010656:	4606      	mov	r6, r0
 8010658:	b950      	cbnz	r0, 8010670 <__ssputs_r+0x5c>
 801065a:	230c      	movs	r3, #12
 801065c:	f04f 30ff 	mov.w	r0, #4294967295
 8010660:	f8ca 3000 	str.w	r3, [sl]
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801066a:	81a3      	strh	r3, [r4, #12]
 801066c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010670:	464a      	mov	r2, r9
 8010672:	6921      	ldr	r1, [r4, #16]
 8010674:	f7ff fa18 	bl	800faa8 <memcpy>
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801067e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010682:	81a3      	strh	r3, [r4, #12]
 8010684:	6126      	str	r6, [r4, #16]
 8010686:	444e      	add	r6, r9
 8010688:	6026      	str	r6, [r4, #0]
 801068a:	463e      	mov	r6, r7
 801068c:	6165      	str	r5, [r4, #20]
 801068e:	eba5 0509 	sub.w	r5, r5, r9
 8010692:	60a5      	str	r5, [r4, #8]
 8010694:	42be      	cmp	r6, r7
 8010696:	d900      	bls.n	801069a <__ssputs_r+0x86>
 8010698:	463e      	mov	r6, r7
 801069a:	4632      	mov	r2, r6
 801069c:	4641      	mov	r1, r8
 801069e:	6820      	ldr	r0, [r4, #0]
 80106a0:	f000 f968 	bl	8010974 <memmove>
 80106a4:	68a3      	ldr	r3, [r4, #8]
 80106a6:	2000      	movs	r0, #0
 80106a8:	1b9b      	subs	r3, r3, r6
 80106aa:	60a3      	str	r3, [r4, #8]
 80106ac:	6823      	ldr	r3, [r4, #0]
 80106ae:	4433      	add	r3, r6
 80106b0:	6023      	str	r3, [r4, #0]
 80106b2:	e7db      	b.n	801066c <__ssputs_r+0x58>
 80106b4:	462a      	mov	r2, r5
 80106b6:	f000 f983 	bl	80109c0 <_realloc_r>
 80106ba:	4606      	mov	r6, r0
 80106bc:	2800      	cmp	r0, #0
 80106be:	d1e1      	bne.n	8010684 <__ssputs_r+0x70>
 80106c0:	4650      	mov	r0, sl
 80106c2:	6921      	ldr	r1, [r4, #16]
 80106c4:	f7ff feca 	bl	801045c <_free_r>
 80106c8:	e7c7      	b.n	801065a <__ssputs_r+0x46>
	...

080106cc <_svfiprintf_r>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	4698      	mov	r8, r3
 80106d2:	898b      	ldrh	r3, [r1, #12]
 80106d4:	4607      	mov	r7, r0
 80106d6:	061b      	lsls	r3, r3, #24
 80106d8:	460d      	mov	r5, r1
 80106da:	4614      	mov	r4, r2
 80106dc:	b09d      	sub	sp, #116	; 0x74
 80106de:	d50e      	bpl.n	80106fe <_svfiprintf_r+0x32>
 80106e0:	690b      	ldr	r3, [r1, #16]
 80106e2:	b963      	cbnz	r3, 80106fe <_svfiprintf_r+0x32>
 80106e4:	2140      	movs	r1, #64	; 0x40
 80106e6:	f7ff ff21 	bl	801052c <_malloc_r>
 80106ea:	6028      	str	r0, [r5, #0]
 80106ec:	6128      	str	r0, [r5, #16]
 80106ee:	b920      	cbnz	r0, 80106fa <_svfiprintf_r+0x2e>
 80106f0:	230c      	movs	r3, #12
 80106f2:	603b      	str	r3, [r7, #0]
 80106f4:	f04f 30ff 	mov.w	r0, #4294967295
 80106f8:	e0d1      	b.n	801089e <_svfiprintf_r+0x1d2>
 80106fa:	2340      	movs	r3, #64	; 0x40
 80106fc:	616b      	str	r3, [r5, #20]
 80106fe:	2300      	movs	r3, #0
 8010700:	9309      	str	r3, [sp, #36]	; 0x24
 8010702:	2320      	movs	r3, #32
 8010704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010708:	2330      	movs	r3, #48	; 0x30
 801070a:	f04f 0901 	mov.w	r9, #1
 801070e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010712:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80108b8 <_svfiprintf_r+0x1ec>
 8010716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801071a:	4623      	mov	r3, r4
 801071c:	469a      	mov	sl, r3
 801071e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010722:	b10a      	cbz	r2, 8010728 <_svfiprintf_r+0x5c>
 8010724:	2a25      	cmp	r2, #37	; 0x25
 8010726:	d1f9      	bne.n	801071c <_svfiprintf_r+0x50>
 8010728:	ebba 0b04 	subs.w	fp, sl, r4
 801072c:	d00b      	beq.n	8010746 <_svfiprintf_r+0x7a>
 801072e:	465b      	mov	r3, fp
 8010730:	4622      	mov	r2, r4
 8010732:	4629      	mov	r1, r5
 8010734:	4638      	mov	r0, r7
 8010736:	f7ff ff6d 	bl	8010614 <__ssputs_r>
 801073a:	3001      	adds	r0, #1
 801073c:	f000 80aa 	beq.w	8010894 <_svfiprintf_r+0x1c8>
 8010740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010742:	445a      	add	r2, fp
 8010744:	9209      	str	r2, [sp, #36]	; 0x24
 8010746:	f89a 3000 	ldrb.w	r3, [sl]
 801074a:	2b00      	cmp	r3, #0
 801074c:	f000 80a2 	beq.w	8010894 <_svfiprintf_r+0x1c8>
 8010750:	2300      	movs	r3, #0
 8010752:	f04f 32ff 	mov.w	r2, #4294967295
 8010756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801075a:	f10a 0a01 	add.w	sl, sl, #1
 801075e:	9304      	str	r3, [sp, #16]
 8010760:	9307      	str	r3, [sp, #28]
 8010762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010766:	931a      	str	r3, [sp, #104]	; 0x68
 8010768:	4654      	mov	r4, sl
 801076a:	2205      	movs	r2, #5
 801076c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010770:	4851      	ldr	r0, [pc, #324]	; (80108b8 <_svfiprintf_r+0x1ec>)
 8010772:	f7ff f98b 	bl	800fa8c <memchr>
 8010776:	9a04      	ldr	r2, [sp, #16]
 8010778:	b9d8      	cbnz	r0, 80107b2 <_svfiprintf_r+0xe6>
 801077a:	06d0      	lsls	r0, r2, #27
 801077c:	bf44      	itt	mi
 801077e:	2320      	movmi	r3, #32
 8010780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010784:	0711      	lsls	r1, r2, #28
 8010786:	bf44      	itt	mi
 8010788:	232b      	movmi	r3, #43	; 0x2b
 801078a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801078e:	f89a 3000 	ldrb.w	r3, [sl]
 8010792:	2b2a      	cmp	r3, #42	; 0x2a
 8010794:	d015      	beq.n	80107c2 <_svfiprintf_r+0xf6>
 8010796:	4654      	mov	r4, sl
 8010798:	2000      	movs	r0, #0
 801079a:	f04f 0c0a 	mov.w	ip, #10
 801079e:	9a07      	ldr	r2, [sp, #28]
 80107a0:	4621      	mov	r1, r4
 80107a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107a6:	3b30      	subs	r3, #48	; 0x30
 80107a8:	2b09      	cmp	r3, #9
 80107aa:	d94e      	bls.n	801084a <_svfiprintf_r+0x17e>
 80107ac:	b1b0      	cbz	r0, 80107dc <_svfiprintf_r+0x110>
 80107ae:	9207      	str	r2, [sp, #28]
 80107b0:	e014      	b.n	80107dc <_svfiprintf_r+0x110>
 80107b2:	eba0 0308 	sub.w	r3, r0, r8
 80107b6:	fa09 f303 	lsl.w	r3, r9, r3
 80107ba:	4313      	orrs	r3, r2
 80107bc:	46a2      	mov	sl, r4
 80107be:	9304      	str	r3, [sp, #16]
 80107c0:	e7d2      	b.n	8010768 <_svfiprintf_r+0x9c>
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	1d19      	adds	r1, r3, #4
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	9103      	str	r1, [sp, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	bfbb      	ittet	lt
 80107ce:	425b      	neglt	r3, r3
 80107d0:	f042 0202 	orrlt.w	r2, r2, #2
 80107d4:	9307      	strge	r3, [sp, #28]
 80107d6:	9307      	strlt	r3, [sp, #28]
 80107d8:	bfb8      	it	lt
 80107da:	9204      	strlt	r2, [sp, #16]
 80107dc:	7823      	ldrb	r3, [r4, #0]
 80107de:	2b2e      	cmp	r3, #46	; 0x2e
 80107e0:	d10c      	bne.n	80107fc <_svfiprintf_r+0x130>
 80107e2:	7863      	ldrb	r3, [r4, #1]
 80107e4:	2b2a      	cmp	r3, #42	; 0x2a
 80107e6:	d135      	bne.n	8010854 <_svfiprintf_r+0x188>
 80107e8:	9b03      	ldr	r3, [sp, #12]
 80107ea:	3402      	adds	r4, #2
 80107ec:	1d1a      	adds	r2, r3, #4
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	9203      	str	r2, [sp, #12]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	bfb8      	it	lt
 80107f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80107fa:	9305      	str	r3, [sp, #20]
 80107fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80108bc <_svfiprintf_r+0x1f0>
 8010800:	2203      	movs	r2, #3
 8010802:	4650      	mov	r0, sl
 8010804:	7821      	ldrb	r1, [r4, #0]
 8010806:	f7ff f941 	bl	800fa8c <memchr>
 801080a:	b140      	cbz	r0, 801081e <_svfiprintf_r+0x152>
 801080c:	2340      	movs	r3, #64	; 0x40
 801080e:	eba0 000a 	sub.w	r0, r0, sl
 8010812:	fa03 f000 	lsl.w	r0, r3, r0
 8010816:	9b04      	ldr	r3, [sp, #16]
 8010818:	3401      	adds	r4, #1
 801081a:	4303      	orrs	r3, r0
 801081c:	9304      	str	r3, [sp, #16]
 801081e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010822:	2206      	movs	r2, #6
 8010824:	4826      	ldr	r0, [pc, #152]	; (80108c0 <_svfiprintf_r+0x1f4>)
 8010826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801082a:	f7ff f92f 	bl	800fa8c <memchr>
 801082e:	2800      	cmp	r0, #0
 8010830:	d038      	beq.n	80108a4 <_svfiprintf_r+0x1d8>
 8010832:	4b24      	ldr	r3, [pc, #144]	; (80108c4 <_svfiprintf_r+0x1f8>)
 8010834:	bb1b      	cbnz	r3, 801087e <_svfiprintf_r+0x1b2>
 8010836:	9b03      	ldr	r3, [sp, #12]
 8010838:	3307      	adds	r3, #7
 801083a:	f023 0307 	bic.w	r3, r3, #7
 801083e:	3308      	adds	r3, #8
 8010840:	9303      	str	r3, [sp, #12]
 8010842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010844:	4433      	add	r3, r6
 8010846:	9309      	str	r3, [sp, #36]	; 0x24
 8010848:	e767      	b.n	801071a <_svfiprintf_r+0x4e>
 801084a:	460c      	mov	r4, r1
 801084c:	2001      	movs	r0, #1
 801084e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010852:	e7a5      	b.n	80107a0 <_svfiprintf_r+0xd4>
 8010854:	2300      	movs	r3, #0
 8010856:	f04f 0c0a 	mov.w	ip, #10
 801085a:	4619      	mov	r1, r3
 801085c:	3401      	adds	r4, #1
 801085e:	9305      	str	r3, [sp, #20]
 8010860:	4620      	mov	r0, r4
 8010862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010866:	3a30      	subs	r2, #48	; 0x30
 8010868:	2a09      	cmp	r2, #9
 801086a:	d903      	bls.n	8010874 <_svfiprintf_r+0x1a8>
 801086c:	2b00      	cmp	r3, #0
 801086e:	d0c5      	beq.n	80107fc <_svfiprintf_r+0x130>
 8010870:	9105      	str	r1, [sp, #20]
 8010872:	e7c3      	b.n	80107fc <_svfiprintf_r+0x130>
 8010874:	4604      	mov	r4, r0
 8010876:	2301      	movs	r3, #1
 8010878:	fb0c 2101 	mla	r1, ip, r1, r2
 801087c:	e7f0      	b.n	8010860 <_svfiprintf_r+0x194>
 801087e:	ab03      	add	r3, sp, #12
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	462a      	mov	r2, r5
 8010884:	4638      	mov	r0, r7
 8010886:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <_svfiprintf_r+0x1fc>)
 8010888:	a904      	add	r1, sp, #16
 801088a:	f7fc fcdf 	bl	800d24c <_printf_float>
 801088e:	1c42      	adds	r2, r0, #1
 8010890:	4606      	mov	r6, r0
 8010892:	d1d6      	bne.n	8010842 <_svfiprintf_r+0x176>
 8010894:	89ab      	ldrh	r3, [r5, #12]
 8010896:	065b      	lsls	r3, r3, #25
 8010898:	f53f af2c 	bmi.w	80106f4 <_svfiprintf_r+0x28>
 801089c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801089e:	b01d      	add	sp, #116	; 0x74
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	ab03      	add	r3, sp, #12
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	462a      	mov	r2, r5
 80108aa:	4638      	mov	r0, r7
 80108ac:	4b06      	ldr	r3, [pc, #24]	; (80108c8 <_svfiprintf_r+0x1fc>)
 80108ae:	a904      	add	r1, sp, #16
 80108b0:	f7fc ff68 	bl	800d784 <_printf_i>
 80108b4:	e7eb      	b.n	801088e <_svfiprintf_r+0x1c2>
 80108b6:	bf00      	nop
 80108b8:	08011b24 	.word	0x08011b24
 80108bc:	08011b2a 	.word	0x08011b2a
 80108c0:	08011b2e 	.word	0x08011b2e
 80108c4:	0800d24d 	.word	0x0800d24d
 80108c8:	08010615 	.word	0x08010615

080108cc <nan>:
 80108cc:	2000      	movs	r0, #0
 80108ce:	4901      	ldr	r1, [pc, #4]	; (80108d4 <nan+0x8>)
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	7ff80000 	.word	0x7ff80000

080108d8 <_sbrk_r>:
 80108d8:	b538      	push	{r3, r4, r5, lr}
 80108da:	2300      	movs	r3, #0
 80108dc:	4d05      	ldr	r5, [pc, #20]	; (80108f4 <_sbrk_r+0x1c>)
 80108de:	4604      	mov	r4, r0
 80108e0:	4608      	mov	r0, r1
 80108e2:	602b      	str	r3, [r5, #0]
 80108e4:	f7f7 f9ae 	bl	8007c44 <_sbrk>
 80108e8:	1c43      	adds	r3, r0, #1
 80108ea:	d102      	bne.n	80108f2 <_sbrk_r+0x1a>
 80108ec:	682b      	ldr	r3, [r5, #0]
 80108ee:	b103      	cbz	r3, 80108f2 <_sbrk_r+0x1a>
 80108f0:	6023      	str	r3, [r4, #0]
 80108f2:	bd38      	pop	{r3, r4, r5, pc}
 80108f4:	20001c08 	.word	0x20001c08

080108f8 <__ascii_wctomb>:
 80108f8:	4603      	mov	r3, r0
 80108fa:	4608      	mov	r0, r1
 80108fc:	b141      	cbz	r1, 8010910 <__ascii_wctomb+0x18>
 80108fe:	2aff      	cmp	r2, #255	; 0xff
 8010900:	d904      	bls.n	801090c <__ascii_wctomb+0x14>
 8010902:	228a      	movs	r2, #138	; 0x8a
 8010904:	f04f 30ff 	mov.w	r0, #4294967295
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	4770      	bx	lr
 801090c:	2001      	movs	r0, #1
 801090e:	700a      	strb	r2, [r1, #0]
 8010910:	4770      	bx	lr
	...

08010914 <__assert_func>:
 8010914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010916:	4614      	mov	r4, r2
 8010918:	461a      	mov	r2, r3
 801091a:	4b09      	ldr	r3, [pc, #36]	; (8010940 <__assert_func+0x2c>)
 801091c:	4605      	mov	r5, r0
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	68d8      	ldr	r0, [r3, #12]
 8010922:	b14c      	cbz	r4, 8010938 <__assert_func+0x24>
 8010924:	4b07      	ldr	r3, [pc, #28]	; (8010944 <__assert_func+0x30>)
 8010926:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801092a:	9100      	str	r1, [sp, #0]
 801092c:	462b      	mov	r3, r5
 801092e:	4906      	ldr	r1, [pc, #24]	; (8010948 <__assert_func+0x34>)
 8010930:	f000 f80e 	bl	8010950 <fiprintf>
 8010934:	f000 fa8a 	bl	8010e4c <abort>
 8010938:	4b04      	ldr	r3, [pc, #16]	; (801094c <__assert_func+0x38>)
 801093a:	461c      	mov	r4, r3
 801093c:	e7f3      	b.n	8010926 <__assert_func+0x12>
 801093e:	bf00      	nop
 8010940:	200001a0 	.word	0x200001a0
 8010944:	08011b35 	.word	0x08011b35
 8010948:	08011b42 	.word	0x08011b42
 801094c:	08011b70 	.word	0x08011b70

08010950 <fiprintf>:
 8010950:	b40e      	push	{r1, r2, r3}
 8010952:	b503      	push	{r0, r1, lr}
 8010954:	4601      	mov	r1, r0
 8010956:	ab03      	add	r3, sp, #12
 8010958:	4805      	ldr	r0, [pc, #20]	; (8010970 <fiprintf+0x20>)
 801095a:	f853 2b04 	ldr.w	r2, [r3], #4
 801095e:	6800      	ldr	r0, [r0, #0]
 8010960:	9301      	str	r3, [sp, #4]
 8010962:	f000 f883 	bl	8010a6c <_vfiprintf_r>
 8010966:	b002      	add	sp, #8
 8010968:	f85d eb04 	ldr.w	lr, [sp], #4
 801096c:	b003      	add	sp, #12
 801096e:	4770      	bx	lr
 8010970:	200001a0 	.word	0x200001a0

08010974 <memmove>:
 8010974:	4288      	cmp	r0, r1
 8010976:	b510      	push	{r4, lr}
 8010978:	eb01 0402 	add.w	r4, r1, r2
 801097c:	d902      	bls.n	8010984 <memmove+0x10>
 801097e:	4284      	cmp	r4, r0
 8010980:	4623      	mov	r3, r4
 8010982:	d807      	bhi.n	8010994 <memmove+0x20>
 8010984:	1e43      	subs	r3, r0, #1
 8010986:	42a1      	cmp	r1, r4
 8010988:	d008      	beq.n	801099c <memmove+0x28>
 801098a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801098e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010992:	e7f8      	b.n	8010986 <memmove+0x12>
 8010994:	4601      	mov	r1, r0
 8010996:	4402      	add	r2, r0
 8010998:	428a      	cmp	r2, r1
 801099a:	d100      	bne.n	801099e <memmove+0x2a>
 801099c:	bd10      	pop	{r4, pc}
 801099e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109a6:	e7f7      	b.n	8010998 <memmove+0x24>

080109a8 <__malloc_lock>:
 80109a8:	4801      	ldr	r0, [pc, #4]	; (80109b0 <__malloc_lock+0x8>)
 80109aa:	f000 bc0b 	b.w	80111c4 <__retarget_lock_acquire_recursive>
 80109ae:	bf00      	nop
 80109b0:	20001c0c 	.word	0x20001c0c

080109b4 <__malloc_unlock>:
 80109b4:	4801      	ldr	r0, [pc, #4]	; (80109bc <__malloc_unlock+0x8>)
 80109b6:	f000 bc06 	b.w	80111c6 <__retarget_lock_release_recursive>
 80109ba:	bf00      	nop
 80109bc:	20001c0c 	.word	0x20001c0c

080109c0 <_realloc_r>:
 80109c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c4:	4680      	mov	r8, r0
 80109c6:	4614      	mov	r4, r2
 80109c8:	460e      	mov	r6, r1
 80109ca:	b921      	cbnz	r1, 80109d6 <_realloc_r+0x16>
 80109cc:	4611      	mov	r1, r2
 80109ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109d2:	f7ff bdab 	b.w	801052c <_malloc_r>
 80109d6:	b92a      	cbnz	r2, 80109e4 <_realloc_r+0x24>
 80109d8:	f7ff fd40 	bl	801045c <_free_r>
 80109dc:	4625      	mov	r5, r4
 80109de:	4628      	mov	r0, r5
 80109e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109e4:	f000 fc56 	bl	8011294 <_malloc_usable_size_r>
 80109e8:	4284      	cmp	r4, r0
 80109ea:	4607      	mov	r7, r0
 80109ec:	d802      	bhi.n	80109f4 <_realloc_r+0x34>
 80109ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80109f2:	d812      	bhi.n	8010a1a <_realloc_r+0x5a>
 80109f4:	4621      	mov	r1, r4
 80109f6:	4640      	mov	r0, r8
 80109f8:	f7ff fd98 	bl	801052c <_malloc_r>
 80109fc:	4605      	mov	r5, r0
 80109fe:	2800      	cmp	r0, #0
 8010a00:	d0ed      	beq.n	80109de <_realloc_r+0x1e>
 8010a02:	42bc      	cmp	r4, r7
 8010a04:	4622      	mov	r2, r4
 8010a06:	4631      	mov	r1, r6
 8010a08:	bf28      	it	cs
 8010a0a:	463a      	movcs	r2, r7
 8010a0c:	f7ff f84c 	bl	800faa8 <memcpy>
 8010a10:	4631      	mov	r1, r6
 8010a12:	4640      	mov	r0, r8
 8010a14:	f7ff fd22 	bl	801045c <_free_r>
 8010a18:	e7e1      	b.n	80109de <_realloc_r+0x1e>
 8010a1a:	4635      	mov	r5, r6
 8010a1c:	e7df      	b.n	80109de <_realloc_r+0x1e>

08010a1e <__sfputc_r>:
 8010a1e:	6893      	ldr	r3, [r2, #8]
 8010a20:	b410      	push	{r4}
 8010a22:	3b01      	subs	r3, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	6093      	str	r3, [r2, #8]
 8010a28:	da07      	bge.n	8010a3a <__sfputc_r+0x1c>
 8010a2a:	6994      	ldr	r4, [r2, #24]
 8010a2c:	42a3      	cmp	r3, r4
 8010a2e:	db01      	blt.n	8010a34 <__sfputc_r+0x16>
 8010a30:	290a      	cmp	r1, #10
 8010a32:	d102      	bne.n	8010a3a <__sfputc_r+0x1c>
 8010a34:	bc10      	pop	{r4}
 8010a36:	f000 b949 	b.w	8010ccc <__swbuf_r>
 8010a3a:	6813      	ldr	r3, [r2, #0]
 8010a3c:	1c58      	adds	r0, r3, #1
 8010a3e:	6010      	str	r0, [r2, #0]
 8010a40:	7019      	strb	r1, [r3, #0]
 8010a42:	4608      	mov	r0, r1
 8010a44:	bc10      	pop	{r4}
 8010a46:	4770      	bx	lr

08010a48 <__sfputs_r>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	4606      	mov	r6, r0
 8010a4c:	460f      	mov	r7, r1
 8010a4e:	4614      	mov	r4, r2
 8010a50:	18d5      	adds	r5, r2, r3
 8010a52:	42ac      	cmp	r4, r5
 8010a54:	d101      	bne.n	8010a5a <__sfputs_r+0x12>
 8010a56:	2000      	movs	r0, #0
 8010a58:	e007      	b.n	8010a6a <__sfputs_r+0x22>
 8010a5a:	463a      	mov	r2, r7
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a62:	f7ff ffdc 	bl	8010a1e <__sfputc_r>
 8010a66:	1c43      	adds	r3, r0, #1
 8010a68:	d1f3      	bne.n	8010a52 <__sfputs_r+0xa>
 8010a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a6c <_vfiprintf_r>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	460d      	mov	r5, r1
 8010a72:	4614      	mov	r4, r2
 8010a74:	4698      	mov	r8, r3
 8010a76:	4606      	mov	r6, r0
 8010a78:	b09d      	sub	sp, #116	; 0x74
 8010a7a:	b118      	cbz	r0, 8010a84 <_vfiprintf_r+0x18>
 8010a7c:	6983      	ldr	r3, [r0, #24]
 8010a7e:	b90b      	cbnz	r3, 8010a84 <_vfiprintf_r+0x18>
 8010a80:	f000 fb02 	bl	8011088 <__sinit>
 8010a84:	4b89      	ldr	r3, [pc, #548]	; (8010cac <_vfiprintf_r+0x240>)
 8010a86:	429d      	cmp	r5, r3
 8010a88:	d11b      	bne.n	8010ac2 <_vfiprintf_r+0x56>
 8010a8a:	6875      	ldr	r5, [r6, #4]
 8010a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a8e:	07d9      	lsls	r1, r3, #31
 8010a90:	d405      	bmi.n	8010a9e <_vfiprintf_r+0x32>
 8010a92:	89ab      	ldrh	r3, [r5, #12]
 8010a94:	059a      	lsls	r2, r3, #22
 8010a96:	d402      	bmi.n	8010a9e <_vfiprintf_r+0x32>
 8010a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a9a:	f000 fb93 	bl	80111c4 <__retarget_lock_acquire_recursive>
 8010a9e:	89ab      	ldrh	r3, [r5, #12]
 8010aa0:	071b      	lsls	r3, r3, #28
 8010aa2:	d501      	bpl.n	8010aa8 <_vfiprintf_r+0x3c>
 8010aa4:	692b      	ldr	r3, [r5, #16]
 8010aa6:	b9eb      	cbnz	r3, 8010ae4 <_vfiprintf_r+0x78>
 8010aa8:	4629      	mov	r1, r5
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f000 f960 	bl	8010d70 <__swsetup_r>
 8010ab0:	b1c0      	cbz	r0, 8010ae4 <_vfiprintf_r+0x78>
 8010ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ab4:	07dc      	lsls	r4, r3, #31
 8010ab6:	d50e      	bpl.n	8010ad6 <_vfiprintf_r+0x6a>
 8010ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8010abc:	b01d      	add	sp, #116	; 0x74
 8010abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac2:	4b7b      	ldr	r3, [pc, #492]	; (8010cb0 <_vfiprintf_r+0x244>)
 8010ac4:	429d      	cmp	r5, r3
 8010ac6:	d101      	bne.n	8010acc <_vfiprintf_r+0x60>
 8010ac8:	68b5      	ldr	r5, [r6, #8]
 8010aca:	e7df      	b.n	8010a8c <_vfiprintf_r+0x20>
 8010acc:	4b79      	ldr	r3, [pc, #484]	; (8010cb4 <_vfiprintf_r+0x248>)
 8010ace:	429d      	cmp	r5, r3
 8010ad0:	bf08      	it	eq
 8010ad2:	68f5      	ldreq	r5, [r6, #12]
 8010ad4:	e7da      	b.n	8010a8c <_vfiprintf_r+0x20>
 8010ad6:	89ab      	ldrh	r3, [r5, #12]
 8010ad8:	0598      	lsls	r0, r3, #22
 8010ada:	d4ed      	bmi.n	8010ab8 <_vfiprintf_r+0x4c>
 8010adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ade:	f000 fb72 	bl	80111c6 <__retarget_lock_release_recursive>
 8010ae2:	e7e9      	b.n	8010ab8 <_vfiprintf_r+0x4c>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae8:	2320      	movs	r3, #32
 8010aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aee:	2330      	movs	r3, #48	; 0x30
 8010af0:	f04f 0901 	mov.w	r9, #1
 8010af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010af8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010cb8 <_vfiprintf_r+0x24c>
 8010afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b00:	4623      	mov	r3, r4
 8010b02:	469a      	mov	sl, r3
 8010b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b08:	b10a      	cbz	r2, 8010b0e <_vfiprintf_r+0xa2>
 8010b0a:	2a25      	cmp	r2, #37	; 0x25
 8010b0c:	d1f9      	bne.n	8010b02 <_vfiprintf_r+0x96>
 8010b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8010b12:	d00b      	beq.n	8010b2c <_vfiprintf_r+0xc0>
 8010b14:	465b      	mov	r3, fp
 8010b16:	4622      	mov	r2, r4
 8010b18:	4629      	mov	r1, r5
 8010b1a:	4630      	mov	r0, r6
 8010b1c:	f7ff ff94 	bl	8010a48 <__sfputs_r>
 8010b20:	3001      	adds	r0, #1
 8010b22:	f000 80aa 	beq.w	8010c7a <_vfiprintf_r+0x20e>
 8010b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b28:	445a      	add	r2, fp
 8010b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8010b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f000 80a2 	beq.w	8010c7a <_vfiprintf_r+0x20e>
 8010b36:	2300      	movs	r3, #0
 8010b38:	f04f 32ff 	mov.w	r2, #4294967295
 8010b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b40:	f10a 0a01 	add.w	sl, sl, #1
 8010b44:	9304      	str	r3, [sp, #16]
 8010b46:	9307      	str	r3, [sp, #28]
 8010b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8010b4e:	4654      	mov	r4, sl
 8010b50:	2205      	movs	r2, #5
 8010b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b56:	4858      	ldr	r0, [pc, #352]	; (8010cb8 <_vfiprintf_r+0x24c>)
 8010b58:	f7fe ff98 	bl	800fa8c <memchr>
 8010b5c:	9a04      	ldr	r2, [sp, #16]
 8010b5e:	b9d8      	cbnz	r0, 8010b98 <_vfiprintf_r+0x12c>
 8010b60:	06d1      	lsls	r1, r2, #27
 8010b62:	bf44      	itt	mi
 8010b64:	2320      	movmi	r3, #32
 8010b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b6a:	0713      	lsls	r3, r2, #28
 8010b6c:	bf44      	itt	mi
 8010b6e:	232b      	movmi	r3, #43	; 0x2b
 8010b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b74:	f89a 3000 	ldrb.w	r3, [sl]
 8010b78:	2b2a      	cmp	r3, #42	; 0x2a
 8010b7a:	d015      	beq.n	8010ba8 <_vfiprintf_r+0x13c>
 8010b7c:	4654      	mov	r4, sl
 8010b7e:	2000      	movs	r0, #0
 8010b80:	f04f 0c0a 	mov.w	ip, #10
 8010b84:	9a07      	ldr	r2, [sp, #28]
 8010b86:	4621      	mov	r1, r4
 8010b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b8c:	3b30      	subs	r3, #48	; 0x30
 8010b8e:	2b09      	cmp	r3, #9
 8010b90:	d94e      	bls.n	8010c30 <_vfiprintf_r+0x1c4>
 8010b92:	b1b0      	cbz	r0, 8010bc2 <_vfiprintf_r+0x156>
 8010b94:	9207      	str	r2, [sp, #28]
 8010b96:	e014      	b.n	8010bc2 <_vfiprintf_r+0x156>
 8010b98:	eba0 0308 	sub.w	r3, r0, r8
 8010b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	46a2      	mov	sl, r4
 8010ba4:	9304      	str	r3, [sp, #16]
 8010ba6:	e7d2      	b.n	8010b4e <_vfiprintf_r+0xe2>
 8010ba8:	9b03      	ldr	r3, [sp, #12]
 8010baa:	1d19      	adds	r1, r3, #4
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	9103      	str	r1, [sp, #12]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	bfbb      	ittet	lt
 8010bb4:	425b      	neglt	r3, r3
 8010bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8010bba:	9307      	strge	r3, [sp, #28]
 8010bbc:	9307      	strlt	r3, [sp, #28]
 8010bbe:	bfb8      	it	lt
 8010bc0:	9204      	strlt	r2, [sp, #16]
 8010bc2:	7823      	ldrb	r3, [r4, #0]
 8010bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8010bc6:	d10c      	bne.n	8010be2 <_vfiprintf_r+0x176>
 8010bc8:	7863      	ldrb	r3, [r4, #1]
 8010bca:	2b2a      	cmp	r3, #42	; 0x2a
 8010bcc:	d135      	bne.n	8010c3a <_vfiprintf_r+0x1ce>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	3402      	adds	r4, #2
 8010bd2:	1d1a      	adds	r2, r3, #4
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	9203      	str	r2, [sp, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	bfb8      	it	lt
 8010bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010be0:	9305      	str	r3, [sp, #20]
 8010be2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010cbc <_vfiprintf_r+0x250>
 8010be6:	2203      	movs	r2, #3
 8010be8:	4650      	mov	r0, sl
 8010bea:	7821      	ldrb	r1, [r4, #0]
 8010bec:	f7fe ff4e 	bl	800fa8c <memchr>
 8010bf0:	b140      	cbz	r0, 8010c04 <_vfiprintf_r+0x198>
 8010bf2:	2340      	movs	r3, #64	; 0x40
 8010bf4:	eba0 000a 	sub.w	r0, r0, sl
 8010bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8010bfc:	9b04      	ldr	r3, [sp, #16]
 8010bfe:	3401      	adds	r4, #1
 8010c00:	4303      	orrs	r3, r0
 8010c02:	9304      	str	r3, [sp, #16]
 8010c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c08:	2206      	movs	r2, #6
 8010c0a:	482d      	ldr	r0, [pc, #180]	; (8010cc0 <_vfiprintf_r+0x254>)
 8010c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c10:	f7fe ff3c 	bl	800fa8c <memchr>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d03f      	beq.n	8010c98 <_vfiprintf_r+0x22c>
 8010c18:	4b2a      	ldr	r3, [pc, #168]	; (8010cc4 <_vfiprintf_r+0x258>)
 8010c1a:	bb1b      	cbnz	r3, 8010c64 <_vfiprintf_r+0x1f8>
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	3307      	adds	r3, #7
 8010c20:	f023 0307 	bic.w	r3, r3, #7
 8010c24:	3308      	adds	r3, #8
 8010c26:	9303      	str	r3, [sp, #12]
 8010c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c2a:	443b      	add	r3, r7
 8010c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c2e:	e767      	b.n	8010b00 <_vfiprintf_r+0x94>
 8010c30:	460c      	mov	r4, r1
 8010c32:	2001      	movs	r0, #1
 8010c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c38:	e7a5      	b.n	8010b86 <_vfiprintf_r+0x11a>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	f04f 0c0a 	mov.w	ip, #10
 8010c40:	4619      	mov	r1, r3
 8010c42:	3401      	adds	r4, #1
 8010c44:	9305      	str	r3, [sp, #20]
 8010c46:	4620      	mov	r0, r4
 8010c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c4c:	3a30      	subs	r2, #48	; 0x30
 8010c4e:	2a09      	cmp	r2, #9
 8010c50:	d903      	bls.n	8010c5a <_vfiprintf_r+0x1ee>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0c5      	beq.n	8010be2 <_vfiprintf_r+0x176>
 8010c56:	9105      	str	r1, [sp, #20]
 8010c58:	e7c3      	b.n	8010be2 <_vfiprintf_r+0x176>
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c62:	e7f0      	b.n	8010c46 <_vfiprintf_r+0x1da>
 8010c64:	ab03      	add	r3, sp, #12
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	462a      	mov	r2, r5
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	4b16      	ldr	r3, [pc, #88]	; (8010cc8 <_vfiprintf_r+0x25c>)
 8010c6e:	a904      	add	r1, sp, #16
 8010c70:	f7fc faec 	bl	800d24c <_printf_float>
 8010c74:	4607      	mov	r7, r0
 8010c76:	1c78      	adds	r0, r7, #1
 8010c78:	d1d6      	bne.n	8010c28 <_vfiprintf_r+0x1bc>
 8010c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c7c:	07d9      	lsls	r1, r3, #31
 8010c7e:	d405      	bmi.n	8010c8c <_vfiprintf_r+0x220>
 8010c80:	89ab      	ldrh	r3, [r5, #12]
 8010c82:	059a      	lsls	r2, r3, #22
 8010c84:	d402      	bmi.n	8010c8c <_vfiprintf_r+0x220>
 8010c86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c88:	f000 fa9d 	bl	80111c6 <__retarget_lock_release_recursive>
 8010c8c:	89ab      	ldrh	r3, [r5, #12]
 8010c8e:	065b      	lsls	r3, r3, #25
 8010c90:	f53f af12 	bmi.w	8010ab8 <_vfiprintf_r+0x4c>
 8010c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c96:	e711      	b.n	8010abc <_vfiprintf_r+0x50>
 8010c98:	ab03      	add	r3, sp, #12
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	462a      	mov	r2, r5
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	4b09      	ldr	r3, [pc, #36]	; (8010cc8 <_vfiprintf_r+0x25c>)
 8010ca2:	a904      	add	r1, sp, #16
 8010ca4:	f7fc fd6e 	bl	800d784 <_printf_i>
 8010ca8:	e7e4      	b.n	8010c74 <_vfiprintf_r+0x208>
 8010caa:	bf00      	nop
 8010cac:	08011c94 	.word	0x08011c94
 8010cb0:	08011cb4 	.word	0x08011cb4
 8010cb4:	08011c74 	.word	0x08011c74
 8010cb8:	08011b24 	.word	0x08011b24
 8010cbc:	08011b2a 	.word	0x08011b2a
 8010cc0:	08011b2e 	.word	0x08011b2e
 8010cc4:	0800d24d 	.word	0x0800d24d
 8010cc8:	08010a49 	.word	0x08010a49

08010ccc <__swbuf_r>:
 8010ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cce:	460e      	mov	r6, r1
 8010cd0:	4614      	mov	r4, r2
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	b118      	cbz	r0, 8010cde <__swbuf_r+0x12>
 8010cd6:	6983      	ldr	r3, [r0, #24]
 8010cd8:	b90b      	cbnz	r3, 8010cde <__swbuf_r+0x12>
 8010cda:	f000 f9d5 	bl	8011088 <__sinit>
 8010cde:	4b21      	ldr	r3, [pc, #132]	; (8010d64 <__swbuf_r+0x98>)
 8010ce0:	429c      	cmp	r4, r3
 8010ce2:	d12b      	bne.n	8010d3c <__swbuf_r+0x70>
 8010ce4:	686c      	ldr	r4, [r5, #4]
 8010ce6:	69a3      	ldr	r3, [r4, #24]
 8010ce8:	60a3      	str	r3, [r4, #8]
 8010cea:	89a3      	ldrh	r3, [r4, #12]
 8010cec:	071a      	lsls	r2, r3, #28
 8010cee:	d52f      	bpl.n	8010d50 <__swbuf_r+0x84>
 8010cf0:	6923      	ldr	r3, [r4, #16]
 8010cf2:	b36b      	cbz	r3, 8010d50 <__swbuf_r+0x84>
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	6820      	ldr	r0, [r4, #0]
 8010cf8:	b2f6      	uxtb	r6, r6
 8010cfa:	1ac0      	subs	r0, r0, r3
 8010cfc:	6963      	ldr	r3, [r4, #20]
 8010cfe:	4637      	mov	r7, r6
 8010d00:	4283      	cmp	r3, r0
 8010d02:	dc04      	bgt.n	8010d0e <__swbuf_r+0x42>
 8010d04:	4621      	mov	r1, r4
 8010d06:	4628      	mov	r0, r5
 8010d08:	f000 f92a 	bl	8010f60 <_fflush_r>
 8010d0c:	bb30      	cbnz	r0, 8010d5c <__swbuf_r+0x90>
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	3001      	adds	r0, #1
 8010d12:	3b01      	subs	r3, #1
 8010d14:	60a3      	str	r3, [r4, #8]
 8010d16:	6823      	ldr	r3, [r4, #0]
 8010d18:	1c5a      	adds	r2, r3, #1
 8010d1a:	6022      	str	r2, [r4, #0]
 8010d1c:	701e      	strb	r6, [r3, #0]
 8010d1e:	6963      	ldr	r3, [r4, #20]
 8010d20:	4283      	cmp	r3, r0
 8010d22:	d004      	beq.n	8010d2e <__swbuf_r+0x62>
 8010d24:	89a3      	ldrh	r3, [r4, #12]
 8010d26:	07db      	lsls	r3, r3, #31
 8010d28:	d506      	bpl.n	8010d38 <__swbuf_r+0x6c>
 8010d2a:	2e0a      	cmp	r6, #10
 8010d2c:	d104      	bne.n	8010d38 <__swbuf_r+0x6c>
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4628      	mov	r0, r5
 8010d32:	f000 f915 	bl	8010f60 <_fflush_r>
 8010d36:	b988      	cbnz	r0, 8010d5c <__swbuf_r+0x90>
 8010d38:	4638      	mov	r0, r7
 8010d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <__swbuf_r+0x9c>)
 8010d3e:	429c      	cmp	r4, r3
 8010d40:	d101      	bne.n	8010d46 <__swbuf_r+0x7a>
 8010d42:	68ac      	ldr	r4, [r5, #8]
 8010d44:	e7cf      	b.n	8010ce6 <__swbuf_r+0x1a>
 8010d46:	4b09      	ldr	r3, [pc, #36]	; (8010d6c <__swbuf_r+0xa0>)
 8010d48:	429c      	cmp	r4, r3
 8010d4a:	bf08      	it	eq
 8010d4c:	68ec      	ldreq	r4, [r5, #12]
 8010d4e:	e7ca      	b.n	8010ce6 <__swbuf_r+0x1a>
 8010d50:	4621      	mov	r1, r4
 8010d52:	4628      	mov	r0, r5
 8010d54:	f000 f80c 	bl	8010d70 <__swsetup_r>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d0cb      	beq.n	8010cf4 <__swbuf_r+0x28>
 8010d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8010d60:	e7ea      	b.n	8010d38 <__swbuf_r+0x6c>
 8010d62:	bf00      	nop
 8010d64:	08011c94 	.word	0x08011c94
 8010d68:	08011cb4 	.word	0x08011cb4
 8010d6c:	08011c74 	.word	0x08011c74

08010d70 <__swsetup_r>:
 8010d70:	4b32      	ldr	r3, [pc, #200]	; (8010e3c <__swsetup_r+0xcc>)
 8010d72:	b570      	push	{r4, r5, r6, lr}
 8010d74:	681d      	ldr	r5, [r3, #0]
 8010d76:	4606      	mov	r6, r0
 8010d78:	460c      	mov	r4, r1
 8010d7a:	b125      	cbz	r5, 8010d86 <__swsetup_r+0x16>
 8010d7c:	69ab      	ldr	r3, [r5, #24]
 8010d7e:	b913      	cbnz	r3, 8010d86 <__swsetup_r+0x16>
 8010d80:	4628      	mov	r0, r5
 8010d82:	f000 f981 	bl	8011088 <__sinit>
 8010d86:	4b2e      	ldr	r3, [pc, #184]	; (8010e40 <__swsetup_r+0xd0>)
 8010d88:	429c      	cmp	r4, r3
 8010d8a:	d10f      	bne.n	8010dac <__swsetup_r+0x3c>
 8010d8c:	686c      	ldr	r4, [r5, #4]
 8010d8e:	89a3      	ldrh	r3, [r4, #12]
 8010d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d94:	0719      	lsls	r1, r3, #28
 8010d96:	d42c      	bmi.n	8010df2 <__swsetup_r+0x82>
 8010d98:	06dd      	lsls	r5, r3, #27
 8010d9a:	d411      	bmi.n	8010dc0 <__swsetup_r+0x50>
 8010d9c:	2309      	movs	r3, #9
 8010d9e:	6033      	str	r3, [r6, #0]
 8010da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	81a3      	strh	r3, [r4, #12]
 8010daa:	e03e      	b.n	8010e2a <__swsetup_r+0xba>
 8010dac:	4b25      	ldr	r3, [pc, #148]	; (8010e44 <__swsetup_r+0xd4>)
 8010dae:	429c      	cmp	r4, r3
 8010db0:	d101      	bne.n	8010db6 <__swsetup_r+0x46>
 8010db2:	68ac      	ldr	r4, [r5, #8]
 8010db4:	e7eb      	b.n	8010d8e <__swsetup_r+0x1e>
 8010db6:	4b24      	ldr	r3, [pc, #144]	; (8010e48 <__swsetup_r+0xd8>)
 8010db8:	429c      	cmp	r4, r3
 8010dba:	bf08      	it	eq
 8010dbc:	68ec      	ldreq	r4, [r5, #12]
 8010dbe:	e7e6      	b.n	8010d8e <__swsetup_r+0x1e>
 8010dc0:	0758      	lsls	r0, r3, #29
 8010dc2:	d512      	bpl.n	8010dea <__swsetup_r+0x7a>
 8010dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dc6:	b141      	cbz	r1, 8010dda <__swsetup_r+0x6a>
 8010dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010dcc:	4299      	cmp	r1, r3
 8010dce:	d002      	beq.n	8010dd6 <__swsetup_r+0x66>
 8010dd0:	4630      	mov	r0, r6
 8010dd2:	f7ff fb43 	bl	801045c <_free_r>
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8010dda:	89a3      	ldrh	r3, [r4, #12]
 8010ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010de0:	81a3      	strh	r3, [r4, #12]
 8010de2:	2300      	movs	r3, #0
 8010de4:	6063      	str	r3, [r4, #4]
 8010de6:	6923      	ldr	r3, [r4, #16]
 8010de8:	6023      	str	r3, [r4, #0]
 8010dea:	89a3      	ldrh	r3, [r4, #12]
 8010dec:	f043 0308 	orr.w	r3, r3, #8
 8010df0:	81a3      	strh	r3, [r4, #12]
 8010df2:	6923      	ldr	r3, [r4, #16]
 8010df4:	b94b      	cbnz	r3, 8010e0a <__swsetup_r+0x9a>
 8010df6:	89a3      	ldrh	r3, [r4, #12]
 8010df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e00:	d003      	beq.n	8010e0a <__swsetup_r+0x9a>
 8010e02:	4621      	mov	r1, r4
 8010e04:	4630      	mov	r0, r6
 8010e06:	f000 fa05 	bl	8011214 <__smakebuf_r>
 8010e0a:	89a0      	ldrh	r0, [r4, #12]
 8010e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e10:	f010 0301 	ands.w	r3, r0, #1
 8010e14:	d00a      	beq.n	8010e2c <__swsetup_r+0xbc>
 8010e16:	2300      	movs	r3, #0
 8010e18:	60a3      	str	r3, [r4, #8]
 8010e1a:	6963      	ldr	r3, [r4, #20]
 8010e1c:	425b      	negs	r3, r3
 8010e1e:	61a3      	str	r3, [r4, #24]
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	b943      	cbnz	r3, 8010e36 <__swsetup_r+0xc6>
 8010e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e28:	d1ba      	bne.n	8010da0 <__swsetup_r+0x30>
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}
 8010e2c:	0781      	lsls	r1, r0, #30
 8010e2e:	bf58      	it	pl
 8010e30:	6963      	ldrpl	r3, [r4, #20]
 8010e32:	60a3      	str	r3, [r4, #8]
 8010e34:	e7f4      	b.n	8010e20 <__swsetup_r+0xb0>
 8010e36:	2000      	movs	r0, #0
 8010e38:	e7f7      	b.n	8010e2a <__swsetup_r+0xba>
 8010e3a:	bf00      	nop
 8010e3c:	200001a0 	.word	0x200001a0
 8010e40:	08011c94 	.word	0x08011c94
 8010e44:	08011cb4 	.word	0x08011cb4
 8010e48:	08011c74 	.word	0x08011c74

08010e4c <abort>:
 8010e4c:	2006      	movs	r0, #6
 8010e4e:	b508      	push	{r3, lr}
 8010e50:	f000 fa50 	bl	80112f4 <raise>
 8010e54:	2001      	movs	r0, #1
 8010e56:	f7f6 fec5 	bl	8007be4 <_exit>
	...

08010e5c <__sflush_r>:
 8010e5c:	898a      	ldrh	r2, [r1, #12]
 8010e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e60:	4605      	mov	r5, r0
 8010e62:	0710      	lsls	r0, r2, #28
 8010e64:	460c      	mov	r4, r1
 8010e66:	d457      	bmi.n	8010f18 <__sflush_r+0xbc>
 8010e68:	684b      	ldr	r3, [r1, #4]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	dc04      	bgt.n	8010e78 <__sflush_r+0x1c>
 8010e6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	dc01      	bgt.n	8010e78 <__sflush_r+0x1c>
 8010e74:	2000      	movs	r0, #0
 8010e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e7a:	2e00      	cmp	r6, #0
 8010e7c:	d0fa      	beq.n	8010e74 <__sflush_r+0x18>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e84:	682f      	ldr	r7, [r5, #0]
 8010e86:	602b      	str	r3, [r5, #0]
 8010e88:	d032      	beq.n	8010ef0 <__sflush_r+0x94>
 8010e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e8c:	89a3      	ldrh	r3, [r4, #12]
 8010e8e:	075a      	lsls	r2, r3, #29
 8010e90:	d505      	bpl.n	8010e9e <__sflush_r+0x42>
 8010e92:	6863      	ldr	r3, [r4, #4]
 8010e94:	1ac0      	subs	r0, r0, r3
 8010e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e98:	b10b      	cbz	r3, 8010e9e <__sflush_r+0x42>
 8010e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e9c:	1ac0      	subs	r0, r0, r3
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	6a21      	ldr	r1, [r4, #32]
 8010ea8:	47b0      	blx	r6
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	d106      	bne.n	8010ebe <__sflush_r+0x62>
 8010eb0:	6829      	ldr	r1, [r5, #0]
 8010eb2:	291d      	cmp	r1, #29
 8010eb4:	d82c      	bhi.n	8010f10 <__sflush_r+0xb4>
 8010eb6:	4a29      	ldr	r2, [pc, #164]	; (8010f5c <__sflush_r+0x100>)
 8010eb8:	40ca      	lsrs	r2, r1
 8010eba:	07d6      	lsls	r6, r2, #31
 8010ebc:	d528      	bpl.n	8010f10 <__sflush_r+0xb4>
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	6062      	str	r2, [r4, #4]
 8010ec2:	6922      	ldr	r2, [r4, #16]
 8010ec4:	04d9      	lsls	r1, r3, #19
 8010ec6:	6022      	str	r2, [r4, #0]
 8010ec8:	d504      	bpl.n	8010ed4 <__sflush_r+0x78>
 8010eca:	1c42      	adds	r2, r0, #1
 8010ecc:	d101      	bne.n	8010ed2 <__sflush_r+0x76>
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	b903      	cbnz	r3, 8010ed4 <__sflush_r+0x78>
 8010ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8010ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ed6:	602f      	str	r7, [r5, #0]
 8010ed8:	2900      	cmp	r1, #0
 8010eda:	d0cb      	beq.n	8010e74 <__sflush_r+0x18>
 8010edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ee0:	4299      	cmp	r1, r3
 8010ee2:	d002      	beq.n	8010eea <__sflush_r+0x8e>
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	f7ff fab9 	bl	801045c <_free_r>
 8010eea:	2000      	movs	r0, #0
 8010eec:	6360      	str	r0, [r4, #52]	; 0x34
 8010eee:	e7c2      	b.n	8010e76 <__sflush_r+0x1a>
 8010ef0:	6a21      	ldr	r1, [r4, #32]
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	47b0      	blx	r6
 8010ef8:	1c41      	adds	r1, r0, #1
 8010efa:	d1c7      	bne.n	8010e8c <__sflush_r+0x30>
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d0c4      	beq.n	8010e8c <__sflush_r+0x30>
 8010f02:	2b1d      	cmp	r3, #29
 8010f04:	d001      	beq.n	8010f0a <__sflush_r+0xae>
 8010f06:	2b16      	cmp	r3, #22
 8010f08:	d101      	bne.n	8010f0e <__sflush_r+0xb2>
 8010f0a:	602f      	str	r7, [r5, #0]
 8010f0c:	e7b2      	b.n	8010e74 <__sflush_r+0x18>
 8010f0e:	89a3      	ldrh	r3, [r4, #12]
 8010f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f14:	81a3      	strh	r3, [r4, #12]
 8010f16:	e7ae      	b.n	8010e76 <__sflush_r+0x1a>
 8010f18:	690f      	ldr	r7, [r1, #16]
 8010f1a:	2f00      	cmp	r7, #0
 8010f1c:	d0aa      	beq.n	8010e74 <__sflush_r+0x18>
 8010f1e:	0793      	lsls	r3, r2, #30
 8010f20:	bf18      	it	ne
 8010f22:	2300      	movne	r3, #0
 8010f24:	680e      	ldr	r6, [r1, #0]
 8010f26:	bf08      	it	eq
 8010f28:	694b      	ldreq	r3, [r1, #20]
 8010f2a:	1bf6      	subs	r6, r6, r7
 8010f2c:	600f      	str	r7, [r1, #0]
 8010f2e:	608b      	str	r3, [r1, #8]
 8010f30:	2e00      	cmp	r6, #0
 8010f32:	dd9f      	ble.n	8010e74 <__sflush_r+0x18>
 8010f34:	4633      	mov	r3, r6
 8010f36:	463a      	mov	r2, r7
 8010f38:	4628      	mov	r0, r5
 8010f3a:	6a21      	ldr	r1, [r4, #32]
 8010f3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010f40:	47e0      	blx	ip
 8010f42:	2800      	cmp	r0, #0
 8010f44:	dc06      	bgt.n	8010f54 <__sflush_r+0xf8>
 8010f46:	89a3      	ldrh	r3, [r4, #12]
 8010f48:	f04f 30ff 	mov.w	r0, #4294967295
 8010f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f50:	81a3      	strh	r3, [r4, #12]
 8010f52:	e790      	b.n	8010e76 <__sflush_r+0x1a>
 8010f54:	4407      	add	r7, r0
 8010f56:	1a36      	subs	r6, r6, r0
 8010f58:	e7ea      	b.n	8010f30 <__sflush_r+0xd4>
 8010f5a:	bf00      	nop
 8010f5c:	20400001 	.word	0x20400001

08010f60 <_fflush_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	690b      	ldr	r3, [r1, #16]
 8010f64:	4605      	mov	r5, r0
 8010f66:	460c      	mov	r4, r1
 8010f68:	b913      	cbnz	r3, 8010f70 <_fflush_r+0x10>
 8010f6a:	2500      	movs	r5, #0
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	b118      	cbz	r0, 8010f7a <_fflush_r+0x1a>
 8010f72:	6983      	ldr	r3, [r0, #24]
 8010f74:	b90b      	cbnz	r3, 8010f7a <_fflush_r+0x1a>
 8010f76:	f000 f887 	bl	8011088 <__sinit>
 8010f7a:	4b14      	ldr	r3, [pc, #80]	; (8010fcc <_fflush_r+0x6c>)
 8010f7c:	429c      	cmp	r4, r3
 8010f7e:	d11b      	bne.n	8010fb8 <_fflush_r+0x58>
 8010f80:	686c      	ldr	r4, [r5, #4]
 8010f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d0ef      	beq.n	8010f6a <_fflush_r+0xa>
 8010f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f8c:	07d0      	lsls	r0, r2, #31
 8010f8e:	d404      	bmi.n	8010f9a <_fflush_r+0x3a>
 8010f90:	0599      	lsls	r1, r3, #22
 8010f92:	d402      	bmi.n	8010f9a <_fflush_r+0x3a>
 8010f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f96:	f000 f915 	bl	80111c4 <__retarget_lock_acquire_recursive>
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	f7ff ff5d 	bl	8010e5c <__sflush_r>
 8010fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fa4:	4605      	mov	r5, r0
 8010fa6:	07da      	lsls	r2, r3, #31
 8010fa8:	d4e0      	bmi.n	8010f6c <_fflush_r+0xc>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	059b      	lsls	r3, r3, #22
 8010fae:	d4dd      	bmi.n	8010f6c <_fflush_r+0xc>
 8010fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fb2:	f000 f908 	bl	80111c6 <__retarget_lock_release_recursive>
 8010fb6:	e7d9      	b.n	8010f6c <_fflush_r+0xc>
 8010fb8:	4b05      	ldr	r3, [pc, #20]	; (8010fd0 <_fflush_r+0x70>)
 8010fba:	429c      	cmp	r4, r3
 8010fbc:	d101      	bne.n	8010fc2 <_fflush_r+0x62>
 8010fbe:	68ac      	ldr	r4, [r5, #8]
 8010fc0:	e7df      	b.n	8010f82 <_fflush_r+0x22>
 8010fc2:	4b04      	ldr	r3, [pc, #16]	; (8010fd4 <_fflush_r+0x74>)
 8010fc4:	429c      	cmp	r4, r3
 8010fc6:	bf08      	it	eq
 8010fc8:	68ec      	ldreq	r4, [r5, #12]
 8010fca:	e7da      	b.n	8010f82 <_fflush_r+0x22>
 8010fcc:	08011c94 	.word	0x08011c94
 8010fd0:	08011cb4 	.word	0x08011cb4
 8010fd4:	08011c74 	.word	0x08011c74

08010fd8 <std>:
 8010fd8:	2300      	movs	r3, #0
 8010fda:	b510      	push	{r4, lr}
 8010fdc:	4604      	mov	r4, r0
 8010fde:	e9c0 3300 	strd	r3, r3, [r0]
 8010fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fe6:	6083      	str	r3, [r0, #8]
 8010fe8:	8181      	strh	r1, [r0, #12]
 8010fea:	6643      	str	r3, [r0, #100]	; 0x64
 8010fec:	81c2      	strh	r2, [r0, #14]
 8010fee:	6183      	str	r3, [r0, #24]
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	2208      	movs	r2, #8
 8010ff4:	305c      	adds	r0, #92	; 0x5c
 8010ff6:	f7fc f883 	bl	800d100 <memset>
 8010ffa:	4b05      	ldr	r3, [pc, #20]	; (8011010 <std+0x38>)
 8010ffc:	6224      	str	r4, [r4, #32]
 8010ffe:	6263      	str	r3, [r4, #36]	; 0x24
 8011000:	4b04      	ldr	r3, [pc, #16]	; (8011014 <std+0x3c>)
 8011002:	62a3      	str	r3, [r4, #40]	; 0x28
 8011004:	4b04      	ldr	r3, [pc, #16]	; (8011018 <std+0x40>)
 8011006:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011008:	4b04      	ldr	r3, [pc, #16]	; (801101c <std+0x44>)
 801100a:	6323      	str	r3, [r4, #48]	; 0x30
 801100c:	bd10      	pop	{r4, pc}
 801100e:	bf00      	nop
 8011010:	0801132d 	.word	0x0801132d
 8011014:	0801134f 	.word	0x0801134f
 8011018:	08011387 	.word	0x08011387
 801101c:	080113ab 	.word	0x080113ab

08011020 <_cleanup_r>:
 8011020:	4901      	ldr	r1, [pc, #4]	; (8011028 <_cleanup_r+0x8>)
 8011022:	f000 b8af 	b.w	8011184 <_fwalk_reent>
 8011026:	bf00      	nop
 8011028:	08010f61 	.word	0x08010f61

0801102c <__sfmoreglue>:
 801102c:	2268      	movs	r2, #104	; 0x68
 801102e:	b570      	push	{r4, r5, r6, lr}
 8011030:	1e4d      	subs	r5, r1, #1
 8011032:	4355      	muls	r5, r2
 8011034:	460e      	mov	r6, r1
 8011036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801103a:	f7ff fa77 	bl	801052c <_malloc_r>
 801103e:	4604      	mov	r4, r0
 8011040:	b140      	cbz	r0, 8011054 <__sfmoreglue+0x28>
 8011042:	2100      	movs	r1, #0
 8011044:	e9c0 1600 	strd	r1, r6, [r0]
 8011048:	300c      	adds	r0, #12
 801104a:	60a0      	str	r0, [r4, #8]
 801104c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011050:	f7fc f856 	bl	800d100 <memset>
 8011054:	4620      	mov	r0, r4
 8011056:	bd70      	pop	{r4, r5, r6, pc}

08011058 <__sfp_lock_acquire>:
 8011058:	4801      	ldr	r0, [pc, #4]	; (8011060 <__sfp_lock_acquire+0x8>)
 801105a:	f000 b8b3 	b.w	80111c4 <__retarget_lock_acquire_recursive>
 801105e:	bf00      	nop
 8011060:	20001c0d 	.word	0x20001c0d

08011064 <__sfp_lock_release>:
 8011064:	4801      	ldr	r0, [pc, #4]	; (801106c <__sfp_lock_release+0x8>)
 8011066:	f000 b8ae 	b.w	80111c6 <__retarget_lock_release_recursive>
 801106a:	bf00      	nop
 801106c:	20001c0d 	.word	0x20001c0d

08011070 <__sinit_lock_acquire>:
 8011070:	4801      	ldr	r0, [pc, #4]	; (8011078 <__sinit_lock_acquire+0x8>)
 8011072:	f000 b8a7 	b.w	80111c4 <__retarget_lock_acquire_recursive>
 8011076:	bf00      	nop
 8011078:	20001c0e 	.word	0x20001c0e

0801107c <__sinit_lock_release>:
 801107c:	4801      	ldr	r0, [pc, #4]	; (8011084 <__sinit_lock_release+0x8>)
 801107e:	f000 b8a2 	b.w	80111c6 <__retarget_lock_release_recursive>
 8011082:	bf00      	nop
 8011084:	20001c0e 	.word	0x20001c0e

08011088 <__sinit>:
 8011088:	b510      	push	{r4, lr}
 801108a:	4604      	mov	r4, r0
 801108c:	f7ff fff0 	bl	8011070 <__sinit_lock_acquire>
 8011090:	69a3      	ldr	r3, [r4, #24]
 8011092:	b11b      	cbz	r3, 801109c <__sinit+0x14>
 8011094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011098:	f7ff bff0 	b.w	801107c <__sinit_lock_release>
 801109c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110a0:	6523      	str	r3, [r4, #80]	; 0x50
 80110a2:	4b13      	ldr	r3, [pc, #76]	; (80110f0 <__sinit+0x68>)
 80110a4:	4a13      	ldr	r2, [pc, #76]	; (80110f4 <__sinit+0x6c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80110aa:	42a3      	cmp	r3, r4
 80110ac:	bf08      	it	eq
 80110ae:	2301      	moveq	r3, #1
 80110b0:	4620      	mov	r0, r4
 80110b2:	bf08      	it	eq
 80110b4:	61a3      	streq	r3, [r4, #24]
 80110b6:	f000 f81f 	bl	80110f8 <__sfp>
 80110ba:	6060      	str	r0, [r4, #4]
 80110bc:	4620      	mov	r0, r4
 80110be:	f000 f81b 	bl	80110f8 <__sfp>
 80110c2:	60a0      	str	r0, [r4, #8]
 80110c4:	4620      	mov	r0, r4
 80110c6:	f000 f817 	bl	80110f8 <__sfp>
 80110ca:	2200      	movs	r2, #0
 80110cc:	2104      	movs	r1, #4
 80110ce:	60e0      	str	r0, [r4, #12]
 80110d0:	6860      	ldr	r0, [r4, #4]
 80110d2:	f7ff ff81 	bl	8010fd8 <std>
 80110d6:	2201      	movs	r2, #1
 80110d8:	2109      	movs	r1, #9
 80110da:	68a0      	ldr	r0, [r4, #8]
 80110dc:	f7ff ff7c 	bl	8010fd8 <std>
 80110e0:	2202      	movs	r2, #2
 80110e2:	2112      	movs	r1, #18
 80110e4:	68e0      	ldr	r0, [r4, #12]
 80110e6:	f7ff ff77 	bl	8010fd8 <std>
 80110ea:	2301      	movs	r3, #1
 80110ec:	61a3      	str	r3, [r4, #24]
 80110ee:	e7d1      	b.n	8011094 <__sinit+0xc>
 80110f0:	08011834 	.word	0x08011834
 80110f4:	08011021 	.word	0x08011021

080110f8 <__sfp>:
 80110f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fa:	4607      	mov	r7, r0
 80110fc:	f7ff ffac 	bl	8011058 <__sfp_lock_acquire>
 8011100:	4b1e      	ldr	r3, [pc, #120]	; (801117c <__sfp+0x84>)
 8011102:	681e      	ldr	r6, [r3, #0]
 8011104:	69b3      	ldr	r3, [r6, #24]
 8011106:	b913      	cbnz	r3, 801110e <__sfp+0x16>
 8011108:	4630      	mov	r0, r6
 801110a:	f7ff ffbd 	bl	8011088 <__sinit>
 801110e:	3648      	adds	r6, #72	; 0x48
 8011110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011114:	3b01      	subs	r3, #1
 8011116:	d503      	bpl.n	8011120 <__sfp+0x28>
 8011118:	6833      	ldr	r3, [r6, #0]
 801111a:	b30b      	cbz	r3, 8011160 <__sfp+0x68>
 801111c:	6836      	ldr	r6, [r6, #0]
 801111e:	e7f7      	b.n	8011110 <__sfp+0x18>
 8011120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011124:	b9d5      	cbnz	r5, 801115c <__sfp+0x64>
 8011126:	4b16      	ldr	r3, [pc, #88]	; (8011180 <__sfp+0x88>)
 8011128:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801112c:	60e3      	str	r3, [r4, #12]
 801112e:	6665      	str	r5, [r4, #100]	; 0x64
 8011130:	f000 f847 	bl	80111c2 <__retarget_lock_init_recursive>
 8011134:	f7ff ff96 	bl	8011064 <__sfp_lock_release>
 8011138:	2208      	movs	r2, #8
 801113a:	4629      	mov	r1, r5
 801113c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011144:	6025      	str	r5, [r4, #0]
 8011146:	61a5      	str	r5, [r4, #24]
 8011148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801114c:	f7fb ffd8 	bl	800d100 <memset>
 8011150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011158:	4620      	mov	r0, r4
 801115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801115c:	3468      	adds	r4, #104	; 0x68
 801115e:	e7d9      	b.n	8011114 <__sfp+0x1c>
 8011160:	2104      	movs	r1, #4
 8011162:	4638      	mov	r0, r7
 8011164:	f7ff ff62 	bl	801102c <__sfmoreglue>
 8011168:	4604      	mov	r4, r0
 801116a:	6030      	str	r0, [r6, #0]
 801116c:	2800      	cmp	r0, #0
 801116e:	d1d5      	bne.n	801111c <__sfp+0x24>
 8011170:	f7ff ff78 	bl	8011064 <__sfp_lock_release>
 8011174:	230c      	movs	r3, #12
 8011176:	603b      	str	r3, [r7, #0]
 8011178:	e7ee      	b.n	8011158 <__sfp+0x60>
 801117a:	bf00      	nop
 801117c:	08011834 	.word	0x08011834
 8011180:	ffff0001 	.word	0xffff0001

08011184 <_fwalk_reent>:
 8011184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011188:	4606      	mov	r6, r0
 801118a:	4688      	mov	r8, r1
 801118c:	2700      	movs	r7, #0
 801118e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011196:	f1b9 0901 	subs.w	r9, r9, #1
 801119a:	d505      	bpl.n	80111a8 <_fwalk_reent+0x24>
 801119c:	6824      	ldr	r4, [r4, #0]
 801119e:	2c00      	cmp	r4, #0
 80111a0:	d1f7      	bne.n	8011192 <_fwalk_reent+0xe>
 80111a2:	4638      	mov	r0, r7
 80111a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111a8:	89ab      	ldrh	r3, [r5, #12]
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d907      	bls.n	80111be <_fwalk_reent+0x3a>
 80111ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111b2:	3301      	adds	r3, #1
 80111b4:	d003      	beq.n	80111be <_fwalk_reent+0x3a>
 80111b6:	4629      	mov	r1, r5
 80111b8:	4630      	mov	r0, r6
 80111ba:	47c0      	blx	r8
 80111bc:	4307      	orrs	r7, r0
 80111be:	3568      	adds	r5, #104	; 0x68
 80111c0:	e7e9      	b.n	8011196 <_fwalk_reent+0x12>

080111c2 <__retarget_lock_init_recursive>:
 80111c2:	4770      	bx	lr

080111c4 <__retarget_lock_acquire_recursive>:
 80111c4:	4770      	bx	lr

080111c6 <__retarget_lock_release_recursive>:
 80111c6:	4770      	bx	lr

080111c8 <__swhatbuf_r>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	460e      	mov	r6, r1
 80111cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d0:	4614      	mov	r4, r2
 80111d2:	2900      	cmp	r1, #0
 80111d4:	461d      	mov	r5, r3
 80111d6:	b096      	sub	sp, #88	; 0x58
 80111d8:	da08      	bge.n	80111ec <__swhatbuf_r+0x24>
 80111da:	2200      	movs	r2, #0
 80111dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80111e0:	602a      	str	r2, [r5, #0]
 80111e2:	061a      	lsls	r2, r3, #24
 80111e4:	d410      	bmi.n	8011208 <__swhatbuf_r+0x40>
 80111e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111ea:	e00e      	b.n	801120a <__swhatbuf_r+0x42>
 80111ec:	466a      	mov	r2, sp
 80111ee:	f000 f903 	bl	80113f8 <_fstat_r>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	dbf1      	blt.n	80111da <__swhatbuf_r+0x12>
 80111f6:	9a01      	ldr	r2, [sp, #4]
 80111f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80111fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011200:	425a      	negs	r2, r3
 8011202:	415a      	adcs	r2, r3
 8011204:	602a      	str	r2, [r5, #0]
 8011206:	e7ee      	b.n	80111e6 <__swhatbuf_r+0x1e>
 8011208:	2340      	movs	r3, #64	; 0x40
 801120a:	2000      	movs	r0, #0
 801120c:	6023      	str	r3, [r4, #0]
 801120e:	b016      	add	sp, #88	; 0x58
 8011210:	bd70      	pop	{r4, r5, r6, pc}
	...

08011214 <__smakebuf_r>:
 8011214:	898b      	ldrh	r3, [r1, #12]
 8011216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011218:	079d      	lsls	r5, r3, #30
 801121a:	4606      	mov	r6, r0
 801121c:	460c      	mov	r4, r1
 801121e:	d507      	bpl.n	8011230 <__smakebuf_r+0x1c>
 8011220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	6123      	str	r3, [r4, #16]
 8011228:	2301      	movs	r3, #1
 801122a:	6163      	str	r3, [r4, #20]
 801122c:	b002      	add	sp, #8
 801122e:	bd70      	pop	{r4, r5, r6, pc}
 8011230:	466a      	mov	r2, sp
 8011232:	ab01      	add	r3, sp, #4
 8011234:	f7ff ffc8 	bl	80111c8 <__swhatbuf_r>
 8011238:	9900      	ldr	r1, [sp, #0]
 801123a:	4605      	mov	r5, r0
 801123c:	4630      	mov	r0, r6
 801123e:	f7ff f975 	bl	801052c <_malloc_r>
 8011242:	b948      	cbnz	r0, 8011258 <__smakebuf_r+0x44>
 8011244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011248:	059a      	lsls	r2, r3, #22
 801124a:	d4ef      	bmi.n	801122c <__smakebuf_r+0x18>
 801124c:	f023 0303 	bic.w	r3, r3, #3
 8011250:	f043 0302 	orr.w	r3, r3, #2
 8011254:	81a3      	strh	r3, [r4, #12]
 8011256:	e7e3      	b.n	8011220 <__smakebuf_r+0xc>
 8011258:	4b0d      	ldr	r3, [pc, #52]	; (8011290 <__smakebuf_r+0x7c>)
 801125a:	62b3      	str	r3, [r6, #40]	; 0x28
 801125c:	89a3      	ldrh	r3, [r4, #12]
 801125e:	6020      	str	r0, [r4, #0]
 8011260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011264:	81a3      	strh	r3, [r4, #12]
 8011266:	9b00      	ldr	r3, [sp, #0]
 8011268:	6120      	str	r0, [r4, #16]
 801126a:	6163      	str	r3, [r4, #20]
 801126c:	9b01      	ldr	r3, [sp, #4]
 801126e:	b15b      	cbz	r3, 8011288 <__smakebuf_r+0x74>
 8011270:	4630      	mov	r0, r6
 8011272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011276:	f000 f8d1 	bl	801141c <_isatty_r>
 801127a:	b128      	cbz	r0, 8011288 <__smakebuf_r+0x74>
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	f023 0303 	bic.w	r3, r3, #3
 8011282:	f043 0301 	orr.w	r3, r3, #1
 8011286:	81a3      	strh	r3, [r4, #12]
 8011288:	89a0      	ldrh	r0, [r4, #12]
 801128a:	4305      	orrs	r5, r0
 801128c:	81a5      	strh	r5, [r4, #12]
 801128e:	e7cd      	b.n	801122c <__smakebuf_r+0x18>
 8011290:	08011021 	.word	0x08011021

08011294 <_malloc_usable_size_r>:
 8011294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011298:	1f18      	subs	r0, r3, #4
 801129a:	2b00      	cmp	r3, #0
 801129c:	bfbc      	itt	lt
 801129e:	580b      	ldrlt	r3, [r1, r0]
 80112a0:	18c0      	addlt	r0, r0, r3
 80112a2:	4770      	bx	lr

080112a4 <_raise_r>:
 80112a4:	291f      	cmp	r1, #31
 80112a6:	b538      	push	{r3, r4, r5, lr}
 80112a8:	4604      	mov	r4, r0
 80112aa:	460d      	mov	r5, r1
 80112ac:	d904      	bls.n	80112b8 <_raise_r+0x14>
 80112ae:	2316      	movs	r3, #22
 80112b0:	6003      	str	r3, [r0, #0]
 80112b2:	f04f 30ff 	mov.w	r0, #4294967295
 80112b6:	bd38      	pop	{r3, r4, r5, pc}
 80112b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80112ba:	b112      	cbz	r2, 80112c2 <_raise_r+0x1e>
 80112bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112c0:	b94b      	cbnz	r3, 80112d6 <_raise_r+0x32>
 80112c2:	4620      	mov	r0, r4
 80112c4:	f000 f830 	bl	8011328 <_getpid_r>
 80112c8:	462a      	mov	r2, r5
 80112ca:	4601      	mov	r1, r0
 80112cc:	4620      	mov	r0, r4
 80112ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d2:	f000 b817 	b.w	8011304 <_kill_r>
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d00a      	beq.n	80112f0 <_raise_r+0x4c>
 80112da:	1c59      	adds	r1, r3, #1
 80112dc:	d103      	bne.n	80112e6 <_raise_r+0x42>
 80112de:	2316      	movs	r3, #22
 80112e0:	6003      	str	r3, [r0, #0]
 80112e2:	2001      	movs	r0, #1
 80112e4:	e7e7      	b.n	80112b6 <_raise_r+0x12>
 80112e6:	2400      	movs	r4, #0
 80112e8:	4628      	mov	r0, r5
 80112ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80112ee:	4798      	blx	r3
 80112f0:	2000      	movs	r0, #0
 80112f2:	e7e0      	b.n	80112b6 <_raise_r+0x12>

080112f4 <raise>:
 80112f4:	4b02      	ldr	r3, [pc, #8]	; (8011300 <raise+0xc>)
 80112f6:	4601      	mov	r1, r0
 80112f8:	6818      	ldr	r0, [r3, #0]
 80112fa:	f7ff bfd3 	b.w	80112a4 <_raise_r>
 80112fe:	bf00      	nop
 8011300:	200001a0 	.word	0x200001a0

08011304 <_kill_r>:
 8011304:	b538      	push	{r3, r4, r5, lr}
 8011306:	2300      	movs	r3, #0
 8011308:	4d06      	ldr	r5, [pc, #24]	; (8011324 <_kill_r+0x20>)
 801130a:	4604      	mov	r4, r0
 801130c:	4608      	mov	r0, r1
 801130e:	4611      	mov	r1, r2
 8011310:	602b      	str	r3, [r5, #0]
 8011312:	f7f6 fc5d 	bl	8007bd0 <_kill>
 8011316:	1c43      	adds	r3, r0, #1
 8011318:	d102      	bne.n	8011320 <_kill_r+0x1c>
 801131a:	682b      	ldr	r3, [r5, #0]
 801131c:	b103      	cbz	r3, 8011320 <_kill_r+0x1c>
 801131e:	6023      	str	r3, [r4, #0]
 8011320:	bd38      	pop	{r3, r4, r5, pc}
 8011322:	bf00      	nop
 8011324:	20001c08 	.word	0x20001c08

08011328 <_getpid_r>:
 8011328:	f7f6 bc50 	b.w	8007bcc <_getpid>

0801132c <__sread>:
 801132c:	b510      	push	{r4, lr}
 801132e:	460c      	mov	r4, r1
 8011330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011334:	f000 f894 	bl	8011460 <_read_r>
 8011338:	2800      	cmp	r0, #0
 801133a:	bfab      	itete	ge
 801133c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801133e:	89a3      	ldrhlt	r3, [r4, #12]
 8011340:	181b      	addge	r3, r3, r0
 8011342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011346:	bfac      	ite	ge
 8011348:	6563      	strge	r3, [r4, #84]	; 0x54
 801134a:	81a3      	strhlt	r3, [r4, #12]
 801134c:	bd10      	pop	{r4, pc}

0801134e <__swrite>:
 801134e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011352:	461f      	mov	r7, r3
 8011354:	898b      	ldrh	r3, [r1, #12]
 8011356:	4605      	mov	r5, r0
 8011358:	05db      	lsls	r3, r3, #23
 801135a:	460c      	mov	r4, r1
 801135c:	4616      	mov	r6, r2
 801135e:	d505      	bpl.n	801136c <__swrite+0x1e>
 8011360:	2302      	movs	r3, #2
 8011362:	2200      	movs	r2, #0
 8011364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011368:	f000 f868 	bl	801143c <_lseek_r>
 801136c:	89a3      	ldrh	r3, [r4, #12]
 801136e:	4632      	mov	r2, r6
 8011370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011374:	81a3      	strh	r3, [r4, #12]
 8011376:	4628      	mov	r0, r5
 8011378:	463b      	mov	r3, r7
 801137a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801137e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011382:	f000 b817 	b.w	80113b4 <_write_r>

08011386 <__sseek>:
 8011386:	b510      	push	{r4, lr}
 8011388:	460c      	mov	r4, r1
 801138a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801138e:	f000 f855 	bl	801143c <_lseek_r>
 8011392:	1c43      	adds	r3, r0, #1
 8011394:	89a3      	ldrh	r3, [r4, #12]
 8011396:	bf15      	itete	ne
 8011398:	6560      	strne	r0, [r4, #84]	; 0x54
 801139a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801139e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80113a2:	81a3      	strheq	r3, [r4, #12]
 80113a4:	bf18      	it	ne
 80113a6:	81a3      	strhne	r3, [r4, #12]
 80113a8:	bd10      	pop	{r4, pc}

080113aa <__sclose>:
 80113aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ae:	f000 b813 	b.w	80113d8 <_close_r>
	...

080113b4 <_write_r>:
 80113b4:	b538      	push	{r3, r4, r5, lr}
 80113b6:	4604      	mov	r4, r0
 80113b8:	4608      	mov	r0, r1
 80113ba:	4611      	mov	r1, r2
 80113bc:	2200      	movs	r2, #0
 80113be:	4d05      	ldr	r5, [pc, #20]	; (80113d4 <_write_r+0x20>)
 80113c0:	602a      	str	r2, [r5, #0]
 80113c2:	461a      	mov	r2, r3
 80113c4:	f7f6 fc22 	bl	8007c0c <_write>
 80113c8:	1c43      	adds	r3, r0, #1
 80113ca:	d102      	bne.n	80113d2 <_write_r+0x1e>
 80113cc:	682b      	ldr	r3, [r5, #0]
 80113ce:	b103      	cbz	r3, 80113d2 <_write_r+0x1e>
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	bd38      	pop	{r3, r4, r5, pc}
 80113d4:	20001c08 	.word	0x20001c08

080113d8 <_close_r>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	2300      	movs	r3, #0
 80113dc:	4d05      	ldr	r5, [pc, #20]	; (80113f4 <_close_r+0x1c>)
 80113de:	4604      	mov	r4, r0
 80113e0:	4608      	mov	r0, r1
 80113e2:	602b      	str	r3, [r5, #0]
 80113e4:	f7f6 fc20 	bl	8007c28 <_close>
 80113e8:	1c43      	adds	r3, r0, #1
 80113ea:	d102      	bne.n	80113f2 <_close_r+0x1a>
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	b103      	cbz	r3, 80113f2 <_close_r+0x1a>
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	bd38      	pop	{r3, r4, r5, pc}
 80113f4:	20001c08 	.word	0x20001c08

080113f8 <_fstat_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	2300      	movs	r3, #0
 80113fc:	4d06      	ldr	r5, [pc, #24]	; (8011418 <_fstat_r+0x20>)
 80113fe:	4604      	mov	r4, r0
 8011400:	4608      	mov	r0, r1
 8011402:	4611      	mov	r1, r2
 8011404:	602b      	str	r3, [r5, #0]
 8011406:	f7f6 fc13 	bl	8007c30 <_fstat>
 801140a:	1c43      	adds	r3, r0, #1
 801140c:	d102      	bne.n	8011414 <_fstat_r+0x1c>
 801140e:	682b      	ldr	r3, [r5, #0]
 8011410:	b103      	cbz	r3, 8011414 <_fstat_r+0x1c>
 8011412:	6023      	str	r3, [r4, #0]
 8011414:	bd38      	pop	{r3, r4, r5, pc}
 8011416:	bf00      	nop
 8011418:	20001c08 	.word	0x20001c08

0801141c <_isatty_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	2300      	movs	r3, #0
 8011420:	4d05      	ldr	r5, [pc, #20]	; (8011438 <_isatty_r+0x1c>)
 8011422:	4604      	mov	r4, r0
 8011424:	4608      	mov	r0, r1
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	f7f6 fc08 	bl	8007c3c <_isatty>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_isatty_r+0x1a>
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	b103      	cbz	r3, 8011436 <_isatty_r+0x1a>
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	20001c08 	.word	0x20001c08

0801143c <_lseek_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	4604      	mov	r4, r0
 8011440:	4608      	mov	r0, r1
 8011442:	4611      	mov	r1, r2
 8011444:	2200      	movs	r2, #0
 8011446:	4d05      	ldr	r5, [pc, #20]	; (801145c <_lseek_r+0x20>)
 8011448:	602a      	str	r2, [r5, #0]
 801144a:	461a      	mov	r2, r3
 801144c:	f7f6 fbf8 	bl	8007c40 <_lseek>
 8011450:	1c43      	adds	r3, r0, #1
 8011452:	d102      	bne.n	801145a <_lseek_r+0x1e>
 8011454:	682b      	ldr	r3, [r5, #0]
 8011456:	b103      	cbz	r3, 801145a <_lseek_r+0x1e>
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	20001c08 	.word	0x20001c08

08011460 <_read_r>:
 8011460:	b538      	push	{r3, r4, r5, lr}
 8011462:	4604      	mov	r4, r0
 8011464:	4608      	mov	r0, r1
 8011466:	4611      	mov	r1, r2
 8011468:	2200      	movs	r2, #0
 801146a:	4d05      	ldr	r5, [pc, #20]	; (8011480 <_read_r+0x20>)
 801146c:	602a      	str	r2, [r5, #0]
 801146e:	461a      	mov	r2, r3
 8011470:	f7f6 fbbe 	bl	8007bf0 <_read>
 8011474:	1c43      	adds	r3, r0, #1
 8011476:	d102      	bne.n	801147e <_read_r+0x1e>
 8011478:	682b      	ldr	r3, [r5, #0]
 801147a:	b103      	cbz	r3, 801147e <_read_r+0x1e>
 801147c:	6023      	str	r3, [r4, #0]
 801147e:	bd38      	pop	{r3, r4, r5, pc}
 8011480:	20001c08 	.word	0x20001c08

08011484 <_init>:
 8011484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011486:	bf00      	nop
 8011488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801148a:	bc08      	pop	{r3}
 801148c:	469e      	mov	lr, r3
 801148e:	4770      	bx	lr

08011490 <_fini>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	bf00      	nop
 8011494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011496:	bc08      	pop	{r3}
 8011498:	469e      	mov	lr, r3
 801149a:	4770      	bx	lr
