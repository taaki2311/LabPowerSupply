
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d528  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800d668  0800d668  0001d668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db6c  0800db6c  00020378  2**0
                  CONTENTS
  4 .ARM          00000008  0800db6c  0800db6c  0001db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db74  0800db74  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db74  0800db74  0001db74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db78  0800db78  0001db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  0800db7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f0  20000378  0800def4  00020378  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20001968  0800def4  00021968  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b31  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000503f  00000000  00000000  00048ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001d6fc  00000000  00000000  0004df11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  0006b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000057e0  00000000  00000000  0006c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019cee  00000000  00000000  00072090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b919  00000000  00000000  0008bd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ffc4  00000000  00000000  000b7697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014765b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ec  00000000  00000000  001476ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000378 	.word	0x20000378
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d650 	.word	0x0800d650

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000037c 	.word	0x2000037c
 800017c:	0800d650 	.word	0x0800d650

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b976 	b.w	80013a4 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14d      	bne.n	800117c <__udivmoddi4+0xac>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4694      	mov	ip, r2
 80010e4:	d968      	bls.n	80011b8 <__udivmoddi4+0xe8>
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b152      	cbz	r2, 8001102 <__udivmoddi4+0x32>
 80010ec:	fa01 f302 	lsl.w	r3, r1, r2
 80010f0:	f1c2 0120 	rsb	r1, r2, #32
 80010f4:	fa20 f101 	lsr.w	r1, r0, r1
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	ea41 0803 	orr.w	r8, r1, r3
 8001100:	4094      	lsls	r4, r2
 8001102:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001106:	fbb8 f7f1 	udiv	r7, r8, r1
 800110a:	fa1f fe8c 	uxth.w	lr, ip
 800110e:	fb01 8817 	mls	r8, r1, r7, r8
 8001112:	fb07 f00e 	mul.w	r0, r7, lr
 8001116:	0c23      	lsrs	r3, r4, #16
 8001118:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800111c:	4298      	cmp	r0, r3
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	eb1c 0303 	adds.w	r3, ip, r3
 8001124:	f107 35ff 	add.w	r5, r7, #4294967295
 8001128:	f080 811e 	bcs.w	8001368 <__udivmoddi4+0x298>
 800112c:	4298      	cmp	r0, r3
 800112e:	f240 811b 	bls.w	8001368 <__udivmoddi4+0x298>
 8001132:	3f02      	subs	r7, #2
 8001134:	4463      	add	r3, ip
 8001136:	1a1b      	subs	r3, r3, r0
 8001138:	fbb3 f0f1 	udiv	r0, r3, r1
 800113c:	fb01 3310 	mls	r3, r1, r0, r3
 8001140:	fb00 fe0e 	mul.w	lr, r0, lr
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800114a:	45a6      	cmp	lr, r4
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0404 	adds.w	r4, ip, r4
 8001152:	f100 33ff 	add.w	r3, r0, #4294967295
 8001156:	f080 8109 	bcs.w	800136c <__udivmoddi4+0x29c>
 800115a:	45a6      	cmp	lr, r4
 800115c:	f240 8106 	bls.w	800136c <__udivmoddi4+0x29c>
 8001160:	4464      	add	r4, ip
 8001162:	3802      	subs	r0, #2
 8001164:	2100      	movs	r1, #0
 8001166:	eba4 040e 	sub.w	r4, r4, lr
 800116a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800116e:	b11e      	cbz	r6, 8001178 <__udivmoddi4+0xa8>
 8001170:	2300      	movs	r3, #0
 8001172:	40d4      	lsrs	r4, r2
 8001174:	e9c6 4300 	strd	r4, r3, [r6]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0xc2>
 8001180:	2e00      	cmp	r6, #0
 8001182:	f000 80ee 	beq.w	8001362 <__udivmoddi4+0x292>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c6 0500 	strd	r0, r5, [r6]
 800118c:	4608      	mov	r0, r1
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	fab3 f183 	clz	r1, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d14a      	bne.n	8001230 <__udivmoddi4+0x160>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d302      	bcc.n	80011a4 <__udivmoddi4+0xd4>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80fc 	bhi.w	800139c <__udivmoddi4+0x2cc>
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	eb65 0303 	sbc.w	r3, r5, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	4698      	mov	r8, r3
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d0e2      	beq.n	8001178 <__udivmoddi4+0xa8>
 80011b2:	e9c6 4800 	strd	r4, r8, [r6]
 80011b6:	e7df      	b.n	8001178 <__udivmoddi4+0xa8>
 80011b8:	b902      	cbnz	r2, 80011bc <__udivmoddi4+0xec>
 80011ba:	deff      	udf	#255	; 0xff
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8091 	bne.w	80012e8 <__udivmoddi4+0x218>
 80011c6:	eba1 000c 	sub.w	r0, r1, ip
 80011ca:	2101      	movs	r1, #1
 80011cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80011d8:	fb07 0013 	mls	r0, r7, r3, r0
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e2:	fb0e f003 	mul.w	r0, lr, r3
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d908      	bls.n	80011fc <__udivmoddi4+0x12c>
 80011ea:	eb1c 0505 	adds.w	r5, ip, r5
 80011ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x12a>
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	f200 80ce 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	1a2d      	subs	r5, r5, r0
 80011fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001202:	fb07 5510 	mls	r5, r7, r0, r5
 8001206:	fb0e fe00 	mul.w	lr, lr, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x156>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0x154>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f200 80b6 	bhi.w	8001390 <__udivmoddi4+0x2c0>
 8001224:	4628      	mov	r0, r5
 8001226:	eba4 040e 	sub.w	r4, r4, lr
 800122a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800122e:	e79e      	b.n	800116e <__udivmoddi4+0x9e>
 8001230:	f1c1 0720 	rsb	r7, r1, #32
 8001234:	408b      	lsls	r3, r1
 8001236:	fa22 fc07 	lsr.w	ip, r2, r7
 800123a:	ea4c 0c03 	orr.w	ip, ip, r3
 800123e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001242:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001246:	fbba f8f9 	udiv	r8, sl, r9
 800124a:	fa20 f307 	lsr.w	r3, r0, r7
 800124e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001252:	408d      	lsls	r5, r1
 8001254:	fa1f fe8c 	uxth.w	lr, ip
 8001258:	431d      	orrs	r5, r3
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fb08 f00e 	mul.w	r0, r8, lr
 8001262:	0c2c      	lsrs	r4, r5, #16
 8001264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001268:	42a0      	cmp	r0, r4
 800126a:	fa02 f201 	lsl.w	r2, r2, r1
 800126e:	d90b      	bls.n	8001288 <__udivmoddi4+0x1b8>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f108 3aff 	add.w	sl, r8, #4294967295
 8001278:	f080 8088 	bcs.w	800138c <__udivmoddi4+0x2bc>
 800127c:	42a0      	cmp	r0, r4
 800127e:	f240 8085 	bls.w	800138c <__udivmoddi4+0x2bc>
 8001282:	f1a8 0802 	sub.w	r8, r8, #2
 8001286:	4464      	add	r4, ip
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	fbb4 f0f9 	udiv	r0, r4, r9
 800128e:	fb09 4410 	mls	r4, r9, r0, r4
 8001292:	fb00 fe0e 	mul.w	lr, r0, lr
 8001296:	b2ad      	uxth	r5, r5
 8001298:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800129c:	45a6      	cmp	lr, r4
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x1e2>
 80012a0:	eb1c 0404 	adds.w	r4, ip, r4
 80012a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a8:	d26c      	bcs.n	8001384 <__udivmoddi4+0x2b4>
 80012aa:	45a6      	cmp	lr, r4
 80012ac:	d96a      	bls.n	8001384 <__udivmoddi4+0x2b4>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4464      	add	r4, ip
 80012b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012b6:	fba0 9502 	umull	r9, r5, r0, r2
 80012ba:	eba4 040e 	sub.w	r4, r4, lr
 80012be:	42ac      	cmp	r4, r5
 80012c0:	46c8      	mov	r8, r9
 80012c2:	46ae      	mov	lr, r5
 80012c4:	d356      	bcc.n	8001374 <__udivmoddi4+0x2a4>
 80012c6:	d053      	beq.n	8001370 <__udivmoddi4+0x2a0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d069      	beq.n	80013a0 <__udivmoddi4+0x2d0>
 80012cc:	ebb3 0208 	subs.w	r2, r3, r8
 80012d0:	eb64 040e 	sbc.w	r4, r4, lr
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	fa04 f707 	lsl.w	r7, r4, r7
 80012dc:	431f      	orrs	r7, r3
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	e9c6 7400 	strd	r7, r4, [r6]
 80012e4:	2100      	movs	r1, #0
 80012e6:	e747      	b.n	8001178 <__udivmoddi4+0xa8>
 80012e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ec:	f1c2 0120 	rsb	r1, r2, #32
 80012f0:	fa25 f301 	lsr.w	r3, r5, r1
 80012f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	4095      	lsls	r5, r2
 80012fe:	430d      	orrs	r5, r1
 8001300:	fbb3 f1f7 	udiv	r1, r3, r7
 8001304:	fb07 3311 	mls	r3, r7, r1, r3
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	0c28      	lsrs	r0, r5, #16
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	fb01 f30e 	mul.w	r3, r1, lr
 8001316:	4283      	cmp	r3, r0
 8001318:	fa04 f402 	lsl.w	r4, r4, r2
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0x260>
 800131e:	eb1c 0000 	adds.w	r0, ip, r0
 8001322:	f101 38ff 	add.w	r8, r1, #4294967295
 8001326:	d22f      	bcs.n	8001388 <__udivmoddi4+0x2b8>
 8001328:	4283      	cmp	r3, r0
 800132a:	d92d      	bls.n	8001388 <__udivmoddi4+0x2b8>
 800132c:	3902      	subs	r1, #2
 800132e:	4460      	add	r0, ip
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	fbb0 f3f7 	udiv	r3, r0, r7
 8001336:	fb07 0013 	mls	r0, r7, r3, r0
 800133a:	b2ad      	uxth	r5, r5
 800133c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001340:	fb03 f00e 	mul.w	r0, r3, lr
 8001344:	42a8      	cmp	r0, r5
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x28a>
 8001348:	eb1c 0505 	adds.w	r5, ip, r5
 800134c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001350:	d216      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 8001352:	42a8      	cmp	r0, r5
 8001354:	d914      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	1a28      	subs	r0, r5, r0
 800135c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001360:	e738      	b.n	80011d4 <__udivmoddi4+0x104>
 8001362:	4631      	mov	r1, r6
 8001364:	4630      	mov	r0, r6
 8001366:	e707      	b.n	8001178 <__udivmoddi4+0xa8>
 8001368:	462f      	mov	r7, r5
 800136a:	e6e4      	b.n	8001136 <__udivmoddi4+0x66>
 800136c:	4618      	mov	r0, r3
 800136e:	e6f9      	b.n	8001164 <__udivmoddi4+0x94>
 8001370:	454b      	cmp	r3, r9
 8001372:	d2a9      	bcs.n	80012c8 <__udivmoddi4+0x1f8>
 8001374:	ebb9 0802 	subs.w	r8, r9, r2
 8001378:	eb65 0e0c 	sbc.w	lr, r5, ip
 800137c:	3801      	subs	r0, #1
 800137e:	e7a3      	b.n	80012c8 <__udivmoddi4+0x1f8>
 8001380:	4643      	mov	r3, r8
 8001382:	e7ea      	b.n	800135a <__udivmoddi4+0x28a>
 8001384:	4628      	mov	r0, r5
 8001386:	e794      	b.n	80012b2 <__udivmoddi4+0x1e2>
 8001388:	4641      	mov	r1, r8
 800138a:	e7d1      	b.n	8001330 <__udivmoddi4+0x260>
 800138c:	46d0      	mov	r8, sl
 800138e:	e77b      	b.n	8001288 <__udivmoddi4+0x1b8>
 8001390:	4464      	add	r4, ip
 8001392:	3802      	subs	r0, #2
 8001394:	e747      	b.n	8001226 <__udivmoddi4+0x156>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	e72f      	b.n	80011fc <__udivmoddi4+0x12c>
 800139c:	4608      	mov	r0, r1
 800139e:	e706      	b.n	80011ae <__udivmoddi4+0xde>
 80013a0:	4631      	mov	r1, r6
 80013a2:	e6e9      	b.n	8001178 <__udivmoddi4+0xa8>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <MX_ADC_Init>:
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.NbrOfConversion = 5;
 80013a8:	2105      	movs	r1, #5
  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	2300      	movs	r3, #0
{
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  hadc.Instance = ADC1;
 80013ae:	4c2f      	ldr	r4, [pc, #188]	; (800146c <MX_ADC_Init+0xc4>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b0:	f44f 7080 	mov.w	r0, #256	; 0x100
  hadc.Init.ContinuousConvMode = ENABLE;
 80013b4:	2201      	movs	r2, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013b6:	f44f 3500 	mov.w	r5, #131072	; 0x20000
  hadc.Init.NbrOfConversion = 5;
 80013ba:	62a1      	str	r1, [r4, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013bc:	2110      	movs	r1, #16
{
 80013be:	b085      	sub	sp, #20
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80013c4:	e9c4 3305 	strd	r3, r3, [r4, #20]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80013c8:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013cc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80013d0:	9300      	str	r3, [sp, #0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d6:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Instance = ADC1;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_ADC_Init+0xc8>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013da:	6120      	str	r0, [r4, #16]
  hadc.Init.DMAContinuousRequests = ENABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013dc:	4620      	mov	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013de:	6065      	str	r5, [r4, #4]
  hadc.Init.ContinuousConvMode = ENABLE;
 80013e0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80013e4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  hadc.Instance = ADC1;
 80013e8:	6023      	str	r3, [r4, #0]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ea:	6361      	str	r1, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013ec:	f004 f992 	bl	8005714 <HAL_ADC_Init>
 80013f0:	b108      	cbz	r0, 80013f6 <MX_ADC_Init+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MX_ADC_Init+0x4c>
  sConfig.Channel = ADC_CHANNEL_0;
 80013f6:	2600      	movs	r6, #0
 80013f8:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80013fa:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013fc:	4669      	mov	r1, sp
 80013fe:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001400:	e9cd 6700 	strd	r6, r7, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8001404:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001406:	f004 fb2b 	bl	8005a60 <HAL_ADC_ConfigChannel>
 800140a:	b108      	cbz	r0, 8001410 <MX_ADC_Init+0x68>
 800140c:	b672      	cpsid	i
  while (1)
 800140e:	e7fe      	b.n	800140e <MX_ADC_Init+0x66>
  sConfig.Channel = ADC_CHANNEL_1;
 8001410:	2201      	movs	r2, #1
 8001412:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001414:	4669      	mov	r1, sp
 8001416:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001418:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800141c:	f004 fb20 	bl	8005a60 <HAL_ADC_ConfigChannel>
 8001420:	b108      	cbz	r0, 8001426 <MX_ADC_Init+0x7e>
 8001422:	b672      	cpsid	i
  while (1)
 8001424:	e7fe      	b.n	8001424 <MX_ADC_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_2;
 8001426:	2202      	movs	r2, #2
 8001428:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800142a:	4669      	mov	r1, sp
 800142c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 800142e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001432:	f004 fb15 	bl	8005a60 <HAL_ADC_ConfigChannel>
 8001436:	b108      	cbz	r0, 800143c <MX_ADC_Init+0x94>
 8001438:	b672      	cpsid	i
  while (1)
 800143a:	e7fe      	b.n	800143a <MX_ADC_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_3;
 800143c:	2203      	movs	r2, #3
 800143e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001440:	4669      	mov	r1, sp
 8001442:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8001444:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001448:	f004 fb0a 	bl	8005a60 <HAL_ADC_ConfigChannel>
 800144c:	b108      	cbz	r0, 8001452 <MX_ADC_Init+0xaa>
 800144e:	b672      	cpsid	i
  while (1)
 8001450:	e7fe      	b.n	8001450 <MX_ADC_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001452:	2211      	movs	r2, #17
 8001454:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001456:	4669      	mov	r1, sp
 8001458:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800145a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800145e:	f004 faff 	bl	8005a60 <HAL_ADC_ConfigChannel>
 8001462:	b108      	cbz	r0, 8001468 <MX_ADC_Init+0xc0>
 8001464:	b672      	cpsid	i
  while (1)
 8001466:	e7fe      	b.n	8001466 <MX_ADC_Init+0xbe>
}
 8001468:	b005      	add	sp, #20
 800146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146c:	200003d8 	.word	0x200003d8
 8001470:	40012400 	.word	0x40012400

08001474 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001474:	2300      	movs	r3, #0
{
 8001476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800147a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800147e:	2403      	movs	r4, #3
 8001480:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001482:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	f04f 0810 	mov.w	r8, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	f04f 0e02 	mov.w	lr, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800148c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001490:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
{
 8001494:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800149a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800149e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80014a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <SystemClock_Config+0x90>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ac:	9308      	str	r3, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ae:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	6813      	ldr	r3, [r2, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b2:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80014b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014bc:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014be:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c2:	e9cd ec0f 	strd	lr, ip, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80014c6:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ca:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ce:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f006 fa48 	bl	8007964 <HAL_RCC_OscConfig>
 80014d4:	b108      	cbz	r0, 80014da <SystemClock_Config+0x66>
 80014d6:	b672      	cpsid	i
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014da:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014dc:	240f      	movs	r4, #15
 80014de:	2503      	movs	r5, #3
 80014e0:	2200      	movs	r2, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e6:	4631      	mov	r1, r6
 80014e8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	e9cd 4500 	strd	r4, r5, [sp]
 80014ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014f2:	f006 fc97 	bl	8007e24 <HAL_RCC_ClockConfig>
 80014f6:	b108      	cbz	r0, 80014fc <SystemClock_Config+0x88>
 80014f8:	b672      	cpsid	i
  while (1)
 80014fa:	e7fe      	b.n	80014fa <SystemClock_Config+0x86>
}
 80014fc:	b014      	add	sp, #80	; 0x50
 80014fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001502:	bf00      	nop
 8001504:	40007000 	.word	0x40007000

08001508 <EXTI1_IRQHandler>:
{
 8001508:	b410      	push	{r4}
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 800150a:	2407      	movs	r4, #7
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <EXTI1_IRQHandler+0x14>)
	memset (usbbuffer, '\0', 128);  // clear the buffer
 800150e:	2280      	movs	r2, #128	; 0x80
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001510:	615c      	str	r4, [r3, #20]
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001512:	2100      	movs	r1, #0
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <EXTI1_IRQHandler+0x18>)
}
 8001516:	bc10      	pop	{r4}
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001518:	f009 b9cc 	b.w	800a8b4 <memset>
 800151c:	40010400 	.word	0x40010400
 8001520:	20000748 	.word	0x20000748

08001524 <lcd_createChar>:
{
 8001524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001528:	2564      	movs	r5, #100	; 0x64
 800152a:	482d      	ldr	r0, [pc, #180]	; (80015e0 <lcd_createChar+0xbc>)
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800152c:	492d      	ldr	r1, [pc, #180]	; (80015e4 <lcd_createChar+0xc0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800152e:	4607      	mov	r7, r0
{
 8001530:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001532:	2304      	movs	r3, #4
 8001534:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001536:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001538:	9500      	str	r5, [sp, #0]
 800153a:	214e      	movs	r1, #78	; 0x4e
 800153c:	f005 f91e 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f004 f8d5 	bl	80056f0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001548:	214e      	movs	r1, #78	; 0x4e
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800154a:	9303      	str	r3, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800154c:	4638      	mov	r0, r7
 800154e:	2304      	movs	r3, #4
 8001550:	4c26      	ldr	r4, [pc, #152]	; (80015ec <lcd_createChar+0xc8>)
 8001552:	9500      	str	r5, [sp, #0]
 8001554:	aa03      	add	r2, sp, #12
 8001556:	f005 f911 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8001560:	f004 f8c6 	bl	80056f0 <HAL_Delay>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001564:	2304      	movs	r3, #4
		lcd_send_data(customChar[i]);
 8001566:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800156a:	4638      	mov	r0, r7
	data_l = ((data<<4)&0xf0);
 800156c:	fa02 f103 	lsl.w	r1, r2, r3
 8001570:	b2c9      	uxtb	r1, r1
	data_u = (data&0xf0);
 8001572:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001576:	f042 0c09 	orr.w	ip, r2, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800157a:	f041 0e09 	orr.w	lr, r1, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800157e:	f042 090d 	orr.w	r9, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001582:	f041 080d 	orr.w	r8, r1, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001586:	aa03      	add	r2, sp, #12
 8001588:	214e      	movs	r1, #78	; 0x4e
 800158a:	9500      	str	r5, [sp, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800158c:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001590:	f88d e00f 	strb.w	lr, [sp, #15]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001594:	f88d 900c 	strb.w	r9, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001598:	f88d 800e 	strb.w	r8, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800159c:	f005 f8ee 	bl	800677c <HAL_I2C_Master_Transmit>
		HAL_Delay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f004 f8a5 	bl	80056f0 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 80015a6:	42a6      	cmp	r6, r4
 80015a8:	d1dc      	bne.n	8001564 <lcd_createChar+0x40>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015aa:	490f      	ldr	r1, [pc, #60]	; (80015e8 <lcd_createChar+0xc4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015ac:	aa03      	add	r2, sp, #12
 80015ae:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015b0:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015b2:	9500      	str	r5, [sp, #0]
 80015b4:	214e      	movs	r1, #78	; 0x4e
 80015b6:	480a      	ldr	r0, [pc, #40]	; (80015e0 <lcd_createChar+0xbc>)
 80015b8:	f005 f8e0 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f004 f897 	bl	80056f0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <lcd_createChar+0xcc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015c4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015c6:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015c8:	214e      	movs	r1, #78	; 0x4e
 80015ca:	aa03      	add	r2, sp, #12
 80015cc:	9500      	str	r5, [sp, #0]
 80015ce:	4804      	ldr	r0, [pc, #16]	; (80015e0 <lcd_createChar+0xbc>)
 80015d0:	f005 f8d4 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80015d4:	2001      	movs	r0, #1
}
 80015d6:	b005      	add	sp, #20
 80015d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1);
 80015dc:	f004 b888 	b.w	80056f0 <HAL_Delay>
 80015e0:	20000514 	.word	0x20000514
 80015e4:	080c484c 	.word	0x080c484c
 80015e8:	080c080c 	.word	0x080c080c
 80015ec:	0800d6e3 	.word	0x0800d6e3
 80015f0:	282c080c 	.word	0x282c080c

080015f4 <lcd_init>:
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_Delay(100);
 80015f6:	2064      	movs	r0, #100	; 0x64
{
 80015f8:	b085      	sub	sp, #20
	HAL_Delay(100);
 80015fa:	f004 f879 	bl	80056f0 <HAL_Delay>
 80015fe:	2403      	movs	r4, #3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001600:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001602:	4f2e      	ldr	r7, [pc, #184]	; (80016bc <lcd_init+0xc8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001604:	4e2e      	ldr	r6, [pc, #184]	; (80016c0 <lcd_init+0xcc>)
 8001606:	2304      	movs	r3, #4
 8001608:	214e      	movs	r1, #78	; 0x4e
 800160a:	aa03      	add	r2, sp, #12
 800160c:	4630      	mov	r0, r6
 800160e:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001610:	9703      	str	r7, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001612:	f005 f8b3 	bl	800677c <HAL_I2C_Master_Transmit>
		HAL_Delay(45);
 8001616:	202d      	movs	r0, #45	; 0x2d
 8001618:	f004 f86a 	bl	80056f0 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 800161c:	1e63      	subs	r3, r4, #1
 800161e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001622:	d1f0      	bne.n	8001606 <lcd_init+0x12>
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001624:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001626:	4927      	ldr	r1, [pc, #156]	; (80016c4 <lcd_init+0xd0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001628:	2304      	movs	r3, #4
 800162a:	aa03      	add	r2, sp, #12
 800162c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800162e:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001630:	4823      	ldr	r0, [pc, #140]	; (80016c0 <lcd_init+0xcc>)
 8001632:	214e      	movs	r1, #78	; 0x4e
 8001634:	f005 f8a2 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8001638:	4620      	mov	r0, r4
 800163a:	f004 f859 	bl	80056f0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800163e:	4a22      	ldr	r2, [pc, #136]	; (80016c8 <lcd_init+0xd4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001640:	2304      	movs	r3, #4
 8001642:	214e      	movs	r1, #78	; 0x4e
 8001644:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001646:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001648:	481d      	ldr	r0, [pc, #116]	; (80016c0 <lcd_init+0xcc>)
 800164a:	aa03      	add	r2, sp, #12
 800164c:	f005 f896 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001650:	2001      	movs	r0, #1
 8001652:	f004 f84d 	bl	80056f0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <lcd_init+0xd8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001658:	2304      	movs	r3, #4
 800165a:	214e      	movs	r1, #78	; 0x4e
 800165c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800165e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001660:	4817      	ldr	r0, [pc, #92]	; (80016c0 <lcd_init+0xcc>)
 8001662:	aa03      	add	r2, sp, #12
 8001664:	f005 f88a 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001668:	2001      	movs	r0, #1
 800166a:	f004 f841 	bl	80056f0 <HAL_Delay>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <lcd_init+0xdc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001670:	2304      	movs	r3, #4
 8001672:	214e      	movs	r1, #78	; 0x4e
 8001674:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001676:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001678:	4811      	ldr	r0, [pc, #68]	; (80016c0 <lcd_init+0xcc>)
 800167a:	aa03      	add	r2, sp, #12
 800167c:	f005 f87e 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001680:	2001      	movs	r0, #1
 8001682:	f004 f835 	bl	80056f0 <HAL_Delay>
	lcd_createChar();
 8001686:	f7ff ff4d 	bl	8001524 <lcd_createChar>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <lcd_init+0xe0>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800168c:	9500      	str	r5, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800168e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001690:	2304      	movs	r3, #4
 8001692:	214e      	movs	r1, #78	; 0x4e
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <lcd_init+0xcc>)
 8001696:	aa03      	add	r2, sp, #12
 8001698:	f005 f870 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800169c:	4627      	mov	r7, r4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800169e:	4e0e      	ldr	r6, [pc, #56]	; (80016d8 <lcd_init+0xe4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016a0:	4d07      	ldr	r5, [pc, #28]	; (80016c0 <lcd_init+0xcc>)
 80016a2:	2304      	movs	r3, #4
 80016a4:	214e      	movs	r1, #78	; 0x4e
 80016a6:	4628      	mov	r0, r5
 80016a8:	aa03      	add	r2, sp, #12
 80016aa:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80016ac:	9603      	str	r6, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016ae:	f005 f865 	bl	800677c <HAL_I2C_Master_Transmit>
	for (int i=0; i<100; i++)
 80016b2:	3c01      	subs	r4, #1
 80016b4:	d1f5      	bne.n	80016a2 <lcd_init+0xae>
}
 80016b6:	b005      	add	sp, #20
 80016b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	383c080c 	.word	0x383c080c
 80016c0:	20000514 	.word	0x20000514
 80016c4:	282c080c 	.word	0x282c080c
 80016c8:	888c282c 	.word	0x888c282c
 80016cc:	c8cc080c 	.word	0xc8cc080c
 80016d0:	080c888c 	.word	0x080c888c
 80016d4:	080c080c 	.word	0x080c080c
 80016d8:	090d292d 	.word	0x090d292d

080016dc <lcd_psu_init>:
void lcd_psu_init(void){
 80016dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016e0:	2664      	movs	r6, #100	; 0x64
void lcd_psu_init(void){
 80016e2:	b084      	sub	sp, #16
	lcd_init();
 80016e4:	f7ff ff86 	bl	80015f4 <lcd_init>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016e8:	49c7      	ldr	r1, [pc, #796]	; (8001a08 <lcd_psu_init+0x32c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016ea:	48c8      	ldr	r0, [pc, #800]	; (8001a0c <lcd_psu_init+0x330>)
 80016ec:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016ee:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016f0:	aa03      	add	r2, sp, #12
 80016f2:	214e      	movs	r1, #78	; 0x4e
 80016f4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016f6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016f8:	f005 f840 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80016fc:	2356      	movs	r3, #86	; 0x56
 80016fe:	4dc4      	ldr	r5, [pc, #784]	; (8001a10 <lcd_psu_init+0x334>)
	data_l = ((data<<4)&0xf0);
 8001700:	011a      	lsls	r2, r3, #4
 8001702:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001708:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800170c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001710:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001714:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001718:	2304      	movs	r3, #4
 800171a:	214e      	movs	r1, #78	; 0x4e
 800171c:	4638      	mov	r0, r7
 800171e:	aa03      	add	r2, sp, #12
 8001720:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001722:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001726:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800172a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800172e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001732:	f005 f823 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001736:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1e0      	bne.n	8001700 <lcd_psu_init+0x24>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800173e:	49b5      	ldr	r1, [pc, #724]	; (8001a14 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001740:	2304      	movs	r3, #4
 8001742:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001744:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001746:	48b1      	ldr	r0, [pc, #708]	; (8001a0c <lcd_psu_init+0x330>)
 8001748:	214e      	movs	r1, #78	; 0x4e
 800174a:	aa03      	add	r2, sp, #12
 800174c:	f005 f816 	bl	800677c <HAL_I2C_Master_Transmit>
 8001750:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001752:	2356      	movs	r3, #86	; 0x56
 8001754:	4db0      	ldr	r5, [pc, #704]	; (8001a18 <lcd_psu_init+0x33c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001756:	4fad      	ldr	r7, [pc, #692]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001758:	011a      	lsls	r2, r3, #4
 800175a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800175c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001760:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001764:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001768:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800176c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001770:	2304      	movs	r3, #4
 8001772:	214e      	movs	r1, #78	; 0x4e
 8001774:	4638      	mov	r0, r7
 8001776:	aa03      	add	r2, sp, #12
 8001778:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800177a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800177e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001782:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001786:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800178a:	f004 fff7 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800178e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e0      	bne.n	8001758 <lcd_psu_init+0x7c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001796:	49a1      	ldr	r1, [pc, #644]	; (8001a1c <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001798:	2304      	movs	r3, #4
 800179a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800179c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800179e:	489b      	ldr	r0, [pc, #620]	; (8001a0c <lcd_psu_init+0x330>)
 80017a0:	214e      	movs	r1, #78	; 0x4e
 80017a2:	aa03      	add	r2, sp, #12
 80017a4:	f004 ffea 	bl	800677c <HAL_I2C_Master_Transmit>
 80017a8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80017aa:	233a      	movs	r3, #58	; 0x3a
 80017ac:	4d9c      	ldr	r5, [pc, #624]	; (8001a20 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017ae:	4f97      	ldr	r7, [pc, #604]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80017b0:	011a      	lsls	r2, r3, #4
 80017b2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80017b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017b8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80017bc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017c0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80017c4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017c8:	2304      	movs	r3, #4
 80017ca:	214e      	movs	r1, #78	; 0x4e
 80017cc:	4638      	mov	r0, r7
 80017ce:	aa03      	add	r2, sp, #12
 80017d0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80017d2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80017d6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80017da:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80017de:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017e2:	f004 ffcb 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80017e6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1e0      	bne.n	80017b0 <lcd_psu_init+0xd4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017ee:	498d      	ldr	r1, [pc, #564]	; (8001a24 <lcd_psu_init+0x348>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017f0:	2304      	movs	r3, #4
 80017f2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017f4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017f6:	4885      	ldr	r0, [pc, #532]	; (8001a0c <lcd_psu_init+0x330>)
 80017f8:	214e      	movs	r1, #78	; 0x4e
 80017fa:	aa03      	add	r2, sp, #12
 80017fc:	f004 ffbe 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001800:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001802:	2341      	movs	r3, #65	; 0x41
 8001804:	4d88      	ldr	r5, [pc, #544]	; (8001a28 <lcd_psu_init+0x34c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001806:	4f81      	ldr	r7, [pc, #516]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001808:	011a      	lsls	r2, r3, #4
 800180a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800180c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001810:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001814:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001818:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800181c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001820:	2304      	movs	r3, #4
 8001822:	214e      	movs	r1, #78	; 0x4e
 8001824:	4638      	mov	r0, r7
 8001826:	aa03      	add	r2, sp, #12
 8001828:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800182a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800182e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001832:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001836:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800183a:	f004 ff9f 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800183e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e0      	bne.n	8001808 <lcd_psu_init+0x12c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001846:	4973      	ldr	r1, [pc, #460]	; (8001a14 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001848:	2304      	movs	r3, #4
 800184a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800184c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800184e:	486f      	ldr	r0, [pc, #444]	; (8001a0c <lcd_psu_init+0x330>)
 8001850:	214e      	movs	r1, #78	; 0x4e
 8001852:	aa03      	add	r2, sp, #12
 8001854:	f004 ff92 	bl	800677c <HAL_I2C_Master_Transmit>
 8001858:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800185a:	2341      	movs	r3, #65	; 0x41
 800185c:	4d73      	ldr	r5, [pc, #460]	; (8001a2c <lcd_psu_init+0x350>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800185e:	4f6b      	ldr	r7, [pc, #428]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001860:	011a      	lsls	r2, r3, #4
 8001862:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001868:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800186c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001870:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001874:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001878:	2304      	movs	r3, #4
 800187a:	214e      	movs	r1, #78	; 0x4e
 800187c:	4638      	mov	r0, r7
 800187e:	aa03      	add	r2, sp, #12
 8001880:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001882:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001886:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800188a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800188e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001892:	f004 ff73 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001896:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1e0      	bne.n	8001860 <lcd_psu_init+0x184>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800189e:	495f      	ldr	r1, [pc, #380]	; (8001a1c <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a0:	2304      	movs	r3, #4
 80018a2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018a4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018a6:	4859      	ldr	r0, [pc, #356]	; (8001a0c <lcd_psu_init+0x330>)
 80018a8:	214e      	movs	r1, #78	; 0x4e
 80018aa:	aa03      	add	r2, sp, #12
 80018ac:	f004 ff66 	bl	800677c <HAL_I2C_Master_Transmit>
 80018b0:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80018b2:	233a      	movs	r3, #58	; 0x3a
 80018b4:	4d5e      	ldr	r5, [pc, #376]	; (8001a30 <lcd_psu_init+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018b6:	4f55      	ldr	r7, [pc, #340]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80018b8:	011a      	lsls	r2, r3, #4
 80018ba:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80018bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80018c0:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018c4:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018c8:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018cc:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018d0:	2304      	movs	r3, #4
 80018d2:	214e      	movs	r1, #78	; 0x4e
 80018d4:	4638      	mov	r0, r7
 80018d6:	aa03      	add	r2, sp, #12
 80018d8:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80018da:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80018de:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80018e2:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80018e6:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018ea:	f004 ff47 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80018ee:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1e0      	bne.n	80018b8 <lcd_psu_init+0x1dc>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018f6:	494f      	ldr	r1, [pc, #316]	; (8001a34 <lcd_psu_init+0x358>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018f8:	2304      	movs	r3, #4
 80018fa:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80018fc:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80018fe:	4843      	ldr	r0, [pc, #268]	; (8001a0c <lcd_psu_init+0x330>)
 8001900:	214e      	movs	r1, #78	; 0x4e
 8001902:	aa03      	add	r2, sp, #12
 8001904:	f004 ff3a 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001908:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 800190a:	2356      	movs	r3, #86	; 0x56
 800190c:	4d4a      	ldr	r5, [pc, #296]	; (8001a38 <lcd_psu_init+0x35c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800190e:	4f3f      	ldr	r7, [pc, #252]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001910:	011a      	lsls	r2, r3, #4
 8001912:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001918:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800191c:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001920:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001924:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001928:	2304      	movs	r3, #4
 800192a:	214e      	movs	r1, #78	; 0x4e
 800192c:	4638      	mov	r0, r7
 800192e:	aa03      	add	r2, sp, #12
 8001930:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001932:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001936:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800193a:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800193e:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001942:	f004 ff1b 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001946:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1e0      	bne.n	8001910 <lcd_psu_init+0x234>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800194e:	4931      	ldr	r1, [pc, #196]	; (8001a14 <lcd_psu_init+0x338>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001950:	2304      	movs	r3, #4
 8001952:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001954:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001956:	482d      	ldr	r0, [pc, #180]	; (8001a0c <lcd_psu_init+0x330>)
 8001958:	214e      	movs	r1, #78	; 0x4e
 800195a:	aa03      	add	r2, sp, #12
 800195c:	f004 ff0e 	bl	800677c <HAL_I2C_Master_Transmit>
 8001960:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001962:	2356      	movs	r3, #86	; 0x56
 8001964:	4d35      	ldr	r5, [pc, #212]	; (8001a3c <lcd_psu_init+0x360>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001966:	4f29      	ldr	r7, [pc, #164]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 8001968:	011a      	lsls	r2, r3, #4
 800196a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 800196c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001970:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001974:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001978:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800197c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001980:	2304      	movs	r3, #4
 8001982:	214e      	movs	r1, #78	; 0x4e
 8001984:	4638      	mov	r0, r7
 8001986:	aa03      	add	r2, sp, #12
 8001988:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800198a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800198e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001992:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001996:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800199a:	f004 feef 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800199e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1e0      	bne.n	8001968 <lcd_psu_init+0x28c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019a6:	491d      	ldr	r1, [pc, #116]	; (8001a1c <lcd_psu_init+0x340>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a8:	2304      	movs	r3, #4
 80019aa:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019ac:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019ae:	4817      	ldr	r0, [pc, #92]	; (8001a0c <lcd_psu_init+0x330>)
 80019b0:	214e      	movs	r1, #78	; 0x4e
 80019b2:	aa03      	add	r2, sp, #12
 80019b4:	f004 fee2 	bl	800677c <HAL_I2C_Master_Transmit>
 80019b8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 80019ba:	233a      	movs	r3, #58	; 0x3a
 80019bc:	4d18      	ldr	r5, [pc, #96]	; (8001a20 <lcd_psu_init+0x344>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019be:	4f13      	ldr	r7, [pc, #76]	; (8001a0c <lcd_psu_init+0x330>)
	data_l = ((data<<4)&0xf0);
 80019c0:	011a      	lsls	r2, r3, #4
 80019c2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80019c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019c8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019cc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019d0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019d4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019d8:	2304      	movs	r3, #4
 80019da:	214e      	movs	r1, #78	; 0x4e
 80019dc:	4638      	mov	r0, r7
 80019de:	aa03      	add	r2, sp, #12
 80019e0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80019e2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80019e6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80019ea:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80019ee:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019f2:	f004 fec3 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80019f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1e0      	bne.n	80019c0 <lcd_psu_init+0x2e4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019fe:	4910      	ldr	r1, [pc, #64]	; (8001a40 <lcd_psu_init+0x364>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a00:	2304      	movs	r3, #4
 8001a02:	9600      	str	r6, [sp, #0]
 8001a04:	e01e      	b.n	8001a44 <lcd_psu_init+0x368>
 8001a06:	bf00      	nop
 8001a08:	080c888c 	.word	0x080c888c
 8001a0c:	20000514 	.word	0x20000514
 8001a10:	0800d668 	.word	0x0800d668
 8001a14:	191d090d 	.word	0x191d090d
 8001a18:	0800d674 	.word	0x0800d674
 8001a1c:	090d090d 	.word	0x090d090d
 8001a20:	0800d678 	.word	0x0800d678
 8001a24:	080cc8cc 	.word	0x080cc8cc
 8001a28:	0800d680 	.word	0x0800d680
 8001a2c:	0800d68c 	.word	0x0800d68c
 8001a30:	0800d690 	.word	0x0800d690
 8001a34:	484c989c 	.word	0x484c989c
 8001a38:	0800d698 	.word	0x0800d698
 8001a3c:	0800d6a4 	.word	0x0800d6a4
 8001a40:	484cd8dc 	.word	0x484cd8dc
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a44:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a46:	4841      	ldr	r0, [pc, #260]	; (8001b4c <lcd_psu_init+0x470>)
 8001a48:	214e      	movs	r1, #78	; 0x4e
 8001a4a:	aa03      	add	r2, sp, #12
 8001a4c:	f004 fe96 	bl	800677c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a50:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001a52:	2341      	movs	r3, #65	; 0x41
 8001a54:	4d3e      	ldr	r5, [pc, #248]	; (8001b50 <lcd_psu_init+0x474>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a56:	4f3d      	ldr	r7, [pc, #244]	; (8001b4c <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001a58:	011a      	lsls	r2, r3, #4
 8001a5a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a60:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a64:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a68:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a6c:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a70:	2304      	movs	r3, #4
 8001a72:	214e      	movs	r1, #78	; 0x4e
 8001a74:	4638      	mov	r0, r7
 8001a76:	aa03      	add	r2, sp, #12
 8001a78:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a7a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a7e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a82:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a86:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a8a:	f004 fe77 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001a8e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e0      	bne.n	8001a58 <lcd_psu_init+0x37c>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a96:	492f      	ldr	r1, [pc, #188]	; (8001b54 <lcd_psu_init+0x478>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a98:	2304      	movs	r3, #4
 8001a9a:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a9c:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a9e:	482b      	ldr	r0, [pc, #172]	; (8001b4c <lcd_psu_init+0x470>)
 8001aa0:	214e      	movs	r1, #78	; 0x4e
 8001aa2:	aa03      	add	r2, sp, #12
 8001aa4:	f004 fe6a 	bl	800677c <HAL_I2C_Master_Transmit>
 8001aa8:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001aaa:	2341      	movs	r3, #65	; 0x41
 8001aac:	4d2a      	ldr	r5, [pc, #168]	; (8001b58 <lcd_psu_init+0x47c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aae:	4f27      	ldr	r7, [pc, #156]	; (8001b4c <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001ab0:	011a      	lsls	r2, r3, #4
 8001ab2:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001ab8:	f043 0c09 	orr.w	ip, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001abc:	f042 0e0d 	orr.w	lr, r2, #13
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ac0:	f043 080d 	orr.w	r8, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ac4:	f042 0409 	orr.w	r4, r2, #9
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ac8:	2304      	movs	r3, #4
 8001aca:	214e      	movs	r1, #78	; 0x4e
 8001acc:	4638      	mov	r0, r7
 8001ace:	aa03      	add	r2, sp, #12
 8001ad0:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ad2:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001ad6:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001ada:	f88d e00e 	strb.w	lr, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ade:	f88d 400f 	strb.w	r4, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ae2:	f004 fe4b 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001ae6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e0      	bne.n	8001ab0 <lcd_psu_init+0x3d4>
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001aee:	491b      	ldr	r1, [pc, #108]	; (8001b5c <lcd_psu_init+0x480>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af0:	2304      	movs	r3, #4
 8001af2:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001af4:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001af6:	4815      	ldr	r0, [pc, #84]	; (8001b4c <lcd_psu_init+0x470>)
 8001af8:	214e      	movs	r1, #78	; 0x4e
 8001afa:	aa03      	add	r2, sp, #12
 8001afc:	f004 fe3e 	bl	800677c <HAL_I2C_Master_Transmit>
 8001b00:	2664      	movs	r6, #100	; 0x64
	while (*str) lcd_send_data (*str++);
 8001b02:	233a      	movs	r3, #58	; 0x3a
 8001b04:	4c16      	ldr	r4, [pc, #88]	; (8001b60 <lcd_psu_init+0x484>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b06:	4d11      	ldr	r5, [pc, #68]	; (8001b4c <lcd_psu_init+0x470>)
	data_l = ((data<<4)&0xf0);
 8001b08:	011a      	lsls	r2, r3, #4
 8001b0a:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b10:	f043 0c09 	orr.w	ip, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b14:	f042 0e09 	orr.w	lr, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b18:	f043 080d 	orr.w	r8, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b1c:	f042 070d 	orr.w	r7, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b20:	2304      	movs	r3, #4
 8001b22:	214e      	movs	r1, #78	; 0x4e
 8001b24:	4628      	mov	r0, r5
 8001b26:	aa03      	add	r2, sp, #12
 8001b28:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001b2a:	f88d 800c 	strb.w	r8, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001b2e:	f88d c00d 	strb.w	ip, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001b32:	f88d 700e 	strb.w	r7, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001b36:	f88d e00f 	strb.w	lr, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b3a:	f004 fe1f 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8001b3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e0      	bne.n	8001b08 <lcd_psu_init+0x42c>
}
 8001b46:	b004      	add	sp, #16
 8001b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b4c:	20000514 	.word	0x20000514
 8001b50:	0800d6a8 	.word	0x0800d6a8
 8001b54:	191d090d 	.word	0x191d090d
 8001b58:	0800d6b4 	.word	0x0800d6b4
 8001b5c:	090d090d 	.word	0x090d090d
 8001b60:	0800d690 	.word	0x0800d690

08001b64 <ourInit>:
void ourInit(void){
 8001b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_ADC_DeInit(&hadc);
 8001b68:	4f50      	ldr	r7, [pc, #320]	; (8001cac <ourInit+0x148>)
void ourInit(void){
 8001b6a:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	484f      	ldr	r0, [pc, #316]	; (8001cb0 <ourInit+0x14c>)
 8001b72:	f004 fd2b 	bl	80065cc <HAL_GPIO_WritePin>
	HAL_ADC_DeInit(&hadc);
 8001b76:	4638      	mov	r0, r7
 8001b78:	f003 fe9c 	bl	80058b4 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001b7c:	484d      	ldr	r0, [pc, #308]	; (8001cb4 <ourInit+0x150>)
 8001b7e:	f004 fa27 	bl	8005fd0 <HAL_DMA_DeInit>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <ourInit+0x154>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b86:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b88:	69d9      	ldr	r1, [r3, #28]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001b8a:	4d4c      	ldr	r5, [pc, #304]	; (8001cbc <ourInit+0x158>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8001b90:	61d9      	str	r1, [r3, #28]
 8001b92:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b94:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	9307      	str	r3, [sp, #28]
 8001b9c:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b9e:	f004 f8e1 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ba2:	200b      	movs	r0, #11
 8001ba4:	f004 f91c 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	200e      	movs	r0, #14
 8001bac:	4611      	mov	r1, r2
 8001bae:	f004 f8d9 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bb2:	200e      	movs	r0, #14
 8001bb4:	f004 f914 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	200f      	movs	r0, #15
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	f004 f8d1 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f004 f90c 	bl	8005de0 <HAL_NVIC_EnableIRQ>
	MX_ADC_Init();
 8001bc8:	f7ff fbee 	bl	80013a8 <MX_ADC_Init>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adcvalues, 5);// start the adc in dma mode
 8001bcc:	2205      	movs	r2, #5
 8001bce:	4638      	mov	r0, r7
 8001bd0:	493b      	ldr	r1, [pc, #236]	; (8001cc0 <ourInit+0x15c>)
 8001bd2:	f004 f857 	bl	8005c84 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f004 f951 	bl	8005e80 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001bde:	2110      	movs	r1, #16
 8001be0:	4628      	mov	r0, r5
 8001be2:	f004 f94d 	bl	8005e80 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001be6:	2300      	movs	r3, #0
 8001be8:	4628      	mov	r0, r5
 8001bea:	461a      	mov	r2, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	f004 f977 	bl	8005ee0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	f004 f971 	bl	8005ee0 <HAL_DAC_SetValue>
	ExtiConfig.Line = EXTI_LINE_1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	4a30      	ldr	r2, [pc, #192]	; (8001cc4 <ourInit+0x160>)
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c02:	a908      	add	r1, sp, #32
	ExtiConfig.Line = EXTI_LINE_1;
 8001c04:	e9cd 2308 	strd	r2, r3, [sp, #32]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c08:	2303      	movs	r3, #3
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c0a:	482f      	ldr	r0, [pc, #188]	; (8001cc8 <ourInit+0x164>)
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001c0c:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001c0e:	f004 faf5 	bl	80061fc <HAL_EXTI_SetConfigLine>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001c14:	2440      	movs	r4, #64	; 0x40
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c16:	4611      	mov	r1, r2
 8001c18:	2007      	movs	r0, #7
 8001c1a:	f004 f8a3 	bl	8005d64 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c1e:	2007      	movs	r0, #7
 8001c20:	f004 f8de 	bl	8005de0 <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c2a:	4828      	ldr	r0, [pc, #160]	; (8001ccc <ourInit+0x168>)
 8001c2c:	f004 fcce 	bl	80065cc <HAL_GPIO_WritePin>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001c30:	4e27      	ldr	r6, [pc, #156]	; (8001cd0 <ourInit+0x16c>)
	lcd_psu_init();
 8001c32:	f7ff fd53 	bl	80016dc <lcd_psu_init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001c36:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <ourInit+0x170>)
 8001c38:	f006 fa82 	bl	8008140 <HAL_TIM_Base_Start_IT>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001c3c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001cd8 <ourInit+0x174>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	2100      	movs	r1, #0
 8001c44:	4825      	ldr	r0, [pc, #148]	; (8001cdc <ourInit+0x178>)
 8001c46:	f008 fe35 	bl	800a8b4 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001c4a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001ce0 <ourInit+0x17c>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001c4e:	4622      	mov	r2, r4
 8001c50:	2100      	movs	r1, #0
 8001c52:	4630      	mov	r0, r6
 8001c54:	f008 fe2e 	bl	800a8b4 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001c58:	4622      	mov	r2, r4
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	f008 fe29 	bl	800a8b4 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8001c62:	4622      	mov	r2, r4
 8001c64:	4649      	mov	r1, r9
 8001c66:	4640      	mov	r0, r8
 8001c68:	f006 fcde 	bl	8008628 <HAL_UART_Receive_DMA>
	snprintf((char*)txbuffer, 26, "*STRT,%05.2f,%5.3f,%d,FNSH!", voltnum2, ampnum2, chstat2);
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <ourInit+0x180>)
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <ourInit+0x184>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6810      	ldr	r0, [r2, #0]
 8001c74:	9304      	str	r3, [sp, #16]
 8001c76:	f7fe fbef 	bl	8000458 <__aeabi_f2d>
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	491b      	ldr	r1, [pc, #108]	; (8001cec <ourInit+0x188>)
 8001c80:	6808      	ldr	r0, [r1, #0]
 8001c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c86:	f7fe fbe7 	bl	8000458 <__aeabi_f2d>
 8001c8a:	4682      	mov	sl, r0
 8001c8c:	468b      	mov	fp, r1
 8001c8e:	4630      	mov	r0, r6
 8001c90:	211a      	movs	r1, #26
 8001c92:	e9cd ab00 	strd	sl, fp, [sp]
 8001c96:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <ourInit+0x18c>)
 8001c98:	f009 fa74 	bl	800b184 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	4631      	mov	r1, r6
 8001ca0:	4640      	mov	r0, r8
}
 8001ca2:	b00d      	add	sp, #52	; 0x34
 8001ca4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 8001ca8:	f006 bc82 	b.w	80085b0 <HAL_UART_Transmit_DMA>
 8001cac:	200003d8 	.word	0x200003d8
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	20000440 	.word	0x20000440
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	2000042c 	.word	0x2000042c
 8001cc0:	200003a4 	.word	0x200003a4
 8001cc4:	06000001 	.word	0x06000001
 8001cc8:	2000050c 	.word	0x2000050c
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	20000708 	.word	0x20000708
 8001cd4:	200005a8 	.word	0x200005a8
 8001cd8:	200006bc 	.word	0x200006bc
 8001cdc:	20000748 	.word	0x20000748
 8001ce0:	20000668 	.word	0x20000668
 8001ce4:	200003b8 	.word	0x200003b8
 8001ce8:	200003b4 	.word	0x200003b4
 8001cec:	200007d0 	.word	0x200007d0
 8001cf0:	0800d6b8 	.word	0x0800d6b8

08001cf4 <main>:
{
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	2400      	movs	r4, #0
{
 8001cfa:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001cfc:	f003 fcd6 	bl	80056ac <HAL_Init>
  SystemClock_Config();
 8001d00:	f7ff fbb8 	bl	8001474 <SystemClock_Config>
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001d0a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0e:	4dae      	ldr	r5, [pc, #696]	; (8001fc8 <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d14:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d16:	f043 0320 	orr.w	r3, r3, #32
 8001d1a:	61eb      	str	r3, [r5, #28]
 8001d1c:	69eb      	ldr	r3, [r5, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d1e:	48ab      	ldr	r0, [pc, #684]	; (8001fcc <main+0x2d8>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	9304      	str	r3, [sp, #16]
 8001d26:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2a:	4691      	mov	r9, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61eb      	str	r3, [r5, #28]
 8001d30:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001d32:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4013      	ands	r3, r2
 8001d36:	9305      	str	r3, [sp, #20]
 8001d38:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	69eb      	ldr	r3, [r5, #28]
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001d3c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	61eb      	str	r3, [r5, #28]
 8001d44:	69eb      	ldr	r3, [r5, #28]
  hdac.Instance = DAC;
 8001d46:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8001fd0 <main+0x2dc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	9306      	str	r3, [sp, #24]
 8001d50:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d52:	69eb      	ldr	r3, [r5, #28]
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	61eb      	str	r3, [r5, #28]
 8001d5a:	69eb      	ldr	r3, [r5, #28]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	9307      	str	r3, [sp, #28]
 8001d62:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001d64:	f004 fc32 	bl	80065cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001d68:	4622      	mov	r2, r4
 8001d6a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001d6e:	4899      	ldr	r0, [pc, #612]	; (8001fd4 <main+0x2e0>)
 8001d70:	f004 fc2c 	bl	80065cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	2301      	movs	r3, #1
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001d78:	4894      	ldr	r0, [pc, #592]	; (8001fcc <main+0x2d8>)
 8001d7a:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001d7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d80:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f004 faa0 	bl	80062c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001d88:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8001d8c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8e:	4891      	ldr	r0, [pc, #580]	; (8001fd4 <main+0x2e0>)
 8001d90:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001d92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001d96:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9a:	f004 fa95 	bl	80062c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001d9e:	f647 4205 	movw	r2, #31749	; 0x7c05
 8001da2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	488c      	ldr	r0, [pc, #560]	; (8001fd8 <main+0x2e4>)
 8001da8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin|Row_1_Pin|Row_2_Pin
 8001daa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dae:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f004 fa89 	bl	80062c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001db6:	2300      	movs	r3, #0
 8001db8:	2202      	movs	r2, #2
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001dba:	4887      	ldr	r0, [pc, #540]	; (8001fd8 <main+0x2e4>)
 8001dbc:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001dbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f004 fa7f 	bl	80062c8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001dca:	4622      	mov	r2, r4
 8001dcc:	4621      	mov	r1, r4
 8001dce:	2006      	movs	r0, #6
 8001dd0:	f003 ffc8 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dd4:	2006      	movs	r0, #6
 8001dd6:	f004 f803 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001dda:	4622      	mov	r2, r4
 8001ddc:	4621      	mov	r1, r4
 8001dde:	2008      	movs	r0, #8
 8001de0:	f003 ffc0 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001de4:	2008      	movs	r0, #8
 8001de6:	f003 fffb 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dea:	4622      	mov	r2, r4
 8001dec:	4621      	mov	r1, r4
 8001dee:	2028      	movs	r0, #40	; 0x28
 8001df0:	f003 ffb8 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001df4:	2028      	movs	r0, #40	; 0x28
 8001df6:	f003 fff3 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfa:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001dfc:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	61eb      	str	r3, [r5, #28]
 8001e04:	69eb      	ldr	r3, [r5, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e06:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e0c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e0e:	9303      	str	r3, [sp, #12]
 8001e10:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e12:	f003 ffa7 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e16:	200b      	movs	r0, #11
 8001e18:	f003 ffe2 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001e1c:	4622      	mov	r2, r4
 8001e1e:	4621      	mov	r1, r4
 8001e20:	200e      	movs	r0, #14
 8001e22:	f003 ff9f 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e26:	200e      	movs	r0, #14
 8001e28:	f003 ffda 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4621      	mov	r1, r4
 8001e30:	200f      	movs	r0, #15
 8001e32:	f003 ff97 	bl	8005d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f003 ffd2 	bl	8005de0 <HAL_NVIC_EnableIRQ>
  MX_ADC_Init();
 8001e3c:	f7ff fab4 	bl	80013a8 <MX_ADC_Init>
  hdac.Instance = DAC;
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <main+0x2e8>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001e42:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8001e44:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  hdac.Instance = DAC;
 8001e48:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001e4c:	f004 f802 	bl	8005e54 <HAL_DAC_Init>
 8001e50:	b108      	cbz	r0, 8001e56 <main+0x162>
 8001e52:	b672      	cpsid	i
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <main+0x160>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e56:	4602      	mov	r2, r0
 8001e58:	a90a      	add	r1, sp, #40	; 0x28
 8001e5a:	4640      	mov	r0, r8
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001e5c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e60:	f004 f854 	bl	8005f0c <HAL_DAC_ConfigChannel>
 8001e64:	b108      	cbz	r0, 8001e6a <main+0x176>
 8001e66:	b672      	cpsid	i
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <main+0x174>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	4640      	mov	r0, r8
 8001e6e:	a90a      	add	r1, sp, #40	; 0x28
 8001e70:	f004 f84c 	bl	8005f0c <HAL_DAC_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b108      	cbz	r0, 8001e7c <main+0x188>
 8001e78:	b672      	cpsid	i
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <main+0x186>
  hi2c1.Instance = I2C1;
 8001e7c:	4858      	ldr	r0, [pc, #352]	; (8001fe0 <main+0x2ec>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7e:	219c      	movs	r1, #156	; 0x9c
  hi2c1.Init.OwnAddress2 = 0;
 8001e80:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e84:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e88:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8001e8e:	4c55      	ldr	r4, [pc, #340]	; (8001fe4 <main+0x2f0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e90:	e9c0 1303 	strd	r1, r3, [r0, #12]
  hi2c1.Init.ClockSpeed = 100000;
 8001e94:	4b54      	ldr	r3, [pc, #336]	; (8001fe8 <main+0x2f4>)
 8001e96:	e9c0 4300 	strd	r4, r3, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e9a:	f004 fba7 	bl	80065ec <HAL_I2C_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b9b8      	cbnz	r0, 8001ed2 <main+0x1de>
  huart1.Instance = USART1;
 8001ea2:	4852      	ldr	r0, [pc, #328]	; (8001fec <main+0x2f8>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001ea4:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eac:	60c3      	str	r3, [r0, #12]
  huart1.Init.BaudRate = 4800;
 8001eae:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8001eb2:	6043      	str	r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001eb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eb8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001eba:	230c      	movs	r3, #12
 8001ebc:	6143      	str	r3, [r0, #20]
  huart1.Instance = USART1;
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <main+0x2fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001ec0:	f8c0 8008 	str.w	r8, [r0, #8]
  huart1.Instance = USART1;
 8001ec4:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ec6:	f006 fae9 	bl	800849c <HAL_UART_Init>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	b118      	cbz	r0, 8001ed6 <main+0x1e2>
 8001ece:	b672      	cpsid	i
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <main+0x1dc>
 8001ed2:	b672      	cpsid	i
 8001ed4:	e7fe      	b.n	8001ed4 <main+0x1e0>
  MX_USB_DEVICE_Init();
 8001ed6:	f008 fa0b 	bl	800a2f0 <MX_USB_DEVICE_Init>
  htim2.Init.Prescaler = 32000;
 8001eda:	f44f 49fa 	mov.w	r9, #32000	; 0x7d00
  htim2.Instance = TIM2;
 8001ede:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 10;
 8001ee2:	230a      	movs	r3, #10
  htim2.Instance = TIM2;
 8001ee4:	4d43      	ldr	r5, [pc, #268]	; (8001ff4 <main+0x300>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eea:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eec:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	60ac      	str	r4, [r5, #8]
  htim2.Instance = TIM2;
 8001efa:	602a      	str	r2, [r5, #0]
  htim2.Init.Period = 10;
 8001efc:	60eb      	str	r3, [r5, #12]
  htim2.Init.Prescaler = 32000;
 8001efe:	f8c5 9004 	str.w	r9, [r5, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f02:	f006 f8cd 	bl	80080a0 <HAL_TIM_Base_Init>
 8001f06:	b108      	cbz	r0, 8001f0c <main+0x218>
 8001f08:	b672      	cpsid	i
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <main+0x216>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f10:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f14:	f006 f956 	bl	80081c4 <HAL_TIM_ConfigClockSource>
 8001f18:	b108      	cbz	r0, 8001f1e <main+0x22a>
 8001f1a:	b672      	cpsid	i
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <main+0x228>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1e:	4628      	mov	r0, r5
 8001f20:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	e9cd 6708 	strd	r6, r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f26:	f006 fa87 	bl	8008438 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2a:	b108      	cbz	r0, 8001f30 <main+0x23c>
 8001f2c:	b672      	cpsid	i
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <main+0x23a>
  htim3.Init.Period = 500;
 8001f30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  htim3.Instance = TIM3;
 8001f34:	4c30      	ldr	r4, [pc, #192]	; (8001ff8 <main+0x304>)
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <main+0x308>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f38:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8001f3c:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	e9c4 9001 	strd	r9, r0, [r4, #4]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f4c:	4620      	mov	r0, r4
  htim3.Init.Period = 500;
 8001f4e:	60e2      	str	r2, [r4, #12]
  htim3.Instance = TIM3;
 8001f50:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f52:	f006 f8a5 	bl	80080a0 <HAL_TIM_Base_Init>
 8001f56:	b108      	cbz	r0, 8001f5c <main+0x268>
 8001f58:	b672      	cpsid	i
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <main+0x266>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f64:	f006 f92e 	bl	80081c4 <HAL_TIM_ConfigClockSource>
 8001f68:	b108      	cbz	r0, 8001f6e <main+0x27a>
 8001f6a:	b672      	cpsid	i
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <main+0x278>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6e:	2400      	movs	r4, #0
 8001f70:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <main+0x304>)
 8001f74:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f76:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f7a:	f006 fa5d 	bl	8008438 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	b108      	cbz	r0, 8001f84 <main+0x290>
 8001f80:	b672      	cpsid	i
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <main+0x28e>
  htim4.Init.Prescaler = 32000;
 8001f84:	f44f 47fa 	mov.w	r7, #32000	; 0x7d00
  htim4.Init.Period = 10;
 8001f88:	220a      	movs	r2, #10
  htim4.Instance = TIM4;
 8001f8a:	4e1d      	ldr	r6, [pc, #116]	; (8002000 <main+0x30c>)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8001f92:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f96:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9a:	e9c6 0004 	strd	r0, r0, [r6, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	60b0      	str	r0, [r6, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fa0:	4630      	mov	r0, r6
  htim4.Init.Period = 10;
 8001fa2:	60f2      	str	r2, [r6, #12]
  htim4.Init.Prescaler = 32000;
 8001fa4:	6077      	str	r7, [r6, #4]
  htim4.Instance = TIM4;
 8001fa6:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fa8:	f006 f87a 	bl	80080a0 <HAL_TIM_Base_Init>
 8001fac:	b108      	cbz	r0, 8001fb2 <main+0x2be>
 8001fae:	b672      	cpsid	i
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <main+0x2bc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb2:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fbe:	f006 f901 	bl	80081c4 <HAL_TIM_ConfigClockSource>
 8001fc2:	b308      	cbz	r0, 8002008 <main+0x314>
 8001fc4:	b672      	cpsid	i
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <main+0x2d2>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	2000042c 	.word	0x2000042c
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40007400 	.word	0x40007400
 8001fe0:	20000514 	.word	0x20000514
 8001fe4:	40005400 	.word	0x40005400
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	20000668 	.word	0x20000668
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	20000568 	.word	0x20000568
 8001ff8:	200005a8 	.word	0x200005a8
 8001ffc:	40000400 	.word	0x40000400
 8002000:	200005e8 	.word	0x200005e8
 8002004:	40000800 	.word	0x40000800
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002008:	4630      	mov	r0, r6
 800200a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200c:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002010:	f006 fa12 	bl	8008438 <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	b108      	cbz	r0, 800201a <main+0x326>
 8002016:	b672      	cpsid	i
  while (1)
 8002018:	e7fe      	b.n	8002018 <main+0x324>
  htim9.Init.Period = 20;
 800201a:	2214      	movs	r2, #20
  htim9.Instance = TIM9;
 800201c:	4e1b      	ldr	r6, [pc, #108]	; (800208c <main+0x398>)
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <main+0x39c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002020:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8002024:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	e9cd 0008 	strd	r0, r0, [sp, #32]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	e9c6 7001 	strd	r7, r0, [r6, #4]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	e9c6 0004 	strd	r0, r0, [r6, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002034:	4630      	mov	r0, r6
  htim9.Init.Period = 20;
 8002036:	60f2      	str	r2, [r6, #12]
  htim9.Instance = TIM9;
 8002038:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800203a:	f006 f831 	bl	80080a0 <HAL_TIM_Base_Init>
 800203e:	b108      	cbz	r0, 8002044 <main+0x350>
 8002040:	b672      	cpsid	i
  while (1)
 8002042:	e7fe      	b.n	8002042 <main+0x34e>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002044:	4630      	mov	r0, r6
 8002046:	a90a      	add	r1, sp, #40	; 0x28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002048:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800204c:	f006 f8ba 	bl	80081c4 <HAL_TIM_ConfigClockSource>
 8002050:	b108      	cbz	r0, 8002056 <main+0x362>
 8002052:	b672      	cpsid	i
  while (1)
 8002054:	e7fe      	b.n	8002054 <main+0x360>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002056:	4630      	mov	r0, r6
 8002058:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 800205e:	f006 f9eb 	bl	8008438 <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	4604      	mov	r4, r0
 8002064:	b108      	cbz	r0, 800206a <main+0x376>
 8002066:	b672      	cpsid	i
  while (1)
 8002068:	e7fe      	b.n	8002068 <main+0x374>
  ourInit();
 800206a:	f7ff fd7b 	bl	8001b64 <ourInit>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 800206e:	4622      	mov	r2, r4
 8002070:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002074:	2110      	movs	r1, #16
 8002076:	4807      	ldr	r0, [pc, #28]	; (8002094 <main+0x3a0>)
 8002078:	f003 ff32 	bl	8005ee0 <HAL_DAC_SetValue>
	  if(voltnum1 <= 0.00){
 800207c:	2400      	movs	r4, #0
 800207e:	f8df 8018 	ldr.w	r8, [pc, #24]	; 8002098 <main+0x3a4>
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)adc_vref);
 8002082:	4f06      	ldr	r7, [pc, #24]	; (800209c <main+0x3a8>)
	  float cur_num_temp = ((((float)3.0 * (float)adc_current * (float)vrefvalue)/((float)adc_vref * (float)4095) / (float)20) / (float)0.15);
 8002084:	f8df b018 	ldr.w	fp, [pc, #24]	; 80020a0 <main+0x3ac>
 8002088:	e07f      	b.n	800218a <main+0x496>
 800208a:	bf00      	nop
 800208c:	20000628 	.word	0x20000628
 8002090:	40010800 	.word	0x40010800
 8002094:	2000042c 	.word	0x2000042c
 8002098:	200007cc 	.word	0x200007cc
 800209c:	40400000 	.word	0x40400000
 80020a0:	457ff000 	.word	0x457ff000
		  error = lin_num - voltnum1;
 80020a4:	4650      	mov	r0, sl
 80020a6:	f8d8 a000 	ldr.w	sl, [r8]
		  if(correctedvoltnum1 > 12.0){
 80020aa:	4ea0      	ldr	r6, [pc, #640]	; (800232c <main+0x638>)
		  error = lin_num - voltnum1;
 80020ac:	4651      	mov	r1, sl
 80020ae:	f7fe fd07 	bl	8000ac0 <__aeabi_fsub>
 80020b2:	f8df c27c 	ldr.w	ip, [pc, #636]	; 8002330 <main+0x63c>
		  integral += error;
 80020b6:	4b9f      	ldr	r3, [pc, #636]	; (8002334 <main+0x640>)
		  error = lin_num - voltnum1;
 80020b8:	f8cc 0000 	str.w	r0, [ip]
		  integral += error;
 80020bc:	6819      	ldr	r1, [r3, #0]
		  error = lin_num - voltnum1;
 80020be:	4605      	mov	r5, r0
		  integral += error;
 80020c0:	f7fe fd00 	bl	8000ac4 <__addsf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a9b      	ldr	r2, [pc, #620]	; (8002334 <main+0x640>)
		  derivative = error - error_previous;
 80020c8:	499b      	ldr	r1, [pc, #620]	; (8002338 <main+0x644>)
		  integral += error;
 80020ca:	6013      	str	r3, [r2, #0]
		  derivative = error - error_previous;
 80020cc:	6809      	ldr	r1, [r1, #0]
 80020ce:	4628      	mov	r0, r5
		  integral += error;
 80020d0:	9301      	str	r3, [sp, #4]
		  derivative = error - error_previous;
 80020d2:	f7fe fcf5 	bl	8000ac0 <__aeabi_fsub>
 80020d6:	4602      	mov	r2, r0
		  error_previous = error;
 80020d8:	4997      	ldr	r1, [pc, #604]	; (8002338 <main+0x644>)
		  correction = P * error + I * integral + D * derivative;
 80020da:	4b98      	ldr	r3, [pc, #608]	; (800233c <main+0x648>)
		  error_previous = error;
 80020dc:	600d      	str	r5, [r1, #0]
		  correction = P * error + I * integral + D * derivative;
 80020de:	6819      	ldr	r1, [r3, #0]
		  derivative = error - error_previous;
 80020e0:	4b97      	ldr	r3, [pc, #604]	; (8002340 <main+0x64c>)
		  correction = P * error + I * integral + D * derivative;
 80020e2:	4628      	mov	r0, r5
		  derivative = error - error_previous;
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	4615      	mov	r5, r2
		  correction = P * error + I * integral + D * derivative;
 80020e8:	f7fe fdf4 	bl	8000cd4 <__aeabi_fmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	9201      	str	r2, [sp, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	4b93      	ldr	r3, [pc, #588]	; (8002344 <main+0x650>)
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	f7fe fdec 	bl	8000cd4 <__aeabi_fmul>
 80020fc:	9a01      	ldr	r2, [sp, #4]
 80020fe:	4601      	mov	r1, r0
 8002100:	4610      	mov	r0, r2
 8002102:	f7fe fcdf 	bl	8000ac4 <__addsf3>
 8002106:	4603      	mov	r3, r0
 8002108:	4a8f      	ldr	r2, [pc, #572]	; (8002348 <main+0x654>)
 800210a:	4628      	mov	r0, r5
 800210c:	6811      	ldr	r1, [r2, #0]
 800210e:	461d      	mov	r5, r3
 8002110:	f7fe fde0 	bl	8000cd4 <__aeabi_fmul>
 8002114:	4601      	mov	r1, r0
 8002116:	4628      	mov	r0, r5
 8002118:	f7fe fcd4 	bl	8000ac4 <__addsf3>
 800211c:	4601      	mov	r1, r0
 800211e:	4b8b      	ldr	r3, [pc, #556]	; (800234c <main+0x658>)
		  correctedvoltnum1 = voltnum1 - correction;
 8002120:	4650      	mov	r0, sl
		  correction = P * error + I * integral + D * derivative;
 8002122:	6019      	str	r1, [r3, #0]
		  correctedvoltnum1 = voltnum1 - correction;
 8002124:	f7fe fccc 	bl	8000ac0 <__aeabi_fsub>
		  if(correctedvoltnum1 > 12.0){
 8002128:	4631      	mov	r1, r6
		  correctedvoltnum1 = voltnum1 - correction;
 800212a:	4605      	mov	r5, r0
		  if(correctedvoltnum1 > 12.0){
 800212c:	f7fe ff8e 	bl	800104c <__aeabi_fcmpgt>
 8002130:	2800      	cmp	r0, #0
 8002132:	f000 80ea 	beq.w	800230a <main+0x616>
			  correctedvoltnum1 = 12.0;
 8002136:	4b86      	ldr	r3, [pc, #536]	; (8002350 <main+0x65c>)
 8002138:	601e      	str	r6, [r3, #0]
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 800213a:	4b85      	ldr	r3, [pc, #532]	; (8002350 <main+0x65c>)
 800213c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f7fe fdc7 	bl	8000cd4 <__aeabi_fmul>
 8002146:	4983      	ldr	r1, [pc, #524]	; (8002354 <main+0x660>)
 8002148:	f7fe fcbc 	bl	8000ac4 <__addsf3>
 800214c:	4659      	mov	r1, fp
 800214e:	f7fe fdc1 	bl	8000cd4 <__aeabi_fmul>
 8002152:	4649      	mov	r1, r9
 8002154:	f7fe fe72 	bl	8000e3c <__aeabi_fdiv>
 8002158:	f7fe ff82 	bl	8001060 <__aeabi_f2uiz>
 800215c:	4603      	mov	r3, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800215e:	2200      	movs	r2, #0
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8002160:	497d      	ldr	r1, [pc, #500]	; (8002358 <main+0x664>)
 8002162:	b29b      	uxth	r3, r3
 8002164:	800b      	strh	r3, [r1, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8002166:	487d      	ldr	r0, [pc, #500]	; (800235c <main+0x668>)
 8002168:	4611      	mov	r1, r2
 800216a:	f003 feb9 	bl	8005ee0 <HAL_DAC_SetValue>
	  if(voltnum1 > 0.00){
 800216e:	4621      	mov	r1, r4
 8002170:	f8d8 0000 	ldr.w	r0, [r8]
 8002174:	f7fe ff6a 	bl	800104c <__aeabi_fcmpgt>
 8002178:	b120      	cbz	r0, 8002184 <main+0x490>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	2140      	movs	r1, #64	; 0x40
 800217e:	4878      	ldr	r0, [pc, #480]	; (8002360 <main+0x66c>)
 8002180:	f004 fa24 	bl	80065cc <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8002184:	2001      	movs	r0, #1
 8002186:	f003 fab3 	bl	80056f0 <HAL_Delay>
	  if(voltnum1 <= 0.00){
 800218a:	4621      	mov	r1, r4
 800218c:	f8d8 0000 	ldr.w	r0, [r8]
 8002190:	f7fe ff48 	bl	8001024 <__aeabi_fcmple>
 8002194:	2800      	cmp	r0, #0
 8002196:	f040 80c0 	bne.w	800231a <main+0x626>
	  uint16_t vrefvalue = (uint16_t)*vrefptr;
 800219a:	4b72      	ldr	r3, [pc, #456]	; (8002364 <main+0x670>)
 800219c:	681b      	ldr	r3, [r3, #0]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)adc_vref);
 800219e:	8818      	ldrh	r0, [r3, #0]
 80021a0:	f7fe fd40 	bl	8000c24 <__aeabi_ui2f>
 80021a4:	4b70      	ldr	r3, [pc, #448]	; (8002368 <main+0x674>)
 80021a6:	4605      	mov	r5, r0
 80021a8:	8818      	ldrh	r0, [r3, #0]
 80021aa:	f7fe fd3b 	bl	8000c24 <__aeabi_ui2f>
 80021ae:	4606      	mov	r6, r0
 80021b0:	4628      	mov	r0, r5
 80021b2:	4631      	mov	r1, r6
 80021b4:	f7fe fe42 	bl	8000e3c <__aeabi_fdiv>
 80021b8:	4639      	mov	r1, r7
 80021ba:	f7fe fd8b 	bl	8000cd4 <__aeabi_fmul>
	  float cur_num_temp = ((((float)3.0 * (float)adc_current * (float)vrefvalue)/((float)adc_vref * (float)4095) / (float)20) / (float)0.15);
 80021be:	4659      	mov	r1, fp
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)adc_vref);
 80021c0:	4681      	mov	r9, r0
	  float cur_num_temp = ((((float)3.0 * (float)adc_current * (float)vrefvalue)/((float)adc_vref * (float)4095) / (float)20) / (float)0.15);
 80021c2:	4630      	mov	r0, r6
 80021c4:	f7fe fd86 	bl	8000cd4 <__aeabi_fmul>
 80021c8:	4606      	mov	r6, r0
 80021ca:	4b68      	ldr	r3, [pc, #416]	; (800236c <main+0x678>)
 80021cc:	8818      	ldrh	r0, [r3, #0]
 80021ce:	f7fe fd29 	bl	8000c24 <__aeabi_ui2f>
 80021d2:	4639      	mov	r1, r7
 80021d4:	f7fe fd7e 	bl	8000cd4 <__aeabi_fmul>
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe fd7b 	bl	8000cd4 <__aeabi_fmul>
 80021de:	4631      	mov	r1, r6
 80021e0:	f7fe fe2c 	bl	8000e3c <__aeabi_fdiv>
 80021e4:	4962      	ldr	r1, [pc, #392]	; (8002370 <main+0x67c>)
 80021e6:	f7fe fe29 	bl	8000e3c <__aeabi_fdiv>
 80021ea:	4962      	ldr	r1, [pc, #392]	; (8002374 <main+0x680>)
 80021ec:	f7fe fe26 	bl	8000e3c <__aeabi_fdiv>
	  if(cur_num_temp >= 0.0000){
 80021f0:	4621      	mov	r1, r4
	  float cur_num_temp = ((((float)3.0 * (float)adc_current * (float)vrefvalue)/((float)adc_vref * (float)4095) / (float)20) / (float)0.15);
 80021f2:	4682      	mov	sl, r0
	  if(cur_num_temp >= 0.0000){
 80021f4:	f7fe ff20 	bl	8001038 <__aeabi_fcmpge>
 80021f8:	b900      	cbnz	r0, 80021fc <main+0x508>
		  cur_num = 0.0000;
 80021fa:	46a2      	mov	sl, r4
 80021fc:	4b5e      	ldr	r3, [pc, #376]	; (8002378 <main+0x684>)
	  float op_num_temp = ((float)3.0 * ((float)adc_opamp * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80021fe:	495f      	ldr	r1, [pc, #380]	; (800237c <main+0x688>)
 8002200:	f8c3 a000 	str.w	sl, [r3]
 8002204:	4650      	mov	r0, sl
 8002206:	f7fe fd65 	bl	8000cd4 <__aeabi_fmul>
 800220a:	4682      	mov	sl, r0
 800220c:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <main+0x68c>)
 800220e:	8818      	ldrh	r0, [r3, #0]
 8002210:	f7fe fd08 	bl	8000c24 <__aeabi_ui2f>
 8002214:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002218:	f7fe fd5c 	bl	8000cd4 <__aeabi_fmul>
 800221c:	4639      	mov	r1, r7
 800221e:	f7fe fd59 	bl	8000cd4 <__aeabi_fmul>
 8002222:	4629      	mov	r1, r5
 8002224:	f7fe fd56 	bl	8000cd4 <__aeabi_fmul>
 8002228:	4631      	mov	r1, r6
 800222a:	f7fe fe07 	bl	8000e3c <__aeabi_fdiv>
 800222e:	4651      	mov	r1, sl
 8002230:	f7fe fc46 	bl	8000ac0 <__aeabi_fsub>
	  if(op_num_temp >= 0.0000){
 8002234:	4621      	mov	r1, r4
	  float op_num_temp = ((float)3.0 * ((float)adc_opamp * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 8002236:	9001      	str	r0, [sp, #4]
	  if(op_num_temp >= 0.0000){
 8002238:	f7fe fefe 	bl	8001038 <__aeabi_fcmpge>
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	b900      	cbnz	r0, 8002242 <main+0x54e>
		  op_num = 0.0000;
 8002240:	4623      	mov	r3, r4
 8002242:	4a50      	ldr	r2, [pc, #320]	; (8002384 <main+0x690>)
 8002244:	6013      	str	r3, [r2, #0]
	  float lin_num_temp = ((float)3.0 * ((float)adc_linear * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 8002246:	4b50      	ldr	r3, [pc, #320]	; (8002388 <main+0x694>)
 8002248:	8818      	ldrh	r0, [r3, #0]
 800224a:	f7fe fceb 	bl	8000c24 <__aeabi_ui2f>
 800224e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002252:	f7fe fd3f 	bl	8000cd4 <__aeabi_fmul>
 8002256:	4639      	mov	r1, r7
 8002258:	f7fe fd3c 	bl	8000cd4 <__aeabi_fmul>
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fd39 	bl	8000cd4 <__aeabi_fmul>
 8002262:	4631      	mov	r1, r6
 8002264:	f7fe fdea 	bl	8000e3c <__aeabi_fdiv>
 8002268:	4651      	mov	r1, sl
 800226a:	f7fe fc29 	bl	8000ac0 <__aeabi_fsub>
	  if(lin_num_temp >= 0.0000){
 800226e:	4621      	mov	r1, r4
	  float lin_num_temp = ((float)3.0 * ((float)adc_linear * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 8002270:	4682      	mov	sl, r0
	  if(lin_num_temp >= 0.0000){
 8002272:	f7fe fee1 	bl	8001038 <__aeabi_fcmpge>
 8002276:	b900      	cbnz	r0, 800227a <main+0x586>
		  lin_num = 0.0000;
 8002278:	46a2      	mov	sl, r4
 800227a:	4b44      	ldr	r3, [pc, #272]	; (800238c <main+0x698>)
 800227c:	f8c3 a000 	str.w	sl, [r3]
	  float swi_num_temp = ((float)3.0 * ((float)adc_switching * (float)5.0) * (float)vrefvalue)/((float)adc_vref * (float)4095);
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <main+0x69c>)
 8002282:	8818      	ldrh	r0, [r3, #0]
 8002284:	f7fe fcce 	bl	8000c24 <__aeabi_ui2f>
 8002288:	4942      	ldr	r1, [pc, #264]	; (8002394 <main+0x6a0>)
 800228a:	f7fe fd23 	bl	8000cd4 <__aeabi_fmul>
 800228e:	4639      	mov	r1, r7
 8002290:	f7fe fd20 	bl	8000cd4 <__aeabi_fmul>
 8002294:	4629      	mov	r1, r5
 8002296:	f7fe fd1d 	bl	8000cd4 <__aeabi_fmul>
 800229a:	4631      	mov	r1, r6
 800229c:	f7fe fdce 	bl	8000e3c <__aeabi_fdiv>
	  if(swi_num_temp >= 0.0000){
 80022a0:	4621      	mov	r1, r4
	  float swi_num_temp = ((float)3.0 * ((float)adc_switching * (float)5.0) * (float)vrefvalue)/((float)adc_vref * (float)4095);
 80022a2:	4605      	mov	r5, r0
	  if(swi_num_temp >= 0.0000){
 80022a4:	f7fe fec8 	bl	8001038 <__aeabi_fcmpge>
 80022a8:	b900      	cbnz	r0, 80022ac <main+0x5b8>
		  swi_num = 0.0000;
 80022aa:	4625      	mov	r5, r4
 80022ac:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <main+0x6a4>)
 80022ae:	601d      	str	r5, [r3, #0]
	  if(first_shot){
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <main+0x6a8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f43f aef5 	beq.w	80020a4 <main+0x3b0>
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80022ba:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80022be:	f8d8 0000 	ldr.w	r0, [r8]
 80022c2:	f7fe fd07 	bl	8000cd4 <__aeabi_fmul>
 80022c6:	4923      	ldr	r1, [pc, #140]	; (8002354 <main+0x660>)
 80022c8:	f7fe fbfc 	bl	8000ac4 <__addsf3>
 80022cc:	4659      	mov	r1, fp
 80022ce:	f7fe fd01 	bl	8000cd4 <__aeabi_fmul>
 80022d2:	4649      	mov	r1, r9
 80022d4:	f7fe fdb2 	bl	8000e3c <__aeabi_fdiv>
 80022d8:	f7fe fec2 	bl	8001060 <__aeabi_f2uiz>
 80022dc:	4603      	mov	r3, r0
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80022de:	2200      	movs	r2, #0
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80022e0:	491d      	ldr	r1, [pc, #116]	; (8002358 <main+0x664>)
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	800b      	strh	r3, [r1, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 80022e6:	481d      	ldr	r0, [pc, #116]	; (800235c <main+0x668>)
 80022e8:	4611      	mov	r1, r2
 80022ea:	f003 fdf9 	bl	8005ee0 <HAL_DAC_SetValue>
		  integral = 0;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <main+0x640>)
		  first_shot = 0;
 80022f0:	4a2a      	ldr	r2, [pc, #168]	; (800239c <main+0x6a8>)
		  integral = 0;
 80022f2:	601c      	str	r4, [r3, #0]
		  error = 0;
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <main+0x63c>)
 80022f6:	601c      	str	r4, [r3, #0]
		  derivative = 0;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <main+0x64c>)
 80022fa:	601c      	str	r4, [r3, #0]
		  first_shot = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	7013      	strb	r3, [r2, #0]
		  correctedvoltnum1 = voltnum1;
 8002300:	f8d8 3000 	ldr.w	r3, [r8]
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <main+0x65c>)
 8002306:	6013      	str	r3, [r2, #0]
		  first_shot = 0;
 8002308:	e731      	b.n	800216e <main+0x47a>
		  else if(correctedvoltnum1 < 0.0){
 800230a:	4628      	mov	r0, r5
 800230c:	2100      	movs	r1, #0
 800230e:	f7fe fe7f 	bl	8001010 <__aeabi_fcmplt>
			  correctedvoltnum1 = 0.0;
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <main+0x65c>)
		  else if(correctedvoltnum1 < 0.0){
 8002314:	b938      	cbnz	r0, 8002326 <main+0x632>
		  correctedvoltnum1 = voltnum1 - correction;
 8002316:	601d      	str	r5, [r3, #0]
 8002318:	e70f      	b.n	800213a <main+0x446>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	2140      	movs	r1, #64	; 0x40
 800231e:	4810      	ldr	r0, [pc, #64]	; (8002360 <main+0x66c>)
 8002320:	f004 f954 	bl	80065cc <HAL_GPIO_WritePin>
 8002324:	e739      	b.n	800219a <main+0x4a6>
			  correctedvoltnum1 = 0.0;
 8002326:	601c      	str	r4, [r3, #0]
 8002328:	e707      	b.n	800213a <main+0x446>
 800232a:	bf00      	nop
 800232c:	41400000 	.word	0x41400000
 8002330:	200003cc 	.word	0x200003cc
 8002334:	200006ac 	.word	0x200006ac
 8002338:	200003d0 	.word	0x200003d0
 800233c:	20000008 	.word	0x20000008
 8002340:	200003c8 	.word	0x200003c8
 8002344:	20000004 	.word	0x20000004
 8002348:	20000000 	.word	0x20000000
 800234c:	200003c0 	.word	0x200003c0
 8002350:	200003bc 	.word	0x200003bc
 8002354:	3de4d9c9 	.word	0x3de4d9c9
 8002358:	200007c8 	.word	0x200007c8
 800235c:	2000042c 	.word	0x2000042c
 8002360:	40020000 	.word	0x40020000
 8002364:	20000028 	.word	0x20000028
 8002368:	200003a0 	.word	0x200003a0
 800236c:	20000398 	.word	0x20000398
 8002370:	41a00000 	.word	0x41a00000
 8002374:	3e19999a 	.word	0x3e19999a
 8002378:	200003c4 	.word	0x200003c4
 800237c:	3eb33333 	.word	0x3eb33333
 8002380:	2000039c 	.word	0x2000039c
 8002384:	200006b8 	.word	0x200006b8
 8002388:	2000039a 	.word	0x2000039a
 800238c:	200006b4 	.word	0x200006b4
 8002390:	2000039e 	.word	0x2000039e
 8002394:	40a00000 	.word	0x40a00000
 8002398:	20000704 	.word	0x20000704
 800239c:	2000000c 	.word	0x2000000c

080023a0 <lcd_update_voltage>:
void lcd_update_voltage(uint8_t channel, float num){
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	4605      	mov	r5, r0
 80023a4:	b087      	sub	sp, #28
	snprintf(kpbuff, 6, "%.2f", num);
 80023a6:	4608      	mov	r0, r1
 80023a8:	f7fe f856 	bl	8000458 <__aeabi_f2d>
 80023ac:	4606      	mov	r6, r0
 80023ae:	460f      	mov	r7, r1
 80023b0:	4a9a      	ldr	r2, [pc, #616]	; (800261c <lcd_update_voltage+0x27c>)
 80023b2:	2106      	movs	r1, #6
 80023b4:	e9cd 6700 	strd	r6, r7, [sp]
 80023b8:	a804      	add	r0, sp, #16
 80023ba:	f008 fee3 	bl	800b184 <sniprintf>
	if(channel == 1){
 80023be:	2d01      	cmp	r5, #1
 80023c0:	d009      	beq.n	80023d6 <lcd_update_voltage+0x36>
	else if(channel == 2){
 80023c2:	2d02      	cmp	r5, #2
 80023c4:	f000 80cb 	beq.w	800255e <lcd_update_voltage+0x1be>
	else if(channel == 3){
 80023c8:	2d03      	cmp	r5, #3
 80023ca:	f000 8135 	beq.w	8002638 <lcd_update_voltage+0x298>
	else if(channel == 4){
 80023ce:	2d04      	cmp	r5, #4
 80023d0:	d068      	beq.n	80024a4 <lcd_update_voltage+0x104>
}
 80023d2:	b007      	add	sp, #28
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80023d6:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80023d8:	4a91      	ldr	r2, [pc, #580]	; (8002620 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80023da:	4892      	ldr	r0, [pc, #584]	; (8002624 <lcd_update_voltage+0x284>)
 80023dc:	ac03      	add	r4, sp, #12
 80023de:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80023e0:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80023e2:	214e      	movs	r1, #78	; 0x4e
 80023e4:	4622      	mov	r2, r4
 80023e6:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80023e8:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80023ea:	f004 f9c7 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80023ee:	2320      	movs	r3, #32
 80023f0:	4d8d      	ldr	r5, [pc, #564]	; (8002628 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80023f2:	011a      	lsls	r2, r3, #4
 80023f4:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80023fa:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80023fe:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002402:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002406:	f043 0309 	orr.w	r3, r3, #9
 800240a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800240e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002412:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002414:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002418:	4622      	mov	r2, r4
 800241a:	214e      	movs	r1, #78	; 0x4e
 800241c:	4638      	mov	r0, r7
 800241e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002420:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002424:	f004 f9aa 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002428:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e0      	bne.n	80023f2 <lcd_update_voltage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002430:	4a7b      	ldr	r2, [pc, #492]	; (8002620 <lcd_update_voltage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002432:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002434:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002436:	214e      	movs	r1, #78	; 0x4e
 8002438:	4622      	mov	r2, r4
 800243a:	487a      	ldr	r0, [pc, #488]	; (8002624 <lcd_update_voltage+0x284>)
 800243c:	9600      	str	r6, [sp, #0]
 800243e:	f004 f99d 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002442:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002446:	b30b      	cbz	r3, 800248c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002448:	2764      	movs	r7, #100	; 0x64
 800244a:	4e76      	ldr	r6, [pc, #472]	; (8002624 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 800244c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800244e:	011a      	lsls	r2, r3, #4
 8002450:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002456:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800245a:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800245e:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002462:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002466:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002468:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800246c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002470:	4622      	mov	r2, r4
 8002472:	214e      	movs	r1, #78	; 0x4e
 8002474:	4630      	mov	r0, r6
 8002476:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002478:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800247c:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002480:	f004 f97c 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002484:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e0      	bne.n	800244e <lcd_update_voltage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800248c:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800248e:	4867      	ldr	r0, [pc, #412]	; (800262c <lcd_update_voltage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002490:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002492:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002494:	4622      	mov	r2, r4
 8002496:	214e      	movs	r1, #78	; 0x4e
 8002498:	9500      	str	r5, [sp, #0]
 800249a:	4862      	ldr	r0, [pc, #392]	; (8002624 <lcd_update_voltage+0x284>)
 800249c:	f004 f96e 	bl	800677c <HAL_I2C_Master_Transmit>
}
 80024a0:	b007      	add	sp, #28
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80024a4:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80024a6:	4a62      	ldr	r2, [pc, #392]	; (8002630 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80024a8:	485e      	ldr	r0, [pc, #376]	; (8002624 <lcd_update_voltage+0x284>)
 80024aa:	ac03      	add	r4, sp, #12
 80024ac:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80024ae:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80024b0:	214e      	movs	r1, #78	; 0x4e
 80024b2:	4622      	mov	r2, r4
 80024b4:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80024b6:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80024b8:	f004 f960 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80024bc:	2320      	movs	r3, #32
 80024be:	4d5a      	ldr	r5, [pc, #360]	; (8002628 <lcd_update_voltage+0x288>)
	data_l = ((data<<4)&0xf0);
 80024c0:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80024c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80024c6:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80024ca:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80024cc:	f043 0309 	orr.w	r3, r3, #9
 80024d0:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80024d4:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80024d8:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80024dc:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80024e0:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80024e4:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80024e8:	2304      	movs	r3, #4
 80024ea:	4622      	mov	r2, r4
 80024ec:	214e      	movs	r1, #78	; 0x4e
 80024ee:	4638      	mov	r0, r7
 80024f0:	9600      	str	r6, [sp, #0]
 80024f2:	f004 f943 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80024f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e0      	bne.n	80024c0 <lcd_update_voltage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80024fe:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <lcd_update_voltage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002500:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002502:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002504:	214e      	movs	r1, #78	; 0x4e
 8002506:	4622      	mov	r2, r4
 8002508:	4846      	ldr	r0, [pc, #280]	; (8002624 <lcd_update_voltage+0x284>)
 800250a:	9600      	str	r6, [sp, #0]
 800250c:	f004 f936 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002510:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0b9      	beq.n	800248c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002518:	2764      	movs	r7, #100	; 0x64
 800251a:	4e42      	ldr	r6, [pc, #264]	; (8002624 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 800251c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800251e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002524:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002528:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800252a:	f043 0309 	orr.w	r3, r3, #9
 800252e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002532:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002536:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800253a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800253e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002542:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002546:	2304      	movs	r3, #4
 8002548:	4622      	mov	r2, r4
 800254a:	214e      	movs	r1, #78	; 0x4e
 800254c:	4630      	mov	r0, r6
 800254e:	9700      	str	r7, [sp, #0]
 8002550:	f004 f914 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002554:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e0      	bne.n	800251e <lcd_update_voltage+0x17e>
 800255c:	e796      	b.n	800248c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800255e:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002560:	4a34      	ldr	r2, [pc, #208]	; (8002634 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002562:	4830      	ldr	r0, [pc, #192]	; (8002624 <lcd_update_voltage+0x284>)
 8002564:	ac03      	add	r4, sp, #12
 8002566:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002568:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800256a:	214e      	movs	r1, #78	; 0x4e
 800256c:	4622      	mov	r2, r4
 800256e:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002570:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002572:	f004 f903 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002576:	2320      	movs	r3, #32
 8002578:	4d2b      	ldr	r5, [pc, #172]	; (8002628 <lcd_update_voltage+0x288>)
	data_u = (data&0xf0);
 800257a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002582:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002586:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800258a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800258e:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002592:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002596:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800259a:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800259e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025a0:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025a4:	214e      	movs	r1, #78	; 0x4e
 80025a6:	4622      	mov	r2, r4
 80025a8:	4638      	mov	r0, r7
 80025aa:	9600      	str	r6, [sp, #0]
 80025ac:	f004 f8e6 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80025b0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e0      	bne.n	800257a <lcd_update_voltage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025b8:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <lcd_update_voltage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025ba:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80025bc:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025be:	214e      	movs	r1, #78	; 0x4e
 80025c0:	4622      	mov	r2, r4
 80025c2:	4818      	ldr	r0, [pc, #96]	; (8002624 <lcd_update_voltage+0x284>)
 80025c4:	9600      	str	r6, [sp, #0]
 80025c6:	f004 f8d9 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80025ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f43f af5c 	beq.w	800248c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025d4:	2764      	movs	r7, #100	; 0x64
 80025d6:	4e13      	ldr	r6, [pc, #76]	; (8002624 <lcd_update_voltage+0x284>)
	while (*str) lcd_send_data (*str++);
 80025d8:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80025da:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80025dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80025e0:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025e2:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025e6:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025ea:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025ee:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025f2:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025f6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025fa:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025fe:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002600:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002604:	4622      	mov	r2, r4
 8002606:	214e      	movs	r1, #78	; 0x4e
 8002608:	4630      	mov	r0, r6
 800260a:	9700      	str	r7, [sp, #0]
 800260c:	f004 f8b6 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002610:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e0      	bne.n	80025da <lcd_update_voltage+0x23a>
 8002618:	e738      	b.n	800248c <lcd_update_voltage+0xec>
 800261a:	bf00      	nop
 800261c:	0800d6dc 	.word	0x0800d6dc
 8002620:	383c888c 	.word	0x383c888c
 8002624:	20000514 	.word	0x20000514
 8002628:	0800d6d4 	.word	0x0800d6d4
 800262c:	696d595d 	.word	0x696d595d
 8002630:	282ca8ac 	.word	0x282ca8ac
 8002634:	e8ec888c 	.word	0xe8ec888c
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002638:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800263a:	4a2e      	ldr	r2, [pc, #184]	; (80026f4 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800263c:	482e      	ldr	r0, [pc, #184]	; (80026f8 <lcd_update_voltage+0x358>)
 800263e:	ac03      	add	r4, sp, #12
 8002640:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002642:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002644:	214e      	movs	r1, #78	; 0x4e
 8002646:	4622      	mov	r2, r4
 8002648:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800264a:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800264c:	f004 f896 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002650:	2320      	movs	r3, #32
 8002652:	4d2a      	ldr	r5, [pc, #168]	; (80026fc <lcd_update_voltage+0x35c>)
	data_l = ((data<<4)&0xf0);
 8002654:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800265a:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800265e:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002660:	f043 0309 	orr.w	r3, r3, #9
 8002664:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002668:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800266c:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002670:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002674:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002678:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800267c:	2304      	movs	r3, #4
 800267e:	4622      	mov	r2, r4
 8002680:	214e      	movs	r1, #78	; 0x4e
 8002682:	4638      	mov	r0, r7
 8002684:	9600      	str	r6, [sp, #0]
 8002686:	f004 f879 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800268a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e0      	bne.n	8002654 <lcd_update_voltage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <lcd_update_voltage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002694:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002696:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002698:	214e      	movs	r1, #78	; 0x4e
 800269a:	4622      	mov	r2, r4
 800269c:	4816      	ldr	r0, [pc, #88]	; (80026f8 <lcd_update_voltage+0x358>)
 800269e:	9600      	str	r6, [sp, #0]
 80026a0:	f004 f86c 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80026a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f43f aeef 	beq.w	800248c <lcd_update_voltage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026ae:	2764      	movs	r7, #100	; 0x64
 80026b0:	4e11      	ldr	r6, [pc, #68]	; (80026f8 <lcd_update_voltage+0x358>)
	while (*str) lcd_send_data (*str++);
 80026b2:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 80026b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026bc:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026c0:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80026c4:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80026c8:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026cc:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026d0:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80026d4:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026d8:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80026da:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80026de:	214e      	movs	r1, #78	; 0x4e
 80026e0:	4622      	mov	r2, r4
 80026e2:	4630      	mov	r0, r6
 80026e4:	9700      	str	r7, [sp, #0]
 80026e6:	f004 f849 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80026ea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e0      	bne.n	80026b4 <lcd_update_voltage+0x314>
 80026f2:	e6cb      	b.n	800248c <lcd_update_voltage+0xec>
 80026f4:	787c989c 	.word	0x787c989c
 80026f8:	20000514 	.word	0x20000514
 80026fc:	0800d6d4 	.word	0x0800d6d4

08002700 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	4605      	mov	r5, r0
 8002704:	b087      	sub	sp, #28
	snprintf(kpbuff, 5, "%.2f", num);
 8002706:	4608      	mov	r0, r1
 8002708:	f7fd fea6 	bl	8000458 <__aeabi_f2d>
 800270c:	4606      	mov	r6, r0
 800270e:	460f      	mov	r7, r1
 8002710:	4a9a      	ldr	r2, [pc, #616]	; (800297c <lcd_update_amperage+0x27c>)
 8002712:	2105      	movs	r1, #5
 8002714:	e9cd 6700 	strd	r6, r7, [sp]
 8002718:	a804      	add	r0, sp, #16
 800271a:	f008 fd33 	bl	800b184 <sniprintf>
	if(channel == 1){
 800271e:	2d01      	cmp	r5, #1
 8002720:	d009      	beq.n	8002736 <lcd_update_amperage+0x36>
	else if(channel == 2){
 8002722:	2d02      	cmp	r5, #2
 8002724:	f000 80cb 	beq.w	80028be <lcd_update_amperage+0x1be>
	else if(channel == 3){
 8002728:	2d03      	cmp	r5, #3
 800272a:	f000 8135 	beq.w	8002998 <lcd_update_amperage+0x298>
	else if(channel == 4){
 800272e:	2d04      	cmp	r5, #4
 8002730:	d068      	beq.n	8002804 <lcd_update_amperage+0x104>
}
 8002732:	b007      	add	sp, #28
 8002734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002736:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002738:	4a91      	ldr	r2, [pc, #580]	; (8002980 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800273a:	4892      	ldr	r0, [pc, #584]	; (8002984 <lcd_update_amperage+0x284>)
 800273c:	ac03      	add	r4, sp, #12
 800273e:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002740:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002742:	214e      	movs	r1, #78	; 0x4e
 8002744:	4622      	mov	r2, r4
 8002746:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002748:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800274a:	f004 f817 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800274e:	2320      	movs	r3, #32
 8002750:	4d8d      	ldr	r5, [pc, #564]	; (8002988 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002752:	011a      	lsls	r2, r3, #4
 8002754:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 8002756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800275a:	f043 0c0d 	orr.w	ip, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800275e:	f042 000d 	orr.w	r0, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002762:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002766:	f043 0309 	orr.w	r3, r3, #9
 800276a:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800276e:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002772:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002774:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002778:	4622      	mov	r2, r4
 800277a:	214e      	movs	r1, #78	; 0x4e
 800277c:	4638      	mov	r0, r7
 800277e:	9600      	str	r6, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002780:	f88d c00c 	strb.w	ip, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002784:	f003 fffa 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002788:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e0      	bne.n	8002752 <lcd_update_amperage+0x52>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002790:	4a7b      	ldr	r2, [pc, #492]	; (8002980 <lcd_update_amperage+0x280>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002792:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002794:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002796:	214e      	movs	r1, #78	; 0x4e
 8002798:	4622      	mov	r2, r4
 800279a:	487a      	ldr	r0, [pc, #488]	; (8002984 <lcd_update_amperage+0x284>)
 800279c:	9600      	str	r6, [sp, #0]
 800279e:	f003 ffed 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80027a6:	b30b      	cbz	r3, 80027ec <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027a8:	2764      	movs	r7, #100	; 0x64
 80027aa:	4e76      	ldr	r6, [pc, #472]	; (8002984 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 80027ac:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 80027ae:	011a      	lsls	r2, r3, #4
 80027b0:	b2d2      	uxtb	r2, r2
	data_u = (data&0xf0);
 80027b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027b6:	f043 0109 	orr.w	r1, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027ba:	f042 0009 	orr.w	r0, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027be:	f043 0e0d 	orr.w	lr, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027c2:	f042 0c0d 	orr.w	ip, r2, #13
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027c6:	2304      	movs	r3, #4
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80027c8:	f88d 100d 	strb.w	r1, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80027cc:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027d0:	4622      	mov	r2, r4
 80027d2:	214e      	movs	r1, #78	; 0x4e
 80027d4:	4630      	mov	r0, r6
 80027d6:	9700      	str	r7, [sp, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027d8:	f88d e00c 	strb.w	lr, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80027dc:	f88d c00e 	strb.w	ip, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027e0:	f003 ffcc 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80027e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e0      	bne.n	80027ae <lcd_update_amperage+0xae>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027ec:	2564      	movs	r5, #100	; 0x64
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027ee:	4867      	ldr	r0, [pc, #412]	; (800298c <lcd_update_amperage+0x28c>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027f0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80027f2:	9003      	str	r0, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027f4:	4622      	mov	r2, r4
 80027f6:	214e      	movs	r1, #78	; 0x4e
 80027f8:	9500      	str	r5, [sp, #0]
 80027fa:	4862      	ldr	r0, [pc, #392]	; (8002984 <lcd_update_amperage+0x284>)
 80027fc:	f003 ffbe 	bl	800677c <HAL_I2C_Master_Transmit>
}
 8002800:	b007      	add	sp, #28
 8002802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002804:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002806:	4a62      	ldr	r2, [pc, #392]	; (8002990 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002808:	485e      	ldr	r0, [pc, #376]	; (8002984 <lcd_update_amperage+0x284>)
 800280a:	ac03      	add	r4, sp, #12
 800280c:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800280e:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002810:	214e      	movs	r1, #78	; 0x4e
 8002812:	4622      	mov	r2, r4
 8002814:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002816:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002818:	f003 ffb0 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800281c:	2320      	movs	r3, #32
 800281e:	4d5a      	ldr	r5, [pc, #360]	; (8002988 <lcd_update_amperage+0x288>)
	data_l = ((data<<4)&0xf0);
 8002820:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002826:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 800282a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800282c:	f043 0309 	orr.w	r3, r3, #9
 8002830:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002834:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002838:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800283c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002840:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002844:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002848:	2304      	movs	r3, #4
 800284a:	4622      	mov	r2, r4
 800284c:	214e      	movs	r1, #78	; 0x4e
 800284e:	4638      	mov	r0, r7
 8002850:	9600      	str	r6, [sp, #0]
 8002852:	f003 ff93 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002856:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e0      	bne.n	8002820 <lcd_update_amperage+0x120>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800285e:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <lcd_update_amperage+0x290>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002860:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002862:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002864:	214e      	movs	r1, #78	; 0x4e
 8002866:	4622      	mov	r2, r4
 8002868:	4846      	ldr	r0, [pc, #280]	; (8002984 <lcd_update_amperage+0x284>)
 800286a:	9600      	str	r6, [sp, #0]
 800286c:	f003 ff86 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002870:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0b9      	beq.n	80027ec <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002878:	2764      	movs	r7, #100	; 0x64
 800287a:	4e42      	ldr	r6, [pc, #264]	; (8002984 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 800287c:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800287e:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002884:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002888:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800288a:	f043 0309 	orr.w	r3, r3, #9
 800288e:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002892:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002896:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800289a:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800289e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028a2:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028a6:	2304      	movs	r3, #4
 80028a8:	4622      	mov	r2, r4
 80028aa:	214e      	movs	r1, #78	; 0x4e
 80028ac:	4630      	mov	r0, r6
 80028ae:	9700      	str	r7, [sp, #0]
 80028b0:	f003 ff64 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e0      	bne.n	800287e <lcd_update_amperage+0x17e>
 80028bc:	e796      	b.n	80027ec <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028be:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028c0:	4a34      	ldr	r2, [pc, #208]	; (8002994 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028c2:	4830      	ldr	r0, [pc, #192]	; (8002984 <lcd_update_amperage+0x284>)
 80028c4:	ac03      	add	r4, sp, #12
 80028c6:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028c8:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028ca:	214e      	movs	r1, #78	; 0x4e
 80028cc:	4622      	mov	r2, r4
 80028ce:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028d0:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028d2:	f003 ff53 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80028d6:	2320      	movs	r3, #32
 80028d8:	4d2b      	ldr	r5, [pc, #172]	; (8002988 <lcd_update_amperage+0x288>)
	data_u = (data&0xf0);
 80028da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028e2:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028e6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80028ea:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80028ee:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028f2:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80028f6:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80028fa:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028fe:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002900:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002904:	214e      	movs	r1, #78	; 0x4e
 8002906:	4622      	mov	r2, r4
 8002908:	4638      	mov	r0, r7
 800290a:	9600      	str	r6, [sp, #0]
 800290c:	f003 ff36 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002910:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e0      	bne.n	80028da <lcd_update_amperage+0x1da>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002918:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <lcd_update_amperage+0x294>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800291a:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800291c:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800291e:	214e      	movs	r1, #78	; 0x4e
 8002920:	4622      	mov	r2, r4
 8002922:	4818      	ldr	r0, [pc, #96]	; (8002984 <lcd_update_amperage+0x284>)
 8002924:	9600      	str	r6, [sp, #0]
 8002926:	f003 ff29 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 800292a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f43f af5c 	beq.w	80027ec <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002934:	2764      	movs	r7, #100	; 0x64
 8002936:	4e13      	ldr	r6, [pc, #76]	; (8002984 <lcd_update_amperage+0x284>)
	while (*str) lcd_send_data (*str++);
 8002938:	ad04      	add	r5, sp, #16
	data_l = ((data<<4)&0xf0);
 800293a:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 800293c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002940:	b2d2      	uxtb	r2, r2
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002942:	f043 010d 	orr.w	r1, r3, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002946:	f042 000d 	orr.w	r0, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800294a:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800294e:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002952:	f042 0109 	orr.w	r1, r2, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002956:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800295a:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800295e:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002960:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002964:	4622      	mov	r2, r4
 8002966:	214e      	movs	r1, #78	; 0x4e
 8002968:	4630      	mov	r0, r6
 800296a:	9700      	str	r7, [sp, #0]
 800296c:	f003 ff06 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002970:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e0      	bne.n	800293a <lcd_update_amperage+0x23a>
 8002978:	e738      	b.n	80027ec <lcd_update_amperage+0xec>
 800297a:	bf00      	nop
 800297c:	0800d6dc 	.word	0x0800d6dc
 8002980:	383cc8cc 	.word	0x383cc8cc
 8002984:	20000514 	.word	0x20000514
 8002988:	0800d6d4 	.word	0x0800d6d4
 800298c:	191d494d 	.word	0x191d494d
 8002990:	282ce8ec 	.word	0x282ce8ec
 8002994:	e8ecc8cc 	.word	0xe8ecc8cc
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002998:	2664      	movs	r6, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800299a:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800299c:	482e      	ldr	r0, [pc, #184]	; (8002a58 <lcd_update_amperage+0x358>)
 800299e:	ac03      	add	r4, sp, #12
 80029a0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029a2:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029a4:	214e      	movs	r1, #78	; 0x4e
 80029a6:	4622      	mov	r2, r4
 80029a8:	9600      	str	r6, [sp, #0]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029aa:	4607      	mov	r7, r0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029ac:	f003 fee6 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029b0:	2320      	movs	r3, #32
 80029b2:	4d2a      	ldr	r5, [pc, #168]	; (8002a5c <lcd_update_amperage+0x35c>)
	data_l = ((data<<4)&0xf0);
 80029b4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 80029b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029ba:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 80029be:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80029c0:	f043 0309 	orr.w	r3, r3, #9
 80029c4:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029c8:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029cc:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80029d0:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80029d4:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80029d8:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029dc:	2304      	movs	r3, #4
 80029de:	4622      	mov	r2, r4
 80029e0:	214e      	movs	r1, #78	; 0x4e
 80029e2:	4638      	mov	r0, r7
 80029e4:	9600      	str	r6, [sp, #0]
 80029e6:	f003 fec9 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 80029ea:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e0      	bne.n	80029b4 <lcd_update_amperage+0x2b4>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <lcd_update_amperage+0x354>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029f4:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80029f6:	9203      	str	r2, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80029f8:	214e      	movs	r1, #78	; 0x4e
 80029fa:	4622      	mov	r2, r4
 80029fc:	4816      	ldr	r0, [pc, #88]	; (8002a58 <lcd_update_amperage+0x358>)
 80029fe:	9600      	str	r6, [sp, #0]
 8002a00:	f003 febc 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a04:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f43f aeef 	beq.w	80027ec <lcd_update_amperage+0xec>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a0e:	2764      	movs	r7, #100	; 0x64
 8002a10:	4e11      	ldr	r6, [pc, #68]	; (8002a58 <lcd_update_amperage+0x358>)
	while (*str) lcd_send_data (*str++);
 8002a12:	ad04      	add	r5, sp, #16
	data_u = (data&0xf0);
 8002a14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a1c:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a20:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002a24:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002a28:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a2c:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a30:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002a34:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a38:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002a3a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a3e:	214e      	movs	r1, #78	; 0x4e
 8002a40:	4622      	mov	r2, r4
 8002a42:	4630      	mov	r0, r6
 8002a44:	9700      	str	r7, [sp, #0]
 8002a46:	f003 fe99 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002a4a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1e0      	bne.n	8002a14 <lcd_update_amperage+0x314>
 8002a52:	e6cb      	b.n	80027ec <lcd_update_amperage+0xec>
 8002a54:	787cd8dc 	.word	0x787cd8dc
 8002a58:	20000514 	.word	0x20000514
 8002a5c:	0800d6d4 	.word	0x0800d6d4

08002a60 <lcd_psu_update>:
void lcd_psu_update(void){
 8002a60:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a62:	2464      	movs	r4, #100	; 0x64
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a64:	49a1      	ldr	r1, [pc, #644]	; (8002cec <lcd_psu_update+0x28c>)
void lcd_psu_update(void){
 8002a66:	b084      	sub	sp, #16
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a68:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002a6a:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002a6c:	48a0      	ldr	r0, [pc, #640]	; (8002cf0 <lcd_psu_update+0x290>)
 8002a6e:	214e      	movs	r1, #78	; 0x4e
 8002a70:	aa03      	add	r2, sp, #12
 8002a72:	9400      	str	r4, [sp, #0]
 8002a74:	f003 fe82 	bl	800677c <HAL_I2C_Master_Transmit>
	if(kpenum == WAIT){
 8002a78:	4b9e      	ldr	r3, [pc, #632]	; (8002cf4 <lcd_psu_update+0x294>)
 8002a7a:	781d      	ldrb	r5, [r3, #0]
 8002a7c:	b165      	cbz	r5, 8002a98 <lcd_psu_update+0x38>
	else if(kpenum == V2){
 8002a7e:	2d03      	cmp	r5, #3
 8002a80:	f000 8152 	beq.w	8002d28 <lcd_psu_update+0x2c8>
	else if(kpenum == V1){
 8002a84:	2d01      	cmp	r5, #1
 8002a86:	d032      	beq.n	8002aee <lcd_psu_update+0x8e>
	else if(kpenum == A2){
 8002a88:	2d04      	cmp	r5, #4
 8002a8a:	f000 819d 	beq.w	8002dc8 <lcd_psu_update+0x368>
	else if(kpenum == A1){
 8002a8e:	2d02      	cmp	r5, #2
 8002a90:	f000 81ea 	beq.w	8002e68 <lcd_psu_update+0x408>
}
 8002a94:	b004      	add	sp, #16
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
		lcd_update_voltage(1,voltnum2);
 8002a98:	4b97      	ldr	r3, [pc, #604]	; (8002cf8 <lcd_psu_update+0x298>)
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	f7ff fc7f 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum2);
 8002aa2:	4b96      	ldr	r3, [pc, #600]	; (8002cfc <lcd_psu_update+0x29c>)
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	6819      	ldr	r1, [r3, #0]
 8002aa8:	f7ff fe2a 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002aac:	4b94      	ldr	r3, [pc, #592]	; (8002d00 <lcd_psu_update+0x2a0>)
 8002aae:	2002      	movs	r0, #2
 8002ab0:	6819      	ldr	r1, [r3, #0]
 8002ab2:	f7ff fc75 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002ab6:	4b93      	ldr	r3, [pc, #588]	; (8002d04 <lcd_psu_update+0x2a4>)
 8002ab8:	2002      	movs	r0, #2
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	f7ff fe20 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002ac0:	4b91      	ldr	r3, [pc, #580]	; (8002d08 <lcd_psu_update+0x2a8>)
 8002ac2:	2003      	movs	r0, #3
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	f7ff fc6b 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum1);
 8002aca:	4b90      	ldr	r3, [pc, #576]	; (8002d0c <lcd_psu_update+0x2ac>)
 8002acc:	2003      	movs	r0, #3
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	f7ff fe16 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <lcd_psu_update+0x2b0>)
 8002ad6:	2004      	movs	r0, #4
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	f7ff fc61 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002ade:	2004      	movs	r0, #4
 8002ae0:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <lcd_psu_update+0x2b4>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
}
 8002ae4:	b004      	add	sp, #16
 8002ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		lcd_update_amperage(4,cur_num);
 8002aea:	f7ff be09 	b.w	8002700 <lcd_update_amperage>
		lcd_update_voltage(1,voltnum2);
 8002aee:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <lcd_psu_update+0x298>)
 8002af0:	4628      	mov	r0, r5
 8002af2:	6819      	ldr	r1, [r3, #0]
 8002af4:	f7ff fc54 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum2);
 8002af8:	4b80      	ldr	r3, [pc, #512]	; (8002cfc <lcd_psu_update+0x29c>)
 8002afa:	4628      	mov	r0, r5
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	f7ff fdff 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <lcd_psu_update+0x2a0>)
 8002b04:	2002      	movs	r0, #2
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	f7ff fc4a 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002b0c:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <lcd_psu_update+0x2a4>)
 8002b0e:	2002      	movs	r0, #2
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	f7ff fdf5 	bl	8002700 <lcd_update_amperage>
		lcd_update_amperage(3,ampnum1);
 8002b16:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <lcd_psu_update+0x2ac>)
 8002b18:	2003      	movs	r0, #3
 8002b1a:	6819      	ldr	r1, [r3, #0]
 8002b1c:	f7ff fdf0 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002b20:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <lcd_psu_update+0x2b0>)
 8002b22:	2004      	movs	r0, #4
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	f7ff fc3b 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002b2a:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <lcd_psu_update+0x2b4>)
 8002b2c:	2004      	movs	r0, #4
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	f7ff fde6 	bl	8002700 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b34:	4978      	ldr	r1, [pc, #480]	; (8002d18 <lcd_psu_update+0x2b8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b36:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b38:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b3a:	486d      	ldr	r0, [pc, #436]	; (8002cf0 <lcd_psu_update+0x290>)
 8002b3c:	214e      	movs	r1, #78	; 0x4e
 8002b3e:	aa03      	add	r2, sp, #12
 8002b40:	9400      	str	r4, [sp, #0]
 8002b42:	f003 fe1b 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b46:	2320      	movs	r3, #32
 8002b48:	4d74      	ldr	r5, [pc, #464]	; (8002d1c <lcd_psu_update+0x2bc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b4a:	4e69      	ldr	r6, [pc, #420]	; (8002cf0 <lcd_psu_update+0x290>)
	data_l = ((data<<4)&0xf0);
 8002b4c:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b52:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002b56:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002b58:	f043 0309 	orr.w	r3, r3, #9
 8002b5c:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b60:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b64:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002b68:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002b6c:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002b70:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b74:	2304      	movs	r3, #4
 8002b76:	214e      	movs	r1, #78	; 0x4e
 8002b78:	4630      	mov	r0, r6
 8002b7a:	9400      	str	r4, [sp, #0]
 8002b7c:	aa03      	add	r2, sp, #12
 8002b7e:	f003 fdfd 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002b82:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e0      	bne.n	8002b4c <lcd_psu_update+0xec>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b8a:	4963      	ldr	r1, [pc, #396]	; (8002d18 <lcd_psu_update+0x2b8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	aa03      	add	r2, sp, #12
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b90:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002b92:	4857      	ldr	r0, [pc, #348]	; (8002cf0 <lcd_psu_update+0x290>)
 8002b94:	214e      	movs	r1, #78	; 0x4e
 8002b96:	9400      	str	r4, [sp, #0]
 8002b98:	f003 fdf0 	bl	800677c <HAL_I2C_Master_Transmit>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002b9c:	4960      	ldr	r1, [pc, #384]	; (8002d20 <lcd_psu_update+0x2c0>)
		if(keypadarr[0] != 'z'){
 8002b9e:	4d61      	ldr	r5, [pc, #388]	; (8002d24 <lcd_psu_update+0x2c4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ba0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002ba2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ba4:	4852      	ldr	r0, [pc, #328]	; (8002cf0 <lcd_psu_update+0x290>)
 8002ba6:	214e      	movs	r1, #78	; 0x4e
 8002ba8:	aa03      	add	r2, sp, #12
 8002baa:	9400      	str	r4, [sp, #0]
 8002bac:	f003 fde6 	bl	800677c <HAL_I2C_Master_Transmit>
		if(keypadarr[0] != 'z'){
 8002bb0:	782b      	ldrb	r3, [r5, #0]
 8002bb2:	2b7a      	cmp	r3, #122	; 0x7a
 8002bb4:	d01a      	beq.n	8002bec <lcd_psu_update+0x18c>
	data_u = (data&0xf0);
 8002bb6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bbe:	f042 010d 	orr.w	r1, r2, #13
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bc2:	f043 000d 	orr.w	r0, r3, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bc6:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bca:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bce:	f043 0109 	orr.w	r1, r3, #9
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002bd2:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002bd6:	f88d 000e 	strb.w	r0, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002bda:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bde:	2304      	movs	r3, #4
 8002be0:	214e      	movs	r1, #78	; 0x4e
 8002be2:	4843      	ldr	r0, [pc, #268]	; (8002cf0 <lcd_psu_update+0x290>)
 8002be4:	9400      	str	r4, [sp, #0]
 8002be6:	aa03      	add	r2, sp, #12
 8002be8:	f003 fdc8 	bl	800677c <HAL_I2C_Master_Transmit>
		if(keypadarr[1] != 'z'){
 8002bec:	786b      	ldrb	r3, [r5, #1]
 8002bee:	2b7a      	cmp	r3, #122	; 0x7a
 8002bf0:	d01b      	beq.n	8002c2a <lcd_psu_update+0x1ca>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002bf2:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8002bf4:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002bfa:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002bfe:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c00:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c04:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c08:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c0c:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c10:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c14:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c18:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	214e      	movs	r1, #78	; 0x4e
 8002c20:	4833      	ldr	r0, [pc, #204]	; (8002cf0 <lcd_psu_update+0x290>)
 8002c22:	aa03      	add	r2, sp, #12
 8002c24:	9400      	str	r4, [sp, #0]
 8002c26:	f003 fda9 	bl	800677c <HAL_I2C_Master_Transmit>
		if(keypadarr[2] != 'z'){
 8002c2a:	78ab      	ldrb	r3, [r5, #2]
 8002c2c:	2b7a      	cmp	r3, #122	; 0x7a
 8002c2e:	d01b      	beq.n	8002c68 <lcd_psu_update+0x208>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c30:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8002c32:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c38:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002c3c:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c3e:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c42:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c46:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c4a:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c4e:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c52:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c56:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	214e      	movs	r1, #78	; 0x4e
 8002c5e:	4824      	ldr	r0, [pc, #144]	; (8002cf0 <lcd_psu_update+0x290>)
 8002c60:	aa03      	add	r2, sp, #12
 8002c62:	9400      	str	r4, [sp, #0]
 8002c64:	f003 fd8a 	bl	800677c <HAL_I2C_Master_Transmit>
		if(keypadarr[3] != 'z'){
 8002c68:	78eb      	ldrb	r3, [r5, #3]
 8002c6a:	2b7a      	cmp	r3, #122	; 0x7a
 8002c6c:	d01b      	beq.n	8002ca6 <lcd_psu_update+0x246>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c6e:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8002c70:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c76:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002c7a:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c7c:	f043 0309 	orr.w	r3, r3, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002c80:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c84:	f042 010d 	orr.w	r1, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c88:	f042 0209 	orr.w	r2, r2, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002c8c:	f88d 100e 	strb.w	r1, [sp, #14]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002c90:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002c94:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002c98:	2304      	movs	r3, #4
 8002c9a:	214e      	movs	r1, #78	; 0x4e
 8002c9c:	4814      	ldr	r0, [pc, #80]	; (8002cf0 <lcd_psu_update+0x290>)
 8002c9e:	aa03      	add	r2, sp, #12
 8002ca0:	9400      	str	r4, [sp, #0]
 8002ca2:	f003 fd6b 	bl	800677c <HAL_I2C_Master_Transmit>
		if(keypadarr[4] != 'z'){
 8002ca6:	792b      	ldrb	r3, [r5, #4]
 8002ca8:	2b7a      	cmp	r3, #122	; 0x7a
 8002caa:	f43f aef3 	beq.w	8002a94 <lcd_psu_update+0x34>
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cae:	2464      	movs	r4, #100	; 0x64
	data_l = ((data<<4)&0xf0);
 8002cb0:	0119      	lsls	r1, r3, #4
	data_u = (data&0xf0);
 8002cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002cb6:	b2c9      	uxtb	r1, r1
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002cb8:	f043 000d 	orr.w	r0, r3, #13
 8002cbc:	f88d 000c 	strb.w	r0, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002cc0:	f043 0309 	orr.w	r3, r3, #9
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cc4:	f041 0009 	orr.w	r0, r1, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cc8:	f041 050d 	orr.w	r5, r1, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ccc:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002cd0:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	214e      	movs	r1, #78	; 0x4e
 8002cd8:	aa03      	add	r2, sp, #12
 8002cda:	9400      	str	r4, [sp, #0]
 8002cdc:	4804      	ldr	r0, [pc, #16]	; (8002cf0 <lcd_psu_update+0x290>)
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002cde:	f88d 500e 	strb.w	r5, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ce2:	f003 fd4b 	bl	800677c <HAL_I2C_Master_Transmit>
}
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
 8002cea:	bf00      	nop
 8002cec:	c8cc080c 	.word	0xc8cc080c
 8002cf0:	20000514 	.word	0x20000514
 8002cf4:	200006b1 	.word	0x200006b1
 8002cf8:	200007d0 	.word	0x200007d0
 8002cfc:	200003b4 	.word	0x200003b4
 8002d00:	20000700 	.word	0x20000700
 8002d04:	200006fc 	.word	0x200006fc
 8002d08:	200007cc 	.word	0x200007cc
 8002d0c:	200003b0 	.word	0x200003b0
 8002d10:	200006b4 	.word	0x200006b4
 8002d14:	200003c4 	.word	0x200003c4
 8002d18:	787c989c 	.word	0x787c989c
 8002d1c:	0800d6d4 	.word	0x0800d6d4
 8002d20:	f8fc080c 	.word	0xf8fc080c
 8002d24:	20000010 	.word	0x20000010
		lcd_update_amperage(1,ampnum2);
 8002d28:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <lcd_psu_update+0x4a8>)
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	f7ff fce7 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <lcd_psu_update+0x4ac>)
 8002d34:	2002      	movs	r0, #2
 8002d36:	6819      	ldr	r1, [r3, #0]
 8002d38:	f7ff fb32 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002d3c:	4b74      	ldr	r3, [pc, #464]	; (8002f10 <lcd_psu_update+0x4b0>)
 8002d3e:	2002      	movs	r0, #2
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	f7ff fcdd 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002d46:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <lcd_psu_update+0x4b4>)
 8002d48:	4628      	mov	r0, r5
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	f7ff fb28 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum1);
 8002d50:	4b71      	ldr	r3, [pc, #452]	; (8002f18 <lcd_psu_update+0x4b8>)
 8002d52:	4628      	mov	r0, r5
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	f7ff fcd3 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <lcd_psu_update+0x4bc>)
 8002d5c:	2004      	movs	r0, #4
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	f7ff fb1e 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002d64:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <lcd_psu_update+0x4c0>)
 8002d66:	2004      	movs	r0, #4
 8002d68:	6819      	ldr	r1, [r3, #0]
 8002d6a:	f7ff fcc9 	bl	8002700 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d6e:	496d      	ldr	r1, [pc, #436]	; (8002f24 <lcd_psu_update+0x4c4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d70:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002d72:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d74:	486c      	ldr	r0, [pc, #432]	; (8002f28 <lcd_psu_update+0x4c8>)
 8002d76:	214e      	movs	r1, #78	; 0x4e
 8002d78:	aa03      	add	r2, sp, #12
 8002d7a:	9400      	str	r4, [sp, #0]
 8002d7c:	f003 fcfe 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002d80:	2320      	movs	r3, #32
 8002d82:	4d6a      	ldr	r5, [pc, #424]	; (8002f2c <lcd_psu_update+0x4cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002d84:	4e68      	ldr	r6, [pc, #416]	; (8002f28 <lcd_psu_update+0x4c8>)
	data_u = (data&0xf0);
 8002d86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	b2db      	uxtb	r3, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d8e:	f042 010d 	orr.w	r1, r2, #13
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d92:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002d96:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002d9a:	f88d 200d 	strb.w	r2, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002d9e:	f043 010d 	orr.w	r1, r3, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002da2:	f043 0209 	orr.w	r2, r3, #9
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002da6:	f88d 100e 	strb.w	r1, [sp, #14]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002daa:	2304      	movs	r3, #4
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002dac:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002db0:	214e      	movs	r1, #78	; 0x4e
 8002db2:	4630      	mov	r0, r6
 8002db4:	9400      	str	r4, [sp, #0]
 8002db6:	aa03      	add	r2, sp, #12
 8002db8:	f003 fce0 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002dbc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e0      	bne.n	8002d86 <lcd_psu_update+0x326>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002dc4:	4957      	ldr	r1, [pc, #348]	; (8002f24 <lcd_psu_update+0x4c4>)
 8002dc6:	e6e1      	b.n	8002b8c <lcd_psu_update+0x12c>
		lcd_update_voltage(1,voltnum2);
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <lcd_psu_update+0x4d0>)
 8002dca:	2001      	movs	r0, #1
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	f7ff fae7 	bl	80023a0 <lcd_update_voltage>
		lcd_update_voltage(2,slin_num);
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <lcd_psu_update+0x4ac>)
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	f7ff fae2 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002ddc:	4b4c      	ldr	r3, [pc, #304]	; (8002f10 <lcd_psu_update+0x4b0>)
 8002dde:	2002      	movs	r0, #2
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	f7ff fc8d 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <lcd_psu_update+0x4b4>)
 8002de8:	2003      	movs	r0, #3
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	f7ff fad8 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum1);
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <lcd_psu_update+0x4b8>)
 8002df2:	2003      	movs	r0, #3
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	f7ff fc83 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(4,lin_num);
 8002dfa:	4b48      	ldr	r3, [pc, #288]	; (8002f1c <lcd_psu_update+0x4bc>)
 8002dfc:	4628      	mov	r0, r5
 8002dfe:	6819      	ldr	r1, [r3, #0]
 8002e00:	f7ff face 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <lcd_psu_update+0x4c0>)
 8002e06:	4628      	mov	r0, r5
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	f7ff fc79 	bl	8002700 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e0e:	4949      	ldr	r1, [pc, #292]	; (8002f34 <lcd_psu_update+0x4d4>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e10:	462b      	mov	r3, r5
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e12:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e14:	4844      	ldr	r0, [pc, #272]	; (8002f28 <lcd_psu_update+0x4c8>)
 8002e16:	214e      	movs	r1, #78	; 0x4e
 8002e18:	aa03      	add	r2, sp, #12
 8002e1a:	9400      	str	r4, [sp, #0]
 8002e1c:	f003 fcae 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e20:	2320      	movs	r3, #32
 8002e22:	4d42      	ldr	r5, [pc, #264]	; (8002f2c <lcd_psu_update+0x4cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e24:	4e40      	ldr	r6, [pc, #256]	; (8002f28 <lcd_psu_update+0x4c8>)
	data_l = ((data<<4)&0xf0);
 8002e26:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e2c:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002e30:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002e32:	f043 0309 	orr.w	r3, r3, #9
 8002e36:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e3a:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e3e:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002e42:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002e46:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002e4a:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002e4e:	2304      	movs	r3, #4
 8002e50:	214e      	movs	r1, #78	; 0x4e
 8002e52:	4630      	mov	r0, r6
 8002e54:	9400      	str	r4, [sp, #0]
 8002e56:	aa03      	add	r2, sp, #12
 8002e58:	f003 fc90 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002e5c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e0      	bne.n	8002e26 <lcd_psu_update+0x3c6>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002e64:	4933      	ldr	r1, [pc, #204]	; (8002f34 <lcd_psu_update+0x4d4>)
 8002e66:	e691      	b.n	8002b8c <lcd_psu_update+0x12c>
		lcd_update_voltage(1,voltnum2);
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <lcd_psu_update+0x4d0>)
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	f7ff fa97 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum2);
 8002e72:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <lcd_psu_update+0x4a8>)
 8002e74:	2001      	movs	r0, #1
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	f7ff fc42 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(2,slin_num);
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <lcd_psu_update+0x4ac>)
 8002e7e:	4628      	mov	r0, r5
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	f7ff fa8d 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(2,scur_num);
 8002e86:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <lcd_psu_update+0x4b0>)
 8002e88:	4628      	mov	r0, r5
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	f7ff fc38 	bl	8002700 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum1);
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <lcd_psu_update+0x4b4>)
 8002e92:	2003      	movs	r0, #3
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	f7ff fa83 	bl	80023a0 <lcd_update_voltage>
		lcd_update_voltage(4,lin_num);
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <lcd_psu_update+0x4bc>)
 8002e9c:	2004      	movs	r0, #4
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	f7ff fa7e 	bl	80023a0 <lcd_update_voltage>
		lcd_update_amperage(4,cur_num);
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <lcd_psu_update+0x4c0>)
 8002ea6:	2004      	movs	r0, #4
 8002ea8:	6819      	ldr	r1, [r3, #0]
 8002eaa:	f7ff fc29 	bl	8002700 <lcd_update_amperage>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002eae:	4922      	ldr	r1, [pc, #136]	; (8002f38 <lcd_psu_update+0x4d8>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eb0:	2304      	movs	r3, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002eb2:	9103      	str	r1, [sp, #12]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eb4:	481c      	ldr	r0, [pc, #112]	; (8002f28 <lcd_psu_update+0x4c8>)
 8002eb6:	214e      	movs	r1, #78	; 0x4e
 8002eb8:	aa03      	add	r2, sp, #12
 8002eba:	9400      	str	r4, [sp, #0]
 8002ebc:	f003 fc5e 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	4d1a      	ldr	r5, [pc, #104]	; (8002f2c <lcd_psu_update+0x4cc>)
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002ec4:	4e18      	ldr	r6, [pc, #96]	; (8002f28 <lcd_psu_update+0x4c8>)
	data_l = ((data<<4)&0xf0);
 8002ec6:	011a      	lsls	r2, r3, #4
	data_u = (data&0xf0);
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ecc:	f043 010d 	orr.w	r1, r3, #13
	data_l = ((data<<4)&0xf0);
 8002ed0:	b2d2      	uxtb	r2, r2
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002ed2:	f043 0309 	orr.w	r3, r3, #9
 8002ed6:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002eda:	f042 030d 	orr.w	r3, r2, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002ede:	f042 0209 	orr.w	r2, r2, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002ee2:	f88d 100c 	strb.w	r1, [sp, #12]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002ee6:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002eea:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002eee:	2304      	movs	r3, #4
 8002ef0:	214e      	movs	r1, #78	; 0x4e
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	9400      	str	r4, [sp, #0]
 8002ef6:	aa03      	add	r2, sp, #12
 8002ef8:	f003 fc40 	bl	800677c <HAL_I2C_Master_Transmit>
	while (*str) lcd_send_data (*str++);
 8002efc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e0      	bne.n	8002ec6 <lcd_psu_update+0x466>
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <lcd_psu_update+0x4d8>)
 8002f06:	e641      	b.n	8002b8c <lcd_psu_update+0x12c>
 8002f08:	200003b4 	.word	0x200003b4
 8002f0c:	20000700 	.word	0x20000700
 8002f10:	200006fc 	.word	0x200006fc
 8002f14:	200007cc 	.word	0x200007cc
 8002f18:	200003b0 	.word	0x200003b0
 8002f1c:	200006b4 	.word	0x200006b4
 8002f20:	200003c4 	.word	0x200003c4
 8002f24:	383c888c 	.word	0x383c888c
 8002f28:	20000514 	.word	0x20000514
 8002f2c:	0800d6d4 	.word	0x0800d6d4
 8002f30:	200007d0 	.word	0x200007d0
 8002f34:	383cc8cc 	.word	0x383cc8cc
 8002f38:	787cd8dc 	.word	0x787cd8dc

08002f3c <translatekeypad>:
float translatekeypad(void){
 8002f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(int i = 0; i < keypadlength; i++){
 8002f40:	4bb4      	ldr	r3, [pc, #720]	; (8003214 <translatekeypad+0x2d8>)
 8002f42:	781d      	ldrb	r5, [r3, #0]
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	f000 818e 	beq.w	8003266 <translatekeypad+0x32a>
		if(keypadarr[i] == '.'){
 8002f4a:	4eb3      	ldr	r6, [pc, #716]	; (8003218 <translatekeypad+0x2dc>)
 8002f4c:	f896 8000 	ldrb.w	r8, [r6]
 8002f50:	f1b8 0f2e 	cmp.w	r8, #46	; 0x2e
 8002f54:	f000 811d 	beq.w	8003192 <translatekeypad+0x256>
	for(int i = 0; i < keypadlength; i++){
 8002f58:	2d01      	cmp	r5, #1
 8002f5a:	f000 80b8 	beq.w	80030ce <translatekeypad+0x192>
		if(keypadarr[i] == '.'){
 8002f5e:	7873      	ldrb	r3, [r6, #1]
	int decimallocation = -1;
 8002f60:	f04f 37ff 	mov.w	r7, #4294967295
		if(keypadarr[i] == '.'){
 8002f64:	2b2e      	cmp	r3, #46	; 0x2e
 8002f66:	f000 811b 	beq.w	80031a0 <translatekeypad+0x264>
	for(int i = 0; i < keypadlength; i++){
 8002f6a:	2d02      	cmp	r5, #2
 8002f6c:	d00f      	beq.n	8002f8e <translatekeypad+0x52>
		if(keypadarr[i] == '.'){
 8002f6e:	78b3      	ldrb	r3, [r6, #2]
 8002f70:	2b2e      	cmp	r3, #46	; 0x2e
 8002f72:	f000 8166 	beq.w	8003242 <translatekeypad+0x306>
	for(int i = 0; i < keypadlength; i++){
 8002f76:	2d03      	cmp	r5, #3
 8002f78:	d009      	beq.n	8002f8e <translatekeypad+0x52>
		if(keypadarr[i] == '.'){
 8002f7a:	78f3      	ldrb	r3, [r6, #3]
 8002f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f7e:	f000 8168 	beq.w	8003252 <translatekeypad+0x316>
	for(int i = 0; i < keypadlength; i++){
 8002f82:	2d04      	cmp	r5, #4
 8002f84:	d003      	beq.n	8002f8e <translatekeypad+0x52>
		if(keypadarr[i] == '.'){
 8002f86:	7933      	ldrb	r3, [r6, #4]
 8002f88:	2b2e      	cmp	r3, #46	; 0x2e
 8002f8a:	f000 8158 	beq.w	800323e <translatekeypad+0x302>
	if(decimallocation == -1){
 8002f8e:	1c7b      	adds	r3, r7, #1
 8002f90:	f000 809d 	beq.w	80030ce <translatekeypad+0x192>
		for(int i = decimallocation-1; i >=0; i--){
 8002f94:	f107 3aff 	add.w	sl, r7, #4294967295
 8002f98:	2f00      	cmp	r7, #0
 8002f9a:	f000 8168 	beq.w	800326e <translatekeypad+0x332>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8002f9e:	f816 000a 	ldrb.w	r0, [r6, sl]
 8002fa2:	3830      	subs	r0, #48	; 0x30
 8002fa4:	b2c3      	uxtb	r3, r0
 8002fa6:	2b09      	cmp	r3, #9
 8002fa8:	f200 8108 	bhi.w	80031bc <translatekeypad+0x280>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8002fac:	f7fd fe3e 	bl	8000c2c <__aeabi_i2f>
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f7fd fd87 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8002fb6:	f04f 090a 	mov.w	r9, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8002fba:	4604      	mov	r4, r0
		for(int i = decimallocation-1; i >=0; i--){
 8002fbc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002fc0:	f1ba 0f00 	cmp.w	sl, #0
 8002fc4:	d027      	beq.n	8003016 <translatekeypad+0xda>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8002fc6:	5cf0      	ldrb	r0, [r6, r3]
 8002fc8:	3830      	subs	r0, #48	; 0x30
 8002fca:	b2c3      	uxtb	r3, r0
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d80c      	bhi.n	8002fea <translatekeypad+0xae>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8002fd0:	fb09 f000 	mul.w	r0, r9, r0
 8002fd4:	f7fd fe2a 	bl	8000c2c <__aeabi_i2f>
 8002fd8:	4601      	mov	r1, r0
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7fd fd72 	bl	8000ac4 <__addsf3>
 8002fe0:	4604      	mov	r4, r0
				count = count * 10;
 8002fe2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002fe6:	ea4f 0949 	mov.w	r9, r9, lsl #1
		for(int i = decimallocation-1; i >=0; i--){
 8002fea:	f1ba 0f01 	cmp.w	sl, #1
 8002fee:	f1aa 0b02 	sub.w	fp, sl, #2
 8002ff2:	d010      	beq.n	8003016 <translatekeypad+0xda>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8002ff4:	f816 000b 	ldrb.w	r0, [r6, fp]
 8002ff8:	3830      	subs	r0, #48	; 0x30
 8002ffa:	b2c3      	uxtb	r3, r0
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	f240 80fb 	bls.w	80031f8 <translatekeypad+0x2bc>
		for(int i = decimallocation-1; i >=0; i--){
 8003002:	f1bb 0f00 	cmp.w	fp, #0
 8003006:	d006      	beq.n	8003016 <translatekeypad+0xda>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003008:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800300c:	fa5f f388 	uxtb.w	r3, r8
 8003010:	2b09      	cmp	r3, #9
 8003012:	f240 8107 	bls.w	8003224 <translatekeypad+0x2e8>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003016:	1c7b      	adds	r3, r7, #1
 8003018:	42ab      	cmp	r3, r5
 800301a:	da55      	bge.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800301c:	5cf0      	ldrb	r0, [r6, r3]
 800301e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003022:	2b09      	cmp	r3, #9
 8003024:	f200 80ce 	bhi.w	80031c4 <translatekeypad+0x288>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003028:	f7fd fe00 	bl	8000c2c <__aeabi_i2f>
 800302c:	497b      	ldr	r1, [pc, #492]	; (800321c <translatekeypad+0x2e0>)
 800302e:	f7fd fd47 	bl	8000ac0 <__aeabi_fsub>
 8003032:	497b      	ldr	r1, [pc, #492]	; (8003220 <translatekeypad+0x2e4>)
 8003034:	f7fd ff02 	bl	8000e3c <__aeabi_fdiv>
 8003038:	4601      	mov	r1, r0
 800303a:	4620      	mov	r0, r4
 800303c:	f7fd fd42 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003040:	f04f 0864 	mov.w	r8, #100	; 0x64
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003044:	4604      	mov	r4, r0
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	429d      	cmp	r5, r3
 800304a:	dd3d      	ble.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800304c:	5cf0      	ldrb	r0, [r6, r3]
 800304e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003052:	2b09      	cmp	r3, #9
 8003054:	d815      	bhi.n	8003082 <translatekeypad+0x146>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8003056:	f7fd fde9 	bl	8000c2c <__aeabi_i2f>
 800305a:	4970      	ldr	r1, [pc, #448]	; (800321c <translatekeypad+0x2e0>)
 800305c:	f7fd fd30 	bl	8000ac0 <__aeabi_fsub>
 8003060:	4681      	mov	r9, r0
 8003062:	4640      	mov	r0, r8
 8003064:	f7fd fde2 	bl	8000c2c <__aeabi_i2f>
 8003068:	4601      	mov	r1, r0
 800306a:	4648      	mov	r0, r9
 800306c:	f7fd fee6 	bl	8000e3c <__aeabi_fdiv>
 8003070:	4601      	mov	r1, r0
 8003072:	4620      	mov	r0, r4
 8003074:	f7fd fd26 	bl	8000ac4 <__addsf3>
 8003078:	4604      	mov	r4, r0
				count = count * 10;
 800307a:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800307e:	ea4f 0848 	mov.w	r8, r8, lsl #1
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003082:	1cfb      	adds	r3, r7, #3
 8003084:	429d      	cmp	r5, r3
 8003086:	dd1f      	ble.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003088:	5cf0      	ldrb	r0, [r6, r3]
 800308a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800308e:	2b09      	cmp	r3, #9
 8003090:	f240 809b 	bls.w	80031ca <translatekeypad+0x28e>
		for(int i = decimallocation+1; i < keypadlength; i++){
 8003094:	3704      	adds	r7, #4
 8003096:	42bd      	cmp	r5, r7
 8003098:	dd16      	ble.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800309a:	5df0      	ldrb	r0, [r6, r7]
 800309c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80030a0:	2b09      	cmp	r3, #9
 80030a2:	d811      	bhi.n	80030c8 <translatekeypad+0x18c>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80030a4:	f7fd fdc2 	bl	8000c2c <__aeabi_i2f>
 80030a8:	495c      	ldr	r1, [pc, #368]	; (800321c <translatekeypad+0x2e0>)
 80030aa:	f7fd fd09 	bl	8000ac0 <__aeabi_fsub>
 80030ae:	4605      	mov	r5, r0
 80030b0:	4640      	mov	r0, r8
 80030b2:	f7fd fdbb 	bl	8000c2c <__aeabi_i2f>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4628      	mov	r0, r5
 80030ba:	f7fd febf 	bl	8000e3c <__aeabi_fdiv>
 80030be:	4601      	mov	r1, r0
 80030c0:	4620      	mov	r0, r4
 80030c2:	f7fd fcff 	bl	8000ac4 <__addsf3>
 80030c6:	4604      	mov	r4, r0
}
 80030c8:	4620      	mov	r0, r4
 80030ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80030ce:	1973      	adds	r3, r6, r5
 80030d0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80030d4:	3830      	subs	r0, #48	; 0x30
 80030d6:	b2c3      	uxtb	r3, r0
 80030d8:	2b09      	cmp	r3, #9
 80030da:	f200 80ad 	bhi.w	8003238 <translatekeypad+0x2fc>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80030de:	f7fd fda5 	bl	8000c2c <__aeabi_i2f>
 80030e2:	2100      	movs	r1, #0
 80030e4:	f7fd fcee 	bl	8000ac4 <__addsf3>
				count = count * 10;
 80030e8:	270a      	movs	r7, #10
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80030ea:	4604      	mov	r4, r0
		for(int i = keypadlength-1; i >=0; i--){
 80030ec:	2d01      	cmp	r5, #1
 80030ee:	f1a5 0302 	sub.w	r3, r5, #2
 80030f2:	d0e9      	beq.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80030f4:	5cf0      	ldrb	r0, [r6, r3]
 80030f6:	3830      	subs	r0, #48	; 0x30
 80030f8:	b2c3      	uxtb	r3, r0
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	d80b      	bhi.n	8003116 <translatekeypad+0x1da>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80030fe:	fb07 f000 	mul.w	r0, r7, r0
 8003102:	f7fd fd93 	bl	8000c2c <__aeabi_i2f>
 8003106:	4601      	mov	r1, r0
 8003108:	4620      	mov	r0, r4
 800310a:	f7fd fcdb 	bl	8000ac4 <__addsf3>
 800310e:	4604      	mov	r4, r0
				count = count * 10;
 8003110:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003114:	007f      	lsls	r7, r7, #1
		for(int i = keypadlength-1; i >=0; i--){
 8003116:	2d02      	cmp	r5, #2
 8003118:	f1a5 0303 	sub.w	r3, r5, #3
 800311c:	d0d4      	beq.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 800311e:	5cf0      	ldrb	r0, [r6, r3]
 8003120:	3830      	subs	r0, #48	; 0x30
 8003122:	b2c3      	uxtb	r3, r0
 8003124:	2b09      	cmp	r3, #9
 8003126:	d80b      	bhi.n	8003140 <translatekeypad+0x204>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003128:	fb07 f000 	mul.w	r0, r7, r0
 800312c:	f7fd fd7e 	bl	8000c2c <__aeabi_i2f>
 8003130:	4601      	mov	r1, r0
 8003132:	4620      	mov	r0, r4
 8003134:	f7fd fcc6 	bl	8000ac4 <__addsf3>
 8003138:	4604      	mov	r4, r0
				count = count * 10;
 800313a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800313e:	007f      	lsls	r7, r7, #1
		for(int i = keypadlength-1; i >=0; i--){
 8003140:	2d03      	cmp	r5, #3
 8003142:	f1a5 0904 	sub.w	r9, r5, #4
 8003146:	d0bf      	beq.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003148:	f816 0009 	ldrb.w	r0, [r6, r9]
 800314c:	3830      	subs	r0, #48	; 0x30
 800314e:	b2c3      	uxtb	r3, r0
 8003150:	2b09      	cmp	r3, #9
 8003152:	d80b      	bhi.n	800316c <translatekeypad+0x230>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003154:	fb07 f000 	mul.w	r0, r7, r0
 8003158:	f7fd fd68 	bl	8000c2c <__aeabi_i2f>
 800315c:	4601      	mov	r1, r0
 800315e:	4620      	mov	r0, r4
 8003160:	f7fd fcb0 	bl	8000ac4 <__addsf3>
 8003164:	4604      	mov	r4, r0
				count = count * 10;
 8003166:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800316a:	007f      	lsls	r7, r7, #1
		for(int i = keypadlength-1; i >=0; i--){
 800316c:	f1b9 0f00 	cmp.w	r9, #0
 8003170:	d0aa      	beq.n	80030c8 <translatekeypad+0x18c>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003172:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8003176:	fa5f f388 	uxtb.w	r3, r8
 800317a:	2b09      	cmp	r3, #9
 800317c:	d8a4      	bhi.n	80030c8 <translatekeypad+0x18c>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800317e:	fb07 f008 	mul.w	r0, r7, r8
 8003182:	f7fd fd53 	bl	8000c2c <__aeabi_i2f>
 8003186:	4601      	mov	r1, r0
 8003188:	4620      	mov	r0, r4
 800318a:	f7fd fc9b 	bl	8000ac4 <__addsf3>
 800318e:	4604      	mov	r4, r0
		for(int i = keypadlength-1; i >=0; i--){
 8003190:	e79a      	b.n	80030c8 <translatekeypad+0x18c>
	for(int i = 0; i < keypadlength; i++){
 8003192:	2d01      	cmp	r5, #1
 8003194:	d06b      	beq.n	800326e <translatekeypad+0x332>
		if(keypadarr[i] == '.'){
 8003196:	7873      	ldrb	r3, [r6, #1]
	for(int i = 0; i < keypadlength; i++){
 8003198:	2700      	movs	r7, #0
		if(keypadarr[i] == '.'){
 800319a:	2b2e      	cmp	r3, #46	; 0x2e
 800319c:	f47f aee5 	bne.w	8002f6a <translatekeypad+0x2e>
	for(int i = 0; i < keypadlength; i++){
 80031a0:	2d02      	cmp	r5, #2
 80031a2:	f04f 0701 	mov.w	r7, #1
 80031a6:	f47f aee2 	bne.w	8002f6e <translatekeypad+0x32>
		for(int i = decimallocation-1; i >=0; i--){
 80031aa:	f107 3aff 	add.w	sl, r7, #4294967295
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 80031ae:	f816 000a 	ldrb.w	r0, [r6, sl]
 80031b2:	3830      	subs	r0, #48	; 0x30
 80031b4:	b2c3      	uxtb	r3, r0
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	f67f aef8 	bls.w	8002fac <translatekeypad+0x70>
		int count = 1;
 80031bc:	f04f 0901 	mov.w	r9, #1
	float num = 0;
 80031c0:	2400      	movs	r4, #0
 80031c2:	e6fb      	b.n	8002fbc <translatekeypad+0x80>
		count = 10;
 80031c4:	f04f 080a 	mov.w	r8, #10
 80031c8:	e73d      	b.n	8003046 <translatekeypad+0x10a>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80031ca:	f7fd fd2f 	bl	8000c2c <__aeabi_i2f>
 80031ce:	4913      	ldr	r1, [pc, #76]	; (800321c <translatekeypad+0x2e0>)
 80031d0:	f7fd fc76 	bl	8000ac0 <__aeabi_fsub>
 80031d4:	4681      	mov	r9, r0
 80031d6:	4640      	mov	r0, r8
 80031d8:	f7fd fd28 	bl	8000c2c <__aeabi_i2f>
 80031dc:	4601      	mov	r1, r0
 80031de:	4648      	mov	r0, r9
 80031e0:	f7fd fe2c 	bl	8000e3c <__aeabi_fdiv>
 80031e4:	4601      	mov	r1, r0
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7fd fc6c 	bl	8000ac4 <__addsf3>
				count = count * 10;
 80031ec:	eb08 0888 	add.w	r8, r8, r8, lsl #2
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 80031f0:	4604      	mov	r4, r0
				count = count * 10;
 80031f2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80031f6:	e74d      	b.n	8003094 <translatekeypad+0x158>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 80031f8:	fb09 f000 	mul.w	r0, r9, r0
 80031fc:	f7fd fd16 	bl	8000c2c <__aeabi_i2f>
 8003200:	4601      	mov	r1, r0
 8003202:	4620      	mov	r0, r4
 8003204:	f7fd fc5e 	bl	8000ac4 <__addsf3>
				count = count * 10;
 8003208:	eb09 0989 	add.w	r9, r9, r9, lsl #2
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 800320c:	4604      	mov	r4, r0
				count = count * 10;
 800320e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003212:	e6f6      	b.n	8003002 <translatekeypad+0xc6>
 8003214:	2000001c 	.word	0x2000001c
 8003218:	20000010 	.word	0x20000010
 800321c:	42400000 	.word	0x42400000
 8003220:	41200000 	.word	0x41200000
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8003224:	fb09 f008 	mul.w	r0, r9, r8
 8003228:	f7fd fd00 	bl	8000c2c <__aeabi_i2f>
 800322c:	4601      	mov	r1, r0
 800322e:	4620      	mov	r0, r4
 8003230:	f7fd fc48 	bl	8000ac4 <__addsf3>
 8003234:	4604      	mov	r4, r0
		for(int i = decimallocation-1; i >=0; i--){
 8003236:	e6ee      	b.n	8003016 <translatekeypad+0xda>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8003238:	2701      	movs	r7, #1
 800323a:	2400      	movs	r4, #0
 800323c:	e756      	b.n	80030ec <translatekeypad+0x1b0>
	for(int i = 0; i < keypadlength; i++){
 800323e:	2704      	movs	r7, #4
		for(int i = decimallocation-1; i >=0; i--){
 8003240:	e7b3      	b.n	80031aa <translatekeypad+0x26e>
	for(int i = 0; i < keypadlength; i++){
 8003242:	2d03      	cmp	r5, #3
 8003244:	f04f 0702 	mov.w	r7, #2
 8003248:	d0af      	beq.n	80031aa <translatekeypad+0x26e>
		if(keypadarr[i] == '.'){
 800324a:	78f3      	ldrb	r3, [r6, #3]
 800324c:	2b2e      	cmp	r3, #46	; 0x2e
 800324e:	f47f ae98 	bne.w	8002f82 <translatekeypad+0x46>
	for(int i = 0; i < keypadlength; i++){
 8003252:	2d04      	cmp	r5, #4
 8003254:	d00e      	beq.n	8003274 <translatekeypad+0x338>
		if(keypadarr[i] == '.'){
 8003256:	7933      	ldrb	r3, [r6, #4]
	for(int i = 0; i < keypadlength; i++){
 8003258:	2b2e      	cmp	r3, #46	; 0x2e
 800325a:	bf0c      	ite	eq
 800325c:	2704      	moveq	r7, #4
 800325e:	2703      	movne	r7, #3
		for(int i = decimallocation-1; i >=0; i--){
 8003260:	f107 3aff 	add.w	sl, r7, #4294967295
 8003264:	e7a3      	b.n	80031ae <translatekeypad+0x272>
	float num = 0;
 8003266:	2400      	movs	r4, #0
}
 8003268:	4620      	mov	r0, r4
 800326a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(int i = decimallocation-1; i >=0; i--){
 800326e:	2700      	movs	r7, #0
	float num = 0;
 8003270:	2400      	movs	r4, #0
 8003272:	e6d0      	b.n	8003016 <translatekeypad+0xda>
	for(int i = 0; i < keypadlength; i++){
 8003274:	2703      	movs	r7, #3
 8003276:	e798      	b.n	80031aa <translatekeypad+0x26e>

08003278 <updatekeypad>:
	if(num == 'z'){
 8003278:	287a      	cmp	r0, #122	; 0x7a
void updatekeypad(char num){
 800327a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(num == 'z'){
 800327e:	d037      	beq.n	80032f0 <updatekeypad+0x78>
	else if(num == '.'){
 8003280:	282e      	cmp	r0, #46	; 0x2e
 8003282:	4604      	mov	r4, r0
 8003284:	d018      	beq.n	80032b8 <updatekeypad+0x40>
	else if(num >= '0' && num <= '9'){
 8003286:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800328a:	2b09      	cmp	r3, #9
 800328c:	d812      	bhi.n	80032b4 <updatekeypad+0x3c>
		if(keypaditerator > 2){
 800328e:	4e4c      	ldr	r6, [pc, #304]	; (80033c0 <updatekeypad+0x148>)
 8003290:	6837      	ldr	r7, [r6, #0]
 8003292:	2f02      	cmp	r7, #2
 8003294:	dd48      	ble.n	8003328 <updatekeypad+0xb0>
			for(int i = 1; i < keypadlength; i++){
 8003296:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <updatekeypad+0x14c>)
 8003298:	781d      	ldrb	r5, [r3, #0]
 800329a:	2d01      	cmp	r5, #1
 800329c:	dd04      	ble.n	80032a8 <updatekeypad+0x30>
				keypadarr[i-1] = keypadarr[i];
 800329e:	494a      	ldr	r1, [pc, #296]	; (80033c8 <updatekeypad+0x150>)
 80032a0:	1e6a      	subs	r2, r5, #1
 80032a2:	1e48      	subs	r0, r1, #1
 80032a4:	f007 faec 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 80032a8:	4b48      	ldr	r3, [pc, #288]	; (80033cc <updatekeypad+0x154>)
			keypaditerator--;
 80032aa:	3f01      	subs	r7, #1
			keypadarr[keypadlength-1] = num;
 80032ac:	442b      	add	r3, r5
 80032ae:	f803 4c01 	strb.w	r4, [r3, #-1]
			keypaditerator--;
 80032b2:	6037      	str	r7, [r6, #0]
}
 80032b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80032b8:	4b42      	ldr	r3, [pc, #264]	; (80033c4 <updatekeypad+0x14c>)
 80032ba:	4e41      	ldr	r6, [pc, #260]	; (80033c0 <updatekeypad+0x148>)
 80032bc:	781d      	ldrb	r5, [r3, #0]
 80032be:	6834      	ldr	r4, [r6, #0]
 80032c0:	1eeb      	subs	r3, r5, #3
 80032c2:	42a3      	cmp	r3, r4
 80032c4:	dcf6      	bgt.n	80032b4 <updatekeypad+0x3c>
 80032c6:	4f42      	ldr	r7, [pc, #264]	; (80033d0 <updatekeypad+0x158>)
 80032c8:	783b      	ldrb	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <updatekeypad+0x3c>
			for(int i = 1; i < keypadlength; i++){
 80032ce:	2d01      	cmp	r5, #1
 80032d0:	dd04      	ble.n	80032dc <updatekeypad+0x64>
				keypadarr[i-1] = keypadarr[i];
 80032d2:	493d      	ldr	r1, [pc, #244]	; (80033c8 <updatekeypad+0x150>)
 80032d4:	1e6a      	subs	r2, r5, #1
 80032d6:	1e48      	subs	r0, r1, #1
 80032d8:	f007 fad2 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <updatekeypad+0x154>)
 80032de:	222e      	movs	r2, #46	; 0x2e
 80032e0:	441d      	add	r5, r3
			keypaddecimal = 1;
 80032e2:	2301      	movs	r3, #1
			keypaditerator--;
 80032e4:	3c01      	subs	r4, #1
 80032e6:	6034      	str	r4, [r6, #0]
			keypadarr[keypadlength-1] = num;
 80032e8:	f805 2c01 	strb.w	r2, [r5, #-1]
			keypaddecimal = 1;
 80032ec:	703b      	strb	r3, [r7, #0]
			keypaditerator--;
 80032ee:	e7e1      	b.n	80032b4 <updatekeypad+0x3c>
		if(keypaditerator < keypadlength-1){
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <updatekeypad+0x14c>)
 80032f2:	4e33      	ldr	r6, [pc, #204]	; (80033c0 <updatekeypad+0x148>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	6832      	ldr	r2, [r6, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	4293      	cmp	r3, r2
 80032fc:	ddda      	ble.n	80032b4 <updatekeypad+0x3c>
			if(keypadarr[4] == '.'){
 80032fe:	4d33      	ldr	r5, [pc, #204]	; (80033cc <updatekeypad+0x154>)
 8003300:	792b      	ldrb	r3, [r5, #4]
 8003302:	2b2e      	cmp	r3, #46	; 0x2e
 8003304:	d102      	bne.n	800330c <updatekeypad+0x94>
				keypaddecimal = 0;
 8003306:	2100      	movs	r1, #0
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <updatekeypad+0x158>)
 800330a:	7019      	strb	r1, [r3, #0]
			keypadarr[0] = num;
 800330c:	237a      	movs	r3, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 800330e:	78e9      	ldrb	r1, [r5, #3]
			keypaditerator++;
 8003310:	3201      	adds	r2, #1
				keypadarr[i+1] = keypadarr[i];
 8003312:	7129      	strb	r1, [r5, #4]
 8003314:	78a9      	ldrb	r1, [r5, #2]
			keypaditerator++;
 8003316:	6032      	str	r2, [r6, #0]
				keypadarr[i+1] = keypadarr[i];
 8003318:	70e9      	strb	r1, [r5, #3]
 800331a:	782a      	ldrb	r2, [r5, #0]
 800331c:	7869      	ldrb	r1, [r5, #1]
			keypadarr[0] = num;
 800331e:	702b      	strb	r3, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8003320:	70a9      	strb	r1, [r5, #2]
 8003322:	706a      	strb	r2, [r5, #1]
}
 8003324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.'){
 8003328:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <updatekeypad+0x158>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	d023      	beq.n	8003376 <updatekeypad+0xfe>
 800332e:	2b01      	cmp	r3, #1
 8003330:	d1c0      	bne.n	80032b4 <updatekeypad+0x3c>
 8003332:	4d26      	ldr	r5, [pc, #152]	; (80033cc <updatekeypad+0x154>)
 8003334:	786b      	ldrb	r3, [r5, #1]
 8003336:	2b7a      	cmp	r3, #122	; 0x7a
 8003338:	d032      	beq.n	80033a0 <updatekeypad+0x128>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z'){
 800333a:	786b      	ldrb	r3, [r5, #1]
 800333c:	2b7a      	cmp	r3, #122	; 0x7a
 800333e:	d0b9      	beq.n	80032b4 <updatekeypad+0x3c>
		else if(keypaditerator > 0 && keypaddecimal == 1){
 8003340:	2f01      	cmp	r7, #1
 8003342:	d01b      	beq.n	800337c <updatekeypad+0x104>
		else if(keypaditerator >= 0 && keypaddecimal == 1 && translatekeypad() >= 10.0){
 8003344:	2f00      	cmp	r7, #0
 8003346:	d1b5      	bne.n	80032b4 <updatekeypad+0x3c>
 8003348:	f7ff fdf8 	bl	8002f3c <translatekeypad>
 800334c:	4921      	ldr	r1, [pc, #132]	; (80033d4 <updatekeypad+0x15c>)
 800334e:	f7fd fe73 	bl	8001038 <__aeabi_fcmpge>
 8003352:	2800      	cmp	r0, #0
 8003354:	d0ae      	beq.n	80032b4 <updatekeypad+0x3c>
			for(int i = 1; i < keypadlength; i++){
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <updatekeypad+0x14c>)
 8003358:	781f      	ldrb	r7, [r3, #0]
 800335a:	2f01      	cmp	r7, #1
 800335c:	dd04      	ble.n	8003368 <updatekeypad+0xf0>
				keypadarr[i-1] = keypadarr[i];
 800335e:	491a      	ldr	r1, [pc, #104]	; (80033c8 <updatekeypad+0x150>)
 8003360:	1e7a      	subs	r2, r7, #1
 8003362:	1e48      	subs	r0, r1, #1
 8003364:	f007 fa8c 	bl	800a880 <memmove>
			keypaditerator--;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
			keypadarr[keypadlength-1] = num;
 800336c:	443d      	add	r5, r7
 800336e:	f805 4c01 	strb.w	r4, [r5, #-1]
			keypaditerator--;
 8003372:	6033      	str	r3, [r6, #0]
 8003374:	e79e      	b.n	80032b4 <updatekeypad+0x3c>
		else if(keypaditerator > 0 && keypaddecimal == 1){
 8003376:	2b01      	cmp	r3, #1
 8003378:	d19c      	bne.n	80032b4 <updatekeypad+0x3c>
 800337a:	4d14      	ldr	r5, [pc, #80]	; (80033cc <updatekeypad+0x154>)
			for(int i = 1; i < keypadlength; i++){
 800337c:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <updatekeypad+0x14c>)
 800337e:	f893 8000 	ldrb.w	r8, [r3]
 8003382:	f1b8 0f01 	cmp.w	r8, #1
 8003386:	dd05      	ble.n	8003394 <updatekeypad+0x11c>
				keypadarr[i-1] = keypadarr[i];
 8003388:	490f      	ldr	r1, [pc, #60]	; (80033c8 <updatekeypad+0x150>)
 800338a:	f108 32ff 	add.w	r2, r8, #4294967295
 800338e:	1e48      	subs	r0, r1, #1
 8003390:	f007 fa76 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 8003394:	4445      	add	r5, r8
			keypaditerator--;
 8003396:	3f01      	subs	r7, #1
			keypadarr[keypadlength-1] = num;
 8003398:	f805 4c01 	strb.w	r4, [r5, #-1]
			keypaditerator--;
 800339c:	6037      	str	r7, [r6, #0]
 800339e:	e789      	b.n	80032b4 <updatekeypad+0x3c>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.'){
 80033a0:	78ab      	ldrb	r3, [r5, #2]
 80033a2:	2b2e      	cmp	r3, #46	; 0x2e
 80033a4:	d0c9      	beq.n	800333a <updatekeypad+0xc2>
			for(int i = 1; i < keypadlength; i++){
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <updatekeypad+0x14c>)
 80033a8:	f893 8000 	ldrb.w	r8, [r3]
 80033ac:	f1b8 0f01 	cmp.w	r8, #1
 80033b0:	ddf0      	ble.n	8003394 <updatekeypad+0x11c>
				keypadarr[i-1] = keypadarr[i];
 80033b2:	4628      	mov	r0, r5
 80033b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80033b8:	1c69      	adds	r1, r5, #1
 80033ba:	f007 fa61 	bl	800a880 <memmove>
 80033be:	e7e9      	b.n	8003394 <updatekeypad+0x11c>
 80033c0:	20000018 	.word	0x20000018
 80033c4:	2000001c 	.word	0x2000001c
 80033c8:	20000011 	.word	0x20000011
 80033cc:	20000010 	.word	0x20000010
 80033d0:	200006b0 	.word	0x200006b0
 80033d4:	41200000 	.word	0x41200000

080033d8 <keypadsm>:
void keypadsm(char num){
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(kpenum == WAIT){
 80033dc:	4cb4      	ldr	r4, [pc, #720]	; (80036b0 <keypadsm+0x2d8>)
 80033de:	7823      	ldrb	r3, [r4, #0]
 80033e0:	b96b      	cbnz	r3, 80033fe <keypadsm+0x26>
		if(num == 'A'){
 80033e2:	2841      	cmp	r0, #65	; 0x41
 80033e4:	f000 8087 	beq.w	80034f6 <keypadsm+0x11e>
		else if(num == 'B'){
 80033e8:	2842      	cmp	r0, #66	; 0x42
 80033ea:	f000 8125 	beq.w	8003638 <keypadsm+0x260>
		else if(num == 'C'){
 80033ee:	2843      	cmp	r0, #67	; 0x43
 80033f0:	f000 80aa 	beq.w	8003548 <keypadsm+0x170>
		else if(num == 'D'){
 80033f4:	2844      	cmp	r0, #68	; 0x44
 80033f6:	f000 82d0 	beq.w	800399a <keypadsm+0x5c2>
}
 80033fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if(kpenum == V1){
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d040      	beq.n	8003484 <keypadsm+0xac>
	else if(kpenum == A1){
 8003402:	2b02      	cmp	r3, #2
 8003404:	f000 815e 	beq.w	80036c4 <keypadsm+0x2ec>
	else if(kpenum == V2){
 8003408:	2b03      	cmp	r3, #3
 800340a:	f000 80c7 	beq.w	800359c <keypadsm+0x1c4>
	else if(kpenum == A2){
 800340e:	2b04      	cmp	r3, #4
 8003410:	d1f3      	bne.n	80033fa <keypadsm+0x22>
		if(num == 'A'){
 8003412:	2841      	cmp	r0, #65	; 0x41
 8003414:	f000 848c 	beq.w	8003d30 <keypadsm+0x958>
		else if(num == 'B'){
 8003418:	2842      	cmp	r0, #66	; 0x42
 800341a:	f000 84c6 	beq.w	8003daa <keypadsm+0x9d2>
		else if(num == 'C'){
 800341e:	2843      	cmp	r0, #67	; 0x43
 8003420:	f000 85d4 	beq.w	8003fcc <keypadsm+0xbf4>
		else if(num == 'D'){
 8003424:	2844      	cmp	r0, #68	; 0x44
 8003426:	f000 8649 	beq.w	80040bc <keypadsm+0xce4>
		else if(num == '.'){
 800342a:	282e      	cmp	r0, #46	; 0x2e
 800342c:	f001 8058 	beq.w	80044e0 <keypadsm+0x1108>
		else if(num >= '0' && num <= '9'){
 8003430:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003434:	2b09      	cmp	r3, #9
 8003436:	f240 83b6 	bls.w	8003ba6 <keypadsm+0x7ce>
		else if(num == '#'){
 800343a:	2823      	cmp	r0, #35	; 0x23
 800343c:	f001 80fc 	beq.w	8004638 <keypadsm+0x1260>
		else if(num == '+'){
 8003440:	282b      	cmp	r0, #43	; 0x2b
 8003442:	f001 806c 	beq.w	800451e <keypadsm+0x1146>
		else if(num == '-'){
 8003446:	282d      	cmp	r0, #45	; 0x2d
 8003448:	d1d7      	bne.n	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 800344a:	2300      	movs	r3, #0
 800344c:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 800344e:	461c      	mov	r4, r3
		if(keypaditerator < keypadlength-1){
 8003450:	4998      	ldr	r1, [pc, #608]	; (80036b4 <keypadsm+0x2dc>)
 8003452:	4a99      	ldr	r2, [pc, #612]	; (80036b8 <keypadsm+0x2e0>)
 8003454:	4e99      	ldr	r6, [pc, #612]	; (80036bc <keypadsm+0x2e4>)
 8003456:	4d9a      	ldr	r5, [pc, #616]	; (80036c0 <keypadsm+0x2e8>)
 8003458:	f891 a000 	ldrb.w	sl, [r1]
 800345c:	f892 9004 	ldrb.w	r9, [r2, #4]
 8003460:	f896 8000 	ldrb.w	r8, [r6]
 8003464:	f892 e003 	ldrb.w	lr, [r2, #3]
 8003468:	f892 c002 	ldrb.w	ip, [r2, #2]
 800346c:	7857      	ldrb	r7, [r2, #1]
 800346e:	7810      	ldrb	r0, [r2, #0]
 8003470:	6829      	ldr	r1, [r5, #0]
 8003472:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003476:	2903      	cmp	r1, #3
 8003478:	f301 80fb 	bgt.w	8004672 <keypadsm+0x129a>
 800347c:	4551      	cmp	r1, sl
 800347e:	f2c0 827d 	blt.w	800397c <keypadsm+0x5a4>
		if(keypaditerator < keypadlength-1){
 8003482:	e7fe      	b.n	8003482 <keypadsm+0xaa>
		if(num == 'A'){
 8003484:	2841      	cmp	r0, #65	; 0x41
 8003486:	f000 816b 	beq.w	8003760 <keypadsm+0x388>
		else if(num == 'B'){
 800348a:	2842      	cmp	r0, #66	; 0x42
 800348c:	f000 82d2 	beq.w	8003a34 <keypadsm+0x65c>
		else if(num == 'C'){
 8003490:	2843      	cmp	r0, #67	; 0x43
 8003492:	f000 81b0 	beq.w	80037f6 <keypadsm+0x41e>
		else if(num == 'D'){
 8003496:	2844      	cmp	r0, #68	; 0x44
 8003498:	f000 83c7 	beq.w	8003c2a <keypadsm+0x852>
		else if(num == '.'){
 800349c:	282e      	cmp	r0, #46	; 0x2e
 800349e:	f000 85df 	beq.w	8004060 <keypadsm+0xc88>
		else if(num >= '0' && num <= '9'){
 80034a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	f240 837d 	bls.w	8003ba6 <keypadsm+0x7ce>
		else if(num == '#'){
 80034ac:	2823      	cmp	r0, #35	; 0x23
 80034ae:	f000 86d0 	beq.w	8004252 <keypadsm+0xe7a>
		else if(num == '+'){
 80034b2:	282b      	cmp	r0, #43	; 0x2b
 80034b4:	f000 864e 	beq.w	8004154 <keypadsm+0xd7c>
		else if(num == '-'){
 80034b8:	282d      	cmp	r0, #45	; 0x2d
 80034ba:	d19e      	bne.n	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 80034bc:	2100      	movs	r1, #0
 80034be:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80034c0:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 80034c2:	4b7c      	ldr	r3, [pc, #496]	; (80036b4 <keypadsm+0x2dc>)
 80034c4:	4a7c      	ldr	r2, [pc, #496]	; (80036b8 <keypadsm+0x2e0>)
 80034c6:	4e7d      	ldr	r6, [pc, #500]	; (80036bc <keypadsm+0x2e4>)
 80034c8:	4d7d      	ldr	r5, [pc, #500]	; (80036c0 <keypadsm+0x2e8>)
 80034ca:	f893 a000 	ldrb.w	sl, [r3]
 80034ce:	f892 9004 	ldrb.w	r9, [r2, #4]
 80034d2:	f896 c000 	ldrb.w	ip, [r6]
 80034d6:	f892 e003 	ldrb.w	lr, [r2, #3]
 80034da:	7897      	ldrb	r7, [r2, #2]
 80034dc:	f892 8001 	ldrb.w	r8, [r2, #1]
 80034e0:	7810      	ldrb	r0, [r2, #0]
 80034e2:	682b      	ldr	r3, [r5, #0]
 80034e4:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	f300 86cf 	bgt.w	800428c <keypadsm+0xeb4>
 80034ee:	459a      	cmp	sl, r3
 80034f0:	f300 8216 	bgt.w	8003920 <keypadsm+0x548>
		if(keypaditerator < keypadlength-1){
 80034f4:	e7fe      	b.n	80034f4 <keypadsm+0x11c>
			kpenum = V1;
 80034f6:	2101      	movs	r1, #1
	while(keypaditerator < 4){
 80034f8:	469a      	mov	sl, r3
		if(keypaditerator < keypadlength-1){
 80034fa:	486e      	ldr	r0, [pc, #440]	; (80036b4 <keypadsm+0x2dc>)
 80034fc:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <keypadsm+0x2e0>)
 80034fe:	4e6f      	ldr	r6, [pc, #444]	; (80036bc <keypadsm+0x2e4>)
 8003500:	4d6f      	ldr	r5, [pc, #444]	; (80036c0 <keypadsm+0x2e8>)
 8003502:	f890 9000 	ldrb.w	r9, [r0]
			kpenum = V1;
 8003506:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003508:	7910      	ldrb	r0, [r2, #4]
 800350a:	f896 c000 	ldrb.w	ip, [r6]
 800350e:	f892 e003 	ldrb.w	lr, [r2, #3]
 8003512:	f892 8002 	ldrb.w	r8, [r2, #2]
 8003516:	7857      	ldrb	r7, [r2, #1]
 8003518:	7814      	ldrb	r4, [r2, #0]
 800351a:	6829      	ldr	r1, [r5, #0]
		if(keypaditerator < keypadlength-1){
 800351c:	f109 39ff 	add.w	r9, r9, #4294967295
			if(keypadarr[4] == '.'){
 8003520:	2903      	cmp	r1, #3
 8003522:	dc75      	bgt.n	8003610 <keypadsm+0x238>
 8003524:	4589      	cmp	r9, r1
 8003526:	dc00      	bgt.n	800352a <keypadsm+0x152>
		if(keypaditerator < keypadlength-1){
 8003528:	e7fe      	b.n	8003528 <keypadsm+0x150>
				keypaddecimal = 0;
 800352a:	282e      	cmp	r0, #46	; 0x2e
 800352c:	bf08      	it	eq
 800352e:	f04f 0c00 	moveq.w	ip, #0
	while(keypaditerator < 4){
 8003532:	4670      	mov	r0, lr
				keypaddecimal = 0;
 8003534:	bf08      	it	eq
 8003536:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 8003538:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 800353a:	f04f 0a01 	mov.w	sl, #1
	while(keypaditerator < 4){
 800353e:	46b8      	mov	r8, r7
 8003540:	3101      	adds	r1, #1
 8003542:	4627      	mov	r7, r4
			keypadarr[0] = num;
 8003544:	247a      	movs	r4, #122	; 0x7a
 8003546:	e7eb      	b.n	8003520 <keypadsm+0x148>
			kpenum = V2;
 8003548:	2103      	movs	r1, #3
	while(keypaditerator < 4){
 800354a:	469a      	mov	sl, r3
		if(keypaditerator < keypadlength-1){
 800354c:	4859      	ldr	r0, [pc, #356]	; (80036b4 <keypadsm+0x2dc>)
 800354e:	4a5a      	ldr	r2, [pc, #360]	; (80036b8 <keypadsm+0x2e0>)
 8003550:	4e5a      	ldr	r6, [pc, #360]	; (80036bc <keypadsm+0x2e4>)
 8003552:	4d5b      	ldr	r5, [pc, #364]	; (80036c0 <keypadsm+0x2e8>)
 8003554:	f890 9000 	ldrb.w	r9, [r0]
			kpenum = V2;
 8003558:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800355a:	7910      	ldrb	r0, [r2, #4]
 800355c:	7837      	ldrb	r7, [r6, #0]
 800355e:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003562:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003566:	7854      	ldrb	r4, [r2, #1]
 8003568:	f892 8000 	ldrb.w	r8, [r2]
 800356c:	6829      	ldr	r1, [r5, #0]
		if(keypaditerator < keypadlength-1){
 800356e:	f109 39ff 	add.w	r9, r9, #4294967295
			if(keypadarr[4] == '.'){
 8003572:	2903      	cmp	r1, #3
 8003574:	f300 80e0 	bgt.w	8003738 <keypadsm+0x360>
 8003578:	4549      	cmp	r1, r9
 800357a:	db00      	blt.n	800357e <keypadsm+0x1a6>
		if(keypaditerator < keypadlength-1){
 800357c:	e7fe      	b.n	800357c <keypadsm+0x1a4>
				keypaddecimal = 0;
 800357e:	282e      	cmp	r0, #46	; 0x2e
 8003580:	bf08      	it	eq
 8003582:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003584:	4660      	mov	r0, ip
				keypaddecimal = 0;
 8003586:	bf08      	it	eq
 8003588:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 800358a:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 800358c:	f04f 0a01 	mov.w	sl, #1
	while(keypaditerator < 4){
 8003590:	46a6      	mov	lr, r4
 8003592:	3101      	adds	r1, #1
 8003594:	4644      	mov	r4, r8
			keypadarr[0] = num;
 8003596:	f04f 087a 	mov.w	r8, #122	; 0x7a
 800359a:	e7ea      	b.n	8003572 <keypadsm+0x19a>
		if(num == 'A'){
 800359c:	2841      	cmp	r0, #65	; 0x41
 800359e:	f000 8154 	beq.w	800384a <keypadsm+0x472>
		else if(num == 'B'){
 80035a2:	2842      	cmp	r0, #66	; 0x42
 80035a4:	f000 837e 	beq.w	8003ca4 <keypadsm+0x8cc>
		else if(num == 'C'){
 80035a8:	2843      	cmp	r0, #67	; 0x43
 80035aa:	f000 843b 	beq.w	8003e24 <keypadsm+0xa4c>
		else if(num == 'D'){
 80035ae:	2844      	cmp	r0, #68	; 0x44
 80035b0:	f000 84cf 	beq.w	8003f52 <keypadsm+0xb7a>
		else if(num == '.'){
 80035b4:	282e      	cmp	r0, #46	; 0x2e
 80035b6:	f000 86dd 	beq.w	8004374 <keypadsm+0xf9c>
		else if(num >= '0' && num <= '9'){
 80035ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80035be:	2b09      	cmp	r3, #9
 80035c0:	f240 82f1 	bls.w	8003ba6 <keypadsm+0x7ce>
		else if(num == '#'){
 80035c4:	2823      	cmp	r0, #35	; 0x23
 80035c6:	f001 800a 	beq.w	80045de <keypadsm+0x1206>
		else if(num == '+'){
 80035ca:	282b      	cmp	r0, #43	; 0x2b
 80035cc:	f000 8731 	beq.w	8004432 <keypadsm+0x105a>
		else if(num == '-'){
 80035d0:	282d      	cmp	r0, #45	; 0x2d
 80035d2:	f47f af12 	bne.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 80035d6:	2300      	movs	r3, #0
 80035d8:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 80035da:	461c      	mov	r4, r3
		if(keypaditerator < keypadlength-1){
 80035dc:	4935      	ldr	r1, [pc, #212]	; (80036b4 <keypadsm+0x2dc>)
 80035de:	4a36      	ldr	r2, [pc, #216]	; (80036b8 <keypadsm+0x2e0>)
 80035e0:	4e36      	ldr	r6, [pc, #216]	; (80036bc <keypadsm+0x2e4>)
 80035e2:	4d37      	ldr	r5, [pc, #220]	; (80036c0 <keypadsm+0x2e8>)
 80035e4:	f891 a000 	ldrb.w	sl, [r1]
 80035e8:	f892 9004 	ldrb.w	r9, [r2, #4]
 80035ec:	f896 8000 	ldrb.w	r8, [r6]
 80035f0:	78d0      	ldrb	r0, [r2, #3]
 80035f2:	7897      	ldrb	r7, [r2, #2]
 80035f4:	f892 c001 	ldrb.w	ip, [r2, #1]
 80035f8:	f892 e000 	ldrb.w	lr, [r2]
 80035fc:	6829      	ldr	r1, [r5, #0]
 80035fe:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003602:	2903      	cmp	r1, #3
 8003604:	f300 87d7 	bgt.w	80045b6 <keypadsm+0x11de>
 8003608:	458a      	cmp	sl, r1
 800360a:	f300 81a7 	bgt.w	800395c <keypadsm+0x584>
		if(keypaditerator < keypadlength-1){
 800360e:	e7fe      	b.n	800360e <keypadsm+0x236>
	while(keypaditerator < 4){
 8003610:	f1ba 0f00 	cmp.w	sl, #0
 8003614:	f000 8286 	beq.w	8003b24 <keypadsm+0x74c>
 8003618:	6029      	str	r1, [r5, #0]
 800361a:	7110      	strb	r0, [r2, #4]
 800361c:	b12b      	cbz	r3, 800362a <keypadsm+0x252>
 800361e:	f886 c000 	strb.w	ip, [r6]
 8003622:	f1ba 0f00 	cmp.w	sl, #0
 8003626:	f43f aee8 	beq.w	80033fa <keypadsm+0x22>
 800362a:	f882 e003 	strb.w	lr, [r2, #3]
 800362e:	f882 8002 	strb.w	r8, [r2, #2]
 8003632:	7057      	strb	r7, [r2, #1]
 8003634:	7014      	strb	r4, [r2, #0]
 8003636:	e6e0      	b.n	80033fa <keypadsm+0x22>
			kpenum = A1;
 8003638:	2102      	movs	r1, #2
	while(keypaditerator < 4){
 800363a:	469a      	mov	sl, r3
		if(keypaditerator < keypadlength-1){
 800363c:	481d      	ldr	r0, [pc, #116]	; (80036b4 <keypadsm+0x2dc>)
 800363e:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <keypadsm+0x2e0>)
 8003640:	4e1e      	ldr	r6, [pc, #120]	; (80036bc <keypadsm+0x2e4>)
 8003642:	4d1f      	ldr	r5, [pc, #124]	; (80036c0 <keypadsm+0x2e8>)
 8003644:	f890 9000 	ldrb.w	r9, [r0]
			kpenum = A1;
 8003648:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800364a:	7910      	ldrb	r0, [r2, #4]
 800364c:	7837      	ldrb	r7, [r6, #0]
 800364e:	f892 8003 	ldrb.w	r8, [r2, #3]
 8003652:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003656:	f892 c001 	ldrb.w	ip, [r2, #1]
 800365a:	7814      	ldrb	r4, [r2, #0]
 800365c:	6829      	ldr	r1, [r5, #0]
		if(keypaditerator < keypadlength-1){
 800365e:	f109 39ff 	add.w	r9, r9, #4294967295
			if(keypadarr[4] == '.'){
 8003662:	2903      	cmp	r1, #3
 8003664:	dc10      	bgt.n	8003688 <keypadsm+0x2b0>
 8003666:	4589      	cmp	r9, r1
 8003668:	dc00      	bgt.n	800366c <keypadsm+0x294>
		if(keypaditerator < keypadlength-1){
 800366a:	e7fe      	b.n	800366a <keypadsm+0x292>
				keypaddecimal = 0;
 800366c:	282e      	cmp	r0, #46	; 0x2e
 800366e:	bf08      	it	eq
 8003670:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003672:	4640      	mov	r0, r8
				keypaddecimal = 0;
 8003674:	bf08      	it	eq
 8003676:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 8003678:	46f0      	mov	r8, lr
			keypadarr[0] = num;
 800367a:	f04f 0a01 	mov.w	sl, #1
	while(keypaditerator < 4){
 800367e:	46e6      	mov	lr, ip
 8003680:	3101      	adds	r1, #1
 8003682:	46a4      	mov	ip, r4
			keypadarr[0] = num;
 8003684:	247a      	movs	r4, #122	; 0x7a
 8003686:	e7ec      	b.n	8003662 <keypadsm+0x28a>
	while(keypaditerator < 4){
 8003688:	f1ba 0f00 	cmp.w	sl, #0
 800368c:	f000 8261 	beq.w	8003b52 <keypadsm+0x77a>
 8003690:	6029      	str	r1, [r5, #0]
 8003692:	7110      	strb	r0, [r2, #4]
 8003694:	b123      	cbz	r3, 80036a0 <keypadsm+0x2c8>
 8003696:	7037      	strb	r7, [r6, #0]
 8003698:	f1ba 0f00 	cmp.w	sl, #0
 800369c:	f43f aead 	beq.w	80033fa <keypadsm+0x22>
 80036a0:	f882 8003 	strb.w	r8, [r2, #3]
 80036a4:	f882 e002 	strb.w	lr, [r2, #2]
 80036a8:	f882 c001 	strb.w	ip, [r2, #1]
 80036ac:	7014      	strb	r4, [r2, #0]
 80036ae:	e6a4      	b.n	80033fa <keypadsm+0x22>
 80036b0:	200006b1 	.word	0x200006b1
 80036b4:	2000001c 	.word	0x2000001c
 80036b8:	20000010 	.word	0x20000010
 80036bc:	200006b0 	.word	0x200006b0
 80036c0:	20000018 	.word	0x20000018
		if(num == 'A'){
 80036c4:	2841      	cmp	r0, #65	; 0x41
 80036c6:	f000 81f1 	beq.w	8003aac <keypadsm+0x6d4>
		else if(num == 'B'){
 80036ca:	2842      	cmp	r0, #66	; 0x42
 80036cc:	f000 80e7 	beq.w	800389e <keypadsm+0x4c6>
		else if(num == 'C'){
 80036d0:	2843      	cmp	r0, #67	; 0x43
 80036d2:	f000 826c 	beq.w	8003bae <keypadsm+0x7d6>
		else if(num == 'D'){
 80036d6:	2844      	cmp	r0, #68	; 0x44
 80036d8:	f000 83f4 	beq.w	8003ec4 <keypadsm+0xaec>
		else if(num == '.'){
 80036dc:	282e      	cmp	r0, #46	; 0x2e
 80036de:	f000 8585 	beq.w	80041ec <keypadsm+0xe14>
		else if(num >= '0' && num <= '9'){
 80036e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80036e6:	2b09      	cmp	r3, #9
 80036e8:	f240 825d 	bls.w	8003ba6 <keypadsm+0x7ce>
		else if(num == '#'){
 80036ec:	2823      	cmp	r0, #35	; 0x23
 80036ee:	f000 866f 	beq.w	80043d0 <keypadsm+0xff8>
		else if(num == '+'){
 80036f2:	282b      	cmp	r0, #43	; 0x2b
 80036f4:	f000 85de 	beq.w	80042b4 <keypadsm+0xedc>
		else if(num == '-'){
 80036f8:	282d      	cmp	r0, #45	; 0x2d
 80036fa:	f47f ae7e 	bne.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 80036fe:	2300      	movs	r3, #0
 8003700:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8003702:	461c      	mov	r4, r3
		if(keypaditerator < keypadlength-1){
 8003704:	49b9      	ldr	r1, [pc, #740]	; (80039ec <keypadsm+0x614>)
 8003706:	4aba      	ldr	r2, [pc, #744]	; (80039f0 <keypadsm+0x618>)
 8003708:	4eba      	ldr	r6, [pc, #744]	; (80039f4 <keypadsm+0x61c>)
 800370a:	4dbb      	ldr	r5, [pc, #748]	; (80039f8 <keypadsm+0x620>)
 800370c:	f891 a000 	ldrb.w	sl, [r1]
 8003710:	f892 9004 	ldrb.w	r9, [r2, #4]
 8003714:	f896 c000 	ldrb.w	ip, [r6]
 8003718:	f892 e003 	ldrb.w	lr, [r2, #3]
 800371c:	f892 8002 	ldrb.w	r8, [r2, #2]
 8003720:	7850      	ldrb	r0, [r2, #1]
 8003722:	7817      	ldrb	r7, [r2, #0]
 8003724:	6829      	ldr	r1, [r5, #0]
 8003726:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 800372a:	2903      	cmp	r1, #3
 800372c:	f300 866d 	bgt.w	800440a <keypadsm+0x1032>
 8003730:	458a      	cmp	sl, r1
 8003732:	f300 8104 	bgt.w	800393e <keypadsm+0x566>
		if(keypaditerator < keypadlength-1){
 8003736:	e7fe      	b.n	8003736 <keypadsm+0x35e>
	while(keypaditerator < 4){
 8003738:	f1ba 0f00 	cmp.w	sl, #0
 800373c:	f000 80e8 	beq.w	8003910 <keypadsm+0x538>
 8003740:	6029      	str	r1, [r5, #0]
 8003742:	7110      	strb	r0, [r2, #4]
 8003744:	b123      	cbz	r3, 8003750 <keypadsm+0x378>
 8003746:	7037      	strb	r7, [r6, #0]
 8003748:	f1ba 0f00 	cmp.w	sl, #0
 800374c:	f43f ae55 	beq.w	80033fa <keypadsm+0x22>
 8003750:	f882 c003 	strb.w	ip, [r2, #3]
 8003754:	f882 e002 	strb.w	lr, [r2, #2]
 8003758:	7054      	strb	r4, [r2, #1]
 800375a:	f882 8000 	strb.w	r8, [r2]
 800375e:	e64c      	b.n	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 8003760:	f7ff fbec 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 12.00){
 8003764:	2100      	movs	r1, #0
	float temp = translatekeypad();
 8003766:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 12.00){
 8003768:	f7fd fc66 	bl	8001038 <__aeabi_fcmpge>
 800376c:	b130      	cbz	r0, 800377c <keypadsm+0x3a4>
 800376e:	4628      	mov	r0, r5
 8003770:	49a2      	ldr	r1, [pc, #648]	; (80039fc <keypadsm+0x624>)
 8003772:	f7fd fc57 	bl	8001024 <__aeabi_fcmple>
 8003776:	b108      	cbz	r0, 800377c <keypadsm+0x3a4>
				voltnum1 = translatekeypad();
 8003778:	4ba1      	ldr	r3, [pc, #644]	; (8003a00 <keypadsm+0x628>)
 800377a:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 800377c:	2100      	movs	r1, #0
 800377e:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003780:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003782:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <keypadsm+0x614>)
 8003784:	4a9a      	ldr	r2, [pc, #616]	; (80039f0 <keypadsm+0x618>)
 8003786:	4e9b      	ldr	r6, [pc, #620]	; (80039f4 <keypadsm+0x61c>)
 8003788:	4d9b      	ldr	r5, [pc, #620]	; (80039f8 <keypadsm+0x620>)
 800378a:	f893 a000 	ldrb.w	sl, [r3]
 800378e:	7910      	ldrb	r0, [r2, #4]
 8003790:	7837      	ldrb	r7, [r6, #0]
 8003792:	f892 8003 	ldrb.w	r8, [r2, #3]
 8003796:	f892 e002 	ldrb.w	lr, [r2, #2]
 800379a:	f892 9001 	ldrb.w	r9, [r2, #1]
 800379e:	f892 c000 	ldrb.w	ip, [r2]
 80037a2:	682b      	ldr	r3, [r5, #0]
 80037a4:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	dc10      	bgt.n	80037ce <keypadsm+0x3f6>
 80037ac:	459a      	cmp	sl, r3
 80037ae:	dc00      	bgt.n	80037b2 <keypadsm+0x3da>
		if(keypaditerator < keypadlength-1){
 80037b0:	e7fe      	b.n	80037b0 <keypadsm+0x3d8>
			if(keypadarr[4] == '.'){
 80037b2:	282e      	cmp	r0, #46	; 0x2e
 80037b4:	bf08      	it	eq
 80037b6:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 80037b8:	4640      	mov	r0, r8
			if(keypadarr[4] == '.'){
 80037ba:	bf08      	it	eq
 80037bc:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 80037be:	46f0      	mov	r8, lr
			keypadarr[0] = num;
 80037c0:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 80037c2:	46ce      	mov	lr, r9
 80037c4:	3301      	adds	r3, #1
 80037c6:	46e1      	mov	r9, ip
			keypadarr[0] = num;
 80037c8:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 80037cc:	e7ec      	b.n	80037a8 <keypadsm+0x3d0>
	while(keypaditerator < 4){
 80037ce:	2c00      	cmp	r4, #0
 80037d0:	f000 80a2 	beq.w	8003918 <keypadsm+0x540>
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	7110      	strb	r0, [r2, #4]
 80037d8:	b109      	cbz	r1, 80037de <keypadsm+0x406>
 80037da:	7037      	strb	r7, [r6, #0]
 80037dc:	b13c      	cbz	r4, 80037ee <keypadsm+0x416>
 80037de:	f882 8003 	strb.w	r8, [r2, #3]
 80037e2:	f882 e002 	strb.w	lr, [r2, #2]
 80037e6:	f882 9001 	strb.w	r9, [r2, #1]
 80037ea:	f882 c000 	strb.w	ip, [r2]
			first_shot = 1;
 80037ee:	2201      	movs	r2, #1
 80037f0:	4b84      	ldr	r3, [pc, #528]	; (8003a04 <keypadsm+0x62c>)
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e601      	b.n	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 80037f6:	2100      	movs	r1, #0
 80037f8:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80037fa:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 80037fc:	4b7b      	ldr	r3, [pc, #492]	; (80039ec <keypadsm+0x614>)
 80037fe:	4a7c      	ldr	r2, [pc, #496]	; (80039f0 <keypadsm+0x618>)
 8003800:	4e7c      	ldr	r6, [pc, #496]	; (80039f4 <keypadsm+0x61c>)
 8003802:	4d7d      	ldr	r5, [pc, #500]	; (80039f8 <keypadsm+0x620>)
 8003804:	f893 a000 	ldrb.w	sl, [r3]
 8003808:	7910      	ldrb	r0, [r2, #4]
 800380a:	7837      	ldrb	r7, [r6, #0]
 800380c:	f892 8003 	ldrb.w	r8, [r2, #3]
 8003810:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003814:	f892 9001 	ldrb.w	r9, [r2, #1]
 8003818:	f892 c000 	ldrb.w	ip, [r2]
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003822:	2b03      	cmp	r3, #3
 8003824:	f300 81ac 	bgt.w	8003b80 <keypadsm+0x7a8>
 8003828:	459a      	cmp	sl, r3
 800382a:	dc00      	bgt.n	800382e <keypadsm+0x456>
		if(keypaditerator < keypadlength-1){
 800382c:	e7fe      	b.n	800382c <keypadsm+0x454>
			if(keypadarr[4] == '.'){
 800382e:	282e      	cmp	r0, #46	; 0x2e
 8003830:	bf08      	it	eq
 8003832:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003834:	4640      	mov	r0, r8
			if(keypadarr[4] == '.'){
 8003836:	bf08      	it	eq
 8003838:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 800383a:	46f0      	mov	r8, lr
			keypadarr[0] = num;
 800383c:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 800383e:	46ce      	mov	lr, r9
 8003840:	3301      	adds	r3, #1
 8003842:	46e1      	mov	r9, ip
			keypadarr[0] = num;
 8003844:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8003848:	e7eb      	b.n	8003822 <keypadsm+0x44a>
			kpenum = WAIT;
 800384a:	2100      	movs	r1, #0
 800384c:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 800384e:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003850:	4b66      	ldr	r3, [pc, #408]	; (80039ec <keypadsm+0x614>)
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <keypadsm+0x618>)
 8003854:	4e67      	ldr	r6, [pc, #412]	; (80039f4 <keypadsm+0x61c>)
 8003856:	4d68      	ldr	r5, [pc, #416]	; (80039f8 <keypadsm+0x620>)
 8003858:	f893 a000 	ldrb.w	sl, [r3]
 800385c:	7910      	ldrb	r0, [r2, #4]
 800385e:	7837      	ldrb	r7, [r6, #0]
 8003860:	f892 9003 	ldrb.w	r9, [r2, #3]
 8003864:	f892 c002 	ldrb.w	ip, [r2, #2]
 8003868:	f892 e001 	ldrb.w	lr, [r2, #1]
 800386c:	f892 8000 	ldrb.w	r8, [r2]
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003876:	2b03      	cmp	r3, #3
 8003878:	f300 8158 	bgt.w	8003b2c <keypadsm+0x754>
 800387c:	459a      	cmp	sl, r3
 800387e:	dc00      	bgt.n	8003882 <keypadsm+0x4aa>
		if(keypaditerator < keypadlength-1){
 8003880:	e7fe      	b.n	8003880 <keypadsm+0x4a8>
			if(keypadarr[4] == '.'){
 8003882:	282e      	cmp	r0, #46	; 0x2e
 8003884:	bf08      	it	eq
 8003886:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003888:	4648      	mov	r0, r9
			if(keypadarr[4] == '.'){
 800388a:	bf08      	it	eq
 800388c:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 800388e:	46e1      	mov	r9, ip
			keypadarr[0] = num;
 8003890:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003892:	46f4      	mov	ip, lr
 8003894:	3301      	adds	r3, #1
 8003896:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8003898:	f04f 087a 	mov.w	r8, #122	; 0x7a
 800389c:	e7eb      	b.n	8003876 <keypadsm+0x49e>
	float temp = translatekeypad();
 800389e:	f7ff fb4d 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 0.5){
 80038a2:	2100      	movs	r1, #0
	float temp = translatekeypad();
 80038a4:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 0.5){
 80038a6:	f7fd fbc7 	bl	8001038 <__aeabi_fcmpge>
 80038aa:	b138      	cbz	r0, 80038bc <keypadsm+0x4e4>
 80038ac:	4628      	mov	r0, r5
 80038ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80038b2:	f7fd fbb7 	bl	8001024 <__aeabi_fcmple>
 80038b6:	b108      	cbz	r0, 80038bc <keypadsm+0x4e4>
				ampnum1 = translatekeypad();
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <keypadsm+0x630>)
 80038ba:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 80038bc:	2100      	movs	r1, #0
 80038be:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80038c0:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 80038c2:	4b4a      	ldr	r3, [pc, #296]	; (80039ec <keypadsm+0x614>)
 80038c4:	4a4a      	ldr	r2, [pc, #296]	; (80039f0 <keypadsm+0x618>)
 80038c6:	4e4b      	ldr	r6, [pc, #300]	; (80039f4 <keypadsm+0x61c>)
 80038c8:	4d4b      	ldr	r5, [pc, #300]	; (80039f8 <keypadsm+0x620>)
 80038ca:	f893 a000 	ldrb.w	sl, [r3]
 80038ce:	7910      	ldrb	r0, [r2, #4]
 80038d0:	7837      	ldrb	r7, [r6, #0]
 80038d2:	f892 8003 	ldrb.w	r8, [r2, #3]
 80038d6:	f892 9002 	ldrb.w	r9, [r2, #2]
 80038da:	f892 c001 	ldrb.w	ip, [r2, #1]
 80038de:	f892 e000 	ldrb.w	lr, [r2]
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	f300 8136 	bgt.w	8003b5a <keypadsm+0x782>
 80038ee:	459a      	cmp	sl, r3
 80038f0:	dc00      	bgt.n	80038f4 <keypadsm+0x51c>
		if(keypaditerator < keypadlength-1){
 80038f2:	e7fe      	b.n	80038f2 <keypadsm+0x51a>
			if(keypadarr[4] == '.'){
 80038f4:	282e      	cmp	r0, #46	; 0x2e
 80038f6:	bf08      	it	eq
 80038f8:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 80038fa:	4640      	mov	r0, r8
			if(keypadarr[4] == '.'){
 80038fc:	bf08      	it	eq
 80038fe:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003900:	46c8      	mov	r8, r9
			keypadarr[0] = num;
 8003902:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003904:	46e1      	mov	r9, ip
 8003906:	3301      	adds	r3, #1
 8003908:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 800390a:	f04f 0e7a 	mov.w	lr, #122	; 0x7a
 800390e:	e7eb      	b.n	80038e8 <keypadsm+0x510>
 8003910:	2b00      	cmp	r3, #0
 8003912:	f47f af18 	bne.w	8003746 <keypadsm+0x36e>
 8003916:	e570      	b.n	80033fa <keypadsm+0x22>
 8003918:	2900      	cmp	r1, #0
 800391a:	f47f af5e 	bne.w	80037da <keypadsm+0x402>
 800391e:	e766      	b.n	80037ee <keypadsm+0x416>
			if(keypadarr[4] == '.'){
 8003920:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8003924:	bf08      	it	eq
 8003926:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003928:	46f1      	mov	r9, lr
			if(keypadarr[4] == '.'){
 800392a:	bf08      	it	eq
 800392c:	f04f 0c00 	moveq.w	ip, #0
	while(keypaditerator < 4){
 8003930:	46be      	mov	lr, r7
			keypadarr[0] = num;
 8003932:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003934:	4647      	mov	r7, r8
 8003936:	3301      	adds	r3, #1
 8003938:	4680      	mov	r8, r0
			keypadarr[0] = num;
 800393a:	207a      	movs	r0, #122	; 0x7a
 800393c:	e5d4      	b.n	80034e8 <keypadsm+0x110>
			if(keypadarr[4] == '.'){
 800393e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8003942:	bf08      	it	eq
 8003944:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 8003946:	46f1      	mov	r9, lr
			if(keypadarr[4] == '.'){
 8003948:	bf08      	it	eq
 800394a:	f04f 0c00 	moveq.w	ip, #0
	while(keypaditerator < 4){
 800394e:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8003950:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003952:	4680      	mov	r8, r0
 8003954:	3101      	adds	r1, #1
 8003956:	4638      	mov	r0, r7
			keypadarr[0] = num;
 8003958:	277a      	movs	r7, #122	; 0x7a
 800395a:	e6e6      	b.n	800372a <keypadsm+0x352>
			if(keypadarr[4] == '.'){
 800395c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8003960:	bf08      	it	eq
 8003962:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 8003964:	4681      	mov	r9, r0
			if(keypadarr[4] == '.'){
 8003966:	bf08      	it	eq
 8003968:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800396c:	4638      	mov	r0, r7
			keypadarr[0] = num;
 800396e:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003970:	4667      	mov	r7, ip
 8003972:	3101      	adds	r1, #1
 8003974:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 8003976:	f04f 0e7a 	mov.w	lr, #122	; 0x7a
 800397a:	e642      	b.n	8003602 <keypadsm+0x22a>
			if(keypadarr[4] == '.'){
 800397c:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8003980:	bf08      	it	eq
 8003982:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 8003984:	46f1      	mov	r9, lr
			if(keypadarr[4] == '.'){
 8003986:	bf08      	it	eq
 8003988:	f04f 0800 	moveq.w	r8, #0
	while(keypaditerator < 4){
 800398c:	46e6      	mov	lr, ip
			keypadarr[0] = num;
 800398e:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003990:	46bc      	mov	ip, r7
 8003992:	3101      	adds	r1, #1
 8003994:	4607      	mov	r7, r0
			keypadarr[0] = num;
 8003996:	207a      	movs	r0, #122	; 0x7a
 8003998:	e56d      	b.n	8003476 <keypadsm+0x9e>
			kpenum = A2;
 800399a:	2104      	movs	r1, #4
	while(keypaditerator < 4){
 800399c:	469a      	mov	sl, r3
		if(keypaditerator < keypadlength-1){
 800399e:	4813      	ldr	r0, [pc, #76]	; (80039ec <keypadsm+0x614>)
 80039a0:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <keypadsm+0x618>)
 80039a2:	4e14      	ldr	r6, [pc, #80]	; (80039f4 <keypadsm+0x61c>)
 80039a4:	4d14      	ldr	r5, [pc, #80]	; (80039f8 <keypadsm+0x620>)
 80039a6:	f890 9000 	ldrb.w	r9, [r0]
			kpenum = A2;
 80039aa:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80039ac:	7910      	ldrb	r0, [r2, #4]
 80039ae:	7837      	ldrb	r7, [r6, #0]
 80039b0:	f892 e003 	ldrb.w	lr, [r2, #3]
 80039b4:	f892 c002 	ldrb.w	ip, [r2, #2]
 80039b8:	f892 8001 	ldrb.w	r8, [r2, #1]
 80039bc:	7814      	ldrb	r4, [r2, #0]
 80039be:	6829      	ldr	r1, [r5, #0]
		if(keypaditerator < keypadlength-1){
 80039c0:	f109 39ff 	add.w	r9, r9, #4294967295
			if(keypadarr[4] == '.'){
 80039c4:	2903      	cmp	r1, #3
 80039c6:	dc21      	bgt.n	8003a0c <keypadsm+0x634>
 80039c8:	4589      	cmp	r9, r1
 80039ca:	dc00      	bgt.n	80039ce <keypadsm+0x5f6>
		if(keypaditerator < keypadlength-1){
 80039cc:	e7fe      	b.n	80039cc <keypadsm+0x5f4>
				keypaddecimal = 0;
 80039ce:	282e      	cmp	r0, #46	; 0x2e
 80039d0:	bf08      	it	eq
 80039d2:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 80039d4:	4670      	mov	r0, lr
				keypaddecimal = 0;
 80039d6:	bf08      	it	eq
 80039d8:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 80039da:	46e6      	mov	lr, ip
			keypadarr[0] = num;
 80039dc:	f04f 0a01 	mov.w	sl, #1
	while(keypaditerator < 4){
 80039e0:	46c4      	mov	ip, r8
 80039e2:	3101      	adds	r1, #1
 80039e4:	46a0      	mov	r8, r4
			keypadarr[0] = num;
 80039e6:	247a      	movs	r4, #122	; 0x7a
 80039e8:	e7ec      	b.n	80039c4 <keypadsm+0x5ec>
 80039ea:	bf00      	nop
 80039ec:	2000001c 	.word	0x2000001c
 80039f0:	20000010 	.word	0x20000010
 80039f4:	200006b0 	.word	0x200006b0
 80039f8:	20000018 	.word	0x20000018
 80039fc:	41400000 	.word	0x41400000
 8003a00:	200007cc 	.word	0x200007cc
 8003a04:	2000000c 	.word	0x2000000c
 8003a08:	200003b0 	.word	0x200003b0
	while(keypaditerator < 4){
 8003a0c:	f1ba 0f00 	cmp.w	sl, #0
 8003a10:	f000 8253 	beq.w	8003eba <keypadsm+0xae2>
 8003a14:	6029      	str	r1, [r5, #0]
 8003a16:	7110      	strb	r0, [r2, #4]
 8003a18:	b123      	cbz	r3, 8003a24 <keypadsm+0x64c>
 8003a1a:	7037      	strb	r7, [r6, #0]
 8003a1c:	f1ba 0f00 	cmp.w	sl, #0
 8003a20:	f43f aceb 	beq.w	80033fa <keypadsm+0x22>
 8003a24:	f882 e003 	strb.w	lr, [r2, #3]
 8003a28:	f882 c002 	strb.w	ip, [r2, #2]
 8003a2c:	f882 8001 	strb.w	r8, [r2, #1]
 8003a30:	7014      	strb	r4, [r2, #0]
 8003a32:	e4e2      	b.n	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003a34:	2100      	movs	r1, #0
 8003a36:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003a38:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003a3a:	4bb9      	ldr	r3, [pc, #740]	; (8003d20 <keypadsm+0x948>)
 8003a3c:	4ab9      	ldr	r2, [pc, #740]	; (8003d24 <keypadsm+0x94c>)
 8003a3e:	4eba      	ldr	r6, [pc, #744]	; (8003d28 <keypadsm+0x950>)
 8003a40:	4dba      	ldr	r5, [pc, #744]	; (8003d2c <keypadsm+0x954>)
 8003a42:	f893 a000 	ldrb.w	sl, [r3]
 8003a46:	7910      	ldrb	r0, [r2, #4]
 8003a48:	7837      	ldrb	r7, [r6, #0]
 8003a4a:	f892 8003 	ldrb.w	r8, [r2, #3]
 8003a4e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003a52:	f892 9001 	ldrb.w	r9, [r2, #1]
 8003a56:	f892 c000 	ldrb.w	ip, [r2]
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	dc10      	bgt.n	8003a86 <keypadsm+0x6ae>
 8003a64:	459a      	cmp	sl, r3
 8003a66:	dc00      	bgt.n	8003a6a <keypadsm+0x692>
		if(keypaditerator < keypadlength-1){
 8003a68:	e7fe      	b.n	8003a68 <keypadsm+0x690>
			if(keypadarr[4] == '.'){
 8003a6a:	282e      	cmp	r0, #46	; 0x2e
 8003a6c:	bf08      	it	eq
 8003a6e:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003a70:	4640      	mov	r0, r8
			if(keypadarr[4] == '.'){
 8003a72:	bf08      	it	eq
 8003a74:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003a76:	46f0      	mov	r8, lr
			keypadarr[0] = num;
 8003a78:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003a7a:	46ce      	mov	lr, r9
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	46e1      	mov	r9, ip
			keypadarr[0] = num;
 8003a80:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 8003a84:	e7ec      	b.n	8003a60 <keypadsm+0x688>
	while(keypaditerator < 4){
 8003a86:	2c00      	cmp	r4, #0
 8003a88:	f000 825e 	beq.w	8003f48 <keypadsm+0xb70>
 8003a8c:	602b      	str	r3, [r5, #0]
 8003a8e:	7110      	strb	r0, [r2, #4]
 8003a90:	b119      	cbz	r1, 8003a9a <keypadsm+0x6c2>
 8003a92:	7037      	strb	r7, [r6, #0]
 8003a94:	2c00      	cmp	r4, #0
 8003a96:	f43f acb0 	beq.w	80033fa <keypadsm+0x22>
 8003a9a:	f882 8003 	strb.w	r8, [r2, #3]
 8003a9e:	f882 e002 	strb.w	lr, [r2, #2]
 8003aa2:	f882 9001 	strb.w	r9, [r2, #1]
 8003aa6:	f882 c000 	strb.w	ip, [r2]
 8003aaa:	e4a6      	b.n	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003aac:	2100      	movs	r1, #0
 8003aae:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003ab0:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003ab2:	4b9b      	ldr	r3, [pc, #620]	; (8003d20 <keypadsm+0x948>)
 8003ab4:	4a9b      	ldr	r2, [pc, #620]	; (8003d24 <keypadsm+0x94c>)
 8003ab6:	4e9c      	ldr	r6, [pc, #624]	; (8003d28 <keypadsm+0x950>)
 8003ab8:	4d9c      	ldr	r5, [pc, #624]	; (8003d2c <keypadsm+0x954>)
 8003aba:	f893 a000 	ldrb.w	sl, [r3]
 8003abe:	7910      	ldrb	r0, [r2, #4]
 8003ac0:	7837      	ldrb	r7, [r6, #0]
 8003ac2:	f892 8003 	ldrb.w	r8, [r2, #3]
 8003ac6:	f892 c002 	ldrb.w	ip, [r2, #2]
 8003aca:	f892 9001 	ldrb.w	r9, [r2, #1]
 8003ace:	f892 e000 	ldrb.w	lr, [r2]
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	dc10      	bgt.n	8003afe <keypadsm+0x726>
 8003adc:	459a      	cmp	sl, r3
 8003ade:	dc00      	bgt.n	8003ae2 <keypadsm+0x70a>
		if(keypaditerator < keypadlength-1){
 8003ae0:	e7fe      	b.n	8003ae0 <keypadsm+0x708>
			if(keypadarr[4] == '.'){
 8003ae2:	282e      	cmp	r0, #46	; 0x2e
 8003ae4:	bf08      	it	eq
 8003ae6:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003ae8:	4640      	mov	r0, r8
			if(keypadarr[4] == '.'){
 8003aea:	bf08      	it	eq
 8003aec:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003aee:	46e0      	mov	r8, ip
			keypadarr[0] = num;
 8003af0:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003af2:	46cc      	mov	ip, r9
 8003af4:	3301      	adds	r3, #1
 8003af6:	46f1      	mov	r9, lr
			keypadarr[0] = num;
 8003af8:	f04f 0e7a 	mov.w	lr, #122	; 0x7a
 8003afc:	e7ec      	b.n	8003ad8 <keypadsm+0x700>
	while(keypaditerator < 4){
 8003afe:	2c00      	cmp	r4, #0
 8003b00:	f000 821d 	beq.w	8003f3e <keypadsm+0xb66>
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	7110      	strb	r0, [r2, #4]
 8003b08:	b119      	cbz	r1, 8003b12 <keypadsm+0x73a>
 8003b0a:	7037      	strb	r7, [r6, #0]
 8003b0c:	2c00      	cmp	r4, #0
 8003b0e:	f43f ac74 	beq.w	80033fa <keypadsm+0x22>
 8003b12:	f882 8003 	strb.w	r8, [r2, #3]
 8003b16:	f882 c002 	strb.w	ip, [r2, #2]
 8003b1a:	f882 9001 	strb.w	r9, [r2, #1]
 8003b1e:	f882 e000 	strb.w	lr, [r2]
 8003b22:	e46a      	b.n	80033fa <keypadsm+0x22>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f ad7a 	bne.w	800361e <keypadsm+0x246>
 8003b2a:	e466      	b.n	80033fa <keypadsm+0x22>
 8003b2c:	2c00      	cmp	r4, #0
 8003b2e:	f000 82b6 	beq.w	800409e <keypadsm+0xcc6>
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	7110      	strb	r0, [r2, #4]
 8003b36:	b119      	cbz	r1, 8003b40 <keypadsm+0x768>
 8003b38:	7037      	strb	r7, [r6, #0]
 8003b3a:	2c00      	cmp	r4, #0
 8003b3c:	f43f ac5d 	beq.w	80033fa <keypadsm+0x22>
 8003b40:	f882 9003 	strb.w	r9, [r2, #3]
 8003b44:	f882 c002 	strb.w	ip, [r2, #2]
 8003b48:	f882 e001 	strb.w	lr, [r2, #1]
 8003b4c:	f882 8000 	strb.w	r8, [r2]
 8003b50:	e453      	b.n	80033fa <keypadsm+0x22>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f47f ad9f 	bne.w	8003696 <keypadsm+0x2be>
 8003b58:	e44f      	b.n	80033fa <keypadsm+0x22>
 8003b5a:	2c00      	cmp	r4, #0
 8003b5c:	f000 82a9 	beq.w	80040b2 <keypadsm+0xcda>
 8003b60:	602b      	str	r3, [r5, #0]
 8003b62:	7110      	strb	r0, [r2, #4]
 8003b64:	b119      	cbz	r1, 8003b6e <keypadsm+0x796>
 8003b66:	7037      	strb	r7, [r6, #0]
 8003b68:	2c00      	cmp	r4, #0
 8003b6a:	f43f ac46 	beq.w	80033fa <keypadsm+0x22>
 8003b6e:	f882 8003 	strb.w	r8, [r2, #3]
 8003b72:	f882 9002 	strb.w	r9, [r2, #2]
 8003b76:	f882 c001 	strb.w	ip, [r2, #1]
 8003b7a:	f882 e000 	strb.w	lr, [r2]
 8003b7e:	e43c      	b.n	80033fa <keypadsm+0x22>
 8003b80:	2c00      	cmp	r4, #0
 8003b82:	f000 8291 	beq.w	80040a8 <keypadsm+0xcd0>
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	7110      	strb	r0, [r2, #4]
 8003b8a:	b119      	cbz	r1, 8003b94 <keypadsm+0x7bc>
 8003b8c:	7037      	strb	r7, [r6, #0]
 8003b8e:	2c00      	cmp	r4, #0
 8003b90:	f43f ac33 	beq.w	80033fa <keypadsm+0x22>
 8003b94:	f882 8003 	strb.w	r8, [r2, #3]
 8003b98:	f882 e002 	strb.w	lr, [r2, #2]
 8003b9c:	f882 9001 	strb.w	r9, [r2, #1]
 8003ba0:	f882 c000 	strb.w	ip, [r2]
 8003ba4:	e429      	b.n	80033fa <keypadsm+0x22>
}
 8003ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			updatekeypad(num);
 8003baa:	f7ff bb65 	b.w	8003278 <updatekeypad>
			kpenum = WAIT;
 8003bae:	2100      	movs	r1, #0
 8003bb0:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003bb2:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003bb4:	4b5a      	ldr	r3, [pc, #360]	; (8003d20 <keypadsm+0x948>)
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	; (8003d24 <keypadsm+0x94c>)
 8003bb8:	4e5b      	ldr	r6, [pc, #364]	; (8003d28 <keypadsm+0x950>)
 8003bba:	4d5c      	ldr	r5, [pc, #368]	; (8003d2c <keypadsm+0x954>)
 8003bbc:	f893 a000 	ldrb.w	sl, [r3]
 8003bc0:	7910      	ldrb	r0, [r2, #4]
 8003bc2:	f896 9000 	ldrb.w	r9, [r6]
 8003bc6:	78d7      	ldrb	r7, [r2, #3]
 8003bc8:	f892 c002 	ldrb.w	ip, [r2, #2]
 8003bcc:	f892 e001 	ldrb.w	lr, [r2, #1]
 8003bd0:	f892 8000 	ldrb.w	r8, [r2]
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	dc11      	bgt.n	8003c02 <keypadsm+0x82a>
 8003bde:	459a      	cmp	sl, r3
 8003be0:	dc00      	bgt.n	8003be4 <keypadsm+0x80c>
		if(keypaditerator < keypadlength-1){
 8003be2:	e7fe      	b.n	8003be2 <keypadsm+0x80a>
			if(keypadarr[4] == '.'){
 8003be4:	282e      	cmp	r0, #46	; 0x2e
 8003be6:	bf08      	it	eq
 8003be8:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003bea:	4638      	mov	r0, r7
			if(keypadarr[4] == '.'){
 8003bec:	bf08      	it	eq
 8003bee:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8003bf2:	4667      	mov	r7, ip
			keypadarr[0] = num;
 8003bf4:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003bf6:	46f4      	mov	ip, lr
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8003bfc:	f04f 087a 	mov.w	r8, #122	; 0x7a
 8003c00:	e7eb      	b.n	8003bda <keypadsm+0x802>
	while(keypaditerator < 4){
 8003c02:	2c00      	cmp	r4, #0
 8003c04:	f000 8316 	beq.w	8004234 <keypadsm+0xe5c>
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	7110      	strb	r0, [r2, #4]
 8003c0c:	b121      	cbz	r1, 8003c18 <keypadsm+0x840>
 8003c0e:	f886 9000 	strb.w	r9, [r6]
 8003c12:	2c00      	cmp	r4, #0
 8003c14:	f43f abf1 	beq.w	80033fa <keypadsm+0x22>
 8003c18:	70d7      	strb	r7, [r2, #3]
 8003c1a:	f882 c002 	strb.w	ip, [r2, #2]
 8003c1e:	f882 e001 	strb.w	lr, [r2, #1]
 8003c22:	f882 8000 	strb.w	r8, [r2]
 8003c26:	f7ff bbe8 	b.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003c2e:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003c30:	4b3b      	ldr	r3, [pc, #236]	; (8003d20 <keypadsm+0x948>)
 8003c32:	4a3c      	ldr	r2, [pc, #240]	; (8003d24 <keypadsm+0x94c>)
 8003c34:	4e3c      	ldr	r6, [pc, #240]	; (8003d28 <keypadsm+0x950>)
 8003c36:	4d3d      	ldr	r5, [pc, #244]	; (8003d2c <keypadsm+0x954>)
 8003c38:	f893 a000 	ldrb.w	sl, [r3]
 8003c3c:	7910      	ldrb	r0, [r2, #4]
 8003c3e:	f896 e000 	ldrb.w	lr, [r6]
 8003c42:	f892 8003 	ldrb.w	r8, [r2, #3]
 8003c46:	f892 c002 	ldrb.w	ip, [r2, #2]
 8003c4a:	f892 9001 	ldrb.w	r9, [r2, #1]
 8003c4e:	7817      	ldrb	r7, [r2, #0]
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	dc10      	bgt.n	8003c7c <keypadsm+0x8a4>
 8003c5a:	459a      	cmp	sl, r3
 8003c5c:	dc00      	bgt.n	8003c60 <keypadsm+0x888>
		if(keypaditerator < keypadlength-1){
 8003c5e:	e7fe      	b.n	8003c5e <keypadsm+0x886>
			if(keypadarr[4] == '.'){
 8003c60:	282e      	cmp	r0, #46	; 0x2e
 8003c62:	bf08      	it	eq
 8003c64:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003c66:	4640      	mov	r0, r8
			if(keypadarr[4] == '.'){
 8003c68:	bf08      	it	eq
 8003c6a:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8003c6e:	46e0      	mov	r8, ip
			keypadarr[0] = num;
 8003c70:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003c72:	46cc      	mov	ip, r9
 8003c74:	3301      	adds	r3, #1
 8003c76:	46b9      	mov	r9, r7
			keypadarr[0] = num;
 8003c78:	277a      	movs	r7, #122	; 0x7a
 8003c7a:	e7ec      	b.n	8003c56 <keypadsm+0x87e>
	while(keypaditerator < 4){
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	f000 82e3 	beq.w	8004248 <keypadsm+0xe70>
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	7110      	strb	r0, [r2, #4]
 8003c86:	b121      	cbz	r1, 8003c92 <keypadsm+0x8ba>
 8003c88:	f886 e000 	strb.w	lr, [r6]
 8003c8c:	2c00      	cmp	r4, #0
 8003c8e:	f43f abb4 	beq.w	80033fa <keypadsm+0x22>
 8003c92:	f882 8003 	strb.w	r8, [r2, #3]
 8003c96:	f882 c002 	strb.w	ip, [r2, #2]
 8003c9a:	f882 9001 	strb.w	r9, [r2, #1]
 8003c9e:	7017      	strb	r7, [r2, #0]
 8003ca0:	f7ff bbab 	b.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003ca8:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003caa:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <keypadsm+0x948>)
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <keypadsm+0x94c>)
 8003cae:	4e1e      	ldr	r6, [pc, #120]	; (8003d28 <keypadsm+0x950>)
 8003cb0:	4d1e      	ldr	r5, [pc, #120]	; (8003d2c <keypadsm+0x954>)
 8003cb2:	f893 a000 	ldrb.w	sl, [r3]
 8003cb6:	7910      	ldrb	r0, [r2, #4]
 8003cb8:	f896 9000 	ldrb.w	r9, [r6]
 8003cbc:	78d7      	ldrb	r7, [r2, #3]
 8003cbe:	f892 c002 	ldrb.w	ip, [r2, #2]
 8003cc2:	f892 e001 	ldrb.w	lr, [r2, #1]
 8003cc6:	f892 8000 	ldrb.w	r8, [r2]
 8003cca:	682b      	ldr	r3, [r5, #0]
 8003ccc:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	dc11      	bgt.n	8003cf8 <keypadsm+0x920>
 8003cd4:	459a      	cmp	sl, r3
 8003cd6:	dc00      	bgt.n	8003cda <keypadsm+0x902>
		if(keypaditerator < keypadlength-1){
 8003cd8:	e7fe      	b.n	8003cd8 <keypadsm+0x900>
			if(keypadarr[4] == '.'){
 8003cda:	282e      	cmp	r0, #46	; 0x2e
 8003cdc:	bf08      	it	eq
 8003cde:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003ce0:	4638      	mov	r0, r7
			if(keypadarr[4] == '.'){
 8003ce2:	bf08      	it	eq
 8003ce4:	f04f 0900 	moveq.w	r9, #0
	while(keypaditerator < 4){
 8003ce8:	4667      	mov	r7, ip
			keypadarr[0] = num;
 8003cea:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003cec:	46f4      	mov	ip, lr
 8003cee:	3301      	adds	r3, #1
 8003cf0:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8003cf2:	f04f 087a 	mov.w	r8, #122	; 0x7a
 8003cf6:	e7eb      	b.n	8003cd0 <keypadsm+0x8f8>
	while(keypaditerator < 4){
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	f000 82a0 	beq.w	800423e <keypadsm+0xe66>
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	7110      	strb	r0, [r2, #4]
 8003d02:	b121      	cbz	r1, 8003d0e <keypadsm+0x936>
 8003d04:	f886 9000 	strb.w	r9, [r6]
 8003d08:	2c00      	cmp	r4, #0
 8003d0a:	f43f ab76 	beq.w	80033fa <keypadsm+0x22>
 8003d0e:	70d7      	strb	r7, [r2, #3]
 8003d10:	f882 c002 	strb.w	ip, [r2, #2]
 8003d14:	f882 e001 	strb.w	lr, [r2, #1]
 8003d18:	f882 8000 	strb.w	r8, [r2]
 8003d1c:	f7ff bb6d 	b.w	80033fa <keypadsm+0x22>
 8003d20:	2000001c 	.word	0x2000001c
 8003d24:	20000010 	.word	0x20000010
 8003d28:	200006b0 	.word	0x200006b0
 8003d2c:	20000018 	.word	0x20000018
			kpenum = WAIT;
 8003d30:	2100      	movs	r1, #0
 8003d32:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003d34:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003d36:	4bba      	ldr	r3, [pc, #744]	; (8004020 <keypadsm+0xc48>)
 8003d38:	4aba      	ldr	r2, [pc, #744]	; (8004024 <keypadsm+0xc4c>)
 8003d3a:	4ebb      	ldr	r6, [pc, #748]	; (8004028 <keypadsm+0xc50>)
 8003d3c:	4dbb      	ldr	r5, [pc, #748]	; (800402c <keypadsm+0xc54>)
 8003d3e:	f893 a000 	ldrb.w	sl, [r3]
 8003d42:	7910      	ldrb	r0, [r2, #4]
 8003d44:	7837      	ldrb	r7, [r6, #0]
 8003d46:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003d4a:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003d4e:	f892 8001 	ldrb.w	r8, [r2, #1]
 8003d52:	f892 9000 	ldrb.w	r9, [r2]
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	dc10      	bgt.n	8003d82 <keypadsm+0x9aa>
 8003d60:	459a      	cmp	sl, r3
 8003d62:	dc00      	bgt.n	8003d66 <keypadsm+0x98e>
		if(keypaditerator < keypadlength-1){
 8003d64:	e7fe      	b.n	8003d64 <keypadsm+0x98c>
			if(keypadarr[4] == '.'){
 8003d66:	282e      	cmp	r0, #46	; 0x2e
 8003d68:	bf08      	it	eq
 8003d6a:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003d6c:	4660      	mov	r0, ip
			if(keypadarr[4] == '.'){
 8003d6e:	bf08      	it	eq
 8003d70:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003d72:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 8003d74:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003d76:	46c6      	mov	lr, r8
 8003d78:	3301      	adds	r3, #1
 8003d7a:	46c8      	mov	r8, r9
			keypadarr[0] = num;
 8003d7c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8003d80:	e7ec      	b.n	8003d5c <keypadsm+0x984>
	while(keypaditerator < 4){
 8003d82:	2c00      	cmp	r4, #0
 8003d84:	f000 8251 	beq.w	800422a <keypadsm+0xe52>
 8003d88:	602b      	str	r3, [r5, #0]
 8003d8a:	7110      	strb	r0, [r2, #4]
 8003d8c:	b119      	cbz	r1, 8003d96 <keypadsm+0x9be>
 8003d8e:	7037      	strb	r7, [r6, #0]
 8003d90:	2c00      	cmp	r4, #0
 8003d92:	f43f ab32 	beq.w	80033fa <keypadsm+0x22>
 8003d96:	f882 c003 	strb.w	ip, [r2, #3]
 8003d9a:	f882 e002 	strb.w	lr, [r2, #2]
 8003d9e:	f882 8001 	strb.w	r8, [r2, #1]
 8003da2:	f882 9000 	strb.w	r9, [r2]
 8003da6:	f7ff bb28 	b.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003daa:	2100      	movs	r1, #0
 8003dac:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003dae:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003db0:	4b9b      	ldr	r3, [pc, #620]	; (8004020 <keypadsm+0xc48>)
 8003db2:	4a9c      	ldr	r2, [pc, #624]	; (8004024 <keypadsm+0xc4c>)
 8003db4:	4e9c      	ldr	r6, [pc, #624]	; (8004028 <keypadsm+0xc50>)
 8003db6:	4d9d      	ldr	r5, [pc, #628]	; (800402c <keypadsm+0xc54>)
 8003db8:	f893 a000 	ldrb.w	sl, [r3]
 8003dbc:	7910      	ldrb	r0, [r2, #4]
 8003dbe:	f896 c000 	ldrb.w	ip, [r6]
 8003dc2:	f892 e003 	ldrb.w	lr, [r2, #3]
 8003dc6:	f892 8002 	ldrb.w	r8, [r2, #2]
 8003dca:	f892 9001 	ldrb.w	r9, [r2, #1]
 8003dce:	7817      	ldrb	r7, [r2, #0]
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	dc10      	bgt.n	8003dfc <keypadsm+0xa24>
 8003dda:	459a      	cmp	sl, r3
 8003ddc:	dc00      	bgt.n	8003de0 <keypadsm+0xa08>
		if(keypaditerator < keypadlength-1){
 8003dde:	e7fe      	b.n	8003dde <keypadsm+0xa06>
			if(keypadarr[4] == '.'){
 8003de0:	282e      	cmp	r0, #46	; 0x2e
 8003de2:	bf08      	it	eq
 8003de4:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003de6:	4670      	mov	r0, lr
			if(keypadarr[4] == '.'){
 8003de8:	bf08      	it	eq
 8003dea:	f04f 0c00 	moveq.w	ip, #0
	while(keypaditerator < 4){
 8003dee:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8003df0:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003df2:	46c8      	mov	r8, r9
 8003df4:	3301      	adds	r3, #1
 8003df6:	46b9      	mov	r9, r7
			keypadarr[0] = num;
 8003df8:	277a      	movs	r7, #122	; 0x7a
 8003dfa:	e7ec      	b.n	8003dd6 <keypadsm+0x9fe>
	while(keypaditerator < 4){
 8003dfc:	2c00      	cmp	r4, #0
 8003dfe:	f000 82dd 	beq.w	80043bc <keypadsm+0xfe4>
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	7110      	strb	r0, [r2, #4]
 8003e06:	b121      	cbz	r1, 8003e12 <keypadsm+0xa3a>
 8003e08:	f886 c000 	strb.w	ip, [r6]
 8003e0c:	2c00      	cmp	r4, #0
 8003e0e:	f43f aaf4 	beq.w	80033fa <keypadsm+0x22>
 8003e12:	f882 e003 	strb.w	lr, [r2, #3]
 8003e16:	f882 8002 	strb.w	r8, [r2, #2]
 8003e1a:	f882 9001 	strb.w	r9, [r2, #1]
 8003e1e:	7017      	strb	r7, [r2, #0]
 8003e20:	f7ff baeb 	b.w	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 8003e24:	f7ff f88a 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 12.00){
 8003e28:	2100      	movs	r1, #0
	float temp = translatekeypad();
 8003e2a:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 12.00){
 8003e2c:	f7fd f904 	bl	8001038 <__aeabi_fcmpge>
 8003e30:	b130      	cbz	r0, 8003e40 <keypadsm+0xa68>
 8003e32:	4628      	mov	r0, r5
 8003e34:	497e      	ldr	r1, [pc, #504]	; (8004030 <keypadsm+0xc58>)
 8003e36:	f7fd f8f5 	bl	8001024 <__aeabi_fcmple>
 8003e3a:	b108      	cbz	r0, 8003e40 <keypadsm+0xa68>
				voltnum2 = translatekeypad();
 8003e3c:	4b7d      	ldr	r3, [pc, #500]	; (8004034 <keypadsm+0xc5c>)
 8003e3e:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 8003e40:	2100      	movs	r1, #0
 8003e42:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003e44:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003e46:	4b76      	ldr	r3, [pc, #472]	; (8004020 <keypadsm+0xc48>)
 8003e48:	4a76      	ldr	r2, [pc, #472]	; (8004024 <keypadsm+0xc4c>)
 8003e4a:	4e77      	ldr	r6, [pc, #476]	; (8004028 <keypadsm+0xc50>)
 8003e4c:	4d77      	ldr	r5, [pc, #476]	; (800402c <keypadsm+0xc54>)
 8003e4e:	f893 a000 	ldrb.w	sl, [r3]
 8003e52:	7910      	ldrb	r0, [r2, #4]
 8003e54:	7837      	ldrb	r7, [r6, #0]
 8003e56:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003e5a:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003e5e:	f892 8001 	ldrb.w	r8, [r2, #1]
 8003e62:	f892 9000 	ldrb.w	r9, [r2]
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	dc10      	bgt.n	8003e92 <keypadsm+0xaba>
 8003e70:	459a      	cmp	sl, r3
 8003e72:	dc00      	bgt.n	8003e76 <keypadsm+0xa9e>
		if(keypaditerator < keypadlength-1){
 8003e74:	e7fe      	b.n	8003e74 <keypadsm+0xa9c>
			if(keypadarr[4] == '.'){
 8003e76:	282e      	cmp	r0, #46	; 0x2e
 8003e78:	bf08      	it	eq
 8003e7a:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003e7c:	4660      	mov	r0, ip
			if(keypadarr[4] == '.'){
 8003e7e:	bf08      	it	eq
 8003e80:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003e82:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 8003e84:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003e86:	46c6      	mov	lr, r8
 8003e88:	3301      	adds	r3, #1
 8003e8a:	46c8      	mov	r8, r9
			keypadarr[0] = num;
 8003e8c:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8003e90:	e7ec      	b.n	8003e6c <keypadsm+0xa94>
	while(keypaditerator < 4){
 8003e92:	2c00      	cmp	r4, #0
 8003e94:	f000 828d 	beq.w	80043b2 <keypadsm+0xfda>
 8003e98:	602b      	str	r3, [r5, #0]
 8003e9a:	7110      	strb	r0, [r2, #4]
 8003e9c:	b119      	cbz	r1, 8003ea6 <keypadsm+0xace>
 8003e9e:	7037      	strb	r7, [r6, #0]
 8003ea0:	2c00      	cmp	r4, #0
 8003ea2:	f43f aaaa 	beq.w	80033fa <keypadsm+0x22>
 8003ea6:	f882 c003 	strb.w	ip, [r2, #3]
 8003eaa:	f882 e002 	strb.w	lr, [r2, #2]
 8003eae:	f882 8001 	strb.w	r8, [r2, #1]
 8003eb2:	f882 9000 	strb.w	r9, [r2]
 8003eb6:	f7ff baa0 	b.w	80033fa <keypadsm+0x22>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f47f adad 	bne.w	8003a1a <keypadsm+0x642>
 8003ec0:	f7ff ba9b 	b.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003ec8:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003eca:	4b55      	ldr	r3, [pc, #340]	; (8004020 <keypadsm+0xc48>)
 8003ecc:	4a55      	ldr	r2, [pc, #340]	; (8004024 <keypadsm+0xc4c>)
 8003ece:	4e56      	ldr	r6, [pc, #344]	; (8004028 <keypadsm+0xc50>)
 8003ed0:	4d56      	ldr	r5, [pc, #344]	; (800402c <keypadsm+0xc54>)
 8003ed2:	f893 a000 	ldrb.w	sl, [r3]
 8003ed6:	7910      	ldrb	r0, [r2, #4]
 8003ed8:	7837      	ldrb	r7, [r6, #0]
 8003eda:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003ede:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003ee2:	f892 8001 	ldrb.w	r8, [r2, #1]
 8003ee6:	f892 9000 	ldrb.w	r9, [r2]
 8003eea:	682b      	ldr	r3, [r5, #0]
 8003eec:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	dc10      	bgt.n	8003f16 <keypadsm+0xb3e>
 8003ef4:	459a      	cmp	sl, r3
 8003ef6:	dc00      	bgt.n	8003efa <keypadsm+0xb22>
		if(keypaditerator < keypadlength-1){
 8003ef8:	e7fe      	b.n	8003ef8 <keypadsm+0xb20>
			if(keypadarr[4] == '.'){
 8003efa:	282e      	cmp	r0, #46	; 0x2e
 8003efc:	bf08      	it	eq
 8003efe:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003f00:	4660      	mov	r0, ip
			if(keypadarr[4] == '.'){
 8003f02:	bf08      	it	eq
 8003f04:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003f06:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 8003f08:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003f0a:	46c6      	mov	lr, r8
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	46c8      	mov	r8, r9
			keypadarr[0] = num;
 8003f10:	f04f 097a 	mov.w	r9, #122	; 0x7a
 8003f14:	e7ec      	b.n	8003ef0 <keypadsm+0xb18>
	while(keypaditerator < 4){
 8003f16:	2c00      	cmp	r4, #0
 8003f18:	f000 8255 	beq.w	80043c6 <keypadsm+0xfee>
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	7110      	strb	r0, [r2, #4]
 8003f20:	b119      	cbz	r1, 8003f2a <keypadsm+0xb52>
 8003f22:	7037      	strb	r7, [r6, #0]
 8003f24:	2c00      	cmp	r4, #0
 8003f26:	f43f aa68 	beq.w	80033fa <keypadsm+0x22>
 8003f2a:	f882 c003 	strb.w	ip, [r2, #3]
 8003f2e:	f882 e002 	strb.w	lr, [r2, #2]
 8003f32:	f882 8001 	strb.w	r8, [r2, #1]
 8003f36:	f882 9000 	strb.w	r9, [r2]
 8003f3a:	f7ff ba5e 	b.w	80033fa <keypadsm+0x22>
 8003f3e:	2900      	cmp	r1, #0
 8003f40:	f47f ade3 	bne.w	8003b0a <keypadsm+0x732>
 8003f44:	f7ff ba59 	b.w	80033fa <keypadsm+0x22>
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	f47f ada2 	bne.w	8003a92 <keypadsm+0x6ba>
 8003f4e:	f7ff ba54 	b.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003f52:	2100      	movs	r1, #0
 8003f54:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003f56:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003f58:	4b31      	ldr	r3, [pc, #196]	; (8004020 <keypadsm+0xc48>)
 8003f5a:	4a32      	ldr	r2, [pc, #200]	; (8004024 <keypadsm+0xc4c>)
 8003f5c:	4e32      	ldr	r6, [pc, #200]	; (8004028 <keypadsm+0xc50>)
 8003f5e:	4d33      	ldr	r5, [pc, #204]	; (800402c <keypadsm+0xc54>)
 8003f60:	f893 a000 	ldrb.w	sl, [r3]
 8003f64:	f892 9004 	ldrb.w	r9, [r2, #4]
 8003f68:	7837      	ldrb	r7, [r6, #0]
 8003f6a:	f892 c003 	ldrb.w	ip, [r2, #3]
 8003f6e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8003f72:	f892 8001 	ldrb.w	r8, [r2, #1]
 8003f76:	7810      	ldrb	r0, [r2, #0]
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	dc10      	bgt.n	8003fa4 <keypadsm+0xbcc>
 8003f82:	4553      	cmp	r3, sl
 8003f84:	db00      	blt.n	8003f88 <keypadsm+0xbb0>
		if(keypaditerator < keypadlength-1){
 8003f86:	e7fe      	b.n	8003f86 <keypadsm+0xbae>
			if(keypadarr[4] == '.'){
 8003f88:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8003f8c:	bf08      	it	eq
 8003f8e:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8003f90:	46e1      	mov	r9, ip
			if(keypadarr[4] == '.'){
 8003f92:	bf08      	it	eq
 8003f94:	2700      	moveq	r7, #0
	while(keypaditerator < 4){
 8003f96:	46f4      	mov	ip, lr
			keypadarr[0] = num;
 8003f98:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8003f9a:	46c6      	mov	lr, r8
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	4680      	mov	r8, r0
			keypadarr[0] = num;
 8003fa0:	207a      	movs	r0, #122	; 0x7a
 8003fa2:	e7ec      	b.n	8003f7e <keypadsm+0xba6>
	while(keypaditerator < 4){
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	f000 8296 	beq.w	80044d6 <keypadsm+0x10fe>
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	f882 9004 	strb.w	r9, [r2, #4]
 8003fb0:	b119      	cbz	r1, 8003fba <keypadsm+0xbe2>
 8003fb2:	7037      	strb	r7, [r6, #0]
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	f43f aa20 	beq.w	80033fa <keypadsm+0x22>
 8003fba:	f882 c003 	strb.w	ip, [r2, #3]
 8003fbe:	f882 e002 	strb.w	lr, [r2, #2]
 8003fc2:	f882 8001 	strb.w	r8, [r2, #1]
 8003fc6:	7010      	strb	r0, [r2, #0]
 8003fc8:	f7ff ba17 	b.w	80033fa <keypadsm+0x22>
			kpenum = WAIT;
 8003fcc:	2100      	movs	r1, #0
 8003fce:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8003fd0:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <keypadsm+0xc48>)
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <keypadsm+0xc4c>)
 8003fd6:	4e14      	ldr	r6, [pc, #80]	; (8004028 <keypadsm+0xc50>)
 8003fd8:	4d14      	ldr	r5, [pc, #80]	; (800402c <keypadsm+0xc54>)
 8003fda:	f893 a000 	ldrb.w	sl, [r3]
 8003fde:	f892 9004 	ldrb.w	r9, [r2, #4]
 8003fe2:	f896 c000 	ldrb.w	ip, [r6]
 8003fe6:	f892 e003 	ldrb.w	lr, [r2, #3]
 8003fea:	f892 8002 	ldrb.w	r8, [r2, #2]
 8003fee:	7850      	ldrb	r0, [r2, #1]
 8003ff0:	7817      	ldrb	r7, [r2, #0]
 8003ff2:	682b      	ldr	r3, [r5, #0]
 8003ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	dc1d      	bgt.n	8004038 <keypadsm+0xc60>
 8003ffc:	4553      	cmp	r3, sl
 8003ffe:	db00      	blt.n	8004002 <keypadsm+0xc2a>
		if(keypaditerator < keypadlength-1){
 8004000:	e7fe      	b.n	8004000 <keypadsm+0xc28>
			if(keypadarr[4] == '.'){
 8004002:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004006:	bf08      	it	eq
 8004008:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 800400a:	46f1      	mov	r9, lr
			if(keypadarr[4] == '.'){
 800400c:	bf08      	it	eq
 800400e:	f04f 0c00 	moveq.w	ip, #0
	while(keypaditerator < 4){
 8004012:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8004014:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8004016:	4680      	mov	r8, r0
 8004018:	3301      	adds	r3, #1
 800401a:	4638      	mov	r0, r7
			keypadarr[0] = num;
 800401c:	277a      	movs	r7, #122	; 0x7a
 800401e:	e7eb      	b.n	8003ff8 <keypadsm+0xc20>
 8004020:	2000001c 	.word	0x2000001c
 8004024:	20000010 	.word	0x20000010
 8004028:	200006b0 	.word	0x200006b0
 800402c:	20000018 	.word	0x20000018
 8004030:	41400000 	.word	0x41400000
 8004034:	200007d0 	.word	0x200007d0
	while(keypaditerator < 4){
 8004038:	2c00      	cmp	r4, #0
 800403a:	f000 8247 	beq.w	80044cc <keypadsm+0x10f4>
 800403e:	602b      	str	r3, [r5, #0]
 8004040:	f882 9004 	strb.w	r9, [r2, #4]
 8004044:	b121      	cbz	r1, 8004050 <keypadsm+0xc78>
 8004046:	f886 c000 	strb.w	ip, [r6]
 800404a:	2c00      	cmp	r4, #0
 800404c:	f43f a9d5 	beq.w	80033fa <keypadsm+0x22>
 8004050:	f882 e003 	strb.w	lr, [r2, #3]
 8004054:	f882 8002 	strb.w	r8, [r2, #2]
 8004058:	7050      	strb	r0, [r2, #1]
 800405a:	7017      	strb	r7, [r2, #0]
 800405c:	f7ff b9cd 	b.w	80033fa <keypadsm+0x22>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8004060:	4bb1      	ldr	r3, [pc, #708]	; (8004328 <keypadsm+0xf50>)
 8004062:	4db2      	ldr	r5, [pc, #712]	; (800432c <keypadsm+0xf54>)
 8004064:	781c      	ldrb	r4, [r3, #0]
 8004066:	682f      	ldr	r7, [r5, #0]
 8004068:	1ee3      	subs	r3, r4, #3
 800406a:	42bb      	cmp	r3, r7
 800406c:	f73f a9c5 	bgt.w	80033fa <keypadsm+0x22>
 8004070:	4eaf      	ldr	r6, [pc, #700]	; (8004330 <keypadsm+0xf58>)
 8004072:	7833      	ldrb	r3, [r6, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f a9c0 	bne.w	80033fa <keypadsm+0x22>
			for(int i = 1; i < keypadlength; i++){
 800407a:	2c01      	cmp	r4, #1
 800407c:	dd04      	ble.n	8004088 <keypadsm+0xcb0>
				keypadarr[i-1] = keypadarr[i];
 800407e:	49ad      	ldr	r1, [pc, #692]	; (8004334 <keypadsm+0xf5c>)
 8004080:	1e62      	subs	r2, r4, #1
 8004082:	1e48      	subs	r0, r1, #1
 8004084:	f006 fbfc 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 8004088:	4bab      	ldr	r3, [pc, #684]	; (8004338 <keypadsm+0xf60>)
 800408a:	222e      	movs	r2, #46	; 0x2e
 800408c:	441c      	add	r4, r3
			keypaddecimal = 1;
 800408e:	2301      	movs	r3, #1
			keypaditerator--;
 8004090:	3f01      	subs	r7, #1
 8004092:	602f      	str	r7, [r5, #0]
			keypadarr[keypadlength-1] = num;
 8004094:	f804 2c01 	strb.w	r2, [r4, #-1]
			keypaddecimal = 1;
 8004098:	7033      	strb	r3, [r6, #0]
			keypaditerator--;
 800409a:	f7ff b9ae 	b.w	80033fa <keypadsm+0x22>
 800409e:	2900      	cmp	r1, #0
 80040a0:	f47f ad4a 	bne.w	8003b38 <keypadsm+0x760>
 80040a4:	f7ff b9a9 	b.w	80033fa <keypadsm+0x22>
 80040a8:	2900      	cmp	r1, #0
 80040aa:	f47f ad6f 	bne.w	8003b8c <keypadsm+0x7b4>
 80040ae:	f7ff b9a4 	b.w	80033fa <keypadsm+0x22>
 80040b2:	2900      	cmp	r1, #0
 80040b4:	f47f ad57 	bne.w	8003b66 <keypadsm+0x78e>
 80040b8:	f7ff b99f 	b.w	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 80040bc:	f7fe ff3e 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 0.5){
 80040c0:	2100      	movs	r1, #0
	float temp = translatekeypad();
 80040c2:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 0.5){
 80040c4:	f7fc ffb8 	bl	8001038 <__aeabi_fcmpge>
 80040c8:	b138      	cbz	r0, 80040da <keypadsm+0xd02>
 80040ca:	4628      	mov	r0, r5
 80040cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040d0:	f7fc ffa8 	bl	8001024 <__aeabi_fcmple>
 80040d4:	b108      	cbz	r0, 80040da <keypadsm+0xd02>
				ampnum2 = translatekeypad();
 80040d6:	4b99      	ldr	r3, [pc, #612]	; (800433c <keypadsm+0xf64>)
 80040d8:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 80040da:	2100      	movs	r1, #0
 80040dc:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80040de:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 80040e0:	4b91      	ldr	r3, [pc, #580]	; (8004328 <keypadsm+0xf50>)
 80040e2:	4a95      	ldr	r2, [pc, #596]	; (8004338 <keypadsm+0xf60>)
 80040e4:	4e92      	ldr	r6, [pc, #584]	; (8004330 <keypadsm+0xf58>)
 80040e6:	4d91      	ldr	r5, [pc, #580]	; (800432c <keypadsm+0xf54>)
 80040e8:	f893 a000 	ldrb.w	sl, [r3]
 80040ec:	f892 9004 	ldrb.w	r9, [r2, #4]
 80040f0:	7830      	ldrb	r0, [r6, #0]
 80040f2:	f892 8003 	ldrb.w	r8, [r2, #3]
 80040f6:	f892 e002 	ldrb.w	lr, [r2, #2]
 80040fa:	f892 c001 	ldrb.w	ip, [r2, #1]
 80040fe:	7817      	ldrb	r7, [r2, #0]
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8004106:	2b03      	cmp	r3, #3
 8004108:	dc10      	bgt.n	800412c <keypadsm+0xd54>
 800410a:	4553      	cmp	r3, sl
 800410c:	db00      	blt.n	8004110 <keypadsm+0xd38>
		if(keypaditerator < keypadlength-1){
 800410e:	e7fe      	b.n	800410e <keypadsm+0xd36>
			if(keypadarr[4] == '.'){
 8004110:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004114:	bf08      	it	eq
 8004116:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8004118:	46c1      	mov	r9, r8
			if(keypadarr[4] == '.'){
 800411a:	bf08      	it	eq
 800411c:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 800411e:	46f0      	mov	r8, lr
			keypadarr[0] = num;
 8004120:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8004122:	46e6      	mov	lr, ip
 8004124:	3301      	adds	r3, #1
 8004126:	46bc      	mov	ip, r7
			keypadarr[0] = num;
 8004128:	277a      	movs	r7, #122	; 0x7a
 800412a:	e7ec      	b.n	8004106 <keypadsm+0xd2e>
	while(keypaditerator < 4){
 800412c:	2c00      	cmp	r4, #0
 800412e:	f000 82b2 	beq.w	8004696 <keypadsm+0x12be>
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f882 9004 	strb.w	r9, [r2, #4]
 8004138:	b119      	cbz	r1, 8004142 <keypadsm+0xd6a>
 800413a:	7030      	strb	r0, [r6, #0]
 800413c:	2c00      	cmp	r4, #0
 800413e:	f43f a95c 	beq.w	80033fa <keypadsm+0x22>
 8004142:	f882 8003 	strb.w	r8, [r2, #3]
 8004146:	f882 e002 	strb.w	lr, [r2, #2]
 800414a:	f882 c001 	strb.w	ip, [r2, #1]
 800414e:	7017      	strb	r7, [r2, #0]
 8004150:	f7ff b953 	b.w	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 8004154:	f7fe fef2 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 12.00){
 8004158:	2100      	movs	r1, #0
	float temp = translatekeypad();
 800415a:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 12.00){
 800415c:	f7fc ff6c 	bl	8001038 <__aeabi_fcmpge>
 8004160:	b130      	cbz	r0, 8004170 <keypadsm+0xd98>
 8004162:	4628      	mov	r0, r5
 8004164:	4976      	ldr	r1, [pc, #472]	; (8004340 <keypadsm+0xf68>)
 8004166:	f7fc ff5d 	bl	8001024 <__aeabi_fcmple>
 800416a:	b108      	cbz	r0, 8004170 <keypadsm+0xd98>
				voltnum1 = translatekeypad();
 800416c:	4b75      	ldr	r3, [pc, #468]	; (8004344 <keypadsm+0xf6c>)
 800416e:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 8004170:	2100      	movs	r1, #0
 8004172:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 8004174:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 8004176:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <keypadsm+0xf50>)
 8004178:	4a6f      	ldr	r2, [pc, #444]	; (8004338 <keypadsm+0xf60>)
 800417a:	4e6d      	ldr	r6, [pc, #436]	; (8004330 <keypadsm+0xf58>)
 800417c:	4d6b      	ldr	r5, [pc, #428]	; (800432c <keypadsm+0xf54>)
 800417e:	f893 a000 	ldrb.w	sl, [r3]
 8004182:	f892 9004 	ldrb.w	r9, [r2, #4]
 8004186:	f896 c000 	ldrb.w	ip, [r6]
 800418a:	f892 e003 	ldrb.w	lr, [r2, #3]
 800418e:	7897      	ldrb	r7, [r2, #2]
 8004190:	f892 8001 	ldrb.w	r8, [r2, #1]
 8004194:	7810      	ldrb	r0, [r2, #0]
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 800419c:	2b03      	cmp	r3, #3
 800419e:	dc11      	bgt.n	80041c4 <keypadsm+0xdec>
 80041a0:	459a      	cmp	sl, r3
 80041a2:	dc00      	bgt.n	80041a6 <keypadsm+0xdce>
		if(keypaditerator < keypadlength-1){
 80041a4:	e7fe      	b.n	80041a4 <keypadsm+0xdcc>
			if(keypadarr[4] == '.'){
 80041a6:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80041aa:	bf08      	it	eq
 80041ac:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 80041ae:	46f1      	mov	r9, lr
			if(keypadarr[4] == '.'){
 80041b0:	bf08      	it	eq
 80041b2:	f04f 0c00 	moveq.w	ip, #0
	while(keypaditerator < 4){
 80041b6:	46be      	mov	lr, r7
			keypadarr[0] = num;
 80041b8:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 80041ba:	4647      	mov	r7, r8
 80041bc:	3301      	adds	r3, #1
 80041be:	4680      	mov	r8, r0
			keypadarr[0] = num;
 80041c0:	207a      	movs	r0, #122	; 0x7a
 80041c2:	e7eb      	b.n	800419c <keypadsm+0xdc4>
	while(keypaditerator < 4){
 80041c4:	2c00      	cmp	r4, #0
 80041c6:	f000 826b 	beq.w	80046a0 <keypadsm+0x12c8>
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f882 9004 	strb.w	r9, [r2, #4]
 80041d0:	b121      	cbz	r1, 80041dc <keypadsm+0xe04>
 80041d2:	f886 c000 	strb.w	ip, [r6]
 80041d6:	2c00      	cmp	r4, #0
 80041d8:	f43f ab09 	beq.w	80037ee <keypadsm+0x416>
 80041dc:	f882 e003 	strb.w	lr, [r2, #3]
 80041e0:	7097      	strb	r7, [r2, #2]
 80041e2:	f882 8001 	strb.w	r8, [r2, #1]
 80041e6:	7010      	strb	r0, [r2, #0]
 80041e8:	f7ff bb01 	b.w	80037ee <keypadsm+0x416>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80041ec:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <keypadsm+0xf50>)
 80041ee:	4d4f      	ldr	r5, [pc, #316]	; (800432c <keypadsm+0xf54>)
 80041f0:	781c      	ldrb	r4, [r3, #0]
 80041f2:	682f      	ldr	r7, [r5, #0]
 80041f4:	1ee3      	subs	r3, r4, #3
 80041f6:	42bb      	cmp	r3, r7
 80041f8:	f73f a8ff 	bgt.w	80033fa <keypadsm+0x22>
 80041fc:	4e4c      	ldr	r6, [pc, #304]	; (8004330 <keypadsm+0xf58>)
 80041fe:	7833      	ldrb	r3, [r6, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f a8fa 	bne.w	80033fa <keypadsm+0x22>
			for(int i = 1; i < keypadlength; i++){
 8004206:	2c01      	cmp	r4, #1
 8004208:	dd04      	ble.n	8004214 <keypadsm+0xe3c>
				keypadarr[i-1] = keypadarr[i];
 800420a:	494a      	ldr	r1, [pc, #296]	; (8004334 <keypadsm+0xf5c>)
 800420c:	1e62      	subs	r2, r4, #1
 800420e:	1e48      	subs	r0, r1, #1
 8004210:	f006 fb36 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 8004214:	4b48      	ldr	r3, [pc, #288]	; (8004338 <keypadsm+0xf60>)
 8004216:	222e      	movs	r2, #46	; 0x2e
 8004218:	441c      	add	r4, r3
			keypaddecimal = 1;
 800421a:	2301      	movs	r3, #1
			keypaditerator--;
 800421c:	3f01      	subs	r7, #1
 800421e:	602f      	str	r7, [r5, #0]
			keypadarr[keypadlength-1] = num;
 8004220:	f804 2c01 	strb.w	r2, [r4, #-1]
			keypaddecimal = 1;
 8004224:	7033      	strb	r3, [r6, #0]
			keypaditerator--;
 8004226:	f7ff b8e8 	b.w	80033fa <keypadsm+0x22>
 800422a:	2900      	cmp	r1, #0
 800422c:	f47f adaf 	bne.w	8003d8e <keypadsm+0x9b6>
 8004230:	f7ff b8e3 	b.w	80033fa <keypadsm+0x22>
 8004234:	2900      	cmp	r1, #0
 8004236:	f47f acea 	bne.w	8003c0e <keypadsm+0x836>
 800423a:	f7ff b8de 	b.w	80033fa <keypadsm+0x22>
 800423e:	2900      	cmp	r1, #0
 8004240:	f47f ad60 	bne.w	8003d04 <keypadsm+0x92c>
 8004244:	f7ff b8d9 	b.w	80033fa <keypadsm+0x22>
 8004248:	2900      	cmp	r1, #0
 800424a:	f47f ad1d 	bne.w	8003c88 <keypadsm+0x8b0>
 800424e:	f7ff b8d4 	b.w	80033fa <keypadsm+0x22>
		if(keypaditerator < keypadlength-1){
 8004252:	4b35      	ldr	r3, [pc, #212]	; (8004328 <keypadsm+0xf50>)
 8004254:	4d35      	ldr	r5, [pc, #212]	; (800432c <keypadsm+0xf54>)
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	682b      	ldr	r3, [r5, #0]
 800425a:	3a01      	subs	r2, #1
 800425c:	429a      	cmp	r2, r3
 800425e:	f77f a8cc 	ble.w	80033fa <keypadsm+0x22>
			if(keypadarr[4] == '.'){
 8004262:	4a35      	ldr	r2, [pc, #212]	; (8004338 <keypadsm+0xf60>)
 8004264:	7911      	ldrb	r1, [r2, #4]
 8004266:	292e      	cmp	r1, #46	; 0x2e
 8004268:	d102      	bne.n	8004270 <keypadsm+0xe98>
				keypaddecimal = 0;
 800426a:	2000      	movs	r0, #0
 800426c:	4930      	ldr	r1, [pc, #192]	; (8004330 <keypadsm+0xf58>)
 800426e:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8004270:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8004272:	78d0      	ldrb	r0, [r2, #3]
			keypaditerator++;
 8004274:	3301      	adds	r3, #1
				keypadarr[i+1] = keypadarr[i];
 8004276:	7110      	strb	r0, [r2, #4]
 8004278:	7890      	ldrb	r0, [r2, #2]
			keypaditerator++;
 800427a:	602b      	str	r3, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 800427c:	70d0      	strb	r0, [r2, #3]
 800427e:	7813      	ldrb	r3, [r2, #0]
 8004280:	7850      	ldrb	r0, [r2, #1]
			keypadarr[0] = num;
 8004282:	7011      	strb	r1, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8004284:	7090      	strb	r0, [r2, #2]
 8004286:	7053      	strb	r3, [r2, #1]
			keypaditerator++;
 8004288:	f7ff b8b7 	b.w	80033fa <keypadsm+0x22>
	while(keypaditerator < 4){
 800428c:	2c00      	cmp	r4, #0
 800428e:	f000 8211 	beq.w	80046b4 <keypadsm+0x12dc>
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f882 9004 	strb.w	r9, [r2, #4]
 8004298:	b121      	cbz	r1, 80042a4 <keypadsm+0xecc>
 800429a:	f886 c000 	strb.w	ip, [r6]
 800429e:	2c00      	cmp	r4, #0
 80042a0:	f43f a8ab 	beq.w	80033fa <keypadsm+0x22>
 80042a4:	f882 e003 	strb.w	lr, [r2, #3]
 80042a8:	7097      	strb	r7, [r2, #2]
 80042aa:	f882 8001 	strb.w	r8, [r2, #1]
 80042ae:	7010      	strb	r0, [r2, #0]
 80042b0:	f7ff b8a3 	b.w	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 80042b4:	f7fe fe42 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 0.5){
 80042b8:	2100      	movs	r1, #0
	float temp = translatekeypad();
 80042ba:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 0.5){
 80042bc:	f7fc febc 	bl	8001038 <__aeabi_fcmpge>
 80042c0:	b138      	cbz	r0, 80042d2 <keypadsm+0xefa>
 80042c2:	4628      	mov	r0, r5
 80042c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80042c8:	f7fc feac 	bl	8001024 <__aeabi_fcmple>
 80042cc:	b108      	cbz	r0, 80042d2 <keypadsm+0xefa>
				ampnum1 = translatekeypad();
 80042ce:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <keypadsm+0xf70>)
 80042d0:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 80042d2:	2100      	movs	r1, #0
 80042d4:	7021      	strb	r1, [r4, #0]
	while(keypaditerator < 4){
 80042d6:	460c      	mov	r4, r1
		if(keypaditerator < keypadlength-1){
 80042d8:	4b13      	ldr	r3, [pc, #76]	; (8004328 <keypadsm+0xf50>)
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <keypadsm+0xf60>)
 80042dc:	4e14      	ldr	r6, [pc, #80]	; (8004330 <keypadsm+0xf58>)
 80042de:	4d13      	ldr	r5, [pc, #76]	; (800432c <keypadsm+0xf54>)
 80042e0:	f893 a000 	ldrb.w	sl, [r3]
 80042e4:	f892 9004 	ldrb.w	r9, [r2, #4]
 80042e8:	7830      	ldrb	r0, [r6, #0]
 80042ea:	78d7      	ldrb	r7, [r2, #3]
 80042ec:	f892 c002 	ldrb.w	ip, [r2, #2]
 80042f0:	f892 e001 	ldrb.w	lr, [r2, #1]
 80042f4:	f892 8000 	ldrb.w	r8, [r2]
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 80042fe:	2b03      	cmp	r3, #3
 8004300:	dc24      	bgt.n	800434c <keypadsm+0xf74>
 8004302:	459a      	cmp	sl, r3
 8004304:	dc00      	bgt.n	8004308 <keypadsm+0xf30>
		if(keypaditerator < keypadlength-1){
 8004306:	e7fe      	b.n	8004306 <keypadsm+0xf2e>
			if(keypadarr[4] == '.'){
 8004308:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800430c:	bf08      	it	eq
 800430e:	2101      	moveq	r1, #1
	while(keypaditerator < 4){
 8004310:	46b9      	mov	r9, r7
			if(keypadarr[4] == '.'){
 8004312:	bf08      	it	eq
 8004314:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 8004316:	4667      	mov	r7, ip
			keypadarr[0] = num;
 8004318:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 800431a:	46f4      	mov	ip, lr
 800431c:	3301      	adds	r3, #1
 800431e:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8004320:	f04f 087a 	mov.w	r8, #122	; 0x7a
 8004324:	e7eb      	b.n	80042fe <keypadsm+0xf26>
 8004326:	bf00      	nop
 8004328:	2000001c 	.word	0x2000001c
 800432c:	20000018 	.word	0x20000018
 8004330:	200006b0 	.word	0x200006b0
 8004334:	20000011 	.word	0x20000011
 8004338:	20000010 	.word	0x20000010
 800433c:	200003b4 	.word	0x200003b4
 8004340:	41400000 	.word	0x41400000
 8004344:	200007cc 	.word	0x200007cc
 8004348:	200003b0 	.word	0x200003b0
	while(keypaditerator < 4){
 800434c:	2c00      	cmp	r4, #0
 800434e:	f000 81ac 	beq.w	80046aa <keypadsm+0x12d2>
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f882 9004 	strb.w	r9, [r2, #4]
 8004358:	b119      	cbz	r1, 8004362 <keypadsm+0xf8a>
 800435a:	7030      	strb	r0, [r6, #0]
 800435c:	2c00      	cmp	r4, #0
 800435e:	f43f a84c 	beq.w	80033fa <keypadsm+0x22>
 8004362:	70d7      	strb	r7, [r2, #3]
 8004364:	f882 c002 	strb.w	ip, [r2, #2]
 8004368:	f882 e001 	strb.w	lr, [r2, #1]
 800436c:	f882 8000 	strb.w	r8, [r2]
 8004370:	f7ff b843 	b.w	80033fa <keypadsm+0x22>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8004374:	4ba8      	ldr	r3, [pc, #672]	; (8004618 <keypadsm+0x1240>)
 8004376:	4da9      	ldr	r5, [pc, #676]	; (800461c <keypadsm+0x1244>)
 8004378:	781c      	ldrb	r4, [r3, #0]
 800437a:	682f      	ldr	r7, [r5, #0]
 800437c:	1ee3      	subs	r3, r4, #3
 800437e:	42bb      	cmp	r3, r7
 8004380:	f73f a83b 	bgt.w	80033fa <keypadsm+0x22>
 8004384:	4ea6      	ldr	r6, [pc, #664]	; (8004620 <keypadsm+0x1248>)
 8004386:	7833      	ldrb	r3, [r6, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f a836 	bne.w	80033fa <keypadsm+0x22>
			for(int i = 1; i < keypadlength; i++){
 800438e:	2c01      	cmp	r4, #1
 8004390:	dd04      	ble.n	800439c <keypadsm+0xfc4>
				keypadarr[i-1] = keypadarr[i];
 8004392:	49a4      	ldr	r1, [pc, #656]	; (8004624 <keypadsm+0x124c>)
 8004394:	1e62      	subs	r2, r4, #1
 8004396:	1e48      	subs	r0, r1, #1
 8004398:	f006 fa72 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 800439c:	4ba2      	ldr	r3, [pc, #648]	; (8004628 <keypadsm+0x1250>)
 800439e:	222e      	movs	r2, #46	; 0x2e
 80043a0:	441c      	add	r4, r3
			keypaddecimal = 1;
 80043a2:	2301      	movs	r3, #1
			keypaditerator--;
 80043a4:	3f01      	subs	r7, #1
 80043a6:	602f      	str	r7, [r5, #0]
			keypadarr[keypadlength-1] = num;
 80043a8:	f804 2c01 	strb.w	r2, [r4, #-1]
			keypaddecimal = 1;
 80043ac:	7033      	strb	r3, [r6, #0]
			keypaditerator--;
 80043ae:	f7ff b824 	b.w	80033fa <keypadsm+0x22>
 80043b2:	2900      	cmp	r1, #0
 80043b4:	f47f ad73 	bne.w	8003e9e <keypadsm+0xac6>
 80043b8:	f7ff b81f 	b.w	80033fa <keypadsm+0x22>
 80043bc:	2900      	cmp	r1, #0
 80043be:	f47f ad23 	bne.w	8003e08 <keypadsm+0xa30>
 80043c2:	f7ff b81a 	b.w	80033fa <keypadsm+0x22>
 80043c6:	2900      	cmp	r1, #0
 80043c8:	f47f adab 	bne.w	8003f22 <keypadsm+0xb4a>
 80043cc:	f7ff b815 	b.w	80033fa <keypadsm+0x22>
		if(keypaditerator < keypadlength-1){
 80043d0:	4b91      	ldr	r3, [pc, #580]	; (8004618 <keypadsm+0x1240>)
 80043d2:	4d92      	ldr	r5, [pc, #584]	; (800461c <keypadsm+0x1244>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	3a01      	subs	r2, #1
 80043da:	429a      	cmp	r2, r3
 80043dc:	f77f a80d 	ble.w	80033fa <keypadsm+0x22>
			if(keypadarr[4] == '.'){
 80043e0:	4a91      	ldr	r2, [pc, #580]	; (8004628 <keypadsm+0x1250>)
 80043e2:	7911      	ldrb	r1, [r2, #4]
 80043e4:	292e      	cmp	r1, #46	; 0x2e
 80043e6:	d102      	bne.n	80043ee <keypadsm+0x1016>
				keypaddecimal = 0;
 80043e8:	2000      	movs	r0, #0
 80043ea:	498d      	ldr	r1, [pc, #564]	; (8004620 <keypadsm+0x1248>)
 80043ec:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80043ee:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80043f0:	78d0      	ldrb	r0, [r2, #3]
			keypaditerator++;
 80043f2:	3301      	adds	r3, #1
				keypadarr[i+1] = keypadarr[i];
 80043f4:	7110      	strb	r0, [r2, #4]
 80043f6:	7890      	ldrb	r0, [r2, #2]
			keypaditerator++;
 80043f8:	602b      	str	r3, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 80043fa:	70d0      	strb	r0, [r2, #3]
 80043fc:	7813      	ldrb	r3, [r2, #0]
 80043fe:	7850      	ldrb	r0, [r2, #1]
			keypadarr[0] = num;
 8004400:	7011      	strb	r1, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8004402:	7090      	strb	r0, [r2, #2]
 8004404:	7053      	strb	r3, [r2, #1]
			keypaditerator++;
 8004406:	f7fe bff8 	b.w	80033fa <keypadsm+0x22>
	while(keypaditerator < 4){
 800440a:	2c00      	cmp	r4, #0
 800440c:	f000 8160 	beq.w	80046d0 <keypadsm+0x12f8>
 8004410:	6029      	str	r1, [r5, #0]
 8004412:	f882 9004 	strb.w	r9, [r2, #4]
 8004416:	b123      	cbz	r3, 8004422 <keypadsm+0x104a>
 8004418:	f886 c000 	strb.w	ip, [r6]
 800441c:	2c00      	cmp	r4, #0
 800441e:	f43e afec 	beq.w	80033fa <keypadsm+0x22>
 8004422:	f882 e003 	strb.w	lr, [r2, #3]
 8004426:	f882 8002 	strb.w	r8, [r2, #2]
 800442a:	7050      	strb	r0, [r2, #1]
 800442c:	7017      	strb	r7, [r2, #0]
 800442e:	f7fe bfe4 	b.w	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 8004432:	f7fe fd83 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 12.00){
 8004436:	2100      	movs	r1, #0
	float temp = translatekeypad();
 8004438:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 12.00){
 800443a:	f7fc fdfd 	bl	8001038 <__aeabi_fcmpge>
 800443e:	b130      	cbz	r0, 800444e <keypadsm+0x1076>
 8004440:	4628      	mov	r0, r5
 8004442:	497a      	ldr	r1, [pc, #488]	; (800462c <keypadsm+0x1254>)
 8004444:	f7fc fdee 	bl	8001024 <__aeabi_fcmple>
 8004448:	b108      	cbz	r0, 800444e <keypadsm+0x1076>
				voltnum2 = translatekeypad();
 800444a:	4b79      	ldr	r3, [pc, #484]	; (8004630 <keypadsm+0x1258>)
 800444c:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 800444e:	2300      	movs	r3, #0
 8004450:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004452:	461c      	mov	r4, r3
		if(keypaditerator < keypadlength-1){
 8004454:	4970      	ldr	r1, [pc, #448]	; (8004618 <keypadsm+0x1240>)
 8004456:	4a74      	ldr	r2, [pc, #464]	; (8004628 <keypadsm+0x1250>)
 8004458:	4e71      	ldr	r6, [pc, #452]	; (8004620 <keypadsm+0x1248>)
 800445a:	4d70      	ldr	r5, [pc, #448]	; (800461c <keypadsm+0x1244>)
 800445c:	f891 a000 	ldrb.w	sl, [r1]
 8004460:	f892 9004 	ldrb.w	r9, [r2, #4]
 8004464:	f896 e000 	ldrb.w	lr, [r6]
 8004468:	f892 8003 	ldrb.w	r8, [r2, #3]
 800446c:	7890      	ldrb	r0, [r2, #2]
 800446e:	7857      	ldrb	r7, [r2, #1]
 8004470:	f892 c000 	ldrb.w	ip, [r2]
 8004474:	6829      	ldr	r1, [r5, #0]
 8004476:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 800447a:	2903      	cmp	r1, #3
 800447c:	dc12      	bgt.n	80044a4 <keypadsm+0x10cc>
 800447e:	458a      	cmp	sl, r1
 8004480:	dc00      	bgt.n	8004484 <keypadsm+0x10ac>
		if(keypaditerator < keypadlength-1){
 8004482:	e7fe      	b.n	8004482 <keypadsm+0x10aa>
			if(keypadarr[4] == '.'){
 8004484:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004488:	bf08      	it	eq
 800448a:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 800448c:	46c1      	mov	r9, r8
			if(keypadarr[4] == '.'){
 800448e:	bf08      	it	eq
 8004490:	f04f 0e00 	moveq.w	lr, #0
	while(keypaditerator < 4){
 8004494:	4680      	mov	r8, r0
			keypadarr[0] = num;
 8004496:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8004498:	4638      	mov	r0, r7
 800449a:	3101      	adds	r1, #1
 800449c:	4667      	mov	r7, ip
			keypadarr[0] = num;
 800449e:	f04f 0c7a 	mov.w	ip, #122	; 0x7a
 80044a2:	e7ea      	b.n	800447a <keypadsm+0x10a2>
	while(keypaditerator < 4){
 80044a4:	2c00      	cmp	r4, #0
 80044a6:	f000 811d 	beq.w	80046e4 <keypadsm+0x130c>
 80044aa:	6029      	str	r1, [r5, #0]
 80044ac:	f882 9004 	strb.w	r9, [r2, #4]
 80044b0:	b123      	cbz	r3, 80044bc <keypadsm+0x10e4>
 80044b2:	f886 e000 	strb.w	lr, [r6]
 80044b6:	2c00      	cmp	r4, #0
 80044b8:	f43e af9f 	beq.w	80033fa <keypadsm+0x22>
 80044bc:	f882 8003 	strb.w	r8, [r2, #3]
 80044c0:	7090      	strb	r0, [r2, #2]
 80044c2:	7057      	strb	r7, [r2, #1]
 80044c4:	f882 c000 	strb.w	ip, [r2]
 80044c8:	f7fe bf97 	b.w	80033fa <keypadsm+0x22>
 80044cc:	2900      	cmp	r1, #0
 80044ce:	f47f adba 	bne.w	8004046 <keypadsm+0xc6e>
 80044d2:	f7fe bf92 	b.w	80033fa <keypadsm+0x22>
 80044d6:	2900      	cmp	r1, #0
 80044d8:	f47f ad6b 	bne.w	8003fb2 <keypadsm+0xbda>
 80044dc:	f7fe bf8d 	b.w	80033fa <keypadsm+0x22>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 80044e0:	4b4d      	ldr	r3, [pc, #308]	; (8004618 <keypadsm+0x1240>)
 80044e2:	4d4e      	ldr	r5, [pc, #312]	; (800461c <keypadsm+0x1244>)
 80044e4:	781c      	ldrb	r4, [r3, #0]
 80044e6:	682f      	ldr	r7, [r5, #0]
 80044e8:	1ee3      	subs	r3, r4, #3
 80044ea:	42bb      	cmp	r3, r7
 80044ec:	f73e af85 	bgt.w	80033fa <keypadsm+0x22>
 80044f0:	4e4b      	ldr	r6, [pc, #300]	; (8004620 <keypadsm+0x1248>)
 80044f2:	7833      	ldrb	r3, [r6, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47e af80 	bne.w	80033fa <keypadsm+0x22>
			for(int i = 1; i < keypadlength; i++){
 80044fa:	2c01      	cmp	r4, #1
 80044fc:	dd04      	ble.n	8004508 <keypadsm+0x1130>
				keypadarr[i-1] = keypadarr[i];
 80044fe:	4949      	ldr	r1, [pc, #292]	; (8004624 <keypadsm+0x124c>)
 8004500:	1e62      	subs	r2, r4, #1
 8004502:	1e48      	subs	r0, r1, #1
 8004504:	f006 f9bc 	bl	800a880 <memmove>
			keypadarr[keypadlength-1] = num;
 8004508:	4b47      	ldr	r3, [pc, #284]	; (8004628 <keypadsm+0x1250>)
 800450a:	222e      	movs	r2, #46	; 0x2e
 800450c:	441c      	add	r4, r3
			keypaddecimal = 1;
 800450e:	2301      	movs	r3, #1
			keypaditerator--;
 8004510:	3f01      	subs	r7, #1
 8004512:	602f      	str	r7, [r5, #0]
			keypadarr[keypadlength-1] = num;
 8004514:	f804 2c01 	strb.w	r2, [r4, #-1]
			keypaddecimal = 1;
 8004518:	7033      	strb	r3, [r6, #0]
			keypaditerator--;
 800451a:	f7fe bf6e 	b.w	80033fa <keypadsm+0x22>
	float temp = translatekeypad();
 800451e:	f7fe fd0d 	bl	8002f3c <translatekeypad>
		if(temp >= 0 && temp <= 0.5){
 8004522:	2100      	movs	r1, #0
	float temp = translatekeypad();
 8004524:	4605      	mov	r5, r0
		if(temp >= 0 && temp <= 0.5){
 8004526:	f7fc fd87 	bl	8001038 <__aeabi_fcmpge>
 800452a:	b138      	cbz	r0, 800453c <keypadsm+0x1164>
 800452c:	4628      	mov	r0, r5
 800452e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004532:	f7fc fd77 	bl	8001024 <__aeabi_fcmple>
 8004536:	b108      	cbz	r0, 800453c <keypadsm+0x1164>
				ampnum2 = translatekeypad();
 8004538:	4b3e      	ldr	r3, [pc, #248]	; (8004634 <keypadsm+0x125c>)
 800453a:	601d      	str	r5, [r3, #0]
			kpenum = WAIT;
 800453c:	2300      	movs	r3, #0
 800453e:	7023      	strb	r3, [r4, #0]
	while(keypaditerator < 4){
 8004540:	461c      	mov	r4, r3
		if(keypaditerator < keypadlength-1){
 8004542:	4935      	ldr	r1, [pc, #212]	; (8004618 <keypadsm+0x1240>)
 8004544:	4a38      	ldr	r2, [pc, #224]	; (8004628 <keypadsm+0x1250>)
 8004546:	4e36      	ldr	r6, [pc, #216]	; (8004620 <keypadsm+0x1248>)
 8004548:	4d34      	ldr	r5, [pc, #208]	; (800461c <keypadsm+0x1244>)
 800454a:	f891 a000 	ldrb.w	sl, [r1]
 800454e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8004552:	7830      	ldrb	r0, [r6, #0]
 8004554:	f892 e003 	ldrb.w	lr, [r2, #3]
 8004558:	f892 8002 	ldrb.w	r8, [r2, #2]
 800455c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8004560:	7817      	ldrb	r7, [r2, #0]
 8004562:	6829      	ldr	r1, [r5, #0]
 8004564:	f10a 3aff 	add.w	sl, sl, #4294967295
			if(keypadarr[4] == '.'){
 8004568:	2903      	cmp	r1, #3
 800456a:	dc10      	bgt.n	800458e <keypadsm+0x11b6>
 800456c:	4551      	cmp	r1, sl
 800456e:	db00      	blt.n	8004572 <keypadsm+0x119a>
		if(keypaditerator < keypadlength-1){
 8004570:	e7fe      	b.n	8004570 <keypadsm+0x1198>
			if(keypadarr[4] == '.'){
 8004572:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8004576:	bf08      	it	eq
 8004578:	2301      	moveq	r3, #1
	while(keypaditerator < 4){
 800457a:	46f1      	mov	r9, lr
			if(keypadarr[4] == '.'){
 800457c:	bf08      	it	eq
 800457e:	2000      	moveq	r0, #0
	while(keypaditerator < 4){
 8004580:	46c6      	mov	lr, r8
			keypadarr[0] = num;
 8004582:	2401      	movs	r4, #1
	while(keypaditerator < 4){
 8004584:	46e0      	mov	r8, ip
 8004586:	3101      	adds	r1, #1
 8004588:	46bc      	mov	ip, r7
			keypadarr[0] = num;
 800458a:	277a      	movs	r7, #122	; 0x7a
 800458c:	e7ec      	b.n	8004568 <keypadsm+0x1190>
	while(keypaditerator < 4){
 800458e:	2c00      	cmp	r4, #0
 8004590:	f000 8095 	beq.w	80046be <keypadsm+0x12e6>
 8004594:	6029      	str	r1, [r5, #0]
 8004596:	f882 9004 	strb.w	r9, [r2, #4]
 800459a:	b11b      	cbz	r3, 80045a4 <keypadsm+0x11cc>
 800459c:	7030      	strb	r0, [r6, #0]
 800459e:	2c00      	cmp	r4, #0
 80045a0:	f43e af2b 	beq.w	80033fa <keypadsm+0x22>
 80045a4:	f882 e003 	strb.w	lr, [r2, #3]
 80045a8:	f882 8002 	strb.w	r8, [r2, #2]
 80045ac:	f882 c001 	strb.w	ip, [r2, #1]
 80045b0:	7017      	strb	r7, [r2, #0]
 80045b2:	f7fe bf22 	b.w	80033fa <keypadsm+0x22>
 80045b6:	2c00      	cmp	r4, #0
 80045b8:	f000 808f 	beq.w	80046da <keypadsm+0x1302>
 80045bc:	6029      	str	r1, [r5, #0]
 80045be:	f882 9004 	strb.w	r9, [r2, #4]
 80045c2:	b123      	cbz	r3, 80045ce <keypadsm+0x11f6>
 80045c4:	f886 8000 	strb.w	r8, [r6]
 80045c8:	2c00      	cmp	r4, #0
 80045ca:	f43e af16 	beq.w	80033fa <keypadsm+0x22>
 80045ce:	70d0      	strb	r0, [r2, #3]
 80045d0:	7097      	strb	r7, [r2, #2]
 80045d2:	f882 c001 	strb.w	ip, [r2, #1]
 80045d6:	f882 e000 	strb.w	lr, [r2]
 80045da:	f7fe bf0e 	b.w	80033fa <keypadsm+0x22>
		if(keypaditerator < keypadlength-1){
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <keypadsm+0x1240>)
 80045e0:	4d0e      	ldr	r5, [pc, #56]	; (800461c <keypadsm+0x1244>)
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	3a01      	subs	r2, #1
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f77e af06 	ble.w	80033fa <keypadsm+0x22>
			if(keypadarr[4] == '.'){
 80045ee:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <keypadsm+0x1250>)
 80045f0:	7911      	ldrb	r1, [r2, #4]
 80045f2:	292e      	cmp	r1, #46	; 0x2e
 80045f4:	d102      	bne.n	80045fc <keypadsm+0x1224>
				keypaddecimal = 0;
 80045f6:	2000      	movs	r0, #0
 80045f8:	4909      	ldr	r1, [pc, #36]	; (8004620 <keypadsm+0x1248>)
 80045fa:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 80045fc:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 80045fe:	78d0      	ldrb	r0, [r2, #3]
			keypaditerator++;
 8004600:	3301      	adds	r3, #1
				keypadarr[i+1] = keypadarr[i];
 8004602:	7110      	strb	r0, [r2, #4]
 8004604:	7890      	ldrb	r0, [r2, #2]
			keypaditerator++;
 8004606:	602b      	str	r3, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004608:	70d0      	strb	r0, [r2, #3]
 800460a:	7813      	ldrb	r3, [r2, #0]
 800460c:	7850      	ldrb	r0, [r2, #1]
			keypadarr[0] = num;
 800460e:	7011      	strb	r1, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 8004610:	7090      	strb	r0, [r2, #2]
 8004612:	7053      	strb	r3, [r2, #1]
			keypaditerator++;
 8004614:	f7fe bef1 	b.w	80033fa <keypadsm+0x22>
 8004618:	2000001c 	.word	0x2000001c
 800461c:	20000018 	.word	0x20000018
 8004620:	200006b0 	.word	0x200006b0
 8004624:	20000011 	.word	0x20000011
 8004628:	20000010 	.word	0x20000010
 800462c:	41400000 	.word	0x41400000
 8004630:	200007d0 	.word	0x200007d0
 8004634:	200003b4 	.word	0x200003b4
		if(keypaditerator < keypadlength-1){
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <keypadsm+0x1318>)
 800463a:	4d2e      	ldr	r5, [pc, #184]	; (80046f4 <keypadsm+0x131c>)
 800463c:	781a      	ldrb	r2, [r3, #0]
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	3a01      	subs	r2, #1
 8004642:	429a      	cmp	r2, r3
 8004644:	f77e aed9 	ble.w	80033fa <keypadsm+0x22>
			if(keypadarr[4] == '.'){
 8004648:	4a2b      	ldr	r2, [pc, #172]	; (80046f8 <keypadsm+0x1320>)
 800464a:	7911      	ldrb	r1, [r2, #4]
 800464c:	292e      	cmp	r1, #46	; 0x2e
 800464e:	d102      	bne.n	8004656 <keypadsm+0x127e>
				keypaddecimal = 0;
 8004650:	2000      	movs	r0, #0
 8004652:	492a      	ldr	r1, [pc, #168]	; (80046fc <keypadsm+0x1324>)
 8004654:	7008      	strb	r0, [r1, #0]
			keypadarr[0] = num;
 8004656:	217a      	movs	r1, #122	; 0x7a
				keypadarr[i+1] = keypadarr[i];
 8004658:	78d0      	ldrb	r0, [r2, #3]
			keypaditerator++;
 800465a:	3301      	adds	r3, #1
				keypadarr[i+1] = keypadarr[i];
 800465c:	7110      	strb	r0, [r2, #4]
 800465e:	7890      	ldrb	r0, [r2, #2]
			keypaditerator++;
 8004660:	602b      	str	r3, [r5, #0]
				keypadarr[i+1] = keypadarr[i];
 8004662:	70d0      	strb	r0, [r2, #3]
 8004664:	7813      	ldrb	r3, [r2, #0]
 8004666:	7850      	ldrb	r0, [r2, #1]
			keypadarr[0] = num;
 8004668:	7011      	strb	r1, [r2, #0]
				keypadarr[i+1] = keypadarr[i];
 800466a:	7090      	strb	r0, [r2, #2]
 800466c:	7053      	strb	r3, [r2, #1]
			keypaditerator++;
 800466e:	f7fe bec4 	b.w	80033fa <keypadsm+0x22>
	while(keypaditerator < 4){
 8004672:	b34c      	cbz	r4, 80046c8 <keypadsm+0x12f0>
 8004674:	6029      	str	r1, [r5, #0]
 8004676:	f882 9004 	strb.w	r9, [r2, #4]
 800467a:	b123      	cbz	r3, 8004686 <keypadsm+0x12ae>
 800467c:	f886 8000 	strb.w	r8, [r6]
 8004680:	2c00      	cmp	r4, #0
 8004682:	f43e aeba 	beq.w	80033fa <keypadsm+0x22>
 8004686:	f882 e003 	strb.w	lr, [r2, #3]
 800468a:	f882 c002 	strb.w	ip, [r2, #2]
 800468e:	7057      	strb	r7, [r2, #1]
 8004690:	7010      	strb	r0, [r2, #0]
}
 8004692:	f7fe beb2 	b.w	80033fa <keypadsm+0x22>
 8004696:	2900      	cmp	r1, #0
 8004698:	f47f ad4f 	bne.w	800413a <keypadsm+0xd62>
 800469c:	f7fe bead 	b.w	80033fa <keypadsm+0x22>
 80046a0:	2900      	cmp	r1, #0
 80046a2:	f47f ad96 	bne.w	80041d2 <keypadsm+0xdfa>
 80046a6:	f7ff b8a2 	b.w	80037ee <keypadsm+0x416>
 80046aa:	2900      	cmp	r1, #0
 80046ac:	f47f ae55 	bne.w	800435a <keypadsm+0xf82>
 80046b0:	f7fe bea3 	b.w	80033fa <keypadsm+0x22>
 80046b4:	2900      	cmp	r1, #0
 80046b6:	f47f adf0 	bne.w	800429a <keypadsm+0xec2>
 80046ba:	f7fe be9e 	b.w	80033fa <keypadsm+0x22>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f47f af6c 	bne.w	800459c <keypadsm+0x11c4>
 80046c4:	f7fe be99 	b.w	80033fa <keypadsm+0x22>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1d7      	bne.n	800467c <keypadsm+0x12a4>
 80046cc:	f7fe be95 	b.w	80033fa <keypadsm+0x22>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f aea1 	bne.w	8004418 <keypadsm+0x1040>
 80046d6:	f7fe be90 	b.w	80033fa <keypadsm+0x22>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f af72 	bne.w	80045c4 <keypadsm+0x11ec>
 80046e0:	f7fe be8b 	b.w	80033fa <keypadsm+0x22>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f aee4 	bne.w	80044b2 <keypadsm+0x10da>
 80046ea:	f7fe be86 	b.w	80033fa <keypadsm+0x22>
 80046ee:	bf00      	nop
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	20000018 	.word	0x20000018
 80046f8:	20000010 	.word	0x20000010
 80046fc:	200006b0 	.word	0x200006b0

08004700 <rowInput>:
void rowInput(void){
 8004700:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004702:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8004704:	4e30      	ldr	r6, [pc, #192]	; (80047c8 <rowInput+0xc8>)
void rowInput(void){
 8004706:	b086      	sub	sp, #24
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8004708:	4630      	mov	r0, r6
 800470a:	f44f 6180 	mov.w	r1, #1024	; 0x400
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470e:	e9cd 4400 	strd	r4, r4, [sp]
 8004712:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004716:	9404      	str	r4, [sp, #16]
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8004718:	f001 fec0 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 800471c:	4630      	mov	r0, r6
 800471e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004722:	f001 febb 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8004726:	4630      	mov	r0, r6
 8004728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800472c:	4d27      	ldr	r5, [pc, #156]	; (80047cc <rowInput+0xcc>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 800472e:	f001 feb5 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8004732:	4630      	mov	r0, r6
 8004734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004738:	f001 feb0 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 800473c:	4630      	mov	r0, r6
 800473e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004742:	f001 feab 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8004746:	4628      	mov	r0, r5
 8004748:	2140      	movs	r1, #64	; 0x40
 800474a:	f001 fea7 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 800474e:	4628      	mov	r0, r5
 8004750:	2180      	movs	r1, #128	; 0x80
 8004752:	f001 fea3 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 8004756:	4628      	mov	r0, r5
 8004758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800475c:	f001 fe9e 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8004760:	4628      	mov	r0, r5
 8004762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004766:	f001 fe99 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800476a:	4622      	mov	r2, r4
 800476c:	4628      	mov	r0, r5
 800476e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8004772:	f001 ff2b 	bl	80065cc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8004776:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800477a:	2301      	movs	r3, #1
 800477c:	e9cd 2300 	strd	r2, r3, [sp]
 8004780:	2200      	movs	r2, #0
 8004782:	2300      	movs	r3, #0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8004784:	4669      	mov	r1, sp
 8004786:	4628      	mov	r0, r5
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8004788:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800478c:	f001 fd9c 	bl	80062c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8004790:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8004794:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004798:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800479c:	2301      	movs	r3, #1
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800479e:	4669      	mov	r1, sp
 80047a0:	4630      	mov	r0, r6
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047a2:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 80047a4:	f001 fd90 	bl	80062c8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 80047a8:	4622      	mov	r2, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80047b0:	f001 ff0c 	bl	80065cc <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80047b4:	4622      	mov	r2, r4
 80047b6:	4621      	mov	r1, r4
 80047b8:	2028      	movs	r0, #40	; 0x28
 80047ba:	f001 fad3 	bl	8005d64 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80047be:	2028      	movs	r0, #40	; 0x28
 80047c0:	f001 fb0e 	bl	8005de0 <HAL_NVIC_EnableIRQ>
}
 80047c4:	b006      	add	sp, #24
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	40020400 	.word	0x40020400
 80047cc:	40020800 	.word	0x40020800

080047d0 <columnInput>:
void columnInput(void){
 80047d0:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d2:	2400      	movs	r4, #0
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80047d4:	4d2d      	ldr	r5, [pc, #180]	; (800488c <columnInput+0xbc>)
void columnInput(void){
 80047d6:	b086      	sub	sp, #24
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80047d8:	2028      	movs	r0, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047da:	e9cd 4400 	strd	r4, r4, [sp]
 80047de:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80047e2:	9404      	str	r4, [sp, #16]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80047e4:	f001 fb0a 	bl	8005dfc <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80047e8:	4628      	mov	r0, r5
 80047ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047ee:	f001 fe55 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80047f2:	4628      	mov	r0, r5
 80047f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047f8:	f001 fe50 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80047fc:	4628      	mov	r0, r5
 80047fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 8004802:	4e23      	ldr	r6, [pc, #140]	; (8004890 <columnInput+0xc0>)
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 8004804:	f001 fe4a 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 8004808:	4628      	mov	r0, r5
 800480a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800480e:	f001 fe45 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 8004812:	4628      	mov	r0, r5
 8004814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004818:	f001 fe40 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 800481c:	4630      	mov	r0, r6
 800481e:	2140      	movs	r1, #64	; 0x40
 8004820:	f001 fe3c 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 8004824:	4630      	mov	r0, r6
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	f001 fe38 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 800482c:	4630      	mov	r0, r6
 800482e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004832:	f001 fe33 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8004836:	4630      	mov	r0, r6
 8004838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800483c:	f001 fe2e 	bl	800649c <HAL_GPIO_DeInit>
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8004840:	4622      	mov	r2, r4
 8004842:	4628      	mov	r0, r5
 8004844:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004848:	f001 fec0 	bl	80065cc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 800484c:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 8004850:	2301      	movs	r3, #1
 8004852:	e9cd 2300 	strd	r2, r3, [sp]
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 800485a:	4628      	mov	r0, r5
 800485c:	4669      	mov	r1, sp
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 800485e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8004862:	f001 fd31 	bl	80062c8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004866:	2001      	movs	r0, #1
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8004868:	2300      	movs	r3, #0
 800486a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800486e:	4669      	mov	r1, sp
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004870:	9002      	str	r0, [sp, #8]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8004872:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8004874:	e9cd 2300 	strd	r2, r3, [sp]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8004878:	f001 fd26 	bl	80062c8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 800487c:	4622      	mov	r2, r4
 800487e:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004882:	4630      	mov	r0, r6
 8004884:	f001 fea2 	bl	80065cc <HAL_GPIO_WritePin>
}
 8004888:	b006      	add	sp, #24
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	40020400 	.word	0x40020400
 8004890:	40020800 	.word	0x40020800

08004894 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == Row_1_Pin){
 8004894:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4604      	mov	r4, r0
	if(GPIO_Pin == Row_1_Pin){
 800489c:	d010      	beq.n	80048c0 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_Pin == Row_2_Pin){
 800489e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80048a2:	d044      	beq.n	800492e <HAL_GPIO_EXTI_Callback+0x9a>
	else if(GPIO_Pin == Row_3_Pin){
 80048a4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80048a8:	d04e      	beq.n	8004948 <HAL_GPIO_EXTI_Callback+0xb4>
	else if(GPIO_Pin == Row_4_Pin){
 80048aa:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80048ae:	d018      	beq.n	80048e2 <HAL_GPIO_EXTI_Callback+0x4e>
	else if(GPIO_Pin == Row_5_Pin){
 80048b0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80048b4:	d073      	beq.n	800499e <HAL_GPIO_EXTI_Callback+0x10a>
	} else if (GPIO_Pin == Rot_CLK_Pin) {
 80048b6:	2801      	cmp	r0, #1
 80048b8:	d053      	beq.n	8004962 <HAL_GPIO_EXTI_Callback+0xce>
	} else if (GPIO_Pin == Rot_SW_Pin) {
 80048ba:	2804      	cmp	r0, #4
 80048bc:	d024      	beq.n	8004908 <HAL_GPIO_EXTI_Callback+0x74>
}
 80048be:	bd70      	pop	{r4, r5, r6, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_1_Pin) == 0){
 80048c0:	4601      	mov	r1, r0
 80048c2:	4841      	ldr	r0, [pc, #260]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 80048c4:	f001 fe7c 	bl	80065c0 <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	b1b8      	cbz	r0, 80048fc <HAL_GPIO_EXTI_Callback+0x68>
			if(kpedge != 1){
 80048cc:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <HAL_GPIO_EXTI_Callback+0x138>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	2a01      	cmp	r2, #1
 80048d2:	d0f4      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				kpedge = 1;
 80048d4:	2001      	movs	r0, #1
				rowpin = -1;
 80048d6:	f04f 31ff 	mov.w	r1, #4294967295
 80048da:	4a3d      	ldr	r2, [pc, #244]	; (80049d0 <HAL_GPIO_EXTI_Callback+0x13c>)
				kpedge = 1;
 80048dc:	6018      	str	r0, [r3, #0]
				rowpin = -1;
 80048de:	6011      	str	r1, [r2, #0]
}
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_4_Pin) == 0){
 80048e2:	4601      	mov	r1, r0
 80048e4:	4838      	ldr	r0, [pc, #224]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 80048e6:	f001 fe6b 	bl	80065c0 <HAL_GPIO_ReadPin>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d1ed      	bne.n	80048cc <HAL_GPIO_EXTI_Callback+0x38>
			if(kpedge != 0){
 80048f0:	4a36      	ldr	r2, [pc, #216]	; (80049cc <HAL_GPIO_EXTI_Callback+0x138>)
 80048f2:	6811      	ldr	r1, [r2, #0]
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d0e2      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = 4;
 80048f8:	2404      	movs	r4, #4
 80048fa:	e05c      	b.n	80049b6 <HAL_GPIO_EXTI_Callback+0x122>
			if(kpedge != 0){
 80048fc:	4a33      	ldr	r2, [pc, #204]	; (80049cc <HAL_GPIO_EXTI_Callback+0x138>)
 80048fe:	6811      	ldr	r1, [r2, #0]
 8004900:	2900      	cmp	r1, #0
 8004902:	d0dc      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = 1;
 8004904:	2401      	movs	r4, #1
 8004906:	e056      	b.n	80049b6 <HAL_GPIO_EXTI_Callback+0x122>
		if (kpenum != WAIT) {
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_GPIO_EXTI_Callback+0x140>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0d6      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
			HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8004910:	2008      	movs	r0, #8
 8004912:	f001 fa73 	bl	8005dfc <HAL_NVIC_DisableIRQ>
			Rot_SW_state = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8004916:	4621      	mov	r1, r4
 8004918:	482b      	ldr	r0, [pc, #172]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 800491a:	f001 fe51 	bl	80065c0 <HAL_GPIO_ReadPin>
 800491e:	4603      	mov	r3, r0
 8004920:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <HAL_GPIO_EXTI_Callback+0x144>)
			HAL_TIM_Base_Start_IT(&htim9);
 8004922:	482e      	ldr	r0, [pc, #184]	; (80049dc <HAL_GPIO_EXTI_Callback+0x148>)
			Rot_SW_state = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8004924:	7013      	strb	r3, [r2, #0]
}
 8004926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_TIM_Base_Start_IT(&htim9);
 800492a:	f003 bc09 	b.w	8008140 <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_2_Pin) == 0){
 800492e:	4601      	mov	r1, r0
 8004930:	4825      	ldr	r0, [pc, #148]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 8004932:	f001 fe45 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004936:	4603      	mov	r3, r0
 8004938:	2800      	cmp	r0, #0
 800493a:	d1c7      	bne.n	80048cc <HAL_GPIO_EXTI_Callback+0x38>
			if(kpedge != 0){
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <HAL_GPIO_EXTI_Callback+0x138>)
 800493e:	6811      	ldr	r1, [r2, #0]
 8004940:	2900      	cmp	r1, #0
 8004942:	d0bc      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = 2;
 8004944:	2402      	movs	r4, #2
 8004946:	e036      	b.n	80049b6 <HAL_GPIO_EXTI_Callback+0x122>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_3_Pin) == 0){
 8004948:	4601      	mov	r1, r0
 800494a:	481f      	ldr	r0, [pc, #124]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 800494c:	f001 fe38 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004950:	4603      	mov	r3, r0
 8004952:	2800      	cmp	r0, #0
 8004954:	d1ba      	bne.n	80048cc <HAL_GPIO_EXTI_Callback+0x38>
			if(kpedge != 0){
 8004956:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <HAL_GPIO_EXTI_Callback+0x138>)
 8004958:	6811      	ldr	r1, [r2, #0]
 800495a:	2900      	cmp	r1, #0
 800495c:	d0af      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = 3;
 800495e:	2403      	movs	r4, #3
 8004960:	e029      	b.n	80049b6 <HAL_GPIO_EXTI_Callback+0x122>
		if (kpenum != WAIT) {
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_GPIO_EXTI_Callback+0x140>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0a9      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
			if (!Rot_interrupt) {
 800496a:	4d1d      	ldr	r5, [pc, #116]	; (80049e0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800496c:	782b      	ldrb	r3, [r5, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1a5      	bne.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				HAL_NVIC_DisableIRQ(Rot_CLK_EXTI_IRQn);
 8004972:	2006      	movs	r0, #6
 8004974:	f001 fa42 	bl	8005dfc <HAL_NVIC_DisableIRQ>
				if (HAL_GPIO_ReadPin(Rot_CLK_GPIO_Port, Rot_CLK_Pin) == HAL_GPIO_ReadPin(Rot_DT_GPIO_Port, Rot_DT_Pin)) {
 8004978:	4621      	mov	r1, r4
 800497a:	4813      	ldr	r0, [pc, #76]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 800497c:	f001 fe20 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004980:	2102      	movs	r1, #2
 8004982:	4606      	mov	r6, r0
 8004984:	4810      	ldr	r0, [pc, #64]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 8004986:	f001 fe1b 	bl	80065c0 <HAL_GPIO_ReadPin>
 800498a:	4286      	cmp	r6, r0
					Rot_interrupt = 2;
 800498c:	bf16      	itet	ne
 800498e:	2302      	movne	r3, #2
					Rot_interrupt = 1;
 8004990:	702c      	strbeq	r4, [r5, #0]
					Rot_interrupt = 2;
 8004992:	702b      	strbne	r3, [r5, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 8004994:	4813      	ldr	r0, [pc, #76]	; (80049e4 <HAL_GPIO_EXTI_Callback+0x150>)
}
 8004996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				HAL_TIM_Base_Start_IT(&htim4);
 800499a:	f003 bbd1 	b.w	8008140 <HAL_TIM_Base_Start_IT>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_5_Pin) == 0){
 800499e:	4601      	mov	r1, r0
 80049a0:	4809      	ldr	r0, [pc, #36]	; (80049c8 <HAL_GPIO_EXTI_Callback+0x134>)
 80049a2:	f001 fe0d 	bl	80065c0 <HAL_GPIO_ReadPin>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d18f      	bne.n	80048cc <HAL_GPIO_EXTI_Callback+0x38>
			if(kpedge != 0){
 80049ac:	4a07      	ldr	r2, [pc, #28]	; (80049cc <HAL_GPIO_EXTI_Callback+0x138>)
 80049ae:	6811      	ldr	r1, [r2, #0]
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d084      	beq.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
				rowpin = 5;
 80049b4:	2405      	movs	r4, #5
				rowpin = 2;
 80049b6:	4906      	ldr	r1, [pc, #24]	; (80049d0 <HAL_GPIO_EXTI_Callback+0x13c>)
				HAL_TIM_Base_Start_IT(&htim2);
 80049b8:	480b      	ldr	r0, [pc, #44]	; (80049e8 <HAL_GPIO_EXTI_Callback+0x154>)
				rowpin = 2;
 80049ba:	600c      	str	r4, [r1, #0]
}
 80049bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				kpedge = 0;
 80049c0:	6013      	str	r3, [r2, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 80049c2:	f003 bbbd 	b.w	8008140 <HAL_TIM_Base_Start_IT>
 80049c6:	bf00      	nop
 80049c8:	40020400 	.word	0x40020400
 80049cc:	20000020 	.word	0x20000020
 80049d0:	20000024 	.word	0x20000024
 80049d4:	200006b1 	.word	0x200006b1
 80049d8:	20000395 	.word	0x20000395
 80049dc:	20000628 	.word	0x20000628
 80049e0:	20000396 	.word	0x20000396
 80049e4:	200005e8 	.word	0x200005e8
 80049e8:	20000568 	.word	0x20000568

080049ec <HAL_TIM_PeriodElapsedCallback>:
{
 80049ec:	b538      	push	{r3, r4, r5, lr}
	if(htim == &htim2){
 80049ee:	4baa      	ldr	r3, [pc, #680]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80049f0:	4298      	cmp	r0, r3
 80049f2:	d021      	beq.n	8004a38 <HAL_TIM_PeriodElapsedCallback+0x4c>
	else if(htim == &htim3){
 80049f4:	4ba9      	ldr	r3, [pc, #676]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80049f6:	4604      	mov	r4, r0
 80049f8:	4298      	cmp	r0, r3
 80049fa:	d03c      	beq.n	8004a76 <HAL_TIM_PeriodElapsedCallback+0x8a>
	else if (htim == &htim4) {
 80049fc:	4ba8      	ldr	r3, [pc, #672]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80049fe:	4298      	cmp	r0, r3
 8004a00:	d042      	beq.n	8004a88 <HAL_TIM_PeriodElapsedCallback+0x9c>
	else if(htim == &htim9){
 8004a02:	4ba8      	ldr	r3, [pc, #672]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004a04:	4298      	cmp	r0, r3
 8004a06:	d000      	beq.n	8004a0a <HAL_TIM_PeriodElapsedCallback+0x1e>
}
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
		HAL_TIM_Base_Stop_IT(&htim9);
 8004a0a:	f003 fbc5 	bl	8008198 <HAL_TIM_Base_Stop_IT>
		if (HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin) == Rot_SW_state) {
 8004a0e:	2104      	movs	r1, #4
 8004a10:	48a5      	ldr	r0, [pc, #660]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004a12:	f001 fdd5 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004a16:	4da5      	ldr	r5, [pc, #660]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004a18:	782b      	ldrb	r3, [r5, #0]
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	d160      	bne.n	8004ae0 <HAL_TIM_PeriodElapsedCallback+0xf4>
			if (!Rot_SW_state) { // On Button Release
 8004a1e:	782b      	ldrb	r3, [r5, #0]
 8004a20:	b92b      	cbnz	r3, 8004a2e <HAL_TIM_PeriodElapsedCallback+0x42>
				Rot_Mode = !Rot_Mode;
 8004a22:	4aa3      	ldr	r2, [pc, #652]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004a24:	7813      	ldrb	r3, [r2, #0]
 8004a26:	fab3 f383 	clz	r3, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	7013      	strb	r3, [r2, #0]
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 8004a2e:	2008      	movs	r0, #8
}
 8004a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_NVIC_EnableIRQ(Rot_SW_EXTI_IRQn);
 8004a34:	f001 b9d4 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
		HAL_TIM_Base_Stop_IT(&htim2);
 8004a38:	f003 fbae 	bl	8008198 <HAL_TIM_Base_Stop_IT>
		if(rowpin == 1){
 8004a3c:	4b9d      	ldr	r3, [pc, #628]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004a3e:	681c      	ldr	r4, [r3, #0]
 8004a40:	2c01      	cmp	r4, #1
 8004a42:	d05e      	beq.n	8004b02 <HAL_TIM_PeriodElapsedCallback+0x116>
		else if(rowpin == 2){
 8004a44:	2c02      	cmp	r4, #2
 8004a46:	d067      	beq.n	8004b18 <HAL_TIM_PeriodElapsedCallback+0x12c>
		else if(rowpin == 3){
 8004a48:	2c03      	cmp	r4, #3
 8004a4a:	d078      	beq.n	8004b3e <HAL_TIM_PeriodElapsedCallback+0x152>
		else if(rowpin == 4){
 8004a4c:	2c04      	cmp	r4, #4
 8004a4e:	f000 8089 	beq.w	8004b64 <HAL_TIM_PeriodElapsedCallback+0x178>
		else if(rowpin == 5){
 8004a52:	2c05      	cmp	r4, #5
 8004a54:	d1d8      	bne.n	8004a08 <HAL_TIM_PeriodElapsedCallback+0x1c>
			columnInput();
 8004a56:	f7ff febb 	bl	80047d0 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8004a5a:	2140      	movs	r1, #64	; 0x40
 8004a5c:	4896      	ldr	r0, [pc, #600]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004a5e:	f001 fdaf 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004a62:	2800      	cmp	r0, #0
 8004a64:	f040 80f0 	bne.w	8004c48 <HAL_TIM_PeriodElapsedCallback+0x25c>
				keypadsm('C');
 8004a68:	2043      	movs	r0, #67	; 0x43
 8004a6a:	f7fe fcb5 	bl	80033d8 <keypadsm>
}
 8004a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			rowInput();
 8004a72:	f7ff be45 	b.w	8004700 <rowInput>
		HAL_TIM_Base_Stop_IT(&htim3);
 8004a76:	f003 fb8f 	bl	8008198 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8004a7a:	f7fd fff1 	bl	8002a60 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8004a7e:	4620      	mov	r0, r4
}
 8004a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_TIM_Base_Start_IT(&htim3);
 8004a84:	f003 bb5c 	b.w	8008140 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8004a88:	f003 fb86 	bl	8008198 <HAL_TIM_Base_Stop_IT>
		if (Rot_interrupt) {
 8004a8c:	4b8b      	ldr	r3, [pc, #556]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d0b9      	beq.n	8004a08 <HAL_TIM_PeriodElapsedCallback+0x1c>
			if (Rot_Mode) {
 8004a94:	4a86      	ldr	r2, [pc, #536]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	b19a      	cbz	r2, 8004ac2 <HAL_TIM_PeriodElapsedCallback+0xd6>
				if (Rot_interrupt == 1) {
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	2a01      	cmp	r2, #1
 8004a9e:	f000 80a8 	beq.w	8004bf2 <HAL_TIM_PeriodElapsedCallback+0x206>
				} else if (Rot_interrupt == 2){
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	2a02      	cmp	r2, #2
 8004aa6:	d114      	bne.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
					if (keypaditerator > 0) {
 8004aa8:	4985      	ldr	r1, [pc, #532]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004aaa:	680a      	ldr	r2, [r1, #0]
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	dd10      	ble.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
						if (keypadarr[keypaditerator] == '.') {
 8004ab0:	4c84      	ldr	r4, [pc, #528]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
						keypaditerator--;
 8004ab2:	1e50      	subs	r0, r2, #1
						if (keypadarr[keypaditerator] == '.') {
 8004ab4:	5c24      	ldrb	r4, [r4, r0]
						keypaditerator--;
 8004ab6:	6008      	str	r0, [r1, #0]
						if (keypadarr[keypaditerator] == '.') {
 8004ab8:	2c2e      	cmp	r4, #46	; 0x2e
 8004aba:	d10a      	bne.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
							keypaditerator--;
 8004abc:	3a02      	subs	r2, #2
 8004abe:	600a      	str	r2, [r1, #0]
 8004ac0:	e007      	b.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
				if (Rot_interrupt == 1) {
 8004ac2:	781a      	ldrb	r2, [r3, #0]
 8004ac4:	2a01      	cmp	r2, #1
 8004ac6:	f000 80a3 	beq.w	8004c10 <HAL_TIM_PeriodElapsedCallback+0x224>
				} else if (Rot_interrupt == 2) {
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	2a02      	cmp	r2, #2
 8004ace:	f000 80d9 	beq.w	8004c84 <HAL_TIM_PeriodElapsedCallback+0x298>
			Rot_interrupt = 0;
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
			HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8004ad6:	2006      	movs	r0, #6
}
 8004ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_NVIC_EnableIRQ(Rot_CLK_EXTI_IRQn);
 8004adc:	f001 b980 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
		if (kpenum != WAIT) {
 8004ae0:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0a2      	beq.n	8004a2e <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_NVIC_DisableIRQ(Rot_SW_EXTI_IRQn);
 8004ae8:	2008      	movs	r0, #8
 8004aea:	f001 f987 	bl	8005dfc <HAL_NVIC_DisableIRQ>
			Rot_SW_state = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8004aee:	2104      	movs	r1, #4
 8004af0:	486d      	ldr	r0, [pc, #436]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004af2:	f001 fd65 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004af6:	4603      	mov	r3, r0
			HAL_TIM_Base_Start_IT(&htim9);
 8004af8:	4620      	mov	r0, r4
			Rot_SW_state = HAL_GPIO_ReadPin(Rot_SW_GPIO_Port, Rot_SW_Pin);
 8004afa:	702b      	strb	r3, [r5, #0]
			HAL_TIM_Base_Start_IT(&htim9);
 8004afc:	f003 fb20 	bl	8008140 <HAL_TIM_Base_Start_IT>
 8004b00:	e795      	b.n	8004a2e <HAL_TIM_PeriodElapsedCallback+0x42>
			columnInput();
 8004b02:	f7ff fe65 	bl	80047d0 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8004b06:	2140      	movs	r1, #64	; 0x40
 8004b08:	486b      	ldr	r0, [pc, #428]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b0a:	f001 fd59 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d150      	bne.n	8004bb4 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				firstmessage = 1;
 8004b12:	4b6e      	ldr	r3, [pc, #440]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8004b14:	701c      	strb	r4, [r3, #0]
 8004b16:	e7aa      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			columnInput();
 8004b18:	f7ff fe5a 	bl	80047d0 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	4866      	ldr	r0, [pc, #408]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b20:	f001 fd4e 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d132      	bne.n	8004b8e <HAL_TIM_PeriodElapsedCallback+0x1a2>
	if(kpenum == WAIT){
 8004b28:	4b67      	ldr	r3, [pc, #412]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d09e      	beq.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004b30:	3b01      	subs	r3, #1
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d89b      	bhi.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004b36:	2031      	movs	r0, #49	; 0x31
 8004b38:	f7fe fb9e 	bl	8003278 <updatekeypad>
 8004b3c:	e797      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			columnInput();
 8004b3e:	f7ff fe47 	bl	80047d0 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8004b42:	2140      	movs	r1, #64	; 0x40
 8004b44:	485c      	ldr	r0, [pc, #368]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b46:	f001 fd3b 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d13d      	bne.n	8004bca <HAL_TIM_PeriodElapsedCallback+0x1de>
	if(kpenum == WAIT){
 8004b4e:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d08b      	beq.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004b56:	3b01      	subs	r3, #1
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d888      	bhi.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004b5c:	2032      	movs	r0, #50	; 0x32
 8004b5e:	f7fe fb8b 	bl	8003278 <updatekeypad>
 8004b62:	e784      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			columnInput();
 8004b64:	f7ff fe34 	bl	80047d0 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8004b68:	2140      	movs	r1, #64	; 0x40
 8004b6a:	4853      	ldr	r0, [pc, #332]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b6c:	f001 fd28 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d156      	bne.n	8004c22 <HAL_TIM_PeriodElapsedCallback+0x236>
	if(kpenum == WAIT){
 8004b74:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f43f af78 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	f63f af74 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004b86:	2033      	movs	r0, #51	; 0x33
 8004b88:	f7fe fb76 	bl	8003278 <updatekeypad>
 8004b8c:	e76f      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	4849      	ldr	r0, [pc, #292]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004b92:	f001 fd15 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d160      	bne.n	8004c5c <HAL_TIM_PeriodElapsedCallback+0x270>
	if(kpenum == WAIT){
 8004b9a:	4b4b      	ldr	r3, [pc, #300]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f43f af65 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	f63f af61 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004bac:	2034      	movs	r0, #52	; 0x34
 8004bae:	f7fe fb63 	bl	8003278 <updatekeypad>
 8004bb2:	e75c      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	4840      	ldr	r0, [pc, #256]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004bb8:	f001 fd02 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f040 8087 	bne.w	8004cd0 <HAL_TIM_PeriodElapsedCallback+0x2e4>
				keypadsm('+');
 8004bc2:	202b      	movs	r0, #43	; 0x2b
 8004bc4:	f7fe fc08 	bl	80033d8 <keypadsm>
 8004bc8:	e751      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	483a      	ldr	r0, [pc, #232]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004bce:	f001 fcf7 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f040 8087 	bne.w	8004ce6 <HAL_TIM_PeriodElapsedCallback+0x2fa>
	if(kpenum == WAIT){
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f43f af46 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004be2:	3b01      	subs	r3, #1
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	f63f af42 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004bea:	2035      	movs	r0, #53	; 0x35
 8004bec:	f7fe fb44 	bl	8003278 <updatekeypad>
 8004bf0:	e73d      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
					if (keypaditerator < 4) {
 8004bf2:	4933      	ldr	r1, [pc, #204]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004bf4:	680a      	ldr	r2, [r1, #0]
 8004bf6:	2a03      	cmp	r2, #3
 8004bf8:	f73f af6b 	bgt.w	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
						if (keypadarr[keypaditerator] == '.') {
 8004bfc:	4c31      	ldr	r4, [pc, #196]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
						keypaditerator++;
 8004bfe:	1c50      	adds	r0, r2, #1
						if (keypadarr[keypaditerator] == '.') {
 8004c00:	5c24      	ldrb	r4, [r4, r0]
						keypaditerator++;
 8004c02:	6008      	str	r0, [r1, #0]
						if (keypadarr[keypaditerator] == '.') {
 8004c04:	2c2e      	cmp	r4, #46	; 0x2e
 8004c06:	f47f af64 	bne.w	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
							keypaditerator++;
 8004c0a:	3202      	adds	r2, #2
 8004c0c:	600a      	str	r2, [r1, #0]
 8004c0e:	e760      	b.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
					if (keypadarr[keypaditerator] < (9 + '0')) {
 8004c10:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004c12:	482c      	ldr	r0, [pc, #176]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	5c81      	ldrb	r1, [r0, r2]
 8004c18:	2938      	cmp	r1, #56	; 0x38
 8004c1a:	d878      	bhi.n	8004d0e <HAL_TIM_PeriodElapsedCallback+0x322>
						keypadarr[keypaditerator]++;
 8004c1c:	3101      	adds	r1, #1
 8004c1e:	5481      	strb	r1, [r0, r2]
 8004c20:	e757      	b.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	4824      	ldr	r0, [pc, #144]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c26:	f001 fccb 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d179      	bne.n	8004d22 <HAL_TIM_PeriodElapsedCallback+0x336>
	if(kpenum == WAIT){
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f43f af1b 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	f63f af17 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004c40:	2036      	movs	r0, #54	; 0x36
 8004c42:	f7fe fb19 	bl	8003278 <updatekeypad>
 8004c46:	e712      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	481b      	ldr	r0, [pc, #108]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c4c:	f001 fcb8 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d17a      	bne.n	8004d4a <HAL_TIM_PeriodElapsedCallback+0x35e>
				keypadsm('D');
 8004c54:	2044      	movs	r0, #68	; 0x44
 8004c56:	f7fe fbbf 	bl	80033d8 <keypadsm>
 8004c5a:	e708      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 8004c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c60:	4815      	ldr	r0, [pc, #84]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004c62:	f001 fcad 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d179      	bne.n	8004d5e <HAL_TIM_PeriodElapsedCallback+0x372>
	if(kpenum == WAIT){
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f43f aefd 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004c74:	3b01      	subs	r3, #1
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	f63f aef9 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004c7c:	2037      	movs	r0, #55	; 0x37
 8004c7e:	f7fe fafb 	bl	8003278 <updatekeypad>
 8004c82:	e6f4      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
					if (keypadarr[keypaditerator] > (0 + '0')) {
 8004c84:	4a0e      	ldr	r2, [pc, #56]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8004c86:	480f      	ldr	r0, [pc, #60]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8004c88:	6811      	ldr	r1, [r2, #0]
 8004c8a:	5c42      	ldrb	r2, [r0, r1]
 8004c8c:	2a30      	cmp	r2, #48	; 0x30
 8004c8e:	d972      	bls.n	8004d76 <HAL_TIM_PeriodElapsedCallback+0x38a>
						keypadarr[keypaditerator]--;
 8004c90:	3a01      	subs	r2, #1
 8004c92:	5442      	strb	r2, [r0, r1]
 8004c94:	e71d      	b.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8004c96:	bf00      	nop
 8004c98:	20000568 	.word	0x20000568
 8004c9c:	200005a8 	.word	0x200005a8
 8004ca0:	200005e8 	.word	0x200005e8
 8004ca4:	20000628 	.word	0x20000628
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	20000395 	.word	0x20000395
 8004cb0:	20000394 	.word	0x20000394
 8004cb4:	20000024 	.word	0x20000024
 8004cb8:	40020800 	.word	0x40020800
 8004cbc:	20000396 	.word	0x20000396
 8004cc0:	20000018 	.word	0x20000018
 8004cc4:	20000010 	.word	0x20000010
 8004cc8:	200006b1 	.word	0x200006b1
 8004ccc:	200003d4 	.word	0x200003d4
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 8004cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cd4:	4842      	ldr	r0, [pc, #264]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004cd6:	f001 fc73 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d155      	bne.n	8004d8a <HAL_TIM_PeriodElapsedCallback+0x39e>
				keypadsm('-');
 8004cde:	202d      	movs	r0, #45	; 0x2d
 8004ce0:	f7fe fb7a 	bl	80033d8 <keypadsm>
 8004ce4:	e6c3      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 8004ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cea:	483d      	ldr	r0, [pc, #244]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004cec:	f001 fc68 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d150      	bne.n	8004d96 <HAL_TIM_PeriodElapsedCallback+0x3aa>
	if(kpenum == WAIT){
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f43f aeb8 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	f63f aeb4 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004d06:	2038      	movs	r0, #56	; 0x38
 8004d08:	f7fe fab6 	bl	8003278 <updatekeypad>
 8004d0c:	e6af      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
					} else if (keypaditerator > 0) {
 8004d0e:	2a00      	cmp	r2, #0
 8004d10:	f77f aedf 	ble.w	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
						keypadarr[keypaditerator] = 0 + '0';
 8004d14:	2430      	movs	r4, #48	; 0x30
						keypadarr[keypaditerator-1]++;
 8004d16:	1e51      	subs	r1, r2, #1
						keypadarr[keypaditerator] = 0 + '0';
 8004d18:	5484      	strb	r4, [r0, r2]
						keypadarr[keypaditerator-1]++;
 8004d1a:	5c42      	ldrb	r2, [r0, r1]
 8004d1c:	3201      	adds	r2, #1
 8004d1e:	5442      	strb	r2, [r0, r1]
 8004d20:	e6d7      	b.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 8004d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d26:	482e      	ldr	r0, [pc, #184]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004d28:	f001 fc4a 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d13e      	bne.n	8004dae <HAL_TIM_PeriodElapsedCallback+0x3c2>
	if(kpenum == WAIT){
 8004d30:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f43f ae9a 	beq.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	else if(kpenum == V1){
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	f63f ae96 	bhi.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			updatekeypad(num);
 8004d42:	2039      	movs	r0, #57	; 0x39
 8004d44:	f7fe fa98 	bl	8003278 <updatekeypad>
 8004d48:	e691      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 8004d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d4e:	4824      	ldr	r0, [pc, #144]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004d50:	f001 fc36 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004d54:	bbb8      	cbnz	r0, 8004dc6 <HAL_TIM_PeriodElapsedCallback+0x3da>
				keypadsm('A');
 8004d56:	2041      	movs	r0, #65	; 0x41
 8004d58:	f7fe fb3e 	bl	80033d8 <keypadsm>
 8004d5c:	e687      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8004d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d62:	481f      	ldr	r0, [pc, #124]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004d64:	f001 fc2c 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f47f ae80 	bne.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
				keypadsm('.');
 8004d6e:	202e      	movs	r0, #46	; 0x2e
 8004d70:	f7fe fb32 	bl	80033d8 <keypadsm>
 8004d74:	e67b      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
					} else if (keypaditerator < 4) {
 8004d76:	2903      	cmp	r1, #3
 8004d78:	f73f aeab 	bgt.w	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
						keypadarr[keypaditerator + 1]--;
 8004d7c:	1c4c      	adds	r4, r1, #1
 8004d7e:	5d02      	ldrb	r2, [r0, r4]
 8004d80:	3a01      	subs	r2, #1
 8004d82:	5502      	strb	r2, [r0, r4]
						keypadarr[keypaditerator] = (9 + '0');
 8004d84:	2239      	movs	r2, #57	; 0x39
 8004d86:	5442      	strb	r2, [r0, r1]
 8004d88:	e6a3      	b.n	8004ad2 <HAL_TIM_PeriodElapsedCallback+0xe6>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8004d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d8e:	4814      	ldr	r0, [pc, #80]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004d90:	f001 fc16 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004d94:	e66b      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8004d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d9a:	4811      	ldr	r0, [pc, #68]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004d9c:	f001 fc10 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	f47f ae64 	bne.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
				keypadsm('0');
 8004da6:	2030      	movs	r0, #48	; 0x30
 8004da8:	f7fe fb16 	bl	80033d8 <keypadsm>
 8004dac:	e65f      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8004dae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004db2:	480b      	ldr	r0, [pc, #44]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004db4:	f001 fc04 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	f47f ae58 	bne.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
				keypadsm('#');
 8004dbe:	2023      	movs	r0, #35	; 0x23
 8004dc0:	f7fe fb0a 	bl	80033d8 <keypadsm>
 8004dc4:	e653      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8004dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dca:	4805      	ldr	r0, [pc, #20]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8004dcc:	f001 fbf8 	bl	80065c0 <HAL_GPIO_ReadPin>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f47f ae4c 	bne.w	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
				keypadsm('B');
 8004dd6:	2042      	movs	r0, #66	; 0x42
 8004dd8:	f7fe fafe 	bl	80033d8 <keypadsm>
 8004ddc:	e647      	b.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x82>
 8004dde:	bf00      	nop
 8004de0:	40020800 	.word	0x40020800
 8004de4:	200006b1 	.word	0x200006b1

08004de8 <HAL_ADC_ConvCpltCallback>:
	adc_current = adcvalues[2];
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_ADC_ConvCpltCallback+0x2c>)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004dea:	b410      	push	{r4}
	adc_linear = adcvalues[1];
 8004dec:	8859      	ldrh	r1, [r3, #2]
	adc_current = adcvalues[2];
 8004dee:	889c      	ldrh	r4, [r3, #4]
 8004df0:	4809      	ldr	r0, [pc, #36]	; (8004e18 <HAL_ADC_ConvCpltCallback+0x30>)
	adc_linear = adcvalues[1];
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <HAL_ADC_ConvCpltCallback+0x34>)
	adc_opamp = adcvalues[0];
 8004df4:	f8b3 c000 	ldrh.w	ip, [r3]
	adc_current = adcvalues[2];
 8004df8:	8004      	strh	r4, [r0, #0]
	adc_linear = adcvalues[1];
 8004dfa:	8011      	strh	r1, [r2, #0]
	adc_opamp = adcvalues[0];
 8004dfc:	4c08      	ldr	r4, [pc, #32]	; (8004e20 <HAL_ADC_ConvCpltCallback+0x38>)
	adc_switching = adcvalues[3];
 8004dfe:	88d8      	ldrh	r0, [r3, #6]
	adc_vref = adcvalues[4];
 8004e00:	891a      	ldrh	r2, [r3, #8]
	adc_switching = adcvalues[3];
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <HAL_ADC_ConvCpltCallback+0x3c>)
	adc_vref = adcvalues[4];
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_ADC_ConvCpltCallback+0x40>)
	adc_opamp = adcvalues[0];
 8004e06:	f8a4 c000 	strh.w	ip, [r4]
	adc_switching = adcvalues[3];
 8004e0a:	8008      	strh	r0, [r1, #0]
}
 8004e0c:	bc10      	pop	{r4}
	adc_vref = adcvalues[4];
 8004e0e:	801a      	strh	r2, [r3, #0]
}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	200003a4 	.word	0x200003a4
 8004e18:	20000398 	.word	0x20000398
 8004e1c:	2000039a 	.word	0x2000039a
 8004e20:	2000039c 	.word	0x2000039c
 8004e24:	2000039e 	.word	0x2000039e
 8004e28:	200003a0 	.word	0x200003a0

08004e2c <HAL_UART_RxHalfCpltCallback>:
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	4e83      	ldr	r6, [pc, #524]	; (8005044 <HAL_UART_RxCpltCallback+0x214>)
	for(int i = 0; i < 64; i++){
 8004e36:	2400      	movs	r4, #0
 8004e38:	4633      	mov	r3, r6
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004e3a:	b08b      	sub	sp, #44	; 0x2c
 8004e3c:	e003      	b.n	8004e46 <HAL_UART_RxCpltCallback+0x16>
	for(int i = 0; i < 64; i++){
 8004e3e:	3401      	adds	r4, #1
 8004e40:	2c40      	cmp	r4, #64	; 0x40
 8004e42:	f000 80fc 	beq.w	800503e <HAL_UART_RxCpltCallback+0x20e>
		if(rxbuffer[i] == '*'){
 8004e46:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004e4a:	2d2a      	cmp	r5, #42	; 0x2a
 8004e4c:	d1f7      	bne.n	8004e3e <HAL_UART_RxCpltCallback+0xe>
			rxiter = i;//Found start condition
 8004e4e:	b2e4      	uxtb	r4, r4
	memset (rxbuffercpy, '\0', 32);  // clear the buffer
 8004e50:	2220      	movs	r2, #32
 8004e52:	2100      	movs	r1, #0
 8004e54:	a802      	add	r0, sp, #8
 8004e56:	f005 fd2d 	bl	800a8b4 <memset>
	for(int i = 0; i < 25; i++){
 8004e5a:	f10d 0307 	add.w	r3, sp, #7
 8004e5e:	aa08      	add	r2, sp, #32
 8004e60:	e000      	b.n	8004e64 <HAL_UART_RxCpltCallback+0x34>
		rxbuffercpy[i] = rxbuffer[rxiter];
 8004e62:	5d35      	ldrb	r5, [r6, r4]
		rxiter++;
 8004e64:	3401      	adds	r4, #1
 8004e66:	b2e4      	uxtb	r4, r4
			rxiter = 0;
 8004e68:	2c40      	cmp	r4, #64	; 0x40
		rxbuffercpy[i] = rxbuffer[rxiter];
 8004e6a:	f803 5f01 	strb.w	r5, [r3, #1]!
			rxiter = 0;
 8004e6e:	bf28      	it	cs
 8004e70:	2400      	movcs	r4, #0
	for(int i = 0; i < 25; i++){
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d1f5      	bne.n	8004e62 <HAL_UART_RxCpltCallback+0x32>
	if( //Check start condition
 8004e76:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e7c:	d00c      	beq.n	8004e98 <HAL_UART_RxCpltCallback+0x68>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8004e7e:	2240      	movs	r2, #64	; 0x40
 8004e80:	2100      	movs	r1, #0
 8004e82:	4870      	ldr	r0, [pc, #448]	; (8005044 <HAL_UART_RxCpltCallback+0x214>)
 8004e84:	f005 fd16 	bl	800a8b4 <memset>
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8004e88:	2240      	movs	r2, #64	; 0x40
 8004e8a:	496e      	ldr	r1, [pc, #440]	; (8005044 <HAL_UART_RxCpltCallback+0x214>)
 8004e8c:	486e      	ldr	r0, [pc, #440]	; (8005048 <HAL_UART_RxCpltCallback+0x218>)
}
 8004e8e:	b00b      	add	sp, #44	; 0x2c
 8004e90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 64 Bytes of data
 8004e94:	f003 bbc8 	b.w	8008628 <HAL_UART_Receive_DMA>
		(rxbuffercpy[0] == '*' && rxbuffercpy[1] == 'S' && rxbuffercpy[2] == 'T' && rxbuffercpy[3] == 'R' && rxbuffercpy[4] == 'T') &&
 8004e98:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004e9c:	2b53      	cmp	r3, #83	; 0x53
 8004e9e:	d1ee      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ea0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004ea4:	2b54      	cmp	r3, #84	; 0x54
 8004ea6:	d1ea      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ea8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004eac:	2b52      	cmp	r3, #82	; 0x52
 8004eae:	d1e6      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004eb0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004eb4:	2b54      	cmp	r3, #84	; 0x54
 8004eb6:	d1e2      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004eb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004ebc:	2b46      	cmp	r3, #70	; 0x46
 8004ebe:	d1de      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[20] == 'F' && rxbuffercpy[21] == 'N' && rxbuffercpy[22] == 'S' && rxbuffercpy[23] == 'H' && rxbuffercpy[24] == '!') &&
 8004ec0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8004ec4:	2b4e      	cmp	r3, #78	; 0x4e
 8004ec6:	d1da      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ec8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8004ecc:	2b53      	cmp	r3, #83	; 0x53
 8004ece:	d1d6      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ed0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004ed4:	2b48      	cmp	r3, #72	; 0x48
 8004ed6:	d1d2      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ed8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004edc:	2b21      	cmp	r3, #33	; 0x21
 8004ede:	d1ce      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ee0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004ee4:	2b2c      	cmp	r3, #44	; 0x2c
 8004ee6:	d1ca      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8004ee8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004eec:	2b2c      	cmp	r3, #44	; 0x2c
 8004eee:	d1c6      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ef0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004ef4:	2b2c      	cmp	r3, #44	; 0x2c
 8004ef6:	d1c2      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004ef8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004efc:	2b2c      	cmp	r3, #44	; 0x2c
 8004efe:	d1be      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8004f00:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8004f04:	3830      	subs	r0, #48	; 0x30
		(rxbuffercpy[5] == ',' && rxbuffercpy[11] == ',' && rxbuffercpy[17] == ',' && rxbuffercpy[19] == ',') &&
 8004f06:	b2c3      	uxtb	r3, r0
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d8b8      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8004f0c:	f89d b00f 	ldrb.w	fp, [sp, #15]
 8004f10:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8004f14:	fa5f f38b 	uxtb.w	r3, fp
 8004f18:	2b09      	cmp	r3, #9
 8004f1a:	d8b0      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004f1c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004f20:	2b2e      	cmp	r3, #46	; 0x2e
 8004f22:	d1ac      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8004f24:	f89d a011 	ldrb.w	sl, [sp, #17]
 8004f28:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		((rxbuffercpy[6] >= '0' && rxbuffercpy[6] <= '9') && (rxbuffercpy[7] >= '0' && rxbuffercpy[7] <= '9') && rxbuffercpy[8] == '.' &&
 8004f2c:	fa5f f38a 	uxtb.w	r3, sl
 8004f30:	2b09      	cmp	r3, #9
 8004f32:	d8a4      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8004f34:	f89d 6012 	ldrb.w	r6, [sp, #18]
 8004f38:	3e30      	subs	r6, #48	; 0x30
 8004f3a:	b2f3      	uxtb	r3, r6
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d89e      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8004f40:	f89d 9014 	ldrb.w	r9, [sp, #20]
 8004f44:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
		(rxbuffercpy[9] >= '0' && rxbuffercpy[9] <= '9') && (rxbuffercpy[10] >= '0' && rxbuffercpy[10] <= '9')) &&
 8004f48:	fa5f f389 	uxtb.w	r3, r9
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d896      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8004f50:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8004f54:	2b2e      	cmp	r3, #46	; 0x2e
 8004f56:	d192      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
 8004f58:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8004f5c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8004f60:	fa5f f388 	uxtb.w	r3, r8
 8004f64:	2b09      	cmp	r3, #9
 8004f66:	d88a      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8004f68:	f89d 7017 	ldrb.w	r7, [sp, #23]
 8004f6c:	3f30      	subs	r7, #48	; 0x30
		((rxbuffercpy[12] >= '0' && rxbuffercpy[12] <= '9') && rxbuffercpy[13] == '.' && (rxbuffercpy[14] >= '0' && rxbuffercpy[14] <= '9') &&
 8004f6e:	b2fb      	uxtb	r3, r7
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	d884      	bhi.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8004f74:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8004f78:	3d30      	subs	r5, #48	; 0x30
 8004f7a:	b2eb      	uxtb	r3, r5
 8004f7c:	2b09      	cmp	r3, #9
 8004f7e:	f63f af7e 	bhi.w	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		(rxbuffercpy[18] == '0' || rxbuffercpy[18] == '1' || rxbuffercpy[18] == '2')
 8004f82:	f89d 401a 	ldrb.w	r4, [sp, #26]
 8004f86:	3c30      	subs	r4, #48	; 0x30
		(rxbuffercpy[15] >= '0' && rxbuffercpy[15] <= '9') && (rxbuffercpy[16] >= '0' && rxbuffercpy[16] <= '9')) &&
 8004f88:	b2e3      	uxtb	r3, r4
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	f63f af77 	bhi.w	8004e7e <HAL_UART_RxCpltCallback+0x4e>
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8004f90:	f7fb fe4c 	bl	8000c2c <__aeabi_i2f>
 8004f94:	492d      	ldr	r1, [pc, #180]	; (800504c <HAL_UART_RxCpltCallback+0x21c>)
 8004f96:	f7fb fe9d 	bl	8000cd4 <__aeabi_fmul>
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	f7fb fd92 	bl	8000ac4 <__addsf3>
 8004fa0:	4601      	mov	r1, r0
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8004fa2:	4658      	mov	r0, fp
		tempv2 += (float)(rxbuffercpy[6]-48) * (float)10.0;
 8004fa4:	9101      	str	r1, [sp, #4]
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8004fa6:	f7fb fe41 	bl	8000c2c <__aeabi_i2f>
 8004faa:	9901      	ldr	r1, [sp, #4]
 8004fac:	f7fb fd8a 	bl	8000ac4 <__addsf3>
 8004fb0:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8004fb2:	4650      	mov	r0, sl
		tempv2 += (float)(rxbuffercpy[7]-48) * (float)1.0;
 8004fb4:	4692      	mov	sl, r2
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8004fb6:	f7fb fe39 	bl	8000c2c <__aeabi_i2f>
 8004fba:	4924      	ldr	r1, [pc, #144]	; (800504c <HAL_UART_RxCpltCallback+0x21c>)
 8004fbc:	f7fb ff3e 	bl	8000e3c <__aeabi_fdiv>
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	f7fb fd7f 	bl	8000ac4 <__addsf3>
 8004fc6:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8004fc8:	4648      	mov	r0, r9
		tempv2 += (float)(rxbuffercpy[9]-48) / (float)10.0;
 8004fca:	4691      	mov	r9, r2
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8004fcc:	f7fb fe2e 	bl	8000c2c <__aeabi_i2f>
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	f7fb fd77 	bl	8000ac4 <__addsf3>
 8004fd6:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8004fd8:	4640      	mov	r0, r8
		tempa2 += (float)(rxbuffercpy[12]-48) * (float)1.0;
 8004fda:	4690      	mov	r8, r2
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8004fdc:	f7fb fe26 	bl	8000c2c <__aeabi_i2f>
 8004fe0:	491a      	ldr	r1, [pc, #104]	; (800504c <HAL_UART_RxCpltCallback+0x21c>)
 8004fe2:	f7fb ff2b 	bl	8000e3c <__aeabi_fdiv>
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	f7fb fd6c 	bl	8000ac4 <__addsf3>
 8004fec:	4602      	mov	r2, r0
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8004fee:	4638      	mov	r0, r7
		tempa2 += (float)(rxbuffercpy[14]-48) / (float)10.0;
 8004ff0:	4617      	mov	r7, r2
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8004ff2:	f7fb fe1b 	bl	8000c2c <__aeabi_i2f>
 8004ff6:	4916      	ldr	r1, [pc, #88]	; (8005050 <HAL_UART_RxCpltCallback+0x220>)
 8004ff8:	f7fb ff20 	bl	8000e3c <__aeabi_fdiv>
 8004ffc:	4639      	mov	r1, r7
 8004ffe:	f7fb fd61 	bl	8000ac4 <__addsf3>
 8005002:	4602      	mov	r2, r0
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8005004:	4630      	mov	r0, r6
		tempa2 += (float)(rxbuffercpy[15]-48) / (float)100.0;
 8005006:	4616      	mov	r6, r2
		tempv2 += (float)(rxbuffercpy[10]-48) / (float)100.0;
 8005008:	f7fb fe10 	bl	8000c2c <__aeabi_i2f>
 800500c:	4910      	ldr	r1, [pc, #64]	; (8005050 <HAL_UART_RxCpltCallback+0x220>)
 800500e:	f7fb ff15 	bl	8000e3c <__aeabi_fdiv>
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fd56 	bl	8000ac4 <__addsf3>
 8005018:	4602      	mov	r2, r0
		slin_num = tempv2;
 800501a:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_UART_RxCpltCallback+0x224>)
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 800501c:	4628      	mov	r0, r5
		slin_num = tempv2;
 800501e:	601a      	str	r2, [r3, #0]
		tempa2 += (float)(rxbuffercpy[16]-48) / (float)1000.0;
 8005020:	f7fb fe04 	bl	8000c2c <__aeabi_i2f>
 8005024:	490c      	ldr	r1, [pc, #48]	; (8005058 <HAL_UART_RxCpltCallback+0x228>)
 8005026:	f7fb ff09 	bl	8000e3c <__aeabi_fdiv>
 800502a:	4631      	mov	r1, r6
 800502c:	f7fb fd4a 	bl	8000ac4 <__addsf3>
		scur_num = tempa2;
 8005030:	f8df b028 	ldr.w	fp, [pc, #40]	; 800505c <HAL_UART_RxCpltCallback+0x22c>
		chstat2 = rxbuffercpy[18]-48;
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_UART_RxCpltCallback+0x230>)
		scur_num = tempa2;
 8005036:	f8cb 0000 	str.w	r0, [fp]
		chstat2 = rxbuffercpy[18]-48;
 800503a:	601c      	str	r4, [r3, #0]
 800503c:	e71f      	b.n	8004e7e <HAL_UART_RxCpltCallback+0x4e>
	uint8_t rxiter = 0;
 800503e:	2400      	movs	r4, #0
		rxbuffercpy[i] = rxbuffer[rxiter];
 8005040:	7835      	ldrb	r5, [r6, #0]
 8005042:	e705      	b.n	8004e50 <HAL_UART_RxCpltCallback+0x20>
 8005044:	200006bc 	.word	0x200006bc
 8005048:	20000668 	.word	0x20000668
 800504c:	41200000 	.word	0x41200000
 8005050:	42c80000 	.word	0x42c80000
 8005054:	20000700 	.word	0x20000700
 8005058:	447a0000 	.word	0x447a0000
 800505c:	200006fc 	.word	0x200006fc
 8005060:	200003b8 	.word	0x200003b8

08005064 <HAL_UART_TxHalfCpltCallback>:
}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005068:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset (txbuffer, '\0', 64);  // clear the buffer
 800506a:	2540      	movs	r5, #64	; 0x40
 800506c:	4c13      	ldr	r4, [pc, #76]	; (80050bc <HAL_UART_TxCpltCallback+0x54>)
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800506e:	b087      	sub	sp, #28
	memset (txbuffer, '\0', 64);  // clear the buffer
 8005070:	462a      	mov	r2, r5
 8005072:	2100      	movs	r1, #0
 8005074:	4620      	mov	r0, r4
 8005076:	f005 fc1d 	bl	800a8b4 <memset>
	snprintf((char*)txbuffer, 26, "*STRT,%05.2f,%5.3f,%d,FNSH!", voltnum2, ampnum2, chstat2);
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_UART_TxCpltCallback+0x58>)
 800507c:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <HAL_UART_TxCpltCallback+0x5c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6810      	ldr	r0, [r2, #0]
 8005082:	9304      	str	r3, [sp, #16]
 8005084:	f7fb f9e8 	bl	8000458 <__aeabi_f2d>
 8005088:	460b      	mov	r3, r1
 800508a:	4602      	mov	r2, r0
 800508c:	490e      	ldr	r1, [pc, #56]	; (80050c8 <HAL_UART_TxCpltCallback+0x60>)
 800508e:	6808      	ldr	r0, [r1, #0]
 8005090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005094:	f7fb f9e0 	bl	8000458 <__aeabi_f2d>
 8005098:	4606      	mov	r6, r0
 800509a:	460f      	mov	r7, r1
 800509c:	4620      	mov	r0, r4
 800509e:	211a      	movs	r1, #26
 80050a0:	e9cd 6700 	strd	r6, r7, [sp]
 80050a4:	4a09      	ldr	r2, [pc, #36]	; (80050cc <HAL_UART_TxCpltCallback+0x64>)
 80050a6:	f006 f86d 	bl	800b184 <sniprintf>
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 80050aa:	462a      	mov	r2, r5
 80050ac:	4621      	mov	r1, r4
 80050ae:	4808      	ldr	r0, [pc, #32]	; (80050d0 <HAL_UART_TxCpltCallback+0x68>)
}
 80050b0:	b007      	add	sp, #28
 80050b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_UART_Transmit_DMA(&huart1, txbuffer, 64);
 80050b6:	f003 ba7b 	b.w	80085b0 <HAL_UART_Transmit_DMA>
 80050ba:	bf00      	nop
 80050bc:	20000708 	.word	0x20000708
 80050c0:	200003b8 	.word	0x200003b8
 80050c4:	200003b4 	.word	0x200003b4
 80050c8:	200007d0 	.word	0x200007d0
 80050cc:	0800d6b8 	.word	0x0800d6b8
 80050d0:	20000668 	.word	0x20000668

080050d4 <Error_Handler>:
 80050d4:	b672      	cpsid	i
  while (1)
 80050d6:	e7fe      	b.n	80050d6 <Error_Handler+0x2>

080050d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_MspInit+0x40>)
{
 80050da:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 80050dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
 80050e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80050ea:	9201      	str	r2, [sp, #4]
 80050ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ee:	6a1a      	ldr	r2, [r3, #32]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	621a      	str	r2, [r3, #32]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	f002 0201 	and.w	r2, r2, #1
 80050fc:	9202      	str	r2, [sp, #8]
 80050fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005102:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005112:	b004      	add	sp, #16
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800511c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511e:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8005120:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <HAL_ADC_MspInit+0x8c>)
 8005122:	6802      	ldr	r2, [r0, #0]
{
 8005124:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8005126:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005128:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800512c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005130:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8005132:	d001      	beq.n	8005138 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005134:	b008      	add	sp, #32
 8005136:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005138:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800513c:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800513e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005144:	621a      	str	r2, [r3, #32]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	4605      	mov	r5, r0
 800514a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800514e:	9200      	str	r2, [sp, #0]
 8005150:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005152:	69da      	ldr	r2, [r3, #28]
    hdma_adc.Instance = DMA1_Channel1;
 8005154:	4e15      	ldr	r6, [pc, #84]	; (80051ac <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	61da      	str	r2, [r3, #28]
 800515c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800515e:	220f      	movs	r2, #15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005166:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005168:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516a:	4811      	ldr	r0, [pc, #68]	; (80051b0 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800516c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005170:	f001 f8aa 	bl	80062c8 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005174:	2380      	movs	r3, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8005176:	490f      	ldr	r1, [pc, #60]	; (80051b4 <HAL_ADC_MspInit+0x98>)
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005178:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800517c:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8005180:	60f3      	str	r3, [r6, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005182:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005186:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005188:	4630      	mov	r0, r6
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800518a:	60b4      	str	r4, [r6, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800518c:	61f4      	str	r4, [r6, #28]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800518e:	6171      	str	r1, [r6, #20]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005190:	6132      	str	r2, [r6, #16]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8005192:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8005194:	f000 fee4 	bl	8005f60 <HAL_DMA_Init>
 8005198:	b918      	cbnz	r0, 80051a2 <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800519a:	646e      	str	r6, [r5, #68]	; 0x44
 800519c:	6275      	str	r5, [r6, #36]	; 0x24
}
 800519e:	b008      	add	sp, #32
 80051a0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80051a2:	f7ff ff97 	bl	80050d4 <Error_Handler>
 80051a6:	e7f8      	b.n	800519a <HAL_ADC_MspInit+0x7e>
 80051a8:	40012400 	.word	0x40012400
 80051ac:	20000440 	.word	0x20000440
 80051b0:	40020000 	.word	0x40020000
 80051b4:	40026008 	.word	0x40026008

080051b8 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <HAL_ADC_MspDeInit+0x2c>)
 80051ba:	6802      	ldr	r2, [r0, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d000      	beq.n	80051c2 <HAL_ADC_MspDeInit+0xa>
 80051c0:	4770      	bx	lr
{
 80051c2:	b510      	push	{r4, lr}
 80051c4:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <HAL_ADC_MspDeInit+0x30>)
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80051c8:	4808      	ldr	r0, [pc, #32]	; (80051ec <HAL_ADC_MspDeInit+0x34>)
    __HAL_RCC_ADC1_CLK_DISABLE();
 80051ca:	6a13      	ldr	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80051cc:	210f      	movs	r1, #15
    __HAL_RCC_ADC1_CLK_DISABLE();
 80051ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d2:	6213      	str	r3, [r2, #32]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80051d4:	f001 f962 	bl	800649c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80051d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80051da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80051de:	f000 bef7 	b.w	8005fd0 <HAL_DMA_DeInit>
 80051e2:	bf00      	nop
 80051e4:	40012400 	.word	0x40012400
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40020000 	.word	0x40020000

080051f0 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f0:	2300      	movs	r3, #0
{
 80051f2:	b530      	push	{r4, r5, lr}
  if(hdac->Instance==DAC)
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <HAL_DAC_MspInit+0x58>)
 80051f6:	6801      	ldr	r1, [r0, #0]
{
 80051f8:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 80051fa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005200:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005204:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8005206:	d001      	beq.n	800520c <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005208:	b009      	add	sp, #36	; 0x24
 800520a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800520c:	2430      	movs	r4, #48	; 0x30
 800520e:	2503      	movs	r5, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8005210:	4b0e      	ldr	r3, [pc, #56]	; (800524c <HAL_DAC_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005212:	480f      	ldr	r0, [pc, #60]	; (8005250 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8005214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005216:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC_CLK_ENABLE();
 8005218:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800521c:	625a      	str	r2, [r3, #36]	; 0x24
 800521e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005220:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005224:	9200      	str	r2, [sp, #0]
 8005226:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	61da      	str	r2, [r3, #28]
 8005230:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005232:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523e:	f001 f843 	bl	80062c8 <HAL_GPIO_Init>
}
 8005242:	b009      	add	sp, #36	; 0x24
 8005244:	bd30      	pop	{r4, r5, pc}
 8005246:	bf00      	nop
 8005248:	40007400 	.word	0x40007400
 800524c:	40023800 	.word	0x40023800
 8005250:	40020000 	.word	0x40020000

08005254 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005254:	2300      	movs	r3, #0
{
 8005256:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_I2C_MspInit+0x60>)
 800525a:	6801      	ldr	r1, [r0, #0]
{
 800525c:	b088      	sub	sp, #32
  if(hi2c->Instance==I2C1)
 800525e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005260:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005264:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005268:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 800526a:	d001      	beq.n	8005270 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800526c:	b008      	add	sp, #32
 800526e:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005270:	2003      	movs	r0, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005272:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005274:	26c0      	movs	r6, #192	; 0xc0
 8005276:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005278:	4c0f      	ldr	r4, [pc, #60]	; (80052b8 <HAL_I2C_MspInit+0x64>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800527c:	69e3      	ldr	r3, [r4, #28]
 800527e:	f043 0302 	orr.w	r3, r3, #2
 8005282:	61e3      	str	r3, [r4, #28]
 8005284:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005286:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800528e:	480b      	ldr	r0, [pc, #44]	; (80052bc <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005290:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005292:	e9cd 6702 	strd	r6, r7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005296:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005298:	f001 f816 	bl	80062c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800529c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800529e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052a2:	6263      	str	r3, [r4, #36]	; 0x24
 80052a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	9b01      	ldr	r3, [sp, #4]
}
 80052ae:	b008      	add	sp, #32
 80052b0:	bdd0      	pop	{r4, r6, r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40005400 	.word	0x40005400
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40020400 	.word	0x40020400

080052c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052c0:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 80052c2:	6803      	ldr	r3, [r0, #0]
{
 80052c4:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM2)
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d020      	beq.n	800530e <HAL_TIM_Base_MspInit+0x4e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80052cc:	4a30      	ldr	r2, [pc, #192]	; (8005390 <HAL_TIM_Base_MspInit+0xd0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d033      	beq.n	800533a <HAL_TIM_Base_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80052d2:	4a30      	ldr	r2, [pc, #192]	; (8005394 <HAL_TIM_Base_MspInit+0xd4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d045      	beq.n	8005364 <HAL_TIM_Base_MspInit+0xa4>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 80052d8:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <HAL_TIM_Base_MspInit+0xd8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d002      	beq.n	80052e4 <HAL_TIM_Base_MspInit+0x24>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80052de:	b005      	add	sp, #20
 80052e0:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 80052e4:	2200      	movs	r2, #0
    __HAL_RCC_TIM9_CLK_ENABLE();
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <HAL_TIM_Base_MspInit+0xdc>)
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 80052e8:	2019      	movs	r0, #25
    __HAL_RCC_TIM9_CLK_ENABLE();
 80052ea:	6a19      	ldr	r1, [r3, #32]
 80052ec:	f041 0104 	orr.w	r1, r1, #4
 80052f0:	6219      	str	r1, [r3, #32]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 80052f4:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	9303      	str	r3, [sp, #12]
 80052fc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM9_IRQn, 0, 0);
 80052fe:	f000 fd31 	bl	8005d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8005302:	2019      	movs	r0, #25
}
 8005304:	b005      	add	sp, #20
 8005306:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 800530a:	f000 bd69 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800530e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005310:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8005314:	6a59      	ldr	r1, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005316:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005318:	f041 0101 	orr.w	r1, r1, #1
 800531c:	6259      	str	r1, [r3, #36]	; 0x24
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005320:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800532a:	f000 fd1b 	bl	8005d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800532e:	201c      	movs	r0, #28
}
 8005330:	b005      	add	sp, #20
 8005332:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8005336:	f000 bd53 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800533a:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_TIM_Base_MspInit+0xdc>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800533e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005340:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005342:	f041 0102 	orr.w	r1, r1, #2
 8005346:	6259      	str	r1, [r3, #36]	; 0x24
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800534a:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005354:	f000 fd06 	bl	8005d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005358:	201d      	movs	r0, #29
}
 800535a:	b005      	add	sp, #20
 800535c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 8005360:	f000 bd3e 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005364:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005366:	4b0d      	ldr	r3, [pc, #52]	; (800539c <HAL_TIM_Base_MspInit+0xdc>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005368:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 800536a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800536c:	f041 0104 	orr.w	r1, r1, #4
 8005370:	6259      	str	r1, [r3, #36]	; 0x24
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005374:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	9302      	str	r3, [sp, #8]
 800537c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800537e:	f000 fcf1 	bl	8005d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005382:	201e      	movs	r0, #30
}
 8005384:	b005      	add	sp, #20
 8005386:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM9_IRQn);
 800538a:	f000 bd29 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
 800538e:	bf00      	nop
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40010800 	.word	0x40010800
 800539c:	40023800 	.word	0x40023800

080053a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a2:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80053a4:	4b30      	ldr	r3, [pc, #192]	; (8005468 <HAL_UART_MspInit+0xc8>)
 80053a6:	6802      	ldr	r2, [r0, #0]
{
 80053a8:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 80053aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80053b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80053b4:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 80053b6:	d001      	beq.n	80053bc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053b8:	b008      	add	sp, #32
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80053bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80053c0:	6a1a      	ldr	r2, [r3, #32]
 80053c2:	4605      	mov	r5, r0
 80053c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053c8:	621a      	str	r2, [r3, #32]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053cc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80053ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80053d2:	9200      	str	r2, [sp, #0]
 80053d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d6:	69da      	ldr	r2, [r3, #28]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80053d8:	4e24      	ldr	r6, [pc, #144]	; (800546c <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	61da      	str	r2, [r3, #28]
 80053e0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053ec:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ee:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053f6:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f8:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fa:	481d      	ldr	r0, [pc, #116]	; (8005470 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fe:	f000 ff63 	bl	80062c8 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005402:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005406:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005408:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800540c:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005410:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005414:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005416:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005418:	f000 fda2 	bl	8005f60 <HAL_DMA_Init>
 800541c:	b9f0      	cbnz	r0, 800545c <HAL_UART_MspInit+0xbc>
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800541e:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005420:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005422:	2110      	movs	r1, #16
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005424:	4c14      	ldr	r4, [pc, #80]	; (8005478 <HAL_UART_MspInit+0xd8>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005426:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005428:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800542c:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005430:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005434:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_UART_MspInit+0xdc>)
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005436:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005438:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800543a:	6061      	str	r1, [r4, #4]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800543c:	6023      	str	r3, [r4, #0]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800543e:	f000 fd8f 	bl	8005f60 <HAL_DMA_Init>
 8005442:	b970      	cbnz	r0, 8005462 <HAL_UART_MspInit+0xc2>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005444:	2200      	movs	r2, #0
 8005446:	2025      	movs	r0, #37	; 0x25
 8005448:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800544a:	636c      	str	r4, [r5, #52]	; 0x34
 800544c:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800544e:	f000 fc89 	bl	8005d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005452:	2025      	movs	r0, #37	; 0x25
 8005454:	f000 fcc4 	bl	8005de0 <HAL_NVIC_EnableIRQ>
}
 8005458:	b008      	add	sp, #32
 800545a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800545c:	f7ff fe3a 	bl	80050d4 <Error_Handler>
 8005460:	e7dd      	b.n	800541e <HAL_UART_MspInit+0x7e>
      Error_Handler();
 8005462:	f7ff fe37 	bl	80050d4 <Error_Handler>
 8005466:	e7ed      	b.n	8005444 <HAL_UART_MspInit+0xa4>
 8005468:	40013800 	.word	0x40013800
 800546c:	20000484 	.word	0x20000484
 8005470:	40020000 	.word	0x40020000
 8005474:	40026058 	.word	0x40026058
 8005478:	200004c8 	.word	0x200004c8
 800547c:	40026044 	.word	0x40026044

08005480 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005480:	e7fe      	b.n	8005480 <NMI_Handler>
 8005482:	bf00      	nop

08005484 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005484:	e7fe      	b.n	8005484 <HardFault_Handler>
 8005486:	bf00      	nop

08005488 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005488:	e7fe      	b.n	8005488 <MemManage_Handler>
 800548a:	bf00      	nop

0800548c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800548c:	e7fe      	b.n	800548c <BusFault_Handler>
 800548e:	bf00      	nop

08005490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005490:	e7fe      	b.n	8005490 <UsageFault_Handler>
 8005492:	bf00      	nop

08005494 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop

08005498 <DebugMon_Handler>:
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop

0800549c <PendSV_Handler>:
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop

080054a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054a0:	f000 b914 	b.w	80056cc <HAL_IncTick>

080054a4 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_CLK_Pin);
 80054a4:	2001      	movs	r0, #1
 80054a6:	f001 b895 	b.w	80065d4 <HAL_GPIO_EXTI_IRQHandler>
 80054aa:	bf00      	nop

080054ac <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rot_SW_Pin);
 80054ac:	2004      	movs	r0, #4
 80054ae:	f001 b891 	b.w	80065d4 <HAL_GPIO_EXTI_IRQHandler>
 80054b2:	bf00      	nop

080054b4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <DMA1_Channel1_IRQHandler+0x8>)
 80054b6:	f000 be53 	b.w	8006160 <HAL_DMA_IRQHandler>
 80054ba:	bf00      	nop
 80054bc:	20000440 	.word	0x20000440

080054c0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80054c0:	4801      	ldr	r0, [pc, #4]	; (80054c8 <DMA1_Channel4_IRQHandler+0x8>)
 80054c2:	f000 be4d 	b.w	8006160 <HAL_DMA_IRQHandler>
 80054c6:	bf00      	nop
 80054c8:	200004c8 	.word	0x200004c8

080054cc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80054cc:	4801      	ldr	r0, [pc, #4]	; (80054d4 <DMA1_Channel5_IRQHandler+0x8>)
 80054ce:	f000 be47 	b.w	8006160 <HAL_DMA_IRQHandler>
 80054d2:	bf00      	nop
 80054d4:	20000484 	.word	0x20000484

080054d8 <USB_LP_IRQHandler>:
void USB_LP_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <USB_LP_IRQHandler+0x8>)
 80054da:	f001 bb61 	b.w	8006ba0 <HAL_PCD_IRQHandler>
 80054de:	bf00      	nop
 80054e0:	2000144c 	.word	0x2000144c

080054e4 <TIM9_IRQHandler>:
void TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM9_IRQn 0 */

  /* USER CODE END TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80054e4:	4801      	ldr	r0, [pc, #4]	; (80054ec <TIM9_IRQHandler+0x8>)
 80054e6:	f002 bf1b 	b.w	8008320 <HAL_TIM_IRQHandler>
 80054ea:	bf00      	nop
 80054ec:	20000628 	.word	0x20000628

080054f0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <TIM2_IRQHandler+0x8>)
 80054f2:	f002 bf15 	b.w	8008320 <HAL_TIM_IRQHandler>
 80054f6:	bf00      	nop
 80054f8:	20000568 	.word	0x20000568

080054fc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <TIM3_IRQHandler+0x8>)
 80054fe:	f002 bf0f 	b.w	8008320 <HAL_TIM_IRQHandler>
 8005502:	bf00      	nop
 8005504:	200005a8 	.word	0x200005a8

08005508 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <TIM4_IRQHandler+0x8>)
 800550a:	f002 bf09 	b.w	8008320 <HAL_TIM_IRQHandler>
 800550e:	bf00      	nop
 8005510:	200005e8 	.word	0x200005e8

08005514 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <USART1_IRQHandler+0x8>)
 8005516:	f003 b9d1 	b.w	80088bc <HAL_UART_IRQHandler>
 800551a:	bf00      	nop
 800551c:	20000668 	.word	0x20000668

08005520 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005520:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8005522:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005526:	f001 f855 	bl	80065d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 800552a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800552e:	f001 f851 	bl	80065d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8005532:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005536:	f001 f84d 	bl	80065d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 800553a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800553e:	f001 f849 	bl	80065d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8005546:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800554a:	f001 b843 	b.w	80065d4 <HAL_GPIO_EXTI_IRQHandler>
 800554e:	bf00      	nop

08005550 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005550:	2001      	movs	r0, #1
 8005552:	4770      	bx	lr

08005554 <_kill>:

int _kill(int pid, int sig)
{
 8005554:	b508      	push	{r3, lr}
	errno = EINVAL;
 8005556:	f005 f95b 	bl	800a810 <__errno>
 800555a:	2216      	movs	r2, #22
 800555c:	4603      	mov	r3, r0
	return -1;
}
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bd08      	pop	{r3, pc}
 8005566:	bf00      	nop

08005568 <_exit>:

void _exit (int status)
{
 8005568:	b508      	push	{r3, lr}
	errno = EINVAL;
 800556a:	f005 f951 	bl	800a810 <__errno>
 800556e:	2316      	movs	r3, #22
 8005570:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005572:	e7fe      	b.n	8005572 <_exit+0xa>

08005574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005574:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005576:	1e16      	subs	r6, r2, #0
 8005578:	dd07      	ble.n	800558a <_read+0x16>
 800557a:	460c      	mov	r4, r1
 800557c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800557e:	f3af 8000 	nop.w
 8005582:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005586:	42a5      	cmp	r5, r4
 8005588:	d1f9      	bne.n	800557e <_read+0xa>
	}

return len;
}
 800558a:	4630      	mov	r0, r6
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	bf00      	nop

08005590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005590:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005592:	1e16      	subs	r6, r2, #0
 8005594:	dd07      	ble.n	80055a6 <_write+0x16>
 8005596:	460c      	mov	r4, r1
 8005598:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800559a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800559e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a2:	42ac      	cmp	r4, r5
 80055a4:	d1f9      	bne.n	800559a <_write+0xa>
	}
	return len;
}
 80055a6:	4630      	mov	r0, r6
 80055a8:	bd70      	pop	{r4, r5, r6, pc}
 80055aa:	bf00      	nop

080055ac <_close>:

int _close(int file)
{
	return -1;
}
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80055b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80055b8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80055ba:	604b      	str	r3, [r1, #4]
}
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop

080055c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80055c0:	2001      	movs	r0, #1
 80055c2:	4770      	bx	lr

080055c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80055c4:	2000      	movs	r0, #0
 80055c6:	4770      	bx	lr

080055c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055c8:	490d      	ldr	r1, [pc, #52]	; (8005600 <_sbrk+0x38>)
{
 80055ca:	4603      	mov	r3, r0
 80055cc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055ce:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <_sbrk+0x3c>)
 80055d0:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80055d2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055d4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80055d6:	b120      	cbz	r0, 80055e2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055d8:	4403      	add	r3, r0
 80055da:	4293      	cmp	r3, r2
 80055dc:	d807      	bhi.n	80055ee <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80055de:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80055e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80055e2:	4c0a      	ldr	r4, [pc, #40]	; (800560c <_sbrk+0x44>)
 80055e4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80055e6:	4403      	add	r3, r0
 80055e8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80055ea:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80055ec:	d9f7      	bls.n	80055de <_sbrk+0x16>
    errno = ENOMEM;
 80055ee:	f005 f90f 	bl	800a810 <__errno>
 80055f2:	220c      	movs	r2, #12
 80055f4:	4603      	mov	r3, r0
    return (void *)-1;
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	bf00      	nop
 8005600:	200007d4 	.word	0x200007d4
 8005604:	20008000 	.word	0x20008000
 8005608:	00002000 	.word	0x00002000
 800560c:	20001968 	.word	0x20001968

08005610 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop

08005614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005614:	480c      	ldr	r0, [pc, #48]	; (8005648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005616:	490d      	ldr	r1, [pc, #52]	; (800564c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005618:	4a0d      	ldr	r2, [pc, #52]	; (8005650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800561a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800561c:	e002      	b.n	8005624 <LoopCopyDataInit>

0800561e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800561e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005622:	3304      	adds	r3, #4

08005624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005628:	d3f9      	bcc.n	800561e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800562c:	4c0a      	ldr	r4, [pc, #40]	; (8005658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800562e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005630:	e001      	b.n	8005636 <LoopFillZerobss>

08005632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005634:	3204      	adds	r2, #4

08005636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005638:	d3fb      	bcc.n	8005632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800563a:	f7ff ffe9 	bl	8005610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800563e:	f005 f8ed 	bl	800a81c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005642:	f7fc fb57 	bl	8001cf4 <main>
  bx lr
 8005646:	4770      	bx	lr
  ldr r0, =_sdata
 8005648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800564c:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8005650:	0800db7c 	.word	0x0800db7c
  ldr r2, =_sbss
 8005654:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8005658:	20001968 	.word	0x20001968

0800565c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800565c:	e7fe      	b.n	800565c <ADC1_IRQHandler>
	...

08005660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005660:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005662:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <HAL_InitTick+0x40>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	b90b      	cbnz	r3, 800566c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005668:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800566a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800566c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	490b      	ldr	r1, [pc, #44]	; (80056a4 <HAL_InitTick+0x44>)
 8005676:	4605      	mov	r5, r0
 8005678:	6808      	ldr	r0, [r1, #0]
 800567a:	fbb0 f0f3 	udiv	r0, r0, r3
 800567e:	f000 fbd1 	bl	8005e24 <HAL_SYSTICK_Config>
 8005682:	4604      	mov	r4, r0
 8005684:	2800      	cmp	r0, #0
 8005686:	d1ef      	bne.n	8005668 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005688:	2d0f      	cmp	r5, #15
 800568a:	d8ed      	bhi.n	8005668 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800568c:	4602      	mov	r2, r0
 800568e:	4629      	mov	r1, r5
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	f000 fb66 	bl	8005d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_InitTick+0x48>)
 800569a:	4620      	mov	r0, r4
 800569c:	601d      	str	r5, [r3, #0]
}
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20000030 	.word	0x20000030
 80056a4:	2000002c 	.word	0x2000002c
 80056a8:	20000034 	.word	0x20000034

080056ac <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056ac:	2003      	movs	r0, #3
{
 80056ae:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056b0:	f000 fb46 	bl	8005d40 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056b4:	200f      	movs	r0, #15
 80056b6:	f7ff ffd3 	bl	8005660 <HAL_InitTick>
 80056ba:	b110      	cbz	r0, 80056c2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80056bc:	2401      	movs	r4, #1
}
 80056be:	4620      	mov	r0, r4
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	4604      	mov	r4, r0
    HAL_MspInit();
 80056c4:	f7ff fd08 	bl	80050d8 <HAL_MspInit>
}
 80056c8:	4620      	mov	r0, r4
 80056ca:	bd10      	pop	{r4, pc}

080056cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80056cc:	4a03      	ldr	r2, [pc, #12]	; (80056dc <HAL_IncTick+0x10>)
 80056ce:	4904      	ldr	r1, [pc, #16]	; (80056e0 <HAL_IncTick+0x14>)
 80056d0:	6813      	ldr	r3, [r2, #0]
 80056d2:	6809      	ldr	r1, [r1, #0]
 80056d4:	440b      	add	r3, r1
 80056d6:	6013      	str	r3, [r2, #0]
}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	200007d8 	.word	0x200007d8
 80056e0:	20000030 	.word	0x20000030

080056e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80056e4:	4b01      	ldr	r3, [pc, #4]	; (80056ec <HAL_GetTick+0x8>)
 80056e6:	6818      	ldr	r0, [r3, #0]
}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	200007d8 	.word	0x200007d8

080056f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80056f4:	f7ff fff6 	bl	80056e4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056f8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80056fa:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80056fc:	d002      	beq.n	8005704 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80056fe:	4b04      	ldr	r3, [pc, #16]	; (8005710 <HAL_Delay+0x20>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005704:	f7ff ffee 	bl	80056e4 <HAL_GetTick>
 8005708:	1b40      	subs	r0, r0, r5
 800570a:	42a0      	cmp	r0, r4
 800570c:	d3fa      	bcc.n	8005704 <HAL_Delay+0x14>
  {
  }
}
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20000030 	.word	0x20000030

08005714 <HAL_ADC_Init>:
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005714:	2800      	cmp	r0, #0
 8005716:	f000 80a9 	beq.w	800586c <HAL_ADC_Init+0x158>
{
 800571a:	b530      	push	{r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800571c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800571e:	4604      	mov	r4, r0
{
 8005720:	b083      	sub	sp, #12
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005722:	2b00      	cmp	r3, #0
 8005724:	d078      	beq.n	8005818 <HAL_ADC_Init+0x104>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005726:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005728:	06d8      	lsls	r0, r3, #27
 800572a:	d453      	bmi.n	80057d4 <HAL_ADC_Init+0xc0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800572c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800572e:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_ADC_Init+0x18c>)
    ADC_STATE_CLR_SET(hadc->State,
 8005730:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005734:	f023 0302 	bic.w	r3, r3, #2
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800573e:	6853      	ldr	r3, [r2, #4]
 8005740:	6861      	ldr	r1, [r4, #4]
 8005742:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005746:	430b      	orrs	r3, r1
 8005748:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800574e:	fa91 f1a1 	rbit	r1, r1
 8005752:	2302      	movs	r3, #2
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
                hadc->Init.EOCSelection                                        |
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005754:	fab1 f181 	clz	r1, r1
                hadc->Init.ChannelsBank                                        |
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8005758:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005764:	6965      	ldr	r5, [r4, #20]
 8005766:	68e2      	ldr	r2, [r4, #12]
 8005768:	f894 c03c 	ldrb.w	ip, [r4, #60]	; 0x3c
 800576c:	432a      	orrs	r2, r5
 800576e:	6a25      	ldr	r5, [r4, #32]
 8005770:	fa0c f101 	lsl.w	r1, ip, r1
 8005774:	432a      	orrs	r2, r5
 8005776:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005778:	6b61      	ldr	r1, [r4, #52]	; 0x34
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800577a:	fa00 f303 	lsl.w	r3, r0, r3
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800577e:	2910      	cmp	r1, #16
                hadc->Init.ChannelsBank                                        |
 8005780:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005784:	d002      	beq.n	800578c <HAL_ADC_Init+0x78>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8005786:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005788:	4311      	orrs	r1, r2
 800578a:	430b      	orrs	r3, r1
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	6811      	ldr	r1, [r2, #0]
 8005790:	0649      	lsls	r1, r1, #25
 8005792:	d551      	bpl.n	8005838 <HAL_ADC_Init+0x124>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
                  hadc->Init.LowPowerAutoPowerOff           |
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005794:	6925      	ldr	r5, [r4, #16]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8005796:	6890      	ldr	r0, [r2, #8]
 8005798:	4942      	ldr	r1, [pc, #264]	; (80058a4 <HAL_ADC_Init+0x190>)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800579a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800579e:	ea01 0100 	and.w	r1, r1, r0
 80057a2:	ea41 0103 	orr.w	r1, r1, r3
 80057a6:	6091      	str	r1, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80057a8:	d017      	beq.n	80057da <HAL_ADC_Init+0xc6>
 80057aa:	2d01      	cmp	r5, #1
 80057ac:	d015      	beq.n	80057da <HAL_ADC_Init+0xc6>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80057ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80057b0:	f021 71f8 	bic.w	r1, r1, #32505856	; 0x1f00000
 80057b4:	6311      	str	r1, [r2, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80057b6:	6891      	ldr	r1, [r2, #8]
 80057b8:	4a3b      	ldr	r2, [pc, #236]	; (80058a8 <HAL_ADC_Init+0x194>)
 80057ba:	400a      	ands	r2, r1
 80057bc:	429a      	cmp	r2, r3
 80057be:	d11f      	bne.n	8005800 <HAL_ADC_Init+0xec>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80057c0:	2000      	movs	r0, #0
 80057c2:	6520      	str	r0, [r4, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80057c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80057d0:	b003      	add	sp, #12
 80057d2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80057d4:	2001      	movs	r0, #1
}
 80057d6:	b003      	add	sp, #12
 80057d8:	bd30      	pop	{r4, r5, pc}
 80057da:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80057de:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80057e0:	fa91 f1a1 	rbit	r1, r1
 80057e4:	fab1 f081 	clz	r0, r1
 80057e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80057ea:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80057ee:	3901      	subs	r1, #1
 80057f0:	4081      	lsls	r1, r0
 80057f2:	4329      	orrs	r1, r5
 80057f4:	6311      	str	r1, [r2, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80057f6:	6891      	ldr	r1, [r2, #8]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	; (80058a8 <HAL_ADC_Init+0x194>)
 80057fa:	400a      	ands	r2, r1
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d0df      	beq.n	80057c0 <HAL_ADC_Init+0xac>
      tmp_hal_status = HAL_ERROR;
 8005800:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8005802:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005804:	f023 0312 	bic.w	r3, r3, #18
 8005808:	f043 0310 	orr.w	r3, r3, #16
 800580c:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005810:	4303      	orrs	r3, r0
 8005812:	6523      	str	r3, [r4, #80]	; 0x50
}
 8005814:	b003      	add	sp, #12
 8005816:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005818:	4a24      	ldr	r2, [pc, #144]	; (80058ac <HAL_ADC_Init+0x198>)
    ADC_CLEAR_ERRORCODE(hadc);
 800581a:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 800581c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005820:	6a13      	ldr	r3, [r2, #32]
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	6213      	str	r3, [r2, #32]
 8005828:	6a13      	ldr	r3, [r2, #32]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8005832:	f7ff fc73 	bl	800511c <HAL_ADC_MspInit>
 8005836:	e776      	b.n	8005726 <HAL_ADC_Init+0x12>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8005838:	69a1      	ldr	r1, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800583a:	68a5      	ldr	r5, [r4, #8]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800583c:	430b      	orrs	r3, r1
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800583e:	69e1      	ldr	r1, [r4, #28]
 8005840:	ea45 0c01 	orr.w	ip, r5, r1
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8005844:	6925      	ldr	r5, [r4, #16]
 8005846:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800584a:	d00c      	beq.n	8005866 <HAL_ADC_Init+0x152>
 800584c:	2d01      	cmp	r5, #1
 800584e:	d00a      	beq.n	8005866 <HAL_ADC_Init+0x152>
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005850:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8005854:	2901      	cmp	r1, #1
 8005856:	d00b      	beq.n	8005870 <HAL_ADC_Init+0x15c>
        MODIFY_REG(hadc->Instance->CR1,
 8005858:	6850      	ldr	r0, [r2, #4]
 800585a:	4915      	ldr	r1, [pc, #84]	; (80058b0 <HAL_ADC_Init+0x19c>)
 800585c:	4001      	ands	r1, r0
 800585e:	ea41 010c 	orr.w	r1, r1, ip
 8005862:	6051      	str	r1, [r2, #4]
 8005864:	e797      	b.n	8005796 <HAL_ADC_Init+0x82>
                  hadc->Init.LowPowerAutoPowerOff           |
 8005866:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 800586a:	e7f1      	b.n	8005850 <HAL_ADC_Init+0x13c>
    return HAL_ERROR;
 800586c:	2001      	movs	r0, #1
}
 800586e:	4770      	bx	lr
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005870:	b968      	cbnz	r0, 800588e <HAL_ADC_Init+0x17a>
 8005872:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005876:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800587a:	fab1 f081 	clz	r0, r1
 800587e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005880:	3901      	subs	r1, #1
 8005882:	4081      	lsls	r1, r0
 8005884:	ea41 010c 	orr.w	r1, r1, ip
 8005888:	f441 6c00 	orr.w	ip, r1, #2048	; 0x800
 800588c:	e7e4      	b.n	8005858 <HAL_ADC_Init+0x144>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800588e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005890:	f041 0120 	orr.w	r1, r1, #32
 8005894:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005896:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005898:	f041 0101 	orr.w	r1, r1, #1
 800589c:	6521      	str	r1, [r4, #80]	; 0x50
 800589e:	e7db      	b.n	8005858 <HAL_ADC_Init+0x144>
 80058a0:	40012700 	.word	0x40012700
 80058a4:	c0fff18d 	.word	0xc0fff18d
 80058a8:	bf80fffe 	.word	0xbf80fffe
 80058ac:	40023800 	.word	0x40023800
 80058b0:	fcfc16ff 	.word	0xfcfc16ff

080058b4 <HAL_ADC_DeInit>:
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058b4:	2800      	cmp	r0, #0
 80058b6:	d075      	beq.n	80059a4 <HAL_ADC_DeInit+0xf0>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80058b8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
{
 80058ba:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80058bc:	f042 0202 	orr.w	r2, r2, #2
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80058c0:	6803      	ldr	r3, [r0, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80058c2:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (ADC_IS_ENABLE(hadc) != RESET)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4604      	mov	r4, r0
 80058c8:	0655      	lsls	r5, r2, #25
 80058ca:	d453      	bmi.n	8005974 <HAL_ADC_DeInit+0xc0>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80058cc:	f06f 001f 	mvn.w	r0, #31
 80058d0:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80058d2:	6858      	ldr	r0, [r3, #4]
 80058d4:	4939      	ldr	r1, [pc, #228]	; (80059bc <HAL_ADC_DeInit+0x108>)
    ADC_CR2_CLEAR(hadc);
 80058d6:	4a3a      	ldr	r2, [pc, #232]	; (80059c0 <HAL_ADC_DeInit+0x10c>)
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80058d8:	4001      	ands	r1, r0
 80058da:	6059      	str	r1, [r3, #4]
    ADC_CR2_CLEAR(hadc);
 80058dc:	6899      	ldr	r1, [r3, #8]
 80058de:	400a      	ands	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]
    ADC_SMPR0_CLEAR(hadc);
 80058e2:	bf00      	nop
    ADC_SMPR1_CLEAR(hadc);
 80058e4:	6823      	ldr	r3, [r4, #0]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 80058e6:	4a37      	ldr	r2, [pc, #220]	; (80059c4 <HAL_ADC_DeInit+0x110>)
    ADC_SMPR1_CLEAR(hadc);
 80058e8:	68d9      	ldr	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 80058ea:	4837      	ldr	r0, [pc, #220]	; (80059c8 <HAL_ADC_DeInit+0x114>)
    ADC_SMPR1_CLEAR(hadc);
 80058ec:	0d49      	lsrs	r1, r1, #21
 80058ee:	0549      	lsls	r1, r1, #21
 80058f0:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80058f2:	6919      	ldr	r1, [r3, #16]
 80058f4:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 80058f8:	6119      	str	r1, [r3, #16]
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 80058fa:	6959      	ldr	r1, [r3, #20]
 80058fc:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8005900:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8005902:	6999      	ldr	r1, [r3, #24]
 8005904:	4011      	ands	r1, r2
 8005906:	6199      	str	r1, [r3, #24]
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8005908:	69d9      	ldr	r1, [r3, #28]
 800590a:	4011      	ands	r1, r2
 800590c:	61d9      	str	r1, [r3, #28]
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800590e:	6a19      	ldr	r1, [r3, #32]
 8005910:	4011      	ands	r1, r2
 8005912:	6219      	str	r1, [r3, #32]
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8005914:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005916:	4011      	ands	r1, r2
 8005918:	6259      	str	r1, [r3, #36]	; 0x24
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 800591a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800591c:	4011      	ands	r1, r2
 800591e:	6299      	str	r1, [r3, #40]	; 0x28
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8005920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005922:	400a      	ands	r2, r1
 8005924:	62da      	str	r2, [r3, #44]	; 0x2c
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8005926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8005928:	4928      	ldr	r1, [pc, #160]	; (80059cc <HAL_ADC_DeInit+0x118>)
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 800592a:	4010      	ands	r0, r2
 800592c:	6318      	str	r0, [r3, #48]	; 0x30
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 800592e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_ADC_MspDeInit(hadc);
 8005930:	4620      	mov	r0, r4
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8005932:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8005936:	635a      	str	r2, [r3, #52]	; 0x34
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 8005938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 8005940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005942:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8005946:	63da      	str	r2, [r3, #60]	; 0x3c
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 8005948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 8005950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005952:	0d92      	lsrs	r2, r2, #22
 8005954:	0592      	lsls	r2, r2, #22
 8005956:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 8005958:	684b      	ldr	r3, [r1, #4]
 800595a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800595e:	604b      	str	r3, [r1, #4]
    HAL_ADC_MspDeInit(hadc);
 8005960:	f7ff fc2a 	bl	80051b8 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005964:	2300      	movs	r3, #0
    hadc->State = HAL_ADC_STATE_RESET;
 8005966:	4618      	mov	r0, r3
    ADC_CLEAR_ERRORCODE(hadc);
 8005968:	6523      	str	r3, [r4, #80]	; 0x50
    hadc->State = HAL_ADC_STATE_RESET;
 800596a:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 800596c:	2300      	movs	r3, #0
 800596e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8005972:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800597c:	f7ff feb2 	bl	80056e4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005980:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8005982:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	0650      	lsls	r0, r2, #25
 8005988:	d5a0      	bpl.n	80058cc <HAL_ADC_DeInit+0x18>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800598a:	f7ff feab 	bl	80056e4 <HAL_GetTick>
 800598e:	1b40      	subs	r0, r0, r5
 8005990:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005992:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8005994:	d902      	bls.n	800599c <HAL_ADC_DeInit+0xe8>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	0651      	lsls	r1, r2, #25
 800599a:	d405      	bmi.n	80059a8 <HAL_ADC_DeInit+0xf4>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	0652      	lsls	r2, r2, #25
 80059a0:	d4f3      	bmi.n	800598a <HAL_ADC_DeInit+0xd6>
 80059a2:	e793      	b.n	80058cc <HAL_ADC_DeInit+0x18>
    return HAL_ERROR;
 80059a4:	2001      	movs	r0, #1
}
 80059a6:	4770      	bx	lr
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a8:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80059ac:	f043 0310 	orr.w	r3, r3, #16
 80059b0:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80059b4:	4303      	orrs	r3, r0
 80059b6:	6523      	str	r3, [r4, #80]	; 0x50
  if (tmp_hal_status == HAL_OK)
 80059b8:	e7d8      	b.n	800596c <HAL_ADC_DeInit+0xb8>
 80059ba:	bf00      	nop
 80059bc:	f83c0000 	.word	0xf83c0000
 80059c0:	8080f08c 	.word	0x8080f08c
 80059c4:	fffff000 	.word	0xfffff000
 80059c8:	fe0f8000 	.word	0xfe0f8000
 80059cc:	40012700 	.word	0x40012700

080059d0 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80059d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059d4:	f012 0f50 	tst.w	r2, #80	; 0x50
 80059d8:	d126      	bne.n	8005a28 <ADC_DMAConvCplt+0x58>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059dc:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80059e2:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059e4:	64da      	str	r2, [r3, #76]	; 0x4c
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059e6:	688a      	ldr	r2, [r1, #8]
 80059e8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80059ec:	d118      	bne.n	8005a20 <ADC_DMAConvCplt+0x50>
 80059ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80059f2:	b9aa      	cbnz	r2, 8005a20 <ADC_DMAConvCplt+0x50>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059f6:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80059fa:	d002      	beq.n	8005a02 <ADC_DMAConvCplt+0x32>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80059fc:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059fe:	0550      	lsls	r0, r2, #21
 8005a00:	d40e      	bmi.n	8005a20 <ADC_DMAConvCplt+0x50>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a02:	684a      	ldr	r2, [r1, #4]
 8005a04:	f022 0220 	bic.w	r2, r2, #32
 8005a08:	604a      	str	r2, [r1, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a10:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a14:	04d2      	lsls	r2, r2, #19
 8005a16:	d403      	bmi.n	8005a20 <ADC_DMAConvCplt+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff f9e1 	bl	8004de8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005a26:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	4718      	bx	r3
 8005a2e:	bf00      	nop

08005a30 <HAL_ADC_ConvHalfCpltCallback>:
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop

08005a34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005a34:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a36:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005a38:	f7ff fffa 	bl	8005a30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a3c:	bd08      	pop	{r3, pc}
 8005a3e:	bf00      	nop

08005a40 <HAL_ADC_ErrorCallback>:
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a44:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8005a46:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4e:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a58:	f7ff fff2 	bl	8005a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a5c:	bd08      	pop	{r3, pc}
 8005a5e:	bf00      	nop

08005a60 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 8005a60:	2300      	movs	r3, #0
{
 8005a62:	b530      	push	{r4, r5, lr}
 8005a64:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005a66:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005a68:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	f000 80aa 	beq.w	8005bc6 <HAL_ADC_ConfigChannel+0x166>
 8005a72:	2301      	movs	r3, #1
 8005a74:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8005a78:	684b      	ldr	r3, [r1, #4]
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8005a7e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->Rank < 7)
 8005a80:	d924      	bls.n	8005acc <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13)
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d866      	bhi.n	8005b54 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SQR4,
 8005a86:	f04f 0c1f 	mov.w	ip, #31
 8005a8a:	680c      	ldr	r4, [r1, #0]
 8005a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a90:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8005a92:	3b23      	subs	r3, #35	; 0x23
 8005a94:	fa04 fe03 	lsl.w	lr, r4, r3
 8005a98:	fa0c f303 	lsl.w	r3, ip, r3
 8005a9c:	ea25 0303 	bic.w	r3, r5, r3
 8005aa0:	ea43 030e 	orr.w	r3, r3, lr
 8005aa4:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005aa6:	2c09      	cmp	r4, #9
 8005aa8:	d822      	bhi.n	8005af0 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR3,
 8005aaa:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005aae:	2407      	movs	r4, #7
 8005ab0:	6943      	ldr	r3, [r0, #20]
 8005ab2:	6889      	ldr	r1, [r1, #8]
 8005ab4:	40ac      	lsls	r4, r5
 8005ab6:	40a9      	lsls	r1, r5
 8005ab8:	ea23 0404 	bic.w	r4, r3, r4
 8005abc:	430c      	orrs	r4, r1
 8005abe:	6144      	str	r4, [r0, #20]
  __HAL_UNLOCK(hadc);
 8005ac0:	2300      	movs	r3, #0
  return tmp_hal_status;
 8005ac2:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 8005ac4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
}
 8005ac8:	b003      	add	sp, #12
 8005aca:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR5,
 8005acc:	f04f 0c1f 	mov.w	ip, #31
 8005ad0:	680c      	ldr	r4, [r1, #0]
 8005ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ad6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005ad8:	3b05      	subs	r3, #5
 8005ada:	fa04 fe03 	lsl.w	lr, r4, r3
 8005ade:	fa0c f303 	lsl.w	r3, ip, r3
 8005ae2:	ea25 0303 	bic.w	r3, r5, r3
 8005ae6:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005aea:	2c09      	cmp	r4, #9
    MODIFY_REG(hadc->Instance->SQR5,
 8005aec:	6403      	str	r3, [r0, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 8005aee:	d9dc      	bls.n	8005aaa <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8005af0:	2c13      	cmp	r4, #19
 8005af2:	d844      	bhi.n	8005b7e <HAL_ADC_ConfigChannel+0x11e>
    MODIFY_REG(hadc->Instance->SMPR2,
 8005af4:	f04f 0c07 	mov.w	ip, #7
 8005af8:	688d      	ldr	r5, [r1, #8]
 8005afa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8005afe:	6903      	ldr	r3, [r0, #16]
 8005b00:	391e      	subs	r1, #30
 8005b02:	408d      	lsls	r5, r1
 8005b04:	fa0c f101 	lsl.w	r1, ip, r1
 8005b08:	ea23 0301 	bic.w	r3, r3, r1
 8005b0c:	432b      	orrs	r3, r5
 8005b0e:	6103      	str	r3, [r0, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b10:	f1a4 0310 	sub.w	r3, r4, #16
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d8d3      	bhi.n	8005ac0 <HAL_ADC_ConfigChannel+0x60>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8005b18:	4b34      	ldr	r3, [pc, #208]	; (8005bec <HAL_ADC_ConfigChannel+0x18c>)
 8005b1a:	6859      	ldr	r1, [r3, #4]
 8005b1c:	0209      	lsls	r1, r1, #8
 8005b1e:	d4cf      	bmi.n	8005ac0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005b20:	6859      	ldr	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b22:	2c10      	cmp	r4, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8005b24:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005b28:	6059      	str	r1, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b2a:	d1c9      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005b2c:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <HAL_ADC_ConfigChannel+0x190>)
 8005b2e:	4931      	ldr	r1, [pc, #196]	; (8005bf4 <HAL_ADC_ConfigChannel+0x194>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	fba1 1303 	umull	r1, r3, r1, r3
 8005b36:	0c9b      	lsrs	r3, r3, #18
 8005b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8005b40:	9b01      	ldr	r3, [sp, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0bc      	beq.n	8005ac0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8005b4c:	9b01      	ldr	r3, [sp, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f9      	bne.n	8005b46 <HAL_ADC_ConfigChannel+0xe6>
 8005b52:	e7b5      	b.n	8005ac0 <HAL_ADC_ConfigChannel+0x60>
  else if (sConfig->Rank < 19)
 8005b54:	2b12      	cmp	r3, #18
 8005b56:	d925      	bls.n	8005ba4 <HAL_ADC_ConfigChannel+0x144>
  else if (sConfig->Rank < 25)
 8005b58:	2b18      	cmp	r3, #24
    MODIFY_REG(hadc->Instance->SQR2,
 8005b5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 25)
 8005b5e:	d835      	bhi.n	8005bcc <HAL_ADC_ConfigChannel+0x16c>
    MODIFY_REG(hadc->Instance->SQR2,
 8005b60:	f04f 0c1f 	mov.w	ip, #31
 8005b64:	680c      	ldr	r4, [r1, #0]
 8005b66:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8005b68:	3b5f      	subs	r3, #95	; 0x5f
 8005b6a:	fa04 fe03 	lsl.w	lr, r4, r3
 8005b6e:	fa0c f303 	lsl.w	r3, ip, r3
 8005b72:	ea25 0303 	bic.w	r3, r5, r3
 8005b76:	ea43 030e 	orr.w	r3, r3, lr
 8005b7a:	6343      	str	r3, [r0, #52]	; 0x34
 8005b7c:	e793      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x46>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8005b7e:	2c1a      	cmp	r4, #26
 8005b80:	d80d      	bhi.n	8005b9e <HAL_ADC_ConfigChannel+0x13e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8005b82:	2507      	movs	r5, #7
 8005b84:	6889      	ldr	r1, [r1, #8]
 8005b86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005b8a:	68c3      	ldr	r3, [r0, #12]
 8005b8c:	3c3c      	subs	r4, #60	; 0x3c
 8005b8e:	40a1      	lsls	r1, r4
 8005b90:	fa05 f404 	lsl.w	r4, r5, r4
 8005b94:	ea23 0304 	bic.w	r3, r3, r4
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	60c3      	str	r3, [r0, #12]
 8005b9c:	e790      	b.n	8005ac0 <HAL_ADC_ConfigChannel+0x60>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8005b9e:	bf00      	nop
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ba0:	680c      	ldr	r4, [r1, #0]
 8005ba2:	e7b5      	b.n	8005b10 <HAL_ADC_ConfigChannel+0xb0>
    MODIFY_REG(hadc->Instance->SQR3,
 8005ba4:	f04f 0c1f 	mov.w	ip, #31
 8005ba8:	680c      	ldr	r4, [r1, #0]
 8005baa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bae:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8005bb0:	3b41      	subs	r3, #65	; 0x41
 8005bb2:	fa04 fe03 	lsl.w	lr, r4, r3
 8005bb6:	fa0c f303 	lsl.w	r3, ip, r3
 8005bba:	ea25 0303 	bic.w	r3, r5, r3
 8005bbe:	ea43 030e 	orr.w	r3, r3, lr
 8005bc2:	6383      	str	r3, [r0, #56]	; 0x38
 8005bc4:	e76f      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x46>
  __HAL_LOCK(hadc);
 8005bc6:	2002      	movs	r0, #2
}
 8005bc8:	b003      	add	sp, #12
 8005bca:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR1,
 8005bcc:	f04f 0c1f 	mov.w	ip, #31
 8005bd0:	680c      	ldr	r4, [r1, #0]
 8005bd2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8005bd4:	3b7d      	subs	r3, #125	; 0x7d
 8005bd6:	fa04 fe03 	lsl.w	lr, r4, r3
 8005bda:	fa0c f303 	lsl.w	r3, ip, r3
 8005bde:	ea25 0303 	bic.w	r3, r5, r3
 8005be2:	ea43 030e 	orr.w	r3, r3, lr
 8005be6:	6303      	str	r3, [r0, #48]	; 0x30
 8005be8:	e75d      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x46>
 8005bea:	bf00      	nop
 8005bec:	40012700 	.word	0x40012700
 8005bf0:	2000002c 	.word	0x2000002c
 8005bf4:	431bde83 	.word	0x431bde83

08005bf8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8005bf8:	2300      	movs	r3, #0
{
 8005bfa:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005bfc:	6802      	ldr	r2, [r0, #0]
{
 8005bfe:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 8005c00:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	0659      	lsls	r1, r3, #25
 8005c06:	d429      	bmi.n	8005c5c <ADC_Enable+0x64>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005c08:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <ADC_Enable+0x84>)
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	481c      	ldr	r0, [pc, #112]	; (8005c80 <ADC_Enable+0x88>)
    __HAL_ADC_ENABLE(hadc);
 8005c10:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005c12:	fba0 0303 	umull	r0, r3, r0, r3
 8005c16:	0c9b      	lsrs	r3, r3, #18
 8005c18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8005c1c:	f041 0101 	orr.w	r1, r1, #1
 8005c20:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005c22:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	b12b      	cbz	r3, 8005c34 <ADC_Enable+0x3c>
      wait_loop_index--;
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f9      	bne.n	8005c28 <ADC_Enable+0x30>
    tickstart = HAL_GetTick();    
 8005c34:	f7ff fd56 	bl	80056e4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005c38:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();    
 8005c3a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	065a      	lsls	r2, r3, #25
 8005c40:	d40c      	bmi.n	8005c5c <ADC_Enable+0x64>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005c42:	f7ff fd4f 	bl	80056e4 <HAL_GetTick>
 8005c46:	1b43      	subs	r3, r0, r5
 8005c48:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005c4a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8005c4c:	d903      	bls.n	8005c56 <ADC_Enable+0x5e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005c54:	d005      	beq.n	8005c62 <ADC_Enable+0x6a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	065b      	lsls	r3, r3, #25
 8005c5a:	d5f2      	bpl.n	8005c42 <ADC_Enable+0x4a>
  return HAL_OK;
 8005c5c:	2000      	movs	r0, #0
}
 8005c5e:	b003      	add	sp, #12
 8005c60:	bd30      	pop	{r4, r5, pc}
          return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8005c66:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c6a:	f043 0310 	orr.w	r3, r3, #16
 8005c6e:	64e3      	str	r3, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c72:	4303      	orrs	r3, r0
 8005c74:	6523      	str	r3, [r4, #80]	; 0x50
}
 8005c76:	b003      	add	sp, #12
 8005c78:	bd30      	pop	{r4, r5, pc}
 8005c7a:	bf00      	nop
 8005c7c:	2000002c 	.word	0x2000002c
 8005c80:	431bde83 	.word	0x431bde83

08005c84 <HAL_ADC_Start_DMA>:
{
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8005c88:	f890 5048 	ldrb.w	r5, [r0, #72]	; 0x48
 8005c8c:	2d01      	cmp	r5, #1
 8005c8e:	d04c      	beq.n	8005d2a <HAL_ADC_Start_DMA+0xa6>
 8005c90:	2301      	movs	r3, #1
 8005c92:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8005c96:	4604      	mov	r4, r0
 8005c98:	4688      	mov	r8, r1
 8005c9a:	4617      	mov	r7, r2
 8005c9c:	f7ff ffac 	bl	8005bf8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d13e      	bne.n	8005d24 <HAL_ADC_Start_DMA+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 8005ca6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ca8:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8005caa:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005cae:	f020 0001 	bic.w	r0, r0, #1
 8005cb2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8005cb6:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005cb8:	6873      	ldr	r3, [r6, #4]
 8005cba:	055b      	lsls	r3, r3, #21
 8005cbc:	d505      	bpl.n	8005cca <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005cbe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005cc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cc8:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005cd0:	f06f 0122 	mvn.w	r1, #34	; 0x22
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005cd6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cd8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005cdc:	bf18      	it	ne
 8005cde:	6d23      	ldrne	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005ce0:	4642      	mov	r2, r8
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ce2:	bf18      	it	ne
 8005ce4:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8005ce8:	6523      	str	r3, [r4, #80]	; 0x50
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005cea:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005cec:	4f11      	ldr	r7, [pc, #68]	; (8005d34 <HAL_ADC_Start_DMA+0xb0>)
 8005cee:	6287      	str	r7, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005cf0:	4f11      	ldr	r7, [pc, #68]	; (8005d38 <HAL_ADC_Start_DMA+0xb4>)
 8005cf2:	62c7      	str	r7, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005cf4:	4f11      	ldr	r7, [pc, #68]	; (8005d3c <HAL_ADC_Start_DMA+0xb8>)
 8005cf6:	6307      	str	r7, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005cf8:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005cfa:	6871      	ldr	r1, [r6, #4]
 8005cfc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005d00:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005d02:	68b1      	ldr	r1, [r6, #8]
 8005d04:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005d08:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005d0a:	f106 0158 	add.w	r1, r6, #88	; 0x58
 8005d0e:	f000 f98d 	bl	800602c <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8005d1a:	d103      	bne.n	8005d24 <HAL_ADC_Start_DMA+0xa0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d22:	609a      	str	r2, [r3, #8]
}
 8005d24:	4628      	mov	r0, r5
 8005d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8005d2a:	2502      	movs	r5, #2
}
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d32:	bf00      	nop
 8005d34:	080059d1 	.word	0x080059d1
 8005d38:	08005a35 	.word	0x08005a35
 8005d3c:	08005a45 	.word	0x08005a45

08005d40 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d40:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d44:	4906      	ldr	r1, [pc, #24]	; (8005d60 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005d46:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d48:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d4e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005d5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005d5e:	4770      	bx	lr
 8005d60:	e000ed00 	.word	0xe000ed00

08005d64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d64:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d66:	b500      	push	{lr}
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d6e:	f1c3 0e07 	rsb	lr, r3, #7
 8005d72:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d76:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d7a:	bf28      	it	cs
 8005d7c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d80:	f1bc 0f06 	cmp.w	ip, #6
 8005d84:	d91b      	bls.n	8005dbe <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d86:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d8a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d8c:	fa0c fc03 	lsl.w	ip, ip, r3
 8005d90:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d94:	f04f 3cff 	mov.w	ip, #4294967295
 8005d98:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005d9c:	ea21 010c 	bic.w	r1, r1, ip
 8005da0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005da2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005da8:	db0c      	blt.n	8005dc4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005daa:	0109      	lsls	r1, r1, #4
 8005dac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005db0:	b2c9      	uxtb	r1, r1
 8005db2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005db6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dbe:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	e7e7      	b.n	8005d94 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_NVIC_SetPriority+0x78>)
 8005dc6:	f000 000f 	and.w	r0, r0, #15
 8005dca:	0109      	lsls	r1, r1, #4
 8005dcc:	b2c9      	uxtb	r1, r1
 8005dce:	4403      	add	r3, r0
 8005dd0:	7619      	strb	r1, [r3, #24]
 8005dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dd6:	bf00      	nop
 8005dd8:	e000ed00 	.word	0xe000ed00
 8005ddc:	e000ecfc 	.word	0xe000ecfc

08005de0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005de0:	2800      	cmp	r0, #0
 8005de2:	db07      	blt.n	8005df4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005de4:	2301      	movs	r3, #1
 8005de6:	f000 011f 	and.w	r1, r0, #31
 8005dea:	4a03      	ldr	r2, [pc, #12]	; (8005df8 <HAL_NVIC_EnableIRQ+0x18>)
 8005dec:	0940      	lsrs	r0, r0, #5
 8005dee:	408b      	lsls	r3, r1
 8005df0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	e000e100 	.word	0xe000e100

08005dfc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	db0d      	blt.n	8005e1c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e00:	2201      	movs	r2, #1
 8005e02:	4907      	ldr	r1, [pc, #28]	; (8005e20 <HAL_NVIC_DisableIRQ+0x24>)
 8005e04:	0943      	lsrs	r3, r0, #5
 8005e06:	f000 001f 	and.w	r0, r0, #31
 8005e0a:	3320      	adds	r3, #32
 8005e0c:	fa02 f000 	lsl.w	r0, r2, r0
 8005e10:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e18:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e100 	.word	0xe000e100

08005e24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e24:	3801      	subs	r0, #1
 8005e26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005e2a:	d20f      	bcs.n	8005e4c <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e30:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e34:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e36:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e38:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e3a:	4c05      	ldr	r4, [pc, #20]	; (8005e50 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e3c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e3e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e42:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e44:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8005e46:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e48:	6119      	str	r1, [r3, #16]
 8005e4a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	4770      	bx	lr
 8005e50:	e000ed00 	.word	0xe000ed00

08005e54 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005e54:	b188      	cbz	r0, 8005e7a <HAL_DAC_Init+0x26>
{
 8005e56:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e58:	7903      	ldrb	r3, [r0, #4]
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e60:	b13b      	cbz	r3, 8005e72 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e62:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e64:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e66:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e68:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e6a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005e6c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005e6e:	4618      	mov	r0, r3
}
 8005e70:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005e72:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005e74:	f7ff f9bc 	bl	80051f0 <HAL_DAC_MspInit>
 8005e78:	e7f3      	b.n	8005e62 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005e7a:	2001      	movs	r0, #1
}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e80:	7942      	ldrb	r2, [r0, #5]
 8005e82:	2a01      	cmp	r2, #1
 8005e84:	d02a      	beq.n	8005edc <HAL_DAC_Start+0x5c>
{
 8005e86:	b410      	push	{r4}
 8005e88:	4603      	mov	r3, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e8a:	2402      	movs	r4, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	6800      	ldr	r0, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e90:	711c      	strb	r4, [r3, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e92:	6804      	ldr	r4, [r0, #0]
 8005e94:	f001 0c10 	and.w	ip, r1, #16
 8005e98:	fa02 f20c 	lsl.w	r2, r2, ip
 8005e9c:	4322      	orrs	r2, r4
 8005e9e:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 8005ea0:	b979      	cbnz	r1, 8005ec2 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005ea2:	6802      	ldr	r2, [r0, #0]
 8005ea4:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8005ea8:	2a3c      	cmp	r2, #60	; 0x3c
 8005eaa:	d103      	bne.n	8005eb4 <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005eac:	6842      	ldr	r2, [r0, #4]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	6042      	str	r2, [r0, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005eb4:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005eb6:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdac);
 8005eb8:	715a      	strb	r2, [r3, #5]
  hdac->State = HAL_DAC_STATE_READY;
 8005eba:	7119      	strb	r1, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ebc:	4610      	mov	r0, r2
}
 8005ebe:	bc10      	pop	{r4}
 8005ec0:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005ec2:	223c      	movs	r2, #60	; 0x3c
 8005ec4:	6801      	ldr	r1, [r0, #0]
 8005ec6:	fa02 fc0c 	lsl.w	ip, r2, ip
 8005eca:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8005ece:	4561      	cmp	r1, ip
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005ed2:	6842      	ldr	r2, [r0, #4]
 8005ed4:	f042 0202 	orr.w	r2, r2, #2
 8005ed8:	6042      	str	r2, [r0, #4]
 8005eda:	e7eb      	b.n	8005eb4 <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 8005edc:	2002      	movs	r0, #2
}
 8005ede:	4770      	bx	lr

08005ee0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ee0:	b410      	push	{r4}
  __IO uint32_t tmp = 0UL;
 8005ee2:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ee4:	6800      	ldr	r0, [r0, #0]
{
 8005ee6:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8005ee8:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t)hdac->Instance;
 8005eea:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005eec:	b949      	cbnz	r1, 8005f02 <HAL_DAC_SetValue+0x22>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005eee:	9901      	ldr	r1, [sp, #4]
 8005ef0:	3108      	adds	r1, #8
 8005ef2:	440a      	add	r2, r1
 8005ef4:	9201      	str	r2, [sp, #4]
  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;

  /* Return function status */
  return HAL_OK;
}
 8005ef6:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8005ef8:	9a01      	ldr	r2, [sp, #4]
 8005efa:	6013      	str	r3, [r2, #0]
}
 8005efc:	b003      	add	sp, #12
 8005efe:	bc10      	pop	{r4}
 8005f00:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f02:	9901      	ldr	r1, [sp, #4]
 8005f04:	3114      	adds	r1, #20
 8005f06:	440a      	add	r2, r1
 8005f08:	9201      	str	r2, [sp, #4]
 8005f0a:	e7f4      	b.n	8005ef6 <HAL_DAC_SetValue+0x16>

08005f0c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f0c:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f0e:	7940      	ldrb	r0, [r0, #5]
 8005f10:	2801      	cmp	r0, #1
 8005f12:	d022      	beq.n	8005f5a <HAL_DAC_ConfigChannel+0x4e>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f14:	2002      	movs	r0, #2
{
 8005f16:	b570      	push	{r4, r5, r6, lr}
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f18:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005f1c:	f640 76fe 	movw	r6, #4094	; 0xffe

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f20:	f04f 0e00 	mov.w	lr, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005f24:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f26:	7118      	strb	r0, [r3, #4]
  tmpreg1 = hdac->Instance->CR;
 8005f28:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005f2a:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005f2e:	f002 0210 	and.w	r2, r2, #16
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005f32:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005f34:	4096      	lsls	r6, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f36:	fa0c fc02 	lsl.w	ip, ip, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f3a:	fa01 f202 	lsl.w	r2, r1, r2
  tmpreg1 = hdac->Instance->CR;
 8005f3e:	6821      	ldr	r1, [r4, #0]

  /* Return function status */
  return HAL_OK;
 8005f40:	4670      	mov	r0, lr
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005f42:	ea21 0106 	bic.w	r1, r1, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f46:	430a      	orrs	r2, r1
  hdac->Instance->CR = tmpreg1;
 8005f48:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	ea22 020c 	bic.w	r2, r2, ip
 8005f50:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005f52:	711d      	strb	r5, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005f54:	f883 e005 	strb.w	lr, [r3, #5]
}
 8005f58:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdac);
 8005f5a:	2002      	movs	r0, #2
}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005f60:	b370      	cbz	r0, 8005fc0 <HAL_DMA_Init+0x60>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f62:	4603      	mov	r3, r0
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f64:	2202      	movs	r2, #2
{
 8005f66:	b530      	push	{r4, r5, lr}

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f68:	f04f 0c01 	mov.w	ip, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f6c:	2400      	movs	r4, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f6e:	6800      	ldr	r0, [r0, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8005f74:	6802      	ldr	r2, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f76:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005f78:	f422 4eff 	bic.w	lr, r2, #32640	; 0x7f80
  tmp |=  hdma->Init.Direction        |
 8005f7c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8005f80:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f82:	4910      	ldr	r1, [pc, #64]	; (8005fc4 <HAL_DMA_Init+0x64>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f84:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f86:	4d10      	ldr	r5, [pc, #64]	; (8005fc8 <HAL_DMA_Init+0x68>)
 8005f88:	4401      	add	r1, r0
 8005f8a:	fba5 5101 	umull	r5, r1, r5, r1
 8005f8e:	0909      	lsrs	r1, r1, #4
 8005f90:	0089      	lsls	r1, r1, #2
 8005f92:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f94:	6919      	ldr	r1, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8005f96:	f02e 0e70 	bic.w	lr, lr, #112	; 0x70
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f9a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f9c:	6959      	ldr	r1, [r3, #20]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	6999      	ldr	r1, [r3, #24]
 8005fa2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fa4:	69d9      	ldr	r1, [r3, #28]
 8005fa6:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8005fa8:	4908      	ldr	r1, [pc, #32]	; (8005fcc <HAL_DMA_Init+0x6c>)
  tmp |=  hdma->Init.Direction        |
 8005faa:	ea42 020e 	orr.w	r2, r2, lr
  hdma->DmaBaseAddress = DMA1;
 8005fae:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8005fb0:	6002      	str	r2, [r0, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fb2:	639c      	str	r4, [r3, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fb4:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005fb8:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21

  return HAL_OK;
 8005fbc:	4620      	mov	r0, r4
}
 8005fbe:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005fc0:	2001      	movs	r0, #1
}
 8005fc2:	4770      	bx	lr
 8005fc4:	bffd9ff8 	.word	0xbffd9ff8
 8005fc8:	cccccccd 	.word	0xcccccccd
 8005fcc:	40026000 	.word	0x40026000

08005fd0 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005fd0:	b320      	cbz	r0, 800601c <HAL_DMA_DeInit+0x4c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005fd2:	4603      	mov	r3, r0

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fd4:	2101      	movs	r1, #1
{
 8005fd6:	b430      	push	{r4, r5}
  hdma->Instance->CCR = 0U;
 8005fd8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8005fda:	6805      	ldr	r5, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fdc:	4810      	ldr	r0, [pc, #64]	; (8006020 <HAL_DMA_DeInit+0x50>)
  __HAL_DMA_DISABLE(hdma);
 8005fde:	682a      	ldr	r2, [r5, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	602a      	str	r2, [r5, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005fe6:	4a0f      	ldr	r2, [pc, #60]	; (8006024 <HAL_DMA_DeInit+0x54>)
 8005fe8:	442a      	add	r2, r5
 8005fea:	fba0 0202 	umull	r0, r2, r0, r2
 8005fee:	0912      	lsrs	r2, r2, #4
 8005ff0:	0092      	lsls	r2, r2, #2
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ff4:	f002 021c 	and.w	r2, r2, #28
 8005ff8:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8005ffc:	490a      	ldr	r1, [pc, #40]	; (8006028 <HAL_DMA_DeInit+0x58>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 8005ffe:	4620      	mov	r0, r4
  hdma->DmaBaseAddress = DMA1;
 8006000:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = 0U;
 8006002:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006004:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006006:	639c      	str	r4, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdma);
 8006008:	f883 4020 	strb.w	r4, [r3, #32]
  hdma->State = HAL_DMA_STATE_RESET;
 800600c:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
  hdma->XferHalfCpltCallback = NULL;
 8006010:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8006014:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
}
 8006018:	bc30      	pop	{r4, r5}
 800601a:	4770      	bx	lr
    return HAL_ERROR;
 800601c:	2001      	movs	r0, #1
}
 800601e:	4770      	bx	lr
 8006020:	cccccccd 	.word	0xcccccccd
 8006024:	bffd9ff8 	.word	0xbffd9ff8
 8006028:	40026000 	.word	0x40026000

0800602c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800602c:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800602e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8006032:	2801      	cmp	r0, #1
 8006034:	d042      	beq.n	80060bc <HAL_DMA_Start_IT+0x90>
{
 8006036:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8006038:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 800603a:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 800603e:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006042:	42a0      	cmp	r0, r4
 8006044:	fa5f fe80 	uxtb.w	lr, r0
 8006048:	d004      	beq.n	8006054 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604a:	2300      	movs	r3, #0
 800604c:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006050:	2002      	movs	r0, #2
  }
  return status;
}
 8006052:	bd30      	pop	{r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8006054:	2002      	movs	r0, #2
 8006056:	f88c 0021 	strb.w	r0, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800605a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800605c:	f8dc 4000 	ldr.w	r4, [ip]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006060:	f8cc 0038 	str.w	r0, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8006064:	6825      	ldr	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006066:	f8dc 0040 	ldr.w	r0, [ip, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800606a:	f025 0501 	bic.w	r5, r5, #1
 800606e:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006070:	f000 001c 	and.w	r0, r0, #28
 8006074:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8006078:	fa0e f000 	lsl.w	r0, lr, r0
 800607c:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800607e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006080:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006084:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8006086:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800608a:	bf0b      	itete	eq
 800608c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800608e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006090:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006092:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8006094:	b14b      	cbz	r3, 80060aa <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	f043 030e 	orr.w	r3, r3, #14
 800609c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800609e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6023      	str	r3, [r4, #0]
}
 80060a8:	bd30      	pop	{r4, r5, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	f023 0304 	bic.w	r3, r3, #4
 80060b0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	f043 030a 	orr.w	r3, r3, #10
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	e7f0      	b.n	800609e <HAL_DMA_Start_IT+0x72>
  __HAL_LOCK(hdma);
 80060bc:	2002      	movs	r0, #2
}
 80060be:	4770      	bx	lr

080060c0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060c0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80060c4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060c6:	2a02      	cmp	r2, #2
 80060c8:	d006      	beq.n	80060d8 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ca:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80060cc:	2200      	movs	r2, #0
    return HAL_ERROR;
 80060ce:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060d0:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80060d2:	f883 2020 	strb.w	r2, [r3, #32]
}
 80060d6:	4770      	bx	lr
{
 80060d8:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060da:	f04f 0e01 	mov.w	lr, #1
    __HAL_UNLOCK(hdma);
 80060de:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060e2:	6802      	ldr	r2, [r0, #0]
 80060e4:	6811      	ldr	r1, [r2, #0]
 80060e6:	f021 010e 	bic.w	r1, r1, #14
 80060ea:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80060ec:	6811      	ldr	r1, [r2, #0]
 80060ee:	f021 0101 	bic.w	r1, r1, #1
 80060f2:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060f4:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 80060f8:	f002 021c 	and.w	r2, r2, #28
 80060fc:	fa0e f202 	lsl.w	r2, lr, r2
 8006100:	604a      	str	r2, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8006102:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006106:	f883 c020 	strb.w	ip, [r3, #32]
    return status;
 800610a:	4660      	mov	r0, ip
}
 800610c:	f85d fb04 	ldr.w	pc, [sp], #4

08006110 <HAL_DMA_Abort_IT>:
{
 8006110:	b538      	push	{r3, r4, r5, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006112:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8006116:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006118:	2a02      	cmp	r2, #2
 800611a:	d003      	beq.n	8006124 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800611c:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800611e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006120:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006122:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006124:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006126:	f04f 0c01 	mov.w	ip, #1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800612a:	680c      	ldr	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800612c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800612e:	f024 040e 	bic.w	r4, r4, #14
 8006132:	600c      	str	r4, [r1, #0]
    __HAL_UNLOCK(hdma);
 8006134:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8006136:	680d      	ldr	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006138:	f002 021c 	and.w	r2, r2, #28
    __HAL_DMA_DISABLE(hdma);
 800613c:	f025 0501 	bic.w	r5, r5, #1
 8006140:	600d      	str	r5, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006142:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8006144:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006146:	fa0c f202 	lsl.w	r2, ip, r2
 800614a:	606a      	str	r2, [r5, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800614c:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006150:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8006154:	b111      	cbz	r1, 800615c <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8006156:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8006158:	4620      	mov	r0, r4
}
 800615a:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800615c:	4608      	mov	r0, r1
}
 800615e:	bd38      	pop	{r3, r4, r5, pc}

08006160 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006160:	2204      	movs	r2, #4
{
 8006162:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006164:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006166:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006168:	f003 031c 	and.w	r3, r3, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800616c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800616e:	6805      	ldr	r5, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006170:	409a      	lsls	r2, r3
 8006172:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006174:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006176:	d00e      	beq.n	8006196 <HAL_DMA_IRQHandler+0x36>
 8006178:	f014 0f04 	tst.w	r4, #4
 800617c:	d00b      	beq.n	8006196 <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800617e:	682b      	ldr	r3, [r5, #0]
 8006180:	069b      	lsls	r3, r3, #26
 8006182:	d403      	bmi.n	800618c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	f023 0304 	bic.w	r3, r3, #4
 800618a:	602b      	str	r3, [r5, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800618c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800618e:	6072      	str	r2, [r6, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8006190:	b1cb      	cbz	r3, 80061c6 <HAL_DMA_IRQHandler+0x66>
}
 8006192:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006194:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006196:	2202      	movs	r2, #2
 8006198:	409a      	lsls	r2, r3
 800619a:	420a      	tst	r2, r1
 800619c:	d015      	beq.n	80061ca <HAL_DMA_IRQHandler+0x6a>
 800619e:	f014 0f02 	tst.w	r4, #2
 80061a2:	d012      	beq.n	80061ca <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	0699      	lsls	r1, r3, #26
 80061a8:	d406      	bmi.n	80061b8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	f023 030a 	bic.w	r3, r3, #10
 80061b0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80061b8:	2100      	movs	r1, #0
    if(hdma->XferCpltCallback != NULL)
 80061ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80061bc:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80061be:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <HAL_DMA_IRQHandler+0x32>
}
 80061c6:	bc70      	pop	{r4, r5, r6}
 80061c8:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80061ca:	2208      	movs	r2, #8
 80061cc:	409a      	lsls	r2, r3
 80061ce:	420a      	tst	r2, r1
 80061d0:	d0f9      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x66>
 80061d2:	0722      	lsls	r2, r4, #28
 80061d4:	d5f7      	bpl.n	80061c6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061d6:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hdma);
 80061d8:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061da:	f022 020e 	bic.w	r2, r2, #14
 80061de:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061e0:	2201      	movs	r2, #1
    if (hdma->XferErrorCallback != NULL)
 80061e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061ea:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80061ec:	f880 4020 	strb.w	r4, [r0, #32]
    hdma->State = HAL_DMA_STATE_READY;
 80061f0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    if (hdma->XferErrorCallback != NULL)
 80061f4:	2900      	cmp	r1, #0
 80061f6:	d0e6      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x66>
}
 80061f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80061fa:	4708      	bx	r1

080061fc <HAL_EXTI_SetConfigLine>:
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d041      	beq.n	8006284 <HAL_EXTI_SetConfigLine+0x88>
 8006200:	2900      	cmp	r1, #0
 8006202:	d03f      	beq.n	8006284 <HAL_EXTI_SetConfigLine+0x88>
  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
  maskline = (1uL << linepos);
 8006204:	f04f 0c01 	mov.w	ip, #1
  hexti->Line = pExtiConfig->Line;
 8006208:	680b      	ldr	r3, [r1, #0]
{
 800620a:	b430      	push	{r4, r5}
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800620c:	f003 021f 	and.w	r2, r3, #31
  hexti->Line = pExtiConfig->Line;
 8006210:	6003      	str	r3, [r0, #0]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8006212:	0198      	lsls	r0, r3, #6
  maskline = (1uL << linepos);
 8006214:	fa0c fc02 	lsl.w	ip, ip, r2
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8006218:	d519      	bpl.n	800624e <HAL_EXTI_SetConfigLine+0x52>

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
    {
      EXTI->RTSR |= maskline;
 800621a:	4d25      	ldr	r5, [pc, #148]	; (80062b0 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800621c:	6888      	ldr	r0, [r1, #8]
      EXTI->RTSR |= maskline;
 800621e:	68ac      	ldr	r4, [r5, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8006220:	f010 0f01 	tst.w	r0, #1
      EXTI->RTSR |= maskline;
 8006224:	bf14      	ite	ne
 8006226:	ea44 040c 	orrne.w	r4, r4, ip
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 800622a:	ea24 040c 	biceq.w	r4, r4, ip
 800622e:	60ac      	str	r4, [r5, #8]

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
    {
      EXTI->FTSR |= maskline;
 8006230:	4c1f      	ldr	r4, [pc, #124]	; (80062b0 <HAL_EXTI_SetConfigLine+0xb4>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8006232:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= maskline;
 8006236:	68e0      	ldr	r0, [r4, #12]
 8006238:	bf14      	ite	ne
 800623a:	ea40 000c 	orrne.w	r0, r0, ip
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 800623e:	ea20 000c 	biceq.w	r0, r0, ip
 8006242:	60e0      	str	r0, [r4, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8006244:	f003 60c0 	and.w	r0, r3, #100663296	; 0x6000000
 8006248:	f1b0 6fc0 	cmp.w	r0, #100663296	; 0x6000000
 800624c:	d01c      	beq.n	8006288 <HAL_EXTI_SetConfigLine+0x8c>

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
  {
    EXTI->IMR |= maskline;
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8006250:	6848      	ldr	r0, [r1, #4]
    EXTI->IMR |= maskline;
 8006252:	6813      	ldr	r3, [r2, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8006254:	07c1      	lsls	r1, r0, #31
    EXTI->IMR |= maskline;
 8006256:	bf4c      	ite	mi
 8006258:	ea43 030c 	orrmi.w	r3, r3, ip
  }
  else
  {
    EXTI->IMR &= ~maskline;
 800625c:	ea23 030c 	bicpl.w	r3, r3, ip
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8006260:	f010 0002 	ands.w	r0, r0, #2
    EXTI->IMR &= ~maskline;
 8006264:	6013      	str	r3, [r2, #0]
  {
    EXTI->EMR |= maskline;
 8006266:	4a12      	ldr	r2, [pc, #72]	; (80062b0 <HAL_EXTI_SetConfigLine+0xb4>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8006268:	d105      	bne.n	8006276 <HAL_EXTI_SetConfigLine+0x7a>
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
}
 800626a:	bc30      	pop	{r4, r5}
    EXTI->EMR &= ~maskline;
 800626c:	6853      	ldr	r3, [r2, #4]
 800626e:	ea23 030c 	bic.w	r3, r3, ip
 8006272:	6053      	str	r3, [r2, #4]
}
 8006274:	4770      	bx	lr
    EXTI->EMR |= maskline;
 8006276:	6853      	ldr	r3, [r2, #4]
  return HAL_OK;
 8006278:	2000      	movs	r0, #0
}
 800627a:	bc30      	pop	{r4, r5}
    EXTI->EMR |= maskline;
 800627c:	ea43 030c 	orr.w	r3, r3, ip
 8006280:	6053      	str	r3, [r2, #4]
}
 8006282:	4770      	bx	lr
    return HAL_ERROR;
 8006284:	2001      	movs	r0, #1
}
 8006286:	4770      	bx	lr
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8006288:	250f      	movs	r5, #15
 800628a:	f002 021c 	and.w	r2, r2, #28
 800628e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8006292:	68c8      	ldr	r0, [r1, #12]
 8006294:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8006298:	f003 0303 	and.w	r3, r3, #3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 800629c:	6894      	ldr	r4, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800629e:	009b      	lsls	r3, r3, #2
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80062a0:	4098      	lsls	r0, r3
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80062a2:	fa05 f303 	lsl.w	r3, r5, r3
 80062a6:	ea24 0303 	bic.w	r3, r4, r3
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80062aa:	4318      	orrs	r0, r3
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 80062ac:	6090      	str	r0, [r2, #8]
 80062ae:	e7ce      	b.n	800624e <HAL_EXTI_SetConfigLine+0x52>
 80062b0:	40010400 	.word	0x40010400

080062b4 <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80062b4:	2301      	movs	r3, #1
 80062b6:	6802      	ldr	r2, [r0, #0]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80062b8:	4902      	ldr	r1, [pc, #8]	; (80062c4 <HAL_EXTI_GenerateSWI+0x10>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80062ba:	f002 021f 	and.w	r2, r2, #31
 80062be:	4093      	lsls	r3, r2
  EXTI->SWIER = maskline;
 80062c0:	610b      	str	r3, [r1, #16]
}
 80062c2:	4770      	bx	lr
 80062c4:	40010400 	.word	0x40010400

080062c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80062cc:	680c      	ldr	r4, [r1, #0]
{
 80062ce:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80062d0:	2c00      	cmp	r4, #0
 80062d2:	d07c      	beq.n	80063ce <HAL_GPIO_Init+0x106>
 80062d4:	f04f 0e00 	mov.w	lr, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80062d8:	f04f 0b01 	mov.w	fp, #1
  uint32_t position = 0x00;
 80062dc:	4673      	mov	r3, lr
 80062de:	468c      	mov	ip, r1
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80062e0:	fa0b f503 	lsl.w	r5, fp, r3

    if (iocurrent)
 80062e4:	ea15 0a04 	ands.w	sl, r5, r4
 80062e8:	d06b      	beq.n	80063c2 <HAL_GPIO_Init+0xfa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80062ee:	f001 0203 	and.w	r2, r1, #3
 80062f2:	1e57      	subs	r7, r2, #1
 80062f4:	2f01      	cmp	r7, #1
 80062f6:	d96d      	bls.n	80063d4 <HAL_GPIO_Init+0x10c>
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f8:	2a03      	cmp	r2, #3
 80062fa:	f040 80ae 	bne.w	800645a <HAL_GPIO_Init+0x192>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062fe:	fa02 f20e 	lsl.w	r2, r2, lr
 8006302:	43d7      	mvns	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006304:	6805      	ldr	r5, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006306:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800630a:	ea07 0705 	and.w	r7, r7, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800630e:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8006312:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006314:	d055      	beq.n	80063c2 <HAL_GPIO_Init+0xfa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006316:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006318:	4d5a      	ldr	r5, [pc, #360]	; (8006484 <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800631a:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800631e:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006320:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	622a      	str	r2, [r5, #32]
 8006328:	6a2a      	ldr	r2, [r5, #32]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800632a:	fa06 f807 	lsl.w	r8, r6, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800632e:	f002 0201 	and.w	r2, r2, #1
 8006332:	9203      	str	r2, [sp, #12]
 8006334:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8006336:	f023 0203 	bic.w	r2, r3, #3
 800633a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800633e:	4e52      	ldr	r6, [pc, #328]	; (8006488 <HAL_GPIO_Init+0x1c0>)
 8006340:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2];
 8006344:	6895      	ldr	r5, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006346:	42b0      	cmp	r0, r6
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006348:	ea25 0508 	bic.w	r5, r5, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800634c:	d015      	beq.n	800637a <HAL_GPIO_Init+0xb2>
 800634e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006352:	42b0      	cmp	r0, r6
 8006354:	f000 808c 	beq.w	8006470 <HAL_GPIO_Init+0x1a8>
 8006358:	4e4c      	ldr	r6, [pc, #304]	; (800648c <HAL_GPIO_Init+0x1c4>)
 800635a:	42b0      	cmp	r0, r6
 800635c:	f000 808c 	beq.w	8006478 <HAL_GPIO_Init+0x1b0>
 8006360:	4e4b      	ldr	r6, [pc, #300]	; (8006490 <HAL_GPIO_Init+0x1c8>)
 8006362:	42b0      	cmp	r0, r6
 8006364:	d07e      	beq.n	8006464 <HAL_GPIO_Init+0x19c>
 8006366:	4e4b      	ldr	r6, [pc, #300]	; (8006494 <HAL_GPIO_Init+0x1cc>)
 8006368:	42b0      	cmp	r0, r6
 800636a:	bf0c      	ite	eq
 800636c:	f04f 0804 	moveq.w	r8, #4
 8006370:	f04f 0805 	movne.w	r8, #5
 8006374:	fa08 f707 	lsl.w	r7, r8, r7
 8006378:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800637a:	ea6f 070a 	mvn.w	r7, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800637e:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8006380:	4a45      	ldr	r2, [pc, #276]	; (8006498 <HAL_GPIO_Init+0x1d0>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006382:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 8006384:	6812      	ldr	r2, [r2, #0]
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->IMR = temp;
 8006386:	4d44      	ldr	r5, [pc, #272]	; (8006498 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006388:	bf54      	ite	pl
 800638a:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 800638c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR = temp;
 8006390:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 8006392:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006394:	038a      	lsls	r2, r1, #14
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->EMR = temp;
 8006396:	4a40      	ldr	r2, [pc, #256]	; (8006498 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006398:	bf54      	ite	pl
 800639a:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 800639c:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR = temp;
 80063a0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063a2:	6895      	ldr	r5, [r2, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063a4:	02ce      	lsls	r6, r1, #11
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->RTSR = temp;
 80063a6:	4a3c      	ldr	r2, [pc, #240]	; (8006498 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80063a8:	bf54      	ite	pl
 80063aa:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 80063ac:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR = temp;
 80063b0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80063b2:	68d2      	ldr	r2, [r2, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b4:	0289      	lsls	r1, r1, #10
        {
          SET_BIT(temp, iocurrent);
        }
        EXTI->FTSR = temp;
 80063b6:	4938      	ldr	r1, [pc, #224]	; (8006498 <HAL_GPIO_Init+0x1d0>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80063b8:	bf54      	ite	pl
 80063ba:	403a      	andpl	r2, r7
          SET_BIT(temp, iocurrent);
 80063bc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR = temp;
 80063c0:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 80063c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80063c4:	fa34 f203 	lsrs.w	r2, r4, r3
 80063c8:	f10e 0e02 	add.w	lr, lr, #2
 80063cc:	d188      	bne.n	80062e0 <HAL_GPIO_Init+0x18>
  }
}
 80063ce:	b005      	add	sp, #20
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063d4:	f04f 0903 	mov.w	r9, #3
        temp = GPIOx->OSPEEDR;
 80063d8:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80063da:	f8dc 700c 	ldr.w	r7, [ip, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063de:	fa09 f90e 	lsl.w	r9, r9, lr
 80063e2:	ea26 0609 	bic.w	r6, r6, r9
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80063e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80063ea:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 80063ec:	6087      	str	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063ee:	ea6f 0709 	mvn.w	r7, r9
        temp = GPIOx->OTYPER;
 80063f2:	f8d0 9004 	ldr.w	r9, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f6:	f3c1 1800 	ubfx	r8, r1, #4, #1
 80063fa:	fa08 f803 	lsl.w	r8, r8, r3
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80063fe:	ea29 0505 	bic.w	r5, r9, r5
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006402:	ea48 0505 	orr.w	r5, r8, r5
        GPIOx->OTYPER = temp;
 8006406:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8006408:	68c5      	ldr	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640a:	2a02      	cmp	r2, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800640c:	ea05 0807 	and.w	r8, r5, r7
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006410:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006414:	fa02 f20e 	lsl.w	r2, r2, lr
 8006418:	fa05 f50e 	lsl.w	r5, r5, lr
 800641c:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->PUPDR = temp;
 8006420:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006422:	f47f af6f 	bne.w	8006304 <HAL_GPIO_Init+0x3c>
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006426:	f8dc 5010 	ldr.w	r5, [ip, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800642a:	f003 0807 	and.w	r8, r3, #7
 800642e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006432:	fa05 f508 	lsl.w	r5, r5, r8
 8006436:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006438:	250f      	movs	r5, #15
        temp = GPIOx->AFR[position >> 3];
 800643a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800643e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8006442:	f8d9 6020 	ldr.w	r6, [r9, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006446:	fa05 f808 	lsl.w	r8, r5, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800644a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800644c:	ea26 0808 	bic.w	r8, r6, r8
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006450:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->AFR[position >> 3] = temp;
 8006454:	f8c9 5020 	str.w	r5, [r9, #32]
 8006458:	e754      	b.n	8006304 <HAL_GPIO_Init+0x3c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800645a:	2703      	movs	r7, #3
 800645c:	fa07 f70e 	lsl.w	r7, r7, lr
 8006460:	43ff      	mvns	r7, r7
 8006462:	e7d1      	b.n	8006408 <HAL_GPIO_Init+0x140>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006464:	f04f 0803 	mov.w	r8, #3
 8006468:	fa08 f707 	lsl.w	r7, r8, r7
 800646c:	433d      	orrs	r5, r7
 800646e:	e784      	b.n	800637a <HAL_GPIO_Init+0xb2>
 8006470:	fa0b f707 	lsl.w	r7, fp, r7
 8006474:	433d      	orrs	r5, r7
 8006476:	e780      	b.n	800637a <HAL_GPIO_Init+0xb2>
 8006478:	f04f 0802 	mov.w	r8, #2
 800647c:	fa08 f707 	lsl.w	r7, r8, r7
 8006480:	433d      	orrs	r5, r7
 8006482:	e77a      	b.n	800637a <HAL_GPIO_Init+0xb2>
 8006484:	40023800 	.word	0x40023800
 8006488:	40020000 	.word	0x40020000
 800648c:	40020800 	.word	0x40020800
 8006490:	40020c00 	.word	0x40020c00
 8006494:	40021000 	.word	0x40021000
 8006498:	40010400 	.word	0x40010400

0800649c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800649c:	2900      	cmp	r1, #0
 800649e:	f000 8083 	beq.w	80065a8 <HAL_GPIO_DeInit+0x10c>
{
 80064a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00;
 80064a6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80064a8:	2701      	movs	r7, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80064aa:	f04f 090f 	mov.w	r9, #15
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80064ae:	f04f 0a03 	mov.w	sl, #3
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80064b2:	4e3e      	ldr	r6, [pc, #248]	; (80065ac <HAL_GPIO_DeInit+0x110>)
 80064b4:	e051      	b.n	800655a <HAL_GPIO_DeInit+0xbe>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80064b6:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80064ba:	4558      	cmp	r0, fp
 80064bc:	d069      	beq.n	8006592 <HAL_GPIO_DeInit+0xf6>
 80064be:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80065b0 <HAL_GPIO_DeInit+0x114>
 80064c2:	4558      	cmp	r0, fp
 80064c4:	d068      	beq.n	8006598 <HAL_GPIO_DeInit+0xfc>
 80064c6:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80065b4 <HAL_GPIO_DeInit+0x118>
 80064ca:	4558      	cmp	r0, fp
 80064cc:	d069      	beq.n	80065a2 <HAL_GPIO_DeInit+0x106>
 80064ce:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80065b8 <HAL_GPIO_DeInit+0x11c>
 80064d2:	4558      	cmp	r0, fp
 80064d4:	bf14      	ite	ne
 80064d6:	f04f 0b05 	movne.w	fp, #5
 80064da:	f04f 0b04 	moveq.w	fp, #4
 80064de:	fa0b f404 	lsl.w	r4, fp, r4
 80064e2:	45a4      	cmp	ip, r4
 80064e4:	d113      	bne.n	800650e <HAL_GPIO_DeInit+0x72>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80064e6:	6834      	ldr	r4, [r6, #0]
 80064e8:	ea24 040e 	bic.w	r4, r4, lr
 80064ec:	6034      	str	r4, [r6, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80064ee:	6874      	ldr	r4, [r6, #4]
 80064f0:	ea24 040e 	bic.w	r4, r4, lr
 80064f4:	6074      	str	r4, [r6, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80064f6:	68b4      	ldr	r4, [r6, #8]
 80064f8:	ea24 040e 	bic.w	r4, r4, lr
 80064fc:	60b4      	str	r4, [r6, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80064fe:	68f4      	ldr	r4, [r6, #12]
 8006500:	ea24 040e 	bic.w	r4, r4, lr
 8006504:	60f4      	str	r4, [r6, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8006506:	68ac      	ldr	r4, [r5, #8]
 8006508:	ea24 0408 	bic.w	r4, r4, r8
 800650c:	60ac      	str	r4, [r5, #8]
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800650e:	6805      	ldr	r5, [r0, #0]
 8006510:	005c      	lsls	r4, r3, #1
 8006512:	fa0a f404 	lsl.w	r4, sl, r4
 8006516:	ea25 0504 	bic.w	r5, r5, r4

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800651a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 800651e:	6005      	str	r5, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 8006520:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006524:	f003 0507 	and.w	r5, r3, #7
 8006528:	f8dc e020 	ldr.w	lr, [ip, #32]
 800652c:	00ad      	lsls	r5, r5, #2
 800652e:	fa09 f505 	lsl.w	r5, r9, r5
 8006532:	ea2e 0505 	bic.w	r5, lr, r5
 8006536:	f8cc 5020 	str.w	r5, [ip, #32]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800653a:	68c5      	ldr	r5, [r0, #12]
 800653c:	ea25 0504 	bic.w	r5, r5, r4
 8006540:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8006542:	6845      	ldr	r5, [r0, #4]
 8006544:	ea25 0202 	bic.w	r2, r5, r2
 8006548:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800654a:	6882      	ldr	r2, [r0, #8]
 800654c:	ea22 0404 	bic.w	r4, r2, r4
 8006550:	6084      	str	r4, [r0, #8]
    }

    position++;
 8006552:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8006554:	fa31 f203 	lsrs.w	r2, r1, r3
 8006558:	d019      	beq.n	800658e <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1U << position);
 800655a:	fa07 f203 	lsl.w	r2, r7, r3
    if (iocurrent)
 800655e:	ea12 0e01 	ands.w	lr, r2, r1
 8006562:	d0f6      	beq.n	8006552 <HAL_GPIO_DeInit+0xb6>
      tmp = SYSCFG->EXTICR[position >> 2];
 8006564:	f023 0503 	bic.w	r5, r3, #3
 8006568:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800656c:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80065bc <HAL_GPIO_DeInit+0x120>
 8006570:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006574:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8006578:	f8d5 c008 	ldr.w	ip, [r5, #8]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 800657c:	00a4      	lsls	r4, r4, #2
 800657e:	fa09 f804 	lsl.w	r8, r9, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006582:	4558      	cmp	r0, fp
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8006584:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006588:	d195      	bne.n	80064b6 <HAL_GPIO_DeInit+0x1a>
 800658a:	2400      	movs	r4, #0
 800658c:	e7a9      	b.n	80064e2 <HAL_GPIO_DeInit+0x46>
  }
}
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8006592:	fa07 f404 	lsl.w	r4, r7, r4
 8006596:	e7a4      	b.n	80064e2 <HAL_GPIO_DeInit+0x46>
 8006598:	f04f 0b02 	mov.w	fp, #2
 800659c:	fa0b f404 	lsl.w	r4, fp, r4
 80065a0:	e79f      	b.n	80064e2 <HAL_GPIO_DeInit+0x46>
 80065a2:	fa0a f404 	lsl.w	r4, sl, r4
 80065a6:	e79c      	b.n	80064e2 <HAL_GPIO_DeInit+0x46>
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40020800 	.word	0x40020800
 80065b4:	40020c00 	.word	0x40020c00
 80065b8:	40021000 	.word	0x40021000
 80065bc:	40020000 	.word	0x40020000

080065c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065c0:	6903      	ldr	r3, [r0, #16]
 80065c2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80065c4:	bf14      	ite	ne
 80065c6:	2001      	movne	r0, #1
 80065c8:	2000      	moveq	r0, #0
 80065ca:	4770      	bx	lr

080065cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065cc:	b902      	cbnz	r2, 80065d0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80065ce:	0409      	lsls	r1, r1, #16
 80065d0:	6181      	str	r1, [r0, #24]
  }
}
 80065d2:	4770      	bx	lr

080065d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065d4:	4a04      	ldr	r2, [pc, #16]	; (80065e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80065d6:	6951      	ldr	r1, [r2, #20]
 80065d8:	4201      	tst	r1, r0
 80065da:	d100      	bne.n	80065de <HAL_GPIO_EXTI_IRQHandler+0xa>
 80065dc:	4770      	bx	lr
{
 80065de:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065e0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065e2:	f7fe f957 	bl	8004894 <HAL_GPIO_EXTI_Callback>
  }
}
 80065e6:	bd08      	pop	{r3, pc}
 80065e8:	40010400 	.word	0x40010400

080065ec <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f000 80b9 	beq.w	8006764 <HAL_I2C_Init+0x178>
{
 80065f2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80065f8:	4604      	mov	r4, r0
 80065fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8098 	beq.w	8006734 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006604:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006606:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006608:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	f022 0201 	bic.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800661a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006624:	f001 fd1c 	bl	8008060 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	494f      	ldr	r1, [pc, #316]	; (8006768 <HAL_I2C_Init+0x17c>)
 800662c:	428b      	cmp	r3, r1
 800662e:	d84f      	bhi.n	80066d0 <HAL_I2C_Init+0xe4>
 8006630:	4a4e      	ldr	r2, [pc, #312]	; (800676c <HAL_I2C_Init+0x180>)
 8006632:	4290      	cmp	r0, r2
 8006634:	d97c      	bls.n	8006730 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006636:	4d4e      	ldr	r5, [pc, #312]	; (8006770 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006638:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800663a:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800663e:	1e43      	subs	r3, r0, #1
 8006640:	fbb3 f3f2 	udiv	r3, r3, r2
 8006644:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006648:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800664a:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800664c:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800664e:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006652:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8006656:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 800665a:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800665c:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800665e:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006660:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006664:	ea41 010c 	orr.w	r1, r1, ip
 8006668:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800666a:	69d1      	ldr	r1, [r2, #28]
 800666c:	ea13 0f0e 	tst.w	r3, lr
 8006670:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006674:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006678:	d161      	bne.n	800673e <HAL_I2C_Init+0x152>
 800667a:	2304      	movs	r3, #4
 800667c:	430b      	orrs	r3, r1
 800667e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006680:	6811      	ldr	r1, [r2, #0]
 8006682:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006686:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800668a:	4303      	orrs	r3, r0
 800668c:	430b      	orrs	r3, r1
 800668e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006690:	6891      	ldr	r1, [r2, #8]
 8006692:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006696:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800669a:	4303      	orrs	r3, r0
 800669c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066a4:	68d0      	ldr	r0, [r2, #12]
 80066a6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80066aa:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80066ae:	430b      	orrs	r3, r1
 80066b0:	4303      	orrs	r3, r0
 80066b2:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066b4:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b6:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 80066b8:	f043 0301 	orr.w	r3, r3, #1
 80066bc:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80066be:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c0:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066c6:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 80066cc:	4608      	mov	r0, r1
}
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066d0:	4a28      	ldr	r2, [pc, #160]	; (8006774 <HAL_I2C_Init+0x188>)
 80066d2:	4290      	cmp	r0, r2
 80066d4:	d92c      	bls.n	8006730 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80066d6:	4d26      	ldr	r5, [pc, #152]	; (8006770 <HAL_I2C_Init+0x184>)
 80066d8:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80066e0:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066e4:	fb02 f101 	mul.w	r1, r2, r1
 80066e8:	4d23      	ldr	r5, [pc, #140]	; (8006778 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066ea:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066ec:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066f0:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066f2:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066f4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80066f8:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 80066fc:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066fe:	6a15      	ldr	r5, [r2, #32]
 8006700:	3101      	adds	r1, #1
 8006702:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8006706:	4329      	orrs	r1, r5
 8006708:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800670a:	69d1      	ldr	r1, [r2, #28]
 800670c:	68a5      	ldr	r5, [r4, #8]
 800670e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006712:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006716:	b9ad      	cbnz	r5, 8006744 <HAL_I2C_Init+0x158>
 8006718:	3801      	subs	r0, #1
 800671a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800671e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006722:	3301      	adds	r3, #1
 8006724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006728:	b1d3      	cbz	r3, 8006760 <HAL_I2C_Init+0x174>
 800672a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672e:	e7a5      	b.n	800667c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006730:	2001      	movs	r0, #1
}
 8006732:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006734:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006738:	f7fe fd8c 	bl	8005254 <HAL_I2C_MspInit>
 800673c:	e762      	b.n	8006604 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800673e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006742:	e79b      	b.n	800667c <HAL_I2C_Init+0x90>
 8006744:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006748:	3801      	subs	r0, #1
 800674a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800674e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006752:	3301      	adds	r3, #1
 8006754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006758:	b113      	cbz	r3, 8006760 <HAL_I2C_Init+0x174>
 800675a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800675e:	e78d      	b.n	800667c <HAL_I2C_Init+0x90>
 8006760:	2301      	movs	r3, #1
 8006762:	e78b      	b.n	800667c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8006764:	2001      	movs	r0, #1
}
 8006766:	4770      	bx	lr
 8006768:	000186a0 	.word	0x000186a0
 800676c:	001e847f 	.word	0x001e847f
 8006770:	431bde83 	.word	0x431bde83
 8006774:	003d08ff 	.word	0x003d08ff
 8006778:	10624dd3 	.word	0x10624dd3

0800677c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	4605      	mov	r5, r0
 8006782:	b083      	sub	sp, #12
 8006784:	4699      	mov	r9, r3
 8006786:	4688      	mov	r8, r1
 8006788:	4692      	mov	sl, r2
 800678a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800678c:	f7fe ffaa 	bl	80056e4 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006790:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8006794:	2b20      	cmp	r3, #32
 8006796:	d003      	beq.n	80067a0 <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8006798:	2002      	movs	r0, #2
  }
}
 800679a:	b003      	add	sp, #12
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a0:	4606      	mov	r6, r0
 80067a2:	e005      	b.n	80067b0 <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a4:	f7fe ff9e 	bl	80056e4 <HAL_GetTick>
 80067a8:	1b80      	subs	r0, r0, r6
 80067aa:	2819      	cmp	r0, #25
 80067ac:	f200 80f8 	bhi.w	80069a0 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b0:	682c      	ldr	r4, [r5, #0]
 80067b2:	69a3      	ldr	r3, [r4, #24]
 80067b4:	ea6f 0c03 	mvn.w	ip, r3
 80067b8:	f01c 0b02 	ands.w	fp, ip, #2
 80067bc:	d0f2      	beq.n	80067a4 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 80067be:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d0e8      	beq.n	8006798 <HAL_I2C_Master_Transmit+0x1c>
 80067c6:	2301      	movs	r3, #1
 80067c8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07d9      	lsls	r1, r3, #31
 80067d0:	d571      	bpl.n	80068b6 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067d2:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067d4:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067d6:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067de:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067e0:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067e4:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067e8:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80067ea:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067ee:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067f0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80067f4:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80067f6:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80067fa:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d006      	beq.n	8006810 <HAL_I2C_Master_Transmit+0x94>
 8006802:	2b01      	cmp	r3, #1
 8006804:	d004      	beq.n	8006810 <HAL_I2C_Master_Transmit+0x94>
 8006806:	4293      	cmp	r3, r2
 8006808:	d002      	beq.n	8006810 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800680a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800680c:	2b12      	cmp	r3, #18
 800680e:	d103      	bne.n	8006818 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	1c7b      	adds	r3, r7, #1
 800681a:	d13e      	bne.n	800689a <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	6963      	ldr	r3, [r4, #20]
 800681e:	07d8      	lsls	r0, r3, #31
 8006820:	d5fc      	bpl.n	800681c <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006822:	692b      	ldr	r3, [r5, #16]
 8006824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006828:	d14a      	bne.n	80068c0 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800682a:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 800682e:	6121      	str	r1, [r4, #16]
 8006830:	1c78      	adds	r0, r7, #1
 8006832:	d004      	beq.n	800683e <HAL_I2C_Master_Transmit+0xc2>
 8006834:	e0dd      	b.n	80069f2 <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006836:	6963      	ldr	r3, [r4, #20]
 8006838:	055a      	lsls	r2, r3, #21
 800683a:	f100 80c2 	bmi.w	80069c2 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800683e:	6963      	ldr	r3, [r4, #20]
 8006840:	0799      	lsls	r1, r3, #30
 8006842:	d5f8      	bpl.n	8006836 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006844:	2200      	movs	r2, #0
 8006846:	9201      	str	r2, [sp, #4]
 8006848:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 800684a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800684c:	9201      	str	r2, [sp, #4]
 800684e:	69a2      	ldr	r2, [r4, #24]
 8006850:	9201      	str	r2, [sp, #4]
 8006852:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8006854:	2b00      	cmp	r3, #0
 8006856:	d075      	beq.n	8006944 <HAL_I2C_Master_Transmit+0x1c8>
 8006858:	1c79      	adds	r1, r7, #1
 800685a:	f040 8081 	bne.w	8006960 <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800685e:	6963      	ldr	r3, [r4, #20]
 8006860:	061a      	lsls	r2, r3, #24
 8006862:	d441      	bmi.n	80068e8 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006864:	6963      	ldr	r3, [r4, #20]
 8006866:	055b      	lsls	r3, r3, #21
 8006868:	d5f9      	bpl.n	800685e <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800686a:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800686c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686e:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8006872:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8006874:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006876:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800687a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800687e:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006880:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006884:	f043 0304 	orr.w	r3, r3, #4
 8006888:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800688a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800688c:	2b04      	cmp	r3, #4
 800688e:	f000 80e6 	beq.w	8006a5e <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 8006892:	2001      	movs	r0, #1
}
 8006894:	b003      	add	sp, #12
 8006896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800689a:	6963      	ldr	r3, [r4, #20]
 800689c:	07d9      	lsls	r1, r3, #31
 800689e:	d4c0      	bmi.n	8006822 <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a0:	f7fe ff20 	bl	80056e4 <HAL_GetTick>
 80068a4:	1b80      	subs	r0, r0, r6
 80068a6:	4287      	cmp	r7, r0
 80068a8:	f0c0 80b3 	bcc.w	8006a12 <HAL_I2C_Master_Transmit+0x296>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f000 80b0 	beq.w	8006a12 <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b2:	682c      	ldr	r4, [r5, #0]
 80068b4:	e7b0      	b.n	8006818 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	e788      	b.n	80067d2 <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80068c0:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80068c4:	f003 0306 	and.w	r3, r3, #6
 80068c8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80068cc:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80068ce:	1c7b      	adds	r3, r7, #1
 80068d0:	d003      	beq.n	80068da <HAL_I2C_Master_Transmit+0x15e>
 80068d2:	e0b5      	b.n	8006a40 <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068d4:	6963      	ldr	r3, [r4, #20]
 80068d6:	0559      	lsls	r1, r3, #21
 80068d8:	d473      	bmi.n	80069c2 <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068da:	6963      	ldr	r3, [r4, #20]
 80068dc:	0718      	lsls	r0, r3, #28
 80068de:	d5f9      	bpl.n	80068d4 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068e0:	fa5f f388 	uxtb.w	r3, r8
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	e7a3      	b.n	8006830 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80068ea:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068ee:	4601      	mov	r1, r0
 80068f0:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 80068f4:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068f8:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 80068fa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80068fc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29b      	uxth	r3, r3
 8006902:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006904:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8006906:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006908:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 800690a:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800690c:	d50c      	bpl.n	8006928 <HAL_I2C_Master_Transmit+0x1ac>
 800690e:	b15a      	cbz	r2, 8006928 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006910:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 8006912:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006916:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8006918:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800691a:	3002      	adds	r0, #2
        hi2c->XferCount--;
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006920:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006924:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8006926:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8006928:	1c78      	adds	r0, r7, #1
 800692a:	d129      	bne.n	8006980 <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800692c:	6963      	ldr	r3, [r4, #20]
 800692e:	0759      	lsls	r1, r3, #29
 8006930:	d405      	bmi.n	800693e <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006932:	6963      	ldr	r3, [r4, #20]
 8006934:	055a      	lsls	r2, r3, #21
 8006936:	d498      	bmi.n	800686a <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006938:	6963      	ldr	r3, [r4, #20]
 800693a:	0759      	lsls	r1, r3, #29
 800693c:	d5f9      	bpl.n	8006932 <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 800693e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8006940:	2b00      	cmp	r3, #0
 8006942:	d189      	bne.n	8006858 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006944:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006946:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 800694a:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006950:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006952:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006956:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800695a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 800695e:	e71c      	b.n	800679a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006960:	6963      	ldr	r3, [r4, #20]
 8006962:	0618      	lsls	r0, r3, #24
 8006964:	d4c0      	bmi.n	80068e8 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	0558      	lsls	r0, r3, #21
 800696a:	f53f af7e 	bmi.w	800686a <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696e:	f7fe feb9 	bl	80056e4 <HAL_GetTick>
 8006972:	1b80      	subs	r0, r0, r6
 8006974:	4287      	cmp	r7, r0
 8006976:	d379      	bcc.n	8006a6c <HAL_I2C_Master_Transmit+0x2f0>
 8006978:	2f00      	cmp	r7, #0
 800697a:	d077      	beq.n	8006a6c <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800697c:	682c      	ldr	r4, [r5, #0]
 800697e:	e76b      	b.n	8006858 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006980:	6963      	ldr	r3, [r4, #20]
 8006982:	075b      	lsls	r3, r3, #29
 8006984:	d4db      	bmi.n	800693e <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006986:	6963      	ldr	r3, [r4, #20]
 8006988:	055b      	lsls	r3, r3, #21
 800698a:	f53f af6e 	bmi.w	800686a <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698e:	f7fe fea9 	bl	80056e4 <HAL_GetTick>
 8006992:	1b80      	subs	r0, r0, r6
 8006994:	4287      	cmp	r7, r0
 8006996:	d369      	bcc.n	8006a6c <HAL_I2C_Master_Transmit+0x2f0>
 8006998:	2f00      	cmp	r7, #0
 800699a:	d067      	beq.n	8006a6c <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800699c:	682c      	ldr	r4, [r5, #0]
 800699e:	e7c3      	b.n	8006928 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 80069a0:	2320      	movs	r3, #32
      return HAL_BUSY;
 80069a2:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069a4:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069a8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069ac:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069b0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80069b2:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069b6:	f043 0320 	orr.w	r3, r3, #32
 80069ba:	642b      	str	r3, [r5, #64]	; 0x40
}
 80069bc:	b003      	add	sp, #12
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c4:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c8:	2120      	movs	r1, #32
      return HAL_ERROR;
 80069ca:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069d2:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d4:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069d6:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069d8:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069dc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80069e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069e6:	f043 0304 	orr.w	r3, r3, #4
 80069ea:	642b      	str	r3, [r5, #64]	; 0x40
}
 80069ec:	b003      	add	sp, #12
 80069ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f2:	6963      	ldr	r3, [r4, #20]
 80069f4:	079b      	lsls	r3, r3, #30
 80069f6:	f53f af25 	bmi.w	8006844 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069fa:	6963      	ldr	r3, [r4, #20]
 80069fc:	055b      	lsls	r3, r3, #21
 80069fe:	d4e0      	bmi.n	80069c2 <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a00:	f7fe fe70 	bl	80056e4 <HAL_GetTick>
 8006a04:	1b80      	subs	r0, r0, r6
 8006a06:	4287      	cmp	r7, r0
 8006a08:	d33e      	bcc.n	8006a88 <HAL_I2C_Master_Transmit+0x30c>
 8006a0a:	2f00      	cmp	r7, #0
 8006a0c:	d03c      	beq.n	8006a88 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a0e:	682c      	ldr	r4, [r5, #0]
 8006a10:	e70e      	b.n	8006830 <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a12:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a14:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a16:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a18:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a1c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a20:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a22:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a24:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8006a28:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a2c:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a2e:	680b      	ldr	r3, [r1, #0]
 8006a30:	05da      	lsls	r2, r3, #23
 8006a32:	f57f af2e 	bpl.w	8006892 <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a36:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8006a3a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a3c:	642b      	str	r3, [r5, #64]	; 0x40
 8006a3e:	e6ac      	b.n	800679a <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a40:	6963      	ldr	r3, [r4, #20]
 8006a42:	071a      	lsls	r2, r3, #28
 8006a44:	f53f af4c 	bmi.w	80068e0 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a48:	6963      	ldr	r3, [r4, #20]
 8006a4a:	055a      	lsls	r2, r3, #21
 8006a4c:	d4b9      	bmi.n	80069c2 <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fe fe49 	bl	80056e4 <HAL_GetTick>
 8006a52:	1b83      	subs	r3, r0, r6
 8006a54:	429f      	cmp	r7, r3
 8006a56:	d317      	bcc.n	8006a88 <HAL_I2C_Master_Transmit+0x30c>
 8006a58:	b1b7      	cbz	r7, 8006a88 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a5a:	682c      	ldr	r4, [r5, #0]
 8006a5c:	e737      	b.n	80068ce <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a5e:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 8006a60:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e696      	b.n	800679a <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a6c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a6e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a70:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a72:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a76:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a7a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006a7c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a80:	f043 0320 	orr.w	r3, r3, #32
 8006a84:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8006a86:	e700      	b.n	800688a <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a88:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a8a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a8e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a92:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a96:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006a98:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a9a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8006a9e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa2:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8006aa4:	e679      	b.n	800679a <HAL_I2C_Master_Transmit+0x1e>
 8006aa6:	bf00      	nop

08006aa8 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d05d      	beq.n	8006b68 <HAL_PCD_Init+0xc0>
{
 8006aac:	b570      	push	{r4, r5, r6, lr}
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006aae:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8006ab2:	4604      	mov	r4, r0
{
 8006ab4:	b086      	sub	sp, #24
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ab6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d04f      	beq.n	8006b5e <HAL_PCD_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006abe:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ac0:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ac2:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8006ac6:	f002 f831 	bl	8008b2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aca:	6860      	ldr	r0, [r4, #4]
 8006acc:	b368      	cbz	r0, 8006b2a <HAL_PCD_Init+0x82>
 8006ace:	2200      	movs	r2, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ad0:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ad4:	4611      	mov	r1, r2
    hpcd->IN_ep[i].is_in = 1U;
 8006ad6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006ada:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ade:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].num = i;
 8006ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ae6:	86da      	strh	r2, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ae8:	fa5f f28c 	uxtb.w	r2, ip
 8006aec:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006aee:	e9c3 110e 	strd	r1, r1, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8006af2:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006af6:	f883 102b 	strb.w	r1, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8006afa:	6419      	str	r1, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006afc:	d3eb      	bcc.n	8006ad6 <HAL_PCD_Init+0x2e>
 8006afe:	2200      	movs	r2, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b00:	4611      	mov	r1, r2
 8006b02:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006b06:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b0a:	f102 0c01 	add.w	ip, r2, #1
    hpcd->OUT_ep[i].num = i;
 8006b0e:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b12:	fa5f f28c 	uxtb.w	r2, ip
 8006b16:	4282      	cmp	r2, r0
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[i].maxpacket = 0U;
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006b18:	e9c3 115e 	strd	r1, r1, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8006b1c:	f883 1169 	strb.w	r1, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b20:	f883 116b 	strb.w	r1, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b24:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b28:	d3eb      	bcc.n	8006b02 <HAL_PCD_Init+0x5a>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006b2a:	46a4      	mov	ip, r4
 8006b2c:	46ee      	mov	lr, sp
 8006b2e:	f85c 6b10 	ldr.w	r6, [ip], #16
 8006b32:	1d25      	adds	r5, r4, #4
 8006b34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006b38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8006b3c:	f8dc 3000 	ldr.w	r3, [ip]
 8006b40:	4630      	mov	r0, r6
 8006b42:	f8ce 3000 	str.w	r3, [lr]
 8006b46:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8006b4a:	f001 fff9 	bl	8008b40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006b4e:	2000      	movs	r0, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8006b50:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8006b52:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006b56:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 8006b5a:	b006      	add	sp, #24
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8006b5e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8006b62:	f003 fd1b 	bl	800a59c <HAL_PCD_MspInit>
 8006b66:	e7aa      	b.n	8006abe <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 8006b68:	2001      	movs	r0, #1
}
 8006b6a:	4770      	bx	lr

08006b6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8006b6e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d012      	beq.n	8006b9c <HAL_PCD_Start+0x30>
 8006b76:	4604      	mov	r4, r0
 8006b78:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8006b7a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8006b7c:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006b80:	f001 ffca 	bl	8008b18 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006b84:	4629      	mov	r1, r5
 8006b86:	4620      	mov	r0, r4
 8006b88:	f003 fcfc 	bl	800a584 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	f002 fdc7 	bl	8009720 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b92:	2300      	movs	r3, #0
 8006b94:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8

  return HAL_OK;
 8006b98:	4618      	mov	r0, r3
}
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8006b9c:	2002      	movs	r0, #2
}
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}

08006ba0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	f002 fdbc 	bl	8009724 <USB_ReadInterrupts>
 8006bac:	0406      	lsls	r6, r0, #16
 8006bae:	d443      	bmi.n	8006c38 <HAL_PCD_IRQHandler+0x98>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	f002 fdb7 	bl	8009724 <USB_ReadInterrupts>
 8006bb6:	0545      	lsls	r5, r0, #21
 8006bb8:	f100 8180 	bmi.w	8006ebc <HAL_PCD_IRQHandler+0x31c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	f002 fdb1 	bl	8009724 <USB_ReadInterrupts>
 8006bc2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006bc6:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006bc8:	d007      	beq.n	8006bda <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006bca:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd2:	041b      	lsls	r3, r3, #16
 8006bd4:	0c1b      	lsrs	r3, r3, #16
 8006bd6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006bda:	f002 fda3 	bl	8009724 <USB_ReadInterrupts>
 8006bde:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006be2:	6820      	ldr	r0, [r4, #0]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006be4:	d007      	beq.n	8006bf6 <HAL_PCD_IRQHandler+0x56>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006be6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bee:	041b      	lsls	r3, r3, #16
 8006bf0:	0c1b      	lsrs	r3, r3, #16
 8006bf2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006bf6:	f002 fd95 	bl	8009724 <USB_ReadInterrupts>
 8006bfa:	04c0      	lsls	r0, r0, #19
 8006bfc:	f100 81f6 	bmi.w	8006fec <HAL_PCD_IRQHandler+0x44c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	f002 fd8f 	bl	8009724 <USB_ReadInterrupts>
 8006c06:	0501      	lsls	r1, r0, #20
 8006c08:	f100 81d5 	bmi.w	8006fb6 <HAL_PCD_IRQHandler+0x416>
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006c0c:	6820      	ldr	r0, [r4, #0]
 8006c0e:	f002 fd89 	bl	8009724 <USB_ReadInterrupts>
 8006c12:	0582      	lsls	r2, r0, #22
 8006c14:	f100 81c2 	bmi.w	8006f9c <HAL_PCD_IRQHandler+0x3fc>
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	f002 fd83 	bl	8009724 <USB_ReadInterrupts>
 8006c1e:	05c3      	lsls	r3, r0, #23
 8006c20:	d508      	bpl.n	8006c34 <HAL_PCD_IRQHandler+0x94>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  }
}
 8006c34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006c3e:	4610      	mov	r0, r2
 8006c40:	041d      	lsls	r5, r3, #16
 8006c42:	d5b6      	bpl.n	8006bb2 <HAL_PCD_IRQHandler+0x12>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006c44:	f8df 934c 	ldr.w	r9, [pc, #844]	; 8006f94 <HAL_PCD_IRQHandler+0x3f4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006c48:	f8df a34c 	ldr.w	sl, [pc, #844]	; 8006f98 <HAL_PCD_IRQHandler+0x3f8>
 8006c4c:	e011      	b.n	8006c72 <HAL_PCD_IRQHandler+0xd2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006c4e:	f011 0110 	ands.w	r1, r1, #16
 8006c52:	f000 8151 	beq.w	8006ef8 <HAL_PCD_IRQHandler+0x358>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c56:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006c58:	f411 6500 	ands.w	r5, r1, #2048	; 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c5c:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006c5e:	f040 8176 	bne.w	8006f4e <HAL_PCD_IRQHandler+0x3ae>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006c62:	0419      	lsls	r1, r3, #16
 8006c64:	f100 821b 	bmi.w	800709e <HAL_PCD_IRQHandler+0x4fe>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c68:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006c6c:	041e      	lsls	r6, r3, #16
 8006c6e:	f140 811f 	bpl.w	8006eb0 <HAL_PCD_IRQHandler+0x310>
    wIstr = hpcd->Instance->ISTR;
 8006c72:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8006c76:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 8006c78:	f015 050f 	ands.w	r5, r5, #15
 8006c7c:	d0e7      	beq.n	8006c4e <HAL_PCD_IRQHandler+0xae>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006c7e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8006c82:	00ae      	lsls	r6, r5, #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006c84:	041f      	lsls	r7, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006c86:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006c8a:	f100 80a0 	bmi.w	8006dce <HAL_PCD_IRQHandler+0x22e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006c8e:	f018 0f80 	tst.w	r8, #128	; 0x80
 8006c92:	d0e9      	beq.n	8006c68 <HAL_PCD_IRQHandler+0xc8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006c94:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8006c98:	1977      	adds	r7, r6, r5
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea03 0309 	and.w	r3, r3, r9
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca4:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006ca8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8006cac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	f000 80d0 	beq.w	8006e56 <HAL_PCD_IRQHandler+0x2b6>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80cd 	beq.w	8006e56 <HAL_PCD_IRQHandler+0x2b6>
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d103      	bne.n	8006cc8 <HAL_PCD_IRQHandler+0x128>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006cc0:	f418 7f80 	tst.w	r8, #256	; 0x100
 8006cc4:	f000 80c7 	beq.w	8006e56 <HAL_PCD_IRQHandler+0x2b6>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cc8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006ccc:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cd6:	f018 0c40 	ands.w	ip, r8, #64	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cde:	f000 8255 	beq.w	800718c <HAL_PCD_IRQHandler+0x5ec>
    if (ep->xfer_len > TxByteNbre)
 8006ce2:	eb06 0c05 	add.w	ip, r6, r5
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ce6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
    if (ep->xfer_len > TxByteNbre)
 8006cea:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8006cee:	f8dc e040 	ldr.w	lr, [ip, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len > TxByteNbre)
 8006cf6:	459e      	cmp	lr, r3
 8006cf8:	f240 834b 	bls.w	8007392 <HAL_PCD_IRQHandler+0x7f2>
      ep->xfer_len -= TxByteNbre;
 8006cfc:	ebae 0e03 	sub.w	lr, lr, r3
 8006d00:	f8cc e040 	str.w	lr, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8006d04:	f1be 0f00 	cmp.w	lr, #0
 8006d08:	f000 8346 	beq.w	8007398 <HAL_PCD_IRQHandler+0x7f8>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d0c:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 8006d10:	d00f      	beq.n	8006d32 <HAL_PCD_IRQHandler+0x192>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d12:	f830 c021 	ldrh.w	ip, [r0, r1, lsl #2]
 8006d16:	f42c 4ce0 	bic.w	ip, ip, #28672	; 0x7000
 8006d1a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8006d1e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8006d22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d26:	f44c 4c40 	orr.w	ip, ip, #49152	; 0xc000
 8006d2a:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8006d2e:	f820 c021 	strh.w	ip, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8006d32:	eb06 0e05 	add.w	lr, r6, r5
 8006d36:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8006d3a:	f89e c04c 	ldrb.w	ip, [lr, #76]	; 0x4c
 8006d3e:	f1bc 0f01 	cmp.w	ip, #1
 8006d42:	f040 8316 	bne.w	8007372 <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 8006d46:	f8de 203c 	ldr.w	r2, [lr, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d4a:	f8de 8038 	ldr.w	r8, [lr, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8006d4e:	eb02 0c03 	add.w	ip, r2, r3
        ep->xfer_count += TxByteNbre;
 8006d52:	f8de 2044 	ldr.w	r2, [lr, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8006d56:	f8ce c03c 	str.w	ip, [lr, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8006d5a:	441a      	add	r2, r3
 8006d5c:	f8ce 2044 	str.w	r2, [lr, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d60:	f8de 2048 	ldr.w	r2, [lr, #72]	; 0x48
 8006d64:	4542      	cmp	r2, r8
 8006d66:	f0c0 83e4 	bcc.w	8007532 <HAL_PCD_IRQHandler+0x992>
          ep->xfer_len_db -= len;
 8006d6a:	eba2 0208 	sub.w	r2, r2, r8
 8006d6e:	f8ce 2048 	str.w	r2, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d72:	fa1f f388 	uxth.w	r3, r8
 8006d76:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8006d7a:	f1be 0f00 	cmp.w	lr, #0
 8006d7e:	f040 83cb 	bne.w	8007518 <HAL_PCD_IRQHandler+0x978>
 8006d82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006d86:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006d8a:	f201 4e04 	addw	lr, r1, #1028	; 0x404
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	eb0e 0102 	add.w	r1, lr, r2
 8006d94:	f1b8 0f00 	cmp.w	r8, #0
 8006d98:	f040 83f8 	bne.w	800758c <HAL_PCD_IRQHandler+0x9ec>
 8006d9c:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8006da0:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006da4:	0409      	lsls	r1, r1, #16
 8006da6:	0c09      	lsrs	r1, r1, #16
 8006da8:	f82e 1002 	strh.w	r1, [lr, r2]
 8006dac:	f83e 1002 	ldrh.w	r1, [lr, r2]
 8006db0:	b289      	uxth	r1, r1
 8006db2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006db6:	f82e 1002 	strh.w	r1, [lr, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006dba:	1972      	adds	r2, r6, r5
 8006dbc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006dc0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8006dc2:	4661      	mov	r1, ip
 8006dc4:	f002 fcb2 	bl	800972c <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	4602      	mov	r2, r0
 8006dcc:	e2d1      	b.n	8007372 <HAL_PCD_IRQHandler+0x7d2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006dce:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006dd2:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8006dd6:	1971      	adds	r1, r6, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006dd8:	4013      	ands	r3, r2
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8006de2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006de6:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f040 811c 	bne.w	8007028 <HAL_PCD_IRQHandler+0x488>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006df0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006df4:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3306      	adds	r3, #6
 8006dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e00:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006e04:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8006e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8006e0c:	461f      	mov	r7, r3
          if (count != 0U)
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f040 81ac 	bne.w	800716c <HAL_PCD_IRQHandler+0x5cc>
        ep->xfer_count += count;
 8006e14:	1971      	adds	r1, r6, r5
 8006e16:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8006e1a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8006e1e:	00c9      	lsls	r1, r1, #3
 8006e20:	443a      	add	r2, r7
 8006e22:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8006e26:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8006e2a:	443a      	add	r2, r7
 8006e2c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006e30:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8006e34:	b122      	cbz	r2, 8006e40 <HAL_PCD_IRQHandler+0x2a0>
 8006e36:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006e3a:	42bb      	cmp	r3, r7
 8006e3c:	f240 819d 	bls.w	800717a <HAL_PCD_IRQHandler+0x5da>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006e40:	1973      	adds	r3, r6, r5
 8006e42:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006e46:	4620      	mov	r0, r4
 8006e48:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8006e4c:	f003 fbce 	bl	800a5ec <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	4602      	mov	r2, r0
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006e54:	e71b      	b.n	8006c8e <HAL_PCD_IRQHandler+0xee>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006e5a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
          if (ep->xfer_len > TxByteNbre)
 8006e64:	442e      	add	r6, r5
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006e6a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
          if (ep->xfer_len > TxByteNbre)
 8006e6e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8006e72:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8006e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	f240 8108 	bls.w	800708e <HAL_PCD_IRQHandler+0x4ee>
            ep->xfer_len -= TxByteNbre;
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	f000 8105 	beq.w	8007092 <HAL_PCD_IRQHandler+0x4f2>
            ep->xfer_buff += TxByteNbre;
 8006e88:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8006e8a:	3501      	adds	r5, #1
            ep->xfer_buff += TxByteNbre;
 8006e8c:	441a      	add	r2, r3
 8006e8e:	63f2      	str	r2, [r6, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8006e90:	6c72      	ldr	r2, [r6, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8006e92:	eb05 0585 	add.w	r5, r5, r5, lsl #2
            ep->xfer_count += TxByteNbre;
 8006e96:	4413      	add	r3, r2
 8006e98:	6473      	str	r3, [r6, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e9a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e9e:	f002 f8b7 	bl	8009010 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ea2:	6820      	ldr	r0, [r4, #0]
 8006ea4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	041e      	lsls	r6, r3, #16
 8006eac:	f53f aee1 	bmi.w	8006c72 <HAL_PCD_IRQHandler+0xd2>
 8006eb0:	4610      	mov	r0, r2
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006eb2:	f002 fc37 	bl	8009724 <USB_ReadInterrupts>
 8006eb6:	0545      	lsls	r5, r0, #21
 8006eb8:	f57f ae80 	bpl.w	8006bbc <HAL_PCD_IRQHandler+0x1c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ebc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8006ebe:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ec0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006ed0:	f003 fba4 	bl	800a61c <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8006ed4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f43f ae6f 	beq.w	8006bbc <HAL_PCD_IRQHandler+0x1c>
  hpcd->USB_Address = address;
 8006ede:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8006ee0:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006ee6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006eea:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006eee:	f002 fc11 	bl	8009714 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006ef2:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8006ef6:	e661      	b.n	8006bbc <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ef8:	8803      	ldrh	r3, [r0, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea03 0309 	and.w	r3, r3, r9
 8006f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f04:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f06:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006f0a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f14:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006f18:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8006f1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f22:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8006f24:	4413      	add	r3, r2
 8006f26:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f003 fb69 	bl	800a600 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006f2e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006f32:	b363      	cbz	r3, 8006f8e <HAL_PCD_IRQHandler+0x3ee>
 8006f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f36:	bb53      	cbnz	r3, 8006f8e <HAL_PCD_IRQHandler+0x3ee>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006f38:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f42:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
 8006f46:	4602      	mov	r2, r0
          hpcd->USB_Address = 0U;
 8006f48:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8006f4c:	e68c      	b.n	8006c68 <HAL_PCD_IRQHandler+0xc8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f4e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8006f52:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006f60:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006f64:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8006f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f6c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006f70:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8006f74:	f002 fbea 	bl	800974c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006f7c:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006f7e:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006f80:	8811      	ldrh	r1, [r2, #0]
 8006f82:	400b      	ands	r3, r1
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006f8a:	f003 fb27 	bl	800a5dc <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006f8e:	6820      	ldr	r0, [r4, #0]
 8006f90:	4602      	mov	r2, r0
 8006f92:	e669      	b.n	8006c68 <HAL_PCD_IRQHandler+0xc8>
 8006f94:	ffff8f0f 	.word	0xffff8f0f
 8006f98:	ffff8fbf 	.word	0xffff8fbf
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006f9c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8006f9e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006fa0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006fb0:	f003 fb30 	bl	800a614 <HAL_PCD_SOFCallback>
 8006fb4:	e630      	b.n	8006c18 <HAL_PCD_IRQHandler+0x78>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fb6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8006fb8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fba:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f043 0308 	orr.w	r3, r3, #8
 8006fc4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006fc8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8006fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	0c1b      	lsrs	r3, r3, #16
 8006fd4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006fd8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f043 0304 	orr.w	r3, r3, #4
 8006fe2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8006fe6:	f003 fb2b 	bl	800a640 <HAL_PCD_SuspendCallback>
 8006fea:	e60f      	b.n	8006c0c <HAL_PCD_IRQHandler+0x6c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006fec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8006fee:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006ff0:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8006ff4:	f023 0304 	bic.w	r3, r3, #4
 8006ff8:	041b      	lsls	r3, r3, #16
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007000:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8007004:	f023 0308 	bic.w	r3, r3, #8
 8007008:	041b      	lsls	r3, r3, #16
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8007010:	f003 fb26 	bl	800a660 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800701a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	0c1b      	lsrs	r3, r3, #16
 8007022:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8007026:	e5ec      	b.n	8006c02 <HAL_PCD_IRQHandler+0x62>
          if (ep->type == EP_TYPE_BULK)
 8007028:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 800702c:	2b02      	cmp	r3, #2
 800702e:	f000 8120 	beq.w	8007272 <HAL_PCD_IRQHandler+0x6d2>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007032:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8007036:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800703a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800704e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007052:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8007056:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800705a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800705e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007062:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007064:	d06e      	beq.n	8007144 <HAL_PCD_IRQHandler+0x5a4>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007066:	3302      	adds	r3, #2
 8007068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800706c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007070:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8007074:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8007078:	461f      	mov	r7, r3
              if (count != 0U)
 800707a:	2b00      	cmp	r3, #0
 800707c:	f43f aeca 	beq.w	8006e14 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007080:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8007084:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007088:	f002 fb60 	bl	800974c <USB_ReadPMA>
 800708c:	e6c2      	b.n	8006e14 <HAL_PCD_IRQHandler+0x274>
 800708e:	2300      	movs	r3, #0
 8007090:	6433      	str	r3, [r6, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007092:	4620      	mov	r0, r4
 8007094:	f003 fab4 	bl	800a600 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007098:	6820      	ldr	r0, [r4, #0]
 800709a:	4602      	mov	r2, r0
 800709c:	e5e4      	b.n	8006c68 <HAL_PCD_IRQHandler+0xc8>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800709e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80070a2:	8802      	ldrh	r2, [r0, #0]
 80070a4:	4013      	ands	r3, r2
 80070a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070aa:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80070ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80070b0:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80070be:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80070c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c6:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80070ca:	b193      	cbz	r3, 80070f2 <HAL_PCD_IRQHandler+0x552>
 80070cc:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80070d0:	b179      	cbz	r1, 80070f2 <HAL_PCD_IRQHandler+0x552>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80070d2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80070d6:	f002 fb39 	bl	800974c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80070da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070de:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80070e2:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80070e4:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80070e6:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80070e8:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80070ec:	f003 fa7e 	bl	800a5ec <HAL_PCD_DataOutStageCallback>
 80070f0:	6820      	ldr	r0, [r4, #0]
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80070f2:	8803      	ldrh	r3, [r0, #0]
 80070f4:	4602      	mov	r2, r0
 80070f6:	051b      	lsls	r3, r3, #20
 80070f8:	f53f adb6 	bmi.w	8006c68 <HAL_PCD_IRQHandler+0xc8>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80070fc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007100:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
 8007104:	b29b      	uxth	r3, r3
 8007106:	f200 450c 	addw	r5, r0, #1036	; 0x40c
 800710a:	2900      	cmp	r1, #0
 800710c:	f040 80a6 	bne.w	800725c <HAL_PCD_IRQHandler+0x6bc>
 8007110:	5ae9      	ldrh	r1, [r5, r3]
 8007112:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007116:	0409      	lsls	r1, r1, #16
 8007118:	0c09      	lsrs	r1, r1, #16
 800711a:	52e9      	strh	r1, [r5, r3]
 800711c:	5ae9      	ldrh	r1, [r5, r3]
 800711e:	b289      	uxth	r1, r1
 8007120:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007124:	52e9      	strh	r1, [r5, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007126:	8803      	ldrh	r3, [r0, #0]
 8007128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007140:	8003      	strh	r3, [r0, #0]
 8007142:	e591      	b.n	8006c68 <HAL_PCD_IRQHandler+0xc8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007144:	3306      	adds	r3, #6
 8007146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800714a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800714e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8007152:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_count += count;
 8007156:	461f      	mov	r7, r3
              if (count != 0U)
 8007158:	2b00      	cmp	r3, #0
 800715a:	f43f ae5b 	beq.w	8006e14 <HAL_PCD_IRQHandler+0x274>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800715e:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8007162:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007166:	f002 faf1 	bl	800974c <USB_ReadPMA>
 800716a:	e653      	b.n	8006e14 <HAL_PCD_IRQHandler+0x274>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800716c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8007170:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007174:	f002 faea 	bl	800974c <USB_ReadPMA>
 8007178:	e64c      	b.n	8006e14 <HAL_PCD_IRQHandler+0x274>
        ep = &hpcd->OUT_ep[epindex];
 800717a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800717e:	6820      	ldr	r0, [r4, #0]
 8007180:	4421      	add	r1, r4
 8007182:	f001 ff45 	bl	8009010 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	4602      	mov	r2, r0
 800718a:	e580      	b.n	8006c8e <HAL_PCD_IRQHandler+0xee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800718c:	f8b3 e40c 	ldrh.w	lr, [r3, #1036]	; 0x40c
    if (ep->xfer_len >= TxByteNbre)
 8007190:	1973      	adds	r3, r6, r5
 8007192:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007196:	f8d3 b040 	ldr.w	fp, [r3, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800719a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 800719e:	45f3      	cmp	fp, lr
 80071a0:	f0c0 80a5 	bcc.w	80072ee <HAL_PCD_IRQHandler+0x74e>
      ep->xfer_len -= TxByteNbre;
 80071a4:	ebab 0c0e 	sub.w	ip, fp, lr
 80071a8:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80071ac:	f1bc 0f00 	cmp.w	ip, #0
 80071b0:	f000 809f 	beq.w	80072f2 <HAL_PCD_IRQHandler+0x752>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071b4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
 80071b8:	d10d      	bne.n	80071d6 <HAL_PCD_IRQHandler+0x636>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80071ba:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	0c1b      	lsrs	r3, r3, #16
 80071ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80071d6:	1973      	adds	r3, r6, r5
 80071d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80071dc:	f893 c04c 	ldrb.w	ip, [r3, #76]	; 0x4c
 80071e0:	f1bc 0f01 	cmp.w	ip, #1
 80071e4:	f040 80c5 	bne.w	8007372 <HAL_PCD_IRQHandler+0x7d2>
        ep->xfer_buff += TxByteNbre;
 80071e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80071ea:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80071ee:	eb02 0c0e 	add.w	ip, r2, lr
        ep->xfer_count += TxByteNbre;
 80071f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80071f4:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80071f8:	4472      	add	r2, lr
 80071fa:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80071fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071fe:	4542      	cmp	r2, r8
 8007200:	f0c0 81ab 	bcc.w	800755a <HAL_PCD_IRQHandler+0x9ba>
          ep->xfer_len_db -= len;
 8007204:	eba2 0208 	sub.w	r2, r2, r8
 8007208:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800720a:	fa1f fe88 	uxth.w	lr, r8
 800720e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007212:	2b00      	cmp	r3, #0
 8007214:	f040 8194 	bne.w	8007540 <HAL_PCD_IRQHandler+0x9a0>
 8007218:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800721c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007220:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 8007224:	b292      	uxth	r2, r2
 8007226:	188b      	adds	r3, r1, r2
 8007228:	f1b8 0f00 	cmp.w	r8, #0
 800722c:	f040 81d0 	bne.w	80075d0 <HAL_PCD_IRQHandler+0xa30>
 8007230:	5a8b      	ldrh	r3, [r1, r2]
 8007232:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007236:	041b      	lsls	r3, r3, #16
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	528b      	strh	r3, [r1, r2]
 800723c:	5a8b      	ldrh	r3, [r1, r2]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007244:	528b      	strh	r3, [r1, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007246:	1972      	adds	r2, r6, r5
 8007248:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800724c:	4673      	mov	r3, lr
 800724e:	4661      	mov	r1, ip
 8007250:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007252:	f002 fa6b 	bl	800972c <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007256:	6820      	ldr	r0, [r4, #0]
 8007258:	4602      	mov	r2, r0
 800725a:	e08a      	b.n	8007372 <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800725c:	293e      	cmp	r1, #62	; 0x3e
 800725e:	f200 80cb 	bhi.w	80073f8 <HAL_PCD_IRQHandler+0x858>
 8007262:	084e      	lsrs	r6, r1, #1
 8007264:	07cf      	lsls	r7, r1, #31
 8007266:	bf48      	it	mi
 8007268:	3601      	addmi	r6, #1
 800726a:	02b1      	lsls	r1, r6, #10
 800726c:	b289      	uxth	r1, r1
 800726e:	52e9      	strh	r1, [r5, r3]
 8007270:	e759      	b.n	8007126 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007272:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007276:	f418 4c80 	ands.w	ip, r8, #16384	; 0x4000
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800727a:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800727c:	f000 80c7 	beq.w	800740e <HAL_PCD_IRQHandler+0x86e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007280:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8007284:	3302      	adds	r3, #2
 8007286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800728a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800728e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8007292:	f8d1 c180 	ldr.w	ip, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007296:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 800729a:	459c      	cmp	ip, r3
 800729c:	461f      	mov	r7, r3
 800729e:	f0c0 8112 	bcc.w	80074c6 <HAL_PCD_IRQHandler+0x926>
      ep->xfer_len -= count;
 80072a2:	ebac 0c03 	sub.w	ip, ip, r3
 80072a6:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80072aa:	f1bc 0f00 	cmp.w	ip, #0
 80072ae:	f000 810e 	beq.w	80074ce <HAL_PCD_IRQHandler+0x92e>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80072b2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80072b6:	d00d      	beq.n	80072d4 <HAL_PCD_IRQHandler+0x734>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80072b8:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80072bc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80072c0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80072c4:	0409      	lsls	r1, r1, #16
 80072c6:	0c09      	lsrs	r1, r1, #16
 80072c8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80072cc:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80072d0:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80c3 	beq.w	8007460 <HAL_PCD_IRQHandler+0x8c0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80072da:	1971      	adds	r1, r6, r5
 80072dc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80072e0:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80072e4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80072e8:	f002 fa30 	bl	800974c <USB_ReadPMA>
 80072ec:	e592      	b.n	8006e14 <HAL_PCD_IRQHandler+0x274>
 80072ee:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 80be 	bne.w	8007478 <HAL_PCD_IRQHandler+0x8d8>
 80072fc:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8007300:	010b      	lsls	r3, r1, #4
 8007302:	f203 4604 	addw	r6, r3, #1028	; 0x404
 8007306:	4406      	add	r6, r0
 8007308:	b2ad      	uxth	r5, r5
 800730a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800730c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007310:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007314:	0412      	lsls	r2, r2, #16
 8007316:	0c12      	lsrs	r2, r2, #16
 8007318:	5372      	strh	r2, [r6, r5]
 800731a:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800731c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800731e:	b292      	uxth	r2, r2
 8007320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007324:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007326:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 800732a:	b280      	uxth	r0, r0
 800732c:	5a1a      	ldrh	r2, [r3, r0]
 800732e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007332:	0412      	lsls	r2, r2, #16
 8007334:	0c12      	lsrs	r2, r2, #16
 8007336:	521a      	strh	r2, [r3, r0]
 8007338:	5a1a      	ldrh	r2, [r3, r0]
 800733a:	b292      	uxth	r2, r2
 800733c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007340:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007342:	4620      	mov	r0, r4
 8007344:	f003 f95c 	bl	800a600 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007348:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800734c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800734e:	d183      	bne.n	8007258 <HAL_PCD_IRQHandler+0x6b8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007350:	4602      	mov	r2, r0
 8007352:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8007356:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800735a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800736a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007372:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8007376:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800737a:	b29b      	uxth	r3, r3
 800737c:	ea03 030a 	and.w	r3, r3, sl
 8007380:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
 8007390:	e46a      	b.n	8006c68 <HAL_PCD_IRQHandler+0xc8>
 8007392:	2300      	movs	r3, #0
 8007394:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007398:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800739c:	2b00      	cmp	r3, #0
 800739e:	d17f      	bne.n	80074a0 <HAL_PCD_IRQHandler+0x900>
 80073a0:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 80073a4:	010b      	lsls	r3, r1, #4
 80073a6:	f203 4604 	addw	r6, r3, #1028	; 0x404
 80073aa:	4406      	add	r6, r0
 80073ac:	b2ad      	uxth	r5, r5
 80073ae:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073b4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80073b8:	0412      	lsls	r2, r2, #16
 80073ba:	0c12      	lsrs	r2, r2, #16
 80073bc:	5372      	strh	r2, [r6, r5]
 80073be:	5b72      	ldrh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073c0:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073c2:	b292      	uxth	r2, r2
 80073c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073c8:	5372      	strh	r2, [r6, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80073ca:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
 80073ce:	b280      	uxth	r0, r0
 80073d0:	5a1a      	ldrh	r2, [r3, r0]
 80073d2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80073d6:	0412      	lsls	r2, r2, #16
 80073d8:	0c12      	lsrs	r2, r2, #16
 80073da:	521a      	strh	r2, [r3, r0]
 80073dc:	5a1a      	ldrh	r2, [r3, r0]
 80073de:	b292      	uxth	r2, r2
 80073e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073e4:	521a      	strh	r2, [r3, r0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073e6:	4620      	mov	r0, r4
 80073e8:	f003 f90a 	bl	800a600 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073ec:	f418 4f80 	tst.w	r8, #16384	; 0x4000
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80073f0:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073f2:	d1ad      	bne.n	8007350 <HAL_PCD_IRQHandler+0x7b0>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80073f4:	4602      	mov	r2, r0
 80073f6:	e7bc      	b.n	8007372 <HAL_PCD_IRQHandler+0x7d2>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80073f8:	094e      	lsrs	r6, r1, #5
 80073fa:	06c9      	lsls	r1, r1, #27
 80073fc:	4989      	ldr	r1, [pc, #548]	; (8007624 <HAL_PCD_IRQHandler+0xa84>)
 80073fe:	bf08      	it	eq
 8007400:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007404:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007408:	b289      	uxth	r1, r1
 800740a:	52e9      	strh	r1, [r5, r3]
 800740c:	e68b      	b.n	8007126 <HAL_PCD_IRQHandler+0x586>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800740e:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8007412:	3306      	adds	r3, #6
 8007414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007418:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800741c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
    if (ep->xfer_len >= count)
 8007420:	f8d1 e180 	ldr.w	lr, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007424:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8007428:	459e      	cmp	lr, r3
 800742a:	461f      	mov	r7, r3
 800742c:	d360      	bcc.n	80074f0 <HAL_PCD_IRQHandler+0x950>
      ep->xfer_len -= count;
 800742e:	ebae 0e03 	sub.w	lr, lr, r3
 8007432:	f8c1 e180 	str.w	lr, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8007436:	f1be 0f00 	cmp.w	lr, #0
 800743a:	d05b      	beq.n	80074f4 <HAL_PCD_IRQHandler+0x954>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800743c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8007440:	d10d      	bne.n	800745e <HAL_PCD_IRQHandler+0x8be>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007442:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 8007446:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800744a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800744e:	0409      	lsls	r1, r1, #16
 8007450:	0c09      	lsrs	r1, r1, #16
 8007452:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007456:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800745a:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
    if (count != 0U)
 800745e:	b90b      	cbnz	r3, 8007464 <HAL_PCD_IRQHandler+0x8c4>
 8007460:	461f      	mov	r7, r3
 8007462:	e4d7      	b.n	8006e14 <HAL_PCD_IRQHandler+0x274>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007464:	1971      	adds	r1, r6, r5
 8007466:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800746a:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 800746e:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8007472:	f002 f96b 	bl	800974c <USB_ReadPMA>
 8007476:	e4cd      	b.n	8006e14 <HAL_PCD_IRQHandler+0x274>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007478:	2b01      	cmp	r3, #1
 800747a:	f47f af62 	bne.w	8007342 <HAL_PCD_IRQHandler+0x7a2>
 800747e:	2500      	movs	r5, #0
 8007480:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007484:	010b      	lsls	r3, r1, #4
 8007486:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800748a:	b292      	uxth	r2, r2
 800748c:	4406      	add	r6, r0
 800748e:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007490:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007494:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007498:	4403      	add	r3, r0
 800749a:	b292      	uxth	r2, r2
 800749c:	529d      	strh	r5, [r3, r2]
 800749e:	e750      	b.n	8007342 <HAL_PCD_IRQHandler+0x7a2>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d1a0      	bne.n	80073e6 <HAL_PCD_IRQHandler+0x846>
 80074a4:	2500      	movs	r5, #0
 80074a6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80074aa:	010b      	lsls	r3, r1, #4
 80074ac:	f203 4604 	addw	r6, r3, #1028	; 0x404
 80074b0:	b292      	uxth	r2, r2
 80074b2:	4406      	add	r6, r0
 80074b4:	52b5      	strh	r5, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80074ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074be:	4403      	add	r3, r0
 80074c0:	b292      	uxth	r2, r2
 80074c2:	529d      	strh	r5, [r3, r2]
 80074c4:	e78f      	b.n	80073e6 <HAL_PCD_IRQHandler+0x846>
 80074c6:	f04f 0c00 	mov.w	ip, #0
 80074ca:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80074ce:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80074d2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80074d6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80074da:	0409      	lsls	r1, r1, #16
 80074dc:	0c09      	lsrs	r1, r1, #16
 80074de:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 80074e2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80074e6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80074ea:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 80074ee:	e6e0      	b.n	80072b2 <HAL_PCD_IRQHandler+0x712>
 80074f0:	f8c1 c180 	str.w	ip, [r1, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80074f4:	f830 1022 	ldrh.w	r1, [r0, r2, lsl #2]
 80074f8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80074fc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007500:	0409      	lsls	r1, r1, #16
 8007502:	0c09      	lsrs	r1, r1, #16
 8007504:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8007508:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800750c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007510:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
 8007514:	e792      	b.n	800743c <HAL_PCD_IRQHandler+0x89c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007516:	b293      	uxth	r3, r2
 8007518:	f1be 0f01 	cmp.w	lr, #1
 800751c:	f47f ac4d 	bne.w	8006dba <HAL_PCD_IRQHandler+0x21a>
 8007520:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007524:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007528:	f201 4104 	addw	r1, r1, #1028	; 0x404
 800752c:	b292      	uxth	r2, r2
 800752e:	528b      	strh	r3, [r1, r2]
 8007530:	e443      	b.n	8006dba <HAL_PCD_IRQHandler+0x21a>
        else if (ep->xfer_len_db == 0U)
 8007532:	b9ba      	cbnz	r2, 8007564 <HAL_PCD_IRQHandler+0x9c4>
          ep->xfer_fill_db = 0U;
 8007534:	4698      	mov	r8, r3
 8007536:	f88e 204c 	strb.w	r2, [lr, #76]	; 0x4c
 800753a:	e41c      	b.n	8006d76 <HAL_PCD_IRQHandler+0x1d6>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800753c:	fa1f fe82 	uxth.w	lr, r2
 8007540:	2b01      	cmp	r3, #1
 8007542:	f47f ae80 	bne.w	8007246 <HAL_PCD_IRQHandler+0x6a6>
 8007546:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800754a:	eb00 1201 	add.w	r2, r0, r1, lsl #4
 800754e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8007552:	b29b      	uxth	r3, r3
 8007554:	f822 e003 	strh.w	lr, [r2, r3]
 8007558:	e675      	b.n	8007246 <HAL_PCD_IRQHandler+0x6a6>
        else if (ep->xfer_len_db == 0U)
 800755a:	bb22      	cbnz	r2, 80075a6 <HAL_PCD_IRQHandler+0xa06>
          ep->xfer_fill_db = 0U;
 800755c:	46f0      	mov	r8, lr
 800755e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007562:	e654      	b.n	800720e <HAL_PCD_IRQHandler+0x66e>
          ep->xfer_fill_db = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	f88e 304c 	strb.w	r3, [lr, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800756a:	f8ce 3048 	str.w	r3, [lr, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800756e:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
 8007572:	f1be 0f00 	cmp.w	lr, #0
 8007576:	d1ce      	bne.n	8007516 <HAL_PCD_IRQHandler+0x976>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007578:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800757a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800757e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007582:	b29b      	uxth	r3, r3
 8007584:	f201 4104 	addw	r1, r1, #1028	; 0x404
 8007588:	4419      	add	r1, r3
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800758a:	b293      	uxth	r3, r2
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800758c:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 8007590:	d82b      	bhi.n	80075ea <HAL_PCD_IRQHandler+0xa4a>
 8007592:	ea4f 0258 	mov.w	r2, r8, lsr #1
 8007596:	f018 0f01 	tst.w	r8, #1
 800759a:	bf18      	it	ne
 800759c:	3201      	addne	r2, #1
 800759e:	0292      	lsls	r2, r2, #10
 80075a0:	b292      	uxth	r2, r2
 80075a2:	800a      	strh	r2, [r1, #0]
 80075a4:	e409      	b.n	8006dba <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_len_db = 0U;
 80075a6:	f04f 0e00 	mov.w	lr, #0
 80075aa:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80075ae:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1c0      	bne.n	800753c <HAL_PCD_IRQHandler+0x99c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075ba:	4690      	mov	r8, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80075c0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80075c4:	f201 410c 	addw	r1, r1, #1036	; 0x40c
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	440b      	add	r3, r1
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075cc:	fa1f fe82 	uxth.w	lr, r2
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075d0:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
 80075d4:	d818      	bhi.n	8007608 <HAL_PCD_IRQHandler+0xa68>
 80075d6:	ea4f 0258 	mov.w	r2, r8, lsr #1
 80075da:	f018 0f01 	tst.w	r8, #1
 80075de:	bf18      	it	ne
 80075e0:	3201      	addne	r2, #1
 80075e2:	0292      	lsls	r2, r2, #10
 80075e4:	b292      	uxth	r2, r2
 80075e6:	801a      	strh	r2, [r3, #0]
 80075e8:	e62d      	b.n	8007246 <HAL_PCD_IRQHandler+0x6a6>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075ea:	ea4f 1258 	mov.w	r2, r8, lsr #5
 80075ee:	f8df e034 	ldr.w	lr, [pc, #52]	; 8007624 <HAL_PCD_IRQHandler+0xa84>
 80075f2:	f018 0f1f 	tst.w	r8, #31
 80075f6:	bf08      	it	eq
 80075f8:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80075fc:	ea4e 2282 	orr.w	r2, lr, r2, lsl #10
 8007600:	b292      	uxth	r2, r2
 8007602:	800a      	strh	r2, [r1, #0]
 8007604:	f7ff bbd9 	b.w	8006dba <HAL_PCD_IRQHandler+0x21a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007608:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800760c:	4905      	ldr	r1, [pc, #20]	; (8007624 <HAL_PCD_IRQHandler+0xa84>)
 800760e:	f018 0f1f 	tst.w	r8, #31
 8007612:	bf08      	it	eq
 8007614:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8007618:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 800761c:	b292      	uxth	r2, r2
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e611      	b.n	8007246 <HAL_PCD_IRQHandler+0x6a6>
 8007622:	bf00      	nop
 8007624:	ffff8000 	.word	0xffff8000

08007628 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007628:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
 800762c:	2a01      	cmp	r2, #1
 800762e:	d00e      	beq.n	800764e <HAL_PCD_SetAddress+0x26>
{
 8007630:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8007632:	2201      	movs	r2, #1
 8007634:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007636:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 8007638:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800763c:	f884 22a8 	strb.w	r2, [r4, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007640:	f002 f868 	bl	8009714 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007644:	2300      	movs	r3, #0
 8007646:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800764a:	4618      	mov	r0, r3
}
 800764c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800764e:	2002      	movs	r0, #2
}
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop

08007654 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8007654:	f001 0c07 	and.w	ip, r1, #7
 8007658:	0609      	lsls	r1, r1, #24
{
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800765e:	d425      	bmi.n	80076ac <HAL_PCD_EP_Open+0x58>
    ep->is_in = 0U;
 8007660:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007664:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8007668:	00c0      	lsls	r0, r0, #3
 800766a:	f500 71b4 	add.w	r1, r0, #360	; 0x168
    ep->is_in = 0U;
 800766e:	4420      	add	r0, r4
 8007670:	f880 e169 	strb.w	lr, [r0, #361]	; 0x169
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007674:	4421      	add	r1, r4
  ep->maxpacket = ep_mps;
 8007676:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8007678:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800767a:	f881 c000 	strb.w	ip, [r1]
  ep->type = ep_type;
 800767e:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007680:	b10a      	cbz	r2, 8007686 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 8007682:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8007686:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8007688:	bf04      	itt	eq
 800768a:	2300      	moveq	r3, #0
 800768c:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800768e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007692:	2b01      	cmp	r3, #1
 8007694:	d019      	beq.n	80076ca <HAL_PCD_EP_Open+0x76>
 8007696:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007698:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800769a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800769e:	f001 fa63 	bl	8008b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076a2:	2300      	movs	r3, #0
 80076a4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return ret;
 80076a8:	4618      	mov	r0, r3
}
 80076aa:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ac:	f10c 0101 	add.w	r1, ip, #1
    ep->is_in = 1U;
 80076b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80076b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80076b8:	2001      	movs	r0, #1
 80076ba:	7048      	strb	r0, [r1, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076bc:	eb0c 0100 	add.w	r1, ip, r0
 80076c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80076c4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 80076c8:	e7d5      	b.n	8007676 <HAL_PCD_EP_Open+0x22>
  __HAL_LOCK(hpcd);
 80076ca:	2002      	movs	r0, #2
}
 80076cc:	bd10      	pop	{r4, pc}
 80076ce:	bf00      	nop

080076d0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80076d0:	060b      	lsls	r3, r1, #24
{
 80076d2:	b510      	push	{r4, lr}
 80076d4:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80076d6:	d41b      	bmi.n	8007710 <HAL_PCD_EP_Close+0x40>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80076d8:	f001 0307 	and.w	r3, r1, #7
 80076dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80076e0:	00d2      	lsls	r2, r2, #3
 80076e2:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 80076e6:	4401      	add	r1, r0
    ep->is_in = 0U;
 80076e8:	4402      	add	r2, r0
 80076ea:	2000      	movs	r0, #0
 80076ec:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 80076f0:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80076f2:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d019      	beq.n	800772e <HAL_PCD_EP_Close+0x5e>
 80076fa:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80076fc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80076fe:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007702:	f001 fba5 	bl	8008e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007706:	2300      	movs	r3, #0
 8007708:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 800770c:	4618      	mov	r0, r3
}
 800770e:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8007710:	2001      	movs	r0, #1
 8007712:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007716:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8007718:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800771c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007720:	4611      	mov	r1, r2
    ep->is_in = 1U;
 8007722:	7050      	strb	r0, [r2, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007724:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007726:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800772a:	2b01      	cmp	r3, #1
 800772c:	d1e5      	bne.n	80076fa <HAL_PCD_EP_Close+0x2a>
 800772e:	2002      	movs	r0, #2
}
 8007730:	bd10      	pop	{r4, pc}
 8007732:	bf00      	nop

08007734 <HAL_PCD_EP_Receive>:
{
 8007734:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 8007736:	2400      	movs	r4, #0
 8007738:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 800773c:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8007740:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 8007744:	e9cc 235f 	strd	r2, r3, [ip, #380]	; 0x17c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007748:	6800      	ldr	r0, [r0, #0]
 800774a:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
  ep->xfer_count = 0U;
 800774e:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 8007752:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8007756:	f88c e168 	strb.w	lr, [ip, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800775a:	f001 fc59 	bl	8009010 <USB_EPStartXfer>
}
 800775e:	4620      	mov	r0, r4
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop

08007764 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007764:	f001 0107 	and.w	r1, r1, #7
 8007768:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800776c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8007770:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop

08007778 <HAL_PCD_EP_Transmit>:
{
 8007778:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_fill_db = 1U;
 800777a:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800777c:	2500      	movs	r5, #0
{
 800777e:	4604      	mov	r4, r0
 8007780:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8007784:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007788:	eb0e 0106 	add.w	r1, lr, r6
  ep->xfer_buff = pBuf;
 800778c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007790:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  ep->xfer_buff = pBuf;
 8007794:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->num = ep_addr & EP_ADDR_MSK;
 8007798:	f88c e028 	strb.w	lr, [ip, #40]	; 0x28
  ep->xfer_len = len;
 800779c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_len_db = len;
 80077a0:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_fill_db = 1U;
 80077a4:	f88c 604c 	strb.w	r6, [ip, #76]	; 0x4c
  ep->xfer_count = 0U;
 80077a8:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
  ep->is_in = 1U;
 80077ac:	f88c 6029 	strb.w	r6, [ip, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80077b0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80077b4:	6800      	ldr	r0, [r0, #0]
 80077b6:	f001 fc2b 	bl	8009010 <USB_EPStartXfer>
}
 80077ba:	4628      	mov	r0, r5
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	bf00      	nop

080077c0 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80077c0:	6843      	ldr	r3, [r0, #4]
{
 80077c2:	b510      	push	{r4, lr}
 80077c4:	4604      	mov	r4, r0
 80077c6:	f001 0007 	and.w	r0, r1, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80077ca:	4298      	cmp	r0, r3
 80077cc:	d82d      	bhi.n	800782a <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80077ce:	060b      	lsls	r3, r1, #24
 80077d0:	d41a      	bmi.n	8007808 <HAL_PCD_EP_SetStall+0x48>
    ep = &hpcd->OUT_ep[ep_addr];
 80077d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80077d6:	00c9      	lsls	r1, r1, #3
 80077d8:	f501 72b4 	add.w	r2, r1, #360	; 0x168
    ep->is_in = 0U;
 80077dc:	1863      	adds	r3, r4, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80077de:	18a1      	adds	r1, r4, r2
    ep->is_in = 0U;
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 80077e6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80077e8:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 80077ea:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80077ec:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d018      	beq.n	8007826 <HAL_PCD_EP_SetStall+0x66>
 80077f4:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	f001 ff13 	bl	8009624 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80077fe:	2300      	movs	r3, #0
 8007800:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  return HAL_OK;
 8007804:	4618      	mov	r0, r3
}
 8007806:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8007808:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800780a:	1883      	adds	r3, r0, r2
    ep->is_in = 1U;
 800780c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007810:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8007814:	705a      	strb	r2, [r3, #1]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007816:	4619      	mov	r1, r3
  ep->is_stall = 1U;
 8007818:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800781a:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 1U;
 800781c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800781e:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8007822:	429a      	cmp	r2, r3
 8007824:	d1e6      	bne.n	80077f4 <HAL_PCD_EP_SetStall+0x34>
 8007826:	2002      	movs	r0, #2
}
 8007828:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800782a:	2001      	movs	r0, #1
}
 800782c:	bd10      	pop	{r4, pc}
 800782e:	bf00      	nop

08007830 <HAL_PCD_EP_ClrStall>:
{
 8007830:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007832:	6843      	ldr	r3, [r0, #4]
 8007834:	f001 020f 	and.w	r2, r1, #15
 8007838:	429a      	cmp	r2, r3
 800783a:	d832      	bhi.n	80078a2 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800783c:	060b      	lsls	r3, r1, #24
 800783e:	4604      	mov	r4, r0
 8007840:	d41c      	bmi.n	800787c <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007842:	f001 0307 	and.w	r3, r1, #7
 8007846:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800784a:	00d2      	lsls	r2, r2, #3
 800784c:	f502 71b4 	add.w	r1, r2, #360	; 0x168
 8007850:	4401      	add	r1, r0
    ep->is_in = 0U;
 8007852:	4402      	add	r2, r0
  ep->is_stall = 0U;
 8007854:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8007856:	2000      	movs	r0, #0
 8007858:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 800785c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800785e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007860:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8007864:	2b01      	cmp	r3, #1
 8007866:	d01a      	beq.n	800789e <HAL_PCD_EP_ClrStall+0x6e>
 8007868:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800786a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800786c:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007870:	f001 ff00 	bl	8009674 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007874:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
  return HAL_OK;
 8007878:	4628      	mov	r0, r5
}
 800787a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 800787c:	2001      	movs	r0, #1
 800787e:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007882:	181a      	adds	r2, r3, r0
    ep->is_in = 1U;
 8007884:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007888:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800788c:	4611      	mov	r1, r2
  ep->is_stall = 0U;
 800788e:	2500      	movs	r5, #0
    ep->is_in = 1U;
 8007890:	7050      	strb	r0, [r2, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007892:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 8007894:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8007896:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800789a:	2b01      	cmp	r3, #1
 800789c:	d1e4      	bne.n	8007868 <HAL_PCD_EP_ClrStall+0x38>
 800789e:	2002      	movs	r0, #2
}
 80078a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80078a2:	2001      	movs	r0, #1
}
 80078a4:	bd38      	pop	{r3, r4, r5, pc}
 80078a6:	bf00      	nop

080078a8 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80078a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078ac:	d00b      	beq.n	80078c6 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ae:	f001 0107 	and.w	r1, r1, #7
 80078b2:	3101      	adds	r1, #1
 80078b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80078b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80078bc:	b95a      	cbnz	r2, 80078d6 <HAL_PCDEx_PMAConfig+0x2e>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80078be:	2000      	movs	r0, #0
    ep->pmaadress = (uint16_t)pmaadress;
 80078c0:	80cb      	strh	r3, [r1, #6]
 80078c2:	730a      	strb	r2, [r1, #12]
}
 80078c4:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80078c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80078ca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80078ce:	f501 71b4 	add.w	r1, r1, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	d0f3      	beq.n	80078be <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80078d6:	2201      	movs	r2, #1
}
 80078d8:	2000      	movs	r0, #0
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80078da:	608b      	str	r3, [r1, #8]
 80078dc:	730a      	strb	r2, [r1, #12]
}
 80078de:	4770      	bx	lr

080078e0 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 80078e2:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80078ea:	d116      	bne.n	800791a <RCC_SetFlashLatencyFromMSIRange+0x3a>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ee:	00d2      	lsls	r2, r2, #3
 80078f0:	d420      	bmi.n	8007934 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80078f4:	4919      	ldr	r1, [pc, #100]	; (800795c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80078f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80078fa:	625a      	str	r2, [r3, #36]	; 0x24
 80078fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8007902:	9201      	str	r2, [sp, #4]
 8007904:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007906:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007908:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800790a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800790e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007912:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 8007916:	6259      	str	r1, [r3, #36]	; 0x24
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007918:	d013      	beq.n	8007942 <RCC_SetFlashLatencyFromMSIRange+0x62>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800791a:	2000      	movs	r0, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800791c:	4a10      	ldr	r2, [pc, #64]	; (8007960 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	4303      	orrs	r3, r0
 8007926:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007928:	6813      	ldr	r3, [r2, #0]
 800792a:	f003 0301 	and.w	r3, r3, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800792e:	4058      	eors	r0, r3
 8007930:	b002      	add	sp, #8
 8007932:	4770      	bx	lr
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007934:	4b09      	ldr	r3, [pc, #36]	; (800795c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800793c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8007940:	d1eb      	bne.n	800791a <RCC_SetFlashLatencyFromMSIRange+0x3a>
 8007942:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8007946:	d1e8      	bne.n	800791a <RCC_SetFlashLatencyFromMSIRange+0x3a>
  __HAL_FLASH_SET_LATENCY(latency);
 8007948:	4a05      	ldr	r2, [pc, #20]	; (8007960 <RCC_SetFlashLatencyFromMSIRange+0x80>)
      latency = FLASH_LATENCY_1; /* 1WS */
 800794a:	2001      	movs	r0, #1
  __HAL_FLASH_SET_LATENCY(latency);
 800794c:	6813      	ldr	r3, [r2, #0]
 800794e:	f043 0304 	orr.w	r3, r3, #4
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	e7e2      	b.n	800791c <RCC_SetFlashLatencyFromMSIRange+0x3c>
 8007956:	bf00      	nop
 8007958:	40023800 	.word	0x40023800
 800795c:	40007000 	.word	0x40007000
 8007960:	40023c00 	.word	0x40023c00

08007964 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8007964:	2800      	cmp	r0, #0
 8007966:	f000 81f8 	beq.w	8007d5a <HAL_RCC_OscConfig+0x3f6>
{
 800796a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800796e:	4aa2      	ldr	r2, [pc, #648]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007970:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007972:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007974:	6896      	ldr	r6, [r2, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007976:	07d9      	lsls	r1, r3, #31
 8007978:	4604      	mov	r4, r0
{
 800797a:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800797c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007980:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007984:	d52e      	bpl.n	80079e4 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007986:	2d08      	cmp	r5, #8
 8007988:	f000 8128 	beq.w	8007bdc <HAL_RCC_OscConfig+0x278>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800798c:	2d0c      	cmp	r5, #12
 800798e:	f000 8122 	beq.w	8007bd6 <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007992:	6863      	ldr	r3, [r4, #4]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d00f      	beq.n	80079b8 <HAL_RCC_OscConfig+0x54>
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8180 	beq.w	8007c9e <HAL_RCC_OscConfig+0x33a>
 800799e:	2b05      	cmp	r3, #5
 80079a0:	4b95      	ldr	r3, [pc, #596]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	f000 81db 	beq.w	8007d5e <HAL_RCC_OscConfig+0x3fa>
 80079a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e004      	b.n	80079c2 <HAL_RCC_OscConfig+0x5e>
 80079b8:	4a8f      	ldr	r2, [pc, #572]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80079c2:	f7fd fe8f 	bl	80056e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079c6:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8007bf8 <HAL_RCC_OscConfig+0x294>
        tickstart = HAL_GetTick();
 80079ca:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079cc:	e005      	b.n	80079da <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ce:	f7fd fe89 	bl	80056e4 <HAL_GetTick>
 80079d2:	1bc0      	subs	r0, r0, r7
 80079d4:	2864      	cmp	r0, #100	; 0x64
 80079d6:	f200 815e 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079da:	f8d8 3000 	ldr.w	r3, [r8]
 80079de:	039b      	lsls	r3, r3, #14
 80079e0:	d5f5      	bpl.n	80079ce <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	0799      	lsls	r1, r3, #30
 80079e6:	d522      	bpl.n	8007a2e <HAL_RCC_OscConfig+0xca>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80079e8:	2d04      	cmp	r5, #4
 80079ea:	f000 8114 	beq.w	8007c16 <HAL_RCC_OscConfig+0x2b2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80079ee:	2d0c      	cmp	r5, #12
 80079f0:	f000 810e 	beq.w	8007c10 <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079f4:	68e3      	ldr	r3, [r4, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8179 	beq.w	8007cee <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 80079fc:	2201      	movs	r2, #1
 80079fe:	4b7f      	ldr	r3, [pc, #508]	; (8007bfc <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a00:	4f7d      	ldr	r7, [pc, #500]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_HSI_ENABLE();
 8007a02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007a04:	f7fd fe6e 	bl	80056e4 <HAL_GetTick>
 8007a08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a0a:	e005      	b.n	8007a18 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a0c:	f7fd fe6a 	bl	80056e4 <HAL_GetTick>
 8007a10:	1b80      	subs	r0, r0, r6
 8007a12:	2802      	cmp	r0, #2
 8007a14:	f200 813f 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	079b      	lsls	r3, r3, #30
 8007a1c:	d5f6      	bpl.n	8007a0c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007a2a:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	06d9      	lsls	r1, r3, #27
 8007a30:	d525      	bpl.n	8007a7e <HAL_RCC_OscConfig+0x11a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	f000 8098 	beq.w	8007b68 <HAL_RCC_OscConfig+0x204>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a38:	69a3      	ldr	r3, [r4, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 816a 	beq.w	8007d14 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_MSI_ENABLE();
 8007a40:	2201      	movs	r2, #1
 8007a42:	4b6e      	ldr	r3, [pc, #440]	; (8007bfc <HAL_RCC_OscConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007a44:	4e6c      	ldr	r6, [pc, #432]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
        __HAL_RCC_MSI_ENABLE();
 8007a46:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8007a48:	f7fd fe4c 	bl	80056e4 <HAL_GetTick>
 8007a4c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007a4e:	e005      	b.n	8007a5c <HAL_RCC_OscConfig+0xf8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a50:	f7fd fe48 	bl	80056e4 <HAL_GetTick>
 8007a54:	1bc0      	subs	r0, r0, r7
 8007a56:	2802      	cmp	r0, #2
 8007a58:	f200 811d 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007a5c:	6833      	ldr	r3, [r6, #0]
 8007a5e:	059b      	lsls	r3, r3, #22
 8007a60:	d5f6      	bpl.n	8007a50 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a62:	6873      	ldr	r3, [r6, #4]
 8007a64:	6a22      	ldr	r2, [r4, #32]
 8007a66:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a6e:	6873      	ldr	r3, [r6, #4]
 8007a70:	69e2      	ldr	r2, [r4, #28]
 8007a72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007a7a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	0719      	lsls	r1, r3, #28
 8007a80:	d516      	bpl.n	8007ab0 <HAL_RCC_OscConfig+0x14c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a82:	6963      	ldr	r3, [r4, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8121 	beq.w	8007ccc <HAL_RCC_OscConfig+0x368>
      __HAL_RCC_LSI_ENABLE();
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4b5b      	ldr	r3, [pc, #364]	; (8007bfc <HAL_RCC_OscConfig+0x298>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a8e:	4f5a      	ldr	r7, [pc, #360]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
      __HAL_RCC_LSI_ENABLE();
 8007a90:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8007a94:	f7fd fe26 	bl	80056e4 <HAL_GetTick>
 8007a98:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a9a:	e005      	b.n	8007aa8 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a9c:	f7fd fe22 	bl	80056e4 <HAL_GetTick>
 8007aa0:	1b80      	subs	r0, r0, r6
 8007aa2:	2802      	cmp	r0, #2
 8007aa4:	f200 80f7 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	079a      	lsls	r2, r3, #30
 8007aac:	d5f6      	bpl.n	8007a9c <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	075e      	lsls	r6, r3, #29
 8007ab2:	d53b      	bpl.n	8007b2c <HAL_RCC_OscConfig+0x1c8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ab4:	4b50      	ldr	r3, [pc, #320]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 8007ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ab8:	00d0      	lsls	r0, r2, #3
 8007aba:	f100 8129 	bmi.w	8007d10 <HAL_RCC_OscConfig+0x3ac>
      pwrclkchanged = SET;
 8007abe:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ac2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad2:	4f4b      	ldr	r7, [pc, #300]	; (8007c00 <HAL_RCC_OscConfig+0x29c>)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	05d9      	lsls	r1, r3, #23
 8007ad8:	f140 80cc 	bpl.w	8007c74 <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007adc:	68a3      	ldr	r3, [r4, #8]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	f000 8175 	beq.w	8007dce <HAL_RCC_OscConfig+0x46a>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80a9 	beq.w	8007c3c <HAL_RCC_OscConfig+0x2d8>
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	4b42      	ldr	r3, [pc, #264]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 8007aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af0:	f000 818b 	beq.w	8007e0a <HAL_RCC_OscConfig+0x4a6>
 8007af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af8:	635a      	str	r2, [r3, #52]	; 0x34
 8007afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8007b02:	f7fd fdef 	bl	80056e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b06:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007b0a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b0c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8007bf8 <HAL_RCC_OscConfig+0x294>
 8007b10:	e005      	b.n	8007b1e <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b12:	f7fd fde7 	bl	80056e4 <HAL_GetTick>
 8007b16:	1bc0      	subs	r0, r0, r7
 8007b18:	4548      	cmp	r0, r9
 8007b1a:	f200 80bc 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b1e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8007b22:	059b      	lsls	r3, r3, #22
 8007b24:	d5f5      	bpl.n	8007b12 <HAL_RCC_OscConfig+0x1ae>
    if(pwrclkchanged == SET)
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	f040 814b 	bne.w	8007dc2 <HAL_RCC_OscConfig+0x45e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b2e:	b1b8      	cbz	r0, 8007b60 <HAL_RCC_OscConfig+0x1fc>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b30:	2d0c      	cmp	r5, #12
 8007b32:	f000 8152 	beq.w	8007dda <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b36:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <HAL_RCC_OscConfig+0x298>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b3e:	f000 8116 	beq.w	8007d6e <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_PLL_DISABLE();
 8007b42:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007b44:	f7fd fdce 	bl	80056e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b48:	4d2b      	ldr	r5, [pc, #172]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
        tickstart = HAL_GetTick();
 8007b4a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b4c:	e005      	b.n	8007b5a <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b4e:	f7fd fdc9 	bl	80056e4 <HAL_GetTick>
 8007b52:	1b00      	subs	r0, r0, r4
 8007b54:	2802      	cmp	r0, #2
 8007b56:	f200 809e 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b5a:	682b      	ldr	r3, [r5, #0]
 8007b5c:	019b      	lsls	r3, r3, #6
 8007b5e:	d4f6      	bmi.n	8007b4e <HAL_RCC_OscConfig+0x1ea>
  return HAL_OK;
 8007b60:	2000      	movs	r0, #0
}
 8007b62:	b003      	add	sp, #12
 8007b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b68:	4b23      	ldr	r3, [pc, #140]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	059a      	lsls	r2, r3, #22
 8007b6e:	d502      	bpl.n	8007b76 <HAL_RCC_OscConfig+0x212>
 8007b70:	69a3      	ldr	r3, [r4, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d03b      	beq.n	8007bee <HAL_RCC_OscConfig+0x28a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b76:	4e20      	ldr	r6, [pc, #128]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 8007b78:	6a20      	ldr	r0, [r4, #32]
 8007b7a:	6873      	ldr	r3, [r6, #4]
 8007b7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b80:	4298      	cmp	r0, r3
 8007b82:	f240 80d7 	bls.w	8007d34 <HAL_RCC_OscConfig+0x3d0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b86:	f7ff feab 	bl	80078e0 <RCC_SetFlashLatencyFromMSIRange>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d12f      	bne.n	8007bee <HAL_RCC_OscConfig+0x28a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b8e:	6872      	ldr	r2, [r6, #4]
 8007b90:	6a23      	ldr	r3, [r4, #32]
 8007b92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007b96:	431a      	orrs	r2, r3
 8007b98:	6072      	str	r2, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b9a:	6872      	ldr	r2, [r6, #4]
 8007b9c:	69e1      	ldr	r1, [r4, #28]
 8007b9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ba2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007ba6:	6072      	str	r2, [r6, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007ba8:	4a13      	ldr	r2, [pc, #76]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007baa:	0b5b      	lsrs	r3, r3, #13
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007bac:	6891      	ldr	r1, [r2, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007bae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007bb8:	4a12      	ldr	r2, [pc, #72]	; (8007c04 <HAL_RCC_OscConfig+0x2a0>)
 8007bba:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8007bbe:	5c52      	ldrb	r2, [r2, r1]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007bc0:	4811      	ldr	r0, [pc, #68]	; (8007c08 <HAL_RCC_OscConfig+0x2a4>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007bc2:	40d3      	lsrs	r3, r2
        status = HAL_InitTick(uwTickPrio);
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <HAL_RCC_OscConfig+0x2a8>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007bc6:	6003      	str	r3, [r0, #0]
        status = HAL_InitTick(uwTickPrio);
 8007bc8:	6810      	ldr	r0, [r2, #0]
 8007bca:	f7fd fd49 	bl	8005660 <HAL_InitTick>
        if(status != HAL_OK)
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d1c7      	bne.n	8007b62 <HAL_RCC_OscConfig+0x1fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	e753      	b.n	8007a7e <HAL_RCC_OscConfig+0x11a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	f43f aedb 	beq.w	8007992 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bdc:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <HAL_RCC_OscConfig+0x294>)
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	0392      	lsls	r2, r2, #14
 8007be2:	f57f aeff 	bpl.w	80079e4 <HAL_RCC_OscConfig+0x80>
 8007be6:	6862      	ldr	r2, [r4, #4]
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	f47f aefb 	bne.w	80079e4 <HAL_RCC_OscConfig+0x80>
        return HAL_ERROR;
 8007bee:	2001      	movs	r0, #1
}
 8007bf0:	b003      	add	sp, #12
 8007bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	42470000 	.word	0x42470000
 8007c00:	40007000 	.word	0x40007000
 8007c04:	0800d724 	.word	0x0800d724
 8007c08:	2000002c 	.word	0x2000002c
 8007c0c:	20000034 	.word	0x20000034
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007c10:	2e00      	cmp	r6, #0
 8007c12:	f47f aeef 	bne.w	80079f4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c16:	4a81      	ldr	r2, [pc, #516]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	0792      	lsls	r2, r2, #30
 8007c1c:	d502      	bpl.n	8007c24 <HAL_RCC_OscConfig+0x2c0>
 8007c1e:	68e2      	ldr	r2, [r4, #12]
 8007c20:	2a01      	cmp	r2, #1
 8007c22:	d1e4      	bne.n	8007bee <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c24:	497d      	ldr	r1, [pc, #500]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
 8007c26:	6920      	ldr	r0, [r4, #16]
 8007c28:	684a      	ldr	r2, [r1, #4]
 8007c2a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8007c2e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007c32:	604a      	str	r2, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c34:	06d9      	lsls	r1, r3, #27
 8007c36:	f57f af22 	bpl.w	8007a7e <HAL_RCC_OscConfig+0x11a>
 8007c3a:	e6fa      	b.n	8007a32 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c3c:	4f77      	ldr	r7, [pc, #476]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c3e:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
      tickstart = HAL_GetTick();
 8007c52:	f7fd fd47 	bl	80056e4 <HAL_GetTick>
 8007c56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c58:	e005      	b.n	8007c66 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c5a:	f7fd fd43 	bl	80056e4 <HAL_GetTick>
 8007c5e:	eba0 0008 	sub.w	r0, r0, r8
 8007c62:	4548      	cmp	r0, r9
 8007c64:	d817      	bhi.n	8007c96 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c68:	0598      	lsls	r0, r3, #22
 8007c6a:	d4f6      	bmi.n	8007c5a <HAL_RCC_OscConfig+0x2f6>
    if(pwrclkchanged == SET)
 8007c6c:	2e00      	cmp	r6, #0
 8007c6e:	f43f af5d 	beq.w	8007b2c <HAL_RCC_OscConfig+0x1c8>
 8007c72:	e0a6      	b.n	8007dc2 <HAL_RCC_OscConfig+0x45e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c7a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8007c7c:	f7fd fd32 	bl	80056e4 <HAL_GetTick>
 8007c80:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	05da      	lsls	r2, r3, #23
 8007c86:	f53f af29 	bmi.w	8007adc <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8a:	f7fd fd2b 	bl	80056e4 <HAL_GetTick>
 8007c8e:	eba0 0008 	sub.w	r0, r0, r8
 8007c92:	2864      	cmp	r0, #100	; 0x64
 8007c94:	d9f5      	bls.n	8007c82 <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 8007c96:	2003      	movs	r0, #3
}
 8007c98:	b003      	add	sp, #12
 8007c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c9e:	4f5f      	ldr	r7, [pc, #380]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8007cb0:	f7fd fd18 	bl	80056e4 <HAL_GetTick>
 8007cb4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cb6:	e005      	b.n	8007cc4 <HAL_RCC_OscConfig+0x360>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cb8:	f7fd fd14 	bl	80056e4 <HAL_GetTick>
 8007cbc:	eba0 0008 	sub.w	r0, r0, r8
 8007cc0:	2864      	cmp	r0, #100	; 0x64
 8007cc2:	d8e8      	bhi.n	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	0398      	lsls	r0, r3, #14
 8007cc8:	d4f6      	bmi.n	8007cb8 <HAL_RCC_OscConfig+0x354>
 8007cca:	e68a      	b.n	80079e2 <HAL_RCC_OscConfig+0x7e>
      __HAL_RCC_LSI_DISABLE();
 8007ccc:	4a54      	ldr	r2, [pc, #336]	; (8007e20 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cce:	4f53      	ldr	r7, [pc, #332]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
      __HAL_RCC_LSI_DISABLE();
 8007cd0:	f8c2 3680 	str.w	r3, [r2, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8007cd4:	f7fd fd06 	bl	80056e4 <HAL_GetTick>
 8007cd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cda:	e004      	b.n	8007ce6 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cdc:	f7fd fd02 	bl	80056e4 <HAL_GetTick>
 8007ce0:	1b80      	subs	r0, r0, r6
 8007ce2:	2802      	cmp	r0, #2
 8007ce4:	d8d7      	bhi.n	8007c96 <HAL_RCC_OscConfig+0x332>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	079b      	lsls	r3, r3, #30
 8007cea:	d4f7      	bmi.n	8007cdc <HAL_RCC_OscConfig+0x378>
 8007cec:	e6df      	b.n	8007aae <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 8007cee:	4a4c      	ldr	r2, [pc, #304]	; (8007e20 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cf0:	4f4a      	ldr	r7, [pc, #296]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_HSI_DISABLE();
 8007cf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007cf4:	f7fd fcf6 	bl	80056e4 <HAL_GetTick>
 8007cf8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cfa:	e004      	b.n	8007d06 <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cfc:	f7fd fcf2 	bl	80056e4 <HAL_GetTick>
 8007d00:	1b80      	subs	r0, r0, r6
 8007d02:	2802      	cmp	r0, #2
 8007d04:	d8c7      	bhi.n	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	0798      	lsls	r0, r3, #30
 8007d0a:	d4f7      	bmi.n	8007cfc <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	e68e      	b.n	8007a2e <HAL_RCC_OscConfig+0xca>
    FlagStatus       pwrclkchanged = RESET;
 8007d10:	2600      	movs	r6, #0
 8007d12:	e6de      	b.n	8007ad2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_MSI_DISABLE();
 8007d14:	4a42      	ldr	r2, [pc, #264]	; (8007e20 <HAL_RCC_OscConfig+0x4bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d16:	4f41      	ldr	r7, [pc, #260]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
        __HAL_RCC_MSI_DISABLE();
 8007d18:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8007d1a:	f7fd fce3 	bl	80056e4 <HAL_GetTick>
 8007d1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d20:	e004      	b.n	8007d2c <HAL_RCC_OscConfig+0x3c8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d22:	f7fd fcdf 	bl	80056e4 <HAL_GetTick>
 8007d26:	1b80      	subs	r0, r0, r6
 8007d28:	2802      	cmp	r0, #2
 8007d2a:	d8b4      	bhi.n	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	0598      	lsls	r0, r3, #22
 8007d30:	d4f7      	bmi.n	8007d22 <HAL_RCC_OscConfig+0x3be>
 8007d32:	e74e      	b.n	8007bd2 <HAL_RCC_OscConfig+0x26e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d34:	6873      	ldr	r3, [r6, #4]
 8007d36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007d3a:	4303      	orrs	r3, r0
 8007d3c:	6073      	str	r3, [r6, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d3e:	6873      	ldr	r3, [r6, #4]
 8007d40:	69e2      	ldr	r2, [r4, #28]
 8007d42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007d4a:	6073      	str	r3, [r6, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d4c:	f7ff fdc8 	bl	80078e0 <RCC_SetFlashLatencyFromMSIRange>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f47f af4c 	bne.w	8007bee <HAL_RCC_OscConfig+0x28a>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007d56:	6a23      	ldr	r3, [r4, #32]
 8007d58:	e726      	b.n	8007ba8 <HAL_RCC_OscConfig+0x244>
    return HAL_ERROR;
 8007d5a:	2001      	movs	r0, #1
}
 8007d5c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e629      	b.n	80079c2 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL_DISABLE();
 8007d6e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007d70:	f7fd fcb8 	bl	80056e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d74:	4e29      	ldr	r6, [pc, #164]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8007d76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d78:	e004      	b.n	8007d84 <HAL_RCC_OscConfig+0x420>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d7a:	f7fd fcb3 	bl	80056e4 <HAL_GetTick>
 8007d7e:	1b40      	subs	r0, r0, r5
 8007d80:	2802      	cmp	r0, #2
 8007d82:	d888      	bhi.n	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d84:	6833      	ldr	r3, [r6, #0]
 8007d86:	0199      	lsls	r1, r3, #6
 8007d88:	d4f7      	bmi.n	8007d7a <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d8a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8007d8e:	430b      	orrs	r3, r1
        __HAL_RCC_PLL_ENABLE();
 8007d90:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d92:	68b2      	ldr	r2, [r6, #8]
 8007d94:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007d96:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8007d9a:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8007d9c:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d9e:	4303      	orrs	r3, r0
 8007da0:	60b3      	str	r3, [r6, #8]
        __HAL_RCC_PLL_ENABLE();
 8007da2:	6611      	str	r1, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007da4:	f7fd fc9e 	bl	80056e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007da8:	4d1c      	ldr	r5, [pc, #112]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
        tickstart = HAL_GetTick();
 8007daa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dac:	e005      	b.n	8007dba <HAL_RCC_OscConfig+0x456>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dae:	f7fd fc99 	bl	80056e4 <HAL_GetTick>
 8007db2:	1b00      	subs	r0, r0, r4
 8007db4:	2802      	cmp	r0, #2
 8007db6:	f63f af6e 	bhi.w	8007c96 <HAL_RCC_OscConfig+0x332>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	019a      	lsls	r2, r3, #6
 8007dbe:	d5f6      	bpl.n	8007dae <HAL_RCC_OscConfig+0x44a>
 8007dc0:	e6ce      	b.n	8007b60 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dc2:	4a16      	ldr	r2, [pc, #88]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
 8007dc4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dca:	6253      	str	r3, [r2, #36]	; 0x24
 8007dcc:	e6ae      	b.n	8007b2c <HAL_RCC_OscConfig+0x1c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dce:	4a13      	ldr	r2, [pc, #76]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
 8007dd0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd6:	6353      	str	r3, [r2, #52]	; 0x34
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dd8:	e693      	b.n	8007b02 <HAL_RCC_OscConfig+0x19e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007dda:	2801      	cmp	r0, #1
 8007ddc:	f43f aec1 	beq.w	8007b62 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8007de0:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <HAL_RCC_OscConfig+0x4b8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007de2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8007de4:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007de6:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8007dea:	4291      	cmp	r1, r2
 8007dec:	f47f aeff 	bne.w	8007bee <HAL_RCC_OscConfig+0x28a>
 8007df0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007df2:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007df6:	4291      	cmp	r1, r2
 8007df8:	f47f aef9 	bne.w	8007bee <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007dfc:	6b20      	ldr	r0, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007dfe:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
        return HAL_ERROR;
 8007e02:	1a18      	subs	r0, r3, r0
 8007e04:	bf18      	it	ne
 8007e06:	2001      	movne	r0, #1
 8007e08:	e6ab      	b.n	8007b62 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e0e:	635a      	str	r2, [r3, #52]	; 0x34
 8007e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	635a      	str	r2, [r3, #52]	; 0x34
 8007e18:	e673      	b.n	8007b02 <HAL_RCC_OscConfig+0x19e>
 8007e1a:	bf00      	nop
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	42470000 	.word	0x42470000

08007e24 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f000 80c2 	beq.w	8007fae <HAL_RCC_ClockConfig+0x18a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e2a:	4a85      	ldr	r2, [pc, #532]	; (8008040 <HAL_RCC_ClockConfig+0x21c>)
{
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	4604      	mov	r4, r0
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	428b      	cmp	r3, r1
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	d213      	bcs.n	8007e66 <HAL_RCC_ClockConfig+0x42>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3e:	2901      	cmp	r1, #1
 8007e40:	d103      	bne.n	8007e4a <HAL_RCC_ClockConfig+0x26>
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	f043 0304 	orr.w	r3, r3, #4
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4a7d      	ldr	r2, [pc, #500]	; (8008040 <HAL_RCC_ClockConfig+0x21c>)
 8007e4c:	6813      	ldr	r3, [r2, #0]
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	432b      	orrs	r3, r5
 8007e54:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e56:	6813      	ldr	r3, [r2, #0]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	42ab      	cmp	r3, r5
 8007e5e:	d002      	beq.n	8007e66 <HAL_RCC_ClockConfig+0x42>
    return HAL_ERROR;
 8007e60:	2001      	movs	r0, #1
}
 8007e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	0799      	lsls	r1, r3, #30
 8007e6a:	d506      	bpl.n	8007e7a <HAL_RCC_ClockConfig+0x56>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e6c:	4975      	ldr	r1, [pc, #468]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
 8007e6e:	68a0      	ldr	r0, [r4, #8]
 8007e70:	688a      	ldr	r2, [r1, #8]
 8007e72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007e76:	4302      	orrs	r2, r0
 8007e78:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d529      	bpl.n	8007ed2 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e7e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e80:	4b70      	ldr	r3, [pc, #448]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e82:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e84:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e86:	f000 808e 	beq.w	8007fa6 <HAL_RCC_ClockConfig+0x182>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e8a:	2a03      	cmp	r2, #3
 8007e8c:	f000 8085 	beq.w	8007f9a <HAL_RCC_ClockConfig+0x176>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007e90:	2a01      	cmp	r2, #1
 8007e92:	f000 80d1 	beq.w	8008038 <HAL_RCC_ClockConfig+0x214>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007e96:	0598      	lsls	r0, r3, #22
 8007e98:	d5e2      	bpl.n	8007e60 <HAL_RCC_ClockConfig+0x3c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e9a:	4e6a      	ldr	r6, [pc, #424]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e9c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ea0:	68b3      	ldr	r3, [r6, #8]
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007eaa:	f7fd fc1b 	bl	80056e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eae:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8007eb0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d055      	beq.n	8007f62 <HAL_RCC_ClockConfig+0x13e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d05e      	beq.n	8007f78 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d105      	bne.n	8007eca <HAL_RCC_ClockConfig+0xa6>
 8007ebe:	e066      	b.n	8007f8e <HAL_RCC_ClockConfig+0x16a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec0:	f7fd fc10 	bl	80056e4 <HAL_GetTick>
 8007ec4:	1bc0      	subs	r0, r0, r7
 8007ec6:	4540      	cmp	r0, r8
 8007ec8:	d873      	bhi.n	8007fb2 <HAL_RCC_ClockConfig+0x18e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007eca:	68b3      	ldr	r3, [r6, #8]
 8007ecc:	f013 0f0c 	tst.w	r3, #12
 8007ed0:	d1f6      	bne.n	8007ec0 <HAL_RCC_ClockConfig+0x9c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ed2:	4a5b      	ldr	r2, [pc, #364]	; (8008040 <HAL_RCC_ClockConfig+0x21c>)
 8007ed4:	6813      	ldr	r3, [r2, #0]
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	42ab      	cmp	r3, r5
 8007edc:	d906      	bls.n	8007eec <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ede:	6813      	ldr	r3, [r2, #0]
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee6:	6813      	ldr	r3, [r2, #0]
 8007ee8:	07da      	lsls	r2, r3, #31
 8007eea:	d4b9      	bmi.n	8007e60 <HAL_RCC_ClockConfig+0x3c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	0759      	lsls	r1, r3, #29
 8007ef0:	d506      	bpl.n	8007f00 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ef2:	4954      	ldr	r1, [pc, #336]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
 8007ef4:	68e0      	ldr	r0, [r4, #12]
 8007ef6:	688a      	ldr	r2, [r1, #8]
 8007ef8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007efc:	4302      	orrs	r2, r0
 8007efe:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f00:	071b      	lsls	r3, r3, #28
 8007f02:	d420      	bmi.n	8007f46 <HAL_RCC_ClockConfig+0x122>
  tmpreg = RCC->CFGR;
 8007f04:	494f      	ldr	r1, [pc, #316]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
 8007f06:	688a      	ldr	r2, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8007f08:	f002 030c 	and.w	r3, r2, #12
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d079      	beq.n	8008004 <HAL_RCC_ClockConfig+0x1e0>
 8007f10:	2b0c      	cmp	r3, #12
 8007f12:	d050      	beq.n	8007fb6 <HAL_RCC_ClockConfig+0x192>
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d044      	beq.n	8007fa2 <HAL_RCC_ClockConfig+0x17e>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007f18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007f1c:	684b      	ldr	r3, [r1, #4]
 8007f1e:	f3c3 3342 	ubfx	r3, r3, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007f22:	3301      	adds	r3, #1
 8007f24:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f26:	4b47      	ldr	r3, [pc, #284]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
 8007f28:	4a47      	ldr	r2, [pc, #284]	; (8008048 <HAL_RCC_ClockConfig+0x224>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8007f2c:	4947      	ldr	r1, [pc, #284]	; (800804c <HAL_RCC_ClockConfig+0x228>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007f32:	5cd3      	ldrb	r3, [r2, r3]
 8007f34:	4a46      	ldr	r2, [pc, #280]	; (8008050 <HAL_RCC_ClockConfig+0x22c>)
 8007f36:	fa20 f303 	lsr.w	r3, r0, r3
}
 8007f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8007f3e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f40:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 8007f42:	f7fd bb8d 	b.w	8005660 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f46:	4a3f      	ldr	r2, [pc, #252]	; (8008044 <HAL_RCC_ClockConfig+0x220>)
 8007f48:	6921      	ldr	r1, [r4, #16]
 8007f4a:	6893      	ldr	r3, [r2, #8]
 8007f4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007f50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007f54:	6093      	str	r3, [r2, #8]
 8007f56:	e7d5      	b.n	8007f04 <HAL_RCC_ClockConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f58:	f7fd fbc4 	bl	80056e4 <HAL_GetTick>
 8007f5c:	1bc3      	subs	r3, r0, r7
 8007f5e:	4543      	cmp	r3, r8
 8007f60:	d827      	bhi.n	8007fb2 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f62:	68b3      	ldr	r3, [r6, #8]
 8007f64:	f003 030c 	and.w	r3, r3, #12
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d1f5      	bne.n	8007f58 <HAL_RCC_ClockConfig+0x134>
 8007f6c:	e7b1      	b.n	8007ed2 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f6e:	f7fd fbb9 	bl	80056e4 <HAL_GetTick>
 8007f72:	1bc0      	subs	r0, r0, r7
 8007f74:	4540      	cmp	r0, r8
 8007f76:	d81c      	bhi.n	8007fb2 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f78:	68b3      	ldr	r3, [r6, #8]
 8007f7a:	f003 030c 	and.w	r3, r3, #12
 8007f7e:	2b0c      	cmp	r3, #12
 8007f80:	d1f5      	bne.n	8007f6e <HAL_RCC_ClockConfig+0x14a>
 8007f82:	e7a6      	b.n	8007ed2 <HAL_RCC_ClockConfig+0xae>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f84:	f7fd fbae 	bl	80056e4 <HAL_GetTick>
 8007f88:	1bc0      	subs	r0, r0, r7
 8007f8a:	4540      	cmp	r0, r8
 8007f8c:	d811      	bhi.n	8007fb2 <HAL_RCC_ClockConfig+0x18e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f8e:	68b3      	ldr	r3, [r6, #8]
 8007f90:	f003 030c 	and.w	r3, r3, #12
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d1f5      	bne.n	8007f84 <HAL_RCC_ClockConfig+0x160>
 8007f98:	e79b      	b.n	8007ed2 <HAL_RCC_ClockConfig+0xae>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f9a:	019f      	lsls	r7, r3, #6
 8007f9c:	f53f af7d 	bmi.w	8007e9a <HAL_RCC_ClockConfig+0x76>
 8007fa0:	e75e      	b.n	8007e60 <HAL_RCC_ClockConfig+0x3c>
      sysclockfreq = HSI_VALUE;
 8007fa2:	482c      	ldr	r0, [pc, #176]	; (8008054 <HAL_RCC_ClockConfig+0x230>)
 8007fa4:	e7bf      	b.n	8007f26 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fa6:	039b      	lsls	r3, r3, #14
 8007fa8:	f53f af77 	bmi.w	8007e9a <HAL_RCC_ClockConfig+0x76>
 8007fac:	e758      	b.n	8007e60 <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8007fae:	2001      	movs	r0, #1
}
 8007fb0:	4770      	bx	lr
          return HAL_TIMEOUT;
 8007fb2:	2003      	movs	r0, #3
 8007fb4:	e755      	b.n	8007e62 <HAL_RCC_ClockConfig+0x3e>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007fb6:	4828      	ldr	r0, [pc, #160]	; (8008058 <HAL_RCC_ClockConfig+0x234>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fb8:	688b      	ldr	r3, [r1, #8]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007fba:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8007fbe:	5c44      	ldrb	r4, [r0, r1]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007fc0:	f3c2 5281 	ubfx	r2, r2, #22, #2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fc4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007fc8:	f102 0201 	add.w	r2, r2, #1
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007fcc:	ea4f 1144 	mov.w	r1, r4, lsl #5
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fd0:	d01a      	beq.n	8008008 <HAL_RCC_ClockConfig+0x1e4>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007fd2:	1b09      	subs	r1, r1, r4
 8007fd4:	eb65 0505 	sbc.w	r5, r5, r5
 8007fd8:	01ab      	lsls	r3, r5, #6
 8007fda:	0188      	lsls	r0, r1, #6
 8007fdc:	1a40      	subs	r0, r0, r1
 8007fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fe2:	eb63 0305 	sbc.w	r3, r3, r5
 8007fe6:	00c1      	lsls	r1, r0, #3
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	190c      	adds	r4, r1, r4
 8007fec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007ff0:	f143 0300 	adc.w	r3, r3, #0
 8007ff4:	0259      	lsls	r1, r3, #9
 8007ff6:	0260      	lsls	r0, r4, #9
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	ea41 51d4 	orr.w	r1, r1, r4, lsr #23
 8007ffe:	f7f9 f84f 	bl	80010a0 <__aeabi_uldivmod>
 8008002:	e790      	b.n	8007f26 <HAL_RCC_ClockConfig+0x102>
  switch (tmpreg & RCC_CFGR_SWS)
 8008004:	4815      	ldr	r0, [pc, #84]	; (800805c <HAL_RCC_ClockConfig+0x238>)
 8008006:	e78e      	b.n	8007f26 <HAL_RCC_ClockConfig+0x102>
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008008:	1b0d      	subs	r5, r1, r4
 800800a:	eb66 0606 	sbc.w	r6, r6, r6
 800800e:	01b0      	lsls	r0, r6, #6
 8008010:	01a9      	lsls	r1, r5, #6
 8008012:	1b49      	subs	r1, r1, r5
 8008014:	ea40 6095 	orr.w	r0, r0, r5, lsr #26
 8008018:	eb60 0006 	sbc.w	r0, r0, r6
 800801c:	00c0      	lsls	r0, r0, #3
 800801e:	ea40 7051 	orr.w	r0, r0, r1, lsr #29
 8008022:	00c9      	lsls	r1, r1, #3
 8008024:	190c      	adds	r4, r1, r4
 8008026:	f140 0000 	adc.w	r0, r0, #0
 800802a:	0281      	lsls	r1, r0, #10
 800802c:	ea41 5194 	orr.w	r1, r1, r4, lsr #22
 8008030:	02a0      	lsls	r0, r4, #10
 8008032:	f7f9 f835 	bl	80010a0 <__aeabi_uldivmod>
 8008036:	e776      	b.n	8007f26 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008038:	079e      	lsls	r6, r3, #30
 800803a:	f53f af2e 	bmi.w	8007e9a <HAL_RCC_ClockConfig+0x76>
 800803e:	e70f      	b.n	8007e60 <HAL_RCC_ClockConfig+0x3c>
 8008040:	40023c00 	.word	0x40023c00
 8008044:	40023800 	.word	0x40023800
 8008048:	0800d724 	.word	0x0800d724
 800804c:	20000034 	.word	0x20000034
 8008050:	2000002c 	.word	0x2000002c
 8008054:	00f42400 	.word	0x00f42400
 8008058:	0800d73c 	.word	0x0800d73c
 800805c:	007a1200 	.word	0x007a1200

08008060 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8008062:	4a05      	ldr	r2, [pc, #20]	; (8008078 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	4905      	ldr	r1, [pc, #20]	; (800807c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008068:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800806c:	5ccb      	ldrb	r3, [r1, r3]
 800806e:	6810      	ldr	r0, [r2, #0]
}
 8008070:	40d8      	lsrs	r0, r3
 8008072:	4770      	bx	lr
 8008074:	40023800 	.word	0x40023800
 8008078:	2000002c 	.word	0x2000002c
 800807c:	0800d734 	.word	0x0800d734

08008080 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008080:	4b04      	ldr	r3, [pc, #16]	; (8008094 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8008082:	4a05      	ldr	r2, [pc, #20]	; (8008098 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	4905      	ldr	r1, [pc, #20]	; (800809c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008088:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800808c:	5ccb      	ldrb	r3, [r1, r3]
 800808e:	6810      	ldr	r0, [r2, #0]
}
 8008090:	40d8      	lsrs	r0, r3
 8008092:	4770      	bx	lr
 8008094:	40023800 	.word	0x40023800
 8008098:	2000002c 	.word	0x2000002c
 800809c:	0800d734 	.word	0x0800d734

080080a0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d049      	beq.n	8008138 <HAL_TIM_Base_Init+0x98>
{
 80080a4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80080aa:	4604      	mov	r4, r0
 80080ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d03c      	beq.n	800812e <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b6:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80080c0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c2:	d013      	beq.n	80080ec <HAL_TIM_Base_Init+0x4c>
 80080c4:	491d      	ldr	r1, [pc, #116]	; (800813c <HAL_TIM_Base_Init+0x9c>)
 80080c6:	428a      	cmp	r2, r1
 80080c8:	d010      	beq.n	80080ec <HAL_TIM_Base_Init+0x4c>
 80080ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080ce:	428a      	cmp	r2, r1
 80080d0:	d00c      	beq.n	80080ec <HAL_TIM_Base_Init+0x4c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080d2:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80080d6:	428a      	cmp	r2, r1
 80080d8:	d00c      	beq.n	80080f4 <HAL_TIM_Base_Init+0x54>
 80080da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080de:	428a      	cmp	r2, r1
 80080e0:	d008      	beq.n	80080f4 <HAL_TIM_Base_Init+0x54>
 80080e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080e6:	428a      	cmp	r2, r1
 80080e8:	d108      	bne.n	80080fc <HAL_TIM_Base_Init+0x5c>
 80080ea:	e003      	b.n	80080f4 <HAL_TIM_Base_Init+0x54>
    tmpcr1 |= Structure->CounterMode;
 80080ec:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80080f2:	430b      	orrs	r3, r1
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080f4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80080f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080fa:	430b      	orrs	r3, r1
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080fc:	2101      	movs	r1, #1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080fe:	6960      	ldr	r0, [r4, #20]
 8008100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008104:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008106:	68e0      	ldr	r0, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8008108:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800810a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800810c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800810e:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008110:	6151      	str	r1, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008112:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008116:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800811a:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800811e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
 8008122:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8008126:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  return HAL_OK;
 800812a:	2000      	movs	r0, #0
}
 800812c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800812e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8008132:	f7fd f8c5 	bl	80052c0 <HAL_TIM_Base_MspInit>
 8008136:	e7bd      	b.n	80080b4 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8008138:	2001      	movs	r0, #1
}
 800813a:	4770      	bx	lr
 800813c:	40000400 	.word	0x40000400

08008140 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008140:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8008144:	2b01      	cmp	r3, #1
 8008146:	d120      	bne.n	800818a <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8008148:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800814a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008150:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800815c:	d00a      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x34>
 800815e:	4a0d      	ldr	r2, [pc, #52]	; (8008194 <HAL_TIM_Base_Start_IT+0x54>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d007      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x34>
 8008164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <HAL_TIM_Base_Start_IT+0x34>
 800816c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008170:	4293      	cmp	r3, r2
 8008172:	d104      	bne.n	800817e <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817a:	2a06      	cmp	r2, #6
 800817c:	d007      	beq.n	800818e <HAL_TIM_Base_Start_IT+0x4e>
    __HAL_TIM_ENABLE(htim);
 800817e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8008180:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	4770      	bx	lr
    return HAL_ERROR;
 800818a:	2001      	movs	r0, #1
 800818c:	4770      	bx	lr
  return HAL_OK;
 800818e:	2000      	movs	r0, #0
}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40000400 	.word	0x40000400

08008198 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8008198:	f241 1c11 	movw	ip, #4369	; 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800819c:	6802      	ldr	r2, [r0, #0]
{
 800819e:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80081a0:	68d1      	ldr	r1, [r2, #12]
 80081a2:	f021 0101 	bic.w	r1, r1, #1
 80081a6:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80081a8:	6a11      	ldr	r1, [r2, #32]
 80081aa:	ea11 0f0c 	tst.w	r1, ip
 80081ae:	d103      	bne.n	80081b8 <HAL_TIM_Base_Stop_IT+0x20>
 80081b0:	6811      	ldr	r1, [r2, #0]
 80081b2:	f021 0101 	bic.w	r1, r1, #1
 80081b6:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80081b8:	2201      	movs	r2, #1
}
 80081ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80081bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop

080081c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80081c4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 80081c8:	2a01      	cmp	r2, #1
 80081ca:	d075      	beq.n	80082b8 <HAL_TIM_ConfigClockSource+0xf4>
{
 80081cc:	b430      	push	{r4, r5}
 80081ce:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80081d0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80081d2:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80081d4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80081d6:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80081da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80081de:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80081e0:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80081e6:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80081ea:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80081ec:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80081ee:	d065      	beq.n	80082bc <HAL_TIM_ConfigClockSource+0xf8>
 80081f0:	d831      	bhi.n	8008256 <HAL_TIM_ConfigClockSource+0x92>
 80081f2:	2a40      	cmp	r2, #64	; 0x40
 80081f4:	d048      	beq.n	8008288 <HAL_TIM_ConfigClockSource+0xc4>
 80081f6:	d921      	bls.n	800823c <HAL_TIM_ConfigClockSource+0x78>
 80081f8:	2a50      	cmp	r2, #80	; 0x50
 80081fa:	d116      	bne.n	800822a <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081fc:	684c      	ldr	r4, [r1, #4]
 80081fe:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008200:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008202:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008206:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008208:	6a04      	ldr	r4, [r0, #32]
 800820a:	f024 0401 	bic.w	r4, r4, #1
 800820e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008210:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008212:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008216:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800821a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800821c:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800821e:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008224:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008228:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800822a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800822c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800822e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8008232:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  return HAL_OK;
 8008236:	4610      	mov	r0, r2
}
 8008238:	bc30      	pop	{r4, r5}
 800823a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800823c:	2a20      	cmp	r2, #32
 800823e:	d002      	beq.n	8008246 <HAL_TIM_ConfigClockSource+0x82>
 8008240:	d91e      	bls.n	8008280 <HAL_TIM_ConfigClockSource+0xbc>
 8008242:	2a30      	cmp	r2, #48	; 0x30
 8008244:	d1f1      	bne.n	800822a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8008246:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008248:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800824c:	430a      	orrs	r2, r1
 800824e:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8008252:	6082      	str	r2, [r0, #8]
}
 8008254:	e7e9      	b.n	800822a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8008256:	2a70      	cmp	r2, #112	; 0x70
 8008258:	d049      	beq.n	80082ee <HAL_TIM_ConfigClockSource+0x12a>
 800825a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800825e:	d1e4      	bne.n	800822a <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008260:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008264:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008266:	432a      	orrs	r2, r5
 8008268:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800826a:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800826e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8008272:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008274:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008276:	6882      	ldr	r2, [r0, #8]
 8008278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800827c:	6082      	str	r2, [r0, #8]
      break;
 800827e:	e7d4      	b.n	800822a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8008280:	f032 0110 	bics.w	r1, r2, #16
 8008284:	d1d1      	bne.n	800822a <HAL_TIM_ConfigClockSource+0x66>
 8008286:	e7de      	b.n	8008246 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008288:	684c      	ldr	r4, [r1, #4]
 800828a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800828c:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800828e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008292:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008294:	6a04      	ldr	r4, [r0, #32]
 8008296:	f024 0401 	bic.w	r4, r4, #1
 800829a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800829e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082a2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80082a6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80082a8:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80082aa:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082b0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80082b4:	6082      	str	r2, [r0, #8]
}
 80082b6:	e7b8      	b.n	800822a <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80082b8:	2002      	movs	r0, #2
}
 80082ba:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082bc:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082be:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082c4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082c8:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082ca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ce:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 80082d2:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80082d4:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80082da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 80082de:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80082e0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80082e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082e6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80082ea:	6082      	str	r2, [r0, #8]
}
 80082ec:	e79d      	b.n	800822a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082ee:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80082f2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f4:	432a      	orrs	r2, r5
 80082f6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082f8:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8008300:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8008302:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008304:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008306:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800830a:	6082      	str	r2, [r0, #8]
      break;
 800830c:	e78d      	b.n	800822a <HAL_TIM_ConfigClockSource+0x66>
 800830e:	bf00      	nop

08008310 <HAL_TIM_OC_DelayElapsedCallback>:
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <HAL_TIM_IC_CaptureCallback>:
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop

0800831c <HAL_TIM_TriggerCallback>:
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop

08008320 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008320:	6803      	ldr	r3, [r0, #0]
{
 8008322:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008324:	691a      	ldr	r2, [r3, #16]
{
 8008326:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008328:	0791      	lsls	r1, r2, #30
 800832a:	d502      	bpl.n	8008332 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	0792      	lsls	r2, r2, #30
 8008330:	d450      	bmi.n	80083d4 <HAL_TIM_IRQHandler+0xb4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	0752      	lsls	r2, r2, #29
 8008336:	d502      	bpl.n	800833e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	0750      	lsls	r0, r2, #29
 800833c:	d437      	bmi.n	80083ae <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	0711      	lsls	r1, r2, #28
 8008342:	d502      	bpl.n	800834a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	0712      	lsls	r2, r2, #28
 8008348:	d422      	bmi.n	8008390 <HAL_TIM_IRQHandler+0x70>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	06d0      	lsls	r0, r2, #27
 800834e:	d502      	bpl.n	8008356 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	06d1      	lsls	r1, r2, #27
 8008354:	d40c      	bmi.n	8008370 <HAL_TIM_IRQHandler+0x50>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	07d2      	lsls	r2, r2, #31
 800835a:	d502      	bpl.n	8008362 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	07d0      	lsls	r0, r2, #31
 8008360:	d450      	bmi.n	8008404 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	0651      	lsls	r1, r2, #25
 8008366:	d502      	bpl.n	800836e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008368:	68da      	ldr	r2, [r3, #12]
 800836a:	0652      	lsls	r2, r2, #25
 800836c:	d443      	bmi.n	80083f6 <HAL_TIM_IRQHandler+0xd6>
}
 800836e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008370:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008374:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008376:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008378:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800837a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800837c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800837e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008382:	d047      	beq.n	8008414 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8008384:	f7ff ffc6 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008388:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800838a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800838c:	7622      	strb	r2, [r4, #24]
 800838e:	e7e2      	b.n	8008356 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008390:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008394:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008396:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008398:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800839a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800839c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800839e:	079b      	lsls	r3, r3, #30
 80083a0:	d044      	beq.n	800842c <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 80083a2:	f7ff ffb7 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	7622      	strb	r2, [r4, #24]
 80083ac:	e7cd      	b.n	800834a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083ae:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083b2:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083b4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083b6:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083b8:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80083ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083bc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80083c0:	d131      	bne.n	8008426 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c2:	f7ff ffa5 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff ffa6 	bl	8008318 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083cc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083ce:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d0:	7622      	strb	r2, [r4, #24]
 80083d2:	e7b4      	b.n	800833e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083d4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083d8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083da:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083dc:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	0799      	lsls	r1, r3, #30
 80083e2:	d11d      	bne.n	8008420 <HAL_TIM_IRQHandler+0x100>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e4:	f7ff ff94 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e8:	4620      	mov	r0, r4
 80083ea:	f7ff ff95 	bl	8008318 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083f0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f2:	7622      	strb	r2, [r4, #24]
 80083f4:	e79d      	b.n	8008332 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80083fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80083fe:	f7ff ff8d 	bl	800831c <HAL_TIM_TriggerCallback>
}
 8008402:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008404:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8008408:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800840a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800840c:	f7fc faee 	bl	80049ec <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	e7a6      	b.n	8008362 <HAL_TIM_IRQHandler+0x42>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008414:	f7ff ff7c 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008418:	4620      	mov	r0, r4
 800841a:	f7ff ff7d 	bl	8008318 <HAL_TIM_PWM_PulseFinishedCallback>
 800841e:	e7b3      	b.n	8008388 <HAL_TIM_IRQHandler+0x68>
          HAL_TIM_IC_CaptureCallback(htim);
 8008420:	f7ff ff78 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
 8008424:	e7e3      	b.n	80083ee <HAL_TIM_IRQHandler+0xce>
        HAL_TIM_IC_CaptureCallback(htim);
 8008426:	f7ff ff75 	bl	8008314 <HAL_TIM_IC_CaptureCallback>
 800842a:	e7cf      	b.n	80083cc <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800842c:	f7ff ff70 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008430:	4620      	mov	r0, r4
 8008432:	f7ff ff71 	bl	8008318 <HAL_TIM_PWM_PulseFinishedCallback>
 8008436:	e7b6      	b.n	80083a6 <HAL_TIM_IRQHandler+0x86>

08008438 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008438:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800843c:	2a01      	cmp	r2, #1
 800843e:	d028      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8008440:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008442:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008444:	681a      	ldr	r2, [r3, #0]
{
 8008446:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800844c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800844e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008450:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008454:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008456:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 800845a:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 800845c:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845e:	d00a      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8008460:	480d      	ldr	r0, [pc, #52]	; (8008498 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8008462:	4282      	cmp	r2, r0
 8008464:	d007      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8008466:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800846a:	4282      	cmp	r2, r0
 800846c:	d003      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800846e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8008472:	4282      	cmp	r2, r0
 8008474:	d104      	bne.n	8008480 <HAL_TIMEx_MasterConfigSynchronization+0x48>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008476:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008478:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800847c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800847e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008480:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8008482:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 8008488:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39

  return HAL_OK;
 800848c:	4610      	mov	r0, r2
}
 800848e:	bc30      	pop	{r4, r5}
 8008490:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008492:	2002      	movs	r0, #2
}
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	40000400 	.word	0x40000400

0800849c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800849c:	2800      	cmp	r0, #0
 800849e:	f000 8081 	beq.w	80085a4 <HAL_UART_Init+0x108>
{
 80084a2:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80084a8:	4604      	mov	r4, r0
 80084aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d070      	beq.n	8008594 <HAL_UART_Init+0xf8>
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084b2:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80084b6:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084b8:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80084ba:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084bc:	4302      	orrs	r2, r0
 80084be:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 80084c0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084c4:	4302      	orrs	r2, r0
 80084c6:	69e0      	ldr	r0, [r4, #28]
 80084c8:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 80084ca:	68d8      	ldr	r0, [r3, #12]
 80084cc:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 80084d0:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d2:	6919      	ldr	r1, [r3, #16]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084d4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80084da:	4329      	orrs	r1, r5
 80084dc:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 80084de:	68d9      	ldr	r1, [r3, #12]
 80084e0:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80084e4:	f021 010c 	bic.w	r1, r1, #12
 80084e8:	430a      	orrs	r2, r1
 80084ea:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084ec:	695a      	ldr	r2, [r3, #20]


  if((huart->Instance == USART1))
 80084ee:	492e      	ldr	r1, [pc, #184]	; (80085a8 <HAL_UART_Init+0x10c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80084f4:	4302      	orrs	r2, r0
  if((huart->Instance == USART1))
 80084f6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084f8:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1))
 80084fa:	d050      	beq.n	800859e <HAL_UART_Init+0x102>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7ff fdb0 	bl	8008060 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008500:	69e3      	ldr	r3, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800850a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800850e:	6863      	ldr	r3, [r4, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008510:	d027      	beq.n	8008562 <HAL_UART_Init+0xc6>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	fbb0 f3f3 	udiv	r3, r0, r3
 8008518:	2564      	movs	r5, #100	; 0x64
 800851a:	4824      	ldr	r0, [pc, #144]	; (80085ac <HAL_UART_Init+0x110>)
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	fba0 6103 	umull	r6, r1, r0, r3
 8008522:	0949      	lsrs	r1, r1, #5
 8008524:	fb05 3311 	mls	r3, r5, r1, r3
 8008528:	011b      	lsls	r3, r3, #4
 800852a:	3332      	adds	r3, #50	; 0x32
 800852c:	fba0 0303 	umull	r0, r3, r0, r3
 8008530:	0109      	lsls	r1, r1, #4
 8008532:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8008536:	6093      	str	r3, [r2, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008538:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800853a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800853c:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800853e:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008540:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008544:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008546:	6953      	ldr	r3, [r2, #20]
 8008548:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800854c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800854e:	68d3      	ldr	r3, [r2, #12]
 8008550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008554:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008556:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008558:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800855c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8008560:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	fbb0 f0f3 	udiv	r0, r0, r3
 8008568:	2364      	movs	r3, #100	; 0x64
 800856a:	4e10      	ldr	r6, [pc, #64]	; (80085ac <HAL_UART_Init+0x110>)
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	fba6 5100 	umull	r5, r1, r6, r0
 8008572:	094d      	lsrs	r5, r1, #5
 8008574:	fb03 0315 	mls	r3, r3, r5, r0
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	3332      	adds	r3, #50	; 0x32
 800857c:	fba6 1303 	umull	r1, r3, r6, r3
 8008580:	f3c3 1142 	ubfx	r1, r3, #5, #3
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800858a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800858e:	440b      	add	r3, r1
 8008590:	6093      	str	r3, [r2, #8]
 8008592:	e7d1      	b.n	8008538 <HAL_UART_Init+0x9c>
    huart->Lock = HAL_UNLOCKED;
 8008594:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8008598:	f7fc ff02 	bl	80053a0 <HAL_UART_MspInit>
 800859c:	e789      	b.n	80084b2 <HAL_UART_Init+0x16>
    pclk = HAL_RCC_GetPCLK2Freq();
 800859e:	f7ff fd6f 	bl	8008080 <HAL_RCC_GetPCLK2Freq>
 80085a2:	e7ad      	b.n	8008500 <HAL_UART_Init+0x64>
    return HAL_ERROR;
 80085a4:	2001      	movs	r0, #1
}
 80085a6:	4770      	bx	lr
 80085a8:	40013800 	.word	0x40013800
 80085ac:	51eb851f 	.word	0x51eb851f

080085b0 <HAL_UART_Transmit_DMA>:
{
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80085b4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80085b8:	2820      	cmp	r0, #32
 80085ba:	d12d      	bne.n	8008618 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 80085bc:	b351      	cbz	r1, 8008614 <HAL_UART_Transmit_DMA+0x64>
 80085be:	b34a      	cbz	r2, 8008614 <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 80085c0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80085c4:	2801      	cmp	r0, #1
 80085c6:	d027      	beq.n	8008618 <HAL_UART_Transmit_DMA+0x68>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80085ca:	f04f 0e01 	mov.w	lr, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ce:	f04f 0c21 	mov.w	ip, #33	; 0x21
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80085d4:	4f11      	ldr	r7, [pc, #68]	; (800861c <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085d6:	4e12      	ldr	r6, [pc, #72]	; (8008620 <HAL_UART_Transmit_DMA+0x70>)
    huart->TxXferCount = Size;
 80085d8:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 80085da:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085dc:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 80085de:	6221      	str	r1, [r4, #32]
    __HAL_LOCK(huart);
 80085e0:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085e4:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80085e8:	4613      	mov	r3, r2
 80085ea:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085ec:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085f0:	4e0c      	ldr	r6, [pc, #48]	; (8008624 <HAL_UART_Transmit_DMA+0x74>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80085f2:	3204      	adds	r2, #4
    huart->hdmatx->XferAbortCallback = NULL;
 80085f4:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085f6:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80085f8:	f7fd fd18 	bl	800602c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80085fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008600:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8008602:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008604:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8008606:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800860a:	695a      	ldr	r2, [r3, #20]
 800860c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008610:	615a      	str	r2, [r3, #20]
}
 8008612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8008614:	2001      	movs	r0, #1
}
 8008616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008618:	2002      	movs	r0, #2
}
 800861a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800861c:	080086c9 	.word	0x080086c9
 8008620:	080086f5 	.word	0x080086f5
 8008624:	08008705 	.word	0x08008705

08008628 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008628:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800862c:	2b20      	cmp	r3, #32
 800862e:	d13f      	bne.n	80086b0 <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 8008630:	2900      	cmp	r1, #0
 8008632:	d03b      	beq.n	80086ac <HAL_UART_Receive_DMA+0x84>
 8008634:	2a00      	cmp	r2, #0
 8008636:	d039      	beq.n	80086ac <HAL_UART_Receive_DMA+0x84>
{
 8008638:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 800863a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800863e:	4604      	mov	r4, r0
 8008640:	2b01      	cmp	r3, #1
{
 8008642:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8008644:	d036      	beq.n	80086b4 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008646:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8008648:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800864c:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8008650:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8008652:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008654:	4f19      	ldr	r7, [pc, #100]	; (80086bc <HAL_UART_Receive_DMA+0x94>)
 8008656:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008658:	4e19      	ldr	r6, [pc, #100]	; (80086c0 <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 800865c:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008660:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008662:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008664:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008668:	460a      	mov	r2, r1
 800866a:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800866c:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008670:	4e14      	ldr	r6, [pc, #80]	; (80086c4 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008672:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8008674:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008676:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008678:	f7fd fcd8 	bl	800602c <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 800867c:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	9501      	str	r5, [sp, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	9201      	str	r2, [sp, #4]
 8008686:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8008688:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 800868c:	9201      	str	r2, [sp, #4]
 800868e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008696:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008698:	695a      	ldr	r2, [r3, #20]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a0:	695a      	ldr	r2, [r3, #20]
 80086a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086a6:	615a      	str	r2, [r3, #20]
}
 80086a8:	b003      	add	sp, #12
 80086aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80086ac:	2001      	movs	r0, #1
}
 80086ae:	4770      	bx	lr
    return HAL_BUSY;
 80086b0:	2002      	movs	r0, #2
 80086b2:	4770      	bx	lr
 80086b4:	2002      	movs	r0, #2
}
 80086b6:	b003      	add	sp, #12
 80086b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ba:	bf00      	nop
 80086bc:	080087b1 	.word	0x080087b1
 80086c0:	08008795 	.word	0x08008795
 80086c4:	08008705 	.word	0x08008705

080086c8 <UART_DMATransmitCplt>:
{
 80086c8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086ca:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f013 0320 	ands.w	r3, r3, #32
 80086d4:	d10a      	bne.n	80086ec <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086d6:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 80086d8:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086da:	6953      	ldr	r3, [r2, #20]
 80086dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e0:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086e2:	68d3      	ldr	r3, [r2, #12]
 80086e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e8:	60d3      	str	r3, [r2, #12]
}
 80086ea:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80086ec:	f7fc fcbc 	bl	8005068 <HAL_UART_TxCpltCallback>
}
 80086f0:	bd08      	pop	{r3, pc}
 80086f2:	bf00      	nop

080086f4 <UART_DMATxHalfCplt>:
{
 80086f4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80086f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80086f8:	f7fc fcb4 	bl	8005064 <HAL_UART_TxHalfCpltCallback>
}
 80086fc:	bd08      	pop	{r3, pc}
 80086fe:	bf00      	nop

08008700 <HAL_UART_ErrorCallback>:
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop

08008704 <UART_DMAError>:
{
 8008704:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008706:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008708:	6803      	ldr	r3, [r0, #0]
 800870a:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800870c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8008710:	2a21      	cmp	r2, #33	; 0x21
 8008712:	d00b      	beq.n	800872c <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008714:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008716:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800871a:	2a22      	cmp	r2, #34	; 0x22
 800871c:	d016      	beq.n	800874c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800871e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008720:	f043 0310 	orr.w	r3, r3, #16
 8008724:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8008726:	f7ff ffeb 	bl	8008700 <HAL_UART_ErrorCallback>
}
 800872a:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800872c:	0609      	lsls	r1, r1, #24
 800872e:	d5f1      	bpl.n	8008714 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8008730:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8008732:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8008734:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800873c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800873e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008742:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008744:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8008748:	2a22      	cmp	r2, #34	; 0x22
 800874a:	d1e8      	bne.n	800871e <UART_DMAError+0x1a>
 800874c:	064a      	lsls	r2, r1, #25
 800874e:	d5e6      	bpl.n	800871e <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8008750:	2200      	movs	r2, #0
 8008752:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800875a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	695a      	ldr	r2, [r3, #20]
 800875e:	f022 0201 	bic.w	r2, r2, #1
 8008762:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008764:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008766:	2a01      	cmp	r2, #1
 8008768:	d103      	bne.n	8008772 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	f022 0210 	bic.w	r2, r2, #16
 8008770:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8008772:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008774:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008776:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800877a:	6303      	str	r3, [r0, #48]	; 0x30
}
 800877c:	e7cf      	b.n	800871e <UART_DMAError+0x1a>
 800877e:	bf00      	nop

08008780 <UART_DMAAbortOnError>:
{
 8008780:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8008782:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008784:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8008786:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008788:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800878a:	f7ff ffb9 	bl	8008700 <HAL_UART_ErrorCallback>
}
 800878e:	bd08      	pop	{r3, pc}

08008790 <HAL_UARTEx_RxEventCallback>:
}
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008794:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8008796:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008798:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800879a:	2b01      	cmp	r3, #1
 800879c:	d002      	beq.n	80087a4 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800879e:	f7fc fb45 	bl	8004e2c <HAL_UART_RxHalfCpltCallback>
}
 80087a2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80087a4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80087a6:	0849      	lsrs	r1, r1, #1
 80087a8:	f7ff fff2 	bl	8008790 <HAL_UARTEx_RxEventCallback>
}
 80087ac:	bd08      	pop	{r3, pc}
 80087ae:	bf00      	nop

080087b0 <UART_DMAReceiveCplt>:
{
 80087b0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087b2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f013 0320 	ands.w	r3, r3, #32
 80087bc:	d113      	bne.n	80087e6 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 80087be:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087c0:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80087c2:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087c4:	68d3      	ldr	r3, [r2, #12]
 80087c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ca:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087cc:	6953      	ldr	r3, [r2, #20]
 80087ce:	f023 0301 	bic.w	r3, r3, #1
 80087d2:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d4:	6953      	ldr	r3, [r2, #20]
 80087d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087da:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80087dc:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d009      	beq.n	80087fa <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d002      	beq.n	80087f2 <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 80087ec:	f7fc fb20 	bl	8004e30 <HAL_UART_RxCpltCallback>
}
 80087f0:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80087f4:	f7ff ffcc 	bl	8008790 <HAL_UARTEx_RxEventCallback>
}
 80087f8:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fa:	68d3      	ldr	r3, [r2, #12]
 80087fc:	f023 0310 	bic.w	r3, r3, #16
 8008800:	60d3      	str	r3, [r2, #12]
 8008802:	e7f0      	b.n	80087e6 <UART_DMAReceiveCplt+0x36>

08008804 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008804:	6883      	ldr	r3, [r0, #8]
 8008806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880a:	d03b      	beq.n	8008884 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800880c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800880e:	2b00      	cmp	r3, #0
 8008810:	d030      	beq.n	8008874 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008812:	6803      	ldr	r3, [r0, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800881c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800881e:	3301      	adds	r3, #1
 8008820:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8008822:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008824:	3b01      	subs	r3, #1
 8008826:	b29b      	uxth	r3, r3
 8008828:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800882a:	bb53      	cbnz	r3, 8008882 <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 800882c:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008830:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008832:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008834:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008836:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008838:	f021 0120 	bic.w	r1, r1, #32
 800883c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800883e:	68d1      	ldr	r1, [r2, #12]
 8008840:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008844:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008846:	6951      	ldr	r1, [r2, #20]
 8008848:	f021 0101 	bic.w	r1, r1, #1
 800884c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800884e:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008852:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008854:	2901      	cmp	r1, #1
 8008856:	d120      	bne.n	800889a <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885a:	68d1      	ldr	r1, [r2, #12]
 800885c:	f021 0110 	bic.w	r1, r1, #16
 8008860:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008862:	6811      	ldr	r1, [r2, #0]
 8008864:	06c9      	lsls	r1, r1, #27
 8008866:	d422      	bmi.n	80088ae <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008868:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800886a:	f7ff ff91 	bl	8008790 <HAL_UARTEx_RxEventCallback>
}
 800886e:	b003      	add	sp, #12
 8008870:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008874:	6903      	ldr	r3, [r0, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1cb      	bne.n	8008812 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800887a:	6803      	ldr	r3, [r0, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	7013      	strb	r3, [r2, #0]
 8008880:	e7cc      	b.n	800881c <UART_Receive_IT.part.0.isra.0+0x18>
 8008882:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008884:	6903      	ldr	r3, [r0, #16]
 8008886:	b96b      	cbnz	r3, 80088a4 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008888:	6802      	ldr	r2, [r0, #0]
 800888a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800888c:	6852      	ldr	r2, [r2, #4]
 800888e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008892:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8008896:	6283      	str	r3, [r0, #40]	; 0x28
 8008898:	e7c3      	b.n	8008822 <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800889a:	f7fc fac9 	bl	8004e30 <HAL_UART_RxCpltCallback>
}
 800889e:	b003      	add	sp, #12
 80088a0:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088a4:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	7013      	strb	r3, [r2, #0]
 80088ac:	e7b6      	b.n	800881c <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	6813      	ldr	r3, [r2, #0]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	6853      	ldr	r3, [r2, #4]
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	9b01      	ldr	r3, [sp, #4]
 80088ba:	e7d5      	b.n	8008868 <UART_Receive_IT.part.0.isra.0+0x64>

080088bc <HAL_UART_IRQHandler>:
{
 80088bc:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088be:	6803      	ldr	r3, [r0, #0]
{
 80088c0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088c2:	681a      	ldr	r2, [r3, #0]
{
 80088c4:	b083      	sub	sp, #12
  if (errorflags == RESET)
 80088c6:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088ca:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088cc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80088ce:	d14e      	bne.n	800896e <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088d0:	0695      	lsls	r5, r2, #26
 80088d2:	d502      	bpl.n	80088da <HAL_UART_IRQHandler+0x1e>
 80088d4:	068d      	lsls	r5, r1, #26
 80088d6:	f100 8090 	bmi.w	80089fa <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80088dc:	2801      	cmp	r0, #1
 80088de:	d00b      	beq.n	80088f8 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088e0:	0610      	lsls	r0, r2, #24
 80088e2:	d502      	bpl.n	80088ea <HAL_UART_IRQHandler+0x2e>
 80088e4:	060d      	lsls	r5, r1, #24
 80088e6:	f100 8092 	bmi.w	8008a0e <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088ea:	0650      	lsls	r0, r2, #25
 80088ec:	d502      	bpl.n	80088f4 <HAL_UART_IRQHandler+0x38>
 80088ee:	064a      	lsls	r2, r1, #25
 80088f0:	f100 80ab 	bmi.w	8008a4a <HAL_UART_IRQHandler+0x18e>
}
 80088f4:	b003      	add	sp, #12
 80088f6:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 80088f8:	06d0      	lsls	r0, r2, #27
 80088fa:	d5f1      	bpl.n	80088e0 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80088fc:	06cd      	lsls	r5, r1, #27
 80088fe:	d5ef      	bpl.n	80088e0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008900:	2100      	movs	r1, #0
 8008902:	9101      	str	r1, [sp, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	9201      	str	r2, [sp, #4]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	9201      	str	r2, [sp, #4]
 800890c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800890e:	695a      	ldr	r2, [r3, #20]
 8008910:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8008914:	f000 80d2 	beq.w	8008abc <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008918:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800891a:	6802      	ldr	r2, [r0, #0]
 800891c:	6852      	ldr	r2, [r2, #4]
 800891e:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8008920:	2a00      	cmp	r2, #0
 8008922:	d0e7      	beq.n	80088f4 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008924:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8008926:	4295      	cmp	r5, r2
 8008928:	d9e4      	bls.n	80088f4 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 800892a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800892c:	6982      	ldr	r2, [r0, #24]
 800892e:	2a20      	cmp	r2, #32
 8008930:	d016      	beq.n	8008960 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008938:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	695a      	ldr	r2, [r3, #20]
 800893c:	f022 0201 	bic.w	r2, r2, #1
 8008940:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008942:	695a      	ldr	r2, [r3, #20]
 8008944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008948:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800894a:	2220      	movs	r2, #32
 800894c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008950:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	f022 0210 	bic.w	r2, r2, #16
 8008958:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800895a:	f7fd fbb1 	bl	80060c0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800895e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8008960:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8008962:	4620      	mov	r0, r4
 8008964:	1a69      	subs	r1, r5, r1
 8008966:	b289      	uxth	r1, r1
 8008968:	f7ff ff12 	bl	8008790 <HAL_UARTEx_RxEventCallback>
 800896c:	e7c2      	b.n	80088f4 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800896e:	f005 0501 	and.w	r5, r5, #1
 8008972:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8008976:	4328      	orrs	r0, r5
 8008978:	d0af      	beq.n	80088da <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800897a:	07d0      	lsls	r0, r2, #31
 800897c:	d505      	bpl.n	800898a <HAL_UART_IRQHandler+0xce>
 800897e:	05c8      	lsls	r0, r1, #23
 8008980:	d503      	bpl.n	800898a <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008982:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008984:	f040 0001 	orr.w	r0, r0, #1
 8008988:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800898a:	0750      	lsls	r0, r2, #29
 800898c:	d530      	bpl.n	80089f0 <HAL_UART_IRQHandler+0x134>
 800898e:	b14d      	cbz	r5, 80089a4 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008990:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008992:	f040 0002 	orr.w	r0, r0, #2
 8008996:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008998:	0790      	lsls	r0, r2, #30
 800899a:	d503      	bpl.n	80089a4 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800899c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800899e:	f040 0004 	orr.w	r0, r0, #4
 80089a2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80089a4:	0710      	lsls	r0, r2, #28
 80089a6:	d507      	bpl.n	80089b8 <HAL_UART_IRQHandler+0xfc>
 80089a8:	f001 0020 	and.w	r0, r1, #32
 80089ac:	4328      	orrs	r0, r5
 80089ae:	d003      	beq.n	80089b8 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80089b2:	f040 0008 	orr.w	r0, r0, #8
 80089b6:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089b8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d09a      	beq.n	80088f4 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089be:	0690      	lsls	r0, r2, #26
 80089c0:	d509      	bpl.n	80089d6 <HAL_UART_IRQHandler+0x11a>
 80089c2:	068a      	lsls	r2, r1, #26
 80089c4:	d507      	bpl.n	80089d6 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089c6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80089ca:	2a22      	cmp	r2, #34	; 0x22
 80089cc:	d103      	bne.n	80089d6 <HAL_UART_IRQHandler+0x11a>
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff ff18 	bl	8008804 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089d8:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089da:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089de:	f005 0508 	and.w	r5, r5, #8
 80089e2:	4315      	orrs	r5, r2
 80089e4:	d13c      	bne.n	8008a60 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 80089e6:	4620      	mov	r0, r4
 80089e8:	f7ff fe8a 	bl	8008700 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ec:	6425      	str	r5, [r4, #64]	; 0x40
 80089ee:	e781      	b.n	80088f4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089f0:	0790      	lsls	r0, r2, #30
 80089f2:	d5d7      	bpl.n	80089a4 <HAL_UART_IRQHandler+0xe8>
 80089f4:	2d00      	cmp	r5, #0
 80089f6:	d1d1      	bne.n	800899c <HAL_UART_IRQHandler+0xe0>
 80089f8:	e7d4      	b.n	80089a4 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089fa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80089fe:	2b22      	cmp	r3, #34	; 0x22
 8008a00:	f47f af78 	bne.w	80088f4 <HAL_UART_IRQHandler+0x38>
}
 8008a04:	b003      	add	sp, #12
 8008a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a0a:	f7ff befb 	b.w	8008804 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008a12:	2a21      	cmp	r2, #33	; 0x21
 8008a14:	f47f af6e 	bne.w	80088f4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a18:	68a2      	ldr	r2, [r4, #8]
 8008a1a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008a1e:	d06e      	beq.n	8008afe <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a20:	6a22      	ldr	r2, [r4, #32]
 8008a22:	1c51      	adds	r1, r2, #1
 8008a24:	6221      	str	r1, [r4, #32]
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8008a2a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008a2c:	3a01      	subs	r2, #1
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	84e2      	strh	r2, [r4, #38]	; 0x26
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	f47f af5e 	bne.w	80088f4 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a3e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a40:	68da      	ldr	r2, [r3, #12]
 8008a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a46:	60da      	str	r2, [r3, #12]
 8008a48:	e754      	b.n	80088f4 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8008a4a:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a4c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008a4e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a54:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008a56:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8008a5a:	f7fc fb05 	bl	8005068 <HAL_UART_TxCpltCallback>
    return;
 8008a5e:	e749      	b.n	80088f4 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008a66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	f022 0201 	bic.w	r2, r2, #1
 8008a6e:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008a72:	2a01      	cmp	r2, #1
 8008a74:	d103      	bne.n	8008a7e <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	f022 0210 	bic.w	r2, r2, #16
 8008a7c:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008a80:	2120      	movs	r1, #32
 8008a82:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a86:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	0655      	lsls	r5, r2, #25
 8008a8c:	d512      	bpl.n	8008ab4 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a8e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008a90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a96:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008a98:	b160      	cbz	r0, 8008ab4 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <HAL_UART_IRQHandler+0x258>)
 8008a9c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a9e:	f7fd fb37 	bl	8006110 <HAL_DMA_Abort_IT>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	f43f af26 	beq.w	80088f4 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008aa8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008aaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8008aac:	b003      	add	sp, #12
 8008aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ab2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff fe23 	bl	8008700 <HAL_UART_ErrorCallback>
 8008aba:	e71b      	b.n	80088f4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008abc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8008abe:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ac0:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8008ac2:	b289      	uxth	r1, r1
 8008ac4:	2900      	cmp	r1, #0
 8008ac6:	f43f af15 	beq.w	80088f4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008aca:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008acc:	1a08      	subs	r0, r1, r0
 8008ace:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	f43f af0f 	beq.w	80088f4 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8008ad6:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ad8:	68d8      	ldr	r0, [r3, #12]
 8008ada:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8008ade:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae0:	6958      	ldr	r0, [r3, #20]
 8008ae2:	f020 0001 	bic.w	r0, r0, #1
 8008ae6:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aee:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008af0:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	f022 0210 	bic.w	r2, r2, #16
 8008af6:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008af8:	f7ff fe4a 	bl	8008790 <HAL_UARTEx_RxEventCallback>
 8008afc:	e6fa      	b.n	80088f4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afe:	6922      	ldr	r2, [r4, #16]
 8008b00:	2a00      	cmp	r2, #0
 8008b02:	d18d      	bne.n	8008a20 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b04:	6a22      	ldr	r2, [r4, #32]
 8008b06:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008b0a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008b0e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b10:	6222      	str	r2, [r4, #32]
 8008b12:	e78a      	b.n	8008a2a <HAL_UART_IRQHandler+0x16e>
 8008b14:	08008781 	.word	0x08008781

08008b18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008b18:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b1a:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008b1c:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8008b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 8008b24:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 8008b26:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8008b2a:	4770      	bx	lr

08008b2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008b2c:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b2e:	f244 02ff 	movw	r2, #16639	; 0x40ff
 8008b32:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40

  return HAL_OK;
}
 8008b36:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b38:	400a      	ands	r2, r1
 8008b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
 8008b3e:	4770      	bx	lr

08008b40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b40:	b084      	sub	sp, #16
 8008b42:	f10d 0c04 	add.w	ip, sp, #4
 8008b46:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8008b4a:	4603      	mov	r3, r0
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b4c:	2200      	movs	r2, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b4e:	2101      	movs	r1, #1

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 8008b50:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b52:	f8a3 1040 	strh.w	r1, [r3, #64]	; 0x40
}
 8008b56:	b004      	add	sp, #16
  USBx->CNTR = 0U;
 8008b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 8008b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8008b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop

08008b68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b68:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b6a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008b6c:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b70:	f830 c022 	ldrh.w	ip, [r0, r2, lsl #2]
{
 8008b74:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b76:	f42c 4cec 	bic.w	ip, ip, #30208	; 0x7600
 8008b7a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
 8008b7e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8008b82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  switch (ep->type)
 8008b86:	f1be 0f03 	cmp.w	lr, #3
 8008b8a:	f200 815a 	bhi.w	8008e42 <USB_ActivateEndpoint+0x2da>
 8008b8e:	e8df f00e 	tbb	[pc, lr]
 8008b92:	4e52      	.short	0x4e52
 8008b94:	0204      	.short	0x0204
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008b96:	f44c 6cc0 	orr.w	ip, ip, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8008b9a:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008b9c:	f248 0580 	movw	r5, #32896	; 0x8080
 8008ba0:	ea4c 0c05 	orr.w	ip, ip, r5
 8008ba4:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ba8:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8008bac:	4ca6      	ldr	r4, [pc, #664]	; (8008e48 <USB_ActivateEndpoint+0x2e0>)
 8008bae:	fa1f fc8c 	uxth.w	ip, ip
 8008bb2:	ea0c 0c04 	and.w	ip, ip, r4
 8008bb6:	ea4c 0c02 	orr.w	ip, ip, r2
 8008bba:	ea45 050c 	orr.w	r5, r5, ip
 8008bbe:	f823 5022 	strh.w	r5, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8008bc2:	7b0d      	ldrb	r5, [r1, #12]
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	d17e      	bne.n	8008cc6 <USB_ActivateEndpoint+0x15e>
  {
    if (ep->is_in != 0U)
 8008bc8:	784d      	ldrb	r5, [r1, #1]
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	f000 80dd 	beq.w	8008d8a <USB_ActivateEndpoint+0x222>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bd0:	88c9      	ldrh	r1, [r1, #6]
 8008bd2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8008bd6:	0849      	lsrs	r1, r1, #1
 8008bd8:	eb03 1602 	add.w	r6, r3, r2, lsl #4
 8008bdc:	0049      	lsls	r1, r1, #1
 8008bde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008be2:	b2ad      	uxth	r5, r5
 8008be4:	5371      	strh	r1, [r6, r5]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008be6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008bea:	064e      	lsls	r6, r1, #25
 8008bec:	d509      	bpl.n	8008c02 <USB_ActivateEndpoint+0x9a>
 8008bee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008bf2:	b289      	uxth	r1, r1
 8008bf4:	400c      	ands	r4, r1
 8008bf6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8008bfa:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8008bfe:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008c06:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c0a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008c0e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008c12:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8008c16:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 8008c1a:	d04d      	beq.n	8008cb8 <USB_ActivateEndpoint+0x150>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c1c:	f081 0120 	eor.w	r1, r1, #32
 8008c20:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008c24:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008c28:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8008c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c2e:	2000      	movs	r0, #0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008c30:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
      break;
 8008c34:	e7b2      	b.n	8008b9c <USB_ActivateEndpoint+0x34>
  HAL_StatusTypeDef ret = HAL_OK;
 8008c36:	4670      	mov	r0, lr
      wEpRegVal |= USB_EP_CONTROL;
 8008c38:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
      break;
 8008c3c:	e7ae      	b.n	8008b9c <USB_ActivateEndpoint+0x34>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008c42:	044d      	lsls	r5, r1, #17
 8008c44:	d509      	bpl.n	8008c5a <USB_ActivateEndpoint+0xf2>
 8008c46:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008c4a:	b289      	uxth	r1, r1
 8008c4c:	400c      	ands	r4, r1
 8008c4e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8008c52:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008c56:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c5a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008c5e:	0649      	lsls	r1, r1, #25
 8008c60:	d50d      	bpl.n	8008c7e <USB_ActivateEndpoint+0x116>
 8008c62:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008c66:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008c6a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008c6e:	0409      	lsls	r1, r1, #16
 8008c70:	0c09      	lsrs	r1, r1, #16
 8008c72:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008c76:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008c7a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c7e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8008c82:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c86:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008c8a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008c8e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8008c92:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8008c96:	bf18      	it	ne
 8008c98:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c9c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008ca0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008ca4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ca8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008cac:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8008cb0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008cb4:	0409      	lsls	r1, r1, #16
 8008cb6:	0c09      	lsrs	r1, r1, #16
 8008cb8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008cbc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008cc0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8008cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008cc6:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8008cca:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8008cce:	fa1f fc8c 	uxth.w	ip, ip
 8008cd2:	ea0c 0c04 	and.w	ip, ip, r4
 8008cd6:	f44c 4c01 	orr.w	ip, ip, #33024	; 0x8100
 8008cda:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
 8008cde:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ce2:	f8b3 c050 	ldrh.w	ip, [r3, #80]	; 0x50
 8008ce6:	890e      	ldrh	r6, [r1, #8]
 8008ce8:	fa1f fc8c 	uxth.w	ip, ip
 8008cec:	0876      	lsrs	r6, r6, #1
 8008cee:	44bc      	add	ip, r7
 8008cf0:	0076      	lsls	r6, r6, #1
 8008cf2:	f8ac 6400 	strh.w	r6, [ip, #1024]	; 0x400
 8008cf6:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8008cfa:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8008cfe:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008d02:	b2ad      	uxth	r5, r5
 8008d04:	443d      	add	r5, r7
 8008d06:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008d0a:	f8a5 c408 	strh.w	ip, [r5, #1032]	; 0x408
    if (ep->is_in == 0U)
 8008d0e:	7849      	ldrb	r1, [r1, #1]
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d194      	bne.n	8008c3e <USB_ActivateEndpoint+0xd6>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d14:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008d18:	044f      	lsls	r7, r1, #17
 8008d1a:	d509      	bpl.n	8008d30 <USB_ActivateEndpoint+0x1c8>
 8008d1c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008d20:	b289      	uxth	r1, r1
 8008d22:	400c      	ands	r4, r1
 8008d24:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8008d28:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008d2c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d30:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008d34:	064e      	lsls	r6, r1, #25
 8008d36:	d50d      	bpl.n	8008d54 <USB_ActivateEndpoint+0x1ec>
 8008d38:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008d3c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008d40:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008d44:	0409      	lsls	r1, r1, #16
 8008d46:	0c09      	lsrs	r1, r1, #16
 8008d48:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008d4c:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8008d50:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d54:	f248 0480 	movw	r4, #32896	; 0x8080
 8008d58:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008d5c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8008d60:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008d64:	0409      	lsls	r1, r1, #16
 8008d66:	0c09      	lsrs	r1, r1, #16
 8008d68:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8008d6c:	4321      	orrs	r1, r4
 8008d6e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d72:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008d76:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008d7a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8008d7e:	0409      	lsls	r1, r1, #16
 8008d80:	0c09      	lsrs	r1, r1, #16
 8008d82:	4321      	orrs	r1, r4
 8008d84:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8008d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d8a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8008d8e:	88cd      	ldrh	r5, [r1, #6]
 8008d90:	eb03 1702 	add.w	r7, r3, r2, lsl #4
 8008d94:	b2a4      	uxth	r4, r4
 8008d96:	086d      	lsrs	r5, r5, #1
 8008d98:	006d      	lsls	r5, r5, #1
 8008d9a:	443c      	add	r4, r7
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008d9c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d9e:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008da2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8008da6:	b289      	uxth	r1, r1
 8008da8:	4439      	add	r1, r7
 8008daa:	b366      	cbz	r6, 8008e06 <USB_ActivateEndpoint+0x29e>
 8008dac:	2e3e      	cmp	r6, #62	; 0x3e
 8008dae:	d83c      	bhi.n	8008e2a <USB_ActivateEndpoint+0x2c2>
 8008db0:	0874      	lsrs	r4, r6, #1
 8008db2:	07f5      	lsls	r5, r6, #31
 8008db4:	bf48      	it	mi
 8008db6:	3401      	addmi	r4, #1
 8008db8:	02a4      	lsls	r4, r4, #10
 8008dba:	b2a4      	uxth	r4, r4
 8008dbc:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dc0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008dc4:	0449      	lsls	r1, r1, #17
 8008dc6:	d50d      	bpl.n	8008de4 <USB_ActivateEndpoint+0x27c>
 8008dc8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008dcc:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8008dd0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008dd4:	0409      	lsls	r1, r1, #16
 8008dd6:	0c09      	lsrs	r1, r1, #16
 8008dd8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8008ddc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008de0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008de4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8008de8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8008dec:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8008df0:	0409      	lsls	r1, r1, #16
 8008df2:	0c09      	lsrs	r1, r1, #16
 8008df4:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8008df8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8008dfc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008e00:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8008e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008e06:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8008e0a:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8008e0e:	0424      	lsls	r4, r4, #16
 8008e10:	0c24      	lsrs	r4, r4, #16
 8008e12:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8008e16:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	; 0x40c
 8008e1a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8008e1e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8008e22:	b2a4      	uxth	r4, r4
 8008e24:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8008e28:	e7ca      	b.n	8008dc0 <USB_ActivateEndpoint+0x258>
 8008e2a:	0975      	lsrs	r5, r6, #5
 8008e2c:	06f4      	lsls	r4, r6, #27
 8008e2e:	4c07      	ldr	r4, [pc, #28]	; (8008e4c <USB_ActivateEndpoint+0x2e4>)
 8008e30:	bf08      	it	eq
 8008e32:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8008e36:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8008e3a:	b2a4      	uxth	r4, r4
 8008e3c:	f8a1 440c 	strh.w	r4, [r1, #1036]	; 0x40c
 8008e40:	e7be      	b.n	8008dc0 <USB_ActivateEndpoint+0x258>
  switch (ep->type)
 8008e42:	2001      	movs	r0, #1
 8008e44:	e6aa      	b.n	8008b9c <USB_ActivateEndpoint+0x34>
 8008e46:	bf00      	nop
 8008e48:	ffff8f8f 	.word	0xffff8f8f
 8008e4c:	ffff8000 	.word	0xffff8000

08008e50 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8008e50:	7b0b      	ldrb	r3, [r1, #12]
 8008e52:	b9cb      	cbnz	r3, 8008e88 <USB_DeactivateEndpoint+0x38>
  {
    if (ep->is_in != 0U)
 8008e54:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e56:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 80b1 	beq.w	8008fc0 <USB_DeactivateEndpoint+0x170>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e62:	0659      	lsls	r1, r3, #25
 8008e64:	f100 80c5 	bmi.w	8008ff2 <USB_DeactivateEndpoint+0x1a2>

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e74:	041b      	lsls	r3, r3, #16
 8008e76:	0c1b      	lsrs	r3, r3, #16
 8008e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8008e84:	2000      	movs	r0, #0
 8008e86:	4770      	bx	lr
    if (ep->is_in == 0U)
 8008e88:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e8a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in == 0U)
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d14b      	bne.n	8008f28 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e94:	0459      	lsls	r1, r3, #17
 8008e96:	d50d      	bpl.n	8008eb4 <USB_DeactivateEndpoint+0x64>
 8008e98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea4:	041b      	lsls	r3, r3, #16
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eb4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008eb8:	065b      	lsls	r3, r3, #25
 8008eba:	d50d      	bpl.n	8008ed8 <USB_DeactivateEndpoint+0x88>
 8008ebc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec8:	041b      	lsls	r3, r3, #16
 8008eca:	0c1b      	lsrs	r3, r3, #16
 8008ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ed4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ed8:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8008edc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee8:	041b      	lsls	r3, r3, #16
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ef4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ef8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f04:	041b      	lsls	r3, r3, #16
 8008f06:	0c1b      	lsrs	r3, r3, #16
 8008f08:	430b      	orrs	r3, r1
 8008f0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1a:	041b      	lsls	r3, r3, #16
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	430b      	orrs	r3, r1
 8008f20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008f24:	2000      	movs	r0, #0
 8008f26:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f2c:	0459      	lsls	r1, r3, #17
 8008f2e:	d50d      	bpl.n	8008f4c <USB_DeactivateEndpoint+0xfc>
 8008f30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	0c1b      	lsrs	r3, r3, #16
 8008f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f4c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f50:	065b      	lsls	r3, r3, #25
 8008f52:	d50d      	bpl.n	8008f70 <USB_DeactivateEndpoint+0x120>
 8008f54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	0c1b      	lsrs	r3, r3, #16
 8008f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f70:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8008f74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	0c1b      	lsrs	r3, r3, #16
 8008f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	0c1b      	lsrs	r3, r3, #16
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	0c1b      	lsrs	r3, r3, #16
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fc0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008fc4:	045b      	lsls	r3, r3, #17
 8008fc6:	d50d      	bpl.n	8008fe4 <USB_DeactivateEndpoint+0x194>
 8008fc8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd4:	041b      	lsls	r3, r3, #16
 8008fd6:	0c1b      	lsrs	r3, r3, #16
 8008fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fe4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff0:	e740      	b.n	8008e74 <USB_DeactivateEndpoint+0x24>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ffe:	041b      	lsls	r3, r3, #16
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800900a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800900e:	e72b      	b.n	8008e68 <USB_DeactivateEndpoint+0x18>

08009010 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009014:	784b      	ldrb	r3, [r1, #1]
{
 8009016:	4602      	mov	r2, r0
  if (ep->is_in == 1U)
 8009018:	2b01      	cmp	r3, #1
 800901a:	d06b      	beq.n	80090f4 <USB_EPStartXfer+0xe4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800901c:	7b08      	ldrb	r0, [r1, #12]
 800901e:	2800      	cmp	r0, #0
 8009020:	d037      	beq.n	8009092 <USB_EPStartXfer+0x82>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009022:	78c8      	ldrb	r0, [r1, #3]
 8009024:	2802      	cmp	r0, #2
 8009026:	f000 812d 	beq.w	8009284 <USB_EPStartXfer+0x274>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800902a:	2801      	cmp	r0, #1
 800902c:	f040 810a 	bne.w	8009244 <USB_EPStartXfer+0x234>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009030:	6988      	ldr	r0, [r1, #24]
 8009032:	690c      	ldr	r4, [r1, #16]
 8009034:	42a0      	cmp	r0, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8009036:	bf94      	ite	ls
 8009038:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 800903a:	1b05      	subhi	r5, r0, r4
 800903c:	618d      	str	r5, [r1, #24]
 800903e:	bf88      	it	hi
 8009040:	4620      	movhi	r0, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009042:	2b00      	cmp	r3, #0
 8009044:	f040 811b 	bne.w	800927e <USB_EPStartXfer+0x26e>
 8009048:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800904c:	780b      	ldrb	r3, [r1, #0]
 800904e:	b2a4      	uxth	r4, r4
 8009050:	f202 4504 	addw	r5, r2, #1028	; 0x404
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	442c      	add	r4, r5
 8009058:	2800      	cmp	r0, #0
 800905a:	f000 8251 	beq.w	8009500 <USB_EPStartXfer+0x4f0>
 800905e:	283e      	cmp	r0, #62	; 0x3e
 8009060:	f200 80f3 	bhi.w	800924a <USB_EPStartXfer+0x23a>
 8009064:	0845      	lsrs	r5, r0, #1
 8009066:	462e      	mov	r6, r5
 8009068:	f010 0001 	ands.w	r0, r0, #1
 800906c:	bf18      	it	ne
 800906e:	1c6e      	addne	r6, r5, #1
 8009070:	02b6      	lsls	r6, r6, #10
 8009072:	b2b6      	uxth	r6, r6
 8009074:	52e6      	strh	r6, [r4, r3]
 8009076:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800907a:	b2a6      	uxth	r6, r4
 800907c:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 8009080:	4434      	add	r4, r6
 8009082:	b100      	cbz	r0, 8009086 <USB_EPStartXfer+0x76>
 8009084:	3501      	adds	r5, #1
 8009086:	02ad      	lsls	r5, r5, #10
 8009088:	b2a8      	uxth	r0, r5
 800908a:	52e0      	strh	r0, [r4, r3]
 800908c:	f891 c000 	ldrb.w	ip, [r1]
 8009090:	e01d      	b.n	80090ce <USB_EPStartXfer+0xbe>
      if (ep->xfer_len > ep->maxpacket)
 8009092:	698c      	ldr	r4, [r1, #24]
 8009094:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009096:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8009098:	429c      	cmp	r4, r3
        ep->xfer_len -= len;
 800909a:	bf84      	itt	hi
 800909c:	1ae0      	subhi	r0, r4, r3
 800909e:	461c      	movhi	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80090a0:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80090a4:	6188      	str	r0, [r1, #24]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 80090ac:	012d      	lsls	r5, r5, #4
 80090ae:	4403      	add	r3, r0
 80090b0:	2c00      	cmp	r4, #0
 80090b2:	f000 80b7 	beq.w	8009224 <USB_EPStartXfer+0x214>
 80090b6:	2c3e      	cmp	r4, #62	; 0x3e
 80090b8:	f200 8129 	bhi.w	800930e <USB_EPStartXfer+0x2fe>
 80090bc:	0860      	lsrs	r0, r4, #1
 80090be:	07e4      	lsls	r4, r4, #31
 80090c0:	bf48      	it	mi
 80090c2:	3001      	addmi	r0, #1
 80090c4:	0280      	lsls	r0, r0, #10
 80090c6:	b280      	uxth	r0, r0
 80090c8:	52e8      	strh	r0, [r5, r3]
 80090ca:	f891 c000 	ldrb.w	ip, [r1]
      {
        return HAL_ERROR;
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090ce:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
  }

  return HAL_OK;
 80090d2:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090dc:	041b      	lsls	r3, r3, #16
 80090de:	0c1b      	lsrs	r3, r3, #16
 80090e0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80090e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ec:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
}
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 80090f4:	690d      	ldr	r5, [r1, #16]
 80090f6:	6988      	ldr	r0, [r1, #24]
    if (ep->doublebuffer == 0U)
 80090f8:	7b0b      	ldrb	r3, [r1, #12]
 80090fa:	42a8      	cmp	r0, r5
 80090fc:	bf28      	it	cs
 80090fe:	4628      	movcs	r0, r5
 8009100:	2b00      	cmp	r3, #0
 8009102:	d05d      	beq.n	80091c0 <USB_EPStartXfer+0x1b0>
      if (ep->type == EP_TYPE_BULK)
 8009104:	78cb      	ldrb	r3, [r1, #3]
 8009106:	2b02      	cmp	r3, #2
 8009108:	f000 810e 	beq.w	8009328 <USB_EPStartXfer+0x318>
        PCD_SET_EP_DBUF(USBx, ep->num);
 800910c:	f891 8000 	ldrb.w	r8, [r1]
        ep->xfer_len_db -= len;
 8009110:	6a0b      	ldr	r3, [r1, #32]
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009112:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 8009116:	1a1b      	subs	r3, r3, r0
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009118:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800911c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009120:	0424      	lsls	r4, r4, #16
 8009122:	0c24      	lsrs	r4, r4, #16
 8009124:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8009128:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800912c:	f822 4028 	strh.w	r4, [r2, r8, lsl #2]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009130:	f832 4028 	ldrh.w	r4, [r2, r8, lsl #2]
        ep->xfer_len_db -= len;
 8009134:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009136:	f014 0f40 	tst.w	r4, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800913a:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 800913e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8009142:	b2a6      	uxth	r6, r4
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009144:	f000 814a 	beq.w	80093dc <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009148:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800914c:	4434      	add	r4, r6
 800914e:	b286      	uxth	r6, r0
 8009150:	f824 6008 	strh.w	r6, [r4, r8]
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009154:	894c      	ldrh	r4, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009156:	3601      	adds	r6, #1
 8009158:	f502 6780 	add.w	r7, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 800915c:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800915e:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009162:	eb07 0444 	add.w	r4, r7, r4, lsl #1
  for (i = n; i != 0U; i--)
 8009166:	d008      	beq.n	800917a <USB_EPStartXfer+0x16a>
  uint8_t *pBuf = pbUsrBuf;
 8009168:	46cc      	mov	ip, r9
 800916a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  {
    temp1 = *pBuf;
 800916e:	f83c eb02 	ldrh.w	lr, [ip], #2
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
    *pdwVal = (uint16_t)temp2;
 8009172:	f824 eb04 	strh.w	lr, [r4], #4
  for (i = n; i != 0U; i--)
 8009176:	42a6      	cmp	r6, r4
 8009178:	d1f9      	bne.n	800916e <USB_EPStartXfer+0x15e>
          ep->xfer_buff += len;
 800917a:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 800917e:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 8009180:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8009182:	f0c0 81b7 	bcc.w	80094f4 <USB_EPStartXfer+0x4e4>
            ep->xfer_len_db = 0U;
 8009186:	2500      	movs	r5, #0
 8009188:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800918a:	2b00      	cmp	r3, #0
 800918c:	d036      	beq.n	80091fc <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800918e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8009192:	b285      	uxth	r5, r0
 8009194:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8009198:	4428      	add	r0, r5
 800919a:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800919c:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800919e:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091a2:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091a4:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 80091a6:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091a8:	eb07 0040 	add.w	r0, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 80091ac:	d026      	beq.n	80091fc <USB_EPStartXfer+0x1ec>
 80091ae:	eb00 0583 	add.w	r5, r0, r3, lsl #2
    temp1 = *pBuf;
 80091b2:	f834 3b02 	ldrh.w	r3, [r4], #2
    *pdwVal = (uint16_t)temp2;
 80091b6:	f820 3b04 	strh.w	r3, [r0], #4
  for (i = n; i != 0U; i--)
 80091ba:	4285      	cmp	r5, r0
 80091bc:	d1f9      	bne.n	80091b2 <USB_EPStartXfer+0x1a2>
 80091be:	e01d      	b.n	80091fc <USB_EPStartXfer+0x1ec>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80091c0:	b284      	uxth	r4, r0
 80091c2:	694b      	ldr	r3, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091c4:	88cd      	ldrh	r5, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091c6:	f104 0e01 	add.w	lr, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091ca:	f502 6080 	add.w	r0, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80091ce:	ea5f 0e5e 	movs.w	lr, lr, lsr #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  for (i = n; i != 0U; i--)
 80091d6:	bf18      	it	ne
 80091d8:	eb03 0e4e 	addne.w	lr, r3, lr, lsl #1
 80091dc:	d005      	beq.n	80091ea <USB_EPStartXfer+0x1da>
    temp1 = *pBuf;
 80091de:	f833 cb02 	ldrh.w	ip, [r3], #2
  for (i = n; i != 0U; i--)
 80091e2:	4573      	cmp	r3, lr
    *pdwVal = (uint16_t)temp2;
 80091e4:	f820 cb04 	strh.w	ip, [r0], #4
  for (i = n; i != 0U; i--)
 80091e8:	d1f9      	bne.n	80091de <USB_EPStartXfer+0x1ce>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091ea:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80091ee:	7808      	ldrb	r0, [r1, #0]
 80091f0:	b29d      	uxth	r5, r3
 80091f2:	f202 4304 	addw	r3, r2, #1028	; 0x404
 80091f6:	0100      	lsls	r0, r0, #4
 80091f8:	442b      	add	r3, r5
 80091fa:	52c4      	strh	r4, [r0, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80091fc:	7809      	ldrb	r1, [r1, #0]
  return HAL_OK;
 80091fe:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009200:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920c:	041b      	lsls	r3, r3, #16
 800920e:	0c1b      	lsrs	r3, r3, #16
 8009210:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8009214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
}
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009224:	5ae8      	ldrh	r0, [r5, r3]
 8009226:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 800922a:	0400      	lsls	r0, r0, #16
 800922c:	0c00      	lsrs	r0, r0, #16
 800922e:	52e8      	strh	r0, [r5, r3]
 8009230:	5ae8      	ldrh	r0, [r5, r3]
 8009232:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8009236:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800923a:	b280      	uxth	r0, r0
 800923c:	52e8      	strh	r0, [r5, r3]
 800923e:	f891 c000 	ldrb.w	ip, [r1]
 8009242:	e744      	b.n	80090ce <USB_EPStartXfer+0xbe>
        return HAL_ERROR;
 8009244:	2001      	movs	r0, #1
}
 8009246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800924a:	0945      	lsrs	r5, r0, #5
 800924c:	462f      	mov	r7, r5
 800924e:	f010 001f 	ands.w	r0, r0, #31
 8009252:	bf08      	it	eq
 8009254:	f105 37ff 	addeq.w	r7, r5, #4294967295
 8009258:	462e      	mov	r6, r5
 800925a:	4dbb      	ldr	r5, [pc, #748]	; (8009548 <USB_EPStartXfer+0x538>)
 800925c:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8009260:	b2ad      	uxth	r5, r5
 8009262:	52e5      	strh	r5, [r4, r3]
 8009264:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8009268:	b2a5      	uxth	r5, r4
 800926a:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 800926e:	442c      	add	r4, r5
 8009270:	b900      	cbnz	r0, 8009274 <USB_EPStartXfer+0x264>
 8009272:	3e01      	subs	r6, #1
 8009274:	48b4      	ldr	r0, [pc, #720]	; (8009548 <USB_EPStartXfer+0x538>)
 8009276:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800927a:	b280      	uxth	r0, r0
 800927c:	52e0      	strh	r0, [r4, r3]
 800927e:	f891 c000 	ldrb.w	ip, [r1]
 8009282:	e724      	b.n	80090ce <USB_EPStartXfer+0xbe>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009284:	bb13      	cbnz	r3, 80092cc <USB_EPStartXfer+0x2bc>
 8009286:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800928a:	780b      	ldrb	r3, [r1, #0]
 800928c:	b284      	uxth	r4, r0
 800928e:	f202 4004 	addw	r0, r2, #1028	; 0x404
 8009292:	4420      	add	r0, r4
 8009294:	690c      	ldr	r4, [r1, #16]
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	2c00      	cmp	r4, #0
 800929a:	f000 8109 	beq.w	80094b0 <USB_EPStartXfer+0x4a0>
 800929e:	2c3e      	cmp	r4, #62	; 0x3e
 80092a0:	f200 818e 	bhi.w	80095c0 <USB_EPStartXfer+0x5b0>
 80092a4:	0865      	lsrs	r5, r4, #1
 80092a6:	462e      	mov	r6, r5
 80092a8:	f014 0401 	ands.w	r4, r4, #1
 80092ac:	bf18      	it	ne
 80092ae:	1c6e      	addne	r6, r5, #1
 80092b0:	02b6      	lsls	r6, r6, #10
 80092b2:	b2b6      	uxth	r6, r6
 80092b4:	52c6      	strh	r6, [r0, r3]
 80092b6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80092ba:	f202 460c 	addw	r6, r2, #1036	; 0x40c
 80092be:	b280      	uxth	r0, r0
 80092c0:	4406      	add	r6, r0
 80092c2:	b104      	cbz	r4, 80092c6 <USB_EPStartXfer+0x2b6>
 80092c4:	3501      	adds	r5, #1
 80092c6:	02ad      	lsls	r5, r5, #10
 80092c8:	b2a8      	uxth	r0, r5
 80092ca:	52f0      	strh	r0, [r6, r3]
        if (ep->xfer_count != 0U)
 80092cc:	69cb      	ldr	r3, [r1, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d0d5      	beq.n	800927e <USB_EPStartXfer+0x26e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80092d2:	f244 0340 	movw	r3, #16448	; 0x4040
 80092d6:	f891 c000 	ldrb.w	ip, [r1]
 80092da:	f832 002c 	ldrh.w	r0, [r2, ip, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80092de:	ea03 0400 	and.w	r4, r3, r0
 80092e2:	4383      	bics	r3, r0
 80092e4:	d002      	beq.n	80092ec <USB_EPStartXfer+0x2dc>
 80092e6:	2c00      	cmp	r4, #0
 80092e8:	f47f aef1 	bne.w	80090ce <USB_EPStartXfer+0xbe>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80092ec:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 80092f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	0c1b      	lsrs	r3, r3, #16
 80092fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009304:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
 8009308:	f891 c000 	ldrb.w	ip, [r1]
 800930c:	e6df      	b.n	80090ce <USB_EPStartXfer+0xbe>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800930e:	0966      	lsrs	r6, r4, #5
 8009310:	06e0      	lsls	r0, r4, #27
 8009312:	488d      	ldr	r0, [pc, #564]	; (8009548 <USB_EPStartXfer+0x538>)
 8009314:	bf08      	it	eq
 8009316:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800931a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 800931e:	b280      	uxth	r0, r0
 8009320:	52e8      	strh	r0, [r5, r3]
 8009322:	f891 c000 	ldrb.w	ip, [r1]
 8009326:	e6d2      	b.n	80090ce <USB_EPStartXfer+0xbe>
        if (ep->xfer_len_db > ep->maxpacket)
 8009328:	6a0c      	ldr	r4, [r1, #32]
 800932a:	42a5      	cmp	r5, r4
 800932c:	f080 8094 	bcs.w	8009458 <USB_EPStartXfer+0x448>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009330:	780e      	ldrb	r6, [r1, #0]
          ep->xfer_len_db -= len;
 8009332:	1a24      	subs	r4, r4, r0
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009334:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009338:	ea4f 1906 	mov.w	r9, r6, lsl #4
          PCD_SET_EP_DBUF(USBx, ep->num);
 800933c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009344:	041b      	lsls	r3, r3, #16
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800934c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009350:	f822 3026 	strh.w	r3, [r2, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009354:	f832 3026 	ldrh.w	r3, [r2, r6, lsl #2]
          ep->xfer_len_db -= len;
 8009358:	620c      	str	r4, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800935a:	f013 0f40 	tst.w	r3, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800935e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009362:	b29e      	uxth	r6, r3
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009364:	f000 80f2 	beq.w	800954c <USB_EPStartXfer+0x53c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009368:	f202 430c 	addw	r3, r2, #1036	; 0x40c
 800936c:	4433      	add	r3, r6
 800936e:	fa1f fa80 	uxth.w	sl, r0
 8009372:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009376:	894e      	ldrh	r6, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009378:	f10a 0801 	add.w	r8, sl, #1
 800937c:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8009380:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009384:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009386:	eb03 0646 	add.w	r6, r3, r6, lsl #1
  for (i = n; i != 0U; i--)
 800938a:	d008      	beq.n	800939e <USB_EPStartXfer+0x38e>
  uint8_t *pBuf = pbUsrBuf;
 800938c:	46bc      	mov	ip, r7
 800938e:	eb06 0b88 	add.w	fp, r6, r8, lsl #2
    temp1 = *pBuf;
 8009392:	f83c eb02 	ldrh.w	lr, [ip], #2
    *pdwVal = (uint16_t)temp2;
 8009396:	f826 eb04 	strh.w	lr, [r6], #4
  for (i = n; i != 0U; i--)
 800939a:	45b3      	cmp	fp, r6
 800939c:	d1f9      	bne.n	8009392 <USB_EPStartXfer+0x382>
            ep->xfer_buff += len;
 800939e:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 80093a0:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 80093a2:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80093a4:	f080 8127 	bcs.w	80095f6 <USB_EPStartXfer+0x5e6>
              ep->xfer_len_db -= len;
 80093a8:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093aa:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80093ae:	620c      	str	r4, [r1, #32]
 80093b0:	b284      	uxth	r4, r0
 80093b2:	f202 4004 	addw	r0, r2, #1028	; 0x404
 80093b6:	4420      	add	r0, r4
 80093b8:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093bc:	8908      	ldrh	r0, [r1, #8]
 80093be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 80093c2:	f1b8 0f00 	cmp.w	r8, #0
 80093c6:	f43f af19 	beq.w	80091fc <USB_EPStartXfer+0x1ec>
 80093ca:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 80093ce:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 80093d2:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d1f9      	bne.n	80093ce <USB_EPStartXfer+0x3be>
 80093da:	e70f      	b.n	80091fc <USB_EPStartXfer+0x1ec>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093dc:	f202 4404 	addw	r4, r2, #1028	; 0x404
 80093e0:	4434      	add	r4, r6
 80093e2:	b286      	uxth	r6, r0
 80093e4:	f824 6008 	strh.w	r6, [r4, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093e8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80093ec:	3601      	adds	r6, #1
 80093ee:	f502 6780 	add.w	r7, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 80093f2:	0876      	lsrs	r6, r6, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093f4:	f8d1 9014 	ldr.w	r9, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093f8:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
  for (i = n; i != 0U; i--)
 80093fc:	d008      	beq.n	8009410 <USB_EPStartXfer+0x400>
  uint8_t *pBuf = pbUsrBuf;
 80093fe:	464c      	mov	r4, r9
 8009400:	eb09 0646 	add.w	r6, r9, r6, lsl #1
    temp1 = *pBuf;
 8009404:	f834 eb02 	ldrh.w	lr, [r4], #2
  for (i = n; i != 0U; i--)
 8009408:	42b4      	cmp	r4, r6
    *pdwVal = (uint16_t)temp2;
 800940a:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 800940e:	d1f9      	bne.n	8009404 <USB_EPStartXfer+0x3f4>
          ep->xfer_buff += len;
 8009410:	eb09 0400 	add.w	r4, r9, r0
          if (ep->xfer_len_db > ep->maxpacket)
 8009414:	429d      	cmp	r5, r3
          ep->xfer_buff += len;
 8009416:	614c      	str	r4, [r1, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8009418:	d36f      	bcc.n	80094fa <USB_EPStartXfer+0x4ea>
            ep->xfer_len_db = 0U;
 800941a:	2500      	movs	r5, #0
 800941c:	620d      	str	r5, [r1, #32]
          if (len > 0U)
 800941e:	2b00      	cmp	r3, #0
 8009420:	f43f aeec 	beq.w	80091fc <USB_EPStartXfer+0x1ec>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009424:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8009428:	b285      	uxth	r5, r0
 800942a:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800942e:	4428      	add	r0, r5
 8009430:	b29d      	uxth	r5, r3
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009432:	462b      	mov	r3, r5
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009434:	f820 5008 	strh.w	r5, [r0, r8]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009438:	8948      	ldrh	r0, [r1, #10]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800943a:	3301      	adds	r3, #1
  for (i = n; i != 0U; i--)
 800943c:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800943e:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  for (i = n; i != 0U; i--)
 8009442:	f43f aedb 	beq.w	80091fc <USB_EPStartXfer+0x1ec>
 8009446:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    temp1 = *pBuf;
 800944a:	f834 0b02 	ldrh.w	r0, [r4], #2
    *pdwVal = (uint16_t)temp2;
 800944e:	f827 0b04 	strh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8009452:	429f      	cmp	r7, r3
 8009454:	d1f9      	bne.n	800944a <USB_EPStartXfer+0x43a>
 8009456:	e6d1      	b.n	80091fc <USB_EPStartXfer+0x1ec>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009458:	7808      	ldrb	r0, [r1, #0]
 800945a:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
 800945e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009466:	041b      	lsls	r3, r3, #16
 8009468:	0c1b      	lsrs	r3, r3, #16
 800946a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009472:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009476:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800947a:	0100      	lsls	r0, r0, #4
 800947c:	b29d      	uxth	r5, r3
 800947e:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8009482:	442b      	add	r3, r5
 8009484:	b2a5      	uxth	r5, r4
 8009486:	521d      	strh	r5, [r3, r0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009488:	b2a0      	uxth	r0, r4
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800948a:	890d      	ldrh	r5, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800948c:	3001      	adds	r0, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800948e:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8009492:	0840      	lsrs	r0, r0, #1
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009494:	694c      	ldr	r4, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009496:	eb03 0345 	add.w	r3, r3, r5, lsl #1
  for (i = n; i != 0U; i--)
 800949a:	f43f aeaf 	beq.w	80091fc <USB_EPStartXfer+0x1ec>
 800949e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    temp1 = *pBuf;
 80094a2:	f834 5b02 	ldrh.w	r5, [r4], #2
    *pdwVal = (uint16_t)temp2;
 80094a6:	f823 5b04 	strh.w	r5, [r3], #4
  for (i = n; i != 0U; i--)
 80094aa:	4298      	cmp	r0, r3
 80094ac:	d1f9      	bne.n	80094a2 <USB_EPStartXfer+0x492>
 80094ae:	e6a5      	b.n	80091fc <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80094b0:	5ac4      	ldrh	r4, [r0, r3]
 80094b2:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80094b6:	0424      	lsls	r4, r4, #16
 80094b8:	0c24      	lsrs	r4, r4, #16
 80094ba:	52c4      	strh	r4, [r0, r3]
 80094bc:	5ac5      	ldrh	r5, [r0, r3]
 80094be:	f202 440c 	addw	r4, r2, #1036	; 0x40c
 80094c2:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80094c6:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80094ca:	b2ad      	uxth	r5, r5
 80094cc:	52c5      	strh	r5, [r0, r3]
 80094ce:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80094d2:	b285      	uxth	r5, r0
 80094d4:	4620      	mov	r0, r4
 80094d6:	4428      	add	r0, r5
 80094d8:	5ac4      	ldrh	r4, [r0, r3]
 80094da:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80094de:	0424      	lsls	r4, r4, #16
 80094e0:	0c24      	lsrs	r4, r4, #16
 80094e2:	52c4      	strh	r4, [r0, r3]
 80094e4:	5ac4      	ldrh	r4, [r0, r3]
 80094e6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80094ea:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80094ee:	b2a4      	uxth	r4, r4
 80094f0:	52c4      	strh	r4, [r0, r3]
 80094f2:	e6eb      	b.n	80092cc <USB_EPStartXfer+0x2bc>
            ep->xfer_len_db -= len;
 80094f4:	1a1d      	subs	r5, r3, r0
 80094f6:	4603      	mov	r3, r0
 80094f8:	e646      	b.n	8009188 <USB_EPStartXfer+0x178>
            ep->xfer_len_db -= len;
 80094fa:	1a1d      	subs	r5, r3, r0
 80094fc:	4603      	mov	r3, r0
 80094fe:	e78d      	b.n	800941c <USB_EPStartXfer+0x40c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009500:	5ae0      	ldrh	r0, [r4, r3]
 8009502:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8009506:	0400      	lsls	r0, r0, #16
 8009508:	0c00      	lsrs	r0, r0, #16
 800950a:	52e0      	strh	r0, [r4, r3]
 800950c:	5ae5      	ldrh	r5, [r4, r3]
 800950e:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 8009512:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8009516:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800951a:	b2ad      	uxth	r5, r5
 800951c:	52e5      	strh	r5, [r4, r3]
 800951e:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8009522:	b2a4      	uxth	r4, r4
 8009524:	4420      	add	r0, r4
 8009526:	5ac4      	ldrh	r4, [r0, r3]
 8009528:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800952c:	0424      	lsls	r4, r4, #16
 800952e:	0c24      	lsrs	r4, r4, #16
 8009530:	52c4      	strh	r4, [r0, r3]
 8009532:	5ac4      	ldrh	r4, [r0, r3]
 8009534:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8009538:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800953c:	b2a4      	uxth	r4, r4
 800953e:	52c4      	strh	r4, [r0, r3]
 8009540:	f891 c000 	ldrb.w	ip, [r1]
 8009544:	e5c3      	b.n	80090ce <USB_EPStartXfer+0xbe>
 8009546:	bf00      	nop
 8009548:	ffff8000 	.word	0xffff8000
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800954c:	f202 4304 	addw	r3, r2, #1028	; 0x404
 8009550:	4433      	add	r3, r6
 8009552:	fa1f fa80 	uxth.w	sl, r0
 8009556:	f823 a009 	strh.w	sl, [r3, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800955a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800955e:	f10a 0801 	add.w	r8, sl, #1
 8009562:	f502 6380 	add.w	r3, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8009566:	ea5f 0858 	movs.w	r8, r8, lsr #1
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800956a:	694f      	ldr	r7, [r1, #20]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800956c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
  for (i = n; i != 0U; i--)
 8009570:	d008      	beq.n	8009584 <USB_EPStartXfer+0x574>
  uint8_t *pBuf = pbUsrBuf;
 8009572:	463e      	mov	r6, r7
 8009574:	eb07 0b48 	add.w	fp, r7, r8, lsl #1
    temp1 = *pBuf;
 8009578:	f836 eb02 	ldrh.w	lr, [r6], #2
  for (i = n; i != 0U; i--)
 800957c:	45b3      	cmp	fp, r6
    *pdwVal = (uint16_t)temp2;
 800957e:	f82c eb04 	strh.w	lr, [ip], #4
  for (i = n; i != 0U; i--)
 8009582:	d1f9      	bne.n	8009578 <USB_EPStartXfer+0x568>
            ep->xfer_buff += len;
 8009584:	4407      	add	r7, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8009586:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 8009588:	614f      	str	r7, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800958a:	d23e      	bcs.n	800960a <USB_EPStartXfer+0x5fa>
              ep->xfer_len_db -= len;
 800958c:	1a24      	subs	r4, r4, r0
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800958e:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8009592:	620c      	str	r4, [r1, #32]
 8009594:	b284      	uxth	r4, r0
 8009596:	f202 400c 	addw	r0, r2, #1036	; 0x40c
 800959a:	4420      	add	r0, r4
 800959c:	f820 a009 	strh.w	sl, [r0, r9]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80095a0:	8948      	ldrh	r0, [r1, #10]
 80095a2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (i = n; i != 0U; i--)
 80095a6:	f1b8 0f00 	cmp.w	r8, #0
 80095aa:	f43f ae27 	beq.w	80091fc <USB_EPStartXfer+0x1ec>
 80095ae:	eb03 0488 	add.w	r4, r3, r8, lsl #2
    temp1 = *pBuf;
 80095b2:	f837 0b02 	ldrh.w	r0, [r7], #2
    *pdwVal = (uint16_t)temp2;
 80095b6:	f823 0b04 	strh.w	r0, [r3], #4
  for (i = n; i != 0U; i--)
 80095ba:	429c      	cmp	r4, r3
 80095bc:	d1f9      	bne.n	80095b2 <USB_EPStartXfer+0x5a2>
 80095be:	e61d      	b.n	80091fc <USB_EPStartXfer+0x1ec>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80095c0:	0965      	lsrs	r5, r4, #5
 80095c2:	462f      	mov	r7, r5
 80095c4:	f014 041f 	ands.w	r4, r4, #31
 80095c8:	bf08      	it	eq
 80095ca:	f105 37ff 	addeq.w	r7, r5, #4294967295
 80095ce:	462e      	mov	r6, r5
 80095d0:	4d13      	ldr	r5, [pc, #76]	; (8009620 <USB_EPStartXfer+0x610>)
 80095d2:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80095d6:	b2ad      	uxth	r5, r5
 80095d8:	52c5      	strh	r5, [r0, r3]
 80095da:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80095de:	f202 450c 	addw	r5, r2, #1036	; 0x40c
 80095e2:	b280      	uxth	r0, r0
 80095e4:	4405      	add	r5, r0
 80095e6:	b904      	cbnz	r4, 80095ea <USB_EPStartXfer+0x5da>
 80095e8:	3e01      	subs	r6, #1
 80095ea:	480d      	ldr	r0, [pc, #52]	; (8009620 <USB_EPStartXfer+0x610>)
 80095ec:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80095f0:	b280      	uxth	r0, r0
 80095f2:	52e8      	strh	r0, [r5, r3]
 80095f4:	e66a      	b.n	80092cc <USB_EPStartXfer+0x2bc>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80095f6:	fa1f f884 	uxth.w	r8, r4
 80095fa:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095fe:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009602:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 8009606:	2400      	movs	r4, #0
 8009608:	e6cf      	b.n	80093aa <USB_EPStartXfer+0x39a>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800960a:	fa1f f884 	uxth.w	r8, r4
 800960e:	f108 0801 	add.w	r8, r8, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009612:	fa1f fa84 	uxth.w	sl, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009616:	ea4f 0858 	mov.w	r8, r8, lsr #1
              ep->xfer_len_db = 0U;
 800961a:	2400      	movs	r4, #0
 800961c:	e7b7      	b.n	800958e <USB_EPStartXfer+0x57e>
 800961e:	bf00      	nop
 8009620:	ffff8000 	.word	0xffff8000

08009624 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8009624:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009626:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8009628:	b18b      	cbz	r3, 800964e <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800962a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800962e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	0c1b      	lsrs	r3, r3, #16
 800963a:	f083 0310 	eor.w	r3, r3, #16
 800963e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009646:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800964a:	2000      	movs	r0, #0
 800964c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800964e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965a:	041b      	lsls	r3, r3, #16
 800965c:	0c1b      	lsrs	r3, r3, #16
 800965e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800966e:	2000      	movs	r0, #0
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop

08009674 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8009674:	7b0b      	ldrb	r3, [r1, #12]
 8009676:	bb3b      	cbnz	r3, 80096c8 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8009678:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800967a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800967c:	b333      	cbz	r3, 80096cc <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800967e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009682:	065b      	lsls	r3, r3, #25
 8009684:	d50d      	bpl.n	80096a2 <USB_EPClearStall+0x2e>
 8009686:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800968a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800968e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800969a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800969e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80096a2:	78cb      	ldrb	r3, [r1, #3]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d00f      	beq.n	80096c8 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80096a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80096ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b4:	041b      	lsls	r3, r3, #16
 80096b6:	0c1b      	lsrs	r3, r3, #16
 80096b8:	f083 0320 	eor.w	r3, r3, #32
 80096bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80096c8:	2000      	movs	r0, #0
 80096ca:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80096d0:	045b      	lsls	r3, r3, #17
 80096d2:	d50d      	bpl.n	80096f0 <USB_EPClearStall+0x7c>
 80096d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80096d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e0:	041b      	lsls	r3, r3, #16
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80096f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fc:	041b      	lsls	r3, r3, #16
 80096fe:	0c1b      	lsrs	r3, r3, #16
 8009700:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8009710:	2000      	movs	r0, #0
 8009712:	4770      	bx	lr

08009714 <USB_SetDevAddress>:
  if (address == 0U)
 8009714:	b911      	cbnz	r1, 800971c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009716:	2380      	movs	r3, #128	; 0x80
 8009718:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 800971c:	2000      	movs	r0, #0
 800971e:	4770      	bx	lr

08009720 <USB_DevConnect>:
}
 8009720:	2000      	movs	r0, #0
 8009722:	4770      	bx	lr

08009724 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8009724:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
}
 8009728:	b280      	uxth	r0, r0
 800972a:	4770      	bx	lr

0800972c <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800972c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800972e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0U; i--)
 8009732:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009734:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8009738:	d007      	beq.n	800974a <USB_WritePMA+0x1e>
 800973a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800973e:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8009742:	f822 3b04 	strh.w	r3, [r2], #4
  for (i = n; i != 0U; i--)
 8009746:	4282      	cmp	r2, r0
 8009748:	d1f9      	bne.n	800973e <USB_WritePMA+0x12>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800974a:	4770      	bx	lr

0800974c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800974c:	b570      	push	{r4, r5, r6, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800974e:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (i = n; i != 0U; i--)
 8009752:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009754:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  for (i = n; i != 0U; i--)
 8009758:	d012      	beq.n	8009780 <USB_ReadPMA+0x34>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800975a:	46ae      	mov	lr, r5
  for (i = n; i != 0U; i--)
 800975c:	46b4      	mov	ip, r6
 800975e:	1c88      	adds	r0, r1, #2
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009760:	f83e 2b04 	ldrh.w	r2, [lr], #4
  for (i = n; i != 0U; i--)
 8009764:	3002      	adds	r0, #2
    temp = *(__IO uint16_t *)pdwVal;
 8009766:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009768:	0a14      	lsrs	r4, r2, #8
  for (i = n; i != 0U; i--)
 800976a:	f1bc 0c01 	subs.w	ip, ip, #1
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800976e:	f800 2c04 	strb.w	r2, [r0, #-4]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009772:	f800 4c03 	strb.w	r4, [r0, #-3]
  for (i = n; i != 0U; i--)
 8009776:	d1f3      	bne.n	8009760 <USB_ReadPMA+0x14>
    pBuf++;
 8009778:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 800977c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009780:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8009782:	bf44      	itt	mi
 8009784:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009786:	700b      	strbmi	r3, [r1, #0]
  }
}
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	bf00      	nop

0800978c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800978c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8009790:	b183      	cbz	r3, 80097b4 <USBD_CDC_EP0_RxReady+0x28>
{
 8009792:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009794:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009798:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800979c:	28ff      	cmp	r0, #255	; 0xff
 800979e:	d007      	beq.n	80097b0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	4621      	mov	r1, r4
 80097a4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80097a8:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFFU;
 80097aa:	23ff      	movs	r3, #255	; 0xff
 80097ac:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80097b0:	2000      	movs	r0, #0
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	2000      	movs	r0, #0
 80097b6:	4770      	bx	lr

080097b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80097b8:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80097ba:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgFSDesc;
}
 80097bc:	4801      	ldr	r0, [pc, #4]	; (80097c4 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80097be:	801a      	strh	r2, [r3, #0]
}
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	20000070 	.word	0x20000070

080097c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80097c8:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80097ca:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_CfgHSDesc;
}
 80097cc:	4801      	ldr	r0, [pc, #4]	; (80097d4 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80097ce:	801a      	strh	r2, [r3, #0]
}
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	200000b4 	.word	0x200000b4

080097d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80097d8:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80097da:	2243      	movs	r2, #67	; 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80097de:	801a      	strh	r2, [r3, #0]
}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	20000104 	.word	0x20000104

080097e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80097e8:	4603      	mov	r3, r0
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80097ea:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80097ee:	801a      	strh	r2, [r3, #0]
}
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	200000f8 	.word	0x200000f8

080097f8 <USBD_CDC_DataOut>:
{
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80097fc:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009800:	f000 fffc 	bl	800a7fc <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8009804:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8009808:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800980c:	b14b      	cbz	r3, 8009822 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800980e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8009812:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800981c:	4798      	blx	r3
    return USBD_OK;
 800981e:	2000      	movs	r0, #0
}
 8009820:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009822:	2002      	movs	r0, #2
}
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop

08009828 <USBD_CDC_DataIn>:
{
 8009828:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800982a:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  if(pdev->pClassData != NULL)
 800982e:	b1ed      	cbz	r5, 800986c <USBD_CDC_DataIn+0x44>
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009830:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009834:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8009838:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800983c:	b14a      	cbz	r2, 8009852 <USBD_CDC_DataIn+0x2a>
 800983e:	f8d0 4298 	ldr.w	r4, [r0, #664]	; 0x298
 8009842:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8009846:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009848:	fbb2 f3f4 	udiv	r3, r2, r4
 800984c:	fb04 2413 	mls	r4, r4, r3, r2
 8009850:	b124      	cbz	r4, 800985c <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 8009852:	2300      	movs	r3, #0
    return USBD_OK;
 8009854:	4618      	mov	r0, r3
      hcdc->TxState = 0U;
 8009856:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
}
 800985a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800985c:	4623      	mov	r3, r4
 800985e:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8009860:	f8cc 401c 	str.w	r4, [ip, #28]
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8009864:	f000 ffae 	bl	800a7c4 <USBD_LL_Transmit>
    return USBD_OK;
 8009868:	4620      	mov	r0, r4
}
 800986a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800986c:	2002      	movs	r0, #2
}
 800986e:	bd38      	pop	{r3, r4, r5, pc}

08009870 <USBD_CDC_Setup>:
{
 8009870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t ifalt = 0U;
 8009874:	2700      	movs	r7, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009876:	780b      	ldrb	r3, [r1, #0]
{
 8009878:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800987a:	f013 0660 	ands.w	r6, r3, #96	; 0x60
{
 800987e:	460c      	mov	r4, r1
 8009880:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009882:	f8d0 8290 	ldr.w	r8, [r0, #656]	; 0x290
  uint8_t ifalt = 0U;
 8009886:	f88d 7005 	strb.w	r7, [sp, #5]
  uint16_t status_info = 0U;
 800988a:	f8ad 7006 	strh.w	r7, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800988e:	d013      	beq.n	80098b8 <USBD_CDC_Setup+0x48>
 8009890:	2e20      	cmp	r6, #32
 8009892:	d117      	bne.n	80098c4 <USBD_CDC_Setup+0x54>
    if (req->wLength)
 8009894:	88ce      	ldrh	r6, [r1, #6]
 8009896:	b1f6      	cbz	r6, 80098d6 <USBD_CDC_Setup+0x66>
      if (req->bmRequest & 0x80U)
 8009898:	061b      	lsls	r3, r3, #24
 800989a:	d53f      	bpl.n	800991c <USBD_CDC_Setup+0xac>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800989c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80098a0:	4632      	mov	r2, r6
 80098a2:	4641      	mov	r1, r8
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	7860      	ldrb	r0, [r4, #1]
 80098a8:	4798      	blx	r3
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098aa:	4641      	mov	r1, r8
 80098ac:	4628      	mov	r0, r5
 80098ae:	88e2      	ldrh	r2, [r4, #6]
  uint8_t ret = USBD_OK;
 80098b0:	463e      	mov	r6, r7
          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80098b2:	f000 fcd5 	bl	800a260 <USBD_CtlSendData>
 80098b6:	e00a      	b.n	80098ce <USBD_CDC_Setup+0x5e>
    switch (req->bRequest)
 80098b8:	784b      	ldrb	r3, [r1, #1]
 80098ba:	2b0a      	cmp	r3, #10
 80098bc:	d01f      	beq.n	80098fe <USBD_CDC_Setup+0x8e>
 80098be:	2b0b      	cmp	r3, #11
 80098c0:	d027      	beq.n	8009912 <USBD_CDC_Setup+0xa2>
 80098c2:	b193      	cbz	r3, 80098ea <USBD_CDC_Setup+0x7a>
      USBD_CtlError (pdev, req);
 80098c4:	4621      	mov	r1, r4
 80098c6:	4628      	mov	r0, r5
 80098c8:	f000 fc94 	bl	800a1f4 <USBD_CtlError>
      ret = USBD_FAIL;
 80098cc:	2602      	movs	r6, #2
}
 80098ce:	4630      	mov	r0, r6
 80098d0:	b002      	add	sp, #8
 80098d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80098d6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80098da:	4632      	mov	r2, r6
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	7848      	ldrb	r0, [r1, #1]
 80098e0:	4798      	blx	r3
}
 80098e2:	4630      	mov	r0, r6
 80098e4:	b002      	add	sp, #8
 80098e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ea:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d1e8      	bne.n	80098c4 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80098f2:	2202      	movs	r2, #2
 80098f4:	f10d 0106 	add.w	r1, sp, #6
 80098f8:	f000 fcb2 	bl	800a260 <USBD_CtlSendData>
 80098fc:	e7e7      	b.n	80098ce <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fe:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009902:	2b03      	cmp	r3, #3
 8009904:	d1de      	bne.n	80098c4 <USBD_CDC_Setup+0x54>
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009906:	2201      	movs	r2, #1
 8009908:	f10d 0105 	add.w	r1, sp, #5
 800990c:	f000 fca8 	bl	800a260 <USBD_CtlSendData>
 8009910:	e7dd      	b.n	80098ce <USBD_CDC_Setup+0x5e>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009912:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009916:	2b03      	cmp	r3, #3
 8009918:	d0d9      	beq.n	80098ce <USBD_CDC_Setup+0x5e>
 800991a:	e7d3      	b.n	80098c4 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 800991c:	784b      	ldrb	r3, [r1, #1]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800991e:	4632      	mov	r2, r6
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009920:	f888 6201 	strb.w	r6, [r8, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009924:	4641      	mov	r1, r8
        hcdc->CmdOpCode = req->bRequest;
 8009926:	f888 3200 	strb.w	r3, [r8, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800992a:	f000 fcb1 	bl	800a290 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800992e:	463e      	mov	r6, r7
 8009930:	e7cd      	b.n	80098ce <USBD_CDC_Setup+0x5e>
 8009932:	bf00      	nop

08009934 <USBD_CDC_DeInit>:
{
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009938:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800993a:	2181      	movs	r1, #129	; 0x81
 800993c:	f000 fef6 	bl	800a72c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009940:	2101      	movs	r1, #1
 8009942:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009944:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009946:	f000 fef1 	bl	800a72c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800994a:	2182      	movs	r1, #130	; 0x82
 800994c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800994e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009952:	f000 feeb 	bl	800a72c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8009956:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800995a:	6425      	str	r5, [r4, #64]	; 0x40
  if(pdev->pClassData != NULL)
 800995c:	b14b      	cbz	r3, 8009972 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800995e:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009966:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 800996a:	f000 ff4f 	bl	800a80c <USBD_static_free>
    pdev->pClassData = NULL;
 800996e:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8009972:	2000      	movs	r0, #0
 8009974:	bd38      	pop	{r3, r4, r5, pc}
 8009976:	bf00      	nop

08009978 <USBD_CDC_Init>:
{
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800997c:	7c03      	ldrb	r3, [r0, #16]
{
 800997e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009980:	bbbb      	cbnz	r3, 80099f2 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009986:	2202      	movs	r2, #2
 8009988:	2181      	movs	r1, #129	; 0x81
 800998a:	f000 febf 	bl	800a70c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800998e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009990:	f44f 7300 	mov.w	r3, #512	; 0x200
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009994:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009996:	4629      	mov	r1, r5
 8009998:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800999a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800999c:	4620      	mov	r0, r4
 800999e:	f000 feb5 	bl	800a70c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099a2:	2308      	movs	r3, #8
 80099a4:	2203      	movs	r2, #3
 80099a6:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099a8:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fead 	bl	800a70c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80099b2:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80099b6:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80099b8:	f000 ff24 	bl	800a804 <USBD_static_malloc>
 80099bc:	4605      	mov	r5, r0
 80099be:	f8c4 0290 	str.w	r0, [r4, #656]	; 0x290
  if(pdev->pClassData == NULL)
 80099c2:	b348      	cbz	r0, 8009a18 <USBD_CDC_Init+0xa0>
    hcdc->TxState = 0U;
 80099c4:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80099c8:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4798      	blx	r3
    hcdc->TxState = 0U;
 80099d0:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 80099d4:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80099d8:	7c26      	ldrb	r6, [r4, #16]
 80099da:	b196      	cbz	r6, 8009a02 <USBD_CDC_Init+0x8a>
  uint8_t ret = 0U;
 80099dc:	4646      	mov	r6, r8
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099de:	2340      	movs	r3, #64	; 0x40
 80099e0:	4639      	mov	r1, r7
 80099e2:	4620      	mov	r0, r4
 80099e4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80099e8:	f000 fefa 	bl	800a7e0 <USBD_LL_PrepareReceive>
}
 80099ec:	4630      	mov	r0, r6
 80099ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	2202      	movs	r2, #2
 80099f6:	2181      	movs	r1, #129	; 0x81
 80099f8:	f000 fe88 	bl	800a70c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099fc:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	e7c8      	b.n	8009994 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a06:	4639      	mov	r1, r7
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8009a0e:	f000 fee7 	bl	800a7e0 <USBD_LL_PrepareReceive>
}
 8009a12:	4630      	mov	r0, r6
 8009a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 8009a18:	463e      	mov	r6, r7
}
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8009a20:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8009a22:	b119      	cbz	r1, 8009a2c <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData= fops;
    ret = USBD_OK;
 8009a24:	2000      	movs	r0, #0
    pdev->pUserData= fops;
 8009a26:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009a2a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8009a2c:	2002      	movs	r0, #2
  }

  return ret;
}
 8009a2e:	4770      	bx	lr

08009a30 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009a30:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009a32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8009a36:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8009a38:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop

08009a44 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8009a44:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8009a46:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290

  return USBD_OK;
}
 8009a4a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8009a4c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop

08009a54 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009a54:	f8d0 2290 	ldr.w	r2, [r0, #656]	; 0x290
{
 8009a58:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8009a5a:	b19a      	cbz	r2, 8009a84 <USBD_CDC_ReceivePacket+0x30>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009a5c:	7c04      	ldrb	r4, [r0, #16]
 8009a5e:	b144      	cbz	r4, 8009a72 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009a60:	2400      	movs	r4, #0
      USBD_LL_PrepareReceive(pdev,
 8009a62:	2340      	movs	r3, #64	; 0x40
 8009a64:	2101      	movs	r1, #1
 8009a66:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009a6a:	f000 feb9 	bl	800a7e0 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8009a6e:	4620      	mov	r0, r4
 8009a70:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8009a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a76:	2101      	movs	r1, #1
 8009a78:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8009a7c:	f000 feb0 	bl	800a7e0 <USBD_LL_PrepareReceive>
}
 8009a80:	4620      	mov	r0, r4
 8009a82:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8009a84:	2402      	movs	r4, #2
}
 8009a86:	4620      	mov	r0, r4
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	bf00      	nop

08009a8c <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009a8c:	b188      	cbz	r0, 8009ab2 <USBD_Init+0x26>
{
 8009a8e:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8009a90:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009a94:	b113      	cbz	r3, 8009a9c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009a9c:	b109      	cbz	r1, 8009aa2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8009a9e:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009aa2:	2301      	movs	r3, #1
  pdev->id = id;
 8009aa4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009aa6:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009aaa:	f000 fddd 	bl	800a668 <USBD_LL_Init>

  return USBD_OK;
 8009aae:	2000      	movs	r0, #0
}
 8009ab0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8009ab2:	2002      	movs	r0, #2
}
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop

08009ab8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ab8:	4603      	mov	r3, r0
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8009aba:	b119      	cbz	r1, 8009ac4 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 8009abc:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8009abe:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
    status = USBD_OK;
 8009ac2:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009ac4:	2002      	movs	r0, #2
  }

  return status;
}
 8009ac6:	4770      	bx	lr

08009ac8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009ac8:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009aca:	f000 fe11 	bl	800a6f0 <USBD_LL_Start>

  return USBD_OK;
}
 8009ace:	2000      	movs	r0, #0
 8009ad0:	bd08      	pop	{r3, pc}
 8009ad2:	bf00      	nop

08009ad4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ad4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8009ad6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009ada:	b11b      	cbz	r3, 8009ae4 <USBD_SetClassConfig+0x10>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4798      	blx	r3
 8009ae0:	b900      	cbnz	r0, 8009ae4 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8009ae2:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009ae4:	2002      	movs	r0, #2
}
 8009ae6:	bd08      	pop	{r3, pc}

08009ae8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ae8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009aea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	4798      	blx	r3
  return USBD_OK;
}
 8009af2:	2000      	movs	r0, #0
 8009af4:	bd08      	pop	{r3, pc}
 8009af6:	bf00      	nop

08009af8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009afc:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 fb63 	bl	800a1cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b06:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8009b08:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286

  switch (pdev->request.bmRequest & 0x1FU)
 8009b0c:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_data_len = pdev->request.wLength;
 8009b10:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
 8009b14:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8009b18:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 8009b1a:	f8c4 226c 	str.w	r2, [r4, #620]	; 0x26c
  switch (pdev->request.bmRequest & 0x1FU)
 8009b1e:	d009      	beq.n	8009b34 <USBD_LL_SetupStage+0x3c>
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d013      	beq.n	8009b4c <USBD_LL_SetupStage+0x54>
 8009b24:	b163      	cbz	r3, 8009b40 <USBD_LL_SetupStage+0x48>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b26:	4620      	mov	r0, r4
 8009b28:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009b2c:	f000 fe0c 	bl	800a748 <USBD_LL_StallEP>
    break;
  }

  return USBD_OK;
}
 8009b30:	2000      	movs	r0, #0
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8009b34:	4629      	mov	r1, r5
 8009b36:	4620      	mov	r0, r4
 8009b38:	f000 fa78 	bl	800a02c <USBD_StdItfReq>
}
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdDevReq (pdev, &pdev->request);
 8009b40:	4629      	mov	r1, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f8f8 	bl	8009d38 <USBD_StdDevReq>
}
 8009b48:	2000      	movs	r0, #0
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdEPReq(pdev, &pdev->request);
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 faa0 	bl	800a094 <USBD_StdEPReq>
}
 8009b54:	2000      	movs	r0, #0
 8009b56:	bd38      	pop	{r3, r4, r5, pc}

08009b58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4605      	mov	r5, r0
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8009b5c:	b969      	cbnz	r1, 8009b7a <USBD_LL_DataOutStage+0x22>
 8009b5e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b60:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8009b64:	2a03      	cmp	r2, #3
 8009b66:	d015      	beq.n	8009b94 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009b68:	2a05      	cmp	r2, #5
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	d10e      	bne.n	8009b8c <USBD_LL_DataOutStage+0x34>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b6e:	f8c5 126c 	str.w	r1, [r5, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009b72:	f000 fde9 	bl	800a748 <USBD_LL_StallEP>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8009b76:	4620      	mov	r0, r4
}
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
  else if((pdev->pClass->DataOut != NULL) &&
 8009b7a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	b133      	cbz	r3, 8009b90 <USBD_LL_DataOutStage+0x38>
 8009b82:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8009b86:	2a03      	cmp	r2, #3
 8009b88:	d102      	bne.n	8009b90 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8009b8a:	4798      	blx	r3
  return USBD_OK;
 8009b8c:	2000      	movs	r0, #0
}
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8009b90:	2002      	movs	r0, #2
}
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
      if(pep->rem_length > pep->maxpacket)
 8009b94:	e9d0 1253 	ldrd	r1, r2, [r0, #332]	; 0x14c
 8009b98:	4291      	cmp	r1, r2
 8009b9a:	d90c      	bls.n	8009bb6 <USBD_LL_DataOutStage+0x5e>
        pep->rem_length -=  pep->maxpacket;
 8009b9c:	1a89      	subs	r1, r1, r2
        USBD_CtlContinueRx (pdev,
 8009b9e:	428a      	cmp	r2, r1
 8009ba0:	bf88      	it	hi
 8009ba2:	b28a      	uxthhi	r2, r1
        pep->rem_length -=  pep->maxpacket;
 8009ba4:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 8009ba8:	bf98      	it	ls
 8009baa:	b292      	uxthls	r2, r2
 8009bac:	4619      	mov	r1, r3
 8009bae:	f000 fb7d 	bl	800a2ac <USBD_CtlContinueRx>
  return USBD_OK;
 8009bb2:	2000      	movs	r0, #0
}
 8009bb4:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009bb6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	b11b      	cbz	r3, 8009bc6 <USBD_LL_DataOutStage+0x6e>
 8009bbe:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8009bc2:	2a03      	cmp	r2, #3
 8009bc4:	d004      	beq.n	8009bd0 <USBD_LL_DataOutStage+0x78>
        USBD_CtlSendStatus(pdev);
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 fb7a 	bl	800a2c0 <USBD_CtlSendStatus>
  return USBD_OK;
 8009bcc:	2000      	movs	r0, #0
}
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
          pdev->pClass->EP0_RxReady(pdev);
 8009bd0:	4798      	blx	r3
 8009bd2:	e7f8      	b.n	8009bc6 <USBD_LL_DataOutStage+0x6e>

08009bd4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8009bd8:	b961      	cbnz	r1, 8009bf4 <USBD_LL_DataInStage+0x20>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009bda:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d015      	beq.n	8009c0e <USBD_LL_DataInStage+0x3a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009be2:	f033 0304 	bics.w	r3, r3, #4
 8009be6:	d02e      	beq.n	8009c46 <USBD_LL_DataInStage+0x72>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009be8:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d031      	beq.n	8009c54 <USBD_LL_DataInStage+0x80>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8009bf0:	2000      	movs	r0, #0
}
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
  else if((pdev->pClass->DataIn != NULL) &&
 8009bf4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	b133      	cbz	r3, 8009c0a <USBD_LL_DataInStage+0x36>
 8009bfc:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8009c00:	2a03      	cmp	r2, #3
 8009c02:	d102      	bne.n	8009c0a <USBD_LL_DataInStage+0x36>
    pdev->pClass->DataIn(pdev, epnum);
 8009c04:	4798      	blx	r3
  return USBD_OK;
 8009c06:	2000      	movs	r0, #0
}
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8009c0a:	2002      	movs	r0, #2
}
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
      if(pep->rem_length > pep->maxpacket)
 8009c0e:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8009c12:	429e      	cmp	r6, r3
 8009c14:	d833      	bhi.n	8009c7e <USBD_LL_DataInStage+0xaa>
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009c16:	69c2      	ldr	r2, [r0, #28]
 8009c18:	fbb2 f5f3 	udiv	r5, r2, r3
 8009c1c:	fb03 2515 	mls	r5, r3, r5, r2
 8009c20:	b9ed      	cbnz	r5, 8009c5e <USBD_LL_DataInStage+0x8a>
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d81b      	bhi.n	8009c5e <USBD_LL_DataInStage+0x8a>
           (pep->total_length >= pep->maxpacket) &&
 8009c26:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d217      	bcs.n	8009c5e <USBD_LL_DataInStage+0x8a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c2e:	462a      	mov	r2, r5
 8009c30:	f000 fb24 	bl	800a27c <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009c34:	462b      	mov	r3, r5
 8009c36:	462a      	mov	r2, r5
 8009c38:	4629      	mov	r1, r5
 8009c3a:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8009c3c:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009c40:	f000 fdce 	bl	800a7e0 <USBD_LL_PrepareReceive>
 8009c44:	e7d0      	b.n	8009be8 <USBD_LL_DataInStage+0x14>
        USBD_LL_StallEP(pdev, 0x80U);
 8009c46:	2180      	movs	r1, #128	; 0x80
 8009c48:	f000 fd7e 	bl	800a748 <USBD_LL_StallEP>
    if (pdev->dev_test_mode == 1U)
 8009c4c:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d1cd      	bne.n	8009bf0 <USBD_LL_DataInStage+0x1c>
      pdev->dev_test_mode = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
  return USBD_OK;
 8009c5a:	4618      	mov	r0, r3
}
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009c5e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	b11b      	cbz	r3, 8009c6e <USBD_LL_DataInStage+0x9a>
 8009c66:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8009c6a:	2a03      	cmp	r2, #3
 8009c6c:	d015      	beq.n	8009c9a <USBD_LL_DataInStage+0xc6>
          USBD_LL_StallEP(pdev, 0x80U);
 8009c6e:	2180      	movs	r1, #128	; 0x80
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fd69 	bl	800a748 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fb2e 	bl	800a2d8 <USBD_CtlReceiveStatus>
 8009c7c:	e7b4      	b.n	8009be8 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8009c7e:	460d      	mov	r5, r1
 8009c80:	1af3      	subs	r3, r6, r3
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009c82:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8009c84:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	f000 faf8 	bl	800a27c <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4629      	mov	r1, r5
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fda4 	bl	800a7e0 <USBD_LL_PrepareReceive>
 8009c98:	e7a6      	b.n	8009be8 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	4798      	blx	r3
 8009c9e:	e7e6      	b.n	8009c6e <USBD_LL_DataInStage+0x9a>

08009ca0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009ca0:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ca2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ca4:	2640      	movs	r6, #64	; 0x40
{
 8009ca6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ca8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009caa:	4611      	mov	r1, r2
 8009cac:	4633      	mov	r3, r6
 8009cae:	f000 fd2d 	bl	800a70c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cb2:	4633      	mov	r3, r6
 8009cb4:	2180      	movs	r1, #128	; 0x80
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cba:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cbe:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cc2:	f000 fd23 	bl	800a70c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cc6:	2100      	movs	r1, #0
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8009cc8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ccc:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cce:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd0:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8009cd4:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 8009cd8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cda:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 8009cde:	b123      	cbz	r3, 8009cea <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ce0:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8009cea:	2000      	movs	r0, #0
 8009cec:	bd70      	pop	{r4, r5, r6, pc}
 8009cee:	bf00      	nop

08009cf0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009cf0:	4603      	mov	r3, r0
  pdev->dev_speed = speed;
  return USBD_OK;
}
 8009cf2:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8009cf4:	7419      	strb	r1, [r3, #16]
}
 8009cf6:	4770      	bx	lr

08009cf8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009cf8:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009cfa:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 8009cfc:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
}
 8009d00:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d02:	f883 1274 	strb.w	r1, [r3, #628]	; 0x274
  pdev->dev_old_state =  pdev->dev_state;
 8009d06:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
}
 8009d0a:	4770      	bx	lr

08009d0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009d0c:	4603      	mov	r3, r0
  pdev->dev_state = pdev->dev_old_state;
 8009d0e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
  return USBD_OK;
}
 8009d12:	2000      	movs	r0, #0
  pdev->dev_state = pdev->dev_old_state;
 8009d14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop

08009d1c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d1c:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8009d20:	2a03      	cmp	r2, #3
 8009d22:	d001      	beq.n	8009d28 <USBD_LL_SOF+0xc>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8009d24:	2000      	movs	r0, #0
 8009d26:	4770      	bx	lr
{
 8009d28:	b508      	push	{r3, lr}
    if(pdev->pClass->SOF != NULL)
 8009d2a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	b103      	cbz	r3, 8009d34 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8009d32:	4798      	blx	r3
}
 8009d34:	2000      	movs	r0, #0
 8009d36:	bd08      	pop	{r3, pc}

08009d38 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009d38:	b530      	push	{r4, r5, lr}
 8009d3a:	780b      	ldrb	r3, [r1, #0]
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d42:	2b20      	cmp	r3, #32
{
 8009d44:	4604      	mov	r4, r0
 8009d46:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d48:	d00d      	beq.n	8009d66 <USBD_StdDevReq+0x2e>
 8009d4a:	2b40      	cmp	r3, #64	; 0x40
 8009d4c:	d00b      	beq.n	8009d66 <USBD_StdDevReq+0x2e>
 8009d4e:	b19b      	cbz	r3, 8009d78 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8009d50:	2180      	movs	r1, #128	; 0x80
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fcf8 	bl	800a748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fcf4 	bl	800a748 <USBD_LL_StallEP>
}
 8009d60:	2000      	movs	r0, #0
 8009d62:	b003      	add	sp, #12
 8009d64:	bd30      	pop	{r4, r5, pc}
    pdev->pClass->Setup(pdev, req);
 8009d66:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	4798      	blx	r3
}
 8009d72:	2000      	movs	r0, #0
 8009d74:	b003      	add	sp, #12
 8009d76:	bd30      	pop	{r4, r5, pc}
    switch (req->bRequest)
 8009d78:	784b      	ldrb	r3, [r1, #1]
 8009d7a:	2b09      	cmp	r3, #9
 8009d7c:	d8e8      	bhi.n	8009d50 <USBD_StdDevReq+0x18>
 8009d7e:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <USBD_StdDevReq+0x4c>)
 8009d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d84:	08009ddf 	.word	0x08009ddf
 8009d88:	08009e0b 	.word	0x08009e0b
 8009d8c:	08009d51 	.word	0x08009d51
 8009d90:	08009e29 	.word	0x08009e29
 8009d94:	08009d51 	.word	0x08009d51
 8009d98:	08009e31 	.word	0x08009e31
 8009d9c:	08009e69 	.word	0x08009e69
 8009da0:	08009d51 	.word	0x08009d51
 8009da4:	08009e99 	.word	0x08009e99
 8009da8:	08009dad 	.word	0x08009dad
  cfgidx = (uint8_t)(req->wValue);
 8009dac:	7889      	ldrb	r1, [r1, #2]
 8009dae:	4d9e      	ldr	r5, [pc, #632]	; (800a028 <USBD_StdDevReq+0x2f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009db0:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8009db2:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009db4:	d8cc      	bhi.n	8009d50 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8009db6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	f000 8111 	beq.w	8009fe2 <USBD_StdDevReq+0x2aa>
 8009dc0:	2b03      	cmp	r3, #3
 8009dc2:	f000 80ff 	beq.w	8009fc4 <USBD_StdDevReq+0x28c>
  USBD_LL_StallEP(pdev , 0x80U);
 8009dc6:	2180      	movs	r1, #128	; 0x80
 8009dc8:	f000 fcbe 	bl	800a748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 fcba 	bl	800a748 <USBD_LL_StallEP>
      USBD_ClrClassConfig(pdev, cfgidx);
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	7829      	ldrb	r1, [r5, #0]
 8009dd8:	f7ff fe86 	bl	8009ae8 <USBD_ClrClassConfig>
      break;
 8009ddc:	e7c0      	b.n	8009d60 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8009dde:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009de2:	3b01      	subs	r3, #1
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d8b3      	bhi.n	8009d50 <USBD_StdDevReq+0x18>
    if(req->wLength != 0x2U)
 8009de8:	88cb      	ldrh	r3, [r1, #6]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d1b0      	bne.n	8009d50 <USBD_StdDevReq+0x18>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dee:	2201      	movs	r2, #1
    if (pdev->dev_remote_wakeup)
 8009df0:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009df4:	60c2      	str	r2, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8009df6:	b10b      	cbz	r3, 8009dfc <USBD_StdDevReq+0xc4>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f104 010c 	add.w	r1, r4, #12
 8009e04:	f000 fa2c 	bl	800a260 <USBD_CtlSendData>
    break;
 8009e08:	e7aa      	b.n	8009d60 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8009e0a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d89d      	bhi.n	8009d50 <USBD_StdDevReq+0x18>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e14:	884b      	ldrh	r3, [r1, #2]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d1a2      	bne.n	8009d60 <USBD_StdDevReq+0x28>
      pdev->dev_remote_wakeup = 0U;
 8009e1a:	2300      	movs	r3, #0
      USBD_CtlSendStatus(pdev);
 8009e1c:	4620      	mov	r0, r4
      pdev->dev_remote_wakeup = 0U;
 8009e1e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8009e22:	f000 fa4d 	bl	800a2c0 <USBD_CtlSendStatus>
 8009e26:	e79b      	b.n	8009d60 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e28:	884b      	ldrh	r3, [r1, #2]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d198      	bne.n	8009d60 <USBD_StdDevReq+0x28>
 8009e2e:	e7f5      	b.n	8009e1c <USBD_StdDevReq+0xe4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e30:	888b      	ldrh	r3, [r1, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d18c      	bne.n	8009d50 <USBD_StdDevReq+0x18>
 8009e36:	88cb      	ldrh	r3, [r1, #6]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d189      	bne.n	8009d50 <USBD_StdDevReq+0x18>
 8009e3c:	884d      	ldrh	r5, [r1, #2]
 8009e3e:	2d7f      	cmp	r5, #127	; 0x7f
 8009e40:	d886      	bhi.n	8009d50 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e42:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d082      	beq.n	8009d50 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e4a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8009e4c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e50:	f000 fcaa 	bl	800a7a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 fa33 	bl	800a2c0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8009e5a:	2d00      	cmp	r5, #0
 8009e5c:	f000 80df 	beq.w	800a01e <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e60:	2302      	movs	r3, #2
 8009e62:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8009e66:	e77b      	b.n	8009d60 <USBD_StdDevReq+0x28>
  switch (req->wValue >> 8)
 8009e68:	884a      	ldrh	r2, [r1, #2]
 8009e6a:	0a13      	lsrs	r3, r2, #8
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	2b06      	cmp	r3, #6
 8009e70:	f63f af6e 	bhi.w	8009d50 <USBD_StdDevReq+0x18>
 8009e74:	a101      	add	r1, pc, #4	; (adr r1, 8009e7c <USBD_StdDevReq+0x144>)
 8009e76:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009f2b 	.word	0x08009f2b
 8009e80:	08009f13 	.word	0x08009f13
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009d51 	.word	0x08009d51
 8009e8c:	08009d51 	.word	0x08009d51
 8009e90:	08009eeb 	.word	0x08009eeb
 8009e94:	08009ebd 	.word	0x08009ebd
  if (req->wLength != 1U)
 8009e98:	88ca      	ldrh	r2, [r1, #6]
 8009e9a:	2a01      	cmp	r2, #1
 8009e9c:	f47f af58 	bne.w	8009d50 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8009ea0:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d878      	bhi.n	8009f9a <USBD_StdDevReq+0x262>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f43f af51 	beq.w	8009d50 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8009eae:	4601      	mov	r1, r0
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009eb6:	f000 f9d3 	bl	800a260 <USBD_CtlSendData>
      break;
 8009eba:	e751      	b.n	8009d60 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8009ebc:	7c03      	ldrb	r3, [r0, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f47f af46 	bne.w	8009d50 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ec4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009ec8:	f10d 0006 	add.w	r0, sp, #6
 8009ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ece:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ed0:	2307      	movs	r3, #7
 8009ed2:	7043      	strb	r3, [r0, #1]
  if((len != 0U) && (req->wLength != 0U))
 8009ed4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	d06e      	beq.n	8009fba <USBD_StdDevReq+0x282>
 8009edc:	88eb      	ldrh	r3, [r5, #6]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d162      	bne.n	8009fa8 <USBD_StdDevReq+0x270>
        USBD_CtlSendStatus(pdev);
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f9ec 	bl	800a2c0 <USBD_CtlSendStatus>
 8009ee8:	e73a      	b.n	8009d60 <USBD_StdDevReq+0x28>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009eea:	7c03      	ldrb	r3, [r0, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f af2f 	bne.w	8009d50 <USBD_StdDevReq+0x18>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ef2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009ef6:	f10d 0006 	add.w	r0, sp, #6
 8009efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efc:	4798      	blx	r3
      break;
 8009efe:	e7e9      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
    switch ((uint8_t)(req->wValue))
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	2a05      	cmp	r2, #5
 8009f04:	f63f af24 	bhi.w	8009d50 <USBD_StdDevReq+0x18>
 8009f08:	e8df f002 	tbb	[pc, r2]
 8009f0c:	272f373f 	.word	0x272f373f
 8009f10:	171f      	.short	0x171f
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8009f12:	7c03      	ldrb	r3, [r0, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d172      	bne.n	8009ffe <USBD_StdDevReq+0x2c6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009f18:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8009f1c:	f10d 0006 	add.w	r0, sp, #6
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f24:	2302      	movs	r3, #2
 8009f26:	7043      	strb	r3, [r0, #1]
 8009f28:	e7d4      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f2a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f2e:	f10d 0106 	add.w	r1, sp, #6
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	7c00      	ldrb	r0, [r0, #16]
 8009f36:	4798      	blx	r3
    break;
 8009f38:	e7cc      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f3a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f3e:	f10d 0106 	add.w	r1, sp, #6
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	7c00      	ldrb	r0, [r0, #16]
 8009f46:	4798      	blx	r3
      break;
 8009f48:	e7c4      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f4a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f4e:	f10d 0106 	add.w	r1, sp, #6
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	7c00      	ldrb	r0, [r0, #16]
 8009f56:	4798      	blx	r3
      break;
 8009f58:	e7bc      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f5a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f5e:	f10d 0106 	add.w	r1, sp, #6
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	7c00      	ldrb	r0, [r0, #16]
 8009f66:	4798      	blx	r3
      break;
 8009f68:	e7b4      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f6a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f6e:	f10d 0106 	add.w	r1, sp, #6
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	7c00      	ldrb	r0, [r0, #16]
 8009f76:	4798      	blx	r3
      break;
 8009f78:	e7ac      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f7a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f7e:	f10d 0106 	add.w	r1, sp, #6
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	7c00      	ldrb	r0, [r0, #16]
 8009f86:	4798      	blx	r3
      break;
 8009f88:	e7a4      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f8a:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8009f8e:	f10d 0106 	add.w	r1, sp, #6
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	7c00      	ldrb	r0, [r0, #16]
 8009f96:	4798      	blx	r3
      break;
 8009f98:	e79c      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
    switch (pdev->dev_state)
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	f47f aed8 	bne.w	8009d50 <USBD_StdDevReq+0x18>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009fa0:	1d01      	adds	r1, r0, #4
 8009fa2:	f000 f95d 	bl	800a260 <USBD_CtlSendData>
      break;
 8009fa6:	e6db      	b.n	8009d60 <USBD_StdDevReq+0x28>
    len = MIN(len, req->wLength);
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	bf28      	it	cs
 8009fac:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8009fae:	4601      	mov	r1, r0
 8009fb0:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8009fb2:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8009fb6:	f000 f953 	bl	800a260 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8009fba:	88eb      	ldrh	r3, [r5, #6]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f47f aecf 	bne.w	8009d60 <USBD_StdDevReq+0x28>
 8009fc2:	e78e      	b.n	8009ee2 <USBD_StdDevReq+0x1aa>
      if (cfgidx == 0U)
 8009fc4:	b321      	cbz	r1, 800a010 <USBD_StdDevReq+0x2d8>
      else if (cfgidx != pdev->dev_config)
 8009fc6:	6841      	ldr	r1, [r0, #4]
 8009fc8:	2901      	cmp	r1, #1
 8009fca:	d08a      	beq.n	8009ee2 <USBD_StdDevReq+0x1aa>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fcc:	b2c9      	uxtb	r1, r1
 8009fce:	f7ff fd8b 	bl	8009ae8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fd2:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fd4:	4620      	mov	r0, r4
        pdev->dev_config = cfgidx;
 8009fd6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fd8:	f7ff fd7c 	bl	8009ad4 <USBD_SetClassConfig>
 8009fdc:	2802      	cmp	r0, #2
 8009fde:	d180      	bne.n	8009ee2 <USBD_StdDevReq+0x1aa>
 8009fe0:	e6b6      	b.n	8009d50 <USBD_StdDevReq+0x18>
      if (cfgidx)
 8009fe2:	2900      	cmp	r1, #0
 8009fe4:	f43f af7d 	beq.w	8009ee2 <USBD_StdDevReq+0x1aa>
        pdev->dev_config = cfgidx;
 8009fe8:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fea:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8009fec:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fee:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ff2:	f7ff fd6f 	bl	8009ad4 <USBD_SetClassConfig>
 8009ff6:	2802      	cmp	r0, #2
 8009ff8:	f47f af73 	bne.w	8009ee2 <USBD_StdDevReq+0x1aa>
 8009ffc:	e6a8      	b.n	8009d50 <USBD_StdDevReq+0x18>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009ffe:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800a002:	f10d 0006 	add.w	r0, sp, #6
 800a006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a008:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a00a:	2302      	movs	r3, #2
 800a00c:	7043      	strb	r3, [r0, #1]
 800a00e:	e761      	b.n	8009ed4 <USBD_StdDevReq+0x19c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a010:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800a012:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a014:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 800a018:	f7ff fd66 	bl	8009ae8 <USBD_ClrClassConfig>
 800a01c:	e761      	b.n	8009ee2 <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a01e:	2301      	movs	r3, #1
 800a020:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 800a024:	e69c      	b.n	8009d60 <USBD_StdDevReq+0x28>
 800a026:	bf00      	nop
 800a028:	200007dc 	.word	0x200007dc

0800a02c <USBD_StdItfReq>:
{
 800a02c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a02e:	780b      	ldrb	r3, [r1, #0]
{
 800a030:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a032:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800a036:	2a40      	cmp	r2, #64	; 0x40
{
 800a038:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a03a:	d00a      	beq.n	800a052 <USBD_StdItfReq+0x26>
 800a03c:	065b      	lsls	r3, r3, #25
 800a03e:	d508      	bpl.n	800a052 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev , 0x80U);
 800a040:	2180      	movs	r1, #128	; 0x80
 800a042:	f000 fb81 	bl	800a748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a046:	2100      	movs	r1, #0
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fb7d 	bl	800a748 <USBD_LL_StallEP>
}
 800a04e:	2000      	movs	r0, #0
 800a050:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 800a052:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 800a056:	3b01      	subs	r3, #1
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d811      	bhi.n	800a080 <USBD_StdItfReq+0x54>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a05c:	792b      	ldrb	r3, [r5, #4]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d80e      	bhi.n	800a080 <USBD_StdItfReq+0x54>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a062:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800a066:	4629      	mov	r1, r5
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	4620      	mov	r0, r4
 800a06c:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a06e:	88eb      	ldrh	r3, [r5, #6]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1ec      	bne.n	800a04e <USBD_StdItfReq+0x22>
 800a074:	2800      	cmp	r0, #0
 800a076:	d1ea      	bne.n	800a04e <USBD_StdItfReq+0x22>
          USBD_CtlSendStatus(pdev);
 800a078:	4620      	mov	r0, r4
 800a07a:	f000 f921 	bl	800a2c0 <USBD_CtlSendStatus>
 800a07e:	e7e6      	b.n	800a04e <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev , 0x80U);
 800a080:	2180      	movs	r1, #128	; 0x80
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fb60 	bl	800a748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a088:	2100      	movs	r1, #0
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fb5c 	bl	800a748 <USBD_LL_StallEP>
}
 800a090:	2000      	movs	r0, #0
 800a092:	bd38      	pop	{r3, r4, r5, pc}

0800a094 <USBD_StdEPReq>:
{
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	780b      	ldrb	r3, [r1, #0]
 800a098:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a09a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	d00c      	beq.n	800a0bc <USBD_StdEPReq+0x28>
 800a0a2:	2b40      	cmp	r3, #64	; 0x40
 800a0a4:	d00a      	beq.n	800a0bc <USBD_StdEPReq+0x28>
 800a0a6:	b183      	cbz	r3, 800a0ca <USBD_StdEPReq+0x36>
  USBD_LL_StallEP(pdev , 0x80U);
 800a0a8:	2180      	movs	r1, #128	; 0x80
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 fb4c 	bl	800a748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 fb48 	bl	800a748 <USBD_LL_StallEP>
}
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
    pdev->pClass->Setup (pdev, req);
 800a0bc:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	4798      	blx	r3
}
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800a0ca:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800a0cc:	888a      	ldrh	r2, [r1, #4]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	fa5f fc82 	uxtb.w	ip, r2
    switch (req->bRequest)
 800a0d4:	d03e      	beq.n	800a154 <USBD_StdEPReq+0xc0>
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d02a      	beq.n	800a130 <USBD_StdEPReq+0x9c>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e4      	bne.n	800a0a8 <USBD_StdEPReq+0x14>
      switch (pdev->dev_state)
 800a0de:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d051      	beq.n	800a18a <USBD_StdEPReq+0xf6>
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d1de      	bne.n	800a0a8 <USBD_StdEPReq+0x14>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0ea:	f00c 030f 	and.w	r3, ip, #15
 800a0ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800a0f2:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if((ep_addr & 0x80U) == 0x80U)
 800a0f8:	d456      	bmi.n	800a1a8 <USBD_StdEPReq+0x114>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a0fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0d2      	beq.n	800a0a8 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a102:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800a106:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 800a10a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a10e:	f505 75a0 	add.w	r5, r5, #320	; 0x140
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a112:	b133      	cbz	r3, 800a122 <USBD_StdEPReq+0x8e>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800a114:	4661      	mov	r1, ip
 800a116:	4620      	mov	r0, r4
 800a118:	f000 fb32 	bl	800a780 <USBD_LL_IsStallEP>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d04f      	beq.n	800a1c0 <USBD_StdEPReq+0x12c>
            pep->status = 0x0001U;
 800a120:	2301      	movs	r3, #1
 800a122:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a124:	2202      	movs	r2, #2
 800a126:	4629      	mov	r1, r5
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 f899 	bl	800a260 <USBD_CtlSendData>
          break;
 800a12e:	e7c3      	b.n	800a0b8 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800a130:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800a134:	2b02      	cmp	r3, #2
 800a136:	d01d      	beq.n	800a174 <USBD_StdEPReq+0xe0>
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d1b5      	bne.n	800a0a8 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a13c:	884b      	ldrh	r3, [r1, #2]
 800a13e:	b92b      	cbnz	r3, 800a14c <USBD_StdEPReq+0xb8>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a140:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800a144:	d002      	beq.n	800a14c <USBD_StdEPReq+0xb8>
 800a146:	88cb      	ldrh	r3, [r1, #6]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d03b      	beq.n	800a1c4 <USBD_StdEPReq+0x130>
        USBD_CtlSendStatus(pdev);
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f8b7 	bl	800a2c0 <USBD_CtlSendStatus>
        break;
 800a152:	e7b1      	b.n	800a0b8 <USBD_StdEPReq+0x24>
      switch (pdev->dev_state)
 800a154:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d00b      	beq.n	800a174 <USBD_StdEPReq+0xe0>
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d1a3      	bne.n	800a0a8 <USBD_StdEPReq+0x14>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a160:	884b      	ldrh	r3, [r1, #2]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1a8      	bne.n	800a0b8 <USBD_StdEPReq+0x24>
          if ((ep_addr & 0x7FU) != 0x00U)
 800a166:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800a16a:	d0ef      	beq.n	800a14c <USBD_StdEPReq+0xb8>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800a16c:	4661      	mov	r1, ip
 800a16e:	f000 faf9 	bl	800a764 <USBD_LL_ClearStallEP>
 800a172:	e7eb      	b.n	800a14c <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a174:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800a178:	d096      	beq.n	800a0a8 <USBD_StdEPReq+0x14>
          USBD_LL_StallEP(pdev, ep_addr);
 800a17a:	4661      	mov	r1, ip
 800a17c:	f000 fae4 	bl	800a748 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fae0 	bl	800a748 <USBD_LL_StallEP>
 800a188:	e796      	b.n	800a0b8 <USBD_StdEPReq+0x24>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a18a:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
 800a18e:	d18b      	bne.n	800a0a8 <USBD_StdEPReq+0x14>
          pep->status = 0x0000U;
 800a190:	2300      	movs	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a192:	0611      	lsls	r1, r2, #24
 800a194:	bf4c      	ite	mi
 800a196:	f100 0114 	addmi.w	r1, r0, #20
 800a19a:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a19e:	2202      	movs	r2, #2
          pep->status = 0x0000U;
 800a1a0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1a2:	f000 f85d 	bl	800a260 <USBD_CtlSendData>
          break;
 800a1a6:	e787      	b.n	800a0b8 <USBD_StdEPReq+0x24>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f43f af7c 	beq.w	800a0a8 <USBD_StdEPReq+0x14>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800a1b0:	f00c 037f 	and.w	r3, ip, #127	; 0x7f
 800a1b4:	1c5d      	adds	r5, r3, #1
 800a1b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a1ba:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a1be:	e7a8      	b.n	800a112 <USBD_StdEPReq+0x7e>
            pep->status = 0x0000U;
 800a1c0:	6028      	str	r0, [r5, #0]
 800a1c2:	e7af      	b.n	800a124 <USBD_StdEPReq+0x90>
            USBD_LL_StallEP(pdev, ep_addr);
 800a1c4:	4661      	mov	r1, ip
 800a1c6:	f000 fabf 	bl	800a748 <USBD_LL_StallEP>
 800a1ca:	e7bf      	b.n	800a14c <USBD_StdEPReq+0xb8>

0800a1cc <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800a1cc:	780b      	ldrb	r3, [r1, #0]
 800a1ce:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800a1d0:	784b      	ldrb	r3, [r1, #1]
 800a1d2:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800a1d4:	78ca      	ldrb	r2, [r1, #3]
 800a1d6:	788b      	ldrb	r3, [r1, #2]
 800a1d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a1dc:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800a1de:	794a      	ldrb	r2, [r1, #5]
 800a1e0:	790b      	ldrb	r3, [r1, #4]
 800a1e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a1e6:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800a1e8:	79ca      	ldrb	r2, [r1, #7]
 800a1ea:	798b      	ldrb	r3, [r1, #6]
 800a1ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a1f0:	80c3      	strh	r3, [r0, #6]
}
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_CtlError>:
{
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800a1f8:	2180      	movs	r1, #128	; 0x80
 800a1fa:	f000 faa5 	bl	800a748 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a1fe:	4620      	mov	r0, r4
}
 800a200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800a204:	2100      	movs	r1, #0
 800a206:	f000 ba9f 	b.w	800a748 <USBD_LL_StallEP>
 800a20a:	bf00      	nop

0800a20c <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 800a20c:	b318      	cbz	r0, 800a256 <USBD_GetString+0x4a>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 800a20e:	7803      	ldrb	r3, [r0, #0]
{
 800a210:	b430      	push	{r4, r5}
    while (*buf != '\0')
 800a212:	b30b      	cbz	r3, 800a258 <USBD_GetString+0x4c>
 800a214:	4604      	mov	r4, r0
 800a216:	f1c0 0c01 	rsb	ip, r0, #1
    {
        len++;
 800a21a:	eb04 030c 	add.w	r3, r4, ip
    while (*buf != '\0')
 800a21e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2d00      	cmp	r5, #0
 800a226:	d1f8      	bne.n	800a21a <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a228:	3301      	adds	r3, #1
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	b2dc      	uxtb	r4, r3
 800a22e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a230:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a232:	700c      	strb	r4, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a234:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 800a236:	7804      	ldrb	r4, [r0, #0]
 800a238:	b15c      	cbz	r4, 800a252 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a23a:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 800a23c:	2500      	movs	r5, #0
      unicode[idx++] = *desc++;
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	b2d2      	uxtb	r2, r2
 800a242:	54cc      	strb	r4, [r1, r3]
      unicode[idx++] =  0U;
 800a244:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0')
 800a246:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 800a24a:	3302      	adds	r3, #2
 800a24c:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 800a24e:	2c00      	cmp	r4, #0
 800a250:	d1f5      	bne.n	800a23e <USBD_GetString+0x32>
}
 800a252:	bc30      	pop	{r4, r5}
 800a254:	4770      	bx	lr
 800a256:	4770      	bx	lr
    while (*buf != '\0')
 800a258:	2402      	movs	r4, #2
 800a25a:	4623      	mov	r3, r4
 800a25c:	e7e7      	b.n	800a22e <USBD_GetString+0x22>
 800a25e:	bf00      	nop

0800a260 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a260:	b510      	push	{r4, lr}
 800a262:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a264:	2402      	movs	r4, #2
{
 800a266:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800a268:	e9c0 3307 	strd	r3, r3, [r0, #28]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a26c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a26e:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a272:	f000 faa7 	bl	800a7c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a276:	2000      	movs	r0, #0
 800a278:	bd10      	pop	{r4, pc}
 800a27a:	bf00      	nop

0800a27c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a27c:	468c      	mov	ip, r1
 800a27e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a280:	2100      	movs	r1, #0
{
 800a282:	4613      	mov	r3, r2
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a284:	4662      	mov	r2, ip
 800a286:	f000 fa9d 	bl	800a7c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a28a:	2000      	movs	r0, #0
 800a28c:	bd08      	pop	{r3, pc}
 800a28e:	bf00      	nop

0800a290 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800a290:	b510      	push	{r4, lr}
 800a292:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a294:	2403      	movs	r4, #3
{
 800a296:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800a298:	e9c0 3352 	strd	r3, r3, [r0, #328]	; 0x148

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a29c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a29e:	f8c0 426c 	str.w	r4, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a2a2:	f000 fa9d 	bl	800a7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	bd10      	pop	{r4, pc}
 800a2aa:	bf00      	nop

0800a2ac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a2ac:	468c      	mov	ip, r1
 800a2ae:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2b0:	2100      	movs	r1, #0
{
 800a2b2:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2b4:	4662      	mov	r2, ip
 800a2b6:	f000 fa93 	bl	800a7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	bd08      	pop	{r3, pc}
 800a2be:	bf00      	nop

0800a2c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a2c0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2c2:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2c4:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a2c6:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	f000 fa79 	bl	800a7c4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	bd08      	pop	{r3, pc}
 800a2d6:	bf00      	nop

0800a2d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a2d8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2da:	2105      	movs	r1, #5

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a2dc:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2de:	f8c0 126c 	str.w	r1, [r0, #620]	; 0x26c
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f000 fa7b 	bl	800a7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	bd08      	pop	{r3, pc}
 800a2ee:	bf00      	nop

0800a2f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a2f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4917      	ldr	r1, [pc, #92]	; (800a354 <MX_USB_DEVICE_Init+0x64>)
 800a2f6:	4818      	ldr	r0, [pc, #96]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a2f8:	f7ff fbc8 	bl	8009a8c <USBD_Init>
 800a2fc:	b970      	cbnz	r0, 800a31c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a2fe:	4917      	ldr	r1, [pc, #92]	; (800a35c <MX_USB_DEVICE_Init+0x6c>)
 800a300:	4815      	ldr	r0, [pc, #84]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a302:	f7ff fbd9 	bl	8009ab8 <USBD_RegisterClass>
 800a306:	b988      	cbnz	r0, 800a32c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a308:	4915      	ldr	r1, [pc, #84]	; (800a360 <MX_USB_DEVICE_Init+0x70>)
 800a30a:	4813      	ldr	r0, [pc, #76]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a30c:	f7ff fb88 	bl	8009a20 <USBD_CDC_RegisterInterface>
 800a310:	b9a0      	cbnz	r0, 800a33c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a312:	4811      	ldr	r0, [pc, #68]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a314:	f7ff fbd8 	bl	8009ac8 <USBD_Start>
 800a318:	b9b8      	cbnz	r0, 800a34a <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a31a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a31c:	f7fa feda 	bl	80050d4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a320:	490e      	ldr	r1, [pc, #56]	; (800a35c <MX_USB_DEVICE_Init+0x6c>)
 800a322:	480d      	ldr	r0, [pc, #52]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a324:	f7ff fbc8 	bl	8009ab8 <USBD_RegisterClass>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d0ed      	beq.n	800a308 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800a32c:	f7fa fed2 	bl	80050d4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a330:	490b      	ldr	r1, [pc, #44]	; (800a360 <MX_USB_DEVICE_Init+0x70>)
 800a332:	4809      	ldr	r0, [pc, #36]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a334:	f7ff fb74 	bl	8009a20 <USBD_CDC_RegisterInterface>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d0ea      	beq.n	800a312 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800a33c:	f7fa feca 	bl	80050d4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a340:	4805      	ldr	r0, [pc, #20]	; (800a358 <MX_USB_DEVICE_Init+0x68>)
 800a342:	f7ff fbc1 	bl	8009ac8 <USBD_Start>
 800a346:	2800      	cmp	r0, #0
 800a348:	d0e7      	beq.n	800a31a <MX_USB_DEVICE_Init+0x2a>
}
 800a34a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a34e:	f7fa bec1 	b.w	80050d4 <Error_Handler>
 800a352:	bf00      	nop
 800a354:	20000158 	.word	0x20000158
 800a358:	200007e0 	.word	0x200007e0
 800a35c:	20000038 	.word	0x20000038
 800a360:	20000148 	.word	0x20000148

0800a364 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800a364:	2000      	movs	r0, #0
 800a366:	4770      	bx	lr

0800a368 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800a368:	2000      	movs	r0, #0
 800a36a:	4770      	bx	lr

0800a36c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	4604      	mov	r4, r0
 800a370:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a372:	4f0f      	ldr	r7, [pc, #60]	; (800a3b0 <CDC_Receive_FS+0x44>)
 800a374:	4621      	mov	r1, r4
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);

	memset (usbbuffer, '\0', 128);  // clear the buffer
 800a376:	4e0f      	ldr	r6, [pc, #60]	; (800a3b4 <CDC_Receive_FS+0x48>)
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a378:	4638      	mov	r0, r7
 800a37a:	f7ff fb63 	bl	8009a44 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a37e:	4638      	mov	r0, r7
 800a380:	f7ff fb68 	bl	8009a54 <USBD_CDC_ReceivePacket>
	memset (usbbuffer, '\0', 128);  // clear the buffer
 800a384:	2280      	movs	r2, #128	; 0x80
 800a386:	2100      	movs	r1, #0
 800a388:	4630      	mov	r0, r6
 800a38a:	f000 fa93 	bl	800a8b4 <memset>
	uint8_t len = (uint8_t)*Len;
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 800a38e:	782d      	ldrb	r5, [r5, #0]
 800a390:	4621      	mov	r1, r4
 800a392:	462a      	mov	r2, r5
 800a394:	4630      	mov	r0, r6
 800a396:	f000 fa65 	bl	800a864 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800a39a:	462a      	mov	r2, r5
 800a39c:	2100      	movs	r1, #0
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 fa88 	bl	800a8b4 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800a3a4:	4804      	ldr	r0, [pc, #16]	; (800a3b8 <CDC_Receive_FS+0x4c>)
 800a3a6:	f7fb ff85 	bl	80062b4 <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
  /* USER CODE END 6 */
}
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200007e0 	.word	0x200007e0
 800a3b4:	20000748 	.word	0x20000748
 800a3b8:	2000050c 	.word	0x2000050c

0800a3bc <CDC_Init_FS>:
{
 800a3bc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3be:	4c06      	ldr	r4, [pc, #24]	; (800a3d8 <CDC_Init_FS+0x1c>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	4905      	ldr	r1, [pc, #20]	; (800a3dc <CDC_Init_FS+0x20>)
 800a3c6:	f7ff fb33 	bl	8009a30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4904      	ldr	r1, [pc, #16]	; (800a3e0 <CDC_Init_FS+0x24>)
 800a3ce:	f7ff fb39 	bl	8009a44 <USBD_CDC_SetRxBuffer>
}
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	bf00      	nop
 800a3d8:	200007e0 	.word	0x200007e0
 800a3dc:	20000e64 	.word	0x20000e64
 800a3e0:	20000a7c 	.word	0x20000a7c

0800a3e4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3e4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800a3e6:	4801      	ldr	r0, [pc, #4]	; (800a3ec <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3e8:	800b      	strh	r3, [r1, #0]
}
 800a3ea:	4770      	bx	lr
 800a3ec:	20000174 	.word	0x20000174

0800a3f0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3f0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800a3f2:	4801      	ldr	r0, [pc, #4]	; (800a3f8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800a3f4:	800b      	strh	r3, [r1, #0]
}
 800a3f6:	4770      	bx	lr
 800a3f8:	20000188 	.word	0x20000188

0800a3fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3fe:	4c04      	ldr	r4, [pc, #16]	; (800a410 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800a400:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a402:	4804      	ldr	r0, [pc, #16]	; (800a414 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800a404:	4621      	mov	r1, r4
 800a406:	f7ff ff01 	bl	800a20c <USBD_GetString>
  return USBD_StrDesc;
}
 800a40a:	4620      	mov	r0, r4
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	bf00      	nop
 800a410:	2000124c 	.word	0x2000124c
 800a414:	0800d748 	.word	0x0800d748

0800a418 <USBD_FS_ProductStrDescriptor>:
{
 800a418:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a41a:	4c04      	ldr	r4, [pc, #16]	; (800a42c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800a41c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a41e:	4804      	ldr	r0, [pc, #16]	; (800a430 <USBD_FS_ProductStrDescriptor+0x18>)
 800a420:	4621      	mov	r1, r4
 800a422:	f7ff fef3 	bl	800a20c <USBD_GetString>
}
 800a426:	4620      	mov	r0, r4
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	bf00      	nop
 800a42c:	2000124c 	.word	0x2000124c
 800a430:	0800d75c 	.word	0x0800d75c

0800a434 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a434:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a436:	4c04      	ldr	r4, [pc, #16]	; (800a448 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800a438:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a43a:	4804      	ldr	r0, [pc, #16]	; (800a44c <USBD_FS_ConfigStrDescriptor+0x18>)
 800a43c:	4621      	mov	r1, r4
 800a43e:	f7ff fee5 	bl	800a20c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800a442:	4620      	mov	r0, r4
 800a444:	bd10      	pop	{r4, pc}
 800a446:	bf00      	nop
 800a448:	2000124c 	.word	0x2000124c
 800a44c:	0800d774 	.word	0x0800d774

0800a450 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a450:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a452:	4c04      	ldr	r4, [pc, #16]	; (800a464 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800a454:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a456:	4804      	ldr	r0, [pc, #16]	; (800a468 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800a458:	4621      	mov	r1, r4
 800a45a:	f7ff fed7 	bl	800a20c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800a45e:	4620      	mov	r0, r4
 800a460:	bd10      	pop	{r4, pc}
 800a462:	bf00      	nop
 800a464:	2000124c 	.word	0x2000124c
 800a468:	0800d780 	.word	0x0800d780

0800a46c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800a46c:	f04f 0c1a 	mov.w	ip, #26
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a470:	4a42      	ldr	r2, [pc, #264]	; (800a57c <USBD_FS_SerialStrDescriptor+0x110>)
 800a472:	6d10      	ldr	r0, [r2, #80]	; 0x50
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 800a474:	6d93      	ldr	r3, [r2, #88]	; 0x58
  *length = USB_SIZ_STRING_SERIAL;
 800a476:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 800a47a:	18c3      	adds	r3, r0, r3
 800a47c:	d101      	bne.n	800a482 <USBD_FS_SerialStrDescriptor+0x16>
}
 800a47e:	4840      	ldr	r0, [pc, #256]	; (800a580 <USBD_FS_SerialStrDescriptor+0x114>)
 800a480:	4770      	bx	lr
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800a482:	f04f 0c00 	mov.w	ip, #0
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a486:	6d51      	ldr	r1, [r2, #84]	; 0x54
    if (((value >> 28)) < 0xA)
 800a488:	0f18      	lsrs	r0, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800a48a:	4a3d      	ldr	r2, [pc, #244]	; (800a580 <USBD_FS_SerialStrDescriptor+0x114>)
    if (((value >> 28)) < 0xA)
 800a48c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a490:	bf2c      	ite	cs
 800a492:	3037      	addcs	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a494:	3030      	addcc	r0, #48	; 0x30
 800a496:	7090      	strb	r0, [r2, #2]
    if (((value >> 28)) < 0xA)
 800a498:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800a49c:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a49e:	bf8c      	ite	hi
 800a4a0:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4a2:	3030      	addls	r0, #48	; 0x30
 800a4a4:	7110      	strb	r0, [r2, #4]
    if (((value >> 28)) < 0xA)
 800a4a6:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800a4aa:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4ac:	bf8c      	ite	hi
 800a4ae:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4b0:	3030      	addls	r0, #48	; 0x30
 800a4b2:	7190      	strb	r0, [r2, #6]
    if (((value >> 28)) < 0xA)
 800a4b4:	f3c3 4003 	ubfx	r0, r3, #16, #4
 800a4b8:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4ba:	bf8c      	ite	hi
 800a4bc:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4be:	3030      	addls	r0, #48	; 0x30
 800a4c0:	7210      	strb	r0, [r2, #8]
    if (((value >> 28)) < 0xA)
 800a4c2:	f3c3 3003 	ubfx	r0, r3, #12, #4
 800a4c6:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4c8:	bf8c      	ite	hi
 800a4ca:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4cc:	3030      	addls	r0, #48	; 0x30
 800a4ce:	7290      	strb	r0, [r2, #10]
    if (((value >> 28)) < 0xA)
 800a4d0:	f3c3 2003 	ubfx	r0, r3, #8, #4
 800a4d4:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4d6:	bf8c      	ite	hi
 800a4d8:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4da:	3030      	addls	r0, #48	; 0x30
 800a4dc:	7310      	strb	r0, [r2, #12]
    if (((value >> 28)) < 0xA)
 800a4de:	f3c3 1003 	ubfx	r0, r3, #4, #4
 800a4e2:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4e4:	bf8c      	ite	hi
 800a4e6:	3037      	addhi	r0, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4e8:	3030      	addls	r0, #48	; 0x30
    pbuf[2 * idx + 1] = 0;
 800a4ea:	f882 c003 	strb.w	ip, [r2, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4ee:	7390      	strb	r0, [r2, #14]
    pbuf[2 * idx + 1] = 0;
 800a4f0:	f04f 0c00 	mov.w	ip, #0
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	f882 c005 	strb.w	ip, [r2, #5]
 800a4fa:	73d0      	strb	r0, [r2, #15]
 800a4fc:	f04f 0c00 	mov.w	ip, #0
 800a500:	2000      	movs	r0, #0
 800a502:	f882 c007 	strb.w	ip, [r2, #7]
 800a506:	7450      	strb	r0, [r2, #17]
 800a508:	f04f 0c00 	mov.w	ip, #0
 800a50c:	2000      	movs	r0, #0
 800a50e:	f882 c009 	strb.w	ip, [r2, #9]
 800a512:	74d0      	strb	r0, [r2, #19]
 800a514:	f04f 0c00 	mov.w	ip, #0
 800a518:	2000      	movs	r0, #0
    if (((value >> 28)) < 0xA)
 800a51a:	f003 030f 	and.w	r3, r3, #15
 800a51e:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800a520:	bf94      	ite	ls
 800a522:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a524:	3337      	addhi	r3, #55	; 0x37
 800a526:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 800a528:	f1b1 4f20 	cmp.w	r1, #2684354560	; 0xa0000000
 800a52c:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a530:	bf2c      	ite	cs
 800a532:	3337      	addcs	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a534:	3330      	addcc	r3, #48	; 0x30
 800a536:	7493      	strb	r3, [r2, #18]
    if (((value >> 28)) < 0xA)
 800a538:	f3c1 6303 	ubfx	r3, r1, #24, #4
 800a53c:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a53e:	bf8c      	ite	hi
 800a540:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a542:	3330      	addls	r3, #48	; 0x30
 800a544:	7513      	strb	r3, [r2, #20]
    if (((value >> 28)) < 0xA)
 800a546:	f3c1 5303 	ubfx	r3, r1, #20, #4
 800a54a:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a54c:	bf8c      	ite	hi
 800a54e:	3337      	addhi	r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800a550:	3330      	addls	r3, #48	; 0x30
 800a552:	7593      	strb	r3, [r2, #22]
    if (((value >> 28)) < 0xA)
 800a554:	f3c1 4303 	ubfx	r3, r1, #16, #4
 800a558:	2b09      	cmp	r3, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 800a55a:	bf94      	ite	ls
 800a55c:	3330      	addls	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a55e:	3337      	addhi	r3, #55	; 0x37
    pbuf[2 * idx + 1] = 0;
 800a560:	f882 c00b 	strb.w	ip, [r2, #11]
 800a564:	7550      	strb	r0, [r2, #21]
 800a566:	f04f 0c00 	mov.w	ip, #0
 800a56a:	2000      	movs	r0, #0
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a56c:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	75d0      	strb	r0, [r2, #23]
 800a572:	f882 c00d 	strb.w	ip, [r2, #13]
}
 800a576:	4802      	ldr	r0, [pc, #8]	; (800a580 <USBD_FS_SerialStrDescriptor+0x114>)
    pbuf[2 * idx + 1] = 0;
 800a578:	7653      	strb	r3, [r2, #25]
}
 800a57a:	4770      	bx	lr
 800a57c:	1ff80000 	.word	0x1ff80000
 800a580:	2000018c 	.word	0x2000018c

0800a584 <HAL_PCDEx_SetConnectionState>:
{
  /* USER CODE BEGIN 6 */
  if (state == 1)
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a584:	4a04      	ldr	r2, [pc, #16]	; (800a598 <HAL_PCDEx_SetConnectionState+0x14>)
  if (state == 1)
 800a586:	2901      	cmp	r1, #1
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800a588:	6853      	ldr	r3, [r2, #4]
 800a58a:	bf0c      	ite	eq
 800a58c:	f043 0301 	orreq.w	r3, r3, #1
  }
  else
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800a590:	f023 0301 	bicne.w	r3, r3, #1
 800a594:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END 6 */
}
 800a596:	4770      	bx	lr
 800a598:	40010000 	.word	0x40010000

0800a59c <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 800a59c:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <HAL_PCD_MspInit+0x3c>)
 800a59e:	6802      	ldr	r2, [r0, #0]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d000      	beq.n	800a5a6 <HAL_PCD_MspInit+0xa>
 800a5a4:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a5a6:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800a5a8:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 800a5ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
{
 800a5ae:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 800a5b0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a5b4:	6259      	str	r1, [r3, #36]	; 0x24
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800a5b8:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800a5ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5be:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a5c0:	2014      	movs	r0, #20
 800a5c2:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800a5c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800a5c6:	f7fb fbcd 	bl	8005d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a5ca:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a5cc:	b003      	add	sp, #12
 800a5ce:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800a5d2:	f7fb bc05 	b.w	8005de0 <HAL_NVIC_EnableIRQ>
 800a5d6:	bf00      	nop
 800a5d8:	40005c00 	.word	0x40005c00

0800a5dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5dc:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5de:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a5e2:	f501 712c 	add.w	r1, r1, #688	; 0x2b0
 800a5e6:	f7ff ba87 	b.w	8009af8 <USBD_LL_SetupStage>
 800a5ea:	bf00      	nop

0800a5ec <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5ec:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a5f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a5f4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800a5f8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a5fc:	f7ff baac 	b.w	8009b58 <USBD_LL_DataOutStage>

0800a600 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a600:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a604:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a60a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a60e:	f7ff bae1 	b.w	8009bd4 <USBD_LL_DataInStage>
 800a612:	bf00      	nop

0800a614 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a614:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a618:	f7ff bb80 	b.w	8009d1c <USBD_LL_SOF>

0800a61c <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a61c:	6883      	ldr	r3, [r0, #8]
{
 800a61e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a620:	2b02      	cmp	r3, #2
{
 800a622:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a624:	d001      	beq.n	800a62a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800a626:	f7fa fd55 	bl	80050d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a62a:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800a62e:	2101      	movs	r1, #1
 800a630:	f7ff fb5e 	bl	8009cf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a634:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a63c:	f7ff bb30 	b.w	8009ca0 <USBD_LL_Reset>

0800a640 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a640:	b510      	push	{r4, lr}
 800a642:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a644:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a648:	f7ff fb56 	bl	8009cf8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a64c:	69a3      	ldr	r3, [r4, #24]
 800a64e:	b123      	cbz	r3, 800a65a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a650:	4a02      	ldr	r2, [pc, #8]	; (800a65c <HAL_PCD_SuspendCallback+0x1c>)
 800a652:	6913      	ldr	r3, [r2, #16]
 800a654:	f043 0306 	orr.w	r3, r3, #6
 800a658:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a65a:	bd10      	pop	{r4, pc}
 800a65c:	e000ed00 	.word	0xe000ed00

0800a660 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a660:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800a664:	f7ff bb52 	b.w	8009d0c <USBD_LL_Resume>

0800a668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a668:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a66a:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800a66c:	4b1e      	ldr	r3, [pc, #120]	; (800a6e8 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a66e:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a670:	605c      	str	r4, [r3, #4]
{
 800a672:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a674:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a676:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a678:	621a      	str	r2, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800a67a:	4a1c      	ldr	r2, [pc, #112]	; (800a6ec <USBD_LL_Init+0x84>)
  hpcd_USB_FS.pData = pdev;
 800a67c:	f8c3 42e8 	str.w	r4, [r3, #744]	; 0x2e8
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a680:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 800a682:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a686:	6099      	str	r1, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a688:	6119      	str	r1, [r3, #16]
  hpcd_USB_FS.Instance = USB;
 800a68a:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a68c:	f7fc fa0c 	bl	8006aa8 <HAL_PCD_Init>
 800a690:	bb30      	cbnz	r0, 800a6e0 <USBD_LL_Init+0x78>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a692:	2200      	movs	r2, #0
 800a694:	2318      	movs	r3, #24
 800a696:	4611      	mov	r1, r2
 800a698:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a69c:	f7fd f904 	bl	80078a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a6a0:	2358      	movs	r3, #88	; 0x58
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2180      	movs	r1, #128	; 0x80
 800a6a6:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a6aa:	f7fd f8fd 	bl	80078a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a6ae:	23c0      	movs	r3, #192	; 0xc0
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2181      	movs	r1, #129	; 0x81
 800a6b4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a6b8:	f7fd f8f6 	bl	80078a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a6bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a6c8:	f7fd f8ee 	bl	80078a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2182      	movs	r1, #130	; 0x82
 800a6d4:	f8d4 0298 	ldr.w	r0, [r4, #664]	; 0x298
 800a6d8:	f7fd f8e6 	bl	80078a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800a6dc:	2000      	movs	r0, #0
 800a6de:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800a6e0:	f7fa fcf8 	bl	80050d4 <Error_Handler>
 800a6e4:	e7d5      	b.n	800a692 <USBD_LL_Init+0x2a>
 800a6e6:	bf00      	nop
 800a6e8:	2000144c 	.word	0x2000144c
 800a6ec:	40005c00 	.word	0x40005c00

0800a6f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6f2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a6f6:	f7fc fa39 	bl	8006b6c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800a6fa:	2803      	cmp	r0, #3
 800a6fc:	bf96      	itet	ls
 800a6fe:	4b02      	ldrls	r3, [pc, #8]	; (800a708 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 800a700:	2002      	movhi	r0, #2
 800a702:	5c18      	ldrbls	r0, [r3, r0]
}
 800a704:	bd08      	pop	{r3, pc}
 800a706:	bf00      	nop
 800a708:	0800d790 	.word	0x0800d790

0800a70c <USBD_LL_OpenEP>:
{
 800a70c:	4694      	mov	ip, r2
 800a70e:	b508      	push	{r3, lr}
 800a710:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a712:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a716:	4663      	mov	r3, ip
 800a718:	f7fc ff9c 	bl	8007654 <HAL_PCD_EP_Open>
  switch (hal_status)
 800a71c:	2803      	cmp	r0, #3
 800a71e:	bf96      	itet	ls
 800a720:	4b01      	ldrls	r3, [pc, #4]	; (800a728 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a722:	2002      	movhi	r0, #2
 800a724:	5c18      	ldrbls	r0, [r3, r0]
}
 800a726:	bd08      	pop	{r3, pc}
 800a728:	0800d790 	.word	0x0800d790

0800a72c <USBD_LL_CloseEP>:
{
 800a72c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a72e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a732:	f7fc ffcd 	bl	80076d0 <HAL_PCD_EP_Close>
  switch (hal_status)
 800a736:	2803      	cmp	r0, #3
 800a738:	bf96      	itet	ls
 800a73a:	4b02      	ldrls	r3, [pc, #8]	; (800a744 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a73c:	2002      	movhi	r0, #2
 800a73e:	5c18      	ldrbls	r0, [r3, r0]
}
 800a740:	bd08      	pop	{r3, pc}
 800a742:	bf00      	nop
 800a744:	0800d790 	.word	0x0800d790

0800a748 <USBD_LL_StallEP>:
{
 800a748:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a74a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a74e:	f7fd f837 	bl	80077c0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800a752:	2803      	cmp	r0, #3
 800a754:	bf96      	itet	ls
 800a756:	4b02      	ldrls	r3, [pc, #8]	; (800a760 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a758:	2002      	movhi	r0, #2
 800a75a:	5c18      	ldrbls	r0, [r3, r0]
}
 800a75c:	bd08      	pop	{r3, pc}
 800a75e:	bf00      	nop
 800a760:	0800d790 	.word	0x0800d790

0800a764 <USBD_LL_ClearStallEP>:
{
 800a764:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a766:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a76a:	f7fd f861 	bl	8007830 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800a76e:	2803      	cmp	r0, #3
 800a770:	bf96      	itet	ls
 800a772:	4b02      	ldrls	r3, [pc, #8]	; (800a77c <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a774:	2002      	movhi	r0, #2
 800a776:	5c18      	ldrbls	r0, [r3, r0]
}
 800a778:	bd08      	pop	{r3, pc}
 800a77a:	bf00      	nop
 800a77c:	0800d790 	.word	0x0800d790

0800a780 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800a780:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a782:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
  if((ep_addr & 0x80) == 0x80)
 800a786:	d406      	bmi.n	800a796 <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a788:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a78c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a790:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800a794:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a796:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a79a:	3101      	adds	r1, #1
 800a79c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a7a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a7a4:	7888      	ldrb	r0, [r1, #2]
 800a7a6:	4770      	bx	lr

0800a7a8 <USBD_LL_SetUSBAddress>:
{
 800a7a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7aa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a7ae:	f7fc ff3b 	bl	8007628 <HAL_PCD_SetAddress>
  switch (hal_status)
 800a7b2:	2803      	cmp	r0, #3
 800a7b4:	bf96      	itet	ls
 800a7b6:	4b02      	ldrls	r3, [pc, #8]	; (800a7c0 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7b8:	2002      	movhi	r0, #2
 800a7ba:	5c18      	ldrbls	r0, [r3, r0]
}
 800a7bc:	bd08      	pop	{r3, pc}
 800a7be:	bf00      	nop
 800a7c0:	0800d790 	.word	0x0800d790

0800a7c4 <USBD_LL_Transmit>:
{
 800a7c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7c6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a7ca:	f7fc ffd5 	bl	8007778 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800a7ce:	2803      	cmp	r0, #3
 800a7d0:	bf96      	itet	ls
 800a7d2:	4b02      	ldrls	r3, [pc, #8]	; (800a7dc <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7d4:	2002      	movhi	r0, #2
 800a7d6:	5c18      	ldrbls	r0, [r3, r0]
}
 800a7d8:	bd08      	pop	{r3, pc}
 800a7da:	bf00      	nop
 800a7dc:	0800d790 	.word	0x0800d790

0800a7e0 <USBD_LL_PrepareReceive>:
{
 800a7e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7e2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a7e6:	f7fc ffa5 	bl	8007734 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800a7ea:	2803      	cmp	r0, #3
 800a7ec:	bf96      	itet	ls
 800a7ee:	4b02      	ldrls	r3, [pc, #8]	; (800a7f8 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a7f0:	2002      	movhi	r0, #2
 800a7f2:	5c18      	ldrbls	r0, [r3, r0]
}
 800a7f4:	bd08      	pop	{r3, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0800d790 	.word	0x0800d790

0800a7fc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7fc:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800a800:	f7fc bfb0 	b.w	8007764 <HAL_PCD_EP_GetRxCount>

0800a804 <USBD_static_malloc>:
}
 800a804:	4800      	ldr	r0, [pc, #0]	; (800a808 <USBD_static_malloc+0x4>)
 800a806:	4770      	bx	lr
 800a808:	20001738 	.word	0x20001738

0800a80c <USBD_static_free>:
}
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <__errno>:
 800a810:	4b01      	ldr	r3, [pc, #4]	; (800a818 <__errno+0x8>)
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	200001a8 	.word	0x200001a8

0800a81c <__libc_init_array>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	2600      	movs	r6, #0
 800a820:	4d0c      	ldr	r5, [pc, #48]	; (800a854 <__libc_init_array+0x38>)
 800a822:	4c0d      	ldr	r4, [pc, #52]	; (800a858 <__libc_init_array+0x3c>)
 800a824:	1b64      	subs	r4, r4, r5
 800a826:	10a4      	asrs	r4, r4, #2
 800a828:	42a6      	cmp	r6, r4
 800a82a:	d109      	bne.n	800a840 <__libc_init_array+0x24>
 800a82c:	f002 ff10 	bl	800d650 <_init>
 800a830:	2600      	movs	r6, #0
 800a832:	4d0a      	ldr	r5, [pc, #40]	; (800a85c <__libc_init_array+0x40>)
 800a834:	4c0a      	ldr	r4, [pc, #40]	; (800a860 <__libc_init_array+0x44>)
 800a836:	1b64      	subs	r4, r4, r5
 800a838:	10a4      	asrs	r4, r4, #2
 800a83a:	42a6      	cmp	r6, r4
 800a83c:	d105      	bne.n	800a84a <__libc_init_array+0x2e>
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	f855 3b04 	ldr.w	r3, [r5], #4
 800a844:	4798      	blx	r3
 800a846:	3601      	adds	r6, #1
 800a848:	e7ee      	b.n	800a828 <__libc_init_array+0xc>
 800a84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a84e:	4798      	blx	r3
 800a850:	3601      	adds	r6, #1
 800a852:	e7f2      	b.n	800a83a <__libc_init_array+0x1e>
 800a854:	0800db74 	.word	0x0800db74
 800a858:	0800db74 	.word	0x0800db74
 800a85c:	0800db74 	.word	0x0800db74
 800a860:	0800db78 	.word	0x0800db78

0800a864 <memcpy>:
 800a864:	440a      	add	r2, r1
 800a866:	4291      	cmp	r1, r2
 800a868:	f100 33ff 	add.w	r3, r0, #4294967295
 800a86c:	d100      	bne.n	800a870 <memcpy+0xc>
 800a86e:	4770      	bx	lr
 800a870:	b510      	push	{r4, lr}
 800a872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a876:	4291      	cmp	r1, r2
 800a878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a87c:	d1f9      	bne.n	800a872 <memcpy+0xe>
 800a87e:	bd10      	pop	{r4, pc}

0800a880 <memmove>:
 800a880:	4288      	cmp	r0, r1
 800a882:	b510      	push	{r4, lr}
 800a884:	eb01 0402 	add.w	r4, r1, r2
 800a888:	d902      	bls.n	800a890 <memmove+0x10>
 800a88a:	4284      	cmp	r4, r0
 800a88c:	4623      	mov	r3, r4
 800a88e:	d807      	bhi.n	800a8a0 <memmove+0x20>
 800a890:	1e43      	subs	r3, r0, #1
 800a892:	42a1      	cmp	r1, r4
 800a894:	d008      	beq.n	800a8a8 <memmove+0x28>
 800a896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a89a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a89e:	e7f8      	b.n	800a892 <memmove+0x12>
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	4402      	add	r2, r0
 800a8a4:	428a      	cmp	r2, r1
 800a8a6:	d100      	bne.n	800a8aa <memmove+0x2a>
 800a8a8:	bd10      	pop	{r4, pc}
 800a8aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8b2:	e7f7      	b.n	800a8a4 <memmove+0x24>

0800a8b4 <memset>:
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	4402      	add	r2, r0
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d100      	bne.n	800a8be <memset+0xa>
 800a8bc:	4770      	bx	lr
 800a8be:	f803 1b01 	strb.w	r1, [r3], #1
 800a8c2:	e7f9      	b.n	800a8b8 <memset+0x4>

0800a8c4 <__cvt>:
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ca:	461f      	mov	r7, r3
 800a8cc:	bfbb      	ittet	lt
 800a8ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a8d2:	461f      	movlt	r7, r3
 800a8d4:	2300      	movge	r3, #0
 800a8d6:	232d      	movlt	r3, #45	; 0x2d
 800a8d8:	b088      	sub	sp, #32
 800a8da:	4614      	mov	r4, r2
 800a8dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a8e0:	7013      	strb	r3, [r2, #0]
 800a8e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a8e8:	f023 0820 	bic.w	r8, r3, #32
 800a8ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8f0:	d005      	beq.n	800a8fe <__cvt+0x3a>
 800a8f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8f6:	d100      	bne.n	800a8fa <__cvt+0x36>
 800a8f8:	3501      	adds	r5, #1
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e000      	b.n	800a900 <__cvt+0x3c>
 800a8fe:	2303      	movs	r3, #3
 800a900:	aa07      	add	r2, sp, #28
 800a902:	9204      	str	r2, [sp, #16]
 800a904:	aa06      	add	r2, sp, #24
 800a906:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a90a:	e9cd 3500 	strd	r3, r5, [sp]
 800a90e:	4622      	mov	r2, r4
 800a910:	463b      	mov	r3, r7
 800a912:	f000 fcf9 	bl	800b308 <_dtoa_r>
 800a916:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a91a:	4606      	mov	r6, r0
 800a91c:	d102      	bne.n	800a924 <__cvt+0x60>
 800a91e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a920:	07db      	lsls	r3, r3, #31
 800a922:	d522      	bpl.n	800a96a <__cvt+0xa6>
 800a924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a928:	eb06 0905 	add.w	r9, r6, r5
 800a92c:	d110      	bne.n	800a950 <__cvt+0x8c>
 800a92e:	7833      	ldrb	r3, [r6, #0]
 800a930:	2b30      	cmp	r3, #48	; 0x30
 800a932:	d10a      	bne.n	800a94a <__cvt+0x86>
 800a934:	2200      	movs	r2, #0
 800a936:	2300      	movs	r3, #0
 800a938:	4620      	mov	r0, r4
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f6 f84c 	bl	80009d8 <__aeabi_dcmpeq>
 800a940:	b918      	cbnz	r0, 800a94a <__cvt+0x86>
 800a942:	f1c5 0501 	rsb	r5, r5, #1
 800a946:	f8ca 5000 	str.w	r5, [sl]
 800a94a:	f8da 3000 	ldr.w	r3, [sl]
 800a94e:	4499      	add	r9, r3
 800a950:	2200      	movs	r2, #0
 800a952:	2300      	movs	r3, #0
 800a954:	4620      	mov	r0, r4
 800a956:	4639      	mov	r1, r7
 800a958:	f7f6 f83e 	bl	80009d8 <__aeabi_dcmpeq>
 800a95c:	b108      	cbz	r0, 800a962 <__cvt+0x9e>
 800a95e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a962:	2230      	movs	r2, #48	; 0x30
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	454b      	cmp	r3, r9
 800a968:	d307      	bcc.n	800a97a <__cvt+0xb6>
 800a96a:	4630      	mov	r0, r6
 800a96c:	9b07      	ldr	r3, [sp, #28]
 800a96e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a970:	1b9b      	subs	r3, r3, r6
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	b008      	add	sp, #32
 800a976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97a:	1c59      	adds	r1, r3, #1
 800a97c:	9107      	str	r1, [sp, #28]
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	e7f0      	b.n	800a964 <__cvt+0xa0>

0800a982 <__exponent>:
 800a982:	4603      	mov	r3, r0
 800a984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a986:	2900      	cmp	r1, #0
 800a988:	f803 2b02 	strb.w	r2, [r3], #2
 800a98c:	bfb6      	itet	lt
 800a98e:	222d      	movlt	r2, #45	; 0x2d
 800a990:	222b      	movge	r2, #43	; 0x2b
 800a992:	4249      	neglt	r1, r1
 800a994:	2909      	cmp	r1, #9
 800a996:	7042      	strb	r2, [r0, #1]
 800a998:	dd2b      	ble.n	800a9f2 <__exponent+0x70>
 800a99a:	f10d 0407 	add.w	r4, sp, #7
 800a99e:	46a4      	mov	ip, r4
 800a9a0:	270a      	movs	r7, #10
 800a9a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	46a6      	mov	lr, r4
 800a9aa:	fb07 1516 	mls	r5, r7, r6, r1
 800a9ae:	2a63      	cmp	r2, #99	; 0x63
 800a9b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9be:	dcf0      	bgt.n	800a9a2 <__exponent+0x20>
 800a9c0:	3130      	adds	r1, #48	; 0x30
 800a9c2:	f1ae 0502 	sub.w	r5, lr, #2
 800a9c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	1c44      	adds	r4, r0, #1
 800a9ce:	4561      	cmp	r1, ip
 800a9d0:	d30a      	bcc.n	800a9e8 <__exponent+0x66>
 800a9d2:	f10d 0209 	add.w	r2, sp, #9
 800a9d6:	eba2 020e 	sub.w	r2, r2, lr
 800a9da:	4565      	cmp	r5, ip
 800a9dc:	bf88      	it	hi
 800a9de:	2200      	movhi	r2, #0
 800a9e0:	4413      	add	r3, r2
 800a9e2:	1a18      	subs	r0, r3, r0
 800a9e4:	b003      	add	sp, #12
 800a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9f0:	e7ed      	b.n	800a9ce <__exponent+0x4c>
 800a9f2:	2330      	movs	r3, #48	; 0x30
 800a9f4:	3130      	adds	r1, #48	; 0x30
 800a9f6:	7083      	strb	r3, [r0, #2]
 800a9f8:	70c1      	strb	r1, [r0, #3]
 800a9fa:	1d03      	adds	r3, r0, #4
 800a9fc:	e7f1      	b.n	800a9e2 <__exponent+0x60>
	...

0800aa00 <_printf_float>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	b091      	sub	sp, #68	; 0x44
 800aa06:	460c      	mov	r4, r1
 800aa08:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800aa0c:	4616      	mov	r6, r2
 800aa0e:	461f      	mov	r7, r3
 800aa10:	4605      	mov	r5, r0
 800aa12:	f001 fa67 	bl	800bee4 <_localeconv_r>
 800aa16:	6803      	ldr	r3, [r0, #0]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa1c:	f7f5 fbb0 	bl	8000180 <strlen>
 800aa20:	2300      	movs	r3, #0
 800aa22:	930e      	str	r3, [sp, #56]	; 0x38
 800aa24:	f8d8 3000 	ldr.w	r3, [r8]
 800aa28:	900a      	str	r0, [sp, #40]	; 0x28
 800aa2a:	3307      	adds	r3, #7
 800aa2c:	f023 0307 	bic.w	r3, r3, #7
 800aa30:	f103 0208 	add.w	r2, r3, #8
 800aa34:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aa38:	f8d4 b000 	ldr.w	fp, [r4]
 800aa3c:	f8c8 2000 	str.w	r2, [r8]
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa48:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800aa4c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800aa50:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa52:	f04f 32ff 	mov.w	r2, #4294967295
 800aa56:	4640      	mov	r0, r8
 800aa58:	4b9c      	ldr	r3, [pc, #624]	; (800accc <_printf_float+0x2cc>)
 800aa5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa5c:	f7f5 ffee 	bl	8000a3c <__aeabi_dcmpun>
 800aa60:	bb70      	cbnz	r0, 800aac0 <_printf_float+0xc0>
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	4640      	mov	r0, r8
 800aa68:	4b98      	ldr	r3, [pc, #608]	; (800accc <_printf_float+0x2cc>)
 800aa6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa6c:	f7f5 ffc8 	bl	8000a00 <__aeabi_dcmple>
 800aa70:	bb30      	cbnz	r0, 800aac0 <_printf_float+0xc0>
 800aa72:	2200      	movs	r2, #0
 800aa74:	2300      	movs	r3, #0
 800aa76:	4640      	mov	r0, r8
 800aa78:	4651      	mov	r1, sl
 800aa7a:	f7f5 ffb7 	bl	80009ec <__aeabi_dcmplt>
 800aa7e:	b110      	cbz	r0, 800aa86 <_printf_float+0x86>
 800aa80:	232d      	movs	r3, #45	; 0x2d
 800aa82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa86:	4b92      	ldr	r3, [pc, #584]	; (800acd0 <_printf_float+0x2d0>)
 800aa88:	4892      	ldr	r0, [pc, #584]	; (800acd4 <_printf_float+0x2d4>)
 800aa8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aa8e:	bf94      	ite	ls
 800aa90:	4698      	movls	r8, r3
 800aa92:	4680      	movhi	r8, r0
 800aa94:	2303      	movs	r3, #3
 800aa96:	f04f 0a00 	mov.w	sl, #0
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	f02b 0304 	bic.w	r3, fp, #4
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	4633      	mov	r3, r6
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	9700      	str	r7, [sp, #0]
 800aaaa:	aa0f      	add	r2, sp, #60	; 0x3c
 800aaac:	f000 f9d4 	bl	800ae58 <_printf_common>
 800aab0:	3001      	adds	r0, #1
 800aab2:	f040 8090 	bne.w	800abd6 <_printf_float+0x1d6>
 800aab6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaba:	b011      	add	sp, #68	; 0x44
 800aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac0:	4642      	mov	r2, r8
 800aac2:	4653      	mov	r3, sl
 800aac4:	4640      	mov	r0, r8
 800aac6:	4651      	mov	r1, sl
 800aac8:	f7f5 ffb8 	bl	8000a3c <__aeabi_dcmpun>
 800aacc:	b148      	cbz	r0, 800aae2 <_printf_float+0xe2>
 800aace:	f1ba 0f00 	cmp.w	sl, #0
 800aad2:	bfb8      	it	lt
 800aad4:	232d      	movlt	r3, #45	; 0x2d
 800aad6:	4880      	ldr	r0, [pc, #512]	; (800acd8 <_printf_float+0x2d8>)
 800aad8:	bfb8      	it	lt
 800aada:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aade:	4b7f      	ldr	r3, [pc, #508]	; (800acdc <_printf_float+0x2dc>)
 800aae0:	e7d3      	b.n	800aa8a <_printf_float+0x8a>
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	d142      	bne.n	800ab72 <_printf_float+0x172>
 800aaec:	2306      	movs	r3, #6
 800aaee:	6063      	str	r3, [r4, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	9206      	str	r2, [sp, #24]
 800aaf4:	aa0e      	add	r2, sp, #56	; 0x38
 800aaf6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800aafa:	aa0d      	add	r2, sp, #52	; 0x34
 800aafc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ab00:	9203      	str	r2, [sp, #12]
 800ab02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ab06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ab0a:	6023      	str	r3, [r4, #0]
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	4642      	mov	r2, r8
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4628      	mov	r0, r5
 800ab14:	4653      	mov	r3, sl
 800ab16:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab18:	f7ff fed4 	bl	800a8c4 <__cvt>
 800ab1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab1e:	4680      	mov	r8, r0
 800ab20:	2947      	cmp	r1, #71	; 0x47
 800ab22:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab24:	d108      	bne.n	800ab38 <_printf_float+0x138>
 800ab26:	1cc8      	adds	r0, r1, #3
 800ab28:	db02      	blt.n	800ab30 <_printf_float+0x130>
 800ab2a:	6863      	ldr	r3, [r4, #4]
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	dd40      	ble.n	800abb2 <_printf_float+0x1b2>
 800ab30:	f1a9 0902 	sub.w	r9, r9, #2
 800ab34:	fa5f f989 	uxtb.w	r9, r9
 800ab38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ab3c:	d81f      	bhi.n	800ab7e <_printf_float+0x17e>
 800ab3e:	464a      	mov	r2, r9
 800ab40:	3901      	subs	r1, #1
 800ab42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab46:	910d      	str	r1, [sp, #52]	; 0x34
 800ab48:	f7ff ff1b 	bl	800a982 <__exponent>
 800ab4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab4e:	4682      	mov	sl, r0
 800ab50:	1813      	adds	r3, r2, r0
 800ab52:	2a01      	cmp	r2, #1
 800ab54:	6123      	str	r3, [r4, #16]
 800ab56:	dc02      	bgt.n	800ab5e <_printf_float+0x15e>
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	07d2      	lsls	r2, r2, #31
 800ab5c:	d501      	bpl.n	800ab62 <_printf_float+0x162>
 800ab5e:	3301      	adds	r3, #1
 800ab60:	6123      	str	r3, [r4, #16]
 800ab62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d09b      	beq.n	800aaa2 <_printf_float+0xa2>
 800ab6a:	232d      	movs	r3, #45	; 0x2d
 800ab6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab70:	e797      	b.n	800aaa2 <_printf_float+0xa2>
 800ab72:	2947      	cmp	r1, #71	; 0x47
 800ab74:	d1bc      	bne.n	800aaf0 <_printf_float+0xf0>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1ba      	bne.n	800aaf0 <_printf_float+0xf0>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e7b7      	b.n	800aaee <_printf_float+0xee>
 800ab7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ab82:	d118      	bne.n	800abb6 <_printf_float+0x1b6>
 800ab84:	2900      	cmp	r1, #0
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	dd0b      	ble.n	800aba2 <_printf_float+0x1a2>
 800ab8a:	6121      	str	r1, [r4, #16]
 800ab8c:	b913      	cbnz	r3, 800ab94 <_printf_float+0x194>
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	07d0      	lsls	r0, r2, #31
 800ab92:	d502      	bpl.n	800ab9a <_printf_float+0x19a>
 800ab94:	3301      	adds	r3, #1
 800ab96:	440b      	add	r3, r1
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	f04f 0a00 	mov.w	sl, #0
 800ab9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800aba0:	e7df      	b.n	800ab62 <_printf_float+0x162>
 800aba2:	b913      	cbnz	r3, 800abaa <_printf_float+0x1aa>
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	07d2      	lsls	r2, r2, #31
 800aba8:	d501      	bpl.n	800abae <_printf_float+0x1ae>
 800abaa:	3302      	adds	r3, #2
 800abac:	e7f4      	b.n	800ab98 <_printf_float+0x198>
 800abae:	2301      	movs	r3, #1
 800abb0:	e7f2      	b.n	800ab98 <_printf_float+0x198>
 800abb2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800abb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abb8:	4299      	cmp	r1, r3
 800abba:	db05      	blt.n	800abc8 <_printf_float+0x1c8>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	6121      	str	r1, [r4, #16]
 800abc0:	07d8      	lsls	r0, r3, #31
 800abc2:	d5ea      	bpl.n	800ab9a <_printf_float+0x19a>
 800abc4:	1c4b      	adds	r3, r1, #1
 800abc6:	e7e7      	b.n	800ab98 <_printf_float+0x198>
 800abc8:	2900      	cmp	r1, #0
 800abca:	bfcc      	ite	gt
 800abcc:	2201      	movgt	r2, #1
 800abce:	f1c1 0202 	rsble	r2, r1, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	e7e0      	b.n	800ab98 <_printf_float+0x198>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	055a      	lsls	r2, r3, #21
 800abda:	d407      	bmi.n	800abec <_printf_float+0x1ec>
 800abdc:	6923      	ldr	r3, [r4, #16]
 800abde:	4642      	mov	r2, r8
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	d12b      	bne.n	800ac42 <_printf_float+0x242>
 800abea:	e764      	b.n	800aab6 <_printf_float+0xb6>
 800abec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800abf0:	f240 80dd 	bls.w	800adae <_printf_float+0x3ae>
 800abf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	f7f5 feec 	bl	80009d8 <__aeabi_dcmpeq>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d033      	beq.n	800ac6c <_printf_float+0x26c>
 800ac04:	2301      	movs	r3, #1
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	4a35      	ldr	r2, [pc, #212]	; (800ace0 <_printf_float+0x2e0>)
 800ac0c:	47b8      	blx	r7
 800ac0e:	3001      	adds	r0, #1
 800ac10:	f43f af51 	beq.w	800aab6 <_printf_float+0xb6>
 800ac14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	db02      	blt.n	800ac22 <_printf_float+0x222>
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	07d8      	lsls	r0, r3, #31
 800ac20:	d50f      	bpl.n	800ac42 <_printf_float+0x242>
 800ac22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac26:	4631      	mov	r1, r6
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b8      	blx	r7
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	f43f af42 	beq.w	800aab6 <_printf_float+0xb6>
 800ac32:	f04f 0800 	mov.w	r8, #0
 800ac36:	f104 091a 	add.w	r9, r4, #26
 800ac3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4543      	cmp	r3, r8
 800ac40:	dc09      	bgt.n	800ac56 <_printf_float+0x256>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	079b      	lsls	r3, r3, #30
 800ac46:	f100 8102 	bmi.w	800ae4e <_printf_float+0x44e>
 800ac4a:	68e0      	ldr	r0, [r4, #12]
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac4e:	4298      	cmp	r0, r3
 800ac50:	bfb8      	it	lt
 800ac52:	4618      	movlt	r0, r3
 800ac54:	e731      	b.n	800aaba <_printf_float+0xba>
 800ac56:	2301      	movs	r3, #1
 800ac58:	464a      	mov	r2, r9
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	f43f af28 	beq.w	800aab6 <_printf_float+0xb6>
 800ac66:	f108 0801 	add.w	r8, r8, #1
 800ac6a:	e7e6      	b.n	800ac3a <_printf_float+0x23a>
 800ac6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dc38      	bgt.n	800ace4 <_printf_float+0x2e4>
 800ac72:	2301      	movs	r3, #1
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	4a19      	ldr	r2, [pc, #100]	; (800ace0 <_printf_float+0x2e0>)
 800ac7a:	47b8      	blx	r7
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	f43f af1a 	beq.w	800aab6 <_printf_float+0xb6>
 800ac82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac86:	4313      	orrs	r3, r2
 800ac88:	d102      	bne.n	800ac90 <_printf_float+0x290>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	07d9      	lsls	r1, r3, #31
 800ac8e:	d5d8      	bpl.n	800ac42 <_printf_float+0x242>
 800ac90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	f43f af0b 	beq.w	800aab6 <_printf_float+0xb6>
 800aca0:	f04f 0900 	mov.w	r9, #0
 800aca4:	f104 0a1a 	add.w	sl, r4, #26
 800aca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acaa:	425b      	negs	r3, r3
 800acac:	454b      	cmp	r3, r9
 800acae:	dc01      	bgt.n	800acb4 <_printf_float+0x2b4>
 800acb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb2:	e794      	b.n	800abde <_printf_float+0x1de>
 800acb4:	2301      	movs	r3, #1
 800acb6:	4652      	mov	r2, sl
 800acb8:	4631      	mov	r1, r6
 800acba:	4628      	mov	r0, r5
 800acbc:	47b8      	blx	r7
 800acbe:	3001      	adds	r0, #1
 800acc0:	f43f aef9 	beq.w	800aab6 <_printf_float+0xb6>
 800acc4:	f109 0901 	add.w	r9, r9, #1
 800acc8:	e7ee      	b.n	800aca8 <_printf_float+0x2a8>
 800acca:	bf00      	nop
 800accc:	7fefffff 	.word	0x7fefffff
 800acd0:	0800d798 	.word	0x0800d798
 800acd4:	0800d79c 	.word	0x0800d79c
 800acd8:	0800d7a4 	.word	0x0800d7a4
 800acdc:	0800d7a0 	.word	0x0800d7a0
 800ace0:	0800d7a8 	.word	0x0800d7a8
 800ace4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ace6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ace8:	429a      	cmp	r2, r3
 800acea:	bfa8      	it	ge
 800acec:	461a      	movge	r2, r3
 800acee:	2a00      	cmp	r2, #0
 800acf0:	4691      	mov	r9, r2
 800acf2:	dc37      	bgt.n	800ad64 <_printf_float+0x364>
 800acf4:	f04f 0b00 	mov.w	fp, #0
 800acf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acfc:	f104 021a 	add.w	r2, r4, #26
 800ad00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ad04:	ebaa 0309 	sub.w	r3, sl, r9
 800ad08:	455b      	cmp	r3, fp
 800ad0a:	dc33      	bgt.n	800ad74 <_printf_float+0x374>
 800ad0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad10:	429a      	cmp	r2, r3
 800ad12:	db3b      	blt.n	800ad8c <_printf_float+0x38c>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	07da      	lsls	r2, r3, #31
 800ad18:	d438      	bmi.n	800ad8c <_printf_float+0x38c>
 800ad1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad1e:	eba3 020a 	sub.w	r2, r3, sl
 800ad22:	eba3 0901 	sub.w	r9, r3, r1
 800ad26:	4591      	cmp	r9, r2
 800ad28:	bfa8      	it	ge
 800ad2a:	4691      	movge	r9, r2
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	dc34      	bgt.n	800ad9c <_printf_float+0x39c>
 800ad32:	f04f 0800 	mov.w	r8, #0
 800ad36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad3a:	f104 0a1a 	add.w	sl, r4, #26
 800ad3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	eba3 0309 	sub.w	r3, r3, r9
 800ad48:	4543      	cmp	r3, r8
 800ad4a:	f77f af7a 	ble.w	800ac42 <_printf_float+0x242>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4652      	mov	r2, sl
 800ad52:	4631      	mov	r1, r6
 800ad54:	4628      	mov	r0, r5
 800ad56:	47b8      	blx	r7
 800ad58:	3001      	adds	r0, #1
 800ad5a:	f43f aeac 	beq.w	800aab6 <_printf_float+0xb6>
 800ad5e:	f108 0801 	add.w	r8, r8, #1
 800ad62:	e7ec      	b.n	800ad3e <_printf_float+0x33e>
 800ad64:	4613      	mov	r3, r2
 800ad66:	4631      	mov	r1, r6
 800ad68:	4642      	mov	r2, r8
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b8      	blx	r7
 800ad6e:	3001      	adds	r0, #1
 800ad70:	d1c0      	bne.n	800acf4 <_printf_float+0x2f4>
 800ad72:	e6a0      	b.n	800aab6 <_printf_float+0xb6>
 800ad74:	2301      	movs	r3, #1
 800ad76:	4631      	mov	r1, r6
 800ad78:	4628      	mov	r0, r5
 800ad7a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad7c:	47b8      	blx	r7
 800ad7e:	3001      	adds	r0, #1
 800ad80:	f43f ae99 	beq.w	800aab6 <_printf_float+0xb6>
 800ad84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad86:	f10b 0b01 	add.w	fp, fp, #1
 800ad8a:	e7b9      	b.n	800ad00 <_printf_float+0x300>
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	d1bf      	bne.n	800ad1a <_printf_float+0x31a>
 800ad9a:	e68c      	b.n	800aab6 <_printf_float+0xb6>
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4628      	mov	r0, r5
 800ada2:	eb08 020a 	add.w	r2, r8, sl
 800ada6:	47b8      	blx	r7
 800ada8:	3001      	adds	r0, #1
 800adaa:	d1c2      	bne.n	800ad32 <_printf_float+0x332>
 800adac:	e683      	b.n	800aab6 <_printf_float+0xb6>
 800adae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adb0:	2a01      	cmp	r2, #1
 800adb2:	dc01      	bgt.n	800adb8 <_printf_float+0x3b8>
 800adb4:	07db      	lsls	r3, r3, #31
 800adb6:	d537      	bpl.n	800ae28 <_printf_float+0x428>
 800adb8:	2301      	movs	r3, #1
 800adba:	4642      	mov	r2, r8
 800adbc:	4631      	mov	r1, r6
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b8      	blx	r7
 800adc2:	3001      	adds	r0, #1
 800adc4:	f43f ae77 	beq.w	800aab6 <_printf_float+0xb6>
 800adc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	47b8      	blx	r7
 800add2:	3001      	adds	r0, #1
 800add4:	f43f ae6f 	beq.w	800aab6 <_printf_float+0xb6>
 800add8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800addc:	2200      	movs	r2, #0
 800adde:	2300      	movs	r3, #0
 800ade0:	f7f5 fdfa 	bl	80009d8 <__aeabi_dcmpeq>
 800ade4:	b9d8      	cbnz	r0, 800ae1e <_printf_float+0x41e>
 800ade6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade8:	f108 0201 	add.w	r2, r8, #1
 800adec:	3b01      	subs	r3, #1
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	d10e      	bne.n	800ae16 <_printf_float+0x416>
 800adf8:	e65d      	b.n	800aab6 <_printf_float+0xb6>
 800adfa:	2301      	movs	r3, #1
 800adfc:	464a      	mov	r2, r9
 800adfe:	4631      	mov	r1, r6
 800ae00:	4628      	mov	r0, r5
 800ae02:	47b8      	blx	r7
 800ae04:	3001      	adds	r0, #1
 800ae06:	f43f ae56 	beq.w	800aab6 <_printf_float+0xb6>
 800ae0a:	f108 0801 	add.w	r8, r8, #1
 800ae0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae10:	3b01      	subs	r3, #1
 800ae12:	4543      	cmp	r3, r8
 800ae14:	dcf1      	bgt.n	800adfa <_printf_float+0x3fa>
 800ae16:	4653      	mov	r3, sl
 800ae18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae1c:	e6e0      	b.n	800abe0 <_printf_float+0x1e0>
 800ae1e:	f04f 0800 	mov.w	r8, #0
 800ae22:	f104 091a 	add.w	r9, r4, #26
 800ae26:	e7f2      	b.n	800ae0e <_printf_float+0x40e>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	e7df      	b.n	800adee <_printf_float+0x3ee>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	464a      	mov	r2, r9
 800ae32:	4631      	mov	r1, r6
 800ae34:	4628      	mov	r0, r5
 800ae36:	47b8      	blx	r7
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f43f ae3c 	beq.w	800aab6 <_printf_float+0xb6>
 800ae3e:	f108 0801 	add.w	r8, r8, #1
 800ae42:	68e3      	ldr	r3, [r4, #12]
 800ae44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae46:	1a5b      	subs	r3, r3, r1
 800ae48:	4543      	cmp	r3, r8
 800ae4a:	dcf0      	bgt.n	800ae2e <_printf_float+0x42e>
 800ae4c:	e6fd      	b.n	800ac4a <_printf_float+0x24a>
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	f104 0919 	add.w	r9, r4, #25
 800ae56:	e7f4      	b.n	800ae42 <_printf_float+0x442>

0800ae58 <_printf_common>:
 800ae58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	4616      	mov	r6, r2
 800ae5e:	4699      	mov	r9, r3
 800ae60:	688a      	ldr	r2, [r1, #8]
 800ae62:	690b      	ldr	r3, [r1, #16]
 800ae64:	4607      	mov	r7, r0
 800ae66:	4293      	cmp	r3, r2
 800ae68:	bfb8      	it	lt
 800ae6a:	4613      	movlt	r3, r2
 800ae6c:	6033      	str	r3, [r6, #0]
 800ae6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae72:	460c      	mov	r4, r1
 800ae74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae78:	b10a      	cbz	r2, 800ae7e <_printf_common+0x26>
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	6033      	str	r3, [r6, #0]
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	0699      	lsls	r1, r3, #26
 800ae82:	bf42      	ittt	mi
 800ae84:	6833      	ldrmi	r3, [r6, #0]
 800ae86:	3302      	addmi	r3, #2
 800ae88:	6033      	strmi	r3, [r6, #0]
 800ae8a:	6825      	ldr	r5, [r4, #0]
 800ae8c:	f015 0506 	ands.w	r5, r5, #6
 800ae90:	d106      	bne.n	800aea0 <_printf_common+0x48>
 800ae92:	f104 0a19 	add.w	sl, r4, #25
 800ae96:	68e3      	ldr	r3, [r4, #12]
 800ae98:	6832      	ldr	r2, [r6, #0]
 800ae9a:	1a9b      	subs	r3, r3, r2
 800ae9c:	42ab      	cmp	r3, r5
 800ae9e:	dc28      	bgt.n	800aef2 <_printf_common+0x9a>
 800aea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aea4:	1e13      	subs	r3, r2, #0
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	bf18      	it	ne
 800aeaa:	2301      	movne	r3, #1
 800aeac:	0692      	lsls	r2, r2, #26
 800aeae:	d42d      	bmi.n	800af0c <_printf_common+0xb4>
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aeb8:	47c0      	blx	r8
 800aeba:	3001      	adds	r0, #1
 800aebc:	d020      	beq.n	800af00 <_printf_common+0xa8>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	68e5      	ldr	r5, [r4, #12]
 800aec2:	f003 0306 	and.w	r3, r3, #6
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	bf18      	it	ne
 800aeca:	2500      	movne	r5, #0
 800aecc:	6832      	ldr	r2, [r6, #0]
 800aece:	f04f 0600 	mov.w	r6, #0
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	bf08      	it	eq
 800aed6:	1aad      	subeq	r5, r5, r2
 800aed8:	6922      	ldr	r2, [r4, #16]
 800aeda:	bf08      	it	eq
 800aedc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aee0:	4293      	cmp	r3, r2
 800aee2:	bfc4      	itt	gt
 800aee4:	1a9b      	subgt	r3, r3, r2
 800aee6:	18ed      	addgt	r5, r5, r3
 800aee8:	341a      	adds	r4, #26
 800aeea:	42b5      	cmp	r5, r6
 800aeec:	d11a      	bne.n	800af24 <_printf_common+0xcc>
 800aeee:	2000      	movs	r0, #0
 800aef0:	e008      	b.n	800af04 <_printf_common+0xac>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4652      	mov	r2, sl
 800aef6:	4649      	mov	r1, r9
 800aef8:	4638      	mov	r0, r7
 800aefa:	47c0      	blx	r8
 800aefc:	3001      	adds	r0, #1
 800aefe:	d103      	bne.n	800af08 <_printf_common+0xb0>
 800af00:	f04f 30ff 	mov.w	r0, #4294967295
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	3501      	adds	r5, #1
 800af0a:	e7c4      	b.n	800ae96 <_printf_common+0x3e>
 800af0c:	2030      	movs	r0, #48	; 0x30
 800af0e:	18e1      	adds	r1, r4, r3
 800af10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af1a:	4422      	add	r2, r4
 800af1c:	3302      	adds	r3, #2
 800af1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af22:	e7c5      	b.n	800aeb0 <_printf_common+0x58>
 800af24:	2301      	movs	r3, #1
 800af26:	4622      	mov	r2, r4
 800af28:	4649      	mov	r1, r9
 800af2a:	4638      	mov	r0, r7
 800af2c:	47c0      	blx	r8
 800af2e:	3001      	adds	r0, #1
 800af30:	d0e6      	beq.n	800af00 <_printf_common+0xa8>
 800af32:	3601      	adds	r6, #1
 800af34:	e7d9      	b.n	800aeea <_printf_common+0x92>
	...

0800af38 <_printf_i>:
 800af38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	7e0f      	ldrb	r7, [r1, #24]
 800af3e:	4691      	mov	r9, r2
 800af40:	2f78      	cmp	r7, #120	; 0x78
 800af42:	4680      	mov	r8, r0
 800af44:	460c      	mov	r4, r1
 800af46:	469a      	mov	sl, r3
 800af48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af4e:	d807      	bhi.n	800af60 <_printf_i+0x28>
 800af50:	2f62      	cmp	r7, #98	; 0x62
 800af52:	d80a      	bhi.n	800af6a <_printf_i+0x32>
 800af54:	2f00      	cmp	r7, #0
 800af56:	f000 80d9 	beq.w	800b10c <_printf_i+0x1d4>
 800af5a:	2f58      	cmp	r7, #88	; 0x58
 800af5c:	f000 80a4 	beq.w	800b0a8 <_printf_i+0x170>
 800af60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af68:	e03a      	b.n	800afe0 <_printf_i+0xa8>
 800af6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af6e:	2b15      	cmp	r3, #21
 800af70:	d8f6      	bhi.n	800af60 <_printf_i+0x28>
 800af72:	a101      	add	r1, pc, #4	; (adr r1, 800af78 <_printf_i+0x40>)
 800af74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af78:	0800afd1 	.word	0x0800afd1
 800af7c:	0800afe5 	.word	0x0800afe5
 800af80:	0800af61 	.word	0x0800af61
 800af84:	0800af61 	.word	0x0800af61
 800af88:	0800af61 	.word	0x0800af61
 800af8c:	0800af61 	.word	0x0800af61
 800af90:	0800afe5 	.word	0x0800afe5
 800af94:	0800af61 	.word	0x0800af61
 800af98:	0800af61 	.word	0x0800af61
 800af9c:	0800af61 	.word	0x0800af61
 800afa0:	0800af61 	.word	0x0800af61
 800afa4:	0800b0f3 	.word	0x0800b0f3
 800afa8:	0800b015 	.word	0x0800b015
 800afac:	0800b0d5 	.word	0x0800b0d5
 800afb0:	0800af61 	.word	0x0800af61
 800afb4:	0800af61 	.word	0x0800af61
 800afb8:	0800b115 	.word	0x0800b115
 800afbc:	0800af61 	.word	0x0800af61
 800afc0:	0800b015 	.word	0x0800b015
 800afc4:	0800af61 	.word	0x0800af61
 800afc8:	0800af61 	.word	0x0800af61
 800afcc:	0800b0dd 	.word	0x0800b0dd
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	602a      	str	r2, [r5, #0]
 800afd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afe0:	2301      	movs	r3, #1
 800afe2:	e0a4      	b.n	800b12e <_printf_i+0x1f6>
 800afe4:	6820      	ldr	r0, [r4, #0]
 800afe6:	6829      	ldr	r1, [r5, #0]
 800afe8:	0606      	lsls	r6, r0, #24
 800afea:	f101 0304 	add.w	r3, r1, #4
 800afee:	d50a      	bpl.n	800b006 <_printf_i+0xce>
 800aff0:	680e      	ldr	r6, [r1, #0]
 800aff2:	602b      	str	r3, [r5, #0]
 800aff4:	2e00      	cmp	r6, #0
 800aff6:	da03      	bge.n	800b000 <_printf_i+0xc8>
 800aff8:	232d      	movs	r3, #45	; 0x2d
 800affa:	4276      	negs	r6, r6
 800affc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b000:	230a      	movs	r3, #10
 800b002:	485e      	ldr	r0, [pc, #376]	; (800b17c <_printf_i+0x244>)
 800b004:	e019      	b.n	800b03a <_printf_i+0x102>
 800b006:	680e      	ldr	r6, [r1, #0]
 800b008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	bf18      	it	ne
 800b010:	b236      	sxthne	r6, r6
 800b012:	e7ef      	b.n	800aff4 <_printf_i+0xbc>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	6820      	ldr	r0, [r4, #0]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	6029      	str	r1, [r5, #0]
 800b01c:	0601      	lsls	r1, r0, #24
 800b01e:	d501      	bpl.n	800b024 <_printf_i+0xec>
 800b020:	681e      	ldr	r6, [r3, #0]
 800b022:	e002      	b.n	800b02a <_printf_i+0xf2>
 800b024:	0646      	lsls	r6, r0, #25
 800b026:	d5fb      	bpl.n	800b020 <_printf_i+0xe8>
 800b028:	881e      	ldrh	r6, [r3, #0]
 800b02a:	2f6f      	cmp	r7, #111	; 0x6f
 800b02c:	bf0c      	ite	eq
 800b02e:	2308      	moveq	r3, #8
 800b030:	230a      	movne	r3, #10
 800b032:	4852      	ldr	r0, [pc, #328]	; (800b17c <_printf_i+0x244>)
 800b034:	2100      	movs	r1, #0
 800b036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b03a:	6865      	ldr	r5, [r4, #4]
 800b03c:	2d00      	cmp	r5, #0
 800b03e:	bfa8      	it	ge
 800b040:	6821      	ldrge	r1, [r4, #0]
 800b042:	60a5      	str	r5, [r4, #8]
 800b044:	bfa4      	itt	ge
 800b046:	f021 0104 	bicge.w	r1, r1, #4
 800b04a:	6021      	strge	r1, [r4, #0]
 800b04c:	b90e      	cbnz	r6, 800b052 <_printf_i+0x11a>
 800b04e:	2d00      	cmp	r5, #0
 800b050:	d04d      	beq.n	800b0ee <_printf_i+0x1b6>
 800b052:	4615      	mov	r5, r2
 800b054:	fbb6 f1f3 	udiv	r1, r6, r3
 800b058:	fb03 6711 	mls	r7, r3, r1, r6
 800b05c:	5dc7      	ldrb	r7, [r0, r7]
 800b05e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b062:	4637      	mov	r7, r6
 800b064:	42bb      	cmp	r3, r7
 800b066:	460e      	mov	r6, r1
 800b068:	d9f4      	bls.n	800b054 <_printf_i+0x11c>
 800b06a:	2b08      	cmp	r3, #8
 800b06c:	d10b      	bne.n	800b086 <_printf_i+0x14e>
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	07de      	lsls	r6, r3, #31
 800b072:	d508      	bpl.n	800b086 <_printf_i+0x14e>
 800b074:	6923      	ldr	r3, [r4, #16]
 800b076:	6861      	ldr	r1, [r4, #4]
 800b078:	4299      	cmp	r1, r3
 800b07a:	bfde      	ittt	le
 800b07c:	2330      	movle	r3, #48	; 0x30
 800b07e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b082:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b086:	1b52      	subs	r2, r2, r5
 800b088:	6122      	str	r2, [r4, #16]
 800b08a:	464b      	mov	r3, r9
 800b08c:	4621      	mov	r1, r4
 800b08e:	4640      	mov	r0, r8
 800b090:	f8cd a000 	str.w	sl, [sp]
 800b094:	aa03      	add	r2, sp, #12
 800b096:	f7ff fedf 	bl	800ae58 <_printf_common>
 800b09a:	3001      	adds	r0, #1
 800b09c:	d14c      	bne.n	800b138 <_printf_i+0x200>
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	b004      	add	sp, #16
 800b0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a8:	4834      	ldr	r0, [pc, #208]	; (800b17c <_printf_i+0x244>)
 800b0aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0ae:	6829      	ldr	r1, [r5, #0]
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0b6:	6029      	str	r1, [r5, #0]
 800b0b8:	061d      	lsls	r5, r3, #24
 800b0ba:	d514      	bpl.n	800b0e6 <_printf_i+0x1ae>
 800b0bc:	07df      	lsls	r7, r3, #31
 800b0be:	bf44      	itt	mi
 800b0c0:	f043 0320 	orrmi.w	r3, r3, #32
 800b0c4:	6023      	strmi	r3, [r4, #0]
 800b0c6:	b91e      	cbnz	r6, 800b0d0 <_printf_i+0x198>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	f023 0320 	bic.w	r3, r3, #32
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	2310      	movs	r3, #16
 800b0d2:	e7af      	b.n	800b034 <_printf_i+0xfc>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	f043 0320 	orr.w	r3, r3, #32
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	2378      	movs	r3, #120	; 0x78
 800b0de:	4828      	ldr	r0, [pc, #160]	; (800b180 <_printf_i+0x248>)
 800b0e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0e4:	e7e3      	b.n	800b0ae <_printf_i+0x176>
 800b0e6:	0659      	lsls	r1, r3, #25
 800b0e8:	bf48      	it	mi
 800b0ea:	b2b6      	uxthmi	r6, r6
 800b0ec:	e7e6      	b.n	800b0bc <_printf_i+0x184>
 800b0ee:	4615      	mov	r5, r2
 800b0f0:	e7bb      	b.n	800b06a <_printf_i+0x132>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	6826      	ldr	r6, [r4, #0]
 800b0f6:	1d18      	adds	r0, r3, #4
 800b0f8:	6961      	ldr	r1, [r4, #20]
 800b0fa:	6028      	str	r0, [r5, #0]
 800b0fc:	0635      	lsls	r5, r6, #24
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	d501      	bpl.n	800b106 <_printf_i+0x1ce>
 800b102:	6019      	str	r1, [r3, #0]
 800b104:	e002      	b.n	800b10c <_printf_i+0x1d4>
 800b106:	0670      	lsls	r0, r6, #25
 800b108:	d5fb      	bpl.n	800b102 <_printf_i+0x1ca>
 800b10a:	8019      	strh	r1, [r3, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	4615      	mov	r5, r2
 800b110:	6123      	str	r3, [r4, #16]
 800b112:	e7ba      	b.n	800b08a <_printf_i+0x152>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	2100      	movs	r1, #0
 800b118:	1d1a      	adds	r2, r3, #4
 800b11a:	602a      	str	r2, [r5, #0]
 800b11c:	681d      	ldr	r5, [r3, #0]
 800b11e:	6862      	ldr	r2, [r4, #4]
 800b120:	4628      	mov	r0, r5
 800b122:	f000 feeb 	bl	800befc <memchr>
 800b126:	b108      	cbz	r0, 800b12c <_printf_i+0x1f4>
 800b128:	1b40      	subs	r0, r0, r5
 800b12a:	6060      	str	r0, [r4, #4]
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	2300      	movs	r3, #0
 800b132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b136:	e7a8      	b.n	800b08a <_printf_i+0x152>
 800b138:	462a      	mov	r2, r5
 800b13a:	4649      	mov	r1, r9
 800b13c:	4640      	mov	r0, r8
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	47d0      	blx	sl
 800b142:	3001      	adds	r0, #1
 800b144:	d0ab      	beq.n	800b09e <_printf_i+0x166>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	079b      	lsls	r3, r3, #30
 800b14a:	d413      	bmi.n	800b174 <_printf_i+0x23c>
 800b14c:	68e0      	ldr	r0, [r4, #12]
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	4298      	cmp	r0, r3
 800b152:	bfb8      	it	lt
 800b154:	4618      	movlt	r0, r3
 800b156:	e7a4      	b.n	800b0a2 <_printf_i+0x16a>
 800b158:	2301      	movs	r3, #1
 800b15a:	4632      	mov	r2, r6
 800b15c:	4649      	mov	r1, r9
 800b15e:	4640      	mov	r0, r8
 800b160:	47d0      	blx	sl
 800b162:	3001      	adds	r0, #1
 800b164:	d09b      	beq.n	800b09e <_printf_i+0x166>
 800b166:	3501      	adds	r5, #1
 800b168:	68e3      	ldr	r3, [r4, #12]
 800b16a:	9903      	ldr	r1, [sp, #12]
 800b16c:	1a5b      	subs	r3, r3, r1
 800b16e:	42ab      	cmp	r3, r5
 800b170:	dcf2      	bgt.n	800b158 <_printf_i+0x220>
 800b172:	e7eb      	b.n	800b14c <_printf_i+0x214>
 800b174:	2500      	movs	r5, #0
 800b176:	f104 0619 	add.w	r6, r4, #25
 800b17a:	e7f5      	b.n	800b168 <_printf_i+0x230>
 800b17c:	0800d7aa 	.word	0x0800d7aa
 800b180:	0800d7bb 	.word	0x0800d7bb

0800b184 <sniprintf>:
 800b184:	b40c      	push	{r2, r3}
 800b186:	b530      	push	{r4, r5, lr}
 800b188:	4b17      	ldr	r3, [pc, #92]	; (800b1e8 <sniprintf+0x64>)
 800b18a:	1e0c      	subs	r4, r1, #0
 800b18c:	681d      	ldr	r5, [r3, #0]
 800b18e:	b09d      	sub	sp, #116	; 0x74
 800b190:	da08      	bge.n	800b1a4 <sniprintf+0x20>
 800b192:	238b      	movs	r3, #139	; 0x8b
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	b01d      	add	sp, #116	; 0x74
 800b19c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1a0:	b002      	add	sp, #8
 800b1a2:	4770      	bx	lr
 800b1a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b1a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b1ac:	bf0c      	ite	eq
 800b1ae:	4623      	moveq	r3, r4
 800b1b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	9307      	str	r3, [sp, #28]
 800b1b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1bc:	9002      	str	r0, [sp, #8]
 800b1be:	9006      	str	r0, [sp, #24]
 800b1c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	ab21      	add	r3, sp, #132	; 0x84
 800b1c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1ca:	a902      	add	r1, sp, #8
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	f001 fb71 	bl	800c8b4 <_svfiprintf_r>
 800b1d2:	1c43      	adds	r3, r0, #1
 800b1d4:	bfbc      	itt	lt
 800b1d6:	238b      	movlt	r3, #139	; 0x8b
 800b1d8:	602b      	strlt	r3, [r5, #0]
 800b1da:	2c00      	cmp	r4, #0
 800b1dc:	d0dd      	beq.n	800b19a <sniprintf+0x16>
 800b1de:	2200      	movs	r2, #0
 800b1e0:	9b02      	ldr	r3, [sp, #8]
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	e7d9      	b.n	800b19a <sniprintf+0x16>
 800b1e6:	bf00      	nop
 800b1e8:	200001a8 	.word	0x200001a8

0800b1ec <quorem>:
 800b1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	6903      	ldr	r3, [r0, #16]
 800b1f2:	690c      	ldr	r4, [r1, #16]
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	f2c0 8082 	blt.w	800b300 <quorem+0x114>
 800b1fc:	3c01      	subs	r4, #1
 800b1fe:	f100 0514 	add.w	r5, r0, #20
 800b202:	f101 0814 	add.w	r8, r1, #20
 800b206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b20a:	9301      	str	r3, [sp, #4]
 800b20c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b210:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b214:	3301      	adds	r3, #1
 800b216:	429a      	cmp	r2, r3
 800b218:	fbb2 f6f3 	udiv	r6, r2, r3
 800b21c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b220:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b224:	d331      	bcc.n	800b28a <quorem+0x9e>
 800b226:	f04f 0e00 	mov.w	lr, #0
 800b22a:	4640      	mov	r0, r8
 800b22c:	46ac      	mov	ip, r5
 800b22e:	46f2      	mov	sl, lr
 800b230:	f850 2b04 	ldr.w	r2, [r0], #4
 800b234:	b293      	uxth	r3, r2
 800b236:	fb06 e303 	mla	r3, r6, r3, lr
 800b23a:	0c12      	lsrs	r2, r2, #16
 800b23c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b240:	b29b      	uxth	r3, r3
 800b242:	fb06 e202 	mla	r2, r6, r2, lr
 800b246:	ebaa 0303 	sub.w	r3, sl, r3
 800b24a:	f8dc a000 	ldr.w	sl, [ip]
 800b24e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b252:	fa1f fa8a 	uxth.w	sl, sl
 800b256:	4453      	add	r3, sl
 800b258:	f8dc a000 	ldr.w	sl, [ip]
 800b25c:	b292      	uxth	r2, r2
 800b25e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b262:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b266:	b29b      	uxth	r3, r3
 800b268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b26c:	4581      	cmp	r9, r0
 800b26e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b272:	f84c 3b04 	str.w	r3, [ip], #4
 800b276:	d2db      	bcs.n	800b230 <quorem+0x44>
 800b278:	f855 300b 	ldr.w	r3, [r5, fp]
 800b27c:	b92b      	cbnz	r3, 800b28a <quorem+0x9e>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	3b04      	subs	r3, #4
 800b282:	429d      	cmp	r5, r3
 800b284:	461a      	mov	r2, r3
 800b286:	d32f      	bcc.n	800b2e8 <quorem+0xfc>
 800b288:	613c      	str	r4, [r7, #16]
 800b28a:	4638      	mov	r0, r7
 800b28c:	f001 f8c2 	bl	800c414 <__mcmp>
 800b290:	2800      	cmp	r0, #0
 800b292:	db25      	blt.n	800b2e0 <quorem+0xf4>
 800b294:	4628      	mov	r0, r5
 800b296:	f04f 0c00 	mov.w	ip, #0
 800b29a:	3601      	adds	r6, #1
 800b29c:	f858 1b04 	ldr.w	r1, [r8], #4
 800b2a0:	f8d0 e000 	ldr.w	lr, [r0]
 800b2a4:	b28b      	uxth	r3, r1
 800b2a6:	ebac 0303 	sub.w	r3, ip, r3
 800b2aa:	fa1f f28e 	uxth.w	r2, lr
 800b2ae:	4413      	add	r3, r2
 800b2b0:	0c0a      	lsrs	r2, r1, #16
 800b2b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2c0:	45c1      	cmp	r9, r8
 800b2c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2c6:	f840 3b04 	str.w	r3, [r0], #4
 800b2ca:	d2e7      	bcs.n	800b29c <quorem+0xb0>
 800b2cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2d4:	b922      	cbnz	r2, 800b2e0 <quorem+0xf4>
 800b2d6:	3b04      	subs	r3, #4
 800b2d8:	429d      	cmp	r5, r3
 800b2da:	461a      	mov	r2, r3
 800b2dc:	d30a      	bcc.n	800b2f4 <quorem+0x108>
 800b2de:	613c      	str	r4, [r7, #16]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	b003      	add	sp, #12
 800b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e8:	6812      	ldr	r2, [r2, #0]
 800b2ea:	3b04      	subs	r3, #4
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d1cb      	bne.n	800b288 <quorem+0x9c>
 800b2f0:	3c01      	subs	r4, #1
 800b2f2:	e7c6      	b.n	800b282 <quorem+0x96>
 800b2f4:	6812      	ldr	r2, [r2, #0]
 800b2f6:	3b04      	subs	r3, #4
 800b2f8:	2a00      	cmp	r2, #0
 800b2fa:	d1f0      	bne.n	800b2de <quorem+0xf2>
 800b2fc:	3c01      	subs	r4, #1
 800b2fe:	e7eb      	b.n	800b2d8 <quorem+0xec>
 800b300:	2000      	movs	r0, #0
 800b302:	e7ee      	b.n	800b2e2 <quorem+0xf6>
 800b304:	0000      	movs	r0, r0
	...

0800b308 <_dtoa_r>:
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	4616      	mov	r6, r2
 800b30e:	461f      	mov	r7, r3
 800b310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b312:	b099      	sub	sp, #100	; 0x64
 800b314:	4605      	mov	r5, r0
 800b316:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b31a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b31e:	b974      	cbnz	r4, 800b33e <_dtoa_r+0x36>
 800b320:	2010      	movs	r0, #16
 800b322:	f000 fde3 	bl	800beec <malloc>
 800b326:	4602      	mov	r2, r0
 800b328:	6268      	str	r0, [r5, #36]	; 0x24
 800b32a:	b920      	cbnz	r0, 800b336 <_dtoa_r+0x2e>
 800b32c:	21ea      	movs	r1, #234	; 0xea
 800b32e:	4ba8      	ldr	r3, [pc, #672]	; (800b5d0 <_dtoa_r+0x2c8>)
 800b330:	48a8      	ldr	r0, [pc, #672]	; (800b5d4 <_dtoa_r+0x2cc>)
 800b332:	f001 fbcf 	bl	800cad4 <__assert_func>
 800b336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b33a:	6004      	str	r4, [r0, #0]
 800b33c:	60c4      	str	r4, [r0, #12]
 800b33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b340:	6819      	ldr	r1, [r3, #0]
 800b342:	b151      	cbz	r1, 800b35a <_dtoa_r+0x52>
 800b344:	685a      	ldr	r2, [r3, #4]
 800b346:	2301      	movs	r3, #1
 800b348:	4093      	lsls	r3, r2
 800b34a:	604a      	str	r2, [r1, #4]
 800b34c:	608b      	str	r3, [r1, #8]
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 fe22 	bl	800bf98 <_Bfree>
 800b354:	2200      	movs	r2, #0
 800b356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	1e3b      	subs	r3, r7, #0
 800b35c:	bfaf      	iteee	ge
 800b35e:	2300      	movge	r3, #0
 800b360:	2201      	movlt	r2, #1
 800b362:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b366:	9305      	strlt	r3, [sp, #20]
 800b368:	bfa8      	it	ge
 800b36a:	f8c8 3000 	strge.w	r3, [r8]
 800b36e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b372:	4b99      	ldr	r3, [pc, #612]	; (800b5d8 <_dtoa_r+0x2d0>)
 800b374:	bfb8      	it	lt
 800b376:	f8c8 2000 	strlt.w	r2, [r8]
 800b37a:	ea33 0309 	bics.w	r3, r3, r9
 800b37e:	d119      	bne.n	800b3b4 <_dtoa_r+0xac>
 800b380:	f242 730f 	movw	r3, #9999	; 0x270f
 800b384:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b38c:	4333      	orrs	r3, r6
 800b38e:	f000 857f 	beq.w	800be90 <_dtoa_r+0xb88>
 800b392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b394:	b953      	cbnz	r3, 800b3ac <_dtoa_r+0xa4>
 800b396:	4b91      	ldr	r3, [pc, #580]	; (800b5dc <_dtoa_r+0x2d4>)
 800b398:	e022      	b.n	800b3e0 <_dtoa_r+0xd8>
 800b39a:	4b91      	ldr	r3, [pc, #580]	; (800b5e0 <_dtoa_r+0x2d8>)
 800b39c:	9303      	str	r3, [sp, #12]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	9803      	ldr	r0, [sp, #12]
 800b3a6:	b019      	add	sp, #100	; 0x64
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	4b8b      	ldr	r3, [pc, #556]	; (800b5dc <_dtoa_r+0x2d4>)
 800b3ae:	9303      	str	r3, [sp, #12]
 800b3b0:	3303      	adds	r3, #3
 800b3b2:	e7f5      	b.n	800b3a0 <_dtoa_r+0x98>
 800b3b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b3b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f7f5 fb08 	bl	80009d8 <__aeabi_dcmpeq>
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	b158      	cbz	r0, 800b3e4 <_dtoa_r+0xdc>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 8558 	beq.w	800be8a <_dtoa_r+0xb82>
 800b3da:	4882      	ldr	r0, [pc, #520]	; (800b5e4 <_dtoa_r+0x2dc>)
 800b3dc:	6018      	str	r0, [r3, #0]
 800b3de:	1e43      	subs	r3, r0, #1
 800b3e0:	9303      	str	r3, [sp, #12]
 800b3e2:	e7df      	b.n	800b3a4 <_dtoa_r+0x9c>
 800b3e4:	ab16      	add	r3, sp, #88	; 0x58
 800b3e6:	9301      	str	r3, [sp, #4]
 800b3e8:	ab17      	add	r3, sp, #92	; 0x5c
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b3f2:	f001 f8b7 	bl	800c564 <__d2b>
 800b3f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b3fa:	4683      	mov	fp, r0
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d07f      	beq.n	800b500 <_dtoa_r+0x1f8>
 800b400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b406:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b40a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b40e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b412:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b416:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b41a:	2200      	movs	r2, #0
 800b41c:	4b72      	ldr	r3, [pc, #456]	; (800b5e8 <_dtoa_r+0x2e0>)
 800b41e:	f7f4 febb 	bl	8000198 <__aeabi_dsub>
 800b422:	a365      	add	r3, pc, #404	; (adr r3, 800b5b8 <_dtoa_r+0x2b0>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f5 f86e 	bl	8000508 <__aeabi_dmul>
 800b42c:	a364      	add	r3, pc, #400	; (adr r3, 800b5c0 <_dtoa_r+0x2b8>)
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f4 feb3 	bl	800019c <__adddf3>
 800b436:	4606      	mov	r6, r0
 800b438:	4620      	mov	r0, r4
 800b43a:	460f      	mov	r7, r1
 800b43c:	f7f4 fffa 	bl	8000434 <__aeabi_i2d>
 800b440:	a361      	add	r3, pc, #388	; (adr r3, 800b5c8 <_dtoa_r+0x2c0>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f5 f85f 	bl	8000508 <__aeabi_dmul>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	4630      	mov	r0, r6
 800b450:	4639      	mov	r1, r7
 800b452:	f7f4 fea3 	bl	800019c <__adddf3>
 800b456:	4606      	mov	r6, r0
 800b458:	460f      	mov	r7, r1
 800b45a:	f7f5 fb05 	bl	8000a68 <__aeabi_d2iz>
 800b45e:	2200      	movs	r2, #0
 800b460:	4682      	mov	sl, r0
 800b462:	2300      	movs	r3, #0
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 fac0 	bl	80009ec <__aeabi_dcmplt>
 800b46c:	b148      	cbz	r0, 800b482 <_dtoa_r+0x17a>
 800b46e:	4650      	mov	r0, sl
 800b470:	f7f4 ffe0 	bl	8000434 <__aeabi_i2d>
 800b474:	4632      	mov	r2, r6
 800b476:	463b      	mov	r3, r7
 800b478:	f7f5 faae 	bl	80009d8 <__aeabi_dcmpeq>
 800b47c:	b908      	cbnz	r0, 800b482 <_dtoa_r+0x17a>
 800b47e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b482:	f1ba 0f16 	cmp.w	sl, #22
 800b486:	d858      	bhi.n	800b53a <_dtoa_r+0x232>
 800b488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b48c:	4b57      	ldr	r3, [pc, #348]	; (800b5ec <_dtoa_r+0x2e4>)
 800b48e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f5 faa9 	bl	80009ec <__aeabi_dcmplt>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d04f      	beq.n	800b53e <_dtoa_r+0x236>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4a8:	1b1c      	subs	r4, r3, r4
 800b4aa:	1e63      	subs	r3, r4, #1
 800b4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ae:	bf49      	itett	mi
 800b4b0:	f1c4 0301 	rsbmi	r3, r4, #1
 800b4b4:	2300      	movpl	r3, #0
 800b4b6:	9306      	strmi	r3, [sp, #24]
 800b4b8:	2300      	movmi	r3, #0
 800b4ba:	bf54      	ite	pl
 800b4bc:	9306      	strpl	r3, [sp, #24]
 800b4be:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b4c0:	f1ba 0f00 	cmp.w	sl, #0
 800b4c4:	db3d      	blt.n	800b542 <_dtoa_r+0x23a>
 800b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b4cc:	4453      	add	r3, sl
 800b4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4d6:	2b09      	cmp	r3, #9
 800b4d8:	f200 808c 	bhi.w	800b5f4 <_dtoa_r+0x2ec>
 800b4dc:	2b05      	cmp	r3, #5
 800b4de:	bfc4      	itt	gt
 800b4e0:	3b04      	subgt	r3, #4
 800b4e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b4e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4e6:	bfc8      	it	gt
 800b4e8:	2400      	movgt	r4, #0
 800b4ea:	f1a3 0302 	sub.w	r3, r3, #2
 800b4ee:	bfd8      	it	le
 800b4f0:	2401      	movle	r4, #1
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	f200 808a 	bhi.w	800b60c <_dtoa_r+0x304>
 800b4f8:	e8df f003 	tbb	[pc, r3]
 800b4fc:	5b4d4f2d 	.word	0x5b4d4f2d
 800b500:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b504:	441c      	add	r4, r3
 800b506:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	bfc3      	ittte	gt
 800b50e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b512:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b516:	fa09 f303 	lslgt.w	r3, r9, r3
 800b51a:	f1c3 0320 	rsble	r3, r3, #32
 800b51e:	bfc6      	itte	gt
 800b520:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b524:	4318      	orrgt	r0, r3
 800b526:	fa06 f003 	lslle.w	r0, r6, r3
 800b52a:	f7f4 ff73 	bl	8000414 <__aeabi_ui2d>
 800b52e:	2301      	movs	r3, #1
 800b530:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b534:	3c01      	subs	r4, #1
 800b536:	9313      	str	r3, [sp, #76]	; 0x4c
 800b538:	e76f      	b.n	800b41a <_dtoa_r+0x112>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e7b2      	b.n	800b4a4 <_dtoa_r+0x19c>
 800b53e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b540:	e7b1      	b.n	800b4a6 <_dtoa_r+0x19e>
 800b542:	9b06      	ldr	r3, [sp, #24]
 800b544:	eba3 030a 	sub.w	r3, r3, sl
 800b548:	9306      	str	r3, [sp, #24]
 800b54a:	f1ca 0300 	rsb	r3, sl, #0
 800b54e:	930a      	str	r3, [sp, #40]	; 0x28
 800b550:	2300      	movs	r3, #0
 800b552:	930e      	str	r3, [sp, #56]	; 0x38
 800b554:	e7be      	b.n	800b4d4 <_dtoa_r+0x1cc>
 800b556:	2300      	movs	r3, #0
 800b558:	930b      	str	r3, [sp, #44]	; 0x2c
 800b55a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dc58      	bgt.n	800b612 <_dtoa_r+0x30a>
 800b560:	f04f 0901 	mov.w	r9, #1
 800b564:	464b      	mov	r3, r9
 800b566:	f8cd 9020 	str.w	r9, [sp, #32]
 800b56a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b56e:	2200      	movs	r2, #0
 800b570:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b572:	6042      	str	r2, [r0, #4]
 800b574:	2204      	movs	r2, #4
 800b576:	f102 0614 	add.w	r6, r2, #20
 800b57a:	429e      	cmp	r6, r3
 800b57c:	6841      	ldr	r1, [r0, #4]
 800b57e:	d94e      	bls.n	800b61e <_dtoa_r+0x316>
 800b580:	4628      	mov	r0, r5
 800b582:	f000 fcc9 	bl	800bf18 <_Balloc>
 800b586:	9003      	str	r0, [sp, #12]
 800b588:	2800      	cmp	r0, #0
 800b58a:	d14c      	bne.n	800b626 <_dtoa_r+0x31e>
 800b58c:	4602      	mov	r2, r0
 800b58e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b592:	4b17      	ldr	r3, [pc, #92]	; (800b5f0 <_dtoa_r+0x2e8>)
 800b594:	e6cc      	b.n	800b330 <_dtoa_r+0x28>
 800b596:	2301      	movs	r3, #1
 800b598:	e7de      	b.n	800b558 <_dtoa_r+0x250>
 800b59a:	2300      	movs	r3, #0
 800b59c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b59e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5a0:	eb0a 0903 	add.w	r9, sl, r3
 800b5a4:	f109 0301 	add.w	r3, r9, #1
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	9308      	str	r3, [sp, #32]
 800b5ac:	bfb8      	it	lt
 800b5ae:	2301      	movlt	r3, #1
 800b5b0:	e7dd      	b.n	800b56e <_dtoa_r+0x266>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e7f2      	b.n	800b59c <_dtoa_r+0x294>
 800b5b6:	bf00      	nop
 800b5b8:	636f4361 	.word	0x636f4361
 800b5bc:	3fd287a7 	.word	0x3fd287a7
 800b5c0:	8b60c8b3 	.word	0x8b60c8b3
 800b5c4:	3fc68a28 	.word	0x3fc68a28
 800b5c8:	509f79fb 	.word	0x509f79fb
 800b5cc:	3fd34413 	.word	0x3fd34413
 800b5d0:	0800d7d9 	.word	0x0800d7d9
 800b5d4:	0800d7f0 	.word	0x0800d7f0
 800b5d8:	7ff00000 	.word	0x7ff00000
 800b5dc:	0800d7d5 	.word	0x0800d7d5
 800b5e0:	0800d7cc 	.word	0x0800d7cc
 800b5e4:	0800d7a9 	.word	0x0800d7a9
 800b5e8:	3ff80000 	.word	0x3ff80000
 800b5ec:	0800d8e0 	.word	0x0800d8e0
 800b5f0:	0800d84b 	.word	0x0800d84b
 800b5f4:	2401      	movs	r4, #1
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5fa:	9322      	str	r3, [sp, #136]	; 0x88
 800b5fc:	f04f 39ff 	mov.w	r9, #4294967295
 800b600:	2200      	movs	r2, #0
 800b602:	2312      	movs	r3, #18
 800b604:	f8cd 9020 	str.w	r9, [sp, #32]
 800b608:	9223      	str	r2, [sp, #140]	; 0x8c
 800b60a:	e7b0      	b.n	800b56e <_dtoa_r+0x266>
 800b60c:	2301      	movs	r3, #1
 800b60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b610:	e7f4      	b.n	800b5fc <_dtoa_r+0x2f4>
 800b612:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b616:	464b      	mov	r3, r9
 800b618:	f8cd 9020 	str.w	r9, [sp, #32]
 800b61c:	e7a7      	b.n	800b56e <_dtoa_r+0x266>
 800b61e:	3101      	adds	r1, #1
 800b620:	6041      	str	r1, [r0, #4]
 800b622:	0052      	lsls	r2, r2, #1
 800b624:	e7a7      	b.n	800b576 <_dtoa_r+0x26e>
 800b626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b628:	9a03      	ldr	r2, [sp, #12]
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	9b08      	ldr	r3, [sp, #32]
 800b62e:	2b0e      	cmp	r3, #14
 800b630:	f200 80a8 	bhi.w	800b784 <_dtoa_r+0x47c>
 800b634:	2c00      	cmp	r4, #0
 800b636:	f000 80a5 	beq.w	800b784 <_dtoa_r+0x47c>
 800b63a:	f1ba 0f00 	cmp.w	sl, #0
 800b63e:	dd34      	ble.n	800b6aa <_dtoa_r+0x3a2>
 800b640:	4a9a      	ldr	r2, [pc, #616]	; (800b8ac <_dtoa_r+0x5a4>)
 800b642:	f00a 030f 	and.w	r3, sl, #15
 800b646:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b64a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b64e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b652:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b656:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b65a:	d016      	beq.n	800b68a <_dtoa_r+0x382>
 800b65c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b660:	4b93      	ldr	r3, [pc, #588]	; (800b8b0 <_dtoa_r+0x5a8>)
 800b662:	2703      	movs	r7, #3
 800b664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b668:	f7f5 f878 	bl	800075c <__aeabi_ddiv>
 800b66c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b670:	f004 040f 	and.w	r4, r4, #15
 800b674:	4e8e      	ldr	r6, [pc, #568]	; (800b8b0 <_dtoa_r+0x5a8>)
 800b676:	b954      	cbnz	r4, 800b68e <_dtoa_r+0x386>
 800b678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b67c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b680:	f7f5 f86c 	bl	800075c <__aeabi_ddiv>
 800b684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b688:	e029      	b.n	800b6de <_dtoa_r+0x3d6>
 800b68a:	2702      	movs	r7, #2
 800b68c:	e7f2      	b.n	800b674 <_dtoa_r+0x36c>
 800b68e:	07e1      	lsls	r1, r4, #31
 800b690:	d508      	bpl.n	800b6a4 <_dtoa_r+0x39c>
 800b692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b696:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b69a:	f7f4 ff35 	bl	8000508 <__aeabi_dmul>
 800b69e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6a2:	3701      	adds	r7, #1
 800b6a4:	1064      	asrs	r4, r4, #1
 800b6a6:	3608      	adds	r6, #8
 800b6a8:	e7e5      	b.n	800b676 <_dtoa_r+0x36e>
 800b6aa:	f000 80a5 	beq.w	800b7f8 <_dtoa_r+0x4f0>
 800b6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6b2:	f1ca 0400 	rsb	r4, sl, #0
 800b6b6:	4b7d      	ldr	r3, [pc, #500]	; (800b8ac <_dtoa_r+0x5a4>)
 800b6b8:	f004 020f 	and.w	r2, r4, #15
 800b6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	f7f4 ff20 	bl	8000508 <__aeabi_dmul>
 800b6c8:	2702      	movs	r7, #2
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6d0:	4e77      	ldr	r6, [pc, #476]	; (800b8b0 <_dtoa_r+0x5a8>)
 800b6d2:	1124      	asrs	r4, r4, #4
 800b6d4:	2c00      	cmp	r4, #0
 800b6d6:	f040 8084 	bne.w	800b7e2 <_dtoa_r+0x4da>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1d2      	bne.n	800b684 <_dtoa_r+0x37c>
 800b6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 808b 	beq.w	800b7fc <_dtoa_r+0x4f4>
 800b6e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b6ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b6ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	4b6f      	ldr	r3, [pc, #444]	; (800b8b4 <_dtoa_r+0x5ac>)
 800b6f6:	f7f5 f979 	bl	80009ec <__aeabi_dcmplt>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d07e      	beq.n	800b7fc <_dtoa_r+0x4f4>
 800b6fe:	9b08      	ldr	r3, [sp, #32]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d07b      	beq.n	800b7fc <_dtoa_r+0x4f4>
 800b704:	f1b9 0f00 	cmp.w	r9, #0
 800b708:	dd38      	ble.n	800b77c <_dtoa_r+0x474>
 800b70a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b70e:	2200      	movs	r2, #0
 800b710:	4b69      	ldr	r3, [pc, #420]	; (800b8b8 <_dtoa_r+0x5b0>)
 800b712:	f7f4 fef9 	bl	8000508 <__aeabi_dmul>
 800b716:	464c      	mov	r4, r9
 800b718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b71c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b720:	3701      	adds	r7, #1
 800b722:	4638      	mov	r0, r7
 800b724:	f7f4 fe86 	bl	8000434 <__aeabi_i2d>
 800b728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b72c:	f7f4 feec 	bl	8000508 <__aeabi_dmul>
 800b730:	2200      	movs	r2, #0
 800b732:	4b62      	ldr	r3, [pc, #392]	; (800b8bc <_dtoa_r+0x5b4>)
 800b734:	f7f4 fd32 	bl	800019c <__adddf3>
 800b738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b73c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b740:	9611      	str	r6, [sp, #68]	; 0x44
 800b742:	2c00      	cmp	r4, #0
 800b744:	d15d      	bne.n	800b802 <_dtoa_r+0x4fa>
 800b746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b74a:	2200      	movs	r2, #0
 800b74c:	4b5c      	ldr	r3, [pc, #368]	; (800b8c0 <_dtoa_r+0x5b8>)
 800b74e:	f7f4 fd23 	bl	8000198 <__aeabi_dsub>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b75a:	4633      	mov	r3, r6
 800b75c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b75e:	f7f5 f963 	bl	8000a28 <__aeabi_dcmpgt>
 800b762:	2800      	cmp	r0, #0
 800b764:	f040 829c 	bne.w	800bca0 <_dtoa_r+0x998>
 800b768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b76c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b76e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b772:	f7f5 f93b 	bl	80009ec <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	f040 8290 	bne.w	800bc9c <_dtoa_r+0x994>
 800b77c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b780:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b786:	2b00      	cmp	r3, #0
 800b788:	f2c0 8152 	blt.w	800ba30 <_dtoa_r+0x728>
 800b78c:	f1ba 0f0e 	cmp.w	sl, #14
 800b790:	f300 814e 	bgt.w	800ba30 <_dtoa_r+0x728>
 800b794:	4b45      	ldr	r3, [pc, #276]	; (800b8ac <_dtoa_r+0x5a4>)
 800b796:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b79a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b79e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b7a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f280 80db 	bge.w	800b960 <_dtoa_r+0x658>
 800b7aa:	9b08      	ldr	r3, [sp, #32]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f300 80d7 	bgt.w	800b960 <_dtoa_r+0x658>
 800b7b2:	f040 8272 	bne.w	800bc9a <_dtoa_r+0x992>
 800b7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4b40      	ldr	r3, [pc, #256]	; (800b8c0 <_dtoa_r+0x5b8>)
 800b7be:	f7f4 fea3 	bl	8000508 <__aeabi_dmul>
 800b7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7c6:	f7f5 f925 	bl	8000a14 <__aeabi_dcmpge>
 800b7ca:	9c08      	ldr	r4, [sp, #32]
 800b7cc:	4626      	mov	r6, r4
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f040 8248 	bne.w	800bc64 <_dtoa_r+0x95c>
 800b7d4:	2331      	movs	r3, #49	; 0x31
 800b7d6:	9f03      	ldr	r7, [sp, #12]
 800b7d8:	f10a 0a01 	add.w	sl, sl, #1
 800b7dc:	f807 3b01 	strb.w	r3, [r7], #1
 800b7e0:	e244      	b.n	800bc6c <_dtoa_r+0x964>
 800b7e2:	07e2      	lsls	r2, r4, #31
 800b7e4:	d505      	bpl.n	800b7f2 <_dtoa_r+0x4ea>
 800b7e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7ea:	f7f4 fe8d 	bl	8000508 <__aeabi_dmul>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	3701      	adds	r7, #1
 800b7f2:	1064      	asrs	r4, r4, #1
 800b7f4:	3608      	adds	r6, #8
 800b7f6:	e76d      	b.n	800b6d4 <_dtoa_r+0x3cc>
 800b7f8:	2702      	movs	r7, #2
 800b7fa:	e770      	b.n	800b6de <_dtoa_r+0x3d6>
 800b7fc:	46d0      	mov	r8, sl
 800b7fe:	9c08      	ldr	r4, [sp, #32]
 800b800:	e78f      	b.n	800b722 <_dtoa_r+0x41a>
 800b802:	9903      	ldr	r1, [sp, #12]
 800b804:	4b29      	ldr	r3, [pc, #164]	; (800b8ac <_dtoa_r+0x5a4>)
 800b806:	4421      	add	r1, r4
 800b808:	9112      	str	r1, [sp, #72]	; 0x48
 800b80a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b80c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b810:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b814:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b818:	2900      	cmp	r1, #0
 800b81a:	d055      	beq.n	800b8c8 <_dtoa_r+0x5c0>
 800b81c:	2000      	movs	r0, #0
 800b81e:	4929      	ldr	r1, [pc, #164]	; (800b8c4 <_dtoa_r+0x5bc>)
 800b820:	f7f4 ff9c 	bl	800075c <__aeabi_ddiv>
 800b824:	463b      	mov	r3, r7
 800b826:	4632      	mov	r2, r6
 800b828:	f7f4 fcb6 	bl	8000198 <__aeabi_dsub>
 800b82c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b830:	9f03      	ldr	r7, [sp, #12]
 800b832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b836:	f7f5 f917 	bl	8000a68 <__aeabi_d2iz>
 800b83a:	4604      	mov	r4, r0
 800b83c:	f7f4 fdfa 	bl	8000434 <__aeabi_i2d>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b848:	f7f4 fca6 	bl	8000198 <__aeabi_dsub>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	3430      	adds	r4, #48	; 0x30
 800b852:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b85a:	f807 4b01 	strb.w	r4, [r7], #1
 800b85e:	f7f5 f8c5 	bl	80009ec <__aeabi_dcmplt>
 800b862:	2800      	cmp	r0, #0
 800b864:	d174      	bne.n	800b950 <_dtoa_r+0x648>
 800b866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b86a:	2000      	movs	r0, #0
 800b86c:	4911      	ldr	r1, [pc, #68]	; (800b8b4 <_dtoa_r+0x5ac>)
 800b86e:	f7f4 fc93 	bl	8000198 <__aeabi_dsub>
 800b872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b876:	f7f5 f8b9 	bl	80009ec <__aeabi_dcmplt>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f040 80b7 	bne.w	800b9ee <_dtoa_r+0x6e6>
 800b880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b882:	429f      	cmp	r7, r3
 800b884:	f43f af7a 	beq.w	800b77c <_dtoa_r+0x474>
 800b888:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b88c:	2200      	movs	r2, #0
 800b88e:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <_dtoa_r+0x5b0>)
 800b890:	f7f4 fe3a 	bl	8000508 <__aeabi_dmul>
 800b894:	2200      	movs	r2, #0
 800b896:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b89a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b89e:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <_dtoa_r+0x5b0>)
 800b8a0:	f7f4 fe32 	bl	8000508 <__aeabi_dmul>
 800b8a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8a8:	e7c3      	b.n	800b832 <_dtoa_r+0x52a>
 800b8aa:	bf00      	nop
 800b8ac:	0800d8e0 	.word	0x0800d8e0
 800b8b0:	0800d8b8 	.word	0x0800d8b8
 800b8b4:	3ff00000 	.word	0x3ff00000
 800b8b8:	40240000 	.word	0x40240000
 800b8bc:	401c0000 	.word	0x401c0000
 800b8c0:	40140000 	.word	0x40140000
 800b8c4:	3fe00000 	.word	0x3fe00000
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	f7f4 fe1c 	bl	8000508 <__aeabi_dmul>
 800b8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8d6:	9c03      	ldr	r4, [sp, #12]
 800b8d8:	9314      	str	r3, [sp, #80]	; 0x50
 800b8da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8de:	f7f5 f8c3 	bl	8000a68 <__aeabi_d2iz>
 800b8e2:	9015      	str	r0, [sp, #84]	; 0x54
 800b8e4:	f7f4 fda6 	bl	8000434 <__aeabi_i2d>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8f0:	f7f4 fc52 	bl	8000198 <__aeabi_dsub>
 800b8f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	3330      	adds	r3, #48	; 0x30
 800b8fa:	f804 3b01 	strb.w	r3, [r4], #1
 800b8fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b900:	460f      	mov	r7, r1
 800b902:	429c      	cmp	r4, r3
 800b904:	f04f 0200 	mov.w	r2, #0
 800b908:	d124      	bne.n	800b954 <_dtoa_r+0x64c>
 800b90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b90e:	4bb0      	ldr	r3, [pc, #704]	; (800bbd0 <_dtoa_r+0x8c8>)
 800b910:	f7f4 fc44 	bl	800019c <__adddf3>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f5 f884 	bl	8000a28 <__aeabi_dcmpgt>
 800b920:	2800      	cmp	r0, #0
 800b922:	d163      	bne.n	800b9ec <_dtoa_r+0x6e4>
 800b924:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b928:	2000      	movs	r0, #0
 800b92a:	49a9      	ldr	r1, [pc, #676]	; (800bbd0 <_dtoa_r+0x8c8>)
 800b92c:	f7f4 fc34 	bl	8000198 <__aeabi_dsub>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	4630      	mov	r0, r6
 800b936:	4639      	mov	r1, r7
 800b938:	f7f5 f858 	bl	80009ec <__aeabi_dcmplt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	f43f af1d 	beq.w	800b77c <_dtoa_r+0x474>
 800b942:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b944:	1e7b      	subs	r3, r7, #1
 800b946:	9314      	str	r3, [sp, #80]	; 0x50
 800b948:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b94c:	2b30      	cmp	r3, #48	; 0x30
 800b94e:	d0f8      	beq.n	800b942 <_dtoa_r+0x63a>
 800b950:	46c2      	mov	sl, r8
 800b952:	e03b      	b.n	800b9cc <_dtoa_r+0x6c4>
 800b954:	4b9f      	ldr	r3, [pc, #636]	; (800bbd4 <_dtoa_r+0x8cc>)
 800b956:	f7f4 fdd7 	bl	8000508 <__aeabi_dmul>
 800b95a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b95e:	e7bc      	b.n	800b8da <_dtoa_r+0x5d2>
 800b960:	9f03      	ldr	r7, [sp, #12]
 800b962:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b966:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	f7f4 fef5 	bl	800075c <__aeabi_ddiv>
 800b972:	f7f5 f879 	bl	8000a68 <__aeabi_d2iz>
 800b976:	4604      	mov	r4, r0
 800b978:	f7f4 fd5c 	bl	8000434 <__aeabi_i2d>
 800b97c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b980:	f7f4 fdc2 	bl	8000508 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4640      	mov	r0, r8
 800b98a:	4649      	mov	r1, r9
 800b98c:	f7f4 fc04 	bl	8000198 <__aeabi_dsub>
 800b990:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b994:	f807 6b01 	strb.w	r6, [r7], #1
 800b998:	9e03      	ldr	r6, [sp, #12]
 800b99a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b99e:	1bbe      	subs	r6, r7, r6
 800b9a0:	45b4      	cmp	ip, r6
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	d136      	bne.n	800ba16 <_dtoa_r+0x70e>
 800b9a8:	f7f4 fbf8 	bl	800019c <__adddf3>
 800b9ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	f7f5 f838 	bl	8000a28 <__aeabi_dcmpgt>
 800b9b8:	bb58      	cbnz	r0, 800ba12 <_dtoa_r+0x70a>
 800b9ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f5 f809 	bl	80009d8 <__aeabi_dcmpeq>
 800b9c6:	b108      	cbz	r0, 800b9cc <_dtoa_r+0x6c4>
 800b9c8:	07e1      	lsls	r1, r4, #31
 800b9ca:	d422      	bmi.n	800ba12 <_dtoa_r+0x70a>
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	4659      	mov	r1, fp
 800b9d0:	f000 fae2 	bl	800bf98 <_Bfree>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	703b      	strb	r3, [r7, #0]
 800b9d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9da:	f10a 0001 	add.w	r0, sl, #1
 800b9de:	6018      	str	r0, [r3, #0]
 800b9e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f43f acde 	beq.w	800b3a4 <_dtoa_r+0x9c>
 800b9e8:	601f      	str	r7, [r3, #0]
 800b9ea:	e4db      	b.n	800b3a4 <_dtoa_r+0x9c>
 800b9ec:	4627      	mov	r7, r4
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	461f      	mov	r7, r3
 800b9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9f6:	2a39      	cmp	r2, #57	; 0x39
 800b9f8:	d107      	bne.n	800ba0a <_dtoa_r+0x702>
 800b9fa:	9a03      	ldr	r2, [sp, #12]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d1f7      	bne.n	800b9f0 <_dtoa_r+0x6e8>
 800ba00:	2230      	movs	r2, #48	; 0x30
 800ba02:	9903      	ldr	r1, [sp, #12]
 800ba04:	f108 0801 	add.w	r8, r8, #1
 800ba08:	700a      	strb	r2, [r1, #0]
 800ba0a:	781a      	ldrb	r2, [r3, #0]
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	e79e      	b.n	800b950 <_dtoa_r+0x648>
 800ba12:	46d0      	mov	r8, sl
 800ba14:	e7eb      	b.n	800b9ee <_dtoa_r+0x6e6>
 800ba16:	2200      	movs	r2, #0
 800ba18:	4b6e      	ldr	r3, [pc, #440]	; (800bbd4 <_dtoa_r+0x8cc>)
 800ba1a:	f7f4 fd75 	bl	8000508 <__aeabi_dmul>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2300      	movs	r3, #0
 800ba22:	4680      	mov	r8, r0
 800ba24:	4689      	mov	r9, r1
 800ba26:	f7f4 ffd7 	bl	80009d8 <__aeabi_dcmpeq>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d09b      	beq.n	800b966 <_dtoa_r+0x65e>
 800ba2e:	e7cd      	b.n	800b9cc <_dtoa_r+0x6c4>
 800ba30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	f000 80d0 	beq.w	800bbd8 <_dtoa_r+0x8d0>
 800ba38:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba3a:	2a01      	cmp	r2, #1
 800ba3c:	f300 80ae 	bgt.w	800bb9c <_dtoa_r+0x894>
 800ba40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	f000 80a6 	beq.w	800bb94 <_dtoa_r+0x88c>
 800ba48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba4e:	9f06      	ldr	r7, [sp, #24]
 800ba50:	9a06      	ldr	r2, [sp, #24]
 800ba52:	2101      	movs	r1, #1
 800ba54:	441a      	add	r2, r3
 800ba56:	9206      	str	r2, [sp, #24]
 800ba58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	441a      	add	r2, r3
 800ba5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba60:	f000 fb50 	bl	800c104 <__i2b>
 800ba64:	4606      	mov	r6, r0
 800ba66:	2f00      	cmp	r7, #0
 800ba68:	dd0c      	ble.n	800ba84 <_dtoa_r+0x77c>
 800ba6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dd09      	ble.n	800ba84 <_dtoa_r+0x77c>
 800ba70:	42bb      	cmp	r3, r7
 800ba72:	bfa8      	it	ge
 800ba74:	463b      	movge	r3, r7
 800ba76:	9a06      	ldr	r2, [sp, #24]
 800ba78:	1aff      	subs	r7, r7, r3
 800ba7a:	1ad2      	subs	r2, r2, r3
 800ba7c:	9206      	str	r2, [sp, #24]
 800ba7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	9309      	str	r3, [sp, #36]	; 0x24
 800ba84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba86:	b1f3      	cbz	r3, 800bac6 <_dtoa_r+0x7be>
 800ba88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80a8 	beq.w	800bbe0 <_dtoa_r+0x8d8>
 800ba90:	2c00      	cmp	r4, #0
 800ba92:	dd10      	ble.n	800bab6 <_dtoa_r+0x7ae>
 800ba94:	4631      	mov	r1, r6
 800ba96:	4622      	mov	r2, r4
 800ba98:	4628      	mov	r0, r5
 800ba9a:	f000 fbf1 	bl	800c280 <__pow5mult>
 800ba9e:	465a      	mov	r2, fp
 800baa0:	4601      	mov	r1, r0
 800baa2:	4606      	mov	r6, r0
 800baa4:	4628      	mov	r0, r5
 800baa6:	f000 fb43 	bl	800c130 <__multiply>
 800baaa:	4680      	mov	r8, r0
 800baac:	4659      	mov	r1, fp
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 fa72 	bl	800bf98 <_Bfree>
 800bab4:	46c3      	mov	fp, r8
 800bab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab8:	1b1a      	subs	r2, r3, r4
 800baba:	d004      	beq.n	800bac6 <_dtoa_r+0x7be>
 800babc:	4659      	mov	r1, fp
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 fbde 	bl	800c280 <__pow5mult>
 800bac4:	4683      	mov	fp, r0
 800bac6:	2101      	movs	r1, #1
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 fb1b 	bl	800c104 <__i2b>
 800bace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bad0:	4604      	mov	r4, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f340 8086 	ble.w	800bbe4 <_dtoa_r+0x8dc>
 800bad8:	461a      	mov	r2, r3
 800bada:	4601      	mov	r1, r0
 800badc:	4628      	mov	r0, r5
 800bade:	f000 fbcf 	bl	800c280 <__pow5mult>
 800bae2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bae4:	4604      	mov	r4, r0
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	dd7f      	ble.n	800bbea <_dtoa_r+0x8e2>
 800baea:	f04f 0800 	mov.w	r8, #0
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baf4:	6918      	ldr	r0, [r3, #16]
 800baf6:	f000 fab7 	bl	800c068 <__hi0bits>
 800bafa:	f1c0 0020 	rsb	r0, r0, #32
 800bafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb00:	4418      	add	r0, r3
 800bb02:	f010 001f 	ands.w	r0, r0, #31
 800bb06:	f000 8092 	beq.w	800bc2e <_dtoa_r+0x926>
 800bb0a:	f1c0 0320 	rsb	r3, r0, #32
 800bb0e:	2b04      	cmp	r3, #4
 800bb10:	f340 808a 	ble.w	800bc28 <_dtoa_r+0x920>
 800bb14:	f1c0 001c 	rsb	r0, r0, #28
 800bb18:	9b06      	ldr	r3, [sp, #24]
 800bb1a:	4407      	add	r7, r0
 800bb1c:	4403      	add	r3, r0
 800bb1e:	9306      	str	r3, [sp, #24]
 800bb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb22:	4403      	add	r3, r0
 800bb24:	9309      	str	r3, [sp, #36]	; 0x24
 800bb26:	9b06      	ldr	r3, [sp, #24]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dd05      	ble.n	800bb38 <_dtoa_r+0x830>
 800bb2c:	4659      	mov	r1, fp
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4628      	mov	r0, r5
 800bb32:	f000 fbff 	bl	800c334 <__lshift>
 800bb36:	4683      	mov	fp, r0
 800bb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dd05      	ble.n	800bb4a <_dtoa_r+0x842>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	461a      	mov	r2, r3
 800bb42:	4628      	mov	r0, r5
 800bb44:	f000 fbf6 	bl	800c334 <__lshift>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d070      	beq.n	800bc32 <_dtoa_r+0x92a>
 800bb50:	4621      	mov	r1, r4
 800bb52:	4658      	mov	r0, fp
 800bb54:	f000 fc5e 	bl	800c414 <__mcmp>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	da6a      	bge.n	800bc32 <_dtoa_r+0x92a>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4659      	mov	r1, fp
 800bb60:	220a      	movs	r2, #10
 800bb62:	4628      	mov	r0, r5
 800bb64:	f000 fa3a 	bl	800bfdc <__multadd>
 800bb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6a:	4683      	mov	fp, r0
 800bb6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 8194 	beq.w	800be9e <_dtoa_r+0xb96>
 800bb76:	4631      	mov	r1, r6
 800bb78:	2300      	movs	r3, #0
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f000 fa2d 	bl	800bfdc <__multadd>
 800bb82:	f1b9 0f00 	cmp.w	r9, #0
 800bb86:	4606      	mov	r6, r0
 800bb88:	f300 8093 	bgt.w	800bcb2 <_dtoa_r+0x9aa>
 800bb8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	dc57      	bgt.n	800bc42 <_dtoa_r+0x93a>
 800bb92:	e08e      	b.n	800bcb2 <_dtoa_r+0x9aa>
 800bb94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bb96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb9a:	e757      	b.n	800ba4c <_dtoa_r+0x744>
 800bb9c:	9b08      	ldr	r3, [sp, #32]
 800bb9e:	1e5c      	subs	r4, r3, #1
 800bba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	bfb7      	itett	lt
 800bba6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bba8:	1b1c      	subge	r4, r3, r4
 800bbaa:	1ae2      	sublt	r2, r4, r3
 800bbac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bbae:	bfbe      	ittt	lt
 800bbb0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bbb2:	189b      	addlt	r3, r3, r2
 800bbb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bbb6:	9b08      	ldr	r3, [sp, #32]
 800bbb8:	bfb8      	it	lt
 800bbba:	2400      	movlt	r4, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	bfbb      	ittet	lt
 800bbc0:	9b06      	ldrlt	r3, [sp, #24]
 800bbc2:	9a08      	ldrlt	r2, [sp, #32]
 800bbc4:	9f06      	ldrge	r7, [sp, #24]
 800bbc6:	1a9f      	sublt	r7, r3, r2
 800bbc8:	bfac      	ite	ge
 800bbca:	9b08      	ldrge	r3, [sp, #32]
 800bbcc:	2300      	movlt	r3, #0
 800bbce:	e73f      	b.n	800ba50 <_dtoa_r+0x748>
 800bbd0:	3fe00000 	.word	0x3fe00000
 800bbd4:	40240000 	.word	0x40240000
 800bbd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bbda:	9f06      	ldr	r7, [sp, #24]
 800bbdc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bbde:	e742      	b.n	800ba66 <_dtoa_r+0x75e>
 800bbe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe2:	e76b      	b.n	800babc <_dtoa_r+0x7b4>
 800bbe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	dc19      	bgt.n	800bc1e <_dtoa_r+0x916>
 800bbea:	9b04      	ldr	r3, [sp, #16]
 800bbec:	b9bb      	cbnz	r3, 800bc1e <_dtoa_r+0x916>
 800bbee:	9b05      	ldr	r3, [sp, #20]
 800bbf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbf4:	b99b      	cbnz	r3, 800bc1e <_dtoa_r+0x916>
 800bbf6:	9b05      	ldr	r3, [sp, #20]
 800bbf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbfc:	0d1b      	lsrs	r3, r3, #20
 800bbfe:	051b      	lsls	r3, r3, #20
 800bc00:	b183      	cbz	r3, 800bc24 <_dtoa_r+0x91c>
 800bc02:	f04f 0801 	mov.w	r8, #1
 800bc06:	9b06      	ldr	r3, [sp, #24]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	9306      	str	r3, [sp, #24]
 800bc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc0e:	3301      	adds	r3, #1
 800bc10:	9309      	str	r3, [sp, #36]	; 0x24
 800bc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f47f af6a 	bne.w	800baee <_dtoa_r+0x7e6>
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	e76f      	b.n	800bafe <_dtoa_r+0x7f6>
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	e7f6      	b.n	800bc12 <_dtoa_r+0x90a>
 800bc24:	4698      	mov	r8, r3
 800bc26:	e7f4      	b.n	800bc12 <_dtoa_r+0x90a>
 800bc28:	f43f af7d 	beq.w	800bb26 <_dtoa_r+0x81e>
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	301c      	adds	r0, #28
 800bc30:	e772      	b.n	800bb18 <_dtoa_r+0x810>
 800bc32:	9b08      	ldr	r3, [sp, #32]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dc36      	bgt.n	800bca6 <_dtoa_r+0x99e>
 800bc38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	dd33      	ble.n	800bca6 <_dtoa_r+0x99e>
 800bc3e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc42:	f1b9 0f00 	cmp.w	r9, #0
 800bc46:	d10d      	bne.n	800bc64 <_dtoa_r+0x95c>
 800bc48:	4621      	mov	r1, r4
 800bc4a:	464b      	mov	r3, r9
 800bc4c:	2205      	movs	r2, #5
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f000 f9c4 	bl	800bfdc <__multadd>
 800bc54:	4601      	mov	r1, r0
 800bc56:	4604      	mov	r4, r0
 800bc58:	4658      	mov	r0, fp
 800bc5a:	f000 fbdb 	bl	800c414 <__mcmp>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f73f adb8 	bgt.w	800b7d4 <_dtoa_r+0x4cc>
 800bc64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc66:	9f03      	ldr	r7, [sp, #12]
 800bc68:	ea6f 0a03 	mvn.w	sl, r3
 800bc6c:	f04f 0800 	mov.w	r8, #0
 800bc70:	4621      	mov	r1, r4
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 f990 	bl	800bf98 <_Bfree>
 800bc78:	2e00      	cmp	r6, #0
 800bc7a:	f43f aea7 	beq.w	800b9cc <_dtoa_r+0x6c4>
 800bc7e:	f1b8 0f00 	cmp.w	r8, #0
 800bc82:	d005      	beq.n	800bc90 <_dtoa_r+0x988>
 800bc84:	45b0      	cmp	r8, r6
 800bc86:	d003      	beq.n	800bc90 <_dtoa_r+0x988>
 800bc88:	4641      	mov	r1, r8
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f000 f984 	bl	800bf98 <_Bfree>
 800bc90:	4631      	mov	r1, r6
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 f980 	bl	800bf98 <_Bfree>
 800bc98:	e698      	b.n	800b9cc <_dtoa_r+0x6c4>
 800bc9a:	2400      	movs	r4, #0
 800bc9c:	4626      	mov	r6, r4
 800bc9e:	e7e1      	b.n	800bc64 <_dtoa_r+0x95c>
 800bca0:	46c2      	mov	sl, r8
 800bca2:	4626      	mov	r6, r4
 800bca4:	e596      	b.n	800b7d4 <_dtoa_r+0x4cc>
 800bca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 80fd 	beq.w	800beac <_dtoa_r+0xba4>
 800bcb2:	2f00      	cmp	r7, #0
 800bcb4:	dd05      	ble.n	800bcc2 <_dtoa_r+0x9ba>
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	463a      	mov	r2, r7
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f000 fb3a 	bl	800c334 <__lshift>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	f1b8 0f00 	cmp.w	r8, #0
 800bcc6:	d05c      	beq.n	800bd82 <_dtoa_r+0xa7a>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	6871      	ldr	r1, [r6, #4]
 800bccc:	f000 f924 	bl	800bf18 <_Balloc>
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	b928      	cbnz	r0, 800bce0 <_dtoa_r+0x9d8>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcda:	4b7f      	ldr	r3, [pc, #508]	; (800bed8 <_dtoa_r+0xbd0>)
 800bcdc:	f7ff bb28 	b.w	800b330 <_dtoa_r+0x28>
 800bce0:	6932      	ldr	r2, [r6, #16]
 800bce2:	f106 010c 	add.w	r1, r6, #12
 800bce6:	3202      	adds	r2, #2
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	300c      	adds	r0, #12
 800bcec:	f7fe fdba 	bl	800a864 <memcpy>
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 fb1d 	bl	800c334 <__lshift>
 800bcfa:	46b0      	mov	r8, r6
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	9308      	str	r3, [sp, #32]
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	444b      	add	r3, r9
 800bd08:	930a      	str	r3, [sp, #40]	; 0x28
 800bd0a:	9b04      	ldr	r3, [sp, #16]
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	9309      	str	r3, [sp, #36]	; 0x24
 800bd12:	9b08      	ldr	r3, [sp, #32]
 800bd14:	4621      	mov	r1, r4
 800bd16:	3b01      	subs	r3, #1
 800bd18:	4658      	mov	r0, fp
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f7ff fa66 	bl	800b1ec <quorem>
 800bd20:	4603      	mov	r3, r0
 800bd22:	4641      	mov	r1, r8
 800bd24:	3330      	adds	r3, #48	; 0x30
 800bd26:	9006      	str	r0, [sp, #24]
 800bd28:	4658      	mov	r0, fp
 800bd2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd2c:	f000 fb72 	bl	800c414 <__mcmp>
 800bd30:	4632      	mov	r2, r6
 800bd32:	4681      	mov	r9, r0
 800bd34:	4621      	mov	r1, r4
 800bd36:	4628      	mov	r0, r5
 800bd38:	f000 fb88 	bl	800c44c <__mdiff>
 800bd3c:	68c2      	ldr	r2, [r0, #12]
 800bd3e:	4607      	mov	r7, r0
 800bd40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd42:	bb02      	cbnz	r2, 800bd86 <_dtoa_r+0xa7e>
 800bd44:	4601      	mov	r1, r0
 800bd46:	4658      	mov	r0, fp
 800bd48:	f000 fb64 	bl	800c414 <__mcmp>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd50:	4639      	mov	r1, r7
 800bd52:	4628      	mov	r0, r5
 800bd54:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bd58:	f000 f91e 	bl	800bf98 <_Bfree>
 800bd5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd60:	9f08      	ldr	r7, [sp, #32]
 800bd62:	ea43 0102 	orr.w	r1, r3, r2
 800bd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd68:	430b      	orrs	r3, r1
 800bd6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd6c:	d10d      	bne.n	800bd8a <_dtoa_r+0xa82>
 800bd6e:	2b39      	cmp	r3, #57	; 0x39
 800bd70:	d029      	beq.n	800bdc6 <_dtoa_r+0xabe>
 800bd72:	f1b9 0f00 	cmp.w	r9, #0
 800bd76:	dd01      	ble.n	800bd7c <_dtoa_r+0xa74>
 800bd78:	9b06      	ldr	r3, [sp, #24]
 800bd7a:	3331      	adds	r3, #49	; 0x31
 800bd7c:	9a04      	ldr	r2, [sp, #16]
 800bd7e:	7013      	strb	r3, [r2, #0]
 800bd80:	e776      	b.n	800bc70 <_dtoa_r+0x968>
 800bd82:	4630      	mov	r0, r6
 800bd84:	e7b9      	b.n	800bcfa <_dtoa_r+0x9f2>
 800bd86:	2201      	movs	r2, #1
 800bd88:	e7e2      	b.n	800bd50 <_dtoa_r+0xa48>
 800bd8a:	f1b9 0f00 	cmp.w	r9, #0
 800bd8e:	db06      	blt.n	800bd9e <_dtoa_r+0xa96>
 800bd90:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bd92:	ea41 0909 	orr.w	r9, r1, r9
 800bd96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd98:	ea59 0101 	orrs.w	r1, r9, r1
 800bd9c:	d120      	bne.n	800bde0 <_dtoa_r+0xad8>
 800bd9e:	2a00      	cmp	r2, #0
 800bda0:	ddec      	ble.n	800bd7c <_dtoa_r+0xa74>
 800bda2:	4659      	mov	r1, fp
 800bda4:	2201      	movs	r2, #1
 800bda6:	4628      	mov	r0, r5
 800bda8:	9308      	str	r3, [sp, #32]
 800bdaa:	f000 fac3 	bl	800c334 <__lshift>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4683      	mov	fp, r0
 800bdb2:	f000 fb2f 	bl	800c414 <__mcmp>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	9b08      	ldr	r3, [sp, #32]
 800bdba:	dc02      	bgt.n	800bdc2 <_dtoa_r+0xaba>
 800bdbc:	d1de      	bne.n	800bd7c <_dtoa_r+0xa74>
 800bdbe:	07da      	lsls	r2, r3, #31
 800bdc0:	d5dc      	bpl.n	800bd7c <_dtoa_r+0xa74>
 800bdc2:	2b39      	cmp	r3, #57	; 0x39
 800bdc4:	d1d8      	bne.n	800bd78 <_dtoa_r+0xa70>
 800bdc6:	2339      	movs	r3, #57	; 0x39
 800bdc8:	9a04      	ldr	r2, [sp, #16]
 800bdca:	7013      	strb	r3, [r2, #0]
 800bdcc:	463b      	mov	r3, r7
 800bdce:	461f      	mov	r7, r3
 800bdd0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	2a39      	cmp	r2, #57	; 0x39
 800bdd8:	d050      	beq.n	800be7c <_dtoa_r+0xb74>
 800bdda:	3201      	adds	r2, #1
 800bddc:	701a      	strb	r2, [r3, #0]
 800bdde:	e747      	b.n	800bc70 <_dtoa_r+0x968>
 800bde0:	2a00      	cmp	r2, #0
 800bde2:	dd03      	ble.n	800bdec <_dtoa_r+0xae4>
 800bde4:	2b39      	cmp	r3, #57	; 0x39
 800bde6:	d0ee      	beq.n	800bdc6 <_dtoa_r+0xabe>
 800bde8:	3301      	adds	r3, #1
 800bdea:	e7c7      	b.n	800bd7c <_dtoa_r+0xa74>
 800bdec:	9a08      	ldr	r2, [sp, #32]
 800bdee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bdf4:	428a      	cmp	r2, r1
 800bdf6:	d02a      	beq.n	800be4e <_dtoa_r+0xb46>
 800bdf8:	4659      	mov	r1, fp
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 f8ec 	bl	800bfdc <__multadd>
 800be04:	45b0      	cmp	r8, r6
 800be06:	4683      	mov	fp, r0
 800be08:	f04f 0300 	mov.w	r3, #0
 800be0c:	f04f 020a 	mov.w	r2, #10
 800be10:	4641      	mov	r1, r8
 800be12:	4628      	mov	r0, r5
 800be14:	d107      	bne.n	800be26 <_dtoa_r+0xb1e>
 800be16:	f000 f8e1 	bl	800bfdc <__multadd>
 800be1a:	4680      	mov	r8, r0
 800be1c:	4606      	mov	r6, r0
 800be1e:	9b08      	ldr	r3, [sp, #32]
 800be20:	3301      	adds	r3, #1
 800be22:	9308      	str	r3, [sp, #32]
 800be24:	e775      	b.n	800bd12 <_dtoa_r+0xa0a>
 800be26:	f000 f8d9 	bl	800bfdc <__multadd>
 800be2a:	4631      	mov	r1, r6
 800be2c:	4680      	mov	r8, r0
 800be2e:	2300      	movs	r3, #0
 800be30:	220a      	movs	r2, #10
 800be32:	4628      	mov	r0, r5
 800be34:	f000 f8d2 	bl	800bfdc <__multadd>
 800be38:	4606      	mov	r6, r0
 800be3a:	e7f0      	b.n	800be1e <_dtoa_r+0xb16>
 800be3c:	f1b9 0f00 	cmp.w	r9, #0
 800be40:	bfcc      	ite	gt
 800be42:	464f      	movgt	r7, r9
 800be44:	2701      	movle	r7, #1
 800be46:	f04f 0800 	mov.w	r8, #0
 800be4a:	9a03      	ldr	r2, [sp, #12]
 800be4c:	4417      	add	r7, r2
 800be4e:	4659      	mov	r1, fp
 800be50:	2201      	movs	r2, #1
 800be52:	4628      	mov	r0, r5
 800be54:	9308      	str	r3, [sp, #32]
 800be56:	f000 fa6d 	bl	800c334 <__lshift>
 800be5a:	4621      	mov	r1, r4
 800be5c:	4683      	mov	fp, r0
 800be5e:	f000 fad9 	bl	800c414 <__mcmp>
 800be62:	2800      	cmp	r0, #0
 800be64:	dcb2      	bgt.n	800bdcc <_dtoa_r+0xac4>
 800be66:	d102      	bne.n	800be6e <_dtoa_r+0xb66>
 800be68:	9b08      	ldr	r3, [sp, #32]
 800be6a:	07db      	lsls	r3, r3, #31
 800be6c:	d4ae      	bmi.n	800bdcc <_dtoa_r+0xac4>
 800be6e:	463b      	mov	r3, r7
 800be70:	461f      	mov	r7, r3
 800be72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be76:	2a30      	cmp	r2, #48	; 0x30
 800be78:	d0fa      	beq.n	800be70 <_dtoa_r+0xb68>
 800be7a:	e6f9      	b.n	800bc70 <_dtoa_r+0x968>
 800be7c:	9a03      	ldr	r2, [sp, #12]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d1a5      	bne.n	800bdce <_dtoa_r+0xac6>
 800be82:	2331      	movs	r3, #49	; 0x31
 800be84:	f10a 0a01 	add.w	sl, sl, #1
 800be88:	e779      	b.n	800bd7e <_dtoa_r+0xa76>
 800be8a:	4b14      	ldr	r3, [pc, #80]	; (800bedc <_dtoa_r+0xbd4>)
 800be8c:	f7ff baa8 	b.w	800b3e0 <_dtoa_r+0xd8>
 800be90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be92:	2b00      	cmp	r3, #0
 800be94:	f47f aa81 	bne.w	800b39a <_dtoa_r+0x92>
 800be98:	4b11      	ldr	r3, [pc, #68]	; (800bee0 <_dtoa_r+0xbd8>)
 800be9a:	f7ff baa1 	b.w	800b3e0 <_dtoa_r+0xd8>
 800be9e:	f1b9 0f00 	cmp.w	r9, #0
 800bea2:	dc03      	bgt.n	800beac <_dtoa_r+0xba4>
 800bea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	f73f aecb 	bgt.w	800bc42 <_dtoa_r+0x93a>
 800beac:	9f03      	ldr	r7, [sp, #12]
 800beae:	4621      	mov	r1, r4
 800beb0:	4658      	mov	r0, fp
 800beb2:	f7ff f99b 	bl	800b1ec <quorem>
 800beb6:	9a03      	ldr	r2, [sp, #12]
 800beb8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bebc:	f807 3b01 	strb.w	r3, [r7], #1
 800bec0:	1aba      	subs	r2, r7, r2
 800bec2:	4591      	cmp	r9, r2
 800bec4:	ddba      	ble.n	800be3c <_dtoa_r+0xb34>
 800bec6:	4659      	mov	r1, fp
 800bec8:	2300      	movs	r3, #0
 800beca:	220a      	movs	r2, #10
 800becc:	4628      	mov	r0, r5
 800bece:	f000 f885 	bl	800bfdc <__multadd>
 800bed2:	4683      	mov	fp, r0
 800bed4:	e7eb      	b.n	800beae <_dtoa_r+0xba6>
 800bed6:	bf00      	nop
 800bed8:	0800d84b 	.word	0x0800d84b
 800bedc:	0800d7a8 	.word	0x0800d7a8
 800bee0:	0800d7cc 	.word	0x0800d7cc

0800bee4 <_localeconv_r>:
 800bee4:	4800      	ldr	r0, [pc, #0]	; (800bee8 <_localeconv_r+0x4>)
 800bee6:	4770      	bx	lr
 800bee8:	200002fc 	.word	0x200002fc

0800beec <malloc>:
 800beec:	4b02      	ldr	r3, [pc, #8]	; (800bef8 <malloc+0xc>)
 800beee:	4601      	mov	r1, r0
 800bef0:	6818      	ldr	r0, [r3, #0]
 800bef2:	f000 bc0f 	b.w	800c714 <_malloc_r>
 800bef6:	bf00      	nop
 800bef8:	200001a8 	.word	0x200001a8

0800befc <memchr>:
 800befc:	4603      	mov	r3, r0
 800befe:	b510      	push	{r4, lr}
 800bf00:	b2c9      	uxtb	r1, r1
 800bf02:	4402      	add	r2, r0
 800bf04:	4293      	cmp	r3, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	d101      	bne.n	800bf0e <memchr+0x12>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e003      	b.n	800bf16 <memchr+0x1a>
 800bf0e:	7804      	ldrb	r4, [r0, #0]
 800bf10:	3301      	adds	r3, #1
 800bf12:	428c      	cmp	r4, r1
 800bf14:	d1f6      	bne.n	800bf04 <memchr+0x8>
 800bf16:	bd10      	pop	{r4, pc}

0800bf18 <_Balloc>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	b976      	cbnz	r6, 800bf40 <_Balloc+0x28>
 800bf22:	2010      	movs	r0, #16
 800bf24:	f7ff ffe2 	bl	800beec <malloc>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf2c:	b920      	cbnz	r0, 800bf38 <_Balloc+0x20>
 800bf2e:	2166      	movs	r1, #102	; 0x66
 800bf30:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <_Balloc+0x78>)
 800bf32:	4818      	ldr	r0, [pc, #96]	; (800bf94 <_Balloc+0x7c>)
 800bf34:	f000 fdce 	bl	800cad4 <__assert_func>
 800bf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf3c:	6006      	str	r6, [r0, #0]
 800bf3e:	60c6      	str	r6, [r0, #12]
 800bf40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf42:	68f3      	ldr	r3, [r6, #12]
 800bf44:	b183      	cbz	r3, 800bf68 <_Balloc+0x50>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf4e:	b9b8      	cbnz	r0, 800bf80 <_Balloc+0x68>
 800bf50:	2101      	movs	r1, #1
 800bf52:	fa01 f605 	lsl.w	r6, r1, r5
 800bf56:	1d72      	adds	r2, r6, #5
 800bf58:	4620      	mov	r0, r4
 800bf5a:	0092      	lsls	r2, r2, #2
 800bf5c:	f000 fb5e 	bl	800c61c <_calloc_r>
 800bf60:	b160      	cbz	r0, 800bf7c <_Balloc+0x64>
 800bf62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf66:	e00e      	b.n	800bf86 <_Balloc+0x6e>
 800bf68:	2221      	movs	r2, #33	; 0x21
 800bf6a:	2104      	movs	r1, #4
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fb55 	bl	800c61c <_calloc_r>
 800bf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf74:	60f0      	str	r0, [r6, #12]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e4      	bne.n	800bf46 <_Balloc+0x2e>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	6802      	ldr	r2, [r0, #0]
 800bf82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf86:	2300      	movs	r3, #0
 800bf88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf8c:	e7f7      	b.n	800bf7e <_Balloc+0x66>
 800bf8e:	bf00      	nop
 800bf90:	0800d7d9 	.word	0x0800d7d9
 800bf94:	0800d85c 	.word	0x0800d85c

0800bf98 <_Bfree>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	b976      	cbnz	r6, 800bfc0 <_Bfree+0x28>
 800bfa2:	2010      	movs	r0, #16
 800bfa4:	f7ff ffa2 	bl	800beec <malloc>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	6268      	str	r0, [r5, #36]	; 0x24
 800bfac:	b920      	cbnz	r0, 800bfb8 <_Bfree+0x20>
 800bfae:	218a      	movs	r1, #138	; 0x8a
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <_Bfree+0x3c>)
 800bfb2:	4809      	ldr	r0, [pc, #36]	; (800bfd8 <_Bfree+0x40>)
 800bfb4:	f000 fd8e 	bl	800cad4 <__assert_func>
 800bfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfbc:	6006      	str	r6, [r0, #0]
 800bfbe:	60c6      	str	r6, [r0, #12]
 800bfc0:	b13c      	cbz	r4, 800bfd2 <_Bfree+0x3a>
 800bfc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfc4:	6862      	ldr	r2, [r4, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfcc:	6021      	str	r1, [r4, #0]
 800bfce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	0800d7d9 	.word	0x0800d7d9
 800bfd8:	0800d85c 	.word	0x0800d85c

0800bfdc <__multadd>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	461e      	mov	r6, r3
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	690d      	ldr	r5, [r1, #16]
 800bfea:	f101 0c14 	add.w	ip, r1, #20
 800bfee:	f8dc 3000 	ldr.w	r3, [ip]
 800bff2:	3001      	adds	r0, #1
 800bff4:	b299      	uxth	r1, r3
 800bff6:	fb02 6101 	mla	r1, r2, r1, r6
 800bffa:	0c1e      	lsrs	r6, r3, #16
 800bffc:	0c0b      	lsrs	r3, r1, #16
 800bffe:	fb02 3306 	mla	r3, r2, r6, r3
 800c002:	b289      	uxth	r1, r1
 800c004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c008:	4285      	cmp	r5, r0
 800c00a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c00e:	f84c 1b04 	str.w	r1, [ip], #4
 800c012:	dcec      	bgt.n	800bfee <__multadd+0x12>
 800c014:	b30e      	cbz	r6, 800c05a <__multadd+0x7e>
 800c016:	68a3      	ldr	r3, [r4, #8]
 800c018:	42ab      	cmp	r3, r5
 800c01a:	dc19      	bgt.n	800c050 <__multadd+0x74>
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	4638      	mov	r0, r7
 800c020:	3101      	adds	r1, #1
 800c022:	f7ff ff79 	bl	800bf18 <_Balloc>
 800c026:	4680      	mov	r8, r0
 800c028:	b928      	cbnz	r0, 800c036 <__multadd+0x5a>
 800c02a:	4602      	mov	r2, r0
 800c02c:	21b5      	movs	r1, #181	; 0xb5
 800c02e:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <__multadd+0x84>)
 800c030:	480c      	ldr	r0, [pc, #48]	; (800c064 <__multadd+0x88>)
 800c032:	f000 fd4f 	bl	800cad4 <__assert_func>
 800c036:	6922      	ldr	r2, [r4, #16]
 800c038:	f104 010c 	add.w	r1, r4, #12
 800c03c:	3202      	adds	r2, #2
 800c03e:	0092      	lsls	r2, r2, #2
 800c040:	300c      	adds	r0, #12
 800c042:	f7fe fc0f 	bl	800a864 <memcpy>
 800c046:	4621      	mov	r1, r4
 800c048:	4638      	mov	r0, r7
 800c04a:	f7ff ffa5 	bl	800bf98 <_Bfree>
 800c04e:	4644      	mov	r4, r8
 800c050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c054:	3501      	adds	r5, #1
 800c056:	615e      	str	r6, [r3, #20]
 800c058:	6125      	str	r5, [r4, #16]
 800c05a:	4620      	mov	r0, r4
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c060:	0800d84b 	.word	0x0800d84b
 800c064:	0800d85c 	.word	0x0800d85c

0800c068 <__hi0bits>:
 800c068:	0c02      	lsrs	r2, r0, #16
 800c06a:	0412      	lsls	r2, r2, #16
 800c06c:	4603      	mov	r3, r0
 800c06e:	b9ca      	cbnz	r2, 800c0a4 <__hi0bits+0x3c>
 800c070:	0403      	lsls	r3, r0, #16
 800c072:	2010      	movs	r0, #16
 800c074:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c078:	bf04      	itt	eq
 800c07a:	021b      	lsleq	r3, r3, #8
 800c07c:	3008      	addeq	r0, #8
 800c07e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c082:	bf04      	itt	eq
 800c084:	011b      	lsleq	r3, r3, #4
 800c086:	3004      	addeq	r0, #4
 800c088:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c08c:	bf04      	itt	eq
 800c08e:	009b      	lsleq	r3, r3, #2
 800c090:	3002      	addeq	r0, #2
 800c092:	2b00      	cmp	r3, #0
 800c094:	db05      	blt.n	800c0a2 <__hi0bits+0x3a>
 800c096:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c09a:	f100 0001 	add.w	r0, r0, #1
 800c09e:	bf08      	it	eq
 800c0a0:	2020      	moveq	r0, #32
 800c0a2:	4770      	bx	lr
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	e7e5      	b.n	800c074 <__hi0bits+0xc>

0800c0a8 <__lo0bits>:
 800c0a8:	6803      	ldr	r3, [r0, #0]
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	f013 0007 	ands.w	r0, r3, #7
 800c0b0:	d00b      	beq.n	800c0ca <__lo0bits+0x22>
 800c0b2:	07d9      	lsls	r1, r3, #31
 800c0b4:	d421      	bmi.n	800c0fa <__lo0bits+0x52>
 800c0b6:	0798      	lsls	r0, r3, #30
 800c0b8:	bf49      	itett	mi
 800c0ba:	085b      	lsrmi	r3, r3, #1
 800c0bc:	089b      	lsrpl	r3, r3, #2
 800c0be:	2001      	movmi	r0, #1
 800c0c0:	6013      	strmi	r3, [r2, #0]
 800c0c2:	bf5c      	itt	pl
 800c0c4:	2002      	movpl	r0, #2
 800c0c6:	6013      	strpl	r3, [r2, #0]
 800c0c8:	4770      	bx	lr
 800c0ca:	b299      	uxth	r1, r3
 800c0cc:	b909      	cbnz	r1, 800c0d2 <__lo0bits+0x2a>
 800c0ce:	2010      	movs	r0, #16
 800c0d0:	0c1b      	lsrs	r3, r3, #16
 800c0d2:	b2d9      	uxtb	r1, r3
 800c0d4:	b909      	cbnz	r1, 800c0da <__lo0bits+0x32>
 800c0d6:	3008      	adds	r0, #8
 800c0d8:	0a1b      	lsrs	r3, r3, #8
 800c0da:	0719      	lsls	r1, r3, #28
 800c0dc:	bf04      	itt	eq
 800c0de:	091b      	lsreq	r3, r3, #4
 800c0e0:	3004      	addeq	r0, #4
 800c0e2:	0799      	lsls	r1, r3, #30
 800c0e4:	bf04      	itt	eq
 800c0e6:	089b      	lsreq	r3, r3, #2
 800c0e8:	3002      	addeq	r0, #2
 800c0ea:	07d9      	lsls	r1, r3, #31
 800c0ec:	d403      	bmi.n	800c0f6 <__lo0bits+0x4e>
 800c0ee:	085b      	lsrs	r3, r3, #1
 800c0f0:	f100 0001 	add.w	r0, r0, #1
 800c0f4:	d003      	beq.n	800c0fe <__lo0bits+0x56>
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	4770      	bx	lr
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	4770      	bx	lr
 800c0fe:	2020      	movs	r0, #32
 800c100:	4770      	bx	lr
	...

0800c104 <__i2b>:
 800c104:	b510      	push	{r4, lr}
 800c106:	460c      	mov	r4, r1
 800c108:	2101      	movs	r1, #1
 800c10a:	f7ff ff05 	bl	800bf18 <_Balloc>
 800c10e:	4602      	mov	r2, r0
 800c110:	b928      	cbnz	r0, 800c11e <__i2b+0x1a>
 800c112:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c116:	4b04      	ldr	r3, [pc, #16]	; (800c128 <__i2b+0x24>)
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <__i2b+0x28>)
 800c11a:	f000 fcdb 	bl	800cad4 <__assert_func>
 800c11e:	2301      	movs	r3, #1
 800c120:	6144      	str	r4, [r0, #20]
 800c122:	6103      	str	r3, [r0, #16]
 800c124:	bd10      	pop	{r4, pc}
 800c126:	bf00      	nop
 800c128:	0800d84b 	.word	0x0800d84b
 800c12c:	0800d85c 	.word	0x0800d85c

0800c130 <__multiply>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	4691      	mov	r9, r2
 800c136:	690a      	ldr	r2, [r1, #16]
 800c138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c13c:	460c      	mov	r4, r1
 800c13e:	429a      	cmp	r2, r3
 800c140:	bfbe      	ittt	lt
 800c142:	460b      	movlt	r3, r1
 800c144:	464c      	movlt	r4, r9
 800c146:	4699      	movlt	r9, r3
 800c148:	6927      	ldr	r7, [r4, #16]
 800c14a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c14e:	68a3      	ldr	r3, [r4, #8]
 800c150:	6861      	ldr	r1, [r4, #4]
 800c152:	eb07 060a 	add.w	r6, r7, sl
 800c156:	42b3      	cmp	r3, r6
 800c158:	b085      	sub	sp, #20
 800c15a:	bfb8      	it	lt
 800c15c:	3101      	addlt	r1, #1
 800c15e:	f7ff fedb 	bl	800bf18 <_Balloc>
 800c162:	b930      	cbnz	r0, 800c172 <__multiply+0x42>
 800c164:	4602      	mov	r2, r0
 800c166:	f240 115d 	movw	r1, #349	; 0x15d
 800c16a:	4b43      	ldr	r3, [pc, #268]	; (800c278 <__multiply+0x148>)
 800c16c:	4843      	ldr	r0, [pc, #268]	; (800c27c <__multiply+0x14c>)
 800c16e:	f000 fcb1 	bl	800cad4 <__assert_func>
 800c172:	f100 0514 	add.w	r5, r0, #20
 800c176:	462b      	mov	r3, r5
 800c178:	2200      	movs	r2, #0
 800c17a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c17e:	4543      	cmp	r3, r8
 800c180:	d321      	bcc.n	800c1c6 <__multiply+0x96>
 800c182:	f104 0314 	add.w	r3, r4, #20
 800c186:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c18a:	f109 0314 	add.w	r3, r9, #20
 800c18e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c192:	9202      	str	r2, [sp, #8]
 800c194:	1b3a      	subs	r2, r7, r4
 800c196:	3a15      	subs	r2, #21
 800c198:	f022 0203 	bic.w	r2, r2, #3
 800c19c:	3204      	adds	r2, #4
 800c19e:	f104 0115 	add.w	r1, r4, #21
 800c1a2:	428f      	cmp	r7, r1
 800c1a4:	bf38      	it	cc
 800c1a6:	2204      	movcc	r2, #4
 800c1a8:	9201      	str	r2, [sp, #4]
 800c1aa:	9a02      	ldr	r2, [sp, #8]
 800c1ac:	9303      	str	r3, [sp, #12]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d80c      	bhi.n	800c1cc <__multiply+0x9c>
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	dd03      	ble.n	800c1be <__multiply+0x8e>
 800c1b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d059      	beq.n	800c272 <__multiply+0x142>
 800c1be:	6106      	str	r6, [r0, #16]
 800c1c0:	b005      	add	sp, #20
 800c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c6:	f843 2b04 	str.w	r2, [r3], #4
 800c1ca:	e7d8      	b.n	800c17e <__multiply+0x4e>
 800c1cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1d0:	f1ba 0f00 	cmp.w	sl, #0
 800c1d4:	d023      	beq.n	800c21e <__multiply+0xee>
 800c1d6:	46a9      	mov	r9, r5
 800c1d8:	f04f 0c00 	mov.w	ip, #0
 800c1dc:	f104 0e14 	add.w	lr, r4, #20
 800c1e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1e4:	f8d9 1000 	ldr.w	r1, [r9]
 800c1e8:	fa1f fb82 	uxth.w	fp, r2
 800c1ec:	b289      	uxth	r1, r1
 800c1ee:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1f2:	4461      	add	r1, ip
 800c1f4:	f8d9 c000 	ldr.w	ip, [r9]
 800c1f8:	0c12      	lsrs	r2, r2, #16
 800c1fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c1fe:	fb0a c202 	mla	r2, sl, r2, ip
 800c202:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c206:	b289      	uxth	r1, r1
 800c208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c20c:	4577      	cmp	r7, lr
 800c20e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c212:	f849 1b04 	str.w	r1, [r9], #4
 800c216:	d8e3      	bhi.n	800c1e0 <__multiply+0xb0>
 800c218:	9a01      	ldr	r2, [sp, #4]
 800c21a:	f845 c002 	str.w	ip, [r5, r2]
 800c21e:	9a03      	ldr	r2, [sp, #12]
 800c220:	3304      	adds	r3, #4
 800c222:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c226:	f1b9 0f00 	cmp.w	r9, #0
 800c22a:	d020      	beq.n	800c26e <__multiply+0x13e>
 800c22c:	46ae      	mov	lr, r5
 800c22e:	f04f 0a00 	mov.w	sl, #0
 800c232:	6829      	ldr	r1, [r5, #0]
 800c234:	f104 0c14 	add.w	ip, r4, #20
 800c238:	f8bc b000 	ldrh.w	fp, [ip]
 800c23c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c240:	b289      	uxth	r1, r1
 800c242:	fb09 220b 	mla	r2, r9, fp, r2
 800c246:	4492      	add	sl, r2
 800c248:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c24c:	f84e 1b04 	str.w	r1, [lr], #4
 800c250:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c254:	f8be 1000 	ldrh.w	r1, [lr]
 800c258:	0c12      	lsrs	r2, r2, #16
 800c25a:	fb09 1102 	mla	r1, r9, r2, r1
 800c25e:	4567      	cmp	r7, ip
 800c260:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c264:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c268:	d8e6      	bhi.n	800c238 <__multiply+0x108>
 800c26a:	9a01      	ldr	r2, [sp, #4]
 800c26c:	50a9      	str	r1, [r5, r2]
 800c26e:	3504      	adds	r5, #4
 800c270:	e79b      	b.n	800c1aa <__multiply+0x7a>
 800c272:	3e01      	subs	r6, #1
 800c274:	e79d      	b.n	800c1b2 <__multiply+0x82>
 800c276:	bf00      	nop
 800c278:	0800d84b 	.word	0x0800d84b
 800c27c:	0800d85c 	.word	0x0800d85c

0800c280 <__pow5mult>:
 800c280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c284:	4615      	mov	r5, r2
 800c286:	f012 0203 	ands.w	r2, r2, #3
 800c28a:	4606      	mov	r6, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	d007      	beq.n	800c2a0 <__pow5mult+0x20>
 800c290:	4c25      	ldr	r4, [pc, #148]	; (800c328 <__pow5mult+0xa8>)
 800c292:	3a01      	subs	r2, #1
 800c294:	2300      	movs	r3, #0
 800c296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c29a:	f7ff fe9f 	bl	800bfdc <__multadd>
 800c29e:	4607      	mov	r7, r0
 800c2a0:	10ad      	asrs	r5, r5, #2
 800c2a2:	d03d      	beq.n	800c320 <__pow5mult+0xa0>
 800c2a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c2a6:	b97c      	cbnz	r4, 800c2c8 <__pow5mult+0x48>
 800c2a8:	2010      	movs	r0, #16
 800c2aa:	f7ff fe1f 	bl	800beec <malloc>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	6270      	str	r0, [r6, #36]	; 0x24
 800c2b2:	b928      	cbnz	r0, 800c2c0 <__pow5mult+0x40>
 800c2b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2b8:	4b1c      	ldr	r3, [pc, #112]	; (800c32c <__pow5mult+0xac>)
 800c2ba:	481d      	ldr	r0, [pc, #116]	; (800c330 <__pow5mult+0xb0>)
 800c2bc:	f000 fc0a 	bl	800cad4 <__assert_func>
 800c2c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2c4:	6004      	str	r4, [r0, #0]
 800c2c6:	60c4      	str	r4, [r0, #12]
 800c2c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2d0:	b94c      	cbnz	r4, 800c2e6 <__pow5mult+0x66>
 800c2d2:	f240 2171 	movw	r1, #625	; 0x271
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7ff ff14 	bl	800c104 <__i2b>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4604      	mov	r4, r0
 800c2e0:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2e4:	6003      	str	r3, [r0, #0]
 800c2e6:	f04f 0900 	mov.w	r9, #0
 800c2ea:	07eb      	lsls	r3, r5, #31
 800c2ec:	d50a      	bpl.n	800c304 <__pow5mult+0x84>
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f7ff ff1c 	bl	800c130 <__multiply>
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7ff fe4b 	bl	800bf98 <_Bfree>
 800c302:	4647      	mov	r7, r8
 800c304:	106d      	asrs	r5, r5, #1
 800c306:	d00b      	beq.n	800c320 <__pow5mult+0xa0>
 800c308:	6820      	ldr	r0, [r4, #0]
 800c30a:	b938      	cbnz	r0, 800c31c <__pow5mult+0x9c>
 800c30c:	4622      	mov	r2, r4
 800c30e:	4621      	mov	r1, r4
 800c310:	4630      	mov	r0, r6
 800c312:	f7ff ff0d 	bl	800c130 <__multiply>
 800c316:	6020      	str	r0, [r4, #0]
 800c318:	f8c0 9000 	str.w	r9, [r0]
 800c31c:	4604      	mov	r4, r0
 800c31e:	e7e4      	b.n	800c2ea <__pow5mult+0x6a>
 800c320:	4638      	mov	r0, r7
 800c322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c326:	bf00      	nop
 800c328:	0800d9a8 	.word	0x0800d9a8
 800c32c:	0800d7d9 	.word	0x0800d7d9
 800c330:	0800d85c 	.word	0x0800d85c

0800c334 <__lshift>:
 800c334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c338:	460c      	mov	r4, r1
 800c33a:	4607      	mov	r7, r0
 800c33c:	4691      	mov	r9, r2
 800c33e:	6923      	ldr	r3, [r4, #16]
 800c340:	6849      	ldr	r1, [r1, #4]
 800c342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c34c:	f108 0601 	add.w	r6, r8, #1
 800c350:	42b3      	cmp	r3, r6
 800c352:	db0b      	blt.n	800c36c <__lshift+0x38>
 800c354:	4638      	mov	r0, r7
 800c356:	f7ff fddf 	bl	800bf18 <_Balloc>
 800c35a:	4605      	mov	r5, r0
 800c35c:	b948      	cbnz	r0, 800c372 <__lshift+0x3e>
 800c35e:	4602      	mov	r2, r0
 800c360:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c364:	4b29      	ldr	r3, [pc, #164]	; (800c40c <__lshift+0xd8>)
 800c366:	482a      	ldr	r0, [pc, #168]	; (800c410 <__lshift+0xdc>)
 800c368:	f000 fbb4 	bl	800cad4 <__assert_func>
 800c36c:	3101      	adds	r1, #1
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	e7ee      	b.n	800c350 <__lshift+0x1c>
 800c372:	2300      	movs	r3, #0
 800c374:	f100 0114 	add.w	r1, r0, #20
 800c378:	f100 0210 	add.w	r2, r0, #16
 800c37c:	4618      	mov	r0, r3
 800c37e:	4553      	cmp	r3, sl
 800c380:	db37      	blt.n	800c3f2 <__lshift+0xbe>
 800c382:	6920      	ldr	r0, [r4, #16]
 800c384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c388:	f104 0314 	add.w	r3, r4, #20
 800c38c:	f019 091f 	ands.w	r9, r9, #31
 800c390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c398:	d02f      	beq.n	800c3fa <__lshift+0xc6>
 800c39a:	468a      	mov	sl, r1
 800c39c:	f04f 0c00 	mov.w	ip, #0
 800c3a0:	f1c9 0e20 	rsb	lr, r9, #32
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	fa02 f209 	lsl.w	r2, r2, r9
 800c3aa:	ea42 020c 	orr.w	r2, r2, ip
 800c3ae:	f84a 2b04 	str.w	r2, [sl], #4
 800c3b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b6:	4298      	cmp	r0, r3
 800c3b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c3bc:	d8f2      	bhi.n	800c3a4 <__lshift+0x70>
 800c3be:	1b03      	subs	r3, r0, r4
 800c3c0:	3b15      	subs	r3, #21
 800c3c2:	f023 0303 	bic.w	r3, r3, #3
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	f104 0215 	add.w	r2, r4, #21
 800c3cc:	4290      	cmp	r0, r2
 800c3ce:	bf38      	it	cc
 800c3d0:	2304      	movcc	r3, #4
 800c3d2:	f841 c003 	str.w	ip, [r1, r3]
 800c3d6:	f1bc 0f00 	cmp.w	ip, #0
 800c3da:	d001      	beq.n	800c3e0 <__lshift+0xac>
 800c3dc:	f108 0602 	add.w	r6, r8, #2
 800c3e0:	3e01      	subs	r6, #1
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	612e      	str	r6, [r5, #16]
 800c3e8:	f7ff fdd6 	bl	800bf98 <_Bfree>
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	e7c1      	b.n	800c37e <__lshift+0x4a>
 800c3fa:	3904      	subs	r1, #4
 800c3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c400:	4298      	cmp	r0, r3
 800c402:	f841 2f04 	str.w	r2, [r1, #4]!
 800c406:	d8f9      	bhi.n	800c3fc <__lshift+0xc8>
 800c408:	e7ea      	b.n	800c3e0 <__lshift+0xac>
 800c40a:	bf00      	nop
 800c40c:	0800d84b 	.word	0x0800d84b
 800c410:	0800d85c 	.word	0x0800d85c

0800c414 <__mcmp>:
 800c414:	4603      	mov	r3, r0
 800c416:	690a      	ldr	r2, [r1, #16]
 800c418:	6900      	ldr	r0, [r0, #16]
 800c41a:	b530      	push	{r4, r5, lr}
 800c41c:	1a80      	subs	r0, r0, r2
 800c41e:	d10d      	bne.n	800c43c <__mcmp+0x28>
 800c420:	3314      	adds	r3, #20
 800c422:	3114      	adds	r1, #20
 800c424:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c428:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c42c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c434:	4295      	cmp	r5, r2
 800c436:	d002      	beq.n	800c43e <__mcmp+0x2a>
 800c438:	d304      	bcc.n	800c444 <__mcmp+0x30>
 800c43a:	2001      	movs	r0, #1
 800c43c:	bd30      	pop	{r4, r5, pc}
 800c43e:	42a3      	cmp	r3, r4
 800c440:	d3f4      	bcc.n	800c42c <__mcmp+0x18>
 800c442:	e7fb      	b.n	800c43c <__mcmp+0x28>
 800c444:	f04f 30ff 	mov.w	r0, #4294967295
 800c448:	e7f8      	b.n	800c43c <__mcmp+0x28>
	...

0800c44c <__mdiff>:
 800c44c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	460d      	mov	r5, r1
 800c452:	4607      	mov	r7, r0
 800c454:	4611      	mov	r1, r2
 800c456:	4628      	mov	r0, r5
 800c458:	4614      	mov	r4, r2
 800c45a:	f7ff ffdb 	bl	800c414 <__mcmp>
 800c45e:	1e06      	subs	r6, r0, #0
 800c460:	d111      	bne.n	800c486 <__mdiff+0x3a>
 800c462:	4631      	mov	r1, r6
 800c464:	4638      	mov	r0, r7
 800c466:	f7ff fd57 	bl	800bf18 <_Balloc>
 800c46a:	4602      	mov	r2, r0
 800c46c:	b928      	cbnz	r0, 800c47a <__mdiff+0x2e>
 800c46e:	f240 2132 	movw	r1, #562	; 0x232
 800c472:	4b3a      	ldr	r3, [pc, #232]	; (800c55c <__mdiff+0x110>)
 800c474:	483a      	ldr	r0, [pc, #232]	; (800c560 <__mdiff+0x114>)
 800c476:	f000 fb2d 	bl	800cad4 <__assert_func>
 800c47a:	2301      	movs	r3, #1
 800c47c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c480:	4610      	mov	r0, r2
 800c482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c486:	bfa4      	itt	ge
 800c488:	4623      	movge	r3, r4
 800c48a:	462c      	movge	r4, r5
 800c48c:	4638      	mov	r0, r7
 800c48e:	6861      	ldr	r1, [r4, #4]
 800c490:	bfa6      	itte	ge
 800c492:	461d      	movge	r5, r3
 800c494:	2600      	movge	r6, #0
 800c496:	2601      	movlt	r6, #1
 800c498:	f7ff fd3e 	bl	800bf18 <_Balloc>
 800c49c:	4602      	mov	r2, r0
 800c49e:	b918      	cbnz	r0, 800c4a8 <__mdiff+0x5c>
 800c4a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c4a4:	4b2d      	ldr	r3, [pc, #180]	; (800c55c <__mdiff+0x110>)
 800c4a6:	e7e5      	b.n	800c474 <__mdiff+0x28>
 800c4a8:	f102 0814 	add.w	r8, r2, #20
 800c4ac:	46c2      	mov	sl, r8
 800c4ae:	f04f 0c00 	mov.w	ip, #0
 800c4b2:	6927      	ldr	r7, [r4, #16]
 800c4b4:	60c6      	str	r6, [r0, #12]
 800c4b6:	692e      	ldr	r6, [r5, #16]
 800c4b8:	f104 0014 	add.w	r0, r4, #20
 800c4bc:	f105 0914 	add.w	r9, r5, #20
 800c4c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c4c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4c8:	3410      	adds	r4, #16
 800c4ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c4ce:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4d2:	fa1f f18b 	uxth.w	r1, fp
 800c4d6:	448c      	add	ip, r1
 800c4d8:	b299      	uxth	r1, r3
 800c4da:	0c1b      	lsrs	r3, r3, #16
 800c4dc:	ebac 0101 	sub.w	r1, ip, r1
 800c4e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c4e8:	b289      	uxth	r1, r1
 800c4ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c4ee:	454e      	cmp	r6, r9
 800c4f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c4f4:	f84a 3b04 	str.w	r3, [sl], #4
 800c4f8:	d8e7      	bhi.n	800c4ca <__mdiff+0x7e>
 800c4fa:	1b73      	subs	r3, r6, r5
 800c4fc:	3b15      	subs	r3, #21
 800c4fe:	f023 0303 	bic.w	r3, r3, #3
 800c502:	3515      	adds	r5, #21
 800c504:	3304      	adds	r3, #4
 800c506:	42ae      	cmp	r6, r5
 800c508:	bf38      	it	cc
 800c50a:	2304      	movcc	r3, #4
 800c50c:	4418      	add	r0, r3
 800c50e:	4443      	add	r3, r8
 800c510:	461e      	mov	r6, r3
 800c512:	4605      	mov	r5, r0
 800c514:	4575      	cmp	r5, lr
 800c516:	d30e      	bcc.n	800c536 <__mdiff+0xea>
 800c518:	f10e 0103 	add.w	r1, lr, #3
 800c51c:	1a09      	subs	r1, r1, r0
 800c51e:	f021 0103 	bic.w	r1, r1, #3
 800c522:	3803      	subs	r0, #3
 800c524:	4586      	cmp	lr, r0
 800c526:	bf38      	it	cc
 800c528:	2100      	movcc	r1, #0
 800c52a:	4419      	add	r1, r3
 800c52c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c530:	b18b      	cbz	r3, 800c556 <__mdiff+0x10a>
 800c532:	6117      	str	r7, [r2, #16]
 800c534:	e7a4      	b.n	800c480 <__mdiff+0x34>
 800c536:	f855 8b04 	ldr.w	r8, [r5], #4
 800c53a:	fa1f f188 	uxth.w	r1, r8
 800c53e:	4461      	add	r1, ip
 800c540:	140c      	asrs	r4, r1, #16
 800c542:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c546:	b289      	uxth	r1, r1
 800c548:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c54c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c550:	f846 1b04 	str.w	r1, [r6], #4
 800c554:	e7de      	b.n	800c514 <__mdiff+0xc8>
 800c556:	3f01      	subs	r7, #1
 800c558:	e7e8      	b.n	800c52c <__mdiff+0xe0>
 800c55a:	bf00      	nop
 800c55c:	0800d84b 	.word	0x0800d84b
 800c560:	0800d85c 	.word	0x0800d85c

0800c564 <__d2b>:
 800c564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c568:	2101      	movs	r1, #1
 800c56a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c56e:	4690      	mov	r8, r2
 800c570:	461d      	mov	r5, r3
 800c572:	f7ff fcd1 	bl	800bf18 <_Balloc>
 800c576:	4604      	mov	r4, r0
 800c578:	b930      	cbnz	r0, 800c588 <__d2b+0x24>
 800c57a:	4602      	mov	r2, r0
 800c57c:	f240 310a 	movw	r1, #778	; 0x30a
 800c580:	4b24      	ldr	r3, [pc, #144]	; (800c614 <__d2b+0xb0>)
 800c582:	4825      	ldr	r0, [pc, #148]	; (800c618 <__d2b+0xb4>)
 800c584:	f000 faa6 	bl	800cad4 <__assert_func>
 800c588:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c58c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c590:	bb2d      	cbnz	r5, 800c5de <__d2b+0x7a>
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	f1b8 0300 	subs.w	r3, r8, #0
 800c598:	d026      	beq.n	800c5e8 <__d2b+0x84>
 800c59a:	4668      	mov	r0, sp
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	f7ff fd83 	bl	800c0a8 <__lo0bits>
 800c5a2:	9900      	ldr	r1, [sp, #0]
 800c5a4:	b1f0      	cbz	r0, 800c5e4 <__d2b+0x80>
 800c5a6:	9a01      	ldr	r2, [sp, #4]
 800c5a8:	f1c0 0320 	rsb	r3, r0, #32
 800c5ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	40c2      	lsrs	r2, r0
 800c5b4:	6163      	str	r3, [r4, #20]
 800c5b6:	9201      	str	r2, [sp, #4]
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	bf14      	ite	ne
 800c5be:	2102      	movne	r1, #2
 800c5c0:	2101      	moveq	r1, #1
 800c5c2:	61a3      	str	r3, [r4, #24]
 800c5c4:	6121      	str	r1, [r4, #16]
 800c5c6:	b1c5      	cbz	r5, 800c5fa <__d2b+0x96>
 800c5c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5cc:	4405      	add	r5, r0
 800c5ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5d2:	603d      	str	r5, [r7, #0]
 800c5d4:	6030      	str	r0, [r6, #0]
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	b002      	add	sp, #8
 800c5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5e2:	e7d6      	b.n	800c592 <__d2b+0x2e>
 800c5e4:	6161      	str	r1, [r4, #20]
 800c5e6:	e7e7      	b.n	800c5b8 <__d2b+0x54>
 800c5e8:	a801      	add	r0, sp, #4
 800c5ea:	f7ff fd5d 	bl	800c0a8 <__lo0bits>
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	9b01      	ldr	r3, [sp, #4]
 800c5f2:	6121      	str	r1, [r4, #16]
 800c5f4:	6163      	str	r3, [r4, #20]
 800c5f6:	3020      	adds	r0, #32
 800c5f8:	e7e5      	b.n	800c5c6 <__d2b+0x62>
 800c5fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c5fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c602:	6038      	str	r0, [r7, #0]
 800c604:	6918      	ldr	r0, [r3, #16]
 800c606:	f7ff fd2f 	bl	800c068 <__hi0bits>
 800c60a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c60e:	6031      	str	r1, [r6, #0]
 800c610:	e7e1      	b.n	800c5d6 <__d2b+0x72>
 800c612:	bf00      	nop
 800c614:	0800d84b 	.word	0x0800d84b
 800c618:	0800d85c 	.word	0x0800d85c

0800c61c <_calloc_r>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	fba1 5402 	umull	r5, r4, r1, r2
 800c622:	b934      	cbnz	r4, 800c632 <_calloc_r+0x16>
 800c624:	4629      	mov	r1, r5
 800c626:	f000 f875 	bl	800c714 <_malloc_r>
 800c62a:	4606      	mov	r6, r0
 800c62c:	b928      	cbnz	r0, 800c63a <_calloc_r+0x1e>
 800c62e:	4630      	mov	r0, r6
 800c630:	bd70      	pop	{r4, r5, r6, pc}
 800c632:	220c      	movs	r2, #12
 800c634:	2600      	movs	r6, #0
 800c636:	6002      	str	r2, [r0, #0]
 800c638:	e7f9      	b.n	800c62e <_calloc_r+0x12>
 800c63a:	462a      	mov	r2, r5
 800c63c:	4621      	mov	r1, r4
 800c63e:	f7fe f939 	bl	800a8b4 <memset>
 800c642:	e7f4      	b.n	800c62e <_calloc_r+0x12>

0800c644 <_free_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4605      	mov	r5, r0
 800c648:	2900      	cmp	r1, #0
 800c64a:	d040      	beq.n	800c6ce <_free_r+0x8a>
 800c64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c650:	1f0c      	subs	r4, r1, #4
 800c652:	2b00      	cmp	r3, #0
 800c654:	bfb8      	it	lt
 800c656:	18e4      	addlt	r4, r4, r3
 800c658:	f000 fa7e 	bl	800cb58 <__malloc_lock>
 800c65c:	4a1c      	ldr	r2, [pc, #112]	; (800c6d0 <_free_r+0x8c>)
 800c65e:	6813      	ldr	r3, [r2, #0]
 800c660:	b933      	cbnz	r3, 800c670 <_free_r+0x2c>
 800c662:	6063      	str	r3, [r4, #4]
 800c664:	6014      	str	r4, [r2, #0]
 800c666:	4628      	mov	r0, r5
 800c668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c66c:	f000 ba7a 	b.w	800cb64 <__malloc_unlock>
 800c670:	42a3      	cmp	r3, r4
 800c672:	d908      	bls.n	800c686 <_free_r+0x42>
 800c674:	6820      	ldr	r0, [r4, #0]
 800c676:	1821      	adds	r1, r4, r0
 800c678:	428b      	cmp	r3, r1
 800c67a:	bf01      	itttt	eq
 800c67c:	6819      	ldreq	r1, [r3, #0]
 800c67e:	685b      	ldreq	r3, [r3, #4]
 800c680:	1809      	addeq	r1, r1, r0
 800c682:	6021      	streq	r1, [r4, #0]
 800c684:	e7ed      	b.n	800c662 <_free_r+0x1e>
 800c686:	461a      	mov	r2, r3
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	b10b      	cbz	r3, 800c690 <_free_r+0x4c>
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d9fa      	bls.n	800c686 <_free_r+0x42>
 800c690:	6811      	ldr	r1, [r2, #0]
 800c692:	1850      	adds	r0, r2, r1
 800c694:	42a0      	cmp	r0, r4
 800c696:	d10b      	bne.n	800c6b0 <_free_r+0x6c>
 800c698:	6820      	ldr	r0, [r4, #0]
 800c69a:	4401      	add	r1, r0
 800c69c:	1850      	adds	r0, r2, r1
 800c69e:	4283      	cmp	r3, r0
 800c6a0:	6011      	str	r1, [r2, #0]
 800c6a2:	d1e0      	bne.n	800c666 <_free_r+0x22>
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	4401      	add	r1, r0
 800c6aa:	6011      	str	r1, [r2, #0]
 800c6ac:	6053      	str	r3, [r2, #4]
 800c6ae:	e7da      	b.n	800c666 <_free_r+0x22>
 800c6b0:	d902      	bls.n	800c6b8 <_free_r+0x74>
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	e7d6      	b.n	800c666 <_free_r+0x22>
 800c6b8:	6820      	ldr	r0, [r4, #0]
 800c6ba:	1821      	adds	r1, r4, r0
 800c6bc:	428b      	cmp	r3, r1
 800c6be:	bf01      	itttt	eq
 800c6c0:	6819      	ldreq	r1, [r3, #0]
 800c6c2:	685b      	ldreq	r3, [r3, #4]
 800c6c4:	1809      	addeq	r1, r1, r0
 800c6c6:	6021      	streq	r1, [r4, #0]
 800c6c8:	6063      	str	r3, [r4, #4]
 800c6ca:	6054      	str	r4, [r2, #4]
 800c6cc:	e7cb      	b.n	800c666 <_free_r+0x22>
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	20001958 	.word	0x20001958

0800c6d4 <sbrk_aligned>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4e0e      	ldr	r6, [pc, #56]	; (800c710 <sbrk_aligned+0x3c>)
 800c6d8:	460c      	mov	r4, r1
 800c6da:	6831      	ldr	r1, [r6, #0]
 800c6dc:	4605      	mov	r5, r0
 800c6de:	b911      	cbnz	r1, 800c6e6 <sbrk_aligned+0x12>
 800c6e0:	f000 f9e8 	bl	800cab4 <_sbrk_r>
 800c6e4:	6030      	str	r0, [r6, #0]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 f9e3 	bl	800cab4 <_sbrk_r>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d00a      	beq.n	800c708 <sbrk_aligned+0x34>
 800c6f2:	1cc4      	adds	r4, r0, #3
 800c6f4:	f024 0403 	bic.w	r4, r4, #3
 800c6f8:	42a0      	cmp	r0, r4
 800c6fa:	d007      	beq.n	800c70c <sbrk_aligned+0x38>
 800c6fc:	1a21      	subs	r1, r4, r0
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 f9d8 	bl	800cab4 <_sbrk_r>
 800c704:	3001      	adds	r0, #1
 800c706:	d101      	bne.n	800c70c <sbrk_aligned+0x38>
 800c708:	f04f 34ff 	mov.w	r4, #4294967295
 800c70c:	4620      	mov	r0, r4
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	2000195c 	.word	0x2000195c

0800c714 <_malloc_r>:
 800c714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	1ccd      	adds	r5, r1, #3
 800c71a:	f025 0503 	bic.w	r5, r5, #3
 800c71e:	3508      	adds	r5, #8
 800c720:	2d0c      	cmp	r5, #12
 800c722:	bf38      	it	cc
 800c724:	250c      	movcc	r5, #12
 800c726:	2d00      	cmp	r5, #0
 800c728:	4607      	mov	r7, r0
 800c72a:	db01      	blt.n	800c730 <_malloc_r+0x1c>
 800c72c:	42a9      	cmp	r1, r5
 800c72e:	d905      	bls.n	800c73c <_malloc_r+0x28>
 800c730:	230c      	movs	r3, #12
 800c732:	2600      	movs	r6, #0
 800c734:	603b      	str	r3, [r7, #0]
 800c736:	4630      	mov	r0, r6
 800c738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73c:	4e2e      	ldr	r6, [pc, #184]	; (800c7f8 <_malloc_r+0xe4>)
 800c73e:	f000 fa0b 	bl	800cb58 <__malloc_lock>
 800c742:	6833      	ldr	r3, [r6, #0]
 800c744:	461c      	mov	r4, r3
 800c746:	bb34      	cbnz	r4, 800c796 <_malloc_r+0x82>
 800c748:	4629      	mov	r1, r5
 800c74a:	4638      	mov	r0, r7
 800c74c:	f7ff ffc2 	bl	800c6d4 <sbrk_aligned>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	4604      	mov	r4, r0
 800c754:	d14d      	bne.n	800c7f2 <_malloc_r+0xde>
 800c756:	6834      	ldr	r4, [r6, #0]
 800c758:	4626      	mov	r6, r4
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	d140      	bne.n	800c7e0 <_malloc_r+0xcc>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	4631      	mov	r1, r6
 800c762:	4638      	mov	r0, r7
 800c764:	eb04 0803 	add.w	r8, r4, r3
 800c768:	f000 f9a4 	bl	800cab4 <_sbrk_r>
 800c76c:	4580      	cmp	r8, r0
 800c76e:	d13a      	bne.n	800c7e6 <_malloc_r+0xd2>
 800c770:	6821      	ldr	r1, [r4, #0]
 800c772:	3503      	adds	r5, #3
 800c774:	1a6d      	subs	r5, r5, r1
 800c776:	f025 0503 	bic.w	r5, r5, #3
 800c77a:	3508      	adds	r5, #8
 800c77c:	2d0c      	cmp	r5, #12
 800c77e:	bf38      	it	cc
 800c780:	250c      	movcc	r5, #12
 800c782:	4638      	mov	r0, r7
 800c784:	4629      	mov	r1, r5
 800c786:	f7ff ffa5 	bl	800c6d4 <sbrk_aligned>
 800c78a:	3001      	adds	r0, #1
 800c78c:	d02b      	beq.n	800c7e6 <_malloc_r+0xd2>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	442b      	add	r3, r5
 800c792:	6023      	str	r3, [r4, #0]
 800c794:	e00e      	b.n	800c7b4 <_malloc_r+0xa0>
 800c796:	6822      	ldr	r2, [r4, #0]
 800c798:	1b52      	subs	r2, r2, r5
 800c79a:	d41e      	bmi.n	800c7da <_malloc_r+0xc6>
 800c79c:	2a0b      	cmp	r2, #11
 800c79e:	d916      	bls.n	800c7ce <_malloc_r+0xba>
 800c7a0:	1961      	adds	r1, r4, r5
 800c7a2:	42a3      	cmp	r3, r4
 800c7a4:	6025      	str	r5, [r4, #0]
 800c7a6:	bf18      	it	ne
 800c7a8:	6059      	strne	r1, [r3, #4]
 800c7aa:	6863      	ldr	r3, [r4, #4]
 800c7ac:	bf08      	it	eq
 800c7ae:	6031      	streq	r1, [r6, #0]
 800c7b0:	5162      	str	r2, [r4, r5]
 800c7b2:	604b      	str	r3, [r1, #4]
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f104 060b 	add.w	r6, r4, #11
 800c7ba:	f000 f9d3 	bl	800cb64 <__malloc_unlock>
 800c7be:	f026 0607 	bic.w	r6, r6, #7
 800c7c2:	1d23      	adds	r3, r4, #4
 800c7c4:	1af2      	subs	r2, r6, r3
 800c7c6:	d0b6      	beq.n	800c736 <_malloc_r+0x22>
 800c7c8:	1b9b      	subs	r3, r3, r6
 800c7ca:	50a3      	str	r3, [r4, r2]
 800c7cc:	e7b3      	b.n	800c736 <_malloc_r+0x22>
 800c7ce:	6862      	ldr	r2, [r4, #4]
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	bf0c      	ite	eq
 800c7d4:	6032      	streq	r2, [r6, #0]
 800c7d6:	605a      	strne	r2, [r3, #4]
 800c7d8:	e7ec      	b.n	800c7b4 <_malloc_r+0xa0>
 800c7da:	4623      	mov	r3, r4
 800c7dc:	6864      	ldr	r4, [r4, #4]
 800c7de:	e7b2      	b.n	800c746 <_malloc_r+0x32>
 800c7e0:	4634      	mov	r4, r6
 800c7e2:	6876      	ldr	r6, [r6, #4]
 800c7e4:	e7b9      	b.n	800c75a <_malloc_r+0x46>
 800c7e6:	230c      	movs	r3, #12
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	603b      	str	r3, [r7, #0]
 800c7ec:	f000 f9ba 	bl	800cb64 <__malloc_unlock>
 800c7f0:	e7a1      	b.n	800c736 <_malloc_r+0x22>
 800c7f2:	6025      	str	r5, [r4, #0]
 800c7f4:	e7de      	b.n	800c7b4 <_malloc_r+0xa0>
 800c7f6:	bf00      	nop
 800c7f8:	20001958 	.word	0x20001958

0800c7fc <__ssputs_r>:
 800c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	688e      	ldr	r6, [r1, #8]
 800c802:	4682      	mov	sl, r0
 800c804:	429e      	cmp	r6, r3
 800c806:	460c      	mov	r4, r1
 800c808:	4690      	mov	r8, r2
 800c80a:	461f      	mov	r7, r3
 800c80c:	d838      	bhi.n	800c880 <__ssputs_r+0x84>
 800c80e:	898a      	ldrh	r2, [r1, #12]
 800c810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c814:	d032      	beq.n	800c87c <__ssputs_r+0x80>
 800c816:	6825      	ldr	r5, [r4, #0]
 800c818:	6909      	ldr	r1, [r1, #16]
 800c81a:	3301      	adds	r3, #1
 800c81c:	eba5 0901 	sub.w	r9, r5, r1
 800c820:	6965      	ldr	r5, [r4, #20]
 800c822:	444b      	add	r3, r9
 800c824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c82c:	106d      	asrs	r5, r5, #1
 800c82e:	429d      	cmp	r5, r3
 800c830:	bf38      	it	cc
 800c832:	461d      	movcc	r5, r3
 800c834:	0553      	lsls	r3, r2, #21
 800c836:	d531      	bpl.n	800c89c <__ssputs_r+0xa0>
 800c838:	4629      	mov	r1, r5
 800c83a:	f7ff ff6b 	bl	800c714 <_malloc_r>
 800c83e:	4606      	mov	r6, r0
 800c840:	b950      	cbnz	r0, 800c858 <__ssputs_r+0x5c>
 800c842:	230c      	movs	r3, #12
 800c844:	f04f 30ff 	mov.w	r0, #4294967295
 800c848:	f8ca 3000 	str.w	r3, [sl]
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c858:	464a      	mov	r2, r9
 800c85a:	6921      	ldr	r1, [r4, #16]
 800c85c:	f7fe f802 	bl	800a864 <memcpy>
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	6126      	str	r6, [r4, #16]
 800c86e:	444e      	add	r6, r9
 800c870:	6026      	str	r6, [r4, #0]
 800c872:	463e      	mov	r6, r7
 800c874:	6165      	str	r5, [r4, #20]
 800c876:	eba5 0509 	sub.w	r5, r5, r9
 800c87a:	60a5      	str	r5, [r4, #8]
 800c87c:	42be      	cmp	r6, r7
 800c87e:	d900      	bls.n	800c882 <__ssputs_r+0x86>
 800c880:	463e      	mov	r6, r7
 800c882:	4632      	mov	r2, r6
 800c884:	4641      	mov	r1, r8
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	f7fd fffa 	bl	800a880 <memmove>
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	2000      	movs	r0, #0
 800c890:	1b9b      	subs	r3, r3, r6
 800c892:	60a3      	str	r3, [r4, #8]
 800c894:	6823      	ldr	r3, [r4, #0]
 800c896:	4433      	add	r3, r6
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	e7db      	b.n	800c854 <__ssputs_r+0x58>
 800c89c:	462a      	mov	r2, r5
 800c89e:	f000 f967 	bl	800cb70 <_realloc_r>
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1e1      	bne.n	800c86c <__ssputs_r+0x70>
 800c8a8:	4650      	mov	r0, sl
 800c8aa:	6921      	ldr	r1, [r4, #16]
 800c8ac:	f7ff feca 	bl	800c644 <_free_r>
 800c8b0:	e7c7      	b.n	800c842 <__ssputs_r+0x46>
	...

0800c8b4 <_svfiprintf_r>:
 800c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b8:	4698      	mov	r8, r3
 800c8ba:	898b      	ldrh	r3, [r1, #12]
 800c8bc:	4607      	mov	r7, r0
 800c8be:	061b      	lsls	r3, r3, #24
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	4614      	mov	r4, r2
 800c8c4:	b09d      	sub	sp, #116	; 0x74
 800c8c6:	d50e      	bpl.n	800c8e6 <_svfiprintf_r+0x32>
 800c8c8:	690b      	ldr	r3, [r1, #16]
 800c8ca:	b963      	cbnz	r3, 800c8e6 <_svfiprintf_r+0x32>
 800c8cc:	2140      	movs	r1, #64	; 0x40
 800c8ce:	f7ff ff21 	bl	800c714 <_malloc_r>
 800c8d2:	6028      	str	r0, [r5, #0]
 800c8d4:	6128      	str	r0, [r5, #16]
 800c8d6:	b920      	cbnz	r0, 800c8e2 <_svfiprintf_r+0x2e>
 800c8d8:	230c      	movs	r3, #12
 800c8da:	603b      	str	r3, [r7, #0]
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	e0d1      	b.n	800ca86 <_svfiprintf_r+0x1d2>
 800c8e2:	2340      	movs	r3, #64	; 0x40
 800c8e4:	616b      	str	r3, [r5, #20]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ea:	2320      	movs	r3, #32
 800c8ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8f0:	2330      	movs	r3, #48	; 0x30
 800c8f2:	f04f 0901 	mov.w	r9, #1
 800c8f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800caa0 <_svfiprintf_r+0x1ec>
 800c8fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c902:	4623      	mov	r3, r4
 800c904:	469a      	mov	sl, r3
 800c906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c90a:	b10a      	cbz	r2, 800c910 <_svfiprintf_r+0x5c>
 800c90c:	2a25      	cmp	r2, #37	; 0x25
 800c90e:	d1f9      	bne.n	800c904 <_svfiprintf_r+0x50>
 800c910:	ebba 0b04 	subs.w	fp, sl, r4
 800c914:	d00b      	beq.n	800c92e <_svfiprintf_r+0x7a>
 800c916:	465b      	mov	r3, fp
 800c918:	4622      	mov	r2, r4
 800c91a:	4629      	mov	r1, r5
 800c91c:	4638      	mov	r0, r7
 800c91e:	f7ff ff6d 	bl	800c7fc <__ssputs_r>
 800c922:	3001      	adds	r0, #1
 800c924:	f000 80aa 	beq.w	800ca7c <_svfiprintf_r+0x1c8>
 800c928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c92a:	445a      	add	r2, fp
 800c92c:	9209      	str	r2, [sp, #36]	; 0x24
 800c92e:	f89a 3000 	ldrb.w	r3, [sl]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 80a2 	beq.w	800ca7c <_svfiprintf_r+0x1c8>
 800c938:	2300      	movs	r3, #0
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c942:	f10a 0a01 	add.w	sl, sl, #1
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	9307      	str	r3, [sp, #28]
 800c94a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c94e:	931a      	str	r3, [sp, #104]	; 0x68
 800c950:	4654      	mov	r4, sl
 800c952:	2205      	movs	r2, #5
 800c954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c958:	4851      	ldr	r0, [pc, #324]	; (800caa0 <_svfiprintf_r+0x1ec>)
 800c95a:	f7ff facf 	bl	800befc <memchr>
 800c95e:	9a04      	ldr	r2, [sp, #16]
 800c960:	b9d8      	cbnz	r0, 800c99a <_svfiprintf_r+0xe6>
 800c962:	06d0      	lsls	r0, r2, #27
 800c964:	bf44      	itt	mi
 800c966:	2320      	movmi	r3, #32
 800c968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c96c:	0711      	lsls	r1, r2, #28
 800c96e:	bf44      	itt	mi
 800c970:	232b      	movmi	r3, #43	; 0x2b
 800c972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c976:	f89a 3000 	ldrb.w	r3, [sl]
 800c97a:	2b2a      	cmp	r3, #42	; 0x2a
 800c97c:	d015      	beq.n	800c9aa <_svfiprintf_r+0xf6>
 800c97e:	4654      	mov	r4, sl
 800c980:	2000      	movs	r0, #0
 800c982:	f04f 0c0a 	mov.w	ip, #10
 800c986:	9a07      	ldr	r2, [sp, #28]
 800c988:	4621      	mov	r1, r4
 800c98a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c98e:	3b30      	subs	r3, #48	; 0x30
 800c990:	2b09      	cmp	r3, #9
 800c992:	d94e      	bls.n	800ca32 <_svfiprintf_r+0x17e>
 800c994:	b1b0      	cbz	r0, 800c9c4 <_svfiprintf_r+0x110>
 800c996:	9207      	str	r2, [sp, #28]
 800c998:	e014      	b.n	800c9c4 <_svfiprintf_r+0x110>
 800c99a:	eba0 0308 	sub.w	r3, r0, r8
 800c99e:	fa09 f303 	lsl.w	r3, r9, r3
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	46a2      	mov	sl, r4
 800c9a6:	9304      	str	r3, [sp, #16]
 800c9a8:	e7d2      	b.n	800c950 <_svfiprintf_r+0x9c>
 800c9aa:	9b03      	ldr	r3, [sp, #12]
 800c9ac:	1d19      	adds	r1, r3, #4
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	9103      	str	r1, [sp, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfbb      	ittet	lt
 800c9b6:	425b      	neglt	r3, r3
 800c9b8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9bc:	9307      	strge	r3, [sp, #28]
 800c9be:	9307      	strlt	r3, [sp, #28]
 800c9c0:	bfb8      	it	lt
 800c9c2:	9204      	strlt	r2, [sp, #16]
 800c9c4:	7823      	ldrb	r3, [r4, #0]
 800c9c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c8:	d10c      	bne.n	800c9e4 <_svfiprintf_r+0x130>
 800c9ca:	7863      	ldrb	r3, [r4, #1]
 800c9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ce:	d135      	bne.n	800ca3c <_svfiprintf_r+0x188>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	3402      	adds	r4, #2
 800c9d4:	1d1a      	adds	r2, r3, #4
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	9203      	str	r2, [sp, #12]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	bfb8      	it	lt
 800c9de:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9e2:	9305      	str	r3, [sp, #20]
 800c9e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800caa4 <_svfiprintf_r+0x1f0>
 800c9e8:	2203      	movs	r2, #3
 800c9ea:	4650      	mov	r0, sl
 800c9ec:	7821      	ldrb	r1, [r4, #0]
 800c9ee:	f7ff fa85 	bl	800befc <memchr>
 800c9f2:	b140      	cbz	r0, 800ca06 <_svfiprintf_r+0x152>
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	eba0 000a 	sub.w	r0, r0, sl
 800c9fa:	fa03 f000 	lsl.w	r0, r3, r0
 800c9fe:	9b04      	ldr	r3, [sp, #16]
 800ca00:	3401      	adds	r4, #1
 800ca02:	4303      	orrs	r3, r0
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0a:	2206      	movs	r2, #6
 800ca0c:	4826      	ldr	r0, [pc, #152]	; (800caa8 <_svfiprintf_r+0x1f4>)
 800ca0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca12:	f7ff fa73 	bl	800befc <memchr>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d038      	beq.n	800ca8c <_svfiprintf_r+0x1d8>
 800ca1a:	4b24      	ldr	r3, [pc, #144]	; (800caac <_svfiprintf_r+0x1f8>)
 800ca1c:	bb1b      	cbnz	r3, 800ca66 <_svfiprintf_r+0x1b2>
 800ca1e:	9b03      	ldr	r3, [sp, #12]
 800ca20:	3307      	adds	r3, #7
 800ca22:	f023 0307 	bic.w	r3, r3, #7
 800ca26:	3308      	adds	r3, #8
 800ca28:	9303      	str	r3, [sp, #12]
 800ca2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca2c:	4433      	add	r3, r6
 800ca2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca30:	e767      	b.n	800c902 <_svfiprintf_r+0x4e>
 800ca32:	460c      	mov	r4, r1
 800ca34:	2001      	movs	r0, #1
 800ca36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca3a:	e7a5      	b.n	800c988 <_svfiprintf_r+0xd4>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f04f 0c0a 	mov.w	ip, #10
 800ca42:	4619      	mov	r1, r3
 800ca44:	3401      	adds	r4, #1
 800ca46:	9305      	str	r3, [sp, #20]
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca4e:	3a30      	subs	r2, #48	; 0x30
 800ca50:	2a09      	cmp	r2, #9
 800ca52:	d903      	bls.n	800ca5c <_svfiprintf_r+0x1a8>
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0c5      	beq.n	800c9e4 <_svfiprintf_r+0x130>
 800ca58:	9105      	str	r1, [sp, #20]
 800ca5a:	e7c3      	b.n	800c9e4 <_svfiprintf_r+0x130>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	2301      	movs	r3, #1
 800ca60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca64:	e7f0      	b.n	800ca48 <_svfiprintf_r+0x194>
 800ca66:	ab03      	add	r3, sp, #12
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	462a      	mov	r2, r5
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	4b10      	ldr	r3, [pc, #64]	; (800cab0 <_svfiprintf_r+0x1fc>)
 800ca70:	a904      	add	r1, sp, #16
 800ca72:	f7fd ffc5 	bl	800aa00 <_printf_float>
 800ca76:	1c42      	adds	r2, r0, #1
 800ca78:	4606      	mov	r6, r0
 800ca7a:	d1d6      	bne.n	800ca2a <_svfiprintf_r+0x176>
 800ca7c:	89ab      	ldrh	r3, [r5, #12]
 800ca7e:	065b      	lsls	r3, r3, #25
 800ca80:	f53f af2c 	bmi.w	800c8dc <_svfiprintf_r+0x28>
 800ca84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca86:	b01d      	add	sp, #116	; 0x74
 800ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8c:	ab03      	add	r3, sp, #12
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	462a      	mov	r2, r5
 800ca92:	4638      	mov	r0, r7
 800ca94:	4b06      	ldr	r3, [pc, #24]	; (800cab0 <_svfiprintf_r+0x1fc>)
 800ca96:	a904      	add	r1, sp, #16
 800ca98:	f7fe fa4e 	bl	800af38 <_printf_i>
 800ca9c:	e7eb      	b.n	800ca76 <_svfiprintf_r+0x1c2>
 800ca9e:	bf00      	nop
 800caa0:	0800d9b4 	.word	0x0800d9b4
 800caa4:	0800d9ba 	.word	0x0800d9ba
 800caa8:	0800d9be 	.word	0x0800d9be
 800caac:	0800aa01 	.word	0x0800aa01
 800cab0:	0800c7fd 	.word	0x0800c7fd

0800cab4 <_sbrk_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	2300      	movs	r3, #0
 800cab8:	4d05      	ldr	r5, [pc, #20]	; (800cad0 <_sbrk_r+0x1c>)
 800caba:	4604      	mov	r4, r0
 800cabc:	4608      	mov	r0, r1
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	f7f8 fd82 	bl	80055c8 <_sbrk>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_sbrk_r+0x1a>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_sbrk_r+0x1a>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	20001960 	.word	0x20001960

0800cad4 <__assert_func>:
 800cad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cad6:	4614      	mov	r4, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	4b09      	ldr	r3, [pc, #36]	; (800cb00 <__assert_func+0x2c>)
 800cadc:	4605      	mov	r5, r0
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68d8      	ldr	r0, [r3, #12]
 800cae2:	b14c      	cbz	r4, 800caf8 <__assert_func+0x24>
 800cae4:	4b07      	ldr	r3, [pc, #28]	; (800cb04 <__assert_func+0x30>)
 800cae6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caea:	9100      	str	r1, [sp, #0]
 800caec:	462b      	mov	r3, r5
 800caee:	4906      	ldr	r1, [pc, #24]	; (800cb08 <__assert_func+0x34>)
 800caf0:	f000 f80e 	bl	800cb10 <fiprintf>
 800caf4:	f000 fa90 	bl	800d018 <abort>
 800caf8:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <__assert_func+0x38>)
 800cafa:	461c      	mov	r4, r3
 800cafc:	e7f3      	b.n	800cae6 <__assert_func+0x12>
 800cafe:	bf00      	nop
 800cb00:	200001a8 	.word	0x200001a8
 800cb04:	0800d9c5 	.word	0x0800d9c5
 800cb08:	0800d9d2 	.word	0x0800d9d2
 800cb0c:	0800da00 	.word	0x0800da00

0800cb10 <fiprintf>:
 800cb10:	b40e      	push	{r1, r2, r3}
 800cb12:	b503      	push	{r0, r1, lr}
 800cb14:	4601      	mov	r1, r0
 800cb16:	ab03      	add	r3, sp, #12
 800cb18:	4805      	ldr	r0, [pc, #20]	; (800cb30 <fiprintf+0x20>)
 800cb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1e:	6800      	ldr	r0, [r0, #0]
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	f000 f87b 	bl	800cc1c <_vfiprintf_r>
 800cb26:	b002      	add	sp, #8
 800cb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb2c:	b003      	add	sp, #12
 800cb2e:	4770      	bx	lr
 800cb30:	200001a8 	.word	0x200001a8

0800cb34 <__ascii_mbtowc>:
 800cb34:	b082      	sub	sp, #8
 800cb36:	b901      	cbnz	r1, 800cb3a <__ascii_mbtowc+0x6>
 800cb38:	a901      	add	r1, sp, #4
 800cb3a:	b142      	cbz	r2, 800cb4e <__ascii_mbtowc+0x1a>
 800cb3c:	b14b      	cbz	r3, 800cb52 <__ascii_mbtowc+0x1e>
 800cb3e:	7813      	ldrb	r3, [r2, #0]
 800cb40:	600b      	str	r3, [r1, #0]
 800cb42:	7812      	ldrb	r2, [r2, #0]
 800cb44:	1e10      	subs	r0, r2, #0
 800cb46:	bf18      	it	ne
 800cb48:	2001      	movne	r0, #1
 800cb4a:	b002      	add	sp, #8
 800cb4c:	4770      	bx	lr
 800cb4e:	4610      	mov	r0, r2
 800cb50:	e7fb      	b.n	800cb4a <__ascii_mbtowc+0x16>
 800cb52:	f06f 0001 	mvn.w	r0, #1
 800cb56:	e7f8      	b.n	800cb4a <__ascii_mbtowc+0x16>

0800cb58 <__malloc_lock>:
 800cb58:	4801      	ldr	r0, [pc, #4]	; (800cb60 <__malloc_lock+0x8>)
 800cb5a:	f000 bc19 	b.w	800d390 <__retarget_lock_acquire_recursive>
 800cb5e:	bf00      	nop
 800cb60:	20001964 	.word	0x20001964

0800cb64 <__malloc_unlock>:
 800cb64:	4801      	ldr	r0, [pc, #4]	; (800cb6c <__malloc_unlock+0x8>)
 800cb66:	f000 bc14 	b.w	800d392 <__retarget_lock_release_recursive>
 800cb6a:	bf00      	nop
 800cb6c:	20001964 	.word	0x20001964

0800cb70 <_realloc_r>:
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	4680      	mov	r8, r0
 800cb76:	4614      	mov	r4, r2
 800cb78:	460e      	mov	r6, r1
 800cb7a:	b921      	cbnz	r1, 800cb86 <_realloc_r+0x16>
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb82:	f7ff bdc7 	b.w	800c714 <_malloc_r>
 800cb86:	b92a      	cbnz	r2, 800cb94 <_realloc_r+0x24>
 800cb88:	f7ff fd5c 	bl	800c644 <_free_r>
 800cb8c:	4625      	mov	r5, r4
 800cb8e:	4628      	mov	r0, r5
 800cb90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb94:	f000 fc64 	bl	800d460 <_malloc_usable_size_r>
 800cb98:	4284      	cmp	r4, r0
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	d802      	bhi.n	800cba4 <_realloc_r+0x34>
 800cb9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cba2:	d812      	bhi.n	800cbca <_realloc_r+0x5a>
 800cba4:	4621      	mov	r1, r4
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7ff fdb4 	bl	800c714 <_malloc_r>
 800cbac:	4605      	mov	r5, r0
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d0ed      	beq.n	800cb8e <_realloc_r+0x1e>
 800cbb2:	42bc      	cmp	r4, r7
 800cbb4:	4622      	mov	r2, r4
 800cbb6:	4631      	mov	r1, r6
 800cbb8:	bf28      	it	cs
 800cbba:	463a      	movcs	r2, r7
 800cbbc:	f7fd fe52 	bl	800a864 <memcpy>
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	f7ff fd3e 	bl	800c644 <_free_r>
 800cbc8:	e7e1      	b.n	800cb8e <_realloc_r+0x1e>
 800cbca:	4635      	mov	r5, r6
 800cbcc:	e7df      	b.n	800cb8e <_realloc_r+0x1e>

0800cbce <__sfputc_r>:
 800cbce:	6893      	ldr	r3, [r2, #8]
 800cbd0:	b410      	push	{r4}
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	6093      	str	r3, [r2, #8]
 800cbd8:	da07      	bge.n	800cbea <__sfputc_r+0x1c>
 800cbda:	6994      	ldr	r4, [r2, #24]
 800cbdc:	42a3      	cmp	r3, r4
 800cbde:	db01      	blt.n	800cbe4 <__sfputc_r+0x16>
 800cbe0:	290a      	cmp	r1, #10
 800cbe2:	d102      	bne.n	800cbea <__sfputc_r+0x1c>
 800cbe4:	bc10      	pop	{r4}
 800cbe6:	f000 b949 	b.w	800ce7c <__swbuf_r>
 800cbea:	6813      	ldr	r3, [r2, #0]
 800cbec:	1c58      	adds	r0, r3, #1
 800cbee:	6010      	str	r0, [r2, #0]
 800cbf0:	7019      	strb	r1, [r3, #0]
 800cbf2:	4608      	mov	r0, r1
 800cbf4:	bc10      	pop	{r4}
 800cbf6:	4770      	bx	lr

0800cbf8 <__sfputs_r>:
 800cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	4614      	mov	r4, r2
 800cc00:	18d5      	adds	r5, r2, r3
 800cc02:	42ac      	cmp	r4, r5
 800cc04:	d101      	bne.n	800cc0a <__sfputs_r+0x12>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e007      	b.n	800cc1a <__sfputs_r+0x22>
 800cc0a:	463a      	mov	r2, r7
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc12:	f7ff ffdc 	bl	800cbce <__sfputc_r>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d1f3      	bne.n	800cc02 <__sfputs_r+0xa>
 800cc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc1c <_vfiprintf_r>:
 800cc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc20:	460d      	mov	r5, r1
 800cc22:	4614      	mov	r4, r2
 800cc24:	4698      	mov	r8, r3
 800cc26:	4606      	mov	r6, r0
 800cc28:	b09d      	sub	sp, #116	; 0x74
 800cc2a:	b118      	cbz	r0, 800cc34 <_vfiprintf_r+0x18>
 800cc2c:	6983      	ldr	r3, [r0, #24]
 800cc2e:	b90b      	cbnz	r3, 800cc34 <_vfiprintf_r+0x18>
 800cc30:	f000 fb10 	bl	800d254 <__sinit>
 800cc34:	4b89      	ldr	r3, [pc, #548]	; (800ce5c <_vfiprintf_r+0x240>)
 800cc36:	429d      	cmp	r5, r3
 800cc38:	d11b      	bne.n	800cc72 <_vfiprintf_r+0x56>
 800cc3a:	6875      	ldr	r5, [r6, #4]
 800cc3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc3e:	07d9      	lsls	r1, r3, #31
 800cc40:	d405      	bmi.n	800cc4e <_vfiprintf_r+0x32>
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	059a      	lsls	r2, r3, #22
 800cc46:	d402      	bmi.n	800cc4e <_vfiprintf_r+0x32>
 800cc48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc4a:	f000 fba1 	bl	800d390 <__retarget_lock_acquire_recursive>
 800cc4e:	89ab      	ldrh	r3, [r5, #12]
 800cc50:	071b      	lsls	r3, r3, #28
 800cc52:	d501      	bpl.n	800cc58 <_vfiprintf_r+0x3c>
 800cc54:	692b      	ldr	r3, [r5, #16]
 800cc56:	b9eb      	cbnz	r3, 800cc94 <_vfiprintf_r+0x78>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f000 f96e 	bl	800cf3c <__swsetup_r>
 800cc60:	b1c0      	cbz	r0, 800cc94 <_vfiprintf_r+0x78>
 800cc62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc64:	07dc      	lsls	r4, r3, #31
 800cc66:	d50e      	bpl.n	800cc86 <_vfiprintf_r+0x6a>
 800cc68:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6c:	b01d      	add	sp, #116	; 0x74
 800cc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc72:	4b7b      	ldr	r3, [pc, #492]	; (800ce60 <_vfiprintf_r+0x244>)
 800cc74:	429d      	cmp	r5, r3
 800cc76:	d101      	bne.n	800cc7c <_vfiprintf_r+0x60>
 800cc78:	68b5      	ldr	r5, [r6, #8]
 800cc7a:	e7df      	b.n	800cc3c <_vfiprintf_r+0x20>
 800cc7c:	4b79      	ldr	r3, [pc, #484]	; (800ce64 <_vfiprintf_r+0x248>)
 800cc7e:	429d      	cmp	r5, r3
 800cc80:	bf08      	it	eq
 800cc82:	68f5      	ldreq	r5, [r6, #12]
 800cc84:	e7da      	b.n	800cc3c <_vfiprintf_r+0x20>
 800cc86:	89ab      	ldrh	r3, [r5, #12]
 800cc88:	0598      	lsls	r0, r3, #22
 800cc8a:	d4ed      	bmi.n	800cc68 <_vfiprintf_r+0x4c>
 800cc8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc8e:	f000 fb80 	bl	800d392 <__retarget_lock_release_recursive>
 800cc92:	e7e9      	b.n	800cc68 <_vfiprintf_r+0x4c>
 800cc94:	2300      	movs	r3, #0
 800cc96:	9309      	str	r3, [sp, #36]	; 0x24
 800cc98:	2320      	movs	r3, #32
 800cc9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc9e:	2330      	movs	r3, #48	; 0x30
 800cca0:	f04f 0901 	mov.w	r9, #1
 800cca4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cca8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ce68 <_vfiprintf_r+0x24c>
 800ccac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	469a      	mov	sl, r3
 800ccb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccb8:	b10a      	cbz	r2, 800ccbe <_vfiprintf_r+0xa2>
 800ccba:	2a25      	cmp	r2, #37	; 0x25
 800ccbc:	d1f9      	bne.n	800ccb2 <_vfiprintf_r+0x96>
 800ccbe:	ebba 0b04 	subs.w	fp, sl, r4
 800ccc2:	d00b      	beq.n	800ccdc <_vfiprintf_r+0xc0>
 800ccc4:	465b      	mov	r3, fp
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7ff ff94 	bl	800cbf8 <__sfputs_r>
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	f000 80aa 	beq.w	800ce2a <_vfiprintf_r+0x20e>
 800ccd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccd8:	445a      	add	r2, fp
 800ccda:	9209      	str	r2, [sp, #36]	; 0x24
 800ccdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 80a2 	beq.w	800ce2a <_vfiprintf_r+0x20e>
 800cce6:	2300      	movs	r3, #0
 800cce8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf0:	f10a 0a01 	add.w	sl, sl, #1
 800ccf4:	9304      	str	r3, [sp, #16]
 800ccf6:	9307      	str	r3, [sp, #28]
 800ccf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccfc:	931a      	str	r3, [sp, #104]	; 0x68
 800ccfe:	4654      	mov	r4, sl
 800cd00:	2205      	movs	r2, #5
 800cd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd06:	4858      	ldr	r0, [pc, #352]	; (800ce68 <_vfiprintf_r+0x24c>)
 800cd08:	f7ff f8f8 	bl	800befc <memchr>
 800cd0c:	9a04      	ldr	r2, [sp, #16]
 800cd0e:	b9d8      	cbnz	r0, 800cd48 <_vfiprintf_r+0x12c>
 800cd10:	06d1      	lsls	r1, r2, #27
 800cd12:	bf44      	itt	mi
 800cd14:	2320      	movmi	r3, #32
 800cd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd1a:	0713      	lsls	r3, r2, #28
 800cd1c:	bf44      	itt	mi
 800cd1e:	232b      	movmi	r3, #43	; 0x2b
 800cd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd24:	f89a 3000 	ldrb.w	r3, [sl]
 800cd28:	2b2a      	cmp	r3, #42	; 0x2a
 800cd2a:	d015      	beq.n	800cd58 <_vfiprintf_r+0x13c>
 800cd2c:	4654      	mov	r4, sl
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f04f 0c0a 	mov.w	ip, #10
 800cd34:	9a07      	ldr	r2, [sp, #28]
 800cd36:	4621      	mov	r1, r4
 800cd38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd3c:	3b30      	subs	r3, #48	; 0x30
 800cd3e:	2b09      	cmp	r3, #9
 800cd40:	d94e      	bls.n	800cde0 <_vfiprintf_r+0x1c4>
 800cd42:	b1b0      	cbz	r0, 800cd72 <_vfiprintf_r+0x156>
 800cd44:	9207      	str	r2, [sp, #28]
 800cd46:	e014      	b.n	800cd72 <_vfiprintf_r+0x156>
 800cd48:	eba0 0308 	sub.w	r3, r0, r8
 800cd4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd50:	4313      	orrs	r3, r2
 800cd52:	46a2      	mov	sl, r4
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	e7d2      	b.n	800ccfe <_vfiprintf_r+0xe2>
 800cd58:	9b03      	ldr	r3, [sp, #12]
 800cd5a:	1d19      	adds	r1, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	9103      	str	r1, [sp, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bfbb      	ittet	lt
 800cd64:	425b      	neglt	r3, r3
 800cd66:	f042 0202 	orrlt.w	r2, r2, #2
 800cd6a:	9307      	strge	r3, [sp, #28]
 800cd6c:	9307      	strlt	r3, [sp, #28]
 800cd6e:	bfb8      	it	lt
 800cd70:	9204      	strlt	r2, [sp, #16]
 800cd72:	7823      	ldrb	r3, [r4, #0]
 800cd74:	2b2e      	cmp	r3, #46	; 0x2e
 800cd76:	d10c      	bne.n	800cd92 <_vfiprintf_r+0x176>
 800cd78:	7863      	ldrb	r3, [r4, #1]
 800cd7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd7c:	d135      	bne.n	800cdea <_vfiprintf_r+0x1ce>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	3402      	adds	r4, #2
 800cd82:	1d1a      	adds	r2, r3, #4
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	9203      	str	r2, [sp, #12]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	bfb8      	it	lt
 800cd8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd90:	9305      	str	r3, [sp, #20]
 800cd92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ce6c <_vfiprintf_r+0x250>
 800cd96:	2203      	movs	r2, #3
 800cd98:	4650      	mov	r0, sl
 800cd9a:	7821      	ldrb	r1, [r4, #0]
 800cd9c:	f7ff f8ae 	bl	800befc <memchr>
 800cda0:	b140      	cbz	r0, 800cdb4 <_vfiprintf_r+0x198>
 800cda2:	2340      	movs	r3, #64	; 0x40
 800cda4:	eba0 000a 	sub.w	r0, r0, sl
 800cda8:	fa03 f000 	lsl.w	r0, r3, r0
 800cdac:	9b04      	ldr	r3, [sp, #16]
 800cdae:	3401      	adds	r4, #1
 800cdb0:	4303      	orrs	r3, r0
 800cdb2:	9304      	str	r3, [sp, #16]
 800cdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb8:	2206      	movs	r2, #6
 800cdba:	482d      	ldr	r0, [pc, #180]	; (800ce70 <_vfiprintf_r+0x254>)
 800cdbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc0:	f7ff f89c 	bl	800befc <memchr>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d03f      	beq.n	800ce48 <_vfiprintf_r+0x22c>
 800cdc8:	4b2a      	ldr	r3, [pc, #168]	; (800ce74 <_vfiprintf_r+0x258>)
 800cdca:	bb1b      	cbnz	r3, 800ce14 <_vfiprintf_r+0x1f8>
 800cdcc:	9b03      	ldr	r3, [sp, #12]
 800cdce:	3307      	adds	r3, #7
 800cdd0:	f023 0307 	bic.w	r3, r3, #7
 800cdd4:	3308      	adds	r3, #8
 800cdd6:	9303      	str	r3, [sp, #12]
 800cdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdda:	443b      	add	r3, r7
 800cddc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdde:	e767      	b.n	800ccb0 <_vfiprintf_r+0x94>
 800cde0:	460c      	mov	r4, r1
 800cde2:	2001      	movs	r0, #1
 800cde4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cde8:	e7a5      	b.n	800cd36 <_vfiprintf_r+0x11a>
 800cdea:	2300      	movs	r3, #0
 800cdec:	f04f 0c0a 	mov.w	ip, #10
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	3401      	adds	r4, #1
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdfc:	3a30      	subs	r2, #48	; 0x30
 800cdfe:	2a09      	cmp	r2, #9
 800ce00:	d903      	bls.n	800ce0a <_vfiprintf_r+0x1ee>
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0c5      	beq.n	800cd92 <_vfiprintf_r+0x176>
 800ce06:	9105      	str	r1, [sp, #20]
 800ce08:	e7c3      	b.n	800cd92 <_vfiprintf_r+0x176>
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce12:	e7f0      	b.n	800cdf6 <_vfiprintf_r+0x1da>
 800ce14:	ab03      	add	r3, sp, #12
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	462a      	mov	r2, r5
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	4b16      	ldr	r3, [pc, #88]	; (800ce78 <_vfiprintf_r+0x25c>)
 800ce1e:	a904      	add	r1, sp, #16
 800ce20:	f7fd fdee 	bl	800aa00 <_printf_float>
 800ce24:	4607      	mov	r7, r0
 800ce26:	1c78      	adds	r0, r7, #1
 800ce28:	d1d6      	bne.n	800cdd8 <_vfiprintf_r+0x1bc>
 800ce2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce2c:	07d9      	lsls	r1, r3, #31
 800ce2e:	d405      	bmi.n	800ce3c <_vfiprintf_r+0x220>
 800ce30:	89ab      	ldrh	r3, [r5, #12]
 800ce32:	059a      	lsls	r2, r3, #22
 800ce34:	d402      	bmi.n	800ce3c <_vfiprintf_r+0x220>
 800ce36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce38:	f000 faab 	bl	800d392 <__retarget_lock_release_recursive>
 800ce3c:	89ab      	ldrh	r3, [r5, #12]
 800ce3e:	065b      	lsls	r3, r3, #25
 800ce40:	f53f af12 	bmi.w	800cc68 <_vfiprintf_r+0x4c>
 800ce44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce46:	e711      	b.n	800cc6c <_vfiprintf_r+0x50>
 800ce48:	ab03      	add	r3, sp, #12
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	462a      	mov	r2, r5
 800ce4e:	4630      	mov	r0, r6
 800ce50:	4b09      	ldr	r3, [pc, #36]	; (800ce78 <_vfiprintf_r+0x25c>)
 800ce52:	a904      	add	r1, sp, #16
 800ce54:	f7fe f870 	bl	800af38 <_printf_i>
 800ce58:	e7e4      	b.n	800ce24 <_vfiprintf_r+0x208>
 800ce5a:	bf00      	nop
 800ce5c:	0800db2c 	.word	0x0800db2c
 800ce60:	0800db4c 	.word	0x0800db4c
 800ce64:	0800db0c 	.word	0x0800db0c
 800ce68:	0800d9b4 	.word	0x0800d9b4
 800ce6c:	0800d9ba 	.word	0x0800d9ba
 800ce70:	0800d9be 	.word	0x0800d9be
 800ce74:	0800aa01 	.word	0x0800aa01
 800ce78:	0800cbf9 	.word	0x0800cbf9

0800ce7c <__swbuf_r>:
 800ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7e:	460e      	mov	r6, r1
 800ce80:	4614      	mov	r4, r2
 800ce82:	4605      	mov	r5, r0
 800ce84:	b118      	cbz	r0, 800ce8e <__swbuf_r+0x12>
 800ce86:	6983      	ldr	r3, [r0, #24]
 800ce88:	b90b      	cbnz	r3, 800ce8e <__swbuf_r+0x12>
 800ce8a:	f000 f9e3 	bl	800d254 <__sinit>
 800ce8e:	4b21      	ldr	r3, [pc, #132]	; (800cf14 <__swbuf_r+0x98>)
 800ce90:	429c      	cmp	r4, r3
 800ce92:	d12b      	bne.n	800ceec <__swbuf_r+0x70>
 800ce94:	686c      	ldr	r4, [r5, #4]
 800ce96:	69a3      	ldr	r3, [r4, #24]
 800ce98:	60a3      	str	r3, [r4, #8]
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	071a      	lsls	r2, r3, #28
 800ce9e:	d52f      	bpl.n	800cf00 <__swbuf_r+0x84>
 800cea0:	6923      	ldr	r3, [r4, #16]
 800cea2:	b36b      	cbz	r3, 800cf00 <__swbuf_r+0x84>
 800cea4:	6923      	ldr	r3, [r4, #16]
 800cea6:	6820      	ldr	r0, [r4, #0]
 800cea8:	b2f6      	uxtb	r6, r6
 800ceaa:	1ac0      	subs	r0, r0, r3
 800ceac:	6963      	ldr	r3, [r4, #20]
 800ceae:	4637      	mov	r7, r6
 800ceb0:	4283      	cmp	r3, r0
 800ceb2:	dc04      	bgt.n	800cebe <__swbuf_r+0x42>
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f000 f938 	bl	800d12c <_fflush_r>
 800cebc:	bb30      	cbnz	r0, 800cf0c <__swbuf_r+0x90>
 800cebe:	68a3      	ldr	r3, [r4, #8]
 800cec0:	3001      	adds	r0, #1
 800cec2:	3b01      	subs	r3, #1
 800cec4:	60a3      	str	r3, [r4, #8]
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	1c5a      	adds	r2, r3, #1
 800ceca:	6022      	str	r2, [r4, #0]
 800cecc:	701e      	strb	r6, [r3, #0]
 800cece:	6963      	ldr	r3, [r4, #20]
 800ced0:	4283      	cmp	r3, r0
 800ced2:	d004      	beq.n	800cede <__swbuf_r+0x62>
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	07db      	lsls	r3, r3, #31
 800ced8:	d506      	bpl.n	800cee8 <__swbuf_r+0x6c>
 800ceda:	2e0a      	cmp	r6, #10
 800cedc:	d104      	bne.n	800cee8 <__swbuf_r+0x6c>
 800cede:	4621      	mov	r1, r4
 800cee0:	4628      	mov	r0, r5
 800cee2:	f000 f923 	bl	800d12c <_fflush_r>
 800cee6:	b988      	cbnz	r0, 800cf0c <__swbuf_r+0x90>
 800cee8:	4638      	mov	r0, r7
 800ceea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <__swbuf_r+0x9c>)
 800ceee:	429c      	cmp	r4, r3
 800cef0:	d101      	bne.n	800cef6 <__swbuf_r+0x7a>
 800cef2:	68ac      	ldr	r4, [r5, #8]
 800cef4:	e7cf      	b.n	800ce96 <__swbuf_r+0x1a>
 800cef6:	4b09      	ldr	r3, [pc, #36]	; (800cf1c <__swbuf_r+0xa0>)
 800cef8:	429c      	cmp	r4, r3
 800cefa:	bf08      	it	eq
 800cefc:	68ec      	ldreq	r4, [r5, #12]
 800cefe:	e7ca      	b.n	800ce96 <__swbuf_r+0x1a>
 800cf00:	4621      	mov	r1, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	f000 f81a 	bl	800cf3c <__swsetup_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d0cb      	beq.n	800cea4 <__swbuf_r+0x28>
 800cf0c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf10:	e7ea      	b.n	800cee8 <__swbuf_r+0x6c>
 800cf12:	bf00      	nop
 800cf14:	0800db2c 	.word	0x0800db2c
 800cf18:	0800db4c 	.word	0x0800db4c
 800cf1c:	0800db0c 	.word	0x0800db0c

0800cf20 <__ascii_wctomb>:
 800cf20:	4603      	mov	r3, r0
 800cf22:	4608      	mov	r0, r1
 800cf24:	b141      	cbz	r1, 800cf38 <__ascii_wctomb+0x18>
 800cf26:	2aff      	cmp	r2, #255	; 0xff
 800cf28:	d904      	bls.n	800cf34 <__ascii_wctomb+0x14>
 800cf2a:	228a      	movs	r2, #138	; 0x8a
 800cf2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	4770      	bx	lr
 800cf34:	2001      	movs	r0, #1
 800cf36:	700a      	strb	r2, [r1, #0]
 800cf38:	4770      	bx	lr
	...

0800cf3c <__swsetup_r>:
 800cf3c:	4b32      	ldr	r3, [pc, #200]	; (800d008 <__swsetup_r+0xcc>)
 800cf3e:	b570      	push	{r4, r5, r6, lr}
 800cf40:	681d      	ldr	r5, [r3, #0]
 800cf42:	4606      	mov	r6, r0
 800cf44:	460c      	mov	r4, r1
 800cf46:	b125      	cbz	r5, 800cf52 <__swsetup_r+0x16>
 800cf48:	69ab      	ldr	r3, [r5, #24]
 800cf4a:	b913      	cbnz	r3, 800cf52 <__swsetup_r+0x16>
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f000 f981 	bl	800d254 <__sinit>
 800cf52:	4b2e      	ldr	r3, [pc, #184]	; (800d00c <__swsetup_r+0xd0>)
 800cf54:	429c      	cmp	r4, r3
 800cf56:	d10f      	bne.n	800cf78 <__swsetup_r+0x3c>
 800cf58:	686c      	ldr	r4, [r5, #4]
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf60:	0719      	lsls	r1, r3, #28
 800cf62:	d42c      	bmi.n	800cfbe <__swsetup_r+0x82>
 800cf64:	06dd      	lsls	r5, r3, #27
 800cf66:	d411      	bmi.n	800cf8c <__swsetup_r+0x50>
 800cf68:	2309      	movs	r3, #9
 800cf6a:	6033      	str	r3, [r6, #0]
 800cf6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295
 800cf74:	81a3      	strh	r3, [r4, #12]
 800cf76:	e03e      	b.n	800cff6 <__swsetup_r+0xba>
 800cf78:	4b25      	ldr	r3, [pc, #148]	; (800d010 <__swsetup_r+0xd4>)
 800cf7a:	429c      	cmp	r4, r3
 800cf7c:	d101      	bne.n	800cf82 <__swsetup_r+0x46>
 800cf7e:	68ac      	ldr	r4, [r5, #8]
 800cf80:	e7eb      	b.n	800cf5a <__swsetup_r+0x1e>
 800cf82:	4b24      	ldr	r3, [pc, #144]	; (800d014 <__swsetup_r+0xd8>)
 800cf84:	429c      	cmp	r4, r3
 800cf86:	bf08      	it	eq
 800cf88:	68ec      	ldreq	r4, [r5, #12]
 800cf8a:	e7e6      	b.n	800cf5a <__swsetup_r+0x1e>
 800cf8c:	0758      	lsls	r0, r3, #29
 800cf8e:	d512      	bpl.n	800cfb6 <__swsetup_r+0x7a>
 800cf90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf92:	b141      	cbz	r1, 800cfa6 <__swsetup_r+0x6a>
 800cf94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf98:	4299      	cmp	r1, r3
 800cf9a:	d002      	beq.n	800cfa2 <__swsetup_r+0x66>
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7ff fb51 	bl	800c644 <_free_r>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	6363      	str	r3, [r4, #52]	; 0x34
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfac:	81a3      	strh	r3, [r4, #12]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	6063      	str	r3, [r4, #4]
 800cfb2:	6923      	ldr	r3, [r4, #16]
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f043 0308 	orr.w	r3, r3, #8
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	b94b      	cbnz	r3, 800cfd6 <__swsetup_r+0x9a>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfcc:	d003      	beq.n	800cfd6 <__swsetup_r+0x9a>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f000 fa05 	bl	800d3e0 <__smakebuf_r>
 800cfd6:	89a0      	ldrh	r0, [r4, #12]
 800cfd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfdc:	f010 0301 	ands.w	r3, r0, #1
 800cfe0:	d00a      	beq.n	800cff8 <__swsetup_r+0xbc>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60a3      	str	r3, [r4, #8]
 800cfe6:	6963      	ldr	r3, [r4, #20]
 800cfe8:	425b      	negs	r3, r3
 800cfea:	61a3      	str	r3, [r4, #24]
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	b943      	cbnz	r3, 800d002 <__swsetup_r+0xc6>
 800cff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cff4:	d1ba      	bne.n	800cf6c <__swsetup_r+0x30>
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	0781      	lsls	r1, r0, #30
 800cffa:	bf58      	it	pl
 800cffc:	6963      	ldrpl	r3, [r4, #20]
 800cffe:	60a3      	str	r3, [r4, #8]
 800d000:	e7f4      	b.n	800cfec <__swsetup_r+0xb0>
 800d002:	2000      	movs	r0, #0
 800d004:	e7f7      	b.n	800cff6 <__swsetup_r+0xba>
 800d006:	bf00      	nop
 800d008:	200001a8 	.word	0x200001a8
 800d00c:	0800db2c 	.word	0x0800db2c
 800d010:	0800db4c 	.word	0x0800db4c
 800d014:	0800db0c 	.word	0x0800db0c

0800d018 <abort>:
 800d018:	2006      	movs	r0, #6
 800d01a:	b508      	push	{r3, lr}
 800d01c:	f000 fa50 	bl	800d4c0 <raise>
 800d020:	2001      	movs	r0, #1
 800d022:	f7f8 faa1 	bl	8005568 <_exit>
	...

0800d028 <__sflush_r>:
 800d028:	898a      	ldrh	r2, [r1, #12]
 800d02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02c:	4605      	mov	r5, r0
 800d02e:	0710      	lsls	r0, r2, #28
 800d030:	460c      	mov	r4, r1
 800d032:	d457      	bmi.n	800d0e4 <__sflush_r+0xbc>
 800d034:	684b      	ldr	r3, [r1, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	dc04      	bgt.n	800d044 <__sflush_r+0x1c>
 800d03a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dc01      	bgt.n	800d044 <__sflush_r+0x1c>
 800d040:	2000      	movs	r0, #0
 800d042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d046:	2e00      	cmp	r6, #0
 800d048:	d0fa      	beq.n	800d040 <__sflush_r+0x18>
 800d04a:	2300      	movs	r3, #0
 800d04c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d050:	682f      	ldr	r7, [r5, #0]
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	d032      	beq.n	800d0bc <__sflush_r+0x94>
 800d056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	075a      	lsls	r2, r3, #29
 800d05c:	d505      	bpl.n	800d06a <__sflush_r+0x42>
 800d05e:	6863      	ldr	r3, [r4, #4]
 800d060:	1ac0      	subs	r0, r0, r3
 800d062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d064:	b10b      	cbz	r3, 800d06a <__sflush_r+0x42>
 800d066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d068:	1ac0      	subs	r0, r0, r3
 800d06a:	2300      	movs	r3, #0
 800d06c:	4602      	mov	r2, r0
 800d06e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d070:	4628      	mov	r0, r5
 800d072:	6a21      	ldr	r1, [r4, #32]
 800d074:	47b0      	blx	r6
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	d106      	bne.n	800d08a <__sflush_r+0x62>
 800d07c:	6829      	ldr	r1, [r5, #0]
 800d07e:	291d      	cmp	r1, #29
 800d080:	d82c      	bhi.n	800d0dc <__sflush_r+0xb4>
 800d082:	4a29      	ldr	r2, [pc, #164]	; (800d128 <__sflush_r+0x100>)
 800d084:	40ca      	lsrs	r2, r1
 800d086:	07d6      	lsls	r6, r2, #31
 800d088:	d528      	bpl.n	800d0dc <__sflush_r+0xb4>
 800d08a:	2200      	movs	r2, #0
 800d08c:	6062      	str	r2, [r4, #4]
 800d08e:	6922      	ldr	r2, [r4, #16]
 800d090:	04d9      	lsls	r1, r3, #19
 800d092:	6022      	str	r2, [r4, #0]
 800d094:	d504      	bpl.n	800d0a0 <__sflush_r+0x78>
 800d096:	1c42      	adds	r2, r0, #1
 800d098:	d101      	bne.n	800d09e <__sflush_r+0x76>
 800d09a:	682b      	ldr	r3, [r5, #0]
 800d09c:	b903      	cbnz	r3, 800d0a0 <__sflush_r+0x78>
 800d09e:	6560      	str	r0, [r4, #84]	; 0x54
 800d0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0a2:	602f      	str	r7, [r5, #0]
 800d0a4:	2900      	cmp	r1, #0
 800d0a6:	d0cb      	beq.n	800d040 <__sflush_r+0x18>
 800d0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0ac:	4299      	cmp	r1, r3
 800d0ae:	d002      	beq.n	800d0b6 <__sflush_r+0x8e>
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	f7ff fac7 	bl	800c644 <_free_r>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800d0ba:	e7c2      	b.n	800d042 <__sflush_r+0x1a>
 800d0bc:	6a21      	ldr	r1, [r4, #32]
 800d0be:	2301      	movs	r3, #1
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	47b0      	blx	r6
 800d0c4:	1c41      	adds	r1, r0, #1
 800d0c6:	d1c7      	bne.n	800d058 <__sflush_r+0x30>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d0c4      	beq.n	800d058 <__sflush_r+0x30>
 800d0ce:	2b1d      	cmp	r3, #29
 800d0d0:	d001      	beq.n	800d0d6 <__sflush_r+0xae>
 800d0d2:	2b16      	cmp	r3, #22
 800d0d4:	d101      	bne.n	800d0da <__sflush_r+0xb2>
 800d0d6:	602f      	str	r7, [r5, #0]
 800d0d8:	e7b2      	b.n	800d040 <__sflush_r+0x18>
 800d0da:	89a3      	ldrh	r3, [r4, #12]
 800d0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	e7ae      	b.n	800d042 <__sflush_r+0x1a>
 800d0e4:	690f      	ldr	r7, [r1, #16]
 800d0e6:	2f00      	cmp	r7, #0
 800d0e8:	d0aa      	beq.n	800d040 <__sflush_r+0x18>
 800d0ea:	0793      	lsls	r3, r2, #30
 800d0ec:	bf18      	it	ne
 800d0ee:	2300      	movne	r3, #0
 800d0f0:	680e      	ldr	r6, [r1, #0]
 800d0f2:	bf08      	it	eq
 800d0f4:	694b      	ldreq	r3, [r1, #20]
 800d0f6:	1bf6      	subs	r6, r6, r7
 800d0f8:	600f      	str	r7, [r1, #0]
 800d0fa:	608b      	str	r3, [r1, #8]
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	dd9f      	ble.n	800d040 <__sflush_r+0x18>
 800d100:	4633      	mov	r3, r6
 800d102:	463a      	mov	r2, r7
 800d104:	4628      	mov	r0, r5
 800d106:	6a21      	ldr	r1, [r4, #32]
 800d108:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d10c:	47e0      	blx	ip
 800d10e:	2800      	cmp	r0, #0
 800d110:	dc06      	bgt.n	800d120 <__sflush_r+0xf8>
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11c:	81a3      	strh	r3, [r4, #12]
 800d11e:	e790      	b.n	800d042 <__sflush_r+0x1a>
 800d120:	4407      	add	r7, r0
 800d122:	1a36      	subs	r6, r6, r0
 800d124:	e7ea      	b.n	800d0fc <__sflush_r+0xd4>
 800d126:	bf00      	nop
 800d128:	20400001 	.word	0x20400001

0800d12c <_fflush_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	690b      	ldr	r3, [r1, #16]
 800d130:	4605      	mov	r5, r0
 800d132:	460c      	mov	r4, r1
 800d134:	b913      	cbnz	r3, 800d13c <_fflush_r+0x10>
 800d136:	2500      	movs	r5, #0
 800d138:	4628      	mov	r0, r5
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	b118      	cbz	r0, 800d146 <_fflush_r+0x1a>
 800d13e:	6983      	ldr	r3, [r0, #24]
 800d140:	b90b      	cbnz	r3, 800d146 <_fflush_r+0x1a>
 800d142:	f000 f887 	bl	800d254 <__sinit>
 800d146:	4b14      	ldr	r3, [pc, #80]	; (800d198 <_fflush_r+0x6c>)
 800d148:	429c      	cmp	r4, r3
 800d14a:	d11b      	bne.n	800d184 <_fflush_r+0x58>
 800d14c:	686c      	ldr	r4, [r5, #4]
 800d14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0ef      	beq.n	800d136 <_fflush_r+0xa>
 800d156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d158:	07d0      	lsls	r0, r2, #31
 800d15a:	d404      	bmi.n	800d166 <_fflush_r+0x3a>
 800d15c:	0599      	lsls	r1, r3, #22
 800d15e:	d402      	bmi.n	800d166 <_fflush_r+0x3a>
 800d160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d162:	f000 f915 	bl	800d390 <__retarget_lock_acquire_recursive>
 800d166:	4628      	mov	r0, r5
 800d168:	4621      	mov	r1, r4
 800d16a:	f7ff ff5d 	bl	800d028 <__sflush_r>
 800d16e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d170:	4605      	mov	r5, r0
 800d172:	07da      	lsls	r2, r3, #31
 800d174:	d4e0      	bmi.n	800d138 <_fflush_r+0xc>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	059b      	lsls	r3, r3, #22
 800d17a:	d4dd      	bmi.n	800d138 <_fflush_r+0xc>
 800d17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d17e:	f000 f908 	bl	800d392 <__retarget_lock_release_recursive>
 800d182:	e7d9      	b.n	800d138 <_fflush_r+0xc>
 800d184:	4b05      	ldr	r3, [pc, #20]	; (800d19c <_fflush_r+0x70>)
 800d186:	429c      	cmp	r4, r3
 800d188:	d101      	bne.n	800d18e <_fflush_r+0x62>
 800d18a:	68ac      	ldr	r4, [r5, #8]
 800d18c:	e7df      	b.n	800d14e <_fflush_r+0x22>
 800d18e:	4b04      	ldr	r3, [pc, #16]	; (800d1a0 <_fflush_r+0x74>)
 800d190:	429c      	cmp	r4, r3
 800d192:	bf08      	it	eq
 800d194:	68ec      	ldreq	r4, [r5, #12]
 800d196:	e7da      	b.n	800d14e <_fflush_r+0x22>
 800d198:	0800db2c 	.word	0x0800db2c
 800d19c:	0800db4c 	.word	0x0800db4c
 800d1a0:	0800db0c 	.word	0x0800db0c

0800d1a4 <std>:
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1b2:	6083      	str	r3, [r0, #8]
 800d1b4:	8181      	strh	r1, [r0, #12]
 800d1b6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1b8:	81c2      	strh	r2, [r0, #14]
 800d1ba:	6183      	str	r3, [r0, #24]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	2208      	movs	r2, #8
 800d1c0:	305c      	adds	r0, #92	; 0x5c
 800d1c2:	f7fd fb77 	bl	800a8b4 <memset>
 800d1c6:	4b05      	ldr	r3, [pc, #20]	; (800d1dc <std+0x38>)
 800d1c8:	6224      	str	r4, [r4, #32]
 800d1ca:	6263      	str	r3, [r4, #36]	; 0x24
 800d1cc:	4b04      	ldr	r3, [pc, #16]	; (800d1e0 <std+0x3c>)
 800d1ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1d0:	4b04      	ldr	r3, [pc, #16]	; (800d1e4 <std+0x40>)
 800d1d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1d4:	4b04      	ldr	r3, [pc, #16]	; (800d1e8 <std+0x44>)
 800d1d6:	6323      	str	r3, [r4, #48]	; 0x30
 800d1d8:	bd10      	pop	{r4, pc}
 800d1da:	bf00      	nop
 800d1dc:	0800d4f9 	.word	0x0800d4f9
 800d1e0:	0800d51b 	.word	0x0800d51b
 800d1e4:	0800d553 	.word	0x0800d553
 800d1e8:	0800d577 	.word	0x0800d577

0800d1ec <_cleanup_r>:
 800d1ec:	4901      	ldr	r1, [pc, #4]	; (800d1f4 <_cleanup_r+0x8>)
 800d1ee:	f000 b8af 	b.w	800d350 <_fwalk_reent>
 800d1f2:	bf00      	nop
 800d1f4:	0800d12d 	.word	0x0800d12d

0800d1f8 <__sfmoreglue>:
 800d1f8:	2268      	movs	r2, #104	; 0x68
 800d1fa:	b570      	push	{r4, r5, r6, lr}
 800d1fc:	1e4d      	subs	r5, r1, #1
 800d1fe:	4355      	muls	r5, r2
 800d200:	460e      	mov	r6, r1
 800d202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d206:	f7ff fa85 	bl	800c714 <_malloc_r>
 800d20a:	4604      	mov	r4, r0
 800d20c:	b140      	cbz	r0, 800d220 <__sfmoreglue+0x28>
 800d20e:	2100      	movs	r1, #0
 800d210:	e9c0 1600 	strd	r1, r6, [r0]
 800d214:	300c      	adds	r0, #12
 800d216:	60a0      	str	r0, [r4, #8]
 800d218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d21c:	f7fd fb4a 	bl	800a8b4 <memset>
 800d220:	4620      	mov	r0, r4
 800d222:	bd70      	pop	{r4, r5, r6, pc}

0800d224 <__sfp_lock_acquire>:
 800d224:	4801      	ldr	r0, [pc, #4]	; (800d22c <__sfp_lock_acquire+0x8>)
 800d226:	f000 b8b3 	b.w	800d390 <__retarget_lock_acquire_recursive>
 800d22a:	bf00      	nop
 800d22c:	20001965 	.word	0x20001965

0800d230 <__sfp_lock_release>:
 800d230:	4801      	ldr	r0, [pc, #4]	; (800d238 <__sfp_lock_release+0x8>)
 800d232:	f000 b8ae 	b.w	800d392 <__retarget_lock_release_recursive>
 800d236:	bf00      	nop
 800d238:	20001965 	.word	0x20001965

0800d23c <__sinit_lock_acquire>:
 800d23c:	4801      	ldr	r0, [pc, #4]	; (800d244 <__sinit_lock_acquire+0x8>)
 800d23e:	f000 b8a7 	b.w	800d390 <__retarget_lock_acquire_recursive>
 800d242:	bf00      	nop
 800d244:	20001966 	.word	0x20001966

0800d248 <__sinit_lock_release>:
 800d248:	4801      	ldr	r0, [pc, #4]	; (800d250 <__sinit_lock_release+0x8>)
 800d24a:	f000 b8a2 	b.w	800d392 <__retarget_lock_release_recursive>
 800d24e:	bf00      	nop
 800d250:	20001966 	.word	0x20001966

0800d254 <__sinit>:
 800d254:	b510      	push	{r4, lr}
 800d256:	4604      	mov	r4, r0
 800d258:	f7ff fff0 	bl	800d23c <__sinit_lock_acquire>
 800d25c:	69a3      	ldr	r3, [r4, #24]
 800d25e:	b11b      	cbz	r3, 800d268 <__sinit+0x14>
 800d260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d264:	f7ff bff0 	b.w	800d248 <__sinit_lock_release>
 800d268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d26c:	6523      	str	r3, [r4, #80]	; 0x50
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <__sinit+0x68>)
 800d270:	4a13      	ldr	r2, [pc, #76]	; (800d2c0 <__sinit+0x6c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	62a2      	str	r2, [r4, #40]	; 0x28
 800d276:	42a3      	cmp	r3, r4
 800d278:	bf08      	it	eq
 800d27a:	2301      	moveq	r3, #1
 800d27c:	4620      	mov	r0, r4
 800d27e:	bf08      	it	eq
 800d280:	61a3      	streq	r3, [r4, #24]
 800d282:	f000 f81f 	bl	800d2c4 <__sfp>
 800d286:	6060      	str	r0, [r4, #4]
 800d288:	4620      	mov	r0, r4
 800d28a:	f000 f81b 	bl	800d2c4 <__sfp>
 800d28e:	60a0      	str	r0, [r4, #8]
 800d290:	4620      	mov	r0, r4
 800d292:	f000 f817 	bl	800d2c4 <__sfp>
 800d296:	2200      	movs	r2, #0
 800d298:	2104      	movs	r1, #4
 800d29a:	60e0      	str	r0, [r4, #12]
 800d29c:	6860      	ldr	r0, [r4, #4]
 800d29e:	f7ff ff81 	bl	800d1a4 <std>
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	2109      	movs	r1, #9
 800d2a6:	68a0      	ldr	r0, [r4, #8]
 800d2a8:	f7ff ff7c 	bl	800d1a4 <std>
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	2112      	movs	r1, #18
 800d2b0:	68e0      	ldr	r0, [r4, #12]
 800d2b2:	f7ff ff77 	bl	800d1a4 <std>
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	61a3      	str	r3, [r4, #24]
 800d2ba:	e7d1      	b.n	800d260 <__sinit+0xc>
 800d2bc:	0800d794 	.word	0x0800d794
 800d2c0:	0800d1ed 	.word	0x0800d1ed

0800d2c4 <__sfp>:
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	4607      	mov	r7, r0
 800d2c8:	f7ff ffac 	bl	800d224 <__sfp_lock_acquire>
 800d2cc:	4b1e      	ldr	r3, [pc, #120]	; (800d348 <__sfp+0x84>)
 800d2ce:	681e      	ldr	r6, [r3, #0]
 800d2d0:	69b3      	ldr	r3, [r6, #24]
 800d2d2:	b913      	cbnz	r3, 800d2da <__sfp+0x16>
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f7ff ffbd 	bl	800d254 <__sinit>
 800d2da:	3648      	adds	r6, #72	; 0x48
 800d2dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	d503      	bpl.n	800d2ec <__sfp+0x28>
 800d2e4:	6833      	ldr	r3, [r6, #0]
 800d2e6:	b30b      	cbz	r3, 800d32c <__sfp+0x68>
 800d2e8:	6836      	ldr	r6, [r6, #0]
 800d2ea:	e7f7      	b.n	800d2dc <__sfp+0x18>
 800d2ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2f0:	b9d5      	cbnz	r5, 800d328 <__sfp+0x64>
 800d2f2:	4b16      	ldr	r3, [pc, #88]	; (800d34c <__sfp+0x88>)
 800d2f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2f8:	60e3      	str	r3, [r4, #12]
 800d2fa:	6665      	str	r5, [r4, #100]	; 0x64
 800d2fc:	f000 f847 	bl	800d38e <__retarget_lock_init_recursive>
 800d300:	f7ff ff96 	bl	800d230 <__sfp_lock_release>
 800d304:	2208      	movs	r2, #8
 800d306:	4629      	mov	r1, r5
 800d308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d310:	6025      	str	r5, [r4, #0]
 800d312:	61a5      	str	r5, [r4, #24]
 800d314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d318:	f7fd facc 	bl	800a8b4 <memset>
 800d31c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d324:	4620      	mov	r0, r4
 800d326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d328:	3468      	adds	r4, #104	; 0x68
 800d32a:	e7d9      	b.n	800d2e0 <__sfp+0x1c>
 800d32c:	2104      	movs	r1, #4
 800d32e:	4638      	mov	r0, r7
 800d330:	f7ff ff62 	bl	800d1f8 <__sfmoreglue>
 800d334:	4604      	mov	r4, r0
 800d336:	6030      	str	r0, [r6, #0]
 800d338:	2800      	cmp	r0, #0
 800d33a:	d1d5      	bne.n	800d2e8 <__sfp+0x24>
 800d33c:	f7ff ff78 	bl	800d230 <__sfp_lock_release>
 800d340:	230c      	movs	r3, #12
 800d342:	603b      	str	r3, [r7, #0]
 800d344:	e7ee      	b.n	800d324 <__sfp+0x60>
 800d346:	bf00      	nop
 800d348:	0800d794 	.word	0x0800d794
 800d34c:	ffff0001 	.word	0xffff0001

0800d350 <_fwalk_reent>:
 800d350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d354:	4606      	mov	r6, r0
 800d356:	4688      	mov	r8, r1
 800d358:	2700      	movs	r7, #0
 800d35a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d35e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d362:	f1b9 0901 	subs.w	r9, r9, #1
 800d366:	d505      	bpl.n	800d374 <_fwalk_reent+0x24>
 800d368:	6824      	ldr	r4, [r4, #0]
 800d36a:	2c00      	cmp	r4, #0
 800d36c:	d1f7      	bne.n	800d35e <_fwalk_reent+0xe>
 800d36e:	4638      	mov	r0, r7
 800d370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d374:	89ab      	ldrh	r3, [r5, #12]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d907      	bls.n	800d38a <_fwalk_reent+0x3a>
 800d37a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d37e:	3301      	adds	r3, #1
 800d380:	d003      	beq.n	800d38a <_fwalk_reent+0x3a>
 800d382:	4629      	mov	r1, r5
 800d384:	4630      	mov	r0, r6
 800d386:	47c0      	blx	r8
 800d388:	4307      	orrs	r7, r0
 800d38a:	3568      	adds	r5, #104	; 0x68
 800d38c:	e7e9      	b.n	800d362 <_fwalk_reent+0x12>

0800d38e <__retarget_lock_init_recursive>:
 800d38e:	4770      	bx	lr

0800d390 <__retarget_lock_acquire_recursive>:
 800d390:	4770      	bx	lr

0800d392 <__retarget_lock_release_recursive>:
 800d392:	4770      	bx	lr

0800d394 <__swhatbuf_r>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	460e      	mov	r6, r1
 800d398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d39c:	4614      	mov	r4, r2
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	461d      	mov	r5, r3
 800d3a2:	b096      	sub	sp, #88	; 0x58
 800d3a4:	da08      	bge.n	800d3b8 <__swhatbuf_r+0x24>
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3ac:	602a      	str	r2, [r5, #0]
 800d3ae:	061a      	lsls	r2, r3, #24
 800d3b0:	d410      	bmi.n	800d3d4 <__swhatbuf_r+0x40>
 800d3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3b6:	e00e      	b.n	800d3d6 <__swhatbuf_r+0x42>
 800d3b8:	466a      	mov	r2, sp
 800d3ba:	f000 f903 	bl	800d5c4 <_fstat_r>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	dbf1      	blt.n	800d3a6 <__swhatbuf_r+0x12>
 800d3c2:	9a01      	ldr	r2, [sp, #4]
 800d3c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3cc:	425a      	negs	r2, r3
 800d3ce:	415a      	adcs	r2, r3
 800d3d0:	602a      	str	r2, [r5, #0]
 800d3d2:	e7ee      	b.n	800d3b2 <__swhatbuf_r+0x1e>
 800d3d4:	2340      	movs	r3, #64	; 0x40
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	b016      	add	sp, #88	; 0x58
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3e0 <__smakebuf_r>:
 800d3e0:	898b      	ldrh	r3, [r1, #12]
 800d3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3e4:	079d      	lsls	r5, r3, #30
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	d507      	bpl.n	800d3fc <__smakebuf_r+0x1c>
 800d3ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3f0:	6023      	str	r3, [r4, #0]
 800d3f2:	6123      	str	r3, [r4, #16]
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	6163      	str	r3, [r4, #20]
 800d3f8:	b002      	add	sp, #8
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}
 800d3fc:	466a      	mov	r2, sp
 800d3fe:	ab01      	add	r3, sp, #4
 800d400:	f7ff ffc8 	bl	800d394 <__swhatbuf_r>
 800d404:	9900      	ldr	r1, [sp, #0]
 800d406:	4605      	mov	r5, r0
 800d408:	4630      	mov	r0, r6
 800d40a:	f7ff f983 	bl	800c714 <_malloc_r>
 800d40e:	b948      	cbnz	r0, 800d424 <__smakebuf_r+0x44>
 800d410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d414:	059a      	lsls	r2, r3, #22
 800d416:	d4ef      	bmi.n	800d3f8 <__smakebuf_r+0x18>
 800d418:	f023 0303 	bic.w	r3, r3, #3
 800d41c:	f043 0302 	orr.w	r3, r3, #2
 800d420:	81a3      	strh	r3, [r4, #12]
 800d422:	e7e3      	b.n	800d3ec <__smakebuf_r+0xc>
 800d424:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <__smakebuf_r+0x7c>)
 800d426:	62b3      	str	r3, [r6, #40]	; 0x28
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	6020      	str	r0, [r4, #0]
 800d42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d430:	81a3      	strh	r3, [r4, #12]
 800d432:	9b00      	ldr	r3, [sp, #0]
 800d434:	6120      	str	r0, [r4, #16]
 800d436:	6163      	str	r3, [r4, #20]
 800d438:	9b01      	ldr	r3, [sp, #4]
 800d43a:	b15b      	cbz	r3, 800d454 <__smakebuf_r+0x74>
 800d43c:	4630      	mov	r0, r6
 800d43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d442:	f000 f8d1 	bl	800d5e8 <_isatty_r>
 800d446:	b128      	cbz	r0, 800d454 <__smakebuf_r+0x74>
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	f023 0303 	bic.w	r3, r3, #3
 800d44e:	f043 0301 	orr.w	r3, r3, #1
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	89a0      	ldrh	r0, [r4, #12]
 800d456:	4305      	orrs	r5, r0
 800d458:	81a5      	strh	r5, [r4, #12]
 800d45a:	e7cd      	b.n	800d3f8 <__smakebuf_r+0x18>
 800d45c:	0800d1ed 	.word	0x0800d1ed

0800d460 <_malloc_usable_size_r>:
 800d460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d464:	1f18      	subs	r0, r3, #4
 800d466:	2b00      	cmp	r3, #0
 800d468:	bfbc      	itt	lt
 800d46a:	580b      	ldrlt	r3, [r1, r0]
 800d46c:	18c0      	addlt	r0, r0, r3
 800d46e:	4770      	bx	lr

0800d470 <_raise_r>:
 800d470:	291f      	cmp	r1, #31
 800d472:	b538      	push	{r3, r4, r5, lr}
 800d474:	4604      	mov	r4, r0
 800d476:	460d      	mov	r5, r1
 800d478:	d904      	bls.n	800d484 <_raise_r+0x14>
 800d47a:	2316      	movs	r3, #22
 800d47c:	6003      	str	r3, [r0, #0]
 800d47e:	f04f 30ff 	mov.w	r0, #4294967295
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d486:	b112      	cbz	r2, 800d48e <_raise_r+0x1e>
 800d488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d48c:	b94b      	cbnz	r3, 800d4a2 <_raise_r+0x32>
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 f830 	bl	800d4f4 <_getpid_r>
 800d494:	462a      	mov	r2, r5
 800d496:	4601      	mov	r1, r0
 800d498:	4620      	mov	r0, r4
 800d49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49e:	f000 b817 	b.w	800d4d0 <_kill_r>
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d00a      	beq.n	800d4bc <_raise_r+0x4c>
 800d4a6:	1c59      	adds	r1, r3, #1
 800d4a8:	d103      	bne.n	800d4b2 <_raise_r+0x42>
 800d4aa:	2316      	movs	r3, #22
 800d4ac:	6003      	str	r3, [r0, #0]
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e7e7      	b.n	800d482 <_raise_r+0x12>
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4ba:	4798      	blx	r3
 800d4bc:	2000      	movs	r0, #0
 800d4be:	e7e0      	b.n	800d482 <_raise_r+0x12>

0800d4c0 <raise>:
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <raise+0xc>)
 800d4c2:	4601      	mov	r1, r0
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	f7ff bfd3 	b.w	800d470 <_raise_r>
 800d4ca:	bf00      	nop
 800d4cc:	200001a8 	.word	0x200001a8

0800d4d0 <_kill_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	4d06      	ldr	r5, [pc, #24]	; (800d4f0 <_kill_r+0x20>)
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	4608      	mov	r0, r1
 800d4da:	4611      	mov	r1, r2
 800d4dc:	602b      	str	r3, [r5, #0]
 800d4de:	f7f8 f839 	bl	8005554 <_kill>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	d102      	bne.n	800d4ec <_kill_r+0x1c>
 800d4e6:	682b      	ldr	r3, [r5, #0]
 800d4e8:	b103      	cbz	r3, 800d4ec <_kill_r+0x1c>
 800d4ea:	6023      	str	r3, [r4, #0]
 800d4ec:	bd38      	pop	{r3, r4, r5, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20001960 	.word	0x20001960

0800d4f4 <_getpid_r>:
 800d4f4:	f7f8 b82c 	b.w	8005550 <_getpid>

0800d4f8 <__sread>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	f000 f894 	bl	800d62c <_read_r>
 800d504:	2800      	cmp	r0, #0
 800d506:	bfab      	itete	ge
 800d508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d50a:	89a3      	ldrhlt	r3, [r4, #12]
 800d50c:	181b      	addge	r3, r3, r0
 800d50e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d512:	bfac      	ite	ge
 800d514:	6563      	strge	r3, [r4, #84]	; 0x54
 800d516:	81a3      	strhlt	r3, [r4, #12]
 800d518:	bd10      	pop	{r4, pc}

0800d51a <__swrite>:
 800d51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51e:	461f      	mov	r7, r3
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	4605      	mov	r5, r0
 800d524:	05db      	lsls	r3, r3, #23
 800d526:	460c      	mov	r4, r1
 800d528:	4616      	mov	r6, r2
 800d52a:	d505      	bpl.n	800d538 <__swrite+0x1e>
 800d52c:	2302      	movs	r3, #2
 800d52e:	2200      	movs	r2, #0
 800d530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d534:	f000 f868 	bl	800d608 <_lseek_r>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	4632      	mov	r2, r6
 800d53c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	4628      	mov	r0, r5
 800d544:	463b      	mov	r3, r7
 800d546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d54e:	f000 b817 	b.w	800d580 <_write_r>

0800d552 <__sseek>:
 800d552:	b510      	push	{r4, lr}
 800d554:	460c      	mov	r4, r1
 800d556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d55a:	f000 f855 	bl	800d608 <_lseek_r>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	bf15      	itete	ne
 800d564:	6560      	strne	r0, [r4, #84]	; 0x54
 800d566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d56e:	81a3      	strheq	r3, [r4, #12]
 800d570:	bf18      	it	ne
 800d572:	81a3      	strhne	r3, [r4, #12]
 800d574:	bd10      	pop	{r4, pc}

0800d576 <__sclose>:
 800d576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d57a:	f000 b813 	b.w	800d5a4 <_close_r>
	...

0800d580 <_write_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4604      	mov	r4, r0
 800d584:	4608      	mov	r0, r1
 800d586:	4611      	mov	r1, r2
 800d588:	2200      	movs	r2, #0
 800d58a:	4d05      	ldr	r5, [pc, #20]	; (800d5a0 <_write_r+0x20>)
 800d58c:	602a      	str	r2, [r5, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	f7f7 fffe 	bl	8005590 <_write>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_write_r+0x1e>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_write_r+0x1e>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20001960 	.word	0x20001960

0800d5a4 <_close_r>:
 800d5a4:	b538      	push	{r3, r4, r5, lr}
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	4d05      	ldr	r5, [pc, #20]	; (800d5c0 <_close_r+0x1c>)
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	602b      	str	r3, [r5, #0]
 800d5b0:	f7f7 fffc 	bl	80055ac <_close>
 800d5b4:	1c43      	adds	r3, r0, #1
 800d5b6:	d102      	bne.n	800d5be <_close_r+0x1a>
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	b103      	cbz	r3, 800d5be <_close_r+0x1a>
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	20001960 	.word	0x20001960

0800d5c4 <_fstat_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	4d06      	ldr	r5, [pc, #24]	; (800d5e4 <_fstat_r+0x20>)
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	4611      	mov	r1, r2
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	f7f7 ffef 	bl	80055b4 <_fstat>
 800d5d6:	1c43      	adds	r3, r0, #1
 800d5d8:	d102      	bne.n	800d5e0 <_fstat_r+0x1c>
 800d5da:	682b      	ldr	r3, [r5, #0]
 800d5dc:	b103      	cbz	r3, 800d5e0 <_fstat_r+0x1c>
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20001960 	.word	0x20001960

0800d5e8 <_isatty_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4d05      	ldr	r5, [pc, #20]	; (800d604 <_isatty_r+0x1c>)
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	602b      	str	r3, [r5, #0]
 800d5f4:	f7f7 ffe4 	bl	80055c0 <_isatty>
 800d5f8:	1c43      	adds	r3, r0, #1
 800d5fa:	d102      	bne.n	800d602 <_isatty_r+0x1a>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	b103      	cbz	r3, 800d602 <_isatty_r+0x1a>
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	bd38      	pop	{r3, r4, r5, pc}
 800d604:	20001960 	.word	0x20001960

0800d608 <_lseek_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4604      	mov	r4, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	4611      	mov	r1, r2
 800d610:	2200      	movs	r2, #0
 800d612:	4d05      	ldr	r5, [pc, #20]	; (800d628 <_lseek_r+0x20>)
 800d614:	602a      	str	r2, [r5, #0]
 800d616:	461a      	mov	r2, r3
 800d618:	f7f7 ffd4 	bl	80055c4 <_lseek>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_lseek_r+0x1e>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b103      	cbz	r3, 800d626 <_lseek_r+0x1e>
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	20001960 	.word	0x20001960

0800d62c <_read_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	4611      	mov	r1, r2
 800d634:	2200      	movs	r2, #0
 800d636:	4d05      	ldr	r5, [pc, #20]	; (800d64c <_read_r+0x20>)
 800d638:	602a      	str	r2, [r5, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	f7f7 ff9a 	bl	8005574 <_read>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_read_r+0x1e>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_read_r+0x1e>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20001960 	.word	0x20001960

0800d650 <_init>:
 800d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d652:	bf00      	nop
 800d654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d656:	bc08      	pop	{r3}
 800d658:	469e      	mov	lr, r3
 800d65a:	4770      	bx	lr

0800d65c <_fini>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	bf00      	nop
 800d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d662:	bc08      	pop	{r3}
 800d664:	469e      	mov	lr, r3
 800d666:	4770      	bx	lr
