
MainBoardCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c54  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08010d98  08010d98  00020d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112a4  080112a4  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  080112a4  080112a4  000212a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112ac  080112ac  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112ac  080112ac  000212ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112b0  080112b0  000212b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  080112b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001554  20000378  0801162c  00030378  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  200018cc  0801162c  000318cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019943  00000000  00000000  000303a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dcc  00000000  00000000  00049ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0004dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  0004f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cd6  00000000  00000000  00050850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c656  00000000  00000000  0006a526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fdcf  00000000  00000000  00086b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011694b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007658  00000000  00000000  0011699c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000378 	.word	0x20000378
 800015c:	00000000 	.word	0x00000000
 8000160:	08010d7c 	.word	0x08010d7c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000037c 	.word	0x2000037c
 800017c:	08010d7c 	.word	0x08010d7c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	; 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_frsub>:
 8000acc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ad0:	e002      	b.n	8000ad8 <__addsf3>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_fsub>:
 8000ad4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad8 <__addsf3>:
 8000ad8:	0042      	lsls	r2, r0, #1
 8000ada:	bf1f      	itttt	ne
 8000adc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ae0:	ea92 0f03 	teqne	r2, r3
 8000ae4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aec:	d06a      	beq.n	8000bc4 <__addsf3+0xec>
 8000aee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000af2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af6:	bfc1      	itttt	gt
 8000af8:	18d2      	addgt	r2, r2, r3
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	4048      	eorgt	r0, r1
 8000afe:	4041      	eorgt	r1, r0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	2b19      	cmp	r3, #25
 8000b06:	bf88      	it	hi
 8000b08:	4770      	bxhi	lr
 8000b0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4240      	negne	r0, r0
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4249      	negne	r1, r1
 8000b2a:	ea92 0f03 	teq	r2, r3
 8000b2e:	d03f      	beq.n	8000bb0 <__addsf3+0xd8>
 8000b30:	f1a2 0201 	sub.w	r2, r2, #1
 8000b34:	fa41 fc03 	asr.w	ip, r1, r3
 8000b38:	eb10 000c 	adds.w	r0, r0, ip
 8000b3c:	f1c3 0320 	rsb	r3, r3, #32
 8000b40:	fa01 f103 	lsl.w	r1, r1, r3
 8000b44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__addsf3+0x78>
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b54:	d313      	bcc.n	8000b7e <__addsf3+0xa6>
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5a:	d306      	bcc.n	8000b6a <__addsf3+0x92>
 8000b5c:	0840      	lsrs	r0, r0, #1
 8000b5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b62:	f102 0201 	add.w	r2, r2, #1
 8000b66:	2afe      	cmp	r2, #254	; 0xfe
 8000b68:	d251      	bcs.n	8000c0e <__addsf3+0x136>
 8000b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b72:	bf08      	it	eq
 8000b74:	f020 0001 	biceq.w	r0, r0, #1
 8000b78:	ea40 0003 	orr.w	r0, r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	0049      	lsls	r1, r1, #1
 8000b80:	eb40 0000 	adc.w	r0, r0, r0
 8000b84:	3a01      	subs	r2, #1
 8000b86:	bf28      	it	cs
 8000b88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b8c:	d2ed      	bcs.n	8000b6a <__addsf3+0x92>
 8000b8e:	fab0 fc80 	clz	ip, r0
 8000b92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b96:	ebb2 020c 	subs.w	r2, r2, ip
 8000b9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9e:	bfaa      	itet	ge
 8000ba0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba4:	4252      	neglt	r2, r2
 8000ba6:	4318      	orrge	r0, r3
 8000ba8:	bfbc      	itt	lt
 8000baa:	40d0      	lsrlt	r0, r2
 8000bac:	4318      	orrlt	r0, r3
 8000bae:	4770      	bx	lr
 8000bb0:	f092 0f00 	teq	r2, #0
 8000bb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb8:	bf06      	itte	eq
 8000bba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bbe:	3201      	addeq	r2, #1
 8000bc0:	3b01      	subne	r3, #1
 8000bc2:	e7b5      	b.n	8000b30 <__addsf3+0x58>
 8000bc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bcc:	bf18      	it	ne
 8000bce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd2:	d021      	beq.n	8000c18 <__addsf3+0x140>
 8000bd4:	ea92 0f03 	teq	r2, r3
 8000bd8:	d004      	beq.n	8000be4 <__addsf3+0x10c>
 8000bda:	f092 0f00 	teq	r2, #0
 8000bde:	bf08      	it	eq
 8000be0:	4608      	moveq	r0, r1
 8000be2:	4770      	bx	lr
 8000be4:	ea90 0f01 	teq	r0, r1
 8000be8:	bf1c      	itt	ne
 8000bea:	2000      	movne	r0, #0
 8000bec:	4770      	bxne	lr
 8000bee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bf2:	d104      	bne.n	8000bfe <__addsf3+0x126>
 8000bf4:	0040      	lsls	r0, r0, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	4770      	bx	lr
 8000bfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c02:	bf3c      	itt	cc
 8000c04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bxcc	lr
 8000c0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	4770      	bx	lr
 8000c18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c1c:	bf16      	itet	ne
 8000c1e:	4608      	movne	r0, r1
 8000c20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c24:	4601      	movne	r1, r0
 8000c26:	0242      	lsls	r2, r0, #9
 8000c28:	bf06      	itte	eq
 8000c2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2e:	ea90 0f01 	teqeq	r0, r1
 8000c32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_ui2f>:
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	e004      	b.n	8000c48 <__aeabi_i2f+0x8>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_i2f>:
 8000c40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c44:	bf48      	it	mi
 8000c46:	4240      	negmi	r0, r0
 8000c48:	ea5f 0c00 	movs.w	ip, r0
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c54:	4601      	mov	r1, r0
 8000c56:	f04f 0000 	mov.w	r0, #0
 8000c5a:	e01c      	b.n	8000c96 <__aeabi_l2f+0x2a>

08000c5c <__aeabi_ul2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e00a      	b.n	8000c80 <__aeabi_l2f+0x14>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_l2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c78:	d502      	bpl.n	8000c80 <__aeabi_l2f+0x14>
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	ea5f 0c01 	movs.w	ip, r1
 8000c84:	bf02      	ittt	eq
 8000c86:	4684      	moveq	ip, r0
 8000c88:	4601      	moveq	r1, r0
 8000c8a:	2000      	moveq	r0, #0
 8000c8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c90:	bf08      	it	eq
 8000c92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c9a:	fabc f28c 	clz	r2, ip
 8000c9e:	3a08      	subs	r2, #8
 8000ca0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca4:	db10      	blt.n	8000cc8 <__aeabi_l2f+0x5c>
 8000ca6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000caa:	4463      	add	r3, ip
 8000cac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f102 0220 	add.w	r2, r2, #32
 8000ccc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_fmul>:
 8000ce8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf0:	bf1e      	ittt	ne
 8000cf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf6:	ea92 0f0c 	teqne	r2, ip
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d06f      	beq.n	8000de0 <__aeabi_fmul+0xf8>
 8000d00:	441a      	add	r2, r3
 8000d02:	ea80 0c01 	eor.w	ip, r0, r1
 8000d06:	0240      	lsls	r0, r0, #9
 8000d08:	bf18      	it	ne
 8000d0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0e:	d01e      	beq.n	8000d4e <__aeabi_fmul+0x66>
 8000d10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d28:	bf3e      	ittt	cc
 8000d2a:	0049      	lslcc	r1, r1, #1
 8000d2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d30:	005b      	lslcc	r3, r3, #1
 8000d32:	ea40 0001 	orr.w	r0, r0, r1
 8000d36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d3a:	2afd      	cmp	r2, #253	; 0xfd
 8000d3c:	d81d      	bhi.n	8000d7a <__aeabi_fmul+0x92>
 8000d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d46:	bf08      	it	eq
 8000d48:	f020 0001 	biceq.w	r0, r0, #1
 8000d4c:	4770      	bx	lr
 8000d4e:	f090 0f00 	teq	r0, #0
 8000d52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d56:	bf08      	it	eq
 8000d58:	0249      	lsleq	r1, r1, #9
 8000d5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d62:	3a7f      	subs	r2, #127	; 0x7f
 8000d64:	bfc2      	ittt	gt
 8000d66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6e:	4770      	bxgt	lr
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	3a01      	subs	r2, #1
 8000d7a:	dc5d      	bgt.n	8000e38 <__aeabi_fmul+0x150>
 8000d7c:	f112 0f19 	cmn.w	r2, #25
 8000d80:	bfdc      	itt	le
 8000d82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d86:	4770      	bxle	lr
 8000d88:	f1c2 0200 	rsb	r2, r2, #0
 8000d8c:	0041      	lsls	r1, r0, #1
 8000d8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d92:	f1c2 0220 	rsb	r2, r2, #32
 8000d96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9e:	f140 0000 	adc.w	r0, r0, #0
 8000da2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da6:	bf08      	it	eq
 8000da8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dac:	4770      	bx	lr
 8000dae:	f092 0f00 	teq	r2, #0
 8000db2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db6:	bf02      	ittt	eq
 8000db8:	0040      	lsleq	r0, r0, #1
 8000dba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dbe:	3a01      	subeq	r2, #1
 8000dc0:	d0f9      	beq.n	8000db6 <__aeabi_fmul+0xce>
 8000dc2:	ea40 000c 	orr.w	r0, r0, ip
 8000dc6:	f093 0f00 	teq	r3, #0
 8000dca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0049      	lsleq	r1, r1, #1
 8000dd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd6:	3b01      	subeq	r3, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fmul+0xe6>
 8000dda:	ea41 010c 	orr.w	r1, r1, ip
 8000dde:	e78f      	b.n	8000d00 <__aeabi_fmul+0x18>
 8000de0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de4:	ea92 0f0c 	teq	r2, ip
 8000de8:	bf18      	it	ne
 8000dea:	ea93 0f0c 	teqne	r3, ip
 8000dee:	d00a      	beq.n	8000e06 <__aeabi_fmul+0x11e>
 8000df0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df4:	bf18      	it	ne
 8000df6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	d1d8      	bne.n	8000dae <__aeabi_fmul+0xc6>
 8000dfc:	ea80 0001 	eor.w	r0, r0, r1
 8000e00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e04:	4770      	bx	lr
 8000e06:	f090 0f00 	teq	r0, #0
 8000e0a:	bf17      	itett	ne
 8000e0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e10:	4608      	moveq	r0, r1
 8000e12:	f091 0f00 	teqne	r1, #0
 8000e16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e1a:	d014      	beq.n	8000e46 <__aeabi_fmul+0x15e>
 8000e1c:	ea92 0f0c 	teq	r2, ip
 8000e20:	d101      	bne.n	8000e26 <__aeabi_fmul+0x13e>
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	d10f      	bne.n	8000e46 <__aeabi_fmul+0x15e>
 8000e26:	ea93 0f0c 	teq	r3, ip
 8000e2a:	d103      	bne.n	8000e34 <__aeabi_fmul+0x14c>
 8000e2c:	024b      	lsls	r3, r1, #9
 8000e2e:	bf18      	it	ne
 8000e30:	4608      	movne	r0, r1
 8000e32:	d108      	bne.n	8000e46 <__aeabi_fmul+0x15e>
 8000e34:	ea80 0001 	eor.w	r0, r0, r1
 8000e38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e44:	4770      	bx	lr
 8000e46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4e:	4770      	bx	lr

08000e50 <__aeabi_fdiv>:
 8000e50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e58:	bf1e      	ittt	ne
 8000e5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5e:	ea92 0f0c 	teqne	r2, ip
 8000e62:	ea93 0f0c 	teqne	r3, ip
 8000e66:	d069      	beq.n	8000f3c <__aeabi_fdiv+0xec>
 8000e68:	eba2 0203 	sub.w	r2, r2, r3
 8000e6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e76:	d037      	beq.n	8000ee8 <__aeabi_fdiv+0x98>
 8000e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	bf38      	it	cc
 8000e8c:	005b      	lslcc	r3, r3, #1
 8000e8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e96:	428b      	cmp	r3, r1
 8000e98:	bf24      	itt	cs
 8000e9a:	1a5b      	subcs	r3, r3, r1
 8000e9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ea0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea4:	bf24      	itt	cs
 8000ea6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eaa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eb2:	bf24      	itt	cs
 8000eb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ebc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ec0:	bf24      	itt	cs
 8000ec2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	bf18      	it	ne
 8000ece:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ed2:	d1e0      	bne.n	8000e96 <__aeabi_fdiv+0x46>
 8000ed4:	2afd      	cmp	r2, #253	; 0xfd
 8000ed6:	f63f af50 	bhi.w	8000d7a <__aeabi_fmul+0x92>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ee0:	bf08      	it	eq
 8000ee2:	f020 0001 	biceq.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ef0:	327f      	adds	r2, #127	; 0x7f
 8000ef2:	bfc2      	ittt	gt
 8000ef4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efc:	4770      	bxgt	lr
 8000efe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	3a01      	subs	r2, #1
 8000f08:	e737      	b.n	8000d7a <__aeabi_fmul+0x92>
 8000f0a:	f092 0f00 	teq	r2, #0
 8000f0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0040      	lsleq	r0, r0, #1
 8000f16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f1a:	3a01      	subeq	r2, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fdiv+0xc2>
 8000f1e:	ea40 000c 	orr.w	r0, r0, ip
 8000f22:	f093 0f00 	teq	r3, #0
 8000f26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0049      	lsleq	r1, r1, #1
 8000f2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f32:	3b01      	subeq	r3, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fdiv+0xda>
 8000f36:	ea41 010c 	orr.w	r1, r1, ip
 8000f3a:	e795      	b.n	8000e68 <__aeabi_fdiv+0x18>
 8000f3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f40:	ea92 0f0c 	teq	r2, ip
 8000f44:	d108      	bne.n	8000f58 <__aeabi_fdiv+0x108>
 8000f46:	0242      	lsls	r2, r0, #9
 8000f48:	f47f af7d 	bne.w	8000e46 <__aeabi_fmul+0x15e>
 8000f4c:	ea93 0f0c 	teq	r3, ip
 8000f50:	f47f af70 	bne.w	8000e34 <__aeabi_fmul+0x14c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e776      	b.n	8000e46 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	d104      	bne.n	8000f68 <__aeabi_fdiv+0x118>
 8000f5e:	024b      	lsls	r3, r1, #9
 8000f60:	f43f af4c 	beq.w	8000dfc <__aeabi_fmul+0x114>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e76e      	b.n	8000e46 <__aeabi_fmul+0x15e>
 8000f68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f6c:	bf18      	it	ne
 8000f6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f72:	d1ca      	bne.n	8000f0a <__aeabi_fdiv+0xba>
 8000f74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f78:	f47f af5c 	bne.w	8000e34 <__aeabi_fmul+0x14c>
 8000f7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f80:	f47f af3c 	bne.w	8000dfc <__aeabi_fmul+0x114>
 8000f84:	e75f      	b.n	8000e46 <__aeabi_fmul+0x15e>
 8000f86:	bf00      	nop

08000f88 <__gesf2>:
 8000f88:	f04f 3cff 	mov.w	ip, #4294967295
 8000f8c:	e006      	b.n	8000f9c <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__lesf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	e002      	b.n	8000f9c <__cmpsf2+0x4>
 8000f96:	bf00      	nop

08000f98 <__cmpsf2>:
 8000f98:	f04f 0c01 	mov.w	ip, #1
 8000f9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	bf18      	it	ne
 8000fae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fb2:	d011      	beq.n	8000fd8 <__cmpsf2+0x40>
 8000fb4:	b001      	add	sp, #4
 8000fb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fba:	bf18      	it	ne
 8000fbc:	ea90 0f01 	teqne	r0, r1
 8000fc0:	bf58      	it	pl
 8000fc2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc6:	bf88      	it	hi
 8000fc8:	17c8      	asrhi	r0, r1, #31
 8000fca:	bf38      	it	cc
 8000fcc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fd0:	bf18      	it	ne
 8000fd2:	f040 0001 	orrne.w	r0, r0, #1
 8000fd6:	4770      	bx	lr
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	d102      	bne.n	8000fe4 <__cmpsf2+0x4c>
 8000fde:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fe2:	d105      	bne.n	8000ff0 <__cmpsf2+0x58>
 8000fe4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe8:	d1e4      	bne.n	8000fb4 <__cmpsf2+0x1c>
 8000fea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fee:	d0e1      	beq.n	8000fb4 <__cmpsf2+0x1c>
 8000ff0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_cfrcmple>:
 8000ff8:	4684      	mov	ip, r0
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	4661      	mov	r1, ip
 8000ffe:	e7ff      	b.n	8001000 <__aeabi_cfcmpeq>

08001000 <__aeabi_cfcmpeq>:
 8001000:	b50f      	push	{r0, r1, r2, r3, lr}
 8001002:	f7ff ffc9 	bl	8000f98 <__cmpsf2>
 8001006:	2800      	cmp	r0, #0
 8001008:	bf48      	it	mi
 800100a:	f110 0f00 	cmnmi.w	r0, #0
 800100e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001010 <__aeabi_fcmpeq>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff fff4 	bl	8001000 <__aeabi_cfcmpeq>
 8001018:	bf0c      	ite	eq
 800101a:	2001      	moveq	r0, #1
 800101c:	2000      	movne	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmplt>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffea 	bl	8001000 <__aeabi_cfcmpeq>
 800102c:	bf34      	ite	cc
 800102e:	2001      	movcc	r0, #1
 8001030:	2000      	movcs	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmple>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffe0 	bl	8001000 <__aeabi_cfcmpeq>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpge>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffd2 	bl	8000ff8 <__aeabi_cfrcmple>
 8001054:	bf94      	ite	ls
 8001056:	2001      	movls	r0, #1
 8001058:	2000      	movhi	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmpgt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffc8 	bl	8000ff8 <__aeabi_cfrcmple>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_f2uiz>:
 8001074:	0042      	lsls	r2, r0, #1
 8001076:	d20e      	bcs.n	8001096 <__aeabi_f2uiz+0x22>
 8001078:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800107c:	d30b      	bcc.n	8001096 <__aeabi_f2uiz+0x22>
 800107e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001082:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001086:	d409      	bmi.n	800109c <__aeabi_f2uiz+0x28>
 8001088:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800108c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	4770      	bx	lr
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	4770      	bx	lr
 800109c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a0:	d101      	bne.n	80010a6 <__aeabi_f2uiz+0x32>
 80010a2:	0242      	lsls	r2, r0, #9
 80010a4:	d102      	bne.n	80010ac <__aeabi_f2uiz+0x38>
 80010a6:	f04f 30ff 	mov.w	r0, #4294967295
 80010aa:	4770      	bx	lr
 80010ac:	f04f 0000 	mov.w	r0, #0
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_uldivmod>:
 80010b4:	b953      	cbnz	r3, 80010cc <__aeabi_uldivmod+0x18>
 80010b6:	b94a      	cbnz	r2, 80010cc <__aeabi_uldivmod+0x18>
 80010b8:	2900      	cmp	r1, #0
 80010ba:	bf08      	it	eq
 80010bc:	2800      	cmpeq	r0, #0
 80010be:	bf1c      	itt	ne
 80010c0:	f04f 31ff 	movne.w	r1, #4294967295
 80010c4:	f04f 30ff 	movne.w	r0, #4294967295
 80010c8:	f000 b976 	b.w	80013b8 <__aeabi_idiv0>
 80010cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80010d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010d4:	f000 f806 	bl	80010e4 <__udivmoddi4>
 80010d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010e0:	b004      	add	sp, #16
 80010e2:	4770      	bx	lr

080010e4 <__udivmoddi4>:
 80010e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010e8:	9e08      	ldr	r6, [sp, #32]
 80010ea:	460d      	mov	r5, r1
 80010ec:	4604      	mov	r4, r0
 80010ee:	4688      	mov	r8, r1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d14d      	bne.n	8001190 <__udivmoddi4+0xac>
 80010f4:	428a      	cmp	r2, r1
 80010f6:	4694      	mov	ip, r2
 80010f8:	d968      	bls.n	80011cc <__udivmoddi4+0xe8>
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b152      	cbz	r2, 8001116 <__udivmoddi4+0x32>
 8001100:	fa01 f302 	lsl.w	r3, r1, r2
 8001104:	f1c2 0120 	rsb	r1, r2, #32
 8001108:	fa20 f101 	lsr.w	r1, r0, r1
 800110c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001110:	ea41 0803 	orr.w	r8, r1, r3
 8001114:	4094      	lsls	r4, r2
 8001116:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800111a:	fbb8 f7f1 	udiv	r7, r8, r1
 800111e:	fa1f fe8c 	uxth.w	lr, ip
 8001122:	fb01 8817 	mls	r8, r1, r7, r8
 8001126:	fb07 f00e 	mul.w	r0, r7, lr
 800112a:	0c23      	lsrs	r3, r4, #16
 800112c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001130:	4298      	cmp	r0, r3
 8001132:	d90a      	bls.n	800114a <__udivmoddi4+0x66>
 8001134:	eb1c 0303 	adds.w	r3, ip, r3
 8001138:	f107 35ff 	add.w	r5, r7, #4294967295
 800113c:	f080 811e 	bcs.w	800137c <__udivmoddi4+0x298>
 8001140:	4298      	cmp	r0, r3
 8001142:	f240 811b 	bls.w	800137c <__udivmoddi4+0x298>
 8001146:	3f02      	subs	r7, #2
 8001148:	4463      	add	r3, ip
 800114a:	1a1b      	subs	r3, r3, r0
 800114c:	fbb3 f0f1 	udiv	r0, r3, r1
 8001150:	fb01 3310 	mls	r3, r1, r0, r3
 8001154:	fb00 fe0e 	mul.w	lr, r0, lr
 8001158:	b2a4      	uxth	r4, r4
 800115a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800115e:	45a6      	cmp	lr, r4
 8001160:	d90a      	bls.n	8001178 <__udivmoddi4+0x94>
 8001162:	eb1c 0404 	adds.w	r4, ip, r4
 8001166:	f100 33ff 	add.w	r3, r0, #4294967295
 800116a:	f080 8109 	bcs.w	8001380 <__udivmoddi4+0x29c>
 800116e:	45a6      	cmp	lr, r4
 8001170:	f240 8106 	bls.w	8001380 <__udivmoddi4+0x29c>
 8001174:	4464      	add	r4, ip
 8001176:	3802      	subs	r0, #2
 8001178:	2100      	movs	r1, #0
 800117a:	eba4 040e 	sub.w	r4, r4, lr
 800117e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001182:	b11e      	cbz	r6, 800118c <__udivmoddi4+0xa8>
 8001184:	2300      	movs	r3, #0
 8001186:	40d4      	lsrs	r4, r2
 8001188:	e9c6 4300 	strd	r4, r3, [r6]
 800118c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001190:	428b      	cmp	r3, r1
 8001192:	d908      	bls.n	80011a6 <__udivmoddi4+0xc2>
 8001194:	2e00      	cmp	r6, #0
 8001196:	f000 80ee 	beq.w	8001376 <__udivmoddi4+0x292>
 800119a:	2100      	movs	r1, #0
 800119c:	e9c6 0500 	strd	r0, r5, [r6]
 80011a0:	4608      	mov	r0, r1
 80011a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a6:	fab3 f183 	clz	r1, r3
 80011aa:	2900      	cmp	r1, #0
 80011ac:	d14a      	bne.n	8001244 <__udivmoddi4+0x160>
 80011ae:	42ab      	cmp	r3, r5
 80011b0:	d302      	bcc.n	80011b8 <__udivmoddi4+0xd4>
 80011b2:	4282      	cmp	r2, r0
 80011b4:	f200 80fc 	bhi.w	80013b0 <__udivmoddi4+0x2cc>
 80011b8:	1a84      	subs	r4, r0, r2
 80011ba:	eb65 0303 	sbc.w	r3, r5, r3
 80011be:	2001      	movs	r0, #1
 80011c0:	4698      	mov	r8, r3
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d0e2      	beq.n	800118c <__udivmoddi4+0xa8>
 80011c6:	e9c6 4800 	strd	r4, r8, [r6]
 80011ca:	e7df      	b.n	800118c <__udivmoddi4+0xa8>
 80011cc:	b902      	cbnz	r2, 80011d0 <__udivmoddi4+0xec>
 80011ce:	deff      	udf	#255	; 0xff
 80011d0:	fab2 f282 	clz	r2, r2
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	f040 8091 	bne.w	80012fc <__udivmoddi4+0x218>
 80011da:	eba1 000c 	sub.w	r0, r1, ip
 80011de:	2101      	movs	r1, #1
 80011e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011e4:	fa1f fe8c 	uxth.w	lr, ip
 80011e8:	fbb0 f3f7 	udiv	r3, r0, r7
 80011ec:	fb07 0013 	mls	r0, r7, r3, r0
 80011f0:	0c25      	lsrs	r5, r4, #16
 80011f2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011f6:	fb0e f003 	mul.w	r0, lr, r3
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d908      	bls.n	8001210 <__udivmoddi4+0x12c>
 80011fe:	eb1c 0505 	adds.w	r5, ip, r5
 8001202:	f103 38ff 	add.w	r8, r3, #4294967295
 8001206:	d202      	bcs.n	800120e <__udivmoddi4+0x12a>
 8001208:	42a8      	cmp	r0, r5
 800120a:	f200 80ce 	bhi.w	80013aa <__udivmoddi4+0x2c6>
 800120e:	4643      	mov	r3, r8
 8001210:	1a2d      	subs	r5, r5, r0
 8001212:	fbb5 f0f7 	udiv	r0, r5, r7
 8001216:	fb07 5510 	mls	r5, r7, r0, r5
 800121a:	fb0e fe00 	mul.w	lr, lr, r0
 800121e:	b2a4      	uxth	r4, r4
 8001220:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001224:	45a6      	cmp	lr, r4
 8001226:	d908      	bls.n	800123a <__udivmoddi4+0x156>
 8001228:	eb1c 0404 	adds.w	r4, ip, r4
 800122c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001230:	d202      	bcs.n	8001238 <__udivmoddi4+0x154>
 8001232:	45a6      	cmp	lr, r4
 8001234:	f200 80b6 	bhi.w	80013a4 <__udivmoddi4+0x2c0>
 8001238:	4628      	mov	r0, r5
 800123a:	eba4 040e 	sub.w	r4, r4, lr
 800123e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001242:	e79e      	b.n	8001182 <__udivmoddi4+0x9e>
 8001244:	f1c1 0720 	rsb	r7, r1, #32
 8001248:	408b      	lsls	r3, r1
 800124a:	fa22 fc07 	lsr.w	ip, r2, r7
 800124e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001252:	fa25 fa07 	lsr.w	sl, r5, r7
 8001256:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800125a:	fbba f8f9 	udiv	r8, sl, r9
 800125e:	fa20 f307 	lsr.w	r3, r0, r7
 8001262:	fb09 aa18 	mls	sl, r9, r8, sl
 8001266:	408d      	lsls	r5, r1
 8001268:	fa1f fe8c 	uxth.w	lr, ip
 800126c:	431d      	orrs	r5, r3
 800126e:	fa00 f301 	lsl.w	r3, r0, r1
 8001272:	fb08 f00e 	mul.w	r0, r8, lr
 8001276:	0c2c      	lsrs	r4, r5, #16
 8001278:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800127c:	42a0      	cmp	r0, r4
 800127e:	fa02 f201 	lsl.w	r2, r2, r1
 8001282:	d90b      	bls.n	800129c <__udivmoddi4+0x1b8>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f108 3aff 	add.w	sl, r8, #4294967295
 800128c:	f080 8088 	bcs.w	80013a0 <__udivmoddi4+0x2bc>
 8001290:	42a0      	cmp	r0, r4
 8001292:	f240 8085 	bls.w	80013a0 <__udivmoddi4+0x2bc>
 8001296:	f1a8 0802 	sub.w	r8, r8, #2
 800129a:	4464      	add	r4, ip
 800129c:	1a24      	subs	r4, r4, r0
 800129e:	fbb4 f0f9 	udiv	r0, r4, r9
 80012a2:	fb09 4410 	mls	r4, r9, r0, r4
 80012a6:	fb00 fe0e 	mul.w	lr, r0, lr
 80012aa:	b2ad      	uxth	r5, r5
 80012ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012b0:	45a6      	cmp	lr, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x1e2>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80012bc:	d26c      	bcs.n	8001398 <__udivmoddi4+0x2b4>
 80012be:	45a6      	cmp	lr, r4
 80012c0:	d96a      	bls.n	8001398 <__udivmoddi4+0x2b4>
 80012c2:	3802      	subs	r0, #2
 80012c4:	4464      	add	r4, ip
 80012c6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012ca:	fba0 9502 	umull	r9, r5, r0, r2
 80012ce:	eba4 040e 	sub.w	r4, r4, lr
 80012d2:	42ac      	cmp	r4, r5
 80012d4:	46c8      	mov	r8, r9
 80012d6:	46ae      	mov	lr, r5
 80012d8:	d356      	bcc.n	8001388 <__udivmoddi4+0x2a4>
 80012da:	d053      	beq.n	8001384 <__udivmoddi4+0x2a0>
 80012dc:	2e00      	cmp	r6, #0
 80012de:	d069      	beq.n	80013b4 <__udivmoddi4+0x2d0>
 80012e0:	ebb3 0208 	subs.w	r2, r3, r8
 80012e4:	eb64 040e 	sbc.w	r4, r4, lr
 80012e8:	fa22 f301 	lsr.w	r3, r2, r1
 80012ec:	fa04 f707 	lsl.w	r7, r4, r7
 80012f0:	431f      	orrs	r7, r3
 80012f2:	40cc      	lsrs	r4, r1
 80012f4:	e9c6 7400 	strd	r7, r4, [r6]
 80012f8:	2100      	movs	r1, #0
 80012fa:	e747      	b.n	800118c <__udivmoddi4+0xa8>
 80012fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001300:	f1c2 0120 	rsb	r1, r2, #32
 8001304:	fa25 f301 	lsr.w	r3, r5, r1
 8001308:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800130c:	fa20 f101 	lsr.w	r1, r0, r1
 8001310:	4095      	lsls	r5, r2
 8001312:	430d      	orrs	r5, r1
 8001314:	fbb3 f1f7 	udiv	r1, r3, r7
 8001318:	fb07 3311 	mls	r3, r7, r1, r3
 800131c:	fa1f fe8c 	uxth.w	lr, ip
 8001320:	0c28      	lsrs	r0, r5, #16
 8001322:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001326:	fb01 f30e 	mul.w	r3, r1, lr
 800132a:	4283      	cmp	r3, r0
 800132c:	fa04 f402 	lsl.w	r4, r4, r2
 8001330:	d908      	bls.n	8001344 <__udivmoddi4+0x260>
 8001332:	eb1c 0000 	adds.w	r0, ip, r0
 8001336:	f101 38ff 	add.w	r8, r1, #4294967295
 800133a:	d22f      	bcs.n	800139c <__udivmoddi4+0x2b8>
 800133c:	4283      	cmp	r3, r0
 800133e:	d92d      	bls.n	800139c <__udivmoddi4+0x2b8>
 8001340:	3902      	subs	r1, #2
 8001342:	4460      	add	r0, ip
 8001344:	1ac0      	subs	r0, r0, r3
 8001346:	fbb0 f3f7 	udiv	r3, r0, r7
 800134a:	fb07 0013 	mls	r0, r7, r3, r0
 800134e:	b2ad      	uxth	r5, r5
 8001350:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001354:	fb03 f00e 	mul.w	r0, r3, lr
 8001358:	42a8      	cmp	r0, r5
 800135a:	d908      	bls.n	800136e <__udivmoddi4+0x28a>
 800135c:	eb1c 0505 	adds.w	r5, ip, r5
 8001360:	f103 38ff 	add.w	r8, r3, #4294967295
 8001364:	d216      	bcs.n	8001394 <__udivmoddi4+0x2b0>
 8001366:	42a8      	cmp	r0, r5
 8001368:	d914      	bls.n	8001394 <__udivmoddi4+0x2b0>
 800136a:	3b02      	subs	r3, #2
 800136c:	4465      	add	r5, ip
 800136e:	1a28      	subs	r0, r5, r0
 8001370:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001374:	e738      	b.n	80011e8 <__udivmoddi4+0x104>
 8001376:	4631      	mov	r1, r6
 8001378:	4630      	mov	r0, r6
 800137a:	e707      	b.n	800118c <__udivmoddi4+0xa8>
 800137c:	462f      	mov	r7, r5
 800137e:	e6e4      	b.n	800114a <__udivmoddi4+0x66>
 8001380:	4618      	mov	r0, r3
 8001382:	e6f9      	b.n	8001178 <__udivmoddi4+0x94>
 8001384:	454b      	cmp	r3, r9
 8001386:	d2a9      	bcs.n	80012dc <__udivmoddi4+0x1f8>
 8001388:	ebb9 0802 	subs.w	r8, r9, r2
 800138c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001390:	3801      	subs	r0, #1
 8001392:	e7a3      	b.n	80012dc <__udivmoddi4+0x1f8>
 8001394:	4643      	mov	r3, r8
 8001396:	e7ea      	b.n	800136e <__udivmoddi4+0x28a>
 8001398:	4628      	mov	r0, r5
 800139a:	e794      	b.n	80012c6 <__udivmoddi4+0x1e2>
 800139c:	4641      	mov	r1, r8
 800139e:	e7d1      	b.n	8001344 <__udivmoddi4+0x260>
 80013a0:	46d0      	mov	r8, sl
 80013a2:	e77b      	b.n	800129c <__udivmoddi4+0x1b8>
 80013a4:	4464      	add	r4, ip
 80013a6:	3802      	subs	r0, #2
 80013a8:	e747      	b.n	800123a <__udivmoddi4+0x156>
 80013aa:	3b02      	subs	r3, #2
 80013ac:	4465      	add	r5, ip
 80013ae:	e72f      	b.n	8001210 <__udivmoddi4+0x12c>
 80013b0:	4608      	mov	r0, r1
 80013b2:	e706      	b.n	80011c2 <__udivmoddi4+0xde>
 80013b4:	4631      	mov	r1, r6
 80013b6:	e6e9      	b.n	800118c <__udivmoddi4+0xa8>

080013b8 <__aeabi_idiv0>:
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c2:	f002 fe06 	bl	8003fd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c6:	f000 fa99 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ca:	f000 fcc7 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80013ce:	f000 fc9f 	bl	8001d10 <MX_DMA_Init>
  MX_ADC_Init();
 80013d2:	f000 fae3 	bl	800199c <MX_ADC_Init>
  MX_DAC_Init();
 80013d6:	f000 fb73 	bl	8001ac0 <MX_DAC_Init>
  MX_I2C1_Init();
 80013da:	f000 fba5 	bl	8001b28 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013de:	f000 fc6b 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80013e2:	f00c f8d3 	bl	800d58c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80013e6:	f000 fbcd 	bl	8001b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013ea:	f000 fc17 	bl	8001c1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ourInit();
 80013ee:	f000 fd53 	bl	8001e98 <ourInit>

    /* USER CODE BEGIN 3 */

	  //Control channel here

	  if(voltnum1 <= 0.00){
 80013f2:	4b9f      	ldr	r3, [pc, #636]	; (8001670 <main+0x2b4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f04f 0100 	mov.w	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe1c 	bl	8001038 <__aeabi_fcmple>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <main+0x5e>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	489a      	ldr	r0, [pc, #616]	; (8001674 <main+0x2b8>)
 800140c:	f004 fad5 	bl	80059ba <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2110      	movs	r1, #16
 8001414:	4898      	ldr	r0, [pc, #608]	; (8001678 <main+0x2bc>)
 8001416:	f004 fad0 	bl	80059ba <HAL_GPIO_WritePin>
	  }

	  uint16_t vrefvalue = (uint16_t)*vrefptr;
 800141a:	4b98      	ldr	r3, [pc, #608]	; (800167c <main+0x2c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	82fb      	strh	r3, [r7, #22]
	  float vddcalc = (float)3.0 * ((float)vrefvalue / (float)adc_vref);
 8001422:	8afb      	ldrh	r3, [r7, #22]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fc07 	bl	8000c38 <__aeabi_ui2f>
 800142a:	4604      	mov	r4, r0
 800142c:	4b94      	ldr	r3, [pc, #592]	; (8001680 <main+0x2c4>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fc01 	bl	8000c38 <__aeabi_ui2f>
 8001436:	4603      	mov	r3, r0
 8001438:	4619      	mov	r1, r3
 800143a:	4620      	mov	r0, r4
 800143c:	f7ff fd08 	bl	8000e50 <__aeabi_fdiv>
 8001440:	4603      	mov	r3, r0
 8001442:	4990      	ldr	r1, [pc, #576]	; (8001684 <main+0x2c8>)
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc4f 	bl	8000ce8 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	613b      	str	r3, [r7, #16]

	  float cur_num_temp = ((((float)3.0 * (float)adc_current * (float)vrefvalue)/((float)adc_vref * (float)4095) / (float)20) / (float)0.15);
 800144e:	4b8e      	ldr	r3, [pc, #568]	; (8001688 <main+0x2cc>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fbf0 	bl	8000c38 <__aeabi_ui2f>
 8001458:	4603      	mov	r3, r0
 800145a:	498a      	ldr	r1, [pc, #552]	; (8001684 <main+0x2c8>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fc43 	bl	8000ce8 <__aeabi_fmul>
 8001462:	4603      	mov	r3, r0
 8001464:	461c      	mov	r4, r3
 8001466:	8afb      	ldrh	r3, [r7, #22]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fbe5 	bl	8000c38 <__aeabi_ui2f>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	4620      	mov	r0, r4
 8001474:	f7ff fc38 	bl	8000ce8 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	461c      	mov	r4, r3
 800147c:	4b80      	ldr	r3, [pc, #512]	; (8001680 <main+0x2c4>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fbd9 	bl	8000c38 <__aeabi_ui2f>
 8001486:	4603      	mov	r3, r0
 8001488:	4980      	ldr	r1, [pc, #512]	; (800168c <main+0x2d0>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc2c 	bl	8000ce8 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	4619      	mov	r1, r3
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff fcdb 	bl	8000e50 <__aeabi_fdiv>
 800149a:	4603      	mov	r3, r0
 800149c:	497c      	ldr	r1, [pc, #496]	; (8001690 <main+0x2d4>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fcd6 	bl	8000e50 <__aeabi_fdiv>
 80014a4:	4603      	mov	r3, r0
 80014a6:	497b      	ldr	r1, [pc, #492]	; (8001694 <main+0x2d8>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fcd1 	bl	8000e50 <__aeabi_fdiv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	60fb      	str	r3, [r7, #12]
	  if(cur_num_temp >= 0.0000){
 80014b2:	f04f 0100 	mov.w	r1, #0
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff fdc8 	bl	800104c <__aeabi_fcmpge>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <main+0x10e>
		  cur_num = cur_num_temp;
 80014c2:	4a75      	ldr	r2, [pc, #468]	; (8001698 <main+0x2dc>)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e003      	b.n	80014d2 <main+0x116>
	  }
	  else{
		  cur_num = 0.0000;
 80014ca:	4b73      	ldr	r3, [pc, #460]	; (8001698 <main+0x2dc>)
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	  }
	  //float cur_num = (((float)vddcalc * (float)adc_current * (float)4095) / (float)20) / (float)0.3;
	  float op_num_temp = ((float)3.0 * ((float)adc_opamp * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 80014d2:	4b72      	ldr	r3, [pc, #456]	; (800169c <main+0x2e0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fbae 	bl	8000c38 <__aeabi_ui2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fc00 	bl	8000ce8 <__aeabi_fmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4966      	ldr	r1, [pc, #408]	; (8001684 <main+0x2c8>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbfb 	bl	8000ce8 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461c      	mov	r4, r3
 80014f6:	8afb      	ldrh	r3, [r7, #22]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fb9d 	bl	8000c38 <__aeabi_ui2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff fbf0 	bl	8000ce8 <__aeabi_fmul>
 8001508:	4603      	mov	r3, r0
 800150a:	461c      	mov	r4, r3
 800150c:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <main+0x2c4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fb91 	bl	8000c38 <__aeabi_ui2f>
 8001516:	4603      	mov	r3, r0
 8001518:	495c      	ldr	r1, [pc, #368]	; (800168c <main+0x2d0>)
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fbe4 	bl	8000ce8 <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	4619      	mov	r1, r3
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fc93 	bl	8000e50 <__aeabi_fdiv>
 800152a:	4603      	mov	r3, r0
 800152c:	461c      	mov	r4, r3
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <main+0x2dc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	495b      	ldr	r1, [pc, #364]	; (80016a0 <main+0x2e4>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbd7 	bl	8000ce8 <__aeabi_fmul>
 800153a:	4603      	mov	r3, r0
 800153c:	4619      	mov	r1, r3
 800153e:	4620      	mov	r0, r4
 8001540:	f7ff fac8 	bl	8000ad4 <__aeabi_fsub>
 8001544:	4603      	mov	r3, r0
 8001546:	60bb      	str	r3, [r7, #8]
	  if(op_num_temp >= 0.0000){
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f7ff fd7d 	bl	800104c <__aeabi_fcmpge>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <main+0x1a4>
		  op_num = op_num_temp;
 8001558:	4a52      	ldr	r2, [pc, #328]	; (80016a4 <main+0x2e8>)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e003      	b.n	8001568 <main+0x1ac>
	  }
	  else{
		  op_num = 0.0000;
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <main+0x2e8>)
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
	  }
	  float lin_num_temp = ((float)3.0 * ((float)adc_linear * (float)4.0) * (float)vrefvalue)/((float)adc_vref * (float)4095) - ((float)cur_num * (float)0.35);
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <main+0x2ec>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fb63 	bl	8000c38 <__aeabi_ui2f>
 8001572:	4603      	mov	r3, r0
 8001574:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fbb5 	bl	8000ce8 <__aeabi_fmul>
 800157e:	4603      	mov	r3, r0
 8001580:	4940      	ldr	r1, [pc, #256]	; (8001684 <main+0x2c8>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fbb0 	bl	8000ce8 <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	461c      	mov	r4, r3
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fb52 	bl	8000c38 <__aeabi_ui2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fba5 	bl	8000ce8 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <main+0x2c4>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb46 	bl	8000c38 <__aeabi_ui2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4937      	ldr	r1, [pc, #220]	; (800168c <main+0x2d0>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fb99 	bl	8000ce8 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4619      	mov	r1, r3
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff fc48 	bl	8000e50 <__aeabi_fdiv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461c      	mov	r4, r3
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <main+0x2dc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4935      	ldr	r1, [pc, #212]	; (80016a0 <main+0x2e4>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb8c 	bl	8000ce8 <__aeabi_fmul>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff fa7d 	bl	8000ad4 <__aeabi_fsub>
 80015da:	4603      	mov	r3, r0
 80015dc:	607b      	str	r3, [r7, #4]
	  if(lin_num_temp >= 0.0000){
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fd32 	bl	800104c <__aeabi_fcmpge>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <main+0x23a>
		  lin_num = lin_num_temp;
 80015ee:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <main+0x2f0>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e003      	b.n	80015fe <main+0x242>
	  }
	  else{
		  lin_num = 0.0000;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <main+0x2f0>)
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
	  }
	  //float lin_num = ((float)vddcalc * (float)adc_linear * (float)4095) * (float)4;
	  float swi_num_temp = ((float)3.0 * ((float)adc_switching * (float)5.0) * (float)vrefvalue)/((float)adc_vref * (float)4095);
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <main+0x2f4>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fb18 	bl	8000c38 <__aeabi_ui2f>
 8001608:	4603      	mov	r3, r0
 800160a:	492a      	ldr	r1, [pc, #168]	; (80016b4 <main+0x2f8>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb6b 	bl	8000ce8 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	491b      	ldr	r1, [pc, #108]	; (8001684 <main+0x2c8>)
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb66 	bl	8000ce8 <__aeabi_fmul>
 800161c:	4603      	mov	r3, r0
 800161e:	461c      	mov	r4, r3
 8001620:	8afb      	ldrh	r3, [r7, #22]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb08 	bl	8000c38 <__aeabi_ui2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4619      	mov	r1, r3
 800162c:	4620      	mov	r0, r4
 800162e:	f7ff fb5b 	bl	8000ce8 <__aeabi_fmul>
 8001632:	4603      	mov	r3, r0
 8001634:	461c      	mov	r4, r3
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <main+0x2c4>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fafc 	bl	8000c38 <__aeabi_ui2f>
 8001640:	4603      	mov	r3, r0
 8001642:	4912      	ldr	r1, [pc, #72]	; (800168c <main+0x2d0>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb4f 	bl	8000ce8 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	4619      	mov	r1, r3
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff fbfe 	bl	8000e50 <__aeabi_fdiv>
 8001654:	4603      	mov	r3, r0
 8001656:	603b      	str	r3, [r7, #0]
	  if(swi_num_temp >= 0.0000){
 8001658:	f04f 0100 	mov.w	r1, #0
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f7ff fcf5 	bl	800104c <__aeabi_fcmpge>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d029      	beq.n	80016bc <main+0x300>
		  swi_num = swi_num_temp;
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <main+0x2fc>)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e029      	b.n	80016c4 <main+0x308>
 8001670:	200006e8 	.word	0x200006e8
 8001674:	40020000 	.word	0x40020000
 8001678:	40020800 	.word	0x40020800
 800167c:	20000028 	.word	0x20000028
 8001680:	2000070e 	.word	0x2000070e
 8001684:	40400000 	.word	0x40400000
 8001688:	20000706 	.word	0x20000706
 800168c:	457ff000 	.word	0x457ff000
 8001690:	41a00000 	.word	0x41a00000
 8001694:	3e19999a 	.word	0x3e19999a
 8001698:	20000718 	.word	0x20000718
 800169c:	2000070a 	.word	0x2000070a
 80016a0:	3eb33333 	.word	0x3eb33333
 80016a4:	2000071c 	.word	0x2000071c
 80016a8:	20000708 	.word	0x20000708
 80016ac:	20000714 	.word	0x20000714
 80016b0:	2000070c 	.word	0x2000070c
 80016b4:	40a00000 	.word	0x40a00000
 80016b8:	20000720 	.word	0x20000720
	  }
	  else{
		  swi_num = 0.0000;
 80016bc:	4b7b      	ldr	r3, [pc, #492]	; (80018ac <main+0x4f0>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
	  }

	  if(first_shot){
 80016c4:	4b7a      	ldr	r3, [pc, #488]	; (80018b0 <main+0x4f4>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d038      	beq.n	800173e <main+0x382>
		  v1 = (uint16_t)((( (((float)voltnum1) / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 80016cc:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <main+0x4f8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbbb 	bl	8000e50 <__aeabi_fdiv>
 80016da:	4603      	mov	r3, r0
 80016dc:	4976      	ldr	r1, [pc, #472]	; (80018b8 <main+0x4fc>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f9fa 	bl	8000ad8 <__addsf3>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4975      	ldr	r1, [pc, #468]	; (80018bc <main+0x500>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fafd 	bl	8000ce8 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	6939      	ldr	r1, [r7, #16]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fbac 	bl	8000e50 <__aeabi_fdiv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fcba 	bl	8001074 <__aeabi_f2uiz>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b6e      	ldr	r3, [pc, #440]	; (80018c0 <main+0x504>)
 8001706:	801a      	strh	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 8001708:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <main+0x504>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	486c      	ldr	r0, [pc, #432]	; (80018c4 <main+0x508>)
 8001712:	f003 fbc5 	bl	8004ea0 <HAL_DAC_SetValue>
		  correctedvoltnum1 = voltnum1;
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <main+0x4f8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6b      	ldr	r2, [pc, #428]	; (80018c8 <main+0x50c>)
 800171c:	6013      	str	r3, [r2, #0]
		  integral = 0;
 800171e:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <main+0x510>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
		  error = 0;
 8001726:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <main+0x514>)
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
		  derivative = 0;
 800172e:	4b69      	ldr	r3, [pc, #420]	; (80018d4 <main+0x518>)
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
		  first_shot = 0;
 8001736:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <main+0x4f4>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e09d      	b.n	800187a <main+0x4be>
*/



	  else {
		  error = lin_num - voltnum1;
 800173e:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <main+0x51c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5c      	ldr	r2, [pc, #368]	; (80018b4 <main+0x4f8>)
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f9c3 	bl	8000ad4 <__aeabi_fsub>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <main+0x514>)
 8001754:	601a      	str	r2, [r3, #0]
		  integral += error;
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <main+0x510>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a5d      	ldr	r2, [pc, #372]	; (80018d0 <main+0x514>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f9b9 	bl	8000ad8 <__addsf3>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b58      	ldr	r3, [pc, #352]	; (80018cc <main+0x510>)
 800176c:	601a      	str	r2, [r3, #0]
		  derivative = error - error_previous;
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <main+0x514>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <main+0x520>)
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f9ab 	bl	8000ad4 <__aeabi_fsub>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <main+0x518>)
 8001784:	601a      	str	r2, [r3, #0]
		  error_previous = error;
 8001786:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <main+0x514>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a54      	ldr	r2, [pc, #336]	; (80018dc <main+0x520>)
 800178c:	6013      	str	r3, [r2, #0]
		  correction = P * error + I * integral + D * derivative;
 800178e:	4b54      	ldr	r3, [pc, #336]	; (80018e0 <main+0x524>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <main+0x514>)
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff faa5 	bl	8000ce8 <__aeabi_fmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	461c      	mov	r4, r3
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <main+0x528>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <main+0x510>)
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fa9b 	bl	8000ce8 <__aeabi_fmul>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff f98e 	bl	8000ad8 <__addsf3>
 80017bc:	4603      	mov	r3, r0
 80017be:	461c      	mov	r4, r3
 80017c0:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <main+0x52c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <main+0x518>)
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fa8c 	bl	8000ce8 <__aeabi_fmul>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4619      	mov	r1, r3
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff f97f 	bl	8000ad8 <__addsf3>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b43      	ldr	r3, [pc, #268]	; (80018ec <main+0x530>)
 80017e0:	601a      	str	r2, [r3, #0]
		  correctedvoltnum1 = voltnum1 - correction;
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <main+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a41      	ldr	r2, [pc, #260]	; (80018ec <main+0x530>)
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff f971 	bl	8000ad4 <__aeabi_fsub>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <main+0x50c>)
 80017f8:	601a      	str	r2, [r3, #0]
		  if(correctedvoltnum1 > 12.0){
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <main+0x50c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	493c      	ldr	r1, [pc, #240]	; (80018f0 <main+0x534>)
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fc2d 	bl	8001060 <__aeabi_fcmpgt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <main+0x458>
			  correctedvoltnum1 = 12.0;
 800180c:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <main+0x50c>)
 800180e:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <main+0x534>)
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e00d      	b.n	8001830 <main+0x474>
		  }
		  else if(correctedvoltnum1 < 0.0){
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <main+0x50c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f04f 0100 	mov.w	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fc01 	bl	8001024 <__aeabi_fcmplt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <main+0x474>
			  correctedvoltnum1 = 0.0;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <main+0x50c>)
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
		  }
		  v1 = (uint16_t)((( (correctedvoltnum1 / (float)4.0) + ((float)0.446974063 / (float)4.0)) * (float)4095) / (float)vddcalc);
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <main+0x50c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb09 	bl	8000e50 <__aeabi_fdiv>
 800183e:	4603      	mov	r3, r0
 8001840:	491d      	ldr	r1, [pc, #116]	; (80018b8 <main+0x4fc>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f948 	bl	8000ad8 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	491c      	ldr	r1, [pc, #112]	; (80018bc <main+0x500>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa4b 	bl	8000ce8 <__aeabi_fmul>
 8001852:	4603      	mov	r3, r0
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fafa 	bl	8000e50 <__aeabi_fdiv>
 800185c:	4603      	mov	r3, r0
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fc08 	bl	8001074 <__aeabi_f2uiz>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <main+0x504>)
 800186a:	801a      	strh	r2, [r3, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, v1);
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <main+0x504>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <main+0x508>)
 8001876:	f003 fb13 	bl	8004ea0 <HAL_DAC_SetValue>
	  }

	  if(voltnum1 > 0.00){
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <main+0x4f8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fbec 	bl	8001060 <__aeabi_fcmpgt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <main+0x4e6>
		  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2140      	movs	r1, #64	; 0x40
 8001892:	4818      	ldr	r0, [pc, #96]	; (80018f4 <main+0x538>)
 8001894:	f004 f891 	bl	80059ba <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	2110      	movs	r1, #16
 800189c:	4816      	ldr	r0, [pc, #88]	; (80018f8 <main+0x53c>)
 800189e:	f004 f88c 	bl	80059ba <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f002 fc04 	bl	80040b0 <HAL_Delay>
  {
 80018a8:	e5a3      	b.n	80013f2 <main+0x36>
 80018aa:	bf00      	nop
 80018ac:	20000720 	.word	0x20000720
 80018b0:	20000024 	.word	0x20000024
 80018b4:	200006e8 	.word	0x200006e8
 80018b8:	3de4d9c9 	.word	0x3de4d9c9
 80018bc:	457ff000 	.word	0x457ff000
 80018c0:	20000710 	.word	0x20000710
 80018c4:	2000042c 	.word	0x2000042c
 80018c8:	200006f8 	.word	0x200006f8
 80018cc:	2000072c 	.word	0x2000072c
 80018d0:	20000724 	.word	0x20000724
 80018d4:	20000728 	.word	0x20000728
 80018d8:	20000714 	.word	0x20000714
 80018dc:	20000730 	.word	0x20000730
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000734 	.word	0x20000734
 80018f0:	41400000 	.word	0x41400000
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40020800 	.word	0x40020800

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b092      	sub	sp, #72	; 0x48
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	2234      	movs	r2, #52	; 0x34
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00c fb40 	bl	800df90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <SystemClock_Config+0x9c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <SystemClock_Config+0x9c>)
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800192e:	2303      	movs	r3, #3
 8001930:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001932:	2301      	movs	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193a:	2310      	movs	r3, #16
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800194c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800194e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4618      	mov	r0, r3
 800195a:	f006 f8ed 	bl	8007b38 <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001964:	f001 ffe4 	bl	8003930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2303      	movs	r3, #3
 800196e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800197c:	463b      	mov	r3, r7
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f006 fc09 	bl	8008198 <HAL_RCC_ClockConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800198c:	f001 ffd0 	bl	8003930 <Error_Handler>
  }
}
 8001990:	bf00      	nop
 8001992:	3748      	adds	r7, #72	; 0x48
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40007000 	.word	0x40007000

0800199c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80019ac:	4b42      	ldr	r3, [pc, #264]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019ae:	4a43      	ldr	r2, [pc, #268]	; (8001abc <MX_ADC_Init+0x120>)
 80019b0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019b8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c0:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019c6:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019ce:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 5;
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019f0:	2205      	movs	r2, #5
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <MX_ADC_Init+0x11c>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a10:	4829      	ldr	r0, [pc, #164]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a12:	f002 fb6f 	bl	80040f4 <HAL_ADC_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8001a1c:	f001 ff88 	bl	8003930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a32:	f002 fe19 	bl	8004668 <HAL_ADC_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001a3c:	f001 ff78 	bl	8003930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a4e:	f002 fe0b 	bl	8004668 <HAL_ADC_ConfigChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001a58:	f001 ff6a 	bl	8003930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a60:	2303      	movs	r3, #3
 8001a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a6a:	f002 fdfd 	bl	8004668 <HAL_ADC_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_ADC_Init+0xdc>
  {
    Error_Handler();
 8001a74:	f001 ff5c 	bl	8003930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001a86:	f002 fdef 	bl	8004668 <HAL_ADC_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_ADC_Init+0xf8>
  {
    Error_Handler();
 8001a90:	f001 ff4e 	bl	8003930 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001a94:	2311      	movs	r3, #17
 8001a96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_ADC_Init+0x11c>)
 8001aa2:	f002 fde1 	bl	8004668 <HAL_ADC_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC_Init+0x114>
  {
    Error_Handler();
 8001aac:	f001 ff40 	bl	8003930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000394 	.word	0x20000394
 8001abc:	40012400 	.word	0x40012400

08001ac0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_DAC_Init+0x60>)
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <MX_DAC_Init+0x64>)
 8001ad2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001ad4:	4812      	ldr	r0, [pc, #72]	; (8001b20 <MX_DAC_Init+0x60>)
 8001ad6:	f003 f970 	bl	8004dba <HAL_DAC_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001ae0:	f001 ff26 	bl	8003930 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	480b      	ldr	r0, [pc, #44]	; (8001b20 <MX_DAC_Init+0x60>)
 8001af4:	f003 f9f8 	bl	8004ee8 <HAL_DAC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001afe:	f001 ff17 	bl	8003930 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001b02:	463b      	mov	r3, r7
 8001b04:	2210      	movs	r2, #16
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_DAC_Init+0x60>)
 8001b0a:	f003 f9ed 	bl	8004ee8 <HAL_DAC_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001b14:	f001 ff0c 	bl	8003930 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000042c 	.word	0x2000042c
 8001b24:	40007400 	.word	0x40007400

08001b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <MX_I2C1_Init+0x54>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_I2C1_Init+0x58>)
 8001b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 156;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b40:	229c      	movs	r2, #156	; 0x9c
 8001b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_I2C1_Init+0x50>)
 8001b66:	f003 ff71 	bl	8005a4c <HAL_I2C_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b70:	f001 fede 	bl	8003930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000440 	.word	0x20000440
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	000186a0 	.word	0x000186a0

08001b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001baa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001bb8:	220a      	movs	r2, #10
 8001bba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc8:	4813      	ldr	r0, [pc, #76]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001bca:	f006 fdab 	bl	8008724 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bd4:	f001 feac 	bl	8003930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001be6:	f006 ff31 	bl	8008a4c <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bf0:	f001 fe9e 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_TIM2_Init+0x94>)
 8001c02:	f007 f903 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c0c:	f001 fe90 	bl	8003930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000494 	.word	0x20000494

08001c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	463b      	mov	r3, r7
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <MX_TIM3_Init+0x98>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32000;
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c40:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c62:	f006 fd5f 	bl	8008724 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c6c:	f001 fe60 	bl	8003930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c7e:	f006 fee5 	bl	8008a4c <HAL_TIM_ConfigClockSource>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c88:	f001 fe52 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_TIM3_Init+0x94>)
 8001c9a:	f007 f8b7 	bl	8008e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ca4:	f001 fe44 	bl	8003930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200004d4 	.word	0x200004d4
 8001cb4:	40000400 	.word	0x40000400

08001cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <MX_USART1_UART_Init+0x54>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cc4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cda:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001cde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cf4:	f007 f8e8 	bl	8008ec8 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001cfe:	f001 fe17 	bl	8003930 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000514 	.word	0x20000514
 8001d0c:	40013800 	.word	0x40013800

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_DMA_Init+0x48>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <MX_DMA_Init+0x48>)
 8001d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_DMA_Init+0x48>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	200b      	movs	r0, #11
 8001d34:	f002 fffd 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d38:	200b      	movs	r0, #11
 8001d3a:	f003 f816 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	200f      	movs	r0, #15
 8001d44:	f002 fff5 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d48:	200f      	movs	r0, #15
 8001d4a:	f003 f80e 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d72:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001d78:	f043 0320 	orr.w	r3, r3, #32
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a38      	ldr	r2, [pc, #224]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a32      	ldr	r2, [pc, #200]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <MX_GPIO_Init+0x12c>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	482d      	ldr	r0, [pc, #180]	; (8001e8c <MX_GPIO_Init+0x130>)
 8001dd8:	f003 fdef 	bl	80059ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8001de2:	482b      	ldr	r0, [pc, #172]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001de4:	f003 fde9 	bl	80059ba <HAL_GPIO_WritePin>
                          |Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Channel_Shutdown_Pin */
  GPIO_InitStruct.Pin = Channel_Shutdown_Pin;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Channel_Shutdown_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4823      	ldr	r0, [pc, #140]	; (8001e8c <MX_GPIO_Init+0x130>)
 8001e00:	f003 fb64 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Status_LED_1_Pin Status_LED_2_Pin Col_1_Pin Col_2_Pin
                           Col_3_Pin Col_4_Pin */
  GPIO_InitStruct.Pin = Status_LED_1_Pin|Status_LED_2_Pin|Col_1_Pin|Col_2_Pin
 8001e04:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001e08:	617b      	str	r3, [r7, #20]
                          |Col_3_Pin|Col_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481c      	ldr	r0, [pc, #112]	; (8001e90 <MX_GPIO_Init+0x134>)
 8001e1e:	f003 fb55 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Rot_CLK_Pin Rot_SW_Pin */
  GPIO_InitStruct.Pin = Rot_CLK_Pin|Rot_SW_Pin;
 8001e22:	2305      	movs	r3, #5
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4817      	ldr	r0, [pc, #92]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001e38:	f003 fb48 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Rot_DT_Pin */
  GPIO_InitStruct.Pin = Rot_DT_Pin;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rot_DT_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4811      	ldr	r0, [pc, #68]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001e50:	f003 fb3c 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Row_1_Pin Row_2_Pin Row_3_Pin Row_4_Pin
                           Row_5_Pin */
  GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin
 8001e54:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001e58:	617b      	str	r3, [r7, #20]
                          |Row_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <MX_GPIO_Init+0x138>)
 8001e6c:	f003 fb2e 	bl	80054cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2028      	movs	r0, #40	; 0x28
 8001e76:	f002 ff5c 	bl	8004d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e7a:	2028      	movs	r0, #40	; 0x28
 8001e7c:	f002 ff75 	bl	8004d6a <HAL_NVIC_EnableIRQ>

}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020400 	.word	0x40020400

08001e98 <ourInit>:

/* USER CODE BEGIN 4 */

void ourInit(void){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Channel_Shutdown_GPIO_Port, Channel_Shutdown_Pin, GPIO_PIN_SET);	//Ensure shutdown is enabled
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2140      	movs	r1, #64	; 0x40
 8001ea0:	4826      	ldr	r0, [pc, #152]	; (8001f3c <ourInit+0xa4>)
 8001ea2:	f003 fd8a 	bl	80059ba <HAL_GPIO_WritePin>
	/*
	 * The HAL library is dumb and tries to init the adc before the DMA which does not work
	 * if the ADC is using the DMA. This init code is placed in space reserved for CubeMx so
	 * manually reordering it will be overwritten every time we regenerate code.
	 */
	HAL_ADC_DeInit(&hadc);
 8001ea6:	4826      	ldr	r0, [pc, #152]	; (8001f40 <ourInit+0xa8>)
 8001ea8:	f002 fa6a 	bl	8004380 <HAL_ADC_DeInit>
	HAL_DMA_DeInit(&hdma_adc);
 8001eac:	4825      	ldr	r0, [pc, #148]	; (8001f44 <ourInit+0xac>)
 8001eae:	f003 f8c1 	bl	8005034 <HAL_DMA_DeInit>
	MX_DMA_Init();
 8001eb2:	f7ff ff2d 	bl	8001d10 <MX_DMA_Init>
	MX_ADC_Init();
 8001eb6:	f7ff fd71 	bl	800199c <MX_ADC_Init>

	//Actually our init now
	HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adcvalues, 5);// start the adc in dma mode
 8001eba:	2205      	movs	r2, #5
 8001ebc:	4922      	ldr	r1, [pc, #136]	; (8001f48 <ourInit+0xb0>)
 8001ebe:	4820      	ldr	r0, [pc, #128]	; (8001f40 <ourInit+0xa8>)
 8001ec0:	f002 fb32 	bl	8004528 <HAL_ADC_Start_DMA>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4821      	ldr	r0, [pc, #132]	; (8001f4c <ourInit+0xb4>)
 8001ec8:	f002 ff99 	bl	8004dfe <HAL_DAC_Start>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001ecc:	2110      	movs	r1, #16
 8001ece:	481f      	ldr	r0, [pc, #124]	; (8001f4c <ourInit+0xb4>)
 8001ed0:	f002 ff95 	bl	8004dfe <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	481c      	ldr	r0, [pc, #112]	; (8001f4c <ourInit+0xb4>)
 8001edc:	f002 ffe0 	bl	8004ea0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <ourInit+0xb4>)
 8001ee8:	f002 ffda 	bl	8004ea0 <HAL_DAC_SetValue>
	USB_EXTIinit();
 8001eec:	f000 f83e 	bl	8001f6c <USB_EXTIinit>
	//Ensure keypad columns output 0 by default
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001ef6:	4816      	ldr	r0, [pc, #88]	; (8001f50 <ourInit+0xb8>)
 8001ef8:	f003 fd5f 	bl	80059ba <HAL_GPIO_WritePin>

	//LCD Init
	lcd_psu_init();
 8001efc:	f000 f9b4 	bl	8002268 <lcd_psu_init>
	//Start display timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001f00:	4814      	ldr	r0, [pc, #80]	; (8001f54 <ourInit+0xbc>)
 8001f02:	f006 fc4f 	bl	80087a4 <HAL_TIM_Base_Start_IT>

	memset (usbbuffer, '\0', 128);  // clear the buffer
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4813      	ldr	r0, [pc, #76]	; (8001f58 <ourInit+0xc0>)
 8001f0c:	f00c f840 	bl	800df90 <memset>
	memset (txbuffer, '\0', 64);  // clear the buffer
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	2100      	movs	r1, #0
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <ourInit+0xc4>)
 8001f16:	f00c f83b 	bl	800df90 <memset>
	memset (rxbuffer, '\0', 64);  // clear the buffer
 8001f1a:	2240      	movs	r2, #64	; 0x40
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4810      	ldr	r0, [pc, #64]	; (8001f60 <ourInit+0xc8>)
 8001f20:	f00c f836 	bl	800df90 <memset>
	memset (rxbuffercpy, '\0', 64);  // clear the buffer
 8001f24:	2240      	movs	r2, #64	; 0x40
 8001f26:	2100      	movs	r1, #0
 8001f28:	480e      	ldr	r0, [pc, #56]	; (8001f64 <ourInit+0xcc>)
 8001f2a:	f00c f831 	bl	800df90 <memset>

	HAL_UART_Receive_DMA (&huart1, rxbuffer, 64);  // Receive 32 Bytes of data
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	490b      	ldr	r1, [pc, #44]	; (8001f60 <ourInit+0xc8>)
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <ourInit+0xd0>)
 8001f34:	f007 f815 	bl	8008f62 <HAL_UART_Receive_DMA>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	20000394 	.word	0x20000394
 8001f44:	200003e8 	.word	0x200003e8
 8001f48:	200006fc 	.word	0x200006fc
 8001f4c:	2000042c 	.word	0x2000042c
 8001f50:	40020800 	.word	0x40020800
 8001f54:	200004d4 	.word	0x200004d4
 8001f58:	200005a4 	.word	0x200005a4
 8001f5c:	20000624 	.word	0x20000624
 8001f60:	20000664 	.word	0x20000664
 8001f64:	200006a4 	.word	0x200006a4
 8001f68:	20000514 	.word	0x20000514

08001f6c <USB_EXTIinit>:

/* USB Section Begin ---------------------------------------------------------*/
void USB_EXTIinit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
	EXTI_ConfigTypeDef ExtiConfig;

	ExtiConfig.Line = EXTI_LINE_1;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <USB_EXTIinit+0x34>)
 8001f74:	603b      	str	r3, [r7, #0]
	ExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 8001f76:	2301      	movs	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
	ExtiConfig.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	60bb      	str	r3, [r7, #8]
	HAL_EXTI_SetConfigLine(&hexti1, &ExtiConfig);
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4619      	mov	r1, r3
 8001f82:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <USB_EXTIinit+0x38>)
 8001f84:	f003 f9e6 	bl	8005354 <HAL_EXTI_SetConfigLine>

	//The function below doesn't work and I don't know why so we just call our callback in the irqhandler
	//HAL_EXTI_RegisterCallback(&hexti1, HAL_EXTI_COMMON_CB_ID, USB_Interrupt_Callback);

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2007      	movs	r0, #7
 8001f8e:	f002 fed0 	bl	8004d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f92:	2007      	movs	r0, #7
 8001f94:	f002 fee9 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	06000001 	.word	0x06000001
 8001fa4:	2000059c 	.word	0x2000059c

08001fa8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <EXTI1_IRQHandler+0x14>)
 8001fae:	2207      	movs	r2, #7
 8001fb0:	615a      	str	r2, [r3, #20]
	USB_Interrupt_Callback();
 8001fb2:	f001 f9c7 	bl	8003344 <USB_Interrupt_Callback>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <lcd_send_cmd>:
 * https://controllerstech.com/lcd-20x4-using-i2c-with-stm32/
 * The remaining function was taken from
 * https://circuitdigest.com/microcontroller-projects/custom-characters-on-lcd-using-pic16f877a
 */
void lcd_send_cmd (char cmd)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f023 030f 	bic.w	r3, r3, #15
 8001fd0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	f043 030c 	orr.w	r3, r3, #12
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	f043 030c 	orr.w	r3, r3, #12
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001ff6:	7bbb      	ldrb	r3, [r7, #14]
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002000:	f107 0208 	add.w	r2, r7, #8
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2304      	movs	r3, #4
 800200a:	214e      	movs	r1, #78	; 0x4e
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <lcd_send_cmd+0x5c>)
 800200e:	f003 fe61 	bl	8005cd4 <HAL_I2C_Master_Transmit>
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000440 	.word	0x20000440

08002020 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f023 030f 	bic.w	r3, r3, #15
 8002030:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f043 030d 	orr.w	r3, r3, #13
 800203e:	b2db      	uxtb	r3, r3
 8002040:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	f043 0309 	orr.w	r3, r3, #9
 8002048:	b2db      	uxtb	r3, r3
 800204a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	f043 030d 	orr.w	r3, r3, #13
 8002052:	b2db      	uxtb	r3, r3
 8002054:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	f043 0309 	orr.w	r3, r3, #9
 800205c:	b2db      	uxtb	r3, r3
 800205e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002060:	f107 0208 	add.w	r2, r7, #8
 8002064:	2364      	movs	r3, #100	; 0x64
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2304      	movs	r3, #4
 800206a:	214e      	movs	r1, #78	; 0x4e
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <lcd_send_data+0x5c>)
 800206e:	f003 fe31 	bl	8005cd4 <HAL_I2C_Master_Transmit>
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000440 	.word	0x20000440

08002080 <LCD_CursorBlinkOnOff>:

void LCD_CursorBlinkOnOff( uint8_t cursor_status, uint8_t blink_status){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]

	if( blink_status == 1 && cursor_status == 1){
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d106      	bne.n	80020a4 <LCD_CursorBlinkOnOff+0x24>
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d103      	bne.n	80020a4 <LCD_CursorBlinkOnOff+0x24>
		lcd_send_cmd(0x0F);
 800209c:	200f      	movs	r0, #15
 800209e:	f7ff ff8f 	bl	8001fc0 <lcd_send_cmd>
 80020a2:	e017      	b.n	80020d4 <LCD_CursorBlinkOnOff+0x54>
	}
	else if(blink_status == 0 && cursor_status == 1){
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <LCD_CursorBlinkOnOff+0x38>
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d103      	bne.n	80020b8 <LCD_CursorBlinkOnOff+0x38>
		lcd_send_cmd(0x0E);
 80020b0:	200e      	movs	r0, #14
 80020b2:	f7ff ff85 	bl	8001fc0 <lcd_send_cmd>
 80020b6:	e00d      	b.n	80020d4 <LCD_CursorBlinkOnOff+0x54>
	}
	else if(blink_status == 1 && cursor_status == 0){
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <LCD_CursorBlinkOnOff+0x4c>
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <LCD_CursorBlinkOnOff+0x4c>
		lcd_send_cmd(0x0D);
 80020c4:	200d      	movs	r0, #13
 80020c6:	f7ff ff7b 	bl	8001fc0 <lcd_send_cmd>
 80020ca:	e003      	b.n	80020d4 <LCD_CursorBlinkOnOff+0x54>
	}
	else {
		lcd_send_cmd(0x0C);
 80020cc:	200c      	movs	r0, #12
 80020ce:	f7ff ff77 	bl	8001fc0 <lcd_send_cmd>
	}
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <lcd_clear>:
		lcd_send_cmd(0x0C);
	}
}

void lcd_clear (void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff ff6c 	bl	8001fc0 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	e005      	b.n	80020fa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80020ee:	2020      	movs	r0, #32
 80020f0:	f7ff ff96 	bl	8002020 <lcd_send_data>
	for (int i=0; i<100; i++)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b63      	cmp	r3, #99	; 0x63
 80020fe:	ddf6      	ble.n	80020ee <lcd_clear+0x12>
	}
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    switch (row)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d81b      	bhi.n	8002154 <lcd_put_cur+0x48>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <lcd_put_cur+0x18>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213d 	.word	0x0800213d
 800212c:	08002145 	.word	0x08002145
 8002130:	0800214d 	.word	0x0800214d
    {
		case 0:
            col += 0x80;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	3380      	adds	r3, #128	; 0x80
 8002138:	603b      	str	r3, [r7, #0]
            break;
 800213a:	e00b      	b.n	8002154 <lcd_put_cur+0x48>
        case 1:
            col += 0xC0;  //C0
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	33c0      	adds	r3, #192	; 0xc0
 8002140:	603b      	str	r3, [r7, #0]
            break;
 8002142:	e007      	b.n	8002154 <lcd_put_cur+0x48>
        case 2:
            col += 0x94;	//0x80|0x14 for row 3 col 2
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	3394      	adds	r3, #148	; 0x94
 8002148:	603b      	str	r3, [r7, #0]
            break;
 800214a:	e003      	b.n	8002154 <lcd_put_cur+0x48>
        case 3:
            col += 0xD4;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	33d4      	adds	r3, #212	; 0xd4
 8002150:	603b      	str	r3, [r7, #0]
            break;
 8002152:	bf00      	nop
    }

    lcd_send_cmd (col);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff31 	bl	8001fc0 <lcd_send_cmd>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <lcd_init>:


void lcd_init (void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	uint8_t i=0;
 800216e:	2300      	movs	r3, #0
 8002170:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8002172:	2064      	movs	r0, #100	; 0x64
 8002174:	f001 ff9c 	bl	80040b0 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 8002178:	2300      	movs	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	e008      	b.n	8002190 <lcd_init+0x28>
		lcd_send_cmd(0x03);
 800217e:	2003      	movs	r0, #3
 8002180:	f7ff ff1e 	bl	8001fc0 <lcd_send_cmd>
		HAL_Delay(45);
 8002184:	202d      	movs	r0, #45	; 0x2d
 8002186:	f001 ff93 	bl	80040b0 <HAL_Delay>
	for(i=0;i<3;i++){//sending 3 times: select 4-bit mode
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	3301      	adds	r3, #1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d9f3      	bls.n	800217e <lcd_init+0x16>
	}
	lcd_send_cmd (0x02);
 8002196:	2002      	movs	r0, #2
 8002198:	f7ff ff12 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(100);
 800219c:	2064      	movs	r0, #100	; 0x64
 800219e:	f001 ff87 	bl	80040b0 <HAL_Delay>
	lcd_send_cmd (0x28);
 80021a2:	2028      	movs	r0, #40	; 0x28
 80021a4:	f7ff ff0c 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f001 ff81 	bl	80040b0 <HAL_Delay>
	lcd_send_cmd (0x0c);
 80021ae:	200c      	movs	r0, #12
 80021b0:	f7ff ff06 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f001 ff7b 	bl	80040b0 <HAL_Delay>
	lcd_send_cmd (0x80);
 80021ba:	2080      	movs	r0, #128	; 0x80
 80021bc:	f7ff ff00 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f001 ff75 	bl	80040b0 <HAL_Delay>
	lcd_createChar();
 80021c6:	f000 f81b 	bl	8002200 <lcd_createChar>
	lcd_clear();
 80021ca:	f7ff ff87 	bl	80020dc <lcd_clear>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80021de:	e006      	b.n	80021ee <lcd_send_string+0x18>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff19 	bl	8002020 <lcd_send_data>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f4      	bne.n	80021e0 <lcd_send_string+0xa>
}
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <lcd_createChar>:
void lcd_createChar(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
	//*** Load custom char into the CGROM***//////
	lcd_send_cmd(0x40);   // Set CGRAM Address
 8002206:	2040      	movs	r0, #64	; 0x40
 8002208:	f7ff feda 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 800220c:	2001      	movs	r0, #1
 800220e:	f001 ff4f 	bl	80040b0 <HAL_Delay>
	lcd_send_cmd(0x00);   // .. set CGRAM Address
 8002212:	2000      	movs	r0, #0
 8002214:	f7ff fed4 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 8002218:	2001      	movs	r0, #1
 800221a:	f001 ff49 	bl	80040b0 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	e00c      	b.n	800223e <lcd_createChar+0x3e>
		lcd_send_data(customChar[i]);
 8002224:	4a0f      	ldr	r2, [pc, #60]	; (8002264 <lcd_createChar+0x64>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fef7 	bl	8002020 <lcd_send_data>
		HAL_Delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f001 ff3c 	bl	80040b0 <HAL_Delay>
	for(int i = 0; i <= 63 ; i++){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b3f      	cmp	r3, #63	; 0x3f
 8002242:	ddef      	ble.n	8002224 <lcd_createChar+0x24>
	}
	lcd_send_cmd(0);      // Return to Home
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff febb 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f001 ff30 	bl	80040b0 <HAL_Delay>
	lcd_send_cmd(2);      // .. return to Home
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff feb5 	bl	8001fc0 <lcd_send_cmd>
	HAL_Delay(1);
 8002256:	2001      	movs	r0, #1
 8002258:	f001 ff2a 	bl	80040b0 <HAL_Delay>
	//*** Loading custom char complete***//////
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	08010e64 	.word	0x08010e64

08002268 <lcd_psu_init>:

void lcd_psu_init(void){
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	lcd_init();
 800226c:	f7ff ff7c 	bl	8002168 <lcd_init>

	lcd_put_cur(0, 0);
 8002270:	2100      	movs	r1, #0
 8002272:	2000      	movs	r0, #0
 8002274:	f7ff ff4a 	bl	800210c <lcd_put_cur>
	lcd_send_string("V1:0.00V ");
 8002278:	4824      	ldr	r0, [pc, #144]	; (800230c <lcd_psu_init+0xa4>)
 800227a:	f7ff ffac 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)1);//Custom Char 1
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff fece 	bl	8002020 <lcd_send_data>
	lcd_send_string("V1");
 8002284:	4822      	ldr	r0, [pc, #136]	; (8002310 <lcd_psu_init+0xa8>)
 8002286:	f7ff ffa6 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)0);//Custom Char 0
 800228a:	2000      	movs	r0, #0
 800228c:	f7ff fec8 	bl	8002020 <lcd_send_data>
	lcd_send_string(":0.00V");
 8002290:	4820      	ldr	r0, [pc, #128]	; (8002314 <lcd_psu_init+0xac>)
 8002292:	f7ff ffa0 	bl	80021d6 <lcd_send_string>

	lcd_put_cur(1, 0);
 8002296:	2100      	movs	r1, #0
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff ff37 	bl	800210c <lcd_put_cur>
	lcd_send_string("A1:0.00A ");
 800229e:	481e      	ldr	r0, [pc, #120]	; (8002318 <lcd_psu_init+0xb0>)
 80022a0:	f7ff ff99 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)1);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f7ff febb 	bl	8002020 <lcd_send_data>
	lcd_send_string("A1");
 80022aa:	481c      	ldr	r0, [pc, #112]	; (800231c <lcd_psu_init+0xb4>)
 80022ac:	f7ff ff93 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)0);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff feb5 	bl	8002020 <lcd_send_data>
	lcd_send_string(":0.00A");
 80022b6:	481a      	ldr	r0, [pc, #104]	; (8002320 <lcd_psu_init+0xb8>)
 80022b8:	f7ff ff8d 	bl	80021d6 <lcd_send_string>

	lcd_put_cur(2, 0);
 80022bc:	2100      	movs	r1, #0
 80022be:	2002      	movs	r0, #2
 80022c0:	f7ff ff24 	bl	800210c <lcd_put_cur>
	lcd_send_string("V2:0.00V ");
 80022c4:	4817      	ldr	r0, [pc, #92]	; (8002324 <lcd_psu_init+0xbc>)
 80022c6:	f7ff ff86 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fea8 	bl	8002020 <lcd_send_data>
	lcd_send_string("V2");
 80022d0:	4815      	ldr	r0, [pc, #84]	; (8002328 <lcd_psu_init+0xc0>)
 80022d2:	f7ff ff80 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)0);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff fea2 	bl	8002020 <lcd_send_data>
	lcd_send_string(":0.00V");
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <lcd_psu_init+0xac>)
 80022de:	f7ff ff7a 	bl	80021d6 <lcd_send_string>

	lcd_put_cur(3, 0);
 80022e2:	2100      	movs	r1, #0
 80022e4:	2003      	movs	r0, #3
 80022e6:	f7ff ff11 	bl	800210c <lcd_put_cur>
	lcd_send_string("A2:0.00A ");
 80022ea:	4810      	ldr	r0, [pc, #64]	; (800232c <lcd_psu_init+0xc4>)
 80022ec:	f7ff ff73 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)1);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff fe95 	bl	8002020 <lcd_send_data>
	lcd_send_string("A2");
 80022f6:	480e      	ldr	r0, [pc, #56]	; (8002330 <lcd_psu_init+0xc8>)
 80022f8:	f7ff ff6d 	bl	80021d6 <lcd_send_string>
	lcd_send_data((uint8_t)0);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff fe8f 	bl	8002020 <lcd_send_data>
	lcd_send_string(":0.00A");
 8002302:	4807      	ldr	r0, [pc, #28]	; (8002320 <lcd_psu_init+0xb8>)
 8002304:	f7ff ff67 	bl	80021d6 <lcd_send_string>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	08010d98 	.word	0x08010d98
 8002310:	08010da4 	.word	0x08010da4
 8002314:	08010da8 	.word	0x08010da8
 8002318:	08010db0 	.word	0x08010db0
 800231c:	08010dbc 	.word	0x08010dbc
 8002320:	08010dc0 	.word	0x08010dc0
 8002324:	08010dc8 	.word	0x08010dc8
 8002328:	08010dd4 	.word	0x08010dd4
 800232c:	08010dd8 	.word	0x08010dd8
 8002330:	08010de4 	.word	0x08010de4

08002334 <lcd_psu_update>:

void lcd_psu_update(void){
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	LCD_CursorBlinkOnOff(0,0);
 8002338:	2100      	movs	r1, #0
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff fea0 	bl	8002080 <LCD_CursorBlinkOnOff>
	if(kpenum == WAIT){
 8002340:	4b7d      	ldr	r3, [pc, #500]	; (8002538 <lcd_psu_update+0x204>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d12a      	bne.n	800239e <lcd_psu_update+0x6a>
		lcd_update_voltage(1,voltnum1);
 8002348:	4b7c      	ldr	r3, [pc, #496]	; (800253c <lcd_psu_update+0x208>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
 800234e:	2001      	movs	r0, #1
 8002350:	f000 f9e6 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum1);
 8002354:	4b7a      	ldr	r3, [pc, #488]	; (8002540 <lcd_psu_update+0x20c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	2001      	movs	r0, #1
 800235c:	f000 fa58 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num);
 8002360:	4b78      	ldr	r3, [pc, #480]	; (8002544 <lcd_psu_update+0x210>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	2002      	movs	r0, #2
 8002368:	f000 f9da 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num);
 800236c:	4b76      	ldr	r3, [pc, #472]	; (8002548 <lcd_psu_update+0x214>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	2002      	movs	r0, #2
 8002374:	f000 fa4c 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum2);
 8002378:	4b74      	ldr	r3, [pc, #464]	; (800254c <lcd_psu_update+0x218>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	2003      	movs	r0, #3
 8002380:	f000 f9ce 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum2);
 8002384:	4b72      	ldr	r3, [pc, #456]	; (8002550 <lcd_psu_update+0x21c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	2003      	movs	r0, #3
 800238c:	f000 fa40 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(4,swi_num);
 8002390:	4b70      	ldr	r3, [pc, #448]	; (8002554 <lcd_psu_update+0x220>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	2004      	movs	r0, #4
 8002398:	f000 f9c2 	bl	8002720 <lcd_update_voltage>
		}
		if(keypadarr[4] != 'z'){
			lcd_send_data(keypadarr[4]);
		}
	}
}
 800239c:	e1a9      	b.n	80026f2 <lcd_psu_update+0x3be>
	else if(kpenum == V1){
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <lcd_psu_update+0x204>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d161      	bne.n	800246a <lcd_psu_update+0x136>
		lcd_update_amperage(1,ampnum1);
 80023a6:	4b66      	ldr	r3, [pc, #408]	; (8002540 <lcd_psu_update+0x20c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 fa2f 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num);
 80023b2:	4b64      	ldr	r3, [pc, #400]	; (8002544 <lcd_psu_update+0x210>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	2002      	movs	r0, #2
 80023ba:	f000 f9b1 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num);
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <lcd_psu_update+0x214>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	2002      	movs	r0, #2
 80023c6:	f000 fa23 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum2);
 80023ca:	4b60      	ldr	r3, [pc, #384]	; (800254c <lcd_psu_update+0x218>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f9a5 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum2);
 80023d6:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <lcd_psu_update+0x21c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	2003      	movs	r0, #3
 80023de:	f000 fa17 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(4,swi_num);
 80023e2:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <lcd_psu_update+0x220>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	2004      	movs	r0, #4
 80023ea:	f000 f999 	bl	8002720 <lcd_update_voltage>
		lcd_put_cur(0,3);
 80023ee:	2103      	movs	r1, #3
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff fe8b 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");
 80023f6:	4858      	ldr	r0, [pc, #352]	; (8002558 <lcd_psu_update+0x224>)
 80023f8:	f7ff feed 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(0,3);
 80023fc:	2103      	movs	r1, #3
 80023fe:	2000      	movs	r0, #0
 8002400:	f7ff fe84 	bl	800210c <lcd_put_cur>
		LCD_CursorBlinkOnOff(1,1);
 8002404:	2101      	movs	r1, #1
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff fe3a 	bl	8002080 <LCD_CursorBlinkOnOff>
		if(keypadarr[0] != 'z'){
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <lcd_psu_update+0x228>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b7a      	cmp	r3, #122	; 0x7a
 8002412:	d004      	beq.n	800241e <lcd_psu_update+0xea>
			lcd_send_data(keypadarr[0]);
 8002414:	4b51      	ldr	r3, [pc, #324]	; (800255c <lcd_psu_update+0x228>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe01 	bl	8002020 <lcd_send_data>
		if(keypadarr[1] != 'z'){
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <lcd_psu_update+0x228>)
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	2b7a      	cmp	r3, #122	; 0x7a
 8002424:	d004      	beq.n	8002430 <lcd_psu_update+0xfc>
			lcd_send_data(keypadarr[1]);
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <lcd_psu_update+0x228>)
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fdf8 	bl	8002020 <lcd_send_data>
		if(keypadarr[2] != 'z'){
 8002430:	4b4a      	ldr	r3, [pc, #296]	; (800255c <lcd_psu_update+0x228>)
 8002432:	789b      	ldrb	r3, [r3, #2]
 8002434:	2b7a      	cmp	r3, #122	; 0x7a
 8002436:	d004      	beq.n	8002442 <lcd_psu_update+0x10e>
			lcd_send_data(keypadarr[2]);
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <lcd_psu_update+0x228>)
 800243a:	789b      	ldrb	r3, [r3, #2]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fdef 	bl	8002020 <lcd_send_data>
		if(keypadarr[3] != 'z'){
 8002442:	4b46      	ldr	r3, [pc, #280]	; (800255c <lcd_psu_update+0x228>)
 8002444:	78db      	ldrb	r3, [r3, #3]
 8002446:	2b7a      	cmp	r3, #122	; 0x7a
 8002448:	d004      	beq.n	8002454 <lcd_psu_update+0x120>
			lcd_send_data(keypadarr[3]);
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <lcd_psu_update+0x228>)
 800244c:	78db      	ldrb	r3, [r3, #3]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fde6 	bl	8002020 <lcd_send_data>
		if(keypadarr[4] != 'z'){
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <lcd_psu_update+0x228>)
 8002456:	791b      	ldrb	r3, [r3, #4]
 8002458:	2b7a      	cmp	r3, #122	; 0x7a
 800245a:	f000 814a 	beq.w	80026f2 <lcd_psu_update+0x3be>
			lcd_send_data(keypadarr[4]);
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <lcd_psu_update+0x228>)
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fddc 	bl	8002020 <lcd_send_data>
}
 8002468:	e143      	b.n	80026f2 <lcd_psu_update+0x3be>
	else if(kpenum == V2){
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <lcd_psu_update+0x204>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d176      	bne.n	8002560 <lcd_psu_update+0x22c>
		lcd_update_voltage(1,voltnum1);
 8002472:	4b32      	ldr	r3, [pc, #200]	; (800253c <lcd_psu_update+0x208>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	2001      	movs	r0, #1
 800247a:	f000 f951 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum1);
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <lcd_psu_update+0x20c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4619      	mov	r1, r3
 8002484:	2001      	movs	r0, #1
 8002486:	f000 f9c3 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num);
 800248a:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <lcd_psu_update+0x210>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	2002      	movs	r0, #2
 8002492:	f000 f945 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num);
 8002496:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <lcd_psu_update+0x214>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	2002      	movs	r0, #2
 800249e:	f000 f9b7 	bl	8002810 <lcd_update_amperage>
		lcd_update_amperage(3,ampnum2);
 80024a2:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <lcd_psu_update+0x21c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f9b1 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(4,swi_num);
 80024ae:	4b29      	ldr	r3, [pc, #164]	; (8002554 <lcd_psu_update+0x220>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2004      	movs	r0, #4
 80024b6:	f000 f933 	bl	8002720 <lcd_update_voltage>
		lcd_put_cur(2,3);
 80024ba:	2103      	movs	r1, #3
 80024bc:	2002      	movs	r0, #2
 80024be:	f7ff fe25 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");
 80024c2:	4825      	ldr	r0, [pc, #148]	; (8002558 <lcd_psu_update+0x224>)
 80024c4:	f7ff fe87 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(2,3);
 80024c8:	2103      	movs	r1, #3
 80024ca:	2002      	movs	r0, #2
 80024cc:	f7ff fe1e 	bl	800210c <lcd_put_cur>
		LCD_CursorBlinkOnOff(1,1);
 80024d0:	2101      	movs	r1, #1
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff fdd4 	bl	8002080 <LCD_CursorBlinkOnOff>
		if(keypadarr[0] != 'z'){
 80024d8:	4b20      	ldr	r3, [pc, #128]	; (800255c <lcd_psu_update+0x228>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b7a      	cmp	r3, #122	; 0x7a
 80024de:	d004      	beq.n	80024ea <lcd_psu_update+0x1b6>
			lcd_send_data(keypadarr[0]);
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <lcd_psu_update+0x228>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fd9b 	bl	8002020 <lcd_send_data>
		if(keypadarr[1] != 'z'){
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <lcd_psu_update+0x228>)
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	2b7a      	cmp	r3, #122	; 0x7a
 80024f0:	d004      	beq.n	80024fc <lcd_psu_update+0x1c8>
			lcd_send_data(keypadarr[1]);
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <lcd_psu_update+0x228>)
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fd92 	bl	8002020 <lcd_send_data>
		if(keypadarr[2] != 'z'){
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <lcd_psu_update+0x228>)
 80024fe:	789b      	ldrb	r3, [r3, #2]
 8002500:	2b7a      	cmp	r3, #122	; 0x7a
 8002502:	d004      	beq.n	800250e <lcd_psu_update+0x1da>
			lcd_send_data(keypadarr[2]);
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <lcd_psu_update+0x228>)
 8002506:	789b      	ldrb	r3, [r3, #2]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fd89 	bl	8002020 <lcd_send_data>
		if(keypadarr[3] != 'z'){
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <lcd_psu_update+0x228>)
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	2b7a      	cmp	r3, #122	; 0x7a
 8002514:	d004      	beq.n	8002520 <lcd_psu_update+0x1ec>
			lcd_send_data(keypadarr[3]);
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <lcd_psu_update+0x228>)
 8002518:	78db      	ldrb	r3, [r3, #3]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd80 	bl	8002020 <lcd_send_data>
		if(keypadarr[4] != 'z'){
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <lcd_psu_update+0x228>)
 8002522:	791b      	ldrb	r3, [r3, #4]
 8002524:	2b7a      	cmp	r3, #122	; 0x7a
 8002526:	f000 80e4 	beq.w	80026f2 <lcd_psu_update+0x3be>
			lcd_send_data(keypadarr[4]);
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <lcd_psu_update+0x228>)
 800252c:	791b      	ldrb	r3, [r3, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fd76 	bl	8002020 <lcd_send_data>
}
 8002534:	e0dd      	b.n	80026f2 <lcd_psu_update+0x3be>
 8002536:	bf00      	nop
 8002538:	200006e6 	.word	0x200006e6
 800253c:	200006e8 	.word	0x200006e8
 8002540:	200006ec 	.word	0x200006ec
 8002544:	20000714 	.word	0x20000714
 8002548:	20000718 	.word	0x20000718
 800254c:	200006f0 	.word	0x200006f0
 8002550:	200006f4 	.word	0x200006f4
 8002554:	20000720 	.word	0x20000720
 8002558:	08010de8 	.word	0x08010de8
 800255c:	20000018 	.word	0x20000018
	else if(kpenum == A1){
 8002560:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <lcd_psu_update+0x3c4>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d160      	bne.n	800262a <lcd_psu_update+0x2f6>
		lcd_update_voltage(1,voltnum1);
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <lcd_psu_update+0x3c8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	2001      	movs	r0, #1
 8002570:	f000 f8d6 	bl	8002720 <lcd_update_voltage>
		lcd_update_voltage(2,lin_num);
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <lcd_psu_update+0x3cc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	2002      	movs	r0, #2
 800257c:	f000 f8d0 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num);
 8002580:	4b60      	ldr	r3, [pc, #384]	; (8002704 <lcd_psu_update+0x3d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	2002      	movs	r0, #2
 8002588:	f000 f942 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum2);
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <lcd_psu_update+0x3d4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	2003      	movs	r0, #3
 8002594:	f000 f8c4 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(3,ampnum2);
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <lcd_psu_update+0x3d8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	2003      	movs	r0, #3
 80025a0:	f000 f936 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(4,swi_num);
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <lcd_psu_update+0x3dc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	2004      	movs	r0, #4
 80025ac:	f000 f8b8 	bl	8002720 <lcd_update_voltage>
		lcd_put_cur(1,3);
 80025b0:	2103      	movs	r1, #3
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff fdaa 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");
 80025b8:	4856      	ldr	r0, [pc, #344]	; (8002714 <lcd_psu_update+0x3e0>)
 80025ba:	f7ff fe0c 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(1,3);
 80025be:	2103      	movs	r1, #3
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff fda3 	bl	800210c <lcd_put_cur>
		LCD_CursorBlinkOnOff(1,1);
 80025c6:	2101      	movs	r1, #1
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff fd59 	bl	8002080 <LCD_CursorBlinkOnOff>
		if(keypadarr[0] != 'z'){
 80025ce:	4b52      	ldr	r3, [pc, #328]	; (8002718 <lcd_psu_update+0x3e4>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b7a      	cmp	r3, #122	; 0x7a
 80025d4:	d004      	beq.n	80025e0 <lcd_psu_update+0x2ac>
			lcd_send_data(keypadarr[0]);
 80025d6:	4b50      	ldr	r3, [pc, #320]	; (8002718 <lcd_psu_update+0x3e4>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd20 	bl	8002020 <lcd_send_data>
		if(keypadarr[1] != 'z'){
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <lcd_psu_update+0x3e4>)
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b7a      	cmp	r3, #122	; 0x7a
 80025e6:	d004      	beq.n	80025f2 <lcd_psu_update+0x2be>
			lcd_send_data(keypadarr[1]);
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <lcd_psu_update+0x3e4>)
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fd17 	bl	8002020 <lcd_send_data>
		if(keypadarr[2] != 'z'){
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <lcd_psu_update+0x3e4>)
 80025f4:	789b      	ldrb	r3, [r3, #2]
 80025f6:	2b7a      	cmp	r3, #122	; 0x7a
 80025f8:	d004      	beq.n	8002604 <lcd_psu_update+0x2d0>
			lcd_send_data(keypadarr[2]);
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <lcd_psu_update+0x3e4>)
 80025fc:	789b      	ldrb	r3, [r3, #2]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fd0e 	bl	8002020 <lcd_send_data>
		if(keypadarr[3] != 'z'){
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <lcd_psu_update+0x3e4>)
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	2b7a      	cmp	r3, #122	; 0x7a
 800260a:	d004      	beq.n	8002616 <lcd_psu_update+0x2e2>
			lcd_send_data(keypadarr[3]);
 800260c:	4b42      	ldr	r3, [pc, #264]	; (8002718 <lcd_psu_update+0x3e4>)
 800260e:	78db      	ldrb	r3, [r3, #3]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fd05 	bl	8002020 <lcd_send_data>
		if(keypadarr[4] != 'z'){
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <lcd_psu_update+0x3e4>)
 8002618:	791b      	ldrb	r3, [r3, #4]
 800261a:	2b7a      	cmp	r3, #122	; 0x7a
 800261c:	d069      	beq.n	80026f2 <lcd_psu_update+0x3be>
			lcd_send_data(keypadarr[4]);
 800261e:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <lcd_psu_update+0x3e4>)
 8002620:	791b      	ldrb	r3, [r3, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fcfc 	bl	8002020 <lcd_send_data>
}
 8002628:	e063      	b.n	80026f2 <lcd_psu_update+0x3be>
	else if(kpenum == A2){
 800262a:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <lcd_psu_update+0x3c4>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d15f      	bne.n	80026f2 <lcd_psu_update+0x3be>
		lcd_update_voltage(1,voltnum1);
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <lcd_psu_update+0x3c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	2001      	movs	r0, #1
 800263a:	f000 f871 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(1,ampnum1);
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <lcd_psu_update+0x3e8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	2001      	movs	r0, #1
 8002646:	f000 f8e3 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(2,lin_num);
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <lcd_psu_update+0x3cc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	2002      	movs	r0, #2
 8002652:	f000 f865 	bl	8002720 <lcd_update_voltage>
		lcd_update_amperage(2,cur_num);
 8002656:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <lcd_psu_update+0x3d0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	2002      	movs	r0, #2
 800265e:	f000 f8d7 	bl	8002810 <lcd_update_amperage>
		lcd_update_voltage(3,voltnum2);
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <lcd_psu_update+0x3d4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	2003      	movs	r0, #3
 800266a:	f000 f859 	bl	8002720 <lcd_update_voltage>
		lcd_update_voltage(4,swi_num);
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <lcd_psu_update+0x3dc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	2004      	movs	r0, #4
 8002676:	f000 f853 	bl	8002720 <lcd_update_voltage>
		lcd_put_cur(3,3);
 800267a:	2103      	movs	r1, #3
 800267c:	2003      	movs	r0, #3
 800267e:	f7ff fd45 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");
 8002682:	4824      	ldr	r0, [pc, #144]	; (8002714 <lcd_psu_update+0x3e0>)
 8002684:	f7ff fda7 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(3,3);
 8002688:	2103      	movs	r1, #3
 800268a:	2003      	movs	r0, #3
 800268c:	f7ff fd3e 	bl	800210c <lcd_put_cur>
		LCD_CursorBlinkOnOff(1,1);
 8002690:	2101      	movs	r1, #1
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff fcf4 	bl	8002080 <LCD_CursorBlinkOnOff>
		if(keypadarr[0] != 'z'){
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <lcd_psu_update+0x3e4>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b7a      	cmp	r3, #122	; 0x7a
 800269e:	d004      	beq.n	80026aa <lcd_psu_update+0x376>
			lcd_send_data(keypadarr[0]);
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <lcd_psu_update+0x3e4>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fcbb 	bl	8002020 <lcd_send_data>
		if(keypadarr[1] != 'z'){
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <lcd_psu_update+0x3e4>)
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b7a      	cmp	r3, #122	; 0x7a
 80026b0:	d004      	beq.n	80026bc <lcd_psu_update+0x388>
			lcd_send_data(keypadarr[1]);
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <lcd_psu_update+0x3e4>)
 80026b4:	785b      	ldrb	r3, [r3, #1]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fcb2 	bl	8002020 <lcd_send_data>
		if(keypadarr[2] != 'z'){
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <lcd_psu_update+0x3e4>)
 80026be:	789b      	ldrb	r3, [r3, #2]
 80026c0:	2b7a      	cmp	r3, #122	; 0x7a
 80026c2:	d004      	beq.n	80026ce <lcd_psu_update+0x39a>
			lcd_send_data(keypadarr[2]);
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <lcd_psu_update+0x3e4>)
 80026c6:	789b      	ldrb	r3, [r3, #2]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fca9 	bl	8002020 <lcd_send_data>
		if(keypadarr[3] != 'z'){
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <lcd_psu_update+0x3e4>)
 80026d0:	78db      	ldrb	r3, [r3, #3]
 80026d2:	2b7a      	cmp	r3, #122	; 0x7a
 80026d4:	d004      	beq.n	80026e0 <lcd_psu_update+0x3ac>
			lcd_send_data(keypadarr[3]);
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <lcd_psu_update+0x3e4>)
 80026d8:	78db      	ldrb	r3, [r3, #3]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fca0 	bl	8002020 <lcd_send_data>
		if(keypadarr[4] != 'z'){
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <lcd_psu_update+0x3e4>)
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	2b7a      	cmp	r3, #122	; 0x7a
 80026e6:	d004      	beq.n	80026f2 <lcd_psu_update+0x3be>
			lcd_send_data(keypadarr[4]);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <lcd_psu_update+0x3e4>)
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fc97 	bl	8002020 <lcd_send_data>
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200006e6 	.word	0x200006e6
 80026fc:	200006e8 	.word	0x200006e8
 8002700:	20000714 	.word	0x20000714
 8002704:	20000718 	.word	0x20000718
 8002708:	200006f0 	.word	0x200006f0
 800270c:	200006f4 	.word	0x200006f4
 8002710:	20000720 	.word	0x20000720
 8002714:	08010de8 	.word	0x08010de8
 8002718:	20000018 	.word	0x20000018
 800271c:	200006ec 	.word	0x200006ec

08002720 <lcd_update_voltage>:

/* LCD Section End -----------------------------------------------------------*/

/* Keypad Section Begin ------------------------------------------------------*/
void lcd_update_voltage(uint8_t channel, float num){
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af02      	add	r7, sp, #8
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
	char kpbuff[8];
	snprintf(kpbuff, 6, "%.2f", num);
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f7fd fe9d 	bl	800046c <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	f107 0008 	add.w	r0, r7, #8
 800273a:	e9cd 2300 	strd	r2, r3, [sp]
 800273e:	4a31      	ldr	r2, [pc, #196]	; (8002804 <lcd_update_voltage+0xe4>)
 8002740:	2106      	movs	r1, #6
 8002742:	f00c f88d 	bl	800e860 <sniprintf>
	//V1 Set
	if(channel == 1){
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d113      	bne.n	8002774 <lcd_update_voltage+0x54>
		lcd_put_cur(0,3);
 800274c:	2103      	movs	r1, #3
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff fcdc 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 8002754:	482c      	ldr	r0, [pc, #176]	; (8002808 <lcd_update_voltage+0xe8>)
 8002756:	f7ff fd3e 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(0,3);
 800275a:	2103      	movs	r1, #3
 800275c:	2000      	movs	r0, #0
 800275e:	f7ff fcd5 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fd35 	bl	80021d6 <lcd_send_string>
		lcd_send_string("V");
 800276c:	4827      	ldr	r0, [pc, #156]	; (800280c <lcd_update_voltage+0xec>)
 800276e:	f7ff fd32 	bl	80021d6 <lcd_send_string>
		lcd_send_string("V");
	}
	else{
		//Error
	}
}
 8002772:	e043      	b.n	80027fc <lcd_update_voltage+0xdc>
	else if(channel == 2){
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d113      	bne.n	80027a2 <lcd_update_voltage+0x82>
		lcd_put_cur(0,14);
 800277a:	210e      	movs	r1, #14
 800277c:	2000      	movs	r0, #0
 800277e:	f7ff fcc5 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 8002782:	4821      	ldr	r0, [pc, #132]	; (8002808 <lcd_update_voltage+0xe8>)
 8002784:	f7ff fd27 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(0,14);
 8002788:	210e      	movs	r1, #14
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fcbe 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fd1e 	bl	80021d6 <lcd_send_string>
		lcd_send_string("V");
 800279a:	481c      	ldr	r0, [pc, #112]	; (800280c <lcd_update_voltage+0xec>)
 800279c:	f7ff fd1b 	bl	80021d6 <lcd_send_string>
}
 80027a0:	e02c      	b.n	80027fc <lcd_update_voltage+0xdc>
	else if(channel == 3){
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d113      	bne.n	80027d0 <lcd_update_voltage+0xb0>
		lcd_put_cur(2,3);
 80027a8:	2103      	movs	r1, #3
 80027aa:	2002      	movs	r0, #2
 80027ac:	f7ff fcae 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 80027b0:	4815      	ldr	r0, [pc, #84]	; (8002808 <lcd_update_voltage+0xe8>)
 80027b2:	f7ff fd10 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(2,3);
 80027b6:	2103      	movs	r1, #3
 80027b8:	2002      	movs	r0, #2
 80027ba:	f7ff fca7 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 80027be:	f107 0308 	add.w	r3, r7, #8
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fd07 	bl	80021d6 <lcd_send_string>
		lcd_send_string("V");
 80027c8:	4810      	ldr	r0, [pc, #64]	; (800280c <lcd_update_voltage+0xec>)
 80027ca:	f7ff fd04 	bl	80021d6 <lcd_send_string>
}
 80027ce:	e015      	b.n	80027fc <lcd_update_voltage+0xdc>
	else if(channel == 4){
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d112      	bne.n	80027fc <lcd_update_voltage+0xdc>
		lcd_put_cur(2,14);
 80027d6:	210e      	movs	r1, #14
 80027d8:	2002      	movs	r0, #2
 80027da:	f7ff fc97 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 80027de:	480a      	ldr	r0, [pc, #40]	; (8002808 <lcd_update_voltage+0xe8>)
 80027e0:	f7ff fcf9 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(2,14);
 80027e4:	210e      	movs	r1, #14
 80027e6:	2002      	movs	r0, #2
 80027e8:	f7ff fc90 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fcf0 	bl	80021d6 <lcd_send_string>
		lcd_send_string("V");
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <lcd_update_voltage+0xec>)
 80027f8:	f7ff fced 	bl	80021d6 <lcd_send_string>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	08010df0 	.word	0x08010df0
 8002808:	08010de8 	.word	0x08010de8
 800280c:	08010df8 	.word	0x08010df8

08002810 <lcd_update_amperage>:
void lcd_update_amperage(uint8_t channel, float num){
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af02      	add	r7, sp, #8
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
	char kpbuff[8];
	snprintf(kpbuff, 5, "%.2f", num);
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f7fd fe25 	bl	800046c <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	f107 0008 	add.w	r0, r7, #8
 800282a:	e9cd 2300 	strd	r2, r3, [sp]
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <lcd_update_amperage+0xe4>)
 8002830:	2105      	movs	r1, #5
 8002832:	f00c f815 	bl	800e860 <sniprintf>
	//A1 Set
	if(channel == 1){
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d113      	bne.n	8002864 <lcd_update_amperage+0x54>
		lcd_put_cur(1,3);
 800283c:	2103      	movs	r1, #3
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff fc64 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 8002844:	482c      	ldr	r0, [pc, #176]	; (80028f8 <lcd_update_amperage+0xe8>)
 8002846:	f7ff fcc6 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(1,3);
 800284a:	2103      	movs	r1, #3
 800284c:	2001      	movs	r0, #1
 800284e:	f7ff fc5d 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fcbd 	bl	80021d6 <lcd_send_string>
		lcd_send_string("A");
 800285c:	4827      	ldr	r0, [pc, #156]	; (80028fc <lcd_update_amperage+0xec>)
 800285e:	f7ff fcba 	bl	80021d6 <lcd_send_string>
		lcd_send_string("A");
	}
	else{
		//Error
	}
}
 8002862:	e043      	b.n	80028ec <lcd_update_amperage+0xdc>
	else if(channel == 2){
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d113      	bne.n	8002892 <lcd_update_amperage+0x82>
		lcd_put_cur(1,14);
 800286a:	210e      	movs	r1, #14
 800286c:	2001      	movs	r0, #1
 800286e:	f7ff fc4d 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 8002872:	4821      	ldr	r0, [pc, #132]	; (80028f8 <lcd_update_amperage+0xe8>)
 8002874:	f7ff fcaf 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(1,14);
 8002878:	210e      	movs	r1, #14
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff fc46 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fca6 	bl	80021d6 <lcd_send_string>
		lcd_send_string("A");
 800288a:	481c      	ldr	r0, [pc, #112]	; (80028fc <lcd_update_amperage+0xec>)
 800288c:	f7ff fca3 	bl	80021d6 <lcd_send_string>
}
 8002890:	e02c      	b.n	80028ec <lcd_update_amperage+0xdc>
	else if(channel == 3){
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d113      	bne.n	80028c0 <lcd_update_amperage+0xb0>
		lcd_put_cur(3,3);
 8002898:	2103      	movs	r1, #3
 800289a:	2003      	movs	r0, #3
 800289c:	f7ff fc36 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 80028a0:	4815      	ldr	r0, [pc, #84]	; (80028f8 <lcd_update_amperage+0xe8>)
 80028a2:	f7ff fc98 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(3,3);
 80028a6:	2103      	movs	r1, #3
 80028a8:	2003      	movs	r0, #3
 80028aa:	f7ff fc2f 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 80028ae:	f107 0308 	add.w	r3, r7, #8
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fc8f 	bl	80021d6 <lcd_send_string>
		lcd_send_string("A");
 80028b8:	4810      	ldr	r0, [pc, #64]	; (80028fc <lcd_update_amperage+0xec>)
 80028ba:	f7ff fc8c 	bl	80021d6 <lcd_send_string>
}
 80028be:	e015      	b.n	80028ec <lcd_update_amperage+0xdc>
	else if(channel == 4){
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d112      	bne.n	80028ec <lcd_update_amperage+0xdc>
		lcd_put_cur(3,14);
 80028c6:	210e      	movs	r1, #14
 80028c8:	2003      	movs	r0, #3
 80028ca:	f7ff fc1f 	bl	800210c <lcd_put_cur>
		lcd_send_string("      ");//Clear current number
 80028ce:	480a      	ldr	r0, [pc, #40]	; (80028f8 <lcd_update_amperage+0xe8>)
 80028d0:	f7ff fc81 	bl	80021d6 <lcd_send_string>
		lcd_put_cur(3,14);
 80028d4:	210e      	movs	r1, #14
 80028d6:	2003      	movs	r0, #3
 80028d8:	f7ff fc18 	bl	800210c <lcd_put_cur>
		lcd_send_string(kpbuff);
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fc78 	bl	80021d6 <lcd_send_string>
		lcd_send_string("A");
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <lcd_update_amperage+0xec>)
 80028e8:	f7ff fc75 	bl	80021d6 <lcd_send_string>
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08010df0 	.word	0x08010df0
 80028f8:	08010de8 	.word	0x08010de8
 80028fc:	08010dfc 	.word	0x08010dfc

08002900 <updatekeypad>:
 * Passing a 'z' to this function will delete the last character.
 * Passing a '.' to this function will shift in a '.' if there is not already one in the array.
 * Passing a number ('1' not 1) to this function will shift in that number but will only
 * allow up to 2 numbers before a decimal and up to 2 numbers after a decimal.
 */
void updatekeypad(char num){
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
	if(num == 'z'){
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	2b7a      	cmp	r3, #122	; 0x7a
 800290e:	d128      	bne.n	8002962 <updatekeypad+0x62>
		if(keypaditerator < keypadlength-1){
 8002910:	4b91      	ldr	r3, [pc, #580]	; (8002b58 <updatekeypad+0x258>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	4b91      	ldr	r3, [pc, #580]	; (8002b5c <updatekeypad+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	f340 8117 	ble.w	8002b4e <updatekeypad+0x24e>
			//Update decimal "bool" if we remove a decimal
			if(keypadarr[4] == '.'){
 8002920:	4b8f      	ldr	r3, [pc, #572]	; (8002b60 <updatekeypad+0x260>)
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	2b2e      	cmp	r3, #46	; 0x2e
 8002926:	d102      	bne.n	800292e <updatekeypad+0x2e>
				keypaddecimal = 0;
 8002928:	4b8e      	ldr	r3, [pc, #568]	; (8002b64 <updatekeypad+0x264>)
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
			}
			//shift out last entry if array isnt empty
			for(int i = 3; i >= 0; i--){
 800292e:	2303      	movs	r3, #3
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e00a      	b.n	800294a <updatekeypad+0x4a>
				keypadarr[i+1] = keypadarr[i];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	3301      	adds	r3, #1
 8002938:	4989      	ldr	r1, [pc, #548]	; (8002b60 <updatekeypad+0x260>)
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	440a      	add	r2, r1
 800293e:	7811      	ldrb	r1, [r2, #0]
 8002940:	4a87      	ldr	r2, [pc, #540]	; (8002b60 <updatekeypad+0x260>)
 8002942:	54d1      	strb	r1, [r2, r3]
			for(int i = 3; i >= 0; i--){
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3b01      	subs	r3, #1
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	daf1      	bge.n	8002934 <updatekeypad+0x34>
			}
			keypadarr[0] = num;
 8002950:	4a83      	ldr	r2, [pc, #524]	; (8002b60 <updatekeypad+0x260>)
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	7013      	strb	r3, [r2, #0]
			keypaditerator++;
 8002956:	4b81      	ldr	r3, [pc, #516]	; (8002b5c <updatekeypad+0x25c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	4a7f      	ldr	r2, [pc, #508]	; (8002b5c <updatekeypad+0x25c>)
 800295e:	6013      	str	r3, [r2, #0]
			}
			keypadarr[keypadlength-1] = num;
			keypaditerator--;
		}
	}
}
 8002960:	e0f5      	b.n	8002b4e <updatekeypad+0x24e>
	else if(num == '.'){
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2b2e      	cmp	r3, #46	; 0x2e
 8002966:	d12f      	bne.n	80029c8 <updatekeypad+0xc8>
		if(keypaditerator >= keypadlength-3 && keypaddecimal == 0){
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <updatekeypad+0x258>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	1eda      	subs	r2, r3, #3
 800296e:	4b7b      	ldr	r3, [pc, #492]	; (8002b5c <updatekeypad+0x25c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	f300 80eb 	bgt.w	8002b4e <updatekeypad+0x24e>
 8002978:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <updatekeypad+0x264>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 80e6 	bne.w	8002b4e <updatekeypad+0x24e>
			for(int i = 1; i < keypadlength; i++){
 8002982:	2301      	movs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	e00a      	b.n	800299e <updatekeypad+0x9e>
				keypadarr[i-1] = keypadarr[i];
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3b01      	subs	r3, #1
 800298c:	4974      	ldr	r1, [pc, #464]	; (8002b60 <updatekeypad+0x260>)
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	440a      	add	r2, r1
 8002992:	7811      	ldrb	r1, [r2, #0]
 8002994:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <updatekeypad+0x260>)
 8002996:	54d1      	strb	r1, [r2, r3]
			for(int i = 1; i < keypadlength; i++){
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	3301      	adds	r3, #1
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	4b6e      	ldr	r3, [pc, #440]	; (8002b58 <updatekeypad+0x258>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4293      	cmp	r3, r2
 80029a8:	dbee      	blt.n	8002988 <updatekeypad+0x88>
			keypadarr[keypadlength-1] = num;
 80029aa:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <updatekeypad+0x258>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	496b      	ldr	r1, [pc, #428]	; (8002b60 <updatekeypad+0x260>)
 80029b2:	79fa      	ldrb	r2, [r7, #7]
 80029b4:	54ca      	strb	r2, [r1, r3]
			keypaddecimal = 1;
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <updatekeypad+0x264>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
			keypaditerator--;
 80029bc:	4b67      	ldr	r3, [pc, #412]	; (8002b5c <updatekeypad+0x25c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	4a66      	ldr	r2, [pc, #408]	; (8002b5c <updatekeypad+0x25c>)
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	e0c2      	b.n	8002b4e <updatekeypad+0x24e>
	else if(num >= '0' && num <= '9'){
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	2b2f      	cmp	r3, #47	; 0x2f
 80029cc:	f240 80bf 	bls.w	8002b4e <updatekeypad+0x24e>
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2b39      	cmp	r3, #57	; 0x39
 80029d4:	f200 80bb 	bhi.w	8002b4e <updatekeypad+0x24e>
		if(keypaditerator > 2){
 80029d8:	4b60      	ldr	r3, [pc, #384]	; (8002b5c <updatekeypad+0x25c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	dd1f      	ble.n	8002a20 <updatekeypad+0x120>
			for(int i = 1; i < keypadlength; i++){
 80029e0:	2301      	movs	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e00a      	b.n	80029fc <updatekeypad+0xfc>
				keypadarr[i-1] = keypadarr[i];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	495d      	ldr	r1, [pc, #372]	; (8002b60 <updatekeypad+0x260>)
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	440a      	add	r2, r1
 80029f0:	7811      	ldrb	r1, [r2, #0]
 80029f2:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <updatekeypad+0x260>)
 80029f4:	54d1      	strb	r1, [r2, r3]
			for(int i = 1; i < keypadlength; i++){
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <updatekeypad+0x258>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	4293      	cmp	r3, r2
 8002a06:	dbee      	blt.n	80029e6 <updatekeypad+0xe6>
			keypadarr[keypadlength-1] = num;
 8002a08:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <updatekeypad+0x258>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4954      	ldr	r1, [pc, #336]	; (8002b60 <updatekeypad+0x260>)
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	54ca      	strb	r2, [r1, r3]
			keypaditerator--;
 8002a14:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <updatekeypad+0x25c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <updatekeypad+0x25c>)
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	e096      	b.n	8002b4e <updatekeypad+0x24e>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z' && keypadarr[2] != '.'){
 8002a20:	4b4e      	ldr	r3, [pc, #312]	; (8002b5c <updatekeypad+0x25c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	dc2b      	bgt.n	8002a80 <updatekeypad+0x180>
 8002a28:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <updatekeypad+0x264>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d127      	bne.n	8002a80 <updatekeypad+0x180>
 8002a30:	4b4b      	ldr	r3, [pc, #300]	; (8002b60 <updatekeypad+0x260>)
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b7a      	cmp	r3, #122	; 0x7a
 8002a36:	d123      	bne.n	8002a80 <updatekeypad+0x180>
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <updatekeypad+0x260>)
 8002a3a:	789b      	ldrb	r3, [r3, #2]
 8002a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a3e:	d01f      	beq.n	8002a80 <updatekeypad+0x180>
			for(int i = 1; i < keypadlength; i++){
 8002a40:	2301      	movs	r3, #1
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e00a      	b.n	8002a5c <updatekeypad+0x15c>
				keypadarr[i-1] = keypadarr[i];
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	4945      	ldr	r1, [pc, #276]	; (8002b60 <updatekeypad+0x260>)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	440a      	add	r2, r1
 8002a50:	7811      	ldrb	r1, [r2, #0]
 8002a52:	4a43      	ldr	r2, [pc, #268]	; (8002b60 <updatekeypad+0x260>)
 8002a54:	54d1      	strb	r1, [r2, r3]
			for(int i = 1; i < keypadlength; i++){
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <updatekeypad+0x258>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	dbee      	blt.n	8002a46 <updatekeypad+0x146>
			keypadarr[keypadlength-1] = num;
 8002a68:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <updatekeypad+0x258>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	493c      	ldr	r1, [pc, #240]	; (8002b60 <updatekeypad+0x260>)
 8002a70:	79fa      	ldrb	r2, [r7, #7]
 8002a72:	54ca      	strb	r2, [r1, r3]
			keypaditerator--;
 8002a74:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <updatekeypad+0x25c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	4a38      	ldr	r2, [pc, #224]	; (8002b5c <updatekeypad+0x25c>)
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e066      	b.n	8002b4e <updatekeypad+0x24e>
		else if(keypaditerator <= 1 && keypaddecimal == 1 && keypadarr[1] == 'z'){
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <updatekeypad+0x25c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	dc07      	bgt.n	8002a98 <updatekeypad+0x198>
 8002a88:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <updatekeypad+0x264>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d103      	bne.n	8002a98 <updatekeypad+0x198>
 8002a90:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <updatekeypad+0x260>)
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	2b7a      	cmp	r3, #122	; 0x7a
 8002a96:	d05a      	beq.n	8002b4e <updatekeypad+0x24e>
		else if(keypaditerator > 0 && keypaddecimal == 1){
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <updatekeypad+0x25c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dd23      	ble.n	8002ae8 <updatekeypad+0x1e8>
 8002aa0:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <updatekeypad+0x264>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d11f      	bne.n	8002ae8 <updatekeypad+0x1e8>
			for(int i = 1; i < keypadlength; i++){
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e00a      	b.n	8002ac4 <updatekeypad+0x1c4>
				keypadarr[i-1] = keypadarr[i];
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	492b      	ldr	r1, [pc, #172]	; (8002b60 <updatekeypad+0x260>)
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	440a      	add	r2, r1
 8002ab8:	7811      	ldrb	r1, [r2, #0]
 8002aba:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <updatekeypad+0x260>)
 8002abc:	54d1      	strb	r1, [r2, r3]
			for(int i = 1; i < keypadlength; i++){
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <updatekeypad+0x258>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4293      	cmp	r3, r2
 8002ace:	dbee      	blt.n	8002aae <updatekeypad+0x1ae>
			keypadarr[keypadlength-1] = num;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <updatekeypad+0x258>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	4922      	ldr	r1, [pc, #136]	; (8002b60 <updatekeypad+0x260>)
 8002ad8:	79fa      	ldrb	r2, [r7, #7]
 8002ada:	54ca      	strb	r2, [r1, r3]
			keypaditerator--;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <updatekeypad+0x25c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <updatekeypad+0x25c>)
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e032      	b.n	8002b4e <updatekeypad+0x24e>
		else if(keypaditerator >= 0 && keypaddecimal == 1 && translatekeypad() >= 10.0){
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <updatekeypad+0x25c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db2e      	blt.n	8002b4e <updatekeypad+0x24e>
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <updatekeypad+0x264>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d12a      	bne.n	8002b4e <updatekeypad+0x24e>
 8002af8:	f000 f848 	bl	8002b8c <translatekeypad>
 8002afc:	4603      	mov	r3, r0
 8002afe:	491a      	ldr	r1, [pc, #104]	; (8002b68 <updatekeypad+0x268>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe faa3 	bl	800104c <__aeabi_fcmpge>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d100      	bne.n	8002b0e <updatekeypad+0x20e>
}
 8002b0c:	e01f      	b.n	8002b4e <updatekeypad+0x24e>
			for(int i = 1; i < keypadlength; i++){
 8002b0e:	2301      	movs	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	e00a      	b.n	8002b2a <updatekeypad+0x22a>
				keypadarr[i-1] = keypadarr[i];
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4911      	ldr	r1, [pc, #68]	; (8002b60 <updatekeypad+0x260>)
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	7811      	ldrb	r1, [r2, #0]
 8002b20:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <updatekeypad+0x260>)
 8002b22:	54d1      	strb	r1, [r2, r3]
			for(int i = 1; i < keypadlength; i++){
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <updatekeypad+0x258>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	dbee      	blt.n	8002b14 <updatekeypad+0x214>
			keypadarr[keypadlength-1] = num;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <updatekeypad+0x258>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4908      	ldr	r1, [pc, #32]	; (8002b60 <updatekeypad+0x260>)
 8002b3e:	79fa      	ldrb	r2, [r7, #7]
 8002b40:	54ca      	strb	r2, [r1, r3]
			keypaditerator--;
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <updatekeypad+0x25c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <updatekeypad+0x25c>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	e7ff      	b.n	8002b4e <updatekeypad+0x24e>
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000014 	.word	0x20000014
 8002b5c:	20000020 	.word	0x20000020
 8002b60:	20000018 	.word	0x20000018
 8002b64:	200006e5 	.word	0x200006e5
 8002b68:	41200000 	.word	0x41200000

08002b6c <clearkeypad>:

void clearkeypad(void){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
	while(keypaditerator < 4){
 8002b70:	e002      	b.n	8002b78 <clearkeypad+0xc>
		updatekeypad('z');
 8002b72:	207a      	movs	r0, #122	; 0x7a
 8002b74:	f7ff fec4 	bl	8002900 <updatekeypad>
	while(keypaditerator < 4){
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <clearkeypad+0x1c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	ddf8      	ble.n	8002b72 <clearkeypad+0x6>
	}
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000020 	.word	0x20000020

08002b8c <translatekeypad>:

float translatekeypad(void){
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b089      	sub	sp, #36	; 0x24
 8002b90:	af00      	add	r7, sp, #0
	float num = 0;
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
	int decimallocation = -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < keypadlength; i++){
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e00a      	b.n	8002bba <translatekeypad+0x2e>
		if(keypadarr[i] == '.'){
 8002ba4:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <translatekeypad+0x18c>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	4413      	add	r3, r2
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b2e      	cmp	r3, #46	; 0x2e
 8002bae:	d101      	bne.n	8002bb4 <translatekeypad+0x28>
			decimallocation = i;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < keypadlength; i++){
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <translatekeypad+0x190>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	dbee      	blt.n	8002ba4 <translatekeypad+0x18>
		}
	}

	if(decimallocation == -1){
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d131      	bne.n	8002c32 <translatekeypad+0xa6>
		//No decimal in array
		int count = 1;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	613b      	str	r3, [r7, #16]
		for(int i = keypadlength-1; i >=0; i--){
 8002bd2:	4b52      	ldr	r3, [pc, #328]	; (8002d1c <translatekeypad+0x190>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e026      	b.n	8002c2a <translatekeypad+0x9e>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	; (8002d18 <translatekeypad+0x18c>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b2f      	cmp	r3, #47	; 0x2f
 8002be6:	d91d      	bls.n	8002c24 <translatekeypad+0x98>
 8002be8:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <translatekeypad+0x18c>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b39      	cmp	r3, #57	; 0x39
 8002bf2:	d817      	bhi.n	8002c24 <translatekeypad+0x98>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8002bf4:	4a48      	ldr	r2, [pc, #288]	; (8002d18 <translatekeypad+0x18c>)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b30      	subs	r3, #48	; 0x30
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	fb02 f303 	mul.w	r3, r2, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe f81b 	bl	8000c40 <__aeabi_i2f>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	69f8      	ldr	r0, [r7, #28]
 8002c10:	f7fd ff62 	bl	8000ad8 <__addsf3>
 8002c14:	4603      	mov	r3, r0
 8002c16:	61fb      	str	r3, [r7, #28]
				count = count * 10;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
		for(int i = keypadlength-1; i >=0; i--){
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	dad5      	bge.n	8002bdc <translatekeypad+0x50>
 8002c30:	e06d      	b.n	8002d0e <translatekeypad+0x182>
			}
		}
	}
	else{
		//First do numbers to the left of the decimal
		int count = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60bb      	str	r3, [r7, #8]
		for(int i = decimallocation-1; i >=0; i--){
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	e026      	b.n	8002c8c <translatekeypad+0x100>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8002c3e:	4a36      	ldr	r2, [pc, #216]	; (8002d18 <translatekeypad+0x18c>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b2f      	cmp	r3, #47	; 0x2f
 8002c48:	d91d      	bls.n	8002c86 <translatekeypad+0xfa>
 8002c4a:	4a33      	ldr	r2, [pc, #204]	; (8002d18 <translatekeypad+0x18c>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b39      	cmp	r3, #57	; 0x39
 8002c54:	d817      	bhi.n	8002c86 <translatekeypad+0xfa>
				num += ( (int)keypadarr[i] - (int)'0' ) * (count);
 8002c56:	4a30      	ldr	r2, [pc, #192]	; (8002d18 <translatekeypad+0x18c>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	3b30      	subs	r3, #48	; 0x30
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd ffea 	bl	8000c40 <__aeabi_i2f>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4619      	mov	r1, r3
 8002c70:	69f8      	ldr	r0, [r7, #28]
 8002c72:	f7fd ff31 	bl	8000ad8 <__addsf3>
 8002c76:	4603      	mov	r3, r0
 8002c78:	61fb      	str	r3, [r7, #28]
				count = count * 10;
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
		for(int i = decimallocation-1; i >=0; i--){
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	dad5      	bge.n	8002c3e <translatekeypad+0xb2>
			}
		}
		//Next do numbers to the right of the decimal
		count = 10;
 8002c92:	230a      	movs	r3, #10
 8002c94:	60bb      	str	r3, [r7, #8]
		for(int i = decimallocation+1; i < keypadlength; i++){
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	e031      	b.n	8002d02 <translatekeypad+0x176>
			if(keypadarr[i] >= '0' && keypadarr[i] <= '9'){
 8002c9e:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <translatekeypad+0x18c>)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8002ca8:	d928      	bls.n	8002cfc <translatekeypad+0x170>
 8002caa:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <translatekeypad+0x18c>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b39      	cmp	r3, #57	; 0x39
 8002cb4:	d822      	bhi.n	8002cfc <translatekeypad+0x170>
				num += ( (float)(int)keypadarr[i] - (int)'0' ) / (float)(count);
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <translatekeypad+0x18c>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd ffbe 	bl	8000c40 <__aeabi_i2f>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4916      	ldr	r1, [pc, #88]	; (8002d20 <translatekeypad+0x194>)
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd ff03 	bl	8000ad4 <__aeabi_fsub>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	68b8      	ldr	r0, [r7, #8]
 8002cd4:	f7fd ffb4 	bl	8000c40 <__aeabi_i2f>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7fe f8b7 	bl	8000e50 <__aeabi_fdiv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	69f8      	ldr	r0, [r7, #28]
 8002ce8:	f7fd fef6 	bl	8000ad8 <__addsf3>
 8002cec:	4603      	mov	r3, r0
 8002cee:	61fb      	str	r3, [r7, #28]
				count = count * 10;
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
		for(int i = decimallocation+1; i < keypadlength; i++){
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <translatekeypad+0x190>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	dbc7      	blt.n	8002c9e <translatekeypad+0x112>
			}
		}
	}

	return num;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3724      	adds	r7, #36	; 0x24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd90      	pop	{r4, r7, pc}
 8002d18:	20000018 	.word	0x20000018
 8002d1c:	20000014 	.word	0x20000014
 8002d20:	42400000 	.word	0x42400000

08002d24 <checkkeypad>:

uint8_t checkkeypad(uint8_t which){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
	//which=0 for voltage which=1 for amperage
	float temp = translatekeypad();
 8002d2e:	f7ff ff2d 	bl	8002b8c <translatekeypad>
 8002d32:	60f8      	str	r0, [r7, #12]
	if(which){
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d013      	beq.n	8002d62 <checkkeypad+0x3e>
		if(temp >= 0 && temp <= 0.5){
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7fe f984 	bl	800104c <__aeabi_fcmpge>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <checkkeypad+0x3a>
 8002d4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7fe f972 	bl	8001038 <__aeabi_fcmple>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <checkkeypad+0x3a>
			return 1;//valid
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e013      	b.n	8002d86 <checkkeypad+0x62>
		}
		else{
			return 0;//invalid
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e011      	b.n	8002d86 <checkkeypad+0x62>
		}
	}
	else{
		if(temp >= 0 && temp <= 12.00){
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7fe f970 	bl	800104c <__aeabi_fcmpge>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <checkkeypad+0x60>
 8002d72:	4907      	ldr	r1, [pc, #28]	; (8002d90 <checkkeypad+0x6c>)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7fe f95f 	bl	8001038 <__aeabi_fcmple>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <checkkeypad+0x60>
			return 1;//valid
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <checkkeypad+0x62>
		}
		else{
			return 0;//invalid
 8002d84:	2300      	movs	r3, #0
		}
	}
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	41400000 	.word	0x41400000

08002d94 <keypadsm>:

void keypadsm(char num){
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	//A=V1;B=A1;C=V2;D=A2;
	if(kpenum == WAIT){
 8002d9e:	4ba2      	ldr	r3, [pc, #648]	; (8003028 <keypadsm+0x294>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d124      	bne.n	8002df0 <keypadsm+0x5c>
		//While in wait we only listen to letters for channel number and type
		if(num == 'A'){
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2b41      	cmp	r3, #65	; 0x41
 8002daa:	d105      	bne.n	8002db8 <keypadsm+0x24>
			kpenum = V1;
 8002dac:	4b9e      	ldr	r3, [pc, #632]	; (8003028 <keypadsm+0x294>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002db2:	f7ff fedb 	bl	8002b6c <clearkeypad>
		else if(num == '-'){
			kpenum = WAIT;
			clearkeypad();
		}
	}
}
 8002db6:	e1e8      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'B'){
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b42      	cmp	r3, #66	; 0x42
 8002dbc:	d105      	bne.n	8002dca <keypadsm+0x36>
			kpenum = A1;
 8002dbe:	4b9a      	ldr	r3, [pc, #616]	; (8003028 <keypadsm+0x294>)
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002dc4:	f7ff fed2 	bl	8002b6c <clearkeypad>
}
 8002dc8:	e1df      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'C'){
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b43      	cmp	r3, #67	; 0x43
 8002dce:	d105      	bne.n	8002ddc <keypadsm+0x48>
			kpenum = V2;
 8002dd0:	4b95      	ldr	r3, [pc, #596]	; (8003028 <keypadsm+0x294>)
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002dd6:	f7ff fec9 	bl	8002b6c <clearkeypad>
}
 8002dda:	e1d6      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'D'){
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2b44      	cmp	r3, #68	; 0x44
 8002de0:	f040 81d3 	bne.w	800318a <keypadsm+0x3f6>
			kpenum = A2;
 8002de4:	4b90      	ldr	r3, [pc, #576]	; (8003028 <keypadsm+0x294>)
 8002de6:	2204      	movs	r2, #4
 8002de8:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002dea:	f7ff febf 	bl	8002b6c <clearkeypad>
}
 8002dee:	e1cc      	b.n	800318a <keypadsm+0x3f6>
	else if(kpenum == V1){
 8002df0:	4b8d      	ldr	r3, [pc, #564]	; (8003028 <keypadsm+0x294>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d170      	bne.n	8002eda <keypadsm+0x146>
		if(num == 'A'){
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b41      	cmp	r3, #65	; 0x41
 8002dfc:	d115      	bne.n	8002e2a <keypadsm+0x96>
			uint8_t test = checkkeypad(0);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff ff90 	bl	8002d24 <checkkeypad>
 8002e04:	4603      	mov	r3, r0
 8002e06:	723b      	strb	r3, [r7, #8]
			if(test){
 8002e08:	7a3b      	ldrb	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <keypadsm+0x84>
				voltnum1 = translatekeypad();
 8002e0e:	f7ff febd 	bl	8002b8c <translatekeypad>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a85      	ldr	r2, [pc, #532]	; (800302c <keypadsm+0x298>)
 8002e16:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 8002e18:	4b83      	ldr	r3, [pc, #524]	; (8003028 <keypadsm+0x294>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002e1e:	f7ff fea5 	bl	8002b6c <clearkeypad>
			first_shot = 1;
 8002e22:	4b83      	ldr	r3, [pc, #524]	; (8003030 <keypadsm+0x29c>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
}
 8002e28:	e1af      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'B'){
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	2b42      	cmp	r3, #66	; 0x42
 8002e2e:	d105      	bne.n	8002e3c <keypadsm+0xa8>
			kpenum = WAIT;
 8002e30:	4b7d      	ldr	r3, [pc, #500]	; (8003028 <keypadsm+0x294>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002e36:	f7ff fe99 	bl	8002b6c <clearkeypad>
}
 8002e3a:	e1a6      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'C'){
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b43      	cmp	r3, #67	; 0x43
 8002e40:	d105      	bne.n	8002e4e <keypadsm+0xba>
			kpenum = WAIT;
 8002e42:	4b79      	ldr	r3, [pc, #484]	; (8003028 <keypadsm+0x294>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002e48:	f7ff fe90 	bl	8002b6c <clearkeypad>
}
 8002e4c:	e19d      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'D'){
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	2b44      	cmp	r3, #68	; 0x44
 8002e52:	d105      	bne.n	8002e60 <keypadsm+0xcc>
			kpenum = WAIT;
 8002e54:	4b74      	ldr	r3, [pc, #464]	; (8003028 <keypadsm+0x294>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002e5a:	f7ff fe87 	bl	8002b6c <clearkeypad>
}
 8002e5e:	e194      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '.'){
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b2e      	cmp	r3, #46	; 0x2e
 8002e64:	d104      	bne.n	8002e70 <keypadsm+0xdc>
			updatekeypad(num);
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fd49 	bl	8002900 <updatekeypad>
}
 8002e6e:	e18c      	b.n	800318a <keypadsm+0x3f6>
		else if(num >= '0' && num <= '9'){
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b2f      	cmp	r3, #47	; 0x2f
 8002e74:	d907      	bls.n	8002e86 <keypadsm+0xf2>
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b39      	cmp	r3, #57	; 0x39
 8002e7a:	d804      	bhi.n	8002e86 <keypadsm+0xf2>
			updatekeypad(num);
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fd3e 	bl	8002900 <updatekeypad>
 8002e84:	e181      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '#'){
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b23      	cmp	r3, #35	; 0x23
 8002e8a:	d103      	bne.n	8002e94 <keypadsm+0x100>
			updatekeypad('z');
 8002e8c:	207a      	movs	r0, #122	; 0x7a
 8002e8e:	f7ff fd37 	bl	8002900 <updatekeypad>
}
 8002e92:	e17a      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '+'){
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b2b      	cmp	r3, #43	; 0x2b
 8002e98:	d115      	bne.n	8002ec6 <keypadsm+0x132>
			uint8_t test = checkkeypad(0);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff ff42 	bl	8002d24 <checkkeypad>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	727b      	strb	r3, [r7, #9]
			if(test){
 8002ea4:	7a7b      	ldrb	r3, [r7, #9]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <keypadsm+0x120>
				voltnum1 = translatekeypad();
 8002eaa:	f7ff fe6f 	bl	8002b8c <translatekeypad>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a5e      	ldr	r2, [pc, #376]	; (800302c <keypadsm+0x298>)
 8002eb2:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 8002eb4:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <keypadsm+0x294>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002eba:	f7ff fe57 	bl	8002b6c <clearkeypad>
			first_shot = 1;
 8002ebe:	4b5c      	ldr	r3, [pc, #368]	; (8003030 <keypadsm+0x29c>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
}
 8002ec4:	e161      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '-'){
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	2b2d      	cmp	r3, #45	; 0x2d
 8002eca:	f040 815e 	bne.w	800318a <keypadsm+0x3f6>
			kpenum = WAIT;
 8002ece:	4b56      	ldr	r3, [pc, #344]	; (8003028 <keypadsm+0x294>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002ed4:	f7ff fe4a 	bl	8002b6c <clearkeypad>
}
 8002ed8:	e157      	b.n	800318a <keypadsm+0x3f6>
	else if(kpenum == A1){
 8002eda:	4b53      	ldr	r3, [pc, #332]	; (8003028 <keypadsm+0x294>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d16a      	bne.n	8002fb8 <keypadsm+0x224>
		if(num == 'A'){
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	2b41      	cmp	r3, #65	; 0x41
 8002ee6:	d105      	bne.n	8002ef4 <keypadsm+0x160>
			kpenum = WAIT;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <keypadsm+0x294>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002eee:	f7ff fe3d 	bl	8002b6c <clearkeypad>
}
 8002ef2:	e14a      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'B'){
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2b42      	cmp	r3, #66	; 0x42
 8002ef8:	d112      	bne.n	8002f20 <keypadsm+0x18c>
			uint8_t test = checkkeypad(1);
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7ff ff12 	bl	8002d24 <checkkeypad>
 8002f00:	4603      	mov	r3, r0
 8002f02:	72bb      	strb	r3, [r7, #10]
			if(test){
 8002f04:	7abb      	ldrb	r3, [r7, #10]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <keypadsm+0x180>
				ampnum1 = translatekeypad();
 8002f0a:	f7ff fe3f 	bl	8002b8c <translatekeypad>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4a48      	ldr	r2, [pc, #288]	; (8003034 <keypadsm+0x2a0>)
 8002f12:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 8002f14:	4b44      	ldr	r3, [pc, #272]	; (8003028 <keypadsm+0x294>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002f1a:	f7ff fe27 	bl	8002b6c <clearkeypad>
}
 8002f1e:	e134      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'C'){
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	2b43      	cmp	r3, #67	; 0x43
 8002f24:	d105      	bne.n	8002f32 <keypadsm+0x19e>
			kpenum = WAIT;
 8002f26:	4b40      	ldr	r3, [pc, #256]	; (8003028 <keypadsm+0x294>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002f2c:	f7ff fe1e 	bl	8002b6c <clearkeypad>
}
 8002f30:	e12b      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'D'){
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b44      	cmp	r3, #68	; 0x44
 8002f36:	d105      	bne.n	8002f44 <keypadsm+0x1b0>
			kpenum = WAIT;
 8002f38:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <keypadsm+0x294>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002f3e:	f7ff fe15 	bl	8002b6c <clearkeypad>
}
 8002f42:	e122      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '.'){
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	2b2e      	cmp	r3, #46	; 0x2e
 8002f48:	d104      	bne.n	8002f54 <keypadsm+0x1c0>
			updatekeypad(num);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fcd7 	bl	8002900 <updatekeypad>
}
 8002f52:	e11a      	b.n	800318a <keypadsm+0x3f6>
		else if(num >= '0' && num <= '9'){
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	2b2f      	cmp	r3, #47	; 0x2f
 8002f58:	d907      	bls.n	8002f6a <keypadsm+0x1d6>
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b39      	cmp	r3, #57	; 0x39
 8002f5e:	d804      	bhi.n	8002f6a <keypadsm+0x1d6>
			updatekeypad(num);
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fccc 	bl	8002900 <updatekeypad>
 8002f68:	e10f      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '#'){
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b23      	cmp	r3, #35	; 0x23
 8002f6e:	d103      	bne.n	8002f78 <keypadsm+0x1e4>
			updatekeypad('z');
 8002f70:	207a      	movs	r0, #122	; 0x7a
 8002f72:	f7ff fcc5 	bl	8002900 <updatekeypad>
}
 8002f76:	e108      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '+'){
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	2b2b      	cmp	r3, #43	; 0x2b
 8002f7c:	d112      	bne.n	8002fa4 <keypadsm+0x210>
			uint8_t test = checkkeypad(1);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7ff fed0 	bl	8002d24 <checkkeypad>
 8002f84:	4603      	mov	r3, r0
 8002f86:	72fb      	strb	r3, [r7, #11]
			if(test){
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <keypadsm+0x204>
				ampnum1 = translatekeypad();
 8002f8e:	f7ff fdfd 	bl	8002b8c <translatekeypad>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <keypadsm+0x2a0>)
 8002f96:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <keypadsm+0x294>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002f9e:	f7ff fde5 	bl	8002b6c <clearkeypad>
}
 8002fa2:	e0f2      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '-'){
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	2b2d      	cmp	r3, #45	; 0x2d
 8002fa8:	f040 80ef 	bne.w	800318a <keypadsm+0x3f6>
			kpenum = WAIT;
 8002fac:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <keypadsm+0x294>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002fb2:	f7ff fddb 	bl	8002b6c <clearkeypad>
}
 8002fb6:	e0e8      	b.n	800318a <keypadsm+0x3f6>
	else if(kpenum == V2){
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <keypadsm+0x294>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d176      	bne.n	80030ae <keypadsm+0x31a>
		if(num == 'A'){
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2b41      	cmp	r3, #65	; 0x41
 8002fc4:	d108      	bne.n	8002fd8 <keypadsm+0x244>
			kpenum = WAIT;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <keypadsm+0x294>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002fcc:	f7ff fdce 	bl	8002b6c <clearkeypad>
			first_shot = 1;
 8002fd0:	4b17      	ldr	r3, [pc, #92]	; (8003030 <keypadsm+0x29c>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
}
 8002fd6:	e0d8      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'B'){
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	2b42      	cmp	r3, #66	; 0x42
 8002fdc:	d105      	bne.n	8002fea <keypadsm+0x256>
			kpenum = WAIT;
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <keypadsm+0x294>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8002fe4:	f7ff fdc2 	bl	8002b6c <clearkeypad>
}
 8002fe8:	e0cf      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'C'){
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b43      	cmp	r3, #67	; 0x43
 8002fee:	d112      	bne.n	8003016 <keypadsm+0x282>
			uint8_t test = checkkeypad(0);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7ff fe97 	bl	8002d24 <checkkeypad>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	733b      	strb	r3, [r7, #12]
			if(test){
 8002ffa:	7b3b      	ldrb	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <keypadsm+0x276>
				voltnum2 = translatekeypad();
 8003000:	f7ff fdc4 	bl	8002b8c <translatekeypad>
 8003004:	4603      	mov	r3, r0
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <keypadsm+0x2a4>)
 8003008:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <keypadsm+0x294>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8003010:	f7ff fdac 	bl	8002b6c <clearkeypad>
}
 8003014:	e0b9      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'D'){
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b44      	cmp	r3, #68	; 0x44
 800301a:	d10f      	bne.n	800303c <keypadsm+0x2a8>
			kpenum = WAIT;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <keypadsm+0x294>)
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8003022:	f7ff fda3 	bl	8002b6c <clearkeypad>
}
 8003026:	e0b0      	b.n	800318a <keypadsm+0x3f6>
 8003028:	200006e6 	.word	0x200006e6
 800302c:	200006e8 	.word	0x200006e8
 8003030:	20000024 	.word	0x20000024
 8003034:	200006ec 	.word	0x200006ec
 8003038:	200006f0 	.word	0x200006f0
		else if(num == '.'){
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	2b2e      	cmp	r3, #46	; 0x2e
 8003040:	d104      	bne.n	800304c <keypadsm+0x2b8>
			updatekeypad(num);
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fc5b 	bl	8002900 <updatekeypad>
}
 800304a:	e09e      	b.n	800318a <keypadsm+0x3f6>
		else if(num >= '0' && num <= '9'){
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2b2f      	cmp	r3, #47	; 0x2f
 8003050:	d907      	bls.n	8003062 <keypadsm+0x2ce>
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b39      	cmp	r3, #57	; 0x39
 8003056:	d804      	bhi.n	8003062 <keypadsm+0x2ce>
			updatekeypad(num);
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fc50 	bl	8002900 <updatekeypad>
 8003060:	e093      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '#'){
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b23      	cmp	r3, #35	; 0x23
 8003066:	d103      	bne.n	8003070 <keypadsm+0x2dc>
			updatekeypad('z');
 8003068:	207a      	movs	r0, #122	; 0x7a
 800306a:	f7ff fc49 	bl	8002900 <updatekeypad>
}
 800306e:	e08c      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '+'){
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2b2b      	cmp	r3, #43	; 0x2b
 8003074:	d112      	bne.n	800309c <keypadsm+0x308>
			uint8_t test = checkkeypad(0);
 8003076:	2000      	movs	r0, #0
 8003078:	f7ff fe54 	bl	8002d24 <checkkeypad>
 800307c:	4603      	mov	r3, r0
 800307e:	737b      	strb	r3, [r7, #13]
			if(test){
 8003080:	7b7b      	ldrb	r3, [r7, #13]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <keypadsm+0x2fc>
				voltnum2 = translatekeypad();
 8003086:	f7ff fd81 	bl	8002b8c <translatekeypad>
 800308a:	4603      	mov	r3, r0
 800308c:	4a41      	ldr	r2, [pc, #260]	; (8003194 <keypadsm+0x400>)
 800308e:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 8003090:	4b41      	ldr	r3, [pc, #260]	; (8003198 <keypadsm+0x404>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8003096:	f7ff fd69 	bl	8002b6c <clearkeypad>
}
 800309a:	e076      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '-'){
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	2b2d      	cmp	r3, #45	; 0x2d
 80030a0:	d173      	bne.n	800318a <keypadsm+0x3f6>
			kpenum = WAIT;
 80030a2:	4b3d      	ldr	r3, [pc, #244]	; (8003198 <keypadsm+0x404>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 80030a8:	f7ff fd60 	bl	8002b6c <clearkeypad>
}
 80030ac:	e06d      	b.n	800318a <keypadsm+0x3f6>
	else if(kpenum == A2){
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <keypadsm+0x404>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d169      	bne.n	800318a <keypadsm+0x3f6>
		if(num == 'A'){
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b41      	cmp	r3, #65	; 0x41
 80030ba:	d105      	bne.n	80030c8 <keypadsm+0x334>
			kpenum = WAIT;
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <keypadsm+0x404>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 80030c2:	f7ff fd53 	bl	8002b6c <clearkeypad>
}
 80030c6:	e060      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'B'){
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2b42      	cmp	r3, #66	; 0x42
 80030cc:	d105      	bne.n	80030da <keypadsm+0x346>
			kpenum = WAIT;
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <keypadsm+0x404>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 80030d4:	f7ff fd4a 	bl	8002b6c <clearkeypad>
}
 80030d8:	e057      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'C'){
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b43      	cmp	r3, #67	; 0x43
 80030de:	d105      	bne.n	80030ec <keypadsm+0x358>
			kpenum = WAIT;
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <keypadsm+0x404>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 80030e6:	f7ff fd41 	bl	8002b6c <clearkeypad>
}
 80030ea:	e04e      	b.n	800318a <keypadsm+0x3f6>
		else if(num == 'D'){
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b44      	cmp	r3, #68	; 0x44
 80030f0:	d112      	bne.n	8003118 <keypadsm+0x384>
			uint8_t test = checkkeypad(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7ff fe16 	bl	8002d24 <checkkeypad>
 80030f8:	4603      	mov	r3, r0
 80030fa:	73bb      	strb	r3, [r7, #14]
			if(test){
 80030fc:	7bbb      	ldrb	r3, [r7, #14]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <keypadsm+0x378>
				ampnum2 = translatekeypad();
 8003102:	f7ff fd43 	bl	8002b8c <translatekeypad>
 8003106:	4603      	mov	r3, r0
 8003108:	4a24      	ldr	r2, [pc, #144]	; (800319c <keypadsm+0x408>)
 800310a:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <keypadsm+0x404>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8003112:	f7ff fd2b 	bl	8002b6c <clearkeypad>
}
 8003116:	e038      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '.'){
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	2b2e      	cmp	r3, #46	; 0x2e
 800311c:	d104      	bne.n	8003128 <keypadsm+0x394>
			updatekeypad(num);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fbed 	bl	8002900 <updatekeypad>
}
 8003126:	e030      	b.n	800318a <keypadsm+0x3f6>
		else if(num >= '0' && num <= '9'){
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	2b2f      	cmp	r3, #47	; 0x2f
 800312c:	d907      	bls.n	800313e <keypadsm+0x3aa>
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b39      	cmp	r3, #57	; 0x39
 8003132:	d804      	bhi.n	800313e <keypadsm+0x3aa>
			updatekeypad(num);
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fbe2 	bl	8002900 <updatekeypad>
 800313c:	e025      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '#'){
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b23      	cmp	r3, #35	; 0x23
 8003142:	d103      	bne.n	800314c <keypadsm+0x3b8>
			updatekeypad('z');
 8003144:	207a      	movs	r0, #122	; 0x7a
 8003146:	f7ff fbdb 	bl	8002900 <updatekeypad>
}
 800314a:	e01e      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '+'){
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b2b      	cmp	r3, #43	; 0x2b
 8003150:	d112      	bne.n	8003178 <keypadsm+0x3e4>
			uint8_t test = checkkeypad(1);
 8003152:	2001      	movs	r0, #1
 8003154:	f7ff fde6 	bl	8002d24 <checkkeypad>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
			if(test){
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <keypadsm+0x3d8>
				ampnum2 = translatekeypad();
 8003162:	f7ff fd13 	bl	8002b8c <translatekeypad>
 8003166:	4603      	mov	r3, r0
 8003168:	4a0c      	ldr	r2, [pc, #48]	; (800319c <keypadsm+0x408>)
 800316a:	6013      	str	r3, [r2, #0]
			kpenum = WAIT;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <keypadsm+0x404>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8003172:	f7ff fcfb 	bl	8002b6c <clearkeypad>
}
 8003176:	e008      	b.n	800318a <keypadsm+0x3f6>
		else if(num == '-'){
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2b2d      	cmp	r3, #45	; 0x2d
 800317c:	d105      	bne.n	800318a <keypadsm+0x3f6>
			kpenum = WAIT;
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <keypadsm+0x404>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
			clearkeypad();
 8003184:	f7ff fcf2 	bl	8002b6c <clearkeypad>
}
 8003188:	e7ff      	b.n	800318a <keypadsm+0x3f6>
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200006f0 	.word	0x200006f0
 8003198:	200006e6 	.word	0x200006e6
 800319c:	200006f4 	.word	0x200006f4

080031a0 <rowInput>:

void rowInput(void){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]

	//Deinit
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 80031b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031b8:	482d      	ldr	r0, [pc, #180]	; (8003270 <rowInput+0xd0>)
 80031ba:	f002 fb07 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 80031be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031c2:	482b      	ldr	r0, [pc, #172]	; (8003270 <rowInput+0xd0>)
 80031c4:	f002 fb02 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80031c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031cc:	4828      	ldr	r0, [pc, #160]	; (8003270 <rowInput+0xd0>)
 80031ce:	f002 fafd 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80031d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031d6:	4826      	ldr	r0, [pc, #152]	; (8003270 <rowInput+0xd0>)
 80031d8:	f002 faf8 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80031dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031e0:	4823      	ldr	r0, [pc, #140]	; (8003270 <rowInput+0xd0>)
 80031e2:	f002 faf3 	bl	80057cc <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	4822      	ldr	r0, [pc, #136]	; (8003274 <rowInput+0xd4>)
 80031ea:	f002 faef 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	4820      	ldr	r0, [pc, #128]	; (8003274 <rowInput+0xd4>)
 80031f2:	f002 faeb 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80031f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031fa:	481e      	ldr	r0, [pc, #120]	; (8003274 <rowInput+0xd4>)
 80031fc:	f002 fae6 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 8003200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003204:	481b      	ldr	r0, [pc, #108]	; (8003274 <rowInput+0xd4>)
 8003206:	f002 fae1 	bl	80057cc <HAL_GPIO_DeInit>

	//Write zeros to outputs, should be by default but just in case
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800320a:	2200      	movs	r2, #0
 800320c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003210:	4818      	ldr	r0, [pc, #96]	; (8003274 <rowInput+0xd4>)
 8003212:	f002 fbd2 	bl	80059ba <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Col1_Pin Col2_Pin Col3_Pin Col4_Pin */
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8003216:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800321a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321c:	2301      	movs	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	4619      	mov	r1, r3
 800322c:	4811      	ldr	r0, [pc, #68]	; (8003274 <rowInput+0xd4>)
 800322e:	f002 f94d 	bl	80054cc <HAL_GPIO_Init>

	/*Configure GPIO pins : Row1_Pin Row2_Pin Row3_Pin Row4_Pin */
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 8003232:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8003236:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003238:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800323c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323e:	2301      	movs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	4619      	mov	r1, r3
 8003246:	480a      	ldr	r0, [pc, #40]	; (8003270 <rowInput+0xd0>)
 8003248:	f002 f940 	bl	80054cc <HAL_GPIO_Init>

	//Write zeros to outputs, should be by default but just in case
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin, GPIO_PIN_RESET);
 800324c:	2200      	movs	r2, #0
 800324e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003252:	4808      	ldr	r0, [pc, #32]	; (8003274 <rowInput+0xd4>)
 8003254:	f002 fbb1 	bl	80059ba <HAL_GPIO_WritePin>

	//Reenable interrupts
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2028      	movs	r0, #40	; 0x28
 800325e:	f001 fd68 	bl	8004d32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003262:	2028      	movs	r0, #40	; 0x28
 8003264:	f001 fd81 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40020400 	.word	0x40020400
 8003274:	40020800 	.word	0x40020800

08003278 <columnInput>:

void columnInput(void){
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	611a      	str	r2, [r3, #16]

	//Disable interrupts
	//HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800328c:	2028      	movs	r0, #40	; 0x28
 800328e:	f001 fd7a 	bl	8004d86 <HAL_NVIC_DisableIRQ>

	//Deinit
	HAL_GPIO_DeInit(Row_1_GPIO_Port, Row_1_Pin);
 8003292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003296:	4829      	ldr	r0, [pc, #164]	; (800333c <columnInput+0xc4>)
 8003298:	f002 fa98 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_2_GPIO_Port, Row_2_Pin);
 800329c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032a0:	4826      	ldr	r0, [pc, #152]	; (800333c <columnInput+0xc4>)
 80032a2:	f002 fa93 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_3_GPIO_Port, Row_3_Pin);
 80032a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032aa:	4824      	ldr	r0, [pc, #144]	; (800333c <columnInput+0xc4>)
 80032ac:	f002 fa8e 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_4_GPIO_Port, Row_4_Pin);
 80032b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032b4:	4821      	ldr	r0, [pc, #132]	; (800333c <columnInput+0xc4>)
 80032b6:	f002 fa89 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Row_5_GPIO_Port, Row_5_Pin);
 80032ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032be:	481f      	ldr	r0, [pc, #124]	; (800333c <columnInput+0xc4>)
 80032c0:	f002 fa84 	bl	80057cc <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(Col_1_GPIO_Port, Col_1_Pin);
 80032c4:	2140      	movs	r1, #64	; 0x40
 80032c6:	481e      	ldr	r0, [pc, #120]	; (8003340 <columnInput+0xc8>)
 80032c8:	f002 fa80 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_2_GPIO_Port, Col_2_Pin);
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	481c      	ldr	r0, [pc, #112]	; (8003340 <columnInput+0xc8>)
 80032d0:	f002 fa7c 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_3_GPIO_Port, Col_3_Pin);
 80032d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032d8:	4819      	ldr	r0, [pc, #100]	; (8003340 <columnInput+0xc8>)
 80032da:	f002 fa77 	bl	80057cc <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(Col_4_GPIO_Port, Col_4_Pin);
 80032de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e2:	4817      	ldr	r0, [pc, #92]	; (8003340 <columnInput+0xc8>)
 80032e4:	f002 fa72 	bl	80057cc <HAL_GPIO_DeInit>

	//Write zeros to outputs, should be by default but just in case
	HAL_GPIO_WritePin(Row_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 80032e8:	2200      	movs	r2, #0
 80032ea:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80032ee:	4813      	ldr	r0, [pc, #76]	; (800333c <columnInput+0xc4>)
 80032f0:	f002 fb63 	bl	80059ba <HAL_GPIO_WritePin>

	/*Switch rows to outputs */
	GPIO_InitStruct.Pin = Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin;
 80032f4:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80032f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(Row_1_GPIO_Port, &GPIO_InitStruct);
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	4619      	mov	r1, r3
 800330a:	480c      	ldr	r0, [pc, #48]	; (800333c <columnInput+0xc4>)
 800330c:	f002 f8de 	bl	80054cc <HAL_GPIO_Init>

	/*Switch columns to inputs */
	GPIO_InitStruct.Pin = Col_1_Pin|Col_2_Pin|Col_3_Pin|Col_4_Pin;
 8003310:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003314:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800331a:	2301      	movs	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(Col_1_GPIO_Port, &GPIO_InitStruct);
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4807      	ldr	r0, [pc, #28]	; (8003340 <columnInput+0xc8>)
 8003324:	f002 f8d2 	bl	80054cc <HAL_GPIO_Init>

	//Write zeros to outputs, should be by default but just in case
	HAL_GPIO_WritePin(Col_1_GPIO_Port, Row_1_Pin|Row_2_Pin|Row_3_Pin|Row_4_Pin|Row_5_Pin, GPIO_PIN_RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 800332e:	4804      	ldr	r0, [pc, #16]	; (8003340 <columnInput+0xc8>)
 8003330:	f002 fb43 	bl	80059ba <HAL_GPIO_WritePin>
}
 8003334:	bf00      	nop
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40020400 	.word	0x40020400
 8003340:	40020800 	.word	0x40020800

08003344 <USB_Interrupt_Callback>:
/* Keypad Section End --------------------------------------------------------*/

/* Interrupt Callback Section Begin ------------------------------------------*/
void USB_Interrupt_Callback(void){
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
	if(strncmp("1",(char*)usbbuffer,sizeof("1")) == 0){
 8003348:	4908      	ldr	r1, [pc, #32]	; (800336c <USB_Interrupt_Callback+0x28>)
 800334a:	4809      	ldr	r0, [pc, #36]	; (8003370 <USB_Interrupt_Callback+0x2c>)
 800334c:	f7fc ff18 	bl	8000180 <strcmp>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <USB_Interrupt_Callback+0x1a>
		HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8003356:	2120      	movs	r1, #32
 8003358:	4806      	ldr	r0, [pc, #24]	; (8003374 <USB_Interrupt_Callback+0x30>)
 800335a:	f002 fb46 	bl	80059ea <HAL_GPIO_TogglePin>
	}
	memset (usbbuffer, '\0', 128);  // clear the buffer
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	2100      	movs	r1, #0
 8003362:	4802      	ldr	r0, [pc, #8]	; (800336c <USB_Interrupt_Callback+0x28>)
 8003364:	f00a fe14 	bl	800df90 <memset>
}
 8003368:	bf00      	nop
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200005a4 	.word	0x200005a4
 8003370:	08010e00 	.word	0x08010e00
 8003374:	40020800 	.word	0x40020800

08003378 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	80fb      	strh	r3, [r7, #6]
	//Row 1
	if(GPIO_Pin == Row_1_Pin){
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d123      	bne.n	80033d2 <HAL_GPIO_EXTI_Callback+0x5a>
		//Falling edge
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_1_Pin) == 0){
 800338a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800338e:	485f      	ldr	r0, [pc, #380]	; (800350c <HAL_GPIO_EXTI_Callback+0x194>)
 8003390:	f002 fafc 	bl	800598c <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10e      	bne.n	80033b8 <HAL_GPIO_EXTI_Callback+0x40>
			//Make sure we didn't interrupt on falling edge already
			if(kpedge != 0){
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80af 	beq.w	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 0;
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
				//Save rowpin
				rowpin = 1;
 80033aa:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
				//start debounce
				HAL_TIM_Base_Start_IT(&htim2);
 80033b0:	4859      	ldr	r0, [pc, #356]	; (8003518 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80033b2:	f005 f9f7 	bl	80087a4 <HAL_TIM_Base_Start_IT>
				//Reset keypad detection vars
				rowpin = -1;
			}
		}
	}
}
 80033b6:	e0a4      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
			if(kpedge != 1){
 80033b8:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f000 80a0 	beq.w	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 1;
 80033c2:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
				rowpin = -1;
 80033c8:	4b52      	ldr	r3, [pc, #328]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	601a      	str	r2, [r3, #0]
}
 80033d0:	e097      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
	else if(GPIO_Pin == Row_2_Pin){
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d8:	d122      	bne.n	8003420 <HAL_GPIO_EXTI_Callback+0xa8>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_2_Pin) == 0){
 80033da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033de:	484b      	ldr	r0, [pc, #300]	; (800350c <HAL_GPIO_EXTI_Callback+0x194>)
 80033e0:	f002 fad4 	bl	800598c <HAL_GPIO_ReadPin>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_GPIO_EXTI_Callback+0x90>
			if(kpedge != 0){
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8087 	beq.w	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 0;
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
				rowpin = 2;
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 80033fc:	2202      	movs	r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8003400:	4845      	ldr	r0, [pc, #276]	; (8003518 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8003402:	f005 f9cf 	bl	80087a4 <HAL_TIM_Base_Start_IT>
}
 8003406:	e07c      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
			if(kpedge != 1){
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d078      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 1;
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]
				rowpin = -1;
 8003416:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003418:	f04f 32ff 	mov.w	r2, #4294967295
 800341c:	601a      	str	r2, [r3, #0]
}
 800341e:	e070      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
	else if(GPIO_Pin == Row_3_Pin){
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d121      	bne.n	800346c <HAL_GPIO_EXTI_Callback+0xf4>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_3_Pin) == 0){
 8003428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800342c:	4837      	ldr	r0, [pc, #220]	; (800350c <HAL_GPIO_EXTI_Callback+0x194>)
 800342e:	f002 faad 	bl	800598c <HAL_GPIO_ReadPin>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_GPIO_EXTI_Callback+0xdc>
			if(kpedge != 0){
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d060      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 0;
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
				rowpin = 3;
 8003446:	4b33      	ldr	r3, [pc, #204]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003448:	2203      	movs	r2, #3
 800344a:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 800344c:	4832      	ldr	r0, [pc, #200]	; (8003518 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800344e:	f005 f9a9 	bl	80087a4 <HAL_TIM_Base_Start_IT>
}
 8003452:	e056      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
			if(kpedge != 1){
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d052      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 1;
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
				rowpin = -1;
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	601a      	str	r2, [r3, #0]
}
 800346a:	e04a      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
	else if(GPIO_Pin == Row_4_Pin){
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003472:	d121      	bne.n	80034b8 <HAL_GPIO_EXTI_Callback+0x140>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_4_Pin) == 0){
 8003474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003478:	4824      	ldr	r0, [pc, #144]	; (800350c <HAL_GPIO_EXTI_Callback+0x194>)
 800347a:	f002 fa87 	bl	800598c <HAL_GPIO_ReadPin>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <HAL_GPIO_EXTI_Callback+0x128>
			if(kpedge != 0){
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d03a      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 0;
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
				rowpin = 4;
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 8003494:	2204      	movs	r2, #4
 8003496:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 8003498:	481f      	ldr	r0, [pc, #124]	; (8003518 <HAL_GPIO_EXTI_Callback+0x1a0>)
 800349a:	f005 f983 	bl	80087a4 <HAL_TIM_Base_Start_IT>
}
 800349e:	e030      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
			if(kpedge != 1){
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d02c      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 1;
 80034a8:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
				rowpin = -1;
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	e024      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
	else if(GPIO_Pin == Row_5_Pin){
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034be:	d120      	bne.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
		if(HAL_GPIO_ReadPin(Row_1_GPIO_Port, Row_5_Pin) == 0){
 80034c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <HAL_GPIO_EXTI_Callback+0x194>)
 80034c6:	f002 fa61 	bl	800598c <HAL_GPIO_ReadPin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10d      	bne.n	80034ec <HAL_GPIO_EXTI_Callback+0x174>
			if(kpedge != 0){
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d014      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 0;
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
				rowpin = 5;
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 80034e0:	2205      	movs	r2, #5
 80034e2:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim2);
 80034e4:	480c      	ldr	r0, [pc, #48]	; (8003518 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80034e6:	f005 f95d 	bl	80087a4 <HAL_TIM_Base_Start_IT>
}
 80034ea:	e00a      	b.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
			if(kpedge != 1){
 80034ec:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d006      	beq.n	8003502 <HAL_GPIO_EXTI_Callback+0x18a>
				kpedge = 1;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_GPIO_EXTI_Callback+0x198>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
				rowpin = -1;
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_GPIO_EXTI_Callback+0x19c>)
 80034fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40020400 	.word	0x40020400
 8003510:	20000010 	.word	0x20000010
 8003514:	2000000c 	.word	0x2000000c
 8003518:	20000494 	.word	0x20000494

0800351c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a93      	ldr	r2, [pc, #588]	; (8003774 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003528:	4293      	cmp	r3, r2
 800352a:	f040 8112 	bne.w	8003752 <HAL_TIM_PeriodElapsedCallback+0x236>
		//Disable timer now that we're in its interrupt
		HAL_TIM_Base_Stop_IT(&htim2);
 800352e:	4891      	ldr	r0, [pc, #580]	; (8003774 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003530:	f005 f98a 	bl	8008848 <HAL_TIM_Base_Stop_IT>
		//Row 1
		if(rowpin == 1){
 8003534:	4b90      	ldr	r3, [pc, #576]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d132      	bne.n	80035a2 <HAL_TIM_PeriodElapsedCallback+0x86>
			//Decode
			columnInput();
 800353c:	f7ff fe9c 	bl	8003278 <columnInput>
			//Col1
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	488e      	ldr	r0, [pc, #568]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003544:	f002 fa22 	bl	800598c <HAL_GPIO_ReadPin>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_TIM_PeriodElapsedCallback+0x3a>
				//Ch1
				//HAL_GPIO_TogglePin(Status_LED_1_GPIO_Port, Status_LED_1_Pin);
				firstmessage = 1;
 800354e:	4b8c      	ldr	r3, [pc, #560]	; (8003780 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e022      	b.n	800359c <HAL_TIM_PeriodElapsedCallback+0x80>
			}
			//Col2
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	4888      	ldr	r0, [pc, #544]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800355a:	f002 fa17 	bl	800598c <HAL_GPIO_ReadPin>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d103      	bne.n	800356c <HAL_TIM_PeriodElapsedCallback+0x50>
				//confirm
				keypadsm('+');
 8003564:	202b      	movs	r0, #43	; 0x2b
 8003566:	f7ff fc15 	bl	8002d94 <keypadsm>
 800356a:	e017      	b.n	800359c <HAL_TIM_PeriodElapsedCallback+0x80>
			}
			//Col3
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 800356c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003570:	4882      	ldr	r0, [pc, #520]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003572:	f002 fa0b 	bl	800598c <HAL_GPIO_ReadPin>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <HAL_TIM_PeriodElapsedCallback+0x68>
				//cancel
				keypadsm('-');
 800357c:	202d      	movs	r0, #45	; 0x2d
 800357e:	f7ff fc09 	bl	8002d94 <keypadsm>
 8003582:	e00b      	b.n	800359c <HAL_TIM_PeriodElapsedCallback+0x80>
			}
			//Col4
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8003584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003588:	487c      	ldr	r0, [pc, #496]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800358a:	f002 f9ff 	bl	800598c <HAL_GPIO_ReadPin>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <HAL_TIM_PeriodElapsedCallback+0x80>
				//Ch2
				HAL_GPIO_TogglePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin);
 8003594:	2120      	movs	r1, #32
 8003596:	4879      	ldr	r0, [pc, #484]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003598:	f002 fa27 	bl	80059ea <HAL_GPIO_TogglePin>
			}
			rowInput();
 800359c:	f7ff fe00 	bl	80031a0 <rowInput>
		//Update Display
		lcd_psu_update();
		//Start timer again
		HAL_TIM_Base_Start_IT(&htim3);
	}
}
 80035a0:	e0e3      	b.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
		else if(rowpin == 2){
 80035a2:	4b75      	ldr	r3, [pc, #468]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d131      	bne.n	800360e <HAL_TIM_PeriodElapsedCallback+0xf2>
			columnInput();
 80035aa:	f7ff fe65 	bl	8003278 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	4872      	ldr	r0, [pc, #456]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80035b2:	f002 f9eb 	bl	800598c <HAL_GPIO_ReadPin>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <HAL_TIM_PeriodElapsedCallback+0xa8>
				keypadsm('7');
 80035bc:	2037      	movs	r0, #55	; 0x37
 80035be:	f7ff fbe9 	bl	8002d94 <keypadsm>
 80035c2:	e021      	b.n	8003608 <HAL_TIM_PeriodElapsedCallback+0xec>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	486d      	ldr	r0, [pc, #436]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80035c8:	f002 f9e0 	bl	800598c <HAL_GPIO_ReadPin>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_TIM_PeriodElapsedCallback+0xbe>
				keypadsm('4');
 80035d2:	2034      	movs	r0, #52	; 0x34
 80035d4:	f7ff fbde 	bl	8002d94 <keypadsm>
 80035d8:	e016      	b.n	8003608 <HAL_TIM_PeriodElapsedCallback+0xec>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 80035da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035de:	4867      	ldr	r0, [pc, #412]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80035e0:	f002 f9d4 	bl	800598c <HAL_GPIO_ReadPin>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_TIM_PeriodElapsedCallback+0xd6>
				keypadsm('1');
 80035ea:	2031      	movs	r0, #49	; 0x31
 80035ec:	f7ff fbd2 	bl	8002d94 <keypadsm>
 80035f0:	e00a      	b.n	8003608 <HAL_TIM_PeriodElapsedCallback+0xec>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 80035f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035f6:	4861      	ldr	r0, [pc, #388]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80035f8:	f002 f9c8 	bl	800598c <HAL_GPIO_ReadPin>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_TIM_PeriodElapsedCallback+0xec>
				keypadsm('.');
 8003602:	202e      	movs	r0, #46	; 0x2e
 8003604:	f7ff fbc6 	bl	8002d94 <keypadsm>
			rowInput();
 8003608:	f7ff fdca 	bl	80031a0 <rowInput>
}
 800360c:	e0ad      	b.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
		else if(rowpin == 3){
 800360e:	4b5a      	ldr	r3, [pc, #360]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d131      	bne.n	800367a <HAL_TIM_PeriodElapsedCallback+0x15e>
			columnInput();
 8003616:	f7ff fe2f 	bl	8003278 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 800361a:	2140      	movs	r1, #64	; 0x40
 800361c:	4857      	ldr	r0, [pc, #348]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800361e:	f002 f9b5 	bl	800598c <HAL_GPIO_ReadPin>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <HAL_TIM_PeriodElapsedCallback+0x114>
				keypadsm('8');
 8003628:	2038      	movs	r0, #56	; 0x38
 800362a:	f7ff fbb3 	bl	8002d94 <keypadsm>
 800362e:	e021      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x158>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	4852      	ldr	r0, [pc, #328]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003634:	f002 f9aa 	bl	800598c <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_TIM_PeriodElapsedCallback+0x12a>
				keypadsm('5');
 800363e:	2035      	movs	r0, #53	; 0x35
 8003640:	f7ff fba8 	bl	8002d94 <keypadsm>
 8003644:	e016      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x158>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 8003646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800364a:	484c      	ldr	r0, [pc, #304]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800364c:	f002 f99e 	bl	800598c <HAL_GPIO_ReadPin>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_TIM_PeriodElapsedCallback+0x142>
				keypadsm('2');
 8003656:	2032      	movs	r0, #50	; 0x32
 8003658:	f7ff fb9c 	bl	8002d94 <keypadsm>
 800365c:	e00a      	b.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x158>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 800365e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003662:	4846      	ldr	r0, [pc, #280]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003664:	f002 f992 	bl	800598c <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d102      	bne.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x158>
				keypadsm('0');
 800366e:	2030      	movs	r0, #48	; 0x30
 8003670:	f7ff fb90 	bl	8002d94 <keypadsm>
			rowInput();
 8003674:	f7ff fd94 	bl	80031a0 <rowInput>
}
 8003678:	e077      	b.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
		else if(rowpin == 4){
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d131      	bne.n	80036e6 <HAL_TIM_PeriodElapsedCallback+0x1ca>
			columnInput();
 8003682:	f7ff fdf9 	bl	8003278 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	483c      	ldr	r0, [pc, #240]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800368a:	f002 f97f 	bl	800598c <HAL_GPIO_ReadPin>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_TIM_PeriodElapsedCallback+0x180>
				keypadsm('9');
 8003694:	2039      	movs	r0, #57	; 0x39
 8003696:	f7ff fb7d 	bl	8002d94 <keypadsm>
 800369a:	e021      	b.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	4837      	ldr	r0, [pc, #220]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80036a0:	f002 f974 	bl	800598c <HAL_GPIO_ReadPin>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_TIM_PeriodElapsedCallback+0x196>
				keypadsm('6');
 80036aa:	2036      	movs	r0, #54	; 0x36
 80036ac:	f7ff fb72 	bl	8002d94 <keypadsm>
 80036b0:	e016      	b.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 80036b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036b6:	4831      	ldr	r0, [pc, #196]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80036b8:	f002 f968 	bl	800598c <HAL_GPIO_ReadPin>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_TIM_PeriodElapsedCallback+0x1ae>
				keypadsm('3');
 80036c2:	2033      	movs	r0, #51	; 0x33
 80036c4:	f7ff fb66 	bl	8002d94 <keypadsm>
 80036c8:	e00a      	b.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 80036ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036ce:	482b      	ldr	r0, [pc, #172]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80036d0:	f002 f95c 	bl	800598c <HAL_GPIO_ReadPin>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <HAL_TIM_PeriodElapsedCallback+0x1c4>
				keypadsm('#');
 80036da:	2023      	movs	r0, #35	; 0x23
 80036dc:	f7ff fb5a 	bl	8002d94 <keypadsm>
			rowInput();
 80036e0:	f7ff fd5e 	bl	80031a0 <rowInput>
}
 80036e4:	e041      	b.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
		else if(rowpin == 5){
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b05      	cmp	r3, #5
 80036ec:	d13d      	bne.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
			columnInput();
 80036ee:	f7ff fdc3 	bl	8003278 <columnInput>
			if(HAL_GPIO_ReadPin(Col_1_GPIO_Port, Col_1_Pin) == 0){
 80036f2:	2140      	movs	r1, #64	; 0x40
 80036f4:	4821      	ldr	r0, [pc, #132]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80036f6:	f002 f949 	bl	800598c <HAL_GPIO_ReadPin>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <HAL_TIM_PeriodElapsedCallback+0x1ec>
				keypadsm('A');
 8003700:	2041      	movs	r0, #65	; 0x41
 8003702:	f7ff fb47 	bl	8002d94 <keypadsm>
 8003706:	e021      	b.n	800374c <HAL_TIM_PeriodElapsedCallback+0x230>
			else if(HAL_GPIO_ReadPin(Col_2_GPIO_Port, Col_2_Pin) == 0){
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	481c      	ldr	r0, [pc, #112]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800370c:	f002 f93e 	bl	800598c <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <HAL_TIM_PeriodElapsedCallback+0x202>
				keypadsm('B');
 8003716:	2042      	movs	r0, #66	; 0x42
 8003718:	f7ff fb3c 	bl	8002d94 <keypadsm>
 800371c:	e016      	b.n	800374c <HAL_TIM_PeriodElapsedCallback+0x230>
			else if(HAL_GPIO_ReadPin(Col_3_GPIO_Port, Col_3_Pin) == 0){
 800371e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003722:	4816      	ldr	r0, [pc, #88]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003724:	f002 f932 	bl	800598c <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d103      	bne.n	8003736 <HAL_TIM_PeriodElapsedCallback+0x21a>
				keypadsm('C');
 800372e:	2043      	movs	r0, #67	; 0x43
 8003730:	f7ff fb30 	bl	8002d94 <keypadsm>
 8003734:	e00a      	b.n	800374c <HAL_TIM_PeriodElapsedCallback+0x230>
			else if(HAL_GPIO_ReadPin(Col_4_GPIO_Port, Col_4_Pin) == 0){
 8003736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800373a:	4810      	ldr	r0, [pc, #64]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800373c:	f002 f926 	bl	800598c <HAL_GPIO_ReadPin>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <HAL_TIM_PeriodElapsedCallback+0x230>
				keypadsm('D');
 8003746:	2044      	movs	r0, #68	; 0x44
 8003748:	f7ff fb24 	bl	8002d94 <keypadsm>
			rowInput();
 800374c:	f7ff fd28 	bl	80031a0 <rowInput>
}
 8003750:	e00b      	b.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
	else if(htim == &htim3){
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0b      	ldr	r2, [pc, #44]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d107      	bne.n	800376a <HAL_TIM_PeriodElapsedCallback+0x24e>
		HAL_TIM_Base_Stop_IT(&htim3);
 800375a:	480a      	ldr	r0, [pc, #40]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800375c:	f005 f874 	bl	8008848 <HAL_TIM_Base_Stop_IT>
		lcd_psu_update();
 8003760:	f7fe fde8 	bl	8002334 <lcd_psu_update>
		HAL_TIM_Base_Start_IT(&htim3);
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003766:	f005 f81d 	bl	80087a4 <HAL_TIM_Base_Start_IT>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000494 	.word	0x20000494
 8003778:	2000000c 	.word	0x2000000c
 800377c:	40020800 	.word	0x40020800
 8003780:	200006e4 	.word	0x200006e4
 8003784:	200004d4 	.word	0x200004d4

08003788 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  adc_current = adcvalues[2];
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003792:	889a      	ldrh	r2, [r3, #4]
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_ADC_ConvCpltCallback+0x40>)
 8003796:	801a      	strh	r2, [r3, #0]
	adc_linear = adcvalues[1];
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 800379a:	885a      	ldrh	r2, [r3, #2]
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_ADC_ConvCpltCallback+0x44>)
 800379e:	801a      	strh	r2, [r3, #0]
	adc_opamp = adcvalues[0];
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_ADC_ConvCpltCallback+0x48>)
 80037a6:	801a      	strh	r2, [r3, #0]
	adc_switching = adcvalues[3];
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80037aa:	88da      	ldrh	r2, [r3, #6]
 80037ac:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_ADC_ConvCpltCallback+0x4c>)
 80037ae:	801a      	strh	r2, [r3, #0]
	adc_vref = adcvalues[4];
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80037b2:	891a      	ldrh	r2, [r3, #8]
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_ADC_ConvCpltCallback+0x50>)
 80037b6:	801a      	strh	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200006fc 	.word	0x200006fc
 80037c8:	20000706 	.word	0x20000706
 80037cc:	20000708 	.word	0x20000708
 80037d0:	2000070a 	.word	0x2000070a
 80037d4:	2000070c 	.word	0x2000070c
 80037d8:	2000070e 	.word	0x2000070e

080037dc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  //
	for(int i = 0; i < 32; i++){
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e00b      	b.n	8003802 <HAL_UART_RxHalfCpltCallback+0x26>
		rxbuffercpy[i] = rxbuffer[i];
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <HAL_UART_RxHalfCpltCallback+0x38>)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	7819      	ldrb	r1, [r3, #0]
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <HAL_UART_RxHalfCpltCallback+0x3c>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	460a      	mov	r2, r1
 80037fa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++){
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b1f      	cmp	r3, #31
 8003806:	ddf0      	ble.n	80037ea <HAL_UART_RxHalfCpltCallback+0xe>
	}
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	20000664 	.word	0x20000664
 8003818:	200006a4 	.word	0x200006a4

0800381c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800381c:	b580      	push	{r7, lr}
 800381e:	b0ca      	sub	sp, #296	; 0x128
 8003820:	af02      	add	r7, sp, #8
 8003822:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003826:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800382a:	6018      	str	r0, [r3, #0]
  //
	for(int i = 32; i < 64; i++){
 800382c:	2320      	movs	r3, #32
 800382e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003832:	e00f      	b.n	8003854 <HAL_UART_RxCpltCallback+0x38>
		rxbuffercpy[i] = rxbuffer[i];
 8003834:	4a38      	ldr	r2, [pc, #224]	; (8003918 <HAL_UART_RxCpltCallback+0xfc>)
 8003836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800383a:	4413      	add	r3, r2
 800383c:	7819      	ldrb	r1, [r3, #0]
 800383e:	4a37      	ldr	r2, [pc, #220]	; (800391c <HAL_UART_RxCpltCallback+0x100>)
 8003840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003844:	4413      	add	r3, r2
 8003846:	460a      	mov	r2, r1
 8003848:	701a      	strb	r2, [r3, #0]
	for(int i = 32; i < 64; i++){
 800384a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800384e:	3301      	adds	r3, #1
 8003850:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003858:	2b3f      	cmp	r3, #63	; 0x3f
 800385a:	ddeb      	ble.n	8003834 <HAL_UART_RxCpltCallback+0x18>
	CDC_Transmit_FS(rxbuffercpy,64);
	if(strncmp("Hello World From Second MCU\n", (char*)rxbuffercpy, sizeof("Hello World From Second MCU\n")) == 0){
		HAL_GPIO_WritePin(Status_LED_2_GPIO_Port, Status_LED_2_Pin, GPIO_PIN_SET);
	}
*/
	if(firstmessage){
 800385c:	4b30      	ldr	r3, [pc, #192]	; (8003920 <HAL_UART_RxCpltCallback+0x104>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d04e      	beq.n	8003902 <HAL_UART_RxCpltCallback+0xe6>
		char buf[256];
		memset (buf, '\0', 256);  // clear the buffer
 8003864:	f107 0308 	add.w	r3, r7, #8
 8003868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f00a fb8e 	bl	800df90 <memset>
		strcpy(buf,"Begin\n");
 8003874:	f107 0308 	add.w	r3, r7, #8
 8003878:	4a2a      	ldr	r2, [pc, #168]	; (8003924 <HAL_UART_RxCpltCallback+0x108>)
 800387a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800387e:	6018      	str	r0, [r3, #0]
 8003880:	3304      	adds	r3, #4
 8003882:	8019      	strh	r1, [r3, #0]
 8003884:	3302      	adds	r3, #2
 8003886:	0c0a      	lsrs	r2, r1, #16
 8003888:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 64; i++){
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003890:	e01a      	b.n	80038c8 <HAL_UART_RxCpltCallback+0xac>
			char tempbuf[16];
			snprintf(tempbuf, 16, "%d:%c\n", i, rxbuffercpy[i]);
 8003892:	4a22      	ldr	r2, [pc, #136]	; (800391c <HAL_UART_RxCpltCallback+0x100>)
 8003894:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003898:	4413      	add	r3, r2
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <HAL_UART_RxCpltCallback+0x10c>)
 80038a8:	2110      	movs	r1, #16
 80038aa:	f00a ffd9 	bl	800e860 <sniprintf>
			strcat(buf, tempbuf);
 80038ae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80038b2:	f107 0308 	add.w	r3, r7, #8
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f00b f805 	bl	800e8c8 <strcat>
		for(int i = 0; i < 64; i++){
 80038be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80038c2:	3301      	adds	r3, #1
 80038c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80038c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80038cc:	2b3f      	cmp	r3, #63	; 0x3f
 80038ce:	dde0      	ble.n	8003892 <HAL_UART_RxCpltCallback+0x76>
		}
		strcat(buf, "End\n");
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fc5d 	bl	8000194 <strlen>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4413      	add	r3, r2
 80038e4:	4a11      	ldr	r2, [pc, #68]	; (800392c <HAL_UART_RxCpltCallback+0x110>)
 80038e6:	6810      	ldr	r0, [r2, #0]
 80038e8:	6018      	str	r0, [r3, #0]
 80038ea:	7912      	ldrb	r2, [r2, #4]
 80038ec:	711a      	strb	r2, [r3, #4]
		CDC_Transmit_FS((uint8_t*)buf,256);
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038f6:	4618      	mov	r0, r3
 80038f8:	f009 ff20 	bl	800d73c <CDC_Transmit_FS>
		firstmessage = 0;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_UART_RxCpltCallback+0x104>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
	}
	memset (rxbuffercpy, '\0', 64);  // clear the buffer
 8003902:	2240      	movs	r2, #64	; 0x40
 8003904:	2100      	movs	r1, #0
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <HAL_UART_RxCpltCallback+0x100>)
 8003908:	f00a fb42 	bl	800df90 <memset>
}
 800390c:	bf00      	nop
 800390e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000664 	.word	0x20000664
 800391c:	200006a4 	.word	0x200006a4
 8003920:	200006e4 	.word	0x200006e4
 8003924:	08010e04 	.word	0x08010e04
 8003928:	08010e0c 	.word	0x08010e0c
 800392c:	08010e14 	.word	0x08010e14

08003930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003934:	b672      	cpsid	i
}
 8003936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003938:	e7fe      	b.n	8003938 <Error_Handler+0x8>
	...

0800393c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_MspInit+0x58>)
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <HAL_MspInit+0x58>)
 8003948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800394c:	6253      	str	r3, [r2, #36]	; 0x24
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_MspInit+0x58>)
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_MspInit+0x58>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <HAL_MspInit+0x58>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6213      	str	r3, [r2, #32]
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_MspInit+0x58>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <HAL_MspInit+0x58>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	4a07      	ldr	r2, [pc, #28]	; (8003994 <HAL_MspInit+0x58>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6253      	str	r3, [r2, #36]	; 0x24
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_MspInit+0x58>)
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	40023800 	.word	0x40023800

08003998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <HAL_ADC_MspInit+0xc4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d14b      	bne.n	8003a52 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039ba:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_ADC_MspInit+0xc8>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <HAL_ADC_MspInit+0xc8>)
 80039c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_ADC_MspInit+0xc8>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_ADC_MspInit+0xc8>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_ADC_MspInit+0xc8>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	61d3      	str	r3, [r2, #28]
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_ADC_MspInit+0xc8>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80039ea:	230f      	movs	r3, #15
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ee:	2303      	movs	r3, #3
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	4819      	ldr	r0, [pc, #100]	; (8003a64 <HAL_ADC_MspInit+0xcc>)
 80039fe:	f001 fd65 	bl	80054cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003a02:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a04:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <HAL_ADC_MspInit+0xd4>)
 8003a06:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a20:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a28:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003a30:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003a36:	480c      	ldr	r0, [pc, #48]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a38:	f001 faa4 	bl	8004f84 <HAL_DMA_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8003a42:	f7ff ff75 	bl	8003930 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a4c:	4a06      	ldr	r2, [pc, #24]	; (8003a68 <HAL_ADC_MspInit+0xd0>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40012400 	.word	0x40012400
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020000 	.word	0x40020000
 8003a68:	200003e8 	.word	0x200003e8
 8003a6c:	40026008 	.word	0x40026008

08003a70 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_ADC_MspDeInit+0x38>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10e      	bne.n	8003aa0 <HAL_ADC_MspDeInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_ADC_MspDeInit+0x3c>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_ADC_MspDeInit+0x3c>)
 8003a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a8c:	6213      	str	r3, [r2, #32]
    PA0-WKUP1     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 8003a8e:	210f      	movs	r1, #15
 8003a90:	4807      	ldr	r0, [pc, #28]	; (8003ab0 <HAL_ADC_MspDeInit+0x40>)
 8003a92:	f001 fe9b 	bl	80057cc <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 faca 	bl	8005034 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40012400 	.word	0x40012400
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020000 	.word	0x40020000

08003ab4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 0314 	add.w	r3, r7, #20
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_DAC_MspInit+0x74>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d123      	bne.n	8003b1e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_DAC_MspInit+0x78>)
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <HAL_DAC_MspInit+0x78>)
 8003adc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	6253      	str	r3, [r2, #36]	; 0x24
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_DAC_MspInit+0x78>)
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <HAL_DAC_MspInit+0x78>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4a0e      	ldr	r2, [pc, #56]	; (8003b2c <HAL_DAC_MspInit+0x78>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	61d3      	str	r3, [r2, #28]
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_DAC_MspInit+0x78>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b06:	2330      	movs	r3, #48	; 0x30
 8003b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	4619      	mov	r1, r3
 8003b18:	4805      	ldr	r0, [pc, #20]	; (8003b30 <HAL_DAC_MspInit+0x7c>)
 8003b1a:	f001 fcd7 	bl	80054cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003b1e:	bf00      	nop
 8003b20:	3728      	adds	r7, #40	; 0x28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40007400 	.word	0x40007400
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40020000 	.word	0x40020000

08003b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	60da      	str	r2, [r3, #12]
 8003b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a17      	ldr	r2, [pc, #92]	; (8003bb0 <HAL_I2C_MspInit+0x7c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d127      	bne.n	8003ba6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_I2C_MspInit+0x80>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <HAL_I2C_MspInit+0x80>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	61d3      	str	r3, [r2, #28]
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_I2C_MspInit+0x80>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b6e:	23c0      	movs	r3, #192	; 0xc0
 8003b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b72:	2312      	movs	r3, #18
 8003b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b7e:	2304      	movs	r3, #4
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	4619      	mov	r1, r3
 8003b88:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <HAL_I2C_MspInit+0x84>)
 8003b8a:	f001 fc9f 	bl	80054cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_I2C_MspInit+0x80>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <HAL_I2C_MspInit+0x80>)
 8003b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b98:	6253      	str	r3, [r2, #36]	; 0x24
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_I2C_MspInit+0x80>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	; 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40005400 	.word	0x40005400
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40020400 	.word	0x40020400

08003bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d114      	bne.n	8003bf8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bce:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_TIM_Base_MspInit+0x78>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIM_Base_MspInit+0x78>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6253      	str	r3, [r2, #36]	; 0x24
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <HAL_TIM_Base_MspInit+0x78>)
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	201c      	movs	r0, #28
 8003bec:	f001 f8a1 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bf0:	201c      	movs	r0, #28
 8003bf2:	f001 f8ba 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bf6:	e018      	b.n	8003c2a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_TIM_Base_MspInit+0x7c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d113      	bne.n	8003c2a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_TIM_Base_MspInit+0x78>)
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <HAL_TIM_Base_MspInit+0x78>)
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	6253      	str	r3, [r2, #36]	; 0x24
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_TIM_Base_MspInit+0x78>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	201d      	movs	r0, #29
 8003c20:	f001 f887 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c24:	201d      	movs	r0, #29
 8003c26:	f001 f8a0 	bl	8004d6a <HAL_NVIC_EnableIRQ>
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40000400 	.word	0x40000400

08003c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <HAL_UART_MspInit+0xc8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d14e      	bne.n	8003cfc <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <HAL_UART_MspInit+0xcc>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <HAL_UART_MspInit+0xcc>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c68:	6213      	str	r3, [r2, #32]
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_UART_MspInit+0xcc>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_UART_MspInit+0xcc>)
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_UART_MspInit+0xcc>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	61d3      	str	r3, [r2, #28]
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_UART_MspInit+0xcc>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca0:	2307      	movs	r3, #7
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4818      	ldr	r0, [pc, #96]	; (8003d0c <HAL_UART_MspInit+0xd0>)
 8003cac:	f001 fc0e 	bl	80054cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cb2:	4a18      	ldr	r2, [pc, #96]	; (8003d14 <HAL_UART_MspInit+0xd8>)
 8003cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003ce2:	f001 f94f 	bl	8004f84 <HAL_DMA_Init>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8003cec:	f7ff fe20 	bl	8003930 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf6:	4a06      	ldr	r2, [pc, #24]	; (8003d10 <HAL_UART_MspInit+0xd4>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003cfc:	bf00      	nop
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013800 	.word	0x40013800
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	20000558 	.word	0x20000558
 8003d14:	40026058 	.word	0x40026058

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <NMI_Handler+0x4>

08003d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d22:	e7fe      	b.n	8003d22 <HardFault_Handler+0x4>

08003d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <MemManage_Handler+0x4>

08003d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d2e:	e7fe      	b.n	8003d2e <BusFault_Handler+0x4>

08003d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <UsageFault_Handler+0x4>

08003d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d5e:	f000 f98b 	bl	8004078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA1_Channel1_IRQHandler+0x10>)
 8003d6e:	f001 fa13 	bl	8005198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200003e8 	.word	0x200003e8

08003d7c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA1_Channel5_IRQHandler+0x10>)
 8003d82:	f001 fa09 	bl	8005198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000558 	.word	0x20000558

08003d90 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <USB_LP_IRQHandler+0x10>)
 8003d96:	f002 fba7 	bl	80064e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200013b0 	.word	0x200013b0

08003da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <TIM2_IRQHandler+0x10>)
 8003daa:	f004 fd73 	bl	8008894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000494 	.word	0x20000494

08003db8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <TIM3_IRQHandler+0x10>)
 8003dbe:	f004 fd69 	bl	8008894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200004d4 	.word	0x200004d4

08003dcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Row_1_Pin);
 8003dd0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003dd4:	f001 fe22 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_2_Pin);
 8003dd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ddc:	f001 fe1e 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_3_Pin);
 8003de0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003de4:	f001 fe1a 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_4_Pin);
 8003de8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dec:	f001 fe16 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Row_5_Pin);
 8003df0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003df4:	f001 fe12 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return 1;
 8003e00:	2301      	movs	r3, #1
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <_kill>:

int _kill(int pid, int sig)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e14:	f00a f884 	bl	800df20 <__errno>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2216      	movs	r2, #22
 8003e1c:	601a      	str	r2, [r3, #0]
	return -1;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_exit>:

void _exit (int status)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e32:	f04f 31ff 	mov.w	r1, #4294967295
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffe7 	bl	8003e0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e3c:	e7fe      	b.n	8003e3c <_exit+0x12>

08003e3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e00a      	b.n	8003e66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e50:	f3af 8000 	nop.w
 8003e54:	4601      	mov	r1, r0
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	60ba      	str	r2, [r7, #8]
 8003e5c:	b2ca      	uxtb	r2, r1
 8003e5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3301      	adds	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	dbf0      	blt.n	8003e50 <_read+0x12>
	}

return len;
 8003e6e:	687b      	ldr	r3, [r7, #4]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e009      	b.n	8003e9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	60ba      	str	r2, [r7, #8]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	dbf1      	blt.n	8003e8a <_write+0x12>
	}
	return len;
 8003ea6:	687b      	ldr	r3, [r7, #4]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_close>:

int _close(int file)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	return -1;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ed6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <_isatty>:

int _isatty(int file)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	return 1;
 8003eec:	2301      	movs	r3, #1
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
	return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <_sbrk+0x5c>)
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <_sbrk+0x60>)
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f24:	4b13      	ldr	r3, [pc, #76]	; (8003f74 <_sbrk+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <_sbrk+0x64>)
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <_sbrk+0x68>)
 8003f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <_sbrk+0x64>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d207      	bcs.n	8003f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f40:	f009 ffee 	bl	800df20 <__errno>
 8003f44:	4603      	mov	r3, r0
 8003f46:	220c      	movs	r2, #12
 8003f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e009      	b.n	8003f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <_sbrk+0x64>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <_sbrk+0x64>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <_sbrk+0x64>)
 8003f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20008000 	.word	0x20008000
 8003f70:	00002000 	.word	0x00002000
 8003f74:	20000738 	.word	0x20000738
 8003f78:	200018d0 	.word	0x200018d0

08003f7c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f88:	480c      	ldr	r0, [pc, #48]	; (8003fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f8a:	490d      	ldr	r1, [pc, #52]	; (8003fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f90:	e002      	b.n	8003f98 <LoopCopyDataInit>

08003f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f96:	3304      	adds	r3, #4

08003f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f9c:	d3f9      	bcc.n	8003f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fa0:	4c0a      	ldr	r4, [pc, #40]	; (8003fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fa4:	e001      	b.n	8003faa <LoopFillZerobss>

08003fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fa8:	3204      	adds	r2, #4

08003faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fac:	d3fb      	bcc.n	8003fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fae:	f7ff ffe5 	bl	8003f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fb2:	f009 ffbb 	bl	800df2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003fb6:	f7fd fa01 	bl	80013bc <main>
  bx lr
 8003fba:	4770      	bx	lr
  ldr r0, =_sdata
 8003fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fc0:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8003fc4:	080112b4 	.word	0x080112b4
  ldr r2, =_sbss
 8003fc8:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8003fcc:	200018cc 	.word	0x200018cc

08003fd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fd0:	e7fe      	b.n	8003fd0 <ADC1_IRQHandler>

08003fd2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fdc:	2003      	movs	r0, #3
 8003fde:	f000 fe9d 	bl	8004d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fe2:	200f      	movs	r0, #15
 8003fe4:	f000 f80e 	bl	8004004 <HAL_InitTick>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	71fb      	strb	r3, [r7, #7]
 8003ff2:	e001      	b.n	8003ff8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ff4:	f7ff fca2 	bl	800393c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004010:	4b16      	ldr	r3, [pc, #88]	; (800406c <HAL_InitTick+0x68>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d022      	beq.n	800405e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004018:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_InitTick+0x6c>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_InitTick+0x68>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004024:	fbb1 f3f3 	udiv	r3, r1, r3
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	4618      	mov	r0, r3
 800402e:	f000 feb8 	bl	8004da2 <HAL_SYSTICK_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10f      	bne.n	8004058 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b0f      	cmp	r3, #15
 800403c:	d809      	bhi.n	8004052 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800403e:	2200      	movs	r2, #0
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295
 8004046:	f000 fe74 	bl	8004d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800404a:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_InitTick+0x70>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	e007      	b.n	8004062 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
 8004056:	e004      	b.n	8004062 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e001      	b.n	8004062 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000034 	.word	0x20000034
 8004070:	2000002c 	.word	0x2000002c
 8004074:	20000030 	.word	0x20000030

08004078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_IncTick+0x1c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_IncTick+0x20>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4413      	add	r3, r2
 8004086:	4a03      	ldr	r2, [pc, #12]	; (8004094 <HAL_IncTick+0x1c>)
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000073c 	.word	0x2000073c
 8004098:	20000034 	.word	0x20000034

0800409c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return uwTick;
 80040a0:	4b02      	ldr	r3, [pc, #8]	; (80040ac <HAL_GetTick+0x10>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	2000073c 	.word	0x2000073c

080040b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff fff0 	bl	800409c <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d004      	beq.n	80040d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_Delay+0x40>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040d4:	bf00      	nop
 80040d6:	f7ff ffe1 	bl	800409c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d8f7      	bhi.n	80040d6 <HAL_Delay+0x26>
  {
  }
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000034 	.word	0x20000034

080040f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08e      	sub	sp, #56	; 0x38
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e127      	b.n	8004364 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d115      	bne.n	800414e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004130:	4b8e      	ldr	r3, [pc, #568]	; (800436c <HAL_ADC_Init+0x278>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4a8d      	ldr	r2, [pc, #564]	; (800436c <HAL_ADC_Init+0x278>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6213      	str	r3, [r2, #32]
 800413c:	4b8b      	ldr	r3, [pc, #556]	; (800436c <HAL_ADC_Init+0x278>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fc25 	bl	8003998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 80ff 	bne.w	800435a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004160:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004164:	f023 0302 	bic.w	r3, r3, #2
 8004168:	f043 0202 	orr.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8004170:	4b7f      	ldr	r3, [pc, #508]	; (8004370 <HAL_ADC_Init+0x27c>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	497c      	ldr	r1, [pc, #496]	; (8004370 <HAL_ADC_Init+0x27c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800418a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004192:	4619      	mov	r1, r3
 8004194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004198:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80041ae:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80041b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041bc:	4619      	mov	r1, r3
 80041be:	2302      	movs	r3, #2
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80041d6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	4313      	orrs	r3, r2
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d007      	beq.n	80041f6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80041ee:	4313      	orrs	r3, r2
 80041f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f2:	4313      	orrs	r3, r2
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d04f      	beq.n	80042a4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800420a:	4313      	orrs	r3, r2
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004216:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6912      	ldr	r2, [r2, #16]
 800421c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004220:	d003      	beq.n	800422a <HAL_ADC_Init+0x136>
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6912      	ldr	r2, [r2, #16]
 8004226:	2a01      	cmp	r2, #1
 8004228:	d102      	bne.n	8004230 <HAL_ADC_Init+0x13c>
 800422a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800422e:	e000      	b.n	8004232 <HAL_ADC_Init+0x13e>
 8004230:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8004232:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004236:	4313      	orrs	r3, r2
 8004238:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d125      	bne.n	8004290 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	d114      	bne.n	8004278 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	3b01      	subs	r3, #1
 8004254:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004258:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	fa92 f2a2 	rbit	r2, r2
 8004260:	617a      	str	r2, [r7, #20]
  return result;
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	4093      	lsls	r3, r2
 800426c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004272:	4313      	orrs	r3, r2
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
 8004276:	e00b      	b.n	8004290 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	f043 0201 	orr.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_ADC_Init+0x280>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_ADC_Init+0x284>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c0:	d003      	beq.n	80042ca <HAL_ADC_Init+0x1d6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d119      	bne.n	80042fe <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80042de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	fa92 f2a2 	rbit	r2, r2
 80042e6:	60fa      	str	r2, [r7, #12]
  return result;
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	fab2 f282 	clz	r2, r2
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	fa03 f202 	lsl.w	r2, r3, r2
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
 80042fc:	e007      	b.n	800430e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_ADC_Init+0x288>)
 8004316:	4013      	ands	r3, r2
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	429a      	cmp	r2, r3
 800431c:	d10b      	bne.n	8004336 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	64da      	str	r2, [r3, #76]	; 0x4c
 8004334:	e014      	b.n	8004360 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	f023 0312 	bic.w	r3, r3, #18
 800433e:	f043 0210 	orr.w	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	f043 0201 	orr.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004358:	e002      	b.n	8004360 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004364:	4618      	mov	r0, r3
 8004366:	3738      	adds	r7, #56	; 0x38
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	40012700 	.word	0x40012700
 8004374:	fcfc16ff 	.word	0xfcfc16ff
 8004378:	c0fff18d 	.word	0xc0fff18d
 800437c:	bf80fffe 	.word	0xbf80fffe

08004380 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0bc      	b.n	8004510 <HAL_ADC_DeInit+0x190>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	f043 0202 	orr.w	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fb0c 	bl	80049c0 <ADC_ConversionStop_Disable>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 80a9 	bne.w	8004506 <HAL_ADC_DeInit+0x186>
  {
    /* ========== Reset ADC registers ========== */
    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 021f 	mvn.w	r2, #31
 80043bc:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_ADC_DeInit+0x198>)
 80043ca:	400b      	ands	r3, r1
 80043cc:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
                                    ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
                                    ADC_CR1_AWDCH                                       ));
    
    /* Reset register CR2 */
    ADC_CR2_CLEAR(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_ADC_DeInit+0x19c>)
 80043da:	400b      	ands	r3, r1
 80043dc:	6093      	str	r3, [r2, #8]
    
    /* Reset register SMPR0 */
    ADC_SMPR0_CLEAR(hadc);
 80043de:	bf00      	nop
    
    /* Reset register SMPR1 */
    ADC_SMPR1_CLEAR(hadc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	0d5b      	lsrs	r3, r3, #21
 80043ec:	055b      	lsls	r3, r3, #21
 80043ee:	60d3      	str	r3, [r2, #12]
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80043fe:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
                                      ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
                                      ADC_SMPR2_SMP10                                      ));
    
    /* Reset register SMPR3 */
    CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800440e:	615a      	str	r2, [r3, #20]
                                      ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
                                      ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
                                      ADC_SMPR3_SMP0                                    ));
    
    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004432:	f023 030f 	bic.w	r3, r3, #15
 8004436:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004446:	f023 030f 	bic.w	r3, r3, #15
 800444a:	6213      	str	r3, [r2, #32]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800445a:	f023 030f 	bic.w	r3, r3, #15
 800445e:	6253      	str	r3, [r2, #36]	; 0x24
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800446e:	f023 030f 	bic.w	r3, r3, #15
 8004472:	6293      	str	r3, [r2, #40]	; 0x28
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004482:	f023 030f 	bic.w	r3, r3, #15
 8004486:	62d3      	str	r3, [r2, #44]	; 0x2c
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b23      	ldr	r3, [pc, #140]	; (8004520 <HAL_ADC_DeInit+0x1a0>)
 8004494:	400b      	ands	r3, r1
 8004496:	6313      	str	r3, [r2, #48]	; 0x30
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80044a6:	635a      	str	r2, [r3, #52]	; 0x34
                                     ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
                                     ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
    
    /* Reset register SQR4 */
    CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80044c6:	63da      	str	r2, [r3, #60]	; 0x3c
                                     ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
    
    /* Reset register SQR5 */
    CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
                                     ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
    
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	0d9b      	lsrs	r3, r3, #22
 80044e4:	059b      	lsls	r3, r3, #22
 80044e6:	6453      	str	r3, [r2, #68]	; 0x44
    
    /* Reset registers JDR1, JDR2, JDR3, JDR4 */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <HAL_ADC_DeInit+0x1a4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_ADC_DeInit+0x1a4>)
 80044ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044f2:	6053      	str	r3, [r2, #4]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fabb 	bl	8003a70 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	64da      	str	r2, [r3, #76]	; 0x4c
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	f83c0000 	.word	0xf83c0000
 800451c:	8080f08c 	.word	0x8080f08c
 8004520:	fe0f8000 	.word	0xfe0f8000
 8004524:	40012700 	.word	0x40012700

08004528 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_ADC_Start_DMA+0x1e>
 8004542:	2302      	movs	r3, #2
 8004544:	e074      	b.n	8004630 <HAL_ADC_Start_DMA+0x108>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f9da 	bl	8004908 <ADC_Enable>
 8004554:	4603      	mov	r3, r0
 8004556:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d167      	bne.n	800462e <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004588:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459c:	d106      	bne.n	80045ac <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	f023 0206 	bic.w	r2, r3, #6
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
 80045aa:	e002      	b.n	80045b2 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <HAL_ADC_Start_DMA+0x110>)
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_ADC_Start_DMA+0x114>)
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_ADC_Start_DMA+0x118>)
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045da:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045ea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3358      	adds	r3, #88	; 0x58
 8004606:	4619      	mov	r1, r3
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f000 fd64 	bl	80050d8 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800462c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08004a43 	.word	0x08004a43
 800463c:	08004aeb 	.word	0x08004aeb
 8004640:	08004b07 	.word	0x08004b07

08004644 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x20>
 8004684:	2302      	movs	r3, #2
 8004686:	e134      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x28a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b06      	cmp	r3, #6
 8004696:	d81c      	bhi.n	80046d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	3b05      	subs	r3, #5
 80046aa:	221f      	movs	r2, #31
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	4019      	ands	r1, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	3b05      	subs	r3, #5
 80046c4:	fa00 f203 	lsl.w	r2, r0, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
 80046d0:	e07e      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d81c      	bhi.n	8004714 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	3b23      	subs	r3, #35	; 0x23
 80046ec:	221f      	movs	r2, #31
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	4019      	ands	r1, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	3b23      	subs	r3, #35	; 0x23
 8004706:	fa00 f203 	lsl.w	r2, r0, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c
 8004712:	e05d      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b12      	cmp	r3, #18
 800471a:	d81c      	bhi.n	8004756 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	3b41      	subs	r3, #65	; 0x41
 800472e:	221f      	movs	r2, #31
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	4019      	ands	r1, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b41      	subs	r3, #65	; 0x41
 8004748:	fa00 f203 	lsl.w	r2, r0, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
 8004754:	e03c      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b18      	cmp	r3, #24
 800475c:	d81c      	bhi.n	8004798 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	3b5f      	subs	r3, #95	; 0x5f
 8004770:	221f      	movs	r2, #31
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	4019      	ands	r1, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	3b5f      	subs	r3, #95	; 0x5f
 800478a:	fa00 f203 	lsl.w	r2, r0, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	635a      	str	r2, [r3, #52]	; 0x34
 8004796:	e01b      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	3b7d      	subs	r3, #125	; 0x7d
 80047aa:	221f      	movs	r2, #31
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	4019      	ands	r1, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	3b7d      	subs	r3, #125	; 0x7d
 80047c4:	fa00 f203 	lsl.w	r2, r0, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b09      	cmp	r3, #9
 80047d6:	d81a      	bhi.n	800480e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6959      	ldr	r1, [r3, #20]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	2207      	movs	r2, #7
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	4019      	ands	r1, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6898      	ldr	r0, [r3, #8]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	fa00 f203 	lsl.w	r2, r0, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	615a      	str	r2, [r3, #20]
 800480c:	e042      	b.n	8004894 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b13      	cmp	r3, #19
 8004814:	d81c      	bhi.n	8004850 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6919      	ldr	r1, [r3, #16]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4413      	add	r3, r2
 8004826:	3b1e      	subs	r3, #30
 8004828:	2207      	movs	r2, #7
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	4019      	ands	r1, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6898      	ldr	r0, [r3, #8]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	3b1e      	subs	r3, #30
 8004842:	fa00 f203 	lsl.w	r2, r0, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	e021      	b.n	8004894 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b1a      	cmp	r3, #26
 8004856:	d81c      	bhi.n	8004892 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68d9      	ldr	r1, [r3, #12]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4413      	add	r3, r2
 8004868:	3b3c      	subs	r3, #60	; 0x3c
 800486a:	2207      	movs	r2, #7
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	4019      	ands	r1, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	6898      	ldr	r0, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	3b3c      	subs	r3, #60	; 0x3c
 8004884:	fa00 f203 	lsl.w	r2, r0, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	60da      	str	r2, [r3, #12]
 8004890:	e000      	b.n	8004894 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8004892:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b10      	cmp	r3, #16
 800489a:	d003      	beq.n	80048a4 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80048a0:	2b11      	cmp	r3, #17
 80048a2:	d121      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_ADC_ConfigChannel+0x294>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11b      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_ADC_ConfigChannel+0x294>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_ADC_ConfigChannel+0x294>)
 80048b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048ba:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d111      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_ADC_ConfigChannel+0x298>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <HAL_ADC_ConfigChannel+0x29c>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	0c9a      	lsrs	r2, r3, #18
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80048da:	e002      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	3b01      	subs	r3, #1
 80048e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f9      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	40012700 	.word	0x40012700
 8004900:	2000002c 	.word	0x2000002c
 8004904:	431bde83 	.word	0x431bde83

08004908 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d043      	beq.n	80049ae <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <ADC_Enable+0xb0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a20      	ldr	r2, [pc, #128]	; (80049bc <ADC_Enable+0xb4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	0c9a      	lsrs	r2, r3, #18
 8004942:	4613      	mov	r3, r2
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	4413      	add	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800494a:	e002      	b.n	8004952 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	3b01      	subs	r3, #1
 8004950:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f9      	bne.n	800494c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8004958:	f7ff fba0 	bl	800409c <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800495e:	e01f      	b.n	80049a0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8004960:	f7ff fb9c 	bl	800409c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d918      	bls.n	80049a0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d011      	beq.n	80049a0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f043 0210 	orr.w	r2, r3, #16
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e007      	b.n	80049b0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d1d8      	bne.n	8004960 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	2000002c 	.word	0x2000002c
 80049bc:	431bde83 	.word	0x431bde83

080049c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d12e      	bne.n	8004a38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049ea:	f7ff fb57 	bl	800409c <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049f0:	e01b      	b.n	8004a2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80049f2:	f7ff fb53 	bl	800409c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d914      	bls.n	8004a2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d10d      	bne.n	8004a2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	f043 0210 	orr.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e007      	b.n	8004a3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b40      	cmp	r3, #64	; 0x40
 8004a36:	d0dc      	beq.n	80049f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d13d      	bne.n	8004ad8 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d12c      	bne.n	8004ad0 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d127      	bne.n	8004ad0 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d006      	beq.n	8004a9c <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d119      	bne.n	8004ad0 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0220 	bic.w	r2, r2, #32
 8004aaa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d105      	bne.n	8004ad0 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac8:	f043 0201 	orr.w	r2, r3, #1
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7fe fe59 	bl	8003788 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ad6:	e004      	b.n	8004ae2 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff fda3 	bl	8004644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff fd92 	bl	8004656 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	60d3      	str	r3, [r2, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__NVIC_GetPriorityGrouping+0x18>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db0b      	blt.n	8004bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <__NVIC_EnableIRQ+0x34>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	e000e100 	.word	0xe000e100

08004bd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	db12      	blt.n	8004c10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	f003 021f 	and.w	r2, r3, #31
 8004bf0:	490a      	ldr	r1, [pc, #40]	; (8004c1c <__NVIC_DisableIRQ+0x44>)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bfe:	3320      	adds	r3, #32
 8004c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c04:	f3bf 8f4f 	dsb	sy
}
 8004c08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c0a:	f3bf 8f6f 	isb	sy
}
 8004c0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000e100 	.word	0xe000e100

08004c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	6039      	str	r1, [r7, #0]
 8004c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	db0a      	blt.n	8004c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	490c      	ldr	r1, [pc, #48]	; (8004c6c <__NVIC_SetPriority+0x4c>)
 8004c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	440b      	add	r3, r1
 8004c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c48:	e00a      	b.n	8004c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4908      	ldr	r1, [pc, #32]	; (8004c70 <__NVIC_SetPriority+0x50>)
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	3b04      	subs	r3, #4
 8004c58:	0112      	lsls	r2, r2, #4
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	761a      	strb	r2, [r3, #24]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f1c3 0307 	rsb	r3, r3, #7
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	bf28      	it	cs
 8004c92:	2304      	movcs	r3, #4
 8004c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d902      	bls.n	8004ca4 <NVIC_EncodePriority+0x30>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3b03      	subs	r3, #3
 8004ca2:	e000      	b.n	8004ca6 <NVIC_EncodePriority+0x32>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	43d9      	mvns	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	4313      	orrs	r3, r2
         );
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3724      	adds	r7, #36	; 0x24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce8:	d301      	bcc.n	8004cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00f      	b.n	8004d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <SysTick_Config+0x40>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfc:	f7ff ff90 	bl	8004c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x40>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SysTick_Config+0x40>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff ff09 	bl	8004b3c <__NVIC_SetPriorityGrouping>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d44:	f7ff ff1e 	bl	8004b84 <__NVIC_GetPriorityGrouping>
 8004d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff ff90 	bl	8004c74 <NVIC_EncodePriority>
 8004d54:	4602      	mov	r2, r0
 8004d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff5f 	bl	8004c20 <__NVIC_SetPriority>
}
 8004d62:	bf00      	nop
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff11 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff1f 	bl	8004bd8 <__NVIC_DisableIRQ>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff94 	bl	8004cd8 <SysTick_Config>
 8004db0:	4603      	mov	r3, r0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e014      	b.n	8004df6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	791b      	ldrb	r3, [r3, #4]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d105      	bne.n	8004de2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fe fe69 	bl	8003ab4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	795b      	ldrb	r3, [r3, #5]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_DAC_Start+0x16>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e040      	b.n	8004e96 <HAL_DAC_Start+0x98>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6819      	ldr	r1, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004e48:	2b3c      	cmp	r3, #60	; 0x3c
 8004e4a:	d11d      	bne.n	8004e88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	e014      	b.n	8004e88 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	213c      	movs	r1, #60	; 0x3c
 8004e70:	fa01 f303 	lsl.w	r3, r1, r3
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d107      	bne.n	8004e88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0202 	orr.w	r2, r2, #2
 8004e86:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e004      	b.n	8004ed4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4413      	add	r3, r2
 8004ed0:	3314      	adds	r3, #20
 8004ed2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	795b      	ldrb	r3, [r3, #5]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_DAC_ConfigChannel+0x18>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e03c      	b.n	8004f7a <HAL_DAC_ConfigChannel+0x92>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4013      	ands	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6819      	ldr	r1, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	22c0      	movs	r2, #192	; 0xc0
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43da      	mvns	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	400a      	ands	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e043      	b.n	800501e <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b22      	ldr	r3, [pc, #136]	; (8005028 <HAL_DMA_Init+0xa4>)
 8004f9e:	4413      	add	r3, r2
 8004fa0:	4a22      	ldr	r2, [pc, #136]	; (800502c <HAL_DMA_Init+0xa8>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	009a      	lsls	r2, r3, #2
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <HAL_DMA_Init+0xac>)
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	bffd9ff8 	.word	0xbffd9ff8
 800502c:	cccccccd 	.word	0xcccccccd
 8005030:	40026000 	.word	0x40026000

08005034 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e03c      	b.n	80050c0 <HAL_DMA_DeInit+0x8c>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_DMA_DeInit+0x98>)
 800505e:	4413      	add	r3, r2
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_DMA_DeInit+0x9c>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	091b      	lsrs	r3, r3, #4
 8005068:	009a      	lsls	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_DMA_DeInit+0xa0>)
 8005072:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	f003 021c 	and.w	r2, r3, #28
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	2101      	movs	r1, #1
 800508a:	fa01 f202 	lsl.w	r2, r1, r2
 800508e:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	bffd9ff8 	.word	0xbffd9ff8
 80050d0:	cccccccd 	.word	0xcccccccd
 80050d4:	40026000 	.word	0x40026000

080050d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <HAL_DMA_Start_IT+0x20>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e04b      	b.n	8005190 <HAL_DMA_Start_IT+0xb8>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d13a      	bne.n	8005182 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	68b9      	ldr	r1, [r7, #8]
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f8e0 	bl	80052f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d008      	beq.n	8005150 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 020e 	orr.w	r2, r2, #14
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e00f      	b.n	8005170 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0204 	bic.w	r2, r2, #4
 800515e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 020a 	orr.w	r2, r2, #10
 800516e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e005      	b.n	800518e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800518a:	2302      	movs	r3, #2
 800518c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f003 031c 	and.w	r3, r3, #28
 80051b8:	2204      	movs	r2, #4
 80051ba:	409a      	lsls	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d026      	beq.n	8005212 <HAL_DMA_IRQHandler+0x7a>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d021      	beq.n	8005212 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0320 	and.w	r3, r3, #32
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0204 	bic.w	r2, r2, #4
 80051ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f003 021c 	and.w	r2, r3, #28
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	2104      	movs	r1, #4
 80051fa:	fa01 f202 	lsl.w	r2, r1, r2
 80051fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d071      	beq.n	80052ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005210:	e06c      	b.n	80052ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 031c 	and.w	r3, r3, #28
 800521a:	2202      	movs	r2, #2
 800521c:	409a      	lsls	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4013      	ands	r3, r2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02e      	beq.n	8005284 <HAL_DMA_IRQHandler+0xec>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d029      	beq.n	8005284 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10b      	bne.n	8005256 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 020a 	bic.w	r2, r2, #10
 800524c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f003 021c 	and.w	r2, r3, #28
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	2102      	movs	r1, #2
 8005264:	fa01 f202 	lsl.w	r2, r1, r2
 8005268:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d038      	beq.n	80052ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005282:	e033      	b.n	80052ec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	f003 031c 	and.w	r3, r3, #28
 800528c:	2208      	movs	r2, #8
 800528e:	409a      	lsls	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4013      	ands	r3, r2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d02a      	beq.n	80052ee <HAL_DMA_IRQHandler+0x156>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d025      	beq.n	80052ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 020e 	bic.w	r2, r2, #14
 80052b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f003 021c 	and.w	r2, r3, #28
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
}
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f003 021c 	and.w	r2, r3, #28
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	2101      	movs	r1, #1
 8005312:	fa01 f202 	lsl.w	r2, r1, r2
 8005316:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d108      	bne.n	800533a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005338:	e007      	b.n	800534a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_EXTI_SetConfigLine+0x16>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e08f      	b.n	800548e <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8005380:	2201      	movs	r2, #1
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d052      	beq.n	800543c <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	493c      	ldr	r1, [pc, #240]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
 80053ae:	e006      	b.n	80053be <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 80053b0:	4b39      	ldr	r3, [pc, #228]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	4937      	ldr	r1, [pc, #220]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d006      	beq.n	80053d8 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	4932      	ldr	r1, [pc, #200]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60cb      	str	r3, [r1, #12]
 80053d6:	e006      	b.n	80053e6 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 80053d8:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	492d      	ldr	r1, [pc, #180]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80053ee:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80053f2:	d123      	bne.n	800543c <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80053f4:	4a29      	ldr	r2, [pc, #164]	; (800549c <HAL_EXTI_SetConfigLine+0x148>)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	089b      	lsrs	r3, r3, #2
 80053fa:	3302      	adds	r3, #2
 80053fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005400:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	220f      	movs	r2, #15
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4013      	ands	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800542e:	491b      	ldr	r1, [pc, #108]	; (800549c <HAL_EXTI_SetConfigLine+0x148>)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	3302      	adds	r3, #2
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d006      	beq.n	8005456 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8005448:	4b13      	ldr	r3, [pc, #76]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4912      	ldr	r1, [pc, #72]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]
 8005454:	e006      	b.n	8005464 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	43db      	mvns	r3, r3
 800545e:	490e      	ldr	r1, [pc, #56]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 8005460:	4013      	ands	r3, r2
 8005462:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4908      	ldr	r1, [pc, #32]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	e006      	b.n	800548c <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	43db      	mvns	r3, r3
 8005486:	4904      	ldr	r1, [pc, #16]	; (8005498 <HAL_EXTI_SetConfigLine+0x144>)
 8005488:	4013      	ands	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	40010400 	.word	0x40010400
 800549c:	40010000 	.word	0x40010000

080054a0 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	2201      	movs	r2, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80054b8:	4a03      	ldr	r2, [pc, #12]	; (80054c8 <HAL_EXTI_GenerateSWI+0x28>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6113      	str	r3, [r2, #16]
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr
 80054c8:	40010400 	.word	0x40010400

080054cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80054e2:	e154      	b.n	800578e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2101      	movs	r1, #1
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	4013      	ands	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8146 	beq.w	8005788 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d005      	beq.n	8005514 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005510:	2b02      	cmp	r3, #2
 8005512:	d130      	bne.n	8005576 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800554a:	2201      	movs	r2, #1
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0201 	and.w	r2, r3, #1
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d017      	beq.n	80055b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d123      	bne.n	8005606 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	08da      	lsrs	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3208      	adds	r2, #8
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	220f      	movs	r2, #15
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	08da      	lsrs	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3208      	adds	r2, #8
 8005600:	6939      	ldr	r1, [r7, #16]
 8005602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80a0 	beq.w	8005788 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005648:	4b58      	ldr	r3, [pc, #352]	; (80057ac <HAL_GPIO_Init+0x2e0>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	4a57      	ldr	r2, [pc, #348]	; (80057ac <HAL_GPIO_Init+0x2e0>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	6213      	str	r3, [r2, #32]
 8005654:	4b55      	ldr	r3, [pc, #340]	; (80057ac <HAL_GPIO_Init+0x2e0>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005660:	4a53      	ldr	r2, [pc, #332]	; (80057b0 <HAL_GPIO_Init+0x2e4>)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	3302      	adds	r3, #2
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	220f      	movs	r2, #15
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a4b      	ldr	r2, [pc, #300]	; (80057b4 <HAL_GPIO_Init+0x2e8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d019      	beq.n	80056c0 <HAL_GPIO_Init+0x1f4>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a4a      	ldr	r2, [pc, #296]	; (80057b8 <HAL_GPIO_Init+0x2ec>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_GPIO_Init+0x1f0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a49      	ldr	r2, [pc, #292]	; (80057bc <HAL_GPIO_Init+0x2f0>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00d      	beq.n	80056b8 <HAL_GPIO_Init+0x1ec>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a48      	ldr	r2, [pc, #288]	; (80057c0 <HAL_GPIO_Init+0x2f4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <HAL_GPIO_Init+0x1e8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a47      	ldr	r2, [pc, #284]	; (80057c4 <HAL_GPIO_Init+0x2f8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_GPIO_Init+0x1e4>
 80056ac:	2304      	movs	r3, #4
 80056ae:	e008      	b.n	80056c2 <HAL_GPIO_Init+0x1f6>
 80056b0:	2305      	movs	r3, #5
 80056b2:	e006      	b.n	80056c2 <HAL_GPIO_Init+0x1f6>
 80056b4:	2303      	movs	r3, #3
 80056b6:	e004      	b.n	80056c2 <HAL_GPIO_Init+0x1f6>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e002      	b.n	80056c2 <HAL_GPIO_Init+0x1f6>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_GPIO_Init+0x1f6>
 80056c0:	2300      	movs	r3, #0
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	f002 0203 	and.w	r2, r2, #3
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	4093      	lsls	r3, r2
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80056d2:	4937      	ldr	r1, [pc, #220]	; (80057b0 <HAL_GPIO_Init+0x2e4>)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	3302      	adds	r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056e0:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005704:	4a30      	ldr	r2, [pc, #192]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800570a:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800572e:	4a26      	ldr	r2, [pc, #152]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005734:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	43db      	mvns	r3, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800575e:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005782:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <HAL_GPIO_Init+0x2fc>)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3301      	adds	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	f47f aea3 	bne.w	80054e4 <HAL_GPIO_Init+0x18>
  }
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40020000 	.word	0x40020000
 80057b8:	40020400 	.word	0x40020400
 80057bc:	40020800 	.word	0x40020800
 80057c0:	40020c00 	.word	0x40020c00
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40010400 	.word	0x40010400

080057cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80057e2:	e0b8      	b.n	8005956 <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80057e4:	2201      	movs	r2, #1
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80ab 	beq.w	8005950 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 80057fa:	4a5d      	ldr	r2, [pc, #372]	; (8005970 <HAL_GPIO_DeInit+0x1a4>)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	089b      	lsrs	r3, r3, #2
 8005800:	3302      	adds	r3, #2
 8005802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005806:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	220f      	movs	r2, #15
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a55      	ldr	r2, [pc, #340]	; (8005974 <HAL_GPIO_DeInit+0x1a8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d019      	beq.n	8005858 <HAL_GPIO_DeInit+0x8c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a54      	ldr	r2, [pc, #336]	; (8005978 <HAL_GPIO_DeInit+0x1ac>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_GPIO_DeInit+0x88>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a53      	ldr	r2, [pc, #332]	; (800597c <HAL_GPIO_DeInit+0x1b0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00d      	beq.n	8005850 <HAL_GPIO_DeInit+0x84>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a52      	ldr	r2, [pc, #328]	; (8005980 <HAL_GPIO_DeInit+0x1b4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <HAL_GPIO_DeInit+0x80>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a51      	ldr	r2, [pc, #324]	; (8005984 <HAL_GPIO_DeInit+0x1b8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_GPIO_DeInit+0x7c>
 8005844:	2304      	movs	r3, #4
 8005846:	e008      	b.n	800585a <HAL_GPIO_DeInit+0x8e>
 8005848:	2305      	movs	r3, #5
 800584a:	e006      	b.n	800585a <HAL_GPIO_DeInit+0x8e>
 800584c:	2303      	movs	r3, #3
 800584e:	e004      	b.n	800585a <HAL_GPIO_DeInit+0x8e>
 8005850:	2302      	movs	r3, #2
 8005852:	e002      	b.n	800585a <HAL_GPIO_DeInit+0x8e>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_GPIO_DeInit+0x8e>
 8005858:	2300      	movs	r3, #0
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	f002 0203 	and.w	r2, r2, #3
 8005860:	0092      	lsls	r2, r2, #2
 8005862:	4093      	lsls	r3, r2
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	429a      	cmp	r2, r3
 8005868:	d132      	bne.n	80058d0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800586a:	4b47      	ldr	r3, [pc, #284]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	43db      	mvns	r3, r3
 8005872:	4945      	ldr	r1, [pc, #276]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 8005874:	4013      	ands	r3, r2
 8005876:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005878:	4b43      	ldr	r3, [pc, #268]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	43db      	mvns	r3, r3
 8005880:	4941      	ldr	r1, [pc, #260]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 8005882:	4013      	ands	r3, r2
 8005884:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005886:	4b40      	ldr	r3, [pc, #256]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	43db      	mvns	r3, r3
 800588e:	493e      	ldr	r1, [pc, #248]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 8005890:	4013      	ands	r3, r2
 8005892:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005894:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	43db      	mvns	r3, r3
 800589c:	493a      	ldr	r1, [pc, #232]	; (8005988 <HAL_GPIO_DeInit+0x1bc>)
 800589e:	4013      	ands	r3, r2
 80058a0:	60cb      	str	r3, [r1, #12]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	220f      	movs	r2, #15
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80058b2:	4a2f      	ldr	r2, [pc, #188]	; (8005970 <HAL_GPIO_DeInit+0x1a4>)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	089b      	lsrs	r3, r3, #2
 80058b8:	3302      	adds	r3, #2
 80058ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	43da      	mvns	r2, r3
 80058c2:	482b      	ldr	r0, [pc, #172]	; (8005970 <HAL_GPIO_DeInit+0x1a4>)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	400a      	ands	r2, r1
 80058ca:	3302      	adds	r3, #2
 80058cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	2103      	movs	r1, #3
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	401a      	ands	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	08da      	lsrs	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3208      	adds	r2, #8
 80058ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	220f      	movs	r2, #15
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	08d2      	lsrs	r2, r2, #3
 8005906:	4019      	ands	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3208      	adds	r2, #8
 800590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	2103      	movs	r1, #3
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	43db      	mvns	r3, r3
 8005920:	401a      	ands	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	2101      	movs	r1, #1
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	401a      	ands	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	2103      	movs	r1, #3
 8005944:	fa01 f303 	lsl.w	r3, r1, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	401a      	ands	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3301      	adds	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	f47f af40 	bne.w	80057e4 <HAL_GPIO_DeInit+0x18>
  }
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr
 8005970:	40010000 	.word	0x40010000
 8005974:	40020000 	.word	0x40020000
 8005978:	40020400 	.word	0x40020400
 800597c:	40020800 	.word	0x40020800
 8005980:	40020c00 	.word	0x40020c00
 8005984:	40021000 	.word	0x40021000
 8005988:	40010400 	.word	0x40010400

0800598c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e001      	b.n	80059ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	460b      	mov	r3, r1
 80059c4:	807b      	strh	r3, [r7, #2]
 80059c6:	4613      	mov	r3, r2
 80059c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059ca:	787b      	ldrb	r3, [r7, #1]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80059d6:	e003      	b.n	80059e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	041a      	lsls	r2, r3, #16
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	619a      	str	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b085      	sub	sp, #20
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059fc:	887a      	ldrh	r2, [r7, #2]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4013      	ands	r3, r2
 8005a02:	041a      	lsls	r2, r3, #16
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43d9      	mvns	r1, r3
 8005a08:	887b      	ldrh	r3, [r7, #2]
 8005a0a:	400b      	ands	r3, r1
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	619a      	str	r2, [r3, #24]
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a32:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fd fc9c 	bl	8003378 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40010400 	.word	0x40010400

08005a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e12b      	b.n	8005cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fe f85e 	bl	8003b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ab0:	f002 fdb0 	bl	8008614 <HAL_RCC_GetPCLK1Freq>
 8005ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4a81      	ldr	r2, [pc, #516]	; (8005cc0 <HAL_I2C_Init+0x274>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d807      	bhi.n	8005ad0 <HAL_I2C_Init+0x84>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a80      	ldr	r2, [pc, #512]	; (8005cc4 <HAL_I2C_Init+0x278>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bf94      	ite	ls
 8005ac8:	2301      	movls	r3, #1
 8005aca:	2300      	movhi	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e006      	b.n	8005ade <HAL_I2C_Init+0x92>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a7d      	ldr	r2, [pc, #500]	; (8005cc8 <HAL_I2C_Init+0x27c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	bf94      	ite	ls
 8005ad8:	2301      	movls	r3, #1
 8005ada:	2300      	movhi	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e0e7      	b.n	8005cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a78      	ldr	r2, [pc, #480]	; (8005ccc <HAL_I2C_Init+0x280>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	0c9b      	lsrs	r3, r3, #18
 8005af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a6a      	ldr	r2, [pc, #424]	; (8005cc0 <HAL_I2C_Init+0x274>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d802      	bhi.n	8005b20 <HAL_I2C_Init+0xd4>
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	e009      	b.n	8005b34 <HAL_I2C_Init+0xe8>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b26:	fb02 f303 	mul.w	r3, r2, r3
 8005b2a:	4a69      	ldr	r2, [pc, #420]	; (8005cd0 <HAL_I2C_Init+0x284>)
 8005b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b30:	099b      	lsrs	r3, r3, #6
 8005b32:	3301      	adds	r3, #1
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	495c      	ldr	r1, [pc, #368]	; (8005cc0 <HAL_I2C_Init+0x274>)
 8005b50:	428b      	cmp	r3, r1
 8005b52:	d819      	bhi.n	8005b88 <HAL_I2C_Init+0x13c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1e59      	subs	r1, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b68:	400b      	ands	r3, r1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_I2C_Init+0x138>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1e59      	subs	r1, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b82:	e051      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005b84:	2304      	movs	r3, #4
 8005b86:	e04f      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d111      	bne.n	8005bb4 <HAL_I2C_Init+0x168>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1e58      	subs	r0, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6859      	ldr	r1, [r3, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	440b      	add	r3, r1
 8005b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e012      	b.n	8005bda <HAL_I2C_Init+0x18e>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1e58      	subs	r0, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6859      	ldr	r1, [r3, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	0099      	lsls	r1, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_I2C_Init+0x196>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e022      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10e      	bne.n	8005c08 <HAL_I2C_Init+0x1bc>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1e58      	subs	r0, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6859      	ldr	r1, [r3, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	440b      	add	r3, r1
 8005bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	e00f      	b.n	8005c28 <HAL_I2C_Init+0x1dc>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e58      	subs	r0, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	0099      	lsls	r1, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	6809      	ldr	r1, [r1, #0]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6911      	ldr	r1, [r2, #16]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68d2      	ldr	r2, [r2, #12]
 8005c62:	4311      	orrs	r1, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	000186a0 	.word	0x000186a0
 8005cc4:	001e847f 	.word	0x001e847f
 8005cc8:	003d08ff 	.word	0x003d08ff
 8005ccc:	431bde83 	.word	0x431bde83
 8005cd0:	10624dd3 	.word	0x10624dd3

08005cd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	817b      	strh	r3, [r7, #10]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ce8:	f7fe f9d8 	bl	800409c <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	f040 80e0 	bne.w	8005ebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	2319      	movs	r3, #25
 8005d02:	2201      	movs	r2, #1
 8005d04:	4970      	ldr	r1, [pc, #448]	; (8005ec8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f964 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
 8005d14:	e0d3      	b.n	8005ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_I2C_Master_Transmit+0x50>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e0cc      	b.n	8005ebe <HAL_I2C_Master_Transmit+0x1ea>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d007      	beq.n	8005d4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0201 	orr.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2221      	movs	r2, #33	; 0x21
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2210      	movs	r2, #16
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	893a      	ldrh	r2, [r7, #8]
 8005d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4a50      	ldr	r2, [pc, #320]	; (8005ecc <HAL_I2C_Master_Transmit+0x1f8>)
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d8c:	8979      	ldrh	r1, [r7, #10]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f89c 	bl	8005ed0 <I2C_MasterRequestWrite>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e08d      	b.n	8005ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005db8:	e066      	b.n	8005e88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	6a39      	ldr	r1, [r7, #32]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f9de 	bl	8006180 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00d      	beq.n	8005de6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b04      	cmp	r3, #4
 8005dd0:	d107      	bne.n	8005de2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e06b      	b.n	8005ebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	781a      	ldrb	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d11b      	bne.n	8005e5c <HAL_I2C_Master_Transmit+0x188>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d017      	beq.n	8005e5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	6a39      	ldr	r1, [r7, #32]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f9ce 	bl	8006202 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00d      	beq.n	8005e88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d107      	bne.n	8005e84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e01a      	b.n	8005ebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d194      	bne.n	8005dba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	00100002 	.word	0x00100002
 8005ecc:	ffff0000 	.word	0xffff0000

08005ed0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af02      	add	r7, sp, #8
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	460b      	mov	r3, r1
 8005ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d006      	beq.n	8005efa <I2C_MasterRequestWrite+0x2a>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d003      	beq.n	8005efa <I2C_MasterRequestWrite+0x2a>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ef8:	d108      	bne.n	8005f0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e00b      	b.n	8005f24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	2b12      	cmp	r3, #18
 8005f12:	d107      	bne.n	8005f24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f84f 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00d      	beq.n	8005f58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4a:	d103      	bne.n	8005f54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e035      	b.n	8005fc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f60:	d108      	bne.n	8005f74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f62:	897b      	ldrh	r3, [r7, #10]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f70:	611a      	str	r2, [r3, #16]
 8005f72:	e01b      	b.n	8005fac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f74:	897b      	ldrh	r3, [r7, #10]
 8005f76:	11db      	asrs	r3, r3, #7
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0306 	and.w	r3, r3, #6
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f063 030f 	orn	r3, r3, #15
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	490e      	ldr	r1, [pc, #56]	; (8005fcc <I2C_MasterRequestWrite+0xfc>)
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f875 	bl	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e010      	b.n	8005fc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005fa2:	897b      	ldrh	r3, [r7, #10]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4907      	ldr	r1, [pc, #28]	; (8005fd0 <I2C_MasterRequestWrite+0x100>)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f865 	bl	8006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	00010008 	.word	0x00010008
 8005fd0:	00010002 	.word	0x00010002

08005fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe4:	e025      	b.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d021      	beq.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fe f855 	bl	800409c <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d116      	bne.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e023      	b.n	800607a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10d      	bne.n	8006058 <I2C_WaitOnFlagUntilTimeout+0x84>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	43da      	mvns	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4013      	ands	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	e00c      	b.n	8006072 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	429a      	cmp	r2, r3
 8006076:	d0b6      	beq.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006090:	e051      	b.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a0:	d123      	bne.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f043 0204 	orr.w	r2, r3, #4
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e046      	b.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d021      	beq.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fd ffd3 	bl	800409c <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d116      	bne.n	8006136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e020      	b.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	0c1b      	lsrs	r3, r3, #16
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d10c      	bne.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	43da      	mvns	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf14      	ite	ne
 8006152:	2301      	movne	r3, #1
 8006154:	2300      	moveq	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	e00b      	b.n	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	43da      	mvns	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	bf14      	ite	ne
 800616c:	2301      	movne	r3, #1
 800616e:	2300      	moveq	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d18d      	bne.n	8006092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800618c:	e02d      	b.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f878 	bl	8006284 <I2C_IsAcknowledgeFailed>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e02d      	b.n	80061fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d021      	beq.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fd ff79 	bl	800409c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d116      	bne.n	80061ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e007      	b.n	80061fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b80      	cmp	r3, #128	; 0x80
 80061f6:	d1ca      	bne.n	800618e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800620e:	e02d      	b.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 f837 	bl	8006284 <I2C_IsAcknowledgeFailed>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e02d      	b.n	800627c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d021      	beq.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fd ff38 	bl	800409c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d116      	bne.n	800626c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	f043 0220 	orr.w	r2, r3, #32
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e007      	b.n	800627c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b04      	cmp	r3, #4
 8006278:	d1ca      	bne.n	8006210 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d11b      	bne.n	80062d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e2:	b08b      	sub	sp, #44	; 0x2c
 80062e4:	af06      	add	r7, sp, #24
 80062e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0d0      	b.n	8006494 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f007 fb6a 	bl	800d9e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2203      	movs	r2, #3
 8006310:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f003 f8b7 	bl	800948c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
 8006322:	e04c      	b.n	80063be <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	440b      	add	r3, r1
 8006334:	3301      	adds	r3, #1
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	440b      	add	r3, r1
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	b298      	uxth	r0, r3
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	3336      	adds	r3, #54	; 0x36
 8006362:	4602      	mov	r2, r0
 8006364:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	440b      	add	r3, r1
 8006376:	3303      	adds	r3, #3
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	3338      	adds	r3, #56	; 0x38
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	440b      	add	r3, r1
 800639e:	333c      	adds	r3, #60	; 0x3c
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	440b      	add	r3, r1
 80063b2:	3340      	adds	r3, #64	; 0x40
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	3301      	adds	r3, #1
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	7bfa      	ldrb	r2, [r7, #15]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d3ad      	bcc.n	8006324 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e044      	b.n	8006458 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80063ce:	7bfa      	ldrb	r2, [r7, #15]
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063e4:	7bfa      	ldrb	r2, [r7, #15]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	440b      	add	r3, r1
 80063f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063f6:	7bfa      	ldrb	r2, [r7, #15]
 80063f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063fa:	7bfa      	ldrb	r2, [r7, #15]
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	440b      	add	r3, r1
 8006408:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006410:	7bfa      	ldrb	r2, [r7, #15]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	440b      	add	r3, r1
 800641e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006426:	7bfa      	ldrb	r2, [r7, #15]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	440b      	add	r3, r1
 8006434:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800643c:	7bfa      	ldrb	r2, [r7, #15]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	440b      	add	r3, r1
 800644a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	3301      	adds	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	d3b5      	bcc.n	80063ce <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	687e      	ldr	r6, [r7, #4]
 800646a:	466d      	mov	r5, sp
 800646c:	f106 0410 	add.w	r4, r6, #16
 8006470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	1d33      	adds	r3, r6, #4
 800647a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800647c:	6838      	ldr	r0, [r7, #0]
 800647e:	f003 f81f 	bl	80094c0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800649c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_PCD_Start+0x16>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e016      	b.n	80064e0 <HAL_PCD_Start+0x44>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f002 ffce 	bl	8009460 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80064c4:	2101      	movs	r1, #1
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f007 fa6c 	bl	800d9a4 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f005 fcb3 	bl	800be3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f005 fcab 	bl	800be50 <USB_ReadInterrupts>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006504:	d102      	bne.n	800650c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 faf5 	bl	8006af6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f005 fc9d 	bl	800be50 <USB_ReadInterrupts>
 8006516:	4603      	mov	r3, r0
 8006518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006520:	d112      	bne.n	8006548 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006534:	b292      	uxth	r2, r2
 8006536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f007 facb 	bl	800dad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006540:	2100      	movs	r1, #0
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f8c7 	bl	80066d6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f005 fc7f 	bl	800be50 <USB_ReadInterrupts>
 8006552:	4603      	mov	r3, r0
 8006554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655c:	d10b      	bne.n	8006576 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006566:	b29a      	uxth	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006570:	b292      	uxth	r2, r2
 8006572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f005 fc68 	bl	800be50 <USB_ReadInterrupts>
 8006580:	4603      	mov	r3, r0
 8006582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658a:	d10b      	bne.n	80065a4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006594:	b29a      	uxth	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659e:	b292      	uxth	r2, r2
 80065a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f005 fc51 	bl	800be50 <USB_ReadInterrupts>
 80065ae:	4603      	mov	r3, r0
 80065b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	d126      	bne.n	8006608 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0204 	bic.w	r2, r2, #4
 80065cc:	b292      	uxth	r2, r2
 80065ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0208 	bic.w	r2, r2, #8
 80065e4:	b292      	uxth	r2, r2
 80065e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f007 faac 	bl	800db48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006602:	b292      	uxth	r2, r2
 8006604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f005 fc1f 	bl	800be50 <USB_ReadInterrupts>
 8006612:	4603      	mov	r3, r0
 8006614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661c:	d126      	bne.n	800666c <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0208 	orr.w	r2, r2, #8
 8006630:	b292      	uxth	r2, r2
 8006632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006648:	b292      	uxth	r2, r2
 800664a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006656:	b29a      	uxth	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f042 0204 	orr.w	r2, r2, #4
 8006660:	b292      	uxth	r2, r2
 8006662:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f007 fa54 	bl	800db14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f005 fbed 	bl	800be50 <USB_ReadInterrupts>
 8006676:	4603      	mov	r3, r0
 8006678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800667c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006680:	d10e      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006694:	b292      	uxth	r2, r2
 8006696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f007 fa0d 	bl	800daba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f005 fbd3 	bl	800be50 <USB_ReadInterrupts>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b4:	d10b      	bne.n	80066ce <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066be:	b29a      	uxth	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066c8:	b292      	uxth	r2, r2
 80066ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_PCD_SetAddress+0x1a>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e013      	b.n	8006718 <HAL_PCD_SetAddress+0x42>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f005 fb84 	bl	800be16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	461a      	mov	r2, r3
 800672e:	4603      	mov	r3, r0
 8006730:	70fb      	strb	r3, [r7, #3]
 8006732:	460b      	mov	r3, r1
 8006734:	803b      	strh	r3, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800673e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da0e      	bge.n	8006764 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006746:	78fb      	ldrb	r3, [r7, #3]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	705a      	strb	r2, [r3, #1]
 8006762:	e00e      	b.n	8006782 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	f003 0207 	and.w	r2, r3, #7
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800678e:	883a      	ldrh	r2, [r7, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	78ba      	ldrb	r2, [r7, #2]
 8006798:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d004      	beq.n	80067ac <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067ac:	78bb      	ldrb	r3, [r7, #2]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d102      	bne.n	80067b8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_PCD_EP_Open+0xa6>
 80067c2:	2302      	movs	r3, #2
 80067c4:	e00e      	b.n	80067e4 <HAL_PCD_EP_Open+0xc4>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f002 fe93 	bl	8009500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80067e2:	7afb      	ldrb	r3, [r7, #11]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	da0e      	bge.n	800681e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4413      	add	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	705a      	strb	r2, [r3, #1]
 800681c:	e00e      	b.n	800683c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	f003 0207 	and.w	r2, r3, #7
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	b2da      	uxtb	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_PCD_EP_Close+0x6a>
 8006852:	2302      	movs	r3, #2
 8006854:	e00e      	b.n	8006874 <HAL_PCD_EP_Close+0x88>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68f9      	ldr	r1, [r7, #12]
 8006864:	4618      	mov	r0, r3
 8006866:	f003 f9b5 	bl	8009bd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	460b      	mov	r3, r1
 800688a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800688c:	7afb      	ldrb	r3, [r7, #11]
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2200      	movs	r2, #0
 80068b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2200      	movs	r2, #0
 80068ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068c8:	7afb      	ldrb	r3, [r7, #11]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	4618      	mov	r0, r3
 80068da:	f003 fb67 	bl	8009fac <USB_EPStartXfer>
 80068de:	e005      	b.n	80068ec <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f003 fb60 	bl	8009fac <USB_EPStartXfer>
  }

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	f003 0207 	and.w	r2, r3, #7
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	440b      	add	r3, r1
 8006914:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006918:	681b      	ldr	r3, [r3, #0]
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr

08006924 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	460b      	mov	r3, r1
 8006932:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2200      	movs	r2, #0
 8006968:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2201      	movs	r2, #1
 800696e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	b2da      	uxtb	r2, r3
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6979      	ldr	r1, [r7, #20]
 800698c:	4618      	mov	r0, r3
 800698e:	f003 fb0d 	bl	8009fac <USB_EPStartXfer>
 8006992:	e005      	b.n	80069a0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	4618      	mov	r0, r3
 800699c:	f003 fb06 	bl	8009fac <USB_EPStartXfer>
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	f003 0207 	and.w	r2, r3, #7
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d901      	bls.n	80069c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e03e      	b.n	8006a46 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da0e      	bge.n	80069ee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 0307 	and.w	r3, r3, #7
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	705a      	strb	r2, [r3, #1]
 80069ec:	e00c      	b.n	8006a08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069ee:	78fa      	ldrb	r2, [r7, #3]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_PCD_EP_SetStall+0x7e>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e00e      	b.n	8006a46 <HAL_PCD_EP_SetStall+0x9c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f005 f8f0 	bl	800bc1c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d901      	bls.n	8006a6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e040      	b.n	8006aee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da0e      	bge.n	8006a92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	705a      	strb	r2, [r3, #1]
 8006a90:	e00e      	b.n	8006ab0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	f003 0207 	and.w	r2, r3, #7
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_PCD_EP_ClrStall+0x82>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e00e      	b.n	8006aee <HAL_PCD_EP_ClrStall+0xa0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68f9      	ldr	r1, [r7, #12]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f005 f8ec 	bl	800bcbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b08e      	sub	sp, #56	; 0x38
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006afe:	e2ec      	b.n	80070da <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b08:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006b0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006b16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 8161 	bne.w	8006de2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006b20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d152      	bne.n	8006bd0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	81fb      	strh	r3, [r7, #14]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3328      	adds	r3, #40	; 0x28
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4413      	add	r3, r2
 8006b68:	3302      	adds	r3, #2
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	695a      	ldr	r2, [r3, #20]
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	441a      	add	r2, r3
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f006 ff78 	bl	800da86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 829b 	beq.w	80070da <PCD_EP_ISR_Handler+0x5e4>
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f040 8296 	bne.w	80070da <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006bce:	e284      	b.n	80070da <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006be0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d034      	beq.n	8006c54 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3306      	adds	r3, #6
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f005 f965 	bl	800bef8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	823b      	strh	r3, [r7, #16]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	8a3a      	ldrh	r2, [r7, #16]
 8006c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c48:	b292      	uxth	r2, r2
 8006c4a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f006 feed 	bl	800da2c <HAL_PCD_SetupStageCallback>
 8006c52:	e242      	b.n	80070da <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006c54:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f280 823e 	bge.w	80070da <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	83bb      	strh	r3, [r7, #28]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	8bba      	ldrh	r2, [r7, #28]
 8006c74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c78:	b292      	uxth	r2, r2
 8006c7a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4413      	add	r3, r2
 8006c90:	3306      	adds	r3, #6
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6812      	ldr	r2, [r2, #0]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d019      	beq.n	8006ce4 <PCD_EP_ISR_Handler+0x1ee>
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d015      	beq.n	8006ce4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	6959      	ldr	r1, [r3, #20]
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f005 f915 	bl	800bef8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006cdc:	2100      	movs	r1, #0
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f006 feb6 	bl	800da50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 81f2 	bne.w	80070da <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d112      	bne.n	8006d44 <PCD_EP_ISR_Handler+0x24e>
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	801a      	strh	r2, [r3, #0]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	801a      	strh	r2, [r3, #0]
 8006d42:	e02f      	b.n	8006da4 <PCD_EP_ISR_Handler+0x2ae>
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4a:	d813      	bhi.n	8006d74 <PCD_EP_ISR_Handler+0x27e>
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <PCD_EP_ISR_Handler+0x270>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	3301      	adds	r3, #1
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	029b      	lsls	r3, r3, #10
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	801a      	strh	r2, [r3, #0]
 8006d72:	e017      	b.n	8006da4 <PCD_EP_ISR_Handler+0x2ae>
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <PCD_EP_ISR_Handler+0x298>
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	029b      	lsls	r3, r3, #10
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db4:	827b      	strh	r3, [r7, #18]
 8006db6:	8a7b      	ldrh	r3, [r7, #18]
 8006db8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dbc:	827b      	strh	r3, [r7, #18]
 8006dbe:	8a7b      	ldrh	r3, [r7, #18]
 8006dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dc4:	827b      	strh	r3, [r7, #18]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	8a7b      	ldrh	r3, [r7, #18]
 8006dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	8013      	strh	r3, [r2, #0]
 8006de0:	e17b      	b.n	80070da <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006df4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f280 80ea 	bge.w	8006fd2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e14:	4013      	ands	r3, r2
 8006e16:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006e30:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4413      	add	r3, r2
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	7b1b      	ldrb	r3, [r3, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d122      	bne.n	8006e94 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4413      	add	r3, r2
 8006e62:	3306      	adds	r3, #6
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e76:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006e78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8087 	beq.w	8006f8e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	6959      	ldr	r1, [r3, #20]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	88da      	ldrh	r2, [r3, #6]
 8006e8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e8e:	f005 f833 	bl	800bef8 <USB_ReadPMA>
 8006e92:	e07c      	b.n	8006f8e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	78db      	ldrb	r3, [r3, #3]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d108      	bne.n	8006eae <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006e9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f927 	bl	80070f6 <HAL_PCD_EP_DB_Receive>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006eac:	e06f      	b.n	8006f8e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec8:	847b      	strh	r3, [r7, #34]	; 0x22
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d021      	beq.n	8006f4c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f30:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006f32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02a      	beq.n	8006f8e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	6959      	ldr	r1, [r3, #20]
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	891a      	ldrh	r2, [r3, #8]
 8006f44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f46:	f004 ffd7 	bl	800bef8 <USB_ReadPMA>
 8006f4a:	e020      	b.n	8006f8e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	4413      	add	r3, r2
 8006f60:	3306      	adds	r3, #6
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f74:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006f76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	6959      	ldr	r1, [r3, #20]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	895a      	ldrh	r2, [r3, #10]
 8006f88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f8a:	f004 ffb5 	bl	800bef8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	69da      	ldr	r2, [r3, #28]
 8006f92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006f94:	441a      	add	r2, r3
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fa0:	441a      	add	r2, r3
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <PCD_EP_ISR_Handler+0x4c2>
 8006fae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d206      	bcs.n	8006fc6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f006 fd46 	bl	800da50 <HAL_PCD_DataOutStageCallback>
 8006fc4:	e005      	b.n	8006fd2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 ffed 	bl	8009fac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006fd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d07e      	beq.n	80070da <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8006fdc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	843b      	strh	r3, [r7, #32]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	441a      	add	r2, r3
 800701a:	8c3b      	ldrh	r3, [r7, #32]
 800701c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	78db      	ldrb	r3, [r3, #3]
 800702c:	2b03      	cmp	r3, #3
 800702e:	d00c      	beq.n	800704a <PCD_EP_ISR_Handler+0x554>
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800703c:	2b02      	cmp	r3, #2
 800703e:	d146      	bne.n	80070ce <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007040:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d141      	bne.n	80070ce <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007052:	b29b      	uxth	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	4413      	add	r3, r2
 800705e:	3302      	adds	r3, #2
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007072:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	699a      	ldr	r2, [r3, #24]
 8007078:	8bfb      	ldrh	r3, [r7, #30]
 800707a:	429a      	cmp	r2, r3
 800707c:	d906      	bls.n	800708c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	1ad2      	subs	r2, r2, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	619a      	str	r2, [r3, #24]
 800708a:	e002      	b.n	8007092 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	2200      	movs	r2, #0
 8007090:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f006 fcf0 	bl	800da86 <HAL_PCD_DataInStageCallback>
 80070a6:	e018      	b.n	80070da <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	695a      	ldr	r2, [r3, #20]
 80070ac:	8bfb      	ldrh	r3, [r7, #30]
 80070ae:	441a      	add	r2, r3
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	8bfb      	ldrh	r3, [r7, #30]
 80070ba:	441a      	add	r2, r3
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f002 ff70 	bl	8009fac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80070cc:	e005      	b.n	80070da <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80070ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070d0:	461a      	mov	r2, r3
 80070d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f91b 	bl	8007310 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	b21b      	sxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f6ff ad0a 	blt.w	8006b00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3738      	adds	r7, #56	; 0x38
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b088      	sub	sp, #32
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007104:	88fb      	ldrh	r3, [r7, #6]
 8007106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d07e      	beq.n	800720c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4413      	add	r3, r2
 8007122:	3302      	adds	r3, #2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007136:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	8b7b      	ldrh	r3, [r7, #26]
 800713e:	429a      	cmp	r2, r3
 8007140:	d306      	bcc.n	8007150 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	8b7b      	ldrh	r3, [r7, #26]
 8007148:	1ad2      	subs	r2, r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	619a      	str	r2, [r3, #24]
 800714e:	e002      	b.n	8007156 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2200      	movs	r2, #0
 8007154:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d123      	bne.n	80071a6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007178:	833b      	strh	r3, [r7, #24]
 800717a:	8b3b      	ldrh	r3, [r7, #24]
 800717c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007180:	833b      	strh	r3, [r7, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	441a      	add	r2, r3
 8007190:	8b3b      	ldrh	r3, [r7, #24]
 8007192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800719a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01f      	beq.n	80071f0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ca:	82fb      	strh	r3, [r7, #22]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	8afb      	ldrh	r3, [r7, #22]
 80071dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80071f0:	8b7b      	ldrh	r3, [r7, #26]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8087 	beq.w	8007306 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6959      	ldr	r1, [r3, #20]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	891a      	ldrh	r2, [r3, #8]
 8007204:	8b7b      	ldrh	r3, [r7, #26]
 8007206:	f004 fe77 	bl	800bef8 <USB_ReadPMA>
 800720a:	e07c      	b.n	8007306 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007214:	b29b      	uxth	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	3306      	adds	r3, #6
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007234:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	8b7b      	ldrh	r3, [r7, #26]
 800723c:	429a      	cmp	r2, r3
 800723e:	d306      	bcc.n	800724e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	8b7b      	ldrh	r3, [r7, #26]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	619a      	str	r2, [r3, #24]
 800724c:	e002      	b.n	8007254 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d123      	bne.n	80072a4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007276:	83fb      	strh	r3, [r7, #30]
 8007278:	8bfb      	ldrh	r3, [r7, #30]
 800727a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800727e:	83fb      	strh	r3, [r7, #30]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	8bfb      	ldrh	r3, [r7, #30]
 8007290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800729c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d11f      	bne.n	80072ee <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	83bb      	strh	r3, [r7, #28]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	8bbb      	ldrh	r3, [r7, #28]
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80072ee:	8b7b      	ldrh	r3, [r7, #26]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	6959      	ldr	r1, [r3, #20]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	895a      	ldrh	r2, [r3, #10]
 8007300:	8b7b      	ldrh	r3, [r7, #26]
 8007302:	f004 fdf9 	bl	800bef8 <USB_ReadPMA>
    }
  }

  return count;
 8007306:	8b7b      	ldrh	r3, [r7, #26]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b0a2      	sub	sp, #136	; 0x88
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 81c7 	beq.w	80076b8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007332:	b29b      	uxth	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	3302      	adds	r3, #2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007352:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800735e:	429a      	cmp	r2, r3
 8007360:	d907      	bls.n	8007372 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	619a      	str	r2, [r3, #24]
 8007370:	e002      	b.n	8007378 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 80b9 	bne.w	80074f4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d126      	bne.n	80073d8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	4413      	add	r3, r2
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	011a      	lsls	r2, r3, #4
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	4413      	add	r3, r2
 80073ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073bc:	b29a      	uxth	r2, r3
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e01a      	b.n	800740e <HAL_PCD_EP_DB_Transmit+0xfe>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d116      	bne.n	800740e <HAL_PCD_EP_DB_Transmit+0xfe>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	633b      	str	r3, [r7, #48]	; 0x30
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	4413      	add	r3, r2
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	011a      	lsls	r2, r3, #4
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	4413      	add	r3, r2
 8007402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	2200      	movs	r2, #0
 800740c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	623b      	str	r3, [r7, #32]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d126      	bne.n	800746a <HAL_PCD_EP_DB_Transmit+0x15a>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742a:	b29b      	uxth	r3, r3
 800742c:	461a      	mov	r2, r3
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	4413      	add	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	011a      	lsls	r2, r3, #4
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	4413      	add	r3, r2
 800743e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	b29b      	uxth	r3, r3
 800744a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800744e:	b29a      	uxth	r2, r3
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29b      	uxth	r3, r3
 800745a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007462:	b29a      	uxth	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	801a      	strh	r2, [r3, #0]
 8007468:	e017      	b.n	800749a <HAL_PCD_EP_DB_Transmit+0x18a>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d113      	bne.n	800749a <HAL_PCD_EP_DB_Transmit+0x18a>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747a:	b29b      	uxth	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	4413      	add	r3, r2
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	011a      	lsls	r2, r3, #4
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	4413      	add	r3, r2
 800748e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2200      	movs	r2, #0
 8007498:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	4619      	mov	r1, r3
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f006 faf0 	bl	800da86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 82d4 	beq.w	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	827b      	strh	r3, [r7, #18]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	441a      	add	r2, r3
 80074dc:	8a7b      	ldrh	r3, [r7, #18]
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]
 80074f2:	e2b2      	b.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d021      	beq.n	8007542 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007518:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	441a      	add	r2, r3
 800752a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800752e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800753a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753e:	b29b      	uxth	r3, r3
 8007540:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007548:	2b01      	cmp	r3, #1
 800754a:	f040 8286 	bne.w	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007556:	441a      	add	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	69da      	ldr	r2, [r3, #28]
 8007560:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007564:	441a      	add	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6a1a      	ldr	r2, [r3, #32]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d309      	bcc.n	800758a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6a1a      	ldr	r2, [r3, #32]
 8007580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	621a      	str	r2, [r3, #32]
 8007588:	e015      	b.n	80075b6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d107      	bne.n	80075a2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80075a0:	e009      	b.n	80075b6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d155      	bne.n	800766a <HAL_PCD_EP_DB_Transmit+0x35a>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	4413      	add	r3, r2
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	011a      	lsls	r2, r3, #4
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	4413      	add	r3, r2
 80075e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
 80075e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d112      	bne.n	8007612 <HAL_PCD_EP_DB_Transmit+0x302>
 80075ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fa:	801a      	strh	r2, [r3, #0]
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760a:	b29a      	uxth	r2, r3
 800760c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e047      	b.n	80076a2 <HAL_PCD_EP_DB_Transmit+0x392>
 8007612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007614:	2b3e      	cmp	r3, #62	; 0x3e
 8007616:	d811      	bhi.n	800763c <HAL_PCD_EP_DB_Transmit+0x32c>
 8007618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	64bb      	str	r3, [r7, #72]	; 0x48
 800761e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <HAL_PCD_EP_DB_Transmit+0x31e>
 8007628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800762a:	3301      	adds	r3, #1
 800762c:	64bb      	str	r3, [r7, #72]	; 0x48
 800762e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29a      	uxth	r2, r3
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e032      	b.n	80076a2 <HAL_PCD_EP_DB_Transmit+0x392>
 800763c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	64bb      	str	r3, [r7, #72]	; 0x48
 8007642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <HAL_PCD_EP_DB_Transmit+0x342>
 800764c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764e:	3b01      	subs	r3, #1
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
 8007652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007654:	b29b      	uxth	r3, r3
 8007656:	029b      	lsls	r3, r3, #10
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	e01b      	b.n	80076a2 <HAL_PCD_EP_DB_Transmit+0x392>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d117      	bne.n	80076a2 <HAL_PCD_EP_DB_Transmit+0x392>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	643b      	str	r3, [r7, #64]	; 0x40
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007680:	b29b      	uxth	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	4413      	add	r3, r2
 8007688:	643b      	str	r3, [r7, #64]	; 0x40
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	011a      	lsls	r2, r3, #4
 8007690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007692:	4413      	add	r3, r2
 8007694:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	b29a      	uxth	r2, r3
 800769e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6959      	ldr	r1, [r3, #20]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	891a      	ldrh	r2, [r3, #8]
 80076ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f004 fbdc 	bl	800be6e <USB_WritePMA>
 80076b6:	e1d0      	b.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	461a      	mov	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	4413      	add	r3, r2
 80076cc:	3306      	adds	r3, #6
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d307      	bcc.n	8007700 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	619a      	str	r2, [r3, #24]
 80076fe:	e002      	b.n	8007706 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2200      	movs	r2, #0
 8007704:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 80c4 	bne.w	8007898 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d126      	bne.n	8007766 <HAL_PCD_EP_DB_Transmit+0x456>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007726:	b29b      	uxth	r3, r3
 8007728:	461a      	mov	r2, r3
 800772a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772c:	4413      	add	r3, r2
 800772e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	011a      	lsls	r2, r3, #4
 8007736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007738:	4413      	add	r3, r2
 800773a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800773e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800774a:	b29a      	uxth	r2, r3
 800774c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007752:	881b      	ldrh	r3, [r3, #0]
 8007754:	b29b      	uxth	r3, r3
 8007756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800775a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775e:	b29a      	uxth	r2, r3
 8007760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e01a      	b.n	800779c <HAL_PCD_EP_DB_Transmit+0x48c>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d116      	bne.n	800779c <HAL_PCD_EP_DB_Transmit+0x48c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	677b      	str	r3, [r7, #116]	; 0x74
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007782:	4413      	add	r3, r2
 8007784:	677b      	str	r3, [r7, #116]	; 0x74
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	011a      	lsls	r2, r3, #4
 800778c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800778e:	4413      	add	r3, r2
 8007790:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007794:	673b      	str	r3, [r7, #112]	; 0x70
 8007796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007798:	2200      	movs	r2, #0
 800779a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d12f      	bne.n	800780a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077c2:	4413      	add	r3, r2
 80077c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077d2:	4413      	add	r3, r2
 80077d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ee:	801a      	strh	r2, [r3, #0]
 80077f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007800:	b29a      	uxth	r2, r3
 8007802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e017      	b.n	800783a <HAL_PCD_EP_DB_Transmit+0x52a>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	785b      	ldrb	r3, [r3, #1]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d113      	bne.n	800783a <HAL_PCD_EP_DB_Transmit+0x52a>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781a:	b29b      	uxth	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007820:	4413      	add	r3, r2
 8007822:	67bb      	str	r3, [r7, #120]	; 0x78
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	011a      	lsls	r2, r3, #4
 800782a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800782c:	4413      	add	r3, r2
 800782e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007832:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007836:	2200      	movs	r2, #0
 8007838:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f006 f920 	bl	800da86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007846:	88fb      	ldrh	r3, [r7, #6]
 8007848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8104 	bne.w	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	b29b      	uxth	r3, r3
 8007864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	461a      	mov	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800788e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]
 8007896:	e0e0      	b.n	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d121      	bne.n	80078e6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80078d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	f040 80b4 	bne.w	8007a5a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078fa:	441a      	add	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	69da      	ldr	r2, [r3, #28]
 8007904:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007908:	441a      	add	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6a1a      	ldr	r2, [r3, #32]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	429a      	cmp	r2, r3
 8007918:	d309      	bcc.n	800792e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	621a      	str	r2, [r3, #32]
 800792c:	e015      	b.n	800795a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d107      	bne.n	8007946 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800793a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007944:	e009      	b.n	800795a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	667b      	str	r3, [r7, #100]	; 0x64
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d155      	bne.n	8007a14 <HAL_PCD_EP_DB_Transmit+0x704>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800797c:	4413      	add	r3, r2
 800797e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	011a      	lsls	r2, r3, #4
 8007986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007988:	4413      	add	r3, r2
 800798a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800798e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007992:	2b00      	cmp	r3, #0
 8007994:	d112      	bne.n	80079bc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	e044      	b.n	8007a46 <HAL_PCD_EP_DB_Transmit+0x736>
 80079bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079be:	2b3e      	cmp	r3, #62	; 0x3e
 80079c0:	d811      	bhi.n	80079e6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80079c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c4:	085b      	lsrs	r3, r3, #1
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
 80079c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d002      	beq.n	80079d8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80079d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d4:	3301      	adds	r3, #1
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54
 80079d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079da:	b29b      	uxth	r3, r3
 80079dc:	029b      	lsls	r3, r3, #10
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079e2:	801a      	strh	r2, [r3, #0]
 80079e4:	e02f      	b.n	8007a46 <HAL_PCD_EP_DB_Transmit+0x736>
 80079e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	657b      	str	r3, [r7, #84]	; 0x54
 80079ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d102      	bne.n	80079fc <HAL_PCD_EP_DB_Transmit+0x6ec>
 80079f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079f8:	3b01      	subs	r3, #1
 80079fa:	657b      	str	r3, [r7, #84]	; 0x54
 80079fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	e018      	b.n	8007a46 <HAL_PCD_EP_DB_Transmit+0x736>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d114      	bne.n	8007a46 <HAL_PCD_EP_DB_Transmit+0x736>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	461a      	mov	r2, r3
 8007a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a2a:	4413      	add	r3, r2
 8007a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	011a      	lsls	r2, r3, #4
 8007a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a36:	4413      	add	r3, r2
 8007a38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6959      	ldr	r1, [r3, #20]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	895a      	ldrh	r2, [r3, #10]
 8007a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	f004 fa0a 	bl	800be6e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	881b      	ldrh	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a74:	823b      	strh	r3, [r7, #16]
 8007a76:	8a3b      	ldrh	r3, [r7, #16]
 8007a78:	f083 0310 	eor.w	r3, r3, #16
 8007a7c:	823b      	strh	r3, [r7, #16]
 8007a7e:	8a3b      	ldrh	r3, [r7, #16]
 8007a80:	f083 0320 	eor.w	r3, r3, #32
 8007a84:	823b      	strh	r3, [r7, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	8a3b      	ldrh	r3, [r7, #16]
 8007a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3788      	adds	r7, #136	; 0x88
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	817b      	strh	r3, [r7, #10]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007ac6:	897b      	ldrh	r3, [r7, #10]
 8007ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ad2:	897b      	ldrh	r3, [r7, #10]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e009      	b.n	8007afe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007aea:	897a      	ldrh	r2, [r7, #10]
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d107      	bne.n	8007b14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2200      	movs	r2, #0
 8007b08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	80da      	strh	r2, [r3, #6]
 8007b12:	e00b      	b.n	8007b2c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2201      	movs	r2, #1
 8007b18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	0c1b      	lsrs	r3, r3, #16
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e31d      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b4a:	4b94      	ldr	r3, [pc, #592]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 030c 	and.w	r3, r3, #12
 8007b52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b54:	4b91      	ldr	r3, [pc, #580]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d07b      	beq.n	8007c62 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d006      	beq.n	8007b7e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	2b0c      	cmp	r3, #12
 8007b74:	d10f      	bne.n	8007b96 <HAL_RCC_OscConfig+0x5e>
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7c:	d10b      	bne.n	8007b96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b7e:	4b87      	ldr	r3, [pc, #540]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d06a      	beq.n	8007c60 <HAL_RCC_OscConfig+0x128>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d166      	bne.n	8007c60 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e2f7      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d106      	bne.n	8007bac <HAL_RCC_OscConfig+0x74>
 8007b9e:	4b7f      	ldr	r3, [pc, #508]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a7e      	ldr	r2, [pc, #504]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e02d      	b.n	8007c08 <HAL_RCC_OscConfig+0xd0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10c      	bne.n	8007bce <HAL_RCC_OscConfig+0x96>
 8007bb4:	4b79      	ldr	r3, [pc, #484]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a78      	ldr	r2, [pc, #480]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	4b76      	ldr	r3, [pc, #472]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a75      	ldr	r2, [pc, #468]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	e01c      	b.n	8007c08 <HAL_RCC_OscConfig+0xd0>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	d10c      	bne.n	8007bf0 <HAL_RCC_OscConfig+0xb8>
 8007bd6:	4b71      	ldr	r3, [pc, #452]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a70      	ldr	r2, [pc, #448]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	4b6e      	ldr	r3, [pc, #440]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6d      	ldr	r2, [pc, #436]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	e00b      	b.n	8007c08 <HAL_RCC_OscConfig+0xd0>
 8007bf0:	4b6a      	ldr	r3, [pc, #424]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a69      	ldr	r2, [pc, #420]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	4b67      	ldr	r3, [pc, #412]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a66      	ldr	r2, [pc, #408]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d013      	beq.n	8007c38 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c10:	f7fc fa44 	bl	800409c <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c18:	f7fc fa40 	bl	800409c <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b64      	cmp	r3, #100	; 0x64
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e2ad      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c2a:	4b5c      	ldr	r3, [pc, #368]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f0      	beq.n	8007c18 <HAL_RCC_OscConfig+0xe0>
 8007c36:	e014      	b.n	8007c62 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c38:	f7fc fa30 	bl	800409c <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c40:	f7fc fa2c 	bl	800409c <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b64      	cmp	r3, #100	; 0x64
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e299      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c52:	4b52      	ldr	r3, [pc, #328]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f0      	bne.n	8007c40 <HAL_RCC_OscConfig+0x108>
 8007c5e:	e000      	b.n	8007c62 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d05a      	beq.n	8007d24 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	2b0c      	cmp	r3, #12
 8007c78:	d119      	bne.n	8007cae <HAL_RCC_OscConfig+0x176>
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d116      	bne.n	8007cae <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c80:	4b46      	ldr	r3, [pc, #280]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_OscConfig+0x160>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d001      	beq.n	8007c98 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e276      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c98:	4b40      	ldr	r3, [pc, #256]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	493d      	ldr	r1, [pc, #244]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cac:	e03a      	b.n	8007d24 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d020      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cb6:	4b3a      	ldr	r3, [pc, #232]	; (8007da0 <HAL_RCC_OscConfig+0x268>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cbc:	f7fc f9ee 	bl	800409c <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cc4:	f7fc f9ea 	bl	800409c <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e257      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cd6:	4b31      	ldr	r3, [pc, #196]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce2:	4b2e      	ldr	r3, [pc, #184]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	492a      	ldr	r1, [pc, #168]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	604b      	str	r3, [r1, #4]
 8007cf6:	e015      	b.n	8007d24 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cf8:	4b29      	ldr	r3, [pc, #164]	; (8007da0 <HAL_RCC_OscConfig+0x268>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfe:	f7fc f9cd 	bl	800409c <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d06:	f7fc f9c9 	bl	800409c <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e236      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d18:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f0      	bne.n	8007d06 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80b8 	beq.w	8007ea2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d170      	bne.n	8007e1a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d38:	4b18      	ldr	r3, [pc, #96]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_RCC_OscConfig+0x218>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e21a      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a1a      	ldr	r2, [r3, #32]
 8007d54:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d921      	bls.n	8007da4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fc7d 	bl	8008664 <RCC_SetFlashLatencyFromMSIRange>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e208      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d74:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	4906      	ldr	r1, [pc, #24]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	061b      	lsls	r3, r3, #24
 8007d94:	4901      	ldr	r1, [pc, #4]	; (8007d9c <HAL_RCC_OscConfig+0x264>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	604b      	str	r3, [r1, #4]
 8007d9a:	e020      	b.n	8007dde <HAL_RCC_OscConfig+0x2a6>
 8007d9c:	40023800 	.word	0x40023800
 8007da0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007da4:	4b99      	ldr	r3, [pc, #612]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	4996      	ldr	r1, [pc, #600]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007db6:	4b95      	ldr	r3, [pc, #596]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	061b      	lsls	r3, r3, #24
 8007dc4:	4991      	ldr	r1, [pc, #580]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 fc48 	bl	8008664 <RCC_SetFlashLatencyFromMSIRange>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e1d3      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	0b5b      	lsrs	r3, r3, #13
 8007de4:	3301      	adds	r3, #1
 8007de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007dee:	4a87      	ldr	r2, [pc, #540]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007df0:	6892      	ldr	r2, [r2, #8]
 8007df2:	0912      	lsrs	r2, r2, #4
 8007df4:	f002 020f 	and.w	r2, r2, #15
 8007df8:	4985      	ldr	r1, [pc, #532]	; (8008010 <HAL_RCC_OscConfig+0x4d8>)
 8007dfa:	5c8a      	ldrb	r2, [r1, r2]
 8007dfc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007dfe:	4a85      	ldr	r2, [pc, #532]	; (8008014 <HAL_RCC_OscConfig+0x4dc>)
 8007e00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007e02:	4b85      	ldr	r3, [pc, #532]	; (8008018 <HAL_RCC_OscConfig+0x4e0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fc f8fc 	bl	8004004 <HAL_InitTick>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d045      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	e1b5      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d029      	beq.n	8007e76 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e22:	4b7e      	ldr	r3, [pc, #504]	; (800801c <HAL_RCC_OscConfig+0x4e4>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e28:	f7fc f938 	bl	800409c <HAL_GetTick>
 8007e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e30:	f7fc f934 	bl	800409c <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e1a1      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007e42:	4b72      	ldr	r3, [pc, #456]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e4e:	4b6f      	ldr	r3, [pc, #444]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	496c      	ldr	r1, [pc, #432]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e60:	4b6a      	ldr	r3, [pc, #424]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	061b      	lsls	r3, r3, #24
 8007e6e:	4967      	ldr	r1, [pc, #412]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	604b      	str	r3, [r1, #4]
 8007e74:	e015      	b.n	8007ea2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007e76:	4b69      	ldr	r3, [pc, #420]	; (800801c <HAL_RCC_OscConfig+0x4e4>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e7c:	f7fc f90e 	bl	800409c <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e84:	f7fc f90a 	bl	800409c <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e177      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007e96:	4b5d      	ldr	r3, [pc, #372]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f0      	bne.n	8007e84 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d030      	beq.n	8007f10 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d016      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eb6:	4b5a      	ldr	r3, [pc, #360]	; (8008020 <HAL_RCC_OscConfig+0x4e8>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ebc:	f7fc f8ee 	bl	800409c <HAL_GetTick>
 8007ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec4:	f7fc f8ea 	bl	800409c <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e157      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ed6:	4b4d      	ldr	r3, [pc, #308]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0f0      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x38c>
 8007ee2:	e015      	b.n	8007f10 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee4:	4b4e      	ldr	r3, [pc, #312]	; (8008020 <HAL_RCC_OscConfig+0x4e8>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eea:	f7fc f8d7 	bl	800409c <HAL_GetTick>
 8007eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ef0:	e008      	b.n	8007f04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ef2:	f7fc f8d3 	bl	800409c <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e140      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f04:	4b41      	ldr	r3, [pc, #260]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 80b5 	beq.w	8008088 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f22:	4b3a      	ldr	r3, [pc, #232]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10d      	bne.n	8007f4a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f2e:	4b37      	ldr	r3, [pc, #220]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	4a36      	ldr	r2, [pc, #216]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f38:	6253      	str	r3, [r2, #36]	; 0x24
 8007f3a:	4b34      	ldr	r3, [pc, #208]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f42:	60bb      	str	r3, [r7, #8]
 8007f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f46:	2301      	movs	r3, #1
 8007f48:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4a:	4b36      	ldr	r3, [pc, #216]	; (8008024 <HAL_RCC_OscConfig+0x4ec>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d118      	bne.n	8007f88 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f56:	4b33      	ldr	r3, [pc, #204]	; (8008024 <HAL_RCC_OscConfig+0x4ec>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a32      	ldr	r2, [pc, #200]	; (8008024 <HAL_RCC_OscConfig+0x4ec>)
 8007f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f62:	f7fc f89b 	bl	800409c <HAL_GetTick>
 8007f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f68:	e008      	b.n	8007f7c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f6a:	f7fc f897 	bl	800409c <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b64      	cmp	r3, #100	; 0x64
 8007f76:	d901      	bls.n	8007f7c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e104      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f7c:	4b29      	ldr	r3, [pc, #164]	; (8008024 <HAL_RCC_OscConfig+0x4ec>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0f0      	beq.n	8007f6a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d106      	bne.n	8007f9e <HAL_RCC_OscConfig+0x466>
 8007f90:	4b1e      	ldr	r3, [pc, #120]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f94:	4a1d      	ldr	r2, [pc, #116]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8007f9c:	e02d      	b.n	8007ffa <HAL_RCC_OscConfig+0x4c2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10c      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x488>
 8007fa6:	4b19      	ldr	r3, [pc, #100]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007faa:	4a18      	ldr	r2, [pc, #96]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb0:	6353      	str	r3, [r2, #52]	; 0x34
 8007fb2:	4b16      	ldr	r3, [pc, #88]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb6:	4a15      	ldr	r2, [pc, #84]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fbc:	6353      	str	r3, [r2, #52]	; 0x34
 8007fbe:	e01c      	b.n	8007ffa <HAL_RCC_OscConfig+0x4c2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b05      	cmp	r3, #5
 8007fc6:	d10c      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x4aa>
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fcc:	4a0f      	ldr	r2, [pc, #60]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fd2:	6353      	str	r3, [r2, #52]	; 0x34
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fde:	6353      	str	r3, [r2, #52]	; 0x34
 8007fe0:	e00b      	b.n	8007ffa <HAL_RCC_OscConfig+0x4c2>
 8007fe2:	4b0a      	ldr	r3, [pc, #40]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe6:	4a09      	ldr	r2, [pc, #36]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fec:	6353      	str	r3, [r2, #52]	; 0x34
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	4a06      	ldr	r2, [pc, #24]	; (800800c <HAL_RCC_OscConfig+0x4d4>)
 8007ff4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ff8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d024      	beq.n	800804c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008002:	f7fc f84b 	bl	800409c <HAL_GetTick>
 8008006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008008:	e019      	b.n	800803e <HAL_RCC_OscConfig+0x506>
 800800a:	bf00      	nop
 800800c:	40023800 	.word	0x40023800
 8008010:	08010eb0 	.word	0x08010eb0
 8008014:	2000002c 	.word	0x2000002c
 8008018:	20000030 	.word	0x20000030
 800801c:	42470020 	.word	0x42470020
 8008020:	42470680 	.word	0x42470680
 8008024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008028:	f7fc f838 	bl	800409c <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	f241 3288 	movw	r2, #5000	; 0x1388
 8008036:	4293      	cmp	r3, r2
 8008038:	d901      	bls.n	800803e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e0a3      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800803e:	4b54      	ldr	r3, [pc, #336]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0ee      	beq.n	8008028 <HAL_RCC_OscConfig+0x4f0>
 800804a:	e014      	b.n	8008076 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800804c:	f7fc f826 	bl	800409c <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008052:	e00a      	b.n	800806a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008054:	f7fc f822 	bl	800409c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e08d      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800806a:	4b49      	ldr	r3, [pc, #292]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1ee      	bne.n	8008054 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008076:	7ffb      	ldrb	r3, [r7, #31]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d105      	bne.n	8008088 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800807c:	4b44      	ldr	r3, [pc, #272]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	4a43      	ldr	r2, [pc, #268]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 8008082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008086:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d079      	beq.n	8008184 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b0c      	cmp	r3, #12
 8008094:	d056      	beq.n	8008144 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b02      	cmp	r3, #2
 800809c:	d13b      	bne.n	8008116 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <HAL_RCC_OscConfig+0x65c>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a4:	f7fb fffa 	bl	800409c <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ac:	f7fb fff6 	bl	800409c <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e063      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080be:	4b34      	ldr	r3, [pc, #208]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080ca:	4b31      	ldr	r3, [pc, #196]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080da:	4319      	orrs	r1, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	430b      	orrs	r3, r1
 80080e2:	492b      	ldr	r1, [pc, #172]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080e8:	4b2a      	ldr	r3, [pc, #168]	; (8008194 <HAL_RCC_OscConfig+0x65c>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ee:	f7fb ffd5 	bl	800409c <HAL_GetTick>
 80080f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080f4:	e008      	b.n	8008108 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f6:	f7fb ffd1 	bl	800409c <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e03e      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008108:	4b21      	ldr	r3, [pc, #132]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0f0      	beq.n	80080f6 <HAL_RCC_OscConfig+0x5be>
 8008114:	e036      	b.n	8008184 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008116:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <HAL_RCC_OscConfig+0x65c>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800811c:	f7fb ffbe 	bl	800409c <HAL_GetTick>
 8008120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008122:	e008      	b.n	8008136 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008124:	f7fb ffba 	bl	800409c <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e027      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008136:	4b16      	ldr	r3, [pc, #88]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f0      	bne.n	8008124 <HAL_RCC_OscConfig+0x5ec>
 8008142:	e01f      	b.n	8008184 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e01a      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008150:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <HAL_RCC_OscConfig+0x658>)
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	429a      	cmp	r2, r3
 8008162:	d10d      	bne.n	8008180 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800816e:	429a      	cmp	r2, r3
 8008170:	d106      	bne.n	8008180 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800817c:	429a      	cmp	r2, r3
 800817e:	d001      	beq.n	8008184 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	40023800 	.word	0x40023800
 8008194:	42470060 	.word	0x42470060

08008198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e11a      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081ac:	4b8f      	ldr	r3, [pc, #572]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d919      	bls.n	80081ee <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d105      	bne.n	80081cc <HAL_RCC_ClockConfig+0x34>
 80081c0:	4b8a      	ldr	r3, [pc, #552]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a89      	ldr	r2, [pc, #548]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 80081c6:	f043 0304 	orr.w	r3, r3, #4
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4b87      	ldr	r3, [pc, #540]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f023 0201 	bic.w	r2, r3, #1
 80081d4:	4985      	ldr	r1, [pc, #532]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	4313      	orrs	r3, r2
 80081da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081dc:	4b83      	ldr	r3, [pc, #524]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d001      	beq.n	80081ee <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e0f9      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081fa:	4b7d      	ldr	r3, [pc, #500]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	497a      	ldr	r1, [pc, #488]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008208:	4313      	orrs	r3, r2
 800820a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 808e 	beq.w	8008336 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d107      	bne.n	8008232 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008222:	4b73      	ldr	r3, [pc, #460]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d121      	bne.n	8008272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e0d7      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d107      	bne.n	800824a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800823a:	4b6d      	ldr	r3, [pc, #436]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d115      	bne.n	8008272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e0cb      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d107      	bne.n	8008262 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008252:	4b67      	ldr	r3, [pc, #412]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e0bf      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008262:	4b63      	ldr	r3, [pc, #396]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e0b7      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008272:	4b5f      	ldr	r3, [pc, #380]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f023 0203 	bic.w	r2, r3, #3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	495c      	ldr	r1, [pc, #368]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008280:	4313      	orrs	r3, r2
 8008282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008284:	f7fb ff0a 	bl	800409c <HAL_GetTick>
 8008288:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d112      	bne.n	80082b8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008292:	e00a      	b.n	80082aa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008294:	f7fb ff02 	bl	800409c <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e09b      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80082aa:	4b51      	ldr	r3, [pc, #324]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f003 030c 	and.w	r3, r3, #12
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d1ee      	bne.n	8008294 <HAL_RCC_ClockConfig+0xfc>
 80082b6:	e03e      	b.n	8008336 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d112      	bne.n	80082e6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082c0:	e00a      	b.n	80082d8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082c2:	f7fb feeb 	bl	800409c <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d901      	bls.n	80082d8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e084      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082d8:	4b45      	ldr	r3, [pc, #276]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	2b0c      	cmp	r3, #12
 80082e2:	d1ee      	bne.n	80082c2 <HAL_RCC_ClockConfig+0x12a>
 80082e4:	e027      	b.n	8008336 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d11d      	bne.n	800832a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ee:	e00a      	b.n	8008306 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082f0:	f7fb fed4 	bl	800409c <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e06d      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008306:	4b3a      	ldr	r3, [pc, #232]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
 800830e:	2b04      	cmp	r3, #4
 8008310:	d1ee      	bne.n	80082f0 <HAL_RCC_ClockConfig+0x158>
 8008312:	e010      	b.n	8008336 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008314:	f7fb fec2 	bl	800409c <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008322:	4293      	cmp	r3, r2
 8008324:	d901      	bls.n	800832a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e05b      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800832a:	4b31      	ldr	r3, [pc, #196]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1ee      	bne.n	8008314 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008336:	4b2d      	ldr	r3, [pc, #180]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d219      	bcs.n	8008378 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d105      	bne.n	8008356 <HAL_RCC_ClockConfig+0x1be>
 800834a:	4b28      	ldr	r3, [pc, #160]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a27      	ldr	r2, [pc, #156]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 8008350:	f043 0304 	orr.w	r3, r3, #4
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4b25      	ldr	r3, [pc, #148]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f023 0201 	bic.w	r2, r3, #1
 800835e:	4923      	ldr	r1, [pc, #140]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	4313      	orrs	r3, r2
 8008364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008366:	4b21      	ldr	r3, [pc, #132]	; (80083ec <HAL_RCC_ClockConfig+0x254>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d001      	beq.n	8008378 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e034      	b.n	80083e2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008384:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	4917      	ldr	r1, [pc, #92]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 8008392:	4313      	orrs	r3, r2
 8008394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	490f      	ldr	r1, [pc, #60]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083b6:	f000 f823 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <HAL_RCC_ClockConfig+0x258>)
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	490b      	ldr	r1, [pc, #44]	; (80083f4 <HAL_RCC_ClockConfig+0x25c>)
 80083c8:	5ccb      	ldrb	r3, [r1, r3]
 80083ca:	fa22 f303 	lsr.w	r3, r2, r3
 80083ce:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <HAL_RCC_ClockConfig+0x260>)
 80083d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80083d2:	4b0a      	ldr	r3, [pc, #40]	; (80083fc <HAL_RCC_ClockConfig+0x264>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fb fe14 	bl	8004004 <HAL_InitTick>
 80083dc:	4603      	mov	r3, r0
 80083de:	72fb      	strb	r3, [r7, #11]

  return status;
 80083e0:	7afb      	ldrb	r3, [r7, #11]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40023c00 	.word	0x40023c00
 80083f0:	40023800 	.word	0x40023800
 80083f4:	08010eb0 	.word	0x08010eb0
 80083f8:	2000002c 	.word	0x2000002c
 80083fc:	20000030 	.word	0x20000030

08008400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008404:	b092      	sub	sp, #72	; 0x48
 8008406:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8008408:	4b79      	ldr	r3, [pc, #484]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	f003 030c 	and.w	r3, r3, #12
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d00d      	beq.n	8008434 <HAL_RCC_GetSysClockFreq+0x34>
 8008418:	2b0c      	cmp	r3, #12
 800841a:	f200 80d5 	bhi.w	80085c8 <HAL_RCC_GetSysClockFreq+0x1c8>
 800841e:	2b04      	cmp	r3, #4
 8008420:	d002      	beq.n	8008428 <HAL_RCC_GetSysClockFreq+0x28>
 8008422:	2b08      	cmp	r3, #8
 8008424:	d003      	beq.n	800842e <HAL_RCC_GetSysClockFreq+0x2e>
 8008426:	e0cf      	b.n	80085c8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008428:	4b72      	ldr	r3, [pc, #456]	; (80085f4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800842a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800842c:	e0da      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800842e:	4b72      	ldr	r3, [pc, #456]	; (80085f8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008430:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8008432:	e0d7      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008436:	0c9b      	lsrs	r3, r3, #18
 8008438:	f003 020f 	and.w	r2, r3, #15
 800843c:	4b6f      	ldr	r3, [pc, #444]	; (80085fc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800843e:	5c9b      	ldrb	r3, [r3, r2]
 8008440:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008444:	0d9b      	lsrs	r3, r3, #22
 8008446:	f003 0303 	and.w	r3, r3, #3
 800844a:	3301      	adds	r3, #1
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800844e:	4b68      	ldr	r3, [pc, #416]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d05d      	beq.n	8008516 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	2200      	movs	r2, #0
 800845e:	4618      	mov	r0, r3
 8008460:	4611      	mov	r1, r2
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	4622      	mov	r2, r4
 8008468:	462b      	mov	r3, r5
 800846a:	f04f 0000 	mov.w	r0, #0
 800846e:	f04f 0100 	mov.w	r1, #0
 8008472:	0159      	lsls	r1, r3, #5
 8008474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008478:	0150      	lsls	r0, r2, #5
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4621      	mov	r1, r4
 8008480:	1a51      	subs	r1, r2, r1
 8008482:	6139      	str	r1, [r7, #16]
 8008484:	4629      	mov	r1, r5
 8008486:	eb63 0301 	sbc.w	r3, r3, r1
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008498:	4659      	mov	r1, fp
 800849a:	018b      	lsls	r3, r1, #6
 800849c:	4651      	mov	r1, sl
 800849e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80084a2:	4651      	mov	r1, sl
 80084a4:	018a      	lsls	r2, r1, #6
 80084a6:	46d4      	mov	ip, sl
 80084a8:	ebb2 080c 	subs.w	r8, r2, ip
 80084ac:	4659      	mov	r1, fp
 80084ae:	eb63 0901 	sbc.w	r9, r3, r1
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	f04f 0300 	mov.w	r3, #0
 80084ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084c6:	4690      	mov	r8, r2
 80084c8:	4699      	mov	r9, r3
 80084ca:	4623      	mov	r3, r4
 80084cc:	eb18 0303 	adds.w	r3, r8, r3
 80084d0:	60bb      	str	r3, [r7, #8]
 80084d2:	462b      	mov	r3, r5
 80084d4:	eb49 0303 	adc.w	r3, r9, r3
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80084e6:	4629      	mov	r1, r5
 80084e8:	024b      	lsls	r3, r1, #9
 80084ea:	4620      	mov	r0, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	4604      	mov	r4, r0
 80084f0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80084f4:	4601      	mov	r1, r0
 80084f6:	024a      	lsls	r2, r1, #9
 80084f8:	4610      	mov	r0, r2
 80084fa:	4619      	mov	r1, r3
 80084fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fe:	2200      	movs	r2, #0
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
 8008502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008508:	f7f8 fdd4 	bl	80010b4 <__aeabi_uldivmod>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4613      	mov	r3, r2
 8008512:	647b      	str	r3, [r7, #68]	; 0x44
 8008514:	e055      	b.n	80085c2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	2200      	movs	r2, #0
 800851a:	623b      	str	r3, [r7, #32]
 800851c:	627a      	str	r2, [r7, #36]	; 0x24
 800851e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008522:	4642      	mov	r2, r8
 8008524:	464b      	mov	r3, r9
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	f04f 0100 	mov.w	r1, #0
 800852e:	0159      	lsls	r1, r3, #5
 8008530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008534:	0150      	lsls	r0, r2, #5
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	46c4      	mov	ip, r8
 800853c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	468c      	mov	ip, r1
 8008546:	eb63 0b0c 	sbc.w	fp, r3, ip
 800854a:	f04f 0200 	mov.w	r2, #0
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008556:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800855a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800855e:	ebb2 040a 	subs.w	r4, r2, sl
 8008562:	eb63 050b 	sbc.w	r5, r3, fp
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	00eb      	lsls	r3, r5, #3
 8008570:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008574:	00e2      	lsls	r2, r4, #3
 8008576:	4614      	mov	r4, r2
 8008578:	461d      	mov	r5, r3
 800857a:	4603      	mov	r3, r0
 800857c:	18e3      	adds	r3, r4, r3
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	460b      	mov	r3, r1
 8008582:	eb45 0303 	adc.w	r3, r5, r3
 8008586:	607b      	str	r3, [r7, #4]
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008594:	4629      	mov	r1, r5
 8008596:	028b      	lsls	r3, r1, #10
 8008598:	4620      	mov	r0, r4
 800859a:	4629      	mov	r1, r5
 800859c:	4604      	mov	r4, r0
 800859e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80085a2:	4601      	mov	r1, r0
 80085a4:	028a      	lsls	r2, r1, #10
 80085a6:	4610      	mov	r0, r2
 80085a8:	4619      	mov	r1, r3
 80085aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ac:	2200      	movs	r2, #0
 80085ae:	61bb      	str	r3, [r7, #24]
 80085b0:	61fa      	str	r2, [r7, #28]
 80085b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085b6:	f7f8 fd7d 	bl	80010b4 <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4613      	mov	r3, r2
 80085c0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80085c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80085c6:	e00d      	b.n	80085e4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	0b5b      	lsrs	r3, r3, #13
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	3301      	adds	r3, #1
 80085d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80085dc:	fa02 f303 	lsl.w	r3, r2, r3
 80085e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80085e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3748      	adds	r7, #72	; 0x48
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085f0:	40023800 	.word	0x40023800
 80085f4:	00f42400 	.word	0x00f42400
 80085f8:	007a1200 	.word	0x007a1200
 80085fc:	08010ea4 	.word	0x08010ea4

08008600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008604:	4b02      	ldr	r3, [pc, #8]	; (8008610 <HAL_RCC_GetHCLKFreq+0x10>)
 8008606:	681b      	ldr	r3, [r3, #0]
}
 8008608:	4618      	mov	r0, r3
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr
 8008610:	2000002c 	.word	0x2000002c

08008614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008618:	f7ff fff2 	bl	8008600 <HAL_RCC_GetHCLKFreq>
 800861c:	4602      	mov	r2, r0
 800861e:	4b05      	ldr	r3, [pc, #20]	; (8008634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	4903      	ldr	r1, [pc, #12]	; (8008638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800862a:	5ccb      	ldrb	r3, [r1, r3]
 800862c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd80      	pop	{r7, pc}
 8008634:	40023800 	.word	0x40023800
 8008638:	08010ec0 	.word	0x08010ec0

0800863c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008640:	f7ff ffde 	bl	8008600 <HAL_RCC_GetHCLKFreq>
 8008644:	4602      	mov	r2, r0
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	0adb      	lsrs	r3, r3, #11
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	4903      	ldr	r1, [pc, #12]	; (8008660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008652:	5ccb      	ldrb	r3, [r1, r3]
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008658:	4618      	mov	r0, r3
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40023800 	.word	0x40023800
 8008660:	08010ec0 	.word	0x08010ec0

08008664 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008670:	4b29      	ldr	r3, [pc, #164]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d12c      	bne.n	80086d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800867c:	4b26      	ldr	r3, [pc, #152]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8008688:	4b24      	ldr	r3, [pc, #144]	; (800871c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e016      	b.n	80086c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008694:	4b20      	ldr	r3, [pc, #128]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	4a1f      	ldr	r2, [pc, #124]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800869a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800869e:	6253      	str	r3, [r2, #36]	; 0x24
 80086a0:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80086ac:	4b1b      	ldr	r3, [pc, #108]	; (800871c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80086b4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80086b6:	4b18      	ldr	r3, [pc, #96]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	4a17      	ldr	r2, [pc, #92]	; (8008718 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80086bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086c0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80086c8:	d105      	bne.n	80086d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80086d0:	d101      	bne.n	80086d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80086d2:	2301      	movs	r3, #1
 80086d4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d105      	bne.n	80086e8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80086dc:	4b10      	ldr	r3, [pc, #64]	; (8008720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a0f      	ldr	r2, [pc, #60]	; (8008720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086e2:	f043 0304 	orr.w	r3, r3, #4
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f023 0201 	bic.w	r2, r3, #1
 80086f0:	490b      	ldr	r1, [pc, #44]	; (8008720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	429a      	cmp	r2, r3
 8008704:	d001      	beq.n	800870a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40023800 	.word	0x40023800
 800871c:	40007000 	.word	0x40007000
 8008720:	40023c00 	.word	0x40023c00

08008724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e031      	b.n	800879a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fb fa36 	bl	8003bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f000 fa5a 	bl	8008c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d001      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e03a      	b.n	8008832 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087dc:	d00e      	beq.n	80087fc <HAL_TIM_Base_Start_IT+0x58>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a16      	ldr	r2, [pc, #88]	; (800883c <HAL_TIM_Base_Start_IT+0x98>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d009      	beq.n	80087fc <HAL_TIM_Base_Start_IT+0x58>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a14      	ldr	r2, [pc, #80]	; (8008840 <HAL_TIM_Base_Start_IT+0x9c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d004      	beq.n	80087fc <HAL_TIM_Base_Start_IT+0x58>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a13      	ldr	r2, [pc, #76]	; (8008844 <HAL_TIM_Base_Start_IT+0xa0>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d111      	bne.n	8008820 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b06      	cmp	r3, #6
 800880c:	d010      	beq.n	8008830 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 0201 	orr.w	r2, r2, #1
 800881c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881e:	e007      	b.n	8008830 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0201 	orr.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	bc80      	pop	{r7}
 800883a:	4770      	bx	lr
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800
 8008844:	40010800 	.word	0x40010800

08008848 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6a1a      	ldr	r2, [r3, #32]
 8008866:	f241 1311 	movw	r3, #4369	; 0x1111
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d107      	bne.n	8008880 <HAL_TIM_Base_Stop_IT+0x38>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0201 	bic.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d122      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d11b      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f06f 0202 	mvn.w	r2, #2
 80088c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f003 0303 	and.w	r3, r3, #3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f985 	bl	8008be6 <HAL_TIM_IC_CaptureCallback>
 80088dc:	e005      	b.n	80088ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f978 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f987 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0304 	and.w	r3, r3, #4
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d122      	bne.n	8008944 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f003 0304 	and.w	r3, r3, #4
 8008908:	2b04      	cmp	r3, #4
 800890a:	d11b      	bne.n	8008944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 0204 	mvn.w	r2, #4
 8008914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f95b 	bl	8008be6 <HAL_TIM_IC_CaptureCallback>
 8008930:	e005      	b.n	800893e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f94e 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f95d 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b08      	cmp	r3, #8
 8008950:	d122      	bne.n	8008998 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b08      	cmp	r3, #8
 800895e:	d11b      	bne.n	8008998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f06f 0208 	mvn.w	r2, #8
 8008968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2204      	movs	r2, #4
 800896e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f931 	bl	8008be6 <HAL_TIM_IC_CaptureCallback>
 8008984:	e005      	b.n	8008992 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f924 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f933 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f003 0310 	and.w	r3, r3, #16
 80089a2:	2b10      	cmp	r3, #16
 80089a4:	d122      	bne.n	80089ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b10      	cmp	r3, #16
 80089b2:	d11b      	bne.n	80089ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f06f 0210 	mvn.w	r2, #16
 80089bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2208      	movs	r2, #8
 80089c2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f907 	bl	8008be6 <HAL_TIM_IC_CaptureCallback>
 80089d8:	e005      	b.n	80089e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f8fa 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f909 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d10e      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d107      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f06f 0201 	mvn.w	r2, #1
 8008a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7fa fd82 	bl	800351c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a22:	2b40      	cmp	r3, #64	; 0x40
 8008a24:	d10e      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b40      	cmp	r3, #64	; 0x40
 8008a32:	d107      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f8e3 	bl	8008c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIM_ConfigClockSource+0x18>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e0b3      	b.n	8008bcc <HAL_TIM_ConfigClockSource+0x180>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a9c:	d03e      	beq.n	8008b1c <HAL_TIM_ConfigClockSource+0xd0>
 8008a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aa2:	f200 8087 	bhi.w	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aaa:	f000 8085 	beq.w	8008bb8 <HAL_TIM_ConfigClockSource+0x16c>
 8008aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab2:	d87f      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008ab4:	2b70      	cmp	r3, #112	; 0x70
 8008ab6:	d01a      	beq.n	8008aee <HAL_TIM_ConfigClockSource+0xa2>
 8008ab8:	2b70      	cmp	r3, #112	; 0x70
 8008aba:	d87b      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008abc:	2b60      	cmp	r3, #96	; 0x60
 8008abe:	d050      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x116>
 8008ac0:	2b60      	cmp	r3, #96	; 0x60
 8008ac2:	d877      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008ac4:	2b50      	cmp	r3, #80	; 0x50
 8008ac6:	d03c      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0xf6>
 8008ac8:	2b50      	cmp	r3, #80	; 0x50
 8008aca:	d873      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008acc:	2b40      	cmp	r3, #64	; 0x40
 8008ace:	d058      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x136>
 8008ad0:	2b40      	cmp	r3, #64	; 0x40
 8008ad2:	d86f      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008ad4:	2b30      	cmp	r3, #48	; 0x30
 8008ad6:	d064      	beq.n	8008ba2 <HAL_TIM_ConfigClockSource+0x156>
 8008ad8:	2b30      	cmp	r3, #48	; 0x30
 8008ada:	d86b      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d060      	beq.n	8008ba2 <HAL_TIM_ConfigClockSource+0x156>
 8008ae0:	2b20      	cmp	r3, #32
 8008ae2:	d867      	bhi.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d05c      	beq.n	8008ba2 <HAL_TIM_ConfigClockSource+0x156>
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d05a      	beq.n	8008ba2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008aec:	e062      	b.n	8008bb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6818      	ldr	r0, [r3, #0]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6899      	ldr	r1, [r3, #8]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f000 f966 	bl	8008dce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	609a      	str	r2, [r3, #8]
      break;
 8008b1a:	e04e      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	6899      	ldr	r1, [r3, #8]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f000 f94f 	bl	8008dce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b3e:	609a      	str	r2, [r3, #8]
      break;
 8008b40:	e03b      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f000 f8c6 	bl	8008ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2150      	movs	r1, #80	; 0x50
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f91d 	bl	8008d9a <TIM_ITRx_SetConfig>
      break;
 8008b60:	e02b      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f000 f8e4 	bl	8008d3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2160      	movs	r1, #96	; 0x60
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f90d 	bl	8008d9a <TIM_ITRx_SetConfig>
      break;
 8008b80:	e01b      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	6859      	ldr	r1, [r3, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f000 f8a6 	bl	8008ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2140      	movs	r1, #64	; 0x40
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f8fd 	bl	8008d9a <TIM_ITRx_SetConfig>
      break;
 8008ba0:	e00b      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f000 f8f4 	bl	8008d9a <TIM_ITRx_SetConfig>
        break;
 8008bb2:	e002      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008bb4:	bf00      	nop
 8008bb6:	e000      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008bb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr

08008be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bc80      	pop	{r7}
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bc80      	pop	{r7}
 8008c08:	4770      	bx	lr

08008c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr

08008c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c32:	d007      	beq.n	8008c44 <TIM_Base_SetConfig+0x28>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a25      	ldr	r2, [pc, #148]	; (8008ccc <TIM_Base_SetConfig+0xb0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d003      	beq.n	8008c44 <TIM_Base_SetConfig+0x28>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a24      	ldr	r2, [pc, #144]	; (8008cd0 <TIM_Base_SetConfig+0xb4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d108      	bne.n	8008c56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c5c:	d013      	beq.n	8008c86 <TIM_Base_SetConfig+0x6a>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a1a      	ldr	r2, [pc, #104]	; (8008ccc <TIM_Base_SetConfig+0xb0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d00f      	beq.n	8008c86 <TIM_Base_SetConfig+0x6a>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a19      	ldr	r2, [pc, #100]	; (8008cd0 <TIM_Base_SetConfig+0xb4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <TIM_Base_SetConfig+0x6a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a18      	ldr	r2, [pc, #96]	; (8008cd4 <TIM_Base_SetConfig+0xb8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <TIM_Base_SetConfig+0x6a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a17      	ldr	r2, [pc, #92]	; (8008cd8 <TIM_Base_SetConfig+0xbc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_Base_SetConfig+0x6a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a16      	ldr	r2, [pc, #88]	; (8008cdc <TIM_Base_SetConfig+0xc0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d108      	bne.n	8008c98 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	615a      	str	r2, [r3, #20]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40010800 	.word	0x40010800
 8008cd8:	40010c00 	.word	0x40010c00
 8008cdc:	40011000 	.word	0x40011000

08008ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f023 0201 	bic.w	r2, r3, #1
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f023 030a 	bic.w	r3, r3, #10
 8008d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	621a      	str	r2, [r3, #32]
}
 8008d32:	bf00      	nop
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr

08008d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	f023 0210 	bic.w	r2, r3, #16
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	031b      	lsls	r3, r3, #12
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	621a      	str	r2, [r3, #32]
}
 8008d90:	bf00      	nop
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	f043 0307 	orr.w	r3, r3, #7
 8008dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	609a      	str	r2, [r3, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr

08008dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b087      	sub	sp, #28
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	60f8      	str	r0, [r7, #12]
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
 8008dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	021a      	lsls	r2, r3, #8
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	609a      	str	r2, [r3, #8]
}
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bc80      	pop	{r7}
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d101      	bne.n	8008e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e20:	2302      	movs	r3, #2
 8008e22:	e046      	b.n	8008eb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e66:	d00e      	beq.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a13      	ldr	r2, [pc, #76]	; (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d009      	beq.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d004      	beq.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a10      	ldr	r2, [pc, #64]	; (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d10c      	bne.n	8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr
 8008ebc:	40000400 	.word	0x40000400
 8008ec0:	40000800 	.word	0x40000800
 8008ec4:	40010800 	.word	0x40010800

08008ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e03f      	b.n	8008f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7fa fea4 	bl	8003c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2224      	movs	r2, #36	; 0x24
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f9c3 	bl	8009298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695a      	ldr	r2, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b20      	cmp	r3, #32
 8008f7a:	d11d      	bne.n	8008fb8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_UART_Receive_DMA+0x26>
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e016      	b.n	8008fba <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Receive_DMA+0x38>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e00f      	b.n	8008fba <HAL_UART_Receive_DMA+0x58>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	461a      	mov	r2, r3
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 f8cc 	bl	800914c <UART_Start_Receive_DMA>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	e000      	b.n	8008fba <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008fb8:	2302      	movs	r3, #2
  }
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc80      	pop	{r7}
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr

08008fea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d12a      	bne.n	800905c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800901a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 0201 	bic.w	r2, r2, #1
 800902a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695a      	ldr	r2, [r3, #20]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800903a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2220      	movs	r2, #32
 8009040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	2b01      	cmp	r3, #1
 800904a:	d107      	bne.n	800905c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0210 	bic.w	r2, r2, #16
 800905a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	2b01      	cmp	r3, #1
 8009062:	d106      	bne.n	8009072 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009068:	4619      	mov	r1, r3
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff ffb2 	bl	8008fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009070:	e002      	b.n	8009078 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7fa fbd2 	bl	800381c <HAL_UART_RxCpltCallback>
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009092:	2b01      	cmp	r3, #1
 8009094:	d108      	bne.n	80090a8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	b29b      	uxth	r3, r3
 800909e:	4619      	mov	r1, r3
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff ff97 	bl	8008fd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090a6:	e002      	b.n	80090ae <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7fa fb97 	bl	80037dc <HAL_UART_RxHalfCpltCallback>
}
 80090ae:	bf00      	nop
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b80      	cmp	r3, #128	; 0x80
 80090d4:	bf0c      	ite	eq
 80090d6:	2301      	moveq	r3, #1
 80090d8:	2300      	movne	r3, #0
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b21      	cmp	r3, #33	; 0x21
 80090e8:	d108      	bne.n	80090fc <UART_DMAError+0x46>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80090f6:	68b8      	ldr	r0, [r7, #8]
 80090f8:	f000 f88c 	bl	8009214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	bf0c      	ite	eq
 800910a:	2301      	moveq	r3, #1
 800910c:	2300      	movne	r3, #0
 800910e:	b2db      	uxtb	r3, r3
 8009110:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b22      	cmp	r3, #34	; 0x22
 800911c:	d108      	bne.n	8009130 <UART_DMAError+0x7a>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2200      	movs	r2, #0
 8009128:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800912a:	68b8      	ldr	r0, [r7, #8]
 800912c:	f000 f887 	bl	800923e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	f043 0210 	orr.w	r2, r3, #16
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800913c:	68b8      	ldr	r0, [r7, #8]
 800913e:	f7ff ff40 	bl	8008fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
	...

0800914c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	88fa      	ldrh	r2, [r7, #6]
 8009164:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2222      	movs	r2, #34	; 0x22
 8009170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	4a23      	ldr	r2, [pc, #140]	; (8009208 <UART_Start_Receive_DMA+0xbc>)
 800917a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	4a22      	ldr	r2, [pc, #136]	; (800920c <UART_Start_Receive_DMA+0xc0>)
 8009182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	4a21      	ldr	r2, [pc, #132]	; (8009210 <UART_Start_Receive_DMA+0xc4>)
 800918a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	2200      	movs	r2, #0
 8009192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009194:	f107 0308 	add.w	r3, r7, #8
 8009198:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4619      	mov	r1, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	f7fb ff94 	bl	80050d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80091b0:	2300      	movs	r3, #0
 80091b2:	613b      	str	r3, [r7, #16]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	613b      	str	r3, [r7, #16]
 80091c4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	695a      	ldr	r2, [r3, #20]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091fc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	08008feb 	.word	0x08008feb
 800920c:	08009081 	.word	0x08009081
 8009210:	080090b7 	.word	0x080090b7

08009214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800922a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2220      	movs	r2, #32
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr

0800923e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009254:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695a      	ldr	r2, [r3, #20]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0201 	bic.w	r2, r2, #1
 8009264:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	2b01      	cmp	r3, #1
 800926c:	d107      	bne.n	800927e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0210 	bic.w	r2, r2, #16
 800927c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr
	...

08009298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	68da      	ldr	r2, [r3, #12]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80092d8:	f023 030c 	bic.w	r3, r3, #12
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	6812      	ldr	r2, [r2, #0]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	430b      	orrs	r3, r1
 80092e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a55      	ldr	r2, [pc, #340]	; (8009458 <UART_SetConfig+0x1c0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d103      	bne.n	800930e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009306:	f7ff f999 	bl	800863c <HAL_RCC_GetPCLK2Freq>
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	e002      	b.n	8009314 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800930e:	f7ff f981 	bl	8008614 <HAL_RCC_GetPCLK1Freq>
 8009312:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800931c:	d14c      	bne.n	80093b8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	009a      	lsls	r2, r3, #2
 8009328:	441a      	add	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	fbb2 f3f3 	udiv	r3, r2, r3
 8009334:	4a49      	ldr	r2, [pc, #292]	; (800945c <UART_SetConfig+0x1c4>)
 8009336:	fba2 2303 	umull	r2, r3, r2, r3
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	0119      	lsls	r1, r3, #4
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009a      	lsls	r2, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	fbb2 f2f3 	udiv	r2, r2, r3
 8009354:	4b41      	ldr	r3, [pc, #260]	; (800945c <UART_SetConfig+0x1c4>)
 8009356:	fba3 0302 	umull	r0, r3, r3, r2
 800935a:	095b      	lsrs	r3, r3, #5
 800935c:	2064      	movs	r0, #100	; 0x64
 800935e:	fb00 f303 	mul.w	r3, r0, r3
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	3332      	adds	r3, #50	; 0x32
 8009368:	4a3c      	ldr	r2, [pc, #240]	; (800945c <UART_SetConfig+0x1c4>)
 800936a:	fba2 2303 	umull	r2, r3, r2, r3
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009376:	4419      	add	r1, r3
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009a      	lsls	r2, r3, #2
 8009382:	441a      	add	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	fbb2 f2f3 	udiv	r2, r2, r3
 800938e:	4b33      	ldr	r3, [pc, #204]	; (800945c <UART_SetConfig+0x1c4>)
 8009390:	fba3 0302 	umull	r0, r3, r3, r2
 8009394:	095b      	lsrs	r3, r3, #5
 8009396:	2064      	movs	r0, #100	; 0x64
 8009398:	fb00 f303 	mul.w	r3, r0, r3
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	3332      	adds	r3, #50	; 0x32
 80093a2:	4a2e      	ldr	r2, [pc, #184]	; (800945c <UART_SetConfig+0x1c4>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	095b      	lsrs	r3, r3, #5
 80093aa:	f003 0207 	and.w	r2, r3, #7
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	440a      	add	r2, r1
 80093b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093b6:	e04a      	b.n	800944e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009a      	lsls	r2, r3, #2
 80093c2:	441a      	add	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	4a23      	ldr	r2, [pc, #140]	; (800945c <UART_SetConfig+0x1c4>)
 80093d0:	fba2 2303 	umull	r2, r3, r2, r3
 80093d4:	095b      	lsrs	r3, r3, #5
 80093d6:	0119      	lsls	r1, r3, #4
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	009a      	lsls	r2, r3, #2
 80093e2:	441a      	add	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80093ee:	4b1b      	ldr	r3, [pc, #108]	; (800945c <UART_SetConfig+0x1c4>)
 80093f0:	fba3 0302 	umull	r0, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	2064      	movs	r0, #100	; 0x64
 80093f8:	fb00 f303 	mul.w	r3, r0, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	011b      	lsls	r3, r3, #4
 8009400:	3332      	adds	r3, #50	; 0x32
 8009402:	4a16      	ldr	r2, [pc, #88]	; (800945c <UART_SetConfig+0x1c4>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800940e:	4419      	add	r1, r3
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009a      	lsls	r2, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	fbb2 f2f3 	udiv	r2, r2, r3
 8009426:	4b0d      	ldr	r3, [pc, #52]	; (800945c <UART_SetConfig+0x1c4>)
 8009428:	fba3 0302 	umull	r0, r3, r3, r2
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	2064      	movs	r0, #100	; 0x64
 8009430:	fb00 f303 	mul.w	r3, r0, r3
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	3332      	adds	r3, #50	; 0x32
 800943a:	4a08      	ldr	r2, [pc, #32]	; (800945c <UART_SetConfig+0x1c4>)
 800943c:	fba2 2303 	umull	r2, r3, r2, r3
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	f003 020f 	and.w	r2, r3, #15
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	440a      	add	r2, r1
 800944c:	609a      	str	r2, [r3, #8]
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	40013800 	.word	0x40013800
 800945c:	51eb851f 	.word	0x51eb851f

08009460 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009470:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009474:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	b29a      	uxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009494:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009498:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	43db      	mvns	r3, r3
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	4013      	ands	r3, r2
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bc80      	pop	{r7}
 80094be:	4770      	bx	lr

080094c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80094c0:	b084      	sub	sp, #16
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	f107 0014 	add.w	r0, r7, #20
 80094ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	b004      	add	sp, #16
 80094fe:	4770      	bx	lr

08009500 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009500:	b480      	push	{r7}
 8009502:	b09b      	sub	sp, #108	; 0x6c
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009526:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	78db      	ldrb	r3, [r3, #3]
 800952e:	2b03      	cmp	r3, #3
 8009530:	d81f      	bhi.n	8009572 <USB_ActivateEndpoint+0x72>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <USB_ActivateEndpoint+0x38>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009549 	.word	0x08009549
 800953c:	08009565 	.word	0x08009565
 8009540:	0800957b 	.word	0x0800957b
 8009544:	08009557 	.word	0x08009557
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009548:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800954c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009550:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009554:	e012      	b.n	800957c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009556:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800955a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800955e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009562:	e00b      	b.n	800957c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009564:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800956c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009570:	e004      	b.n	800957c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009578:	e000      	b.n	800957c <USB_ActivateEndpoint+0x7c>
      break;
 800957a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	441a      	add	r2, r3
 8009586:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800958a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800958e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959a:	b29b      	uxth	r3, r3
 800959c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	4313      	orrs	r3, r2
 80095be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	441a      	add	r2, r3
 80095cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80095d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	7b1b      	ldrb	r3, [r3, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f040 8149 	bne.w	8009880 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 8084 	beq.w	8009700 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009602:	b29b      	uxth	r3, r3
 8009604:	461a      	mov	r2, r3
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	4413      	add	r3, r2
 800960a:	617b      	str	r3, [r7, #20]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	011a      	lsls	r2, r3, #4
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	88db      	ldrh	r3, [r3, #6]
 8009620:	085b      	lsrs	r3, r3, #1
 8009622:	b29b      	uxth	r3, r3
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	81fb      	strh	r3, [r7, #14]
 800963a:	89fb      	ldrh	r3, [r7, #14]
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01b      	beq.n	800967c <USB_ActivateEndpoint+0x17c>
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800965a:	81bb      	strh	r3, [r7, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	441a      	add	r2, r3
 8009666:	89bb      	ldrh	r3, [r7, #12]
 8009668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800966c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009678:	b29b      	uxth	r3, r3
 800967a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	78db      	ldrb	r3, [r3, #3]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d020      	beq.n	80096c6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969a:	813b      	strh	r3, [r7, #8]
 800969c:	893b      	ldrh	r3, [r7, #8]
 800969e:	f083 0320 	eor.w	r3, r3, #32
 80096a2:	813b      	strh	r3, [r7, #8]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	441a      	add	r2, r3
 80096ae:	893b      	ldrh	r3, [r7, #8]
 80096b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	8013      	strh	r3, [r2, #0]
 80096c4:	e27f      	b.n	8009bc6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096dc:	817b      	strh	r3, [r7, #10]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	441a      	add	r2, r3
 80096e8:	897b      	ldrh	r3, [r7, #10]
 80096ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	8013      	strh	r3, [r2, #0]
 80096fe:	e262      	b.n	8009bc6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800970a:	b29b      	uxth	r3, r3
 800970c:	461a      	mov	r2, r3
 800970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009710:	4413      	add	r3, r2
 8009712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	011a      	lsls	r2, r3, #4
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	4413      	add	r3, r2
 800971e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009722:	62bb      	str	r3, [r7, #40]	; 0x28
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	88db      	ldrh	r3, [r3, #6]
 8009728:	085b      	lsrs	r3, r3, #1
 800972a:	b29b      	uxth	r3, r3
 800972c:	005b      	lsls	r3, r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800973e:	b29b      	uxth	r3, r3
 8009740:	461a      	mov	r2, r3
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	4413      	add	r3, r2
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	011a      	lsls	r2, r3, #4
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	4413      	add	r3, r2
 8009752:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009756:	623b      	str	r3, [r7, #32]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d112      	bne.n	8009786 <USB_ActivateEndpoint+0x286>
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	b29b      	uxth	r3, r3
 8009766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800976a:	b29a      	uxth	r2, r3
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	801a      	strh	r2, [r3, #0]
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800977a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800977e:	b29a      	uxth	r2, r3
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e02f      	b.n	80097e6 <USB_ActivateEndpoint+0x2e6>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b3e      	cmp	r3, #62	; 0x3e
 800978c:	d813      	bhi.n	80097b6 <USB_ActivateEndpoint+0x2b6>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	085b      	lsrs	r3, r3, #1
 8009794:	663b      	str	r3, [r7, #96]	; 0x60
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <USB_ActivateEndpoint+0x2a8>
 80097a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097a4:	3301      	adds	r3, #1
 80097a6:	663b      	str	r3, [r7, #96]	; 0x60
 80097a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	029b      	lsls	r3, r3, #10
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	801a      	strh	r2, [r3, #0]
 80097b4:	e017      	b.n	80097e6 <USB_ActivateEndpoint+0x2e6>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	095b      	lsrs	r3, r3, #5
 80097bc:	663b      	str	r3, [r7, #96]	; 0x60
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <USB_ActivateEndpoint+0x2d0>
 80097ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097cc:	3b01      	subs	r3, #1
 80097ce:	663b      	str	r3, [r7, #96]	; 0x60
 80097d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	029b      	lsls	r3, r3, #10
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	83fb      	strh	r3, [r7, #30]
 80097f4:	8bfb      	ldrh	r3, [r7, #30]
 80097f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01b      	beq.n	8009836 <USB_ActivateEndpoint+0x336>
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009814:	83bb      	strh	r3, [r7, #28]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	441a      	add	r2, r3
 8009820:	8bbb      	ldrh	r3, [r7, #28]
 8009822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800982a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800982e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009832:	b29b      	uxth	r3, r3
 8009834:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984c:	837b      	strh	r3, [r7, #26]
 800984e:	8b7b      	ldrh	r3, [r7, #26]
 8009850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009854:	837b      	strh	r3, [r7, #26]
 8009856:	8b7b      	ldrh	r3, [r7, #26]
 8009858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800985c:	837b      	strh	r3, [r7, #26]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	441a      	add	r2, r3
 8009868:	8b7b      	ldrh	r3, [r7, #26]
 800986a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800986e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987a:	b29b      	uxth	r3, r3
 800987c:	8013      	strh	r3, [r2, #0]
 800987e:	e1a2      	b.n	8009bc6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009896:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	441a      	add	r2, r3
 80098a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80098a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80098b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	65bb      	str	r3, [r7, #88]	; 0x58
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098cc:	4413      	add	r3, r2
 80098ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	011a      	lsls	r2, r3, #4
 80098d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098de:	657b      	str	r3, [r7, #84]	; 0x54
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	891b      	ldrh	r3, [r3, #8]
 80098e4:	085b      	lsrs	r3, r3, #1
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ee:	801a      	strh	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	653b      	str	r3, [r7, #80]	; 0x50
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009900:	4413      	add	r3, r2
 8009902:	653b      	str	r3, [r7, #80]	; 0x50
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	011a      	lsls	r2, r3, #4
 800990a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800990c:	4413      	add	r3, r2
 800990e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	895b      	ldrh	r3, [r3, #10]
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	b29b      	uxth	r3, r3
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009922:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	2b00      	cmp	r3, #0
 800992a:	f040 8091 	bne.w	8009a50 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800993c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800993e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d01b      	beq.n	800997e <USB_ActivateEndpoint+0x47e>
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	441a      	add	r2, r3
 8009968:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800996a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	b29b      	uxth	r3, r3
 800997c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	873b      	strh	r3, [r7, #56]	; 0x38
 800998c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	2b00      	cmp	r3, #0
 8009994:	d01b      	beq.n	80099ce <USB_ActivateEndpoint+0x4ce>
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	441a      	add	r2, r3
 80099b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80099e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80099e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80099ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80099f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	441a      	add	r2, r3
 8009a00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a2c:	867b      	strh	r3, [r7, #50]	; 0x32
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	441a      	add	r2, r3
 8009a38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	8013      	strh	r3, [r2, #0]
 8009a4e:	e0ba      	b.n	8009bc6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009a60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d01d      	beq.n	8009aa8 <USB_ActivateEndpoint+0x5a8>
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	441a      	add	r2, r3
 8009a90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009ab8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01d      	beq.n	8009b00 <USB_ActivateEndpoint+0x600>
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ada:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	441a      	add	r2, r3
 8009ae8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	78db      	ldrb	r3, [r3, #3]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d024      	beq.n	8009b52 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b26:	f083 0320 	eor.w	r3, r3, #32
 8009b2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	441a      	add	r2, r3
 8009b38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	8013      	strh	r3, [r2, #0]
 8009b50:	e01d      	b.n	8009b8e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	441a      	add	r2, r3
 8009b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	441a      	add	r2, r3
 8009bb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009bc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	376c      	adds	r7, #108	; 0x6c
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bc80      	pop	{r7}
 8009bd2:	4770      	bx	lr

08009bd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b08d      	sub	sp, #52	; 0x34
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	7b1b      	ldrb	r3, [r3, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f040 808e 	bne.w	8009d04 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d044      	beq.n	8009c7a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	81bb      	strh	r3, [r7, #12]
 8009bfe:	89bb      	ldrh	r3, [r7, #12]
 8009c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01b      	beq.n	8009c40 <USB_DeactivateEndpoint+0x6c>
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1e:	817b      	strh	r3, [r7, #10]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	441a      	add	r2, r3
 8009c2a:	897b      	ldrh	r3, [r7, #10]
 8009c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c56:	813b      	strh	r3, [r7, #8]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	441a      	add	r2, r3
 8009c62:	893b      	ldrh	r3, [r7, #8]
 8009c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	8013      	strh	r3, [r2, #0]
 8009c78:	e192      	b.n	8009fa0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	827b      	strh	r3, [r7, #18]
 8009c88:	8a7b      	ldrh	r3, [r7, #18]
 8009c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d01b      	beq.n	8009cca <USB_DeactivateEndpoint+0xf6>
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca8:	823b      	strh	r3, [r7, #16]
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	441a      	add	r2, r3
 8009cb4:	8a3b      	ldrh	r3, [r7, #16]
 8009cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce0:	81fb      	strh	r3, [r7, #14]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	441a      	add	r2, r3
 8009cec:	89fb      	ldrh	r3, [r7, #14]
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
 8009d02:	e14d      	b.n	8009fa0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	785b      	ldrb	r3, [r3, #1]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f040 80a5 	bne.w	8009e58 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	843b      	strh	r3, [r7, #32]
 8009d1c:	8c3b      	ldrh	r3, [r7, #32]
 8009d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d01b      	beq.n	8009d5e <USB_DeactivateEndpoint+0x18a>
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3c:	83fb      	strh	r3, [r7, #30]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	441a      	add	r2, r3
 8009d48:	8bfb      	ldrh	r3, [r7, #30]
 8009d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	83bb      	strh	r3, [r7, #28]
 8009d6c:	8bbb      	ldrh	r3, [r7, #28]
 8009d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d01b      	beq.n	8009dae <USB_DeactivateEndpoint+0x1da>
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	881b      	ldrh	r3, [r3, #0]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8c:	837b      	strh	r3, [r7, #26]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	441a      	add	r2, r3
 8009d98:	8b7b      	ldrh	r3, [r7, #26]
 8009d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc4:	833b      	strh	r3, [r7, #24]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	441a      	add	r2, r3
 8009dd0:	8b3b      	ldrh	r3, [r7, #24]
 8009dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfc:	82fb      	strh	r3, [r7, #22]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	441a      	add	r2, r3
 8009e08:	8afb      	ldrh	r3, [r7, #22]
 8009e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e34:	82bb      	strh	r3, [r7, #20]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	441a      	add	r2, r3
 8009e40:	8abb      	ldrh	r3, [r7, #20]
 8009e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	8013      	strh	r3, [r2, #0]
 8009e56:	e0a3      	b.n	8009fa0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01b      	beq.n	8009ea8 <USB_DeactivateEndpoint+0x2d4>
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	441a      	add	r2, r3
 8009e92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	881b      	ldrh	r3, [r3, #0]
 8009eb4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009eb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01b      	beq.n	8009ef8 <USB_DeactivateEndpoint+0x324>
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed6:	853b      	strh	r3, [r7, #40]	; 0x28
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	441a      	add	r2, r3
 8009ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	441a      	add	r2, r3
 8009f1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	441a      	add	r2, r3
 8009f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	441a      	add	r2, r3
 8009f8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3734      	adds	r7, #52	; 0x34
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bc80      	pop	{r7}
 8009faa:	4770      	bx	lr

08009fac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b0cc      	sub	sp, #304	; 0x130
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fba:	6018      	str	r0, [r3, #0]
 8009fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fc4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	f041 817d 	bne.w	800b2d2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	699a      	ldr	r2, [r3, #24]
 8009fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d908      	bls.n	800a006 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a004:	e007      	b.n	800a016 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	7b1b      	ldrb	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d152      	bne.n	800a0cc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a02a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6959      	ldr	r1, [r3, #20]
 800a032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	88da      	ldrh	r2, [r3, #6]
 800a03e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a042:	b29b      	uxth	r3, r3
 800a044:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a048:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f001 ff0e 	bl	800be6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a056:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a05a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a05e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a062:	6812      	ldr	r2, [r2, #0]
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a06a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a074:	b29b      	uxth	r3, r3
 800a076:	4619      	mov	r1, r3
 800a078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a080:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a084:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800a088:	6812      	ldr	r2, [r2, #0]
 800a08a:	440a      	add	r2, r1
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	011a      	lsls	r2, r3, #4
 800a09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	f001 b8b5 	b.w	800b236 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a0cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	78db      	ldrb	r3, [r3, #3]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	f040 84c6 	bne.w	800aa6a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a0de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6a1a      	ldr	r2, [r3, #32]
 800a0ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	f240 8443 	bls.w	800a982 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a0fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a10a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a122:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	441a      	add	r2, r3
 800a140:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a14c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a154:	b29b      	uxth	r3, r3
 800a156:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6a1a      	ldr	r2, [r3, #32]
 800a164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a168:	1ad2      	subs	r2, r2, r3
 800a16a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a16e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	881b      	ldrh	r3, [r3, #0]
 800a192:	b29b      	uxth	r3, r3
 800a194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 823e 	beq.w	800a61a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a19e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a1a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f040 809a 	bne.w	800a2f8 <USB_EPStartXfer+0x34c>
 800a1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	440a      	add	r2, r1
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	011a      	lsls	r2, r3, #4
 800a20e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4413      	add	r3, r2
 800a21a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a21e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d122      	bne.n	800a276 <USB_EPStartXfer+0x2ca>
 800a230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a234:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a242:	b29a      	uxth	r2, r3
 800a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	801a      	strh	r2, [r3, #0]
 800a250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a266:	b29a      	uxth	r2, r3
 800a268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	801a      	strh	r2, [r3, #0]
 800a274:	e079      	b.n	800a36a <USB_EPStartXfer+0x3be>
 800a276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a27a:	2b3e      	cmp	r3, #62	; 0x3e
 800a27c:	d81b      	bhi.n	800a2b6 <USB_EPStartXfer+0x30a>
 800a27e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <USB_EPStartXfer+0x2f2>
 800a294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a298:	3301      	adds	r3, #1
 800a29a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a29e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	029b      	lsls	r3, r3, #10
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	801a      	strh	r2, [r3, #0]
 800a2b4:	e059      	b.n	800a36a <USB_EPStartXfer+0x3be>
 800a2b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ba:	095b      	lsrs	r3, r3, #5
 800a2bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a2c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2c4:	f003 031f 	and.w	r3, r3, #31
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d104      	bne.n	800a2d6 <USB_EPStartXfer+0x32a>
 800a2cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a2d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	029b      	lsls	r3, r3, #10
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	801a      	strh	r2, [r3, #0]
 800a2f6:	e038      	b.n	800a36a <USB_EPStartXfer+0x3be>
 800a2f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	785b      	ldrb	r3, [r3, #1]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d130      	bne.n	800a36a <USB_EPStartXfer+0x3be>
 800a308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a30c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a316:	b29b      	uxth	r3, r3
 800a318:	4619      	mov	r1, r3
 800a31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a31e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a322:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a326:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800a32a:	6812      	ldr	r2, [r2, #0]
 800a32c:	440a      	add	r2, r1
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	011a      	lsls	r2, r3, #4
 800a33e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a342:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4413      	add	r3, r2
 800a34a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a36a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	895b      	ldrh	r3, [r3, #10]
 800a376:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a37a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6959      	ldr	r1, [r3, #20]
 800a386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a390:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a394:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a398:	6800      	ldr	r0, [r0, #0]
 800a39a:	f001 fd68 	bl	800be6e <USB_WritePMA>
            ep->xfer_buff += len;
 800a39e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	695a      	ldr	r2, [r3, #20]
 800a3aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ae:	441a      	add	r2, r3
 800a3b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6a1a      	ldr	r2, [r3, #32]
 800a3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d90f      	bls.n	800a3f8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800a3d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e8:	1ad2      	subs	r2, r2, r3
 800a3ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	621a      	str	r2, [r3, #32]
 800a3f6:	e00e      	b.n	800a416 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a3f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6a1b      	ldr	r3, [r3, #32]
 800a404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a40c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2200      	movs	r2, #0
 800a414:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	785b      	ldrb	r3, [r3, #1]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 809a 	bne.w	800a55c <USB_EPStartXfer+0x5b0>
 800a428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a42c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a430:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a434:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a438:	6812      	ldr	r2, [r2, #0]
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a440:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	4619      	mov	r1, r3
 800a44e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a452:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a456:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a45a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800a45e:	6812      	ldr	r2, [r2, #0]
 800a460:	440a      	add	r2, r1
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	011a      	lsls	r2, r3, #4
 800a472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a476:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4413      	add	r3, r2
 800a47e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a486:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d122      	bne.n	800a4da <USB_EPStartXfer+0x52e>
 800a494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a498:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	801a      	strh	r2, [r3, #0]
 800a4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e083      	b.n	800a5e2 <USB_EPStartXfer+0x636>
 800a4da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4de:	2b3e      	cmp	r3, #62	; 0x3e
 800a4e0:	d81b      	bhi.n	800a51a <USB_EPStartXfer+0x56e>
 800a4e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4e6:	085b      	lsrs	r3, r3, #1
 800a4e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a4ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d004      	beq.n	800a502 <USB_EPStartXfer+0x556>
 800a4f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a502:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a506:	b29b      	uxth	r3, r3
 800a508:	029b      	lsls	r3, r3, #10
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a510:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	801a      	strh	r2, [r3, #0]
 800a518:	e063      	b.n	800a5e2 <USB_EPStartXfer+0x636>
 800a51a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a51e:	095b      	lsrs	r3, r3, #5
 800a520:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a528:	f003 031f 	and.w	r3, r3, #31
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <USB_EPStartXfer+0x58e>
 800a530:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a534:	3b01      	subs	r3, #1
 800a536:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a53a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a53e:	b29b      	uxth	r3, r3
 800a540:	029b      	lsls	r3, r3, #10
 800a542:	b29b      	uxth	r3, r3
 800a544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a552:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	801a      	strh	r2, [r3, #0]
 800a55a:	e042      	b.n	800a5e2 <USB_EPStartXfer+0x636>
 800a55c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d13a      	bne.n	800a5e2 <USB_EPStartXfer+0x636>
 800a56c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a570:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a574:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a578:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a58e:	b29b      	uxth	r3, r3
 800a590:	4619      	mov	r1, r3
 800a592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a596:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a59a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a59e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	011a      	lsls	r2, r3, #4
 800a5b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a5c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a5e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	891b      	ldrh	r3, [r3, #8]
 800a5ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6959      	ldr	r1, [r3, #20]
 800a5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a602:	b29b      	uxth	r3, r3
 800a604:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a608:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a60c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a610:	6800      	ldr	r0, [r0, #0]
 800a612:	f001 fc2c 	bl	800be6e <USB_WritePMA>
 800a616:	f000 be0e 	b.w	800b236 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a61a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a61e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	785b      	ldrb	r3, [r3, #1]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d16d      	bne.n	800a706 <USB_EPStartXfer+0x75a>
 800a62a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a62e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	64bb      	str	r3, [r7, #72]	; 0x48
 800a636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a63a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a644:	b29b      	uxth	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a64a:	4413      	add	r3, r2
 800a64c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a64e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	011a      	lsls	r2, r3, #4
 800a65c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a65e:	4413      	add	r3, r2
 800a660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a664:	647b      	str	r3, [r7, #68]	; 0x44
 800a666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d112      	bne.n	800a694 <USB_EPStartXfer+0x6e8>
 800a66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a678:	b29a      	uxth	r2, r3
 800a67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	b29b      	uxth	r3, r3
 800a684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a690:	801a      	strh	r2, [r3, #0]
 800a692:	e063      	b.n	800a75c <USB_EPStartXfer+0x7b0>
 800a694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a698:	2b3e      	cmp	r3, #62	; 0x3e
 800a69a:	d817      	bhi.n	800a6cc <USB_EPStartXfer+0x720>
 800a69c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6a0:	085b      	lsrs	r3, r3, #1
 800a6a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <USB_EPStartXfer+0x710>
 800a6b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a6bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	029b      	lsls	r3, r3, #10
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	e047      	b.n	800a75c <USB_EPStartXfer+0x7b0>
 800a6cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6d0:	095b      	lsrs	r3, r3, #5
 800a6d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a6d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6da:	f003 031f 	and.w	r3, r3, #31
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d104      	bne.n	800a6ec <USB_EPStartXfer+0x740>
 800a6e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a6ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	029b      	lsls	r3, r3, #10
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a702:	801a      	strh	r2, [r3, #0]
 800a704:	e02a      	b.n	800a75c <USB_EPStartXfer+0x7b0>
 800a706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a70a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d122      	bne.n	800a75c <USB_EPStartXfer+0x7b0>
 800a716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	653b      	str	r3, [r7, #80]	; 0x50
 800a722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a726:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a730:	b29b      	uxth	r3, r3
 800a732:	461a      	mov	r2, r3
 800a734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a736:	4413      	add	r3, r2
 800a738:	653b      	str	r3, [r7, #80]	; 0x50
 800a73a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	011a      	lsls	r2, r3, #4
 800a748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74a:	4413      	add	r3, r2
 800a74c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a750:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a756:	b29a      	uxth	r2, r3
 800a758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a75c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	891b      	ldrh	r3, [r3, #8]
 800a768:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a76c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a770:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6959      	ldr	r1, [r3, #20]
 800a778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a782:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a786:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a78a:	6800      	ldr	r0, [r0, #0]
 800a78c:	f001 fb6f 	bl	800be6e <USB_WritePMA>
            ep->xfer_buff += len;
 800a790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	695a      	ldr	r2, [r3, #20]
 800a79c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7a0:	441a      	add	r2, r3
 800a7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a7ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6a1a      	ldr	r2, [r3, #32]
 800a7ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d90f      	bls.n	800a7ea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800a7ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6a1a      	ldr	r2, [r3, #32]
 800a7d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7da:	1ad2      	subs	r2, r2, r3
 800a7dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	621a      	str	r2, [r3, #32]
 800a7e8:	e00e      	b.n	800a808 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800a7ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6a1b      	ldr	r3, [r3, #32]
 800a7f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a7fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2200      	movs	r2, #0
 800a806:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a80c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	643b      	str	r3, [r7, #64]	; 0x40
 800a814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	785b      	ldrb	r3, [r3, #1]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d16d      	bne.n	800a900 <USB_EPStartXfer+0x954>
 800a824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a83e:	b29b      	uxth	r3, r3
 800a840:	461a      	mov	r2, r3
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	4413      	add	r3, r2
 800a846:	63bb      	str	r3, [r7, #56]	; 0x38
 800a848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a84c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	011a      	lsls	r2, r3, #4
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	4413      	add	r3, r2
 800a85a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a85e:	637b      	str	r3, [r7, #52]	; 0x34
 800a860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d112      	bne.n	800a88e <USB_EPStartXfer+0x8e2>
 800a868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a872:	b29a      	uxth	r2, r3
 800a874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a886:	b29a      	uxth	r2, r3
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	801a      	strh	r2, [r3, #0]
 800a88c:	e05d      	b.n	800a94a <USB_EPStartXfer+0x99e>
 800a88e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a892:	2b3e      	cmp	r3, #62	; 0x3e
 800a894:	d817      	bhi.n	800a8c6 <USB_EPStartXfer+0x91a>
 800a896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d004      	beq.n	800a8b6 <USB_EPStartXfer+0x90a>
 800a8ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	029b      	lsls	r3, r3, #10
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c2:	801a      	strh	r2, [r3, #0]
 800a8c4:	e041      	b.n	800a94a <USB_EPStartXfer+0x99e>
 800a8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ca:	095b      	lsrs	r3, r3, #5
 800a8cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d4:	f003 031f 	and.w	r3, r3, #31
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <USB_EPStartXfer+0x93a>
 800a8dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	029b      	lsls	r3, r3, #10
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fc:	801a      	strh	r2, [r3, #0]
 800a8fe:	e024      	b.n	800a94a <USB_EPStartXfer+0x99e>
 800a900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	785b      	ldrb	r3, [r3, #1]
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d11c      	bne.n	800a94a <USB_EPStartXfer+0x99e>
 800a910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a91e:	b29b      	uxth	r3, r3
 800a920:	461a      	mov	r2, r3
 800a922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a924:	4413      	add	r3, r2
 800a926:	643b      	str	r3, [r7, #64]	; 0x40
 800a928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	011a      	lsls	r2, r3, #4
 800a936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a938:	4413      	add	r3, r2
 800a93a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a944:	b29a      	uxth	r2, r3
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a94a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a94e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	895b      	ldrh	r3, [r3, #10]
 800a956:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a95a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a95e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6959      	ldr	r1, [r3, #20]
 800a966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a970:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a974:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a978:	6800      	ldr	r0, [r0, #0]
 800a97a:	f001 fa78 	bl	800be6e <USB_WritePMA>
 800a97e:	f000 bc5a 	b.w	800b236 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a9bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	441a      	add	r2, r3
 800a9d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a9da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a9ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa0e:	4413      	add	r3, r2
 800aa10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	011a      	lsls	r2, r3, #4
 800aa20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa22:	4413      	add	r3, r2
 800aa24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa28:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	891b      	ldrh	r3, [r3, #8]
 800aa40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6959      	ldr	r1, [r3, #20]
 800aa50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800aa5a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800aa5e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800aa62:	6800      	ldr	r0, [r0, #0]
 800aa64:	f001 fa03 	bl	800be6e <USB_WritePMA>
 800aa68:	e3e5      	b.n	800b236 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800aa6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa90:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800aa94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	441a      	add	r2, r3
 800aaae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800aab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aabe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a1a      	ldr	r2, [r3, #32]
 800aad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aad6:	1ad2      	subs	r2, r2, r3
 800aad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aadc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 81bc 	beq.w	800ae84 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d16d      	bne.n	800ac06 <USB_EPStartXfer+0xc5a>
 800ab2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	461a      	mov	r2, r3
 800ab48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab4a:	4413      	add	r3, r2
 800ab4c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	011a      	lsls	r2, r3, #4
 800ab5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab5e:	4413      	add	r3, r2
 800ab60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab64:	677b      	str	r3, [r7, #116]	; 0x74
 800ab66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d112      	bne.n	800ab94 <USB_EPStartXfer+0xbe8>
 800ab6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab7c:	801a      	strh	r2, [r3, #0]
 800ab7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab90:	801a      	strh	r2, [r3, #0]
 800ab92:	e060      	b.n	800ac56 <USB_EPStartXfer+0xcaa>
 800ab94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab98:	2b3e      	cmp	r3, #62	; 0x3e
 800ab9a:	d817      	bhi.n	800abcc <USB_EPStartXfer+0xc20>
 800ab9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aba0:	085b      	lsrs	r3, r3, #1
 800aba2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <USB_EPStartXfer+0xc10>
 800abb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800abb6:	3301      	adds	r3, #1
 800abb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800abbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	029b      	lsls	r3, r3, #10
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abc8:	801a      	strh	r2, [r3, #0]
 800abca:	e044      	b.n	800ac56 <USB_EPStartXfer+0xcaa>
 800abcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800abd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abda:	f003 031f 	and.w	r3, r3, #31
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d104      	bne.n	800abec <USB_EPStartXfer+0xc40>
 800abe2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800abe6:	3b01      	subs	r3, #1
 800abe8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800abec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	029b      	lsls	r3, r3, #10
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac02:	801a      	strh	r2, [r3, #0]
 800ac04:	e027      	b.n	800ac56 <USB_EPStartXfer+0xcaa>
 800ac06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	785b      	ldrb	r3, [r3, #1]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d11f      	bne.n	800ac56 <USB_EPStartXfer+0xcaa>
 800ac16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	461a      	mov	r2, r3
 800ac28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	011a      	lsls	r2, r3, #4
 800ac40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac44:	4413      	add	r3, r2
 800ac46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	895b      	ldrh	r3, [r3, #10]
 800ac62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6959      	ldr	r1, [r3, #20]
 800ac72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ac7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ac80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ac84:	6800      	ldr	r0, [r0, #0]
 800ac86:	f001 f8f2 	bl	800be6e <USB_WritePMA>
          ep->xfer_buff += len;
 800ac8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	695a      	ldr	r2, [r3, #20]
 800ac96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac9a:	441a      	add	r2, r3
 800ac9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800aca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6a1a      	ldr	r2, [r3, #32]
 800acb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d90f      	bls.n	800ace4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800acc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6a1a      	ldr	r2, [r3, #32]
 800acd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acd4:	1ad2      	subs	r2, r2, r3
 800acd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	621a      	str	r2, [r3, #32]
 800ace2:	e00e      	b.n	800ad02 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800ace4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ace8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800acf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2200      	movs	r2, #0
 800ad00:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800ad02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 8295 	beq.w	800b236 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d16d      	bne.n	800adf8 <USB_EPStartXfer+0xe4c>
 800ad1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad3c:	4413      	add	r3, r2
 800ad3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	011a      	lsls	r2, r3, #4
 800ad4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad50:	4413      	add	r3, r2
 800ad52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad56:	667b      	str	r3, [r7, #100]	; 0x64
 800ad58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d112      	bne.n	800ad86 <USB_EPStartXfer+0xdda>
 800ad60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6e:	801a      	strh	r2, [r3, #0]
 800ad70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad72:	881b      	ldrh	r3, [r3, #0]
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad82:	801a      	strh	r2, [r3, #0]
 800ad84:	e063      	b.n	800ae4e <USB_EPStartXfer+0xea2>
 800ad86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad8a:	2b3e      	cmp	r3, #62	; 0x3e
 800ad8c:	d817      	bhi.n	800adbe <USB_EPStartXfer+0xe12>
 800ad8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ad98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <USB_EPStartXfer+0xe02>
 800ada4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada8:	3301      	adds	r3, #1
 800adaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800adae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	029b      	lsls	r3, r3, #10
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adba:	801a      	strh	r2, [r3, #0]
 800adbc:	e047      	b.n	800ae4e <USB_EPStartXfer+0xea2>
 800adbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc2:	095b      	lsrs	r3, r3, #5
 800adc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800adc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adcc:	f003 031f 	and.w	r3, r3, #31
 800add0:	2b00      	cmp	r3, #0
 800add2:	d104      	bne.n	800adde <USB_EPStartXfer+0xe32>
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add8:	3b01      	subs	r3, #1
 800adda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800adde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	029b      	lsls	r3, r3, #10
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adf4:	801a      	strh	r2, [r3, #0]
 800adf6:	e02a      	b.n	800ae4e <USB_EPStartXfer+0xea2>
 800adf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d122      	bne.n	800ae4e <USB_EPStartXfer+0xea2>
 800ae08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	673b      	str	r3, [r7, #112]	; 0x70
 800ae14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae28:	4413      	add	r3, r2
 800ae2a:	673b      	str	r3, [r7, #112]	; 0x70
 800ae2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	011a      	lsls	r2, r3, #4
 800ae3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	891b      	ldrh	r3, [r3, #8]
 800ae5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6959      	ldr	r1, [r3, #20]
 800ae6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ae74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ae78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ae7c:	6800      	ldr	r0, [r0, #0]
 800ae7e:	f000 fff6 	bl	800be6e <USB_WritePMA>
 800ae82:	e1d8      	b.n	800b236 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	785b      	ldrb	r3, [r3, #1]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d178      	bne.n	800af86 <USB_EPStartXfer+0xfda>
 800ae94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aeb8:	4413      	add	r3, r2
 800aeba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	011a      	lsls	r2, r3, #4
 800aecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aed0:	4413      	add	r3, r2
 800aed2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aeda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d116      	bne.n	800af10 <USB_EPStartXfer+0xf64>
 800aee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aef4:	801a      	strh	r2, [r3, #0]
 800aef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af06:	b29a      	uxth	r2, r3
 800af08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af0c:	801a      	strh	r2, [r3, #0]
 800af0e:	e06b      	b.n	800afe8 <USB_EPStartXfer+0x103c>
 800af10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af14:	2b3e      	cmp	r3, #62	; 0x3e
 800af16:	d818      	bhi.n	800af4a <USB_EPStartXfer+0xf9e>
 800af18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af1c:	085b      	lsrs	r3, r3, #1
 800af1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800af22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <USB_EPStartXfer+0xf8c>
 800af2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af32:	3301      	adds	r3, #1
 800af34:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800af38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	029b      	lsls	r3, r3, #10
 800af40:	b29a      	uxth	r2, r3
 800af42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af46:	801a      	strh	r2, [r3, #0]
 800af48:	e04e      	b.n	800afe8 <USB_EPStartXfer+0x103c>
 800af4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af4e:	095b      	lsrs	r3, r3, #5
 800af50:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800af54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af58:	f003 031f 	and.w	r3, r3, #31
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d104      	bne.n	800af6a <USB_EPStartXfer+0xfbe>
 800af60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af64:	3b01      	subs	r3, #1
 800af66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800af6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af6e:	b29b      	uxth	r3, r3
 800af70:	029b      	lsls	r3, r3, #10
 800af72:	b29b      	uxth	r3, r3
 800af74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af82:	801a      	strh	r2, [r3, #0]
 800af84:	e030      	b.n	800afe8 <USB_EPStartXfer+0x103c>
 800af86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d128      	bne.n	800afe8 <USB_EPStartXfer+0x103c>
 800af96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	461a      	mov	r2, r3
 800afb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800afba:	4413      	add	r3, r2
 800afbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800afc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	011a      	lsls	r2, r3, #4
 800afce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800afd2:	4413      	add	r3, r2
 800afd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800afdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afe6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800afe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	891b      	ldrh	r3, [r3, #8]
 800aff4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800affc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6959      	ldr	r1, [r3, #20]
 800b004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b008:	b29b      	uxth	r3, r3
 800b00a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b00e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b012:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b016:	6800      	ldr	r0, [r0, #0]
 800b018:	f000 ff29 	bl	800be6e <USB_WritePMA>
          ep->xfer_buff += len;
 800b01c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	695a      	ldr	r2, [r3, #20]
 800b028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b02c:	441a      	add	r2, r3
 800b02e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b03e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	6a1a      	ldr	r2, [r3, #32]
 800b046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b04a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	429a      	cmp	r2, r3
 800b054:	d90f      	bls.n	800b076 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800b056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6a1a      	ldr	r2, [r3, #32]
 800b062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b06c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	621a      	str	r2, [r3, #32]
 800b074:	e00e      	b.n	800b094 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800b076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b07a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b08a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2200      	movs	r2, #0
 800b092:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80cc 	beq.w	800b236 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b09e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	785b      	ldrb	r3, [r3, #1]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d178      	bne.n	800b1ae <USB_EPStartXfer+0x1202>
 800b0bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b0ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	461a      	mov	r2, r3
 800b0dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b0e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	011a      	lsls	r2, r3, #4
 800b0f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b0fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d116      	bne.n	800b138 <USB_EPStartXfer+0x118c>
 800b10a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	b29b      	uxth	r3, r3
 800b112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b116:	b29a      	uxth	r2, r3
 800b118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b11c:	801a      	strh	r2, [r3, #0]
 800b11e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	b29b      	uxth	r3, r3
 800b126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b12a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b12e:	b29a      	uxth	r2, r3
 800b130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b134:	801a      	strh	r2, [r3, #0]
 800b136:	e064      	b.n	800b202 <USB_EPStartXfer+0x1256>
 800b138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b13c:	2b3e      	cmp	r3, #62	; 0x3e
 800b13e:	d818      	bhi.n	800b172 <USB_EPStartXfer+0x11c6>
 800b140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b144:	085b      	lsrs	r3, r3, #1
 800b146:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b14a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d004      	beq.n	800b160 <USB_EPStartXfer+0x11b4>
 800b156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b15a:	3301      	adds	r3, #1
 800b15c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b164:	b29b      	uxth	r3, r3
 800b166:	029b      	lsls	r3, r3, #10
 800b168:	b29a      	uxth	r2, r3
 800b16a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b16e:	801a      	strh	r2, [r3, #0]
 800b170:	e047      	b.n	800b202 <USB_EPStartXfer+0x1256>
 800b172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b176:	095b      	lsrs	r3, r3, #5
 800b178:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b17c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b180:	f003 031f 	and.w	r3, r3, #31
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <USB_EPStartXfer+0x11e6>
 800b188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b18c:	3b01      	subs	r3, #1
 800b18e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b196:	b29b      	uxth	r3, r3
 800b198:	029b      	lsls	r3, r3, #10
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1aa:	801a      	strh	r2, [r3, #0]
 800b1ac:	e029      	b.n	800b202 <USB_EPStartXfer+0x1256>
 800b1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	785b      	ldrb	r3, [r3, #1]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d121      	bne.n	800b202 <USB_EPStartXfer+0x1256>
 800b1be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b1da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	011a      	lsls	r2, r3, #4
 800b1e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b200:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	895b      	ldrh	r3, [r3, #10]
 800b20e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6959      	ldr	r1, [r3, #20]
 800b21e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b222:	b29b      	uxth	r3, r3
 800b224:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b228:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b22c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b230:	6800      	ldr	r0, [r0, #0]
 800b232:	f000 fe1c 	bl	800be6e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b23a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	4413      	add	r3, r2
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	b29b      	uxth	r3, r3
 800b254:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b258:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b25c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b264:	8013      	strh	r3, [r2, #0]
 800b266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b26a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b26e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b272:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b276:	8812      	ldrh	r2, [r2, #0]
 800b278:	f082 0210 	eor.w	r2, r2, #16
 800b27c:	801a      	strh	r2, [r3, #0]
 800b27e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b282:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b286:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b28a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b28e:	8812      	ldrh	r2, [r2, #0]
 800b290:	f082 0220 	eor.w	r2, r2, #32
 800b294:	801a      	strh	r2, [r3, #0]
 800b296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b29a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	441a      	add	r2, r3
 800b2b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2b4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	8013      	strh	r3, [r2, #0]
 800b2ce:	f000 bc9f 	b.w	800bc10 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b2d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	7b1b      	ldrb	r3, [r3, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f040 80ae 	bne.w	800b440 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	699a      	ldr	r2, [r3, #24]
 800b2f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b2f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d917      	bls.n	800b330 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800b300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	699a      	ldr	r2, [r3, #24]
 800b31c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b320:	1ad2      	subs	r2, r2, r3
 800b322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	619a      	str	r2, [r3, #24]
 800b32e:	e00e      	b.n	800b34e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800b330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2200      	movs	r2, #0
 800b34c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b35c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	461a      	mov	r2, r3
 800b36e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b372:	4413      	add	r3, r2
 800b374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b37c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	011a      	lsls	r2, r3, #4
 800b386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b38a:	4413      	add	r3, r2
 800b38c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d116      	bne.n	800b3ca <USB_EPStartXfer+0x141e>
 800b39c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3ae:	801a      	strh	r2, [r3, #0]
 800b3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3c6:	801a      	strh	r2, [r3, #0]
 800b3c8:	e3e8      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
 800b3ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3ce:	2b3e      	cmp	r3, #62	; 0x3e
 800b3d0:	d818      	bhi.n	800b404 <USB_EPStartXfer+0x1458>
 800b3d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3d6:	085b      	lsrs	r3, r3, #1
 800b3d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b3dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d004      	beq.n	800b3f2 <USB_EPStartXfer+0x1446>
 800b3e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b3f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	029b      	lsls	r3, r3, #10
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b400:	801a      	strh	r2, [r3, #0]
 800b402:	e3cb      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
 800b404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b408:	095b      	lsrs	r3, r3, #5
 800b40a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b40e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b412:	f003 031f 	and.w	r3, r3, #31
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <USB_EPStartXfer+0x1478>
 800b41a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b41e:	3b01      	subs	r3, #1
 800b420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b424:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b428:	b29b      	uxth	r3, r3
 800b42a:	029b      	lsls	r3, r3, #10
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b436:	b29a      	uxth	r2, r3
 800b438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	e3ad      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	78db      	ldrb	r3, [r3, #3]
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	f040 8200 	bne.w	800b852 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	785b      	ldrb	r3, [r3, #1]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f040 8091 	bne.w	800b586 <USB_EPStartXfer+0x15da>
 800b464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b480:	b29b      	uxth	r3, r3
 800b482:	461a      	mov	r2, r3
 800b484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b488:	4413      	add	r3, r2
 800b48a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b48e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	011a      	lsls	r2, r3, #4
 800b49c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d116      	bne.n	800b4e8 <USB_EPStartXfer+0x153c>
 800b4ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4cc:	801a      	strh	r2, [r3, #0]
 800b4ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4e4:	801a      	strh	r2, [r3, #0]
 800b4e6:	e083      	b.n	800b5f0 <USB_EPStartXfer+0x1644>
 800b4e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	2b3e      	cmp	r3, #62	; 0x3e
 800b4f6:	d820      	bhi.n	800b53a <USB_EPStartXfer+0x158e>
 800b4f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	085b      	lsrs	r3, r3, #1
 800b506:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b50a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b50e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d004      	beq.n	800b528 <USB_EPStartXfer+0x157c>
 800b51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b522:	3301      	adds	r3, #1
 800b524:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	029b      	lsls	r3, r3, #10
 800b530:	b29a      	uxth	r2, r3
 800b532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b536:	801a      	strh	r2, [r3, #0]
 800b538:	e05a      	b.n	800b5f0 <USB_EPStartXfer+0x1644>
 800b53a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b53e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	095b      	lsrs	r3, r3, #5
 800b548:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	f003 031f 	and.w	r3, r3, #31
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <USB_EPStartXfer+0x15be>
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b564:	3b01      	subs	r3, #1
 800b566:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56e:	b29b      	uxth	r3, r3
 800b570:	029b      	lsls	r3, r3, #10
 800b572:	b29b      	uxth	r3, r3
 800b574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b582:	801a      	strh	r2, [r3, #0]
 800b584:	e034      	b.n	800b5f0 <USB_EPStartXfer+0x1644>
 800b586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b58a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d12c      	bne.n	800b5f0 <USB_EPStartXfer+0x1644>
 800b596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b59a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	011a      	lsls	r2, r3, #4
 800b5ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b5d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5ee:	801a      	strh	r2, [r3, #0]
 800b5f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f040 8091 	bne.w	800b732 <USB_EPStartXfer+0x1786>
 800b610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b61e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	461a      	mov	r2, r3
 800b630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b634:	4413      	add	r3, r2
 800b636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b63a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b63e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	011a      	lsls	r2, r3, #4
 800b648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b64c:	4413      	add	r3, r2
 800b64e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b652:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b65a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d116      	bne.n	800b694 <USB_EPStartXfer+0x16e8>
 800b666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b672:	b29a      	uxth	r2, r3
 800b674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b678:	801a      	strh	r2, [r3, #0]
 800b67a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	b29b      	uxth	r3, r3
 800b682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b690:	801a      	strh	r2, [r3, #0]
 800b692:	e07c      	b.n	800b78e <USB_EPStartXfer+0x17e2>
 800b694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	2b3e      	cmp	r3, #62	; 0x3e
 800b6a2:	d820      	bhi.n	800b6e6 <USB_EPStartXfer+0x173a>
 800b6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	085b      	lsrs	r3, r3, #1
 800b6b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d004      	beq.n	800b6d4 <USB_EPStartXfer+0x1728>
 800b6ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	029b      	lsls	r3, r3, #10
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6e2:	801a      	strh	r2, [r3, #0]
 800b6e4:	e053      	b.n	800b78e <USB_EPStartXfer+0x17e2>
 800b6e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	095b      	lsrs	r3, r3, #5
 800b6f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	f003 031f 	and.w	r3, r3, #31
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d104      	bne.n	800b716 <USB_EPStartXfer+0x176a>
 800b70c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b710:	3b01      	subs	r3, #1
 800b712:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b716:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	029b      	lsls	r3, r3, #10
 800b71e:	b29b      	uxth	r3, r3
 800b720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b728:	b29a      	uxth	r2, r3
 800b72a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b72e:	801a      	strh	r2, [r3, #0]
 800b730:	e02d      	b.n	800b78e <USB_EPStartXfer+0x17e2>
 800b732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d125      	bne.n	800b78e <USB_EPStartXfer+0x17e2>
 800b742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b750:	b29b      	uxth	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b758:	4413      	add	r3, r2
 800b75a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b75e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	011a      	lsls	r2, r3, #4
 800b76c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b770:	4413      	add	r3, r2
 800b772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b77a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b77e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	b29a      	uxth	r2, r3
 800b788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b78c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b78e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 81fe 	beq.w	800bb9c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b7a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b7c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b7c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d005      	beq.n	800b7d8 <USB_EPStartXfer+0x182c>
 800b7cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10d      	bne.n	800b7f4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b7d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b7dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f040 81db 	bne.w	800bb9c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b7e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f040 81d4 	bne.w	800bb9c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b7f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	b29b      	uxth	r3, r3
 800b812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b81e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b82c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	441a      	add	r2, r3
 800b838:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b83c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	8013      	strh	r3, [r2, #0]
 800b850:	e1a4      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	78db      	ldrb	r3, [r3, #3]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	f040 819a 	bne.w	800bb98 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d917      	bls.n	800b8b0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800b880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800b890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	699a      	ldr	r2, [r3, #24]
 800b89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8a0:	1ad2      	subs	r2, r2, r3
 800b8a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	619a      	str	r2, [r3, #24]
 800b8ae:	e00e      	b.n	800b8ce <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800b8b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800b8c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b8ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	785b      	ldrb	r3, [r3, #1]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d178      	bne.n	800b9d0 <USB_EPStartXfer+0x1a24>
 800b8de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b902:	4413      	add	r3, r2
 800b904:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b90c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	011a      	lsls	r2, r3, #4
 800b916:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b91a:	4413      	add	r3, r2
 800b91c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b920:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d116      	bne.n	800b95a <USB_EPStartXfer+0x19ae>
 800b92c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	b29b      	uxth	r3, r3
 800b934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b938:	b29a      	uxth	r2, r3
 800b93a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b93e:	801a      	strh	r2, [r3, #0]
 800b940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	b29b      	uxth	r3, r3
 800b948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b950:	b29a      	uxth	r2, r3
 800b952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b956:	801a      	strh	r2, [r3, #0]
 800b958:	e06b      	b.n	800ba32 <USB_EPStartXfer+0x1a86>
 800b95a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b95e:	2b3e      	cmp	r3, #62	; 0x3e
 800b960:	d818      	bhi.n	800b994 <USB_EPStartXfer+0x19e8>
 800b962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b966:	085b      	lsrs	r3, r3, #1
 800b968:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b96c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d004      	beq.n	800b982 <USB_EPStartXfer+0x19d6>
 800b978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b97c:	3301      	adds	r3, #1
 800b97e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b986:	b29b      	uxth	r3, r3
 800b988:	029b      	lsls	r3, r3, #10
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	e04e      	b.n	800ba32 <USB_EPStartXfer+0x1a86>
 800b994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b99e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9a2:	f003 031f 	and.w	r3, r3, #31
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d104      	bne.n	800b9b4 <USB_EPStartXfer+0x1a08>
 800b9aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	029b      	lsls	r3, r3, #10
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b9cc:	801a      	strh	r2, [r3, #0]
 800b9ce:	e030      	b.n	800ba32 <USB_EPStartXfer+0x1a86>
 800b9d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d128      	bne.n	800ba32 <USB_EPStartXfer+0x1a86>
 800b9e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b9ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba04:	4413      	add	r3, r2
 800ba06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	011a      	lsls	r2, r3, #4
 800ba18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba30:	801a      	strh	r2, [r3, #0]
 800ba32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d178      	bne.n	800bb42 <USB_EPStartXfer+0x1b96>
 800ba50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ba5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba74:	4413      	add	r3, r2
 800ba76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ba7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	011a      	lsls	r2, r3, #4
 800ba88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d116      	bne.n	800bacc <USB_EPStartXfer+0x1b20>
 800ba9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800baaa:	b29a      	uxth	r2, r3
 800baac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bab0:	801a      	strh	r2, [r3, #0]
 800bab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29b      	uxth	r3, r3
 800baba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800babe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bac8:	801a      	strh	r2, [r3, #0]
 800baca:	e067      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
 800bacc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad0:	2b3e      	cmp	r3, #62	; 0x3e
 800bad2:	d818      	bhi.n	800bb06 <USB_EPStartXfer+0x1b5a>
 800bad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad8:	085b      	lsrs	r3, r3, #1
 800bada:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d004      	beq.n	800baf4 <USB_EPStartXfer+0x1b48>
 800baea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800baee:	3301      	adds	r3, #1
 800baf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800baf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	029b      	lsls	r3, r3, #10
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb02:	801a      	strh	r2, [r3, #0]
 800bb04:	e04a      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
 800bb06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bb10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb14:	f003 031f 	and.w	r3, r3, #31
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d104      	bne.n	800bb26 <USB_EPStartXfer+0x1b7a>
 800bb1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb20:	3b01      	subs	r3, #1
 800bb22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bb26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	029b      	lsls	r3, r3, #10
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb38:	b29a      	uxth	r2, r3
 800bb3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb3e:	801a      	strh	r2, [r3, #0]
 800bb40:	e02c      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
 800bb42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d124      	bne.n	800bb9c <USB_EPStartXfer+0x1bf0>
 800bb52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	461a      	mov	r2, r3
 800bb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb68:	4413      	add	r3, r2
 800bb6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	011a      	lsls	r2, r3, #4
 800bb7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb80:	4413      	add	r3, r2
 800bb82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bb86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb94:	801a      	strh	r2, [r3, #0]
 800bb96:	e001      	b.n	800bb9c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e03a      	b.n	800bc12 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bba0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	881b      	ldrh	r3, [r3, #0]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bbc6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bbca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bbce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bbd2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bbd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bbda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bbde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	441a      	add	r2, r3
 800bbf8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bbfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	785b      	ldrb	r3, [r3, #1]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d020      	beq.n	800bc70 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc44:	81bb      	strh	r3, [r7, #12]
 800bc46:	89bb      	ldrh	r3, [r7, #12]
 800bc48:	f083 0310 	eor.w	r3, r3, #16
 800bc4c:	81bb      	strh	r3, [r7, #12]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	441a      	add	r2, r3
 800bc58:	89bb      	ldrh	r3, [r7, #12]
 800bc5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	8013      	strh	r3, [r2, #0]
 800bc6e:	e01f      	b.n	800bcb0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc86:	81fb      	strh	r3, [r7, #14]
 800bc88:	89fb      	ldrh	r3, [r7, #14]
 800bc8a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc8e:	81fb      	strh	r3, [r7, #14]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	441a      	add	r2, r3
 800bc9a:	89fb      	ldrh	r3, [r7, #14]
 800bc9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bc80      	pop	{r7}
 800bcba:	4770      	bx	lr

0800bcbc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	7b1b      	ldrb	r3, [r3, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f040 809d 	bne.w	800be0a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	785b      	ldrb	r3, [r3, #1]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d04c      	beq.n	800bd72 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	823b      	strh	r3, [r7, #16]
 800bce6:	8a3b      	ldrh	r3, [r7, #16]
 800bce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01b      	beq.n	800bd28 <USB_EPClearStall+0x6c>
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	4413      	add	r3, r2
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd06:	81fb      	strh	r3, [r7, #14]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	441a      	add	r2, r3
 800bd12:	89fb      	ldrh	r3, [r7, #14]
 800bd14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	78db      	ldrb	r3, [r3, #3]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d06c      	beq.n	800be0a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd46:	81bb      	strh	r3, [r7, #12]
 800bd48:	89bb      	ldrh	r3, [r7, #12]
 800bd4a:	f083 0320 	eor.w	r3, r3, #32
 800bd4e:	81bb      	strh	r3, [r7, #12]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	441a      	add	r2, r3
 800bd5a:	89bb      	ldrh	r3, [r7, #12]
 800bd5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	8013      	strh	r3, [r2, #0]
 800bd70:	e04b      	b.n	800be0a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	881b      	ldrh	r3, [r3, #0]
 800bd7e:	82fb      	strh	r3, [r7, #22]
 800bd80:	8afb      	ldrh	r3, [r7, #22]
 800bd82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01b      	beq.n	800bdc2 <USB_EPClearStall+0x106>
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bda0:	82bb      	strh	r3, [r7, #20]
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	441a      	add	r2, r3
 800bdac:	8abb      	ldrh	r3, [r7, #20]
 800bdae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd8:	827b      	strh	r3, [r7, #18]
 800bdda:	8a7b      	ldrh	r3, [r7, #18]
 800bddc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bde0:	827b      	strh	r3, [r7, #18]
 800bde2:	8a7b      	ldrh	r3, [r7, #18]
 800bde4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bde8:	827b      	strh	r3, [r7, #18]
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	441a      	add	r2, r3
 800bdf4:	8a7b      	ldrh	r3, [r7, #18]
 800bdf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be06:	b29b      	uxth	r3, r3
 800be08:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	371c      	adds	r7, #28
 800be10:	46bd      	mov	sp, r7
 800be12:	bc80      	pop	{r7}
 800be14:	4770      	bx	lr

0800be16 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
 800be1e:	460b      	mov	r3, r1
 800be20:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800be22:	78fb      	ldrb	r3, [r7, #3]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2280      	movs	r2, #128	; 0x80
 800be2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	370c      	adds	r7, #12
 800be36:	46bd      	mov	sp, r7
 800be38:	bc80      	pop	{r7}
 800be3a:	4770      	bx	lr

0800be3c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bc80      	pop	{r7}
 800be4e:	4770      	bx	lr

0800be50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be5e:	b29b      	uxth	r3, r3
 800be60:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800be62:	68fb      	ldr	r3, [r7, #12]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	bc80      	pop	{r7}
 800be6c:	4770      	bx	lr

0800be6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be6e:	b480      	push	{r7}
 800be70:	b08d      	sub	sp, #52	; 0x34
 800be72:	af00      	add	r7, sp, #0
 800be74:	60f8      	str	r0, [r7, #12]
 800be76:	60b9      	str	r1, [r7, #8]
 800be78:	4611      	mov	r1, r2
 800be7a:	461a      	mov	r2, r3
 800be7c:	460b      	mov	r3, r1
 800be7e:	80fb      	strh	r3, [r7, #6]
 800be80:	4613      	mov	r3, r2
 800be82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be84:	88bb      	ldrh	r3, [r7, #4]
 800be86:	3301      	adds	r3, #1
 800be88:	085b      	lsrs	r3, r3, #1
 800be8a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	005a      	lsls	r2, r3, #1
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bea0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bea2:	6a3b      	ldr	r3, [r7, #32]
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bea6:	e01e      	b.n	800bee6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	3301      	adds	r3, #1
 800beb2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	461a      	mov	r2, r3
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	b29a      	uxth	r2, r3
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	3302      	adds	r3, #2
 800bed2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	3302      	adds	r3, #2
 800bed8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	3301      	adds	r3, #1
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee2:	3b01      	subs	r3, #1
 800bee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1dd      	bne.n	800bea8 <USB_WritePMA+0x3a>
  }
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	3734      	adds	r7, #52	; 0x34
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bc80      	pop	{r7}
 800bef6:	4770      	bx	lr

0800bef8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bef8:	b480      	push	{r7}
 800befa:	b08b      	sub	sp, #44	; 0x2c
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	4611      	mov	r1, r2
 800bf04:	461a      	mov	r2, r3
 800bf06:	460b      	mov	r3, r1
 800bf08:	80fb      	strh	r3, [r7, #6]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bf0e:	88bb      	ldrh	r3, [r7, #4]
 800bf10:	085b      	lsrs	r3, r3, #1
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	005a      	lsls	r2, r3, #1
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf2a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf30:	e01b      	b.n	800bf6a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	3302      	adds	r3, #2
 800bf3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	3302      	adds	r3, #2
 800bf62:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	3b01      	subs	r3, #1
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e0      	bne.n	800bf32 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bf70:	88bb      	ldrh	r3, [r7, #4]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d007      	beq.n	800bf8c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	b2da      	uxtb	r2, r3
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	701a      	strb	r2, [r3, #0]
  }
}
 800bf8c:	bf00      	nop
 800bf8e:	372c      	adds	r7, #44	; 0x2c
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bc80      	pop	{r7}
 800bf94:	4770      	bx	lr

0800bf96 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b084      	sub	sp, #16
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	7c1b      	ldrb	r3, [r3, #16]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d115      	bne.n	800bfda <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	2181      	movs	r1, #129	; 0x81
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f001 fe49 	bl	800dc4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	2101      	movs	r1, #1
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f001 fe3f 	bl	800dc4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bfd8:	e012      	b.n	800c000 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfda:	2340      	movs	r3, #64	; 0x40
 800bfdc:	2202      	movs	r2, #2
 800bfde:	2181      	movs	r1, #129	; 0x81
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f001 fe34 	bl	800dc4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfec:	2340      	movs	r3, #64	; 0x40
 800bfee:	2202      	movs	r2, #2
 800bff0:	2101      	movs	r1, #1
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fe2b 	bl	800dc4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c000:	2308      	movs	r3, #8
 800c002:	2203      	movs	r2, #3
 800c004:	2182      	movs	r1, #130	; 0x82
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f001 fe21 	bl	800dc4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c012:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c016:	f001 ff41 	bl	800de9c <USBD_static_malloc>
 800c01a:	4602      	mov	r2, r0
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d102      	bne.n	800c032 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c02c:	2301      	movs	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
 800c030:	e026      	b.n	800c080 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c038:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2200      	movs	r2, #0
 800c050:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	7c1b      	ldrb	r3, [r3, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d109      	bne.n	800c070 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c066:	2101      	movs	r1, #1
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 fee1 	bl	800de30 <USBD_LL_PrepareReceive>
 800c06e:	e007      	b.n	800c080 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c076:	2340      	movs	r3, #64	; 0x40
 800c078:	2101      	movs	r1, #1
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f001 fed8 	bl	800de30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c080:	7bfb      	ldrb	r3, [r7, #15]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b084      	sub	sp, #16
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c09a:	2181      	movs	r1, #129	; 0x81
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 fdfc 	bl	800dc9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 fdf5 	bl	800dc9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c0b8:	2182      	movs	r1, #130	; 0x82
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f001 fded 	bl	800dc9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00e      	beq.n	800c0ee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f001 fee7 	bl	800deb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b086      	sub	sp, #24
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c108:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d039      	beq.n	800c196 <USBD_CDC_Setup+0x9e>
 800c122:	2b20      	cmp	r3, #32
 800c124:	d17f      	bne.n	800c226 <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	88db      	ldrh	r3, [r3, #6]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d029      	beq.n	800c182 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	b25b      	sxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	da11      	bge.n	800c15c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c144:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	88d2      	ldrh	r2, [r2, #6]
 800c14a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c14c:	6939      	ldr	r1, [r7, #16]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	88db      	ldrh	r3, [r3, #6]
 800c152:	461a      	mov	r2, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 f994 	bl	800d482 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c15a:	e06b      	b.n	800c234 <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	785a      	ldrb	r2, [r3, #1]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	88db      	ldrh	r3, [r3, #6]
 800c16a:	b2da      	uxtb	r2, r3
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c172:	6939      	ldr	r1, [r7, #16]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	88db      	ldrh	r3, [r3, #6]
 800c178:	461a      	mov	r2, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 f9af 	bl	800d4de <USBD_CtlPrepareRx>
    break;
 800c180:	e058      	b.n	800c234 <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	7850      	ldrb	r0, [r2, #1]
 800c18e:	2200      	movs	r2, #0
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	4798      	blx	r3
    break;
 800c194:	e04e      	b.n	800c234 <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	2b0b      	cmp	r3, #11
 800c19c:	d02e      	beq.n	800c1fc <USBD_CDC_Setup+0x104>
 800c19e:	2b0b      	cmp	r3, #11
 800c1a0:	dc38      	bgt.n	800c214 <USBD_CDC_Setup+0x11c>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d002      	beq.n	800c1ac <USBD_CDC_Setup+0xb4>
 800c1a6:	2b0a      	cmp	r3, #10
 800c1a8:	d014      	beq.n	800c1d4 <USBD_CDC_Setup+0xdc>
 800c1aa:	e033      	b.n	800c214 <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c1b2:	2b03      	cmp	r3, #3
 800c1b4:	d107      	bne.n	800c1c6 <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c1b6:	f107 030c 	add.w	r3, r7, #12
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f001 f95f 	bl	800d482 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c1c4:	e02e      	b.n	800c224 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f001 f8f0 	bl	800d3ae <USBD_CtlError>
			  ret = USBD_FAIL;
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	75fb      	strb	r3, [r7, #23]
      break;
 800c1d2:	e027      	b.n	800c224 <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d107      	bne.n	800c1ee <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c1de:	f107 030f 	add.w	r3, r7, #15
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 f94b 	bl	800d482 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c1ec:	e01a      	b.n	800c224 <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 f8dc 	bl	800d3ae <USBD_CtlError>
			  ret = USBD_FAIL;
 800c1f6:	2302      	movs	r3, #2
 800c1f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c1fa:	e013      	b.n	800c224 <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c202:	2b03      	cmp	r3, #3
 800c204:	d00d      	beq.n	800c222 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 f8d0 	bl	800d3ae <USBD_CtlError>
			  ret = USBD_FAIL;
 800c20e:	2302      	movs	r3, #2
 800c210:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c212:	e006      	b.n	800c222 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 f8c9 	bl	800d3ae <USBD_CtlError>
      ret = USBD_FAIL;
 800c21c:	2302      	movs	r3, #2
 800c21e:	75fb      	strb	r3, [r7, #23]
      break;
 800c220:	e000      	b.n	800c224 <USBD_CDC_Setup+0x12c>
      break;
 800c222:	bf00      	nop
    }
    break;
 800c224:	e006      	b.n	800c234 <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 f8c0 	bl	800d3ae <USBD_CtlError>
    ret = USBD_FAIL;
 800c22e:	2302      	movs	r3, #2
 800c230:	75fb      	strb	r3, [r7, #23]
    break;
 800c232:	bf00      	nop
  }

  return ret;
 800c234:	7dfb      	ldrb	r3, [r7, #23]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b084      	sub	sp, #16
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c250:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c258:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c260:	2b00      	cmp	r3, #0
 800c262:	d03a      	beq.n	800c2da <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c264:	78fa      	ldrb	r2, [r7, #3]
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	440b      	add	r3, r1
 800c272:	331c      	adds	r3, #28
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d029      	beq.n	800c2ce <USBD_CDC_DataIn+0x90>
 800c27a:	78fa      	ldrb	r2, [r7, #3]
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	440b      	add	r3, r1
 800c288:	331c      	adds	r3, #28
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	78f9      	ldrb	r1, [r7, #3]
 800c28e:	68b8      	ldr	r0, [r7, #8]
 800c290:	460b      	mov	r3, r1
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	440b      	add	r3, r1
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4403      	add	r3, r0
 800c29a:	3338      	adds	r3, #56	; 0x38
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2a2:	fb01 f303 	mul.w	r3, r1, r3
 800c2a6:	1ad3      	subs	r3, r2, r3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d110      	bne.n	800c2ce <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c2ac:	78fa      	ldrb	r2, [r7, #3]
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	440b      	add	r3, r1
 800c2ba:	331c      	adds	r3, #28
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c2c0:	78f9      	ldrb	r1, [r7, #3]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fd8f 	bl	800ddea <USBD_LL_Transmit>
 800c2cc:	e003      	b.n	800c2d6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e000      	b.n	800c2dc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c2da:	2302      	movs	r3, #2
  }
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}

0800c2e4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c2f6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c2f8:	78fb      	ldrb	r3, [r7, #3]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 fdba 	bl	800de76 <USBD_LL_GetRxDataSize>
 800c302:	4602      	mov	r2, r0
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00d      	beq.n	800c330 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c328:	4611      	mov	r1, r2
 800c32a:	4798      	blx	r3

    return USBD_OK;
 800c32c:	2300      	movs	r3, #0
 800c32e:	e000      	b.n	800c332 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c330:	2302      	movs	r3, #2
  }
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c348:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c350:	2b00      	cmp	r3, #0
 800c352:	d015      	beq.n	800c380 <USBD_CDC_EP0_RxReady+0x46>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c35a:	2bff      	cmp	r3, #255	; 0xff
 800c35c:	d010      	beq.n	800c380 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c36c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c374:	b292      	uxth	r2, r2
 800c376:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	22ff      	movs	r2, #255	; 0xff
 800c37c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
	...

0800c38c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2243      	movs	r2, #67	; 0x43
 800c398:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c39a:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bc80      	pop	{r7}
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	200000c0 	.word	0x200000c0

0800c3ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2243      	movs	r2, #67	; 0x43
 800c3b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c3ba:	4b03      	ldr	r3, [pc, #12]	; (800c3c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bc80      	pop	{r7}
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	2000007c 	.word	0x2000007c

0800c3cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2243      	movs	r2, #67	; 0x43
 800c3d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c3da:	4b03      	ldr	r3, [pc, #12]	; (800c3e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bc80      	pop	{r7}
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	20000104 	.word	0x20000104

0800c3ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	220a      	movs	r2, #10
 800c3f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c3fa:	4b03      	ldr	r3, [pc, #12]	; (800c408 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	bc80      	pop	{r7}
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	20000038 	.word	0x20000038

0800c40c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c416:	2302      	movs	r3, #2
 800c418:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d005      	beq.n	800c42c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c428:	2300      	movs	r3, #0
 800c42a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	bc80      	pop	{r7}
 800c436:	4770      	bx	lr

0800c438 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	4613      	mov	r3, r2
 800c444:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c44c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c456:	88fa      	ldrh	r2, [r7, #6]
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	371c      	adds	r7, #28
 800c464:	46bd      	mov	sp, r7
 800c466:	bc80      	pop	{r7}
 800c468:	4770      	bx	lr

0800c46a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b085      	sub	sp, #20
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c47a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bc80      	pop	{r7}
 800c48e:	4770      	bx	lr

0800c490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c49e:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01c      	beq.n	800c4e4 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d115      	bne.n	800c4e0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	2181      	movs	r1, #129	; 0x81
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f001 fc87 	bl	800ddea <USBD_LL_Transmit>

      return USBD_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	e002      	b.n	800c4e6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e000      	b.n	800c4e6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c4e4:	2302      	movs	r3, #2
  }
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c4fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c504:	2b00      	cmp	r3, #0
 800c506:	d017      	beq.n	800c538 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	7c1b      	ldrb	r3, [r3, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d109      	bne.n	800c524 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51a:	2101      	movs	r1, #1
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 fc87 	bl	800de30 <USBD_LL_PrepareReceive>
 800c522:	e007      	b.n	800c534 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c52a:	2340      	movs	r3, #64	; 0x40
 800c52c:	2101      	movs	r1, #1
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f001 fc7e 	bl	800de30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	e000      	b.n	800c53a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c538:	2302      	movs	r3, #2
  }
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	60f8      	str	r0, [r7, #12]
 800c54a:	60b9      	str	r1, [r7, #8]
 800c54c:	4613      	mov	r3, r2
 800c54e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c556:	2302      	movs	r3, #2
 800c558:	e01a      	b.n	800c590 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	79fa      	ldrb	r2, [r7, #7]
 800c586:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f001 faeb 	bl	800db64 <USBD_LL_Init>

  return USBD_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d006      	beq.n	800c5ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
 800c5b8:	e001      	b.n	800c5be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bc80      	pop	{r7}
 800c5c8:	4770      	bx	lr

0800c5ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 fb20 	bl	800dc18 <USBD_LL_Start>

  return USBD_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bc80      	pop	{r7}
 800c5f4:	4770      	bx	lr

0800c5f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	460b      	mov	r3, r1
 800c600:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c602:	2302      	movs	r3, #2
 800c604:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00c      	beq.n	800c62a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	78fa      	ldrb	r2, [r7, #3]
 800c61a:	4611      	mov	r1, r2
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	4798      	blx	r3
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	78fa      	ldrb	r2, [r7, #3]
 800c64a:	4611      	mov	r1, r2
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	4798      	blx	r3
  return USBD_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b082      	sub	sp, #8
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 fe62 	bl	800d336 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c680:	461a      	mov	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c68e:	f003 031f 	and.w	r3, r3, #31
 800c692:	2b02      	cmp	r3, #2
 800c694:	d016      	beq.n	800c6c4 <USBD_LL_SetupStage+0x6a>
 800c696:	2b02      	cmp	r3, #2
 800c698:	d81c      	bhi.n	800c6d4 <USBD_LL_SetupStage+0x7a>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <USBD_LL_SetupStage+0x4a>
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d008      	beq.n	800c6b4 <USBD_LL_SetupStage+0x5a>
 800c6a2:	e017      	b.n	800c6d4 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f9c5 	bl	800ca3c <USBD_StdDevReq>
    break;
 800c6b2:	e01a      	b.n	800c6ea <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa27 	bl	800cb10 <USBD_StdItfReq>
    break;
 800c6c2:	e012      	b.n	800c6ea <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fa67 	bl	800cba0 <USBD_StdEPReq>
    break;
 800c6d2:	e00a      	b.n	800c6ea <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c6da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f001 faf8 	bl	800dcd8 <USBD_LL_StallEP>
    break;
 800c6e8:	bf00      	nop
  }

  return USBD_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d14b      	bne.n	800c7a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c70e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c716:	2b03      	cmp	r3, #3
 800c718:	d134      	bne.n	800c784 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	68da      	ldr	r2, [r3, #12]
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	429a      	cmp	r2, r3
 800c724:	d919      	bls.n	800c75a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	1ad2      	subs	r2, r2, r3
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	68da      	ldr	r2, [r3, #12]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d203      	bcs.n	800c748 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c744:	b29b      	uxth	r3, r3
 800c746:	e002      	b.n	800c74e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	461a      	mov	r2, r3
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f000 fee1 	bl	800d51a <USBD_CtlContinueRx>
 800c758:	e038      	b.n	800c7cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c760:	691b      	ldr	r3, [r3, #16]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d105      	bne.n	800c77c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c776:	691b      	ldr	r3, [r3, #16]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f000 fede 	bl	800d53e <USBD_CtlSendStatus>
 800c782:	e023      	b.n	800c7cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c78a:	2b05      	cmp	r3, #5
 800c78c:	d11e      	bne.n	800c7cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c796:	2100      	movs	r1, #0
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f001 fa9d 	bl	800dcd8 <USBD_LL_StallEP>
 800c79e:	e015      	b.n	800c7cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00d      	beq.n	800c7c8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d108      	bne.n	800c7c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	7afa      	ldrb	r2, [r7, #11]
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	4798      	blx	r3
 800c7c6:	e001      	b.n	800c7cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	e000      	b.n	800c7ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3718      	adds	r7, #24
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b086      	sub	sp, #24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	60f8      	str	r0, [r7, #12]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c7e4:	7afb      	ldrb	r3, [r7, #11]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d17f      	bne.n	800c8ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	3314      	adds	r3, #20
 800c7ee:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d15c      	bne.n	800c8b4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	429a      	cmp	r2, r3
 800c804:	d915      	bls.n	800c832 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	68da      	ldr	r2, [r3, #12]
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	461a      	mov	r2, r3
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f000 fe4b 	bl	800d4ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c824:	2300      	movs	r3, #0
 800c826:	2200      	movs	r2, #0
 800c828:	2100      	movs	r1, #0
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f001 fb00 	bl	800de30 <USBD_LL_PrepareReceive>
 800c830:	e04e      	b.n	800c8d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	6912      	ldr	r2, [r2, #16]
 800c83a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c83e:	fb01 f202 	mul.w	r2, r1, r2
 800c842:	1a9b      	subs	r3, r3, r2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d11c      	bne.n	800c882 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c850:	429a      	cmp	r2, r3
 800c852:	d316      	bcc.n	800c882 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c85e:	429a      	cmp	r2, r3
 800c860:	d20f      	bcs.n	800c882 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c862:	2200      	movs	r2, #0
 800c864:	2100      	movs	r1, #0
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 fe27 	bl	800d4ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c874:	2300      	movs	r3, #0
 800c876:	2200      	movs	r2, #0
 800c878:	2100      	movs	r1, #0
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f001 fad8 	bl	800de30 <USBD_LL_PrepareReceive>
 800c880:	e026      	b.n	800c8d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c894:	2b03      	cmp	r3, #3
 800c896:	d105      	bne.n	800c8a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c8a4:	2180      	movs	r1, #128	; 0x80
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f001 fa16 	bl	800dcd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f000 fe59 	bl	800d564 <USBD_CtlReceiveStatus>
 800c8b2:	e00d      	b.n	800c8d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d004      	beq.n	800c8c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d103      	bne.n	800c8d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c8c8:	2180      	movs	r1, #128	; 0x80
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f001 fa04 	bl	800dcd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d11d      	bne.n	800c916 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7ff fe81 	bl	800c5e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c8e8:	e015      	b.n	800c916 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8f0:	695b      	ldr	r3, [r3, #20]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00d      	beq.n	800c912 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	d108      	bne.n	800c912 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	7afa      	ldrb	r2, [r7, #11]
 800c90a:	4611      	mov	r1, r2
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	4798      	blx	r3
 800c910:	e001      	b.n	800c916 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c912:	2302      	movs	r3, #2
 800c914:	e000      	b.n	800c918 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3718      	adds	r7, #24
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c928:	2340      	movs	r3, #64	; 0x40
 800c92a:	2200      	movs	r2, #0
 800c92c:	2100      	movs	r1, #0
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f001 f98d 	bl	800dc4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2240      	movs	r2, #64	; 0x40
 800c940:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c944:	2340      	movs	r3, #64	; 0x40
 800c946:	2200      	movs	r2, #0
 800c948:	2180      	movs	r1, #128	; 0x80
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f001 f97f 	bl	800dc4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2240      	movs	r2, #64	; 0x40
 800c95a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c980:	2b00      	cmp	r3, #0
 800c982:	d009      	beq.n	800c998 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6852      	ldr	r2, [r2, #4]
 800c990:	b2d2      	uxtb	r2, r2
 800c992:	4611      	mov	r1, r2
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	4798      	blx	r3
  }

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b083      	sub	sp, #12
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	78fa      	ldrb	r2, [r7, #3]
 800c9b2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bc80      	pop	{r7}
 800c9be:	4770      	bx	lr

0800c9c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2204      	movs	r2, #4
 800c9d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bc80      	pop	{r7}
 800c9e6:	4770      	bx	lr

0800c9e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	370c      	adds	r7, #12
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bc80      	pop	{r7}
 800ca06:	4770      	bx	lr

0800ca08 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d10b      	bne.n	800ca32 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d005      	beq.n	800ca32 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca46:	2300      	movs	r3, #0
 800ca48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca52:	2b40      	cmp	r3, #64	; 0x40
 800ca54:	d005      	beq.n	800ca62 <USBD_StdDevReq+0x26>
 800ca56:	2b40      	cmp	r3, #64	; 0x40
 800ca58:	d84f      	bhi.n	800cafa <USBD_StdDevReq+0xbe>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d009      	beq.n	800ca72 <USBD_StdDevReq+0x36>
 800ca5e:	2b20      	cmp	r3, #32
 800ca60:	d14b      	bne.n	800cafa <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	4798      	blx	r3
    break;
 800ca70:	e048      	b.n	800cb04 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	785b      	ldrb	r3, [r3, #1]
 800ca76:	2b09      	cmp	r3, #9
 800ca78:	d839      	bhi.n	800caee <USBD_StdDevReq+0xb2>
 800ca7a:	a201      	add	r2, pc, #4	; (adr r2, 800ca80 <USBD_StdDevReq+0x44>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800cad1 	.word	0x0800cad1
 800ca84:	0800cae5 	.word	0x0800cae5
 800ca88:	0800caef 	.word	0x0800caef
 800ca8c:	0800cadb 	.word	0x0800cadb
 800ca90:	0800caef 	.word	0x0800caef
 800ca94:	0800cab3 	.word	0x0800cab3
 800ca98:	0800caa9 	.word	0x0800caa9
 800ca9c:	0800caef 	.word	0x0800caef
 800caa0:	0800cac7 	.word	0x0800cac7
 800caa4:	0800cabd 	.word	0x0800cabd
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f9da 	bl	800ce64 <USBD_GetDescriptor>
      break;
 800cab0:	e022      	b.n	800caf8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 facf 	bl	800d058 <USBD_SetAddress>
      break;
 800caba:	e01d      	b.n	800caf8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fb0e 	bl	800d0e0 <USBD_SetConfig>
      break;
 800cac4:	e018      	b.n	800caf8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800cac6:	6839      	ldr	r1, [r7, #0]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fb97 	bl	800d1fc <USBD_GetConfig>
      break;
 800cace:	e013      	b.n	800caf8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fbc7 	bl	800d266 <USBD_GetStatus>
      break;
 800cad8:	e00e      	b.n	800caf8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fbf5 	bl	800d2cc <USBD_SetFeature>
      break;
 800cae2:	e009      	b.n	800caf8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fc04 	bl	800d2f4 <USBD_ClrFeature>
      break;
 800caec:	e004      	b.n	800caf8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800caee:	6839      	ldr	r1, [r7, #0]
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fc5c 	bl	800d3ae <USBD_CtlError>
      break;
 800caf6:	bf00      	nop
    }
    break;
 800caf8:	e004      	b.n	800cb04 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fc56 	bl	800d3ae <USBD_CtlError>
    break;
 800cb02:	bf00      	nop
  }

  return ret;
 800cb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop

0800cb10 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb26:	2b40      	cmp	r3, #64	; 0x40
 800cb28:	d005      	beq.n	800cb36 <USBD_StdItfReq+0x26>
 800cb2a:	2b40      	cmp	r3, #64	; 0x40
 800cb2c:	d82e      	bhi.n	800cb8c <USBD_StdItfReq+0x7c>
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <USBD_StdItfReq+0x26>
 800cb32:	2b20      	cmp	r3, #32
 800cb34:	d12a      	bne.n	800cb8c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d81d      	bhi.n	800cb7e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	889b      	ldrh	r3, [r3, #4]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d813      	bhi.n	800cb74 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	88db      	ldrh	r3, [r3, #6]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d110      	bne.n	800cb88 <USBD_StdItfReq+0x78>
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10d      	bne.n	800cb88 <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fce6 	bl	800d53e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cb72:	e009      	b.n	800cb88 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800cb74:	6839      	ldr	r1, [r7, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fc19 	bl	800d3ae <USBD_CtlError>
      break;
 800cb7c:	e004      	b.n	800cb88 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fc14 	bl	800d3ae <USBD_CtlError>
      break;
 800cb86:	e000      	b.n	800cb8a <USBD_StdItfReq+0x7a>
      break;
 800cb88:	bf00      	nop
    }
    break;
 800cb8a:	e004      	b.n	800cb96 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fc0d 	bl	800d3ae <USBD_CtlError>
    break;
 800cb94:	bf00      	nop
  }

  return USBD_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	889b      	ldrh	r3, [r3, #4]
 800cbb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbbc:	2b40      	cmp	r3, #64	; 0x40
 800cbbe:	d007      	beq.n	800cbd0 <USBD_StdEPReq+0x30>
 800cbc0:	2b40      	cmp	r3, #64	; 0x40
 800cbc2:	f200 8144 	bhi.w	800ce4e <USBD_StdEPReq+0x2ae>
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <USBD_StdEPReq+0x40>
 800cbca:	2b20      	cmp	r3, #32
 800cbcc:	f040 813f 	bne.w	800ce4e <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	4798      	blx	r3
    break;
 800cbde:	e13b      	b.n	800ce58 <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbe8:	2b20      	cmp	r3, #32
 800cbea:	d10a      	bne.n	800cc02 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	4798      	blx	r3
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]

      return ret;
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
 800cc00:	e12b      	b.n	800ce5a <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	785b      	ldrb	r3, [r3, #1]
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d007      	beq.n	800cc1a <USBD_StdEPReq+0x7a>
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	f300 8119 	bgt.w	800ce42 <USBD_StdEPReq+0x2a2>
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d072      	beq.n	800ccfa <USBD_StdEPReq+0x15a>
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d03a      	beq.n	800cc8e <USBD_StdEPReq+0xee>
 800cc18:	e113      	b.n	800ce42 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d002      	beq.n	800cc2a <USBD_StdEPReq+0x8a>
 800cc24:	2b03      	cmp	r3, #3
 800cc26:	d015      	beq.n	800cc54 <USBD_StdEPReq+0xb4>
 800cc28:	e02b      	b.n	800cc82 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00c      	beq.n	800cc4a <USBD_StdEPReq+0xaa>
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	2b80      	cmp	r3, #128	; 0x80
 800cc34:	d009      	beq.n	800cc4a <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f001 f84c 	bl	800dcd8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc40:	2180      	movs	r1, #128	; 0x80
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f001 f848 	bl	800dcd8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cc48:	e020      	b.n	800cc8c <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fbae 	bl	800d3ae <USBD_CtlError>
        break;
 800cc52:	e01b      	b.n	800cc8c <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	885b      	ldrh	r3, [r3, #2]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10e      	bne.n	800cc7a <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00b      	beq.n	800cc7a <USBD_StdEPReq+0xda>
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b80      	cmp	r3, #128	; 0x80
 800cc66:	d008      	beq.n	800cc7a <USBD_StdEPReq+0xda>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	88db      	ldrh	r3, [r3, #6]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d104      	bne.n	800cc7a <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800cc70:	7bbb      	ldrb	r3, [r7, #14]
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f001 f82f 	bl	800dcd8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fc5f 	bl	800d53e <USBD_CtlSendStatus>

        break;
 800cc80:	e004      	b.n	800cc8c <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fb92 	bl	800d3ae <USBD_CtlError>
        break;
 800cc8a:	bf00      	nop
      }
      break;
 800cc8c:	e0de      	b.n	800ce4c <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d002      	beq.n	800cc9e <USBD_StdEPReq+0xfe>
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	d015      	beq.n	800ccc8 <USBD_StdEPReq+0x128>
 800cc9c:	e026      	b.n	800ccec <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00c      	beq.n	800ccbe <USBD_StdEPReq+0x11e>
 800cca4:	7bbb      	ldrb	r3, [r7, #14]
 800cca6:	2b80      	cmp	r3, #128	; 0x80
 800cca8:	d009      	beq.n	800ccbe <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f001 f812 	bl	800dcd8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ccb4:	2180      	movs	r1, #128	; 0x80
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f001 f80e 	bl	800dcd8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ccbc:	e01c      	b.n	800ccf8 <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fb74 	bl	800d3ae <USBD_CtlError>
        break;
 800ccc6:	e017      	b.n	800ccf8 <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	885b      	ldrh	r3, [r3, #2]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d112      	bne.n	800ccf6 <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
 800ccd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d004      	beq.n	800cce4 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	4619      	mov	r1, r3
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 f819 	bl	800dd16 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fc2a 	bl	800d53e <USBD_CtlSendStatus>
        }
        break;
 800ccea:	e004      	b.n	800ccf6 <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fb5d 	bl	800d3ae <USBD_CtlError>
        break;
 800ccf4:	e000      	b.n	800ccf8 <USBD_StdEPReq+0x158>
        break;
 800ccf6:	bf00      	nop
      }
      break;
 800ccf8:	e0a8      	b.n	800ce4c <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d002      	beq.n	800cd0a <USBD_StdEPReq+0x16a>
 800cd04:	2b03      	cmp	r3, #3
 800cd06:	d031      	beq.n	800cd6c <USBD_StdEPReq+0x1cc>
 800cd08:	e095      	b.n	800ce36 <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d007      	beq.n	800cd20 <USBD_StdEPReq+0x180>
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	2b80      	cmp	r3, #128	; 0x80
 800cd14:	d004      	beq.n	800cd20 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fb48 	bl	800d3ae <USBD_CtlError>
          break;
 800cd1e:	e08f      	b.n	800ce40 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	da0b      	bge.n	800cd40 <USBD_StdEPReq+0x1a0>
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	3310      	adds	r3, #16
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	e00a      	b.n	800cd56 <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cd40:	7bbb      	ldrb	r3, [r7, #14]
 800cd42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd46:	4613      	mov	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	4413      	add	r3, r2
 800cd56:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2202      	movs	r2, #2
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 fb8c 	bl	800d482 <USBD_CtlSendData>
          break;
 800cd6a:	e069      	b.n	800ce40 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800cd6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	da11      	bge.n	800cd98 <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd74:	7bbb      	ldrb	r3, [r7, #14]
 800cd76:	f003 020f 	and.w	r2, r3, #15
 800cd7a:	6879      	ldr	r1, [r7, #4]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4413      	add	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	440b      	add	r3, r1
 800cd86:	3318      	adds	r3, #24
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d117      	bne.n	800cdbe <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fb0c 	bl	800d3ae <USBD_CtlError>
            break;
 800cd96:	e053      	b.n	800ce40 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd98:	7bbb      	ldrb	r3, [r7, #14]
 800cd9a:	f003 020f 	and.w	r2, r3, #15
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	440b      	add	r3, r1
 800cdaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d104      	bne.n	800cdbe <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 faf9 	bl	800d3ae <USBD_CtlError>
            break;
 800cdbc:	e040      	b.n	800ce40 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cdbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	da0b      	bge.n	800cdde <USBD_StdEPReq+0x23e>
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdcc:	4613      	mov	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4413      	add	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	4413      	add	r3, r2
 800cdda:	3304      	adds	r3, #4
 800cddc:	e00a      	b.n	800cdf4 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <USBD_StdEPReq+0x262>
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	2b80      	cmp	r3, #128	; 0x80
 800ce00:	d103      	bne.n	800ce0a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2200      	movs	r2, #0
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	e00e      	b.n	800ce28 <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 ffa0 	bl	800dd54 <USBD_LL_IsStallEP>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d003      	beq.n	800ce22 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	601a      	str	r2, [r3, #0]
 800ce20:	e002      	b.n	800ce28 <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	2200      	movs	r2, #0
 800ce26:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fb27 	bl	800d482 <USBD_CtlSendData>
          break;
 800ce34:	e004      	b.n	800ce40 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fab8 	bl	800d3ae <USBD_CtlError>
        break;
 800ce3e:	bf00      	nop
      }
      break;
 800ce40:	e004      	b.n	800ce4c <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fab2 	bl	800d3ae <USBD_CtlError>
      break;
 800ce4a:	bf00      	nop
    }
    break;
 800ce4c:	e004      	b.n	800ce58 <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 faac 	bl	800d3ae <USBD_CtlError>
    break;
 800ce56:	bf00      	nop
  }

  return ret;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	885b      	ldrh	r3, [r3, #2]
 800ce72:	0a1b      	lsrs	r3, r3, #8
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	3b01      	subs	r3, #1
 800ce78:	2b06      	cmp	r3, #6
 800ce7a:	f200 80c9 	bhi.w	800d010 <USBD_GetDescriptor+0x1ac>
 800ce7e:	a201      	add	r2, pc, #4	; (adr r2, 800ce84 <USBD_GetDescriptor+0x20>)
 800ce80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce84:	0800cea1 	.word	0x0800cea1
 800ce88:	0800ceb9 	.word	0x0800ceb9
 800ce8c:	0800cef9 	.word	0x0800cef9
 800ce90:	0800d011 	.word	0x0800d011
 800ce94:	0800d011 	.word	0x0800d011
 800ce98:	0800cfbd 	.word	0x0800cfbd
 800ce9c:	0800cfe3 	.word	0x0800cfe3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	7c12      	ldrb	r2, [r2, #16]
 800ceac:	f107 010a 	add.w	r1, r7, #10
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	60f8      	str	r0, [r7, #12]
    break;
 800ceb6:	e0b0      	b.n	800d01a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	7c1b      	ldrb	r3, [r3, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10d      	bne.n	800cedc <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec8:	f107 020a 	add.w	r2, r7, #10
 800cecc:	4610      	mov	r0, r2
 800cece:	4798      	blx	r3
 800ced0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3301      	adds	r3, #1
 800ced6:	2202      	movs	r2, #2
 800ced8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ceda:	e09e      	b.n	800d01a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	f107 020a 	add.w	r2, r7, #10
 800cee8:	4610      	mov	r0, r2
 800ceea:	4798      	blx	r3
 800ceec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3301      	adds	r3, #1
 800cef2:	2202      	movs	r2, #2
 800cef4:	701a      	strb	r2, [r3, #0]
    break;
 800cef6:	e090      	b.n	800d01a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	885b      	ldrh	r3, [r3, #2]
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b05      	cmp	r3, #5
 800cf00:	d856      	bhi.n	800cfb0 <USBD_GetDescriptor+0x14c>
 800cf02:	a201      	add	r2, pc, #4	; (adr r2, 800cf08 <USBD_GetDescriptor+0xa4>)
 800cf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf08:	0800cf21 	.word	0x0800cf21
 800cf0c:	0800cf39 	.word	0x0800cf39
 800cf10:	0800cf51 	.word	0x0800cf51
 800cf14:	0800cf69 	.word	0x0800cf69
 800cf18:	0800cf81 	.word	0x0800cf81
 800cf1c:	0800cf99 	.word	0x0800cf99
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7c12      	ldrb	r2, [r2, #16]
 800cf2c:	f107 010a 	add.w	r1, r7, #10
 800cf30:	4610      	mov	r0, r2
 800cf32:	4798      	blx	r3
 800cf34:	60f8      	str	r0, [r7, #12]
      break;
 800cf36:	e040      	b.n	800cfba <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	7c12      	ldrb	r2, [r2, #16]
 800cf44:	f107 010a 	add.w	r1, r7, #10
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4798      	blx	r3
 800cf4c:	60f8      	str	r0, [r7, #12]
      break;
 800cf4e:	e034      	b.n	800cfba <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	7c12      	ldrb	r2, [r2, #16]
 800cf5c:	f107 010a 	add.w	r1, r7, #10
 800cf60:	4610      	mov	r0, r2
 800cf62:	4798      	blx	r3
 800cf64:	60f8      	str	r0, [r7, #12]
      break;
 800cf66:	e028      	b.n	800cfba <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	7c12      	ldrb	r2, [r2, #16]
 800cf74:	f107 010a 	add.w	r1, r7, #10
 800cf78:	4610      	mov	r0, r2
 800cf7a:	4798      	blx	r3
 800cf7c:	60f8      	str	r0, [r7, #12]
      break;
 800cf7e:	e01c      	b.n	800cfba <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	7c12      	ldrb	r2, [r2, #16]
 800cf8c:	f107 010a 	add.w	r1, r7, #10
 800cf90:	4610      	mov	r0, r2
 800cf92:	4798      	blx	r3
 800cf94:	60f8      	str	r0, [r7, #12]
      break;
 800cf96:	e010      	b.n	800cfba <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 010a 	add.w	r1, r7, #10
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
      break;
 800cfae:	e004      	b.n	800cfba <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f9fb 	bl	800d3ae <USBD_CtlError>
      return;
 800cfb8:	e04b      	b.n	800d052 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800cfba:	e02e      	b.n	800d01a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7c1b      	ldrb	r3, [r3, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d109      	bne.n	800cfd8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfcc:	f107 020a 	add.w	r2, r7, #10
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
 800cfd4:	60f8      	str	r0, [r7, #12]
      break;
 800cfd6:	e020      	b.n	800d01a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f9e7 	bl	800d3ae <USBD_CtlError>
      return;
 800cfe0:	e037      	b.n	800d052 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	7c1b      	ldrb	r3, [r3, #16]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10d      	bne.n	800d006 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	f107 020a 	add.w	r2, r7, #10
 800cff6:	4610      	mov	r0, r2
 800cff8:	4798      	blx	r3
 800cffa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	3301      	adds	r3, #1
 800d000:	2207      	movs	r2, #7
 800d002:	701a      	strb	r2, [r3, #0]
      break;
 800d004:	e009      	b.n	800d01a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f9d0 	bl	800d3ae <USBD_CtlError>
      return;
 800d00e:	e020      	b.n	800d052 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f9cb 	bl	800d3ae <USBD_CtlError>
    return;
 800d018:	e01b      	b.n	800d052 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d01a:	897b      	ldrh	r3, [r7, #10]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d011      	beq.n	800d044 <USBD_GetDescriptor+0x1e0>
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	88db      	ldrh	r3, [r3, #6]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00d      	beq.n	800d044 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	88da      	ldrh	r2, [r3, #6]
 800d02c:	897b      	ldrh	r3, [r7, #10]
 800d02e:	4293      	cmp	r3, r2
 800d030:	bf28      	it	cs
 800d032:	4613      	movcs	r3, r2
 800d034:	b29b      	uxth	r3, r3
 800d036:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d038:	897b      	ldrh	r3, [r7, #10]
 800d03a:	461a      	mov	r2, r3
 800d03c:	68f9      	ldr	r1, [r7, #12]
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fa1f 	bl	800d482 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	88db      	ldrh	r3, [r3, #6]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d102      	bne.n	800d052 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fa76 	bl	800d53e <USBD_CtlSendStatus>
  }
}
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	889b      	ldrh	r3, [r3, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d130      	bne.n	800d0cc <USBD_SetAddress+0x74>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	88db      	ldrh	r3, [r3, #6]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d12c      	bne.n	800d0cc <USBD_SetAddress+0x74>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	885b      	ldrh	r3, [r3, #2]
 800d076:	2b7f      	cmp	r3, #127	; 0x7f
 800d078:	d828      	bhi.n	800d0cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	885b      	ldrh	r3, [r3, #2]
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d104      	bne.n	800d09a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f98b 	bl	800d3ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d098:	e01d      	b.n	800d0d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	7bfa      	ldrb	r2, [r7, #15]
 800d09e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fe80 	bl	800ddac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fa46 	bl	800d53e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c0:	e009      	b.n	800d0d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ca:	e004      	b.n	800d0d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f96d 	bl	800d3ae <USBD_CtlError>
  }
}
 800d0d4:	bf00      	nop
 800d0d6:	bf00      	nop
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
	...

0800d0e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	885b      	ldrh	r3, [r3, #2]
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	4b41      	ldr	r3, [pc, #260]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d0f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0f4:	4b40      	ldr	r3, [pc, #256]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d904      	bls.n	800d106 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f955 	bl	800d3ae <USBD_CtlError>
 800d104:	e075      	b.n	800d1f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	d002      	beq.n	800d116 <USBD_SetConfig+0x36>
 800d110:	2b03      	cmp	r3, #3
 800d112:	d023      	beq.n	800d15c <USBD_SetConfig+0x7c>
 800d114:	e062      	b.n	800d1dc <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d116:	4b38      	ldr	r3, [pc, #224]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d01a      	beq.n	800d154 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d11e:	4b36      	ldr	r3, [pc, #216]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2203      	movs	r2, #3
 800d12c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d130:	4b31      	ldr	r3, [pc, #196]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fa5d 	bl	800c5f6 <USBD_SetClassConfig>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d104      	bne.n	800d14c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f932 	bl	800d3ae <USBD_CtlError>
          return;
 800d14a:	e052      	b.n	800d1f2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f9f6 	bl	800d53e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d152:	e04e      	b.n	800d1f2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f9f2 	bl	800d53e <USBD_CtlSendStatus>
      break;
 800d15a:	e04a      	b.n	800d1f2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d15c:	4b26      	ldr	r3, [pc, #152]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d112      	bne.n	800d18a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d16c:	4b22      	ldr	r3, [pc, #136]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	461a      	mov	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d176:	4b20      	ldr	r3, [pc, #128]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fa59 	bl	800c634 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f9db 	bl	800d53e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d188:	e033      	b.n	800d1f2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d18a:	4b1b      	ldr	r3, [pc, #108]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	429a      	cmp	r2, r3
 800d196:	d01d      	beq.n	800d1d4 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff fa47 	bl	800c634 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d1b0:	4b11      	ldr	r3, [pc, #68]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff fa1d 	bl	800c5f6 <USBD_SetClassConfig>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d104      	bne.n	800d1cc <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f8f2 	bl	800d3ae <USBD_CtlError>
          return;
 800d1ca:	e012      	b.n	800d1f2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f9b6 	bl	800d53e <USBD_CtlSendStatus>
      break;
 800d1d2:	e00e      	b.n	800d1f2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f9b2 	bl	800d53e <USBD_CtlSendStatus>
      break;
 800d1da:	e00a      	b.n	800d1f2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 f8e5 	bl	800d3ae <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d1e4:	4b04      	ldr	r3, [pc, #16]	; (800d1f8 <USBD_SetConfig+0x118>)
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7ff fa22 	bl	800c634 <USBD_ClrClassConfig>
      break;
 800d1f0:	bf00      	nop
    }
  }
}
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	20000740 	.word	0x20000740

0800d1fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	88db      	ldrh	r3, [r3, #6]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d004      	beq.n	800d218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f8cc 	bl	800d3ae <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d216:	e022      	b.n	800d25e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d21e:	2b02      	cmp	r3, #2
 800d220:	dc02      	bgt.n	800d228 <USBD_GetConfig+0x2c>
 800d222:	2b00      	cmp	r3, #0
 800d224:	dc03      	bgt.n	800d22e <USBD_GetConfig+0x32>
 800d226:	e015      	b.n	800d254 <USBD_GetConfig+0x58>
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d00b      	beq.n	800d244 <USBD_GetConfig+0x48>
 800d22c:	e012      	b.n	800d254 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3308      	adds	r3, #8
 800d238:	2201      	movs	r2, #1
 800d23a:	4619      	mov	r1, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f920 	bl	800d482 <USBD_CtlSendData>
      break;
 800d242:	e00c      	b.n	800d25e <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	3304      	adds	r3, #4
 800d248:	2201      	movs	r2, #1
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f918 	bl	800d482 <USBD_CtlSendData>
      break;
 800d252:	e004      	b.n	800d25e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800d254:	6839      	ldr	r1, [r7, #0]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f8a9 	bl	800d3ae <USBD_CtlError>
      break;
 800d25c:	bf00      	nop
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b082      	sub	sp, #8
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d276:	3b01      	subs	r3, #1
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d81e      	bhi.n	800d2ba <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	88db      	ldrh	r3, [r3, #6]
 800d280:	2b02      	cmp	r3, #2
 800d282:	d004      	beq.n	800d28e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f891 	bl	800d3ae <USBD_CtlError>
      break;
 800d28c:	e01a      	b.n	800d2c4 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d005      	beq.n	800d2aa <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	f043 0202 	orr.w	r2, r3, #2
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	330c      	adds	r3, #12
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f8e5 	bl	800d482 <USBD_CtlSendData>
    break;
 800d2b8:	e004      	b.n	800d2c4 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f876 	bl	800d3ae <USBD_CtlError>
    break;
 800d2c2:	bf00      	nop
  }
}
 800d2c4:	bf00      	nop
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	885b      	ldrh	r3, [r3, #2]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d106      	bne.n	800d2ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 f929 	bl	800d53e <USBD_CtlSendStatus>
  }

}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d304:	3b01      	subs	r3, #1
 800d306:	2b02      	cmp	r3, #2
 800d308:	d80b      	bhi.n	800d322 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	885b      	ldrh	r3, [r3, #2]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d10c      	bne.n	800d32c <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f90f 	bl	800d53e <USBD_CtlSendStatus>
    }
    break;
 800d320:	e004      	b.n	800d32c <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 f842 	bl	800d3ae <USBD_CtlError>
    break;
 800d32a:	e000      	b.n	800d32e <USBD_ClrFeature+0x3a>
    break;
 800d32c:	bf00      	nop
  }
}
 800d32e:	bf00      	nop
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d336:	b480      	push	{r7}
 800d338:	b083      	sub	sp, #12
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	781a      	ldrb	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	785a      	ldrb	r2, [r3, #1]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	3302      	adds	r3, #2
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	b29a      	uxth	r2, r3
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	3303      	adds	r3, #3
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	b29b      	uxth	r3, r3
 800d360:	021b      	lsls	r3, r3, #8
 800d362:	b29b      	uxth	r3, r3
 800d364:	4413      	add	r3, r2
 800d366:	b29a      	uxth	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	3304      	adds	r3, #4
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	b29a      	uxth	r2, r3
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	3305      	adds	r3, #5
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	021b      	lsls	r3, r3, #8
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4413      	add	r3, r2
 800d382:	b29a      	uxth	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	3306      	adds	r3, #6
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	b29a      	uxth	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	3307      	adds	r3, #7
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b29b      	uxth	r3, r3
 800d398:	021b      	lsls	r3, r3, #8
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	4413      	add	r3, r2
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	80da      	strh	r2, [r3, #6]

}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bc80      	pop	{r7}
 800d3ac:	4770      	bx	lr

0800d3ae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d3b8:	2180      	movs	r1, #128	; 0x80
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 fc8c 	bl	800dcd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fc88 	bl	800dcd8 <USBD_LL_StallEP>
}
 800d3c8:	bf00      	nop
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d032      	beq.n	800d44c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f000 f834 	bl	800d454 <USBD_GetLen>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	1c5a      	adds	r2, r3, #1
 800d3fe:	75fa      	strb	r2, [r7, #23]
 800d400:	461a      	mov	r2, r3
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	4413      	add	r3, r2
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	7812      	ldrb	r2, [r2, #0]
 800d40a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
 800d40e:	1c5a      	adds	r2, r3, #1
 800d410:	75fa      	strb	r2, [r7, #23]
 800d412:	461a      	mov	r2, r3
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4413      	add	r3, r2
 800d418:	2203      	movs	r2, #3
 800d41a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d41c:	e012      	b.n	800d444 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	60fa      	str	r2, [r7, #12]
 800d424:	7dfa      	ldrb	r2, [r7, #23]
 800d426:	1c51      	adds	r1, r2, #1
 800d428:	75f9      	strb	r1, [r7, #23]
 800d42a:	4611      	mov	r1, r2
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	440a      	add	r2, r1
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d434:	7dfb      	ldrb	r3, [r7, #23]
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	75fa      	strb	r2, [r7, #23]
 800d43a:	461a      	mov	r2, r3
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	4413      	add	r3, r2
 800d440:	2200      	movs	r2, #0
 800d442:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e8      	bne.n	800d41e <USBD_GetString+0x4e>
    }
  }
}
 800d44c:	bf00      	nop
 800d44e:	3718      	adds	r7, #24
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d460:	e005      	b.n	800d46e <USBD_GetLen+0x1a>
    {
        len++;
 800d462:	7bfb      	ldrb	r3, [r7, #15]
 800d464:	3301      	adds	r3, #1
 800d466:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3301      	adds	r3, #1
 800d46c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1f5      	bne.n	800d462 <USBD_GetLen+0xe>
    }

    return len;
 800d476:	7bfb      	ldrb	r3, [r7, #15]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3714      	adds	r7, #20
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bc80      	pop	{r7}
 800d480:	4770      	bx	lr

0800d482 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	60b9      	str	r1, [r7, #8]
 800d48c:	4613      	mov	r3, r2
 800d48e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2202      	movs	r2, #2
 800d494:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d498:	88fa      	ldrh	r2, [r7, #6]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d49e:	88fa      	ldrh	r2, [r7, #6]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d4a4:	88fb      	ldrh	r3, [r7, #6]
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f000 fc9d 	bl	800ddea <USBD_LL_Transmit>

  return USBD_OK;
 800d4b0:	2300      	movs	r3, #0
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b084      	sub	sp, #16
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	60f8      	str	r0, [r7, #12]
 800d4c2:	60b9      	str	r1, [r7, #8]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d4c8:	88fb      	ldrh	r3, [r7, #6]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f000 fc8b 	bl	800ddea <USBD_LL_Transmit>

  return USBD_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2203      	movs	r2, #3
 800d4f0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d4f4:	88fa      	ldrh	r2, [r7, #6]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d4fc:	88fa      	ldrh	r2, [r7, #6]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d504:	88fb      	ldrh	r3, [r7, #6]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	2100      	movs	r1, #0
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 fc90 	bl	800de30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b084      	sub	sp, #16
 800d51e:	af00      	add	r7, sp, #0
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	60b9      	str	r1, [r7, #8]
 800d524:	4613      	mov	r3, r2
 800d526:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d528:	88fb      	ldrh	r3, [r7, #6]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	2100      	movs	r1, #0
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 fc7e 	bl	800de30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b082      	sub	sp, #8
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2204      	movs	r2, #4
 800d54a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d54e:	2300      	movs	r3, #0
 800d550:	2200      	movs	r2, #0
 800d552:	2100      	movs	r1, #0
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fc48 	bl	800ddea <USBD_LL_Transmit>

  return USBD_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2205      	movs	r2, #5
 800d570:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d574:	2300      	movs	r3, #0
 800d576:	2200      	movs	r2, #0
 800d578:	2100      	movs	r1, #0
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fc58 	bl	800de30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3708      	adds	r7, #8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d590:	2200      	movs	r2, #0
 800d592:	4912      	ldr	r1, [pc, #72]	; (800d5dc <MX_USB_DEVICE_Init+0x50>)
 800d594:	4812      	ldr	r0, [pc, #72]	; (800d5e0 <MX_USB_DEVICE_Init+0x54>)
 800d596:	f7fe ffd4 	bl	800c542 <USBD_Init>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d001      	beq.n	800d5a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d5a0:	f7f6 f9c6 	bl	8003930 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d5a4:	490f      	ldr	r1, [pc, #60]	; (800d5e4 <MX_USB_DEVICE_Init+0x58>)
 800d5a6:	480e      	ldr	r0, [pc, #56]	; (800d5e0 <MX_USB_DEVICE_Init+0x54>)
 800d5a8:	f7fe fff6 	bl	800c598 <USBD_RegisterClass>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d5b2:	f7f6 f9bd 	bl	8003930 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d5b6:	490c      	ldr	r1, [pc, #48]	; (800d5e8 <MX_USB_DEVICE_Init+0x5c>)
 800d5b8:	4809      	ldr	r0, [pc, #36]	; (800d5e0 <MX_USB_DEVICE_Init+0x54>)
 800d5ba:	f7fe ff27 	bl	800c40c <USBD_CDC_RegisterInterface>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d5c4:	f7f6 f9b4 	bl	8003930 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d5c8:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <MX_USB_DEVICE_Init+0x54>)
 800d5ca:	f7fe fffe 	bl	800c5ca <USBD_Start>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d5d4:	f7f6 f9ac 	bl	8003930 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d5d8:	bf00      	nop
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	20000158 	.word	0x20000158
 800d5e0:	20000744 	.word	0x20000744
 800d5e4:	20000044 	.word	0x20000044
 800d5e8:	20000148 	.word	0x20000148

0800d5ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	4905      	ldr	r1, [pc, #20]	; (800d608 <CDC_Init_FS+0x1c>)
 800d5f4:	4805      	ldr	r0, [pc, #20]	; (800d60c <CDC_Init_FS+0x20>)
 800d5f6:	f7fe ff1f 	bl	800c438 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d5fa:	4905      	ldr	r1, [pc, #20]	; (800d610 <CDC_Init_FS+0x24>)
 800d5fc:	4803      	ldr	r0, [pc, #12]	; (800d60c <CDC_Init_FS+0x20>)
 800d5fe:	f7fe ff34 	bl	800c46a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d602:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d604:	4618      	mov	r0, r3
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20000dc8 	.word	0x20000dc8
 800d60c:	20000744 	.word	0x20000744
 800d610:	200009e0 	.word	0x200009e0

0800d614 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d614:	b480      	push	{r7}
 800d616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d618:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bc80      	pop	{r7}
 800d620:	4770      	bx	lr
	...

0800d624 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	6039      	str	r1, [r7, #0]
 800d62e:	71fb      	strb	r3, [r7, #7]
 800d630:	4613      	mov	r3, r2
 800d632:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	2b23      	cmp	r3, #35	; 0x23
 800d638:	d84a      	bhi.n	800d6d0 <CDC_Control_FS+0xac>
 800d63a:	a201      	add	r2, pc, #4	; (adr r2, 800d640 <CDC_Control_FS+0x1c>)
 800d63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d640:	0800d6d1 	.word	0x0800d6d1
 800d644:	0800d6d1 	.word	0x0800d6d1
 800d648:	0800d6d1 	.word	0x0800d6d1
 800d64c:	0800d6d1 	.word	0x0800d6d1
 800d650:	0800d6d1 	.word	0x0800d6d1
 800d654:	0800d6d1 	.word	0x0800d6d1
 800d658:	0800d6d1 	.word	0x0800d6d1
 800d65c:	0800d6d1 	.word	0x0800d6d1
 800d660:	0800d6d1 	.word	0x0800d6d1
 800d664:	0800d6d1 	.word	0x0800d6d1
 800d668:	0800d6d1 	.word	0x0800d6d1
 800d66c:	0800d6d1 	.word	0x0800d6d1
 800d670:	0800d6d1 	.word	0x0800d6d1
 800d674:	0800d6d1 	.word	0x0800d6d1
 800d678:	0800d6d1 	.word	0x0800d6d1
 800d67c:	0800d6d1 	.word	0x0800d6d1
 800d680:	0800d6d1 	.word	0x0800d6d1
 800d684:	0800d6d1 	.word	0x0800d6d1
 800d688:	0800d6d1 	.word	0x0800d6d1
 800d68c:	0800d6d1 	.word	0x0800d6d1
 800d690:	0800d6d1 	.word	0x0800d6d1
 800d694:	0800d6d1 	.word	0x0800d6d1
 800d698:	0800d6d1 	.word	0x0800d6d1
 800d69c:	0800d6d1 	.word	0x0800d6d1
 800d6a0:	0800d6d1 	.word	0x0800d6d1
 800d6a4:	0800d6d1 	.word	0x0800d6d1
 800d6a8:	0800d6d1 	.word	0x0800d6d1
 800d6ac:	0800d6d1 	.word	0x0800d6d1
 800d6b0:	0800d6d1 	.word	0x0800d6d1
 800d6b4:	0800d6d1 	.word	0x0800d6d1
 800d6b8:	0800d6d1 	.word	0x0800d6d1
 800d6bc:	0800d6d1 	.word	0x0800d6d1
 800d6c0:	0800d6d1 	.word	0x0800d6d1
 800d6c4:	0800d6d1 	.word	0x0800d6d1
 800d6c8:	0800d6d1 	.word	0x0800d6d1
 800d6cc:	0800d6d1 	.word	0x0800d6d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d6d0:	bf00      	nop
  }

  return (USBD_OK);
 800d6d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bc80      	pop	{r7}
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d6ea:	6879      	ldr	r1, [r7, #4]
 800d6ec:	4810      	ldr	r0, [pc, #64]	; (800d730 <CDC_Receive_FS+0x50>)
 800d6ee:	f7fe febc 	bl	800c46a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d6f2:	480f      	ldr	r0, [pc, #60]	; (800d730 <CDC_Receive_FS+0x50>)
 800d6f4:	f7fe fefb 	bl	800c4ee <USBD_CDC_ReceivePacket>

	memset (usbbuffer, '\0', 128);  // clear the buffer
 800d6f8:	2280      	movs	r2, #128	; 0x80
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	480d      	ldr	r0, [pc, #52]	; (800d734 <CDC_Receive_FS+0x54>)
 800d6fe:	f000 fc47 	bl	800df90 <memset>
	uint8_t len = (uint8_t)*Len;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	73fb      	strb	r3, [r7, #15]
	memcpy(usbbuffer, Buf, len);  // copy the data to the buffer
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	461a      	mov	r2, r3
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	4809      	ldr	r0, [pc, #36]	; (800d734 <CDC_Receive_FS+0x54>)
 800d710:	f000 fc30 	bl	800df74 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	461a      	mov	r2, r3
 800d718:	2100      	movs	r1, #0
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fc38 	bl	800df90 <memset>

	HAL_EXTI_GenerateSWI(&hexti1);
 800d720:	4805      	ldr	r0, [pc, #20]	; (800d738 <CDC_Receive_FS+0x58>)
 800d722:	f7f7 febd 	bl	80054a0 <HAL_EXTI_GenerateSWI>

	return (USBD_OK);
 800d726:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3710      	adds	r7, #16
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20000744 	.word	0x20000744
 800d734:	200005a4 	.word	0x200005a4
 800d738:	2000059c 	.word	0x2000059c

0800d73c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	460b      	mov	r3, r1
 800d746:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d74c:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <CDC_Transmit_FS+0x48>)
 800d74e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d752:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d75e:	2301      	movs	r3, #1
 800d760:	e00b      	b.n	800d77a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d762:	887b      	ldrh	r3, [r7, #2]
 800d764:	461a      	mov	r2, r3
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	4806      	ldr	r0, [pc, #24]	; (800d784 <CDC_Transmit_FS+0x48>)
 800d76a:	f7fe fe65 	bl	800c438 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d76e:	4805      	ldr	r0, [pc, #20]	; (800d784 <CDC_Transmit_FS+0x48>)
 800d770:	f7fe fe8e 	bl	800c490 <USBD_CDC_TransmitPacket>
 800d774:	4603      	mov	r3, r0
 800d776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d778:	7bfb      	ldrb	r3, [r7, #15]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20000744 	.word	0x20000744

0800d788 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	6039      	str	r1, [r7, #0]
 800d792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2212      	movs	r2, #18
 800d798:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d79a:	4b03      	ldr	r3, [pc, #12]	; (800d7a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bc80      	pop	{r7}
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	20000174 	.word	0x20000174

0800d7ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	6039      	str	r1, [r7, #0]
 800d7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2204      	movs	r2, #4
 800d7bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d7be:	4b03      	ldr	r3, [pc, #12]	; (800d7cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bc80      	pop	{r7}
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20000188 	.word	0x20000188

0800d7d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	6039      	str	r1, [r7, #0]
 800d7da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d7dc:	79fb      	ldrb	r3, [r7, #7]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	4907      	ldr	r1, [pc, #28]	; (800d804 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7e6:	4808      	ldr	r0, [pc, #32]	; (800d808 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7e8:	f7ff fdf2 	bl	800d3d0 <USBD_GetString>
 800d7ec:	e004      	b.n	800d7f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	4904      	ldr	r1, [pc, #16]	; (800d804 <USBD_FS_ProductStrDescriptor+0x34>)
 800d7f2:	4805      	ldr	r0, [pc, #20]	; (800d808 <USBD_FS_ProductStrDescriptor+0x38>)
 800d7f4:	f7ff fdec 	bl	800d3d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d7f8:	4b02      	ldr	r3, [pc, #8]	; (800d804 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	200011b0 	.word	0x200011b0
 800d808:	08010e1c 	.word	0x08010e1c

0800d80c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	6039      	str	r1, [r7, #0]
 800d816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	4904      	ldr	r1, [pc, #16]	; (800d82c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d81c:	4804      	ldr	r0, [pc, #16]	; (800d830 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d81e:	f7ff fdd7 	bl	800d3d0 <USBD_GetString>
  return USBD_StrDesc;
 800d822:	4b02      	ldr	r3, [pc, #8]	; (800d82c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	200011b0 	.word	0x200011b0
 800d830:	08010e34 	.word	0x08010e34

0800d834 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	221a      	movs	r2, #26
 800d844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d846:	f000 f843 	bl	800d8d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d84a:	4b02      	ldr	r3, [pc, #8]	; (800d854 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	2000018c 	.word	0x2000018c

0800d858 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d864:	79fb      	ldrb	r3, [r7, #7]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d105      	bne.n	800d876 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d86a:	683a      	ldr	r2, [r7, #0]
 800d86c:	4907      	ldr	r1, [pc, #28]	; (800d88c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d86e:	4808      	ldr	r0, [pc, #32]	; (800d890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d870:	f7ff fdae 	bl	800d3d0 <USBD_GetString>
 800d874:	e004      	b.n	800d880 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	4904      	ldr	r1, [pc, #16]	; (800d88c <USBD_FS_ConfigStrDescriptor+0x34>)
 800d87a:	4805      	ldr	r0, [pc, #20]	; (800d890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d87c:	f7ff fda8 	bl	800d3d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d880:	4b02      	ldr	r3, [pc, #8]	; (800d88c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	200011b0 	.word	0x200011b0
 800d890:	08010e48 	.word	0x08010e48

0800d894 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	6039      	str	r1, [r7, #0]
 800d89e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d105      	bne.n	800d8b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	4907      	ldr	r1, [pc, #28]	; (800d8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8aa:	4808      	ldr	r0, [pc, #32]	; (800d8cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8ac:	f7ff fd90 	bl	800d3d0 <USBD_GetString>
 800d8b0:	e004      	b.n	800d8bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	4904      	ldr	r1, [pc, #16]	; (800d8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d8b6:	4805      	ldr	r0, [pc, #20]	; (800d8cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d8b8:	f7ff fd8a 	bl	800d3d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8bc:	4b02      	ldr	r3, [pc, #8]	; (800d8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	200011b0 	.word	0x200011b0
 800d8cc:	08010e54 	.word	0x08010e54

0800d8d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d8d6:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <Get_SerialNum+0x44>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <Get_SerialNum+0x48>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d8e2:	4b0e      	ldr	r3, [pc, #56]	; (800d91c <Get_SerialNum+0x4c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d009      	beq.n	800d90a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d8f6:	2208      	movs	r2, #8
 800d8f8:	4909      	ldr	r1, [pc, #36]	; (800d920 <Get_SerialNum+0x50>)
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f000 f814 	bl	800d928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d900:	2204      	movs	r2, #4
 800d902:	4908      	ldr	r1, [pc, #32]	; (800d924 <Get_SerialNum+0x54>)
 800d904:	68b8      	ldr	r0, [r7, #8]
 800d906:	f000 f80f 	bl	800d928 <IntToUnicode>
  }
}
 800d90a:	bf00      	nop
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	1ff80050 	.word	0x1ff80050
 800d918:	1ff80054 	.word	0x1ff80054
 800d91c:	1ff80058 	.word	0x1ff80058
 800d920:	2000018e 	.word	0x2000018e
 800d924:	2000019e 	.word	0x2000019e

0800d928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d928:	b480      	push	{r7}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	4613      	mov	r3, r2
 800d934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d93a:	2300      	movs	r3, #0
 800d93c:	75fb      	strb	r3, [r7, #23]
 800d93e:	e027      	b.n	800d990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	0f1b      	lsrs	r3, r3, #28
 800d944:	2b09      	cmp	r3, #9
 800d946:	d80b      	bhi.n	800d960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	0f1b      	lsrs	r3, r3, #28
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	4619      	mov	r1, r3
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	440b      	add	r3, r1
 800d958:	3230      	adds	r2, #48	; 0x30
 800d95a:	b2d2      	uxtb	r2, r2
 800d95c:	701a      	strb	r2, [r3, #0]
 800d95e:	e00a      	b.n	800d976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	0f1b      	lsrs	r3, r3, #28
 800d964:	b2da      	uxtb	r2, r3
 800d966:	7dfb      	ldrb	r3, [r7, #23]
 800d968:	005b      	lsls	r3, r3, #1
 800d96a:	4619      	mov	r1, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	440b      	add	r3, r1
 800d970:	3237      	adds	r2, #55	; 0x37
 800d972:	b2d2      	uxtb	r2, r2
 800d974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	011b      	lsls	r3, r3, #4
 800d97a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	3301      	adds	r3, #1
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	4413      	add	r3, r2
 800d986:	2200      	movs	r2, #0
 800d988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
 800d98c:	3301      	adds	r3, #1
 800d98e:	75fb      	strb	r3, [r7, #23]
 800d990:	7dfa      	ldrb	r2, [r7, #23]
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	429a      	cmp	r2, r3
 800d996:	d3d3      	bcc.n	800d940 <IntToUnicode+0x18>
  }
}
 800d998:	bf00      	nop
 800d99a:	bf00      	nop
 800d99c:	371c      	adds	r7, #28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bc80      	pop	{r7}
 800d9a2:	4770      	bx	lr

0800d9a4 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d106      	bne.n	800d9c4 <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 800d9b6:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	4a08      	ldr	r2, [pc, #32]	; (800d9dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 800d9c2:	e005      	b.n	800d9d0 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 800d9c4:	4b05      	ldr	r3, [pc, #20]	; (800d9dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	4a04      	ldr	r2, [pc, #16]	; (800d9dc <HAL_PCDEx_SetConnectionState+0x38>)
 800d9ca:	f023 0301 	bic.w	r3, r3, #1
 800d9ce:	6053      	str	r3, [r2, #4]
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bc80      	pop	{r7}
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	40010000 	.word	0x40010000

0800d9e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a0d      	ldr	r2, [pc, #52]	; (800da24 <HAL_PCD_MspInit+0x44>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d113      	bne.n	800da1a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	; (800da28 <HAL_PCD_MspInit+0x48>)
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f6:	4a0c      	ldr	r2, [pc, #48]	; (800da28 <HAL_PCD_MspInit+0x48>)
 800d9f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9fc:	6253      	str	r3, [r2, #36]	; 0x24
 800d9fe:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <HAL_PCD_MspInit+0x48>)
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800da0a:	2200      	movs	r2, #0
 800da0c:	2100      	movs	r1, #0
 800da0e:	2014      	movs	r0, #20
 800da10:	f7f7 f98f 	bl	8004d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800da14:	2014      	movs	r0, #20
 800da16:	f7f7 f9a8 	bl	8004d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800da1a:	bf00      	nop
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	40005c00 	.word	0x40005c00
 800da28:	40023800 	.word	0x40023800

0800da2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f7fe fe09 	bl	800c65a <USBD_LL_SetupStage>
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	460b      	mov	r3, r1
 800da5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	6879      	ldr	r1, [r7, #4]
 800da66:	4613      	mov	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	00db      	lsls	r3, r3, #3
 800da6e:	440b      	add	r3, r1
 800da70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	78fb      	ldrb	r3, [r7, #3]
 800da78:	4619      	mov	r1, r3
 800da7a:	f7fe fe3b 	bl	800c6f4 <USBD_LL_DataOutStage>
}
 800da7e:	bf00      	nop
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b082      	sub	sp, #8
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
 800da8e:	460b      	mov	r3, r1
 800da90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800da98:	78fa      	ldrb	r2, [r7, #3]
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	00db      	lsls	r3, r3, #3
 800daa4:	440b      	add	r3, r1
 800daa6:	333c      	adds	r3, #60	; 0x3c
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	78fb      	ldrb	r3, [r7, #3]
 800daac:	4619      	mov	r1, r3
 800daae:	f7fe fe92 	bl	800c7d6 <USBD_LL_DataInStage>
}
 800dab2:	bf00      	nop
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b082      	sub	sp, #8
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fe ff9d 	bl	800ca08 <USBD_LL_SOF>
}
 800dace:	bf00      	nop
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dade:	2301      	movs	r3, #1
 800dae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d001      	beq.n	800daee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800daea:	f7f5 ff21 	bl	8003930 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800daf4:	7bfa      	ldrb	r2, [r7, #15]
 800daf6:	4611      	mov	r1, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe ff52 	bl	800c9a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800db04:	4618      	mov	r0, r3
 800db06:	f7fe ff0b 	bl	800c920 <USBD_LL_Reset>
}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
	...

0800db14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800db22:	4618      	mov	r0, r3
 800db24:	f7fe ff4c 	bl	800c9c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	699b      	ldr	r3, [r3, #24]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d005      	beq.n	800db3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db30:	4b04      	ldr	r3, [pc, #16]	; (800db44 <HAL_PCD_SuspendCallback+0x30>)
 800db32:	691b      	ldr	r3, [r3, #16]
 800db34:	4a03      	ldr	r2, [pc, #12]	; (800db44 <HAL_PCD_SuspendCallback+0x30>)
 800db36:	f043 0306 	orr.w	r3, r3, #6
 800db3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	e000ed00 	.word	0xe000ed00

0800db48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800db56:	4618      	mov	r0, r3
 800db58:	f7fe ff46 	bl	800c9e8 <USBD_LL_Resume>
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800db6c:	4a28      	ldr	r2, [pc, #160]	; (800dc10 <USBD_LL_Init+0xac>)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4a26      	ldr	r2, [pc, #152]	; (800dc10 <USBD_LL_Init+0xac>)
 800db78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 800db7c:	4b24      	ldr	r3, [pc, #144]	; (800dc10 <USBD_LL_Init+0xac>)
 800db7e:	4a25      	ldr	r2, [pc, #148]	; (800dc14 <USBD_LL_Init+0xb0>)
 800db80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800db82:	4b23      	ldr	r3, [pc, #140]	; (800dc10 <USBD_LL_Init+0xac>)
 800db84:	2208      	movs	r2, #8
 800db86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800db88:	4b21      	ldr	r3, [pc, #132]	; (800dc10 <USBD_LL_Init+0xac>)
 800db8a:	2202      	movs	r2, #2
 800db8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800db8e:	4b20      	ldr	r3, [pc, #128]	; (800dc10 <USBD_LL_Init+0xac>)
 800db90:	2202      	movs	r2, #2
 800db92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800db94:	4b1e      	ldr	r3, [pc, #120]	; (800dc10 <USBD_LL_Init+0xac>)
 800db96:	2200      	movs	r2, #0
 800db98:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800db9a:	4b1d      	ldr	r3, [pc, #116]	; (800dc10 <USBD_LL_Init+0xac>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dba0:	481b      	ldr	r0, [pc, #108]	; (800dc10 <USBD_LL_Init+0xac>)
 800dba2:	f7f8 fb9d 	bl	80062e0 <HAL_PCD_Init>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800dbac:	f7f5 fec0 	bl	8003930 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dbb6:	2318      	movs	r3, #24
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2100      	movs	r1, #0
 800dbbc:	f7f9 ff7a 	bl	8007ab4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dbc6:	2358      	movs	r3, #88	; 0x58
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2180      	movs	r1, #128	; 0x80
 800dbcc:	f7f9 ff72 	bl	8007ab4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dbd6:	23c0      	movs	r3, #192	; 0xc0
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2181      	movs	r1, #129	; 0x81
 800dbdc:	f7f9 ff6a 	bl	8007ab4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dbe6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dbea:	2200      	movs	r2, #0
 800dbec:	2101      	movs	r1, #1
 800dbee:	f7f9 ff61 	bl	8007ab4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dbf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2182      	movs	r1, #130	; 0x82
 800dc00:	f7f9 ff58 	bl	8007ab4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	200013b0 	.word	0x200013b0
 800dc14:	40005c00 	.word	0x40005c00

0800dc18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7f8 fc34 	bl	800649c <HAL_PCD_Start>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 f944 	bl	800dec8 <USBD_Get_USB_Status>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
 800dc56:	4608      	mov	r0, r1
 800dc58:	4611      	mov	r1, r2
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	70fb      	strb	r3, [r7, #3]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70bb      	strb	r3, [r7, #2]
 800dc64:	4613      	mov	r3, r2
 800dc66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800dc76:	78bb      	ldrb	r3, [r7, #2]
 800dc78:	883a      	ldrh	r2, [r7, #0]
 800dc7a:	78f9      	ldrb	r1, [r7, #3]
 800dc7c:	f7f8 fd50 	bl	8006720 <HAL_PCD_EP_Open>
 800dc80:	4603      	mov	r3, r0
 800dc82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f000 f91e 	bl	800dec8 <USBD_Get_USB_Status>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc90:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	460b      	mov	r3, r1
 800dca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dcb4:	78fa      	ldrb	r2, [r7, #3]
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f8 fd97 	bl	80067ec <HAL_PCD_EP_Close>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 f8ff 	bl	800dec8 <USBD_Get_USB_Status>
 800dcca:	4603      	mov	r3, r0
 800dccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcce:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dcf2:	78fa      	ldrb	r2, [r7, #3]
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7f8 fe57 	bl	80069aa <HAL_PCD_EP_SetStall>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd00:	7bfb      	ldrb	r3, [r7, #15]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 f8e0 	bl	800dec8 <USBD_Get_USB_Status>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}

0800dd16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd16:	b580      	push	{r7, lr}
 800dd18:	b084      	sub	sp, #16
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	460b      	mov	r3, r1
 800dd20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dd30:	78fa      	ldrb	r2, [r7, #3]
 800dd32:	4611      	mov	r1, r2
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f8 fe8a 	bl	8006a4e <HAL_PCD_EP_ClrStall>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f000 f8c1 	bl	800dec8 <USBD_Get_USB_Status>
 800dd46:	4603      	mov	r3, r0
 800dd48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b085      	sub	sp, #20
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800dd66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	da0c      	bge.n	800dd8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd76:	68f9      	ldr	r1, [r7, #12]
 800dd78:	1c5a      	adds	r2, r3, #1
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	440b      	add	r3, r1
 800dd84:	3302      	adds	r3, #2
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	e00b      	b.n	800dda2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd8a:	78fb      	ldrb	r3, [r7, #3]
 800dd8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd90:	68f9      	ldr	r1, [r7, #12]
 800dd92:	4613      	mov	r3, r2
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	440b      	add	r3, r1
 800dd9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dda0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bc80      	pop	{r7}
 800ddaa:	4770      	bx	lr

0800ddac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ddc6:	78fa      	ldrb	r2, [r7, #3]
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7f8 fc83 	bl	80066d6 <HAL_PCD_SetAddress>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f000 f876 	bl	800dec8 <USBD_Get_USB_Status>
 800dddc:	4603      	mov	r3, r0
 800ddde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dde0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	607a      	str	r2, [r7, #4]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	72fb      	strb	r3, [r7, #11]
 800ddfa:	4613      	mov	r3, r2
 800ddfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800de0c:	893b      	ldrh	r3, [r7, #8]
 800de0e:	7af9      	ldrb	r1, [r7, #11]
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	f7f8 fd87 	bl	8006924 <HAL_PCD_EP_Transmit>
 800de16:	4603      	mov	r3, r0
 800de18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 f853 	bl	800dec8 <USBD_Get_USB_Status>
 800de22:	4603      	mov	r3, r0
 800de24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de26:	7dbb      	ldrb	r3, [r7, #22]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	607a      	str	r2, [r7, #4]
 800de3a:	461a      	mov	r2, r3
 800de3c:	460b      	mov	r3, r1
 800de3e:	72fb      	strb	r3, [r7, #11]
 800de40:	4613      	mov	r3, r2
 800de42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800de52:	893b      	ldrh	r3, [r7, #8]
 800de54:	7af9      	ldrb	r1, [r7, #11]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	f7f8 fd10 	bl	800687c <HAL_PCD_EP_Receive>
 800de5c:	4603      	mov	r3, r0
 800de5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de60:	7dfb      	ldrb	r3, [r7, #23]
 800de62:	4618      	mov	r0, r3
 800de64:	f000 f830 	bl	800dec8 <USBD_Get_USB_Status>
 800de68:	4603      	mov	r3, r0
 800de6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800de6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3718      	adds	r7, #24
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	460b      	mov	r3, r1
 800de80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800de88:	78fa      	ldrb	r2, [r7, #3]
 800de8a:	4611      	mov	r1, r2
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7f8 fd32 	bl	80068f6 <HAL_PCD_EP_GetRxCount>
 800de92:	4603      	mov	r3, r0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <USBD_static_malloc+0x14>)
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	bc80      	pop	{r7}
 800deae:	4770      	bx	lr
 800deb0:	2000169c 	.word	0x2000169c

0800deb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]

}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bc80      	pop	{r7}
 800dec4:	4770      	bx	lr
	...

0800dec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d817      	bhi.n	800df0c <USBD_Get_USB_Status+0x44>
 800dedc:	a201      	add	r2, pc, #4	; (adr r2, 800dee4 <USBD_Get_USB_Status+0x1c>)
 800dede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee2:	bf00      	nop
 800dee4:	0800def5 	.word	0x0800def5
 800dee8:	0800defb 	.word	0x0800defb
 800deec:	0800df01 	.word	0x0800df01
 800def0:	0800df07 	.word	0x0800df07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]
    break;
 800def8:	e00b      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800defa:	2302      	movs	r3, #2
 800defc:	73fb      	strb	r3, [r7, #15]
    break;
 800defe:	e008      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df00:	2301      	movs	r3, #1
 800df02:	73fb      	strb	r3, [r7, #15]
    break;
 800df04:	e005      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df06:	2302      	movs	r3, #2
 800df08:	73fb      	strb	r3, [r7, #15]
    break;
 800df0a:	e002      	b.n	800df12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800df0c:	2302      	movs	r3, #2
 800df0e:	73fb      	strb	r3, [r7, #15]
    break;
 800df10:	bf00      	nop
  }
  return usb_status;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	bc80      	pop	{r7}
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop

0800df20 <__errno>:
 800df20:	4b01      	ldr	r3, [pc, #4]	; (800df28 <__errno+0x8>)
 800df22:	6818      	ldr	r0, [r3, #0]
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	200001a8 	.word	0x200001a8

0800df2c <__libc_init_array>:
 800df2c:	b570      	push	{r4, r5, r6, lr}
 800df2e:	2600      	movs	r6, #0
 800df30:	4d0c      	ldr	r5, [pc, #48]	; (800df64 <__libc_init_array+0x38>)
 800df32:	4c0d      	ldr	r4, [pc, #52]	; (800df68 <__libc_init_array+0x3c>)
 800df34:	1b64      	subs	r4, r4, r5
 800df36:	10a4      	asrs	r4, r4, #2
 800df38:	42a6      	cmp	r6, r4
 800df3a:	d109      	bne.n	800df50 <__libc_init_array+0x24>
 800df3c:	f002 ff1e 	bl	8010d7c <_init>
 800df40:	2600      	movs	r6, #0
 800df42:	4d0a      	ldr	r5, [pc, #40]	; (800df6c <__libc_init_array+0x40>)
 800df44:	4c0a      	ldr	r4, [pc, #40]	; (800df70 <__libc_init_array+0x44>)
 800df46:	1b64      	subs	r4, r4, r5
 800df48:	10a4      	asrs	r4, r4, #2
 800df4a:	42a6      	cmp	r6, r4
 800df4c:	d105      	bne.n	800df5a <__libc_init_array+0x2e>
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	f855 3b04 	ldr.w	r3, [r5], #4
 800df54:	4798      	blx	r3
 800df56:	3601      	adds	r6, #1
 800df58:	e7ee      	b.n	800df38 <__libc_init_array+0xc>
 800df5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800df5e:	4798      	blx	r3
 800df60:	3601      	adds	r6, #1
 800df62:	e7f2      	b.n	800df4a <__libc_init_array+0x1e>
 800df64:	080112ac 	.word	0x080112ac
 800df68:	080112ac 	.word	0x080112ac
 800df6c:	080112ac 	.word	0x080112ac
 800df70:	080112b0 	.word	0x080112b0

0800df74 <memcpy>:
 800df74:	440a      	add	r2, r1
 800df76:	4291      	cmp	r1, r2
 800df78:	f100 33ff 	add.w	r3, r0, #4294967295
 800df7c:	d100      	bne.n	800df80 <memcpy+0xc>
 800df7e:	4770      	bx	lr
 800df80:	b510      	push	{r4, lr}
 800df82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df86:	4291      	cmp	r1, r2
 800df88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df8c:	d1f9      	bne.n	800df82 <memcpy+0xe>
 800df8e:	bd10      	pop	{r4, pc}

0800df90 <memset>:
 800df90:	4603      	mov	r3, r0
 800df92:	4402      	add	r2, r0
 800df94:	4293      	cmp	r3, r2
 800df96:	d100      	bne.n	800df9a <memset+0xa>
 800df98:	4770      	bx	lr
 800df9a:	f803 1b01 	strb.w	r1, [r3], #1
 800df9e:	e7f9      	b.n	800df94 <memset+0x4>

0800dfa0 <__cvt>:
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa6:	461f      	mov	r7, r3
 800dfa8:	bfbb      	ittet	lt
 800dfaa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800dfae:	461f      	movlt	r7, r3
 800dfb0:	2300      	movge	r3, #0
 800dfb2:	232d      	movlt	r3, #45	; 0x2d
 800dfb4:	b088      	sub	sp, #32
 800dfb6:	4614      	mov	r4, r2
 800dfb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dfbc:	7013      	strb	r3, [r2, #0]
 800dfbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfc0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800dfc4:	f023 0820 	bic.w	r8, r3, #32
 800dfc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dfcc:	d005      	beq.n	800dfda <__cvt+0x3a>
 800dfce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dfd2:	d100      	bne.n	800dfd6 <__cvt+0x36>
 800dfd4:	3501      	adds	r5, #1
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e000      	b.n	800dfdc <__cvt+0x3c>
 800dfda:	2303      	movs	r3, #3
 800dfdc:	aa07      	add	r2, sp, #28
 800dfde:	9204      	str	r2, [sp, #16]
 800dfe0:	aa06      	add	r2, sp, #24
 800dfe2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800dfe6:	e9cd 3500 	strd	r3, r5, [sp]
 800dfea:	4622      	mov	r2, r4
 800dfec:	463b      	mov	r3, r7
 800dfee:	f000 fd07 	bl	800ea00 <_dtoa_r>
 800dff2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dff6:	4606      	mov	r6, r0
 800dff8:	d102      	bne.n	800e000 <__cvt+0x60>
 800dffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dffc:	07db      	lsls	r3, r3, #31
 800dffe:	d522      	bpl.n	800e046 <__cvt+0xa6>
 800e000:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e004:	eb06 0905 	add.w	r9, r6, r5
 800e008:	d110      	bne.n	800e02c <__cvt+0x8c>
 800e00a:	7833      	ldrb	r3, [r6, #0]
 800e00c:	2b30      	cmp	r3, #48	; 0x30
 800e00e:	d10a      	bne.n	800e026 <__cvt+0x86>
 800e010:	2200      	movs	r2, #0
 800e012:	2300      	movs	r3, #0
 800e014:	4620      	mov	r0, r4
 800e016:	4639      	mov	r1, r7
 800e018:	f7f2 fce8 	bl	80009ec <__aeabi_dcmpeq>
 800e01c:	b918      	cbnz	r0, 800e026 <__cvt+0x86>
 800e01e:	f1c5 0501 	rsb	r5, r5, #1
 800e022:	f8ca 5000 	str.w	r5, [sl]
 800e026:	f8da 3000 	ldr.w	r3, [sl]
 800e02a:	4499      	add	r9, r3
 800e02c:	2200      	movs	r2, #0
 800e02e:	2300      	movs	r3, #0
 800e030:	4620      	mov	r0, r4
 800e032:	4639      	mov	r1, r7
 800e034:	f7f2 fcda 	bl	80009ec <__aeabi_dcmpeq>
 800e038:	b108      	cbz	r0, 800e03e <__cvt+0x9e>
 800e03a:	f8cd 901c 	str.w	r9, [sp, #28]
 800e03e:	2230      	movs	r2, #48	; 0x30
 800e040:	9b07      	ldr	r3, [sp, #28]
 800e042:	454b      	cmp	r3, r9
 800e044:	d307      	bcc.n	800e056 <__cvt+0xb6>
 800e046:	4630      	mov	r0, r6
 800e048:	9b07      	ldr	r3, [sp, #28]
 800e04a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e04c:	1b9b      	subs	r3, r3, r6
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	b008      	add	sp, #32
 800e052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e056:	1c59      	adds	r1, r3, #1
 800e058:	9107      	str	r1, [sp, #28]
 800e05a:	701a      	strb	r2, [r3, #0]
 800e05c:	e7f0      	b.n	800e040 <__cvt+0xa0>

0800e05e <__exponent>:
 800e05e:	4603      	mov	r3, r0
 800e060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e062:	2900      	cmp	r1, #0
 800e064:	f803 2b02 	strb.w	r2, [r3], #2
 800e068:	bfb6      	itet	lt
 800e06a:	222d      	movlt	r2, #45	; 0x2d
 800e06c:	222b      	movge	r2, #43	; 0x2b
 800e06e:	4249      	neglt	r1, r1
 800e070:	2909      	cmp	r1, #9
 800e072:	7042      	strb	r2, [r0, #1]
 800e074:	dd2b      	ble.n	800e0ce <__exponent+0x70>
 800e076:	f10d 0407 	add.w	r4, sp, #7
 800e07a:	46a4      	mov	ip, r4
 800e07c:	270a      	movs	r7, #10
 800e07e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e082:	460a      	mov	r2, r1
 800e084:	46a6      	mov	lr, r4
 800e086:	fb07 1516 	mls	r5, r7, r6, r1
 800e08a:	2a63      	cmp	r2, #99	; 0x63
 800e08c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e090:	4631      	mov	r1, r6
 800e092:	f104 34ff 	add.w	r4, r4, #4294967295
 800e096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e09a:	dcf0      	bgt.n	800e07e <__exponent+0x20>
 800e09c:	3130      	adds	r1, #48	; 0x30
 800e09e:	f1ae 0502 	sub.w	r5, lr, #2
 800e0a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e0a6:	4629      	mov	r1, r5
 800e0a8:	1c44      	adds	r4, r0, #1
 800e0aa:	4561      	cmp	r1, ip
 800e0ac:	d30a      	bcc.n	800e0c4 <__exponent+0x66>
 800e0ae:	f10d 0209 	add.w	r2, sp, #9
 800e0b2:	eba2 020e 	sub.w	r2, r2, lr
 800e0b6:	4565      	cmp	r5, ip
 800e0b8:	bf88      	it	hi
 800e0ba:	2200      	movhi	r2, #0
 800e0bc:	4413      	add	r3, r2
 800e0be:	1a18      	subs	r0, r3, r0
 800e0c0:	b003      	add	sp, #12
 800e0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e0cc:	e7ed      	b.n	800e0aa <__exponent+0x4c>
 800e0ce:	2330      	movs	r3, #48	; 0x30
 800e0d0:	3130      	adds	r1, #48	; 0x30
 800e0d2:	7083      	strb	r3, [r0, #2]
 800e0d4:	70c1      	strb	r1, [r0, #3]
 800e0d6:	1d03      	adds	r3, r0, #4
 800e0d8:	e7f1      	b.n	800e0be <__exponent+0x60>
	...

0800e0dc <_printf_float>:
 800e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e0:	b091      	sub	sp, #68	; 0x44
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e0e8:	4616      	mov	r6, r2
 800e0ea:	461f      	mov	r7, r3
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	f001 fa75 	bl	800f5dc <_localeconv_r>
 800e0f2:	6803      	ldr	r3, [r0, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0f8:	f7f2 f84c 	bl	8000194 <strlen>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	930e      	str	r3, [sp, #56]	; 0x38
 800e100:	f8d8 3000 	ldr.w	r3, [r8]
 800e104:	900a      	str	r0, [sp, #40]	; 0x28
 800e106:	3307      	adds	r3, #7
 800e108:	f023 0307 	bic.w	r3, r3, #7
 800e10c:	f103 0208 	add.w	r2, r3, #8
 800e110:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e114:	f8d4 b000 	ldr.w	fp, [r4]
 800e118:	f8c8 2000 	str.w	r2, [r8]
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e124:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e128:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e12c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e12e:	f04f 32ff 	mov.w	r2, #4294967295
 800e132:	4640      	mov	r0, r8
 800e134:	4b9c      	ldr	r3, [pc, #624]	; (800e3a8 <_printf_float+0x2cc>)
 800e136:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e138:	f7f2 fc8a 	bl	8000a50 <__aeabi_dcmpun>
 800e13c:	bb70      	cbnz	r0, 800e19c <_printf_float+0xc0>
 800e13e:	f04f 32ff 	mov.w	r2, #4294967295
 800e142:	4640      	mov	r0, r8
 800e144:	4b98      	ldr	r3, [pc, #608]	; (800e3a8 <_printf_float+0x2cc>)
 800e146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e148:	f7f2 fc64 	bl	8000a14 <__aeabi_dcmple>
 800e14c:	bb30      	cbnz	r0, 800e19c <_printf_float+0xc0>
 800e14e:	2200      	movs	r2, #0
 800e150:	2300      	movs	r3, #0
 800e152:	4640      	mov	r0, r8
 800e154:	4651      	mov	r1, sl
 800e156:	f7f2 fc53 	bl	8000a00 <__aeabi_dcmplt>
 800e15a:	b110      	cbz	r0, 800e162 <_printf_float+0x86>
 800e15c:	232d      	movs	r3, #45	; 0x2d
 800e15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e162:	4b92      	ldr	r3, [pc, #584]	; (800e3ac <_printf_float+0x2d0>)
 800e164:	4892      	ldr	r0, [pc, #584]	; (800e3b0 <_printf_float+0x2d4>)
 800e166:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e16a:	bf94      	ite	ls
 800e16c:	4698      	movls	r8, r3
 800e16e:	4680      	movhi	r8, r0
 800e170:	2303      	movs	r3, #3
 800e172:	f04f 0a00 	mov.w	sl, #0
 800e176:	6123      	str	r3, [r4, #16]
 800e178:	f02b 0304 	bic.w	r3, fp, #4
 800e17c:	6023      	str	r3, [r4, #0]
 800e17e:	4633      	mov	r3, r6
 800e180:	4621      	mov	r1, r4
 800e182:	4628      	mov	r0, r5
 800e184:	9700      	str	r7, [sp, #0]
 800e186:	aa0f      	add	r2, sp, #60	; 0x3c
 800e188:	f000 f9d4 	bl	800e534 <_printf_common>
 800e18c:	3001      	adds	r0, #1
 800e18e:	f040 8090 	bne.w	800e2b2 <_printf_float+0x1d6>
 800e192:	f04f 30ff 	mov.w	r0, #4294967295
 800e196:	b011      	add	sp, #68	; 0x44
 800e198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19c:	4642      	mov	r2, r8
 800e19e:	4653      	mov	r3, sl
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	4651      	mov	r1, sl
 800e1a4:	f7f2 fc54 	bl	8000a50 <__aeabi_dcmpun>
 800e1a8:	b148      	cbz	r0, 800e1be <_printf_float+0xe2>
 800e1aa:	f1ba 0f00 	cmp.w	sl, #0
 800e1ae:	bfb8      	it	lt
 800e1b0:	232d      	movlt	r3, #45	; 0x2d
 800e1b2:	4880      	ldr	r0, [pc, #512]	; (800e3b4 <_printf_float+0x2d8>)
 800e1b4:	bfb8      	it	lt
 800e1b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e1ba:	4b7f      	ldr	r3, [pc, #508]	; (800e3b8 <_printf_float+0x2dc>)
 800e1bc:	e7d3      	b.n	800e166 <_printf_float+0x8a>
 800e1be:	6863      	ldr	r3, [r4, #4]
 800e1c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	d142      	bne.n	800e24e <_printf_float+0x172>
 800e1c8:	2306      	movs	r3, #6
 800e1ca:	6063      	str	r3, [r4, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	9206      	str	r2, [sp, #24]
 800e1d0:	aa0e      	add	r2, sp, #56	; 0x38
 800e1d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e1d6:	aa0d      	add	r2, sp, #52	; 0x34
 800e1d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e1dc:	9203      	str	r2, [sp, #12]
 800e1de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e1e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e1e6:	6023      	str	r3, [r4, #0]
 800e1e8:	6863      	ldr	r3, [r4, #4]
 800e1ea:	4642      	mov	r2, r8
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	4653      	mov	r3, sl
 800e1f2:	910b      	str	r1, [sp, #44]	; 0x2c
 800e1f4:	f7ff fed4 	bl	800dfa0 <__cvt>
 800e1f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	2947      	cmp	r1, #71	; 0x47
 800e1fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e200:	d108      	bne.n	800e214 <_printf_float+0x138>
 800e202:	1cc8      	adds	r0, r1, #3
 800e204:	db02      	blt.n	800e20c <_printf_float+0x130>
 800e206:	6863      	ldr	r3, [r4, #4]
 800e208:	4299      	cmp	r1, r3
 800e20a:	dd40      	ble.n	800e28e <_printf_float+0x1b2>
 800e20c:	f1a9 0902 	sub.w	r9, r9, #2
 800e210:	fa5f f989 	uxtb.w	r9, r9
 800e214:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e218:	d81f      	bhi.n	800e25a <_printf_float+0x17e>
 800e21a:	464a      	mov	r2, r9
 800e21c:	3901      	subs	r1, #1
 800e21e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e222:	910d      	str	r1, [sp, #52]	; 0x34
 800e224:	f7ff ff1b 	bl	800e05e <__exponent>
 800e228:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e22a:	4682      	mov	sl, r0
 800e22c:	1813      	adds	r3, r2, r0
 800e22e:	2a01      	cmp	r2, #1
 800e230:	6123      	str	r3, [r4, #16]
 800e232:	dc02      	bgt.n	800e23a <_printf_float+0x15e>
 800e234:	6822      	ldr	r2, [r4, #0]
 800e236:	07d2      	lsls	r2, r2, #31
 800e238:	d501      	bpl.n	800e23e <_printf_float+0x162>
 800e23a:	3301      	adds	r3, #1
 800e23c:	6123      	str	r3, [r4, #16]
 800e23e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e242:	2b00      	cmp	r3, #0
 800e244:	d09b      	beq.n	800e17e <_printf_float+0xa2>
 800e246:	232d      	movs	r3, #45	; 0x2d
 800e248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e24c:	e797      	b.n	800e17e <_printf_float+0xa2>
 800e24e:	2947      	cmp	r1, #71	; 0x47
 800e250:	d1bc      	bne.n	800e1cc <_printf_float+0xf0>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1ba      	bne.n	800e1cc <_printf_float+0xf0>
 800e256:	2301      	movs	r3, #1
 800e258:	e7b7      	b.n	800e1ca <_printf_float+0xee>
 800e25a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e25e:	d118      	bne.n	800e292 <_printf_float+0x1b6>
 800e260:	2900      	cmp	r1, #0
 800e262:	6863      	ldr	r3, [r4, #4]
 800e264:	dd0b      	ble.n	800e27e <_printf_float+0x1a2>
 800e266:	6121      	str	r1, [r4, #16]
 800e268:	b913      	cbnz	r3, 800e270 <_printf_float+0x194>
 800e26a:	6822      	ldr	r2, [r4, #0]
 800e26c:	07d0      	lsls	r0, r2, #31
 800e26e:	d502      	bpl.n	800e276 <_printf_float+0x19a>
 800e270:	3301      	adds	r3, #1
 800e272:	440b      	add	r3, r1
 800e274:	6123      	str	r3, [r4, #16]
 800e276:	f04f 0a00 	mov.w	sl, #0
 800e27a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e27c:	e7df      	b.n	800e23e <_printf_float+0x162>
 800e27e:	b913      	cbnz	r3, 800e286 <_printf_float+0x1aa>
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	07d2      	lsls	r2, r2, #31
 800e284:	d501      	bpl.n	800e28a <_printf_float+0x1ae>
 800e286:	3302      	adds	r3, #2
 800e288:	e7f4      	b.n	800e274 <_printf_float+0x198>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e7f2      	b.n	800e274 <_printf_float+0x198>
 800e28e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e294:	4299      	cmp	r1, r3
 800e296:	db05      	blt.n	800e2a4 <_printf_float+0x1c8>
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	6121      	str	r1, [r4, #16]
 800e29c:	07d8      	lsls	r0, r3, #31
 800e29e:	d5ea      	bpl.n	800e276 <_printf_float+0x19a>
 800e2a0:	1c4b      	adds	r3, r1, #1
 800e2a2:	e7e7      	b.n	800e274 <_printf_float+0x198>
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	bfcc      	ite	gt
 800e2a8:	2201      	movgt	r2, #1
 800e2aa:	f1c1 0202 	rsble	r2, r1, #2
 800e2ae:	4413      	add	r3, r2
 800e2b0:	e7e0      	b.n	800e274 <_printf_float+0x198>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	055a      	lsls	r2, r3, #21
 800e2b6:	d407      	bmi.n	800e2c8 <_printf_float+0x1ec>
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	4642      	mov	r2, r8
 800e2bc:	4631      	mov	r1, r6
 800e2be:	4628      	mov	r0, r5
 800e2c0:	47b8      	blx	r7
 800e2c2:	3001      	adds	r0, #1
 800e2c4:	d12b      	bne.n	800e31e <_printf_float+0x242>
 800e2c6:	e764      	b.n	800e192 <_printf_float+0xb6>
 800e2c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e2cc:	f240 80dd 	bls.w	800e48a <_printf_float+0x3ae>
 800e2d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f7f2 fb88 	bl	80009ec <__aeabi_dcmpeq>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d033      	beq.n	800e348 <_printf_float+0x26c>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	4631      	mov	r1, r6
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	4a35      	ldr	r2, [pc, #212]	; (800e3bc <_printf_float+0x2e0>)
 800e2e8:	47b8      	blx	r7
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	f43f af51 	beq.w	800e192 <_printf_float+0xb6>
 800e2f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	db02      	blt.n	800e2fe <_printf_float+0x222>
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	07d8      	lsls	r0, r3, #31
 800e2fc:	d50f      	bpl.n	800e31e <_printf_float+0x242>
 800e2fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e302:	4631      	mov	r1, r6
 800e304:	4628      	mov	r0, r5
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	f43f af42 	beq.w	800e192 <_printf_float+0xb6>
 800e30e:	f04f 0800 	mov.w	r8, #0
 800e312:	f104 091a 	add.w	r9, r4, #26
 800e316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e318:	3b01      	subs	r3, #1
 800e31a:	4543      	cmp	r3, r8
 800e31c:	dc09      	bgt.n	800e332 <_printf_float+0x256>
 800e31e:	6823      	ldr	r3, [r4, #0]
 800e320:	079b      	lsls	r3, r3, #30
 800e322:	f100 8102 	bmi.w	800e52a <_printf_float+0x44e>
 800e326:	68e0      	ldr	r0, [r4, #12]
 800e328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e32a:	4298      	cmp	r0, r3
 800e32c:	bfb8      	it	lt
 800e32e:	4618      	movlt	r0, r3
 800e330:	e731      	b.n	800e196 <_printf_float+0xba>
 800e332:	2301      	movs	r3, #1
 800e334:	464a      	mov	r2, r9
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	f43f af28 	beq.w	800e192 <_printf_float+0xb6>
 800e342:	f108 0801 	add.w	r8, r8, #1
 800e346:	e7e6      	b.n	800e316 <_printf_float+0x23a>
 800e348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	dc38      	bgt.n	800e3c0 <_printf_float+0x2e4>
 800e34e:	2301      	movs	r3, #1
 800e350:	4631      	mov	r1, r6
 800e352:	4628      	mov	r0, r5
 800e354:	4a19      	ldr	r2, [pc, #100]	; (800e3bc <_printf_float+0x2e0>)
 800e356:	47b8      	blx	r7
 800e358:	3001      	adds	r0, #1
 800e35a:	f43f af1a 	beq.w	800e192 <_printf_float+0xb6>
 800e35e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e362:	4313      	orrs	r3, r2
 800e364:	d102      	bne.n	800e36c <_printf_float+0x290>
 800e366:	6823      	ldr	r3, [r4, #0]
 800e368:	07d9      	lsls	r1, r3, #31
 800e36a:	d5d8      	bpl.n	800e31e <_printf_float+0x242>
 800e36c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e370:	4631      	mov	r1, r6
 800e372:	4628      	mov	r0, r5
 800e374:	47b8      	blx	r7
 800e376:	3001      	adds	r0, #1
 800e378:	f43f af0b 	beq.w	800e192 <_printf_float+0xb6>
 800e37c:	f04f 0900 	mov.w	r9, #0
 800e380:	f104 0a1a 	add.w	sl, r4, #26
 800e384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e386:	425b      	negs	r3, r3
 800e388:	454b      	cmp	r3, r9
 800e38a:	dc01      	bgt.n	800e390 <_printf_float+0x2b4>
 800e38c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e38e:	e794      	b.n	800e2ba <_printf_float+0x1de>
 800e390:	2301      	movs	r3, #1
 800e392:	4652      	mov	r2, sl
 800e394:	4631      	mov	r1, r6
 800e396:	4628      	mov	r0, r5
 800e398:	47b8      	blx	r7
 800e39a:	3001      	adds	r0, #1
 800e39c:	f43f aef9 	beq.w	800e192 <_printf_float+0xb6>
 800e3a0:	f109 0901 	add.w	r9, r9, #1
 800e3a4:	e7ee      	b.n	800e384 <_printf_float+0x2a8>
 800e3a6:	bf00      	nop
 800e3a8:	7fefffff 	.word	0x7fefffff
 800e3ac:	08010ecc 	.word	0x08010ecc
 800e3b0:	08010ed0 	.word	0x08010ed0
 800e3b4:	08010ed8 	.word	0x08010ed8
 800e3b8:	08010ed4 	.word	0x08010ed4
 800e3bc:	08010edc 	.word	0x08010edc
 800e3c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	bfa8      	it	ge
 800e3c8:	461a      	movge	r2, r3
 800e3ca:	2a00      	cmp	r2, #0
 800e3cc:	4691      	mov	r9, r2
 800e3ce:	dc37      	bgt.n	800e440 <_printf_float+0x364>
 800e3d0:	f04f 0b00 	mov.w	fp, #0
 800e3d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3d8:	f104 021a 	add.w	r2, r4, #26
 800e3dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e3e0:	ebaa 0309 	sub.w	r3, sl, r9
 800e3e4:	455b      	cmp	r3, fp
 800e3e6:	dc33      	bgt.n	800e450 <_printf_float+0x374>
 800e3e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	db3b      	blt.n	800e468 <_printf_float+0x38c>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	07da      	lsls	r2, r3, #31
 800e3f4:	d438      	bmi.n	800e468 <_printf_float+0x38c>
 800e3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e3fa:	eba3 020a 	sub.w	r2, r3, sl
 800e3fe:	eba3 0901 	sub.w	r9, r3, r1
 800e402:	4591      	cmp	r9, r2
 800e404:	bfa8      	it	ge
 800e406:	4691      	movge	r9, r2
 800e408:	f1b9 0f00 	cmp.w	r9, #0
 800e40c:	dc34      	bgt.n	800e478 <_printf_float+0x39c>
 800e40e:	f04f 0800 	mov.w	r8, #0
 800e412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e416:	f104 0a1a 	add.w	sl, r4, #26
 800e41a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e41e:	1a9b      	subs	r3, r3, r2
 800e420:	eba3 0309 	sub.w	r3, r3, r9
 800e424:	4543      	cmp	r3, r8
 800e426:	f77f af7a 	ble.w	800e31e <_printf_float+0x242>
 800e42a:	2301      	movs	r3, #1
 800e42c:	4652      	mov	r2, sl
 800e42e:	4631      	mov	r1, r6
 800e430:	4628      	mov	r0, r5
 800e432:	47b8      	blx	r7
 800e434:	3001      	adds	r0, #1
 800e436:	f43f aeac 	beq.w	800e192 <_printf_float+0xb6>
 800e43a:	f108 0801 	add.w	r8, r8, #1
 800e43e:	e7ec      	b.n	800e41a <_printf_float+0x33e>
 800e440:	4613      	mov	r3, r2
 800e442:	4631      	mov	r1, r6
 800e444:	4642      	mov	r2, r8
 800e446:	4628      	mov	r0, r5
 800e448:	47b8      	blx	r7
 800e44a:	3001      	adds	r0, #1
 800e44c:	d1c0      	bne.n	800e3d0 <_printf_float+0x2f4>
 800e44e:	e6a0      	b.n	800e192 <_printf_float+0xb6>
 800e450:	2301      	movs	r3, #1
 800e452:	4631      	mov	r1, r6
 800e454:	4628      	mov	r0, r5
 800e456:	920b      	str	r2, [sp, #44]	; 0x2c
 800e458:	47b8      	blx	r7
 800e45a:	3001      	adds	r0, #1
 800e45c:	f43f ae99 	beq.w	800e192 <_printf_float+0xb6>
 800e460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e462:	f10b 0b01 	add.w	fp, fp, #1
 800e466:	e7b9      	b.n	800e3dc <_printf_float+0x300>
 800e468:	4631      	mov	r1, r6
 800e46a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e46e:	4628      	mov	r0, r5
 800e470:	47b8      	blx	r7
 800e472:	3001      	adds	r0, #1
 800e474:	d1bf      	bne.n	800e3f6 <_printf_float+0x31a>
 800e476:	e68c      	b.n	800e192 <_printf_float+0xb6>
 800e478:	464b      	mov	r3, r9
 800e47a:	4631      	mov	r1, r6
 800e47c:	4628      	mov	r0, r5
 800e47e:	eb08 020a 	add.w	r2, r8, sl
 800e482:	47b8      	blx	r7
 800e484:	3001      	adds	r0, #1
 800e486:	d1c2      	bne.n	800e40e <_printf_float+0x332>
 800e488:	e683      	b.n	800e192 <_printf_float+0xb6>
 800e48a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e48c:	2a01      	cmp	r2, #1
 800e48e:	dc01      	bgt.n	800e494 <_printf_float+0x3b8>
 800e490:	07db      	lsls	r3, r3, #31
 800e492:	d537      	bpl.n	800e504 <_printf_float+0x428>
 800e494:	2301      	movs	r3, #1
 800e496:	4642      	mov	r2, r8
 800e498:	4631      	mov	r1, r6
 800e49a:	4628      	mov	r0, r5
 800e49c:	47b8      	blx	r7
 800e49e:	3001      	adds	r0, #1
 800e4a0:	f43f ae77 	beq.w	800e192 <_printf_float+0xb6>
 800e4a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4a8:	4631      	mov	r1, r6
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	47b8      	blx	r7
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	f43f ae6f 	beq.w	800e192 <_printf_float+0xb6>
 800e4b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f7f2 fa96 	bl	80009ec <__aeabi_dcmpeq>
 800e4c0:	b9d8      	cbnz	r0, 800e4fa <_printf_float+0x41e>
 800e4c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4c4:	f108 0201 	add.w	r2, r8, #1
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b8      	blx	r7
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	d10e      	bne.n	800e4f2 <_printf_float+0x416>
 800e4d4:	e65d      	b.n	800e192 <_printf_float+0xb6>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	464a      	mov	r2, r9
 800e4da:	4631      	mov	r1, r6
 800e4dc:	4628      	mov	r0, r5
 800e4de:	47b8      	blx	r7
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	f43f ae56 	beq.w	800e192 <_printf_float+0xb6>
 800e4e6:	f108 0801 	add.w	r8, r8, #1
 800e4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	4543      	cmp	r3, r8
 800e4f0:	dcf1      	bgt.n	800e4d6 <_printf_float+0x3fa>
 800e4f2:	4653      	mov	r3, sl
 800e4f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e4f8:	e6e0      	b.n	800e2bc <_printf_float+0x1e0>
 800e4fa:	f04f 0800 	mov.w	r8, #0
 800e4fe:	f104 091a 	add.w	r9, r4, #26
 800e502:	e7f2      	b.n	800e4ea <_printf_float+0x40e>
 800e504:	2301      	movs	r3, #1
 800e506:	4642      	mov	r2, r8
 800e508:	e7df      	b.n	800e4ca <_printf_float+0x3ee>
 800e50a:	2301      	movs	r3, #1
 800e50c:	464a      	mov	r2, r9
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f ae3c 	beq.w	800e192 <_printf_float+0xb6>
 800e51a:	f108 0801 	add.w	r8, r8, #1
 800e51e:	68e3      	ldr	r3, [r4, #12]
 800e520:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e522:	1a5b      	subs	r3, r3, r1
 800e524:	4543      	cmp	r3, r8
 800e526:	dcf0      	bgt.n	800e50a <_printf_float+0x42e>
 800e528:	e6fd      	b.n	800e326 <_printf_float+0x24a>
 800e52a:	f04f 0800 	mov.w	r8, #0
 800e52e:	f104 0919 	add.w	r9, r4, #25
 800e532:	e7f4      	b.n	800e51e <_printf_float+0x442>

0800e534 <_printf_common>:
 800e534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e538:	4616      	mov	r6, r2
 800e53a:	4699      	mov	r9, r3
 800e53c:	688a      	ldr	r2, [r1, #8]
 800e53e:	690b      	ldr	r3, [r1, #16]
 800e540:	4607      	mov	r7, r0
 800e542:	4293      	cmp	r3, r2
 800e544:	bfb8      	it	lt
 800e546:	4613      	movlt	r3, r2
 800e548:	6033      	str	r3, [r6, #0]
 800e54a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e54e:	460c      	mov	r4, r1
 800e550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e554:	b10a      	cbz	r2, 800e55a <_printf_common+0x26>
 800e556:	3301      	adds	r3, #1
 800e558:	6033      	str	r3, [r6, #0]
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	0699      	lsls	r1, r3, #26
 800e55e:	bf42      	ittt	mi
 800e560:	6833      	ldrmi	r3, [r6, #0]
 800e562:	3302      	addmi	r3, #2
 800e564:	6033      	strmi	r3, [r6, #0]
 800e566:	6825      	ldr	r5, [r4, #0]
 800e568:	f015 0506 	ands.w	r5, r5, #6
 800e56c:	d106      	bne.n	800e57c <_printf_common+0x48>
 800e56e:	f104 0a19 	add.w	sl, r4, #25
 800e572:	68e3      	ldr	r3, [r4, #12]
 800e574:	6832      	ldr	r2, [r6, #0]
 800e576:	1a9b      	subs	r3, r3, r2
 800e578:	42ab      	cmp	r3, r5
 800e57a:	dc28      	bgt.n	800e5ce <_printf_common+0x9a>
 800e57c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e580:	1e13      	subs	r3, r2, #0
 800e582:	6822      	ldr	r2, [r4, #0]
 800e584:	bf18      	it	ne
 800e586:	2301      	movne	r3, #1
 800e588:	0692      	lsls	r2, r2, #26
 800e58a:	d42d      	bmi.n	800e5e8 <_printf_common+0xb4>
 800e58c:	4649      	mov	r1, r9
 800e58e:	4638      	mov	r0, r7
 800e590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e594:	47c0      	blx	r8
 800e596:	3001      	adds	r0, #1
 800e598:	d020      	beq.n	800e5dc <_printf_common+0xa8>
 800e59a:	6823      	ldr	r3, [r4, #0]
 800e59c:	68e5      	ldr	r5, [r4, #12]
 800e59e:	f003 0306 	and.w	r3, r3, #6
 800e5a2:	2b04      	cmp	r3, #4
 800e5a4:	bf18      	it	ne
 800e5a6:	2500      	movne	r5, #0
 800e5a8:	6832      	ldr	r2, [r6, #0]
 800e5aa:	f04f 0600 	mov.w	r6, #0
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	bf08      	it	eq
 800e5b2:	1aad      	subeq	r5, r5, r2
 800e5b4:	6922      	ldr	r2, [r4, #16]
 800e5b6:	bf08      	it	eq
 800e5b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	bfc4      	itt	gt
 800e5c0:	1a9b      	subgt	r3, r3, r2
 800e5c2:	18ed      	addgt	r5, r5, r3
 800e5c4:	341a      	adds	r4, #26
 800e5c6:	42b5      	cmp	r5, r6
 800e5c8:	d11a      	bne.n	800e600 <_printf_common+0xcc>
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	e008      	b.n	800e5e0 <_printf_common+0xac>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	4652      	mov	r2, sl
 800e5d2:	4649      	mov	r1, r9
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	47c0      	blx	r8
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d103      	bne.n	800e5e4 <_printf_common+0xb0>
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	e7c4      	b.n	800e572 <_printf_common+0x3e>
 800e5e8:	2030      	movs	r0, #48	; 0x30
 800e5ea:	18e1      	adds	r1, r4, r3
 800e5ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5f6:	4422      	add	r2, r4
 800e5f8:	3302      	adds	r3, #2
 800e5fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5fe:	e7c5      	b.n	800e58c <_printf_common+0x58>
 800e600:	2301      	movs	r3, #1
 800e602:	4622      	mov	r2, r4
 800e604:	4649      	mov	r1, r9
 800e606:	4638      	mov	r0, r7
 800e608:	47c0      	blx	r8
 800e60a:	3001      	adds	r0, #1
 800e60c:	d0e6      	beq.n	800e5dc <_printf_common+0xa8>
 800e60e:	3601      	adds	r6, #1
 800e610:	e7d9      	b.n	800e5c6 <_printf_common+0x92>
	...

0800e614 <_printf_i>:
 800e614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	7e0f      	ldrb	r7, [r1, #24]
 800e61a:	4691      	mov	r9, r2
 800e61c:	2f78      	cmp	r7, #120	; 0x78
 800e61e:	4680      	mov	r8, r0
 800e620:	460c      	mov	r4, r1
 800e622:	469a      	mov	sl, r3
 800e624:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e62a:	d807      	bhi.n	800e63c <_printf_i+0x28>
 800e62c:	2f62      	cmp	r7, #98	; 0x62
 800e62e:	d80a      	bhi.n	800e646 <_printf_i+0x32>
 800e630:	2f00      	cmp	r7, #0
 800e632:	f000 80d9 	beq.w	800e7e8 <_printf_i+0x1d4>
 800e636:	2f58      	cmp	r7, #88	; 0x58
 800e638:	f000 80a4 	beq.w	800e784 <_printf_i+0x170>
 800e63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e644:	e03a      	b.n	800e6bc <_printf_i+0xa8>
 800e646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e64a:	2b15      	cmp	r3, #21
 800e64c:	d8f6      	bhi.n	800e63c <_printf_i+0x28>
 800e64e:	a101      	add	r1, pc, #4	; (adr r1, 800e654 <_printf_i+0x40>)
 800e650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e654:	0800e6ad 	.word	0x0800e6ad
 800e658:	0800e6c1 	.word	0x0800e6c1
 800e65c:	0800e63d 	.word	0x0800e63d
 800e660:	0800e63d 	.word	0x0800e63d
 800e664:	0800e63d 	.word	0x0800e63d
 800e668:	0800e63d 	.word	0x0800e63d
 800e66c:	0800e6c1 	.word	0x0800e6c1
 800e670:	0800e63d 	.word	0x0800e63d
 800e674:	0800e63d 	.word	0x0800e63d
 800e678:	0800e63d 	.word	0x0800e63d
 800e67c:	0800e63d 	.word	0x0800e63d
 800e680:	0800e7cf 	.word	0x0800e7cf
 800e684:	0800e6f1 	.word	0x0800e6f1
 800e688:	0800e7b1 	.word	0x0800e7b1
 800e68c:	0800e63d 	.word	0x0800e63d
 800e690:	0800e63d 	.word	0x0800e63d
 800e694:	0800e7f1 	.word	0x0800e7f1
 800e698:	0800e63d 	.word	0x0800e63d
 800e69c:	0800e6f1 	.word	0x0800e6f1
 800e6a0:	0800e63d 	.word	0x0800e63d
 800e6a4:	0800e63d 	.word	0x0800e63d
 800e6a8:	0800e7b9 	.word	0x0800e7b9
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	1d1a      	adds	r2, r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	602a      	str	r2, [r5, #0]
 800e6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e0a4      	b.n	800e80a <_printf_i+0x1f6>
 800e6c0:	6820      	ldr	r0, [r4, #0]
 800e6c2:	6829      	ldr	r1, [r5, #0]
 800e6c4:	0606      	lsls	r6, r0, #24
 800e6c6:	f101 0304 	add.w	r3, r1, #4
 800e6ca:	d50a      	bpl.n	800e6e2 <_printf_i+0xce>
 800e6cc:	680e      	ldr	r6, [r1, #0]
 800e6ce:	602b      	str	r3, [r5, #0]
 800e6d0:	2e00      	cmp	r6, #0
 800e6d2:	da03      	bge.n	800e6dc <_printf_i+0xc8>
 800e6d4:	232d      	movs	r3, #45	; 0x2d
 800e6d6:	4276      	negs	r6, r6
 800e6d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6dc:	230a      	movs	r3, #10
 800e6de:	485e      	ldr	r0, [pc, #376]	; (800e858 <_printf_i+0x244>)
 800e6e0:	e019      	b.n	800e716 <_printf_i+0x102>
 800e6e2:	680e      	ldr	r6, [r1, #0]
 800e6e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6e8:	602b      	str	r3, [r5, #0]
 800e6ea:	bf18      	it	ne
 800e6ec:	b236      	sxthne	r6, r6
 800e6ee:	e7ef      	b.n	800e6d0 <_printf_i+0xbc>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	6820      	ldr	r0, [r4, #0]
 800e6f4:	1d19      	adds	r1, r3, #4
 800e6f6:	6029      	str	r1, [r5, #0]
 800e6f8:	0601      	lsls	r1, r0, #24
 800e6fa:	d501      	bpl.n	800e700 <_printf_i+0xec>
 800e6fc:	681e      	ldr	r6, [r3, #0]
 800e6fe:	e002      	b.n	800e706 <_printf_i+0xf2>
 800e700:	0646      	lsls	r6, r0, #25
 800e702:	d5fb      	bpl.n	800e6fc <_printf_i+0xe8>
 800e704:	881e      	ldrh	r6, [r3, #0]
 800e706:	2f6f      	cmp	r7, #111	; 0x6f
 800e708:	bf0c      	ite	eq
 800e70a:	2308      	moveq	r3, #8
 800e70c:	230a      	movne	r3, #10
 800e70e:	4852      	ldr	r0, [pc, #328]	; (800e858 <_printf_i+0x244>)
 800e710:	2100      	movs	r1, #0
 800e712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e716:	6865      	ldr	r5, [r4, #4]
 800e718:	2d00      	cmp	r5, #0
 800e71a:	bfa8      	it	ge
 800e71c:	6821      	ldrge	r1, [r4, #0]
 800e71e:	60a5      	str	r5, [r4, #8]
 800e720:	bfa4      	itt	ge
 800e722:	f021 0104 	bicge.w	r1, r1, #4
 800e726:	6021      	strge	r1, [r4, #0]
 800e728:	b90e      	cbnz	r6, 800e72e <_printf_i+0x11a>
 800e72a:	2d00      	cmp	r5, #0
 800e72c:	d04d      	beq.n	800e7ca <_printf_i+0x1b6>
 800e72e:	4615      	mov	r5, r2
 800e730:	fbb6 f1f3 	udiv	r1, r6, r3
 800e734:	fb03 6711 	mls	r7, r3, r1, r6
 800e738:	5dc7      	ldrb	r7, [r0, r7]
 800e73a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e73e:	4637      	mov	r7, r6
 800e740:	42bb      	cmp	r3, r7
 800e742:	460e      	mov	r6, r1
 800e744:	d9f4      	bls.n	800e730 <_printf_i+0x11c>
 800e746:	2b08      	cmp	r3, #8
 800e748:	d10b      	bne.n	800e762 <_printf_i+0x14e>
 800e74a:	6823      	ldr	r3, [r4, #0]
 800e74c:	07de      	lsls	r6, r3, #31
 800e74e:	d508      	bpl.n	800e762 <_printf_i+0x14e>
 800e750:	6923      	ldr	r3, [r4, #16]
 800e752:	6861      	ldr	r1, [r4, #4]
 800e754:	4299      	cmp	r1, r3
 800e756:	bfde      	ittt	le
 800e758:	2330      	movle	r3, #48	; 0x30
 800e75a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e75e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e762:	1b52      	subs	r2, r2, r5
 800e764:	6122      	str	r2, [r4, #16]
 800e766:	464b      	mov	r3, r9
 800e768:	4621      	mov	r1, r4
 800e76a:	4640      	mov	r0, r8
 800e76c:	f8cd a000 	str.w	sl, [sp]
 800e770:	aa03      	add	r2, sp, #12
 800e772:	f7ff fedf 	bl	800e534 <_printf_common>
 800e776:	3001      	adds	r0, #1
 800e778:	d14c      	bne.n	800e814 <_printf_i+0x200>
 800e77a:	f04f 30ff 	mov.w	r0, #4294967295
 800e77e:	b004      	add	sp, #16
 800e780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e784:	4834      	ldr	r0, [pc, #208]	; (800e858 <_printf_i+0x244>)
 800e786:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e78a:	6829      	ldr	r1, [r5, #0]
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	f851 6b04 	ldr.w	r6, [r1], #4
 800e792:	6029      	str	r1, [r5, #0]
 800e794:	061d      	lsls	r5, r3, #24
 800e796:	d514      	bpl.n	800e7c2 <_printf_i+0x1ae>
 800e798:	07df      	lsls	r7, r3, #31
 800e79a:	bf44      	itt	mi
 800e79c:	f043 0320 	orrmi.w	r3, r3, #32
 800e7a0:	6023      	strmi	r3, [r4, #0]
 800e7a2:	b91e      	cbnz	r6, 800e7ac <_printf_i+0x198>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	f023 0320 	bic.w	r3, r3, #32
 800e7aa:	6023      	str	r3, [r4, #0]
 800e7ac:	2310      	movs	r3, #16
 800e7ae:	e7af      	b.n	800e710 <_printf_i+0xfc>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	f043 0320 	orr.w	r3, r3, #32
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	2378      	movs	r3, #120	; 0x78
 800e7ba:	4828      	ldr	r0, [pc, #160]	; (800e85c <_printf_i+0x248>)
 800e7bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7c0:	e7e3      	b.n	800e78a <_printf_i+0x176>
 800e7c2:	0659      	lsls	r1, r3, #25
 800e7c4:	bf48      	it	mi
 800e7c6:	b2b6      	uxthmi	r6, r6
 800e7c8:	e7e6      	b.n	800e798 <_printf_i+0x184>
 800e7ca:	4615      	mov	r5, r2
 800e7cc:	e7bb      	b.n	800e746 <_printf_i+0x132>
 800e7ce:	682b      	ldr	r3, [r5, #0]
 800e7d0:	6826      	ldr	r6, [r4, #0]
 800e7d2:	1d18      	adds	r0, r3, #4
 800e7d4:	6961      	ldr	r1, [r4, #20]
 800e7d6:	6028      	str	r0, [r5, #0]
 800e7d8:	0635      	lsls	r5, r6, #24
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	d501      	bpl.n	800e7e2 <_printf_i+0x1ce>
 800e7de:	6019      	str	r1, [r3, #0]
 800e7e0:	e002      	b.n	800e7e8 <_printf_i+0x1d4>
 800e7e2:	0670      	lsls	r0, r6, #25
 800e7e4:	d5fb      	bpl.n	800e7de <_printf_i+0x1ca>
 800e7e6:	8019      	strh	r1, [r3, #0]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4615      	mov	r5, r2
 800e7ec:	6123      	str	r3, [r4, #16]
 800e7ee:	e7ba      	b.n	800e766 <_printf_i+0x152>
 800e7f0:	682b      	ldr	r3, [r5, #0]
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	1d1a      	adds	r2, r3, #4
 800e7f6:	602a      	str	r2, [r5, #0]
 800e7f8:	681d      	ldr	r5, [r3, #0]
 800e7fa:	6862      	ldr	r2, [r4, #4]
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	f000 fef9 	bl	800f5f4 <memchr>
 800e802:	b108      	cbz	r0, 800e808 <_printf_i+0x1f4>
 800e804:	1b40      	subs	r0, r0, r5
 800e806:	6060      	str	r0, [r4, #4]
 800e808:	6863      	ldr	r3, [r4, #4]
 800e80a:	6123      	str	r3, [r4, #16]
 800e80c:	2300      	movs	r3, #0
 800e80e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e812:	e7a8      	b.n	800e766 <_printf_i+0x152>
 800e814:	462a      	mov	r2, r5
 800e816:	4649      	mov	r1, r9
 800e818:	4640      	mov	r0, r8
 800e81a:	6923      	ldr	r3, [r4, #16]
 800e81c:	47d0      	blx	sl
 800e81e:	3001      	adds	r0, #1
 800e820:	d0ab      	beq.n	800e77a <_printf_i+0x166>
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	079b      	lsls	r3, r3, #30
 800e826:	d413      	bmi.n	800e850 <_printf_i+0x23c>
 800e828:	68e0      	ldr	r0, [r4, #12]
 800e82a:	9b03      	ldr	r3, [sp, #12]
 800e82c:	4298      	cmp	r0, r3
 800e82e:	bfb8      	it	lt
 800e830:	4618      	movlt	r0, r3
 800e832:	e7a4      	b.n	800e77e <_printf_i+0x16a>
 800e834:	2301      	movs	r3, #1
 800e836:	4632      	mov	r2, r6
 800e838:	4649      	mov	r1, r9
 800e83a:	4640      	mov	r0, r8
 800e83c:	47d0      	blx	sl
 800e83e:	3001      	adds	r0, #1
 800e840:	d09b      	beq.n	800e77a <_printf_i+0x166>
 800e842:	3501      	adds	r5, #1
 800e844:	68e3      	ldr	r3, [r4, #12]
 800e846:	9903      	ldr	r1, [sp, #12]
 800e848:	1a5b      	subs	r3, r3, r1
 800e84a:	42ab      	cmp	r3, r5
 800e84c:	dcf2      	bgt.n	800e834 <_printf_i+0x220>
 800e84e:	e7eb      	b.n	800e828 <_printf_i+0x214>
 800e850:	2500      	movs	r5, #0
 800e852:	f104 0619 	add.w	r6, r4, #25
 800e856:	e7f5      	b.n	800e844 <_printf_i+0x230>
 800e858:	08010ede 	.word	0x08010ede
 800e85c:	08010eef 	.word	0x08010eef

0800e860 <sniprintf>:
 800e860:	b40c      	push	{r2, r3}
 800e862:	b530      	push	{r4, r5, lr}
 800e864:	4b17      	ldr	r3, [pc, #92]	; (800e8c4 <sniprintf+0x64>)
 800e866:	1e0c      	subs	r4, r1, #0
 800e868:	681d      	ldr	r5, [r3, #0]
 800e86a:	b09d      	sub	sp, #116	; 0x74
 800e86c:	da08      	bge.n	800e880 <sniprintf+0x20>
 800e86e:	238b      	movs	r3, #139	; 0x8b
 800e870:	f04f 30ff 	mov.w	r0, #4294967295
 800e874:	602b      	str	r3, [r5, #0]
 800e876:	b01d      	add	sp, #116	; 0x74
 800e878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e87c:	b002      	add	sp, #8
 800e87e:	4770      	bx	lr
 800e880:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e884:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e888:	bf0c      	ite	eq
 800e88a:	4623      	moveq	r3, r4
 800e88c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e890:	9304      	str	r3, [sp, #16]
 800e892:	9307      	str	r3, [sp, #28]
 800e894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e898:	9002      	str	r0, [sp, #8]
 800e89a:	9006      	str	r0, [sp, #24]
 800e89c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	ab21      	add	r3, sp, #132	; 0x84
 800e8a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e8a6:	a902      	add	r1, sp, #8
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	f001 fb7f 	bl	800ffac <_svfiprintf_r>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	bfbc      	itt	lt
 800e8b2:	238b      	movlt	r3, #139	; 0x8b
 800e8b4:	602b      	strlt	r3, [r5, #0]
 800e8b6:	2c00      	cmp	r4, #0
 800e8b8:	d0dd      	beq.n	800e876 <sniprintf+0x16>
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	9b02      	ldr	r3, [sp, #8]
 800e8be:	701a      	strb	r2, [r3, #0]
 800e8c0:	e7d9      	b.n	800e876 <sniprintf+0x16>
 800e8c2:	bf00      	nop
 800e8c4:	200001a8 	.word	0x200001a8

0800e8c8 <strcat>:
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	b510      	push	{r4, lr}
 800e8cc:	7814      	ldrb	r4, [r2, #0]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	3201      	adds	r2, #1
 800e8d2:	2c00      	cmp	r4, #0
 800e8d4:	d1fa      	bne.n	800e8cc <strcat+0x4>
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8e0:	2a00      	cmp	r2, #0
 800e8e2:	d1f9      	bne.n	800e8d8 <strcat+0x10>
 800e8e4:	bd10      	pop	{r4, pc}

0800e8e6 <quorem>:
 800e8e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ea:	6903      	ldr	r3, [r0, #16]
 800e8ec:	690c      	ldr	r4, [r1, #16]
 800e8ee:	4607      	mov	r7, r0
 800e8f0:	42a3      	cmp	r3, r4
 800e8f2:	f2c0 8082 	blt.w	800e9fa <quorem+0x114>
 800e8f6:	3c01      	subs	r4, #1
 800e8f8:	f100 0514 	add.w	r5, r0, #20
 800e8fc:	f101 0814 	add.w	r8, r1, #20
 800e900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e90a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e90e:	3301      	adds	r3, #1
 800e910:	429a      	cmp	r2, r3
 800e912:	fbb2 f6f3 	udiv	r6, r2, r3
 800e916:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e91a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e91e:	d331      	bcc.n	800e984 <quorem+0x9e>
 800e920:	f04f 0e00 	mov.w	lr, #0
 800e924:	4640      	mov	r0, r8
 800e926:	46ac      	mov	ip, r5
 800e928:	46f2      	mov	sl, lr
 800e92a:	f850 2b04 	ldr.w	r2, [r0], #4
 800e92e:	b293      	uxth	r3, r2
 800e930:	fb06 e303 	mla	r3, r6, r3, lr
 800e934:	0c12      	lsrs	r2, r2, #16
 800e936:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	fb06 e202 	mla	r2, r6, r2, lr
 800e940:	ebaa 0303 	sub.w	r3, sl, r3
 800e944:	f8dc a000 	ldr.w	sl, [ip]
 800e948:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e94c:	fa1f fa8a 	uxth.w	sl, sl
 800e950:	4453      	add	r3, sl
 800e952:	f8dc a000 	ldr.w	sl, [ip]
 800e956:	b292      	uxth	r2, r2
 800e958:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e95c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e960:	b29b      	uxth	r3, r3
 800e962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e966:	4581      	cmp	r9, r0
 800e968:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e96c:	f84c 3b04 	str.w	r3, [ip], #4
 800e970:	d2db      	bcs.n	800e92a <quorem+0x44>
 800e972:	f855 300b 	ldr.w	r3, [r5, fp]
 800e976:	b92b      	cbnz	r3, 800e984 <quorem+0x9e>
 800e978:	9b01      	ldr	r3, [sp, #4]
 800e97a:	3b04      	subs	r3, #4
 800e97c:	429d      	cmp	r5, r3
 800e97e:	461a      	mov	r2, r3
 800e980:	d32f      	bcc.n	800e9e2 <quorem+0xfc>
 800e982:	613c      	str	r4, [r7, #16]
 800e984:	4638      	mov	r0, r7
 800e986:	f001 f8c1 	bl	800fb0c <__mcmp>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	db25      	blt.n	800e9da <quorem+0xf4>
 800e98e:	4628      	mov	r0, r5
 800e990:	f04f 0c00 	mov.w	ip, #0
 800e994:	3601      	adds	r6, #1
 800e996:	f858 1b04 	ldr.w	r1, [r8], #4
 800e99a:	f8d0 e000 	ldr.w	lr, [r0]
 800e99e:	b28b      	uxth	r3, r1
 800e9a0:	ebac 0303 	sub.w	r3, ip, r3
 800e9a4:	fa1f f28e 	uxth.w	r2, lr
 800e9a8:	4413      	add	r3, r2
 800e9aa:	0c0a      	lsrs	r2, r1, #16
 800e9ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e9b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9ba:	45c1      	cmp	r9, r8
 800e9bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e9c0:	f840 3b04 	str.w	r3, [r0], #4
 800e9c4:	d2e7      	bcs.n	800e996 <quorem+0xb0>
 800e9c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9ce:	b922      	cbnz	r2, 800e9da <quorem+0xf4>
 800e9d0:	3b04      	subs	r3, #4
 800e9d2:	429d      	cmp	r5, r3
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	d30a      	bcc.n	800e9ee <quorem+0x108>
 800e9d8:	613c      	str	r4, [r7, #16]
 800e9da:	4630      	mov	r0, r6
 800e9dc:	b003      	add	sp, #12
 800e9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e2:	6812      	ldr	r2, [r2, #0]
 800e9e4:	3b04      	subs	r3, #4
 800e9e6:	2a00      	cmp	r2, #0
 800e9e8:	d1cb      	bne.n	800e982 <quorem+0x9c>
 800e9ea:	3c01      	subs	r4, #1
 800e9ec:	e7c6      	b.n	800e97c <quorem+0x96>
 800e9ee:	6812      	ldr	r2, [r2, #0]
 800e9f0:	3b04      	subs	r3, #4
 800e9f2:	2a00      	cmp	r2, #0
 800e9f4:	d1f0      	bne.n	800e9d8 <quorem+0xf2>
 800e9f6:	3c01      	subs	r4, #1
 800e9f8:	e7eb      	b.n	800e9d2 <quorem+0xec>
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	e7ee      	b.n	800e9dc <quorem+0xf6>
	...

0800ea00 <_dtoa_r>:
 800ea00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea04:	4616      	mov	r6, r2
 800ea06:	461f      	mov	r7, r3
 800ea08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ea0a:	b099      	sub	sp, #100	; 0x64
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ea12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ea16:	b974      	cbnz	r4, 800ea36 <_dtoa_r+0x36>
 800ea18:	2010      	movs	r0, #16
 800ea1a:	f000 fde3 	bl	800f5e4 <malloc>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	6268      	str	r0, [r5, #36]	; 0x24
 800ea22:	b920      	cbnz	r0, 800ea2e <_dtoa_r+0x2e>
 800ea24:	21ea      	movs	r1, #234	; 0xea
 800ea26:	4ba8      	ldr	r3, [pc, #672]	; (800ecc8 <_dtoa_r+0x2c8>)
 800ea28:	48a8      	ldr	r0, [pc, #672]	; (800eccc <_dtoa_r+0x2cc>)
 800ea2a:	f001 fbcf 	bl	80101cc <__assert_func>
 800ea2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea32:	6004      	str	r4, [r0, #0]
 800ea34:	60c4      	str	r4, [r0, #12]
 800ea36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea38:	6819      	ldr	r1, [r3, #0]
 800ea3a:	b151      	cbz	r1, 800ea52 <_dtoa_r+0x52>
 800ea3c:	685a      	ldr	r2, [r3, #4]
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4093      	lsls	r3, r2
 800ea42:	604a      	str	r2, [r1, #4]
 800ea44:	608b      	str	r3, [r1, #8]
 800ea46:	4628      	mov	r0, r5
 800ea48:	f000 fe22 	bl	800f690 <_Bfree>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	1e3b      	subs	r3, r7, #0
 800ea54:	bfaf      	iteee	ge
 800ea56:	2300      	movge	r3, #0
 800ea58:	2201      	movlt	r2, #1
 800ea5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ea5e:	9305      	strlt	r3, [sp, #20]
 800ea60:	bfa8      	it	ge
 800ea62:	f8c8 3000 	strge.w	r3, [r8]
 800ea66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ea6a:	4b99      	ldr	r3, [pc, #612]	; (800ecd0 <_dtoa_r+0x2d0>)
 800ea6c:	bfb8      	it	lt
 800ea6e:	f8c8 2000 	strlt.w	r2, [r8]
 800ea72:	ea33 0309 	bics.w	r3, r3, r9
 800ea76:	d119      	bne.n	800eaac <_dtoa_r+0xac>
 800ea78:	f242 730f 	movw	r3, #9999	; 0x270f
 800ea7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea84:	4333      	orrs	r3, r6
 800ea86:	f000 857f 	beq.w	800f588 <_dtoa_r+0xb88>
 800ea8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea8c:	b953      	cbnz	r3, 800eaa4 <_dtoa_r+0xa4>
 800ea8e:	4b91      	ldr	r3, [pc, #580]	; (800ecd4 <_dtoa_r+0x2d4>)
 800ea90:	e022      	b.n	800ead8 <_dtoa_r+0xd8>
 800ea92:	4b91      	ldr	r3, [pc, #580]	; (800ecd8 <_dtoa_r+0x2d8>)
 800ea94:	9303      	str	r3, [sp, #12]
 800ea96:	3308      	adds	r3, #8
 800ea98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	9803      	ldr	r0, [sp, #12]
 800ea9e:	b019      	add	sp, #100	; 0x64
 800eaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa4:	4b8b      	ldr	r3, [pc, #556]	; (800ecd4 <_dtoa_r+0x2d4>)
 800eaa6:	9303      	str	r3, [sp, #12]
 800eaa8:	3303      	adds	r3, #3
 800eaaa:	e7f5      	b.n	800ea98 <_dtoa_r+0x98>
 800eaac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800eab0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800eab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eab8:	2200      	movs	r2, #0
 800eaba:	2300      	movs	r3, #0
 800eabc:	f7f1 ff96 	bl	80009ec <__aeabi_dcmpeq>
 800eac0:	4680      	mov	r8, r0
 800eac2:	b158      	cbz	r0, 800eadc <_dtoa_r+0xdc>
 800eac4:	2301      	movs	r3, #1
 800eac6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800eac8:	6013      	str	r3, [r2, #0]
 800eaca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 8558 	beq.w	800f582 <_dtoa_r+0xb82>
 800ead2:	4882      	ldr	r0, [pc, #520]	; (800ecdc <_dtoa_r+0x2dc>)
 800ead4:	6018      	str	r0, [r3, #0]
 800ead6:	1e43      	subs	r3, r0, #1
 800ead8:	9303      	str	r3, [sp, #12]
 800eada:	e7df      	b.n	800ea9c <_dtoa_r+0x9c>
 800eadc:	ab16      	add	r3, sp, #88	; 0x58
 800eade:	9301      	str	r3, [sp, #4]
 800eae0:	ab17      	add	r3, sp, #92	; 0x5c
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	4628      	mov	r0, r5
 800eae6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800eaea:	f001 f8b7 	bl	800fc5c <__d2b>
 800eaee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eaf2:	4683      	mov	fp, r0
 800eaf4:	2c00      	cmp	r4, #0
 800eaf6:	d07f      	beq.n	800ebf8 <_dtoa_r+0x1f8>
 800eaf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eafc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eafe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800eb02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800eb0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eb0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800eb12:	2200      	movs	r2, #0
 800eb14:	4b72      	ldr	r3, [pc, #456]	; (800ece0 <_dtoa_r+0x2e0>)
 800eb16:	f7f1 fb49 	bl	80001ac <__aeabi_dsub>
 800eb1a:	a365      	add	r3, pc, #404	; (adr r3, 800ecb0 <_dtoa_r+0x2b0>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f1 fcfc 	bl	800051c <__aeabi_dmul>
 800eb24:	a364      	add	r3, pc, #400	; (adr r3, 800ecb8 <_dtoa_r+0x2b8>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	f7f1 fb41 	bl	80001b0 <__adddf3>
 800eb2e:	4606      	mov	r6, r0
 800eb30:	4620      	mov	r0, r4
 800eb32:	460f      	mov	r7, r1
 800eb34:	f7f1 fc88 	bl	8000448 <__aeabi_i2d>
 800eb38:	a361      	add	r3, pc, #388	; (adr r3, 800ecc0 <_dtoa_r+0x2c0>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fced 	bl	800051c <__aeabi_dmul>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	4630      	mov	r0, r6
 800eb48:	4639      	mov	r1, r7
 800eb4a:	f7f1 fb31 	bl	80001b0 <__adddf3>
 800eb4e:	4606      	mov	r6, r0
 800eb50:	460f      	mov	r7, r1
 800eb52:	f7f1 ff93 	bl	8000a7c <__aeabi_d2iz>
 800eb56:	2200      	movs	r2, #0
 800eb58:	4682      	mov	sl, r0
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	4639      	mov	r1, r7
 800eb60:	f7f1 ff4e 	bl	8000a00 <__aeabi_dcmplt>
 800eb64:	b148      	cbz	r0, 800eb7a <_dtoa_r+0x17a>
 800eb66:	4650      	mov	r0, sl
 800eb68:	f7f1 fc6e 	bl	8000448 <__aeabi_i2d>
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	463b      	mov	r3, r7
 800eb70:	f7f1 ff3c 	bl	80009ec <__aeabi_dcmpeq>
 800eb74:	b908      	cbnz	r0, 800eb7a <_dtoa_r+0x17a>
 800eb76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb7a:	f1ba 0f16 	cmp.w	sl, #22
 800eb7e:	d858      	bhi.n	800ec32 <_dtoa_r+0x232>
 800eb80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eb84:	4b57      	ldr	r3, [pc, #348]	; (800ece4 <_dtoa_r+0x2e4>)
 800eb86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	f7f1 ff37 	bl	8000a00 <__aeabi_dcmplt>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d04f      	beq.n	800ec36 <_dtoa_r+0x236>
 800eb96:	2300      	movs	r3, #0
 800eb98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eba0:	1b1c      	subs	r4, r3, r4
 800eba2:	1e63      	subs	r3, r4, #1
 800eba4:	9309      	str	r3, [sp, #36]	; 0x24
 800eba6:	bf49      	itett	mi
 800eba8:	f1c4 0301 	rsbmi	r3, r4, #1
 800ebac:	2300      	movpl	r3, #0
 800ebae:	9306      	strmi	r3, [sp, #24]
 800ebb0:	2300      	movmi	r3, #0
 800ebb2:	bf54      	ite	pl
 800ebb4:	9306      	strpl	r3, [sp, #24]
 800ebb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ebb8:	f1ba 0f00 	cmp.w	sl, #0
 800ebbc:	db3d      	blt.n	800ec3a <_dtoa_r+0x23a>
 800ebbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebc0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ebc4:	4453      	add	r3, sl
 800ebc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc8:	2300      	movs	r3, #0
 800ebca:	930a      	str	r3, [sp, #40]	; 0x28
 800ebcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebce:	2b09      	cmp	r3, #9
 800ebd0:	f200 808c 	bhi.w	800ecec <_dtoa_r+0x2ec>
 800ebd4:	2b05      	cmp	r3, #5
 800ebd6:	bfc4      	itt	gt
 800ebd8:	3b04      	subgt	r3, #4
 800ebda:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ebdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebde:	bfc8      	it	gt
 800ebe0:	2400      	movgt	r4, #0
 800ebe2:	f1a3 0302 	sub.w	r3, r3, #2
 800ebe6:	bfd8      	it	le
 800ebe8:	2401      	movle	r4, #1
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	f200 808a 	bhi.w	800ed04 <_dtoa_r+0x304>
 800ebf0:	e8df f003 	tbb	[pc, r3]
 800ebf4:	5b4d4f2d 	.word	0x5b4d4f2d
 800ebf8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ebfc:	441c      	add	r4, r3
 800ebfe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ec02:	2b20      	cmp	r3, #32
 800ec04:	bfc3      	ittte	gt
 800ec06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ec0e:	fa09 f303 	lslgt.w	r3, r9, r3
 800ec12:	f1c3 0320 	rsble	r3, r3, #32
 800ec16:	bfc6      	itte	gt
 800ec18:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ec1c:	4318      	orrgt	r0, r3
 800ec1e:	fa06 f003 	lslle.w	r0, r6, r3
 800ec22:	f7f1 fc01 	bl	8000428 <__aeabi_ui2d>
 800ec26:	2301      	movs	r3, #1
 800ec28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ec2c:	3c01      	subs	r4, #1
 800ec2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec30:	e76f      	b.n	800eb12 <_dtoa_r+0x112>
 800ec32:	2301      	movs	r3, #1
 800ec34:	e7b2      	b.n	800eb9c <_dtoa_r+0x19c>
 800ec36:	900f      	str	r0, [sp, #60]	; 0x3c
 800ec38:	e7b1      	b.n	800eb9e <_dtoa_r+0x19e>
 800ec3a:	9b06      	ldr	r3, [sp, #24]
 800ec3c:	eba3 030a 	sub.w	r3, r3, sl
 800ec40:	9306      	str	r3, [sp, #24]
 800ec42:	f1ca 0300 	rsb	r3, sl, #0
 800ec46:	930a      	str	r3, [sp, #40]	; 0x28
 800ec48:	2300      	movs	r3, #0
 800ec4a:	930e      	str	r3, [sp, #56]	; 0x38
 800ec4c:	e7be      	b.n	800ebcc <_dtoa_r+0x1cc>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	dc58      	bgt.n	800ed0a <_dtoa_r+0x30a>
 800ec58:	f04f 0901 	mov.w	r9, #1
 800ec5c:	464b      	mov	r3, r9
 800ec5e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ec62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ec66:	2200      	movs	r2, #0
 800ec68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ec6a:	6042      	str	r2, [r0, #4]
 800ec6c:	2204      	movs	r2, #4
 800ec6e:	f102 0614 	add.w	r6, r2, #20
 800ec72:	429e      	cmp	r6, r3
 800ec74:	6841      	ldr	r1, [r0, #4]
 800ec76:	d94e      	bls.n	800ed16 <_dtoa_r+0x316>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f000 fcc9 	bl	800f610 <_Balloc>
 800ec7e:	9003      	str	r0, [sp, #12]
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d14c      	bne.n	800ed1e <_dtoa_r+0x31e>
 800ec84:	4602      	mov	r2, r0
 800ec86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ec8a:	4b17      	ldr	r3, [pc, #92]	; (800ece8 <_dtoa_r+0x2e8>)
 800ec8c:	e6cc      	b.n	800ea28 <_dtoa_r+0x28>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e7de      	b.n	800ec50 <_dtoa_r+0x250>
 800ec92:	2300      	movs	r3, #0
 800ec94:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec98:	eb0a 0903 	add.w	r9, sl, r3
 800ec9c:	f109 0301 	add.w	r3, r9, #1
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	9308      	str	r3, [sp, #32]
 800eca4:	bfb8      	it	lt
 800eca6:	2301      	movlt	r3, #1
 800eca8:	e7dd      	b.n	800ec66 <_dtoa_r+0x266>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e7f2      	b.n	800ec94 <_dtoa_r+0x294>
 800ecae:	bf00      	nop
 800ecb0:	636f4361 	.word	0x636f4361
 800ecb4:	3fd287a7 	.word	0x3fd287a7
 800ecb8:	8b60c8b3 	.word	0x8b60c8b3
 800ecbc:	3fc68a28 	.word	0x3fc68a28
 800ecc0:	509f79fb 	.word	0x509f79fb
 800ecc4:	3fd34413 	.word	0x3fd34413
 800ecc8:	08010f0d 	.word	0x08010f0d
 800eccc:	08010f24 	.word	0x08010f24
 800ecd0:	7ff00000 	.word	0x7ff00000
 800ecd4:	08010f09 	.word	0x08010f09
 800ecd8:	08010f00 	.word	0x08010f00
 800ecdc:	08010edd 	.word	0x08010edd
 800ece0:	3ff80000 	.word	0x3ff80000
 800ece4:	08011018 	.word	0x08011018
 800ece8:	08010f7f 	.word	0x08010f7f
 800ecec:	2401      	movs	r4, #1
 800ecee:	2300      	movs	r3, #0
 800ecf0:	940b      	str	r4, [sp, #44]	; 0x2c
 800ecf2:	9322      	str	r3, [sp, #136]	; 0x88
 800ecf4:	f04f 39ff 	mov.w	r9, #4294967295
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	2312      	movs	r3, #18
 800ecfc:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed00:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed02:	e7b0      	b.n	800ec66 <_dtoa_r+0x266>
 800ed04:	2301      	movs	r3, #1
 800ed06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed08:	e7f4      	b.n	800ecf4 <_dtoa_r+0x2f4>
 800ed0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ed0e:	464b      	mov	r3, r9
 800ed10:	f8cd 9020 	str.w	r9, [sp, #32]
 800ed14:	e7a7      	b.n	800ec66 <_dtoa_r+0x266>
 800ed16:	3101      	adds	r1, #1
 800ed18:	6041      	str	r1, [r0, #4]
 800ed1a:	0052      	lsls	r2, r2, #1
 800ed1c:	e7a7      	b.n	800ec6e <_dtoa_r+0x26e>
 800ed1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed20:	9a03      	ldr	r2, [sp, #12]
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	9b08      	ldr	r3, [sp, #32]
 800ed26:	2b0e      	cmp	r3, #14
 800ed28:	f200 80a8 	bhi.w	800ee7c <_dtoa_r+0x47c>
 800ed2c:	2c00      	cmp	r4, #0
 800ed2e:	f000 80a5 	beq.w	800ee7c <_dtoa_r+0x47c>
 800ed32:	f1ba 0f00 	cmp.w	sl, #0
 800ed36:	dd34      	ble.n	800eda2 <_dtoa_r+0x3a2>
 800ed38:	4a9a      	ldr	r2, [pc, #616]	; (800efa4 <_dtoa_r+0x5a4>)
 800ed3a:	f00a 030f 	and.w	r3, sl, #15
 800ed3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ed46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ed4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ed4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ed52:	d016      	beq.n	800ed82 <_dtoa_r+0x382>
 800ed54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed58:	4b93      	ldr	r3, [pc, #588]	; (800efa8 <_dtoa_r+0x5a8>)
 800ed5a:	2703      	movs	r7, #3
 800ed5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed60:	f7f1 fd06 	bl	8000770 <__aeabi_ddiv>
 800ed64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed68:	f004 040f 	and.w	r4, r4, #15
 800ed6c:	4e8e      	ldr	r6, [pc, #568]	; (800efa8 <_dtoa_r+0x5a8>)
 800ed6e:	b954      	cbnz	r4, 800ed86 <_dtoa_r+0x386>
 800ed70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed78:	f7f1 fcfa 	bl	8000770 <__aeabi_ddiv>
 800ed7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed80:	e029      	b.n	800edd6 <_dtoa_r+0x3d6>
 800ed82:	2702      	movs	r7, #2
 800ed84:	e7f2      	b.n	800ed6c <_dtoa_r+0x36c>
 800ed86:	07e1      	lsls	r1, r4, #31
 800ed88:	d508      	bpl.n	800ed9c <_dtoa_r+0x39c>
 800ed8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ed8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ed92:	f7f1 fbc3 	bl	800051c <__aeabi_dmul>
 800ed96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ed9a:	3701      	adds	r7, #1
 800ed9c:	1064      	asrs	r4, r4, #1
 800ed9e:	3608      	adds	r6, #8
 800eda0:	e7e5      	b.n	800ed6e <_dtoa_r+0x36e>
 800eda2:	f000 80a5 	beq.w	800eef0 <_dtoa_r+0x4f0>
 800eda6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800edaa:	f1ca 0400 	rsb	r4, sl, #0
 800edae:	4b7d      	ldr	r3, [pc, #500]	; (800efa4 <_dtoa_r+0x5a4>)
 800edb0:	f004 020f 	and.w	r2, r4, #15
 800edb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	f7f1 fbae 	bl	800051c <__aeabi_dmul>
 800edc0:	2702      	movs	r7, #2
 800edc2:	2300      	movs	r3, #0
 800edc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edc8:	4e77      	ldr	r6, [pc, #476]	; (800efa8 <_dtoa_r+0x5a8>)
 800edca:	1124      	asrs	r4, r4, #4
 800edcc:	2c00      	cmp	r4, #0
 800edce:	f040 8084 	bne.w	800eeda <_dtoa_r+0x4da>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1d2      	bne.n	800ed7c <_dtoa_r+0x37c>
 800edd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 808b 	beq.w	800eef4 <_dtoa_r+0x4f4>
 800edde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ede2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ede6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800edea:	2200      	movs	r2, #0
 800edec:	4b6f      	ldr	r3, [pc, #444]	; (800efac <_dtoa_r+0x5ac>)
 800edee:	f7f1 fe07 	bl	8000a00 <__aeabi_dcmplt>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d07e      	beq.n	800eef4 <_dtoa_r+0x4f4>
 800edf6:	9b08      	ldr	r3, [sp, #32]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d07b      	beq.n	800eef4 <_dtoa_r+0x4f4>
 800edfc:	f1b9 0f00 	cmp.w	r9, #0
 800ee00:	dd38      	ble.n	800ee74 <_dtoa_r+0x474>
 800ee02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee06:	2200      	movs	r2, #0
 800ee08:	4b69      	ldr	r3, [pc, #420]	; (800efb0 <_dtoa_r+0x5b0>)
 800ee0a:	f7f1 fb87 	bl	800051c <__aeabi_dmul>
 800ee0e:	464c      	mov	r4, r9
 800ee10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee14:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ee18:	3701      	adds	r7, #1
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	f7f1 fb14 	bl	8000448 <__aeabi_i2d>
 800ee20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee24:	f7f1 fb7a 	bl	800051c <__aeabi_dmul>
 800ee28:	2200      	movs	r2, #0
 800ee2a:	4b62      	ldr	r3, [pc, #392]	; (800efb4 <_dtoa_r+0x5b4>)
 800ee2c:	f7f1 f9c0 	bl	80001b0 <__adddf3>
 800ee30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ee34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ee38:	9611      	str	r6, [sp, #68]	; 0x44
 800ee3a:	2c00      	cmp	r4, #0
 800ee3c:	d15d      	bne.n	800eefa <_dtoa_r+0x4fa>
 800ee3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee42:	2200      	movs	r2, #0
 800ee44:	4b5c      	ldr	r3, [pc, #368]	; (800efb8 <_dtoa_r+0x5b8>)
 800ee46:	f7f1 f9b1 	bl	80001ac <__aeabi_dsub>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ee52:	4633      	mov	r3, r6
 800ee54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee56:	f7f1 fdf1 	bl	8000a3c <__aeabi_dcmpgt>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	f040 829c 	bne.w	800f398 <_dtoa_r+0x998>
 800ee60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee6a:	f7f1 fdc9 	bl	8000a00 <__aeabi_dcmplt>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	f040 8290 	bne.w	800f394 <_dtoa_r+0x994>
 800ee74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ee78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ee7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f2c0 8152 	blt.w	800f128 <_dtoa_r+0x728>
 800ee84:	f1ba 0f0e 	cmp.w	sl, #14
 800ee88:	f300 814e 	bgt.w	800f128 <_dtoa_r+0x728>
 800ee8c:	4b45      	ldr	r3, [pc, #276]	; (800efa4 <_dtoa_r+0x5a4>)
 800ee8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ee92:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ee96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ee9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f280 80db 	bge.w	800f058 <_dtoa_r+0x658>
 800eea2:	9b08      	ldr	r3, [sp, #32]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f300 80d7 	bgt.w	800f058 <_dtoa_r+0x658>
 800eeaa:	f040 8272 	bne.w	800f392 <_dtoa_r+0x992>
 800eeae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4b40      	ldr	r3, [pc, #256]	; (800efb8 <_dtoa_r+0x5b8>)
 800eeb6:	f7f1 fb31 	bl	800051c <__aeabi_dmul>
 800eeba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eebe:	f7f1 fdb3 	bl	8000a28 <__aeabi_dcmpge>
 800eec2:	9c08      	ldr	r4, [sp, #32]
 800eec4:	4626      	mov	r6, r4
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f040 8248 	bne.w	800f35c <_dtoa_r+0x95c>
 800eecc:	2331      	movs	r3, #49	; 0x31
 800eece:	9f03      	ldr	r7, [sp, #12]
 800eed0:	f10a 0a01 	add.w	sl, sl, #1
 800eed4:	f807 3b01 	strb.w	r3, [r7], #1
 800eed8:	e244      	b.n	800f364 <_dtoa_r+0x964>
 800eeda:	07e2      	lsls	r2, r4, #31
 800eedc:	d505      	bpl.n	800eeea <_dtoa_r+0x4ea>
 800eede:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eee2:	f7f1 fb1b 	bl	800051c <__aeabi_dmul>
 800eee6:	2301      	movs	r3, #1
 800eee8:	3701      	adds	r7, #1
 800eeea:	1064      	asrs	r4, r4, #1
 800eeec:	3608      	adds	r6, #8
 800eeee:	e76d      	b.n	800edcc <_dtoa_r+0x3cc>
 800eef0:	2702      	movs	r7, #2
 800eef2:	e770      	b.n	800edd6 <_dtoa_r+0x3d6>
 800eef4:	46d0      	mov	r8, sl
 800eef6:	9c08      	ldr	r4, [sp, #32]
 800eef8:	e78f      	b.n	800ee1a <_dtoa_r+0x41a>
 800eefa:	9903      	ldr	r1, [sp, #12]
 800eefc:	4b29      	ldr	r3, [pc, #164]	; (800efa4 <_dtoa_r+0x5a4>)
 800eefe:	4421      	add	r1, r4
 800ef00:	9112      	str	r1, [sp, #72]	; 0x48
 800ef02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ef0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef10:	2900      	cmp	r1, #0
 800ef12:	d055      	beq.n	800efc0 <_dtoa_r+0x5c0>
 800ef14:	2000      	movs	r0, #0
 800ef16:	4929      	ldr	r1, [pc, #164]	; (800efbc <_dtoa_r+0x5bc>)
 800ef18:	f7f1 fc2a 	bl	8000770 <__aeabi_ddiv>
 800ef1c:	463b      	mov	r3, r7
 800ef1e:	4632      	mov	r2, r6
 800ef20:	f7f1 f944 	bl	80001ac <__aeabi_dsub>
 800ef24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef28:	9f03      	ldr	r7, [sp, #12]
 800ef2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef2e:	f7f1 fda5 	bl	8000a7c <__aeabi_d2iz>
 800ef32:	4604      	mov	r4, r0
 800ef34:	f7f1 fa88 	bl	8000448 <__aeabi_i2d>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef40:	f7f1 f934 	bl	80001ac <__aeabi_dsub>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	3430      	adds	r4, #48	; 0x30
 800ef4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef52:	f807 4b01 	strb.w	r4, [r7], #1
 800ef56:	f7f1 fd53 	bl	8000a00 <__aeabi_dcmplt>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d174      	bne.n	800f048 <_dtoa_r+0x648>
 800ef5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef62:	2000      	movs	r0, #0
 800ef64:	4911      	ldr	r1, [pc, #68]	; (800efac <_dtoa_r+0x5ac>)
 800ef66:	f7f1 f921 	bl	80001ac <__aeabi_dsub>
 800ef6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef6e:	f7f1 fd47 	bl	8000a00 <__aeabi_dcmplt>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	f040 80b7 	bne.w	800f0e6 <_dtoa_r+0x6e6>
 800ef78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef7a:	429f      	cmp	r7, r3
 800ef7c:	f43f af7a 	beq.w	800ee74 <_dtoa_r+0x474>
 800ef80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ef84:	2200      	movs	r2, #0
 800ef86:	4b0a      	ldr	r3, [pc, #40]	; (800efb0 <_dtoa_r+0x5b0>)
 800ef88:	f7f1 fac8 	bl	800051c <__aeabi_dmul>
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ef92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef96:	4b06      	ldr	r3, [pc, #24]	; (800efb0 <_dtoa_r+0x5b0>)
 800ef98:	f7f1 fac0 	bl	800051c <__aeabi_dmul>
 800ef9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800efa0:	e7c3      	b.n	800ef2a <_dtoa_r+0x52a>
 800efa2:	bf00      	nop
 800efa4:	08011018 	.word	0x08011018
 800efa8:	08010ff0 	.word	0x08010ff0
 800efac:	3ff00000 	.word	0x3ff00000
 800efb0:	40240000 	.word	0x40240000
 800efb4:	401c0000 	.word	0x401c0000
 800efb8:	40140000 	.word	0x40140000
 800efbc:	3fe00000 	.word	0x3fe00000
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 faaa 	bl	800051c <__aeabi_dmul>
 800efc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800efce:	9c03      	ldr	r4, [sp, #12]
 800efd0:	9314      	str	r3, [sp, #80]	; 0x50
 800efd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efd6:	f7f1 fd51 	bl	8000a7c <__aeabi_d2iz>
 800efda:	9015      	str	r0, [sp, #84]	; 0x54
 800efdc:	f7f1 fa34 	bl	8000448 <__aeabi_i2d>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efe8:	f7f1 f8e0 	bl	80001ac <__aeabi_dsub>
 800efec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efee:	4606      	mov	r6, r0
 800eff0:	3330      	adds	r3, #48	; 0x30
 800eff2:	f804 3b01 	strb.w	r3, [r4], #1
 800eff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eff8:	460f      	mov	r7, r1
 800effa:	429c      	cmp	r4, r3
 800effc:	f04f 0200 	mov.w	r2, #0
 800f000:	d124      	bne.n	800f04c <_dtoa_r+0x64c>
 800f002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f006:	4bb0      	ldr	r3, [pc, #704]	; (800f2c8 <_dtoa_r+0x8c8>)
 800f008:	f7f1 f8d2 	bl	80001b0 <__adddf3>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4630      	mov	r0, r6
 800f012:	4639      	mov	r1, r7
 800f014:	f7f1 fd12 	bl	8000a3c <__aeabi_dcmpgt>
 800f018:	2800      	cmp	r0, #0
 800f01a:	d163      	bne.n	800f0e4 <_dtoa_r+0x6e4>
 800f01c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f020:	2000      	movs	r0, #0
 800f022:	49a9      	ldr	r1, [pc, #676]	; (800f2c8 <_dtoa_r+0x8c8>)
 800f024:	f7f1 f8c2 	bl	80001ac <__aeabi_dsub>
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	4630      	mov	r0, r6
 800f02e:	4639      	mov	r1, r7
 800f030:	f7f1 fce6 	bl	8000a00 <__aeabi_dcmplt>
 800f034:	2800      	cmp	r0, #0
 800f036:	f43f af1d 	beq.w	800ee74 <_dtoa_r+0x474>
 800f03a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800f03c:	1e7b      	subs	r3, r7, #1
 800f03e:	9314      	str	r3, [sp, #80]	; 0x50
 800f040:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800f044:	2b30      	cmp	r3, #48	; 0x30
 800f046:	d0f8      	beq.n	800f03a <_dtoa_r+0x63a>
 800f048:	46c2      	mov	sl, r8
 800f04a:	e03b      	b.n	800f0c4 <_dtoa_r+0x6c4>
 800f04c:	4b9f      	ldr	r3, [pc, #636]	; (800f2cc <_dtoa_r+0x8cc>)
 800f04e:	f7f1 fa65 	bl	800051c <__aeabi_dmul>
 800f052:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f056:	e7bc      	b.n	800efd2 <_dtoa_r+0x5d2>
 800f058:	9f03      	ldr	r7, [sp, #12]
 800f05a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f05e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f062:	4640      	mov	r0, r8
 800f064:	4649      	mov	r1, r9
 800f066:	f7f1 fb83 	bl	8000770 <__aeabi_ddiv>
 800f06a:	f7f1 fd07 	bl	8000a7c <__aeabi_d2iz>
 800f06e:	4604      	mov	r4, r0
 800f070:	f7f1 f9ea 	bl	8000448 <__aeabi_i2d>
 800f074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f078:	f7f1 fa50 	bl	800051c <__aeabi_dmul>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4640      	mov	r0, r8
 800f082:	4649      	mov	r1, r9
 800f084:	f7f1 f892 	bl	80001ac <__aeabi_dsub>
 800f088:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800f08c:	f807 6b01 	strb.w	r6, [r7], #1
 800f090:	9e03      	ldr	r6, [sp, #12]
 800f092:	f8dd c020 	ldr.w	ip, [sp, #32]
 800f096:	1bbe      	subs	r6, r7, r6
 800f098:	45b4      	cmp	ip, r6
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	d136      	bne.n	800f10e <_dtoa_r+0x70e>
 800f0a0:	f7f1 f886 	bl	80001b0 <__adddf3>
 800f0a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0a8:	4680      	mov	r8, r0
 800f0aa:	4689      	mov	r9, r1
 800f0ac:	f7f1 fcc6 	bl	8000a3c <__aeabi_dcmpgt>
 800f0b0:	bb58      	cbnz	r0, 800f10a <_dtoa_r+0x70a>
 800f0b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	f7f1 fc97 	bl	80009ec <__aeabi_dcmpeq>
 800f0be:	b108      	cbz	r0, 800f0c4 <_dtoa_r+0x6c4>
 800f0c0:	07e1      	lsls	r1, r4, #31
 800f0c2:	d422      	bmi.n	800f10a <_dtoa_r+0x70a>
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	4659      	mov	r1, fp
 800f0c8:	f000 fae2 	bl	800f690 <_Bfree>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	703b      	strb	r3, [r7, #0]
 800f0d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f0d2:	f10a 0001 	add.w	r0, sl, #1
 800f0d6:	6018      	str	r0, [r3, #0]
 800f0d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f43f acde 	beq.w	800ea9c <_dtoa_r+0x9c>
 800f0e0:	601f      	str	r7, [r3, #0]
 800f0e2:	e4db      	b.n	800ea9c <_dtoa_r+0x9c>
 800f0e4:	4627      	mov	r7, r4
 800f0e6:	463b      	mov	r3, r7
 800f0e8:	461f      	mov	r7, r3
 800f0ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0ee:	2a39      	cmp	r2, #57	; 0x39
 800f0f0:	d107      	bne.n	800f102 <_dtoa_r+0x702>
 800f0f2:	9a03      	ldr	r2, [sp, #12]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d1f7      	bne.n	800f0e8 <_dtoa_r+0x6e8>
 800f0f8:	2230      	movs	r2, #48	; 0x30
 800f0fa:	9903      	ldr	r1, [sp, #12]
 800f0fc:	f108 0801 	add.w	r8, r8, #1
 800f100:	700a      	strb	r2, [r1, #0]
 800f102:	781a      	ldrb	r2, [r3, #0]
 800f104:	3201      	adds	r2, #1
 800f106:	701a      	strb	r2, [r3, #0]
 800f108:	e79e      	b.n	800f048 <_dtoa_r+0x648>
 800f10a:	46d0      	mov	r8, sl
 800f10c:	e7eb      	b.n	800f0e6 <_dtoa_r+0x6e6>
 800f10e:	2200      	movs	r2, #0
 800f110:	4b6e      	ldr	r3, [pc, #440]	; (800f2cc <_dtoa_r+0x8cc>)
 800f112:	f7f1 fa03 	bl	800051c <__aeabi_dmul>
 800f116:	2200      	movs	r2, #0
 800f118:	2300      	movs	r3, #0
 800f11a:	4680      	mov	r8, r0
 800f11c:	4689      	mov	r9, r1
 800f11e:	f7f1 fc65 	bl	80009ec <__aeabi_dcmpeq>
 800f122:	2800      	cmp	r0, #0
 800f124:	d09b      	beq.n	800f05e <_dtoa_r+0x65e>
 800f126:	e7cd      	b.n	800f0c4 <_dtoa_r+0x6c4>
 800f128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f12a:	2a00      	cmp	r2, #0
 800f12c:	f000 80d0 	beq.w	800f2d0 <_dtoa_r+0x8d0>
 800f130:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f132:	2a01      	cmp	r2, #1
 800f134:	f300 80ae 	bgt.w	800f294 <_dtoa_r+0x894>
 800f138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f13a:	2a00      	cmp	r2, #0
 800f13c:	f000 80a6 	beq.w	800f28c <_dtoa_r+0x88c>
 800f140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f144:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f146:	9f06      	ldr	r7, [sp, #24]
 800f148:	9a06      	ldr	r2, [sp, #24]
 800f14a:	2101      	movs	r1, #1
 800f14c:	441a      	add	r2, r3
 800f14e:	9206      	str	r2, [sp, #24]
 800f150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f152:	4628      	mov	r0, r5
 800f154:	441a      	add	r2, r3
 800f156:	9209      	str	r2, [sp, #36]	; 0x24
 800f158:	f000 fb50 	bl	800f7fc <__i2b>
 800f15c:	4606      	mov	r6, r0
 800f15e:	2f00      	cmp	r7, #0
 800f160:	dd0c      	ble.n	800f17c <_dtoa_r+0x77c>
 800f162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f164:	2b00      	cmp	r3, #0
 800f166:	dd09      	ble.n	800f17c <_dtoa_r+0x77c>
 800f168:	42bb      	cmp	r3, r7
 800f16a:	bfa8      	it	ge
 800f16c:	463b      	movge	r3, r7
 800f16e:	9a06      	ldr	r2, [sp, #24]
 800f170:	1aff      	subs	r7, r7, r3
 800f172:	1ad2      	subs	r2, r2, r3
 800f174:	9206      	str	r2, [sp, #24]
 800f176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	9309      	str	r3, [sp, #36]	; 0x24
 800f17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f17e:	b1f3      	cbz	r3, 800f1be <_dtoa_r+0x7be>
 800f180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 80a8 	beq.w	800f2d8 <_dtoa_r+0x8d8>
 800f188:	2c00      	cmp	r4, #0
 800f18a:	dd10      	ble.n	800f1ae <_dtoa_r+0x7ae>
 800f18c:	4631      	mov	r1, r6
 800f18e:	4622      	mov	r2, r4
 800f190:	4628      	mov	r0, r5
 800f192:	f000 fbf1 	bl	800f978 <__pow5mult>
 800f196:	465a      	mov	r2, fp
 800f198:	4601      	mov	r1, r0
 800f19a:	4606      	mov	r6, r0
 800f19c:	4628      	mov	r0, r5
 800f19e:	f000 fb43 	bl	800f828 <__multiply>
 800f1a2:	4680      	mov	r8, r0
 800f1a4:	4659      	mov	r1, fp
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f000 fa72 	bl	800f690 <_Bfree>
 800f1ac:	46c3      	mov	fp, r8
 800f1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1b0:	1b1a      	subs	r2, r3, r4
 800f1b2:	d004      	beq.n	800f1be <_dtoa_r+0x7be>
 800f1b4:	4659      	mov	r1, fp
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f000 fbde 	bl	800f978 <__pow5mult>
 800f1bc:	4683      	mov	fp, r0
 800f1be:	2101      	movs	r1, #1
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f000 fb1b 	bl	800f7fc <__i2b>
 800f1c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f340 8086 	ble.w	800f2dc <_dtoa_r+0x8dc>
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4601      	mov	r1, r0
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	f000 fbcf 	bl	800f978 <__pow5mult>
 800f1da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1dc:	4604      	mov	r4, r0
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	dd7f      	ble.n	800f2e2 <_dtoa_r+0x8e2>
 800f1e2:	f04f 0800 	mov.w	r8, #0
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1ec:	6918      	ldr	r0, [r3, #16]
 800f1ee:	f000 fab7 	bl	800f760 <__hi0bits>
 800f1f2:	f1c0 0020 	rsb	r0, r0, #32
 800f1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f8:	4418      	add	r0, r3
 800f1fa:	f010 001f 	ands.w	r0, r0, #31
 800f1fe:	f000 8092 	beq.w	800f326 <_dtoa_r+0x926>
 800f202:	f1c0 0320 	rsb	r3, r0, #32
 800f206:	2b04      	cmp	r3, #4
 800f208:	f340 808a 	ble.w	800f320 <_dtoa_r+0x920>
 800f20c:	f1c0 001c 	rsb	r0, r0, #28
 800f210:	9b06      	ldr	r3, [sp, #24]
 800f212:	4407      	add	r7, r0
 800f214:	4403      	add	r3, r0
 800f216:	9306      	str	r3, [sp, #24]
 800f218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f21a:	4403      	add	r3, r0
 800f21c:	9309      	str	r3, [sp, #36]	; 0x24
 800f21e:	9b06      	ldr	r3, [sp, #24]
 800f220:	2b00      	cmp	r3, #0
 800f222:	dd05      	ble.n	800f230 <_dtoa_r+0x830>
 800f224:	4659      	mov	r1, fp
 800f226:	461a      	mov	r2, r3
 800f228:	4628      	mov	r0, r5
 800f22a:	f000 fbff 	bl	800fa2c <__lshift>
 800f22e:	4683      	mov	fp, r0
 800f230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f232:	2b00      	cmp	r3, #0
 800f234:	dd05      	ble.n	800f242 <_dtoa_r+0x842>
 800f236:	4621      	mov	r1, r4
 800f238:	461a      	mov	r2, r3
 800f23a:	4628      	mov	r0, r5
 800f23c:	f000 fbf6 	bl	800fa2c <__lshift>
 800f240:	4604      	mov	r4, r0
 800f242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f244:	2b00      	cmp	r3, #0
 800f246:	d070      	beq.n	800f32a <_dtoa_r+0x92a>
 800f248:	4621      	mov	r1, r4
 800f24a:	4658      	mov	r0, fp
 800f24c:	f000 fc5e 	bl	800fb0c <__mcmp>
 800f250:	2800      	cmp	r0, #0
 800f252:	da6a      	bge.n	800f32a <_dtoa_r+0x92a>
 800f254:	2300      	movs	r3, #0
 800f256:	4659      	mov	r1, fp
 800f258:	220a      	movs	r2, #10
 800f25a:	4628      	mov	r0, r5
 800f25c:	f000 fa3a 	bl	800f6d4 <__multadd>
 800f260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f262:	4683      	mov	fp, r0
 800f264:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 8194 	beq.w	800f596 <_dtoa_r+0xb96>
 800f26e:	4631      	mov	r1, r6
 800f270:	2300      	movs	r3, #0
 800f272:	220a      	movs	r2, #10
 800f274:	4628      	mov	r0, r5
 800f276:	f000 fa2d 	bl	800f6d4 <__multadd>
 800f27a:	f1b9 0f00 	cmp.w	r9, #0
 800f27e:	4606      	mov	r6, r0
 800f280:	f300 8093 	bgt.w	800f3aa <_dtoa_r+0x9aa>
 800f284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f286:	2b02      	cmp	r3, #2
 800f288:	dc57      	bgt.n	800f33a <_dtoa_r+0x93a>
 800f28a:	e08e      	b.n	800f3aa <_dtoa_r+0x9aa>
 800f28c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f28e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f292:	e757      	b.n	800f144 <_dtoa_r+0x744>
 800f294:	9b08      	ldr	r3, [sp, #32]
 800f296:	1e5c      	subs	r4, r3, #1
 800f298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29a:	42a3      	cmp	r3, r4
 800f29c:	bfb7      	itett	lt
 800f29e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f2a0:	1b1c      	subge	r4, r3, r4
 800f2a2:	1ae2      	sublt	r2, r4, r3
 800f2a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f2a6:	bfbe      	ittt	lt
 800f2a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800f2aa:	189b      	addlt	r3, r3, r2
 800f2ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2ae:	9b08      	ldr	r3, [sp, #32]
 800f2b0:	bfb8      	it	lt
 800f2b2:	2400      	movlt	r4, #0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	bfbb      	ittet	lt
 800f2b8:	9b06      	ldrlt	r3, [sp, #24]
 800f2ba:	9a08      	ldrlt	r2, [sp, #32]
 800f2bc:	9f06      	ldrge	r7, [sp, #24]
 800f2be:	1a9f      	sublt	r7, r3, r2
 800f2c0:	bfac      	ite	ge
 800f2c2:	9b08      	ldrge	r3, [sp, #32]
 800f2c4:	2300      	movlt	r3, #0
 800f2c6:	e73f      	b.n	800f148 <_dtoa_r+0x748>
 800f2c8:	3fe00000 	.word	0x3fe00000
 800f2cc:	40240000 	.word	0x40240000
 800f2d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f2d2:	9f06      	ldr	r7, [sp, #24]
 800f2d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f2d6:	e742      	b.n	800f15e <_dtoa_r+0x75e>
 800f2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2da:	e76b      	b.n	800f1b4 <_dtoa_r+0x7b4>
 800f2dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	dc19      	bgt.n	800f316 <_dtoa_r+0x916>
 800f2e2:	9b04      	ldr	r3, [sp, #16]
 800f2e4:	b9bb      	cbnz	r3, 800f316 <_dtoa_r+0x916>
 800f2e6:	9b05      	ldr	r3, [sp, #20]
 800f2e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2ec:	b99b      	cbnz	r3, 800f316 <_dtoa_r+0x916>
 800f2ee:	9b05      	ldr	r3, [sp, #20]
 800f2f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2f4:	0d1b      	lsrs	r3, r3, #20
 800f2f6:	051b      	lsls	r3, r3, #20
 800f2f8:	b183      	cbz	r3, 800f31c <_dtoa_r+0x91c>
 800f2fa:	f04f 0801 	mov.w	r8, #1
 800f2fe:	9b06      	ldr	r3, [sp, #24]
 800f300:	3301      	adds	r3, #1
 800f302:	9306      	str	r3, [sp, #24]
 800f304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f306:	3301      	adds	r3, #1
 800f308:	9309      	str	r3, [sp, #36]	; 0x24
 800f30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f47f af6a 	bne.w	800f1e6 <_dtoa_r+0x7e6>
 800f312:	2001      	movs	r0, #1
 800f314:	e76f      	b.n	800f1f6 <_dtoa_r+0x7f6>
 800f316:	f04f 0800 	mov.w	r8, #0
 800f31a:	e7f6      	b.n	800f30a <_dtoa_r+0x90a>
 800f31c:	4698      	mov	r8, r3
 800f31e:	e7f4      	b.n	800f30a <_dtoa_r+0x90a>
 800f320:	f43f af7d 	beq.w	800f21e <_dtoa_r+0x81e>
 800f324:	4618      	mov	r0, r3
 800f326:	301c      	adds	r0, #28
 800f328:	e772      	b.n	800f210 <_dtoa_r+0x810>
 800f32a:	9b08      	ldr	r3, [sp, #32]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dc36      	bgt.n	800f39e <_dtoa_r+0x99e>
 800f330:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f332:	2b02      	cmp	r3, #2
 800f334:	dd33      	ble.n	800f39e <_dtoa_r+0x99e>
 800f336:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f33a:	f1b9 0f00 	cmp.w	r9, #0
 800f33e:	d10d      	bne.n	800f35c <_dtoa_r+0x95c>
 800f340:	4621      	mov	r1, r4
 800f342:	464b      	mov	r3, r9
 800f344:	2205      	movs	r2, #5
 800f346:	4628      	mov	r0, r5
 800f348:	f000 f9c4 	bl	800f6d4 <__multadd>
 800f34c:	4601      	mov	r1, r0
 800f34e:	4604      	mov	r4, r0
 800f350:	4658      	mov	r0, fp
 800f352:	f000 fbdb 	bl	800fb0c <__mcmp>
 800f356:	2800      	cmp	r0, #0
 800f358:	f73f adb8 	bgt.w	800eecc <_dtoa_r+0x4cc>
 800f35c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f35e:	9f03      	ldr	r7, [sp, #12]
 800f360:	ea6f 0a03 	mvn.w	sl, r3
 800f364:	f04f 0800 	mov.w	r8, #0
 800f368:	4621      	mov	r1, r4
 800f36a:	4628      	mov	r0, r5
 800f36c:	f000 f990 	bl	800f690 <_Bfree>
 800f370:	2e00      	cmp	r6, #0
 800f372:	f43f aea7 	beq.w	800f0c4 <_dtoa_r+0x6c4>
 800f376:	f1b8 0f00 	cmp.w	r8, #0
 800f37a:	d005      	beq.n	800f388 <_dtoa_r+0x988>
 800f37c:	45b0      	cmp	r8, r6
 800f37e:	d003      	beq.n	800f388 <_dtoa_r+0x988>
 800f380:	4641      	mov	r1, r8
 800f382:	4628      	mov	r0, r5
 800f384:	f000 f984 	bl	800f690 <_Bfree>
 800f388:	4631      	mov	r1, r6
 800f38a:	4628      	mov	r0, r5
 800f38c:	f000 f980 	bl	800f690 <_Bfree>
 800f390:	e698      	b.n	800f0c4 <_dtoa_r+0x6c4>
 800f392:	2400      	movs	r4, #0
 800f394:	4626      	mov	r6, r4
 800f396:	e7e1      	b.n	800f35c <_dtoa_r+0x95c>
 800f398:	46c2      	mov	sl, r8
 800f39a:	4626      	mov	r6, r4
 800f39c:	e596      	b.n	800eecc <_dtoa_r+0x4cc>
 800f39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f000 80fd 	beq.w	800f5a4 <_dtoa_r+0xba4>
 800f3aa:	2f00      	cmp	r7, #0
 800f3ac:	dd05      	ble.n	800f3ba <_dtoa_r+0x9ba>
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	463a      	mov	r2, r7
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	f000 fb3a 	bl	800fa2c <__lshift>
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	f1b8 0f00 	cmp.w	r8, #0
 800f3be:	d05c      	beq.n	800f47a <_dtoa_r+0xa7a>
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	6871      	ldr	r1, [r6, #4]
 800f3c4:	f000 f924 	bl	800f610 <_Balloc>
 800f3c8:	4607      	mov	r7, r0
 800f3ca:	b928      	cbnz	r0, 800f3d8 <_dtoa_r+0x9d8>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f3d2:	4b7f      	ldr	r3, [pc, #508]	; (800f5d0 <_dtoa_r+0xbd0>)
 800f3d4:	f7ff bb28 	b.w	800ea28 <_dtoa_r+0x28>
 800f3d8:	6932      	ldr	r2, [r6, #16]
 800f3da:	f106 010c 	add.w	r1, r6, #12
 800f3de:	3202      	adds	r2, #2
 800f3e0:	0092      	lsls	r2, r2, #2
 800f3e2:	300c      	adds	r0, #12
 800f3e4:	f7fe fdc6 	bl	800df74 <memcpy>
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	4639      	mov	r1, r7
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f000 fb1d 	bl	800fa2c <__lshift>
 800f3f2:	46b0      	mov	r8, r6
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	9b03      	ldr	r3, [sp, #12]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	9308      	str	r3, [sp, #32]
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	444b      	add	r3, r9
 800f400:	930a      	str	r3, [sp, #40]	; 0x28
 800f402:	9b04      	ldr	r3, [sp, #16]
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	9309      	str	r3, [sp, #36]	; 0x24
 800f40a:	9b08      	ldr	r3, [sp, #32]
 800f40c:	4621      	mov	r1, r4
 800f40e:	3b01      	subs	r3, #1
 800f410:	4658      	mov	r0, fp
 800f412:	9304      	str	r3, [sp, #16]
 800f414:	f7ff fa67 	bl	800e8e6 <quorem>
 800f418:	4603      	mov	r3, r0
 800f41a:	4641      	mov	r1, r8
 800f41c:	3330      	adds	r3, #48	; 0x30
 800f41e:	9006      	str	r0, [sp, #24]
 800f420:	4658      	mov	r0, fp
 800f422:	930b      	str	r3, [sp, #44]	; 0x2c
 800f424:	f000 fb72 	bl	800fb0c <__mcmp>
 800f428:	4632      	mov	r2, r6
 800f42a:	4681      	mov	r9, r0
 800f42c:	4621      	mov	r1, r4
 800f42e:	4628      	mov	r0, r5
 800f430:	f000 fb88 	bl	800fb44 <__mdiff>
 800f434:	68c2      	ldr	r2, [r0, #12]
 800f436:	4607      	mov	r7, r0
 800f438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f43a:	bb02      	cbnz	r2, 800f47e <_dtoa_r+0xa7e>
 800f43c:	4601      	mov	r1, r0
 800f43e:	4658      	mov	r0, fp
 800f440:	f000 fb64 	bl	800fb0c <__mcmp>
 800f444:	4602      	mov	r2, r0
 800f446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f448:	4639      	mov	r1, r7
 800f44a:	4628      	mov	r0, r5
 800f44c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f450:	f000 f91e 	bl	800f690 <_Bfree>
 800f454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f458:	9f08      	ldr	r7, [sp, #32]
 800f45a:	ea43 0102 	orr.w	r1, r3, r2
 800f45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f460:	430b      	orrs	r3, r1
 800f462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f464:	d10d      	bne.n	800f482 <_dtoa_r+0xa82>
 800f466:	2b39      	cmp	r3, #57	; 0x39
 800f468:	d029      	beq.n	800f4be <_dtoa_r+0xabe>
 800f46a:	f1b9 0f00 	cmp.w	r9, #0
 800f46e:	dd01      	ble.n	800f474 <_dtoa_r+0xa74>
 800f470:	9b06      	ldr	r3, [sp, #24]
 800f472:	3331      	adds	r3, #49	; 0x31
 800f474:	9a04      	ldr	r2, [sp, #16]
 800f476:	7013      	strb	r3, [r2, #0]
 800f478:	e776      	b.n	800f368 <_dtoa_r+0x968>
 800f47a:	4630      	mov	r0, r6
 800f47c:	e7b9      	b.n	800f3f2 <_dtoa_r+0x9f2>
 800f47e:	2201      	movs	r2, #1
 800f480:	e7e2      	b.n	800f448 <_dtoa_r+0xa48>
 800f482:	f1b9 0f00 	cmp.w	r9, #0
 800f486:	db06      	blt.n	800f496 <_dtoa_r+0xa96>
 800f488:	9922      	ldr	r1, [sp, #136]	; 0x88
 800f48a:	ea41 0909 	orr.w	r9, r1, r9
 800f48e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f490:	ea59 0101 	orrs.w	r1, r9, r1
 800f494:	d120      	bne.n	800f4d8 <_dtoa_r+0xad8>
 800f496:	2a00      	cmp	r2, #0
 800f498:	ddec      	ble.n	800f474 <_dtoa_r+0xa74>
 800f49a:	4659      	mov	r1, fp
 800f49c:	2201      	movs	r2, #1
 800f49e:	4628      	mov	r0, r5
 800f4a0:	9308      	str	r3, [sp, #32]
 800f4a2:	f000 fac3 	bl	800fa2c <__lshift>
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4683      	mov	fp, r0
 800f4aa:	f000 fb2f 	bl	800fb0c <__mcmp>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	9b08      	ldr	r3, [sp, #32]
 800f4b2:	dc02      	bgt.n	800f4ba <_dtoa_r+0xaba>
 800f4b4:	d1de      	bne.n	800f474 <_dtoa_r+0xa74>
 800f4b6:	07da      	lsls	r2, r3, #31
 800f4b8:	d5dc      	bpl.n	800f474 <_dtoa_r+0xa74>
 800f4ba:	2b39      	cmp	r3, #57	; 0x39
 800f4bc:	d1d8      	bne.n	800f470 <_dtoa_r+0xa70>
 800f4be:	2339      	movs	r3, #57	; 0x39
 800f4c0:	9a04      	ldr	r2, [sp, #16]
 800f4c2:	7013      	strb	r3, [r2, #0]
 800f4c4:	463b      	mov	r3, r7
 800f4c6:	461f      	mov	r7, r3
 800f4c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	2a39      	cmp	r2, #57	; 0x39
 800f4d0:	d050      	beq.n	800f574 <_dtoa_r+0xb74>
 800f4d2:	3201      	adds	r2, #1
 800f4d4:	701a      	strb	r2, [r3, #0]
 800f4d6:	e747      	b.n	800f368 <_dtoa_r+0x968>
 800f4d8:	2a00      	cmp	r2, #0
 800f4da:	dd03      	ble.n	800f4e4 <_dtoa_r+0xae4>
 800f4dc:	2b39      	cmp	r3, #57	; 0x39
 800f4de:	d0ee      	beq.n	800f4be <_dtoa_r+0xabe>
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	e7c7      	b.n	800f474 <_dtoa_r+0xa74>
 800f4e4:	9a08      	ldr	r2, [sp, #32]
 800f4e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f4e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f4ec:	428a      	cmp	r2, r1
 800f4ee:	d02a      	beq.n	800f546 <_dtoa_r+0xb46>
 800f4f0:	4659      	mov	r1, fp
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	220a      	movs	r2, #10
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f000 f8ec 	bl	800f6d4 <__multadd>
 800f4fc:	45b0      	cmp	r8, r6
 800f4fe:	4683      	mov	fp, r0
 800f500:	f04f 0300 	mov.w	r3, #0
 800f504:	f04f 020a 	mov.w	r2, #10
 800f508:	4641      	mov	r1, r8
 800f50a:	4628      	mov	r0, r5
 800f50c:	d107      	bne.n	800f51e <_dtoa_r+0xb1e>
 800f50e:	f000 f8e1 	bl	800f6d4 <__multadd>
 800f512:	4680      	mov	r8, r0
 800f514:	4606      	mov	r6, r0
 800f516:	9b08      	ldr	r3, [sp, #32]
 800f518:	3301      	adds	r3, #1
 800f51a:	9308      	str	r3, [sp, #32]
 800f51c:	e775      	b.n	800f40a <_dtoa_r+0xa0a>
 800f51e:	f000 f8d9 	bl	800f6d4 <__multadd>
 800f522:	4631      	mov	r1, r6
 800f524:	4680      	mov	r8, r0
 800f526:	2300      	movs	r3, #0
 800f528:	220a      	movs	r2, #10
 800f52a:	4628      	mov	r0, r5
 800f52c:	f000 f8d2 	bl	800f6d4 <__multadd>
 800f530:	4606      	mov	r6, r0
 800f532:	e7f0      	b.n	800f516 <_dtoa_r+0xb16>
 800f534:	f1b9 0f00 	cmp.w	r9, #0
 800f538:	bfcc      	ite	gt
 800f53a:	464f      	movgt	r7, r9
 800f53c:	2701      	movle	r7, #1
 800f53e:	f04f 0800 	mov.w	r8, #0
 800f542:	9a03      	ldr	r2, [sp, #12]
 800f544:	4417      	add	r7, r2
 800f546:	4659      	mov	r1, fp
 800f548:	2201      	movs	r2, #1
 800f54a:	4628      	mov	r0, r5
 800f54c:	9308      	str	r3, [sp, #32]
 800f54e:	f000 fa6d 	bl	800fa2c <__lshift>
 800f552:	4621      	mov	r1, r4
 800f554:	4683      	mov	fp, r0
 800f556:	f000 fad9 	bl	800fb0c <__mcmp>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	dcb2      	bgt.n	800f4c4 <_dtoa_r+0xac4>
 800f55e:	d102      	bne.n	800f566 <_dtoa_r+0xb66>
 800f560:	9b08      	ldr	r3, [sp, #32]
 800f562:	07db      	lsls	r3, r3, #31
 800f564:	d4ae      	bmi.n	800f4c4 <_dtoa_r+0xac4>
 800f566:	463b      	mov	r3, r7
 800f568:	461f      	mov	r7, r3
 800f56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f56e:	2a30      	cmp	r2, #48	; 0x30
 800f570:	d0fa      	beq.n	800f568 <_dtoa_r+0xb68>
 800f572:	e6f9      	b.n	800f368 <_dtoa_r+0x968>
 800f574:	9a03      	ldr	r2, [sp, #12]
 800f576:	429a      	cmp	r2, r3
 800f578:	d1a5      	bne.n	800f4c6 <_dtoa_r+0xac6>
 800f57a:	2331      	movs	r3, #49	; 0x31
 800f57c:	f10a 0a01 	add.w	sl, sl, #1
 800f580:	e779      	b.n	800f476 <_dtoa_r+0xa76>
 800f582:	4b14      	ldr	r3, [pc, #80]	; (800f5d4 <_dtoa_r+0xbd4>)
 800f584:	f7ff baa8 	b.w	800ead8 <_dtoa_r+0xd8>
 800f588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f47f aa81 	bne.w	800ea92 <_dtoa_r+0x92>
 800f590:	4b11      	ldr	r3, [pc, #68]	; (800f5d8 <_dtoa_r+0xbd8>)
 800f592:	f7ff baa1 	b.w	800ead8 <_dtoa_r+0xd8>
 800f596:	f1b9 0f00 	cmp.w	r9, #0
 800f59a:	dc03      	bgt.n	800f5a4 <_dtoa_r+0xba4>
 800f59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f59e:	2b02      	cmp	r3, #2
 800f5a0:	f73f aecb 	bgt.w	800f33a <_dtoa_r+0x93a>
 800f5a4:	9f03      	ldr	r7, [sp, #12]
 800f5a6:	4621      	mov	r1, r4
 800f5a8:	4658      	mov	r0, fp
 800f5aa:	f7ff f99c 	bl	800e8e6 <quorem>
 800f5ae:	9a03      	ldr	r2, [sp, #12]
 800f5b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f5b4:	f807 3b01 	strb.w	r3, [r7], #1
 800f5b8:	1aba      	subs	r2, r7, r2
 800f5ba:	4591      	cmp	r9, r2
 800f5bc:	ddba      	ble.n	800f534 <_dtoa_r+0xb34>
 800f5be:	4659      	mov	r1, fp
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	220a      	movs	r2, #10
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	f000 f885 	bl	800f6d4 <__multadd>
 800f5ca:	4683      	mov	fp, r0
 800f5cc:	e7eb      	b.n	800f5a6 <_dtoa_r+0xba6>
 800f5ce:	bf00      	nop
 800f5d0:	08010f7f 	.word	0x08010f7f
 800f5d4:	08010edc 	.word	0x08010edc
 800f5d8:	08010f00 	.word	0x08010f00

0800f5dc <_localeconv_r>:
 800f5dc:	4800      	ldr	r0, [pc, #0]	; (800f5e0 <_localeconv_r+0x4>)
 800f5de:	4770      	bx	lr
 800f5e0:	200002fc 	.word	0x200002fc

0800f5e4 <malloc>:
 800f5e4:	4b02      	ldr	r3, [pc, #8]	; (800f5f0 <malloc+0xc>)
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	6818      	ldr	r0, [r3, #0]
 800f5ea:	f000 bc0f 	b.w	800fe0c <_malloc_r>
 800f5ee:	bf00      	nop
 800f5f0:	200001a8 	.word	0x200001a8

0800f5f4 <memchr>:
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	b510      	push	{r4, lr}
 800f5f8:	b2c9      	uxtb	r1, r1
 800f5fa:	4402      	add	r2, r0
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	4618      	mov	r0, r3
 800f600:	d101      	bne.n	800f606 <memchr+0x12>
 800f602:	2000      	movs	r0, #0
 800f604:	e003      	b.n	800f60e <memchr+0x1a>
 800f606:	7804      	ldrb	r4, [r0, #0]
 800f608:	3301      	adds	r3, #1
 800f60a:	428c      	cmp	r4, r1
 800f60c:	d1f6      	bne.n	800f5fc <memchr+0x8>
 800f60e:	bd10      	pop	{r4, pc}

0800f610 <_Balloc>:
 800f610:	b570      	push	{r4, r5, r6, lr}
 800f612:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f614:	4604      	mov	r4, r0
 800f616:	460d      	mov	r5, r1
 800f618:	b976      	cbnz	r6, 800f638 <_Balloc+0x28>
 800f61a:	2010      	movs	r0, #16
 800f61c:	f7ff ffe2 	bl	800f5e4 <malloc>
 800f620:	4602      	mov	r2, r0
 800f622:	6260      	str	r0, [r4, #36]	; 0x24
 800f624:	b920      	cbnz	r0, 800f630 <_Balloc+0x20>
 800f626:	2166      	movs	r1, #102	; 0x66
 800f628:	4b17      	ldr	r3, [pc, #92]	; (800f688 <_Balloc+0x78>)
 800f62a:	4818      	ldr	r0, [pc, #96]	; (800f68c <_Balloc+0x7c>)
 800f62c:	f000 fdce 	bl	80101cc <__assert_func>
 800f630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f634:	6006      	str	r6, [r0, #0]
 800f636:	60c6      	str	r6, [r0, #12]
 800f638:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f63a:	68f3      	ldr	r3, [r6, #12]
 800f63c:	b183      	cbz	r3, 800f660 <_Balloc+0x50>
 800f63e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f646:	b9b8      	cbnz	r0, 800f678 <_Balloc+0x68>
 800f648:	2101      	movs	r1, #1
 800f64a:	fa01 f605 	lsl.w	r6, r1, r5
 800f64e:	1d72      	adds	r2, r6, #5
 800f650:	4620      	mov	r0, r4
 800f652:	0092      	lsls	r2, r2, #2
 800f654:	f000 fb5e 	bl	800fd14 <_calloc_r>
 800f658:	b160      	cbz	r0, 800f674 <_Balloc+0x64>
 800f65a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f65e:	e00e      	b.n	800f67e <_Balloc+0x6e>
 800f660:	2221      	movs	r2, #33	; 0x21
 800f662:	2104      	movs	r1, #4
 800f664:	4620      	mov	r0, r4
 800f666:	f000 fb55 	bl	800fd14 <_calloc_r>
 800f66a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f66c:	60f0      	str	r0, [r6, #12]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1e4      	bne.n	800f63e <_Balloc+0x2e>
 800f674:	2000      	movs	r0, #0
 800f676:	bd70      	pop	{r4, r5, r6, pc}
 800f678:	6802      	ldr	r2, [r0, #0]
 800f67a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f67e:	2300      	movs	r3, #0
 800f680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f684:	e7f7      	b.n	800f676 <_Balloc+0x66>
 800f686:	bf00      	nop
 800f688:	08010f0d 	.word	0x08010f0d
 800f68c:	08010f90 	.word	0x08010f90

0800f690 <_Bfree>:
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f694:	4605      	mov	r5, r0
 800f696:	460c      	mov	r4, r1
 800f698:	b976      	cbnz	r6, 800f6b8 <_Bfree+0x28>
 800f69a:	2010      	movs	r0, #16
 800f69c:	f7ff ffa2 	bl	800f5e4 <malloc>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	6268      	str	r0, [r5, #36]	; 0x24
 800f6a4:	b920      	cbnz	r0, 800f6b0 <_Bfree+0x20>
 800f6a6:	218a      	movs	r1, #138	; 0x8a
 800f6a8:	4b08      	ldr	r3, [pc, #32]	; (800f6cc <_Bfree+0x3c>)
 800f6aa:	4809      	ldr	r0, [pc, #36]	; (800f6d0 <_Bfree+0x40>)
 800f6ac:	f000 fd8e 	bl	80101cc <__assert_func>
 800f6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6b4:	6006      	str	r6, [r0, #0]
 800f6b6:	60c6      	str	r6, [r0, #12]
 800f6b8:	b13c      	cbz	r4, 800f6ca <_Bfree+0x3a>
 800f6ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f6bc:	6862      	ldr	r2, [r4, #4]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6c4:	6021      	str	r1, [r4, #0]
 800f6c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6ca:	bd70      	pop	{r4, r5, r6, pc}
 800f6cc:	08010f0d 	.word	0x08010f0d
 800f6d0:	08010f90 	.word	0x08010f90

0800f6d4 <__multadd>:
 800f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6d8:	4607      	mov	r7, r0
 800f6da:	460c      	mov	r4, r1
 800f6dc:	461e      	mov	r6, r3
 800f6de:	2000      	movs	r0, #0
 800f6e0:	690d      	ldr	r5, [r1, #16]
 800f6e2:	f101 0c14 	add.w	ip, r1, #20
 800f6e6:	f8dc 3000 	ldr.w	r3, [ip]
 800f6ea:	3001      	adds	r0, #1
 800f6ec:	b299      	uxth	r1, r3
 800f6ee:	fb02 6101 	mla	r1, r2, r1, r6
 800f6f2:	0c1e      	lsrs	r6, r3, #16
 800f6f4:	0c0b      	lsrs	r3, r1, #16
 800f6f6:	fb02 3306 	mla	r3, r2, r6, r3
 800f6fa:	b289      	uxth	r1, r1
 800f6fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f700:	4285      	cmp	r5, r0
 800f702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f706:	f84c 1b04 	str.w	r1, [ip], #4
 800f70a:	dcec      	bgt.n	800f6e6 <__multadd+0x12>
 800f70c:	b30e      	cbz	r6, 800f752 <__multadd+0x7e>
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	42ab      	cmp	r3, r5
 800f712:	dc19      	bgt.n	800f748 <__multadd+0x74>
 800f714:	6861      	ldr	r1, [r4, #4]
 800f716:	4638      	mov	r0, r7
 800f718:	3101      	adds	r1, #1
 800f71a:	f7ff ff79 	bl	800f610 <_Balloc>
 800f71e:	4680      	mov	r8, r0
 800f720:	b928      	cbnz	r0, 800f72e <__multadd+0x5a>
 800f722:	4602      	mov	r2, r0
 800f724:	21b5      	movs	r1, #181	; 0xb5
 800f726:	4b0c      	ldr	r3, [pc, #48]	; (800f758 <__multadd+0x84>)
 800f728:	480c      	ldr	r0, [pc, #48]	; (800f75c <__multadd+0x88>)
 800f72a:	f000 fd4f 	bl	80101cc <__assert_func>
 800f72e:	6922      	ldr	r2, [r4, #16]
 800f730:	f104 010c 	add.w	r1, r4, #12
 800f734:	3202      	adds	r2, #2
 800f736:	0092      	lsls	r2, r2, #2
 800f738:	300c      	adds	r0, #12
 800f73a:	f7fe fc1b 	bl	800df74 <memcpy>
 800f73e:	4621      	mov	r1, r4
 800f740:	4638      	mov	r0, r7
 800f742:	f7ff ffa5 	bl	800f690 <_Bfree>
 800f746:	4644      	mov	r4, r8
 800f748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f74c:	3501      	adds	r5, #1
 800f74e:	615e      	str	r6, [r3, #20]
 800f750:	6125      	str	r5, [r4, #16]
 800f752:	4620      	mov	r0, r4
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	08010f7f 	.word	0x08010f7f
 800f75c:	08010f90 	.word	0x08010f90

0800f760 <__hi0bits>:
 800f760:	0c02      	lsrs	r2, r0, #16
 800f762:	0412      	lsls	r2, r2, #16
 800f764:	4603      	mov	r3, r0
 800f766:	b9ca      	cbnz	r2, 800f79c <__hi0bits+0x3c>
 800f768:	0403      	lsls	r3, r0, #16
 800f76a:	2010      	movs	r0, #16
 800f76c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f770:	bf04      	itt	eq
 800f772:	021b      	lsleq	r3, r3, #8
 800f774:	3008      	addeq	r0, #8
 800f776:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f77a:	bf04      	itt	eq
 800f77c:	011b      	lsleq	r3, r3, #4
 800f77e:	3004      	addeq	r0, #4
 800f780:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f784:	bf04      	itt	eq
 800f786:	009b      	lsleq	r3, r3, #2
 800f788:	3002      	addeq	r0, #2
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	db05      	blt.n	800f79a <__hi0bits+0x3a>
 800f78e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f792:	f100 0001 	add.w	r0, r0, #1
 800f796:	bf08      	it	eq
 800f798:	2020      	moveq	r0, #32
 800f79a:	4770      	bx	lr
 800f79c:	2000      	movs	r0, #0
 800f79e:	e7e5      	b.n	800f76c <__hi0bits+0xc>

0800f7a0 <__lo0bits>:
 800f7a0:	6803      	ldr	r3, [r0, #0]
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	f013 0007 	ands.w	r0, r3, #7
 800f7a8:	d00b      	beq.n	800f7c2 <__lo0bits+0x22>
 800f7aa:	07d9      	lsls	r1, r3, #31
 800f7ac:	d421      	bmi.n	800f7f2 <__lo0bits+0x52>
 800f7ae:	0798      	lsls	r0, r3, #30
 800f7b0:	bf49      	itett	mi
 800f7b2:	085b      	lsrmi	r3, r3, #1
 800f7b4:	089b      	lsrpl	r3, r3, #2
 800f7b6:	2001      	movmi	r0, #1
 800f7b8:	6013      	strmi	r3, [r2, #0]
 800f7ba:	bf5c      	itt	pl
 800f7bc:	2002      	movpl	r0, #2
 800f7be:	6013      	strpl	r3, [r2, #0]
 800f7c0:	4770      	bx	lr
 800f7c2:	b299      	uxth	r1, r3
 800f7c4:	b909      	cbnz	r1, 800f7ca <__lo0bits+0x2a>
 800f7c6:	2010      	movs	r0, #16
 800f7c8:	0c1b      	lsrs	r3, r3, #16
 800f7ca:	b2d9      	uxtb	r1, r3
 800f7cc:	b909      	cbnz	r1, 800f7d2 <__lo0bits+0x32>
 800f7ce:	3008      	adds	r0, #8
 800f7d0:	0a1b      	lsrs	r3, r3, #8
 800f7d2:	0719      	lsls	r1, r3, #28
 800f7d4:	bf04      	itt	eq
 800f7d6:	091b      	lsreq	r3, r3, #4
 800f7d8:	3004      	addeq	r0, #4
 800f7da:	0799      	lsls	r1, r3, #30
 800f7dc:	bf04      	itt	eq
 800f7de:	089b      	lsreq	r3, r3, #2
 800f7e0:	3002      	addeq	r0, #2
 800f7e2:	07d9      	lsls	r1, r3, #31
 800f7e4:	d403      	bmi.n	800f7ee <__lo0bits+0x4e>
 800f7e6:	085b      	lsrs	r3, r3, #1
 800f7e8:	f100 0001 	add.w	r0, r0, #1
 800f7ec:	d003      	beq.n	800f7f6 <__lo0bits+0x56>
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	4770      	bx	lr
 800f7f2:	2000      	movs	r0, #0
 800f7f4:	4770      	bx	lr
 800f7f6:	2020      	movs	r0, #32
 800f7f8:	4770      	bx	lr
	...

0800f7fc <__i2b>:
 800f7fc:	b510      	push	{r4, lr}
 800f7fe:	460c      	mov	r4, r1
 800f800:	2101      	movs	r1, #1
 800f802:	f7ff ff05 	bl	800f610 <_Balloc>
 800f806:	4602      	mov	r2, r0
 800f808:	b928      	cbnz	r0, 800f816 <__i2b+0x1a>
 800f80a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f80e:	4b04      	ldr	r3, [pc, #16]	; (800f820 <__i2b+0x24>)
 800f810:	4804      	ldr	r0, [pc, #16]	; (800f824 <__i2b+0x28>)
 800f812:	f000 fcdb 	bl	80101cc <__assert_func>
 800f816:	2301      	movs	r3, #1
 800f818:	6144      	str	r4, [r0, #20]
 800f81a:	6103      	str	r3, [r0, #16]
 800f81c:	bd10      	pop	{r4, pc}
 800f81e:	bf00      	nop
 800f820:	08010f7f 	.word	0x08010f7f
 800f824:	08010f90 	.word	0x08010f90

0800f828 <__multiply>:
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	4691      	mov	r9, r2
 800f82e:	690a      	ldr	r2, [r1, #16]
 800f830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f834:	460c      	mov	r4, r1
 800f836:	429a      	cmp	r2, r3
 800f838:	bfbe      	ittt	lt
 800f83a:	460b      	movlt	r3, r1
 800f83c:	464c      	movlt	r4, r9
 800f83e:	4699      	movlt	r9, r3
 800f840:	6927      	ldr	r7, [r4, #16]
 800f842:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	6861      	ldr	r1, [r4, #4]
 800f84a:	eb07 060a 	add.w	r6, r7, sl
 800f84e:	42b3      	cmp	r3, r6
 800f850:	b085      	sub	sp, #20
 800f852:	bfb8      	it	lt
 800f854:	3101      	addlt	r1, #1
 800f856:	f7ff fedb 	bl	800f610 <_Balloc>
 800f85a:	b930      	cbnz	r0, 800f86a <__multiply+0x42>
 800f85c:	4602      	mov	r2, r0
 800f85e:	f240 115d 	movw	r1, #349	; 0x15d
 800f862:	4b43      	ldr	r3, [pc, #268]	; (800f970 <__multiply+0x148>)
 800f864:	4843      	ldr	r0, [pc, #268]	; (800f974 <__multiply+0x14c>)
 800f866:	f000 fcb1 	bl	80101cc <__assert_func>
 800f86a:	f100 0514 	add.w	r5, r0, #20
 800f86e:	462b      	mov	r3, r5
 800f870:	2200      	movs	r2, #0
 800f872:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f876:	4543      	cmp	r3, r8
 800f878:	d321      	bcc.n	800f8be <__multiply+0x96>
 800f87a:	f104 0314 	add.w	r3, r4, #20
 800f87e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f882:	f109 0314 	add.w	r3, r9, #20
 800f886:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f88a:	9202      	str	r2, [sp, #8]
 800f88c:	1b3a      	subs	r2, r7, r4
 800f88e:	3a15      	subs	r2, #21
 800f890:	f022 0203 	bic.w	r2, r2, #3
 800f894:	3204      	adds	r2, #4
 800f896:	f104 0115 	add.w	r1, r4, #21
 800f89a:	428f      	cmp	r7, r1
 800f89c:	bf38      	it	cc
 800f89e:	2204      	movcc	r2, #4
 800f8a0:	9201      	str	r2, [sp, #4]
 800f8a2:	9a02      	ldr	r2, [sp, #8]
 800f8a4:	9303      	str	r3, [sp, #12]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d80c      	bhi.n	800f8c4 <__multiply+0x9c>
 800f8aa:	2e00      	cmp	r6, #0
 800f8ac:	dd03      	ble.n	800f8b6 <__multiply+0x8e>
 800f8ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d059      	beq.n	800f96a <__multiply+0x142>
 800f8b6:	6106      	str	r6, [r0, #16]
 800f8b8:	b005      	add	sp, #20
 800f8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8be:	f843 2b04 	str.w	r2, [r3], #4
 800f8c2:	e7d8      	b.n	800f876 <__multiply+0x4e>
 800f8c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8c8:	f1ba 0f00 	cmp.w	sl, #0
 800f8cc:	d023      	beq.n	800f916 <__multiply+0xee>
 800f8ce:	46a9      	mov	r9, r5
 800f8d0:	f04f 0c00 	mov.w	ip, #0
 800f8d4:	f104 0e14 	add.w	lr, r4, #20
 800f8d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f8dc:	f8d9 1000 	ldr.w	r1, [r9]
 800f8e0:	fa1f fb82 	uxth.w	fp, r2
 800f8e4:	b289      	uxth	r1, r1
 800f8e6:	fb0a 110b 	mla	r1, sl, fp, r1
 800f8ea:	4461      	add	r1, ip
 800f8ec:	f8d9 c000 	ldr.w	ip, [r9]
 800f8f0:	0c12      	lsrs	r2, r2, #16
 800f8f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800f8f6:	fb0a c202 	mla	r2, sl, r2, ip
 800f8fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f8fe:	b289      	uxth	r1, r1
 800f900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f904:	4577      	cmp	r7, lr
 800f906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f90a:	f849 1b04 	str.w	r1, [r9], #4
 800f90e:	d8e3      	bhi.n	800f8d8 <__multiply+0xb0>
 800f910:	9a01      	ldr	r2, [sp, #4]
 800f912:	f845 c002 	str.w	ip, [r5, r2]
 800f916:	9a03      	ldr	r2, [sp, #12]
 800f918:	3304      	adds	r3, #4
 800f91a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f91e:	f1b9 0f00 	cmp.w	r9, #0
 800f922:	d020      	beq.n	800f966 <__multiply+0x13e>
 800f924:	46ae      	mov	lr, r5
 800f926:	f04f 0a00 	mov.w	sl, #0
 800f92a:	6829      	ldr	r1, [r5, #0]
 800f92c:	f104 0c14 	add.w	ip, r4, #20
 800f930:	f8bc b000 	ldrh.w	fp, [ip]
 800f934:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f938:	b289      	uxth	r1, r1
 800f93a:	fb09 220b 	mla	r2, r9, fp, r2
 800f93e:	4492      	add	sl, r2
 800f940:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f944:	f84e 1b04 	str.w	r1, [lr], #4
 800f948:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f94c:	f8be 1000 	ldrh.w	r1, [lr]
 800f950:	0c12      	lsrs	r2, r2, #16
 800f952:	fb09 1102 	mla	r1, r9, r2, r1
 800f956:	4567      	cmp	r7, ip
 800f958:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f95c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f960:	d8e6      	bhi.n	800f930 <__multiply+0x108>
 800f962:	9a01      	ldr	r2, [sp, #4]
 800f964:	50a9      	str	r1, [r5, r2]
 800f966:	3504      	adds	r5, #4
 800f968:	e79b      	b.n	800f8a2 <__multiply+0x7a>
 800f96a:	3e01      	subs	r6, #1
 800f96c:	e79d      	b.n	800f8aa <__multiply+0x82>
 800f96e:	bf00      	nop
 800f970:	08010f7f 	.word	0x08010f7f
 800f974:	08010f90 	.word	0x08010f90

0800f978 <__pow5mult>:
 800f978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f97c:	4615      	mov	r5, r2
 800f97e:	f012 0203 	ands.w	r2, r2, #3
 800f982:	4606      	mov	r6, r0
 800f984:	460f      	mov	r7, r1
 800f986:	d007      	beq.n	800f998 <__pow5mult+0x20>
 800f988:	4c25      	ldr	r4, [pc, #148]	; (800fa20 <__pow5mult+0xa8>)
 800f98a:	3a01      	subs	r2, #1
 800f98c:	2300      	movs	r3, #0
 800f98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f992:	f7ff fe9f 	bl	800f6d4 <__multadd>
 800f996:	4607      	mov	r7, r0
 800f998:	10ad      	asrs	r5, r5, #2
 800f99a:	d03d      	beq.n	800fa18 <__pow5mult+0xa0>
 800f99c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f99e:	b97c      	cbnz	r4, 800f9c0 <__pow5mult+0x48>
 800f9a0:	2010      	movs	r0, #16
 800f9a2:	f7ff fe1f 	bl	800f5e4 <malloc>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	6270      	str	r0, [r6, #36]	; 0x24
 800f9aa:	b928      	cbnz	r0, 800f9b8 <__pow5mult+0x40>
 800f9ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f9b0:	4b1c      	ldr	r3, [pc, #112]	; (800fa24 <__pow5mult+0xac>)
 800f9b2:	481d      	ldr	r0, [pc, #116]	; (800fa28 <__pow5mult+0xb0>)
 800f9b4:	f000 fc0a 	bl	80101cc <__assert_func>
 800f9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9bc:	6004      	str	r4, [r0, #0]
 800f9be:	60c4      	str	r4, [r0, #12]
 800f9c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9c8:	b94c      	cbnz	r4, 800f9de <__pow5mult+0x66>
 800f9ca:	f240 2171 	movw	r1, #625	; 0x271
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f7ff ff14 	bl	800f7fc <__i2b>
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9dc:	6003      	str	r3, [r0, #0]
 800f9de:	f04f 0900 	mov.w	r9, #0
 800f9e2:	07eb      	lsls	r3, r5, #31
 800f9e4:	d50a      	bpl.n	800f9fc <__pow5mult+0x84>
 800f9e6:	4639      	mov	r1, r7
 800f9e8:	4622      	mov	r2, r4
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7ff ff1c 	bl	800f828 <__multiply>
 800f9f0:	4680      	mov	r8, r0
 800f9f2:	4639      	mov	r1, r7
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f7ff fe4b 	bl	800f690 <_Bfree>
 800f9fa:	4647      	mov	r7, r8
 800f9fc:	106d      	asrs	r5, r5, #1
 800f9fe:	d00b      	beq.n	800fa18 <__pow5mult+0xa0>
 800fa00:	6820      	ldr	r0, [r4, #0]
 800fa02:	b938      	cbnz	r0, 800fa14 <__pow5mult+0x9c>
 800fa04:	4622      	mov	r2, r4
 800fa06:	4621      	mov	r1, r4
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7ff ff0d 	bl	800f828 <__multiply>
 800fa0e:	6020      	str	r0, [r4, #0]
 800fa10:	f8c0 9000 	str.w	r9, [r0]
 800fa14:	4604      	mov	r4, r0
 800fa16:	e7e4      	b.n	800f9e2 <__pow5mult+0x6a>
 800fa18:	4638      	mov	r0, r7
 800fa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa1e:	bf00      	nop
 800fa20:	080110e0 	.word	0x080110e0
 800fa24:	08010f0d 	.word	0x08010f0d
 800fa28:	08010f90 	.word	0x08010f90

0800fa2c <__lshift>:
 800fa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	460c      	mov	r4, r1
 800fa32:	4607      	mov	r7, r0
 800fa34:	4691      	mov	r9, r2
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	6849      	ldr	r1, [r1, #4]
 800fa3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa3e:	68a3      	ldr	r3, [r4, #8]
 800fa40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa44:	f108 0601 	add.w	r6, r8, #1
 800fa48:	42b3      	cmp	r3, r6
 800fa4a:	db0b      	blt.n	800fa64 <__lshift+0x38>
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	f7ff fddf 	bl	800f610 <_Balloc>
 800fa52:	4605      	mov	r5, r0
 800fa54:	b948      	cbnz	r0, 800fa6a <__lshift+0x3e>
 800fa56:	4602      	mov	r2, r0
 800fa58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa5c:	4b29      	ldr	r3, [pc, #164]	; (800fb04 <__lshift+0xd8>)
 800fa5e:	482a      	ldr	r0, [pc, #168]	; (800fb08 <__lshift+0xdc>)
 800fa60:	f000 fbb4 	bl	80101cc <__assert_func>
 800fa64:	3101      	adds	r1, #1
 800fa66:	005b      	lsls	r3, r3, #1
 800fa68:	e7ee      	b.n	800fa48 <__lshift+0x1c>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	f100 0114 	add.w	r1, r0, #20
 800fa70:	f100 0210 	add.w	r2, r0, #16
 800fa74:	4618      	mov	r0, r3
 800fa76:	4553      	cmp	r3, sl
 800fa78:	db37      	blt.n	800faea <__lshift+0xbe>
 800fa7a:	6920      	ldr	r0, [r4, #16]
 800fa7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa80:	f104 0314 	add.w	r3, r4, #20
 800fa84:	f019 091f 	ands.w	r9, r9, #31
 800fa88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fa90:	d02f      	beq.n	800faf2 <__lshift+0xc6>
 800fa92:	468a      	mov	sl, r1
 800fa94:	f04f 0c00 	mov.w	ip, #0
 800fa98:	f1c9 0e20 	rsb	lr, r9, #32
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	fa02 f209 	lsl.w	r2, r2, r9
 800faa2:	ea42 020c 	orr.w	r2, r2, ip
 800faa6:	f84a 2b04 	str.w	r2, [sl], #4
 800faaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800faae:	4298      	cmp	r0, r3
 800fab0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fab4:	d8f2      	bhi.n	800fa9c <__lshift+0x70>
 800fab6:	1b03      	subs	r3, r0, r4
 800fab8:	3b15      	subs	r3, #21
 800faba:	f023 0303 	bic.w	r3, r3, #3
 800fabe:	3304      	adds	r3, #4
 800fac0:	f104 0215 	add.w	r2, r4, #21
 800fac4:	4290      	cmp	r0, r2
 800fac6:	bf38      	it	cc
 800fac8:	2304      	movcc	r3, #4
 800faca:	f841 c003 	str.w	ip, [r1, r3]
 800face:	f1bc 0f00 	cmp.w	ip, #0
 800fad2:	d001      	beq.n	800fad8 <__lshift+0xac>
 800fad4:	f108 0602 	add.w	r6, r8, #2
 800fad8:	3e01      	subs	r6, #1
 800fada:	4638      	mov	r0, r7
 800fadc:	4621      	mov	r1, r4
 800fade:	612e      	str	r6, [r5, #16]
 800fae0:	f7ff fdd6 	bl	800f690 <_Bfree>
 800fae4:	4628      	mov	r0, r5
 800fae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faea:	f842 0f04 	str.w	r0, [r2, #4]!
 800faee:	3301      	adds	r3, #1
 800faf0:	e7c1      	b.n	800fa76 <__lshift+0x4a>
 800faf2:	3904      	subs	r1, #4
 800faf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800faf8:	4298      	cmp	r0, r3
 800fafa:	f841 2f04 	str.w	r2, [r1, #4]!
 800fafe:	d8f9      	bhi.n	800faf4 <__lshift+0xc8>
 800fb00:	e7ea      	b.n	800fad8 <__lshift+0xac>
 800fb02:	bf00      	nop
 800fb04:	08010f7f 	.word	0x08010f7f
 800fb08:	08010f90 	.word	0x08010f90

0800fb0c <__mcmp>:
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	690a      	ldr	r2, [r1, #16]
 800fb10:	6900      	ldr	r0, [r0, #16]
 800fb12:	b530      	push	{r4, r5, lr}
 800fb14:	1a80      	subs	r0, r0, r2
 800fb16:	d10d      	bne.n	800fb34 <__mcmp+0x28>
 800fb18:	3314      	adds	r3, #20
 800fb1a:	3114      	adds	r1, #20
 800fb1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fb20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fb24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb2c:	4295      	cmp	r5, r2
 800fb2e:	d002      	beq.n	800fb36 <__mcmp+0x2a>
 800fb30:	d304      	bcc.n	800fb3c <__mcmp+0x30>
 800fb32:	2001      	movs	r0, #1
 800fb34:	bd30      	pop	{r4, r5, pc}
 800fb36:	42a3      	cmp	r3, r4
 800fb38:	d3f4      	bcc.n	800fb24 <__mcmp+0x18>
 800fb3a:	e7fb      	b.n	800fb34 <__mcmp+0x28>
 800fb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb40:	e7f8      	b.n	800fb34 <__mcmp+0x28>
	...

0800fb44 <__mdiff>:
 800fb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb48:	460d      	mov	r5, r1
 800fb4a:	4607      	mov	r7, r0
 800fb4c:	4611      	mov	r1, r2
 800fb4e:	4628      	mov	r0, r5
 800fb50:	4614      	mov	r4, r2
 800fb52:	f7ff ffdb 	bl	800fb0c <__mcmp>
 800fb56:	1e06      	subs	r6, r0, #0
 800fb58:	d111      	bne.n	800fb7e <__mdiff+0x3a>
 800fb5a:	4631      	mov	r1, r6
 800fb5c:	4638      	mov	r0, r7
 800fb5e:	f7ff fd57 	bl	800f610 <_Balloc>
 800fb62:	4602      	mov	r2, r0
 800fb64:	b928      	cbnz	r0, 800fb72 <__mdiff+0x2e>
 800fb66:	f240 2132 	movw	r1, #562	; 0x232
 800fb6a:	4b3a      	ldr	r3, [pc, #232]	; (800fc54 <__mdiff+0x110>)
 800fb6c:	483a      	ldr	r0, [pc, #232]	; (800fc58 <__mdiff+0x114>)
 800fb6e:	f000 fb2d 	bl	80101cc <__assert_func>
 800fb72:	2301      	movs	r3, #1
 800fb74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fb78:	4610      	mov	r0, r2
 800fb7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb7e:	bfa4      	itt	ge
 800fb80:	4623      	movge	r3, r4
 800fb82:	462c      	movge	r4, r5
 800fb84:	4638      	mov	r0, r7
 800fb86:	6861      	ldr	r1, [r4, #4]
 800fb88:	bfa6      	itte	ge
 800fb8a:	461d      	movge	r5, r3
 800fb8c:	2600      	movge	r6, #0
 800fb8e:	2601      	movlt	r6, #1
 800fb90:	f7ff fd3e 	bl	800f610 <_Balloc>
 800fb94:	4602      	mov	r2, r0
 800fb96:	b918      	cbnz	r0, 800fba0 <__mdiff+0x5c>
 800fb98:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb9c:	4b2d      	ldr	r3, [pc, #180]	; (800fc54 <__mdiff+0x110>)
 800fb9e:	e7e5      	b.n	800fb6c <__mdiff+0x28>
 800fba0:	f102 0814 	add.w	r8, r2, #20
 800fba4:	46c2      	mov	sl, r8
 800fba6:	f04f 0c00 	mov.w	ip, #0
 800fbaa:	6927      	ldr	r7, [r4, #16]
 800fbac:	60c6      	str	r6, [r0, #12]
 800fbae:	692e      	ldr	r6, [r5, #16]
 800fbb0:	f104 0014 	add.w	r0, r4, #20
 800fbb4:	f105 0914 	add.w	r9, r5, #20
 800fbb8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800fbbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fbc0:	3410      	adds	r4, #16
 800fbc2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800fbc6:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbca:	fa1f f18b 	uxth.w	r1, fp
 800fbce:	448c      	add	ip, r1
 800fbd0:	b299      	uxth	r1, r3
 800fbd2:	0c1b      	lsrs	r3, r3, #16
 800fbd4:	ebac 0101 	sub.w	r1, ip, r1
 800fbd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fbdc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fbe0:	b289      	uxth	r1, r1
 800fbe2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800fbe6:	454e      	cmp	r6, r9
 800fbe8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fbec:	f84a 3b04 	str.w	r3, [sl], #4
 800fbf0:	d8e7      	bhi.n	800fbc2 <__mdiff+0x7e>
 800fbf2:	1b73      	subs	r3, r6, r5
 800fbf4:	3b15      	subs	r3, #21
 800fbf6:	f023 0303 	bic.w	r3, r3, #3
 800fbfa:	3515      	adds	r5, #21
 800fbfc:	3304      	adds	r3, #4
 800fbfe:	42ae      	cmp	r6, r5
 800fc00:	bf38      	it	cc
 800fc02:	2304      	movcc	r3, #4
 800fc04:	4418      	add	r0, r3
 800fc06:	4443      	add	r3, r8
 800fc08:	461e      	mov	r6, r3
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	4575      	cmp	r5, lr
 800fc0e:	d30e      	bcc.n	800fc2e <__mdiff+0xea>
 800fc10:	f10e 0103 	add.w	r1, lr, #3
 800fc14:	1a09      	subs	r1, r1, r0
 800fc16:	f021 0103 	bic.w	r1, r1, #3
 800fc1a:	3803      	subs	r0, #3
 800fc1c:	4586      	cmp	lr, r0
 800fc1e:	bf38      	it	cc
 800fc20:	2100      	movcc	r1, #0
 800fc22:	4419      	add	r1, r3
 800fc24:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800fc28:	b18b      	cbz	r3, 800fc4e <__mdiff+0x10a>
 800fc2a:	6117      	str	r7, [r2, #16]
 800fc2c:	e7a4      	b.n	800fb78 <__mdiff+0x34>
 800fc2e:	f855 8b04 	ldr.w	r8, [r5], #4
 800fc32:	fa1f f188 	uxth.w	r1, r8
 800fc36:	4461      	add	r1, ip
 800fc38:	140c      	asrs	r4, r1, #16
 800fc3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc3e:	b289      	uxth	r1, r1
 800fc40:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fc44:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800fc48:	f846 1b04 	str.w	r1, [r6], #4
 800fc4c:	e7de      	b.n	800fc0c <__mdiff+0xc8>
 800fc4e:	3f01      	subs	r7, #1
 800fc50:	e7e8      	b.n	800fc24 <__mdiff+0xe0>
 800fc52:	bf00      	nop
 800fc54:	08010f7f 	.word	0x08010f7f
 800fc58:	08010f90 	.word	0x08010f90

0800fc5c <__d2b>:
 800fc5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fc60:	2101      	movs	r1, #1
 800fc62:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800fc66:	4690      	mov	r8, r2
 800fc68:	461d      	mov	r5, r3
 800fc6a:	f7ff fcd1 	bl	800f610 <_Balloc>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	b930      	cbnz	r0, 800fc80 <__d2b+0x24>
 800fc72:	4602      	mov	r2, r0
 800fc74:	f240 310a 	movw	r1, #778	; 0x30a
 800fc78:	4b24      	ldr	r3, [pc, #144]	; (800fd0c <__d2b+0xb0>)
 800fc7a:	4825      	ldr	r0, [pc, #148]	; (800fd10 <__d2b+0xb4>)
 800fc7c:	f000 faa6 	bl	80101cc <__assert_func>
 800fc80:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fc84:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800fc88:	bb2d      	cbnz	r5, 800fcd6 <__d2b+0x7a>
 800fc8a:	9301      	str	r3, [sp, #4]
 800fc8c:	f1b8 0300 	subs.w	r3, r8, #0
 800fc90:	d026      	beq.n	800fce0 <__d2b+0x84>
 800fc92:	4668      	mov	r0, sp
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	f7ff fd83 	bl	800f7a0 <__lo0bits>
 800fc9a:	9900      	ldr	r1, [sp, #0]
 800fc9c:	b1f0      	cbz	r0, 800fcdc <__d2b+0x80>
 800fc9e:	9a01      	ldr	r2, [sp, #4]
 800fca0:	f1c0 0320 	rsb	r3, r0, #32
 800fca4:	fa02 f303 	lsl.w	r3, r2, r3
 800fca8:	430b      	orrs	r3, r1
 800fcaa:	40c2      	lsrs	r2, r0
 800fcac:	6163      	str	r3, [r4, #20]
 800fcae:	9201      	str	r2, [sp, #4]
 800fcb0:	9b01      	ldr	r3, [sp, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	bf14      	ite	ne
 800fcb6:	2102      	movne	r1, #2
 800fcb8:	2101      	moveq	r1, #1
 800fcba:	61a3      	str	r3, [r4, #24]
 800fcbc:	6121      	str	r1, [r4, #16]
 800fcbe:	b1c5      	cbz	r5, 800fcf2 <__d2b+0x96>
 800fcc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fcc4:	4405      	add	r5, r0
 800fcc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcca:	603d      	str	r5, [r7, #0]
 800fccc:	6030      	str	r0, [r6, #0]
 800fcce:	4620      	mov	r0, r4
 800fcd0:	b002      	add	sp, #8
 800fcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcda:	e7d6      	b.n	800fc8a <__d2b+0x2e>
 800fcdc:	6161      	str	r1, [r4, #20]
 800fcde:	e7e7      	b.n	800fcb0 <__d2b+0x54>
 800fce0:	a801      	add	r0, sp, #4
 800fce2:	f7ff fd5d 	bl	800f7a0 <__lo0bits>
 800fce6:	2101      	movs	r1, #1
 800fce8:	9b01      	ldr	r3, [sp, #4]
 800fcea:	6121      	str	r1, [r4, #16]
 800fcec:	6163      	str	r3, [r4, #20]
 800fcee:	3020      	adds	r0, #32
 800fcf0:	e7e5      	b.n	800fcbe <__d2b+0x62>
 800fcf2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fcf6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcfa:	6038      	str	r0, [r7, #0]
 800fcfc:	6918      	ldr	r0, [r3, #16]
 800fcfe:	f7ff fd2f 	bl	800f760 <__hi0bits>
 800fd02:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800fd06:	6031      	str	r1, [r6, #0]
 800fd08:	e7e1      	b.n	800fcce <__d2b+0x72>
 800fd0a:	bf00      	nop
 800fd0c:	08010f7f 	.word	0x08010f7f
 800fd10:	08010f90 	.word	0x08010f90

0800fd14 <_calloc_r>:
 800fd14:	b570      	push	{r4, r5, r6, lr}
 800fd16:	fba1 5402 	umull	r5, r4, r1, r2
 800fd1a:	b934      	cbnz	r4, 800fd2a <_calloc_r+0x16>
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	f000 f875 	bl	800fe0c <_malloc_r>
 800fd22:	4606      	mov	r6, r0
 800fd24:	b928      	cbnz	r0, 800fd32 <_calloc_r+0x1e>
 800fd26:	4630      	mov	r0, r6
 800fd28:	bd70      	pop	{r4, r5, r6, pc}
 800fd2a:	220c      	movs	r2, #12
 800fd2c:	2600      	movs	r6, #0
 800fd2e:	6002      	str	r2, [r0, #0]
 800fd30:	e7f9      	b.n	800fd26 <_calloc_r+0x12>
 800fd32:	462a      	mov	r2, r5
 800fd34:	4621      	mov	r1, r4
 800fd36:	f7fe f92b 	bl	800df90 <memset>
 800fd3a:	e7f4      	b.n	800fd26 <_calloc_r+0x12>

0800fd3c <_free_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4605      	mov	r5, r0
 800fd40:	2900      	cmp	r1, #0
 800fd42:	d040      	beq.n	800fdc6 <_free_r+0x8a>
 800fd44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd48:	1f0c      	subs	r4, r1, #4
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	bfb8      	it	lt
 800fd4e:	18e4      	addlt	r4, r4, r3
 800fd50:	f000 fa98 	bl	8010284 <__malloc_lock>
 800fd54:	4a1c      	ldr	r2, [pc, #112]	; (800fdc8 <_free_r+0x8c>)
 800fd56:	6813      	ldr	r3, [r2, #0]
 800fd58:	b933      	cbnz	r3, 800fd68 <_free_r+0x2c>
 800fd5a:	6063      	str	r3, [r4, #4]
 800fd5c:	6014      	str	r4, [r2, #0]
 800fd5e:	4628      	mov	r0, r5
 800fd60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd64:	f000 ba94 	b.w	8010290 <__malloc_unlock>
 800fd68:	42a3      	cmp	r3, r4
 800fd6a:	d908      	bls.n	800fd7e <_free_r+0x42>
 800fd6c:	6820      	ldr	r0, [r4, #0]
 800fd6e:	1821      	adds	r1, r4, r0
 800fd70:	428b      	cmp	r3, r1
 800fd72:	bf01      	itttt	eq
 800fd74:	6819      	ldreq	r1, [r3, #0]
 800fd76:	685b      	ldreq	r3, [r3, #4]
 800fd78:	1809      	addeq	r1, r1, r0
 800fd7a:	6021      	streq	r1, [r4, #0]
 800fd7c:	e7ed      	b.n	800fd5a <_free_r+0x1e>
 800fd7e:	461a      	mov	r2, r3
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	b10b      	cbz	r3, 800fd88 <_free_r+0x4c>
 800fd84:	42a3      	cmp	r3, r4
 800fd86:	d9fa      	bls.n	800fd7e <_free_r+0x42>
 800fd88:	6811      	ldr	r1, [r2, #0]
 800fd8a:	1850      	adds	r0, r2, r1
 800fd8c:	42a0      	cmp	r0, r4
 800fd8e:	d10b      	bne.n	800fda8 <_free_r+0x6c>
 800fd90:	6820      	ldr	r0, [r4, #0]
 800fd92:	4401      	add	r1, r0
 800fd94:	1850      	adds	r0, r2, r1
 800fd96:	4283      	cmp	r3, r0
 800fd98:	6011      	str	r1, [r2, #0]
 800fd9a:	d1e0      	bne.n	800fd5e <_free_r+0x22>
 800fd9c:	6818      	ldr	r0, [r3, #0]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	4401      	add	r1, r0
 800fda2:	6011      	str	r1, [r2, #0]
 800fda4:	6053      	str	r3, [r2, #4]
 800fda6:	e7da      	b.n	800fd5e <_free_r+0x22>
 800fda8:	d902      	bls.n	800fdb0 <_free_r+0x74>
 800fdaa:	230c      	movs	r3, #12
 800fdac:	602b      	str	r3, [r5, #0]
 800fdae:	e7d6      	b.n	800fd5e <_free_r+0x22>
 800fdb0:	6820      	ldr	r0, [r4, #0]
 800fdb2:	1821      	adds	r1, r4, r0
 800fdb4:	428b      	cmp	r3, r1
 800fdb6:	bf01      	itttt	eq
 800fdb8:	6819      	ldreq	r1, [r3, #0]
 800fdba:	685b      	ldreq	r3, [r3, #4]
 800fdbc:	1809      	addeq	r1, r1, r0
 800fdbe:	6021      	streq	r1, [r4, #0]
 800fdc0:	6063      	str	r3, [r4, #4]
 800fdc2:	6054      	str	r4, [r2, #4]
 800fdc4:	e7cb      	b.n	800fd5e <_free_r+0x22>
 800fdc6:	bd38      	pop	{r3, r4, r5, pc}
 800fdc8:	200018bc 	.word	0x200018bc

0800fdcc <sbrk_aligned>:
 800fdcc:	b570      	push	{r4, r5, r6, lr}
 800fdce:	4e0e      	ldr	r6, [pc, #56]	; (800fe08 <sbrk_aligned+0x3c>)
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	6831      	ldr	r1, [r6, #0]
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	b911      	cbnz	r1, 800fdde <sbrk_aligned+0x12>
 800fdd8:	f000 f9e8 	bl	80101ac <_sbrk_r>
 800fddc:	6030      	str	r0, [r6, #0]
 800fdde:	4621      	mov	r1, r4
 800fde0:	4628      	mov	r0, r5
 800fde2:	f000 f9e3 	bl	80101ac <_sbrk_r>
 800fde6:	1c43      	adds	r3, r0, #1
 800fde8:	d00a      	beq.n	800fe00 <sbrk_aligned+0x34>
 800fdea:	1cc4      	adds	r4, r0, #3
 800fdec:	f024 0403 	bic.w	r4, r4, #3
 800fdf0:	42a0      	cmp	r0, r4
 800fdf2:	d007      	beq.n	800fe04 <sbrk_aligned+0x38>
 800fdf4:	1a21      	subs	r1, r4, r0
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	f000 f9d8 	bl	80101ac <_sbrk_r>
 800fdfc:	3001      	adds	r0, #1
 800fdfe:	d101      	bne.n	800fe04 <sbrk_aligned+0x38>
 800fe00:	f04f 34ff 	mov.w	r4, #4294967295
 800fe04:	4620      	mov	r0, r4
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	200018c0 	.word	0x200018c0

0800fe0c <_malloc_r>:
 800fe0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe10:	1ccd      	adds	r5, r1, #3
 800fe12:	f025 0503 	bic.w	r5, r5, #3
 800fe16:	3508      	adds	r5, #8
 800fe18:	2d0c      	cmp	r5, #12
 800fe1a:	bf38      	it	cc
 800fe1c:	250c      	movcc	r5, #12
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	4607      	mov	r7, r0
 800fe22:	db01      	blt.n	800fe28 <_malloc_r+0x1c>
 800fe24:	42a9      	cmp	r1, r5
 800fe26:	d905      	bls.n	800fe34 <_malloc_r+0x28>
 800fe28:	230c      	movs	r3, #12
 800fe2a:	2600      	movs	r6, #0
 800fe2c:	603b      	str	r3, [r7, #0]
 800fe2e:	4630      	mov	r0, r6
 800fe30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe34:	4e2e      	ldr	r6, [pc, #184]	; (800fef0 <_malloc_r+0xe4>)
 800fe36:	f000 fa25 	bl	8010284 <__malloc_lock>
 800fe3a:	6833      	ldr	r3, [r6, #0]
 800fe3c:	461c      	mov	r4, r3
 800fe3e:	bb34      	cbnz	r4, 800fe8e <_malloc_r+0x82>
 800fe40:	4629      	mov	r1, r5
 800fe42:	4638      	mov	r0, r7
 800fe44:	f7ff ffc2 	bl	800fdcc <sbrk_aligned>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	d14d      	bne.n	800feea <_malloc_r+0xde>
 800fe4e:	6834      	ldr	r4, [r6, #0]
 800fe50:	4626      	mov	r6, r4
 800fe52:	2e00      	cmp	r6, #0
 800fe54:	d140      	bne.n	800fed8 <_malloc_r+0xcc>
 800fe56:	6823      	ldr	r3, [r4, #0]
 800fe58:	4631      	mov	r1, r6
 800fe5a:	4638      	mov	r0, r7
 800fe5c:	eb04 0803 	add.w	r8, r4, r3
 800fe60:	f000 f9a4 	bl	80101ac <_sbrk_r>
 800fe64:	4580      	cmp	r8, r0
 800fe66:	d13a      	bne.n	800fede <_malloc_r+0xd2>
 800fe68:	6821      	ldr	r1, [r4, #0]
 800fe6a:	3503      	adds	r5, #3
 800fe6c:	1a6d      	subs	r5, r5, r1
 800fe6e:	f025 0503 	bic.w	r5, r5, #3
 800fe72:	3508      	adds	r5, #8
 800fe74:	2d0c      	cmp	r5, #12
 800fe76:	bf38      	it	cc
 800fe78:	250c      	movcc	r5, #12
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	f7ff ffa5 	bl	800fdcc <sbrk_aligned>
 800fe82:	3001      	adds	r0, #1
 800fe84:	d02b      	beq.n	800fede <_malloc_r+0xd2>
 800fe86:	6823      	ldr	r3, [r4, #0]
 800fe88:	442b      	add	r3, r5
 800fe8a:	6023      	str	r3, [r4, #0]
 800fe8c:	e00e      	b.n	800feac <_malloc_r+0xa0>
 800fe8e:	6822      	ldr	r2, [r4, #0]
 800fe90:	1b52      	subs	r2, r2, r5
 800fe92:	d41e      	bmi.n	800fed2 <_malloc_r+0xc6>
 800fe94:	2a0b      	cmp	r2, #11
 800fe96:	d916      	bls.n	800fec6 <_malloc_r+0xba>
 800fe98:	1961      	adds	r1, r4, r5
 800fe9a:	42a3      	cmp	r3, r4
 800fe9c:	6025      	str	r5, [r4, #0]
 800fe9e:	bf18      	it	ne
 800fea0:	6059      	strne	r1, [r3, #4]
 800fea2:	6863      	ldr	r3, [r4, #4]
 800fea4:	bf08      	it	eq
 800fea6:	6031      	streq	r1, [r6, #0]
 800fea8:	5162      	str	r2, [r4, r5]
 800feaa:	604b      	str	r3, [r1, #4]
 800feac:	4638      	mov	r0, r7
 800feae:	f104 060b 	add.w	r6, r4, #11
 800feb2:	f000 f9ed 	bl	8010290 <__malloc_unlock>
 800feb6:	f026 0607 	bic.w	r6, r6, #7
 800feba:	1d23      	adds	r3, r4, #4
 800febc:	1af2      	subs	r2, r6, r3
 800febe:	d0b6      	beq.n	800fe2e <_malloc_r+0x22>
 800fec0:	1b9b      	subs	r3, r3, r6
 800fec2:	50a3      	str	r3, [r4, r2]
 800fec4:	e7b3      	b.n	800fe2e <_malloc_r+0x22>
 800fec6:	6862      	ldr	r2, [r4, #4]
 800fec8:	42a3      	cmp	r3, r4
 800feca:	bf0c      	ite	eq
 800fecc:	6032      	streq	r2, [r6, #0]
 800fece:	605a      	strne	r2, [r3, #4]
 800fed0:	e7ec      	b.n	800feac <_malloc_r+0xa0>
 800fed2:	4623      	mov	r3, r4
 800fed4:	6864      	ldr	r4, [r4, #4]
 800fed6:	e7b2      	b.n	800fe3e <_malloc_r+0x32>
 800fed8:	4634      	mov	r4, r6
 800feda:	6876      	ldr	r6, [r6, #4]
 800fedc:	e7b9      	b.n	800fe52 <_malloc_r+0x46>
 800fede:	230c      	movs	r3, #12
 800fee0:	4638      	mov	r0, r7
 800fee2:	603b      	str	r3, [r7, #0]
 800fee4:	f000 f9d4 	bl	8010290 <__malloc_unlock>
 800fee8:	e7a1      	b.n	800fe2e <_malloc_r+0x22>
 800feea:	6025      	str	r5, [r4, #0]
 800feec:	e7de      	b.n	800feac <_malloc_r+0xa0>
 800feee:	bf00      	nop
 800fef0:	200018bc 	.word	0x200018bc

0800fef4 <__ssputs_r>:
 800fef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef8:	688e      	ldr	r6, [r1, #8]
 800fefa:	4682      	mov	sl, r0
 800fefc:	429e      	cmp	r6, r3
 800fefe:	460c      	mov	r4, r1
 800ff00:	4690      	mov	r8, r2
 800ff02:	461f      	mov	r7, r3
 800ff04:	d838      	bhi.n	800ff78 <__ssputs_r+0x84>
 800ff06:	898a      	ldrh	r2, [r1, #12]
 800ff08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff0c:	d032      	beq.n	800ff74 <__ssputs_r+0x80>
 800ff0e:	6825      	ldr	r5, [r4, #0]
 800ff10:	6909      	ldr	r1, [r1, #16]
 800ff12:	3301      	adds	r3, #1
 800ff14:	eba5 0901 	sub.w	r9, r5, r1
 800ff18:	6965      	ldr	r5, [r4, #20]
 800ff1a:	444b      	add	r3, r9
 800ff1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff24:	106d      	asrs	r5, r5, #1
 800ff26:	429d      	cmp	r5, r3
 800ff28:	bf38      	it	cc
 800ff2a:	461d      	movcc	r5, r3
 800ff2c:	0553      	lsls	r3, r2, #21
 800ff2e:	d531      	bpl.n	800ff94 <__ssputs_r+0xa0>
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7ff ff6b 	bl	800fe0c <_malloc_r>
 800ff36:	4606      	mov	r6, r0
 800ff38:	b950      	cbnz	r0, 800ff50 <__ssputs_r+0x5c>
 800ff3a:	230c      	movs	r3, #12
 800ff3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff40:	f8ca 3000 	str.w	r3, [sl]
 800ff44:	89a3      	ldrh	r3, [r4, #12]
 800ff46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff4a:	81a3      	strh	r3, [r4, #12]
 800ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff50:	464a      	mov	r2, r9
 800ff52:	6921      	ldr	r1, [r4, #16]
 800ff54:	f7fe f80e 	bl	800df74 <memcpy>
 800ff58:	89a3      	ldrh	r3, [r4, #12]
 800ff5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff62:	81a3      	strh	r3, [r4, #12]
 800ff64:	6126      	str	r6, [r4, #16]
 800ff66:	444e      	add	r6, r9
 800ff68:	6026      	str	r6, [r4, #0]
 800ff6a:	463e      	mov	r6, r7
 800ff6c:	6165      	str	r5, [r4, #20]
 800ff6e:	eba5 0509 	sub.w	r5, r5, r9
 800ff72:	60a5      	str	r5, [r4, #8]
 800ff74:	42be      	cmp	r6, r7
 800ff76:	d900      	bls.n	800ff7a <__ssputs_r+0x86>
 800ff78:	463e      	mov	r6, r7
 800ff7a:	4632      	mov	r2, r6
 800ff7c:	4641      	mov	r1, r8
 800ff7e:	6820      	ldr	r0, [r4, #0]
 800ff80:	f000 f966 	bl	8010250 <memmove>
 800ff84:	68a3      	ldr	r3, [r4, #8]
 800ff86:	2000      	movs	r0, #0
 800ff88:	1b9b      	subs	r3, r3, r6
 800ff8a:	60a3      	str	r3, [r4, #8]
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	4433      	add	r3, r6
 800ff90:	6023      	str	r3, [r4, #0]
 800ff92:	e7db      	b.n	800ff4c <__ssputs_r+0x58>
 800ff94:	462a      	mov	r2, r5
 800ff96:	f000 f981 	bl	801029c <_realloc_r>
 800ff9a:	4606      	mov	r6, r0
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d1e1      	bne.n	800ff64 <__ssputs_r+0x70>
 800ffa0:	4650      	mov	r0, sl
 800ffa2:	6921      	ldr	r1, [r4, #16]
 800ffa4:	f7ff feca 	bl	800fd3c <_free_r>
 800ffa8:	e7c7      	b.n	800ff3a <__ssputs_r+0x46>
	...

0800ffac <_svfiprintf_r>:
 800ffac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb0:	4698      	mov	r8, r3
 800ffb2:	898b      	ldrh	r3, [r1, #12]
 800ffb4:	4607      	mov	r7, r0
 800ffb6:	061b      	lsls	r3, r3, #24
 800ffb8:	460d      	mov	r5, r1
 800ffba:	4614      	mov	r4, r2
 800ffbc:	b09d      	sub	sp, #116	; 0x74
 800ffbe:	d50e      	bpl.n	800ffde <_svfiprintf_r+0x32>
 800ffc0:	690b      	ldr	r3, [r1, #16]
 800ffc2:	b963      	cbnz	r3, 800ffde <_svfiprintf_r+0x32>
 800ffc4:	2140      	movs	r1, #64	; 0x40
 800ffc6:	f7ff ff21 	bl	800fe0c <_malloc_r>
 800ffca:	6028      	str	r0, [r5, #0]
 800ffcc:	6128      	str	r0, [r5, #16]
 800ffce:	b920      	cbnz	r0, 800ffda <_svfiprintf_r+0x2e>
 800ffd0:	230c      	movs	r3, #12
 800ffd2:	603b      	str	r3, [r7, #0]
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd8:	e0d1      	b.n	801017e <_svfiprintf_r+0x1d2>
 800ffda:	2340      	movs	r3, #64	; 0x40
 800ffdc:	616b      	str	r3, [r5, #20]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe2:	2320      	movs	r3, #32
 800ffe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffe8:	2330      	movs	r3, #48	; 0x30
 800ffea:	f04f 0901 	mov.w	r9, #1
 800ffee:	f8cd 800c 	str.w	r8, [sp, #12]
 800fff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010198 <_svfiprintf_r+0x1ec>
 800fff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fffa:	4623      	mov	r3, r4
 800fffc:	469a      	mov	sl, r3
 800fffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010002:	b10a      	cbz	r2, 8010008 <_svfiprintf_r+0x5c>
 8010004:	2a25      	cmp	r2, #37	; 0x25
 8010006:	d1f9      	bne.n	800fffc <_svfiprintf_r+0x50>
 8010008:	ebba 0b04 	subs.w	fp, sl, r4
 801000c:	d00b      	beq.n	8010026 <_svfiprintf_r+0x7a>
 801000e:	465b      	mov	r3, fp
 8010010:	4622      	mov	r2, r4
 8010012:	4629      	mov	r1, r5
 8010014:	4638      	mov	r0, r7
 8010016:	f7ff ff6d 	bl	800fef4 <__ssputs_r>
 801001a:	3001      	adds	r0, #1
 801001c:	f000 80aa 	beq.w	8010174 <_svfiprintf_r+0x1c8>
 8010020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010022:	445a      	add	r2, fp
 8010024:	9209      	str	r2, [sp, #36]	; 0x24
 8010026:	f89a 3000 	ldrb.w	r3, [sl]
 801002a:	2b00      	cmp	r3, #0
 801002c:	f000 80a2 	beq.w	8010174 <_svfiprintf_r+0x1c8>
 8010030:	2300      	movs	r3, #0
 8010032:	f04f 32ff 	mov.w	r2, #4294967295
 8010036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801003a:	f10a 0a01 	add.w	sl, sl, #1
 801003e:	9304      	str	r3, [sp, #16]
 8010040:	9307      	str	r3, [sp, #28]
 8010042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010046:	931a      	str	r3, [sp, #104]	; 0x68
 8010048:	4654      	mov	r4, sl
 801004a:	2205      	movs	r2, #5
 801004c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010050:	4851      	ldr	r0, [pc, #324]	; (8010198 <_svfiprintf_r+0x1ec>)
 8010052:	f7ff facf 	bl	800f5f4 <memchr>
 8010056:	9a04      	ldr	r2, [sp, #16]
 8010058:	b9d8      	cbnz	r0, 8010092 <_svfiprintf_r+0xe6>
 801005a:	06d0      	lsls	r0, r2, #27
 801005c:	bf44      	itt	mi
 801005e:	2320      	movmi	r3, #32
 8010060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010064:	0711      	lsls	r1, r2, #28
 8010066:	bf44      	itt	mi
 8010068:	232b      	movmi	r3, #43	; 0x2b
 801006a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801006e:	f89a 3000 	ldrb.w	r3, [sl]
 8010072:	2b2a      	cmp	r3, #42	; 0x2a
 8010074:	d015      	beq.n	80100a2 <_svfiprintf_r+0xf6>
 8010076:	4654      	mov	r4, sl
 8010078:	2000      	movs	r0, #0
 801007a:	f04f 0c0a 	mov.w	ip, #10
 801007e:	9a07      	ldr	r2, [sp, #28]
 8010080:	4621      	mov	r1, r4
 8010082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010086:	3b30      	subs	r3, #48	; 0x30
 8010088:	2b09      	cmp	r3, #9
 801008a:	d94e      	bls.n	801012a <_svfiprintf_r+0x17e>
 801008c:	b1b0      	cbz	r0, 80100bc <_svfiprintf_r+0x110>
 801008e:	9207      	str	r2, [sp, #28]
 8010090:	e014      	b.n	80100bc <_svfiprintf_r+0x110>
 8010092:	eba0 0308 	sub.w	r3, r0, r8
 8010096:	fa09 f303 	lsl.w	r3, r9, r3
 801009a:	4313      	orrs	r3, r2
 801009c:	46a2      	mov	sl, r4
 801009e:	9304      	str	r3, [sp, #16]
 80100a0:	e7d2      	b.n	8010048 <_svfiprintf_r+0x9c>
 80100a2:	9b03      	ldr	r3, [sp, #12]
 80100a4:	1d19      	adds	r1, r3, #4
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	9103      	str	r1, [sp, #12]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	bfbb      	ittet	lt
 80100ae:	425b      	neglt	r3, r3
 80100b0:	f042 0202 	orrlt.w	r2, r2, #2
 80100b4:	9307      	strge	r3, [sp, #28]
 80100b6:	9307      	strlt	r3, [sp, #28]
 80100b8:	bfb8      	it	lt
 80100ba:	9204      	strlt	r2, [sp, #16]
 80100bc:	7823      	ldrb	r3, [r4, #0]
 80100be:	2b2e      	cmp	r3, #46	; 0x2e
 80100c0:	d10c      	bne.n	80100dc <_svfiprintf_r+0x130>
 80100c2:	7863      	ldrb	r3, [r4, #1]
 80100c4:	2b2a      	cmp	r3, #42	; 0x2a
 80100c6:	d135      	bne.n	8010134 <_svfiprintf_r+0x188>
 80100c8:	9b03      	ldr	r3, [sp, #12]
 80100ca:	3402      	adds	r4, #2
 80100cc:	1d1a      	adds	r2, r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	9203      	str	r2, [sp, #12]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	bfb8      	it	lt
 80100d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80100da:	9305      	str	r3, [sp, #20]
 80100dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801019c <_svfiprintf_r+0x1f0>
 80100e0:	2203      	movs	r2, #3
 80100e2:	4650      	mov	r0, sl
 80100e4:	7821      	ldrb	r1, [r4, #0]
 80100e6:	f7ff fa85 	bl	800f5f4 <memchr>
 80100ea:	b140      	cbz	r0, 80100fe <_svfiprintf_r+0x152>
 80100ec:	2340      	movs	r3, #64	; 0x40
 80100ee:	eba0 000a 	sub.w	r0, r0, sl
 80100f2:	fa03 f000 	lsl.w	r0, r3, r0
 80100f6:	9b04      	ldr	r3, [sp, #16]
 80100f8:	3401      	adds	r4, #1
 80100fa:	4303      	orrs	r3, r0
 80100fc:	9304      	str	r3, [sp, #16]
 80100fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010102:	2206      	movs	r2, #6
 8010104:	4826      	ldr	r0, [pc, #152]	; (80101a0 <_svfiprintf_r+0x1f4>)
 8010106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801010a:	f7ff fa73 	bl	800f5f4 <memchr>
 801010e:	2800      	cmp	r0, #0
 8010110:	d038      	beq.n	8010184 <_svfiprintf_r+0x1d8>
 8010112:	4b24      	ldr	r3, [pc, #144]	; (80101a4 <_svfiprintf_r+0x1f8>)
 8010114:	bb1b      	cbnz	r3, 801015e <_svfiprintf_r+0x1b2>
 8010116:	9b03      	ldr	r3, [sp, #12]
 8010118:	3307      	adds	r3, #7
 801011a:	f023 0307 	bic.w	r3, r3, #7
 801011e:	3308      	adds	r3, #8
 8010120:	9303      	str	r3, [sp, #12]
 8010122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010124:	4433      	add	r3, r6
 8010126:	9309      	str	r3, [sp, #36]	; 0x24
 8010128:	e767      	b.n	800fffa <_svfiprintf_r+0x4e>
 801012a:	460c      	mov	r4, r1
 801012c:	2001      	movs	r0, #1
 801012e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010132:	e7a5      	b.n	8010080 <_svfiprintf_r+0xd4>
 8010134:	2300      	movs	r3, #0
 8010136:	f04f 0c0a 	mov.w	ip, #10
 801013a:	4619      	mov	r1, r3
 801013c:	3401      	adds	r4, #1
 801013e:	9305      	str	r3, [sp, #20]
 8010140:	4620      	mov	r0, r4
 8010142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010146:	3a30      	subs	r2, #48	; 0x30
 8010148:	2a09      	cmp	r2, #9
 801014a:	d903      	bls.n	8010154 <_svfiprintf_r+0x1a8>
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0c5      	beq.n	80100dc <_svfiprintf_r+0x130>
 8010150:	9105      	str	r1, [sp, #20]
 8010152:	e7c3      	b.n	80100dc <_svfiprintf_r+0x130>
 8010154:	4604      	mov	r4, r0
 8010156:	2301      	movs	r3, #1
 8010158:	fb0c 2101 	mla	r1, ip, r1, r2
 801015c:	e7f0      	b.n	8010140 <_svfiprintf_r+0x194>
 801015e:	ab03      	add	r3, sp, #12
 8010160:	9300      	str	r3, [sp, #0]
 8010162:	462a      	mov	r2, r5
 8010164:	4638      	mov	r0, r7
 8010166:	4b10      	ldr	r3, [pc, #64]	; (80101a8 <_svfiprintf_r+0x1fc>)
 8010168:	a904      	add	r1, sp, #16
 801016a:	f7fd ffb7 	bl	800e0dc <_printf_float>
 801016e:	1c42      	adds	r2, r0, #1
 8010170:	4606      	mov	r6, r0
 8010172:	d1d6      	bne.n	8010122 <_svfiprintf_r+0x176>
 8010174:	89ab      	ldrh	r3, [r5, #12]
 8010176:	065b      	lsls	r3, r3, #25
 8010178:	f53f af2c 	bmi.w	800ffd4 <_svfiprintf_r+0x28>
 801017c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801017e:	b01d      	add	sp, #116	; 0x74
 8010180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010184:	ab03      	add	r3, sp, #12
 8010186:	9300      	str	r3, [sp, #0]
 8010188:	462a      	mov	r2, r5
 801018a:	4638      	mov	r0, r7
 801018c:	4b06      	ldr	r3, [pc, #24]	; (80101a8 <_svfiprintf_r+0x1fc>)
 801018e:	a904      	add	r1, sp, #16
 8010190:	f7fe fa40 	bl	800e614 <_printf_i>
 8010194:	e7eb      	b.n	801016e <_svfiprintf_r+0x1c2>
 8010196:	bf00      	nop
 8010198:	080110ec 	.word	0x080110ec
 801019c:	080110f2 	.word	0x080110f2
 80101a0:	080110f6 	.word	0x080110f6
 80101a4:	0800e0dd 	.word	0x0800e0dd
 80101a8:	0800fef5 	.word	0x0800fef5

080101ac <_sbrk_r>:
 80101ac:	b538      	push	{r3, r4, r5, lr}
 80101ae:	2300      	movs	r3, #0
 80101b0:	4d05      	ldr	r5, [pc, #20]	; (80101c8 <_sbrk_r+0x1c>)
 80101b2:	4604      	mov	r4, r0
 80101b4:	4608      	mov	r0, r1
 80101b6:	602b      	str	r3, [r5, #0]
 80101b8:	f7f3 feaa 	bl	8003f10 <_sbrk>
 80101bc:	1c43      	adds	r3, r0, #1
 80101be:	d102      	bne.n	80101c6 <_sbrk_r+0x1a>
 80101c0:	682b      	ldr	r3, [r5, #0]
 80101c2:	b103      	cbz	r3, 80101c6 <_sbrk_r+0x1a>
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	bd38      	pop	{r3, r4, r5, pc}
 80101c8:	200018c4 	.word	0x200018c4

080101cc <__assert_func>:
 80101cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101ce:	4614      	mov	r4, r2
 80101d0:	461a      	mov	r2, r3
 80101d2:	4b09      	ldr	r3, [pc, #36]	; (80101f8 <__assert_func+0x2c>)
 80101d4:	4605      	mov	r5, r0
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	68d8      	ldr	r0, [r3, #12]
 80101da:	b14c      	cbz	r4, 80101f0 <__assert_func+0x24>
 80101dc:	4b07      	ldr	r3, [pc, #28]	; (80101fc <__assert_func+0x30>)
 80101de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101e2:	9100      	str	r1, [sp, #0]
 80101e4:	462b      	mov	r3, r5
 80101e6:	4906      	ldr	r1, [pc, #24]	; (8010200 <__assert_func+0x34>)
 80101e8:	f000 f80e 	bl	8010208 <fiprintf>
 80101ec:	f000 faaa 	bl	8010744 <abort>
 80101f0:	4b04      	ldr	r3, [pc, #16]	; (8010204 <__assert_func+0x38>)
 80101f2:	461c      	mov	r4, r3
 80101f4:	e7f3      	b.n	80101de <__assert_func+0x12>
 80101f6:	bf00      	nop
 80101f8:	200001a8 	.word	0x200001a8
 80101fc:	080110fd 	.word	0x080110fd
 8010200:	0801110a 	.word	0x0801110a
 8010204:	08011138 	.word	0x08011138

08010208 <fiprintf>:
 8010208:	b40e      	push	{r1, r2, r3}
 801020a:	b503      	push	{r0, r1, lr}
 801020c:	4601      	mov	r1, r0
 801020e:	ab03      	add	r3, sp, #12
 8010210:	4805      	ldr	r0, [pc, #20]	; (8010228 <fiprintf+0x20>)
 8010212:	f853 2b04 	ldr.w	r2, [r3], #4
 8010216:	6800      	ldr	r0, [r0, #0]
 8010218:	9301      	str	r3, [sp, #4]
 801021a:	f000 f895 	bl	8010348 <_vfiprintf_r>
 801021e:	b002      	add	sp, #8
 8010220:	f85d eb04 	ldr.w	lr, [sp], #4
 8010224:	b003      	add	sp, #12
 8010226:	4770      	bx	lr
 8010228:	200001a8 	.word	0x200001a8

0801022c <__ascii_mbtowc>:
 801022c:	b082      	sub	sp, #8
 801022e:	b901      	cbnz	r1, 8010232 <__ascii_mbtowc+0x6>
 8010230:	a901      	add	r1, sp, #4
 8010232:	b142      	cbz	r2, 8010246 <__ascii_mbtowc+0x1a>
 8010234:	b14b      	cbz	r3, 801024a <__ascii_mbtowc+0x1e>
 8010236:	7813      	ldrb	r3, [r2, #0]
 8010238:	600b      	str	r3, [r1, #0]
 801023a:	7812      	ldrb	r2, [r2, #0]
 801023c:	1e10      	subs	r0, r2, #0
 801023e:	bf18      	it	ne
 8010240:	2001      	movne	r0, #1
 8010242:	b002      	add	sp, #8
 8010244:	4770      	bx	lr
 8010246:	4610      	mov	r0, r2
 8010248:	e7fb      	b.n	8010242 <__ascii_mbtowc+0x16>
 801024a:	f06f 0001 	mvn.w	r0, #1
 801024e:	e7f8      	b.n	8010242 <__ascii_mbtowc+0x16>

08010250 <memmove>:
 8010250:	4288      	cmp	r0, r1
 8010252:	b510      	push	{r4, lr}
 8010254:	eb01 0402 	add.w	r4, r1, r2
 8010258:	d902      	bls.n	8010260 <memmove+0x10>
 801025a:	4284      	cmp	r4, r0
 801025c:	4623      	mov	r3, r4
 801025e:	d807      	bhi.n	8010270 <memmove+0x20>
 8010260:	1e43      	subs	r3, r0, #1
 8010262:	42a1      	cmp	r1, r4
 8010264:	d008      	beq.n	8010278 <memmove+0x28>
 8010266:	f811 2b01 	ldrb.w	r2, [r1], #1
 801026a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801026e:	e7f8      	b.n	8010262 <memmove+0x12>
 8010270:	4601      	mov	r1, r0
 8010272:	4402      	add	r2, r0
 8010274:	428a      	cmp	r2, r1
 8010276:	d100      	bne.n	801027a <memmove+0x2a>
 8010278:	bd10      	pop	{r4, pc}
 801027a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801027e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010282:	e7f7      	b.n	8010274 <memmove+0x24>

08010284 <__malloc_lock>:
 8010284:	4801      	ldr	r0, [pc, #4]	; (801028c <__malloc_lock+0x8>)
 8010286:	f000 bc19 	b.w	8010abc <__retarget_lock_acquire_recursive>
 801028a:	bf00      	nop
 801028c:	200018c8 	.word	0x200018c8

08010290 <__malloc_unlock>:
 8010290:	4801      	ldr	r0, [pc, #4]	; (8010298 <__malloc_unlock+0x8>)
 8010292:	f000 bc14 	b.w	8010abe <__retarget_lock_release_recursive>
 8010296:	bf00      	nop
 8010298:	200018c8 	.word	0x200018c8

0801029c <_realloc_r>:
 801029c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a0:	4680      	mov	r8, r0
 80102a2:	4614      	mov	r4, r2
 80102a4:	460e      	mov	r6, r1
 80102a6:	b921      	cbnz	r1, 80102b2 <_realloc_r+0x16>
 80102a8:	4611      	mov	r1, r2
 80102aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102ae:	f7ff bdad 	b.w	800fe0c <_malloc_r>
 80102b2:	b92a      	cbnz	r2, 80102c0 <_realloc_r+0x24>
 80102b4:	f7ff fd42 	bl	800fd3c <_free_r>
 80102b8:	4625      	mov	r5, r4
 80102ba:	4628      	mov	r0, r5
 80102bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c0:	f000 fc64 	bl	8010b8c <_malloc_usable_size_r>
 80102c4:	4284      	cmp	r4, r0
 80102c6:	4607      	mov	r7, r0
 80102c8:	d802      	bhi.n	80102d0 <_realloc_r+0x34>
 80102ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80102ce:	d812      	bhi.n	80102f6 <_realloc_r+0x5a>
 80102d0:	4621      	mov	r1, r4
 80102d2:	4640      	mov	r0, r8
 80102d4:	f7ff fd9a 	bl	800fe0c <_malloc_r>
 80102d8:	4605      	mov	r5, r0
 80102da:	2800      	cmp	r0, #0
 80102dc:	d0ed      	beq.n	80102ba <_realloc_r+0x1e>
 80102de:	42bc      	cmp	r4, r7
 80102e0:	4622      	mov	r2, r4
 80102e2:	4631      	mov	r1, r6
 80102e4:	bf28      	it	cs
 80102e6:	463a      	movcs	r2, r7
 80102e8:	f7fd fe44 	bl	800df74 <memcpy>
 80102ec:	4631      	mov	r1, r6
 80102ee:	4640      	mov	r0, r8
 80102f0:	f7ff fd24 	bl	800fd3c <_free_r>
 80102f4:	e7e1      	b.n	80102ba <_realloc_r+0x1e>
 80102f6:	4635      	mov	r5, r6
 80102f8:	e7df      	b.n	80102ba <_realloc_r+0x1e>

080102fa <__sfputc_r>:
 80102fa:	6893      	ldr	r3, [r2, #8]
 80102fc:	b410      	push	{r4}
 80102fe:	3b01      	subs	r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	6093      	str	r3, [r2, #8]
 8010304:	da07      	bge.n	8010316 <__sfputc_r+0x1c>
 8010306:	6994      	ldr	r4, [r2, #24]
 8010308:	42a3      	cmp	r3, r4
 801030a:	db01      	blt.n	8010310 <__sfputc_r+0x16>
 801030c:	290a      	cmp	r1, #10
 801030e:	d102      	bne.n	8010316 <__sfputc_r+0x1c>
 8010310:	bc10      	pop	{r4}
 8010312:	f000 b949 	b.w	80105a8 <__swbuf_r>
 8010316:	6813      	ldr	r3, [r2, #0]
 8010318:	1c58      	adds	r0, r3, #1
 801031a:	6010      	str	r0, [r2, #0]
 801031c:	7019      	strb	r1, [r3, #0]
 801031e:	4608      	mov	r0, r1
 8010320:	bc10      	pop	{r4}
 8010322:	4770      	bx	lr

08010324 <__sfputs_r>:
 8010324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010326:	4606      	mov	r6, r0
 8010328:	460f      	mov	r7, r1
 801032a:	4614      	mov	r4, r2
 801032c:	18d5      	adds	r5, r2, r3
 801032e:	42ac      	cmp	r4, r5
 8010330:	d101      	bne.n	8010336 <__sfputs_r+0x12>
 8010332:	2000      	movs	r0, #0
 8010334:	e007      	b.n	8010346 <__sfputs_r+0x22>
 8010336:	463a      	mov	r2, r7
 8010338:	4630      	mov	r0, r6
 801033a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033e:	f7ff ffdc 	bl	80102fa <__sfputc_r>
 8010342:	1c43      	adds	r3, r0, #1
 8010344:	d1f3      	bne.n	801032e <__sfputs_r+0xa>
 8010346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010348 <_vfiprintf_r>:
 8010348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801034c:	460d      	mov	r5, r1
 801034e:	4614      	mov	r4, r2
 8010350:	4698      	mov	r8, r3
 8010352:	4606      	mov	r6, r0
 8010354:	b09d      	sub	sp, #116	; 0x74
 8010356:	b118      	cbz	r0, 8010360 <_vfiprintf_r+0x18>
 8010358:	6983      	ldr	r3, [r0, #24]
 801035a:	b90b      	cbnz	r3, 8010360 <_vfiprintf_r+0x18>
 801035c:	f000 fb10 	bl	8010980 <__sinit>
 8010360:	4b89      	ldr	r3, [pc, #548]	; (8010588 <_vfiprintf_r+0x240>)
 8010362:	429d      	cmp	r5, r3
 8010364:	d11b      	bne.n	801039e <_vfiprintf_r+0x56>
 8010366:	6875      	ldr	r5, [r6, #4]
 8010368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801036a:	07d9      	lsls	r1, r3, #31
 801036c:	d405      	bmi.n	801037a <_vfiprintf_r+0x32>
 801036e:	89ab      	ldrh	r3, [r5, #12]
 8010370:	059a      	lsls	r2, r3, #22
 8010372:	d402      	bmi.n	801037a <_vfiprintf_r+0x32>
 8010374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010376:	f000 fba1 	bl	8010abc <__retarget_lock_acquire_recursive>
 801037a:	89ab      	ldrh	r3, [r5, #12]
 801037c:	071b      	lsls	r3, r3, #28
 801037e:	d501      	bpl.n	8010384 <_vfiprintf_r+0x3c>
 8010380:	692b      	ldr	r3, [r5, #16]
 8010382:	b9eb      	cbnz	r3, 80103c0 <_vfiprintf_r+0x78>
 8010384:	4629      	mov	r1, r5
 8010386:	4630      	mov	r0, r6
 8010388:	f000 f96e 	bl	8010668 <__swsetup_r>
 801038c:	b1c0      	cbz	r0, 80103c0 <_vfiprintf_r+0x78>
 801038e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010390:	07dc      	lsls	r4, r3, #31
 8010392:	d50e      	bpl.n	80103b2 <_vfiprintf_r+0x6a>
 8010394:	f04f 30ff 	mov.w	r0, #4294967295
 8010398:	b01d      	add	sp, #116	; 0x74
 801039a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039e:	4b7b      	ldr	r3, [pc, #492]	; (801058c <_vfiprintf_r+0x244>)
 80103a0:	429d      	cmp	r5, r3
 80103a2:	d101      	bne.n	80103a8 <_vfiprintf_r+0x60>
 80103a4:	68b5      	ldr	r5, [r6, #8]
 80103a6:	e7df      	b.n	8010368 <_vfiprintf_r+0x20>
 80103a8:	4b79      	ldr	r3, [pc, #484]	; (8010590 <_vfiprintf_r+0x248>)
 80103aa:	429d      	cmp	r5, r3
 80103ac:	bf08      	it	eq
 80103ae:	68f5      	ldreq	r5, [r6, #12]
 80103b0:	e7da      	b.n	8010368 <_vfiprintf_r+0x20>
 80103b2:	89ab      	ldrh	r3, [r5, #12]
 80103b4:	0598      	lsls	r0, r3, #22
 80103b6:	d4ed      	bmi.n	8010394 <_vfiprintf_r+0x4c>
 80103b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ba:	f000 fb80 	bl	8010abe <__retarget_lock_release_recursive>
 80103be:	e7e9      	b.n	8010394 <_vfiprintf_r+0x4c>
 80103c0:	2300      	movs	r3, #0
 80103c2:	9309      	str	r3, [sp, #36]	; 0x24
 80103c4:	2320      	movs	r3, #32
 80103c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103ca:	2330      	movs	r3, #48	; 0x30
 80103cc:	f04f 0901 	mov.w	r9, #1
 80103d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80103d4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010594 <_vfiprintf_r+0x24c>
 80103d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103dc:	4623      	mov	r3, r4
 80103de:	469a      	mov	sl, r3
 80103e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e4:	b10a      	cbz	r2, 80103ea <_vfiprintf_r+0xa2>
 80103e6:	2a25      	cmp	r2, #37	; 0x25
 80103e8:	d1f9      	bne.n	80103de <_vfiprintf_r+0x96>
 80103ea:	ebba 0b04 	subs.w	fp, sl, r4
 80103ee:	d00b      	beq.n	8010408 <_vfiprintf_r+0xc0>
 80103f0:	465b      	mov	r3, fp
 80103f2:	4622      	mov	r2, r4
 80103f4:	4629      	mov	r1, r5
 80103f6:	4630      	mov	r0, r6
 80103f8:	f7ff ff94 	bl	8010324 <__sfputs_r>
 80103fc:	3001      	adds	r0, #1
 80103fe:	f000 80aa 	beq.w	8010556 <_vfiprintf_r+0x20e>
 8010402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010404:	445a      	add	r2, fp
 8010406:	9209      	str	r2, [sp, #36]	; 0x24
 8010408:	f89a 3000 	ldrb.w	r3, [sl]
 801040c:	2b00      	cmp	r3, #0
 801040e:	f000 80a2 	beq.w	8010556 <_vfiprintf_r+0x20e>
 8010412:	2300      	movs	r3, #0
 8010414:	f04f 32ff 	mov.w	r2, #4294967295
 8010418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801041c:	f10a 0a01 	add.w	sl, sl, #1
 8010420:	9304      	str	r3, [sp, #16]
 8010422:	9307      	str	r3, [sp, #28]
 8010424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010428:	931a      	str	r3, [sp, #104]	; 0x68
 801042a:	4654      	mov	r4, sl
 801042c:	2205      	movs	r2, #5
 801042e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010432:	4858      	ldr	r0, [pc, #352]	; (8010594 <_vfiprintf_r+0x24c>)
 8010434:	f7ff f8de 	bl	800f5f4 <memchr>
 8010438:	9a04      	ldr	r2, [sp, #16]
 801043a:	b9d8      	cbnz	r0, 8010474 <_vfiprintf_r+0x12c>
 801043c:	06d1      	lsls	r1, r2, #27
 801043e:	bf44      	itt	mi
 8010440:	2320      	movmi	r3, #32
 8010442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010446:	0713      	lsls	r3, r2, #28
 8010448:	bf44      	itt	mi
 801044a:	232b      	movmi	r3, #43	; 0x2b
 801044c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010450:	f89a 3000 	ldrb.w	r3, [sl]
 8010454:	2b2a      	cmp	r3, #42	; 0x2a
 8010456:	d015      	beq.n	8010484 <_vfiprintf_r+0x13c>
 8010458:	4654      	mov	r4, sl
 801045a:	2000      	movs	r0, #0
 801045c:	f04f 0c0a 	mov.w	ip, #10
 8010460:	9a07      	ldr	r2, [sp, #28]
 8010462:	4621      	mov	r1, r4
 8010464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010468:	3b30      	subs	r3, #48	; 0x30
 801046a:	2b09      	cmp	r3, #9
 801046c:	d94e      	bls.n	801050c <_vfiprintf_r+0x1c4>
 801046e:	b1b0      	cbz	r0, 801049e <_vfiprintf_r+0x156>
 8010470:	9207      	str	r2, [sp, #28]
 8010472:	e014      	b.n	801049e <_vfiprintf_r+0x156>
 8010474:	eba0 0308 	sub.w	r3, r0, r8
 8010478:	fa09 f303 	lsl.w	r3, r9, r3
 801047c:	4313      	orrs	r3, r2
 801047e:	46a2      	mov	sl, r4
 8010480:	9304      	str	r3, [sp, #16]
 8010482:	e7d2      	b.n	801042a <_vfiprintf_r+0xe2>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	1d19      	adds	r1, r3, #4
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	9103      	str	r1, [sp, #12]
 801048c:	2b00      	cmp	r3, #0
 801048e:	bfbb      	ittet	lt
 8010490:	425b      	neglt	r3, r3
 8010492:	f042 0202 	orrlt.w	r2, r2, #2
 8010496:	9307      	strge	r3, [sp, #28]
 8010498:	9307      	strlt	r3, [sp, #28]
 801049a:	bfb8      	it	lt
 801049c:	9204      	strlt	r2, [sp, #16]
 801049e:	7823      	ldrb	r3, [r4, #0]
 80104a0:	2b2e      	cmp	r3, #46	; 0x2e
 80104a2:	d10c      	bne.n	80104be <_vfiprintf_r+0x176>
 80104a4:	7863      	ldrb	r3, [r4, #1]
 80104a6:	2b2a      	cmp	r3, #42	; 0x2a
 80104a8:	d135      	bne.n	8010516 <_vfiprintf_r+0x1ce>
 80104aa:	9b03      	ldr	r3, [sp, #12]
 80104ac:	3402      	adds	r4, #2
 80104ae:	1d1a      	adds	r2, r3, #4
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	9203      	str	r2, [sp, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	bfb8      	it	lt
 80104b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80104bc:	9305      	str	r3, [sp, #20]
 80104be:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8010598 <_vfiprintf_r+0x250>
 80104c2:	2203      	movs	r2, #3
 80104c4:	4650      	mov	r0, sl
 80104c6:	7821      	ldrb	r1, [r4, #0]
 80104c8:	f7ff f894 	bl	800f5f4 <memchr>
 80104cc:	b140      	cbz	r0, 80104e0 <_vfiprintf_r+0x198>
 80104ce:	2340      	movs	r3, #64	; 0x40
 80104d0:	eba0 000a 	sub.w	r0, r0, sl
 80104d4:	fa03 f000 	lsl.w	r0, r3, r0
 80104d8:	9b04      	ldr	r3, [sp, #16]
 80104da:	3401      	adds	r4, #1
 80104dc:	4303      	orrs	r3, r0
 80104de:	9304      	str	r3, [sp, #16]
 80104e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e4:	2206      	movs	r2, #6
 80104e6:	482d      	ldr	r0, [pc, #180]	; (801059c <_vfiprintf_r+0x254>)
 80104e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104ec:	f7ff f882 	bl	800f5f4 <memchr>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d03f      	beq.n	8010574 <_vfiprintf_r+0x22c>
 80104f4:	4b2a      	ldr	r3, [pc, #168]	; (80105a0 <_vfiprintf_r+0x258>)
 80104f6:	bb1b      	cbnz	r3, 8010540 <_vfiprintf_r+0x1f8>
 80104f8:	9b03      	ldr	r3, [sp, #12]
 80104fa:	3307      	adds	r3, #7
 80104fc:	f023 0307 	bic.w	r3, r3, #7
 8010500:	3308      	adds	r3, #8
 8010502:	9303      	str	r3, [sp, #12]
 8010504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010506:	443b      	add	r3, r7
 8010508:	9309      	str	r3, [sp, #36]	; 0x24
 801050a:	e767      	b.n	80103dc <_vfiprintf_r+0x94>
 801050c:	460c      	mov	r4, r1
 801050e:	2001      	movs	r0, #1
 8010510:	fb0c 3202 	mla	r2, ip, r2, r3
 8010514:	e7a5      	b.n	8010462 <_vfiprintf_r+0x11a>
 8010516:	2300      	movs	r3, #0
 8010518:	f04f 0c0a 	mov.w	ip, #10
 801051c:	4619      	mov	r1, r3
 801051e:	3401      	adds	r4, #1
 8010520:	9305      	str	r3, [sp, #20]
 8010522:	4620      	mov	r0, r4
 8010524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010528:	3a30      	subs	r2, #48	; 0x30
 801052a:	2a09      	cmp	r2, #9
 801052c:	d903      	bls.n	8010536 <_vfiprintf_r+0x1ee>
 801052e:	2b00      	cmp	r3, #0
 8010530:	d0c5      	beq.n	80104be <_vfiprintf_r+0x176>
 8010532:	9105      	str	r1, [sp, #20]
 8010534:	e7c3      	b.n	80104be <_vfiprintf_r+0x176>
 8010536:	4604      	mov	r4, r0
 8010538:	2301      	movs	r3, #1
 801053a:	fb0c 2101 	mla	r1, ip, r1, r2
 801053e:	e7f0      	b.n	8010522 <_vfiprintf_r+0x1da>
 8010540:	ab03      	add	r3, sp, #12
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	462a      	mov	r2, r5
 8010546:	4630      	mov	r0, r6
 8010548:	4b16      	ldr	r3, [pc, #88]	; (80105a4 <_vfiprintf_r+0x25c>)
 801054a:	a904      	add	r1, sp, #16
 801054c:	f7fd fdc6 	bl	800e0dc <_printf_float>
 8010550:	4607      	mov	r7, r0
 8010552:	1c78      	adds	r0, r7, #1
 8010554:	d1d6      	bne.n	8010504 <_vfiprintf_r+0x1bc>
 8010556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010558:	07d9      	lsls	r1, r3, #31
 801055a:	d405      	bmi.n	8010568 <_vfiprintf_r+0x220>
 801055c:	89ab      	ldrh	r3, [r5, #12]
 801055e:	059a      	lsls	r2, r3, #22
 8010560:	d402      	bmi.n	8010568 <_vfiprintf_r+0x220>
 8010562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010564:	f000 faab 	bl	8010abe <__retarget_lock_release_recursive>
 8010568:	89ab      	ldrh	r3, [r5, #12]
 801056a:	065b      	lsls	r3, r3, #25
 801056c:	f53f af12 	bmi.w	8010394 <_vfiprintf_r+0x4c>
 8010570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010572:	e711      	b.n	8010398 <_vfiprintf_r+0x50>
 8010574:	ab03      	add	r3, sp, #12
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	462a      	mov	r2, r5
 801057a:	4630      	mov	r0, r6
 801057c:	4b09      	ldr	r3, [pc, #36]	; (80105a4 <_vfiprintf_r+0x25c>)
 801057e:	a904      	add	r1, sp, #16
 8010580:	f7fe f848 	bl	800e614 <_printf_i>
 8010584:	e7e4      	b.n	8010550 <_vfiprintf_r+0x208>
 8010586:	bf00      	nop
 8010588:	08011264 	.word	0x08011264
 801058c:	08011284 	.word	0x08011284
 8010590:	08011244 	.word	0x08011244
 8010594:	080110ec 	.word	0x080110ec
 8010598:	080110f2 	.word	0x080110f2
 801059c:	080110f6 	.word	0x080110f6
 80105a0:	0800e0dd 	.word	0x0800e0dd
 80105a4:	08010325 	.word	0x08010325

080105a8 <__swbuf_r>:
 80105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105aa:	460e      	mov	r6, r1
 80105ac:	4614      	mov	r4, r2
 80105ae:	4605      	mov	r5, r0
 80105b0:	b118      	cbz	r0, 80105ba <__swbuf_r+0x12>
 80105b2:	6983      	ldr	r3, [r0, #24]
 80105b4:	b90b      	cbnz	r3, 80105ba <__swbuf_r+0x12>
 80105b6:	f000 f9e3 	bl	8010980 <__sinit>
 80105ba:	4b21      	ldr	r3, [pc, #132]	; (8010640 <__swbuf_r+0x98>)
 80105bc:	429c      	cmp	r4, r3
 80105be:	d12b      	bne.n	8010618 <__swbuf_r+0x70>
 80105c0:	686c      	ldr	r4, [r5, #4]
 80105c2:	69a3      	ldr	r3, [r4, #24]
 80105c4:	60a3      	str	r3, [r4, #8]
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	071a      	lsls	r2, r3, #28
 80105ca:	d52f      	bpl.n	801062c <__swbuf_r+0x84>
 80105cc:	6923      	ldr	r3, [r4, #16]
 80105ce:	b36b      	cbz	r3, 801062c <__swbuf_r+0x84>
 80105d0:	6923      	ldr	r3, [r4, #16]
 80105d2:	6820      	ldr	r0, [r4, #0]
 80105d4:	b2f6      	uxtb	r6, r6
 80105d6:	1ac0      	subs	r0, r0, r3
 80105d8:	6963      	ldr	r3, [r4, #20]
 80105da:	4637      	mov	r7, r6
 80105dc:	4283      	cmp	r3, r0
 80105de:	dc04      	bgt.n	80105ea <__swbuf_r+0x42>
 80105e0:	4621      	mov	r1, r4
 80105e2:	4628      	mov	r0, r5
 80105e4:	f000 f938 	bl	8010858 <_fflush_r>
 80105e8:	bb30      	cbnz	r0, 8010638 <__swbuf_r+0x90>
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	3001      	adds	r0, #1
 80105ee:	3b01      	subs	r3, #1
 80105f0:	60a3      	str	r3, [r4, #8]
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	1c5a      	adds	r2, r3, #1
 80105f6:	6022      	str	r2, [r4, #0]
 80105f8:	701e      	strb	r6, [r3, #0]
 80105fa:	6963      	ldr	r3, [r4, #20]
 80105fc:	4283      	cmp	r3, r0
 80105fe:	d004      	beq.n	801060a <__swbuf_r+0x62>
 8010600:	89a3      	ldrh	r3, [r4, #12]
 8010602:	07db      	lsls	r3, r3, #31
 8010604:	d506      	bpl.n	8010614 <__swbuf_r+0x6c>
 8010606:	2e0a      	cmp	r6, #10
 8010608:	d104      	bne.n	8010614 <__swbuf_r+0x6c>
 801060a:	4621      	mov	r1, r4
 801060c:	4628      	mov	r0, r5
 801060e:	f000 f923 	bl	8010858 <_fflush_r>
 8010612:	b988      	cbnz	r0, 8010638 <__swbuf_r+0x90>
 8010614:	4638      	mov	r0, r7
 8010616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010618:	4b0a      	ldr	r3, [pc, #40]	; (8010644 <__swbuf_r+0x9c>)
 801061a:	429c      	cmp	r4, r3
 801061c:	d101      	bne.n	8010622 <__swbuf_r+0x7a>
 801061e:	68ac      	ldr	r4, [r5, #8]
 8010620:	e7cf      	b.n	80105c2 <__swbuf_r+0x1a>
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <__swbuf_r+0xa0>)
 8010624:	429c      	cmp	r4, r3
 8010626:	bf08      	it	eq
 8010628:	68ec      	ldreq	r4, [r5, #12]
 801062a:	e7ca      	b.n	80105c2 <__swbuf_r+0x1a>
 801062c:	4621      	mov	r1, r4
 801062e:	4628      	mov	r0, r5
 8010630:	f000 f81a 	bl	8010668 <__swsetup_r>
 8010634:	2800      	cmp	r0, #0
 8010636:	d0cb      	beq.n	80105d0 <__swbuf_r+0x28>
 8010638:	f04f 37ff 	mov.w	r7, #4294967295
 801063c:	e7ea      	b.n	8010614 <__swbuf_r+0x6c>
 801063e:	bf00      	nop
 8010640:	08011264 	.word	0x08011264
 8010644:	08011284 	.word	0x08011284
 8010648:	08011244 	.word	0x08011244

0801064c <__ascii_wctomb>:
 801064c:	4603      	mov	r3, r0
 801064e:	4608      	mov	r0, r1
 8010650:	b141      	cbz	r1, 8010664 <__ascii_wctomb+0x18>
 8010652:	2aff      	cmp	r2, #255	; 0xff
 8010654:	d904      	bls.n	8010660 <__ascii_wctomb+0x14>
 8010656:	228a      	movs	r2, #138	; 0x8a
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	4770      	bx	lr
 8010660:	2001      	movs	r0, #1
 8010662:	700a      	strb	r2, [r1, #0]
 8010664:	4770      	bx	lr
	...

08010668 <__swsetup_r>:
 8010668:	4b32      	ldr	r3, [pc, #200]	; (8010734 <__swsetup_r+0xcc>)
 801066a:	b570      	push	{r4, r5, r6, lr}
 801066c:	681d      	ldr	r5, [r3, #0]
 801066e:	4606      	mov	r6, r0
 8010670:	460c      	mov	r4, r1
 8010672:	b125      	cbz	r5, 801067e <__swsetup_r+0x16>
 8010674:	69ab      	ldr	r3, [r5, #24]
 8010676:	b913      	cbnz	r3, 801067e <__swsetup_r+0x16>
 8010678:	4628      	mov	r0, r5
 801067a:	f000 f981 	bl	8010980 <__sinit>
 801067e:	4b2e      	ldr	r3, [pc, #184]	; (8010738 <__swsetup_r+0xd0>)
 8010680:	429c      	cmp	r4, r3
 8010682:	d10f      	bne.n	80106a4 <__swsetup_r+0x3c>
 8010684:	686c      	ldr	r4, [r5, #4]
 8010686:	89a3      	ldrh	r3, [r4, #12]
 8010688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801068c:	0719      	lsls	r1, r3, #28
 801068e:	d42c      	bmi.n	80106ea <__swsetup_r+0x82>
 8010690:	06dd      	lsls	r5, r3, #27
 8010692:	d411      	bmi.n	80106b8 <__swsetup_r+0x50>
 8010694:	2309      	movs	r3, #9
 8010696:	6033      	str	r3, [r6, #0]
 8010698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801069c:	f04f 30ff 	mov.w	r0, #4294967295
 80106a0:	81a3      	strh	r3, [r4, #12]
 80106a2:	e03e      	b.n	8010722 <__swsetup_r+0xba>
 80106a4:	4b25      	ldr	r3, [pc, #148]	; (801073c <__swsetup_r+0xd4>)
 80106a6:	429c      	cmp	r4, r3
 80106a8:	d101      	bne.n	80106ae <__swsetup_r+0x46>
 80106aa:	68ac      	ldr	r4, [r5, #8]
 80106ac:	e7eb      	b.n	8010686 <__swsetup_r+0x1e>
 80106ae:	4b24      	ldr	r3, [pc, #144]	; (8010740 <__swsetup_r+0xd8>)
 80106b0:	429c      	cmp	r4, r3
 80106b2:	bf08      	it	eq
 80106b4:	68ec      	ldreq	r4, [r5, #12]
 80106b6:	e7e6      	b.n	8010686 <__swsetup_r+0x1e>
 80106b8:	0758      	lsls	r0, r3, #29
 80106ba:	d512      	bpl.n	80106e2 <__swsetup_r+0x7a>
 80106bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106be:	b141      	cbz	r1, 80106d2 <__swsetup_r+0x6a>
 80106c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106c4:	4299      	cmp	r1, r3
 80106c6:	d002      	beq.n	80106ce <__swsetup_r+0x66>
 80106c8:	4630      	mov	r0, r6
 80106ca:	f7ff fb37 	bl	800fd3c <_free_r>
 80106ce:	2300      	movs	r3, #0
 80106d0:	6363      	str	r3, [r4, #52]	; 0x34
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80106d8:	81a3      	strh	r3, [r4, #12]
 80106da:	2300      	movs	r3, #0
 80106dc:	6063      	str	r3, [r4, #4]
 80106de:	6923      	ldr	r3, [r4, #16]
 80106e0:	6023      	str	r3, [r4, #0]
 80106e2:	89a3      	ldrh	r3, [r4, #12]
 80106e4:	f043 0308 	orr.w	r3, r3, #8
 80106e8:	81a3      	strh	r3, [r4, #12]
 80106ea:	6923      	ldr	r3, [r4, #16]
 80106ec:	b94b      	cbnz	r3, 8010702 <__swsetup_r+0x9a>
 80106ee:	89a3      	ldrh	r3, [r4, #12]
 80106f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106f8:	d003      	beq.n	8010702 <__swsetup_r+0x9a>
 80106fa:	4621      	mov	r1, r4
 80106fc:	4630      	mov	r0, r6
 80106fe:	f000 fa05 	bl	8010b0c <__smakebuf_r>
 8010702:	89a0      	ldrh	r0, [r4, #12]
 8010704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010708:	f010 0301 	ands.w	r3, r0, #1
 801070c:	d00a      	beq.n	8010724 <__swsetup_r+0xbc>
 801070e:	2300      	movs	r3, #0
 8010710:	60a3      	str	r3, [r4, #8]
 8010712:	6963      	ldr	r3, [r4, #20]
 8010714:	425b      	negs	r3, r3
 8010716:	61a3      	str	r3, [r4, #24]
 8010718:	6923      	ldr	r3, [r4, #16]
 801071a:	b943      	cbnz	r3, 801072e <__swsetup_r+0xc6>
 801071c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010720:	d1ba      	bne.n	8010698 <__swsetup_r+0x30>
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	0781      	lsls	r1, r0, #30
 8010726:	bf58      	it	pl
 8010728:	6963      	ldrpl	r3, [r4, #20]
 801072a:	60a3      	str	r3, [r4, #8]
 801072c:	e7f4      	b.n	8010718 <__swsetup_r+0xb0>
 801072e:	2000      	movs	r0, #0
 8010730:	e7f7      	b.n	8010722 <__swsetup_r+0xba>
 8010732:	bf00      	nop
 8010734:	200001a8 	.word	0x200001a8
 8010738:	08011264 	.word	0x08011264
 801073c:	08011284 	.word	0x08011284
 8010740:	08011244 	.word	0x08011244

08010744 <abort>:
 8010744:	2006      	movs	r0, #6
 8010746:	b508      	push	{r3, lr}
 8010748:	f000 fa50 	bl	8010bec <raise>
 801074c:	2001      	movs	r0, #1
 801074e:	f7f3 fb6c 	bl	8003e2a <_exit>
	...

08010754 <__sflush_r>:
 8010754:	898a      	ldrh	r2, [r1, #12]
 8010756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010758:	4605      	mov	r5, r0
 801075a:	0710      	lsls	r0, r2, #28
 801075c:	460c      	mov	r4, r1
 801075e:	d457      	bmi.n	8010810 <__sflush_r+0xbc>
 8010760:	684b      	ldr	r3, [r1, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	dc04      	bgt.n	8010770 <__sflush_r+0x1c>
 8010766:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010768:	2b00      	cmp	r3, #0
 801076a:	dc01      	bgt.n	8010770 <__sflush_r+0x1c>
 801076c:	2000      	movs	r0, #0
 801076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010772:	2e00      	cmp	r6, #0
 8010774:	d0fa      	beq.n	801076c <__sflush_r+0x18>
 8010776:	2300      	movs	r3, #0
 8010778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801077c:	682f      	ldr	r7, [r5, #0]
 801077e:	602b      	str	r3, [r5, #0]
 8010780:	d032      	beq.n	80107e8 <__sflush_r+0x94>
 8010782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	075a      	lsls	r2, r3, #29
 8010788:	d505      	bpl.n	8010796 <__sflush_r+0x42>
 801078a:	6863      	ldr	r3, [r4, #4]
 801078c:	1ac0      	subs	r0, r0, r3
 801078e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010790:	b10b      	cbz	r3, 8010796 <__sflush_r+0x42>
 8010792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010794:	1ac0      	subs	r0, r0, r3
 8010796:	2300      	movs	r3, #0
 8010798:	4602      	mov	r2, r0
 801079a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801079c:	4628      	mov	r0, r5
 801079e:	6a21      	ldr	r1, [r4, #32]
 80107a0:	47b0      	blx	r6
 80107a2:	1c43      	adds	r3, r0, #1
 80107a4:	89a3      	ldrh	r3, [r4, #12]
 80107a6:	d106      	bne.n	80107b6 <__sflush_r+0x62>
 80107a8:	6829      	ldr	r1, [r5, #0]
 80107aa:	291d      	cmp	r1, #29
 80107ac:	d82c      	bhi.n	8010808 <__sflush_r+0xb4>
 80107ae:	4a29      	ldr	r2, [pc, #164]	; (8010854 <__sflush_r+0x100>)
 80107b0:	40ca      	lsrs	r2, r1
 80107b2:	07d6      	lsls	r6, r2, #31
 80107b4:	d528      	bpl.n	8010808 <__sflush_r+0xb4>
 80107b6:	2200      	movs	r2, #0
 80107b8:	6062      	str	r2, [r4, #4]
 80107ba:	6922      	ldr	r2, [r4, #16]
 80107bc:	04d9      	lsls	r1, r3, #19
 80107be:	6022      	str	r2, [r4, #0]
 80107c0:	d504      	bpl.n	80107cc <__sflush_r+0x78>
 80107c2:	1c42      	adds	r2, r0, #1
 80107c4:	d101      	bne.n	80107ca <__sflush_r+0x76>
 80107c6:	682b      	ldr	r3, [r5, #0]
 80107c8:	b903      	cbnz	r3, 80107cc <__sflush_r+0x78>
 80107ca:	6560      	str	r0, [r4, #84]	; 0x54
 80107cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107ce:	602f      	str	r7, [r5, #0]
 80107d0:	2900      	cmp	r1, #0
 80107d2:	d0cb      	beq.n	801076c <__sflush_r+0x18>
 80107d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107d8:	4299      	cmp	r1, r3
 80107da:	d002      	beq.n	80107e2 <__sflush_r+0x8e>
 80107dc:	4628      	mov	r0, r5
 80107de:	f7ff faad 	bl	800fd3c <_free_r>
 80107e2:	2000      	movs	r0, #0
 80107e4:	6360      	str	r0, [r4, #52]	; 0x34
 80107e6:	e7c2      	b.n	801076e <__sflush_r+0x1a>
 80107e8:	6a21      	ldr	r1, [r4, #32]
 80107ea:	2301      	movs	r3, #1
 80107ec:	4628      	mov	r0, r5
 80107ee:	47b0      	blx	r6
 80107f0:	1c41      	adds	r1, r0, #1
 80107f2:	d1c7      	bne.n	8010784 <__sflush_r+0x30>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d0c4      	beq.n	8010784 <__sflush_r+0x30>
 80107fa:	2b1d      	cmp	r3, #29
 80107fc:	d001      	beq.n	8010802 <__sflush_r+0xae>
 80107fe:	2b16      	cmp	r3, #22
 8010800:	d101      	bne.n	8010806 <__sflush_r+0xb2>
 8010802:	602f      	str	r7, [r5, #0]
 8010804:	e7b2      	b.n	801076c <__sflush_r+0x18>
 8010806:	89a3      	ldrh	r3, [r4, #12]
 8010808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	e7ae      	b.n	801076e <__sflush_r+0x1a>
 8010810:	690f      	ldr	r7, [r1, #16]
 8010812:	2f00      	cmp	r7, #0
 8010814:	d0aa      	beq.n	801076c <__sflush_r+0x18>
 8010816:	0793      	lsls	r3, r2, #30
 8010818:	bf18      	it	ne
 801081a:	2300      	movne	r3, #0
 801081c:	680e      	ldr	r6, [r1, #0]
 801081e:	bf08      	it	eq
 8010820:	694b      	ldreq	r3, [r1, #20]
 8010822:	1bf6      	subs	r6, r6, r7
 8010824:	600f      	str	r7, [r1, #0]
 8010826:	608b      	str	r3, [r1, #8]
 8010828:	2e00      	cmp	r6, #0
 801082a:	dd9f      	ble.n	801076c <__sflush_r+0x18>
 801082c:	4633      	mov	r3, r6
 801082e:	463a      	mov	r2, r7
 8010830:	4628      	mov	r0, r5
 8010832:	6a21      	ldr	r1, [r4, #32]
 8010834:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010838:	47e0      	blx	ip
 801083a:	2800      	cmp	r0, #0
 801083c:	dc06      	bgt.n	801084c <__sflush_r+0xf8>
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	f04f 30ff 	mov.w	r0, #4294967295
 8010844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010848:	81a3      	strh	r3, [r4, #12]
 801084a:	e790      	b.n	801076e <__sflush_r+0x1a>
 801084c:	4407      	add	r7, r0
 801084e:	1a36      	subs	r6, r6, r0
 8010850:	e7ea      	b.n	8010828 <__sflush_r+0xd4>
 8010852:	bf00      	nop
 8010854:	20400001 	.word	0x20400001

08010858 <_fflush_r>:
 8010858:	b538      	push	{r3, r4, r5, lr}
 801085a:	690b      	ldr	r3, [r1, #16]
 801085c:	4605      	mov	r5, r0
 801085e:	460c      	mov	r4, r1
 8010860:	b913      	cbnz	r3, 8010868 <_fflush_r+0x10>
 8010862:	2500      	movs	r5, #0
 8010864:	4628      	mov	r0, r5
 8010866:	bd38      	pop	{r3, r4, r5, pc}
 8010868:	b118      	cbz	r0, 8010872 <_fflush_r+0x1a>
 801086a:	6983      	ldr	r3, [r0, #24]
 801086c:	b90b      	cbnz	r3, 8010872 <_fflush_r+0x1a>
 801086e:	f000 f887 	bl	8010980 <__sinit>
 8010872:	4b14      	ldr	r3, [pc, #80]	; (80108c4 <_fflush_r+0x6c>)
 8010874:	429c      	cmp	r4, r3
 8010876:	d11b      	bne.n	80108b0 <_fflush_r+0x58>
 8010878:	686c      	ldr	r4, [r5, #4]
 801087a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d0ef      	beq.n	8010862 <_fflush_r+0xa>
 8010882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010884:	07d0      	lsls	r0, r2, #31
 8010886:	d404      	bmi.n	8010892 <_fflush_r+0x3a>
 8010888:	0599      	lsls	r1, r3, #22
 801088a:	d402      	bmi.n	8010892 <_fflush_r+0x3a>
 801088c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801088e:	f000 f915 	bl	8010abc <__retarget_lock_acquire_recursive>
 8010892:	4628      	mov	r0, r5
 8010894:	4621      	mov	r1, r4
 8010896:	f7ff ff5d 	bl	8010754 <__sflush_r>
 801089a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801089c:	4605      	mov	r5, r0
 801089e:	07da      	lsls	r2, r3, #31
 80108a0:	d4e0      	bmi.n	8010864 <_fflush_r+0xc>
 80108a2:	89a3      	ldrh	r3, [r4, #12]
 80108a4:	059b      	lsls	r3, r3, #22
 80108a6:	d4dd      	bmi.n	8010864 <_fflush_r+0xc>
 80108a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108aa:	f000 f908 	bl	8010abe <__retarget_lock_release_recursive>
 80108ae:	e7d9      	b.n	8010864 <_fflush_r+0xc>
 80108b0:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <_fflush_r+0x70>)
 80108b2:	429c      	cmp	r4, r3
 80108b4:	d101      	bne.n	80108ba <_fflush_r+0x62>
 80108b6:	68ac      	ldr	r4, [r5, #8]
 80108b8:	e7df      	b.n	801087a <_fflush_r+0x22>
 80108ba:	4b04      	ldr	r3, [pc, #16]	; (80108cc <_fflush_r+0x74>)
 80108bc:	429c      	cmp	r4, r3
 80108be:	bf08      	it	eq
 80108c0:	68ec      	ldreq	r4, [r5, #12]
 80108c2:	e7da      	b.n	801087a <_fflush_r+0x22>
 80108c4:	08011264 	.word	0x08011264
 80108c8:	08011284 	.word	0x08011284
 80108cc:	08011244 	.word	0x08011244

080108d0 <std>:
 80108d0:	2300      	movs	r3, #0
 80108d2:	b510      	push	{r4, lr}
 80108d4:	4604      	mov	r4, r0
 80108d6:	e9c0 3300 	strd	r3, r3, [r0]
 80108da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108de:	6083      	str	r3, [r0, #8]
 80108e0:	8181      	strh	r1, [r0, #12]
 80108e2:	6643      	str	r3, [r0, #100]	; 0x64
 80108e4:	81c2      	strh	r2, [r0, #14]
 80108e6:	6183      	str	r3, [r0, #24]
 80108e8:	4619      	mov	r1, r3
 80108ea:	2208      	movs	r2, #8
 80108ec:	305c      	adds	r0, #92	; 0x5c
 80108ee:	f7fd fb4f 	bl	800df90 <memset>
 80108f2:	4b05      	ldr	r3, [pc, #20]	; (8010908 <std+0x38>)
 80108f4:	6224      	str	r4, [r4, #32]
 80108f6:	6263      	str	r3, [r4, #36]	; 0x24
 80108f8:	4b04      	ldr	r3, [pc, #16]	; (801090c <std+0x3c>)
 80108fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80108fc:	4b04      	ldr	r3, [pc, #16]	; (8010910 <std+0x40>)
 80108fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010900:	4b04      	ldr	r3, [pc, #16]	; (8010914 <std+0x44>)
 8010902:	6323      	str	r3, [r4, #48]	; 0x30
 8010904:	bd10      	pop	{r4, pc}
 8010906:	bf00      	nop
 8010908:	08010c25 	.word	0x08010c25
 801090c:	08010c47 	.word	0x08010c47
 8010910:	08010c7f 	.word	0x08010c7f
 8010914:	08010ca3 	.word	0x08010ca3

08010918 <_cleanup_r>:
 8010918:	4901      	ldr	r1, [pc, #4]	; (8010920 <_cleanup_r+0x8>)
 801091a:	f000 b8af 	b.w	8010a7c <_fwalk_reent>
 801091e:	bf00      	nop
 8010920:	08010859 	.word	0x08010859

08010924 <__sfmoreglue>:
 8010924:	2268      	movs	r2, #104	; 0x68
 8010926:	b570      	push	{r4, r5, r6, lr}
 8010928:	1e4d      	subs	r5, r1, #1
 801092a:	4355      	muls	r5, r2
 801092c:	460e      	mov	r6, r1
 801092e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010932:	f7ff fa6b 	bl	800fe0c <_malloc_r>
 8010936:	4604      	mov	r4, r0
 8010938:	b140      	cbz	r0, 801094c <__sfmoreglue+0x28>
 801093a:	2100      	movs	r1, #0
 801093c:	e9c0 1600 	strd	r1, r6, [r0]
 8010940:	300c      	adds	r0, #12
 8010942:	60a0      	str	r0, [r4, #8]
 8010944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010948:	f7fd fb22 	bl	800df90 <memset>
 801094c:	4620      	mov	r0, r4
 801094e:	bd70      	pop	{r4, r5, r6, pc}

08010950 <__sfp_lock_acquire>:
 8010950:	4801      	ldr	r0, [pc, #4]	; (8010958 <__sfp_lock_acquire+0x8>)
 8010952:	f000 b8b3 	b.w	8010abc <__retarget_lock_acquire_recursive>
 8010956:	bf00      	nop
 8010958:	200018c9 	.word	0x200018c9

0801095c <__sfp_lock_release>:
 801095c:	4801      	ldr	r0, [pc, #4]	; (8010964 <__sfp_lock_release+0x8>)
 801095e:	f000 b8ae 	b.w	8010abe <__retarget_lock_release_recursive>
 8010962:	bf00      	nop
 8010964:	200018c9 	.word	0x200018c9

08010968 <__sinit_lock_acquire>:
 8010968:	4801      	ldr	r0, [pc, #4]	; (8010970 <__sinit_lock_acquire+0x8>)
 801096a:	f000 b8a7 	b.w	8010abc <__retarget_lock_acquire_recursive>
 801096e:	bf00      	nop
 8010970:	200018ca 	.word	0x200018ca

08010974 <__sinit_lock_release>:
 8010974:	4801      	ldr	r0, [pc, #4]	; (801097c <__sinit_lock_release+0x8>)
 8010976:	f000 b8a2 	b.w	8010abe <__retarget_lock_release_recursive>
 801097a:	bf00      	nop
 801097c:	200018ca 	.word	0x200018ca

08010980 <__sinit>:
 8010980:	b510      	push	{r4, lr}
 8010982:	4604      	mov	r4, r0
 8010984:	f7ff fff0 	bl	8010968 <__sinit_lock_acquire>
 8010988:	69a3      	ldr	r3, [r4, #24]
 801098a:	b11b      	cbz	r3, 8010994 <__sinit+0x14>
 801098c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010990:	f7ff bff0 	b.w	8010974 <__sinit_lock_release>
 8010994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010998:	6523      	str	r3, [r4, #80]	; 0x50
 801099a:	4b13      	ldr	r3, [pc, #76]	; (80109e8 <__sinit+0x68>)
 801099c:	4a13      	ldr	r2, [pc, #76]	; (80109ec <__sinit+0x6c>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80109a2:	42a3      	cmp	r3, r4
 80109a4:	bf08      	it	eq
 80109a6:	2301      	moveq	r3, #1
 80109a8:	4620      	mov	r0, r4
 80109aa:	bf08      	it	eq
 80109ac:	61a3      	streq	r3, [r4, #24]
 80109ae:	f000 f81f 	bl	80109f0 <__sfp>
 80109b2:	6060      	str	r0, [r4, #4]
 80109b4:	4620      	mov	r0, r4
 80109b6:	f000 f81b 	bl	80109f0 <__sfp>
 80109ba:	60a0      	str	r0, [r4, #8]
 80109bc:	4620      	mov	r0, r4
 80109be:	f000 f817 	bl	80109f0 <__sfp>
 80109c2:	2200      	movs	r2, #0
 80109c4:	2104      	movs	r1, #4
 80109c6:	60e0      	str	r0, [r4, #12]
 80109c8:	6860      	ldr	r0, [r4, #4]
 80109ca:	f7ff ff81 	bl	80108d0 <std>
 80109ce:	2201      	movs	r2, #1
 80109d0:	2109      	movs	r1, #9
 80109d2:	68a0      	ldr	r0, [r4, #8]
 80109d4:	f7ff ff7c 	bl	80108d0 <std>
 80109d8:	2202      	movs	r2, #2
 80109da:	2112      	movs	r1, #18
 80109dc:	68e0      	ldr	r0, [r4, #12]
 80109de:	f7ff ff77 	bl	80108d0 <std>
 80109e2:	2301      	movs	r3, #1
 80109e4:	61a3      	str	r3, [r4, #24]
 80109e6:	e7d1      	b.n	801098c <__sinit+0xc>
 80109e8:	08010ec8 	.word	0x08010ec8
 80109ec:	08010919 	.word	0x08010919

080109f0 <__sfp>:
 80109f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f2:	4607      	mov	r7, r0
 80109f4:	f7ff ffac 	bl	8010950 <__sfp_lock_acquire>
 80109f8:	4b1e      	ldr	r3, [pc, #120]	; (8010a74 <__sfp+0x84>)
 80109fa:	681e      	ldr	r6, [r3, #0]
 80109fc:	69b3      	ldr	r3, [r6, #24]
 80109fe:	b913      	cbnz	r3, 8010a06 <__sfp+0x16>
 8010a00:	4630      	mov	r0, r6
 8010a02:	f7ff ffbd 	bl	8010980 <__sinit>
 8010a06:	3648      	adds	r6, #72	; 0x48
 8010a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a0c:	3b01      	subs	r3, #1
 8010a0e:	d503      	bpl.n	8010a18 <__sfp+0x28>
 8010a10:	6833      	ldr	r3, [r6, #0]
 8010a12:	b30b      	cbz	r3, 8010a58 <__sfp+0x68>
 8010a14:	6836      	ldr	r6, [r6, #0]
 8010a16:	e7f7      	b.n	8010a08 <__sfp+0x18>
 8010a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a1c:	b9d5      	cbnz	r5, 8010a54 <__sfp+0x64>
 8010a1e:	4b16      	ldr	r3, [pc, #88]	; (8010a78 <__sfp+0x88>)
 8010a20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a24:	60e3      	str	r3, [r4, #12]
 8010a26:	6665      	str	r5, [r4, #100]	; 0x64
 8010a28:	f000 f847 	bl	8010aba <__retarget_lock_init_recursive>
 8010a2c:	f7ff ff96 	bl	801095c <__sfp_lock_release>
 8010a30:	2208      	movs	r2, #8
 8010a32:	4629      	mov	r1, r5
 8010a34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a3c:	6025      	str	r5, [r4, #0]
 8010a3e:	61a5      	str	r5, [r4, #24]
 8010a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a44:	f7fd faa4 	bl	800df90 <memset>
 8010a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a50:	4620      	mov	r0, r4
 8010a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a54:	3468      	adds	r4, #104	; 0x68
 8010a56:	e7d9      	b.n	8010a0c <__sfp+0x1c>
 8010a58:	2104      	movs	r1, #4
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	f7ff ff62 	bl	8010924 <__sfmoreglue>
 8010a60:	4604      	mov	r4, r0
 8010a62:	6030      	str	r0, [r6, #0]
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d1d5      	bne.n	8010a14 <__sfp+0x24>
 8010a68:	f7ff ff78 	bl	801095c <__sfp_lock_release>
 8010a6c:	230c      	movs	r3, #12
 8010a6e:	603b      	str	r3, [r7, #0]
 8010a70:	e7ee      	b.n	8010a50 <__sfp+0x60>
 8010a72:	bf00      	nop
 8010a74:	08010ec8 	.word	0x08010ec8
 8010a78:	ffff0001 	.word	0xffff0001

08010a7c <_fwalk_reent>:
 8010a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a80:	4606      	mov	r6, r0
 8010a82:	4688      	mov	r8, r1
 8010a84:	2700      	movs	r7, #0
 8010a86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8010a92:	d505      	bpl.n	8010aa0 <_fwalk_reent+0x24>
 8010a94:	6824      	ldr	r4, [r4, #0]
 8010a96:	2c00      	cmp	r4, #0
 8010a98:	d1f7      	bne.n	8010a8a <_fwalk_reent+0xe>
 8010a9a:	4638      	mov	r0, r7
 8010a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa0:	89ab      	ldrh	r3, [r5, #12]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d907      	bls.n	8010ab6 <_fwalk_reent+0x3a>
 8010aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	d003      	beq.n	8010ab6 <_fwalk_reent+0x3a>
 8010aae:	4629      	mov	r1, r5
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	47c0      	blx	r8
 8010ab4:	4307      	orrs	r7, r0
 8010ab6:	3568      	adds	r5, #104	; 0x68
 8010ab8:	e7e9      	b.n	8010a8e <_fwalk_reent+0x12>

08010aba <__retarget_lock_init_recursive>:
 8010aba:	4770      	bx	lr

08010abc <__retarget_lock_acquire_recursive>:
 8010abc:	4770      	bx	lr

08010abe <__retarget_lock_release_recursive>:
 8010abe:	4770      	bx	lr

08010ac0 <__swhatbuf_r>:
 8010ac0:	b570      	push	{r4, r5, r6, lr}
 8010ac2:	460e      	mov	r6, r1
 8010ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ac8:	4614      	mov	r4, r2
 8010aca:	2900      	cmp	r1, #0
 8010acc:	461d      	mov	r5, r3
 8010ace:	b096      	sub	sp, #88	; 0x58
 8010ad0:	da08      	bge.n	8010ae4 <__swhatbuf_r+0x24>
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010ad8:	602a      	str	r2, [r5, #0]
 8010ada:	061a      	lsls	r2, r3, #24
 8010adc:	d410      	bmi.n	8010b00 <__swhatbuf_r+0x40>
 8010ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ae2:	e00e      	b.n	8010b02 <__swhatbuf_r+0x42>
 8010ae4:	466a      	mov	r2, sp
 8010ae6:	f000 f903 	bl	8010cf0 <_fstat_r>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	dbf1      	blt.n	8010ad2 <__swhatbuf_r+0x12>
 8010aee:	9a01      	ldr	r2, [sp, #4]
 8010af0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010af4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010af8:	425a      	negs	r2, r3
 8010afa:	415a      	adcs	r2, r3
 8010afc:	602a      	str	r2, [r5, #0]
 8010afe:	e7ee      	b.n	8010ade <__swhatbuf_r+0x1e>
 8010b00:	2340      	movs	r3, #64	; 0x40
 8010b02:	2000      	movs	r0, #0
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	b016      	add	sp, #88	; 0x58
 8010b08:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b0c <__smakebuf_r>:
 8010b0c:	898b      	ldrh	r3, [r1, #12]
 8010b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b10:	079d      	lsls	r5, r3, #30
 8010b12:	4606      	mov	r6, r0
 8010b14:	460c      	mov	r4, r1
 8010b16:	d507      	bpl.n	8010b28 <__smakebuf_r+0x1c>
 8010b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b1c:	6023      	str	r3, [r4, #0]
 8010b1e:	6123      	str	r3, [r4, #16]
 8010b20:	2301      	movs	r3, #1
 8010b22:	6163      	str	r3, [r4, #20]
 8010b24:	b002      	add	sp, #8
 8010b26:	bd70      	pop	{r4, r5, r6, pc}
 8010b28:	466a      	mov	r2, sp
 8010b2a:	ab01      	add	r3, sp, #4
 8010b2c:	f7ff ffc8 	bl	8010ac0 <__swhatbuf_r>
 8010b30:	9900      	ldr	r1, [sp, #0]
 8010b32:	4605      	mov	r5, r0
 8010b34:	4630      	mov	r0, r6
 8010b36:	f7ff f969 	bl	800fe0c <_malloc_r>
 8010b3a:	b948      	cbnz	r0, 8010b50 <__smakebuf_r+0x44>
 8010b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b40:	059a      	lsls	r2, r3, #22
 8010b42:	d4ef      	bmi.n	8010b24 <__smakebuf_r+0x18>
 8010b44:	f023 0303 	bic.w	r3, r3, #3
 8010b48:	f043 0302 	orr.w	r3, r3, #2
 8010b4c:	81a3      	strh	r3, [r4, #12]
 8010b4e:	e7e3      	b.n	8010b18 <__smakebuf_r+0xc>
 8010b50:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <__smakebuf_r+0x7c>)
 8010b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	6020      	str	r0, [r4, #0]
 8010b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b5c:	81a3      	strh	r3, [r4, #12]
 8010b5e:	9b00      	ldr	r3, [sp, #0]
 8010b60:	6120      	str	r0, [r4, #16]
 8010b62:	6163      	str	r3, [r4, #20]
 8010b64:	9b01      	ldr	r3, [sp, #4]
 8010b66:	b15b      	cbz	r3, 8010b80 <__smakebuf_r+0x74>
 8010b68:	4630      	mov	r0, r6
 8010b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b6e:	f000 f8d1 	bl	8010d14 <_isatty_r>
 8010b72:	b128      	cbz	r0, 8010b80 <__smakebuf_r+0x74>
 8010b74:	89a3      	ldrh	r3, [r4, #12]
 8010b76:	f023 0303 	bic.w	r3, r3, #3
 8010b7a:	f043 0301 	orr.w	r3, r3, #1
 8010b7e:	81a3      	strh	r3, [r4, #12]
 8010b80:	89a0      	ldrh	r0, [r4, #12]
 8010b82:	4305      	orrs	r5, r0
 8010b84:	81a5      	strh	r5, [r4, #12]
 8010b86:	e7cd      	b.n	8010b24 <__smakebuf_r+0x18>
 8010b88:	08010919 	.word	0x08010919

08010b8c <_malloc_usable_size_r>:
 8010b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b90:	1f18      	subs	r0, r3, #4
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	bfbc      	itt	lt
 8010b96:	580b      	ldrlt	r3, [r1, r0]
 8010b98:	18c0      	addlt	r0, r0, r3
 8010b9a:	4770      	bx	lr

08010b9c <_raise_r>:
 8010b9c:	291f      	cmp	r1, #31
 8010b9e:	b538      	push	{r3, r4, r5, lr}
 8010ba0:	4604      	mov	r4, r0
 8010ba2:	460d      	mov	r5, r1
 8010ba4:	d904      	bls.n	8010bb0 <_raise_r+0x14>
 8010ba6:	2316      	movs	r3, #22
 8010ba8:	6003      	str	r3, [r0, #0]
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010bb2:	b112      	cbz	r2, 8010bba <_raise_r+0x1e>
 8010bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010bb8:	b94b      	cbnz	r3, 8010bce <_raise_r+0x32>
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 f830 	bl	8010c20 <_getpid_r>
 8010bc0:	462a      	mov	r2, r5
 8010bc2:	4601      	mov	r1, r0
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bca:	f000 b817 	b.w	8010bfc <_kill_r>
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d00a      	beq.n	8010be8 <_raise_r+0x4c>
 8010bd2:	1c59      	adds	r1, r3, #1
 8010bd4:	d103      	bne.n	8010bde <_raise_r+0x42>
 8010bd6:	2316      	movs	r3, #22
 8010bd8:	6003      	str	r3, [r0, #0]
 8010bda:	2001      	movs	r0, #1
 8010bdc:	e7e7      	b.n	8010bae <_raise_r+0x12>
 8010bde:	2400      	movs	r4, #0
 8010be0:	4628      	mov	r0, r5
 8010be2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010be6:	4798      	blx	r3
 8010be8:	2000      	movs	r0, #0
 8010bea:	e7e0      	b.n	8010bae <_raise_r+0x12>

08010bec <raise>:
 8010bec:	4b02      	ldr	r3, [pc, #8]	; (8010bf8 <raise+0xc>)
 8010bee:	4601      	mov	r1, r0
 8010bf0:	6818      	ldr	r0, [r3, #0]
 8010bf2:	f7ff bfd3 	b.w	8010b9c <_raise_r>
 8010bf6:	bf00      	nop
 8010bf8:	200001a8 	.word	0x200001a8

08010bfc <_kill_r>:
 8010bfc:	b538      	push	{r3, r4, r5, lr}
 8010bfe:	2300      	movs	r3, #0
 8010c00:	4d06      	ldr	r5, [pc, #24]	; (8010c1c <_kill_r+0x20>)
 8010c02:	4604      	mov	r4, r0
 8010c04:	4608      	mov	r0, r1
 8010c06:	4611      	mov	r1, r2
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	f7f3 f8fe 	bl	8003e0a <_kill>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	d102      	bne.n	8010c18 <_kill_r+0x1c>
 8010c12:	682b      	ldr	r3, [r5, #0]
 8010c14:	b103      	cbz	r3, 8010c18 <_kill_r+0x1c>
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	bd38      	pop	{r3, r4, r5, pc}
 8010c1a:	bf00      	nop
 8010c1c:	200018c4 	.word	0x200018c4

08010c20 <_getpid_r>:
 8010c20:	f7f3 b8ec 	b.w	8003dfc <_getpid>

08010c24 <__sread>:
 8010c24:	b510      	push	{r4, lr}
 8010c26:	460c      	mov	r4, r1
 8010c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c2c:	f000 f894 	bl	8010d58 <_read_r>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	bfab      	itete	ge
 8010c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c36:	89a3      	ldrhlt	r3, [r4, #12]
 8010c38:	181b      	addge	r3, r3, r0
 8010c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c3e:	bfac      	ite	ge
 8010c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c42:	81a3      	strhlt	r3, [r4, #12]
 8010c44:	bd10      	pop	{r4, pc}

08010c46 <__swrite>:
 8010c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4a:	461f      	mov	r7, r3
 8010c4c:	898b      	ldrh	r3, [r1, #12]
 8010c4e:	4605      	mov	r5, r0
 8010c50:	05db      	lsls	r3, r3, #23
 8010c52:	460c      	mov	r4, r1
 8010c54:	4616      	mov	r6, r2
 8010c56:	d505      	bpl.n	8010c64 <__swrite+0x1e>
 8010c58:	2302      	movs	r3, #2
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c60:	f000 f868 	bl	8010d34 <_lseek_r>
 8010c64:	89a3      	ldrh	r3, [r4, #12]
 8010c66:	4632      	mov	r2, r6
 8010c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c6c:	81a3      	strh	r3, [r4, #12]
 8010c6e:	4628      	mov	r0, r5
 8010c70:	463b      	mov	r3, r7
 8010c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7a:	f000 b817 	b.w	8010cac <_write_r>

08010c7e <__sseek>:
 8010c7e:	b510      	push	{r4, lr}
 8010c80:	460c      	mov	r4, r1
 8010c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c86:	f000 f855 	bl	8010d34 <_lseek_r>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	89a3      	ldrh	r3, [r4, #12]
 8010c8e:	bf15      	itete	ne
 8010c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c9a:	81a3      	strheq	r3, [r4, #12]
 8010c9c:	bf18      	it	ne
 8010c9e:	81a3      	strhne	r3, [r4, #12]
 8010ca0:	bd10      	pop	{r4, pc}

08010ca2 <__sclose>:
 8010ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ca6:	f000 b813 	b.w	8010cd0 <_close_r>
	...

08010cac <_write_r>:
 8010cac:	b538      	push	{r3, r4, r5, lr}
 8010cae:	4604      	mov	r4, r0
 8010cb0:	4608      	mov	r0, r1
 8010cb2:	4611      	mov	r1, r2
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4d05      	ldr	r5, [pc, #20]	; (8010ccc <_write_r+0x20>)
 8010cb8:	602a      	str	r2, [r5, #0]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	f7f3 f8dc 	bl	8003e78 <_write>
 8010cc0:	1c43      	adds	r3, r0, #1
 8010cc2:	d102      	bne.n	8010cca <_write_r+0x1e>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	b103      	cbz	r3, 8010cca <_write_r+0x1e>
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	200018c4 	.word	0x200018c4

08010cd0 <_close_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	4d05      	ldr	r5, [pc, #20]	; (8010cec <_close_r+0x1c>)
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
 8010cda:	602b      	str	r3, [r5, #0]
 8010cdc:	f7f3 f8e8 	bl	8003eb0 <_close>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_close_r+0x1a>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_close_r+0x1a>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	200018c4 	.word	0x200018c4

08010cf0 <_fstat_r>:
 8010cf0:	b538      	push	{r3, r4, r5, lr}
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	4d06      	ldr	r5, [pc, #24]	; (8010d10 <_fstat_r+0x20>)
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	f7f3 f8e2 	bl	8003ec6 <_fstat>
 8010d02:	1c43      	adds	r3, r0, #1
 8010d04:	d102      	bne.n	8010d0c <_fstat_r+0x1c>
 8010d06:	682b      	ldr	r3, [r5, #0]
 8010d08:	b103      	cbz	r3, 8010d0c <_fstat_r+0x1c>
 8010d0a:	6023      	str	r3, [r4, #0]
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop
 8010d10:	200018c4 	.word	0x200018c4

08010d14 <_isatty_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	2300      	movs	r3, #0
 8010d18:	4d05      	ldr	r5, [pc, #20]	; (8010d30 <_isatty_r+0x1c>)
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	4608      	mov	r0, r1
 8010d1e:	602b      	str	r3, [r5, #0]
 8010d20:	f7f3 f8e0 	bl	8003ee4 <_isatty>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d102      	bne.n	8010d2e <_isatty_r+0x1a>
 8010d28:	682b      	ldr	r3, [r5, #0]
 8010d2a:	b103      	cbz	r3, 8010d2e <_isatty_r+0x1a>
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	bd38      	pop	{r3, r4, r5, pc}
 8010d30:	200018c4 	.word	0x200018c4

08010d34 <_lseek_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4604      	mov	r4, r0
 8010d38:	4608      	mov	r0, r1
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	4d05      	ldr	r5, [pc, #20]	; (8010d54 <_lseek_r+0x20>)
 8010d40:	602a      	str	r2, [r5, #0]
 8010d42:	461a      	mov	r2, r3
 8010d44:	f7f3 f8d8 	bl	8003ef8 <_lseek>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	d102      	bne.n	8010d52 <_lseek_r+0x1e>
 8010d4c:	682b      	ldr	r3, [r5, #0]
 8010d4e:	b103      	cbz	r3, 8010d52 <_lseek_r+0x1e>
 8010d50:	6023      	str	r3, [r4, #0]
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	200018c4 	.word	0x200018c4

08010d58 <_read_r>:
 8010d58:	b538      	push	{r3, r4, r5, lr}
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	4611      	mov	r1, r2
 8010d60:	2200      	movs	r2, #0
 8010d62:	4d05      	ldr	r5, [pc, #20]	; (8010d78 <_read_r+0x20>)
 8010d64:	602a      	str	r2, [r5, #0]
 8010d66:	461a      	mov	r2, r3
 8010d68:	f7f3 f869 	bl	8003e3e <_read>
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	d102      	bne.n	8010d76 <_read_r+0x1e>
 8010d70:	682b      	ldr	r3, [r5, #0]
 8010d72:	b103      	cbz	r3, 8010d76 <_read_r+0x1e>
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	200018c4 	.word	0x200018c4

08010d7c <_init>:
 8010d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d7e:	bf00      	nop
 8010d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d82:	bc08      	pop	{r3}
 8010d84:	469e      	mov	lr, r3
 8010d86:	4770      	bx	lr

08010d88 <_fini>:
 8010d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d8a:	bf00      	nop
 8010d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d8e:	bc08      	pop	{r3}
 8010d90:	469e      	mov	lr, r3
 8010d92:	4770      	bx	lr
